package jkt.hms.opd.dataservice;

import static jkt.hms.util.RequestConstants.*;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.Vector;

import jkt.hms.masters.business.*;
import jkt.hms.util.Box;
import jkt.hms.util.HMSUtil;
import jkt.hms.util.RequestConstants;
import jkt.hms.util.StringComparator;
import oracle.jdbc.OracleCallableStatement;
import oracle.jdbc.OracleResultSet;
import oracle.jdbc.OracleTypes;

import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Transaction;
import org.hibernate.classic.Session;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projection;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.springframework.dao.DataAccessException;
import org.springframework.orm.hibernate3.HibernateTemplate;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;

public class OPDDataServiceImpl extends HibernateDaoSupport implements
		OPDDataService {

	// ------------------------------------------methods written by
	// Vikas---------------------------------
	@SuppressWarnings( { "unused", "unchecked" })
	public Map<String, Object> getWaitingPatientList(Map mapForDS) {

		Session session = (Session) getSession();
		List<Visit> patientList = new ArrayList<Visit>();
		List<MasEmployee> doctorList = new ArrayList<MasEmployee>();
		List<MasUnit> unitList = new ArrayList<MasUnit>();
		List<MasRelation> relationList = new ArrayList<MasRelation>();
		List<MasRank> rankList = new ArrayList<MasRank>();
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = (Integer) mapForDS.get("deptId");
		int hospitalId = (Integer) mapForDS.get("hospitalId");
		String deptName = "";
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		// Date date=HMSUtil.convertStringTypeDateToDateType(currentDate);
		Date date = new Date();
		String category = "Doctor";
		int unitId  = 0;
		int relationId = 0;
		int rankId = 0;
		String serviceNo = "";
		String reportingDept[] = {"OPD","FollowUp"};
		try {
			if(mapForDS.get("rankId") != null){
				rankId = (Integer)mapForDS.get("rankId");
			}
			if(mapForDS.get("unitId") != null){
				unitId = (Integer)mapForDS.get("unitId");
			}
			if(mapForDS.get("relationId") != null){
				relationId = (Integer)mapForDS.get("relationId");
			}
			if(mapForDS.get("serviceNo") != null){
				serviceNo = (String)mapForDS.get("serviceNo");
			}
			
			if (mapForDS.get("empId") != null && (Integer) mapForDS.get("empId") > 0) {
				int empId = (Integer) mapForDS.get("empId");
				Criteria crit = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitDate", date)).add(
						Restrictions.eq("VisitStatus", "w")).add(
						Restrictions.eq("Doctor.Id", empId))
						//.add(Restrictions.eq("Department.Id", deptId))
						.createAlias("Hospital", "h").add(Restrictions.eq("h.Id", hospitalId))
						.add(Restrictions.in("ReportingFor", reportingDept)).addOrder(Order.asc("TokenNo"));
				if(rankId != 0){
					crit = crit.createAlias("Hin", "hin").createAlias("Hin.Rank", "rank").add(Restrictions.eq("rank.Id", rankId));
				}
				if(relationId != 0){
					crit = crit.createAlias("Hin", "hin").createAlias("Hin.Relation", "relation").add(Restrictions.eq("relation.Id", relationId));
				}
				if(unitId != 0){
					crit = crit.createAlias("Hin", "hin").createAlias("Hin.Unit", "unit").add(Restrictions.eq("unit.Id", unitId));
				}
				if(!serviceNo.equals("")){
					crit = crit.createAlias("Hin", "hin").add(Restrictions.eq("hin.ServiceNo", serviceNo));
				}
				patientList = crit.list();
				
				map.put("empId", empId);
			} else {
				Criteria crit = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitDate", date)).add(
						Restrictions.eq("VisitStatus", "w"))
						//.add(Restrictions.eq("Department.Id", deptId))
						.createAlias("Hospital", "h").add(Restrictions.eq("h.Id", hospitalId))
						.add(Restrictions.in("ReportingFor", reportingDept))
						.addOrder(Order.asc("TokenNo"));
				if(rankId != 0){
					crit = crit.createAlias("Hin", "hin").createAlias("Hin.Rank", "rank").add(Restrictions.eq("rank.Id", rankId));
				}
				if(relationId != 0){
					crit = crit.createAlias("Hin", "hin").createAlias("Hin.Relation", "relation").add(Restrictions.eq("relation.Id", relationId));
				}
				if(unitId != 0){
					crit = crit.createAlias("Hin", "hin").createAlias("Hin.Unit", "unit").add(Restrictions.eq("unit.Id", unitId));
				}
				if(!serviceNo.equals("")){
					crit = crit.createAlias("Hin", "hin").add(Restrictions.eq("hin.ServiceNo", serviceNo));
				}
				patientList = crit.list();
			}
			
			doctorList=session.createCriteria(MasEmployee.class).add(Restrictions.eq("Status", "y"))
			.createAlias("Hospital", "h").add(Restrictions.eq("h.Id", hospitalId)).list();
			unitList = session.createCriteria(MasUnit.class).add(Restrictions.eq("Status", "y")).list();
			rankList = session.createCriteria(MasRank.class).add(Restrictions.eq("Status", "y")).list();
			relationList = session.createCriteria(MasRelation.class).add(Restrictions.eq("Status", "y")).list();
			
		/*	doctorList = session.createCriteria(MasEmployee.class).createAlias(
					"EmpCategory", "empCategory").createAlias("Department",
					"dept").add(
					Restrictions.eq("empCategory.EmpCategoryName", category))
					.add(Restrictions.eq("dept.Id", deptId)).list();
           */
			Map<String, Object> deptMap = getDepartmentNameFromId(deptId);
			if (deptMap.get("deptName") != null) {
				deptName = (String) deptMap.get("deptName");
			}

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientList", patientList);
		map.put("unitList", unitList);
		map.put("rankList", rankList);
		map.put("relationList", relationList);
		map.put("doctorList", doctorList);
		map.put("deptName", deptName);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> searchWaitingPatientList(Map mapForDS) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Patient> patientList = new ArrayList<Patient>();
		List<MasEmployee> doctorList = new ArrayList<MasEmployee>();


		String serviceNo = "";
		String hinNo = "";
		String employeeName = "";
		String serviceTypeName = "";
		String patientFName = "";
		String patientMName = "";
		String patientLName = "";
		Date currentDate = null;
		int deptId = 0; 
		int hospitalId = 0; 
		Session session = (Session) getSession();
		hospitalId = (Integer) mapForDS.get("hospitalId");
		if (mapForDS.get("deptId") != null) {
			deptId = (Integer) mapForDS.get("deptId");
		}
		if (mapForDS.get("serviceNo") != null) {
			serviceNo = (String) mapForDS.get("serviceNo");
		}
		if (mapForDS.get("hinNo") != null) {
			hinNo = (String) mapForDS.get("hinNo");
		}
		if (mapForDS.get("serviceTypeName") != null) {
			serviceTypeName = (String) mapForDS.get("serviceTypeName");
		}
		if (mapForDS.get("patientFName") != null) {
			patientFName = (String) mapForDS.get("patientFName");
		}
		if (mapForDS.get("patientMName") != null) {
			patientMName = (String) mapForDS.get("patientMName");
		}
		if (mapForDS.get("patientLName") != null) {
			patientLName = (String) mapForDS.get("patientLName");
		}
		if (mapForDS.get("currentDate") != null) {
			currentDate = (Date) mapForDS.get("currentDate");
		}
		SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
		Date vdate=new Date(sdf.format(currentDate));
		Criteria crit = session.createCriteria(Visit.class)
				.createAlias("Hin", "hin").add(
						Restrictions.eq("VisitDate", currentDate));
		if (hinNo.equals("")) {
			if (!serviceTypeName.equals("")) {
				crit = crit.createAlias("hin.ServiceType", "masService").add(
						Restrictions.eq("masService.ServiceTypeName",
								serviceTypeName));
			}
			if (!serviceNo.equals("")) {
				crit = crit.add(Restrictions.eq("hin.ServiceNo", serviceNo.trim()));
			}
			
			if (!patientFName.equals("")) {
				crit = crit.add(Restrictions.like("hin.PFirstName",patientFName.trim()).ignoreCase()); 
					}
			if (!patientMName.equals("")) {
				crit = crit.add(Restrictions.like("hin.PMiddleName",patientMName.trim()).ignoreCase()); 
			}
			if (!patientLName.equals("")) {
				crit = crit.add(Restrictions.like("hin.PLastName", patientLName.trim()).ignoreCase()); 
			}
		} else {
			crit = crit.add(Restrictions.eq("hin.HinNo", hinNo.trim()));
		}
		patientList = crit.list();
		
		String category = "Doctor";
		/*doctorList = session.createCriteria(MasEmployee.class).createAlias(
				"EmpCategory", "empCategory").createAlias("Department",
				"dept").add(
				Restrictions.eq("empCategory.EmpCategoryName", category))
				.add(Restrictions.eq("dept.Id", deptId)).list();
*/
		doctorList = session.createCriteria(MasEmployee.class).add(Restrictions.eq("Status", "y"))
		.createAlias("Hospital", "h").add(Restrictions.eq("h.Id", hospitalId)).list();
		map.put("doctorList", doctorList);
		map.put("patientList", patientList);

		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getPatientDetails(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List<Visit> patientLastVisitList = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<OpdPatientDetails> opdDetailListForFollowUp = new ArrayList<OpdPatientDetails>();
		List<OpdPatientHistory> opdHistoryDetailsListForFollowUp = new ArrayList<OpdPatientHistory>();
		List<PatientInvestigationHeader>patientInvestigationHeaderListForFollowUp = new ArrayList<PatientInvestigationHeader>();
		List<PatientPrescriptionHeader> patientPrescriptionHeaderList = new ArrayList<PatientPrescriptionHeader>();
		List<DischargeIcdCode> dischargeIcdCodeList = new ArrayList<DischargeIcdCode>();

		try {

			// patientList=session.createQuery("select v from Visit as v where   v.VisitDate="+date
			// ).list();
			// v.VisitDate="+date ).list();
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();
		if(patientDataList.get(0).getReportingFor().equals("FollowUp")){
				 int hinId = patientDataList.get(0).getHin().getId();
				 String department =  patientDataList.get(0).getFollowUpDepartment();
				 if(department != null){
				 patientLastVisitList = session.createCriteria(Visit.class).add(Restrictions.eq("Hin.Id", hinId))
				 							.add(Restrictions.or(Restrictions.eq("ReportingFor",department), Restrictions.eq("FollowUpDepartment", department)))
				 							.add(Restrictions.eq("VisitStatus", "C")).add(Restrictions.ne("Id",visitId)).setMaxResults(1).addOrder(Order.desc("Id")).list();
				 if(patientLastVisitList.size()>0){
				 int lastVisitId = patientLastVisitList.get(0).getId();
			
				opdDetailListForFollowUp = session.createCriteria(OpdPatientDetails.class).createAlias("Visit", "visit")
					.add(Restrictions.eq("visit.Id", lastVisitId)).list();
			
			
				opdHistoryDetailsListForFollowUp = session.createCriteria(OpdPatientHistory.class).createAlias("OpdPatientDetails", "details")
								.createAlias("details.Visit", "visit").add(Restrictions.eq("visit.Id", lastVisitId)).list();
		
				patientInvestigationHeaderListForFollowUp = session.createCriteria(PatientInvestigationHeader.class).createAlias("Visit", "visit")
									.add(Restrictions.eq("visit.Id", lastVisitId)).list();
				patientPrescriptionHeaderList = session.createCriteria(PatientPrescriptionHeader.class).createAlias("Visit", "visit")
													.add(Restrictions.eq("visit.Id", lastVisitId)).list();
				dischargeIcdCodeList = session.createCriteria(DischargeIcdCode.class).createAlias("Visit", "visit")
											.add(Restrictions.eq("visit.Id", lastVisitId)).list();
				}
			}
		}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("dischargeIcdCodeList", dischargeIcdCodeList);
		map.put("patientDataList", patientDataList);
		map.put("opdDetailListForFollowUp", opdDetailListForFollowUp);
		map.put("opdHistoryDetailsListForFollowUp", opdHistoryDetailsListForFollowUp);
		map.put("patientInvestigationHeaderListForFollowUp", patientInvestigationHeaderListForFollowUp);
		map.put("patientPrescriptionHeaderList", patientPrescriptionHeaderList);
		return map;
	}
	public Map<String , Object> getOpdOphthalmology(int VisitId){
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<OpdOphthalmology> opdOphthalmologyList = null ;
		try{
		map = getPatientDetails(VisitId);
		opdOphthalmologyList = session.createCriteria(OpdOphthalmology.class).createAlias("Visit","v")
								.add(Restrictions.eq("v.Id", VisitId)).list();
		map.put("opdOphthalmologyList", opdOphthalmologyList);
		
		}catch(HibernateException e){
			e.printStackTrace();
		}
		return map;
		
	}
	public Map<String , Object> getOpdOphthalmologyFollowUp(int VisitId){
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<OpdOphFollowUp> opdOphFollowUpList = null ;
		try{
		map = getPatientDetails(VisitId);
		opdOphFollowUpList = session.createCriteria(OpdOphFollowUp.class).createAlias("Visit","v")
								.add(Restrictions.eq("v.Id", VisitId)).list();
		map.put("opdOphFollowUpList", opdOphFollowUpList);
		
		}catch(HibernateException e){
			e.printStackTrace();
		}
		return map;
		
	}

	public Map<String, Object> getPatientDetailsForPrescribtion(int visitNo,
			String HinNo) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List<PatientPrescriptionDetails> patientPreList = new ArrayList<PatientPrescriptionDetails>();
		List<PatientPrescriptionHeader> patientHeaList = new ArrayList<PatientPrescriptionHeader>();
		List<Patient> patientList = new ArrayList<Patient>();
		List<PatientInvestigationDetails> pInvList = new ArrayList<PatientInvestigationDetails>();
		Map<String, Object> map = new HashMap<String, Object>();

		try {

			// patientList=session.createQuery("select v from Visit as v where   v.VisitDate="+date
			// ).list();
			// v.VisitDate="+date ).list();
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("VisitNo", visitNo))
					.createAlias("Hin", "p").add(
							Restrictions.eq("p.HinNo", HinNo)).list();
			int visitId = 0;
			if (patientDataList.size() > 0) {
				visitId = (Integer) patientDataList.get(0).getId();
			}
			patientList = session.createCriteria(Patient.class).add(
					Restrictions.eq("HinNo", HinNo)).list();
			int hin_id = 0;
			if (patientList.size() > 0) {
				hin_id = (Integer) patientList.get(0).getId();
			}

			patientPreList = session.createCriteria(
					PatientPrescriptionDetails.class).createAlias(
					"Prescription", "p").add(
					Restrictions.eq("p.Visit.Id", visitId)).add(
					Restrictions.eq("p.Hin.Id", hin_id)).list();

			pInvList = session
					.createCriteria(PatientInvestigationDetails.class)
					.createAlias("InvestigationHeader", "i").add(
							Restrictions.eq("i.Visit.Id", visitId)).add(
							Restrictions.eq("i.Hin.Id", hin_id)).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		map.put("patientPreList", patientPreList);
		map.put("pInvList", pInvList);

		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getICDList(Map map) {
		List<MasIcd> itemList = new ArrayList<MasIcd>();
		Session session = (Session) getSession();
		try {
			String str ="%" +(String)map.get("autoHint") + "%";
			/*String query = "from MasIcd as icd where upper (icd.IcdName) like upper('" + str
					+ "')";*/
			/*
			 * Change HQL to Named HQL
			 * Code By Mukesh
			 * Date 15 Aug 2012
			 */
			String query = "from MasIcd as icd where upper (icd.IcdName) like upper(:str)";
			Query q = session.createQuery(query);
			q.setParameter("str",str);
			q.setFirstResult(0);
			q.setMaxResults(10);
			itemList = q.list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getOPDDetails(Map mapForDS) {
		Session session = (Session) getSession();
		List<OpdTemplate> templateList = new ArrayList<OpdTemplate>();
		List<MasDepartment> deptList = new ArrayList<MasDepartment>();
		List<MasStoreItemConversion> itemConversionList = new ArrayList<MasStoreItemConversion>();
		//List<MasTherapyType> therapyTypeList = new ArrayList<MasTherapyType>();
		List<MasMedicalExaminationReportOnEntry> medicalList = new ArrayList<MasMedicalExaminationReportOnEntry>();
		//List<Visit> listOfPreviousVisit3 = new ArrayList<Visit>();
		//List<Visit> listOfPreviousVisit2 = new ArrayList<Visit>();
		//List<Visit> listOfPreviousVisit1 = new ArrayList<Visit>();
		List<MasDisposal> disposalTypeList = null;
		List<PatientFamilyHistory> patientFamilyHistoryList=new ArrayList<PatientFamilyHistory>(); 
		
		//List<OpdPatientDetails> listOfOpd3 = new ArrayList<OpdPatientDetails>();
		//List<OpdPatientDetails> listOfOpd2 = new ArrayList<OpdPatientDetails>();
		//List<OpdPatientDetails> listOfOpd1 = new ArrayList<OpdPatientDetails>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();
		HibernateTemplate hbt = getHibernateTemplate();
		int deptId = (Integer) mapForDS.get("deptId");
		int visitNo = (Integer) mapForDS.get("visitNo");
		int hinId = (Integer) mapForDS.get("hinId");
		int visitIdd = (Integer) mapForDS.get("visitId");
		try {
			List<String> departmentTypeCode = new ArrayList<String>();
			departmentTypeCode.add("PHYSIO");
			departmentTypeCode.add("Dental1");
			departmentTypeCode.add("Medicare");
			departmentTypeCode.add("FWC");
			departmentTypeCode.add("REC");
			departmentTypeCode.add("MHH");
			
			String currentYearVisitCountSql="select count(*) from visit where to_char(visit_date, 'YYYY')= to_char(sysdate, 'YYYY') and hin_id="+hinId+"";
			List<Object> currentYearVisitCountList = new ArrayList<Object>();
			currentYearVisitCountList=session.createSQLQuery(currentYearVisitCountSql).list();
			int visitCount=0;
			if(currentYearVisitCountList.size()>0 && currentYearVisitCountList!=null){
				visitCount=Integer.parseInt(""+currentYearVisitCountList.get(0));
			}
			map.put("visitCount", visitCount);
			//System.out.println(visitCount+"<--visitCount---currentYearVisitCountList-->"+currentYearVisitCountList);
			disposalTypeList = hbt.find("from MasDisposal mdt where mdt.Status='y' order by mdt.DisposalName asc");
			
			deptList = session.createCriteria(MasDepartment.class).add(
					Restrictions.eq("Status", "y"))
			.add(Restrictions.in("DepartmentCode",departmentTypeCode)).list();
			
			templateList = session.createCriteria(OpdTemplate.class)
					.createAlias("Department", "dept").add(
							Restrictions.eq("dept.Id", deptId)).add(
							Restrictions.eq("Status", "y")).list();
			frequencyList = session.createCriteria(MasFrequency.class).add(
					Restrictions.eq("Status", "y")).list();
			//therapyTypeList = session.createCriteria(MasTherapyType.class).add(
				//	Restrictions.eq("Status", "y")).list();
			medicalList = session.createCriteria(MasMedicalExaminationReportOnEntry.class).add(
					Restrictions.eq("Visit.Id",visitIdd )).list();
			//System.out.println("medicalList---"+medicalList.size());
			patientFamilyHistoryList= session.createCriteria(PatientFamilyHistory.class).add(
					Restrictions.eq("Status", "y")).addOrder(Order.asc("PatientHistoryName")).list();
			itemConversionList = session.createCriteria(MasStoreItemConversion.class).add(Restrictions.eq("Status", "y")).addOrder(Order.asc("ItemUnitName")).list();
			/*visitNo = visitNo - 1;
			int j = 1;
			for (int i = visitNo; i > 0; i--) {

				if (j == 1) {
					listOfPreviousVisit3 = session.createCriteria(Visit.class)
							.createAlias("Hin", "hin").add(
									Restrictions.eq("hin.Id", hinId)).add(
									Restrictions.eq("VisitNo", visitNo)).list();
					Visit visit = new Visit();
					int visitId = 0;
					if (listOfPreviousVisit3 != null
							&& listOfPreviousVisit3.size() > 0) {
						visit = (Visit) listOfPreviousVisit3.get(0);
						visitId = visit.getId();
					}
					//System.out.println("j:::" + j + "::visitNo::" + visitNo+ "::visitId::" + visitId);
					listOfOpd3 = (List<OpdPatientDetails>) session
							.createCriteria(OpdPatientDetails.class)
							.createAlias("Visit", "visit").add(
									Restrictions.eq("visit.Id", visitId))
							.list();
					visitNo = visitNo - 1;
					if (listOfOpd3.size() > 0) {
						map.put("listOfOpd3", listOfOpd3);
					}
				}
				if (j == 2) {
					listOfPreviousVisit2 = session.createCriteria(Visit.class)
							.createAlias("Hin", "hin").add(
									Restrictions.eq("hin.Id", hinId)).add(
									Restrictions.eq("VisitNo", visitNo)).list();
					Visit visit = new Visit();
					int visitId = 0;
					if (listOfPreviousVisit2 != null
							&& listOfPreviousVisit2.size() > 0) {
						visit = (Visit) listOfPreviousVisit2.get(0);
						visitId = visit.getId();
					}
					//System.out.println("j:::" + j + "::visitNo::" + visitNo+ "::visitId::" + visitId);
					listOfOpd2 = (List<OpdPatientDetails>) session
							.createCriteria(OpdPatientDetails.class)
							.createAlias("Visit", "visit").add(
									Restrictions.eq("visit.Id", visitId))
							.list();
					visitNo = visitNo - 1;
					if (listOfOpd2.size() > 0) {
						map.put("listOfOpd2", listOfOpd2);
					}
				}
				if (j == 3) {
					listOfPreviousVisit1 = session.createCriteria(Visit.class)
							.createAlias("Hin", "hin").add(
									Restrictions.eq("hin.Id", hinId)).add(
									Restrictions.eq("VisitNo", visitNo)).list();
					Visit visit = new Visit();
					int visitId = 0;
					if (listOfPreviousVisit1 != null
							&& listOfPreviousVisit1.size() > 0) {
						visit = (Visit) listOfPreviousVisit1.get(0);
						visitId = visit.getId();
					}
					//System.out.println("j:::" + j + "::visitNo::" + visitNo+ "::visitId::" + visitId);
					listOfOpd1 = (List<OpdPatientDetails>) session
							.createCriteria(OpdPatientDetails.class)
							.createAlias("Visit", "visit").add(
									Restrictions.eq("visit.Id", visitId))
							.list();
					visitNo = visitNo - 1;
					if (listOfOpd1.size() > 0) {
						map.put("listOfOpd1", listOfOpd1);
					}
					break;
				}

				j++;
			}*/

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		
		
		map.put("medicalList", medicalList);
		map.put("deptList", deptList);
		map.put("templateList", templateList); 
		map.put("frequencyList", frequencyList);	
		map.put("itemConversionList", itemConversionList);
		//map.put("therapyTypeList", therapyTypeList);
		map.put("disposalTypeList", disposalTypeList);
		map.put("patientFamilyHistoryList", patientFamilyHistoryList);
		return map;

	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getOPDDetailsForOpdUpdate(Map mapForDS) {
		Session session = (Session) getSession();
		List<OpdTemplate> templateList = new ArrayList<OpdTemplate>();
		List<MasDepartment> deptList = new ArrayList<MasDepartment>();
		//List<Visit> listOfPreviousVisit3 = new ArrayList<Visit>();
		//List<Visit> listOfPreviousVisit2 = new ArrayList<Visit>();
		//List<Visit> listOfPreviousVisit1 = new ArrayList<Visit>();

		//List<Visit> listOfOpd3 = new ArrayList<Visit>();
		//List<Visit> listOfOpd2 = new ArrayList<Visit>();
		//List<Visit> listOfOpd1 = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();
		int deptId = (Integer) mapForDS.get("deptId");
		int visitId1 = (Integer) mapForDS.get("visitNo");
		int visitNo = 1;
		int hinId = (Integer) mapForDS.get("hinId");
		try {
			List<String> departmentTypeCode = new ArrayList<String>();
			

			deptList = session.createCriteria(MasDepartment.class).createAlias(
					"DepartmentType", "deptType").list();
			templateList = session.createCriteria(OpdTemplate.class)
					.createAlias("Department", "dept").add(
							Restrictions.eq("dept.Id", deptId)).list();
			frequencyList = session.createCriteria(MasFrequency.class).list();
			/*List<Visit> visitList = new ArrayList<Visit>();
			visitList = session.createCriteria(Visit.class).createAlias("Hin",
					"hin").add(Restrictions.eq("hin.Id", hinId)).add(
					Restrictions.eq("VisitNo", visitId1)).list();
            if(visitList!=null && visitList.size()>0)
            {
			visitNo = visitList.get(0).getVisitNo();
			int j = 1;
			for (int i = visitNo; i > 0; i--) {

				if (j == 1) {
					listOfPreviousVisit3 = session.createCriteria(Visit.class)
							.createAlias("Hin", "hin").add(
									Restrictions.eq("hin.Id", hinId)).add(
									Restrictions.eq("VisitNo", visitNo)).list();
					//System.out.println("listOfPreviousVisit3 "+ listOfPreviousVisit3.size());
					Visit visit = new Visit();
					int visitId = 0;
					if (listOfPreviousVisit3 != null
							&& listOfPreviousVisit3.size() > 0) {
						visit = (Visit) listOfPreviousVisit3.get(0);
						visitId = visit.getId();
					}

					listOfOpd3 = session
							.createCriteria(OpdPatientDetails.class)
							.createAlias("Visit", "visit").add(
									Restrictions.eq("visit.Id", visitId))
							.list();
					//System.out.println("listOfOpd3 " + listOfOpd3.size());
					visitNo = visitNo - 1;
					if (listOfOpd3.size() > 0) {
						map.put("listOfOpd3", listOfOpd3);
					}
				}
				if (j == 2) {
					listOfPreviousVisit2 = session.createCriteria(Visit.class)
							.createAlias("Hin", "hin").add(
									Restrictions.eq("hin.Id", hinId)).add(
									Restrictions.eq("VisitNo", visitNo)).list();
					Visit visit = new Visit();
					int visitId = 0;
					if (listOfPreviousVisit2 != null
							&& listOfPreviousVisit2.size() > 0) {
						visit = (Visit) listOfPreviousVisit2.get(0);
						visitId = visit.getId();
					}
					listOfOpd2 = session
							.createCriteria(OpdPatientDetails.class)
							.createAlias("Visit", "visit").add(
									Restrictions.eq("visit.Id", visitId))
							.list();
					visitNo = visitNo - 1;
					if (listOfOpd2.size() > 0) {
						map.put("listOfOpd2", listOfOpd2);
					}
				}
				if (j == 3) {
					listOfPreviousVisit1 = session.createCriteria(Visit.class)
							.createAlias("Hin", "hin").add(
									Restrictions.eq("hin.Id", hinId)).add(
									Restrictions.eq("VisitNo", visitNo)).list();
					Visit visit = new Visit();
					int visitId = 0;
					if (listOfPreviousVisit1 != null
							&& listOfPreviousVisit1.size() > 0) {
						visit = (Visit) listOfPreviousVisit1.get(0);
						visitId = visit.getId();
					}
					listOfOpd1 = session
							.createCriteria(OpdPatientDetails.class)
							.createAlias("Visit", "visit").add(
									Restrictions.eq("visit.Id", visitId))
							.list();
					visitNo = visitNo - 1;
					if (listOfOpd1.size() > 0) {
						map.put("listOfOpd1", listOfOpd1);
					}
					break;
				}
				j++;
			}
            }*/
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		map.put("deptList", deptList);
		map.put("templateList", templateList);
		map.put("frequencyList", frequencyList);
		return map;

	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> showOPDTreatmentRecords(int templateId) {
		Session session = (Session) getSession();
		List<OpdTemplateTreatment> treatmentTemplateList = new ArrayList<OpdTemplateTreatment>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();

		try {

			// patientList=session.createQuery("select v from Visit as v where
			// v.VisitDate="+date ).list();
			treatmentTemplateList = session.createCriteria(
					OpdTemplateTreatment.class).createAlias("Template",
					"template").add(Restrictions.eq("template.Id", templateId))
					.list();
			frequencyList = session.createCriteria(MasFrequency.class).add(
					Restrictions.eq("Status", "y")).list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("treatmentTemplateList", treatmentTemplateList);
		map.put("frequencyList", frequencyList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getItemListForAutoComplete(Map mapForDS) {
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreItem> itemList1 = new ArrayList<MasStoreItem>();
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		try {
			int hospitalId =(Integer)mapForDS.get("hospitalId");
			String str =  mapForDS.get("autoHint") + "%";
			
			//String query = "from MasStoreItem as mst where upper(mst.Nomenclature) like upper('"
					//+ str + "')";
			/*itemList=getHibernateTemplate().find("from MasStoreItem as item where upper(item.Nomenclature) like upper('"+str+"') and item.Status='y'  and item.ItemType.Id='2' and item.Hospital.Id='"+hospitalId+"'");
			itemList1=getHibernateTemplate().find("from MasStoreItem as item where upper(item.Nomenclature) like upper('"+str+"') and item.Status='y' and item.ItemType.Id='1'");
			itemList.addAll(itemList1);
			map.put("itemList", itemList);
			*/
			
			/*
			 * Code By Mukesh
			 * Named Query
			 * Date 15 Aug 2012
			 */
			Query itemQry = session.createQuery("from MasStoreItem as item where upper(item.Nomenclature) like upper(:str) and item.Status='y'  and item.ItemType.Id='2' and item.Hospital.Id='"+hospitalId+"'");
			itemQry.setString("str",str);
			itemList = itemQry.list();
			
			Query item1Qry = session.createQuery("from MasStoreItem as item where upper(item.Nomenclature) like upper(:str) and item.Status='y' and item.ItemType.Id='1'");
			item1Qry.setString("str",str);
			itemList1 = item1Qry.list();
			
			itemList.addAll(itemList1);
			map.put("itemList", itemList);
			//Query q = session.createQuery(query);
			//q.setFirstResult(0);
			//q.setMaxResults(10);
			//itemList = q.list();
		} catch (Exception e) {

			e.printStackTrace();
		}
		return map;
	}

	@SuppressWarnings("unchecked")
	public int getItemIdFromPVMS(String nomenclature,String pvmsNo,int hospitalId) {
		List<MasStoreItem> itemIdList = new ArrayList<MasStoreItem>();
		List<MasStoreItem> itemIdList1 = new ArrayList<MasStoreItem>();
		Session session = (Session) getSession();
		int itemId = 0;
		try {
			itemIdList = session.createCriteria(MasStoreItem.class)
			//.add(Restrictions.eq("PvmsNo", pvmsNo))
			.add(Restrictions.eq("ItemType.Id", 2)).add(Restrictions.eq("Status", "y"))
							.add(Restrictions.eq("Nomenclature", nomenclature)).add(Restrictions.eq("Hospital.Id", hospitalId))
								.list();
			itemIdList1 = session.createCriteria(MasStoreItem.class)
			//.add(Restrictions.eq("PvmsNo", pvmsNo))
			.add(Restrictions.eq("ItemType.Id", 1))
					.add(Restrictions.eq("Nomenclature", nomenclature)).add(Restrictions.eq("Status", "y"))
								.list();
			itemIdList.addAll(itemIdList1);
			
			MasStoreItem masStoreItem = itemIdList.get(0);
			itemId = masStoreItem.getId();
		} catch (Exception e) {

			e.printStackTrace();
		}

		return itemId;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> showOPDInvestigationRecords(int investigationTemplateId) {
		Session session = (Session) getSession();
		List<OpdTemplateInvestigation> investigationTemplateList = new ArrayList<OpdTemplateInvestigation>();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			// patientList=session.createQuery("select v from Visit as v where
			// v.VisitDate="+date ).list();
			investigationTemplateList = session.createCriteria(
					OpdTemplateInvestigation.class).createAlias("Template",
					"template").add(
					Restrictions.eq("template.Id", investigationTemplateId))
					.list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("investigationTemplateList", investigationTemplateList);
		return map;
	}

	public Map<String, Object> showOPDTemplateRecords(
			Map<String, Object> mapForDS) {
		Session session = (Session) getSession();
		List<OpdTemplateInvestigation> investigationTemplateList = new ArrayList<OpdTemplateInvestigation>();
		List<Integer> toShowIdList = new ArrayList<Integer>();

		Map<String, Object> map = new HashMap<String, Object>();
		if (mapForDS.get("toShowIdList") != null) {
			toShowIdList = (List) mapForDS.get("toShowIdList");
		}
		for (Integer i : toShowIdList) {
			//System.out.println("id :" + i);
		}
		try {
			if (toShowIdList.size() > 0) {
				investigationTemplateList = session.createCriteria(
						OpdTemplateInvestigation.class)
						// .createAlias("Template","template")
						.add(Restrictions.in("Template.Id", toShowIdList))
						.list();
			}

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("investigationTemplateList", investigationTemplateList);

		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getInvestigationListForAutoComplete(Map mapForDS) {
		List<MasChargeCode> chargeList = new ArrayList<MasChargeCode>();
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		try {
			// int deptId=(Integer)mapForDS.get("deptId");

			String str = "%" + mapForDS.get("autoHint") + "%";
			String chargeType = "DIAG";
			
			//chargeList=getHibernateTemplate().find("select mcc from jkt.hms.masters.business.DgMasInvestigation as dmi join dmi.ChargeCode as mcc join mcc.ChargeType as ct where ct.ChargeTypeCode='"+chargeType+"' and  upper(mcc.ChargeCodeName) like upper('"+str+"') ");
			//String query = "from MasIcd as icd where upper (icd.IcdName) like upper(:str)";
			String query = "select mcc from jkt.hms.masters.business.DgMasInvestigation as dmi join dmi.ChargeCode as mcc join mcc.ChargeType as ct where ct.ChargeTypeCode='"+chargeType+"' and  upper(mcc.ChargeCodeName) like upper(:str) ";
			Query q = session.createQuery(query);
			q.setParameter("str",str);
			chargeList = q.list();			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("chargeList", chargeList);
		return map;
	}

	public Map<String, Object> getInvestigationListForAutoCompleteSurgery(
			Map mapForDS) {
		List<MasChargeCode> chargeList = new ArrayList<MasChargeCode>();
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		int deptId = 0;
		if (mapForDS.get("deptId") != null) {
			deptId = (Integer) mapForDS.get("deptId");
		}
		try {
			// int deptId=(Integer)mapForDS.get("deptId");

			String str = "%" + mapForDS.get("autoHint") + "%";
			// String chargeType = "DIAG";
			// changed
			List objectList = new ArrayList();
			objectList.add("Surg");
			objectList.add("Surg2");
			Criteria crit = session.createCriteria(MasChargeCode.class)
					.createAlias("ChargeType", "charge").add(
							Restrictions
									.in("charge.ChargeTypeCode", objectList))
					.add(Restrictions.like("ChargeCodeName", str));
			if (deptId != 0) {
				crit = crit.add(Restrictions.eq("Department.Id", deptId)).addOrder(Order.asc("ChargeCodeName"));
			}
			// crit.setFirstResult(0);
			// crit.setMaxResults(10);
			chargeList = crit.list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("chargeList", chargeList);
		return map;
	}

	public Map<String, Object> getSurListForAutoComplete(Map<String,Object> mapForDS) {
		List<MasChargeCode> chargeList = new ArrayList<MasChargeCode>();
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		try {
			// int deptId=(Integer)mapForDS.get("deptId");
			List objectList = new ArrayList();
			objectList.add("Surg");
			objectList.add("Surg2");
			String str = "%" + mapForDS.get("autoHint") + "%";
			String chargeType = "SUR";
			// changed
			// String chargeType= "SURG";
			Criteria crit = session.createCriteria(MasChargeCode.class)
					.createAlias("ChargeType", "charge").add(
							Restrictions
									.in("charge.ChargeTypeCode", objectList))
					.add(Restrictions.like("ChargeCodeName", str));

			crit.setFirstResult(0);
			crit.setMaxResults(10);
			chargeList = crit.list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("chargeList", chargeList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getChargeCodeValue(String chargeCodeName) {
		List<MasChargeCode> chargeCodeList = new ArrayList<MasChargeCode>();
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		try {
			chargeCodeList = session.createCriteria(MasChargeCode.class).add(
					Restrictions.eq("ChargeCodeName", chargeCodeName)).list();

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("chargeCodeList", chargeCodeList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> submitOPDPatientDetails(Map mapForDS) {
		Session session = (Session) getSession();
		boolean succesfullyAdded = false;
		Map<String, Object> returnMap = new HashMap<String, Object>();
		String orderSeqNo =(String)mapForDS.get("orderSeqNo");
		List<Integer> itemIdList = (List<Integer>) mapForDS.get("itemIdList");
		List<Integer> frequencyList = (List) mapForDS.get("frequencyList");
		List<String> otherMedicineList = (List) mapForDS.get("otherMedicineList");
		List<String> nomenclatureList =  (List) mapForDS.get("nomenclatureList");
		List<Integer> itemConversionList = (List) mapForDS.get("itemConversionList");
		List<String> ctList = (List) mapForDS.get("ctList");
		//List<String> injCategoryList = (List) mapForDS.get("injCategoryList");
		List<String> dosageList = (List) mapForDS.get("dosageList");
		//List<String> typeLeftRightList = (List) mapForDS.get("typeLeftRightList");
		//List<String> instructionList = (List) mapForDS.get("instructionList");
		List<String> routeList = new ArrayList<String>();
		routeList= (List) mapForDS.get("routeList");
		List<Integer> totalList = (List) mapForDS.get("totalList");
		List<Integer> noOfDaysList = (List) mapForDS.get("noOfDaysList");
		List<String> remarksList = (List) mapForDS.get("remarksList");
		List<String> chargeCodeIdList = (List) mapForDS.get("chargeCodeIdList");
	//	List<Integer> quantityList = (List) mapForDS.get("quantityList");
		List<String> referToMhList = new ArrayList<String>();
		if((List)mapForDS.get("referToMhList") != null){
			referToMhList = (List)mapForDS.get("referToMhList");
		}
		//List<String> clinicalList = (List) mapForDS.get("clinicalList");
		String[] diagnosisIdAray = (String[]) mapForDS.get("diagnosisIdAray");
		int hinId = (Integer) mapForDS.get("hinId");
		int departmentId = (Integer) mapForDS.get("departmentId");
		int visitId = (Integer) mapForDS.get("visitId");
		int hospitalId = (Integer) mapForDS.get("hospitalId");
		String height = (String) mapForDS.get("height");
		String whr = (String) mapForDS.get("whr");
		String weight = (String) mapForDS.get("weight");
		String pulse = (String) mapForDS.get("pulse");
		String disposal = (String) mapForDS.get("disposal");
		String days = (String) mapForDS.get("days");
		String disposalDays = "";
		if(mapForDS.get("disposalDays") != null){
			disposalDays = (String) mapForDS.get("disposalDays");
		}
		
		
		//String remaks = (String) mapForDS.get("remaks");
		int empId = (Integer) mapForDS.get("empId");
		int empIdCurrnet= (Integer) mapForDS.get("empIdCurrnet");
		int userId = (Integer) mapForDS.get("userId");
	//	departmentId=117;
		int deptId = (Integer) mapForDS.get("deptId");

		String bp = (String) mapForDS.get("bp");
		String userName = (String) mapForDS.get("userName");
		String temperature = (String) mapForDS.get("temperature");
		String afmsDescription = (String) mapForDS.get("afmsDescription");
		//String referredDept = (String) mapForDS.get("referredDept");
		String consultationTime = (String) mapForDS.get("consultationTime");
		String consultationDate = (String) mapForDS.get("consultationDate");
		Date consultationDateToInsert = HMSUtil
				.convertStringTypeDateToDateType(consultationDate);
		String initialDiagnosis = (String) mapForDS.get("initialDiagnosis");
		int systemDiagnosisId = 0;
		if(mapForDS.get("systemDiagnosisId") != null){
			systemDiagnosisId = (Integer)mapForDS.get("systemDiagnosisId");
		}

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentTimeWithoutSecond();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);

		String plan = (String) mapForDS.get("plan");
		String nextVisitDate = (String) mapForDS.get("nextVisitDate");
		String onExamination = (String) mapForDS.get("onExamination");

		String presentComplain = (String) mapForDS.get("presentComplain");
		String presentAdvice = (String) mapForDS.get("presentAdvice");//fayaz added
		String presentIllness = (String) mapForDS.get("presentIllness");
		String pastHistory = (String) mapForDS.get("pastHistory");
		String personalHistory = (String) mapForDS.get("personalHistory");
		String otherDetails = (String) mapForDS.get("otherDetails");
		String[] familyHistoryArray  = (String[]) mapForDS.get("familyHistoryArray");
		String otherFamilyHistorty = "";
		if(mapForDS.get("otherFamilyHistorty")!= null){
			otherFamilyHistorty = (String)mapForDS.get("otherFamilyHistorty");
		}
		String allergies = "";
		if(mapForDS.get("allergies")!= null){
			allergies = (String)mapForDS.get("allergies");
		}
		String reviewAt = "";
		if(mapForDS.get("reviewAt")!= null){
			reviewAt = (String)mapForDS.get("reviewAt");
		}
		String referredDoctars = (String) mapForDS.get("referredDoctars");
		String riskFactor = (String) mapForDS.get("riskFactor");
		String bmi = (String) mapForDS.get("bmi");
		String idealWeight = (String) mapForDS.get("idealWeight");
		String pastMedicalHistory = (String) mapForDS.get("pastMedicalHistory");
		Date nextVisitDateToInsert = HMSUtil
				.convertStringTypeDateToDateType(nextVisitDate);
		//List<Integer> itemIdList = new ArrayList<Integer>();

		String clinicalNotes1 = (String) mapForDS.get("clinicalNotes1");
		String returnfromHospital = (String) mapForDS.get("returnfromHospital");
		String referedToMH = (String) mapForDS.get("referedToMH");
		String hospName = (String) mapForDS.get("hospName");
		String doa = (String) mapForDS.get("doa");
		String dod = (String) mapForDS.get("dod");
		String gpe_examination = (String) mapForDS.get("gpe_examination");
		String rr =  (String)mapForDS.get("rr");
		String systamicExam="";
		if(mapForDS.get("systamicExam")!=null){
			systamicExam = (String) mapForDS.get("systamicExam");
		}
		String mhString = "";
		if(mapForDS.get("mh")!=null){
			mhString = (String) mapForDS.get("mh");
		}
		String mhDepartment = "";
		if(mapForDS.get("mhDepartment")!=null){
			mhDepartment = (String) mapForDS.get("mhDepartment");
		}
		String mhReferredFor = "";
		if(mapForDS.get("mhReferredFor")!=null){
			mhReferredFor = (String) mapForDS.get("mhReferredFor");
		}
		String adviceOnDischarge = (String) mapForDS.get("adviceOnDischarge");
		String pastDiagnosis  = (String) mapForDS.get("pastDiagnosis");
		String pastdisposal = (String) mapForDS.get("pastdisposal");
		int threpytypeId = (Integer) mapForDS.get("threpytypeId");
		String DaysPhy = (String) mapForDS.get("DaysPhy");
		String DurationPhy = (String) mapForDS.get("DurationPhy");
		int priority = 0;
		if(mapForDS.get("priority") != null){
		 priority = (Integer)mapForDS.get("priority");
		}
		int physioRequisitionHeaderId = 0;
		int procedureHeaderId = 0;
		if(mapForDS.get("physioRequisitionHeaderId")!=null){
			physioRequisitionHeaderId = (Integer)mapForDS.get("physioRequisitionHeaderId");
		}
		if(mapForDS.get("procedureHeaderId")!=null){
			procedureHeaderId = (Integer)mapForDS.get("procedureHeaderId");
		}
		
		Transaction tx = null;

		try {
			tx = session.beginTransaction();
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();
			Visit visitsave = new Visit();
			visitsave=(Visit) hbt.load(Visit.class, visitId);
			visitsave.setDiagnosisString(initialDiagnosis);
			visitsave.setDisposalName(disposal);
			visitsave.setDisposalDays(days);
			if(priority != 0){
				visitsave.setPriority(priority);
			}
			hbt.update(visitsave);
			Visit visitObj = new Visit();
			visitObj.setId(visitId);
						//visitObj.setDiagnosisString(initialDiagnosis);
			//hbt.update(visitObj);
			opdPatientDetails.setVisit(visitObj);
			if (empId != 0) {
				MasEmployee masEmployee = new MasEmployee();
				masEmployee.setId(empId);
				opdPatientDetails.setEmployee(masEmployee);
			}
			MasHospital masHospitalObj = new MasHospital();
			masHospitalObj.setId(hospitalId);
			opdPatientDetails.setHospital(masHospitalObj);
			opdPatientDetails.setHeight(height);
			opdPatientDetails.setWhr(whr);
			opdPatientDetails.setDisposal(disposal);
			opdPatientDetails.setDays(days);
			opdPatientDetails.setDisposalDays(disposalDays);
			opdPatientDetails.setVweight(weight);
			opdPatientDetails.setPulse(pulse);
			opdPatientDetails.setBp(bp);
			if (temperature!=null) {
				opdPatientDetails.setTemperature(temperature);
			}
			opdPatientDetails.setAfmsDesc(afmsDescription);
			opdPatientDetails.setConsultationTime(consultationTime);
			opdPatientDetails.setConsultationDate(consultationDateToInsert);
			opdPatientDetails.setPlan(plan);
			opdPatientDetails.setInitialDiagnosis(initialDiagnosis);
			if(systemDiagnosisId != 0){
			MasSystemDiagnosis systemDiagnosis = new MasSystemDiagnosis();
			systemDiagnosis.setId(systemDiagnosisId);
			opdPatientDetails.setSystemDiagnosis(systemDiagnosis);
			}
			opdPatientDetails.setOpdDate(date);
			opdPatientDetails.setOpdTime(time);
			opdPatientDetails.setNextVisitDate(nextVisitDateToInsert);
			//opdPatientDetails.setReferredDept(referredDept);
			//System.out.println("referredDept---"+referredDept);
			opdPatientDetails.setReferedDoctars(referredDoctars);
			opdPatientDetails.setOnExamination(onExamination);
			opdPatientDetails.setReturnfromHospital(returnfromHospital);
			opdPatientDetails.setMhRun(referedToMH);
			if(referedToMH.equals("y")){
				opdPatientDetails.setMh(mhString);
				opdPatientDetails.setMhDepartment(mhDepartment);
				opdPatientDetails.setMhReferredFor(mhReferredFor);
			}
			opdPatientDetails.setHospName(hospName);
			opdPatientDetails.setDoa(doa);
			opdPatientDetails.setDod(dod);
			opdPatientDetails.setGpe_examination(gpe_examination);
			opdPatientDetails.setRr(rr);
			opdPatientDetails.setSystamicExam(systamicExam);
			opdPatientDetails.setBmi(bmi);
			opdPatientDetails.setIdealWeight(idealWeight);
			opdPatientDetails.setAdviceOnDischarge(adviceOnDischarge);
			opdPatientDetails.setPastDiagnosis(pastDiagnosis);
			opdPatientDetails.setPastdisposal(pastdisposal);
			opdPatientDetails.setDaysPhy(DaysPhy);
			opdPatientDetails.setDurationPhy(DurationPhy);
			opdPatientDetails.setCaseNotes(clinicalNotes1);
			//System.out.println("threpytypeId---1"+threpytypeId);
			if(threpytypeId!=0)
			{
				//System.out.println("threpytypeId---"+threpytypeId);
			MasTherapyType thy=new MasTherapyType();
			thy.setId(threpytypeId);
			opdPatientDetails.setTherapyType(thy);
			}
			//---------commented by anamika---------//
			/*String delimiter = ",";
			String[] temp;
			temp = referredDept.split(delimiter);
			Boolean flag=false;
			for(int i =0; i < temp.length ; i++)
			{
				if(temp[i].equalsIgnoreCase("87"))
				{
					flag=true;
					
				}
			}
			if(flag)
			{
				opdPatientDetails.setPhyStatus("w");
			}else
			{
				opdPatientDetails.setPhyStatus("c");
			}*/
		//	
			opdPatientDetails.setPhyStatus("c");
			hbt.save(opdPatientDetails);

			// --------------- values to be Opd Patient
			// History--------------------

			OpdPatientHistory opdPatientHistory = new OpdPatientHistory();

			MasDepartment md = new MasDepartment();
			md.setId(departmentId);
			opdPatientHistory.setDepartment(md);

			MasHospital mh = new MasHospital();
			mh.setId(hospitalId);
			opdPatientHistory.setHospital(mh);

			Patient p = new Patient();
			p.setId(hinId);
			opdPatientHistory.setHin(p);

			/*
			 * Visit visit = new Visit(); visit.setId(visitId);
			 */
			opdPatientHistory.setVisitInpatientId(visitId);

			opdPatientHistory.setLastChgTime(time);
			opdPatientHistory.setLastChgBy("admin");

			opdPatientHistory.setStatus("y");
			opdPatientHistory.setLastChgDate(date);

			opdPatientHistory.setPersonalPastHistory(pastHistory);
			opdPatientHistory.setPersonalPresentHistory(personalHistory);
			opdPatientHistory.setPersonalOtherDetails(otherDetails);
			//-----commented by anamika-------------
			//opdPatientHistory.setFamilyPastHistory(familyHistory);
			opdPatientHistory.setRiskFactor(riskFactor);
			opdPatientHistory.setPastMedicalHistory(pastMedicalHistory);
			opdPatientHistory.setPresentComplain(presentComplain);
			opdPatientHistory.setPresentAdvice(presentAdvice);//fayaz added
			opdPatientHistory.setPresentIllness(presentIllness);

			opdPatientHistory.setIpOpPacStatus("OP");

			opdPatientHistory.setOpdPatientDetails(opdPatientDetails);

			hbt.save(opdPatientHistory);
			
			if(familyHistoryArray!=null && familyHistoryArray.length > 0) {
				for (int i = 0; i < familyHistoryArray.length; i++) {
					List<MasMedicalExamFamilyHis> existingFamilyHis = new ArrayList<MasMedicalExamFamilyHis>();
					existingFamilyHis = session.createCriteria(MasMedicalExamFamilyHis.class).createAlias("Hin", "h").add(Restrictions.eq("h.Id", hinId)).createAlias("PatientFamilyHistory", "pfh").add(Restrictions.eq("pfh.Id", Integer.parseInt(""+familyHistoryArray[i]))).list();
					if(existingFamilyHis.size() == 0){
						MasMedicalExamFamilyHis masExamFamilyHis = new MasMedicalExamFamilyHis();
						Patient patientObj = new Patient();
						patientObj.setId(hinId);
						masExamFamilyHis.setHin(patientObj);
						PatientFamilyHistory familyHistory = new PatientFamilyHistory();
						familyHistory.setId(Integer.parseInt(""+familyHistoryArray[i]));
						masExamFamilyHis.setPatientFamilyHistory(familyHistory);
						hbt.save(masExamFamilyHis);
					}
				}
			}
			//------------update Patient Table for other Family History-------------------//
			
			Patient ptObj = (Patient)hbt.load(Patient.class, hinId);
			ptObj.setOtherFamilyHistory(otherFamilyHistorty);
			ptObj.setDrugAllergies(allergies);
			hbt.update(ptObj);
			
			//-----------------------------------------------------------------------

			// --------------- values to be updated in visit table to change
			// it's status--------------------

			Visit visitObjToUpdate = (Visit) hbt.load(Visit.class, visitId);
			visitObjToUpdate.setVisitStatus("C");
			/* Original  token no and Doctor set at the time of visit creation */
			/*if(visitObjToUpdate.getDoctor()!=null){
				String tokenAndDoctor="";
				tokenAndDoctor=""+visitObjToUpdate.getTokenNo();
				tokenAndDoctor=tokenAndDoctor+"#"+visitObjToUpdate.getDoctor().getId();
				visitObjToUpdate.setTokenDoctor(tokenAndDoctor);
			}*/
			/* If Other Doctor will attend to patient then update doctor id in visit table  */
			if(empIdCurrnet>0){
				MasEmployee doctor=new MasEmployee();
				doctor.setId(empIdCurrnet);
				visitObjToUpdate.setDoctor(doctor);
			}
			hbt.update(visitObjToUpdate);

			// -----------------------------------------------------------------------------------

			// --------------values to be entered in discharge table for
			// diagnosis----------------------
			String query = "";
			List objectList = new ArrayList();
			if (diagnosisIdAray != null) {
				for (int i = 0; i < diagnosisIdAray.length; i++) {
					DischargeIcdCode dischargeIcdCode = new DischargeIcdCode();
					Patient patientObj = new Patient();
					patientObj.setId(hinId);
					dischargeIcdCode.setHin(patientObj);
					MasIcd masIcd = new MasIcd();
					//
					// masIcd.setId(Integer.parseInt(diagnosisIdAray[i]));
					// chnaget to Line Below

					if (diagnosisIdAray[i] != null) {
						if (!diagnosisIdAray[i].equals("0")) {
							query = "select icd_id from mas_icd where icd_code='"
									+ diagnosisIdAray[i] + "'";
							objectList = (List) session.createSQLQuery(query)
									.list();
							masIcd.setId(Integer.parseInt(""
									+ objectList.get(0)));
							dischargeIcdCode.setIcd(masIcd);
							dischargeIcdCode
									.setAddEditDate(consultationDateToInsert);
							dischargeIcdCode.setAddEditTime(consultationTime);
							dischargeIcdCode.setStatus("y");
							dischargeIcdCode.setDiagnosisStatus("p");
							Visit visit = new Visit();
							visit.setId(visitId);
							dischargeIcdCode.setVisit(visit);
							dischargeIcdCode.setOpdPatientDetails(opdPatientDetails);
							hbt.save(dischargeIcdCode);
						}
					}
				}
			}
			
			PatientPrescriptionHeader patientPrescriptionHeader = new PatientPrescriptionHeader();
			int item_category_id=0;
			if(itemIdList.size() > 0 || (otherMedicineList != null && otherMedicineList.size() > 0)){
				Patient patient = new Patient();
				patient.setId(hinId);
				patientPrescriptionHeader.setHin(patient);
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(departmentId);
				patientPrescriptionHeader.setDepartment(masDepartment);
				Visit visit = new Visit();
				visit.setId(visitId);
				patientPrescriptionHeader.setVisit(visit);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				patientPrescriptionHeader.setHospital(masHospital);
				patientPrescriptionHeader.setStatus("p");
				patientPrescriptionHeader
						.setPrescriptionDate(consultationDateToInsert);
				patientPrescriptionHeader.setPrescriptionTime(consultationTime);
				/**
				 * Code By Ritu 
				 * Created Foreign key relation for emp id in Database
				 */
				MasEmployee employee = new MasEmployee();
				employee.setId(empId);
				patientPrescriptionHeader.setEmp(employee);
				
				/**
				 * End of code by Ritu
				 */
				int prescriptionNo=getTransactionSequenceNoForPrescriptionNo(mapForDS);
				patientPrescriptionHeader.setPrescriptionNo(prescriptionNo);
				patientPrescriptionHeader.setOpdPatientDetails(opdPatientDetails);
				
				/*
				 * This block is use for Check Injection in Prescription List
				 */
				//----------------commented by anamika for itemId================
				String sqlItemId="";
			//	List<Integer> itemList = new ArrayList<Integer>();
				for (int i = 0; i < itemIdList.size(); i++) {
					/*String pvmsNo = (String) itemIdList.get(i);
					String nomenclature = (String) nomenclatureList.get(i);
					int itemId = getItemIdFromPVMS(nomenclature,pvmsNo,hospitalId);*/
					int itemId = (Integer)itemIdList.get(i);;
					if(i==0){
						sqlItemId=""+itemId;
					}else{
						sqlItemId +=" , "+itemId;
					}
				//	itemIdList.add(itemId);
				}
				List<MasStoreItem> masItemList=new ArrayList<MasStoreItem>();
				Properties properties = new Properties();
				URL resourcePath = Thread.currentThread().getContextClassLoader()
						.getResource("adt.properties");
				
				try {
					properties.load(resourcePath.openStream());

					String item_category_code = properties.getProperty("item_category_id");
					item_category_id=Integer.parseInt(item_category_code);
				} catch (Exception e) {
					e.printStackTrace();
				}
				if(!sqlItemId.equals(""))
					masItemList=hbt.find("select item from jkt.hms.masters.business.MasStoreItem as item join item.ItemCategory as ic where item.Id in ("+sqlItemId+") and ic.Id="+item_category_id);
				
				if(masItemList.size()>0){
					patientPrescriptionHeader.setInjectionStatus("p");
				}else{
					patientPrescriptionHeader.setInjectionStatus("n");
				}
				/*
				 * End Of Code This block is use for Check Injection in Prescription List
				 */
				
				hbt.save(patientPrescriptionHeader);
			}/** else part added by Ritu for other treatment details **/
			else if(mapForDS.get("otherTreatment")!=null && !(mapForDS.get("otherTreatment")).equals("")){

				Patient patient = new Patient();
				patient.setId(hinId);
				patientPrescriptionHeader.setHin(patient);
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(departmentId);
				patientPrescriptionHeader.setDepartment(masDepartment);
				Visit visit = new Visit();
				visit.setId(visitId);
				patientPrescriptionHeader.setVisit(visit);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				patientPrescriptionHeader.setHospital(masHospital);
				patientPrescriptionHeader.setStatus("p");
				patientPrescriptionHeader
						.setPrescriptionDate(consultationDateToInsert);
				patientPrescriptionHeader.setPrescriptionTime(consultationTime);
				
				MasEmployee employee = new MasEmployee();
				employee.setId(empId);
				patientPrescriptionHeader.setEmp(employee);
				
			
				int prescriptionNo=getTransactionSequenceNoForPrescriptionNo(mapForDS);
				patientPrescriptionHeader.setPrescriptionNo(prescriptionNo);
				patientPrescriptionHeader.setOpdPatientDetails(opdPatientDetails);
		
				patientPrescriptionHeader.setInjectionStatus("n");
				patientPrescriptionHeader.setOtherTreatment((String)mapForDS.get("otherTreatment"));
				
				hbt.save(patientPrescriptionHeader);
			
				
			}
			if (itemIdList.size() > 0 ) {
				for (int i = 0; i < itemIdList.size(); i++) {
					if(itemIdList.get(i) !=0){
					List<MasStoreItem> itemCodeList = new ArrayList<MasStoreItem>();
					PatientPrescriptionDetails patientPrescriptionDetails = new PatientPrescriptionDetails();
					if(itemIdList.get(i) != null){
						MasStoreItem masStoreItem = new MasStoreItem();
						masStoreItem.setId(itemIdList.get(i));
					patientPrescriptionDetails.setItem(masStoreItem);
					}
					if (frequencyList.get(i) != null && !frequencyList.get(i).equals("")) {
						MasFrequency masFrequency = new MasFrequency();
						masFrequency.setId(frequencyList.get(i));
						patientPrescriptionDetails.setFrequency(masFrequency);
						}
						if (dosageList.get(i) != null && !dosageList.get(i).equals("") && !dosageList.get(i).equals("0")) {
							patientPrescriptionDetails.setDosage(dosageList.get(i));
						}else{
							patientPrescriptionDetails.setDosage("0");
						}
						if (remarksList.get(i) != null && !remarksList.get(i).equals("")) {
							patientPrescriptionDetails.setRemarks(remarksList.get(i));
						}
						//patientPrescriptionDetails.setType(typeLeftRightList.get(i));
						if (noOfDaysList.get(i) != null && !noOfDaysList.get(i).equals("")) {
							patientPrescriptionDetails.setNoOfDays(noOfDaysList.get(i));
						}
						if (routeList.get(i) != null && !routeList.get(i).equals("")) {
							patientPrescriptionDetails.setRoute(routeList.get(i));
						}
						/*if (totalList.get(i) != null && !totalList.get(i).equals("")) {
							patientPrescriptionDetails.setTotal(Math.round(totalList.get(i).floatValue()));
						}*/
						if (totalList.get(i) != null && !totalList.get(i).equals("") && totalList.get(i) != 0) {
							patientPrescriptionDetails.setTotal(totalList.get(i));
						}else{
							patientPrescriptionDetails.setTotal(1);
						}
						patientPrescriptionDetails.setGivenQty(0);
					
					//System.out.println("typeLeftRightList.get(i)------>>>"+typeLeftRightList.get(i));
					//patientPrescriptionDetails.setType(typeLeftRightList.get(i));
					
					//patientPrescriptionDetails.setInstruction(instructionList.get(i));
					
					
					patientPrescriptionDetails.setPrescription(patientPrescriptionHeader);
				
					patientPrescriptionDetails.setDetailStatus("a");
					List<MasStoreItem> storeItemList=new ArrayList<MasStoreItem>();
					storeItemList=hbt.find("select item from jkt.hms.masters.business.MasStoreItem as item join item.ItemCategory as ic where item.Id="+itemIdList.get(i)+" and ic.Id="+item_category_id);
					if(storeItemList.size() > 0){
						patientPrescriptionDetails.setInjectionStatus("p");
					}else{
						patientPrescriptionDetails.setInjectionStatus("n");
					}
					if(ctList.get(i).equals("y")){
						patientPrescriptionDetails.setCt("yes");
					}else{
						patientPrescriptionDetails.setCt("no");
					}
					
					hbt.save(patientPrescriptionDetails);
					
					/**
					 * This Code is use for Injection Appointment
					 * Code By Ritu Sahu
					 * Date 07 Nov 2011
					 */
					
					if(storeItemList.size()>0){
						List<InjAppointmentHeader> injectionRegisterList=new ArrayList<InjAppointmentHeader>();
						injectionRegisterList=hbt.find("select inj from jkt.hms.masters.business.InjAppointmentHeader as inj join inj.Visit as visit where visit.Id="+visitId);
						InjAppointmentHeader injectionAppointment = new InjAppointmentHeader();
						
						 /* if(injectionRegisterList.size()>0) means , Data is already available In InjectionRegister table  */
						 
						if(injectionRegisterList.size()>0){
							for (InjAppointmentHeader injectionRegisterTemp : injectionRegisterList) {
								injectionAppointment.setId(injectionRegisterTemp.getId());
							}
						}else{
							injectionAppointment.setAppointmentDate(new Date());
							Patient patientInj = new Patient();
							patientInj.setId(hinId);
							injectionAppointment.setHin(patientInj);
							Visit visitInj = new Visit();
							visitInj.setId(visitId);
							injectionAppointment.setVisit(visitInj);
							MasHospital masHospitalInj = new MasHospital();
							masHospitalInj.setId(hospitalId);
							injectionAppointment.setHospital(masHospitalInj);
							
							injectionAppointment.setStatus("p");
							injectionAppointment.setLastChgTime(time);
							Users user = new Users();
							user.setId(userId);
							injectionAppointment.setLastChgBy(user);
							injectionAppointment.setLastChgDate(date);
							injectionAppointment.setPrescription(patientPrescriptionHeader);
							hbt.save(injectionAppointment);
						}
						int freqCount=0;
						if(frequencyList.get(i) > 10){
							freqCount = 1; /* if frequency is greater than 10 then only one entry will go in Injection Appointment table*/
						}else{
							freqCount = frequencyList.get(i);
						}
						if(freqCount > 0){	
							for (int j = 1; j <= freqCount; j++) {
								InjAppointmentDetails injAppointmentDetails = new InjAppointmentDetails();
								injAppointmentDetails.setAppointmentTime(time);
								injAppointmentDetails.setDose(dosageList.get(i));
								MasFrequency frequency = new MasFrequency();
								frequency.setId(frequencyList.get(i));
								injAppointmentDetails.setFrequency(frequency);
								injAppointmentDetails.setRoute(routeList.get(i));
								MasStoreItem item = new MasStoreItem();
								item.setId(itemIdList.get(i));
								injAppointmentDetails.setItem(item);
								injAppointmentDetails.setInjAppointmentHeader(injectionAppointment);
								injAppointmentDetails.setNoOfDays(noOfDaysList.get(i));
								injAppointmentDetails.setPatientPrescriptionDetails(patientPrescriptionDetails);
								injAppointmentDetails.setStatus("p");
								hbt.save(injAppointmentDetails);
							}
						}
					}
					/**
					 * END Of COde
					 * This Code is use for Injection
					 * Code By Ritu Sahu
					 * Date 07 Nov 2011
					 */
				}
				}
			}
			//-------------code by anamika for detention-----------------------//
			if(disposal.equalsIgnoreCase("Detained")){
			PatientDetentionRegister patientDetentionRegister =new PatientDetentionRegister();
			Patient patient =  new Patient();
			patient.setId(hinId);
			patientDetentionRegister.setHin(patient);
			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			//System.out.println("box.getInt(hospitalId)--->"+box.getInt("hospitalId"));
			patientDetentionRegister.setHospital(masHospital);
			
			MasEmployee medicalOfficer =new MasEmployee();
			//System.out.println("box.getInt(doctorId)--"+box.getInt("doctorId"));
			medicalOfficer.setId(empIdCurrnet);
			patientDetentionRegister.setMedicalOfficer(medicalOfficer);
			
			Visit visit=new Visit();
			visit.setId(visitId);
			patientDetentionRegister.setVisit(visit);
			
			patientDetentionRegister.setDetainedFrom(date);
			patientDetentionRegister.setDetentionRegisterDate(date);
			patientDetentionRegister.setDetainedTo(date);
			patientDetentionRegister.setFromTime(time);
			patientDetentionRegister.setToTime(time);
			//patientDetentionRegister.setTreatment(box.getString("treatment"));
			patientDetentionRegister.setRequisitionDate(date);
			Users user = new Users();
			user.setId(userId);
			patientDetentionRegister.setLastChgBy(user);
			patientDetentionRegister.setLastChgDate(date);
			patientDetentionRegister.setLastChgTime(time);
			patientDetentionRegister.setStatus("p");
			patientDetentionRegister.setReviewAt(reviewAt);
			
			hbt.save(patientDetentionRegister);
		}
			//-------------------------------------------------
			if(otherMedicineList != null && otherMedicineList.size() > 0){
				String sqlItemId="";
				int itemId = 0;
				/*PatientPrescriptionHeader patientPrescriptionHeader = new PatientPrescriptionHeader();
				Patient patient = new Patient();
				patient.setId(hinId);
				patientPrescriptionHeader.setHin(patient);
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(departmentId);
				patientPrescriptionHeader.setDepartment(masDepartment);
				Visit visit = new Visit();
				visit.setId(visitId);
				patientPrescriptionHeader.setVisit(visit);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				patientPrescriptionHeader.setHospital(masHospital);
				patientPrescriptionHeader.setStatus("p");
				patientPrescriptionHeader
						.setPrescriptionDate(consultationDateToInsert);
				patientPrescriptionHeader.setPrescriptionTime(consultationTime);
				*//**
				 * Code By Ritu 
				 * Created Foreign key relation for emp id in Database
				 *//*
				MasEmployee employee = new MasEmployee();
				employee.setId(empId);
				patientPrescriptionHeader.setEmp(employee);
				
				*//**
				 * End of code by Ritu
				 *//*
				int prescriptionNo=getTransactionSequenceNoForPrescriptionNo(mapForDS);
				patientPrescriptionHeader.setPrescriptionNo(prescriptionNo);
		
				for(int i = 0; i < injCategoryList.size(); i++){
					if(injCategoryList.get(i).equals("y")){
						patientPrescriptionHeader.setInjectionStatus("p");
						break;
					}else{
						patientPrescriptionHeader.setInjectionStatus("n");
					}
				}
				
				 * End Of Code This block is use for Check Injection in Prescription List
				 
				
				hbt.save(patientPrescriptionHeader);*/

				List<MasStoreItem> itemCodeList = new ArrayList<MasStoreItem>();
				String otherItem = "";
				if(otherMedicineList.size() >0){
				for(int i = 0; i < otherMedicineList.size(); i++){
					MasStoreItem masItem = new MasStoreItem();
					if(otherMedicineList.get(i) != null && !otherMedicineList.get(i).equals("")){
						otherItem =(String)otherMedicineList.get(i);
						masItem.setNomenclature(otherMedicineList.get(i));
						MasStoreSection masStoreSection = new MasStoreSection();
						masStoreSection.setId(1);
						masItem.setSection(masStoreSection);
						masItem.setStatus("y");
						masItem.setBrandedGeneric("B");
						if (itemConversionList.get(i) != null && !itemConversionList.get(i).equals("")) {
							MasStoreItemConversion masStoreItemConversion = new MasStoreItemConversion();
							//System.out.println("item ConversionId====="+itemConversionList.get(i));
							masStoreItemConversion.setId(itemConversionList.get(i));
							masItem.setItemConversion(masStoreItemConversion);
							}
						MasItemType masItemType = new MasItemType();
						masItemType.setId(2);
						masItem.setItemType(masItemType);
						MasHospital masHospital = new MasHospital();
						masHospital.setId(hospitalId);
						masItem.setHospital(masHospital);
						masItem.setLastChgBy(userName);
						masItem.setLastChgDate(date);
						masItem.setLastChgTime(time);
						
						/*itemCodeList =session.createCriteria(MasStoreItem.class).add(Restrictions.like("PvmsNo", "NIV%")).add(Restrictions.eq("Hospital.Id", hospitalId))
						.addOrder(Order.desc("Id")).setMaxResults(1).list();
						String itemNo = "";
						if(itemCodeList.size()>0){
							MasStoreItem masStoreItem =itemCodeList.get(0);
							String itemCode = masStoreItem.getPvmsNo();
							StringTokenizer str = new StringTokenizer(itemCode, "/");
							String itemNivCode = "";
							while (str.hasMoreTokens()) {

								itemNivCode = str.nextToken();

							}
							int itemNiv =Integer.parseInt(itemNivCode)+1;
							itemNo = "NIV/"+itemNiv;
						}else{
							itemNo = "NIV/011"; 
						}*/
						masItem.setPvmsNo("temp");
						hbt.save(masItem);

				
					PatientPrescriptionDetails patientPrescriptionDetails = new PatientPrescriptionDetails();
					if(masItem.getId() != null){
						MasStoreItem masStoreItem = new MasStoreItem();
						masStoreItem.setId(masItem.getId());
					patientPrescriptionDetails.setItem(masStoreItem);
					}
					if (frequencyList.get(i) != null && !frequencyList.get(i).equals("")) {
					MasFrequency masFrequency = new MasFrequency();
					masFrequency.setId(frequencyList.get(i));
					patientPrescriptionDetails.setFrequency(masFrequency);
					}
					if (dosageList.get(i) != null && !dosageList.get(i).equals("")) {
						patientPrescriptionDetails.setDosage(dosageList.get(i));
					}
					if (remarksList.get(i) != null && !remarksList.get(i).equals("")) {
					patientPrescriptionDetails.setRemarks(remarksList.get(i));
					}
					//patientPrescriptionDetails.setType(typeLeftRightList.get(i));
					if (noOfDaysList.get(i) != null && !noOfDaysList.get(i).equals("")) {
						patientPrescriptionDetails.setNoOfDays(noOfDaysList.get(i));
					}
					if (routeList.get(i) != null && !routeList.get(i).equals("")) {
						patientPrescriptionDetails.setRoute(routeList.get(i));
					}
					
					//patientPrescriptionDetails.setInstruction(instructionList.get(i));
					if (totalList.get(i) != null && !totalList.get(i).equals("")) {
						patientPrescriptionDetails.setTotal(totalList.get(i));
					}
					patientPrescriptionDetails.setPrescription(patientPrescriptionHeader);
					patientPrescriptionDetails.setGivenQty(0);
					patientPrescriptionDetails.setDetailStatus("a");
					List<MasStoreItem> storeItemList=new ArrayList<MasStoreItem>();
					/*if(injCategoryList.equals("y")){
						patientPrescriptionDetails.setInjectionStatus("p");
					}else{
						patientPrescriptionDetails.setInjectionStatus("n");
					}*/
					
					if(ctList.get(i).equals("y")){
						patientPrescriptionDetails.setCt("yes");
					}else{
						patientPrescriptionDetails.setCt("no");
					}
					
					
					hbt.save(patientPrescriptionDetails);
					
					/**
					 * This Code is use for Injection Appointment
					 * Code By Ritu Sahu
					 * Date 07 Nov 2011
					 */
					
					if(storeItemList.size()>0){
						List<InjAppointmentHeader> injectionRegisterList=new ArrayList<InjAppointmentHeader>();
						injectionRegisterList=hbt.find("select inj from jkt.hms.masters.business.InjAppointmentHeader as inj join inj.Visit as visit where visit.Id="+visitId);
						InjAppointmentHeader injectionAppointment = new InjAppointmentHeader();
						
						 /* if(injectionRegisterList.size()>0) means , Data is already available In InjectionRegister table  */
						 
						if(injectionRegisterList.size()>0){
							for (InjAppointmentHeader injectionRegisterTemp : injectionRegisterList) {
								injectionAppointment.setId(injectionRegisterTemp.getId());
							}
						}else{
							injectionAppointment.setAppointmentDate(new Date());
							Patient patientInj = new Patient();
							patientInj.setId(hinId);
							injectionAppointment.setHin(patientInj);
							Visit visitInj = new Visit();
							visitInj.setId(visitId);
							injectionAppointment.setVisit(visitInj);
							MasHospital masHospitalInj = new MasHospital();
							masHospitalInj.setId(hospitalId);
							injectionAppointment.setHospital(masHospitalInj);
							
							injectionAppointment.setStatus("p");
							injectionAppointment.setLastChgTime(time);
							Users user = new Users();
							user.setId(userId);
							injectionAppointment.setLastChgBy(user);
							injectionAppointment.setLastChgDate(date);
							injectionAppointment.setPrescription(patientPrescriptionHeader);
							hbt.save(injectionAppointment);
						}
						int freqCount=0;
						if(frequencyList.get(i) > 10){
							freqCount = 1; /* if frequency is greater than 10 then only one entry will go in Injection Appointment table*/
						}else{
							freqCount = frequencyList.get(i);
						}
						if(freqCount > 0){	
							for (int j = 1; j <= freqCount; j++) {
								InjAppointmentDetails injAppointmentDetails = new InjAppointmentDetails();
								injAppointmentDetails.setAppointmentTime(time);
								injAppointmentDetails.setDose(dosageList.get(i));
								MasFrequency frequency = new MasFrequency();
								frequency.setId(frequencyList.get(i));
								injAppointmentDetails.setFrequency(frequency);
								injAppointmentDetails.setRoute(routeList.get(i));
								MasStoreItem item = new MasStoreItem();
								item.setId(itemIdList.get(i));
								injAppointmentDetails.setItem(item);
								injAppointmentDetails.setInjAppointmentHeader(injectionAppointment);
								injAppointmentDetails.setNoOfDays(noOfDaysList.get(i));
								injAppointmentDetails.setPatientPrescriptionDetails(patientPrescriptionDetails);
								injAppointmentDetails.setStatus("p");
								hbt.save(injAppointmentDetails);
							}
						}
					}
					}
					/**
					 * END Of COde
					 * This Code is use for Injection
					 * Code By Ritu Sahu
					 * Date 07 Nov 2011
					 */
				}
			}
			}
			
			
			// by Tirath for time without second
			Map<String, Object> utilMap1 = new HashMap<String, Object>();
			utilMap1 = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			
			String time1 = (String) utilMap1.get("currentTimeWithoutSc");
			
			if (chargeCodeIdList.size() > 0) {
				MasDepartment masDepartment = new MasDepartment();
				MasHospital masHospital = new MasHospital();
				Patient patient = new Patient();
				MasEmployee masEmployee2 = new MasEmployee();

				PatientInvestigationHeader patientInvestigationHeader = new PatientInvestigationHeader();

				patient.setId(hinId);
				patientInvestigationHeader.setHin(patient);

				masDepartment.setId(departmentId);
				patientInvestigationHeader.setDepartment(masDepartment);
				Visit visit = new Visit();
				visit.setId(visitId);
				patientInvestigationHeader.setVisit(visit);
				
				masHospital.setId(hospitalId);
				patientInvestigationHeader.setHospital(masHospital);
				patientInvestigationHeader.setStatus("p");
				patientInvestigationHeader
						.setInvestigationDate(consultationDateToInsert);
				patientInvestigationHeader.setInvestigationTime(consultationTime);
				patientInvestigationHeader.setClinicalNotes(clinicalNotes1);
				patientInvestigationHeader.setOpdPatientDetails(opdPatientDetails);
				hbt.save(patientInvestigationHeader);

				DgOrderhd dgOrderhd = new DgOrderhd();
				dgOrderhd.setOrderDate(consultationDateToInsert);
				dgOrderhd.setOrderTime(time1);
				masHospital.setId(hospitalId);
				dgOrderhd.setHospital(masHospital);
				patient.setId(hinId);
				dgOrderhd.setHin(patient);
				masDepartment.setId(departmentId);
				dgOrderhd.setDepartment(masDepartment);
				if (empId != 0) {
					masEmployee2.setId(empId);
					dgOrderhd.setPrescribedBy(masEmployee2);
				}
				dgOrderhd.setPatientType("OP");
				dgOrderhd.setTestType("Regular");
				dgOrderhd.setCreatedby(userName);
				dgOrderhd.setCreatedon(consultationDateToInsert);

				//orderSeqNo = generateOrderNumber();
				dgOrderhd.setOrderNo(orderSeqNo);
				if (visitId != 0) {
					visit = new Visit();
					visit.setId(visitId);
					dgOrderhd.setVisit(visit);
				}
				dgOrderhd.setClinicalNote(clinicalNotes1);
				dgOrderhd.setOrderStatus("P");
				dgOrderhd.setLabOrderStatus("P");
				dgOrderhd.setLastChgBy(userId);
				dgOrderhd.setLastChgDate(consultationDateToInsert);
				dgOrderhd.setLastChgTime(consultationTime);
				dgOrderhd.setInvestigationRequestionNo(patientInvestigationHeader);
				hbt.save(dgOrderhd);
				//System.out.println("chargeCodeIdList.size()--"+chargeCodeIdList.size());
				for (int i = 0; i < chargeCodeIdList.size(); i++) {
					PatientInvestigationDetails patientInvestigationDetails = new PatientInvestigationDetails();
					patientInvestigationDetails
					.setInvestigationHeader(patientInvestigationHeader);
					MasChargeCode masChargeCode = new MasChargeCode();
					//System.out.println("Integer.parseInt(chargeCodeIdList.get(i))--"+Integer.parseInt(chargeCodeIdList.get(i)));
					masChargeCode.setId(Integer.parseInt(chargeCodeIdList.get(i)));
					//System.out.println("Integer.parseInt(chargeCodeIdList.get(i))--");
					patientInvestigationDetails.setChargeCode(masChargeCode);
					//patientInvestigationDetails.setQuantity(quantityList.get(i));
					patientInvestigationDetails.setReferToMh(referToMhList.get(i));

					//patientInvestigationDetails.setClinicalNotes(clinicalList.get(i));
					hbt.save(patientInvestigationDetails);

					DgOrderdt dgOrderdt = new DgOrderdt();
					dgOrderdt.setOrderhd(dgOrderhd);
					masChargeCode.setId(Integer.parseInt(chargeCodeIdList.get(i)));
					dgOrderdt.setChargeCode(masChargeCode);
					//dgOrderdt.setOrderQty(quantityList.get(i));

					dgOrderdt.setCreatedby(userName);
					dgOrderdt.setCreatedon(consultationDateToInsert);
					dgOrderdt.setLastChgBy(userId);
					dgOrderdt.setLastChgDate(consultationDateToInsert);
					dgOrderdt.setLastChgTime(consultationTime);
					// method written for taking out the values of mascharge
					// code and subcharge
					Map masChargeMap = getMasChargeCodeFromChargeId(Integer
							.parseInt(chargeCodeIdList.get(i)));
					MasChargeCode masChargeCodeObj = (MasChargeCode) masChargeMap
					.get("masChargeCode");
					int mainChargeId = masChargeCodeObj.getMainChargecode()
					.getId();
					int subChargeId = masChargeCodeObj.getSubChargecode()
					.getId();
					if (masChargeCodeObj.getMainChargecode()
							.getMainChargecodeCode().equalsIgnoreCase("Lab")) {
						dgOrderdt.setOrderStatus("P");
					} else {
						dgOrderdt.setOrderStatus("P");
					}
					MasMainChargecode masMainChargecode = new MasMainChargecode();
					masMainChargecode.setId(mainChargeId);
					dgOrderdt.setMainChargecode(masMainChargecode);
					MasSubChargecode masSubChargecode = new MasSubChargecode();
					masSubChargecode.setId(subChargeId);
					dgOrderdt.setSubChargeid(masSubChargecode);
					dgOrderdt.setInvestigation(new DgMasInvestigation(Integer.parseInt(chargeCodeIdList.get(i))));
					dgOrderdt.setInvestigationToMH(referToMhList.get(i));
					dgOrderdt.setReferToMh(referToMhList.get(i));
					hbt.saveOrUpdate(dgOrderdt);
				}

				// ///////////// save Sample collection details for Radiology
				// test////////////////////

		/*	 String dateCollection = (String) utilMap.get("currentDate");
				String timeCollection = (String) utilMap.get("currentTime");

				DgSampleCollectionHeader dgSampleCollectionHeader = new DgSampleCollectionHeader();
				List<MasChargeCode> chargeCodeList = new ArrayList<MasChargeCode>();
				boolean goneInLoop = false;

				for (int j = 0; j < chargeCodeIdList.size() && !goneInLoop; j++) {
					int chargeCodeId = Integer.parseInt(""
							+ chargeCodeIdList.get(j));
					chargeCodeList = session
							.createCriteria(MasChargeCode.class).add(
									Restrictions.eq("Id", chargeCodeId))
							.createAlias("MainChargecode", "mcc").createAlias(
									"mcc.Department", "dept").createAlias(
									"dept.DepartmentType", "dt").add(
									Restrictions.eq("dt.DepartmentTypeCode",
											"RADIO")).list();
					if (chargeCodeList.size() > 0) {
						for (MasChargeCode chargeCode : chargeCodeList) {
							try {
								int inpatientId = 0;
								if (visitId != 0) {
									Visit visit1 = new Visit();
									visit1.setId(visitId);
									dgSampleCollectionHeader.setVisit(visit1);
									dgSampleCollectionHeader
											.setPatientType("OP");
								}

								if (hinId != 0) {
									Patient patient1 = new Patient();
									patient1.setId(hinId);
									dgSampleCollectionHeader.setHin(patient1);
								}
								if (hospitalId != 0) {
									MasHospital hospital = new MasHospital();
									hospital.setId(hospitalId);
									dgSampleCollectionHeader
											.setHospital(hospital);
								}

								if (departmentId != 0) {
									MasDepartment masDepartment1 = new MasDepartment();
								//	chargeCode.getMainChargecode().getDepartment().getId()
									masDepartment1.setId(departmentId);
									dgSampleCollectionHeader
											.setDepartment(masDepartment1);
								}

								if (departmentId != 0) {
									MasDepartment orderByDepartment = new MasDepartment();
									orderByDepartment.setId(departmentId);
									dgSampleCollectionHeader
											.setOrderByDepartment(orderByDepartment);
								}

								dgSampleCollectionHeader.setOrder(dgOrderhd);

								// if (departmentId != 0) {
								// DgCollectionCenter dgCollectionCenter = new
								// DgCollectionCenter();
								// dgCollectionCenter.setId(departmentId);
								// dgSampleCollectionHeader.setCollectionCenter(dgCollectionCenter);
								// }

								dgSampleCollectionHeader.setOrderStatus("P");
								dgSampleCollectionHeader.setLastChgBy(userName);
								dgSampleCollectionHeader
										.setLastChgDate(HMSUtil
												.convertStringTypeDateToDateType(dateCollection));
								dgSampleCollectionHeader.setLastChgTime(time);
								dgSampleCollectionHeader
										.setDiagnosisDate(HMSUtil
												.convertStringTypeDateToDateType(dateCollection));
								dgSampleCollectionHeader.setDiagnosisTime(time);
								hbt.save(dgSampleCollectionHeader);

							} catch (DataAccessException e) {
								e.printStackTrace();
							}
							try {

								for (int i = 0; i < chargeCodeIdList.size(); i++) {
									int chargeId = 0;
									if (chargeCodeIdList.get(i) != null
											&& !chargeCodeIdList.get(i).equals(
													"")) {
										chargeId = Integer
												.parseInt((String) chargeCodeIdList
														.get(i));
										MasChargeCode maschrgCode = (MasChargeCode) session
												.createCriteria(
														MasChargeCode.class)
												.add(
														Restrictions.eq("Id",
																chargeId))
												.list().get(0);
										if (maschrgCode.getMainChargecode()
												.getMainChargecodeCode()
												.equalsIgnoreCase("RADIO")) {
											MasChargeCode masChargeCode1 = new MasChargeCode();
											MasSubChargecode masSubChargecode1 = new MasSubChargecode();

											DgSampleCollectionDetails dgSampleCollectionDetails = new DgSampleCollectionDetails();
											dgSampleCollectionDetails
													.setSampleCollectionHeader(dgSampleCollectionHeader);

											dgSampleCollectionDetails
													.setCollected("y");

											masChargeCode1
													.setId(Integer
															.parseInt((String) chargeCodeIdList
																	.get(i)));
											dgSampleCollectionDetails
													.setChargeCode(masChargeCode1);

											MasMainChargecode masMainChargecode1 = new MasMainChargecode();
											masMainChargecode1
													.setId(maschrgCode
															.getMainChargecode()
															.getId());
											dgSampleCollectionDetails
													.setMaincharge(masMainChargecode1);

											dgSampleCollectionDetails
													.setSubcharge(maschrgCode
															.getSubChargecode());

											MasEmployee masEmployee1 = new MasEmployee();
											masEmployee1.setId(userId);
											dgSampleCollectionDetails
													.setCollectedBy(masEmployee1);

											dgSampleCollectionDetails
													.setDiagNo(generateDiagNumber(maschrgCode
															.getSubChargecode()
															.getId()));

											dgSampleCollectionDetails
													.setInvestigation(new DgMasInvestigation(
															chargeId));
											dgSampleCollectionDetails
													.setLastChgBy(userName);
											dgSampleCollectionDetails
													.setLastChgDate(HMSUtil
															.convertStringTypeDateToDateType(dateCollection));
											dgSampleCollectionDetails
													.setLastChgTime(time);
											dgSampleCollectionDetails
													.setRejected("n");
											dgSampleCollectionDetails
													.setSampleCollDatetime(new Date());
											dgSampleCollectionDetails
													.setOrderStatus("P");
											try {
												hbt
														.save(dgSampleCollectionDetails);
											} catch (RuntimeException e) {
												e.printStackTrace();
											}
										}
									}
								}
							} catch (NumberFormatException e) {
								e.printStackTrace();
							}
						}
						goneInLoop = true;
					}
				}
				// ///////////////////////////End Save details For Radio Order
				// Booking///////////////////////////

				// ////////////////////////// Save details order booking for lab
				// /////////////////////
				dgSampleCollectionHeader = new DgSampleCollectionHeader();
				chargeCodeList = new ArrayList<MasChargeCode>();
				goneInLoop = false;
				for (int j = 0; j < chargeCodeIdList.size() && !goneInLoop; j++) {
					int chargeCodeId = Integer.parseInt(""
							+ chargeCodeIdList.get(j));
					chargeCodeList = session
							.createCriteria(MasChargeCode.class).add(
									Restrictions.eq("Id", chargeCodeId))
							.createAlias("MainChargecode", "mcc").createAlias(
									"mcc.Department", "dept").createAlias(
									"dept.DepartmentType", "dt").add(
									Restrictions.eq("dt.DepartmentTypeCode",
											"DIAG")).list();

					if (chargeCodeList.size() > 0) {
						for (MasChargeCode chargeCode : chargeCodeList) {
							try {
								int inpatientId = 0;
								if (visitId != 0) {
									Visit visit1 = new Visit();
									visit1.setId(visitId);
									dgSampleCollectionHeader.setVisit(visit1);
									dgSampleCollectionHeader
											.setPatientType("OP");
								}
								if (hinId != 0) {
									Patient patient1 = new Patient();
									patient1.setId(hinId);
									dgSampleCollectionHeader.setHin(patient1);
								}
								if (hospitalId != 0) {
									MasHospital hospital = new MasHospital();
									hospital.setId(hospitalId);
									dgSampleCollectionHeader
											.setHospital(hospital);
								}
								if (departmentId != 0) {
									MasDepartment masDepartment1 = new MasDepartment();
									//chargeCode.getMainChargecode().getDepartment().getId()
									masDepartment1.setId(departmentId);
									dgSampleCollectionHeader
											.setDepartment(masDepartment1);
								}
								if (departmentId != 0) {
									MasDepartment orderByDepartment = new MasDepartment();
									orderByDepartment.setId(departmentId);
									dgSampleCollectionHeader
											.setOrderByDepartment(orderByDepartment);
								}
								dgSampleCollectionHeader.setOrder(dgOrderhd);
								// DgCollectionCenter dgCollectionCenter = new
								// DgCollectionCenter();
								// dgCollectionCenter.setId(departmentId);
								// dgSampleCollectionHeader.setCollectionCenter(dgCollectionCenter);
								dgSampleCollectionHeader.setOrderStatus("P");
								dgSampleCollectionHeader.setLastChgBy(userName);
								dgSampleCollectionHeader
										.setLastChgDate(HMSUtil
												.convertStringTypeDateToDateType(dateCollection));
								dgSampleCollectionHeader.setLastChgTime(time);
								dgSampleCollectionHeader
										.setDiagnosisDate(HMSUtil
												.convertStringTypeDateToDateType(dateCollection));
								dgSampleCollectionHeader.setDiagnosisTime(time);
								hbt.save(dgSampleCollectionHeader);
							} catch (DataAccessException e) {
								e.printStackTrace();
							}
							try {
								for (int i = 0; i < chargeCodeIdList.size(); i++) {
									int chargeId = 0;
									if (chargeCodeIdList.get(i) != null
											&& !chargeCodeIdList.get(i).equals(
													"")) {
										chargeId = Integer
												.parseInt((String) chargeCodeIdList
														.get(i));
										MasChargeCode maschrgCode = (MasChargeCode) session
												.createCriteria(
														MasChargeCode.class)
												.add(
														Restrictions.eq("Id",
																chargeId))
												.list().get(0);
										if (maschrgCode.getMainChargecode()
												.getMainChargecodeCode()
												.equalsIgnoreCase("Lab")) {
											DgSampleCollectionDetails dgSampleCollectionDetails = new DgSampleCollectionDetails();
											dgSampleCollectionDetails
													.setSampleCollectionHeader(dgSampleCollectionHeader);
											dgSampleCollectionDetails
													.setCollected("y");
											dgSampleCollectionDetails
													.setChargeCode(maschrgCode);
											MasMainChargecode masMainChargecode1 = new MasMainChargecode();
											masMainChargecode1
													.setId(maschrgCode
															.getMainChargecode()
															.getId());
											dgSampleCollectionDetails
													.setMaincharge(masMainChargecode1);
											dgSampleCollectionDetails
													.setSubcharge(maschrgCode
															.getSubChargecode());
											MasEmployee masEmployee1 = new MasEmployee();
											masEmployee1.setId(userId);
											dgSampleCollectionDetails
													.setCollectedBy(masEmployee1);
											dgSampleCollectionDetails
													.setDiagNo(generateDiagNumber(maschrgCode
															.getSubChargecode()
															.getId()));
											dgSampleCollectionDetails
													.setInvestigation(new DgMasInvestigation(
															chargeId));
											dgSampleCollectionDetails
													.setLastChgBy(userName);
											dgSampleCollectionDetails
													.setLastChgDate(HMSUtil
															.convertStringTypeDateToDateType(dateCollection));
											dgSampleCollectionDetails
													.setLastChgTime(time);
											dgSampleCollectionDetails
													.setRejected("n");
											dgSampleCollectionDetails
													.setSampleCollDatetime(new Date());
											dgSampleCollectionDetails
													.setOrderStatus("P");
											try {
												hbt
														.save(dgSampleCollectionDetails);
											} catch (RuntimeException e) {
												e.printStackTrace();
											}
										}
									}
								}
							} catch (NumberFormatException e) {
								e.printStackTrace();
							}
						}
						goneInLoop = true;
					}
				}
                  */
				// /////////////////////// End Saving sampleCollection Details
				// for Lab Order Booking////////////
			}
			
			if(physioRequisitionHeaderId!=0){
				PhysioRequisitionHeader requisitionHeader = (PhysioRequisitionHeader)hbt.load(PhysioRequisitionHeader.class, physioRequisitionHeaderId);
				requisitionHeader.setOpdPatientDetails(opdPatientDetails);
				requisitionHeader.setReqTime(consultationTime);
				requisitionHeader.setLastChgTime(consultationTime);
				hbt.update(requisitionHeader);
				
			}
			if(procedureHeaderId!=0){
				ProcedureHeader procedureHeader = (ProcedureHeader)hbt.load(ProcedureHeader.class, procedureHeaderId);
				procedureHeader.setOpdPatientDetails(opdPatientDetails);
				procedureHeader.setLastChgTime(consultationTime);
				hbt.update(procedureHeader);
				
			}
			// }
			succesfullyAdded = true;
			tx.commit();
		} catch (Exception e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();

		} finally {
			// --------Session Closing----------
		//	session.close();
		}
		returnMap.put("succesfullyAdded", succesfullyAdded);
		returnMap.put("orderSeqNo", orderSeqNo);
		return returnMap;
	}
	
	public Map<String, Object> submitProPatientTreatmentDetails(Map mapForDSPro) {
		Session session = (Session) getSession();
		Map<String, Object> returnMap = new HashMap<String, Object>();
		String orderSeqNo = "";
		boolean successfullyAdded = false;
		List <PatientPrescriptionDetails> proData=new ArrayList<PatientPrescriptionDetails>();
	  /*  List pvmsNoList = (List) mapForDS.get("pvmsNoList");
		List<Integer> frequencyList = (List) mapForDS.get("frequencyList");
		List<String> dosageList = (List) mapForDS.get("dosageList");
		List<String> typeLeftRightList = (List) mapForDS.get("typeLeftRightList");
		List<String> instructionList = (List) mapForDS.get("instructionList");
		List<Integer> totalList = (List) mapForDS.get("totalList");
		List<Integer> noOfDaysList = (List) mapForDS.get("noOfDaysList");
		List<String> remarksList = (List) mapForDS.get("remarksList");
		List<String> chargeCodeIdList = (List) mapForDS.get("chargeCodeIdList");
		List<Integer> quantityList = (List) mapForDS.get("quantityList");
		//List<String> clinicalList = (List) mapForDS.get("clinicalList");
		String[] diagnosisIdAray = (String[]) mapForDS.get("diagnosisIdAray");*/
		int visitId = (Integer) mapForDSPro.get("visitId");
		String userSrNo = (String)mapForDSPro.get("userSrNo");
		String query="SELECT ppd FROM PatientPrescriptionDetails ppd join ppd.Prescription pph where pph.Visit='"+visitId+"'";
		 proData=session.createQuery(query).list();
		Iterator itr=proData.iterator();
        int i=0;
    	try {
		while(itr.hasNext()){
			PatientPrescriptionDetails patientPrescriptionDetails=(PatientPrescriptionDetails)itr.next();
	
			Connection conn = null;
			Properties properties = new Properties();
			URL resourcePathHIC=Thread.currentThread().getContextClassLoader().getResource("hicDetails.properties");
			
				properties.load(resourcePathHIC.openStream());
			
			String hicDB = properties.getProperty("hicDB");
			String hicUser = properties.getProperty("hicUser");
			String hicPwd = properties.getProperty("hicPwd");
			String hicDbConfigure =  properties.getProperty("hicDbConfigure");
			
			if(hicDbConfigure.equals("yes")) {
				Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
				conn = DriverManager.getConnection(hicDB, hicUser, hicPwd);

				String procSql = "{ call SMC_HIC_INSERT_TREATMENT(?,?,?,?,?)}";
				CallableStatement csstmt = conn.prepareCall(procSql);
				csstmt.setString(1, patientPrescriptionDetails.getItem().getNomenclature());
				csstmt.setString(2, patientPrescriptionDetails.getDosage());
				csstmt.setString(3, (patientPrescriptionDetails.getInstruction()!= null ? patientPrescriptionDetails.getInstruction() : ""));
				csstmt.setString(4, (patientPrescriptionDetails.getRemarks()!= null ? patientPrescriptionDetails.getRemarks():"" ));
				csstmt.setInt(5, Integer.parseInt(userSrNo));
				csstmt.execute();
				csstmt.close();

				successfullyAdded = true;
			}
		}
       }catch (Exception e) {
			e.printStackTrace();
		} finally {
			// --------Session Closing----------
		//	session.close();
		}
		
		returnMap.put("succesfullyAdded", successfullyAdded);
		return returnMap;
	}

	







	/*public Map<String, Object> submitProPatientDetails(Map mapForDSPro) {
		Session session = (Session) getSession();
		Map<String, Object> returnMap = new HashMap<String, Object>();
		String orderSeqNo = "";
		boolean successfullyAdded = false;
		List <PatientPrescriptionDetails> proData=new ArrayList<PatientPrescriptionDetails>();
	    List pvmsNoList = (List) mapForDS.get("pvmsNoList");
		List<Integer> frequencyList = (List) mapForDS.get("frequencyList");
		List<String> dosageList = (List) mapForDS.get("dosageList");
		List<String> typeLeftRightList = (List) mapForDS.get("typeLeftRightList");
		List<String> instructionList = (List) mapForDS.get("instructionList");
		List<Integer> totalList = (List) mapForDS.get("totalList");
		List<Integer> noOfDaysList = (List) mapForDS.get("noOfDaysList");
		List<String> remarksList = (List) mapForDS.get("remarksList");
		List<String> chargeCodeIdList = (List) mapForDS.get("chargeCodeIdList");
		List<Integer> quantityList = (List) mapForDS.get("quantityList");
		//List<String> clinicalList = (List) mapForDS.get("clinicalList");
		String[] diagnosisIdAray = (String[]) mapForDS.get("diagnosisIdAray");
		int visitId = (Integer) mapForDSPro.get("visitId");
		String query="SELECT ppd FROM PatientPrescriptionDetails ppd join ppd.Prescription pph where pph.Visit='"+visitId+"'";
		System.out.println("thois is our query"+query);
		 proData=session.createQuery(query).list();
		System.out.println(proData.size());
		Iterator itr=proData.iterator();
        int i=0;
    	try {
		while(itr.hasNext()){
			PatientPrescriptionDetails patientPrescriptionDetails=(PatientPrescriptionDetails)itr.next();
		   System.out.println("ashutos singh successfullyexecuted");
	
			Connection conn = null;
			Properties properties = new Properties();
			URL resourcePathHIC=Thread.currentThread().getContextClassLoader().getResource("hicDetails.properties");
			
				properties.load(resourcePathHIC.openStream());
			
			String hicDB = properties.getProperty("hicDB");
			String hicUser = properties.getProperty("hicUser");
			String hicPwd = properties.getProperty("hicPwd");
			
				Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
				conn = DriverManager.getConnection(hicDB, hicUser, hicPwd);
				
		String procSql = "{ call INSERTTREATMENTDETAILS(?,?,?,?,?,?,?)}";
		CallableStatement csstmt = conn.prepareCall(procSql);
		csstmt.setInt(1, patientPrescriptionDetails.getId())	;
		csstmt.setInt(2,patientPrescriptionDetails.getPrescription().getId())	;
		csstmt.setString(3, patientPrescriptionDetails.getItem().getNomenclature());
		csstmt.setString(4, patientPrescriptionDetails.getDosage());
		csstmt.setString(5, (patientPrescriptionDetails.getInstruction()!= null ? patientPrescriptionDetails.getInstruction() : ""));
		csstmt.setString(6, (patientPrescriptionDetails.getRemarks()!= null ? patientPrescriptionDetails.getRemarks():"" ));
		csstmt.registerOutParameter(7,OracleTypes.CURSOR);
		csstmt.execute();
		csstmt.close();
		
		successfullyAdded = true;
		   System.out.println("after ashutos singh successfullyexecuted");
		}
       }catch (Exception e) {
			e.printStackTrace();
		} finally {
			// --------Session Closing----------
			session.close();
		}
		
		returnMap.put("succesfullyAdded", successfullyAdded);
		return returnMap;
	}*/

	public Map<String, Object> submitProPatientSicknessDetails(Map mapForDSPro) {
		//System.out.println("in sickness");
		Session session = (Session) getSession();
		Map<String, Object> returnMap = new HashMap<String, Object>();
		String orderSeqNo = "";
		boolean successfullyAdded = false;
		List <PatientPrescriptionDetails> proData=new ArrayList<PatientPrescriptionDetails>();
	  /*  List pvmsNoList = (List) mapForDS.get("pvmsNoList");
		List<Integer> frequencyList = (List) mapForDS.get("frequencyList");
		List<String> dosageList = (List) mapForDS.get("dosageList");
		List<String> typeLeftRightList = (List) mapForDS.get("typeLeftRightList");
		List<String> instructionList = (List) mapForDS.get("instructionList");
		List<Integer> totalList = (List) mapForDS.get("totalList");
		List<Integer> noOfDaysList = (List) mapForDS.get("noOfDaysList");
		List<String> remarksList = (List) mapForDS.get("remarksList");
		List<String> chargeCodeIdList = (List) mapForDS.get("chargeCodeIdList");
		List<Integer> quantityList = (List) mapForDS.get("quantityList");
		//List<String> clinicalList = (List) mapForDS.get("clinicalList");
		String[] diagnosisIdAray = (String[]) mapForDS.get("diagnosisIdAray");*/
		int visitId = (Integer) mapForDSPro.get("visitId");
		String[] diagnosisIdAray = (String[]) mapForDSPro.get("diagnosisIdAray");
		String disposal=mapForDSPro.get("disposal").toString();
		String queryDignosis = "";
		List objectList = new ArrayList();
		String diagnosisIdString=",";
		String diagnosisIdString1=null;
		String diagnosisNameString=",";
		String diagnosisNameString1=null;
		if(diagnosisIdAray !=null && diagnosisIdAray.length>0)
		{
		for (int i = 0; i < diagnosisIdAray.length; i++) {
			diagnosisIdString1= diagnosisIdAray[i].toString();
			diagnosisIdString+=diagnosisIdString1+"/";
			
			queryDignosis="select ICD_NAME from mas_icd where icd_code='"+ diagnosisIdAray[i].toString() + "'";
			objectList = (List) session.createSQLQuery(queryDignosis).list();
			if(objectList!=null){
				diagnosisNameString1= objectList.get(0).toString();
			   diagnosisNameString +=diagnosisNameString1+" /";
			}
		}
		}
		//System.out.println("this is id string"+diagnosisIdString+"this name string"+diagnosisNameString);
		Date consultationDate=HMSUtil.convertStringTypeDateToDateType((String)mapForDSPro.get("consultationDate"));
		String query="SELECT vis,pph,pat,doc from Visit vis left join vis.PatientPrescriptionHeaders pph  left join vis.Hin pat left join vis.Doctor doc where vis.Id='"+visitId+"'";
		//String query="SELECT ppd FROM PatientPrescriptionDetails ppd join ppd.Prescription pph where pph.Visit='"+visitId+"'";
		//System.out.println("this is our query for sick reporting"+query);
		proData=session.createQuery(query).list();
		//System.out.println(proData.size());
		Iterator itr=proData.iterator();
		 String userSrNo = (String)mapForDSPro.get("userSrNo");
        int i=0;
    	try {
		while(itr.hasNext()){
			//System.out.println("this is in registration-------------------->>>>>>>>>>>");
			 Object[] tuple = (Object[]) itr.next();
			 Visit vis=(Visit)tuple[0];
			 PatientPrescriptionHeader pph=(PatientPrescriptionHeader)tuple[1];
			// DischargeIcdCode dic=(DischargeIcdCode)tuple[2];
			 Patient pat=(Patient)tuple[2];
			 MasEmployee doc=(MasEmployee)tuple[3];
			//System.out.println("ashutos singh successfullyexecuted");
			 Connection conn = null;
			 Properties properties = new Properties();
			 URL resourcePathHIC=Thread.currentThread().getContextClassLoader().getResource("hicDetails.properties");
			
				properties.load(resourcePathHIC.openStream());
			
			String hicDB = properties.getProperty("hicDB");
			String hicUser = properties.getProperty("hicUser");
			String hicPwd = properties.getProperty("hicPwd");
			String hicDbConfigure =  properties.getProperty("hicDbConfigure");
			if(hicDbConfigure.equals("yes")) {
				Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
				conn = DriverManager.getConnection(hicDB, hicUser, hicPwd);
				//csstmt.setString(5, (patientPrescriptionDetails.getInstruction()!= null ? patientPrescriptionDetails.getInstruction() : ""));
				SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
				String date_form=sdf.format(consultationDate);
				String procSql = "{ call SMC_HIC_INSERT_SMCSICKNESS(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
				CallableStatement csstmt = conn.prepareCall(procSql);
				csstmt.setString(1,date_form)	;
				csstmt.setInt(2,0);
				csstmt.setString(3,date_form);
				csstmt.setString(4,date_form);
				csstmt.setString(5,(disposal!= null ? disposal: ""));
				csstmt.setString(6,(diagnosisNameString.substring(1)!= null ? diagnosisNameString.substring(1): ""));
				csstmt.setString(7,date_form );
				csstmt.setInt(8,Integer.parseInt(userSrNo));
				csstmt.setString(9,(diagnosisIdString.substring(1)!= null ? diagnosisIdString.substring(1) : ""));
				csstmt.setString(10,(vis.getHospital()!= null ? vis.getHospital().getHospitalName() : ""));
				csstmt.setString(11,"");//HOSPITAL CATO NOT IN SMC
				csstmt.setString(12,(pat.getServiceNo()!= null ? pat.getServiceNo() : ""));
				csstmt.setString(13,(pat.getUnit()!= null ?pat.getUnit().getUnitName() : ""));
				csstmt.setString(14,(doc.getFirstName()!= null ? doc.getFirstName(): ""));
				csstmt.setString(15,(doc.getRank()!= null ? doc.getRank().getRankName() : ""));
				csstmt.setString(16,(doc.getUnit()!= null ? doc.getUnit().getUnitName() : ""));
				csstmt.setString(17,(doc.getDesignation()!= null ? doc.getDesignation() : ""));
				csstmt.setString(18,"");
				csstmt.setString(19,"");
				csstmt.registerOutParameter(20,OracleTypes.CURSOR);
				csstmt.execute();
				csstmt.close();
				successfullyAdded = true;
			}
		//System.out.println("after ashutos singh successfullyexecuted");
		}
       }catch (Exception e) {
			e.printStackTrace();
		}finally {
			// --------Session Closing----------
			//session.close();
		}
		returnMap.put("succesfullyAdded", successfullyAdded);
		return returnMap;
	}
public Map<String, Object> submitProPatientRegistrationDetails(Map mapForDSPro) {
		Session session = (Session) getSession();
		Map<String, Object> returnMap = new HashMap<String, Object>();
		String orderSeqNo = "";
		boolean successfullyAdded = false;
		List <PatientPrescriptionDetails> proData=new ArrayList<PatientPrescriptionDetails>();
	  /*  List pvmsNoList = (List) mapForDS.get("pvmsNoList");
		List<Integer> frequencyList = (List) mapForDS.get("frequencyList");
		List<String> dosageList = (List) mapForDS.get("dosageList");
		List<String> typeLeftRightList = (List) mapForDS.get("typeLeftRightList");
		List<String> instructionList = (List) mapForDS.get("instructionList");
		List<Integer> totalList = (List) mapForDS.get("totalList");
		List<Integer> noOfDaysList = (List) mapForDS.get("noOfDaysList");
		List<String> remarksList = (List) mapForDS.get("remarksList");
		List<String> chargeCodeIdList = (List) mapForDS.get("chargeCodeIdList");
		List<Integer> quantityList = (List) mapForDS.get("quantityList");
		//List<String> clinicalList = (List) mapForDS.get("clinicalList");
		String[] diagnosisIdAray = (String[]) mapForDS.get("diagnosisIdAray");*/
		int visitId = (Integer) mapForDSPro.get("visitId");
		String query="SELECT vi,pt FROM Visit vi join vi.Hin pt where vi.id='"+visitId+"'";
		 proData=session.createQuery(query).list();
		Iterator itr=proData.iterator();
        int i=0;
    	try {
		while(itr.hasNext()){
			 Object[] tuple = (Object[]) itr.next();

			 Visit vis=(Visit)tuple[0];
			 Patient pat=(Patient)tuple[1];
	
			 Connection conn = null;
			 Properties properties = new Properties();
			 URL resourcePathHIC=Thread.currentThread().getContextClassLoader().getResource("hicDetails.properties");
			
			 properties.load(resourcePathHIC.openStream());
			 
			 String hicDB = properties.getProperty("hicDB");
			 String hicUser = properties.getProperty("hicUser");
			 String hicPwd = properties.getProperty("hicPwd");
			 String hicDbConfigure =  properties.getProperty("hicDbConfigure");
			 if(hicDbConfigure.equals("yes")) {
				 Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
				 conn = DriverManager.getConnection(hicDB, hicUser, hicPwd);
				 String procSql = "{ call INSERTSMCREGISTRATIONDETAILS(?,?,?,?,?,?,?,?,?)}";
				 CallableStatement csstmt = conn.prepareCall(procSql);
				 csstmt.setString(1, pat.getServiceNo())	;
				 csstmt.setString(2,pat.getSection().getSectionName());
				 csstmt.setInt(3,7);
				 csstmt.setInt(4,7);
				 //		csstmt.setInt(5,vis.getReportingFor().getId());
				 csstmt.registerOutParameter(6,OracleTypes.NUMBER);
				 csstmt.setString(7,"conneted");
				 csstmt.setInt(8,1);
				 csstmt.registerOutParameter(9,OracleTypes.CURSOR);
				 csstmt.execute();
				 csstmt.close();		
				 successfullyAdded = true;
			 }
		}
       }catch (Exception e) {
			e.printStackTrace();
		} finally {
			// --------Session Closing----------
		//	session.close();
		}
		
		returnMap.put("succesfullyAdded", successfullyAdded);
		return returnMap;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> submitOPDPatientDetailsChange(Map mapForDS) {
		Session session = (Session) getSession();
		boolean succesfullyAdded = false;
		Map<String, Object> returnMap = new HashMap<String, Object>();
		String orderSeqNo = (String) mapForDS.get("orderSeqNo");
		List nomenclatureList = (List) mapForDS.get("nomenclatureList");
		List pvmsNoList = (List) mapForDS.get("pvmsNoList");
		List<Integer> frequencyList = (List) mapForDS.get("frequencyList");
		List<String> dosageList = (List) mapForDS.get("dosageList");
		List<String> remarksList = (List) mapForDS.get("remarksList");
		List<String> typeLeftRightList = (List) mapForDS
				.get("typeLeftRightList");
		List<String> instructionList = (List) mapForDS.get("instructionList");
		List<Integer> totalList = (List) mapForDS.get("totalList");
		List<Integer> noOfDaysList = (List) mapForDS.get("noOfDaysList");

		List<String> chargeCodeIdList = (List) mapForDS.get("chargeCodeIdList");
		List<Integer> quantityList = (List) mapForDS.get("quantityList");
		List<String> clinicalList = (List) mapForDS.get("clinicalList");
		String[] diagnosisIdAray = (String[]) mapForDS.get("diagnosisIdAray");
		int hinId = (Integer) mapForDS.get("hinId");
		int departmentId = (Integer) mapForDS.get("departmentId");
		int visitId = (Integer) mapForDS.get("visitId");
		int hospitalId = (Integer) mapForDS.get("hospitalId");
		// int height=(Integer)mapForDS.get("height");
		// int weight=(Integer)mapForDS.get("weight");
		// int pulse=(Integer)mapForDS.get("pulse");
		// String disposal=(String)mapForDS.get("disposal");

		int empId = (Integer) mapForDS.get("empId");
		int userId = (Integer) mapForDS.get("userId");

		// String bp=(String)mapForDS.get("bp");
		String userName = (String) mapForDS.get("userName");
		// String temperature=(String)mapForDS.get("temperature");
		String afmsDescription = (String) mapForDS.get("afmsDescription");
		// String referredDept=(String)mapForDS.get("referredDept");
		String consultationTime = (String) mapForDS.get("consultationTime");
		String consultationDate = (String) mapForDS.get("consultationDate");
		Date consultationDateToInsert = HMSUtil
				.convertStringTypeDateToDateType(consultationDate);
		// String initialDiagnosis=(String)mapForDS.get("initialDiagnosis");

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);

		String plan = (String) mapForDS.get("plan");
		String nextVisitDate = (String) mapForDS.get("nextVisitDate");
		String onExamination = (String) mapForDS.get("onExamination");

		String deleteInv = (String) mapForDS.get("deleteInv");
		String deleteDrug = (String) mapForDS.get("deleteDrug");
		String statusMsg = "";

		// //System.out.println(":::::::"+deleteInv+":::::::::::::"+deleteDrug);
		// String presentComplain=(String)mapForDS.get("presentComplain");
		// String presentIllness=(String)mapForDS.get("presentIllness");
		// String pastHistory=(String)mapForDS.get("pastHistory");
		// String personalHistory=(String)mapForDS.get("personalHistory");
		// String otherDetails=(String)mapForDS.get("otherDetails");
		// String familyHistory=(String)mapForDS.get("familyHistory");
		// String referredDoctars=(String) mapForDS.get("referredDoctars");
		Date nextVisitDateToInsert = HMSUtil
				.convertStringTypeDateToDateType(nextVisitDate);
		List<Integer> itemIdList = new ArrayList<Integer>();

		Transaction tx = null;

		try {
			tx = session.beginTransaction();
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			if (deleteInv.equals("on") && deleteInv != null) {
				List<PatientInvestigationHeader> pInvList = new ArrayList<PatientInvestigationHeader>();
				pInvList = session.createCriteria(
						PatientInvestigationHeader.class).add(
						Restrictions.eq("Visit.Id", visitId)).add(
						Restrictions.eq("Hin.Id", hinId)).list();

				boolean checkpoint = false;
				if (pInvList.size() > 0) {
					for (PatientInvestigationHeader paInv : pInvList) {
						int pHId = 0;
						pHId = paInv.getId();
						List<DgOrderhd> dgOrHdList = new ArrayList<DgOrderhd>();

						dgOrHdList = session.createCriteria(DgOrderhd.class)
								.add(
										Restrictions.eq(
												"InvestigationRequestionNo.Id",
												pHId)).list();

						for (DgOrderhd dgH : dgOrHdList) {
							List<DgSampleCollectionHeader> dgSHdList = new ArrayList<DgSampleCollectionHeader>();

							dgSHdList = session.createCriteria(
									DgSampleCollectionHeader.class).add(
									Restrictions.eq("Order.Id", dgH.getId()))
									.list();

							for (DgSampleCollectionHeader dgsam : dgSHdList) {
								if (dgsam.getOrderStatus()
										.equalsIgnoreCase("P")) {
									checkpoint = true;
								} else {
									checkpoint = false;
									break;
								}
							}

							if (checkpoint) {
								for (DgSampleCollectionHeader dgsam : dgSHdList) {
									String hq01 = "delete from jkt.hms.masters.business.DgSampleCollectionDetails as a where a.SampleCollectionHeader.Id='"
											+ dgsam.getId() + "'";
									Query query01 = session.createQuery(hq01);
									int row01 = query01.executeUpdate();
								}

								String hq02 = "delete from jkt.hms.masters.business.DgSampleCollectionHeader as a where a.Order.Id='"
										+ dgH.getId() + "'";
								Query query02 = session.createQuery(hq02);
								int row02 = query02.executeUpdate();

								String hq0 = "delete from jkt.hms.masters.business.DgOrderdt as a where a.Orderhd.Id='"
										+ dgH.getId() + "'";
								Query query0 = session.createQuery(hq0);
								int row0 = query0.executeUpdate();
							}
						}

						if (checkpoint) {
							String hq = "delete from jkt.hms.masters.business.DgOrderhd as a where a.InvestigationRequestionNo.Id='"
									+ pHId + "'";
							Query query = session.createQuery(hq);
							int row = query.executeUpdate();

							String hql = "delete from jkt.hms.masters.business.PatientInvestigationDetails as a where a.InvestigationHeader.Id='"
									+ pHId + "'";
							Query query1 = session.createQuery(hql);
							int row1 = query1.executeUpdate();

							String hq2 = "delete from jkt.hms.masters.business.PatientInvestigationHeader as a where a.Id='"
									+ pHId + "'";
							Query query2 = session.createQuery(hq2);
							int row2 = query2.executeUpdate();

							if (row == 0) {
								//System.out.println("Doesn't deleted any row!");
							} else {
								//System.out.println("Deleted	Row: " + row);
							}
						}

						if (!checkpoint) {
							statusMsg = "Samples are  collected you can not delete \n";
							break;
						}
					}
				}
			}

			if (deleteDrug.equals("on") && deleteDrug != null) {
				List<PatientPrescriptionHeader> pDrugList = new ArrayList<PatientPrescriptionHeader>();
				pDrugList = session.createCriteria(
						PatientPrescriptionHeader.class).add(
						Restrictions.eq("Visit.Id", visitId)).add(
						Restrictions.eq("Hin.Id", hinId)).list();
				int pDId = 0;
				if (pDrugList.size() > 0) {
					for (PatientPrescriptionHeader preHeader : pDrugList) {
						pDId = pDrugList.get(0).getId();

						Query deleteQuery = session
								.createQuery("delete from PatientPrescriptionDetails "
										+ "where Prescription.Id="
										+ preHeader.getId());
						int row = deleteQuery.executeUpdate();

						Query deleteQuery1 = session
								.createQuery("delete from PatientPrescriptionHeader "
										+ "where Id=" + preHeader.getId());
						int row1 = deleteQuery1.executeUpdate();

						if (row == 0) {
							//System.out.println("Doesn't deleted any row!");
						} else {
							//System.out.println("Deleted	Row: " + row);
						}
					}
				}
			}

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();
			Visit visitObj = new Visit();
			visitObj.setId(visitId);
			opdPatientDetails.setVisit(visitObj);
			if (empId != 0) {
				MasEmployee masEmployee = new MasEmployee();
				masEmployee.setId(empId);
				opdPatientDetails.setEmployee(masEmployee);
			}
			MasHospital masHospitalObj = new MasHospital();
			masHospitalObj.setId(hospitalId);
			opdPatientDetails.setHospital(masHospitalObj);
			// opdPatientDetails.setHeight(height);
			// opdPatientDetails.setDisposal(disposal);
			// opdPatientDetails.setWeight(weight);
			// opdPatientDetails.setPulse(pulse);
			// opdPatientDetails.setBp(bp);
			// if(!temperature.equals("")){
			// opdPatientDetails.setTemperature(Float.parseFloat(temperature));
			// }
			opdPatientDetails.setAfmsDesc(afmsDescription);
			opdPatientDetails.setConsultationTime(consultationTime);
			opdPatientDetails.setConsultationDate(consultationDateToInsert);
			opdPatientDetails.setPlan(plan);
			// opdPatientDetails.setInitialDiagnosis(initialDiagnosis);
			opdPatientDetails.setOpdDate(date);
			opdPatientDetails.setOpdTime(time);
			opdPatientDetails.setNextVisitDate(nextVisitDateToInsert);
			// opdPatientDetails.setReferredDept(referredDept);
			// opdPatientDetails.setReferedDoctars(referredDoctars);
			opdPatientDetails.setOnExamination(onExamination);
			hbt.save(opdPatientDetails);

			// --------------- values to be Opd Patient
			// History--------------------

			OpdPatientHistory opdPatientHistory = new OpdPatientHistory();

			MasDepartment md = new MasDepartment();
			md.setId(departmentId);
			opdPatientHistory.setDepartment(md);

			MasHospital mh = new MasHospital();
			mh.setId(hospitalId);
			opdPatientHistory.setHospital(mh);

			Patient p = new Patient();
			p.setId(hinId);
			opdPatientHistory.setHin(p);

			/*
			 * Visit visit = new Visit(); visit.setId(visitId);
			 */
			opdPatientHistory.setVisitInpatientId(visitId);

			opdPatientHistory.setLastChgTime(time);
			opdPatientHistory.setLastChgBy("admin");

			opdPatientHistory.setStatus("y");
			opdPatientHistory.setLastChgDate(date);

			// opdPatientHistory.setPersonalPastHistory(pastHistory);
			// opdPatientHistory.setPersonalPresentHistory(personalHistory);
			// opdPatientHistory.setPersonalOtherDetails(otherDetails);

			// opdPatientHistory.setFamilyPresentHistory(familyHistory);
			// opdPatientHistory.setPresentComplain(presentComplain);
			// opdPatientHistory.setPresentIllness(presentIllness);

			opdPatientHistory.setIpOpPacStatus("OP");

			opdPatientHistory.setOpdPatientDetails(opdPatientDetails);

			hbt.save(opdPatientHistory);

			// --------------- values to be updated in visit table to change
			// it's status--------------------

			Visit visitObjToUpdate = (Visit) hbt.load(Visit.class, visitId);
			visitObjToUpdate.setVisitStatus("C");
			hbt.update(visitObjToUpdate);

			// -----------------------------------------------------------------------------------

			// --------------values to be entered in discharge table for
			// diagnosis----------------------
			String query = "";
			List objectList = new ArrayList();
			if (diagnosisIdAray != null) {
				for (int i = 0; i < diagnosisIdAray.length; i++) {
					DischargeIcdCode dischargeIcdCode = new DischargeIcdCode();
					Patient patientObj = new Patient();
					patientObj.setId(hinId);
					dischargeIcdCode.setHin(patientObj);
					MasIcd masIcd = new MasIcd();
					//
					// masIcd.setId(Integer.parseInt(diagnosisIdAray[i]));
					// chnaget to Line Below

					if (diagnosisIdAray[i] != null) {
						if (!diagnosisIdAray[i].equals("0")) {
							query = "select icd_id from mas_icd where icd_code='"
									+ diagnosisIdAray[i] + "'";
							objectList = (List) session.createSQLQuery(query)
									.list();
							masIcd.setId(Integer.parseInt(""
									+ objectList.get(0)));
							dischargeIcdCode.setIcd(masIcd);
							dischargeIcdCode
									.setAddEditDate(consultationDateToInsert);
							dischargeIcdCode.setAddEditTime(consultationTime);
							dischargeIcdCode.setStatus("y");
							dischargeIcdCode.setDiagnosisStatus("p");
							Visit visit = new Visit();
							visit.setId(visitId);

							dischargeIcdCode.setVisit(visit);

							hbt.save(dischargeIcdCode);
						}
					}
				}
			}
			if (pvmsNoList.size() > 0) {
				PatientPrescriptionHeader patientPrescriptionHeader = new PatientPrescriptionHeader();
				Patient patient = new Patient();
				patient.setId(hinId);
				patientPrescriptionHeader.setHin(patient);
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(departmentId);
				patientPrescriptionHeader.setDepartment(masDepartment);
				Visit visit = new Visit();
				visit.setId(visitId);
				patientPrescriptionHeader.setVisit(visit);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				patientPrescriptionHeader.setHospital(masHospital);
				patientPrescriptionHeader.setStatus("p");
				patientPrescriptionHeader
						.setPrescriptionDate(consultationDateToInsert);
				patientPrescriptionHeader.setPrescriptionTime(consultationTime);
				hbt.save(patientPrescriptionHeader);

				for (int i = 0; i < pvmsNoList.size(); i++) {
					String pvmsNo = (String) pvmsNoList.get(i);
					String nomenclature = (String) nomenclatureList.get(i);
					int itemId = getItemIdFromPVMS(nomenclature,pvmsNo,hospitalId);
					itemIdList.add(itemId);
				}
				for (int i = 0; i < itemIdList.size(); i++) {
					PatientPrescriptionDetails patientPrescriptionDetails = new PatientPrescriptionDetails();
					MasStoreItem masStoreItem = new MasStoreItem();
					masStoreItem.setId(itemIdList.get(i));
					patientPrescriptionDetails.setItem(masStoreItem);
					MasFrequency masFrequency = new MasFrequency();
					masFrequency.setId(frequencyList.get(i));
					patientPrescriptionDetails.setFrequency(masFrequency);
					patientPrescriptionDetails.setDosage(dosageList.get(i));
					patientPrescriptionDetails.setRemarks(remarksList.get(i));
					patientPrescriptionDetails.setType(typeLeftRightList.get(i));
					patientPrescriptionDetails.setNoOfDays(noOfDaysList.get(i));
					patientPrescriptionDetails.setInstruction(instructionList
							.get(i));
					patientPrescriptionDetails
							.setPrescription(patientPrescriptionHeader);
					patientPrescriptionDetails.setTotal(totalList.get(i));
					hbt.save(patientPrescriptionDetails);
				}
			}
			Map<String, Object> utilMap1 = new HashMap<String, Object>();
			utilMap1 = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			
			String time1 = (String) utilMap1.get("currentTimeWithoutSc");
			
			if (chargeCodeIdList.size() > 0) {
				MasDepartment masDepartment = new MasDepartment();
				MasHospital masHospital = new MasHospital();
				Patient patient = new Patient();
				MasEmployee masEmployee2 = new MasEmployee();

				PatientInvestigationHeader patientInvestigationHeader = new PatientInvestigationHeader();

				patient.setId(hinId);
				patientInvestigationHeader.setHin(patient);

				masDepartment.setId(departmentId);
				patientInvestigationHeader.setDepartment(masDepartment);
				Visit visit = new Visit();
				visit.setId(visitId);
				patientInvestigationHeader.setVisit(visit);

				masHospital.setId(hospitalId);
				patientInvestigationHeader.setHospital(masHospital);
				patientInvestigationHeader.setStatus("p");
				patientInvestigationHeader
						.setInvestigationDate(consultationDateToInsert);
				patientInvestigationHeader
						.setInvestigationTime(consultationTime);
				hbt.save(patientInvestigationHeader);

				DgOrderhd dgOrderhd = new DgOrderhd();
				dgOrderhd.setOrderDate(consultationDateToInsert);
				dgOrderhd.setOrderTime(time1);
				masHospital.setId(hospitalId);
				dgOrderhd.setHospital(masHospital);
				patient.setId(hinId);
				dgOrderhd.setHin(patient);
				masDepartment.setId(departmentId);
				dgOrderhd.setDepartment(masDepartment);
				if (empId != 0) {
					masEmployee2.setId(empId);
					dgOrderhd.setPrescribedBy(masEmployee2);
				}

				dgOrderhd.setPatientType("OP");
				dgOrderhd.setTestType("Regular");
				dgOrderhd.setCreatedby(userName);
				dgOrderhd.setCreatedon(consultationDateToInsert);

				//orderSeqNo = generateOrderNumber(); By Tirath
				dgOrderhd.setOrderNo(orderSeqNo);
				if (visitId != 0) {
					visit = new Visit();
					visit.setId(visitId);
					dgOrderhd.setVisit(visit);
				}
				dgOrderhd.setOrderStatus("C");
				dgOrderhd.setLabOrderStatus("LC");
				dgOrderhd.setLastChgBy(userId);
				dgOrderhd.setLastChgDate(consultationDateToInsert);
				dgOrderhd.setLastChgTime(consultationTime);
				dgOrderhd
						.setInvestigationRequestionNo(patientInvestigationHeader);
				hbt.save(dgOrderhd);

				for (int i = 0; i < chargeCodeIdList.size(); i++) {
					PatientInvestigationDetails patientInvestigationDetails = new PatientInvestigationDetails();
					patientInvestigationDetails
							.setInvestigationHeader(patientInvestigationHeader);
					MasChargeCode masChargeCode = new MasChargeCode();
					masChargeCode.setId(Integer.parseInt(chargeCodeIdList
							.get(i)));
					patientInvestigationDetails.setChargeCode(masChargeCode);
					patientInvestigationDetails
							.setQuantity(quantityList.get(i));
					patientInvestigationDetails.setClinicalNotes(clinicalList
							.get(i));
					hbt.save(patientInvestigationDetails);

					DgOrderdt dgOrderdt = new DgOrderdt();
					dgOrderdt.setOrderhd(dgOrderhd);
					masChargeCode.setId(Integer.parseInt(chargeCodeIdList
							.get(i)));
					dgOrderdt.setChargeCode(masChargeCode);
					dgOrderdt.setOrderQty(quantityList.get(i));

					dgOrderdt.setCreatedby(userName);
					dgOrderdt.setCreatedon(consultationDateToInsert);
					dgOrderdt.setLastChgBy(userId);
					dgOrderdt.setLastChgDate(consultationDateToInsert);
					dgOrderdt.setLastChgTime(consultationTime);
					// method written for taking out the values of mascharge
					// code and subcharge
					Map masChargeMap = getMasChargeCodeFromChargeId(Integer
							.parseInt(chargeCodeIdList.get(i)));
					MasChargeCode masChargeCodeObj = (MasChargeCode) masChargeMap
							.get("masChargeCode");
					int mainChargeId = masChargeCodeObj.getMainChargecode()
							.getId();
					int subChargeId = masChargeCodeObj.getSubChargecode()
							.getId();
					if (masChargeCodeObj.getMainChargecode()
							.getMainChargecodeCode().equalsIgnoreCase("Lab")) {
						dgOrderdt.setOrderStatus("C");
					} else {
						dgOrderdt.setOrderStatus("P");
					}

					MasMainChargecode masMainChargecode = new MasMainChargecode();
					masMainChargecode.setId(mainChargeId);
					dgOrderdt.setMainChargecode(masMainChargecode);
					MasSubChargecode masSubChargecode = new MasSubChargecode();
					masSubChargecode.setId(subChargeId);
					dgOrderdt.setSubChargeid(masSubChargecode);
					dgOrderdt.setInvestigation(new DgMasInvestigation(Integer
							.parseInt(chargeCodeIdList.get(i))));
					hbt.save(dgOrderdt);
				}

				// ///////////// save Sample collection details for Radiology
				// test////////////////////

				String dateCollection = (String) utilMap.get("currentDate");
				String timeCollection = (String) utilMap.get("currentTime");

				DgSampleCollectionHeader dgSampleCollectionHeader = new DgSampleCollectionHeader();
				List<MasChargeCode> chargeCodeList = new ArrayList<MasChargeCode>();
				boolean goneInLoop = false;

				for (int j = 0; j < chargeCodeIdList.size() && !goneInLoop; j++) {
					int chargeCodeId = Integer.parseInt(""
							+ chargeCodeIdList.get(j));
					chargeCodeList = session
							.createCriteria(MasChargeCode.class).add(
									Restrictions.eq("Id", chargeCodeId))
							.createAlias("MainChargecode", "mcc").createAlias(
									"mcc.Department", "dept").createAlias(
									"dept.DepartmentType", "dt").add(
									Restrictions.eq("dt.DepartmentTypeCode",
											"RADIO")).list();
					if (chargeCodeList.size() > 0) {
						for (MasChargeCode chargeCode : chargeCodeList) {
							try {
								int inpatientId = 0;
								if (visitId != 0) {
									Visit visit1 = new Visit();
									visit1.setId(visitId);
									dgSampleCollectionHeader.setVisit(visit1);
									dgSampleCollectionHeader
											.setPatientType("OP");
								}

								if (hinId != 0) {
									Patient patient1 = new Patient();
									patient1.setId(hinId);
									dgSampleCollectionHeader.setHin(patient1);
								}
								if (hospitalId != 0) {
									MasHospital hospital = new MasHospital();
									hospital.setId(hospitalId);
									dgSampleCollectionHeader
											.setHospital(hospital);
								}

								if (departmentId != 0) {
									MasDepartment masDepartment1 = new MasDepartment();
									masDepartment1.setId(chargeCode
											.getMainChargecode()
											.getDepartment().getId());
									dgSampleCollectionHeader
											.setDepartment(masDepartment1);
								}

								if (departmentId != 0) {
									MasDepartment orderByDepartment = new MasDepartment();
									orderByDepartment.setId(departmentId);
									dgSampleCollectionHeader
											.setOrderByDepartment(orderByDepartment);
								}

								dgSampleCollectionHeader.setOrder(dgOrderhd);

								// if (departmentId != 0) {
								// DgCollectionCenter dgCollectionCenter = new
								// DgCollectionCenter();
								// dgCollectionCenter.setId(departmentId);
								// dgSampleCollectionHeader.setCollectionCenter(dgCollectionCenter);
								// }

								dgSampleCollectionHeader.setOrderStatus("P");
								dgSampleCollectionHeader.setLastChgBy(userName);
								dgSampleCollectionHeader
										.setLastChgDate(HMSUtil
												.convertStringTypeDateToDateType(dateCollection));
								dgSampleCollectionHeader.setLastChgTime(time);
								dgSampleCollectionHeader
										.setDiagnosisDate(HMSUtil
												.convertStringTypeDateToDateType(dateCollection));
								dgSampleCollectionHeader.setDiagnosisTime(time);
								hbt.save(dgSampleCollectionHeader);

							} catch (DataAccessException e) {
								e.printStackTrace();
							}
							try {

								for (int i = 0; i < chargeCodeIdList.size(); i++) {
									int chargeId = 0;
									if (chargeCodeIdList.get(i) != null
											&& !chargeCodeIdList.get(i).equals(
													"")) {
										chargeId = Integer
												.parseInt((String) chargeCodeIdList
														.get(i));
										MasChargeCode maschrgCode = (MasChargeCode) session
												.createCriteria(
														MasChargeCode.class)
												.add(
														Restrictions.eq("Id",
																chargeId))
												.list().get(0);
										if (maschrgCode.getMainChargecode()
												.getMainChargecodeCode()
												.equalsIgnoreCase("RADIO")) {
											MasChargeCode masChargeCode1 = new MasChargeCode();
											MasSubChargecode masSubChargecode1 = new MasSubChargecode();

											DgSampleCollectionDetails dgSampleCollectionDetails = new DgSampleCollectionDetails();
											dgSampleCollectionDetails
													.setSampleCollectionHeader(dgSampleCollectionHeader);

											dgSampleCollectionDetails
													.setCollected("y");

											masChargeCode1
													.setId(Integer
															.parseInt((String) chargeCodeIdList
																	.get(i)));
											dgSampleCollectionDetails
													.setChargeCode(masChargeCode1);

											MasMainChargecode masMainChargecode1 = new MasMainChargecode();
											masMainChargecode1
													.setId(maschrgCode
															.getMainChargecode()
															.getId());
											dgSampleCollectionDetails
													.setMaincharge(masMainChargecode1);

											dgSampleCollectionDetails
													.setSubcharge(maschrgCode
															.getSubChargecode());

											MasEmployee masEmployee1 = new MasEmployee();
											masEmployee1.setId(userId);
											dgSampleCollectionDetails
													.setCollectedBy(masEmployee1);

											dgSampleCollectionDetails
													.setDiagNo(generateDiagNumber(maschrgCode
															.getSubChargecode()
															.getId()));

											dgSampleCollectionDetails
													.setInvestigation(new DgMasInvestigation(
															chargeId));
											dgSampleCollectionDetails
													.setLastChgBy(userName);
											dgSampleCollectionDetails
													.setLastChgDate(HMSUtil
															.convertStringTypeDateToDateType(dateCollection));
											dgSampleCollectionDetails
													.setLastChgTime(time);
											dgSampleCollectionDetails
													.setRejected("n");
											dgSampleCollectionDetails
													.setSampleCollDatetime(new Date());
											dgSampleCollectionDetails
													.setOrderStatus("P");
											try {
												hbt
														.save(dgSampleCollectionDetails);
											} catch (RuntimeException e) {
												e.printStackTrace();
											}
										}
									}
								}
							} catch (NumberFormatException e) {
								e.printStackTrace();
							}
						}
						goneInLoop = true;
					}
				}
				// ///////////////////////////End Save details For Radio Order
				// Booking///////////////////////////

				// ////////////////////////// Save details order booking for lab
				// /////////////////////
				dgSampleCollectionHeader = new DgSampleCollectionHeader();
				chargeCodeList = new ArrayList<MasChargeCode>();
				goneInLoop = false;
				for (int j = 0; j < chargeCodeIdList.size() && !goneInLoop; j++) {
					int chargeCodeId = Integer.parseInt(""
							+ chargeCodeIdList.get(j));
					chargeCodeList = session
							.createCriteria(MasChargeCode.class).add(
									Restrictions.eq("Id", chargeCodeId))
							.createAlias("MainChargecode", "mcc").createAlias(
									"mcc.Department", "dept").createAlias(
									"dept.DepartmentType", "dt").add(
									Restrictions.eq("dt.DepartmentTypeCode",
											"DIAG")).list();

					if (chargeCodeList.size() > 0) {
						for (MasChargeCode chargeCode : chargeCodeList) {
							try {
								int inpatientId = 0;
								if (visitId != 0) {
									Visit visit1 = new Visit();
									visit1.setId(visitId);
									dgSampleCollectionHeader.setVisit(visit1);
									dgSampleCollectionHeader
											.setPatientType("OP");
								}
								if (hinId != 0) {
									Patient patient1 = new Patient();
									patient1.setId(hinId);
									dgSampleCollectionHeader.setHin(patient1);
								}
								if (hospitalId != 0) {
									MasHospital hospital = new MasHospital();
									hospital.setId(hospitalId);
									dgSampleCollectionHeader
											.setHospital(hospital);
								}
								if (departmentId != 0) {
									MasDepartment masDepartment1 = new MasDepartment();
									masDepartment1.setId(chargeCode
											.getMainChargecode()
											.getDepartment().getId());
									dgSampleCollectionHeader
											.setDepartment(masDepartment1);
								}
								if (departmentId != 0) {
									MasDepartment orderByDepartment = new MasDepartment();
									orderByDepartment.setId(departmentId);
									dgSampleCollectionHeader
											.setOrderByDepartment(orderByDepartment);
								}
								dgSampleCollectionHeader.setOrder(dgOrderhd);
								// DgCollectionCenter dgCollectionCenter = new
								// DgCollectionCenter();
								// dgCollectionCenter.setId(departmentId);
								// dgSampleCollectionHeader.setCollectionCenter(dgCollectionCenter);
								dgSampleCollectionHeader.setOrderStatus("P");
								dgSampleCollectionHeader.setLastChgBy(userName);
								dgSampleCollectionHeader
										.setLastChgDate(HMSUtil
												.convertStringTypeDateToDateType(dateCollection));
								dgSampleCollectionHeader.setLastChgTime(time);
								dgSampleCollectionHeader
										.setDiagnosisDate(HMSUtil
												.convertStringTypeDateToDateType(dateCollection));
								dgSampleCollectionHeader.setDiagnosisTime(time);
								hbt.save(dgSampleCollectionHeader);
							} catch (DataAccessException e) {
								e.printStackTrace();
							}
							try {
								for (int i = 0; i < chargeCodeIdList.size(); i++) {
									int chargeId = 0;
									if (chargeCodeIdList.get(i) != null
											&& !chargeCodeIdList.get(i).equals(
													"")) {
										chargeId = Integer
												.parseInt((String) chargeCodeIdList
														.get(i));
										MasChargeCode maschrgCode = (MasChargeCode) session
												.createCriteria(
														MasChargeCode.class)
												.add(
														Restrictions.eq("Id",
																chargeId))
												.list().get(0);
										if (maschrgCode.getMainChargecode()
												.getMainChargecodeCode()
												.equalsIgnoreCase("Lab")) {
											DgSampleCollectionDetails dgSampleCollectionDetails = new DgSampleCollectionDetails();
											dgSampleCollectionDetails
													.setSampleCollectionHeader(dgSampleCollectionHeader);
											dgSampleCollectionDetails
													.setCollected("y");
											dgSampleCollectionDetails
													.setChargeCode(maschrgCode);
											MasMainChargecode masMainChargecode1 = new MasMainChargecode();
											masMainChargecode1
													.setId(maschrgCode
															.getMainChargecode()
															.getId());
											dgSampleCollectionDetails
													.setMaincharge(masMainChargecode1);
											dgSampleCollectionDetails
													.setSubcharge(maschrgCode
															.getSubChargecode());
											MasEmployee masEmployee1 = new MasEmployee();
											masEmployee1.setId(userId);
											dgSampleCollectionDetails
													.setCollectedBy(masEmployee1);
											dgSampleCollectionDetails
													.setDiagNo(generateDiagNumber(maschrgCode
															.getSubChargecode()
															.getId()));
											dgSampleCollectionDetails
													.setInvestigation(new DgMasInvestigation(
															chargeId));
											dgSampleCollectionDetails
													.setLastChgBy(userName);
											dgSampleCollectionDetails
													.setLastChgDate(HMSUtil
															.convertStringTypeDateToDateType(dateCollection));
											dgSampleCollectionDetails
													.setLastChgTime(time);
											dgSampleCollectionDetails
													.setRejected("n");
											dgSampleCollectionDetails
													.setSampleCollDatetime(new Date());
											dgSampleCollectionDetails
													.setOrderStatus("P");
											try {
												hbt
														.save(dgSampleCollectionDetails);
											} catch (RuntimeException e) {
												e.printStackTrace();
											}
										}
									}
								}
							} catch (NumberFormatException e) {
								e.printStackTrace();
							}
						}
						goneInLoop = true;
					}
				}

				// /////////////////////// End Saving sampleCollection Details
				// for Lab Order Booking////////////
			}
			// }
			succesfullyAdded = true;
			tx.commit();
		} catch (Exception e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();

		} finally {
			// --------Session Closing----------
			session.close();
		}
		returnMap.put("succesfullyAdded", succesfullyAdded);
		returnMap.put("orderSeqNo", orderSeqNo);
		returnMap.put("statusMsg", statusMsg);
		return returnMap;
	}

	@SuppressWarnings("unchecked")
	public int getTransactionSequenceNoForOrderNo() {
		Session session = (Session) getSession();
		List<TransactionSequence> orderNoList = new ArrayList<TransactionSequence>();
		String tableName = "DgOrderhd";

		try {

			Criteria crit = session.createCriteria(TransactionSequence.class)
					.add(Restrictions.eq("Tablename", tableName));
			orderNoList = crit.list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		TransactionSequence transactionSequence = orderNoList.get(0);
		int orderNo = transactionSequence.getTransactionSequenceNumber();

		return orderNo;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getMasChargeCodeFromChargeId(int chargeId) {
		Session session = (Session) getSession();
		List<MasChargeCode> masChargeList = new ArrayList<MasChargeCode>();
		Map<String, Object> map = new HashMap<String, Object>();
		try {

			Criteria crit = session.createCriteria(MasChargeCode.class).add(
					Restrictions.eq("Id", chargeId));
			masChargeList = crit.list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		MasChargeCode masChargeCode = masChargeList.get(0);

		map.put("masChargeCode", masChargeCode);

		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getPreviousPatientVisit(Map mapForDS) {
		Session session = (Session) getSession();
		List<Visit> patientPreviousVisitList = new ArrayList<Visit>();
		List<Object> patientInvestigationList = new ArrayList<Object>();
		/*for (Iterator iterator = patientInvestigationList.iterator(); iterator
				.hasNext();) {
			Object object = (Object) iterator.next();
			
		}*/
		List<Integer> maxVisitIdList = new ArrayList<Integer>();
		List<Integer> minVisitIdList = new ArrayList<Integer>();
		Map<String, Object> map = new HashMap<String, Object>();

		//int deptId = (Integer) mapForDS.get("deptId");
		int hinId = (Integer) mapForDS.get("hinId");
		int visitNo = 0;
		if(mapForDS.get("visitNo")!=null)
			visitNo = (Integer) mapForDS.get("visitNo");
		String reportingFor = "";
		if(mapForDS.get("reportingFor") != null){
			reportingFor = (String)mapForDS.get("reportingFor");
		}
		//int visitId = (Integer) mapForDS.get("visitId");
		
		//String serviceNo = (String) mapForDS.get("serviceNo");
		try {
			
			if(!reportingFor.equals("")&& reportingFor.equalsIgnoreCase("FamilyWC"))
			{
			Criteria crit = session.createCriteria(Visit.class).
			add(Restrictions.eq("ReportingFor", "FamilyWC")).
			createAlias(
					"Hin", "hin").add(Restrictions.eq("hin.Id", hinId)).add(
					Restrictions.eq("VisitStatus", "C")).addOrder(
					Order.desc("VisitNo"));
			patientPreviousVisitList = crit.list();

			if(visitNo!=0){
			Criteria critMaxVisitId = session.createCriteria(Visit.class).
			add(Restrictions.eq("ReportingFor", "FamilyWC")).
					createAlias("Hin", "hin").add(
							Restrictions.eq("hin.Id", hinId)).add(
							Restrictions.lt("VisitNo", visitNo)).add(
							Restrictions.eq("VisitStatus", "C")).setProjection(
							Projections.max("Id")).addOrder(
							Order.desc("VisitNo"));
			maxVisitIdList = critMaxVisitId.list();

			Criteria critMinVisitId = session.createCriteria(Visit.class).
			add(Restrictions.eq("ReportingFor", "FamilyWC")).
					createAlias("Hin", "hin").add(
							Restrictions.eq("hin.Id", hinId)).add(
							Restrictions.lt("VisitNo", visitNo)).add(
							Restrictions.eq("VisitStatus", "C")).setProjection(
							Projections.min("Id")).addOrder(
							Order.desc("VisitNo"));
			minVisitIdList = critMinVisitId.list();
			}
			}else
			{
				Criteria crit = session.createCriteria(Visit.class).createAlias(
						"Hin", "hin").add(Restrictions.eq("hin.Id", hinId)).add(
						Restrictions.eq("VisitStatus", "C")).addOrder(
						Order.desc("VisitNo"));
				patientPreviousVisitList = crit.list();

				if(visitNo!=0){
				Criteria critMaxVisitId = session.createCriteria(Visit.class)
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).add(
								Restrictions.lt("VisitNo", visitNo)).add(
								Restrictions.eq("VisitStatus", "C")).setProjection(
								Projections.max("Id")).addOrder(
								Order.desc("VisitNo"));
				maxVisitIdList = critMaxVisitId.list();

				Criteria critMinVisitId = session.createCriteria(Visit.class)
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).add(
								Restrictions.lt("VisitNo", visitNo)).add(
								Restrictions.eq("VisitStatus", "C")).setProjection(
								Projections.min("Id")).addOrder(
								Order.desc("VisitNo"));
				minVisitIdList = critMinVisitId.list();
				}
			}
			patientInvestigationList=getHibernateTemplate().find("select pih,visit,hin from jkt.hms.masters.business.PatientInvestigationHeader as pih join pih.Hin as hin join pih.Visit as visit where hin.Id="+hinId);
		/*	
			*//**
			 * By Ritu Getting Annual Exam Data from HIC
			 *//*
			Connection con = null;
			Properties properties = new Properties();
			URL resourcePathHIC = Thread.currentThread().getContextClassLoader().getResource("hicDetails.properties");
			try {
				properties.load(resourcePathHIC.openStream());
			} catch (Exception e) {
				e.printStackTrace();
			}
			String hicDB = properties.getProperty("hicDB");
			String hicUser = properties.getProperty("hicUser");
			String hicPwd = properties.getProperty("hicPwd");
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			
			List<MasMedicalExaminationReportOnEntry> medExamList = new ArrayList<MasMedicalExaminationReportOnEntry>();
			Calendar calendar = Calendar.getInstance();
			
			try {
				Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
				con = DriverManager.getConnection(hicDB, hicUser, hicPwd);
				
				OracleCallableStatement oraCallStmt   = null;
		        OracleResultSet medExamResultSet = null;
		        oraCallStmt = (OracleCallableStatement) con.prepareCall(
		                "{call getForm3Binfo(?,?)}"
		            );
		            oraCallStmt.setString(1, serviceNo);
		            oraCallStmt.registerOutParameter(2, OracleTypes.CURSOR);
		            oraCallStmt.execute();
		            String pt = "^/d*$";
	    			
		            medExamResultSet = (OracleResultSet) oraCallStmt.getCursor(2);
		            map.put("medExamResultSet", medExamResultSet);
		            System.out.println("medExamResultSet---- "+medExamResultSet.getFetchSize());
		            //  oraCallStmt.close();
		            while(medExamResultSet.next()){
		            	if(!medExamResultSet.isBeforeFirst()){
		            	if(medExamResultSet.getDate(36)!=null){
			            	calendar.setTime(medExamResultSet.getDate(36));
			            	int year = calendar.get(Calendar.YEAR);
			            	String qry = "select * from mas_medical_examination_report where serviceno='"+serviceNo+"' and to_char(date_of_reporting,'yyyy')="+year;
							System.out.println("qry--- "+qry);
			            	medExamList = session.createSQLQuery(qry).list();
			            	medExamList = session.createCriteria(MasMedicalExaminationReportOnEntry.class)
			            			.add(Restrictions.eq("Serviceno", serviceNo)).add(Restrictions.eq("to_char(DateOfReporting)", currentYear)).list();
			           
			            	System.out.println("medExamList---- "+medExamList.size());
			            	
			            	if(medExamList.size() == 0){
						
			            	MasMedicalExaminationReportOnEntry medExam = new MasMedicalExaminationReportOnEntry();
			            	medExam.setDateOfReporting(medExamResultSet.getDate(36));
	//		            	medExam.setAuthority("");
			            	medExam.setServiceNo(medExamResultSet.getString(1));
	//		            	medExam.setRank(rank);
			            	medExam.setNameInFull(medExamResultSet.getString(2));
	//		            	medExam.setUnit(unit);
			            	medExam.setServiceiaf(medExamResultSet.getString(8));
	//		            	medExam.setTrade(trade);
			            	medExam.setDateOfBirth(medExamResultSet.getDate(4));
			            	medExam.setTypeofcommision(medExamResultSet.getString(11));
			            	medExam.setDateofcommun(medExamResultSet.getDate(12));
			            	medExam.setTotalService(medExamResultSet.getString(18));
			            	medExam.setPastmedicalhistory(medExamResultSet.getString(30));
			            	medExam.setPresentmedicalhistory(medExamResultSet.getString(31));
			            	medExam.setLastConfinementDate(medExamResultSet.getDate(34));
			            	medExam.setLastame(medExamResultSet.getString(33));
			            	medExam.setTotalTeeth(medExamResultSet.getString(49));
			            	if(medExamResultSet.getString(45) != null && Pattern.matches(pt, medExamResultSet.getString(45)))
			            	medExam.setTotalDefectiveTeeth(medExamResultSet.getString(45));
			            	medExam.setTotalNoDentalPoint(medExamResultSet.getString(46));
	//		            	medExam.setMissingTeeth(missingTeeth);
	//		            	medExam.setUnservisableTeeth(unservisableTeeth);
			            	medExam.setConditionOfGums(medExamResultSet.getString(48));
			            	medExam.setRemarksTeath(medExamResultSet.getString(47));
			            	medExam.setHeight(new BigDecimal(medExamResultSet.getString(72)));
			            	medExam.setWeight(new BigDecimal(medExamResultSet.getString(73)));
			            	medExam.setIdealweight(medExamResultSet.getString(74));
			            	medExam.setOverweight(medExamResultSet.getString(75));
			            	medExam.setWaist(medExamResultSet.getString(78));
			            	medExam.setChestfullexpansion(medExamResultSet.getString(91));
			            	medExam.setRangeofexpansion(medExamResultSet.getString(92));
			            	medExam.setBhi(medExamResultSet.getString(77));
	//		            	medExam.setBodyfat(bodyfat)                //not available in HIC
	//		            	medExam.setSkin(skin)                       //not available in HIC
	//		            	medExam.setSportman(sportman)				 //not available in HIC
			            	medExam.setWithGlassesRDistant(medExamResultSet.getString(112));
			            	medExam.setWithGlassesLDistant(medExamResultSet.getString(113));
			               	medExam.setWithGlassesRNearvision(medExamResultSet.getString(116));
			               	medExam.setWithGlassesLNearvision(medExamResultSet.getString(117));
			               	medExam.setWthoutGlassesRDistant(medExamResultSet.getString(110));
			            	medExam.setWithoutGlassesLDistant(medExamResultSet.getString(111));
			               	medExam.setWithoutGlassesRNearvision(medExamResultSet.getString(114));
			               	medExam.setWithoutGlassesLNearvision(medExamResultSet.getString(115));
	//		               	medExam.setNearVisionWithGlassCp(nearVisionWithGlassCp);    //not available in HIC
	//		               	medExam.setNearVisionWithoutGlassCp(nearVisionWithoutGlassCp); //not available in HIC
			               	medExam.setHearingRcv(new BigDecimal(medExamResultSet.getString(121)));
			    			medExam.setHearingLcv(new BigDecimal(medExamResultSet.getString(126)));
			    			medExam.setEarHearingRfw(new BigDecimal(medExamResultSet.getString(120)));
			    			medExam.setEarHearingLfw(new BigDecimal(medExamResultSet.getString(125)));
			    			medExam.setEarHearingBothFw(new BigDecimal(medExamResultSet.getString(129)));
			    			medExam.setHearingBothCv(new BigDecimal(medExamResultSet.getString(130)));
			    			
			    			medExam.setTympanicR(medExamResultSet.getString(122));
			    			medExam.setTympanicL(medExamResultSet.getString(127));
	//		    			medExam.setMobility(medExamResultSet.getString(122))  //two columns for left and right ear in HIC
			    			medExam.setNosethroat(medExamResultSet.getString(131));
			    			medExam.setAudiometryRecord(medExamResultSet.getString(124));
	//		    		invetigation details
			    			
			    			medExam.setPulseRates(medExamResultSet.getString(81));
			    			medExam.setBp(medExamResultSet.getString(85));
	//		    			medExam.setArterialWalls(medExamResultSet.getString(185));   //not available in HIC
			    			medExam.setHeartSize(medExamResultSet.getString(83));
			    			medExam.setSounds(medExamResultSet.getString(84));
			    			medExam.setRhythm(medExamResultSet.getString(86));
	//		    			medExam.setRespiratorySystem(medExamResultSet.getString(124)); //not available in HIC
			    			medExam.setLiver(medExamResultSet.getString(95));
			    			medExam.setSpleen(medExamResultSet.getString(97));
			    			medExam.setHigherMentalFunction(medExamResultSet.getString(98));
			    			medExam.setSpeech(medExamResultSet.getString(100));
			    			medExam.setReflexes(medExamResultSet.getString(99));
			    			medExam.setTremors(medExamResultSet.getString(101));
			    			medExam.setSelfBalancingTest(medExamResultSet.getString(102));
			    			medExam.setLocomoterSystem(medExamResultSet.getString(103));
			    			medExam.setSpine(medExamResultSet.getString(104));
			    			medExam.setHerniaMusic(medExamResultSet.getString(105));
			    			medExam.setHydrocele(medExamResultSet.getString(106));
			    			medExam.setHemorrhoids(medExamResultSet.getString(107));
			    			medExam.setBreasts(medExamResultSet.getString(108));		           
			    			medExam.setMenstrualHistory(medExamResultSet.getString(146));
//			    			medExam.setLmp(medExamResultSet.getString(153));   //Date in HIC and varchar in SMC
			    			medExam.setLmp("");
			    			if(medExamResultSet.getString(147)!=null)
			    				medExam.setNoOfPregnancies(Integer.parseInt(medExamResultSet.getString(147)));	
			    			if(medExamResultSet.getString(148)!=null && Pattern.matches(pt, medExamResultSet.getString(148)))
			    				medExam.setNoOfAbortions(Integer.parseInt(medExamResultSet.getString(148)));
			    			if(medExamResultSet.getString(149)!=null)
			    				medExam.setNoOfChildren(Integer.parseInt(medExamResultSet.getString(149)));
			    			if(medExamResultSet.getDate(150)!=null)
			    				medExam.setLastConfinementDate(medExamResultSet.getDate(150));
			    			if(medExamResultSet.getString(151)!=null)
			    				medExam.setVaginalDischarge(medExamResultSet.getString(151));
			    			if(medExamResultSet.getString(152)!=null)
			    				medExam.setProlapse(medExamResultSet.getString(152));
			    			if(medExamResultSet.getString(154)!=null)
			    				medExam.setUsgAbdomen(medExamResultSet.getString(154));
	//		    			medExam.setGiveOn(giveOn)      //not available in HIC
	//		    			medExam.setBatchNo(batchNo)    //not available in HIC
	//		    			medExam.setDom(dom)            //not available in HIC
	//		    			medExam.setCoronaryRiskFactor(coronaryRiskFactor)     //not available in HIC
	//		    			medExam.setFmdm(fmdm)
			    			medExam.setAllergies(medExamResultSet.getString(140));
	//		    			medExam.setFinalObservation(finalObservation)  //not available in HIC
	//		    			medExam.setMedCatRec(medCatRec)               //not available in HIC
	//		    			medExam.setSignedBy(signedBy)
			    			medExam.setApprovedBy(medExamResultSet.getString(40));
	//		    			medExam.setSendTo(sendTo)    //not available in HIC
	//		    			medExam.setRemarks(remarks)
			    			System.out.println("inserting data");
			    			try {
								hbt.save(medExam);
							} catch (DataAccessException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
			            }else{
			            	System.out.println("already exists");
			            }
			            }
		            	}
		            }
			} catch (InstantiationException e) {
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				e.printStackTrace();
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			
			
			*//**
			 * End
			 *//* 
			 */

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientPreviousVisitList", patientPreviousVisitList);
		map.put("maxVisitIdList", maxVisitIdList);
		map.put("minVisitIdList", minVisitIdList);
		map.put("patientInvestigationList", patientInvestigationList);
		
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> viewPreviousVisit(Map mapForDS) {
		Session session = (Session) getSession();
		List<OpdPatientDetails> patientVisitDataList = new ArrayList<OpdPatientDetails>();
		List<OpdPatientHistory> opdPatientHistoryList = new ArrayList<OpdPatientHistory>();
		List<DischargeIcdCode> patientDiagnosisList = new ArrayList<DischargeIcdCode>();
		List<PatientPrescriptionHeader> patientPrescHList = new ArrayList<PatientPrescriptionHeader>();
		List<PatientPrescriptionDetails> patientPrescDList = new ArrayList<PatientPrescriptionDetails>();
		List<PatientInvestigationHeader> patientInvesHList = new ArrayList<PatientInvestigationHeader>();
		List<PatientInvestigationDetails> patientInvesDList = new ArrayList<PatientInvestigationDetails>();
		Map<String, Object> map = new HashMap<String, Object>();

		List deptList = new ArrayList<String>();
		@SuppressWarnings("unused")
		int visitId = (Integer) mapForDS.get("visitId");

		try {

			Criteria crit = session.createCriteria(OpdPatientDetails.class)
					.createAlias("Visit", "visit").add(
							Restrictions.eq("visit.Id", visitId));
			patientVisitDataList = crit.list();

			patientDiagnosisList = session.createCriteria(
					DischargeIcdCode.class).createAlias("Visit", "visit").add(
					Restrictions.eq("visit.Id", visitId)).list();

			opdPatientHistoryList = session.createCriteria(
					OpdPatientHistory.class).add(
					Restrictions.eq("VisitInpatientId", visitId)).list();

			patientPrescHList = session.createCriteria(
					PatientPrescriptionHeader.class).createAlias("Visit",
					"visit").add(Restrictions.eq("visit.Id", visitId)).list();

			if (patientPrescHList.size() > 0) {
				PatientPrescriptionHeader patientPrescriptionHeader = patientPrescHList
						.get(0);
				int presHId = patientPrescriptionHeader.getId();
				patientPrescDList = session.createCriteria(
						PatientPrescriptionDetails.class).createAlias(
						"Prescription", "hId").add(
						Restrictions.eq("hId.Id", presHId)).list();
			}
			patientInvesHList = session.createCriteria(
					PatientInvestigationHeader.class).createAlias("Visit",
					"visit").add(Restrictions.eq("visit.Id", visitId)).list();
			if (patientInvesHList.size() > 0) {
				PatientInvestigationHeader patientInvestigationHeader = patientInvesHList
						.get(0);
				int invesHId = patientInvestigationHeader.getId();
				patientInvesDList = session.createCriteria(
						PatientInvestigationDetails.class).createAlias(
						"InvestigationHeader", "invesHId").add(
						Restrictions.eq("invesHId.Id", invesHId)).list();
			}

			// ----------list of referred department taken out from opd patient
			// details table--------
			if (patientVisitDataList.size() > 0) {
				OpdPatientDetails opdPatientDetails = (OpdPatientDetails) patientVisitDataList
						.get(0);
				String referredDept = opdPatientDetails.getReferredDept();
				if (referredDept != null && !referredDept.equals("")) {
					String[] dept = referredDept.split(",");
					for (int i = 0; i < dept.length; i++) {
						int deptId = Integer.parseInt(dept[i]);
						String deptName = "";
						Map<String, Object> deptMap = getDepartmentNameFromId(deptId);
						if (deptMap.get("deptName") != null) {
							deptName = (String) deptMap.get("deptName");
						}
						deptList.add(deptName);
					}
				}
			}
			// -------------------------------End of code for referred
			// depatment---------------------
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("deptList", deptList);
		map.put("patientVisitDataList", patientVisitDataList);
		map.put("patientDiagnosisList", patientDiagnosisList);
		map.put("patientPrescDList", patientPrescDList);
		map.put("patientInvesDList", patientInvesDList);
		map.put("opdPatientHistoryList", opdPatientHistoryList);
		return map;
	}

	@SuppressWarnings("unused")
	public Map<String, Object> getDepartmentNameFromId(int deptId) {
		Map<String, Object> returnMap = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<MasDepartment> deptList = new ArrayList<MasDepartment>();
		String deptName = null;
		String deptCode = null;
		try {

			Criteria crit = session.createCriteria(MasDepartment.class).add(
					Restrictions.eq("Id", deptId));
			deptList = crit.list();
			MasDepartment masDepartment = deptList.get(0);
			deptName = masDepartment.getDepartmentName();
			deptCode = masDepartment.getDepartmentCode();
			returnMap.put("deptName", deptName);
			returnMap.put("deptCode", deptCode);
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return returnMap;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> showPatientPrevoiusPrescription(Map mapForDS) {

		Session session = (Session) getSession();
		List<Visit> patientVisitList = new ArrayList<Visit>();
		List<PatientPrescriptionHeader> patientPrescriptionHeaderList = new ArrayList<PatientPrescriptionHeader>();
		List<PatientPrescriptionDetails> patientPrescriptionList = new ArrayList<PatientPrescriptionDetails>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();

		@SuppressWarnings("unused")
		int visitNo = (Integer) mapForDS.get("visitNo");
		int hinId = (Integer) mapForDS.get("hinId");

		try {
			int visitNoForPrescription = visitNo - 1;
			Criteria crit = session.createCriteria(Visit.class).createAlias(
					"Hin", "hin").add(Restrictions.eq("hin.Id", hinId)).add(
					Restrictions.eq("VisitNo", visitNoForPrescription));
			patientVisitList = crit.list();
			if (patientVisitList.size() > 0) {
				Visit visit = patientVisitList.get(0);
				int visitId = visit.getId();

				patientPrescriptionHeaderList = session.createCriteria(
						PatientPrescriptionHeader.class).createAlias("Visit",
						"visit").add(Restrictions.eq("visit.Id", visitId))
						.list();
				if (patientPrescriptionHeaderList.size() > 0) {
					PatientPrescriptionHeader patientPrescriptionHeader = (PatientPrescriptionHeader) patientPrescriptionHeaderList
							.get(0);

					int prescriptionId = patientPrescriptionHeader.getId();
					patientPrescriptionList = session.createCriteria(
							PatientPrescriptionDetails.class).createAlias(
							"Prescription", "prescription").add(
							Restrictions.eq("prescription.Id", prescriptionId))
							.list();
				}
			}
			frequencyList = session.createCriteria(MasFrequency.class).add(
					Restrictions.eq("Status", "y")).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientPrescriptionList", patientPrescriptionList);
		map.put("frequencyList", frequencyList);

		return map;
	}

	public Map<String, Object> showPatientPrevoiusInvestigation(Map mapForDS) {

		Session session = (Session) getSession();
		List<Visit> patientVisitList = new ArrayList<Visit>();
		List<PatientInvestigationHeader> patientInvestigationHeaderList = new ArrayList<PatientInvestigationHeader>();
		List<PatientInvestigationDetails> patientInvestigationList = new ArrayList<PatientInvestigationDetails>();
		Map<String, Object> map = new HashMap<String, Object>();

		int visitNo = (Integer) mapForDS.get("visitNo");
		int hinId = (Integer) mapForDS.get("hinId");
        //System.out.println("visitNo----"+visitNo);
        //int investigation_header_id=0;
		try {
			int visitNoForInvestigation = visitNo - 1;
			Criteria crit = session.createCriteria(Visit.class).createAlias(
					"Hin", "hin").add(Restrictions.eq("hin.Id", hinId)).add(
					Restrictions.eq("VisitNo", visitNoForInvestigation));
			patientVisitList = crit.list();
			//System.out.println("visitNoForInvestigation----"+visitNoForInvestigation);
			//System.out.println("anuj patientVisitList---"+patientVisitList.size());
			if (patientVisitList.size() > 0) {
				Visit visit = patientVisitList.get(0);
				int visitId = visit.getId();
				//System.out.println("anuj visitId---"+visitId);
				patientInvestigationHeaderList = session.createCriteria(
						PatientInvestigationHeader.class).createAlias("Visit",
						"visit").add(Restrictions.eq("visit.Id", visitId))
						.list();
				//System.out.println("anuj patientInvestigationHeaderList---"+patientInvestigationHeaderList.size());
				if (patientInvestigationHeaderList.size() > 0) {
					PatientInvestigationHeader patientInvestigationHeader = (PatientInvestigationHeader) patientInvestigationHeaderList
							.get(0);
					
					
					int investigationId = patientInvestigationHeader.getId();
					patientInvestigationList = session.createCriteria(
							PatientInvestigationDetails.class).createAlias(
							"InvestigationHeader", "investigation").add(
							Restrictions
									.eq("investigation.Id", investigationId))
							.list();
					//System.out.println("anuj investigationId---"+investigationId);
				}
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		//System.out.println("anuj patientInvestigationList---"+patientInvestigationList.size());
		map.put("patientInvestigationList", patientInvestigationList);
		return map;
	}
	//=================code by anamika=============
	@Override
	public Map<String, Object> showInvestigationResult(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<DgResultEntryDetail> resultEntryDetailList = new ArrayList<DgResultEntryDetail>();
		Session session = (Session)getSession();
		resultEntryDetailList =session.createCriteria(DgResultEntryDetail.class).createAlias("ChargeCode", "chargeCode")
								.add(Restrictions.eq("chargeCode.Id", box.getInt("chargeCodeId"))).createAlias("SampleCollectionDetails", "sampleDetail")
										.createAlias("sampleDetail.SampleCollectionHeader", "sampleHeader").createAlias("sampleHeader.Order", "order")
										.add(Restrictions.eq("order.OrderNo", box.getString("orderNo"))).list();
		map.put("resultEntryDetailList", resultEntryDetailList);
		return map;
	}
	

	@SuppressWarnings("unchecked")
	public Map<String, Object> searchPatientDetails(Map mapForDS) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Inpatient> patientList = new ArrayList<Inpatient>();

		String serviceNo = "";
		String hinNo = "";

		String patientFName = "";
		String patientMName = "";
		String patientLName = "";
		String servFName = "";
		String servMName = "";
		String servLName = "";

		Session session = (Session) getSession();

		if (mapForDS.get("serviceNo") != null) {

			serviceNo = (String) mapForDS.get("serviceNo");
			//System.out.println("service number====" + serviceNo);
		}
		if (mapForDS.get("hinNo") != null) {

			hinNo = (String) mapForDS.get("hinNo");
			//System.out.println("HIN number====" + hinNo);
		}

		if (mapForDS.get("patientFName") != null) {
			patientFName = (String) mapForDS.get("patientFName");
		}
		if (mapForDS.get("patientMName") != null) {
			patientMName = (String) mapForDS.get("patientMName");
		}
		if (mapForDS.get("patientLName") != null) {
			patientLName = (String) mapForDS.get("patientLName");
		}

		if (mapForDS.get("servFName") != null) {
			servFName = (String) mapForDS.get("servFName");
		}
		if (mapForDS.get("servMName") != null) {
			servMName = (String) mapForDS.get("servMName");
		}
		if (mapForDS.get("servLName") != null) {
			servLName = (String) mapForDS.get("servLName");
		}

		String patientStatus = "A";
		// Criteria crit =
		// session.createCriteria(Patient.class).add(Restrictions.not(Expression.eq("PatientStatus",
		// patientStatus)));
		Criteria crit = session.createCriteria(Inpatient.class).add(
				Restrictions.eq("AdStatus", patientStatus)).createAlias("Hin",
				"p");
		if (hinNo != null && !hinNo.equals("")) {
			//System.out.println("HIN number in if block====" + hinNo);
			crit = crit.add(Restrictions.eq("p.HinNo", hinNo));
		} else {
			if (!serviceNo.equals("")) {
				//System.out.println("service number in else block===="	+ serviceNo);
				crit = crit.add(Restrictions.eq("p.ServiceNo", serviceNo));
			}

			if (!patientFName.equals("")) {
				crit = crit.add(Restrictions.like("p.PFirstName", patientFName
						+ "%"));
			}
			if (!patientMName.equals("")) {
				crit = crit.add(Restrictions.like("p.PMiddleName", patientMName
						+ "%"));
			}
			if (!patientLName.equals("")) {
				crit = crit.add(Restrictions.like("p.PLastName", patientLName
						+ "%"));
			}

			if (!servFName.equals("")) {
				crit = crit.add(Restrictions.like("p.SFirstName", servFName
						+ "%"));
			}
			if (!servMName.equals("")) {
				crit = crit.add(Restrictions.like("p.SMiddleName", servMName
						+ "%"));
			}
			if (!servLName.equals("")) {
				crit = crit.add(Restrictions.like("p.SLastName", servLName
						+ "%"));
			}

		}
		patientList = crit.list();
		map.put("patientList", patientList);
		return map;

	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> showSurgeryRequisitionJsp(Map mapForDS) {
		Session session = (Session) getSession();
		List<Visit> patientDetailList = new ArrayList<Visit>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<TransactionSequence> sequenceNoList = new ArrayList<TransactionSequence>();
		List<MasEmployee> empList = new ArrayList<MasEmployee>();
		Map<String, Object> map = new HashMap<String, Object>();
		String empCategory = "Doctor";

		List<String> departmentTypeCode = new ArrayList<String>();
		departmentTypeCode.add("Sur");
		departmentTypeCode.add("SpltOPD");
		departmentTypeCode.add("OPD1");
		String transactionSequenceName = "Surgery Requisition No";
		int visitId = (Integer) mapForDS.get("visitId");
		int empId = (Integer) mapForDS.get("empId");
		int orderNo = 0;
		String empName = "";
		try {

			Criteria crit = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId));
			patientDetailList = crit.list();

			empList = session.createCriteria(MasEmployee.class).add(
					Restrictions.eq("Id", empId)).list();
			departmentList = session.createCriteria(MasDepartment.class)
					.createAlias("DepartmentType", "deptType").add(
							Restrictions.in("deptType.DepartmentTypeCode",
									departmentTypeCode)).list();
			employeeList = session.createCriteria(MasEmployee.class)
					.createAlias("EmpCategory", "empType").add(
							Restrictions.eq("empType.EmpCategoryName",
									empCategory)).list();
			sequenceNoList = session.createCriteria(TransactionSequence.class)
					.add(
							Restrictions.eq("TransactionSequenceName",
									transactionSequenceName)).list();
			TransactionSequence transactionSequence = sequenceNoList.get(0);
			int sequenceNo = transactionSequence.getTransactionSequenceNumber();
			orderNo = sequenceNo + 1;

			MasEmployee emp = empList.get(0);
			if (emp.getFirstName() != null) {
				empName = emp.getFirstName();
			}
			if (emp.getMiddleName() != null) {
				empName = empName + " " + emp.getMiddleName();
			}
			if (emp.getLastName() != null) {
				empName = empName + " " + emp.getLastName();
			}

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("empName", empName);
		map.put("patientDetailList", patientDetailList);
		map.put("departmentList", departmentList);
		map.put("employeeList", employeeList);
		map.put("orderNo", orderNo);
		return map;
	}

	public Map<String, Object> showAjaxResponseForSurgeryRequisitionJsp(
			Map mapForDS) {
		Session session = (Session) getSession();

		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();

		Map<String, Object> map = new HashMap<String, Object>();
		String empCategory = "Doctor";

		int departmentId = (Integer) mapForDS.get("departmentId");
		try {
			employeeList = session.createCriteria(MasEmployee.class)
					.createAlias("EmpCategory", "empType").createAlias(
							"Department", "dept").add(
							Restrictions.eq("dept.Id", departmentId)).add(
							Restrictions.eq("empType.EmpCategoryName",
									empCategory)).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}

		map.put("departmentId", departmentId);
		map.put("employeeList", employeeList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> showSurgeryRequisitionJspForHin(Map mapForDS) {
		Session session = (Session) getSession();
		Map<String, Object> hmsutil = new HashMap<String, Object>();
		List<Patient> patientDetailList = new ArrayList<Patient>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<TransactionSequence> sequenceNoList = new ArrayList<TransactionSequence>();
		List<MasEmployee> empList = new ArrayList<MasEmployee>();
		List<MasEmployee> doctorList = new ArrayList<MasEmployee>();
		List<Visit> visitList = new ArrayList<Visit>();
		int orderNo = 0;
		String transactionSequenceName = "Surgery Requisition No";
		hmsutil = HMSUtil.getCurrentTimeWithoutSecond();
		String currentDate = (String) hmsutil.get("currentDate");
		Date currentdate = HMSUtil.convertStringTypeDateToDateType(currentDate);
		List<OpdSurgeryHeader> opdsurgeryheader = new ArrayList<OpdSurgeryHeader>();
		try {
			opdsurgeryheader = session.createCriteria(OpdSurgeryHeader.class)
					.add(Restrictions.eq("RequisitionDate", currentdate))
					.list();
			sequenceNoList = session.createCriteria(TransactionSequence.class)
					.add(
							Restrictions.eq("TransactionSequenceName",
									transactionSequenceName)).list();
			TransactionSequence transactionSequence = sequenceNoList.get(0);
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (opdsurgeryheader.size() == 0) {

				transactionSequence.setTransactionSequenceNumber(0);
				hbt.update(transactionSequence);

			} else {
				transactionSequence
						.setTransactionSequenceNumber(opdsurgeryheader.size());
				hbt.update(transactionSequence);

			}
		} catch (HibernateException e) {
			e.printStackTrace();

		}

		Map<String, Object> map = new HashMap<String, Object>();

		List<String> departmentTypeCode = new ArrayList<String>();
		departmentTypeCode.add("Sur");
		departmentTypeCode.add("SpltOPD");
		departmentTypeCode.add("OPD1");
		String hinNo = (String) mapForDS.get("hinNo");
		int empId = (Integer) mapForDS.get("empId");
		String empName = "";
		try {

			Criteria crit = session.createCriteria(Patient.class).add(
					Restrictions.eq("HinNo", hinNo));
			patientDetailList = crit.list();
			empList = session.createCriteria(MasEmployee.class).add(
					Restrictions.eq("Id", empId)).add(
					Restrictions.eq("Status", "y")).list();
			departmentList = session.createCriteria(MasDepartment.class)
					.createAlias("DepartmentType", "deptType").add(
							Restrictions.in("deptType.DepartmentTypeCode",
									departmentTypeCode)).add(
							Restrictions.eq("Status", "y")).list();
			sequenceNoList = session.createCriteria(TransactionSequence.class)
					.add(
							Restrictions.eq("TransactionSequenceName",
									transactionSequenceName)).list();
			doctorList = session.createCriteria(MasEmployee.class).createAlias(
					"EmpCategory", "empCat").add(
					Restrictions.eq("empCat.EmpCategoryCode", "01")).add(
					Restrictions.eq("Status", "y")).list();

			visitList = session.createCriteria(Visit.class).createAlias("Hin",
					"p").add(Restrictions.eq("p.HinNo", hinNo)).addOrder(
					Order.desc("Id")).list();

			if (opdsurgeryheader.size() == 0) {
				sequenceNoList = session.createCriteria(
						TransactionSequence.class).add(
						Restrictions.eq("TransactionSequenceName",
								transactionSequenceName)).list();
				TransactionSequence transactionSequence = sequenceNoList.get(0);
				transactionSequence.setTransactionSequenceNumber(0);
				org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
				hbt.update(transactionSequence);

			}

			TransactionSequence transactionSequence = sequenceNoList.get(0);
			int sequenceNo = transactionSequence.getTransactionSequenceNumber();
			orderNo = sequenceNo + 1;
			MasEmployee masEmployee = (MasEmployee) empList.get(0);

			if (masEmployee.getFirstName() != null) {
				empName = masEmployee.getFirstName();
			}
			if (masEmployee.getMiddleName() != null) {
				empName = empName + " " + masEmployee.getMiddleName();
			}
			if (masEmployee.getLastName() != null) {
				empName = empName + " " + masEmployee.getLastName();
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("empName", empName);
		map.put("patientDetailList", patientDetailList);
		map.put("departmentList", departmentList);
		map.put("orderNo", orderNo);
		map.put("doctorList", doctorList);
		map.put("visitList", visitList);

		return map;
	}

	public Map<String, Object> getEmployeeIdFromUserName(String userName) {
		Session session = (Session) getSession();
		String employeeName = "";
		int employeeId = 0;
		List<Users> userList = new ArrayList<Users>();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			userList = session.createCriteria(Users.class).add(
					Restrictions.eq("LoginName", userName)).list();
			Users users = userList.get(0);
			employeeId = users.getEmployee().getId();
			if (users.getEmployee() != null) {

				if (users.getEmployee().getFirstName() != null) {
					employeeName = users.getEmployee().getFirstName();
				}
				if (users.getEmployee().getMiddleName() != null) {
					employeeName = "" + users.getEmployee().getMiddleName();
				}
				if (users.getEmployee().getLastName() != null) {
					employeeName = "" + users.getEmployee().getLastName();
				}
			}

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("employeeName", employeeName);
		map.put("employeeId", employeeId);

		return map;
	}

	@SuppressWarnings("unchecked")
	/*public Map<String, Object> submitSurgeryRequisitionDetails(Map mapForDS) {

		boolean succesfullyAdded = false;
		Map<String, Object> returnMap = new HashMap<String, Object>();
		List<TransactionSequence> sequenceNoList = new ArrayList<TransactionSequence>();
		List chargeCodeList = (List) mapForDS.get("chargeCodeList");
		int surgicalDepartmentId = (Integer) mapForDS.get("deptId");
		int prescribedDepartmentId = (Integer) mapForDS.get("prescribedDepartmentId");
		int visitId = (Integer) mapForDS.get("visitId");
		int hinId = (Integer) mapForDS.get("hinId");
		String userName = (String) mapForDS.get("userName");
		String requisitionDate = (String) mapForDS.get("requisitionDate");
		String requisitionTime = (String) mapForDS.get("requisitionTime");
		String patientStatus = "Out Patient";
		String pacRequird = (String) mapForDS.get("pacRequird");
		String transactionSequenceName = "Surgery Requisition No";
		Session session = (Session) getSession();
		Transaction tx = null;
		int orderNo = 0;

		try {
			tx = session.beginTransaction();
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			sequenceNoList = session.createCriteria(TransactionSequence.class)
					.add(
							Restrictions.eq("TransactionSequenceName",
									transactionSequenceName)).list();
			TransactionSequence transactionSequence = (TransactionSequence) sequenceNoList
					.get(0);
			orderNo = transactionSequence.getTransactionSequenceNumber();
			orderNo = orderNo + 1;
			int id = transactionSequence.getId();

			TransactionSequence transactionSequence2 = (TransactionSequence) hbt
					.load(TransactionSequence.class, id);
			transactionSequence2.setTransactionSequenceNumber(orderNo);
			hbt.update(transactionSequence2);

			OpdSurgeryHeader opdSurgeryHeader = new OpdSurgeryHeader();
			opdSurgeryHeader.setOrderNo(orderNo);
			Patient patient = new Patient();
			patient.setId(hinId);
			opdSurgeryHeader.setHin(patient);
			Visit visit = new Visit();
			visit.setId(visitId);
			opdSurgeryHeader.setVisit(visit);
			if (surgicalDepartmentId != 0) {
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(surgicalDepartmentId);
				opdSurgeryHeader.setSurgicalDept(masDepartment);
			}
			MasDepartment masDepartmentObj = new MasDepartment();
			masDepartmentObj.setId(prescribedDepartmentId);
			opdSurgeryHeader.setPrescribedDepartment(masDepartmentObj);

			Date date = HMSUtil
					.convertStringTypeDateToDateType(requisitionDate);
			opdSurgeryHeader.setRequisitionDate(date);
			opdSurgeryHeader.setRequisitionTime(requisitionTime);
			opdSurgeryHeader.setPatientStatus(patientStatus);

			if(pacRequird !=null && pacRequird.equalsIgnoreCase("y")){
				opdSurgeryHeader.setPacStatus("pending");
				}else {
				opdSurgeryHeader.setPacStatus("Cleared");
				}
			opdSurgeryHeader.setBookingStatus("pending");
			
			 * method created for getting employee id and name from username.
			 * "getEmployeeIdFromUserName(userName)"
			 
			Map<String, Object> map = getEmployeeIdFromUserName(userName);
			int employeeId = (Integer) map.get("employeeId");
			MasEmployee masEmployee = new MasEmployee();
			masEmployee.setId(employeeId);
			opdSurgeryHeader.setEmployee(masEmployee);

			hbt.save(opdSurgeryHeader);

			int chargeCodeId = 0;
			for (int i = 0; i < chargeCodeList.size(); i++) {
				chargeCodeId = (Integer) chargeCodeList.get(i);

				OpdSurgeryDetail opdSurgeryDetail = new OpdSurgeryDetail();
				opdSurgeryDetail.setOpdSurgery(opdSurgeryHeader);
				MasChargeCode masChargeCode = new MasChargeCode();
				masChargeCode.setId(chargeCodeId);
				opdSurgeryDetail.setChargeCode(masChargeCode);
				hbt.save(opdSurgeryDetail);
			}

			succesfullyAdded = true;
			tx.commit();
		} catch (Exception e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();

		} finally {
			// --------Session Closing----------
			session.close();
		}
		returnMap.put("addResult", succesfullyAdded);
		returnMap.put("orderNo", orderNo);
		return returnMap;
	}*/
    public Map<String, Object> submitSurgeryRequisitionDetails(Map mapForDS) {

		boolean succesfullyAdded = false;
		Map<String, Object> returnMap = new HashMap<String, Object>();
		List<TransactionSequence> sequenceNoList = new ArrayList<TransactionSequence>();
		List chargeCodeList = (List) mapForDS.get("chargeCodeList");
		int surgicalDepartmentId = (Integer) mapForDS.get("deptId");
		int prescribedDepartmentId = (Integer) mapForDS.get("prescribedDepartmentId");
		int visitId = (Integer) mapForDS.get("visitId");
		int hinId = (Integer) mapForDS.get("hinId");
		String userName = (String) mapForDS.get("userName");
		String requisitionDate = (String) mapForDS.get("requisitionDate");
		String requisitionTime = (String) mapForDS.get("requisitionTime");
		String patientStatus = "Out Patient";
		String pacRequird = (String) mapForDS.get("pacRequird");
		String transactionSequenceName = "Surgery Requisition No";
		Session session = (Session) getSession();
		Transaction tx = null;
		int orderNo = 0;

		try {
			tx = session.beginTransaction();
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			sequenceNoList = session.createCriteria(TransactionSequence.class)
					.add(
							Restrictions.eq("TransactionSequenceName",
									transactionSequenceName)).list();
			TransactionSequence transactionSequence = (TransactionSequence) sequenceNoList
					.get(0);
			orderNo = transactionSequence.getTransactionSequenceNumber();
			orderNo = orderNo + 1;
			int id = transactionSequence.getId();

			TransactionSequence transactionSequence2 = (TransactionSequence) hbt
					.load(TransactionSequence.class, id);
			transactionSequence2.setTransactionSequenceNumber(orderNo);
			hbt.update(transactionSequence2);

			OpdSurgeryHeader opdSurgeryHeader = new OpdSurgeryHeader();
			opdSurgeryHeader.setOrderNo(orderNo);
			Patient patient = new Patient();
			patient.setId(hinId);
			opdSurgeryHeader.setHin(patient);
			Visit visit = new Visit();
			visit.setId(visitId);
			opdSurgeryHeader.setVisit(visit);
			if (surgicalDepartmentId != 0) {
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(surgicalDepartmentId);
				opdSurgeryHeader.setSurgicalDept(masDepartment);
			}
			MasDepartment masDepartmentObj = new MasDepartment();
			masDepartmentObj.setId(prescribedDepartmentId);
			opdSurgeryHeader.setPrescribedDepartment(masDepartmentObj);

			Date date = HMSUtil
					.convertStringTypeDateToDateType(requisitionDate);
			opdSurgeryHeader.setRequisitionDate(date);
			opdSurgeryHeader.setRequisitionTime(requisitionTime);
			opdSurgeryHeader.setPatientStatus(patientStatus);

			if(pacRequird !=null && pacRequird.equalsIgnoreCase("y")){
				opdSurgeryHeader.setPacStatus("pending");
				}else {
				opdSurgeryHeader.setPacStatus("Cleared");
				}
			opdSurgeryHeader.setBookingStatus("pending");
			/*
			 * method created for getting employee id and name from username.
			 * "getEmployeeIdFromUserName(userName)"
			 */
			Map<String, Object> map = getEmployeeIdFromUserName(userName);
			int employeeId = (Integer) map.get("employeeId");
			MasEmployee masEmployee = new MasEmployee();
			masEmployee.setId(employeeId);
			opdSurgeryHeader.setEmployee(masEmployee);

			hbt.save(opdSurgeryHeader);

			int chargeCodeId = 0;
			for (int i = 0; i < chargeCodeList.size(); i++) {
				chargeCodeId = (Integer) chargeCodeList.get(i);

				OpdSurgeryDetail opdSurgeryDetail = new OpdSurgeryDetail();
				opdSurgeryDetail.setOpdSurgery(opdSurgeryHeader);
				MasChargeCode masChargeCode = new MasChargeCode();
				masChargeCode.setId(chargeCodeId);
				opdSurgeryDetail.setChargeCode(masChargeCode);
				hbt.save(opdSurgeryDetail);
			}

			succesfullyAdded = true;
			tx.commit();
		} catch (Exception e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();

		} 
		returnMap.put("addResult", succesfullyAdded);
		returnMap.put("orderNo", orderNo);
		return returnMap;
	}
	@SuppressWarnings("unchecked")
	/*public boolean submitSurgeryRequisitionDetailsForInpatient(Map mapForDS) {

		boolean succesfullyAdded = false;
		List chargeCodeList = (List) mapForDS.get("chargeCodeList");
		List<Inpatient> inpatientList = new ArrayList<Inpatient>();
		List<Visit> visitList = new ArrayList<Visit>();
		List<TransactionSequence> sequenceNoList = new ArrayList<TransactionSequence>();
		int surgicalDepartmentId = (Integer) mapForDS.get("deptId");
		int prescribedDepartmentId = (Integer) mapForDS
				.get("prescribedDepartmentId");

		int hinId = (Integer) mapForDS.get("hinId");
		String userName = (String) mapForDS.get("userName");
		String requisitionDate = (String) mapForDS.get("requisitionDate");
		String requisitionTime = (String) mapForDS.get("requisitionTime");
		int docId = (Integer) mapForDS.get("docId");
		String pStatus = (String) mapForDS.get("pStatus");
		Users user = (Users) mapForDS.get("user");

		Session session = (Session) getSession();
		Transaction tx = null;

		try {
			tx = session.beginTransaction();
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			String adStatus = "A";
			String patientStatus = "InPatient";
			String pacStatus = "Pending";
			String transactionSequenceName = "Surgery Requisition No";
			Inpatient inpatient = new Inpatient();
			Visit visit = new Visit();
			int inpatientId = 0;
			int visitId = 0;
			if (pStatus.equals("In Patient")) {
				inpatientList = session.createCriteria(Inpatient.class)
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).add(
								Restrictions.eq("AdStatus", adStatus)).list();
				inpatient = (Inpatient) inpatientList.get(0);
				inpatientId = inpatient.getId();
			} else if (pStatus.equals("Out Patient")) {
				visitList = session.createCriteria(Visit.class).createAlias(
						"Hin", "hin").add(Restrictions.eq("hin.Id", hinId))
						.addOrder(Order.desc("Id")).list();
				visit = (Visit) visitList.get(0);
				visitId = visit.getId();
			}

			sequenceNoList = session.createCriteria(TransactionSequence.class)
					.add(
							Restrictions.eq("TransactionSequenceName",
									transactionSequenceName)).list();
			TransactionSequence transactionSequence = (TransactionSequence) sequenceNoList
					.get(0);
			int orderNo = transactionSequence.getTransactionSequenceNumber();
			orderNo = orderNo + 1;
			int id = transactionSequence.getId();

			TransactionSequence transactionSequence2 = (TransactionSequence) hbt
					.load(TransactionSequence.class, id);
			transactionSequence2.setTransactionSequenceNumber(orderNo);
			hbt.update(transactionSequence2);

			OpdSurgeryHeader opdSurgeryHeader = new OpdSurgeryHeader();

			opdSurgeryHeader.setOrderNo(orderNo);
			Patient patient = new Patient();
			patient.setId(hinId);
			opdSurgeryHeader.setHin(patient);

			if (pStatus.equals("In Patient")) {
				Inpatient inpatient2 = new Inpatient();
				inpatient2.setId(inpatientId);
				opdSurgeryHeader.setInpatient(inpatient2);
			} else if (pStatus.equals("Out Patient")) {
				Visit visit2 = new Visit();
				visit2.setId(visitId);
				opdSurgeryHeader.setVisit(visit2);
			}

			//System.out.println(":::::::::" + surgicalDepartmentId);
			if (surgicalDepartmentId != 0) {
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(surgicalDepartmentId);
				opdSurgeryHeader.setSurgicalDept(masDepartment);
			}

			if (prescribedDepartmentId != 0) {
				MasDepartment masDepartmentObj = new MasDepartment();
				masDepartmentObj.setId(prescribedDepartmentId);
				opdSurgeryHeader.setPrescribedDepartment(masDepartmentObj);
			}

			//System.out.println(":::::::::" + prescribedDepartmentId);

			Date date = HMSUtil
					.convertStringTypeDateToDateType(requisitionDate);
			opdSurgeryHeader.setRequisitionDate(date);
			opdSurgeryHeader.setRequisitionTime(requisitionTime);

			opdSurgeryHeader.setPatientStatus(pStatus);
			opdSurgeryHeader.setPacStatus(pacStatus);
			opdSurgeryHeader.setBookingStatus("pending");
			
			 * method created for getting employee id and name from username.
			 * "getEmployeeIdFromUserName(userName)"
			 
			// //System.out.println(":::::::::"+userName);
			// Map<String,Object>map= getEmployeeIdFromUserName(userName);
			// int employeeId=(Integer)map.get("employeeId");
			int employeeId = user.getEmployee().getId();
			MasEmployee masEmployee = new MasEmployee();
			masEmployee.setId(employeeId);
			opdSurgeryHeader.setEmployee(masEmployee);

			hbt.save(opdSurgeryHeader);
			hbt.refresh(opdSurgeryHeader);

			int chargeCodeId = 0;
			for (int i = 0; i < chargeCodeList.size(); i++) {
				chargeCodeId = (Integer) chargeCodeList.get(i);

				OpdSurgeryDetail opdSurgeryDetail = new OpdSurgeryDetail();
				opdSurgeryDetail.setOpdSurgery(opdSurgeryHeader);
				MasChargeCode masChargeCode = new MasChargeCode();
				masChargeCode.setId(chargeCodeId);
				opdSurgeryDetail.setChargeCode(masChargeCode);
				if (docId != 0) {
					opdSurgeryDetail.setSurgeon(new MasEmployee(docId));
				}
				hbt.save(opdSurgeryDetail);
		
			}

			succesfullyAdded = true;
			tx.commit();
		} catch (Exception e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();

		}

		finally {
			// --------Session Closing----------
			session.close();
		}

		return succesfullyAdded;
	}*/
public boolean submitSurgeryRequisitionDetailsForInpatient(Map mapForDS) {

		boolean succesfullyAdded = false;
		List chargeCodeList = (List) mapForDS.get("chargeCodeList");
		List<Inpatient> inpatientList = new ArrayList<Inpatient>();
		List<Visit> visitList = new ArrayList<Visit>();
		List<TransactionSequence> sequenceNoList = new ArrayList<TransactionSequence>();
		int surgicalDepartmentId = (Integer) mapForDS.get("deptId");
		int prescribedDepartmentId = (Integer) mapForDS.get("prescribedDepartmentId");

		int hinId = (Integer) mapForDS.get("hinId");
		String requisitionDate = (String) mapForDS.get("requisitionDate");
		String requisitionTime = (String) mapForDS.get("requisitionTime");
		int docId = (Integer) mapForDS.get("docId");
		String pStatus = (String) mapForDS.get("pStatus");
		String pacRequird = (String) mapForDS.get("pacRequird");
		Users user = (Users) mapForDS.get("user");

		Session session = (Session) getSession();
		Transaction tx = null;

		try {
			tx = session.beginTransaction();
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			String adStatus = "A";
			String transactionSequenceName = "Surgery Requisition No";
			Inpatient inpatient = new Inpatient();
			Visit visit = new Visit();
			int inpatientId = 0;
			int visitId = 0;
			if (pStatus.equals("In Patient")) {
				inpatientList = session.createCriteria(Inpatient.class)
						.createAlias("Hin", "hin").add(	Restrictions.eq("hin.Id", hinId)).add(
								Restrictions.eq("AdStatus", adStatus)).list();
				inpatient = (Inpatient) inpatientList.get(0);
				inpatientId = inpatient.getId();
			} else if (pStatus.equals("Out Patient")) {
				visitList = session.createCriteria(Visit.class).createAlias(
						"Hin", "hin").add(Restrictions.eq("hin.Id", hinId)).addOrder(Order.desc("Id")).list();
				visit = (Visit) visitList.get(0);
				visitId = visit.getId();
			}

			sequenceNoList = session.createCriteria(TransactionSequence.class)
					.add(Restrictions.eq("TransactionSequenceName",	transactionSequenceName)).list();
			TransactionSequence transactionSequence = (TransactionSequence) sequenceNoList.get(0);
			int orderNo = transactionSequence.getTransactionSequenceNumber();
			orderNo = orderNo + 1;
			int id = transactionSequence.getId();

			TransactionSequence transactionSequence2 = (TransactionSequence) hbt
					.load(TransactionSequence.class, id);
			transactionSequence2.setTransactionSequenceNumber(orderNo);
			hbt.update(transactionSequence2);

			OpdSurgeryHeader opdSurgeryHeader = new OpdSurgeryHeader();

			opdSurgeryHeader.setOrderNo(orderNo);
			Patient patient = new Patient();
			patient.setId(hinId);
			opdSurgeryHeader.setHin(patient);

			if (pStatus.equals("In Patient")) {
				Inpatient inpatient2 = new Inpatient();
				inpatient2.setId(inpatientId);
				opdSurgeryHeader.setInpatient(inpatient2);
			} else if (pStatus.equals("Out Patient")) {
				Visit visit2 = new Visit();
				visit2.setId(visitId);
				opdSurgeryHeader.setVisit(visit2);
			}
			if (surgicalDepartmentId != 0) {
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(surgicalDepartmentId);
				opdSurgeryHeader.setSurgicalDept(masDepartment);
			}

			if (prescribedDepartmentId != 0) {
				MasDepartment masDepartmentObj = new MasDepartment();
				masDepartmentObj.setId(prescribedDepartmentId);
				opdSurgeryHeader.setPrescribedDepartment(masDepartmentObj);
			}

			Date date = HMSUtil.convertStringTypeDateToDateType(requisitionDate);
			opdSurgeryHeader.setRequisitionDate(date);
			opdSurgeryHeader.setRequisitionTime(requisitionTime);

			opdSurgeryHeader.setPatientStatus(pStatus);

			if(pacRequird !=null && pacRequird.equalsIgnoreCase("y")){
			opdSurgeryHeader.setPacStatus("pending");
			}else{
			opdSurgeryHeader.setPacStatus("Cleared");
			}
			opdSurgeryHeader.setBookingStatus("pending");
			/*
			 * method created for getting employee id and name from username.
			 * "getEmployeeIdFromUserName(userName)"
			 */
			// Map<String,Object>map= getEmployeeIdFromUserName(userName);
			// int employeeId=(Integer)map.get("employeeId");
			int employeeId=0;
			if( user.getEmployee()!=null){
			 employeeId = user.getEmployee().getId();
			}
			MasEmployee masEmployee = new MasEmployee();
			masEmployee.setId(employeeId);
			opdSurgeryHeader.setEmployee(masEmployee);

			hbt.save(opdSurgeryHeader);
			hbt.refresh(opdSurgeryHeader);

			int chargeCodeId = 0;
			for (int i = 0; i < chargeCodeList.size(); i++) {
				chargeCodeId = (Integer) chargeCodeList.get(i);

				OpdSurgeryDetail opdSurgeryDetail = new OpdSurgeryDetail();
				opdSurgeryDetail.setOpdSurgery(opdSurgeryHeader);
				MasChargeCode masChargeCode = new MasChargeCode();
				masChargeCode.setId(chargeCodeId);
				opdSurgeryDetail.setChargeCode(masChargeCode);
				if (docId != 0) {
					opdSurgeryDetail.setSurgeon(new MasEmployee(docId));
				}
				hbt.save(opdSurgeryDetail);

			}
			succesfullyAdded = true;
			tx.commit();
		} catch (Exception e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();

		}
		return succesfullyAdded;
	}
	// -----------------------------------------End of methods by
	// Vikas---------------------------------

	/**
	 * --------------------------------------------Methods For OPD Ophthamology
	 * By Ritu-------------------------
	 * 
	 */

	public Map<String, Object> submitOphthalmologyDetails(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		int hospitalId = 0;
		String userName = "";

		userName = box.getString("userName");

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");

		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);

		OpdOphthalmology opdOphthalmology = new OpdOphthalmology();

		try {

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
            int opdOphthalmologyId = 0;
            opdOphthalmologyId = box.getInt("opdOphthalmologyId");
            if(opdOphthalmologyId != 0)
            	opdOphthalmology.setId(opdOphthalmologyId);
			int visitId = box.getInt(VISIT_ID);
			Visit visit = new Visit();
			visit.setId(visitId);
			opdOphthalmology.setVisit(visit);

			int hinId = box.getInt(HIN_ID);
			Patient patient = new Patient();
			patient.setId(hinId);
			opdOphthalmology.setHin(patient);

			hospitalId = box.getInt("hospitalId");
			MasHospital hospital = new MasHospital();
			hospital.setId(hospitalId);
			opdOphthalmology.setHospital(hospital);

			opdOphthalmology
					.setDecreasedVision(box.getString(DECREASED_VISION));
			opdOphthalmology.setRedness(box.getString(REDNESS));
			opdOphthalmology.setDischarge(box.getString(DISCHARGE));
			opdOphthalmology.setPain(box.getString(PAIN));
			opdOphthalmology.setFloaterTraumaEpiphora(box
					.getString(FLOATER_TRAUMA_EPIPHORA));

			if (box.getString(READING) != null) {
				opdOphthalmology.setReading(box.getString(READING));
			}
			if (box.getString(DRIVING) != null) {
				opdOphthalmology.setDriving(box.getString(DRIVING));
			}
			if (box.getString(COOKING) != null) {
				opdOphthalmology.setCooking(box.getString(COOKING));
			}
			if (box.getString(PERSONAL_HYGIENE) != null) {
				opdOphthalmology.setPersonalHygiene(box
						.getString(PERSONAL_HYGIENE));
			}
			if (box.getString(AMBULATORY) != null) {
				opdOphthalmology.setAmbulatry(box.getString(AMBULATORY));
			}
			if (box.getString(CAD) != null) {
				opdOphthalmology.setCad(box.getString(CAD));
			}

			if (box.getString(DM) != null) {
				opdOphthalmology.setDm(box.getString(DM));
			}
			if (box.getString(HTN) != null) {
				opdOphthalmology.setHtn(box.getString(HTN));
			}
			if (box.getString(BA) != null) {
				opdOphthalmology.setBa(box.getString(BA));
			}
			if (box.getString(AUTOIMMUNE) != null) {
				opdOphthalmology.setAutoimmune(box.getString(AUTOIMMUNE));
			}
			if (box.getString(AMBULATORY) != null) {
				opdOphthalmology.setAmbulatry(box.getString(AMBULATORY));
			}
			if (box.getString(OTHERS) != null) {
				opdOphthalmology.setOthers(box.getString(OTHERS));
			}

			opdOphthalmology.setDistanceRe(box.getString(DISTANCE_RE));
			opdOphthalmology.setDistanceLe(box.getString(DISTANCE_LE));
			opdOphthalmology.setDistancePh(box.getString(DISTANCE_PH));
			opdOphthalmology.setNearRe(box.getString(NEAR_RE));
			opdOphthalmology.setNearLe(box.getString(NEAR_LE));
			opdOphthalmology.setNearPh(box.getString(NEAR_PH));
			opdOphthalmology.setRefractionRe(box.getString(REFRACTION_RE));
			opdOphthalmology.setRefractionLe(box.getString(REFRACTION_LE));
			opdOphthalmology.setRefractionPh(box.getString(REFRACTION_PH));
			opdOphthalmology.setAcceptanceDistanceRe(box
					.getString(ACCEPTANCE_DISTANCE_RE));
			opdOphthalmology.setAcceptanceDistanceLe(box
					.getString(ACCEPTANCE_DISTANCE_LE));
			opdOphthalmology.setAcceptanceDistancePh(box
					.getString(ACCEPTANCE_DISTANCE_PH));
			opdOphthalmology.setAcceptanceNearRe(box
					.getString(ACCEPTANCE_NEAR_RE));
			opdOphthalmology.setAcceptanceNearLe(box
					.getString(ACCEPTANCE_NEAR_LE));
			opdOphthalmology.setAcceptanceNearPh(box
					.getString(ACCEPTANCE_NEAR_PH));
			opdOphthalmology.setConvergence(box.getString(CONVERGENCE));
			opdOphthalmology.setColorVision(box.getString(COLOR_VISION));
			opdOphthalmology.setOcularMovement(box.getString(OCULAR_MOVEMENTS));
			opdOphthalmology.setLids(box.getString(LIDS));
			opdOphthalmology.setConjunctiva(box.getString(CONJUNCTIVA));
			opdOphthalmology.setCorneaAcRe(box.getString(CORNEA_AC_RE));
			opdOphthalmology.setCorneaAcLe(box.getString(CORNEA_AC_LE));

			opdOphthalmology
					.setAntChamberDepthLe(box.getString(ANT_CHAMBER_LE));
			opdOphthalmology
					.setAntChamberDepthRe(box.getString(ANT_CHAMBER_RE));
			opdOphthalmology.setCellsFlareLe(box.getString(CELLS_FLARE_LE));
			opdOphthalmology.setCellsFlareRe(box.getString(CELLS_FLARE_RE));
			opdOphthalmology.setPxfNviLe(box.getString(PXF_NVI_LE));
			opdOphthalmology.setPxfNviRe(box.getString(PXF_NVI_RE));

			if (box.getString(DIRECT) != null) {
				opdOphthalmology.setPupilReactionDirect(box.getString(DIRECT));
			}
			if (box.getString(CONSENSNAL) != null) {
				opdOphthalmology.setPupilReactionConsensnal(box
						.getString(CONSENSNAL));
			}
			if (box.getString(RAPD) != null) {
				opdOphthalmology.setPupilReactionRapd(box.getString(RAPD));
			}

			opdOphthalmology.setGonioscopyRe(box.getString(GONIOSCOPY_RE));
			opdOphthalmology.setGonioscopyLe(box.getString(GONIOSCOPY_LE));
			opdOphthalmology.setIopRe(box.getString(IOP_RE));
			opdOphthalmology.setIopLe(box.getString(IOP_LE));
			opdOphthalmology.setDilationRe(box.getString(DILATION_RE));
			opdOphthalmology.setDilationLe(box.getString(DILATION_LE));
			opdOphthalmology.setLensRe(box.getString(LENS_RE));
			opdOphthalmology.setLensLe(box.getString(LENS_LE));
			opdOphthalmology.setFundusRe(box.getString(FUNDUS_RE));
			opdOphthalmology.setFundusLe(box.getString(FUNDUS_LE));

			opdOphthalmology.setLastChgBy(userName);
			opdOphthalmology.setLastChgDate(date);
			opdOphthalmology.setLastChgTime(time);

			hbt.saveOrUpdate(opdOphthalmology);
			saved = true;

		} catch (Exception e) {
			saved = false;
			e.printStackTrace();
		}
		map.put("saved", saved);

		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getPatientOphthalmologyDetails(
			Map<String, Object> parameterMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdOphthalmology> ophthalmologyList = new ArrayList<OpdOphthalmology>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();

		try {
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}
			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				ophthalmologyList = session.createCriteria(
						OpdOphthalmology.class).createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", visitId)).list();
				map.put("ophthalmologyList", ophthalmologyList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getFrequencyList() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();
		List<MasAnesthesia> anesthesiaList = new ArrayList<MasAnesthesia>();
		Session session = (Session) getSession();

		try {
			frequencyList = session.createCriteria(MasFrequency.class).add(
					Restrictions.eq("Status", "y")).list();
			anesthesiaList = session.createCriteria(MasAnesthesia.class).add(
					Restrictions.eq("Status", "y")).list();
			map.put("frequencyList", frequencyList);
			map.put("anesthesiaList", anesthesiaList);
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> submitOphthalmologyDiagnosis(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		String userName = "";

		userName = box.getString("userName");

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");

		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);

		OpdOphDiagnosisHeader diagnosisHeader = new OpdOphDiagnosisHeader();

		try {
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			Patient patient = new Patient();
			patient.setId(box.getInt(HIN_ID));
			diagnosisHeader.setHin(patient);

			Visit visit = new Visit();
			visit.setId(box.getInt(VISIT_ID));
			diagnosisHeader.setVisit(visit);

			if (box.getInt(ANESTHESIA_ID) != 0) {
				MasAnesthesia anesthesia = new MasAnesthesia();
				anesthesia.setId(box.getInt(ANESTHESIA_ID));
				diagnosisHeader.setAnesthesia(anesthesia);
			}

			MasHospital hospital = new MasHospital();
			hospital.setId(box.getInt("hospitalId"));
			diagnosisHeader.setHospital(hospital);

			diagnosisHeader.setOcular(box.getString(OCULAR));
			diagnosisHeader.setSystemic(box.getString(SYSTEMIC));
			diagnosisHeader.setPlan(box.getString(PLAN));
			diagnosisHeader.setRightEyeSurgery(box.getString(RIGHT_EYE));
			diagnosisHeader.setLeftEyeSurgery(box.getString(LEFT_EYE));

			if (box.getString(NEXT_REVIEW_DATE) != null
					&& !box.getString(NEXT_REVIEW_DATE).equals("")) {
				diagnosisHeader.setNextReviewDate(HMSUtil
						.convertStringTypeDateToDateType(box
								.getString(NEXT_REVIEW_DATE)));
			}

			diagnosisHeader.setLastChgBy(userName);
			diagnosisHeader.setLastChgDate(date);
			diagnosisHeader.setLastChgTime(time);

			hbt.save(diagnosisHeader);

			Vector medicine = box.getVector(MEDICINE);
			Vector uom = box.getVector(UOM);
			Vector frequency = box.getVector(FREQUENCY);
			Vector eye = box.getVector(EYE);

			for (int i = 0; i < medicine.size(); i++) {
				OpdOphDiagnosisDetails diagnosisDetails = new OpdOphDiagnosisDetails();
				if (medicine.get(i) != null && !medicine.get(i).equals("")) {
					MasFrequency masFrequency = new MasFrequency();
					masFrequency.setId(Integer.valueOf(frequency.get(i)
							.toString()));

					diagnosisDetails.setMedicine(medicine.get(i).toString());
					diagnosisDetails.setDrugType(uom.get(i).toString());
					diagnosisDetails.setEye(eye.get(i).toString());
					diagnosisDetails.setFrequency(masFrequency);
					diagnosisDetails.setOphDiagnosisHeader(diagnosisHeader);
					diagnosisDetails.setLastChgBy(userName);
					diagnosisDetails.setLastChgDate(date);
					diagnosisDetails.setLastChgTime(time);
					hbt.save(diagnosisDetails);
				}
			}
			saved = true;
		} catch (DataAccessException e) {
			saved = false;
			e.printStackTrace();
		}
		map.put("saved", saved);

		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getOphthalmologyDiagnosisDetails(
			Map<String, Object> parameterMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdOphDiagnosisHeader> ophDiagnosisList = new ArrayList<OpdOphDiagnosisHeader>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();

		try {
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}
			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				ophDiagnosisList = session.createCriteria(
						OpdOphDiagnosisHeader.class).createAlias("Visit",
						"visit").add(Restrictions.eq("visit.Id", visitId))
						.list();
				map.put("ophDiagnosisList", ophDiagnosisList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> submitOphthalmologyRetinal(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		String userName = "";

		userName = box.getString("userName");

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");

		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);

		OpdOphRetinalHeader retinalHeader = new OpdOphRetinalHeader();

		try {
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			Patient patient = new Patient();
			patient.setId(box.getInt(HIN_ID));
			retinalHeader.setHin(patient);

			Visit visit = new Visit();
			visit.setId(box.getInt(VISIT_ID));
			retinalHeader.setVisit(visit);

			MasHospital hospital = new MasHospital();
			hospital.setId(box.getInt("hospitalId"));
			retinalHeader.setHospital(hospital);

			retinalHeader.setRightEye(box.getString(RIGHT_EYE));
			retinalHeader.setLeftEye(box.getString(LEFT_EYE));
			retinalHeader.setRetinalLaserDate(date);

			retinalHeader.setLastChgBy(userName);
			retinalHeader.setLastChgDate(date);
			retinalHeader.setLastChgTime(time);

			hbt.save(retinalHeader);

			Vector eye = box.getVector(EYE);
			Vector power = box.getVector(POWER);
			Vector duration = box.getVector(DURATION);
			Vector noOfSpots = box.getVector(NO_OF_SPOTS);
			Vector laserType = box.getVector(LASER_TYPE);
			Vector doctorName = box.getVector(DOCTOR_NAME);
			Vector sign = box.getVector(SIGN);

			for (int i = 0; i < power.size(); i++) {
				OpdOphRetinalDetails retinalDetails = new OpdOphRetinalDetails();
				if (power.get(i) != null && !power.get(i).equals("")) {

					retinalDetails.setOphRetinalHeader(retinalHeader);
					retinalDetails.setEye(eye.get(i).toString());
					retinalDetails.setPower(power.get(i).toString());
					retinalDetails.setDuration(duration.get(i).toString());
					retinalDetails.setNoOfSpots(noOfSpots.get(i).toString());
					retinalDetails.setLaserType(laserType.get(i).toString());
					retinalDetails.setDoctorName(doctorName.get(i).toString());
					retinalDetails.setSign(sign.get(i).toString());
					retinalDetails.setLastChgBy(userName);
					retinalDetails.setLastChgDate(date);
					retinalDetails.setLastChgTime(time);

					hbt.save(retinalDetails);
				}
			}
			saved = true;
		} catch (DataAccessException e) {
			saved = false;
			e.printStackTrace();
		}
		map.put("saved", saved);

		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getOphthalmologyRetinalDetails(
			Map<String, Object> parameterMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdOphRetinalHeader> ophRetinalList = new ArrayList<OpdOphRetinalHeader>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();

		try {
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}
			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				ophRetinalList = session.createCriteria(
						OpdOphRetinalHeader.class)
						.createAlias("Visit", "visit").add(
								Restrictions.eq("visit.Id", visitId)).list();
				map.put("ophRetinalList", ophRetinalList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public Map<String, Object> submitOphthalmologyFollowUp(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		int hospitalId = 0;
		String userName = "";

		userName = box.getString("userName");

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");

		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);

		OpdOphFollowUp ophFollowUp = new OpdOphFollowUp();

		try {

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			int opdOphFollowUpId = 0 ;
			opdOphFollowUpId = box.getInt("opdOphFollowUpId");
			if(opdOphFollowUpId !=0)
				ophFollowUp.setId(opdOphFollowUpId);

			int visitId = box.getInt(VISIT_ID);
			Visit visit = new Visit();
			visit.setId(visitId);
			ophFollowUp.setVisit(visit);

			int hinId = box.getInt(HIN_ID);
			Patient patient = new Patient();
			patient.setId(hinId);
			ophFollowUp.setHin(patient);

			hospitalId = box.getInt("hospitalId");
			MasHospital hospital = new MasHospital();
			hospital.setId(hospitalId);
			ophFollowUp.setHospital(hospital);

			ophFollowUp.setAntSegmentRe(box.getString(ANT_SEGMENT_RE));
			ophFollowUp.setAntSegmentLe(box.getString(ANT_SEGMENT_LE));
			ophFollowUp.setIop(box.getString(IOP));
			ophFollowUp.setFundusRe(box.getString(FUNDUS_RE));
			ophFollowUp.setFundusLe(box.getString(FUNDUS_LE));
			ophFollowUp.setAdv(box.getString(ADV));
			ophFollowUp.setFollowUpDate(date);
			ophFollowUp.setLastChgBy(userName);
			ophFollowUp.setLastChgDate(date);
			ophFollowUp.setLastChgTime(time);

			hbt.saveOrUpdate(ophFollowUp);
			saved = true;
		} catch (Exception e) {
			saved = false;
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getOphthalmologyFollowUpDetails(
			Map<String, Object> parameterMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdOphFollowUp> ophFollowUpList = new ArrayList<OpdOphFollowUp>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();

		try {
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}
			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				ophFollowUpList = session.createCriteria(OpdOphFollowUp.class)
						.createAlias("Visit", "visit").add(
								Restrictions.eq("visit.Id", visitId)).list();
				map.put("ophFollowUpList", ophFollowUpList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	/**
	 * -------------------------------------------- End of methods by
	 * Ritu-------------------------
	 */

	/**
	 * --------------------------------------------Start of Methods For By
	 * Mansi-------------------------
	 * 
	 */
	// ................................... Patient Allergic Drugs
	// ............................

	@SuppressWarnings("unchecked")
	public Map<String, Object> getItemList(Map<String, Object> map) {
		List<PatientAllergicDrugsHd> searchPatientAllergicDrugsHdList = new ArrayList<PatientAllergicDrugsHd>();
		List<PatientAllergicDrugsDt> searchPatientAllergicDrugsDtList = new ArrayList<PatientAllergicDrugsDt>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Session session = (Session) getSession();
		try {
			String str = "%" + map.get("autoHint") + "%";
			String query = "";
			int visitId = 0;

			if (map.get("visitId") != null) {
				visitId = (Integer) map.get("visitId");
			}

			searchPatientAllergicDrugsHdList = session.createCriteria(
					PatientAllergicDrugsHd.class).createAlias("Visit", "visit")
					.add(Restrictions.eq("visit.Id", visitId)).list();

			if (searchPatientAllergicDrugsHdList.size() > 0) {
				PatientAllergicDrugsHd patientAllergicDrugsHd = (PatientAllergicDrugsHd) searchPatientAllergicDrugsHdList
						.get(0);
				int id = patientAllergicDrugsHd.getId();
				searchPatientAllergicDrugsDtList = session.createCriteria(
						PatientAllergicDrugsDt.class).createAlias(
						"PatientAllergicDrugsHd", "patientAllergicDrugsHd")
						.add(Restrictions.eq("patientAllergicDrugsHd.Id", id))
						.list();
				if (searchPatientAllergicDrugsDtList.size() > 0) {
					query = "SELECT DISTINCT(sib.Nomenclature),sib.PvmsNo,sib.Id FROM MasStoreItem as sib where sib.Id NOT IN (select dt.Item.Id from PatientAllergicDrugsDt as dt) and sib.Department.Id='24' and sib.Nomenclature like '"
							+ str + "'";
				} else {
					query = "SELECT DISTINCT(sib.Nomenclature),sib.PvmsNo from MasStoreItem as sib where sib.Department.Id='24' and sib.Nomenclature like '"
							+ str + "'";
				}

			} else {
				query = "SELECT DISTINCT(sib.Nomenclature),sib.PvmsNo from MasStoreItem as sib where sib.Department.Id='24' and sib.Nomenclature like '"
						+ str + "'";
			}
			Query q = session.createQuery(query);
			q.setFirstResult(0);
			q.setMaxResults(10);
			itemList = q.list();
			Iterator itr = itemList.iterator();
			while (itr.hasNext()) {
				Object[] pair = (Object[]) itr.next();
				@SuppressWarnings("unused")
				String nomenclature = (String) pair[0];

			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> fillItemsInGrid(Map<String, Object> map) {

		Session session = (Session) getSession();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		try {
			String str = "" + map.get("pvmsNo");
			Criteria c = session.createCriteria(MasStoreItem.class).add(
					Restrictions.eq("PvmsNo", str));
			itemList = c.list();
			map.put("itemList", itemList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> addPatientAllergicDrugs(
			Map<String, Object> infoMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		PatientAllergicDrugsHd patientAllergicDrugshd = new PatientAllergicDrugsHd();
		List itemList = new ArrayList();
		int itemIdFromRequest = 0;
		int patientAllergicDrugshdId = 0;
		List specialInstructionList = new ArrayList();
		boolean success = false;
		int userId = 0;
		int visitId = 0;
		int hospitalId = 0;
		if (infoMap.get("patientAllergicDrugshd") != null) {
			patientAllergicDrugshd = (PatientAllergicDrugsHd) infoMap
					.get("patientAllergicDrugshd");
		}

		if (infoMap.get("userId") != null) {
			userId = (Integer) infoMap.get("userId");
		}
		if (infoMap.get("patientAllergicDrugshdId") != null) {

			itemIdFromRequest = (Integer) infoMap
					.get("patientAllergicDrugshdId");

		}
		if (infoMap.get("specialInstruction") != null) {
			specialInstructionList = (List) infoMap.get("specialInstruction");
		}
		if (infoMap.get("visitId") != null) {
			visitId = (Integer) infoMap.get("visitId");
		}
		if (infoMap.get("hospitalId") != null) {
			hospitalId = (Integer) infoMap.get("hospitalId");
		}
		String referredDept = (String) infoMap.get("referredDept").toString();

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");

		List<PatientAllergicDrugsHd> searchPatientAllergicDrugsHdList = new ArrayList<PatientAllergicDrugsHd>();
		searchPatientAllergicDrugsHdList = test(visitId);
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			if (searchPatientAllergicDrugsHdList.size() == 0) {

				if (infoMap.get("headerStored") != null) {
					if (!infoMap.get("headerStored").equals("yes")) {
						hbt.save(patientAllergicDrugshd);
						patientAllergicDrugshdId = patientAllergicDrugshd
								.getId();
						map.put("patientAllergicDrugshdId",
								patientAllergicDrugshdId);

					}
				}
			} else {
				int headerId = 0;
				for (PatientAllergicDrugsHd patientAllergicDrugsHd2 : searchPatientAllergicDrugsHdList) {
					headerId = patientAllergicDrugsHd2.getId();
					patientAllergicDrugshd.setId(headerId);
				}

			}

			if (infoMap.get("itemList") != null) {
				itemList = (List) infoMap.get("itemList");
				if (itemList.size() > 0) {
					for (int i = 0; i < itemList.size(); i++) {
						PatientAllergicDrugsDt patientAllergicDrugsdt = new PatientAllergicDrugsDt();
						MasStoreItem masStoreItem = new MasStoreItem();
						if (itemList.get(i) != null) {
							int itemId = Integer.parseInt("" + itemList.get(i));
							masStoreItem.setId(itemId);
							patientAllergicDrugsdt.setItem(masStoreItem);

							patientAllergicDrugsdt
									.setSpecialInstruction(specialInstructionList
											.get(i).toString());
							patientAllergicDrugsdt.setLastChgBy(userId);
							patientAllergicDrugsdt.setLastChgDate(HMSUtil
									.convertStringTypeDateToDateType(date));
							patientAllergicDrugsdt.setLastChgTime(time);
							patientAllergicDrugsdt.setStatus("y");
							if (infoMap.get("headerStored").equals("yes")) {

								PatientAllergicDrugsHd patientAllergicDrugsHd = new PatientAllergicDrugsHd();
								patientAllergicDrugsHd.setId(itemIdFromRequest);
								patientAllergicDrugsdt
										.setPatientAllergicDrugsHd(patientAllergicDrugsHd);

							} else {
								patientAllergicDrugsdt
										.setPatientAllergicDrugsHd(patientAllergicDrugshd);
							}
						}
						hbt.save(patientAllergicDrugsdt);

						Visit visitObjToUpdate = (Visit) hbt.load(Visit.class,
								visitId);
						visitObjToUpdate.setVisitStatus("w");
						hbt.update(visitObjToUpdate);

						OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

						opdPatientDetails.setReferredDept(referredDept);

						MasHospital masHospital = (MasHospital) hbt.load(
								MasHospital.class, hospitalId);
						opdPatientDetails.setHospital(masHospital);

						opdPatientDetails.setVisit(visitObjToUpdate);
						hbt.save(opdPatientDetails);

					}
				}
			}
			success = true;
			map.put("success", success);
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return map;

	}

	@SuppressWarnings("unchecked")
	private List<PatientAllergicDrugsHd> test(int visitId) {
		Session session = (Session) getSession();
		List<PatientAllergicDrugsHd> searchPatientAllergicDrugsHdList = new ArrayList<PatientAllergicDrugsHd>();
		try {
			searchPatientAllergicDrugsHdList = session.createCriteria(
					PatientAllergicDrugsHd.class).createAlias("Visit", "visit")
					.add(Restrictions.eq("visit.Id", visitId)).list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return searchPatientAllergicDrugsHdList;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getItem() {
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();

		Session session = (Session) getSession();
		try {
			List lst = new ArrayList();
			lst.add("LABORATORY");
			lst.add("RADIOLOGY");
			itemList = session.createCriteria(MasStoreItem.class).add(
					Restrictions.eq("Status", "y")).list();

			if (itemList.size() > 0) {
				detailsMap.put("itemList", itemList);
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return detailsMap;
	}
	//======================code by anamika============================
	
	@SuppressWarnings("unchecked")
	@Override
	public Map<String, Object> showAllergyDetailsJsp(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		patientDataList = session.createCriteria(Visit.class).add(Restrictions.eq("Id", box.getInt("visitId"))).list();
	
		List<AllergyDetail> allergyDetailsList = new ArrayList<AllergyDetail>();
		allergyDetailsList = session.createCriteria(AllergyDetail.class).createAlias("Hin", "hin").add(Restrictions.eq("hin.Id", box.getInt("hinId"))).list();
		
		List<MasAllergyType> allergyTypeList = new ArrayList<MasAllergyType>();
		allergyTypeList = session.createCriteria(MasAllergyType.class).add(Restrictions.eq("Status", "y")).list();
		
		map.put("allergyTypeList", allergyTypeList);
		map.put("allergyDetailsList", allergyDetailsList);
		map.put("patientDataList", patientDataList);
		return map;
	}
	@Override
	public Map<String, Object> getAllergyTypeListForAutoComplete(Map<String, Object> generalMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasAllergyType> allergyTypeList = new ArrayList<MasAllergyType>();
		Session session = (Session) getSession();
		try {
			String str =  generalMap.get("autoHint") + "%";
			String query = "from MasAllergyType  as mat where upper(AllergyTypeName) like upper('"
					+ str + "')";
			
			Query q = session.createQuery(query);
			q.setFirstResult(0);
			q.setMaxResults(10);
			allergyTypeList = q.list();
			
		} catch (Exception e) {

			e.printStackTrace();
		}
		map.put("allergyTypeList", allergyTypeList);
		return map;
	}


	@Override
	public Map<String, Object> getAllergyId(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasAllergyType> allergyTypeList = new ArrayList<MasAllergyType>();
		String allergyTypeCode =  box.getString("allergyTypeCode");
		Session session = (Session)getSession();
		allergyTypeList = session.createCriteria(MasAllergyType.class).add(Restrictions.eq("AllergyTypeCode", allergyTypeCode))
		  				.list();
		map.put("allergyTypeList", allergyTypeList);
		return map;
	}

	@SuppressWarnings("unchecked")
	@Override
	public Map<String, Object> saveAllergyDetails(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

		boolean flag = false;
		Transaction tx = null;
		Session session = (Session)getSession();
		try {
			tx = session.beginTransaction();
			int allergyCount = box.getInt("allergyCount");
		
			for (int j = 1; j <= allergyCount; j++) {
				int allergyDetailsId = box.getInt("allergyDetailsId"+j);
				if(allergyDetailsId==0 && !box.getString("allergyName"+j).equals("")){
					AllergyDetail allergyDetail = new AllergyDetail();
					
					//MasAllergyType masAllergyType = new MasAllergyType();
					
					//masAllergyType.setId(box.getInt("allergyId"+j));
					//allergyDetail.setAllergyType(masAllergyType);
					allergyDetail.setAllergyName(box.getString("allergyName"+j));
					allergyDetail.setDescription(box.getString("description"+j));
					allergyDetail.setRemarks(box.getString("remarks"+j));
					allergyDetail.setSeverity(box.getString("severity"+j));
					allergyDetail.setSince(box.getString("since"+j));
					Patient patient =  new Patient();
					patient.setId(box.getInt("hinId"));
					allergyDetail.setHin(patient);
				
					MasHospital masHospital = new MasHospital();
					masHospital.setId(box.getInt("hospitalId"));
					allergyDetail.setHospital(masHospital);
				
					allergyDetail.setStatus("y");
				
					Users user = new Users();
					user.setId(box.getInt("userId"));
					allergyDetail.setLastChgBy(user);
				
					MasEmployee medicalOfficer =new MasEmployee();
					medicalOfficer.setId(box.getInt("doctorId"));
					allergyDetail.setMedicalOfficer(medicalOfficer);		
				
					allergyDetail.setStatus("y");
					allergyDetail.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(box.getString(LAST_CHANGED_DATE)));
					allergyDetail.setLastChgTime(box.getString(LAST_CHANGED_TIME));
					hbt.save(allergyDetail);
					
				}
			}
			
			flag = true;
			tx.commit();
		} catch (DataAccessException e) {
			if(tx!= null){
				tx.rollback();
			}
			e.printStackTrace();
		}
		List<MasAllergyType> allergyTypeList = new ArrayList<MasAllergyType>();
		allergyTypeList = session.createCriteria(MasAllergyType.class).add(Restrictions.eq("Status", "y")).list();
		map.put("allergyTypeList", allergyTypeList);
		map.put("flag", flag);
		return map;
	}

	
	
	//==============================================

	@SuppressWarnings("unchecked")
	public Map<String, Object> getPatientAllergicDrugs(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<PatientAllergicDrugsHd> searchPatientAllergicDrugsHdList = new ArrayList<PatientAllergicDrugsHd>();
		List<PatientAllergicDrugsDt> searchPatientAllergicDrugsDtList = new ArrayList<PatientAllergicDrugsDt>();
		searchPatientAllergicDrugsHdList = session.createCriteria(
				PatientAllergicDrugsHd.class).createAlias("Visit", "visit")
				.add(Restrictions.eq("visit.Id", visitId)).list();
		if (searchPatientAllergicDrugsHdList.size() > 0) {
			PatientAllergicDrugsHd patientAllergicDrugsHd = (PatientAllergicDrugsHd) searchPatientAllergicDrugsHdList
					.get(0);
			int id = patientAllergicDrugsHd.getId();
			searchPatientAllergicDrugsDtList = session.createCriteria(
					PatientAllergicDrugsDt.class).createAlias(
					"PatientAllergicDrugsHd", "patientAllergicDrugsHd").add(
					Restrictions.eq("patientAllergicDrugsHd.Id", id)).list();
			map.put("searchPatientAllergicDrugsHdList",
					searchPatientAllergicDrugsHdList);
			map.put("searchPatientAllergicDrugsDtList",
					searchPatientAllergicDrugsDtList);
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();
		} else {
			try {
				patientDataList = session.createCriteria(Visit.class).add(
						Restrictions.eq("Id", visitId)).list();

			} catch (HibernateException e) {
				e.printStackTrace();
			}
		}
		map.put("patientDataList", patientDataList);

		return map;
	}

	// ................................... Patient
	// History............................

	@SuppressWarnings("unchecked")
	public Map<String, Object> getOpdTemplateDepartmentWise(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}

		map.put("patientDataList", patientDataList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getPatientHistory(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List<OpdPatientHistory> patientHistoryList = new ArrayList<OpdPatientHistory>();
		Map<String, Object> map = new HashMap<String, Object>();
		patientHistoryList = session.createCriteria(OpdPatientHistory.class)
				.add(Restrictions.eq("VisitInpatientId", visitId)).list();

		if (patientHistoryList.size() > 0) {
			map.put("patientHistoryList", patientHistoryList);
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();

		} else {
			try {
				patientDataList = session.createCriteria(Visit.class).add(
						Restrictions.eq("Id", visitId)).list();

			} catch (HibernateException e) {
				e.printStackTrace();
			}
		}
		map.put("patientDataList", patientDataList);
		return map;
	}

	public boolean addPatientHistory(Map<String, Object> infoMap) {
		OpdPatientHistory patientHistory = new OpdPatientHistory();
		boolean successfullyAdded = false;
		int visitId = 0;
		int hospitalId = 0;
		if (infoMap.get("patientHistory") != null) {
			patientHistory = (OpdPatientHistory) infoMap.get("patientHistory");
		}
		if (infoMap.get("visitId") != null) {
			visitId = (Integer) infoMap.get("visitId");
		}
		if (infoMap.get("hospitalId") != null) {
			hospitalId = (Integer) infoMap.get("hospitalId");
		}
		String referredDept = (String) infoMap.get("referredDept").toString();

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			hbt.save(patientHistory);

			Visit visitObjToUpdate = (Visit) hbt.load(Visit.class, visitId);
			visitObjToUpdate.setVisitStatus("w");
			hbt.update(visitObjToUpdate);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

			opdPatientDetails.setReferredDept(referredDept);

			MasHospital masHospital = (MasHospital) hbt.load(MasHospital.class,
					hospitalId);
			opdPatientDetails.setHospital(masHospital);

			opdPatientDetails.setVisit(visitObjToUpdate);
			hbt.save(opdPatientDetails);

			successfullyAdded = true;
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return successfullyAdded;

	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> viewPatientHistory(
			Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;
		int max = 0;
		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		List<OpdPatientHistory> patientHistoryList = new ArrayList<OpdPatientHistory>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {
			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}

			if (flag.equals("prev")) {

				visitNoForView = visitNo - 1;

			}

			else if (flag.equals("next")) {

				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}

			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0 && visitList != null) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				patientHistoryList = session.createCriteria(
						OpdPatientHistory.class).add(
						Restrictions.eq("VisitInpatientId", visitId)).list();
				map.put("patientHistoryList", patientHistoryList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	// ................................Pediatric Vaccination Plan
	// .............................

	@SuppressWarnings("unchecked")
	public Map<String, Object> getPediatricVaccinationPlanJsp(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List<OpdVaccinMst> opdVaccinMstList = new ArrayList<OpdVaccinMst>();
		List<OpdVaccinationPlan> opdVaccinationPlanList = new ArrayList<OpdVaccinationPlan>();
		Map<String, Object> map = new HashMap<String, Object>();

		try {
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();
			opdVaccinMstList = getHibernateTemplate()
					.find(
							"from jkt.hms.masters.business.OpdVaccinMst as mi where mi.Status = 'y'");
			opdVaccinationPlanList = session.createCriteria(
					OpdVaccinationPlan.class).createAlias("Visit", "visit")
					.add(Restrictions.eq("visit.Id", visitId)).list();
			if (opdVaccinationPlanList.size() > 0) {
				map.put("opdVaccinationPlanList", opdVaccinationPlanList);
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		map.put("opdVaccinMstList", opdVaccinMstList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> addPediatricVaccinationPlan(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		int hinId = 0;
		int visitId = 0;
		String vacinationType = "";
		String dob = "";
		int userId = 0;
		int departmentId = 0;
		int hospitalId = 0;
		try {

			visitId = box.getInt(VISIT_ID);
			hinId = box.getInt(HIN_ID);
			vacinationType = box.getString(VACCINE_TYPE);
			dob = box.getString(DATE_OF_BIRTH);
			userId = box.getInt("userId");
			departmentId = box.getInt("departmentId");
			hospitalId = box.getInt("hospitalId");
			String referredDept = (String) box.get("referredDept").toString();
			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");
			Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
			Patient patient = new Patient();
			patient.setId(hinId);

			Visit visit = new Visit();
			visit.setId(visitId);

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			Vector vanniceId = box.getVector(VACCINE_ID);
			Vector vaccinDate = box.getVector(VACCINE_DATE);
			Vector vaccinCompleteDate = box.getVector(COMPLETION_DATE);
			Vector remarks = box.getVector(REMARKS);

			for (int i = 0; i < vanniceId.size(); i++) {

				OpdVaccinationPlan vaccinationPlanObj = new OpdVaccinationPlan();
				if (vanniceId.get(i) != null && !vanniceId.get(i).equals("")) {
					OpdVaccinMst vaccin = new OpdVaccinMst();
					if (vanniceId.get(i) != null
							&& !vanniceId.get(i).equals("")) {
						vaccin.setId(Integer.parseInt(vanniceId.get(i)
								.toString()));
						vaccinationPlanObj.setVaccin(vaccin);
					}
					if (remarks.get(i) != null && !remarks.get(i).equals("")) {
						vaccinationPlanObj.setRemarks((String) remarks.get(i));
					}

					if (vaccinDate.get(i) != null
							&& !vaccinDate.get(i).equals("")) {
						vaccinationPlanObj
								.setVaccinDate(HMSUtil
										.convertStringTypeDateToDateType((String) vaccinDate
												.get(i)));
					}

					if (vaccinCompleteDate.get(i) != null
							&& !vaccinCompleteDate.get(i).equals("")) {
						vaccinationPlanObj
								.setVaccinCompleteDate(HMSUtil
										.convertStringTypeDateToDateType((String) vaccinCompleteDate
												.get(i)));
					}
					vaccinationPlanObj.setDepartment(masDepartment);
					vaccinationPlanObj.setHospital(masHospital);
					vaccinationPlanObj.setHin(patient);
					vaccinationPlanObj.setVisit(visit);
					vaccinationPlanObj.setDob(HMSUtil
							.convertStringTypeDateToDateType(dob));

					vaccinationPlanObj.setVacinationType(vacinationType);
					vaccinationPlanObj.setStatus("y");
					vaccinationPlanObj.setLastChgDate(date);
					vaccinationPlanObj.setLastChgTime(time);
					vaccinationPlanObj.setLastChgBy(userId);

					hbt.save(vaccinationPlanObj);

					Visit visitObjToUpdate = (Visit) hbt.load(Visit.class,
							visitId);
					visitObjToUpdate.setVisitStatus("C");
					hbt.update(visitObjToUpdate);

					OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

					opdPatientDetails.setReferredDept(referredDept);

					MasHospital masHospitalob = (MasHospital) hbt.load(
							MasHospital.class, hospitalId);
					opdPatientDetails.setHospital(masHospitalob);

					opdPatientDetails.setVisit(visitObjToUpdate);
					hbt.save(opdPatientDetails);

				}
			}

			saved = true;
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> updatePediatricVaccinationPlan(Box box) {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		int hinId = 0;
		int visitId = 0;
		String vacinationType = "";
		String dob = "";
		int userId = 0;
		int departmentId = 0;
		int hospitalId = 0;
		try {

			visitId = box.getInt(VISIT_ID);
			hinId = box.getInt(HIN_ID);
			vacinationType = box.getString(VACCINE_TYPE);
			dob = box.getString(DATE_OF_BIRTH);
			userId = box.getInt("userId");
			departmentId = box.getInt("departmentId");
			hospitalId = box.getInt("hospitalId");
			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");
			Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
			Patient patient = new Patient();
			patient.setId(hinId);

			Visit visit = new Visit();
			visit.setId(visitId);

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			Vector vacinationId = box.getVector(VACCINATION_ID);
			Vector vanniceId = box.getVector(VACCINE_ID);
			Vector vaccinDate = box.getVector(VACCINE_DATE);
			Vector vaccinCompleteDate = box.getVector(COMPLETION_DATE);
			Vector remarks = box.getVector(REMARKS);
			for (int i = 0; i < vacinationId.size(); i++) {

				OpdVaccinationPlan vaccinationPlanObj = new OpdVaccinationPlan();
				if (vacinationId.get(i) != null
						&& !vacinationId.get(i).equals("")) {
					int vId = Integer.parseInt(vacinationId.get(i).toString());
					vaccinationPlanObj = (OpdVaccinationPlan) getHibernateTemplate()
							.load(OpdVaccinationPlan.class, vId);
					if (vanniceId.get(i) != null
							&& !vanniceId.get(i).equals("")) {
						OpdVaccinMst vaccin = new OpdVaccinMst();
						if (vanniceId.get(i) != null
								&& !vanniceId.get(i).equals("")) {
							vaccin.setId(Integer.parseInt(vanniceId.get(i)
									.toString()));
							vaccinationPlanObj.setVaccin(vaccin);
						}
						if (remarks.get(i) != null
								&& !remarks.get(i).equals("")) {
							vaccinationPlanObj.setRemarks((String) remarks
									.get(i));
						}

						if (vaccinDate.get(i) != null
								&& !vaccinDate.get(i).equals("")) {
							vaccinationPlanObj
									.setVaccinDate(HMSUtil
											.convertStringTypeDateToDateType((String) vaccinDate
													.get(i)));
						}

						if (vaccinCompleteDate.get(i) != null
								&& !vaccinCompleteDate.get(i).equals("")) {
							vaccinationPlanObj
									.setVaccinCompleteDate(HMSUtil
											.convertStringTypeDateToDateType((String) vaccinCompleteDate
													.get(i)));
						}
						vaccinationPlanObj.setDepartment(masDepartment);
						vaccinationPlanObj.setHospital(masHospital);
						vaccinationPlanObj.setHin(patient);
						vaccinationPlanObj.setVisit(visit);
						vaccinationPlanObj.setDob(HMSUtil
								.convertStringTypeDateToDateType(dob));

						vaccinationPlanObj.setVacinationType(vacinationType);
						vaccinationPlanObj.setStatus("y");
						vaccinationPlanObj.setLastChgDate(date);
						vaccinationPlanObj.setLastChgTime(time);
						vaccinationPlanObj.setLastChgBy(userId);

						hbt.update(vaccinationPlanObj);
					}
				}
			}

			saved = true;
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;

	}

	// ................................... Pediatric Case Sheet
	// ............................

	@SuppressWarnings("unchecked")
	public Map<String, Object> getPediatricCaseSheet(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<OpdVaccinationPlan> opdVaccinationPlanList = new ArrayList<OpdVaccinationPlan>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<OpdCaseSheet> opdCaseSheetList = null;

		try {
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();
			opdVaccinationPlanList = session.createCriteria(
					OpdVaccinationPlan.class).createAlias("Visit", "visit")
					.add(Restrictions.eq("visit.Id", visitId)).list();
			if (opdVaccinationPlanList.size() > 0) {
				map.put("opdVaccinationPlanList", opdVaccinationPlanList);
			}
			employeeList = getHibernateTemplate()
					.find(
							"from jkt.hms.masters.business.MasEmployee as emp where emp.Status='y' and emp.EmpCategory.Id='1'");
			opdCaseSheetList = session.createCriteria(OpdCaseSheet.class).createAlias("Visit","v")
            					.add(Restrictions.eq("v.Id", visitId)).list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		map.put("employeeList", employeeList);
		map.put("opdCaseSheetList", opdCaseSheetList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> addPediatricCaseSheet(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		int hinId = 0;
		int visitId = 0;
		int opdCaseSheetId = 0;
		String dob = "";
		int userId = 0;
		int departmentId = 0;
		int hospitalId = 0;
		int referedBy = 0;
		Float heightInCmChild;
		Float heightInCmFather;
		Float heightInCmMother;
		String age = "";
		String clinicalNote = "";
		Float rdPercentile;
		String remarks = "";
		Float thPercentile;
		int ht = 0;
		int wt = 0;
		int hc = 0;
		Float bmi;
		Float ofc;
		Float rr;
		try {
			opdCaseSheetId=box.getInt("opdCaseSheetId");
			visitId = box.getInt(VISIT_ID);
			hinId = box.getInt(HIN_ID);
			dob = box.getString(DATE_OF_BIRTH);
			userId = box.getInt("userId");
			departmentId = box.getInt("departmentId");
			hospitalId = box.getInt("hospitalId");
			heightInCmChild = box.getFloat(HEIGHT_IN_CM_CHILD);
			heightInCmFather = box.getFloat(HEIGHT_IN_CM_FATHER);
			heightInCmMother = box.getFloat(HEIGHT_IN_CM_MOTHER);
			age = box.getString(AGE);
			clinicalNote = box.getString(CLINICAL_NOTE);
			rdPercentile = box.getFloat(RD_PERCENDTILE);
			referedBy = box.getInt(EMPLOYEE_ID);
			remarks = box.getString(REMARKS_TEMP);
			thPercentile = box.getFloat(TH_PERCENDTILE);
			wt = box.getInt("kgS");
			ht = box.getInt("htcS");
			hc = box.getInt(HIV);
			bmi = box.getFloat("bmiS");
			ofc = box.getFloat(OFC);
			rr = box.getFloat(RR);
			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");
			Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
			Patient patient = new Patient();
			patient.setId(hinId);

			Visit visit = new Visit();
			visit.setId(visitId);

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);

			MasEmployee masEmployee = new MasEmployee();
			masEmployee.setId(referedBy);

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			OpdCaseSheet caseSheetObj = new OpdCaseSheet();
			if(opdCaseSheetId!=0)
			caseSheetObj.setId(opdCaseSheetId);	
			caseSheetObj.setDepartment(masDepartment);
			caseSheetObj.setHin(patient);
			caseSheetObj.setVisit(visit);
			caseSheetObj.setHospital(masHospital);
			caseSheetObj.setHeightInCmChild(heightInCmChild);
			caseSheetObj.setHeightInCmFather(heightInCmFather);
			caseSheetObj.setHeightInCmMother(heightInCmMother);
			caseSheetObj.setAge(age);
			caseSheetObj.setClinicalNote(clinicalNote);
			caseSheetObj.setRdPercentile(rdPercentile);
			caseSheetObj.setRemarks(remarks);
			caseSheetObj.setThPercentile(thPercentile);
			caseSheetObj.setStatus("y");
			caseSheetObj.setLastChgDate(date);
			caseSheetObj.setLastChgTime(time);
			caseSheetObj.setLastChgBy(userId);

			if (dob != null && !dob.equals("")) {
				caseSheetObj.setDob(HMSUtil
						.convertStringTypeDateToDateType(dob));
			} else {
				caseSheetObj.setDob(null);
			}
			if (referedBy != 0) {
				caseSheetObj.setReferedBy(masEmployee);
			} else {
				caseSheetObj.setReferedBy(null);
			}
			caseSheetObj.setHc(hc);
			caseSheetObj.setBmi(bmi);
			caseSheetObj.setHt(ht);
			caseSheetObj.setWt(wt);

			caseSheetObj.setOfc(ofc);
			caseSheetObj.setRr(rr);

			hbt.saveOrUpdate(caseSheetObj);

			Visit visitObjToUpdate = (Visit) hbt.load(Visit.class, visitId);
			visitObjToUpdate.setVisitStatus("C");
			hbt.update(visitObjToUpdate);

			/*
			 * OpdPatientDetails opdPatientDetails = new OpdPatientDetails();
			 * 
			 * opdPatientDetails.setReferredDept(referredDept);
			 * 
			 * MasHospital masHospitalob =
			 * (MasHospital)hbt.load(MasHospital.class, hospitalId);
			 * opdPatientDetails.setHospital(masHospitalob);
			 * 
			 * opdPatientDetails.setVisit(visitObjToUpdate);
			 * hbt.save(opdPatientDetails);
			 */

			saved = true;
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> updatePediatricCaseSheet(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		int hinId = 0;
		int visitId = 0;
		int pediatricCaseSheetId = 0;
		String dob = "";
		int userId = 0;
		int departmentId = 0;
		int hospitalId = 0;
		int referedBy = 0;
		Float heightInCmChild;
		Float heightInCmFather;
		Float heightInCmMother;
		String age = "";
		String clinicalNote = "";
		Float rdPercentile;
		String remarks = "";
		Float thPercentile;
		int ht = 0;
		int wt = 0;
		int hc = 0;
		Float bmi;
		Float ofc;
		Float rr;
		try {
			visitId = box.getInt(VISIT_ID);
			pediatricCaseSheetId = box.getInt(PEDIATRIC_CASE_SHEET_ID);
			hinId = box.getInt(HIN_ID);
			dob = box.getString(DATE_OF_BIRTH);
			userId = box.getInt("userId");
			departmentId = box.getInt("departmentId");
			hospitalId = box.getInt("hospitalId");
			heightInCmChild = box.getFloat(HEIGHT_IN_CM_CHILD);
			heightInCmFather = box.getFloat(HEIGHT_IN_CM_FATHER);
			heightInCmMother = box.getFloat(HEIGHT_IN_CM_MOTHER);
			age = box.getString(AGE);
			clinicalNote = box.getString(CLINICAL_NOTE);
			rdPercentile = box.getFloat(RD_PERCENDTILE);
			referedBy = box.getInt(EMPLOYEE_ID);
			remarks = box.getString(REMARKS_TEMP);
			thPercentile = box.getFloat(TH_PERCENDTILE);
			wt = box.getInt(WEIGHT);
			ht = box.getInt(HEIGHT);
			hc = box.getInt(HIV);
			bmi = box.getFloat("bmiS");
			ofc = box.getFloat(OFC);
			rr = box.getFloat(RR);
			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");
			Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
			Patient patient = new Patient();
			patient.setId(hinId);

			Visit visit = new Visit();
			visit.setId(visitId);

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);

			MasEmployee masEmployee = new MasEmployee();
			masEmployee.setId(referedBy);

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			OpdCaseSheet caseSheetObj = (OpdCaseSheet) hbt.load(
					OpdCaseSheet.class, pediatricCaseSheetId);
			caseSheetObj.setDepartment(masDepartment);
			caseSheetObj.setHin(patient);
			caseSheetObj.setVisit(visit);
			caseSheetObj.setHospital(masHospital);
			caseSheetObj.setHeightInCmChild(heightInCmChild);
			caseSheetObj.setHeightInCmFather(heightInCmFather);
			caseSheetObj.setHeightInCmMother(heightInCmMother);
			caseSheetObj.setAge(age);
			caseSheetObj.setClinicalNote(clinicalNote);
			caseSheetObj.setRdPercentile(rdPercentile);
			caseSheetObj.setRemarks(remarks);
			caseSheetObj.setThPercentile(thPercentile);
			caseSheetObj.setStatus("y");
			caseSheetObj.setLastChgDate(date);
			caseSheetObj.setLastChgTime(time);
			caseSheetObj.setLastChgBy(userId);

			if (dob != null && !dob.equals("")) {
				caseSheetObj.setDob(HMSUtil
						.convertStringTypeDateToDateType(dob));
			} else {
				caseSheetObj.setDob(null);
			}
			if (referedBy != 0) {
				caseSheetObj.setReferedBy(masEmployee);
			} else {
				caseSheetObj.setReferedBy(null);
			}
			caseSheetObj.setHc(hc);
			caseSheetObj.setBmi(bmi);
			caseSheetObj.setHt(ht);
			caseSheetObj.setWt(wt);

			caseSheetObj.setOfc(ofc);
			caseSheetObj.setRr(rr);

			hbt.update(caseSheetObj);
			hbt.refresh(caseSheetObj);
			Visit visitObjToUpdate = (Visit) hbt.load(Visit.class, visitId);
			visitObjToUpdate.setVisitStatus("C");
			hbt.update(visitObjToUpdate);

			/*
			 * OpdPatientDetails opdPatientDetails = new OpdPatientDetails();
			 * 
			 * opdPatientDetails.setReferredDept(referredDept);
			 * 
			 * MasHospital masHospitalob =
			 * (MasHospital)hbt.load(MasHospital.class, hospitalId);
			 * opdPatientDetails.setHospital(masHospitalob);
			 * 
			 * opdPatientDetails.setVisit(visitObjToUpdate);
			 * hbt.save(opdPatientDetails);
			 */

			saved = true;
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> searchPediatricForUpdate(int visitId) {

		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<OpdCaseSheet> opdCaseSheetList = new ArrayList<OpdCaseSheet>();
		List<OpdVaccinationPlan> opdVaccinationPlanList = new ArrayList<OpdVaccinationPlan>();
		Map<String, Object> map = new HashMap<String, Object>();

		try {
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();

			opdCaseSheetList = session.createCriteria(OpdCaseSheet.class).add(
					Restrictions.eq("Visit.Id", visitId)).list();
			employeeList = getHibernateTemplate()
					.find(
							"from jkt.hms.masters.business.MasEmployee as emp where emp.Status='y' and emp.EmpCategory.Id='1'");

			opdVaccinationPlanList = session.createCriteria(
					OpdVaccinationPlan.class).createAlias("Visit", "visit")
					.add(Restrictions.eq("visit.Id", visitId)).list();
			if (opdVaccinationPlanList.size() > 0) {
				map.put("opdVaccinationPlanList", opdVaccinationPlanList);
			}

			
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("employeeList", employeeList);
		map.put("patientDataList", patientDataList);
		map.put("opdCaseSheetList", opdCaseSheetList);

		return map;
	}
	@SuppressWarnings("unchecked")
	public Map<String, Object> searchOPHTForUpdateJsp(int visitId) {

		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List<OpdOphthalmology> opdophList = new ArrayList<OpdOphthalmology>();

		Map<String, Object> map = new HashMap<String, Object>();

		try {
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();

			opdophList = session.createCriteria(OpdOphthalmology.class).add(
					Restrictions.eq("Visit.Id", visitId)).list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		map.put("opdophList", opdophList);

		return map;
	}


	@SuppressWarnings("unchecked")
	public Map<String, Object> viewPediatricCaseSheet(
			Map<String, Object> parameterMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdCaseSheet> opdCaseSheetList = new ArrayList<OpdCaseSheet>();
		List<OpdVaccinationPlan> opdVaccinationPlanList = new ArrayList<OpdVaccinationPlan>();
		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();

		try {

			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}
			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				opdCaseSheetList = session.createCriteria(OpdCaseSheet.class)
						.createAlias("Visit", "visit").add(
								Restrictions.eq("visit.Id", visitId)).list();
				opdVaccinationPlanList = session.createCriteria(
						OpdVaccinationPlan.class).createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", visitId)).list();
				if (opdVaccinationPlanList.size() > 0) {
					map.put("opdVaccinationPlanList", opdVaccinationPlanList);
				}

				map.put("opdCaseSheetList", opdCaseSheetList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	// ................................... OBG .............................

	@SuppressWarnings("unchecked")
	public Map<String, Object> showOBGJsp(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List<OpdObg> opdObgList = new ArrayList<OpdObg>();
		List<MasOccupation> masOccupationList = new ArrayList<MasOccupation>();
		List<MasReligion> masReligionList = new ArrayList<MasReligion>();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();

			opdObgList = session.createCriteria(OpdObg.class).createAlias(
					"Visit", "visit").add(Restrictions.eq("visit.Id", visitId))
					.list();
			if (opdObgList.size() > 0) {
				map.put("opdObgList", opdObgList);
			}
			masOccupationList = getHibernateTemplate()
					.find(
							"from jkt.hms.masters.business.MasOccupation as mm where mm.Status = 'y'");
			masReligionList = getHibernateTemplate()
					.find(
							"from jkt.hms.masters.business.MasReligion as mm where mm.Status = 'y'");
			if (masOccupationList.size() > 0) {
				map.put("masOccupationList", masOccupationList);
			}
			if (masReligionList.size() > 0) {
				map.put("masReligionList", masReligionList);
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> addOBGOne(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;

		// Part One
		int hinId = 0;
		int visitId = 0;
		int userId = 0;
		int departmentId = 0;
		int hospitalId = 0;
		String educationHusband = "";
		String educationWife = "";
		int occpationHusband = 0;
		int occpationWife = 0;
		int religionHusband = 0;
		int religionWife = 0;
		String accommodationType = "";
		String privacy = "";
		String infertilityPrimaryYrs = "";
		String infertilitySecondaryYrs = "";

		String hypomenorroheaYrs = "";
		String hypomenorrohea = "";
		String oligomenorrhoeaYrs = "";
		String oligomenorrhoea = "";
		String galactorrhoeaYrs = "";
		String galactorrhoea = "";
		String hirsutismYrs = "";
		String leucorrhoea = "";
		String backaches = "";
		String pruritisValue = "";

		String dysmenorrhoea = "";
		String menarcheYrs = "";
		String pastMC = "";
		String presentMC = "";
		String lmp = "";
		String pmpOne = "";

		String pmpTwo = "";
		String diagnosticScopy = "";
		String tubalSurgery = "";
		String exploratoryLap = "";
		String operativeScopy = "";

		// Part Two
		String diabetesPersonal = "";
		String diabetesFamily = "";
		String hypertensionPersonal = "";
		String hypertensionFamily = "";
		String tuberculosisPersonal = "";
		String tuberculosisFamily = "";
		String pulmonaryPersonal = "";
		String pulmonaryFamily = "";
		String abdominalPersonal = "";
		String abdominalFamily = "";
		String thyroidPersonal = "";
		String thyroidFamily = "";
		String othersPersonal = "";
		String othersFamily = "";
		String normalDelivery = "";
		String ectopic = "";
		String prematureDelivery = "";
		int abortion = 0;
		String dyspareunia = "";
		String awareness = "";
		String tryingToConceiveFor = "";
		String frequencyOfIC = "";
		int generalApperanceHeight = 0;
		int generalApperanceWidth = 0;
		String secondarySexualCharacters = "";
		String neckLymphGlands = "";
		String thyroid = "";
		String cvs = "";
		String bp = "";
		String rs = "";
		String cns = "";
		int pulse = 0;

		// Part Three
		String hairDistribution = "";
		String breastDevelopment = "";
		String galaactorrhoeaEndoriceStatus = "";
		String obesity = "";
		String pigmentationAbodominalStriae = "";
		String acne = "";
		String othersEndoriceStatus = "";
		String psClitoris = "";
		String psMajopra = "";
		String psMinora = "";
		String pvClitoris = "";
		String pvMajopra = "";
		String pvMinora = "";
		String hemoglobin = "";
		String pelvisEndosocopyUterus = "";
		String bloodGroupHusband = "";
		String bloodGroupWife = "";
		String bloodSugarHusband = "";
		String bloodSugarWife = "";
		String vdrlHusband = "";
		String vdrlWife = "";
		String urineAnalysis = "";
		String hivHusband = "";
		String hivWife = "";
		String HbsAgHusband = "";
		String HbsAgWife = "";

		// part Four

		String secretory = "";
		String dating = "";
		String proliferative = "";
		int dayOfCycle = 0;
		String dateobg = "";
		String overiesLeftEndosocopy = "";
		String tubesLeftEndosocopy = "";
		String overiesRightEndoscopy = "";
		String tubesRightEndosocopy = "";
		String pelvisEndosocopy = "";
		String uterusHysterosaliagography = "";
		String cornualOpening = "";
		String endometrical = "";
		String tubesLeft = "";
		String tubesRight = "";
		String uterus = "";
		String dhesWife = "";
		String dhesHusband = "";
		String tThreeWife = "";
		String tFourHusband = "";
		String tThreeHusband = "";
		String tFourWife = "";
		String TSHHusband = "";
		String TSHWife = "";
		String sProlactinWife = "";
		String sProlactinHusband = "";
		String FSHWife = "";
		String FSHHusband = "";
		String LHWife = "";
		String LHHusband = "";
		String sTestosteroneWife = "";
		String sTestosteroneHusband = "";
		String tlc = "";
		String dlc = "";
		String esr = "";
		String specification = "";
		String referredDept = (String) box.get("referredDept").toString();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {

			visitId = box.getInt("visitId");
			hinId = box.getInt("hinId");
			accommodationType = box.getString(ACCOMMODATION_TYPE);
			educationHusband = box.getString(EDUCATION_HUSBAND);
			educationWife = box.getString(EDUCATION_WIFE);
			privacy = box.getString(PRIVACY);
			infertilityPrimaryYrs = box.getString(INFERTILITY_PRIMARY_YRS);
			infertilitySecondaryYrs = box.getString(INFERTILITY_SECONDARY_YRS);
			hypomenorroheaYrs = box.getString(HYPOMENRROHEA_YRS);
			hypomenorrohea = box.getString(HYPOMENRROHEA);
			oligomenorrhoeaYrs = box.getString(OLIGOMEORRHOEA_YRS);
			oligomenorrhoea = box.getString(OLIGOMEORRHOEA);
			galactorrhoeaYrs = box.getString(GALACTORRHOEA_YRS);
			galactorrhoea = box.getString(GALACTORRHOEA);
			hirsutismYrs = box.getString(HIRSUTISM_YRS);
			leucorrhoea = box.getString(LEUCORRHOEA);
			backaches = box.getString(BACKACHES);
			pruritisValue = box.getString(PRURITIS_VALUE);
			dysmenorrhoea = box.getString(DYSMENORRHOEA);
			menarcheYrs = box.getString(MENARCHE_YRS);
			pastMC = box.getString(PAST_MC);
			presentMC = box.getString(PRESENT_MC);
			lmp = box.getString(LMP);
			pmpOne = box.getString(PMP_ONE);
			pmpTwo = box.getString(PMP_TWO);
			diagnosticScopy = box.getString(DIAGNOSTIC_SCOPY);
			tubalSurgery = box.getString(TUBAL_SURFERY);
			exploratoryLap = box.getString(EXPLORATORY_LAP);
			operativeScopy = box.getString(OPERATIVE_SCOPY);
			diabetesPersonal = box.getString(DIABETES_PERSONAL);
			diabetesFamily = box.getString(DIABETES_FAMILY);
			hypertensionPersonal = box.getString(HYPERTENSION_PERSONAL);
			;
			hypertensionFamily = box.getString(HYPERTENSION_FAMILY);
			tuberculosisPersonal = box.getString(TUBERCULOSIS_PERSONAL);
			tuberculosisFamily = box.getString(TUBERCULOSIS_FAMILY);
			pulmonaryPersonal = box.getString(PULMONARY_PERSONAL);
			pulmonaryFamily = box.getString(PULMONARY_FAMILY);
			abdominalPersonal = box.getString(ABDOMINAL_PERSONAL);
			abdominalFamily = box.getString(ABDOMINAL_FAMILY);
			thyroidPersonal = box.getString(THYROID_PERSONAL);
			thyroidFamily = box.getString(THYROID_FAMILY);
			othersPersonal = box.getString(OTHERS_PERSONAL);
			othersFamily = box.getString(OTHERS_FAMILY);
			normalDelivery = box.getString(NORMAL_DELIVERY);
			ectopic = box.getString(ECTOPIC);
			prematureDelivery = box.getString(prematureDelivery);
			abortion = box.getInt(ABORTION);
			dyspareunia = box.getString(DYSPAREUNIA);
			awareness = box.getString(AWARENESS);
			tryingToConceiveFor = box.getString(TRYING_TO_CONCERIVE_FOR);
			frequencyOfIC = box.getString(FREQUENCY_OF_IC);
			generalApperanceHeight = box.getInt(GENERNAL_APPERANCE_HEIGHT);
			generalApperanceWidth = box.getInt(GENERNAL_APPERANCE_WIDTH);
			secondarySexualCharacters = box
					.getString(SECONDARY_SEXUAL_CHARACTERS);
			neckLymphGlands = box.getString(NECK_LYMPH_GLANDS);
			thyroid = box.getString(THYROID);
			cvs = box.getString(CVS);
			bp = box.getString(B_P);
			rs = box.getString(RS);
			cns = box.getString(CNS);
			pulse = box.getInt(PULSE);

			// Part Three
			hairDistribution = box.getString(HAIR_DISTRIBUTION);
			breastDevelopment = box.getString(BREAST_DEDVELOPMENT);
			galaactorrhoeaEndoriceStatus = box
					.getString(GALACTORRHOEA_ENDORICE_STATUS);
			obesity = box.getString(OBESITY);
			pigmentationAbodominalStriae = box
					.getString(PIGMENTATION_ABODOMINAL_STRIAE);
			acne = box.getString(ACNE);
			othersEndoriceStatus = box.getString(OTHERS_ENDORICE_STATUS);
			psClitoris = box.getString(P_S_CLITORIS);
			psMajopra = box.getString(P_S_MAJOPRA);
			psMinora = box.getString(P_S_MINORA);
			pvClitoris = box.getString(P_V_CLITORIS);
			pvMajopra = box.getString(P_V_MAJOPRA);
			pvMinora = box.getString(P_V_MINORA);
			hemoglobin = box.getString(HEMOGLOBIN);
			pelvisEndosocopyUterus = box.getString(PELVIS_ENDOSCOPY_UTERUS);
			bloodGroupHusband = box.getString(BLOOD_GROUP_HUSBAND);
			bloodGroupWife = box.getString(BLOOD_GROUP_WIFE);
			bloodSugarHusband = box.getString(BLOOD_SUGAR_HUSBAND);
			bloodSugarWife = box.getString(BLOOD_SUGAR_WIFE);
			vdrlHusband = box.getString(VDRL_HUSBAND);
			vdrlWife = box.getString(VDRL_WIFE);
			urineAnalysis = box.getString(URINE_ANALYSIS);
			specification = box.getString(SPECIFICATION);
			hivHusband = box.getString(HIV_HUSBAND);
			hivWife = box.getString(HIV_WIFE);
			HbsAgHusband = box.getString(HBSAG_HUSBAND);
			HbsAgWife = box.getString(HBSAG_WIFE);

			// part Four

			secretory = box.getString(SECRETORY);
			dating = box.getString(DATING);
			proliferative = box.getString(PROLIFERATIVE);
			dayOfCycle = box.getInt(DAYS_OF_CYCLE);
			dateobg = box.getString(DATE_OBG);
			overiesLeftEndosocopy = box.getString(OVERIES_LEFT_ENDOSCOPY);
			tubesLeftEndosocopy = box.getString(TUBES_LEFT_ENDOSCOPY);
			overiesRightEndoscopy = box.getString(OVERIES_RIGHT_ENDOSCOPY);
			tubesRightEndosocopy = box.getString(TUBES_RIGHT_ENDOSCOPY);
			pelvisEndosocopy = box.getString(PELVIS_ENDOSCOPY);
			uterusHysterosaliagography = box
					.getString(UTERUS_HYSTEROSALIAGOGRAPHY);
			cornualOpening = box.getString(CORNUAL_OPENING);
			endometrical = box.getString(ENDOMETRICAL);
			tubesLeft = box.getString(TUBES_LEFT);
			tubesRight = box.getString(TUBES_RIGHT);
			uterus = box.getString(UTERUS);
			dhesWife = box.getString(DHES_WIFE);
			dhesHusband = box.getString(DHES_HUSBAND);
			tThreeWife = box.getString(T_THREE_WIFE);
			tFourHusband = box.getString(T_FOUR_HUSBAND);
			tThreeHusband = box.getString(T_THREE_HUSBAND);
			tFourWife = box.getString(T_FOUR_WIFE);
			TSHHusband = box.getString(TSH_HUSBAND);
			TSHWife = box.getString(TSH_WIFE);
			sProlactinWife = box.getString(S_PROLACTIN_WIFE);
			sProlactinHusband = box.getString(S_PROLACTIN_WIFE);
			FSHWife = box.getString(FSHWife);
			FSHHusband = box.getString(FSH_HUSBAND);
			LHWife = box.getString(LH_WIFE);
			LHHusband = box.getString(LH_HUSBAND);
			sTestosteroneWife = box.getString(S_TESTOSTERONE_WIFE);
			sTestosteroneHusband = box.getString(S_TESTOSTERONE_HUSBAND);
			tlc = box.getString(TLC);
			dlc = box.getString(DLC);
			esr = box.getString(ESR);
			userId = box.getInt("userId");
			departmentId = box.getInt("departmentId");
			hospitalId = box.getInt("hospitalId");

			occpationHusband = box.getInt(OCCUPATION_HUSBAND);
			occpationWife = box.getInt(OCCUPATION_WIFE);
			religionHusband = box.getInt(RELIGION_HUSBAND);
			religionWife = box.getInt(RELIGION_WIFE);

			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");
			Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
			Patient patient = new Patient();
			patient.setId(hinId);

			Visit visit = new Visit();
			visit.setId(visitId);
           
			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);

			MasOccupation masOccupationHusband = new MasOccupation();
			masOccupationHusband.setId(occpationHusband);

			MasOccupation masOccupationWife = new MasOccupation();
			masOccupationWife.setId(occpationWife);

			MasReligion masReligionHusband = new MasReligion();
			masReligionHusband.setId(religionHusband);

			MasReligion masReligionWife = new MasReligion();
			masReligionWife.setId(religionWife);

			OpdObg opdObg = new OpdObg();
			// part 1

			if (box.getInt("departmentId") != 0) {
				opdObg.setDepartment(masDepartment);
			}
			if (box.getInt(HIN_ID) != 0) {
				opdObg.setHin(patient);
			}
			if (box.getInt(VISIT_ID) != 0) {
				opdObg.setVisit(visit);
			}

			if (box.getInt(OCCUPATION_HUSBAND) != 0) {
				opdObg.setOccupationHusband(masOccupationHusband);
			}
			if (box.getInt(OCCUPATION_WIFE) != 0) {
				opdObg.setOccupationWife(masOccupationWife);
			}
			if (box.getInt(RELIGION_HUSBAND) != 0) {
				opdObg.setReligionHusband(masReligionHusband);
			}
			if (box.getInt(RELIGION_WIFE) != 0) {
				opdObg.setReligionWife(masReligionWife);

			}
			if (box.getInt(HOSPITAL_ID) != 0) {
				opdObg.setHospital(masHospital);
			}

			opdObg.setEducationHusband(educationHusband);
			opdObg.setEducationWife(educationWife);
			opdObg.setTypeOfAccommodation(accommodationType);
			opdObg.setInfertilityPrimaryYrs(infertilityPrimaryYrs);
			opdObg.setInfertilitySecondaryYrs(infertilitySecondaryYrs);
			opdObg.setHypomenorroheaYrs(hypomenorroheaYrs);
			opdObg.setHypomenorrohea(hypomenorrohea);
			opdObg.setOligomenorrhoea(oligomenorrhoea);
			opdObg.setOligomenorrhoeaYrs(oligomenorrhoeaYrs);
			opdObg.setPrivacy(privacy);
			opdObg.setGalactorrhoea(galactorrhoea);
			opdObg.setGalactorrhoeaYrs(galactorrhoeaYrs);
			opdObg.setHirsutismYrs(hirsutismYrs);
			opdObg.setLeucorrhoea(leucorrhoea);
			opdObg.setBackaches(backaches);
			opdObg.setPruritisValue(pruritisValue);
			opdObg.setDysmenorrhoea(dysmenorrhoea);
			opdObg.setMenarcheYrs(menarcheYrs);
			opdObg.setPastMc(pastMC);
			opdObg.setPresentMc(presentMC);
			opdObg.setLmp(lmp);
			opdObg.setPmpOne(pmpOne);
			opdObg.setPmpTwo(pmpTwo);
			opdObg.setDiagnosticScopy(diagnosticScopy);
			opdObg.setTubalSurgery(tubalSurgery);
			opdObg.setExploratoryLaparotomy(exploratoryLap);
			opdObg.setOperativeScopy(operativeScopy);
			opdObg.setStatus("y");
			opdObg.setLastChgDate(date);
			opdObg.setLastChgTime(time);
			opdObg.setLastChgBy(userId);
			// part 2
			opdObg.setDiabetesPersonal(diabetesPersonal);
			opdObg.setDiabetesFamily(diabetesFamily);
			opdObg.setHypertensionPersonal(hypertensionPersonal);
			opdObg.setHypertensionFamily(hypertensionFamily);
			opdObg.setTuberculosisPersonal(tuberculosisPersonal);
			opdObg.setTuberculosisFamily(tuberculosisFamily);
			opdObg.setPulmonaryFamily(pulmonaryFamily);
			opdObg.setPulmonaryPersonal(pulmonaryPersonal);
			opdObg.setAbdominalFamily(abdominalFamily);
			opdObg.setAbdominalPersonal(abdominalPersonal);
			opdObg.setThyroidFamily(thyroidFamily);
			opdObg.setThyroidPersonal(thyroidPersonal);
			opdObg.setOthersFamily(othersFamily);
			opdObg.setOthersPersonal(othersPersonal);
			opdObg.setNormalDelivery(normalDelivery);
			opdObg.setPrematureDeliveryBabyAlive(prematureDelivery);
			opdObg.setEctopic(ectopic);
			opdObg.setAAbortion(abortion);
			opdObg.setDyspareunia(dyspareunia);
			opdObg.setAwarenessOfFertilePeriod(awareness);
			opdObg.setTryingToConceiveFor(tryingToConceiveFor);
			opdObg.setFrequencyOfIc(frequencyOfIC);
			opdObg.setGeneralAppearanceHeight(generalApperanceHeight);
			opdObg.setGeneralAppearanceWeight(generalApperanceWidth);
			opdObg.setSecondarySexualCharacters(secondarySexualCharacters);
			opdObg.setNeckLymphGlands(neckLymphGlands);
			opdObg.setThyroid(thyroid);
			opdObg.setCVS(cvs);
			opdObg.setBP(bp);
			opdObg.setPulse(pulse);
			opdObg.setRs(rs);
			opdObg.setCns(cns);

			// part 3
			opdObg.setHairDistribution(hairDistribution);
			opdObg.setBreastDevelopment(breastDevelopment);
			opdObg.setObesity(obesity);
			opdObg.setPigmentationAbdominalStriae(pigmentationAbodominalStriae);
			opdObg.setAcne(acne);
			opdObg.setOthers(othersEndoriceStatus);
			opdObg.setPSClitoris(psClitoris);
			opdObg.setPSLabiaMajopra(psMajopra);
			opdObg.setPSLabiaMinora(psMinora);
			opdObg.setPVClitoris(pvClitoris);
			opdObg.setPVLabiaMajopra(pvMajopra);
			opdObg.setPVLabiaMinora(pvMinora);
			opdObg.setHemoglobin(hemoglobin);
			opdObg.setTlc(tlc);
			opdObg.setDlc(dlc);
			opdObg.setEsr(esr);
			opdObg.setBloodGroupHusband(bloodGroupHusband);
			opdObg.setBloodGroupWife(bloodGroupWife);
			opdObg.setBloodSugarHusband(bloodSugarHusband);
			opdObg.setBloodSugarWife(bloodSugarWife);
			opdObg.setVdrlHusband(vdrlHusband);
			opdObg.setVdrlWife(vdrlWife);
			opdObg.setUrineAnalysis(urineAnalysis);
			opdObg.setSpecification(specification);
			opdObg.setHivHusband(hivHusband);
			opdObg.setHivWife(hivWife);
			opdObg.setHbsagHusband(HbsAgHusband);
			opdObg.setHbsagWife(HbsAgWife);

			// ---- part four
			opdObg.setTFourHusband(tFourHusband);
			opdObg.setTFourWife(tFourWife);
			opdObg.setTThreeHusband(tThreeHusband);
			opdObg.setTThreeWife(tThreeWife);
			opdObg.setTshHusband(TSHHusband);
			opdObg.setTshWife(TSHWife);
			opdObg.setSProlactinHusband(sProlactinHusband);
			opdObg.setSProlactinWife(sProlactinWife);
			opdObg.setDhesHusband(dhesHusband);
			opdObg.setDhesWife(dhesWife);
			opdObg.setTubesL(tubesLeftEndosocopy);
			opdObg.setTubesR(tubesRightEndosocopy);
			opdObg.setTubesLeft(tubesLeft);
			opdObg.setTubesRight(tubesRight);
			opdObg.setOvariesL(overiesLeftEndosocopy);
			opdObg.setOvariesR(overiesRightEndoscopy);
			opdObg.setUterus(uterus);
			opdObg.setUterusHysterosaliagography(uterusHysterosaliagography);
			opdObg.setEndometricalCavity(endometrical);
			opdObg.setCornualOpenings(cornualOpening);
			opdObg.setDating(dating);
			opdObg.setDaysOfCycle(dayOfCycle);
			opdObg.setSecretory(secretory);
			opdObg.setProliferative(proliferative);

			opdObg.setFshHusband(FSHHusband);
			opdObg.setFshWife(FSHWife);

			opdObg.setLhHusband(LHHusband);
			opdObg.setLhWife(LHWife);

			opdObg.setSTestosteroneHusband(sTestosteroneHusband);
			opdObg.setSTestosteroneWife(sTestosteroneWife);

			if (!box.getString(DATE_OBG).equals("")) {
				opdObg.setObgDate(HMSUtil.convertStringTypeDateToDateType(box
						.getString(DATE_OBG)));
			}

			opdObg.setPelvisEndosocopy(pelvisEndosocopy);
			opdObg.setPelvisEndosocopyUterus(pelvisEndosocopyUterus);

			opdObg
					.setEndocrineStatusGalactorrhoea(galaactorrhoeaEndoriceStatus);
			opdObg.setStatus("y");
			opdObg.setLastChgDate(date);
			opdObg.setLastChgTime(time);
			opdObg.setLastChgBy(userId);
			hbt.save(opdObg);
			saved = true;
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		try {
			Visit visitStatus = (Visit) getHibernateTemplate().load(
					Visit.class, visitId);
			visitStatus.setVisitStatus("C");
			hbt.update(visitStatus);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

			opdPatientDetails.setReferredDept(referredDept);

			MasHospital masHospitalob = (MasHospital) hbt.load(
					MasHospital.class, hospitalId);
			opdPatientDetails.setHospital(masHospitalob);

			opdPatientDetails.setVisit(visitStatus);
			hbt.save(opdPatientDetails);

			saved = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;
	}

	public Map<String, Object> updateOBG(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		int hinId = 0;
		int visitId = 0;
		int userId = 0;
		int departmentId = 0;
		int occpationHusband = 0;
		int occpationWife = 0;
		int religionHusband = 0;
		int religionWife = 0;
		int hospitalId = 0;
		int obgId = 0;
		visitId = box.getInt(VISIT_ID);
		hinId = box.getInt(HIN_ID);
		obgId = box.getInt(OBG_ID);
		userId = box.getInt("userId");
		departmentId = box.getInt("departmentId");
		occpationHusband = box.getInt(OCCUPATION_HUSBAND);
		occpationWife = box.getInt(OCCUPATION_WIFE);
		religionHusband = box.getInt(RELIGION_HUSBAND);
		religionWife = box.getInt(RELIGION_WIFE);

		hospitalId = box.getInt("hospitalId");

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
		Patient patient = new Patient();
		patient.setId(hinId);

		Visit visit = new Visit();
		visit.setId(visitId);

		MasHospital masHospital = new MasHospital();
		masHospital.setId(hospitalId);

		MasOccupation masOccupationHusband = new MasOccupation();
		masOccupationHusband.setId(occpationHusband);

		MasOccupation masOccupationWife = new MasOccupation();
		masOccupationWife.setId(occpationWife);

		MasReligion masReligionHusband = new MasReligion();
		masReligionHusband.setId(religionHusband);

		MasReligion masReligionWife = new MasReligion();
		masReligionWife.setId(religionWife);

		OpdObg opdObg = (OpdObg) getHibernateTemplate()
				.get(OpdObg.class, obgId);
		if (box.getInt(OBG_ID) != 0) {
			opdObg.setId(box.getInt(OBG_ID));
		}
		if (box.getInt("departmentId") != 0) {
			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);
			opdObg.setDepartment(masDepartment);
		}
		if (box.getInt(HIN_ID) != 0) {
			opdObg.setHin(patient);
		}
		if (box.getInt(VISIT_ID) != 0) {
			opdObg.setVisit(visit);
		}

		if (box.getInt(OCCUPATION_HUSBAND) != 0) {
			opdObg.setOccupationHusband(masOccupationHusband);
		}
		if (box.getInt(OCCUPATION_WIFE) != 0) {
			opdObg.setOccupationWife(masOccupationWife);
		}
		if (box.getInt(RELIGION_HUSBAND) != 0) {
			opdObg.setReligionHusband(masReligionHusband);
		}
		if (box.getInt(RELIGION_WIFE) != 0) {
			opdObg.setReligionWife(masReligionWife);

		}
		if (box.getInt(HOSPITAL_ID) != 0) {
			opdObg.setHospital(masHospital);
		}

		if (!box.getString(EDUCATION_HUSBAND).equals("")) {
			opdObg.setEducationHusband(box.getString(EDUCATION_HUSBAND));
		}
		if (!box.getString(EDUCATION_WIFE).equals("")) {
			opdObg.setEducationWife(box.getString(EDUCATION_WIFE));
		}
		if (!box.getString(ACCOMMODATION_TYPE).equals("")) {
			opdObg.setTypeOfAccommodation(box.getString(ACCOMMODATION_TYPE));
		}
		if (!box.getString(OPERATIVE_SCOPY).equals("")) {
			opdObg.setOperativeScopy(box.getString(OPERATIVE_SCOPY));
		}
		if (!box.getString(EXPLORATORY_LAP).equals("")) {
			opdObg.setExploratoryLaparotomy(box.getString(EXPLORATORY_LAP));
		}
		if (!box.getString(TUBAL_SURFERY).equals("")) {
			opdObg.setTubalSurgery(box.getString(TUBAL_SURFERY));
		}
		if (!box.getString(DIAGNOSTIC_SCOPY).equals("")) {
			opdObg.setDiagnosticScopy(box.getString(DIAGNOSTIC_SCOPY));
		}
		if (!box.getString(PMP_TWO).equals("")) {
			opdObg.setPmpTwo(box.getString(PMP_TWO));
		}
		if (!box.getString(PMP_ONE).equals("")) {
			opdObg.setPmpOne(box.getString(PMP_ONE));
		}
		if (!box.getString(LMP).equals("")) {
			opdObg.setLmp(box.getString(LMP));
		}
		if (!box.getString(PRESENT_MC).equals("")) {
			opdObg.setPresentMc(box.getString(PRESENT_MC));
		}
		if (!box.getString(PAST_MC).equals("")) {
			opdObg.setPastMc(box.getString(PAST_MC));
		}
		if (!box.getString(MENARCHE_YRS).equals("")) {
			opdObg.setMenarcheYrs(box.getString(MENARCHE_YRS));
		}
		if (!box.getString(DYSMENORRHOEA).equals("")) {
			opdObg.setDysmenorrhoea(box.getString(DYSMENORRHOEA));
		}
		if (!box.getString(PRURITIS_VALUE).equals("")) {
			opdObg.setPruritisValue(box.getString(PRURITIS_VALUE));
		}
		if (!box.getString(BACKACHES).equals("")) {
			opdObg.setBackaches(box.getString(BACKACHES));
		}
		if (!box.getString(LEUCORRHOEA).equals("")) {
			opdObg.setLeucorrhoea(box.getString(LEUCORRHOEA));
		}
		if (!box.getString(HIRSUTISM_YRS).equals("")) {
			opdObg.setHirsutismYrs(box.getString(HIRSUTISM_YRS));
		}
		if (!box.getString(GALACTORRHOEA_YRS).equals("")) {
			opdObg.setGalactorrhoeaYrs(box.getString(GALACTORRHOEA_YRS));
		}
		if (!box.getString(GALACTORRHOEA).equals("")) {
			opdObg.setGalactorrhoea(box.getString(GALACTORRHOEA));
		}
		if (!box.getString(PRIVACY).equals("")) {
			opdObg.setPrivacy(box.getString(PRIVACY));
		}
		if (!box.getString(OLIGOMEORRHOEA_YRS).equals("")) {
			opdObg.setOligomenorrhoeaYrs(box.getString(OLIGOMEORRHOEA_YRS));
		}
		if (!box.getString(OLIGOMEORRHOEA).equals("")) {
			opdObg.setOligomenorrhoea(box.getString(OLIGOMEORRHOEA));
		}
		if (!box.getString(HYPOMENRROHEA).equals("")) {
			opdObg.setHypomenorrohea(box.getString(HYPOMENRROHEA));
		}
		if (!box.getString(HYPOMENRROHEA_YRS).equals("")) {
			opdObg.setHypomenorroheaYrs(box.getString(HYPOMENRROHEA_YRS));
		}
		if (!box.getString(INFERTILITY_SECONDARY_YRS).equals("")) {
			opdObg.setInfertilitySecondaryYrs(box
					.getString(INFERTILITY_SECONDARY_YRS));
		}
		if (!box.getString(INFERTILITY_PRIMARY_YRS).equals("")) {
			opdObg.setInfertilityPrimaryYrs(box
					.getString(INFERTILITY_PRIMARY_YRS));
		}

		// part 2
		if (!box.getString(DIABETES_PERSONAL).equals("")) {
			opdObg.setDiabetesPersonal(box.getString(DIABETES_PERSONAL));
		}
		if (!box.getString(DIABETES_FAMILY).equals("")) {
			opdObg.setDiabetesFamily(box.getString(DIABETES_FAMILY));
		}
		if (!box.getString(CNS).equals("")) {
			opdObg.setCns(box.getString(CNS));
		}
		if (!box.getString(RS).equals("")) {
			opdObg.setRs(box.getString(RS));
		}
		if (box.getInt(PULSE) != 0) {
			opdObg.setPulse(box.getInt(PULSE));
		}
		if (!box.getString(B_P).equals("")) {
			opdObg.setBP(box.getString(B_P));
		}
		if (!box.getString(CVS).equals("")) {
			opdObg.setCVS(box.getString(CVS));
		}
		if (!box.getString(THYROID).equals("")) {
			opdObg.setThyroid(box.getString(THYROID));
		}
		if (!box.getString(NECK_LYMPH_GLANDS).equals("")) {
			opdObg.setNeckLymphGlands(box.getString(NECK_LYMPH_GLANDS));
		}
		if (!box.getString(SECONDARY_SEXUAL_CHARACTERS).equals("")) {
			opdObg.setSecondarySexualCharacters(box
					.getString(SECONDARY_SEXUAL_CHARACTERS));
		}
		if (box.getInt(GENERNAL_APPERANCE_WIDTH) != 0) {
			opdObg.setGeneralAppearanceWeight(box
					.getInt(GENERNAL_APPERANCE_WIDTH));
		}
		if (box.getInt(GENERNAL_APPERANCE_HEIGHT) != 0) {
			opdObg.setGeneralAppearanceHeight(box
					.getInt(GENERNAL_APPERANCE_HEIGHT));
		}
		if (!box.getString(FREQUENCY_OF_IC).equals("")) {
			opdObg.setFrequencyOfIc(box.getString(FREQUENCY_OF_IC));
		}
		if (!box.getString(TRYING_TO_CONCERIVE_FOR).equals("")) {
			opdObg.setTryingToConceiveFor(box
					.getString(TRYING_TO_CONCERIVE_FOR));
		}
		if (!box.getString(AWARENESS).equals("")) {
			opdObg.setAwarenessOfFertilePeriod(box.getString(AWARENESS));
		}
		if (!box.getString(DYSPAREUNIA).equals("")) {
			opdObg.setDyspareunia(box.getString(DYSPAREUNIA));
		}
		if (box.getInt(ABORTION) != 0) {
			opdObg.setAAbortion(box.getInt(ABORTION));
		}
		if (!box.getString(ECTOPIC).equals("")) {
			opdObg.setEctopic(box.getString(ECTOPIC));
		}
		if (!box.getString(PREMATURE_DELIVERY).equals("")) {
			opdObg.setPrematureDeliveryBabyAlive(box
					.getString(PREMATURE_DELIVERY));
		}
		if (!box.getString(NORMAL_DELIVERY).equals("")) {
			opdObg.setNormalDelivery(box.getString(NORMAL_DELIVERY));
		}
		if (!box.getString(OTHERS_PERSONAL).equals("")) {
			opdObg.setOthersPersonal(box.getString(OTHERS_PERSONAL));
		}
		if (!box.getString(OTHERS_FAMILY).equals("")) {
			opdObg.setOthersFamily(box.getString(OTHERS_FAMILY));
		}
		if (!box.getString(THYROID_PERSONAL).equals("")) {
			opdObg.setThyroidPersonal(box.getString(THYROID_PERSONAL));
		}
		if (!box.getString(THYROID_FAMILY).equals("")) {
			opdObg.setThyroidFamily(box.getString(THYROID_FAMILY));
		}
		if (!box.getString(ABDOMINAL_PERSONAL).equals("")) {
			opdObg.setAbdominalPersonal(box.getString(ABDOMINAL_PERSONAL));
		}
		if (!box.getString(ABDOMINAL_FAMILY).equals("")) {
			opdObg.setAbdominalFamily(box.getString(ABDOMINAL_FAMILY));
		}
		if (!box.getString(PULMONARY_PERSONAL).equals("")) {
			opdObg.setPulmonaryPersonal(box.getString(PULMONARY_PERSONAL));
		}
		if (!box.getString(PULMONARY_FAMILY).equals("")) {
			opdObg.setPulmonaryFamily(box.getString(PULMONARY_FAMILY));
		}
		if (!box.getString(TUBERCULOSIS_FAMILY).equals("")) {
			opdObg.setTuberculosisFamily(box.getString(TUBERCULOSIS_FAMILY));
		}
		if (!box.getString(TUBERCULOSIS_PERSONAL).equals("")) {
			opdObg
					.setTuberculosisPersonal(box
							.getString(TUBERCULOSIS_PERSONAL));
		}
		if (!box.getString(HYPERTENSION_FAMILY).equals("")) {
			opdObg.setHypertensionFamily(box.getString(HYPERTENSION_FAMILY));
		}
		if (!box.getString(HYPERTENSION_PERSONAL).equals("")) {
			opdObg
					.setHypertensionPersonal(box
							.getString(HYPERTENSION_PERSONAL));
		}
		// part 3
		if (!box.getString(HBSAG_WIFE).equals("")) {
			opdObg.setHbsagWife(box.getString(HBSAG_WIFE));
		}
		if (!box.getString(HBSAG_HUSBAND).equals("")) {
			opdObg.setHbsagHusband(box.getString(HBSAG_HUSBAND));
		}
		if (!box.getString(HIV_WIFE).equals("")) {
			opdObg.setHivWife(box.getString(HIV_WIFE));
		}
		if (!box.getString(HIV_HUSBAND).equals("")) {
			opdObg.setHivHusband(box.getString(HIV_HUSBAND));
		}
		if (!box.getString(URINE_ANALYSIS).equals("")) {
			opdObg.setUrineAnalysis(box.getString(URINE_ANALYSIS));
		}
		if (!box.getString(SPECIFICATION).equals("")) {
			opdObg.setSpecification(box.getString(SPECIFICATION));
		}

		if (!box.getString(VDRL_WIFE).equals("")) {
			opdObg.setVdrlWife(box.getString(VDRL_WIFE));
		}
		if (!box.getString(VDRL_HUSBAND).equals("")) {
			opdObg.setVdrlHusband(box.getString(VDRL_HUSBAND));
		}
		if (!box.getString(BLOOD_SUGAR_WIFE).equals("")) {
			opdObg.setBloodSugarWife(box.getString(BLOOD_SUGAR_WIFE));
		}
		if (!box.getString(BLOOD_SUGAR_HUSBAND).equals("")) {
			opdObg.setBloodSugarHusband(box.getString(BLOOD_SUGAR_HUSBAND));
		}
		if (!box.getString(BLOOD_GROUP_WIFE).equals("")) {
			opdObg.setBloodGroupWife(box.getString(BLOOD_GROUP_WIFE));
		}
		if (!box.getString(BLOOD_GROUP_HUSBAND).equals("")) {
			opdObg.setBloodGroupHusband(box.getString(BLOOD_GROUP_HUSBAND));
		}
		if (!box.getString(ESR).equals("")) {
			opdObg.setEsr(box.getString(ESR));
		}
		if (!box.getString(DLC).equals("")) {
			opdObg.setDlc(box.getString(DLC));
		}
		if (!box.getString(TLC).equals("")) {
			opdObg.setTlc(box.getString(TLC));
		}
		if (!box.getString(HEMOGLOBIN).equals("")) {
			opdObg.setHemoglobin(box.getString(HEMOGLOBIN));
		}
		if (!box.getString(P_V_MINORA).equals("")) {
			opdObg.setPVLabiaMinora(box.getString(P_V_MINORA));
		}
		if (!box.getString(P_V_MAJOPRA).equals("")) {
			opdObg.setPVLabiaMajopra(box.getString(P_V_MAJOPRA));
		}
		if (!box.getString(P_V_CLITORIS).equals("")) {
			opdObg.setPVClitoris(box.getString(P_V_CLITORIS));
		}
		if (!box.getString(P_S_MINORA).equals("")) {
			opdObg.setPSLabiaMinora(box.getString(P_S_MINORA));
		}
		if (!box.getString(P_S_MAJOPRA).equals("")) {
			opdObg.setPSLabiaMajopra(box.getString(P_S_MAJOPRA));
		}
		if (!box.getString(P_S_CLITORIS).equals("")) {
			opdObg.setPSClitoris(box.getString(P_S_CLITORIS));
		}
		if (!box.getString(OTHERS_ENDORICE_STATUS).equals("")) {
			opdObg.setOthers(box.getString(OTHERS_ENDORICE_STATUS));
		}
		if (!box.getString(ACNE).equals("")) {
			opdObg.setAcne(box.getString(ACNE));
		}
		if (!box.getString(PIGMENTATION_ABODOMINAL_STRIAE).equals("")) {
			opdObg.setPigmentationAbdominalStriae(box
					.getString(PIGMENTATION_ABODOMINAL_STRIAE));
		}
		if (!box.getString(OBESITY).equals("")) {
			opdObg.setObesity(box.getString(OBESITY));
		}
		if (!box.getString(BREAST_DEDVELOPMENT).equals("")) {
			opdObg.setBreastDevelopment(box.getString(BREAST_DEDVELOPMENT));
		}
		if (!box.getString(HAIR_DISTRIBUTION).equals("")) {
			opdObg.setHairDistribution(box.getString(HAIR_DISTRIBUTION));
		}

		// ---- part four
		if (!box.getString(PROLIFERATIVE).equals("")) {
			opdObg.setProliferative(box.getString(PROLIFERATIVE));
		}
		if (!box.getString(SECRETORY).equals("")) {
			opdObg.setSecretory(box.getString(SECRETORY));
		}
		if (box.getInt(DAYS_OF_CYCLE) != 0) {
			opdObg.setDaysOfCycle(box.getInt(DAYS_OF_CYCLE));
		}

		if (!box.getString(DATING).equals("")) {
			opdObg.setDating(box.getString(DATING));
		}
		if (!box.getString(CORNUAL_OPENING).equals("")) {
			opdObg.setCornualOpenings(box.getString(CORNUAL_OPENING));
		}

		if (!box.getString(ENDOMETRICAL).equals("")) {
			opdObg.setEndometricalCavity(box.getString(ENDOMETRICAL));
		}

		if (!box.getString(UTERUS_HYSTEROSALIAGOGRAPHY).equals("")) {
			opdObg.setUterusHysterosaliagography(box
					.getString(UTERUS_HYSTEROSALIAGOGRAPHY));
		}

		if (!box.getString(UTERUS).equals("")) {
			opdObg.setUterus(box.getString(UTERUS));
		}

		if (!box.getString(OVERIES_RIGHT_ENDOSCOPY).equals("")) {
			opdObg.setOvariesR(box.getString(OVERIES_RIGHT_ENDOSCOPY));
		}

		if (!box.getString(OVERIES_LEFT_ENDOSCOPY).equals("")) {
			opdObg.setOvariesL(box.getString(OVERIES_LEFT_ENDOSCOPY));
		}

		if (!box.getString(TUBES_RIGHT).equals("")) {
			opdObg.setTubesRight(box.getString(TUBES_RIGHT));
		}

		if (!box.getString(TUBES_LEFT).equals("")) {
			opdObg.setTubesLeft(box.getString(TUBES_LEFT));
		}

		if (!box.getString(TUBES_RIGHT_ENDOSCOPY).equals("")) {
			opdObg.setTubesR(box.getString(TUBES_RIGHT_ENDOSCOPY));
		}

		if (!box.getString(TUBES_LEFT_ENDOSCOPY).equals("")) {
			opdObg.setTubesL(box.getString(TUBES_LEFT_ENDOSCOPY));
		}
		if (!box.getString(T_FOUR_HUSBAND).equals("")) {
			opdObg.setTFourHusband(box.getString(T_FOUR_HUSBAND));
		}

		if (!box.getString(T_FOUR_WIFE).equals("")) {
			opdObg.setTFourWife(box.getString(T_FOUR_WIFE));
		}

		if (!box.getString(T_THREE_HUSBAND).equals("")) {
			opdObg.setTThreeHusband(box.getString(T_THREE_HUSBAND));
		}

		if (!box.getString(DHES_WIFE).equals("")) {
			opdObg.setTThreeWife(box.getString(DHES_WIFE));
		}

		if (!box.getString(DHES_WIFE).equals("")) {
			opdObg.setDhesWife(box.getString(DHES_WIFE));
		}

		if (!box.getString(DHES_HUSBAND).equals("")) {
			opdObg.setDhesHusband(box.getString(DHES_HUSBAND));
		}

		if (!box.getString(S_PROLACTIN_WIFE).equals("")) {
			opdObg.setSProlactinWife(box.getString(S_PROLACTIN_WIFE));
		}

		if (!box.getString(S_PROLACTIN_HUSBAND).equals("")) {
			opdObg.setSProlactinHusband(box.getString(S_PROLACTIN_HUSBAND));
		}

		if (!box.getString(TSH_WIFE).equals("")) {
			opdObg.setTshWife(box.getString(TSH_WIFE));
		}

		if (!box.getString(TSH_HUSBAND).equals("")) {
			opdObg.setTshHusband(box.getString(TSH_HUSBAND));
		}

		if (!box.getString(FSH_HUSBAND).equals("")) {
			opdObg.setFshHusband(box.getString(FSH_HUSBAND));
		}

		if (!box.getString(FSH_WIFE).equals("")) {
			opdObg.setFshWife(box.getString(FSH_WIFE));
		}
		if (!box.getString(LH_HUSBAND).equals("")) {
			opdObg.setLhHusband(box.getString(LH_HUSBAND));
		}

		if (!box.getString(LH_WIFE).equals("")) {
			opdObg.setLhWife(box.getString(LH_WIFE));
		}

		if (!box.getString(S_TESTOSTERONE_HUSBAND).equals("")) {
			opdObg.setSTestosteroneHusband(box
					.getString(S_TESTOSTERONE_HUSBAND));
		}

		if (!box.getString(S_TESTOSTERONE_WIFE).equals("")) {
			opdObg.setSTestosteroneWife(box.getString(S_TESTOSTERONE_WIFE));
		}

		if (!box.getString(DATE_OBG).equals("")) {
			opdObg.setObgDate(HMSUtil.convertStringTypeDateToDateType(box
					.getString(DATE_OBG)));
		}

		if (!box.getString(PELVIS_ENDOSCOPY).equals("")) {
			opdObg.setPelvisEndosocopy(box.getString(PELVIS_ENDOSCOPY));
		}
		if (!box.getString(PELVIS_ENDOSCOPY_UTERUS).equals("")) {
			opdObg.setPelvisEndosocopyUterus(box
					.getString(PELVIS_ENDOSCOPY_UTERUS));
		}

		if (!box.getString(GALACTORRHOEA_ENDORICE_STATUS).equals("")) {
			opdObg.setEndocrineStatusGalactorrhoea(box
					.getString(GALACTORRHOEA_ENDORICE_STATUS));
		}
		opdObg.setStatus("y");
		opdObg.setLastChgDate(date);
		opdObg.setLastChgTime(time);
		opdObg.setLastChgBy(userId);
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {
			hbt.saveOrUpdate(opdObg);
			saved = true;
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		try {
			Visit visitStatus = (Visit) getHibernateTemplate().load(
					Visit.class, visitId);
			visitStatus.setVisitStatus("C");
			hbt.update(visitStatus);
			saved = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;

	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> addOrUpdateOBGJsp(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		int hinId = 0;
		int visitId = 0;
		int userId = 0;
		int departmentId = 0;
		int hospitalId = 0;
		int obgId = 0;
		int occpationHusband = 0;
		int occpationWife = 0;
		int religionHusband = 0;
		int religionWife = 0;
		String referredDept = (String) box.get("referredDept").toString();
		visitId = box.getInt(VISIT_ID);
		hinId = box.getInt(HIN_ID);
		obgId = box.getInt(OBG_ID);
		userId = box.getInt("userId");
		departmentId = box.getInt("departmentId");
		occpationHusband = box.getInt(OCCUPATION_HUSBAND);
		occpationWife = box.getInt(OCCUPATION_WIFE);
		religionHusband = box.getInt(RELIGION_HUSBAND);
		religionWife = box.getInt(RELIGION_WIFE);
		hospitalId = box.getInt("hospitalId");

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
		Patient patient = new Patient();
		patient.setId(hinId);

		Visit visit = new Visit();
		visit.setId(visitId);

		MasHospital masHospital = new MasHospital();
		masHospital.setId(hospitalId);

		MasOccupation masOccupationHusband = new MasOccupation();
		masOccupationHusband.setId(occpationHusband);

		MasOccupation masOccupationWife = new MasOccupation();
		masOccupationWife.setId(occpationWife);

		MasReligion masReligionHusband = new MasReligion();
		masReligionHusband.setId(religionHusband);

		MasReligion masReligionWife = new MasReligion();
		masReligionWife.setId(religionWife);

		OpdObg opdObg = (OpdObg) getHibernateTemplate()
				.get(OpdObg.class, obgId);
		if (box.getInt(OBG_ID) != 0) {
			opdObg.setId(box.getInt(OBG_ID));
		}
		if (box.getInt("departmentId") != 0) {
			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);
			opdObg.setDepartment(masDepartment);
		}
		if (box.getInt(HIN_ID) != 0) {
			opdObg.setHin(patient);
		}
		if (box.getInt(VISIT_ID) != 0) {
			opdObg.setVisit(visit);
		}
		if (box.getInt(OCCUPATION_HUSBAND) != 0) {
			opdObg.setOccupationHusband(masOccupationHusband);
		}
		if (box.getInt(OCCUPATION_WIFE) != 0) {
			opdObg.setOccupationWife(masOccupationWife);
		}
		if (box.getInt(RELIGION_HUSBAND) != 0) {
			opdObg.setReligionHusband(masReligionHusband);
		}
		if (box.getInt(RELIGION_WIFE) != 0) {
			opdObg.setReligionWife(masReligionWife);

		}
		if (box.getInt(HOSPITAL_ID) != 0) {
			opdObg.setHospital(masHospital);
		}

		if (!box.getString(EDUCATION_HUSBAND).equals("")) {
			opdObg.setEducationHusband(box.getString(EDUCATION_HUSBAND));
		}
		if (!box.getString(EDUCATION_WIFE).equals("")) {
			opdObg.setEducationWife(box.getString(EDUCATION_WIFE));
		}
		if (!box.getString(ACCOMMODATION_TYPE).equals("")) {
			opdObg.setTypeOfAccommodation(box.getString(ACCOMMODATION_TYPE));
		}
		if (!box.getString(OPERATIVE_SCOPY).equals("")) {
			opdObg.setOperativeScopy(box.getString(OPERATIVE_SCOPY));
		}
		if (!box.getString(EXPLORATORY_LAP).equals("")) {
			opdObg.setExploratoryLaparotomy(box.getString(EXPLORATORY_LAP));
		}
		if (!box.getString(TUBAL_SURFERY).equals("")) {
			opdObg.setTubalSurgery(box.getString(TUBAL_SURFERY));
		}
		if (!box.getString(DIAGNOSTIC_SCOPY).equals("")) {
			opdObg.setDiagnosticScopy(box.getString(DIAGNOSTIC_SCOPY));
		}
		if (!box.getString(PMP_TWO).equals("")) {
			opdObg.setPmpTwo(box.getString(PMP_TWO));
		}
		if (!box.getString(PMP_ONE).equals("")) {
			opdObg.setPmpOne(box.getString(PMP_ONE));
		}
		if (!box.getString(LMP).equals("")) {
			opdObg.setLmp(box.getString(LMP));
		}
		if (!box.getString(PRESENT_MC).equals("")) {
			opdObg.setPresentMc(box.getString(PRESENT_MC));
		}
		if (!box.getString(PAST_MC).equals("")) {
			opdObg.setPastMc(box.getString(PAST_MC));
		}
		if (!box.getString(MENARCHE_YRS).equals("")) {
			opdObg.setMenarcheYrs(box.getString(MENARCHE_YRS));
		}
		if (!box.getString(DYSMENORRHOEA).equals("")) {
			opdObg.setDysmenorrhoea(box.getString(DYSMENORRHOEA));
		}
		if (!box.getString(PRURITIS_VALUE).equals("")) {
			opdObg.setPruritisValue(box.getString(PRURITIS_VALUE));
		}
		if (!box.getString(BACKACHES).equals("")) {
			opdObg.setBackaches(box.getString(BACKACHES));
		}
		if (!box.getString(LEUCORRHOEA).equals("")) {
			opdObg.setLeucorrhoea(box.getString(LEUCORRHOEA));
		}
		if (!box.getString(HIRSUTISM_YRS).equals("")) {
			opdObg.setHirsutismYrs(box.getString(HIRSUTISM_YRS));
		}
		if (!box.getString(GALACTORRHOEA_YRS).equals("")) {
			opdObg.setGalactorrhoeaYrs(box.getString(GALACTORRHOEA_YRS));
		}
		if (!box.getString(GALACTORRHOEA).equals("")) {
			opdObg.setGalactorrhoea(box.getString(GALACTORRHOEA));
		}
		if (!box.getString(PRIVACY).equals("")) {
			opdObg.setPrivacy(box.getString(PRIVACY));
		}
		if (!box.getString(OLIGOMEORRHOEA_YRS).equals("")) {
			opdObg.setOligomenorrhoeaYrs(box.getString(OLIGOMEORRHOEA_YRS));
		}
		if (!box.getString(OLIGOMEORRHOEA).equals("")) {
			opdObg.setOligomenorrhoea(box.getString(OLIGOMEORRHOEA));
		}
		if (!box.getString(HYPOMENRROHEA).equals("")) {
			opdObg.setHypomenorrohea(box.getString(HYPOMENRROHEA));
		}
		if (!box.getString(HYPOMENRROHEA_YRS).equals("")) {
			opdObg.setHypomenorroheaYrs(box.getString(HYPOMENRROHEA_YRS));
		}
		if (!box.getString(INFERTILITY_SECONDARY_YRS).equals("")) {
			opdObg.setInfertilitySecondaryYrs(box
					.getString(INFERTILITY_SECONDARY_YRS));
		}
		if (!box.getString(INFERTILITY_PRIMARY_YRS).equals("")) {
			opdObg.setInfertilityPrimaryYrs(box
					.getString(INFERTILITY_PRIMARY_YRS));
		}

		// part 2
		if (!box.getString(DIABETES_PERSONAL).equals("")) {
			opdObg.setDiabetesPersonal(box.getString(DIABETES_PERSONAL));
		}
		if (!box.getString(DIABETES_FAMILY).equals("")) {
			opdObg.setDiabetesFamily(box.getString(DIABETES_FAMILY));
		}
		if (!box.getString(CNS).equals("")) {
			opdObg.setCns(box.getString(CNS));
		}
		if (!box.getString(RS).equals("")) {
			opdObg.setRs(box.getString(RS));
		}
		if (box.getInt(PULSE) != 0) {
			opdObg.setPulse(box.getInt(PULSE));
		}
		if (!box.getString(B_P).equals("")) {
			opdObg.setBP(box.getString(B_P));
		}
		if (!box.getString(CVS).equals("")) {
			opdObg.setCVS(box.getString(CVS));
		}
		if (!box.getString(THYROID).equals("")) {
			opdObg.setThyroid(box.getString(THYROID));
		}
		if (!box.getString(NECK_LYMPH_GLANDS).equals("")) {
			opdObg.setNeckLymphGlands(box.getString(NECK_LYMPH_GLANDS));
		}
		if (!box.getString(SECONDARY_SEXUAL_CHARACTERS).equals("")) {
			opdObg.setSecondarySexualCharacters(box
					.getString(SECONDARY_SEXUAL_CHARACTERS));
		}
		if (box.getInt(GENERNAL_APPERANCE_WIDTH) != 0) {
			opdObg.setGeneralAppearanceWeight(box
					.getInt(GENERNAL_APPERANCE_WIDTH));
		}
		if (box.getInt(GENERNAL_APPERANCE_HEIGHT) != 0) {
			opdObg.setGeneralAppearanceHeight(box
					.getInt(GENERNAL_APPERANCE_HEIGHT));
		}
		if (!box.getString(FREQUENCY_OF_IC).equals("")) {
			opdObg.setFrequencyOfIc(box.getString(FREQUENCY_OF_IC));
		}
		if (!box.getString(TRYING_TO_CONCERIVE_FOR).equals("")) {
			opdObg.setTryingToConceiveFor(box
					.getString(TRYING_TO_CONCERIVE_FOR));
		}
		if (!box.getString(AWARENESS).equals("")) {
			opdObg.setAwarenessOfFertilePeriod(box.getString(AWARENESS));
		}
		if (!box.getString(DYSPAREUNIA).equals("")) {
			opdObg.setDyspareunia(box.getString(DYSPAREUNIA));
		}
		if (box.getInt(ABORTION) != 0) {
			opdObg.setAAbortion(box.getInt(ABORTION));
		}
		if (!box.getString(ECTOPIC).equals("")) {
			opdObg.setEctopic(box.getString(ECTOPIC));
		}
		if (!box.getString(PREMATURE_DELIVERY).equals("")) {
			opdObg.setPrematureDeliveryBabyAlive(box
					.getString(PREMATURE_DELIVERY));
		}
		if (!box.getString(NORMAL_DELIVERY).equals("")) {
			opdObg.setNormalDelivery(box.getString(NORMAL_DELIVERY));
		}
		if (!box.getString(OTHERS_PERSONAL).equals("")) {
			opdObg.setOthersPersonal(box.getString(OTHERS_PERSONAL));
		}
		if (!box.getString(OTHERS_FAMILY).equals("")) {
			opdObg.setOthersFamily(box.getString(OTHERS_FAMILY));
		}
		if (!box.getString(THYROID_PERSONAL).equals("")) {
			opdObg.setThyroidPersonal(box.getString(THYROID_PERSONAL));
		}
		if (!box.getString(THYROID_FAMILY).equals("")) {
			opdObg.setThyroidFamily(box.getString(THYROID_FAMILY));
		}
		if (!box.getString(ABDOMINAL_PERSONAL).equals("")) {
			opdObg.setAbdominalPersonal(box.getString(ABDOMINAL_PERSONAL));
		}
		if (!box.getString(ABDOMINAL_FAMILY).equals("")) {
			opdObg.setAbdominalFamily(box.getString(ABDOMINAL_FAMILY));
		}
		if (!box.getString(PULMONARY_PERSONAL).equals("")) {
			opdObg.setPulmonaryPersonal(box.getString(PULMONARY_PERSONAL));
		}
		if (!box.getString(PULMONARY_FAMILY).equals("")) {
			opdObg.setPulmonaryFamily(box.getString(PULMONARY_FAMILY));
		}
		if (!box.getString(TUBERCULOSIS_FAMILY).equals("")) {
			opdObg.setTuberculosisFamily(box.getString(TUBERCULOSIS_FAMILY));
		}
		if (!box.getString(TUBERCULOSIS_PERSONAL).equals("")) {
			opdObg
					.setTuberculosisPersonal(box
							.getString(TUBERCULOSIS_PERSONAL));
		}
		if (!box.getString(HYPERTENSION_FAMILY).equals("")) {
			opdObg.setHypertensionFamily(box.getString(HYPERTENSION_FAMILY));
		}
		if (!box.getString(HYPERTENSION_PERSONAL).equals("")) {
			opdObg
					.setHypertensionPersonal(box
							.getString(HYPERTENSION_PERSONAL));
		}
		// part 3
		if (!box.getString(HBSAG_WIFE).equals("")) {
			opdObg.setHbsagWife(box.getString(HBSAG_WIFE));
		}
		if (!box.getString(HBSAG_HUSBAND).equals("")) {
			opdObg.setHbsagHusband(box.getString(HBSAG_HUSBAND));
		}
		if (!box.getString(HIV_WIFE).equals("")) {
			opdObg.setHivWife(box.getString(HIV_WIFE));
		}
		if (!box.getString(HIV_HUSBAND).equals("")) {
			opdObg.setHivHusband(box.getString(HIV_HUSBAND));
		}
		if (!box.getString(URINE_ANALYSIS).equals("")) {
			opdObg.setUrineAnalysis(box.getString(URINE_ANALYSIS));
		}
		if (!box.getString(SPECIFICATION).equals("")) {
			opdObg.setSpecification(box.getString(SPECIFICATION));
		}
		if (!box.getString(VDRL_WIFE).equals("")) {
			opdObg.setVdrlWife(box.getString(VDRL_WIFE));
		}
		if (!box.getString(VDRL_HUSBAND).equals("")) {
			opdObg.setVdrlHusband(box.getString(VDRL_HUSBAND));
		}
		if (!box.getString(BLOOD_SUGAR_WIFE).equals("")) {
			opdObg.setBloodSugarWife(box.getString(BLOOD_SUGAR_WIFE));
		}
		if (!box.getString(BLOOD_SUGAR_HUSBAND).equals("")) {
			opdObg.setBloodSugarHusband(box.getString(BLOOD_SUGAR_HUSBAND));
		}
		if (!box.getString(BLOOD_GROUP_WIFE).equals("")) {
			opdObg.setBloodGroupWife(box.getString(BLOOD_GROUP_WIFE));
		}
		if (!box.getString(BLOOD_GROUP_HUSBAND).equals("")) {
			opdObg.setBloodGroupHusband(box.getString(BLOOD_GROUP_HUSBAND));
		}
		if (!box.getString(ESR).equals("")) {
			opdObg.setEsr(box.getString(ESR));
		}
		if (!box.getString(DLC).equals("")) {
			opdObg.setDlc(box.getString(DLC));
		}
		if (!box.getString(TLC).equals("")) {
			opdObg.setTlc(box.getString(TLC));
		}
		if (!box.getString(HEMOGLOBIN).equals("")) {
			opdObg.setHemoglobin(box.getString(HEMOGLOBIN));
		}
		if (!box.getString(P_V_MINORA).equals("")) {
			opdObg.setPVLabiaMinora(box.getString(P_V_MINORA));
		}
		if (!box.getString(P_V_MAJOPRA).equals("")) {
			opdObg.setPVLabiaMajopra(box.getString(P_V_MAJOPRA));
		}
		if (!box.getString(P_V_CLITORIS).equals("")) {
			opdObg.setPVClitoris(box.getString(P_V_CLITORIS));
		}
		if (!box.getString(P_S_MINORA).equals("")) {
			opdObg.setPSLabiaMinora(box.getString(P_S_MINORA));
		}
		if (!box.getString(P_S_MAJOPRA).equals("")) {
			opdObg.setPSLabiaMajopra(box.getString(P_S_MAJOPRA));
		}
		if (!box.getString(P_S_CLITORIS).equals("")) {
			opdObg.setPSClitoris(box.getString(P_S_CLITORIS));
		}
		if (!box.getString(OTHERS_ENDORICE_STATUS).equals("")) {
			opdObg.setOthers(box.getString(OTHERS_ENDORICE_STATUS));
		}
		if (!box.getString(ACNE).equals("")) {
			opdObg.setAcne(box.getString(ACNE));
		}
		if (!box.getString(PIGMENTATION_ABODOMINAL_STRIAE).equals("")) {
			opdObg.setPigmentationAbdominalStriae(box
					.getString(PIGMENTATION_ABODOMINAL_STRIAE));
		}
		if (!box.getString(OBESITY).equals("")) {
			opdObg.setObesity(box.getString(OBESITY));
		}
		if (!box.getString(BREAST_DEDVELOPMENT).equals("")) {
			opdObg.setBreastDevelopment(box.getString(BREAST_DEDVELOPMENT));
		}
		if (!box.getString(HAIR_DISTRIBUTION).equals("")) {
			opdObg.setHairDistribution(box.getString(HAIR_DISTRIBUTION));
		}

		// ---- part four
		if (!box.getString(PROLIFERATIVE).equals("")) {
			opdObg.setProliferative(box.getString(PROLIFERATIVE));
		}
		if (!box.getString(SECRETORY).equals("")) {
			opdObg.setSecretory(box.getString(SECRETORY));
		}
		if (box.getInt(DAYS_OF_CYCLE) != 0) {
			opdObg.setDaysOfCycle(box.getInt(DAYS_OF_CYCLE));
		}

		if (!box.getString(DATING).equals("")) {
			opdObg.setDating(box.getString(DATING));
		}
		if (!box.getString(CORNUAL_OPENING).equals("")) {
			opdObg.setCornualOpenings(box.getString(CORNUAL_OPENING));
		}

		if (!box.getString(ENDOMETRICAL).equals("")) {
			opdObg.setEndometricalCavity(box.getString(ENDOMETRICAL));
		}

		if (!box.getString(UTERUS_HYSTEROSALIAGOGRAPHY).equals("")) {
			opdObg.setUterusHysterosaliagography(box
					.getString(UTERUS_HYSTEROSALIAGOGRAPHY));
		}

		if (!box.getString(UTERUS).equals("")) {
			opdObg.setUterus(box.getString(UTERUS));
		}

		if (!box.getString(OVERIES_RIGHT_ENDOSCOPY).equals("")) {
			opdObg.setOvariesR(box.getString(OVERIES_RIGHT_ENDOSCOPY));
		}

		if (!box.getString(OVERIES_LEFT_ENDOSCOPY).equals("")) {
			opdObg.setOvariesL(box.getString(OVERIES_LEFT_ENDOSCOPY));
		}

		if (!box.getString(TUBES_RIGHT).equals("")) {
			opdObg.setTubesRight(box.getString(TUBES_RIGHT));
		}

		if (!box.getString(TUBES_LEFT).equals("")) {
			opdObg.setTubesLeft(box.getString(TUBES_LEFT));
		}

		if (!box.getString(TUBES_RIGHT_ENDOSCOPY).equals("")) {
			opdObg.setTubesR(box.getString(TUBES_RIGHT_ENDOSCOPY));
		}

		if (!box.getString(TUBES_LEFT_ENDOSCOPY).equals("")) {
			opdObg.setTubesL(box.getString(TUBES_LEFT_ENDOSCOPY));
		}
		if (!box.getString(T_FOUR_HUSBAND).equals("")) {
			opdObg.setTFourHusband(box.getString(T_FOUR_HUSBAND));
		}

		if (!box.getString(T_FOUR_WIFE).equals("")) {
			opdObg.setTFourWife(box.getString(T_FOUR_WIFE));
		}

		if (!box.getString(T_THREE_HUSBAND).equals("")) {
			opdObg.setTThreeHusband(box.getString(T_THREE_HUSBAND));
		}

		if (!box.getString(DHES_WIFE).equals("")) {
			opdObg.setTThreeWife(box.getString(DHES_WIFE));
		}

		if (!box.getString(DHES_WIFE).equals("")) {
			opdObg.setDhesWife(box.getString(DHES_WIFE));
		}

		if (!box.getString(DHES_HUSBAND).equals("")) {
			opdObg.setDhesHusband(box.getString(DHES_HUSBAND));
		}

		if (!box.getString(S_PROLACTIN_WIFE).equals("")) {
			opdObg.setSProlactinWife(box.getString(S_PROLACTIN_WIFE));
		}

		if (!box.getString(S_PROLACTIN_HUSBAND).equals("")) {
			opdObg.setSProlactinHusband(box.getString(S_PROLACTIN_HUSBAND));
		}

		if (!box.getString(TSH_WIFE).equals("")) {
			opdObg.setTshWife(box.getString(TSH_WIFE));
		}

		if (!box.getString(TSH_HUSBAND).equals("")) {
			opdObg.setTshHusband(box.getString(TSH_HUSBAND));
		}

		if (!box.getString(FSH_HUSBAND).equals("")) {
			opdObg.setFshHusband(box.getString(FSH_HUSBAND));
		}

		if (!box.getString(FSH_WIFE).equals("")) {
			opdObg.setFshWife(box.getString(FSH_WIFE));
		}
		if (!box.getString(LH_HUSBAND).equals("")) {
			opdObg.setLhHusband(box.getString(LH_HUSBAND));
		}

		if (!box.getString(LH_WIFE).equals("")) {
			opdObg.setLhWife(box.getString(LH_WIFE));
		}

		if (!box.getString(S_TESTOSTERONE_HUSBAND).equals("")) {
			opdObg.setSTestosteroneHusband(box
					.getString(S_TESTOSTERONE_HUSBAND));
		}

		if (!box.getString(S_TESTOSTERONE_WIFE).equals("")) {
			opdObg.setSTestosteroneWife(box.getString(S_TESTOSTERONE_WIFE));
		}

		if (!box.getString(DATE_OBG).equals("")) {
			opdObg.setObgDate(HMSUtil.convertStringTypeDateToDateType(box
					.getString(DATE_OBG)));
		}

		if (!box.getString(PELVIS_ENDOSCOPY).equals("")) {
			opdObg.setPelvisEndosocopy(box.getString(PELVIS_ENDOSCOPY));
		}
		if (!box.getString(PELVIS_ENDOSCOPY_UTERUS).equals("")) {
			opdObg.setPelvisEndosocopyUterus(box
					.getString(PELVIS_ENDOSCOPY_UTERUS));
		}

		if (!box.getString(GALACTORRHOEA_ENDORICE_STATUS).equals("")) {
			opdObg.setEndocrineStatusGalactorrhoea(box
					.getString(GALACTORRHOEA_ENDORICE_STATUS));
		}
		opdObg.setStatus("y");
		opdObg.setLastChgDate(date);
		opdObg.setLastChgTime(time);
		opdObg.setLastChgBy(userId);

		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {
			hbt.saveOrUpdate(opdObg);
			saved = true;
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		try {
			Visit visitStatus = (Visit) getHibernateTemplate().load(
					Visit.class, visitId);
			visitStatus.setVisitStatus("C");
			hbt.update(visitStatus);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

			opdPatientDetails.setReferredDept(referredDept);

			MasHospital masHospitalob = (MasHospital) hbt.load(
					MasHospital.class, hospitalId);
			opdPatientDetails.setHospital(masHospitalob);

			opdPatientDetails.setVisit(visitStatus);
			hbt.save(opdPatientDetails);
			saved = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;

	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> showENTJsp(int visitId) {

		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();

		try {
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);

		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> searchENTForUpdateJsp(int visitId) {

		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List<OpdEnt> opdEntList = new ArrayList<OpdEnt>();

		Map<String, Object> map = new HashMap<String, Object>();

		try {
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();

			opdEntList = session.createCriteria(OpdEnt.class).add(
					Restrictions.eq("Visit.Id", visitId)).list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		map.put("opdEntList", opdEntList);

		return map;
	}

	public Map<String, Object> addEnt(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;

		int hinId = 0;
		int visitId = 0;
		int userId = 0;
		int departmentId = 0;
		int hospitalId = 0;
		String otorrhora = "";
		String hearingLoss = "";
		String otalgia = "";
		String sneezing = "";
		String epistaxis = "";
		String facialPain = "";
		String odynophagia = "";
		String hoarseness = "";
		String othersEnt = "";
		String dysphagia = "";
		String rhinorrhoea = "";

		String tftLeAbc = "";

		String tftReAbc = "";
		String tftLeWeber = "";
		String tftReWeber = "";
		String tftLeTenTwoFour = "";
		String tftReTenTwoFour = "";
		String tftLeFiveOneTwo = "";
		String tftReFiveOneTwo = "";
		String tftLeTwoFiveSix = "";
		String tftReTwoFiveSix = "";
		int ffhLeCv = 0;
		int ffhReCv = 0;
		int ffhLeFw = 0;
		int ffhReFw = 0;
		int ptaLeAbGap = 0;
		int ptaReAbGap = 0;
		int ptaLeBc = 0;
		int ptaReBc = 0;
		int ptaReAc = 0;
		int ptaLeAc = 0;
		String impedenceAudiometryEarRe = "";
		String impedenceAudiometryEarLe = "";
		String postRhinoscopyRe = "";
		String postRhinoscopyLe = "";
		String oralCavity = "";
		String oroPharynx = "";
		String idlThroat = "";
		String antRhinoscopyRe = "";
		String antRhinoscopyLe = "";
		String externalNasalFrameworkRe = "";
		String externalNasalFrameworkLe = "";
		String noCerebellarSign = "";
		String noSpontaneousRe = "";
		String noSpontaneousLe = "";
		String rombergRe = "";
		String rombergLe = "";
		String fistualtestRe = "";
		String fistualtestLe = "";
		String generalExamination = "";
		String prePostRe = "";
		String prePostLe = "";
		String eacRe = "";
		String eacLe = "";
		String tmRe = "";
		String tmLe = "";
		String surgery = "";
		String postOp = "";
		String advice = "";
		String neck = "";
		String nasalObstructions = "";
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		String referredDept = (String) box.get("referredDept").toString();
		try {

			visitId = box.getInt("visitId");
			hinId = box.getInt("hinId");
			userId = box.getInt("userId");
			departmentId = box.getInt("departmentId");
			hospitalId = box.getInt("hospitalId");

			otorrhora = box.getString(OTORRHOEA);
			sneezing = box.getString(SNEEZING);
			epistaxis = box.getString(EPISTAXIS);
			facialPain = box.getString(FACIAL_PAIN);
			odynophagia = box.getString(ODYNOPHAGIA);
			hoarseness = box.getString(HOARSENESS);
			othersEnt = box.getString(OTHERS_ENT);
			dysphagia = box.getString(DYSPHAGIA);
			rhinorrhoea = box.getString(RHINORRHOEA);
			hearingLoss = box.getString(HEARING_LOSS);
			otalgia = box.getString(OTALGIA);
			tftReAbc = box.getString(ABC_RE);
			tftLeAbc = box.getString(ABC_LE);
			tftLeWeber = box.getString(TFT_LE_WEDER);
			tftReWeber = box.getString(TFT_RE_WEDER);
			tftLeTenTwoFour = box.getString(TFT_LE_TEN_TWO_FOUR);
			tftReTenTwoFour = box.getString(TFT_RE_TEN_TWO_FOUR);
			tftLeFiveOneTwo = box.getString(TFT_LE_FIVE_ONE_TWO);
			tftReFiveOneTwo = box.getString(TFT_RE_FIVE_ONE_TWO);
			tftLeTwoFiveSix = box.getString(TFT_LE_TWO_FIVE_SIX);
			tftReTwoFiveSix = box.getString(TFT_RE_TWO_FIVE_SIX);
			ffhLeCv = box.getInt(FFH_CV_LE);
			ffhReCv = box.getInt(FFH_CV_RE);
			ffhLeFw = box.getInt(FFH_FW_LE);
			ffhReFw = box.getInt(FFH_FW_RE);
			ptaLeAbGap = box.getInt(PTA_AB_GAP_LE);
			ptaReAbGap = box.getInt(PTA_AB_GAP_RE);
			ptaLeBc = box.getInt(PTA_BC_LE);
			ptaReBc = box.getInt(PTA_BC_RE);
			ptaReAc = box.getInt(PTA_AC_RE);
			ptaLeAc = box.getInt(PTA_AC_LE);
			impedenceAudiometryEarRe = box.getString(IMPLEDANCE_AUDIOMEETRY_RE);
			impedenceAudiometryEarLe = box.getString(IMPLEDANCE_AUDIOMEETRY_LE);
			postRhinoscopyRe = box.getString(POST_RHINOSCOPY_RE);
			postRhinoscopyLe = box.getString(POST_RHINOSCOPY_LE);
			oralCavity = box.getString(ORAL_CAVITY);
			oroPharynx = box.getString(ORAL_PHATYNX);
			idlThroat = box.getString(IDL);
			antRhinoscopyRe = box.getString(ANT_RHINOSCOPY_RE);
			antRhinoscopyLe = box.getString(ANT_RHINOSCOPY_LE);
			externalNasalFrameworkRe = box
					.getString(EXTERNAL_NASAL_FRAMEWORK_RE);
			externalNasalFrameworkLe = box
					.getString(EXTERNAL_NASAL_FRAMEWORK_LE);
			noCerebellarSign = box.getString(NO_CEREBELLAR);
			noSpontaneousRe = box.getString(NO_SPONTSNEOUS_RE);
			noSpontaneousLe = box.getString(NO_SPONTSNEOUS_LE);
			rombergRe = box.getString(ROMBERG_RE);
			rombergLe = box.getString(ROMBERG_LE);
			fistualtestLe = box.getString(FISTULA_LE);
			fistualtestRe = box.getString(FISTULA_RE);
			generalExamination = box.getString(GENERAL_EXAMINATION);
			prePostRe = box.getString(PRE_POST_RE);
			prePostLe = box.getString(PRE_POST_LE);
			eacRe = box.getString(EAC_RE);
			eacLe = box.getString(EAC_LE);
			tmRe = box.getString(TM_RE);
			tmLe = box.getString(TM_LE);
			surgery = box.getString(SURGERY);
			postOp = box.getString(POST_OP);
			advice = box.getString(ADVICE);
			neck = box.getString(NECK);
			nasalObstructions = box.getString(NASAL_OBSTRUCTIONS);
			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");
			Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
			Patient patient = new Patient();
			patient.setId(hinId);

			Visit visit = new Visit();
			visit.setId(visitId);

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);

			OpdEnt opdEnt = new OpdEnt();

			opdEnt.setDepartment(masDepartment);
			opdEnt.setHin(patient);
			opdEnt.setVisit(visit);
			opdEnt.setHospital(masHospital);

			opdEnt.setAdvice(advice);
			opdEnt.setNeck(neck);
			opdEnt.setDysphagia(dysphagia);
			opdEnt.setEpistaxis(epistaxis);
			opdEnt.setFacialPain(facialPain);
			opdEnt.setHearingLoss(hearingLoss);
			opdEnt.setHoarseness(hoarseness);
			opdEnt.setNasalObstructions(nasalObstructions);
			opdEnt.setOdynophagia(odynophagia);
			opdEnt.setOtalgia(otalgia);
			opdEnt.setPostOp(postOp);
			opdEnt.setOtorrhora(otorrhora);
			opdEnt.setOthersEnt(othersEnt);
			opdEnt.setRhinorrhoea(rhinorrhoea);
			opdEnt.setSneezing(sneezing);
			opdEnt.setSurgery(surgery);
			opdEnt.setAntRhinoscopyLe(antRhinoscopyLe);
			opdEnt.setAntRhinoscopyRe(antRhinoscopyRe);
			opdEnt.setEacLe(eacLe);
			opdEnt.setEacRe(eacRe);
			opdEnt.setExternalNasalFrameworkLe(externalNasalFrameworkLe);
			opdEnt.setExternalNasalFrameworkRe(externalNasalFrameworkRe);
			opdEnt.setFfhLeCv(ffhLeCv);
			opdEnt.setFfhLeFw(ffhLeFw);
			opdEnt.setFfhReFw(ffhReFw);
			opdEnt.setFfhReCv(ffhReCv);
			opdEnt.setFistualtestLe(fistualtestLe);
			opdEnt.setFistualtestRe(fistualtestRe);
			opdEnt.setGeneralExamination(generalExamination);
			opdEnt.setIdlThroat(idlThroat);
			opdEnt.setImpedenceAudiometryEarLe(impedenceAudiometryEarLe);
			opdEnt.setImpedenceAudiometryEarRe(impedenceAudiometryEarRe);
			opdEnt.setNoCerebellarSign(noCerebellarSign);
			opdEnt.setNoSpontaneousLe(noSpontaneousLe);
			opdEnt.setNoSpontaneousRe(noSpontaneousRe);
			opdEnt.setOralCavity(oralCavity);
			opdEnt.setOroPharynx(oroPharynx);
			opdEnt.setPostOp(postOp);
			opdEnt.setPostRhinoscopyLe(postRhinoscopyLe);
			opdEnt.setPostRhinoscopyRe(postRhinoscopyRe);
			opdEnt.setPrePostLe(prePostLe);
			opdEnt.setPrePostRe(prePostRe);
			opdEnt.setPtaLeAbGap(ptaLeAbGap);
			opdEnt.setPtaLeAc(ptaLeAc);
			opdEnt.setPtaReAc(ptaReAc);
			opdEnt.setPtaLeBc(ptaLeBc);
			opdEnt.setPtaReAbGap(ptaReAbGap);
			opdEnt.setPtaReBc(ptaReBc);
			opdEnt.setRhinorrhoea(rhinorrhoea);
			opdEnt.setRombergLe(rombergLe);
			opdEnt.setRombergRe(rombergRe);
			opdEnt.setTftLeAbc(tftLeAbc);
			opdEnt.setTftLeFiveOneTwo(tftLeFiveOneTwo);
			opdEnt.setTftLeTenTwoFour(tftLeTenTwoFour);
			opdEnt.setTftLeTwoFiveSex(tftLeTwoFiveSix);
			opdEnt.setTftLeWeber(tftLeWeber);
			opdEnt.setTftReAbc(tftReAbc);
			opdEnt.setTftReFiveOneTwo(tftReFiveOneTwo);
			opdEnt.setTftReTenTwoFour(tftReTenTwoFour);
			opdEnt.setTftReTwoFiveSex(tftReTwoFiveSix);
			opdEnt.setTftReWeber(tftReWeber);
			opdEnt.setTmLe(tmLe);
			opdEnt.setTmRe(tmRe);

			opdEnt.setStatus("y");
			opdEnt.setLastChgDate(date);
			opdEnt.setLastChgTime(time);
			opdEnt.setLastChgBy(userId);

			hbt.save(opdEnt);

			Visit visitStatus = (Visit) getHibernateTemplate().load(
					Visit.class, visitId);
			visitStatus.setVisitStatus("C");
			hbt.update(visitStatus);

			/*
			 * OpdPatientDetails opdPatientDetails = new OpdPatientDetails();
			 * 
			 * opdPatientDetails.setReferredDept(referredDept);
			 * 
			 * MasHospital masHospitalob =
			 * (MasHospital)hbt.load(MasHospital.class, hospitalId);
			 * opdPatientDetails.setHospital(masHospitalob);
			 * 
			 * opdPatientDetails.setVisit(visitStatus);
			 * hbt.save(opdPatientDetails);
			 */

			saved = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> updateEnt(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;

		int entId = 0;
		int hinId = 0;
		int visitId = 0;
		int userId = 0;
		int departmentId = 0;
		int hospitalId = 0;
		String otorrhora = "";
		String hearingLoss = "";
		String otalgia = "";
		String sneezing = "";
		String epistaxis = "";
		String facialPain = "";
		String odynophagia = "";
		String hoarseness = "";
		String othersEnt = "";
		String dysphagia = "";
		String rhinorrhoea = "";

		String tftLeAbc = "";

		String tftReAbc = "";
		String tftLeWeber = "";
		String tftReWeber = "";
		String tftLeTenTwoFour = "";
		String tftReTenTwoFour = "";
		String tftLeFiveOneTwo = "";
		String tftReFiveOneTwo = "";
		String tftLeTwoFiveSix = "";
		String tftReTwoFiveSix = "";
		int ffhLeCv = 0;
		int ffhReCv = 0;
		int ffhLeFw = 0;
		int ffhReFw = 0;
		int ptaLeAbGap = 0;
		int ptaReAbGap = 0;
		int ptaLeBc = 0;
		int ptaReBc = 0;
		int ptaReAc = 0;
		int ptaLeAc = 0;
		String impedenceAudiometryEarRe = "";
		String impedenceAudiometryEarLe = "";
		String postRhinoscopyRe = "";
		String postRhinoscopyLe = "";
		String oralCavity = "";
		String oroPharynx = "";
		String idlThroat = "";
		String antRhinoscopyRe = "";
		String antRhinoscopyLe = "";
		String externalNasalFrameworkRe = "";
		String externalNasalFrameworkLe = "";
		String noCerebellarSign = "";
		String noSpontaneousRe = "";
		String noSpontaneousLe = "";
		String rombergRe = "";
		String rombergLe = "";
		String fistualtestRe = "";
		String fistualtestLe = "";
		String generalExamination = "";
		String prePostRe = "";
		String prePostLe = "";
		String eacRe = "";
		String eacLe = "";
		String tmRe = "";
		String tmLe = "";
		String surgery = "";
		String postOp = "";
		String advice = "";
		String neck = "";
		String nasalObstructions = "";
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

		try {

			visitId = box.getInt("visitId");

			entId = box.getInt(ENT_ID);
			hinId = box.getInt("hinId");
			userId = box.getInt("userId");
			departmentId = box.getInt("departmentId");
			hospitalId = box.getInt("hospitalId");

			otorrhora = box.getString(OTORRHOEA);
			sneezing = box.getString(SNEEZING);
			epistaxis = box.getString(EPISTAXIS);
			facialPain = box.getString(FACIAL_PAIN);
			odynophagia = box.getString(ODYNOPHAGIA);
			hoarseness = box.getString(HOARSENESS);
			othersEnt = box.getString(OTHERS_ENT);
			dysphagia = box.getString(DYSPHAGIA);
			rhinorrhoea = box.getString(RHINORRHOEA);
			hearingLoss = box.getString(HEARING_LOSS);
			otalgia = box.getString(OTALGIA);
			tftReAbc = box.getString(ABC_RE);
			tftLeAbc = box.getString(ABC_LE);
			tftLeWeber = box.getString(TFT_LE_WEDER);
			tftReWeber = box.getString(TFT_RE_WEDER);
			tftLeTenTwoFour = box.getString(TFT_LE_TEN_TWO_FOUR);
			tftReTenTwoFour = box.getString(TFT_RE_TEN_TWO_FOUR);
			tftLeFiveOneTwo = box.getString(TFT_LE_FIVE_ONE_TWO);
			tftReFiveOneTwo = box.getString(TFT_RE_FIVE_ONE_TWO);
			tftLeTwoFiveSix = box.getString(TFT_LE_TWO_FIVE_SIX);
			tftReTwoFiveSix = box.getString(TFT_RE_TWO_FIVE_SIX);
			ffhLeCv = box.getInt(FFH_CV_LE);
			ffhReCv = box.getInt(FFH_CV_RE);
			ffhLeFw = box.getInt(FFH_FW_LE);
			ffhReFw = box.getInt(FFH_FW_RE);
			ptaLeAbGap = box.getInt(PTA_AB_GAP_LE);
			ptaReAbGap = box.getInt(PTA_AB_GAP_RE);
			ptaLeBc = box.getInt(PTA_BC_LE);
			ptaReBc = box.getInt(PTA_BC_RE);
			ptaReAc = box.getInt(PTA_AC_RE);
			ptaLeAc = box.getInt(PTA_AC_LE);
			impedenceAudiometryEarRe = box.getString(IMPLEDANCE_AUDIOMEETRY_RE);
			impedenceAudiometryEarLe = box.getString(IMPLEDANCE_AUDIOMEETRY_LE);
			postRhinoscopyRe = box.getString(POST_RHINOSCOPY_RE);
			postRhinoscopyLe = box.getString(POST_RHINOSCOPY_LE);
			oralCavity = box.getString(ORAL_CAVITY);
			oroPharynx = box.getString(ORAL_PHATYNX);
			idlThroat = box.getString(IDL);
			antRhinoscopyRe = box.getString(ANT_RHINOSCOPY_RE);
			antRhinoscopyLe = box.getString(ANT_RHINOSCOPY_LE);
			externalNasalFrameworkRe = box
					.getString(EXTERNAL_NASAL_FRAMEWORK_RE);
			externalNasalFrameworkLe = box
					.getString(EXTERNAL_NASAL_FRAMEWORK_LE);
			noCerebellarSign = box.getString(NO_CEREBELLAR);
			noSpontaneousRe = box.getString(NO_SPONTSNEOUS_RE);
			noSpontaneousLe = box.getString(NO_SPONTSNEOUS_LE);
			rombergRe = box.getString(ROMBERG_RE);
			rombergLe = box.getString(ROMBERG_LE);
			fistualtestLe = box.getString(FISTULA_LE);
			fistualtestRe = box.getString(FISTULA_RE);
			generalExamination = box.getString(GENERAL_EXAMINATION);
			prePostRe = box.getString(PRE_POST_RE);
			prePostLe = box.getString(PRE_POST_LE);
			eacRe = box.getString(EAC_RE);
			eacLe = box.getString(EAC_LE);
			tmRe = box.getString(TM_RE);
			tmLe = box.getString(TM_LE);
			surgery = box.getString(SURGERY);
			postOp = box.getString(POST_OP);
			advice = box.getString(ADVICE);
			neck = box.getString(NECK);
			nasalObstructions = box.getString(NASAL_OBSTRUCTIONS);
			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");
			Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);

			Patient patient = new Patient();
			patient.setId(hinId);

			Visit visit = new Visit();
			visit.setId(visitId);

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);

			OpdEnt opdEnt = (OpdEnt) hbt.load(OpdEnt.class, entId);

			opdEnt.setDepartment(masDepartment);
			opdEnt.setHin(patient);
			opdEnt.setVisit(visit);
			opdEnt.setHospital(masHospital);

			opdEnt.setAdvice(advice);
			opdEnt.setNeck(neck);
			opdEnt.setDysphagia(dysphagia);
			opdEnt.setEpistaxis(epistaxis);
			opdEnt.setFacialPain(facialPain);
			opdEnt.setHearingLoss(hearingLoss);
			opdEnt.setHoarseness(hoarseness);
			opdEnt.setNasalObstructions(nasalObstructions);
			opdEnt.setOdynophagia(odynophagia);
			opdEnt.setOtalgia(otalgia);
			opdEnt.setPostOp(postOp);
			opdEnt.setOtorrhora(otorrhora);
			opdEnt.setOthersEnt(othersEnt);
			opdEnt.setRhinorrhoea(rhinorrhoea);
			opdEnt.setSneezing(sneezing);
			opdEnt.setSurgery(surgery);
			opdEnt.setAntRhinoscopyLe(antRhinoscopyLe);
			opdEnt.setAntRhinoscopyRe(antRhinoscopyRe);
			opdEnt.setEacLe(eacLe);
			opdEnt.setEacRe(eacRe);
			opdEnt.setExternalNasalFrameworkLe(externalNasalFrameworkLe);
			opdEnt.setExternalNasalFrameworkRe(externalNasalFrameworkRe);
			opdEnt.setFfhLeCv(ffhLeCv);
			opdEnt.setFfhLeFw(ffhLeFw);
			opdEnt.setFfhReFw(ffhReFw);
			opdEnt.setFfhReCv(ffhReCv);
			opdEnt.setFistualtestLe(fistualtestLe);
			opdEnt.setFistualtestRe(fistualtestRe);
			opdEnt.setGeneralExamination(generalExamination);
			opdEnt.setIdlThroat(idlThroat);
			opdEnt.setImpedenceAudiometryEarLe(impedenceAudiometryEarLe);
			opdEnt.setImpedenceAudiometryEarRe(impedenceAudiometryEarRe);
			opdEnt.setNoCerebellarSign(noCerebellarSign);
			opdEnt.setNoSpontaneousLe(noSpontaneousLe);
			opdEnt.setNoSpontaneousRe(noSpontaneousRe);
			opdEnt.setOralCavity(oralCavity);
			opdEnt.setOroPharynx(oroPharynx);
			opdEnt.setPostOp(postOp);
			opdEnt.setPostRhinoscopyLe(postRhinoscopyLe);
			opdEnt.setPostRhinoscopyRe(postRhinoscopyRe);
			opdEnt.setPrePostLe(prePostLe);
			opdEnt.setPrePostRe(prePostRe);
			opdEnt.setPtaLeAbGap(ptaLeAbGap);
			opdEnt.setPtaLeAc(ptaLeAc);
			opdEnt.setPtaReAc(ptaReAc);
			opdEnt.setPtaLeBc(ptaLeBc);
			opdEnt.setPtaReAbGap(ptaReAbGap);
			opdEnt.setPtaReBc(ptaReBc);
			opdEnt.setRhinorrhoea(rhinorrhoea);
			opdEnt.setRombergLe(rombergLe);
			opdEnt.setRombergRe(rombergRe);
			opdEnt.setTftLeAbc(tftLeAbc);
			opdEnt.setTftLeFiveOneTwo(tftLeFiveOneTwo);
			opdEnt.setTftLeTenTwoFour(tftLeTenTwoFour);
			opdEnt.setTftLeTwoFiveSex(tftLeTwoFiveSix);
			opdEnt.setTftLeWeber(tftLeWeber);
			opdEnt.setTftReAbc(tftReAbc);
			opdEnt.setTftReFiveOneTwo(tftReFiveOneTwo);
			opdEnt.setTftReTenTwoFour(tftReTenTwoFour);
			opdEnt.setTftReTwoFiveSex(tftReTwoFiveSix);
			opdEnt.setTftReWeber(tftReWeber);
			opdEnt.setTmLe(tmLe);
			opdEnt.setTmRe(tmRe);

			opdEnt.setStatus("y");
			opdEnt.setLastChgDate(date);
			opdEnt.setLastChgTime(time);
			opdEnt.setLastChgBy(userId);

			hbt.update(opdEnt);
			hbt.refresh(opdEnt);

			/*
			 * Visit
			 * visitStatus=(Visit)getHibernateTemplate().load(Visit.class,visitId
			 * ); visitStatus.setVisitStatus("C"); hbt.update(visitStatus);
			 */

			/*
			 * OpdPatientDetails opdPatientDetails = new OpdPatientDetails();
			 * 
			 * opdPatientDetails.setReferredDept(referredDept);
			 * 
			 * MasHospital masHospitalob =
			 * (MasHospital)hbt.load(MasHospital.class, hospitalId);
			 * opdPatientDetails.setHospital(masHospitalob);
			 * 
			 * opdPatientDetails.setVisit(visitStatus);
			 * hbt.save(opdPatientDetails);
			 */

			saved = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> viewEnt(Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdEnt> entList = new ArrayList<OpdEnt>();
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {

			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				entList = session.createCriteria(OpdEnt.class).createAlias(
						"Visit", "visit").add(
						Restrictions.eq("visit.Id", visitId)).list();
				map.put("entList", entList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> viewOBGONE(Map<String, Object> parameterMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdObg> obgList = new ArrayList<OpdObg>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();

		try {
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}
			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				obgList = session.createCriteria(OpdObg.class).createAlias(
						"Visit", "visit").add(
						Restrictions.eq("visit.Id", visitId)).list();
				map.put("obgList", obgList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> viewOBGTWO(Map<String, Object> parameterMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdObg> obgList = new ArrayList<OpdObg>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();

		try {
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}
			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				obgList = session.createCriteria(OpdObg.class).createAlias(
						"Visit", "visit").add(
						Restrictions.eq("visit.Id", visitId)).list();
				map.put("obgList", obgList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> viewOBGTHREE(Map<String, Object> parameterMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdObg> obgList = new ArrayList<OpdObg>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();

		try {
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}
			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				obgList = session.createCriteria(OpdObg.class).createAlias(
						"Visit", "visit").add(
						Restrictions.eq("visit.Id", visitId)).list();
				map.put("obgList", obgList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> viewOBGFOUR(Map<String, Object> parameterMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdObg> obgList = new ArrayList<OpdObg>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();

		try {
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}
			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				obgList = session.createCriteria(OpdObg.class).createAlias(
						"Visit", "visit").add(
						Restrictions.eq("visit.Id", visitId)).list();
				map.put("obgList", obgList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	// ......................................Report...................................

	@SuppressWarnings("unchecked")
	public List<Object> getHinNoList(String serviceNo) {
		Session session = (Session) getSession();
		List<Object> patientList = new ArrayList<Object>();

		try {

			patientList = session.createCriteria(Patient.class).add(
					Restrictions.eq("ServiceNo", serviceNo)).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return patientList;
	}

	@SuppressWarnings("unchecked")
	public List<Object> getVisitNoList(Map<String, Object> detailsMap) {
		@SuppressWarnings("unchecked")
		Session session = (Session) getSession();
		String serviceNo = "";
		String hinNo = "";
		if (detailsMap.get("serviceNo") != null) {
			serviceNo = (String) detailsMap.get("serviceNo");
		}
		if (detailsMap.get("hinNo") != null) {
			hinNo = (String) detailsMap.get("hinNo");
		}
		List<Object> vistList = new ArrayList<Object>();

		try {
			if (!serviceNo.equals("")) {
				Criteria crit = session.createCriteria(Visit.class)
						.createAlias("Hin", "p").add(
								Restrictions.eq("p.ServiceNo", serviceNo))
						.addOrder(Order.desc("VisitNo"));
				vistList = crit.list();
				// vistList =
				// getHibernateTemplate().find("from Visit v join v.Hin as p where p.ServiceNo = '"+serviceNo+"'");
			}
			if (!hinNo.equals("")) {
				Criteria crit = session.createCriteria(Visit.class)
						.createAlias("Hin", "p").add(
								Restrictions.eq("p.HinNo", hinNo)).addOrder(
								Order.desc("VisitNo"));
				vistList = crit.list();
				// vistList =
				// getHibernateTemplate().find("from Visit v join v.Hin as p where p.HinNo = '"+hinNo+"'");
			}

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return vistList;

	}

	@SuppressWarnings("deprecation")
	public Map<String, Object> getConnectionForReport() {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		Connection con = session.connection();
		map.put("conn", con);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> showDailyDepartmentWiseReportJsp() {

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasDepartment> searchMasDepartmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> searchMasEmployeeList = new ArrayList<MasEmployee>();
		try {
			searchMasDepartmentList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasDepartment");
			searchMasEmployeeList = getHibernateTemplate()
					.find(
							"from jkt.hms.masters.business.MasEmployee as emp where emp.EmpCategory.Id='1'");

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("searchMasDepartmentList", searchMasDepartmentList);
		map.put("searchMasEmployeeList", searchMasEmployeeList);
		return map;

	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> showDailyOPDInvestigationsReportJsp() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasDepartment> searchMasDepartmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> searchMasEmployeeList = new ArrayList<MasEmployee>();
		try {
			searchMasDepartmentList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasDepartment");
			searchMasEmployeeList = getHibernateTemplate()
					.find(
							"from jkt.hms.masters.business.MasEmployee");

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("searchMasDepartmentList", searchMasDepartmentList);
		map.put("searchMasEmployeeList", searchMasEmployeeList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> showDailyOPDPrescriptionsReportJsp() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasDepartment> searchMasDepartmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> searchMasEmployeeList = new ArrayList<MasEmployee>();
		try {
			searchMasDepartmentList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasDepartment");
			searchMasEmployeeList = getHibernateTemplate()
					.find(
							"from jkt.hms.masters.business.MasEmployee");

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("searchMasDepartmentList", searchMasDepartmentList);
		map.put("searchMasEmployeeList", searchMasEmployeeList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> showDailyOPDRankCategoryReportJsp() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasDepartment> searchMasDepartmentList = new ArrayList<MasDepartment>();
		List<MasRankCategory> searchMasRankList = new ArrayList<MasRankCategory>();
		try {
			searchMasDepartmentList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasDepartment");
			searchMasRankList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasRankCategory ");

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("searchMasDepartmentList", searchMasDepartmentList);
		map.put("searchMasRankList", searchMasRankList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> viewPatientAllergicDrug(
			Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<PatientAllergicDrugsHd> searchPatientAllergicDrugsHdList = new ArrayList<PatientAllergicDrugsHd>();
		List<PatientAllergicDrugsDt> searchPatientAllergicDrugsDtList = new ArrayList<PatientAllergicDrugsDt>();
		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				searchPatientAllergicDrugsHdList = session.createCriteria(
						PatientAllergicDrugsHd.class).createAlias("Visit",
						"visit").add(Restrictions.eq("visit.Id", visitId))
						.list();
				if (searchPatientAllergicDrugsHdList.size() > 0) {
					PatientAllergicDrugsHd patientAllergicDrugsHd = (PatientAllergicDrugsHd) searchPatientAllergicDrugsHdList
							.get(0);
					int id = patientAllergicDrugsHd.getId();
					searchPatientAllergicDrugsDtList = session.createCriteria(
							PatientAllergicDrugsDt.class).createAlias(
							"PatientAllergicDrugsHd", "patientAllergicDrugsHd")
							.add(
									Restrictions.eq(
											"patientAllergicDrugsHd.Id", id))
							.list();
				}
				map.put("searchPatientAllergicDrugsHdList",
						searchPatientAllergicDrugsHdList);
				map.put("searchPatientAllergicDrugsDtList",
						searchPatientAllergicDrugsDtList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	// ---------------------------------- Cardiology Department Details
	// ------------------------------------

	public boolean addCardiologyDepartmentDetails(Map<String, Object> infoMap) {
		OpdCardiologyDepartmentDetails cardiologyDepartmentDetails = new OpdCardiologyDepartmentDetails();
		Map<String, Object> returnMap = new HashMap<String, Object>();
		boolean successfullyAdded = false;
		Session session = (Session) getSession();
		int visitId = 0;
		int hospitalId = 0;
		String referredDoctars = (String) infoMap.get("referredDoctars");
		String[] diagnosisIdAray = (String[])infoMap.get("diagnosisIdAray");
		String consultationTime = (String) infoMap.get("consultationTime");
		String consultationDate = (String) infoMap.get("consultationDate");
		String initialDiagnosis = (String) infoMap.get("initialDiagnosis");
		
		int hinId = (Integer) infoMap.get("hinId");
		Date consultationDateToInsert = HMSUtil.convertStringTypeDateToDateType(consultationDate);
		
		if (infoMap.get("cardiologyDepartmentDetails") != null) {
			cardiologyDepartmentDetails = (OpdCardiologyDepartmentDetails) infoMap.get("cardiologyDepartmentDetails");
		}
		if (infoMap.get("visitId") != null) {
			visitId = (Integer) infoMap.get("visitId");
		}
		if (infoMap.get("hospitalId") != null) {
			hospitalId = (Integer) infoMap.get("hospitalId");
		}
		
		String referredDept = (String) infoMap.get("referredDept").toString();
//		Transaction tx = null;
		
		try {
				
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			hbt.save(cardiologyDepartmentDetails);
			
//			tx = session.beginTransaction();
				
			String query = "";
			List objectList = new ArrayList();
			if (diagnosisIdAray != null) {
			for (int i = 0; i < diagnosisIdAray.length; i++) {
						DischargeIcdCode dischargeIcdCode = new DischargeIcdCode();
						Patient patientObj = new Patient();
						patientObj.setId(hinId);
						dischargeIcdCode.setHin(patientObj);
						MasIcd masIcd = new MasIcd();
						//
						// masIcd.setId(Integer.parseInt(diagnosisIdAray[i]));
						// chnaget to Line Below

						if (diagnosisIdAray[i] != null) {
							if (!diagnosisIdAray[i].equals("0")) {
								query = "select icd_id from mas_icd where icd_code='"
										+ diagnosisIdAray[i] + "'";
								objectList = (List) session.createSQLQuery(query)
										.list();
								masIcd.setId(Integer.parseInt(""
										+ objectList.get(0)));
								dischargeIcdCode.setIcd(masIcd);
								dischargeIcdCode
										.setAddEditDate(consultationDateToInsert);
								dischargeIcdCode.setAddEditTime(consultationTime);
								dischargeIcdCode.setStatus("y");
								dischargeIcdCode.setDiagnosisStatus("p");
								Visit visit = new Visit();
								visit.setId(visitId);

								dischargeIcdCode.setVisit(visit);

								hbt.save(dischargeIcdCode);
							}
						}
					}
				}
			
			Visit visitObjToUpdate = (Visit) hbt.load(Visit.class, visitId);
			visitObjToUpdate.setVisitStatus("C");
			hbt.update(visitObjToUpdate);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

			opdPatientDetails.setReferredDept(referredDept);
			
			opdPatientDetails.setReferedDoctars(referredDoctars);
			
			opdPatientDetails.setInitialDiagnosis(initialDiagnosis);
			
			MasHospital masHospital = (MasHospital) hbt.load(MasHospital.class,hospitalId);
			opdPatientDetails.setHospital(masHospital);

			opdPatientDetails.setVisit(visitObjToUpdate);
			hbt.save(opdPatientDetails);
			// --------------values to be entered in discharge table for
			// diagnosis----------------------
			
			
		successfullyAdded = true;
	//	tx.commit();
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
	
	 	//returnMap.put("successfullyAdded", successfullyAdded);
		return successfullyAdded;

	}

	public boolean updateCardiologyDepartmentDetails(Map<String, Object> infoMap) {
		boolean successfullyAdded = false;
		int cardiologyId = 0;
		int userId = 0;
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

		String date = "";
		String time = "";
		String tmtReport = "";
		String echoCardiology = "";
		String holter = "";
		String cardiacCathetizationData = "";
		String remarks = "";
		Session session = (Session) getSession();
		
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");
		int visitId=0;
		int hinId = (Integer) infoMap.get("hinId");
		if (infoMap.get("visitId") != null) {
			visitId = (Integer) infoMap.get("visitId");
		}
		
		if (infoMap.get("cardiacCathetizationData") != null) {
			cardiacCathetizationData = (String) infoMap
					.get("cardiacCathetizationData");
		}
		if (infoMap.get("remarks") != null) {
			remarks = (String) infoMap.get("remarks");
		}
		if (infoMap.get("holter") != null) {
			holter = (String) infoMap.get("holter");
		}
		if (infoMap.get("echoCardiology") != null) {
			echoCardiology = (String) infoMap.get("echoCardiology");
		}
		if (infoMap.get("tmtReport") != null) {
			tmtReport = (String) infoMap.get("tmtReport");
		}
		if (infoMap.get("cardiologyId") != null) {
			cardiologyId = (Integer) infoMap.get("cardiologyId");
		}
		if (infoMap.get("userId") != null) {
			userId = (Integer) infoMap.get("userId");
		}
		
	//	String referredDoctars = (String) infoMap.get("referredDoctars");
		String[] diagnosisIdAray = (String[])infoMap.get("diagnosisIdAray");
		String consultationTime = (String) infoMap.get("consultationTime");
		String consultationDate = (String) infoMap.get("consultationDate");
		String initialDiagnosis = (String) infoMap.get("initialDiagnosis");
		Date consultationDateToInsert = HMSUtil.convertStringTypeDateToDateType(consultationDate);
	

		int opdPatientDetailsId = 0;
		if (infoMap.get("opdPatientDetailsId") != null) {
			opdPatientDetailsId = (Integer) infoMap.get("opdPatientDetailsId");
		}
		
		String query = "";
		List objectList = new ArrayList();
		try {
			OpdCardiologyDepartmentDetails cardiologyDepartmentDetails = (OpdCardiologyDepartmentDetails) hbt
					.load(OpdCardiologyDepartmentDetails.class, cardiologyId);

			cardiologyDepartmentDetails.setLastChgTime(time);
			cardiologyDepartmentDetails.setLastChgBy(userId);
			cardiologyDepartmentDetails.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(date));

			cardiologyDepartmentDetails
					.setCardiacCathetizationData(cardiacCathetizationData);
			cardiologyDepartmentDetails.setEchoCardiology(echoCardiology);
			cardiologyDepartmentDetails.setHolter(holter);
			cardiologyDepartmentDetails.setRemarks(remarks);
			cardiologyDepartmentDetails.setTmtReport(tmtReport);

			hbt.update(cardiologyDepartmentDetails);
			hbt.refresh(cardiologyDepartmentDetails);
			
			OpdPatientDetails opdPatientDetails = (OpdPatientDetails) hbt.load(OpdPatientDetails.class, opdPatientDetailsId);
			opdPatientDetails.setInitialDiagnosis(initialDiagnosis);
			hbt.saveOrUpdate(opdPatientDetails);
			
			List<DischargeIcdCode> dischargeIcdCodeOldList = new ArrayList<DischargeIcdCode>();
			dischargeIcdCodeOldList = (List<DischargeIcdCode>) session.createCriteria(DischargeIcdCode.class).add(Restrictions.eq("Hin.Id", hinId)).add(Restrictions.eq("Visit.Id", visitId)).list();
			for (DischargeIcdCode dischargeIcdCode : dischargeIcdCodeOldList) {
				session.delete(dischargeIcdCode);
			}
			if (diagnosisIdAray != null) {
				for (int i = 0; i < diagnosisIdAray.length; i++) {
					if (diagnosisIdAray[i] != null) {
						if (!diagnosisIdAray[i].equals("0")) {
							MasIcd masIcd = new MasIcd();
							query = "select icd_id from mas_icd where icd_code='"
									+ diagnosisIdAray[i] + "'";
							objectList = (List) session.createSQLQuery(query)
									.list();
							masIcd.setId(Integer.parseInt(""
									+ objectList.get(0)));

							DischargeIcdCode dischargeIcdCode = new DischargeIcdCode();
							dischargeIcdCode.setIcd(masIcd);
							Patient patientObj = new Patient();
							patientObj.setId(hinId);
							dischargeIcdCode.setHin(patientObj);
							dischargeIcdCode
									.setAddEditDate(consultationDateToInsert);
							dischargeIcdCode.setAddEditTime(consultationTime);
							dischargeIcdCode.setStatus("y");
							dischargeIcdCode.setDiagnosisStatus("p");
							Visit visit = new Visit();
							visit.setId(visitId);

							dischargeIcdCode.setVisit(visit);

							hbt.save(dischargeIcdCode);
						}
					}
				}
			}
			
			

			successfullyAdded = true;
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return successfullyAdded;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getCardiologyDepartmentDetails(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List<OpdCardiologyDepartmentDetails> opdCardiologyDepartmentDetailsList = new ArrayList<OpdCardiologyDepartmentDetails>();
		List<MasDepartment> deptList = new ArrayList<MasDepartment>();
		List<DischargeIcdCode> dischargeIcdCodeList = new ArrayList<DischargeIcdCode>();
		Map<String, Object> map = new HashMap<String, Object>();
	/*	int visitNo = 0;
		int hinId = 0;

		List<Visit> visitNoList = new ArrayList<Visit>();

		List<OpdPatientDetails> opdPatientDetailsList = new ArrayList<OpdPatientDetails>();
		
		List<MasEmployee> doctarsList = new ArrayList<MasEmployee>();
	*/
		
		try {
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();
			opdCardiologyDepartmentDetailsList = session.createCriteria(
					OpdCardiologyDepartmentDetails.class).createAlias("Visit",
					"visit").add(Restrictions.eq("visit.Id", visitId)).list();
			map.put("opdCardiologyDepartmentDetailsList",
					opdCardiologyDepartmentDetailsList);
			/*			
			if (map.get("visitNo") != null) {
				visitNo = (Integer) map.get("visitNo");
				//System.out.println("visitNo" + visitNo);
			}
			if (map.get("hinId") != null) {
				hinId = (Integer) map.get("hinId");
				//System.out.println("hinId" + hinId);
			}
	
			
			
		visitNoList = (List<Visit>) session.createCriteria(Visit.class)
			.add(Restrictions.eq("Id", visitNo))
			.createAlias("Hin", "h")
			.add(Restrictions.eq("h.Id", hinId)).list();

	//System.out.println("visitNoList" + visitNoList.size());

	Visit visit = new Visit();
	if (visitNoList != null && visitNoList.size() > 0) {
		visit = visitNoList.get(0);
	}
	map.put("visit", visit);
		*/	
			
			dischargeIcdCodeList = (List<DischargeIcdCode>) session
			.createCriteria(DischargeIcdCode.class).createAlias(
					"Visit", "v").add(
					Restrictions.eq("v.Id", visitId)).list();
			//System.out.println("dischargeIcdCodeList"	+ dischargeIcdCodeList.size());
			if (dischargeIcdCodeList != null && dischargeIcdCodeList.size() > 0)
				map.put("dischargeIcdCodeList", dischargeIcdCodeList);
	
			
			
			List<String> departmentTypeCode = new ArrayList<String>();
			departmentTypeCode.add("CR");
			departmentTypeCode.add("OPD1");
			departmentTypeCode.add("SpltOPD");

			deptList = session.createCriteria(MasDepartment.class).createAlias(
					"DepartmentType", "deptType").add(
					Restrictions.eq("Status", "y")).add(
					Restrictions.in("deptType.DepartmentTypeCode",
							departmentTypeCode)).list();

			
			List<OpdPatientDetails> opdPatientDetailsList = new ArrayList<OpdPatientDetails>();
			opdPatientDetailsList = (List<OpdPatientDetails>) session.createCriteria(OpdPatientDetails.class).createAlias("Visit", "visit").add(Restrictions.eq("visit.Id", visitId)).list();
			if (opdPatientDetailsList != null && opdPatientDetailsList.size() > 0) {
				map.put("opdPatientDetailsList", opdPatientDetailsList);
			}
			
			
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		map.put("deptList", deptList);
		return map;
	}
	public Map<String, Object> viewCardiologyDepartmentDetails(
			Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdCardiologyDepartmentDetails> opdCardiologyDepartmentDetailsList = new ArrayList<OpdCardiologyDepartmentDetails>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {
			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				opdCardiologyDepartmentDetailsList = session.createCriteria(
						OpdCardiologyDepartmentDetails.class).createAlias(
						"Visit", "visit").add(
						Restrictions.eq("visit.Id", visitId)).list();
				map.put("opdCardiologyDepartmentDetailsList",
						opdCardiologyDepartmentDetailsList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}


	// -------------------------------- Gastro-Enterology
	// Endoscopy----------------------------

	public boolean addGastroEnterologyEndoscopy(Map<String, Object> infoMap) {
		OpdGastroEnterologyEndoscopy gastroEnterologyEndoscopy = new OpdGastroEnterologyEndoscopy();
		boolean successfullyAdded = false;
		int visitId = 0;
		int hospitalId = 0;
		if (infoMap.get("gastroEnterologyEndoscopy") != null) {
			gastroEnterologyEndoscopy = (OpdGastroEnterologyEndoscopy) infoMap
					.get("gastroEnterologyEndoscopy");
		}
		if (infoMap.get("visitId") != null) {
			visitId = (Integer) infoMap.get("visitId");
		}
		if (infoMap.get("hospitalId") != null) {
			hospitalId = (Integer) infoMap.get("hospitalId");
		}
		String referredDept = (String) infoMap.get("referredDept").toString();

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			hbt.saveOrUpdate(gastroEnterologyEndoscopy);

			Visit visitObjToUpdate = (Visit) hbt.load(Visit.class, visitId);
			visitObjToUpdate.setVisitStatus("C");
			hbt.update(visitObjToUpdate);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

			opdPatientDetails.setReferredDept(referredDept);

			MasHospital masHospital = (MasHospital) hbt.load(MasHospital.class,
					hospitalId);
			opdPatientDetails.setHospital(masHospital);

			opdPatientDetails.setVisit(visitObjToUpdate);
			hbt.save(opdPatientDetails);

//--------------values to be entered in discharge table for diagnosis---------------
			String query = "";
			Session session = (Session) getSession();
			String[] diagnosisIdAray = (String[]) infoMap.get("diagnosisIdAray");
			List objectList = new ArrayList();
			session.createSQLQuery("delete * from discharge_icd_code where hin_id='"+visitObjToUpdate.getHin().getId()+"' and visit_id='"+visitId+"'");
			if (diagnosisIdAray != null) {
				for (int i = 0; i < diagnosisIdAray.length; i++) {
					DischargeIcdCode dischargeIcdCode = new DischargeIcdCode();
					Patient patientObj = new Patient();
					patientObj.setId(visitObjToUpdate.getHin().getId());
					dischargeIcdCode.setHin(patientObj);
					MasIcd masIcd = new MasIcd();
					//
					// masIcd.setId(Integer.parseInt(diagnosisIdAray[i]));
					// chnaget to Line Below

					if (diagnosisIdAray[i] != null) {
						if (!diagnosisIdAray[i].equals("0")) {
							query = "select icd_id from mas_icd where icd_code='"
									+ diagnosisIdAray[i] + "'";
							objectList = (List) session.createSQLQuery(query)
									.list();
							masIcd.setId(Integer.parseInt(""
									+ objectList.get(0)));
							dischargeIcdCode.setIcd(masIcd);
						//	dischargeIcdCode.setAddEditDate(consultationDateToInsert);
						//	dischargeIcdCode.setAddEditTime(consultationTime);
							dischargeIcdCode.setStatus("y");
							dischargeIcdCode.setDiagnosisStatus("p");
							Visit visit = new Visit();
							visit.setId(visitId);

							dischargeIcdCode.setVisit(visit);

							hbt.save(dischargeIcdCode);
						}
					}
				}
			}
			//-----------------
			successfullyAdded = true;
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return successfullyAdded;

	}

	public Map<String, Object> getGastroEnterologyEndoscopy(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<Integer> gastroEnterologyEndoscopyList = new ArrayList<Integer>();
		List<OpdGastroEnterologyEndoscopy> opdGastroEnterologyEndoscopyList = null ; 
		List<DischargeIcdCode> dischargeIcdCodeList = null;
		OpdGastroEnterologyEndoscopy opdGastroEnterologyEndoscopy = null ; 
		Map<String, Object> map = new HashMap<String, Object>();
		int maxNo = 0;
		String repNo = "";
		try {
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();
			employeeList = getHibernateTemplate()
					.find(
							"from jkt.hms.masters.business.MasEmployee as emp where emp.Status='y' and emp.EmpCategory.Id='1'");
			gastroEnterologyEndoscopyList = getHibernateTemplate()
					.find(
							"select max(odee.Id) from jkt.hms.masters.business.OpdGastroEnterologyEndoscopy as odee");
			opdGastroEnterologyEndoscopyList = session.createCriteria(OpdGastroEnterologyEndoscopy.class)
			                                  .createAlias("Visit", "v")
											  .add(Restrictions.eq("v.Id", visitId)).list();
			dischargeIcdCodeList=session.createCriteria(DischargeIcdCode.class)
									.createAlias("Visit","v" ).add(Restrictions.eq("v.Id",visitId)).list();
			if(opdGastroEnterologyEndoscopyList==null || opdGastroEnterologyEndoscopyList.size()==0 ){
			if (gastroEnterologyEndoscopyList.get(0) != null) {
				maxNo = gastroEnterologyEndoscopyList.get(0);
				repNo = String.valueOf(maxNo + 1);
			} else {
				repNo = String.valueOf(1);
			}}else{
				opdGastroEnterologyEndoscopy = (OpdGastroEnterologyEndoscopy)opdGastroEnterologyEndoscopyList.get(0);
				repNo = opdGastroEnterologyEndoscopy.getReportNo();
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("reportNo", repNo);
		map.put("employeeList", employeeList);
		map.put("patientDataList", patientDataList);
		map.put("opdGastroEnterologyEndoscopy", opdGastroEnterologyEndoscopy);
		map.put("dischargeIcdCodeList",dischargeIcdCodeList);
		return map;
	}

	public Map<String, Object> viewGastroEnterologyEndoscopy(Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int hinId = 0;
		int visitNo = 0;
		int max = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdGastroEnterologyEndoscopy> opdGastroEnterologyEndoscopyList = new ArrayList<OpdGastroEnterologyEndoscopy>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {
			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0 && visitList != null) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				opdGastroEnterologyEndoscopyList = session.createCriteria(
						OpdGastroEnterologyEndoscopy.class).createAlias(
						"Visit", "visit").add(
						Restrictions.eq("visit.Id", visitId)).list();
				map.put("opdGastroEnterologyEndoscopyList",
						opdGastroEnterologyEndoscopyList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	// -------------------------------- Gastro-Enterology
	// Colonoscopy----------------------------

	public boolean addGastroEnterologyColonoscopy(Map<String, Object> infoMap) {
		OpdGastroEnterologyColonoscopy gastroEnterologyColonoscopy = new OpdGastroEnterologyColonoscopy();
		boolean successfullyAdded = false;
		int visitId = 0;
		int hospitalId = 0;
		if (infoMap.get("gastroEnterologyColonoscopy") != null) {
			gastroEnterologyColonoscopy = (OpdGastroEnterologyColonoscopy) infoMap
					.get("gastroEnterologyColonoscopy");
		}
		if (infoMap.get("visitId") != null) {
			visitId = (Integer) infoMap.get("visitId");
		}
		if (infoMap.get("hospitalId") != null) {
			hospitalId = (Integer) infoMap.get("hospitalId");
		}
		String referredDept = (String) infoMap.get("referredDept").toString();

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			hbt.saveOrUpdate(gastroEnterologyColonoscopy);

			Visit visitObjToUpdate = (Visit) hbt.load(Visit.class, visitId);
			visitObjToUpdate.setVisitStatus("C");
			hbt.update(visitObjToUpdate);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

			opdPatientDetails.setReferredDept(referredDept);

			MasHospital masHospital = (MasHospital) hbt.load(MasHospital.class,
					hospitalId);
			opdPatientDetails.setHospital(masHospital);

			opdPatientDetails.setVisit(visitObjToUpdate);
			hbt.save(opdPatientDetails);

			successfullyAdded = true;
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return successfullyAdded;

	}

	public Map<String, Object> getGastroEnterologyColonoscopy(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<Integer> gastroEnterologyColonoscopyList = new ArrayList<Integer>();
		List<OpdGastroEnterologyColonoscopy> opdGastroEnterologyColonoscopyList = null ;
		OpdGastroEnterologyColonoscopy opdGastroEnterologyColonoscopy = null ;
		Map<String, Object> map = new HashMap<String, Object>();
		int maxNo = 0;
		String repNo = "";
		try {
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();
			employeeList = getHibernateTemplate()
					.find(
							"from jkt.hms.masters.business.MasEmployee as emp where emp.Status='y' and emp.EmpCategory.Id='1'");
			gastroEnterologyColonoscopyList = getHibernateTemplate()
					.find(
							"select max(odee.Id) from jkt.hms.masters.business.OpdGastroEnterologyColonoscopy as odee");
			opdGastroEnterologyColonoscopyList = session.createCriteria(OpdGastroEnterologyColonoscopy.class)
												 .createAlias("Visit", "v").add(Restrictions.eq("v.Id",visitId )).list();
			
			if(opdGastroEnterologyColonoscopyList==null || opdGastroEnterologyColonoscopyList.size()==0){
			if (gastroEnterologyColonoscopyList.get(0) != null) {
				maxNo = gastroEnterologyColonoscopyList.get(0);
				repNo = String.valueOf(maxNo + 1);
			} else {
				repNo = String.valueOf(1);
			}}else{
				opdGastroEnterologyColonoscopy = (OpdGastroEnterologyColonoscopy)opdGastroEnterologyColonoscopyList.get(0);
				repNo = opdGastroEnterologyColonoscopy.getReportNo();
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("reportNo", repNo);
		map.put("employeeList", employeeList);
		map.put("patientDataList", patientDataList);
		map.put("opdGastroEnterologyColonoscopy",opdGastroEnterologyColonoscopy);
		return map;
	}

	public Map<String, Object> viewGastroEnterologyColonoscopy(
			Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdGastroEnterologyColonoscopy> opdGastroEnterologyColonoscopyList = new ArrayList<OpdGastroEnterologyColonoscopy>();
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {
			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				opdGastroEnterologyColonoscopyList = session.createCriteria(
						OpdGastroEnterologyColonoscopy.class).createAlias(
						"Visit", "visit").add(
						Restrictions.eq("visit.Id", visitId)).list();
				map.put("opdGastroEnterologyColonoscopyList",
						opdGastroEnterologyColonoscopyList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	public boolean addAntenatalCard(Map<String, Object> infoMap) {
		OpdAntenatalCard antenatalCard = new OpdAntenatalCard();
		boolean successfullyAdded = false;
		int visitId = 0;
		int hospitalId = 0;
		if (infoMap.get("antenatalCard") != null) {
			antenatalCard = (OpdAntenatalCard) infoMap.get("antenatalCard");
		}
		if (infoMap.get("visitId") != null) {
			visitId = (Integer) infoMap.get("visitId");
		}
		if (infoMap.get("hospitalId") != null) {
			hospitalId = (Integer) infoMap.get("hospitalId");
		}
		String referredDept = (String) infoMap.get("referredDept").toString();

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			hbt.save(antenatalCard);

			/*
			 * Visit visitObjToUpdate = (Visit)hbt.load(Visit.class, visitId);
			 * visitObjToUpdate.setVisitStatus("C");
			 * hbt.update(visitObjToUpdate);
			 */

			/*
			 * OpdPatientDetails opdPatientDetails = new OpdPatientDetails();
			 * 
			 * 
			 * opdPatientDetails.setReferredDept(referredDept);
			 * 
			 * MasHospital masHospital =
			 * (MasHospital)hbt.load(MasHospital.class, hospitalId);
			 * opdPatientDetails.setHospital(masHospital);
			 * 
			 * 
			 * opdPatientDetails.setVisit(visitObjToUpdate);
			 * hbt.save(opdPatientDetails);
			 */

			successfullyAdded = true;
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return successfullyAdded;

	}

	public Map<String, Object> getAntenatalCard(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List opdAntenatalCardList = new ArrayList();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();

			opdAntenatalCardList = session
					.createQuery(
							"select emp, max(emp.Id) from OpdAntenatalCard as emp where emp.Status='y' group by emp.Id")
					.list();
			if (opdAntenatalCardList.size() > 0) {
				Iterator iterator = opdAntenatalCardList.iterator();
				while (iterator.hasNext()) {
					Object[] pair = (Object[]) iterator.next();
					OpdAntenatalCard opdAntenatalCard = (OpdAntenatalCard) pair[0];
					int max = (Integer) pair[1];
					map.put("opdAntenatalCardList", opdAntenatalCardList);
				}

			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		return map;
	}

	public Map<String, Object> viewAntenatalCard(
			Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdAntenatalCard> opdAntenatalCardList = new ArrayList<OpdAntenatalCard>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {
			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				opdAntenatalCardList = session.createCriteria(
						OpdAntenatalCard.class).createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", visitId)).list();
				map.put("opdAntenatalCardList", opdAntenatalCardList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> updateAntenatalCard(Box box) {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		/*
		 * int hinId = 0; int visitId = 0; int userId=0; int departmentId=0; int
		 * hospitalId = 0;
		 */
		try {

			/*
			 * visitId = box.getInt(VISIT_ID); hinId = box.getInt(HIN_ID);
			 * userId = box.getInt("userId"); departmentId =
			 * box.getInt("departmentId"); hospitalId =
			 * box.getInt("hospitalId");
			 */
			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");
			Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
			/*
			 * Patient patient = new Patient(); patient.setId(hinId);
			 * 
			 * 
			 * Visit visit = new Visit(); visit.setId(visitId);
			 * 
			 * MasDepartment masDepartment = new MasDepartment();
			 * masDepartment.setId(departmentId);
			 * 
			 * MasHospital masHospital = new MasHospital();
			 * masHospital.setId(hospitalId);
			 */

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			Vector id = box.getVector(ANTENATAL_CARD_ID);
			Vector fhsFmEdit = box.getVector(FHS_FM_EDIT);
			Vector urineEdit = box.getVector(URINE_EDIT);
			Vector hbGmsEdit = box.getVector(HB_GMS_EDIT);
			for (int i = 0; i < id.size(); i++) {

				OpdAntenatalCard antenatalCardObj = new OpdAntenatalCard();
				if (id.get(i) != null && !id.get(i).equals("")) {
					int aId = Integer.parseInt(id.get(i).toString());
					antenatalCardObj = (OpdAntenatalCard) getHibernateTemplate()
							.load(OpdAntenatalCard.class, aId);

					if (fhsFmEdit.get(i) != null
							&& !fhsFmEdit.get(i).equals("")) {
						antenatalCardObj.setFhsFm((String) fhsFmEdit.get(i));
					}
					if (urineEdit.get(i) != null
							&& !urineEdit.get(i).equals("")) {
						antenatalCardObj.setUrine((String) urineEdit.get(i));
					}
					if (hbGmsEdit.get(i) != null
							&& !hbGmsEdit.get(i).equals("")) {
						antenatalCardObj.setHbGms((String) hbGmsEdit.get(i));
					}

					/*
					 * antenatalCardObj.setDepartment(masDepartment);
					 * antenatalCardObj.setHospital(masHospital);
					 * antenatalCardObj.setHin(patient);
					 * antenatalCardObj.setVisit(visit);
					 * antenatalCardObj.setLastChgBy(userId);
					 */
					antenatalCardObj.setStatus("y");
					antenatalCardObj.setLastChgDate(date);
					antenatalCardObj.setLastChgTime(time);

					hbt.update(antenatalCardObj);

				}
			}

			saved = true;
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;

	}

	public Map<String, Object> getAntenatalCardEdit(int aId, int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List<OpdAntenatalCard> opdAntenatalCardList = new ArrayList<OpdAntenatalCard>();
		Map<String, Object> map = new HashMap<String, Object>();
		try {

			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();
			opdAntenatalCardList = session.createCriteria(
					OpdAntenatalCard.class).add(Restrictions.eq("Id", aId))
					.list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		map.put("opdAntenatalCardList", opdAntenatalCardList);
		return map;
	}

	public Map<String, Object> getGravidagramHTN(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		return map;
	}

	public boolean addGravidagramHTN(Map<String, Object> infoMap) {
		OpdGravidagramHtn gravidagramHtn = new OpdGravidagramHtn();
		boolean successfullyAdded = false;
		int visitId = 0;
		int hospitalId = 0;
		if (infoMap.get("gravidagramHtn") != null) {
			gravidagramHtn = (OpdGravidagramHtn) infoMap.get("gravidagramHtn");
		}
		if (infoMap.get("visitId") != null) {
			visitId = (Integer) infoMap.get("visitId");
		}
		if (infoMap.get("hospitalId") != null) {
			hospitalId = (Integer) infoMap.get("hospitalId");
		}
		String referredDept = (String) infoMap.get("referredDept").toString();

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			hbt.save(gravidagramHtn);

			Visit visitObjToUpdate = (Visit) hbt.load(Visit.class, visitId);
			visitObjToUpdate.setVisitStatus("C");
			hbt.update(visitObjToUpdate);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

			opdPatientDetails.setReferredDept(referredDept);

			MasHospital masHospital = (MasHospital) hbt.load(MasHospital.class,
					hospitalId);
			opdPatientDetails.setHospital(masHospital);

			opdPatientDetails.setVisit(visitObjToUpdate);
			hbt.save(opdPatientDetails);

			successfullyAdded = true;
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return successfullyAdded;

	}

	public Map<String, Object> viewGravidagramHTN(
			Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdGravidagramHtn> opdGravidagramHtnList = new ArrayList<OpdGravidagramHtn>();
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {
			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				opdGravidagramHtnList = session.createCriteria(
						OpdGravidagramHtn.class).createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", visitId)).list();
				map.put("opdGravidagramHtnList", opdGravidagramHtnList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	public Map<String, Object> getGravidagramGestationalDiabitiesOne(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		return map;
	}

	public boolean addGravidagramGestationalDiabitiesOne(
			Map<String, Object> infoMap) {
		OpdGravidagramGestationalDiabitiesOne gravidagramGestationalDiabitiesOne = new OpdGravidagramGestationalDiabitiesOne();
		boolean successfullyAdded = false;
		int visitId = 0;
		int hospitalId = 0;
		if (infoMap.get("gravidagramGestationalDiabitiesOne") != null) {
			gravidagramGestationalDiabitiesOne = (OpdGravidagramGestationalDiabitiesOne) infoMap
					.get("gravidagramGestationalDiabitiesOne");
		}
		if (infoMap.get("visitId") != null) {
			visitId = (Integer) infoMap.get("visitId");
		}
		if (infoMap.get("hospitalId") != null) {
			hospitalId = (Integer) infoMap.get("hospitalId");
		}
		String referredDept = (String) infoMap.get("referredDept").toString();

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			hbt.save(gravidagramGestationalDiabitiesOne);

			Visit visitObjToUpdate = (Visit) hbt.load(Visit.class, visitId);
			visitObjToUpdate.setVisitStatus("C");
			hbt.update(visitObjToUpdate);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

			opdPatientDetails.setReferredDept(referredDept);

			MasHospital masHospital = (MasHospital) hbt.load(MasHospital.class,
					hospitalId);
			opdPatientDetails.setHospital(masHospital);

			opdPatientDetails.setVisit(visitObjToUpdate);
			hbt.save(opdPatientDetails);

			successfullyAdded = true;
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return successfullyAdded;

	}

	public Map<String, Object> viewGravidagramGestationalDiabitiesOne(
			Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdGravidagramGestationalDiabitiesOne> opdGravidagramGestationalDiabitiesOneList = new ArrayList<OpdGravidagramGestationalDiabitiesOne>();
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {
			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				opdGravidagramGestationalDiabitiesOneList = session
						.createCriteria(
								OpdGravidagramGestationalDiabitiesOne.class)
						.createAlias("Visit", "visit").add(
								Restrictions.eq("visit.Id", visitId)).list();
				map.put("opdGravidagramGestationalDiabitiesOneList",
						opdGravidagramGestationalDiabitiesOneList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	public Map<String, Object> getGravidagramGestationalDiabitiesTwo(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		return map;
	}

	public boolean addGravidagramGestationalDiabitiesTwo(
			Map<String, Object> infoMap) {
		OpdGravidagramGestationalDiabitiesTwo gravidagramGestationalDiabitiesTwo = new OpdGravidagramGestationalDiabitiesTwo();
		boolean successfullyAdded = false;
		int visitId = 0;
		int hospitalId = 0;
		if (infoMap.get("gravidagramGestationalDiabitiesTwo") != null) {
			gravidagramGestationalDiabitiesTwo = (OpdGravidagramGestationalDiabitiesTwo) infoMap
					.get("gravidagramGestationalDiabitiesTwo");
		}
		if (infoMap.get("visitId") != null) {
			visitId = (Integer) infoMap.get("visitId");
		}
		if (infoMap.get("hospitalId") != null) {
			hospitalId = (Integer) infoMap.get("hospitalId");
		}
		String referredDept = (String) infoMap.get("referredDept").toString();

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			hbt.save(gravidagramGestationalDiabitiesTwo);

			Visit visitObjToUpdate = (Visit) hbt.load(Visit.class, visitId);
			visitObjToUpdate.setVisitStatus("C");
			hbt.update(visitObjToUpdate);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

			opdPatientDetails.setReferredDept(referredDept);

			MasHospital masHospital = (MasHospital) hbt.load(MasHospital.class,
					hospitalId);
			opdPatientDetails.setHospital(masHospital);

			opdPatientDetails.setVisit(visitObjToUpdate);
			hbt.save(opdPatientDetails);

			successfullyAdded = true;
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return successfullyAdded;

	}

	public Map<String, Object> viewGravidagramGestationalDiabitiesTwo(
			Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdGravidagramGestationalDiabitiesTwo> opdGravidagramGestationalDiabitiesTwoList = new ArrayList<OpdGravidagramGestationalDiabitiesTwo>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {
			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				opdGravidagramGestationalDiabitiesTwoList = session
						.createCriteria(
								OpdGravidagramGestationalDiabitiesTwo.class)
						.createAlias("Visit", "visit").add(
								Restrictions.eq("visit.Id", visitId)).list();
				map.put("opdGravidagramGestationalDiabitiesTwoList",
						opdGravidagramGestationalDiabitiesTwoList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	// ------------------------Mehod For Generate to Order
	// Number-----------------
	public String generateOrderNumber(int hospitalId) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<TransactionSequence> orderSeqNoList = new ArrayList<TransactionSequence>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = "";

		Session session = (Session) getSession();
		String orderSeqNo = "";
		date = (String) utilMap.get("currentDate");
		String currentyear = "";
		String currentYear = date.substring(date.lastIndexOf("/") + 1);
		String lastOrderNo = "";
		String lastOrderYear = "";
		int seqNo = 1;
		List<DgOrderhd> orderNoList = new ArrayList<DgOrderhd>();
       /*
		orderNoList = session.createCriteria(DgOrderhd.class).list();
		for (DgOrderhd dgOrderhd : orderNoList) {
			lastOrderNo = dgOrderhd.getOrderNo();
		}
		System.out.println("lastOrderNo i ----"+lastOrderNo);
		StringTokenizer str = new StringTokenizer(lastOrderNo, "/");
		while (str.hasMoreTokens()) {

			lastOrderYear = str.nextToken();

		}
		System.out.println("lastOrderYear i ----"+lastOrderYear);
		*/
		try {
			orderSeqNoList = session.createCriteria(TransactionSequence.class)
					.add(Restrictions.eq("TransactionPrefix", "ON")).add(Restrictions.eq("Hospital.Id", hospitalId)).list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

		if (orderSeqNoList.size() > 0) {
		//	for (TransactionSequence transactionSequence : orderSeqNoList) {
				TransactionSequence obj = (TransactionSequence) orderSeqNoList
						.get(0);
				int id = obj.getId();
				String seqNoStr=obj.getTransactionSequenceNumber().toString();
				lastOrderYear=obj.getMonth().toString();
				if (currentYear.equals(lastOrderYear)) {
					
					seqNo = Integer.parseInt(seqNoStr);
				} else {
					seqNo = 0;
					lastOrderYear=currentYear;
				}
				seqNo=seqNo+1;

				TransactionSequence transactionSequenceObj = (TransactionSequence) hbt
				.load(TransactionSequence.class, id);
		        
				orderSeqNo = orderSeqNo.concat(String.valueOf(seqNo));
				//orderSeqNo = orderSeqNo.concat("/").concat(String.valueOf(lastOrderYear));
				transactionSequenceObj.setTransactionSequenceNumber(Integer.parseInt(orderSeqNo));
				transactionSequenceObj.setMonth(Integer.parseInt(lastOrderYear));
				hbt.update(transactionSequenceObj);
		       hbt.refresh(transactionSequenceObj);
		       
		//	}
		} else if (orderSeqNoList.size() == 0) {
			TransactionSequence tsObj = new TransactionSequence();
			tsObj.setStatus("y");
			tsObj.setTablename("DgOrderhd");
			tsObj.setTransactionPrefix("ON");
			tsObj.setTransactionSequenceName("Order No");
			orderSeqNo = orderSeqNo.concat(String.valueOf(seqNo));
			//orderSeqNo = orderSeqNo.concat("/").concat(String.valueOf(currentYear));
			lastOrderYear=currentYear;
			tsObj.setTransactionSequenceNumber(Integer.parseInt(orderSeqNo));
			tsObj.setMonth(Integer.parseInt(currentYear));
			MasHospital hospital = new MasHospital();
			hospital.setId(hospitalId);
			tsObj.setHospital(hospital);
			hbt.save(tsObj);
		}
		orderSeqNo = orderSeqNo.concat("/").concat(String.valueOf(lastOrderYear));
		
		return orderSeqNo;
	}

	public Map<String, Object> addOncosurgeryCaseSheet(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;

		int hinId = 0;
		int visitId = 0;
		int departmentId = 0;
		int hospitalId = 0;
		String cityScan = "";
		String others = "";
		String biopsyNo = "";
		String fancNo = "";
		String clinicalDiagnosis = "";
		String tumour = "";
		String lx = "";
		String mets = "";
		String operationFindingsOthers = "";
		String operationDateProcedure = "";
		String hpe = "";

		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		String referredDept = (String) box.get("referredDept").toString();
		try {

			visitId = box.getInt("visitId");
			hinId = box.getInt("hinId");
			departmentId = box.getInt("departmentId");
			hospitalId = box.getInt("hospitalId");

			cityScan = box.getString(CITY_SCAN);
			others = box.getString(OTHERS);
			biopsyNo = box.getString(BIOSPSY_NO);
			fancNo = box.getString(FANC_NO);
			clinicalDiagnosis = box.getString(CLINICAL_DIAGNOSIS);
			tumour = box.getString(TUMOUR);
			lx = box.getString(LX);
			mets = box.getString(METS);
			operationFindingsOthers = box.getString(OPERATION_FINDINGS_OTHERS);
			operationDateProcedure = box.getString(OPERATION_DATE_PROCEDURE);
			hpe = box.getString(HPE);

			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");
			String userName = "";
			userName = box.getString("userName");
			Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
			Patient patient = new Patient();
			patient.setId(hinId);

			Visit visit = new Visit();
			visit.setId(visitId);

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);

			OpdOncosurgeryCaseSheet opdOncosurgeryCaseSheet = new OpdOncosurgeryCaseSheet();

			opdOncosurgeryCaseSheet.setDepartment(masDepartment);
			opdOncosurgeryCaseSheet.setHin(patient);
			opdOncosurgeryCaseSheet.setVisit(visit);
			opdOncosurgeryCaseSheet.setHospital(masHospital);

			opdOncosurgeryCaseSheet.setBiopsyNo(biopsyNo);
			opdOncosurgeryCaseSheet.setCityScan(cityScan);
			opdOncosurgeryCaseSheet.setClinicalDiagnosis(clinicalDiagnosis);
			opdOncosurgeryCaseSheet.setFancNo(fancNo);
			opdOncosurgeryCaseSheet.setHpe(hpe);
			opdOncosurgeryCaseSheet.setLx(lx);
			opdOncosurgeryCaseSheet
					.setOperationDateProcedure(operationDateProcedure);
			opdOncosurgeryCaseSheet.setMets(mets);
			opdOncosurgeryCaseSheet
					.setOperationFindingsOthers(operationFindingsOthers);
			opdOncosurgeryCaseSheet.setOthers(others);
			opdOncosurgeryCaseSheet.setTumour(tumour);

			opdOncosurgeryCaseSheet.setStatus("y");
			opdOncosurgeryCaseSheet.setLastChgDate(date);
			opdOncosurgeryCaseSheet.setLastChgTime(time);
			opdOncosurgeryCaseSheet.setLastChgBy(userName);

			hbt.save(opdOncosurgeryCaseSheet);
			saved = true;
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		try {
			Visit visitStatus = (Visit) getHibernateTemplate().load(
					Visit.class, visitId);
			visitStatus.setVisitStatus("C");
			hbt.update(visitStatus);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

			opdPatientDetails.setReferredDept(referredDept);

			MasHospital masHospitalob = (MasHospital) hbt.load(
					MasHospital.class, hospitalId);
			opdPatientDetails.setHospital(masHospitalob);

			opdPatientDetails.setVisit(visitStatus);
			hbt.save(opdPatientDetails);
			saved = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;
	}

	public Map<String, Object> showOncosurgeryCaseSheetJsp(int visitId) {

		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();

		try {
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);

		return map;
	}

	public Map<String, Object> viewOncosurgeryCaseSheet(
			Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdOncosurgeryCaseSheet> oncosurgeryCaseSheetList = new ArrayList<OpdOncosurgeryCaseSheet>();
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {

			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				oncosurgeryCaseSheetList = session.createCriteria(
						OpdOncosurgeryCaseSheet.class).createAlias("Visit",
						"visit").add(Restrictions.eq("visit.Id", visitId))
						.list();
				map.put("oncosurgeryCaseSheetList", oncosurgeryCaseSheetList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	/*----------------------------------------Urology Case Sheet----------------------------------------------*/

	public Map<String, Object> addUrologyCaseSheet(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;

		int hinId = 0;
		int visitId = 0;
		int departmentId = 0;
		int hospitalId = 0;
		String symptomme = "";
		String haeTotal = "";
		String haeTeriminal = "";
		String haeInitial = "";
		String haeClots = "";
		String uretericLeft = "";
		String uretericRight = "";
		String hypogastricPain = "";
		String bonePain = "";
		String dysuriaPain = "";
		String perinalRectal = "";

		String lFrequency = "";
		String lHesitanvy = "";
		String lNocturia = "";
		String lStraining = "";
		String lUrgency = "";
		String lSenseComEva = "";
		String lUrgeIncon = "";
		String lIntermittency = "";
		String lDribbling = "";
		String calculariaCheck = "";
		String calcularia = "";

		String chyluriaCheck = "";
		String chyluria = "";
		String erectileDysfunctionCheck = "";
		String erectileDysfunction = "";
		String haemospermia = "";
		String prematureEjaculation = "";
		String retrogradeEjaculation = "";
		String anejaculationEjaculation = "";

		String stressIncontinence = "";
		String urgeIncontinence = "";
		String totalIncontinence = "";
		String overflowIncontinence = "";
		String acuteUrinaryCheck = "";
		String acuteUrinary = "";

		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		String referredDept = (String) box.get("referredDept").toString();
		try {

			visitId = box.getInt("visitId");
			hinId = box.getInt("hinId");
			departmentId = box.getInt("departmentId");
			hospitalId = box.getInt("hospitalId");

			symptomme = box.getString(SYMPTOMME);
			haeTotal = box.getString(HAE_TOTAL);
			haeTeriminal = box.getString(HAE_TERIMINAL);
			haeInitial = box.getString(HAE_INITIAL);
			haeClots = box.getString(HAE_CLOTS);
			uretericLeft = box.getString(URETERIC_LEFT);
			uretericRight = box.getString(URETERIC_RIGHT);
			hypogastricPain = box.getString(HYPOGASTRIC_PAIN);
			bonePain = box.getString(BONE_PAIN);
			dysuriaPain = box.getString(DYSURIA_PAIN);
			perinalRectal = box.getString(PERINAL_RECTAL);

			lFrequency = box.getString(L_FREQUENCY);
			lHesitanvy = box.getString(L_HESITANVY);
			lNocturia = box.getString(L_NOCTURIA);
			lStraining = box.getString(L_STRAINING);
			lUrgency = box.getString(L_URGENCY);
			lSenseComEva = box.getString(L_SENSE_COM_EVA);
			lUrgeIncon = box.getString(L_URGE_INCON);
			lIntermittency = box.getString(L_INTERMITTENCY);
			lDribbling = box.getString(L_DRIBBLING);
			calculariaCheck = box.getString(CALCULARIA_CHECK);
			calcularia = box.getString(CALCULARIA);

			chyluriaCheck = box.getString(CHYLURIA_CHECK);
			chyluria = box.getString(CHYLURIA);
			erectileDysfunctionCheck = box
					.getString(ERECTILE_DYSFUNCTION_CHECK);
			erectileDysfunction = box.getString(ERECTILE_DYSFUNCTION);
			haemospermia = box.getString(HAEMOSPERMIA);
			prematureEjaculation = box.getString(PREMATUREEJACULATION);
			retrogradeEjaculation = box.getString(RETROGRADE_EJACULATION);
			anejaculationEjaculation = box.getString(ANEJACULATION_EJACULATION);

			stressIncontinence = box.getString(STRESS_INCONTINENCE);
			urgeIncontinence = box.getString(URGE_INCONTINENCE);
			totalIncontinence = box.getString(TOTAL_INCONTINENCE);
			overflowIncontinence = box.getString(OVERFLOW_INCONTINENCE);
			acuteUrinaryCheck = box.getString(ACUTE_URINARY_CHECK);
			acuteUrinary = box.getString(ACUTE_URINARY);

			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");
			String userName = "";
			userName = box.getString("userName");
			Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
			Patient patient = new Patient();
			patient.setId(hinId);

			Visit visit = new Visit();
			visit.setId(visitId);

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);

			OpdUrology opdUrology = new OpdUrology();

			opdUrology.setDepartment(masDepartment);
			opdUrology.setHin(patient);
			opdUrology.setVisit(visit);
			opdUrology.setHospital(masHospital);

			opdUrology.setAcuteUrinary(acuteUrinary);
			opdUrology.setAcuteUrinaryCheck(acuteUrinaryCheck);
			opdUrology.setAnejaculationEjaculation(anejaculationEjaculation);
			opdUrology.setBonePain(bonePain);
			opdUrology.setCalcularia(calcularia);
			opdUrology.setCalculariaCheck(calculariaCheck);
			opdUrology.setChyluria(chyluria);
			opdUrology.setChyluriaCheck(chyluriaCheck);
			opdUrology.setDysuriaPain(dysuriaPain);
			opdUrology.setErectileDysfunction(erectileDysfunction);
			opdUrology.setErectileDysfunctionCheck(erectileDysfunctionCheck);
			opdUrology.setHaeClots(haeClots);
			opdUrology.setHaeInitial(haeInitial);
			opdUrology.setHaemospermia(haemospermia);
			opdUrology.setHaeTeriminal(haeTeriminal);
			opdUrology.setHaeTotal(haeTotal);
			opdUrology.setHypogastricPain(hypogastricPain);
			opdUrology.setLDribbling(lDribbling);
			opdUrology.setLFrequency(lFrequency);
			opdUrology.setLHesitanvy(lHesitanvy);
			opdUrology.setLIntermittency(lIntermittency);
			opdUrology.setLNocturia(lNocturia);
			opdUrology.setLSenseComEva(lSenseComEva);
			opdUrology.setLStraining(lStraining);
			opdUrology.setLUrgeIncon(lUrgeIncon);
			opdUrology.setLUrgency(lUrgency);
			opdUrology.setOverflowIncontinence(overflowIncontinence);
			opdUrology.setPerinalRectal(perinalRectal);
			opdUrology.setPrematureejaculation(prematureEjaculation);
			opdUrology.setRetrogradeEjaculation(retrogradeEjaculation);
			opdUrology.setStressIncontinence(stressIncontinence);
			opdUrology.setSymptomme(symptomme);
			opdUrology.setTotalIncontinence(totalIncontinence);
			opdUrology.setUretericLeft(uretericLeft);
			opdUrology.setUretericRight(uretericRight);
			opdUrology.setUrgeIncontinence(urgeIncontinence);
			opdUrology.setStatus("y");
			opdUrology.setLastChgDate(date);
			opdUrology.setLastChgTime(time);
			opdUrology.setLastChgBy(userName);

			hbt.save(opdUrology);

			map.put("haeTotal",haeTotal);
			map.put("haeTeriminal",haeTeriminal);
			map.put("haeInitial",haeInitial);
			map.put("haeClots",haeClots);
			
			map.put("symptomme",symptomme);
			
			map.put("uretericLeft",uretericLeft);
			map.put("uretericRight",uretericRight);

			map.put("hypogastricPain",hypogastricPain);
			map.put("bonePain",bonePain);
			map.put("dysuriaPain",dysuriaPain);
			map.put("perinalRectal",perinalRectal);

			map.put("lFrequency",lFrequency);
			map.put("lHesitanvy",lHesitanvy);
			map.put("lNocturia",lNocturia);
			map.put("lStraining",lStraining);
			map.put("lUrgency",lUrgency);
			map.put("lSenseComEva",lSenseComEva);
			map.put("lUrgeIncon",lUrgeIncon);
			map.put("lIntermittency",lIntermittency);
			map.put("lDribbling",lDribbling);
			
			map.put("calcularia",calcularia);
			map.put("calculariaCheck",calculariaCheck);
			map.put("chyluriaCheck",chyluriaCheck);
			map.put("chyluria",chyluria);
			map.put("erectileDysfunctionCheck",erectileDysfunctionCheck);
			map.put("erectileDysfunction",erectileDysfunction);
			map.put("haemospermia",haemospermia);
			map.put("prematureEjaculation",prematureEjaculation);
			map.put("retrogradeEjaculation",retrogradeEjaculation);
			map.put("anejaculationEjaculation",anejaculationEjaculation);

			map.put("stressIncontinence",stressIncontinence);
			map.put("urgeIncontinence",urgeIncontinence);
			map.put("totalIncontinence",totalIncontinence);
			map.put("overflowIncontinence",overflowIncontinence);
			map.put("acuteUrinaryCheck",acuteUrinaryCheck);
			map.put("acuteUrinary",acuteUrinary);
			saved = true;
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		try {
			Visit visitStatus = (Visit) getHibernateTemplate().load(
					Visit.class, visitId);
			visitStatus.setVisitStatus("C");
			hbt.update(visitStatus);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

			opdPatientDetails.setReferredDept(referredDept);

			MasHospital masHospitalob = (MasHospital) hbt.load(
					MasHospital.class, hospitalId);
			opdPatientDetails.setHospital(masHospitalob);

			opdPatientDetails.setVisit(visitStatus);
			hbt.save(opdPatientDetails);
			saved = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;
	}

	public Map<String, Object> updateUrologyCaseSheet(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;

		int hinId = 0;
		int urologyId = 0;
		int visitId = 0;
		int departmentId = 0;
		int hospitalId = 0;
		String symptomme = "";
		String haeTotal = "";
		String haeTeriminal = "";
		String haeInitial = "";
		String haeClots = "";
		String uretericLeft = "";
		String uretericRight = "";
		String hypogastricPain = "";
		String bonePain = "";
		String dysuriaPain = "";
		String perinalRectal = "";

		String lFrequency = "";
		String lHesitanvy = "";
		String lNocturia = "";
		String lStraining = "";
		String lUrgency = "";
		String lSenseComEva = "";
		String lUrgeIncon = "";
		String lIntermittency = "";
		String lDribbling = "";
		String calculariaCheck = "";
		String calcularia = "";

		String chyluriaCheck = "";
		String chyluria = "";
		String erectileDysfunctionCheck = "";
		String erectileDysfunction = "";
		String haemospermia = "";
		String prematureEjaculation = "";
		String retrogradeEjaculation = "";
		String anejaculationEjaculation = "";

		String stressIncontinence = "";
		String urgeIncontinence = "";
		String totalIncontinence = "";
		String overflowIncontinence = "";
		String acuteUrinaryCheck = "";
		String acuteUrinary = "";

		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {

			visitId = box.getInt("visitId");
			urologyId = box.getInt("urologyId");

			hinId = box.getInt("hinId");
			departmentId = box.getInt("departmentId");
			hospitalId = box.getInt("hospitalId");

			symptomme = box.getString(SYMPTOMME);
			haeTotal = box.getString(HAE_TOTAL);
			haeTeriminal = box.getString(HAE_TERIMINAL);
			haeInitial = box.getString(HAE_INITIAL);
			haeClots = box.getString(HAE_CLOTS);
			uretericLeft = box.getString(URETERIC_LEFT);
			uretericRight = box.getString(URETERIC_RIGHT);
			hypogastricPain = box.getString(HYPOGASTRIC_PAIN);
			bonePain = box.getString(BONE_PAIN);
			dysuriaPain = box.getString(DYSURIA_PAIN);
			perinalRectal = box.getString(PERINAL_RECTAL);

			lFrequency = box.getString(L_FREQUENCY);
			lHesitanvy = box.getString(L_HESITANVY);
			lNocturia = box.getString(L_NOCTURIA);
			lStraining = box.getString(L_STRAINING);
			lUrgency = box.getString(L_URGENCY);
			lSenseComEva = box.getString(L_SENSE_COM_EVA);
			lUrgeIncon = box.getString(L_URGE_INCON);
			lIntermittency = box.getString(L_INTERMITTENCY);
			lDribbling = box.getString(L_DRIBBLING);
			calculariaCheck = box.getString(CALCULARIA_CHECK);
			calcularia = box.getString(CALCULARIA);

			chyluriaCheck = box.getString(CHYLURIA_CHECK);
			chyluria = box.getString(CHYLURIA);
			erectileDysfunctionCheck = box
					.getString(ERECTILE_DYSFUNCTION_CHECK);
			erectileDysfunction = box.getString(ERECTILE_DYSFUNCTION);
			haemospermia = box.getString(HAEMOSPERMIA);
			prematureEjaculation = box.getString(PREMATUREEJACULATION);
			retrogradeEjaculation = box.getString(RETROGRADE_EJACULATION);
			anejaculationEjaculation = box.getString(ANEJACULATION_EJACULATION);

			stressIncontinence = box.getString(STRESS_INCONTINENCE);
			urgeIncontinence = box.getString(URGE_INCONTINENCE);
			totalIncontinence = box.getString(TOTAL_INCONTINENCE);
			overflowIncontinence = box.getString(OVERFLOW_INCONTINENCE);
			acuteUrinaryCheck = box.getString(ACUTE_URINARY_CHECK);
			acuteUrinary = box.getString(ACUTE_URINARY);

			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");
			String userName = "";
			userName = box.getString("userName");
			Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
			Patient patient = new Patient();
			patient.setId(hinId);

			Visit visit = new Visit();
			visit.setId(visitId);

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);

			OpdUrology opdUrology = (OpdUrology) hbt.load(OpdUrology.class,
					urologyId);

			opdUrology.setDepartment(masDepartment);
			opdUrology.setHin(patient);
			opdUrology.setVisit(visit);
			opdUrology.setHospital(masHospital);

			opdUrology.setAcuteUrinary(acuteUrinary);
			opdUrology.setAcuteUrinaryCheck(acuteUrinaryCheck);
			opdUrology.setAnejaculationEjaculation(anejaculationEjaculation);
			opdUrology.setBonePain(bonePain);
			opdUrology.setCalcularia(calcularia);
			opdUrology.setCalculariaCheck(calculariaCheck);
			opdUrology.setChyluria(chyluria);
			opdUrology.setChyluriaCheck(chyluriaCheck);
			opdUrology.setDysuriaPain(dysuriaPain);
			opdUrology.setErectileDysfunction(erectileDysfunction);
			opdUrology.setErectileDysfunctionCheck(erectileDysfunctionCheck);
			opdUrology.setHaeClots(haeClots);
			opdUrology.setHaeInitial(haeInitial);
			opdUrology.setHaemospermia(haemospermia);
			opdUrology.setHaeTeriminal(haeTeriminal);
			opdUrology.setHaeTotal(haeTotal);
			opdUrology.setHypogastricPain(hypogastricPain);
			opdUrology.setLDribbling(lDribbling);
			opdUrology.setLFrequency(lFrequency);
			opdUrology.setLHesitanvy(lHesitanvy);
			opdUrology.setLIntermittency(lIntermittency);
			opdUrology.setLNocturia(lNocturia);
			opdUrology.setLSenseComEva(lSenseComEva);
			opdUrology.setLStraining(lStraining);
			opdUrology.setLUrgeIncon(lUrgeIncon);
			opdUrology.setLUrgency(lUrgency);
			opdUrology.setOverflowIncontinence(overflowIncontinence);
			opdUrology.setPerinalRectal(perinalRectal);
			opdUrology.setPrematureejaculation(prematureEjaculation);
			opdUrology.setRetrogradeEjaculation(retrogradeEjaculation);
			opdUrology.setStressIncontinence(stressIncontinence);
			opdUrology.setSymptomme(symptomme);
			opdUrology.setTotalIncontinence(totalIncontinence);
			opdUrology.setUretericLeft(uretericLeft);
			opdUrology.setUretericRight(uretericRight);
			opdUrology.setUrgeIncontinence(urgeIncontinence);
			opdUrology.setStatus("y");
			opdUrology.setLastChgDate(date);
			opdUrology.setLastChgTime(time);
			opdUrology.setLastChgBy(userName);

			hbt.update(opdUrology);
			hbt.refresh(opdUrology);
			saved = true;
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> showUrologyCaseSheetJsp(int visitId) {

		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<OpdUrology> oncosurgeryCaseSheetList = new ArrayList<OpdUrology>();
		try {
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();
			oncosurgeryCaseSheetList = session.createCriteria(OpdUrology.class)
					.createAlias("Visit", "visit").add(
							Restrictions.eq("visit.Id", visitId)).list();
			map.put("oncosurgeryCaseSheetList", oncosurgeryCaseSheetList);

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		return map;
	}

	public Map<String, Object> viewUrologyCaseSheet(
			Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdUrology> oncosurgeryCaseSheetList = new ArrayList<OpdUrology>();
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {

			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				oncosurgeryCaseSheetList = session.createCriteria(
						OpdUrology.class).createAlias("Visit", "visit").add(
						Restrictions.eq("visit.Id", visitId)).list();
				map.put("oncosurgeryCaseSheetList", oncosurgeryCaseSheetList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public Map<String, Object> addOncosurgery(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;

		int hinId = 0;
		int visitId = 0;
		int departmentId = 0;
		int hospitalId = 0;
		String medicalOnco = "";
		String surgeryOnco = "";
		String stageA = "";
		String stageB = "";
		String stageM = "";
		String stageN = "";
		String stageT = "";
		String remarks = "";
		String rt = "";
		String stageNor = "";
		int opdOncologyId=0;

		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		String referredDept = (String) box.get("referredDept").toString();
		try {

			visitId = box.getInt("visitId");
			hinId = box.getInt("hinId");
			departmentId = box.getInt("departmentId");
			hospitalId = box.getInt("hospitalId");
			opdOncologyId = box.getInt("opdOncologyId");
			medicalOnco = box.getString(MEDICAL);
			surgeryOnco = box.getString(SURGERY);
			remarks = box.getString(REMARKS);
			rt = box.getString(RT);
			stageNor = box.getString(STAGE_NOR);
			stageA = box.getString(STAGE_A);
			stageB = box.getString(STAGE_B);
			stageN = box.getString(STAGE_N);
			stageT = box.getString(STAGE_T);
			stageM = box.getString(STAGE_M);

			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");
			String userName = "";
			userName = box.getString("userName");
			Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
			Patient patient = new Patient();
			patient.setId(hinId);

			Visit visit = new Visit();
			visit.setId(visitId);

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);

			OpdOncology opdOncosurgery = new OpdOncology();
            if(opdOncologyId!=0){
            	opdOncosurgery.setId(opdOncologyId);
            }
			opdOncosurgery.setDepartment(masDepartment);
			opdOncosurgery.setHin(patient);
			opdOncosurgery.setVisit(visit);
			opdOncosurgery.setHospital(masHospital);

			opdOncosurgery.setMedicalOnco(medicalOnco);
			opdOncosurgery.setRemarks(remarks);
			opdOncosurgery.setRt(rt);
			opdOncosurgery.setStageA(stageA);
			opdOncosurgery.setStageB(stageB);
			opdOncosurgery.setStageM(stageM);
			opdOncosurgery.setStageN(stageN);
			opdOncosurgery.setStageT(stageT);
			opdOncosurgery.setSurgeryOnco(surgeryOnco);
			opdOncosurgery.setStageNor(stageNor);
			opdOncosurgery.setOpdDate(date);
			opdOncosurgery.setOpdTime(time);
			opdOncosurgery.setStatus("y");
			opdOncosurgery.setLastChgDate(date);
			opdOncosurgery.setLastChgTime(time);
			opdOncosurgery.setLastChgBy(userName);

			hbt.saveOrUpdate(opdOncosurgery);
			saved = true;
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		try {
			Visit visitStatus = (Visit) getHibernateTemplate().load(
					Visit.class, visitId);
			visitStatus.setVisitStatus("C");
			hbt.update(visitStatus);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

			opdPatientDetails.setReferredDept(referredDept);

			MasHospital masHospitalob = (MasHospital) hbt.load(
					MasHospital.class, hospitalId);
			opdPatientDetails.setHospital(masHospitalob);

			opdPatientDetails.setVisit(visitStatus);
			hbt.save(opdPatientDetails);
			saved = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;
	}

	public Map<String, Object> showOncosurgeryJsp(int visitId) {

		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List<OpdOncology> opdOncologyList = null;
		Map<String, Object> map = new HashMap<String, Object>();

		try {
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();
			opdOncologyList = session.createCriteria(OpdOncology.class)
			.createAlias("Visit","V").add(Restrictions.eq("V.Id",visitId)).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		map.put("opdOncologyList", opdOncologyList);

		return map;
	}

	public Map<String, Object> viewOncosurgery(Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdOncology> oncosurgeryList = new ArrayList<OpdOncology>();
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {

			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				oncosurgeryList = session.createCriteria(OpdOncology.class)
						.createAlias("Visit", "visit").add(
								Restrictions.eq("visit.Id", visitId)).list();
				map.put("oncosurgeryList", oncosurgeryList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public Map<String, Object> viewVistPreNext1(Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<OpdPatientDetails> patientVisitDataList = new ArrayList<OpdPatientDetails>();
		List<DischargeIcdCode> patientDiagnosisList = new ArrayList<DischargeIcdCode>();
		List<PatientPrescriptionHeader> patientPrescHList = new ArrayList<PatientPrescriptionHeader>();
		List<PatientPrescriptionDetails> patientPrescDList = new ArrayList<PatientPrescriptionDetails>();
		List<PatientInvestigationHeader> patientInvesHList = new ArrayList<PatientInvestigationHeader>();
		List<PatientInvestigationDetails> patientInvesDList = new ArrayList<PatientInvestigationDetails>();
		List deptList = new ArrayList<String>();
		@SuppressWarnings("unused")
		// int visitId=(Integer)parameterMap.get("visitId");
		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {

			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				map = getPatientDetails(visitId);

				try {

					Criteria crit = session.createCriteria(
							OpdPatientDetails.class).createAlias("Visit",
							"visit").add(Restrictions.eq("visit.Id", visitId));
					patientVisitDataList = crit.list();
					patientDiagnosisList = session.createCriteria(
							DischargeIcdCode.class).createAlias("Visit",
							"visit").add(Restrictions.eq("visit.Id", visitId))
							.list();
					patientPrescHList = session.createCriteria(
							PatientPrescriptionHeader.class).createAlias(
							"Visit", "visit").add(
							Restrictions.eq("visit.Id", visitId)).list();
					if (patientPrescHList.size() > 0) {
						PatientPrescriptionHeader patientPrescriptionHeader = patientPrescHList
								.get(0);
						int presHId = patientPrescriptionHeader.getId();
						patientPrescDList = session.createCriteria(
								PatientPrescriptionDetails.class).createAlias(
								"Prescription", "hId").add(
								Restrictions.eq("hId.Id", presHId)).list();
					}
					patientInvesHList = session.createCriteria(
							PatientInvestigationHeader.class).createAlias(
							"Visit", "visit").add(
							Restrictions.eq("visit.Id", visitId)).list();
					if (patientInvesHList.size() > 0) {
						PatientInvestigationHeader patientInvestigationHeader = patientInvesHList
								.get(0);
						int invesHId = patientInvestigationHeader.getId();
						patientInvesDList = session.createCriteria(
								PatientInvestigationDetails.class).createAlias(
								"InvestigationHeader", "invesHId").add(
								Restrictions.eq("invesHId.Id", invesHId))
								.list();
					}

					// ----------list of referred department taken out from opd
					// patient details table--------

					OpdPatientDetails opdPatientDetails = (OpdPatientDetails) patientVisitDataList
							.get(0);
					String referredDept = opdPatientDetails.getReferredDept();
					if (!referredDept.equals("") && referredDept != null) {
						String[] dept = referredDept.split(",");
						for (int i = 0; i < dept.length; i++) {
							int deptId = Integer.parseInt(dept[i]);
							String deptName = "";
							Map<String, Object> deptMap = getDepartmentNameFromId(deptId);
							if (deptMap.get("deptName") != null) {
								deptName = (String) deptMap.get("deptName");
							}
							deptList.add(deptName);
						}
					}
					// -------------------------------End of code for referred
					// depatment---------------------
				} catch (HibernateException e) {
					e.printStackTrace();
				}
				map.put("deptList", deptList);
				map.put("patientVisitDataList", patientVisitDataList);
				map.put("patientDiagnosisList", patientDiagnosisList);
				map.put("patientPrescDList", patientPrescDList);
				map.put("patientInvesDList", patientInvesDList);
				map.put("map", map);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public Map<String, Object> viewVistPreNext(Map<String, Object> mapForDS) {
		Session session = (Session) getSession();
		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdPatientDetails> patientVisitDataList = new ArrayList<OpdPatientDetails>();
		List<DischargeIcdCode> patientDiagnosisList = new ArrayList<DischargeIcdCode>();
		List<PatientPrescriptionHeader> patientPrescHList = new ArrayList<PatientPrescriptionHeader>();
		List<PatientPrescriptionDetails> patientPrescDList = new ArrayList<PatientPrescriptionDetails>();
		List<PatientInvestigationHeader> patientInvesHList = new ArrayList<PatientInvestigationHeader>();
		List<PatientInvestigationDetails> patientInvesDList = new ArrayList<PatientInvestigationDetails>();
		Map<String, Object> map = new HashMap<String, Object>();

		List deptList = new ArrayList<String>();
		@SuppressWarnings("unused")
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		if (mapForDS.get("visitNo") != null) {
			visitNo = (Integer) mapForDS.get("visitNo");
		}
		if (mapForDS.get("hinId") != null) {
			hinId = (Integer) mapForDS.get("hinId");
		}
		if (mapForDS.get("flag") != null) {
			flag = (String) mapForDS.get("flag");
		}

		try {
			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = (Integer) mapForDS.get("visitId");
				// int visitId = visit.getId();
				// map = getPatientDetails(visitId);
				Criteria crit = session.createCriteria(OpdPatientDetails.class)
						.createAlias("Visit", "visit").add(
								Restrictions.eq("visit.Id", visitId));
				patientVisitDataList = crit.list();
				patientDiagnosisList = session.createCriteria(
						DischargeIcdCode.class).createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", visitId)).list();
				patientPrescHList = session.createCriteria(
						PatientPrescriptionHeader.class).createAlias("Visit",
						"visit").add(Restrictions.eq("visit.Id", visitId))
						.list();
				if (patientPrescHList.size() > 0) {
					PatientPrescriptionHeader patientPrescriptionHeader = patientPrescHList
							.get(0);
					int presHId = patientPrescriptionHeader.getId();
					patientPrescDList = session.createCriteria(
							PatientPrescriptionDetails.class).createAlias(
							"Prescription", "hId").add(
							Restrictions.eq("hId.Id", presHId)).list();
				}
				patientInvesHList = session.createCriteria(
						PatientInvestigationHeader.class).createAlias("Visit",
						"visit").add(Restrictions.eq("visit.Id", visitId))
						.list();
				if (patientInvesHList.size() > 0) {
					PatientInvestigationHeader patientInvestigationHeader = patientInvesHList
							.get(0);
					int invesHId = patientInvestigationHeader.getId();
					patientInvesDList = session.createCriteria(
							PatientInvestigationDetails.class).createAlias(
							"InvestigationHeader", "invesHId").add(
							Restrictions.eq("invesHId.Id", invesHId)).list();
				}

				// ----------list of referred department taken out from opd
				// patient details table--------

				OpdPatientDetails opdPatientDetails = (OpdPatientDetails) patientVisitDataList
						.get(0);
				String referredDept = opdPatientDetails.getReferredDept();
				if (!referredDept.equals("") && referredDept != null) {
					String[] dept = referredDept.split(",");
					for (int i = 0; i < dept.length; i++) {
						int deptId = Integer.parseInt(dept[i]);
						String deptName = "";
						Map<String, Object> deptMap = getDepartmentNameFromId(deptId);
						if (deptMap.get("deptName") != null) {
							deptName = (String) deptMap.get("deptName");
						}
						deptList.add(deptName);
					}
				}
			}
		}// -------------------------------End of code for referred
			// depatment---------------------
		catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("deptList", deptList);
		map.put("patientVisitDataList", patientVisitDataList);
		map.put("patientDiagnosisList", patientDiagnosisList);
		map.put("patientPrescDList", patientPrescDList);
		map.put("patientInvesDList", patientInvesDList);

		return map;
	}

	public Map<String, Object> showPatientPreviousHinNumber(
			Map<String, Object> mapForDS) {
		Session session = (Session) getSession();
		List<Visit> patientPreviousVisitList = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();

		String hinNo = (String) mapForDS.get("hinNo");
		// int visitNo=(Integer)mapForDS.get("visitNo");
		try {

			Criteria crit = session.createCriteria(Visit.class).createAlias(
					"Hin", "hin").add(Restrictions.eq("hin.HinNo", hinNo))
					.addOrder(Order.desc("VisitNo")).add(
							Restrictions.eq("VisitStatus", "C"));
			patientPreviousVisitList = crit.list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientPreviousVisitList", patientPreviousVisitList);

		return map;
	}

	public Map<String, Object> viewPreviousNextVisit(
			Map<String, Object> mapForDS) {
		Session session = (Session) getSession();
		List<Visit> visitList = new ArrayList<Visit>();
		int visitId = (Integer) mapForDS.get("visitId");
		int hinId = (Integer) mapForDS.get("hinId");

		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;

		String flag = "";
		if (mapForDS.get("flag") != null) {
			flag = (String) mapForDS.get("flag");
		}

		visitMaxIdList = session.createQuery(
				"select MAX(Id) from Visit where Status='y' and VisitStatus='C' and Hin.Id='"
						+ hinId + "'").list();

		if (visitMaxIdList.size() > 0) {
			max = (Integer) visitMaxIdList.get(0);
			mapForDS.put("max", max);
		}
		if (flag.equals("prev")) {
			Criteria crit = session.createCriteria(Visit.class).createAlias(
					"Hin", "p").add(Restrictions.eq("p.Id", hinId)).add(
					Restrictions.eq("VisitStatus", "C")).addOrder(
					Order.asc("Id"));
			visitList = crit.list();
		}
		if (flag.equals("next")) {
			Criteria crit = session.createCriteria(Visit.class).createAlias(
					"Hin", "p").add(Restrictions.eq("p.Id", hinId)).add(
					Restrictions.eq("VisitStatus", "C")).addOrder(
					Order.desc("Id"));
			visitList = crit.list();
		}

		mapForDS.put("visitList", visitList);

		return mapForDS;

	}

	public boolean addOpdTemplateDepartmentWise(Map<String, Object> infoMap) {
		OpdTemplateDepartmentWise opdTemplateDepartmentWise = new OpdTemplateDepartmentWise();
		boolean successfullyAdded = false;
		int visitId = 0;
		int hospitalId = 0;
		if (infoMap.get("opdTemplateDepartmentWise") != null) {
			opdTemplateDepartmentWise = (OpdTemplateDepartmentWise) infoMap
					.get("opdTemplateDepartmentWise");
		}

		if (infoMap.get("visitId") != null) {
			visitId = (Integer) infoMap.get("visitId");
		}
		//System.out.println("visitId--- in ds--->" + visitId);
		if (infoMap.get("hospitalId") != null) {
			hospitalId = (Integer) infoMap.get("hospitalId");
		}
		String referredDept = (String) infoMap.get("referredDept").toString();

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			hbt.save(opdTemplateDepartmentWise);

			Visit visitObjToUpdate = (Visit) hbt.load(Visit.class, visitId);
			visitObjToUpdate.setVisitStatus("w");
			hbt.update(visitObjToUpdate);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

			opdPatientDetails.setReferredDept(referredDept);

			MasHospital masHospital = (MasHospital) hbt.load(MasHospital.class,
					hospitalId);
			opdPatientDetails.setHospital(masHospital);

			opdPatientDetails.setVisit(visitObjToUpdate);
			hbt.save(opdPatientDetails);

			successfullyAdded = true;
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return successfullyAdded;

	}

	public Map<String, Object> viewOpdTemplateDepartmentWise(
			Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;
		int max = 0;
		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		List<OpdTemplateDepartmentWise> opdTemplateDepartmentWiseList = new ArrayList<OpdTemplateDepartmentWise>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {
			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}

			if (flag.equals("prev")) {

				visitNoForView = visitNo - 1;

			}

			else if (flag.equals("next")) {

				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}

			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0 && visitList != null) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				opdTemplateDepartmentWiseList = session.createCriteria(
						OpdTemplateDepartmentWise.class).createAlias("Visit",
						"v").add(Restrictions.eq("v.Id", visitId)).list();
				map.put("opdTemplateDepartmentWiseList",
						opdTemplateDepartmentWiseList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	public Map<String, Object> viewOpdTemplateDepartmentWisePreNext(
			Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;
		int max = 0;
		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		List<OpdTemplateDepartmentWise> opdTemplateDepartmentWiseList = new ArrayList<OpdTemplateDepartmentWise>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {
			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}

			if (flag.equals("prev")) {

				visitNoForView = visitNo - 1;

			}

			else if (flag.equals("next")) {

				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}

			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0 && visitList != null) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				opdTemplateDepartmentWiseList = session.createCriteria(
						OpdTemplateDepartmentWise.class).createAlias("Visit",
						"v").add(Restrictions.eq("v.Id", visitId)).list();
				map.put("opdTemplateDepartmentWiseList",
						opdTemplateDepartmentWiseList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	/**
	 * --------------------------------------------End of Methods For By
	 * Mansi-------------------------
	 * 
	 */

	/** start of methods by abha **/

	public Map<String, Object> viewGynaecology(Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdGynaecology> opdGynaecologyist = new ArrayList<OpdGynaecology>();
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {
			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				opdGynaecologyist = session
						.createCriteria(OpdGynaecology.class).createAlias(
								"Visit", "visit").add(
								Restrictions.eq("visit.Id", visitId)).list();
				map.put("opdGynaecologyist", opdGynaecologyist);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	public boolean submitComplaints(Map<String, Object> map) {
		OpdGynaecology opdGynaecology = new OpdGynaecology();
		List<OpdGynaecology> opdGynaeList = new ArrayList<OpdGynaecology>();
		int visitId = 0;
		int hinId = 0;
		int deptId = 0;
		int hospitalId = 0;
		int gynaeId = 0;
		float primaryInfertility = 0;
		float secondaryInfertility = 0;
		float hypomenorrhoea = 0;
		float oligomenorrhoea = 0;
		float hisrsutism = 0;
		float galactorrhoea = 0;
		String backache = "";
		String pruritisVulvae = "";
		String dysmenorrhoea = "";
		String leucorrhoea = "";
		String userName = "";
		Date date = null;
		String time = "";
		visitId = (Integer) map.get("visitId");
		hinId = (Integer) map.get("hinId");
		deptId = (Integer) map.get("deptId");
		hospitalId = (Integer) map.get("hospitalId");
		primaryInfertility = (Float) map.get("primaryInfertility");
		secondaryInfertility = (Float) map.get("secondaryInfertility");
		hypomenorrhoea = (Float) map.get("hypomenorrhoea");
		oligomenorrhoea = (Float) map.get("oligomenorrhoea");
		hisrsutism = (Float) map.get("hisrsutism");
		galactorrhoea = (Float) map.get("galactorrhoea");
		backache = (String) map.get("backache");
		pruritisVulvae = (String) map.get("pruritisVulvae");
		dysmenorrhoea = (String) map.get("dysmenorrhoea");
		leucorrhoea = (String) map.get("leucorrhoea");
		userName = (String) map.get("userName");
		date = (Date) map.get("date");
		time = (String) map.get("time");
		Session session;
		session = (Session) getSession();
		Criteria c = session.createCriteria(OpdGynaecology.class).add(
				Restrictions.eq("Visit.Id", visitId));
		opdGynaeList = c.list();
		boolean successfullyAdded = false;
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (opdGynaeList.size() > 0) {
				for (OpdGynaecology opd : opdGynaeList) {
					gynaeId = opd.getId();
				}
				OpdGynaecology opdGynaecology1 = (OpdGynaecology) getHibernateTemplate()
						.load(OpdGynaecology.class, gynaeId);
				opdGynaecology1.setPrimaryInfertility(primaryInfertility);
				opdGynaecology1.setSecondaryInfertility(secondaryInfertility);
				opdGynaecology1.setHypomenorrhoea(hypomenorrhoea);
				opdGynaecology1.setOligomenorrhoea(oligomenorrhoea);
				opdGynaecology1.setGalactorrhoea(galactorrhoea);
				opdGynaecology1.setHisrsutism(hisrsutism);
				opdGynaecology1.setLeucorrhoea(leucorrhoea);
				opdGynaecology1.setPruritisVulvae(pruritisVulvae);
				opdGynaecology1.setBackache(backache);
				opdGynaecology1.setDysmenorrhoea(dysmenorrhoea);
				opdGynaecology1.setLastChgBy(userName);
				opdGynaecology1.setLastChgDate(date);
				opdGynaecology1.setLastChgTime(time);
				hbt.update(opdGynaecology1);
				hbt.refresh(opdGynaecology1);
			} else {

				opdGynaecology.setPrimaryInfertility(primaryInfertility);
				opdGynaecology.setSecondaryInfertility(secondaryInfertility);
				opdGynaecology.setHypomenorrhoea(hypomenorrhoea);
				opdGynaecology.setOligomenorrhoea(oligomenorrhoea);
				opdGynaecology.setGalactorrhoea(galactorrhoea);
				opdGynaecology.setHisrsutism(hisrsutism);
				opdGynaecology.setLeucorrhoea(leucorrhoea);
				opdGynaecology.setPruritisVulvae(pruritisVulvae);
				opdGynaecology.setBackache(backache);
				opdGynaecology.setDysmenorrhoea(dysmenorrhoea);
				opdGynaecology.setLastChgBy(userName);
				opdGynaecology.setLastChgDate(date);
				opdGynaecology.setLastChgTime(time);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				opdGynaecology.setHospital(masHospital);

				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				opdGynaecology.setDepartment(masDepartment);

				if (visitId != 0) {
					Visit visit = new Visit();
					visit.setId(visitId);
					opdGynaecology.setVisit(visit);
				}
				if (hinId != 0) {
					Patient patient = new Patient();
					patient.setId(hinId);
					opdGynaecology.setHin(patient);
				}
				hbt.save(opdGynaecology);
			}
			successfullyAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;
	}

	public boolean submitSystemicExamination(Map<String, Object> map) {
		OpdGynaecology opdGynaecology = new OpdGynaecology();
		List<OpdGynaecology> opdGynaeList = new ArrayList<OpdGynaecology>();
		int visitId = 0;
		int hinId = 0;
		int deptId = 0;
		int hospitalId = 0;
		int gynaeId = 0;
		String otherSystems = "";
		String gynaecologicalExamination = "";
		String userName = "";
		Date date = null;
		String time = "";
		visitId = (Integer) map.get("visitId");
		hinId = (Integer) map.get("hinId");
		deptId = (Integer) map.get("deptId");
		hospitalId = (Integer) map.get("hospitalId");
		otherSystems = (String) map.get("otherSystems");
		gynaecologicalExamination = (String) map
				.get("gynaecologicalExamination");
		userName = (String) map.get("userName");
		date = (Date) map.get("date");
		time = (String) map.get("time");

		Session session;
		session = (Session) getSession();
		Criteria c = session.createCriteria(OpdGynaecology.class).add(
				Restrictions.eq("Visit.Id", visitId));
		opdGynaeList = c.list();
		boolean successfullyAdded = false;
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (opdGynaeList.size() > 0) {
				for (OpdGynaecology opd : opdGynaeList) {
					gynaeId = opd.getId();
				}
				OpdGynaecology opdGynaecology1 = (OpdGynaecology) getHibernateTemplate()
						.load(OpdGynaecology.class, gynaeId);
				opdGynaecology1.setOtherSystems(otherSystems);
				opdGynaecology1
						.setGynaecologicalExamination(gynaecologicalExamination);
				opdGynaecology1.setLastChgBy(userName);
				opdGynaecology1.setLastChgDate(date);
				opdGynaecology1.setLastChgTime(time);
				hbt.update(opdGynaecology1);
				hbt.refresh(opdGynaecology1);
			} else {

				opdGynaecology.setOtherSystems(otherSystems);
				opdGynaecology
						.setGynaecologicalExamination(gynaecologicalExamination);
				opdGynaecology.setLastChgBy(userName);
				opdGynaecology.setLastChgDate(date);
				opdGynaecology.setLastChgTime(time);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				opdGynaecology.setHospital(masHospital);

				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				opdGynaecology.setDepartment(masDepartment);

				if (visitId != 0) {
					Visit visit = new Visit();
					visit.setId(visitId);
					opdGynaecology.setVisit(visit);
				}
				if (hinId != 0) {
					Patient patient = new Patient();
					patient.setId(hinId);
					opdGynaecology.setHin(patient);
				}
				hbt.save(opdGynaecology);
			}
			successfullyAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;
	}

	public boolean submitGeneralExaminaton(Map<String, Object> map) {
		OpdGynaecology opdGynaecology = new OpdGynaecology();
		List<OpdGynaecology> opdGynaeList = new ArrayList<OpdGynaecology>();
		int visitId = 0;
		int hinId = 0;
		int deptId = 0;
		int hospitalId = 0;
		int gynaeId = 0;
		float height = 0;
		float weight = 0;
		String obesity = "";
		String acne = "";
		String hairDistribution = "";
		String breastDevelopment = "";
		String galactorrhoea = "";
		String pigmentation = "";
		String others = "";
		String userName = "";
		Date date = null;
		String time = "";
		visitId = (Integer) map.get("visitId");
		hinId = (Integer) map.get("hinId");
		deptId = (Integer) map.get("deptId");
		hospitalId = (Integer) map.get("hospitalId");
		height = (Float) map.get("height");
		weight = (Float) map.get("weight");
		obesity = (String) map.get("obesity");
		acne = (String) map.get("acne");
		hairDistribution = (String) map.get("hairDistribution");
		pigmentation = (String) map.get("pigmentation");
		galactorrhoea = (String) map.get("galactorrhoea");
		breastDevelopment = (String) map.get("breastDevelopment");
		others = (String) map.get("others");
		userName = (String) map.get("userName");
		date = (Date) map.get("date");
		time = (String) map.get("time");

		Session session;
		session = (Session) getSession();
		Criteria c = session.createCriteria(OpdGynaecology.class).add(
				Restrictions.eq("Visit.Id", visitId));
		opdGynaeList = c.list();
		boolean successfullyAdded = false;
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (opdGynaeList.size() > 0) {
				for (OpdGynaecology opd : opdGynaeList) {
					gynaeId = opd.getId();
				}
				OpdGynaecology opdGynaecology1 = (OpdGynaecology) getHibernateTemplate()
						.load(OpdGynaecology.class, gynaeId);
				opdGynaecology1.setHeight(height);
				opdGynaecology1.setWeight(weight);
				opdGynaecology1.setObesity(obesity);
				opdGynaecology1.setAcne(acne);
				opdGynaecology1.setHairDistribution(hairDistribution);
				opdGynaecology1.setBreastDevelopment(breastDevelopment);
				opdGynaecology1.setGalactorrhoeaText(galactorrhoea);
				opdGynaecology1.setPigmentation(pigmentation);
				opdGynaecology1.setOthers(others);
				opdGynaecology1.setLastChgBy(userName);
				opdGynaecology1.setLastChgDate(date);
				opdGynaecology1.setLastChgTime(time);

				hbt.update(opdGynaecology1);
				hbt.refresh(opdGynaecology1);
			} else {

				opdGynaecology.setHeight(height);
				opdGynaecology.setWeight(weight);
				opdGynaecology.setObesity(obesity);
				opdGynaecology.setAcne(acne);
				opdGynaecology.setHairDistribution(hairDistribution);
				opdGynaecology.setBreastDevelopment(breastDevelopment);
				opdGynaecology.setGalactorrhoeaText(galactorrhoea);
				opdGynaecology.setPigmentation(pigmentation);
				opdGynaecology.setOthers(others);
				opdGynaecology.setLastChgBy(userName);
				opdGynaecology.setLastChgDate(date);
				opdGynaecology.setLastChgTime(time);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				opdGynaecology.setHospital(masHospital);

				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				opdGynaecology.setDepartment(masDepartment);

				if (visitId != 0) {
					Visit visit = new Visit();
					visit.setId(visitId);
					opdGynaecology.setVisit(visit);
				}
				if (hinId != 0) {
					Patient patient = new Patient();
					patient.setId(hinId);
					opdGynaecology.setHin(patient);
				}
				hbt.save(opdGynaecology);
			}
			successfullyAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;
	}

	public boolean submitMedicalSurgicalHistory(Map<String, Object> map) {
		OpdGynaecology opdGynaecology = new OpdGynaecology();
		List<OpdGynaecology> opdGynaeList = new ArrayList<OpdGynaecology>();
		int visitId = 0;
		int hinId = 0;
		int deptId = 0;
		int hospitalId = 0;
		int gynaeId = 0;
		String pastMedicalHistory = "";
		String pastSurgicalHistory = "";
		String familyHistory = "";
		String userName = "";
		Date date = null;
		String time = "";
		visitId = (Integer) map.get("visitId");
		hinId = (Integer) map.get("hinId");
		deptId = (Integer) map.get("deptId");
		hospitalId = (Integer) map.get("hospitalId");

		pastMedicalHistory = (String) map.get("pastMedicalHistory");
		pastSurgicalHistory = (String) map.get("pastSurgicalHistory");
		familyHistory = (String) map.get("familyHistory");

		userName = (String) map.get("userName");
		date = (Date) map.get("date");
		time = (String) map.get("time");

		Session session;
		session = (Session) getSession();
		Criteria c = session.createCriteria(OpdGynaecology.class).add(
				Restrictions.eq("Visit.Id", visitId));
		opdGynaeList = c.list();
		boolean successfullyAdded = false;
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (opdGynaeList.size() > 0) {
				for (OpdGynaecology opd : opdGynaeList) {
					gynaeId = opd.getId();
				}
				OpdGynaecology opdGynaecology1 = (OpdGynaecology) getHibernateTemplate()
						.load(OpdGynaecology.class, gynaeId);
				opdGynaecology1.setPastMedicalHistory(pastMedicalHistory);
				opdGynaecology1.setPastSurgicalHistory(pastSurgicalHistory);
				opdGynaecology1.setFamilyHistory(familyHistory);
				opdGynaecology1.setLastChgBy(userName);
				opdGynaecology1.setLastChgDate(date);
				opdGynaecology1.setLastChgTime(time);

				hbt.update(opdGynaecology1);
				hbt.refresh(opdGynaecology1);
			} else {

				opdGynaecology.setPastMedicalHistory(pastMedicalHistory);
				opdGynaecology.setPastSurgicalHistory(pastSurgicalHistory);
				opdGynaecology.setFamilyHistory(familyHistory);
				opdGynaecology.setLastChgBy(userName);
				opdGynaecology.setLastChgDate(date);
				opdGynaecology.setLastChgTime(time);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				opdGynaecology.setHospital(masHospital);

				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				opdGynaecology.setDepartment(masDepartment);

				if (visitId != 0) {
					Visit visit = new Visit();
					visit.setId(visitId);
					opdGynaecology.setVisit(visit);
				}
				if (hinId != 0) {
					Patient patient = new Patient();
					patient.setId(hinId);
					opdGynaecology.setHin(patient);
				}
				hbt.save(opdGynaecology);
			}
			successfullyAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;
	}

	public boolean submitSocioEconomicHistory(Map<String, Object> map) {
		OpdGynaecology opdGynaecology = new OpdGynaecology();
		List<OpdGynaecology> opdGynaeList = new ArrayList<OpdGynaecology>();
		// int visitId=0;
		int hinId = 0;
		int deptId = 0;
		int hospitalId = 0;
		int gynaeId = 0;
		int inpatientId = 0;
		float menarchy = 0;
		String pastMc = "";
		String presentMc = "";
		String lmp = "";
		String pmp1 = "";
		String pmp2 = "";
		String obstetricHistory = "";
		String dyspareunia = "";
		String fertilePeriod = "";
		String conceive = "";
		String coitusPrWk = "";
		String userName = "";
		Date date = null;
		String time = "";
		// visitId =(Integer)map.get("visitId");
		inpatientId = (Integer) map.get("inpatientId");
		hinId = (Integer) map.get("hinId");
		deptId = (Integer) map.get("deptId");
		hospitalId = (Integer) map.get("hospitalId");
		menarchy = (Float) map.get("menarchy");
		pastMc = (String) map.get("pastMc");
		presentMc = (String) map.get("presentMc");
		lmp = (String) map.get("lmp");
		pmp1 = (String) map.get("pmp1");
		pmp2 = (String) map.get("pmp2");
		obstetricHistory = (String) map.get("obstetricHistory");
		dyspareunia = (String) map.get("dyspareunia");
		fertilePeriod = (String) map.get("fertilePeriod");
		conceive = (String) map.get("conceive");
		coitusPrWk = (String) map.get("coitusPrWk");
		userName = (String) map.get("userName");
		date = (Date) map.get("date");
		time = (String) map.get("time");
		Session session;
		session = (Session) getSession();
		/*
		 * Criteria c =
		 * session.createCriteria(OpdGynaecology.class).add(Restrictions
		 * .eq("Visit.Id", visitId));
		 */
		Criteria c = session.createCriteria(OpdGynaecology.class).add(
				Restrictions.eq("Inpatient.Id", inpatientId));
		opdGynaeList = c.list();
		boolean successfullyAdded = false;
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (opdGynaeList.size() > 0) {
				for (OpdGynaecology opd : opdGynaeList) {
					gynaeId = opd.getId();
				}
				OpdGynaecology opdGynaecology1 = (OpdGynaecology) getHibernateTemplate()
						.load(OpdGynaecology.class, gynaeId);
				opdGynaecology1.setMenarchy(menarchy);
				opdGynaecology1.setPastMc(pastMc);
				opdGynaecology1.setPresentMc(presentMc);
				opdGynaecology1.setLmp(lmp);
				opdGynaecology1.setPmp1(pmp1);
				opdGynaecology1.setPmp2(pmp2);
				opdGynaecology1.setObstetricHistory(obstetricHistory);
				opdGynaecology1.setDyspareunia(dyspareunia);
				opdGynaecology1.setAwarenessFertilePeriod(fertilePeriod);
				opdGynaecology1.setFrequencyCoitusWk(coitusPrWk);
				opdGynaecology1.setConceive(conceive);
				opdGynaecology1.setLastChgBy(userName);
				opdGynaecology1.setLastChgDate(date);
				opdGynaecology1.setLastChgTime(time);
				hbt.update(opdGynaecology1);
				hbt.refresh(opdGynaecology1);
			} else {
				opdGynaecology.setMenarchy(menarchy);
				opdGynaecology.setPastMc(pastMc);
				opdGynaecology.setPresentMc(presentMc);
				opdGynaecology.setLmp(lmp);
				opdGynaecology.setPmp1(pmp1);
				opdGynaecology.setPmp2(pmp2);
				opdGynaecology.setObstetricHistory(obstetricHistory);
				opdGynaecology.setDyspareunia(dyspareunia);
				opdGynaecology.setAwarenessFertilePeriod(fertilePeriod);
				opdGynaecology.setFrequencyCoitusWk(coitusPrWk);
				opdGynaecology.setConceive(conceive);
				opdGynaecology.setLastChgBy(userName);
				opdGynaecology.setLastChgDate(date);
				opdGynaecology.setLastChgTime(time);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				opdGynaecology.setHospital(masHospital);

				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				opdGynaecology.setDepartment(masDepartment);

				/*
				 * if(visitId !=0){ Visit visit = new Visit();
				 * visit.setId(visitId); opdGynaecology.setVisit(visit); }
				 */
				if (inpatientId != 0) {
					Inpatient inpatient = new Inpatient();
					inpatient.setId(inpatientId);
					opdGynaecology.setInpatient(inpatient);
				}
				if (hinId != 0) {
					Patient patient = new Patient();
					patient.setId(hinId);
					opdGynaecology.setHin(patient);
				}
				hbt.save(opdGynaecology);
			}
			successfullyAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;
	}

	public boolean submitAllDetailsLabourRoom(Map<String, Object> map) {
		OpdGynaecology opdGynaecology = new OpdGynaecology();
		List<OpdGynaecology> opdGynaeList = new ArrayList<OpdGynaecology>();
		// int visitId=0;
		int hinId = 0;
		int deptId = 0;
		int hospitalId = 0;
		int gynaeId = 0;
		int inpatientId = 0;
		float menarchy = 0;
		String pastMc = "";
		String presentMc = "";
		String lmp = "";
		String pmp1 = "";
		String pmp2 = "";
		String obstetricHistory = "";
		String dyspareunia = "";
		String fertilePeriod = "";
		String conceive = "";
		String coitusPrWk = "";
		String userName = "";
		Date date = null;
		String time = "";
		/* Complaints Details */
		float primaryInfertility = 0;
		float secondaryInfertility = 0;
		float hypomenorrhoea = 0;
		float oligomenorrhoea = 0;
		float hisrsutism = 0;
		float galactorrhoea = 0;
		String backache = "";
		String pruritisVulvae = "";
		String dysmenorrhoea = "";
		String leucorrhoea = "";
		hinId = (Integer) map.get("hinId");
		deptId = (Integer) map.get("deptId");
		hospitalId = (Integer) map.get("hospitalId");
		primaryInfertility = (Float) map.get("primaryInfertility");
		secondaryInfertility = (Float) map.get("secondaryInfertility");
		hypomenorrhoea = (Float) map.get("hypomenorrhoea");
		oligomenorrhoea = (Float) map.get("oligomenorrhoea");
		hisrsutism = (Float) map.get("hisrsutism");
		galactorrhoea = (Float) map.get("galactorrhoea");
		backache = (String) map.get("backache");
		pruritisVulvae = (String) map.get("pruritisVulvae");
		dysmenorrhoea = (String) map.get("dysmenorrhoea");
		leucorrhoea = (String) map.get("leucorrhoea");
		/* Complaints Details End */

		/* Medical/Surgical History Details */
		String pastMedicalHistory = "";
		String pastSurgicalHistory = "";
		String familyHistory = "";

		pastMedicalHistory = (String) map.get("pastMedicalHistory");
		pastSurgicalHistory = (String) map.get("pastSurgicalHistory");
		familyHistory = (String) map.get("familyHistory");
		/* Medical/Surgical History Details End */

		/* General Examination Details */
		float height = 0;
		float weight = 0;
		String obesity = "";
		String acne = "";
		String hairDistribution = "";
		String breastDevelopment = "";
		String galactorrhoeaText = "";
		String pigmentation = "";
		String others = "";

		height = (Float) map.get("height");
		weight = (Float) map.get("weight");
		obesity = (String) map.get("obesity");
		acne = (String) map.get("acne");
		hairDistribution = (String) map.get("hairDistribution");
		pigmentation = (String) map.get("pigmentation");
		galactorrhoeaText = (String) map.get("galactorrhoeaText");
		breastDevelopment = (String) map.get("breastDevelopment");
		others = (String) map.get("others");
		/* General Examination Details End */

		/* Systemic Examination Details */
		String otherSystems = "";
		String gynaecologicalExamination = "";
		otherSystems = (String) map.get("otherSystems");
		gynaecologicalExamination = (String) map
				.get("gynaecologicalExamination");
		/* Systemic Examination Details End */

		// visitId =(Integer)map.get("visitId");
		inpatientId = (Integer) map.get("inpatientId");
		hinId = (Integer) map.get("hinId");
		deptId = (Integer) map.get("deptId");
		hospitalId = (Integer) map.get("hospitalId");
		menarchy = (Float) map.get("menarchy");
		pastMc = (String) map.get("pastMc");
		presentMc = (String) map.get("presentMc");
		lmp = (String) map.get("lmp");
		pmp1 = (String) map.get("pmp1");
		pmp2 = (String) map.get("pmp2");
		obstetricHistory = (String) map.get("obstetricHistory");
		dyspareunia = (String) map.get("dyspareunia");
		fertilePeriod = (String) map.get("fertilePeriod");
		conceive = (String) map.get("conceive");
		coitusPrWk = (String) map.get("coitusPrWk");
		userName = (String) map.get("userName");
		date = (Date) map.get("date");
		time = (String) map.get("time");
		Session session;
		session = (Session) getSession();
		/*
		 * Criteria c =
		 * session.createCriteria(OpdGynaecology.class).add(Restrictions
		 * .eq("Visit.Id", visitId));
		 */
		Criteria c = session.createCriteria(OpdGynaecology.class).add(
				Restrictions.eq("Inpatient.Id", inpatientId));
		opdGynaeList = c.list();
		boolean successfullyAdded = false;
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (opdGynaeList.size() > 0) {
				for (OpdGynaecology opd : opdGynaeList) {
					gynaeId = opd.getId();
				}
				OpdGynaecology opdGynaecology1 = (OpdGynaecology) getHibernateTemplate()
						.load(OpdGynaecology.class, gynaeId);
				opdGynaecology1.setMenarchy(menarchy);
				opdGynaecology1.setPastMc(pastMc);
				opdGynaecology1.setPresentMc(presentMc);
				opdGynaecology1.setLmp(lmp);
				opdGynaecology1.setPmp1(pmp1);
				opdGynaecology1.setPmp2(pmp2);
				opdGynaecology1.setObstetricHistory(obstetricHistory);
				opdGynaecology1.setDyspareunia(dyspareunia);
				opdGynaecology1.setAwarenessFertilePeriod(fertilePeriod);
				opdGynaecology1.setFrequencyCoitusWk(coitusPrWk);
				opdGynaecology1.setConceive(conceive);

				opdGynaecology1.setPrimaryInfertility(primaryInfertility);
				opdGynaecology1.setSecondaryInfertility(secondaryInfertility);
				opdGynaecology1.setHypomenorrhoea(hypomenorrhoea);
				opdGynaecology1.setOligomenorrhoea(oligomenorrhoea);
				opdGynaecology1.setGalactorrhoea(galactorrhoea);
				opdGynaecology1.setHisrsutism(hisrsutism);
				opdGynaecology1.setLeucorrhoea(leucorrhoea);
				opdGynaecology1.setPruritisVulvae(pruritisVulvae);
				opdGynaecology1.setBackache(backache);
				opdGynaecology1.setDysmenorrhoea(dysmenorrhoea);

				opdGynaecology1.setPastMedicalHistory(pastMedicalHistory);
				opdGynaecology1.setPastSurgicalHistory(pastSurgicalHistory);
				opdGynaecology1.setFamilyHistory(familyHistory);

				opdGynaecology1.setHeight(height);
				opdGynaecology1.setWeight(weight);
				opdGynaecology1.setObesity(obesity);
				opdGynaecology1.setAcne(acne);
				opdGynaecology1.setHairDistribution(hairDistribution);
				opdGynaecology1.setBreastDevelopment(breastDevelopment);
				opdGynaecology1.setGalactorrhoeaText(galactorrhoeaText);
				opdGynaecology1.setPigmentation(pigmentation);
				opdGynaecology1.setOthers(others);

				opdGynaecology1.setOtherSystems(otherSystems);
				opdGynaecology1
						.setGynaecologicalExamination(gynaecologicalExamination);

				opdGynaecology1.setLastChgBy(userName);
				opdGynaecology1.setLastChgDate(date);
				opdGynaecology1.setLastChgTime(time);
				hbt.update(opdGynaecology1);
				hbt.refresh(opdGynaecology1);
			} else {
				opdGynaecology.setMenarchy(menarchy);
				opdGynaecology.setPastMc(pastMc);
				opdGynaecology.setPresentMc(presentMc);
				opdGynaecology.setLmp(lmp);
				opdGynaecology.setPmp1(pmp1);
				opdGynaecology.setPmp2(pmp2);
				opdGynaecology.setObstetricHistory(obstetricHistory);
				opdGynaecology.setDyspareunia(dyspareunia);
				opdGynaecology.setAwarenessFertilePeriod(fertilePeriod);
				opdGynaecology.setFrequencyCoitusWk(coitusPrWk);
				opdGynaecology.setConceive(conceive);

				opdGynaecology.setPrimaryInfertility(primaryInfertility);
				opdGynaecology.setSecondaryInfertility(secondaryInfertility);
				opdGynaecology.setHypomenorrhoea(hypomenorrhoea);
				opdGynaecology.setOligomenorrhoea(oligomenorrhoea);
				opdGynaecology.setGalactorrhoea(galactorrhoea);
				opdGynaecology.setHisrsutism(hisrsutism);
				opdGynaecology.setLeucorrhoea(leucorrhoea);
				opdGynaecology.setPruritisVulvae(pruritisVulvae);
				opdGynaecology.setBackache(backache);
				opdGynaecology.setDysmenorrhoea(dysmenorrhoea);

				opdGynaecology.setPastMedicalHistory(pastMedicalHistory);
				opdGynaecology.setPastSurgicalHistory(pastSurgicalHistory);
				opdGynaecology.setFamilyHistory(familyHistory);

				opdGynaecology.setHeight(height);
				opdGynaecology.setWeight(weight);
				opdGynaecology.setObesity(obesity);
				opdGynaecology.setAcne(acne);
				opdGynaecology.setHairDistribution(hairDistribution);
				opdGynaecology.setBreastDevelopment(breastDevelopment);
				opdGynaecology.setGalactorrhoeaText(galactorrhoeaText);
				opdGynaecology.setPigmentation(pigmentation);
				opdGynaecology.setOthers(others);

				opdGynaecology.setOtherSystems(otherSystems);
				opdGynaecology
						.setGynaecologicalExamination(gynaecologicalExamination);

				opdGynaecology.setLastChgBy(userName);
				opdGynaecology.setLastChgDate(date);
				opdGynaecology.setLastChgTime(time);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				opdGynaecology.setHospital(masHospital);

				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				opdGynaecology.setDepartment(masDepartment);

				/*
				 * if(visitId !=0){ Visit visit = new Visit();
				 * visit.setId(visitId); opdGynaecology.setVisit(visit); }
				 */
				if (inpatientId != 0) {
					Inpatient inpatient = new Inpatient();
					inpatient.setId(inpatientId);
					opdGynaecology.setInpatient(inpatient);
				}
				if (hinId != 0) {
					Patient patient = new Patient();
					patient.setId(hinId);
					opdGynaecology.setHin(patient);
				}
				hbt.save(opdGynaecology);
			}
			successfullyAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;
	}

	public Map<String, Object> showUploadingDocumentsJsp(int visitId, int inpatientId,Map<String, Object> mapForDS){
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List<Inpatient> inpatientList=new ArrayList<Inpatient>();
		Map<String, Object> map = new HashMap<String, Object>();
		String reportingFor = "";
		if(mapForDS.get("reportingFor") != null){
			reportingFor = (String)mapForDS.get("reportingFor");
		}
		try {
			
			if(visitId!=0){
				if(!reportingFor.equals("") && reportingFor.equalsIgnoreCase("FamilyWC"))
				{
					patientDataList = session.createCriteria(Visit.class).
					add(Restrictions.eq("ReportingFor", "FamilyWC")).
					add(Restrictions.eq("Id", visitId)).list();
				}else{
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();
				}

			}else if(inpatientId!=0){
				inpatientList = session.createCriteria(Inpatient.class).add(
						Restrictions.eq("Id", inpatientId)).list();

			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		map.put("inpatientList", inpatientList);
		return map;
	}

	public Map<String, Object> submitUploadDocuments(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<UploadDocuments> uploadDocumentsList = new ArrayList<UploadDocuments>();
		String fileName = null;
		String fileExtension = null;
		String patientName = box.getString("patientName");
		String age = box.getString("age");
		String sex = box.getString("sex");
		String hinNo = box.getString("hinNo");
		String address = box.getString("address");
		String hin_no = box.getString("hin_no");

		int hinId = box.getInt("hinId");
		int inpatientId = box.getInt("inpatientId");
		int hospitalId = box.getInt("hospitalId");
		String userName = box.getString("userName");

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
		
		int uploadCount = box.getInt("uploadCount");
		String uploadURL = box.getString("uploadURL");
		String fileSeparator = box.getString("fileSeparator");
		try {
			HibernateTemplate hbt = getHibernateTemplate();
			 hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
           /* List uploadDocumentList = session.createCriteria(UploadDocuments.class).add(Restrictions.eq("FileName", hin_no)).list();
            if(uploadDocumentList.size()==0)
            {
            	UploadDocuments uploadDocuments = new UploadDocuments();
				//String dataInput = new String(bytes);
				//uploadDocuments.setPatientDocument(bytes);
				//uploadDocuments.setPatientDocument(is.toString());
				uploadDocuments.setPatientName(patientName);
				uploadDocuments.setSex(sex);
				uploadDocuments.setAge(age);
				if (address != null)
				uploadDocuments.setAddress(address);
				uploadDocuments.setFileExtension(fileExtension);
				uploadDocuments.setFileName(hin_no);

				if (hinId != 0) {
					Patient patient = new Patient();
					patient.setId(hinId);
					uploadDocuments.setHin(patient);
				}
				if (inpatientId != 0) {
					Inpatient inpatient = new Inpatient();
					inpatient.setId(inpatientId);
					uploadDocuments.setInpatient(inpatient);
				}
				uploadDocuments.setUploadDate(date);
				uploadDocuments.setLastChgDate(date);
				uploadDocuments.setLastChgTime(time);
				uploadDocuments.setLastChgBy(userName);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				uploadDocuments.setHospital(masHospital);
				hbt.save(uploadDocuments);
            }*/
			// hbt.setFetchSize(16*1024*1024);
			if(uploadCount>0){
				for (int i = 1; i <= uploadCount; i++) {
					UploadDocuments uploadDocuments = new UploadDocuments();
					File file=null;
					file = new File(uploadURL+fileSeparator+hin_no +fileSeparator+box.getString("filename"+i));

					File f = new File(uploadURL);
					try {
						if (f.exists()) {
							f.delete();
							f.mkdir();
							FileInputStream is = new FileInputStream(file);
							long length = file.length();
							
							if (length > Integer.MAX_VALUE) {
								// File is too large
							}
							// Create the byte array to hold the data
							byte[] bytes = new byte[(int)length];
							int offset = 0;
							int numRead = 0;
							while (offset < bytes.length
									&& (numRead=is.read(bytes, offset, bytes.length-offset)) >= 0) {
								offset += numRead;
							}

							if (offset < bytes.length) {
								throw new IOException("Could not completely read file "+file.getName());
							}
						
							uploadDocuments.setPatientDocument(bytes);
							is.close();
						} else {
							f.mkdir();
							FileInputStream is = new FileInputStream(file);
							long length = file.length();
							//ByteBuffer byteBuff=null;
							//  int modLength=length/
							if (length > Integer.MAX_VALUE) {
								// File is too large
							}
							// Create the byte array to hold the data
							byte[] bytes = new byte[(int)length];
							int offset = 0;
							int numRead = 0;
							while (offset < bytes.length
									&& (numRead=is.read(bytes, offset, bytes.length-offset)) >= 0) {
								offset += numRead;
							}

							if (offset < bytes.length) {
								throw new IOException("Could not completely read file "+file.getName());
							}
							is.close();
							
							uploadDocuments.setPatientDocument(bytes);
						}
						
						//fileExtension=strToken.nextToken();

					} catch (Exception e) {
						e.printStackTrace();
					}
					
					StringTokenizer strToken = new StringTokenizer(box
							.getString("filename" + i), ".");

					fileName = strToken.nextToken();
					fileExtension = strToken.nextToken();
					
					uploadDocuments.setPatientName(patientName);
					uploadDocuments.setSex(sex);
					uploadDocuments.setAge(age);
					if (address != null)
						uploadDocuments.setAddress(address);
					uploadDocuments.setFileExtension(fileExtension);
					uploadDocuments.setFileName(fileName);

					if (hinId != 0) {
						Patient patient = new Patient();
						patient.setId(hinId);
						uploadDocuments.setHin(patient);
					}
					if (box.getInt("visitId") != 0) {
						Visit visit= new Visit();
						visit.setId(box.getInt("visitId"));
						uploadDocuments.setVisit(visit);
					}
					if (inpatientId != 0) {
						Inpatient inpatient = new Inpatient();
						inpatient.setId(inpatientId);
						uploadDocuments.setInpatient(inpatient);
					}
					uploadDocuments.setDescription(box.getString("description"
							+ i));
					uploadDocuments.setUploadDate(date);
					uploadDocuments.setLastChgDate(date);
					uploadDocuments.setLastChgTime(time);
					uploadDocuments.setLastChgBy(userName);
					MasHospital masHospital = new MasHospital();
					masHospital.setId(hospitalId);
					uploadDocuments.setHospital(masHospital);
					hbt.save(uploadDocuments);

					//file.delete();
				}// end of 'IF'

			}// end of 'for' loop
		    map.put("dataSaved", true);
            }// end of 'try' loop
		catch (Exception e) {
			//System.out.println("File not Saved....................");
			System.err.println("Error: " + e.getMessage());
			e.printStackTrace();
			map.put("dataSaved", false);
		}
		
		return map;

	}

	public Map<String, Object> viewPatientDetails(Map<String, Object> map) {
		Session session = (Session) getSession();

		Map<String, Object> returnMap = new HashMap<String, Object>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<Patient> patientList = new ArrayList<Patient>();
		List<Inpatient> inpatientList = new ArrayList<Inpatient>();
		List<Visit> visitList = new ArrayList<Visit>();

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		int visitId = 0;
		if(map.get("visitId")!=null){
			visitId = (Integer)map.get("visitId");
		}
		String inputField = (String) map.get("inputField");
		String flag = (String) map.get("flag");
		String flag1 = (String) map.get("flag1");
		String message = null;
		String destUploadURL = "";
		if(map.get("destUploadURL")!=null && !map.get("destUploadURL").equals(""))
		{
			destUploadURL=(String)map.get("destUploadURL");
		}
		Criteria criteria = null;
		
		if (flag.equals("upload") && !flag1.equals("viewDocuments")) {
			patientList = session.createCriteria(Patient.class).add(
					Restrictions.eq("Status", "y")).add(
					Restrictions.eq("HinNo", inputField)).list();

			if (patientList.size() == 0) {
				inpatientList = session.createCriteria(Inpatient.class).add(
					//	Restrictions.eq("Status", "y")).add(
						Restrictions.eq("AdNo", inputField)).list();
			}

			if (visitList.size() == 0 && inpatientList.size() == 0
					&& patientList.size() == 0) {
				message = "No record Found !!";
			}
			map.put("message", message);
			map.put("patientList", patientList);
			map.put("inpatientList", inpatientList);

		} else if (flag.equals("view") || flag1.equals("viewDocuments")) {
			String uploadURL = (String) map.get("uploadURL");
			patientList = session.createCriteria(UploadDocuments.class)
					.createAlias("Hin", "p").add(
							Restrictions.eq("p.HinNo", inputField)).add(Restrictions.isNull("Inpatient")).list();
			if (patientList.size() == 0) {
				inpatientList = session.createCriteria(UploadDocuments.class)
						.createAlias("Inpatient", "ip").add(
								Restrictions.eq("ip.AdNo", inputField)).list();
			}

			if (inpatientList.size() == 0 && patientList.size() == 0) {
				message = "No record Found !!";
			}
			System.out.println("inpatientList--- "+inpatientList.size());
			map.put("message", message);
			if(patientList.size() > 0){
			map.put("patientList", patientList);
			}
			if(inpatientList.size() > 0){
			map.put("inpatientList", inpatientList);
			}
			/**
			 * Commented By Ritu as it is not required for view documents
			 */
			/*String[] files = null;
			if (patientList.size() > 0) {
				files = new String[patientList.size()];
				Iterator iterator = patientList.iterator();
				int counter = 0;
				while (iterator.hasNext()) {
					UploadDocuments uploadDocuments = (UploadDocuments) iterator
							.next();
					files[counter] = uploadDocuments.getFileName() + "."
							+ uploadDocuments.getFileExtension();
					// //System.out.println("filename="+files[counter]);
					try {
						FileOutputStream is = new FileOutputStream(destUploadURL
								+ uploadDocuments.getFileName() + "."
								+ uploadDocuments.getFileExtension());
						is.write(out);
						is.flush(); 
						is.close();
						HMSUtil.copyCompletlyFolder(new File(uploadURL),new File(destUploadURL));
						
					
					} catch (Exception e) {
						e.printStackTrace();
					}
					counter++;
				}

			}
			if (inpatientList.size() > 0) {
				files = new String[inpatientList.size()];
				Iterator iterator = inpatientList.iterator();
				int counter = 0;
				while (iterator.hasNext()) {
					UploadDocuments uploadDocuments = (UploadDocuments) iterator
							.next();
					files[counter] = uploadDocuments.getFileName() + "."
							+ uploadDocuments.getFileExtension();
					try {
						FileOutputStream is = new FileOutputStream(uploadURL
								 + files[counter]);
						

						is.write(uploadDocuments.getPatientDocument());
						is.flush();
						is.close();
						File srcFile=new File(uploadURL+uploadDocuments.getFileName() + "."
								+ uploadDocuments.getFileExtension());
						File destFile = new File(destUploadURL
								+ uploadDocuments.getFileName() + "."
								+ uploadDocuments.getFileExtension());
						
						HMSUtil.copyfile(srcFile , destFile);
					} catch (FileNotFoundException e) {
						e.printStackTrace();
					} catch (IOException e) {
						e.printStackTrace();
					}
					counter++;
				}
			}*/

		}

		/*
		 * //System.out.println("IN DATA SERVICE
		 * patientList="+patientList.size()); //System.out.println("IN DATA
		 * SERVICE inpatientList="+inpatientList.size());
		 */
		return map;

	}

	public Map<String, Object> checkItem(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (dataMap.get("visitId") != null) {
			visitId = Integer.parseInt("" + dataMap.get("visitId"));
		}
		String pvmsNo = "";
		if (dataMap.get("pvmsNo") != null) {
			pvmsNo = "" + dataMap.get("pvmsNo");
		}

		Properties properties = new Properties();
		URL resourcePath = Thread.currentThread().getContextClassLoader()
				.getResource("adt.properties");
		try {
			properties.load(resourcePath.openStream());
		} catch (Exception e) {
			e.printStackTrace();
		}
		Session session = (Session) getSession();
		List<PatientAllergicDrugsDt> patientAllergicDrugsDtList = new ArrayList<PatientAllergicDrugsDt>();
		patientAllergicDrugsDtList = (List<PatientAllergicDrugsDt>) session
				.createCriteria(PatientAllergicDrugsDt.class).createAlias(
						"PatientAllergicDrugsHd", "pHd").createAlias(
						"pHd.Visit", "v").add(Restrictions.eq("v.Id", visitId))
				.createAlias("Item", "it").add(
						Restrictions.eq("it.PvmsNo", pvmsNo)).list();
		map.put("patientAllergicDrugsDtList", patientAllergicDrugsDtList);
		return map;
	}

	/**
	 * 
	 * start of methods of opdUpdateDetails BY Shailesh
	 * 
	 */
	@SuppressWarnings("unchecked")
	public List<Patient> getPatientNameForUpadteOpdDetails(
			Map<String, Object> map) {
		List<Patient> patientList = new ArrayList<Patient>();
		String serviceNo = "";
		Session session = (Session) getSession();
		try {
			if (map.get("serviceNo") != null) {
				serviceNo = (String) map.get("serviceNo");

			}
			patientList = session.createCriteria(Patient.class).add(
					Restrictions.eq("ServiceNo", serviceNo)).add(
					Restrictions.eq("PatientStatus", "Out Patient")).list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientList", patientList);
		return patientList;
	}

	@SuppressWarnings("unchecked")
	public List<Visit> getVisitNo(int hinId) {
		Session session = (Session) getSession();
		List<Visit> visitNoList = new ArrayList<Visit>();
		@SuppressWarnings("unused")
		Visit visit = new Visit();
		visitNoList = session.createCriteria(Visit.class).createAlias("Hin",
				"p").add(Restrictions.eq("p.Id", hinId)).addOrder(
				Order.desc("VisitNo")).add(Restrictions.eq("VisitStatus", "C"))
				.list();

		return visitNoList;
	}

public Map<String, Object> getPatientOpdDetails(Map<String, Object> dataMap) {
	
		int visitNo=0;
		int hinId = 0;
		String Nodatafound="yes";
		int current_visitNo=0;
		Map<String, Object> map = new HashMap<String, Object>();
		List<Visit> visitNoList = new ArrayList<Visit>();
		List<Visit> visitNoList1 = new ArrayList<Visit>();
		List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();
		List<DischargeIcdCode> dischargeIcdCodeList = new ArrayList<DischargeIcdCode>();
		List<OpdPatientDetails> opdPatientDetailsList = new ArrayList<OpdPatientDetails>();
		List<OpdTemplate> templateList = new ArrayList<OpdTemplate>();
		PatientPrescriptionHeader patientPrescriptionHeader = new PatientPrescriptionHeader();
		PatientInvestigationHeader patientInvestigationHeader = new PatientInvestigationHeader();
		List<PatientInvestigationHeader> patientInvestigationHeaderList = new ArrayList<PatientInvestigationHeader>();
		List<DgSampleCollectionDetails> dgSampleCollectionDetailsList = new ArrayList<DgSampleCollectionDetails>();

		List<PatientPrescriptionHeader> patientPrescriptionHeaderList = new ArrayList<PatientPrescriptionHeader>();
		List<MasDepartment> deptList = new ArrayList<MasDepartment>();
		List<DgOrderhd> dgOrderhdList = new ArrayList<DgOrderhd>();
		DgOrderhd dgOrderhd = new DgOrderhd();
		List<OpdPatientHistory> opdPatientHistoryList = new ArrayList<OpdPatientHistory>();
		Session session = (Session) getSession();
		List<MasEmployee> doctarsList = new ArrayList<MasEmployee>();
		List<MasDisposal> disposalTypeList =new ArrayList<MasDisposal>();
		try {
			if (dataMap.get("visitNo") != null) {
				visitNo = (Integer) dataMap.get("visitNo");
			}
			if (dataMap.get("current_visitNo") != null) {
				current_visitNo = (Integer) dataMap.get("current_visitNo");
			}
			
			
			if (dataMap.get("hinId") != null) {
				hinId = (Integer) dataMap.get("hinId");
			}
			disposalTypeList = session.createCriteria(MasDisposal.class).add(Restrictions.eq("Status", "y")).list();
			visitNoList = (List<Visit>) session.createCriteria(Visit.class)
					.add(Restrictions.eq("VisitNo", visitNo))
					.createAlias("Hin", "h")
					.add(Restrictions.eq("h.Id", hinId)).list();


			Visit visit = new Visit();
			if (visitNoList != null && visitNoList.size() > 0) {
				visit = visitNoList.get(0);
			
			map.put("visit", visit);
			System.out.println("visitId===="+visit.getId());
			opdPatientDetailsList = (List<OpdPatientDetails>) session
					.createCriteria(OpdPatientDetails.class).createAlias(
							"Visit", "visit").add(
							Restrictions.eq("visit.Id", visit.getId())).list();

		//	System.out.println("opdPatientDetailsList opdPatientDetailsList.get(0).getReferredDept()"+ opdPatientDetailsList.get(0).getReferredDept());
			map.put("opdPatientDetailsList", opdPatientDetailsList);
			System.out.println("opdPatientDetailsList===="+opdPatientDetailsList.size());
			String referedDoctarsArray[];
			if (opdPatientDetailsList != null && opdPatientDetailsList.size() > 0) {
		
               if(opdPatientDetailsList.get(0).getReferredDept()!=null)
               {
				if (opdPatientDetailsList.get(0).getReferredDept()
						.contains(",")) {
					referedDoctarsArray = opdPatientDetailsList.get(0)
							.getReferredDept().split(",");

				} else {
					referedDoctarsArray = new String[1];
					referedDoctarsArray[0] = opdPatientDetailsList.get(0)
							.getReferredDept();
				}

				for (String reffredDoctars : referedDoctarsArray) {
					if (!reffredDoctars.equals("") && !reffredDoctars.equals("0")) {
						//System.out.println("reffredDoctars--12987 opd ds->"+reffredDoctars);
						MasDepartment masDepartment = (MasDepartment) session
								.load(MasDepartment.class, Integer
										.parseInt(reffredDoctars));

						doctarsList.addAll(masDepartment.getMasEmployees());
					}

				}
               }
				map.put("doctarsList", doctarsList);
			}

			opdPatientHistoryList = (List<OpdPatientHistory>) session
					.createCriteria(OpdPatientHistory.class)
					.add(Restrictions.eq("VisitInpatientId", visit.getId()))
					.add(Restrictions.eq("Hin.Id",hinId))
					.list();
			if (opdPatientHistoryList != null
					&& opdPatientHistoryList.size() > 0)
				map.put("opdPatientHistoryList", opdPatientHistoryList);

			dischargeIcdCodeList = (List<DischargeIcdCode>) session
					.createCriteria(DischargeIcdCode.class).createAlias(
							"Visit", "v").add(
							Restrictions.eq("v.Id", visit.getId()))
					.createAlias("Hin", "p").add(
							Restrictions.eq("p.Id", visit.getHin().getId()))
					.list();
			//System.out.println("dischargeIcdCodeList"	+ dischargeIcdCodeList.size());
			if (dischargeIcdCodeList != null && dischargeIcdCodeList.size() > 0)
				map.put("dischargeIcdCodeList", dischargeIcdCodeList);

			patientPrescriptionHeaderList = (List<PatientPrescriptionHeader>) session
					.createCriteria(PatientPrescriptionHeader.class)
					.createAlias("Visit", "v").add(
							Restrictions.eq("v.Id", visit.getId()))
					.createAlias("Hin", "p").add(
							Restrictions.eq("p.Id", visit.getHin().getId()))
					.list();
			if (patientPrescriptionHeaderList != null
					&& patientPrescriptionHeaderList.size() > 0) {
				patientPrescriptionHeader = patientPrescriptionHeaderList
						.get(0);
				map.put("patientPrescriptionHeader", patientPrescriptionHeader);
				System.out.println("patientPrescriptionHeaderList"+ patientPrescriptionHeaderList.size());
			}

			patientInvestigationHeaderList = (List<PatientInvestigationHeader>) session
					.createCriteria(PatientInvestigationHeader.class)
					.createAlias("Visit", "v").add(
							Restrictions.eq("v.Id", visit.getId()))
					.createAlias("Hin", "p").add(
							Restrictions.eq("p.Id", visit.getHin().getId()))
					.list();
			dgSampleCollectionDetailsList = (List<DgSampleCollectionDetails>) session
					.createCriteria(DgSampleCollectionDetails.class)
					.createAlias("SampleCollectionHeader", "sampleCollHeader")
					.createAlias("sampleCollHeader.Visit", "v").add(
							Restrictions.eq("v.Id", visit.getId()))
					.createAlias("sampleCollHeader.Hin", "p").add(
							Restrictions.eq("OrderStatus", "P")).add(
							Restrictions.eq("p.Id", visit.getHin().getId()))
					.list();
			if (dgSampleCollectionDetailsList.size() > 0) {
				map.put("dgSampleCollectionDetailsList",
						dgSampleCollectionDetailsList);
			}
			if (patientInvestigationHeaderList != null
					&& patientInvestigationHeaderList.size() > 0) {
				patientInvestigationHeader = patientInvestigationHeaderList
						.get(0);
				map.put("patientInvestigationHeader",
						patientInvestigationHeader);
			}

			dgOrderhdList = (List<DgOrderhd>) session.createCriteria(
					DgOrderhd.class).createAlias("Visit", "v").add(
					Restrictions.eq("v.Id", visit.getId())).createAlias("Hin",
					"p").add(Restrictions.eq("p.Id", visit.getHin().getId()))
					.list();
			
			if (dgOrderhdList != null && dgOrderhdList.size() > 0) {
				dgOrderhd = dgOrderhdList.get(0);
				map.put("dgOrderhd", dgOrderhd);
			}
			List<String> departmentTypeCode = new ArrayList<String>();
			
			deptList = session.createCriteria(MasDepartment.class).list();

			map.put("deptList", deptList);
			int deptId = 0;
			if (dataMap.get("deptId") != null) {
				deptId = (Integer) dataMap.get("deptId");
			}
			templateList = session.createCriteria(OpdTemplate.class)
					.createAlias("Department", "dept").add(
							Restrictions.eq("dept.Id", deptId)).list();
			map.put("templateList", templateList);
			frequencyList = session.createCriteria(MasFrequency.class).list();
			map.put("frequencyList", frequencyList);
			}else 
			{
				visitNoList1 = (List<Visit>) session.createCriteria(Visit.class)
				.add(Restrictions.eq("VisitNo", current_visitNo))
				.createAlias("Hin", "h")
				.add(Restrictions.eq("h.Id", hinId)).list();


		        Visit visit1 = new Visit();
		if (visitNoList1 != null && visitNoList1.size() > 0) {
			visit1 = visitNoList1.get(0);
		
		     map.put("visit", visit1);
	      	}
		        Nodatafound="no";
				
			}
			map.put("Nodatafound", Nodatafound);
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("disposalTypeList", disposalTypeList);
		return map;
	
	}

	@SuppressWarnings("unchecked")
	public boolean finalUpdateOpdPatientDetails(Map<String,Object> mapForDS) {
		Session session = (Session) getSession();
		boolean succesfullyUpdated = false;
		String orderSeqNo=(String)mapForDS.get("orderSeqNo");
		List pvmsNoList = (List) mapForDS.get("pvmsNoList");
		List<Integer> frequencyList = (List) mapForDS.get("frequencyList");
		List<String> nomenclatureList = (List) mapForDS.get("nomenclatureList");
		List<String> dosageList = (List) mapForDS.get("dosageList");
		List<String> typeLeftRightList = (List) mapForDS
				.get("typeLeftRightList");
		List<Integer> totalList = (List) mapForDS.get("totalList");
		List<Integer> noOfDaysList = (List) mapForDS.get("noOfDaysList");

		List<String> chargeCodeIdList = (List) mapForDS.get("chargeCodeIdList");
		List<Integer> quantityList = (List) mapForDS.get("quantityList");
		List<String> clinicalList = (List) mapForDS.get("clinicalList");
		String[] diagnosisIdAray = (String[]) mapForDS.get("diagnosisIdAray");
		String[] dgSampleCollectionDetailsIdArray = (String[]) mapForDS
				.get("dgSampleCollectionDetailsIdArray");
		String[] dgSampleCollectionHeaderIdArray = (String[]) mapForDS
				.get("dgSampleCollectionHeaderIdArray");
		StringComparator stringComparator = new StringComparator();
		Arrays.sort(dgSampleCollectionDetailsIdArray, stringComparator);
		List<String> remarksList = (List) mapForDS.get("remarksList");
		String remarks="";
		if (mapForDS.get("remaks") != null) {
			remarks = (String) mapForDS.get("remaks");
		}
		int hinId = (Integer) mapForDS.get("hinId");
		int departmentId = (Integer) mapForDS.get("departmentId");
		int visitId = (Integer) mapForDS.get("visitId");
		int hospitalId = (Integer) mapForDS.get("hospitalId");
		String height = (String) mapForDS.get("height");
		String weight = (String) mapForDS.get("weight");
		String pulse = (String) mapForDS.get("pulse");
		int opdPatientDetailsId = 0;
		int opdPatientHistoryId = 0;
		int patientInvestigationHeaderId = 0;
		int patientPrescriptionHeaderId = 0;

		int userId = (Integer) mapForDS.get("userId");
		int empId = (Integer) mapForDS.get("empId");
		String bp = (String) mapForDS.get("bp");
		String userName = (String) mapForDS.get("userName");
		String temperature = (String) mapForDS.get("temperature");
		String afmsDescription = (String) mapForDS.get("afmsDescription");
		String referredDept = (String) mapForDS.get("referredDept");
		String consultationTime = (String) mapForDS.get("consultationTime");
		String consultationDate = (String) mapForDS.get("consultationDate");
		Date consultationDateToInsert = HMSUtil
				.convertStringTypeDateToDateType(consultationDate);
		String initialDiagnosis = (String) mapForDS.get("initialDiagnosis");

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);

		String plan = (String) mapForDS.get("plan");
		String nextVisitDate = (String) mapForDS.get("nextVisitDate");
		String onExamination = (String) mapForDS.get("onExamination");

		String presentComplain = (String) mapForDS.get("presentComplain");
		String presentIllness = (String) mapForDS.get("presentIllness");
		String pastHistory = (String) mapForDS.get("pastHistory");
		String personalHistory = (String) mapForDS.get("personalHistory");
		String familyHistory = (String) mapForDS.get("familyHistory");
		String otherDetails = (String) mapForDS.get("otherDetails");

		Date nextVisitDateToInsert = HMSUtil
				.convertStringTypeDateToDateType(nextVisitDate);
		List<Integer> itemIdList = new ArrayList<Integer>();
		String query = "";
		List objectList = new ArrayList();

		Transaction tx = null;

		try {
			tx = session.beginTransaction();
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (mapForDS.get("opdPatientDetailsId") != null) {
				opdPatientDetailsId = (Integer) mapForDS
						.get("opdPatientDetailsId");
				//System.out.println("opdPatientDetails id in data"	+ opdPatientDetailsId);
			}
			if (mapForDS.get("opdPatientHistoryId") != null) {
				opdPatientHistoryId = (Integer) mapForDS
						.get("opdPatientHistoryId");
			}
			if (mapForDS.get("patientPrescriptionHeaderId") != null) {
				patientPrescriptionHeaderId = (Integer) mapForDS
						.get("patientPrescriptionHeaderId");
			}
			if (mapForDS.get("patientInvestigationHeaderId") != null) {
				patientInvestigationHeaderId = (Integer) mapForDS
						.get("patientInvestigationHeaderId");

			}
			OpdPatientDetails opdPatientDetails = (OpdPatientDetails) hbt.load(
					OpdPatientDetails.class, opdPatientDetailsId);

			Visit visitObj = new Visit();
			//System.out.println("visitId " + visitId);
			visitObj.setId(visitId);

			opdPatientDetails.setVisit(visitObj);
			if (empId != 0) {
				MasEmployee masEmployee = new MasEmployee();
				masEmployee.setId(empId);
				opdPatientDetails.setEmployee(masEmployee);
			}
			MasHospital masHospitalObj = new MasHospital();
			masHospitalObj.setId(hospitalId);
			opdPatientDetails.setHospital(masHospitalObj);
			// setting id
			opdPatientDetails.setId(opdPatientDetailsId);
			opdPatientDetails.setHeight(height);
			opdPatientDetails.setVweight(weight);
			opdPatientDetails.setPulse(pulse);
			opdPatientDetails.setBp(bp);
			if (!temperature.equals("")) {
				opdPatientDetails.setTemperature(temperature);
			}
			opdPatientDetails.setAfmsDesc(afmsDescription);
			opdPatientDetails.setReferedDoctars((String) mapForDS
					.get("referredDoctars"));
			opdPatientDetails.setConsultationTime(consultationTime);
			opdPatientDetails.setConsultationDate(consultationDateToInsert);
			opdPatientDetails.setPlan(plan);
			opdPatientDetails.setInitialDiagnosis(initialDiagnosis);
			opdPatientDetails.setOpdDate(date);
			opdPatientDetails.setOpdTime(time);
			opdPatientDetails.setNextVisitDate(nextVisitDateToInsert);
			opdPatientDetails.setReferredDept(referredDept);
			opdPatientDetails.setOnExamination(onExamination);
			hbt.saveOrUpdate(opdPatientDetails);

			// --------------- values to be Opd Patient
			// History--------------------
			OpdPatientHistory patientHistory = (OpdPatientHistory) session
					.load(OpdPatientHistory.class, opdPatientHistoryId);

			MasDepartment md = new MasDepartment();
			md.setId(departmentId);
			patientHistory.setDepartment(md);

			MasHospital mh = new MasHospital();
			mh.setId(hospitalId);
			patientHistory.setHospital(mh);

			Patient p = new Patient();
			p.setId(hinId);
			patientHistory.setHin(p);

			/*
			 * Visit visit = new Visit(); visit.setId(visitId);
			 */
			patientHistory.setVisitInpatientId(visitId);

			patientHistory.setLastChgTime(time);
			patientHistory.setLastChgBy("admin");

			patientHistory.setStatus("y");
			patientHistory.setLastChgDate(date);
			// setting id
			patientHistory.setId(opdPatientHistoryId);
			patientHistory.setPersonalPastHistory(pastHistory);
			patientHistory.setPersonalPresentHistory(personalHistory);

			patientHistory.setFamilyPastHistory(familyHistory);
			patientHistory.setPresentComplain(presentComplain);
			patientHistory.setPresentIllness(presentIllness);
			patientHistory.setPersonalOtherDetails(otherDetails);

			patientHistory.setIpOpPacStatus("OP");

			hbt.saveOrUpdate(patientHistory);

			// --------------- values to be updated in visit table to change
			// it's status--------------------

			Visit visitObjToUpdate = (Visit) hbt.load(Visit.class, visitId);
			visitObjToUpdate.setVisitStatus("C");
			hbt.saveOrUpdate(visitObjToUpdate);

			// -----------------------------------------------------------------------------------

			// --------------values to be entered in discharge table for
			// diagnosis----------------------

			List<DischargeIcdCode> dischargeIcdCodeOldList = new ArrayList<DischargeIcdCode>();
			dischargeIcdCodeOldList = (List<DischargeIcdCode>) session
					.createCriteria(DischargeIcdCode.class).add(
							Restrictions.eq("Hin.Id", hinId)).add(
							Restrictions.eq("Visit.Id", visitId)).list();
			for (DischargeIcdCode dischargeIcdCode : dischargeIcdCodeOldList) {
				session.delete(dischargeIcdCode);
			}
			if (diagnosisIdAray != null) {
				for (int i = 0; i < diagnosisIdAray.length; i++) {
					if (diagnosisIdAray[i] != null) {
						if (!diagnosisIdAray[i].equals("0")) {
							MasIcd masIcd = new MasIcd();
							query = "select icd_id from mas_icd where icd_code='"
									+ diagnosisIdAray[i] + "'";
							objectList = (List) session.createSQLQuery(query)
									.list();
							masIcd.setId(Integer.parseInt(""
									+ objectList.get(0)));

							DischargeIcdCode dischargeIcdCode = new DischargeIcdCode();
							dischargeIcdCode.setIcd(masIcd);
							Patient patientObj = new Patient();
							patientObj.setId(hinId);
							dischargeIcdCode.setHin(patientObj);
							dischargeIcdCode
									.setAddEditDate(consultationDateToInsert);
							dischargeIcdCode.setAddEditTime(consultationTime);
							dischargeIcdCode.setStatus("y");
							dischargeIcdCode.setDiagnosisStatus("p");
							Visit visit = new Visit();
							visit.setId(visitId);

							dischargeIcdCode.setVisit(visit);

							hbt.save(dischargeIcdCode);
						}
					}
				}
			}
			PatientPrescriptionHeader patientPrescriptionHeader;
			if (pvmsNoList.size() > 0) {
				if (mapForDS.get("patientPrescriptionHeaderId") != null) {
					patientPrescriptionHeader = (PatientPrescriptionHeader) session
							.load(PatientPrescriptionHeader.class,
									patientPrescriptionHeaderId);

					patientPrescriptionHeader.setRemarks(remarks);
					Patient patient = new Patient();
					patient.setId(hinId);
					patientPrescriptionHeader.setHin(patient);
					// setting id
					patientPrescriptionHeader
							.setId(patientPrescriptionHeaderId);
					MasDepartment masDepartment = new MasDepartment();
					masDepartment.setId(departmentId);
					patientPrescriptionHeader.setDepartment(masDepartment);
					Visit visit = new Visit();
					visit.setId(visitId);
					patientPrescriptionHeader.setVisit(visit);
					MasHospital masHospital = new MasHospital();
					masHospital.setId(hospitalId);
					patientPrescriptionHeader.setHospital(masHospital);
					patientPrescriptionHeader.setStatus("p");
					patientPrescriptionHeader
							.setPrescriptionDate(consultationDateToInsert);
					patientPrescriptionHeader
							.setPrescriptionTime(consultationTime);
					hbt.update(patientPrescriptionHeader);
					hbt.refresh(patientPrescriptionHeader);
				} else {
					patientPrescriptionHeader = new PatientPrescriptionHeader();
					patientPrescriptionHeader.setRemarks(remarks);
					Patient patient = new Patient();
					patient.setId(hinId);
					patientPrescriptionHeader.setHin(patient);

					MasDepartment masDepartment = new MasDepartment();
					masDepartment.setId(departmentId);
					patientPrescriptionHeader.setDepartment(masDepartment);
					Visit visit = new Visit();
					visit.setId(visitId);
					patientPrescriptionHeader.setVisit(visit);
					MasHospital masHospital = new MasHospital();
					masHospital.setId(hospitalId);
					patientPrescriptionHeader.setHospital(masHospital);
					patientPrescriptionHeader.setStatus("p");
					patientPrescriptionHeader
							.setPrescriptionDate(consultationDateToInsert);
					patientPrescriptionHeader
							.setPrescriptionTime(consultationTime);
					hbt.save(patientPrescriptionHeader);
					hbt.refresh(patientPrescriptionHeader);
				}

				List<PatientPrescriptionDetails> patientPrescriptionDetailsList = session
						.createCriteria(PatientPrescriptionDetails.class).add(
								Restrictions.eq("Prescription.Id",
										patientPrescriptionHeaderId)).list();
				if (patientPrescriptionDetailsList != null
						&& patientPrescriptionDetailsList.size() > 0) {
					for (PatientPrescriptionDetails patientPrescriptionDetails1 : patientPrescriptionDetailsList) {
						session.delete(patientPrescriptionDetails1);
					}
				}
				for (int i = 0; i < pvmsNoList.size(); i++) {
					String pvmsNo = (String) pvmsNoList.get(i);
					String nomenclature = (String) nomenclatureList.get(i);
					int itemId = getItemIdFromPVMS(nomenclature, pvmsNo,hospitalId);
					itemIdList.add(itemId);
				}
				for (int i = 0; i < itemIdList.size(); i++) {
					PatientPrescriptionDetails patientPrescriptionDetails = new PatientPrescriptionDetails();
					MasStoreItem masStoreItem = new MasStoreItem();
					masStoreItem.setId(itemIdList.get(i));
					// setting id
					patientPrescriptionDetails.setItem(masStoreItem);
					MasFrequency masFrequency = new MasFrequency();
					masFrequency.setId(frequencyList.get(i));
					patientPrescriptionDetails.setFrequency(masFrequency);
					patientPrescriptionDetails.setDosage(dosageList.get(i));
					patientPrescriptionDetails
							.setType(typeLeftRightList.get(i));
					patientPrescriptionDetails.setNoOfDays(noOfDaysList.get(i));
					patientPrescriptionDetails
							.setPrescription(patientPrescriptionHeader);
					patientPrescriptionDetails.setTotal(totalList.get(i));
					patientPrescriptionDetails.setRemarks(remarksList.get(i));
					hbt.save(patientPrescriptionDetails);
				}
			}
			boolean allLabTestCancelled = true;
			for (String dgSampleCollectionHeaderId : dgSampleCollectionHeaderIdArray) {
				if (dgSampleCollectionHeaderId != null
						&& !dgSampleCollectionHeaderId.equals("")) {
					List<DgSampleCollectionHeader> dgSampleCollectionHeaderList = new ArrayList<DgSampleCollectionHeader>();
					Set<DgSampleCollectionDetails> dgSampleCollectionDetailSet = new HashSet<DgSampleCollectionDetails>();

					Criteria crit = session.createCriteria(
							DgSampleCollectionHeader.class).add(
							Restrictions.eq("Id", Integer
									.parseInt(dgSampleCollectionHeaderId)));

					dgSampleCollectionHeaderList = crit.list();
					if (dgSampleCollectionHeaderList.size() > 0) {
						DgSampleCollectionHeader dgSampleCollectionHeader = dgSampleCollectionHeaderList
								.get(0);
						dgSampleCollectionDetailSet = dgSampleCollectionHeader
								.getDgSampleCollectionDetails();
						List<String> orderStatusList = new ArrayList<String>();
						allLabTestCancelled = true;
						for (DgSampleCollectionDetails dgSampleCollectionDetails : dgSampleCollectionDetailSet) {
							int found = Arrays.binarySearch(
									dgSampleCollectionDetailsIdArray,
									dgSampleCollectionDetails.getId()
											.toString(), stringComparator);
							if (found >= 0) {
								dgSampleCollectionDetails.setOrderStatus("X");
								hbt.update(dgSampleCollectionDetails);
								hbt.refresh(dgSampleCollectionDetails);
							}
							if (!dgSampleCollectionDetails.getOrderStatus()
									.equalsIgnoreCase("X")) {
								allLabTestCancelled = false;
							}
							if (dgSampleCollectionDetails.getMaincharge()
									.getMainChargecodeCode().equalsIgnoreCase(
											"Lab")) {
								orderStatusList.add(dgSampleCollectionDetails
										.getOrderStatus());
							}
						}
						if (allLabTestCancelled) {
							dgSampleCollectionHeader.setOrderStatus("X");
							hbt.update(dgSampleCollectionHeader);
							hbt.refresh(dgSampleCollectionHeader);
						}
						if (!orderStatusList.contains("P")) {
							if (orderStatusList.contains("A")
									|| orderStatusList.contains("E")) {
								dgSampleCollectionHeader.setOrderStatus("A");
								hbt.update(dgSampleCollectionHeader);
								hbt.refresh(dgSampleCollectionHeader);
							}
						}
					}
					// tx.commit();
					// }catch (Exception e) {
					// if (tx != null) tx.rollback();
					// e.printStackTrace();
					// }
				}
			}

			PatientInvestigationHeader patientInvestigationHeader = null;
			if (chargeCodeIdList.size() > 0) {
				MasHospital masHospital = new MasHospital();
				Patient patient = new Patient();
				MasEmployee masEmployee2 = new MasEmployee();
				MasDepartment masDepartment = new MasDepartment();
				if (mapForDS.get("patientInvestigationHeaderId") != null) {
					patientInvestigationHeader = (PatientInvestigationHeader) session
							.load(PatientInvestigationHeader.class,
									patientInvestigationHeaderId);
					patient.setId(hinId);
					patientInvestigationHeader.setHin(patient);

					masDepartment.setId(departmentId);
					patientInvestigationHeader.setDepartment(masDepartment);

					Visit visit = new Visit();
					visit.setId(visitId);
					patientInvestigationHeader.setVisit(visit);
					// setting id
					masHospital.setId(hospitalId);
					patientInvestigationHeader
							.setId(patientInvestigationHeaderId);
					patientInvestigationHeader.setHospital(masHospital);
					patientInvestigationHeader.setStatus("p");
					patientInvestigationHeader
							.setInvestigationDate(consultationDateToInsert);
					patientInvestigationHeader
							.setInvestigationTime(consultationTime);
					hbt.update(patientInvestigationHeader);

					Query deleteQuery = session
							.createQuery("delete from PatientInvestigationDetails "
									+ "where InvestigationHeader.Id="
									+ patientInvestigationHeaderId);
					int row = deleteQuery.executeUpdate();
					if (row == 0) {
						//System.out.println("Doesn't deleted any row!");
					} else {
						//System.out.println("Deleted	Row: " + row);
					}
				} else {
					patientInvestigationHeader = new PatientInvestigationHeader();
					patient.setId(hinId);
					patientInvestigationHeader.setHin(patient);

					masDepartment.setId(departmentId);
					patientInvestigationHeader.setDepartment(masDepartment);

					Visit visit = new Visit();
					visit.setId(visitId);
					patientInvestigationHeader.setVisit(visit);
					// setting id
					masHospital.setId(hospitalId);

					patientInvestigationHeader.setHospital(masHospital);
					patientInvestigationHeader.setStatus("p");
					patientInvestigationHeader
							.setInvestigationDate(consultationDateToInsert);
					patientInvestigationHeader
							.setInvestigationTime(consultationTime);
					hbt.save(patientInvestigationHeader);
				}
			}
			// ///////////////////////////////////////////////////////
			// By Tirath
			
			Map<String, Object> utilMap1 = new HashMap<String, Object>();
			utilMap1 = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			
			String time1 = (String) utilMap1.get("currentTimeWithoutSc");
			if (chargeCodeIdList.size() > 0) {
				MasDepartment masDepartment = new MasDepartment();
				MasHospital masHospital = new MasHospital();
				Patient patient = new Patient();
				MasEmployee masEmployee2 = new MasEmployee();
				//String orderSeqNo = "";
				// PatientInvestigationHeader patientInvestigationHeader= new
				// PatientInvestigationHeader();

				// patient.setId(hinId);
				// patientInvestigationHeader.setHin(patient);

				// masDepartment.setId(departmentId);
				// patientInvestigationHeader.setDepartment(masDepartment);
				// Visit visit= new Visit();
				// visit.setId(visitId);
				// patientInvestigationHeader.setVisit(visit);

				// masHospital.setId(hospitalId);
				// patientInvestigationHeader.setHospital(masHospital);
				// patientInvestigationHeader.setStatus("p");
				// patientInvestigationHeader.setInvestigationDate(consultationDateToInsert);
				// patientInvestigationHeader.setInvestigationTime(consultationTime);
				// hbt.save(patientInvestigationHeader);

				DgOrderhd dgOrderhd = new DgOrderhd();
				dgOrderhd.setOrderDate(consultationDateToInsert);
				dgOrderhd.setOrderTime(time1);
				masHospital.setId(hospitalId);
				dgOrderhd.setHospital(masHospital);
				patient.setId(hinId);
				dgOrderhd.setHin(patient);
				masDepartment.setId(departmentId);
				dgOrderhd.setDepartment(masDepartment);
				masEmployee2.setId(empId);
				dgOrderhd.setPrescribedBy(masEmployee2);
				dgOrderhd.setPatientType("OP");
				dgOrderhd.setTestType("Regular");
				dgOrderhd.setCreatedby(userName);
				dgOrderhd.setCreatedon(consultationDateToInsert);

				//orderSeqNo = generateOrderNumber(); By Tirath
				dgOrderhd.setOrderNo(orderSeqNo);
				if (visitId != 0) {
					Visit visit = new Visit();
					visit.setId(visitId);
					dgOrderhd.setVisit(visit);
				}
				dgOrderhd.setOrderStatus("C");
				dgOrderhd.setClinicalNote(clinicalList.get(0));
				dgOrderhd.setLabOrderStatus("LC");
				dgOrderhd.setLastChgBy(empId);
				dgOrderhd.setLastChgDate(consultationDateToInsert);
				dgOrderhd.setLastChgTime(consultationTime);
				dgOrderhd
						.setInvestigationRequestionNo(patientInvestigationHeader);
				hbt.save(dgOrderhd);
				hbt.refresh(dgOrderhd);

				for (int i = 0; i < chargeCodeIdList.size(); i++) {
					PatientInvestigationDetails patientInvestigationDetails = new PatientInvestigationDetails();
					patientInvestigationDetails
							.setInvestigationHeader(patientInvestigationHeader);
					MasChargeCode masChargeCode = new MasChargeCode();
					masChargeCode.setId(Integer.parseInt(chargeCodeIdList
							.get(i)));
					patientInvestigationDetails.setChargeCode(masChargeCode);
					// patientInvestigationDetails.setQuantity(quantityList.get(i));
					patientInvestigationDetails.setClinicalNotes(clinicalList
							.get(i));
					hbt.save(patientInvestigationDetails);

					DgOrderdt dgOrderdt = new DgOrderdt();
					dgOrderdt.setOrderhd(dgOrderhd);
					masChargeCode.setId(Integer.parseInt(chargeCodeIdList
							.get(i)));
					dgOrderdt.setChargeCode(masChargeCode);
					// dgOrderdt.setOrderQty(quantityList.get(i));

					dgOrderdt.setCreatedby(userName);
					dgOrderdt.setCreatedon(consultationDateToInsert);
					dgOrderdt.setLastChgBy(empId);
					dgOrderdt.setLastChgDate(consultationDateToInsert);
					dgOrderdt.setLastChgTime(consultationTime);
					// method written for taking out the values of mascharge
					// code and subcharge
					Map masChargeMap = getMasChargeCodeFromChargeId(Integer
							.parseInt(chargeCodeIdList.get(i)));
					MasChargeCode masChargeCodeObj = (MasChargeCode) masChargeMap
							.get("masChargeCode");
					int mainChargeId = masChargeCodeObj.getMainChargecode()
							.getId();
					int subChargeId = masChargeCodeObj.getSubChargecode()
							.getId();
					if (masChargeCodeObj.getMainChargecode()
							.getMainChargecodeCode().equalsIgnoreCase("Lab")) {
						dgOrderdt.setOrderStatus("C");
					} else {
						dgOrderdt.setOrderStatus("P");
					}

					MasMainChargecode masMainChargecode = new MasMainChargecode();
					masMainChargecode.setId(mainChargeId);
					dgOrderdt.setMainChargecode(masMainChargecode);
					MasSubChargecode masSubChargecode = new MasSubChargecode();
					masSubChargecode.setId(subChargeId);
					dgOrderdt.setSubChargeid(masSubChargecode);
					dgOrderdt.setInvestigation(new DgMasInvestigation(Integer
							.parseInt(chargeCodeIdList.get(i))));
					hbt.save(dgOrderdt);
				}

				// ///////////// save Sample collection details for Radiology
				// test////////////////////

				String dateCollection = (String) utilMap.get("currentDate");
				String timeCollection = (String) utilMap.get("currentTime");

				DgSampleCollectionHeader dgSampleCollectionHeader = new DgSampleCollectionHeader();
				List<MasChargeCode> chargeCodeList = new ArrayList<MasChargeCode>();
				boolean goneInLoop = false;

				for (int j = 0; j < chargeCodeIdList.size() && !goneInLoop; j++) {
					int chargeCodeId = Integer.parseInt(""
							+ chargeCodeIdList.get(j));
					chargeCodeList = session
							.createCriteria(MasChargeCode.class).add(
									Restrictions.eq("Id", chargeCodeId))
							.createAlias("MainChargecode", "mcc").createAlias(
									"mcc.Department", "dept").createAlias(
									"dept.DepartmentType", "dt").add(
									Restrictions.eq("dt.DepartmentTypeCode",
											"RADIO")).list();
					if (chargeCodeList.size() > 0) {
						for (MasChargeCode chargeCode : chargeCodeList) {
							try {
								int inpatientId = 0;
								if (visitId != 0) {
									Visit visit1 = new Visit();
									visit1.setId(visitId);
									dgSampleCollectionHeader.setVisit(visit1);
									dgSampleCollectionHeader
											.setPatientType("OP");
								}

								if (hinId != 0) {
									Patient patient1 = new Patient();
									patient1.setId(hinId);
									dgSampleCollectionHeader.setHin(patient1);
								}
								if (hospitalId != 0) {
									MasHospital hospital = new MasHospital();
									hospital.setId(hospitalId);
									dgSampleCollectionHeader
											.setHospital(hospital);
								}

								if (departmentId != 0) {
									MasDepartment masDepartment1 = new MasDepartment();
									masDepartment1.setId(chargeCode
											.getMainChargecode()
											.getDepartment().getId());
									dgSampleCollectionHeader
											.setDepartment(masDepartment1);
								}

								if (departmentId != 0) {
									MasDepartment orderByDepartment = new MasDepartment();
									orderByDepartment.setId(departmentId);
									dgSampleCollectionHeader
											.setOrderByDepartment(orderByDepartment);
								}

								dgSampleCollectionHeader.setOrder(dgOrderhd);

								// if (departmentId != 0) {
								// DgCollectionCenter dgCollectionCenter = new
								// DgCollectionCenter();
								// dgCollectionCenter.setId(departmentId);
								// dgSampleCollectionHeader.setCollectionCenter(dgCollectionCenter);
								// }

								dgSampleCollectionHeader.setOrderStatus("P");
								dgSampleCollectionHeader.setLastChgBy(userName);
								dgSampleCollectionHeader
										.setLastChgDate(HMSUtil
												.convertStringTypeDateToDateType(dateCollection));
								dgSampleCollectionHeader.setLastChgTime(time);
								dgSampleCollectionHeader
										.setDiagnosisDate(HMSUtil
												.convertStringTypeDateToDateType(dateCollection));
								dgSampleCollectionHeader.setDiagnosisTime(time);
								hbt.save(dgSampleCollectionHeader);

							} catch (DataAccessException e) {
								e.printStackTrace();
							}
							try {

								for (int i = 0; i < chargeCodeIdList.size(); i++) {
									int chargeId = 0;
									if (chargeCodeIdList.get(i) != null
											&& !chargeCodeIdList.get(i).equals(
													"")) {
										chargeId = Integer
												.parseInt((String) chargeCodeIdList
														.get(i));
										MasChargeCode maschrgCode = (MasChargeCode) session
												.createCriteria(
														MasChargeCode.class)
												.add(
														Restrictions.eq("Id",
																chargeId))
												.list().get(0);
										if (maschrgCode.getMainChargecode()
												.getMainChargecodeCode()
												.equalsIgnoreCase("RADIO")) {
											MasChargeCode masChargeCode1 = new MasChargeCode();
											MasSubChargecode masSubChargecode1 = new MasSubChargecode();

											DgSampleCollectionDetails dgSampleCollectionDetails = new DgSampleCollectionDetails();
											dgSampleCollectionDetails
													.setSampleCollectionHeader(dgSampleCollectionHeader);

											dgSampleCollectionDetails
													.setCollected("y");

											masChargeCode1
													.setId(Integer
															.parseInt((String) chargeCodeIdList
																	.get(i)));
											dgSampleCollectionDetails
													.setChargeCode(masChargeCode1);

											MasMainChargecode masMainChargecode1 = new MasMainChargecode();
											masMainChargecode1
													.setId(maschrgCode
															.getMainChargecode()
															.getId());
											dgSampleCollectionDetails
													.setMaincharge(masMainChargecode1);

											dgSampleCollectionDetails
													.setSubcharge(maschrgCode
															.getSubChargecode());

											MasEmployee masEmployee1 = new MasEmployee();
											masEmployee1.setId(userId);
											dgSampleCollectionDetails
													.setCollectedBy(masEmployee1);

											dgSampleCollectionDetails
													.setDiagNo(generateDiagNumber(maschrgCode
															.getSubChargecode()
															.getId()));

											dgSampleCollectionDetails
													.setInvestigation(new DgMasInvestigation(
															chargeId));
											dgSampleCollectionDetails
													.setLastChgBy(userName);
											dgSampleCollectionDetails
													.setLastChgDate(HMSUtil
															.convertStringTypeDateToDateType(dateCollection));
											dgSampleCollectionDetails
													.setLastChgTime(time);
											dgSampleCollectionDetails
													.setRejected("n");
											dgSampleCollectionDetails
													.setSampleCollDatetime(new Date());
											dgSampleCollectionDetails
													.setOrderStatus("P");
											try {
												hbt
														.save(dgSampleCollectionDetails);
											} catch (RuntimeException e) {
												e.printStackTrace();
											}
										}
									}
								}
							} catch (NumberFormatException e) {
								e.printStackTrace();
							}
						}
						goneInLoop = true;
					}
				}
				// ///////////////////////////End Save details For Radio Order
				// Booking///////////////////////////

				// ////////////////////////// Save details order booking for lab
				// /////////////////////
				dgSampleCollectionHeader = new DgSampleCollectionHeader();
				chargeCodeList = new ArrayList<MasChargeCode>();
				goneInLoop = false;
				for (int j = 0; j < chargeCodeIdList.size() && !goneInLoop; j++) {
					int chargeCodeId = Integer.parseInt(""
							+ chargeCodeIdList.get(j));
					chargeCodeList = session
							.createCriteria(MasChargeCode.class).add(
									Restrictions.eq("Id", chargeCodeId))
							.createAlias("MainChargecode", "mcc").createAlias(
									"mcc.Department", "dept").createAlias(
									"dept.DepartmentType", "dt").add(
									Restrictions.eq("dt.DepartmentTypeCode",
											"DIAG")).list();

					if (chargeCodeList.size() > 0) {
						for (MasChargeCode chargeCode : chargeCodeList) {
							try {
								int inpatientId = 0;
								if (visitId != 0) {
									Visit visit1 = new Visit();
									visit1.setId(visitId);
									dgSampleCollectionHeader.setVisit(visit1);
									dgSampleCollectionHeader
											.setPatientType("OP");
								}
								if (hinId != 0) {
									Patient patient1 = new Patient();
									patient1.setId(hinId);
									dgSampleCollectionHeader.setHin(patient1);
								}
								if (hospitalId != 0) {
									MasHospital hospital = new MasHospital();
									hospital.setId(hospitalId);
									dgSampleCollectionHeader
											.setHospital(hospital);
								}
								if (departmentId != 0) {
									MasDepartment masDepartment1 = new MasDepartment();
									masDepartment1.setId(chargeCode
											.getMainChargecode()
											.getDepartment().getId());
									dgSampleCollectionHeader
											.setDepartment(masDepartment1);
								}
								if (departmentId != 0) {
									MasDepartment orderByDepartment = new MasDepartment();
									orderByDepartment.setId(departmentId);
									dgSampleCollectionHeader
											.setOrderByDepartment(orderByDepartment);
								}
								dgSampleCollectionHeader.setOrder(dgOrderhd);
								// DgCollectionCenter dgCollectionCenter = new
								// DgCollectionCenter();
								// dgCollectionCenter.setId(departmentId);
								// dgSampleCollectionHeader.setCollectionCenter(dgCollectionCenter);
								dgSampleCollectionHeader.setOrderStatus("P");
								dgSampleCollectionHeader.setLastChgBy(userName);
								dgSampleCollectionHeader
										.setLastChgDate(HMSUtil
												.convertStringTypeDateToDateType(dateCollection));
								dgSampleCollectionHeader.setLastChgTime(time);
								dgSampleCollectionHeader
										.setDiagnosisDate(HMSUtil
												.convertStringTypeDateToDateType(dateCollection));
								dgSampleCollectionHeader.setDiagnosisTime(time);
								hbt.save(dgSampleCollectionHeader);
							} catch (DataAccessException e) {
								e.printStackTrace();
							}
							try {
								for (int i = 0; i < chargeCodeIdList.size(); i++) {
									int chargeId = 0;
									if (chargeCodeIdList.get(i) != null
											&& !chargeCodeIdList.get(i).equals(
													"")) {
										chargeId = Integer
												.parseInt((String) chargeCodeIdList
														.get(i));
										MasChargeCode maschrgCode = (MasChargeCode) session
												.createCriteria(
														MasChargeCode.class)
												.add(
														Restrictions.eq("Id",
																chargeId))
												.list().get(0);
										if (maschrgCode.getMainChargecode()
												.getMainChargecodeCode()
												.equalsIgnoreCase("Lab")) {
											DgSampleCollectionDetails dgSampleCollectionDetails = new DgSampleCollectionDetails();
											dgSampleCollectionDetails
													.setSampleCollectionHeader(dgSampleCollectionHeader);
											dgSampleCollectionDetails
													.setCollected("y");
											dgSampleCollectionDetails
													.setChargeCode(maschrgCode);
											MasMainChargecode masMainChargecode1 = new MasMainChargecode();
											masMainChargecode1
													.setId(maschrgCode
															.getMainChargecode()
															.getId());
											dgSampleCollectionDetails
													.setMaincharge(masMainChargecode1);
											dgSampleCollectionDetails
													.setSubcharge(maschrgCode
															.getSubChargecode());
											MasEmployee masEmployee1 = new MasEmployee();
											masEmployee1.setId(userId);
											dgSampleCollectionDetails
													.setCollectedBy(masEmployee1);
											dgSampleCollectionDetails
													.setDiagNo(generateDiagNumber(maschrgCode
															.getSubChargecode()
															.getId()));
											dgSampleCollectionDetails
													.setInvestigation(new DgMasInvestigation(
															chargeId));
											dgSampleCollectionDetails
													.setLastChgBy(userName);
											dgSampleCollectionDetails
													.setLastChgDate(HMSUtil
															.convertStringTypeDateToDateType(dateCollection));
											dgSampleCollectionDetails
													.setLastChgTime(time);
											dgSampleCollectionDetails
													.setRejected("n");
											dgSampleCollectionDetails
													.setSampleCollDatetime(new Date());
											dgSampleCollectionDetails
													.setOrderStatus("P");
											try {
												hbt
														.save(dgSampleCollectionDetails);
											} catch (RuntimeException e) {
												e.printStackTrace();
											}
										}
									}
								}
							} catch (NumberFormatException e) {
								e.printStackTrace();
							}
						}
						goneInLoop = true;
					}
				}

				// /////////////////////// End Saving sampleCollection Details
				// for Lab Order Booking////////////
			}
			// ///////////////////////////////////////////////////////

			/*
			 * List<DgOrderhd>dgOrderhdList=new ArrayList<DgOrderhd>();
			 * dgOrderhdList
			 * =session.createCriteria(DgOrderhd.class).add(Restrictions
			 * .eq("InvestigationRequestionNo.Id",
			 * patientInvestigationHeaderId)) .add(Restrictions.eq("Visit.Id",
			 * visitId)).add(Restrictions.eq("Hin.Id", hinId)).list(); int
			 * dgOrderhdId=0; dfg DgOrderhd dgOrderhd = new DgOrderhd();
			 * if(dgOrderhdList!=null&&dgOrderhdList.size()>0){
			 * dgOrderhdId=dgOrderhdList.get(0).getId();
			 * dgOrderhd.setId(dgOrderhdId); for(DgOrderdt
			 * DgOrderdt:dgOrderhdList.get(0).getDgOrderdts()){
			 * session.delete(DgOrderdt); } }
			 * 
			 * dgOrderhd.setOrderDate(consultationDateToInsert);
			 * dgOrderhd.setOrderTime(consultationTime);
			 * masHospital.setId(hospitalId);
			 * dgOrderhd.setHospital(masHospital); patient.setId(hinId);
			 * dgOrderhd.setHin(patient); masDepartment.setId(departmentId);
			 * dgOrderhd.setDepartment(masDepartment);
			 * masEmployee2.setId(empId);
			 * dgOrderhd.setPrescribedBy(masEmployee2);
			 * dgOrderhd.setPatientType("OP"); dgOrderhd.setTestType("Regular");
			 * dgOrderhd.setCreatedby(userName);
			 * dgOrderhd.setCreatedon(consultationDateToInsert);
			 * 
			 * String orderSeqNo = generateOrderNumber();
			 * dgOrderhd.setOrderNo(orderSeqNo);
			 * 
			 * dgOrderhd.setOrderStatus("P"); dgOrderhd.setLastChgBy(empId);
			 * dgOrderhd.setLastChgDate(consultationDateToInsert);
			 * dgOrderhd.setLastChgTime(consultationTime); dgOrderhd
			 * .setInvestigationRequestionNo(patientInvestigationHeader);
			 * hbt.saveOrUpdate(dgOrderhd);
			 * 
			 * 
			 * List<PatientInvestigationDetails>patientInvestigationDetailsList=new
			 * ArrayList<PatientInvestigationDetails>();
			 * patientInvestigationDetailsList
			 * =session.createCriteria(PatientInvestigationDetails
			 * .class).add(Restrictions.eq("InvestigationHeader.Id",
			 * patientInvestigationHeaderId)) .list();
			 * 
			 * 
			 * 
			 * if(patientInvestigationDetailsList!=null&&
			 * patientInvestigationDetailsList.size()>0){
			 * for(PatientInvestigationDetails
			 * patientInvestigationDetails:patientInvestigationDetailsList){
			 * session.delete(patientInvestigationDetails); } } for (int i = 0;
			 * i < chargeCodeIdList.size(); i++) { PatientInvestigationDetails
			 * patientInvestigationDetails = new PatientInvestigationDetails();
			 * patientInvestigationDetails
			 * .setInvestigationHeader(patientInvestigationHeader);
			 * MasChargeCode masChargeCode = new MasChargeCode();
			 * masChargeCode.setId(Integer.parseInt(chargeCodeIdList .get(i)));
			 * patientInvestigationDetails.setChargeCode(masChargeCode);
			 * patientInvestigationDetails .setQuantity(quantityList.get(i));
			 * patientInvestigationDetails.setClinicalNotes(clinicalList
			 * .get(i)); hbt.save(patientInvestigationDetails);
			 * 
			 * DgOrderdt dgOrderdt = new DgOrderdt();
			 * dgOrderdt.setOrderhd(dgOrderhd);
			 * masChargeCode.setId(Integer.parseInt(chargeCodeIdList .get(i)));
			 * dgOrderdt.setChargeCode(masChargeCode);
			 * dgOrderdt.setOrderQty(quantityList.get(i));
			 * dgOrderdt.setOrderStatus("P"); dgOrderdt.setCreatedby(userName);
			 * dgOrderdt.setCreatedon(consultationDateToInsert);
			 * dgOrderdt.setLastChgBy(empId);
			 * dgOrderdt.setLastChgDate(consultationDateToInsert);
			 * dgOrderdt.setLastChgTime(consultationTime); // method written for
			 * taking out the values of mascharge // code and subcharge Map
			 * masChargeMap = getMasChargeCodeFromChargeId(Integer
			 * .parseInt(chargeCodeIdList.get(i))); MasChargeCode
			 * masChargeCodeObj = (MasChargeCode) masChargeMap
			 * .get("masChargeCode"); int mainChargeId =
			 * masChargeCodeObj.getMainChargecode() .getId(); int subChargeId =
			 * masChargeCodeObj.getSubChargecode() .getId(); MasMainChargecode
			 * masMainChargecode = new MasMainChargecode();
			 * masMainChargecode.setId(mainChargeId);
			 * dgOrderdt.setMainChargecode(masMainChargecode); MasSubChargecode
			 * masSubChargecode = new MasSubChargecode();
			 * masSubChargecode.setId(subChargeId);
			 * dgOrderdt.setSubChargeid(masSubChargecode); hbt.save(dgOrderdt);
			 */

			// }
			// }
			succesfullyUpdated = true;
			tx.commit();
		} catch (Exception e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();

		} finally {
			// --------Session Closing----------
			session.close();
		}

		return succesfullyUpdated;
	}
	@SuppressWarnings("unchecked")
	public Map<String, Object> updateOpdOpht(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;

		int OpdOpthId = 0;
		int hinId = 0;
		int visitId = 0;
		int userId = 0;
		int departmentId = 0;
		int hospitalId = 0;
		
		
		
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

		try {

			visitId = box.getInt("visitId");

			OpdOpthId = box.getInt("opdOphtId");
			hinId = box.getInt("hinId");
			userId = box.getInt("userId");
			departmentId = box.getInt("departmentId");
			hospitalId = box.getInt("hospitalId");

	
			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");
			Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
			String userName = (String) utilMap.get("userName");
			Patient patient = new Patient();
			patient.setId(hinId);

			Visit visit = new Visit();
			visit.setId(visitId);

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);

			OpdOphthalmology opdOphthalmology = (OpdOphthalmology) hbt.load(OpdOphthalmology.class, OpdOpthId);

			
			opdOphthalmology.setHin(patient);
			opdOphthalmology.setVisit(visit);
			opdOphthalmology.setHospital(masHospital);

			opdOphthalmology.setDecreasedVision(box.getString(DECREASED_VISION));
			opdOphthalmology.setRedness(box.getString(REDNESS));
			opdOphthalmology.setDischarge(box.getString(DISCHARGE));
			opdOphthalmology.setPain(box.getString(PAIN));
			opdOphthalmology.setFloaterTraumaEpiphora(box
					.getString(FLOATER_TRAUMA_EPIPHORA));

			if (box.getString(READING) != null) {
				opdOphthalmology.setReading(box.getString(READING));
			}
			if (box.getString(DRIVING) != null) {
				opdOphthalmology.setDriving(box.getString(DRIVING));
			}
			if (box.getString(COOKING) != null) {
				opdOphthalmology.setCooking(box.getString(COOKING));
			}
			if (box.getString(PERSONAL_HYGIENE) != null) {
				opdOphthalmology.setPersonalHygiene(box
						.getString(PERSONAL_HYGIENE));
			}
			if (box.getString(AMBULATORY) != null) {
				opdOphthalmology.setAmbulatry(box.getString(AMBULATORY));
			}
			if (box.getString(CAD) != null) {
				opdOphthalmology.setCad(box.getString(CAD));
			}

			if (box.getString(DM) != null) {
				opdOphthalmology.setDm(box.getString(DM));
			}
			if (box.getString(HTN) != null) {
				opdOphthalmology.setHtn(box.getString(HTN));
			}
			if (box.getString(BA) != null) {
				opdOphthalmology.setBa(box.getString(BA));
			}
			if (box.getString(AUTOIMMUNE) != null) {
				opdOphthalmology.setAutoimmune(box.getString(AUTOIMMUNE));
			}
			if (box.getString(AMBULATORY) != null) {
				opdOphthalmology.setAmbulatry(box.getString(AMBULATORY));
			}
			if (box.getString(OTHERS) != null) {
				opdOphthalmology.setOthers(box.getString(OTHERS));
			}

			opdOphthalmology.setDistanceRe(box.getString(DISTANCE_RE));
			opdOphthalmology.setDistanceLe(box.getString(DISTANCE_LE));
			opdOphthalmology.setDistancePh(box.getString(DISTANCE_PH));
			opdOphthalmology.setNearRe(box.getString(NEAR_RE));
			opdOphthalmology.setNearLe(box.getString(NEAR_LE));
			opdOphthalmology.setNearPh(box.getString(NEAR_PH));
			opdOphthalmology.setRefractionRe(box.getString(REFRACTION_RE));
			opdOphthalmology.setRefractionLe(box.getString(REFRACTION_LE));
			opdOphthalmology.setRefractionPh(box.getString(REFRACTION_PH));
			opdOphthalmology.setAcceptanceDistanceRe(box
					.getString(ACCEPTANCE_DISTANCE_RE));
			opdOphthalmology.setAcceptanceDistanceLe(box
					.getString(ACCEPTANCE_DISTANCE_LE));
			opdOphthalmology.setAcceptanceDistancePh(box
					.getString(ACCEPTANCE_DISTANCE_PH));
			opdOphthalmology.setAcceptanceNearRe(box
					.getString(ACCEPTANCE_NEAR_RE));
			opdOphthalmology.setAcceptanceNearLe(box
					.getString(ACCEPTANCE_NEAR_LE));
			opdOphthalmology.setAcceptanceNearPh(box
					.getString(ACCEPTANCE_NEAR_PH));
			opdOphthalmology.setConvergence(box.getString(CONVERGENCE));
			opdOphthalmology.setColorVision(box.getString(COLOR_VISION));
			opdOphthalmology.setOcularMovement(box.getString(OCULAR_MOVEMENTS));
			opdOphthalmology.setLids(box.getString(LIDS));
			opdOphthalmology.setConjunctiva(box.getString(CONJUNCTIVA));
			opdOphthalmology.setCorneaAcRe(box.getString(CORNEA_AC_RE));
			opdOphthalmology.setCorneaAcLe(box.getString(CORNEA_AC_LE));

			opdOphthalmology
					.setAntChamberDepthLe(box.getString(ANT_CHAMBER_LE));
			opdOphthalmology
					.setAntChamberDepthRe(box.getString(ANT_CHAMBER_RE));
			opdOphthalmology.setCellsFlareLe(box.getString(CELLS_FLARE_LE));
			opdOphthalmology.setCellsFlareRe(box.getString(CELLS_FLARE_RE));
			opdOphthalmology.setPxfNviLe(box.getString(PXF_NVI_LE));
			opdOphthalmology.setPxfNviRe(box.getString(PXF_NVI_RE));

			if (box.getString(DIRECT) != null) {
				opdOphthalmology.setPupilReactionDirect(box.getString(DIRECT));
			}
			if (box.getString(CONSENSNAL) != null) {
				opdOphthalmology.setPupilReactionConsensnal(box
						.getString(CONSENSNAL));
			}
			if (box.getString(RAPD) != null) {
				opdOphthalmology.setPupilReactionRapd(box.getString(RAPD));
			}

			opdOphthalmology.setGonioscopyRe(box.getString(GONIOSCOPY_RE));
			opdOphthalmology.setGonioscopyLe(box.getString(GONIOSCOPY_LE));
			opdOphthalmology.setIopRe(box.getString(IOP_RE));
			opdOphthalmology.setIopLe(box.getString(IOP_LE));
			opdOphthalmology.setDilationRe(box.getString(DILATION_RE));
			opdOphthalmology.setDilationLe(box.getString(DILATION_LE));
			opdOphthalmology.setLensRe(box.getString(LENS_RE));
			opdOphthalmology.setLensLe(box.getString(LENS_LE));
			opdOphthalmology.setFundusRe(box.getString(FUNDUS_RE));
			opdOphthalmology.setFundusLe(box.getString(FUNDUS_LE));

			opdOphthalmology.setLastChgBy(userName);
			opdOphthalmology.setLastChgDate(date);
			opdOphthalmology.setLastChgTime(time);
			

			hbt.update(opdOphthalmology);
			hbt.refresh(opdOphthalmology);


			saved = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;
	}

	public Map<String, Object> responseForDoctarsList(Map mapForDS) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasEmployee> allEmployeeList = new ArrayList<MasEmployee>();
		Session session = (Session) getSession();
		String departmentArray[];
		String departmentArray1[] = new String[10];
		departmentArray = (String[]) mapForDS.get("departmentArray");
		for (int i = 0; i < departmentArray.length; i++) {
			if (i == 0) {
				departmentArray1 = departmentArray[i].split(",");
				break;
			}
		}

		try {
			for (String a : departmentArray1) {
				List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
				employeeList = session.createCriteria(MasEmployee.class).add(
						Restrictions.eq("Department.Id", Integer.parseInt(a)))
						.list();
				allEmployeeList.addAll(employeeList);
				//System.out.println("size of the list" + allEmployeeList.size());
			}
			map.put("allEmployeeList", allEmployeeList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public Map<String, Object> getListForPrescriptionTemplate() {
		// TODO Auto-generated method stub
		return null;
	}

	public Map<String, Object> showOpdFrequencyJsp() {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			List<MasFrequency> masFrequencyList = new ArrayList<MasFrequency>();
			masFrequencyList = session.createCriteria(MasFrequency.class).add(
					Restrictions.eq("Status", "y")).list();
			map.put("masFrequencyList", masFrequencyList);
			List<OpdInstructionTreatment> opdInstructionTreatmentList = new ArrayList<OpdInstructionTreatment>();
			opdInstructionTreatmentList = session.createCriteria(
					OpdInstructionTreatment.class).add(
					Restrictions.eq("Status", "y")).list();
			map.put("opdInstructionTreatmentList", opdInstructionTreatmentList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public boolean addPrescriptionTemplate(Map mapForDS) {
		Session session = (Session) getSession();
		boolean flag = false;
		//Transaction tx = null;
		try {
		//	tx = session.beginTransaction();
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
        hbt.setCheckWriteOperations(false);
		List pvmsNoList = new ArrayList();
		List frequencyList = new ArrayList();
		List dosageList = new ArrayList();
		List totalList = new ArrayList();
		List typeLeftRightList = new ArrayList();
		List noOfDaysList = new ArrayList();
		List<Integer> instuctionList = new ArrayList<Integer>();

		Map<String, Object> map = new HashMap<String, Object>();
		List<OpdTemplate> opdTemplateList = new ArrayList<OpdTemplate>();

			OpdTemplate opdTemplate = (OpdTemplate) mapForDS.get("opdTemplate");

			hbt.save(opdTemplate);
			Criteria c = session.createCriteria(OpdTemplate.class).addOrder(
					Order.desc("Id"));

			opdTemplateList = c.list();
			pvmsNoList = (List) mapForDS.get("pvmsNoList");
			frequencyList = (List) mapForDS.get("frequencyList");
			dosageList = (List) mapForDS.get("dosageList");
			totalList = (List) mapForDS.get("totalList");
			typeLeftRightList = (List) mapForDS.get("typeLeftRightList");
			noOfDaysList = (List) mapForDS.get("noOfDaysList");
			instuctionList = (List) mapForDS.get("instuctionList");
			int departmentId = opdTemplate.getDepartment().getId();
			String lastChgBy = (String) mapForDS.get("changedBy");
			String currentTime = (String) mapForDS.get("currentTime");
			Date currentDate = (Date) mapForDS.get("currentDate");
		//	System.out.println("pvmsNoList ka size " + pvmsNoList.size());
		//	System.out.println("frequencyList ka size " + frequencyList.size());
		//	System.out.println("dosageList ka size " + dosageList.size());
		//	System.out.println("totalList ka size " + totalList.size());
		//	System.out.println("typeLeftRightList ka size "+ typeLeftRightList.size());
		//	System.out.println("noOfDaysList ka size " + noOfDaysList.size());
		//	System.out.println("instuctionList ka size "+ instuctionList.size());
			//System.out.println("departmentId ka size " + departmentId);
			//System.out.println("opdTemplate ka size "	+ opdTemplate.getTemplateCode());
			//System.out.println("pvmsNoList ka size "	+ opdTemplate.getTemplateName());
			// //System.out.println("pvmsNoList ka size "+pvmsNoList.size());
			// //System.out.println("pvmsNoList ka size "+pvmsNoList.size());
			// //System.out.println("pvmsNoList ka size "+pvmsNoList.size());

			MasStoreItem masStoreItem = new MasStoreItem();
			for (int i = 0; i < pvmsNoList.size(); i++) {
				OpdTemplateTreatment opdTemplateTreatment = new OpdTemplateTreatment();
				opdTemplateTreatment.setDepartment(new MasDepartment(
						departmentId));
				opdTemplateTreatment.setTemplate(new OpdTemplate(
						opdTemplateList.get(0).getId()));
				masStoreItem = (MasStoreItem) session.createCriteria(
						MasStoreItem.class).add(
						Restrictions.eq("PvmsNo", (String) pvmsNoList.get(i)))
						.list().get(0);
				opdTemplateTreatment.setItem(new MasStoreItem(masStoreItem
						.getId()));
				opdTemplateTreatment.setDosage((String) dosageList.get(i));
				if (instuctionList.get(i) != 0) {
					opdTemplateTreatment
							.setOpdInstructionTreatment(new OpdInstructionTreatment(
									(Integer) instuctionList.get(i)));
				}
               
                
				opdTemplateTreatment.setNoofdays((Integer) noOfDaysList.get(i));
				opdTemplateTreatment.setTotal((Integer) totalList.get(i));
				opdTemplateTreatment.setFrequency(new MasFrequency(
						(Integer) frequencyList.get(i)));
				opdTemplateTreatment.setLastChgBy(lastChgBy);
				opdTemplateTreatment.setLastChgDate(currentDate);
				opdTemplateTreatment.setLastChgTime(currentTime);
				opdTemplateTreatment.setStatus("y");
				hbt.save(opdTemplateTreatment);
				hbt.refresh(opdTemplateTreatment);

				//	tx.commit();
			}
			}catch (Exception e) {
			//	if (tx != null)
			//		tx.rollback();
				e.printStackTrace();
				e.getMessage();
				e.getCause();

			} finally {
				// --------Session Closing----------
				session.close();
			}




		return flag;
	}
	
	
	
	
	public boolean addInvestigationTemplate(Map mapForDS) {
		Session session = (Session) getSession();
		boolean flag = false;
		String templateName = "";
		Transaction tx = null;
		String msg = "";
		try {
		tx = session.beginTransaction();
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();

		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		List chargeCodeCodeList = new ArrayList();
		//List qtyList = new ArrayList();
		List clinicalList = new ArrayList();
		List<OpdTemplate> existingOpdTemplateList = new ArrayList<OpdTemplate>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<OpdTemplate> opdTemplateList = new ArrayList<OpdTemplate>();
		if(mapForDS.get("templateName") != null){
			templateName =(String)mapForDS.get("templateName");
		}
		System.out.println("templateName==="+templateName);
		existingOpdTemplateList = session.createCriteria(OpdTemplate.class).add(Restrictions.eq("TemplateName", templateName)).list();
		System.out.println("existingOpdTemplateList==="+existingOpdTemplateList.size());
		if(existingOpdTemplateList.size()>0){
			msg = "Record already exist";
			flag= false;
		}else{
		OpdTemplate opdTemplate = (OpdTemplate) mapForDS.get("opdTemplate");
			hbt.save(opdTemplate);
			Criteria c = session.createCriteria(OpdTemplate.class).addOrder(
					Order.desc("Id"));

			opdTemplateList = c.list();
			chargeCodeCodeList = (List) mapForDS.get("chargeCodeCodeList");
			//qtyList = (List) mapForDS.get("qtyList");
			clinicalList = (List) mapForDS.get("clinicalList");

			int departmentId = opdTemplate.getDepartment().getId();
			String lastChgBy = (String) mapForDS.get("changedBy");
			String currentTime = (String) mapForDS.get("currentTime");
			Date currentDate = (Date) mapForDS.get("currentDate");
			MasChargeCode masChargeCode = new MasChargeCode();
			for (int i = 0; i < chargeCodeCodeList.size(); i++) {
				OpdTemplateInvestigation opdTemplateInvestigation = new OpdTemplateInvestigation();
				opdTemplateInvestigation.setDepartment(new MasDepartment(
						departmentId));
				opdTemplateInvestigation.setTemplate(new OpdTemplate(
						opdTemplateList.get(0).getId()));
				masChargeCode = (MasChargeCode) session.createCriteria(
						MasChargeCode.class).add(
						Restrictions.eq("ChargeCodeCode",
								(String) chargeCodeCodeList.get(i))).list()
						.get(0);
				
				opdTemplateInvestigation.setChargeCode(new MasChargeCode(
						masChargeCode.getId()));
				//opdTemplateInvestigation.setTemplateInvestigationQty((Integer) qtyList.get(i));
				//opdTemplateInvestigation.setClinicalNotes((String) clinicalList.get(i));
				opdTemplateInvestigation.setLastChgBy(lastChgBy);
				opdTemplateInvestigation.setLastChgDate(currentDate);
				opdTemplateInvestigation.setLastChgTime(currentTime);
				opdTemplateInvestigation.setStatus("y");
				hbt.save(opdTemplateInvestigation);
				
			}
			flag=true;
			tx.commit();
		}
		} catch (Exception e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();

		} 
		return flag;
	}

	public Map<String, Object> getListForTreatment(Map<String, Object> mapForDs) {
		Session session = (Session) getSession();
		int deptId = 0;

		if (mapForDs.get("deptId") != null) {
			deptId = (Integer) mapForDs.get("deptId");
		}

		List<OpdTemplate> templateList = new ArrayList<OpdTemplate>();

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			templateList = session.createCriteria(OpdTemplate.class)
					.createAlias("Department", "dept").add(
							Restrictions.eq("dept.Id", deptId)).add(
							Restrictions.eq("Status", "y")).list();
			map.put("templateList", templateList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public String generateDiagNumber(int subChargeId) {

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		List<DiagParam> diagParamList = new ArrayList<DiagParam>();
		Session session = (Session) getSession();
		String diagSeqNo = "";
		String date = "";
		String subChargeCode = "";
		String prefix = "";
		date = (String) utilMap.get("currentDate");
		String criteria = "";
		String currentMonth = date.substring(date.indexOf("/") + 1, date
				.lastIndexOf("/"));
		String currentYear = date.substring(date.lastIndexOf("/") + 1);
		List<DgSampleCollectionHeader> sampleCollList = new ArrayList<DgSampleCollectionHeader>();
		try {

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			diagParamList = session.createCriteria(DiagParam.class)
					.createAlias("SubCharge", "charge").add(
							Restrictions.eq("charge.Id", subChargeId)).add(
							Restrictions.eq("Status", "y")).list();
			if (diagParamList.size() > 0) {
				DiagParam diagParam = (DiagParam) diagParamList.get(0);
				criteria = diagParam.getCriteria();
				if (criteria.equals("c")) {
					int seqNo = diagParam.getSeqNo();
					DiagParam diagParamobj = (DiagParam) hbt.load(
							DiagParam.class, diagParam.getId());
					diagParamobj.setSeqNo((seqNo + 1));
					hbt.update(diagParamobj);
					// subChargeCode =
					// diagParam.getSubCharge().getSubChargecodeCode();
					prefix = diagParam.getPrefix();

					diagSeqNo = diagSeqNo.concat(String.valueOf(seqNo + 1));
					diagSeqNo = diagSeqNo.concat("/").concat(prefix);
					// diagSeqNo =
					// diagSeqNo.concat("/").concat(serviceStatusCode);
					diagSeqNo = diagSeqNo.concat("/").concat(currentMonth);
					diagSeqNo = diagSeqNo.concat("/").concat(currentYear);
				}
				if (criteria.equals("m")) {
					int seqNo = diagParam.getSeqNo();
					Date now = new Date();
					Calendar today = Calendar.getInstance();
					// today.setTime(now);

					boolean mnthchnged = false;
					if ((mnthchnged == false)
							&& (today.get(Calendar.DATE) == 1) && seqNo != 1) {
						seqNo = 0;
						mnthchnged = true;
					} else {
						seqNo = diagParam.getSeqNo();
					}
					if ((mnthchnged == true) && (today.get(Calendar.DATE) != 1)) {
						mnthchnged = false;
					}
					DiagParam diagParamobj = (DiagParam) hbt.load(
							DiagParam.class, diagParam.getId());
					diagParamobj.setSeqNo((seqNo + 1));
					hbt.update(diagParamobj);

					// subChargeCode =
					// diagParam.getSubCharge().getSubChargecodeCode();
					prefix = diagParam.getPrefix();

					diagSeqNo = diagSeqNo.concat(String.valueOf(seqNo + 1));
					diagSeqNo = diagSeqNo.concat("/").concat(prefix);
					diagSeqNo = diagSeqNo.concat("/").concat(currentMonth);
					diagSeqNo = diagSeqNo.concat("/").concat(currentYear);
				}
				if (criteria.equals("y")) {
					int seqNo = diagParam.getSeqNo();
					Calendar today = Calendar.getInstance();
					boolean yrChangd = false;
					if ((yrChangd == false)
							&& (today.MONTH == Calendar.JANUARY)
							&& (today.DAY_OF_MONTH == 1) && seqNo != 1) {
						seqNo = 0;
						yrChangd = true;
					} else {
						seqNo = diagParam.getSeqNo();
					}
					if ((yrChangd == false) && (today.DAY_OF_MONTH != 1)) {
						yrChangd = false;
					}

					DiagParam diagParamobj = (DiagParam) hbt.load(
							DiagParam.class, diagParam.getId());
					diagParamobj.setSeqNo((seqNo + 1));
					hbt.update(diagParamobj);
					// subChargeCode =
					// diagParam.getSubCharge().getSubChargecodeCode();
					prefix = diagParam.getPrefix();

					diagSeqNo = diagSeqNo.concat(String.valueOf(seqNo + 1));
					diagSeqNo = diagSeqNo.concat("/").concat(prefix);
					diagSeqNo = diagSeqNo.concat("/").concat(currentMonth);
					diagSeqNo = diagSeqNo.concat("/").concat(currentYear);
				}
			} else if (diagParamList.size() == 0) {
			}

		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return diagSeqNo;
	}

	/**
	 * -------------------------Start of methods for OPD Details Update By
	 * Naresh----------------------------
	 */

	public Map<String, Object> showOrderBookingForInvestigationJsp(
			Map<String, Object> mapForDs) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<Visit> visitList = new ArrayList<Visit>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		// List<Integer> maxVisitIdList = new ArrayList<Integer>();
		List<Visit> visitIdList = new ArrayList<Visit>();
		List<DischargeIcdCode> icdList = new ArrayList<DischargeIcdCode>();
		List<OpdTemplate> templateList = new ArrayList<OpdTemplate>();
		List orderNo = new ArrayList();
		// int maxVisitId = 0;
		int doctorId = 0;
		int visitId = 0;
		if (mapForDs.get("visitId") != null) {
			visitId = (Integer) mapForDs.get("visitId");
		}

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			visitList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();
			employeeList = session.createCriteria(MasEmployee.class).add(
					Restrictions.eq("Status", "y")).list();

			Visit visit = new Visit();
			visit = visitList.get(0);

			int hinId = visit.getHin().getId();
			try {
				// maxVisitIdList =
				// hbt.find("select max(v.Id) from jkt.hms.masters.business." +
				// "Visit v join v.Hin as p where p.Id = "+ hinId);

			} catch (DataAccessException e) {
				e.printStackTrace();
			}

			// maxVisitId = maxVisitIdList.get(0);
			try {
				// visitIdList = session.createCriteria(Visit.class)
				// .add(Restrictions.eq("Id", maxVisitId))
				// .list();
				// Visit lastVisit = new Visit();
				// lastVisit=(Visit)visitIdList.get(0);
				if(visit.getDoctor()!=null){
				doctorId = visit.getDoctor().getId();
				}

			} catch (DataAccessException e) {
				e.printStackTrace();
			}
			icdList = session.createCriteria(DischargeIcdCode.class)
					.createAlias("Visit", "v").add(
							Restrictions.eq("v.Id", visitId)).list();

			templateList = session.createCriteria(OpdTemplate.class)
					.createAlias("Department", "dept").createAlias(
							"dept.DepartmentType", "deptType").add(
							Restrictions.eq("deptType.DepartmentTypeCode",
									"DIAG")).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("doctorId", doctorId);
		map.put("icdList", icdList);
		map.put("orderNo", orderNo);
		map.put("visitList", visitList);
		map.put("employeeList", employeeList);
		map.put("templateList", templateList);
		return map;
	}

	public String getOrderSeqForDisplay(String string) {
		List<Integer> orderSeqNoList = new ArrayList<Integer>();
		List<DgOrderhd> seqNoList = new ArrayList<DgOrderhd>();
		String orderSeqNo = "";
		String lastSeqNo = "";
		String lastSeqYear = "";

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");

		String currentYear = date.substring(date.lastIndexOf("/") + 1);
		Session session = (Session) getSession();
		try {
			seqNoList = session.createCriteria(DgOrderhd.class).list();
			if (seqNoList.size() > 0) {
				for (DgOrderhd dgOrderhd : seqNoList) {
					lastSeqNo = dgOrderhd.getOrderNo();
				}
				StringTokenizer str = new StringTokenizer(lastSeqNo, "/");
				while (str.hasMoreTokens()) {
					lastSeqYear = str.nextToken();
				}
			} else {
				lastSeqYear = currentYear;
			}

			// session.createCriteria(TransactionSequence.class)
			// .setProjection(Projections.groupProperty(""))
			// .list();

			orderSeqNoList = session.createCriteria(TransactionSequence.class)
					.add(Restrictions.eq("TransactionPrefix", "ON"))
					.setProjection(
							Projections.projectionList().add(
									Projections
											.max("TransactionSequenceNumber")))
					.list();
			if (orderSeqNoList.size() > 0) {
				for (Integer maxOrderNo : orderSeqNoList) {
					if (currentYear.equals(lastSeqYear)) {
						orderSeqNo = String.valueOf(maxOrderNo + 1);
					} else {
						orderSeqNo = String.valueOf(1);
					}
				}
			} else {
				orderSeqNo = String.valueOf(1);
			}
			orderSeqNo = orderSeqNo.concat("/").concat(
					String.valueOf(lastSeqYear));
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return orderSeqNo;
	}

	public Map<String, Object> getMainAndSubCharge() {
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		List<MasMainChargecode> mainChargeCodeList = new ArrayList<MasMainChargecode>();
		List<MasSubChargecode> subChargeCodeList = new ArrayList<MasSubChargecode>();
		List<MasChargeCode> chargeCodeList = new ArrayList<MasChargeCode>();

		Session session = (Session) getSession();
		try {
			List lst = new ArrayList();
			lst.add("DIAG");
			lst.add("RADIO");
			mainChargeCodeList = session
					.createCriteria(MasMainChargecode.class).add(
							Restrictions.eq("Status", "y")).createAlias(
							"Department", "dept").createAlias(
							"dept.DepartmentType", "dt").add(
							Restrictions.in("dt.DepartmentTypeCode", lst))
					.list();
			subChargeCodeList = session.createCriteria(MasSubChargecode.class)
					.add(Restrictions.eq("Status", "y")).list();
			chargeCodeList = session.createCriteria(MasChargeCode.class).add(
					Restrictions.eq("Status", "y")).list();

			if (mainChargeCodeList.size() > 0) {
				detailsMap.put("mainChargeCodeList", mainChargeCodeList);
			}
			if (subChargeCodeList.size() > 0) {
				detailsMap.put("subChargeCodeList", subChargeCodeList);
			}
			if (chargeCodeList.size() > 0) {
				detailsMap.put("chargeCodeList", chargeCodeList);
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return detailsMap;
	}

	public Map<String, Object> submitSampleCollection(
			Map<String, Object> parameterMap) {

		// ----------Saving Data in DgSampleCollection's Table where MainCharge
		// is LAB-----------------------------
		List chargeList = new ArrayList();
		List subChargeList = new ArrayList();
		Box box = null;
		int departmentId = 0;
		int hospitalId = 0;
		int userId = 0;
		String orderSeqNo = "";
		String createdBy = "";
		String userName = "";
		int dgOrderhdIdAftersave = 0;

		if (parameterMap.get("box") != null) {
			box = (Box) parameterMap.get("box");
		}
		if (parameterMap.get("dgOrderhdIdAftersave") != null) {
			dgOrderhdIdAftersave = (Integer) parameterMap
					.get("dgOrderhdIdAftersave");
		}

		chargeList = (List) parameterMap.get("chargeList");

		if (parameterMap.get("subChargeList") != null) {
			subChargeList = (List) parameterMap.get("subChargeList");
		}
		if (parameterMap.get("hospitalId") != null) {
			hospitalId = (Integer) parameterMap.get("hospitalId");
		}
		if (parameterMap.get("departmentId") != null) {
			departmentId = (Integer) parameterMap.get("departmentId");
		}
		if (parameterMap.get("userName") != null) {
			userName = (String) parameterMap.get("userName");
		}
		Map<String, Object> utilMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();

		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");

		Transaction tx = null;
		Session session = (Session) getSession();

		tx = session.beginTransaction();
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

		Vector charge_code_Id = box.getVector(CHARGE_CODE_ID);
		DgSampleCollectionHeader dgSampleCollectionHeader = new DgSampleCollectionHeader();
		List<MasChargeCode> chargeCodeList = new ArrayList<MasChargeCode>();
		boolean goneInLoop = false;
		try {
			tx = session.beginTransaction();
			// //////////
			for (int j = 0; j < chargeList.size() && !goneInLoop; j++) {
				int chargeCodeId = Integer.parseInt("" + chargeList.get(j));
				chargeCodeList = session.createCriteria(MasChargeCode.class)
						.add(Restrictions.eq("Id", chargeCodeId)).createAlias(
								"MainChargecode", "mcc").createAlias(
								"mcc.Department", "dept").createAlias(
								"dept.DepartmentType", "dt").add(
								Restrictions
										.eq("dt.DepartmentTypeCode", "DIAG"))
						.list();

				if (chargeCodeList.size() > 0) {
					for (MasChargeCode chargeCode : chargeCodeList) {
						try {
							int inpatientId = 0;
							int visitId = 0;
							if (box.getInt(INPATIENT_ID) != 0) {
								inpatientId = box.getInt(INPATIENT_ID);
								Inpatient inpatient = new Inpatient();
								inpatient.setId(inpatientId);
								dgSampleCollectionHeader
										.setInpatient(inpatient);
								dgSampleCollectionHeader.setPatientType("IP");
							} else if (box.getString(VISIT_ID) != null
									&& !box.getString(VISIT_ID).equals("")) {
								visitId = box.getInt(VISIT_ID);
								Visit visit = new Visit();
								visit.setId(visitId);
								dgSampleCollectionHeader.setVisit(visit);
								dgSampleCollectionHeader.setPatientType("OP");
							}
							int hinId = box.getInt(HIN_ID);

							int collectionCenterId = box
									.getInt(COLLECTION_CENTER_ID);
							if (hinId != 0) {
								Patient patient = new Patient();
								patient.setId(hinId);
								dgSampleCollectionHeader.setHin(patient);
							}
							if (hospitalId != 0) {
								MasHospital hospital = new MasHospital();
								hospital.setId(hospitalId);
								dgSampleCollectionHeader.setHospital(hospital);
							}

							if (departmentId != 0) {
								MasDepartment masDepartment = new MasDepartment();
								masDepartment.setId(chargeCode
										.getMainChargecode().getDepartment()
										.getId());
								dgSampleCollectionHeader
										.setDepartment(masDepartment);
							}

							if (departmentId != 0) {
								MasDepartment orderByDepartment = new MasDepartment();
								orderByDepartment.setId(departmentId);
								dgSampleCollectionHeader
										.setOrderByDepartment(orderByDepartment);
							}
							if (dgOrderhdIdAftersave != 0) {
								DgOrderhd dgOrderhd = new DgOrderhd();
								dgOrderhd.setId(dgOrderhdIdAftersave);
								dgSampleCollectionHeader.setOrder(dgOrderhd);
							}

							if (collectionCenterId != 0) {
								DgCollectionCenter dgCollectionCenter = new DgCollectionCenter();
								dgCollectionCenter.setId(collectionCenterId);
								dgSampleCollectionHeader
										.setCollectionCenter(dgCollectionCenter);
							}

							dgSampleCollectionHeader.setOrderStatus("P");
							dgSampleCollectionHeader.setLastChgBy(userName);
							dgSampleCollectionHeader.setLastChgDate(HMSUtil
									.convertStringTypeDateToDateType(date));
							dgSampleCollectionHeader.setLastChgTime(time);
							dgSampleCollectionHeader.setDiagnosisDate(HMSUtil
									.convertStringTypeDateToDateType(date));
							dgSampleCollectionHeader.setDiagnosisTime(time);
							hbt.save(dgSampleCollectionHeader);

						} catch (DataAccessException e) {
							e.printStackTrace();
						}
						try {

							int collectedBy = box.getInt(EMPLOYEE_ID);
							for (int i = 0; i < chargeList.size(); i++) {
								int chargeId = 0;
								if (chargeList.get(i) != null
										&& !chargeList.get(i).equals("")) {
									chargeId = Integer
											.parseInt((String) chargeList
													.get(i));
									MasChargeCode maschrgCode = (MasChargeCode) session
											.createCriteria(MasChargeCode.class)
											.add(
													Restrictions.eq("Id",
															chargeId)).list()
											.get(0);
									if (maschrgCode.getMainChargecode()
											.getMainChargecodeCode()
											.equalsIgnoreCase("Lab")) {
										MasChargeCode masChargeCode = new MasChargeCode();
										MasSubChargecode masSubChargecode = new MasSubChargecode();

										DgSampleCollectionDetails dgSampleCollectionDetails = new DgSampleCollectionDetails();
										dgSampleCollectionDetails
												.setSampleCollectionHeader(dgSampleCollectionHeader);

										dgSampleCollectionDetails
												.setCollected("y");

										masChargeCode.setId(Integer
												.parseInt((String) chargeList
														.get(i)));
										dgSampleCollectionDetails
												.setChargeCode(masChargeCode);

										MasMainChargecode masMainChargecode = new MasMainChargecode();
										masMainChargecode.setId(maschrgCode
												.getMainChargecode().getId());
										dgSampleCollectionDetails
												.setMaincharge(masMainChargecode);

										if (subChargeList.get(i) != null
												&& !subChargeList.get(i)
														.equals("")) {
											masSubChargecode
													.setId(Integer
															.parseInt((String) subChargeList
																	.get(i)));
											dgSampleCollectionDetails
													.setSubcharge(masSubChargecode);
										}
										MasEmployee masEmployee = new MasEmployee();
										masEmployee.setId(collectedBy);
										dgSampleCollectionDetails
												.setCollectedBy(masEmployee);

										dgSampleCollectionDetails
												.setDiagNo(generateDiagNumber(Integer
														.parseInt((String) subChargeList
																.get(i))));

										dgSampleCollectionDetails
												.setInvestigation(new DgMasInvestigation(
														chargeId));
										dgSampleCollectionDetails
												.setLastChgBy(userName);
										dgSampleCollectionDetails
												.setLastChgDate(HMSUtil
														.convertStringTypeDateToDateType(date));
										dgSampleCollectionDetails
												.setLastChgTime(time);
										dgSampleCollectionDetails
												.setRejected("n");
										dgSampleCollectionDetails
												.setSampleCollDatetime(new Date());
										dgSampleCollectionDetails
												.setOrderStatus("P");
										try {
											hbt.save(dgSampleCollectionDetails);
										} catch (RuntimeException e) {
											e.printStackTrace();
										}
									}
								}
							}
						} catch (NumberFormatException e) {
							e.printStackTrace();
						}
					}
					goneInLoop = true;
				}
			}
			// //////////
			tx.commit();
		} catch (Exception e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();
		}

		return map;
	}

	public Map<String, Object> submitOrderBookingForInvestigation(
			Map<String, Object> infoMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		DgOrderhd dgOrderhd = new DgOrderhd();
		List chargeList = new ArrayList();
		List subChargeList = new ArrayList();
		List mainChargeList = new ArrayList();
		List qtyList = new ArrayList();
		boolean success = false;
		Box box = null;
		int chargeMainIdFromRequest = 0;
		int dgOrderhdId = 0;
		int departmentId = 0;
		int hospitalId = 0;
		int userId = 0;
		String orderSeqNo = "";
		String createdBy = "";
		String userName = "";
		if (infoMap.get("hospitalId") != null) {
			hospitalId = (Integer) infoMap.get("hospitalId");
		}
		if (infoMap.get("departmentId") != null) {
			departmentId = (Integer) infoMap.get("departmentId");
		}
		if (infoMap.get("userName") != null) {
			userName = (String) infoMap.get("userName");
		}
		if (infoMap.get("dgOrderhd") != null) {
			dgOrderhd = (DgOrderhd) infoMap.get("dgOrderhd");
		}
		if (infoMap.get("qtyList") != null) {
			qtyList = (List) infoMap.get("qtyList");
		}
		if (infoMap.get("mainChargeList") != null) {
			mainChargeList = (List) infoMap.get("mainChargeList");
		}
		if (infoMap.get("subChargeList") != null) {
			subChargeList = (List) infoMap.get("subChargeList");
		}
		if (infoMap.get("userId") != null) {
			userId = (Integer) infoMap.get("userId");
		}
		if (infoMap.get("chargeMainIdFromRequest") != null) {
			chargeMainIdFromRequest = (Integer) infoMap
					.get("chargeMainIdFromRequest");
		}
		if (infoMap.get("departmentId") != null) {
			departmentId = (Integer) infoMap.get("departmentId");
		}
		if (infoMap.get("createdBy") != null) {
			createdBy = (String) infoMap.get("createdBy");
		}
		if (infoMap.get("placedBy") != null) {
			createdBy = (String) infoMap.get("placedBy");
		}
		if (infoMap.get("orderSeqNo") != null) {
			orderSeqNo = (String) infoMap.get("orderSeqNo");
		}
		if (infoMap.get("box") != null) {
			box = (Box) infoMap.get("box");
		}
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		Session session = (Session) getSession();
		Transaction tx = null;

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			tx = session.beginTransaction();
			if (infoMap.get("dgOrderhd") != null) {
				dgOrderhd = (DgOrderhd) infoMap.get("dgOrderhd");
				hbt.save(dgOrderhd);
				dgOrderhdId = dgOrderhd.getId();
				map.put("dgOrderhdId", dgOrderhdId);
			} else {

				DgOrderhd dgOrderhdObj = new DgOrderhd();
				dgOrderhdObj = (DgOrderhd) hbt.load(DgOrderhd.class,
						chargeMainIdFromRequest);
				hbt.update(dgOrderhdObj);
			}
			int mainChargeId = 0;
			if (infoMap.get("chargeList") != null) {
				chargeList = (List) infoMap.get("chargeList");
				if (chargeList.size() > 0) {
					for (int i = 0; i < chargeList.size(); i++) {

						DgOrderdt dgOrderdt = new DgOrderdt();
						MasChargeCode masChargeCode = new MasChargeCode();
						MasSubChargecode masSubChargecode = new MasSubChargecode();
						MasMainChargecode masMainChargecode = new MasMainChargecode();

						try {
							if (chargeList.get(i) != null
									&& !chargeList.get(i).equals("")) {
								int chargeId = Integer.parseInt(chargeList.get(
										i).toString());
								MasChargeCode maschrgCode = (MasChargeCode) session
										.createCriteria(MasChargeCode.class)
										.add(Restrictions.eq("Id", chargeId))
										.list().get(0);
								if (maschrgCode.getMainChargecode()
										.getMainChargecodeCode()
										.equalsIgnoreCase("Lab")) {
									dgOrderdt.setOrderStatus("C");
								} else {
									dgOrderdt.setOrderStatus("P");
								}
								dgOrderdt.setChargeCode(maschrgCode);

								// masChargeCode.setId(chargeId);
								// dgOrderdt.setChargeCode(masChargeCode);

								dgOrderdt
										.setInvestigation(new DgMasInvestigation(
												chargeId));

								if (mainChargeList.get(i) != null
										&& !mainChargeList.get(i).equals("")) {
									mainChargeId = Integer
											.parseInt(mainChargeList.get(i)
													.toString());
									masMainChargecode.setId(mainChargeId);
									dgOrderdt
											.setMainChargecode(masMainChargecode);
								}

								if (subChargeList.get(i) != null
										&& !subChargeList.get(i).equals("")) {
									int subChargeId = Integer
											.parseInt(subChargeList.get(i)
													.toString());
									masSubChargecode.setId(subChargeId);
									dgOrderdt.setSubChargeid(masSubChargecode);
								}
								// if (qtyList.get(i) != null &&
								// !qtyList.get(i).equals("")) {
								// int qty = Integer.parseInt(""+
								// qtyList.get(i));
								// dgOrderdt.setOrderQty(qty);
								dgOrderdt.setCreatedby(createdBy);
								dgOrderdt.setCreatedon(HMSUtil
										.convertStringTypeDateToDateType(date));
								dgOrderdt.setLastChgBy(userId);
								dgOrderdt.setLastChgDate(HMSUtil
										.convertStringTypeDateToDateType(date));
								dgOrderdt.setLastChgTime(time);
								// dgOrderdt.setOrderStatus("P");
								if (infoMap.get("dgOrderhd") != null) {
									dgOrderdt.setOrderhd(dgOrderhd);

								} else {
									DgOrderhd dgOrderheader = new DgOrderhd();
									dgOrderheader
											.setId(chargeMainIdFromRequest);
									dgOrderdt.setOrderhd(dgOrderheader);
								}
								// }
								hbt.save(dgOrderdt);

							}

						} catch (RuntimeException e) {
							e.printStackTrace();
						}

					}
				}
			}
			// ----------Saving Data in DgSampleCollection's Table where
			// MainCharge is RADIOLOGY-----------------------------
			Vector charge_code_Id = box.getVector(CHARGE_CODE_ID);
			DgSampleCollectionHeader dgSampleCollectionHeader = new DgSampleCollectionHeader();
			List<MasChargeCode> chargeCodeList = new ArrayList<MasChargeCode>();
			boolean goneInLoop = false;

			for (int j = 0; j < chargeList.size() && !goneInLoop; j++) {
				int chargeCodeId = Integer.parseInt("" + chargeList.get(j));
				chargeCodeList = session.createCriteria(MasChargeCode.class)
						.add(Restrictions.eq("Id", chargeCodeId)).createAlias(
								"MainChargecode", "mcc").createAlias(
								"mcc.Department", "dept").createAlias(
								"dept.DepartmentType", "dt").add(
								Restrictions.eq("dt.DepartmentTypeCode",
										"RADIO")).list();

				if (chargeCodeList.size() > 0) {
					for (MasChargeCode chargeCode : chargeCodeList) {
						try {
							int inpatientId = 0;
							int visitId = 0;
							if (box.getInt(INPATIENT_ID) != 0) {
								inpatientId = box.getInt(INPATIENT_ID);
								Inpatient inpatient = new Inpatient();
								inpatient.setId(inpatientId);
								dgSampleCollectionHeader
										.setInpatient(inpatient);
								dgSampleCollectionHeader.setPatientType("IP");
							} else if (box.getString(VISIT_ID) != null
									&& !box.getString(VISIT_ID).equals("")) {
								visitId = box.getInt(VISIT_ID);
								Visit visit = new Visit();
								visit.setId(visitId);
								dgSampleCollectionHeader.setVisit(visit);
								dgSampleCollectionHeader.setPatientType("OP");
							}
							int hinId = box.getInt(HIN_ID);

							int collectionCenterId = box
									.getInt(COLLECTION_CENTER_ID);
							if (hinId != 0) {
								Patient patient = new Patient();
								patient.setId(hinId);
								dgSampleCollectionHeader.setHin(patient);
							}
							if (hospitalId != 0) {
								MasHospital hospital = new MasHospital();
								hospital.setId(hospitalId);
								dgSampleCollectionHeader.setHospital(hospital);
							}

							if (departmentId != 0) {
								MasDepartment masDepartment = new MasDepartment();
								masDepartment.setId(chargeCode
										.getMainChargecode().getDepartment()
										.getId());
								dgSampleCollectionHeader
										.setDepartment(masDepartment);
							}

							if (departmentId != 0) {
								MasDepartment orderByDepartment = new MasDepartment();
								orderByDepartment.setId(departmentId);
								dgSampleCollectionHeader
										.setOrderByDepartment(orderByDepartment);
							}

							dgSampleCollectionHeader.setOrder(dgOrderhd);

							if (collectionCenterId != 0) {
								DgCollectionCenter dgCollectionCenter = new DgCollectionCenter();
								dgCollectionCenter.setId(collectionCenterId);
								dgSampleCollectionHeader
										.setCollectionCenter(dgCollectionCenter);
							}

							dgSampleCollectionHeader.setOrderStatus("P");
							dgSampleCollectionHeader.setLastChgBy(userName);
							dgSampleCollectionHeader.setLastChgDate(HMSUtil
									.convertStringTypeDateToDateType(date));
							dgSampleCollectionHeader.setLastChgTime(time);
							dgSampleCollectionHeader.setDiagnosisDate(HMSUtil
									.convertStringTypeDateToDateType(date));
							dgSampleCollectionHeader.setDiagnosisTime(time);
							hbt.save(dgSampleCollectionHeader);

						} catch (DataAccessException e) {
							e.printStackTrace();
						}
						try {

							int collectedBy = box.getInt(EMPLOYEE_ID);
							for (int i = 0; i < chargeList.size(); i++) {
								int chargeId = 0;
								if (chargeList.get(i) != null
										&& !chargeList.get(i).equals("")) {
									chargeId = Integer
											.parseInt((String) chargeList
													.get(i));
									MasChargeCode maschrgCode = (MasChargeCode) session
											.createCriteria(MasChargeCode.class)
											.add(
													Restrictions.eq("Id",
															chargeId)).list()
											.get(0);
									if (maschrgCode.getMainChargecode()
											.getMainChargecodeCode()
											.equalsIgnoreCase("RADIO")) {
										MasChargeCode masChargeCode = new MasChargeCode();
										MasSubChargecode masSubChargecode = new MasSubChargecode();

										DgSampleCollectionDetails dgSampleCollectionDetails = new DgSampleCollectionDetails();
										dgSampleCollectionDetails
												.setSampleCollectionHeader(dgSampleCollectionHeader);

										dgSampleCollectionDetails
												.setCollected("y");

										masChargeCode.setId(Integer
												.parseInt((String) chargeList
														.get(i)));
										dgSampleCollectionDetails
												.setChargeCode(masChargeCode);

										MasMainChargecode masMainChargecode = new MasMainChargecode();
										masMainChargecode.setId(maschrgCode
												.getMainChargecode().getId());
										dgSampleCollectionDetails
												.setMaincharge(masMainChargecode);

										if (subChargeList.get(i) != null
												&& !subChargeList.get(i)
														.equals("")) {
											masSubChargecode
													.setId(Integer
															.parseInt((String) subChargeList
																	.get(i)));
											dgSampleCollectionDetails
													.setSubcharge(masSubChargecode);
										}
										MasEmployee masEmployee = new MasEmployee();
										masEmployee.setId(collectedBy);
										dgSampleCollectionDetails
												.setCollectedBy(masEmployee);

										dgSampleCollectionDetails
												.setDiagNo(generateDiagNumber(Integer
														.parseInt((String) subChargeList
																.get(i))));

										dgSampleCollectionDetails
												.setInvestigation(new DgMasInvestigation(
														chargeId));
										dgSampleCollectionDetails
												.setLastChgBy(userName);
										dgSampleCollectionDetails
												.setLastChgDate(HMSUtil
														.convertStringTypeDateToDateType(date));
										dgSampleCollectionDetails
												.setLastChgTime(time);
										dgSampleCollectionDetails
												.setRejected("n");
										dgSampleCollectionDetails
												.setSampleCollDatetime(new Date());
										dgSampleCollectionDetails
												.setOrderStatus("P");
										try {
											hbt.save(dgSampleCollectionDetails);
										} catch (RuntimeException e) {
											e.printStackTrace();
										}
									}
								}
							}
						} catch (NumberFormatException e) {
							e.printStackTrace();
						}
					}
					goneInLoop = true;
				}
			}

			success = true;
			map.put("success", success);
			tx.commit();
		} catch (Exception e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();
		}
		map.put("orderSeqNo", orderSeqNo);
		return map;
	}

	public Map<String, Object> getDetailsForVisit() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasRank> rankList = new ArrayList<MasRank>();
		List<MasServiceType> serviceTypeList = new ArrayList<MasServiceType>();
		List<MasUnit> unitList = new ArrayList<MasUnit>();

		Session session = (Session) getSession();

		try {
			rankList = session
					.createQuery(
							"select rank from MasRank as rank where rank.Status='y'  order by rank.RankName ")
					.list();
			serviceTypeList = session.createCriteria(MasServiceType.class).add(
					Restrictions.eq("Status", "y")).list();
			unitList = session.createQuery(
					"select dist from MasUnit as dist order by dist.UnitName ")
					.list();

			map.put("rankList", rankList);
			map.put("serviceTypeList", serviceTypeList);
			map.put("unitList", unitList);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return map;
	}

	public Map<String, Object> getPatientDetails(Map<String, Object> mapForDs) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Patient> patientList = new ArrayList<Patient>();
		List<PhysiotherapyVisitDetails> physiotherapyVisitDetailsList = new ArrayList<PhysiotherapyVisitDetails>();
		List<Integer> physiotherapyVisitNoList = new ArrayList<Integer>();

		String serviceNo = "";
		String hinNo = "";
		int serviceTypeId = 0;
		int rankId = 0;
		int unitId = 0;
		int physiotherapyVisitNo = 0;
		String serPersonFName = "";
		String serPersonMName = "";
		String serPersonLName = "";
		String patientFName = "";
		String patientMName = "";
		String patientLName = "";
		Date appointmentDate = null;
		Date currentDate = new Date();
		int hinId = 0;
		Session session = (Session) getSession();

		if (mapForDs.get("serviceNo") != null) {
			serviceNo = (String) mapForDs.get("serviceNo");
		}
		if (mapForDs.get("hinNo") != null) {
			hinNo = (String) mapForDs.get("hinNo");
		}
		if (mapForDs.get("serviceTypeId") != null) {
			serviceTypeId = (Integer) mapForDs.get("serviceTypeId");
		}
		if (mapForDs.get("rankId") != null) {
			rankId = (Integer) mapForDs.get("rankId");
		}
		if (mapForDs.get("unitId") != null) {
			unitId = (Integer) mapForDs.get("unitId");
		}
		if (mapForDs.get("serPersonFName") != null) {
			serPersonFName = (String) mapForDs.get("serPersonFName");
		}
		if (mapForDs.get("serPersonMName") != null) {
			serPersonMName = (String) mapForDs.get("serPersonMName");
		}
		if (mapForDs.get("serPersonLName") != null) {
			serPersonLName = (String) mapForDs.get("serPersonLName");
		}
		if (mapForDs.get("patientFName") != null) {
			patientFName = (String) mapForDs.get("patientFName");
		}
		if (mapForDs.get("patientMName") != null) {
			patientMName = (String) mapForDs.get("patientMName");
		}
		if (mapForDs.get("patientLName") != null) {
			patientLName = (String) mapForDs.get("patientLName");
		}
		if (mapForDs.get("hinId") != null) {
			hinId = (Integer) mapForDs.get("hinId");
		}
		if (mapForDs.get("appointmentDate") != null) {
			appointmentDate = (Date) mapForDs.get("appointmentDate");
		}
		
		if (hinId == 0) {
			Criteria crit = session.createCriteria(Patient.class).add(
					Restrictions.eq("PatientStatus", "Out Patient"));
			if (!serviceNo.equals("")) {
				crit = crit.add(Restrictions.eq("ServiceNo", serviceNo));
			}
			if (!hinNo.equals("")) {
				crit = crit.add(Restrictions.eq("HinNo", hinNo));
			}
			
			if (!patientFName.equals("")) {
				
				crit = crit.add(Restrictions.like("PFirstName", patientFName
						+ "%"));
			}
			if (!patientMName.equals("")) {
				crit = crit.add(Restrictions.like("PMiddleName", patientMName
						+ "%"));
			}
			if (!patientLName.equals("")) {
				crit = crit.add(Restrictions.like("PLastName", patientLName
						+ "%"));
			}
			if (!serPersonFName.equals("")) {
				crit = crit.add(Restrictions.like("SFirstName", serPersonFName
						+ "%"));
			}
			if (!serPersonMName.equals("")) {
				crit = crit.add(Restrictions.like("SMiddleName", serPersonMName
						+ "%"));
			}
			if (!serPersonLName.equals("")) {
				crit = crit.add(Restrictions.like("SLastName", serPersonLName
						+ "%"));
			}
			if (serviceTypeId != 0) {
				crit = crit.createAlias("ServiceType", "st").add(
						Restrictions.eq("st.Id", serviceTypeId));
			}
			if (rankId != 0) {
				crit = crit.createAlias("Rank", "rank").add(
						Restrictions.eq("rank.Id", rankId));
			}
			if (unitId != 0) {
				crit = crit.createAlias("Unit", "unit").add(
						Restrictions.eq("unit.Id", unitId));
			}
			if (appointmentDate != null) {
				crit = crit.createAlias("AppPatientAppointments", "ap").add(
						Restrictions.eq("ap.AppointmentDate", appointmentDate))
						.add(Restrictions.eq("ap.AppointmentStatus", "y"));

			}
			patientList = crit.list();
		} else if (hinId != 0) {
			Criteria critPhysioTherapy = session.createCriteria(
					PhysiotherapyVisitDetails.class).add(
					Restrictions.and(Restrictions.le("TreatmentStartDate",
							currentDate), Restrictions.ge("TreatmentEndDate",
							currentDate)))
					.add(Restrictions.eq("Hin.Id", hinId));
			physiotherapyVisitDetailsList = critPhysioTherapy.list();

			physiotherapyVisitNoList = session.createCriteria(
					PhysiotherapyVisitDetails.class)
			// .add(Restrictions.eq("Hin.Id", hinId))
					.setProjection(
							Projections.projectionList().add(
									Projections.rowCount())).list();
			if (physiotherapyVisitNoList.get(0) != null) {
				physiotherapyVisitNo = physiotherapyVisitNoList.get(0);
			}
			if (physiotherapyVisitDetailsList.size() == 0) {
				Criteria crit = session.createCriteria(Patient.class).add(
						Restrictions.eq("PatientStatus", "Out Patient"));
				crit = crit.add(Restrictions.idEq(hinId));
				patientList = crit.list();
			}
		}
		map.put("patientList", patientList);
		map.put("physiotherapyVisitNo", physiotherapyVisitNo);
		map.put("physiotherapyVisitDetailsList", physiotherapyVisitDetailsList);
		return map;
	}

	public int getTokenNoForDepartment(int departmentId) {
		List<Integer> tokenNoList = new ArrayList<Integer>();
		int tokenNo = 0;
		Date date = new Date();
		Session session = (Session) getSession();
		tokenNoList = session.createCriteria(PhysiotherapyVisitDetails.class,
				"v").add(Restrictions.eq("v.PhysiotherapyVisitDate", date))
				.setProjection(
						Projections.projectionList().add(
								Projections.max("TokenNo"))).list();
		if (tokenNoList.get(0) != null) {
			tokenNo = tokenNoList.get(0);
		}

		return tokenNo;
	}

	public Map<String, Object> getTreatmentList(Map<String, Object> mapForDs) {
		List<MasPhysiotherapyTreatment> treatmentList = new ArrayList<MasPhysiotherapyTreatment>();
		Session session = (Session) getSession();
		try {
			String str = "%" + mapForDs.get("autoHint") + "%";
			String query = "from MasPhysiotherapyTreatment as treatment where treatment.TreatmentName like '"
					+ str + "'";
			Query q = session.createQuery(query);
			treatmentList = q.list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		mapForDs.put("treatmentList", treatmentList);
		return mapForDs;
	}

	public Map<String, Object> savePhysiotherapyVisitDetails(
			Map<String, Object> mapForDs) {
		List<String> treatmentList = new ArrayList<String>();
		PhysiotherapyVisitDetails physiotherapyVisitDetails = new PhysiotherapyVisitDetails();
		boolean successfullyAdded = false;
		Date startDate = new Date();
		Date currentDate = new Date();
		Map<String, Object> returnMap = new HashMap<String, Object>();
		if (mapForDs.get("physiotherapyVisitDetails") != null) {
			physiotherapyVisitDetails = (PhysiotherapyVisitDetails) mapForDs
					.get("physiotherapyVisitDetails");
		}
		if (mapForDs.get("treatmentList") != null) {
			treatmentList = (List<String>) mapForDs.get("treatmentList");
		}
		if (mapForDs.get("startDate") != null) {
			startDate = (Date) mapForDs.get("startDate");
		}
		if (mapForDs.get("currentDate") != null) {
			currentDate = (Date) mapForDs.get("currentDate");
		}

		Session session = (Session) getSession();
		Transaction tx = null;
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		tx = session.beginTransaction();
		try {
			hbt.save(physiotherapyVisitDetails);
			hbt.refresh(physiotherapyVisitDetails);

			for (String treatmentId : treatmentList) {
				PhysiotherapyTreatmentDetails physiotherapyTreatmentDetails = new PhysiotherapyTreatmentDetails();
				physiotherapyTreatmentDetails
						.setPhysiotherapyVisit(physiotherapyVisitDetails);

				MasPhysiotherapyTreatment masPhysiotherapyTreatment = new MasPhysiotherapyTreatment();
				masPhysiotherapyTreatment.setId(Integer.parseInt(treatmentId));
				physiotherapyTreatmentDetails
						.setTreartment(masPhysiotherapyTreatment);
				hbt.save(physiotherapyTreatmentDetails);
				hbt.refresh(physiotherapyTreatmentDetails);
			}
			if (startDate.compareTo(currentDate) == 0) {
				PhysiotherapyAttendanceDetails physiotherapyAttendanceDetails = new PhysiotherapyAttendanceDetails();
				physiotherapyAttendanceDetails.setAttendanceDate(currentDate);
				physiotherapyAttendanceDetails.setAttendanceStatus("P");
				physiotherapyAttendanceDetails
						.setPhysiotherapyVisit(physiotherapyVisitDetails);
				hbt.save(physiotherapyAttendanceDetails);
				hbt.refresh(physiotherapyAttendanceDetails);
			}
			tx.commit();
			successfullyAdded = true;
		} catch (Exception e) {
			tx.rollback();
			e.printStackTrace();
		}
		returnMap.put("successfullyAdded", successfullyAdded);
		return returnMap;
	}

	public Map<String, Object> updatePhysiotherapyVisitDetails(
			Map<String, Object> mapForDs) {
		List<String> treatmentList = new ArrayList<String>();
		PhysiotherapyVisitDetails physiotherapyVisitDetails = new PhysiotherapyVisitDetails();
		boolean successfullyAdded = false;
		Date startDate = new Date();
		Date endDate = new Date();
		Date currentDate = new Date();
		Integer physiotherapyVisitDetailsId = 0;
		int tokenNo = 0;
		int userId = 0;
		String attendedStatus = "";
		Date addEditDate = new Date();
		String addEditTime = new String();

		Map<String, Object> returnMap = new HashMap<String, Object>();
		if (mapForDs.get("physiotherapyVisitDetailsId") != null) {
			physiotherapyVisitDetailsId = (Integer) mapForDs
					.get("physiotherapyVisitDetailsId");
		}
		if (mapForDs.get("startDate") != null) {
			startDate = (Date) mapForDs.get("startDate");
		}
		if (mapForDs.get("endDate") != null) {
			endDate = (Date) mapForDs.get("endDate");
		}
		if (mapForDs.get("currentDate") != null) {
			currentDate = (Date) mapForDs.get("currentDate");
		}
		if (mapForDs.get("tokenNo") != null) {
			tokenNo = (Integer) mapForDs.get("tokenNo");
		}
		if (mapForDs.get("attendedStatus") != null) {
			attendedStatus = (String) mapForDs.get("attendedStatus");
		}
		if (mapForDs.get("userId") != null) {
			userId = (Integer) mapForDs.get("userId");
		}
		if (mapForDs.get("addEditDate") != null) {
			addEditDate = (Date) mapForDs.get("addEditDate");
		}
		if (mapForDs.get("addEditTime") != null) {
			addEditTime = (String) mapForDs.get("addEditTime");
		}

		Session session = (Session) getSession();
		Transaction tx = null;
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		tx = session.beginTransaction();
		try {
			physiotherapyVisitDetails = (PhysiotherapyVisitDetails) hbt.load(
					PhysiotherapyVisitDetails.class,
					physiotherapyVisitDetailsId);

			physiotherapyVisitDetails.setTreatmentStartDate(startDate);
			physiotherapyVisitDetails.setTreatmentEndDate(endDate);
			physiotherapyVisitDetails.setTreatmentEndDate(endDate);
			physiotherapyVisitDetails.setTokenNo(tokenNo);

			Users users = new Users();
			users.setId(userId);
			physiotherapyVisitDetails.setLastChgBy(users);
			physiotherapyVisitDetails.setLastChgDate(addEditDate);
			physiotherapyVisitDetails.setLastChgTime(addEditTime);

			PhysiotherapyAttendanceDetails physiotherapyAttendanceDetails = new PhysiotherapyAttendanceDetails();
			physiotherapyAttendanceDetails.setAttendanceDate(currentDate);
			if (attendedStatus.equalsIgnoreCase("P")) {
				physiotherapyAttendanceDetails
						.setAttendanceStatus(attendedStatus);
			} else {
				physiotherapyAttendanceDetails.setAttendanceStatus("A");
			}

			physiotherapyAttendanceDetails
					.setPhysiotherapyVisit(physiotherapyVisitDetails);
			hbt.save(physiotherapyAttendanceDetails);
			hbt.refresh(physiotherapyAttendanceDetails);

			tx.commit();
			successfullyAdded = true;
		} catch (Exception e) {
			tx.rollback();
			e.printStackTrace();
		}
		returnMap.put("successfullyAdded", successfullyAdded);
		return returnMap;
	}

	public Map<String, Object> getVisitDetails() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		Session session = (Session) getSession();

		List<String> departmentTypeCode = new ArrayList<String>();
		departmentTypeCode.add("CR");
		departmentTypeCode.add("OPD1");
		departmentTypeCode.add("SpltOPD");

		departmentList = session.createCriteria(MasDepartment.class).add(
				Restrictions.eq("Status", "y")).createAlias("DepartmentType",
				"deptType").add(
				Restrictions.in("deptType.DepartmentTypeCode",
						departmentTypeCode)).list();

		employeeList = session.createCriteria(MasEmployee.class).add(
				Restrictions.eq("Status", "y")).createAlias("EmpCategory",
				"empCat").add(Restrictions.eq("empCat.EmpCategoryCode", "01"))
				.list();

		map.put("departmentList", departmentList);
		map.put("employeeList", employeeList);
		return map;

	}

	public Map<String, Object> showPhysiotherapyAttendanceRegisterJsp(
			Map<String, Object> mapForDs) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasServiceType> serviceTypeList = new ArrayList<MasServiceType>();
		List<MasServiceStatus> serviceStatusList = new ArrayList<MasServiceStatus>();

		Session session = (Session) getSession();

		serviceTypeList = session.createCriteria(MasServiceType.class).add(
				Restrictions.eq("Status", "y")).list();

		serviceStatusList = session.createCriteria(MasServiceStatus.class).add(
				Restrictions.eq("Status", "y")).list();

		map.put("serviceTypeList", serviceTypeList);
		map.put("serviceStatusList", serviceStatusList);
		return map;
	}

	public Map<String, Object> showDetailsForLabourRoom(
			Map<String, Object> mapForDs) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Inpatient> inpatientDetailsList = new ArrayList<Inpatient>();
		List<OpdGynaecology> opdGynaecologyList = new ArrayList<OpdGynaecology>();

		String adNo = "";
		Integer inpatientId = 0;
		if (mapForDs.get("adNo") != null) {
			adNo = (String) mapForDs.get("adNo");
		}
		Session session = (Session) getSession();

		inpatientDetailsList = session.createCriteria(Inpatient.class).add(
				Restrictions.eq("AdNo", adNo)).list();

		opdGynaecologyList = session.createCriteria(OpdGynaecology.class)
				.createAlias("Inpatient", "inpt").add(
						Restrictions.eq("inpt.AdNo", adNo)).list();

		map.put("inpatientDetailsList", inpatientDetailsList);
		map.put("opdGynaecologyList", opdGynaecologyList);

		return map;
	}
	public Map<String, Object> showItemSearchJsp(Box box) {

		List<MasStoreItem> masItemList  = new ArrayList<MasStoreItem>();
		Map<String ,Object> map= new HashMap<String, Object>();
		try 
		{
			Session session = (Session)getSession();

			if(!box.get("nomenclature").equals("")){
				String str = box.get("nomenclature");
				if (str!=null && str.length()>0)
				{
					str = "%"+ str.replace(" ", "%")+ "%";
					org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
					hbt.setFlushModeName("FLUSH_EAGER");
					hbt.setCheckWriteOperations(false);
					String query=	"from MasStoreItem as item  where upper(item.Nomenclature) like upper('"+str+"') and item.Status='y'" ;
					Query q=session.createQuery(query);
					masItemList=q.list();
				}
			} else if(!box.get("commonName").equals("")){
				String str = box.get("commonName");
				if (str!=null && str.length()>0)
				{
					str = "%"+ str.replace(" ", "%")+ "%";
					org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
					hbt.setFlushModeName("FLUSH_EAGER");
					hbt.setCheckWriteOperations(false);
					//masIcdList = session.createCriteria(MasIcd.class).add(Restrictions.like("IcdName", str)).list();
					String query=	"from MasStoreItem as item  where item.CommonName like upper('"+str+"') and item.Status='y'" ;
					Query q=session.createQuery(query);
					masItemList=q.list();
				}
			}else {
				 masItemList = session.createCriteria(MasStoreItem.class).add(Restrictions.like("PvmsNo", box.get("pvmsNo")).ignoreCase())
				.add(Restrictions.eq("Status", "y")).list();
			}
			map.put("masItemList", masItemList);
		} 
		catch (Exception e)
		{
			e.printStackTrace();
		}
		return map;

	}
	
	/*
	 * code for pending patient prescription list
	 */
	
	public Map<String, Object> getPrescriptionList(Map<String, Object> mapForDs) 
	{
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		List<PatientPrescriptionHeader> prescriptionList = new ArrayList<PatientPrescriptionHeader>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> employeeList=new ArrayList<MasEmployee>();
		
		Date currentDate = new Date();

		Session session = (Session) getSession();
		Criteria crit = null;
        int hospitalId=0;
		int deptId = 0;
		if (mapForDs.get("deptId") != null)
			deptId = Integer.parseInt("" + mapForDs.get("deptId"));
		if (mapForDs.get("hospitalId") != null)
			hospitalId = Integer.parseInt("" + mapForDs.get("hospitalId"));
        //System.out.println("hospitalId =========>"+hospitalId);
		if (mapForDs.get("currentDate") != null)
			currentDate =(Date) mapForDs.get("currentDate");

		try {
			crit = session.createCriteria(PatientPrescriptionHeader.class).createAlias(
					"Department", "dept").add(Restrictions.eq("dept.Id", deptId)).add(Restrictions.ne("Status", "c"))
					.add(Restrictions.eq("PrescriptionDate",currentDate)).add(Restrictions.eq("Hospital.Id",hospitalId))
					.add(Restrictions.isNotNull("Visit"));
			prescriptionList = crit.list();

			departmentList = session.createCriteria(MasDepartment.class).add(Restrictions.eq("Status", "y")).addOrder(Order.asc("DepartmentName")).list();
		    employeeList=session.createCriteria(MasEmployee.class).add(Restrictions.eq("EmpCategory.Id",1)).
		    add(Restrictions.eq("Hospital.Id",hospitalId)).add(Restrictions.eq("Status","y")).addOrder(Order.asc("FirstName")).list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("prescriptionList", prescriptionList);
		map.put("departmentList", departmentList);
		map.put("employeeList",employeeList);
		return map;
	}

	public Map<String, Object> getPrescriptionDetails(Map<String, Object> mapForDs)
	{
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		List<PatientPrescriptionHeader> prescriptionList = new ArrayList<PatientPrescriptionHeader>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> employeeList=new ArrayList<MasEmployee>();
		List<StoreOpPatientIssueM>  storeOpPatientIssueMList=new ArrayList<StoreOpPatientIssueM>();
		Date fromDate = new Date();
		Date toDate = new Date();
		Session session = (Session) getSession();
		Criteria crit = null;
		int deptId = 0;
		if (mapForDs.get("departmentId") != null)
			deptId = Integer.parseInt("" + mapForDs.get("departmentId"));

		if (mapForDs.get("fromDate") != null) {
			fromDate = (Date) mapForDs.get("fromDate");
		}
		if (mapForDs.get("toDate") != null) {
			toDate = (Date) mapForDs.get("toDate");
		}
		int medicalOfficerId = 0;
		if (mapForDs.get("medicalOfficerId") != null)
			medicalOfficerId = Integer.parseInt(""+mapForDs.get("medicalOfficerId"));
		int hospitalId=0;
		if(mapForDs.get("hospitalId") != null)
			hospitalId=Integer.parseInt(""+mapForDs.get("hospitalId"));
		
        if((deptId !=0)&&(medicalOfficerId !=0))
        {
        	 //System.out.println("deptId !=0 and medicalOfficerId !=0");	
             crit = session.createCriteria(PatientPrescriptionHeader.class).add(
   				Restrictions.eq("Status", "p")).createAlias(
   				"Department", "dept").add(
   				Restrictions.eq("dept.Id", deptId)).add(Restrictions.eq("Emp.Id", medicalOfficerId)).add(Restrictions.isNotNull("Visit"))
   				.add(Restrictions.between("PrescriptionDate",
   							fromDate, toDate));
        }
        else if(deptId !=0)
        {    
          // System.out.println("deptId !=0");	
          crit = session.createCriteria(PatientPrescriptionHeader.class).add(
				Restrictions.eq("Status", "p")).createAlias(
				"Department", "dept").add(
				Restrictions.eq("dept.Id", deptId)).add(Restrictions.isNotNull("Visit"))
				.add(Restrictions.between("PrescriptionDate",
								fromDate, toDate));
        }else if(medicalOfficerId !=0)
        {
        	
        System.out.println("medicalOfficerId !=0"+medicalOfficerId);	
            crit = session.createCriteria(PatientPrescriptionHeader.class).add(
  				Restrictions.eq("Status", "p")).add(Restrictions.eq("Emp.Id", medicalOfficerId)).add(Restrictions.isNotNull("Visit"))
  				.add(Restrictions.between("PrescriptionDate",
  								fromDate, toDate)).add(Restrictions.eq("Hospital.Id", hospitalId));
        	
        }else
        {
        	//System.out.println("from date and to date");	
            crit = session.createCriteria(PatientPrescriptionHeader.class).add(
  				Restrictions.eq("Status", "p")).add(Restrictions.between("PrescriptionDate",
  								fromDate, toDate)).add(Restrictions.isNotNull("Visit")).add(Restrictions.eq("Hospital.Id", hospitalId));
        	
        }
        	
		prescriptionList = crit.addOrder(Order.desc("PrescriptionNo")).list();
		map.put("prescriptionList", prescriptionList);
		departmentList = session.createCriteria(MasDepartment.class).add(Restrictions.eq("Status", "y")).addOrder(Order.asc("DepartmentName")).list();
		map.put("departmentList", departmentList);
		employeeList = session.createCriteria(MasEmployee.class).add(
				Restrictions.eq("Status", "y")).add(
				Restrictions.eq("EmpCategory.Id",1)).add(Restrictions.eq("Hospital.Id",hospitalId)).add(Restrictions.eq("Status","y")).addOrder(Order.asc("FirstName")).list();
		
		map.put("employeeList",employeeList);
		/*storeOpPatientIssueMList=session.createCriteria(StoreOpPatientIssueM.class).add(Restrictions.eq("Status", "y")).list();
		map.put("storeOpPatientIssueMList",storeOpPatientIssueMList);*/
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getPrescriptionDetailList(Map<String,Object> dataMap) {
		List<PatientPrescriptionDetails> presList = new ArrayList<PatientPrescriptionDetails>();
		List<MasEmployee> empList = new ArrayList<MasEmployee>();
		Session session = (Session) getSession();
		int prescriptionId = 0;
		if (dataMap.get("prescriptionId") != null) {
			prescriptionId = (Integer)dataMap.get("prescriptionId");
		}
		String status ="c";
		presList = session.createCriteria(PatientPrescriptionDetails.class).createAlias("Prescription", "presc")
				.add(Restrictions.eq("presc.Id", prescriptionId)).add(Restrictions.ne("DetailStatus",status)).list();
		if (presList != null && presList.size() > 0) {
			dataMap.put("presList", presList);
		}
		
		return dataMap;

	}
	
	@SuppressWarnings("unchecked")
	public Map<String, Object> submitPendingPrescriptionDetails(Box box,
			Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		Session session = (Session) getSession();
		if (dataMap.get("box") != null) {
			box = (Box) dataMap.get("box");
		}
	
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			Vector itemId = box.getVector(RequestConstants.ITEM_ID);
			Vector patientDetailId = box.getVector("patientDetailId");
			Vector patientHeaderId = box.getVector("patientHeaderId");
			Vector select = box.getVector(RequestConstants.SELECT);
			Vector changedBy = box.getVector(RequestConstants.CHANGED_BY);
			Vector currentTime = box.getVector(RequestConstants.CHANGED_TIME);
			Vector deptId = box.getVector("deptId");
			Vector hospitalId = box.getVector("hospitalId");

			for (int i = 0; i < select.size(); i++) {
				PendingPrescriptionDetail pendingPresDetail = new PendingPrescriptionDetail();
				if (select.get(i) != null && !select.get(i).equals("")) {
					
					if (select != null && !select.equals("")) {
						pendingPresDetail.setStatus("p");
					}
					
					
					MasStoreItem masStoreItem = new MasStoreItem();
					masStoreItem.setId(Integer.parseInt((String)itemId.get(i)));
					pendingPresDetail.setItem(masStoreItem);
					
					PatientPrescriptionHeader patientHeader = new PatientPrescriptionHeader();
					patientHeader.setId(Integer.parseInt((String)patientHeaderId.get(i)));
					pendingPresDetail.setPrescription(patientHeader);
					
					PatientPrescriptionDetails patientDetails = new PatientPrescriptionDetails();
					patientDetails.setId(Integer.parseInt((String)patientDetailId.get(i)));
					pendingPresDetail.setPatientPrescriptionDetails(patientDetails);
					
					MasDepartment masDepartment = new MasDepartment();
					masDepartment.setId(Integer.parseInt((String) deptId.get(i)));
					pendingPresDetail.setDept(masDepartment);

					MasHospital masHospital = new MasHospital();
					masHospital.setId(Integer.parseInt((String) hospitalId.get(i)));
					pendingPresDetail.setHospital(masHospital);

					pendingPresDetail.setLastChgBy((String) changedBy.get(i));
					pendingPresDetail.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(box.get(RequestConstants.CHANGED_DATE)));
					pendingPresDetail.setLastChgTime((String) currentTime.get(i));
					hbt.save(pendingPresDetail);
					
					int detailId = Integer.parseInt(patientDetailId.get(i).toString());
					PatientPrescriptionDetails patientPrescDetails = (PatientPrescriptionDetails) getHibernateTemplate().load(
							PatientPrescriptionDetails.class, detailId);
					patientPrescDetails.setDetailStatus("c");
					hbt.update(patientPrescDetails);
					hbt.refresh(patientPrescDetails);

					int patHeaderId = Integer.parseInt(patientHeaderId.get(i).toString());
					List<PatientPrescriptionDetails> tempList = new ArrayList<PatientPrescriptionDetails>();
					tempList = session.createCriteria(PatientPrescriptionDetails.class)
							.createAlias("Prescription", "pres").add(
									Restrictions.eq("pres.Id", patHeaderId)).add(Restrictions.ne("DetailStatus", "c")).list();
					

					String headerOrderStaus = "";
					for (PatientPrescriptionDetails object : tempList) {
						if (object.getDetailStatus().equals("c")) {
							headerOrderStaus = "p";
							break;
						} else {
							headerOrderStaus = "c";
						}

						PatientPrescriptionHeader header = (PatientPrescriptionHeader) getHibernateTemplate().load(
								PatientPrescriptionHeader.class, patHeaderId);
						
						header.setStatus(headerOrderStaus);
						hbt.saveOrUpdate(header);
					}

					
					
				}
			}

			saved = true;
			tx.commit();
		} catch (Exception e) {
			if (tx != null)
				tx.rollback();
			//System.out.println("Error ocurred!! please try again");
			e.printStackTrace();

		}
		map.put("saved", saved);
		return map;
	}
	public List<PatientPrescriptionHeader> getPresVisitNo(String hinNo) {
		Session session = (Session) getSession();
		List<PatientPrescriptionHeader> visitList = new ArrayList<PatientPrescriptionHeader>();
		//List<PatientPrescriptionHeader> patientPrescriptionHeaderList = new ArrayList<PatientPrescriptionHeader>();
		@SuppressWarnings("unused")
		Visit visit = new Visit();
		//visitList = session.createCriteria(Visit.class).createAlias("Hin",
				//"p").add(Restrictions.eq("p.HinNo", hinNo)).addOrder(Order.desc("VisitNo")).list();

	    visitList = session.createCriteria(PatientPrescriptionHeader.class).createAlias("Visit", "visit").
        				createAlias("Hin", "hin").add(Restrictions.eq("hin.HinNo", hinNo))
        						.addOrder(Order.desc("visit.VisitNo")).list();
		return visitList;
	}

	@Override
	public List<PatientInvestigationHeader> getInvestigationVisitNo(String hinNo) {
		Session session = (Session) getSession();
		List<PatientInvestigationHeader> visitList = new ArrayList<PatientInvestigationHeader>();
		//List<PatientPrescriptionHeader> patientPrescriptionHeaderList = new ArrayList<PatientPrescriptionHeader>();
		@SuppressWarnings("unused")
		Visit visit = new Visit();
		//visitList = session.createCriteria(Visit.class).createAlias("Hin",
				//"p").add(Restrictions.eq("p.HinNo", hinNo)).addOrder(Order.desc("VisitNo")).list();

	    visitList = session.createCriteria(PatientInvestigationHeader.class).createAlias("Visit", "visit").
        				createAlias("Hin", "hin").add(Restrictions.eq("hin.HinNo", hinNo))
        						.addOrder(Order.desc("visit.VisitNo")).list();
		return visitList;
	}

	
	public int getTransactionSequenceNoForPrescriptionNo(Map mapForDS) {
		Session session = (Session) getSession();

		int userId = (Integer) mapForDS.get("userId");
		String userName = (String) mapForDS.get("userName");
		List<TransactionSequence> orderNoList = new ArrayList<TransactionSequence>();
		String tableName = "PATIENT_PRESCRIPTION_HEADER";
		int currentYearInt=-1;
		int orderNo=0;
		int oldYear=-1;
		 Map<String, Object> utilMap = new HashMap<String, Object>();
         utilMap = (Map) HMSUtil.getCurrentDateAndTime();
         String date = (String) utilMap.get("currentDate");

         String currentYear = date.substring(date.lastIndexOf("/") + 1);
         currentYearInt=Integer.parseInt(currentYear);
         String currentMonth = date.substring(date.indexOf("/") + 1, date
                         .lastIndexOf("/"));
     	TransactionSequence tranSeq=new TransactionSequence();
		tranSeq.setTransactionSequenceName("PrescriptionNo");
		tranSeq.setTransactionPrefix("PRNO");
		tranSeq.setTablename(tableName);
		tranSeq.setCreatedby(userName);
		tranSeq.setStatus("y");
		//MasServiceType masserType=new MasServiceType();
		tranSeq.setServiceType(null);
		tranSeq.setMonth(currentYearInt);
		//Transaction tx = null;
		int hospitalId = (Integer)mapForDS.get("hospitalId");
		try {
				//	tx = session.beginTransaction();
					org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
					hbt.setFlushModeName("FLUSH_EAGER");
					hbt.setCheckWriteOperations(false);
         
		try {

			Criteria crit = session.createCriteria(TransactionSequence.class).add(Restrictions.eq("Hospital.Id", hospitalId))
					.add(Restrictions.eq("Tablename", tableName));
			orderNoList = crit.list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		if(orderNoList!=null && orderNoList.size()>0)
		{
		 TransactionSequence transactionSequence = orderNoList.get(0);
		 orderNo = transactionSequence.getTransactionSequenceNumber();
		 oldYear=transactionSequence.getMonth(); 
		 if(currentYearInt>oldYear)
		 {
			    orderNo=1;
			    transactionSequence.setMonth(currentYearInt);
			    transactionSequence.setCreatedby(userName);
			    transactionSequence.setTransactionSequenceNumber(orderNo+1);
				hbt.update(transactionSequence);
		 }else
		 {      
			    orderNo=orderNo+1;
			    transactionSequence.setCreatedby(userName);
			    transactionSequence.setTransactionSequenceNumber(orderNo);
			    hbt.update(transactionSequence);
		 }
		}else
		{
			MasHospital hospital = new MasHospital();
			hospital.setId(hospitalId);
			tranSeq.setHospital(hospital);
			tranSeq.setTransactionSequenceNumber(orderNo);
			hbt.save(tranSeq);
		}
	//	tx.commit();
		} catch (Exception e) {
			//if (tx != null)
			//	tx.rollback();
			e.printStackTrace();

		} finally {
			// --------Session Closing----------
			
		}
		return orderNo;
		
	}

	@Override
	public Map<String, Object> showTreatmentPopUp(Map<String,Object> map1) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String generic_name = "%" + map1.get("autoHint") + "%";
    		List<Drugdetails> drugDetailList = new ArrayList<Drugdetails>();
			
			Criteria cri = session.createCriteria(Drugdetails.class)
			.add(Restrictions.like("Genericname", generic_name).ignoreCase());
			drugDetailList=cri.list();
			
			map.put("drugDetailList", drugDetailList);
			} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}
	



	
	public Map<String, Object> showPatientPreviousVisitForHospitality(
			Map<String, Object> mapForDS) {
		Session session = (Session) getSession();
		
		List<Discharge> dischargeList = new ArrayList<Discharge>();
		Map<String, Object> map = new HashMap<String, Object>();

		@SuppressWarnings("unused")
		int deptId = (Integer) mapForDS.get("deptId");
		int hinId = (Integer) mapForDS.get("hinId");
		int visitNo = (Integer) mapForDS.get("visitNo");
		try {
			
			
			Criteria crit = session.createCriteria(Discharge.class)
			.createAlias("Inpatient", "inpatient")
			.createAlias("inpatient.Hin", "hin")
			.add(Restrictions.eq("hin.Id", hinId));
			dischargeList=crit.list();
			
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		
		map.put("dischargeList", dischargeList);
		
		return map;
	}

	

	@Override
	public Map<String, Object> showTreatment(Map<String, Object> map1) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			
			//String generic_name+"%"=  (String) map1.get("autoHint");
			String generic_name =  (String) map1.get("autoHint");

			List<Drugdetails> drugDetailList = new ArrayList<Drugdetails>();
			Criteria cri = session.createCriteria(Drugdetails.class)
			.add(Restrictions.eq("Genericname", generic_name).ignoreCase());
			drugDetailList=cri.list();
			map.put("drugDetailList", drugDetailList);
			} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}
    


	@Override
	public Map<String, Object> showSymptomPopUp(Map<String, Object> map1) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String generic_name = "%" + map1.get("autoHint") + "%";
    		List<Symptom> MedicinenetList = new ArrayList<Symptom>();
			Criteria cri = session.createCriteria(Symptom.class)
			.add(Restrictions.like("ComplaintDescription", generic_name).ignoreCase());
			MedicinenetList=cri.list();
			map.put("MedicinenetList", MedicinenetList);
			} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}


	@Override
	public Map<String, Object> showDiagnosisPopUp(Map<String, Object> map1) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<OpdMasSymptom> symptomList = new ArrayList<OpdMasSymptom>();
		try {
			/*String generic_name = "%" + map1.get("autoHint") + "%";
    		List<Diagnosispro> DiagnosisproList = new ArrayList<Diagnosispro>();
			System.out.println("generic_name  --"+generic_name); 
			Criteria cri = session.createCriteria(Diagnosispro.class)
			.add(Restrictions.like("Name", generic_name).ignoreCase());
			DiagnosisproList=cri.list();
			System.out.println("DiagnosisproList 2--"+DiagnosisproList.size());
			map.put("DiagnosisproList", DiagnosisproList);
			
			  */
			String str = "%" + map1.get("autoHint") + "%";
			
			String	query = "from OpdMasSymptom as oms where upper(SymptomName) like upper( :str )";
	
			Query q = session.createQuery(query);
			q.setParameter("str",str);
			q.setFirstResult(0);
			q.setMaxResults(20);
			symptomList = q.list();
			
			map.put("symptomList", symptomList);
		
			
			} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	

	@Override
	public Map<String, Object> showSymptom(Map<String, Object> map1) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			
			//String generic_name+"%"=  (String) map1.get("autoHint");
			String generic_name =  (String) map1.get("autoHint");
			List<Symptom> symptomList =session.createCriteria(Symptom.class)
			.add(Restrictions.eq("ComplaintDescription", generic_name).ignoreCase()).list();
			if(symptomList.size()>0)
			{
				map.put("symptomList", symptomList);
				Symptom symptom=symptomList.get(0);
				int symptomId=symptom.getId();
			List<SymptomCause>	symptomCauseList=session.createCriteria(SymptomCause.class)
			.add(Restrictions.eq("Symptom.Id",symptomId)).list();
			map.put("symptomCauseList", symptomCauseList);
			List<SymptomMedication>	symptomMedicationList=session.createCriteria(SymptomMedication.class)
			.add(Restrictions.eq("Symptom.Id",symptomId)).list();
			map.put("symptomMedicationList", symptomMedicationList);
			List<SymptomRelatedName> symptomRelatedNameList=session.createCriteria(SymptomRelatedName.class)
			.add(Restrictions.eq("Symptom.Id",symptomId)).list();
			map.put("symptomRelatedNameList", symptomRelatedNameList);
			List<SymptomDesc>	symptomDescList=session.createCriteria(SymptomDesc.class)
			.add(Restrictions.eq("Symptom.Id",symptomId)).list();
			map.put("symptomDescList", symptomDescList);
			List<SymptomSubComplains> symptomSubComplainsList=session.createCriteria(SymptomSubComplains.class)
			.add(Restrictions.eq("Symptom.Id",symptomId)).list();
			map.put("symptomSubComplainsList", symptomSubComplainsList);
			
			}
			
			} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	

	@Override
	public Map<String, Object> showDiagnosis(Map<String, Object> map1) {
		
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			
			//String generic_name+"%"=  (String) map1.get("autoHint");
			String generic_name =  "%" +(String) map1.get("autoHint")+ "%";

			List<Diagnosispro> DiagnosisproList = new ArrayList<Diagnosispro>();
			
			Criteria cri = session.createCriteria(Diagnosispro.class)
			.add(Restrictions.eq("Name", generic_name).ignoreCase());
			DiagnosisproList=cri.list();
			
			map.put("DiagnosisproList", DiagnosisproList);
			} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
		}

	@Override
	public Map<String, Object> getPreviousMedicalBoardDetails(
			Map<String, Object> mapForDS) {
		Map<String, Object> map = new HashMap<String, Object>();
		
		String serviceNo = (String) mapForDS.get("serviceNo");
		Connection con = null;
		Properties properties = new Properties();
		URL resourcePathHIC = Thread.currentThread().getContextClassLoader().getResource("hicDetails.properties");
		try {
			properties.load(resourcePathHIC.openStream());
		} catch (Exception e) {
			e.printStackTrace();
		}
		String hicDB = properties.getProperty("hicDB");
		String hicUser = properties.getProperty("hicUser");
		String hicPwd = properties.getProperty("hicPwd");
		String hicDbConfigure =  properties.getProperty("hicDbConfigure");
		if(hicDbConfigure.equals("yes")) {

			try {
				Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
				con = DriverManager.getConnection(hicDB, hicUser, hicPwd);

				OracleCallableStatement oraCallStmt   = null;
				OracleResultSet medBoardResultSet = null;
				oraCallStmt = (OracleCallableStatement) con.prepareCall(
						"{call GetForm15info(?,?)}"
				);
				oraCallStmt.setString(1, serviceNo);
				oraCallStmt.registerOutParameter(2, OracleTypes.CURSOR);
				oraCallStmt.execute();

				medBoardResultSet = (OracleResultSet) oraCallStmt.getCursor(2);

				map.put("medBoardResultSet", medBoardResultSet);
				//  oraCallStmt.close();
			} catch (InstantiationException e) {
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				e.printStackTrace();
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		
		/**
		 * End
		 */

	return map;
	}
	public Map<String, Object> showPopupTokenJsp(Map<String, Object> mapForDS) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = null;
		session = (Session) getSession();
		
		try{
			List<Object[]> minTokenList = new ArrayList<Object[]>();
			List<Visit> visitTokenList = new ArrayList<Visit>();
			List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();
			List<Object[]> tokenList = new ArrayList<Object[]>();
			
			int deptId = 0;
			if(mapForDS.get("deptId")!=null){
				deptId = (Integer) mapForDS.get("deptId");
			}
			int hospitalId = 0;
			if(mapForDS.get("hospitalId")!=null){
				hospitalId = (Integer) mapForDS.get("hospitalId");
			}
			int empId = 0;
			if(mapForDS.get("empId")!=null){
				empId = (Integer) mapForDS.get("empId");
			}
			Date currentDate = new Date();
			String reportingDept[] = {"OPD","FollowUp"};
			/*List<Integer> tokenDisplayList = new ArrayList<Integer>();
			tokenDisplayList = session.createCriteria(TokenDisplay.class).setProjection(Projections.property("VisitId")).list();*/
			minTokenList = session.createCriteria(Visit.class).add(Restrictions.eq("VisitStatus", "w"))
			//.add(Restrictions.eq("Doctor.Id", empId))
			.add(Restrictions.eq("Hospital.Id", hospitalId))
			.add(Restrictions.eq("VisitDate", currentDate))
			.add(Restrictions.in("ReportingFor", reportingDept)).add(Restrictions.eq("TokenStatus", "n"))
			.setProjection(Projections.projectionList().add(Projections.min("TokenNo")).add(Projections.groupProperty("Doctor.Id"))).list();
			if(minTokenList!=null && minTokenList.size()>0 && minTokenList.get(0)!=null){
				Integer[] token = new Integer[minTokenList.size()];
				int i=0;
				for (Object[] v : minTokenList) {
					token[i] = (Integer)v[0];
					i++;
				}
				
				
				tokenList = session.createCriteria(Visit.class).add(Restrictions.eq("VisitStatus", "w"))
				.createAlias("Doctor", "d")
				.createAlias("d.Rank", "dRank")
				.createAlias("Hin", "h")
				.createAlias("h.Rank", "pRank")
				.createAlias("h.Relation", "pRelation")
				.add(Restrictions.eq("Hospital.Id", hospitalId))
				.add(Restrictions.eq("VisitDate", currentDate))
				.add(Restrictions.in("ReportingFor", reportingDept)).add(Restrictions.in("TokenNo", token))
				.setProjection(Projections.projectionList().add(Projections.property("RoomNo"))
				.add(Projections.property("dRank.RankName"))
				.add(Projections.property("d.FirstName"))
				.add(Projections.property("d.MiddleName"))
				.add(Projections.property("d.LastName"))
				.add(Projections.property("pRank.RankName"))
				.add(Projections.property("h.PFirstName"))
				.add(Projections.property("h.PMiddleName"))
				.add(Projections.property("h.PLastName"))
				.add(Projections.property("pRelation.RelationName"))
				.add(Projections.property("TokenNo"))
				.add(Projections.groupProperty("RoomNo"))
				.add(Projections.groupProperty("TokenNo"))
				.add(Projections.groupProperty("Doctor.Id"))
				.add(Projections.groupProperty("dRank.RankName"))
				.add(Projections.groupProperty("d.FirstName"))
				.add(Projections.groupProperty("d.MiddleName"))
				.add(Projections.groupProperty("d.LastName"))
				.add(Projections.groupProperty("pRank.RankName"))
				.add(Projections.groupProperty("h.PFirstName"))
				.add(Projections.groupProperty("h.PMiddleName"))
				.add(Projections.groupProperty("h.PLastName"))
				.add(Projections.groupProperty("pRelation.RelationName"))
				).list();
				
			}
						
			
			/*if(deptId==81){
				visitTokenList = session.createCriteria(Visit.class).add(Restrictions.eq("TokenStatus", "y"))
			//	.add(Restrictions.eq("Department.Id", deptId))
				.add(Restrictions.eq("VisitDate", currentDate))
				.add(Restrictions.isNotNull("TokenNo")).list();
			}
			else
			{
			}*/
			//.add(Restrictions.eq("Department.Id", deptId))
			//----------------change By anamika------------
		/*	visitTokenList = session.createCriteria(Visit.class)
			.createAlias("Hin", "hin").createAlias("hin.Relation", "relation").createAlias("hin.Rank", "sRank")
			.createAlias("Doctor", "doctor")
			.createAlias("doctor.Rank", "docRank")
			.add(Restrictions.eq("VisitStatus", "w"))
			.add(Restrictions.eq("Hospital.Id", hospitalId))
			.add(Restrictions.eq("VisitDate", currentDate))
			.add(Restrictions.isNotNull("TokenDoctor")).add(Restrictions.in("ReportingFor", reportingDept))
			.setMaxResults(1).addOrder(Order.asc("TokenNo")).setProjection(Projections.projectionList()
					.add(Projections.groupProperty("doctor.Id"))
					.add(Projections.groupProperty("doctor.FirstName"))
					.add(Projections.groupProperty("doctor.MiddleName"))
					.add(Projections.groupProperty("doctor.LastName"))
					.add(Projections.groupProperty("hin.SFirstName"))
					.add(Projections.groupProperty("hin.SMiddleName"))
					.add(Projections.groupProperty("hin.SLastName"))
					.add(Projections.groupProperty("relation.RelationName"))
					.add(Projections.groupProperty("sRank.RankName"))
					.add(Projections.groupProperty("docRank.RankName"))
					.add(Projections.groupProperty("RoomNo"))
					.add(Projections.groupProperty("TokenNo"))
			)
			.list();*/
			//---------------------------
			
			
			/*
			List<MasDepartment> masDepartmentList = new ArrayList<MasDepartment>();
			masDepartmentList = session.createCriteria(MasDepartment.class).add(Restrictions.idEq(deptId)).list();
			String deptName="";
			if(masDepartmentList.size()>0){
				for (MasDepartment masDepartment : masDepartmentList) {
					deptName=masDepartment.getDepartmentName();
				}
			}
			map.put("masDepartmentList", masDepartmentList);
			map.put("deptId", deptId);
			map.put("deptName", deptName);
			 */
			map.put("tokenList", tokenList);
		}catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	

	@Override
	public Map<String, Object> updateVistToken(Map<String, Object> mapForToken) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = null;
		session = (Session) getSession();
		
		Transaction tx = null;
		try{
			
			int visitId = 0;
			int empId= 0;
			int hospitalId = 0;
			int token = 0;
			if(mapForToken.get("visitId")!=null){
				visitId = (Integer) mapForToken.get("visitId");
			}
			if(mapForToken.get("empId")!=null){
				empId = (Integer) mapForToken.get("empId");
			}
			if(mapForToken.get("hospitalId")!=null){
				hospitalId = (Integer) mapForToken.get("hospitalId");
			}
			if(mapForToken.get("token")!=null){
				token = (Integer) mapForToken.get("token");
			}
			tx = session.beginTransaction();
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			/*List<Visit> visitTokenList = new ArrayList<Visit>();
			Date currentDate = new Date();
			visitTokenList = session.createCriteria(Visit.class).add(Restrictions.eq("Doctor.Id", empId))
			.add(Restrictions.eq("VisitDate", currentDate)).list();
			//System.out.println(empId+"<--empId--visitTokenList-update token no-->"+visitTokenList.size());
			if(visitTokenList.size()>0){
				for (Visit visit2 : visitTokenList) {
					Visit visit3 = (Visit)hbt.load(Visit.class, visit2.getId());
					//System.out.println(visit3.getDoctor().getId()+"<--Doctor id--visit3.getId()--->"+visit3.getId());
					visit3.setDisplayToken(null);
					hbt.update(visit3);
					hbt.refresh(visit3);
				}
			}*/
			Visit visit = (Visit)hbt.load(Visit.class, visitId);
			visit.setTokenStatus("y");
			hbt.update(visit);
			hbt.refresh(visit);
			//----------change by anamika-----------------
			/*List<TokenDisplay>tokenDisplayList = new ArrayList<TokenDisplay>();
			tokenDisplayList = session.createCriteria(TokenDisplay.class)
					.add(Restrictions.eq("EmployeeId", empId)).add(Restrictions.eq("HospitalId", hospitalId))
					.add(Restrictions.eq("VisitDate", currentDate)).list();
			List<Visit> tokenList = new ArrayList<Visit>();
			tokenList = session.createCriteria(Visit.class).add(Restrictions.eq("Doctor.Id", empId))
			.add(Restrictions.eq("VisitDate", currentDate)).add(Restrictions.eq("TokenNo", token+1)).list();
			System.out.println("tokenList=="+tokenList.size());
			if(tokenList.size()>0){
			Visit visitForToken = tokenList.get(0);
			int visitIdForToken = visitForToken.getId();
			
			if(tokenDisplayList.size()>0){
			TokenDisplay tokenDisplay = tokenDisplayList.get(0);
			 tokenDisplay=(TokenDisplay)hbt.load(TokenDisplay.class,tokenDisplay.getId());
			 tokenDisplay.setVisitId(visitIdForToken);
						 hbt.update(tokenDisplay);
						}else{
							TokenDisplay tokenDisp = new TokenDisplay();
							tokenDisp.setEmployeeId(empId);
							tokenDisp.setHospitalId(hospitalId);
							tokenDisp.setVisitDate(currentDate);
							tokenDisp.setVisitId(visitIdForToken);
							hbt.save(tokenDisp);
							
						}
					}*/
						//System.out.println("data-update token no--");
			
			tx.commit();
		}catch (Exception e) {
			e.printStackTrace();
			if(tx!=null)
				tx.rollback();
		}
		return map;
	}
	// Dinesh 
	public Map<String, Object> submitDifferentialDiagnosis(String arr[])
	{
		Map<String, Object> map = new HashMap<String, Object>();
		List<Object[]> symptomDiseaseMappingList = new ArrayList<Object[]>();
		
		Session session = null;
		session = (Session) getSession();
		try
	
		{   org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		    hbt.setFlushModeName("FLUSH_EAGER");
		    hbt.setCheckWriteOperations(false);

			int cnt=0;
			String sqlId="";
			
			for(String a1:arr)
			{
			//	dignosisIdList.add(Integer.parseInt(a1));
				if(cnt==0){
						sqlId=a1;
				}else{
					sqlId=sqlId+","+a1;
				}
				++cnt;
				}
			//System.out.println("sqlId===="+sqlId);
			int countValue=0;
			if(arr.length>1){
				countValue=1;
			}
			/*symptomDiseaseMappingList =session.createCriteria(OpdSymptomDiseaseMapping.class).createAlias("Symptom", "symp")
			.add(Restrictions.in("symp.Id", dignosisIdList))
			.setProjection(
					Projections.distinct(Projections.projectionList()
							.add(Projections.property("symp.Id")))).list();*/
			//String str = "SELECT distinct(dd.Id),dd.DifferentialDiseaseName from jkt.hms.masters.business.OpdSymptomDiseaseMapping as osd join osd.Symptom as symp join osd.DifferentialDisease as dd where symp.Id  in ("+sqlId+")";
			String strQuery = "select DIFFERENTIAL_DISEASE_ID,DIFFERENTIAL_DISEASE_NAME from OPD_DIFFERENTIAL_DISEASE " +
					" where  DIFFERENTIAL_DISEASE_ID in (select distinct DIFFERENTIAL_DISEASE_ID " +
					" from OPD_SYMPTOM_DISEASE_MAPPING where SYMPTOM_ID in("+sqlId+")  " +
					" group by DIFFERENTIAL_DISEASE_ID HAVING count(DIFFERENTIAL_DISEASE_ID)>"+countValue+")";
 	
//			symptomDiseaseMappingList = getHibernateTemplate().find(strQuery);
			symptomDiseaseMappingList  = session.createSQLQuery(strQuery).list();
		map.put("symptomDiseaseMappingList", symptomDiseaseMappingList);	
			
		}catch(HibernateException he)
		{
			he.printStackTrace();
		}
		return map;
	}
	public Map<String, Object> showDiseaseFeatures(Box box) {
		Map<String,Object> map = new HashMap<String, Object>();
		List<OpdDifferentialDisease> differentialDiseaseList = new ArrayList<OpdDifferentialDisease>();
		Session session = (Session)getSession();
		differentialDiseaseList = session.createCriteria(OpdDifferentialDisease.class)
									.add(Restrictions.idEq(box.getInt("diffentialDisease"))).list();
		map.put("differentialDiseaseList", differentialDiseaseList);
		return map;
	}
	
	//==================code by anamika========================
	@Override
	public Map<String, Object> showPhysiotherapyListJsp(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasTherapyType> therapyTypeList  = new ArrayList<MasTherapyType>();
		List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();
		Session session = (Session)getSession();
		therapyTypeList = session.createCriteria(MasTherapyType.class).add(Restrictions.eq("Status", "y")).list();
		frequencyList = session.createCriteria(MasFrequency.class).add(Restrictions.eq("Status", "y")).list();
		map.put("therapyTypeList", therapyTypeList);
		map.put("frequencyList", frequencyList);
		return map;
	}
	@Override
	public Map<String, Object> getTheraphyId(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasTherapyType> therapyTypeList  = new ArrayList<MasTherapyType>();
		String therapyId=  box.getString("therapyId");
		Session session = (Session)getSession();
		therapyTypeList = session.createCriteria(MasTherapyType.class).add(Restrictions.eq("TherapyTypeCode", therapyId))
		  				.list();
		map.put("therapyTypeList", therapyTypeList);
		return map;
	}

	@Override
	public Map<String, Object> savePhysiotherapyDetails(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

		boolean flag = false;
		Transaction tx = null;
		Session session = (Session)getSession();
		try {
			tx = session.beginTransaction();
			int therapyCount = box.getInt("therapyCount");
			
			PhysioRequisitionHeader physioRequisitionHeader = new PhysioRequisitionHeader();
				Patient patient =  new Patient();
				patient.setId(box.getInt("hinId"));
				physioRequisitionHeader.setHin(patient);
				
				MasHospital masHospital = new MasHospital();
				masHospital.setId(box.getInt("hospitalId"));
				physioRequisitionHeader.setHospital(masHospital);
				
				physioRequisitionHeader.setStatus("p");
			
				Users user = new Users();
				user.setId(box.getInt("userId"));
				physioRequisitionHeader.setLastChgBy(user);
				
				MasEmployee medicalOfficer =new MasEmployee();
				medicalOfficer.setId(box.getInt("doctorId"));
				physioRequisitionHeader.setMedicalOfficer(medicalOfficer);
				if(box.getInt("visitId")!=0){
					Visit visit=new Visit();
					visit.setId(box.getInt("visitId"));
					physioRequisitionHeader.setVisit(visit);
					physioRequisitionHeader.setFlag("OPD");
					physioRequisitionHeader.setPatientType("OP");
				}
				if(box.getInt("inpatientId")!=0){
					Inpatient inpatient=new Inpatient();
					inpatient.setId(box.getInt("inpatientId"));
					physioRequisitionHeader.setInpatient(inpatient);
					physioRequisitionHeader.setFlag("IPD");
					physioRequisitionHeader.setPatientType("IP");
					
				}
				physioRequisitionHeader.setReqDate(HMSUtil.convertStringTypeDateToDateType(box.getString(LAST_CHANGED_DATE)));
				physioRequisitionHeader.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(box.getString(LAST_CHANGED_DATE)));
				physioRequisitionHeader.setLastChgTime(box.getString(LAST_CHANGED_TIME));
				physioRequisitionHeader.setReqTime(box.getString(LAST_CHANGED_TIME));
				hbt.save(physioRequisitionHeader);
			
			for (int j = 1; j <= therapyCount; j++) {
					PhysioRequisitionDetail physioRequisitionDetail = new PhysioRequisitionDetail();
					MasTherapyType masTherapyType = new MasTherapyType();
					masTherapyType.setId(box.getInt("therapyId"+j));
					physioRequisitionDetail.setTharaphy(masTherapyType);
					physioRequisitionDetail.setPhysioRequisitionHeader(physioRequisitionHeader);
					MasFrequency masFrequency = new MasFrequency();
					masFrequency.setId(box.getInt("frequency"+j));
					physioRequisitionDetail.setFrequency(masFrequency);
					physioRequisitionDetail.setRemark(box.getString("remarks"+j));
					physioRequisitionDetail.setDuration(box.getString("duration"+j));
					physioRequisitionDetail.setNoOfDays(box.getInt("noOfDays"+j));
					
					hbt.save(physioRequisitionDetail);
			}
			map.put("physioRequisitionHeaderId", physioRequisitionHeader.getId());
			flag = true;
			tx.commit();
		} catch (DataAccessException e) {
			if(tx!= null){
				tx.rollback();
			}
			e.printStackTrace();
		}
		map.put("flag", flag);
		return map;
	}

	
	@Override
	public Map<String, Object> getTherapyTypeListForAutoComplete(Map<String, Object> generalMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasTherapyType> therapyTypeList = new ArrayList<MasTherapyType>();
		Session session = (Session) getSession();
		try {
			String str =  generalMap.get("autoHint") + "%";
			String query = "from MasTherapyType as mtt where upper(TherapyTypeName) like upper(:str)";
			Query q = session.createQuery(query);
			q.setParameter("str",str);
			//q.setFirstResult(0);
			//q.setMaxResults(10);
			therapyTypeList = q.list();
			
		} catch (Exception e) {

			e.printStackTrace();
		}
		map.put("therapyTypeList", therapyTypeList);
		return map;
	}



	@Override
	public Map<String, Object> getDetailsForProcList(Map<String, Object> mapDetail) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasEmployee> doctorList = new ArrayList<MasEmployee>();
		List<MasNursingCare> procedureList = new ArrayList<MasNursingCare>();
		List<Object> visitProcedureList = new ArrayList<Object>();
		Session session = (Session)getSession();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

        int hospitalId=0;
		if (mapDetail.get("hospitalId") != null){
			hospitalId = Integer.parseInt("" + mapDetail.get("hospitalId"));
		}
		int visitId=0;
		if (mapDetail.get("visitId") != null){
			visitId = Integer.parseInt("" + mapDetail.get("visitId"));
		}
		int procDtId=0;
		if (mapDetail.get("procDtId") != null){
			procDtId = Integer.parseInt("" + mapDetail.get("procDtId"));
		}
		Properties properties = new Properties();
		URL resourcePath = Thread.currentThread().getContextClassLoader()
				.getResource("adt.properties");
		try {
			properties.load(resourcePath.openStream());
		} catch (Exception e) {
			e.printStackTrace();
		}
		if(procDtId>0){
			ProcedureDetails procedureDetails=(ProcedureDetails)hbt.load(ProcedureDetails.class, procDtId);
			if(procedureDetails.getStatus().equalsIgnoreCase("p")){
				hbt.delete(procedureDetails);
				hbt.refresh(procedureDetails);
			}
		}
		String empCategoryCodeForDoctor = properties.getProperty("empCategoryCodeForDoctor");
		doctorList = session.createCriteria(MasEmployee.class).add(Restrictions.eq("Status", "y")).createAlias("Hospital", "h")
						.add(Restrictions.eq("h.Id", hospitalId)).createAlias("EmpCategory", "ec")
						.add(Restrictions.eq("ec.EmpCategoryCode", empCategoryCodeForDoctor)).addOrder(Order.asc("FirstName")).list();
		procedureList = session.createCriteria(MasNursingCare.class).add(Restrictions.eq("Status", "y")).add(Restrictions.eq("NursingType", "p").ignoreCase()).list();
		visitProcedureList=getHibernateTemplate().find("select ph,pd from jkt.hms.masters.business.ProcedureDetails as pd join pd.ProcedureHeader as ph join ph.Visit as visit where visit.Id="+visitId);
		map.put("doctorList", doctorList);
		map.put("visitProcedureList", visitProcedureList);
		map.put("procedureList", procedureList);
		return map;
	
	}
	@Override
	public Map<String, Object> saveProcedureDetails(Box box) {
		Map<String, Object> map =new HashMap<String, Object>();
		
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

		boolean flag = false;
		Transaction tx = null;
		Session session = (Session)getSession();
		try {
			tx = session.beginTransaction();
			int procCount = box.getInt("procCount");
			int visitProcedureId=0;
			//int hinId=0;
			visitProcedureId = box.getInt("visitProcedureId");
			int procHdId = box.getInt("procHdId");
			ProcedureHeader procedureHeader = new ProcedureHeader();
			if(visitProcedureId>0){
				procedureHeader.setId(visitProcedureId);
			}else{
				try {
					Patient patient =  new Patient();
					patient.setId(box.getInt("hinId"));
					procedureHeader.setHin(patient);
					MasHospital masHospital = new MasHospital();
					masHospital.setId(box.getInt("hospitalId"));
					procedureHeader.setHospital(masHospital);
					procedureHeader.setStatus("p");
					Users user = new Users();
					user.setId(box.getInt("userId"));
					procedureHeader.setLastChgBy(user);
					
					MasEmployee medicalOfficer =new MasEmployee();
					medicalOfficer.setId(box.getInt("doctorId"));
					procedureHeader.setMedicalOfficer(medicalOfficer);
					if(box.getInt("visitId")!=0){
						Visit visit=new Visit();
						visit.setId(box.getInt("visitId"));
						procedureHeader.setVisit(visit);
					}
					if(box.getInt("inpatientId")!=0){
						Inpatient inpatient=new Inpatient();
						inpatient.setId(box.getInt("inpatientId"));
						procedureHeader.setInpatient(inpatient);
					}
					procedureHeader.setRequisitionDate(HMSUtil.convertStringTypeDateToDateType(box.getString(LAST_CHANGED_DATE)));
					procedureHeader.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(box.getString(LAST_CHANGED_DATE)));
					procedureHeader.setLastChgTime(box.getString(LAST_CHANGED_TIME));
					hbt.save(procedureHeader);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			
			for (int j = 1; j <= procCount; j++) {
				//if(box.getInt("procedureId"+j)>0){
					
					
					ProcedureDetails procedureDetails = new ProcedureDetails();
					if(box.getInt("procedureId"+j) != 0){
						MasNursingCare nursingCare = new MasNursingCare();
						nursingCare.setId(box.getInt("procedureId"+j));
						procedureDetails.setNursingCare(nursingCare);
					}else{
						System.out.println("procedure box==="+box.getString("procedureName"+j));
						procedureDetails.setProcedureName(box.getString("procedureName"+j));
					}
					procedureDetails.setProcedureHeader(procedureHeader);
					procedureDetails.setRemarks(box.getString("remarks"+j));
					procedureDetails.setStatus("p");
					hbt.save(procedureDetails);
				//}
			}
			map.put("procedureHeaderId", procedureHeader.getId());
			flag = true;
			tx.commit();
		} catch (DataAccessException e) {
			if(tx!= null){
				tx.rollback();
			}
			e.printStackTrace();
		}
		map.put("flag", flag);
	
		return map;
	}


	@Override
	public Map<String, Object> getDetentionDetailsList(Map<String, Object> map) {
		Map<String, Object> mapDetail =new HashMap<String, Object>();
		
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		//int hospitalId = 0;
		int visitId = 0;
		int hinId=0;
		if(map.get("visitId")!=null){
			visitId=(Integer)map.get("visitId");
		}
		if(map.get("hinId")!=null){
			hinId=(Integer)map.get("hinId");
		}
		List<PatientDetentionRegister> patientDetentionRegisterList=new ArrayList<PatientDetentionRegister>();
		try{
			patientDetentionRegisterList=hbt.find("from jkt.hms.masters.business.PatientDetentionRegister as pdr where pdr.Visit.Id="+visitId);
		}catch (Exception e) {
			e.printStackTrace();
		}
		mapDetail.put("patientDetentionRegisterList", patientDetentionRegisterList);
		return mapDetail;
	}

	@Override
	public Map<String, Object> saveDetentionDetails(Box box) {
		Map<String, Object> map =new HashMap<String, Object>();
		
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

		boolean flag = false;
		try {
			//PatientDetentionRegister patientDetentionRegister = (PatientDetentionRegister)hbt.load(PatientDetentionRegister.class,box.getInt("detentionId"));
			PatientDetentionRegister patientDetentionRegister =new PatientDetentionRegister();
			
			Patient patient =  new Patient();
			patient.setId(box.getInt("hinId"));
			patientDetentionRegister.setHin(patient);
			MasHospital masHospital = new MasHospital();
			masHospital.setId(box.getInt("hospitalId"));
			//System.out.println("box.getInt(hospitalId)--->"+box.getInt("hospitalId"));
			patientDetentionRegister.setHospital(masHospital);
			
			MasEmployee medicalOfficer =new MasEmployee();
			//System.out.println("box.getInt(doctorId)--"+box.getInt("doctorId"));
			medicalOfficer.setId(box.getInt("doctorId"));
			patientDetentionRegister.setMedicalOfficer(medicalOfficer);
			
			Visit visit=new Visit();
			visit.setId(box.getInt("visitId"));
			patientDetentionRegister.setVisit(visit);
			
			patientDetentionRegister.setDetainedFrom(HMSUtil.convertStringTypeDateToDateType(box.getString("detentionFromDate")));
			patientDetentionRegister.setDetentionRegisterDate(HMSUtil.convertStringTypeDateToDateType(box.getString("detentionFromDate")));
			patientDetentionRegister.setDetainedTo(HMSUtil.convertStringTypeDateToDateType(box.getString("detentionToDate")));
			patientDetentionRegister.setFromTime(box.getString("fromTime"));
			patientDetentionRegister.setToTime(box.getString("toTime"));
			patientDetentionRegister.setTreatment(box.getString("treatment"));
			patientDetentionRegister.setRequisitionDate(HMSUtil.convertStringTypeDateToDateType(box.getString(LAST_CHANGED_DATE)));
			Users user = new Users();
			user.setId(box.getInt("userId"));
			patientDetentionRegister.setLastChgBy(user);
			patientDetentionRegister.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(box.getString(LAST_CHANGED_DATE)));
			patientDetentionRegister.setLastChgTime(box.getString(LAST_CHANGED_TIME));
			patientDetentionRegister.setStatus("p");
			if(box.getString("reviewAt")!= null){
			patientDetentionRegister.setReviewAt(box.getString("reviewAt"));
			}
			hbt.save(patientDetentionRegister);
			flag = true;
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		map.put("flag", flag);
		return map;
	}

	// Dinesh
	@Override
	public Map<String, Object> showSymptomSubPopUp(Map<String, Object> map1)
	{
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String generic_name = "%" + map1.get("autoHint") + "%";
    		List<SymptomSubComplains> symptomSubComplainsList = session.createCriteria(SymptomSubComplains.class)
			.add(Restrictions.like("SubSymptomName", generic_name).ignoreCase()).list();
			
			//System.out.println("symptomSubComplainsList ===>"+symptomSubComplainsList.size());
			
			map.put("symptomSubComplainsList", symptomSubComplainsList);
			} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}
	@Override
	public Map<String, Object> showSymptomSub(Map<String, Object> map1) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			
			//String generic_name+"%"=  (String) map1.get("autoHint");
			String generic_name =  (String) map1.get("autoHint");
			List<SymptomSubComplains> symptomSubComplainsList=session.createCriteria(SymptomSubComplains.class)
			.add(Restrictions.eq("SubSymptomName",generic_name)).list();
			
			
			if(symptomSubComplainsList.size()>0)
			{
				SymptomSubComplains symptomSubComplains=symptomSubComplainsList.get(0);
			List<Symptom> symptomList =session.createCriteria(Symptom.class)
			.add(Restrictions.eq("Id", symptomSubComplains.getSymptom().getId())).list();
			if(symptomList.size()>0)
			{	
			map.put("symptomList", symptomList);
				Symptom symptom=symptomList.get(0);
				int symptomId=symptom.getId();
			List<SymptomCause>	symptomCauseList=session.createCriteria(SymptomCause.class)
			.add(Restrictions.eq("Symptom.Id",symptomId)).list();
			map.put("symptomCauseList", symptomCauseList);
			List<SymptomMedication>	symptomMedicationList=session.createCriteria(SymptomMedication.class)
			.add(Restrictions.eq("Symptom.Id",symptomId)).list();
			map.put("symptomMedicationList", symptomMedicationList);
			List<SymptomRelatedName> symptomRelatedNameList=session.createCriteria(SymptomRelatedName.class)
			.add(Restrictions.eq("Symptom.Id",symptomId)).list();
			map.put("symptomRelatedNameList", symptomRelatedNameList);
			List<SymptomDesc>	symptomDescList=session.createCriteria(SymptomDesc.class)
			.add(Restrictions.eq("Symptom.Id",symptomId)).list();
			map.put("symptomDescList", symptomDescList);
			}
			map.put("symptomSubComplainsList", symptomSubComplainsList);
			
			}
			
			} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}
	@Override
	public Map<String, Object> showHospitalizedDischargeSummaryReport(
			Map<String, Object> mapDetail) {

		//List<MasHospital> hospitalList = new ArrayList<MasHospital>();
		List<Patient> patientList = new ArrayList<Patient>();
		List<Inpatient> inpatientList = new ArrayList<Inpatient>();
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		boolean dischargeSummaryReportDetailsExist = false;
		String casetype = "";
		String adNo = "";
		String hinNo = "";
		String serviceNo = "";
		int dischargeId=0;
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if(mapDetail.get("dischargeId")!=null){
				
				dischargeId= (Integer) mapDetail.get("dischargeId");
			}
			/*
			  int hospital_id = (Integer) mapDetail.get(HOSPITAL_ID);
			  hospitalList = session.createCriteria(MasHospital.class).add(
					Restrictions.eq("Id", hospital_id)).list();*/
			
			List<Discharge> dischargeList=new ArrayList<Discharge>(); 
			dischargeList=session.createCriteria(Discharge.class).add(Restrictions.idEq(dischargeId)).list();
			if(dischargeList.size()>0){
				for (Discharge discharge : dischargeList) {
					if(discharge.getHin()!=null){
						serviceNo=discharge.getHin().getServiceNo();
						hinNo=discharge.getHin().getHinNo();
					}
					adNo=discharge.getAdNo();
					
				}
			}
			/*
			 * Following two parameters (hinNo, adNo) are used in the sql query
			 * which build in JASPER report Rest of the parameter values in the
			 * "parameter" map are used in Report Form
			 */
			/*System.out.println("hinNo-->"+hinNo);
			System.out.println("adNo-->"+adNo);
			System.out.println("serviceNo-->"+serviceNo);*/
			map.put("hinNo", hinNo);
			map.put("adNo", adNo);
			patientList = session.createCriteria(Patient.class).add(
					Restrictions.eq("ServiceNo", serviceNo)).list();
			
			inpatientList = session.createCriteria(Inpatient.class)
					.createAlias("Hin", "p").add(
							Restrictions.eq("p.ServiceNo", serviceNo)).add(
							Restrictions.eq("AdNo", adNo)).list();
			if (inpatientList.size() > 0) {
				for (Patient patient : patientList) {
					Set<DischargeSummary> dischargeSummarySet = (Set) patient
							.getDischargeSummaries();
					for (DischargeSummary dischargeSummary : dischargeSummarySet) {
						dischargeSummaryReportDetailsExist = true;
						casetype = dischargeSummary.getItemCode()
								.getCategoryName();
						try {
							if (dischargeSummary.getItemCode().getItemCode()
									.getItemCode().equalsIgnoreCase("BWHT"))
								map.put("bodyWeight", dischargeSummary
										.getItemReply());
						} catch (Exception e) {
							map.put("bodyWeight", "-");
						}
						try {
							if (dischargeSummary.getItemCode().getItemCode()
									.getItemCode().equalsIgnoreCase("ANTH"))
								map.put("anthropometry", dischargeSummary
										.getItemReply());
						} catch (Exception e) {
							map.put("anthropometry", "-");
						}
						try {
							if (dischargeSummary.getItemCode().getItemCode()
									.getItemCode().equalsIgnoreCase("OFC"))
								map.put("ofc", dischargeSummary.getItemReply());
						} catch (Exception e) {
							map.put("ofc", "-");
						}

						try {
							if (dischargeSummary.getItemCode().getItemCode()
									.getItemCode().equalsIgnoreCase("WGHT"))
								map.put("weight", dischargeSummary
										.getItemReply());
						} catch (Exception e) {
							map.put("weight", "-");
						}
						try {
							if (dischargeSummary.getItemCode().getItemCode()
									.getItemCode().equalsIgnoreCase("HGHT"))
								map.put("height", dischargeSummary
										.getItemReply());
						} catch (Exception e) {
							map.put("height", "-");
						}
					}
					String patientName = "";
					patientName = patient.getPFirstName();
					if( patient.getPMiddleName()!= null)
						patientName += " "+ patient.getPMiddleName();
					if( patient.getPLastName()!= null)
						patientName += " "+ patient.getPLastName();
					map.put("patientName", patientName);
					map.put("serviceNo", patient.getServiceNo());

					if (patient.getRank() != null) {
						map.put("rank", patient.getRank().getRankName());
					} else {
						map.put("rank", "-");
					}

					if (patient.getRelation() != null) {
						map.put("relation", patient.getRelation()
								.getRelationName());
					} else {
						map.put("relation", "-");
					}
					if (patient.getSex() != null) {
						map.put("sex", patient.getSex()
								.getAdministrativeSexName());
					} else {
						map.put("sex", "-");
					}
					String servicePersonName = "";
					servicePersonName = patient.getSFirstName();
					if( patient.getSMiddleName()!= null)
						servicePersonName += " "+ patient.getSMiddleName();
					if( patient.getSLastName()!= null)
						servicePersonName += " "+ patient.getSLastName();
					
					map.put("servicePersonName", servicePersonName);
					if (patient.getUnit() != null) {
						map.put("unit", patient.getUnit().getUnitName());
					} else {
						map.put("unit", "-");
					}
					if (patient.getBloodGroup() != null) {
						map.put("bloodGroup", patient.getBloodGroup()
								.getBloodGroupName());
					} else {
						map.put("bloodGroup", "-");
					}
					if (patient.getAddress() != null) {
						map.put("address", patient.getAddress());
					} else {
						map.put("address", "-");
					}

				}
				SimpleDateFormat formatOut1 = new SimpleDateFormat("dd-MM-yyyy");
				SimpleDateFormat formatIn1 = new SimpleDateFormat("yyyy-MM-dd");
				for (Inpatient inpatient : inpatientList) {
					try {
						if (inpatient.getDateOfAddmission() != null)
							map.put("doa", formatOut1.format(formatIn1
									.parse(inpatient.getDateOfAddmission()
											.toString())));
						else
							map.put("doa", "-");
					} catch (ParseException e2) {
						e2.printStackTrace();
					}

					try {
						if (inpatient.getDischargeDate() != null)
							map.put("dod", formatOut1.format(formatIn1
									.parse(inpatient.getDischargeDate()
											.toString())));
						// map.put("dod",
						// inpatient.getDischargeDate().toString());
						else
							map.put("dod", "-");

					} catch (ParseException e2) {
						e2.printStackTrace();
					}

					map.put("age", inpatient.getAge());
				}
			}
			} 
		catch (HibernateException e) {
			e.printStackTrace();
		}
		Connection con = session.connection();
		map.put("conn", con);
		map.put("dischargeSummaryReportDetailsExist", Boolean
				.valueOf(dischargeSummaryReportDetailsExist));
		map.put("casetype", casetype);
		return map;
	
	}
	@Override
	public Map<String, Object> showPatientPrevoiusPrescriptionRepeat(
			Map<String, Object> mapForDS) {
		Session session = (Session) getSession();
		List<Visit> patientVisitList = new ArrayList<Visit>();
		List<PatientPrescriptionHeader> patientPrescriptionHeaderList = new ArrayList<PatientPrescriptionHeader>();
		List<PatientPrescriptionDetails> patientPrescriptionList = new ArrayList<PatientPrescriptionDetails>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();

		@SuppressWarnings("unused")
		int visitId = (Integer) mapForDS.get("visitId");
/*		int hinId = (Integer) mapForDS.get("hinId");*/

		try {
			if (visitId > 0) {
				/*patientPrescriptionHeaderList = session.createCriteria(
						PatientPrescriptionHeader.class).createAlias("Visit",
						"visit").add(Restrictions.eq("visit.Id", visitId))
						.list();
				if (patientPrescriptionHeaderList.size() > 0) {
					PatientPrescriptionHeader patientPrescriptionHeader = (PatientPrescriptionHeader) patientPrescriptionHeaderList
							.get(0);

					int prescriptionId = patientPrescriptionHeader.getId();
					patientPrescriptionList = session.createCriteria(
							PatientPrescriptionDetails.class).createAlias(
							"Prescription", "prescription").add(
							Restrictions.eq("prescription.Id", prescriptionId))
							.list();
				}*/
				patientPrescriptionList=getHibernateTemplate().find("select ppd from  jkt.hms.masters.business.PatientPrescriptionDetails ppd join ppd.Prescription pph where pph.Visit.Id="+visitId);
			}
			frequencyList = session.createCriteria(MasFrequency.class).add(
					Restrictions.eq("Status", "y")).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientPrescriptionList", patientPrescriptionList);
		map.put("frequencyList", frequencyList);

		return map;
	}

	@Override
	public Map<String, Object> showPatientPrevoiusInvestigationNew(
			Map<String, Object> mapForDS) {

		Session session = (Session) getSession();
		List<Visit> patientVisitList = new ArrayList<Visit>();
		List<PatientInvestigationHeader> patientInvestigationHeaderList = new ArrayList<PatientInvestigationHeader>();
		List<PatientInvestigationDetails> patientInvestigationList = new ArrayList<PatientInvestigationDetails>();
		Map<String, Object> map = new HashMap<String, Object>();

		@SuppressWarnings("unused")
		int visitNo = (Integer) mapForDS.get("visitNo");
		int hinId = (Integer) mapForDS.get("hinId");
		int investigation_header_id=0;
		if(mapForDS.get("investigation_header_id")!=null){
			investigation_header_id = (Integer) mapForDS.get("investigation_header_id");
		}
		List<Object> resultList = new ArrayList<Object>();
		try {
			if (investigation_header_id > 0) {
				patientInvestigationHeaderList = session.createCriteria(
						PatientInvestigationHeader.class).add(Restrictions.idEq(investigation_header_id))
						.list();
				patientInvestigationList=getHibernateTemplate().find("select pid from jkt.hms.masters.business.PatientInvestigationDetails as pid join pid.InvestigationHeader as pih  where pih.Id="+investigation_header_id);
				resultList	=getHibernateTemplate().find("select dreh,dsch,visit from DgResultEntryHeader as dreh join dreh.SampleCollectionHeader as dsch join dsch.Order ord join ord.Visit as visit join dsch.Hin  as hin where visit.VisitNo='"+visitNo+"' and hin.Id="+hinId);
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("resultList", resultList);
		map.put("patientInvestigationList", patientInvestigationList);
		map.put("patientInvestigationHeaderList", patientInvestigationHeaderList);
		return map;
	
	}

	public Map<String, Object> getHospitalParameterDetails(int hospitalId) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasHospital> hospitalList = new ArrayList<MasHospital>();
		try {
			hospitalList = session.createCriteria(MasHospital.class).add(
					Restrictions.eq("Id", hospitalId)).list();
			map.put("hospitalList", hospitalList);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}	
	@Override
	public Map<String, Object> getListForDisease(Map<String, Object> dataMap) {
			Map<String, Object> map = new HashMap<String, Object>();
			List<MasIcd> itemList = new ArrayList<MasIcd>();
			Session session = (Session) getSession();
			
			try {
				String str = (String) dataMap.get("autoHint") + "%";
				
				Criteria c = session.createCriteria(MasIcd.class)
						.add(Restrictions.like("IcdName", str))
						.add(Restrictions.eq("Status","y"));

				c.setFirstResult(0);
				c.setMaxResults(10);
				itemList = c.list();

			} catch (Exception e) {
				e.printStackTrace();
			}
			map.put("itemList", itemList);
			/*map.put("objectList", objectList);*/
			return map;

		}

	public Map<String, Object> getDiseaseId(String diseaseWise) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasIcd> itemList = new ArrayList<MasIcd>();
		int icd_id2=0;
		Session session = (Session) getSession();
		try{
			itemList= session.createCriteria(MasIcd.class).add(Restrictions.like("IcdName",diseaseWise)).list();
			
			if(itemList.size()>0){
			 MasIcd masIcd = new MasIcd() ;
			 masIcd=itemList.get(0);
			 icd_id2=masIcd.getId();
			 map.put("icd_id2",icd_id2);	
			}
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@Override
	public Map<String, Object> showDiseaseWisePatient(
			Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Object> patientList=new ArrayList<Object>();
		List<Object> icdList=new ArrayList<Object>();
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Session session = (Session) getSession();
		String icdNameForSearch="";
		int icdIdForSearch=0;
		String icdName1="";
		String icdName2="";
		int hospitalId=0;
		String toDate="";
		String fromDate="";
		int summary=0;
		if (dataMap.get("icdNameForSearch") != null){
			icdNameForSearch =(String)dataMap.get("icdNameForSearch");
			
		}
		if (dataMap.get("icdName1") != null){
			icdName1 =(String)dataMap.get("icdName1");
		}
		if (dataMap.get("icdName2") != null){
			icdName2 =(String)dataMap.get("icdName2");
		}
		if (dataMap.get("hospitalId") != null){
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("toDate") != null){
			toDate =(String)dataMap.get("toDate");
		}
		if (dataMap.get("fromDate") != null){
			fromDate =(String)dataMap.get("fromDate");
		}
		if (dataMap.get("summary") != null){
			summary = Integer.parseInt("" + dataMap.get("summary"));
		}
		try
		{
			String sql="";
			if(icdNameForSearch!=""){
				icdIdForSearch=Integer.parseInt(icdNameForSearch);
				sql=" and icd.Id="+icdIdForSearch;
				/*List<MasIcd> masIcdList=new ArrayList<MasIcd>();
				masIcdList=hbt.find("from jkt.hms.masters.business.MasIcd as icd where icd.IcdName="+icdNameForSearch+"");
				if(masIcdList.size()>0){
					int icdId=0;
					for (MasIcd masIcd : masIcdList) {
						icdId=masIcd.getId();
					}
					
				}*/
			}else{
				if(icdName1=="" && icdName2!=""){
					sql=" and icd.IcdName like '%"+icdName2+"%' ";
				}else if(icdName1!="" && icdName2==""){
					sql=" and icd.IcdName like '%"+icdName1+"%' ";			
				}else if(icdName1!="" && icdName2!=""){
					sql=" and icd.IcdName between '"+icdName1+"' and '"+icdName2+ "' ";
				}
			}
			SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
			//summary==1 Summary
			if(summary==1){
				icdList=hbt.find("select icd.Id,icd.IcdName from jkt.hms.masters.business.DischargeIcdCode  as dic join dic.Icd as icd join dic.Hin as hin join hin.Hospital as hosp join dic.Visit as visit where hosp.Id="+hospitalId +" and dic.AddEditDate between '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(fromDate))+"' and  '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(toDate))+"'  "+sql +" group by icd.Id,icd.IcdName order by icd.IcdName");
				patientList=hbt.find("select icd.Id,icd.IcdName,hin.Id,hin.PFirstName,hin.PMiddleName,hin.PLastName from jkt.hms.masters.business.DischargeIcdCode  as dic join dic.Icd as icd join dic.Hin as hin join hin.Hospital as hosp join dic.Visit as visit where hosp.Id="+hospitalId +" and dic.AddEditDate between '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(fromDate))+"' and  '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(toDate))+"'  "+sql +" group by icd.Id,icd.IcdName,icd.Id,icd.IcdName,hin.Id,hin.PFirstName,hin.PMiddleName,hin.PLastName order by icd.Id");
			}else if (summary==2) {
				//icdList=hbt.find("select count(icd.Id),icd.IcdName,icd.Id from jkt.hms.masters.business.DischargeIcdCode  as dic join dic.Icd as icd join dic.Hin as hin join hin.Hospital as hosp join dic.Visit as visit where hosp.Id="+hospitalId +" and dic.AddEditDate between '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(fromDate))+"' and  '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(toDate))+"'  "+sql+" group by icd.Id,icd.IcdName order by icd.IcdName");
				String sqlStr2="";
				sqlStr2="select count(masicd1.icd_id) as count_icd, masicd1.icd_name as icd_name, masicd1.icd_id as icd_id "+ 
				" from discharge_icd_code discharge inner join mas_icd masicd1 on discharge.icd_id=masicd1.icd_id "+ 
				" inner join patient patient on discharge.hin_id=patient.hin_id "+ 
				" inner join mas_hospital hospital on patient.hospital_id=hospital.hospital_id "+ 
				" inner join visit visit on discharge.visit_id=visit.visit_id "+
				" where hospital.hospital_id="+hospitalId+" and discharge.add_edit_date between '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(fromDate))+"' and  '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(toDate))+"'  "+sql +"  group by masicd1.icd_id , masicd1.icd_name order by count_icd desc";
				icdList=session.createSQLQuery(sqlStr2).list();
			}else if (summary==3) {
				icdList=hbt.find("select icd.Id,icd.IcdName from jkt.hms.masters.business.DischargeIcdCode  as dic join dic.Icd as icd join dic.Hin as hin join hin.Hospital as hosp join dic.Visit as visit where hosp.Id="+hospitalId +" and dic.AddEditDate between '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(fromDate))+"' and  '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(toDate))+"'  "+sql +" group by icd.Id,icd.IcdName order by icd.IcdName");
				patientList=hbt.find("select icd.Id,icd.IcdName,hin.Id,hin.PFirstName,hin.PMiddleName,hin.PLastName from jkt.hms.masters.business.DischargeIcdCode  as dic join dic.Icd as icd join dic.Hin as hin join hin.Hospital as hosp join dic.Visit as visit where hosp.Id="+hospitalId +" and dic.AddEditDate between '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(fromDate))+"' and  '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(toDate))+"'  "+sql +" order by icd.Id");
			}
			map.put("icdList", icdList);
			map.put("patientList", patientList);
		}catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}
	
	public Map<String, Object> exportDiseaseWisePatient(
			Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Object> patientList=new ArrayList<Object>();
		List<Object> icdList=new ArrayList<Object>();
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		
		String icdName1="";
		String icdName2="";
		int hospitalId=0;
		String toDate="";
		String fromDate="";
		int summary=0;
		if (dataMap.get("icdName1") != null){
			icdName1 =(String)dataMap.get("icdName1");
		}
		if (dataMap.get("icdName2") != null){
			icdName2 =(String)dataMap.get("icdName2");
		}
		if (dataMap.get("hospitalId") != null){
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("toDate") != null){
			toDate =(String)dataMap.get("toDate");
		}
		if (dataMap.get("fromDate") != null){
			fromDate =(String)dataMap.get("fromDate");
		}
		if (dataMap.get("summary") != null){
			summary = Integer.parseInt("" + dataMap.get("summary"));
		}
		try
		{
			String sql="";
				if(icdName1=="" && icdName2!=""){
					sql=" and icd.IcdName like '%"+icdName2+"%' ";
				}else if(icdName1!="" && icdName2==""){
					sql=" and icd.IcdName like '%"+icdName1+"%' ";			
				}else if(icdName1!="" && icdName2!=""){
					sql=" and icd.IcdName between '"+icdName1+"' and '"+icdName2+ "' ";
				}
			SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
			//summary==1 Summary
			if(summary==1){
				icdList=hbt.find("select icd.Id,icd.IcdName from jkt.hms.masters.business.DischargeIcdCode  as dic join dic.Icd as icd join dic.Hin as hin join hin.Hospital as hosp join dic.Visit as visit where hosp.Id="+hospitalId +" and dic.AddEditDate between '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(fromDate))+"' and  '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(toDate))+"'  "+sql +" group by icd.Id,icd.IcdName order by icd.IcdName");
				patientList=hbt.find("select icd.Id,icd.IcdName,hin.Id,hin.PFirstName,hin.PMiddleName,hin.PLastName from jkt.hms.masters.business.DischargeIcdCode  as dic join dic.Icd as icd join dic.Hin as hin join hin.Hospital as hosp join dic.Visit as visit where hosp.Id="+hospitalId +" and dic.AddEditDate between '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(fromDate))+"' and  '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(toDate))+"'  "+sql +" group by icd.Id,icd.IcdName,icd.Id,icd.IcdName,hin.Id,hin.PFirstName,hin.PMiddleName,hin.PLastName order by icd.Id");
			}else if (summary==2) {
				icdList=hbt.find("select count(icd.Id),icd.IcdName,icd.Id from jkt.hms.masters.business.DischargeIcdCode  as dic join dic.Icd as icd join dic.Hin as hin join hin.Hospital as hosp join dic.Visit as visit where hosp.Id="+hospitalId +" and dic.AddEditDate between '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(fromDate))+"' and  '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(toDate))+"'  "+sql+" group by icd.Id,icd.IcdName order by icd.IcdName");
			}
			map.put("icdList", icdList);
			map.put("patientList", patientList);
		}catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}
	public static void main(String[] args) {
		SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
		try {
			//System.out.println("date0000--"+);
			Date date =HMSUtil.convertStringTypeDateToDateType("10/10/2010");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	@Override
	public Map<String, Object> calculateIdealWeight(Map<String, Object> dataMap) {
		Map<String,Object> map = new HashMap<String, Object>();
		List<MasIdealWeight> idealWeightList = new ArrayList<MasIdealWeight>();
		Session session = (Session)getSession();
		int height =0;
		String age = "";
		int genderId = 0;
		if(dataMap.get("height") != null){
			height = (Integer)(dataMap.get("height"));
		}
		if(dataMap.get("genderId") != null){
			genderId = (Integer)(dataMap.get("genderId"));
		}
		if(dataMap.get("age") != null){
			age = (String)(dataMap.get("age"));
		}
		String ageString = "";
		ageString = age.substring(1, 3);
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		idealWeightList = hbt.find("from MasIdealWeight as miw where miw.Gender.Id="+genderId+" and miw.Height="+height+" and miw.FromAge<="+ageString+" and miw.ToAge>="+ageString);
			/*idealWeightList =session.createCriteria(MasIdealWeight.class).add(Restrictions.eq("Gender.Id", genderId))
							.add(Restrictions.eq("Height", height)).add(Restrictions.le("FromAge", ageString)).add(Restrictions.ge("ToAge", ageString)).list();*/
			map.put("idealWeightList", idealWeightList);
		
		return map;
	}

	@Override
	public Map<String, Object> getPatientDetailsFordirectVisitEntry(
			String serviceNo) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<Object[]> hinNoList = new ArrayList<Object[]>();
		try {
			if (!serviceNo.equals("")) {
				/*hinNoList = session.createCriteria(Patient.class).add(
						Restrictions.eq("ServiceNo", serviceNo)).add(Restrictions.eq("PatientStatus", "Out Patient")).list();*/
				hinNoList = session.createCriteria(Patient.class).createAlias("Relation", "rel").add(Restrictions.eq("ServiceNo", serviceNo)).add(Restrictions.eq("PatientStatus","Out Patient"))
				.setProjection(Projections.distinct(Projections.projectionList().add(Projections.property("Id")).add(Projections.property("HinNo")).add(Projections.property("PFirstName")).add(Projections.property("PMiddleName")).add(Projections.property("PLastName"))
						.add(Projections.property("rel.RelationName")))).list();
			}
			map.put("hinNoList", hinNoList);
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return map;
	}

	@Override
	public Map<String, Object> getPatientData(Box box) {
		Map<String, Object>map = new HashMap<String, Object>();
		List<Patient> patientList = new ArrayList<Patient>();
		List<Object[]> patientPresriptionDetailList = new ArrayList<Object[]>();
		Properties properties = new Properties();
		URL resourcePath = Thread.currentThread().getContextClassLoader()
				.getResource("adt.properties");
		try {
			properties.load(resourcePath.openStream());
		} catch (Exception e) {
			e.printStackTrace();
		}
		String empCategoryCodeForDoctor = properties.getProperty("empCategoryCodeForDoctor");
		
	
		Session session = (Session)getSession();
		patientList = session.createCriteria(Patient.class).add(Restrictions.idEq(box.getInt("hinId"))).list();
		patientPresriptionDetailList = session.createCriteria(PatientPrescriptionDetails.class).add(Restrictions.eq("Ct", "yes"))
										.createAlias("Prescription", "prs").createAlias("prs.Hin", "hin").add(Restrictions.eq("hin.Id", box.getInt("hinId")))
										.createAlias("prs.Visit", "visit").createAlias("visit.Doctor", "doctor").createAlias("doctor.Rank", "dRank")
										.createAlias("hin.Rank", "rank").createAlias("Item", "item")
										.createAlias("Frequency", "frq")
										.setProjection(Projections.distinct(Projections.projectionList()
												.add(Projections.property("hin.Id"))
												.add(Projections.property("item.Nomenclature"))
												.add(Projections.property("doctor.FirstName"))
												.add(Projections.property("doctor.MiddleName"))
												.add(Projections.property("doctor.LastName"))
												.add(Projections.property("Dosage"))
												.add(Projections.property("NoOfDays"))
												.add(Projections.property("frq.FrequencyName"))
												.add(Projections.property("doctor.Id"))
												.add(Projections.property("item.Id"))
												.add(Projections.property("rank.RankName"))
												.add(Projections.property("dRank.RankName"))
												.add(Projections.property("prs.Remarks"))
												.add(Projections.property("frq.Id"))
										)).list();
		map.put("patientList", patientList);
		map.put("patientPresriptionDetailList", patientPresriptionDetailList);
		return map;
	}

	@Override
	public Map<String, Object> showCtJsp(Box box) {
		Map<String, Object>map = new HashMap<String, Object>();
		return map;
	}

	@Override
	public Map<String, Object> saveCtDetails(Box box) {
		Map<String, Object>map = new HashMap<String, Object>();
		Transaction tx = null;
		boolean flag = false;
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Session session = (Session)getSession();
		map.put("userName", box.getString("userName"));
		map.put("userId", box.getInt("userId"));
		map.put("hospitalId", box.getInt("hospitalId"));
		try {
			tx = session.beginTransaction();
			int ctCount = box.getInt("ctCount");
			PatientPrescriptionHeader patientPrescriptionHeader = new PatientPrescriptionHeader();
			Patient patient = new Patient();
			patient.setId(box.getInt("hinId"));
			patientPrescriptionHeader.setHin(patient);
			MasDepartment masDepartment= new MasDepartment();
			masDepartment.setId(box.getInt("departmentId"));
			patientPrescriptionHeader.setDepartment(masDepartment);
			MasHospital masHospital = new MasHospital();
			masHospital.setId(box.getInt("hospitalId"));
			patientPrescriptionHeader.setHospital(masHospital);
			patientPrescriptionHeader.setStatus("p");
			patientPrescriptionHeader.setPrescriptionDate(HMSUtil.convertStringTypeDateToDateType(box.getString(LAST_CHANGED_DATE)));
			patientPrescriptionHeader.setPrescriptionTime(box.getString(LAST_CHANGED_TIME));
			int prescriptionNo=getTransactionSequenceNoForPrescriptionNo(map);
			patientPrescriptionHeader.setPrescriptionNo(prescriptionNo);
			MasEmployee masEmployee = new MasEmployee();
			masEmployee.setId(box.getInt("doctorId"));
			patientPrescriptionHeader.setEmp(masEmployee);
			patientPrescriptionHeader.setRemarks(box.getString("remarks"));
			hbt.save(patientPrescriptionHeader);
			for (int j = 1; j <= ctCount; j++) {
				PatientPrescriptionDetails patientPrescriptionDetails = new PatientPrescriptionDetails();
				 if(!box.getString("ctCheck"+j).equals("")){
					 if(box.getInt("itemId"+j) != 0){
						 MasStoreItem masItem = new MasStoreItem();
						 masItem.setId(box.getInt("itemId"+j));
						 patientPrescriptionDetails.setItem(masItem);
					 }
					 if(!box.getString("dosage"+j).equals("")){
						 patientPrescriptionDetails.setDosage(box.getString("dosage"+j));
					 }
					 int frequencyId = 0;
					 if(box.getInt("frequencyId"+j) != 0){
						MasFrequency masFrequency = new MasFrequency();
						 frequencyId = box.getInt("frequencyId"+j);
						 masFrequency.setId(box.getInt("frequencyId"+j));
						 patientPrescriptionDetails.setFrequency(masFrequency);
					 }
					 if(box.getInt("noofDays"+j) != 0){
						 int noOfDays = box.getInt("noofDays"+j);
					    patientPrescriptionDetails.setNoOfDays(box.getInt("noofDays"+j));
					    int total = noOfDays * frequencyId;
						patientPrescriptionDetails.setTotal(total);
					 }
					 int qty = 0;
					 if(box.getInt("quantity"+j) != 0){
						 patientPrescriptionDetails.setQtyIssued(box.getInt("quantity"+j));
					 }
					 patientPrescriptionDetails.setPrescription(patientPrescriptionHeader);
					 hbt.save(patientPrescriptionDetails);
				 }
				
			}
			
			flag = true;
			tx.commit();
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		map.put("flag", flag);
		return map;
	}

	@Override
	public Map<String, Object> displayAU(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem>itemMasterList = new ArrayList<MasStoreItem>();
		//List<Object[]>itemBatchStockList = new ArrayList<Object[]>();
		String pvmsNo ="";
		int hospitalId = 0;
		if(dataMap.get("hospitalId") != null){
			hospitalId = (Integer)dataMap.get("hospitalId");
		}
		if(dataMap.get("pvmsNo") != null){
			pvmsNo = (String)dataMap.get("pvmsNo");
		}
		Session session = (Session)getSession();
		itemMasterList = session.createCriteria(MasStoreItem.class).add(Restrictions.eq("PvmsNo", pvmsNo))
						//	.add(Restrictions.eq("Hospital.Id", 0))
							.list();
		int itemId = 0;
		if(itemMasterList.size()>0){
			MasStoreItem storeItem = itemMasterList.get(0);
			itemId = storeItem.getId();
		}
		System.out.println("itemId==="+itemId);
		String str = "select sum(inp.closing_stock) from store_item_batch_stock inp  where item_id = "
			+ itemId + " and hospital_id = "+hospitalId+" and department_id in(35,24)";
		
		List<BigDecimal> itemBatchStockList = session.createSQLQuery(str).list();
		System.out.println("itemBatchStockList==="+itemBatchStockList.size());
		if(itemBatchStockList != null){
		for (int i=0;i<itemBatchStockList.size();i++) {
			BigDecimal closingstock = itemBatchStockList.get(0);
			map.put("closingstock", closingstock);
			System.out.println("closingstock===="+closingstock);
		 }
		}
		
		map.put("itemMasterList", itemMasterList);
		return map;
	}
	@Override
	public Map<String, Object> checkDuplicateForOtherMedicine(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem>itemMasterList = new ArrayList<MasStoreItem>();
		int hospitalId = 0;
		if(dataMap.get("hospitalId") != null){
			hospitalId = (Integer)dataMap.get("hospitalId");
		}
		String nomenclature ="";
		if(dataMap.get("pvmsNo") != null){
			nomenclature = (String)dataMap.get("pvmsNo");
		}
		Session session = (Session)getSession();
		itemMasterList = session.createCriteria(MasStoreItem.class).add(Restrictions.eq("Nomenclature", nomenclature))
								.add(Restrictions.eq("Hospital.Id", hospitalId)).list();
		//int itemId = 0;
		//if(itemMasterList.size()>0){
			//MasStoreItem storeItem = itemMasterList.get(0);
			//itemId = storeItem.getId();
		//}
		
		
		
		map.put("itemMasterList", itemMasterList);
		return map;
	}

	@Override
	public Map<String, Object> autoCompleteForDiagnosis(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		//List<MasSystemDiagnosis> systemDiagnosisList = new ArrayList<MasSystemDiagnosis>();
		List<MasIcd> systemDiagnosisList = new ArrayList<MasIcd>();
		try {
			String diagnosisName = "%" + dataMap.get("autoHint") + "%";
		//	String diagnosisName = dataMap.get("autoHint") + "%";
    		/*systemDiagnosisList  = session.createCriteria(MasSystemDiagnosis.class)
			.add(Restrictions.like("SystemDiagnosisName", diagnosisName).ignoreCase()).list();*/
			systemDiagnosisList  = session.createCriteria(MasIcd.class)
			.add(Restrictions.like("IcdName", diagnosisName).ignoreCase()).list();
			
			map.put("systemDiagnosisList", systemDiagnosisList);
			} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@Override
	public Map<String, Object> getvisitDetails(Map<String, Object> mapfordata) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Visit> visitList = new ArrayList<Visit>();
		List<PatientPrescriptionHeader> patientPrescriptionHeaderList = new ArrayList<PatientPrescriptionHeader>();

	    Criteria crit = null;
	    String serviceNo = null;
        if(mapfordata.get("serviceNo") !=null){
        	serviceNo = (String)mapfordata.get("serviceNo");
        }
        Session session = (Session)getSession();
        patientPrescriptionHeaderList = session.createCriteria(PatientPrescriptionHeader.class).createAlias("Hin", "hin").add(Restrictions.eq("hin.ServiceNo", serviceNo)).add(Restrictions.eq("Status","p")).list();
	    visitList = session.createCriteria(Visit.class).createAlias("Hin", "hin").add(Restrictions.eq("hin.ServiceNo", serviceNo)).list();
        map.put("patientPrescriptionHeaderList", patientPrescriptionHeaderList);
        map.put("visitList", visitList);	
		return map;
	}

	@Override
	public Map<String, Object> showOPDInvestigationRecordsForOpd(
			String investigationTemplateId) {
		//Session session = (Session) getSession();
		//List<OpdTemplateInvestigation> investigationTemplateList = new ArrayList<OpdTemplateInvestigation>();
		List<MasChargeCode> masChargeCodeList = new ArrayList<MasChargeCode>();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			// patientList=session.createQuery("select v from Visit as v where
			// v.VisitDate="+date ).list();
			int[] invArray = null;
			/*
			investigationTemplateList = session.createCriteria(
					OpdTemplateInvestigation.class).createAlias("Template",
					"template").add(
					Restrictions.in("template.Id", invArray)).list();
			*/
			//investigationTemplateList =getHibernateTemplate().find("select oti from jkt.hms.masters.business.OpdTemplateInvestigation oti join oti.Template as templet where templet.Id in("+investigationId+")");
			if(!investigationTemplateId.equals("")){
			masChargeCodeList =getHibernateTemplate().find("select cc from jkt.hms.masters.business.OpdTemplateInvestigation oti join oti.Template as templet join oti.ChargeCode as cc where templet.Id in("+investigationTemplateId+")");
			
			System.out.println("masChargeCodeList==="+masChargeCodeList.size());
			Set<MasChargeCode> masChargeCodeSet = new HashSet<MasChargeCode>();
			masChargeCodeSet.addAll(masChargeCodeList);
			//System.out.println("masChargeCodeSet.size()-->"+masChargeCodeSet.size());
			map.put("masChargeCodeSet", masChargeCodeSet);
		 }
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		return map;
	}

	@Override
	public Map<String, Object> showSearchForWaitingPatientListJsp(
			Map<String, Object> mapForDS) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Map<String, Object> showRelatedMedicineNames(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session)getSession();
		String medicineName= box.getString("otherDrug");
		int hospitalId = box.getInt("hospitalId");
		List<MasStoreItem> pvmsList = new ArrayList<MasStoreItem>();
		List<MasStoreItem> nivList = new ArrayList<MasStoreItem>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		
		pvmsList = session.createCriteria(MasStoreItem.class).add(Restrictions.like("Nomenclature", "%"+medicineName+"%").ignoreCase()).list();
		nivList = session.createCriteria(MasStoreItem.class).add(Restrictions.like("Nomenclature", "%"+medicineName+"%").ignoreCase()).add(Restrictions.eq("Hospital.Id", hospitalId)).list();
		itemList.addAll(pvmsList);
		itemList.addAll(nivList);
		map.put("itemList", itemList);
		return map;
	}

	

	

	

	

	
	
	
	
}
