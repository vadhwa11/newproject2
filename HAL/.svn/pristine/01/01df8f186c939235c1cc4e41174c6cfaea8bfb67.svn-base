/**  
showPatientPrescriptionReportJsp * Copyright 2008 JK Technosoft Ltd. All rights reserved.
 * Use is subject to license terms.
 * Class PurchaseOrderController.java – 
 * Tables Used: store_po_detail, store_po_header 
 * Purpose of the class - For Local Purchase (LP) of PVMS and NIV Items 
 * @author  Deepti Tevatia 
 * Create Date: 4th Feb,2008   
 * Revision Date:      		Revision By: 
 * @version 1.0  
 * @see PurchaseOrderHandlerService.java, PurchaseOrderHandlerServiceImpl.java, PurchaseOrderDataService.java, PurchaseOrderDataServiceImpl.java
 **/
package jkt.hms.opd.controller;

import static jkt.hms.util.RequestConstants.*;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;

import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import javazoom.upload.MultipartFormDataRequest;
import javazoom.upload.UploadException;
import javazoom.upload.UploadFile;
import jkt.hms.adt.handler.RegistrationHandlerService;
import jkt.hms.appointment.handler.AppointmentHandlerService;
import jkt.hms.lab.handler.LabHandlerService;
import jkt.hms.masters.business.DgMasInvestigation;
import jkt.hms.masters.business.DgOrderhd;
import jkt.hms.masters.business.DischargeIcdCode;
import jkt.hms.masters.business.Inpatient;
import jkt.hms.masters.business.MasBloodGroup;
import jkt.hms.masters.business.MasDepartment;
import jkt.hms.masters.business.MasEmployee;
import jkt.hms.masters.business.MasEmployeeDependent;
import jkt.hms.masters.business.MasFrequency;
import jkt.hms.masters.business.MasHospital;
import jkt.hms.masters.business.MasIdealWeight;
import jkt.hms.masters.business.MasItemClass;
import jkt.hms.masters.business.MasStoreItem;
import jkt.hms.masters.business.ObgDetails;
import jkt.hms.masters.business.OpdAntenatalCard;
import jkt.hms.masters.business.OpdCardiologyDepartmentDetails;
import jkt.hms.masters.business.OpdCaseSheet;
import jkt.hms.masters.business.OpdEnt;
import jkt.hms.masters.business.OpdGastroEnterologyColonoscopy;
import jkt.hms.masters.business.OpdGastroEnterologyEndoscopy;
import jkt.hms.masters.business.OpdGravidagramGestationalDiabitiesOne;
import jkt.hms.masters.business.OpdGravidagramGestationalDiabitiesTwo;
import jkt.hms.masters.business.OpdGravidagramHtn;
import jkt.hms.masters.business.OpdOphthalmology;
import jkt.hms.masters.business.OpdPatientDetails;
import jkt.hms.masters.business.OpdPatientHistory;
import jkt.hms.masters.business.OpdTemplate;
import jkt.hms.masters.business.OpdTemplateDepartmentWise;
import jkt.hms.masters.business.OpdUrology;
import jkt.hms.masters.business.Patient;
import jkt.hms.masters.business.PatientAllergicDrugsDt;
import jkt.hms.masters.business.PatientAllergicDrugsHd;
import jkt.hms.masters.business.PatientInvestigationDetails;
import jkt.hms.masters.business.PatientInvestigationHeader;
import jkt.hms.masters.business.PatientPrescriptionDetails;
import jkt.hms.masters.business.PatientPrescriptionHeader;
import jkt.hms.masters.business.PhysiotherapyVisitDetails;
import jkt.hms.masters.business.Users;
import jkt.hms.masters.business.Visit;
import jkt.hms.masters.handler.CommonMasterHandlerService;
import jkt.hms.opd.handler.OPDHandlerService;
import jkt.hms.pacs.controller.PacsPatient;
import jkt.hms.pacs.dataservice.PacsHL7Service;
import jkt.hms.util.Box;
import jkt.hms.util.HMSUtil;
import jkt.hms.util.RequestConstants;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.util.JRLoader;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.multiaction.MultiActionController;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

public class OPDController extends MultiActionController{
	OPDHandlerService opdHandlerService = null;
	LabHandlerService labHandlerService = null;
	CommonMasterHandlerService commonMasterHandlerService = null;
	AppointmentHandlerService appointmentHandlerService = null;

	HttpSession session = null;
	Map<String, Object> map = new HashMap<String, Object>();
	String jsp = "";
	String title = "";
	String pojoPropertyName = "";
	String pojoPropertyCode = "";
	String pojoName = "";
	String userName = "";
	String currentDate = "";
	String currentTime = "";
	String message = "";
	String code = "";
	String name = "";
	String changedBy = "";
	String jspName = "";
	String url = "";
	private HashMap<String, Object> JSONROOT = new HashMap<String, Object>();

	// ----------------------------------methods added by
	// vikas--------------------------

	@SuppressWarnings("unchecked")
	public ModelAndView showWaitingPatientListJsp(HttpServletRequest request,
			HttpServletResponse response) {
		int deptId = 0;
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		@SuppressWarnings("unused")
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		mapForDS.put("hospitalId", hospitalId);
		//int unitId = 0;
		//int relationId = 0;
		//int rankId = 0;
		String serviceNo = "";
		//int docId = 0;
		/*
		 * if(request.getParameter("rankId") != null){ rankId =
		 * Integer.parseInt(request.getParameter("rankId"));
		 * mapForDS.put("rankId", rankId); }
		 */
		/*
		 * if(request.getParameter("relationId") != null){ relationId =
		 * Integer.parseInt(request.getParameter("relationId"));
		 * mapForDS.put("relationId", relationId); }
		 */
	/*	if (request.getParameter("unitId") != null) {
			unitId = Integer.parseInt(request.getParameter("unitId"));
			mapForDS.put("unitId", unitId);
		}*/
		int docId=0;
		if (request.getParameter("doctorId") != null) {
			docId = Integer.parseInt(request.getParameter("doctorId"));
			mapForDS.put("empId", docId);
		}
		if (request.getParameter(SESSION_ID) != null) {
		
			mapForDS.put(SESSION_ID, Integer.parseInt(request.getParameter(SESSION_ID)));
		}
		if (docId == 0){
			docId = (Integer) session.getAttribute("empId");
			mapForDS.put("empId", docId);
			
		}
		if (request.getParameter("serviceNo") != null) {
			serviceNo = request.getParameter("serviceNo");
			mapForDS.put("serviceNo", serviceNo);
		}
		if (request.getParameter(PATIENT_NAME) != null) {
			mapForDS.put(PATIENT_NAME, request.getParameter(PATIENT_NAME));
		}
/*		if (request.getParameter("consultingDoc") != null) {
			int empId = Integer.parseInt(request.getParameter("consultingDoc"));
			// System.out.println("empId when selecting doctor name======" +
			// empId);
			mapForDS.put("empId", empId);
		} else {

			Users user = new Users();
			if (session.getAttribute("users") != null) {
				user = (Users) session.getAttribute("users");
			}
			mapForDS.put("empId", user.getEmployee().getId());

			
			 * if (session.getAttribute("empId") != null) { docId =
			 * (Integer)session.getAttribute("userId"); mapForDS.put("empId",
			 * docId);
			 * 
			 * }
			 

		}*/

		if (request.getParameter("deptId") != null) {
			deptId = Integer.parseInt(request.getParameter("deptId"));
			// session.setAttribute("deptId", deptId);
			mapForDS.put("deptId", deptId);
		} else {
			deptId = (Integer) session.getAttribute("deptId");
			mapForDS.put("deptId", deptId);
		}
		String title = request.getParameter("title");
		map = opdHandlerService.getWaitingPatientList(mapForDS);
		if (session.getAttribute("deptName") != null) {
			map.put("deptName", (String) session.getAttribute("deptName"));
		}
		map.put("docId", docId);
		/*List patientList = (List) map.get("patientList");
		map.put("patientList", patientList);*/ //commented unused code by Babita Dangwal on 21-09-2017
		jsp = OPD_WAITING_LIST_JSP;
		jsp += ".jsp";
		title = "Waiting Patient List";
		map.put("deptId", deptId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings("unused")
	public ModelAndView searchWaitingPatientListJsp(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		String serviceNo = "";
		String hinNo = "";
		String patientFName = "";
		String patientMName = "";
		String patientLName = "";
		String serviceTypeName = "";

		int deptId = (Integer) session.getAttribute("deptId");

		int hospitalId = (Integer) session.getAttribute("hospitalId");
		String date = request.getParameter("date");
		mapForDS.put("hospitalId", hospitalId);
		Date currentDate = HMSUtil.convertStringTypeDateToDateType(date);
		if (request.getParameter(HIN_NO) != null
				&& !(request.getParameter(HIN_NO).equals(""))) {
			hinNo = request.getParameter(HIN_NO);
			mapForDS.put("hinNo", hinNo);
		}
		if (request.getParameter(SERVICE_NO) != null
				&& !(request.getParameter(SERVICE_NO).equals(""))) {
			serviceNo = request.getParameter(SERVICE_NO);
			mapForDS.put("serviceNo", serviceNo);
		}
		if (request.getParameter(P_FIRST_NAME) != null
				&& !(request.getParameter(P_FIRST_NAME).equals(""))) {
			patientFName = request.getParameter(P_FIRST_NAME);
			mapForDS.put("patientFName", patientFName);
		}
		if (request.getParameter(P_MIDDLE_NAME) != null
				&& !(request.getParameter(P_MIDDLE_NAME).equals(""))) {
			patientMName = request.getParameter(P_MIDDLE_NAME);
			mapForDS.put("patientMName", patientMName);
		}
		if (request.getParameter(P_LAST_NAME) != null
				&& !(request.getParameter(P_LAST_NAME).equals(""))) {
			patientLName = request.getParameter(P_LAST_NAME);
			mapForDS.put("patientLName", patientLName);
		}
		if (request.getParameter(SERVICE_TYPE_NAME) != null
				&& !(request.getParameter(SERVICE_TYPE_NAME).equals(""))) {
			serviceTypeName = request.getParameter(SERVICE_TYPE_NAME);
			mapForDS.put("serviceTypeName", serviceTypeName);
		}
		mapForDS.put("deptId", deptId);
		mapForDS.put("currentDate", currentDate);
		map = opdHandlerService.searchWaitingPatientList(mapForDS);

		jsp = OPD_WAITING_LIST_JSP;
		jsp += ".jsp";
		title = "Waiting Patient List";

		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
		// return null;
	}

	public ModelAndView showSearchForWaitingPatientListJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		int unitId = 0;
		int relationId = 0;
		int rankId = 0;
		String serviceNo = "";
		int deptId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		if (request.getParameter("unitId") != null
				&& !(request.getParameter("unitId").equals(""))) {
			unitId = Integer.parseInt(request.getParameter(SERVICE_NO));
			mapForDS.put("unitId", unitId);
		}
		if (request.getParameter("rankId") != null
				&& !(request.getParameter("rankId").equals(""))) {
			unitId = Integer.parseInt(request.getParameter("rankId"));
			mapForDS.put("rankId", rankId);
		}
		if (request.getParameter("relationId") != null
				&& !(request.getParameter("relationId").equals(""))) {
			relationId = Integer.parseInt(request.getParameter("relationId"));
			mapForDS.put("relationId", relationId);
		}
		if (request.getParameter("serviceNo") != null
				&& !(request.getParameter("serviceNo").equals(""))) {
			serviceNo = request.getParameter("serviceNo");
			mapForDS.put("serviceNo", serviceNo);
		}
		mapForDS.put("hospitalId", hospitalId);
		map = opdHandlerService.showSearchForWaitingPatientListJsp(mapForDS);
		jsp = OPD_WAITING_LIST_JSP;
		jsp += ".jsp";
		title = "Waiting Patient List";

		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings({ "unused", "unchecked" })
	public ModelAndView showOPDMainJsp(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		MultipartFormDataRequest mrequest = null;
		int visitId = 0;
		int token = 0;

		int docId = 0;
		if (session.getAttribute("empId") != null) {
			docId = (Integer) session.getAttribute("empId");

		}

		if (request.getParameter("token") != null) {
			//token = Integer.parseInt(request.getParameter("token"));
			if(request.getParameter("token").replaceAll("[^0-9]", "").length()>0) 
			token= Integer.parseInt(request.getParameter("token").replaceAll("[^0-9]", ""));
			session.setAttribute("token", token);
		}
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		int empId = (Integer) session.getAttribute("userId");
		if (MultipartFormDataRequest.isMultipartFormData(request)) {
			try {
				mrequest = new MultipartFormDataRequest(request);
				visitId = Integer.parseInt(request.getParameter("visitId"));
			} catch (UploadException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
		} else {
			visitId = Integer.parseInt(request.getParameter("visitId"));
		}
		map = opdHandlerService.getPatientDetails(visitId);
		List<OpdPatientDetails> admittedVisit = new ArrayList<OpdPatientDetails>();
		int deptId = (Integer) session.getAttribute("deptId");
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		List<OpdPatientDetails> opdDetailListForFollowUp = new ArrayList<OpdPatientDetails>();
		List<OpdPatientHistory> opdHistoryDetailsListForFollowUp = new ArrayList<OpdPatientHistory>();
		List<PatientInvestigationHeader> patientInvestigationHeaderListForFollowUp = new ArrayList<PatientInvestigationHeader>();
		List<PatientPrescriptionHeader> patientPrescriptionHeaderList = new ArrayList<PatientPrescriptionHeader>();
		List<DischargeIcdCode> dischargeIcdCodeList = new ArrayList<DischargeIcdCode>();
		List<MasItemClass> masItemClassList = new ArrayList<MasItemClass>();
		OpdPatientDetails opdPatientDetails = null;
		List<MasEmployeeDependent> med = null;
		List<OpdPatientDetails> opdPDetailsListForEyeDeptFollowUp = null;
		List<ObgDetails> obgDetailsList = null; 
		List<MasBloodGroup> bloodGroupList  = null;
		List<OpdPatientDetails> LastVisitPatientDetails  = null;
		
		if (map.get("opdDetailListForFollowUp") != null) {
			opdDetailListForFollowUp = (List<OpdPatientDetails>) map
					.get("opdDetailListForFollowUp");
		}
		if (map.get("opdHistoryDetailsListForFollowUp") != null) {
			opdHistoryDetailsListForFollowUp = (List<OpdPatientHistory>) map
					.get("opdHistoryDetailsListForFollowUp");
		}
		if (map.get("patientInvestigationHeaderListForFollowUp") != null) {
			patientInvestigationHeaderListForFollowUp = (List<PatientInvestigationHeader>) map
					.get("patientInvestigationHeaderListForFollowUp");
		}
		if (map.get("patientPrescriptionHeaderList") != null) {
			patientPrescriptionHeaderList = (List<PatientPrescriptionHeader>) map
					.get("patientPrescriptionHeaderList");
		}
		if (map.get("dischargeIcdCodeList") != null) {
			dischargeIcdCodeList = (List<DischargeIcdCode>) map
					.get("dischargeIcdCodeList");
		}

		if (map.get("opdPatientDetails") != null) {
			opdPatientDetails = (OpdPatientDetails) map
					.get("opdPatientDetails");
		}
		if (map.get("admittedVisit") != null) {
			admittedVisit = (List<OpdPatientDetails>) map.get("admittedVisit");
		}
		if (map.get("masItemClassList") != null) {
			masItemClassList = (List<MasItemClass>) map.get("masItemClassList");
		}
		if (map.get("med") != null) {
			med = (List<MasEmployeeDependent>) map.get("med");
		}
		if (map.get("opdPDetailsListForEyeDeptFollowUp") != null) {
			opdPDetailsListForEyeDeptFollowUp = (List<OpdPatientDetails>) map.get("opdPDetailsListForEyeDeptFollowUp");
		}
		if (map.get("obgDetailsList") != null) {
			obgDetailsList = (List<ObgDetails>) map.get("obgDetailsList");
		}
		if (map.get("bloodGroupList") != null) {
			bloodGroupList  = (List<MasBloodGroup>) map.get("bloodGroupList");
		}
		
		if (map.get("LastVisitPatientDetails") != null) {
			LastVisitPatientDetails  = (List<OpdPatientDetails>) map.get("LastVisitPatientDetails");
		}
		
		// map = opdHandlerService.getPatientDetails(visitId);
		List patientDataList = (List) map.get("patientDataList");
		Visit visit = (Visit) patientDataList.get(0);
		int visitNo = visit.getVisitNo();
		int hinId = visit.getHin().getId();
		mapForDS.put("deptId", deptId);
		mapForDS.put("visitNo", visitNo);
		mapForDS.put("hinId", hinId);
		mapForDS.put("visitId", visitId);
		mapForDS.put("hospitalId", hospitalId);
		mapForDS.put("docId", docId);
		map = opdHandlerService.getOPDDetails(mapForDS);
		Map<String, Object> mapForToken = new HashMap<String, Object>();
		mapForToken.put("token", token);
		mapForToken.put("visitId", visitId);
		mapForToken.put("empId", empId);
		mapForToken.put("hospitalId", hospitalId);
		mapForToken = opdHandlerService.updateVistToken(mapForToken);
		map.put("patientDataList", patientDataList);
		map.put("opdDetailListForFollowUp", opdDetailListForFollowUp);
		map.put("opdHistoryDetailsListForFollowUp",
				opdHistoryDetailsListForFollowUp);
		map.put("patientInvestigationHeaderListForFollowUp",
				patientInvestigationHeaderListForFollowUp);
		map.put("patientPrescriptionHeaderList", patientPrescriptionHeaderList);
		map.put("dischargeIcdCodeList", dischargeIcdCodeList);
		map.put("opdPatientDetails", opdPatientDetails);
		map.put("admittedVisit", admittedVisit);
		map.put("masItemClassList", masItemClassList);
		map.put("med", med);
		map.put("opdPDetailsListForEyeDeptFollowUp", opdPDetailsListForEyeDeptFollowUp);
		map.put("obgDetailsList", obgDetailsList);
		map.put("bloodGroupList", bloodGroupList);
		map.put("LastVisitPatientDetails",LastVisitPatientDetails);
		
		
		jsp = OPD_MAIN_JSP;
		jsp += ".jsp";
		title = "Patient Details";
		map.put("visitId", visitId);
		map.put("deptId", deptId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);

	}

	@SuppressWarnings({ "unused", "unchecked" })
	public ModelAndView showOPDDentalJsp(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		MultipartFormDataRequest mrequest = null;
		int visitId = 0;
		int token = 0;

		int docId = 0;
		if (session.getAttribute("userId") != null) {
			docId = (Integer) session.getAttribute("empId");

		}

		if (request.getParameter("token") != null) {
			if(request.getParameter("token").replaceAll("[^0-9]", "").length()>0) 
				token= Integer.parseInt(request.getParameter("token").replaceAll("[^0-9]", ""));
			 session.setAttribute("token", token);
		}
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		int empId = (Integer) session.getAttribute("userId");
		if (MultipartFormDataRequest.isMultipartFormData(request)) {
			try {
				mrequest = new MultipartFormDataRequest(request);
				visitId = Integer.parseInt(request.getParameter("visitId"));
			} catch (UploadException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
		} else {
			visitId = Integer.parseInt(request.getParameter("visitId"));
		}
		map = opdHandlerService.getPatientDetails(visitId);
		boolean patientAdmitted = false;
		int deptId = (Integer) session.getAttribute("deptId");
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		List<OpdPatientDetails> opdDetailListForFollowUp = new ArrayList<OpdPatientDetails>();
		List<OpdPatientHistory> opdHistoryDetailsListForFollowUp = new ArrayList<OpdPatientHistory>();
		List<PatientInvestigationHeader> patientInvestigationHeaderListForFollowUp = new ArrayList<PatientInvestigationHeader>();
		List<PatientPrescriptionHeader> patientPrescriptionHeaderList = new ArrayList<PatientPrescriptionHeader>();
		List<DischargeIcdCode> dischargeIcdCodeList = new ArrayList<DischargeIcdCode>();
		OpdPatientDetails opdPatientDetails = null;
		List<MasEmployeeDependent> med = null;
		List<OpdPatientDetails> admittedVisit = new ArrayList<OpdPatientDetails>();
		List<MasItemClass> masItemClassList = new ArrayList<MasItemClass>();
		List<OpdPatientDetails> LastVisitPatientDetails  = null;
		if (map.get("opdDetailListForFollowUp") != null) {
			opdDetailListForFollowUp = (List<OpdPatientDetails>) map
					.get("opdDetailListForFollowUp");
		}
		if (map.get("opdHistoryDetailsListForFollowUp") != null) {
			opdHistoryDetailsListForFollowUp = (List<OpdPatientHistory>) map
					.get("opdHistoryDetailsListForFollowUp");
		}
		if (map.get("patientInvestigationHeaderListForFollowUp") != null) {
			patientInvestigationHeaderListForFollowUp = (List<PatientInvestigationHeader>) map
					.get("patientInvestigationHeaderListForFollowUp");
		}
		if (map.get("patientPrescriptionHeaderList") != null) {
			patientPrescriptionHeaderList = (List<PatientPrescriptionHeader>) map
					.get("patientPrescriptionHeaderList");
		}
		if (map.get("dischargeIcdCodeList") != null) {
			dischargeIcdCodeList = (List<DischargeIcdCode>) map
					.get("dischargeIcdCodeList");
		}

		if (map.get("opdPatientDetails") != null) {
			opdPatientDetails = (OpdPatientDetails) map
					.get("opdPatientDetails");
		}
		if (map.get("patientAdmitted") != null) {
			patientAdmitted = (Boolean) map.get("patientAdmitted");
		}
		if (map.get("admittedVisit") != null) {
			admittedVisit = (List<OpdPatientDetails>) map.get("admittedVisit");
		}
		if (map.get("masItemClassList") != null) {
			masItemClassList = (List<MasItemClass>) map.get("masItemClassList");
		}
		if (map.get("med") != null) {
			med = (List<MasEmployeeDependent>) map.get("med");
		}
		List<MasBloodGroup> bloodGroupList  = null;
		if (map.get("bloodGroupList") != null) {
			bloodGroupList  = (List<MasBloodGroup>) map.get("bloodGroupList");
		}
		if (map.get("LastVisitPatientDetails") != null) {
			LastVisitPatientDetails  = (List<OpdPatientDetails>) map.get("LastVisitPatientDetails");
		}
		
		// map = opdHandlerService.getPatientDetails(visitId);
		List patientDataList = (List) map.get("patientDataList");
		Visit visit = (Visit) patientDataList.get(0);
		int visitNo = visit.getVisitNo();
		int hinId = visit.getHin().getId();
		mapForDS.put("deptId", deptId);
		mapForDS.put("visitNo", visitNo);
		mapForDS.put("hinId", hinId);
		mapForDS.put("visitId", visitId);
		mapForDS.put("hospitalId", hospitalId);
		mapForDS.put("docId", docId);
		map = opdHandlerService.getOPDDetails(mapForDS);
		Map<String, Object> mapForToken = new HashMap<String, Object>();
		mapForToken.put("token", token);
		mapForToken.put("visitId", visitId);
		mapForToken.put("empId", empId);
		mapForToken.put("hospitalId", hospitalId);
		mapForToken = opdHandlerService.updateVistToken(mapForToken);
		map.put("patientDataList", patientDataList);
		map.put("opdDetailListForFollowUp", opdDetailListForFollowUp);
		map.put("opdHistoryDetailsListForFollowUp",
				opdHistoryDetailsListForFollowUp);
		map.put("patientInvestigationHeaderListForFollowUp",
				patientInvestigationHeaderListForFollowUp);
		map.put("patientPrescriptionHeaderList", patientPrescriptionHeaderList);
		map.put("dischargeIcdCodeList", dischargeIcdCodeList);
		map.put("opdPatientDetails", opdPatientDetails);
		map.put("patientAdmitted", patientAdmitted);
		map.put("admittedVisit", admittedVisit);
		map.put("masItemClassList", masItemClassList);
		map.put("bloodGroupList", bloodGroupList);
		map.put("LastVisitPatientDetails",LastVisitPatientDetails);
		
		map.put("med", med);

		jsp = OPD_DENTAL_JSP;
		jsp += ".jsp";
		title = "Patient Details";
		map.put("visitId", visitId);
		map.put("deptId", deptId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);

	}

	@SuppressWarnings({ "unused", "unchecked" })
	public ModelAndView showOPDMainJspChange(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		MultipartFormDataRequest mrequest = null;
		int visitId = 0;
		if (MultipartFormDataRequest.isMultipartFormData(request)) {
			try {
				mrequest = new MultipartFormDataRequest(request);
				visitId = Integer.parseInt(request.getParameter("visitId"));
			} catch (UploadException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
		} else {
			visitId = Integer.parseInt(request.getParameter("visitId"));
		}
		// map=opdHandlerService.getPatientDetails(visitId);
		int deptId = (Integer) session.getAttribute("deptId");
		Map<String, Object> mapForDS = new HashMap<String, Object>();

		map = opdHandlerService.getPatientDetails(visitId);
		List patientDataList = (List) map.get("patientDataList");
		Visit visit = (Visit) patientDataList.get(0);
		int visitNo = visit.getVisitNo();
		int hinId = visit.getHin().getId();
		mapForDS.put("deptId", deptId);
		mapForDS.put("visitNo", visitNo);
		mapForDS.put("hinId", hinId);
		map = opdHandlerService.getOPDDetails(mapForDS);
		map.put("patientDataList", patientDataList);
		jsp = OPD_MAIN_JSP_CHANGE;
		jsp += ".jsp";
		title = "Patient Details";
		map.put("visitId", visitId);
		map.put("deptId", deptId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);

	}

	@SuppressWarnings("unused")
	public ModelAndView showUpdatePatientPrescribtionJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		String jsp = UPDATE_PATIENT_PRE;
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showUpdatePatientPrescribtionVisitJsp(
			HttpServletRequest request, HttpServletResponse response) {
		RegistrationHandlerService registrationHandlerService = null;
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();
		Map<String, Object> patientVisitMap = new HashMap<String, Object>();

		int visitNo = 0;
		String hinNo = "";
		if (request.getParameter(HIN_NO) != null) {
			hinNo = request.getParameter(HIN_NO);
			parameterMap.put("hinNo", hinNo);
		}
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		// patientVisitMap =
		// registrationHandlerService.getPatientVisitDetailsForUpdate(parameterMap);

		// map=opdHandlerService.getPatientDetailsForPrescribtion(visitNo ,
		// hinNo);
		// int deptId=(Integer)session.getAttribute("deptId");
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		map = opdHandlerService
				.getPatientDetailsForPrescribtion(visitNo, hinNo);
		List patientDataList = (List) map.get("patientDataList");
		List patientPreList = (List) map.get("patientPreList");
		List pInvList = (List) map.get("pInvList");
		Visit visit = (Visit) patientDataList.get(0);
		int deptId = visit.getDepartment().getId();
		int hinId = visit.getHin().getId();
		mapForDS.put("deptId", deptId);
		mapForDS.put("visitNo", visitNo);
		mapForDS.put("hinId", hinId);
		map = opdHandlerService.getOPDDetails(mapForDS);

		// map = registrationHandlerService.getVisitDetails();

		String jsp = OPD_MAIN_JSP_CHANGE;
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("patientDataList", patientDataList);
		map.put("patientPreList", patientPreList);
		map.put("pInvList", pInvList);
		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings("unused")
	public ModelAndView getICDList(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();
		String itemNameField = "";
		String autoHint = "";

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}

			map.put("autoHint", autoHint);
			map = opdHandlerService.getICDList(map);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "opd_responseForAutoCompleteICD";
		return new ModelAndView(jsp, "map", map);
	}

	/*
	 * Code By Mukesh Date 20 March 2012
	 */
	@SuppressWarnings("unused")
	public ModelAndView getICDForIdList(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();
		String itemNameField = "";
		String autoHint = "";

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}

			map.put("autoHint", autoHint);
			map = opdHandlerService.getICDList(map);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "opd_responseForAutoCompleteICDForId";
		return new ModelAndView(jsp, "map", map);
	}

	@SuppressWarnings("unused")
	public ModelAndView showGridInMainJsp(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		int templateId = Integer.parseInt(request.getParameter("templateId"));
        int hinId = Integer.parseInt(request.getParameter("hinId"));
        int totalRow =0;
        if(request.getParameter("totalRow")!=null)
         totalRow = Integer.parseInt(request.getParameter("totalRow"));
	
		
		 String[] itemIdArray = {"0"};

		 if(request.getParameter("itemIdArray")!=null)
			itemIdArray =  request.getParameter("itemIdArray").split(",");
		
		 map.put("hinId", hinId);
		 map.put("templateId", templateId);
		 map.put("hospitalId", hospitalId);
		map = opdHandlerService.showOPDTreatmentRecords(map);
		jsp = OPD_SHOW_GRID_IN_MAIN_JSP;
		title = "Patient Details";
		map.put("hinId", hinId);
		map.put("itemIdArray", itemIdArray);
		map.put("totalRow", totalRow);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);

	}
	
	@SuppressWarnings("unused")
	public ModelAndView showGridInMainJspFAC(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		int templateId = Integer.parseInt(request.getParameter("templateId"));
        int hinId = Integer.parseInt(request.getParameter("hinId"));
        int totalRow =0;
        if(request.getParameter("totalRow")!=null)
         totalRow = Integer.parseInt(request.getParameter("totalRow"));
	
		
		 String[] itemIdArray = {"0"};

		 if(request.getParameter("itemIdArray")!=null)
			itemIdArray =  request.getParameter("itemIdArray").split(",");
		
		 map.put("hinId", hinId);
		 map.put("templateId", templateId);
		 map.put("hospitalId", hospitalId);
		map = opdHandlerService.showOPDTreatmentRecords(map);
		jsp = "opd_showGridInMainFAC";
		title = "Patient Details";
		map.put("hinId", hinId);
		map.put("itemIdArray", itemIdArray);
		map.put("totalRow", totalRow);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);

	}

	@SuppressWarnings("unused")
	public ModelAndView showGridInMainJspForIPD(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		int templateId = Integer.parseInt(request.getParameter("templateId"));
		int hinId =0;
		if(request.getParameter("hinId")!=null)
		 hinId = Integer.parseInt(request.getParameter("hinId"));
			 map.put("hinId", hinId);
			 map.put("templateId", templateId);
			 map.put("hospitalId", hospitalId);
		map = opdHandlerService.showOPDTreatmentRecords(map);

		jsp = IPD_SHOW_GRID_IN_MAIN_JSP;

		title = "Patient Details";

		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);

	}

	@SuppressWarnings("unused")
	public ModelAndView showGridForInvestigation(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		HttpSession session = request.getSession();

		/*
		 * String[] investigationIdArray = null; if
		 * (request.getParameterValues("invTemp") != null) {
		 * investigationIdArray = (String[])
		 * request.getParameterValues("invTemp"); }
		 * dataMap.put("investigationIdArray", investigationIdArray);
		 */
		int hidId =0;
		if(request
				.getParameter("hinId")!=null)
			hidId = Integer.parseInt(request.getParameter("hinId"));
			
		String investigationTemplateId = request
				.getParameter("investigationTemplateId");
		map = opdHandlerService
				.showOPDInvestigationRecordsForOpd(investigationTemplateId,hidId);
        int totalRow =0;
        if(request.getParameter("totalRow")!=null)
         totalRow = Integer.parseInt(request.getParameter("totalRow"));
		jsp = OPD_SHOW_GRID_FOR_INVESTIGATION_JSP;

		title = "Patient Investigation Details";
		String[] itemIdArray = {"0"};

		 if(request.getParameter("itemIdArray")!=null)
			itemIdArray =  request.getParameter("itemIdArray").split(",");
		map.put("contentJsp", jsp);
		map.put("itemIdArray", itemIdArray);
		map.put("totalRow", totalRow);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView showGridForOrderBooking(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		List<Integer> toShowIdList = new ArrayList<Integer>();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> mapForDs = new HashMap<String, Object>();

		// System.out.println("BOX   :" + box);
		int templateCount = 0;
		if (request.getParameter("templateCount") != null) {
			templateCount = Integer.parseInt(request
					.getParameter("templateCount"));
		}

		Vector templateId = box.getVector("investigationTemplateId");

		for (int i = 0; i < templateCount; i++) {
			if (request.getParameter("check" + i) != null
					&& request.getParameter("check" + i).equalsIgnoreCase("y")) {
				toShowIdList.add(Integer.parseInt((String) templateId.get(i)));
			}
		}
		mapForDs.put("toShowIdList", toShowIdList);

		map = opdHandlerService.showOPDTemplateRecords(mapForDs);

		jsp = OPD_SHOW_GRID_FOR_ORDER_BOOKING_JSP;

		title = "Patient OrderBooking Details";

		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);

	}

	@SuppressWarnings("unused")
	public ModelAndView showGridForInvestigationIPD(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		HttpSession session = request.getSession();

		/*
		 * String[] investigationIdArray = null; if
		 * (request.getParameterValues("invTemp") != null) {
		 * investigationIdArray = (String[])
		 * request.getParameterValues("invTemp"); }
		 * dataMap.put("investigationIdArray", investigationIdArray);
		 */
		String investigationTemplateId = request
				.getParameter("investigationTemplateId");
		map = opdHandlerService
				.showOPDInvestigationRecordsForOpd(investigationTemplateId,0);

		jsp = IPD_SHOW_GRID_FOR_INVESTIGATION_JSP;

		title = "Patient Investigation Details";

		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);

	}

	@SuppressWarnings("unused")
	public ModelAndView getItemListForAutoCompleteItem(
			HttpServletRequest request, HttpServletResponse response) {

		HttpSession session = request.getSession();
		String itemNameField = "";
		int deptId = 0;
		String autoHint = "";
		String screen = "";
		Map<String, Object> map = new HashMap<String, Object>();

		try {
			int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			if (request.getParameter("screen") != null) {
				screen = request.getParameter("screen");
			}
			if (session.getAttribute("deptId") != null) {
				deptId = (Integer) session.getAttribute("deptId");
			}

			map.put("deptId", deptId);
			map.put("screen", screen);
			map.put("userName", userName);
			map.put("autoHint", autoHint);
			map.put("hospitalId", hospitalId);
			map = opdHandlerService.getItemListForAutoComplete(map);
		} catch (Exception e) {
			e.printStackTrace();
		}
		if (request.getParameter("flag") != null
				&& request.getParameter("flag") != "") {
			jsp = "opd_responseInGridForDrugIssueReport";
		} else {
			jsp = "opd_responseInGrid";
		}

		return new ModelAndView(jsp, "map", map);
	}

	@SuppressWarnings("unchecked")
	public void checkItem(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<PatientAllergicDrugsDt> patientAllergicDrugsDtList = new ArrayList<PatientAllergicDrugsDt>();
		int visitId = 0;
		if (request.getParameter("visitId") != null
				&& !request.getParameter("visitId").equals("")) {
			visitId = Integer.parseInt(request.getParameter("visitId"));
		}
		String pvmsNo = "";
		if (request.getParameter("pvmsNo") != null) {
			pvmsNo = request.getParameter("pvmsNo");
		}
		dataMap.put("visitId", visitId);
		dataMap.put("pvmsNo", pvmsNo);
		map = opdHandlerService.checkItem(dataMap);
		patientAllergicDrugsDtList = (List<PatientAllergicDrugsDt>) map
				.get("patientAllergicDrugsDtList");
		int itemId = 0;
		for (PatientAllergicDrugsDt patientAllergicDrugsDt : patientAllergicDrugsDtList) {
			itemId = patientAllergicDrugsDt.getItem().getId();
		}
		StringBuffer sb = new StringBuffer();

		sb.append("<item>");
		if (itemId > 0) {
			sb.append("<bedStatus>" + "yes" + "</bedStatus>");
		} else {
			sb.append("<bedStatus>" + "no" + "</bedStatus>");
		}
		sb.append("<itemId>" + itemId + "</itemId>");
		sb.append("</item>");

		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");

		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@SuppressWarnings("unused")
	public ModelAndView getInvestigationListForAutoComplete(
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		String itemNameField = "";

		int deptId = 0;
		String autoHint = "";
		Map<String, Object> map = new HashMap<String, Object>();

		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			if (request.getParameter("labradiologyCheck") != null) {
				String labradiologyCheck = request
						.getParameter("labradiologyCheck");
				map.put("labradiologyCheck", labradiologyCheck);
				
			}
			//System.out.println("labradiologyCheck"+request.getParameter("labradiologyCheck"));
					
			map.put("userName", userName);
			map.put("autoHint", autoHint);
			map = opdHandlerService.getInvestigationListForAutoComplete(map);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = OPD_RESPONSE_FOR_INVESTIGATION_JSP;
		return new ModelAndView(jsp, "map", map);
	}

	@SuppressWarnings("unused")
	public ModelAndView fillChargeCode(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		String rowVal = request.getParameter("rowVal");

		String chargeCodeNAmeForAjax = "";
		// int index1=chargeCodeNameWithId.lastIndexOf("[");
		// int index2=chargeCodeNameWithId.lastIndexOf("]");
		String chargeCodeName = "";
		String responseChargeCode = "";
		List<DgMasInvestigation> chargeList = new ArrayList<DgMasInvestigation>();
		try {
			if (request.getParameter("chargeCodeNAmeForAjax") != null) {
				chargeCodeNAmeForAjax = request
						.getParameter("chargeCodeNAmeForAjax");
			}
			responseChargeCode = chargeCodeNAmeForAjax;
			StringTokenizer s1 = new StringTokenizer(chargeCodeNAmeForAjax, "0");
			StringBuffer output_str1 = new StringBuffer();
			while (s1.hasMoreTokens()) {
				output_str1.append(s1.nextToken());
				if (s1.hasMoreTokens()) {
					output_str1.append("&");
				}
			}
			// System.out.println("output_str1::::::::::" + output_str1);
			chargeCodeNAmeForAjax = new String(output_str1);
			// System.out.println("chargeCode::::::::::" +
			// chargeCodeNAmeForAjax);
		} catch (Exception e) {
			e.printStackTrace();
		}

		// if(index1!=-1){
		// chargeCodeName=chargeCodeNameWithId.substring(0, index1);
		// }

		map = opdHandlerService.getChargeCodeValue(chargeCodeNAmeForAjax);

		jsp = OPD_RESPONSE_FOR_CHARGE_CODE_NAME_JSP;

		title = "Patient Investigation Details";
		map.put("rowVal", rowVal);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView fillChargeCodeForInvestigation(
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		String rowVal = request.getParameter("rowVal");

		String chargeCodeNAmeForAjax = "";
		// int index1=chargeCodeNameWithId.lastIndexOf("[");
		// int index2=chargeCodeNameWithId.lastIndexOf("]");
		String chargeCodeName = "";
		String responseChargeCode = "";
		List<DgMasInvestigation> chargeList = new ArrayList<DgMasInvestigation>();
		try {
			if (request.getParameter("chargeCodeNAmeForAjax") != null) {
				chargeCodeNAmeForAjax = request
						.getParameter("chargeCodeNAmeForAjax");
			}
			responseChargeCode = chargeCodeNAmeForAjax;
			StringTokenizer s1 = new StringTokenizer(chargeCodeNAmeForAjax, "0");
			StringBuffer output_str1 = new StringBuffer();
			while (s1.hasMoreTokens()) {
				output_str1.append(s1.nextToken());
				if (s1.hasMoreTokens()) {
					output_str1.append("&");
				}
			}
			// System.out.println("output_str1::::::::::" + output_str1);
			chargeCodeNAmeForAjax = new String(output_str1);
			// System.out.println("chargeCode::::::::::" +
			// chargeCodeNAmeForAjax);
		} catch (Exception e) {
			e.printStackTrace();
		}

		// if(index1!=-1){
		// chargeCodeName=chargeCodeNameWithId.substring(0, index1);
		// }

		map = opdHandlerService.getChargeCodeValue(chargeCodeNAmeForAjax);

		jsp = OPD_RESPONSE_FOR_CHARGE_CODE_NAME_FOR_INVESTIGATION_JSP;

		title = "Patient Investigation Details";
		map.put("rowVal", rowVal);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView pacsTest(HttpServletRequest request,
			HttpServletResponse response) {
		//System.out.println("R---->");
		// Ranjesh Prasad: Pacs Integration Start
		PacsHL7Service pacsHL7Service = new PacsHL7Service();
		String query = "";
		// String query="and dt.amount='0.00' and dg.visit_id="+visitId;
		try {
			pacsHL7Service.sendService(query);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		// Ranjesh Prasad: Pacs Integration End

		return null;
	}

	@SuppressWarnings("unused")
	public ModelAndView submitOPDPatientDetails(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		Map<String, Object> mapForDSPro = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		int hinId = Integer.parseInt(request.getParameter("hinId"));
		int departmentId = Integer.parseInt(request
				.getParameter("departmentId"));
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		// System.out.println("controller visitId---" + visitId);
		int hospitalId = Integer.parseInt(request.getParameter("hospitalId"));
		// details captured for opd patient details table
		int empId = 0;
		/*if (request.getParameter("empId") != null
				&& request.getParameter("empId") != "") {
			empId = Integer.parseInt(request.getParameter("empId"));
		}*/
		if (session.getAttribute("empId") != null
				&& session.getAttribute("empId") != "") {
			empId =  (Integer) session.getAttribute("empId");
		}
		boolean hl7Flag = false;
		if (request.getParameter("labradiologyCheck").equals("Radio"))
			hl7Flag = true;
		int empIdCurrnet = 0;
		empIdCurrnet = (Integer) session.getAttribute("empId");
		String returnfromHospital = null;
		String hospName = null;
		String doa = null;
		String dod = null;
		String gpe_examination = null;
		String systamicExam = null;
		String height = null;
		String weight = null;
		String pulse = null;
		int visitNo = 0;
		String days = null;
		String bp = null;
		String rr = null;
		String temperature = null;
		String serviceNo = null;
		String hinNo = null;
		String plan = null;
		String initialDiagnosis = null;
		String disposal = "";
		String nextVisitDate = null;
		String afmsDescription = null;
		String userName = null;
		String flag = null;
		boolean submitData = false;
		String urlDept = "";
		String departmentName = "";
		String adviceOnDischarge = "";
		String pastDiagnosis = "";
		String pastdisposal = "";
		String DaysPhy = "";
		String DurationPhy = "";
		int threpytypeId = 0;
		String whr = "";
		String allergies = "";
		String reviewAt = "";
		if (!request.getParameter("flag").equals("")) {
			flag = request.getParameter("flag");
		}

		if (request.getParameter("height") != null) {
			height = request.getParameter("height");
		}
		if (request.getParameter("whr") != null) {
			whr = request.getParameter("whr");
		}
		if (request.getParameter("disposal") != null) {
			disposal = request.getParameter("disposal");
		}
		// System.out.println("disposal ct  746 "+disposal);
		if (request.getParameter("weight") != null) {
			weight = request.getParameter("weight");
		}
		if (request.getParameter("pulse") != null) {
			pulse = request.getParameter("pulse");
		}
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
		}
		int priority = 0;
		if (request.getParameter("urgent") != null) {
			priority = Integer.parseInt(request.getParameter("urgent"));
		}
		if (request.getParameter("bp") != null) {
			bp = request.getParameter("bp");
		}
		if (request.getParameter("temperature") != null) {
			temperature = request.getParameter("temperature");
		}
		if (request.getParameter(SERVICE_NO) != null) {
			serviceNo = request.getParameter(SERVICE_NO);
		}
		if (request.getParameter(HIN_NO) != null) {
			hinNo = request.getParameter(HIN_NO);
		}
		if (request.getParameter("plan") != null) {
			plan = request.getParameter("plan");
		}
		if (request.getParameter("hospName") != null) {
			hospName = request.getParameter("hospName");
		}
		if (request.getParameter("returnfromHospital") != null) {
			returnfromHospital = request.getParameter("returnfromHospital");
		}
		String referedToMH = "";

		if (request.getParameter("referedToMH") != null
				&& !request.getParameter("referedToMH").equals("")) {
			referedToMH = request.getParameter("referedToMH");
		} else {
			referedToMH = "n";
		}
		String mh = "";
		if (request.getParameter("mh") != null) {
			mh = request.getParameter("mh");
		}
		String mhDepartment = "";
		if (request.getParameter("mhDepartment") != null) {
			mhDepartment = request.getParameter("mhDepartment");
		}
		String mhReferredFor = "";
		if (request.getParameter("mhReferredFor") != null) {
			mhReferredFor = request.getParameter("mhReferredFor");
		}

		if (request.getParameter("doa") != null) {
			doa = request.getParameter("doa");
		}
		if (request.getParameter("dod") != null) {
			dod = request.getParameter("dod");
		}
		if (request.getParameter("gpe_examination") != null) {
			gpe_examination = request.getParameter("gpe_examination");
		}
		if (request.getParameter("systamicExam") != null) {
			systamicExam = request.getParameter("systamicExam");
		}
		if (request.getParameter("rr") != null) {
			rr = request.getParameter("rr");
		}
		if (request.getParameter("adviceOnDischarge") != null) {
			adviceOnDischarge = request.getParameter("adviceOnDischarge");
		}
		if (request.getParameter("pastDiagnosis") != null) {
			pastDiagnosis = request.getParameter("pastDiagnosis");
		}
		if (request.getParameter("pastdisposal") != null) {
			pastdisposal = request.getParameter("pastdisposal");
		}

		if (request.getParameter("DaysPhy") != null) {
			DaysPhy = request.getParameter("DaysPhy");
		}
		if (request.getParameter("DurationPhy") != null) {
			DurationPhy = request.getParameter("DurationPhy");
		}
		if (request.getParameter("threpytypeId") != null
				&& Integer.parseInt(request.getParameter("threpytypeId")) != 0) {
			threpytypeId = Integer.parseInt(request
					.getParameter("threpytypeId"));
			// System.out.println("threpytypeId---" + threpytypeId);
		}

		String referredDoctars = "";
		String[] referredDoctarsArray = null;

		if (request.getParameterValues("referredDoctarsId") != null) {
			referredDoctarsArray = (String[]) request
					.getParameterValues("referredDoctarsId");
			for (int i = 0; i < referredDoctarsArray.length; i++) {
				if (i == 0)
					referredDoctars = referredDoctarsArray[i];
				else
					referredDoctars = referredDoctars + ","
							+ referredDoctarsArray[i];
			}
		}
		if (request.getParameter("initialDiagnosis") != null) {
			initialDiagnosis = request.getParameter("initialDiagnosis");
		}
		// System.out.println("initialDiagnosis---" + initialDiagnosis);
		// if (request.getParameter("relation").equalsIgnoreCase("self")) {
		if (request.getParameter("days") != null) {
			days = request.getParameter("days");
		}
		String disposalDays = "";
		if (request.getParameter("disposalDays") != null) {
			disposalDays = request.getParameter("disposalDays");
		}

		// }
		int systemDiagnosisId = 0;
		// System.out.println("system Diagnosis======"+request.getParameter("systemDiagnosis"));
		if (request.getParameter("systemDiagnosis") != null
				&& !request.getParameter("systemDiagnosis").equals("")) {
			String systemDiagnosis = request.getParameter("systemDiagnosis");
			int index1 = systemDiagnosis.lastIndexOf("[");
			int index2 = systemDiagnosis.lastIndexOf("]");
			index1++;
			systemDiagnosisId = Integer.parseInt(systemDiagnosis.substring(
					index1, index2));
			// System.out.println("systemDiagnosisId==="+systemDiagnosisId);
		}
		if (request.getParameter("nextVisitDate") != null) {
			nextVisitDate = request.getParameter("nextVisitDate");
		}
		if (request.getParameter("afmsDescription") != null) {
			afmsDescription = request.getParameter("afmsDescription");
		}
		if (request.getParameter("userName") != null) {
			userName = request.getParameter("userName");
		}
		Users user = (Users) session.getAttribute("users");
		// Integer userId = user.getEmployee().getId();
		Integer userId = user.getId();

		String presentComplain = "";
		String presentAdvice = ""; // fayaz added
		String presentIllness = "";
		String pastHistory = "";
		String personalHistory = "";
		String familyHistory = "";
		String onExamination = "";
		String otherDetails = "";

		String riskFactor = "";
		String bmi = "";
		String idealWeight = "";
		String pastMedicalHistory = "";

		// Minior OT parameters

		int procCount = 0;
		List<Integer> procedureId = null;
		List<String> surgeryType = null;

		if (request.getParameter("procCount") != null) {
			procedureId = new ArrayList<Integer>();
			surgeryType = new ArrayList<String>();
			procCount = Integer.parseInt(request.getParameter("procCount"));
			mapForDS.put("procCount",
					Integer.parseInt(request.getParameter("procCount")));
		}

		for (int i = 1; i <= procCount; i++) {

			// System.out.println("proc count "+request.getParameter("procCount")
			// +" sur "+request.getParameter("surgeryradio"+i)+" proc" +
			// request.getParameter("procedureId"+i+1));

			if (request.getParameter("procedureId" + i) != null
					&& request.getParameter("procedureId" + i) != ""
					&& request.getParameter("surgeryType" + i) != null
					&& request.getParameter("surgeryType" + i) != "") {
				// System.out.println(request.getParameter("procedureId"+i+1));
				procedureId.add(Integer.parseInt(request
						.getParameter("procedureId" + i)));
				surgeryType.add(request.getParameter("surgeryType" + i));

				
			}
		}

		mapForDS.put("procedureId", procedureId);
		mapForDS.put("surgeryType", surgeryType);
		mapForDS.put("procCount", procCount);

		// End Minior OT

		if (request.getParameter("presentComplain") != null) {
			presentComplain = request.getParameter("presentComplain");
		}

		if (request.getParameter("riskFactor") != null) {
			riskFactor = request.getParameter("riskFactor");
		}
		if (request.getParameter("bmi") != null) {
			bmi = request.getParameter("bmi");
		}
		if (request.getParameter("idealWeight") != null) {
			idealWeight = request.getParameter("idealWeight");
		}
		if (request.getParameter("pastMedicalHistory") != null) {
			pastMedicalHistory = request.getParameter("pastMedicalHistory");
		}
		if (request.getParameter("presentAdvice") != null) {
			presentAdvice = request.getParameter("presentAdvice");
		}

		if (request.getParameter("presentIllness") != null) {
			presentIllness = request.getParameter("presentIllness");
		}
		if (request.getParameter("pastHistory") != null) {
			pastHistory = request.getParameter("pastHistory");
		}

		if (request.getParameter("personalHistory") != null) {
			personalHistory = request.getParameter("personalHistory");
		}

		/*
		 * if (request.getParameter("familyHistory") != null) { familyHistory =
		 * request.getParameter("familyHistory"); }
		 */

		/*
		 * // Added By Anamika for multiple family history
		 * 
		 * String[] familyHistoryArray = null;
		 * if(request.getParameterValues("familyHistory") !=null) {
		 * familyHistoryArray = request.getParameterValues("familyHistory");
		 * //objectMap.put("familyHistoryArray", familyHistoryArray); } String
		 * otherFamilyHistorty = ""; if
		 * (request.getParameter("otherFamilyHistory") != null) {
		 * otherFamilyHistorty= request.getParameter("otherFamilyHistory");
		 * 
		 * }
		 */

		Integer referImpannelhospital = 0;

		if (request.getParameter("familyHistory") != null) {
			familyHistory = request.getParameter("familyHistory");
		}
		if (request.getParameter("allergies") != null) {
			allergies = request.getParameter("allergies");

		}

		if (request.getParameter("reviewAt") != null) {
			reviewAt = request.getParameter("reviewAt");

		}

		/**
		 * End
		 */

		if (request.getParameter("OtherDetails") != null) {
			otherDetails = request.getParameter("OtherDetails");
		}

		if (!request.getParameter("onExamination").equals("")
				&& (request.getParameter("onExamination") != null)) {
			onExamination = request.getParameter("onExamination");
		}
		/*
		 * String remaks=""; if (request.getParameter("remaks") != null) {
		 * remaks = request.getParameter("remaks"); }
		 */

		String consultationDate = request.getParameter("consultationDate");
		String consultationTime = request.getParameter("consultationTime");

		// details captured for patient prescription header and detail table
		List<String> pvmsNoList = new ArrayList<String>();
		List<Integer> frequencyList = new ArrayList<Integer>();
		List<String> dosageList = new ArrayList<String>();
		List<String> remarksList = new ArrayList<String>();
		List<String> typeLeftRightList = new ArrayList<String>();
		List<String> instructionList = new ArrayList<String>();
		List<Integer> totalList = new ArrayList<Integer>();
		List<Integer> noOfDaysList = new ArrayList<Integer>();
		List<String> routeList = new ArrayList<String>();
		List<Integer> itemConversionList = new ArrayList<Integer>();
		List<Integer> itemClassList = new ArrayList<Integer>();
		List<String> itemDispensaryList = new ArrayList<String>();

		String[] diagnosisIdAray = null;

		if (request.getParameterValues(DIAGNOSIS_ID) != null) {
			diagnosisIdAray = (String[]) request
					.getParameterValues(DIAGNOSIS_ID);
		}
		
		// System.out.println("this is array size"+diagnosisIdAray.length);
		// --------------commented by anamika------------------//
		/*
		 * String referredDept = ""; String[] referredToDeptArray = null; if
		 * (request.getParameterValues("referredDepartmentId") != null) {
		 * referredToDeptArray = (String[]) request
		 * .getParameterValues("referredDepartmentId"); for (int i = 0; i <
		 * referredToDeptArray.length; i++) { if (i == 0) referredDept =
		 * referredToDeptArray[i]; else referredDept = referredDept + "," +
		 * referredToDeptArray[i]; } }
		 */
		// System.out.println("referredDept-----" + referredDept);
		int nomenclaturehdb = 1;
		if (Integer.parseInt(request.getParameter("nomenclaturehdb")) != 1) {
			nomenclaturehdb = Integer.parseInt(request.getParameter("nomenclaturehdb"));
		}
		String[] pvmsArr = new String[nomenclaturehdb];
		Integer[] itemIdArr = new Integer[nomenclaturehdb];
		String otherMedicine = "";
		List<String> otherMedicineList = new ArrayList<String>();
		List<String> ctList = new ArrayList<String>();
		// List<String> nomenclatureList = new ArrayList<String>();
		List<Integer> itemIdList = new ArrayList<Integer>();
		List<Integer> classificationList = new ArrayList<Integer>();
		List<BigDecimal> uomQtyList = new ArrayList<BigDecimal>();
		
		// List injCategoryList = new ArrayList();
		int j = 1;
		for (int i = 0; i < nomenclaturehdb; i++) {
			String pvmsNo = "";
			int itemId = 0;
			/*
			 * if (request.getParameter("nomenclature" + j) != null &&
			 * !request.getParameter("nomenclature" + j).equals("")) {
			 * 
			 * String nomenclature = request.getParameter("nomenclature" + j);
			 * StringTokenizer strToken = new StringTokenizer(c, "["); String
			 * nomen= strToken.nextToken(); String nomen =
			 * request.getParameter("nomenclature" + j).substring(0,
			 * request.getParameter("nomenclature" + j).indexOf("["));
			 * nomenclatureList.add(nomen); //int index1 =
			 * nomenclature.lastIndexOf("["); //int index2 =
			 * nomenclature.lastIndexOf("]");
			 * //System.out.println("index1=="+index1);
			 * //System.out.println("index2=="+index2); //index1++; //pvmsNo =
			 * nomenclature.substring(index1, index2); int index1 =
			 * nomenclature.lastIndexOf("("); int index2 =
			 * nomenclature.lastIndexOf(")");
			 * //System.out.println("index1=="+index1); //
			 * System.out.println("index2=="+index2); index1++; itemId
			 * =Integer.parseInt(nomenclature.substring(index1, index2)); if
			 * (itemId != 0) { itemIdList.add(itemId); }
			 * otherMedicineList.add(""); }
			 */

			if (request.getParameter("itemId" + j) != null
					&& !request.getParameter("nomenclature" + j).equals("")) {
				itemId = Integer.parseInt(request.getParameter("itemId" + j));
				if (itemId != 0) {
					itemIdList.add(itemId);
				}

				if (request.getParameter("itemIdClassificationId" + j) != null
						&& !request.getParameter("itemIdClassificationId" + j)
								.equals("")) {
					classificationList.add(Integer.parseInt(request
							.getParameter("itemIdClassificationId" + j)));
				} else
					classificationList.add(0);
				/*otherMedicineList.add(otherMedicine);*/
			} else {
				if (request.getParameter("otherMedicine" + j) != null
						&& !request.getParameter("otherMedicine" + j)
								.equals("")) {
					otherMedicine = request.getParameter("otherMedicine" + j);
					otherMedicineList.add(otherMedicine);

				}

			}
			
			if((request.getParameter("itemId" + j) != null && !request.getParameter("nomenclature" + j).equals("")) || (request.getParameter("otherMedicine" + j) != null && !request.getParameter("otherMedicine" + j).equals("")) )
			{
			int itemConversionId = 0;
			if (request.getParameter("itemConversionId" + j) != null
					&& !request.getParameter("itemConversionId" + j).equals("")) {
				itemConversionId = Integer.parseInt(request
						.getParameter("itemConversionId" + j));
				itemConversionList.add(itemConversionId);
			}
			else
				itemConversionList.add(0);
			if (request.getParameter("itemClass" + j) != null
					&& !request.getParameter("itemClass" + j).equals("")) {
				itemClassList.add(Integer.parseInt(request
						.getParameter("itemClass" + j)));
			}
			else
				itemClassList.add(0);

			if (request.getParameter("dispensingUnit" + j) != null) {
				itemDispensaryList.add(request.getParameter("dispensingUnit"
						+ j));
			}
			else
				itemDispensaryList.add("");
			
			if (request.getParameter("uomQty" + j) != null) {
				uomQtyList.add(new BigDecimal(request.getParameter("uomQty"+ j)));
			}
			else
				uomQtyList.add(new BigDecimal(0));
			
			int frequencyId = 0;
			if (request.getParameter("frequency" + j) != null
					&& !request.getParameter("frequency" + j).equals("")) {
				frequencyId = Integer.parseInt(request.getParameter("frequency"
						+ j));
				frequencyList.add(frequencyId);
			} else {
				frequencyList.add(0);
			}
			if (request.getParameter("ct" + j) != null) {
				ctList.add("y");
			} else {
				ctList.add("n");
			}

			String route = "";
			if (request.getParameter("route" + j) != null
					&& !request.getParameter("route" + j).equals("")) {
				route = request.getParameter("route" + j);
				routeList.add(route);
			} else {
				routeList.add("");
			}

			BigDecimal frequenceValue = new BigDecimal("0");
			if (request.getParameter("frequencyValue" + j) != null
					&& !request.getParameter("frequencyValue" + j).equals("")) {
				frequenceValue = new BigDecimal(
						request.getParameter("frequencyValue" + j));
			}

			String dosage = "";
			if (request.getParameter("dosage" + j) != null
					&& !request.getParameter("dosage" + j).equals("")) {
				dosage = request.getParameter("dosage" + j);
				dosageList.add(dosage);
			} else {
				dosageList.add("");
			}
			if (request.getParameter("noOfDays" + j) != null
					&& !request.getParameter("noOfDays" + j).equals("")) {
				int noOfDays = Integer.parseInt(request.getParameter("noOfDays"
						+ j));
				noOfDaysList.add(noOfDays);
				// int noOfdoges=1;
				// if(dosage!=null && dosage!=""){
				// noOfdoges=Integer.parseInt(dosage);
				// }
				// int total = noOfDays * frequenceValue*noOfdoges;
				// totalList.add(total);

			} else {
				noOfDaysList.add(0);
			}
			if (request.getParameter("total" + j) != null
					&& !request.getParameter("total" + j).equals("")) {
				int total = Math.round(Float.parseFloat(request
						.getParameter("total" + j)));
				totalList.add(total);
			} else {
				totalList.add(0);
			}

			String remarks = "";
			if (request.getParameter("remarks" + j) != null
					&& !request.getParameter("remarks" + j).equals("")) {
				remarks = request.getParameter("remarks" + j);
				remarksList.add(remarks);
			} else {
				remarksList.add("");
			}
		}
			// if(!pvmsNo.equals("")){
			// pvmsNoList.add(pvmsNo);
			// }
			// pvmsNoList.add(pvmsArr[i]);

			j++;
		}
		
		

		
		//capture NIP
					j =500;
					int n=itemIdList.size();
							int hdb = 1;
		if (Integer.parseInt(request.getParameter("hdb")) != 1) {
			hdb = Integer.parseInt(request.getParameter("hdb"));
		}
		
		for ( j = 500; j <=hdb; j++) {
			String pvmsNo = "";
			int itemId = 0;

			if (request.getParameter("itemId" + j) != null
					&& !request.getParameter("nomenclature" + j).equals("")) {
				itemId = Integer.parseInt(request.getParameter("itemId" + j));
				if (itemId != 0) {
					itemIdList.add(itemId);
				}

				if (request.getParameter("itemIdClassificationId" + j) != null
						&& !request.getParameter("itemIdClassificationId" + j)
								.equals("")) {
					classificationList.add(Integer.parseInt(request
							.getParameter("itemIdClassificationId" + j)));
				} else
					classificationList.add(0);
				/*otherMedicineList.add(otherMedicine);*/
			} else {
				if (request.getParameter("otherMedicine" + j) != null
						&& !request.getParameter("otherMedicine" + j)
								.equals("")) {
					otherMedicine = request.getParameter("otherMedicine" + j);
					otherMedicineList.add(otherMedicine);
					/*otherMedicineList.add(n,otherMedicine);*/

				}

			}
			
			if((request.getParameter("itemId" + j) != null && !request.getParameter("nomenclature" + j).equals("")) || (request.getParameter("otherMedicine" + j) != null && !request.getParameter("otherMedicine" + j).equals("")) )
			{
			int itemConversionId = 0;
			if (request.getParameter("itemConversionId" + j) != null
					&& !request.getParameter("itemConversionId" + j).equals("")) {
				itemConversionId = Integer.parseInt(request
						.getParameter("itemConversionId" + j));
				itemConversionList.add(itemConversionId);
			}
			else
				itemConversionList.add(0);
			if (request.getParameter("itemClass" + j) != null
					&& !request.getParameter("itemClass" + j).equals("")) {
				itemClassList.add(Integer.parseInt(request
						.getParameter("itemClass" + j)));
			}
			else
				itemClassList.add(0);
			if (request.getParameter("dispensingUnit" + j) != null) {
				itemDispensaryList.add(request.getParameter("dispensingUnit"
						+ j));
			}
			else
				itemDispensaryList.add("");
			
			if (request.getParameter("uomQty" + j) != null) {
				uomQtyList.add(new BigDecimal(request.getParameter("uomQty"+ j)));
			}
			else
				uomQtyList.add(new BigDecimal(0));
			
			int frequencyId = 0;
			if (request.getParameter("frequency" + j) != null
					&& !request.getParameter("frequency" + j).equals("")) {
				frequencyId = Integer.parseInt(request.getParameter("frequency"
						+ j));
				frequencyList.add(frequencyId);
			} else {
				frequencyList.add(0);
			}
			if (request.getParameter("ct" + j) != null) {
				ctList.add("y");
			} else {
				ctList.add("n");
			}

			String route = "";
			if (request.getParameter("route" + j) != null
					&& !request.getParameter("route" + j).equals("")) {
				route = request.getParameter("route" + j);
				routeList.add(route);
			} else {
				routeList.add("");
			}

			BigDecimal frequenceValue = new BigDecimal("0");
			if (request.getParameter("frequencyValue" + j) != null
					&& !request.getParameter("frequencyValue" + j).equals("")) {
				frequenceValue = new BigDecimal(
						request.getParameter("frequencyValue" + j));
			}

			String dosage = "";
			if (request.getParameter("dosage" + j) != null
					&& !request.getParameter("dosage" + j).equals("")) {
				dosage = request.getParameter("dosage" + j);
				dosageList.add(dosage);
			} else {
				dosageList.add("");
			}
			if (request.getParameter("noOfDays" + j) != null
					&& !request.getParameter("noOfDays" + j).equals("")) {
				int noOfDays = Integer.parseInt(request.getParameter("noOfDays"
						+ j));
				noOfDaysList.add(noOfDays);
				// int noOfdoges=1;
				// if(dosage!=null && dosage!=""){
				// noOfdoges=Integer.parseInt(dosage);
				// }
				// int total = noOfDays * frequenceValue*noOfdoges;
				// totalList.add(total);

			} else {
				noOfDaysList.add(0);
			}
			if (request.getParameter("total" + j) != null
					&& !request.getParameter("total" + j).equals("")) {
				int total = Math.round(Float.parseFloat(request
						.getParameter("total" + j)));
				totalList.add(total);
			} else {
				totalList.add(0);
			}

			String remarks = "";
			if (request.getParameter("remarks" + j) != null
					&& !request.getParameter("remarks" + j).equals("")) {
				remarks = request.getParameter("remarks" + j);
				remarksList.add(remarks);
			} else {
				remarksList.add("");
			}
		}
			// if(!pvmsNo.equals("")){
			// pvmsNoList.add(pvmsNo);
			// }
			// pvmsNoList.add(pvmsArr[i]);

			//j++;
			//n++;
		}
		
		mapForDS.put("routeList", routeList);
		mapForDS.put("frequencyList", frequencyList);
		mapForDS.put("ctList", ctList);
		mapForDS.put("dosageList", dosageList);
		mapForDS.put("itemIdList", itemIdList);
		mapForDS.put("classificationList", classificationList);
		mapForDS.put("totalList", totalList);
		mapForDS.put("noOfDaysList", noOfDaysList);
		mapForDS.put("remarksList", remarksList);
		mapForDS.put("otherMedicineList", otherMedicineList);
		// mapForDS.put("nomenclatureList", nomenclatureList);
		mapForDS.put("itemConversionList", itemConversionList);
		mapForDS.put("itemClassList", itemClassList);
		mapForDS.put("itemDispensaryList", itemDispensaryList);
		mapForDS.put("uomQtyList", uomQtyList);
		
		/**
		 * Added by Ritu for other medicines and investigations 23-04-2013
		 */
		String otherTreatment = "";
		if (request.getParameter("otherTreatment") != null
				&& !request.getParameter("otherTreatment").equals("")) {
			otherTreatment = request.getParameter("otherTreatment");
			mapForDS.put("otherTreatment", otherTreatment);
		}
		String otherInvestigation = "";
		if (request.getParameter("otherInvestigation") != null
				&& !request.getParameter("otherInvestigation").equals("")) {
			otherInvestigation = request.getParameter("otherInvestigation");
			mapForDS.put("otherInvestigation", otherInvestigation);
		}

		// -------------------fetching values for Investigation
		// template---------------
		// -------------------fetching values for Investigation
		// template---------------
		List<String> chargeCodeIdList = new ArrayList<String>();
		// List<Integer> quantityList = new ArrayList<Integer>();
		List<String> referToMhList = new ArrayList<String>();
		List<String> investigationDate = new ArrayList<String>();
		// List<String> clinicalList = new ArrayList<String>();
		String clinicalNotes1 = "";
		if (request.getParameter("clinicalNotes1") != null
				&& !(request.getParameter("clinicalNotes1").equals(""))) {
			clinicalNotes1 = request.getParameter("clinicalNotes1");
		}
		int hiddenValue = 1;
		if (Integer.parseInt(request.getParameter("hiddenValue")) != 1) {
			hiddenValue = Integer.parseInt(request.getParameter("hiddenValue"));
		}
		int temp = 1;
		String[] chargeCodeIdArr = new String[hiddenValue];
		for (int i = 0; i < hiddenValue; i++) {
			if (request.getParameter("chargeCodeName" + temp) != null
					&& !request.getParameter("chargeCodeName" + temp)
							.equals("")) {

				String chargeCodeNameWithId = request
						.getParameter("chargeCodeName" + temp);
				int index1 = chargeCodeNameWithId.lastIndexOf("[");
				int index2 = chargeCodeNameWithId.lastIndexOf("]");
				index1++;
				String chargeCodeId = chargeCodeNameWithId.substring(index1,
						index2);
				if (!chargeCodeId.equals("")) {
					chargeCodeIdArr[i] = chargeCodeId;
					int qty = 1;
					// int
					// qty=Integer.parseInt(request.getParameter("qty"+temp));
					// String clinicalNotes =
					// request.getParameter("clinicalNotes" + temp);
					if (request.getParameter("referToMh" + temp) != null
							&& !request.getParameter("referToMh" + temp)
									.equals("")) {
						String referToMh = request.getParameter("referToMh"
								+ temp);
						referToMhList.add(referToMh);
					} else {
						String referToMh = "n";
						referToMhList.add(referToMh);
					}
					chargeCodeIdList.add(chargeCodeIdArr[i]);
					investigationDate.add(request.getParameter("investigationDate"+temp));
					// quantityList.add(qty);
					// clinicalList.add(clinicalNotes);

				}
			}
			temp++;
		}

		if (request.getParameter("procedureHeaderId") != null
				&& !request.getParameter("procedureHeaderId").equals("0")) {
			mapForDS.put("procedureHeaderId",
					Integer.parseInt(request.getParameter("procedureHeaderId")));
		}
		if (request.getParameter("physioRequisitionHeaderId") != null
				&& !request.getParameter("physioRequisitionHeaderId").equals(
						"0")) {
			mapForDS.put("physioRequisitionHeaderId", Integer.parseInt(request
					.getParameter("physioRequisitionHeaderId")));
		}
		mapForDS.put("deptId", (Integer) session.getAttribute("deptId"));
		mapForDS.put("referredDoctars", referredDoctars);
	

		
		mapForDS.put("typeLeftRightList", typeLeftRightList);
		mapForDS.put("instructionList", instructionList);


	
		mapForDS.put("hinId", hinId);
		mapForDS.put("departmentId", departmentId);

		mapForDS.put("userId", userId);
		mapForDS.put("visitId", visitId);
		mapForDS.put("hospitalId", hospitalId);
		mapForDS.put("userName", userName);
		mapForDSPro.put("visitId", visitId);
		mapForDSPro.put("consultationDate", consultationDate);
		mapForDSPro.put("diagnosisIdAray", diagnosisIdAray);
		mapForDSPro.put("disposal", disposal);

		String userSrNo = (String) session.getAttribute("userSrNo");
		mapForDSPro.put("userSrNo", userSrNo);

		

		// mapForDS.put("injCategoryList", injCategoryList);

		// ----------data for investigation template------

		mapForDS.put("chargeCodeIdList", chargeCodeIdList);
		mapForDS.put("investigationDate", investigationDate);
		
		// mapForDS.put("quantityList", quantityList);
		mapForDS.put("clinicalNotes1", clinicalNotes1);
		mapForDS.put("referToMhList", referToMhList);

		// ------------data for opd patient details----------
		mapForDS.put("empId", empId);
		mapForDS.put("empIdCurrnet", empIdCurrnet);

		mapForDS.put("height", height);
		mapForDS.put("whr", whr);

		mapForDS.put("disposal", disposal);
		mapForDS.put("days", days);
		mapForDS.put("disposalDays", disposalDays);
		mapForDS.put("weight", weight);
		mapForDS.put("pulse", pulse);
		mapForDS.put("bp", bp);
		mapForDS.put("consultationDate", consultationDate);
		mapForDS.put("consultationTime", consultationTime);
		mapForDS.put("temperature", temperature);
		mapForDS.put("afmsDescription", afmsDescription);
		mapForDS.put("plan", plan);
		mapForDS.put("initialDiagnosis", initialDiagnosis);
		mapForDS.put("systemDiagnosisId", systemDiagnosisId);

		if (request.getParameter("admissionDate") != null
				&& !request.getParameter("admissionDate").equals("")) {
			Date admissionDate = HMSUtil
					.convertStringTypeDateToDateType(request
							.getParameter("admissionDate"));
			mapForDS.put("admissionDate", admissionDate);
		}
		if (request.getParameter("admissionWard") != null
				&& !request.getParameter("admissionWard").equals("0")) {
			Integer admissionWard = Integer.parseInt(request
					.getParameter("admissionWard"));
			mapForDS.put("admissionWard", admissionWard);
		}

		if (request.getParameter("admissionAdvised") != null
				&& !request.getParameter("admissionAdvised").equals("")) {
			String admissionAdvised = request.getParameter("admissionAdvised");
			if (admissionAdvised.equalsIgnoreCase("on"))
				mapForDS.put("admissionAdvised", "y");
		} else {
			mapForDS.put("admissionAdvised", "n");
		}

		if (request.getParameter("referral") != null
				&& !request.getParameter("referral").equals("")) {
			String referVisitDate = null;
			Integer referral = Integer.parseInt(request
					.getParameter("referral"));
			mapForDS.put("referral", referral);
			if (referral == 1) {

				int referralPriority = 0;
				if (request.getParameter("priorityName") != null
						&& !request.getParameter("priorityName").equals("")) {
					referralPriority = Integer.parseInt(request
							.getParameter("priorityName"));

					mapForDS.put("referralPriority", referralPriority);
				}

				if (request.getParameter("referVisitDate") != null
						&& !request.getParameter("referVisitDate").equals("")) {
					referVisitDate = request.getParameter("referVisitDate");
					Date referralDate = HMSUtil
							.convertStringTypeDateToDateType(referVisitDate);
					mapForDS.put("referralDate", referralDate);
				}
				if (request.getParameter("referTo") != null
						&& !request.getParameter("referTo").equals("")) {
					String referTo = request.getParameter("referTo");
					mapForDS.put("referTo", referTo);
					if (referTo.equalsIgnoreCase("empanel")  || referTo.equalsIgnoreCase("both")) {

						if (request.getParameter("referhospital") != null
								&& !request.getParameter("referhospital")
										.equals("")) {
							referImpannelhospital = Integer.parseInt(request
									.getParameter("referhospital"));
							mapForDS.put("referImpannelhospital",
									referImpannelhospital);
						}

						if (request.getParameter("referdays") != null
								&& !request.getParameter("referdays")
										.equals("")) {
							try {
								int referdays = Integer.parseInt(request
										.getParameter("referdays"));
								Date referalTillDate = HMSUtil.addDaysToDate(
										referVisitDate, referdays);
								mapForDS.put("referdays", referdays);
								mapForDS.put("referalTillDate", referalTillDate);
							} catch (Exception e) {
								e.printStackTrace();
							}

						}

						if (request.getParameter("referral_treatment_type") != null
								&& !request.getParameter(
										"referral_treatment_type").equals("")) {
							try {
								String referral_treatment_type = request
										.getParameter("referral_treatment_type");
								mapForDS.put("referral_treatment_type",
										referral_treatment_type);
							} catch (Exception e) {
								e.printStackTrace();
							}

						}
						if (request.getParameter("referredFor") != null
								&& !request.getParameter("referredFor").equals(
										"")) {
							try {
								String referredFor = request
										.getParameter("referredFor");
								mapForDS.put("referredFor", referredFor);
							} catch (Exception e) {
								e.printStackTrace();
							}

						}

					}
				}

				if (request.getParameter("referdepartment") != null
						&& !request.getParameter("referdepartment").equals("")) {
					Integer referdDepartment = Integer.parseInt(request
							.getParameter("referdepartment"));
					mapForDS.put("referdepartment", referdDepartment);
				}

				if (request.getParameter("refereddoctor") != null
						&& !request.getParameter("refereddoctor").equals("")) {
					Integer refereddoctor = Integer.parseInt(request
							.getParameter("refereddoctor"));
					mapForDS.put("refereddoctor", refereddoctor);
				}

				if (request.getParameter("referralNote") != null
						&& !request.getParameter("referralNote").equals("")) {
					String referralNote = request.getParameter("referralNote");
					mapForDS.put("referralNote", referralNote);
				}

				if (request.getParameter("patientAdvise") != null
						&& !request.getParameter("referralNote").equals("")) {
					String patientAdvise = request
							.getParameter("patientAdvise");
					mapForDS.put("patientAdvise", patientAdvise);
				}

			}
		}

		List<Integer> parkNuringIds = new ArrayList<Integer>();
		List<String> nursingTypeList= new ArrayList<String>();
		List<String> treatmentProcedureNameList = new ArrayList<String>();
		List<Integer> treatmentFrequencyList = new ArrayList<Integer>();
		List<Integer> treatmentNoOfDaysList = new ArrayList<Integer>();
		List<String> treatmentRemarkList = new ArrayList<String>();
		List<Integer> treatmentAlertList = new ArrayList<Integer>();
		int procedureHeaderId = 0;
	
		if (request.getParameter("procedureHeaderId") != null
				&& Integer.parseInt(request.getParameter("procedureHeaderId")) >= 0) {
			procedureHeaderId = Integer.parseInt(request
					.getParameter("procedureHeaderId"));
		}
		
	
		
		int nursinghdb = 0;
		if (request.getParameter("nursinghdb") != null
				&& Integer.parseInt(request.getParameter("nursinghdb")) >= 0) {
			nursinghdb = Integer.parseInt(request.getParameter("nursinghdb"));
		}

		pvmsArr = new String[nursinghdb + 1];
		j = 0;
		for (int i = 0; i <= nursinghdb; i++) {
			if (request.getParameter("procedureName_nursing" + j) != null
					&& !request.getParameter("procedureName_nursing" + j)
							.equals("")) {
				String procedureName = request
						.getParameter("procedureName_nursing" + j);
				int index1 = procedureName.lastIndexOf("[");
				int index2 = procedureName.lastIndexOf("]");
				index1++;
				pvmsArr[i] = procedureName.substring(index1, index2);

				treatmentProcedureNameList.add(pvmsArr[i]);
				int procedureDetailId = 0;
				if (request.getParameter("procedureDetailId" + j) != null
						&& !request.getParameter("procedureDetailId" + j)
								.equals("")) {
					procedureDetailId = Integer.parseInt(request
							.getParameter("procedureDetailId" + j));
				}
				parkNuringIds.add(procedureDetailId);
				
				String nt =null;
				if (request.getParameter("procedureType" + j) != null
						&& !request.getParameter("procedureType" + j)
								.equals("")) {
					nt = request
							.getParameter("procedureType" + j);
				}
				nursingTypeList.add(nt);
				
				
				int freaquency = 0;
				if (request.getParameter("frequency_nursing" + j) != null
						&& !request.getParameter("frequency_nursing" + j)
								.equals("")) {
					freaquency = Integer.parseInt(request
							.getParameter("frequency_nursing" + j));
					treatmentFrequencyList.add(freaquency);
				}

				int noOfDays = 0;
				if (request.getParameter("noOfDays_nursing" + j) != null
						&& !request.getParameter("noOfDays_nursing" + j)
								.equals("")) {
					noOfDays = Integer.parseInt(request
							.getParameter("noOfDays_nursing" + j));
					treatmentNoOfDaysList.add(noOfDays);
				}

				String remark_nursing = "";
				if (request.getParameter("remark_nursing" + j) != null
						&& !request.getParameter("remark_nursing" + j).equals(
								"")) {
					remark_nursing = request.getParameter("remark_nursing" + j);
					treatmentRemarkList.add(remark_nursing);
				}

				String alert = "";
				if (request.getParameter("alert_nursing" + j) != null
						&& !request.getParameter("alert_nursing" + j)
								.equals("")) {
					alert = request.getParameter("alert_nursing" + j);
					if (alert.equals("on")) {
						treatmentAlertList.add(1);
					}
				}
			}
			j++;
		}
		mapForDS.put("procedureHeaderId", procedureHeaderId);
		
		
		mapForDS.put("nursingTypeList", nursingTypeList);
		
		
		mapForDS.put("parkNuringIds", parkNuringIds);
		mapForDS.put("nursingprocedure", treatmentProcedureNameList);
		mapForDS.put("nursingfrequency", treatmentFrequencyList);
		mapForDS.put("nursingdays", treatmentNoOfDaysList);
		mapForDS.put("nursingremarks", treatmentRemarkList);
		mapForDS.put("nursingalert", treatmentAlertList);

		int therapyhdb = 0;
		List<Integer> therapyIds = new ArrayList<Integer>();
		List<String> therapyNameList = new ArrayList<String>();
		List<String> therapyRemarkList = new ArrayList<String>();
		String appointmentDate = null;
		String appointmentTime = null;
		List<String> therapyAppointmentStatusList = new ArrayList<String>();
		List<String> therapyAppointmentDateList = new ArrayList<String>();
		List<String> therapyAppointmentTimeList = new ArrayList<String>();
		List<String> teethTreatmentList = new ArrayList<String>();
		if (request.getParameter("therapyhdb") != null
				&& Integer.parseInt(request.getParameter("therapyhdb")) >= 0) {
			therapyhdb = Integer.parseInt(request.getParameter("therapyhdb"));
		}
		if (request.getParameter("appointmentDate") != null
				&& request.getParameter("appointmentDate") != "") {
			appointmentDate = request.getParameter("appointmentDate");
		}
		if (request.getParameter("appointmentTime") != null
				&& request.getParameter("appointmentTime") != "") {
			appointmentTime = request.getParameter("appointmentTime");
		}
		pvmsArr = new String[therapyhdb + 1];
		j = 0;
		for (int i = 0; i <= therapyhdb; i++) {
			if (request.getParameter("therapy_nursing" + j) != null
					&& !request.getParameter("therapy_nursing" + j).equals("")) {
				String therapyName = request
						.getParameter("therapy_nursing" + j);
				int index1 = therapyName.lastIndexOf("[");
				int index2 = therapyName.lastIndexOf("]");
				index1++;
				pvmsArr[i] = therapyName.substring(index1, index2);

				therapyNameList.add(pvmsArr[i]);
				int therapyDetailId = 0;
				if (request.getParameter("therapyDetailId" + j) != null
						&& !request.getParameter("therapyDetailId" + j).equals(
								"")) {
					therapyDetailId = Integer.parseInt(request
							.getParameter("therapyDetailId" + j));
				}
				therapyIds.add(therapyDetailId);

				String remark_therapy = "";
				if (request.getParameter("remark_therapy" + j) != null
						&& !request.getParameter("remark_therapy" + j).equals(
								"")) {
					remark_therapy = request.getParameter("remark_therapy" + j);
					therapyRemarkList.add(remark_therapy);
				}

				if (request.getParameter("appointStatus" + j) != null){	
					therapyAppointmentStatusList.add(request.getParameter("appointStatus" + j));
				}
				else
					therapyAppointmentStatusList.add("");
				if (request.getParameter("appointmentDate" + j) != null){	
					therapyAppointmentDateList.add(request.getParameter("appointmentDate" + j));
				}
				else
					therapyAppointmentDateList.add("");
				
				if (request.getParameter("appointmentTime" + j) != null){	
					therapyAppointmentTimeList.add(request.getParameter("appointmentTime" + j));
				}
				else
					therapyAppointmentTimeList.add("");
				
				if (request.getParameter("proc_treatment_teeth" + j) != null){	
					teethTreatmentList.add(request.getParameter("proc_treatment_teeth" + j));
				}
				else
					teethTreatmentList.add("");
				
				
			}
			j++;
		}


		mapForDS.put("therapyIds", therapyIds);
		mapForDS.put("therapyNameList", therapyNameList);
		mapForDS.put("therapyRemarkList", therapyRemarkList);
		mapForDS.put("appointmentDate", appointmentDate);
		mapForDS.put("appointmentTime", appointmentTime);
		mapForDS.put("therapyAppointmentStatusList", therapyAppointmentStatusList);
		mapForDS.put("therapyAppointmentDateList", therapyAppointmentDateList);
		mapForDS.put("therapyAppointmentTimeList", therapyAppointmentTimeList);
		mapForDS.put("teethTreatmentList", teethTreatmentList);
		
		/** End Code **/

		// System.out.println(request.getParameter("admissionDate")
		// +request.getParameter("admissionWard")
		// +" s "+request.getParameter("admissionAdvised") );

		// mapForDS.put("referredDept", referredDept);
		mapForDS.put("nextVisitDate", nextVisitDate);

		mapForDS.put("pastMedicalHistory", pastMedicalHistory);
		mapForDS.put("presentComplain", presentComplain);
		mapForDS.put("presentAdvice", presentAdvice);// fayaz added
		mapForDS.put("presentIllness", presentIllness);
		mapForDS.put("pastHistory", pastHistory);
		mapForDS.put("personalHistory", personalHistory);
		mapForDS.put("familyHistory", familyHistory);
		// mapForDS.put("otherFamilyHistorty", otherFamilyHistorty);
		mapForDS.put("allergies", allergies);
		mapForDS.put("reviewAt", reviewAt);
		mapForDS.put("otherDetails", otherDetails);
		mapForDS.put("onExamination", onExamination);
		mapForDS.put("days", days);
		mapForDS.put("returnfromHospital", returnfromHospital);
		mapForDS.put("referedToMH", referedToMH);
		mapForDS.put("mh", mh);
		mapForDS.put("mhDepartment", mhDepartment);
		mapForDS.put("mhReferredFor", mhReferredFor);
		mapForDS.put("hospName", hospName);
		mapForDS.put("doa", doa);
		mapForDS.put("dod", dod);
		mapForDS.put("gpe_examination", gpe_examination);
		mapForDS.put("rr", rr);
		mapForDS.put("systamicExam", systamicExam);
		mapForDS.put("riskFactor", riskFactor);
		mapForDS.put("bmi", bmi);
		mapForDS.put("idealWeight", idealWeight);
		// --------- data for diagnosis------------
		mapForDS.put("diagnosisIdAray", diagnosisIdAray);
		mapForDS.put("deptId", departmentId);
		mapForDS.put("adviceOnDischarge", adviceOnDischarge);
		mapForDS.put("pastDiagnosis", pastDiagnosis);
		mapForDS.put("pastdisposal", pastdisposal);
		mapForDS.put("threpytypeId", threpytypeId);
		mapForDS.put("DaysPhy", DaysPhy);
		mapForDS.put("DurationPhy", DurationPhy);
		mapForDS.put("mapForDSPro", mapForDSPro);
		mapForDS.put("priority", priority);

		Map<String, Object> returnMap = new HashMap<String, Object>();
		Map<String, Object> returnPro1 = new HashMap<String, Object>();
		Map<String, Object> returnPro2 = new HashMap<String, Object>();
		Map<String, Object> returnPro3 = new HashMap<String, Object>();
		boolean bool = false;

		boolean bool1 = false;
int opdPatientDetailsId=0;
		boolean dublicateVisit = false;

		String orderSeqNo = "";
		//orderSeqNo = labHandlerService.generateOrderNumber(hospitalId);
		//mapForDS.put("orderSeqNo", orderSeqNo);

		Box box = HMSUtil.getBox(request);
		mapForDS.put("box", box);
		String currentDepartmentCode = null;
		returnMap = opdHandlerService.submitOPDPatientDetails(mapForDS);
        
		if (returnMap.get("currentDepartmentCode") != null) {
			currentDepartmentCode = (String) returnMap.get("currentDepartmentCode");
		}

		
		if (returnMap.get("succesfullyAdded") != null) {
			bool = (Boolean) returnMap.get("succesfullyAdded");
		}

		if (returnMap.get("dublicateVisit") != null) {
			dublicateVisit = (Boolean) returnMap.get("dublicateVisit");
		}
		if (returnMap.get("opdPatientDetailsId") != null) {
			opdPatientDetailsId = (Integer) returnMap.get("opdPatientDetailsId");
		}

		if (returnMap.get("orderSeqNo") != null) {
			orderSeqNo = (String) returnMap.get("orderSeqNo");
		}
		
		// comment By Tirath

		// if (returnMap.get("orderSeqNo") != null) {
		// orderSeqNo = (String) returnMap.get("orderSeqNo");
		// }

		String message = null;

		if (bool) {
			returnPro3 = opdHandlerService
					.submitProPatientSicknessDetails(mapForDSPro);
			if (returnPro3.get("succesfullyAdded") != null) {
				bool1 = (Boolean) returnMap.get("succesfullyAdded");
			}
			if (bool1) {
				returnPro1 = opdHandlerService
						.submitProPatientTreatmentDetails(mapForDSPro);
			}

			String departmentCode = "";
			Map<String, Object> deptMap = opdHandlerService
					.getDepartmentNameFromId(departmentId);
			if (deptMap.get("deptName") != null) {
				departmentName = (String) deptMap.get("deptName");
			}
			if (deptMap.get("deptCode") != null) {
				departmentCode = (String) deptMap.get("deptCode");
			}
			mapForDS.put("deptId", departmentId);
			if (flag.equals("opd")) {

				map = opdHandlerService.getWaitingPatientList(mapForDS);
				message = "OPD Details Submitted.";
				jsp = OPD_WAITING;
				submitData = true;
			}
		}

		else {
			map = opdHandlerService.getWaitingPatientList(mapForDS);

			if (dublicateVisit)
				message = "Details have already been saved";
			else
				message = "Error Occurred in Submitting Details.";
			jsp = OPD_WAITING_LIST_JSP;
		}
		jsp += ".jsp";
		if (request.getParameter("unitId") != null
				&& !(request.getParameter("unitId").equals(""))) {
			map.put("unitId", Integer.parseInt(request.getParameter("unitId")));
		}
		// Ranjesh Prasad: Pacs Integration Start
		/*if (hl7Flag) {
			PacsHL7Service pacsHL7Service = new PacsHL7Service();
			String query = "";
			// String query="and dt.amount='0.00' and dg.visit_id="+visitId;
			try {
				pacsHL7Service.sendService(query);
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			} catch (SQLException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}*/
		// Ranjesh Prasad: Pacs Integration End
		map.put("message", message);
		map.put("opdPatientDetailsId", opdPatientDetailsId);
		map.put("deptId", departmentId);
		map.put("visitNoForReport", visitNo);
		map.put("orderNoForReport", orderSeqNo);
		map.put("serviceNoForReport", serviceNo);
		map.put("visitId", visitId);
		map.put("hinNoForReport", hinNo);
		title = "Patient Details";
		map.put("urlDept", urlDept);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("referedToMH", referedToMH);
		map.put("submitData", submitData);
		map.put("currentDepartmentCode", currentDepartmentCode);
		
		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings("unused")
	public ModelAndView submitOPDPatientDetailsChange(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		int hinId = Integer.parseInt(request.getParameter("hinId"));
		int departmentId = Integer.parseInt(request
				.getParameter("departmentId"));
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		int hospitalId = Integer.parseInt(request.getParameter("hospitalId"));
		// details captured for opd patient details table
		int empId = 0;
		if (request.getParameter("empId") != null
				&& request.getParameter("empId") != "") {
			empId = Integer.parseInt(request.getParameter("empId"));
		}
		int height = 0;
		int weight = 0;
		int pulse = 0;
		int visitNo = 0;
		int days = 0;
		String bp = null;
		String temperature = null;
		String serviceNo = null;
		String hinNo = null;
		String plan = null;
		String initialDiagnosis = null;
		String disposal = null;
		String nextVisitDate = null;
		String afmsDescription = null;
		String userName = null;
		String flag = null;
		boolean submitData = false;
		String urlDept = "";
		String departmentName = "";
		String deleteDrug = "";
		String deleteInv = "";

		// //System.out.println(":::::::::::::::::::::"+box);
		if (!request.getParameter("flag").equals("")) {
			flag = request.getParameter("flag");
		}

		/*
		 * if( !request.getParameter("height").equals("")){
		 * height=Integer.parseInt(request.getParameter("height")); } if(
		 * !request.getParameter("disposal").equals("") &&
		 * !request.getParameter("disposal").equals("0")){ disposal=
		 * request.getParameter("disposal"); }
		 */
		/*
		 * if(!request.getParameter("weight").equals("")){
		 * weight=Integer.parseInt(request.getParameter("weight")); }
		 */
		/*
		 * if(!request.getParameter("pulse").equals("")){
		 * pulse=Integer.parseInt(request.getParameter("pulse")); }
		 */
		if (!request.getParameter(VISIT_NUMBER).equals("")) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
		}
		if (request.getParameter("deleteInvItem") != null
				&& !request.getParameter("deleteInvItem").equals("")) {
			deleteInv = request.getParameter("deleteInvItem");
		}

		// //System.out.println("::::::::1::::::::::::::::::"+request.getParameter("deleteInvItem"));
		// //System.out.println("::::::::2::::::::::::::::::"+request.getParameter("deleteDrugItem"));
		if (request.getParameter("deleteDrugItem") != null
				&& !request.getParameter("deleteDrugItem").equals("")) {
			deleteDrug = request.getParameter("deleteDrugItem");
		}

		/*
		 * if(request.getParameter("bp") != null || request.getParameter("bp")
		 * != ""){ bp=request.getParameter("bp"); }
		 * if(request.getParameter("temperature") != null ||
		 * request.getParameter("temperature") != ""){
		 * temperature=request.getParameter("temperature"); }
		 */
		if (request.getParameter(SERVICE_NO) != null
				|| request.getParameter(SERVICE_NO) != "") {
			serviceNo = request.getParameter(SERVICE_NO);
		}
		if (request.getParameter(HIN_NO) != null
				|| request.getParameter(HIN_NO) != "") {
			hinNo = request.getParameter(HIN_NO);
		}
		if (!request.getParameter("plan").equals("")) {
			plan = request.getParameter("plan");
		}
		/*
		 * String referredDoctars=""; String []referredDoctarsArray= null;
		 * 
		 * if(request.getParameterValues("referredDoctarsId")!=null){
		 * referredDoctarsArray=(String
		 * [])request.getParameterValues("referredDoctarsId"); for(int
		 * i=0;i<referredDoctarsArray.length;i++) { if(i==0)
		 * referredDoctars=referredDoctarsArray[i]; else
		 * referredDoctars=referredDoctars+","+referredDoctarsArray[i]; } } if(
		 * !request.getParameter("initialDiagnosis").equals("")){
		 * initialDiagnosis=request.getParameter("initialDiagnosis"); }
		 */
		/*
		 * if(request.getParameter("relation").equalsIgnoreCase("self")){ if(
		 * !request.getParameter("days").equals("")){
		 * days=Integer.parseInt(request.getParameter("days")); } }
		 */
		if (!request.getParameter("nextVisitDate").equals("")) {
			nextVisitDate = request.getParameter("nextVisitDate");
		}
		/*
		 * if( !request.getParameter("afmsDescription").equals("")){
		 * afmsDescription=request.getParameter("afmsDescription"); }
		 */
		if (!request.getParameter("userName").equals("")) {
			userName = request.getParameter("userName");
		}
		Users user = (Users) session.getAttribute("users");
		Integer userId = user.getEmployee().getId();

		String presentComplain = "";
		String presentIllness = "";
		String pastHistory = "";
		String personalHistory = "";
		String familyHistory = "";
		String onExamination = "";
		String otherDetails = "";

		/*
		 * if(request.getParameter("presentComplain") != null){ presentComplain
		 * = request.getParameter("presentComplain"); }
		 * if(request.getParameter("presentIllness") != null){ presentIllness =
		 * request.getParameter("presentIllness"); }
		 * if(request.getParameter("pastHistory") != null){ pastHistory =
		 * request.getParameter("pastHistory"); }
		 * 
		 * if(request.getParameter("personalHistory") != null){ personalHistory
		 * = request.getParameter("personalHistory"); }
		 * 
		 * if(request.getParameter("familyHistory") != null){ familyHistory =
		 * request.getParameter("familyHistory"); }
		 * 
		 * if(request.getParameter("OtherDetails") != null){ otherDetails =
		 * request.getParameter("OtherDetails"); }
		 */
		if (!request.getParameter("onExamination").equals("")) {
			onExamination = request.getParameter("onExamination");
		}
		String consultationDate = request.getParameter("consultationDate");
		String consultationTime = request.getParameter("consultationTime");

		// details captured for patient prescription header and detail table
		List<String> pvmsNoList = new ArrayList<String>();
		List<String> nomenclatureList = new ArrayList<String>();
		List<Integer> frequencyList = new ArrayList<Integer>();
		List<String> dosageList = new ArrayList<String>();
		List<String> remarksList = new ArrayList<String>();

		List<String> typeLeftRightList = new ArrayList<String>();
		List<String> instructionList = new ArrayList<String>();
		List<Integer> totalList = new ArrayList<Integer>();
		List<Integer> noOfDaysList = new ArrayList<Integer>();
		String[] diagnosisIdAray = null;
		/*
		 * if(request.getParameterValues(DIAGNOSIS_ID)!= null){
		 * diagnosisIdAray=(String [])request.getParameterValues(DIAGNOSIS_ID);
		 * }
		 * 
		 * String referredDept=""; String []referredToDeptArray= null;
		 * if(request.getParameterValues("referredDepartmentId")!= null){
		 * referredToDeptArray=(String
		 * [])request.getParameterValues("referredDepartmentId"); for(int
		 * i=0;i<referredToDeptArray.length;i++) { if(i==0)
		 * referredDept=referredToDeptArray[i]; else
		 * referredDept=referredDept+","+referredToDeptArray[i]; } }
		 */

		int hdb = 1;
		if (Integer.parseInt(request.getParameter("hdb")) != 1) {
			hdb = Integer.parseInt(request.getParameter("hdb"));
		}
		String[] pvmsArr = new String[hdb];
		int j = 1;
		for (int i = 0; i < hdb; i++) {
			if (request.getParameter("nomenclature" + j) != null
					&& !request.getParameter("nomenclature" + j).equals("")) {

				String nomenclature = request.getParameter("nomenclature" + j);
				String nomen = request.getParameter("nomenclature" + j)
						.substring(
								0,
								request.getParameter("nomenclature" + j)
										.indexOf("["));
				int index1 = nomenclature.lastIndexOf("[");
				int index2 = nomenclature.lastIndexOf("]");
				index1++;
				String pvmsNo = nomenclature.substring(index1, index2);
				if (!pvmsNo.equals("")) {
					pvmsArr[i] = pvmsNo;
					int frequencyId = Integer.parseInt(request
							.getParameter("frequency" + j));
					String typeLeftRight = request.getParameter("typeLeftRight"
							+ j);
					String instructionACPC = request
							.getParameter("instructionACPC" + j);
					int noOfDays = Integer.parseInt(request
							.getParameter("noOfDays" + j));
					String dosage = request.getParameter("dosage" + j);
					String remarks = request.getParameter("remarks" + j);
					// int
					// total=Integer.parseInt(request.getParameter("total"+j));
					int total = noOfDays * frequencyId;
					pvmsNoList.add(pvmsArr[i]);
					frequencyList.add(frequencyId);
					nomenclatureList.add(nomen);
					dosageList.add(dosage);
					remarksList.add(remarks);
					totalList.add(total);
					typeLeftRightList.add(typeLeftRight);
					instructionList.add(instructionACPC);
					noOfDaysList.add(noOfDays);
				}
			}
			j++;
		}
		// -------------------fetching values for Investigation
		// template---------------
		List<String> chargeCodeIdList = new ArrayList<String>();
		List<Integer> quantityList = new ArrayList<Integer>();
		List<String> clinicalList = new ArrayList<String>();

		int hiddenValue = 1;
		if (Integer.parseInt(request.getParameter("hiddenValue")) != 1) {
			hiddenValue = Integer.parseInt(request.getParameter("hiddenValue"));
		}
		int temp = 1;
		String[] chargeCodeIdArr = new String[hiddenValue];
		for (int i = 0; i < hiddenValue; i++) {
			if (request.getParameter("chargeCodeName" + temp) != null
					&& !request.getParameter("chargeCodeName" + temp)
							.equals("")) {

				String chargeCodeNameWithId = request
						.getParameter("chargeCodeName" + temp);
				int index1 = chargeCodeNameWithId.lastIndexOf("[");
				int index2 = chargeCodeNameWithId.lastIndexOf("]");
				index1++;
				String chargeCodeId = chargeCodeNameWithId.substring(index1,
						index2);
				if (!chargeCodeId.equals("")) {
					chargeCodeIdArr[i] = chargeCodeId;
					int qty = 1;
					// int
					// qty=Integer.parseInt(request.getParameter("qty"+temp));
					String clinicalNotes = request.getParameter("clinicalNotes"
							+ temp);

					chargeCodeIdList.add(chargeCodeIdArr[i]);
					quantityList.add(qty);
					clinicalList.add(clinicalNotes);
				}
			}
			temp++;
		}

		// mapForDS.put("referredDoctars", referredDoctars);
		mapForDS.put("pvmsNoList", pvmsNoList);
		mapForDS.put("frequencyList", frequencyList);
		mapForDS.put("nomenclatureList", nomenclatureList);
		mapForDS.put("dosageList", dosageList);
		mapForDS.put("remarksList", remarksList);
		mapForDS.put("typeLeftRightList", typeLeftRightList);
		mapForDS.put("instructionList", instructionList);
		mapForDS.put("totalList", totalList);
		mapForDS.put("noOfDaysList", noOfDaysList);
		mapForDS.put("hinId", hinId);
		mapForDS.put("departmentId", departmentId);
		mapForDS.put("userId", userId);
		mapForDS.put("visitId", visitId);
		mapForDS.put("hospitalId", hospitalId);
		mapForDS.put("userName", userName);
		mapForDS.put("deleteInv", deleteInv);
		mapForDS.put("deleteDrug", deleteDrug);
		// ----------data for investigation template------

		mapForDS.put("chargeCodeIdList", chargeCodeIdList);
		mapForDS.put("quantityList", quantityList);
		mapForDS.put("clinicalList", clinicalList);

		// ------------data for opd patient details----------
		mapForDS.put("empId", empId);
		// mapForDS.put("height", height);
		// mapForDS.put("disposal", disposal);
		// mapForDS.put("weight", weight);
		// mapForDS.put("pulse", pulse);
		// mapForDS.put("bp", bp);
		mapForDS.put("consultationDate", consultationDate);
		mapForDS.put("consultationTime", consultationTime);
		// mapForDS.put("temperature", temperature);
		mapForDS.put("afmsDescription", afmsDescription);
		mapForDS.put("plan", plan);
		// mapForDS.put("initialDiagnosis",initialDiagnosis);
		// mapForDS.put("referredDept", referredDept);
		mapForDS.put("nextVisitDate", nextVisitDate);

		// mapForDS.put("presentComplain", presentComplain);
		// mapForDS.put("presentIllness", presentIllness);
		// mapForDS.put("pastHistory", pastHistory);
		// mapForDS.put("personalHistory", personalHistory);
		// mapForDS.put("familyHistory", familyHistory);
		// mapForDS.put("otherDetails", otherDetails);
		// mapForDS.put("onExamination", onExamination);

		// --------- data for diagnosis------------
		mapForDS.put("diagnosisIdAray", diagnosisIdAray);
		mapForDS.put("deptId", departmentId);
		Map<String, Object> returnMap = new HashMap<String, Object>();
		boolean bool = false;
		String orderSeqNo = "";
		String statusMsg = "";
		orderSeqNo = labHandlerService.generateOrderNumber(hospitalId);
		mapForDS.put("orderSeqNo", orderSeqNo);

		returnMap = opdHandlerService.submitOPDPatientDetailsChange(mapForDS);
		if (returnMap.get("succesfullyAdded") != null) {
			bool = (Boolean) returnMap.get("succesfullyAdded");
		}

		if (returnMap.get("statusMsg") != null) {
			statusMsg = (String) returnMap.get("statusMsg");
		}

		// By Tirath
		// if (returnMap.get("orderSeqNo") != null) {
		// orderSeqNo = (String) returnMap.get("orderSeqNo");
		// }

		String message = null;
		/*
		 * if(bool) {
		 * 
		 * map=opdHandlerService.getWaitingPatientList(departmentId);
		 * message="Patient Details Submitted successfully."; }else{
		 * map=opdHandlerService.getWaitingPatientList(departmentId);
		 * message="Error Occurred in Submitting Details."; }
		 */
		if (bool) {
			if (flag.equals("opth")) {
				map = opdHandlerService.getPatientDetails(visitId);
				jsp = OPD_OPHTHALMOLOGY_JSP;
			}
			if (flag.equals("ent")) {
				map = opdHandlerService.showENTJsp(visitId);
				jsp = ENT_JSP;
			}
			if (flag.equals("oncosurgeryCaseSheet")) {
				map = opdHandlerService.showOncosurgeryCaseSheetJsp(visitId);
				jsp = ONCOSURGERY_CASE_SHEET_JSP;
			}

			if (flag.equals("oncosurgery")) {
				map = opdHandlerService.showOncosurgeryJsp(visitId);
				jsp = ONCOSURGERY_JSP;
			}

			if (flag.equals("urologyCaseSheet")) {
				map = opdHandlerService.showUrologyCaseSheetJsp(visitId);
				jsp = UROLOGY_CASE_SHEET_JSP;
			}
			if (flag.equals("obg")) {
				map = opdHandlerService.showOBGJsp(visitId);
				jsp = OBG_JSP;
			}
			if (flag.equals("pediatric")) {

				map = opdHandlerService.getPediatricCaseSheet(visitId);
				/*
				 * pass height and weight values in pediatricCaseSheet from
				 * opdMain
				 */
				map.put("height", height);
				// map.put("weight", weight);
				jsp = PEDIATRIC_CASE_SHEET_JSP;
			}
			if (flag.equals("cardiology")) {
				map = opdHandlerService.getCardiologyDepartmentDetails(visitId);
				jsp = CARDIOLOGY_DEPARTMENT_DETAILS_JSP;

				title = "Cardiology Department Details List";
			}
			if (flag.equals("gastroEndoscopy")) {
				map = opdHandlerService.getGastroEnterologyEndoscopy(visitId);

				jsp = GASTRO_ENTEROLOGY_ENDOSCOPY_JSP;

				title = "Gastro-Enterology Endoscopy List";
			}
			if (flag.equals("gastroColonoscopy")) {
				map = opdHandlerService.getGastroEnterologyColonoscopy(visitId);
				jsp = GASTRO_ENTEROLOGY_COLONOSCOPY_JSP;

			}
			if (flag.equals("antenatal")) {
				map = opdHandlerService.getAntenatalCard(visitId);
				jsp = ANTENATAL_CARD_JSP;

			}
			String departmentCode = "";
			Map<String, Object> deptMap = opdHandlerService
					.getDepartmentNameFromId(departmentId);
			if (deptMap.get("deptName") != null) {
				departmentName = (String) deptMap.get("deptName");
			}
			if (deptMap.get("deptCode") != null) {
				departmentCode = (String) deptMap.get("deptCode");
			}

			// System.out.println("deptment id :" + departmentId);
			mapForDS.put("deptId", departmentId);
			if (flag.equals("opd")) {
				map = opdHandlerService.getWaitingPatientList(mapForDS);
				message = "Patient Details Submitted.";
				jsp = OPD_WAITING_PRES;
				submitData = true;
				if (departmentCode.equalsIgnoreCase("Oph1")) {
					urlDept = "opd?method=showOpdOphthamologyJsp&visitId="
							+ visitId;
				}
				if (departmentCode.equalsIgnoreCase("ENT1")) {
					urlDept = "opd?method=showEntJsp&visitId=" + visitId;
				}
				if (departmentCode.equalsIgnoreCase("Gynae1")) {
					urlDept = "opd?method=showOBGONEJsp&visitId=" + visitId;
				}
				if (departmentCode.equalsIgnoreCase("Paed1")) {
					urlDept = "opd?method=showPediatricCaseSheetJsp&visitId="
							+ visitId;
				}

				if (departmentCode.equalsIgnoreCase("Cardio")) {
					urlDept = "opd?method=showCardiologyDepartmentDetailsJsp&visitId="
							+ visitId;
				}

				if (departmentCode.equalsIgnoreCase("Antenatal Card-OPD")) {
					urlDept = "opd?method=showAntenatalCardJsp&visitId="
							+ visitId;
				}

				if (departmentCode.equalsIgnoreCase("Gastro")) {
					urlDept = "opd?method=showGastroEnterologyEndoscopyJsp&visitId="
							+ visitId;
				}

				if (departmentCode.equalsIgnoreCase("Gastro-Colonology-OPD")) {
					urlDept = "opd?method=showGastroEnterologyColonoscopyJsp&visitId="
							+ visitId;
				}

				if (departmentCode.equalsIgnoreCase("Oncolo")) {
					urlDept = "opd?method=showOncosurgeryCaseSheetJsp&visitId="
							+ visitId;
				}

				if (departmentCode.equalsIgnoreCase("Uro1")) {
					urlDept = "opd?method=showUrologyCaseSheetJsp&visitId="
							+ visitId;
				}

				if (departmentCode.equalsIgnoreCase("Onco1")) {
					urlDept = "opd?method=showOncosurgeryJsp&visitId="
							+ visitId;
				}

			}
		} else {
			map = opdHandlerService.getWaitingPatientList(mapForDS);
			message = "Error Occurred in Submitting Details.";
			jsp = OPD_WAITING_LIST_JSP;
		}

		// jsp = OPD_WAITING_LIST_JSP;
		jsp += ".jsp";

		map.put("deptId", departmentId);
		map.put("visitNoForReport", visitNo);
		map.put("orderNoForReport", orderSeqNo);
		map.put("statusMsg", statusMsg);
		map.put("serviceNoForReport", serviceNo);
		map.put("hinNoForReport", hinNo);
		title = "Patient Details";
		map.put("urlDept", urlDept);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("submitData", submitData);
		return new ModelAndView("indexB", "map", map);
		// return null;
	}

	@SuppressWarnings("unused")
	public ModelAndView showPatientPreviousVisit(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		int hinId = Integer.parseInt(request.getParameter("hinId"));
		int deptId = Integer.parseInt(request.getParameter("deptId"));
		int visitNo = Integer.parseInt(request.getParameter("visitNo"));
		int visitId = Integer.parseInt(request.getParameter("visitId"));

		mapForDS.put("hinId", hinId);
		mapForDS.put("deptId", deptId);
		mapForDS.put("visitNo", visitNo);
		map = opdHandlerService.getPreviousPatientVisit(mapForDS);

		map.put("visitNoForJsp", visitNo);

		jsp = OPD_PREVIOUS_VISIT_JSP;
		jsp += ".jsp";
		title = "Patient Previous Visit";
		map.put("contentJsp", jsp);
		map.put("visitId", visitId);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings("unused")
	public ModelAndView showPatientPreviousVisitForPrescriptionReport(
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		int hinId = Integer.parseInt(request.getParameter("hinId"));
		int deptId = Integer.parseInt(request.getParameter("deptId"));
		int visitNo = Integer.parseInt(request.getParameter("visitNo"));
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		String reportingFor = "";
		if (request.getParameter("reportingFor") != null) {
			reportingFor = request.getParameter("reportingFor");
			mapForDS.put("reportingFor", reportingFor);
		}
		mapForDS.put("hinId", hinId);
		mapForDS.put("deptId", deptId);
		mapForDS.put("visitNo", visitNo);
		mapForDS.put("visitId", visitId);
		map = opdHandlerService.getPreviousPatientVisit(mapForDS);

		map.put("visitNoForJsp", visitNo);

		jsp = OPD_PREVIOUS_VISIT_FOR_PRESCRIPTION_REPORT_JSP;
		// jsp += ".jsp";
		title = "Patient Previous Visit";
		map.put("contentJsp", jsp);
		map.put("visitId", visitId);
		map.put("title", title);

		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView showPatientPreviousVisitForViewScreen(
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		int hinId = Integer.parseInt(request.getParameter("hinId"));
		if (request.getParameter("deptId") != null) {
			int deptId = Integer.parseInt(request.getParameter("deptId"));
			mapForDS.put("deptId", deptId);
		}
		int visitNo = 0;
		if (request.getParameter("visitNo") != null) {
			Integer.parseInt(request.getParameter("visitNo"));
			mapForDS.put("visitNo", visitNo);
		}

		mapForDS.put("hinId", hinId);
		String backFlag = "";
		if (request.getParameter("backFlag") != null) {
			backFlag = request.getParameter("backFlag");
		}

		String hinNo = "";
		if (request.getParameter("hinNo") != null) {
			hinNo = request.getParameter("hinNo");
			mapForDS.put("hinNo", hinNo);
		}

		String reportingFor = "";
		if (request.getParameter("reportingFor") != null) {
			reportingFor = request.getParameter("reportingFor");
			mapForDS.put("reportingFor", reportingFor);
		}
		map = opdHandlerService.getPreviousPatientVisit(mapForDS);
		if (request.getParameter("visitId") != null) {
			int visitId = Integer.parseInt(request.getParameter("visitId"));
			map.put("visitId", visitId);
		}
		if (request.getParameter("token") != null) {
			int token = Integer.parseInt(request.getParameter("token"));
			map.put("token", token);
		}
		if (request.getParameter("flag") != null) {
			map.put("flag", request.getParameter("flag"));
		}
		String medExamType = "";
		if (request.getParameter("jspheading") != null) {
			medExamType = request.getParameter("jspheading");
		}
		String url = "/hms/hms/medicalExam?method=showAnnualMedExamJsp";
		map.put("visitNoForJsp", visitNo);
		map.put("url", url);
		if (backFlag.equals("OPD") || backFlag.equals("dental")
				|| backFlag.equals("ipd") || backFlag.equals("fp") ||backFlag.equals("previousOpd")) {
			jsp = "opd_previousVisitForViewScreen";
		} else {

			map.put("contentJsp", "opd_previousVisitForViewScreen.jsp");
			jsp = "index";
		}
		title = "Patient Previous Visit";
		map.put("backFlag", backFlag);
		map.put("medExamType", medExamType);

		map.put("title", title);

		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView showPatientPreviousVisitForHospitality(
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		int hinId = 0;
		int deptId = 0;
		int visitNo = 0;
		int visitId = 0;
		String backFlag = "";
		String hinNo = "";

		if (request.getParameter("hinNo") != null) {
			hinNo = request.getParameter("hinNo");
		}
		if (request.getParameter("hinId") != null) {
			hinId = Integer.parseInt(request.getParameter("hinId"));
		}
		if (request.getParameter("deptId") != null) {
			deptId = Integer.parseInt(request.getParameter("deptId"));
		}
		if (request.getParameter("visitNo") != null) {
			visitNo = Integer.parseInt(request.getParameter("visitNo"));
		}
		if (request.getParameter("visitId") != null) {
			visitId = Integer.parseInt(request.getParameter("visitId"));
		}
		if (request.getParameter("backFlag") != null) {
			backFlag = request.getParameter("backFlag");
		}
		int token = 0;
		if (request.getParameter("token") != null) {
			token = Integer.parseInt(request.getParameter("token"));
		}
		String FlagFOrMedExamMa = "";

		if (request.getParameter("FlagFOrMedExamMa") != null) {
			FlagFOrMedExamMa = request.getParameter("FlagFOrMedExamMa");

		}
		String medExamType = "";
		if (request.getParameter("jspheading") != null) {
			medExamType = request.getParameter("jspheading");
		}
		mapForDS.put("hinId", hinId);
		mapForDS.put("deptId", deptId);
		mapForDS.put("visitNo", visitNo);
		mapForDS.put("hinNo", hinNo);
		map = opdHandlerService
				.showPatientPreviousVisitForHospitality(mapForDS);

		map.put("visitNoForJsp", visitNo);
		String url = "/hms/hms/medicalExam?method=showAnnualMedExamJsp";
		String jsp = "";
		if (backFlag.equals("OPD") || backFlag.equals("dental")
				|| backFlag.equals("ipd")) {
			jsp = "opd_previousVisitForHospitality";
		} else {

			map.put("contentJsp", "opd_previousVisitForHospitality.jsp");
			jsp = "index";
		}
		/*
		 * jsp = "opd_previousVisitForHospitality"; jsp += ".jsp";
		 */title = "Detail of Hospitalization";
		map.put("visitId", visitId);
		map.put("url", url);
		map.put("medExamType", medExamType);
		map.put("FlagFOrMedExamMa", FlagFOrMedExamMa);
		map.put("token", token);
		map.put("backFlag", backFlag);
		map.put("title", title);

		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView showPatientPreviousVisitForMedicalBoard(
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		int hinId = Integer.parseInt(request.getParameter("hinId"));
		int deptId = Integer.parseInt(request.getParameter("deptId"));
		int visitNo = Integer.parseInt(request.getParameter("visitNo"));
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		String serviceNo = request.getParameter("serviceNo");
		mapForDS.put("hinId", hinId);
		mapForDS.put("deptId", deptId);
		mapForDS.put("visitNo", visitNo);
		mapForDS.put("serviceNo", serviceNo);
		// map = opdHandlerService.getPreviousPatientVisit(mapForDS);
		map = opdHandlerService.getPreviousMedicalBoardDetails(mapForDS);
		map.put("visitNoForJsp", visitNo);

		jsp = "opd_previousVisitForMedicalBoard";
		jsp += ".jsp";
		title = "Patient Previous Visit";
		map.put("contentJsp", jsp);
		map.put("visitId", visitId);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showPatientPreviousVisitForMedicalExamp(
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		int hinId = Integer.parseInt(request.getParameter("hinId"));
		int deptId = Integer.parseInt(request.getParameter("deptId"));
		int visitNo = Integer.parseInt(request.getParameter("visitNo"));
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		String serviceNo = request.getParameter("serviceNo");
		mapForDS.put("hinId", hinId);
		mapForDS.put("deptId", deptId);
		mapForDS.put("visitNo", visitNo);
		mapForDS.put("serviceNo", serviceNo);
		map = opdHandlerService.getPreviousPatientVisit(mapForDS);

		map.put("visitNoForJsp", visitNo);

		jsp = "opd_previousVisitForMedicalExamp";
		jsp += ".jsp";
		title = "Patient Previous Visit";
		map.put("contentJsp", jsp);
		map.put("visitId", visitId);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings("unused")
	public ModelAndView showPatientPreviousVisitForInvestigationReport(
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		int hinId = Integer.parseInt(request.getParameter("hinId"));
		int deptId = Integer.parseInt(request.getParameter("deptId"));
		int visitNo = Integer.parseInt(request.getParameter("visitNo"));
		int visitId = Integer.parseInt(request.getParameter("visitId"));

		mapForDS.put("hinId", hinId);
		mapForDS.put("deptId", deptId);
		mapForDS.put("visitNo", visitNo);
		mapForDS.put("visitId", visitId);

		String reportingFor = "";
		if (request.getParameter("reportingFor") != null) {
			reportingFor = request.getParameter("reportingFor");
			mapForDS.put("reportingFor", reportingFor);
		}
		map = opdHandlerService.getPreviousPatientVisit(mapForDS);

		map.put("visitNoForJsp", visitNo);

		jsp = OPD_PREVIOUS_VISIT_FOR_INVESTIGATION_REPORT_JSP;
		// jsp += ".jsp";
		title = "Patient Previous Visit";
		map.put("contentJsp", jsp);
		map.put("visitId", visitId);
		map.put("title", title);

		return new ModelAndView(jsp, "map", map);
	}

	@SuppressWarnings("unused")
	public ModelAndView showPatientPreviousHinNumber(
			HttpServletRequest request, HttpServletResponse response) {

		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		String hinNo = request.getParameter(HIN_NO_FOR_REPORT);
		// System.out.println("hinNo:::::::" + hinNo);
		mapForDS.put("hinNo", hinNo);

		map = opdHandlerService.showPatientPreviousHinNumber(mapForDS);

		jsp = OPD_PREVIOUS_HIN_JSP;
		jsp += ".jsp";
		title = "Patient Previous Visit";

		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
		// return null;

	}

	@SuppressWarnings("unused")
	public ModelAndView viewPreviousVisit(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		int visitNoForJsp = 0;
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		try {
			visitNoForJsp = Integer.parseInt(request
					.getParameter("visitNoForJsp"));
		} catch (Exception e) {
			e.printStackTrace();
		}

		mapForDS.put("visitId", visitId);

		// map=opdHandlerService.getPatientDetails(visitId);
		map = opdHandlerService.viewPreviousVisit(mapForDS);
		map.put("visitNoForJsp", visitNoForJsp);
		jsp = OPD_VIEW_PREVIOUS_VISIT_JSP;
		jsp += ".jsp";
		title = "Patient Previous Visit";

		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
		// return null;

	}

	public ModelAndView viewPreviousVisitForOPDMain(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		int visitNoForJsp = 0;
		String combinedVisitIds = "";
		int visitId = 0;
		int maxVisitId = 0;
		int minVisitId = 0;
		int originalVisitId = 0;
		int originalVisitNo = 0;

		if (request.getParameter("visitId") != null) {
			combinedVisitIds = request.getParameter("visitId");
		}
		if (!combinedVisitIds.equals("")) {
			String[] idArray = new String[0];
			idArray = combinedVisitIds.split("@");

			visitId = Integer.parseInt(idArray[0]);
			maxVisitId = Integer.parseInt(idArray[1]);
			minVisitId = Integer.parseInt(idArray[2]);
			originalVisitId = Integer.parseInt(idArray[3]);
			originalVisitNo = Integer.parseInt(idArray[4]);
		}
		try {
			visitNoForJsp = Integer.parseInt(request
					.getParameter("visitNoForJsp"));
		} catch (Exception e) {
			e.printStackTrace();
		}

		mapForDS.put("visitId", visitId);

		map = opdHandlerService.viewPreviousVisit(mapForDS);
		map.put("visitNoForJsp", visitNoForJsp);
		jsp = OPD_VIEW_PREVIOUS_VISIT_JSP;
		jsp += ".jsp";
		title = "Patient Previous Visit";

		map.put("contentJsp", jsp);
		map.put("max", maxVisitId);
		map.put("min", minVisitId);
		map.put("originalVisitId", originalVisitId);
		map.put("originalVisitNo", originalVisitNo);

		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView viewPreviousNextVisit(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		int visitNoForJsp = 0;
		int min = 0;
		int originalVisitId = 0;
		int originalVisitNo = 0;
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		int hinId = Integer.parseInt(request.getParameter("hinId"));
		String flag = "";
		if (!request.getParameter("flag").equals("")) {
			flag = request.getParameter("flag");
		}
		if (request.getParameter("flag") != null
				&& !request.getParameter("flag").equals("")) {
			flag = request.getParameter("flag");
		}
		if (request.getParameter("originalVisitNo") != null
				&& !request.getParameter("originalVisitNo").equals("")) {
			originalVisitNo = Integer.parseInt(request
					.getParameter("originalVisitNo"));
		}
		if (request.getParameter("originalVisitId") != null
				&& !request.getParameter("originalVisitId").equals("")) {
			originalVisitId = Integer.parseInt(request
					.getParameter("originalVisitId"));
		}

		if (request.getParameter("min") != null
				&& !request.getParameter("min").equals("")) {
			min = Integer.parseInt(request.getParameter("min"));
		}

		int pre_VisitId = 0;
		try {
			visitNoForJsp = Integer.parseInt(request
					.getParameter("visitNoForJsp"));
		} catch (Exception e) {

		}
		mapForDS.put("visitId", visitId);
		mapForDS.put("flag", flag);
		mapForDS.put("hinId", hinId);
		map = opdHandlerService.viewPreviousNextVisit(mapForDS);

		List<Visit> visitList = (List) map.get("visitList");
		int max = (Integer) map.get("max");
		// int min=(Integer)map.get("min");
		for (Visit visitObj : visitList) {

			if (visitId == visitObj.getId())
				break;
			pre_VisitId = visitObj.getId();

		}

		mapForDS.put("visitId", pre_VisitId);
		map = opdHandlerService.viewPreviousVisit(mapForDS);
		// if(map.get("patientVisitDataList")!=null ){
		// List patientVisitDataList = (List)map.get("patientVisitDataList");
		// if(patientVisitDataList.size()>0){
		jsp = OPD_VIEW_PREVIOUS_VISIT_JSP;
		// }
		// else{
		// jsp="msgForPreviousVisit";
		// }
		jsp += ".jsp";
		title = "Patient Previous Visit";
		map.put("visitNoForJsp", visitNoForJsp);
		map.put("max", max);
		map.put("min", min);
		map.put("originalVisitNo", originalVisitNo);
		map.put("originalVisitId", originalVisitId);
		// map.put("min",min);
		map.put("contentJsp", jsp);
		map.put("title", title);
		// }
		return new ModelAndView("indexB", "map", map);
		// return null;

	}

	@SuppressWarnings("unused")
	public ModelAndView showPatientPreviousPrescription(
			HttpServletRequest request, HttpServletResponse response) {

		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		int visitNo = Integer.parseInt(request.getParameter("visitNo"));
		int hinId = Integer.parseInt(request.getParameter("hinId"));

		mapForDS.put("visitNo", visitNo);
		mapForDS.put("hinId", hinId);

		map = opdHandlerService.showPatientPrevoiusPrescription(mapForDS);

		jsp = OPD_PATIENT_PRESCRIPTION_JSP;

		title = "Patient Previous Visit";

		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getPatientPreviousPrescriptionForCopy(
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		int visitNo = Integer.parseInt(request.getParameter("visitNo"));
		int hinId = Integer.parseInt(request.getParameter("hinId"));

		mapForDS.put("visitNo", visitNo);
		mapForDS.put("hinId", hinId);

		map = opdHandlerService.showPatientPrevoiusPrescription(mapForDS);

		jsp = OPD_PATIENT_PRESCRIPTION_FOR_COPY_JSP;

		title = "Patient Previous Visit";

		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	@SuppressWarnings("unused")
	public ModelAndView showPatientPreviousInvestigation(
			HttpServletRequest request, HttpServletResponse response) {

		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		int visitNo = Integer.parseInt(request.getParameter("visitNo"));
		int hinId = Integer.parseInt(request.getParameter("hinId"));
		int investigation_header_id = 0;
		if (request.getParameter("investigation_header_id") != null) {
			investigation_header_id = Integer.parseInt(request
					.getParameter("investigation_header_id"));
		}

		mapForDS.put("investigation_header_id", investigation_header_id);
		mapForDS.put("visitNo", visitNo);
		mapForDS.put("hinId", hinId);

		// map = opdHandlerService.showPatientPrevoiusInvestigation(mapForDS);
		map = opdHandlerService.showPatientPrevoiusInvestigationNew(mapForDS);
		// jsp = OPD_PATIENT_INVESTIGATION_JSP;
		jsp = "opd_patientInvestigationListNew";
		title = "Patient Previous Visit";

		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
		// return null;

	}

	// ====================code by
	// anamika-----------------------------------------
	public ModelAndView showInvestigationResult(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		map = opdHandlerService.showInvestigationResult(box);
		jsp = "displayInvestigationResult";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
		// return null;

	}

	public ModelAndView getPatientPreviousInvestigationForCopy(
			HttpServletRequest request, HttpServletResponse response) {

		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		int visitNo = Integer.parseInt(request.getParameter("visitNo"));
		int hinId = Integer.parseInt(request.getParameter("hinId"));

		mapForDS.put("visitNo", visitNo);
		mapForDS.put("hinId", hinId);
		int investigation_header_id = 0;
		if (request.getParameter("investigation_header_id") != null) {
			investigation_header_id = Integer.parseInt(request
					.getParameter("investigation_header_id"));
		}

		mapForDS.put("investigation_header_id", investigation_header_id);
		map = opdHandlerService.showPatientPrevoiusInvestigation(mapForDS);

		jsp = OPD_PATIENT_INVESTIGATION_FOR_COPY_JSP;

		title = "Patient Previous Visit";

		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
		// return null;

	}

	@SuppressWarnings("unused")
	public ModelAndView showOPDPatientSearchJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		String jsp = OPD_PATIENT_SEARCH_JSP;
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings("unchecked")
	public ModelAndView showPatientDetails(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		Map<String, Object> patientMap = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		String serviceNo = "";
		String hinNo = "";
		String patientFName = "";
		String patientMName = "";
		String patientLName = "";
		String servFName = "";
		String servMName = "";
		String servLName = "";

		try {
			if (request.getParameter(HIN_NO) != null
					&& !(request.getParameter(HIN_NO).equals(""))) {
				hinNo = request.getParameter(HIN_NO);
				mapForDS.put("hinNo", hinNo);
			}
			if (request.getParameter(SERVICE_NO) != null
					&& !(request.getParameter(SERVICE_NO).equals(""))) {
				serviceNo = request.getParameter(SERVICE_NO);
				mapForDS.put("serviceNo", serviceNo);
			}

			if (request.getParameter(P_FIRST_NAME) != null
					&& !(request.getParameter(P_FIRST_NAME).equals(""))) {
				patientFName = request.getParameter(P_FIRST_NAME);
				mapForDS.put("patientFName", patientFName);
			}
			if (request.getParameter(P_MIDDLE_NAME) != null
					&& !(request.getParameter(P_MIDDLE_NAME).equals(""))) {
				patientMName = request.getParameter(P_MIDDLE_NAME);
				mapForDS.put("patientMName", patientMName);
			}
			if (request.getParameter(P_LAST_NAME) != null
					&& !(request.getParameter(P_LAST_NAME).equals(""))) {
				patientLName = request.getParameter(P_LAST_NAME);
				mapForDS.put("patientLName", patientLName);
			}

			if (request.getParameter(S_FIRST_NAME) != null
					&& !(request.getParameter(S_FIRST_NAME).equals(""))) {
				servFName = request.getParameter(S_FIRST_NAME);
				mapForDS.put("servFName", servFName);
			}
			if (request.getParameter(S_MIDDLE_NAME) != null
					&& !(request.getParameter(S_MIDDLE_NAME).equals(""))) {
				servMName = request.getParameter(S_MIDDLE_NAME);
				mapForDS.put("servMName", servMName);
			}
			if (request.getParameter(S_LAST_NAME) != null
					&& !(request.getParameter(S_LAST_NAME).equals(""))) {
				servLName = request.getParameter(S_LAST_NAME);
				mapForDS.put("servLName", servLName);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		patientMap = opdHandlerService.searchPatientDetails(mapForDS);
		String jsp = "";
		jsp = OPD_PATIENT_SEARCH_JSP + ".jsp";

		map.put("patientMap", patientMap);
		map.put("detailsMap", detailsMap);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings("unused")
	public ModelAndView showSurgeryRequisitionJsp(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		// Map<String, Object> map = new HashMap<String, Object>();
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		int empId = (Integer) session.getAttribute("userId");

		mapForDS.put("visitId", visitId);
		mapForDS.put("empId", empId);
		try {
			map = opdHandlerService.showSurgeryRequisitionJsp(mapForDS);

			jsp = OPD_SURGERY_REQUISITION_JSP;
			jsp += ".jsp";
			title = "Patient Previous Visit";

			map.put("contentJsp", jsp);
			map.put("title", title);
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showAjaxResponseForSurgeryRequisitionJsp(
			HttpServletRequest request, HttpServletResponse response) {

		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		// Map<String, Object> map = new HashMap<String, Object>();
		int departmentId = Integer.parseInt(request
				.getParameter("departmentId"));

		mapForDS.put("departmentId", departmentId);

		try {
			map = opdHandlerService
					.showAjaxResponseForSurgeryRequisitionJsp(mapForDS);
			jsp = OPD_AJAX_RESPONSE_FOR_SUGERY_REQUISITION;
			map.put("contentJsp", jsp);
			map.put("title", title);
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return new ModelAndView(jsp, "map", map);
	}

	@SuppressWarnings("unused")
	public ModelAndView showSurgeryRequisitionJspFromPatientList(
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		int deptId = (Integer) session.getAttribute("deptId");
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		// Map<String, Object> map = new HashMap<String, Object>();
		String hinNo = request.getParameter("hinNo");
		int empId = (Integer) session.getAttribute("userId");
		int orderNo = 0;
		mapForDS.put("empId", empId);
		mapForDS.put("hinNo", hinNo);

		try {
			map = opdHandlerService.showSurgeryRequisitionJspForHin(mapForDS);
			orderNo = (Integer) map.get("orderNo");
			jsp = OPD_SURGERY_REQUISITION_FOR_INPATIENT_JSP;
			jsp += ".jsp";
			map.put("deptId", deptId);
			map.put("contentJsp", jsp);
			map.put("title", title);
			map.put("orderNo", orderNo);
		} catch (RuntimeException e) {
			e.printStackTrace();
		}

		return new ModelAndView("indexB", "map", map);
		// return null;

	}

	public ModelAndView showSurgeryRequisitionForInpatient(
			HttpServletRequest request, HttpServletResponse response) {

		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		// Map<String, Object> map = new HashMap<String, Object>();
		int orderNo = 0;
		int departmentId = Integer.parseInt(request
				.getParameter("departmentId"));
		if (request.getParameter("orderNo") != null) {
			orderNo = Integer.parseInt(request.getParameter("orderNo"));
		}
		try {
			jsp = OPD_AJAX_RESPONSE_SURGERY_REQUISITION_FOR_INPATIENT_JSP;
			map.put("orderNo", orderNo);
			map.put("departmentId", departmentId);
			map.put("contentJsp", jsp);
			map.put("title", title);
		} catch (RuntimeException e) {

			e.printStackTrace();
		}

		return new ModelAndView(jsp, "map", map);
		// return null;

	}

	@SuppressWarnings("unused")
	public ModelAndView getChargeCodeListForAutoComplete(
			HttpServletRequest request, HttpServletResponse response) {

		HttpSession session = request.getSession();
		String itemNameField = "";
		int deptId = 0;
		String departmentIdField = "";
		String autoHint = "";
		Map<String, Object> map = new HashMap<String, Object>();

		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}

			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			// System.out.println("deptId::"+deptId);
			map.put("userName", userName);
			map.put("autoHint", autoHint);
			map.put("deptId", deptId);
			// map = opdHandlerService.getSurListForAutoComplete(map);
			map = opdHandlerService
					.getInvestigationListForAutoCompleteSurgery(map);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = OPD_RESPONSE_FOR_INVESTIGATION_JSP;

		return new ModelAndView(jsp, "map", map);
	}

	@SuppressWarnings("unused")
	/*
	 * public ModelAndView submitSurgeryRequisitionDetailsOPD(
	 * HttpServletRequest request, HttpServletResponse response) {
	 * 
	 * HttpSession session = request.getSession(); Map<String, Object> mapForDS
	 * = new HashMap<String, Object>(); Map<String, Object> map = new
	 * HashMap<String, Object>(); // Map<String, Object> map = new
	 * HashMap<String, Object>(); int hinId =
	 * Integer.parseInt(request.getParameter("hinId")); int visitId =
	 * Integer.parseInt(request.getParameter("visitId")); int deptId = 0; if
	 * (request.getParameter("departmentId") != null) { deptId =
	 * Integer.parseInt(request.getParameter("departmentId"));
	 * 
	 * } String[] chargeCodeId = request.getParameterValues("chargeCodeId");
	 * String requisitionDate = request.getParameter("date"); String
	 * requisitionTime = request.getParameter("time"); String userName =
	 * request.getParameter("userName"); int prescribedDepartmentId =
	 * Integer.parseInt(request .getParameter("prescribedDepartmentId"));
	 * List<Integer> chargeCodeList = new ArrayList<Integer>(); for (int i = 0;
	 * i < chargeCodeId.length; i++) { if (!chargeCodeId[i].equals("")) {
	 * //System.out.println("chargeCodeId::"+chargeCodeId[i]); int chargeCode =
	 * Integer.parseInt(chargeCodeId[i]); chargeCodeList.add(chargeCode); } }
	 * mapForDS.put("hinId", hinId); mapForDS.put("chargeCodeList",
	 * chargeCodeList); mapForDS.put("deptId", deptId); mapForDS.put("userName",
	 * userName); mapForDS.put("prescribedDepartmentId",
	 * prescribedDepartmentId); mapForDS.put("visitId", visitId);
	 * mapForDS.put("requisitionDate", requisitionDate);
	 * mapForDS.put("requisitionTime", requisitionTime);
	 * 
	 * try { map = opdHandlerService.submitSurgeryRequisitionDetails(mapForDS);
	 * if (map.get("addResult") != null && (boolean)
	 * map.get("addResult").equals(true)) { //
	 * map=opdHandlerService.getWaitingPatientList(prescribedDepartmentId);
	 * message = "Surgery Requisition Completed."; jsp =
	 * OPD_MSG_FOR_SURGERY_REQUISITION; } else { //
	 * map=opdHandlerService.getWaitingPatientList(prescribedDepartmentId);
	 * message = "Error in surgery Requisition."; jsp =
	 * OPD_MSG_FOR_SURGERY_REQUISITION; }
	 * 
	 * jsp += ".jsp"; map.put("deptId", deptId); map.put("visitId", visitId);
	 * map.put("message", message); map.put("contentJsp", jsp); map.put("title",
	 * title); } catch (RuntimeException e) {
	 * 
	 * e.printStackTrace(); }
	 * 
	 * return new ModelAndView("indexB", "map", map); // return null;
	 * 
	 * }
	 */
	public ModelAndView submitSurgeryRequisitionDetailsOPD(
			HttpServletRequest request, HttpServletResponse response) {

		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		// Map<String, Object> map = new HashMap<String, Object>();
		int hinId = Integer.parseInt(request.getParameter("hinId"));
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		int deptId = 0;
		if (request.getParameter("departmentId") != null) {
			deptId = Integer.parseInt(request.getParameter("departmentId"));

		}
		String[] chargeCodeId = request.getParameterValues("chargeCodeId");
		String requisitionDate = request.getParameter("date");
		String requisitionTime = request.getParameter("time");
		String userName = request.getParameter("userName");
		String pacRequird = request.getParameter("pacRequird");

		int prescribedDepartmentId = Integer.parseInt(request
				.getParameter("prescribedDepartmentId"));
		List<Integer> chargeCodeList = new ArrayList<Integer>();
		for (int i = 0; i < chargeCodeId.length; i++) {
			if (!chargeCodeId[i].equals("")) {
				// System.out.println("chargeCodeId::"+chargeCodeId[i]);
				int chargeCode = Integer.parseInt(chargeCodeId[i]);
				chargeCodeList.add(chargeCode);
			}
		}
		mapForDS.put("pacRequird", pacRequird);
		mapForDS.put("hinId", hinId);
		mapForDS.put("chargeCodeList", chargeCodeList);
		mapForDS.put("deptId", deptId);
		mapForDS.put("userName", userName);
		mapForDS.put("prescribedDepartmentId", prescribedDepartmentId);
		mapForDS.put("visitId", visitId);
		mapForDS.put("requisitionDate", requisitionDate);
		mapForDS.put("requisitionTime", requisitionTime);

		try {
			map = opdHandlerService.submitSurgeryRequisitionDetails(mapForDS);
			if (map.get("addResult") != null
					&& (boolean) map.get("addResult").equals(true)) {
				// map=opdHandlerService.getWaitingPatientList(prescribedDepartmentId);
				message = "Surgery Requisition Completed.";
				jsp = OPD_MSG_FOR_SURGERY_REQUISITION;
			} else {
				// map=opdHandlerService.getWaitingPatientList(prescribedDepartmentId);
				message = "Error in surgery Requisition.";
				jsp = OPD_MSG_FOR_SURGERY_REQUISITION;
			}

			jsp += ".jsp";
			map.put("deptId", deptId);
			map.put("visitId", visitId);
			map.put("message", message);
			map.put("contentJsp", jsp);
			map.put("title", title);
		} catch (RuntimeException e) {

			e.printStackTrace();
		}

		return new ModelAndView("indexB", "map", map);
	}

	/*
	 * public ModelAndView submitSurgeryRequisitionDetailsForInpatient(
	 * HttpServletRequest request, HttpServletResponse response) {
	 * 
	 * HttpSession session = request.getSession(); Map<String, Object> mapForDS
	 * = new HashMap<String, Object>(); int orderNo = 0; String pStatus = "";
	 * int hinId = Integer.parseInt(request.getParameter("hinId"));
	 * 
	 * int deptId = Integer.parseInt(request.getParameter("deptId")); String[]
	 * chargeCodeId = request.getParameterValues("chargeCodeId"); if
	 * (request.getParameter("orderNo") != null) { orderNo =
	 * Integer.parseInt(request.getParameter("orderNo")); } if
	 * (request.getParameter("patientStatus") != null) { pStatus =
	 * request.getParameter("patientStatus"); } String requisitionDate =
	 * request.getParameter("date"); String requisitionTime =
	 * request.getParameter("time"); String userName =
	 * request.getParameter("userName"); Users user = (Users)
	 * session.getAttribute("users"); int docId = 0; if
	 * (request.getParameter("surgeonName") != null) { docId =
	 * Integer.parseInt(request.getParameter("surgeonName")); }
	 * 
	 * int prescribedDepartmentId = Integer.parseInt(request
	 * .getParameter("prescribedDepartmentId")); List<Integer> chargeCodeList =
	 * new ArrayList<Integer>();
	 * 
	 * if (chargeCodeId != null) { for (int i = 0; i < chargeCodeId.length; i++)
	 * { if (!chargeCodeId[i].equals("")) {
	 * //System.out.println("chargeCodeId::"+chargeCodeId[i]); int chargeCode =
	 * Integer.parseInt(chargeCodeId[i]); chargeCodeList.add(chargeCode); } } }
	 * mapForDS.put("hinId", hinId); mapForDS.put("chargeCodeList",
	 * chargeCodeList); mapForDS.put("deptId", deptId); mapForDS.put("userName",
	 * userName); mapForDS.put("docId", docId);
	 * mapForDS.put("prescribedDepartmentId", prescribedDepartmentId);
	 * mapForDS.put("orderNo", orderNo); mapForDS.put("requisitionDate",
	 * requisitionDate); mapForDS.put("requisitionTime", requisitionTime);
	 * mapForDS.put("pStatus", pStatus); mapForDS.put("user", user);
	 * 
	 * try { boolean bool = opdHandlerService
	 * .submitSurgeryRequisitionDetailsForInpatient(mapForDS); if (bool) {
	 * message = "Surgery Requisition Completed !!Do you want to print ?"; jsp =
	 * OPD_MSG_SURGERY_REQUISITION_FOR_INPATIENT; } else { message =
	 * "Error Occured !! Try Again !!"; jsp =
	 * OPD_MSG_SURGERY_REQUISITION_FOR_INPATIENT; } jsp += ".jsp";
	 * map.put("orderNo", orderNo); map.put("message", message);
	 * map.put("contentJsp", jsp); map.put("title", title); } catch
	 * (RuntimeException e) {
	 * 
	 * e.printStackTrace(); } return new ModelAndView("indexB", "map", map); }
	 */
	public ModelAndView submitSurgeryRequisitionDetailsForInpatient(
			HttpServletRequest request, HttpServletResponse response) {

		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		int orderNo = 0;
		String pStatus = "";
		String pacRequird = "";
		int hinId = Integer.parseInt(request.getParameter("hinId"));

		int deptId = Integer.parseInt(request.getParameter("deptId"));
		String[] chargeCodeId = request.getParameterValues("chargeCodeId");
		if (request.getParameter("orderNo") != null) {
			orderNo = Integer.parseInt(request.getParameter("orderNo"));
		}
		if (request.getParameter("patientStatus") != null) {
			pStatus = request.getParameter("patientStatus");
		}

		if (request.getParameter("pacRequird") != null) {
			pacRequird = request.getParameter("pacRequird");
		}

		String requisitionDate = request.getParameter("date");
		String requisitionTime = request.getParameter("time");
		String userName = request.getParameter("userName");
		Users user = (Users) session.getAttribute("users");
		int docId = 0;
		if (request.getParameter("surgeonName") != null) {
			docId = Integer.parseInt(request.getParameter("surgeonName"));
		}

		int prescribedDepartmentId = Integer.parseInt(request
				.getParameter("prescribedDepartmentId"));
		List<Integer> chargeCodeList = new ArrayList<Integer>();

		if (chargeCodeId != null) {
			for (int i = 0; i < chargeCodeId.length; i++) {
				if (!chargeCodeId[i].equals("")) {
					int chargeCode = Integer.parseInt(chargeCodeId[i]);
					chargeCodeList.add(chargeCode);
				}
			}
		}
		mapForDS.put("pacRequird", pacRequird);
		mapForDS.put("hinId", hinId);
		mapForDS.put("chargeCodeList", chargeCodeList);
		mapForDS.put("deptId", deptId);
		mapForDS.put("userName", userName);
		mapForDS.put("docId", docId);
		mapForDS.put("prescribedDepartmentId", prescribedDepartmentId);
		mapForDS.put("orderNo", orderNo);
		mapForDS.put("requisitionDate", requisitionDate);
		mapForDS.put("requisitionTime", requisitionTime);
		mapForDS.put("pStatus", pStatus);
		mapForDS.put("user", user);

		try {
			boolean bool = opdHandlerService
					.submitSurgeryRequisitionDetailsForInpatient(mapForDS);
			if (bool) {
				message = "Surgery Requisition Completed !!Do you want to print ?";
				jsp = OPD_MSG_SURGERY_REQUISITION_FOR_INPATIENT;
			} else {
				message = "Error Occured !! Try Again !!";
				jsp = OPD_MSG_SURGERY_REQUISITION_FOR_INPATIENT;
			}
			jsp += ".jsp";
			map.put("orderNo", orderNo);
			map.put("message", message);
			map.put("contentJsp", jsp);
			map.put("title", title);
		} catch (RuntimeException e) {

			e.printStackTrace();
		}
		return new ModelAndView("indexB", "map", map);
	}

	// ----------------------------End of methods by
	// vikas-------------------------

	// -------------------------------Methods For OPD Ophthalmology By
	// Ritu-------------------------

	public ModelAndView showOpdOphthamologyJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter("visitId") != null) {
			visitId = Integer.parseInt(request.getParameter("visitId"));
		}
		map = opdHandlerService.getPatientDetails(visitId);
		String jsp = "";
		jsp = OPD_OPHTHALMOLOGY_JSP;
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView submitOphthalmologyDetails(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		String userName = "";

		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		HttpSession session = request.getSession();

		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			box.put("hospitalId", hospitalId);
		}
		if (session.getAttribute(LOGIN_NAME) != null) {
			userName = (String) session.getAttribute(LOGIN_NAME);
			box.put("userName", userName);
		}
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		box.put("visitId", visitId);
		int departmentId = (Integer) session.getAttribute("deptId");
		map = opdHandlerService.submitOphthalmologyDetails(box);
		Boolean saved = (Boolean) map.get("saved");
		String message = "";
		String jsp = "";
		if (saved) {
			message = "Opthalmology Information Saved Successfully. Do you want to print ?";
			jsp = "messageForOphthalmology";
		} else {
			message = "Error Occured!! Try Again !!";
			jsp = "messageSomeTry";
		}
		map.put("deptId", departmentId);
		map.put("message", message);
		map.put("visitId", visitId);
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView viewPatientOphthalmologyDetails(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";

		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}

		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showOpdOphthamologyJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.getPatientOphthalmologyDetails(parameterMap);

		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = VIEW_OPD_OPHTHALMOLOGY_JSP;
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView showOphthalmologyDiagnosisJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int visitId = 0;
		if (request.getParameter("visitId") != null) {
			visitId = Integer.parseInt(request.getParameter("visitId"));
		}
		map = opdHandlerService.getPatientDetails(visitId);
		detailsMap = opdHandlerService.getFrequencyList();
		map.put("detailsMap", detailsMap);
		String jsp = "";
		jsp = OPD_OPHTHALMOLOGY_DIAGNOSIS_JSP;
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView submitOphthalmologyDiagnosis(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int hospitalId = 0;
		String userName = "";

		Box box = HMSUtil.getBox(request);

		HttpSession session = request.getSession();
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			box.put("hospitalId", hospitalId);
		}
		if (session.getAttribute(LOGIN_NAME) != null) {
			userName = (String) session.getAttribute(LOGIN_NAME);
			box.put("userName", userName);
		}
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		box.put("visitId", visitId);
		int departmentId = (Integer) session.getAttribute("deptId");
		map = opdHandlerService.submitOphthalmologyDiagnosis(box);
		Boolean saved = (Boolean) map.get("saved");
		String message = "";
		String jsp = "";
		if (saved) {
			message = "Opthalmology Diagnosis Information Saved Successfully. Do you want to print ?";
			jsp = "messageForOphthalmologyDiagnosis";
		} else {
			message = "Some Problem Occured.";
			jsp = "messageSomeTry";
		}
		map.put("deptId", departmentId);
		map.put("message", message);
		map.put("visitId", visitId);
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView viewOphthalmologyDiagnosis(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int visitId = 0;
		int currentVisitId = 0;

		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		map = opdHandlerService.getOphthalmologyDiagnosisDetails(parameterMap);
		map.put("visitId", visitId);
		map.put("currentVisitId", currentVisitId);
		String jsp = "";
		jsp = VIEW_OPHTHALMOLOGY_DIAGNOSIS_JSP;
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView showOphthalmologyRetinalJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int visitId = 0;
		if (request.getParameter("visitId") != null) {
			visitId = Integer.parseInt(request.getParameter("visitId"));
		}
		map = opdHandlerService.getPatientDetails(visitId);

		map.put("detailsMap", detailsMap);
		String jsp = "";
		jsp = OPD_OPHTHALMOLOGY_RETINAL_JSP;
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView submitOphthalmologyRetinal(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int hospitalId = 0;
		String userName = "";

		Box box = HMSUtil.getBox(request);

		HttpSession session = request.getSession();
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			box.put("hospitalId", hospitalId);
		}
		if (session.getAttribute(LOGIN_NAME) != null) {
			userName = (String) session.getAttribute(LOGIN_NAME);
			box.put("userName", userName);
		}

		int visitId = Integer.parseInt(request.getParameter("visitId"));
		box.put("visitId", visitId);
		int departmentId = (Integer) session.getAttribute("deptId");
		map = opdHandlerService.submitOphthalmologyRetinal(box);
		Boolean saved = (Boolean) map.get("saved");
		String message = "";
		String jsp = "";
		if (saved) {
			message = "Opthalmology Retinal Information Saved Successfully. Do you want to print ?";
			jsp = "messageForOphthalmologyRetinal";
		} else {
			message = "Some Problem Occured.";
			jsp = "messageSomeTry";
		}
		map.put("deptId", departmentId);
		map.put("message", message);
		map.put("visitId", visitId);
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView viewOphthalmologyRetinal(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int visitId = 0;
		int currentVisitId = 0;
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		map = opdHandlerService.getOphthalmologyRetinalDetails(parameterMap);
		map.put("visitId", visitId);
		map.put("currentVisitId", currentVisitId);

		String jsp = "";
		jsp = VIEW_OPHTHALMOLOGY_RETINAL_JSP;
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView showOphthalmologyFollowUpJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int visitId = 0;
		if (request.getParameter("visitId") != null) {
			visitId = Integer.parseInt(request.getParameter("visitId"));
		}
		map = opdHandlerService.getOpdOphthalmologyFollowUp(visitId);

		map.put("detailsMap", detailsMap);
		String jsp = "";
		jsp = OPD_OPHTHALMOLOGY_FOLLOW_JSP;
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView submitOphthalmologyFollowUp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int hospitalId = 0;
		String userName = "";

		Box box = HMSUtil.getBox(request);

		HttpSession session = request.getSession();
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			box.put("hospitalId", hospitalId);
		}
		if (session.getAttribute(LOGIN_NAME) != null) {
			userName = (String) session.getAttribute(LOGIN_NAME);
			box.put("userName", userName);
		}

		int visitId = Integer.parseInt(request.getParameter("visitId"));
		box.put("visitId", visitId);
		int departmentId = (Integer) session.getAttribute("deptId");
		map = opdHandlerService.submitOphthalmologyFollowUp(box);
		Boolean saved = (Boolean) map.get("saved");
		String message = "";
		String jsp = "";
		if (saved) {
			message = "Opthalmology Follow Up Information Saved Successfully. Do you want to print ?";
			jsp = "messageForOphthalmologyFollowUp";
		} else {
			message = "Some Problem Occured.";
			jsp = "messageSomeTry";
		}
		map.put("deptId", departmentId);
		map.put("message", message);
		map.put("visitId", visitId);
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView viewOphthalmologyFollowUp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int visitId = 0;
		int currentVisitId = 0;

		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		map = opdHandlerService.getOphthalmologyFollowUpDetails(parameterMap);
		map.put("visitId", visitId);
		map.put("currentVisitId", currentVisitId);

		String jsp = "";
		jsp = VIEW_OPHTHALMOLOGY_FOLLOW_JSP;
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);

	}

	// --------------------------------- End of methods by Ritu
	// ---------------------------------------------

	// ====================code by anamika=================================
	public ModelAndView showAllergyDetailsJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			box.put("hospitalId", hospitalId);
		}
		map = opdHandlerService.showAllergyDetailsJsp(box);
		String jsp = "";
		jsp = "allergy_details";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("hospitalId", hospitalId);
		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView getAllergyTypeListForAutoComplete(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> generalMap = new HashMap<String, Object>();
		String allergyNameField = "";
		int deptId = 0;
		String autoHint = "";

		try {
			if (request.getParameter("requiredField") != null) {
				allergyNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(allergyNameField) != null) {
				autoHint = (request.getParameter(allergyNameField));
			}

			generalMap.put("userName", userName);
			generalMap.put("autoHint", autoHint);
			map = opdHandlerService
					.getAllergyTypeListForAutoComplete(generalMap);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "responseForAllergyType";

		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getAllergyId(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		map = opdHandlerService.getAllergyId(box);
		map.put("counter", box.getInt("counter"));
		String jsp = "responseForAllergy";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView saveAllergyDetails(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		box.put("hospitalId", hospitalId);
		if (session.getAttribute("users") != null) {
			Users user = (Users) session.getAttribute("users");
			box.put("userId", user.getId());
		}
		map = opdHandlerService.saveAllergyDetails(box);
		boolean flag = (Boolean) map.get("flag");
		String message = "";
		if (flag) {
			message = "Record Saved Successfully.";
		} else {
			message = "Try Again.";
		}
		map = opdHandlerService.showAllergyDetailsJsp(box);
		String jsp = "allergy_details.jsp";
		map.put("message", message);
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	// =================================End of
	// code==============================================================
	/**
	 * --------------------------------------------Start of Methods For By
	 * Mansi-------------------------
	 * 
	 */

	// ...................................***** Patient Allergic Drugs
	// *****.............................
	public ModelAndView showPatientAllergicDrugsJsp(HttpServletRequest request,
			HttpServletResponse response) {
		int visitId = Integer.parseInt(request.getParameter("visitId"));

		map = opdHandlerService.getPatientAllergicDrugs(visitId);
		jsp = PATIENT_ALLERGIC_DRUGS_JSP;
		jsp += ".jsp";
		title = "Patient Allergic Drugs List";

		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView getItemList(HttpServletRequest request,
			HttpServletResponse response) {

		String itemNameField = "";
		int visitId = 0;
		String autoHint = "";
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			if (request.getParameter("visitId") != null) {
				visitId = Integer.parseInt(request.getParameter("visitId"));
			}
			// System.out.println("auto::" + autoHint + "itemNameField::"+
			// itemNameField);
			map.put("visitId", visitId);
			map.put("userName", userName);
			map.put("autoHint", autoHint);
			map = opdHandlerService.getItemList(map);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "responseInGrid";
		return new ModelAndView(jsp, "map", map);
	}

	@SuppressWarnings("unchecked")
	public void fillItemsInGrid(HttpServletRequest request,
			HttpServletResponse response) {

		int deptId = 0;
		int hospitalId = 0;
		String userName = "";
		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		Map<String, Object> dataMap = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		String pvmsNo = "";

		try {
			if (request.getParameter("pvmsNo") != null) {
				pvmsNo = request.getParameter("pvmsNo");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		dataMap.put("deptId", deptId);
		dataMap.put("pvmsNo", pvmsNo);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = opdHandlerService.fillItemsInGrid(dataMap);
		if (map.get("itemList") != null) {
			itemList = (List) map.get("itemList");
		}
		StringBuffer sb = new StringBuffer();
		try {
			for (MasStoreItem masStoreItem : itemList) {
				sb.append("<item>");
				sb.append("<id>" + masStoreItem.getId() + "</id>");
				sb.append("<itemClassificationId>"
						+ masStoreItem.getItemClassification().getId()
						+ "</itemClassificationId>");
				sb.append("<pvms>" + masStoreItem.getPvmsNo() + "</pvms>");
				sb.append("</item>");
			}
			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");
		} catch (Exception e) {
			e.printStackTrace();
		}
		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@SuppressWarnings("unchecked")
	public ModelAndView addPatientAllergicDrugs(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		Map<String, Object> returnMap = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		Box box = HMSUtil.getBox(request);
		int hinId = 0;
		int visitId = 0;
		String date = "";
		String time = "";
		int pageNo = 1;
		int noOfRecords = 0;
		String buttonFlag = "";
		int patientAllergicDrugshdId = 0;
		List itemList = new ArrayList();

		HttpSession session = request.getSession();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");
		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
		}
		if (request.getParameter("patientAllergicDrugshdId") != null) {
			patientAllergicDrugshdId = Integer.parseInt(request
					.getParameter("patientAllergicDrugshdId"));
		}

		if (!request.getParameter(VISIT_ID).equals("")) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}

		if (request.getParameter("pageNo") != null) {
			pageNo = Integer.parseInt(request.getParameter("pageNo"));
		}
		if (request.getParameter("counter") != null) {
			noOfRecords = Integer.parseInt(request.getParameter("counter"));
		}
		if (request.getParameter(CHANGED_BY) != null
				&& !(request.getParameter(CHANGED_BY).equals(""))) {
			changedBy = request.getParameter(CHANGED_BY);
		}
		String headerStored = "no";
		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		PatientAllergicDrugsHd patientAllergicDrugshd = new PatientAllergicDrugsHd();
		if (pageNo == 1) {

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);
			patientAllergicDrugshd.setDepartment(masDepartment);

			Patient patient = new Patient();
			patient.setId(hinId);
			patientAllergicDrugshd.setHin(patient);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			patientAllergicDrugshd.setHospital(masHospital);

			Visit visit = new Visit();
			visit.setId(visitId);
			patientAllergicDrugshd.setVisit(visit);

			patientAllergicDrugshd.setLastChgTime(time);
			patientAllergicDrugshd.setLastChgBy(changedBy);

			patientAllergicDrugshd.setStatus("y");
			patientAllergicDrugshd.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(date));

			String referredDept = "";
			String[] referredToDeptArray = null;
			if (request.getParameterValues(DEPARTMENT_ID) != null) {
				referredToDeptArray = (String[]) request
						.getParameterValues(DEPARTMENT_ID);
				for (int i = 0; i < referredToDeptArray.length; i++) {
					if (i == 0)
						referredDept = referredToDeptArray[i];
					else
						referredDept = referredDept + ","
								+ referredToDeptArray[i];
				}
			}

			infoMap.put("visitId", visitId);
			infoMap.put("hospitalId", hospitalId);
			infoMap.put("referredDept", referredDept);
			infoMap.put("patientAllergicDrugshd", patientAllergicDrugshd);
		} else {
			headerStored = "yes";
		}
		infoMap.put("headerStored", headerStored);
		try {
			Vector itemId = box.getVector(ITEM_ID);
			List spInsList = new ArrayList();
			Vector specialInstruction = box.getVector(INSTRUCTIONS);
			ListIterator itr = (ListIterator) specialInstruction.listIterator();
			int counter = 0;

			for (int i = 0; i < itemId.size(); i++) {
				if (!itemId.get(i).toString().equals("")) {
					itemList.add(itemId.get(i));
					counter++;
				}
			}

			noOfRecords = counter;
			while (itr.hasNext()) {
				String ins = (String) itr.next();
				spInsList.add(ins);
			}

			infoMap.put("specialInstruction", spInsList);
			infoMap.put("patientAllergicDrugshdId", patientAllergicDrugshdId);
			infoMap.put("itemList", itemList);
			infoMap.put("userId", userId);
			infoMap.put("visitId", visitId);
		} catch (Exception e) {
			e.printStackTrace();
		}
		boolean success = false;
		String jsp = "";
		String message = "";
		int orderhdId = 0;
		returnMap = opdHandlerService.addPatientAllergicDrugs(infoMap);
		if (returnMap.get("success") != null) {
			success = (Boolean) returnMap.get("success");
		}
		if (success) {
			if (buttonFlag.equals("next")) {
				pageNo++;
				message = "Patient Allergic Drug has been done Successfully";
				map = opdHandlerService.getPatientAllergicDrugs(visitId);
				detailsMap = opdHandlerService.getItem();

				map.put("detailsMap", detailsMap);
				if (returnMap.get("orderhdId") != null) {
					orderhdId = (Integer) returnMap.get("orderhdId");
					map.put("orderhdId", orderhdId);
				}
				String includedJsp = "patientAllergicDrugs.jsp";
				map.put("includedJsp", includedJsp);
				jsp = PATIENT_ALLERGIC_DRUGS_JSP + ".jsp";
			} else {
				jsp = MESSAGE_FOR_PALLIENT_ALLERGIC_DRUGS + ".jsp";
				pageNo++;
				message = "Patient Allergic Drug has been done Successfully.";
			}
		} else {
			jsp = MESSAGE_FOR_PALLIENT_ALLERGIC_DRUGS + ".jsp";
			message = "Patient Allergic Drug has not been done Successfully !!";
		}
		map.put("visitId", visitId);
		map.put("deptId", departmentId);
		map.put("pageNo", pageNo);
		map.put("message", message);
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView viewPatientAllergicDrug(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}

		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showPatientAllergicDrugsJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewPatientAllergicDrug(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = "viewPatientAllergicDrug";
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);

	}

	// ...................................***** Opd Template Department
	// Wise*****.............................
	public ModelAndView showOpdTemplateDepartmentWiseJsp(
			HttpServletRequest request, HttpServletResponse response) {
		int visitId = Integer.parseInt(request.getParameter("visitId"));

		map = opdHandlerService.getOpdTemplateDepartmentWise(visitId);
		jsp = "opdTemplateDepartmentWise";
		jsp += ".jsp";
		title = "Patient History List";

		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView getFileName(HttpServletRequest request,
			HttpServletResponse response) {

		MultipartFormDataRequest mrequest = null;
		Map<String, Object> map = new HashMap<String, Object>();
		map = (Map) request.getSession().getAttribute("map");
		String filePath = "";
		Properties properties = new Properties();
		URL resourcePath = Thread.currentThread().getContextClassLoader()
				.getResource("file.properties");
		try {
			properties.load(resourcePath.openStream());
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		if (MultipartFormDataRequest.isMultipartFormData(request)) {
			try {
				mrequest = new MultipartFormDataRequest(request);
			} catch (UploadException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
			String fileContent = "";
			String uploadURL = properties
					.getProperty("uploadinvestigationfile");
			String whiteList = "*.doc,*.txt,*.rtf,*.DOC,*.TXT,*.RTF";
			String fileNameToBeAssigned = "temp.txt";
			List fileUploadedList = HMSUtil.uploadFile(mrequest, uploadURL,
					whiteList, fileNameToBeAssigned);
			boolean fileUploaded = false;
			if (fileUploadedList != null && fileUploadedList.size() != 0) {
				fileUploaded = (Boolean) fileUploadedList.get(0);
			}
			if (fileUploaded) {
				fileContent = HMSUtil.getContent("C:\\temp\\temp.txt");
			}
			map.put("content", fileContent);
		}
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView getFileNameForOPD(HttpServletRequest request,
			HttpServletResponse response) {
		String uploadURL = "";
		MultipartFormDataRequest mrequest = null;
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			if ((Map) request.getSession().getAttribute("map") != null)
				map = (Map) request.getSession().getAttribute("map");
		} catch (Exception e) {
			e.printStackTrace();

		}

		String filePath = "";
		String fileContent = "";
		UploadFile file = null;
		InputStream is = null;
		String Format = "";
		Properties properties = new Properties();
		FileOutputStream fos = null;
		ModelAndView mv1 = null;
		URL resourcePath = Thread.currentThread().getContextClassLoader()
				.getResource("file.properties");

		try {
			properties.load(resourcePath.openStream());
			uploadURL = properties.getProperty("uploadinvestigationfile");
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		try {
			new File(getServletContext().getRealPath("/temp/")).mkdir();

			if (MultipartFormDataRequest.isMultipartFormData(request)) {
				try {
					if (request.getParameter("browse") != null
							&& !request.getParameter("browse").equals("")) {
						// System.out.println("putting browase");
						map.put("browse", "browse");
					}
					if (request.getParameter("browseInResultEntry") != null
							&& !request.getParameter("browseInResultEntry")
									.equals("")) {
						// System.out.println("putting browase");
						session.setAttribute("browseInResultEntry",
								"browseInResultEntry");
						map.put("browse", "browse");
					}
					mrequest = new MultipartFormDataRequest(request);
					String temlateData = "";

					if (mrequest.getParameter("test2") != null
							&& !(mrequest.getParameter("test2").equals(""))) {
						temlateData = (mrequest.getParameter("test2")).trim();
						// System.out.println("multipart data 0 ");
						// code added for persisting the removed html code by
						// wysiwyg

						fos = new FileOutputStream(getServletContext()
								.getRealPath("/temp/" + "temp.html"));
						fos.write(temlateData.getBytes());
						// System.out.println(temlateData.length());
						fos.close();
						request.setAttribute("secondRequest", "secondRequest");
						/*
						 * if(request.getParameter("formName")!=null) {
						 * if(request
						 * .getParameter("formName").equals("sampleCollection"))
						 * { mv1=searchPatient(request, response); } else{
						 * //System.out.println("in else block");
						 * mv1=searchPatientForResultValidation(request,
						 * response); } }
						 */
					}

					// System.out.println("multipartData1");
					java.util.Hashtable files = mrequest.getFiles();

					if ((files != null) && (!files.isEmpty())) {
						// System.out.println("multipartData2");
						// //System.out.println("multipartData23");
						file = (UploadFile) files.get(UPLOAD_FILENAME);

						// file.setContentType("text/html");
						// //System.out.println("contentType"+file.getContentType());
						try {
							is = file.getInpuStream();
						} catch (Exception e) {
							e.printStackTrace();
						}
						if (is != null) {
							// System.out.println("multipartData3");
							// //System.out.println("multipartData1");
							File temprory = new File(getServletContext()
									.getRealPath("/temp/" + "temp.html"));

							fos = new FileOutputStream(temprory);
							byte[] buf = new byte[1024];
							int len;

							while ((len = is.read(buf)) > 0) {

								fos.write(buf, 0, len);

							}
							fos.close();
							is.close();
							// code for parseing html contents from the file
							File temprory1 = new File(getServletContext()
									.getRealPath("/temp/" + "temp.html"));
							InputStream fis = new FileInputStream(
									getServletContext().getRealPath(
											"/temp/" + "temp.html"));

							byte[] b3 = new byte[(int) temprory1.length()];
							int offset = 0;
							int numRead = 0;
							while ((offset < b3.length)
									&& ((numRead = fis.read(b3, offset,
											b3.length - offset)) >= 0)) {

								offset += numRead;

							}
							fis.close();

							// String appendedHtml=new String(b3);
							// //System.out.println("appendedHtml at file upload
							// "+b3.length);
							// if(appendedHtml.contains("<div class=")){
							// //System.out.println("multipart data 2.5 ");
							// int indexB=appendedHtml.indexOf("<div class=");
							// appendedHtml=appendedHtml.substring(0, indexB);
							//
							// map.put("appendedHtml", appendedHtml);
							//
							// }
							InputStream fis1 = new FileInputStream(
									getServletContext().getRealPath(
											"jsp/pdf/appendingHtml.html"));
							File temprory2 = new File(getServletContext()
									.getRealPath("jsp/pdf/appendingHtml.html"));

							byte[] b1 = new byte[(int) temprory2.length()];
							int offset1 = 0;
							int numRead1 = 0;
							try {
								while ((offset1 < b1.length)
										&& ((numRead1 = fis1.read(b1, offset1,
												b1.length - offset1)) >= 0)) {

									offset1 += numRead1;

								}
							} catch (IOException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							try {
								fis1.close();
							} catch (IOException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							String appendedHtml = new String(b1);
							map.put("appendedHtml", appendedHtml);
							is.close();

							// System.out.println(request.getParameter("parameterName"));
							/*
							 * if(request.getParameter("parameterName")!=null){
							 * //System.out.println("in parametere name"); mv1=
							 * searchPatient(request,response); }
							 */
							fileContent = HMSUtil
									.getContent(getServletContext()
											.getRealPath("/temp/" + "temp.html"));

							// //System.out.println("fileContent
							// "+fileContent.length());

						} else {
							// System.out.println("multipartData4");
							String parser = MultipartFormDataRequest.DEFAULTPARSER;
							Vector listeners = null;
							String encoding = "iso-8859-1";
							int uploadlimit = 1024 * 1024 * 1024;

							// System.out.println("multipartData");
							// try{
							// mrequest = new
							// MultipartFormDataRequest(request,listeners,
							// uploadlimit,parser, encoding);
							// }
							// catch(Exception e){
							// e.printStackTrace();
							// }
							String template = (mrequest.getParameter("test2"))
									.trim();

							// //System.out.println("multipartData.length()"+template);
							fos = new FileOutputStream(getServletContext()
									.getRealPath("/temp/" + "temp.html"));
							fos.write(template.getBytes());
							fos.close();

						}

					}
					// else
					// {
					//
					//
					// //System.out.println("in lasdt else");
					// String parser = MultipartFormDataRequest.DEFAULTPARSER;
					// Vector listeners = null;
					// String encoding = "iso-8859-1";
					// int uploadlimit = 1024*1024*1024;
					//
					// ////System.out.println("multipartData");
					// try{//MultipartRequest mr = new
					// MultipartRequest(request,getServletContext().getRealPath("/temp/"));
					// mrequest = new MultipartFormDataRequest(request);
					// }
					// catch(Exception e){
					// e.printStackTrace();
					//
					// }
					// String template=mrequest.getParameter("test2");
					//
					// ////System.out.println("multipartData.length()"+template);
					// FileOutputStream fos=new
					// FileOutputStream(getServletContext().getRealPath("/temp/"+"temp.html"));
					// fos.write( template.getBytes());
					//
					//
					//
					// }
				}

				catch (Exception e) {
					e.printStackTrace();
				}
			}

			fileContent = HMSUtil.getContent(getServletContext().getRealPath(
					"/temp/" + "temp.html"));

			// //System.out.println("fileContent "+fileContent.length());

			map.put("content", fileContent);
		} catch (Exception e) {
			e.printStackTrace();
		}
		// ///////////////////////// Finally added By Naresh
		finally {
			try {
				if (is != null) {
					is.close();
				}
				if (fos != null)
					fos.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
			// System.out.println("In Finally");
		}
		// ///////////////////////////////////////
		// code added for persisting the removed html code by wysiwyg
		String appendedHtml1 = "";
		boolean flag = false;

		if (mrequest.getParameter("appendedHtml") != null
				&& !mrequest.getParameter("appendedHtml").equals("")) {
			if (mrequest.getParameter("browse").equals("")) {
				appendedHtml1 = mrequest.getParameter("appendedHtml");

				String template = mrequest.getParameter("test2");
				if (appendedHtml1 != null && !appendedHtml1.equals("")) {
					map.put("appendedHtml", appendedHtml1);
					try {
						// System.out.println("multipart data 5 ");
						fos = new FileOutputStream(getServletContext()
								.getRealPath("/temp/" + "temp.html"));
						template = appendedHtml1 + template + "</body></html>";

						fos.write(template.getBytes());
						fos.close();
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			}
		}
		if (mv1 != null && request.getParameter("formName") != null) {
			// System.out.println("in null" + mv1.getViewName());
			return mv1;
		} else {
			// System.out.println("in second  null");
			return new ModelAndView("indexB", "map", map);
		}
	}

	@SuppressWarnings("unchecked")
	public ModelAndView addOpdTemplateDepartmentWise(
			HttpServletRequest request, HttpServletResponse response) {

		MultipartFormDataRequest mrequest = null;
		if (MultipartFormDataRequest.isMultipartFormData(request)) {
			try {
				mrequest = new MultipartFormDataRequest(request);
			} catch (UploadException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		int hinId = 0;
		int visitId = 0;
		String date = "";
		String time = "";
		String remarks = "";
		String result = "";
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");
		HttpSession session = request.getSession();

		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		map = (Map<String, Object>) session.getAttribute("map");

		if (mrequest.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(mrequest.getParameter(HIN_ID));
		}
		if (mrequest.getParameter("visitId") != null) {
			visitId = Integer.parseInt(mrequest.getParameter("visitId"));
		}
		if (mrequest.getParameter(REMARKS) != null) {
			remarks = mrequest.getParameter(REMARKS);
		}

		if (mrequest.getParameter(CHANGED_BY) != null
				&& !(mrequest.getParameter(CHANGED_BY).equals(""))) {
			changedBy = mrequest.getParameter(CHANGED_BY);
		}
		/*
		 * if(request.getParameter("content") != null){ result =
		 * request.getParameter("content"); }
		 */
		String finalFile = "";
		try {
			String tepmlateData = mrequest.getParameter("test2");
			InputStream fis1 = new FileInputStream(getServletContext()
					.getRealPath("jsp/pdf/appendingHtml.html"));
			File temprory2 = new File(getServletContext().getRealPath(
					"jsp/pdf/appendingHtml.html"));

			byte[] b1 = new byte[(int) temprory2.length()];
			int offset1 = 0;
			int numRead1 = 0;
			try {
				while ((offset1 < b1.length)
						&& ((numRead1 = fis1.read(b1, offset1, b1.length
								- offset1)) >= 0)) {

					offset1 += numRead1;

				}
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			try {
				fis1.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			// System.out.println("in appending html of result entry" +
			// b1.length);
			String appendedHtml = new String(b1);
			finalFile = appendedHtml + tepmlateData + "</body></html>";
		} catch (Exception exception) {
			exception.printStackTrace();
		}

		result = (String) map.get("content");

		OpdTemplateDepartmentWise opdTemplateDepartmentWise = new OpdTemplateDepartmentWise();
		try {

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);
			opdTemplateDepartmentWise.setDepartment(masDepartment);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			opdTemplateDepartmentWise.setHospital(masHospital);

			Patient patient = new Patient();
			patient.setId(hinId);
			opdTemplateDepartmentWise.setHin(patient);

			Visit v = new Visit();
			v.setId(visitId);
			opdTemplateDepartmentWise.setVisit(v);

			opdTemplateDepartmentWise.setLastChgTime(time);
			opdTemplateDepartmentWise.setLastChgBy(changedBy);

			opdTemplateDepartmentWise.setStatus("y");
			opdTemplateDepartmentWise.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(date));

			opdTemplateDepartmentWise.setRemarks(remarks);
			opdTemplateDepartmentWise.setResult(finalFile);

			String referredDept = "";
			String[] referredToDeptArray = null;
			if (request.getParameterValues(DEPARTMENT_ID) != null) {
				referredToDeptArray = (String[]) request
						.getParameterValues(DEPARTMENT_ID);
				for (int i = 0; i < referredToDeptArray.length; i++) {
					if (i == 0)
						referredDept = referredToDeptArray[i];
					else
						referredDept = referredDept + ","
								+ referredToDeptArray[i];
				}
			}
			infoMap.put("opdTemplateDepartmentWise", opdTemplateDepartmentWise);
			infoMap.put("visitId", visitId);
			infoMap.put("hospitalId", hospitalId);
			infoMap.put("referredDept", referredDept);

		}

		catch (Exception e) {
			e.printStackTrace();
		}
		boolean successfullyAdded = false;
		successfullyAdded = opdHandlerService
				.addOpdTemplateDepartmentWise(infoMap);

		if (successfullyAdded) {
			message = "Opd Template Department Wise has been done Successfully..";
		} else {
			message = "Opd Template Department Wise has not been done Successfully..";
		}

		try {
			map = opdHandlerService.getOpdTemplateDepartmentWise(visitId);

		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = MESSAGE_FOR_PALLIENT_ALLERGIC_DRUGS;
		title = "Add Opd Template Department Wise";
		jsp += ".jsp";
		map.put("visitId", visitId);
		map.put("deptId", departmentId);
		map.put("message", message);
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView viewOpdTemplateDepartmentWise(
			HttpServletRequest request, HttpServletResponse response) {

		MultipartFormDataRequest mrequest = null;
		if (MultipartFormDataRequest.isMultipartFormData(request)) {
			try {
				mrequest = new MultipartFormDataRequest(request);
			} catch (UploadException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (mrequest.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(mrequest.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}

		if (mrequest.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(mrequest.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (mrequest.getParameter("flag") != null) {
			flag = mrequest.getParameter("flag");
			parameterMap.put("flag", flag);
		}
		if (mrequest.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(mrequest
					.getParameter("currentVisitId"));
		}
		if (mrequest.getParameter("viewScreen") != null) {
			viewScreen = mrequest.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showOpdTemplateDepartmentWiseJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (mrequest.getParameter("deptId") != null) {
				deptId = Integer.parseInt(mrequest.getParameter("deptId"));
			}
			if (mrequest.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(mrequest
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewOpdTemplateDepartmentWise(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = "viewOpdTemplateDepartmentWise";
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView viewOpdTemplateDepartmentWisePreNext(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}

		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}
		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showOpdTemplateDepartmentWiseJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService
				.viewOpdTemplateDepartmentWisePreNext(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = "viewOpdTemplateDepartmentWisePreNext";
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);

	}

	// ...................................***** Patient History
	// *****.............................

	public ModelAndView showPatientHistoryJsp(HttpServletRequest request,
			HttpServletResponse response) {
		int visitId = Integer.parseInt(request.getParameter("visitId"));

		map = opdHandlerService.getPatientHistory(visitId);
		jsp = PATIENT_HISTORY_JSP;
		jsp += ".jsp";
		title = "Patient History List";

		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);

	}

	@SuppressWarnings("unchecked")
	public ModelAndView addPatientHistory(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		int hinId = 0;
		int visitId = 0;
		String date = "";
		String time = "";
		String personalOtherDetails = "";
		String personalPastHistory = "";
		String personalPresentHistory = "";
		String personalPresentMedication = "";

		String familyOtherDetails = "";
		String familyPastHistory = "";
		String familyPresentHistory = "";
		String familyPresentMedication = "";

		HttpSession session = request.getSession();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");
		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
		}
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		if (request.getParameter(PERSONAL_OTHER_DETAILS) != null) {
			personalOtherDetails = request.getParameter(PERSONAL_OTHER_DETAILS);
		}
		if (request.getParameter(PERSONAL_PAST_HISTORY) != null) {
			personalPastHistory = request.getParameter(PERSONAL_PAST_HISTORY);
		}
		if (request.getParameter(PERSONAL_PRESENT_HISTORY) != null) {
			personalPresentHistory = request
					.getParameter(PERSONAL_PRESENT_HISTORY);
		}

		if (request.getParameter(PERSONAL_PRESENT_MEDICATION) != null) {
			personalPresentMedication = request
					.getParameter(PERSONAL_PRESENT_MEDICATION);
		}

		if (request.getParameter(FAMILY_OTHER_DETAILS) != null) {
			familyOtherDetails = request.getParameter(FAMILY_OTHER_DETAILS);
		}
		if (request.getParameter(FAMILY_PAST_HISTORY) != null) {
			familyPastHistory = request.getParameter(FAMILY_PAST_HISTORY);
		}
		if (request.getParameter(FAMILY_PRESENT_HISTORY) != null) {
			familyPresentHistory = request.getParameter(FAMILY_PRESENT_HISTORY);
		}
		if (request.getParameter(FAMILY_PRESENT_MEDICATION) != null) {
			familyPresentMedication = request
					.getParameter(FAMILY_PRESENT_MEDICATION);
		}

		if (request.getParameter(CHANGED_BY) != null
				&& !(request.getParameter(CHANGED_BY).equals(""))) {
			changedBy = request.getParameter(CHANGED_BY);
		}
		/*
		 * Users user = (Users)session.getAttribute("users"); int userId =
		 * user.getId();
		 */
		OpdPatientHistory patientHistory = new OpdPatientHistory();
		try {

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);
			patientHistory.setDepartment(masDepartment);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			patientHistory.setHospital(masHospital);

			Patient patient = new Patient();
			patient.setId(hinId);
			patientHistory.setHin(patient);

			/*
			 * Visit visit = new Visit(); visit.setId(visitId);
			 */
			patientHistory.setVisitInpatientId(visitId);

			patientHistory.setLastChgTime(time);
			patientHistory.setLastChgBy(changedBy);

			patientHistory.setStatus("y");
			patientHistory.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(date));

			patientHistory.setPersonalOtherDetails(personalOtherDetails);
			patientHistory.setPersonalPastHistory(personalPastHistory);
			patientHistory.setPersonalPresentHistory(personalPresentHistory);
			patientHistory
					.setPersonalPresentMedication(personalPresentMedication);

			patientHistory.setFamilyOtherDetails(familyOtherDetails);
			patientHistory.setFamilyPastHistory(familyPastHistory);
			patientHistory.setFamilyPresentHistory(familyPresentHistory);
			patientHistory.setFamilyPresentMedication(familyPresentMedication);

			patientHistory.setIpOpPacStatus("OP");

			String referredDept = "";
			String[] referredToDeptArray = null;
			if (request.getParameterValues(DEPARTMENT_ID) != null) {
				referredToDeptArray = (String[]) request
						.getParameterValues(DEPARTMENT_ID);
				for (int i = 0; i < referredToDeptArray.length; i++) {
					if (i == 0)
						referredDept = referredToDeptArray[i];
					else
						referredDept = referredDept + ","
								+ referredToDeptArray[i];
				}
			}
			infoMap.put("patientHistory", patientHistory);
			infoMap.put("visitId", visitId);
			infoMap.put("hospitalId", hospitalId);
			infoMap.put("referredDept", referredDept);

		}

		catch (Exception e) {
			e.printStackTrace();
		}
		boolean successfullyAdded = false;
		successfullyAdded = opdHandlerService.addPatientHistory(infoMap);

		if (successfullyAdded) {
			message = "Patient History has been done Successfully..";
		} else {
			message = "Patient History has not been done Successfully..";
		}

		try {
			map = opdHandlerService.getPatientHistory(visitId);

		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = MESSAGE_FOR_PALLIENT_ALLERGIC_DRUGS;
		title = "Add Patient History";
		jsp += ".jsp";
		map.put("visitId", visitId);
		map.put("deptId", departmentId);
		map.put("message", message);
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView viewPatientHistory(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}

		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showPatientHistoryJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewPatientHistory(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = "viewPatientHistory";
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);

	}

	// ...................................***** Pediatric Vaccination Plan
	// *****.............................

	public ModelAndView showPediatricVaccinationPlanJsp(
			HttpServletRequest request, HttpServletResponse response) {
		int visitId = Integer.parseInt(request.getParameter("visitId"));

		map = opdHandlerService.getPediatricVaccinationPlanJsp(visitId);
		jsp = PEDIATRIC_VACCINATION_PLAN_JSP;
		jsp += ".jsp";
		title = "Pediatric Vaccination Plan List";

		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView addPediatricVaccinationPlan(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();

		boolean saved = false;
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		box.put("departmentId", departmentId);
		box.put("hospitalId", hospitalId);
		box.put("visitId", visitId);
		String referredDept = "";
		String[] referredToDeptArray = null;
		if (request.getParameterValues(DEPARTMENT_ID) != null) {
			referredToDeptArray = (String[]) request
					.getParameterValues(DEPARTMENT_ID);
			for (int i = 0; i < referredToDeptArray.length; i++) {
				if (i == 0)
					referredDept = referredToDeptArray[i];
				else
					referredDept = referredDept + "," + referredToDeptArray[i];
			}
		}
		box.put("referredDept", referredDept);

		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		box.put("userId", userId);

		map = opdHandlerService.addPediatricVaccinationPlan(box);
		saved = (Boolean) map.get("saved");
		String message = "";
		if (saved) {
			message = "Pediatric Vaccination Plan Saved Successfully. Do you want to print ?";
			jsp = MESSAGE_FOR_PEDIATRIC_VACCINATION_PLAN;
		} else {
			message = "Some Problem Occured.";
			jsp = "messageSomeTry";
		}

		map.put("visitId", visitId);
		map.put("deptId", departmentId);
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("message", message);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView updatePediatricVaccinationPlan(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();

		boolean saved = false;
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);

		int departmentId = (Integer) session.getAttribute("deptId");
		box.put("departmentId", departmentId);

		int hospitalId = (Integer) session.getAttribute("hospitalId");
		box.put("hospitalId", hospitalId);

		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		box.put("userId", userId);
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		map = opdHandlerService.updatePediatricVaccinationPlan(box);
		saved = (Boolean) map.get("saved");
		String message = "";
		if (saved) {
			message = "Pediatric Vaccination Plan updated Successfully.";
		} else {
			message = "Some Problem Occured.";
		}
		map.put("visitId", visitId);
		map.put("deptId", departmentId);
		String jsp = MESSAGE_FOR_PEDIATRIC_VACCINATION_PLAN;
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("message", message);
		return new ModelAndView("indexB", "map", map);
	}

	// ...................................***** Pediatric Case Sheet
	// *****.............................

	public ModelAndView showPediatricCaseSheetJsp(HttpServletRequest request,
			HttpServletResponse response) {
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		map = opdHandlerService.getPediatricCaseSheet(visitId);
		jsp = PEDIATRIC_CASE_SHEET_JSP;
		jsp += ".jsp";
		title = "Pediatric Case Sheet List";
		map.put("detailsMap", detailsMap);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView addPediatricCaseSheet(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();

		boolean saved = false;
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		box.put("departmentId", departmentId);
		box.put("hospitalId", hospitalId);
		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		box.put("userId", userId);
		box.put("visitId", visitId);

		map = opdHandlerService.addPediatricCaseSheet(box);
		saved = (Boolean) map.get("saved");
		String message = "";
		if (saved) {
			message = "Pediatric Case Sheet Saved Successfully. Do you want to print ?";
			jsp = "messagePediatricCaseSheet";
		} else {
			message = "Some Problem Occured.";
			jsp = "messageSomeTry";
		}

		map.put("visitId", visitId);
		map.put("deptId", departmentId);
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("message", message);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView updatePediatricCaseSheet(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();

		boolean saved = false;
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		box.put("departmentId", departmentId);
		box.put("hospitalId", hospitalId);
		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		box.put("userId", userId);
		box.put("visitId", visitId);

		map = opdHandlerService.updatePediatricCaseSheet(box);
		saved = (Boolean) map.get("saved");
		String message = "";
		if (saved) {
			message = "Pediatric Case Sheet updated Successfully. Do you want to print ?";
			jsp = "messageUpdatePediatricCaseSheet";
		} else {
			message = "Some Problem Occured.";
			jsp = "messageUpdateSomeError";
		}
		map.put("visitId", visitId);
		map.put("deptId", departmentId);
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("message", message);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView viewPediatricCaseSheet(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}

		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showPediatricCaseSheetJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewPediatricCaseSheet(parameterMap);

		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = VIEW_CASE_SHEET_JSP;
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);

	}

	// ...................................***** OBG
	// *****.............................

	public ModelAndView showOBGONEJsp(HttpServletRequest request,
			HttpServletResponse response) {
		int visitId = Integer.parseInt(request.getParameter("visitId"));

		map = opdHandlerService.showOBGJsp(visitId);
		jsp = OBG_JSP;
		jsp += ".jsp";
		title = "OBG List";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView showOBGTWOJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		box.put("departmentId", departmentId);
		box.put("hospitalId", hospitalId);
		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		box.put("userId", userId);
		box.put("visitId", visitId);
		String referredDept = "";
		String[] referredToDeptArray = null;
		if (request.getParameterValues(DEPARTMENT_ID) != null) {
			referredToDeptArray = (String[]) request
					.getParameterValues(DEPARTMENT_ID);
			for (int i = 0; i < referredToDeptArray.length; i++) {
				if (i == 0)
					referredDept = referredToDeptArray[i];
				else
					referredDept = referredDept + "," + referredToDeptArray[i];
			}
		}
		box.put("referredDept", referredDept);
		map = opdHandlerService.addOBGOne(box);
		saved = (Boolean) map.get("saved");
		if (saved) {
			map = opdHandlerService.showOBGJsp(visitId);
			jsp = "obgPartTwo";
		} else {
			map = opdHandlerService.showOBGJsp(visitId);
			jsp = OBG_JSP;
		}

		jsp += ".jsp";
		title = "OBG List";
		map.put("visitId", visitId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView showOBGTHREEJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		boolean saved = false;
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);

		int departmentId = (Integer) session.getAttribute("deptId");
		box.put("departmentId", departmentId);

		int hospitalId = (Integer) session.getAttribute("hospitalId");
		box.put("hospitalId", hospitalId);

		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		box.put("userId", userId);
		int visitId = Integer.parseInt(request.getParameter("visitId"));

		map = opdHandlerService.updateOBG(box);

		saved = (Boolean) map.get("saved");

		if (saved) {
			map = opdHandlerService.showOBGJsp(visitId);
			jsp = "obgPartThree";
		} else {
			map = opdHandlerService.showOBGJsp(visitId);
			jsp = "obgPartTwo";
		}
		jsp += ".jsp";
		title = "OBG List";
		map.put("visitId", visitId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView showOBGFOURJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		boolean saved = false;
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);

		int departmentId = (Integer) session.getAttribute("deptId");
		box.put("departmentId", departmentId);

		int hospitalId = (Integer) session.getAttribute("hospitalId");
		box.put("hospitalId", hospitalId);

		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		box.put("userId", userId);
		int visitId = Integer.parseInt(request.getParameter("visitId"));

		map = opdHandlerService.updateOBG(box);

		saved = (Boolean) map.get("saved");

		if (saved) {
			map = opdHandlerService.showOBGJsp(visitId);
			jsp = "obgPartFour";
		} else {
			map = opdHandlerService.showOBGJsp(visitId);
			jsp = "obgPartThree";
		}
		jsp += ".jsp";
		title = "OBG List";

		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView addOBGJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		boolean saved = false;
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);

		int departmentId = (Integer) session.getAttribute("deptId");
		box.put("departmentId", departmentId);

		int hospitalId = (Integer) session.getAttribute("hospitalId");
		box.put("hospitalId", hospitalId);

		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		box.put("userId", userId);
		int visitId = Integer.parseInt(request.getParameter("visitId"));

		box.put("visitId", visitId);
		String referredDept = "";
		String[] referredToDeptArray = null;
		if (request.getParameterValues(DEPARTMENT_ID) != null) {
			referredToDeptArray = (String[]) request
					.getParameterValues(DEPARTMENT_ID);
			for (int i = 0; i < referredToDeptArray.length; i++) {
				if (i == 0)
					referredDept = referredToDeptArray[i];
				else
					referredDept = referredDept + "," + referredToDeptArray[i];
			}
		}
		box.put("referredDept", referredDept);
		map = opdHandlerService.addOrUpdateOBGJsp(box);
		saved = (Boolean) map.get("saved");
		String message = "";
		if (saved) {
			message = "OBG Saved Successfully. Do you want to print ?";
			jsp = "messageOpdObg";
		} else {
			message = "Some Problem Occured.";
			jsp = "obgPartFour";
		}
		map.put("visitId", visitId);
		map.put("deptId", departmentId);
		jsp += ".jsp";
		title = "OBG List";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView viewOBGONE(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}
		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showOBGONEJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewOBGONE(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = VIEW_OBE_ONE;
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView viewOBGTWO(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}
		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showOBGTWOJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewOBGTWO(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = VIEW_OBE_TWO;
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView viewOBGTHREE(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}
		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showOBGTHREEJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewOBGTHREE(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = VIEW_OBE_THREE;
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView viewOBGFOUR(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}
		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showOBGFOURJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewOBGFOUR(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = VIEW_OBE_FOUR;
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);

	}

	// -------------------------------------- OPD
	// ENT--------------------------------------
	public ModelAndView showEntJsp(HttpServletRequest request,
			HttpServletResponse response) {
		int visitId = Integer.parseInt(request.getParameter("visitId"));

		map = opdHandlerService.showENTJsp(visitId);
		jsp = ENT_JSP;
		jsp += ".jsp";
		title = "ENT List";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView addEnt(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		box.put("departmentId", departmentId);
		box.put("hospitalId", hospitalId);
		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		box.put("userId", userId);
		String message = "";
		box.put("visitId", visitId);
		String referredDept = "";
		String[] referredToDeptArray = null;
		if (request.getParameterValues(DEPARTMENT_ID) != null) {
			referredToDeptArray = (String[]) request
					.getParameterValues(DEPARTMENT_ID);
			for (int i = 0; i < referredToDeptArray.length; i++) {
				if (i == 0)
					referredDept = referredToDeptArray[i];
				else
					referredDept = referredDept + "," + referredToDeptArray[i];
			}
		}
		box.put("referredDept", referredDept);
		map = opdHandlerService.addEnt(box);
		saved = (Boolean) map.get("saved");
		if (saved) {
			message = "Ent has been done Successfully.Do you want to print ?";
			jsp = "messageOpdEnt";
		} else {
			message = "Ent has not been done Successfully..";
			jsp = "messageSomeTry";
		}

		try {
			map = opdHandlerService.showENTJsp(visitId);

		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp += ".jsp";
		title = "ENT List";
		map.put("visitId", visitId);
		map.put("deptId", departmentId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView updateEnt(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		box.put("departmentId", departmentId);
		box.put("hospitalId", hospitalId);
		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		box.put("visitId", visitId);
		box.put("userId", userId);
		String message = "";

		map = opdHandlerService.updateEnt(box);
		saved = (Boolean) map.get("saved");
		if (saved) {
			message = "Ent has been updated Successfully.Do you want to print ?";
			jsp = "messageUpdateOpdEnt";
		} else {
			message = "Ent has not been done Successfully..";
			jsp = "messageUpdateSomeError";
		}
		/*
		 * try{ map = opdHandlerService.showENTJsp(visitId); }catch (Exception
		 * e) { e.printStackTrace(); }
		 */
		jsp += ".jsp";
		title = "ENT List";
		map.put("visitId", visitId);
		map.put("deptId", departmentId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView viewEnt(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}
		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showEntJsp&visitId=" + currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewEnt(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = "viewEnt";
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);

	}

	// -------------------------------- Cardiology Department
	// Details----------------------------
	public ModelAndView showCardiologyDepartmentDetailsJsp(
			HttpServletRequest request, HttpServletResponse response) {
		int visitId = Integer.parseInt(request.getParameter("visitId"));

		map = opdHandlerService.getCardiologyDepartmentDetails(visitId);
		jsp = CARDIOLOGY_DEPARTMENT_DETAILS_JSP;
		jsp += ".jsp";
		title = "Cardiology Department Details List";
		map.put("visitId", visitId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);

	}

	@SuppressWarnings("unchecked")
	public ModelAndView addCardiologyDepartmentDetails(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		int hinId = 0;
		int visitId = 0;
		String date = "";
		String time = "";
		String tmtReport = "";
		String echoCardiology = "";
		String holter = "";
		String cardiacCathetizationData = "";
		String remarks = "";
		// --------- data for diagnosis------------
		String referredDoctars = "";
		String[] referredDoctarsArray = null;

		if (request.getParameterValues("referredDoctarsId") != null) {
			referredDoctarsArray = (String[]) request
					.getParameterValues("referredDoctarsId");
			for (int i = 0; i < referredDoctarsArray.length; i++) {
				if (i == 0)
					referredDoctars = referredDoctarsArray[i];
				else
					referredDoctars = referredDoctars + ","
							+ referredDoctarsArray[i];
			}
		}

		String initialDiagnosis = null;
		if (!request.getParameter("initialDiagnosis").equals("")) {
			initialDiagnosis = request.getParameter("initialDiagnosis");
		}

		String consultationDate = request.getParameter("consultationDate");
		String consultationTime = request.getParameter("consultationTime");
		String[] diagnosisIdAray = null;
		if (request.getParameterValues(DIAGNOSIS_ID) != null) {
			diagnosisIdAray = (String[]) request
					.getParameterValues(DIAGNOSIS_ID);
		}

		HttpSession session = request.getSession();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");
		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
		}
		if (!request.getParameter(VISIT_ID).equals("")) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}

		if (request.getParameter(TMT_REPORT) != null) {
			tmtReport = request.getParameter(TMT_REPORT);
		}
		if (request.getParameter(ECHO_CARDIOLOGY) != null) {
			echoCardiology = request.getParameter(ECHO_CARDIOLOGY);
		}
		if (request.getParameter(HOLTER) != null) {
			holter = request.getParameter(HOLTER);
		}

		if (request.getParameter(CARDIAC_CATHETIZATION_DATA) != null) {
			cardiacCathetizationData = request
					.getParameter(CARDIAC_CATHETIZATION_DATA);
		}

		if (request.getParameter(REMARKS) != null) {
			remarks = request.getParameter(REMARKS);
		}
		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		OpdCardiologyDepartmentDetails cardiologyDepartmentDetails = new OpdCardiologyDepartmentDetails();
		try {

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);
			cardiologyDepartmentDetails.setDepartment(masDepartment);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			cardiologyDepartmentDetails.setHospital(masHospital);

			Patient patient = new Patient();
			patient.setId(hinId);
			cardiologyDepartmentDetails.setHin(patient);

			Visit visit = new Visit();
			visit.setId(visitId);
			cardiologyDepartmentDetails.setVisit(visit);

			cardiologyDepartmentDetails.setLastChgTime(time);
			cardiologyDepartmentDetails.setLastChgBy(userId);

			cardiologyDepartmentDetails.setStatus("y");
			cardiologyDepartmentDetails.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(date));

			cardiologyDepartmentDetails
					.setCardiacCathetizationData(cardiacCathetizationData);
			cardiologyDepartmentDetails.setEchoCardiology(echoCardiology);
			cardiologyDepartmentDetails.setHolter(holter);
			cardiologyDepartmentDetails.setRemarks(remarks);

			cardiologyDepartmentDetails.setTmtReport(tmtReport);

			String referredDept = "";
			String[] referredToDeptArray = null;
			if (request.getParameterValues(DEPARTMENT_ID) != null) {
				referredToDeptArray = (String[]) request
						.getParameterValues(DEPARTMENT_ID);
				for (int i = 0; i < referredToDeptArray.length; i++) {
					if (i == 0)
						referredDept = referredToDeptArray[i];
					else
						referredDept = referredDept + ","
								+ referredToDeptArray[i];
				}
			}
			infoMap.put("initialDiagnosis", initialDiagnosis);
			infoMap.put("referredDoctars", referredDoctars);
			infoMap.put("hinId", hinId);
			infoMap.put("diagnosisIdAray", diagnosisIdAray);
			infoMap.put("consultationDate", consultationDate);
			infoMap.put("consultationTime", consultationTime);
			infoMap.put("cardiologyDepartmentDetails",
					cardiologyDepartmentDetails);
			infoMap.put("visitId", visitId);
			infoMap.put("hospitalId", hospitalId);
			infoMap.put("referredDept", referredDept);
		}

		catch (Exception e) {
			e.printStackTrace();
		}
		boolean successfullyAdded = false;
		successfullyAdded = opdHandlerService
				.addCardiologyDepartmentDetails(infoMap);

		if (successfullyAdded) {
			message = "Cardiology Department Details has been done Successfully..Do you want to print ?";
			jsp = "messageOpdCardiology";
		} else {
			message = "Cardiology Department Details has not been done Successfully..";
			jsp = "messageSomeTry";
		}

		try {
			map = opdHandlerService.getCardiologyDepartmentDetails(visitId);

		} catch (Exception e) {
			e.printStackTrace();
		}

		title = "Add Cardiology Department Details";
		jsp += ".jsp";

		map.put("message", message);
		map.put("contentJsp", jsp);
		map.put("visitId", visitId);
		map.put("deptId", departmentId);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView updateCardiologyDepartmentDetails(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		int cardiologyId = 0;
		int visitId = 0;
		String tmtReport = "";
		String echoCardiology = "";
		String holter = "";
		String cardiacCathetizationData = "";
		String remarks = "";

		HttpSession session = request.getSession();
		int departmentId = (Integer) session.getAttribute("deptId");

		if (request.getParameter("cardiologyId") != null) {
			cardiologyId = Integer.parseInt(request
					.getParameter("cardiologyId"));
			infoMap.put("cardiologyId", cardiologyId);
		}
		if (request.getParameter(TMT_REPORT) != null) {
			tmtReport = request.getParameter(TMT_REPORT);
			infoMap.put("tmtReport", tmtReport);
		}
		if (request.getParameter(ECHO_CARDIOLOGY) != null) {
			echoCardiology = request.getParameter(ECHO_CARDIOLOGY);
			infoMap.put("echoCardiology", echoCardiology);
		}
		if (request.getParameter(HOLTER) != null) {
			holter = request.getParameter(HOLTER);
			infoMap.put("holter", holter);
		}
		if (request.getParameter(CARDIAC_CATHETIZATION_DATA) != null) {
			cardiacCathetizationData = request
					.getParameter(CARDIAC_CATHETIZATION_DATA);
			infoMap.put("cardiacCathetizationData", cardiacCathetizationData);
		}
		if (request.getParameter(REMARKS) != null) {
			remarks = request.getParameter(REMARKS);
			infoMap.put("remarks", remarks);
		}
		if (request.getParameter(VISIT_ID) != null
				&& !request.getParameter(VISIT_ID).equals("")) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}

		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		infoMap.put("userId", userId);

		boolean successfullyAdded = false;
		successfullyAdded = opdHandlerService
				.updateCardiologyDepartmentDetails(infoMap);

		if (successfullyAdded) {
			message = "Cardiology Department Details has been updated Successfully.Do you want to print ?";
			jsp = "messageOpdCardiology";
		} else {
			message = "Cardiology Department Details has not been done Successfully.";
			jsp = "messageSomeTry";
		}

		title = "Add Cardiology Department Details";
		jsp += ".jsp";

		map.put("message", message);
		map.put("contentJsp", jsp);
		map.put("visitId", visitId);
		map.put("deptId", departmentId);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView viewCardiologyDepartmentDetails(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}

		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showCardiologyDepartmentDetailsJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewCardiologyDepartmentDetails(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = "viewCardiologyDepartmentDetails";
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);

	}

	// -------------------------------- Gastro-Enterology
	// Endoscopy----------------------------
	public ModelAndView showGastroEnterologyEndoscopyJsp(
			HttpServletRequest request, HttpServletResponse response) {
		int visitId = Integer.parseInt(request.getParameter("visitId"));

		map = opdHandlerService.getGastroEnterologyEndoscopy(visitId);

		jsp = GASTRO_ENTEROLOGY_ENDOSCOPY_JSP;
		jsp += ".jsp";
		title = "Gastro-Enterology Endoscopy List";
		map.put("visitId", visitId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);

	}

	@SuppressWarnings("unchecked")
	public ModelAndView addGastroEnterologyEndoscopy(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		int hinId = 0;
		int visitId = 0;
		String date = "";
		String time = "";
		String biopsy = "";
		String duodenum = "";
		String esophagus = "";
		String finalDiagnosis = "";
		String gastricAntumForHpylori = "";
		String othersRemarks = "";
		String reportNo = "";
		String impression = "";
		int referredBy = 0;
		String stomach = "";
		int opdGastroEnterologyEndoscopyId = 0;
		HttpSession session = request.getSession();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");
		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		if (request.getParameter("opdGastroEnterologyEndoscopyId") != null) {
			opdGastroEnterologyEndoscopyId = Integer.parseInt(request
					.getParameter("opdGastroEnterologyEndoscopyId"));
		}
		if (request.getParameter(REPORT_NO) != null) {
			reportNo = request.getParameter(REPORT_NO);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
		}
		if ((request.getParameter(EMPLOYEE_ID)) != null
				&& !(request.getParameter(EMPLOYEE_ID).equals("0"))) {
			referredBy = Integer.parseInt(request.getParameter(EMPLOYEE_ID));

		}
		if (!request.getParameter(VISIT_ID).equals("")) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		if (request.getParameter(BIOPSY) != null) {
			biopsy = request.getParameter(BIOPSY);
		}
		if (request.getParameter(STOMACH) != null) {
			stomach = request.getParameter(STOMACH);
		}
		if (request.getParameter(DUODENUM) != null) {
			duodenum = request.getParameter(DUODENUM);
		}
		if (request.getParameter(FINAL_DIAGNOSIS) != null) {
			finalDiagnosis = request.getParameter(FINAL_DIAGNOSIS);
		}

		if (request.getParameter(ESOPHAGUS) != null) {
			esophagus = request.getParameter(ESOPHAGUS);
		}
		if (request.getParameter(GASTRIC_ANTUM_FOR_H_PYLORI) != null) {
			gastricAntumForHpylori = request
					.getParameter(GASTRIC_ANTUM_FOR_H_PYLORI);
		}

		if (request.getParameter(OTHERS_REMARKS) != null) {
			othersRemarks = request.getParameter(OTHERS_REMARKS);
		}
		if (request.getParameter(IMPRESSION) != null) {
			impression = request.getParameter(IMPRESSION);
		}
		String[] diagnosisIdAray = null;
		if (request.getParameterValues(DIAGNOSIS_ID) != null) {
			diagnosisIdAray = (String[]) request
					.getParameterValues(DIAGNOSIS_ID);
		}
		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		OpdGastroEnterologyEndoscopy gastroEnterologyEndoscopy = new OpdGastroEnterologyEndoscopy();
		try {
			if (opdGastroEnterologyEndoscopyId != 0) {
				gastroEnterologyEndoscopy.setId(opdGastroEnterologyEndoscopyId);
			}
			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);
			gastroEnterologyEndoscopy.setDepartment(masDepartment);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			gastroEnterologyEndoscopy.setHospital(masHospital);

			Patient patient = new Patient();
			patient.setId(hinId);
			gastroEnterologyEndoscopy.setHin(patient);

			Visit visit = new Visit();
			visit.setId(visitId);
			gastroEnterologyEndoscopy.setVisit(visit);

			gastroEnterologyEndoscopy.setLastChgTime(time);
			gastroEnterologyEndoscopy.setLastChgBy(userId);
			gastroEnterologyEndoscopy.setReportDate(HMSUtil
					.convertStringTypeDateToDateType(date));

			gastroEnterologyEndoscopy.setStatus("y");
			gastroEnterologyEndoscopy.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(date));

			gastroEnterologyEndoscopy.setBiopsy(biopsy);
			gastroEnterologyEndoscopy.setDuodenum(duodenum);
			gastroEnterologyEndoscopy.setEsophagus(esophagus);
			gastroEnterologyEndoscopy.setFinalDiagnosis(finalDiagnosis);

			gastroEnterologyEndoscopy
					.setGastricAntumForHpylori(gastricAntumForHpylori);
			gastroEnterologyEndoscopy.setOthersRemarks(othersRemarks);

			gastroEnterologyEndoscopy.setStomach(stomach);

			gastroEnterologyEndoscopy.setReportNo(reportNo);
			gastroEnterologyEndoscopy.setImpression(impression);

			if (referredBy != 0) {
				MasEmployee masEmployee = new MasEmployee();
				masEmployee.setId(referredBy);
				gastroEnterologyEndoscopy.setReferredBy(masEmployee);
			}

			String referredDept = "";
			String[] referredToDeptArray = null;
			if (request.getParameterValues(DEPARTMENT_ID) != null) {
				referredToDeptArray = (String[]) request
						.getParameterValues(DEPARTMENT_ID);
				for (int i = 0; i < referredToDeptArray.length; i++) {
					if (i == 0)
						referredDept = referredToDeptArray[i];
					else
						referredDept = referredDept + ","
								+ referredToDeptArray[i];
				}
			}
			infoMap.put("gastroEnterologyEndoscopy", gastroEnterologyEndoscopy);
			infoMap.put("visitId", visitId);
			infoMap.put("hospitalId", hospitalId);
			infoMap.put("referredDept", referredDept);
			infoMap.put("diagnosisIdAray", diagnosisIdAray);
		}

		catch (Exception e) {
			e.printStackTrace();
		}
		boolean successfullyAdded = false;
		successfullyAdded = opdHandlerService
				.addGastroEnterologyEndoscopy(infoMap);

		if (successfullyAdded) {
			message = " Gastro Enterology Endoscopy saved Successfully. Do you want to print ?";
			jsp = "messageForOpd";
		} else {
			message = "Gastro Enterology Endoscopy has not been done Successfully..";
			jsp = "messageSomeTry";
		}

		try {
			map = opdHandlerService.getGastroEnterologyEndoscopy(visitId);

		} catch (Exception e) {
			e.printStackTrace();
		}
		title = "Add Gastro Enterology Endoscopy";
		jsp += ".jsp";
		map.put("visitId", visitId);
		map.put("deptId", departmentId);
		map.put("message", message);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView viewGastroEnterologyEndoscopy(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}

		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showGastroEnterologyEndoscopyJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewGastroEnterologyEndoscopy(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = "viewGastroEnterologyEndoscopy";
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);

	}

	// -------------------------------- Gastro-Enterology
	// Colonoscopy----------------------------
	public ModelAndView showGastroEnterologyColonoscopyJsp(
			HttpServletRequest request, HttpServletResponse response) {
		int visitId = Integer.parseInt(request.getParameter("visitId"));

		map = opdHandlerService.getGastroEnterologyColonoscopy(visitId);

		jsp = GASTRO_ENTEROLOGY_COLONOSCOPY_JSP;
		jsp += ".jsp";
		title = "Gastro-Enterology Colonoscopy List";

		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);

	}

	@SuppressWarnings("unchecked")
	public ModelAndView addGastroEnterologyColonoscopy(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		int hinId = 0;
		int visitId = 0;
		int opdGastroEnterologyColonoscopyId = 0;
		String date = "";
		String time = "";
		String biopsy = "";
		String analCanal = "";
		String cecum = "";
		String finalDiagnosis = "";
		String descendingColon = "";
		String rectum = "";
		String reportNo = "";
		int referredBy = 0;
		String transverseColon = "";
		String sigmoid = "";
		HttpSession session = request.getSession();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");
		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		if (request.getParameter("opdGastroEnterologyColonoscopyId") != null) {
			opdGastroEnterologyColonoscopyId = Integer.parseInt(request
					.getParameter("opdGastroEnterologyColonoscopyId"));
		}
		if (request.getParameter(REPORT_NO) != null) {
			reportNo = request.getParameter(REPORT_NO);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
		}
		if ((request.getParameter(EMPLOYEE_ID)) != null
				&& !(request.getParameter(EMPLOYEE_ID).equals("0"))) {
			referredBy = Integer.parseInt(request.getParameter(EMPLOYEE_ID));
		}
		if (!request.getParameter(VISIT_ID).equals("")) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		if (request.getParameter(BIOPSY) != null) {
			biopsy = request.getParameter(BIOPSY);
		}
		if (request.getParameter(ANAL_CANCAL) != null) {
			analCanal = request.getParameter(ANAL_CANCAL);
		}
		if (request.getParameter(CECUM) != null) {
			cecum = request.getParameter(CECUM);
		}
		if (request.getParameter(FINAL_DIAGNOSIS) != null) {
			finalDiagnosis = request.getParameter(FINAL_DIAGNOSIS);
		}

		if (request.getParameter(DESCENDING_COLON) != null) {
			descendingColon = request.getParameter(DESCENDING_COLON);
		}
		if (request.getParameter(RECTUM) != null) {
			rectum = request.getParameter(RECTUM);
		}

		if (request.getParameter(SIGMOID) != null) {
			sigmoid = request.getParameter(SIGMOID);
		}
		if (request.getParameter(TRANSVERSE_COLON) != null) {
			transverseColon = request.getParameter(TRANSVERSE_COLON);
		}
		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		OpdGastroEnterologyColonoscopy gastroEnterologyColonoscopy = new OpdGastroEnterologyColonoscopy();
		try {
			if (opdGastroEnterologyColonoscopyId != 0) {
				gastroEnterologyColonoscopy
						.setId(opdGastroEnterologyColonoscopyId);
			}
			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);
			gastroEnterologyColonoscopy.setDepartment(masDepartment);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			gastroEnterologyColonoscopy.setHospital(masHospital);

			Patient patient = new Patient();
			patient.setId(hinId);
			gastroEnterologyColonoscopy.setHin(patient);

			Visit visit = new Visit();
			visit.setId(visitId);
			gastroEnterologyColonoscopy.setVisit(visit);

			gastroEnterologyColonoscopy.setLastChgTime(time);
			gastroEnterologyColonoscopy.setLastChgBy(userId);
			gastroEnterologyColonoscopy.setReportDate(HMSUtil
					.convertStringTypeDateToDateType(date));

			gastroEnterologyColonoscopy.setStatus("y");
			gastroEnterologyColonoscopy.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(date));

			gastroEnterologyColonoscopy.setBiopsy(biopsy);
			gastroEnterologyColonoscopy.setAnalCanal(analCanal);
			gastroEnterologyColonoscopy.setBiopsy(biopsy);
			gastroEnterologyColonoscopy.setCecum(cecum);

			gastroEnterologyColonoscopy.setDescendingColon(descendingColon);
			gastroEnterologyColonoscopy.setFinalDiagnosis(finalDiagnosis);

			gastroEnterologyColonoscopy.setRectum(rectum);
			gastroEnterologyColonoscopy.setSigmoid(sigmoid);
			gastroEnterologyColonoscopy.setTransverseColon(transverseColon);
			gastroEnterologyColonoscopy.setReportNo(reportNo);

			if (referredBy != 0) {
				MasEmployee masEmployee = new MasEmployee();
				masEmployee.setId(referredBy);
				gastroEnterologyColonoscopy.setReferredBy(masEmployee);
			}
			String referredDept = "";
			String[] referredToDeptArray = null;
			if (request.getParameterValues(DEPARTMENT_ID) != null) {
				referredToDeptArray = (String[]) request
						.getParameterValues(DEPARTMENT_ID);
				for (int i = 0; i < referredToDeptArray.length; i++) {
					if (i == 0)
						referredDept = referredToDeptArray[i];
					else
						referredDept = referredDept + ","
								+ referredToDeptArray[i];
				}
			}
			infoMap.put("gastroEnterologyColonoscopy",
					gastroEnterologyColonoscopy);
			infoMap.put("visitId", visitId);
			infoMap.put("hospitalId", hospitalId);
			infoMap.put("referredDept", referredDept);
		}

		catch (Exception e) {
			e.printStackTrace();
		}
		boolean successfullyAdded = false;
		successfullyAdded = opdHandlerService
				.addGastroEnterologyColonoscopy(infoMap);

		if (successfullyAdded) {
			message = "Gastro Enterology Colonoscopy has been done Successfully.Do you want to print ?";
			jsp = "messageOpdColonoScope";
		} else {
			message = "Gastro Enterology Colonoscopy has not been done Successfully..";
			jsp = "messageSomeTry";
		}

		try {
			map = opdHandlerService.getGastroEnterologyColonoscopy(visitId);

		} catch (Exception e) {
			e.printStackTrace();
		}

		title = "Add Gastro Enterology Colonoscopy";
		jsp += ".jsp";
		map.put("visitId", visitId);
		map.put("deptId", departmentId);
		map.put("message", message);
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView viewGastroEnterologyColonoscopy(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}

		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showGastroEnterologyColonoscopyJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewGastroEnterologyColonoscopy(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = "viewGastroEnterologyColonoscopy";
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);

	}

	// -------------------------------- ANTENATAL
	// CARD----------------------------
	public ModelAndView showAntenatalCardJsp(HttpServletRequest request,
			HttpServletResponse response) {
		int visitId = Integer.parseInt(request.getParameter("visitId"));

		map = opdHandlerService.getAntenatalCard(visitId);

		jsp = ANTENATAL_CARD_JSP;
		jsp += ".jsp";
		title = "Antenatal Card List";
		map.put("visitId", visitId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);

	}

	@SuppressWarnings("unchecked")
	public ModelAndView addAntenatalCard(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		int hinId = 0;
		int visitId = 0;
		String date = "";
		String time = "";
		int menarche = 0;
		String cycle = "";
		String days = "";
		Date lmp = new Date();
		Date edd = new Date();
		int gravida = 0;
		int para = 0;
		int abortions = 0;
		int live = 0;
		int ectopic = 0;
		String year = "";
		String pregnancyOutcome = "";
		String complications = "";
		int age = 0;
		String sex = "";
		int birthWeight = 0;
		String breastFeeding = "";
		String generalHealth = "";
		String medical = "";
		String surgical = "";
		String gynecological = "";
		String medicalHistory = "";
		String multiplePregnancy = "";
		String foetalAbnormality = "";
		String dietaryHabit = "";
		String smoking = "";
		String build = "";
		String nutrition = "";
		String height = "";
		String weight = "";
		String breast = "";
		String nipple = "";
		String heart = "";
		String lungs = "";
		String bloodGroupWife = "";
		String bloodGroupHusband = "";
		String sts = "";
		String hbsag = "";
		String hiv = "";
		String gct = "";
		Date examinationDate = new Date();
		String ogtt = "";
		Date ogttDate = new Date();
		String fasting = "";
		String oneHr = "";
		String twoHr = "";
		String threeHr = "";
		String highRiskFactors = "";
		Date tetanusOnestDoseDate = new Date();
		Date tetanusTwondDoseDate = new Date();
		String willingForTubectomy = "";
		Date antenatalDate = new Date();
		String weightAntenatal = "";
		String anyCompliant = "";
		String parllor = "";
		String oedema = "";
		String bp = "";
		String uterineSize = "";
		String presentationPosition = "";
		String engagement = "";
		String fhsFm = "";
		String urine = "";
		String hbGms = "";
		Date nextVisitOn = new Date();
		String advice = "";
		HttpSession session = request.getSession();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");
		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");

		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
		}
		if (!request.getParameter(VISIT_ID).equals("")) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		if (request.getParameter(TETANUS_ONE_DOSE_DATE) != null
				&& !(request.getParameter(TETANUS_ONE_DOSE_DATE).equals(""))) {
			tetanusOnestDoseDate = HMSUtil.dateFormatterDDMMYYYY(request
					.getParameter(TETANUS_ONE_DOSE_DATE));
		}
		if (request.getParameter(TETANUS_TWO_DOSE_DATE) != null
				&& !(request.getParameter(TETANUS_TWO_DOSE_DATE).equals(""))) {
			tetanusTwondDoseDate = HMSUtil.dateFormatterDDMMYYYY(request
					.getParameter(TETANUS_TWO_DOSE_DATE));
		}
		if (request.getParameter(ANTENATAL_DATE) != null
				&& !(request.getParameter(ANTENATAL_DATE).equals(""))) {
			antenatalDate = HMSUtil.dateFormatterDDMMYYYY(request
					.getParameter(ANTENATAL_DATE));
		}
		if (request.getParameter(EXAMINATION_DATE) != null
				&& !(request.getParameter(EXAMINATION_DATE).equals(""))) {
			examinationDate = HMSUtil.dateFormatterDDMMYYYY(request
					.getParameter(EXAMINATION_DATE));
		}
		if (request.getParameter(YEAR) != null
				&& !(request.getParameter(YEAR).equals(""))) {
			year = request.getParameter(YEAR);
		}
		if (request.getParameter(LMP) != null
				&& !(request.getParameter(LMP).equals(""))) {
			lmp = HMSUtil.dateFormatterDDMMYYYY(request.getParameter(LMP));
		}
		if (request.getParameter(EDD) != null
				&& !(request.getParameter(EDD).equals(""))) {
			edd = HMSUtil.dateFormatterDDMMYYYY(request.getParameter(EDD));
		}
		if (request.getParameter(OGTT_DATE) != null
				&& !(request.getParameter(OGTT_DATE).equals(""))) {
			ogttDate = HMSUtil.dateFormatterDDMMYYYY(request
					.getParameter(OGTT_DATE));
		}
		if (request.getParameter(NEXT_VISIT_ON) != null
				&& !(request.getParameter(NEXT_VISIT_ON).equals(""))) {
			nextVisitOn = HMSUtil.dateFormatterDDMMYYYY(request
					.getParameter(NEXT_VISIT_ON));
		}

		if (request.getParameter(HB_GMS) != null) {
			hbGms = request.getParameter(HB_GMS);
		}
		if (request.getParameter(URINE) != null) {
			urine = request.getParameter(URINE);
		}
		if (request.getParameter(FHS_FM) != null) {
			fhsFm = request.getParameter(FHS_FM);
		}
		if (request.getParameter(ENGAGEMENT) != null) {
			engagement = request.getParameter(ENGAGEMENT);
		}
		if (request.getParameter(PRESENTATION_POSITION) != null) {
			presentationPosition = request.getParameter(PRESENTATION_POSITION);
		}
		if (request.getParameter(UTERINE_SIZE) != null) {
			uterineSize = request.getParameter(UTERINE_SIZE);
		}
		if (request.getParameter(BP) != null) {
			bp = request.getParameter(BP);
		}
		if (request.getParameter(OEDEMA) != null) {
			oedema = request.getParameter(OEDEMA);
		}
		if (request.getParameter(PARLLOR) != null) {
			parllor = request.getParameter(PARLLOR);
		}
		if (request.getParameter(ANY_COMPLIANT) != null) {
			anyCompliant = request.getParameter(ANY_COMPLIANT);
		}
		if (request.getParameter(WEIGHT_ANTENATAL) != null) {
			weightAntenatal = request.getParameter(WEIGHT_ANTENATAL);
		}
		if (request.getParameter(WILLING_FOR_TUBECTOMY) != null) {
			willingForTubectomy = request.getParameter(WILLING_FOR_TUBECTOMY);
		}
		if (request.getParameter(HIGH_RISK_FACTORS) != null) {
			highRiskFactors = request.getParameter(HIGH_RISK_FACTORS);
		}
		if (request.getParameter(THREE_HR) != null) {
			threeHr = request.getParameter(THREE_HR);
		}
		if (request.getParameter(TWO_HR) != null) {
			twoHr = request.getParameter(TWO_HR);
		}
		if (request.getParameter(ONE_HR) != null) {
			oneHr = request.getParameter(ONE_HR);
		}
		if (request.getParameter(FASTING) != null) {
			fasting = request.getParameter(FASTING);
		}
		if (request.getParameter(ADVICE) != null) {
			advice = request.getParameter(ADVICE);
		}

		if (request.getParameter(OGTT) != null) {
			ogtt = request.getParameter(OGTT);
		}
		if (request.getParameter(GCT) != null) {
			gct = request.getParameter(GCT);
		}
		if (request.getParameter(HIV) != null) {
			hiv = request.getParameter(HIV);
		}
		if (request.getParameter(HBSAG) != null) {
			hbsag = request.getParameter(HBSAG);
		}
		if (request.getParameter(STS) != null) {
			sts = request.getParameter(STS);
		}
		if (request.getParameter(BLOOD_GROUP_HUSBAND) != null) {
			bloodGroupHusband = request.getParameter(BLOOD_GROUP_HUSBAND);
		}
		if (request.getParameter(BLOOD_GROUP_WIFE) != null) {
			bloodGroupWife = request.getParameter(BLOOD_GROUP_WIFE);
		}
		if (request.getParameter(TRANSVERSE_COLON) != null) {
			lungs = request.getParameter(TRANSVERSE_COLON);
		}
		if (request.getParameter(HEART) != null) {
			heart = request.getParameter(HEART);
		}
		if (request.getParameter(NIPPLE) != null) {
			nipple = request.getParameter(NIPPLE);
		}
		if (request.getParameter(BREAST) != null) {
			breast = request.getParameter(BREAST);
		}
		if (request.getParameter(WEIGHT) != null) {
			weight = request.getParameter(WEIGHT);
		}
		if (request.getParameter(HEIGHT) != null) {
			height = request.getParameter(HEIGHT);
		}
		if (request.getParameter(NUTRITION) != null) {
			nutrition = request.getParameter(NUTRITION);
		}
		if (request.getParameter(BUILD) != null) {
			build = request.getParameter(BUILD);
		}
		if (request.getParameter(SMOKING) != null) {
			smoking = request.getParameter(SMOKING);
		}
		if (request.getParameter(DIETARY_HABIT) != null) {
			dietaryHabit = request.getParameter(DIETARY_HABIT);
		}
		if (request.getParameter(FOETAL_ABNORMALITY) != null) {
			foetalAbnormality = request.getParameter(FOETAL_ABNORMALITY);
		}
		if (request.getParameter(MULTIPLE_PREGNANCY) != null) {
			multiplePregnancy = request.getParameter(MULTIPLE_PREGNANCY);
		}
		if (request.getParameter(GYNECOLOGICAL) != null) {
			gynecological = request.getParameter(GYNECOLOGICAL);
		}
		if (request.getParameter(SURGICAL) != null) {
			surgical = request.getParameter(SURGICAL);
		}
		if (request.getParameter(MEDICAL) != null) {
			medical = request.getParameter(MEDICAL);
		}
		if (request.getParameter(GENERAL_HEALTH) != null) {
			generalHealth = request.getParameter(GENERAL_HEALTH);
		}
		if (request.getParameter(BREAST_FEEDING) != null) {
			breastFeeding = request.getParameter(BREAST_FEEDING);
		}
		if (request.getParameter(SEX) != null) {
			sex = request.getParameter(SEX);
		}
		if (request.getParameter(COMPLICATIONS) != null) {
			complications = request.getParameter(COMPLICATIONS);
		}
		if (request.getParameter(PREGNANCY_OUTCOME) != null) {
			pregnancyOutcome = request.getParameter(PREGNANCY_OUTCOME);
		}
		if (request.getParameter(DAYS) != null) {
			days = request.getParameter(DAYS);
		}
		if (request.getParameter(CYCLE) != null) {
			cycle = request.getParameter(CYCLE);
		}

		if (!request.getParameter(MENARCHE).equals("")
				&& (request.getParameter(MENARCHE) != null)) {
			menarche = Integer.parseInt(request.getParameter(MENARCHE));
		}

		if (request.getParameter(GRAVIDA) != null
				&& (!request.getParameter(GRAVIDA).equals(""))) {
			gravida = Integer.parseInt(request.getParameter(GRAVIDA));
		}
		if (request.getParameter(PARA) != null
				&& (!request.getParameter(PARA).equals(""))) {
			para = Integer.parseInt(request.getParameter(PARA));
		}

		if (request.getParameter(ABORTIONS) != null
				&& (!request.getParameter(ABORTIONS).equals(""))) {
			abortions = Integer.parseInt(request.getParameter(ABORTIONS));
		}
		if (!request.getParameter(LIVE).equals("")
				&& request.getParameter(LIVE) != null) {
			live = Integer.parseInt(request.getParameter(LIVE));
		}
		if ((request.getParameter(ECTOPIC) != null)
				&& (!request.getParameter(ECTOPIC).equals(""))) {
			ectopic = Integer.parseInt(request.getParameter(ECTOPIC));
		}
		if ((request.getParameter(AGE_UNIT) != null)
				&& (!request.getParameter(AGE_UNIT).equals(""))) {
			age = Integer.parseInt(request.getParameter(AGE_UNIT));
		}

		if (request.getParameter(BIRTH_WEIGHT) != null
				&& (!request.getParameter(BIRTH_WEIGHT).equals(""))) {
			birthWeight = Integer.parseInt(request.getParameter(BIRTH_WEIGHT));
		}
		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		OpdAntenatalCard antenatalCard = new OpdAntenatalCard();
		try {

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);
			antenatalCard.setDepartment(masDepartment);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			antenatalCard.setHospital(masHospital);

			Patient patient = new Patient();
			patient.setId(hinId);
			antenatalCard.setHin(patient);

			Visit visit = new Visit();
			visit.setId(visitId);
			antenatalCard.setVisit(visit);

			antenatalCard.setLastChgTime(time);
			antenatalCard.setLastChgBy(userId);
			antenatalCard.setStatus("y");
			antenatalCard.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(date));

			antenatalCard.setAbortions(abortions);
			antenatalCard.setAdvice(advice);
			antenatalCard.setAge(age);
			antenatalCard.setAntenatalDate(antenatalDate);
			antenatalCard.setAnyCompliant(anyCompliant);
			antenatalCard.setBirthWeight(birthWeight);
			antenatalCard.setBloodGroupHusband(bloodGroupHusband);
			antenatalCard.setBloodGroupWife(bloodGroupWife);
			antenatalCard.setBp(bp);
			antenatalCard.setBreast(breast);
			antenatalCard.setBreastFeeding(breastFeeding);
			antenatalCard.setBuild(build);
			antenatalCard.setComplications(complications);
			antenatalCard.setCycle(cycle);
			antenatalCard.setDays(days);
			antenatalCard.setDietaryHabit(dietaryHabit);
			antenatalCard.setEctopic(ectopic);
			antenatalCard.setEdd(edd);
			antenatalCard.setEngagement(engagement);
			antenatalCard.setExaminationDate(examinationDate);
			antenatalCard.setFasting(fasting);
			antenatalCard.setFhsFm(fhsFm);
			antenatalCard.setFoetalAbnormality(foetalAbnormality);
			antenatalCard.setGct(gct);
			antenatalCard.setGeneralHealth(generalHealth);
			antenatalCard.setGravida(gravida);
			antenatalCard.setGynecological(gynecological);
			antenatalCard.setHbGms(hbGms);
			antenatalCard.setHbsag(hbsag);
			antenatalCard.setHeart(heart);
			antenatalCard.setHeight(height);
			antenatalCard.setHighRiskFactors(highRiskFactors);
			antenatalCard.setHiv(hiv);
			antenatalCard.setLive(live);
			antenatalCard.setLmp(lmp);
			antenatalCard.setLungs(lungs);
			antenatalCard.setMedical(medical);

			String[] medicalHistoryArray = null;
			if (request.getParameterValues(MEDICAL_HISTORY) != null) {
				medicalHistoryArray = (String[]) request
						.getParameterValues(MEDICAL_HISTORY);
				for (int x = 0; x < medicalHistoryArray.length; x++) {
					if (x == 0)
						medicalHistory = medicalHistoryArray[x];
					else
						medicalHistory = medicalHistory + ","
								+ medicalHistoryArray[x];
				}
			}
			antenatalCard.setMedicalHistory(medicalHistory);
			antenatalCard.setMenarche(menarche);
			antenatalCard.setMultiplePregnancy(multiplePregnancy);
			antenatalCard.setNextVisitOn(nextVisitOn);
			antenatalCard.setNipple(nipple);
			antenatalCard.setNutrition(nutrition);
			antenatalCard.setOedema(oedema);
			antenatalCard.setOneHr(oneHr);
			antenatalCard.setPara(para);
			antenatalCard.setParllor(parllor);
			antenatalCard.setPregnancyOutcome(pregnancyOutcome);
			antenatalCard.setPresentationPosition(presentationPosition);
			antenatalCard.setSex(sex);
			antenatalCard.setSmoking(smoking);
			antenatalCard.setSts(sts);
			antenatalCard.setSurgical(surgical);
			antenatalCard.setTetanusOnestDoseDate(tetanusOnestDoseDate);
			antenatalCard.setTetanusTwondDoseDate(tetanusTwondDoseDate);
			antenatalCard.setTwoHr(twoHr);
			antenatalCard.setThreeHr(threeHr);
			antenatalCard.setUrine(urine);
			antenatalCard.setUterineSize(uterineSize);
			antenatalCard.setWeight(weight);
			antenatalCard.setWeightAntenatal(weightAntenatal);
			antenatalCard.setWillingForTubectomy(willingForTubectomy);
			antenatalCard.setYear(year);
			antenatalCard.setOgtt(ogtt);
			antenatalCard.setOgttDate(ogttDate);

			String referredDept = "";
			String[] referredToDeptArray = null;
			if (request.getParameterValues(DEPARTMENT_ID) != null) {
				referredToDeptArray = (String[]) request
						.getParameterValues(DEPARTMENT_ID);
				for (int i = 0; i < referredToDeptArray.length; i++) {
					if (i == 0)
						referredDept = referredToDeptArray[i];
					else
						referredDept = referredDept + ","
								+ referredToDeptArray[i];
				}
			}
			infoMap.put("antenatalCard", antenatalCard);
			infoMap.put("visitId", visitId);
			infoMap.put("hospitalId", hospitalId);
			infoMap.put("referredDept", referredDept);
		}

		catch (Exception e) {
			e.printStackTrace();
		}
		boolean successfullyAdded = false;
		successfullyAdded = opdHandlerService.addAntenatalCard(infoMap);

		if (successfullyAdded) {
			message = "Antenatal Card has been done Successfully..";
		} else {
			message = "Antenatal Card has not been done Successfully..";
		}

		try {
			map = opdHandlerService.getAntenatalCard(visitId);

		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "messageOBG";
		title = "Add Antenatal Card";
		jsp += ".jsp";
		map.put("visitId", visitId);
		map.put("message", message);
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView viewAntenatalCard(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}

		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showAntenatalCardJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewAntenatalCard(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = "viewAntenatalCard";
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView updateAntenatalCard(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();

		boolean saved = false;
		// HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);

		/*
		 * int departmentId = (Integer)session.getAttribute("deptId");
		 * box.put("departmentId", departmentId);
		 * 
		 * int hospitalId = (Integer)session.getAttribute("hospitalId");
		 * box.put("hospitalId", hospitalId);
		 * 
		 * Users user = (Users)session.getAttribute("users"); int userId =
		 * user.getId(); box.put("userId", userId);
		 */

		int visitId = Integer.parseInt(request.getParameter("visitId"));
		map = opdHandlerService.updateAntenatalCard(box);
		saved = (Boolean) map.get("saved");
		String message = "";
		if (saved) {
			message = "Antenatal Card updated Successfully.";
		} else {
			message = "Some Problem Occured.";
		}
		map.put("visitId", visitId);
		jsp = "messageAntenatalCard";
		map.put("message", message);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView showAntenatalCardEditJsp(HttpServletRequest request,
			HttpServletResponse response) {
		int aId = Integer.parseInt(request.getParameter("aId"));
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		map = opdHandlerService.getAntenatalCardEdit(aId, visitId);

		jsp = ANTENATAL_CARD_EDIT_JSP;
		title = "Antenatal Card List";
		map.put("visitId", visitId);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView showGravidagramHTNJsp(HttpServletRequest request,
			HttpServletResponse response) {
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		map = opdHandlerService.getGravidagramHTN(visitId);

		jsp = GRAVIDAGRAM_HTN_JSP;
		title = "Antenatal Card List";
		map.put("visitId", visitId);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);

	}

	@SuppressWarnings("unchecked")
	public ModelAndView addGravidagramHTN(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		int hinId = 0;
		int visitId = 0;
		String date = "";
		String time = "";
		String days = "";
		String weeks = "";
		String am = "";
		String pm = "";
		String dfmc = "";
		String fhs = "";
		String fundalHt = "";
		String abdoGirth = "";
		String wtKg = "";
		String uAlb = "";
		String usgAfi = "";
		String nst = "";
		String haemat = "";
		Date gravidagramHtnDate = new Date();

		HttpSession session = request.getSession();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");
		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");

		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
		}
		if (!request.getParameter(VISIT_ID).equals("")) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		if (request.getParameter(DATE) != null
				&& !(request.getParameter(DATE).equals(""))) {
			gravidagramHtnDate = HMSUtil.dateFormatterDDMMYYYY(request
					.getParameter(DATE));
		}
		if (request.getParameter(HAEMAT) != null
				&& !(request.getParameter(HAEMAT).equals(""))) {
			haemat = request.getParameter(HAEMAT);
		}
		if (request.getParameter(NST) != null) {
			nst = request.getParameter(NST);
		}
		if (request.getParameter(USB_AFI) != null) {
			usgAfi = request.getParameter(USB_AFI);
		}
		if (request.getParameter(U_ALB) != null) {
			uAlb = request.getParameter(U_ALB);
		}
		if (request.getParameter(WT_KG) != null) {
			wtKg = request.getParameter(WT_KG);
		}
		if (request.getParameter(ABDO_GIRTH) != null) {
			abdoGirth = request.getParameter(ABDO_GIRTH);
		}
		if (request.getParameter(FUBDAL_HT) != null) {
			fundalHt = request.getParameter(FUBDAL_HT);
		}
		if (request.getParameter(AM) != null) {
			am = request.getParameter(AM);
		}
		if (request.getParameter(PM) != null) {
			pm = request.getParameter(PM);
		}
		if (request.getParameter(FHS) != null) {
			fhs = request.getParameter(FHS);
		}
		if (request.getParameter(DFMC) != null) {
			dfmc = request.getParameter(DFMC);
		}
		if (request.getParameter(WEEKS) != null) {
			weeks = request.getParameter(WEEKS);
		}
		if (request.getParameter(DAYS) != null) {
			days = request.getParameter(DAYS);
		}

		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		OpdGravidagramHtn gravidagramHtn = new OpdGravidagramHtn();
		try {

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);
			gravidagramHtn.setDepartment(masDepartment);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			gravidagramHtn.setHospital(masHospital);

			Patient patient = new Patient();
			patient.setId(hinId);
			gravidagramHtn.setHin(patient);

			Visit visit = new Visit();
			visit.setId(visitId);
			gravidagramHtn.setVisit(visit);

			gravidagramHtn.setLastChgTime(time);
			gravidagramHtn.setLastChgBy(userId);
			gravidagramHtn.setStatus("y");
			gravidagramHtn.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(date));

			gravidagramHtn.setGravidagramHtnDate(gravidagramHtnDate);
			gravidagramHtn.setAbdoGirth(abdoGirth);
			gravidagramHtn.setBpAm(am);
			gravidagramHtn.setBpPm(pm);
			gravidagramHtn.setFetusDffmc(dfmc);
			gravidagramHtn.setFetusFhs(fhs);
			gravidagramHtn.setFundalHt(fundalHt);
			gravidagramHtn.setHaematBiochemInvestigations(haemat);
			gravidagramHtn.setNst(nst);
			gravidagramHtn.setPogDays(days);
			gravidagramHtn.setPogWeeks(weeks);
			gravidagramHtn.setUAlb(uAlb);
			gravidagramHtn.setUsgAfi(usgAfi);
			gravidagramHtn.setWtKg(wtKg);

			String referredDept = "";
			String[] referredToDeptArray = null;
			if (request.getParameterValues(DEPARTMENT_ID) != null) {
				referredToDeptArray = (String[]) request
						.getParameterValues(DEPARTMENT_ID);
				for (int i = 0; i < referredToDeptArray.length; i++) {
					if (i == 0)
						referredDept = referredToDeptArray[i];
					else
						referredDept = referredDept + ","
								+ referredToDeptArray[i];
				}
			}
			infoMap.put("gravidagramHtn", gravidagramHtn);
			infoMap.put("visitId", visitId);
			infoMap.put("hospitalId", hospitalId);
			infoMap.put("referredDept", referredDept);
		}

		catch (Exception e) {
			e.printStackTrace();
		}
		boolean successfullyAdded = false;
		successfullyAdded = opdHandlerService.addGravidagramHTN(infoMap);

		if (successfullyAdded) {
			message = "Gravidagram HTN has been done Successfully..";
		} else {
			message = "Gravidagram HTN has not been done Successfully..";
		}

		/*
		 * try{ map = opdHandlerService.getAntenatalCard(visitId);
		 * 
		 * }catch (Exception e) { e.printStackTrace(); }
		 */
		jsp = "messageGravidagramHTN";
		title = "Add Antenatal Card";
		map.put("visitId", visitId);
		map.put("message", message);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView viewGravidagramHTN(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}

		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showGravidagramHTNJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			// int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			/*
			 * if(request.getParameter("visitNoForJsp") != null){ visitNoForJsp
			 * = Integer.parseInt(request.getParameter("visitNoForJsp")); }
			 */
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId;
		}
		map = opdHandlerService.viewGravidagramHTN(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = "viewGravidagramHTN";
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView showGravidagramGestationalDiabitiesOneJsp(
			HttpServletRequest request, HttpServletResponse response) {
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		map = opdHandlerService.getGravidagramGestationalDiabitiesOne(visitId);

		jsp = GRAVIDAGRAM_GESTATIONAL_DIABITIES_ONE_JSP;
		title = "Gravidagram estational Diabities One List";
		map.put("visitId", visitId);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);

	}

	@SuppressWarnings("unchecked")
	public ModelAndView addGravidagramGestationalDiabitiesOne(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		int hinId = 0;
		int visitId = 0;
		String date = "";
		String time = "";

		Date gravidagramDate = new Date();
		Date lmp = new Date();
		Date edd = new Date();
		Date dateOgtt = new Date();
		Date dateGct = new Date();

		String party = "";
		String pmc = "";
		String riskFactors = "";
		String prevPregnancy = "";
		String presentPregnancy = "";
		String pogOgtt = "";
		String pogGct = "";
		String valueOgtt = "";
		String valueGct = "";

		String remarksOgtt = "";
		String remarksGct = "";

		String fasting = "";
		String familyHoDm = "";
		String bmi = "";
		int height = 0;
		int weight = 0;

		HttpSession session = request.getSession();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");
		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");

		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
		}
		if (!request.getParameter(VISIT_ID).equals("")) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		if (request.getParameter(DATE) != null
				&& !(request.getParameter(DATE).equals(""))) {
			gravidagramDate = HMSUtil.dateFormatterDDMMYYYY(request
					.getParameter(DATE));
		}
		if (request.getParameter(LMP) != null
				&& !(request.getParameter(LMP).equals(""))) {
			lmp = HMSUtil.dateFormatterDDMMYYYY(request.getParameter(LMP));
		}
		if (request.getParameter(EDD) != null
				&& !(request.getParameter(EDD).equals(""))) {
			edd = HMSUtil.dateFormatterDDMMYYYY(request.getParameter(EDD));
		}
		if (request.getParameter(DATE_OGTT) != null
				&& !(request.getParameter(DATE_OGTT).equals(""))) {
			dateOgtt = HMSUtil.dateFormatterDDMMYYYY(request
					.getParameter(DATE_OGTT));
		}
		if (request.getParameter(DATE_GCT) != null
				&& !(request.getParameter(DATE_GCT).equals(""))) {
			dateGct = HMSUtil.dateFormatterDDMMYYYY(request
					.getParameter(DATE_GCT));
		}
		if (request.getParameter(PARTY) != null
				&& !(request.getParameter(PARTY).equals(""))) {
			party = request.getParameter(PARTY);
		}
		if (request.getParameter(PMC) != null) {
			pmc = request.getParameter(PMC);
		}
		if (request.getParameter(LIVE) != null) {
			prevPregnancy = request.getParameter(LIVE);
		}
		if (request.getParameter(ECTOPIC) != null) {
			presentPregnancy = request.getParameter(ECTOPIC);
		}
		if (request.getParameter(POG_OGTT) != null) {
			pogOgtt = request.getParameter(POG_OGTT);
		}
		if (request.getParameter(POG_GCT) != null) {
			pogGct = request.getParameter(POG_GCT);
		}
		if (request.getParameter(VALUES_GCT) != null) {
			valueGct = request.getParameter(VALUES_GCT);
		}
		if (request.getParameter(VALUES_OGTT) != null) {
			valueOgtt = request.getParameter(VALUES_OGTT);
		}
		if (request.getParameter(REMARKS_GCT) != null) {
			remarksGct = request.getParameter(REMARKS_GCT);
		}
		if (request.getParameter(REMARKS_OGTT) != null) {
			remarksOgtt = request.getParameter(REMARKS_OGTT);
		}
		if (request.getParameter(FASTING) != null) {
			fasting = request.getParameter(FASTING);
		}
		if (request.getParameter(RISK_FACTORY) != null) {
			riskFactors = request.getParameter(RISK_FACTORY);
		}
		if (request.getParameter(BMI) != null) {
			bmi = request.getParameter(BMI);
		}
		if (request.getParameter(FAMILY_HO_DM) != null) {
			familyHoDm = request.getParameter(FAMILY_HO_DM);
		}
		if (!request.getParameter(WEIGHT).equals("")) {
			weight = Integer.parseInt(request.getParameter(WEIGHT));
		}
		if (!request.getParameter(HEIGHT).equals("")) {
			height = Integer.parseInt(request.getParameter(HEIGHT));
		}
		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		OpdGravidagramGestationalDiabitiesOne gravidagramGestationalDiabitiesOne = new OpdGravidagramGestationalDiabitiesOne();
		try {

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);
			gravidagramGestationalDiabitiesOne.setDepartment(masDepartment);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			gravidagramGestationalDiabitiesOne.setHospital(masHospital);

			Patient patient = new Patient();
			patient.setId(hinId);
			gravidagramGestationalDiabitiesOne.setHin(patient);

			Visit visit = new Visit();
			visit.setId(visitId);
			gravidagramGestationalDiabitiesOne.setVisit(visit);

			gravidagramGestationalDiabitiesOne.setLastChgTime(time);
			gravidagramGestationalDiabitiesOne.setLastChgBy(userId);
			gravidagramGestationalDiabitiesOne.setStatus("y");
			gravidagramGestationalDiabitiesOne.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(date));

			gravidagramGestationalDiabitiesOne.setBmi(bmi);
			gravidagramGestationalDiabitiesOne.setEdd(edd);
			gravidagramGestationalDiabitiesOne.setFamilyHoDm(familyHoDm);
			gravidagramGestationalDiabitiesOne.setGctDate(dateGct);
			gravidagramGestationalDiabitiesOne.setGctFasting(fasting);
			gravidagramGestationalDiabitiesOne.setGctPog(pogGct);
			gravidagramGestationalDiabitiesOne.setGctRemarks(remarksGct);
			gravidagramGestationalDiabitiesOne.setGctValue(valueGct);
			gravidagramGestationalDiabitiesOne
					.setGravidagramGestationalDiabitiesOneDate(gravidagramDate);
			gravidagramGestationalDiabitiesOne.setHeight(height);
			gravidagramGestationalDiabitiesOne.setLmp(lmp);
			gravidagramGestationalDiabitiesOne.setOgttDate(dateOgtt);
			gravidagramGestationalDiabitiesOne.setOgttPog(pogOgtt);
			gravidagramGestationalDiabitiesOne.setOgttRemarks(remarksOgtt);
			gravidagramGestationalDiabitiesOne.setOgttValue(valueOgtt);
			gravidagramGestationalDiabitiesOne.setParty(party);
			gravidagramGestationalDiabitiesOne.setPmc(pmc);
			gravidagramGestationalDiabitiesOne
					.setPresentPregnancy(presentPregnancy);
			gravidagramGestationalDiabitiesOne.setPrevPregnancy(prevPregnancy);
			gravidagramGestationalDiabitiesOne.setRiskFactors(riskFactors);
			gravidagramGestationalDiabitiesOne.setWeight(weight);
			String referredDept = "";
			String[] referredToDeptArray = null;
			if (request.getParameterValues(DEPARTMENT_ID) != null) {
				referredToDeptArray = (String[]) request
						.getParameterValues(DEPARTMENT_ID);
				for (int i = 0; i < referredToDeptArray.length; i++) {
					if (i == 0)
						referredDept = referredToDeptArray[i];
					else
						referredDept = referredDept + ","
								+ referredToDeptArray[i];
				}
			}
			infoMap.put("gravidagramGestationalDiabitiesOne",
					gravidagramGestationalDiabitiesOne);
			infoMap.put("visitId", visitId);
			infoMap.put("hospitalId", hospitalId);
			infoMap.put("referredDept", referredDept);
		}

		catch (Exception e) {
			e.printStackTrace();
		}
		boolean successfullyAdded = false;
		successfullyAdded = opdHandlerService
				.addGravidagramGestationalDiabitiesOne(infoMap);

		if (successfullyAdded) {
			message = "gravidagram Gestational Diabities One  has been done Successfully..";
		} else {
			message = "gravidagram Gestational Diabities One has not been done Successfully..";
		}

		/*
		 * try{ map = opdHandlerService.getAntenatalCard(visitId);
		 * 
		 * }catch (Exception e) { e.printStackTrace(); }
		 */
		jsp = "messageGravidagramHTN";
		title = "Add Ggravidagram Gestational Diabities One";
		map.put("visitId", visitId);
		map.put("message", message);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView viewGravidagramGestationalDiabitiesOne(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}

		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showGravidagramGestationalDiabitiesOneJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			// int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			/*
			 * if(request.getParameter("visitNoForJsp") != null){ visitNoForJsp
			 * = Integer.parseInt(request.getParameter("visitNoForJsp")); }
			 */
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId;
		}
		map = opdHandlerService
				.viewGravidagramGestationalDiabitiesOne(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = "viewGravidagramGestationalDiabitiesOne";
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView showGravidagramGestationalDiabitiesTwoJsp(
			HttpServletRequest request, HttpServletResponse response) {
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		map = opdHandlerService.getGravidagramGestationalDiabitiesTwo(visitId);

		jsp = GRAVIDAGRAM_GESTATIONAL_DIABITIES_TWO_JSP;
		title = "Gravidagram estational Diabities Two List";
		map.put("visitId", visitId);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);

	}

	@SuppressWarnings("unchecked")
	public ModelAndView addGravidagramGestationalDiabitiesTwo(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		int hinId = 0;
		int visitId = 0;
		String date = "";
		String time = "";

		String nuchalTraslucency = "";
		String msarp = "";
		String anomalyScan = "";
		String retalEcho = "";
		Date datePog = new Date();
		String metAge = "";
		String cen = "";
		String ac = "";
		String efw = "";

		String ael = "";
		String nst = "";

		String elAcac = "";
		String pondrelIndex = "";
		String remarks = "";
		String doppler = "";
		String deliverNote = "";
		String birthWeight = "";
		String mnNeonatlEcome = "";

		HttpSession session = request.getSession();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");
		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");

		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
		}
		if (!request.getParameter(VISIT_ID).equals("")) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		if (request.getParameter(NUCHAL_TRASLUCENCY) != null
				&& !(request.getParameter(NUCHAL_TRASLUCENCY).equals(""))) {
			nuchalTraslucency = request.getParameter(NUCHAL_TRASLUCENCY);
		}
		if (request.getParameter(MSARP) != null) {
			msarp = request.getParameter(MSARP);
		}
		if (request.getParameter(ANOMALY_SCAN) != null) {
			anomalyScan = request.getParameter(ANOMALY_SCAN);
		}
		if (request.getParameter(RETAL_ECHO) != null) {
			retalEcho = request.getParameter(RETAL_ECHO);
		}
		if (request.getParameter(POG) != null
				&& !(request.getParameter(POG).equals(""))) {
			datePog = HMSUtil.dateFormatterDDMMYYYY(request.getParameter(POG));
		}

		if (request.getParameter(MET_AGE) != null) {
			metAge = request.getParameter(MET_AGE);
		}
		if (request.getParameter(CEN) != null) {
			cen = request.getParameter(CEN);
		}
		if (request.getParameter(AC) != null) {
			ac = request.getParameter(AC);
		}
		if (request.getParameter(EFW) != null) {
			efw = request.getParameter(EFW);
		}
		if (request.getParameter(AEL) != null) {
			ael = request.getParameter(AEL);
		}
		if (request.getParameter(NST) != null) {
			nst = request.getParameter(NST);
		}
		if (request.getParameter(EL_ACAC) != null) {
			elAcac = request.getParameter(EL_ACAC);
		}
		if (request.getParameter(PONDREL_INDEX) != null) {
			pondrelIndex = request.getParameter(PONDREL_INDEX);
		}
		if (request.getParameter(REMARKS) != null) {
			remarks = request.getParameter(REMARKS);
		}
		if (request.getParameter(DOPPLER) != null) {
			doppler = request.getParameter(DOPPLER);
		}
		if (request.getParameter(DELIVER_NOTE) != null) {
			deliverNote = request.getParameter(DELIVER_NOTE);
		}
		if (request.getParameter(BIRTH_WEIGHT) != null) {
			birthWeight = request.getParameter(BIRTH_WEIGHT);
		}
		if (request.getParameter(MN_NEONATL_ECOME) != null) {
			mnNeonatlEcome = request.getParameter(MN_NEONATL_ECOME);
		}

		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		OpdGravidagramGestationalDiabitiesTwo gravidagramGestationalDiabitiesTwo = new OpdGravidagramGestationalDiabitiesTwo();
		try {

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);
			gravidagramGestationalDiabitiesTwo.setDepartment(masDepartment);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			gravidagramGestationalDiabitiesTwo.setHospital(masHospital);

			Patient patient = new Patient();
			patient.setId(hinId);
			gravidagramGestationalDiabitiesTwo.setHin(patient);

			Visit visit = new Visit();
			visit.setId(visitId);
			gravidagramGestationalDiabitiesTwo.setVisit(visit);

			gravidagramGestationalDiabitiesTwo.setLastChgTime(time);
			gravidagramGestationalDiabitiesTwo.setLastChgBy(userId);
			gravidagramGestationalDiabitiesTwo.setStatus("y");
			gravidagramGestationalDiabitiesTwo.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(date));
			gravidagramGestationalDiabitiesTwo.setAc(ac);
			gravidagramGestationalDiabitiesTwo.setAel(ael);
			gravidagramGestationalDiabitiesTwo.setAnomalyScan(anomalyScan);
			gravidagramGestationalDiabitiesTwo.setBirthWeight(birthWeight);
			gravidagramGestationalDiabitiesTwo.setCen(cen);
			gravidagramGestationalDiabitiesTwo.setDeliverNote(deliverNote);
			gravidagramGestationalDiabitiesTwo.setDoppler(doppler);
			gravidagramGestationalDiabitiesTwo.setEfw(efw);
			gravidagramGestationalDiabitiesTwo.setElAcac(elAcac);
			gravidagramGestationalDiabitiesTwo.setMetAge(metAge);
			gravidagramGestationalDiabitiesTwo
					.setMnNeonatlEcome(mnNeonatlEcome);
			gravidagramGestationalDiabitiesTwo.setMsarp(msarp);
			gravidagramGestationalDiabitiesTwo.setNst(nst);
			gravidagramGestationalDiabitiesTwo
					.setNuchalTraslucency(nuchalTraslucency);
			gravidagramGestationalDiabitiesTwo.setPog(datePog);
			gravidagramGestationalDiabitiesTwo.setPondrelIndex(pondrelIndex);
			gravidagramGestationalDiabitiesTwo.setRemarks(remarks);
			gravidagramGestationalDiabitiesTwo.setRetalEcho(retalEcho);

			String referredDept = "";
			String[] referredToDeptArray = null;
			if (request.getParameterValues(DEPARTMENT_ID) != null) {
				referredToDeptArray = (String[]) request
						.getParameterValues(DEPARTMENT_ID);
				for (int i = 0; i < referredToDeptArray.length; i++) {
					if (i == 0)
						referredDept = referredToDeptArray[i];
					else
						referredDept = referredDept + ","
								+ referredToDeptArray[i];
				}
			}
			infoMap.put("gravidagramGestationalDiabitiesTwo",
					gravidagramGestationalDiabitiesTwo);
			infoMap.put("visitId", visitId);
			infoMap.put("hospitalId", hospitalId);
			infoMap.put("referredDept", referredDept);
		}

		catch (Exception e) {
			e.printStackTrace();
		}
		boolean successfullyAdded = false;
		successfullyAdded = opdHandlerService
				.addGravidagramGestationalDiabitiesTwo(infoMap);

		if (successfullyAdded) {
			message = "gravidagram Gestational Diabities Two  has been done Successfully..";
		} else {
			message = "gravidagram Gestational Diabities Two has not been done Successfully..";
		}

		/*
		 * try{ map = opdHandlerService.getAntenatalCard(visitId);
		 * 
		 * }catch (Exception e) { e.printStackTrace(); }
		 */
		jsp = "messageGravidagramHTN";
		title = "Add Ggravidagram Gestational Diabities Two";
		map.put("visitId", visitId);
		map.put("message", message);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView viewGravidagramGestationalDiabitiesTwo(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}

		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showGravidagramGestationalDiabitiesTwoJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			// int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			/*
			 * if(request.getParameter("visitNoForJsp") != null){ visitNoForJsp
			 * = Integer.parseInt(request.getParameter("visitNoForJsp")); }
			 */
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId;
		}
		map = opdHandlerService
				.viewGravidagramGestationalDiabitiesTwo(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = "viewGravidagramGestationalDiabitiesTwo";
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);

	}

	// ------------------------------------------------For
	// Reports----------------------------------------

	@SuppressWarnings("unchecked")
	public ModelAndView getOpdReportList(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		String serviceNo = "";
		String hinNo = "";
		try {
			if (request.getParameter(SERVICE_NO) != null
					&& !(request.getParameter(SERVICE_NO).equals(""))) {
				serviceNo = request.getParameter(SERVICE_NO);
				detailsMap.put("serviceNo", serviceNo);
			}
			if (request.getParameter(HIN_NO_FOR_REPORT) != null
					&& !(request.getParameter(HIN_NO_FOR_REPORT).equals(""))) {
				hinNo = request.getParameter(HIN_NO_FOR_REPORT);
				detailsMap.put("hinNo", hinNo);
			}
			List<Object> visitNoList = new ArrayList<Object>();
			List<Object> hinNoList = new ArrayList<Object>();
			String flag = "";

			if (request.getParameter("flag") != null) {
				flag = request.getParameter("flag");
			}
			if (flag.equals("visit")) {
				visitNoList = opdHandlerService.getVisitNoList(detailsMap);
				map.put("visitNoList", visitNoList);
				jsp = RESPONSE_FOR_OPD_VISIT_NO;

			} else if (flag.equals("hin")) {
				hinNoList = opdHandlerService.getHinNoList(serviceNo);
				map.put("hinNoList", hinNoList);
				jsp = RESPONSE_FOR_OPD_HIN_NO;

			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView(jsp, "map", map);

	}

	private JasperReport getCompiledReport(String fileName) throws JRException {

		File reportFile = new File(getServletContext().getRealPath(
				"/reports/" + fileName + ".jasper"));
		JasperReport jasperReport = (JasperReport) JRLoader
				.loadObject(reportFile.getPath());

		return jasperReport;
	}

	// ----------------------------------------Patient Prescription Report
	// ------------------

	public ModelAndView showPatientPrescriptionReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = PATIENT_PRESCRIPTION_REPORT_JSP + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showPatientPrescriptionInvestigationRep(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = "PatientInvestigationPrescription" + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public ModelAndView showPatientPrescriptionReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visiNo = 0;
		String serviceNo = "";
		String hinNo = "";
		int visitId = 0;
		int hospitalIdForReport = 0;
		Box box = HMSUtil.getBox(request);
		if (request.getParameter(SERVICE_NO_FOR_REPORT) != null) {
			serviceNo = request.getParameter(SERVICE_NO_FOR_REPORT);
		}
		if (request.getParameter(VISIT_NUMBER_FOR_REPORT) != null) {
			visiNo = Integer.parseInt(request
					.getParameter(VISIT_NUMBER_FOR_REPORT));
		}
		if (request.getParameter(HIN_NO_FOR_REPORT) != null) {
			hinNo = request.getParameter(HIN_NO_FOR_REPORT);
		}
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}

		if (request.getParameter("hospitalIdForReport") != null) {
			hospitalIdForReport = Integer.parseInt(request
					.getParameter("hospitalIdForReport"));
		}

		Map<String, Object> parameters = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		if (hospitalIdForReport != 0) {
			int hospitalId = hospitalIdForReport;
			parameters.put("hospitalId", hospitalId);
		} else {
			int hospitalId = (Integer) session.getAttribute("hospitalId");
			parameters.put("hospitalId", hospitalId);
		}

		parameters.put("visitNo", visiNo);
		parameters.put("visitId", visitId);
		parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);

		/*
		 * System.out.println("visitId="+visitId);
		 * System.out.println("hinNo="+hinNo);
		 * System.out.println("hospitalId="+hospitalId);
		 */
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		parameters.put("SUBREPORT_DIR",
				getServletContext().getRealPath("/reports/"));
		/*
		 * try { byte[] bytes = null; try { bytes =
		 * JasperRunManager.runReportToPdf(
		 * getCompiledReport("PatientPrescriptionFormat"), parameters,
		 * (Connection) detailsMap.get("conn"));
		 * 
		 * } catch (JRException e) {
		 * 
		 * e.printStackTrace(); } response.setContentType("application/pdf"); if
		 * (bytes.length != 0) { response.setContentLength(bytes.length); }
		 * ServletOutputStream ouputStream; try { ouputStream =
		 * response.getOutputStream(); ouputStream.write(bytes, 0,
		 * bytes.length); ouputStream.flush(); ouputStream.close(); } catch
		 * (IOException e) { e.printStackTrace(); }
		 * 
		 * } catch (IllegalStateException e) { e.printStackTrace(); }
		 */
		HMSUtil.generateReport("PatientPrescriptionFormat", parameters,
				(Connection) detailsMap.get("conn"), response,
				getServletContext());
		// HMSUtil.generateReportInWord("PatientPrescriptionFormat", parameters,
		// (Connection)detailsMap.get("conn"), response, getServletContext());
		return null;
	}

	// ----------------------------------------Patient Investigation Report
	// ------------------

	public ModelAndView showPatientInvestigationReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = PATIENT_INVESTIGATION_REPORT_JSP + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showPatientDirectPrescription(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		String employeeNo = null;
		if (request.getParameter("serviceNo") != null
				&& request.getParameter("serviceNo") != "") {
			employeeNo = request.getParameter("serviceNo");
		}
		map.put("employeeNo", employeeNo);
		/*map = opdHandlerService.showPatientDirectPrescription(map);*/
		jsp = "directPrescription.jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}
	
	public ModelAndView showPatientDirectPrescriptionResponse(
			HttpServletRequest request, HttpServletResponse response) { 
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		int deptId = (Integer) session.getAttribute("deptId");

		int docId = 0;
		if (session.getAttribute("empId") != null) {
			docId = (Integer) session.getAttribute("empId");

		}
		
		
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		box.put("hospitalId", hospitalId);
		String employeeNo = null;
		if (request.getParameter("serviceNo") != null
				&& request.getParameter("serviceNo") != "") {
			employeeNo = request.getParameter("serviceNo");
		}
		map.put("employeeNo", employeeNo);
		map.put("box", box);
		map.put("deptId", deptId);
		map.put("docId", docId);
		map = opdHandlerService.showPatientDirectPrescriptionResponse(map);
		jsp = "directPrescriptionResponse.jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	public synchronized ModelAndView saveDirectPrescription(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int divisionId = 0;
		int userId = 0;
		int deptId = 0;
		int empId = 0;
		String userName = "";
		HttpSession session = request.getSession();
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					+ "");
		if (session.getAttribute("divisionId") != null)
			divisionId = Integer.parseInt(session.getAttribute("divisionId")
					+ "");
		if (session.getAttribute("userId") != null)
			userId = Integer.parseInt(session.getAttribute("userId") + "");
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt(session.getAttribute("deptId") + "");
		if (session.getAttribute("empId") != null)
			empId = Integer.parseInt(session.getAttribute("empId") + "");
		if (session.getAttribute("userName") != null)
			userName = session.getAttribute("userName") + "";
		
		List<String> chargeCodeIdList = new ArrayList<String>();
		int temp = 1;
		int hiddenValue = 1;
		if (Integer.parseInt(request.getParameter("hiddenValue")) != 1) {
			hiddenValue = Integer.parseInt(request.getParameter("hiddenValue"));
		}
		String[] chargeCodeIdArr = new String[hiddenValue];
		for (int i = 0; i < hiddenValue; i++) {
			if (request.getParameter("chargeCodeName" + temp) != null
					&& !request.getParameter("chargeCodeName" + temp)
							.equals("")) {

				String chargeCodeNameWithId = request
						.getParameter("chargeCodeName" + temp);
				int index1 = chargeCodeNameWithId.lastIndexOf("[");
				int index2 = chargeCodeNameWithId.lastIndexOf("]");
				index1++;
				String chargeCodeId = chargeCodeNameWithId.substring(index1,
						index2);
				if (!chargeCodeId.equals("")) {
					chargeCodeIdArr[i] = chargeCodeId;
					//int qty = 1;
					// int
					// qty=Integer.parseInt(request.getParameter("qty"+temp));
					// String clinicalNotes =
					// request.getParameter("clinicalNotes" + temp);
			/*		if (request.getParameter("referToMh" + temp) != null
							&& !request.getParameter("referToMh" + temp)
									.equals("")) {
						String referToMh = request.getParameter("referToMh"
								+ temp);
						referToMhList.add(referToMh);
					} else {
						String referToMh = "n";
						referToMhList.add(referToMh);
					}*/
					chargeCodeIdList.add(chargeCodeIdArr[i]);
					// quantityList.add(qty);
					// clinicalList.add(clinicalNotes);

				}
			}
			temp++;
		}
		
		int hdb = (Integer)box.getInt("hdb");
		int j=1;
		List<Integer> classificationList = new ArrayList<Integer>();
		for (int i = 0; i < hdb; i++) {
			String pvmsNo = "";
			int itemId = 0;
	
			if (request.getParameter("itemId" + j) != null
					&& !request.getParameter("nomenclature" + j).equals("")) {
				itemId = Integer.parseInt(request.getParameter("itemId" + j));
				if (itemId != 0) {
				
				if (request.getParameter("itemIdClassificationId" + j) != null
						&& !request.getParameter("itemIdClassificationId" + j)
								.equals("")) {
					classificationList.add(Integer.parseInt(request
							.getParameter("itemIdClassificationId" + j)));
				} else
					classificationList.add(0);
				
				}

			}
			  j++;
			}
		map.put("chargeCodeIdList", chargeCodeIdList);
		map.put("classificationList", classificationList);
		map.put("hospitalId", hospitalId);
		map.put("divisionId", divisionId);
		map.put("userId", userId);
		map.put("deptId", deptId);
		map.put("empId", empId);
		map.put("userName", userName);
		map.put("box", box);
		map = opdHandlerService.saveDirectPrescription(map);
		map.putAll(opdHandlerService.showPatientDirectPrescription(null));
		jsp = "directPrescription.jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public ModelAndView showPatientInvestigationReport(
			HttpServletRequest request, HttpServletResponse response) {
		String query = "";

		HttpSession session = request.getSession();
		int visiNo = 0;
		String serviceNo = "";
		String hinNo = "";
		int visitId = 0;
		int hospitalIdForReport = 0;
		int hospitalId = 0;
		// hospitalId = (Integer) session.getAttribute("hospitalId");
		try {

			if (request.getParameter(SERVICE_NO_FOR_REPORT) != null) {
				serviceNo = request.getParameter(SERVICE_NO_FOR_REPORT);
			}
			if (request.getParameter(VISIT_NUMBER_FOR_REPORT) != null) {
				visiNo = Integer.parseInt(request
						.getParameter(VISIT_NUMBER_FOR_REPORT));
			}
			if (request.getParameter(HIN_NO_FOR_REPORT) != null) {
				hinNo = request.getParameter(HIN_NO_FOR_REPORT);
			}
			if (request.getParameter(VISIT_ID) != null) {
				visitId = Integer.parseInt(request.getParameter(VISIT_ID));
			}

			if (request.getParameter("hospitalIdForReport") != null) {
				hospitalIdForReport = Integer.parseInt(request
						.getParameter("hospitalIdForReport"));
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> parameters = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		detailsMap = opdHandlerService.getConnectionForReport();

		if (hospitalIdForReport != 0) {
			hospitalId = hospitalIdForReport;
			parameters.put("hospitalId", hospitalId);
		} else {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			parameters.put("hospitalId", hospitalId);
		}

		//System.out.println("hospitalId->>>>>>" + hospitalId);
		//System.out.println("hinNo->>>>>>" + hinNo);
		//System.out.println("visitId->>>>>>" + visitId);

		parameters.put("visitId", visitId);
		// parameters.put("hospitalId", hospitalIdForReport);
		parameters.put("visitNo", visiNo);
		parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		parameters.put("SUBREPORT_DIR",
				getServletContext().getRealPath("/reports/"));
		// parameters.put("QUERY", query);
		// parameters.put("SUBREPORT_DIR",
		// getServletContext().getRealPath("/reports/"));

		HMSUtil.generateReport("PatientInvestigationFormat", parameters,
				(Connection) detailsMap.get("conn"), response,
				getServletContext());
		// HMSUtil.generateReportInWord("PatientPrescriptionFormat", parameters,
		// (Connection)detailsMap.get("conn"), response, getServletContext());
		return null;
		/*
		 * try { byte[] bytes = null; try { bytes =
		 * JasperRunManager.runReportToPdf(
		 * getCompiledReport("PatientInvestigationFormat"), parameters,
		 * (Connection) detailsMap.get("conn"));
		 * 
		 * } catch (JRException e) {
		 * 
		 * e.printStackTrace(); } response.setContentType("application/pdf");
		 * response.setContentLength(bytes.length); ServletOutputStream
		 * ouputStream; try { ouputStream = response.getOutputStream();
		 * ouputStream.write(bytes, 0, bytes.length); ouputStream.flush();
		 * ouputStream.close(); } catch (IOException e) { e.printStackTrace(); }
		 * 
		 * } catch (IllegalStateException e) { e.printStackTrace(); } return
		 * null;
		 */
	}

	// ====================code by
	// anamika=============================================
	public ModelAndView showInvestigationRequisitionReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = "patientInvestigationRequisitionReportJsp" + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView printPatientInvestigationRequisitionReport(
			HttpServletRequest request, HttpServletResponse response) {
		String query = "";
		int hospitalId = 0;
		HttpSession session = request.getSession();
		int visiNo = 0;
		String serviceNo = "";
		String hinNo = "";
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		try {

			if (request.getParameter(SERVICE_NO) != null) {
				serviceNo = request.getParameter(SERVICE_NO);
			}
			if (request.getParameter(VISIT_NUMBER) != null) {
				visiNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			}
			if (request.getParameter(HIN_NO) != null) {
				hinNo = request.getParameter(HIN_NO);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		Map<String, Object> parameters = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		detailsMap = opdHandlerService.getConnectionForReport();

		String userHome = getServletContext().getRealPath("");
		String imagePath = userHome + "/jsp/images/logonew-hal.jpg";
		parameters.put("path", imagePath);

		parameters.put("hospitalId", hospitalId);
		parameters.put("visitNo", visiNo);
		parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		parameters.put("SUBREPORT_DIR",
				getServletContext().getRealPath("/reports/"));
		// parameters.put("QUERY", query);
		// parameters.put("SUBREPORT_DIR",
		// getServletContext().getRealPath("/reports/"));
		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("investigationReqReport"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return null;
	}

	// =================================================================================
	// ----------------------------------------Patient History Report
	// ------------------

	public ModelAndView showPatientHistoryReportJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = PATIENT_HISTORY_REPORT_JSP + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public ModelAndView showPatientHistoryReport(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visiNo = 0;
		String serviceNo = "";
		String hinNo = "";
		if (request.getParameter(SERVICE_NO) != null) {
			serviceNo = request.getParameter(SERVICE_NO);
		}
		if (request.getParameter(VISIT_NUMBER) != null) {
			visiNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
		}
		if (request.getParameter(HIN_NO) != null) {
			hinNo = request.getParameter(HIN_NO);
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("visitNo", visiNo);
		parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("PatientHistoryFormat"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return new ModelAndView("indexB", "map", map);
	}

	// ------------------------------------------ Dail Department Wise
	// --------------------------------------
	public ModelAndView showDailyDepartmentWiseReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		map = opdHandlerService.showDailyDepartmentWiseReportJsp();
		title = "Daily Department Wise Report";
		jsp = DAILY_DEPARTMENT_WISE_REPORT_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView generateDailyDepartmentWiseReport(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> parameters = new HashMap<String, Object>();
		Date fromDate = null;
		Date toDate = null;
		int departmentId = 0;
		int selectedRadio = 0;
		int doctorId = 0;
		String doctorName = "All";
		String criteria = "";
		Map<String, Object> detailsMap = opdHandlerService
				.getConnectionForReport();
		HttpSession session = request.getSession();
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);

		try {
			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				parameters.put("FROM_DATE", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				parameters.put("TO_DATE", toDate);
			}
			if ((request.getParameter(DEPARTMENT_ID)) != null
					&& !(request.getParameter(DEPARTMENT_ID).equals(""))) {
				departmentId = Integer.parseInt(request
						.getParameter(DEPARTMENT_ID));
				parameters.put("DEPARTMENT_ID", departmentId);
			}
			if ((request.getParameter(EMPLOYEE_ID)) != null
					&& !(request.getParameter(EMPLOYEE_ID).equals(""))) {
				doctorId = Integer.parseInt(request.getParameter(EMPLOYEE_ID));
				// parameters.put("EMPLOYEE_ID", doctorId);
			}
			if (request.getParameter(DOCTOR_NAME) != null
					&& !(request.getParameter(DOCTOR_NAME).equals(""))) {
				doctorName = request.getParameter(DOCTOR_NAME);
			}
			if (!doctorName.equals("0")) {
				criteria = " and  mas_employee.employee_id=" + doctorId;
			}
			parameters.put("criteria", criteria);

			if (request.getParameter(SELECTED_RADIO) != null
					&& !(request.getParameter(SELECTED_RADIO).equals(""))) {
				selectedRadio = Integer.parseInt(request
						.getParameter(SELECTED_RADIO));
			}

			parameters.put("doctorName", doctorName);
			parameters.put("hospitalId", hospitalId);
			if (selectedRadio == 1) {
				try {
					byte[] bytes = null;
					try {
						bytes = JasperRunManager
								.runReportToPdf(
										getCompiledReport(DAILY_DEPARTMENT_WISE_SUMMARY),
										parameters,
										(Connection) detailsMap.get("conn"));

					} catch (JRException e) {

						e.printStackTrace();
					}
					response.setContentType("application/pdf");
					response.setContentLength(bytes.length);
					ServletOutputStream ouputStream;
					try {
						ouputStream = response.getOutputStream();
						ouputStream.write(bytes, 0, bytes.length);
						ouputStream.flush();
						ouputStream.close();
					} catch (IOException e) {
						e.printStackTrace();
					}

				} catch (IllegalStateException e) {
					e.printStackTrace();
				}
			} else if (selectedRadio == 2) {
				try {
					parameters.put("SUBREPORT_DIR", getServletContext()
							.getRealPath("/reports/"));
					byte[] bytes = null;
					try {
						bytes = JasperRunManager
								.runReportToPdf(
										getCompiledReport(DAILY_DEPARTMENT_WISE_DETAIL),
										parameters,
										(Connection) detailsMap.get("conn"));

					} catch (JRException e) {

						e.printStackTrace();
					}
					response.setContentType("application/pdf");
					response.setContentLength(bytes.length);
					ServletOutputStream ouputStream;
					try {
						ouputStream = response.getOutputStream();
						ouputStream.write(bytes, 0, bytes.length);
						ouputStream.flush();
						ouputStream.close();
					} catch (IOException e) {
						e.printStackTrace();
					}

				} catch (IllegalStateException e) {
					e.printStackTrace();
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	// -------------------------------------- Daily Doctor Wise Report
	// --------------------------------
	public ModelAndView showDailyDoctorWiseReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		map = opdHandlerService.showDailyDepartmentWiseReportJsp();
		title = "Daily Doctor Wise Report";
		jsp = DAILY_DOCTOR_WISE_REPORT_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView generateDailyDoctorWiseReport(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> parameters = new HashMap<String, Object>();
		Date fromDate = null;
		Date toDate = null;
		int departmentId = 0;
		int doctorId = 0;
		int selectedRadio = 0;
		HttpSession session = request.getSession();
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);

		Map<String, Object> detailsMap = opdHandlerService
				.getConnectionForReport();
		try {
			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				parameters.put("FROM_DATE", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				parameters.put("TO_DATE", toDate);
			}
			if ((request.getParameter(DEPARTMENT_ID)) != null
					&& !(request.getParameter(DEPARTMENT_ID).equals(""))) {
				departmentId = Integer.parseInt(request
						.getParameter(DEPARTMENT_ID));
				parameters.put("DEPARTMENT_ID", departmentId);
			}
			if ((request.getParameter(EMPLOYEE_ID)) != null
					&& !(request.getParameter(EMPLOYEE_ID).equals(""))) {
				doctorId = Integer.parseInt(request.getParameter(EMPLOYEE_ID));
				parameters.put("EMPLOYEE_ID", doctorId);
			}
			if (request.getParameter(SELECTED_RADIO) != null
					&& !(request.getParameter(SELECTED_RADIO).equals(""))) {
				selectedRadio = Integer.parseInt(request
						.getParameter(SELECTED_RADIO));
			}
			parameters.put("hospitalId", hospitalId);
			if (selectedRadio == 1) {

				try {
					byte[] bytes = null;
					try {
						bytes = JasperRunManager
								.runReportToPdf(
										getCompiledReport(DAILY_DOCTOR_WISE_SUMMARY),
										parameters,
										(Connection) detailsMap.get("conn"));

					} catch (JRException e) {

						e.printStackTrace();
					}
					response.setContentType("application/pdf");
					response.setContentLength(bytes.length);
					ServletOutputStream ouputStream;
					try {
						ouputStream = response.getOutputStream();
						ouputStream.write(bytes, 0, bytes.length);
						ouputStream.flush();
						ouputStream.close();
					} catch (IOException e) {
						e.printStackTrace();
					}

				} catch (IllegalStateException e) {
					e.printStackTrace();
				}
			} else if (selectedRadio == 2) {
				try {
					byte[] bytes = null;
					try {
						bytes = JasperRunManager
								.runReportToPdf(
										getCompiledReport(DAILY_DOCTOR_WISE_DETAIL),
										parameters,
										(Connection) detailsMap.get("conn"));

					} catch (JRException e) {

						e.printStackTrace();
					}
					response.setContentType("application/pdf");
					response.setContentLength(bytes.length);
					ServletOutputStream ouputStream;
					try {
						ouputStream = response.getOutputStream();
						ouputStream.write(bytes, 0, bytes.length);
						ouputStream.flush();
						ouputStream.close();
					} catch (IOException e) {
						e.printStackTrace();
					}

				} catch (IllegalStateException e) {
					e.printStackTrace();
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView("indexB", "map", map);
	}

	// -------------------------------- Daily OPD
	// Prescriptions---------------------------
	public ModelAndView showDailyOPDPrescriptionsReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		map = opdHandlerService.showDailyOPDPrescriptionsReportJsp();
		title = "Daily OPD Prescriptions";
		jsp = DAILY_OPD_PRESCRIPTIONS_REPORT_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView generateDailyOPDPrescriptionsReport(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> parameters = new HashMap<String, Object>();
		Date fromDate = null;
		Date toDate = null;
		int departmentId = 0;
		int doctorId = 0;
		Map<String, Object> detailsMap = opdHandlerService
				.getConnectionForReport();
		HttpSession session = request.getSession();
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		try {
			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				parameters.put("FROM_DATE", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				parameters.put("TO_DATE", toDate);
			}
			if ((request.getParameter(DEPARTMENT_ID)) != null
					&& !(request.getParameter(DEPARTMENT_ID).equals(""))) {
				departmentId = Integer.parseInt(request
						.getParameter(DEPARTMENT_ID));
				parameters.put("DEPARTMENT_ID", departmentId);
			}
			if ((request.getParameter(EMPLOYEE_ID)) != null
					&& !(request.getParameter(EMPLOYEE_ID).equals(""))) {
				doctorId = Integer.parseInt(request.getParameter(EMPLOYEE_ID));
				parameters.put("EMPLOYEE_ID", doctorId);
				parameters.put("hospitalId", hospitalId);
			}
			try {
				byte[] bytes = null;
				try {
					bytes = JasperRunManager.runReportToPdf(
							getCompiledReport(DAILY_OPD_PRESCRIPTIONS_REPORT),
							parameters, (Connection) detailsMap.get("conn"));

				} catch (JRException e) {

					e.printStackTrace();
				}
				response.setContentType("application/pdf");
				response.setContentLength(bytes.length);
				ServletOutputStream ouputStream;
				try {
					ouputStream = response.getOutputStream();
					ouputStream.write(bytes, 0, bytes.length);
					ouputStream.flush();
					ouputStream.close();
				} catch (IOException e) {
					e.printStackTrace();
				}

			} catch (IllegalStateException e) {
				e.printStackTrace();
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView("indexB", "map", map);
	}

	// -------------------------------- Daily OPD
	// Investigations---------------------------
	public ModelAndView showDailyOPDInvestigationsReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		map = opdHandlerService.showDailyOPDInvestigationsReportJsp();
		title = "Daily OPD Investigations";
		jsp = DAILY_OPD_INVESTIGATIONS_REPORT_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView generateDailyOPDInvestigationsReport(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> parameters = new HashMap<String, Object>();
		Date fromDate = null;
		Date toDate = null;
		int departmentId = 0;
		int doctorId = 0;
		Map<String, Object> detailsMap = opdHandlerService
				.getConnectionForReport();
		HttpSession session = request.getSession();
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		try {
			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				parameters.put("FROM_DATE", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				parameters.put("TO_DATE", toDate);
			}
			if ((request.getParameter(DEPARTMENT_ID)) != null
					&& !(request.getParameter(DEPARTMENT_ID).equals(""))) {
				departmentId = Integer.parseInt(request
						.getParameter(DEPARTMENT_ID));
				parameters.put("DEPARTMENT_ID", departmentId);
			}
			if ((request.getParameter(EMPLOYEE_ID)) != null
					&& !(request.getParameter(EMPLOYEE_ID).equals(""))) {
				doctorId = Integer.parseInt(request.getParameter(EMPLOYEE_ID));
				parameters.put("EMPLOYEE_ID", doctorId);
			}
			parameters.put("hospitalId", hospitalId);
			try {
				byte[] bytes = null;
				try {
					bytes = JasperRunManager.runReportToPdf(
							getCompiledReport(DAILY_OPD_INVESTIGATIONS_REPORT),
							parameters, (Connection) detailsMap.get("conn"));

				} catch (JRException e) {

					e.printStackTrace();
				}
				response.setContentType("application/pdf");
				response.setContentLength(bytes.length);
				ServletOutputStream ouputStream;
				try {
					ouputStream = response.getOutputStream();
					ouputStream.write(bytes, 0, bytes.length);
					ouputStream.flush();
					ouputStream.close();
				} catch (IOException e) {
					e.printStackTrace();
				}

			} catch (IllegalStateException e) {
				e.printStackTrace();
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView("indexB", "map", map);
	}

	// ----------------------------------------Medical Case Sheet Report Report
	// ------------------

	public ModelAndView showPatientMedicalCaseSheetReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = PATIENT_MEDICAL_CASE_SHEET_REPORT_JSP + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public void showPatientMedicalCaseSheetReport(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visiNo = 0;
		String serviceNo = "";
		String hinNo = "";
		int visitId = 0;

		Map<String, Object> parameters = new HashMap<String, Object>();
		HttpSession session = request.getSession();

		if (request.getParameter(SERVICE_NO_FOR_REPORT) != null) {
			serviceNo = request.getParameter(SERVICE_NO_FOR_REPORT);
		}
		if (request.getParameter(VISIT_NUMBER_FOR_REPORT) != null) {
			visiNo = Integer.parseInt(request
					.getParameter(VISIT_NUMBER_FOR_REPORT));
		}
		if (request.getParameter(HIN_NO_FOR_REPORT) != null) {
			hinNo = request.getParameter(HIN_NO_FOR_REPORT);
		}
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}

		Map<String, Object> datamap = new HashMap<String, Object>();
		int deptId = 0;
		int hinId = 0;
		// hinId = opdHandlerService.getPatient(hinNo);
		datamap = opdHandlerService.getVisitForPatient(hinNo, visitId);

		if (datamap.get("hinId") != null) {
			hinId = (Integer) datamap.get("hinId");
		}
		if (datamap.get("deptId") != null) {
			deptId = (Integer) datamap.get("deptId");
		}
		parameters.put("hinId", hinId);
		parameters.put("deptId", deptId);

		Properties properties = new Properties();
		URL resourcePathHIC = Thread.currentThread().getContextClassLoader()
				.getResource("adt.properties");
		try {
			properties.load(resourcePathHIC.openStream());
		} catch (Exception e) {
			e.printStackTrace();
		}
		int deptIdProp = Integer.parseInt(properties
				.getProperty("departmentIdForDental"));

		String FlagforOPD = "NA";
	
		if (deptIdProp == deptId) {
			FlagforOPD = "Dental";
		} else {
			FlagforOPD = "General";
		}

		String userHome = getServletContext().getRealPath("");
		String imagePath = userHome + "/jsp/images/logonew-hal.jpg";
		parameters.put("path", imagePath);

		int hospitalIdForReport = 0;

		if (request.getParameter("hospitalIdForReport") != null) {
			hospitalIdForReport = Integer.parseInt(request
					.getParameter("hospitalIdForReport"));
		}

		if (hospitalIdForReport != 0) {
			int hospitalId = hospitalIdForReport;
			parameters.put("hospitalId", hospitalId);
		} else {
			int hospitalId = (Integer) session.getAttribute("hospitalId");
			parameters.put("hospitalId", hospitalId);
		}

		Map<String, Object> detailsMap = new HashMap<String, Object>();
		detailsMap = opdHandlerService.getConnectionForReport();

		parameters.put("visitId", visitId);
		parameters.put("visitNo", visiNo);
		parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);

		parameters.put("FlagforOPD", FlagforOPD);
		parameters.put("SUBREPORT_DIR",
				getServletContext().getRealPath("/reports/"));
		try {

			HMSUtil.generateReport("medicalCaseSheetnewforstorage", parameters,
					(Connection) detailsMap.get("conn"), response,
					getServletContext());

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}

	}

	// -------------------------------- Daily OPD Rank
	// Category---------------------------
	public ModelAndView showDailyOPDRankCategoryReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		map = opdHandlerService.showDailyOPDRankCategoryReportJsp();
		title = "Daily Doctor Wise Report";
		jsp = DAILY_PATIENT_RANK_CATEGORY_REPORT_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView generateDailyOPDRankCategoryReport(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> parameters = new HashMap<String, Object>();
		Date fromDate = null;
		Date toDate = null;
		int departmentId = 0;
		int rankId = 0;
		int selectedRadio = 0;
		Map<String, Object> detailsMap = opdHandlerService
				.getConnectionForReport();
		HttpSession session = request.getSession();
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		try {
			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				parameters.put("FROM_DATE", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				parameters.put("TO_DATE", toDate);
			}
			if ((request.getParameter(DEPARTMENT_ID)) != null
					&& !(request.getParameter(DEPARTMENT_ID).equals(""))) {
				departmentId = Integer.parseInt(request
						.getParameter(DEPARTMENT_ID));
				parameters.put("DEPARTMENT_ID", departmentId);
			}
			if ((request.getParameter(RANK_ID)) != null
					&& !(request.getParameter(RANK_ID).equals(""))) {
				rankId = Integer.parseInt(request.getParameter(RANK_ID));
				parameters.put("RANK_ID", rankId);
			}
			if (request.getParameter(SELECTED_RADIO) != null
					&& !(request.getParameter(SELECTED_RADIO).equals(""))) {
				selectedRadio = Integer.parseInt(request
						.getParameter(SELECTED_RADIO));
			}

			parameters.put("hospitalId", hospitalId);
			if (selectedRadio == 1) {

				try {
					byte[] bytes = null;
					try {
						bytes = JasperRunManager
								.runReportToPdf(
										getCompiledReport(DAILY_PATIENT_RANK_CATEGORY_REPORT_SUMMARY),
										parameters,
										(Connection) detailsMap.get("conn"));

					} catch (JRException e) {

						e.printStackTrace();
					}
					response.setContentType("application/pdf");
					response.setContentLength(bytes.length);
					ServletOutputStream ouputStream;
					try {
						ouputStream = response.getOutputStream();
						ouputStream.write(bytes, 0, bytes.length);
						ouputStream.flush();
						ouputStream.close();
					} catch (IOException e) {
						e.printStackTrace();
					}

				} catch (IllegalStateException e) {
					e.printStackTrace();
				}
			} else if (selectedRadio == 2) {
				try {
					byte[] bytes = null;
					try {
						bytes = JasperRunManager
								.runReportToPdf(
										getCompiledReport(DAILY_PATIENT_RANK_CATEGORY_REPORT_DETAIL),
										parameters,
										(Connection) detailsMap.get("conn"));

					} catch (JRException e) {

						e.printStackTrace();
					}
					response.setContentType("application/pdf");
					response.setContentLength(bytes.length);
					ServletOutputStream ouputStream;
					try {
						ouputStream = response.getOutputStream();
						ouputStream.write(bytes, 0, bytes.length);
						ouputStream.flush();
						ouputStream.close();
					} catch (IOException e) {
						e.printStackTrace();
					}

				} catch (IllegalStateException e) {
					e.printStackTrace();
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView printOpdGastroEndoscopy(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("visitId", visitId);
		parameters.put("SUBREPORT_DIR",
				getServletContext().getRealPath("/reports/"));
		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("endoscopy"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView printOpdGastroColonoscopy(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("visitId", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("colonoscopy"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView printOpdVaccinationPlan(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		int hinId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);
		parameters.put("opdhid", hinId);
		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("opdVaccinationPlan"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return new ModelAndView("indexB", "map", map);

	}

	// -------------------------------------- OPD Oncosurgery case sheet
	// --------------------------------------
	public ModelAndView showOncosurgeryCaseSheetJsp(HttpServletRequest request,
			HttpServletResponse response) {
		int visitId = Integer.parseInt(request.getParameter("visitId"));

		map = opdHandlerService.showOncosurgeryCaseSheetJsp(visitId);
		jsp = ONCOSURGERY_CASE_SHEET_JSP;
		jsp += ".jsp";
		title = "Oncosurgery Case Sheet List";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView addOncosurgeryCaseSheet(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		box.put("departmentId", departmentId);
		box.put("hospitalId", hospitalId);
		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		box.put("userId", userId);
		String message = "";
		box.put("visitId", visitId);
		String referredDept = "";
		String[] referredToDeptArray = null;
		if (request.getParameterValues(DEPARTMENT_ID) != null) {
			referredToDeptArray = (String[]) request
					.getParameterValues(DEPARTMENT_ID);
			for (int i = 0; i < referredToDeptArray.length; i++) {
				if (i == 0)
					referredDept = referredToDeptArray[i];
				else
					referredDept = referredDept + "," + referredToDeptArray[i];
			}
		}
		box.put("referredDept", referredDept);
		map = opdHandlerService.addOncosurgeryCaseSheet(box);
		saved = (Boolean) map.get("saved");
		if (saved) {
			message = "Oncosurgery Case Sheet has been done Successfully.Do you want to print ?";
			jsp = "messageOpdOncosurgeryCaseSheet";
		} else {
			message = "Oncosurgery Case Sheet has not been done Successfully..";
			jsp = "messageSomeTry";
		}

		try {
			map = opdHandlerService.showOncosurgeryCaseSheetJsp(visitId);

		} catch (Exception e) {
			e.printStackTrace();
		}

		title = "Add Oncosurgery Case Sheet List";
		jsp += ".jsp";

		map.put("message", message);
		map.put("deptId", departmentId);
		map.put("contentJsp", jsp);
		map.put("visitId", visitId);
		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView viewOncosurgeryCaseSheet(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}
		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showOncosurgeryCaseSheetJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewOncosurgeryCaseSheet(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = "viewOncoSurgeryCaseSheet";
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView printOpdOncosurgeryCaseSheet(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("oncosurgeryCaseSheet"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return new ModelAndView("indexB", "map", map);

	}

	// -------------------------------------- OPD Urology Case Sheet
	// --------------------------------------
	public ModelAndView showUrologyCaseSheetJsp(HttpServletRequest request,
			HttpServletResponse response) {
		int visitId = Integer.parseInt(request.getParameter("visitId"));

		map = opdHandlerService.showUrologyCaseSheetJsp(visitId);
		jsp = UROLOGY_CASE_SHEET_JSP;
		jsp += ".jsp";
		title = "Urology Case Sheet List";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView updateUrologyCaseSheet(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		box.put("departmentId", departmentId);
		box.put("hospitalId", hospitalId);
		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		box.put("userId", userId);
		String message = "";

		map = opdHandlerService.updateUrologyCaseSheet(box);
		saved = (Boolean) map.get("saved");
		if (saved) {
			message = "Urology Case Sheet has been updated Successfully.Do you want to print ?";
			jsp = "messageUpdateOpdUrology";
		} else {
			message = "Urology Case Sheet has not been done Successfully..";
			jsp = "messageUpdateSomeError";
		}

		try {
			map = opdHandlerService.showUrologyCaseSheetJsp(visitId);

		} catch (Exception e) {
			e.printStackTrace();
		}

		title = "Add Urology Case Sheet List";
		jsp += ".jsp";
		map.put("deptId", departmentId);
		map.put("message", message);
		map.put("contentJsp", jsp);
		map.put("visitId", visitId);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView viewUrologyCaseSheet(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}
		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showUrologyCaseSheetJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewUrologyCaseSheet(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = "viewUrologyCaseSheet";
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView printOpdUrologyCaseSheet(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheet"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	// -------------------------------------- OPD Oncosurgery
	// --------------------------------------
	public ModelAndView showOncosurgeryJsp(HttpServletRequest request,
			HttpServletResponse response) {
		int visitId = Integer.parseInt(request.getParameter("visitId"));

		map = opdHandlerService.showOncosurgeryJsp(visitId);
		jsp = ONCOSURGERY_JSP;
		jsp += ".jsp";
		title = "Oncosurgery Case Sheet List";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView addOncosurgery(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		box.put("departmentId", departmentId);
		box.put("hospitalId", hospitalId);
		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		box.put("userId", userId);
		String message = "";
		box.put("visitId", visitId);
		String referredDept = "";
		String[] referredToDeptArray = null;
		if (request.getParameterValues(DEPARTMENT_ID) != null) {
			referredToDeptArray = (String[]) request
					.getParameterValues(DEPARTMENT_ID);
			for (int i = 0; i < referredToDeptArray.length; i++) {
				if (i == 0)
					referredDept = referredToDeptArray[i];
				else
					referredDept = referredDept + "," + referredToDeptArray[i];
			}
		}
		box.put("referredDept", referredDept);

		map = opdHandlerService.addOncosurgery(box);
		saved = (Boolean) map.get("saved");
		if (saved) {
			message = "Oncosurgery  has been done Successfully.Do you want to print ?";
			jsp = "messageOpdOncosurgery";
		} else {
			message = "Oncosurgery  has not been done Successfully..";
			jsp = "messageSomeTry";
		}

		try {
			map = opdHandlerService.showOncosurgeryJsp(visitId);

		} catch (Exception e) {
			e.printStackTrace();
		}

		title = "Add Oncosurgery List";
		jsp += ".jsp";

		map.put("message", message);
		map.put("deptId", departmentId);
		map.put("contentJsp", jsp);
		map.put("visitId", visitId);
		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView viewOncosurgery(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}
		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showOncosurgeryJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewOncosurgery(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = "viewOncoSurgery";
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView printOpdOncosurgery(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("oncosurgery"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return new ModelAndView("indexB", "map", map);

	}

	// ------------------------------------------ Dail Department Wise
	// --------------------------------------
	public ModelAndView showOpdOncosurgeryWiseReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		// map = opdHandlerService.showOpdOncosurgeryWiseReportJsp();
		title = "Opd Oncosurgery Wise Report";
		jsp = OPD_ONCOSURGRY_WISE_REPORT_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView generateOpdOncosurgeryWiseReport(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> parameters = new HashMap<String, Object>();
		Date fromDate = null;
		Date toDate = null;
		String stageT = "";
		String stageM = "";
		String stageN = "";
		String stageNor = "";

		Map<String, Object> detailsMap = opdHandlerService
				.getConnectionForReport();

		try {
			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				parameters.put("FROM_DATE", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				parameters.put("TO_DATE", toDate);
			}
			if ((request.getParameter(STAGE_T)) != null
					&& !(request.getParameter(STAGE_T).equals(""))) {
				stageT = request.getParameter(STAGE_T);
				parameters.put("STAGE_T", stageT);
			}
			if ((request.getParameter(STAGE_N)) != null
					&& !(request.getParameter(STAGE_N).equals(""))) {
				stageN = request.getParameter(STAGE_N);
				parameters.put("STAGE_N", stageN);
			}
			if ((request.getParameter(STAGE_M)) != null
					&& !(request.getParameter(STAGE_M).equals(""))) {
				stageM = request.getParameter(STAGE_M);
				parameters.put("STAGE_M", stageM);
			}
			if ((request.getParameter(STAGE_NOR)) != null
					&& !(request.getParameter(STAGE_NOR).equals(""))) {
				stageNor = request.getParameter(STAGE_NOR);
				parameters.put("STAGE_NOR", stageNor);
			}

			try {
				byte[] bytes = null;
				try {
					bytes = JasperRunManager.runReportToPdf(
							getCompiledReport("oncosurgeryWise"), parameters,
							(Connection) detailsMap.get("conn"));

				} catch (JRException e) {

					e.printStackTrace();
				}
				response.setContentType("application/pdf");
				response.setContentLength(bytes.length);
				ServletOutputStream ouputStream;
				try {
					ouputStream = response.getOutputStream();
					ouputStream.write(bytes, 0, bytes.length);
					ouputStream.flush();
					ouputStream.close();
				} catch (IOException e) {
					e.printStackTrace();
				}

			} catch (IllegalStateException e) {
				e.printStackTrace();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showSearchPatientPreviousVisit(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = SEARCH_PATIENT_PREVIOUS_VISI + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView printOpdEnt(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);
		parameters.put("SUBREPORT_DIR",
				getServletContext().getRealPath("/reports/"));
		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("entCaseSheetMain"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return null;
	}

	public ModelAndView printOpdOphthalmology(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);
		parameters.put("SUBREPORT_DIR",
				getServletContext().getRealPath("/reports/"));
		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("opdOphthalmologyMain"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return null;
	}

	public ModelAndView printOpdOphthalmologyRetinalProforma(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);
		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("opdOphthalmologyRetinalProforma"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView printOpdOphthalmologyFollowUpForm(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);
		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("opdOphthalmologyFollowUpForm"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView printOpdOphthalmologyDiagnosis(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);
		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("opdOphthalmologyDiagnosis"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView printOpdPediatricCaseSheet(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);
		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("opdPediatricCaseSheet"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return null;

	}

	public ModelAndView printOpdObg(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);
		parameters.put("SUBREPORT_DIR",
				getServletContext().getRealPath("/reports/"));
		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("opdObgMain"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return null;
	}

	// --------------------------------------- Report Case Sheet
	// ------------------

	public ModelAndView showOpdObgCaseSheetReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = OPD_OBG_CASE_SHEET_REPORT_JSP + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public ModelAndView showOpdObgCaseSheetReport(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visiNo = 0;
		String serviceNo = "";
		String hinNo = "";
		Box box = HMSUtil.getBox(request);
		if (request.getParameter(SERVICE_NO_FOR_REPORT) != null) {
			serviceNo = request.getParameter(SERVICE_NO_FOR_REPORT);
		}
		if (request.getParameter(VISIT_NUMBER_FOR_REPORT) != null) {
			visiNo = Integer.parseInt(request
					.getParameter(VISIT_NUMBER_FOR_REPORT));
		}
		if (request.getParameter(HIN_NO_FOR_REPORT) != null) {
			hinNo = request.getParameter(HIN_NO_FOR_REPORT);
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("visitNo", visiNo);
		parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		parameters.put("SUBREPORT_DIR",
				getServletContext().getRealPath("/reports/"));
		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("opdObgMainCaseSheet"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showOpdOncosurgeryCaseSheetReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = OPD_ONCOSURGERY_CASE_SHEET_REPORT_JSP + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public ModelAndView showOpdOncosurgeryCaseSheetReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visiNo = 0;
		String serviceNo = "";
		String hinNo = "";
		Box box = HMSUtil.getBox(request);
		if (request.getParameter(SERVICE_NO_FOR_REPORT) != null) {
			serviceNo = request.getParameter(SERVICE_NO_FOR_REPORT);
		}
		if (request.getParameter(VISIT_NUMBER_FOR_REPORT) != null) {
			visiNo = Integer.parseInt(request
					.getParameter(VISIT_NUMBER_FOR_REPORT));
		}
		if (request.getParameter(HIN_NO_FOR_REPORT) != null) {
			hinNo = request.getParameter(HIN_NO_FOR_REPORT);
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("visitNo", visiNo);
		parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("opdOncosurgeryCaseSheetReport"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showOncosurgeryCaseSheetOpdReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = ONCOSURGERY_CASE_SHEET_OPD_REPORT_JSP + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public ModelAndView showOncosurgeryCaseSheetOpdReport(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visiNo = 0;
		String serviceNo = "";
		String hinNo = "";
		Box box = HMSUtil.getBox(request);
		if (request.getParameter(SERVICE_NO_FOR_REPORT) != null) {
			serviceNo = request.getParameter(SERVICE_NO_FOR_REPORT);
		}
		if (request.getParameter(VISIT_NUMBER_FOR_REPORT) != null) {
			visiNo = Integer.parseInt(request
					.getParameter(VISIT_NUMBER_FOR_REPORT));
		}
		if (request.getParameter(HIN_NO_FOR_REPORT) != null) {
			hinNo = request.getParameter(HIN_NO_FOR_REPORT);
		}

		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("visitNo", visiNo);
		parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("oncosurgeryCaseSheetOpdReport"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return null;
	}

	public ModelAndView showOpdOphthalmologyMainCaseSheetReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = OPD_OPHTHALMOLOGY_CASE_SHEET_REPORT_JSP + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public ModelAndView showOpdOphthalmologyMainCaseSheetReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visiNo = 0;
		String serviceNo = "";
		String hinNo = "";
		if (request.getParameter(SERVICE_NO) != null) {
			serviceNo = request.getParameter(SERVICE_NO);
		}
		if (request.getParameter(VISIT_NUMBER) != null) {
			visiNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
		}
		if (request.getParameter(HIN_NO) != null) {
			hinNo = request.getParameter(HIN_NO);
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("visitNo", visiNo);
		parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		parameters.put("SUBREPORT_DIR",
				getServletContext().getRealPath("/reports/"));
		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("opdOphthalmologyMainCaseSheet"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showOpdOphthalmologyRetinalProformaCaseSheetReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = OPD_OPHTHALMOLOGY_RETINAL_PROFORMA_CASE_SHEET_REPORT_JSP + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public ModelAndView showOpdOphthalmologyRetinalProformaCaseSheetReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visiNo = 0;
		String serviceNo = "";
		String hinNo = "";
		if (request.getParameter(SERVICE_NO) != null) {
			serviceNo = request.getParameter(SERVICE_NO);
		}
		if (request.getParameter(VISIT_NUMBER) != null) {
			visiNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
		}
		if (request.getParameter(HIN_NO) != null) {
			hinNo = request.getParameter(HIN_NO);
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("visitNo", visiNo);
		parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager
						.runReportToPdf(
								getCompiledReport("opdOphthalmologyRetinalProformaReport"),
								parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showOpdOphthalmologyFollowUpFormCaseSheetReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = OPD_OPHTHALMOLOGY_FOLLOW_UP_FORM_CASE_SHEET_REPORT_JSP + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public ModelAndView showOpdOphthalmologyFollowUpFormCaseSheetReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visiNo = 0;
		String serviceNo = "";
		String hinNo = "";
		if (request.getParameter(SERVICE_NO) != null) {
			serviceNo = request.getParameter(SERVICE_NO);
		}
		if (request.getParameter(VISIT_NUMBER) != null) {
			visiNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
		}
		if (request.getParameter(HIN_NO) != null) {
			hinNo = request.getParameter(HIN_NO);
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("visitNo", visiNo);
		parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager
						.runReportToPdf(
								getCompiledReport("opdOphthalmologyFollowUpFormReport"),
								parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showOpdOphthalmologyDiagnosisCaseSheetReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = OPD_OPHTHALMOLOGY_DIAGNOSIS_CASE_SHEET_REPORT_JSP + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public ModelAndView showOpdOphthalmologyDiagnosisCaseSheetReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visiNo = 0;
		String serviceNo = "";
		String hinNo = "";
		if (request.getParameter(SERVICE_NO) != null) {
			serviceNo = request.getParameter(SERVICE_NO);
		}
		if (request.getParameter(VISIT_NUMBER) != null) {
			visiNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
		}
		if (request.getParameter(HIN_NO) != null) {
			hinNo = request.getParameter(HIN_NO);
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("visitNo", visiNo);
		parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("opdOphthalmologyDiagnosisReport"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showOpdPediatricCaseSheetReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = OPD_PEDIATRIC_CASE_SHEET_REPORT_JSP + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public ModelAndView showOpdPediatricCaseSheetReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visiNo = 0;
		String serviceNo = "";
		String hinNo = "";
		if (request.getParameter(SERVICE_NO) != null) {
			serviceNo = request.getParameter(SERVICE_NO);
		}
		if (request.getParameter(VISIT_NUMBER) != null) {
			visiNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
		}
		if (request.getParameter(HIN_NO) != null) {
			hinNo = request.getParameter(HIN_NO);
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("visitNo", visiNo);
		parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("opdPediatricCaseSheetReport"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showOpdGastroEnterologyColonoscopyCaseSheetReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = OPD_GASTRO_ENTEROLOGY_COLONOSCOPY_CASE_SHEET_REPORT_JSP + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public ModelAndView showOpdGastroEnterologyColonoscopyCaseSheetReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visiNo = 0;
		String serviceNo = "";
		String hinNo = "";
		Box box = HMSUtil.getBox(request);
		if (request.getParameter(SERVICE_NO_FOR_REPORT) != null) {
			serviceNo = request.getParameter(SERVICE_NO_FOR_REPORT);
		}
		if (request.getParameter(VISIT_NUMBER_FOR_REPORT) != null) {
			visiNo = Integer.parseInt(request
					.getParameter(VISIT_NUMBER_FOR_REPORT));
		}
		if (request.getParameter(HIN_NO_FOR_REPORT) != null) {
			hinNo = request.getParameter(HIN_NO_FOR_REPORT);
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("visitNo", visiNo);
		parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager
						.runReportToPdf(
								getCompiledReport("opdGastroEnterologyColonoscopyCaseSheetReport"),
								parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showOpdGastroEnterologyEndoscopyCaseSheetReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = OPD_GASTRO_ENTEROLOGY_ENDOSCOPY_CASE_SHEET_REPORT_JSP + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public ModelAndView showOpdGastroEnterologyEndoscopyCaseSheetReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visiNo = 0;
		String serviceNo = "";
		String hinNo = "";
		Box box = HMSUtil.getBox(request);
		if (request.getParameter(SERVICE_NO_FOR_REPORT) != null) {
			serviceNo = request.getParameter(SERVICE_NO_FOR_REPORT);
		}
		if (request.getParameter(VISIT_NUMBER_FOR_REPORT) != null) {
			visiNo = Integer.parseInt(request
					.getParameter(VISIT_NUMBER_FOR_REPORT));
		}
		if (request.getParameter(HIN_NO_FOR_REPORT) != null) {
			hinNo = request.getParameter(HIN_NO_FOR_REPORT);
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("visitNo", visiNo);
		parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager
						.runReportToPdf(
								getCompiledReport("opdGastroEnterologyEndoscopyCaseSheet"),
								parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showPediatricVaccinationPlanCaseSheetReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = OPD_PEDIATRIC_VACCINATION_PLAN_CASE_SHEET_REPORT_JSP + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public ModelAndView showPediatricVaccinationPlanCaseSheetReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visiNo = 0;
		String serviceNo = "";
		String hinNo = "";
		if (request.getParameter(SERVICE_NO) != null) {
			serviceNo = request.getParameter(SERVICE_NO);
		}
		if (request.getParameter(VISIT_NUMBER) != null) {
			visiNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
		}
		if (request.getParameter(HIN_NO) != null) {
			hinNo = request.getParameter(HIN_NO);
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("visitNo", visiNo);
		parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("pediatricVaccinationPlanCaseSheet"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showOpdEntMainCaseSheetReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = OPD_ENT_CASE_SHEET_REPORT_JSP + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public ModelAndView showOpdEntMainCaseSheetReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visiNo = 0;
		String serviceNo = "";
		String hinNo = "";
		if (request.getParameter(SERVICE_NO) != null) {
			serviceNo = request.getParameter(SERVICE_NO);
		}
		if (request.getParameter(VISIT_NUMBER) != null) {
			visiNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
		}
		if (request.getParameter(HIN_NO) != null) {
			hinNo = request.getParameter(HIN_NO);
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("visitNo", visiNo);
		parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		parameters.put("SUBREPORT_DIR",
				getServletContext().getRealPath("/reports/"));
		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("opdEntCaseSheetMainReport"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showOpdCardiologyCaseSheetReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = OPD_CARDIOLOGY_CASE_SHEET_REPORT_JSP + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public ModelAndView showOpdCardiologyCaseSheetReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visiNo = 0;
		String serviceNo = "";
		String hinNo = "";
		if (request.getParameter(SERVICE_NO) != null) {
			serviceNo = request.getParameter(SERVICE_NO);
		}
		if (request.getParameter(VISIT_NUMBER) != null) {
			visiNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
		}
		if (request.getParameter(HIN_NO) != null) {
			hinNo = request.getParameter(HIN_NO);
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("visitNo", visiNo);
		parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("opdCardiologyCaseSheetReport"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView printOpdCardiology(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("visitId", visitId);
		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("opdCardiology"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return null;
	}

	public ModelAndView showOpdUrologyCaseSheetCaseSheetReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = OPD_UROLOGY_CASE_SHEET_REPORT_JSP + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public ModelAndView showOpdUrologyCaseSheetReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visiNo = 0;
		String serviceNo = "";
		String hinNo = "";
		if (request.getParameter(SERVICE_NO) != null) {
			serviceNo = request.getParameter(SERVICE_NO);
		}
		if (request.getParameter(VISIT_NUMBER) != null) {
			visiNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
		}
		if (request.getParameter(HIN_NO) != null) {
			hinNo = request.getParameter(HIN_NO);
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("visitNo", visiNo);
		parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("opdUrologyCaseSheetReport"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return new ModelAndView("indexB", "map", map);
	}

	/** start of methods by Abha * */

	public ModelAndView viewGynaecology(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}

		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showGastroEnterologyColonoscopyJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewGynaecology(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = VIEW_GYNAECOLOGY_JSP;
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView viewComplaints(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}

		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showGastroEnterologyColonoscopyJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewGynaecology(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = VIEW_COMPLAINT_JSP;
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView viewGeneralExamination(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}

		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showGastroEnterologyColonoscopyJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewGynaecology(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = VIEW_GENERAL_EXAMINATION_JSP;
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView viewMedicalSurgicalHistory(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}

		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showGastroEnterologyColonoscopyJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewGynaecology(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = VIEW_MEDICAL_SURGICAL_HISTORY_JSP;
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView viewSystemicExamination(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}

		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showGastroEnterologyColonoscopyJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewGynaecology(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = VIEW_SYSTEMIC_EXAMINATION_JSP;
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView viewObstetricMenstrualHistory(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}

		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showGastroEnterologyColonoscopyJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewGynaecology(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = VIEW_OBSTETRIC_MEBSTURAL_HISTORY_JSP;
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView submitSocioEconomicHistory(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		float menarchy = 0;
		String pastMc = "";
		String presentMc = "";
		String lmp = "";
		String pmp1 = "";
		String pmp2 = "";
		String obstetricHistory = "";
		String dyspareunia = "";
		String fertilePeriod = "";
		String conceive = "";
		String coitusPrWk = "";
		String pastMedicalHistory = "";
		String pastSurgicalHistory = "";
		String familyHistory = "";

		float primaryInfertility = 0;
		float secondaryInfertility = 0;
		float hypomenorrhoea = 0;
		float oligomenorrhoea = 0;
		float hisrsutism = 0;
		float galactorrhoea = 0;
		String backache = "";
		String pruritisVulvae = "";
		String dysmenorrhoea = "";
		String leucorrhoea = "";

		float height = 0;
		float weight = 0;
		String obesity = "";
		String acne = "";
		String hairDistribution = "";
		String breastDevelopment = "";
		String galactorrhoeaText = "";
		String pigmentation = "";
		String others = "";
		String otherSystems = "";
		String gynaecologicalExamination = "";

		int hinId = 0;
		int visitId = 0;
		int inpatientId = 0;
		int hospitalId = 0;
		int deptId = 0;
		String userName = "";
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
		session = request.getSession();
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("userName") != null) {
			userName = (String) session.getAttribute("userName");
		}
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		boolean successfullyAdded = false;
		if (request.getParameter(PAST_MC) != null) {
			pastMc = request.getParameter(PAST_MC);
		}
		if (request.getParameter(PRESENT_MC) != null) {
			presentMc = request.getParameter(PRESENT_MC);
		}
		if (request.getParameter(LMP) != null) {
			lmp = request.getParameter(LMP);
		}
		if (request.getParameter(PMP1) != null) {
			pmp1 = request.getParameter(PMP1);
		}
		if (request.getParameter(PMP2) != null) {
			pmp2 = request.getParameter(PMP2);
		}
		if (request.getParameter(OBSTETRIC_HISTORY) != null) {
			obstetricHistory = request.getParameter(OBSTETRIC_HISTORY);
		}
		if (request.getParameter(DYSPAREUNIA) != null) {
			dyspareunia = request.getParameter(DYSPAREUNIA);
		}
		if (request.getParameter(AWARENESS_OF_FERTILE_PERIOD) != null) {
			fertilePeriod = request.getParameter(AWARENESS_OF_FERTILE_PERIOD);
		}
		if (request.getParameter(TRYING_TO_CONCEIVE_FOR) != null) {
			conceive = request.getParameter(TRYING_TO_CONCEIVE_FOR);
		}
		if (request.getParameter(FREQUENCY_OF_COITUS_PER_WK) != null) {
			coitusPrWk = request.getParameter(FREQUENCY_OF_COITUS_PER_WK);
		}
		if (request.getParameter(MENARCHY) != null
				&& !request.getParameter(MENARCHY).equals("0")
				&& !request.getParameter(MENARCHY).equals("")) {
			menarchy = Float.parseFloat(request.getParameter(MENARCHY));
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
		}
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		if (request.getParameter(INPATIENT_ID) != null) {
			inpatientId = Integer.parseInt(request.getParameter(INPATIENT_ID));
		}
		if (request.getParameter(LEUCORRHOEA) != null) {
			leucorrhoea = request.getParameter(LEUCORRHOEA);
		}
		if (request.getParameter(DYSMENORRHOEA) != null) {
			dysmenorrhoea = request.getParameter(DYSMENORRHOEA);
		}
		if (request.getParameter(PRURITIS_VULVAE) != null) {
			pruritisVulvae = request.getParameter(PRURITIS_VULVAE);
		}
		if (request.getParameter(BACKACHE) != null) {
			backache = request.getParameter(BACKACHE);
		}

		if (request.getParameter(PRIMARY_INFERTILITY) != null
				&& !request.getParameter(PRIMARY_INFERTILITY).equals("0")
				&& !request.getParameter(PRIMARY_INFERTILITY).equals("")) {
			primaryInfertility = Float.parseFloat(request
					.getParameter(PRIMARY_INFERTILITY));
		}
		if (request.getParameter(SECONDARY_INFERTILITY) != null
				&& !request.getParameter(SECONDARY_INFERTILITY).equals("0")
				&& !request.getParameter(SECONDARY_INFERTILITY).equals("")) {
			secondaryInfertility = Float.parseFloat(request
					.getParameter(SECONDARY_INFERTILITY));
		}
		if (request.getParameter(HYPOMENORRHOEA) != null
				&& !request.getParameter(HYPOMENORRHOEA).equals("0")
				&& !request.getParameter(HYPOMENORRHOEA).equals("")) {
			hypomenorrhoea = Float.parseFloat(request
					.getParameter(HYPOMENORRHOEA));
		}
		if (request.getParameter(OLIGOMENORRHOEA) != null
				&& !request.getParameter(OLIGOMENORRHOEA).equals("0")
				&& !request.getParameter(OLIGOMENORRHOEA).equals("")) {
			oligomenorrhoea = Float.parseFloat(request
					.getParameter(OLIGOMENORRHOEA));
		}
		if (request.getParameter(GALACTORRHOEA) != null
				&& !request.getParameter(GALACTORRHOEA).equals("0")
				&& !request.getParameter(GALACTORRHOEA).equals("")) {
			galactorrhoea = Float.parseFloat(request
					.getParameter(GALACTORRHOEA));
		}
		if (request.getParameter(HISRSUTISM) != null
				&& !request.getParameter(HISRSUTISM).equals("0")
				&& !request.getParameter(HISRSUTISM).equals("")) {
			hisrsutism = Float.parseFloat(request.getParameter(HISRSUTISM));
		}

		if (request.getParameter(PAST_MEDICAL_HISTORY) != null) {
			pastMedicalHistory = request.getParameter(PAST_MEDICAL_HISTORY);
		}
		if (request.getParameter(PAST_SURGICAL_HISTORY) != null) {
			pastSurgicalHistory = request.getParameter(PAST_SURGICAL_HISTORY);
		}
		if (request.getParameter(FAMILY_HISTORY) != null) {
			familyHistory = request.getParameter(FAMILY_HISTORY);
		}

		if (request.getParameter(OBESITY) != null) {
			obesity = request.getParameter(OBESITY);
		}
		if (request.getParameter(ACNE) != null) {
			acne = request.getParameter(ACNE);
		}
		if (request.getParameter(HAIR_DISTRIBUTION) != null) {
			hairDistribution = request.getParameter(HAIR_DISTRIBUTION);
		}
		if (request.getParameter(BREAST_DEVELOPMENT) != null) {
			breastDevelopment = request.getParameter(BREAST_DEVELOPMENT);
		}
		if (request.getParameter(PIGMENTATION) != null) {
			pigmentation = request.getParameter(PIGMENTATION);
		}
		if (request.getParameter(OTHERS) != null) {
			others = request.getParameter(OTHERS);
		}

		if (request.getParameter(HEIGHT) != null
				&& !request.getParameter(HEIGHT).equals("0")
				&& !request.getParameter(HEIGHT).equals("")) {
			height = Float.parseFloat(request.getParameter(HEIGHT));
		}
		if (request.getParameter(WEIGHT) != null
				&& !request.getParameter(WEIGHT).equals("0")
				&& !request.getParameter(WEIGHT).equals("")) {
			weight = Float.parseFloat(request.getParameter(WEIGHT));
		}
		if (request.getParameter(GALACTORRHOEA) != null) {
			galactorrhoeaText = request.getParameter(GALACTORRHOEA);
		}

		if (request.getParameter(OTHER_SYSTEMS) != null) {
			otherSystems = request.getParameter(OTHER_SYSTEMS);
		}
		if (request.getParameter(GYNAECOLOGICAL_EXAMINATION) != null) {
			gynaecologicalExamination = request
					.getParameter(GYNAECOLOGICAL_EXAMINATION);
		}

		map.put("otherSystems", otherSystems);
		map.put("gynaecologicalExamination", gynaecologicalExamination);

		map.put("primaryInfertility", primaryInfertility);
		map.put("secondaryInfertility", secondaryInfertility);
		map.put("hypomenorrhoea", hypomenorrhoea);
		map.put("oligomenorrhoea", oligomenorrhoea);
		map.put("galactorrhoea", galactorrhoea);
		map.put("hisrsutism", hisrsutism);
		map.put("leucorrhoea", leucorrhoea);
		map.put("pruritisVulvae", pruritisVulvae);
		map.put("backache", backache);
		map.put("dysmenorrhoea", dysmenorrhoea);

		map.put("familyHistory", familyHistory);
		map.put("pastSurgicalHistory", pastSurgicalHistory);
		map.put("pastMedicalHistory", pastMedicalHistory);

		map.put("galactorrhoeaText", galactorrhoeaText);
		map.put("weight", weight);
		map.put("height", height);
		map.put("height", height);
		map.put("others", others);
		map.put("pigmentation", pigmentation);
		map.put("hairDistribution", hairDistribution);
		map.put("breastDevelopment", breastDevelopment);
		map.put("acne", acne);
		map.put("obesity", obesity);

		map.put("menarchy", menarchy);
		map.put("coitusPrWk", coitusPrWk);
		map.put("conceive", conceive);
		map.put("fertilePeriod", fertilePeriod);
		map.put("dyspareunia", dyspareunia);
		map.put("obstetricHistory", obstetricHistory);
		map.put("pmp2", pmp2);
		map.put("pmp1", pmp1);
		map.put("lmp", lmp);
		map.put("presentMc", presentMc);
		map.put("pastMc", pastMc);
		map.put("hospitalId", hospitalId);
		map.put("deptId", deptId);
		map.put("visitId", visitId);
		map.put("inpatientId", inpatientId);
		map.put("hinId", hinId);
		map.put("userName", userName);
		map.put("date", date);
		map.put("time", time);

		successfullyAdded = opdHandlerService.submitSocioEconomicHistory(map);
		if (successfullyAdded) {
			message = "Record Added Successfully !!";
		} else {
			message = "Try Again !";

		}
		jsp = MESSAGE_FOR_GYNAE;
		jsp += ".jsp";
		title = "Socio-Economic History";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView submitAllDetailsLabourRoom(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		float menarchy = 0;
		String pastMc = "";
		String presentMc = "";
		String lmp = "";
		String pmp1 = "";
		String pmp2 = "";
		String obstetricHistory = "";
		String dyspareunia = "";
		String fertilePeriod = "";
		String conceive = "";
		String coitusPrWk = "";
		String pastMedicalHistory = "";
		String pastSurgicalHistory = "";
		String familyHistory = "";

		float primaryInfertility = 0;
		float secondaryInfertility = 0;
		float hypomenorrhoea = 0;
		float oligomenorrhoea = 0;
		float hisrsutism = 0;
		float galactorrhoea = 0;
		String backache = "";
		String pruritisVulvae = "";
		String dysmenorrhoea = "";
		String leucorrhoea = "";

		float height = 0;
		float weight = 0;
		String obesity = "";
		String acne = "";
		String hairDistribution = "";
		String breastDevelopment = "";
		String galactorrhoeaText = "";
		String pigmentation = "";
		String others = "";
		String otherSystems = "";
		String gynaecologicalExamination = "";

		int hinId = 0;
		int visitId = 0;
		int inpatientId = 0;
		int hospitalId = 0;
		int deptId = 0;
		String userName = "";
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
		session = request.getSession();
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("userName") != null) {
			userName = (String) session.getAttribute("userName");
		}
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		boolean successfullyAdded = false;
		if (request.getParameter(PAST_MC) != null) {
			pastMc = request.getParameter(PAST_MC);
		}
		if (request.getParameter(PRESENT_MC) != null) {
			presentMc = request.getParameter(PRESENT_MC);
		}
		if (request.getParameter(LMP) != null) {
			lmp = request.getParameter(LMP);
		}
		if (request.getParameter(PMP1) != null) {
			pmp1 = request.getParameter(PMP1);
		}
		if (request.getParameter(PMP2) != null) {
			pmp2 = request.getParameter(PMP2);
		}
		if (request.getParameter(OBSTETRIC_HISTORY) != null) {
			obstetricHistory = request.getParameter(OBSTETRIC_HISTORY);
		}
		if (request.getParameter(DYSPAREUNIA) != null) {
			dyspareunia = request.getParameter(DYSPAREUNIA);
		}
		if (request.getParameter(AWARENESS_OF_FERTILE_PERIOD) != null) {
			fertilePeriod = request.getParameter(AWARENESS_OF_FERTILE_PERIOD);
		}
		if (request.getParameter(TRYING_TO_CONCEIVE_FOR) != null) {
			conceive = request.getParameter(TRYING_TO_CONCEIVE_FOR);
		}
		if (request.getParameter(FREQUENCY_OF_COITUS_PER_WK) != null) {
			coitusPrWk = request.getParameter(FREQUENCY_OF_COITUS_PER_WK);
		}
		if (request.getParameter(MENARCHY) != null
				&& !request.getParameter(MENARCHY).equals("0")
				&& !request.getParameter(MENARCHY).equals("")) {
			menarchy = Float.parseFloat(request.getParameter(MENARCHY));
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
		}
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		if (request.getParameter(INPATIENT_ID) != null) {
			inpatientId = Integer.parseInt(request.getParameter(INPATIENT_ID));
		}
		if (request.getParameter(LEUCORRHOEA) != null) {
			leucorrhoea = request.getParameter(LEUCORRHOEA);
		}
		if (request.getParameter(DYSMENORRHOEA) != null) {
			dysmenorrhoea = request.getParameter(DYSMENORRHOEA);
		}
		if (request.getParameter(PRURITIS_VULVAE) != null) {
			pruritisVulvae = request.getParameter(PRURITIS_VULVAE);
		}
		if (request.getParameter(BACKACHE) != null) {
			backache = request.getParameter(BACKACHE);
		}

		if (request.getParameter(PRIMARY_INFERTILITY) != null
				&& !request.getParameter(PRIMARY_INFERTILITY).equals("0")
				&& !request.getParameter(PRIMARY_INFERTILITY).equals("")) {
			primaryInfertility = Float.parseFloat(request
					.getParameter(PRIMARY_INFERTILITY));
		}
		if (request.getParameter(SECONDARY_INFERTILITY) != null
				&& !request.getParameter(SECONDARY_INFERTILITY).equals("0")
				&& !request.getParameter(SECONDARY_INFERTILITY).equals("")) {
			secondaryInfertility = Float.parseFloat(request
					.getParameter(SECONDARY_INFERTILITY));
		}
		if (request.getParameter(HYPOMENORRHOEA) != null
				&& !request.getParameter(HYPOMENORRHOEA).equals("0")
				&& !request.getParameter(HYPOMENORRHOEA).equals("")) {
			hypomenorrhoea = Float.parseFloat(request
					.getParameter(HYPOMENORRHOEA));
		}
		if (request.getParameter(OLIGOMENORRHOEA) != null
				&& !request.getParameter(OLIGOMENORRHOEA).equals("0")
				&& !request.getParameter(OLIGOMENORRHOEA).equals("")) {
			oligomenorrhoea = Float.parseFloat(request
					.getParameter(OLIGOMENORRHOEA));
		}
		if (request.getParameter(GALACTORRHOEA) != null
				&& !request.getParameter(GALACTORRHOEA).equals("0")
				&& !request.getParameter(GALACTORRHOEA).equals("")) {
			galactorrhoea = Float.parseFloat(request
					.getParameter(GALACTORRHOEA));
		}
		if (request.getParameter(HISRSUTISM) != null
				&& !request.getParameter(HISRSUTISM).equals("0")
				&& !request.getParameter(HISRSUTISM).equals("")) {
			hisrsutism = Float.parseFloat(request.getParameter(HISRSUTISM));
		}

		if (request.getParameter(PAST_MEDICAL_HISTORY) != null) {
			pastMedicalHistory = request.getParameter(PAST_MEDICAL_HISTORY);
		}
		if (request.getParameter(PAST_SURGICAL_HISTORY) != null) {
			pastSurgicalHistory = request.getParameter(PAST_SURGICAL_HISTORY);
		}
		if (request.getParameter(FAMILY_HISTORY) != null) {
			familyHistory = request.getParameter(FAMILY_HISTORY);
		}

		if (request.getParameter(OBESITY) != null) {
			obesity = request.getParameter(OBESITY);
		}
		if (request.getParameter(ACNE) != null) {
			acne = request.getParameter(ACNE);
		}
		if (request.getParameter(HAIR_DISTRIBUTION) != null) {
			hairDistribution = request.getParameter(HAIR_DISTRIBUTION);
		}
		if (request.getParameter(BREAST_DEVELOPMENT) != null) {
			breastDevelopment = request.getParameter(BREAST_DEVELOPMENT);
		}
		if (request.getParameter(PIGMENTATION) != null) {
			pigmentation = request.getParameter(PIGMENTATION);
		}
		if (request.getParameter(OTHERS) != null) {
			others = request.getParameter(OTHERS);
		}

		if (request.getParameter(HEIGHT) != null
				&& !request.getParameter(HEIGHT).equals("0")
				&& !request.getParameter(HEIGHT).equals("")) {
			height = Float.parseFloat(request.getParameter(HEIGHT));
		}
		if (request.getParameter(WEIGHT) != null
				&& !request.getParameter(WEIGHT).equals("0")
				&& !request.getParameter(WEIGHT).equals("")) {
			weight = Float.parseFloat(request.getParameter(WEIGHT));
		}
		if (request.getParameter(GALACTORRHOEA_TEXT) != null) {
			galactorrhoeaText = request.getParameter(GALACTORRHOEA_TEXT);
		}

		if (request.getParameter(OTHER_SYSTEMS) != null) {
			otherSystems = request.getParameter(OTHER_SYSTEMS);
		}
		if (request.getParameter(GYNAECOLOGICAL_EXAMINATION) != null) {
			gynaecologicalExamination = request
					.getParameter(GYNAECOLOGICAL_EXAMINATION);
		}

		map.put("otherSystems", otherSystems);
		map.put("gynaecologicalExamination", gynaecologicalExamination);

		map.put("primaryInfertility", primaryInfertility);
		map.put("secondaryInfertility", secondaryInfertility);
		map.put("hypomenorrhoea", hypomenorrhoea);
		map.put("oligomenorrhoea", oligomenorrhoea);
		map.put("galactorrhoea", galactorrhoea);
		map.put("hisrsutism", hisrsutism);
		map.put("leucorrhoea", leucorrhoea);
		map.put("pruritisVulvae", pruritisVulvae);
		map.put("backache", backache);
		map.put("dysmenorrhoea", dysmenorrhoea);

		map.put("familyHistory", familyHistory);
		map.put("pastSurgicalHistory", pastSurgicalHistory);
		map.put("pastMedicalHistory", pastMedicalHistory);

		map.put("galactorrhoeaText", galactorrhoeaText);
		map.put("weight", weight);
		map.put("height", height);
		map.put("height", height);
		map.put("others", others);
		map.put("pigmentation", pigmentation);
		map.put("hairDistribution", hairDistribution);
		map.put("breastDevelopment", breastDevelopment);
		map.put("acne", acne);
		map.put("obesity", obesity);

		map.put("menarchy", menarchy);
		map.put("coitusPrWk", coitusPrWk);
		map.put("conceive", conceive);
		map.put("fertilePeriod", fertilePeriod);
		map.put("dyspareunia", dyspareunia);
		map.put("obstetricHistory", obstetricHistory);
		map.put("pmp2", pmp2);
		map.put("pmp1", pmp1);
		map.put("lmp", lmp);
		map.put("presentMc", presentMc);
		map.put("pastMc", pastMc);
		map.put("hospitalId", hospitalId);
		map.put("deptId", deptId);
		map.put("visitId", visitId);
		map.put("inpatientId", inpatientId);
		map.put("hinId", hinId);
		map.put("userName", userName);
		map.put("date", date);
		map.put("time", time);

		successfullyAdded = opdHandlerService.submitAllDetailsLabourRoom(map);
		if (successfullyAdded) {
			message = "Record Added Successfully !!";
		} else {
			message = "Try Again !";
		}
		jsp = SEARCH_FOR_PATIENT_LABOUR_ROOM_ADDMISSION;
		jsp += ".jsp";
		title = "Socio-Economic History";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView submitMedicalSurgicalHistory(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		String pastMedicalHistory = "";
		String pastSurgicalHistory = "";
		String familyHistory = "";
		int hinId = 0;
		int visitId = 0;
		int hospitalId = 0;
		int deptId = 0;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
		session = request.getSession();
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("userName") != null) {
			userName = (String) session.getAttribute("userName");
		}
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		boolean successfullyAdded = false;
		if (request.getParameter(PAST_MEDICAL_HISTORY) != null) {
			pastMedicalHistory = request.getParameter(PAST_MEDICAL_HISTORY);
		}
		if (request.getParameter(PAST_SURGICAL_HISTORY) != null) {
			pastSurgicalHistory = request.getParameter(PAST_SURGICAL_HISTORY);
		}
		if (request.getParameter(FAMILY_HISTORY) != null) {
			familyHistory = request.getParameter(FAMILY_HISTORY);
		}

		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
		}
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		map.put("visitId", visitId);
		map.put("hinId", hinId);
		map.put("familyHistory", familyHistory);
		map.put("pastSurgicalHistory", pastSurgicalHistory);
		map.put("pastMedicalHistory", pastMedicalHistory);
		map.put("hospitalId", hospitalId);
		map.put("deptId", deptId);
		successfullyAdded = opdHandlerService.submitMedicalSurgicalHistory(map);
		if (successfullyAdded) {
			message = "Record Added Successfully !!";
		} else {
			message = "Try Again !";

		}
		jsp = MESSAGE_FOR_GYNAE;
		jsp += ".jsp";
		title = "Medical/Surgical History";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView submitSystemicExamination(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		String otherSystems = "";
		String gynaecologicalExamination = "";
		int hinId = 0;
		int visitId = 0;
		int hospitalId = 0;
		int deptId = 0;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
		session = request.getSession();
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("userName") != null) {
			userName = (String) session.getAttribute("userName");
		}
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		boolean successfullyAdded = false;
		if (request.getParameter(OTHER_SYSTEMS) != null) {
			otherSystems = request.getParameter(OTHER_SYSTEMS);
		}
		if (request.getParameter(GYNAECOLOGICAL_EXAMINATION) != null) {
			gynaecologicalExamination = request
					.getParameter(GYNAECOLOGICAL_EXAMINATION);
		}

		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
		}
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		map.put("userName", userName);
		map.put("date", date);
		map.put("time", time);
		map.put("hinId", hinId);
		map.put("visitId", visitId);
		map.put("deptId", deptId);
		map.put("hospitalId", hospitalId);
		map.put("otherSystems", otherSystems);
		map.put("gynaecologicalExamination", gynaecologicalExamination);

		successfullyAdded = opdHandlerService.submitSystemicExamination(map);
		if (successfullyAdded) {
			message = "Record Added Successfully !!";
		} else {
			message = "Try Again !";

		}
		jsp = MESSAGE_FOR_GYNAE;
		jsp += ".jsp";
		title = "Systemic Examination";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView submitComplaints(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		float primaryInfertility = 0;
		float secondaryInfertility = 0;
		float hypomenorrhoea = 0;
		float oligomenorrhoea = 0;
		float hisrsutism = 0;
		float galactorrhoea = 0;
		String backache = "";
		String pruritisVulvae = "";
		String dysmenorrhoea = "";
		String leucorrhoea = "";
		int hinId = 0;
		int visitId = 0;
		int hospitalId = 0;
		int deptId = 0;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("userName") != null) {
			userName = (String) session.getAttribute("userName");
		}

		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		boolean successfullyAdded = false;
		if (request.getParameter(LEUCORRHOEA) != null) {
			leucorrhoea = request.getParameter(LEUCORRHOEA);
		}
		if (request.getParameter(DYSMENORRHOEA) != null) {
			dysmenorrhoea = request.getParameter(DYSMENORRHOEA);
		}
		if (request.getParameter(PRURITIS_VULVAE) != null) {
			pruritisVulvae = request.getParameter(PRURITIS_VULVAE);
		}
		if (request.getParameter(BACKACHE) != null) {
			backache = request.getParameter(BACKACHE);
		}

		if (request.getParameter(PRIMARY_INFERTILITY) != null
				&& !request.getParameter(PRIMARY_INFERTILITY).equals("0")
				&& !request.getParameter(PRIMARY_INFERTILITY).equals("")) {
			primaryInfertility = Float.parseFloat(request
					.getParameter(PRIMARY_INFERTILITY));
		}
		if (request.getParameter(SECONDARY_INFERTILITY) != null
				&& !request.getParameter(SECONDARY_INFERTILITY).equals("0")
				&& !request.getParameter(SECONDARY_INFERTILITY).equals("")) {
			secondaryInfertility = Float.parseFloat(request
					.getParameter(SECONDARY_INFERTILITY));
		}
		if (request.getParameter(HYPOMENORRHOEA) != null
				&& !request.getParameter(HYPOMENORRHOEA).equals("0")
				&& !request.getParameter(HYPOMENORRHOEA).equals("")) {
			hypomenorrhoea = Float.parseFloat(request
					.getParameter(HYPOMENORRHOEA));
		}
		if (request.getParameter(OLIGOMENORRHOEA) != null
				&& !request.getParameter(OLIGOMENORRHOEA).equals("0")
				&& !request.getParameter(OLIGOMENORRHOEA).equals("")) {
			oligomenorrhoea = Float.parseFloat(request
					.getParameter(OLIGOMENORRHOEA));
		}
		if (request.getParameter(GALACTORRHOEA) != null
				&& !request.getParameter(GALACTORRHOEA).equals("0")
				&& !request.getParameter(GALACTORRHOEA).equals("")) {
			galactorrhoea = Float.parseFloat(request
					.getParameter(GALACTORRHOEA));
		}
		if (request.getParameter(HISRSUTISM) != null
				&& !request.getParameter(HISRSUTISM).equals("0")
				&& !request.getParameter(HISRSUTISM).equals("")) {
			hisrsutism = Float.parseFloat(request.getParameter(HISRSUTISM));
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
		}
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}

		map.put("primaryInfertility", primaryInfertility);
		map.put("secondaryInfertility", secondaryInfertility);
		map.put("hypomenorrhoea", hypomenorrhoea);
		map.put("oligomenorrhoea", oligomenorrhoea);
		map.put("galactorrhoea", galactorrhoea);
		map.put("hisrsutism", hisrsutism);
		map.put("leucorrhoea", leucorrhoea);
		map.put("visitId", visitId);
		map.put("pruritisVulvae", pruritisVulvae);
		map.put("backache", backache);
		map.put("dysmenorrhoea", dysmenorrhoea);
		map.put("userName", userName);
		map.put("date", date);
		map.put("time", time);
		map.put("hinId", hinId);
		map.put("visitId", visitId);
		map.put("deptId", deptId);
		map.put("hospitalId", hospitalId);
		successfullyAdded = opdHandlerService.submitComplaints(map);
		if (successfullyAdded) {
			message = "Record Added Successfully !!";
		} else {
			message = "Try Again !";

		}
		jsp = MESSAGE_FOR_GYNAE;
		jsp += ".jsp";
		title = "Socio-Economic History";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView submitGeneralExamination(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		float height = 0;
		float weight = 0;
		String obesity = "";
		String acne = "";
		String hairDistribution = "";
		String breastDevelopment = "";
		String galactorrhoea = "";
		String pigmentation = "";
		String others = "";
		int hinId = 0;
		int visitId = 0;
		int hospitalId = 0;
		int deptId = 0;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("userName") != null) {
			userName = (String) session.getAttribute("userName");
		}

		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		boolean successfullyAdded = false;
		if (request.getParameter(OBESITY) != null) {
			obesity = request.getParameter(OBESITY);
		}
		if (request.getParameter(ACNE) != null) {
			acne = request.getParameter(ACNE);
		}
		if (request.getParameter(HAIR_DISTRIBUTION) != null) {
			hairDistribution = request.getParameter(HAIR_DISTRIBUTION);
		}
		if (request.getParameter(BREAST_DEVELOPMENT) != null) {
			breastDevelopment = request.getParameter(BREAST_DEVELOPMENT);
		}
		if (request.getParameter(PIGMENTATION) != null) {
			pigmentation = request.getParameter(PIGMENTATION);
		}
		if (request.getParameter(OTHERS) != null) {
			others = request.getParameter(OTHERS);
		}

		if (request.getParameter(HEIGHT) != null
				&& !request.getParameter(HEIGHT).equals("0")
				&& !request.getParameter(HEIGHT).equals("")) {
			height = Float.parseFloat(request.getParameter(HEIGHT));
		}
		if (request.getParameter(WEIGHT) != null
				&& !request.getParameter(WEIGHT).equals("0")
				&& !request.getParameter(WEIGHT).equals("")) {
			weight = Float.parseFloat(request.getParameter(WEIGHT));
		}
		if (request.getParameter(GALACTORRHOEA) != null) {
			galactorrhoea = request.getParameter(GALACTORRHOEA);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
		}
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		map.put("visitId", visitId);
		map.put("hinId", hinId);
		map.put("galactorrhoea", galactorrhoea);
		map.put("weight", weight);
		map.put("height", height);
		map.put("height", height);
		map.put("others", others);
		map.put("pigmentation", pigmentation);
		map.put("hairDistribution", hairDistribution);
		map.put("breastDevelopment", breastDevelopment);
		map.put("acne", acne);
		map.put("obesity", obesity);
		map.put("hospitalId", hospitalId);
		map.put("deptId", deptId);

		successfullyAdded = opdHandlerService.submitGeneralExaminaton(map);
		if (successfullyAdded) {
			message = "Record Added Successfully !!";
		} else {
			message = "Try Again !";

		}
		jsp = MESSAGE_FOR_GYNAE;
		jsp += ".jsp";
		title = "Socio-Economic History";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		return new ModelAndView("indexB", "map", map);
	}

	/**
	 * --------------------------------------------End of Methods For By
	 * Mansi-------------------------
	 * 
	 */
	// ----------------------SurgeryRequisitionForInPatient------By
	// Dipali---------------------------------------
	public ModelAndView printSurgeryRequisitionForInPatient(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		@SuppressWarnings("unused")
		int orderNo = 0;
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		try {
			if (request.getParameter("orderNo") != null
					&& !request.getParameter("orderNo").equals("")) {
				orderNo = Integer.parseInt(request.getParameter("orderNo"));
				requestParameters.put("orderNo", orderNo);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		detailsMap = opdHandlerService.getConnectionForReport();
		try {
			/*
			 * byte[] bytes = null; try { bytes
			 * =JasperRunManager.runReportToPdf(
			 * getCompiledReport("opd_surgeryRequisitionForInpatient")
			 * ,requestParameters,(Connection)detailsMap.get("conn")); } catch
			 * (JRException e) {
			 * 
			 * e.printStackTrace(); } response.setHeader("Content-Disposition",
			 * "inline; filename="+"opd_surgeryRequisitionForInpatient"+".pdf");
			 * response.setContentType("application/pdf");
			 * response.setContentLength(bytes.length); ServletOutputStream
			 * ouputStream; try { ouputStream = response.getOutputStream();
			 * ouputStream.write(bytes, 0, bytes.length); ouputStream.flush();
			 * ouputStream.close(); } catch (IOException e) {
			 * e.printStackTrace(); }
			 */

			HMSUtil.generateReport("opd_surgeryRequisitionForInpatient",
					requestParameters, (Connection) detailsMap.get("conn"),
					response, getServletContext());

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * --------------------------------------------Start of Methods For By
	 * Mansi-------------------------
	 * 
	 */
	/**
	 * ----------------------UPLOAD DOCUMENTS ---------------------------------
	 */

	public ModelAndView showUploadingDocumentsJsp(HttpServletRequest request,
			HttpServletResponse response) {
		/*
		 * Map<String, Object> map = new HashMap<String, Object>(); Map<String,
		 * Object> mapForDS = new HashMap<String, Object>(); int visitId = 0;
		 * if(request.getParameter("visitId")!=null &&
		 * !request.getParameter("visitId").equals("")){ visitId =
		 * Integer.parseInt(request.getParameter("visitId")); } int token = 0;
		 * if(request.getParameter("token")!=null){ token =
		 * Integer.parseInt(request.getParameter("token")); } String backFlag =
		 * ""; if(request.getParameter("backFlag")!=null){ backFlag
		 * =request.getParameter("backFlag"); } int inpatientId = 0;
		 * if(request.getParameter("parent")!=null &&
		 * !request.getParameter("parent").equals("")){ inpatientId =
		 * Integer.parseInt(request.getParameter("parent")); } String
		 * reportingFor=""; if(request.getParameter("reportingFor")!=null){
		 * reportingFor = request.getParameter("reportingFor");
		 * mapForDS.put("reportingFor", reportingFor); } map =
		 * opdHandlerService.
		 * showUploadingDocumentsJsp(visitId,inpatientId,mapForDS);
		 * map.put("visitId", visitId); map.put("token", token);
		 * map.put("backFlag", backFlag); map.put("inpatientId", inpatientId);
		 * // jsp = "opd_uploadpatientdoc" + ".jsp"; // map.put("contentJsp",
		 * jsp); String jsp = ""; if(backFlag.equals("OPD") ||
		 * backFlag.equals("dental") || backFlag.equals("fp") ){ jsp =
		 * "opd_uploadpatientdoc"; }else{
		 * 
		 * map.put("contentJsp", "opd_uploadpatientdoc.jsp"); jsp = "index"; }
		 * return new ModelAndView(jsp, "map", map);
		 */

		Map<String, Object> details = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		int departmentId = 0;
		int hospitalId = 0;
		int hinId = 0;

		if (request.getParameter("department") != null) {
			departmentId = Integer.parseInt(request.getParameter("department"));
		}
		if (departmentId != 0) {
			details.put("departmentId", departmentId);
		}

		if (request.getParameter("hinId") != null) {
			details.put("hinId",
					Integer.parseInt(request.getParameter("hinId")));
		}

		if (request.getParameter("referralHeaderId") != null) {
			details.put("referralHeaderId",
					Integer.parseInt(request.getParameter("referralHeaderId")));
		}

		int userId = 0;
		if (session.getAttribute(USER_ID) != null) {
			userId = (Integer) session.getAttribute(USER_ID);
			details.put(USER_ID, userId);
		}

		details.put("flag", "n");

		map = opdHandlerService.uploadAndViewDocuments(details);
		String jsp = "uploadAndViewDocuments";

		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView uploadAndViewDocuments(HttpServletRequest request,
			HttpServletResponse response) {
		/*
		 * Map<String, Object> map = new HashMap<String, Object>(); Map<String,
		 * Object> details = new HashMap<String, Object>();
		 * 
		 * HttpSession session = request.getSession(); int departmentId = 0; int
		 * hospitalId = 0; int hinId=0; String flag="n"; String uploadFrom
		 * ="NA";
		 * 
		 * MultipartFormDataRequest mrequest = null; if
		 * (MultipartFormDataRequest.isMultipartFormData(request)) { try {
		 * mrequest = new MultipartFormDataRequest(request); } catch
		 * (UploadException e) { e.printStackTrace(); } catch (IOException e) {
		 * e.printStackTrace(); } } if(mrequest.getParameter("hinId")!=null){
		 * hinId= Integer.parseInt((String)mrequest.getParameter("hinId"));
		 * details.put("hinId",
		 * Integer.parseInt((String)mrequest.getParameter("hinId"))); }
		 * 
		 * if(mrequest.getParameter("uploadFrom")!=null){ uploadFrom=
		 * (String)mrequest.getParameter("uploadFrom");
		 * details.put("uploadFrom",
		 * (String)mrequest.getParameter("uploadFrom")); }
		 * 
		 * if(mrequest.getParameter("visitId")!=null){
		 * 
		 * details.put("visitId",
		 * Integer.parseInt((String)mrequest.getParameter("visitId"))); }
		 * 
		 * if(mrequest.getParameter("inpatientId")!=null){
		 * 
		 * details.put("inpatientId",
		 * Integer.parseInt((String)mrequest.getParameter("inpatientId"))); }
		 * 
		 * 
		 * String filename = ""; String uploadURL="";
		 * if(uploadFrom.equalsIgnoreCase("OPD")) { uploadURL =
		 * getServletContext().getRealPath("/UploadedDocuments/OPD/"+hinId+"/");
		 * } if(uploadFrom.equalsIgnoreCase("IP")) { uploadURL =
		 * getServletContext().getRealPath("/UploadedDocuments/IP/"+hinId+"/");
		 * }
		 * 
		 * String comments = ""; String fileExtension=null;
		 * 
		 * if (mrequest.getParameter("department") != null) { departmentId =
		 * Integer.parseInt(request.getParameter("department")); }if
		 * (departmentId!=0) { details.put("departmentId", departmentId); }
		 * if(mrequest.getParameter("fileName")!= null){ filename =
		 * mrequest.getParameter("fileName"); }
		 * 
		 * 
		 * 
		 * if(mrequest.getParameter("flag")!=null){ flag =
		 * (String)mrequest.getParameter("flag"); } details.put("flag", flag);
		 * 
		 * if( mrequest.getParameter("comments")!= null){ comments =
		 * mrequest.getParameter("comments"); details.put("comments", comments);
		 * } details.put("uploadURL", uploadURL);
		 * 
		 * if(flag.equalsIgnoreCase("y")) {
		 * 
		 * List fileUploadedList = null; details.put("filename", filename);
		 * StringTokenizer strToken=new StringTokenizer(filename,"."); Long
		 * fileSizeLimit = RequestConstants.MAX_FILE_SIZE;
		 * filename=strToken.nextToken(); fileExtension=strToken.nextToken();
		 * String whiteList = "*."+fileExtension; fileUploadedList =
		 * HMSUtil.uploadFileMaintenance(mrequest,uploadURL,
		 * whiteList,fileSizeLimit,filename); }
		 * 
		 * System.out.println("hin"+hinId); // map =
		 * opdHandlerService.uploadAndViewDocuments(details); String jsp =
		 * "uploadAndViewDocuments"; String msg="File Successfuly Uploaded.";
		 * //jsp += ".jsp"; //map.put("contentJsp", jsp); map.put("message",
		 * msg);
		 * 
		 * return new ModelAndView(jsp, "map", map);
		 * 
		 * }
		 * 
		 * public ModelAndView viewPatientDetails(HttpServletRequest request,
		 * HttpServletResponse response) { Map<String, Object> map = new
		 * HashMap<String, Object>(); int hospitalId; String userName = "";
		 * String jsp = ""; String inputField = ""; String flag = ""; String
		 * flag1 = ""; String hin_no = ""; int visitId = 0;
		 * MultipartFormDataRequest mrequest = null; Box box =
		 * HMSUtil.getBox(request); if
		 * (MultipartFormDataRequest.isMultipartFormData(request)) { try {
		 * 
		 * mrequest = new MultipartFormDataRequest(request); } catch
		 * (UploadException e) { e.printStackTrace(); } catch (IOException e) {
		 * e.printStackTrace(); } if (mrequest.getParameter("inputField") !=
		 * null && !(mrequest.getParameter("inputField").equals(""))) {
		 * inputField = mrequest.getParameter("inputField"); } if
		 * (mrequest.getParameter("hin_no") != null) { hin_no =
		 * mrequest.getParameter("hin_no"); } if (mrequest.getParameter("flag")
		 * != null && !(mrequest.getParameter("flag").equals(""))) { flag =
		 * mrequest.getParameter("flag"); } if (mrequest.getParameter("flag1")
		 * != null && !(mrequest.getParameter("flag1").equals(""))) { flag1 =
		 * mrequest.getParameter("flag1"); if (mrequest.getParameter("hinNo") !=
		 * null) inputField = mrequest.getParameter("hinNo"); else inputField =
		 * mrequest.getParameter("adNo"); } if (mrequest.getParameter("visitId")
		 * != null && !(mrequest.getParameter("visitId").equals(""))) { visitId
		 * = Integer.parseInt(mrequest.getParameter("visitId")); } } else {
		 * 
		 * if (request.getParameter("inputField") != null &&
		 * !(request.getParameter("inputField").equals(""))) { inputField =
		 * request.getParameter("inputField"); }
		 * 
		 * if (request.getParameter("flag") != null &&
		 * !(request.getParameter("flag").equals(""))) { flag =
		 * request.getParameter("flag"); } if (request.getParameter("flag1") !=
		 * null && !(request.getParameter("flag1").equals(""))) { flag1 =
		 * request.getParameter("flag1"); removeFilesInUploadFolder(request,
		 * response); if (request.getParameter("fieldValue") != null) inputField
		 * = request.getParameter("fieldValue"); else inputField =
		 * request.getParameter("fieldValue"); } if
		 * (request.getParameter("visitId") != null &&
		 * !(request.getParameter("visitId").equals(""))) { visitId =
		 * Integer.parseInt(request.getParameter("visitId")); } }
		 * map.put("visitId", visitId); map.put("inputField", inputField);
		 * map.put("flag", flag); map.put("flag1", flag1); HttpSession session =
		 * request.getSession(); if (session.getAttribute(HOSPITAL_ID) != null)
		 * { hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		 * box.put("hospitalId", hospitalId); } if
		 * (session.getAttribute(LOGIN_NAME) != null) { userName = (String)
		 * session.getAttribute(LOGIN_NAME); box.put("userName", userName); }
		 * String userHome = getServletContext().getRealPath(""); String
		 * fileSeparator = System.getProperty("file.separator"); String
		 * uploadURL = userHome.substring(0, userHome
		 * .lastIndexOf(fileSeparator)) + fileSeparator + "HMSDocumentFolder" +
		 * fileSeparator + "upload" + fileSeparator;
		 * 
		 * //String destuploadURL = getServletContext().getRealPath("/upload/");
		 * // File urlName = new
		 * File(getServletContext().getRealPath("/upload/")); // String
		 * getPathName = urlName.getPath(); // map.put("destUploadURL",
		 * destuploadURL + fileSeparator + hin_no); map.put("uploadURL",
		 * uploadURL + hin_no); map = opdHandlerService.viewPatientDetails(map);
		 * String[] files = null; try { // File fileDir = new File(destuploadURL
		 * + fileSeparator + hin_no); File fileDir = new File(uploadURL +
		 * fileSeparator + hin_no); if (fileDir.exists()) { files =
		 * fileDir.list(); } } catch (Exception exc) { exc.printStackTrace();
		 * 
		 * } if (flag.equals("upload") && !flag1.equals("viewDocuments")) { jsp
		 * = "opd_uploadpatientdoc"; jsp += ".jsp"; title =
		 * "Cancel for Patient Appointments"; map.put("contentJsp", jsp);
		 * map.put("title", title); return new ModelAndView("indexB", "map",
		 * map); } else if (flag.equals("view")) { jsp = "opdViewPatientDoc";
		 * jsp += ".jsp"; title = "Cancel for Patient Appointments";
		 * map.put("contentJsp", jsp); map.put("title", title); map.put("files",
		 * files); return new ModelAndView("indexB", "map", map); } else { jsp =
		 * "opdViewDocumentsPopUp"; jsp += ".jsp"; title =
		 * "Cancel for Patient Appointments"; map.put("contentJsp", jsp);
		 * map.put("title", title); map.put("files", files); return new
		 * ModelAndView("indexB", "map", map); }
		 */

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> details = new HashMap<String, Object>();

		HttpSession session = request.getSession();
		int departmentId = 0;
		int hospitalId = 0;
		int hinId = 0;
		String flag = "n";
		String uploadFrom = "NA";

		MultipartFormDataRequest mrequest = null;
		if (MultipartFormDataRequest.isMultipartFormData(request)) {
			try {
				mrequest = new MultipartFormDataRequest(request);
			} catch (UploadException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		if (mrequest.getParameter("hinId") != null) {
			hinId = Integer.parseInt((String) mrequest.getParameter("hinId"));
			details.put("hinId",
					Integer.parseInt((String) mrequest.getParameter("hinId")));
		}

		if (mrequest.getParameter("uploadFrom") != null) {
			uploadFrom = (String) mrequest.getParameter("uploadFrom");
			details.put("uploadFrom",
					(String) mrequest.getParameter("uploadFrom"));
		}

		if (mrequest.getParameter("visitId") != null) {

			details.put("visitId",
					Integer.parseInt((String) mrequest.getParameter("visitId")));
		}

		if (mrequest.getParameter("inpatientId") != null) {

			details.put("inpatientId", Integer.parseInt((String) mrequest
					.getParameter("inpatientId")));
		}
		if (mrequest.getParameter("referralHeaderId") != null) {

			details.put("referralHeaderId", Integer.parseInt((String) mrequest
					.getParameter("referralHeaderId")));
		}

		if (session.getAttribute(USER_ID) != null) {
			details.put(USER_ID, (Integer) session.getAttribute(USER_ID));
		}
		String filename = "";
		String uploadURL = "";
		if (uploadFrom.equalsIgnoreCase("OPD")) {
			uploadURL = getServletContext().getRealPath(
					"/UploadedDocuments/OPD/" + hinId + "/");
		}
		if (uploadFrom.equalsIgnoreCase("IP")) {
			uploadURL = getServletContext().getRealPath(
					"/UploadedDocuments/IP/" + hinId + "/");
		}
		if (uploadFrom.equalsIgnoreCase("Referral")) {
			uploadURL = getServletContext().getRealPath(
					"/UploadedDocuments/Referral/" + hinId + "/");
		}
		//System.out.println(uploadURL);
		String comments = "";
		String fileExtension = null;

		if (mrequest.getParameter("department") != null) {
			departmentId = Integer.parseInt(request.getParameter("department"));
		}
		if (departmentId != 0) {
			details.put("departmentId", departmentId);
		}
		if (mrequest.getParameter("fileName") != null) {
			filename = mrequest.getParameter("fileName");
		}

		if (mrequest.getParameter("flag") != null) {
			flag = (String) mrequest.getParameter("flag");
		}
		details.put("flag", flag);

		if (mrequest.getParameter("comments") != null) {
			comments = mrequest.getParameter("comments");
			details.put("comments", comments);
		}
		details.put("uploadURL", uploadURL);

		if (flag.equalsIgnoreCase("y")) {

			List fileUploadedList = null;
			details.put("filename", filename);
			StringTokenizer strToken = new StringTokenizer(filename, ".");
			Long fileSizeLimit = RequestConstants.MAX_FILE_SIZE;
			filename = strToken.nextToken();
			fileExtension = strToken.nextToken();
			String whiteList = "*." + fileExtension;
			fileUploadedList = HMSUtil.uploadFileMaintenance(mrequest,
					uploadURL, whiteList, fileSizeLimit, filename);
		}

		map = opdHandlerService.uploadAndViewDocuments(details);
		String jsp = "uploadAndViewDocuments";
		String msg = "File Successfuly Uploaded.";
		// jsp += ".jsp";
		// map.put("contentJsp", jsp);
		map.put("message", msg);

		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView viewPreAnesthesiaOPD(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> mapForDS = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		int visitId = 0;
		int hospitalId = 0;
		int chargeCodeId = 0;
		int preAnethesiaHdId = 0;
		if (request.getParameter("preAnethesiaHdId") != null) {
			preAnethesiaHdId = Integer.parseInt(request
					.getParameter("preAnethesiaHdId"));
		}
		if (request.getParameter("visitId") != null) {
			visitId = Integer.parseInt(request.getParameter("visitId"));
		}
		if (request.getParameter("chargeCode") != null) {
			chargeCodeId = Integer.parseInt(request.getParameter("chargeCode"));
		}
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		}
		// System.out.println("preAnesthesiaDetailId============="+
		// preAnesthesiaDetailId);
		mapForDS.put("visitId", visitId);
		mapForDS.put(HOSPITAL_ID, hospitalId);
		mapForDS.put("chargeCodeId", chargeCodeId);
		mapForDS.put("preAnethesiaHdId", preAnethesiaHdId);

		map = opdHandlerService.viewPreAnesthesiaDetails(mapForDS);
		map.put("opdView", true);
		jsp = OT_VIEW_PRE_ANESTHESIA_DETAILS;
		// jsp += ".jsp";
		title = "Pre-Anesthesia Form";

		map.put("contentJsp", jsp);
		map.put("title", title);
		// return new ModelAndView("index", "map", map);
		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView viewOtPostOperative(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> mapForDS = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		int visitId = 0;
		int hospitalId = 0;
		int chargeCodeId = 0;
		String remarks = null;
		if (request.getParameter("remarks") != null) {
			remarks = request.getParameter("remarks");
		}
		if (request.getParameter("chargeCode") != null) {
			chargeCodeId = Integer.parseInt(request.getParameter("chargeCode"));
		}
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		}
		// System.out.println("preAnesthesiaDetailId============="+
		// preAnesthesiaDetailId);
		mapForDS.put("visitId", visitId);
		mapForDS.put(HOSPITAL_ID, hospitalId);
		mapForDS.put("chargeCodeId", chargeCodeId);

		// map = opdHandlerService.viewPreAnesthesiaDetails(mapForDS);
		map.put("opdView", true);
		// jsp = OT_VIEW_PRE_ANESTHESIA_DETAILS;
		jsp = "OT_viewOtPostOperative";
		// jsp += ".jsp";
		title = "Pre-Anesthesia Form";

		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("remarks", remarks);
		// return new ModelAndView("index", "map", map);
		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView submitUploadDocuments(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		MultipartFormDataRequest mrequest = null;
		String fileName = null;
		String message = null;
		String hin_no = "";
		String fileExtension = null;
		int hospitalId;
		int visitId = 0;
		String userName = "";
		if (MultipartFormDataRequest.isMultipartFormData(request)) {
			try {

				mrequest = new MultipartFormDataRequest(request);
			} catch (UploadException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		HttpSession session = request.getSession();
		if (mrequest.getParameter("hin_no") != null) {
			hin_no = (String) mrequest.getParameter("hin_no");
		}
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			box.put("hospitalId", hospitalId);
		}
		/*
		 * if (session.getAttribute(LOGIN_NAME) != null) { userName = (String)
		 * session.getAttribute(LOGIN_NAME); box.put("userName", userName); }
		 */

		int userId = 0;
		if (session.getAttribute(USER_ID) != null) {
			userId = (Integer) session.getAttribute(USER_ID);
			box.put(USER_ID, userId);
		}
		if (request.getParameter("visitId") != null
				&& !request.getParameter("visitId").equals("0")) {
			visitId = Integer.parseInt(request.getParameter("visitId"));
		}
		Map<String, Object> uploadFileMap = new HashMap<String, Object>();
		String userHome = getServletContext().getRealPath("");
		String fileSeparator = System.getProperty("file.separator");
		String uploadURL = userHome.substring(0,
				userHome.lastIndexOf(fileSeparator))
				+ fileSeparator
				+ "HMSDocumentFolder"
				+ fileSeparator
				+ "upload" + fileSeparator;
		HMSUtil.createFolderFroDocument(hin_no, uploadURL);
		List fileUploadedList = null;
		int uploadCount = box.getInt("uploadCount");
		int i = 1;
		for (i = 1; i <= uploadCount; i++) {
			if (!request.getParameter("filename" + i).equals("")) {
				StringTokenizer strToken = new StringTokenizer(
						request.getParameter("filename" + i), ".");

				fileName = strToken.nextToken();
				fileExtension = strToken.nextToken();

				String whiteList = "*." + fileExtension;

				fileUploadedList = HMSUtil.uploadFile(mrequest, uploadURL
						+ hin_no + fileSeparator, whiteList,
						request.getParameter("filename" + i), i);
				box.put("filename" + i, request.getParameter("filename" + i));
				box.put("description" + i,
						mrequest.getParameter("description" + i));
				box.put("fileExtension" + i, fileExtension);
			} else {
				box.put("filename" + i, "0");
			}
		}
		if (mrequest.getParameter("hinId") != null)
			box.put("hinId", mrequest.getParameter("hinId"));
		else
			box.put("hinId", 0);
		int inpatientId = 0;
		if (mrequest.getParameter("inpatientId") != null) {
			inpatientId = Integer
					.parseInt(mrequest.getParameter("inpatientId"));
			box.put("inpatientId", inpatientId);
		} else
			box.put("inpatientId", 0);
		box.put("patientName", mrequest.getParameter("patientName"));
		box.put("sex", mrequest.getParameter("sex"));
		box.put("age", mrequest.getParameter("age"));
		if (mrequest.getParameter("address") != null)
			box.put("address", mrequest.getParameter("address"));
		Boolean fileUploaded = false;
		if (fileUploadedList != null && fileUploadedList.size() != 0) {
			fileUploaded = (Boolean) fileUploadedList.get(0);
		}
		box.put("uploadURL", uploadURL);
		box.put("hin_no", hin_no);
		box.put("fileSeparator", fileSeparator);
		map = opdHandlerService.submitUploadDocuments(box);
		if (map.get("dataSaved").equals(true)) {
			message = "File Uploaded Sucessfully!!";
		} else {
			message = "Data Cannot be Saved !!";
		}
		map.put("message", message);
		map.put("visitId", visitId);
		map.put("inpatientId", inpatientId);
		jsp = "submit_uploadpatientdoc";
		jsp += ".jsp";
		title = "Upload Documents";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView viewPatientDocuments(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		String filename = null;
		String fileExtension = null;
		MultipartFormDataRequest mrequest = null;

		if (MultipartFormDataRequest.isMultipartFormData(request)) {
			try {
				mrequest = new MultipartFormDataRequest(request);
			} catch (UploadException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		Map<String, Object> uploadFileMap = new HashMap<String, Object>();

		// String uploadURL = getServletContext().getRealPath("/upload/");
		String userHome = getServletContext().getRealPath("");
		String fileSeparator = System.getProperty("file.separator");
		String uploadURL = userHome.substring(0,
				userHome.lastIndexOf(fileSeparator))
				+ fileSeparator
				+ "HMSDocumentFolder"
				+ fileSeparator
				+ "upload" + fileSeparator;

		// String whiteList = "*.zip";
		// String whiteList = "*.jpg";

		// Long fileSizeLimit = 2097152l;

		/*
		 * List fileUploadedList = null; fileUploadedList =
		 * HMSUtil.uploadFile(mrequest,uploadURL, whiteList,
		 * box.getString("filename"));
		 * //System.out.println("fileUploadedList="+fileUploadedList.size());
		 * Boolean fileUploaded=false; if(fileUploadedList != null &&
		 * fileUploadedList.size()!=0) { fileUploaded = (Boolean)
		 * fileUploadedList.get(0); }
		 */
		box.put("uploadURL", uploadURL);
		StringTokenizer st1 = new StringTokenizer(box.getString("filename"),
				".");
		filename = st1.nextToken();
		fileExtension = st1.nextToken();

		box.put("filename", box.getString("filename"));
		try {
			if (fileExtension == "doc" || fileExtension == "docx") {
				response.setContentType("application/vnd.ms-word");
			} else if (fileExtension == "xls" || fileExtension == "xlsx") {
				response.setContentType("application/vnd.ms-excel");
			} else if (fileExtension == "pdf") {
				response.setContentType("application/pdf");
			} else if (fileExtension.trim().equalsIgnoreCase("txt")) {
				response.setContentType("text/plain");
			} else if (fileExtension.trim().equalsIgnoreCase("ppt")) {
				response.setContentType("application/ppt");
			} else if (fileExtension == "png") {
				response.setContentType("image/png");
			} else if (fileExtension == "jpeg") {
				response.setContentType("image/jpeg");
			} else if (fileExtension == "wbmp") {
				response.setContentType("image/vnd.wap.wbmp");
			} else if (fileExtension == "gif") {
				response.setContentType("image/gif");
			} else if (fileExtension == "jpg") {
				response.setContentType("image/jpg");
			} else {
				response.setContentType("application/octet-stream");
			}
			// set the header and also the Name by which user will be prompted
			// to save
			response.setHeader("Content-Disposition", "attachment;filename="
					+ java.net.URLEncoder.encode(box.getString("filename"))
					+ "");

			// System.out.println("box.getString(filename)==" + filename + "."+
			// fileExtension);
			// response.setContentType("image/"+fileExtension);
			// response.setHeader("Content-Disposition", "attachment;
			// filename="+filename+"."+fileExtension);

			File f = new File(uploadURL + "/" + filename + "." + fileExtension);
			InputStream in = new FileInputStream(f);
			response.getOutputStream().flush();
			ServletOutputStream outs = response.getOutputStream();

			long length = f.length();

			if (length > Integer.MAX_VALUE) {
				// File is too large
			}

			// Create the byte array to hold the data
			byte[] bytes = new byte[(int) length];

			int offset = 0;
			int numRead = 0;
			while (offset < bytes.length
					&& (numRead = in.read(bytes, offset, bytes.length - offset)) >= 0) {
				offset += numRead;
			}

			if (offset < bytes.length) {
			}
			outs.write(bytes);
			in.close();

		} catch (IOException ioe) {
			ioe.printStackTrace();
		}

		jsp = "opdViewPatientDoc";
		jsp += ".jsp";
		title = "Import CD";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	/**
	 * ---------------------- Phych Questinnaire Answer
	 * ---------------------------------
	 */

	public ModelAndView showPsychiatristQuestionnaireJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> details = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		int departmentId = 0;
		int hospitalId = 0;
		int hinId = 0;
		int visitId = 0;

		if (session.getAttribute("deptId") != null) {
			departmentId = Integer.parseInt(session.getAttribute("deptId")
					.toString());
			box.put(DEPARTMENT_ID, departmentId);
		}
		
		  if(request.getParameter("hinId")!=null){ details.put("hinId",
		  Integer.parseInt(request.getParameter("hinId"))); }
		  if(request.getParameter("visitId")!=null){ visitId =
		  Integer.parseInt(request.getParameter("visitId"));
		  details.put("visitId",visitId); }
		 
		int userId = 0;
		if (session.getAttribute(USER_ID) != null) {
			userId = (Integer) session.getAttribute(USER_ID);
			details.put(USER_ID, userId);
		}
		details.put("box", box);
		map = opdHandlerService.getPsychiatristQaHeading(details);
		map.put("visitId", visitId);
		String jsp = "capturePsychQuesAnswer";

		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getPsyQuestionByHeadingId(HttpServletRequest request,
			HttpServletResponse response) {
		
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		String loginDoctor = null;
		if (request.getParameter("loginDoctor") != null)
			loginDoctor = request.getParameter("loginDoctor");
		
		int hospitalId = 0;
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			box.put("hospitalId", hospitalId);

		}
	
		if (request.getParameter(DEPARTMENT_ID) != null)
			request.setAttribute(DEPARTMENT_ID,
					request.getParameter(DEPARTMENT_ID));
		
			map.put("box", box);
		map = opdHandlerService.getPsychiatristQuestionnaire(map);
		map.put("headingInc", box.getInt("headingInc"));
		jsp = "opd_responseForPsychiatristQuestionnaire";

		map.put("jsp", jsp);
		return new ModelAndView(jsp, "map", map);

	}
	
	public ModelAndView submitPhychiatristAnswer(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		MultipartFormDataRequest mrequest = null;
		String fileName = null;
		String message = null;
		String hin_no = "";
		String fileExtension = null;
		int hospitalId;
		int visitId = 0;
		String userName = "";

		HttpSession session = request.getSession();
		int hbt = 0;
		int totalHdQa = 0;
		int i=0;
		int j=0;
		List<Integer> qaMasIdList = new ArrayList<Integer>();
		List<Integer> answerList = new ArrayList<Integer>();
		// System.out.println("hhff"+request.getParameter("hbt") );
	/*	if (request.getParameter("hbt") != null) {
			hbt = Integer.parseInt(request.getParameter("hbt"));

			for (int i = 1; i <= hbt; i++) {

				if (request.getParameter("answer" + i) != null
						&& !request.getParameter("answer" + i).equals("")) {
					qaMasIdList.add(Integer.parseInt(request
							.getParameter("question" + i)));
					answerList.add(request.getParameter("answer" + i));
				}
			}

		}*/
		
		if (request.getParameter("headingInc") != null) {
			hbt = Integer.parseInt(request.getParameter("headingInc"));

			for (i = 1; i <= hbt; i++) {

				if (request.getParameter("totalHeadingQuestion"+i) != null) {
					
					totalHdQa = Integer.parseInt(request.getParameter("totalHeadingQuestion"+i));
					
					for (j = 1; j <= totalHdQa; j++){
				    if (request.getParameter("questionId" + i+j) != null
						&& request.getParameter("answerId" + i+j)!= null) {
					qaMasIdList.add(Integer.parseInt(request
							.getParameter("questionId" + i+j)));
					
					answerList.add(Integer.parseInt(request
							.getParameter("answerId" + i+j)));
					
					
				   }
				}//questionloop headingwise
				
			   }//total questions in heading
			}

		}

		if (session.getAttribute("deptId") != null) {
			int departmentId = Integer.parseInt(session.getAttribute("deptId")
					.toString());
			box.put(DEPARTMENT_ID, departmentId);
		}
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			box.put(HOSPITAL_ID, hospitalId);
		}

		int userId = 0;
		if (session.getAttribute(USER_ID) != null) {
			userId = (Integer) session.getAttribute(USER_ID);
			box.put(USER_ID, userId);
		}
		if (request.getParameter("visitId") != null
				&& !request.getParameter("visitId").equals("0")) {
			visitId = Integer.parseInt(request.getParameter("visitId"));
			box.put("visitId", visitId);
		}
		mapForDS.put("qaMasIdList", qaMasIdList);
		mapForDS.put("answerList", answerList);
		mapForDS.put("box", box);
		map = opdHandlerService.submitPsychiatristQuestionnaire(mapForDS);
		if (map.get("dataSaved")!=null &&map.get("dataSaved").equals(true)) {
			map = opdHandlerService.getPsychiatristQaHeading(mapForDS);
			message = "Data Submitted Sucessfully!!";
		} else {
			message = "Data could not be Saved !!";
		}
		map.put("message", message);
		map.put("visitId", visitId);
		// map.put("inpatientId", inpatientId);
		/*
		 * map.put("message", message); map.put("visitId", visitId);
		 * //map.put("inpatientId", inpatientId); jsp =
		 * "capturePsychQuesAnswer"; jsp += ".jsp"; title = "Q";
		 * map.put("contentJsp", jsp); map.put("title", title); return new
		 * ModelAndView("indexB", "map", map);
		 */

		String jsp = "capturePsychQuesAnswer";

		// jsp += ".jsp";
		// map.put("contentJsp", jsp);
		map.put("message", message);

		return new ModelAndView(jsp, "map", map);

		/*
		 * map.put("visitId", visitId); String jsp = "capturePsychQuesAnswer";
		 */
	}

	/**
	 * ----------------------VIEW DOCUMENTS ---------------------------------
	 */

	public ModelAndView showViewDocumentsJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = "opdViewPatientDoc" + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView removeFilesInUploadFolder(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		String filename = null;
		String fileExtension = null;
		Map<String, Object> uploadFileMap = new HashMap<String, Object>();

		String uploadURL = getServletContext().getRealPath("/upload/");

		// System.out.println("uploadURL==" + uploadURL);
		box.put("uploadURL", uploadURL);

		File f = new File(uploadURL);

		if (f.listFiles().length > 0) {
			File fd[] = f.listFiles();

			for (int i = 0; i < fd.length; i++) {
				if (fd[i].isFile())
					fd[i].delete();
			}
		}
		if (f.listFiles().length < 1) {
			if (!f.canWrite()) {
			}
		}

		jsp = "opdViewPatientDoc";
		jsp += ".jsp";
		title = "Import CD";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	/**
	 * methods added by shailesh for opd update
	 * 
	 * 
	 * 
	 */

	/*
	 * @SuppressWarnings("unused") public ModelAndView
	 * updateOPDPatientDetails(HttpServletRequest request, HttpServletResponse
	 * response) { Map<String, Object> map = new HashMap<String, Object>();
	 * HttpSession session = request.getSession(); String deptName = ""; int
	 * deptId = 0; if (session.getAttribute("deptName") != null) deptName =
	 * (String) session.getAttribute("deptName"); if
	 * (session.getAttribute("deptId") != null) deptId = (Integer)
	 * session.getAttribute("deptId"); String jsp = "updateOpd"; jsp += ".jsp";
	 * map.put("deptName", deptName); map.put("deptId", deptId);
	 * map.put("contentJsp", jsp); return new ModelAndView("indexB", "map",
	 * map); }
	 */

	public ModelAndView updateOPDPatientDetailsJsp(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		MultipartFormDataRequest mrequest = null;
		int visitId = 0;
		int token = 0;

		int docId = 0;
		if (session.getAttribute("userId") != null) {
			docId = (Integer) session.getAttribute("empId");

		}

	/*	if (request.getParameter("token") != null) {
			token = Integer.parseInt(request.getParameter("token"));
			session.setAttribute("token", token);
		}*/
		if (request.getParameter("token") != null) {
			//token = Integer.parseInt(request.getParameter("token"));
			 //token= Integer.parseInt(request.getParameter("token").replaceAll("[^0-9]", ""));
			if(request.getParameter("token").replaceAll("[^0-9]", "").length()>0) 
				token= Integer.parseInt(request.getParameter("token").replaceAll("[^0-9]", ""));
			 session.setAttribute("token", token);
		}
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		int empId = (Integer) session.getAttribute("userId");
		if (request.getParameter("visitId") != null) {
			visitId = Integer.parseInt(request.getParameter("visitId"));
		}
		int deptId = (Integer) session.getAttribute("deptId");
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		/*
		 * map = opdHandlerService.getPatientDetails(visitId);
		 * List<OpdPatientDetails> admittedVisit = new
		 * ArrayList<OpdPatientDetails>();
		 * 
		 * 
		 * List<OpdPatientDetails> opdDetailListForFollowUp = new
		 * ArrayList<OpdPatientDetails>(); List<OpdPatientHistory>
		 * opdHistoryDetailsListForFollowUp = new
		 * ArrayList<OpdPatientHistory>();
		 * List<PatientInvestigationHeader>patientInvestigationHeaderListForFollowUp
		 * = new ArrayList<PatientInvestigationHeader>();
		 * List<PatientPrescriptionHeader> patientPrescriptionHeaderList = new
		 * ArrayList<PatientPrescriptionHeader>(); List<DischargeIcdCode>
		 * dischargeIcdCodeList = new ArrayList<DischargeIcdCode>();
		 * OpdPatientDetails opdPatientDetails =null;
		 * if(map.get("opdDetailListForFollowUp")!= null){
		 * opdDetailListForFollowUp =
		 * (List<OpdPatientDetails>)map.get("opdDetailListForFollowUp"); }
		 * if(map.get("opdHistoryDetailsListForFollowUp")!= null){
		 * opdHistoryDetailsListForFollowUp =
		 * (List<OpdPatientHistory>)map.get("opdHistoryDetailsListForFollowUp");
		 * } if(map.get("patientInvestigationHeaderListForFollowUp")!= null){
		 * patientInvestigationHeaderListForFollowUp =
		 * (List<PatientInvestigationHeader
		 * >)map.get("patientInvestigationHeaderListForFollowUp"); }
		 * if(map.get("patientPrescriptionHeaderList")!= null){
		 * patientPrescriptionHeaderList =
		 * (List<PatientPrescriptionHeader>)map.get
		 * ("patientPrescriptionHeaderList"); }
		 * if(map.get("dischargeIcdCodeList")!= null){ dischargeIcdCodeList =
		 * (List<DischargeIcdCode>)map.get("dischargeIcdCodeList"); }
		 * 
		 * if(map.get("opdPatientDetails")!= null){
		 * opdPatientDetails=(OpdPatientDetails)map.get("opdPatientDetails"); }
		 * if(map.get("admittedVisit")!= null){ admittedVisit =
		 * (List<OpdPatientDetails>)map.get("admittedVisit"); }
		 */
		// map = opdHandlerService.getPatientDetails(visitId);
		/*
		 * List patientDataList = (List) map.get("patientDataList"); Visit visit
		 * = (Visit) patientDataList.get(0); int visitNo = visit.getVisitNo();
		 * int hinId = visit.getHin().getId();
		 */
		mapForDS.put("deptId", deptId);
		// mapForDS.put("visitNo", visitNo);
		// mapForDS.put("hinId", hinId);
		mapForDS.put("visitId", visitId);
		mapForDS.put("hospitalId", hospitalId);
		mapForDS.put("docId", docId);
		// map = opdHandlerService.getOPDDetails(mapForDS);
		map = opdHandlerService.getRecallOpdPatientDetails(mapForDS);
		
		Map<String, Object> mapForToken = new HashMap<String, Object>();
		mapForToken.put("token", token);
		mapForToken.put("visitId", visitId);
		mapForToken.put("empId", empId);
		mapForToken.put("hospitalId", hospitalId);
		mapForToken = opdHandlerService.updateVistToken(mapForToken);
		/*
		 * map.put("patientDataList", patientDataList);
		 * map.put("opdDetailListForFollowUp", opdDetailListForFollowUp);
		 * map.put("opdHistoryDetailsListForFollowUp",
		 * opdHistoryDetailsListForFollowUp);
		 * map.put("patientInvestigationHeaderListForFollowUp",
		 * patientInvestigationHeaderListForFollowUp);
		 * map.put("patientPrescriptionHeaderList",
		 * patientPrescriptionHeaderList); map.put("dischargeIcdCodeList",
		 * dischargeIcdCodeList); map.put("opdPatientDetails",
		 * opdPatientDetails); map.put("admittedVisit", admittedVisit);
		 */
		//if(map.get("readableOPDScreen")!=null && map.get("readableOPDScreen").toString().equalsIgnoreCase("y"))
			//jsp = "opd_detailsReadonly";
		//else
			jsp = "opd_recall";
		jsp += ".jsp";
		title = "Patient Details";
		map.put("visitId", visitId);
		map.put("deptId", deptId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView getPatientNameForUpadteOpdDetails(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		String serviceNo = "";
		String flag = "";
		List<Patient> patientList = new ArrayList<Patient>();
		if (request.getParameter(SERVICE_NO) != null) {
			serviceNo = request.getParameter(SERVICE_NO);
		}
		map.put("serviceNo", serviceNo);
		patientList = opdHandlerService.getPatientNameForUpadteOpdDetails(map);
		if (patientList.size() > 0) {
			map.put("patientList", patientList);
		}
		String jsp = "populatePatientNameForOpd";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getVisitNo(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Visit> visitNoList = new ArrayList<Visit>();
		int hinId = 0;
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
		}

		visitNoList = opdHandlerService.getVisitNo(hinId);
		String jsp = "visitList";
		map.put("visitNoList", visitNoList);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getPatientOpdDetails(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		Map<String, Object> dataMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		int deptId = 0;
		int current_visitNo = 0;
		int token = 0;
		String flag = null;
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
		}
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}

		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
		}
		current_visitNo = visitNo;
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
		}
		if (request.getParameter("token") != null) {
			token = Integer.parseInt(request.getParameter("token"));
		}
		if (flag.equalsIgnoreCase("prev")) {
			visitNo = visitNo - 1;
		}
		if (flag.equalsIgnoreCase("next")) {
			visitNo = visitNo + 1;
		}
		if (flag.equalsIgnoreCase("current")) {
			visitNo = visitNo;
		}

		dataMap.put("current_visitNo", current_visitNo);
		dataMap.put("visitNo", visitNo);
		dataMap.put("hinId", hinId);
		dataMap.put("deptId", deptId);
		map = opdHandlerService.getPatientOpdDetails(dataMap);
		dataMap = opdHandlerService.getOPDDetailsForOpdUpdate(dataMap);
		/*
		 * if (dataMap.get("listOfOpd3") != null) { map.put("listOfOpd3", (List)
		 * dataMap.get("listOfOpd3"));
		 * 
		 * } if (dataMap.get("listOfOpd2") != null) { map.put("listOfOpd2",
		 * (List) dataMap.get("listOfOpd2"));
		 * 
		 * } if (dataMap.get("listOfOpd1") != null) { map.put("listOfOpd1",
		 * (List) dataMap.get("listOfOpd1"));
		 * 
		 * } if (dataMap.get("deptList") != null) { map.put("deptList",
		 * (List<MasDepartment>) dataMap.get("deptList"));
		 * 
		 * }
		 */
		if (dataMap.get("templateList") != null) {
			map.put("templateList",
					(List<OpdTemplate>) dataMap.get("templateList"));
		}
		if (dataMap.get("frequencyList") != null) {
			map.put("frequencyList",
					(List<MasFrequency>) dataMap.get("frequencyList"));
		}

		// String jsp = "";

		String jsp = "opd_viewPreviousVisit.jsp";
		// String includedJsp = "updateOpdMain.jsp";
		map.put("token", token);
		map.put("includedJsp", jsp);
		// jsp = "updateOpd.jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings("unused")
	public ModelAndView finalUpdateOpdPatientDetails(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> mapForDS = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		int hinId = Integer.parseInt(request.getParameter("hinId"));
		int departmentId = Integer.parseInt(request
				.getParameter("departmentId"));
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		int hospitalId = Integer.parseInt(request.getParameter("hospitalId"));
		// details captured for opd patient details table
		int empId = 0;
		if (request.getParameter("empId") != null
				&& !request.getParameter("empId").equals("")) {
			empId = Integer.parseInt(request.getParameter("empId"));
		}

		int height = 0;
		int weight = 0;
		int pulse = 0;
		int days = 0;
		String bp = null;
		String temperature = null;
		String plan = null;
		String initialDiagnosis = null;
		String nextVisitDate = null;
		String afmsDescription = null;
		String userName = null;
		String flag = null;
		boolean submitData = false;
		String urlDept = "";
		String departmentName = "";
		Users user = (Users) session.getAttribute("users");
		Integer userId = user.getEmployee().getId();

		if (!request.getParameter("flag").equals("")) {
			flag = request.getParameter("flag");
		}
		if (!request.getParameter("height").equals("")) {
			height = Integer.parseInt(request.getParameter("height"));
		}
		if (!request.getParameter("weight").equals("")) {
			weight = Integer.parseInt(request.getParameter("weight"));
		}
		if (!request.getParameter("pulse").equals("")) {
			pulse = Integer.parseInt(request.getParameter("pulse"));
		}
		if (request.getParameter("bp") != null
				|| request.getParameter("bp") != "") {
			bp = request.getParameter("bp");
		}
		if (request.getParameter("temperature") != null
				|| request.getParameter("temperature") != "") {
			temperature = request.getParameter("temperature");
		}
		if (!request.getParameter("plan").equals("")) {
			plan = request.getParameter("plan");
		}
		if (!request.getParameter("initialDiagnosis").equals("")) {
			initialDiagnosis = request.getParameter("initialDiagnosis");
		}
		if (request.getParameter("relation").equalsIgnoreCase("self")) {
			if (!request.getParameter("days").equals("")) {
				days = Integer.parseInt(request.getParameter("days"));
			}
		}
		if (!request.getParameter("nextVisitDate").equals("")) {
			nextVisitDate = request.getParameter("nextVisitDate");
		}
		if (!request.getParameter("afmsDescription").equals("")) {
			afmsDescription = request.getParameter("afmsDescription");
		}
		if (!request.getParameter("userName").equals("")) {
			userName = request.getParameter("userName");
		}

		String presentComplain = "";
		String presentIllness = "";
		String pastHistory = "";
		String personalHistory = "";
		String otherDetails = "";
		String familyHistory = "";
		String onExamination = "";
		int opdPatientDetailsId = 0;
		int opdPatientHistoryId = 0;
		int patientPrescriptionHeaderId = 0;
		int patientInvestigationHeaderId = 0;

		if (request.getParameter("presentComplain") != null) {
			presentComplain = request.getParameter("presentComplain");
		}
		if (request.getParameter("presentIllness") != null) {
			presentIllness = request.getParameter("presentIllness");
		}
		if (request.getParameter("pastHistory") != null) {
			pastHistory = request.getParameter("pastHistory");
		}

		if (request.getParameter("personalHistory") != null) {
			personalHistory = request.getParameter("personalHistory");
		}
		if (request.getParameter("OtherDetails") != null) {
			otherDetails = request.getParameter("OtherDetails");
		}

		if (request.getParameter("opdPatientDetailsId") != null
				&& !request.getParameter("opdPatientDetailsId").equals("")
				&& !request.getParameter("opdPatientDetailsId").equals("null")) {
			opdPatientDetailsId = Integer.parseInt(request
					.getParameter("opdPatientDetailsId"));
			mapForDS.put("opdPatientDetailsId", opdPatientDetailsId);
		}
		if (request.getParameter("opdPatientHistoryId") != null
				&& !request.getParameter("opdPatientHistoryId").equals("")
				&& !request.getParameter("opdPatientHistoryId").equals("null")) {
			opdPatientHistoryId = Integer.parseInt(request
					.getParameter("opdPatientHistoryId"));
			mapForDS.put("opdPatientHistoryId", opdPatientHistoryId);
		}
		if (request.getParameter("patientPrescriptionHeaderId") != null
				&& !request.getParameter("patientPrescriptionHeaderId").equals(
						"null")
				&& !request.getParameter("patientPrescriptionHeaderId").equals(
						"")) {
			patientPrescriptionHeaderId = Integer.parseInt(request
					.getParameter("patientPrescriptionHeaderId"));

			mapForDS.put("patientPrescriptionHeaderId",
					patientPrescriptionHeaderId);
		}
		if (request.getParameter("patientInvestigationHeaderId") != null
				&& !request.getParameter("patientInvestigationHeaderId")
						.equals("null")
				&& !request.getParameter("patientInvestigationHeaderId")
						.equals("")) {
			patientInvestigationHeaderId = Integer.parseInt(request
					.getParameter("patientInvestigationHeaderId"));

			mapForDS.put("patientInvestigationHeaderId",
					patientInvestigationHeaderId);
		}

		if (request.getParameter("familyHistory") != null) {
			familyHistory = request.getParameter("familyHistory");
		}
		if (!request.getParameter("onExamination").equals("")) {
			onExamination = request.getParameter("onExamination");
		}

		String consultationDate = request.getParameter("consultationDate");
		String consultationTime = request.getParameter("consultationTime");

		// details captured for patient prescription header and detail table
		List<String> pvmsNoList = new ArrayList<String>();
		List<Integer> frequencyList = new ArrayList<Integer>();
		List<String> nomenclatureList = new ArrayList<String>();
		List<String> dosageList = new ArrayList<String>();
		List<String> remarksList = new ArrayList<String>();
		List<String> typeLeftRightList = new ArrayList<String>();
		List<Integer> totalList = new ArrayList<Integer>();
		List<Integer> noOfDaysList = new ArrayList<Integer>();
		String[] diagnosisIdAray = null;
		String[] dgSampleCollectionDetailsIdArray = new String[0];
		String[] dgSampleCollectionHeaderIdArray = new String[0];

		String[] referredDoctarsId = null;
		String referredDoctars = "";
		if (request.getParameterValues(DIAGNOSIS_ID) != null) {
			diagnosisIdAray = (String[]) request
					.getParameterValues(DIAGNOSIS_ID);
		}
		if (request.getParameterValues("dgSampleCollectionDetailsId") != null) {
			dgSampleCollectionDetailsIdArray = (String[]) request
					.getParameterValues("dgSampleCollectionDetailsId");
		}
		if (request.getParameterValues("dgSampleCollectionHeaderId") != null) {
			dgSampleCollectionHeaderIdArray = (String[]) request
					.getParameterValues("dgSampleCollectionHeaderId");
		}

		if (request.getParameterValues("referredDoctarsId") != null) {
			referredDoctarsId = (String[]) request
					.getParameterValues("referredDoctarsId");

			for (int i = 0; i < referredDoctarsId.length; i++) {
				if (i == 0)
					referredDoctars = referredDoctarsId[i];
				else
					referredDoctars = referredDoctars + ","
							+ referredDoctarsId[i];
			}
		}
		String referredDept = "";
		String[] referredToDeptArray = null;
		if (request.getParameterValues("referredDepartmentId") != null) {
			referredToDeptArray = (String[]) request
					.getParameterValues("referredDepartmentId");
			for (int i = 0; i < referredToDeptArray.length; i++) {
				if (i == 0)
					referredDept = referredToDeptArray[i];
				else
					referredDept = referredDept + "," + referredToDeptArray[i];
			}
		}

		int hdb = 1;
		if (Integer.parseInt(request.getParameter("hdb")) != 1) {
			hdb = Integer.parseInt(request.getParameter("hdb"));

		}
		String[] pvmsArr = new String[hdb];
		int j = 1;
		Box box = HMSUtil.getBox(request);
		for (int i = 0; i <= hdb; i++) {
			if (request.getParameter("nomenclature" + j) != null
					&& !request.getParameter("nomenclature" + j).equals("")) {
				String nomenclature = request.getParameter("nomenclature" + j);
				String nomen = request.getParameter("nomenclature" + j)
						.substring(
								0,
								request.getParameter("nomenclature" + j)
										.indexOf("["));
				int frequencyId = Integer.parseInt(request
						.getParameter("frequency" + j));
				int total = Integer.parseInt(request.getParameter("total" + j));
				String typeLeftRight = request
						.getParameter("typeLeftRight" + j);
				int noOfDays = Integer.parseInt(request.getParameter("noOfDays"
						+ j));
				String dosage = request.getParameter("dosage" + j);

				String remarks = request.getParameter("remarks" + j);
				int index1 = nomenclature.lastIndexOf("[");
				int index2 = nomenclature.lastIndexOf("]");
				index1++;
				pvmsArr[i] = nomenclature.substring(index1, index2);

				pvmsNoList.add(pvmsArr[i]);
				nomenclatureList.add(nomen);
				frequencyList.add(frequencyId);
				dosageList.add(dosage);
				remarksList.add(remarks);
				totalList.add(total);
				typeLeftRightList.add(typeLeftRight);
				noOfDaysList.add(noOfDays);
			}
			j++;
		}
		// -------------------fetching values for Investigation
		// template---------------
		List<String> chargeCodeIdList = new ArrayList<String>();
		List<Integer> quantityList = new ArrayList<Integer>();
		List<String> clinicalList = new ArrayList<String>();

		int hiddenValue = 1;
		if (request.getParameter("hiddenValue") != null
				&& !request.getParameter("hiddenValue").equals("")
				&& Integer.parseInt(request.getParameter("hiddenValue")) != 1) {
			hiddenValue = Integer.parseInt(request.getParameter("hiddenValue"));
			// System.out.println("hiddenValue" + hiddenValue);
		}
		int temp = 1;
		String[] chargeCodeIdArr = new String[hiddenValue];
		for (int i = 0; i <= hiddenValue; i++) {
			if (request.getParameter("chargeCodeName" + temp) != null
					&& !request.getParameter("chargeCodeName" + temp)
							.equals("")) {

				String chargeCodeNameWithId = request
						.getParameter("chargeCodeName" + temp);
				// System.out.println("chargeCodeNameWithId" +
				// chargeCodeNameWithId);
				// int qty=Integer.parseInt(request.getParameter("qty"+temp));
				String clinicalNotes = request.getParameter("clinicalNotes"
						+ temp);
				int index1 = chargeCodeNameWithId.lastIndexOf("[");
				int index2 = chargeCodeNameWithId.lastIndexOf("]");
				index1++;

				chargeCodeIdArr[i] = chargeCodeNameWithId.substring(index1,
						index2);
				if (!chargeCodeIdList.contains(chargeCodeIdArr[i])) {
					// System.out.println("coubnt" + i);
					chargeCodeIdList.add(chargeCodeIdArr[i]);
					// quantityList.add(qty);
					clinicalList.add(clinicalNotes);
				}
			}
			temp++;
		}

		mapForDS.put("pvmsNoList", pvmsNoList);
		mapForDS.put("frequencyList", frequencyList);
		mapForDS.put("nomenclatureList", nomenclatureList);
		mapForDS.put("dosageList", dosageList);
		mapForDS.put("remarksList", remarksList);
		mapForDS.put("typeLeftRightList", typeLeftRightList);
		mapForDS.put("totalList", totalList);
		mapForDS.put("noOfDaysList", noOfDaysList);
		mapForDS.put("hinId", hinId);
		mapForDS.put("departmentId", departmentId);
		mapForDS.put("otherDetails", otherDetails);
		mapForDS.put("visitId", visitId);
		mapForDS.put("hospitalId", hospitalId);
		mapForDS.put("userName", userName);
		mapForDS.put("referredDoctars", referredDoctars);
		// ----------data for investigation template------
		mapForDS.put("userId", userId);
		mapForDS.put("chargeCodeIdList", chargeCodeIdList);
		mapForDS.put("quantityList", quantityList);
		mapForDS.put("clinicalList", clinicalList);

		// ------------data for opd patient details----------
		mapForDS.put("empId", empId);
		mapForDS.put("height", height);
		mapForDS.put("weight", weight);
		mapForDS.put("pulse", pulse);
		mapForDS.put("bp", bp);
		mapForDS.put("consultationDate", consultationDate);
		mapForDS.put("consultationTime", consultationTime);
		mapForDS.put("temperature", temperature);
		mapForDS.put("afmsDescription", afmsDescription);
		mapForDS.put("plan", plan);
		mapForDS.put("initialDiagnosis", initialDiagnosis);
		mapForDS.put("referredDept", referredDept);
		mapForDS.put("nextVisitDate", nextVisitDate);

		mapForDS.put("presentComplain", presentComplain);
		mapForDS.put("presentIllness", presentIllness);
		mapForDS.put("pastHistory", pastHistory);
		mapForDS.put("personalHistory", personalHistory);
		mapForDS.put("familyHistory", familyHistory);
		mapForDS.put("onExamination", onExamination);

		// mapForDS.put("remaks", remaks);
		// --------- data for diagnosis------------
		mapForDS.put("diagnosisIdAray", diagnosisIdAray);
		mapForDS.put("dgSampleCollectionDetailsIdArray",
				dgSampleCollectionDetailsIdArray);
		mapForDS.put("dgSampleCollectionHeaderIdArray",
				dgSampleCollectionHeaderIdArray);
		mapForDS.put("deptId", departmentId);
		String orderSeqNo = "";
		orderSeqNo = labHandlerService.generateOrderNumber(hospitalId);
		mapForDS.put("orderSeqNo", orderSeqNo);
		boolean bool = opdHandlerService.finalUpdateOpdPatientDetails(mapForDS);
		String message = null;
		if (bool) {
			// map=opdHandlerService.getWaitingPatientList(departmentId);
			message = "Patient Details Submitted successfully.";
		} else {
			// map=opdHandlerService.getWaitingPatientList(departmentId);
			message = "Error Occurred in Submitting Details.";
		}
		if (bool) {
			if (flag.equals("opth")) {
				map = opdHandlerService.getPatientDetails(visitId);
				jsp = OPD_OPHTHALMOLOGY_JSP;

				map = opdHandlerService.searchOPHTForUpdateJsp(visitId);
				if (map.get("opdophList") != null) {
					List<OpdOphthalmology> opdophList = (List<OpdOphthalmology>) map
							.get("opdophList");
					if (opdophList.size() > 0) {
						jsp = OPD_OPHTHALMOLOGY_UPDATE_JSP;
					} else {
						jsp = OPD_OPHTHALMOLOGY_JSP;
					}
				}
			}
			if (flag.equals("ent")) {
				map = opdHandlerService.searchENTForUpdateJsp(visitId);
				if (map.get("opdEntList") != null) {
					List<OpdEnt> opdEntList = (List<OpdEnt>) map
							.get("opdEntList");
					if (opdEntList.size() > 0) {
						jsp = ENT_UPDATE_JSP;
					} else {
						jsp = ENT_JSP;
					}
				}
			}
			if (flag.equals("oncosurgeryCaseSheet")) {
				map = opdHandlerService.showOncosurgeryCaseSheetJsp(visitId);
				jsp = ONCOSURGERY_CASE_SHEET_JSP;
			}

			if (flag.equals("oncosurgery")) {
				map = opdHandlerService.showOncosurgeryJsp(visitId);
				jsp = ONCOSURGERY_JSP;
			}
			if (flag.equals("urologyCaseSheet")) {
				map = opdHandlerService.showUrologyCaseSheetJsp(visitId);
				if (map.get("oncosurgeryCaseSheetList") != null) {
					List<OpdUrology> oncosurgeryCaseSheetList = (List<OpdUrology>) map
							.get("oncosurgeryCaseSheetList");
					if (oncosurgeryCaseSheetList.size() > 0) {
						jsp = UROLOGY_CASE_SHEET_UPDATE_JSP;
					} else {
						jsp = UROLOGY_CASE_SHEET_JSP;
					}
				}
			}
			if (flag.equals("obg")) {
				map = opdHandlerService.showOBGJsp(visitId);
				jsp = OBG_JSP;
			}
			if (flag.equals("pediatric")) {
				// map=opdHandlerService.getPediatricCaseSheet(visitId);
				/*
				 * pass height and weight values in pediatricCaseSheet from
				 * opdMain
				 */
				map = opdHandlerService.searchPediatricForUpdate(visitId);
				if (map.get("opdCaseSheetList") != null) {
					List<OpdCaseSheet> opdCaseSheetList = (List<OpdCaseSheet>) map
							.get("opdCaseSheetList");
					if (opdCaseSheetList.size() > 0) {
						jsp = PEDIATRIC_CASE_SHEET_JSP_UPDATE_JSP;
					} else {
						jsp = PEDIATRIC_CASE_SHEET_JSP;
					}
				}
				map.put("height", height);
				map.put("weight", weight);
			}
			if (flag.equals("cardiology")) {
				map = opdHandlerService.getCardiologyDepartmentDetails(visitId);
				if (map.get("opdCardiologyDepartmentDetailsList") != null) {
					List<OpdCardiologyDepartmentDetails> opdCardiologyDepartmentDetailsList = (List<OpdCardiologyDepartmentDetails>) map
							.get("opdCardiologyDepartmentDetailsList");
					if (opdCardiologyDepartmentDetailsList.size() > 0) {
						jsp = CARDIOLOGY_DEPARTMENT_DETAILS_UPDATE_JSP;
					} else {
						jsp = CARDIOLOGY_DEPARTMENT_DETAILS_JSP;
					}
				}
				title = "Cardiology Department Details List";
			}
			if (flag.equals("gastroEndoscopy")) {
				map = opdHandlerService.getGastroEnterologyEndoscopy(visitId);
				jsp = GASTRO_ENTEROLOGY_ENDOSCOPY_JSP;
				title = "Gastro-Enterology Endoscopy List";
			}
			if (flag.equals("gastroColonoscopy")) {
				map = opdHandlerService.getGastroEnterologyColonoscopy(visitId);
				jsp = GASTRO_ENTEROLOGY_COLONOSCOPY_JSP;
			}
			if (flag.equals("antenatal")) {
				map = opdHandlerService.getAntenatalCard(visitId);
				jsp = ANTENATAL_CARD_JSP;
			}
		}
		//
		// departmentName=opdHandlerService.getDepartmentNameFromId(departmentId);
		// //System.out.println("deptment id :"+departmentId);
		// mapForDS.put("deptId",departmentId );
		// if(flag.equals("opd")){
		// map=opdHandlerService.getWaitingPatientList(mapForDS);
		// message="Patient Details Submitted.";
		// jsp = OPD_WAITING;
		// submitData = true;
		// if(departmentName.equalsIgnoreCase("Opthalmology-OPD")){
		// urlDept = "opd?method=showOpdOphthamologyJsp&visitId="+visitId;
		// }
		// if(departmentName.equalsIgnoreCase("ENT-OPD")){
		// urlDept = "opd?method=showEntJsp&visitId="+visitId;
		// }
		// if(departmentName.equalsIgnoreCase("Obstretrics & Gynecology-OPD")){
		// urlDept = "opd?method=showOBGONEJsp&visitId="+visitId;
		// }
		// if(departmentName.equalsIgnoreCase("Pediatrics-OPD")){
		// urlDept = "opd?method=showPediatricCaseSheetJsp&visitId="+visitId;
		// }
		//
		// if(departmentName.equalsIgnoreCase("Cardiology-OPD")){
		// urlDept =
		// "opd?method=showCardiologyDepartmentDetailsJsp&visitId="+visitId;
		// }
		//
		// if(departmentName.equalsIgnoreCase("Antenatal Card-OPD")){
		// urlDept = "opd?method=showAntenatalCardJsp&visitId="+visitId;
		// }
		//
		// if(departmentName.equalsIgnoreCase("Gastro-enterology-OPD")){
		// urlDept =
		// "opd?method=showGastroEnterologyEndoscopyJsp&visitId="+visitId;
		// }
		//
		// if(departmentName.equalsIgnoreCase("Gastro-Colonology-OPD")){
		// urlDept =
		// "opd?method=showGastroEnterologyColonoscopyJsp&visitId="+visitId;
		// }
		//
		// if(departmentName.equalsIgnoreCase("Oncology-OPD")){
		// urlDept = "opd?method=showOncosurgeryCaseSheetJsp&visitId="+visitId;
		// }
		//
		//
		// if(departmentName.equalsIgnoreCase("Urology-OPD")){
		// urlDept = "opd?method=showUrologyCaseSheetJsp&visitId="+visitId;
		// }
		//
		// if(departmentName.equalsIgnoreCase("Onco-Surgery-OPD")){
		// urlDept = "opd?method=showOncosurgeryJsp&visitId="+visitId;
		// }
		//
		// }
		//
		// }else{
		// map=opdHandlerService.getWaitingPatientList(mapForDS);
		// message="Error Occurred in Submitting Details.";
		// jsp = OPD_WAITING_LIST_JSP;
		// }
		//
		if (flag.equals("opd")) {
			jsp = "updateOpd";
		}
		jsp += ".jsp";

		map.put("deptId", departmentId);

		map.put("message", message);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView responseForDoctarsList(HttpServletRequest request,
			HttpServletResponse response) {
		String a[];
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		if (request.getParameterValues("referredDepartmentId") != null) {
			a = request.getParameterValues("referredDepartmentId");
			// System.out.println(a.length);
			mapForDS.put("departmentArray", a);
		}
		try {
			map = (Map<String, Object>) opdHandlerService
					.responseForDoctarsList(mapForDS);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "responseForDoctars";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView showCreatePrescriptionTempate(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		map = opdHandlerService.showOpdFrequencyJsp();
		jsp = "prescriptionTemplate";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView updateOpdOpht(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		box.put("departmentId", departmentId);
		box.put("hospitalId", hospitalId);
		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		box.put("visitId", visitId);
		box.put("userId", userId);
		String message = "";

		map = opdHandlerService.updateOpdOpht(box);
		saved = (Boolean) map.get("saved");
		if (saved) {
			message = "OPD Ophthalmology has been updated Successfully.Do you want to print ?";
			jsp = "messageUpdateOpdOpht";
		} else {
			message = "OPD Ophthalmology has not been done Successfully..";
			jsp = "messageUpdateSomeError";
		}
		/*
		 * try{ map = opdHandlerService.showENTJsp(visitId); }catch (Exception
		 * e) { e.printStackTrace(); }
		 */
		jsp += ".jsp";
		title = "OPD Ophthalmology List";
		map.put("visitId", visitId);
		map.put("deptId", departmentId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView addPrescriptionTemplate(HttpServletRequest request,
			HttpServletResponse response) {
		int hdb = 1;
		HttpSession session = request.getSession();
		List pvmsNoList = new ArrayList();
		List frequencyList = new ArrayList();
		List dosageList = new ArrayList();
		List totalList = new ArrayList();
		List typeLeftRightList = new ArrayList();
		List noOfDaysList = new ArrayList();
	/*	List<Integer> instuctionList = new ArrayList<Integer>();*/
		List<String> instuctionList = new ArrayList<String>();
		String changedBy = "";
		String pojoPropertyCode = "";
		String templateName = "";
		Map<String, Object> map = new HashMap<String, Object>();
		OpdTemplate opdTemplate = new OpdTemplate();

		Map<String, Object> listMap = new HashMap<String, Object>();
		Map<String, Object> generalMap = new HashMap<String, Object>();
		Date currentDate = new Date();
		String currentTime = "";

		int docId = 0;
		if (session.getAttribute("empId") != null) {
			docId = (Integer) session.getAttribute("empId");

		}

		try {
			if (request.getParameter(CODE) != null) {
				pojoPropertyCode = request.getParameter(CODE);
				// System.out.println("pojoPropertyCode" + pojoPropertyCode);

			}
			if (request.getParameter(SEARCH_NAME) != null) {
				templateName = request.getParameter(SEARCH_NAME);
			}
			int departmentId = (Integer) session.getAttribute("deptId");

			// //System.out.println("hdb value"+request.getParameter("hdb"));

			hdb = Integer.parseInt(request.getParameter("hdb"));

			String[] pvmsArr = new String[hdb];
			int j = 1;
			int total = 0;
			for (int i = 0; i < hdb; i++) {

				if (request.getParameter("nomenclature" + j) != null
						&& !request.getParameter("nomenclature" + j).equals("")) {

					String nomenclature = request.getParameter("nomenclature"
							+ j);

					int frequencyId = Integer.parseInt(request
							.getParameter("frequency" + j));
				/*	int instructionId = Integer.parseInt(request
							.getParameter("instruction" + j));
					 total = Integer.parseInt(request.getParameter("total"
					+ j));*/
					String instruction = request.getParameter("instruction" + j);
							
					 total = Integer.parseInt(request.getParameter("total"
					+ j));
					String typeLeftRight = request.getParameter("typeLeftRight"
							+ j);
					int noOfDays = Integer.parseInt(request
							.getParameter("noOfDays" + j));
					String dosage = request.getParameter("dosage" + j);

					instuctionList.add(instruction);
					int firstIndex = nomenclature.lastIndexOf("[");
					int lastIndex = nomenclature.lastIndexOf("]");
					String pvmsNo = nomenclature.substring(firstIndex + 1,
							lastIndex);
					// System.out.println("pvmsno------------->" + pvmsNo);
					// System.out.println("instruction id -->" + instructionId);

					pvmsNoList.add(pvmsNo);
					frequencyList.add(frequencyId);
					dosageList.add(dosage);
					totalList.add(total);
					typeLeftRightList.add(typeLeftRight);
					noOfDaysList.add(noOfDays);
				}
				j++;
			}
			if (request.getParameter(CHANGED_BY) != null
					&& !(request.getParameter(CHANGED_BY).equals(""))) {
				changedBy = request.getParameter(CHANGED_BY);
			}
			if (request.getParameter(CHANGED_DATE) != null
					&& !(request.getParameter(CHANGED_DATE).equals(""))) {
				currentDate = HMSUtil.dateFormatterDDMMYYYY(request
						.getParameter(CHANGED_DATE));
			}
			if (request.getParameter(CHANGED_TIME) != null
					&& !(request.getParameter(CHANGED_TIME).equals(""))) {
				currentTime = request.getParameter(CHANGED_TIME);
			}
			if (request.getParameter("title") != null) {
				title = request.getParameter("title");
			}

			boolean successfullyAdded = false;

			map.put("instuctionList", instuctionList);
			map.put("pvmsNoList", pvmsNoList);
			map.put("frequencyList", frequencyList);
			map.put("dosageList", dosageList);
			map.put("totalList", totalList);
			map.put("typeLeftRightList", typeLeftRightList);
			map.put("noOfDaysList", noOfDaysList);
			// map.put("", value)

			map.put("departmentId", departmentId);

			map.put("templateName", templateName);
			map.put("changedBy", changedBy);
			map.put("currentDate", currentDate);
			map.put("currentTime", currentTime);
			map.put("pojoPropertyCode", pojoPropertyCode);
			opdTemplate.setTemplateCode(pojoPropertyCode);
			// System.out.println("pojoPropertyCode" + pojoPropertyCode);
			opdTemplate.setTemplateName(templateName);
			// System.out.println("templateName" + templateName);
			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);
			// System.out.println("departmentId" + departmentId);
			opdTemplate.setDepartment(masDepartment);

			int hospitalId = (Integer) session.getAttribute("hospitalId");

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			opdTemplate.setHospital(masHospital);

			MasEmployee masEmployee = new MasEmployee();
			masEmployee.setId(docId);
			opdTemplate.setDoctor(masEmployee);

			opdTemplate.setTemplateType("P");
			opdTemplate.setStatus("y");
			opdTemplate.setLastChgBy(changedBy);
			opdTemplate.setLastChgDate(currentDate);
			opdTemplate.setLastChgTime(currentTime);
			map.put("opdTemplate", opdTemplate);
			map.put("hospitalId", hospitalId);
			map.put("docId", docId);
			successfullyAdded = opdHandlerService.addPrescriptionTemplate(map);

			if (successfullyAdded) {
				message = "Record Added Successfully !!";
			} else {
				message = "Record Already Exist Try Again !!";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		try {
			map = opdHandlerService.showOpdFrequencyJsp();

		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "prescriptionTemplate";
		title = "Add OPD Template";
		jsp += ".jsp";

		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		return new ModelAndView("prescriptionTemplate", "map", map);
	}

	public ModelAndView showCreateInvestigationTemplate(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		map = opdHandlerService.showOpdFrequencyJsp();
		jsp = "opdInvestigationTemplate";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView addInvestigationTemplate(HttpServletRequest request,
			HttpServletResponse response) {
		int hdb = 1;
		List<Integer> chargeCodeCodeList = new ArrayList<Integer>();
		HttpSession session = request.getSession();
		// List qtyList = new ArrayList();
		List dosageList = new ArrayList();
		List totalList = new ArrayList();
		List clinicalList = new ArrayList();
		List noOfDaysList = new ArrayList();
		List instuctionList = new ArrayList();
		String changedBy = "";
		String pojoPropertyCode = "";
		String templateName = "";
		Map<String, Object> map = new HashMap<String, Object>();
		OpdTemplate opdTemplate = new OpdTemplate();

		Map<String, Object> listMap = new HashMap<String, Object>();
		Map<String, Object> generalMap = new HashMap<String, Object>();
		Date currentDate = new Date();
		

		int docId = 0;

		if (session.getAttribute("empId") != null) {
			docId = (Integer) session.getAttribute("empId");

		}

		String currentTime = "";
		try {
			if (request.getParameter("code") != null) {
				pojoPropertyCode = request.getParameter("code");
				// System.out.println("pojoPropertyCode" + pojoPropertyCode);

			}
			if (request.getParameter(SEARCH_NAME) != null) {
				templateName = request.getParameter(SEARCH_NAME);
				// System.out.println("templateName " + templateName);
			}

			int departmentId = (Integer) session.getAttribute("deptId");

		

			hdb = Integer.parseInt(request.getParameter("hdb"));
			String[] pvmsArr = new String[hdb];
			int j = 1;
			for (int i = 0; i < hdb; i++) {

				if (request.getParameter("chargeCodeName" + j) != null
						&& !request.getParameter("chargeCodeName" + j).equals(
								"")) {

					String chargeCodeCode = request
							.getParameter("chargeCodeCode" + j);
					// int qty = Integer.parseInt(request.getParameter("qty" +
					// j));

					// String clinical = request.getParameter("clinical" + j);

					chargeCodeCodeList.add(Integer.parseInt(chargeCodeCode));

					// qtyList.add(qty);
					// clinicalList.add(clinical);

				}
				j++;
			}
			if (request.getParameter(CHANGED_BY) != null
					&& !(request.getParameter(CHANGED_BY).equals(""))) {
				changedBy = request.getParameter(CHANGED_BY);
			}
			if (request.getParameter(CHANGED_DATE) != null
					&& !(request.getParameter(CHANGED_DATE).equals(""))) {
				currentDate = HMSUtil.dateFormatterDDMMYYYY(request
						.getParameter(CHANGED_DATE));
			}
			if (request.getParameter(CHANGED_TIME) != null
					&& !(request.getParameter(CHANGED_TIME).equals(""))) {
				currentTime = request.getParameter(CHANGED_TIME);
			}
			if (request.getParameter("title") != null) {
				title = request.getParameter("title");
			}

			boolean successfullyAdded = false;

			map.put("chargeCodeCodeList", chargeCodeCodeList);
			// map.put("qtyList", qtyList);
			map.put("clinicalList", clinicalList);
			map.put("departmentId", departmentId);
			map.put("docId", docId);
			map.put("templateName", templateName);
			map.put("changedBy", changedBy);
			map.put("currentDate", currentDate);
			map.put("currentTime", currentTime);
			map.put("pojoPropertyCode", pojoPropertyCode);

			opdTemplate.setTemplateCode(pojoPropertyCode);
			// System.out.println("pojoPropertyCode" + pojoPropertyCode);
			opdTemplate.setTemplateName(templateName);
			// System.out.println("templateName" + templateName);
			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);
			// System.out.println("departmentId" + departmentId);
			opdTemplate.setDepartment(masDepartment);

			int hospitalId = (Integer) session.getAttribute("hospitalId");
			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			opdTemplate.setHospital(masHospital);

			MasEmployee masEmployee = new MasEmployee();
			masEmployee.setId(docId);
			opdTemplate.setDoctor(masEmployee);

			opdTemplate.setTemplateType("I");
			opdTemplate.setStatus("y");
			opdTemplate.setLastChgBy(changedBy);
			opdTemplate.setLastChgDate(currentDate);
			opdTemplate.setLastChgTime(currentTime);
			map.put("opdTemplate", opdTemplate);
			map.put("hospitalId", hospitalId);
			successfullyAdded = opdHandlerService.addInvestigationTemplate(map);
		
			if (successfullyAdded) {
				message = "Record Added Successfully !!";
			} else {
				message = "Record already exist !!";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		try {
			map = opdHandlerService.showOpdFrequencyJsp();

		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "opdInvestigationTemplate";
		title = "Add OPD Template";
		// jsp += ".jsp";

		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getListForTreatment(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> mapForDs = new HashMap<String, Object>();
		session = request.getSession();

		int deptId = 0;
		int docId =0;
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
			mapForDs.put("deptId", deptId);
		}
		if (session.getAttribute("empId") != null) { docId =
				  (Integer)session.getAttribute("empId"); 
		mapForDs.put("docId",
				  docId);
		}
		
		
		int hospitalId = 0;
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			mapForDs.put("hospitalId", hospitalId);
		}

		try {
			String flag = "";
			map = opdHandlerService.getListForTreatment(mapForDs);
			if (request.getParameter("flag") != null) {
				flag = request.getParameter("flag");
			}
			map.put("flag", flag);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "responseForTreatment";
		title = "Add OPD Template";

		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		return new ModelAndView(jsp, "map", map);
	}

	/**
	 * -------------------------Start of methods for OPD Details Update By
	 * Naresh----------------------------
	 */
	public ModelAndView getPatientDetailsForOPDOrderBooking(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> detailsMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		String deptName = "";
		int visitNo = 0;
		int visitId = 0;
		if (session.getAttribute("deptName") != null) {
			deptName = (String) session.getAttribute("deptName");
		}
		if (request.getParameter("visitId") != null) {
			visitId = Integer.parseInt(request.getParameter("visitId"));
			map.put("visitId", visitId);
		}
		if (visitId != 0) {
			map = opdHandlerService.showOrderBookingForInvestigationJsp(map);
			String orderSeqNo = "";
			orderSeqNo = opdHandlerService.getOrderSeqForDisplay("ON");
			if (orderSeqNo != null) {
				map.put("orderSeqNo", orderSeqNo);
			}
		}
		detailsMap = opdHandlerService.getMainAndSubCharge();
		String jsp = INVESTIGATION_ORDER_BOOKING_OPD + ".jsp";

		// jsp = OP_ORDER_BOOKING_SEARCH_JSP+".jsp";
		map.put("deptName", deptName);
		// map.put("includedJsp", includedJsp);
		map.put("detailsMap", detailsMap);
		map.put("message", message);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView submitOrderBookingForInvestigation(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		Map<String, Object> returnMap = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		int chargeMainIdFromRequest = 0;
		int noOfRecords = 0;
		int inpatientId = 0;
		int placedBy = 0;
		int pageNo = 1;
		int hinId = 0;
		int visitId = 0;
		String provisionalDiag = "";
		String buttonFlag = "";
		String clinicalNote = "";
		String orderSeqNo = "";
		String orderStatus = "";
		String createdBy = "";
		String testType = "";
		String hinNo = "";
		String visitNo = "";
		String date = "";
		String time = "";
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");
		List chargeList = new ArrayList();
		List qtyList = new ArrayList();
		List mainChargeList = new ArrayList();
		List subChargeList = new ArrayList();
		@SuppressWarnings("unused")
		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);

		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
		}
		if (request.getParameter("dgOrderhdId") != null) {
			chargeMainIdFromRequest = Integer.parseInt(request
					.getParameter("dgOrderhdId"));
		}
		if (request.getParameter(HIN_NO) != null) {
			hinNo = request.getParameter(HIN_NO);
		}
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = request.getParameter(VISIT_NUMBER);
		}
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		if (!request.getParameter(INPATIENT_ID).equals("")) {
			inpatientId = Integer.parseInt(request.getParameter(INPATIENT_ID));
		}
		if (!request.getParameter(EMPLOYEE_ID).equals("0")) {
			placedBy = Integer.parseInt(request.getParameter(EMPLOYEE_ID));
		}
		if (request.getParameter(TEST_TYPE) != null
				&& !(request.getParameter(TEST_TYPE).equals(""))) {
			testType = request.getParameter(TEST_TYPE);
		}
		if (request.getParameter(CLINICAL_NOTE) != null
				&& !(request.getParameter(CLINICAL_NOTE).equals(""))) {
			clinicalNote = request.getParameter(CLINICAL_NOTE);
		}
		if (request.getParameter(CREATED_BY) != null
				&& !(request.getParameter(CREATED_BY).equals(""))) {
			createdBy = request.getParameter(CREATED_BY);
		}
		if (request.getParameter(PROVISIONAL_DIAG) != null
				&& !(request.getParameter(PROVISIONAL_DIAG).equals(""))) {
			provisionalDiag = request.getParameter(PROVISIONAL_DIAG);
		}
		if (request.getParameter(ORDER_STATUS) != null
				&& !(request.getParameter(ORDER_STATUS).equals(""))) {
			orderStatus = request.getParameter(ORDER_STATUS);
		}
		if (request.getParameter("buttonFlag") != null) {
			buttonFlag = request.getParameter("buttonFlag");
		}
		if (request.getParameter("pageNo") != null) {
			pageNo = Integer.parseInt(request.getParameter("pageNo"));
		}
		if (request.getParameter("counter") != null) {
			noOfRecords = Integer.parseInt(request.getParameter("counter"));
		}
		if (request.getParameter(ORDER_NO) != null) {
			orderSeqNo = request.getParameter(ORDER_NO);
		}
		if (session.getAttribute(LOGIN_NAME) != null) {
			userName = (String) session.getAttribute(LOGIN_NAME);
			infoMap.put("userName", userName);
		}
		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		DgOrderhd dgOrderhd = new DgOrderhd();
		if (pageNo == 1) {
			Patient patient = new Patient();
			patient.setId(hinId);
			dgOrderhd.setHin(patient);

			if (inpatientId != 0) {
				Inpatient inpatient = new Inpatient();
				inpatient.setId(inpatientId);
				dgOrderhd.setInpatient(inpatient);
			}

			if (departmentId != 0) {
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(departmentId);
				dgOrderhd.setDepartment(masDepartment);
			}
			if (visitId != 0) {
				Visit visit = new Visit();
				visit.setId(visitId);
				dgOrderhd.setVisit(visit);
			}
			if (hospitalId != 0) {
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				dgOrderhd.setHospital(masHospital);
			}
			if (placedBy != 0) {
				MasEmployee masEmployee = new MasEmployee();
				masEmployee.setId(placedBy);
				dgOrderhd.setPrescribedBy(masEmployee);
			}

			dgOrderhd.setOrderNo(orderSeqNo);
			String temp = opdHandlerService.generateOrderNumber(hospitalId);

			// String orderSeqNo = "";
			// orderSeqNo=labHandlerService.generateOrderNumber();
			// mapForDS.put("orderSeqNo",orderSeqNo);

			dgOrderhd.setProvisionalDiag(provisionalDiag);
			dgOrderhd.setTestType(testType);
			dgOrderhd.setOrderStatus(orderStatus);
			dgOrderhd.setClinicalNote(clinicalNote);
			dgOrderhd.setOrderDate(HMSUtil
					.convertStringTypeDateToDateType(date));
			dgOrderhd.setOrderTime(time);
			dgOrderhd.setCreatedby(createdBy);
			dgOrderhd.setCreatedon(HMSUtil
					.convertStringTypeDateToDateType(date));
			dgOrderhd.setLastChgTime(time);
			dgOrderhd.setLastChgBy(user);
			dgOrderhd.setPatientType("OP");
			dgOrderhd.setLabOrderStatus("LC");
			dgOrderhd.setOrderStatus("C");
			dgOrderhd.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(date));
			dgOrderhd.setLastChgTime(time);
			infoMap.put("dgOrderhd", dgOrderhd);
			infoMap.put("departmentId", departmentId);
			infoMap.put("hospitalId", hospitalId);
			infoMap.put("hinId", hinId);
			infoMap.put("orderSeqNo", orderSeqNo);
		}
		try {

			Vector quantity = box.getVector(QUANTITY);
			Vector charge_code_id = box.getVector(CHARGE_CODE_ID);
			Vector main_charge_id = box.getVector("mainCharge");
			Vector sub_charge_id = box.getVector("subCharge");
			String diagnosisNo = box.getString(DIAGNOSIS_NO);
			int counter = 0;

			for (int i = 0; i < charge_code_id.size(); i++) {
				// if (!charge_code_id.get(i).toString().equals(""))
				counter++;
			}
			noOfRecords = counter;
			for (int i = 0; i < noOfRecords; i++) {
				if (!charge_code_id.get(i).toString().equals("")) {
					chargeList.add(charge_code_id.get(i));
					mainChargeList.add(main_charge_id.get(i));
					subChargeList.add(sub_charge_id.get(i));
					// qtyList.add(quantity.get(i));
				}
			}
			if (infoMap.get("createdBy") != null) {
				createdBy = (String) infoMap.get("createdBy");
			}
			infoMap.put("chargeMainIdFromRequest", chargeMainIdFromRequest);
			infoMap.put("chargeList", chargeList);
			infoMap.put("qtyList", qtyList);
			infoMap.put("mainChargeList", mainChargeList);
			infoMap.put("subChargeList", subChargeList);
			infoMap.put("userId", userId);
			infoMap.put("createdBy", createdBy);
		} catch (Exception e) {
			e.printStackTrace();
		}
		infoMap.put("box", box);
		boolean success = false;
		String jsp = "";
		String message = "";
		int dgOrderhdId = 0;

		returnMap = opdHandlerService
				.submitOrderBookingForInvestigation(infoMap);

		// /////////////////////////////////////////
		Integer dgOrderhdIdAftersave = (Integer) returnMap.get("dgOrderhdId");
		Map<String, Object> parameterMap = new HashMap<String, Object>();
		infoMap.put("dgOrderhdIdAftersave", dgOrderhdIdAftersave);
		map = opdHandlerService.submitSampleCollection(infoMap);
		// /////////////////////////////////////////
		if (returnMap.get("success") != null) {
			success = (Boolean) returnMap.get("success");
		}
		if (returnMap.get("orderSeqNo") != null) {
			orderSeqNo = (String) returnMap.get("orderSeqNo");
		}
		if (success) {
			jsp = MSG_FOR_LAB_ORDER_BOOKING_OPD + ".jsp";
			pageNo++;
			message = "Order Booking has been done Successfully !!  Do you want to print ? ";
			map.put("visitNo", visitNo);
			map.put("visitId", visitId);
			map.put("hinNo", hinNo);
		} else {
			jsp = MSG_FOR_LAB_ORDER_BOOKING_OPD + ".jsp";
			message = " Try Again !!";
		}
		map.put("orderSeqNo", orderSeqNo);
		map.put("pageNo", pageNo);
		map.put("message", message);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showCreateVisitPhysiotherapy(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		map = opdHandlerService.getDetailsForVisit();
		String jsp = PATIENT_VISIT_SEARCH_PHYSIOTHERAPY_JSP;
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings("unchecked")
	public ModelAndView showVisitDetails(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> mapForDs = new HashMap<String, Object>();
		Map<String, Object> patientMap = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		String serviceNo = "";
		String hinNo = "";
		int serviceTypeId = 0;
		int rankId = 0;
		int unitId = 0;
		String serPersonFName = "";
		String serPersonMName = "";
		String serPersonLName = "";
		String patientFName = "";
		String patientMName = "";
		String patientLName = "";
		Date appointmentDate = new Date();
		int hinId = 0;
		try {
			if (request.getParameter(HIN_NO) != null
					&& !(request.getParameter(HIN_NO).equals(""))) {
				hinNo = request.getParameter(HIN_NO);
				mapForDs.put("hinNo", hinNo);
			}
			if (request.getParameter(SERVICE_NO) != null
					&& !(request.getParameter(SERVICE_NO).equals(""))) {
				serviceNo = request.getParameter(SERVICE_NO);
				mapForDs.put("serviceNo", serviceNo);
			}
			if (request.getParameter(SERVICE_TYPE_ID) != null
					&& !(request.getParameter(SERVICE_TYPE_ID).equals("0"))) {
				serviceTypeId = Integer.parseInt(request
						.getParameter(SERVICE_TYPE_ID));
				mapForDs.put("serviceTypeId", serviceTypeId);
			}
			if (request.getParameter(RANK_ID) != null
					&& !(request.getParameter(RANK_ID).equals("0"))) {
				rankId = Integer.parseInt(request.getParameter(RANK_ID));
				mapForDs.put("rankId", rankId);
			}
			if (request.getParameter(UNIT_ID) != null
					&& !(request.getParameter(UNIT_ID).equals("0"))) {
				unitId = Integer.parseInt(request.getParameter(UNIT_ID));
				mapForDs.put("unitId", unitId);
			}
			if (request.getParameter(S_FIRST_NAME) != null
					&& !(request.getParameter(S_FIRST_NAME).equals(""))) {
				serPersonFName = request.getParameter(S_FIRST_NAME);
				mapForDs.put("serPersonFName", serPersonFName);
			}
			if (request.getParameter(S_MIDDLE_NAME) != null
					&& !(request.getParameter(S_MIDDLE_NAME).equals(""))) {
				serPersonMName = request.getParameter(S_MIDDLE_NAME);
				mapForDs.put("serPersonMName", serPersonMName);
			}
			if (request.getParameter(S_LAST_NAME) != null
					&& !(request.getParameter(S_LAST_NAME).equals(""))) {
				serPersonLName = request.getParameter(S_LAST_NAME);
				mapForDs.put("serPersonLName", serPersonLName);
			}
			if (request.getParameter(P_FIRST_NAME) != null
					&& !(request.getParameter(P_FIRST_NAME).equals(""))) {
				patientFName = request.getParameter(P_FIRST_NAME);
				mapForDs.put("patientFName", patientFName);
			}
			if (request.getParameter(P_MIDDLE_NAME) != null
					&& !(request.getParameter(P_MIDDLE_NAME).equals(""))) {
				patientMName = request.getParameter(P_MIDDLE_NAME);
				mapForDs.put("patientMName", patientMName);
			}
			if (request.getParameter(P_LAST_NAME) != null
					&& !(request.getParameter(P_LAST_NAME).equals(""))) {
				patientLName = request.getParameter(P_LAST_NAME);
				mapForDs.put("patientLName", patientLName);
			}
			if (request.getParameter("hinId") != null) {
				hinId = Integer.parseInt(request.getParameter("hinId"));
				mapForDs.put("hinId", hinId);
			}
			if (request.getParameter("appointment") != null) {
				appointmentDate = HMSUtil
						.convertStringTypeDateToDateType(request
								.getParameter(APPOINTMENT_DATE));
				mapForDs.put("appointmentDate", appointmentDate);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		patientMap = opdHandlerService.getPatientDetails(mapForDs);
		int maxTokenNo = 0;
		int tokenNo = 0;
		int deptId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}

		maxTokenNo = opdHandlerService.getTokenNoForDepartment(deptId);
		tokenNo = maxTokenNo + 1;
		String jsp = "";
		List<Patient> patientList = new ArrayList<Patient>();
		List<PhysiotherapyVisitDetails> physiotherapyVisitDetailsList = new ArrayList<PhysiotherapyVisitDetails>();
		patientList = (List<Patient>) patientMap.get("patientList");
		physiotherapyVisitDetailsList = (List<PhysiotherapyVisitDetails>) patientMap
				.get("physiotherapyVisitDetailsList");

		if (hinId != 0) {
			detailsMap = opdHandlerService.getVisitDetails();
			if (patientList.size() > 0) {
				jsp = VISIT_BY_HIN_PHYSIOTHERAPY_JSP + ".jsp";
			} else if (physiotherapyVisitDetailsList.size() > 0) {
				jsp = PHYSIOTHERAPY_TREATMENT_UPDATE_JSP + ".jsp";
			}
		} else {
			map = opdHandlerService.getDetailsForVisit();
			jsp = PATIENT_VISIT_SEARCH_PHYSIOTHERAPY_JSP + ".jsp";
		}

		map.put("patientMap", patientMap);
		map.put("detailsMap", detailsMap);
		map.put("contentJsp", jsp);
		map.put("tokenNo", tokenNo);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView getTreatmentListAutoComplete(
			HttpServletRequest request, HttpServletResponse response) {

		HttpSession session = request.getSession();
		String itemNameField = "";
		String autoHint = "";

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}

			map.put("autoHint", autoHint);
			map = opdHandlerService.getTreatmentList(map);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "opd_responseForAutoCompleteTreatment";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView savePhysiotherapyVisitInformation(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		PhysiotherapyVisitDetails physiotherapyVisitDetails = new PhysiotherapyVisitDetails();
		Patient patient = new Patient();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		Map<String, Object> mapForDs = new HashMap<String, Object>();

		int hinId = 0;
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			patient.setId(hinId);
			physiotherapyVisitDetails.setHin(patient);
		}

		if (!(request.getParameter(REFERRED_DEPARTMENT).equals("0"))) {
			int departmentId = Integer.parseInt(request
					.getParameter(REFERRED_DEPARTMENT));
			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);
			physiotherapyVisitDetails.setReferredDepartment(masDepartment);
		}
		if (!(request.getParameter(CONSULTING_DOCTOR).equals("0"))) {
			int consultingDoctorId = Integer.parseInt(request
					.getParameter(CONSULTING_DOCTOR));
			MasEmployee masEmployee = new MasEmployee();
			masEmployee.setId(consultingDoctorId);
			physiotherapyVisitDetails.setReferredDoc(masEmployee);
		}
		if (request.getParameter(FROM_DATE) != null) {
			physiotherapyVisitDetails.setTreatmentStartDate(HMSUtil
					.convertStringTypeDateToDateType(request
							.getParameter(FROM_DATE)));
			mapForDs.put("startDate", HMSUtil
					.convertStringTypeDateToDateType(request
							.getParameter(FROM_DATE)));
		}
		if (request.getParameter(TO_DATE) != null) {
			physiotherapyVisitDetails.setTreatmentEndDate(HMSUtil
					.convertStringTypeDateToDateType(request
							.getParameter(TO_DATE)));
		}
		if (request.getParameter(TOKEN_NO) != null) {
			physiotherapyVisitDetails.setTokenNo(Integer.parseInt(request
					.getParameter(TOKEN_NO)));
		}
		physiotherapyVisitDetails.setPhysiotherapyVisitDate(HMSUtil
				.convertStringTypeDateToDateType((String) utilMap
						.get("currentDate")));
		mapForDs.put("currentDate", HMSUtil
				.convertStringTypeDateToDateType((String) utilMap
						.get("currentDate")));
		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		Users userObj = new Users();
		userObj.setId(userId);
		physiotherapyVisitDetails.setLastChgBy(userObj);

		if (request.getParameter(CHANGED_DATE) != null) {
			Date addEditDate = HMSUtil.convertStringTypeDateToDateType(request
					.getParameter(CHANGED_DATE));
			physiotherapyVisitDetails.setLastChgDate(addEditDate);
		}
		if (request.getParameter(CHANGED_TIME) != null) {
			String addEditTime = request.getParameter(CHANGED_TIME);
			physiotherapyVisitDetails.setLastChgTime(addEditTime);
		}
		physiotherapyVisitDetails.setStatus("y");

		mapForDs.put("physiotherapyVisitDetails", physiotherapyVisitDetails);
		mapForDs.put("hinId", hinId);
		int hdb = 1;
		if (Integer.parseInt(request.getParameter("hdb")) != 1) {
			hdb = Integer.parseInt(request.getParameter("hdb"));
		}
		String[] treatmentArr = new String[hdb];
		List<String> treatmentList = new ArrayList<String>();

		int j = 1;
		for (int i = 0; i < hdb; i++) {
			if (request.getParameter("treatment" + j) != null
					&& !request.getParameter("treatment" + j).equals("")) {
				String treatment = request.getParameter("treatment" + j);
				int index1 = treatment.lastIndexOf("[");
				int index2 = treatment.lastIndexOf("]");
				index1++;
				String treatmentId = treatment.substring(index1, index2);
				if (!treatmentId.equals("")) {
					treatmentArr[i] = treatmentId;
					treatmentList.add(treatmentArr[i]);
				}
			}
			j++;
		}
		mapForDs.put("treatmentList", treatmentList);

		boolean successfullyAdded = false;
		// successfullyAdded =
		// registrationHandlerService.saveVisitInformation(mapForDs);
		map = opdHandlerService.savePhysiotherapyVisitDetails(mapForDs);

		if (map.get("successfullyAdded") != null) {
			successfullyAdded = (Boolean) map.get("successfullyAdded");
		}
		String message = "";
		if (successfullyAdded) {
			message = " Physiotherapy information saved Successfully.";
		} else {
			message = "Some problem Occured! Try Again.";
		}
		mapForDs.put("users", user);
		String jsp = MSG_FOR_PHYSIOTHERAPY;
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("message", message);
		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView updatePhysiotherapyVisitInformation(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		PhysiotherapyVisitDetails physiotherapyVisitDetails = new PhysiotherapyVisitDetails();

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		Map<String, Object> mapForDs = new HashMap<String, Object>();
		String attendedStatus = "n";

		if (request.getParameter(PHYSIOTHERAPY_VISIT_DETAILS_ID) != null) {
			int physiotherapyVisitDetailsId = Integer.parseInt(request
					.getParameter(PHYSIOTHERAPY_VISIT_DETAILS_ID));
			mapForDs.put("physiotherapyVisitDetailsId",
					physiotherapyVisitDetailsId);
		}
		if (request.getParameter(FROM_DATE) != null) {
			physiotherapyVisitDetails.setTreatmentStartDate(HMSUtil
					.convertStringTypeDateToDateType(request
							.getParameter(FROM_DATE)));
			mapForDs.put("startDate", HMSUtil
					.convertStringTypeDateToDateType(request
							.getParameter(FROM_DATE)));
		}
		if (request.getParameter(TO_DATE) != null) {
			physiotherapyVisitDetails.setTreatmentEndDate(HMSUtil
					.convertStringTypeDateToDateType(request
							.getParameter(TO_DATE)));
			mapForDs.put("endDate", HMSUtil
					.convertStringTypeDateToDateType(request
							.getParameter(TO_DATE)));
		}
		if (request.getParameter(TOKEN_NO) != null) {
			mapForDs.put("tokenNo",
					Integer.parseInt(request.getParameter(TOKEN_NO)));
		}
		if (request.getParameter(ATTENDED) != null) {
			attendedStatus = request.getParameter(ATTENDED);
			mapForDs.put("attendedStatus", attendedStatus);
		}
		mapForDs.put("currentDate", HMSUtil
				.convertStringTypeDateToDateType((String) utilMap
						.get("currentDate")));
		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		mapForDs.put("userId", userId);

		if (request.getParameter(CHANGED_DATE) != null) {
			Date addEditDate = HMSUtil.convertStringTypeDateToDateType(request
					.getParameter(CHANGED_DATE));
			mapForDs.put("addEditDate", addEditDate);
		}
		if (request.getParameter(CHANGED_TIME) != null) {
			String addEditTime = request.getParameter(CHANGED_TIME);
			mapForDs.put("addEditTime", addEditTime);
		}

		boolean successfullyAdded = false;
		map = opdHandlerService.updatePhysiotherapyVisitDetails(mapForDs);

		if (map.get("successfullyAdded") != null) {
			successfullyAdded = (Boolean) map.get("successfullyAdded");
		}
		String message = "";
		if (successfullyAdded) {
			message = " Physiotherapy information updated Successfully.";
		} else {
			message = "Some problem Occured! Try Again.";
		}
		String jsp = MSG_FOR_PHYSIOTHERAPY;
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("message", message);
		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView showPhysiotherapyAttendanceRegisterSearch(
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		int deptId = 0;
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}
		map = opdHandlerService.showPhysiotherapyAttendanceRegisterJsp(map);

		jsp = PHYSIOTHERAPY_ATTENDANCE_REGISTER_SEARCH;
		jsp += ".jsp";
		title = "Diagnostic Register Doctor Wise";
		map.put("deptId", deptId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView generatePhysiotherapyAttendanceRegister(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> parameters = new HashMap<String, Object>();
		int serviceTypeId = 0;
		int month = 0;
		int serviceStatusId = 0;
		String query = "";
		Map<String, Object> detailsMap = opdHandlerService
				.getConnectionForReport();
		if (request.getParameter(MONTH) != null
				&& !(request.getParameter(MONTH).equals(""))) {
			month = Integer.parseInt(request.getParameter(MONTH));
			query = "where month(physiotherapy_visit_details.`treatment_start_date`)<='"
					+ month
					+ "' and '"
					+ month
					+ "'<=month(physiotherapy_visit_details.`treatment_end_date`)";
			parameters.put("month", month);

		}
		if ((request.getParameter(SERVICE_STATUS_ID)) != null
				&& !(request.getParameter(SERVICE_STATUS_ID).equals(""))) {
			serviceStatusId = Integer.parseInt(request
					.getParameter(SERVICE_STATUS_ID));
			parameters.put("serviceStatusId", serviceStatusId);
			if (serviceStatusId != 0) {
				query = query + "and patient.`service_status_id`='"
						+ serviceStatusId + "'";
			}
		}
		if ((request.getParameter(SERVICE_TYPE_ID)) != null
				&& !(request.getParameter(SERVICE_TYPE_ID).equals(""))) {
			serviceTypeId = Integer.parseInt(request
					.getParameter(SERVICE_TYPE_ID));
			parameters.put("serviceTypeId", serviceTypeId);
			if (serviceTypeId != 0) {
				query = query + " and patient.`service_type_id`='"
						+ serviceTypeId + "'";
			}
		}
		parameters.put("query", query);
		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager
						.runReportToPdf(
								getCompiledReport(PHYSIOTHERAPY_MONTHLY_ATTENDANCE_REGISTER),
								parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return null;
	}

	public ModelAndView showSearchForLabourRoomPatientAddmission(
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}

		jsp = SEARCH_FOR_PATIENT_LABOUR_ROOM_ADDMISSION;
		jsp += ".jsp";
		title = "Diagnostic Register Doctor Wise";
		map.put("deptId", deptId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showDetailsForLabourRoom(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		int deptId = 0;
		Map<String, Object> mapForDs = new HashMap<String, Object>();
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}
		String adNo = "";
		if (request.getParameter(AD_NO) != null) {
			adNo = request.getParameter(AD_NO);
			mapForDs.put("adNo", adNo);
		}
		map = opdHandlerService.showDetailsForLabourRoom(mapForDs);

		jsp = VIEW_LABOUR_ROOM_DETAILS;
		jsp += ".jsp";
		title = "Diagnostic Register Doctor Wise";
		map.put("deptId", deptId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showItemSearchJsp(HttpServletRequest request,
			HttpServletResponse response) {
		// System.out.println("showItemSearchJsp");
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		map = opdHandlerService.showItemSearchJsp(box);
		jsp = "searchItem";
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	/**
	 * -------------------------End of methods for OPD Details Update By
	 * Naresh----------------------------
	 */

	/**
	 * -------------------------end of methods for OPD Details Update By
	 * Shailesh----------------------------
	 * 
	 * 
	 * 
	 */

	/**
	 * --------------------------------------------End of Methods For By
	 * Mansi-------------------------
	 * 
	 */

	public ModelAndView showPendingPrescriptionJspFAC(
			HttpServletRequest request, HttpServletResponse response) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		int divisionId = 0;
		String deptName = "";
		String facStatus = "";
		String employeeNo = "";
		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		/*
		 * if (session.getAttribute("deptId") != null) deptId =
		 * Integer.parseInt("" + session.getAttribute("deptId"));
		 */
	
		if (session.getAttribute("deptName") != null)
			deptName = (String) session.getAttribute("deptName");
		// if (session.getAttribute("devisionId") != null)
		// devisionId = Integer.parseInt("" +
		// session.getAttribute("devisionId"));
		if (request.getParameter("facStatus") != null)
			facStatus = (String) request.getParameter("facStatus");
		if (request.getParameter("employeeNo") != null)
			employeeNo = (String) request.getParameter("employeeNo");
		if (request.getParameter("divisionId") != null)
			divisionId = Integer.parseInt(""
					+ request.getParameter("divisionId"));
		
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		// Map<String, Object> dataMap = new HashMap<String, Object>();
		// Map<String, Object> patientMap = new HashMap<String, Object>();
		Map<String, Object> mapForDs = new HashMap<String, Object>();
		mapForDs.put("deptId", deptId);
		mapForDs.put("currentDate", currentDate);
		mapForDs.put("hospitalId", hospitalId);
		mapForDs.put("facStatus", facStatus);
		mapForDs.put("divisionId", divisionId);
		Date fromDate = new Date();
		if (request.getParameter(FROM_DATE) != null
				&& !(request.getParameter(FROM_DATE).equals(""))) {
			fromDate = HMSUtil.dateFormatterDDMMYYYY(request
					.getParameter(FROM_DATE));
			mapForDs.put("fromDate", fromDate);
			
		}
		
		mapForDs.put("employeeNo", employeeNo);
		// detailsMap = opdHandlerService.getPrescriptionList(mapForDs);
		detailsMap = opdHandlerService.getPrescriptionDetailsFAC(mapForDs);
		// dataMap.put("deptId", deptId);
		// dataMap.put("hospitalId", hospitalId);
		// dataMap.put("userName", userName);
		// dataMap.put("deptName", deptName);
		/* String jsp = PENDING_PATIENT_PRESCRIPTION; */
		jsp = "pendingPatientPrescriptionFAC.jsp";
       
		map.put("deptId", deptId);
		map.put("hospitalId", hospitalId);
		map.put("userName", userName);
		map.put("deptName", deptName);
		map.put("divisionId", divisionId);
		map.put("fromDate", fromDate);
		map.put("detailsMap", detailsMap);
		// map.put("patientMap", patientMap);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}
	
	
	public ModelAndView showPendingPrescriptionJspCorporateFAC(
			HttpServletRequest request, HttpServletResponse response) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		int divisionId = 0;
		String deptName = "";
		String facStatus = "";
		String employeeNo = "";
		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		/*
		 * if (session.getAttribute("deptId") != null) deptId =
		 * Integer.parseInt("" + session.getAttribute("deptId"));
		 */
	
		if (session.getAttribute("deptName") != null)
			deptName = (String) session.getAttribute("deptName");
		// if (session.getAttribute("devisionId") != null)
		// devisionId = Integer.parseInt("" +
		// session.getAttribute("devisionId"));
		if (request.getParameter("facStatus") != null)
			facStatus = (String) request.getParameter("facStatus");
		if (request.getParameter("employeeNo") != null)
			employeeNo = (String) request.getParameter("employeeNo");
		if (request.getParameter("divisionId") != null)
			divisionId = Integer.parseInt(""
					+ request.getParameter("divisionId"));
		
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		// Map<String, Object> dataMap = new HashMap<String, Object>();
		// Map<String, Object> patientMap = new HashMap<String, Object>();
		Map<String, Object> mapForDs = new HashMap<String, Object>();
		mapForDs.put("deptId", deptId);
		mapForDs.put("currentDate", currentDate);
		mapForDs.put("hospitalId", hospitalId);
		mapForDs.put("facStatus", facStatus);
		mapForDs.put("divisionId", divisionId);
		Date fromDate = new Date();
		if (request.getParameter(FROM_DATE) != null
				&& !(request.getParameter(FROM_DATE).equals(""))) {
			fromDate = HMSUtil.dateFormatterDDMMYYYY(request
					.getParameter(FROM_DATE));
			mapForDs.put("fromDate", fromDate);
			
		}
		
		mapForDs.put("employeeNo", employeeNo);
		// detailsMap = opdHandlerService.getPrescriptionList(mapForDs);
		detailsMap = opdHandlerService.showPendingPrescriptionJspCorporateFAC(mapForDs);
		// dataMap.put("deptId", deptId);
		// dataMap.put("hospitalId", hospitalId);
		// dataMap.put("userName", userName);
		// dataMap.put("deptName", deptName);
		/* String jsp = PENDING_PATIENT_PRESCRIPTION; */
		jsp = "pendingPatientPrescriptionCorporateFAC.jsp";
       
		map.put("deptId", deptId);
		map.put("hospitalId", hospitalId);
		map.put("userName", userName);
		map.put("deptName", deptName);
		map.put("divisionId", divisionId);
		map.put("fromDate", fromDate);
		map.put("detailsMap", detailsMap);
		// map.put("patientMap", patientMap);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showPendingPrescriptionJsp(HttpServletRequest request,
			HttpServletResponse response) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		int devisionId = 0;
		String deptName = "";
		String facStatus = "";
		String employeeNo = "";
		String byAdmin = "";
		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		/*
		 * if (session.getAttribute("deptId") != null) deptId =
		 * Integer.parseInt("" + session.getAttribute("deptId"));
		 */
		if (session.getAttribute("deptName") != null)
			deptName = (String) session.getAttribute("deptName");
		// if (session.getAttribute("devisionId") != null)
		// devisionId = Integer.parseInt("" +
		// session.getAttribute("devisionId"));
		if (request.getParameter("facStatus") != null)
			facStatus = (String) request.getParameter("facStatus");
		if (request.getParameter("employeeNo") != null)
			employeeNo = (String) request.getParameter("employeeNo");
		if (request.getParameter("byAdmin") != null)
			byAdmin = (String) request.getParameter("byAdmin");
		if (request.getParameter("divisionId") != null)
			devisionId = Integer.parseInt(""
					+ request.getParameter("divisionId"));
		Date currentDate = new Date();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		// Map<String, Object> dataMap = new HashMap<String, Object>();
		// Map<String, Object> patientMap = new HashMap<String, Object>();
		Map<String, Object> mapForDs = new HashMap<String, Object>();
		mapForDs.put("deptId", deptId);
		mapForDs.put("currentDate", currentDate);
		mapForDs.put("hospitalId", hospitalId);
		mapForDs.put("facStatus", facStatus);
		mapForDs.put("devisionId", devisionId);
		mapForDs.put("employeeNo", employeeNo);
		mapForDs.put("byAdmin", byAdmin);
		// detailsMap = opdHandlerService.getPrescriptionList(mapForDs);
		detailsMap = opdHandlerService.getPrescriptionDetails(mapForDs);
		// dataMap.put("deptId", deptId);
		// dataMap.put("hospitalId", hospitalId);
		// dataMap.put("userName", userName);
		// dataMap.put("deptName", deptName);
		/*
		 * String jsp = PENDING_PATIENT_PRESCRIPTION; jsp += ".jsp";
		 */
		String issuedJspFlag= detailsMap.get("issuedJspFlag").toString();
        if(issuedJspFlag.equals("true"))
        {
        	jsp = "issuedPatientPrescription.jsp";
        }
        else
        {
        	jsp = "pendingPatientPrescription.jsp";
        }
		

		

		map.put("deptId", deptId);
		map.put("hospitalId", hospitalId);
		map.put("userName", userName);
		map.put("deptName", deptName);
		map.put("detailsMap", detailsMap);
		// map.put("patientMap", patientMap);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showPendingNIPPrescriptionJsp(
			HttpServletRequest request, HttpServletResponse response) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		int devisionId = 0;
		String deptName = "";
		String facStatus = "";
		String employeeNo = "";
		Date fromDate = null;
		Date toDate = null;
		Map<String, Object> mapForDs = new HashMap<String, Object>();
		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		/*
		 * if (session.getAttribute("deptId") != null) deptId =
		 * Integer.parseInt("" + session.getAttribute("deptId"));
		 */
		if (request.getParameter(FROM_DATE) != null
				&& !(request.getParameter(FROM_DATE).equals(""))) {
			fromDate = HMSUtil.convertStringTypeDateToDateType(request
					.getParameter(FROM_DATE));
			mapForDs.put(FROM_DATE, fromDate);
		}
		if (request.getParameter(TO_DATE) != null
				&& !(request.getParameter(TO_DATE).equals(""))) {
			toDate = HMSUtil.convertStringTypeDateToDateType(request
					.getParameter(TO_DATE));
			mapForDs.put(TO_DATE, toDate);
		}
		if (session.getAttribute("deptName") != null)
			deptName = (String) session.getAttribute("deptName");
		// if (session.getAttribute("devisionId") != null)
		// devisionId = Integer.parseInt("" +
		// session.getAttribute("devisionId"));
		if (request.getParameter("facStatus") != null)
			facStatus = (String) request.getParameter("facStatus");
		if (request.getParameter("employeeNo") != null)
			employeeNo = (String) request.getParameter("employeeNo");
		if (request.getParameter("divisionId") != null)
			devisionId = Integer.parseInt(""
					+ request.getParameter("divisionId"));
		Date currentDate = new Date();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		// Map<String, Object> dataMap = new HashMap<String, Object>();
		// Map<String, Object> patientMap = new HashMap<String, Object>();
		
		mapForDs.put("deptId", deptId);
		mapForDs.put("currentDate", currentDate);
		mapForDs.put("hospitalId", hospitalId);
		mapForDs.put("facStatus", facStatus);
		mapForDs.put("devisionId", devisionId);
		mapForDs.put("employeeNo", employeeNo);
		// detailsMap = opdHandlerService.getPrescriptionList(mapForDs);
		detailsMap = opdHandlerService.getNIPPrescriptionDetails(mapForDs);
		// dataMap.put("deptId", deptId);
		// dataMap.put("hospitalId", hospitalId);
		// dataMap.put("userName", userName);
		// dataMap.put("deptName", deptName);
		String jsp = "pendingPatientNIPPrescription.jsp";

		map.put("deptId", deptId);
		map.put("hospitalId", hospitalId);
		map.put("userName", userName);
		map.put("deptName", deptName);
		map.put("detailsMap", detailsMap);
		// map.put("patientMap", patientMap);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showPendingPrescriptionForWardJsp(
			HttpServletRequest request, HttpServletResponse response) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		String deptName = "";
		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (session.getAttribute("deptName") != null)
			deptName = (String) session.getAttribute("deptName");
		Box box = HMSUtil.getBox(request);
		Date currentDate = new Date();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		Map<String, Object> mapForDs = new HashMap<String, Object>();
		mapForDs.put("deptId", deptId);
		mapForDs.put("currentDate", currentDate);
		mapForDs.put("hospitalId", hospitalId);
		mapForDs.put("box", box);
		detailsMap = opdHandlerService.getPrescriptionDetailsForWard(mapForDs);
		String jsp = "pendingPatientPrescriptionForWard.jsp";
		map.put("deptId", deptId);
		map.put("hospitalId", hospitalId);
		map.put("userName", userName);
		map.put("deptName", deptName);
		map.put("detailsMap", detailsMap);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showPartialPrescriptionForWardJsp(
			HttpServletRequest request, HttpServletResponse response) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		String deptName = "";
		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (session.getAttribute("deptName") != null)
			deptName = (String) session.getAttribute("deptName");
		Box box = HMSUtil.getBox(request);
		Date currentDate = new Date();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		Map<String, Object> mapForDs = new HashMap<String, Object>();
		mapForDs.put("deptId", deptId);
		mapForDs.put("currentDate", currentDate);
		mapForDs.put("hospitalId", hospitalId);
		mapForDs.put("box", box);
		detailsMap = opdHandlerService
				.getPartialPrescriptionDetailsForWard(mapForDs);
		String jsp = "partialPatientPrescriptionForWard.jsp";
		map.put("deptId", deptId);
		map.put("hospitalId", hospitalId);
		map.put("userName", userName);
		map.put("deptName", deptName);
		map.put("detailsMap", detailsMap);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}
	
	public ModelAndView showPendingPrescriptionForWardJspPartial(HttpServletRequest request,
			HttpServletResponse response) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		String deptName = "";
		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (session.getAttribute("deptName") != null)
			deptName = (String) session.getAttribute("deptName");
		Box box = HMSUtil.getBox(request);
		Date currentDate = new Date();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		Map<String, Object> mapForDs = new HashMap<String, Object>();
		mapForDs.put("deptId", deptId);
		mapForDs.put("currentDate", currentDate);
		mapForDs.put("hospitalId", hospitalId);
		mapForDs.put("box", box);
		detailsMap = opdHandlerService.getPrescriptionDetailsForWardPartial(mapForDs);
		String jsp = "pendingPatientPrescriptionForWardPartial.jsp";
		map.put("deptId", deptId);
		map.put("hospitalId", hospitalId);
		map.put("userName", userName);
		map.put("deptName", deptName);
		map.put("detailsMap", detailsMap);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings("unchecked")
	public ModelAndView searchPrescription(HttpServletRequest request,
			HttpServletResponse response) throws FileNotFoundException,
			IllegalStateException {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> mapForDs = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Date fromDate = new Date();
		Date toDate = new Date();
		String userName = "";
		int hospitalId = 0;

		int deptId = 0;
		String deptName = "";
		session = request.getSession();
		Box box = HMSUtil.getBox(request);
		session.setAttribute("box", box);

		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (box.getInt(DEPARTMENT_ID) != 0) {
			deptId = box.getInt(DEPARTMENT_ID);
		} else {
			if (session.getAttribute("deptId") != null)
				deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		}
		if (session.getAttribute("deptName") != null)
			deptName = (String) session.getAttribute("deptName");
		if (request.getParameter("employeeNo") != "") {
			mapForDs.put("employeeNo", request.getParameter("employeeNo"));
		}
		mapForDs.put("deptId", deptId);
		mapForDs.put("hospitalId", hospitalId);
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);
		dataMap.put("deptName", deptName);

		try {
			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.dateFormatterDDMMYYYY(request
						.getParameter(FROM_DATE));
				mapForDs.put("fromDate", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.dateFormatterDDMMYYYY(request
						.getParameter(TO_DATE));
				mapForDs.put("toDate", toDate);
			}
			int departmentId = 0;
			if (request.getParameter(DEPARTMENT_ID) != null
					&& !(request.getParameter(DEPARTMENT_ID).equals(""))) {
				departmentId = Integer.parseInt(request
						.getParameter(DEPARTMENT_ID));

			}
			mapForDs.put("departmentId", departmentId);
			int medicalOfficerId = 0;
			if (request.getParameter(MEDICAL_OFFICER) != null
					&& !(request.getParameter(MEDICAL_OFFICER).equals(""))) {
				medicalOfficerId = Integer.parseInt(request
						.getParameter(MEDICAL_OFFICER));

			}
			mapForDs.put("medicalOfficerId", medicalOfficerId);

		} catch (Exception e) {
			e.printStackTrace();
		}

		detailsMap = opdHandlerService.getPrescriptionDetails(mapForDs);

		jsp = PENDING_PATIENT_PRESCRIPTION + ".jsp";
		map.put("detailsMap", detailsMap);
		map.put("contentJsp", jsp);
		map.put("dataMap", dataMap);
		map.put("deptName", deptName);		
		map.put("fromDate", fromDate);
		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings("unchecked")
	public ModelAndView searchPatientPrescription(HttpServletRequest request,
			HttpServletResponse response) throws FileNotFoundException,
			IllegalStateException {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		List<PatientPrescriptionDetails> presList = new ArrayList<PatientPrescriptionDetails>();
		int prescriptionId = 0;
		if (request.getParameter(PRESCRIPTION_ID) != null
				&& !(request.getParameter(PRESCRIPTION_ID).equals("0"))) {
			prescriptionId = Integer.parseInt(request
					.getParameter(PRESCRIPTION_ID));
			dataMap.put("prescriptionId", prescriptionId);
		}
		map = opdHandlerService.getPrescriptionDetailList(dataMap);
		if (dataMap.get("presList") != null) {
			presList = (List<PatientPrescriptionDetails>) dataMap
					.get("presList");
		}
		if (presList.size() > 0) {
			jsp = RequestConstants.PENDING_PRESCRIPTION + ".jsp";
		}
		map.put("contentJsp", jsp);
		map.put("presList", presList);
		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings("unchecked")
	public ModelAndView submitPendingPrescriptionDetails(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		List<PatientPrescriptionDetails> presList = new ArrayList<PatientPrescriptionDetails>();
		boolean saved = false;
		Box box = HMSUtil.getBox(request);
		dataMap.put("box", box);
		String url = "";
		map = opdHandlerService.getPrescriptionDetailList(dataMap);
		if (dataMap.get("presList") != null) {
			presList = (List<PatientPrescriptionDetails>) dataMap
					.get("presList");
		}
		dataMap.put("presList", presList);
		map = opdHandlerService.submitPendingPrescriptionDetails(box, dataMap);
		saved = (Boolean) map.get("saved");
		if (saved == true) {
			message = "Record Added Successfully !!";
		} else {
			message = "Try Again !!";
		}

		jsp = RequestConstants.PENDING_PATIENT_PRESCRIPTION;
		jsp += ".jsp";
		title = "Pending Prescription";
		url = "/hms/hms/opd?method=showPendingPrescriptionJsp";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		map.put("url", url);
		return new ModelAndView("indexB", "map", map);
	}

	// on04-10-2010
	public ModelAndView printOpdUrologyCaseSheetHae(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHae"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHaeC(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHaeC"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHy(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHy"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHyC(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHyC"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetL(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetL"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetLC(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetLC"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetP(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetP"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetPC(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetPC"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetNotFillUp(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetnotFillUp"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHaeS(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHaeS"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHaeSC(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHaeSC"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHaeHy(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHaeHy"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHaeHyC(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHaeHyC"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHaeL(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHaeL"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHaeLS(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHaeLS"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHaeP(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHaeP"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHaePS(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHaePS"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHaeHyL(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHaeHyL"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHaeHyP(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHaeHyP"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHaeHyLP(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHaeHyLP"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHaeHyLPS(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHaeHyLPS"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHaeHyLS(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHaeHyLS"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHaeHyPS(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHaeHyPS"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHaeLP(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHaeLP"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHaeLPS(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHaeLPS"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHaeHyS(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHaeHyS"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHyL(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHyL"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHyLS(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHyLS"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHyLP(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHyLP"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHyLPS(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHyLPS"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHyPS(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHyPS"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHyP(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHyP"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHyS(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHyS"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetLP(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetLP"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetLPS(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetLPS"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetLS(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetLS"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetPS(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetPS"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetS(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetS"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	// //////////////////

	public ModelAndView printOpdUrologyCaseSheetHaeLC(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHaeLC"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHaeLSC(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHaeLSC"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHaePC(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHaePC"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHaePSC(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHaePSC"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHaeHyLC(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHaeHyLC"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHaeHyPC(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHaeHyPC"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHaeHyLPC(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHaeHyLPC"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHaeHyLPSC(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHaeHyLPSC"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHaeHyLSC(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHaeHyLSC"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHaeHyPSC(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHaeHyPSC"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHaeLPC(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHaeLPC"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHaeLPSC(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHaeLPSC"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHaeHySC(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHaeHySC"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHyLC(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHyLC"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHyLSC(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHyLSC"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHyLPC(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHyLPC"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHyLPSC(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHyLPSC"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHyPSC(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHyPSC"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHyPC(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHyPC"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetHySC(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetHySC"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetLPC(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetLPC"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetLPSC(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetLPSC"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetLSC(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetLSC"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetPSC(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetPSC"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetSC(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetSC"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView printOpdUrologyCaseSheetC(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetC"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("indexB", "map", map);
		return null;

	}

	public ModelAndView addUrologyCaseSheet(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		box.put("departmentId", departmentId);
		box.put("hospitalId", hospitalId);
		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		box.put("userId", userId);
		String message = "";
		box.put("visitId", visitId);
		String referredDept = "";
		String[] referredToDeptArray = null;
		if (request.getParameterValues(DEPARTMENT_ID) != null) {
			referredToDeptArray = (String[]) request
					.getParameterValues(DEPARTMENT_ID);
			for (int i = 0; i < referredToDeptArray.length; i++) {
				if (i == 0)
					referredDept = referredToDeptArray[i];
				else
					referredDept = referredDept + "," + referredToDeptArray[i];
			}
		}
		box.put("referredDept", referredDept);
		map = opdHandlerService.addUrologyCaseSheet(box);
		// String haeTotal=(String)map.get("haeTotal");
		saved = (Boolean) map.get("saved");
		if (saved) {

			message = "Urology Case Shee has been done Successfully.Do you want to print ?";

			if (((map.get("haeTotal") != "") || (map.get("haeTeriminal") != "")
					|| map.get("haeInitial") != "" || map.get("haeClots") != "")
					&& (map.get("hypogastricPain") == ""
							|| map.get("bonePain") == ""
							|| map.get("dysuriaPain") == "" || map
							.get("perinalRectal") == "")
					&& (map.get("lFrequency") == ""
							|| map.get("lHesitanvy") == ""
							|| map.get("lNocturia") == ""
							|| map.get("lStraining") == ""
							|| map.get("lUrgency") == ""
							|| map.get("lSenseComEva") == ""
							|| map.get("lUrgeIncon") == ""
							|| map.get("lIntermittency") == "" || map
							.get("lDribbling") == "")
					&& (map.get("uretericLeft") == "" || map
							.get("uretericRight") == "")
					&& (map.get("symptomme") == "")
					&& (map.get("chyluriaCheck") == ""
							|| map.get("chyluria") == ""
							|| map.get("erectileDysfunctionCheck") == ""
							|| map.get("erectileDysfunction") == ""
							|| map.get("haemospermia") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("retrogradeEjaculation") == ""
							|| map.get("anejaculationEjaculation") == ""
							|| map.get("stressIncontinence") == ""
							|| map.get("urgeIncontinence") == ""
							|| map.get("totalIncontinence") == ""
							|| map.get("overflowIncontinence") == ""
							|| map.get("acuteUrinaryCheck") == ""
							|| map.get("acuteUrinary") == ""
							|| map.get("calcularia") == "" || map
							.get("calculariaCheck") == "")) {
				jsp = "messageOpdUrologyHae";
			}
			if (((map.get("haeTotal") != "") || (map.get("haeTeriminal") != "")
					|| map.get("haeInitial") != "" || map.get("haeClots") != "")
					&& (map.get("hypogastricPain") == ""
							|| map.get("bonePain") == ""
							|| map.get("dysuriaPain") == "" || map
							.get("perinalRectal") == "")
					&& (map.get("lFrequency") == ""
							|| map.get("lHesitanvy") == ""
							|| map.get("lNocturia") == ""
							|| map.get("lStraining") == ""
							|| map.get("lUrgency") == ""
							|| map.get("lSenseComEva") == ""
							|| map.get("lUrgeIncon") == ""
							|| map.get("lIntermittency") == "" || map
							.get("lDribbling") == "")
					&& (map.get("uretericLeft") == "" || map
							.get("uretericRight") == "")
					&& (map.get("symptomme") == "")
					&& (map.get("chyluriaCheck") != ""
							|| map.get("chyluria") != ""
							|| map.get("erectileDysfunctionCheck") != ""
							|| map.get("erectileDysfunction") != ""
							|| map.get("haemospermia") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("retrogradeEjaculation") != ""
							|| map.get("anejaculationEjaculation") != ""
							|| map.get("stressIncontinence") != ""
							|| map.get("urgeIncontinence") != ""
							|| map.get("totalIncontinence") != ""
							|| map.get("overflowIncontinence") != ""
							|| map.get("acuteUrinaryCheck") != ""
							|| map.get("acuteUrinary") != ""
							|| map.get("calcularia") != "" || map
							.get("calculariaCheck") != "")) {
				jsp = "messageOpdUrologyHaeC";
			} else if (((map.get("haeTotal") != "")
					|| (map.get("haeTeriminal") != "")
					|| map.get("haeInitial") != "" || map.get("haeClots") != "")
					&& (map.get("hypogastricPain") == ""
							|| map.get("bonePain") == ""
							|| map.get("dysuriaPain") == "" || map
							.get("perinalRectal") == "")
					&& (map.get("lFrequency") == ""
							|| map.get("lHesitanvy") == ""
							|| map.get("lNocturia") == ""
							|| map.get("lStraining") == ""
							|| map.get("lUrgency") == ""
							|| map.get("lSenseComEva") == ""
							|| map.get("lUrgeIncon") == ""
							|| map.get("lIntermittency") == "" || map
							.get("lDribbling") == "")
					&& (map.get("uretericLeft") == "" || map
							.get("uretericRight") == "")
					&& (map.get("symptomme") != "")
					&& (map.get("chyluriaCheck") == ""
							|| map.get("chyluria") == ""
							|| map.get("erectileDysfunctionCheck") == ""
							|| map.get("erectileDysfunction") == ""
							|| map.get("haemospermia") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("retrogradeEjaculation") == ""
							|| map.get("anejaculationEjaculation") == ""
							|| map.get("stressIncontinence") == ""
							|| map.get("urgeIncontinence") == ""
							|| map.get("totalIncontinence") == ""
							|| map.get("overflowIncontinence") == ""
							|| map.get("acuteUrinaryCheck") == ""
							|| map.get("acuteUrinary") == ""
							|| map.get("calcularia") == "" || map
							.get("calculariaCheck") == "")) {
				jsp = "messageOpdUrologyHaeS";
			} else if (((map.get("haeTotal") != "")
					|| (map.get("haeTeriminal") != "")
					|| map.get("haeInitial") != "" || map.get("haeClots") != "")
					&& (map.get("hypogastricPain") == ""
							|| map.get("bonePain") == ""
							|| map.get("dysuriaPain") == "" || map
							.get("perinalRectal") == "")
					&& (map.get("lFrequency") == ""
							|| map.get("lHesitanvy") == ""
							|| map.get("lNocturia") == ""
							|| map.get("lStraining") == ""
							|| map.get("lUrgency") == ""
							|| map.get("lSenseComEva") == ""
							|| map.get("lUrgeIncon") == ""
							|| map.get("lIntermittency") == "" || map
							.get("lDribbling") == "")
					&& (map.get("uretericLeft") == "" || map
							.get("uretericRight") == "")
					&& (map.get("symptomme") != "")
					&& (map.get("chyluriaCheck") != ""
							|| map.get("chyluria") != ""
							|| map.get("erectileDysfunctionCheck") != ""
							|| map.get("erectileDysfunction") != ""
							|| map.get("haemospermia") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("retrogradeEjaculation") != ""
							|| map.get("anejaculationEjaculation") != ""
							|| map.get("stressIncontinence") != ""
							|| map.get("urgeIncontinence") != ""
							|| map.get("totalIncontinence") != ""
							|| map.get("overflowIncontinence") != ""
							|| map.get("acuteUrinaryCheck") != ""
							|| map.get("acuteUrinary") != ""
							|| map.get("calcularia") != "" || map
							.get("calculariaCheck") != "")) {
				jsp = "messageOpdUrologyHaeSC";
			} else if (((map.get("haeTotal") != "")
					|| (map.get("haeTeriminal") != "")
					|| map.get("haeInitial") != "" || map.get("haeClots") != "")
					&& (map.get("hypogastricPain") != ""
							|| map.get("bonePain") != ""
							|| map.get("dysuriaPain") != "" || map
							.get("perinalRectal") != "")
					&& (map.get("lFrequency") == ""
							|| map.get("lHesitanvy") == ""
							|| map.get("lNocturia") == ""
							|| map.get("lStraining") == ""
							|| map.get("lUrgency") == ""
							|| map.get("lSenseComEva") == ""
							|| map.get("lUrgeIncon") == ""
							|| map.get("lIntermittency") == "" || map
							.get("lDribbling") == "")
					&& (map.get("uretericLeft") == "" || map
							.get("uretericRight") == "")
					&& (map.get("symptomme") == "")
					&& (map.get("chyluriaCheck") == ""
							|| map.get("chyluria") == ""
							|| map.get("erectileDysfunctionCheck") == ""
							|| map.get("erectileDysfunction") == ""
							|| map.get("haemospermia") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("retrogradeEjaculation") == ""
							|| map.get("anejaculationEjaculation") == ""
							|| map.get("stressIncontinence") == ""
							|| map.get("urgeIncontinence") == ""
							|| map.get("totalIncontinence") == ""
							|| map.get("overflowIncontinence") == ""
							|| map.get("acuteUrinaryCheck") == ""
							|| map.get("acuteUrinary") == ""
							|| map.get("calcularia") == "" || map
							.get("calculariaCheck") == "")) {
				jsp = "messageOpdUrologyHaeHy";
			} else if (((map.get("haeTotal") != "")
					|| (map.get("haeTeriminal") != "")
					|| map.get("haeInitial") != "" || map.get("haeClots") != "")
					&& (map.get("hypogastricPain") != ""
							|| map.get("bonePain") != ""
							|| map.get("dysuriaPain") != "" || map
							.get("perinalRectal") != "")
					&& (map.get("lFrequency") == ""
							|| map.get("lHesitanvy") == ""
							|| map.get("lNocturia") == ""
							|| map.get("lStraining") == ""
							|| map.get("lUrgency") == ""
							|| map.get("lSenseComEva") == ""
							|| map.get("lUrgeIncon") == ""
							|| map.get("lIntermittency") == "" || map
							.get("lDribbling") == "")
					&& (map.get("uretericLeft") == "" || map
							.get("uretericRight") == "")
					&& (map.get("symptomme") == "")
					&& (map.get("chyluriaCheck") != ""
							|| map.get("chyluria") != ""
							|| map.get("erectileDysfunctionCheck") != ""
							|| map.get("erectileDysfunction") != ""
							|| map.get("haemospermia") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("retrogradeEjaculation") != ""
							|| map.get("anejaculationEjaculation") != ""
							|| map.get("stressIncontinence") != ""
							|| map.get("urgeIncontinence") != ""
							|| map.get("totalIncontinence") != ""
							|| map.get("overflowIncontinence") != ""
							|| map.get("acuteUrinaryCheck") != ""
							|| map.get("acuteUrinary") != ""
							|| map.get("calcularia") != "" || map
							.get("calculariaCheck") != "")) {
				jsp = "messageOpdUrologyHaeHyC";
			} else if (((map.get("haeTotal") != "")
					|| (map.get("haeTeriminal") != "")
					|| map.get("haeInitial") != "" || map.get("haeClots") != "")
					&& (map.get("hypogastricPain") != ""
							|| map.get("bonePain") != ""
							|| map.get("dysuriaPain") != "" || map
							.get("perinalRectal") != "")
					&& (map.get("lFrequency") == ""
							|| map.get("lHesitanvy") == ""
							|| map.get("lNocturia") == ""
							|| map.get("lStraining") == ""
							|| map.get("lUrgency") == ""
							|| map.get("lSenseComEva") == ""
							|| map.get("lUrgeIncon") == ""
							|| map.get("lIntermittency") == "" || map
							.get("lDribbling") == "")
					&& (map.get("uretericLeft") == "" || map
							.get("uretericRight") == "")
					&& (map.get("symptomme") != "")
					&& (map.get("chyluriaCheck") == ""
							|| map.get("chyluria") == ""
							|| map.get("erectileDysfunctionCheck") == ""
							|| map.get("erectileDysfunction") == ""
							|| map.get("haemospermia") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("retrogradeEjaculation") == ""
							|| map.get("anejaculationEjaculation") == ""
							|| map.get("stressIncontinence") == ""
							|| map.get("urgeIncontinence") == ""
							|| map.get("totalIncontinence") == ""
							|| map.get("overflowIncontinence") == ""
							|| map.get("acuteUrinaryCheck") == ""
							|| map.get("acuteUrinary") == ""
							|| map.get("calcularia") == "" || map
							.get("calculariaCheck") == "")) {
				jsp = "messageOpdUrologyHaeHyS";
			} else if (((map.get("haeTotal") != "")
					|| (map.get("haeTeriminal") != "")
					|| map.get("haeInitial") != "" || map.get("haeClots") != "")
					&& (map.get("hypogastricPain") != ""
							|| map.get("bonePain") != ""
							|| map.get("dysuriaPain") != "" || map
							.get("perinalRectal") != "")
					&& (map.get("lFrequency") == ""
							|| map.get("lHesitanvy") == ""
							|| map.get("lNocturia") == ""
							|| map.get("lStraining") == ""
							|| map.get("lUrgency") == ""
							|| map.get("lSenseComEva") == ""
							|| map.get("lUrgeIncon") == ""
							|| map.get("lIntermittency") == "" || map
							.get("lDribbling") == "")
					&& (map.get("uretericLeft") == "" || map
							.get("uretericRight") == "")
					&& (map.get("symptomme") != "")
					&& (map.get("chyluriaCheck") != ""
							|| map.get("chyluria") != ""
							|| map.get("erectileDysfunctionCheck") != ""
							|| map.get("erectileDysfunction") != ""
							|| map.get("haemospermia") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("retrogradeEjaculation") != ""
							|| map.get("anejaculationEjaculation") != ""
							|| map.get("stressIncontinence") != ""
							|| map.get("urgeIncontinence") != ""
							|| map.get("totalIncontinence") != ""
							|| map.get("overflowIncontinence") != ""
							|| map.get("acuteUrinaryCheck") != ""
							|| map.get("acuteUrinary") != ""
							|| map.get("calcularia") != "" || map
							.get("calculariaCheck") != "")) {
				jsp = "messageOpdUrologyHaeHySC";
			} else if (((map.get("haeTotal") != "")
					|| (map.get("haeTeriminal") != "")
					|| map.get("haeInitial") != "" || map.get("haeClots") != "")
					&& (map.get("hypogastricPain") == ""
							|| map.get("bonePain") == ""
							|| map.get("dysuriaPain") == "" || map
							.get("perinalRectal") == "")
					&& (map.get("lFrequency") != ""
							|| map.get("lHesitanvy") != ""
							|| map.get("lNocturia") != ""
							|| map.get("lStraining") != ""
							|| map.get("lUrgency") != ""
							|| map.get("lSenseComEva") != ""
							|| map.get("lUrgeIncon") != ""
							|| map.get("lIntermittency") != "" || map
							.get("lDribbling") != "")
					&& (map.get("uretericLeft") == "" || map
							.get("uretericRight") == "")
					&& (map.get("symptomme") == "")
					&& (map.get("chyluriaCheck") == ""
							|| map.get("chyluria") == ""
							|| map.get("erectileDysfunctionCheck") == ""
							|| map.get("erectileDysfunction") == ""
							|| map.get("haemospermia") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("retrogradeEjaculation") == ""
							|| map.get("anejaculationEjaculation") == ""
							|| map.get("stressIncontinence") == ""
							|| map.get("urgeIncontinence") == ""
							|| map.get("totalIncontinence") == ""
							|| map.get("overflowIncontinence") == ""
							|| map.get("acuteUrinaryCheck") == ""
							|| map.get("acuteUrinary") == ""
							|| map.get("calcularia") == "" || map
							.get("calculariaCheck") == "")) {
				jsp = "messageOpdUrologyHaeL";
			} else if (((map.get("haeTotal") != "")
					|| (map.get("haeTeriminal") != "")
					|| map.get("haeInitial") != "" || map.get("haeClots") != "")
					&& (map.get("hypogastricPain") == ""
							|| map.get("bonePain") == ""
							|| map.get("dysuriaPain") == "" || map
							.get("perinalRectal") == "")
					&& (map.get("lFrequency") != ""
							|| map.get("lHesitanvy") != ""
							|| map.get("lNocturia") != ""
							|| map.get("lStraining") != ""
							|| map.get("lUrgency") != ""
							|| map.get("lSenseComEva") != ""
							|| map.get("lUrgeIncon") != ""
							|| map.get("lIntermittency") != "" || map
							.get("lDribbling") != "")
					&& (map.get("uretericLeft") == "" || map
							.get("uretericRight") == "")
					&& (map.get("symptomme") == "")
					&& (map.get("chyluriaCheck") != ""
							|| map.get("chyluria") != ""
							|| map.get("erectileDysfunctionCheck") != ""
							|| map.get("erectileDysfunction") != ""
							|| map.get("haemospermia") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("retrogradeEjaculation") != ""
							|| map.get("anejaculationEjaculation") != ""
							|| map.get("stressIncontinence") != ""
							|| map.get("urgeIncontinence") != ""
							|| map.get("totalIncontinence") != ""
							|| map.get("overflowIncontinence") != ""
							|| map.get("acuteUrinaryCheck") != ""
							|| map.get("acuteUrinary") != ""
							|| map.get("calcularia") != "" || map
							.get("calculariaCheck") != "")) {
				jsp = "messageOpdUrologyHaeLC";
			} else if (((map.get("haeTotal") != "")
					|| (map.get("haeTeriminal") != "")
					|| map.get("haeInitial") != "" || map.get("haeClots") != "")
					&& (map.get("hypogastricPain") == ""
							|| map.get("bonePain") == ""
							|| map.get("dysuriaPain") == "" || map
							.get("perinalRectal") == "")
					&& (map.get("lFrequency") != ""
							|| map.get("lHesitanvy") != ""
							|| map.get("lNocturia") != ""
							|| map.get("lStraining") != ""
							|| map.get("lUrgency") != ""
							|| map.get("lSenseComEva") != ""
							|| map.get("lUrgeIncon") != ""
							|| map.get("lIntermittency") != "" || map
							.get("lDribbling") != "")
					&& (map.get("uretericLeft") == "" || map
							.get("uretericRight") == "")
					&& (map.get("symptomme") != "")
					&& (map.get("chyluriaCheck") == ""
							|| map.get("chyluria") == ""
							|| map.get("erectileDysfunctionCheck") == ""
							|| map.get("erectileDysfunction") == ""
							|| map.get("haemospermia") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("retrogradeEjaculation") == ""
							|| map.get("anejaculationEjaculation") == ""
							|| map.get("stressIncontinence") == ""
							|| map.get("urgeIncontinence") == ""
							|| map.get("totalIncontinence") == ""
							|| map.get("overflowIncontinence") == ""
							|| map.get("acuteUrinaryCheck") == ""
							|| map.get("acuteUrinary") == ""
							|| map.get("calcularia") == "" || map
							.get("calculariaCheck") == "")) {
				jsp = "messageOpdUrologyHaeLS";
			} else if (((map.get("haeTotal") != "")
					|| (map.get("haeTeriminal") != "")
					|| map.get("haeInitial") != "" || map.get("haeClots") != "")
					&& (map.get("hypogastricPain") == ""
							|| map.get("bonePain") == ""
							|| map.get("dysuriaPain") == "" || map
							.get("perinalRectal") == "")
					&& (map.get("lFrequency") != ""
							|| map.get("lHesitanvy") != ""
							|| map.get("lNocturia") != ""
							|| map.get("lStraining") != ""
							|| map.get("lUrgency") != ""
							|| map.get("lSenseComEva") != ""
							|| map.get("lUrgeIncon") != ""
							|| map.get("lIntermittency") != "" || map
							.get("lDribbling") != "")
					&& (map.get("uretericLeft") == "" || map
							.get("uretericRight") == "")
					&& (map.get("symptomme") != "")
					&& (map.get("chyluriaCheck") != ""
							|| map.get("chyluria") != ""
							|| map.get("erectileDysfunctionCheck") != ""
							|| map.get("erectileDysfunction") != ""
							|| map.get("haemospermia") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("retrogradeEjaculation") != ""
							|| map.get("anejaculationEjaculation") != ""
							|| map.get("stressIncontinence") != ""
							|| map.get("urgeIncontinence") != ""
							|| map.get("totalIncontinence") != ""
							|| map.get("overflowIncontinence") != ""
							|| map.get("acuteUrinaryCheck") != ""
							|| map.get("acuteUrinary") != ""
							|| map.get("calcularia") != "" || map
							.get("calculariaCheck") != "")) {
				jsp = "messageOpdUrologyHaeLSC";
			} else if (((map.get("haeTotal") != "")
					|| (map.get("haeTeriminal") != "")
					|| map.get("haeInitial") != "" || map.get("haeClots") != "")
					&& (map.get("hypogastricPain") == ""
							|| map.get("bonePain") == ""
							|| map.get("dysuriaPain") == "" || map
							.get("perinalRectal") == "")
					&& (map.get("lFrequency") == ""
							|| map.get("lHesitanvy") == ""
							|| map.get("lNocturia") == ""
							|| map.get("lStraining") == ""
							|| map.get("lUrgency") == ""
							|| map.get("lSenseComEva") == ""
							|| map.get("lUrgeIncon") == ""
							|| map.get("lIntermittency") == "" || map
							.get("lDribbling") == "")
					&& (map.get("uretericLeft") != "" || map
							.get("uretericRight") != "")
					&& (map.get("symptomme") == "")
					&& (map.get("chyluriaCheck") == ""
							|| map.get("chyluria") == ""
							|| map.get("erectileDysfunctionCheck") == ""
							|| map.get("erectileDysfunction") == ""
							|| map.get("haemospermia") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("retrogradeEjaculation") == ""
							|| map.get("anejaculationEjaculation") == ""
							|| map.get("stressIncontinence") == ""
							|| map.get("urgeIncontinence") == ""
							|| map.get("totalIncontinence") == ""
							|| map.get("overflowIncontinence") == ""
							|| map.get("acuteUrinaryCheck") == ""
							|| map.get("acuteUrinary") == ""
							|| map.get("calcularia") == "" || map
							.get("calculariaCheck") == "")) {
				jsp = "messageOpdUrologyHaeP";
			} else if (((map.get("haeTotal") != "")
					|| (map.get("haeTeriminal") != "")
					|| map.get("haeInitial") != "" || map.get("haeClots") != "")
					&& (map.get("hypogastricPain") == ""
							|| map.get("bonePain") == ""
							|| map.get("dysuriaPain") == "" || map
							.get("perinalRectal") == "")
					&& (map.get("lFrequency") == ""
							|| map.get("lHesitanvy") == ""
							|| map.get("lNocturia") == ""
							|| map.get("lStraining") == ""
							|| map.get("lUrgency") == ""
							|| map.get("lSenseComEva") == ""
							|| map.get("lUrgeIncon") == ""
							|| map.get("lIntermittency") == "" || map
							.get("lDribbling") == "")
					&& (map.get("uretericLeft") != "" || map
							.get("uretericRight") != "")
					&& (map.get("symptomme") == "")
					&& (map.get("chyluriaCheck") != ""
							|| map.get("chyluria") != ""
							|| map.get("erectileDysfunctionCheck") != ""
							|| map.get("erectileDysfunction") != ""
							|| map.get("haemospermia") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("retrogradeEjaculation") != ""
							|| map.get("anejaculationEjaculation") != ""
							|| map.get("stressIncontinence") != ""
							|| map.get("urgeIncontinence") != ""
							|| map.get("totalIncontinence") != ""
							|| map.get("overflowIncontinence") != ""
							|| map.get("acuteUrinaryCheck") != ""
							|| map.get("acuteUrinary") != ""
							|| map.get("calcularia") != "" || map
							.get("calculariaCheck") != "")) {
				jsp = "messageOpdUrologyHaePC";
			} else if (((map.get("haeTotal") != "")
					|| (map.get("haeTeriminal") != "")
					|| map.get("haeInitial") != "" || map.get("haeClots") != "")
					&& (map.get("hypogastricPain") == ""
							|| map.get("bonePain") == ""
							|| map.get("dysuriaPain") == "" || map
							.get("perinalRectal") == "")
					&& (map.get("lFrequency") == ""
							|| map.get("lHesitanvy") == ""
							|| map.get("lNocturia") == ""
							|| map.get("lStraining") == ""
							|| map.get("lUrgency") == ""
							|| map.get("lSenseComEva") == ""
							|| map.get("lUrgeIncon") == ""
							|| map.get("lIntermittency") == "" || map
							.get("lDribbling") == "")
					&& (map.get("uretericLeft") != "" || map
							.get("uretericRight") != "")
					&& (map.get("symptomme") != "")
					&& (map.get("chyluriaCheck") == ""
							|| map.get("chyluria") == ""
							|| map.get("erectileDysfunctionCheck") == ""
							|| map.get("erectileDysfunction") == ""
							|| map.get("haemospermia") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("retrogradeEjaculation") == ""
							|| map.get("anejaculationEjaculation") == ""
							|| map.get("stressIncontinence") == ""
							|| map.get("urgeIncontinence") == ""
							|| map.get("totalIncontinence") == ""
							|| map.get("overflowIncontinence") == ""
							|| map.get("acuteUrinaryCheck") == ""
							|| map.get("acuteUrinary") == ""
							|| map.get("calcularia") == "" || map
							.get("calculariaCheck") == "")) {
				jsp = "messageOpdUrologyHaePS";
			} else if (((map.get("haeTotal") != "")
					|| (map.get("haeTeriminal") != "")
					|| map.get("haeInitial") != "" || map.get("haeClots") != "")
					&& (map.get("hypogastricPain") == ""
							|| map.get("bonePain") == ""
							|| map.get("dysuriaPain") == "" || map
							.get("perinalRectal") == "")
					&& (map.get("lFrequency") == ""
							|| map.get("lHesitanvy") == ""
							|| map.get("lNocturia") == ""
							|| map.get("lStraining") == ""
							|| map.get("lUrgency") == ""
							|| map.get("lSenseComEva") == ""
							|| map.get("lUrgeIncon") == ""
							|| map.get("lIntermittency") == "" || map
							.get("lDribbling") == "")
					&& (map.get("uretericLeft") != "" || map
							.get("uretericRight") != "")
					&& (map.get("symptomme") != "")
					&& (map.get("chyluriaCheck") != ""
							|| map.get("chyluria") != ""
							|| map.get("erectileDysfunctionCheck") != ""
							|| map.get("erectileDysfunction") != ""
							|| map.get("haemospermia") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("retrogradeEjaculation") != ""
							|| map.get("anejaculationEjaculation") != ""
							|| map.get("stressIncontinence") != ""
							|| map.get("urgeIncontinence") != ""
							|| map.get("totalIncontinence") != ""
							|| map.get("overflowIncontinence") != ""
							|| map.get("acuteUrinaryCheck") != ""
							|| map.get("acuteUrinary") != ""
							|| map.get("calcularia") != "" || map
							.get("calculariaCheck") != "")) {
				jsp = "messageOpdUrologyHaePSC";
			} else if (((map.get("haeTotal") != "")
					|| (map.get("haeTeriminal") != "")
					|| map.get("haeInitial") != "" || map.get("haeClots") != "")
					&& (map.get("hypogastricPain") != ""
							|| map.get("bonePain") != ""
							|| map.get("dysuriaPain") != "" || map
							.get("perinalRectal") != "")
					&& (map.get("lFrequency") != ""
							|| map.get("lHesitanvy") != ""
							|| map.get("lNocturia") != ""
							|| map.get("lStraining") != ""
							|| map.get("lUrgency") != ""
							|| map.get("lSenseComEva") != ""
							|| map.get("lUrgeIncon") != ""
							|| map.get("lIntermittency") != "" || map
							.get("lDribbling") != "")
					&& (map.get("uretericLeft") == "" || map
							.get("uretericRight") == "")
					&& (map.get("symptomme") == "")
					&& (map.get("chyluriaCheck") == ""
							|| map.get("chyluria") == ""
							|| map.get("erectileDysfunctionCheck") == ""
							|| map.get("erectileDysfunction") == ""
							|| map.get("haemospermia") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("retrogradeEjaculation") == ""
							|| map.get("anejaculationEjaculation") == ""
							|| map.get("stressIncontinence") == ""
							|| map.get("urgeIncontinence") == ""
							|| map.get("totalIncontinence") == ""
							|| map.get("overflowIncontinence") == ""
							|| map.get("acuteUrinaryCheck") == ""
							|| map.get("acuteUrinary") == ""
							|| map.get("calcularia") == "" || map
							.get("calculariaCheck") == "")) {
				jsp = "messageOpdUrologyHaeHyL";
			} else if (((map.get("haeTotal") != "")
					|| (map.get("haeTeriminal") != "")
					|| map.get("haeInitial") != "" || map.get("haeClots") != "")
					&& (map.get("hypogastricPain") != ""
							|| map.get("bonePain") != ""
							|| map.get("dysuriaPain") != "" || map
							.get("perinalRectal") != "")
					&& (map.get("lFrequency") != ""
							|| map.get("lHesitanvy") != ""
							|| map.get("lNocturia") != ""
							|| map.get("lStraining") != ""
							|| map.get("lUrgency") != ""
							|| map.get("lSenseComEva") != ""
							|| map.get("lUrgeIncon") != ""
							|| map.get("lIntermittency") != "" || map
							.get("lDribbling") != "")
					&& (map.get("uretericLeft") == "" || map
							.get("uretericRight") == "")
					&& (map.get("symptomme") == "")
					&& (map.get("chyluriaCheck") != ""
							|| map.get("chyluria") != ""
							|| map.get("erectileDysfunctionCheck") != ""
							|| map.get("erectileDysfunction") != ""
							|| map.get("haemospermia") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("retrogradeEjaculation") != ""
							|| map.get("anejaculationEjaculation") != ""
							|| map.get("stressIncontinence") != ""
							|| map.get("urgeIncontinence") != ""
							|| map.get("totalIncontinence") != ""
							|| map.get("overflowIncontinence") != ""
							|| map.get("acuteUrinaryCheck") != ""
							|| map.get("acuteUrinary") != ""
							|| map.get("calcularia") != "" || map
							.get("calculariaCheck") != "")) {
				jsp = "messageOpdUrologyHaeHyLC";
			} else if (((map.get("haeTotal") != "")
					|| (map.get("haeTeriminal") != "")
					|| map.get("haeInitial") != "" || map.get("haeClots") != "")
					&& (map.get("hypogastricPain") != ""
							|| map.get("bonePain") != ""
							|| map.get("dysuriaPain") != "" || map
							.get("perinalRectal") != "")
					&& (map.get("lFrequency") != ""
							|| map.get("lHesitanvy") != ""
							|| map.get("lNocturia") != ""
							|| map.get("lStraining") != ""
							|| map.get("lUrgency") != ""
							|| map.get("lSenseComEva") != ""
							|| map.get("lUrgeIncon") != ""
							|| map.get("lIntermittency") != "" || map
							.get("lDribbling") != "")
					&& (map.get("uretericLeft") == "" || map
							.get("uretericRight") == "")
					&& (map.get("symptomme") != "")
					&& (map.get("chyluriaCheck") == ""
							|| map.get("chyluria") == ""
							|| map.get("erectileDysfunctionCheck") == ""
							|| map.get("erectileDysfunction") == ""
							|| map.get("haemospermia") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("retrogradeEjaculation") == ""
							|| map.get("anejaculationEjaculation") == ""
							|| map.get("stressIncontinence") == ""
							|| map.get("urgeIncontinence") == ""
							|| map.get("totalIncontinence") == ""
							|| map.get("overflowIncontinence") == ""
							|| map.get("acuteUrinaryCheck") == ""
							|| map.get("acuteUrinary") == ""
							|| map.get("calcularia") == "" || map
							.get("calculariaCheck") == "")) {
				jsp = "messageOpdUrologyHaeHyLS";
			} else if (((map.get("haeTotal") != "")
					|| (map.get("haeTeriminal") != "")
					|| map.get("haeInitial") != "" || map.get("haeClots") != "")
					&& (map.get("hypogastricPain") != ""
							|| map.get("bonePain") != ""
							|| map.get("dysuriaPain") != "" || map
							.get("perinalRectal") != "")
					&& (map.get("lFrequency") != ""
							|| map.get("lHesitanvy") != ""
							|| map.get("lNocturia") != ""
							|| map.get("lStraining") != ""
							|| map.get("lUrgency") != ""
							|| map.get("lSenseComEva") != ""
							|| map.get("lUrgeIncon") != ""
							|| map.get("lIntermittency") != "" || map
							.get("lDribbling") != "")
					&& (map.get("uretericLeft") == "" || map
							.get("uretericRight") == "")
					&& (map.get("symptomme") != "")
					&& (map.get("chyluriaCheck") != ""
							|| map.get("chyluria") != ""
							|| map.get("erectileDysfunctionCheck") != ""
							|| map.get("erectileDysfunction") != ""
							|| map.get("haemospermia") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("retrogradeEjaculation") != ""
							|| map.get("anejaculationEjaculation") != ""
							|| map.get("stressIncontinence") != ""
							|| map.get("urgeIncontinence") != ""
							|| map.get("totalIncontinence") != ""
							|| map.get("overflowIncontinence") != ""
							|| map.get("acuteUrinaryCheck") != ""
							|| map.get("acuteUrinary") != ""
							|| map.get("calcularia") != "" || map
							.get("calculariaCheck") != "")) {
				jsp = "messageOpdUrologyHaeHyLSC";
			} else if (((map.get("haeTotal") != "")
					|| (map.get("haeTeriminal") != "")
					|| map.get("haeInitial") != "" || map.get("haeClots") != "")
					&& (map.get("hypogastricPain") != ""
							|| map.get("bonePain") != ""
							|| map.get("dysuriaPain") != "" || map
							.get("perinalRectal") != "")
					&& (map.get("lFrequency") == ""
							|| map.get("lHesitanvy") == ""
							|| map.get("lNocturia") == ""
							|| map.get("lStraining") == ""
							|| map.get("lUrgency") == ""
							|| map.get("lSenseComEva") == ""
							|| map.get("lUrgeIncon") == ""
							|| map.get("lIntermittency") == "" || map
							.get("lDribbling") == "")
					&& (map.get("uretericLeft") != "" || map
							.get("uretericRight") != "")
					&& (map.get("symptomme") == "")
					&& (map.get("chyluriaCheck") == ""
							|| map.get("chyluria") == ""
							|| map.get("erectileDysfunctionCheck") == ""
							|| map.get("erectileDysfunction") == ""
							|| map.get("haemospermia") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("retrogradeEjaculation") == ""
							|| map.get("anejaculationEjaculation") == ""
							|| map.get("stressIncontinence") == ""
							|| map.get("urgeIncontinence") == ""
							|| map.get("totalIncontinence") == ""
							|| map.get("overflowIncontinence") == ""
							|| map.get("acuteUrinaryCheck") == ""
							|| map.get("acuteUrinary") == ""
							|| map.get("calcularia") == "" || map
							.get("calculariaCheck") == "")) {
				jsp = "messageOpdUrologyHaeHyP";
			} else if (((map.get("haeTotal") != "")
					|| (map.get("haeTeriminal") != "")
					|| map.get("haeInitial") != "" || map.get("haeClots") != "")
					&& (map.get("hypogastricPain") != ""
							|| map.get("bonePain") != ""
							|| map.get("dysuriaPain") != "" || map
							.get("perinalRectal") != "")
					&& (map.get("lFrequency") == ""
							|| map.get("lHesitanvy") == ""
							|| map.get("lNocturia") == ""
							|| map.get("lStraining") == ""
							|| map.get("lUrgency") == ""
							|| map.get("lSenseComEva") == ""
							|| map.get("lUrgeIncon") == ""
							|| map.get("lIntermittency") == "" || map
							.get("lDribbling") == "")
					&& (map.get("uretericLeft") != "" || map
							.get("uretericRight") != "")
					&& (map.get("symptomme") == "")
					&& (map.get("chyluriaCheck") != ""
							|| map.get("chyluria") != ""
							|| map.get("erectileDysfunctionCheck") != ""
							|| map.get("erectileDysfunction") != ""
							|| map.get("haemospermia") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("retrogradeEjaculation") != ""
							|| map.get("anejaculationEjaculation") != ""
							|| map.get("stressIncontinence") != ""
							|| map.get("urgeIncontinence") != ""
							|| map.get("totalIncontinence") != ""
							|| map.get("overflowIncontinence") != ""
							|| map.get("acuteUrinaryCheck") != ""
							|| map.get("acuteUrinary") != ""
							|| map.get("calcularia") != "" || map
							.get("calculariaCheck") != "")) {
				jsp = "messageOpdUrologyHaeHyPC";
			} else if (((map.get("haeTotal") != "")
					|| (map.get("haeTeriminal") != "")
					|| map.get("haeInitial") != "" || map.get("haeClots") != "")
					&& (map.get("hypogastricPain") != ""
							|| map.get("bonePain") != ""
							|| map.get("dysuriaPain") != "" || map
							.get("perinalRectal") != "")
					&& (map.get("lFrequency") == ""
							|| map.get("lHesitanvy") == ""
							|| map.get("lNocturia") == ""
							|| map.get("lStraining") == ""
							|| map.get("lUrgency") == ""
							|| map.get("lSenseComEva") == ""
							|| map.get("lUrgeIncon") == ""
							|| map.get("lIntermittency") == "" || map
							.get("lDribbling") == "")
					&& (map.get("uretericLeft") != "" || map
							.get("uretericRight") != "")
					&& (map.get("symptomme") != "")
					&& (map.get("chyluriaCheck") == ""
							|| map.get("chyluria") == ""
							|| map.get("erectileDysfunctionCheck") == ""
							|| map.get("erectileDysfunction") == ""
							|| map.get("haemospermia") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("retrogradeEjaculation") == ""
							|| map.get("anejaculationEjaculation") == ""
							|| map.get("stressIncontinence") == ""
							|| map.get("urgeIncontinence") == ""
							|| map.get("totalIncontinence") == ""
							|| map.get("overflowIncontinence") == ""
							|| map.get("acuteUrinaryCheck") == ""
							|| map.get("acuteUrinary") == ""
							|| map.get("calcularia") == "" || map
							.get("calculariaCheck") == "")) {
				jsp = "messageOpdUrologyHaeHyPS";
			} else if (((map.get("haeTotal") != "")
					|| (map.get("haeTeriminal") != "")
					|| map.get("haeInitial") != "" || map.get("haeClots") != "")
					&& (map.get("hypogastricPain") != ""
							|| map.get("bonePain") != ""
							|| map.get("dysuriaPain") != "" || map
							.get("perinalRectal") != "")
					&& (map.get("lFrequency") == ""
							|| map.get("lHesitanvy") == ""
							|| map.get("lNocturia") == ""
							|| map.get("lStraining") == ""
							|| map.get("lUrgency") == ""
							|| map.get("lSenseComEva") == ""
							|| map.get("lUrgeIncon") == ""
							|| map.get("lIntermittency") == "" || map
							.get("lDribbling") == "")
					&& (map.get("uretericLeft") != "" || map
							.get("uretericRight") != "")
					&& (map.get("symptomme") != "")
					&& (map.get("chyluriaCheck") != ""
							|| map.get("chyluria") != ""
							|| map.get("erectileDysfunctionCheck") != ""
							|| map.get("erectileDysfunction") != ""
							|| map.get("haemospermia") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("retrogradeEjaculation") != ""
							|| map.get("anejaculationEjaculation") != ""
							|| map.get("stressIncontinence") != ""
							|| map.get("urgeIncontinence") != ""
							|| map.get("totalIncontinence") != ""
							|| map.get("overflowIncontinence") != ""
							|| map.get("acuteUrinaryCheck") != ""
							|| map.get("acuteUrinary") != ""
							|| map.get("calcularia") != "" || map
							.get("calculariaCheck") != "")) {
				jsp = "messageOpdUrologyHaeHyPSC";
			} else if (((map.get("haeTotal") != "")
					|| (map.get("haeTeriminal") != "")
					|| map.get("haeInitial") != "" || map.get("haeClots") != "")
					&& (map.get("hypogastricPain") == ""
							|| map.get("bonePain") == ""
							|| map.get("dysuriaPain") == "" || map
							.get("perinalRectal") == "")
					&& (map.get("lFrequency") != ""
							|| map.get("lHesitanvy") != ""
							|| map.get("lNocturia") != ""
							|| map.get("lStraining") != ""
							|| map.get("lUrgency") != ""
							|| map.get("lSenseComEva") != ""
							|| map.get("lUrgeIncon") != ""
							|| map.get("lIntermittency") != "" || map
							.get("lDribbling") != "")
					&& (map.get("uretericLeft") != "" || map
							.get("uretericRight") != "")
					&& (map.get("symptomme") == "")
					&& (map.get("chyluriaCheck") == ""
							|| map.get("chyluria") == ""
							|| map.get("erectileDysfunctionCheck") == ""
							|| map.get("erectileDysfunction") == ""
							|| map.get("haemospermia") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("retrogradeEjaculation") == ""
							|| map.get("anejaculationEjaculation") == ""
							|| map.get("stressIncontinence") == ""
							|| map.get("urgeIncontinence") == ""
							|| map.get("totalIncontinence") == ""
							|| map.get("overflowIncontinence") == ""
							|| map.get("acuteUrinaryCheck") == ""
							|| map.get("acuteUrinary") == ""
							|| map.get("calcularia") == "" || map
							.get("calculariaCheck") == "")) {
				jsp = "messageOpdUrologyHaeLP";
			} else if (((map.get("haeTotal") != "")
					|| (map.get("haeTeriminal") != "")
					|| map.get("haeInitial") != "" || map.get("haeClots") != "")
					&& (map.get("hypogastricPain") == ""
							|| map.get("bonePain") == ""
							|| map.get("dysuriaPain") == "" || map
							.get("perinalRectal") == "")
					&& (map.get("lFrequency") != ""
							|| map.get("lHesitanvy") != ""
							|| map.get("lNocturia") != ""
							|| map.get("lStraining") != ""
							|| map.get("lUrgency") != ""
							|| map.get("lSenseComEva") != ""
							|| map.get("lUrgeIncon") != ""
							|| map.get("lIntermittency") != "" || map
							.get("lDribbling") != "")
					&& (map.get("uretericLeft") != "" || map
							.get("uretericRight") != "")
					&& (map.get("symptomme") == "")
					&& (map.get("chyluriaCheck") != ""
							|| map.get("chyluria") != ""
							|| map.get("erectileDysfunctionCheck") != ""
							|| map.get("erectileDysfunction") != ""
							|| map.get("haemospermia") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("retrogradeEjaculation") != ""
							|| map.get("anejaculationEjaculation") != ""
							|| map.get("stressIncontinence") != ""
							|| map.get("urgeIncontinence") != ""
							|| map.get("totalIncontinence") != ""
							|| map.get("overflowIncontinence") != ""
							|| map.get("acuteUrinaryCheck") != ""
							|| map.get("acuteUrinary") != ""
							|| map.get("calcularia") != "" || map
							.get("calculariaCheck") != "")) {
				jsp = "messageOpdUrologyHaeLPC";
			} else if (((map.get("haeTotal") != "")
					|| (map.get("haeTeriminal") != "")
					|| map.get("haeInitial") != "" || map.get("haeClots") != "")
					&& (map.get("hypogastricPain") == ""
							|| map.get("bonePain") == ""
							|| map.get("dysuriaPain") == "" || map
							.get("perinalRectal") == "")
					&& (map.get("lFrequency") != ""
							|| map.get("lHesitanvy") != ""
							|| map.get("lNocturia") != ""
							|| map.get("lStraining") != ""
							|| map.get("lUrgency") != ""
							|| map.get("lSenseComEva") != ""
							|| map.get("lUrgeIncon") != ""
							|| map.get("lIntermittency") != "" || map
							.get("lDribbling") != "")
					&& (map.get("uretericLeft") != "" || map
							.get("uretericRight") != "")
					&& (map.get("symptomme") != "")
					&& (map.get("chyluriaCheck") == ""
							|| map.get("chyluria") == ""
							|| map.get("erectileDysfunctionCheck") == ""
							|| map.get("erectileDysfunction") == ""
							|| map.get("haemospermia") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("retrogradeEjaculation") == ""
							|| map.get("anejaculationEjaculation") == ""
							|| map.get("stressIncontinence") == ""
							|| map.get("urgeIncontinence") == ""
							|| map.get("totalIncontinence") == ""
							|| map.get("overflowIncontinence") == ""
							|| map.get("acuteUrinaryCheck") == ""
							|| map.get("acuteUrinary") == ""
							|| map.get("calcularia") == "" || map
							.get("calculariaCheck") == "")) {
				jsp = "messageOpdUrologyHaeLPS";
			} else if (((map.get("haeTotal") != "")
					|| (map.get("haeTeriminal") != "")
					|| map.get("haeInitial") != "" || map.get("haeClots") != "")
					&& (map.get("hypogastricPain") == ""
							|| map.get("bonePain") == ""
							|| map.get("dysuriaPain") == "" || map
							.get("perinalRectal") == "")
					&& (map.get("lFrequency") != ""
							|| map.get("lHesitanvy") != ""
							|| map.get("lNocturia") != ""
							|| map.get("lStraining") != ""
							|| map.get("lUrgency") != ""
							|| map.get("lSenseComEva") != ""
							|| map.get("lUrgeIncon") != ""
							|| map.get("lIntermittency") != "" || map
							.get("lDribbling") != "")
					&& (map.get("uretericLeft") != "" || map
							.get("uretericRight") != "")
					&& (map.get("symptomme") != "")
					&& (map.get("chyluriaCheck") != ""
							|| map.get("chyluria") != ""
							|| map.get("erectileDysfunctionCheck") != ""
							|| map.get("erectileDysfunction") != ""
							|| map.get("haemospermia") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("retrogradeEjaculation") != ""
							|| map.get("anejaculationEjaculation") != ""
							|| map.get("stressIncontinence") != ""
							|| map.get("urgeIncontinence") != ""
							|| map.get("totalIncontinence") != ""
							|| map.get("overflowIncontinence") != ""
							|| map.get("acuteUrinaryCheck") != ""
							|| map.get("acuteUrinary") != ""
							|| map.get("calcularia") != "" || map
							.get("calculariaCheck") != "")) {
				jsp = "messageOpdUrologyHaeLPSC";
			} else if (((map.get("haeTotal") == "")
					|| (map.get("haeTeriminal") == "")
					|| map.get("haeInitial") == "" || map.get("haeClots") == "")
					&& (map.get("hypogastricPain") != ""
							|| map.get("bonePain") != ""
							|| map.get("dysuriaPain") != "" || map
							.get("perinalRectal") != "")
					&& (map.get("lFrequency") == ""
							|| map.get("lHesitanvy") == ""
							|| map.get("lNocturia") == ""
							|| map.get("lStraining") == ""
							|| map.get("lUrgency") == ""
							|| map.get("lSenseComEva") == ""
							|| map.get("lUrgeIncon") == ""
							|| map.get("lIntermittency") == "" || map
							.get("lDribbling") == "")
					&& (map.get("uretericLeft") == "" || map
							.get("uretericRight") == "")
					&& (map.get("symptomme") == "")
					&& (map.get("chyluriaCheck") == ""
							|| map.get("chyluria") == ""
							|| map.get("erectileDysfunctionCheck") == ""
							|| map.get("erectileDysfunction") == ""
							|| map.get("haemospermia") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("retrogradeEjaculation") == ""
							|| map.get("anejaculationEjaculation") == ""
							|| map.get("stressIncontinence") == ""
							|| map.get("urgeIncontinence") == ""
							|| map.get("totalIncontinence") == ""
							|| map.get("overflowIncontinence") == ""
							|| map.get("acuteUrinaryCheck") == ""
							|| map.get("acuteUrinary") == ""
							|| map.get("calcularia") == "" || map
							.get("calculariaCheck") == "")) {
				jsp = "messageOpdUrologyFillUpHy";
			} else if (((map.get("haeTotal") == "")
					|| (map.get("haeTeriminal") == "")
					|| map.get("haeInitial") == "" || map.get("haeClots") == "")
					&& (map.get("hypogastricPain") != ""
							|| map.get("bonePain") != ""
							|| map.get("dysuriaPain") != "" || map
							.get("perinalRectal") != "")
					&& (map.get("lFrequency") == ""
							|| map.get("lHesitanvy") == ""
							|| map.get("lNocturia") == ""
							|| map.get("lStraining") == ""
							|| map.get("lUrgency") == ""
							|| map.get("lSenseComEva") == ""
							|| map.get("lUrgeIncon") == ""
							|| map.get("lIntermittency") == "" || map
							.get("lDribbling") == "")
					&& (map.get("uretericLeft") == "" || map
							.get("uretericRight") == "")
					&& (map.get("symptomme") == "")
					&& (map.get("chyluriaCheck") != ""
							|| map.get("chyluria") != ""
							|| map.get("erectileDysfunctionCheck") != ""
							|| map.get("erectileDysfunction") != ""
							|| map.get("haemospermia") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("retrogradeEjaculation") != ""
							|| map.get("anejaculationEjaculation") != ""
							|| map.get("stressIncontinence") != ""
							|| map.get("urgeIncontinence") != ""
							|| map.get("totalIncontinence") != ""
							|| map.get("overflowIncontinence") != ""
							|| map.get("acuteUrinaryCheck") != ""
							|| map.get("acuteUrinary") != ""
							|| map.get("calcularia") != "" || map
							.get("calculariaCheck") != "")) {
				jsp = "messageOpdUrologyFillUpHyC";
			} else if (((map.get("haeTotal") == "")
					|| (map.get("haeTeriminal") == "")
					|| map.get("haeInitial") == "" || map.get("haeClots") == "")
					&& (map.get("hypogastricPain") != ""
							|| map.get("bonePain") != ""
							|| map.get("dysuriaPain") != "" || map
							.get("perinalRectal") != "")
					&& (map.get("lFrequency") == ""
							|| map.get("lHesitanvy") == ""
							|| map.get("lNocturia") == ""
							|| map.get("lStraining") == ""
							|| map.get("lUrgency") == ""
							|| map.get("lSenseComEva") == ""
							|| map.get("lUrgeIncon") == ""
							|| map.get("lIntermittency") == "" || map
							.get("lDribbling") == "")
					&& (map.get("uretericLeft") == "" || map
							.get("uretericRight") == "")
					&& (map.get("symptomme") != "")
					&& (map.get("chyluriaCheck") == ""
							|| map.get("chyluria") == ""
							|| map.get("erectileDysfunctionCheck") == ""
							|| map.get("erectileDysfunction") == ""
							|| map.get("haemospermia") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("retrogradeEjaculation") == ""
							|| map.get("anejaculationEjaculation") == ""
							|| map.get("stressIncontinence") == ""
							|| map.get("urgeIncontinence") == ""
							|| map.get("totalIncontinence") == ""
							|| map.get("overflowIncontinence") == ""
							|| map.get("acuteUrinaryCheck") == ""
							|| map.get("acuteUrinary") == ""
							|| map.get("calcularia") == "" || map
							.get("calculariaCheck") == "")) {
				jsp = "messageOpdUrologyFillUpHyS";
			} else if (((map.get("haeTotal") == "")
					|| (map.get("haeTeriminal") == "")
					|| map.get("haeInitial") == "" || map.get("haeClots") == "")
					&& (map.get("hypogastricPain") != ""
							|| map.get("bonePain") != ""
							|| map.get("dysuriaPain") != "" || map
							.get("perinalRectal") != "")
					&& (map.get("lFrequency") == ""
							|| map.get("lHesitanvy") == ""
							|| map.get("lNocturia") == ""
							|| map.get("lStraining") == ""
							|| map.get("lUrgency") == ""
							|| map.get("lSenseComEva") == ""
							|| map.get("lUrgeIncon") == ""
							|| map.get("lIntermittency") == "" || map
							.get("lDribbling") == "")
					&& (map.get("uretericLeft") == "" || map
							.get("uretericRight") == "")
					&& (map.get("symptomme") != "")
					&& (map.get("chyluriaCheck") != ""
							|| map.get("chyluria") != ""
							|| map.get("erectileDysfunctionCheck") != ""
							|| map.get("erectileDysfunction") != ""
							|| map.get("haemospermia") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("retrogradeEjaculation") != ""
							|| map.get("anejaculationEjaculation") != ""
							|| map.get("stressIncontinence") != ""
							|| map.get("urgeIncontinence") != ""
							|| map.get("totalIncontinence") != ""
							|| map.get("overflowIncontinence") != ""
							|| map.get("acuteUrinaryCheck") != ""
							|| map.get("acuteUrinary") != ""
							|| map.get("calcularia") != "" || map
							.get("calculariaCheck") != "")) {
				jsp = "messageOpdUrologyFillUpHySC";
			} else if (((map.get("haeTotal") == "")
					|| (map.get("haeTeriminal") == "")
					|| map.get("haeInitial") == "" || map.get("haeClots") == "")
					&& (map.get("hypogastricPain") != ""
							|| map.get("bonePain") != ""
							|| map.get("dysuriaPain") != "" || map
							.get("perinalRectal") != "")
					&& (map.get("lFrequency") != ""
							|| map.get("lHesitanvy") != ""
							|| map.get("lNocturia") != ""
							|| map.get("lStraining") != ""
							|| map.get("lUrgency") != ""
							|| map.get("lSenseComEva") != ""
							|| map.get("lUrgeIncon") != ""
							|| map.get("lIntermittency") != "" || map
							.get("lDribbling") != "")
					&& (map.get("uretericLeft") == "" || map
							.get("uretericRight") == "")
					&& (map.get("symptomme") == "")
					&& (map.get("chyluriaCheck") == ""
							|| map.get("chyluria") == ""
							|| map.get("erectileDysfunctionCheck") == ""
							|| map.get("erectileDysfunction") == ""
							|| map.get("haemospermia") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("retrogradeEjaculation") == ""
							|| map.get("anejaculationEjaculation") == ""
							|| map.get("stressIncontinence") == ""
							|| map.get("urgeIncontinence") == ""
							|| map.get("totalIncontinence") == ""
							|| map.get("overflowIncontinence") == ""
							|| map.get("acuteUrinaryCheck") == ""
							|| map.get("acuteUrinary") == ""
							|| map.get("calcularia") == "" || map
							.get("calculariaCheck") == "")) {
				jsp = "messageOpdUrologyFillUpHyL";
			} else if (((map.get("haeTotal") == "")
					|| (map.get("haeTeriminal") == "")
					|| map.get("haeInitial") == "" || map.get("haeClots") == "")
					&& (map.get("hypogastricPain") != ""
							|| map.get("bonePain") != ""
							|| map.get("dysuriaPain") != "" || map
							.get("perinalRectal") != "")
					&& (map.get("lFrequency") != ""
							|| map.get("lHesitanvy") != ""
							|| map.get("lNocturia") != ""
							|| map.get("lStraining") != ""
							|| map.get("lUrgency") != ""
							|| map.get("lSenseComEva") != ""
							|| map.get("lUrgeIncon") != ""
							|| map.get("lIntermittency") != "" || map
							.get("lDribbling") != "")
					&& (map.get("uretericLeft") == "" || map
							.get("uretericRight") == "")
					&& (map.get("symptomme") == "")
					&& (map.get("chyluriaCheck") != ""
							|| map.get("chyluria") != ""
							|| map.get("erectileDysfunctionCheck") != ""
							|| map.get("erectileDysfunction") != ""
							|| map.get("haemospermia") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("retrogradeEjaculation") != ""
							|| map.get("anejaculationEjaculation") != ""
							|| map.get("stressIncontinence") != ""
							|| map.get("urgeIncontinence") != ""
							|| map.get("totalIncontinence") != ""
							|| map.get("overflowIncontinence") != ""
							|| map.get("acuteUrinaryCheck") != ""
							|| map.get("acuteUrinary") != ""
							|| map.get("calcularia") != "" || map
							.get("calculariaCheck") != "")) {
				jsp = "messageOpdUrologyFillUpHyLC";
			} else if (((map.get("haeTotal") == "")
					|| (map.get("haeTeriminal") == "")
					|| map.get("haeInitial") == "" || map.get("haeClots") == "")
					&& (map.get("hypogastricPain") != ""
							|| map.get("bonePain") != ""
							|| map.get("dysuriaPain") != "" || map
							.get("perinalRectal") != "")
					&& (map.get("lFrequency") != ""
							|| map.get("lHesitanvy") != ""
							|| map.get("lNocturia") != ""
							|| map.get("lStraining") != ""
							|| map.get("lUrgency") != ""
							|| map.get("lSenseComEva") != ""
							|| map.get("lUrgeIncon") != ""
							|| map.get("lIntermittency") != "" || map
							.get("lDribbling") != "")
					&& (map.get("uretericLeft") == "" || map
							.get("uretericRight") == "")
					&& (map.get("symptomme") != "")
					&& (map.get("chyluriaCheck") == ""
							|| map.get("chyluria") == ""
							|| map.get("erectileDysfunctionCheck") == ""
							|| map.get("erectileDysfunction") == ""
							|| map.get("haemospermia") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("retrogradeEjaculation") == ""
							|| map.get("anejaculationEjaculation") == ""
							|| map.get("stressIncontinence") == ""
							|| map.get("urgeIncontinence") == ""
							|| map.get("totalIncontinence") == ""
							|| map.get("overflowIncontinence") == ""
							|| map.get("acuteUrinaryCheck") == ""
							|| map.get("acuteUrinary") == ""
							|| map.get("calcularia") == "" || map
							.get("calculariaCheck") == "")) {
				jsp = "messageOpdUrologyFillUpHyLS";
			} else if (((map.get("haeTotal") == "")
					|| (map.get("haeTeriminal") == "")
					|| map.get("haeInitial") == "" || map.get("haeClots") == "")
					&& (map.get("hypogastricPain") != ""
							|| map.get("bonePain") != ""
							|| map.get("dysuriaPain") != "" || map
							.get("perinalRectal") != "")
					&& (map.get("lFrequency") != ""
							|| map.get("lHesitanvy") != ""
							|| map.get("lNocturia") != ""
							|| map.get("lStraining") != ""
							|| map.get("lUrgency") != ""
							|| map.get("lSenseComEva") != ""
							|| map.get("lUrgeIncon") != ""
							|| map.get("lIntermittency") != "" || map
							.get("lDribbling") != "")
					&& (map.get("uretericLeft") == "" || map
							.get("uretericRight") == "")
					&& (map.get("symptomme") != "")
					&& (map.get("chyluriaCheck") != ""
							|| map.get("chyluria") != ""
							|| map.get("erectileDysfunctionCheck") != ""
							|| map.get("erectileDysfunction") != ""
							|| map.get("haemospermia") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("retrogradeEjaculation") != ""
							|| map.get("anejaculationEjaculation") != ""
							|| map.get("stressIncontinence") != ""
							|| map.get("urgeIncontinence") != ""
							|| map.get("totalIncontinence") != ""
							|| map.get("overflowIncontinence") != ""
							|| map.get("acuteUrinaryCheck") != ""
							|| map.get("acuteUrinary") != ""
							|| map.get("calcularia") != "" || map
							.get("calculariaCheck") != "")) {
				jsp = "messageOpdUrologyFillUpHyLSC";
			} else if (((map.get("haeTotal") == "")
					|| (map.get("haeTeriminal") == "")
					|| map.get("haeInitial") == "" || map.get("haeClots") == "")
					&& (map.get("hypogastricPain") != ""
							|| map.get("bonePain") != ""
							|| map.get("dysuriaPain") != "" || map
							.get("perinalRectal") != "")
					&& (map.get("lFrequency") == ""
							|| map.get("lHesitanvy") == ""
							|| map.get("lNocturia") == ""
							|| map.get("lStraining") == ""
							|| map.get("lUrgency") == ""
							|| map.get("lSenseComEva") == ""
							|| map.get("lUrgeIncon") == ""
							|| map.get("lIntermittency") == "" || map
							.get("lDribbling") == "")
					&& (map.get("uretericLeft") != "" || map
							.get("uretericRight") != "")
					&& (map.get("symptomme") == "")
					&& (map.get("chyluriaCheck") == ""
							|| map.get("chyluria") == ""
							|| map.get("erectileDysfunctionCheck") == ""
							|| map.get("erectileDysfunction") == ""
							|| map.get("haemospermia") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("retrogradeEjaculation") == ""
							|| map.get("anejaculationEjaculation") == ""
							|| map.get("stressIncontinence") == ""
							|| map.get("urgeIncontinence") == ""
							|| map.get("totalIncontinence") == ""
							|| map.get("overflowIncontinence") == ""
							|| map.get("acuteUrinaryCheck") == ""
							|| map.get("acuteUrinary") == ""
							|| map.get("calcularia") == "" || map
							.get("calculariaCheck") == "")) {
				jsp = "messageOpdUrologyFillUpHyP";
			} else if (((map.get("haeTotal") == "")
					|| (map.get("haeTeriminal") == "")
					|| map.get("haeInitial") == "" || map.get("haeClots") == "")
					&& (map.get("hypogastricPain") != ""
							|| map.get("bonePain") != ""
							|| map.get("dysuriaPain") != "" || map
							.get("perinalRectal") != "")
					&& (map.get("lFrequency") == ""
							|| map.get("lHesitanvy") == ""
							|| map.get("lNocturia") == ""
							|| map.get("lStraining") == ""
							|| map.get("lUrgency") == ""
							|| map.get("lSenseComEva") == ""
							|| map.get("lUrgeIncon") == ""
							|| map.get("lIntermittency") == "" || map
							.get("lDribbling") == "")
					&& (map.get("uretericLeft") != "" || map
							.get("uretericRight") != "")
					&& (map.get("symptomme") == "")
					&& (map.get("chyluriaCheck") != ""
							|| map.get("chyluria") != ""
							|| map.get("erectileDysfunctionCheck") != ""
							|| map.get("erectileDysfunction") != ""
							|| map.get("haemospermia") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("retrogradeEjaculation") != ""
							|| map.get("anejaculationEjaculation") != ""
							|| map.get("stressIncontinence") != ""
							|| map.get("urgeIncontinence") != ""
							|| map.get("totalIncontinence") != ""
							|| map.get("overflowIncontinence") != ""
							|| map.get("acuteUrinaryCheck") != ""
							|| map.get("acuteUrinary") != ""
							|| map.get("calcularia") != "" || map
							.get("calculariaCheck") != "")) {
				jsp = "messageOpdUrologyFillUpHyPC";
			} else if (((map.get("haeTotal") == "")
					|| (map.get("haeTeriminal") == "")
					|| map.get("haeInitial") == "" || map.get("haeClots") == "")
					&& (map.get("hypogastricPain") != ""
							|| map.get("bonePain") != ""
							|| map.get("dysuriaPain") != "" || map
							.get("perinalRectal") != "")
					&& (map.get("lFrequency") == ""
							|| map.get("lHesitanvy") == ""
							|| map.get("lNocturia") == ""
							|| map.get("lStraining") == ""
							|| map.get("lUrgency") == ""
							|| map.get("lSenseComEva") == ""
							|| map.get("lUrgeIncon") == ""
							|| map.get("lIntermittency") == "" || map
							.get("lDribbling") == "")
					&& (map.get("uretericLeft") != "" || map
							.get("uretericRight") != "")
					&& (map.get("symptomme") != "")
					&& (map.get("chyluriaCheck") == ""
							|| map.get("chyluria") == ""
							|| map.get("erectileDysfunctionCheck") == ""
							|| map.get("erectileDysfunction") == ""
							|| map.get("haemospermia") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("retrogradeEjaculation") == ""
							|| map.get("anejaculationEjaculation") == ""
							|| map.get("stressIncontinence") == ""
							|| map.get("urgeIncontinence") == ""
							|| map.get("totalIncontinence") == ""
							|| map.get("overflowIncontinence") == ""
							|| map.get("acuteUrinaryCheck") == ""
							|| map.get("acuteUrinary") == ""
							|| map.get("calcularia") == "" || map
							.get("calculariaCheck") == "")) {
				jsp = "messageOpdUrologyFillUpHyPS";
			} else if (((map.get("haeTotal") == "")
					|| (map.get("haeTeriminal") == "")
					|| map.get("haeInitial") == "" || map.get("haeClots") == "")
					&& (map.get("hypogastricPain") != ""
							|| map.get("bonePain") != ""
							|| map.get("dysuriaPain") != "" || map
							.get("perinalRectal") != "")
					&& (map.get("lFrequency") == ""
							|| map.get("lHesitanvy") == ""
							|| map.get("lNocturia") == ""
							|| map.get("lStraining") == ""
							|| map.get("lUrgency") == ""
							|| map.get("lSenseComEva") == ""
							|| map.get("lUrgeIncon") == ""
							|| map.get("lIntermittency") == "" || map
							.get("lDribbling") == "")
					&& (map.get("uretericLeft") != "" || map
							.get("uretericRight") != "")
					&& (map.get("symptomme") != "")
					&& (map.get("chyluriaCheck") != ""
							|| map.get("chyluria") != ""
							|| map.get("erectileDysfunctionCheck") != ""
							|| map.get("erectileDysfunction") != ""
							|| map.get("haemospermia") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("retrogradeEjaculation") != ""
							|| map.get("anejaculationEjaculation") != ""
							|| map.get("stressIncontinence") != ""
							|| map.get("urgeIncontinence") != ""
							|| map.get("totalIncontinence") != ""
							|| map.get("overflowIncontinence") != ""
							|| map.get("acuteUrinaryCheck") != ""
							|| map.get("acuteUrinary") != ""
							|| map.get("calcularia") != "" || map
							.get("calculariaCheck") != "")) {
				jsp = "messageOpdUrologyFillUpHyPSC";
			} else if (((map.get("haeTotal") == "")
					|| (map.get("haeTeriminal") == "")
					|| map.get("haeInitial") == "" || map.get("haeClots") == "")
					&& (map.get("hypogastricPain") != ""
							|| map.get("bonePain") != ""
							|| map.get("dysuriaPain") != "" || map
							.get("perinalRectal") != "")
					&& (map.get("lFrequency") != ""
							|| map.get("lHesitanvy") != ""
							|| map.get("lNocturia") != ""
							|| map.get("lStraining") != ""
							|| map.get("lUrgency") != ""
							|| map.get("lSenseComEva") != ""
							|| map.get("lUrgeIncon") != ""
							|| map.get("lIntermittency") != "" || map
							.get("lDribbling") != "")
					&& (map.get("uretericLeft") != "" || map
							.get("uretericRight") != "")
					&& (map.get("symptomme") == "")
					&& (map.get("chyluriaCheck") == ""
							|| map.get("chyluria") == ""
							|| map.get("erectileDysfunctionCheck") == ""
							|| map.get("erectileDysfunction") == ""
							|| map.get("haemospermia") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("retrogradeEjaculation") == ""
							|| map.get("anejaculationEjaculation") == ""
							|| map.get("stressIncontinence") == ""
							|| map.get("urgeIncontinence") == ""
							|| map.get("totalIncontinence") == ""
							|| map.get("overflowIncontinence") == ""
							|| map.get("acuteUrinaryCheck") == ""
							|| map.get("acuteUrinary") == ""
							|| map.get("calcularia") == "" || map
							.get("calculariaCheck") == "")) {
				jsp = "messageOpdUrologyFillUpHyLP";
			} else if (((map.get("haeTotal") == "")
					|| (map.get("haeTeriminal") == "")
					|| map.get("haeInitial") == "" || map.get("haeClots") == "")
					&& (map.get("hypogastricPain") != ""
							|| map.get("bonePain") != ""
							|| map.get("dysuriaPain") != "" || map
							.get("perinalRectal") != "")
					&& (map.get("lFrequency") != ""
							|| map.get("lHesitanvy") != ""
							|| map.get("lNocturia") != ""
							|| map.get("lStraining") != ""
							|| map.get("lUrgency") != ""
							|| map.get("lSenseComEva") != ""
							|| map.get("lUrgeIncon") != ""
							|| map.get("lIntermittency") != "" || map
							.get("lDribbling") != "")
					&& (map.get("uretericLeft") != "" || map
							.get("uretericRight") != "")
					&& (map.get("symptomme") == "")
					&& (map.get("chyluriaCheck") != ""
							|| map.get("chyluria") != ""
							|| map.get("erectileDysfunctionCheck") != ""
							|| map.get("erectileDysfunction") != ""
							|| map.get("haemospermia") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("retrogradeEjaculation") != ""
							|| map.get("anejaculationEjaculation") != ""
							|| map.get("stressIncontinence") != ""
							|| map.get("urgeIncontinence") != ""
							|| map.get("totalIncontinence") != ""
							|| map.get("overflowIncontinence") != ""
							|| map.get("acuteUrinaryCheck") != ""
							|| map.get("acuteUrinary") != ""
							|| map.get("calcularia") != "" || map
							.get("calculariaCheck") != "")) {
				jsp = "messageOpdUrologyFillUpHyLPC";
			} else if (((map.get("haeTotal") == "")
					|| (map.get("haeTeriminal") == "")
					|| map.get("haeInitial") == "" || map.get("haeClots") == "")
					&& (map.get("hypogastricPain") != ""
							|| map.get("bonePain") != ""
							|| map.get("dysuriaPain") != "" || map
							.get("perinalRectal") != "")
					&& (map.get("lFrequency") != ""
							|| map.get("lHesitanvy") != ""
							|| map.get("lNocturia") != ""
							|| map.get("lStraining") != ""
							|| map.get("lUrgency") != ""
							|| map.get("lSenseComEva") != ""
							|| map.get("lUrgeIncon") != ""
							|| map.get("lIntermittency") != "" || map
							.get("lDribbling") != "")
					&& (map.get("uretericLeft") != "" || map
							.get("uretericRight") != "")
					&& (map.get("symptomme") != "")
					&& (map.get("chyluriaCheck") == ""
							|| map.get("chyluria") == ""
							|| map.get("erectileDysfunctionCheck") == ""
							|| map.get("erectileDysfunction") == ""
							|| map.get("haemospermia") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("retrogradeEjaculation") == ""
							|| map.get("anejaculationEjaculation") == ""
							|| map.get("stressIncontinence") == ""
							|| map.get("urgeIncontinence") == ""
							|| map.get("totalIncontinence") == ""
							|| map.get("overflowIncontinence") == ""
							|| map.get("acuteUrinaryCheck") == ""
							|| map.get("acuteUrinary") == ""
							|| map.get("calcularia") == "" || map
							.get("calculariaCheck") == "")) {
				jsp = "messageOpdUrologyFillUpHyLPS";
			} else if (((map.get("haeTotal") == "")
					|| (map.get("haeTeriminal") == "")
					|| map.get("haeInitial") == "" || map.get("haeClots") == "")
					&& (map.get("hypogastricPain") != ""
							|| map.get("bonePain") != ""
							|| map.get("dysuriaPain") != "" || map
							.get("perinalRectal") != "")
					&& (map.get("lFrequency") != ""
							|| map.get("lHesitanvy") != ""
							|| map.get("lNocturia") != ""
							|| map.get("lStraining") != ""
							|| map.get("lUrgency") != ""
							|| map.get("lSenseComEva") != ""
							|| map.get("lUrgeIncon") != ""
							|| map.get("lIntermittency") != "" || map
							.get("lDribbling") != "")
					&& (map.get("uretericLeft") != "" || map
							.get("uretericRight") != "")
					&& (map.get("symptomme") != "")
					&& (map.get("chyluriaCheck") != ""
							|| map.get("chyluria") != ""
							|| map.get("erectileDysfunctionCheck") != ""
							|| map.get("erectileDysfunction") != ""
							|| map.get("haemospermia") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("retrogradeEjaculation") != ""
							|| map.get("anejaculationEjaculation") != ""
							|| map.get("stressIncontinence") != ""
							|| map.get("urgeIncontinence") != ""
							|| map.get("totalIncontinence") != ""
							|| map.get("overflowIncontinence") != ""
							|| map.get("acuteUrinaryCheck") != ""
							|| map.get("acuteUrinary") != ""
							|| map.get("calcularia") != "" || map
							.get("calculariaCheck") != "")) {
				jsp = "messageOpdUrologyFillUpHyLPSC";
			} else if (((map.get("haeTotal") == "")
					|| (map.get("haeTeriminal") == "")
					|| map.get("haeInitial") == "" || map.get("haeClots") == "")
					&& (map.get("hypogastricPain") == ""
							|| map.get("bonePain") == ""
							|| map.get("dysuriaPain") == "" || map
							.get("perinalRectal") == "")
					&& (map.get("lFrequency") != ""
							|| map.get("lHesitanvy") != ""
							|| map.get("lNocturia") != ""
							|| map.get("lStraining") != ""
							|| map.get("lUrgency") != ""
							|| map.get("lSenseComEva") != ""
							|| map.get("lUrgeIncon") != ""
							|| map.get("lIntermittency") != "" || map
							.get("lDribbling") != "")
					&& (map.get("uretericLeft") == "" || map
							.get("uretericRight") == "")
					&& (map.get("symptomme") == "")
					&& (map.get("chyluriaCheck") == ""
							|| map.get("chyluria") == ""
							|| map.get("erectileDysfunctionCheck") == ""
							|| map.get("erectileDysfunction") == ""
							|| map.get("haemospermia") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("retrogradeEjaculation") == ""
							|| map.get("anejaculationEjaculation") == ""
							|| map.get("stressIncontinence") == ""
							|| map.get("urgeIncontinence") == ""
							|| map.get("totalIncontinence") == ""
							|| map.get("overflowIncontinence") == ""
							|| map.get("acuteUrinaryCheck") == ""
							|| map.get("acuteUrinary") == ""
							|| map.get("calcularia") == "" || map
							.get("calculariaCheck") == "")) {
				jsp = "messageOpdUrologyNotFillUpL";
			} else if (((map.get("haeTotal") == "")
					|| (map.get("haeTeriminal") == "")
					|| map.get("haeInitial") == "" || map.get("haeClots") == "")
					&& (map.get("hypogastricPain") == ""
							|| map.get("bonePain") == ""
							|| map.get("dysuriaPain") == "" || map
							.get("perinalRectal") == "")
					&& (map.get("lFrequency") != ""
							|| map.get("lHesitanvy") != ""
							|| map.get("lNocturia") != ""
							|| map.get("lStraining") != ""
							|| map.get("lUrgency") != ""
							|| map.get("lSenseComEva") != ""
							|| map.get("lUrgeIncon") != ""
							|| map.get("lIntermittency") != "" || map
							.get("lDribbling") != "")
					&& (map.get("uretericLeft") == "" || map
							.get("uretericRight") == "")
					&& (map.get("symptomme") == "")
					&& (map.get("chyluriaCheck") != ""
							|| map.get("chyluria") != ""
							|| map.get("erectileDysfunctionCheck") != ""
							|| map.get("erectileDysfunction") != ""
							|| map.get("haemospermia") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("retrogradeEjaculation") != ""
							|| map.get("anejaculationEjaculation") != ""
							|| map.get("stressIncontinence") != ""
							|| map.get("urgeIncontinence") != ""
							|| map.get("totalIncontinence") != ""
							|| map.get("overflowIncontinence") != ""
							|| map.get("acuteUrinaryCheck") != ""
							|| map.get("acuteUrinary") != ""
							|| map.get("calcularia") != "" || map
							.get("calculariaCheck") != "")) {
				jsp = "messageOpdUrologyNotFillUpLC";
			} else if (((map.get("haeTotal") == "")
					|| (map.get("haeTeriminal") == "")
					|| map.get("haeInitial") == "" || map.get("haeClots") == "")
					&& (map.get("hypogastricPain") == ""
							|| map.get("bonePain") == ""
							|| map.get("dysuriaPain") == "" || map
							.get("perinalRectal") == "")
					&& (map.get("lFrequency") != ""
							|| map.get("lHesitanvy") != ""
							|| map.get("lNocturia") != ""
							|| map.get("lStraining") != ""
							|| map.get("lUrgency") != ""
							|| map.get("lSenseComEva") != ""
							|| map.get("lUrgeIncon") != ""
							|| map.get("lIntermittency") != "" || map
							.get("lDribbling") != "")
					&& (map.get("uretericLeft") == "" || map
							.get("uretericRight") == "")
					&& (map.get("symptomme") != "")
					&& (map.get("chyluriaCheck") == ""
							|| map.get("chyluria") == ""
							|| map.get("erectileDysfunctionCheck") == ""
							|| map.get("erectileDysfunction") == ""
							|| map.get("haemospermia") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("retrogradeEjaculation") == ""
							|| map.get("anejaculationEjaculation") == ""
							|| map.get("stressIncontinence") == ""
							|| map.get("urgeIncontinence") == ""
							|| map.get("totalIncontinence") == ""
							|| map.get("overflowIncontinence") == ""
							|| map.get("acuteUrinaryCheck") == ""
							|| map.get("acuteUrinary") == ""
							|| map.get("calcularia") == "" || map
							.get("calculariaCheck") == "")) {
				jsp = "messageOpdUrologyNotFillUpLS";
			} else if (((map.get("haeTotal") == "")
					|| (map.get("haeTeriminal") == "")
					|| map.get("haeInitial") == "" || map.get("haeClots") == "")
					&& (map.get("hypogastricPain") == ""
							|| map.get("bonePain") == ""
							|| map.get("dysuriaPain") == "" || map
							.get("perinalRectal") == "")
					&& (map.get("lFrequency") != ""
							|| map.get("lHesitanvy") != ""
							|| map.get("lNocturia") != ""
							|| map.get("lStraining") != ""
							|| map.get("lUrgency") != ""
							|| map.get("lSenseComEva") != ""
							|| map.get("lUrgeIncon") != ""
							|| map.get("lIntermittency") != "" || map
							.get("lDribbling") != "")
					&& (map.get("uretericLeft") == "" || map
							.get("uretericRight") == "")
					&& (map.get("symptomme") != "")
					&& (map.get("chyluriaCheck") != ""
							|| map.get("chyluria") != ""
							|| map.get("erectileDysfunctionCheck") != ""
							|| map.get("erectileDysfunction") != ""
							|| map.get("haemospermia") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("retrogradeEjaculation") != ""
							|| map.get("anejaculationEjaculation") != ""
							|| map.get("stressIncontinence") != ""
							|| map.get("urgeIncontinence") != ""
							|| map.get("totalIncontinence") != ""
							|| map.get("overflowIncontinence") != ""
							|| map.get("acuteUrinaryCheck") != ""
							|| map.get("acuteUrinary") != ""
							|| map.get("calcularia") != "" || map
							.get("calculariaCheck") != "")) {
				jsp = "messageOpdUrologyNotFillUpLSC";
			} else if (((map.get("haeTotal") == "")
					|| (map.get("haeTeriminal") == "")
					|| map.get("haeInitial") == "" || map.get("haeClots") == "")
					&& (map.get("hypogastricPain") == ""
							|| map.get("bonePain") == ""
							|| map.get("dysuriaPain") == "" || map
							.get("perinalRectal") == "")
					&& (map.get("lFrequency") != ""
							|| map.get("lHesitanvy") != ""
							|| map.get("lNocturia") != ""
							|| map.get("lStraining") != ""
							|| map.get("lUrgency") != ""
							|| map.get("lSenseComEva") != ""
							|| map.get("lUrgeIncon") != ""
							|| map.get("lIntermittency") != "" || map
							.get("lDribbling") != "")
					&& (map.get("uretericLeft") != "" || map
							.get("uretericRight") != "")
					&& (map.get("symptomme") == "")
					&& (map.get("chyluriaCheck") == ""
							|| map.get("chyluria") == ""
							|| map.get("erectileDysfunctionCheck") == ""
							|| map.get("erectileDysfunction") == ""
							|| map.get("haemospermia") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("retrogradeEjaculation") == ""
							|| map.get("anejaculationEjaculation") == ""
							|| map.get("stressIncontinence") == ""
							|| map.get("urgeIncontinence") == ""
							|| map.get("totalIncontinence") == ""
							|| map.get("overflowIncontinence") == ""
							|| map.get("acuteUrinaryCheck") == ""
							|| map.get("acuteUrinary") == ""
							|| map.get("calcularia") == "" || map
							.get("calculariaCheck") == "")) {
				jsp = "messageOpdUrologyLP";
			} else if (((map.get("haeTotal") == "")
					|| (map.get("haeTeriminal") == "")
					|| map.get("haeInitial") == "" || map.get("haeClots") == "")
					&& (map.get("hypogastricPain") == ""
							|| map.get("bonePain") == ""
							|| map.get("dysuriaPain") == "" || map
							.get("perinalRectal") == "")
					&& (map.get("lFrequency") != ""
							|| map.get("lHesitanvy") != ""
							|| map.get("lNocturia") != ""
							|| map.get("lStraining") != ""
							|| map.get("lUrgency") != ""
							|| map.get("lSenseComEva") != ""
							|| map.get("lUrgeIncon") != ""
							|| map.get("lIntermittency") != "" || map
							.get("lDribbling") != "")
					&& (map.get("uretericLeft") != "" || map
							.get("uretericRight") != "")
					&& (map.get("symptomme") == "")
					&& (map.get("chyluriaCheck") != ""
							|| map.get("chyluria") != ""
							|| map.get("erectileDysfunctionCheck") != ""
							|| map.get("erectileDysfunction") != ""
							|| map.get("haemospermia") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("retrogradeEjaculation") != ""
							|| map.get("anejaculationEjaculation") != ""
							|| map.get("stressIncontinence") != ""
							|| map.get("urgeIncontinence") != ""
							|| map.get("totalIncontinence") != ""
							|| map.get("overflowIncontinence") != ""
							|| map.get("acuteUrinaryCheck") != ""
							|| map.get("acuteUrinary") != ""
							|| map.get("calcularia") != "" || map
							.get("calculariaCheck") != "")) {
				jsp = "messageOpdUrologyLPC";
			} else if (((map.get("haeTotal") == "")
					|| (map.get("haeTeriminal") == "")
					|| map.get("haeInitial") == "" || map.get("haeClots") == "")
					&& (map.get("hypogastricPain") == ""
							|| map.get("bonePain") == ""
							|| map.get("dysuriaPain") == "" || map
							.get("perinalRectal") == "")
					&& (map.get("lFrequency") != ""
							|| map.get("lHesitanvy") != ""
							|| map.get("lNocturia") != ""
							|| map.get("lStraining") != ""
							|| map.get("lUrgency") != ""
							|| map.get("lSenseComEva") != ""
							|| map.get("lUrgeIncon") != ""
							|| map.get("lIntermittency") != "" || map
							.get("lDribbling") != "")
					&& (map.get("uretericLeft") != "" || map
							.get("uretericRight") != "")
					&& (map.get("symptomme") != "")
					&& (map.get("chyluriaCheck") == ""
							|| map.get("chyluria") == ""
							|| map.get("erectileDysfunctionCheck") == ""
							|| map.get("erectileDysfunction") == ""
							|| map.get("haemospermia") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("retrogradeEjaculation") == ""
							|| map.get("anejaculationEjaculation") == ""
							|| map.get("stressIncontinence") == ""
							|| map.get("urgeIncontinence") == ""
							|| map.get("totalIncontinence") == ""
							|| map.get("overflowIncontinence") == ""
							|| map.get("acuteUrinaryCheck") == ""
							|| map.get("acuteUrinary") == ""
							|| map.get("calcularia") == "" || map
							.get("calculariaCheck") == "")) {
				jsp = "messageOpdUrologyLPS";
			} else if (((map.get("haeTotal") == "")
					|| (map.get("haeTeriminal") == "")
					|| map.get("haeInitial") == "" || map.get("haeClots") == "")
					&& (map.get("hypogastricPain") == ""
							|| map.get("bonePain") == ""
							|| map.get("dysuriaPain") == "" || map
							.get("perinalRectal") == "")
					&& (map.get("lFrequency") != ""
							|| map.get("lHesitanvy") != ""
							|| map.get("lNocturia") != ""
							|| map.get("lStraining") != ""
							|| map.get("lUrgency") != ""
							|| map.get("lSenseComEva") != ""
							|| map.get("lUrgeIncon") != ""
							|| map.get("lIntermittency") != "" || map
							.get("lDribbling") != "")
					&& (map.get("uretericLeft") != "" || map
							.get("uretericRight") != "")
					&& (map.get("symptomme") != "")
					&& (map.get("chyluriaCheck") != ""
							|| map.get("chyluria") != ""
							|| map.get("erectileDysfunctionCheck") != ""
							|| map.get("erectileDysfunction") != ""
							|| map.get("haemospermia") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("retrogradeEjaculation") != ""
							|| map.get("anejaculationEjaculation") != ""
							|| map.get("stressIncontinence") != ""
							|| map.get("urgeIncontinence") != ""
							|| map.get("totalIncontinence") != ""
							|| map.get("overflowIncontinence") != ""
							|| map.get("acuteUrinaryCheck") != ""
							|| map.get("acuteUrinary") != ""
							|| map.get("calcularia") != "" || map
							.get("calculariaCheck") != "")) {
				jsp = "messageOpdUrologyLPSC";
			} else if (((map.get("haeTotal") == "")
					|| (map.get("haeTeriminal") == "")
					|| map.get("haeInitial") == "" || map.get("haeClots") == "")
					&& (map.get("hypogastricPain") == ""
							|| map.get("bonePain") == ""
							|| map.get("dysuriaPain") == "" || map
							.get("perinalRectal") == "")
					&& (map.get("lFrequency") == ""
							|| map.get("lHesitanvy") == ""
							|| map.get("lNocturia") == ""
							|| map.get("lStraining") == ""
							|| map.get("lUrgency") == ""
							|| map.get("lSenseComEva") == ""
							|| map.get("lUrgeIncon") == ""
							|| map.get("lIntermittency") == "" || map
							.get("lDribbling") == "")
					&& (map.get("uretericLeft") != "" || map
							.get("uretericRight") != "")
					&& (map.get("symptomme") == "")
					&& (map.get("chyluriaCheck") == ""
							|| map.get("chyluria") == ""
							|| map.get("erectileDysfunctionCheck") == ""
							|| map.get("erectileDysfunction") == ""
							|| map.get("haemospermia") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("retrogradeEjaculation") == ""
							|| map.get("anejaculationEjaculation") == ""
							|| map.get("stressIncontinence") == ""
							|| map.get("urgeIncontinence") == ""
							|| map.get("totalIncontinence") == ""
							|| map.get("overflowIncontinence") == ""
							|| map.get("acuteUrinaryCheck") == ""
							|| map.get("acuteUrinary") == ""
							|| map.get("calcularia") == "" || map
							.get("calculariaCheck") == "")) {
				jsp = "messageOpdUrologyNotFillUpP";
			} else if (((map.get("haeTotal") == "")
					|| (map.get("haeTeriminal") == "")
					|| map.get("haeInitial") == "" || map.get("haeClots") == "")
					&& (map.get("hypogastricPain") == ""
							|| map.get("bonePain") == ""
							|| map.get("dysuriaPain") == "" || map
							.get("perinalRectal") == "")
					&& (map.get("lFrequency") == ""
							|| map.get("lHesitanvy") == ""
							|| map.get("lNocturia") == ""
							|| map.get("lStraining") == ""
							|| map.get("lUrgency") == ""
							|| map.get("lSenseComEva") == ""
							|| map.get("lUrgeIncon") == ""
							|| map.get("lIntermittency") == "" || map
							.get("lDribbling") == "")
					&& (map.get("uretericLeft") != "" || map
							.get("uretericRight") != "")
					&& (map.get("symptomme") == "")
					&& (map.get("chyluriaCheck") != ""
							|| map.get("chyluria") != ""
							|| map.get("erectileDysfunctionCheck") != ""
							|| map.get("erectileDysfunction") != ""
							|| map.get("haemospermia") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("retrogradeEjaculation") != ""
							|| map.get("anejaculationEjaculation") != ""
							|| map.get("stressIncontinence") != ""
							|| map.get("urgeIncontinence") != ""
							|| map.get("totalIncontinence") != ""
							|| map.get("overflowIncontinence") != ""
							|| map.get("acuteUrinaryCheck") != ""
							|| map.get("acuteUrinary") != ""
							|| map.get("calcularia") != "" || map
							.get("calculariaCheck") != "")) {
				jsp = "messageOpdUrologyNotFillUpPC";
			} else if (((map.get("haeTotal") == "")
					|| (map.get("haeTeriminal") == "")
					|| map.get("haeInitial") == "" || map.get("haeClots") == "")
					&& (map.get("hypogastricPain") == ""
							|| map.get("bonePain") == ""
							|| map.get("dysuriaPain") == "" || map
							.get("perinalRectal") == "")
					&& (map.get("lFrequency") == ""
							|| map.get("lHesitanvy") == ""
							|| map.get("lNocturia") == ""
							|| map.get("lStraining") == ""
							|| map.get("lUrgency") == ""
							|| map.get("lSenseComEva") == ""
							|| map.get("lUrgeIncon") == ""
							|| map.get("lIntermittency") == "" || map
							.get("lDribbling") == "")
					&& (map.get("uretericLeft") != "" || map
							.get("uretericRight") != "")
					&& (map.get("symptomme") != "")
					&& (map.get("chyluriaCheck") == ""
							|| map.get("chyluria") == ""
							|| map.get("erectileDysfunctionCheck") == ""
							|| map.get("erectileDysfunction") == ""
							|| map.get("haemospermia") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("retrogradeEjaculation") == ""
							|| map.get("anejaculationEjaculation") == ""
							|| map.get("stressIncontinence") == ""
							|| map.get("urgeIncontinence") == ""
							|| map.get("totalIncontinence") == ""
							|| map.get("overflowIncontinence") == ""
							|| map.get("acuteUrinaryCheck") == ""
							|| map.get("acuteUrinary") == ""
							|| map.get("calcularia") == "" || map
							.get("calculariaCheck") == "")) {
				jsp = "messageOpdUrologyNotFillUpPS";
			} else if (((map.get("haeTotal") == "")
					|| (map.get("haeTeriminal") == "")
					|| map.get("haeInitial") == "" || map.get("haeClots") == "")
					&& (map.get("hypogastricPain") == ""
							|| map.get("bonePain") == ""
							|| map.get("dysuriaPain") == "" || map
							.get("perinalRectal") == "")
					&& (map.get("lFrequency") == ""
							|| map.get("lHesitanvy") == ""
							|| map.get("lNocturia") == ""
							|| map.get("lStraining") == ""
							|| map.get("lUrgency") == ""
							|| map.get("lSenseComEva") == ""
							|| map.get("lUrgeIncon") == ""
							|| map.get("lIntermittency") == "" || map
							.get("lDribbling") == "")
					&& (map.get("uretericLeft") != "" || map
							.get("uretericRight") != "")
					&& (map.get("symptomme") != "")
					&& (map.get("chyluriaCheck") != ""
							|| map.get("chyluria") != ""
							|| map.get("erectileDysfunctionCheck") != ""
							|| map.get("erectileDysfunction") != ""
							|| map.get("haemospermia") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("retrogradeEjaculation") != ""
							|| map.get("anejaculationEjaculation") != ""
							|| map.get("stressIncontinence") != ""
							|| map.get("urgeIncontinence") != ""
							|| map.get("totalIncontinence") != ""
							|| map.get("overflowIncontinence") != ""
							|| map.get("acuteUrinaryCheck") != ""
							|| map.get("acuteUrinary") != ""
							|| map.get("calcularia") != "" || map
							.get("calculariaCheck") != "")) {
				jsp = "messageOpdUrologyNotFillUpPSC";
			} else if (((map.get("haeTotal") == "")
					|| (map.get("haeTeriminal") == "")
					|| map.get("haeInitial") == "" || map.get("haeClots") == "")
					&& (map.get("hypogastricPain") == ""
							|| map.get("bonePain") == ""
							|| map.get("dysuriaPain") == "" || map
							.get("perinalRectal") == "")
					&& (map.get("lFrequency") == ""
							|| map.get("lHesitanvy") == ""
							|| map.get("lNocturia") == ""
							|| map.get("lStraining") == ""
							|| map.get("lUrgency") == ""
							|| map.get("lSenseComEva") == ""
							|| map.get("lUrgeIncon") == ""
							|| map.get("lIntermittency") == "" || map
							.get("lDribbling") == "")
					&& (map.get("uretericLeft") == "" || map
							.get("uretericRight") == "")
					&& (map.get("symptomme") != "")
					&& (map.get("chyluriaCheck") == ""
							|| map.get("chyluria") == ""
							|| map.get("erectileDysfunctionCheck") == ""
							|| map.get("erectileDysfunction") == ""
							|| map.get("haemospermia") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("prematureEjaculation") == ""
							|| map.get("retrogradeEjaculation") == ""
							|| map.get("anejaculationEjaculation") == ""
							|| map.get("stressIncontinence") == ""
							|| map.get("urgeIncontinence") == ""
							|| map.get("totalIncontinence") == ""
							|| map.get("overflowIncontinence") == ""
							|| map.get("acuteUrinaryCheck") == ""
							|| map.get("acuteUrinary") == ""
							|| map.get("calcularia") == "" || map
							.get("calculariaCheck") == "")) {
				jsp = "messageOpdUrologyS";
			} else if (((map.get("haeTotal") == "")
					|| (map.get("haeTeriminal") == "")
					|| map.get("haeInitial") == "" || map.get("haeClots") == "")
					&& (map.get("hypogastricPain") == ""
							|| map.get("bonePain") == ""
							|| map.get("dysuriaPain") == "" || map
							.get("perinalRectal") == "")
					&& (map.get("lFrequency") == ""
							|| map.get("lHesitanvy") == ""
							|| map.get("lNocturia") == ""
							|| map.get("lStraining") == ""
							|| map.get("lUrgency") == ""
							|| map.get("lSenseComEva") == ""
							|| map.get("lUrgeIncon") == ""
							|| map.get("lIntermittency") == "" || map
							.get("lDribbling") == "")
					&& (map.get("uretericLeft") == "" || map
							.get("uretericRight") == "")
					&& (map.get("symptomme") != "")
					&& (map.get("chyluriaCheck") != ""
							|| map.get("chyluria") != ""
							|| map.get("erectileDysfunctionCheck") != ""
							|| map.get("erectileDysfunction") != ""
							|| map.get("haemospermia") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("retrogradeEjaculation") != ""
							|| map.get("anejaculationEjaculation") != ""
							|| map.get("stressIncontinence") != ""
							|| map.get("urgeIncontinence") != ""
							|| map.get("totalIncontinence") != ""
							|| map.get("overflowIncontinence") != ""
							|| map.get("acuteUrinaryCheck") != ""
							|| map.get("acuteUrinary") != ""
							|| map.get("calcularia") != "" || map
							.get("calculariaCheck") != "")) {
				jsp = "messageOpdUrologySC";
			} else if (((map.get("haeTotal") == "")
					|| (map.get("haeTeriminal") == "")
					|| map.get("haeInitial") == "" || map.get("haeClots") == "")
					&& (map.get("hypogastricPain") == ""
							|| map.get("bonePain") == ""
							|| map.get("dysuriaPain") == "" || map
							.get("perinalRectal") == "")
					&& (map.get("lFrequency") == ""
							|| map.get("lHesitanvy") == ""
							|| map.get("lNocturia") == ""
							|| map.get("lStraining") == ""
							|| map.get("lUrgency") == ""
							|| map.get("lSenseComEva") == ""
							|| map.get("lUrgeIncon") == ""
							|| map.get("lIntermittency") == "" || map
							.get("lDribbling") == "")
					&& (map.get("uretericLeft") == "" || map
							.get("uretericRight") == "")
					&& (map.get("symptomme") == "")
					&& (map.get("chyluriaCheck") != ""
							|| map.get("chyluria") != ""
							|| map.get("erectileDysfunctionCheck") != ""
							|| map.get("erectileDysfunction") != ""
							|| map.get("haemospermia") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("retrogradeEjaculation") != ""
							|| map.get("anejaculationEjaculation") != ""
							|| map.get("stressIncontinence") != ""
							|| map.get("urgeIncontinence") != ""
							|| map.get("totalIncontinence") != ""
							|| map.get("overflowIncontinence") != ""
							|| map.get("acuteUrinaryCheck") != ""
							|| map.get("acuteUrinary") != ""
							|| map.get("calcularia") != "" || map
							.get("calculariaCheck") != "")) {
				jsp = "messageOpdUrologyC";
			} else if (((map.get("haeTotal") != "")
					|| (map.get("haeTeriminal") != "")
					|| map.get("haeInitial") != "" || map.get("haeClots") != "")
					&& (map.get("hypogastricPain") != ""
							|| map.get("bonePain") != ""
							|| map.get("dysuriaPain") != "" || map
							.get("perinalRectal") != "")
					&& (map.get("lFrequency") != ""
							|| map.get("lHesitanvy") != ""
							|| map.get("lNocturia") != ""
							|| map.get("lStraining") != ""
							|| map.get("lUrgency") != ""
							|| map.get("lSenseComEva") != ""
							|| map.get("lUrgeIncon") != ""
							|| map.get("lIntermittency") != "" || map
							.get("lDribbling") != "")
					&& (map.get("uretericLeft") != "" || map
							.get("uretericRight") != "")
					&& (map.get("symptomme") != "")
					&& (map.get("chyluriaCheck") != ""
							|| map.get("chyluria") != ""
							|| map.get("erectileDysfunctionCheck") != ""
							|| map.get("erectileDysfunction") != ""
							|| map.get("haemospermia") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("prematureEjaculation") != ""
							|| map.get("retrogradeEjaculation") != ""
							|| map.get("anejaculationEjaculation") != ""
							|| map.get("stressIncontinence") != ""
							|| map.get("urgeIncontinence") != ""
							|| map.get("totalIncontinence") != ""
							|| map.get("overflowIncontinence") != ""
							|| map.get("acuteUrinaryCheck") != ""
							|| map.get("acuteUrinary") != ""
							|| map.get("calcularia") != "" || map
							.get("calculariaCheck") != "")) {
				jsp = "messageOpdUrology";
			}

			else {
				jsp = "messageOpdUrologyNotFillUP";
			}
		} else {
			message = "Urology Case Shee has not been done Successfully..";
			jsp = "messageSomeTry";
		}

		try {
			map = opdHandlerService.showUrologyCaseSheetJsp(visitId);

		} catch (Exception e) {
			e.printStackTrace();
		}

		title = "Add Urology Case Sheet List";
		jsp += ".jsp";
		map.put("deptId", departmentId);
		map.put("message", message);
		map.put("contentJsp", jsp);
		map.put("visitId", visitId);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView getPresVisitNo(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		String hinNo = "";
		if (request.getParameter(HIN_NO) != null) {
			hinNo = request.getParameter(HIN_NO);
		}

		List<PatientPrescriptionHeader> visitList = new ArrayList<PatientPrescriptionHeader>();
		visitList = opdHandlerService.getPresVisitNo(hinNo);

		String jsp = "populateVisitNoForPres";
		map.put("visitList", visitList);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getPresVisitNoForNIS(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		String hinNo = "";
		if (request.getParameter(HIN_NO) != null) {
			hinNo = request.getParameter(HIN_NO);
		}

		List<PatientPrescriptionHeader> visitList = new ArrayList<PatientPrescriptionHeader>();
		visitList = opdHandlerService.getPresVisitNoForNIC(hinNo);

		String jsp = "populateVisitNoForPresForNIC";
		map.put("visitList", visitList);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getPresVisitNoForIssueNo(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		String hinId = "";
		if (request.getParameter("hinId") != null) {
			hinId = request.getParameter("hinId");
		}

		List<PatientPrescriptionHeader> visitList = new ArrayList<PatientPrescriptionHeader>();
		visitList = opdHandlerService.getPresVisitNoForIssueNo(hinId);

		String jsp = "populateVisitNoForPresForIssueNo";
		map.put("visitList", visitList);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getInvestigationVisitNo(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		String hinNo = "";
		if (request.getParameter(HIN_NO) != null) {
			hinNo = request.getParameter(HIN_NO);
		}

		List<DgOrderhd> visitList = new ArrayList<DgOrderhd>();
		visitList = opdHandlerService.getInvestigationVisitNo(hinNo);

		String jsp = "populateVisitNoForInvestigation";
		map.put("visitList", visitList);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getInvegReqVisitNo(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		String hinNo = "";
		if (request.getParameter(HIN_NO) != null) {
			hinNo = request.getParameter(HIN_NO);
		}

		List<DgOrderhd> visitList = new ArrayList<DgOrderhd>();
		visitList = opdHandlerService.getInvestigationVisitNo(hinNo);

		String jsp = "populateVisitNoForInvestigationReg";
		map.put("visitList", visitList);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getHinNoForpatientpres(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		String serviceNo = "";
		String hinNo = "";
		String flag = "";
		if (request.getParameter(SERVICE_NO) != null
				&& !(request.getParameter(SERVICE_NO).equals(""))) {
			serviceNo = request.getParameter(SERVICE_NO);
			detailsMap.put("serviceNo", serviceNo);
		}
		if (request.getParameter(HIN_NO) != null
				&& !(request.getParameter(HIN_NO).equals(""))) {
			hinNo = request.getParameter(HIN_NO);
			detailsMap.put("hinNo", hinNo);
		}
		if (request.getParameter("flag") != null
				&& !(request.getParameter("flag").equals(""))) {
			flag = request.getParameter("flag");
			map.put("flag", flag);
		}

		List<Object> hinNoList = new ArrayList<Object>();
		hinNoList = opdHandlerService.getHinNoList(serviceNo);
		map.put("hinNoList", hinNoList);
		String jsp = "populateHinNoForOpd";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getHinNoForpatientpresForNIS(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		String serviceNo = "";
		String hinNo = "";
		String flag = "";
		if (request.getParameter(SERVICE_NO) != null
				&& !(request.getParameter(SERVICE_NO).equals(""))) {
			serviceNo = request.getParameter(SERVICE_NO);
			detailsMap.put("serviceNo", serviceNo);
		}
		if (request.getParameter(HIN_NO) != null
				&& !(request.getParameter(HIN_NO).equals(""))) {
			hinNo = request.getParameter(HIN_NO);
			detailsMap.put("hinNo", hinNo);
		}
		if (request.getParameter("flag") != null
				&& !(request.getParameter("flag").equals(""))) {
			flag = request.getParameter("flag");
			map.put("flag", flag);
		}

		List<Object> hinNoList = new ArrayList<Object>();
		hinNoList = opdHandlerService.getHinNoList(serviceNo);
		map.put("hinNoList", hinNoList);
		String jsp = "populateHinNoForOpdForNIS";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView printPatientPrescriptionReport(
			HttpServletRequest request, HttpServletResponse response) {
		int visitId = 0;
		String serviceNo = "";
		String hinNo = "";
		if (request.getParameter(SERVICE_NO) != null) {
			serviceNo = request.getParameter(SERVICE_NO);
		}
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		if (request.getParameter(HIN_NO) != null) {
			hinNo = request.getParameter(HIN_NO);
		}
		HttpSession session = request.getSession();
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);

		Map<String, Object> detailsMap = new HashMap<String, Object>();
		
		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		String userHome = getServletContext().getRealPath("");
		String imagePath = userHome + "/jsp/images/logonew-hal.jpg";
		parameters.put("path", imagePath);

		parameters.put("hospitalId", hospitalId);
		parameters.put("visitId", visitId);
		parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		parameters.put("date", new Date());
		parameters.put("SUBREPORT_DIR",
				getServletContext().getRealPath("/reports/"));
		HMSUtil.generateReport("PatientPrescriptionFormat", parameters,
				(Connection) detailsMap.get("conn"), response,
				getServletContext());
		// HMSUtil.generateReportInWord("PatientPrescriptionFormat", parameters,
		// (Connection)detailsMap.get("conn"), response, getServletContext());
		return null;
	}

	public ModelAndView getvisitDetails(HttpServletRequest request,
			HttpServletResponse response) {
		String jsp = "";
		String serviceNo = null;
		Map<String, Object> mapfordata = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		if (request.getParameter(SERVICE_NO) != null) {
			serviceNo = request.getParameter(SERVICE_NO);
		}
		mapfordata.put("serviceNo", serviceNo);
		map = opdHandlerService.getvisitDetails(mapfordata);

		jsp = "responseForVisit";
		// map.put("contentJsp", jsp);

		return new ModelAndView(jsp, "map", map);
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public ModelAndView printPatientInvestigationReport(
			HttpServletRequest request, HttpServletResponse response) {
		String query = "";
		int hospitalId = 0;
		HttpSession session = request.getSession();
		int visiNo = 0;
		String serviceNo = "";
		String hinNo = "";
		int visitId = 0;
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		try {
			/*
			 * if (request.getParameter(VISIT_NUMBER) != null &&
			 * (!request.getParameter(VISIT_NUMBER).equals( ""))) { //query =
			 * query + "where visit.visit_no = '"+
			 * request.getParameter(VISIT_NUMBER) + "' "; visiNo =
			 * Integer.parseInt(request.getParameter(VISIT_NUMBER)); } if
			 * (request.getParameter(HIN_NO) != null &&
			 * (!request.getParameter(HIN_NO).equals(""))) { query = query +
			 * "AND patient.hin_no = '" + request.getParameter(HIN_NO) + "' "; }
			 */

			if (request.getParameter(SERVICE_NO) != null) {
				serviceNo = request.getParameter(SERVICE_NO);
			}
			/*
			 * if (request.getParameter(VISIT_NUMBER) != null) { visiNo =
			 * Integer.parseInt(request.getParameter(VISIT_NUMBER)); }
			 */
			if (request.getParameter(HIN_NO) != null) {
				hinNo = request.getParameter(HIN_NO);
			}
		
			if (request.getParameter(VISIT_ID) != null) {
				visitId = Integer.parseInt(request.getParameter(VISIT_ID));
			}

			if (hospitalId != 0) {
				query = query + "AND mas_hospital.hospital_id = '" + hospitalId
						+ "' ";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> parameters = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		detailsMap = opdHandlerService.getConnectionForReport();
		String userHome = getServletContext().getRealPath("");
		String imagePath = userHome + "/jsp/images/logonew-hal.jpg";
		parameters.put("path", imagePath);

		parameters.put("visitId", visitId);
		parameters.put("hospitalId", hospitalId);
		parameters.put("visitNo", visiNo);
		parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		parameters.put("SUBREPORT_DIR",
				getServletContext().getRealPath("/reports/"));
		// parameters.put("QUERY", query);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("PatientInvestigationFormat"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return null;
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public ModelAndView printPatientMedicalCaseSheetReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visiNo = 0;
		String serviceNo = "";
		String hinNo = "";
		int visitId = 0;
		HttpSession session = request.getSession();
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		if (request.getParameter(SERVICE_NO) != null) {
			serviceNo = request.getParameter(SERVICE_NO);
		}
		/*
		 * if (request.getParameter(VISIT_NUMBER) != null) { visiNo =
		 * Integer.parseInt(request.getParameter(VISIT_NUMBER)); }
		 */
	
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		if (request.getParameter(HIN_NO) != null) {
			hinNo = request.getParameter(HIN_NO);
		}
		int radioValue = 0;
		if (request.getParameter(SELECTED_RADIO) != null) {
			radioValue = Integer.parseInt(request.getParameter(SELECTED_RADIO));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("hospitalId", hospitalId);
		// parameters.put("visitNo", visiNo);
		parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		parameters.put("visitId", visitId);
		parameters.put("SUBREPORT_DIR",
				getServletContext().getRealPath("/reports/"));

		try {
			byte[] bytes = null;
			try {
				if (radioValue == 1) {
					bytes = JasperRunManager.runReportToPdf(
							getCompiledReport("medicalCaseSheetnewforstorage"),
							parameters, (Connection) detailsMap.get("conn"));
				} else {
					bytes = JasperRunManager.runReportToPdf(
							getCompiledReport("medicalCaseSheet"), parameters,
							(Connection) detailsMap.get("conn"));
				}

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return null;
	}

	public ModelAndView printPatientReviewMedicalCaseSheetReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visiNo = 0;
		String serviceNo = "";
		String hinNo = "";
		int visit_id = 0;
		HttpSession session = request.getSession();
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		if (request.getParameter(SERVICE_NO_FOR_REPORT) != null) {
			serviceNo = request.getParameter(SERVICE_NO_FOR_REPORT);
		}
		if (request.getParameter(VISIT_NUMBER_FOR_REPORT) != null) {
			visiNo = Integer.parseInt(request
					.getParameter(VISIT_NUMBER_FOR_REPORT));
		}
		if (request.getParameter(VISIT_ID) != null) {
			visit_id = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		if (request.getParameter(HIN_NO_FOR_REPORT) != null) {
			hinNo = request.getParameter(HIN_NO_FOR_REPORT);
		}
		int radioValue = 0;
		if (request.getParameter(SELECTED_RADIO) != null) {
			radioValue = Integer.parseInt(request.getParameter(SELECTED_RADIO));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("hospitalId", hospitalId);
		parameters.put("visitNo", visiNo);
		parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		parameters.put("visit_id", visit_id);
		parameters.put("SUBREPORT_DIR",
				getServletContext().getRealPath("/reports/"));

		try {
			byte[] bytes = null;
			try {
				if (radioValue == 1) {
					bytes = JasperRunManager.runReportToPdf(
							getCompiledReport("medicalCaseSheetnewforstorage"),
							parameters, (Connection) detailsMap.get("conn"));
				} else {
					bytes = JasperRunManager.runReportToPdf(
							getCompiledReport("medicalCaseSheet"), parameters,
							(Connection) detailsMap.get("conn"));
				}

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return null;
	}

	/*
	 * Code For Print MLC Report Code By Mukesh Date 28 Sep 2011
	 */
	public ModelAndView opdMedicalCaseSheetPrint(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visiNo = 0;
		String serviceNo = "";
		String hinNo = "";
		int visitId = 0;
		HttpSession session = request.getSession();
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		if (request.getParameter("serviceNoForReport") != null) {
			serviceNo = request.getParameter("serviceNoForReport");
		}
		if (request.getParameter("visitNumberForReport") != null) {
			visiNo = Integer.parseInt(request
					.getParameter("visitNumberForReport"));
		}
		if (request.getParameter("hinNoForReport") != null) {
			hinNo = request.getParameter("hinNoForReport");
		}
		if (request.getParameter("visitId") != null) {
			visitId = Integer.parseInt(request.getParameter("visitId"));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("hospitalId", hospitalId);
		parameters.put("visitNo", visiNo);
		parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		parameters.put("visitId", visitId);
		parameters.put("SUBREPORT_DIR",
				getServletContext().getRealPath("/reports/"));
		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("medicalCaseSheetnewforstorage"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return null;
	}

	public ModelAndView opdPatientInvestigationFormatPrint(
			HttpServletRequest request, HttpServletResponse response) {
		int visiNo = 0;
		String serviceNo = "";
		String hinNo = "";
		/*
		 * if (request.getParameter(SERVICE_NO) != null) { serviceNo =
		 * request.getParameter(SERVICE_NO); } if
		 * (request.getParameter(VISIT_NUMBER) != null) { visiNo =
		 * Integer.parseInt(request.getParameter(VISIT_NUMBER)); } if
		 * (request.getParameter(HIN_NO) != null) { hinNo =
		 * request.getParameter(HIN_NO); }
		 */
		if (request.getParameter("serviceNoForReport") != null) {
			serviceNo = request.getParameter("serviceNoForReport");
		}
		if (request.getParameter("visitNumberForReport") != null) {
			visiNo = Integer.parseInt(request
					.getParameter("visitNumberForReport"));
		}
		if (request.getParameter("hinNoForReport") != null) {
			hinNo = request.getParameter("hinNoForReport");
		}
		HttpSession session = request.getSession();
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);

		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("hospitalId", hospitalId);
		parameters.put("visitNo", visiNo);
		parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		parameters.put("SUBREPORT_DIR",
				getServletContext().getRealPath("/reports/"));
		HMSUtil.generateReport("PatientPrescriptionFormat", parameters,
				(Connection) detailsMap.get("conn"), response,
				getServletContext());
		// HMSUtil.generateReportInWord("PatientPrescriptionFormat", parameters,
		// (Connection)detailsMap.get("conn"), response, getServletContext());
		return null;
		/*
		 * Map<String, Object> map = new HashMap<String, Object>(); int visiNo =
		 * 0; String serviceNo = ""; String hinNo = ""; HttpSession session =
		 * request.getSession(); int hospitalId = (Integer)
		 * session.getAttribute(HOSPITAL_ID); if
		 * (request.getParameter("serviceNoForReport") != null) { serviceNo =
		 * request.getParameter("serviceNoForReport"); } if
		 * (request.getParameter("visitNumberForReport") != null) { visiNo =
		 * Integer.parseInt(request.getParameter("visitNumberForReport")); } if
		 * (request.getParameter("hinNoForReport") != null) { hinNo =
		 * request.getParameter("hinNoForReport"); } Map<String, Object>
		 * detailsMap = new HashMap<String, Object>();
		 * 
		 * detailsMap = opdHandlerService.getConnectionForReport(); Map<String,
		 * Object> parameters = new HashMap<String, Object>();
		 * parameters.put("hospitalId", hospitalId); parameters.put("visitNo",
		 * visiNo); parameters.put("serviceNo", serviceNo);
		 * parameters.put("hinNo", hinNo); parameters.put("SUBREPORT_DIR",
		 * getServletContext().getRealPath( "/reports/"));
		 * System.out.println("hospitalId---" + hospitalId);
		 * System.out.println("visiNo---" + visiNo);
		 * System.out.println("serviceNo--" + serviceNo);
		 * System.out.println("hinNo---" + hinNo); System.out.println("dir--"+
		 * getServletContext().getRealPath("/reports/")); try { byte[] bytes =
		 * null; try { bytes = JasperRunManager.runReportToPdf(
		 * getCompiledReport("PatientInvestigationFormat"), parameters,
		 * (Connection) detailsMap.get("conn"));
		 * 
		 * } catch (JRException e) {
		 * 
		 * e.printStackTrace(); } response.setContentType("application/pdf");
		 * response.setContentLength(bytes.length); ServletOutputStream
		 * ouputStream; try { ouputStream = response.getOutputStream();
		 * ouputStream.write(bytes, 0, bytes.length); ouputStream.flush();
		 * ouputStream.close(); } catch (IOException e) { e.printStackTrace(); }
		 * 
		 * } catch (IllegalStateException e) { e.printStackTrace(); } return
		 * null;
		 */}

	// ---------------------------------------------------------------------------------
	public CommonMasterHandlerService getCommonMasterHandlerService() {
		return commonMasterHandlerService;
	}

	public void setCommonMasterHandlerService(
			CommonMasterHandlerService commonMasterHandlerService) {
		this.commonMasterHandlerService = commonMasterHandlerService;
	}

	public OPDHandlerService getOpdHandlerService() {
		return opdHandlerService;
	}

	public void setOpdHandlerService(OPDHandlerService opdHandlerService) {
		this.opdHandlerService = opdHandlerService;
	}

	public AppointmentHandlerService getAppointmentHandlerService() {
		return appointmentHandlerService;
	}

	public void setAppointmentHandlerService(
			AppointmentHandlerService appointmentHandlerService) {
		this.appointmentHandlerService = appointmentHandlerService;
	}

	// Method By Tirath

	public LabHandlerService getLabHandlerService() {
		return labHandlerService;
	}

	public void setLabHandlerService(LabHandlerService labHandlerService) {
		this.labHandlerService = labHandlerService;
	}

	public ModelAndView showPopupTokenJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		int hospitalId = 0;
		if (session.getAttribute("hospitalId") != null)
			hospitalId = (Integer) session.getAttribute("hospitalId");
		mapForDS.put("hospitalId", hospitalId);
		if (session.getAttribute("deptId") != null) {
			int deptId = (Integer) session.getAttribute("deptId");
			mapForDS.put("deptId", deptId);
		} else if (request.getParameter("deptId") != null) {
			int deptId = Integer.parseInt(request.getParameter("deptId"));
			mapForDS.put("deptId", deptId);
		}
		Users user = new Users();
		int empId = 0;
		if (session.getAttribute("users") != null) {
			user = (Users) session.getAttribute("users");
			mapForDS.put("empId", user.getEmployee().getId());
		}
		map = opdHandlerService.showPopupTokenJsp(mapForDS);
		List<Visit> visitTokenList = new ArrayList<Visit>();
		if (map.get("visitTokenList") != null) {
			visitTokenList = (List<Visit>) map.get("visitTokenList");
		}
		jsp = "window_popupJsp";
		title = "Token Number";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView showTreatmentPopUp(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();
		String genericname = "";
		String autoHint = "";

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			if (request.getParameter("genericname") != null) {
				genericname = (request.getParameter("genericname"));
			}

			if (genericname != "") {
				map.put("autoHint", genericname);
				map = opdHandlerService.showTreatment(map);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		if (request.getParameter("flag") != null
				&& request.getParameter("flag").equals("opd")) {
			jsp = "treatmentJsp";
		} else {
			map.put("contentJsp", "treatmentJsp.jsp");
			jsp = "index";
		}

		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView autoCompleteForTreatment(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();
		String itemNameField = "";
		String autoHint = "";

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			map.put("autoHint", autoHint);
			map = opdHandlerService.showTreatmentPopUp(map);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "treatmentResponseJsp";
		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView treatmentData(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();
		String genericname = "";
		String autoHint = "";

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			if (request.getParameter("genericname") != null) {
				genericname = (request.getParameter("genericname"));
			}

			map.put("autoHint", genericname);
			map = opdHandlerService.showTreatmentPopUp(map);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "treatmentResponseJsp";
		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView printPatientPrescriptionInvestigation(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visiNo = 0;
		String serviceNo = "";
		String hinNo = "";
		HttpSession session = request.getSession();
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		if (request.getParameter(SERVICE_NO) != null) {
			serviceNo = request.getParameter(SERVICE_NO);
		}
		if (request.getParameter(VISIT_NUMBER) != null) {
			visiNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
		}
		if (request.getParameter(HIN_NO) != null) {
			hinNo = request.getParameter(HIN_NO);
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("hospitalId", hospitalId);
		parameters.put("visitNo", visiNo);
		parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		parameters.put("SUBREPORT_DIR",
				getServletContext().getRealPath("/reports/"));

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager
						.runReportToPdf(
								getCompiledReport("PatientInvestigationPrescriptionReport"),
								parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return null;
	}

	public ModelAndView showSymptomPopUp(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();
		String symptomname = "";
		String autoHint = "";

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			if (request.getParameter("symptomname") != null) {
				symptomname = (request.getParameter("symptomname"));
			}
			if (symptomname != "") {
				map.put("autoHint", symptomname);
				map = opdHandlerService.showSymptom(map);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		jsp = "SymptomJsp";

		map.put("contentJsp", jsp);

		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView showDiagnosisPopUp(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();
		String diagnosisname = "";
		String autoHint = "";

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			if (request.getParameter("diagnosisname") != null) {
				diagnosisname = (request.getParameter("diagnosisname"));
			}

			if (diagnosisname != "") {
				map.put("autoHint", diagnosisname);
				map = opdHandlerService.showDiagnosis(map);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		jsp = "DiagnosisJsp";

		map.put("contentJsp", jsp);

		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView showPopUpHistoryTemplate(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		session = request.getSession();
		String tempCode = "";
		tempCode = request.getParameter("tempCode");
	
		Properties properties = new Properties();
		URL resourcePathHIC = Thread.currentThread().getContextClassLoader()
				.getResource("adt.properties");
		try {
			properties.load(resourcePathHIC.openStream());
		} catch (Exception e) {
			e.printStackTrace();
		}
		String familyHistoryCode = properties
				.getProperty("templateCodeForFamilyHistory");
		String complaintHistoryCode = properties
				.getProperty("templateCodeForComplaintHistory");
		String treatmentAdviceCode = properties.getProperty("templateCodeForTreatmentAdvice");
	
	
		int deptId = 0;
				if (session.getAttribute("deptId") != null) {
					deptId = (Integer) session.getAttribute("deptId");
				}
				
		dataMap.put("tempCode", tempCode);
		if (tempCode.equals(complaintHistoryCode))
		dataMap.put("complaintHistoryCode", complaintHistoryCode);
		else if(tempCode.equals(treatmentAdviceCode ))
		dataMap.put("complaintHistoryCode", treatmentAdviceCode);
		
		dataMap.put("deptId", deptId);
		map = opdHandlerService.showPopUpFamilyHistory(dataMap);
        
		if(request.getParameter("fieldId")!=null && !request.getParameter("fieldId").isEmpty())
		 map.put("fieldId", request.getParameter("fieldId"));
	

		if (tempCode.equals(familyHistoryCode))
			jsp = FAMILY_HISTORY_TEMPALTE;
		else if (tempCode.equals(complaintHistoryCode))
			jsp = PRESENT_COMPLAINT_TEMPALTE;
		else if (tempCode.equals(treatmentAdviceCode))
			jsp = TREATMENT_ADVICE_TEMPALTE;
		
		

		// jsp += ".jsp";
		title = "family his story Tempalte";
		map.put("contentJsp", jsp);
		map.put("title", title);
	
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView showDiseaseFeatures(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		map = opdHandlerService.showDiseaseFeatures(box);
		jsp = "diseaseFeaturesPopup";
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView autoCompleteForSymptom(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();
		String itemNameField = "";
		String autoHint = "";

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}

			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			// System.out.println("autoHint autoCompleteForSymptom--" +
			// autoHint);
			map.put("autoHint", autoHint);
			map = opdHandlerService.showSymptomPopUp(map);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "SymptomResponseJsp";
		return new ModelAndView(jsp, "map", map);

	}

	// dinesh
	public ModelAndView autoCompleteForSymptomSubName(
			HttpServletRequest request, HttpServletResponse response) {

		HttpSession session = request.getSession();
		String itemNameField = "";
		String autoHint = "";

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}

			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			// System.out.println("autoHint autoCompleteForSymptom--" +
			// autoHint);
			map.put("autoHint", autoHint);
			map = opdHandlerService.showSymptomSubPopUp(map);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "SymptomSubResponseJsp";
		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView autoCompleteForSystemDiagnosis(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		String itemNameField = "";
		String autoHint = "";

		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}

			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			dataMap.put("autoHint", autoHint);
			map = opdHandlerService.autoCompleteForDiagnosis(dataMap);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "responseForSystemDiagnosis";
		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView autoCompleteForDiagnosis(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		String itemNameField = "";
		String autoHint = "";

		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}

			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			map.put("autoHint", autoHint);
			map = opdHandlerService.showDiagnosisPopUp(map);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "DiagnosisResponseJsp";
		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView showPatientForm44Report(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visiNo = 0;
		String serviceNo = "";
		String hinNo = "";
		if (request.getParameter(SERVICE_NO_FOR_REPORT) != null) {
			serviceNo = request.getParameter(SERVICE_NO_FOR_REPORT);
		}
		if (request.getParameter(VISIT_NUMBER_FOR_REPORT) != null) {
			visiNo = Integer.parseInt(request
					.getParameter(VISIT_NUMBER_FOR_REPORT));
		}
		if (request.getParameter(HIN_NO_FOR_REPORT) != null) {
			hinNo = request.getParameter(HIN_NO_FOR_REPORT);
		}
		Date date = null;
		if (request.getParameter(DATE) != null) {
			date = HMSUtil.convertStringTypeDateToDateType(request
					.getParameter(DATE));
		}
		HttpSession session = request.getSession();
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("hospitalId", hospitalId);
		parameters.put("visitNo", visiNo);
		if (!serviceNo.equals("")) {
			parameters.put("serviceNo", " and service_no ='" + serviceNo + "'");
		}
		// parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		parameters.put("date", date);
		if (request.getParameter(UNIT_ID) != null
				&& !request.getParameter(UNIT_ID).equals("")) {
			parameters.put("unitId",
					Integer.parseInt(request.getParameter(UNIT_ID)));
		}
		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("sick_report"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return null;
	}

	// Dinesh

	public ModelAndView showPendingPrescriptionwithoutBarCodeJsp(
			HttpServletRequest request, HttpServletResponse response) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		String deptName = "";
		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		if (session.getAttribute("deptName") != null)
			deptName = (String) session.getAttribute("deptName");
		Date currentDate = new Date();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		// Map<String, Object> dataMap = new HashMap<String, Object>();
		// Map<String, Object> patientMap = new HashMap<String, Object>();
		Map<String, Object> mapForDs = new HashMap<String, Object>();
		mapForDs.put("deptId", deptId);
		mapForDs.put("currentDate", currentDate);
		mapForDs.put("hospitalId", hospitalId);
		detailsMap = opdHandlerService.getPrescriptionList(mapForDs);
		detailsMap = opdHandlerService.getPrescriptionDetails(mapForDs);
		// dataMap.put("deptId", deptId);
		// dataMap.put("hospitalId", hospitalId);
		// dataMap.put("userName", userName);
		// dataMap.put("deptName", deptName);
		String jsp = PENDING_PATIENT_PRESCRIPTION_BARCODE;
		jsp += ".jsp";

		map.put("deptId", deptId);
		map.put("hospitalId", hospitalId);
		map.put("userName", userName);
		map.put("deptName", deptName);
		map.put("detailsMap", detailsMap);
		// map.put("patientMap", patientMap);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings("unchecked")
	public ModelAndView searchPrescriptionWithoutBarCode(
			HttpServletRequest request, HttpServletResponse response)
			throws FileNotFoundException, IllegalStateException {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> mapForDs = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		Date fromDate = new Date();
		Date toDate = new Date();
		String userName = "";
		int hospitalId = 0;

		int deptId = 0;
		String deptName = "";
		session = request.getSession();
		Box box = HMSUtil.getBox(request);
		session.setAttribute("box", box);

		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (box.getInt(DEPARTMENT_ID) != 0) {
			deptId = box.getInt(DEPARTMENT_ID);
		} else {
			if (session.getAttribute("deptId") != null)
				deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		}
		if (session.getAttribute("deptName") != null)
			deptName = (String) session.getAttribute("deptName");
		Map<String, Object> dataMap = new HashMap<String, Object>();
		mapForDs.put("deptId", deptId);
		mapForDs.put("hospitalId", hospitalId);
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);
		dataMap.put("deptName", deptName);

		try {
			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.dateFormatterDDMMYYYY(request
						.getParameter(FROM_DATE));
				mapForDs.put("fromDate", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.dateFormatterDDMMYYYY(request
						.getParameter(TO_DATE));
				mapForDs.put("toDate", toDate);
			}
			int departmentId = 0;
			if (request.getParameter(DEPARTMENT_ID) != null
					&& !(request.getParameter(DEPARTMENT_ID).equals(""))) {
				departmentId = Integer.parseInt(request
						.getParameter(DEPARTMENT_ID));

			}
			mapForDs.put("departmentId", departmentId);
			int medicalOfficerId = 0;
			if (request.getParameter(MEDICAL_OFFICER) != null
					&& !(request.getParameter(MEDICAL_OFFICER).equals(""))) {
				medicalOfficerId = Integer.parseInt(request
						.getParameter(MEDICAL_OFFICER));

			}
			mapForDs.put("medicalOfficerId", medicalOfficerId);

		} catch (Exception e) {
			e.printStackTrace();
		}

		detailsMap = opdHandlerService.getPrescriptionDetails(mapForDs);

		jsp = PENDING_PATIENT_PRESCRIPTION_BARCODE + ".jsp";
		map.put("detailsMap", detailsMap);
		map.put("contentJsp", jsp);
		map.put("dataMap", dataMap);
		map.put("deptName", deptName);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView submitDifferentialDiagnosis(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();

		Map<String, Object> map = new HashMap<String, Object>();
		String parameterValue = "";
		String diagnosisId = "";
		try {
			if (request.getParameter("paraVal") != null) {
				parameterValue = request.getParameter("paraVal");
			}
			if (request.getParameter("diagnosisId") != null) {
				diagnosisId = request.getParameter("diagnosisId");

			}
			String arr[] = parameterValue.split("=");
			String diagnosisIdArr[] = diagnosisId.split("=");
			/*
			 * for(int x=0;x<diagnosisIdArr.length;x++){
			 * System.out.println("arr--->"+arr[x]);
			 * System.out.println("diagnosisIdArr--->"+diagnosisIdArr[x]); } int
			 * counter=0; if (request.getParameter("counter") != null) {
			 * counter=Integer.parseInt(""+request.getParameter("counter")); }
			 * System.out.println("counter---->"+counter); for(int
			 * x=0;x<counter;x++){
			 * System.out.println("arr--->"+request.getParameter("paraVal"+x));
			 * System
			 * .out.println("diagnosisIdArr--->"+request.getParameter("diagnosisId"
			 * +x)); }
			 */
			map = opdHandlerService.submitDifferentialDiagnosis(diagnosisIdArr);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "responseDifferentialDiagnosis";
		return new ModelAndView(jsp, "map", map);

	}

	// ==================code by anamika========================
	public ModelAndView showPhysiotherapyListJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		map = opdHandlerService.showPhysiotherapyListJsp(box);
		String jsp = "";
		if (!request.getParameter("flag").equals("")
				&& (request.getParameter("flag").equalsIgnoreCase("opd")
						|| request.getParameter("flag").equalsIgnoreCase("fwc") || request
						.getParameter("flag").equalsIgnoreCase("fp"))) {
			jsp = "physiotherapy_advice_popup";
		} else if (!request.getParameter("flag").equals("")
				&& request.getParameter("flag").equalsIgnoreCase("ipd")) {
			jsp = "ipdPhysiotherapyAdvice";
		}
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getTherapyTypeListForAutoComplete(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> generalMap = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		String therapyNameField = "";
		int deptId = 0;
		String autoHint = "";

		try {
			if (request.getParameter("requiredField") != null) {
				therapyNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(therapyNameField) != null) {
				autoHint = (request.getParameter(therapyNameField));
			}

			generalMap.put("userName", userName);
			generalMap.put("autoHint", autoHint);
			map = opdHandlerService
					.getTherapyTypeListForAutoComplete(generalMap);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "responseForPhysiotherapyDetails";

		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getTheraphyId(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		map = opdHandlerService.getTheraphyId(box);
		map.put("counter", box.getInt("counter"));
		String jsp = "responseForTheraphy";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView savePhysiotherapyDetails(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		box.put("hospitalId", hospitalId);
		if (session.getAttribute("users") != null) {
			Users user = (Users) session.getAttribute("users");
			box.put("userId", user.getId());
		}
		map = opdHandlerService.savePhysiotherapyDetails(box);
		boolean flag = (Boolean) map.get("flag");
		String message = "";
		if (flag) {
			message = "Record Saved Successfully.";
		} else {
			message = "Try Again.";
		}
		int physioRequisitionHeaderId = 0;
		if (map.get("physioRequisitionHeaderId") != null) {
			physioRequisitionHeaderId = (Integer) map
					.get("physioRequisitionHeaderId");
		}
		map = opdHandlerService.showPhysiotherapyListJsp(box);
		String jsp = "";
		if (request.getParameter("flag") != null
				&& (request.getParameter("flag").equalsIgnoreCase("opd")
						|| request.getParameter("flag").equalsIgnoreCase("fwc") || request
						.getParameter("flag").equalsIgnoreCase("fp"))) {
			jsp = "physiotherapy_advice_popup";
		} else if (request.getParameter("flag") != null
				&& request.getParameter("flag").equalsIgnoreCase("ipd")) {
			jsp = "ipdPhysiotherapyAdvice";
		}

		map.put("message", message);
		map.put("contentJsp", jsp);
		map.put("physioRequisitionHeaderId", physioRequisitionHeaderId);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView showProcedureListJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		HttpSession session = request.getSession();
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		int hinId = 0;
		hinId = Integer.parseInt(request.getParameter("hinId"));
		int doctorId = 0;
		doctorId = Integer.parseInt(request.getParameter("doctorId"));
		map.put("hospitalId", hospitalId);
		map.put("visitId", visitId);
		map.put("hinId", hinId);
		map.put("doctorId", doctorId);
		map = opdHandlerService.getDetailsForProcList(map);

		// String jsp = "procedureWaitingList.jsp";
		String jsp = "procedureAdviceList";
		// map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView saveProcedureDetails(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		box.put("hospitalId", hospitalId);
		if (session.getAttribute("users") != null) {
			Users user = (Users) session.getAttribute("users");
			box.put("userId", user.getId());
		}
		try {
			map = opdHandlerService.saveProcedureDetails(box);
		} catch (Exception e) {
			e.printStackTrace();
		}
		int procedureHeaderId = 0;
		if (map.get("procedureHeaderId") != null) {
			procedureHeaderId = (Integer) map.get("procedureHeaderId");
		}
		boolean flag = (Boolean) map.get("flag");
		String message = "";
		if (flag) {
			message = "Record Saved Successfully.";
		} else {
			message = "Try Again.";
		}
		int visitId = 0;
		if (request.getParameter("visitId") != null) {
			visitId = Integer.parseInt(request.getParameter("visitId"));
			map.put("visitId", visitId);
			map = opdHandlerService.getDetailsForProcList(map);

		}
		int inpatientId = 0;
		if (request.getParameter("inpatientId") != null) {
			inpatientId = Integer.parseInt(request.getParameter("inpatientId"));
			map.put("inpatientId", inpatientId);
		}

		int hinId = 0;
		hinId = Integer.parseInt(request.getParameter("hinId"));
		int doctorId = 0;
		doctorId = Integer.parseInt(request.getParameter("doctorId"));

		map.put("hospitalId", hospitalId);
		map.put("hinId", hinId);
		map.put("doctorId", doctorId);
		map.put("procedureHeaderId", procedureHeaderId);
		String jsp = "";
		if (request.getParameter("flag") != null
				&& request.getParameter("flag").equalsIgnoreCase("opd")
				|| request.getParameter("flag").equalsIgnoreCase("fp")
				|| request.getParameter("flag").equalsIgnoreCase("fwc")) {
			jsp = "procedureAdviceList";
		} else if (request.getParameter("flag") != null
				&& request.getParameter("flag").equalsIgnoreCase("ipd")) {
			jsp = "ipdProcedureAdvice";
		}

		map.put("message", message);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView deleteProcedureDetails(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		HttpSession session = request.getSession();
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		int hinId = 0;
		hinId = Integer.parseInt(request.getParameter("hinId"));
		int doctorId = 0;
		int procDtId = 0;
		doctorId = Integer.parseInt(request.getParameter("doctorId"));
		procDtId = Integer.parseInt(request.getParameter("procDtId"));
		map.put("hospitalId", hospitalId);
		map.put("visitId", visitId);
		map.put("hinId", hinId);
		map.put("doctorId", doctorId);
		map.put("procDtId", procDtId);
		map = opdHandlerService.getDetailsForProcList(map);
		map.put("hospitalId", hospitalId);
		map.put("visitId", visitId);
		map.put("hinId", hinId);
		map.put("doctorId", doctorId);
		// String jsp = "procedureWaitingList.jsp";
		String jsp = "procedureAdviceList";
		// map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	/*
	 * Code for Detention
	 */
	public ModelAndView showDetentionListJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		HttpSession session = request.getSession();
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		int hinId = 0;
		hinId = Integer.parseInt(request.getParameter("hinId"));
		int doctorId = 0;
		doctorId = Integer.parseInt(request.getParameter("doctorId"));
		map.put("hospitalId", hospitalId);
		map.put("visitId", visitId);
		map.put("hinId", hinId);
		map.put("doctorId", doctorId);
		map = opdHandlerService.getDetentionDetailsList(map);

		// String jsp = "detentionWaitingList.jsp";
		String jsp = "detentionAdviceList";
		// map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView saveDetentionDetails(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		box.put("hospitalId", hospitalId);
		if (session.getAttribute("users") != null) {
			Users user = (Users) session.getAttribute("users");
			box.put("userId", user.getId());
		}
		map = opdHandlerService.saveDetentionDetails(box);
		boolean flag = (Boolean) map.get("flag");
		String message = "";
		if (flag) {
			message = "Record Saved Successfully.";
		} else {
			message = "Try Again.";
		}
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		int hinId = 0;
		hinId = Integer.parseInt(request.getParameter("hinId"));
		int doctorId = 0;
		doctorId = Integer.parseInt(request.getParameter("doctorId"));
		map.put("hospitalId", hospitalId);
		map.put("visitId", visitId);
		map.put("hinId", hinId);
		map.put("doctorId", doctorId);
		map = opdHandlerService.getDetentionDetailsList(map);
		String jsp = "detentionAdviceList";
		map.put("message", message);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView deleteDetentionDetails(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		HttpSession session = request.getSession();
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		int hinId = 0;
		hinId = Integer.parseInt(request.getParameter("hinId"));
		int doctorId = 0;
		int procDtId = 0;
		doctorId = Integer.parseInt(request.getParameter("doctorId"));
		procDtId = Integer.parseInt(request.getParameter("procDtId"));
		map.put("hospitalId", hospitalId);
		map.put("visitId", visitId);
		map.put("hinId", hinId);
		map.put("doctorId", doctorId);
		map.put("procDtId", procDtId);
		map = opdHandlerService.getDetentionDetailsList(map);
		map.put("hospitalId", hospitalId);
		map.put("visitId", visitId);
		map.put("hinId", hinId);
		map.put("doctorId", doctorId);
		// String jsp = "DetentionWaitingList.jsp";
		String jsp = "detentionAdviceList";
		// map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView showSymptomSubPopUp(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();
		String symptomsubname = "";
		String autoHint = "";

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			if (request.getParameter("symptomsubname") != null) {
				symptomsubname = (request.getParameter("symptomsubname"));
			}
			if (symptomsubname != "") {
				map.put("autoHint", symptomsubname);
				map = opdHandlerService.showSymptomSub(map);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		jsp = "SymptomJsp";

		map.put("contentJsp", jsp);

		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView showHospitalizedDischargeSummaryReport(
			HttpServletRequest request, HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		// System.out.println("request   " + box);
		Map<String, Object> parameters = new HashMap<String, Object>();
		Map<String, Object> mapDetail = new HashMap<String, Object>();

		session = request.getSession();
		mapDetail.put(HOSPITAL_ID, session.getAttribute("hospitalId"));
		try {
			int dischargeId = 0;
			if (request.getParameter(DISCHARGE_ID) != null
					&& !(request.getParameter(DISCHARGE_ID).equals(""))) {
				dischargeId = Integer.parseInt(request
						.getParameter(DISCHARGE_ID));
				mapDetail.put("dischargeId", dischargeId);
			}
			parameters = opdHandlerService
					.showHospitalizedDischargeSummaryReport(mapDetail);

			// System.out.println(parameters.get("casetype")+"<---casetype--dischargeId--->"+dischargeId);
			if (parameters.get("casetype").toString().equalsIgnoreCase("G")) {
				HMSUtil.generateReport(DISCHARGE_SUMMARY_GENERAL_REPORT,
						parameters, (Connection) parameters.get("conn"),
						response, getServletContext());
			} else if (parameters.get("casetype").toString()
					.equalsIgnoreCase("O")) {
				HMSUtil.generateReport(DISCHARGE_SUMMARY_GYNA_REPORT,
						parameters, (Connection) parameters.get("conn"),
						response, getServletContext());
			} else if (parameters.get("casetype").toString()
					.equalsIgnoreCase("P")) {
				HMSUtil.generateReport(DISCHARGE_SUMMARY_PEDIA_REPORT,
						parameters, (Connection) parameters.get("conn"),
						response, getServletContext());
			} else if (parameters.get("casetype").toString()
					.equalsIgnoreCase("N")) {
				parameters.put("SUBREPORT_DIR", getServletContext()
						.getRealPath("/reports/"));
				HMSUtil.generateReport(DISCHARGE_SUMMARY_NABH_REPORT,
						parameters, (Connection) parameters.get("conn"),
						response, getServletContext());
			} else {
				map.put("status", "nodata");
				map.put("admissionNumber", parameters.get("adNo"));
				map.put("hinNo", parameters.get("hinNo"));
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	@SuppressWarnings("unused")
	public ModelAndView showPatientPreviousPrescriptionRepeat(
			HttpServletRequest request, HttpServletResponse response) {

		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		/*
		 * int visitNo = Integer.parseInt(request.getParameter("visitNo")); int
		 * hinId = Integer.parseInt(request.getParameter("hinId"));
		 * mapForDS.put("visitNo", visitNo); mapForDS.put("hinId", hinId);
		 */
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		mapForDS.put("visitId", visitId);

		map = opdHandlerService.showPatientPrevoiusPrescriptionRepeat(mapForDS);

		jsp = OPD_PATIENT_PRESCRIPTION_JSP;

		title = "Patient Previous Visit";

		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	/*
	 * Code for Disease Report Date 13 Oct 2011
	 */
	public ModelAndView showDiagnosisWisePatientJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		jsp = "diagnosisWisePatientJsp";
		jsp += ".jsp";
		String title = " Disease Wise Patint List";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView printDiseaseWisePatientReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameters = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		List<MasHospital> hospitalList = new ArrayList<MasHospital>();
		HttpSession session = request.getSession();
		String diseaseWise = "";
		String diseaseWise1 = "";
		String toDate = "";
		String fromDate = "";
		String query = "";
		int checked = 0;
		String age1 = null;
		String age = null;
		if (request.getParameter("diseaseWise") != null) {
			diseaseWise = request.getParameter("diseaseWise").trim();

			Integer index1 = diseaseWise.lastIndexOf("[") + 1;
			int index2 = diseaseWise.lastIndexOf("]");
			diseaseWise1 = diseaseWise.substring(index1, index2);
		}
		try {
			int hospitalId = 0;
			String hospitalName = "";
			String hospitalAddress = "";
			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
			}
			map = opdHandlerService.getHospitalParameterDetails(hospitalId);
			if (map.get("hospitalList") != null) {
				hospitalList = (List<MasHospital>) map.get("hospitalList");
			}
			if (hospitalList != null && hospitalList.size() > 0) {
				hospitalName = hospitalList.get(0).getHospitalName();
			}
			if (hospitalList != null && hospitalList.size() > 0) {
				hospitalAddress = hospitalList.get(0).getAddress();
			}
			if (request.getParameter(TO_DATE) != null) {
				toDate = request.getParameter(TO_DATE);
			}
			if (request.getParameter(FROM_DATE) != null) {
				fromDate = request.getParameter(FROM_DATE);
			}
			if (request.getParameter("ipd") != null) {
				checked = Integer.parseInt(request.getParameter("ipd"));
			}
			if (request.getParameter("age") != null) {
				age = request.getParameter("age");
			}
			if (request.getParameter("age1") != null) {
				age1 = request.getParameter("age1");
			}
			SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
			// SimpleDateFormat formatterOut = new
			// SimpleDateFormat("yyyy-MM-dd");
			SimpleDateFormat formatterOut = new SimpleDateFormat("dd-MMM-yy");
			String date4MySQL1 = formatterOut.format(formatterIn
					.parse(fromDate));
			String date4MySQL2 = formatterOut.format(formatterIn.parse(toDate));
			java.sql.Date startDate = java.sql.Date.valueOf(date4MySQL1);
			java.sql.Date endDate = java.sql.Date.valueOf(date4MySQL2);

			map = opdHandlerService.getDiseaseId(diseaseWise);
			if (!age.equalsIgnoreCase(null) && age != "") {
				query = " where dic.icd_id =" + diseaseWise1
						+ "  and dic.add_edit_date>='" + startDate
						+ "'  and dic.add_edit_date<='" + endDate
						+ "' and p.age='" + age + " " + age1 + "'";
			} else {
				query = " where dic.icd_id =" + diseaseWise1
						+ "  and dic.add_edit_date>='" + startDate
						+ "'  and dic.add_edit_date<='" + endDate + "'";
			}
			parameters.put("query", query);
			parameters.put("startDate", startDate);
			parameters.put("endDate", endDate);
			parameters.put("checked", checked);
			parameters.put("hospitalName", hospitalName);
			parameters.put("hospitalAddress", hospitalAddress);
			parameters.put("icd_id", diseaseWise1);
		} catch (Exception e) {
			// TODO: handle exception
		}
		detailsMap = opdHandlerService.getConnectionForReport();
		parameters.put("SUBREPORT_DIR",
				getServletContext().getRealPath("/reports/"));
		HMSUtil.generateReport("diagnosis_wise_report", parameters,
				(Connection) detailsMap.get("conn"), response,
				getServletContext());
		return null;
	}

	public ModelAndView getListForDisease(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		/* Box box = HMSUtil.getBox(request); */
		String autoHint = "";
		String itemNameField = "";

		if (request.getParameter("requiredField") != null) {
			itemNameField = (request.getParameter("requiredField"));
		}
		if (request.getParameter(itemNameField) != null) {
			autoHint = (request.getParameter(itemNameField));
		}
		dataMap.put("autoHint", autoHint);
		map = opdHandlerService.getListForDisease(dataMap);
		jsp = "resultForAutoCompleteDiagnosis";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView showDiagnosisWisePatient(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		jsp = "diagnosisWisePatient";
		jsp += ".jsp";
		String title = " Disease Wise Patint List";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showDiseaseWisePatient(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		String icdName1 = "";
		String icdName2 = "";
		int hospitalId = 0;
		String toDate = "";
		String fromDate = "";
		int summary = 0;
		String icdNameForSearch = "";
		try {
			if (request.getParameter("icdNameForSearch") != null) {
				icdNameForSearch = request.getParameter("icdNameForSearch")
						.trim();
			}
			if (request.getParameter("summary") != null) {
				summary = Integer.parseInt(request.getParameter("summary"));
			}
			if (request.getParameter("icdName1") != null) {
				icdName1 = request.getParameter("icdName1").trim();
			}
			if (request.getParameter("icdName2") != null) {
				icdName2 = request.getParameter("icdName2").trim();
			}
			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
			}

			if (request.getParameter(TO_DATE) != null) {
				toDate = request.getParameter(TO_DATE);
			}
			if (request.getParameter(FROM_DATE) != null) {
				fromDate = request.getParameter(FROM_DATE);
			}

			dataMap.put("icdNameForSearch", icdNameForSearch);
			dataMap.put("summary", summary);
			dataMap.put("icdName1", icdName1);
			dataMap.put("icdName2", icdName2);
			dataMap.put("hospitalId", hospitalId);
			dataMap.put("toDate", toDate);
			dataMap.put("fromDate", fromDate);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		map = opdHandlerService.showDiseaseWisePatient(dataMap);
		map.put("icdNameForSearch", icdNameForSearch);
		map.put("summary", summary);
		map.put("icdName1", icdName1);
		map.put("icdName2", icdName2);
		map.put("hospitalId", hospitalId);
		map.put("toDate", toDate);
		map.put("fromDate", fromDate);
		jsp = "diagnosisWisePatientDetails";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView exportDiseaseWisePatient(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		int summary = 0;
		try {
			String icdName1 = "";
			String icdName2 = "";
			int hospitalId = 0;
			String icdNameForSearch = "";
			if (request.getParameter("icdNameForSearch") != null) {
				icdNameForSearch = request.getParameter("icdNameForSearch")
						.trim();
			}
			if (request.getParameter("icdName1") != null) {
				icdName1 = request.getParameter("icdName1").trim();
			}
			if (request.getParameter("icdName2") != null) {
				icdName2 = request.getParameter("icdName2").trim();
			}
			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
			}

			String toDate = "";
			String fromDate = "";
			if (request.getParameter(TO_DATE) != null) {
				toDate = request.getParameter(TO_DATE);
			}
			if (request.getParameter(FROM_DATE) != null) {
				fromDate = request.getParameter(FROM_DATE);
			}
			if (request.getParameter("summary") != null) {
				summary = Integer.parseInt(request.getParameter("summary"));
			}

			dataMap.put("icdNameForSearch", icdNameForSearch);
			dataMap.put("summary", summary);
			dataMap.put("icdName1", icdName1);
			dataMap.put("icdName2", icdName2);
			dataMap.put("hospitalId", hospitalId);
			dataMap.put("toDate", toDate);
			dataMap.put("fromDate", fromDate);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		map = opdHandlerService.exportDiseaseWisePatient(dataMap);
		map.put("summary", summary);
		jsp = "exportDiseaseWisePatient";
		return new ModelAndView(jsp, "map", map);
	}

	public void calculateIdealWeight(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasIdealWeight> idealWeightList = new ArrayList<MasIdealWeight>();
		float height = 0;
		String age = "";
		int genderId = 0;
		if (request.getParameter("height") != null
				&& !(request.getParameter("height").equals(""))) {
			height = Float.parseFloat(request.getParameter("height"));
		}
		if (request.getParameter("age") != null) {
			age = request.getParameter("age");
		}
		if (request.getParameter("genderId") != null) {
			genderId = Integer.parseInt(request.getParameter("genderId"));
		}
		dataMap.put("height", height);
		dataMap.put("age", age);
		dataMap.put("genderId", genderId);
		map = opdHandlerService.calculateIdealWeight(dataMap);
		if (map.get("idealWeightList") != null) {
			idealWeightList = (List<MasIdealWeight>) map.get("idealWeightList");
		}
		int weight = 0;
		String sd = "";
		if (idealWeightList.size() > 0) {
			MasIdealWeight masIdealWeight = idealWeightList.get(0);
			weight = masIdealWeight.getWeight();
			sd = masIdealWeight.getSD();
		}
		StringBuffer sb = new StringBuffer();

		sb.append("<item>");
		sb.append("<weight>" + weight + "</weight>");
		sb.append("<sd>" + sd + "</sd>");
		sb.append("</item>");

		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public void displayAU(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemMasterList = new ArrayList<MasStoreItem>();
		String pvmsNo = "";
		String age = "";
		HttpSession session = request.getSession();
		int docId = (Integer) session.getAttribute("empId");
		boolean highValueMedicineFlag = false;

		// System.out.println("fg "+request.getParameter("hinId"));

		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		if (request.getParameter("pvmsNo") != null) {
			pvmsNo = request.getParameter("pvmsNo");
		}
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("pvmsNo", pvmsNo);
		dataMap.put("docId", docId);

		map = opdHandlerService.displayAU(dataMap);
		boolean dispQty = false;

		if (map.get("itemMasterList") != null) {
			itemMasterList = (List<MasStoreItem>) map.get("itemMasterList");
		}

		if (map.get("disQty") != null) {
			dispQty = (Boolean) map.get("disQty");
		}

	
		int au = 0;
		String dispensingUnit = "";
		BigDecimal actualDispensingQty = new BigDecimal(0);
		String dangerousDrug = "";
		String getHighValueMedicine = "";
		String itemClassCode="";
		int itemClass=0;
		if (itemMasterList.size() > 0) {
			MasStoreItem storeItem = itemMasterList.get(0);
			if (storeItem.getItemConversion() != null) {
				au = storeItem.getItemConversion().getId();
			}
			if (storeItem.getDispUnit() != null
					&& !storeItem.getDispUnit().equals("")) {
				if(storeItem.getDispUnit().matches("[0-9]+"))
					dispensingUnit =  storeItem.getItemConversion()!=null?storeItem.getItemConversion().getItemUnitName():"";
				else
					dispensingUnit = storeItem.getDispUnit();
				
			}
			if (storeItem.getADispQty() != null
					&& storeItem.getADispQty().compareTo(new BigDecimal(0)) > 0) {
				actualDispensingQty = storeItem.getADispQty();
			}
			if (storeItem.getDangerousDrug() != null) {
				dangerousDrug = storeItem.getDangerousDrug();
			}

			if (storeItem.getHighValueDrug() != null) {
				getHighValueMedicine = storeItem.getHighValueDrug();
			}
			if (storeItem.getItemClass() != null) {
				itemClassCode = storeItem.getItemClass().getItemClassCode();
			}

			if (storeItem.getItemClass() != null) {
				itemClass = storeItem.getItemClass().getId();
			}
		}
		BigDecimal closingstock = new BigDecimal(0.0);
		if (map.get("closingstock") != null) {
			closingstock = (BigDecimal) map.get("closingstock");
		}
		
		
	

		
		StringBuffer sb = new StringBuffer();
		sb.append("<item>");
	//	System.out.println("dispensingUnitffh" + dispensingUnit);
		if (dispensingUnit != null && !dispensingUnit.equals("")) {
			sb.append("<dispensingUnit>" + dispensingUnit + "</dispensingUnit>");
		} else {
			sb.append("<dispensingUnit>" + au + "</dispensingUnit>");
		}
		
	
			sb.append("<au>" + au + "</au>");
		
		sb.append("<dispQty>" + dispQty + "</dispQty>");
		sb.append("<actualDispensingQty>" + actualDispensingQty
				+ "</actualDispensingQty>");
		sb.append("<stock>" + closingstock + "</stock>");
		sb.append("<dangerousDrug>" + dangerousDrug + "</dangerousDrug>");
		sb.append("<highValueMedicine>" + getHighValueMedicine
				+ "</highValueMedicine>");
		sb.append("<itemClassCode>" + itemClassCode
				+ "</itemClassCode>");
		sb.append("<itemClass>" + itemClass
				+ "</itemClass>");
		sb.append("</item>");

		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void checkHighValueMedicine(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemMasterList = new ArrayList<MasStoreItem>();
		String pvmsNo = "";
		String age = "";
		int hinId = 0;
		HttpSession session = request.getSession();
		int docId = (Integer) session.getAttribute("empId");
		boolean highValueMedicineFlag = false;
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		if (request.getParameter("pvmsNo") != null) {
			pvmsNo = request.getParameter("pvmsNo");
		}

		if (request.getParameter("hinId") != null) {
			hinId = Integer.parseInt(request.getParameter("hinId"));
		}
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("pvmsNo", pvmsNo);
		dataMap.put("hinId", hinId);
		dataMap.put("docId", docId);

		highValueMedicineFlag = opdHandlerService
				.getAuthorizationForHighValueMedicine(dataMap);
		StringBuffer sb = new StringBuffer();
		sb.append("<item>");
		sb.append("<highValueMedicine>" + highValueMedicineFlag
				+ "</highValueMedicine>");
		sb.append("</item>");

		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public ModelAndView getTodayOtherPrescription(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		int hinId = 0;
		//String opdFlag=null ;
		// int visitId=0;
		String bufferMedicine="y";
		if (request.getParameter("hinId") != null) {
			hinId = Integer.parseInt(request.getParameter("hinId"));
		}
		if (request.getParameter("bufferingFlag") != null) {
			bufferMedicine = request.getParameter("bufferingFlag");
		}
		int hospitalId = 0;

		if (session.getAttribute(HOSPITAL_ID) != null) {
		
			 hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		}
		map.put("hospitalId", hospitalId);
		map.put("hinId",hinId);
		map.put("bufferMedicine",bufferMedicine);

		/*if (request.getParameter("opdFlag") != null) {
			opdFlag = request.getParameter("opdFlag");
		}*/
		/*
		 * if(request.getParameter("visitId")!=null){
		 * visitId=Integer.parseInt(request.getParameter("visitId")); }
		 */

		map.put("hinId", hinId);
		map = opdHandlerService.getTodayOtherPrescription(map);
		map.put("backFlag",request.getParameter("backFlag"));
		// map.put("visitId", visitId);
		//if(opdFlag!=null && opdFlag.equals("y"))
			jsp = "popUpForTodayOtherPrescription1";
		//else
			//jsp = "popUpForTodayOtherPrescription";

		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView getTodayOtherPrescriptionForIPD(
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		int hinId = 0;
		//String opdFlag=null ;
		// int visitId=0;
		String bufferMedicine="y";
		if (request.getParameter("hinId") != null) {
			hinId = Integer.parseInt(request.getParameter("hinId"));
		}
		if (request.getParameter("bufferingFlag") != null) {
			bufferMedicine = request.getParameter("bufferingFlag");
		}
		int hospitalId = 0;

		if (session.getAttribute(HOSPITAL_ID) != null) {
		
			 hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		}
		map.put("hospitalId", hospitalId);
		map.put("hinId",hinId);
		map.put("bufferMedicine",bufferMedicine);
		
		/*if (request.getParameter("opdFlag") != null) {
			opdFlag = request.getParameter("opdFlag");
		}*/
		/*
		 * if(request.getParameter("visitId")!=null){
		 * visitId=Integer.parseInt(request.getParameter("visitId")); }
		 */

		map.put("hinId", hinId);
		map = opdHandlerService.getTodayOtherPrescription(map);
		
		// map.put("visitId", visitId);
		//if(opdFlag!=null && opdFlag.equals("y"))
			jsp = "popUpForTodayOtherPrescription";
		//else
			//jsp = "popUpForTodayOtherPrescription";

		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView stopCurrentMedication(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		int hinId = 0;
		// int visitId=0;
		int docId = 0;

		if (request.getParameter("hinId") != null) {
			hinId = Integer.parseInt(request.getParameter("hinId"));
		}
		/*
		 * if(request.getParameter("visitId")!=null){
		 * visitId=Integer.parseInt(request.getParameter("visitId")); }
		 */
		Box box = HMSUtil.getBox(request);
		if (session.getAttribute("empId") != null) {
			docId = (Integer) session.getAttribute("empId");

		}
		int hospitalId = 0;
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
		}

		dataMap.put("hospitalId", hospitalId);
		dataMap.put("docId", docId);
		dataMap.put("box", box);
		dataMap.put("hinId", hinId);
		map = opdHandlerService.stopCurrentMedication(dataMap);
		map = opdHandlerService.getTodayOtherPrescription(dataMap);
		String backFlag = "";
		if (request.getParameter("backFlag") != null) {
			backFlag = request.getParameter("backFlag");
			map.put("backFlag", backFlag);
		}
	
		jsp = "popUpForTodayOtherPrescription1";

		return new ModelAndView(jsp, "map", map);

	}

	public void checkForAlreadyPrescibedInvestigation(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		/* List objectList = new ArrayList(); */
		String val = null;
		if (request.getParameter("val") != null) {
			val = request.getParameter("val");
		}

		int chargeCode = 0;
	if(val!=null && val.contains("["))
	{
		try
		{
			int index1 = val.lastIndexOf("[");
			int index2 = val.lastIndexOf("]");
			index1++;
			chargeCode = Integer.parseInt(val.substring(index1,
					index2));
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		dataMap.put("chargeCode", chargeCode);
		//dataMap.put("val", val);
		int hinId = 0;
		HttpSession session = request.getSession();
		int hospitalId = 0;
		String investigationDate = null;
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
		}
		if (request.getParameter("hinId") != null
				&& !request.getParameter("hinId").equals("0")) {
			hinId = Integer.parseInt(request.getParameter("hinId"));
		}
		if (request.getParameter("investigationDate") != null
				) {
			investigationDate =request.getParameter("investigationDate");
		}
		dataMap.put("hinId", hinId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("investigationDate", investigationDate);
		
		map = opdHandlerService.checkForAlreadyPrescibedInvestigation(dataMap);
	}
		boolean matched = false;
		if (map.get("matched") != null) {
			matched = (Boolean) map.get("matched");
		}

		StringBuffer sb = new StringBuffer();
		sb.append("<item>");
		sb.append("<alreadyIssued1>" + matched + "</alreadyIssued1>");
		sb.append("</item>");
		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");

		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	public void checkForAlreadyIssuedPrescription(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		/* List objectList = new ArrayList(); */
		String val = "";
		if (request.getParameter("val") != null) {
			val = request.getParameter("val");
		}

		String itemCode = "";
		if (request.getParameter("id") != null) {
			itemCode = (request.getParameter("id"));
		}
		dataMap.put("itemCode", itemCode);
		dataMap.put("val", val);
		int hinId = 0;
		HttpSession session = request.getSession();
		int hospitalId = 0;
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
		}
		if (request.getParameter("hinId") != null
				&& !request.getParameter("hinId").equals("0")) {
			hinId = Integer.parseInt(request.getParameter("hinId"));
		}
		// List<OpdPatientAllergyT> allergyTList = new
		// ArrayList<OpdPatientAllergyT>();
		//List<PatientPrescriptionDetails> prescriptionDetail = new ArrayList<PatientPrescriptionDetails>();
		// map = opdHandlerService.getItemForAllergy(val,visitId);
		map = opdHandlerService.checkForAlreadyIssuedPrescription(val, hinId,
				hospitalId);

		boolean matched = false;
		if (map.get("matched") != null) {
			matched = (Boolean) map.get("matched");
		}
		/*
		 * prescriptionDetail = (List) map.get("prescriptionDetail"); String
		 * allergyString = ""; for (PatientPrescriptionDetails masIcd :
		 * prescriptionDetail) { allergyString =
		 * allergyString.concat(masIcd.getAllergen()).concat(" "); }
		 */

		StringBuffer sb = new StringBuffer();
		sb.append("<item>");
		sb.append("<alreadyIssued1>" + matched + "</alreadyIssued1>");
		sb.append("</item>");
		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");

		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	public ModelAndView getBedStatus(HttpServletRequest request,
			HttpServletResponse response) {
		int deptId = 0;
		if (request.getParameter("deptId") != null) {
			deptId = Integer.parseInt(request.getParameter("deptId"));
		}
		int hospitalId = 0;
		HttpSession session = request.getSession();
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
		}
		Map<String, Object> map = new HashMap<String, Object>();
		map = opdHandlerService.getBedStatus(deptId, hospitalId);
		jsp = "responseForBedStatusOP";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getDoctorDetails(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		String loginDoctor = null;
		if (request.getParameter("loginDoctor") != null)
			loginDoctor = request.getParameter("loginDoctor");
	
		int hospitalId = 0;
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			box.put("hospitalId", hospitalId);

		}

		if (request.getParameter(DEPARTMENT_ID) != null)
			request.setAttribute(DEPARTMENT_ID,
					request.getParameter(DEPARTMENT_ID));
		map = appointmentHandlerService.getDoctorList(box);
		map.put("loginDoctor", loginDoctor);
		jsp = "opd_responseForDoctorDepartment";

		map.put("jsp", jsp);
		return new ModelAndView(jsp, "map", map);

	}
	
	
	public ModelAndView getQuestionnaire(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		String loginDoctor = null;
		if (request.getParameter("loginDoctor") != null)
			loginDoctor = request.getParameter("loginDoctor");
	
		int hospitalId = 0;
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			box.put("hospitalId", hospitalId);

		}

		map = appointmentHandlerService.getQuestionnaireList(box);

		jsp = "getQuestionnaire";

		map.put("jsp", jsp);
		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView getDoctorDetailsIPD(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		if (request.getParameter(DEPARTMENT_ID) != null)
			request.setAttribute(DEPARTMENT_ID,
					request.getParameter(DEPARTMENT_ID));

		int hospitalId = 0;
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			box.put("hospitalId", hospitalId);

		}
		map = appointmentHandlerService.getDoctorList(box);

		jsp = "opd_responseForDoctorDepartmentIPD";

		map.put("jsp", jsp);
		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView checkMappedCharge(HttpServletRequest request,
			HttpServletResponse response) throws IOException {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		String chargeName = request.getParameter("chargeName");
		int doctorId = 0;
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		doctorId = Integer.parseInt(request.getParameter("doctorId"));
		map.put("chargeName", chargeName);
		map = opdHandlerService.checkMappedCharge(map);
		int count = (Integer) map.get("count");
		int chargecodeId = 0;
		if (map.get("chargecodeId") != null) {
			chargecodeId = (Integer) map.get("chargecodeId");
		}

		String jsp = "procedureAdviceList";
		// map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);

		/*
		 * PrintWriter out=response.getWriter(); if(count>0)
		 * out.write("success|"+chargecodeId); else out.write("failed|0");
		 */

	}

	public ModelAndView getHospitalDepartment(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int hospitalId = 0;
		if (request.getParameter("hospitalId") != null) {
			hospitalId = Integer.parseInt(request.getParameter("hospitalId"));
		}
		map.put("hospitalId", hospitalId);
		map = opdHandlerService.getHospitalDepartment(map);
		return new ModelAndView("opd_responseForHospitalDepartment", "map", map);
	}

	public ModelAndView getHospitalWards(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int hospitalId = 0;
		if (request.getParameter("hospitalId") != null) {
			hospitalId = Integer.parseInt(request.getParameter("hospitalId"));
		}
		map.put("hospitalId", hospitalId);
		map = opdHandlerService.getHospitalWards(map);
		return new ModelAndView("opd_responseForHospitalDepartment", "map", map);
	}

	public ModelAndView getOPNursingCareWaitingList(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			HttpSession session = request.getSession();
			Integer hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			map.put("hospitalId", hospitalId);
			if (session.getAttribute("deptId") != null) {
				int deptId = (Integer) session.getAttribute("deptId");
				map.put("deptId", deptId);
			}
			Date FromDateId = new Date();
			if (request.getParameter("FromDateId") != null
					|| request.getParameter("FromDateId") != "") {
				FromDateId = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter("FromDateId"));
				map.put("FromDateId", FromDateId);
			}
			Date ToDateId = new Date();
			if (request.getParameter("ToDateId") != null
					|| request.getParameter("ToDateId") != "") {
				ToDateId = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter("ToDateId"));
				map.put("ToDateId", ToDateId);
			}
			map = opdHandlerService.getOPNursingCareWaitingList(map);
			map.put("FromDateId", request.getParameter("FromDateId"));
			map.put("ToDateId", request.getParameter("ToDateId"));
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "op_nursingcare_waiting_list.jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	@SuppressWarnings("unchecked")
	public ModelAndView getOPNursingCareScreenJSP(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		String uhid = request.getParameter("hinNo");
		Integer injAppId = null;
		if (request.getParameter("injAppId") != null) {
			injAppId = Integer.parseInt(request.getParameter("injAppId"));
		}
		Integer departmentId = null;
		if (session.getAttribute("deptId") != null) {
			departmentId = (Integer) session.getAttribute("deptId");
		}
		Integer hospitalId = null;
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		}

		Date date = null;
		if (request.getParameter("opdDate") != null) {
			map.put("opdDate", request.getParameter("opdDate"));
		}
		// treat opdate as appointmentdate
		int visitId = 0;
		if (request.getParameter("visitId") != null) {
			map.put("visitId",
					Integer.parseInt(request.getParameter("visitId")));
		}

		map.put("departmentId", departmentId);
		map.put("hospitalId", hospitalId);
		map.put("hinNo", uhid);
		map.put("injAppId", injAppId);
		map = opdHandlerService.getDrugAndProcedureDetails(map);
		jsp = "op_nursing_care.jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}
	public ModelAndView getPhysiotherapyNursingCareWaitingList(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			HttpSession session = request.getSession();
			Integer hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			map.put("hospitalId", hospitalId);
			if (session.getAttribute("deptId") != null) {
				int deptId = (Integer) session.getAttribute("deptId");
				map.put("deptId", deptId);
			}
			Date FromDateId = new Date();
			if (request.getParameter("FromDateId") != null
					|| request.getParameter("FromDateId") != "") {
				FromDateId = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter("FromDateId"));
				map.put("FromDateId", FromDateId);
			}
			Date ToDateId = new Date();
			if (request.getParameter("ToDateId") != null
					|| request.getParameter("ToDateId") != "") {
				ToDateId = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter("ToDateId"));
				map.put("ToDateId", ToDateId);
			}
			String serviceNo="";
			if (request.getParameter("serviceNo") != null) {
				serviceNo = request.getParameter("serviceNo");
						
				
			}
			map.put("serviceNo", serviceNo);
			map = opdHandlerService.getPhysiotherapyNursingCareWaitingList(map);
			map.put("FromDateId", request.getParameter("FromDateId"));
			map.put("ToDateId", request.getParameter("ToDateId"));
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "phy_nursingcare_waiting_list.jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	@SuppressWarnings("unchecked")
	public ModelAndView getPhysiotherapyNursingCareScreen(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		String uhid = request.getParameter("hinNo");
		Integer injAppId = null;
		if (request.getParameter("injAppId") != null) {
			injAppId = Integer.parseInt(request.getParameter("injAppId"));
		}
		Integer departmentId = null;
		if (session.getAttribute("deptId") != null) {
			departmentId = (Integer) session.getAttribute("deptId");
		}
		Integer hospitalId = null;
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		}

		Date date = null;
		if (request.getParameter("opdDate") != null) {
			map.put("opdDate", request.getParameter("opdDate"));
		}
		// treat opdate as appointmentdate
		int visitId = 0;
		if (request.getParameter("visitId") != null) {
			map.put("visitId",
					Integer.parseInt(request.getParameter("visitId")));
		}

		map.put("departmentId", departmentId);
		map.put("hospitalId", hospitalId);
		map.put("hinNo", uhid);
		map.put("injAppId", injAppId);
		map = opdHandlerService.getPhysiotherapyDetails(map);
		jsp = "physiotherapy_nursing_care.jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}
	
	public ModelAndView openPopupForInjectionIssue(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		int deptId = 0;
		int hospitalId = 0;
		HttpSession session = request.getSession();
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		box.put("deptId", deptId);
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		box.put("hospitalId", hospitalId);

		map = opdHandlerService.getItemBatch(box);
		map.put("counter", box.getInt("counter"));
		map.put("flag", box.getString("flag"));

		String jsp = "issueInjectionPopup";
		return new ModelAndView(jsp, "map", map);
	}

	/*
	 * public ModelAndView getPendingInjectionList(HttpServletRequest request,
	 * HttpServletResponse response) { Map<String, Object> map = new
	 * HashMap<String, Object>(); Box box = HMSUtil.getBox(request); HttpSession
	 * session = request.getSession(); int hospitalId = (Integer)
	 * session.getAttribute(HOSPITAL_ID); int
	 * deptId=(Integer)session.getAttribute("deptId"); box.put("hospitalId",
	 * hospitalId); box.put("deptId", deptId); Date FromDate=new Date(); Date
	 * ToDate=new Date(); if(request.getParameter("FromDateId")!=null){
	 * FromDate=
	 * HMSUtil.convertStringTypeDateToDateType(request.getParameter("FromDateId"
	 * )); } if(request.getParameter("ToDateId")!=null){
	 * ToDate=HMSUtil.convertStringTypeDateToDateType
	 * (request.getParameter("ToDateId")); } map =
	 * opdHandlerService.getPendingInjectionList
	 * (box,FromDate,ToDate,hospitalId); String jsp =
	 * "injectionWaitingList.jsp"; map.put("contentJsp", jsp); return new
	 * ModelAndView("index","map",map); }
	 */

	public ModelAndView submitNursingCare(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();

		Box box = HMSUtil.getBox(request);

		// added by amit das on 16-09-2016
		if (session.getAttribute("hospitalId") != null) {

			box.put("hospitalId", (Integer) session.getAttribute("hospitalId"));
		}

		if (session.getAttribute("deptId") != null) {
			box.put("departmentId", (Integer) session.getAttribute("deptId"));

		}
	
		map = opdHandlerService.submitNursingCare(box);
		boolean flag = false;
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}

		try {
			PrintWriter pw = response.getWriter();
			pw.write("success~~~" + flag);

		}

		catch (Exception e) {
			e.printStackTrace();
		}

		String msg = "OP Nursing submited successfully.";
		map.put("nursing_msg", msg);
		jsp = "op_nursing_care.jsp";
		map.put("contentJsp", jsp);
		title = "OP Nursing Care";
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView openPopupForProcedureIssue(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		int deptId = 0;
		int hospitalId = 0;
		HttpSession session = request.getSession();
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		box.put("deptId", deptId);
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		box.put("hospitalId", hospitalId);

		int procedureDetailsId = 0;

		map = opdHandlerService.getProcedureDetailsForPopUp(box);

		String jsp = "issueProcedurePopup";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView saveNursingCare(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		map = opdHandlerService.saveNursingCare(box);
		boolean flag = false;
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}

		try {
			PrintWriter pw = response.getWriter();
			pw.write("success~~~" + flag);

		}

		catch (Exception e) {
			e.printStackTrace();
		}

		return null;

	}

	public void checkDuplicateForOtherMedicine(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemMasterList = new ArrayList<MasStoreItem>();
		String pvmsNo = "";
		HttpSession session = request.getSession();
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		dataMap.put("hospitalId", hospitalId);
		if (request.getParameter("pvmsNo") != null) {
			pvmsNo = request.getParameter("pvmsNo");
		}

		dataMap.put("pvmsNo", pvmsNo);
		map = opdHandlerService.checkDuplicateForOtherMedicine(dataMap);
		if (map.get("itemMasterList") != null) {
			itemMasterList = (List<MasStoreItem>) map.get("itemMasterList");
		}
		int itemId = 0;
		if (itemMasterList.size() > 0) {
			MasStoreItem storeItem = itemMasterList.get(0);
			itemId = storeItem.getId();

		}

		StringBuffer sb = new StringBuffer();
		sb.append("<item>");
		if (itemMasterList.size() > 0) {
			sb.append("<message>" + "Drug is already exist." + "</message>");
		} else {
			sb.append("<message>" + "" + "</message>");
		}
		sb.append("</item>");

		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public ModelAndView showCtJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		Box box = HMSUtil.getBox(request);
		box.put("hospitalId", hospitalId);
		map = opdHandlerService.showCtJsp(box);
		jsp = "ct";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView getPatientDetailsForCT(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		String serviceNo = box.getString("serviceNo");
		map = opdHandlerService.getPatientDetailsFordirectVisitEntry(serviceNo);

		String jsp = "responseForCtHinNo";
		// String jsp = "responseForDirectVisitEntry";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getPatientData(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		int hinId = 0;
		hinId = box.getInt("hinId");
		box.put("hinId", hinId);
		map = opdHandlerService.getPatientData(box);
		String jsp = "responseForCtPatientDetails";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView saveCtDetails(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		int departmentId = (Integer) session.getAttribute("deptId");
		Users user = (Users) session.getAttribute("users");
		Integer userId = user.getId();
		box.put("hospitalId", hospitalId);
		box.put("departmentId", departmentId);
		box.put("userId", userId);
		box.put("userName", user.getUserName());
		map = opdHandlerService.saveCtDetails(box);
		boolean flag = false;
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}
		String message = "";
		if (flag) {
			message = "Data saved successfully.";
		} else {
			message = "Try again.";
		}
		map.put("message", message);
		jsp = "ct";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	// ----------------------- Dinesh Dubey
	// -----------------------------------------------------
	@SuppressWarnings("unused")
	public ModelAndView showGridForInvestigationMedicalExam(
			HttpServletRequest request, HttpServletResponse response) {

		HttpSession session = request.getSession();
		String flag = "";
		int investigationTemplateId = Integer.parseInt(request
				.getParameter("investigationTemplateId"));
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
		}

		map = opdHandlerService
				.showOPDInvestigationRecords(investigationTemplateId);

		jsp = MEDICALEXAM_GRID_FOR_INVESTIGATION_JSP;

		title = "Patient Investigation Details";
		map.put("flag", flag);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);

	}

	public void showOpdHelpFile(HttpServletRequest request,
			HttpServletResponse response) {

		Box box = HMSUtil.getBox(request);
		String filename = null;
		String fileExtension = null;
		MultipartFormDataRequest mrequest = null;

		if (MultipartFormDataRequest.isMultipartFormData(request)) {
			try {
				mrequest = new MultipartFormDataRequest(request);
			} catch (UploadException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		Map<String, Object> uploadFileMap = new HashMap<String, Object>();

		// String uploadURL = getServletContext().getRealPath("/upload/");
		String userHome = getServletContext().getRealPath("");
		String fileSeparator = System.getProperty("file.separator");
		String uploadURL = userHome + fileSeparator + "help" + fileSeparator;

		// String whiteList = "*.zip";
		// String whiteList = "*.jpg";

		// Long fileSizeLimit = 2097152l;

		/*
		 * List fileUploadedList = null; fileUploadedList =
		 * HMSUtil.uploadFile(mrequest,uploadURL, whiteList,
		 * box.getString("filename"));
		 * //System.out.println("fileUploadedList="+fileUploadedList.size());
		 * Boolean fileUploaded=false; if(fileUploadedList != null &&
		 * fileUploadedList.size()!=0) { fileUploaded = (Boolean)
		 * fileUploadedList.get(0); }
		 */

		try {

			response.setContentType("application/pdf");

			response.setHeader("Content-Disposition", "attachment;filename="
					+ java.net.URLEncoder.encode("OPD.pdf") + "");

			// System.out.println("box.getString(filename)==" + filename + "."+
			// fileExtension);
			// response.setContentType("image/"+fileExtension);
			// response.setHeader("Content-Disposition", "attachment;
			// filename="+filename+"."+fileExtension);

			File f = new File(uploadURL + "/OPD.pdf");
			InputStream in = new FileInputStream(f);
			response.getOutputStream().flush();
			ServletOutputStream outs = response.getOutputStream();

			long length = f.length();

			if (length > Integer.MAX_VALUE) {
				// File is too large
			}

			// Create the byte array to hold the data
			byte[] bytes = new byte[(int) length];

			int offset = 0;
			int numRead = 0;
			while (offset < bytes.length
					&& (numRead = in.read(bytes, offset, bytes.length - offset)) >= 0) {
				offset += numRead;
			}

			if (offset < bytes.length) {
			}
			outs.write(bytes);
			in.close();

		} catch (IOException ioe) {
			ioe.printStackTrace();
		}

	}

	public ModelAndView showRelatedMedicineNames(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		if (session.getAttribute("hospitalId") != null)
			hospitalId = (Integer) session.getAttribute("hospitalId");
		box.put("hospitalId", hospitalId);

		map = opdHandlerService.showRelatedMedicineNames(box);

		jsp = "opdMedicineList";

		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public ModelAndView showPatientMedicalCaseSheetHISReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		boolean confidentialFlag = false;
		int visiNo = 0;
		int hospitalId = 0;
		int deptId = 0;
		String serviceNo = "";
		String hinNo = "";
		String hospitalName = "";
		String hospitalAddress = "";
		String loginName = "";
		int currHospitalId = 0;
		int hospitalIdForReport = 0;
		int hospitalId1 = 0;
		int hinId = 0;
		String tempDetail = "no";
		String caseSheetFlag = "no";
		session = request.getSession(true);
		String db_from = "his";
		int userId = 0;

		if (request.getParameter("hospitalIdForReport") != null
				&& !(request.getParameter("hospitalIdForReport").equals(""))) {
			hospitalIdForReport = Integer.parseInt(request
					.getParameter("hospitalIdForReport"));
		}

		if (request.getParameter(SERVICE_NO_FOR_REPORT) != null) {
			serviceNo = request.getParameter(SERVICE_NO_FOR_REPORT);
		}

		if (request.getParameter(VISIT_ID) != null
				&& !(request.getParameter(VISIT_ID).equals(""))) {
			visiNo = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		if (request.getParameter(HIN_NO_FOR_REPORT) != null
				&& !(request.getParameter(HIN_NO_FOR_REPORT).equals(""))) {
			hinNo = request.getParameter(HIN_NO_FOR_REPORT);
		}
		if (session.getAttribute("userName") != null) {
			loginName = (String) session.getAttribute("userName");
		}
		if (request.getParameter("hinId") != null
				&& !(request.getParameter("hinId").equals(""))) {
			hinId = Integer.parseInt(request.getParameter("hinId"));
		}
		if (request.getParameter("caseSheetFlag") != null
				&& !(request.getParameter("caseSheetFlag").equals(""))) {
			caseSheetFlag = request.getParameter("caseSheetFlag");
		}
		if (hospitalId == 0) {
			hospitalId = currHospitalId;
		}
		mapForDS.put("loginName", loginName);
		mapForDS.put("hospitalId", currHospitalId);
		mapForDS.put("visitId", visiNo);
		mapForDS.put("deptId", deptId);
		/*
		 * confidentialFlag =
		 * opdHandlerService.viewVisitAuthorization(mapForDS);
		 * if(!confidentialFlag){ jsp = "msgForUnothorizedUser.jsp";
		 * map.put("flag", confidentialFlag); map.put("contentJsp", jsp);
		 * map.put("title", title); return new
		 * ModelAndView("msgForUnothorizedUser", "map", map); }else{
		 * dataMap=opdHandlerService.getHospitalNameAndAddress(hospitalId);
		 * if(dataMap.get("hospitalName")!=null){
		 * hospitalName=(String)dataMap.get("hospitalName"); }
		 * if(dataMap.get("hospitalAddress")!=null){
		 * hospitalAddress=(String)dataMap.get("hospitalAddress"); } dataMap =
		 * opdHandlerService.getLoginUserName(loginName); String userName ="";
		 * String userRank =""; if(dataMap.get("userName")!=null){
		 * userName=(String)dataMap.get("userName"); }
		 * if(dataMap.get("userRank")!=null){
		 * userRank=(String)dataMap.get("userRank"); }
		 */
		mapForDS.put("currentVisitId", visiNo);
		mapForDS.put("hinId", hinId);
		mapForDS.put("hospitalId", hospitalId);
		mapForDS.put("flag", "current");
		// detailsMap =
		// opdHandlerService.viewOpdTemplateDepartmentWise1(mapForDS);
		List tempDeptList = null;

		if (caseSheetFlag.equals("yes")) {

			Map<String, Object> parameters = new HashMap<String, Object>();
			parameters.put("userId", userId);

			parameters.put("visitNo", visiNo);
			parameters.put("serviceNo", serviceNo);
			parameters.put("hinNo", hinNo);
			parameters.put("hospitalId", hospitalId);

			parameters.put("hospitalName", "Test");
			parameters.put("hospitalAddress", "Test Address");
			parameters.put("userName", "TestU");
			parameters.put("userRank", "TestR");
			//System.out.println("db_from=" + db_from);
			if (db_from.equalsIgnoreCase("his")) {
				//System.out.println("1=");
				detailsMap = opdHandlerService.getConnectionForReportForHIS();

				//System.out.println("12=");
				parameters.put("SUBREPORT_DIR", getServletContext()
						.getRealPath("/reports/HISReport/"));
				//System.out.println("13=");
				HMSUtil.generateHISReport("PatientMedicalCaseSheetReport",
						parameters, (Connection) detailsMap.get("conn"),
						response, getServletContext());

			} else if (db_from.equalsIgnoreCase("mednet")) {
				/*
				 * detailsMap =
				 * opdHandlerService.getConnectionForReportForMednet();
				 * 
				 * parameters.put("visitId", visiNo);
				 * parameters.put("SUBREPORT_DIR",
				 * getServletContext().getRealPath("/reports/MednetReports/"));
				 * HMSUtil
				 * .generateReportForMednet("medicalCaseSheetnewforstorage"
				 * ,parameters, (Connection)detailsMap.get("conn"), response,
				 * getServletContext());
				 */

			} else {
				/*
				 * detailsMap = opdHandlerService.getConnectionForReport();
				 * parameters.put("SUBREPORT_DIR",
				 * getServletContext().getRealPath( "/reports/"));
				 * HMSUtil.generateReport
				 * (PATIENT_MEDICAL_CASESHEET_REPORT,parameters,
				 * (Connection)detailsMap.get("conn"), response,
				 * getServletContext());
				 */

			}

		}

		return null;
	}

	public ModelAndView showHospitalizedDischargeSummaryHISReport(
			HttpServletRequest request, HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> parameters = new HashMap<String, Object>();
		Map<String, Object> mapDetail = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hospitalIdForReport = 0;

		String caseType = "";

		String serviceNo = "";
		String adNo = "";
		session = request.getSession(true);
		try {

			if (request.getParameter("casetypecombo") != null
					&& !(request.getParameter("casetypecombo").equals(""))) {
				caseType = request.getParameter("casetypecombo");
			}

			if (request.getParameter("serviceNo1") != null
					&& !(request.getParameter("serviceNo1").equals(""))) {
				serviceNo = request.getParameter("serviceNo1");

			}
			if (request.getParameter("adNo1") != null
					&& !(request.getParameter("adNo1").equals(""))) {
				adNo = request.getParameter("adNo1");

			}
			//System.out.println("serviceNo=" + serviceNo);
			//System.out.println("adNo=" + adNo);

			if (parameters.get("hospitalIdForReport") != null) {
				hospitalIdForReport = (Integer) parameters
						.get("hospitalIdForReport");
			}

			detailsMap = opdHandlerService.getConnectionForReportForHIS();

			parameters.put("casetype", caseType);

			parameters.put("serviceNo", serviceNo);
			parameters.put("adNo", adNo);
			parameters.put("hospitalIdForReport", hospitalIdForReport);
			parameters.put("SUBREPORT_DIR",
					getServletContext().getRealPath("/reports/HISReport/"));

			if (caseType.equalsIgnoreCase("G")) {
				HMSUtil.generateHISReport("Discharge_Summary_General1",
						parameters, (Connection) detailsMap.get("conn"),
						response, getServletContext());
			} else if (caseType.equalsIgnoreCase("O")) {
				HMSUtil.generateHISReport("Discharge_Summary_Gyna1",
						parameters, (Connection) detailsMap.get("conn"),
						response, getServletContext());
			} else if (caseType.equalsIgnoreCase("P")) {
				HMSUtil.generateHISReport("Discharge_Summary_Pedia1",
						parameters, (Connection) detailsMap.get("conn"),
						response, getServletContext());
			} else if (caseType.equalsIgnoreCase("N")) {
				parameters.put("SUBREPORT_DIR", getServletContext()
						.getRealPath("/reports/"));
				HMSUtil.generateHISReport("Discharge_Summary_NABH1",
						parameters, (Connection) detailsMap.get("conn"),
						response, getServletContext());
			} else {
				map.put("status", "nodata");
				map.put("admissionNumber", parameters.get("adNo"));
				map.put("hinNo", parameters.get("hinNo"));
				HMSUtil.generateHISReport("No_Data", parameters,
						(Connection) detailsMap.get("conn"), response,
						getServletContext());

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	public ModelAndView doPatientRelease(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();

		int visitId = 0;
		HttpSession session = request.getSession();
		int hospitalId = 0;
		int deptId = 0;
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
		}

		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}

		if (request.getParameter("visitId") != null
				&& !request.getParameter("visitId").equals("0")) {
			visitId = Integer.parseInt(request.getParameter("visitId"));
		}
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("deptId", deptId);
		dataMap.put("visitId", visitId);

		map = opdHandlerService.doPatientRelease(dataMap);

		boolean flag = false;
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}

		try {
			PrintWriter pw = response.getWriter();
			pw.write("success~~~" + flag);

		}

		catch (Exception e) {
			e.printStackTrace();
		}

		return null;

	}

	public ModelAndView showOpdCaseSheetReportJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = "opdCaseSheet" + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public ModelAndView showOpdCaseSheetReport(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> parameters = new HashMap<String, Object>();
		Map<String, Object> datamap = new HashMap<String, Object>();
		int visitId = 0;
		String serviceNo = "";
		String hinNo = "";
		int deptId = 0;
		int hinId = 0;
		String flagPrint = "";
		int opdPatientDetailsId=0;
		if (request.getParameter("flagPrint") != null) {
			flagPrint = request.getParameter("flagPrint");
		}
		if (request.getParameter(SERVICE_NO) != null) {
			serviceNo = request.getParameter(SERVICE_NO);
		}
		if (request.getParameter("opdPatientDetailsId") != null) {
			opdPatientDetailsId = Integer.parseInt(request.getParameter("opdPatientDetailsId"));
		}
		if (request.getParameter(VISIT_ID) != null) {
			String a[] = request.getParameter(VISIT_ID).split("@");
			if( a.length>=3)
			{
				visitId =Integer.parseInt(a[0]);
				opdPatientDetailsId =  Integer.parseInt(a[1]);
			}
			else
				visitId = Integer.parseInt(request.getParameter(VISIT_ID));
			//System.out.println(request.getParameter(VISIT_ID)+ a.length +" vis" + request.getParameter(VISIT_ID)); 
			
			
		}
		
		if (request.getParameter(HIN_NO) != null) {
			hinNo = request.getParameter(HIN_NO);

			// hinId = opdHandlerService.getPatient(hinNo);
			datamap = opdHandlerService.getVisitForPatient(hinNo, visitId);

			if (datamap.get("hinId") != null) {
				hinId = (Integer) datamap.get("hinId");
			}
			if (datamap.get("deptId") != null) {
				deptId = (Integer) datamap.get("deptId");
			}
			
			parameters.put("hinId", hinId);
			parameters.put("deptId", deptId);
		}
		Properties properties = new Properties();
		URL resourcePathHIC = Thread.currentThread().getContextClassLoader()
				.getResource("adt.properties");
		try {
			properties.load(resourcePathHIC.openStream());
		} catch (Exception e) {
			e.printStackTrace();
		}
		int deptIdProp = Integer.parseInt(properties
				.getProperty("departmentIdForDental"));

		String FlagforOPD = "NA";
		
		if (deptIdProp == deptId) {
			FlagforOPD = "Dental";
		} else {
			FlagforOPD = "General";
		}
		HttpSession session = request.getSession();
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);

		Map<String, Object> detailsMap = new HashMap<String, Object>();
	/*	System.out.println("serviceNo==" + serviceNo);
		System.out.println("visitId==" + visitId);
		System.out.println("hinNo==" + hinNo);
		System.out.println("hospitalId==" + hospitalId);
		System.out.println("opdPatientDetailsId==" + opdPatientDetailsId);*/
		detailsMap = opdHandlerService.getConnectionForReport();

		String userHome = getServletContext().getRealPath("");
		String imagePath = userHome + "/jsp/images/logonew-hal.jpg";
		parameters.put("path", imagePath);

		parameters.put("hospitalId", hospitalId);
		parameters.put("visitId", visitId);
		parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		parameters.put("date", new Date());
		parameters.put("FlagforOPD", FlagforOPD);
		parameters.put("opdPatientDetailsId", opdPatientDetailsId);
		parameters.put("SUBREPORT_DIR",
				getServletContext().getRealPath("/reports/"));
		if (flagPrint.equalsIgnoreCase("opdQuestion")) {
			HMSUtil.generateReport("psychiatrist_ques_answer", parameters,
					(Connection) detailsMap.get("conn"), response,
					getServletContext());
		} else if (flagPrint.equalsIgnoreCase("opd")) {
			HMSUtil.generateReport("medicalCaseSheetnewforstorage", parameters,
					(Connection) detailsMap.get("conn"), response,
					getServletContext());
		}
		// HMSUtil.generateReportInWord("PatientPrescriptionFormat", parameters,
		// (Connection)detailsMap.get("conn"), response, getServletContext());
		return null;

	}

	public ModelAndView getPresVisitNoForOPD(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		String hinNo = "";
		if (request.getParameter(HIN_NO) != null) {
			hinNo = request.getParameter(HIN_NO);
		}

		List<Visit> visitList = new ArrayList<Visit>();
		visitList = opdHandlerService.getPresVisitNoForOPD(hinNo);

		String jsp = "populateVisitNoForOPD";
		map.put("visitList", visitList);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getOPRecallWaitingList(HttpServletRequest request,
			HttpServletResponse response) {
		int deptId = 0;
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();

		int tokeNo = 0;
		String patientName;
		String uhid;
		int opd_DepartmentId = 0;
		int hospitalId = 0;
		int searchFlag = 0;
		String flag = "rc";
		int docId = 0;
		mapForDS.put("forOPClinnic", true);
		mapForDS.put("flag", flag);
		String serviceNo="";
		/*
		 * if(request.getParameter("flag")!=null){
		 * flag=request.getParameter("flag"); mapForDS.put("flag",flag); }
		 */
		if (request.getParameter("searchFlag") != null) {
			searchFlag = Integer.parseInt(request.getParameter("searchFlag"));
			mapForDS.put("searchFlag", searchFlag);
		}

		if (request.getParameter("tokenNo") != null
				&& !request.getParameter("tokenNo").equals("")) {
			tokeNo = Integer.parseInt(request.getParameter("tokenNo"));
			mapForDS.put("tokenNo", tokeNo);
		}
		if (request.getParameter("patientName") != null
				&& !request.getParameter("patientName").equals("")) {
			patientName = request.getParameter("patientName");
			mapForDS.put("patientName", patientName);
		}
		if (request.getParameter("serviceNo") != null) {
			serviceNo = request.getParameter("serviceNo");
			mapForDS.put("serviceNo", serviceNo);
		}

		if (session.getAttribute("empId") != null) {
			docId = (Integer) session.getAttribute("empId");
		}

		if (request.getParameter("doctorId") != null) {
			docId = Integer.parseInt(request.getParameter("doctorId"));
			mapForDS.put("empId", docId);
		}
		if (request.getParameter(SESSION_ID) != null) {
		
			mapForDS.put(SESSION_ID, Integer.parseInt(request.getParameter(SESSION_ID)));
		}
		if (docId == 0){
			docId = (Integer) session.getAttribute("empId");
			mapForDS.put("empId", docId);
			
		}

		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		}

		Integer userId = null;
		if (session.getAttribute(USER_ID) != null) {
			userId = (Integer) session.getAttribute(USER_ID);
			mapForDS.put("userId", userId);
		}

		if (request.getParameter("deptId") != null) {
			deptId = Integer.parseInt(request.getParameter("deptId"));
			session.setAttribute("deptId", deptId);
			mapForDS.put("deptId", deptId);
		} else {
			if (session.getAttribute("deptId") != null) {
				deptId = (Integer) session.getAttribute("deptId");
				mapForDS.put("deptId", deptId);
			}
		}

		String title = request.getParameter("title");
		mapForDS.put("hospitalId", hospitalId);
		mapForDS.put("empId", docId);

		if (request.getParameter("visitDate") != null && !request.getParameter("visitDate").isEmpty()) {
			mapForDS.put("visitDate", request.getParameter("visitDate"));
		} 
		
		mapForDS.put("opClinicalWaitinList", true);

		map = opdHandlerService.getWaitingPatientList(mapForDS);
		if (session.getAttribute("deptName") != null) {
			map.put("deptName", (String) session.getAttribute("deptName"));
		}
		String deptName = (String) map.get("deptName");
map.put("docId", docId);
		session.setAttribute("deptName", deptName);
		String jsp = "op_clinical_waiting_list.jsp";
		// String jsp = "opd_waitingList.jsp";
		title = "Waiting Patient List";
		map.put("deptId", deptId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView submitRecallOpdPatientDetails(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> mapForDS = new HashMap<String, Object>();
		Map<String, Object> mapForDSPro = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		int hinId = Integer.parseInt(request.getParameter("hinId"));
		int departmentId = Integer.parseInt(request
				.getParameter("departmentId"));
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		// System.out.println("controller visitId---" + visitId);
		int hospitalId = Integer.parseInt(request.getParameter("hospitalId"));
		// details captured for opd patient details table
		int empId = 0;
		/*if (request.getParameter("empId") != null
				&& request.getParameter("empId") != "") {
			empId = Integer.parseInt(request.getParameter("empId"));
		}*/
		
		if (session.getAttribute("empId") != null
				&& session.getAttribute("empId") != "") {
			empId =  (Integer) session.getAttribute("empId");
		}
		boolean hl7Flag = false;
		if (request.getParameter("labradiologyCheck").equals("Radio"))
			hl7Flag = true;
		int empIdCurrnet = 0;
		empIdCurrnet = (Integer) session.getAttribute("empId");
		String returnfromHospital = null;
		String hospName = null;
		String doa = null;
		String dod = null;
		String gpe_examination = null;
		String systamicExam = null;
		String height = null;
		String weight = null;
		String pulse = null;
		int visitNo = 0;
		String days = null;
		String bp = null;
		String rr = null;
		String temperature = null;
		String serviceNo = null;
		String hinNo = null;
		String plan = null;
		String initialDiagnosis = null;
		String disposal = "";
		String nextVisitDate = null;
		String afmsDescription = null;
		String userName = null;
		String flag = null;
		boolean submitData = false;
		String urlDept = "";
		String departmentName = "";
		String adviceOnDischarge = "";
		String pastDiagnosis = "";
		String pastdisposal = "";
		String DaysPhy = "";
		String DurationPhy = "";
		int threpytypeId = 0;
		String whr = "";
		String allergies = "";
		String reviewAt = "";
		if (!request.getParameter("flag").equals("")) {
			flag = request.getParameter("flag");
		}

		if (request.getParameter("height") != null) {
			height = request.getParameter("height");
		}
		if (request.getParameter("whr") != null) {
			whr = request.getParameter("whr");
		}
		if (request.getParameter("disposal") != null) {
			disposal = request.getParameter("disposal");
		}
		// System.out.println("disposal ct  746 "+disposal);
		if (request.getParameter("weight") != null) {
			weight = request.getParameter("weight");
		}
		if (request.getParameter("pulse") != null) {
			pulse = request.getParameter("pulse");
		}
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
		}
		int priority = 0;
		if (request.getParameter("urgent") != null) {
			priority = Integer.parseInt(request.getParameter("urgent"));
		}
		if (request.getParameter("bp") != null) {
			bp = request.getParameter("bp");
		}
		if (request.getParameter("temperature") != null) {
			temperature = request.getParameter("temperature");
		}
		if (request.getParameter(SERVICE_NO) != null) {
			serviceNo = request.getParameter(SERVICE_NO);
		}
		if (request.getParameter(HIN_NO) != null) {
			hinNo = request.getParameter(HIN_NO);
		}
		if (request.getParameter("plan") != null) {
			plan = request.getParameter("plan");
		}
		if (request.getParameter("hospName") != null) {
			hospName = request.getParameter("hospName");
		}
		if (request.getParameter("returnfromHospital") != null) {
			returnfromHospital = request.getParameter("returnfromHospital");
		}
		String referedToMH = "";

		if (request.getParameter("referedToMH") != null
				&& !request.getParameter("referedToMH").equals("")) {
			referedToMH = request.getParameter("referedToMH");
		} else {
			referedToMH = "n";
		}
		String mh = "";
		if (request.getParameter("mh") != null) {
			mh = request.getParameter("mh");
		}
		String mhDepartment = "";
		if (request.getParameter("mhDepartment") != null) {
			mhDepartment = request.getParameter("mhDepartment");
		}
		String mhReferredFor = "";
		if (request.getParameter("mhReferredFor") != null) {
			mhReferredFor = request.getParameter("mhReferredFor");
		}

		if (request.getParameter("doa") != null) {
			doa = request.getParameter("doa");
		}
		if (request.getParameter("dod") != null) {
			dod = request.getParameter("dod");
		}
		if (request.getParameter("gpe_examination") != null) {
			gpe_examination = request.getParameter("gpe_examination");
		}
		if (request.getParameter("systamicExam") != null) {
			systamicExam = request.getParameter("systamicExam");
		}
		if (request.getParameter("rr") != null) {
			rr = request.getParameter("rr");
		}
		if (request.getParameter("adviceOnDischarge") != null) {
			adviceOnDischarge = request.getParameter("adviceOnDischarge");
		}
		if (request.getParameter("pastDiagnosis") != null) {
			pastDiagnosis = request.getParameter("pastDiagnosis");
		}
		if (request.getParameter("pastdisposal") != null) {
			pastdisposal = request.getParameter("pastdisposal");
		}

		if (request.getParameter("DaysPhy") != null) {
			DaysPhy = request.getParameter("DaysPhy");
		}
		if (request.getParameter("DurationPhy") != null) {
			DurationPhy = request.getParameter("DurationPhy");
		}
		if (request.getParameter("threpytypeId") != null
				&& Integer.parseInt(request.getParameter("threpytypeId")) != 0) {
			threpytypeId = Integer.parseInt(request
					.getParameter("threpytypeId"));
			// System.out.println("threpytypeId---" + threpytypeId);
		}

		String referredDoctars = "";
		String[] referredDoctarsArray = null;

		if (request.getParameterValues("referredDoctarsId") != null) {
			referredDoctarsArray = (String[]) request
					.getParameterValues("referredDoctarsId");
			for (int i = 0; i < referredDoctarsArray.length; i++) {
				if (i == 0)
					referredDoctars = referredDoctarsArray[i];
				else
					referredDoctars = referredDoctars + ","
							+ referredDoctarsArray[i];
			}
		}
		if (request.getParameter("initialDiagnosis") != null) {
			initialDiagnosis = request.getParameter("initialDiagnosis");
		}
		// System.out.println("initialDiagnosis---" + initialDiagnosis);
		// if (request.getParameter("relation").equalsIgnoreCase("self")) {
		if (request.getParameter("days") != null) {
			days = request.getParameter("days");
		}
		String disposalDays = "";
		if (request.getParameter("disposalDays") != null) {
			disposalDays = request.getParameter("disposalDays");
		}

		// }
		int systemDiagnosisId = 0;
/*		System.out.println("system Diagnosis======"
				+ request.getParameter("systemDiagnosis"));*/
		if (request.getParameter("systemDiagnosis") != null
				&& !request.getParameter("systemDiagnosis").equals("")) {
			String systemDiagnosis = request.getParameter("systemDiagnosis");
			int index1 = systemDiagnosis.lastIndexOf("[");
			int index2 = systemDiagnosis.lastIndexOf("]");
			index1++;
			systemDiagnosisId = Integer.parseInt(systemDiagnosis.substring(
					index1, index2));
			
		}
		if (request.getParameter("nextVisitDate") != null) {
			nextVisitDate = request.getParameter("nextVisitDate");
		}
		if (request.getParameter("afmsDescription") != null) {
			afmsDescription = request.getParameter("afmsDescription");
		}
		if (request.getParameter("userName") != null) {
			userName = request.getParameter("userName");
		}
		Users user = (Users) session.getAttribute("users");
		// Integer userId = user.getEmployee().getId();
		Integer userId = user.getId();

		String presentComplain = "";
		String presentAdvice = ""; // fayaz added
		String presentIllness = "";
		String pastHistory = "";
		String personalHistory = "";
		String familyHistory = "";
		String onExamination = "";
		String otherDetails = "";

		String riskFactor = "";
		String bmi = "";
		String idealWeight = "";
		String pastMedicalHistory = "";
		if (request.getParameter("presentComplain") != null) {
			presentComplain = request.getParameter("presentComplain");
		}

		if (request.getParameter("riskFactor") != null) {
			riskFactor = request.getParameter("riskFactor");
		}
		if (request.getParameter("bmi") != null) {
			bmi = request.getParameter("bmi");
		}
		if (request.getParameter("idealWeight") != null) {
			idealWeight = request.getParameter("idealWeight");
		}
		if (request.getParameter("pastMedicalHistory") != null) {
			pastMedicalHistory = request.getParameter("pastMedicalHistory");
		}
		if (request.getParameter("presentAdvice") != null) {
			presentAdvice = request.getParameter("presentAdvice").trim();
		}

		if (request.getParameter("presentIllness") != null) {
			presentIllness = request.getParameter("presentIllness");
		}
		if (request.getParameter("pastHistory") != null) {
			pastHistory = request.getParameter("pastHistory");
		}

		if (request.getParameter("personalHistory") != null) {
			personalHistory = request.getParameter("personalHistory");
		}

		
		// Minior OT parameters

				int procCount = 0;
				List<Integer> procedureId = null;
				List<String> surgeryType = null;

				if (request.getParameter("procCount") != null) {
					procedureId = new ArrayList<Integer>();
					surgeryType = new ArrayList<String>();
					procCount = Integer.parseInt(request.getParameter("procCount"));
					mapForDS.put("procCount",
							Integer.parseInt(request.getParameter("procCount")));
				}

				for (int i = 1; i <= procCount; i++) {

					// System.out.println("proc count "+request.getParameter("procCount")
					// +" sur "+request.getParameter("surgeryradio"+i)+" proc" +
					// request.getParameter("procedureId"+i+1));

					if (request.getParameter("procedureId" + i) != null
							&& request.getParameter("procedureId" + i) != ""
							&& request.getParameter("surgeryType" + i) != null
							&& request.getParameter("surgeryType" + i) != "") {
						// System.out.println(request.getParameter("procedureId"+i+1));
						procedureId.add(Integer.parseInt(request
								.getParameter("procedureId" + i)));
						surgeryType.add(request.getParameter("surgeryType" + i));

						// System.out.println("here "+request.getParameter("surgeryType"+i));
					}
				}

				mapForDS.put("procedureId", procedureId);
				mapForDS.put("surgeryType", surgeryType);
				mapForDS.put("procCount", procCount);

				// End Minior OT

		
		
		/*
		 * if (request.getParameter("familyHistory") != null) { familyHistory =
		 * request.getParameter("familyHistory"); }
		 */

		/*
		 * // Added By Anamika for multiple family history
		 * 
		 * String[] familyHistoryArray = null;
		 * if(request.getParameterValues("familyHistory") !=null) {
		 * familyHistoryArray = request.getParameterValues("familyHistory");
		 * //objectMap.put("familyHistoryArray", familyHistoryArray); } String
		 * otherFamilyHistorty = ""; if
		 * (request.getParameter("otherFamilyHistory") != null) {
		 * otherFamilyHistorty= request.getParameter("otherFamilyHistory");
		 * 
		 * }
		 */

		Integer referImpannelhospital = 0;

		if (request.getParameter("familyHistory") != null) {
			familyHistory = request.getParameter("familyHistory");
		}
		if (request.getParameter("allergies") != null) {
			allergies = request.getParameter("allergies");

		}

		if (request.getParameter("reviewAt") != null) {
			reviewAt = request.getParameter("reviewAt");

		}

		/**
		 * End
		 */

		if (request.getParameter("OtherDetails") != null) {
			otherDetails = request.getParameter("OtherDetails");
		}

		if (!request.getParameter("onExamination").equals("")
				&& (request.getParameter("onExamination") != null)) {
			onExamination = request.getParameter("onExamination");
		}
		/*
		 * String remaks=""; if (request.getParameter("remaks") != null) {
		 * remaks = request.getParameter("remaks"); }
		 */

		String consultationDate = request.getParameter("consultationDate");
		String consultationTime = request.getParameter("consultationTime");

		// details captured for patient prescription header and detail table
		List<String> pvmsNoList = new ArrayList<String>();
		List<Integer> frequencyList = new ArrayList<Integer>();
		List<String> dosageList = new ArrayList<String>();
		List<String> remarksList = new ArrayList<String>();
		List<String> typeLeftRightList = new ArrayList<String>();
		List<String> instructionList = new ArrayList<String>();
		List<Integer> totalList = new ArrayList<Integer>();
		List<Integer> noOfDaysList = new ArrayList<Integer>();
		List<String> routeList = new ArrayList<String>();
		List<Integer> itemConversionList = new ArrayList<Integer>();
		List<Integer> prescriptionIdList = new ArrayList<Integer>();
		List<String> injflagList = new ArrayList<String>();
		String[] diagnosisIdAray = null;

		if (request.getParameterValues(DIAGNOSIS_ID) != null) {
			diagnosisIdAray = (String[]) request
					.getParameterValues(DIAGNOSIS_ID);
		}
		// System.out.println("this is array size"+diagnosisIdAray.length);
		// --------------commented by anamika------------------//
		/*
		 * String referredDept = ""; String[] referredToDeptArray = null; if
		 * (request.getParameterValues("referredDepartmentId") != null) {
		 * referredToDeptArray = (String[]) request
		 * .getParameterValues("referredDepartmentId"); for (int i = 0; i <
		 * referredToDeptArray.length; i++) { if (i == 0) referredDept =
		 * referredToDeptArray[i]; else referredDept = referredDept + "," +
		 * referredToDeptArray[i]; } }
		 */
		// System.out.println("referredDept-----" + referredDept);
		int nomenclaturehdb = 1;
		if (Integer.parseInt(request.getParameter("nomenclaturehdb")) != 1) {
			nomenclaturehdb = Integer.parseInt(request.getParameter("nomenclaturehdb"));
		}
		String[] pvmsArr = new String[nomenclaturehdb];
		Integer[] itemIdArr = new Integer[nomenclaturehdb];
		String otherMedicine = "";
		List<String> otherMedicineList = new ArrayList<String>();
		List<String> ctList = new ArrayList<String>();
		List<String> nomenclatureList = new ArrayList<String>();
		List<Integer> itemIdList = new ArrayList<Integer>();
		List<Integer> itemClassList = new ArrayList<Integer>();
		List<String> itemDispensaryList = new ArrayList<String>();
		List<Integer> classificationList = new ArrayList<Integer>();
		List<BigDecimal> uomQtyList = new ArrayList<BigDecimal>();
		// List injCategoryList = new ArrayList();
		int j = 1;
		for (int i = 0; i < nomenclaturehdb; i++) {
			String pvmsNo = "";
			int itemId = 0;
			/*
			 * if (request.getParameter("nomenclature" + j) != null &&
			 * !request.getParameter("nomenclature" + j).equals("")) {
			 * 
			 * String nomenclature = request.getParameter("nomenclature" + j);
			 * StringTokenizer strToken = new StringTokenizer(c, "["); String
			 * nomen= strToken.nextToken(); String nomen =
			 * request.getParameter("nomenclature" + j).substring(0,
			 * request.getParameter("nomenclature" + j).indexOf("["));
			 * nomenclatureList.add(nomen); //int index1 =
			 * nomenclature.lastIndexOf("["); //int index2 =
			 * nomenclature.lastIndexOf("]");
			 * //System.out.println("index1=="+index1);
			 * //System.out.println("index2=="+index2); //index1++; //pvmsNo =
			 * nomenclature.substring(index1, index2); int index1 =
			 * nomenclature.lastIndexOf("("); int index2 =
			 * nomenclature.lastIndexOf(")");
			 * //System.out.println("index1=="+index1); //
			 * System.out.println("index2=="+index2); index1++; itemId
			 * =Integer.parseInt(nomenclature.substring(index1, index2)); if
			 * (itemId != 0) { itemIdList.add(itemId); }
			 * otherMedicineList.add(""); } else
			 * if(request.getParameter("otherMedicine"+ j) != null &&
			 * !request.getParameter("otherMedicine"+ j).equals("")){
			 * otherMedicine = request.getParameter("otherMedicine"+ j);
			 * otherMedicineList.add(otherMedicine);
			 * 
			 * } else itemIdList.add(0);
			 */
			if (request.getParameter("itemId" + j) != null
					&& !request.getParameter("nomenclature" + j).equals("")) {
				itemId = Integer.parseInt(request.getParameter("itemId" + j));
				if (itemId != 0) {
					itemIdList.add(itemId);
				}

				if (request.getParameter("itemIdClassificationId" + j) != null
						&& !request.getParameter("itemIdClassificationId" + j)
								.equals("")) {
					classificationList.add(Integer.parseInt(request
							.getParameter("itemIdClassificationId" + j)));
				} else
					classificationList.add(0);
				/*otherMedicineList.add("");*/
			} else {
				if (request.getParameter("otherMedicine" + j) != null
						&& !request.getParameter("otherMedicine" + j)
								.equals("")) {
					otherMedicine = request.getParameter("otherMedicine" + j);
					otherMedicineList.add(otherMedicine);

				}
			}
			
			if((request.getParameter("itemId" + j) != null && !request.getParameter("nomenclature" + j).equals("")) || (request.getParameter("otherMedicine" + j) != null && !request.getParameter("otherMedicine" + j).equals("")) )
			{
			int itemConversionId = 0;
			if (request.getParameter("itemConversionId" + j) != null
					&& !request.getParameter("itemConversionId" + j).equals("")) {
				itemConversionId = Integer.parseInt(request
						.getParameter("itemConversionId" + j));
				itemConversionList.add(itemConversionId);
			}
			else
				itemConversionList.add(0);

			if (request.getParameter("itemClass" + j) != null
					&& !request.getParameter("itemClass" + j).equals("")) {
				itemClassList.add(Integer.parseInt(request
						.getParameter("itemClass" + j)));
			}
			else 
				itemClassList.add(0);

			if (request.getParameter("dispensingUnit" + j) != null) {
				itemDispensaryList.add(request.getParameter("dispensingUnit"
						+ j));
			}
			else
				itemDispensaryList.add("");

			if (request.getParameter("uomQty" + j) != null) {
					uomQtyList.add(new BigDecimal(request.getParameter("uomQty"+ j)));
				}
				else
					uomQtyList.add(new BigDecimal(0));

			int itemPescriptionId = 0;
			if (request.getParameter("prescriptionId" + j) != null
					&& !request.getParameter("prescriptionId" + j).equals("")) {
				itemPescriptionId = Integer.parseInt(request
						.getParameter("prescriptionId" + j));
				prescriptionIdList.add(itemPescriptionId);
			} else {
				prescriptionIdList.add(0);
			}

			if (request.getParameter("injFlag" + j) != null) {
				injflagList.add(request.getParameter("injFlag" + j));
			} else {
				injflagList.add("");
			}

		

			int frequencyId = 0;
			if (request.getParameter("frequency" + j) != null
					&& !request.getParameter("frequency" + j).equals("")) {
				frequencyId = Integer.parseInt(request.getParameter("frequency"
						+ j));
				frequencyList.add(frequencyId);
			} else {
				frequencyList.add(0);
			}
			if (request.getParameter("ct" + j) != null) {
				ctList.add("y");
			} else {
				ctList.add("n");
			}

			String route = "";
			if (request.getParameter("route" + j) != null
					&& !request.getParameter("route" + j).equals("")) {
				route = request.getParameter("route" + j);
				routeList.add(route);
			} else {
				routeList.add("");
			}

			BigDecimal frequenceValue = new BigDecimal("0");
			if (request.getParameter("frequencyValue" + j) != null
					&& !request.getParameter("frequencyValue" + j).equals("")) {
				frequenceValue = new BigDecimal(
						request.getParameter("frequencyValue" + j));
			}

			String dosage = "";
			if (request.getParameter("dosage" + j) != null
					&& !request.getParameter("dosage" + j).equals("")) {
				dosage = request.getParameter("dosage" + j);
				dosageList.add(dosage);
			} else {
				dosageList.add("");
			}
			if (request.getParameter("noOfDays" + j) != null
					&& !request.getParameter("noOfDays" + j).equals("")) {
				int noOfDays = Integer.parseInt(request.getParameter("noOfDays"
						+ j));
				noOfDaysList.add(noOfDays);
				// int noOfdoges=1;
				// if(dosage!=null && dosage!=""){
				// noOfdoges=Integer.parseInt(dosage);
				// }
				// int total = noOfDays * frequenceValue*noOfdoges;
				// totalList.add(total);

			} else {
				noOfDaysList.add(0);
			}
			if (request.getParameter("total" + j) != null
					&& !request.getParameter("total" + j).equals("")) {
				// System.out.println("heretotalnnnn");
				int total = Math.round(Float.parseFloat(request
						.getParameter("total" + j)));
				totalList.add(total);
			} else {
				// System.out.println("heretotalnnnn111111");
				totalList.add(0);
			}

			String remarks = "";
			if (request.getParameter("remarks" + j) != null
					&& !request.getParameter("remarks" + j).equals("")) {
				remarks = request.getParameter("remarks" + j);
				remarksList.add(remarks);
			} else {
				remarksList.add("");
			}
			}
			// if(!pvmsNo.equals("")){
			// pvmsNoList.add(pvmsNo);
			// }
			// pvmsNoList.add(pvmsArr[i]);

			j++;
		}
		
		//capture NIP
		//j =500;
		int n=itemIdList.size();
				int hdb = 1;
			
				if (Integer.parseInt(request.getParameter("hdb")) != 1) {
					hdb = Integer.parseInt(request.getParameter("hdb"));
				}
				
				
				for (j = 500; j <=hdb; j++) {
					String pvmsNo = "";
					int itemId = 0;
			

					if (request.getParameter("itemId" + j) != null
							&& !request.getParameter("nomenclature" + j).equals("")) {
						itemId = Integer.parseInt(request.getParameter("itemId" + j));
						if (itemId != 0) {
							itemIdList.add(itemId);
						}

						if (request.getParameter("itemIdClassificationId" + j) != null
								&& !request.getParameter("itemIdClassificationId" + j)
										.equals("")) {
							classificationList.add(Integer.parseInt(request
									.getParameter("itemIdClassificationId" + j)));
						} else
							classificationList.add(0);
					/*	otherMedicineList.add("");*/
					} else {
						if (request.getParameter("otherMedicine" + j) != null
								&& !request.getParameter("otherMedicine" + j)
										.equals("")) {
							otherMedicine = request.getParameter("otherMedicine" + j);
							otherMedicineList.add(otherMedicine);
							/*otherMedicineList.add(n,otherMedicine);*/

						}

					}
					
					if((request.getParameter("itemId" + j) != null && !request.getParameter("nomenclature" + j).equals("")) || (request.getParameter("otherMedicine" + j) != null && !request.getParameter("otherMedicine" + j).equals("")) )
					{
					int itemConversionId = 0;
					if (request.getParameter("itemConversionId" + j) != null
							&& !request.getParameter("itemConversionId" + j).equals("")) {
						itemConversionId = Integer.parseInt(request
								.getParameter("itemConversionId" + j));
						itemConversionList.add(itemConversionId);
					}
					else 
						itemConversionList.add(0);
					if (request.getParameter("itemClass" + j) != null
							&& !request.getParameter("itemClass" + j).equals("")) {
						itemClassList.add(Integer.parseInt(request
								.getParameter("itemClass" + j)));
					}
					else 
						itemClassList.add(0);
					int itemPescriptionId = 0;
					if (request.getParameter("prescriptionId" + j) != null
							&& !request.getParameter("prescriptionId" + j).equals("")) {
						itemPescriptionId = Integer.parseInt(request
								.getParameter("prescriptionId" + j));
						prescriptionIdList.add(itemPescriptionId);
					} else {
						prescriptionIdList.add(0);
					}
					if (request.getParameter("dispensingUnit" + j) != null) {
						itemDispensaryList.add(request.getParameter("dispensingUnit"
								+ j));
					}
					else
						itemDispensaryList.add("");

					if (request.getParameter("uomQty" + j) != null) {
							uomQtyList.add(new BigDecimal(request.getParameter("uomQty"+ j)));
						}
						else
							uomQtyList.add(new BigDecimal(0));
					int frequencyId = 0;
					if (request.getParameter("frequency" + j) != null
							&& !request.getParameter("frequency" + j).equals("")) {
						frequencyId = Integer.parseInt(request.getParameter("frequency"
								+ j));
						frequencyList.add(frequencyId);
					} else {
						frequencyList.add(0);
					}
					if (request.getParameter("ct" + j) != null) {
						ctList.add("y");
					} else {
						ctList.add("n");
					}

					String route = "";
					if (request.getParameter("route" + j) != null
							&& !request.getParameter("route" + j).equals("")) {
						route = request.getParameter("route" + j);
						routeList.add(route);
					} else {
						routeList.add("");
					}

					BigDecimal frequenceValue = new BigDecimal("0");
					if (request.getParameter("frequencyValue" + j) != null
							&& !request.getParameter("frequencyValue" + j).equals("")) {
						frequenceValue = new BigDecimal(
								request.getParameter("frequencyValue" + j));
					}

					String dosage = "";
					if (request.getParameter("dosage" + j) != null
							&& !request.getParameter("dosage" + j).equals("")) {
						dosage = request.getParameter("dosage" + j);
						dosageList.add(dosage);
					} else {
						dosageList.add("");
					}
					if (request.getParameter("noOfDays" + j) != null
							&& !request.getParameter("noOfDays" + j).equals("")) {
						int noOfDays = Integer.parseInt(request.getParameter("noOfDays"
								+ j));
						noOfDaysList.add(noOfDays);
						// int noOfdoges=1;
						// if(dosage!=null && dosage!=""){
						// noOfdoges=Integer.parseInt(dosage);
						// }
						// int total = noOfDays * frequenceValue*noOfdoges;
						// totalList.add(total);

					} else {
						noOfDaysList.add(0);
					}
					if (request.getParameter("total" + j) != null
							&& !request.getParameter("total" + j).equals("")) {
						int total = Math.round(Float.parseFloat(request
								.getParameter("total" + j)));
						totalList.add(total);
					} else {
						totalList.add(0);
					}

					String remarks = "";
					if (request.getParameter("remarks" + j) != null
							&& !request.getParameter("remarks" + j).equals("")) {
						remarks = request.getParameter("remarks" + j);
						remarksList.add(remarks);
					} else {
						remarksList.add("");
					}
				}
					// if(!pvmsNo.equals("")){
					// pvmsNoList.add(pvmsNo);
					// }
					// pvmsNoList.add(pvmsArr[i]);

					//j++;
					//n++;
				}
		
		
		
		/**
		 * Added by Ritu for other medicines and investigations 23-04-2013
		 */
		String otherTreatment = "";
		if (request.getParameter("otherTreatment") != null
				&& !request.getParameter("otherTreatment").equals("")) {
			otherTreatment = request.getParameter("otherTreatment");
			mapForDS.put("otherTreatment", otherTreatment);
		}
		String otherInvestigation = "";
		if (request.getParameter("otherInvestigation") != null
				&& !request.getParameter("otherInvestigation").equals("")) {
			otherInvestigation = request.getParameter("otherInvestigation");
			
		}
		mapForDS.put("otherInvestigation", otherInvestigation.trim());
		// -------------------fetching values for Investigation
		// template---------------
		// -------------------fetching values for Investigation
		// template---------------
		List<String> chargeCodeIdList = new ArrayList<String>();
		// List<Integer> quantityList = new ArrayList<Integer>();
		List<String> referToMhList = new ArrayList<String>();

		List<String> investigationDate = new ArrayList<String>();
		List<Integer> dgorderDtList = new ArrayList<Integer>();
		// List<String> clinicalList = new ArrayList<String>();
		String clinicalNotes1 = "";
		if (request.getParameter("clinicalNotes1") != null
				&& !(request.getParameter("clinicalNotes1").equals(""))) {
			clinicalNotes1 = request.getParameter("clinicalNotes1");
		}
		int hiddenValue = 1;
		if (Integer.parseInt(request.getParameter("hiddenValue")) != 1) {
			hiddenValue = Integer.parseInt(request.getParameter("hiddenValue"));
		}
		int temp = 1;
		String[] chargeCodeIdArr = new String[hiddenValue];
		for (int i = 0; i < hiddenValue; i++) {
			if (request.getParameter("chargeCodeName" + temp) != null
					&& !request.getParameter("chargeCodeName" + temp)
							.equals("")) {

				String chargeCodeNameWithId = request
						.getParameter("chargeCodeName" + temp);
				int index1 = chargeCodeNameWithId.lastIndexOf("[");
				int index2 = chargeCodeNameWithId.lastIndexOf("]");
				index1++;
				String chargeCodeId = chargeCodeNameWithId.substring(index1,
						index2);
				if (!chargeCodeId.equals("")) {
					chargeCodeIdArr[i] = chargeCodeId;
					int qty = 1;
					// int
					// qty=Integer.parseInt(request.getParameter("qty"+temp));
					// String clinicalNotes =
					// request.getParameter("clinicalNotes" + temp);
					if (request.getParameter("referToMh" + temp) != null
							&& !request.getParameter("referToMh" + temp)
									.equals("")) {
						String referToMh = request.getParameter("referToMh"
								+ temp);
						referToMhList.add(referToMh);
					} else {
						String referToMh = "n";
						referToMhList.add(referToMh);
					}
					chargeCodeIdList.add(chargeCodeIdArr[i]);
					investigationDate.add(request.getParameter("investigationDate"+temp));
					// quantityList.add(qty);
					// clinicalList.add(clinicalNotes);
					// dgorderDtList.
					if (request.getParameter("dgOrderDtId" + temp) != null
							&& !request.getParameter("dgOrderDtId" + temp)
									.equals("")) {
						int orderDtId = Integer.parseInt(request
								.getParameter("dgOrderDtId" + temp));
						dgorderDtList.add(orderDtId);
					} else {
						dgorderDtList.add(0);
					}
				}
			}
			temp++;
		}

		if (request.getParameter("procedureHeaderId") != null
				&& !request.getParameter("procedureHeaderId").equals("0")) {
			mapForDS.put("procedureHeaderId",
					Integer.parseInt(request.getParameter("procedureHeaderId")));
		}
		if (request.getParameter("physioRequisitionHeaderId") != null
				&& !request.getParameter("physioRequisitionHeaderId").equals(
						"0")) {
			mapForDS.put("physioRequisitionHeaderId", Integer.parseInt(request
					.getParameter("physioRequisitionHeaderId")));
		}
		mapForDS.put("deptId", (Integer) session.getAttribute("deptId"));
		mapForDS.put("referredDoctars", referredDoctars);
		mapForDS.put("itemIdList", itemIdList);
		mapForDS.put("frequencyList", frequencyList);
		mapForDS.put("ctList", ctList);
		mapForDS.put("dosageList", dosageList);
		mapForDS.put("typeLeftRightList", typeLeftRightList);
		mapForDS.put("instructionList", instructionList);
		mapForDS.put("routeList", routeList);
		mapForDS.put("prescriptionIdList", prescriptionIdList);
		mapForDS.put("prescriptionIdList", prescriptionIdList);
		mapForDS.put("totalList", totalList);
		mapForDS.put("noOfDaysList", noOfDaysList);
		mapForDS.put("hinId", hinId);
		mapForDS.put("departmentId", departmentId);
		mapForDS.put("remarksList", remarksList);
		mapForDS.put("userId", userId);
		mapForDS.put("visitId", visitId);
		mapForDS.put("hospitalId", hospitalId);
		mapForDS.put("userName", userName);
		mapForDSPro.put("visitId", visitId);
		mapForDSPro.put("consultationDate", consultationDate);
		mapForDSPro.put("diagnosisIdAray", diagnosisIdAray);
		mapForDSPro.put("disposal", disposal);

		String userSrNo = (String) session.getAttribute("userSrNo");
		mapForDSPro.put("userSrNo", userSrNo);

		mapForDS.put("otherMedicineList", otherMedicineList);
		mapForDS.put("nomenclatureList", nomenclatureList);
		mapForDS.put("classificationList", classificationList);
		mapForDS.put("itemConversionList", itemConversionList);
		mapForDS.put("itemClassList", itemClassList);
		mapForDS.put("itemDispensaryList", itemDispensaryList);
		mapForDS.put("uomQtyList", uomQtyList);
		// mapForDS.put("injCategoryList", injCategoryList);

		// ----------data for investigation template------

		mapForDS.put("chargeCodeIdList", chargeCodeIdList);
		// mapForDS.put("quantityList", quantityList);
		mapForDS.put("clinicalNotes1", clinicalNotes1);
		mapForDS.put("referToMhList", referToMhList);
		mapForDS.put("dgorderDtList", dgorderDtList);
		mapForDS.put("investigationDate", investigationDate);
		
		

		// ------------data for opd patient details----------
		mapForDS.put("empId", empId);
		mapForDS.put("empIdCurrnet", empIdCurrnet);

		mapForDS.put("height", height);
		mapForDS.put("whr", whr);

		mapForDS.put("disposal", disposal);
		mapForDS.put("days", days);
		mapForDS.put("disposalDays", disposalDays);
		mapForDS.put("weight", weight);
		mapForDS.put("pulse", pulse);
		mapForDS.put("bp", bp);
		mapForDS.put("consultationDate", consultationDate);
		mapForDS.put("consultationTime", consultationTime);
		mapForDS.put("temperature", temperature);
		mapForDS.put("afmsDescription", afmsDescription);
		mapForDS.put("plan", plan);
		mapForDS.put("initialDiagnosis", initialDiagnosis);
		mapForDS.put("systemDiagnosisId", systemDiagnosisId);

		if (request.getParameter("admissionDate") != null
				&& !request.getParameter("admissionDate").equals("")) {
			Date admissionDate = HMSUtil
					.convertStringTypeDateToDateType(request
							.getParameter("admissionDate"));
			mapForDS.put("admissionDate", admissionDate);
		}
		if (request.getParameter("admissionWard") != null
				&& !request.getParameter("admissionWard").equals("0")) {
			Integer admissionWard = Integer.parseInt(request
					.getParameter("admissionWard"));
			mapForDS.put("admissionWard", admissionWard);
		}

		if (request.getParameter("admissionAdvised") != null
				&& !request.getParameter("admissionAdvised").equals("")) {
			String admissionAdvised = request.getParameter("admissionAdvised");
			if (admissionAdvised.equalsIgnoreCase("on"))
				mapForDS.put("admissionAdvised", "y");
		} else {
			mapForDS.put("admissionAdvised", "n");
		}

		if (request.getParameter("referral") != null
				&& !request.getParameter("referral").equals("")) {
			String referVisitDate = null;
			Integer referral = Integer.parseInt(request
					.getParameter("referral"));
			mapForDS.put("referral", referral);
			if (referral == 1) {

				int referralPriority = 0;
				if (request.getParameter("priorityName") != null
						&& !request.getParameter("priorityName").equals("")) {
					referralPriority = Integer.parseInt(request
							.getParameter("priorityName"));

					mapForDS.put("referralPriority", referralPriority);
				}

				if (request.getParameter("referVisitDate") != null
						&& !request.getParameter("referVisitDate").equals("")) {
					referVisitDate = request.getParameter("referVisitDate");
					Date referralDate = HMSUtil
							.convertStringTypeDateToDateType(referVisitDate);
					mapForDS.put("referralDate", referralDate);
				}
				if (request.getParameter("referTo") != null
						&& !request.getParameter("referTo").equals("")) {
					String referTo = request.getParameter("referTo");
					mapForDS.put("referTo", referTo);
					if (referTo.equalsIgnoreCase("empanel") || referTo.equalsIgnoreCase("both")) {

						if (request.getParameter("referhospital") != null
								&& !request.getParameter("referhospital")
										.equals("")) {
							referImpannelhospital = Integer.parseInt(request
									.getParameter("referhospital"));
							mapForDS.put("referImpannelhospital",
									referImpannelhospital);
						}

						if (request.getParameter("referdays") != null
								&& !request.getParameter("referdays")
										.equals("")) {
							try {
								int referdays = Integer.parseInt(request
										.getParameter("referdays"));
								Date referalTillDate = HMSUtil.addDaysToDate(
										referVisitDate, referdays);
								mapForDS.put("referdays", referdays);
								mapForDS.put("referalTillDate", referalTillDate);
							} catch (Exception e) {
								e.printStackTrace();
							}

						}

						if (request.getParameter("referral_treatment_type") != null
								&& !request.getParameter(
										"referral_treatment_type").equals("")) {
							try {
								String referral_treatment_type = request
										.getParameter("referral_treatment_type");
								mapForDS.put("referral_treatment_type",
										referral_treatment_type);
							} catch (Exception e) {
								e.printStackTrace();
							}

						}
						
						if (request.getParameter("referredFor") != null
								&& !request.getParameter("referredFor").equals(
										"")) {
							try {
								String referredFor = request
										.getParameter("referredFor");
								mapForDS.put("referredFor", referredFor);
							} catch (Exception e) {
								e.printStackTrace();
							}

						}

					}
				}

				if (request.getParameter("referdepartment") != null
						&& !request.getParameter("referdepartment").equals("")) {
					Integer referdDepartment = Integer.parseInt(request
							.getParameter("referdepartment"));
					mapForDS.put("referdepartment", referdDepartment);
				}

				if (request.getParameter("refereddoctor") != null
						&& !request.getParameter("refereddoctor").equals("")) {
					Integer refereddoctor = Integer.parseInt(request
							.getParameter("refereddoctor"));
					mapForDS.put("refereddoctor", refereddoctor);
				}

				if (request.getParameter("referralNote") != null
						&& !request.getParameter("referralNote").equals("")) {
					String referralNote = request.getParameter("referralNote");
					mapForDS.put("referralNote", referralNote);
				}

				if (request.getParameter("patientAdvise") != null
						&& !request.getParameter("referralNote").equals("")) {
					String patientAdvise = request
							.getParameter("patientAdvise");
					mapForDS.put("patientAdvise", patientAdvise);
				}

			}
		}

		List<Integer> parkNuringIds = new ArrayList<Integer>();
		List<String> nursingTypeList= new ArrayList<String>();
		List<String> treatmentProcedureNameList = new ArrayList<String>();
		List<Integer> treatmentFrequencyList = new ArrayList<Integer>();
		List<Integer> treatmentNoOfDaysList = new ArrayList<Integer>();
		List<String> treatmentRemarkList = new ArrayList<String>();
		List<Integer> treatmentAlertList = new ArrayList<Integer>();

		int procedureHeaderId = 0;
		int physioHeaderId=0;
		if (request.getParameter("procedureHeaderId") != null
				&& Integer.parseInt(request.getParameter("procedureHeaderId")) >= 0) {
			procedureHeaderId = Integer.parseInt(request
					.getParameter("procedureHeaderId"));
		}
		
		if (request.getParameter("physioHeaderId") != null
				&& Integer.parseInt(request.getParameter("physioHeaderId")) >= 0) {
			physioHeaderId = Integer.parseInt(request
					.getParameter("physioHeaderId"));
		}
		int nursinghdb = 0;
		if (request.getParameter("nursinghdb") != null
				&& Integer.parseInt(request.getParameter("nursinghdb")) >= 0) {
			nursinghdb = Integer.parseInt(request.getParameter("nursinghdb"));
		}
		pvmsArr = new String[nursinghdb + 1];
		j = 0;
		for (int i = 0; i <= nursinghdb; i++) {
			if (request.getParameter("procedureName_nursing" + j) != null
					&& !request.getParameter("procedureName_nursing" + j)
							.equals("")) {
				String procedureName = request
						.getParameter("procedureName_nursing" + j);
				int index1 = procedureName.lastIndexOf("[");
				int index2 = procedureName.lastIndexOf("]");
				index1++;
				pvmsArr[i] = procedureName.substring(index1, index2);

				treatmentProcedureNameList.add(pvmsArr[i]);
				int procedureDetailId = 0;
				if (request.getParameter("procedureDetailId" + j) != null
						&& !request.getParameter("procedureDetailId" + j)
								.equals("")) {
					procedureDetailId = Integer.parseInt(request
							.getParameter("procedureDetailId" + j));
				}
				parkNuringIds.add(procedureDetailId);

				
				String nt =null;
				if (request.getParameter("procedureType" + j) != null
						&& !request.getParameter("procedureType" + j)
								.equals("")) {
					nt = request
							.getParameter("procedureType" + j);
				}
				nursingTypeList.add(nt);



				int freaquency = 0;
				if (request.getParameter("frequency_nursing" + j) != null
						&& !request.getParameter("frequency_nursing" + j)
								.equals("")) {
					freaquency = Integer.parseInt(request
							.getParameter("frequency_nursing" + j));
					treatmentFrequencyList.add(freaquency);
				}

				int noOfDays = 0;
				if (request.getParameter("noOfDays_nursing" + j) != null
						&& !request.getParameter("noOfDays_nursing" + j)
								.equals("")) {
					noOfDays = Integer.parseInt(request
							.getParameter("noOfDays_nursing" + j));
					treatmentNoOfDaysList.add(noOfDays);
				}

				String remark_nursing = "";
				if (request.getParameter("remark_nursing" + j) != null
						&& !request.getParameter("remark_nursing" + j).equals(
								"")) {
					remark_nursing = request.getParameter("remark_nursing" + j);
					treatmentRemarkList.add(remark_nursing);
				}

				String alert = "";
				if (request.getParameter("alert_nursing" + j) != null
						&& !request.getParameter("alert_nursing" + j)
								.equals("")) {
					alert = request.getParameter("alert_nursing" + j);
					if (alert.equals("on")) {
						treatmentAlertList.add(1);
					}
				}
			}
			j++;
		}
		mapForDS.put("procedureHeaderId", procedureHeaderId);
		mapForDS.put("physioHeaderId", physioHeaderId);
		mapForDS.put("nursingTypeList", nursingTypeList);
		
		mapForDS.put("parkNuringIds", parkNuringIds);
		mapForDS.put("nursingprocedure", treatmentProcedureNameList);
		mapForDS.put("nursingfrequency", treatmentFrequencyList);
		mapForDS.put("nursingdays", treatmentNoOfDaysList);
		mapForDS.put("nursingremarks", treatmentRemarkList);
		mapForDS.put("nursingalert", treatmentAlertList);
		
		
		int therapyhdb = 0;
		List<Integer> therapyIds = new ArrayList<Integer>();
		List<String> therapyNameList = new ArrayList<String>();
		List<String> therapyRemarkList = new ArrayList<String>();
		List<String> therapyAppointmentStatusList = new ArrayList<String>();
		List<String> therapyAppointmentDateList = new ArrayList<String>();
		List<String> therapyAppointmentTimeList = new ArrayList<String>();
		List<String> teethTreatmentList = new ArrayList<String>();
		String appointmentDate = null;
		String appointmentTime = null;
		if (request.getParameter("therapyhdb") != null
				&& Integer.parseInt(request.getParameter("therapyhdb")) >= 0) {
			therapyhdb = Integer.parseInt(request.getParameter("therapyhdb"));
		}
		if (request.getParameter("appointmentDate") != null
				&& request.getParameter("appointmentDate") != "") {
			appointmentDate = request.getParameter("appointmentDate");
		}
		if (request.getParameter("appointmentTime") != null
				&& request.getParameter("appointmentTime") != "") {
			appointmentTime = request.getParameter("appointmentTime");
		}
		if (request.getParameter("therapyHeaderId") != null
				&& request.getParameter("therapyHeaderId") != "") {
			mapForDS.put("therapyHeaderId",Integer.parseInt( request.getParameter("therapyHeaderId")));
		}
	
		pvmsArr = new String[therapyhdb + 1];
		j = 0;
		for (int i = 0; i <= therapyhdb; i++) {
			if (request.getParameter("therapy_nursing" + j) != null
					&& !request.getParameter("therapy_nursing" + j).equals("")) {
				String therapyName = request
						.getParameter("therapy_nursing" + j);
				int index1 = therapyName.lastIndexOf("[");
				int index2 = therapyName.lastIndexOf("]");
				index1++;
				pvmsArr[i] = therapyName.substring(index1, index2);

				therapyNameList.add(pvmsArr[i]);
				int therapyDetailId = 0;
				if (request.getParameter("therapyDetailId" + j) != null
						&& !request.getParameter("therapyDetailId" + j).equals(
								"")) {
					therapyDetailId = Integer.parseInt(request
							.getParameter("therapyDetailId" + j));
				}
				therapyIds.add(therapyDetailId);

				String remark_therapy = "";
				if (request.getParameter("remark_therapy" + j) != null
						&& !request.getParameter("remark_therapy" + j).equals(
								"")) {
					remark_therapy = request.getParameter("remark_therapy" + j);
				}
				therapyRemarkList.add(remark_therapy);
				
				if (request.getParameter("appointStatus" + j) != null){	
					therapyAppointmentStatusList.add(request.getParameter("appointStatus" + j));
				}
				else
					therapyAppointmentStatusList.add("");
				
				if (request.getParameter("appointmentDate" + j) != null){	
					therapyAppointmentDateList.add(request.getParameter("appointmentDate" + j));
				}
				else
					therapyAppointmentDateList.add("");
				
				if (request.getParameter("appointmentTime" + j) != null){	
					therapyAppointmentTimeList.add(request.getParameter("appointmentTime" + j));
				}
				else
					therapyAppointmentTimeList.add("");
				
				if (request.getParameter("proc_treatment_teeth" + j) != null){	
					teethTreatmentList.add(request.getParameter("proc_treatment_teeth" + j));
				}
				else
					teethTreatmentList.add("");
			}
			j++;
		}

		mapForDS.put("therapyIds", therapyIds);
		mapForDS.put("therapyNameList", therapyNameList);
		mapForDS.put("therapyRemarkList", therapyRemarkList);
		mapForDS.put("appointmentDate", appointmentDate);
		mapForDS.put("appointmentTime", appointmentTime);
		mapForDS.put("therapyAppointmentStatusList",therapyAppointmentStatusList);
		mapForDS.put("therapyAppointmentDateList", therapyAppointmentDateList);
		mapForDS.put("therapyAppointmentTimeList", therapyAppointmentTimeList);
		mapForDS.put("teethTreatmentList", teethTreatmentList);

		/** End Code **/

	

		// mapForDS.put("referredDept", referredDept);
		mapForDS.put("nextVisitDate", nextVisitDate);

		mapForDS.put("pastMedicalHistory", pastMedicalHistory);
		mapForDS.put("presentComplain", presentComplain);
		mapForDS.put("presentAdvice", presentAdvice);// fayaz added
		mapForDS.put("presentIllness", presentIllness);
		mapForDS.put("pastHistory", pastHistory);
		mapForDS.put("personalHistory", personalHistory);
		mapForDS.put("familyHistory", familyHistory);
		// mapForDS.put("otherFamilyHistorty", otherFamilyHistorty);
		mapForDS.put("allergies", allergies);
		mapForDS.put("reviewAt", reviewAt);
		mapForDS.put("otherDetails", otherDetails);
		mapForDS.put("onExamination", onExamination);
		mapForDS.put("days", days);
		mapForDS.put("returnfromHospital", returnfromHospital);
		mapForDS.put("referedToMH", referedToMH);
		mapForDS.put("mh", mh);
		mapForDS.put("mhDepartment", mhDepartment);
		mapForDS.put("mhReferredFor", mhReferredFor);
		mapForDS.put("hospName", hospName);
		mapForDS.put("doa", doa);
		mapForDS.put("dod", dod);
		mapForDS.put("gpe_examination", gpe_examination);
		mapForDS.put("rr", rr);
		mapForDS.put("systamicExam", systamicExam);
		mapForDS.put("riskFactor", riskFactor);
		mapForDS.put("bmi", bmi);
		mapForDS.put("idealWeight", idealWeight);
		// --------- data for diagnosis------------
		mapForDS.put("diagnosisIdAray", diagnosisIdAray);
		mapForDS.put("deptId", departmentId);
		mapForDS.put("adviceOnDischarge", adviceOnDischarge);
		mapForDS.put("pastDiagnosis", pastDiagnosis);
		mapForDS.put("pastdisposal", pastdisposal);
		mapForDS.put("threpytypeId", threpytypeId);
		mapForDS.put("DaysPhy", DaysPhy);
		mapForDS.put("DurationPhy", DurationPhy);
		mapForDS.put("mapForDSPro", mapForDSPro);
		mapForDS.put("priority", priority);

		Map<String, Object> returnMap = new HashMap<String, Object>();
		Map<String, Object> returnPro1 = new HashMap<String, Object>();
		Map<String, Object> returnPro2 = new HashMap<String, Object>();
		Map<String, Object> returnPro3 = new HashMap<String, Object>();
		boolean bool = false;

		boolean bool1 = false;

		boolean dublicateVisit = false;

		String orderSeqNo = "";
		//orderSeqNo = labHandlerService.generateOrderNumber(hospitalId);
		//mapForDS.put("orderSeqNo", orderSeqNo);

		Box box = HMSUtil.getBox(request);
		mapForDS.put("box", box);
		int opdPatientDetailsId=0;
		String currentDepartmentCode = null;
		returnMap = opdHandlerService.updateRecallOpdPatientDetails(mapForDS);

		if (returnMap.get("currentDepartmentCode") != null) {
			currentDepartmentCode = (String) returnMap.get("currentDepartmentCode");
		}

		
		if (returnMap.get("succesfullyAdded") != null) {
			bool = (Boolean) returnMap.get("succesfullyAdded");
		}
		
		if (returnMap.get("orderSeqNo") != null) {
			orderSeqNo = (String) returnMap.get("orderSeqNo");
		}

		if (returnMap.get("dublicateVisit") != null) {
			dublicateVisit = (Boolean) returnMap.get("dublicateVisit");
		}
		if (returnMap.get("opdPatientDetailsId") != null) {
			opdPatientDetailsId = (Integer) returnMap.get("opdPatientDetailsId");
		}

		
		// comment By Tirath

		// if (returnMap.get("orderSeqNo") != null) {
		// orderSeqNo = (String) returnMap.get("orderSeqNo");
		// }

		String message = null;

		if (bool) {
			returnPro3 = opdHandlerService
					.submitProPatientSicknessDetails(mapForDSPro);
			if (returnPro3.get("succesfullyAdded") != null) {
				bool1 = (Boolean) returnMap.get("succesfullyAdded");
			}
			if (bool1) {
				returnPro1 = opdHandlerService
						.submitProPatientTreatmentDetails(mapForDSPro);
			}

			String departmentCode = "";
			Map<String, Object> deptMap = opdHandlerService
					.getDepartmentNameFromId(departmentId);
			if (deptMap.get("deptName") != null) {
				departmentName = (String) deptMap.get("deptName");
			}
			if (deptMap.get("deptCode") != null) {
				departmentCode = (String) deptMap.get("deptCode");
			}
			mapForDS.put("deptId", departmentId);
			if (flag.equals("opd")) {

				map = opdHandlerService.getWaitingPatientList(mapForDS);
				message = "OPD Details Submitted.";
				jsp = OPD_WAITING;
				submitData = true;
			}
		}

		else {
			map = opdHandlerService.getWaitingPatientList(mapForDS);

			if (dublicateVisit)
				message = "Details have already been saved.";
			else
				message = "Error Occurred in Submitting Details.";
			jsp = OPD_WAITING_LIST_JSP;
		}
		jsp += ".jsp";
		if (request.getParameter("unitId") != null
				&& !(request.getParameter("unitId").equals(""))) {
			map.put("unitId", Integer.parseInt(request.getParameter("unitId")));
		}
		// Ranjesh Prasad: Pacs Integration Start
		/*if (hl7Flag) {
			PacsHL7Service pacsHL7Service = new PacsHL7Service();
			String query = "";
			// String query="and dt.amount='0.00' and dg.visit_id="+visitId;
			try {
				pacsHL7Service.sendService(query);
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			} catch (SQLException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}*/
		// Ranjesh Prasad: Pacs Integration End
		map.put("message", message);
		map.put("opdPatientDetailsId", opdPatientDetailsId);
		map.put("deptId", departmentId);
		map.put("visitNoForReport", visitNo);
		map.put("orderNoForReport", orderSeqNo);
		map.put("serviceNoForReport", serviceNo);
		map.put("visitId", visitId);
		map.put("hinNoForReport", hinNo);
		title = "Patient Details";
		map.put("urlDept", urlDept);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("referedToMH", referedToMH);
		map.put("submitData", submitData);
		map.put("currentDepartmentCode", currentDepartmentCode);
		
		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView showPacsPendingJsp(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		int hospitalId = 0;
		int depId = 0;
		String gsonURL = "";
		String hinNo = null;
		if (request.getParameter("hinNo") != null
				&& request.getParameter("hinNo") != "")
			hinNo = request.getParameter("hinNo");
		if (request.getParameter("patientId") != null
				&& request.getParameter("patientId") != "") {
			gsonURL += "&patientId=" + request.getParameter("patientId");
		}
		if (request.getParameter("patientName") != null
				&& request.getParameter("patientName") != "") {
			gsonURL += "&patientName=" + request.getParameter("patientName");
		}
		if (request.getParameter("fromDate") != null
				&& request.getParameter("fromDate") != "") {
			gsonURL += "&fromDate=" + request.getParameter("fromDate");
			map.put("fromDate", request.getParameter("fromDate"));
		}
		if (request.getParameter("toDate") != null
				&& request.getParameter("toDate") != "") {
			gsonURL += "&toDate=" + request.getParameter("toDate");
			map.put("toDate", request.getParameter("toDate"));
		}
		if (request.getParameter("chk_cr") != null
				&& request.getParameter("chk_cr") != "") {
			gsonURL += "&chk_cr=" + request.getParameter("chk_cr");
		}
		if (request.getParameter("chk_ct") != null
				&& request.getParameter("chk_ct") != "") {
			gsonURL += "&chk_ct=" + request.getParameter("chk_ct");
		}
		if (request.getParameter("chk_us") != null
				&& request.getParameter("chk_us") != "") {
			gsonURL += "&chk_us=" + request.getParameter("chk_us");
		}
		if (request.getParameter("chk_mr") != null
				&& request.getParameter("chk_mr") != "") {
			gsonURL += "&chk_mr=" + request.getParameter("chk_mr");
		}
		if (request.getParameter("chk_dx") != null
				&& request.getParameter("chk_dx") != "") {
			gsonURL += "&chk_dx=" + request.getParameter("chk_dx");
		}
		gsonURL += "&hinNo=" + hinNo;

		// jsp = "pacs/pacsPatientPendingList";
		jsp = VIEW_TEST_DETAILS_FOR_RADIO;
		// jsp += ".jsp";
		title = "Pacs Waiting List";
		map.put("cr", request.getParameter("chk_cr"));
		map.put("ct", request.getParameter("chk_ct"));
		map.put("mr", request.getParameter("chk_mr"));
		map.put("us", request.getParameter("chk_us"));
		map.put("dx", request.getParameter("chk_dx"));
		map.put("gsonURL", gsonURL);
		map.put("contentJsp", jsp);
		map.put("title", title);
		/* return new ModelAndView("index", "map", map); */
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView showOPDPACSCommunicationJsp(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();

		if (session.getAttribute("empId") != null) {
			mapForDS.put("opdDocId", (Integer) session.getAttribute("empId"));
		}

		if (request.getParameter("patientId") != null) {
			mapForDS.put("patientId",
					Integer.parseInt(request.getParameter("patientId")));
		}
		map = opdHandlerService.getOPDPACSCommunication(mapForDS);

		jsp = OPD_RADIO_COMMUNICATION;
		title = "Pacs Waiting List";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView sendMessageToRadiology(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();

		if (session.getAttribute("empId") != null) {
			mapForDS.put("opdDocId", (Integer) session.getAttribute("empId"));
		}
		
		if (request.getParameter("radioDocId") != null) {
			mapForDS.put("radioDocId",
					Integer.parseInt(request.getParameter("radioDocId")));
		}
		if (request.getParameter("patientId") != null) {
			mapForDS.put("patientId",
					Integer.parseInt(request.getParameter("patientId")));
		}
		if (request.getParameter("opdRemarks") != null) {
			mapForDS.put("opdRemarks", request.getParameter("opdRemarks"));
		}
		map = opdHandlerService.sendMessageToRadiology(mapForDS);

		if (map.get("succesfullyAdded") != null) {
			boolean result = (Boolean) map.get("succesfullyAdded");
			if (result)
				message = "Message created successfully";
			else
				message = "Error Occurred in creating message.";
		}

		map = opdHandlerService.getOPDPACSCommunication(mapForDS);
		jsp = OPD_RADIO_COMMUNICATION;
		// title = "OPD-Radio Communication";
		// map.put("contentJsp", jsp);
		// map.put("title", title);
		map.put("message", message);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView showRadiologyResponseJsp(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();

		if (session.getAttribute("empId") != null) {
			mapForDS.put("opdDocId", (Integer) session.getAttribute("empId"));
		}

		if (request.getParameter("patientId") != null) {
			mapForDS.put("patientId",
					Integer.parseInt(request.getParameter("patientId")));
		}
		map = opdHandlerService.getRadiologyMessageList(mapForDS);

		jsp = RADIOLOGYMSGRESPONSE;
		title = "Pacs Waiting List";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	public void submitRadioResponse(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();

		if (session.getAttribute("empId") != null) {
			mapForDS.put("radioDocId", (Integer) session.getAttribute("empId"));
		}
		
		if (request.getParameter("radioCommId") != null) {
			mapForDS.put("radioCommId",
					Integer.parseInt(request.getParameter("radioCommId")));
		}
		if (request.getParameter("patientId") != null) {
			mapForDS.put("patientId",
					Integer.parseInt(request.getParameter("patientId")));
		}
		if (request.getParameter("response") != null) {
			mapForDS.put("response", request.getParameter("response"));
		}
		map = opdHandlerService.submitRadioResponse(mapForDS);

		if (map.get("succesfullyAdded") != null) {
			boolean result = (Boolean) map.get("succesfullyAdded");
			if (result)
				message = "Message created successfully";
			else
				message = "Error Occurred in creating message.";
		}

		// map = opdHandlerService.getOPDPACSCommunication(mapForDS);
		// jsp=RADIOLOGYMSGRESPONSE;
		// title = "OPD-Radio Communication";
		// map.put("contentJsp", jsp);
		// map.put("title", title);

		try {
			response.getWriter().write(message);
		} catch (IOException e) {

			e.printStackTrace();
		}

	}

	public ModelAndView pacsUtil(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {
		Map<String, Object> map = new HashMap<String, Object>();
		String action = request.getParameter("action");
		

		List<PacsPatient> patientList = new ArrayList<PacsPatient>();
		Gson gson = new GsonBuilder().setPrettyPrinting().create();
		response.setContentType("application/json");
		String filePath = getServletContext()
				.getRealPath("src/jdbc.properties");
		map.put("filePath", filePath);
		if (action != null) {
			try {
				if (action.equals("list")) {
					// Fetch Data from User Table
					int startPageIndex = Integer.parseInt(request
							.getParameter("jtStartIndex"));
					int recordsPerPage = Integer.parseInt(request
							.getParameter("jtPageSize"));
					String query = "";
					map.put("startPageIndex", startPageIndex);
					map.put("recordsPerPage", recordsPerPage);

					if (request.getParameter("hinNo") != null
							&& request.getParameter("hinNo") != "") {
						query += " and p.pat_id='"
								+ request.getParameter("hinNo") + "'";
					}
					if (request.getParameter("patientName") != null
							&& request.getParameter("patientName") != "") {
						query += " and p.pat_name ilike '%"
								+ request.getParameter("patientName") + "%'";
					}
					if (request.getParameter("fromDate") != null
							&& request.getParameter("fromDate") != ""
							&& request.getParameter("toDate") != null
							&& request.getParameter("toDate") != "") {
						String[] fromDate = ("" + request
								.getParameter("fromDate")).split("/");
						String[] toDate = ("" + request.getParameter("toDate"))
								.split("/");
						query += " and p.created_time between '" + fromDate[0]
								+ "/" + fromDate[1] + "/" + fromDate[2]
								+ "' and '" + toDate[0] + "/" + toDate[1] + "/"
								+ toDate[2] + "'";

					}

					if (request.getParameter("chk_cr") != null
							&& request.getParameter("chk_cr") != "") {
						query += " and s.mods_in_study like '%"
								+ request.getParameter("chk_cr") + "%'";
					}

					if (request.getParameter("chk_ct") != null
							&& request.getParameter("chk_ct") != "") {
						if (request.getParameter("chk_cr") != null
								&& request.getParameter("chk_cr") != "") {
							query += " or s.mods_in_study like '%"
									+ request.getParameter("chk_cr") + "%'";
						} else {
							query += " and s.mods_in_study like '%"
									+ request.getParameter("chk_ct") + "%'";
						}
					}

					if (request.getParameter("chk_mr") != null
							&& request.getParameter("chk_mr") != "") {
						if (request.getParameter("chk_ct") != null
								&& request.getParameter("chk_ct") != ""
								|| request.getParameter("chk_cr") != null
								&& request.getParameter("chk_cr") != "") {
							query += " or s.mods_in_study like '%"
									+ request.getParameter("chk_mr") + "%'";
						} else {
							query += " and s.mods_in_study like '%"
									+ request.getParameter("chk_mr") + "%'";
						}
					}

					if (request.getParameter("chk_us") != null
							&& request.getParameter("chk_us") != "") {
						if (request.getParameter("chk_ct") != null
								&& request.getParameter("chk_ct") != ""
								|| request.getParameter("chk_cr") != null
								&& request.getParameter("chk_cr") != ""
								|| request.getParameter("chk_mr") != null
								&& request.getParameter("chk_mr") != "") {
							query += " or s.mods_in_study like '%"
									+ request.getParameter("chk_us") + "%'";
						} else {
							query += " and s.mods_in_study like '%"
									+ request.getParameter("chk_us") + "%'";
						}
					}

					if (request.getParameter("chk_dx") != null
							&& request.getParameter("chk_dx") != "") {
						if (request.getParameter("chk_us") != null
								&& request.getParameter("chk_us") != ""
								|| request.getParameter("chk_ct") != null
								&& request.getParameter("chk_ct") != ""
								|| request.getParameter("chk_cr") != null
								&& request.getParameter("chk_cr") != ""
								|| request.getParameter("chk_mr") != null
								&& request.getParameter("chk_mr") != "") {
							query += " or s.mods_in_study like '%"
									+ request.getParameter("chk_dx") + "%'";
						} else {
							query += " and s.mods_in_study like '%"
									+ request.getParameter("chk_dx") + "%'";
						}
					}

					map.put("query", query);

					// Fetch Data from Student Table
					patientList = opdHandlerService.getAllPacsPatients(map);
					// Get Total Record Count for Pagination
					int userCount = opdHandlerService.getPacsPatientsCount(map);
					// Return in the format required by jTable plugin
					JSONROOT.put("Result", "OK");
					JSONROOT.put("Records", patientList);
					JSONROOT.put("TotalRecordCount", userCount);
					// Convert Java Object to Json
					String jsonArray = gson.toJson(JSONROOT);
					response.getWriter().print(jsonArray);
				}/*
				 * else if (action.equals("create") || action.equals("update"))
				 * { } Student student = new Student(); if
				 * (request.getParameter("studentId") != null) { int studentId =
				 * Integer.parseInt(request.getParameter("studentId"));
				 * student.setStudentId(studentId); }
				 * 
				 * if (request.getParameter("name") != null) { String name =
				 * request.getParameter("name"); student.setName(name); }
				 * 
				 * if (request.getParameter("department") != null) { String
				 * department = request.getParameter("department");
				 * student.setDepartment(department); }
				 * 
				 * if (request.getParameter("emailId") != null) { String emailId
				 * = request.getParameter("emailId");
				 * student.setEmailId(emailId); }
				 * 
				 * if (action.equals("create")) { // Create new record
				 * dao.addStudent(student); } else if (action.equals("update"))
				 * { // Update existing record dao.updateStudent(student); }
				 * 
				 * // Return in the format required by jTable plugin
				 * JSONROOT.put("Result", "OK"); JSONROOT.put("Record",
				 * student);
				 * 
				 * // Convert Java Object to Json String jsonArray =
				 * gson.toJson(JSONROOT); response.getWriter().print(jsonArray);
				 * } else if (action.equals("delete")) { // Delete record if
				 * (request.getParameter("studentId") != null) { int patientId =
				 * Integer.parseInt(request.getParameter("patientId"));
				 * pacsHandlerService.deletePatient(patientId);
				 * 
				 * // Return in the format required by jTable plugin
				 * JSONROOT.put("Result", "OK");
				 * 
				 * // Convert Java Object to Json String jsonArray =
				 * gson.toJson(JSONROOT); response.getWriter().print(jsonArray);
				 * } }
				 */
			} catch (Exception ex) {
				JSONROOT.put("Result", "ERROR");
				JSONROOT.put("Message", ex.getMessage());
				String error = gson.toJson(JSONROOT);
				response.getWriter().print(error);
			}
		}
		return null;
	}

	public ModelAndView showProcedureCalenderDoctorWise(
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();

		int hospitalId = 0;
		String opdFlag = null;
		String sessionDepartmentCode =null;
		String dentalFalg = null;
		String psyFlag = null;
		int surgeryId = 0;
		int deptId = 0;
		int empId = 0;
		int month = 0;
		int year = 0;
		int ot = 0;
		String surgeonName = "";
		Calendar calendar = Calendar.getInstance();

		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		}
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}
		if (session.getAttribute("empId") != null) {
			empId = (Integer) session.getAttribute("empId");
		}

		if (request.getParameter("opdFlag") != null) {
			opdFlag = request.getParameter("opdFlag");
		}

		if (request.getParameter("sessionDepartmentCode") != null) {
			sessionDepartmentCode = request.getParameter("sessionDepartmentCode");
		}

/*		if(sessionDepartmentCode==null)
		{
			if (request.getParameter("dentalFalg") != null) {
				dentalFalg = request.getParameter("dentalFalg");
			}
			if (request.getParameter("psyFlag") != null) {
				psyFlag = request.getParameter("psyFlag");
			}
	
			if(dentalFalg!=null && dentalFalg.equalsIgnoreCase("y"))
			{
				sessionDepartmentCode = HMSUtil.getProperties("adt.properties", "departmentCodeForDental");
			}
			else if(psyFlag!=null && psyFlag.equalsIgnoreCase("y"))
			{
				sessionDepartmentCode = HMSUtil.getProperties("adt.properties", "departmentCodeForPhychiatrist");
			}
		}*/
	

		Map<String, Object> mapForDS = new HashMap<String, Object>();

		/*
		 * if(request.getParameter("surgeryId") !=null){ surgeryId =
		 * Integer.parseInt(request.getParameter("surgeryId")); }
		 */
		if (request.getParameter("month") != null) {
			month = Integer.parseInt(request.getParameter("month"));
		} else {
			month = calendar.get(Calendar.MONTH);
		}
		if (request.getParameter("year") != null) {
			year = Integer.parseInt(request.getParameter("year"));
		} else {
			year = calendar.get(Calendar.YEAR);
		}

		if (request.getParameter(OT_ID) != null) {
			ot = Integer.parseInt(request.getParameter(OT_ID));
		}
		
		mapForDS.put(OT_ID, ot);
		mapForDS.put("empId", empId);
		mapForDS.put(DEPARTMENT_ID, deptId);
		mapForDS.put(HOSPITAL_ID, hospitalId);
		mapForDS.put("surgeryId", surgeryId);
		mapForDS.put("month", month);
		mapForDS.put("year", year);
		//mapForDS.put("sessionDepartmentCode", sessionDepartmentCode);
		map = opdHandlerService.showProcedureCalenderDoctorWise(mapForDS);
		map.put(OT_ID, ot);

		jsp = "procedureCalendar";
		/*
		 * if(opdFlag==null) { jsp += ".jsp"; map.put("contentJsp", jsp); }
		 */

		/*
		 * if(opdFlag==null) return new ModelAndView("index", "map", map); else
		 */
		
		jsp = "procedureCalendar";
		if(opdFlag==null)
		{
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		}
		title = "Ot Schedule";

		map.put("title", title);
		map.put("month", month);
		map.put("year", year);
		//map.put("surgeryId", surgeryId);
		map.put("opdFlag", opdFlag);
		map.put("sessionDepartmentCode", sessionDepartmentCode);
		
		if(opdFlag==null)
		     return new ModelAndView("index", "map", map);
		else
			return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView viewAllPrevoiusSession(HttpServletRequest request,
			HttpServletResponse response) {
		List<DgOrderhd> orderNoList = new ArrayList<DgOrderhd>();
		Map<String, Object> mapForDs = new HashMap<String, Object>();
		Map<String, Object> orderDetailMap = new HashMap<String, Object>();

		if (request.getSession(false) == null) {
			return new ModelAndView("login");
		}

		HttpSession session = request.getSession();
		String deptName = "";
		String jsp = "";
		int deptId = 0;
		int hinId =0;
		if (session.getAttribute("deptName") != null) {
			deptName = (String) session.getAttribute("deptName");
		}

		int inPatientId = 0;

		if (request.getParameter("hinId") != null) {
			 hinId = Integer.parseInt(request.getParameter("hinId"));
		}
	
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}
		mapForDs.put("hinId", hinId);
		mapForDs.put("deptId", deptId);
		map = opdHandlerService.getPreviousTherapy(mapForDs);

		jsp = "previousTherapy";
		map.put("deptName", deptName);
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView getTherapyWaitingList(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			HttpSession session = request.getSession();
			Integer hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			map.put("hospitalId", hospitalId);
			if (session.getAttribute("deptId") != null) {
				int deptId = (Integer) session.getAttribute("deptId");
				map.put("deptId", deptId);
			}
			Date FromDateId = new Date();
			if (request.getParameter("FromDateId") != null
					|| request.getParameter("FromDateId") != "") {
				FromDateId = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter("FromDateId"));
				map.put("FromDateId", FromDateId);
			}
			Date ToDateId = new Date();
			if (request.getParameter("ToDateId") != null
					|| request.getParameter("ToDateId") != "") {
				ToDateId = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter("ToDateId"));
				map.put("ToDateId", ToDateId);
			}
			map = opdHandlerService.getTherapyWaitingList(map);
			map.put("FromDateId", request.getParameter("FromDateId"));
			map.put("ToDateId", request.getParameter("ToDateId"));
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "therapyWaitList.jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	@SuppressWarnings("unchecked")
	public ModelAndView getTherapyScreenJSP(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		Integer departmentId = null;
		if (session.getAttribute("deptId") != null) {
			departmentId = (Integer) session.getAttribute("deptId");
		}
		Integer hospitalId = null;
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		}
		Date date = null;
		if (request.getParameter("opdDate") != null) {
			map.put("opdDate", request.getParameter("opdDate"));
		}
		
		int visitId = 0;
		if (request.getParameter("visitId") != null) {
			map.put("visitId",
					Integer.parseInt(request.getParameter("visitId")));
		}

		map.put("departmentId", departmentId);
		map.put("hospitalId", hospitalId);
		map = opdHandlerService.getTherapyDetailsList(map);
		jsp = "therapyDetailsList.jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView saveTherapyAppointmentDetails(
			HttpServletRequest request, HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("box", box);
		map = opdHandlerService.saveTherapyDetails(map);
		String flag = null;
		if (map.get("flag") != null) {
			flag = (String) map.get("flag");
		}

		try {
			PrintWriter pw = response.getWriter();
			pw.write("" + flag);

		}

		catch (Exception e) {
			e.printStackTrace();
		}

		return null;

	}

	public ModelAndView getTherapyHistory(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		int therapuHdId = 0;
		int procedureId = 0;
		if (request.getParameter("therapuHdId") != null) {
			therapuHdId = Integer.parseInt(request.getParameter("therapuHdId"));
			mapForDS.put("therapuHdId", therapuHdId);
		}

		if (request.getParameter("procedureId") != null) {
			procedureId = Integer.parseInt(request.getParameter("procedureId"));
			
		}
		mapForDS.put("procedureId", procedureId);
		int hospitalId = 0;
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			mapForDS.put("hospitalId", hospitalId);
		}
		map = opdHandlerService.getPreviousTherapyDetails(mapForDS);

		title = "Patient Previous Visit";

		jsp = "therapyHistoryProcedureWise";
		map.put("title", title);

		return new ModelAndView(jsp, "map", map);
	}

	
	//Dental procedure
	public ModelAndView getDentalProcedureWaitingList(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			HttpSession session = request.getSession();
			Integer hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			map.put("hospitalId", hospitalId);
			if (session.getAttribute("deptId") != null) {
				int deptId = (Integer) session.getAttribute("deptId");
				map.put("deptId", deptId);
			}
			Date FromDateId = new Date();
			if (request.getParameter("FromDateId") != null
					|| request.getParameter("FromDateId") != "") {
				FromDateId = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter("FromDateId"));
				map.put("FromDateId", FromDateId);
			}
			Date ToDateId = new Date();
			if (request.getParameter("ToDateId") != null
					|| request.getParameter("ToDateId") != "") {
				ToDateId = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter("ToDateId"));
				map.put("ToDateId", ToDateId);
			}
			map = opdHandlerService.getDentalProcedureWaitingList(map);
			map.put("FromDateId", request.getParameter("FromDateId"));
			map.put("ToDateId", request.getParameter("ToDateId"));
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "therapyWaitList.jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

/*	@SuppressWarnings("unchecked")
	public ModelAndView getDentalProcedureJSP(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		Integer departmentId = null;
		if (session.getAttribute("deptId") != null) {
			departmentId = (Integer) session.getAttribute("deptId");
		}
		Integer hospitalId = null;
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		}
		Date date = null;
		if (request.getParameter("opdDate") != null) {
			map.put("opdDate", request.getParameter("opdDate"));
		}
		
		int visitId = 0;
		if (request.getParameter("visitId") != null) {
			map.put("visitId",
					Integer.parseInt(request.getParameter("visitId")));
		}

		map.put("departmentId", departmentId);
		map.put("hospitalId", hospitalId);
		map = opdHandlerService.getDentalProcedureDetailsList(map);
		jsp = "therapyDetailsList.jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView saveDentalProcedureAppointmentDetails(
			HttpServletRequest request, HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("box", box);
		map = opdHandlerService.saveTherapyDetails(map);
		String flag = null;
		if (map.get("flag") != null) {
			flag = (String) map.get("flag");
		}

		try {
			PrintWriter pw = response.getWriter();
			pw.write("" + flag);

		}

		catch (Exception e) {
			e.printStackTrace();
		}

		return null;

	}

	public ModelAndView getDentalProcedureHistory(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		int therapuHdId = 0;
		int procedureId = 0;
		if (request.getParameter("therapuHdId") != null) {
			therapuHdId = Integer.parseInt(request.getParameter("therapuHdId"));
			mapForDS.put("therapuHdId", therapuHdId);
		}

		if (request.getParameter("procedureId") != null) {
			procedureId = Integer.parseInt(request.getParameter("procedureId"));
			mapForDS.put("procedureId", procedureId);
		}

		int hospitalId = 0;
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			mapForDS.put("hospitalId", hospitalId);
		}
		map = opdHandlerService.getPreviousTherapyDetails(mapForDS);

		title = "Patient Previous Visit";

		jsp = "therapyHistoryProcedureWise";
		map.put("title", title);

		return new ModelAndView(jsp, "map", map);
	}*/


	@SuppressWarnings({ "unchecked", "unchecked" })
	public void showPatientEyeDetailsReport(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		//int visiNo = 0;
		//String serviceNo = "";
		//String hinNo = "0125256042";
		int visitId = 0;

		Map<String, Object> parameters = new HashMap<String, Object>();
		//HttpSession session = request.getSession();

	/*	if (request.getParameter(SERVICE_NO_FOR_REPORT) != null) {
			serviceNo = request.getParameter(SERVICE_NO_FOR_REPORT);
		}
		if (request.getParameter(VISIT_NUMBER_FOR_REPORT) != null) {
			visiNo = Integer.parseInt(request
					.getParameter(VISIT_NUMBER_FOR_REPORT));
		}
		*/
		/*if (request.getParameter(HIN_NO_FOR_REPORT) != null) {
			hinNo = request.getParameter(HIN_NO_FOR_REPORT);
		}*/
		if (request.getParameter(VISIT_ID) != null) {
			//visitId = Integer.parseInt(request.getParameter(VISIT_ID));
			String a[] = request.getParameter(VISIT_ID).split("@");
			if( a.length>=3)
			{
				visitId =Integer.parseInt(a[0]);
			}
			else
				visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
	
/*		Map<String, Object> datamap = new HashMap<String, Object>();
		int deptId = 0;
		int hinId = 0;
		// hinId = opdHandlerService.getPatient(hinNo);
		datamap = opdHandlerService.getVisitForPatient(hinNo, visitId);

		if (datamap.get("hinId") != null) {
			hinId = (Integer) datamap.get("hinId");
		}
		if (datamap.get("deptId") != null) {
			deptId = (Integer) datamap.get("deptId");
		}
		parameters.put("hinId", hinId);
		parameters.put("deptId", deptId);*/

		/*Properties properties = new Properties();
		URL resourcePathHIC = Thread.currentThread().getContextClassLoader()
				.getResource("adt.properties");
		try {
			properties.load(resourcePathHIC.openStream());
		} catch (Exception e) {
			e.printStackTrace();
		}
		int deptIdProp = Integer.parseInt(properties
				.getProperty("departmentIdForDental"));*/

		/*String FlagforOPD = "NA";
		System.out.println(deptIdProp);
		System.out.println(deptId);
		System.out.println("visitId" +visitId);
		System.out.println("hinno" +hinNo);
		if (deptIdProp == deptId) {
			FlagforOPD = "Dental";
		} else {
			FlagforOPD = "General";
		}*/

		String userHome = getServletContext().getRealPath("");
		String imagePath = userHome + "/jsp/images/logonew-hal.jpg";
		parameters.put("path", imagePath);

	/*	int hospitalIdForReport = 0;

		if (request.getParameter("hospitalIdForReport") != null) {
			hospitalIdForReport = Integer.parseInt(request
					.getParameter("hospitalIdForReport"));
		}*/

	/*	if (hospitalIdForReport != 0) {
			int hospitalId = hospitalIdForReport;
			parameters.put("hospitalId", hospitalId);
		} else {
			int hospitalId = (Integer) session.getAttribute("hospitalId");
			parameters.put("hospitalId", hospitalId);
		}*/

		Map<String, Object> detailsMap = new HashMap<String, Object>();
		detailsMap = opdHandlerService.getConnectionForReport();

		parameters.put("visitId", visitId);
		//parameters.put("visitNo", visiNo);
		//parameters.put("serviceNo", serviceNo);
		//parameters.put("hinNo", hinNo);

		//parameters.put("FlagforOPD", FlagforOPD);
		parameters.put("SUBREPORT_DIR",
				getServletContext().getRealPath("/reports/"));
		try {

			HMSUtil.generateReport("eye_opd_details", parameters,
					(Connection) detailsMap.get("conn"), response,
					getServletContext());

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}

	}
	
	//pediatric
	
	public ModelAndView showVaccineDetailJsp(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();;
		Box box = HMSUtil.getBox(request);
		Map<String, Object> dataMap = new HashMap<String, Object>();
		int hospitalId = 0;
		int visitId=0;

		if(request.getParameter("visitId")!=null && !request.getParameter("visitId").equals("")){
			visitId=Integer.parseInt(request.getParameter("visitId"));	
		}
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));
		}
		int inpatientId=0;
		if(request.getParameter("inpatientId")!=null && !request.getParameter("inpatientId").equals("")){
			inpatientId=Integer.parseInt(request.getParameter("inpatientId"));	
		}
		box.put("hospitalId", hospitalId);
		box.put("visitId", visitId);
		box.put("inpatientId",inpatientId);
		dataMap.put("box", box);
		map = opdHandlerService.showVaccineDetailJsp(dataMap);
		
		//jsp = "opdvaccineDetail";
		jsp = "opdvaccineDetailNew";
		map.put("contentJsp", jsp);
		/*jsp += ".jsp";
		title = "Immunization";
		map.put("contentJsp", jsp);
		map.put("title", title);*/
		return new ModelAndView(jsp, "map", map);
	}
	public ModelAndView submitVaccineDetail(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		session = request.getSession();
		int hospitalId = 0;
		int userId = 0;
		int departmentId = 0;
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		}
		if (session.getAttribute("userId") != null) {
			userId = Integer.parseInt("" + session.getAttribute("userId"));
		}
		
		if (session.getAttribute("deptId") != null) {
			departmentId = Integer.parseInt(""
					+ session.getAttribute("deptId"));
		}
		
		box.put("hospitalId", hospitalId);
		box.put("departmentId", departmentId);
		box.put("userId", userId);
		dataMap.put("box", box);
		map = opdHandlerService.submitVaccineDetail(dataMap);
		if (box.getString("flag").equals("opd")) {
			//map = opdHandlerService.showVaccineDetailJsp(box);
			jsp = "opdvaccineDetail";
			return new ModelAndView(jsp, "map", map);
		} else {
			jsp = "vaccineDetail";
			jsp += ".jsp";
			title = "Immunization";
			map.put("contentJsp", jsp);
			map.put("title", title);
			return new ModelAndView("index", "map", map);
		}
	}
	
	@SuppressWarnings({ "unused", "unchecked" })
	public ModelAndView showOPDOBGJsp(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		MultipartFormDataRequest mrequest = null;
		int visitId = 0;
		int token = 0;

		int docId = 0;
		if (session.getAttribute("userId") != null) {
			docId = (Integer) session.getAttribute("empId");

		}

		if (request.getParameter("token") != null) {
			token = Integer.parseInt(request.getParameter("token"));
			session.setAttribute("token", token);
		}
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		int empId = (Integer) session.getAttribute("userId");
		if (MultipartFormDataRequest.isMultipartFormData(request)) {
			try {
				mrequest = new MultipartFormDataRequest(request);
				visitId = Integer.parseInt(request.getParameter("visitId"));
			} catch (UploadException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
		} else {
			visitId = Integer.parseInt(request.getParameter("visitId"));
		}
		map = opdHandlerService.getPatientDetails(visitId);
		boolean patientAdmitted = false;
		int deptId = (Integer) session.getAttribute("deptId");
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		List<OpdPatientDetails> opdDetailListForFollowUp = new ArrayList<OpdPatientDetails>();
		List<OpdPatientHistory> opdHistoryDetailsListForFollowUp = new ArrayList<OpdPatientHistory>();
		List<PatientInvestigationHeader> patientInvestigationHeaderListForFollowUp = new ArrayList<PatientInvestigationHeader>();
		List<PatientPrescriptionHeader> patientPrescriptionHeaderList = new ArrayList<PatientPrescriptionHeader>();
		List<DischargeIcdCode> dischargeIcdCodeList = new ArrayList<DischargeIcdCode>();
		OpdPatientDetails opdPatientDetails = null;
		List<MasEmployeeDependent> med = null;
		List<OpdPatientDetails> admittedVisit = new ArrayList<OpdPatientDetails>();
		List<MasItemClass> masItemClassList = new ArrayList<MasItemClass>();

		if (map.get("opdDetailListForFollowUp") != null) {
			opdDetailListForFollowUp = (List<OpdPatientDetails>) map
					.get("opdDetailListForFollowUp");
		}
		if (map.get("opdHistoryDetailsListForFollowUp") != null) {
			opdHistoryDetailsListForFollowUp = (List<OpdPatientHistory>) map
					.get("opdHistoryDetailsListForFollowUp");
		}
		if (map.get("patientInvestigationHeaderListForFollowUp") != null) {
			patientInvestigationHeaderListForFollowUp = (List<PatientInvestigationHeader>) map
					.get("patientInvestigationHeaderListForFollowUp");
		}
		if (map.get("patientPrescriptionHeaderList") != null) {
			patientPrescriptionHeaderList = (List<PatientPrescriptionHeader>) map
					.get("patientPrescriptionHeaderList");
		}
		if (map.get("dischargeIcdCodeList") != null) {
			dischargeIcdCodeList = (List<DischargeIcdCode>) map
					.get("dischargeIcdCodeList");
		}

		if (map.get("opdPatientDetails") != null) {
			opdPatientDetails = (OpdPatientDetails) map
					.get("opdPatientDetails");
		}
		if (map.get("patientAdmitted") != null) {
			patientAdmitted = (Boolean) map.get("patientAdmitted");
		}
		if (map.get("admittedVisit") != null) {
			admittedVisit = (List<OpdPatientDetails>) map.get("admittedVisit");
		}
		if (map.get("masItemClassList") != null) {
			masItemClassList = (List<MasItemClass>) map.get("masItemClassList");
		}
		if (map.get("med") != null) {
			med = (List<MasEmployeeDependent>) map.get("med");
		}

		// map = opdHandlerService.getPatientDetails(visitId);
		List patientDataList = (List) map.get("patientDataList");
		Visit visit = (Visit) patientDataList.get(0);
		int visitNo = visit.getVisitNo();
		int hinId = visit.getHin().getId();
		mapForDS.put("deptId", deptId);
		mapForDS.put("visitNo", visitNo);
		mapForDS.put("hinId", hinId);
		mapForDS.put("visitId", visitId);
		mapForDS.put("hospitalId", hospitalId);
		mapForDS.put("docId", docId);
		map = opdHandlerService.getOPDDetails(mapForDS);
		Map<String, Object> mapForToken = new HashMap<String, Object>();
		mapForToken.put("token", token);
		mapForToken.put("visitId", visitId);
		mapForToken.put("empId", empId);
		mapForToken.put("hospitalId", hospitalId);
		mapForToken = opdHandlerService.updateVistToken(mapForToken);
		map.put("patientDataList", patientDataList);
		map.put("opdDetailListForFollowUp", opdDetailListForFollowUp);
		map.put("opdHistoryDetailsListForFollowUp",
				opdHistoryDetailsListForFollowUp);
		map.put("patientInvestigationHeaderListForFollowUp",
				patientInvestigationHeaderListForFollowUp);
		map.put("patientPrescriptionHeaderList", patientPrescriptionHeaderList);
		map.put("dischargeIcdCodeList", dischargeIcdCodeList);
		map.put("opdPatientDetails", opdPatientDetails);
		map.put("patientAdmitted", patientAdmitted);
		map.put("admittedVisit", admittedVisit);
		map.put("masItemClassList", masItemClassList);
		map.put("med", med);

		jsp = "opd_obg";
		jsp += ".jsp";
		title = "Patient Details";
		map.put("visitId", visitId);
		map.put("deptId", deptId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView submitOBGPatientDetails(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		int hinId = Integer.parseInt(request.getParameter("hinId"));
		int departmentId = Integer.parseInt(request
				.getParameter("departmentId"));
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		String familyHistory ="";
		// System.out.println("controller visitId---" + visitId);
		int hospitalId = Integer.parseInt(request.getParameter("hospitalId"));
		if (request.getParameter("familyHistory") != null) {
			familyHistory = request.getParameter("familyHistory");
		}
		int hiddenValue = 1;
		if (Integer.parseInt(request.getParameter("hiddenValue")) != 1) {
			hiddenValue = Integer.parseInt(request.getParameter("hiddenValue"));
		}
		int temp = 1;
		String[] chargeCodeIdArr = new String[hiddenValue];
		List<String> chargeCodeIdList = new ArrayList<String>();
		for (int i = 0; i < hiddenValue; i++) {
			if (request.getParameter("chargeCodeName" + temp) != null
					&& !request.getParameter("chargeCodeName" + temp)
							.equals("")) {

				String chargeCodeNameWithId = request
						.getParameter("chargeCodeName" + temp);
				int index1 = chargeCodeNameWithId.lastIndexOf("[");
				int index2 = chargeCodeNameWithId.lastIndexOf("]");
				index1++;
				String chargeCodeId = chargeCodeNameWithId.substring(index1,
						index2);
				if (!chargeCodeId.equals("")) {
					chargeCodeIdArr[i] = chargeCodeId;
					int qty = 1;
	
			
					chargeCodeIdList.add(chargeCodeIdArr[i]);

				}
			}
			temp++;
		}
		
		mapForDS.put("hinId", hinId);
		mapForDS.put("hospitalId", hospitalId);
		mapForDS.put("hospitalId", hospitalId);
		mapForDS.put("hospitalId", hospitalId);
		mapForDS.put("box",box );
		mapForDS.put("chargeCodeIdList", chargeCodeIdList);
		map = opdHandlerService.submitOBGPatientDetails(mapForDS);
		if (map!=null)
			message = "Error Occurred in Submitting Details.";
		else
			message = "Error Occurred in Submitting Details.";
		jsp = OPD_WAITING_LIST_JSP;

		jsp += ".jsp";
		map.put("contentJsp", jsp);
			return new ModelAndView("indexB", "map", map);
	}
	public ModelAndView showEmergencyOPDWaitingList(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		map = opdHandlerService.showEmpergencyOPDJsp(map);
		//String jsp = "visitOfHALEmployeesByAdmin.jsp";
		String jsp = OPD_EMERGENCY_WAITING_LIST_JSP;
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}
	
	public ModelAndView getServiceNoDetailsForRegHAL(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		int hospitalId = 0;
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			box.put("hospitalId", hospitalId);
		}
		
		String otherPatient = null;
		if(box.getString("otherPatient")!=null)
		{
		   otherPatient = box.getString("otherPatient");
		}

		//if(otherPatient!=null && otherPatient.equalsIgnoreCase("y"))
			
		//else
		  map = opdHandlerService.getServiceNoDetailsForRegHAL(box);
		  if(otherPatient!=null && otherPatient.equalsIgnoreCase("y"))
		  map.put("otherPatient", otherPatient);

		return new ModelAndView("responseForHalEmpNOther", "map", map);
	}

	public ModelAndView getServiceNoDetailsForRegHAL1(HttpServletRequest request,
			HttpServletResponse response) {
		
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		String employeeNo = null;
		
		if (request.getParameter("serviceNo") != null
				&& request.getParameter("serviceNo") != "") {
			employeeNo = request.getParameter("serviceNo");
		}
		box.put("hospitalId", session.getAttribute(HOSPITAL_ID));
		map.put("employeeNo", employeeNo);
	
		
		if (session.getAttribute("empId") != null){
			box.put("docId", Integer.parseInt(session.getAttribute("empId") + ""));}
		if (session.getAttribute("deptId") != null){
			
			box.put("deparmentId",  Integer.parseInt(session.getAttribute("deptId") + ""));}
		
		
		map.put("box", box);
		map = opdHandlerService.showPatientDetailsEmergencyOPD(map);
		
	
		return new ModelAndView("opd_emgency", "map", map);
	}
	
	public ModelAndView submitEmergencyOPD(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int divisionId = 0;
		int userId = 0;
		int deptId = 0;
		int empId = 0;
		String userName = "";
		HttpSession session = request.getSession();
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					+ "");
		if (session.getAttribute("divisionId") != null)
			divisionId = Integer.parseInt(session.getAttribute("divisionId")
					+ "");
		if (session.getAttribute("userId") != null)
			userId = Integer.parseInt(session.getAttribute("userId") + "");
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt(session.getAttribute("deptId") + "");
		if (session.getAttribute("empId") != null)
			empId = Integer.parseInt(session.getAttribute("empId") + "");
		if (session.getAttribute("userName") != null)
			userName = session.getAttribute("userName") + "";
		
		List<String> chargeCodeIdList = new ArrayList<String>();
		List<String> investigationDate = new ArrayList<String>();
		int temp = 1;
		int hiddenValue = 1;
		if (request.getParameter("hiddenValue")!=null &&Integer.parseInt(request.getParameter("hiddenValue")) != 1) {
			hiddenValue = Integer.parseInt(request.getParameter("hiddenValue"));
		}
		String[] chargeCodeIdArr = new String[hiddenValue];
		for (int i = 0; i < hiddenValue; i++) {
			if (request.getParameter("chargeCodeName" + temp) != null
					&& !request.getParameter("chargeCodeName" + temp)
							.equals("")) {

				String chargeCodeNameWithId = request
						.getParameter("chargeCodeName" + temp);
				int index1 = chargeCodeNameWithId.lastIndexOf("[");
				int index2 = chargeCodeNameWithId.lastIndexOf("]");
				index1++;
				String chargeCodeId = chargeCodeNameWithId.substring(index1,
						index2);
				if (!chargeCodeId.equals("")) {
					chargeCodeIdArr[i] = chargeCodeId;
					//int qty = 1;
					// int
					// qty=Integer.parseInt(request.getParameter("qty"+temp));
					// String clinicalNotes =
					// request.getParameter("clinicalNotes" + temp);
			/*		if (request.getParameter("referToMh" + temp) != null
							&& !request.getParameter("referToMh" + temp)
									.equals("")) {
						String referToMh = request.getParameter("referToMh"
								+ temp);
						referToMhList.add(referToMh);
					} else {
						String referToMh = "n";
						referToMhList.add(referToMh);
					}*/
					chargeCodeIdList.add(chargeCodeIdArr[i]);
					investigationDate.add(request.getParameter("investigationDate"+temp));
					// quantityList.add(qty);
					// clinicalList.add(clinicalNotes);

				}
			}
			temp++;
		}
		
		
		List<String> pvmsNoList = new ArrayList<String>();
		List<Integer> frequencyList = new ArrayList<Integer>();
		List<String> dosageList = new ArrayList<String>();
		List<String> remarksList = new ArrayList<String>();
		List<String> typeLeftRightList = new ArrayList<String>();
		List<String> instructionList = new ArrayList<String>();
		List<Integer> totalList = new ArrayList<Integer>();
		List<Integer> noOfDaysList = new ArrayList<Integer>();
		List<String> routeList = new ArrayList<String>();
		List<Integer> itemConversionList = new ArrayList<Integer>();
		List<Integer> itemClassList = new ArrayList<Integer>();
		List<String> itemDispensaryList = new ArrayList<String>();
		List<BigDecimal> uomQtyList = new ArrayList<BigDecimal>();
		String[] diagnosisIdAray = null;

		if (request.getParameterValues(DIAGNOSIS_ID) != null) {
			diagnosisIdAray = (String[]) request
					.getParameterValues(DIAGNOSIS_ID);
		}
		// System.out.println("this is array size"+diagnosisIdAray.length);
		// --------------commented by anamika------------------//
		/*
		 * String referredDept = ""; String[] referredToDeptArray = null; if
		 * (request.getParameterValues("referredDepartmentId") != null) {
		 * referredToDeptArray = (String[]) request
		 * .getParameterValues("referredDepartmentId"); for (int i = 0; i <
		 * referredToDeptArray.length; i++) { if (i == 0) referredDept =
		 * referredToDeptArray[i]; else referredDept = referredDept + "," +
		 * referredToDeptArray[i]; } }
		 */
		// System.out.println("referredDept-----" + referredDept);
		int nomenclaturehdb = 1;
		if (request.getParameter("nomenclaturehdb")!=null&&Integer.parseInt(request.getParameter("nomenclaturehdb")) != 1) {
			nomenclaturehdb = Integer.parseInt(request.getParameter("nomenclaturehdb"));
		}
		String[] pvmsArr = new String[nomenclaturehdb];
		Integer[] itemIdArr = new Integer[nomenclaturehdb];
		String otherMedicine = "";
		List<String> otherMedicineList = new ArrayList<String>();
		List<String> ctList = new ArrayList<String>();
		// List<String> nomenclatureList = new ArrayList<String>();
		List<Integer> itemIdList = new ArrayList<Integer>();
		List<Integer> classificationList = new ArrayList<Integer>();
		// List injCategoryList = new ArrayList();
		int j = 1;
		for (int i = 0; i < nomenclaturehdb; i++) {
			String pvmsNo = "";
			int itemId = 0;
			/*
			 * if (request.getParameter("nomenclature" + j) != null &&
			 * !request.getParameter("nomenclature" + j).equals("")) {
			 * 
			 * String nomenclature = request.getParameter("nomenclature" + j);
			 * StringTokenizer strToken = new StringTokenizer(c, "["); String
			 * nomen= strToken.nextToken(); String nomen =
			 * request.getParameter("nomenclature" + j).substring(0,
			 * request.getParameter("nomenclature" + j).indexOf("["));
			 * nomenclatureList.add(nomen); //int index1 =
			 * nomenclature.lastIndexOf("["); //int index2 =
			 * nomenclature.lastIndexOf("]");
			 * //System.out.println("index1=="+index1);
			 * //System.out.println("index2=="+index2); //index1++; //pvmsNo =
			 * nomenclature.substring(index1, index2); int index1 =
			 * nomenclature.lastIndexOf("("); int index2 =
			 * nomenclature.lastIndexOf(")");
			 * //System.out.println("index1=="+index1); //
			 * System.out.println("index2=="+index2); index1++; itemId
			 * =Integer.parseInt(nomenclature.substring(index1, index2)); if
			 * (itemId != 0) { itemIdList.add(itemId); }
			 * otherMedicineList.add(""); }
			 */

			if (request.getParameter("itemId" + j) != null
					&& !request.getParameter("nomenclature" + j).equals("")) {
				itemId = Integer.parseInt(request.getParameter("itemId" + j));
				if (itemId != 0) {
					itemIdList.add(itemId);
				}

				if (request.getParameter("itemIdClassificationId" + j) != null
						&& !request.getParameter("itemIdClassificationId" + j)
								.equals("")) {
					classificationList.add(Integer.parseInt(request
							.getParameter("itemIdClassificationId" + j)));
				} else
					classificationList.add(0);
				/*otherMedicineList.add(otherMedicine);*/
			} else {
				if (request.getParameter("otherMedicine" + j) != null
						&& !request.getParameter("otherMedicine" + j)
								.equals("")) {
					otherMedicine = request.getParameter("otherMedicine" + j);
					otherMedicineList.add(otherMedicine);

				}

			}
			
			if((request.getParameter("itemId" + j) != null && !request.getParameter("nomenclature" + j).equals("")) || (request.getParameter("otherMedicine" + j) != null && !request.getParameter("otherMedicine" + j).equals("")) )
			{
			int itemConversionId = 0;
			if (request.getParameter("itemConversionId" + j) != null
					&& !request.getParameter("itemConversionId" + j).equals("")) {
				itemConversionId = Integer.parseInt(request
						.getParameter("itemConversionId" + j));
				itemConversionList.add(itemConversionId);
			}
			else
				itemConversionList.add(0);
			if (request.getParameter("itemClass" + j) != null
					&& !request.getParameter("itemClass" + j).equals("")) {
				itemClassList.add(Integer.parseInt(request
						.getParameter("itemClass" + j)));
			}
			else
				itemClassList.add(0);

			if (request.getParameter("dispensingUnit" + j) != null) {
				itemDispensaryList.add(request.getParameter("dispensingUnit"
						+ j));
			}
			else
				itemDispensaryList.add("");

			if (request.getParameter("uomQty" + j) != null) {
					uomQtyList.add(new BigDecimal(request.getParameter("uomQty"+ j)));
				}
				else
					uomQtyList.add(new BigDecimal(0));
			
			int frequencyId = 0;
			if (request.getParameter("frequency" + j) != null
					&& !request.getParameter("frequency" + j).equals("")) {
				frequencyId = Integer.parseInt(request.getParameter("frequency"
						+ j));
				frequencyList.add(frequencyId);
			} else {
				frequencyList.add(0);
			}
			if (request.getParameter("ct" + j) != null) {
				ctList.add("y");
			} else {
				ctList.add("n");
			}

			String route = "";
			if (request.getParameter("route" + j) != null
					&& !request.getParameter("route" + j).equals("")) {
				route = request.getParameter("route" + j);
				routeList.add(route);
			} else {
				routeList.add("");
			}

			BigDecimal frequenceValue = new BigDecimal("0");
			if (request.getParameter("frequencyValue" + j) != null
					&& !request.getParameter("frequencyValue" + j).equals("")) {
				frequenceValue = new BigDecimal(
						request.getParameter("frequencyValue" + j));
			}

			String dosage = "";
			if (request.getParameter("dosage" + j) != null
					&& !request.getParameter("dosage" + j).equals("")) {
				dosage = request.getParameter("dosage" + j);
				dosageList.add(dosage);
			} else {
				dosageList.add("");
			}
			if (request.getParameter("noOfDays" + j) != null
					&& !request.getParameter("noOfDays" + j).equals("")) {
				int noOfDays = Integer.parseInt(request.getParameter("noOfDays"
						+ j));
				noOfDaysList.add(noOfDays);
				// int noOfdoges=1;
				// if(dosage!=null && dosage!=""){
				// noOfdoges=Integer.parseInt(dosage);
				// }
				// int total = noOfDays * frequenceValue*noOfdoges;
				// totalList.add(total);

			} else {
				noOfDaysList.add(0);
			}
			if (request.getParameter("total" + j) != null
					&& !request.getParameter("total" + j).equals("")) {
				int total = Math.round(Float.parseFloat(request
						.getParameter("total" + j)));
				totalList.add(total);
			} else {
				totalList.add(0);
			}

			String remarks = "";
			if (request.getParameter("remarks" + j) != null
					&& !request.getParameter("remarks" + j).equals("")) {
				remarks = request.getParameter("remarks" + j);
				remarksList.add(remarks);
			} else {
				remarksList.add("");
			}
		}
			// if(!pvmsNo.equals("")){
			// pvmsNoList.add(pvmsNo);
			// }
			// pvmsNoList.add(pvmsArr[i]);

			j++;
		}
		
		

		
		//capture NIP
					j =500;
					int n=itemIdList.size();
							int hdb = 1;
		if (request.getParameter("hdb")!=null &&Integer.parseInt(request.getParameter("hdb")) != 1) {
			hdb = Integer.parseInt(request.getParameter("hdb"));
		}
		
		for ( j = 500; j <=hdb; j++) {
			String pvmsNo = "";
			int itemId = 0;

			if (request.getParameter("itemId" + j) != null
					&& !request.getParameter("nomenclature" + j).equals("")) {
				itemId = Integer.parseInt(request.getParameter("itemId" + j));
				if (itemId != 0) {
					itemIdList.add(itemId);
				}

				if (request.getParameter("itemIdClassificationId" + j) != null
						&& !request.getParameter("itemIdClassificationId" + j)
								.equals("")) {
					classificationList.add(Integer.parseInt(request
							.getParameter("itemIdClassificationId" + j)));
				} else
					classificationList.add(0);
				/*otherMedicineList.add(otherMedicine);*/
			} else {
				if (request.getParameter("otherMedicine" + j) != null
						&& !request.getParameter("otherMedicine" + j)
								.equals("")) {
					otherMedicine = request.getParameter("otherMedicine" + j);
					otherMedicineList.add(otherMedicine);
					/*otherMedicineList.add(n,otherMedicine);*/

				}

			}
			
			if((request.getParameter("itemId" + j) != null && !request.getParameter("nomenclature" + j).equals("")) || (request.getParameter("otherMedicine" + j) != null && !request.getParameter("otherMedicine" + j).equals("")) )
			{
			int itemConversionId = 0;
			if (request.getParameter("itemConversionId" + j) != null
					&& !request.getParameter("itemConversionId" + j).equals("")) {
				itemConversionId = Integer.parseInt(request
						.getParameter("itemConversionId" + j));
				itemConversionList.add(itemConversionId);
			}
			else
				itemConversionList.add(0);
			if (request.getParameter("itemClass" + j) != null
					&& !request.getParameter("itemClass" + j).equals("")) {
				itemClassList.add(Integer.parseInt(request
						.getParameter("itemClass" + j)));
			}
			else
				itemClassList.add(0);
			if (request.getParameter("dispensingUnit" + j) != null) {
				itemDispensaryList.add(request.getParameter("dispensingUnit"
						+ j));
			}
			else
				itemDispensaryList.add("");

			if (request.getParameter("uomQty" + j) != null) {
					uomQtyList.add(new BigDecimal(request.getParameter("uomQty"+ j)));
				}
				else
					uomQtyList.add(new BigDecimal(0));
			int frequencyId = 0;
			if (request.getParameter("frequency" + j) != null
					&& !request.getParameter("frequency" + j).equals("")) {
				frequencyId = Integer.parseInt(request.getParameter("frequency"
						+ j));
				frequencyList.add(frequencyId);
			} else {
				frequencyList.add(0);
			}
			if (request.getParameter("ct" + j) != null) {
				ctList.add("y");
			} else {
				ctList.add("n");
			}

			String route = "";
			if (request.getParameter("route" + j) != null
					&& !request.getParameter("route" + j).equals("")) {
				route = request.getParameter("route" + j);
				routeList.add(route);
			} else {
				routeList.add("");
			}

			BigDecimal frequenceValue = new BigDecimal("0");
			if (request.getParameter("frequencyValue" + j) != null
					&& !request.getParameter("frequencyValue" + j).equals("")) {
				frequenceValue = new BigDecimal(
						request.getParameter("frequencyValue" + j));
			}

			String dosage = "";
			if (request.getParameter("dosage" + j) != null
					&& !request.getParameter("dosage" + j).equals("")) {
				dosage = request.getParameter("dosage" + j);
				dosageList.add(dosage);
			} else {
				dosageList.add("");
			}
			if (request.getParameter("noOfDays" + j) != null
					&& !request.getParameter("noOfDays" + j).equals("")) {
				int noOfDays = Integer.parseInt(request.getParameter("noOfDays"
						+ j));
				noOfDaysList.add(noOfDays);
				// int noOfdoges=1;
				// if(dosage!=null && dosage!=""){
				// noOfdoges=Integer.parseInt(dosage);
				// }
				// int total = noOfDays * frequenceValue*noOfdoges;
				// totalList.add(total);

			} else {
				noOfDaysList.add(0);
			}
			if (request.getParameter("total" + j) != null
					&& !request.getParameter("total" + j).equals("")) {
				int total = Math.round(Float.parseFloat(request
						.getParameter("total" + j)));
				totalList.add(total);
			} else {
				totalList.add(0);
			}

			String remarks = "";
			if (request.getParameter("remarks" + j) != null
					&& !request.getParameter("remarks" + j).equals("")) {
				remarks = request.getParameter("remarks" + j);
				remarksList.add(remarks);
			} else {
				remarksList.add("");
			}
		}
			// if(!pvmsNo.equals("")){
			// pvmsNoList.add(pvmsNo);
			// }
			// pvmsNoList.add(pvmsArr[i]);

			//j++;
			//n++;
		}
		
		map.put("routeList", routeList);
		map.put("frequencyList", frequencyList);
		map.put("ctList", ctList);
		map.put("dosageList", dosageList);
		map.put("itemIdList", itemIdList);
		map.put("classificationList", classificationList);
		map.put("totalList", totalList);
		map.put("noOfDaysList", noOfDaysList);
		map.put("remarksList", remarksList);
		map.put("otherMedicineList", otherMedicineList);
		// map.put("nomenclatureList", nomenclatureList);
		map.put("itemConversionList", itemConversionList);
		map.put("itemClassList", itemClassList);
		map.put("itemDispensaryList", itemDispensaryList);
		map.put("uomQtyList", uomQtyList);
		
		
		String otherTreatment = "";
		if (request.getParameter("otherTreatment") != null
				&& !request.getParameter("otherTreatment").equals("")) {
			otherTreatment = request.getParameter("otherTreatment");
			map.put("otherTreatment", otherTreatment);
		}
		String otherInvestigation = "";
		if (request.getParameter("otherInvestigation") != null
				&& !request.getParameter("otherInvestigation").equals("")) {
			otherInvestigation = request.getParameter("otherInvestigation");
			map.put("otherInvestigation", otherInvestigation);
		}
		map.put("chargeCodeIdList", chargeCodeIdList);
		map.put("investigationDate", investigationDate);
		
		
		if (request.getParameter("admissionDate") != null
				&& !request.getParameter("admissionDate").equals("")) {
			Date admissionDate = HMSUtil
					.convertStringTypeDateToDateType(request
							.getParameter("admissionDate"));
			map.put("admissionDate", admissionDate);
		}
		if (request.getParameter("admissionWard") != null
				&& !request.getParameter("admissionWard").equals("0")) {
			Integer admissionWard = Integer.parseInt(request
					.getParameter("admissionWard"));
			map.put("admissionWard", admissionWard);
		}

		if (request.getParameter("admissionAdvised") != null
				&& !request.getParameter("admissionAdvised").equals("")) {
			String admissionAdvised = request.getParameter("admissionAdvised");
			if (admissionAdvised.equalsIgnoreCase("on"))
				map.put("admissionAdvised", "y");
		} else {
			map.put("admissionAdvised", "n");
		}
		
		map.put("hospitalId", hospitalId);
		map.put("divisionId", divisionId);
		map.put("userId", userId);
		map.put("deptId", deptId);
		map.put("empId", empId);
		map.put("userName", userName);
		map.put("box", box);
		
		
		
		// referral code
		
		
		if (request.getParameter("referral") != null
				&& !request.getParameter("referral").equals("")) {
			String referVisitDate = null;
			Integer referral = Integer.parseInt(request
					.getParameter("referral"));
			map.put("referral", referral);
			if (referral == 1) {

				int referralPriority = 0;
				if (request.getParameter("priorityName") != null
						&& !request.getParameter("priorityName").equals("")) {
					referralPriority = Integer.parseInt(request
							.getParameter("priorityName"));

					map.put("referralPriority", referralPriority);
				}

				if (request.getParameter("referVisitDate") != null
						&& !request.getParameter("referVisitDate").equals("")) {
					referVisitDate = request.getParameter("referVisitDate");
					Date referralDate = HMSUtil
							.convertStringTypeDateToDateType(referVisitDate);
					map.put("referralDate", referralDate);
				}
				int referImpannelhospital=0;
				if (request.getParameter("referTo") != null
						&& !request.getParameter("referTo").equals("")) {
					String referTo = request.getParameter("referTo");
					map.put("referTo", referTo);
					if (referTo.equalsIgnoreCase("empanel")  || referTo.equalsIgnoreCase("both")) {

						if (request.getParameter("referhospital") != null
								&& !request.getParameter("referhospital")
										.equals("")) {
							referImpannelhospital = Integer.parseInt(request
									.getParameter("referhospital"));
							map.put("referImpannelhospital",
									referImpannelhospital);
						}

						if (request.getParameter("referdays") != null
								&& !request.getParameter("referdays")
										.equals("")) {
							try {
								int referdays = Integer.parseInt(request
										.getParameter("referdays"));
								Date referalTillDate = HMSUtil.addDaysToDate(
										referVisitDate, referdays);
								map.put("referdays", referdays);
								map.put("referalTillDate", referalTillDate);
							} catch (Exception e) {
								e.printStackTrace();
							}

						}

						if (request.getParameter("referral_treatment_type") != null
								&& !request.getParameter(
										"referral_treatment_type").equals("")) {
							try {
								String referral_treatment_type = request
										.getParameter("referral_treatment_type");
								map.put("referral_treatment_type",
										referral_treatment_type);
							} catch (Exception e) {
								e.printStackTrace();
							}

						}
						if (request.getParameter("referredFor") != null
								&& !request.getParameter("referredFor").equals(
										"")) {
							try {
								String referredFor = request
										.getParameter("referredFor");
								map.put("referredFor", referredFor);
							} catch (Exception e) {
								e.printStackTrace();
							}

						}

					}
				}

				if (request.getParameter("referdepartment") != null
						&& !request.getParameter("referdepartment").equals("")) {
					Integer referdDepartment = Integer.parseInt(request
							.getParameter("referdepartment"));
					map.put("referdepartment", referdDepartment);
				}

				if (request.getParameter("refereddoctor") != null
						&& !request.getParameter("refereddoctor").equals("")) {
					Integer refereddoctor = Integer.parseInt(request
							.getParameter("refereddoctor"));
					map.put("refereddoctor", refereddoctor);
				}

				if (request.getParameter("referralNote") != null
						&& !request.getParameter("referralNote").equals("")) {
					String referralNote = request.getParameter("referralNote");
					map.put("referralNote", referralNote);
				}

				if (request.getParameter("patientAdvise") != null
						&& !request.getParameter("referralNote").equals("")) {
					String patientAdvise = request
							.getParameter("patientAdvise");
					map.put("patientAdvise", patientAdvise);
				}

			}
		}
		
		
		
		
		
		map = opdHandlerService.saveEmergencyOPD(map);
		map.putAll(opdHandlerService.showPatientDirectPrescription(null));
		jsp = OPD_EMERGENCY_WAITING_LIST_JSP;
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showWaitingEmergencyPatientListJsp(HttpServletRequest request,
			HttpServletResponse response) {
		int deptId = 0;
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		@SuppressWarnings("unused")
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		mapForDS.put("hospitalId", hospitalId);
		int unitId = 0;
		int relationId = 0;
		int rankId = 0;
		String serviceNo = "";
		int docId = 0;
		/*
		 * if(request.getParameter("rankId") != null){ rankId =
		 * Integer.parseInt(request.getParameter("rankId"));
		 * mapForDS.put("rankId", rankId); }
		 */
		/*
		 * if(request.getParameter("relationId") != null){ relationId =
		 * Integer.parseInt(request.getParameter("relationId"));
		 * mapForDS.put("relationId", relationId); }
		 */
		if (request.getParameter("unitId") != null) {
			unitId = Integer.parseInt(request.getParameter("unitId"));
			mapForDS.put("unitId", unitId);
		}
		if (request.getParameter("serviceNo") != null) {
			serviceNo = request.getParameter("serviceNo");
			mapForDS.put("serviceNo", serviceNo);
		}
		if (request.getParameter(PATIENT_NAME) != null) {
			mapForDS.put(PATIENT_NAME, request.getParameter(PATIENT_NAME));
		}
		if (request.getParameter("consultingDoc") != null) {
			int empId = Integer.parseInt(request.getParameter("consultingDoc"));
			// System.out.println("empId when selecting doctor name======" +
			// empId);
			mapForDS.put("empId", empId);
		} else {

			Users user = new Users();
			if (session.getAttribute("users") != null) {
				user = (Users) session.getAttribute("users");
			}
			mapForDS.put("empId", user.getEmployee().getId());

			/*
			 * if (session.getAttribute("empId") != null) { docId =
			 * (Integer)session.getAttribute("userId"); mapForDS.put("empId",
			 * docId);
			 * 
			 * }
			 */

		}

		if (request.getParameter("deptId") != null) {
			deptId = Integer.parseInt(request.getParameter("deptId"));
			// session.setAttribute("deptId", deptId);
			mapForDS.put("deptId", deptId);
		} else {
			deptId = (Integer) session.getAttribute("deptId");
			mapForDS.put("deptId", deptId);
		}
		String title = request.getParameter("title");
		map = opdHandlerService.getWaitingEmergencyPatientList(mapForDS);
		List patientList = (List) map.get("patientList");
		map.put("patientList", patientList);
		jsp = "emergencyWaitingList";
		jsp += ".jsp";
		title = "Waiting Patient List";
		map.put("deptId", deptId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);

	}

	
	public ModelAndView showEmergencyRecallJsp(HttpServletRequest request,
			HttpServletResponse response) {
		int deptId = 0;
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		@SuppressWarnings("unused")
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		mapForDS.put("hospitalId", hospitalId);
		int unitId = 0;
		int relationId = 0;
		int rankId = 0;
		String serviceNo = "";
		int docId = 0;
		int visitId =0;
		/*
		 * if(request.getParameter("rankId") != null){ rankId =
		 * Integer.parseInt(request.getParameter("rankId"));
		 * mapForDS.put("rankId", rankId); }
		 */
		/*
		 * if(request.getParameter("relationId") != null){ relationId =
		 * Integer.parseInt(request.getParameter("relationId"));
		 * mapForDS.put("relationId", relationId); }
		 */
		if (request.getParameter("visitId") != null) {
			visitId = Integer.parseInt(request.getParameter("visitId"));
			mapForDS.put("visitId", visitId);
		}
		if (request.getParameter("serviceNo") != null) {
			serviceNo = request.getParameter("serviceNo");
			mapForDS.put("serviceNo", serviceNo);
		}
		if (request.getParameter(PATIENT_NAME) != null) {
			mapForDS.put(PATIENT_NAME, request.getParameter(PATIENT_NAME));
		}
		if (request.getParameter("consultingDoc") != null) {
			int empId = Integer.parseInt(request.getParameter("consultingDoc"));
			// System.out.println("empId when selecting doctor name======" +
			// empId);
			mapForDS.put("empId", empId);
		} else {

			Users user = new Users();
			if (session.getAttribute("users") != null) {
				user = (Users) session.getAttribute("users");
			}
			
			mapForDS.put("empId", user.getEmployee().getId());

			/*
			 * if (session.getAttribute("empId") != null) { docId =
			 * (Integer)session.getAttribute("userId"); mapForDS.put("empId",
			 * docId);
			 * 
			 * }
			 */

		}

		if (request.getParameter("deptId") != null) {
			deptId = Integer.parseInt(request.getParameter("deptId"));
			// session.setAttribute("deptId", deptId);
			mapForDS.put("deptId", deptId);
		} else {
			deptId = (Integer) session.getAttribute("deptId");
			mapForDS.put("deptId", deptId);
		}
		String title = request.getParameter("title");
		map = opdHandlerService.getEmergencyRecall(mapForDS);
		List patientList = (List) map.get("patientList");
		map.put("patientList", patientList);
		jsp = "emergencyRecallJsp";
		jsp += ".jsp";
		title = "Waiting Patient List";
		map.put("deptId", deptId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);

	}
	
	
	public ModelAndView showPendingPrescriptionAdminJsp(HttpServletRequest request,
			HttpServletResponse response) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		int devisionId = 0;
		String deptName = "";
		String facStatus = "";
		String employeeNo = "";
		String byAdmin = "";
		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		/*
		 * if (session.getAttribute("deptId") != null) deptId =
		 * Integer.parseInt("" + session.getAttribute("deptId"));
		 */
		if (session.getAttribute("deptName") != null)
			deptName = (String) session.getAttribute("deptName");
		// if (session.getAttribute("devisionId") != null)
		// devisionId = Integer.parseInt("" +
		// session.getAttribute("devisionId"));
		if (request.getParameter("facStatus") != null)
			facStatus = (String) request.getParameter("facStatus");
		if (request.getParameter("employeeNo") != null)
			employeeNo = (String) request.getParameter("employeeNo");
		if (request.getParameter("byAdmin") != null)
			byAdmin = (String) request.getParameter("byAdmin");
		if (request.getParameter("divisionId") != null)
			devisionId = Integer.parseInt(""
					+ request.getParameter("divisionId"));
		Date currentDate = new Date();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		// Map<String, Object> dataMap = new HashMap<String, Object>();
		// Map<String, Object> patientMap = new HashMap<String, Object>();
		Map<String, Object> mapForDs = new HashMap<String, Object>();
		mapForDs.put("deptId", deptId);
		mapForDs.put("currentDate", currentDate);
		mapForDs.put("hospitalId", hospitalId);
		mapForDs.put("facStatus", facStatus);
		mapForDs.put("devisionId", devisionId);
		mapForDs.put("employeeNo", employeeNo);
		mapForDs.put("byAdmin", byAdmin);
		// detailsMap = opdHandlerService.getPrescriptionList(mapForDs);
		detailsMap = opdHandlerService.getPrescriptionDetails(mapForDs);
		// dataMap.put("deptId", deptId);
		// dataMap.put("hospitalId", hospitalId);
		// dataMap.put("userName", userName);
		// dataMap.put("deptName", deptName);
		/*
		 * String jsp = PENDING_PATIENT_PRESCRIPTION; jsp += ".jsp";
		 */
		String issuedJspFlag= detailsMap.get("issuedJspFlag").toString();
        if(issuedJspFlag.equals("true"))
        {
        	jsp = "issuedPatientPrescriptionAdmin.jsp";
        }
        else
        {
        	jsp = "pendingPatientPrescriptionAdmin.jsp";
        } 
		

		

		map.put("deptId", deptId);
		map.put("hospitalId", hospitalId);
		map.put("userName", userName);
		map.put("deptName", deptName);
		map.put("detailsMap", detailsMap);
		// map.put("patientMap", patientMap);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}
	


	public ModelAndView showOphthalmologyWaitingList(HttpServletRequest request,
			HttpServletResponse response) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		//int devisionId = 0;
		String deptName = "";
		String patientName = "";
		String serviceNo = "";
		String byAdmin = "";
		session = request.getSession();
		Map<String, Object> mapForDs = new HashMap<String, Object>();
/*		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");*/
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
	
		if (session.getAttribute("deptName") != null)
			deptName = (String) session.getAttribute("deptName");
		
		if (request.getParameter(PATIENT_NAME) != null && !request.getParameter(PATIENT_NAME).isEmpty())
		{
			patientName = (String) request.getParameter(PATIENT_NAME);
			mapForDs.put(PATIENT_NAME, patientName);
		}
		if (request.getParameter(SERVICE_NO) != null && !request.getParameter(SERVICE_NO).isEmpty()){
			serviceNo = (String) request.getParameter(SERVICE_NO);
			mapForDs.put(SERVICE_NO, serviceNo);
		}
		
	/*	if (request.getParameter("facStatus") != null)
			facStatus = (String) request.getParameter("facStatus");
		if (request.getParameter("employeeNo") != null)
			employeeNo = (String) request.getParameter("employeeNo");
		if (request.getParameter("byAdmin") != null)
			byAdmin = (String) request.getParameter("byAdmin");
		if (request.getParameter("divisionId") != null)
			devisionId = Integer.parseInt(""
					+ request.getParameter("divisionId"));*/
		//Date currentDate = new Date();
		//Map<String, Object> detailsMap = new HashMap<String, Object>();
		// Map<String, Object> dataMap = new HashMap<String, Object>();
		// Map<String, Object> patientMap = new HashMap<String, Object>();
		
		//mapForDs.put("deptId", deptId);
		//mapForDs.put("currentDate", currentDate);
		mapForDs.put("hospitalId", hospitalId);

		
	//	mapForDs.put("facStatus", facStatus);
	//	mapForDs.put("devisionId", devisionId);
	//	mapForDs.put("employeeNo", employeeNo);
	//	mapForDs.put("byAdmin", byAdmin);
		// detailsMap = opdHandlerService.getPrescriptionList(mapForDs);
	
		map = opdHandlerService.getOphthalmolgoyWaitngList(mapForDs);
		// dataMap.put("deptId", deptId);
		// dataMap.put("hospitalId", hospitalId);
		// dataMap.put("userName", userName);
		// dataMap.put("deptName", deptName);
		/*
		 * String jsp = PENDING_PATIENT_PRESCRIPTION; jsp += ".jsp";
		 */

		jsp = "ophthalmologyWaitingList.jsp";

		map.put("deptId", deptId);
		map.put("hospitalId", hospitalId);
		//map.put("userName", userName);
		map.put("deptName", deptName);

		// map.put("patientMap", patientMap);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}	
	
	public ModelAndView showOphthalmolgyScreen(HttpServletRequest request,
			HttpServletResponse response) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		int visitId = 0;
		int devisionId = 0;
		String deptName = "";
		String facStatus = "";
		String employeeNo = "";
		String byAdmin = "";
		session = request.getSession();
/*		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");*/
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		
		if (request.getParameter("visitId") != null)
			visitId = Integer.parseInt(request.getParameter("visitId"));
			
		if (session.getAttribute("deptName") != null)
			deptName = (String) session.getAttribute("deptName");

		Map<String, Object> mapForDs = new HashMap<String, Object>();
	
		mapForDs.put("hospitalId", hospitalId);
		mapForDs.put("visitId", visitId);

		map = opdHandlerService.showOphthalParameters(mapForDs);
		

		jsp = "viewOpthalmologyDetails.jsp";

		map.put("deptId", deptId);
		map.put("hospitalId", hospitalId);
		//map.put("userName", userName);
		map.put("deptName", deptName);

		// map.put("patientMap", patientMap);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}
	public ModelAndView submitOphthalmolgyDetails(HttpServletRequest request,
			HttpServletResponse response) {
	
		int hospitalId = 0;
		int visitId = 0;
	
		session = request.getSession();
		Box box = HMSUtil.getBox(request);

		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
	
		if(box.get("visitId")!=null)
			visitId = box.getInt("visitId");
		Map<String, Object> mapForDs = new HashMap<String, Object>();
	
		mapForDs.put("hospitalId", hospitalId);
		mapForDs.put("box", box);
		map = opdHandlerService.submitOphthalParameters(mapForDs);
		
		boolean result =false;
		
		if (map.get("succesfullyAdded") != null) {
			result = (Boolean) map.get("succesfullyAdded");
		}
		if(result)
		message = "Eye Prescription Details have been saved.";
		else
			message = "could not saved.";

		map.put("visitId", visitId);
		jsp = "opd_msgForOpthalSubmission.jsp";
		map.put("message", message);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings("unchecked")
	public void checkForContradiction(HttpServletRequest request,
			HttpServletResponse response) {

		int deptId = 0;
		int hospitalId = 0;
		String userName = "";
		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		Map<String, Object> dataMap = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		String pvmsNo = "";
		String itemIdArray="";

		try {
			if (request.getParameter("pvms") != null) {
				pvmsNo = request.getParameter("pvms");
			}
			if (request.getParameter("itemIdArray") != null) {
				itemIdArray = request.getParameter("itemIdArray");
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		dataMap.put("deptId", deptId);
		dataMap.put("pvmsNo", pvmsNo);
		dataMap.put("itemIdArray", itemIdArray);
		dataMap.put("hospitalId", hospitalId);
		map = opdHandlerService.getContradictedItemList(dataMap);
		String returnString=null;
		if (map.get("returnString") != null) {
			returnString = (String) map.get("returnString");
		}
		StringBuffer sb = new StringBuffer();
		sb.append("<item>");
		//sb.append("<found>" + returnString+ "</found>");
		sb.append("<returnString>" + returnString+ "</returnString>");
		sb.append("</item>");
		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");

		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public ModelAndView getFACWaitingList(HttpServletRequest request,
			HttpServletResponse response) {
	
		int hospitalId = 0;
		int visitId = 0;
		int empId=0;
	
		session = request.getSession();
		Box box = HMSUtil.getBox(request);

		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
	
		if(box.get("visitId")!=null)
			visitId = box.getInt("visitId");
		Map<String, Object> mapForDs = new HashMap<String, Object>();
	
		mapForDs.put("hospitalId", hospitalId);
		mapForDs.put("box", box);
		
		if(session.getAttribute("divisionId") != null)
		{
			mapForDs.put("divisionId", session.getAttribute("divisionId"));
		}
		
		if(session.getAttribute("empId") != null)
		{
			mapForDs.put("empId", session.getAttribute("empId"));
		}
		
		if(session.getAttribute("userName") != null)
		{
			mapForDs.put("userName", session.getAttribute("userName"));
		}
		
		if(request.getParameter("employeeNo") != null)
		{
			mapForDs.put("employeeNo", request.getParameter("employeeNo"));
		}
		
		
		
		map = opdHandlerService.getFACWaitingList(mapForDs);
		
	
		jsp = "facWaitingList.jsp";
		map.put("message", message);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	
	public ModelAndView getUpdateFACScreenJSP(HttpServletRequest request,
			HttpServletResponse response) {
	
		int hospitalId = 0;
		int visitId = 0;
	
		session = request.getSession();
		Box box = HMSUtil.getBox(request);

		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
	
		if(box.get("visitId")!=null)
			visitId = box.getInt("visitId");
		Map<String, Object> mapForDs = new HashMap<String, Object>();
	
		mapForDs.put("hospitalId", hospitalId);
		mapForDs.put("visitId", visitId);
		map = opdHandlerService.getFacUpdateScreen(mapForDs);
		
	
		jsp = "facUpdateScreen.jsp";
		map.put("message", message);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView submitFAC(HttpServletRequest request,
			HttpServletResponse response) {
	
		int hospitalId = 0;
		int visitId = 0;
	
		session = request.getSession();
		Box box = HMSUtil.getBox(request);

		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
	
		if(box.get("visitId")!=null)
			visitId = box.getInt("visitId");
		Map<String, Object> mapForDs = new HashMap<String, Object>();
	
		
		
		List<Integer> itemIdList = new ArrayList<Integer>();
		int hdb = 1;
		if (Integer.parseInt(request.getParameter("hdb")) != 1) {
			hdb = Integer.parseInt(request.getParameter("hdb"));
		}

		List<String> pvmsNoList = new ArrayList<String>();
		List<Integer> frequencyList = new ArrayList<Integer>();
		List<String> dosageList = new ArrayList<String>();
		List<String> remarksList = new ArrayList<String>();
		List<String> typeLeftRightList = new ArrayList<String>();
		List<String> instructionList = new ArrayList<String>();
		List<Integer> totalList = new ArrayList<Integer>();
		List<Integer> noOfDaysList = new ArrayList<Integer>();
		List<String> routeList = new ArrayList<String>();
		List<Integer> itemConversionList = new ArrayList<Integer>();
		List<Integer> prescriptionIdList = new ArrayList<Integer>();
		List<String> injflagList = new ArrayList<String>();
		int j = 1;
		for (int i = 0; i < hdb; i++) {
			String pvmsNo = "";
			int itemId = 0;
			/*
			 * if (request.getParameter("nomenclature" + j) != null &&
			 * !request.getParameter("nomenclature" + j).equals("")) {
			 * 
			 * String nomenclature = request.getParameter("nomenclature" + j);
			 * StringTokenizer strToken = new StringTokenizer(c, "["); String
			 * nomen= strToken.nextToken(); String nomen =
			 * request.getParameter("nomenclature" + j).substring(0,
			 * request.getParameter("nomenclature" + j).indexOf("["));
			 * nomenclatureList.add(nomen); //int index1 =
			 * nomenclature.lastIndexOf("["); //int index2 =
			 * nomenclature.lastIndexOf("]");
			 * //System.out.println("index1=="+index1);
			 * //System.out.println("index2=="+index2); //index1++; //pvmsNo =
			 * nomenclature.substring(index1, index2); int index1 =
			 * nomenclature.lastIndexOf("("); int index2 =
			 * nomenclature.lastIndexOf(")");
			 * //System.out.println("index1=="+index1); //
			 * System.out.println("index2=="+index2); index1++; itemId
			 * =Integer.parseInt(nomenclature.substring(index1, index2)); if
			 * (itemId != 0) { itemIdList.add(itemId); }
			 * otherMedicineList.add(""); } else
			 * if(request.getParameter("otherMedicine"+ j) != null &&
			 * !request.getParameter("otherMedicine"+ j).equals("")){
			 * otherMedicine = request.getParameter("otherMedicine"+ j);
			 * otherMedicineList.add(otherMedicine);
			 * 
			 * } else itemIdList.add(0);
			 */
			if (request.getParameter("itemId" + j) != null
					&& !request.getParameter("nomenclature" + j).equals("")) {
				itemId = Integer.parseInt(request.getParameter("itemId" + j));
				if (itemId != 0) {
					itemIdList.add(itemId);
				}

			

			} 
			
			if((request.getParameter("itemId" + j) != null && !request.getParameter("nomenclature" + j).equals("")) || (request.getParameter("otherMedicine" + j) != null && !request.getParameter("otherMedicine" + j).equals("")) )
			{
			int itemConversionId = 0;
			if (request.getParameter("itemConversionId" + j) != null
					&& !request.getParameter("itemConversionId" + j).equals("")) {
				itemConversionId = Integer.parseInt(request
						.getParameter("itemConversionId" + j));
				itemConversionList.add(itemConversionId);
			}

		

			int itemPescriptionId = 0;
			if (request.getParameter("prescriptionId" + j) != null
					&& !request.getParameter("prescriptionId" + j).equals("")) {
				itemPescriptionId = Integer.parseInt(request
						.getParameter("prescriptionId" + j));
				prescriptionIdList.add(itemPescriptionId);
			} else {
				prescriptionIdList.add(0);
			}

			if (request.getParameter("injFlag" + j) != null) {
				injflagList.add(request.getParameter("injFlag" + j));
			} else {
				injflagList.add("");
			}
	

			int frequencyId = 0;
			if (request.getParameter("frequency" + j) != null
					&& !request.getParameter("frequency" + j).equals("")) {
				frequencyId = Integer.parseInt(request.getParameter("frequency"
						+ j));
				frequencyList.add(frequencyId);
			} else {
				frequencyList.add(0);
			}
		
			String route = "";
			if (request.getParameter("route" + j) != null
					&& !request.getParameter("route" + j).equals("")) {
				route = request.getParameter("route" + j);
				routeList.add(route);
			} else {
				routeList.add("");
			}

			BigDecimal frequenceValue = new BigDecimal("0");
			if (request.getParameter("frequencyValue" + j) != null
					&& !request.getParameter("frequencyValue" + j).equals("")) {
				frequenceValue = new BigDecimal(
						request.getParameter("frequencyValue" + j));
			}

			String dosage = "";
			if (request.getParameter("dosage" + j) != null
					&& !request.getParameter("dosage" + j).equals("")) {
				dosage = request.getParameter("dosage" + j);
				dosageList.add(dosage);
			} else {
				dosageList.add("");
			}
			if (request.getParameter("noOfDays" + j) != null
					&& !request.getParameter("noOfDays" + j).equals("")) {
				int noOfDays = Integer.parseInt(request.getParameter("noOfDays"
						+ j));
				noOfDaysList.add(noOfDays);
				// int noOfdoges=1;
				// if(dosage!=null && dosage!=""){
				// noOfdoges=Integer.parseInt(dosage);
				// }
				// int total = noOfDays * frequenceValue*noOfdoges;
				// totalList.add(total);

			} else {
				noOfDaysList.add(0);
			}
			if (request.getParameter("total" + j) != null
					&& !request.getParameter("total" + j).equals("")) {
				// System.out.println("heretotalnnnn");
				int total = Math.round(Float.parseFloat(request
						.getParameter("total" + j)));
				totalList.add(total);
			} else {
				// System.out.println("heretotalnnnn111111");
				totalList.add(0);
			}

			String remarks = "";
			if (request.getParameter("remarks" + j) != null
					&& !request.getParameter("remarks" + j).equals("")) {
				remarks = request.getParameter("remarks" + j);
				remarksList.add(remarks);
			} else {
				remarksList.add("");
			}
			}
			// if(!pvmsNo.equals("")){
			// pvmsNoList.add(pvmsNo);
			// }
			// pvmsNoList.add(pvmsArr[i]);

			j++;
		}
		
		
		//Investigation
		List<String> chargeCodeIdList = new ArrayList<String>();
		List<Integer> dgorderDtList = new ArrayList<Integer>();
		int hiddenValue = 1;
		if (Integer.parseInt(request.getParameter("hiddenValue")) != 1) {
			hiddenValue = Integer.parseInt(request.getParameter("hiddenValue"));
		}
		int temp = 1;
		String[] chargeCodeIdArr = new String[hiddenValue];
		for (int i = 0; i < hiddenValue; i++) {
			if (request.getParameter("chargeCodeName" + temp) != null
					&& !request.getParameter("chargeCodeName" + temp)
							.equals("")) {

				String chargeCodeNameWithId = request
						.getParameter("chargeCodeName" + temp);
				int index1 = chargeCodeNameWithId.lastIndexOf("[");
				int index2 = chargeCodeNameWithId.lastIndexOf("]");
				index1++;
				String chargeCodeId = chargeCodeNameWithId.substring(index1,
						index2);
				if (!chargeCodeId.equals("")) {
					chargeCodeIdArr[i] = chargeCodeId;

					int qty = 1;
					// int
					// qty=Integer.parseInt(request.getParameter("qty"+temp));
					// String clinicalNotes =
					// request.getParameter("clinicalNotes" + temp);
					chargeCodeIdList.add(chargeCodeIdArr[i]);
					// quantityList.add(qty);
					// clinicalList.add(clinicalNotes);
					// dgorderDtList.
					if (request.getParameter("dgOrderDtId" + temp) != null
							&& !request.getParameter("dgOrderDtId" + temp)
									.equals("")) {
						int orderDtId = Integer.parseInt(request
								.getParameter("dgOrderDtId" + temp));
						dgorderDtList.add(orderDtId);
					} else {
						dgorderDtList.add(0);
					}
				}
			}
			temp++;
		}
		
		mapForDs.put("chargeCodeIdList", chargeCodeIdList);
		mapForDs.put("dgorderDtList", dgorderDtList);

		
		
		mapForDs.put("itemIdList", itemIdList);
		mapForDs.put("frequencyList", frequencyList);
		mapForDs.put("dosageList", dosageList);
		mapForDs.put("typeLeftRightList", typeLeftRightList);
		mapForDs.put("instructionList", instructionList);
		mapForDs.put("routeList", routeList);
		mapForDs.put("prescriptionIdList", prescriptionIdList);
		mapForDs.put("injflagList", injflagList);
		mapForDs.put("totalList", totalList);
		mapForDs.put("noOfDaysList", noOfDaysList);
		mapForDs.put("remarksList", remarksList);
	
		mapForDs.put("hospitalId", hospitalId);
		mapForDs.put("box", box);
		
		
		if(session.getAttribute("empId")!=null);
		mapForDs.put("empId", (Integer)session.getAttribute("empId"));
		
	    if(session.getAttribute("users")!=null)
		mapForDs.put("user", (Users) session.getAttribute("users"));
	    
	    if(session.getAttribute("deptId")!=null)
			mapForDs.put("deptId", (Integer) session.getAttribute("deptId"));
		
	    
		map = opdHandlerService.updateFAC(mapForDs);
		
		if(map.get("saved")!=null && ((Boolean)map.get("saved")))
			message = "Information updated Successfully.";
		else 
			message = "Error Occured!!";
		
	//	map = opdHandlerService.getFACWaitingList(mapForDs);
		
	
		jsp = "message_1.jsp";
		map.put("message", message);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	
	public ModelAndView showCIMSPopUp(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();
		String genericname = "";
		String autoHint = "";

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			if (request.getParameter("genericname") != null) {
				genericname = (request.getParameter("genericname"));
			}

			if (genericname != "") {
				map.put("autoHint", genericname);
				map = opdHandlerService.showTreatment(map);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		if (request.getParameter("flag") != null
				&& request.getParameter("flag").equals("opd")) {
			jsp = "cimsPopup";
		} else {
			map.put("contentJsp", "treatmentJsp.jsp");
			jsp = "index";
		}

		return new ModelAndView(jsp, "map", map);

	}
	
	
	public ModelAndView autoCompleteForCIMS(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();
		String itemNameField = "";
		String autoHint = "";

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			map.put("autoHint", autoHint);
			map = opdHandlerService.showCIMSPopUp(map);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "cimsResponseJsp";
		return new ModelAndView(jsp, "map", map);

	}
	
	public ModelAndView showCIMSItemDetails(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();
		int cimsId = 0;
		

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			if (request.getParameter("cimsId") != null && !request.getParameter("cimsId").isEmpty()) {
				cimsId=  Integer.parseInt(request.getParameter("cimsId"));
			}
			map.put("cimsId", cimsId);
			map = opdHandlerService.getCIMSDetails(map);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "cimsDetailsResponseJsp";
		return new ModelAndView(jsp, "map", map);

	}
	

	@SuppressWarnings("unused")
	public ModelAndView getNipItemListForAutoCompleteItem(
			HttpServletRequest request, HttpServletResponse response) {

		HttpSession session = request.getSession();
		String itemNameField = "";
		int deptId = 0;
		String autoHint = "";
		Map<String, Object> map = new HashMap<String, Object>();

		try {
			int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			if (session.getAttribute("deptId") != null) {
				deptId = (Integer) session.getAttribute("deptId");
			}

			map.put("deptId", deptId);
			map.put("userName", userName);
			map.put("autoHint", autoHint);
			map.put("hospitalId", hospitalId);
			map = opdHandlerService.getNipItemListForAutoComplete(map);
		} catch (Exception e) {
			e.printStackTrace();
		}
		if (request.getParameter("flag") != null
				&& request.getParameter("flag") != "") {
			jsp = "opd_responseInGridForDrugIssueReport";
		} else {
			jsp = "opd_responseInGrid";
		}

		return new ModelAndView(jsp, "map", map);
	}
	public ModelAndView viewAllPrevoiusSurgery(HttpServletRequest request,
			HttpServletResponse response) {
		List<DgOrderhd> orderNoList = new ArrayList<DgOrderhd>();
		Map<String, Object> mapForDs = new HashMap<String, Object>();
		Map<String, Object> orderDetailMap = new HashMap<String, Object>();

		if (request.getSession(false) == null) {
			return new ModelAndView("login");
		}
		String allSurgeryType=null; 
		HttpSession session = request.getSession();
		String deptName = "";
		String jsp = "";
		int deptId = 0;
		int hinId =0;
		if (session.getAttribute("deptName") != null) {
			deptName = (String) session.getAttribute("deptName");
		}

		int inPatientId = 0;

		if (request.getParameter("hinId") != null) {
			 hinId = Integer.parseInt(request.getParameter("hinId"));
		}
	
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}
		
		if (request.getParameter("allSurgeryType") != null) {
			allSurgeryType = (request.getParameter("allSurgeryType"));
		}
	
		mapForDs.put("hinId", hinId);
		mapForDs.put("deptId", deptId);
		mapForDs.put("allSurgeryType", allSurgeryType);
		
		map = opdHandlerService.getPreviousSurgery(mapForDs);
		map.put("allSurgeryType", allSurgeryType);
		jsp = "previousSurgery";
		map.put("deptName", deptName);
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView showUpdateOpdTempate(
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		int deptId =0;
		int docId =0;
		int hospitalId =0;
		String templateType = null;
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}
		if (session.getAttribute("empId") != null) {
			docId = (Integer) session.getAttribute("empId");
		}
		
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId  = (Integer) session.getAttribute(HOSPITAL_ID);
		}
		if (request.getParameter("templateType") != null) {
			templateType  = request.getParameter("templateType");
		}
		
		mapForDS.put("docId",docId);
		mapForDS.put("deptId",deptId);
		mapForDS.put("hospitalId", hospitalId);
		mapForDS.put("templateType", templateType);
		map = opdHandlerService.getPrescriptionTemplateList(mapForDS);
		map.put("templateType", templateType);
		if(templateType!=null && templateType.equals("P"))
			jsp = "updateTreatmentTemplate";
			else if(templateType!=null && templateType.equals("I"))
				jsp = "updateInvestigationTemplate";
		return new ModelAndView(jsp, "map", map);
	}
	
	public ModelAndView showTreatmentListByTemplate(
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		int deptId =0;
		int docId =0;
		int hospitalId =0;
		int templateId = 0;
		String templateType = null;
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}
		if (request.getParameter("templateType") != null) {
			templateType  = request.getParameter("templateType");
		}
		if (session.getAttribute("empId") != null) {
			docId = (Integer) session.getAttribute("empId");
		}
		
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId  = (Integer) session.getAttribute(HOSPITAL_ID);
		}
		if (request.getParameter("templateId") != null) {
			templateId  = Integer.parseInt(request.getParameter("templateId"));
		}
		mapForDS.put("docId",docId);
		mapForDS.put("deptId",deptId);
		mapForDS.put("hospitalId", hospitalId);
		mapForDS.put("templateId", templateId);
		mapForDS.put("templateType", templateType);
	
		map = opdHandlerService.getTreatmentListByTemplateId(mapForDS);
		map.put("templateType", templateType);
		if(templateType!=null && templateType.equals("P"))
		jsp = "opd_responseForTemplateId";
		else if(templateType!=null && templateType.equals("I"))
			jsp = "opd_responseForInvestigationTemplate";
		
		return new ModelAndView(jsp, "map", map);
	}
	
	public ModelAndView updatePrescriptionTemplate(HttpServletRequest request,
			HttpServletResponse response) {
		int hdb = 1;
		HttpSession session = request.getSession();
		List pvmsNoList = new ArrayList();
		List frequencyList = new ArrayList();
		List dosageList = new ArrayList();
		List totalList = new ArrayList();
		List typeLeftRightList = new ArrayList();
		List noOfDaysList = new ArrayList();
		List<Integer> opdTemplateTreatmentIdList = new ArrayList<Integer>();
		List<Integer> itemIdList = new ArrayList<Integer>();
		
	/*	List<Integer> instuctionList = new ArrayList<Integer>();*/
		List<String> instuctionList = new ArrayList<String>();
		String changedBy = "";
		String pojoPropertyCode = "";
		String templateName = "";
		Map<String, Object> map = new HashMap<String, Object>();
		//OpdTemplate opdTemplate = new OpdTemplate();

		Map<String, Object> listMap = new HashMap<String, Object>();
		Map<String, Object> generalMap = new HashMap<String, Object>();
		Date currentDate = new Date();
		String currentTime = "";

		int docId = 0;
		int templateId = 0;
		if (session.getAttribute("empId") != null) {
			docId = (Integer) session.getAttribute("empId");

		}
		if (request.getParameter("templateId") != null) {
			templateId = Integer.parseInt(request.getParameter("templateId"));
		}
		String templateType = null;
		if (request.getParameter("templateType") != null) {
			templateType  = request.getParameter("templateType");
		}
		try {
			if (request.getParameter(CODE) != null) {
				pojoPropertyCode = request.getParameter(CODE);
				

			}
			if (request.getParameter(SEARCH_NAME) != null) {
				templateName = request.getParameter(SEARCH_NAME);
			}
			int departmentId = (Integer) session.getAttribute("deptId");

			// //System.out.println("hdb value"+request.getParameter("hdb"));

			hdb = Integer.parseInt(request.getParameter("hdb"));
			 templateId = Integer.parseInt(request
					.getParameter("templateId"));
			String[] pvmsArr = new String[hdb];
			int j = 1;
			int total = 0;
			int opdTemplateTreatmentId=0;
			int itemId= 0;
			for (int i = 0; i < hdb; i++) {

				if (request.getParameter("nomenclature" + j) != null
						&& !request.getParameter("nomenclature" + j).isEmpty() && request.getParameter("itemId" + j)!=null && !request.getParameter("itemId" + j).isEmpty()) {

					String nomenclature = request.getParameter("nomenclature"
							+ j);

					if(request.getParameter("templateTreatmentId" + j)!=null){
					 opdTemplateTreatmentId = Integer.parseInt(request
							.getParameter("templateTreatmentId" + j));}
					 else
						 opdTemplateTreatmentId=0;
					
					
					if(request.getParameter("itemId" + j)!=null){
						 itemId = Integer.parseInt(request
								.getParameter("itemId" + j));}
						
					int frequencyId = Integer.parseInt(request
							.getParameter("frequency" + j));
				/*	int instructionId = Integer.parseInt(request
							.getParameter("instruction" + j));
					 total = Integer.parseInt(request.getParameter("total"
					+ j));*/
					String instruction = request.getParameter("instruction" + j);
							
					 total = Integer.parseInt(request.getParameter("total"
					+ j));
					String typeLeftRight = request.getParameter("typeLeftRight"
							+ j);
					int noOfDays = Integer.parseInt(request
							.getParameter("noOfDays" + j));
					String dosage = request.getParameter("dosage" + j);

					instuctionList.add(instruction);
				/*	int firstIndex = nomenclature.indexOf("[");
					int lastIndex = nomenclature.indexOf("]");
					String pvmsNo = nomenclature.substring(firstIndex + 1,
							lastIndex);*/
					// System.out.println("pvmsno------------->" + pvmsNo);
					// System.out.println("instruction id -->" + instructionId);

					//pvmsNoList.add(pvmsNo);
					frequencyList.add(frequencyId);
					dosageList.add(dosage);
					totalList.add(total);
					typeLeftRightList.add(typeLeftRight);
					noOfDaysList.add(noOfDays);
					opdTemplateTreatmentIdList.add(opdTemplateTreatmentId);
					itemIdList.add(itemId);
				}
				j++;
			}
			if (request.getParameter(CHANGED_BY) != null
					&& !(request.getParameter(CHANGED_BY).equals(""))) {
				changedBy = request.getParameter(CHANGED_BY);
			}
			if (request.getParameter(CHANGED_DATE) != null
					&& !(request.getParameter(CHANGED_DATE).equals(""))) {
				currentDate = HMSUtil.dateFormatterDDMMYYYY(request
						.getParameter(CHANGED_DATE));
			}
			if (request.getParameter(CHANGED_TIME) != null
					&& !(request.getParameter(CHANGED_TIME).equals(""))) {
				currentTime = request.getParameter(CHANGED_TIME);
			}
			if (request.getParameter("title") != null) {
				title = request.getParameter("title");
			}

			boolean successfullyAdded = false;

			map.put("instuctionList", instuctionList);
			map.put("pvmsNoList", pvmsNoList);
			map.put("frequencyList", frequencyList);
			map.put("dosageList", dosageList);
			map.put("totalList", totalList);
			map.put("typeLeftRightList", typeLeftRightList);
			map.put("noOfDaysList", noOfDaysList);
			map.put("templateId", templateId);
			map.put("opdTemplateTreatmentIdList", opdTemplateTreatmentIdList);
			map.put("itemIdList", itemIdList);
			
			
			// map.put("", value)
			
			map.put("deptId", departmentId);

			map.put("templateName", templateName);
			map.put("changedBy", changedBy);
			map.put("currentDate", currentDate);
			map.put("currentTime", currentTime);
			map.put("pojoPropertyCode", pojoPropertyCode);
		

			int hospitalId = (Integer) session.getAttribute("hospitalId");

		
			map.put("hospitalId", hospitalId);
			map.put("docId", docId);
			map.put("templateType", templateType);
			
			successfullyAdded = opdHandlerService.submitUpdatedTemplate(map);

			if (successfullyAdded) {
				message = "Record Added Successfully !!";
			} else {
				message = "Record Already Exist Try Again !!";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}


		
		map = opdHandlerService.getPrescriptionTemplateList(map);
		map.put("templateType", templateType);
		//jsp = "updateTreatmentTemplate";
		title = "Update OPD Template";
		jsp += ".jsp";

		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		return new ModelAndView("updateTreatmentTemplate", "map", map);
	}
	public ModelAndView deleteTemplate(HttpServletRequest request,
			HttpServletResponse response) {
		int hdb = 1;
		HttpSession session = request.getSession();
		List pvmsNoList = new ArrayList();
		List frequencyList = new ArrayList();
		List dosageList = new ArrayList();
		List totalList = new ArrayList();
		List typeLeftRightList = new ArrayList();
		List noOfDaysList = new ArrayList();
		List<Integer> opdTemplateTreatmentIdList = new ArrayList<Integer>();
		List<Integer> itemIdList = new ArrayList<Integer>();
		
	/*	List<Integer> instuctionList = new ArrayList<Integer>();*/
		List<String> instuctionList = new ArrayList<String>();
		String changedBy = "";
		String pojoPropertyCode = "";
		String templateName = "";
		Map<String, Object> map = new HashMap<String, Object>();
		//OpdTemplate opdTemplate = new OpdTemplate();

		Map<String, Object> listMap = new HashMap<String, Object>();
		Map<String, Object> generalMap = new HashMap<String, Object>();
		Date currentDate = new Date();
		String currentTime = "";

		int docId = 0;
		int templateId = 0;
		
		String templateType = null;
		if (request.getParameter("templateType") != null) {
			templateType  = request.getParameter("templateType");
		}

		try {

			
			if (session.getAttribute("empId") != null) {
				docId = (Integer) session.getAttribute("empId");
			}
			
			int departmentId = (Integer) session.getAttribute("deptId");
			
			if (request.getParameter("templateId") != null) {
				templateId = Integer.parseInt(request.getParameter("templateId"));
			}
		
			int hospitalId = (Integer) session.getAttribute("hospitalId");
			map.put("hospitalId", hospitalId);
			map.put("templateId", templateId);
			map.put("templateType", templateType);
			map.put("docId", docId);
			map.put("deptId", departmentId);
			
			boolean successfullyAdded = false;
			successfullyAdded = opdHandlerService.deleteOpdTemplate(map);

			if (successfullyAdded) {
				message = "Template deleted Successfully !!";
			} else {
				message = "could not deleted!!";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}


		
		map = opdHandlerService.getPrescriptionTemplateList(map);
		map.put("templateType", templateType);
		//jsp = "updateTreatmentTemplate";
		title = "Update OPD Template";
		jsp += ".jsp";

		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		
		if(templateType!=null && templateType.equals("P"))
		{
			jsp="updateTreatmentTemplate";
		
		}
		else if(templateType!=null && templateType.equals("I"))
		{
			
		jsp="updateInvestigationTemplate";
		}
		return new ModelAndView(jsp, "map", map);
	
	}

	public ModelAndView showOpdPreviousVisitJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = "previousVisitReport" + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}
	public ModelAndView showOpdPreviousSurgeryReportJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = "previousSurgeryReportJsp" + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}
	
	//commented by Babita Dangwal bcz referred list has been marged with normal opd
	
	/*public ModelAndView showReferredPatientWaitingListJsp(HttpServletRequest request,
			HttpServletResponse response) {
		int deptId = 0;
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		@SuppressWarnings("unused")
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		mapForDS.put("hospitalId", hospitalId);
		String serviceNo = "";
		int docId = 0;
		if (request.getParameter("serviceNo") != null) {
			serviceNo = request.getParameter("serviceNo");
			mapForDS.put("serviceNo", serviceNo);
		}
		if (request.getParameter(PATIENT_NAME) != null) {
			mapForDS.put(PATIENT_NAME, request.getParameter(PATIENT_NAME));
		}

			Users user = new Users();
			if (session.getAttribute("users") != null) {
				user = (Users) session.getAttribute("users");
			}
			mapForDS.put("empId", user.getEmployee().getId());

			deptId = (Integer) session.getAttribute("deptId");
			mapForDS.put("deptId", deptId);
		
		String title = request.getParameter("title");
		map = opdHandlerService.getWaitingReferralPatientList(mapForDS);
		List patientList = (List) map.get("patientList");
		map.put("patientList", patientList);
		jsp = OPD_WAITING_LIST_JSP;
		jsp += ".jsp";
		title = "Waiting Patient List";
		map.put("deptId", deptId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);

	}
*/
	public ModelAndView updateTreatmentTemplate(HttpServletRequest request,
			HttpServletResponse response) {
		int hdb = 1;
		HttpSession session = request.getSession();
		
		List<Integer> chargeCodeCodeList = new ArrayList<Integer>();

		String changedBy = "";
		String templateName = "";
		Map<String, Object> map = new HashMap<String, Object>();
		//OpdTemplate opdTemplate = new OpdTemplate();
		List<Integer> opdTemplateInvestIdList = new ArrayList<Integer>();
		Map<String, Object> listMap = new HashMap<String, Object>();
		Map<String, Object> generalMap = new HashMap<String, Object>();
		Date currentDate = new Date();
		String currentTime = "";

		int docId = 0;
		int templateId = 0;
		String templateType = null;
		if (request.getParameter("templateType") != null) {
			templateType  = request.getParameter("templateType");
		}
		if (session.getAttribute("empId") != null) {
			docId = (Integer) session.getAttribute("empId");

		}
		if (request.getParameter("templateId") != null) {
			templateId = Integer.parseInt(request.getParameter("templateId"));
		}

		try {
			if (request.getParameter(CODE) != null) {
				pojoPropertyCode = request.getParameter(CODE);
				

			}
			if (request.getParameter(SEARCH_NAME) != null) {
				templateName = request.getParameter(SEARCH_NAME);
			}
			int departmentId = (Integer) session.getAttribute("deptId");

			hdb = Integer.parseInt(request.getParameter("hiddenValue"));
			String[] pvmsArr = new String[hdb];
			int j = 1;
			int opdTemplateTreatmentId =0;
			for (int i = 0; i < hdb; i++) {

				if (request.getParameter("chargeCodeName" + j) != null
						&& !request.getParameter("chargeCodeName" + j).equals(
								"")) {

					
					String chargeCodeNameWithId = request
							.getParameter("chargeCodeName" + j);
					int index1 = chargeCodeNameWithId.lastIndexOf("[");
					int index2 = chargeCodeNameWithId.lastIndexOf("]");
					index1++;
					String chargeCodeCode = chargeCodeNameWithId.substring(index1,
							index2);
						
					
					if(request.getParameter("templateInvesId" + j)!=null){
						 opdTemplateTreatmentId = Integer.parseInt(request
								.getParameter("templateInvesId" + j));}
						 else
							 opdTemplateTreatmentId=0;
					opdTemplateInvestIdList.add(opdTemplateTreatmentId);
					chargeCodeCodeList.add(Integer.parseInt(chargeCodeCode));

					

				}
				j++;
			}

			
			if (request.getParameter(CHANGED_BY) != null
					&& !(request.getParameter(CHANGED_BY).equals(""))) {
				changedBy = request.getParameter(CHANGED_BY);
			}
			if (request.getParameter(CHANGED_DATE) != null
					&& !(request.getParameter(CHANGED_DATE).equals(""))) {
				currentDate = HMSUtil.dateFormatterDDMMYYYY(request
						.getParameter(CHANGED_DATE));
			}
			if (request.getParameter(CHANGED_TIME) != null
					&& !(request.getParameter(CHANGED_TIME).equals(""))) {
				currentTime = request.getParameter(CHANGED_TIME);
			}
			if (request.getParameter("title") != null) {
				title = request.getParameter("title");
			}

			boolean successfullyAdded = false;

			map.put("chargeCodeCodeList",chargeCodeCodeList);
			map.put("opdTemplateInvestIdList",opdTemplateInvestIdList);
			
			
			// map.put("", value)
			
			map.put("deptId", departmentId);

			map.put("templateName", templateName);
			map.put("changedBy", changedBy);
			map.put("currentDate", currentDate);
			map.put("currentTime", currentTime);
			map.put("pojoPropertyCode", pojoPropertyCode);
			map.put("templateId", templateId);
			map.put("templateType", templateType);

			int hospitalId = (Integer) session.getAttribute("hospitalId");

		
			map.put("hospitalId", hospitalId);
			map.put("docId", docId);
			successfullyAdded = opdHandlerService.submitUpdatedInvestigationTemplate(map);

			if (successfullyAdded) {
				message = "Record Added Successfully !!";
			} else {
				message = "Record Already Exist Try Again !!";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		map = opdHandlerService.getPrescriptionTemplateList(map);
		//jsp = "updateTreatmentTemplate";
		title = "Update OPD Template";
		jsp += ".jsp";
		map.put("templateType", templateType);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		return new ModelAndView("updateInvestigationTemplate", "map", map);
	}
	
	
	public ModelAndView doVisitClose(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();

		int visitId = 0;
		HttpSession session = request.getSession();
		int hospitalId = 0;
		int deptId = 0;
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
		}

		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}

		if (request.getParameter("visitId") != null
				&& !request.getParameter("visitId").equals("0")) {
			visitId = Integer.parseInt(request.getParameter("visitId"));
		}
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("deptId", deptId);
		dataMap.put("visitId", visitId);

		map = opdHandlerService.doVisitRelease(dataMap);

		boolean flag = false;
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}

		try {
			PrintWriter pw = response.getWriter();
			pw.write("success~~~" + flag);

		}

		catch (Exception e) {
			e.printStackTrace();
		}

		return null;

	}
	
	public ModelAndView showPreviousDentalXray(
            HttpServletRequest request, HttpServletResponse response) {
        HttpSession session = request.getSession();
        Map<String, Object> mapForDS = new HashMap<String, Object>();

        if (request.getParameter("deptId") != null) {
            int deptId = Integer.parseInt(request.getParameter("deptId"));
            mapForDS.put("deptId", deptId);
        }
        

        String hinNo = "";
        if (request.getParameter("hinNo") != null) {
            hinNo = request.getParameter("hinNo");
            mapForDS.put("hinNo", hinNo);
        }

        
        map = opdHandlerService.getPreviousDentalXray(mapForDS);
        

    
        
            jsp = "opd_previousDentalXray";
        
        title = "Previous History of Dental X-Ray";
    

        map.put("title", title);

        return new ModelAndView(jsp, "map", map);
    }
	public ModelAndView getAvailableDoctorDetails(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		String loginDoctor = null;
		if (request.getParameter("loginDoctor") != null)
			loginDoctor = request.getParameter("loginDoctor");
		
		int hospitalId = 0;
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			box.put("hospitalId", hospitalId);

		}

		if (request.getParameter(DEPARTMENT_ID) != null)
			request.setAttribute(DEPARTMENT_ID,
					request.getParameter(DEPARTMENT_ID));
		map.put("box", box);
		map = opdHandlerService.getAvailableDoctorList(map);
		map.put("loginDoctor", loginDoctor);
		jsp = "opd_responseForDoctorDepartment";

		map.put("jsp", jsp);
		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView showPatientPreviousOBGVisit(
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		
	

	
		if (request.getParameter("visitId") != null) {
			int visitId = Integer.parseInt(request.getParameter("visitId"));
			mapForDS.put("visitId", visitId);
		}
		if (request.getParameter("hinId") != null) {
			int hinId = Integer.parseInt(request.getParameter("hinId"));
			mapForDS.put("hinId", hinId);
		}
		map = opdHandlerService.getPreviousOBGVisit(mapForDS);
	

		String url = "/hms/hms/medicalExam?method=showAnnualMedExamJsp";
	
		map.put("url", url);
		jsp = "opd_previousVisitForOBG";
		title = "Patient Previous Visit";
	
	

		map.put("title", title);

		return new ModelAndView(jsp, "map", map);
	}
	public ModelAndView showOpdCurrentMedicationJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = "showPatientCurrentMedication" + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	
	@SuppressWarnings("unchecked")
	public ModelAndView showVaccinationWaitingList(HttpServletRequest request,
			HttpServletResponse response) {
		int deptId = 0;
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		@SuppressWarnings("unused")
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		mapForDS.put("hospitalId", hospitalId);
		
		String serviceNo = "";
		int docId=0;
		if (request.getParameter("doctorId") != null) {
			docId = Integer.parseInt(request.getParameter("doctorId"));
			mapForDS.put("empId", docId);
		}
		if (request.getParameter(SESSION_ID) != null) {
			mapForDS.put(SESSION_ID, Integer.parseInt(request.getParameter(SESSION_ID)));
		}
		if (docId == 0){
			docId = (Integer) session.getAttribute("empId");
			mapForDS.put("empId", docId);
		}
		if (request.getParameter("serviceNo") != null) {
			serviceNo = request.getParameter("serviceNo");
			mapForDS.put("serviceNo", serviceNo);
		}
		if (request.getParameter(PATIENT_NAME) != null) {
			mapForDS.put(PATIENT_NAME, request.getParameter(PATIENT_NAME));
		}
		if (request.getParameter("deptId") != null) {
			deptId = Integer.parseInt(request.getParameter("deptId"));
			mapForDS.put("deptId", deptId);
		} else {
			deptId = (Integer) session.getAttribute("deptId");
			mapForDS.put("deptId", deptId);
		}
		String title = request.getParameter("title");
		map = opdHandlerService.getWaitingPatientList(mapForDS);
		if (session.getAttribute("deptName") != null) {
			map.put("deptName", (String) session.getAttribute("deptName"));
		}
		map.put("docId", docId);
		jsp = OPD_VACCINE_WAITING_LIST_JSP;
		jsp += ".jsp";
		title = "Waiting Patient List";
		map.put("deptId", deptId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}
	@SuppressWarnings("unchecked")
	public ModelAndView showOPDVaccineJsp(HttpServletRequest request,
			HttpServletResponse response) {
		int deptId = 0;
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		@SuppressWarnings("unused")
		int departmentId = (Integer) session.getAttribute("deptId");
		mapForDS.put("departmentId", departmentId);
		
		String serviceNo = "";
		int visitId=0;
		if (request.getParameter("visitId") != null) {
			visitId = Integer.parseInt(request.getParameter("visitId"));
			mapForDS.put("visitId", visitId);
		}
		 int docId =0;
		if (docId == 0){
			docId = (Integer) session.getAttribute("empId");
			mapForDS.put("empId", docId);
		}
		
		map = opdHandlerService.getPatientVaccineDetails(mapForDS);
		if (session.getAttribute("deptName") != null) {
			map.put("deptName", (String) session.getAttribute("deptName"));
		}
		map.put("docId", docId);
		map.put("visitId", visitId);
		jsp = OPD_VACCINE_JSP;
		jsp += ".jsp";
		title = "Waiting Patient List";
		map.put("deptId", deptId);
		map.put("visitId", visitId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}
	public ModelAndView submitOPDVaccineDetail(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		session = request.getSession();
		int hospitalId = 0;
		int userId = 0;
		int departmentId = 0;
		
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		}
		if (session.getAttribute("userId") != null) {
			userId = Integer.parseInt("" + session.getAttribute("userId"));
		}
		
		if (session.getAttribute("deptId") != null) {
			departmentId = Integer.parseInt(""
					+ session.getAttribute("deptId"));
		}
		int hinId = Integer.parseInt(request.getParameter("hinId"));
		int empId=0;
		if (session.getAttribute("empId") != null
					&& session.getAttribute("empId") != "") {
				empId =  (Integer) session.getAttribute("empId");
			}

		String consultationDate = request.getParameter("consultationDate");
			String consultationTime = request.getParameter("consultationTime");

			int nomenclaturehdb = 1;
			if (Integer.parseInt(request.getParameter("nomenclaturehdb")) != 1) {
				nomenclaturehdb = Integer.parseInt(request.getParameter("nomenclaturehdb"));
			}
			List<String> pvmsNoList = new ArrayList<String>();
			List<Integer> frequencyList = new ArrayList<Integer>();
			List<String> dosageList = new ArrayList<String>();
			List<String> remarksList = new ArrayList<String>();
			List<String> typeLeftRightList = new ArrayList<String>();
			List<String> instructionList = new ArrayList<String>();
			List<Integer> totalList = new ArrayList<Integer>();
			List<Integer> noOfDaysList = new ArrayList<Integer>();
			List<String> routeList = new ArrayList<String>();
			List<Integer> itemConversionList = new ArrayList<Integer>();
			List<Integer> itemClassList = new ArrayList<Integer>();
			List<String> itemDispensaryList = new ArrayList<String>();
		String[] pvmsArr = new String[nomenclaturehdb];
		Integer[] itemIdArr = new Integer[nomenclaturehdb];
		String otherMedicine = "";
		List<String> otherMedicineList = new ArrayList<String>();
		List<String> ctList = new ArrayList<String>();
		// List<String> nomenclatureList = new ArrayList<String>();
		List<Integer> itemIdList = new ArrayList<Integer>();
		List<Integer> classificationList = new ArrayList<Integer>();
		List<BigDecimal> uomQtyList = new ArrayList<BigDecimal>();
		
		// List injCategoryList = new ArrayList();
		int j = 1;
		for (int i = 0; i < nomenclaturehdb; i++) {
			String pvmsNo = "";
			int itemId = 0;
	

			if (request.getParameter("itemId" + j) != null
					&& !request.getParameter("nomenclature" + j).equals("")) {
				itemId = Integer.parseInt(request.getParameter("itemId" + j));
				if (itemId != 0) {
					itemIdList.add(itemId);
				}

				if (request.getParameter("itemIdClassificationId" + j) != null
						&& !request.getParameter("itemIdClassificationId" + j)
								.equals("")) {
					classificationList.add(Integer.parseInt(request
							.getParameter("itemIdClassificationId" + j)));
				} else
					classificationList.add(0);
				/*otherMedicineList.add(otherMedicine);*/
			} else {
				if (request.getParameter("otherMedicine" + j) != null
						&& !request.getParameter("otherMedicine" + j)
								.equals("")) {
					otherMedicine = request.getParameter("otherMedicine" + j);
					otherMedicineList.add(otherMedicine);

				}

			}
			
			if((request.getParameter("itemId" + j) != null && !request.getParameter("nomenclature" + j).equals("")) || (request.getParameter("otherMedicine" + j) != null && !request.getParameter("otherMedicine" + j).equals("")) )
			{
			int itemConversionId = 0;
			if (request.getParameter("itemConversionId" + j) != null
					&& !request.getParameter("itemConversionId" + j).equals("")) {
				itemConversionId = Integer.parseInt(request
						.getParameter("itemConversionId" + j));
				itemConversionList.add(itemConversionId);
			}
			else
				itemConversionList.add(0);
			if (request.getParameter("itemClass" + j) != null
					&& !request.getParameter("itemClass" + j).equals("")) {
				itemClassList.add(Integer.parseInt(request
						.getParameter("itemClass" + j)));
			}
			else
				itemClassList.add(0);

			if (request.getParameter("dispensingUnit" + j) != null) {
				itemDispensaryList.add(request.getParameter("dispensingUnit"
						+ j));
			}
			else
				itemDispensaryList.add("");
			
			if (request.getParameter("uomQty" + j) != null) {
				uomQtyList.add(new BigDecimal(request.getParameter("uomQty"+ j)));
			}
			else
				uomQtyList.add(new BigDecimal(0));
			
			int frequencyId = 0;
			if (request.getParameter("frequency" + j) != null
					&& !request.getParameter("frequency" + j).equals("")) {
				frequencyId = Integer.parseInt(request.getParameter("frequency"
						+ j));
				frequencyList.add(frequencyId);
			} else {
				frequencyList.add(0);
			}
			if (request.getParameter("ct" + j) != null) {
				ctList.add("y");
			} else {
				ctList.add("n");
			}

			String route = "";
			if (request.getParameter("route" + j) != null
					&& !request.getParameter("route" + j).equals("")) {
				route = request.getParameter("route" + j);
				routeList.add(route);
			} else {
				routeList.add("");
			}

			BigDecimal frequenceValue = new BigDecimal("0");
			if (request.getParameter("frequencyValue" + j) != null
					&& !request.getParameter("frequencyValue" + j).equals("")) {
				frequenceValue = new BigDecimal(
						request.getParameter("frequencyValue" + j));
			}

			String dosage = "";
			if (request.getParameter("dosage" + j) != null
					&& !request.getParameter("dosage" + j).equals("")) {
				dosage = request.getParameter("dosage" + j);
				dosageList.add(dosage);
			} else {
				dosageList.add("");
			}
			if (request.getParameter("noOfDays" + j) != null
					&& !request.getParameter("noOfDays" + j).equals("")) {
				int noOfDays = Integer.parseInt(request.getParameter("noOfDays"
						+ j));
				noOfDaysList.add(noOfDays);


			} else {
				noOfDaysList.add(0);
			}
			if (request.getParameter("total" + j) != null
					&& !request.getParameter("total" + j).equals("")) {
				int total = Math.round(Float.parseFloat(request
						.getParameter("total" + j)));
				totalList.add(total);
			} else {
				totalList.add(0);
			}

			String remarks = "";
			if (request.getParameter("remarks" + j) != null
					&& !request.getParameter("remarks" + j).equals("")) {
				remarks = request.getParameter("remarks" + j);
				remarksList.add(remarks);
			} else {
				remarksList.add("");
			}
		}


			j++;
		}
		
		

		
		//capture NIP
					j =500;
					int n=itemIdList.size();
							int hdb = 1;
		if (Integer.parseInt(request.getParameter("hdb")) != 1) {
			hdb = Integer.parseInt(request.getParameter("hdb"));
		}
		
		for ( j = 500; j <=hdb; j++) {
			String pvmsNo = "";
			int itemId = 0;

			if (request.getParameter("itemId" + j) != null
					&& !request.getParameter("nomenclature" + j).equals("")) {
				itemId = Integer.parseInt(request.getParameter("itemId" + j));
				if (itemId != 0) {
					itemIdList.add(itemId);
				}

				if (request.getParameter("itemIdClassificationId" + j) != null
						&& !request.getParameter("itemIdClassificationId" + j)
								.equals("")) {
					classificationList.add(Integer.parseInt(request
							.getParameter("itemIdClassificationId" + j)));
				} else
					classificationList.add(0);
				/*otherMedicineList.add(otherMedicine);*/
			} else {
				if (request.getParameter("otherMedicine" + j) != null
						&& !request.getParameter("otherMedicine" + j)
								.equals("")) {
					otherMedicine = request.getParameter("otherMedicine" + j);
					otherMedicineList.add(otherMedicine);
					/*otherMedicineList.add(n,otherMedicine);*/

				}

			}
			
			if((request.getParameter("itemId" + j) != null && !request.getParameter("nomenclature" + j).equals("")) || (request.getParameter("otherMedicine" + j) != null && !request.getParameter("otherMedicine" + j).equals("")) )
			{
			int itemConversionId = 0;
			if (request.getParameter("itemConversionId" + j) != null
					&& !request.getParameter("itemConversionId" + j).equals("")) {
				itemConversionId = Integer.parseInt(request
						.getParameter("itemConversionId" + j));
				itemConversionList.add(itemConversionId);
			}
			else
				itemConversionList.add(0);
			if (request.getParameter("itemClass" + j) != null
					&& !request.getParameter("itemClass" + j).equals("")) {
				itemClassList.add(Integer.parseInt(request
						.getParameter("itemClass" + j)));
			}
			else
				itemClassList.add(0);
			if (request.getParameter("dispensingUnit" + j) != null) {
				itemDispensaryList.add(request.getParameter("dispensingUnit"
						+ j));
			}
			else
				itemDispensaryList.add("");
			
			if (request.getParameter("uomQty" + j) != null) {
				uomQtyList.add(new BigDecimal(request.getParameter("uomQty"+ j)));
			}
			else
				uomQtyList.add(new BigDecimal(0));
			
			int frequencyId = 0;
			if (request.getParameter("frequency" + j) != null
					&& !request.getParameter("frequency" + j).equals("")) {
				frequencyId = Integer.parseInt(request.getParameter("frequency"
						+ j));
				frequencyList.add(frequencyId);
			} else {
				frequencyList.add(0);
			}
			if (request.getParameter("ct" + j) != null) {
				ctList.add("y");
			} else {
				ctList.add("n");
			}

			String route = "";
			if (request.getParameter("route" + j) != null
					&& !request.getParameter("route" + j).equals("")) {
				route = request.getParameter("route" + j);
				routeList.add(route);
			} else {
				routeList.add("");
			}

			BigDecimal frequenceValue = new BigDecimal("0");
			if (request.getParameter("frequencyValue" + j) != null
					&& !request.getParameter("frequencyValue" + j).equals("")) {
				frequenceValue = new BigDecimal(
						request.getParameter("frequencyValue" + j));
			}

			String dosage = "";
			if (request.getParameter("dosage" + j) != null
					&& !request.getParameter("dosage" + j).equals("")) {
				dosage = request.getParameter("dosage" + j);
				dosageList.add(dosage);
			} else {
				dosageList.add("");
			}
			if (request.getParameter("noOfDays" + j) != null
					&& !request.getParameter("noOfDays" + j).equals("")) {
				int noOfDays = Integer.parseInt(request.getParameter("noOfDays"
						+ j));
				noOfDaysList.add(noOfDays);

			} else {
				noOfDaysList.add(0);
			}
			if (request.getParameter("total" + j) != null
					&& !request.getParameter("total" + j).equals("")) {
				int total = Math.round(Float.parseFloat(request
						.getParameter("total" + j)));
				totalList.add(total);
			} else {
				totalList.add(0);
			}

			String remarks = "";
			if (request.getParameter("remarks" + j) != null
					&& !request.getParameter("remarks" + j).equals("")) {
				remarks = request.getParameter("remarks" + j);
				remarksList.add(remarks);
			} else {
				remarksList.add("");
			}
		}
	
		}
		
		dataMap.put("routeList", routeList);
		dataMap.put("frequencyList", frequencyList);
		dataMap.put("ctList", ctList);
		dataMap.put("dosageList", dosageList);
		dataMap.put("itemIdList", itemIdList);
		dataMap.put("classificationList", classificationList);
		dataMap.put("totalList", totalList);
		dataMap.put("noOfDaysList", noOfDaysList);
		dataMap.put("remarksList", remarksList);
		dataMap.put("otherMedicineList", otherMedicineList);
		dataMap.put("itemConversionList", itemConversionList);
		dataMap.put("itemClassList", itemClassList);
		dataMap.put("itemDispensaryList", itemDispensaryList);
		dataMap.put("uomQtyList", uomQtyList);
	
		String otherTreatment = "";
		if (request.getParameter("otherTreatment") != null
				&& !request.getParameter("otherTreatment").equals("")) {
			otherTreatment = request.getParameter("otherTreatment");
			dataMap.put("otherTreatment", otherTreatment);
		}
		
		//investigation
		List<String> chargeCodeIdList = new ArrayList<String>();
		List<String> investigationDate = new ArrayList<String>();

	int temp = 1;
	int hiddenValue = 1;
	if (Integer.parseInt(request.getParameter("hiddenValue")) != 1) {
		hiddenValue = Integer.parseInt(request.getParameter("hiddenValue"));
	}
		String[] chargeCodeIdArr = new String[hiddenValue];
		for (int i = 0; i < hiddenValue; i++) {
			if (request.getParameter("chargeCodeName" + temp) != null
					&& !request.getParameter("chargeCodeName" + temp)
							.equals("")) {

				String chargeCodeNameWithId = request
						.getParameter("chargeCodeName" + temp);
				int index1 = chargeCodeNameWithId.lastIndexOf("[");
				int index2 = chargeCodeNameWithId.lastIndexOf("]");
				index1++;
				String chargeCodeId = chargeCodeNameWithId.substring(index1,
						index2);
				if (!chargeCodeId.equals("")) {
					chargeCodeIdArr[i] = chargeCodeId;
					int qty = 1;
				
		
					chargeCodeIdList.add(chargeCodeIdArr[i]);
					investigationDate.add(request.getParameter("investigationDate"+temp));

				}
			}
			temp++;
		}
		dataMap.put("chargeCodeIdList", chargeCodeIdList);
		dataMap.put("investigationDate", investigationDate);
		//end
		box.put("hospitalId", hospitalId);
		box.put("departmentId", departmentId);
		box.put("userId", userId);
		box.put("empId", empId);
		dataMap.put("box", box);
		dataMap.put("deptId", departmentId);
		dataMap.put("empId", empId);
		map = opdHandlerService.submitOPDVaccineDetails(dataMap);
		boolean dublicateVisit = false;	
		boolean succesfullyAdded = false;	
		if (map.get("succesfullyAdded") != null) {
			succesfullyAdded = (Boolean) map.get("succesfullyAdded");
		}
if(succesfullyAdded)
{
	if (map.get("dublicateVisit") != null) {
		dublicateVisit = (Boolean) map.get("dublicateVisit");
	}
	if(dublicateVisit)
		message = "Details have already been saved";
	else
		message = "OPD details submitted Successfully.";
}
else
	message = "Error Occurred in Submitting Details.";
		
			
		dataMap.put("hospitalId", hospitalId);
		map = opdHandlerService.getWaitingPatientList(dataMap);
		if (session.getAttribute("deptName") != null) {
			map.put("deptName", (String) session.getAttribute("deptName"));
		}
		map.put("docId", empId);
		map.put("visitId", box.getInt("visitId"));
		jsp = OPD_VACCINE_WAITING_LIST_JSP;
		jsp += ".jsp";
		title = "Waiting Patient List";
		map.put("deptId", departmentId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		
		return new ModelAndView("indexB", "map", map);
		
	
	}

	public ModelAndView updateDeleteNISNIP(HttpServletRequest request,
		HttpServletResponse response) {
			Map<String, Object> dataMap = new HashMap<String, Object>();
			Map<String, Object> map = new HashMap<String, Object>();
			
			int visitId = 0;
			HttpSession session = request.getSession();
			int hospitalId = 0;
			int deptId = 0;
			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
			}
			
		
			Box box = HMSUtil.getBox(request);
			
			dataMap.put("hospitalId", hospitalId);
			dataMap.put("box", box);
			map = opdHandlerService.updateDeleteNISNIP(dataMap);
			
			boolean result = false;
			if (map.get("result") != null) {
				result = (Boolean) map.get("result");
			}
			
			try {
				PrintWriter pw = response.getWriter();
				if(result)
				pw.write("s");
				else
					pw.write("f");	
			
			}
			
			catch (Exception e) {
				e.printStackTrace();
			}
			
			return null;
		}
	@SuppressWarnings("unchecked")
	public ModelAndView showVaccineReport(HttpServletRequest request,
			HttpServletResponse response) {
		int deptId = 0;
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		@SuppressWarnings("unused")
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		mapForDS.put("hospitalId", hospitalId);
		if (request.getParameter("fromDate") != null) {
			mapForDS.put("fromDate", request.getParameter("fromDate"));
		}
		if (request.getParameter("toDate") != null) {
			mapForDS.put("toDate", request.getParameter("toDate"));
		}
		String title = request.getParameter("title");
		map = opdHandlerService.getVaccineReport(mapForDS);
		if (session.getAttribute("deptName") != null) {
			map.put("deptName", (String) session.getAttribute("deptName"));
		}
		
		map.put("fromDate", request.getParameter("fromDate"));
		map.put("toDate", request.getParameter("toDate"));

		jsp = "opdVaccineReport";
		jsp += ".jsp";
		title = "Vaccine Report";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}
}