package jkt.hms.stores.dataservice;
import static jkt.hms.util.RequestConstants.ABC;
import static jkt.hms.util.RequestConstants.ACK_BY;
import static jkt.hms.util.RequestConstants.ACK_DATE;
import static jkt.hms.util.RequestConstants.AMOUNT;
import static jkt.hms.util.RequestConstants.APPROVED_BY_EMPLOYEE_ID_DEPENDENT_INDENT;
import static jkt.hms.util.RequestConstants.AU;
import static jkt.hms.util.RequestConstants.AUTHORISED_BY;
import static jkt.hms.util.RequestConstants.BATCH_ID;
import static jkt.hms.util.RequestConstants.BATCH_NO;
import static jkt.hms.util.RequestConstants.BG;
import static jkt.hms.util.RequestConstants.BRAND_GENERIC;
import static jkt.hms.util.RequestConstants.BRAND_ID;
import static jkt.hms.util.RequestConstants.CHALLAN_DATE;
import static jkt.hms.util.RequestConstants.CHALLAN_NO;
import static jkt.hms.util.RequestConstants.CHANGED_BY;
import static jkt.hms.util.RequestConstants.CHANGED_DATE;
import static jkt.hms.util.RequestConstants.CHANGED_TIME;
import static jkt.hms.util.RequestConstants.CHECKED_BY;
import static jkt.hms.util.RequestConstants.COMMON_NAME;
import static jkt.hms.util.RequestConstants.COST_PRICE;
import static jkt.hms.util.RequestConstants.CUSTOM_DUTY;
import static jkt.hms.util.RequestConstants.DEMAND_DATE;
import static jkt.hms.util.RequestConstants.DEMAND_NO;
import static jkt.hms.util.RequestConstants.DEPARTMENT_ID;
import static jkt.hms.util.RequestConstants.DEPARTMENT_ID_TEMP;
import static jkt.hms.util.RequestConstants.DETAIL_ID;
import static jkt.hms.util.RequestConstants.DISCOUNT_PERCENTAGE;
import static jkt.hms.util.RequestConstants.DOC_NO;
import static jkt.hms.util.RequestConstants.EMPLOYEE_ID;
import static jkt.hms.util.RequestConstants.ENTERD_BY;
import static jkt.hms.util.RequestConstants.ENTRY_ID;
import static jkt.hms.util.RequestConstants.EXCISE_DUTY;
import static jkt.hms.util.RequestConstants.EXPIRY_DATE;
import static jkt.hms.util.RequestConstants.FREE_ITEM;
import static jkt.hms.util.RequestConstants.FREE_QTY;
import static jkt.hms.util.RequestConstants.FREIGHT_DUTY;
import static jkt.hms.util.RequestConstants.FROM_DATE;
import static jkt.hms.util.RequestConstants.FROM_WARD;
import static jkt.hms.util.RequestConstants.GRN_DATE;
import static jkt.hms.util.RequestConstants.GRN_ID;
import static jkt.hms.util.RequestConstants.GRN_NO;
import static jkt.hms.util.RequestConstants.HOW_RECEIVED;
import static jkt.hms.util.RequestConstants.INDENT_ID;
import static jkt.hms.util.RequestConstants.INDENT_NO;
import static jkt.hms.util.RequestConstants.INSURANCE_CHARGES;
import static jkt.hms.util.RequestConstants.INVOICE_AMOUNT;
import static jkt.hms.util.RequestConstants.INVOICE_DATE;
import static jkt.hms.util.RequestConstants.INVOICE_NO;
import static jkt.hms.util.RequestConstants.ISSUED_BY;
import static jkt.hms.util.RequestConstants.ISSUE_DEPT;
import static jkt.hms.util.RequestConstants.ISSUE_ID;
import static jkt.hms.util.RequestConstants.ISSUE_NO;
import static jkt.hms.util.RequestConstants.ITEMS_TO_BE_ADDED;
import static jkt.hms.util.RequestConstants.ITEMS_TO_BE_DELETED;
import static jkt.hms.util.RequestConstants.ITEM_ID;
import static jkt.hms.util.RequestConstants.LOANIN_DATE;
import static jkt.hms.util.RequestConstants.LOANIN_ID;
import static jkt.hms.util.RequestConstants.LOANIN_NO;
import static jkt.hms.util.RequestConstants.LOT_NO;
import static jkt.hms.util.RequestConstants.MANUFACTURER_ID;
import static jkt.hms.util.RequestConstants.MANUFACTURING_DATE;
import static jkt.hms.util.RequestConstants.MMF_DEPARTMENT_DATE;
import static jkt.hms.util.RequestConstants.MODE_OF_CONVEYANCE;
import static jkt.hms.util.RequestConstants.MRP;
import static jkt.hms.util.RequestConstants.NOMENCLATURE;
import static jkt.hms.util.RequestConstants.OCTROI;
import static jkt.hms.util.RequestConstants.OTHER_CHARGES;
import static jkt.hms.util.RequestConstants.PHYSICAL_STOCK_DATE;
import static jkt.hms.util.RequestConstants.PO_ID;
import static jkt.hms.util.RequestConstants.PREPARED_BY;
import static jkt.hms.util.RequestConstants.PVMS_NO;
import static jkt.hms.util.RequestConstants.QTY_ISSUED;
import static jkt.hms.util.RequestConstants.QUANTITY_RECEIVED;
import static jkt.hms.util.RequestConstants.REASON;
import static jkt.hms.util.RequestConstants.RECEIVED_DATE;
import static jkt.hms.util.RequestConstants.REMARKS;
import static jkt.hms.util.RequestConstants.REQUEST_BY_EMPLOYEE_ID_DEPENDENT_INDENT;
import static jkt.hms.util.RequestConstants.RR_NO;
import static jkt.hms.util.RequestConstants.SOURCE_OF_SUPPLY;
import static jkt.hms.util.RequestConstants.SR_NO;
import static jkt.hms.util.RequestConstants.STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT;
import static jkt.hms.util.RequestConstants.SUPPLIER_ID;
import static jkt.hms.util.RequestConstants.SUPPLY_ORDER_NO;
import static jkt.hms.util.RequestConstants.TAX_AMT_MDQ;
import static jkt.hms.util.RequestConstants.TAX_PERCENT;
import static jkt.hms.util.RequestConstants.TO_DATE;
import static jkt.hms.util.RequestConstants.TO_WARD;
import static jkt.hms.util.RequestConstants.VED;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;
import java.net.URL;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.zip.Deflater;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import javax.transaction.SystemException;

import jkt.hms.masters.business.DepartmentMedicineIssue;
import jkt.hms.masters.business.Inpatient;
import jkt.hms.masters.business.IpdMedicineIssueHeader;
import jkt.hms.masters.business.MasDepartment;
import jkt.hms.masters.business.MasDivision;
import jkt.hms.masters.business.MasEmployee;
import jkt.hms.masters.business.MasEmployeeDepartment;
import jkt.hms.masters.business.MasFormation;
import jkt.hms.masters.business.MasFrequency;
import jkt.hms.masters.business.MasHospital;
import jkt.hms.masters.business.MasItemCategory;
import jkt.hms.masters.business.MasItemClass;
import jkt.hms.masters.business.MasItemType;
import jkt.hms.masters.business.MasManufacturer;
import jkt.hms.masters.business.MasProposedMPR;
import jkt.hms.masters.business.MasRank;
import jkt.hms.masters.business.MasStoreAirForceDepot;
import jkt.hms.masters.business.MasStoreBrand;
import jkt.hms.masters.business.MasStoreBudget;
import jkt.hms.masters.business.MasStoreFinancial;
import jkt.hms.masters.business.MasStoreGroup;
import jkt.hms.masters.business.MasStoreItem;
import jkt.hms.masters.business.MasStoreItemConversion;
import jkt.hms.masters.business.MasStoreSection;
import jkt.hms.masters.business.MasStoreSupplier;
import jkt.hms.masters.business.MasUnit;
import jkt.hms.masters.business.MasUnitOfMeasurement;
import jkt.hms.masters.business.MasZonal;
import jkt.hms.masters.business.MprPriority;
import jkt.hms.masters.business.Patient;
import jkt.hms.masters.business.PatientPrescriptionDetails;
import jkt.hms.masters.business.PatientPrescriptionHeader;
import jkt.hms.masters.business.RcDetails;
import jkt.hms.masters.business.RcHeader;
import jkt.hms.masters.business.RcRequestDetails;
import jkt.hms.masters.business.RcRequestHeader;
import jkt.hms.masters.business.StoreAdjustmentM;
import jkt.hms.masters.business.StoreAdjustmentT;
import jkt.hms.masters.business.StoreBalanceM;
import jkt.hms.masters.business.StoreBalanceT;
import jkt.hms.masters.business.StoreBoo;
import jkt.hms.masters.business.StoreBooMember;
import jkt.hms.masters.business.StoreCopyAddressList;
import jkt.hms.masters.business.StoreDefectiveDrugM;
import jkt.hms.masters.business.StoreDefectiveDrugT;
import jkt.hms.masters.business.StoreDrugCost;
import jkt.hms.masters.business.StoreFollowUpForSample;
import jkt.hms.masters.business.StoreFollowupDetails;
import jkt.hms.masters.business.StoreFyDocumentNo;
import jkt.hms.masters.business.StoreGrnM;
import jkt.hms.masters.business.StoreGrnReturnM;
import jkt.hms.masters.business.StoreGrnReturnT;
import jkt.hms.masters.business.StoreGrnT;
import jkt.hms.masters.business.StoreIndentM;
import jkt.hms.masters.business.StoreIndentSocTracker;
import jkt.hms.masters.business.StoreIndentT;
import jkt.hms.masters.business.StoreInternalIndentM;
import jkt.hms.masters.business.StoreInternalIndentT;
import jkt.hms.masters.business.StoreInternalReturnM;
import jkt.hms.masters.business.StoreInternalReturnT;
import jkt.hms.masters.business.StoreIssueM;
import jkt.hms.masters.business.StoreIssueT;
import jkt.hms.masters.business.StoreItemAdjustmentM;
import jkt.hms.masters.business.StoreItemAdjustmentT;
import jkt.hms.masters.business.StoreItemBatchStock;
import jkt.hms.masters.business.StoreLoaninM;
import jkt.hms.masters.business.StoreLoaninT;
import jkt.hms.masters.business.StoreLoanoutExpendM;
import jkt.hms.masters.business.StoreLoanoutExpendT;
import jkt.hms.masters.business.StoreMaterialPurchaseReqM;
import jkt.hms.masters.business.StoreMaterialPurchaseReqT;
import jkt.hms.masters.business.StoreMedicineReturnM;
import jkt.hms.masters.business.StoreMedicineReturnT;
import jkt.hms.masters.business.StoreMmfDepartmentM;
import jkt.hms.masters.business.StoreMmfDepartmentT;
import jkt.hms.masters.business.StoreMmfItemRemarks;
import jkt.hms.masters.business.StoreOpPatientIssueM;
import jkt.hms.masters.business.StoreOpPatientIssueT;
import jkt.hms.masters.business.StorePoDetail;
import jkt.hms.masters.business.StorePoHeader;
import jkt.hms.masters.business.StoreProformaDetail;
import jkt.hms.masters.business.StoreProformaHeader;
import jkt.hms.masters.business.StoreProformabApproved;
import jkt.hms.masters.business.StoreQuotationRequestM;
import jkt.hms.masters.business.StoreQuotationRequestT;
import jkt.hms.masters.business.StoreSampleTestingDetail;
import jkt.hms.masters.business.StoreSampleTestingEntry;
import jkt.hms.masters.business.StoreSetup;
import jkt.hms.masters.business.StoreStockTakingM;
import jkt.hms.masters.business.StoreStockTakingT;
import jkt.hms.masters.business.StoreSupplyOrderEntry;
import jkt.hms.masters.business.StoreTenderInvitaLetterToVender;

import jkt.hms.masters.business.TransactionSequence;
import jkt.hms.masters.business.UserEmpGroup;
import jkt.hms.masters.business.Users;
import jkt.hms.masters.business.Visit;
import jkt.hms.util.Box;
import jkt.hms.util.HMSUtil;
import jkt.hms.util.PageUtil;
import jkt.hms.util.PagedArray;
import jkt.hms.util.RequestConstants;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFHeader;
import org.apache.poi.hssf.usermodel.HSSFRichTextString;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.Region;
import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.CriteriaSpecification;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.springframework.dao.DataAccessException;
import org.springframework.dao.DataAccessResourceFailureException;
import org.springframework.orm.hibernate3.HibernateTemplate;
import org.springframework.orm.hibernate3.HibernateTransactionManager;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;

//import com.sun.org.apache.xerces.internal.impl.xpath.regex.ParseException;




public class StoresDataServiceImpl extends HibernateDaoSupport implements StoresDataService {
	HibernateTransactionManager transactionManager = null;
	Session session;

	/*
	 * Code for read from property file from src package
	 */
	Properties properties = new Properties();{
		try{
			ClassLoader loader =getClass().getClassLoader();
			InputStream inStream = loader.getResourceAsStream("stores.properties");
			properties.load(inStream);
		}catch (IOException e) {
			//log.error("Exception in Loading in connection Properties file"+e.getMessage());
			e.printStackTrace();
		}
	}




	//===== Dinesh---
	// GRN--------------------------
	public Map<String, Object> showGrnJsp(Box box, Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		if (dataMap.get("deptId") != null)
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		if (dataMap.get("hospitalId") != null)
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		if (dataMap.get("userName") != null)
			userName = ("" + dataMap.get("userName"));

		List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier>();
		List<MasUnitOfMeasurement> uomList = new ArrayList<MasUnitOfMeasurement>();
		List<MasManufacturer> manufacturerList = new ArrayList<MasManufacturer>();
		List<StoreGrnM> searchGrnList = new ArrayList<StoreGrnM>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<MasStoreAirForceDepot> unitList = new ArrayList<MasStoreAirForceDepot>();
		List<StoreGrnM> grnList = new ArrayList<StoreGrnM>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<MasUnit>trueUnitList=new ArrayList<MasUnit>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<StoreProformaHeader> storeProformaNoList = new ArrayList<StoreProformaHeader>();

		String no = "";
		session = (Session) getSession();

		try {
			supplierList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasStoreSupplier as ms where ms.Hospital.Id='"+hospitalId+"' order by ms.SupplierName");
			uomList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasUnitOfMeasurement as mi where mi.Status = 'y'");
			// manufacturerList=getHibernateTemplate().find("from
			// jkt.hms.masters.business.MasManufacturer as mi where mi.Status =
			// 'y' order by mi.ManufacturerName");
			searchGrnList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreGrnM as mi where mi.Department.Id='"
					+ deptId + "' and mi.Hospital.Id='"+hospitalId+"'");
			employeeList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasEmployee as mi  where mi.Status = 'y' and mi.Hospital.Id='"+hospitalId+"' order by mi.FirstName");
			unitList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasStoreAirForceDepot as mi where mi.Status = 'y' order by mi.AirForceDepotName");
			trueUnitList=getHibernateTemplate()
			.find(
			"from jkt.hms.masters.business.MasUnit as mi where mi.Status = 'y' order by mi.UnitName");

			grnList = getHibernateTemplate().find("from jkt.hms.masters.business.StoreGrnM as sgm where sgm.Hospital.Id='"+hospitalId+"'");
			// brandList=getHibernateTemplate().find("from
			// jkt.hms.masters.business.MasStoreBrand as msb");
			storeFyDocumentNoList = (List) getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"
					+ deptId + "' and sfdn.Hospital.Id='"+hospitalId+"'");
		/*	storeProformaNoList=(List) getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreProformaHeader as sph where sph.Department.Id='"
					+ deptId + "' and sph.Status='y' and sph.Hospital.Id='"+hospitalId+"'");*/
			// commnet and added  by javed khan by girjesh sir
			storeProformaNoList=(List) getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreProformaHeader as sph where sph.Department.Id='"
					+ deptId + "' and sph.Status='p' and sph.Hospital.Id='"+hospitalId+"'");


			for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
				if (storeFyDocumentNo.getGrnNo() != null) {
					no = ("" + storeFyDocumentNo.getGrnNo());
					no = getMaxNo(no);
				} else {
					no = getMaxNo("");
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("supplierList", supplierList);
		map.put("uomList", uomList);
		map.put("manufacturerList", manufacturerList);
		map.put("searchGrnList", searchGrnList);
		map.put("employeeList", employeeList);
		map.put("unitList", unitList);
		map.put("grnList", grnList);
		map.put("brandList", brandList);
		map.put("trueUnitList",trueUnitList);
		map.put("max", no);
		map.put("storeProformaNoList",storeProformaNoList);
		
		System.out.println("storeProformaNoList="+storeProformaNoList.size());
		return map;

	}

	public Map searchGrn(Map searchFieldMap){
		Map<String, Object> map = new HashMap<String, Object>();

		String fromDate="";
		String toDate="";
		String supplyType="";
		List<StoreGrnM> gridGrnHeaderList = new ArrayList<StoreGrnM>();
		//List<StoreGrnT> gridGrnDetailList = new ArrayList<StoreGrnT>();
		String grnNo = "";
		Integer deptId = 0;
		Integer hospitalId=0;
		if (searchFieldMap.get("deptId") != null
				&& !searchFieldMap.get("deptId").equals("")) {
			deptId = (Integer) searchFieldMap.get("deptId");
		}
		if(searchFieldMap.get("hospitalId")!=null && !searchFieldMap.get("hospitalId").equals(""))
		{
			hospitalId=(Integer) searchFieldMap.get("hospitalId");
		}
		if(searchFieldMap.get("supplyType")!=null && !searchFieldMap.get("supplyType").equals(""))
		{
			supplyType=(String) searchFieldMap.get("supplyType");
		}


		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();

		session = (Session) getSession();
		try {

			/*gridGrnDetailList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreGrnT ");*/

			Criteria c = session.createCriteria(StoreGrnM.class).add(
					Restrictions.ne("Status", "v")).add(
							Restrictions.eq("Department.Id", deptId)).add(Restrictions.eq("Hospital.Id", hospitalId)).add(Restrictions.eq("ReceiveType", supplyType).ignoreCase());

			if ((!searchFieldMap.get("fromDate").equals(""))
					&& (!searchFieldMap.get("toDate").equals(""))) {
				fromDate = (String) searchFieldMap.get("fromDate");
				toDate = (String) searchFieldMap.get("toDate");

				SimpleDateFormat formatterIn = new SimpleDateFormat(
				"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
				"yyyy-MM-dd");
				String date4MySQL2 = formatterOut.format(formatterIn
						.parse(toDate));
				String date4ToMySQL = formatterOut.format(formatterIn.parse(toDate));
				Date datestr1 = java.sql.Date.valueOf(date4ToMySQL);
				SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
				String eDate=sdf.format(datestr1);
				Date endDate=sdf.parse(eDate);

				String date4MySQL = formatterOut.format(formatterIn.parse(fromDate));
				Date datestr = java.sql.Date.valueOf(date4MySQL);
				SimpleDateFormat sdf1 = new SimpleDateFormat("dd-MMM-yyyy");
				String sDate=sdf1.format(datestr);
				Date startDate=sdf1.parse(sDate);
				// gridGrnDetailList = getHibernateTemplate().find("from
				// jkt.hms.masters.business.StoreGrnT ");
				// gridGrnHeaderList = getHibernateTemplate().find("from
				// jkt.hms.masters.business.StoreGrnM as poh where " +
				// " poh.GrnDate between '"+startDate+"' and '"+endDate+"'");
				c.add(Restrictions.between("GrnDate", startDate, endDate));
			}

			if (!searchFieldMap.get("grnNo").equals("")
					&& !searchFieldMap.get("grnNo").equals(0)) {
				grnNo = (String) searchFieldMap.get("grnNo");
				// gridGrnDetailList = getHibernateTemplate().find("from
				// jkt.hms.masters.business.StoreGrnT ");
				// gridGrnHeaderList = getHibernateTemplate().find("from
				// jkt.hms.masters.business.StoreGrnM as pod where pod.GrnNo =
				// '"+grnNo+"'");
				c.add(Restrictions.eq("GrnNo", grnNo));

			}
			gridGrnHeaderList = c.list();
		} catch (Exception e) {
			e.printStackTrace();
		}


		//map.put("gridGrnDetailList", gridGrnDetailList);
		map.put("gridGrnHeaderList", gridGrnHeaderList);

		return map;
	}

	@SuppressWarnings("unchecked")
	/*
	 * public Map getGrnModifyMap(int radio_str) {
	 *
	 * Map map=new HashMap(); List<StoreGrnM> gridGrnMList= new ArrayList<StoreGrnM>();
	 * List<StoreGrnT> gridGrnTList= new ArrayList<StoreGrnT>(); List<MasStoreSupplier>
	 * gridSupplierList= new ArrayList<MasStoreSupplier>(); List<MasUnitOfMeasurement>
	 * gridUomList= new ArrayList<MasUnitOfMeasurement>(); List<MasEmployee
	 * >gridEmployeeList= new ArrayList<MasEmployee>(); List<StoreIndentM
	 * >gridIndentList= new ArrayList<StoreIndentM>();
	 *
	 * int id=0; gridGrnMList = getHibernateTemplate().find("from
	 * jkt.hms.masters.business.StoreGrnM as md where md.Id = '"+radio_str+"'");
	 * for (StoreGrnM storeGrnM :gridGrnMList ) { id=storeGrnM.getId(); }
	 *
	 * gridGrnTList = getHibernateTemplate().find("from
	 * jkt.hms.masters.business.StoreGrnT "); gridSupplierList =
	 * getHibernateTemplate().find("from
	 * jkt.hms.masters.business.MasStoreSupplier "); gridUomList=
	 * getHibernateTemplate().find("from
	 * jkt.hms.masters.business.MasUnitOfMeasurement ");
	 * gridEmployeeList=getHibernateTemplate().find("from
	 * jkt.hms.masters.business.MasEmployee ");
	 * gridIndentList=getHibernateTemplate().find("from
	 * jkt.hms.masters.business.StoreIndentM ");
	 * map.put("gridGrnMList",gridGrnMList);
	 * map.put("gridGrnTList",gridGrnTList); map.put("gridUomList",gridUomList);
	 * map.put("gridSupplierList",gridSupplierList); map.put("gridEmployeeList",
	 * gridEmployeeList); map.put("gridIndentList", gridIndentList);
	 * map.put("grnId", id );
	 *
	 * return map; }
	 */
	/*
	 * public Map<String,Object> grnModifyMap(int grnId,int pageNo) {
	 * //System.out.println("inside grnModifyMap"); Map<String,Object> map=new
	 * HashMap<String,Object>(); List<StoreGrnT> storeGrnTlist = new ArrayList<StoreGrnT>();
	 * List<StoreGrnM> grnMList = new ArrayList<StoreGrnM>();
	 *  List<MasStoreSupplier>supplierList=new ArrayList<MasStoreSupplier>(); List<MasEmployee>employeeList= new
	 * ArrayList<MasEmployee>(); List<MasStoreItem>itemList= new ArrayList<MasStoreItem>();
	 * int firstResult = 0; int maxResults = 10;
	 *
	 * if(pageNo != 0){ firstResult = firstResult + ( pageNo ) * 10; }
	 *
	 * Session session = (Session)getSession(); Criteria c =
	 * session.createCriteria(StoreGrnT.class).add(Restrictions.eq("GrnMaster.Id",
	 * grnId)); c.setFirstResult(firstResult); c.setMaxResults(maxResults);
	 * storeGrnTlist = c.list(); grnMList =
	 * session.createCriteria(StoreGrnM.class).add(Restrictions.eq("Id",
	 * grnId)).list(); supplierList =
	 * session.createCriteria(MasStoreSupplier.class).add(Restrictions.eq("Status",
	 * "y")).list(); employeeList=
	 * session.createCriteria(MasEmployee.class).add(Restrictions.eq("Status",
	 * "y")).list();
	 *
	 * map.put("storeGrnTlist", storeGrnTlist); map.put("grnMList", grnMList);
	 * map.put("supplierList", supplierList); map.put("employeeList",
	 * employeeList); return map; }
	 */
	public Map<String, Object> modifyGrn(int grnId, int pageNo, int spoId,
			String items) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreGrnM> gridGrnMList = new ArrayList<StoreGrnM>();
		List<StoreGrnT> gridGrnTList = new ArrayList<StoreGrnT>();
		List objectList1 = new ArrayList();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier>();
		List<MasManufacturer> manufacturerList = new ArrayList<MasManufacturer>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<MasStoreAirForceDepot> unitList = new ArrayList<MasStoreAirForceDepot>();
		List<MasUnit> otherunitList = new ArrayList<MasUnit>();
		List<StorePoDetail> poList = new ArrayList<StorePoDetail>();
		int firstResult = 0;

		if (pageNo != 0) {
			firstResult = firstResult + (pageNo) * 10;
		}
		Session session = (Session) getSession();
		Criteria c = session.createCriteria(StoreGrnT.class).add(
				Restrictions.eq("GrnMaster.Id", grnId));
		gridGrnTList = c.list();
		gridGrnMList = session.createCriteria(StoreGrnM.class).add(Restrictions.eq("Id", grnId)).list();

		if (items.trim().length() > 0) {
			if (spoId != 0) {
				StringTokenizer str = new StringTokenizer(items, ",");
				while (str.hasMoreTokens()) {
					objectList1.add(Integer.parseInt("" + str.nextToken()));
				}

				Criteria c2 = session.createCriteria(MasStoreBrand.class).add(
						Restrictions.in("Item.Id", objectList1));
				brandList = c2.list();

				Criteria c3 = session.createCriteria(StorePoDetail.class).add(
						Restrictions.eq("Po.Id", spoId)).add(Restrictions.in("Item.Id", objectList1));
				poList = c3.list();
			}
		}

		supplierList = getHibernateTemplate()
		.find(
				"from jkt.hms.masters.business.MasStoreSupplier as ms order by ms.SupplierName");
		manufacturerList = getHibernateTemplate()
		.find(
				"from jkt.hms.masters.business.MasManufacturer as mi where mi.Status = 'y' order by mi.ManufacturerName");
		employeeList = getHibernateTemplate()
		.find(
				"from jkt.hms.masters.business.MasEmployee as mi where mi.Status = 'y' order by mi.FirstName");
		unitList = getHibernateTemplate()
		.find(
				"from jkt.hms.masters.business.MasStoreAirForceDepot as mi where mi.Status = 'y' order by mi.AirForceDepotName");
		otherunitList = getHibernateTemplate()
		.find(
				"from jkt.hms.masters.business.MasUnit as mi where mi.Status = 'y'");
		List<StoreGrnM> grnList = new ArrayList<StoreGrnM>();
		grnList = getHibernateTemplate().find(
		"from jkt.hms.masters.business.StoreGrnM as sgm");
		map.put("grnList", grnList);
		map.put("gridGrnTList", gridGrnTList);
		map.put("supplierList", supplierList);
		map.put("gridGrnMList", gridGrnMList);
		map.put("poList", poList);
		map.put("brandList", brandList);
		map.put("manufacturerList", manufacturerList);
		map.put("employeeList", employeeList);
		map.put("unitList", unitList);
		map.put("otherunitList", otherunitList);

		return map;
	}

	public List<StoreGrnM> getGrnList() {
		Session session = (Session) getSession();
		List<StoreGrnM> grnList = session.createCriteria(StoreGrnM.class).add(
				Restrictions.eq("Status", "y")).list();
		return grnList;
	}

	public boolean updateGrn(StoreGrnM storeGrnM, List storeGrnTlist) {
		boolean successfullyAdded = false;

		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");

		hbt.setCheckWriteOperations(false);

		try {

			hbt.update(storeGrnM);
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {

			if (storeGrnTlist.size() > 0) {

				for (int i = 0; i < storeGrnTlist.size(); i++) {
					StoreGrnT storeGrnT = new StoreGrnT();
					storeGrnT = (StoreGrnT) storeGrnTlist.get(i);
					hbt.update(storeGrnT);
				}

			}
			successfullyAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;
	}

	public Map<String, Object> getDetailsForMoreInfoGrn() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasManufacturer> manufacturerList = new ArrayList<MasManufacturer>();
		manufacturerList = getHibernateTemplate()
		.find(
				"from jkt.hms.masters.business.MasManufacturer as mm where mm.Status = 'y'");
		map.put("manufacturerList", manufacturerList);

		return map;
	}

	public List<StoreGrnT> getStoreGrnTListForMoreInfo(int storeGrnTId) {
		Session session = (Session) getSession();
		List<StoreGrnT> storeGrnTMoreInfoList = session.createCriteria(
				StoreGrnT.class).add(Restrictions.eq("Id", storeGrnTId)).list();
		return storeGrnTMoreInfoList;
	}

	@SuppressWarnings( { "unused", "unchecked" })
	public List<StoreGrnM> getGrn(int grnId) {
		Session session = (Session) getSession();
		List<StoreGrnM> grnMList = session.createCriteria(StoreGrnM.class).add(
				Restrictions.eq("Id", grnId)).list();
		return grnMList;
	}

	// ////////////////////////////////LOAN IN //////////////////////////////
	public Map<String, Object> showLoanInJsp(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		if (dataMap.get("deptId") != null)
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		if (dataMap.get("hospitalId") != null)
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		if (dataMap.get("userName") != null)
			userName = ("" + dataMap.get("userName"));

		List<StorePoHeader> poList = new ArrayList<StorePoHeader>();
		List<StoreLoaninM> searchLoanInList = new ArrayList<StoreLoaninM>();
		List<StoreLoaninM> loaninList = new ArrayList<StoreLoaninM>();
		List<MasManufacturer> manufacturerList = new ArrayList<MasManufacturer>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		String max = "";
		String startNo = "";
		String no = "";

		Session session = (Session) getSession();
		try {
			poList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StorePoHeader as mi where mi.Status='o'");
			searchLoanInList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreLoaninM as sl where sl.Department.Id='"
					+ deptId + "' and sl.Hospital.Id='"+hospitalId+"'");
			loaninList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.StoreLoaninM as sl");
			manufacturerList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasManufacturer as am where am.Hospital.Id='"+hospitalId+"'");
			supplierList = getHibernateTemplate().find("from jkt.hms.masters.business.MasStoreSupplier as ms where ms.Hospital.Id='"+hospitalId+"' order by ms.SupplierName");

			employeeList = getHibernateTemplate().find("from jkt.hms.masters.business.MasEmployee as mi where mi.Status = 'y' and mi.Hospital.Id='"+hospitalId+"' order by mi.FirstName asc");

			/*storeFyDocumentNoList = (List) getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"
					+ deptId + "' and sfdn.Hospital.Id='"+hospitalId+"' order by sfdn.LoaninStartNo");*/
			storeFyDocumentNoList =session.createCriteria(StoreFyDocumentNo.class)
			.add(Restrictions.eq("Department.Id", deptId))
			.add(Restrictions.eq("Hospital.Id", hospitalId))
			.addOrder(Order.asc("LoaninStartNo")).list();
			
			
			for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
				if (storeFyDocumentNo.getLoaninNo() != null) {
					no = ("" + storeFyDocumentNo.getLoaninStartNo());
					no = getMaxNo(no);
				} else {
					no = getMaxNo("");
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		
		
		map.put("poList", poList);
		map.put("searchLoanInList", searchLoanInList);
		map.put("loaninList", loaninList);
		map.put("manufacturerList", manufacturerList);
		map.put("brandList", brandList);
		map.put("supplierList", supplierList);
		map.put("employeeList", employeeList);
		map.put("max", no);
		return map;

	}
	public boolean addLoanIn(Map<String, Object> infoMap,
			Map<String, Object> dataMap) {
		StoreLoaninM storeLoaninM = (StoreLoaninM) infoMap.get("storeLoaninM");
		List<StoreLoaninT> storeLoaninTlist = (ArrayList<StoreLoaninT>) infoMap
		.get("storeLoaninTlist");
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		boolean successfullyAdded = false;
		StoreItemBatchStock storeItemBatchStock1 = new StoreItemBatchStock();
		StoreLoaninM storeLoaninM2 = new StoreLoaninM();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		int poHeaderId = 0;
		String max = "";
		String no = "";

		if (dataMap.get("deptId") != null)
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		if (dataMap.get("hospitalId") != null)
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		if (dataMap.get("userName") != null)
			userName = ("" + dataMap.get("userName"));
		if (dataMap.get("poId") != null)
			poHeaderId = Integer.parseInt("" + dataMap.get("poId"));

		int storeFyId = 0;

		session = (Session) getSession();
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (!(infoMap.get("headerStored") + "").equals("yes")) {

				hbt.save(storeLoaninM);
				int poId = storeLoaninM.getId();
				String loanInNo = "";
				loanInNo = (String) infoMap.get("loanInNo");
				Criteria c = session.createCriteria(StoreFyDocumentNo.class)
				.add(Restrictions.eq("Department.Id", deptId));
				storeFyDocumentNoList = c.list();
				for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
					storeFyId = documentNo.getId();
				}
				StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
				.load(StoreFyDocumentNo.class, storeFyId);
				storeFyDocumentNo.setLoaninNo(loanInNo);
				hbt.update(storeFyDocumentNo);

			}

			// Updating Status in StorePoHeader as "p", so that after loanin
			// Entry has made successfully, StorePoHeader & StorePoDetail
			// cannot be changed
			StorePoHeader storePoHeader = (StorePoHeader) getHibernateTemplate()
			.load(StorePoHeader.class, poHeaderId);
			storePoHeader.setStatus("p");
			hbt.update(storePoHeader);

			List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
			StoreItemBatchStock storeItemBatchStock = null;

			if (storeLoaninTlist.size() > 0) {

				if ((infoMap.get("headerStored") + "").equals("yes")) {
					int id = Integer.parseInt("" + infoMap.get("loanInId"));
					storeLoaninM2.setId(id);
				}

				for (int i = 0; i < storeLoaninTlist.size(); i++) {
					StoreLoaninT StoreLoaninTObj = new StoreLoaninT();
					StoreLoaninTObj = (StoreLoaninT) storeLoaninTlist.get(i);
					if ((infoMap.get("headerStored") + "").equals("yes")) {

						StoreLoaninTObj.setLoaninMaster(storeLoaninM2);
					} else {
						StoreLoaninTObj.setLoaninMaster(storeLoaninM);
					}
					hbt.save(StoreLoaninTObj);

					// Updating Quantity Received in StorePoDetail for the
					// particular Item
					List<StorePoDetail> storePoDetailList = new ArrayList<StorePoDetail>();
					StorePoDetail storePoDetail = new StorePoDetail();
					storePoDetailList = session.createCriteria(
							StorePoDetail.class).add(
									Restrictions.eq("Po.Id", poHeaderId)).add(
											Restrictions.eq("Item.Id", StoreLoaninTObj
													.getItem().getId())).list();
					if (storePoDetailList != null
							&& storePoDetailList.size() > 0) {
						storePoDetail = storePoDetailList.get(0);
						BigDecimal existingQuantity = null;
						BigDecimal quantity_to_be_added = null;
						BigDecimal newQuantity = new BigDecimal(0);
						BigDecimal mdq = storePoDetail.getMdqValue();

						BigDecimal recd_qty = StoreLoaninTObj.getReceivedQty();
						existingQuantity = storePoDetail.getQuantityReceived();
						quantity_to_be_added = recd_qty.divide(mdq,
								new MathContext(4, RoundingMode.UP));

						if (existingQuantity == null)
							existingQuantity = new BigDecimal(0);

						newQuantity = existingQuantity
						.add(quantity_to_be_added);
						storePoDetail.setQuantityReceived(newQuantity);
						hbt.update(storePoDetail);
					}

					int item_id = StoreLoaninTObj.getItem().getId();
					int brand_id = StoreLoaninTObj.getBrand().getId();
					BigDecimal cost_price = StoreLoaninTObj.getFinalCostPrice();
					String batch_no = StoreLoaninTObj.getBatchNo();
					int department_id = storeLoaninM.getDepartment().getId();
					List<StoreItemBatchStock> temp = new ArrayList<StoreItemBatchStock>();
					temp = hbt
					.find("from jkt.hms.masters.business.StoreItemBatchStock");
					if (temp != null & temp.size() > 0) {
						for (Iterator iterator = temp.iterator(); iterator
						.hasNext();) {
							StoreItemBatchStock t = (StoreItemBatchStock) iterator
							.next();
						}
					}

					storeItemBatchStockList = hbt
					.find("from jkt.hms.masters.business.StoreItemBatchStock as inp where inp.Item.Id = "
							+ item_id
							+ " and inp.CostPrice = "
							+ cost_price
							+ " and inp.Department.Id= "
							+ department_id
							+ " and inp.BatchNo = '"
							+ batch_no
							+ "' and inp.Brand.Id = "
							+ brand_id);
					if (storeItemBatchStockList != null
							&& storeItemBatchStockList.size() > 0) {
						int free_qty = 0;
						free_qty = StoreLoaninTObj.getFreeQty();
						int id = storeItemBatchStockList.get(0).getId();
						storeItemBatchStock = (StoreItemBatchStock) hbt.load(
								StoreItemBatchStock.class, id);

						BigDecimal existing_qty = storeItemBatchStock
						.getLoanInQty();
						BigDecimal recd_qty = StoreLoaninTObj.getReceivedQty();
						BigDecimal new_qty = existing_qty.add(recd_qty);

						BigDecimal existing_closing_stock = storeItemBatchStock
						.getClosingStock();
						BigDecimal new_closing_stock = existing_closing_stock
						.add(recd_qty);
						storeItemBatchStock.setLoanInQty(new_qty
								.add(new BigDecimal(free_qty)));
						storeItemBatchStock.setClosingStock(new_closing_stock
								.add(new BigDecimal(free_qty)));
						hbt.update(storeItemBatchStock);
					} else {
						storeItemBatchStock = new StoreItemBatchStock();
						storeItemBatchStock.setDepartment(storeLoaninM
								.getDepartment());
						storeItemBatchStock.setItem(StoreLoaninTObj.getItem());
						storeItemBatchStock.setBatchNo(StoreLoaninTObj
								.getBatchNo());
						if (StoreLoaninTObj.getLotNo() != null) {
							storeItemBatchStock.setLotNo(StoreLoaninTObj
									.getLotNo());
						} else {
							storeItemBatchStock.setLotNo(StoreLoaninTObj
									.getItem()
									+ ","
									+ StoreLoaninTObj.getBatchNo()
									+ ","
									+ StoreLoaninTObj.getBrand());
						}
						int free_qty = 0;
						free_qty = StoreLoaninTObj.getFreeQty();

						BigDecimal recd_qty = StoreLoaninTObj.getReceivedQty();

						storeItemBatchStock.setLoanInQty(recd_qty
								.add(new BigDecimal(free_qty)));
						storeItemBatchStock.setFreeItem(StoreLoaninTObj
								.getFreeItem());
						storeItemBatchStock
						.setBrand(StoreLoaninTObj.getBrand());
						storeItemBatchStock.setCostPrice(StoreLoaninTObj
								.getFinalCostPrice());
						storeItemBatchStock.setClosingStock(recd_qty
								.add(new BigDecimal(free_qty)));
						storeItemBatchStock.setExpiryDate(StoreLoaninTObj
								.getExpiryDate());
						storeItemBatchStock.setFreeItem(StoreLoaninTObj
								.getFreeItem());

						// HibernateTemplate hbt1 = getHibernateTemplate();
						// hbt1.setFlushModeName("FLUSH_EAGER");
						// hbt1.setCheckWriteOperations(false);
						hbt.save(storeItemBatchStock);
						hbt.refresh(storeItemBatchStock);
					}
				}
			}

			successfullyAdded = true;
			tx.commit();

		} catch (Exception e) {
			if (tx != null)
				tx.rollback();
			// throw e; // or display error message
			e.printStackTrace();
		} finally {
			//session.close();
		}

		return successfullyAdded;
	}

	public Map getViewAllMap() {

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier>();
		List<StoreLoaninT> storeLoaninTList = new ArrayList<StoreLoaninT>();
		List<StoreLoaninM> storeLoaninMList = new ArrayList<StoreLoaninM>();
		Session session = (Session) getSession();
		try {
			storeLoaninTList = session.createCriteria(StoreLoaninT.class)
			.list();
			supplierList = session.createCriteria(MasStoreSupplier.class).add(
					Restrictions.eq("Status", "y")).list();
			storeLoaninMList = session.createCriteria(StoreLoaninM.class).add(
					Restrictions.eq("Status", "y")).list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("storeLoaninMList", storeLoaninMList);
		map.put("storeLoaninTList", storeLoaninTList);
		map.put("supplierList", supplierList);

		return map;
	}

	public Map searchLoanin(Map searchFieldMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		String fromDate = "";
		String toDate = "";
		List<StoreLoaninM> gridLoaninHeaderList = new ArrayList<StoreLoaninM>();
		List<StoreLoaninT> gridLoaninDetailList = new ArrayList<StoreLoaninT>();
		String loanInNo = "";
		try {
			if ((!searchFieldMap.get("fromDate").equals(""))
					&& (!searchFieldMap.get("toDate").equals(""))) {
				fromDate = (String) searchFieldMap.get("fromDate");
				toDate = (String) searchFieldMap.get("toDate");

				SimpleDateFormat formatterIn = new SimpleDateFormat(
				"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
				"yyyy-MM-dd");
				String date4MySQL1 = formatterOut.format(formatterIn
						.parse(fromDate));
				String date4MySQL2 = formatterOut.format(formatterIn
						.parse(toDate));
				java.sql.Date startDate = java.sql.Date.valueOf(date4MySQL1);
				java.sql.Date endDate = java.sql.Date.valueOf(date4MySQL2);

				gridLoaninDetailList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreLoaninT ");
				gridLoaninHeaderList = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreLoaninM as poh where "
						+ " poh.GrnDate between '" + startDate
						+ "' and '" + endDate + "'");

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		try {
			if (!searchFieldMap.get("loanInNo").equals("0")) {
				loanInNo = (String) searchFieldMap.get("loanInNo");
				gridLoaninDetailList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreLoaninT ");
				gridLoaninHeaderList = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreLoaninM as pod where pod.LoaninNo = '"
						+ loanInNo + "'");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("gridLoaninDetailList", gridLoaninDetailList);
		map.put("gridLoaninHeaderList", gridLoaninHeaderList);

		return map;
	}
	// loan in update
	public Map<String , Object> ShowListOFLoanInForUpdate (){
		Map<String , Object> map = new HashMap<String ,Object >();
		Session session = (Session)getSession();
		List<StoreLoaninM> storeLoaninMList = new ArrayList<StoreLoaninM>();
		Criteria ctr = session.createCriteria(StoreLoaninM.class).add(Restrictions.isNull("GrnMaster"));
		storeLoaninMList = ctr.list();
		map.put("storeLoaninMList", storeLoaninMList);
		return map ;
	}
	public Map<String, Object> updateForLoanIn(Box box) {
		// TODO Auto-generated method stub
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		Session session = (Session)getSession();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");

		int deptId = 0;
		int hospitalId = 0;
		int supplierId = 0;
		int employeeId = 0;

		SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
		SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
		java.sql.Date loanInDate = null;
		java.sql.Date challanDate = null;

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");

		String challanNumber = "";
		String loaninNo = "";
		String max = "";
		String no = "";
		int po_id = 0;
		String userName = "";
		String remarks = "";
		BigDecimal loanInValue = null;
		BigDecimal discount = null;
		BigDecimal vat = null;

		// Collecting Parameter Values from Box

		deptId = box.getInt("deptId");
		hospitalId = box.getInt("hospitalId");
		userName = box.getString("userName");
		supplierId = box.getInt(SUPPLIER_ID);
		loaninNo = box.getString(LOANIN_NO);
		po_id = box.getInt(PO_ID);

		try {
			String date4MySQL = formatterOut.format(formatterIn.parse(box
					.getString(LOANIN_DATE)));
			loanInDate = java.sql.Date.valueOf(date4MySQL);
		} catch (Exception e) {
			loanInDate = null;
		}

		try {
			String date4MySQL = formatterOut.format(formatterIn.parse(box
					.getString(CHALLAN_DATE)));
			challanDate = java.sql.Date.valueOf(date4MySQL);
		} catch (Exception e) {
			challanDate = null;
		}

		challanNumber = box.getString(CHALLAN_NO);
		employeeId = box.getInt(EMPLOYEE_ID);

		try {
			loanInValue = new BigDecimal(box.getString("loanInValue"));
		} catch (Exception e) {
			loanInValue = new BigDecimal(0);
		}

		remarks = box.getString(REMARKS);
		int loanInMId = box.getInt(LOANIN_ID);
		// Create StoreLoanInM object and Set the Values
		StoreLoaninM storeLoaninM =null;
		if(loanInMId != 0 ){
			storeLoaninM =(StoreLoaninM)(session.createCriteria(StoreLoaninM.class).add(Restrictions.eq("Id", loanInMId)).list().get(0));
			storeLoaninM.setChallanDate(challanDate);
			storeLoaninM.setChallanNo(challanNumber);

			storeLoaninM.setLastChgBy(userName);
			storeLoaninM.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(date));
			storeLoaninM.setLastChgTime(time);
			storeLoaninM.setLoaninAmount(loanInValue);
			storeLoaninM.setLoaninDate(loanInDate);
			storeLoaninM.setLoaninValue(loanInValue);
			storeLoaninM.setRemarks(remarks);

			if (supplierId != 0) {
				storeLoaninM.setSupplier(new MasStoreSupplier(supplierId));
			}

			try {
				storeLoaninM.setEmployee(new MasEmployee(employeeId));
			} catch (Exception e) {
				storeLoaninM.setEmployee(null);
			}

		}



		// Create StoreLoanInTList Contains StoreLoanInT Objects and Set the
		// Corresponding Values
		List<StoreLoaninT> storeLoaninTList = new ArrayList<StoreLoaninT>();
		StoreLoaninT storeLoaninT = null;

		Vector itemId = box.getVector(ITEM_ID);
		Vector brandId = box.getVector(BRAND_ID);
		Vector manufacturerId = box.getVector(MANUFACTURER_ID);
		Vector batchNo = box.getVector(BATCH_NO);
		Vector lotNo = box.getVector(LOT_NO);
		Vector receivedQty = box.getVector(QUANTITY_RECEIVED);
		Vector freeQty = box.getVector(FREE_QTY);
		Vector dispType = box.getVector("dispenseType");
		Vector mdqValue = box.getVector("mdq");
		Vector ratePerMdq = box.getVector("ratePerMdq");
		Vector convertedStock = box.getVector("convertedStock");
		Vector discountAmount = box.getVector("discountAmount");
		Vector taxAmount = box.getVector(TAX_PERCENT);
		Vector finalCostPrice = box.getVector(COST_PRICE);
		Vector amountValue = box.getVector(AMOUNT);
		Vector freeItem = box.getVector(FREE_ITEM);
		Vector manufacturerDate = box.getVector(MANUFACTURING_DATE);
		Vector expiryDate = box.getVector(EXPIRY_DATE);
		Vector flag = box.getVector("flag");
		int slno = 1;
		for (int i = 0; i < itemId.size(); i++) {
			if (itemId.get(i).toString().equalsIgnoreCase("0"))
				break;
			storeLoaninT = new StoreLoaninT();
			storeLoaninT.setSerialNo(slno++);
			storeLoaninT.setItem(new MasStoreItem(new Integer(itemId.get(i)
					.toString())));
			storeLoaninT.setBrand(new MasStoreBrand(new Integer(brandId.get(i)
					.toString())));
			storeLoaninT.setManufacturer(new MasManufacturer(new Integer(
					manufacturerId.get(i).toString())));
			storeLoaninT.setBatchNo(batchNo.get(i).toString());
			storeLoaninT.setLotNo(lotNo.get(i).toString());
			try {
				storeLoaninT.setReceivedQty(new BigDecimal(receivedQty.get(i)
						.toString()));
			} catch (Exception e) {
				storeLoaninT.setReceivedQty(new BigDecimal(0));
			}

			try {
				storeLoaninT.setFreeQty(new Integer(freeQty.get(i).toString()));
			} catch (Exception e) {
				storeLoaninT.setFreeQty(new Integer(0));
			}

			try {
				storeLoaninT.setDiscount(new BigDecimal(discountAmount.get(i)
						.toString()));
			} catch (Exception e) {
				storeLoaninT.setDiscount(null);
			}

			try {
				storeLoaninT
				.setTax(new BigDecimal(taxAmount.get(i).toString()));
			} catch (Exception e) {
				storeLoaninT.setTax(null);
			}

			try {
				storeLoaninT.setFinalCostPrice(new BigDecimal(finalCostPrice
						.get(i).toString()));
			} catch (Exception e) {
				storeLoaninT.setFinalCostPrice(new BigDecimal(0));
			}

			try {
				storeLoaninT.setAmountValue(new BigDecimal(amountValue.get(i)
						.toString()));
			} catch (Exception e) {
				storeLoaninT.setAmountValue(new BigDecimal(0));
			}

			storeLoaninT.setFreeItem(freeItem.get(i).toString());
			storeLoaninT.setDispType(dispType.get(i).toString());
			try {
				storeLoaninT.setMdqValue(new BigDecimal(mdqValue.get(i)
						.toString()));
			} catch (Exception e) {
				storeLoaninT.setMdqValue(new BigDecimal(0));
			}

			try {
				storeLoaninT.setRatePerMdq(new BigDecimal(ratePerMdq.get(i)
						.toString()));
			} catch (Exception e) {
				storeLoaninT.setRatePerMdq(new BigDecimal(0));
			}

			try {
				storeLoaninT.setUnitRate(new BigDecimal(ratePerMdq.get(i)
						.toString()));
			} catch (Exception e) {
				storeLoaninT.setUnitRate(new BigDecimal(0));
			}

			try {
				storeLoaninT.setManufacturerDate(formatterOut
						.format(formatterIn.parse(manufacturerDate.get(i)
								.toString())));
			} catch (Exception e) {
				storeLoaninT.setManufacturerDate(null);
			}
			try {
				storeLoaninT.setExpiryDate(java.sql.Date
						.valueOf(formatterOut.format(formatterIn
								.parse(expiryDate.get(i).toString()))));
			} catch (Exception e) {
				storeLoaninT.setExpiryDate(null);
			}
			storeLoaninTList.add(storeLoaninT);
		}

		// Save the Persistence Objects

		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			hbt.save(storeLoaninM);
			hbt.refresh(storeLoaninM);

			/*
			 * Updating the Stock in StoreITemBatchStock
			 */
			String qry = "delete from jkt.hms.masters.business.StoreLoaninT t where t.LoaninMaster.Id= '"+loanInMId +"'";
			Query query = session.createQuery(qry);
			int row = query.executeUpdate();

			if (storeLoaninTList.size() > 0) {
				for (int i = 0; i < storeLoaninTList.size(); i++) {
					storeLoaninT = new StoreLoaninT();
					storeLoaninT = (StoreLoaninT) storeLoaninTList.get(i);
					storeLoaninT.setLoaninMaster(storeLoaninM);
					hbt.save(storeLoaninT);
					hbt.refresh(storeLoaninT);

				}
			}


			tx.commit();
			map.put("messageTOBeVisibleToTheUser",
			"Loan In Update Successfully");
		} catch (Exception e) {
			e.printStackTrace();
			if (tx != null) {
				tx.rollback();
				map.put("messageTOBeVisibleToTheUser",
				"Loan In Is Not Update !..... ");
			}
			// throw e; // or display error message
			e.printStackTrace();
		}
		return map;
	}


	// end  loan in update

	/*
	 * public Map getLoanInModifyMap(int radio_str) {
	 *
	 * Map map=new HashMap(); List<StoreLoaninM> gridLoaninMList= new ArrayList<StoreLoaninM>();
	 * List<StoreLoaninT> gridLoaninTList= new ArrayList<StoreLoaninT>(); List<MasStoreSupplier>
	 * gridSupplierList= new ArrayList<MasStoreSupplier>(); List<MasUnitOfMeasurement>
	 * gridUomList= new ArrayList<MasUnitOfMeasurement>(); List<MasEmployee
	 * >gridEmployeeList= new ArrayList<MasEmployee>(); List<StorePoHeader
	 * >gridPoList= new ArrayList<StorePoHeader>(); List<MasStoreItem>
	 * itemList= new ArrayList<MasStoreItem>();
	 *
	 * int id=0; gridLoaninMList = getHibernateTemplate().find("from
	 * jkt.hms.masters.business.StoreLoaninM as md where md.Id =
	 * '"+radio_str+"'"); for (StoreLoaninM storeLoaninM :gridLoaninMList ) {
	 * id=storeLoaninM.getId(); }
	 *
	 * gridLoaninTList = getHibernateTemplate().find("from
	 * jkt.hms.masters.business.StoreLoaninT "); gridSupplierList =
	 * getHibernateTemplate().find("from
	 * jkt.hms.masters.business.MasStoreSupplier "); gridUomList=
	 * getHibernateTemplate().find("from
	 * jkt.hms.masters.business.MasUnitOfMeasurement ");
	 * gridEmployeeList=getHibernateTemplate().find("from
	 * jkt.hms.masters.business.MasEmployee ");
	 * gridPoList=getHibernateTemplate().find("from
	 * jkt.hms.masters.business.StorePoHeader "); itemList=
	 * getHibernateTemplate().find("from jkt.hms.masters.business.MasStoreItem
	 * as msi where msi.Status = 'y' and msi.Id < 100");
	 * map.put("gridLoaninMList",gridLoaninMList);
	 * map.put("gridLoaninTList",gridLoaninTList);
	 * map.put("gridUomList",gridUomList);
	 * map.put("gridSupplierList",gridSupplierList); map.put("gridEmployeeList",
	 * gridEmployeeList); map.put("gridPoList", gridPoList); map.put("itemList",
	 * itemList); map.put("grnId", id );
	 *
	 * return map; }
	 *
	 * public Map<String,Object> modifyLoanin(int loanInId,int pageNo) { Map<String,Object>
	 * map=new HashMap<String,Object>(); List<StoreLoaninT> storeLoanInTList =
	 * new ArrayList<StoreLoaninT>(); List<StoreLoaninM> storeLoanInMList =
	 * new ArrayList<StoreLoaninM>(); List<MasStoreSupplier> supplierList= new
	 * ArrayList<MasStoreSupplier>(); List<MasStoreItem> itemList= new
	 * ArrayList<MasStoreItem>(); List<MasEmployee> employeeList= new
	 * ArrayList<MasEmployee>(); int firstResult = 0; int maxResults = 10;
	 *
	 * if(pageNo != 0){ firstResult = firstResult + ( pageNo ) * 10; } Session
	 * session = (Session)getSession(); Criteria c =
	 * session.createCriteria(StoreLoaninT.class).add(Restrictions.eq("LoaninMaster.Id",
	 * loanInId)); c.setFirstResult(0); c.setMaxResults(10); storeLoanInTList =
	 * c.list(); //System.out.println("storeLoanInTList
	 * "+storeLoanInTList.size()); storeLoanInMList =
	 * session.createCriteria(StoreLoaninM.class).add(Restrictions.eq("Id",
	 * loanInId)).list(); //System.out.println("storeLoanInMList
	 * "+storeLoanInTList.size()); supplierList =
	 * session.createCriteria(MasStoreSupplier.class).add(Restrictions.eq("Status",
	 * "y")).list(); employeeList=
	 * session.createCriteria(MasEmployee.class).add(Restrictions.eq("Status",
	 * "y")).list(); itemList=
	 * session.createCriteria(MasStoreItem.class).add(Restrictions.eq("Status",
	 * "y")).list(); map.put("itemList", itemList); map.put("employeeList",
	 * employeeList); map.put("supplierList", supplierList);
	 * map.put("storeLoanInTList", storeLoanInTList);
	 * map.put("storeLoanInMList", storeLoanInMList); return map; }
	 */
	public Map<String, Object> modifyLoanin(int loanInId, int pageNo) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreLoaninT> storeLoanInTList = new ArrayList<StoreLoaninT>();
		List<StoreLoaninM> storeLoanInMList = new ArrayList<StoreLoaninM>();
		List<StoreLoaninM> searchLoanInList = new ArrayList<StoreLoaninM>();

		int firstResult = 0;
		int maxResults = 10;
		int deptId = 0;

		if (pageNo != 0) {
			firstResult = firstResult + (pageNo) * 10;
		}

		Session session = (Session) getSession();
		Criteria c = session.createCriteria(StoreLoaninT.class).add(
				Restrictions.eq("LoaninMaster.Id", loanInId));
		c.setFirstResult(firstResult);
		c.setMaxResults(maxResults);
		storeLoanInTList = c.list();

		storeLoanInMList = session.createCriteria(StoreLoaninM.class).add(
				Restrictions.eq("Id", loanInId)).list();

		if (storeLoanInMList != null && storeLoanInMList.size() > 0)
			deptId = storeLoanInMList.get(0).getDepartment().getId();

		searchLoanInList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreLoaninM as sl where sl.Department.Id='"
				+ deptId + "'");

		map.put("storeLoanInTList", storeLoanInTList);
		map.put("storeLoanInMList", storeLoanInMList);
		map.put("searchLoanInList", searchLoanInList);
		return map;
	}

	public List<StoreLoaninT> getLoanInListForMoreInfo(int loaninDetailId) {
		Session session = (Session) getSession();
		List<StoreLoaninT> loanInMoreInfoList = session.createCriteria(
				StoreLoaninT.class).add(Restrictions.eq("Id", loaninDetailId))
				.list();
		return loanInMoreInfoList;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getDetailsForLoanIn() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasManufacturer> manufacturerList = new ArrayList<MasManufacturer>();
		Session session = (Session) getSession();

		manufacturerList = session.createCriteria(MasManufacturer.class).add(
				Restrictions.eq("Status", "y")).list();

		map.put("manufacturerList", manufacturerList);

		return map;
	}

	public boolean updateLoanIn(Map<String, Object> infoMap) {
		boolean successfullyAdded = false;
		StoreLoaninM storeLoaninM = null;
		int pageNo = 0;
		int loanInId = 0;
		List<StoreLoaninT> storeLoaninTlist = new ArrayList<StoreLoaninT>();

		if (infoMap.get("pageNo") != null) {
			pageNo = Integer.parseInt("" + infoMap.get("pageNo"));
		}
		if (infoMap.get("loanInId") != null) {
			loanInId = Integer.parseInt("" + infoMap.get("loanInId"));
		}

		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {
			if (pageNo == 1) {
				storeLoaninM = (StoreLoaninM) infoMap.get("storeLoaninM");
				hbt.update(storeLoaninM);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			if (infoMap.get("storeLoaninTlist") != null) {
				storeLoaninTlist = (List<StoreLoaninT>) infoMap
				.get("storeLoaninTlist");
				if (storeLoaninTlist.size() > 0) {
					for (int i = 0; i < storeLoaninTlist.size(); i++) {
						StoreLoaninT storeLoaninT = new StoreLoaninT();
						storeLoaninT = (StoreLoaninT) storeLoaninTlist.get(i);
						hbt.update(storeLoaninT);
					}
				}
				successfullyAdded = true;
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;
	}

	// -------------- BOO ENTRY-------------------------------
	public Map<String, Object> showBooJsp(Map<String, Object> infoMap) {

		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		if (infoMap.get("deptId") != null)
			deptId = Integer.parseInt("" + infoMap.get("deptId"));
		if (infoMap.get("hospitalId") != null)
			hospitalId = Integer.parseInt("" + infoMap.get("hospitalId"));
		if (infoMap.get("userName") != null)
			userName = ("" + infoMap.get("userName"));

		Map<String, Object> map = new HashMap<String, Object>();

		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<MasEmployee> presidingOfficerList = new ArrayList<MasEmployee>();
		List<MasEmployee> officerIcList = new ArrayList<MasEmployee>();
		List<MasRank> rankList = new ArrayList<MasRank>();
		List<MasRank> presidingOfficerRankList = new ArrayList<MasRank>();
		List<MasRank> officerIcRankList = new ArrayList<MasRank>();
		List<StoreBoo> searchBooList = new ArrayList<StoreBoo>();
		// List<StoreBoo>booList=new ArrayList<StoreBoo>();
		// List<StoreGrnM>crvList= new ArrayList<StoreGrnM>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<StoreFyDocumentNo> storeFyDocumentNo1List = new ArrayList<StoreFyDocumentNo>();
		String max = "";
		String startNo = "";
		String no = "";
		String crvno = "";
		String maxNo = "";
		Session session = (Session) getSession();

		employeeList = getHibernateTemplate().find(
		"from jkt.hms.masters.business.MasEmployee as me");
		presidingOfficerList = getHibernateTemplate().find(
		"from jkt.hms.masters.business.MasEmployee as me1");
		officerIcList = getHibernateTemplate().find(
		"from jkt.hms.masters.business.MasEmployee as me2");
		rankList = getHibernateTemplate().find(
		"from jkt.hms.masters.business.MasRank as mr");
		presidingOfficerRankList = getHibernateTemplate().find(
		"from jkt.hms.masters.business.MasRank as mr1");
		officerIcRankList = getHibernateTemplate().find(
		"from jkt.hms.masters.business.MasRank as mr2");
		searchBooList = getHibernateTemplate().find(
		"from jkt.hms.masters.business.StoreBoo as sb");
		// /booList=getHibernateTemplate().find("from
		// jkt.hms.masters.business.StoreBoo as sb1");
		// crvList=getHibernateTemplate().find("from
		// jkt.hms.masters.business.StoreGrnM as sb1");
		storeFyDocumentNoList = (List) getHibernateTemplate()
		.find(
				"from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"
				+ deptId + "'");
		storeFyDocumentNo1List = (List) getHibernateTemplate()
		.find(
				"from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"
				+ deptId + "'");

		for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNo1List) {
			if (storeFyDocumentNo.getGrnNo() != null) {
				crvno = ("" + storeFyDocumentNo.getGrnNo());
				crvno = getMaxNo(crvno);
			} else {
				crvno = getMaxNo("");
			}

		}
		// if(storeFyDocumentNo.getDepartment().getId()==24)
		// {
		// crvno=(""+storeFyDocumentNo.getGrnNo());
		// }
		// }
		// try{

		// maxNo=getMaxNo(crvno);
		// }catch (Exception e) {
		// // TODO: handle exception
		// }

		for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
			if (storeFyDocumentNo.getBooNo() != null) {
				no = ("" + storeFyDocumentNo.getBooNo());
				no = getMaxNo(no);
			} else {
				no = getMaxNo("");
			}
		}

		map.put("max", no);
		map.put("crvno", crvno);
		map.put("maxNo", maxNo);
		map.put("searchBooList", searchBooList);
		map.put("employeeList", employeeList);
		map.put("rankList", rankList);
		// map.put("booList", booList);
		map.put("presidingOfficerList", presidingOfficerList);
		map.put("officerIcList", officerIcList);
		map.put("presidingOfficerRankList", presidingOfficerRankList);
		map.put("officerIcRankList", officerIcRankList);
		// map.put("crvList", crvList);

		return map;
	}

	public boolean addBoo(Map<String, Object> infoMap) {
		StoreBoo storeBoo = (StoreBoo) infoMap.get("storeBoo");
		List<StoreBooMember> storeBooMlist = (ArrayList<StoreBooMember>) infoMap
		.get("storeBooMlist");
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		boolean successfullyAdded = false;
		int storeFyId = 0;
		int deptId = 0;
		String booNo = "";
		if (infoMap.get("deptId") != null)
			deptId = Integer.parseInt("" + infoMap.get("deptId"));
		session = (Session) getSession();
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			hbt.save(storeBoo);
			booNo = (String) infoMap.get("booNo");
			Criteria c = session.createCriteria(StoreFyDocumentNo.class).add(
					Restrictions.eq("Department.Id", deptId));
			storeFyDocumentNoList = c.list();
			for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
				storeFyId = documentNo.getId();
			}
			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
			.load(StoreFyDocumentNo.class, storeFyId);
			storeFyDocumentNo.setBooNo(booNo);

			hbt.update(storeFyDocumentNo);

			if (storeBooMlist.size() > 0) {

				for (int i = 0; i < storeBooMlist.size(); i++) {
					StoreBooMember storeBooMObj = new StoreBooMember();
					storeBooMObj = (StoreBooMember) storeBooMlist.get(i);
					storeBooMObj.setBoo(storeBoo);
					hbt.save(storeBooMObj);

				}
				int pageNo = 0;

				pageNo = Integer.parseInt("" + infoMap.get("pageNo"));
				booNo = (String) infoMap.get("booNo");

				successfullyAdded = true;
				tx.commit();
			}
		} catch (Exception e) {
			e.printStackTrace();
			if (tx != null)
				tx.rollback();
			// throw e; // or display error message
			e.printStackTrace();
		} finally {
			//session.close();
		}

		return successfullyAdded;
	}

	public boolean updateBoo(StoreBoo storeBoo, List storeBooMlist) {
		boolean successfullyAdded = false;
		StoreBoo storeBoo2 = new StoreBoo();
		storeBoo2 = storeBoo;
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");

		hbt.setCheckWriteOperations(false);

		try {

			hbt.update(storeBoo2);
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {

			if (storeBooMlist.size() > 0) {

				for (int i = 0; i < storeBooMlist.size(); i++) {
					StoreBooMember storeBooMObj = new StoreBooMember();
					storeBooMObj = (StoreBooMember) storeBooMlist.get(i);
					storeBooMObj.setBoo(storeBoo2);
					hbt.update(storeBooMObj);
				}

			}
			successfullyAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;
	}

	public Map searchBoo(Map searchFieldMap){
		Map<String, Object> map = new HashMap<String, Object>();
		String fromDate = "";
		String toDate = "";
		List<StoreBoo> gridBooHeaderList = new ArrayList<StoreBoo>();
		List<StoreBooMember> gridBooDetailList = new ArrayList<StoreBooMember>();
		String booNo = "";
		try {
			if (!searchFieldMap.get("booNo").equals("0")) {
				booNo = (String) searchFieldMap.get("booNo");

				gridBooDetailList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreBooMember ");
				gridBooHeaderList = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreBoo as pod where pod.BooNo = '"
						+ booNo + "'");

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			if ((!searchFieldMap.get("fromDate").equals(""))
					&& (!searchFieldMap.get("toDate").equals(""))) {
				fromDate = (String) searchFieldMap.get("fromDate");
				toDate = (String) searchFieldMap.get("toDate");

				SimpleDateFormat formatterIn = new SimpleDateFormat(
				"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
				"yyyy-MM-dd");
				String date4MySQL1 = formatterOut.format(formatterIn
						.parse(fromDate));
				String date4MySQL2 = formatterOut.format(formatterIn
						.parse(toDate));
				java.sql.Date startDate = java.sql.Date.valueOf(date4MySQL1);
				java.sql.Date endDate = java.sql.Date.valueOf(date4MySQL2);

				gridBooDetailList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreBooMember ");
				gridBooHeaderList = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreBoo as poh where "
						+ " poh.BooDate between '" + startDate
						+ "' and '" + endDate + "'");

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("gridBooDetailList", gridBooDetailList);
		map.put("gridBooHeaderList", gridBooHeaderList);

		return map;
	}

	public Map getBooModifyMap(int radio_str) {

		Map map = new HashMap();
		List<StoreBoo> gridBooList = new ArrayList<StoreBoo>();
		List<StoreBooMember> gridBooMList = new ArrayList<StoreBooMember>();
		List<MasEmployee> gridEmployeeList = new ArrayList<MasEmployee>();
		List<MasRank> gridRankList = new ArrayList<MasRank>();

		int id = 0;
		gridBooList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreBoo as md where md.Id = '"
				+ radio_str + "'");
		for (StoreBoo storeBoo : gridBooList) {
			id = storeBoo.getId();
		}
		gridBooMList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreBooMember as sb where sb.Boo='"
				+ radio_str + "'");
		gridEmployeeList = getHibernateTemplate().find(
		"from jkt.hms.masters.business.MasEmployee ");
		gridRankList = getHibernateTemplate().find(
		"from jkt.hms.masters.business.MasRank ");

		map.put("gridBooList", gridBooList);
		map.put("gridBooMList", gridBooMList);
		map.put("gridEmployeeList", gridEmployeeList);
		map.put("gridRankList", gridRankList);
		map.put("booId", id);

		return map;
	}

	// ---------------- connection For reports

	public List<StoreGrnM> getCrvNumberList(int deptId) {
		Session session = (Session) getSession();
		List<StoreGrnM> crvNumberList = session.createCriteria(StoreGrnM.class)
		.add(Restrictions.eq("Status", "v")).add(
				Restrictions.eq("Department.Id", deptId)).addOrder(
						Order.asc("Id")).list();
		return crvNumberList;
	}

	public List<StoreDefectiveDrugM> getDefectiveDrugsList() {
		Session session = (Session) getSession();
		List<StoreDefectiveDrugM> defectiveDrugsList = session.createCriteria(
				StoreDefectiveDrugM.class).add(Restrictions.eq("Status", "y"))
				.list();
		return defectiveDrugsList;
	}

	public List<StoreBoo> getBooList() {
		Session session = (Session) getSession();
		List<StoreBoo> booList = session.createCriteria(StoreBoo.class).add(
				Restrictions.eq("Status", "o")).list();
		return booList;
	}

	private final String[] majorNames = { "", " thousand", " million",
			" billion", " trillion", " quadrillion", " quintillion" };

	private final String[] tensNames = { "", " ten", " twenty", " thirty",
			" fourty", " fifty", " sixty", " seventy", " eighty", " ninety" };

	private final String[] numNames = { "", " one", " two", " three", " four",
			" five", " six", " seven", " eight", " nine", " ten", " eleven",
			" twelve", " thirteen", " fourteen", " fifteen", " sixteen",
			" seventeen", " eighteen", " nineteen" };

	private String convertLessThanOneThousand(int number) {
		String soFar;

		if (number % 100 < 20) {
			soFar = numNames[number % 100];
			number /= 100;
		} else {
			soFar = numNames[number % 10];
			number /= 10;

			soFar = tensNames[number % 10] + soFar;
			number /= 10;
		}
		if (number == 0)
			return soFar;
		return numNames[number] + " hundred" + soFar;
	}

	public String convert(int number) {
		/* special case */
		if (number == 0) {
			return "zero";
		}

		String prefix = "";

		if (number < 0) {
			number = -number;
			prefix = "negative";
		}

		String soFar = "";
		int place = 0;

		do {
			int n = number % 1000;
			if (n != 0) {
				String s = convertLessThanOneThousand(n);
				soFar = s + majorNames[place] + soFar;
			}
			place++;
			number /= 1000;
		} while (number > 0);

		return (prefix + soFar).trim();
	}

	public Map<String, Object> getGrnPrintMap(int grnId) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<StoreGrnM> crvNumberList = new ArrayList<StoreGrnM>();
		Connection con = session.connection();
		try {
			map.put("conn", con);
			crvNumberList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreGrnM as md where md.Id = '"
					+ grnId + "'");

			for (StoreGrnM storeGrnM : crvNumberList) {
				map.put("grnNo", "" + storeGrnM.getGrnNo());

				SimpleDateFormat formatterIn = new SimpleDateFormat(
				"yyyy-MM-dd");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
				"dd/MM/yyyy");

				String date4MySQL = formatterOut.format(formatterIn.parse(""
						+ storeGrnM.getGrnDate()));
				map.put("supplier", ""
						+ storeGrnM.getSupplier().getSupplierName());
				map.put("grnNo", "" + storeGrnM.getGrnNo());

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public Map<String, Object> getContingentBillPrintMap(int grnId) {
		Map<String, Object> map = new HashMap<String, Object>();
		String allocatedAmount = "";
		String grnAmount_String = "";

		Session session = (Session) getSession();
		List<StoreGrnM> crvNumberList = new ArrayList<StoreGrnM>();
		List<MasStoreBudget> amountList = new ArrayList<MasStoreBudget>();
		Connection con = session.connection();
		try {
			map.put("conn", con);
			crvNumberList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreGrnM as md where md.Id = '"
					+ grnId + "'");
			amountList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasStoreBudget as md");
			for (StoreGrnM storeGrnM : crvNumberList) {
				map.put("grnNo", "" + storeGrnM.getGrnNo());

				SimpleDateFormat formatterIn = new SimpleDateFormat(
				"yyyy-MM-dd");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
				"dd/MM/yyyy");

				String date4MySQL = formatterOut.format(formatterIn.parse(""
						+ storeGrnM.getGrnDate()));
				map.put("supplier", ""
						+ storeGrnM.getSupplier().getSupplierName());
				map.put("invoiceNo", "" + storeGrnM.getInvoiceNo());
				map.put("invoiceDate", "" + storeGrnM.getInvoiceDate());
				map.put("grnAmount", "" + storeGrnM.getGrnAmount());
				// double num = 12.31;
				// double iPart = (int)Math.floor(num);
				// double fPart = num - iPart;
				// String decimal ="";
				// decimal.toString(fPart);
				// convert emthod decalre below
				grnAmount_String = convert(1256);

				map.put("grnAmount_String", "" + grnAmount_String);
			}

			for (MasStoreBudget masStoreBudget : amountList) {
				map.put("allocatedAmount", ""
						+ masStoreBudget.getTotalAllocatedAmount());
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public Map<String, Object> getProformaPrintMap(int grnId) {
		Map<String, Object> map = new HashMap<String, Object>();
		String allocatedAmount = "";
		String grnAmount_String = "";

		Session session = (Session) getSession();
		List<StoreGrnM> crvNumberList = new ArrayList<StoreGrnM>();
		List<MasStoreBudget> amountList = new ArrayList<MasStoreBudget>();
		Connection con = session.connection();
		try {
			map.put("conn", con);
			crvNumberList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreGrnM as md where md.Id = '"
					+ grnId + "'");
			amountList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasStoreBudget as md");
			for (StoreGrnM storeGrnM : crvNumberList) {
				map.put("grnNo", "" + storeGrnM.getGrnNo());

				SimpleDateFormat formatterIn = new SimpleDateFormat(
				"yyyy-MM-dd");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
				"dd/MM/yyyy");

				String date4MySQL = formatterOut.format(formatterIn.parse(""
						+ storeGrnM.getGrnDate()));
				map.put("invoiceNo", "" + storeGrnM.getInvoiceNo());
				map.put("invoiceDate", "" + storeGrnM.getInvoiceDate());

			}

			for (MasStoreBudget masStoreBudget : amountList) {
				map.put("allocatedAmount", ""
						+ masStoreBudget.getTotalAllocatedAmount());
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public Map<String, Object> getIndentList(String choice) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIndentM> indentList = new ArrayList<StoreIndentM>();

		List<StorePoHeader> poList = new ArrayList<StorePoHeader>();
		List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier>();

		List<MasStoreAirForceDepot> unitList = new ArrayList<MasStoreAirForceDepot>();
		if (choice.equalsIgnoreCase("P1")) {
			supplierList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasStoreSupplier as mi order by mi.SupplierName");
			indentList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreIndentM as md where md.IndentType !='d' and md.Status ='o'");
			map.put("first_combo", supplierList);
			map.put("second_combo", indentList);
		} else if (choice.equalsIgnoreCase("A") || choice.equalsIgnoreCase("I")) {
			unitList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasStoreAirForceDepot as mi where mi.Status= 'y'");

			map.put("first_combo", unitList);

		} else if (choice.equalsIgnoreCase("P")) {

			unitList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasUnit as mi where mi.Status= 'y'");
			map.put("first_combo", unitList);
		}
		else {
			supplierList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasStoreSupplier as mi order by mi.SupplierName");
			map.put("first_combo", supplierList);
		}

		map.put("choice", choice);
		return map;
	}

	public Map<String, Object> getVendorList(String vendor) {
		Map<String, Object> map = new HashMap<String, Object>();
		int indentId = 0;
		String name = "";
		List<MasStoreSupplier> vendorList = new ArrayList<MasStoreSupplier>();
		List<StoreIndentM> indentList = new ArrayList<StoreIndentM>();

		if (map.get("indentId") != null) {
			indentId = Integer.parseInt("" + map.get("indentId"));
		}
		vendorList = getHibernateTemplate()
		.find(
				"from jkt.hms.masters.business.MasStoreSupplier as sp order by sp.SupplierName");
		indentList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreIndentM as sp where sp.Id='"
				+ indentId + "'");

		map.put("vendorList", vendorList);
		map.put("vendor", vendor);
		map.put("indentList", indentList);
		return map;
	}

	// ----------------- adjust loan in
	public List<StoreLoaninM> getloanInList() {
		List<StoreLoaninM> loaninList = new ArrayList<StoreLoaninM>();
		loaninList = getHibernateTemplate()
		.find(
				"from jkt.hms.masters.business.StoreLoaninM as md where md.Status='y'");

		return loaninList;
	}

	// ------------ barcode-----------------

	public Map getBarcodeList(int grnId) {

		Map map = new HashMap();
		List<StoreGrnM> grnMList = new ArrayList<StoreGrnM>();
		List<StoreGrnT> grnTList = new ArrayList<StoreGrnT>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		int id = 0;
		grnMList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreGrnM as md where md.Id = '"
				+ grnId + "'");
		grnTList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreGrnT as md where md.GrnMaster.Id = '"
				+ grnId + "'");
		brandList = getHibernateTemplate().find(
		"from jkt.hms.masters.business.MasStoreBrand as msb");
		for (StoreGrnM storeGrnM : grnMList) {
			id = storeGrnM.getId();

		}

		map.put("grnMList", grnMList);
		map.put("grnTList", grnTList);
		map.put("brandList", brandList);
		map.put("grnId", id);

		return map;
	}

	// ----------------- adjust loan in
	public Map<String, Object> getLoanInList(int poId) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreLoaninM> loaninList = new ArrayList<StoreLoaninM>();
		List<StoreLoaninT> loaninTList = new ArrayList<StoreLoaninT>();

		loaninList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreLoaninM as md where md.Po.Id ='"
				+ poId + "' ");
		loaninTList = getHibernateTemplate()
		.find(
				"from jkt.hms.masters.business.StoreLoaninT as mdl where mdl.LoaninMaster.Po.Id ='"
				+ poId + "' ");
		map.put("loaninList", loaninList);
		map.put("loaninTList", loaninTList);
		return map;
	}

	public List<StoreLoaninM> getloanList() {
		List<StoreLoaninM> loaninList = new ArrayList<StoreLoaninM>();
		loaninList = getHibernateTemplate()
		.find(
				"from jkt.hms.masters.business.StoreLoaninM as md where Status = 'o'");
		return loaninList;
	}

	public boolean addGrns(Map<String, Object> infoMap,
			Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		StoreGrnM storeGrnM = (StoreGrnM) infoMap.get("storeGrnM");
		// MasStoreBudget masStoreBudget =
		// (MasStoreBudget)infoMap.get("masStoreBudget");
		List<StoreGrnT> storeGrnTlist = (ArrayList<StoreGrnT>) infoMap
		.get("storeGrnTlist");
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		String max = "";
		String no = "";
		int numberOfRecordsInLoanIn = 0;

		if (dataMap.get("numberOfRecordsInLoanIn") != null)
			numberOfRecordsInLoanIn = Integer.parseInt(dataMap.get(
			"numberOfRecordsInLoanIn").toString());

		if (dataMap.get("deptId") != null)
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		if (dataMap.get("hospitalId") != null)
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		if (dataMap.get("userName") != null)
			userName = ("" + dataMap.get("userName"));
		int storeFyId = 0;

		boolean successfullyAdded = false;
		StoreGrnM storeGrnM2 = new StoreGrnM();
		int indentId = 0;
		if (infoMap.get("indentId") != null) {
			indentId = Integer.parseInt("" + infoMap.get("indentId"));
		}
		String sos = "";
		if (infoMap.get("sourceOfSupply") != null
				&& !infoMap.get("sourceOfSupply").equals("")) {
			sos = (String) infoMap.get("sourceOfSupply");
		}
		session = (Session) getSession();
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			/*
			 * Save StoreGrnM data & update StoreFyDocumentNo for Grn Number
			 */

			hbt.save(storeGrnM);
			String grnNo = "";
			grnNo = (String) infoMap.get("grnNo");
			Criteria c = session.createCriteria(StoreFyDocumentNo.class).add(
					Restrictions.eq("Department.Id", deptId));
			storeFyDocumentNoList = c.list();
			for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
				storeFyId = documentNo.getId();
			}
			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
			.load(StoreFyDocumentNo.class, storeFyId);
			storeFyDocumentNo.setGrnNo(grnNo);
			hbt.update(storeFyDocumentNo);
			hbt.refresh(storeFyDocumentNo);

			/*
			 * If Source of Supply is "w" or "l" (only in Local Purchase Case)
			 * Update MasStoreBudget for the current Financial Year Get the
			 * financial Id from MasStoreFinancial Get the Record from
			 * MasStoreBudget : Check Financial Id and Department Id Update the
			 * CRV Committed Amount
			 */

			if (sos.equalsIgnoreCase("l") || sos.equalsIgnoreCase("w")) {
				MasStoreBudget masStoreBudget = new MasStoreBudget();
				java.util.Date poDate = storeGrnM.getGrnDate();
				BigDecimal poAmount = storeGrnM.getGrnValue();

				List<MasStoreFinancial> masStoreFinancialList = new ArrayList<MasStoreFinancial>();
				masStoreFinancialList = session.createCriteria(
						MasStoreFinancial.class).list();
				java.util.Date start_date = null;
				java.util.Date end_date = null;
				int financial_id = 0;
				for (Iterator iterator2 = masStoreFinancialList.iterator(); iterator2
				.hasNext();) {
					MasStoreFinancial masStoreFinancial = (MasStoreFinancial) iterator2
					.next();
					start_date = (java.util.Date) masStoreFinancial
					.getStartDate();
					end_date = (java.util.Date) masStoreFinancial.getEndDate();
					if (poDate.after(start_date) && poDate.before(end_date)) {
						financial_id = masStoreFinancial.getId();
						break;
					} else if (poDate.equals(start_date)
							|| poDate.equals(end_date)) {
						financial_id = masStoreFinancial.getId();
						break;
					}
				}

				List<MasStoreBudget> masStoreBudgetList = new ArrayList<MasStoreBudget>();
				masStoreBudgetList = session.createCriteria(
						MasStoreBudget.class).add(
								Restrictions.eq("Financial.Id", financial_id)).add(
										Restrictions.eq("Department.Id", deptId)).list();
				BigDecimal existing_committed_amount = null;
				if (masStoreBudgetList != null && masStoreBudgetList.size() > 0) {
					masStoreBudget = masStoreBudgetList.get(0);
					try {
						existing_committed_amount = masStoreBudget
						.getCrvComittedAmount();
					} catch (Exception e) {
						existing_committed_amount = new BigDecimal(0);
					}

					masStoreBudget
					.setCrvComittedAmount(existing_committed_amount
							.add(poAmount));
					hbt.update(masStoreBudget);
				}
			}

			/*
			 * End of MasStoreBudget Update
			 */

			/*
			 * Updating the Stock in StoreITemBatchStock
			 */

			List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
			StoreItemBatchStock storeItemBatchStock = null;

			if (storeGrnTlist.size() > 0) {
				for (int i = 0; i < storeGrnTlist.size(); i++) {
					StoreGrnT storeGrnTObj = new StoreGrnT();
					storeGrnTObj = (StoreGrnT) storeGrnTlist.get(i);
					storeGrnTObj.setGrnMaster(storeGrnM);
					hbt.save(storeGrnTObj);
					hbt.refresh(storeGrnTObj);

					// Updating Quantity Received in StorePoDetail for the
					// particular Item

					if (sos.equalsIgnoreCase("l")) {
						List<StorePoDetail> storePoDetailList = new ArrayList<StorePoDetail>();
						StorePoDetail storePoDetail = new StorePoDetail();
						storePoDetailList = session.createCriteria(
								StorePoDetail.class).add(
										Restrictions.eq("Po.Id", indentId)).add(
												Restrictions.eq("Item.Id", storeGrnTObj
														.getItem().getId())).list();

						if (storePoDetailList != null
								&& storePoDetailList.size() > 0) {
							storePoDetail = storePoDetailList.get(0);
							BigDecimal existingQuantity = null;
							BigDecimal quantity_to_be_added = null;
							BigDecimal newQuantity = new BigDecimal(0);
							BigDecimal mdq = storePoDetail.getMdqValue();

							existingQuantity = storePoDetail
							.getQuantityReceived();
							BigDecimal recd_qty = storeGrnTObj.getReceivedQty();
							quantity_to_be_added = recd_qty.divide(mdq,
									new MathContext(4, RoundingMode.UP));

							if (existingQuantity == null)
								existingQuantity = new BigDecimal(0);

							newQuantity = existingQuantity
							.add(quantity_to_be_added);
							storePoDetail.setQuantityReceived(newQuantity);
							hbt.update(storePoDetail);
						}
					}

					int item_id = storeGrnTObj.getItem().getId();
					int brand_id = storeGrnTObj.getBrand().getId();
					BigDecimal cost_price = storeGrnTObj.getFinalCostPrice();
					String batch_no = storeGrnTObj.getBatchNo();
					int department_id = storeGrnM.getDepartment().getId();

					storeItemBatchStockList = hbt
					.find("from jkt.hms.masters.business.StoreItemBatchStock as inp where inp.Item.Id = "
							+ item_id
							+ " and inp.CostPrice = "
							+ cost_price
							+ "and inp.Department.Id= "
							+ department_id
							+ "and inp.BatchNo ='"
							+ batch_no
							+ "' and inp.Brand.Id = "
							+ brand_id);
					if (storeItemBatchStockList != null
							&& storeItemBatchStockList.size() > 0) {
						if (i > numberOfRecordsInLoanIn - 1) {
							int free_qty = 0;
							free_qty = storeGrnTObj.getFreeQty();
							// int id = storeItemBatchStockList.get(0).getId();
							// storeItemBatchStock =
							// (StoreItemBatchStock)hbt.load(StoreItemBatchStock.class,
							// id);

							storeItemBatchStock = storeItemBatchStockList
							.get(0);
							BigDecimal existing_qty = new BigDecimal(0);

							if (storeItemBatchStock.getReceivedQty() != null) {
								existing_qty = storeItemBatchStock
								.getReceivedQty();
							} else {
								existing_qty = new BigDecimal(0);
							}

							BigDecimal recd_qty = storeGrnTObj.getReceivedQty();

							BigDecimal new_qty = new BigDecimal(0);
							new_qty = existing_qty.add(recd_qty);
							BigDecimal existing_closing_stock = storeItemBatchStock
							.getClosingStock();
							BigDecimal new_closing_stock = new BigDecimal(0);
							new_closing_stock = existing_closing_stock
							.add(recd_qty);

							int id = storeItemBatchStock.getId();
							storeItemBatchStock = (StoreItemBatchStock) getHibernateTemplate()
							.load(StoreItemBatchStock.class, id);

							storeItemBatchStock.setReceivedQty(new_qty
									.add(new BigDecimal(free_qty)));

							storeItemBatchStock
							.setClosingStock(new_closing_stock
									.add(new BigDecimal(free_qty)));

							HibernateTemplate hbt1 = getHibernateTemplate();
							hbt1.setFlushModeName("FLUSH_EAGER");
							hbt1.setCheckWriteOperations(false);
							hbt1.update(storeItemBatchStock);
						}
					} else {
						storeItemBatchStock = new StoreItemBatchStock();
						storeItemBatchStock.setDepartment(storeGrnM
								.getDepartment());
						storeItemBatchStock.setItem(storeGrnTObj.getItem());
						storeItemBatchStock.setBatchNo(storeGrnTObj
								.getBatchNo());
						if (storeGrnTObj.getLotNo() != null) {
							storeItemBatchStock.setLotNo(storeGrnTObj
									.getLotNo());
						} else {
							storeItemBatchStock.setLotNo(storeGrnTObj
									.getBrand()
									+ ","
									+ storeGrnTObj.getItem()
									+ ","
									+ storeGrnTObj.getBatchNo());
						}

						int free_qty = 0;
						free_qty = storeGrnTObj.getFreeQty();

						BigDecimal recd_qty = storeGrnTObj.getReceivedQty();

						storeItemBatchStock.setReceivedQty(recd_qty
								.add(new BigDecimal(free_qty)));

						storeItemBatchStock.setFreeItem(storeGrnTObj
								.getFreeItem());
						storeItemBatchStock.setBrand(storeGrnTObj.getBrand());
						storeItemBatchStock.setCostPrice(storeGrnTObj
								.getFinalCostPrice());
						storeItemBatchStock.setClosingStock(recd_qty
								.add(new BigDecimal(free_qty)));
						storeItemBatchStock.setExpiryDate(storeGrnTObj
								.getExpiryDate());
						storeItemBatchStock.setFreeItem(storeGrnTObj
								.getFreeItem());

						HibernateTemplate hbt1 = getHibernateTemplate();
						hbt1.setFlushModeName("FLUSH_EAGER");
						hbt1.setCheckWriteOperations(false);
						hbt1.save(storeItemBatchStock);
					} // if itembatchstocksize > 0
				} // end of for loop
			} // end of if GrnTlist > 0

			HibernateTemplate hbt3 = getHibernateTemplate();
			hbt3.setFlushModeName("FLUSH_EAGER");
			hbt3.setCheckWriteOperations(false);
			if ((sos.equalsIgnoreCase("a"))) {
				StoreIndentM storeIndentM = (StoreIndentM) getHibernateTemplate()
				.load(StoreIndentM.class, indentId);
				storeIndentM.setStatus("p");
				hbt3.update(storeIndentM);
			} else if (sos.equalsIgnoreCase("l")) {
				StorePoHeader storePoHeader = (StorePoHeader) getHibernateTemplate()
				.load(StorePoHeader.class, indentId);
				storePoHeader.setStatus("p");
				int grnMasterId = 0;
				storePoHeader.setStoreGrnM(storeGrnM);
				hbt3.update(storePoHeader);
			}

			int pageNo = 0;
			pageNo = Integer.parseInt("" + infoMap.get("pageNo"));
			grnNo = (String) infoMap.get("grnNo");
			successfullyAdded = true;
			tx.commit();
		} catch (Exception e) {
			if (tx != null)
				tx.rollback();
			// throw e; // or display error message
			e.printStackTrace();
		}
		map.put("maxIndentNo", no);

		return successfullyAdded;

	}

	// calculating actual Quantity ================

	public Map<String, Object> getActualQtyAsPerAU(Map<String, Object> paramMap) {
		// TODO Auto-generated method stub
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();
		int itemId = Integer.parseInt(paramMap.get("itemId").toString());
		int mdq = Integer.parseInt(paramMap.get("mdq").toString());
		int freeQty = Integer.parseInt(paramMap.get("freeQty").toString());
		BigDecimal qty = new BigDecimal(paramMap.get("qty").toString());
		BigDecimal amount = new BigDecimal(paramMap.get("amount").toString(),
				new MathContext(3, RoundingMode.UP));

		try {
			Criteria criteria = session.createCriteria(MasStoreItem.class).add(
					Restrictions.eq("Id", itemId)).add(
							Restrictions.eq("Status", "y"));
			List<MasStoreItem> masStoreItemList = criteria.list();
			BigDecimal actual_qty = new BigDecimal(0);
			BigDecimal actual_free_qty = new BigDecimal(0);
			BigDecimal cost_price = new BigDecimal(0);
			// MathContext mc = new MathContext(3,RoundingMode.UP);

			if (masStoreItemList != null && masStoreItemList.size() > 0) {
				MasStoreItem masStoreItem = (MasStoreItem) masStoreItemList
				.get(0);
				String formula = masStoreItem.getItemConversion().getFormula();
				Integer conv_factor = masStoreItem.getItemConversion()
				.getConversionFactor1();
				BigDecimal temp = new BigDecimal(0);
				actual_qty = new BigDecimal(0);
				cost_price = new BigDecimal(0);
				actual_free_qty = new BigDecimal(0);
				if (formula.equals("1")) {
					temp = qty.multiply(new BigDecimal(mdq));
					actual_qty = temp.divide(new BigDecimal(conv_factor));
					cost_price = amount.divide(actual_qty);
					temp = new BigDecimal(freeQty)
					.multiply(new BigDecimal(mdq));
					actual_free_qty = temp.divide(new BigDecimal(conv_factor));
				} else {
					actual_qty = qty;
					cost_price = amount.divide(actual_qty);
					actual_free_qty = new BigDecimal(freeQty);
				}
			}

			map.put("actualQuantity", actual_qty);
			map.put("costPrice", cost_price);
			map.put("freeQty", actual_free_qty);
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return map;
	}

	// ======== for adjusting loanin in crv and show in grid ================

	public Map getAdjustmentList(int indentId, int pageNo, String items,String loan)
	{
		Map map = new HashMap();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<StoreIndentM> gridLoanInMList = new ArrayList<StoreIndentM>();
		List<StoreIndentT> gridLoanInTList = new ArrayList<StoreIndentT>();
		List<MasStoreItem> itemsList = new ArrayList<MasStoreItem>();
		List objectList1 = new ArrayList();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<StorePoDetail> poList = new ArrayList<StorePoDetail>();
		List<StorePoHeader> poHeadList = new ArrayList<StorePoHeader>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		List<MasManufacturer> manufacturerList = new ArrayList<MasManufacturer>();
		@SuppressWarnings("unused")
		int id = 0;
		int firstResult = 0;
		int maxResults = 8;
		session = (Session) getSession();
		List objectList = new ArrayList();

		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		session = (Session) getSession();
		Transaction tx = null;
		try {
			// --------------Transaction Started----------
			tx = session.beginTransaction();
			// Criteria c =
			// session.createCriteria(StoreLoaninT.class).add(Restrictions.eq("LoaninMaster.Id",
			// loanInId));
			// c.setFirstResult(firstResult);
			// c.setMaxResults(maxResults);
			// gridLoanInTList = c.list();
			//		if (loan.equals("Yes")) {
			//gridLoanInTList = getHibernateTemplate().find("from jkt.hms.masters.business.StoreIndentT as md where md.Indent.Id ='"+ indentId + "'");
			//gridLoanInMList = getHibernateTemplate().find("from jkt.hms.masters.business.StoreIndentM as md where md.Id = '"+ indentId + "' and md.Status='o'");
			//	}
			//String qry = "select item_id,pvms_no,nomenclature from mas_store_item ";
			//	objectList = (List) session.createSQLQuery(qry).list();
			/*if (items.length() > 0) {
				StringTokenizer str = new StringTokenizer(items, ",");
				while (str.hasMoreTokens()) {
					objectList1.add(Integer.parseInt("" + str.nextToken()));
				}

				Criteria c2 = session.createCriteria(MasStoreBrand.class).add(
						Restrictions.in("Item.Id", objectList1)).add(Restrictions.eq("Status", "y"));
				brandList = c2.list();

				Criteria c3 = session.createCriteria(StorePoDetail.class).add(
						Restrictions.eq("Po.Id", indentId)).add(
						Restrictions.in("Item.Id", objectList1));
				poList = c3.list();
				poHeadList = session.createCriteria(StorePoHeader.class).add(
						Restrictions.eq("Id", indentId)).list();
			 */
			StringTokenizer str = new StringTokenizer(items, ",");
			while (str.hasMoreTokens()) {
				objectList1.add(Integer.parseInt(str.nextToken().toString()));
			}
			if(objectList1.size()>0){
				Criteria c3 = session.createCriteria(StorePoDetail.class).add(Restrictions.eq("Po.Id", indentId)).add(Restrictions.in("Item.Id", objectList1));
				poList = c3.list();
			}
			poHeadList = session.createCriteria(StorePoHeader.class).add(
					Restrictions.eq("Id", indentId)).list();

			manufacturerList = session.createCriteria(MasManufacturer.class).add(Restrictions.eq("Status", "y")).list();
			brandList = session.createCriteria(MasStoreBrand.class).add(Restrictions.eq("Status", "y")).list();
			tx.commit();
			// --------------Transaction Ended----------

		} catch (Exception e) {
			// --------------In case of Transaction Failure----------
			if (tx != null)
				tx.rollback();

			e.printStackTrace();

		}
		map.put("manufacturerList", manufacturerList);
		map.put("gridLoanInMList", gridLoanInMList);
		map.put("gridLoanInTList", gridLoanInTList);
		map.put("indentId", indentId);
		map.put("objectList", objectList);
		map.put("brandList", brandList);
		map.put("poList", poList);
		map.put("poHeadList", poHeadList);

		return map;
	}

	public Map getATSODate(int indentId) {
		Map map = new HashMap();
		Session session = (Session) getSession();
		Criteria c = session.createCriteria(StorePoHeader.class).add(
				Restrictions.eq("Id", indentId));
		List<StorePoHeader> storePoHeaderList = c.list();
		map.put("storePoHeaderList", storePoHeaderList);
		return map;
	}

	// ----------------- adjust Loan In
	public boolean submitAdjustLoanIn(int loaninId, StoreGrnM storeGrnM,
			int poId, List storeGrnTlist, Map<String, Object> infoMap) {
		boolean successfullyAdded = false;
		List<StoreLoaninM> storeLoaninMList = new ArrayList<StoreLoaninM>();
		StoreGrnM storeGrnM2 = new StoreGrnM();

		if (!(infoMap.get("headerStored") + "").equals("yes")) {
			try {
				HibernateTemplate hbt = getHibernateTemplate();
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
				hbt.save(storeGrnM);

				StoreLoaninM storeLoaninM = (StoreLoaninM) getHibernateTemplate()
				.load(StoreLoaninM.class, loaninId);
				storeLoaninM.setStatus("c");
				StorePoHeader storePoHeader = (StorePoHeader) getHibernateTemplate()
				.load(StorePoHeader.class, poId);
				storePoHeader.setStatus("c");
				HibernateTemplate hbt1 = getHibernateTemplate();
				hbt1.setFlushModeName("FLUSH_EAGER");
				hbt1.setCheckWriteOperations(false);
				hbt1.update(storeLoaninM);
				hbt1.update(storePoHeader);

				if (storeGrnTlist.size() > 0) {
					if ((infoMap.get("headerStored") + "").equals("yes")) {
						int id = Integer.parseInt("" + infoMap.get("loaninId"));
						storeGrnM2.setId(id);
					}
					for (int i = 0; i < storeGrnTlist.size(); i++) {
						StoreGrnT storeGrnTObj = new StoreGrnT();
						storeGrnTObj = (StoreGrnT) storeGrnTlist.get(i);
						if ((infoMap.get("headerStored") + "").equals("yes")) {
							storeGrnTObj.setGrnMaster(storeGrnM2);
						} else {
							storeGrnTObj.setGrnMaster(storeGrnM);
						}
						HibernateTemplate hbt2 = getHibernateTemplate();
						hbt2.setFlushModeName("FLUSH_EAGER");
						hbt2.setCheckWriteOperations(false);
						hbt2.save(storeGrnTObj);
					}
					int pageNo = 0;
					String loaninNo = "";
					pageNo = Integer.parseInt("" + infoMap.get("pageNo"));
					loaninNo = (String) infoMap.get("loaninNo");
					if (pageNo == 1) {
						int StoreFyDocumentNoId = 1;
						StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
						.load(StoreFyDocumentNo.class,
								StoreFyDocumentNoId);
						storeFyDocumentNo.setGrnNo(loaninNo);
						HibernateTemplate hbt3 = getHibernateTemplate();
						hbt3.setFlushModeName("FLUSH_EAGER");
						hbt3.update(storeFyDocumentNo);
					}
				}
				successfullyAdded = true;
			} catch (Exception e) {
				e.printStackTrace();
			}

		}
		return true;
	}

	public Map<String, Object> showGridJsp(Box box) {

		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();

		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();

		List<StoreIndentT> storeIndentTList = new ArrayList<StoreIndentT>();
		List<StorePoDetail> storePoDetailList = new ArrayList<StorePoDetail>();

		int poId = 0;
		String max = "";
		String startNo = "";
		String no = "";

		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

		try {
			if (box.getString("sourceOfSupply").equals("p")) {
				// indent
				storeIndentTList = hbt
				.find("from jkt.hms.masters.business.StoreIndentT as inp where inp.Indent.Id = "
						+ box.getInt(INDENT_ID)
						+ " and inp.Indent.IndentType !='d'");
				brandList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.MasStoreBrand as msb");
				for (Iterator iterator = storeIndentTList.iterator(); iterator
				.hasNext();) {
					StoreIndentT storeIndentT = (StoreIndentT) iterator.next();
					itemList.add(storeIndentT.getItem());

				}
			} else if (box.getString("sourceOfSupply").equals("a")) {
				// indent
				storeIndentTList = hbt
				.find("from jkt.hms.masters.business.StoreIndentT as inp where inp.Indent.Id = "
						+ box.getInt(INDENT_ID)
						+ " and inp.Indent.IndentType='d' ");
				brandList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.MasStoreBrand as msb");
				for (Iterator iterator = storeIndentTList.iterator(); iterator
				.hasNext();) {
					StoreIndentT storeIndentT = (StoreIndentT) iterator.next();
					itemList.add(storeIndentT.getItem());

				}
			}

			else if (box.getString("sourceOfSupply").equals("o")) {
				itemList = hbt
				.find("from jkt.hms.masters.business.MasStoreItem");
				brandList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.MasStoreBrand as msb");
			} else if (box.getString("sourceOfSupply").equals("l")) {
				// store po detail
				storePoDetailList = hbt
				.find("from jkt.hms.masters.business.StorePoDetail as inp where inp.Po.Id = "
						+ box.getInt(INDENT_ID));
				brandList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.MasStoreBrand as msb");
				for (Iterator iterator = storePoDetailList.iterator(); iterator
				.hasNext();) {
					StorePoDetail storePoDetail = (StorePoDetail) iterator
					.next();
					itemList.add(storePoDetail.getItem());
				}
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		if (itemList != null && itemList.size() > 0) {
			for (Iterator iterator = itemList.iterator(); iterator.hasNext();) {
				MasStoreItem masStoreItem = (MasStoreItem) iterator.next();
				brandList.add(masStoreItem.getBrand());

			}
		}

		map.put("brandList", brandList);
		map.put("itemList", itemList);

		return map;

	}

	public Map<String, Object> showGridLoanInJsp(Box box) {

		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();

		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();

		List<StorePoDetail> storePoDetailList = new ArrayList<StorePoDetail>();

		int poId = 0;
		String max = "";
		String startNo = "";
		String no = "";

		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

		try {

			// store po detail
			storePoDetailList = hbt
			.find("from jkt.hms.masters.business.StorePoDetail as inp where inp.Po.Id = "
					+ box.getInt("poId"));

			brandList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasStoreBrand as msb");
			for (Iterator iterator = storePoDetailList.iterator(); iterator
			.hasNext();) {
				StorePoDetail storePoDetail = (StorePoDetail) iterator.next();
				itemList.add(storePoDetail.getItem());

			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		if (itemList != null && itemList.size() > 0) {
			for (Iterator iterator = itemList.iterator(); iterator.hasNext();) {
				MasStoreItem masStoreItem = (MasStoreItem) iterator.next();
				brandList.add(masStoreItem.getBrand());

			}
		}

		map.put("brandList", brandList);
		map.put("itemList", itemList);

		return map;

	}

	public Map adjustLoanIn() {
		// TODO Auto-generated method stub
		return null;
	}

	// --------- new GRid----------------------

	public Map<String, Object> getItemListForGrnByAutocomplete(
			Map<String, Object> dataMap) {
		Session session = (Session) getSession();

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreItem> itemList1 = new ArrayList<MasStoreItem>();
		Box box = (Box) dataMap.get("box");
		String sos = box.getString("sourceOfSupply").trim();

		String pvmsNo = null;
		int deptId = 0;
		int indentId = 0;
		int hospitalId=0;

		deptId = Integer.parseInt("" + dataMap.get("deptId"));
		hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		if (deptId == 38) {
			deptId = 24;
		}
		indentId = Integer.parseInt("" + dataMap.get("indentId"));
		List<Integer> objectList = new ArrayList<Integer>();
		List<Integer> objectList1 = new ArrayList<Integer>();
		try {
			String str =  dataMap.get("autoHint") + "%";
			if (sos.equalsIgnoreCase("U")||sos.equalsIgnoreCase("G")) {
				/*	String qry = "Select item_id from store_indent_t where indent_id in(select indent_id  from store_indent_m where indent_type !='d' )";
				objectList = (List<Integer>) session.createSQLQuery(qry).list();
				if(objectList.size()>0){
					for (int i = 0; i < objectList.size(); i++) {
						if(objectList1.size()<999){
							objectList1.add(new Integer(Integer.parseInt(""+objectList.get(i))));
						}
					}
				}*/
				str=str.toUpperCase()+ "%";
				//	Criteria c = session.createCriteria(MasStoreItem.class).add(Restrictions.like("Nomenclature", str).ignoreCase()).add(Restrictions.eq("Department.Id", deptId)).add(Restrictions.eq("Status", "y")).add(Restrictions.eq("Hospital.id", 0));

				itemList=getHibernateTemplate().find("select item from jkt.hms.masters.business.MasStoreItem as item where upper(item.Nomenclature) like '"+str+"' and item.Status='y' and item.ItemType.Id='2' and item.Hospital.Id='"+hospitalId+"'");
				itemList1=getHibernateTemplate().find("select item from jkt.hms.masters.business.MasStoreItem as item where upper(item.Nomenclature) like '"+str+"' and item.Status='y' and item.ItemType.Id='1'");
				itemList.addAll(itemList1);

				/*if(objectList1.size()>0){
					c.add(Restrictions.in("Id", objectList1));
				}*/
				//c.setFirstResult(0);
				//c.setMaxResults(10);
				//itemList = c.list();
			}
			if (sos.equalsIgnoreCase("l")) {
				String qry = " SELECT item_id FROM store_po_detail where po_id='"
					+ indentId + "';";
				objectList = (List) session.createSQLQuery(qry).list();

				Criteria c = session.createCriteria(MasStoreItem.class).add(
						Restrictions.like("Nomenclature", str)).add(
								Restrictions.eq("Department.Id", deptId)).add(
										Restrictions.eq("Status", "y")).add(
												Restrictions.in("Id", objectList));
				c.setFirstResult(0);
				c.setMaxResults(10);
				itemList = c.list();
			}
			if (sos.equalsIgnoreCase("a")) {
				String qry = "Select item_id from store_indent_t where indent_id in(select indent_id  from store_indent_m where indent_type ='d' )";
				objectList = (List) session.createSQLQuery(qry).list();

				Criteria c = session.createCriteria(MasStoreItem.class).add(
						Restrictions.like("Nomenclature", str)).add(
								Restrictions.eq("Department.Id", deptId)).add(
										Restrictions.eq("Status", "y"));
				// .add(Restrictions.in("Id", objectList));
				c.setFirstResult(0);
				c.setMaxResults(10);
				itemList = c.list();
			}
			if (sos.equalsIgnoreCase("o") || sos.equalsIgnoreCase("w")
					|| sos.equalsIgnoreCase("i")) {

				String qry = "Select item_id from mas_store_item where Status='y'";
				objectList = (List) session.createSQLQuery(qry).list();

				Criteria c = session.createCriteria(MasStoreItem.class).add(
						Restrictions.like("Nomenclature", str)).add(
								Restrictions.eq("Department.Id", deptId)).add(
										Restrictions.eq("Status", "y")).add(
												Restrictions.in("Id", objectList));
				c.setFirstResult(0);
				c.setMaxResults(10);
				itemList = c.list();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;
	}

	public Map<String, Object> fillItemsForGrn(Map<String, Object> dataMap) {

		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<StorePoDetail> poDetailList = new ArrayList<StorePoDetail>();
		session = (Session) getSession();
		String pvms = null;
		int hospitalId=0;

		int deptId = 0;
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		int indentId = 0;
		if (dataMap.get("indentId") != null) {
			indentId = Integer.parseInt("" + dataMap.get("indentId"));
		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}

		int poId = 0;
		if (dataMap.get("poId") != null) {
			poId = Integer.parseInt("" + dataMap.get("poId"));
		}
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			String queryString = null;
			String str = "" + dataMap.get("nomenclature");
			StringBuffer output_str = new StringBuffer();
			StringTokenizer s = new StringTokenizer(str, "%");

			while (s.hasMoreTokens()) {
				output_str.append(s.nextToken());
				if (s.hasMoreTokens()) {
					output_str.append("\\%");
				}
			}



			/*
			 * Commented and Coded By Ujjwal For Vulnerability(Sql Injection)
			 */
			/*			String sqlQry="select  msi.ITEM_TYPE_ID  from mas_store_item msi  where msi.PVMS_NO=UPPER('"+str+"')";*/
			Criteria c = session.createCriteria(MasStoreItem.class);
			List nivList=c.setProjection(Projections.projectionList().add(Projections.property("ItemType.Id"))).add(
					Restrictions.eq("PvmsNo", str.toUpperCase())).list();
			System.out.println("nivList--Check By sk---->>>"+nivList.size());
			/*			List nivList=session.createSQLQuery(sqlQry).list();*/
			String sqlQry="select  msi.ITEM_TYPE_ID  from mas_store_item msi  where msi.PVMS_NO=UPPER('"+str+"')";
			//List nivList=session.createSQLQuery(sqlQry).list();
			if(nivList.size() > 1 && nivList.size()!= 0 )
			{
			   if((Integer.parseInt((""+nivList.get(0)))) == 2){
				itemList = session.createCriteria(MasStoreItem.class)
				.add(Restrictions.eq("Nomenclature", str).ignoreCase()).add(Restrictions.eq("Hospital.Id", hospitalId))
				//.add(Restrictions.eq("PvmsNo", str).ignoreCase()).add(Restrictions.eq("Hospital.Id", hospitalId))
				.add(Restrictions.eq("Status", "y")).list();
			}}
			else{
				itemList = session.createCriteria(MasStoreItem.class)
				//.add(Restrictions.eq("PvmsNo", str).ignoreCase())
				.add(Restrictions.eq("Nomenclature", str).ignoreCase())
				.add(Restrictions.eq("Status", "y")).list();
			}






			/*Criteria c = session.createCriteria(MasStoreItem.class).add(
					Restrictions.eq("PvmsNo", str)).add(
					Restrictions.eq("Status", "y"));*/

			//itemList = c.list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		try {
			int itemId = 0;
			for (MasStoreItem masStoreItem : itemList) {
				itemId = masStoreItem.getId();

			}

			if (itemId != 0) {
				Criteria c2 = session.createCriteria(MasStoreBrand.class).add(
						Restrictions.eq("Item.Id", itemId));
				brandList = c2.list();
				Criteria c3 = session.createCriteria(StorePoDetail.class).add(
						Restrictions.eq("Po.Id", poId)).add(
								Restrictions.eq("Item.Id", itemId));
				poDetailList = c3.list();
			}
			// String qry="SELECT sum(closing_stock) FROM store_item_batch_stock
			// where item_id='"+itemId+"' and department_id='"+deptId+"';";
			// objectList = (List) session.createSQLQuery(qry).list();
			// if(objectList.get(0) !=null)
			// stockIn=new BigDecimal(""+objectList.get(0));
			// else
			// stockIn=new BigDecimal("0");
			map.put("brandList", brandList);
			map.put("itemList", itemList);
			map.put("poDetailList", poDetailList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}
	
	@SuppressWarnings("unchecked")
	@Override
	public Map<String, Object> getReceiveRCWaitingList(Box box) {
		
		Map<String, Object> map = new HashMap<String, Object>();
		
		Criteria cr = null;
		List<RcHeader> ipdRcHeaderList= new ArrayList<RcHeader>();	
		Session session = (Session) getSession();
		int pagingSize = 10;
		int pageNo = 1;	
		int hospitalId = box.getInt("hospitalId");
		String ServiceNo = box.getString("ServiceNo");
		if (box.getString("PN") != null)
			pageNo = Integer.parseInt(box.getString("PN"));	
		
		cr = session.createCriteria(RcHeader.class)				
				.add(Restrictions.eq("Hospital.Id", hospitalId))
				.add(Restrictions.eq("Status", "p").ignoreCase())
		.add(Restrictions.eq("Department.Id", box.getInt("deptId")));
		
		
		List totalMatches = cr.list();
		cr = cr.setFirstResult(pagingSize * (pageNo - 1));
		cr = cr.setMaxResults(pagingSize);
		ipdRcHeaderList = cr.list();
		System.out.println("totalMatches"+totalMatches.size());
		System.out.println("totalMatches"+ipdRcHeaderList.size());

		int totalRecords = totalMatches.size();
		totalMatches.clear();	
		map.put("ipdRcHeaderList", ipdRcHeaderList);		
		map.put("totalRecords", totalRecords);
		
				
		return map;
	}

	public Map<String, Object> getItemListForLoanInByAutocomplete(
			Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		session = (Session) getSession();
		String pvmsNo = null;
		int deptId = 0;
		int poId = 0;
		deptId = Integer.parseInt("" + dataMap.get("deptId"));
		poId = Integer.parseInt("" + dataMap.get("poId"));
		List objectList = new ArrayList();
		try {
			String str = "%" + dataMap.get("autoHint") + "%";
			if (poId != 0) {
				/*String qry = " SELECT item_id FROM store_po_detail where po_id='"
						+ poId + "';";
				objectList = (List) session.createSQLQuery(qry).list();
				Criteria c = session.createCriteria(MasStoreItem.class).add(
						Restrictions.like("Nomenclature", str)).add(
						Restrictions.eq("Department.Id", deptId)).add(
						Restrictions.in("Id", objectList));*/


				Criteria c1 = session.createCriteria(StorePoDetail.class)
				.createAlias("Item", "item")
				.add(Restrictions.eq("Po.Id", poId))
				.add(Restrictions.like("item.Nomenclature", str));
				//Restrictions.eq("item.Department.Id", deptId)).add(








				c1.setFirstResult(0);
				c1.setMaxResults(10);
				itemList = c1.list();

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;

	}


	public Map<String, Object> fillItemsForLoanIn(Map<String, Object> dataMap) {

		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<StorePoDetail> poList = new ArrayList<StorePoDetail>();
		session = (Session) getSession();
		String pvms = null;

		int deptId = 0;
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}

		int poId = 0;
		if (dataMap.get("poId") != null) {
			poId = Integer.parseInt("" + dataMap.get("poId"));
		}
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			String queryString = null;
			String str = "" + dataMap.get("nomenclature");
			StringBuffer output_str = new StringBuffer();
			StringTokenizer s = new StringTokenizer(str, "%");

			while (s.hasMoreTokens()) {
				output_str.append(s.nextToken());
				if (s.hasMoreTokens()) {
					output_str.append("\\%");
				}
			}

			Criteria c = session.createCriteria(MasStoreItem.class).add(
					Restrictions.eq("PvmsNo", str)).add(
							Restrictions.eq("Status", "y"));
			itemList = c.list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		try {
			int itemId = 0;
			for (MasStoreItem masStoreItem : itemList) {
				itemId = masStoreItem.getId();

			}

			if (itemId != 0) {
				Criteria c2 = session.createCriteria(MasStoreBrand.class).add(
						Restrictions.eq("Item.Id", itemId));
				brandList = c2.list();
			}
			if (itemId != 0) {
				Criteria c3 = session.createCriteria(StorePoDetail.class).add(
						Restrictions.eq("Item.Id", itemId)).add(
								Restrictions.eq("Po.Id", poId));
				poList = c3.list();
			}

			map.put("brandList", brandList);
			map.put("itemList", itemList);
			map.put("poList", poList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	// ===================== defective drugs ===============

	public Map<String, Object> showDefectiveDrugJsp(Map<String, Object> dataMap) {
		Session session = (Session) getSession();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		if (dataMap.get("deptId") != null)
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		if (dataMap.get("hospitalId") != null)
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		if (dataMap.get("userName") != null)
			userName = ("" + dataMap.get("userName"));

		Set<StoreItemBatchStock> closingStockSet = new HashSet<StoreItemBatchStock>();
		Set<StoreItemBatchStock> set1 = new HashSet<StoreItemBatchStock>();
		HashMap<String, Object> map = new HashMap<String, Object>();

		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<StoreDefectiveDrugM> drugList = new ArrayList<StoreDefectiveDrugM>();
		List<StoreDefectiveDrugM> searchDrugList = new ArrayList<StoreDefectiveDrugM>();
		List<MasManufacturer> manufacturerList = new ArrayList<MasManufacturer>();
		List<StoreCopyAddressList> copyList = new ArrayList<StoreCopyAddressList>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<StoreFyDocumentNo> storeFyDocumentNo1List = new ArrayList<StoreFyDocumentNo>();
		MasStoreItem masStoreObj = new MasStoreItem();
		List<MasEmployee> enterdByList = new ArrayList<MasEmployee>();
		enterdByList=session.createCriteria(MasEmployee.class).add(Restrictions.eq("Status", "y")).list();
		List<MasEmployee> authorisedList = new ArrayList<MasEmployee>();
		List<StoreProformaHeader> storeProformaList = new ArrayList<StoreProformaHeader>(); // javed
		authorisedList=session.createCriteria(MasEmployee.class).add(Restrictions.eq("Status", "y")).list();// javed
		String max = "";
		String startNo = "";
		String no = "";
		try {
			// brandList=getHibernateTemplate().find("from
			// jkt.hms.masters.business.MasStoreBrand as msb");
			
			// comment and added by javed khan on 08-08-2013 for sql injuction
			
			/*drugList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreDefectiveDrugM as msb where msb.Hospital.Id='"+hospitalId+"'");*/
			drugList =session.createCriteria(StoreDefectiveDrugM.class)
			.add(Restrictions.eq("Hospital.Id", hospitalId)).list();
			
			/*searchDrugList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreDefectiveDrugM as msb where msb.Hospital.Id='"+hospitalId+"' order by msb.EntryNo desc");*/
			searchDrugList=session.createCriteria(StoreDefectiveDrugM.class)
			.add(Restrictions.eq("Hospital.Id", hospitalId))
			.addOrder(Order.desc("EntryNo")).list();
			
			/*manufacturerList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasManufacturer as sca where sca.Hospital.Id='"+hospitalId+"'");*/
			manufacturerList = session.createCriteria(MasManufacturer.class)
			.add(Restrictions.eq("Hospital.Id", hospitalId)).list();
			
			/*copyList = getHibernateTemplate()
			.find("from jkt.hms.masters.business.StoreCopyAddressList as sca ");*/					
			copyList =session.createCriteria(StoreCopyAddressList.class).list();
			
			
			/*storeFyDocumentNoList = (List) getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"
					+ deptId + "' and sfdn.Hospital.Id='"+hospitalId+"'");*/
			storeFyDocumentNoList =session.createCriteria(StoreFyDocumentNo.class)
			.add(Restrictions.eq("Department.Id", deptId))
			.add(Restrictions.eq("Hospital.Id", hospitalId)).list();
			
			/*storeFyDocumentNo1List = (List) getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"
					+ deptId + "' and sfdn.Hospital.Id='"+hospitalId+"'");*/
			storeFyDocumentNo1List =session.createCriteria(StoreFyDocumentNo.class)
			.add(Restrictions.eq("Department.Id", deptId))
			.add(Restrictions.eq("Hospital.Id", hospitalId)).list();
			
			storeProformaList= session.createCriteria(StoreProformaHeader.class).add(Restrictions.eq("Hospital.Id",hospitalId)).addOrder(Order.asc("id")).list();;

			for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNo1List) {
				if (storeFyDocumentNo.getDefectEntryNo() != null) {
					no = ("" + storeFyDocumentNo.getDefectEntryNo());
					no = getMaxNo(no);
				} else {
					no = getMaxNo("");
				}
			}


		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("max", no);
		map.put("searchDrugList", searchDrugList);
		map.put("drugList", drugList);
		map.put("brandList", brandList);
		map.put("set1", set1);
		map.put("manufacturerList", manufacturerList);
		map.put("copyList", copyList);
		map.put("enterdByList", enterdByList);
		map.put("authorisedList", authorisedList);
		map.put("storeProformaList", storeProformaList);// javed
		return map;
	}



	public Map<String, Object> showProformaBSearchJsp(Map<String, Object> dataMap) {
		Session session = (Session) getSession();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		if (dataMap.get("deptId") != null)
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		if (dataMap.get("hospitalId") != null)
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		if (dataMap.get("userName") != null)
			userName = ("" + dataMap.get("userName"));

		Set<StoreItemBatchStock> closingStockSet = new HashSet<StoreItemBatchStock>();
		Set<StoreItemBatchStock> set1 = new HashSet<StoreItemBatchStock>();
		HashMap<String, Object> map = new HashMap<String, Object>();

		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<StoreDefectiveDrugM> drugList = new ArrayList<StoreDefectiveDrugM>();
		List<StoreDefectiveDrugM> searchDrugList = new ArrayList<StoreDefectiveDrugM>();
		List<MasManufacturer> manufacturerList = new ArrayList<MasManufacturer>();
		List<StoreCopyAddressList> copyList = new ArrayList<StoreCopyAddressList>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<StoreFyDocumentNo> storeFyDocumentNo1List = new ArrayList<StoreFyDocumentNo>();
		MasStoreItem masStoreObj = new MasStoreItem();
		List<MasEmployee> enterdByList = new ArrayList<MasEmployee>();
		enterdByList=session.createCriteria(MasEmployee.class).add(Restrictions.eq("Status", "y")).list();
		List<MasEmployee> authorisedList = new ArrayList<MasEmployee>();
		List<StoreProformaHeader> storeProformaList = new ArrayList<StoreProformaHeader>(); // javed
		List<StoreProformaHeader> storeProformaList1 = new ArrayList<StoreProformaHeader>(); // javed
		authorisedList=session.createCriteria(MasEmployee.class).add(Restrictions.eq("Status", "y")).list();// javed
		String max = "";
		String startNo = "";
		String no = "";
		String fromDate = "";
		String toDate = "";
		String entryNo="";
		try {
			// brandList=getHibernateTemplate().find("from
			// jkt.hms.masters.business.MasStoreBrand as msb");
			drugList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreDefectiveDrugM as msb where msb.Hospital.Id='"+hospitalId+"'");
			searchDrugList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreDefectiveDrugM as msb where msb.Hospital.Id='"+hospitalId+"'");
			manufacturerList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasManufacturer as sca where sca.Hospital.Id='"+hospitalId+"'");
			copyList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreCopyAddressList as sca ");
			storeFyDocumentNoList = (List) getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"
					+ deptId + "' and sfdn.Hospital.Id='"+hospitalId+"'");
			storeFyDocumentNo1List = (List) getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"
					+ deptId + "' and sfdn.Hospital.Id='"+hospitalId+"'");

			try {


				if ((!dataMap.get("fromDate").equals("")) && (!dataMap.get("toDate").equals(""))) {
					fromDate = (String) dataMap.get("fromDate");
					toDate = (String) dataMap.get("toDate");

					SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
					SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
					String date4MySQL1 = formatterOut.format(formatterIn.parse(fromDate));
					String date4MySQL2 = formatterOut.format(formatterIn.parse(toDate));
					java.sql.Date startDate = java.sql.Date.valueOf(date4MySQL1);
					java.sql.Date endDate = java.sql.Date.valueOf(date4MySQL2);

					storeProformaList = getHibernateTemplate().find(
							"from jkt.hms.masters.business.StoreProformaHeader as poh where "
							+ " poh.ProformaDate between to_date('" + startDate
							+ "','yyyy-MM-dd') and to_date('" + endDate + "','yyyy-MM-dd') and Hospital.Id='"+hospitalId+"' ");

				}else if (!dataMap.get("entryNo").equals("0")) {


					entryNo = (String) dataMap.get("entryNo");

					storeProformaList = getHibernateTemplate()
					.find(
							"from jkt.hms.masters.business.StoreProformaHeader as pod where pod.ProformaNo = '"
							+ entryNo + "' and Hospital.Id='"+hospitalId+"'");
				}
				else{
					storeProformaList= session.createCriteria(StoreProformaHeader.class).add(Restrictions.eq("Hospital.Id",hospitalId)).addOrder(Order.asc("id")).list();
				}
				storeProformaList1=session.createCriteria(StoreProformaHeader.class).add(Restrictions.eq("Hospital.Id",hospitalId)).addOrder(Order.asc("id")).list();
			} catch (Exception e) {
				e.printStackTrace();			}



			for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNo1List) {
				if (storeFyDocumentNo.getProformaBEntryNo() != null) {
					no = ("" + storeFyDocumentNo.getProformaBEntryNo());
					no = getMaxNo(no);
				} else {
					no = getMaxNo("");
				}
			}


		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("max", no);
		map.put("searchDrugList", searchDrugList);
		map.put("drugList", drugList);
		map.put("brandList", brandList);
		map.put("set1", set1);
		map.put("manufacturerList", manufacturerList);
		map.put("copyList", copyList);
		map.put("enterdByList", enterdByList);
		map.put("authorisedList", authorisedList);
		map.put("storeProformaList", storeProformaList);// javed
		map.put("storeProformaList1",storeProformaList1);
		return map;
	}























	/*public Map<String, Object> getItemListForDefectiveDrugsByAutocomplete(
			Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		session = (Session) getSession();
		String pvmsNo = null;
		Box box = (Box) dataMap.get("box");
		int deptId = 0;
		deptId = Integer.parseInt("" + dataMap.get("deptId"));
		//List objectList = new ArrayList();
		try {
			String str = "%" + dataMap.get("autoHint") + "%";
			String qry = "SELECT item_id FROM store_item_batch_stock where department_id="
					+ deptId ;
			List<Integer> objectList = new ArrayList<Integer>();
			objectList = (List<Integer>) session.createSQLQuery(qry).list();


			if (objectList.size() != 0) {
				List<BigDecimal> objectNewList = new ArrayList<BigDecimal>();
				String sql="";
				for (int i=0;i<objectList.size();i++) {
					if(i==0){
						sql=""+objectList.get(i);
					}else{
						sql=sql+" , "+objectList.get(i);
					}
				}
				if(sql!=""){

					itemList=getHibernateTemplate().find("select item from jkt.hms.masters.business.MasStoreItem as item where item.Nomenclature like '"+str+"' and item.Department.Id='"+deptId+"' and item.Id not in("+sql+") and rownum < 15");
				}
			}/*else{
					itemList=getHibernateTemplate().find("select item from jkt.hms.masters.business.MasStoreItem as item where item.Nomenclature like '"+str+"' and item.Department.Id='"+deptId+"'");
				}
			sys
			String qry = "SELECT item_id FROM store_item_batch_stock where department_id="
					+ deptId ;
			List<Integer> objectList = new ArrayList<Integer>();
			objectList = (List<Integer>) session.createSQLQuery(qry).list();

			if (objectList.size() != 0) {
				List<BigDecimal> objectNewList = new ArrayList<BigDecimal>();
				String sql="";
				for (int i=0;i<objectList.size();i++) {
					if(i<1000){
					if(i==0){
						sql=""+objectList.get(i);
					}else{
						sql=sql+" , "+objectList.get(i);
					}
				}

				if(sql!=""){

					itemList=getHibernateTemplate().find("select item from jkt.hms.masters.business.MasStoreItem as item where item.Nomenclature like '"+str+"' and item.Department.Id='"+deptId+"' and item.Id not in("+sql+") and rownum < 15");
				}

			}
			}
		else{
					itemList=getHibernateTemplate().find("select item from jkt.hms.masters.business.MasStoreItem as item where item.Nomenclature like '"+str+"' and item.Department.Id='"+deptId+"'");
				}


			if (objectList.size() != 0) {
				List<BigDecimal> objectNewList = new ArrayList<BigDecimal>();
				String sql="";
				for (int i=0;i<objectList.size();i++) {
					if(i<1000){
					if(i==0){
						sql=""+objectList.get(i);
					}else{
						sql=sql+" , "+objectList.get(i);
					}
				}

				if(sql!=""){

					itemList=getHibernateTemplate().find("select item from jkt.hms.masters.business.MasStoreItem as item where item.Nomenclature like '"+str+"' and item.Department.Id='"+deptId+"' and item.Id not in("+sql+") and rownum < 15");
				}

			}
			}
		else{
					itemList=getHibernateTemplate().find("select item from jkt.hms.masters.business.MasStoreItem as item where item.Nomenclature like '"+str+"' and item.Department.Id='"+deptId+"'");
				}
			Criteria c = session.createCriteria(MasStoreItem.class).add(
					Restrictions.like("Nomenclature", str)).add(
					Restrictions.eq("Department.Id", deptId)).add(
					Restrictions.in("Id", objectList));
			c.setFirstResult(0);
			c.setMaxResults(10);
			itemList = c.list();

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		//map.put("objectList", objectList);
		//map.put("objectList", objectList);
		return map;

	}*/
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public Map<String, Object> getItemListForDefectiveDrugsByAutocomplete(
			Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreItem> itemList1 = new ArrayList<MasStoreItem>();
		session = (Session) getSession();
		//String pvmsNo = null;
		//Box box = (Box) dataMap.get("box");
		int hospitalId=0;
		int deptId = 0;
		String qry="";
		hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		deptId = Integer.parseInt("" + dataMap.get("deptId"));
		List objectList = new ArrayList();
		try {
			String str = (String) dataMap.get("autoHint");
			str=str.toUpperCase()+ "%";
			 qry = "SELECT item_id FROM store_item_batch_stock where department_id="
				+ deptId+" and hospital_id="+hospitalId ;

			objectList = (List) session.createSQLQuery(qry).list();
			if (objectList.size() != 0) {
				List<BigDecimal> objectNewList = new ArrayList<BigDecimal>();
				String sql="";
				for (int i=0;i<objectList.size();i++) {
					if(i<100){
						if(i==0){
							sql=""+objectList.get(i);
						}else{
							sql=sql+" , "+objectList.get(i);
						}
					}
				}
				/*Criteria c = session.createCriteria(MasStoreItem.class)
					.add(Restrictions.like("Nomenclature", str))
					.add(Restrictions.in("Id", objectList));
			c.setFirstResult(0);
			c.setMaxResults(10);
			itemList = c.list();*/
				if(!sql.equals(""))

				{   //commented by sky
					itemList=getHibernateTemplate().find("select item from jkt.hms.masters.business.MasStoreItem as item where upper(item.Nomenclature) like '"+str+"'  and item.ItemType.Id='2' and item.Hospital.Id='"+hospitalId+"'");
					itemList1=getHibernateTemplate().find("select item from jkt.hms.masters.business.MasStoreItem as item where upper(item.Nomenclature) like '"+str+"' and item.ItemType.Id='1'");
					itemList.addAll(itemList1);
					System.out.println("itemList in if Statement====>"+itemList.size());

				}else{
					//commented by sky
					itemList=getHibernateTemplate().find("select item from jkt.hms.masters.business.MasStoreItem as item where upper(item.Nomenclature) like '"+str+"'  and item.ItemType.Id='2' and item.Hospital.Id='"+hospitalId+"'");
					itemList1=getHibernateTemplate().find("select item from jkt.hms.masters.business.MasStoreItem as item where upper(item.Nomenclature) like '"+str+"' and item.ItemType.Id='1'");
					itemList.addAll(itemList1);
					System.out.println("itemList in else"+itemList.size());
				}



			} else {
				/*Criteria c = session.createCriteria(MasStoreItem.class)
						.add(Restrictions.eq("Status", "y")).add(Restrictions.like("Nomenclature", str).ignoreCase());
				c.setFirstResult(0);
				c.setMaxResults(10);
				itemList = c.list();*/
                //commented by SKY
				itemList=getHibernateTemplate().find("select item from jkt.hms.masters.business.MasStoreItem as item where upper(item.Nomenclature) like '"+str+"' and item.Status='y'  and item.ItemType.Id='2' and item.Hospital.Id='"+hospitalId+"'");
				itemList1=getHibernateTemplate().find("select item from jkt.hms.masters.business.MasStoreItem as item where upper(item.Nomenclature) like '"+str+"' and item.Status='y' and item.ItemType.Id='1'");

				itemList.addAll(itemList1);
				System.out.println("itemList in second else"+itemList.size());
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		map.put("objectList", objectList);
		return map;
	}
	public Map<String, Object> fillItemsForDefectiveDrugs(
			Map<String, Object> dataMap) {
		session = (Session) getSession();
		String pvms = null;
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<StoreItemBatchStock> batchList = new ArrayList<StoreItemBatchStock>();
		List objectList = new ArrayList();
		int deptId = 0;
		int hospitalId=0;
		BigDecimal stockIn = null;
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		try {
			String str = "" + dataMap.get("pvmsNo");
			
			System.out.println("PVMS="+str);
			
			

			// add javed

			// comment by javed khan for SQL Injuction on 15-08-2012

			/*String sqlQry="select  msi.ITEM_TYPE_ID  from mas_store_item msi  where msi.PVMS_NO=UPPER('"+str+"')";
			List nivList=session.createSQLQuery(sqlQry).list();*/

			// comment by javed khan for SQL Injuction on 15-08-2012


			// add by javed khan for SQL Injuction on 15-08-2012

			Criteria c = session.createCriteria(MasStoreItem.class);
			List nivList=c.setProjection(Projections.projectionList().add(Projections.property("ItemType.Id"))).add(
					Restrictions.eq("PvmsNo", str.toUpperCase())).
					add(Restrictions.eq("Hospital.Id", hospitalId)).list();

			// add by javed khan for SQL Injuction on 15-08-2012
			if(nivList.size() > 0 && (Integer.parseInt((""+nivList.get(0)))) == 2){
				itemList = session.createCriteria(MasStoreItem.class)
				.add(Restrictions.eq("PvmsNo", str).ignoreCase()).add(Restrictions.eq("Hospital.Id", hospitalId))
				.add(Restrictions.eq("Status", "y")).list();



			}else{
				itemList = session.createCriteria(MasStoreItem.class)
				.add(Restrictions.eq("PvmsNo", str).ignoreCase())
				.add(Restrictions.eq("Status", "y")).list();
			}
			
			System.out.println("itemList="+itemList.size());
			System.out.println("nivList="+nivList.size());


			// comment javed

			/*Criteria c = session.createCriteria(MasStoreItem.class).add(
					Restrictions.eq("PvmsNo", str).ignoreCase()).add(
					Restrictions.eq("Status", "y"));
			itemList = c.list();*/
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		if(itemList.size()>0){
			try {
				int itemId = 0;
				for (MasStoreItem masStoreItem : itemList) {
					itemId = masStoreItem.getId();

				}

				if (itemId != 0) {
					Criteria c2 = session.createCriteria(MasStoreBrand.class).add(
							Restrictions.eq("Item.Id", itemId));
					brandList = c2.list();
				}

				Date today = new Date();
				if (itemId != 0) {
					Criteria c3 = session.createCriteria(StoreItemBatchStock.class)
					.add(Restrictions.eq("Item.Id", itemId))
					.add(Restrictions.eq("Hospital.Id", hospitalId))
					.add(Restrictions.eq("Department.Id", deptId))
					.add(Restrictions.gt("ExpiryDate", today))
					.add(Restrictions.gt("ClosingStock", new BigDecimal(0.0)));// add javed khan
					batchList = c3.list();
				}
				// javed for Turn over Register
				List<StoreItemBatchStock> batchListForTurnOver = new ArrayList<StoreItemBatchStock>();
				if (itemId != 0) {
					Criteria c4 = session.createCriteria(StoreItemBatchStock.class)
					.add(Restrictions.eq("Item.Id", itemId))
					.add(Restrictions.eq("Department.Id", deptId))
					.add(Restrictions.eq("Hospital.Id", hospitalId))
					.add(Restrictions.gt("ExpiryDate", today))
					.add(Restrictions.gt("ClosingStock", new BigDecimal(0.0)));   // add javed khan
					batchListForTurnOver = c4.list();
				}

				
				map.put("brandList", brandList);
				map.put("itemList", itemList);
				map.put("batchList", batchList);
				map.put("batchListForTurnOver", batchListForTurnOver);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return map;
	}
	
	public Map<String, Object> fillItemsForDrugDisposal(
			Map<String, Object> dataMap) {
		session = (Session) getSession();
		String pvms = null;
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<StoreItemBatchStock> batchList = new ArrayList<StoreItemBatchStock>();
		List objectList = new ArrayList();
		int deptId = 0;
		int hospitalId=0;
		BigDecimal stockIn = null;
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		try {
			String str = "" + dataMap.get("pvmsNo");
			
			System.out.println("PVMS="+str);
			
			

			// add javed

			// comment by javed khan for SQL Injuction on 15-08-2012

			/*String sqlQry="select  msi.ITEM_TYPE_ID  from mas_store_item msi  where msi.PVMS_NO=UPPER('"+str+"')";
			List nivList=session.createSQLQuery(sqlQry).list();*/

			// comment by javed khan for SQL Injuction on 15-08-2012


			// add by javed khan for SQL Injuction on 15-08-2012

			Criteria c = session.createCriteria(MasStoreItem.class);
			List nivList=c.setProjection(Projections.projectionList().add(Projections.property("ItemType.Id"))).add(
					Restrictions.eq("PvmsNo", str.toUpperCase())).
					add(Restrictions.eq("Hospital.Id", hospitalId)).list();

			// add by javed khan for SQL Injuction on 15-08-2012
			if(nivList.size() > 0 && (Integer.parseInt((""+nivList.get(0)))) == 2){
				itemList = session.createCriteria(MasStoreItem.class)
				.add(Restrictions.eq("PvmsNo", str).ignoreCase()).add(Restrictions.eq("Hospital.Id", hospitalId))
				.add(Restrictions.eq("Status", "y")).list();



			}else{
				itemList = session.createCriteria(MasStoreItem.class)
				.add(Restrictions.eq("PvmsNo", str).ignoreCase())
				.add(Restrictions.eq("Status", "y")).list();
			}
			
			System.out.println("itemList="+itemList.size());
			System.out.println("nivList="+nivList.size());


			// comment javed

			/*Criteria c = session.createCriteria(MasStoreItem.class).add(
					Restrictions.eq("PvmsNo", str).ignoreCase()).add(
					Restrictions.eq("Status", "y"));
			itemList = c.list();*/
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		if(itemList.size()>0){
			try {
				int itemId = 0;
				for (MasStoreItem masStoreItem : itemList) {
					itemId = masStoreItem.getId();

				}

				if (itemId != 0) {
					Criteria c2 = session.createCriteria(MasStoreBrand.class).add(
							Restrictions.eq("Item.Id", itemId));
					brandList = c2.list();
				}

				Date today = new Date();
				if (itemId != 0) {
					Criteria c3 = session.createCriteria(StoreItemBatchStock.class)
					.add(Restrictions.eq("Item.Id", itemId))
					.add(Restrictions.eq("Hospital.Id", hospitalId))
					.add(Restrictions.eq("Department.Id", deptId))
					/*.add(Restrictions.lt("ExpiryDate", today))*/
					.add(Restrictions.gt("ClosingStock", new BigDecimal(0.0)));// add javed khan
					batchList = c3.list();
				}
				// javed for Turn over Register
				List<StoreItemBatchStock> batchListForTurnOver = new ArrayList<StoreItemBatchStock>();
				if (itemId != 0) {
					Criteria c4 = session.createCriteria(StoreItemBatchStock.class)
					.add(Restrictions.eq("Item.Id", itemId))
					.add(Restrictions.eq("Department.Id", deptId))
					.add(Restrictions.eq("Hospital.Id", hospitalId))
					/*.add(Restrictions.lt("ExpiryDate", today))*/
					.add(Restrictions.gt("ClosingStock", new BigDecimal(0.0)));   // add javed khan
					batchListForTurnOver = c4.list();
				}

				
				map.put("brandList", brandList);
				map.put("itemList", itemList);
				map.put("batchList", batchList);
				map.put("batchListForTurnOver", batchListForTurnOver);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return map;
	}
	public Map<String, Object> getExpiryDateInAjax(Map<String, Object> dataMap) {
		int deptId = 0;
		int batchId = 0;
		String batchNo = "";
		Date expiryDate = new Date();
		Date manufacturingDate=new Date();
		List<Object[]>objectList = new ArrayList<Object[]>();
		List<StoreGrnT>sourceList = new ArrayList<StoreGrnT>();
		Map<String, Object> map = new HashMap<String, Object>();
		String date4MySQL1 = "";
		String BG =""; // add by javed khan on 16-08-2012
		session = (Session) getSession();
		int mId = 1;
		int brandId = 0;
		String brandName = "";
		int manufactureId = 0;
		String manufactureName = "";
		int hospitalId = 0;
		int itemId = 0;
		BigDecimal closingStock=new BigDecimal(0.0);
		try {
			if (dataMap.get("deptId") != null)
				deptId = Integer.parseInt("" + dataMap.get("deptId"));
			if (dataMap.get("batchNo") != null)
				batchId =(Integer)dataMap.get("batchNo");
			if(dataMap.get("itemId") != null){
				itemId = (Integer)dataMap.get("itemId");
			}
			if(dataMap.get("hospitalId") != null){
				hospitalId = (Integer)dataMap.get("hospitalId");
			}
			String batchNoStr = "";
			String source = "";
			List<StoreItemBatchStock>batchIdList = new ArrayList<StoreItemBatchStock>();
			batchIdList = session.createCriteria(StoreItemBatchStock.class).add(Restrictions.idEq(batchId))
			.list();

			for(StoreItemBatchStock batch:batchIdList){
				batchNoStr = batch.getBatchNo();

				if(itemId!=0 && batchNoStr != null){
					/*sourceList = session.createCriteria(StoreGrnT.class).createAlias("Item", "i")
							.add(Restrictions.eq("i.Id", itemId)).add(Restrictions.eq("BatchNo", batchNoStr))
							.list();*/
					//sourceList =getHibernateTemplate().find("from jkt.hms.masters.business.StoreGrnT as sgt join sgt.Item item where item.Id="+itemId+" and sgt.BatchNo='"+batchNoStr+"'");
					String qry="Select sgm.RECEIVE_TYPE from store_grn_m sgm left outer join store_grn_t sgt on sgm.GRN_MASTER_ID=sgt.GRN_MASTER_ID where sgt.ITEM_ID='"
						+itemId+"'"
						+"and sgt.BATCH_NO='"
						+batchNoStr+"' and sgm.hospital_id = "+hospitalId;
					source=(String)session.createSQLQuery(qry).uniqueResult();
					map.put("source", source);

				}
			}
			//commented by anamika
			/*String qry = "SELECT manu.expiry_date,manu.MANUFACTURE_DATE,manu.BRAND_GENERIC FROM store_item_batch_stock  manu  where manu.stock_id="
					+ batchNo ;
			objectList = (List) session.createSQLQuery(qry).list();*/

			/*String qry="Select sgm.RECEIVE_TYPE from store_grn_m sgm left outer join store_grn_t sgt on sgm.GRN_MASTER_ID=sgt.GRN_MASTER_ID where sgt.ITEM_ID='"
				+box.getInt("itemId")+"'"
				+"and sgt.BATCH_NO='"
				+box.get("barCodeNo")+"'";
			 source=(String)session.createSQLQuery(qry).uniqueResult();*/
			objectList = session.createCriteria(StoreItemBatchStock.class).add(Restrictions.idEq(batchId))
			.createAlias("Brand", "brand").createAlias("brand.Manufacturer", "manufacture").setProjection(Projections.projectionList()
					.add(Projections.property("ExpiryDate"))
					.add(Projections.property("ManufactureDate"))
					.add(Projections.property("BrandGeneric"))
					.add(Projections.property("brand.Id"))
					.add(Projections.property("brand.BrandName"))
					.add(Projections.property("manufacture.Id"))
					.add(Projections.property("manufacture.ManufacturerName"))
					.add(Projections.property("ClosingStock"))).list();

			Iterator itr=objectList.iterator();
			while(itr.hasNext()){
				Object[] tuple = (Object[]) itr.next();

				try
				{
					expiryDate = java.sql.Date.valueOf(("" + tuple[0]));
				}catch(Exception e)
				{

				}
				try
				{
					if(tuple[1]==null)
					{
						String manufacturingDate1=HMSUtil.convertDateToStringWithoutTime(manufacturingDate);

						SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
						SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");

						map.put("manufacturingDate",formatterOut.format(formatterIn.parse(manufacturingDate1)));


					}else
					{
						manufacturingDate=java.sql.Date.valueOf(("" + tuple[1]));
						map.put("manufacturingDate",manufacturingDate);
					}
				}catch(Exception e)
				{

				}
				// add by javed khan on 16-08-2012
				try
				{
					BG = "" + tuple[2];
					//map.put("BG",BG);
				}catch(Exception e)
				{

				}

				if(tuple[3] != null){
					brandId =(Integer)tuple[3];
				}

				if(tuple[4] != null){
					brandName =(String)tuple[4];
				}else{
					brandName = "";
				}

				if(tuple[5] != null){
					manufactureId =(Integer)tuple[5];
				}

				if(tuple[6] != null){
					manufactureName =(String)tuple[6];
				}else{
					manufactureName = "";
				}
				System.out.println("tuple[7]="+tuple[7]);
				if(tuple[7] != null){
					closingStock =(BigDecimal)tuple[7];
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("brandId", brandId);
		map.put("brandName", brandName);
		map.put("manufactureId", manufactureId);
		map.put("manufactureName", manufactureName);
		map.put("expiryDate", expiryDate);
		map.put("BG",BG);
		map.put("mId", mId);
		map.put("closingStock", closingStock);
		return map;
	}

	public boolean addDefectiveDrugs(Map<String, Object> infoMap,
			Map<String, Object> dataMap) {
		StoreDefectiveDrugM storeDefectiveDrugM = (StoreDefectiveDrugM) infoMap
		.get("storeDefectiveDrugM");
		List<StoreDefectiveDrugT> storeDefectiveDrugTlist = (ArrayList<StoreDefectiveDrugT>) infoMap
		.get("storeDefectiveDrugTlist");
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		boolean successfullyAdded = false;
		@SuppressWarnings("unused")
		int pageNo = 0;
		String entryNo = "";

		StoreDefectiveDrugM storeDefectiveDrugM2 = new StoreDefectiveDrugM();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		String max = "";
		String no = "";
		List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
		StoreItemBatchStock storeItemBatchStock = null;
		if (dataMap.get("deptId") != null)
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		if (dataMap.get("hospitalId") != null)
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		if (dataMap.get("userName") != null)
			userName = ("" + dataMap.get("userName"));
		// Session sess = factory.openSession();
		session = (Session) getSession();
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (!(infoMap.get("headerStored") + "").equals("yes")) {
				hbt.save(storeDefectiveDrugM);
				int storeFyId = 0;
				entryNo = (String) infoMap.get("entryNo");
				Criteria c = session.createCriteria(StoreFyDocumentNo.class)
				.add(Restrictions.eq("Department.Id", deptId))
				.add(Restrictions.eq("Hospital.Id", hospitalId));
				storeFyDocumentNoList = c.list();
				for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
					storeFyId = documentNo.getId();
				}
				StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
				.load(StoreFyDocumentNo.class, storeFyId);
				storeFyDocumentNo.setDefectEntryNo(entryNo);
				hbt.update(storeFyDocumentNo);

			}

			int itemId=0;
			int stockId=0;

			if (storeDefectiveDrugTlist.size() > 0) {
				/*if ((infoMap.get("headerStored") + "").equals("yes")) {
					int id = Integer.parseInt("" + infoMap.get("entryId"));
					storeDefectiveDrugM2.setId(id);
				}*/
				for (int i = 0; i < storeDefectiveDrugTlist.size(); i++) {
					StoreDefectiveDrugT storeDefectiveDrugTObj = new StoreDefectiveDrugT();
					storeDefectiveDrugTObj = (StoreDefectiveDrugT) storeDefectiveDrugTlist.get(i);
					if ((infoMap.get("headerStored") + "").equals("yes")) {
						storeDefectiveDrugTObj.setDefectM(storeDefectiveDrugM2);
					} else {
						storeDefectiveDrugTObj.setDefectM(storeDefectiveDrugM);
					}
					hbt.save(storeDefectiveDrugTObj);
					itemId=storeDefectiveDrugTObj.getItem().getId();
					stockId=storeDefectiveDrugTObj.getBatchNo().getId();
					storeItemBatchStockList = hbt.find("from jkt.hms.masters.business.StoreItemBatchStock as inp"
							+ " where inp.Item.Id = "+ itemId+ " and inp.Department.Id = "+ deptId+ " and inp.Hospital.Id = "+ hospitalId+ " and inp.Id ="+ stockId);
					/*System.out.println("storeItemBatchStockList="+storeItemBatchStockList.size());
					System.out.println("itemId="+itemId);
					System.out.println("stockId="+stockId);
					System.out.println("hospitalId="+hospitalId);
					System.out.println("deptId="+deptId);*/

					if (storeItemBatchStockList != null
							&& storeItemBatchStockList.size() > 0) {
						int id = storeItemBatchStockList.get(0).getId();
						storeItemBatchStock = (StoreItemBatchStock) hbt.load(
								StoreItemBatchStock.class, id);
						BigDecimal existing_closing_stock = storeItemBatchStock
						.getClosingStock();
						BigDecimal existing_defect_stock = storeItemBatchStock
						.getDefectQty();
						try
						{
							if(existing_defect_stock.equals(null))
							{
								existing_defect_stock=new BigDecimal(0);
							}
						}
						catch(Exception e)
						{
							existing_defect_stock=new BigDecimal(0);
						}
						BigDecimal defect_qty = storeDefectiveDrugTObj
						.getDefectQty();
						storeItemBatchStock
						.setClosingStock(existing_closing_stock
								.subtract(defect_qty));
						storeItemBatchStock.setDefectQty(existing_defect_stock
								.add(defect_qty));
						hbt.update(storeItemBatchStock);
					}

				}
			}
			successfullyAdded = true;
			tx.commit();

		} catch (RuntimeException e) {
			if (tx != null)
				tx.rollback();
			// throw e; // or display error message
			e.printStackTrace();
		} finally {
			//session.close();
		}

		return successfullyAdded;

	}

	public Map searchDefectiveDrug(Map searchFieldMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		String fromDate = "";
		String toDate = "";
		int hospitalId=0;
		int deptId=0;
		List<StoreDefectiveDrugM> gridDefectiveDrugHeaderList = new ArrayList<StoreDefectiveDrugM>();
		List<StoreDefectiveDrugT> gridDefectiveDrugDetailList = new ArrayList<StoreDefectiveDrugT>();
		String entryNo = "";
		session = (Session) getSession();
		try {

			hospitalId=(Integer)searchFieldMap.get("hospitalId");
			if(searchFieldMap.get("deptId") != null)
			{
			deptId=(Integer)searchFieldMap.get("deptId");
			}
			if ((!searchFieldMap.get("fromDate").equals("")) && (!searchFieldMap.get("toDate").equals(""))) {
				fromDate = (String) searchFieldMap.get("fromDate");
				toDate = (String) searchFieldMap.get("toDate");

				SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
				String date4MySQL1 = formatterOut.format(formatterIn.parse(fromDate));
				String date4MySQL2 = formatterOut.format(formatterIn.parse(toDate));
				java.sql.Date startDate = java.sql.Date.valueOf(date4MySQL1);
				java.sql.Date endDate = java.sql.Date.valueOf(date4MySQL2);
				/*
				 * Commented By Ujjwal For Sql Injection
				 */
				/*gridDefectiveDrugDetailList = getHibernateTemplate().find("from jkt.hms.masters.business.StoreDefectiveDrugT ");*/

				gridDefectiveDrugDetailList=session.createCriteria(StoreDefectiveDrugT.class).list();

				/*
				 * Commented By Ujjwal For Sql Injection
				 */



						/*	gridDefectiveDrugHeaderList = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreDefectiveDrugM as poh where "
								+ " poh.GrnDate between '" + startDate
								+ "' and '" + endDate + "'");*/
				 
				gridDefectiveDrugHeaderList=session.createCriteria(StoreDefectiveDrugM.class)
				.add(Restrictions.between("GrnDate", HMSUtil.convertStringTypeDateToDateType(fromDate), HMSUtil.convertStringTypeDateToDateType(toDate))).list();
              


			}
		} catch (Exception e) {
			e.printStackTrace();		}

		try {
			if (!searchFieldMap.get("entryNo").equals("0")) {

				entryNo = (String) searchFieldMap.get("entryNo");
				/*
				 * Commented By Ujjwal For Sql Injection
				 */
				/*gridDefectiveDrugDetailList = getHibernateTemplate().find("from jkt.hms.masters.business.StoreDefectiveDrugT ");*/
				gridDefectiveDrugDetailList=session.createCriteria(StoreDefectiveDrugT.class).list();
				/*
				 * Commented By Ujjwal For Sql Injection
				 */

				/*				gridDefectiveDrugHeaderList = getHibernateTemplate()
						.find(
								"from jkt.hms.masters.business.StoreDefectiveDrugM as pod where pod.EntryNo = '"
										+ entryNo + "' and Hospital.Id='"++"'");
				 */
				gridDefectiveDrugHeaderList=session.createCriteria(StoreDefectiveDrugM.class)
				.add(Restrictions.eq("EntryNo", entryNo)).add(Restrictions.eq("Hospital.Id", hospitalId)).list();

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		System.out.println("gridDefectiveDrugDetailList-----"+gridDefectiveDrugDetailList.size());
		System.out.println("gridDefectiveDrugHeaderList-----"+gridDefectiveDrugHeaderList.size());
		map.put("gridDefectiveDrugDetailList", gridDefectiveDrugDetailList);
		map.put("gridDefectiveDrugHeaderList", gridDefectiveDrugHeaderList);

		return map;
	}

	public Map<String, Object> defectiveDrugModifyMap(int entryId, int pageNo) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreDefectiveDrugM> gridDefectiveDrugMList = new ArrayList<StoreDefectiveDrugM>();
		List<StoreDefectiveDrugT> gridDefectiveDrugTList = new ArrayList<StoreDefectiveDrugT>();
		int firstResult = 0;
		int maxResults = 10;

		if (pageNo != 0) {
			firstResult = firstResult + (pageNo) * 10;
		}

		Session session = (Session) getSession();
		Criteria c = session.createCriteria(StoreDefectiveDrugT.class).add(
				Restrictions.eq("DefectM.Id", entryId));
		c.setFirstResult(firstResult);
		c.setMaxResults(maxResults);
		gridDefectiveDrugTList = c.list();

		gridDefectiveDrugMList = session.createCriteria(StoreDefectiveDrugM.class).add(Restrictions.eq("Id", entryId))
		.list();

		map.put("gridDefectiveDrugTList", gridDefectiveDrugTList);
		map.put("gridDefectiveDrugMList", gridDefectiveDrugMList);
		return map;
	}

	public List<StoreDefectiveDrugM> getDefectiveList() {
		Session session = (Session) getSession();
		List<StoreDefectiveDrugM> defectiveList = session.createCriteria(
				StoreDefectiveDrugM.class).add(Restrictions.eq("Status", "y"))
				.list();
		return defectiveList;
	}

	public Map getDefectiveDrugModifyMap(int entryId, int pageNo) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreDefectiveDrugM> gridDefectiveDrugMList = new ArrayList<StoreDefectiveDrugM>();
		List<StoreDefectiveDrugT> gridDefectiveDrugTList = new ArrayList<StoreDefectiveDrugT>();
		List<StoreFollowupDetails> storeFollowupDetailsList = new ArrayList<StoreFollowupDetails>();
		int firstResult = 0;
		int maxResults = 10;

		if (pageNo != 0) {
			firstResult = firstResult + (pageNo) * 10;
		}

		Session session = (Session) getSession();
		Criteria c = session.createCriteria(StoreDefectiveDrugT.class).add(
				Restrictions.eq("DefectM.Id", entryId));
		c.setFirstResult(firstResult);
		c.setMaxResults(maxResults);
		gridDefectiveDrugTList = c.list();
		gridDefectiveDrugMList = session.createCriteria(
				StoreDefectiveDrugM.class).add(Restrictions.eq("Id", entryId))
				.list();

		storeFollowupDetailsList = session.createCriteria(	StoreFollowupDetails.class)
		.add(Restrictions.eq("DefectM.Id", entryId)).list();

		List<MasEmployee> enterdByList = new ArrayList<MasEmployee>();
		enterdByList=session.createCriteria(MasEmployee.class).add(Restrictions.eq("Status", "y")).list();
		List<MasEmployee> authorisedList = new ArrayList<MasEmployee>();
		authorisedList=session.createCriteria(MasEmployee.class).add(Restrictions.eq("Status", "y")).list();

		map.put("storeFollowupDetailsList", storeFollowupDetailsList);
		map.put("enterdByList", enterdByList);
		map.put("authorisedList", authorisedList);
		map.put("gridDefectiveDrugTList", gridDefectiveDrugTList);
		map.put("gridDefectiveDrugMList", gridDefectiveDrugMList);
		return map;
	}

	public List<StoreDefectiveDrugM> getDefectDrug(int entryId) {
		Session session = (Session) getSession();
		List<StoreDefectiveDrugM> defectMList = session.createCriteria(
				StoreDefectiveDrugM.class).add(Restrictions.eq("Id", entryId))
				.list();
		return defectMList;
	}

	public boolean createAdjustment(Map<String, Object> infoMap) {
		StoreAdjustmentM storeAdjustmentM = (StoreAdjustmentM) infoMap
		.get("storeAdjustmentM");
		List<StoreAdjustmentT> storeAdjustmentTlist = (ArrayList<StoreAdjustmentT>) infoMap
		.get("storeAdjustmentTlist");
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		boolean successfullyAdded = false;
		@SuppressWarnings("unused")
		int pageNo = 0;
		String entryNo = "";
		int deptId = 0;
		int hospitalId = 0;
		String userName = "";
		String max = "";
		String no = "";

		if (infoMap.get("deptId") != null)
			deptId = Integer.parseInt("" + infoMap.get("deptId"));
		if (infoMap.get("hospitalId") != null)
			hospitalId = Integer.parseInt("" + infoMap.get("hospitalId"));
		if (infoMap.get("userName") != null)
			userName = ("" + infoMap.get("userName"));
		StoreAdjustmentM storeAdjustmentM2 = new StoreAdjustmentM();

		// Session sess = factory.openSession();
		session = (Session) getSession();
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (!(infoMap.get("headerStored") + "").equals("yes")) {
				hbt.save(storeAdjustmentM);
				int storeFyId = 0;
				entryNo = (String) infoMap.get("entryNo");
				Criteria c = session.createCriteria(StoreFyDocumentNo.class)
				.add(Restrictions.eq("Department.Id", deptId));
				storeFyDocumentNoList = c.list();
				for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
					storeFyId = documentNo.getId();
				}
				StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
				.load(StoreFyDocumentNo.class, storeFyId);
				storeFyDocumentNo.setAdjustmentNo(entryNo);
				hbt.update(storeFyDocumentNo);

			}
			List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
			StoreItemBatchStock storeItemBatchStock = null;

			if (storeAdjustmentTlist.size() > 0) {
				if ((infoMap.get("headerStored") + "").equals("yes")) {
					int id = Integer.parseInt("" + infoMap.get("entryId"));
					storeAdjustmentM2.setId(id);
				}
				for (int i = 0; i < storeAdjustmentTlist.size(); i++) {
					StoreAdjustmentT storeAdjustmentTObj = new StoreAdjustmentT();
					storeAdjustmentTObj = (StoreAdjustmentT) storeAdjustmentTlist
					.get(i);
					if ((infoMap.get("headerStored") + "").equals("yes")) {
						storeAdjustmentTObj.setAdjust(storeAdjustmentM2);
					} else {
						storeAdjustmentTObj.setAdjust(storeAdjustmentM);
					}
					hbt.save(storeAdjustmentTObj);

					int item_id = storeAdjustmentTObj.getItem().getId();
					int brand_id = storeAdjustmentTObj.getBrand().getId();
					String batchNo = storeAdjustmentTObj.getBatchNo();
					List<StoreItemBatchStock> temp = new ArrayList<StoreItemBatchStock>();
					/*temp = hbt
					.find("from jkt.hms.masters.business.StoreItemBatchStock");*/
					if (temp != null & temp.size() > 0) {

					}
					/*storeItemBatchStockList = hbt
					.find("from jkt.hms.masters.business.StoreItemBatchStock as inp where inp.Item.Id = "
							+ item_id
							+ " and inp.Id ="
							+ batchNo
							+ " and inp.Brand.Id= " + brand_id);*/
					if (storeItemBatchStockList != null
							&& storeItemBatchStockList.size() > 0) {
						int id = storeItemBatchStockList.get(0).getId();
						storeItemBatchStock = (StoreItemBatchStock) hbt.load(
								StoreItemBatchStock.class, id);
						BigDecimal existing_closing_stock = storeItemBatchStock
						.getClosingStock();
						BigDecimal existing_adjust_stock = storeItemBatchStock
						.getAdjustQty();
						BigDecimal adjust_qty = storeAdjustmentTObj
						.getAdjustQty();
						storeItemBatchStock
						.setClosingStock(existing_closing_stock
								.subtract(adjust_qty));
						storeItemBatchStock.setAdjustQty(existing_adjust_stock
								.add(adjust_qty));
						hbt.update(storeItemBatchStock);

					}

				}
			}
			successfullyAdded = true;
			tx.commit();

		} catch (RuntimeException e) {
			if (tx != null)
				tx.rollback();
			// throw e; // or display error message
			e.printStackTrace();
		} finally {
			//session.close();
		}

		return successfullyAdded;

	}

	public Map getResponseIndentList(Box box) {
		Map map = new HashMap();
		List<StoreIndentM> indentList = new ArrayList<StoreIndentM>();
		List<StorePoHeader> poList = new ArrayList<StorePoHeader>();
		map.put("choice", box.getString(SOURCE_OF_SUPPLY));
		if (box.getString(SOURCE_OF_SUPPLY).equalsIgnoreCase("P")) {
			indentList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreIndentM as md where md.IndentType !='d' and md.Status ='o' and md.Department.Id = "
					+ box.getInt("deptId")
					+" and md.Hospital.Id='"+box.getInt("hospitalId")+"'"
					+" order by md.Id desc");
			map.put("second_combo", indentList);
		} else if (box.getString(SOURCE_OF_SUPPLY).equalsIgnoreCase("A")
				|| box.getString(SOURCE_OF_SUPPLY).equalsIgnoreCase("I")) {
			indentList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreIndentM as md where  md.Status='o' and md.IndentType='d' and md.SuppliedBy.Id = "
					+ box.getInt(SUPPLIER_ID)
					+ " and md.Department.Id = "
					+ box.getInt("deptId")
					+" and md.Hospital.Id='"+box.getInt("hospitalId")+"'"
					+" order by md.Id desc");
			map.put("second_combo", indentList);
		}
		if (box.getString(SOURCE_OF_SUPPLY).equalsIgnoreCase("L")) {
			poList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StorePoHeader as mi where mi.Supplier.Id = "
					+ box.getInt(SUPPLIER_ID)
					+ " and mi.Department.Id = " + box.getInt("deptId")
					+" and mi.Hospital.Id='"+box.getInt("hospitalId")+"'"
					+ " and mi.Status = 'o' order by mi.Id desc");
			map.put("second_combo", poList);
		}
		return map;
	}


	public Map getResponseProformaList(Box box) {
		Map map = new HashMap();
		List<StoreIndentM> indentList = new ArrayList<StoreIndentM>();
		List<StorePoHeader> poList = new ArrayList<StorePoHeader>();
		int hospitalId=0;

		hospitalId=box.getInt("hospitalId");
		map.put("choice", box.getString(SOURCE_OF_SUPPLY));
		int proId=0;
		//if(box.getInt(""))
		if (box.getString(SOURCE_OF_SUPPLY).equalsIgnoreCase("L")) {
			poList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StorePoHeader as mi where mi.Supplier.Id = "
					+ box.getInt(SUPPLIER_ID)
					+ " and mi.Department.Id = " + box.getInt("deptId")
					+ " and mi.Hospital.Id = '" + hospitalId+"'"
					+ " order by mi.Id desc");
			map.put("second_combo", poList);
		}
		return map;
	}












	public Map getResponsePoList(Box box) {
		Map map = new HashMap();
		session = (Session) getSession();
		String netAmuont="";
		List amountValue=new ArrayList();
		List<StorePoHeader> poList = new ArrayList<StorePoHeader>();
		List<StorePoDetail> poDetailList = new ArrayList<StorePoDetail>();
		int hospitalId=box.getInt("hospitalId");
		poList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StorePoHeader as mi where  mi.Supplier.Id = "
				+ box.getInt(SUPPLIER_ID) + " and mi.Department.Id = "
				+ box.getInt("deptId")+" and Hospital.Id='"+hospitalId+"'"
				+ " and mi.Status = 'y' order by mi.PoDate desc");

		map.put("second_combo", poList);
		map.put("netAmuont",netAmuont);

		return map;
	}

	public Map<String, Object> defectiveDrugModifyMap(int id) {
		// TODO Auto-generated method stub
		return null;
	}

	// =========================================================================================================================
	// ====================END OF ABHA -------- GRN,LOANIN,BOOENTRY, DEFECTIVE
	// DRUGS ========================================
	// ========================================================================================================

	// *********************************************************************************************************************
	// ------------------------------------Start of Methods Written By
	// Vivek------------------------------------------
	// ****************************************************************************************************************

	// ------Indent To SOC--------------------------------------
	public Map<String, Object> getItemListForIndentToSOC(
			Map<String, Object> dataMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		session = (Session) getSession();
		String pvmsNo = null;
		int deptId = 0;
		int indentId = 0;
		deptId = Integer.parseInt("" + dataMap.get("deptId"));
		indentId = Integer.parseInt("" + dataMap.get("indentId"));
		List objectList = new ArrayList();
		try {
			String str = "%" + dataMap.get("autoHint") + "%";
			String qry1 = "SELECT t.item_id FROM store_indent_t t,store_indent_m m where t.indent_id='"
				+ indentId + "' and m.indent_id=t.indent_id";
			objectList = (List) session.createSQLQuery(qry1).list();
			if (objectList.size() != 0) {
				Criteria c = session.createCriteria(MasStoreItem.class).add(
						Restrictions.like("Nomenclature", str)).add(
								Restrictions.eq("Department.Id", deptId)).add(
										Restrictions.not(Restrictions.in("Id", objectList)));
				c.setFirstResult(0);
				c.setMaxResults(10);
				itemList = c.list();
			} else {
				Criteria c = session.createCriteria(MasStoreItem.class).add(
						Restrictions.like("Nomenclature", str)).add(
								Restrictions.eq("Department.Id", deptId));
				c.setFirstResult(0);
				c.setMaxResults(10);
				itemList = c.list();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;

	}

	public Map<String, Object> fillItemsCommon(Map<String, Object> dataMap) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreItem> itemList1 = new ArrayList<MasStoreItem>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		session = (Session) getSession();
		String pvmsNo = null;
		int item_id = 0;
		int hospitalId=0;
		int sec=0;
		try {
			pvmsNo = "" + dataMap.get("pvmsNo");
			if(dataMap.get("sec")!=null){
				sec=Integer.parseInt(""+dataMap.get("sec"));
			}

			hospitalId=(Integer)dataMap.get("hospitalId");
			if(sec==0){
				// add javed khan
				/*
				 * Commented By Ujjwal For Sql Injection
				 */
				/*String sqlQry="select  msi.ITEM_TYPE_ID  from mas_store_item msi  where msi.PVMS_NO=UPPER('"+pvmsNo+"')";
				String sqlQry="select  msi.ITEM_TYPE_ID  from mas_store_item msi  where msi.PVMS_NO=UPPER('"+pvmsNo+"')";
				List nivList=session.createSQLQuery(sqlQry).list();
				if(nivList.size()>0){
				if((Integer.parseInt((""+nivList.get(0)))) == 2){
					itemList = session.createCriteria(MasStoreItem.class)
					.add(Restrictions.eq("PvmsNo", pvmsNo).ignoreCase()).add(Restrictions.eq("Hospital.Id", hospitalId))
					.add(Restrictions.eq("Status", "y")).list();

				}else{
			itemList = session.createCriteria(MasStoreItem.class)
					.add(Restrictions.eq("PvmsNo", pvmsNo).ignoreCase())
					.add(Restrictions.eq("Status", "y")).list();
				}

				}
				map.put("itemList", itemList);*/

				// add javed khan


				// comment by javed khan


				Criteria c = session.createCriteria(MasStoreItem.class)
				.add(Restrictions.eq("PvmsNo", pvmsNo))
				.add(Restrictions.eq("Status", "y").ignoreCase());
				itemList = c.list();

				



				Criteria c1 = session.createCriteria(MasStoreBrand.class)
				.createAlias("Item", "item").add(
						Restrictions.like("item.PvmsNo", pvmsNo));
				brandList = c1.list();
			}else{
				Criteria c3 = session.createCriteria(MasStoreItem.class)
						.add(Restrictions.eq("PvmsNo", pvmsNo))
						.add(Restrictions.eq("Status", "y").ignoreCase());
						itemList = c3.list();

				

				Criteria c5 = session.createCriteria(MasStoreBrand.class)
				.createAlias("Item", "item").add(Restrictions.like("item.PvmsNo", pvmsNo)).add(Restrictions.eq("item.Section.Id", sec));
				brandList = c5.list();
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		map.put("brandList", brandList);
		return map;

	}

	public Map<String, Object> fillItemsForIndentToSOC(
			Map<String, Object> dataMap) {

		session = (Session) getSession();
		String pvms = null;
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreItem> itemList1 = new ArrayList<MasStoreItem>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List objectList = new ArrayList();
		int deptId = 0;
		int hospitalId = 0;
		BigDecimal stockIn = null;
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		try {
			String str = "" + dataMap.get("pvmsNo");
			
			Criteria c = session.createCriteria(MasStoreItem.class)
					.add(Restrictions.eq("PvmsNo", str))					
					.add(Restrictions.eq("Status", "y").ignoreCase());
					itemList = c.list();

					

					itemList = c.list();
					
					
					
			
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		try {
			int itemId = 0;
			for (MasStoreItem masStoreItem : itemList) {
				itemId = masStoreItem.getId();

			}

			if (itemId != 0) {
				Criteria c2 = session.createCriteria(MasStoreBrand.class).add(
						Restrictions.eq("Item.Id", itemId));
				brandList = c2.list();
			}
			String qry = "SELECT sum(closing_stock) FROM store_item_batch_stock where item_id= "+ itemId + " and department_id= " +deptId+ " ";
			objectList = (List) session.createSQLQuery(qry).list();

			if (objectList.get(0) != null)
				stockIn = new BigDecimal("" + objectList.get(0));
			else
				stockIn = new BigDecimal("0");
			map.put("brandList", brandList);
			map.put("itemList", itemList);
			map.put("stockIn", stockIn);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public Map getBrandListForSOC(int itemId, int detailId) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreBrand> masStoreBrandList = new ArrayList<MasStoreBrand>();
		List<StoreIndentT> storeIndentTList = new ArrayList<StoreIndentT>();
		List<MasManufacturer> masManufacturerList = new ArrayList<MasManufacturer>();
		masStoreBrandList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.MasStoreBrand as md where md.Item.Id = '"
				+ itemId + "' ");
		;
		masManufacturerList = getHibernateTemplate().find(
		"from jkt.hms.masters.business.MasManufacturer  ");
		;
		storeIndentTList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreIndentT as sit where sit.Id='"
				+ detailId + "'  ");
		;
		map.put("masStoreBrandList", masStoreBrandList);
		map.put("masManufacturerList", masManufacturerList);
		map.put("storeIndentTList", storeIndentTList);
		return map;
	}

	public Map getBrandListForSOC(int itemId) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreBrand> masStoreBrandList = new ArrayList<MasStoreBrand>();
		List<MasManufacturer> masManufacturerList = new ArrayList<MasManufacturer>();
		masStoreBrandList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.MasStoreBrand as md where md.Item.Id = '"
				+ itemId + "' ");
		;
		masManufacturerList = getHibernateTemplate().find(
		"from jkt.hms.masters.business.MasManufacturer  ");
		;
		map.put("masStoreBrandList", masStoreBrandList);
		map.put("masManufacturerList", masManufacturerList);
		return map;
	}

	public Map<String, Object> showIndentJspSOC(Map<String, Object> dataMap) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		if (dataMap.get("deptId") != null)
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		if (dataMap.get("hospitalId") != null)
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		if (dataMap.get("userName") != null)
			userName = ("" + dataMap.get("userName"));

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<StoreIndentM> searchIndentList = new ArrayList<StoreIndentM>();
		List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier>();
		session = (Session) getSession();
		String no = "";
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {
			itemList = (List<MasStoreItem>) hbt
			.find("from jkt.hms.masters.business.MasStoreItem as mis where mis.Status='y'  and mis.Id<100");
			departmentList = (List) getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasDepartment as md where md.Status='y'");
			storeFyDocumentNoList = (List) getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"
					+ deptId + "'");
			searchIndentList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreIndentM as md where md.Status = 'o' and md.IndentType= 's'");
			supplierList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasStoreSupplier as md order by md.SupplierName ");
			for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
				if (storeFyDocumentNo.getIndentToSocNo() != null) {
					no = ("" + storeFyDocumentNo.getIndentToSocNo());
					no = getMaxNo(no);
				} else {
					no = getMaxNo("");
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("supplierList", supplierList);
		map.put("itemList", itemList);
		map.put("maxIndentNo", no);
		map.put("departmentList", departmentList);
		map.put("searchIndentList", searchIndentList);
		return map;
	}

	public Map<String, Object> addNextOrSubmitIndentToSOC(
			Map<String, Object> dataMap) {

		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		if (dataMap.get("deptId") != null)
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		if (dataMap.get("hospitalId") != null)
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		if (dataMap.get("userName") != null)
			userName = ("" + dataMap.get("userName"));
		int storeFyId = 0;
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();
		String successfullyAdded = "no";
		@SuppressWarnings("unused")
		int pageNo = 0;
		String maxIndentNo = "";
		StoreIndentM storeIndentM = new StoreIndentM();
		List<StoreIndentM> storeIndentMlist = new ArrayList<StoreIndentM>();
		List<StoreIndentT> storeIndentTlist = new ArrayList<StoreIndentT>();

		// For Show Jsp
		List<StoreIndentM> searchIndentList = new ArrayList<StoreIndentM>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<MasStoreSupplier> masStoreSupplierList = new ArrayList<MasStoreSupplier>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<StoreIndentM> list = new ArrayList<StoreIndentM>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();

		session = (Session) getSession();
		List objectList = new ArrayList();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));

		int indentId = 0;
		String indentNo = "";
		if (dataMap.get("storeIndentM") != null) {
			storeIndentM = (StoreIndentM) dataMap.get("storeIndentM");
		}
		if (dataMap.get("indentNo") != null) {
			indentNo = "" + dataMap.get("indentNo");
		}

		if (dataMap.get("storeIndentTlist") != null) {
			storeIndentTlist = (List<StoreIndentT>) dataMap
			.get("storeIndentTlist");
		}
		if (dataMap.get("pageNo") != null) {
			pageNo = Integer.parseInt("" + dataMap.get("pageNo"));
		}
		if (dataMap.get("indentId") != null) {
			indentId = Integer.parseInt("" + dataMap.get("indentId"));
		}
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			if (pageNo == 1) {
				hbt.save(storeIndentM);
				storeIndentMlist = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreIndentM as md where md.IndentNo = '"
						+ indentNo + "'");
				for (StoreIndentM storeIndentM2 : storeIndentMlist) {
					indentId = storeIndentM2.getId();
				}
				Criteria c = session.createCriteria(StoreFyDocumentNo.class)
				.add(Restrictions.eq("Department.Id", deptId));
				storeFyDocumentNoList = c.list();
				for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
					storeFyId = documentNo.getId();
				}
				StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
				.load(StoreFyDocumentNo.class, storeFyId);
				storeFyDocumentNo.setIndentToSocNo(indentNo);
				hbt.update(storeFyDocumentNo);
			}

			if (storeIndentTlist.size() > 0) {
				if (pageNo != 1) {
					storeIndentM.setId(indentId);
				}
				for (int i = 0; i < storeIndentTlist.size(); i++) {
					StoreIndentT storeIndentTObj = new StoreIndentT();
					storeIndentTObj = (StoreIndentT) storeIndentTlist.get(i);
					storeIndentTObj.setIndent(storeIndentM);
					hbt.save(storeIndentTObj);
				}

			}
			successfullyAdded = "yes";
			String qry = "select mas.item_id,mas.pvms_no,mas.nomenclature,mas.strength,b.stock,c.qty_in_mmf,mas.old_niv_no,mas.department_id,con.item_unit_name from mas_store_item mas inner join mas_store_item_conversion con on mas.item_conversion_id= con.item_conversion_id left outer join (select ba.item_id,sum(ba.closing_stock) stock from store_item_batch_stock ba where department_id=1 group by ba.item_id)b on mas.item_id=b.item_id left outer join (select it.qty_in_mmf, it.item_id from  store_indent_m im inner join store_indent_t it on im.indent_id=it.indent_id where im.mmf_for_the_year= "
				+ year + " )c on mas.item_id=c.item_id ";
			objectList = (List) session.createSQLQuery(qry).list();
			masStoreSupplierList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasStoreSupplier as md order by md.SupplierName");
			searchIndentList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreIndentM as md where md.Status = 'y'");
			sectionList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasStoreSection ");
			tx.commit();

		} catch (RuntimeException e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();
		} finally {
			// //session.close();
		}

		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();

		String no = "";

		try {
			itemList = (List<MasStoreItem>) hbt
			.find("from jkt.hms.masters.business.MasStoreItem as mis where mis.Status='y'  and mis.Id<100");
			departmentList = (List) getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasDepartment as md where md.Status='y'");
			storeFyDocumentNoList = (List) getHibernateTemplate().find(
			"from jkt.hms.masters.business.StoreFyDocumentNo ");

		} catch (Exception e) {

		}

		map.put("masStoreSupplierList", masStoreSupplierList);
		map.put("searchIndentList", searchIndentList);
		map.put("sectionList", sectionList);
		map.put("objectList", objectList);
		map.put("successfullyAdded", successfullyAdded);
		map.put("indentId", indentId);

		map.put("itemList", itemList);
		map.put("maxIndentNo", no);
		map.put("departmentList", departmentList);

		return map;

	}

	public Map<String, Object> getIndentModifyMapForSOC(int indentId, int pageNo) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIndentM> gridIndentMList = new ArrayList<StoreIndentM>();
		List<StoreIndentT> gridIndentTList = new ArrayList<StoreIndentT>();
		@SuppressWarnings("unused")
		List<MasStoreSection> gridSectionList = new ArrayList<MasStoreSection>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier>();
		int id = 0;
		int firstResult = 0;
		int maxResults = 8;

		if (pageNo != 1) {
			firstResult = firstResult + (pageNo - 1) * 8;
		}
		List<StoreIndentM> searchIndentList = new ArrayList<StoreIndentM>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<StoreIndentM> list = new ArrayList<StoreIndentM>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		session = (Session) getSession();
		List<Object> objectList = new ArrayList<Object>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		try {

			Criteria c = session.createCriteria(StoreIndentT.class).add(
					Restrictions.eq("Indent.Id", indentId));
			gridIndentTList = c.list();
			gridIndentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIndentM as md where md.Id = '"
					+ indentId + "' and md.Status='o'");
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			itemList = (List<MasStoreItem>) hbt
			.find("from jkt.hms.masters.business.MasStoreItem as mis where mis.Status='y'  and mis.Id<100");
			brandList = (List<MasStoreBrand>) hbt
			.find("from jkt.hms.masters.business.MasStoreBrand as mis where mis.Status='y' ");
			supplierList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasStoreSupplier as md where md.Status = 'y'");
			searchIndentList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreIndentM as md where md.Status = 'y'");
			sectionList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasStoreSection ");
			departmentList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasDepartment ");
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("gridIndentMList", gridIndentMList);
		map.put("gridIndentTList", gridIndentTList);
		map.put("indentId", indentId);
		map.put("searchIndentList", searchIndentList);
		map.put("sectionList", sectionList);
		map.put("objectList", objectList);
		map.put("itemList", itemList);
		map.put("departmentList", departmentList);
		map.put("supplierList", supplierList);
		map.put("brandList", brandList);

		return map;
	}

	public boolean updateNextIndentToSOC(Map<String, Object> masterAndDetailMap) {

		boolean successfullyAdded = false;
		@SuppressWarnings("unused")
		StoreIndentM storeIndentM2 = new StoreIndentM();
		StoreIndentM storeIndentM3 = new StoreIndentM();
		List<StoreIndentT> storeIndentTListForUpdate = new ArrayList<StoreIndentT>();
		List<StoreIndentT> storeIndentTListForAdd = new ArrayList<StoreIndentT>();
		int indentId = 0;
		String lastChgBy = "";
		Date lastChgDate = null;
		String lastChgTime = "";
		int pageNo = 0;
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Transaction tx = null;
		session = (Session) getSession();
		try {
			tx = session.beginTransaction();
			if (masterAndDetailMap.get("storeIndentM") != null)
				storeIndentM3 = (StoreIndentM) masterAndDetailMap
				.get("storeIndentM");
			if (masterAndDetailMap.get("storeIndentTListForUpdate") != null) {
				storeIndentTListForUpdate = (List<StoreIndentT>) (masterAndDetailMap
						.get("storeIndentTListForUpdate"));
			}
			if (masterAndDetailMap.get("storeIndentTListForAdd") != null) {
				storeIndentTListForAdd = (List<StoreIndentT>) (masterAndDetailMap
						.get("storeIndentTListForAdd"));
			}
			if (masterAndDetailMap.get("indentId") != null) {
				indentId = Integer.parseInt(""
						+ masterAndDetailMap.get("indentId"));
			}

			if (masterAndDetailMap.get("lastChgBy") != null) {
				lastChgBy = ("" + masterAndDetailMap.get("lastChgBy"));
			}
			if (masterAndDetailMap.get("lastChgTime") != null) {
				lastChgTime = ("" + masterAndDetailMap.get("lastChgTime"));
			}
			if (masterAndDetailMap.get("pageNo") != null) {
				pageNo = Integer.parseInt(("" + masterAndDetailMap
						.get("pageNo")));
			}
			if (masterAndDetailMap.get("lastChgDate") != null) {
				SimpleDateFormat formatterIn = new SimpleDateFormat(
				"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
				"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn.parse(""
						+ masterAndDetailMap.get("lastChgDate")));
				lastChgDate = java.sql.Date.valueOf(date4MySQL);
			}
			if (pageNo == 1) {
				hbt.update(storeIndentM3);
			}

			if (masterAndDetailMap.get("storeIndentTListForUpdate") != null) {

				storeIndentTListForUpdate = (List<StoreIndentT>) masterAndDetailMap
				.get("storeIndentTListForUpdate");
				if (storeIndentTListForUpdate.size() > 0) {

					for (int i = 0; i < storeIndentTListForUpdate.size(); i++) {
						StoreIndentT storeIndentT = new StoreIndentT();
						storeIndentT = (StoreIndentT) storeIndentTListForUpdate
						.get(i);

						StoreIndentM storeIndentM = new StoreIndentM();
						storeIndentM.setId(indentId);
						storeIndentT.setIndent(storeIndentM);

						hbt.update(storeIndentT);
					}
				}
				successfullyAdded = true;
			}
			if (masterAndDetailMap.get("storeIndentTListForAdd") != null) {
				storeIndentTListForAdd = (List<StoreIndentT>) masterAndDetailMap
				.get("storeIndentTListForAdd");
				if (storeIndentTListForAdd.size() > 0) {
					for (int i = 0; i < storeIndentTListForAdd.size(); i++) {
						StoreIndentT storeIndentT = new StoreIndentT();
						storeIndentT = (StoreIndentT) storeIndentTListForAdd
						.get(i);

						StoreIndentM storeIndentM = new StoreIndentM();
						storeIndentM.setId(indentId);
						storeIndentT.setIndent(storeIndentM);

						hbt.save(storeIndentT);
					}
				}
				successfullyAdded = true;
			}
			tx.commit();
		} catch (Exception e) {
			if (tx != null)
				tx.rollback();

			e.printStackTrace();

		} finally {
			//session.close();
		}
		return successfullyAdded;

	}

	public Map<String, Object> getManufacturerNameInAjax(
			Map<String, Object> dataMap) {
		int deptId = 0;
		int brandId = 0;
		String manufacturerName = "";
		List objectList = new ArrayList();
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();
		//		int mId = 1;
		BigDecimal mId=new BigDecimal(0);
		try {
			if (dataMap.get("deptId") != null)
				deptId = Integer.parseInt("" + dataMap.get("deptId"));
			if (dataMap.get("brandId") != null)
				brandId = Integer.parseInt("" + dataMap.get("brandId"));
			String qry = "SELECT manu.manufacturer_id,manu.manufacturer_name FROM mas_store_brand brand,mas_manufacturer manu where brand.brand_id="
				+ brandId
				+ " and brand.manufacturer_id=manu.manufacturer_id ";
			objectList = (List) session.createSQLQuery(qry).list();
			if (objectList.get(0) != null)
				manufacturerName = ("" + objectList.get(0));
			for (Iterator iterator = objectList.iterator(); iterator.hasNext();) {
				Object[] object = (Object[]) iterator.next();
				mId = (BigDecimal) object[0];
				manufacturerName = "" + (String)object[1];
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("manufacturerName", manufacturerName);
		map.put("mId", mId);
		return map;
	}

	// ------End ofIndent To SOC-------------------------------

	// ------Indent To Depot-----------------------------------

	public Map<String, Object> getItemListForIndentToDepot(
			Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		session = (Session) getSession();
		String pvmsNo = null;
		int deptId = 0;
		int indentId = 0;
		int sec=0;
		int hospitalId=0;
		String sl="";
		deptId = Integer.parseInt("" + dataMap.get("deptId"));
		indentId = Integer.parseInt("" + dataMap.get("indentId"));
		sec=Integer.parseInt(""+dataMap.get("sec"));
		sl=dataMap.get("sl").toString();

		List<Integer> objectList = new ArrayList<Integer>();
		try {
			String str =dataMap.get("autoHint") + "%";
			str=str.toUpperCase();
			String qry1 = "SELECT t.item_id FROM store_indent_t t,store_indent_m m where t.indent_id='"
				+ indentId + "' and m.indent_id=t.indent_id";




			objectList = (List<Integer>) session.createSQLQuery(qry1).list();

			if (objectList.size() != 0) {
				List<BigDecimal> objectNewList = new ArrayList<BigDecimal>();
				String sql="";
				for (int i=0;i<objectList.size();i++) {
					if(i==0){
						sql=""+objectList.get(i);
					}else{
						sql=sql+" , "+objectList.get(i);
					}
				}

				if(sec==0){

					if(!sql.equals("")){
						/**************************** Commented and Coded By********************************************************/

						/*					itemList=getHibernateTemplate().find("select item from jkt.hms.masters.business.MasStoreItem as item where upper(item.Nomenclature) like '"+str+"'  and item.Id not in("+sql+") and item.SelfLife='"+sl+"' and item.ItemType='1' and rownum < 15");*/

						itemList=getHibernateTemplate().find("select item from jkt.hms.masters.business.MasStoreItem as item where upper(item.Nomenclature) like '"+str+"'  and item.Id not in("+sql+") and item.SelfLife='"+sl+"' and item.ItemType='1' and rownum < 15");

						Criteria c= session.createCriteria(MasStoreItem.class)
						.add(Restrictions.like("Nomenclature",str).ignoreCase())
						//								.add(Restrictions.ne("Id", Integer.parseInt(sql))).
						.add(Restrictions.not(Restrictions.in("Id", objectList))).
						add(Restrictions.eq("SelfLife", sl)).
						add(Restrictions.eq("ItemType.Id", 2)).setMaxResults(10);
						itemList=c.list();
						//itemList=session.createCriteria(MasStoreItem.class).add(Restrictions.ilike("Nomenclature", str)).add(Restrictions.not(expression)
					}else{
						itemList=getHibernateTemplate().find("select item from jkt.hms.masters.business.MasStoreItem as item where upper(item.Nomenclature) like '" +str+"' and item.SelfLife='"+sl+"' and item.ItemType='1'");
					}
				}else{

					if(!sql.equals("")){
						itemList=getHibernateTemplate().find("select item from jkt.hms.masters.business.MasStoreItem as item where upper(item.Nomenclature) like '"+str+"'  and item.Id not in("+sql+") and item.SelfLife='"+sl+"'  and item.Section.Id='"+sec+"' and item.ItemType='1' and rownum < 15");
					}else{
						itemList=getHibernateTemplate().find("select item from jkt.hms.masters.business.MasStoreItem as item where upper(item.Nomenclature) like '"+str+"'  and item.SelfLife='"+sl+"' and item.Section.Id='"+sec+"' and item.ItemType='1'");
					}
				}
				/*if(objectNewList.size()>0){
					Criteria c = session.createCriteria(MasStoreItem.class).add(
							Restrictions.like("Nomenclature", str)).add(
									Restrictions.eq("Department.Id", deptId)).add(
											Restrictions.not(Restrictions.in("Id", objectNewList)));
					c.setFirstResult(0);
					c.setMaxResults(10);
					itemList = c.list();
				}*/
			} else {
				Criteria c;
				if(sec==0){
					c = session.createCriteria(MasStoreItem.class).add(Restrictions.like("Nomenclature", str).ignoreCase()).add(Restrictions.eq("SelfLife", sl)).add(Restrictions.eq("Hospital.id", 0)).add(Restrictions.eq("ItemType.Id",1));
				}
				else{
					c = session.createCriteria(MasStoreItem.class).add(Restrictions.like("Nomenclature", str).ignoreCase()).add(Restrictions.eq("SelfLife", sl)).add(Restrictions.eq("Section.Id", sec)).add(Restrictions.eq("Hospital.id", 0)).add(Restrictions.eq("ItemType.Id",1));
				}
				c.setFirstResult(0);
				c.setMaxResults(10);
				itemList = c.list();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;

	}

	public Map<String, Object> fillItemsForIndentToDepot(
			Map<String, Object> dataMap) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		session = (Session) getSession();
		String pvmsNo = null;
		int deptId = 0;
		int item_id = 0;
		int hospitalId = 0;  // javed khan
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		List objectList = new ArrayList();
		pvmsNo = "" + dataMap.get("pvmsNo");
		try {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
			//String qry = "select mas.item_id,mas.pvms_no,mas.nomenclature,mas.strength,b.stock,c.qty_in_mmf,mas.old_niv_no, mas.department_id,con.item_unit_name,sec.section_code,mas.SELF_LIFE from mas_store_item mas inner join mas_store_item_conversion con on mas.item_conversion_id=con.item_conversion_id inner join mas_store_section sec on  mas.section_id=sec.section_id left outer join" +
			//	" (select ba.item_id,sum(ba.closing_stock) stock from store_item_batch_stock ba where department_id="+ deptId + " group by ba.item_id)b on mas.item_id=b.item_id left outer join (select it.qty_in_mmf, it.item_id from  store_indent_m im inner join store_indent_t it on im.indent_id=it.indent_id where im.mmf_for_the_year= "+ year+ " )c on mas.item_id=c.item_id where mas.pvms_no='"+ pvmsNo + "'";

			String qry = "select mas.item_id,mas.pvms_no,mas.nomenclature,mas.strength,b.stock,c.MMF_IN_QTY,mas.old_niv_no, mas.department_id,msu.unit_name,sec.section_code,mas.SELF_LIFE from mas_store_item mas inner join mas_store_item_conversion con on mas.item_conversion_id=con.item_conversion_id inner join mas_store_unit msu on  msu.unit_id=con.issue_unit_id inner join mas_store_section sec on  mas.section_id=sec.section_id left outer join (select ba.item_id,sum(ba.closing_stock) stock from store_item_batch_stock ba where department_id=24 and hospital_id="+hospitalId+" group by ba.item_id)b on mas.item_id=b.item_id left outer join (select it.MMF_IN_QTY, it.item_id from  STORE_MMF_DEPARTMENT_M im inner join STORE_MMF_DEPARTMENT_T it on im.ID=it.STORE_MMF_DEPARTMENT_M_ID where im.mmf_for_the_year= "+ year+"  and im.HOSPITAL_ID="+hospitalId+")c on mas.item_id=c.item_id where mas.pvms_no='"+ pvmsNo + "'";





			objectList = (List) session.createSQLQuery(qry).list();
			pvmsNo = "" + dataMap.get("pvmsNo");
			Criteria c = session.createCriteria(MasStoreItem.class).add(
					Restrictions.like("PvmsNo", pvmsNo)).add(
							Restrictions.eq("Status", "y")).add(Restrictions.eq("Hospital.Id", 0));
			itemList = c.list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		map.put("objectList", objectList);
		return map;

	}

	@SuppressWarnings("unchecked")
	public boolean updateNextIndentToDepot(
			Map<String, Object> masterAndDetailMap) {
		boolean successfullyAdded = false;
		@SuppressWarnings("unused")
		StoreIndentM storeIndentM2 = new StoreIndentM();
		StoreIndentM storeIndentM3 = new StoreIndentM();
		List<StoreIndentT> storeIndentTListForUpdate = new ArrayList<StoreIndentT>();
		List<StoreIndentT> storeIndentTListForAdd = new ArrayList<StoreIndentT>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		int indentId = 0;
		String lastChgBy = "";
		Date lastChgDate = null;
		String lastChgTime = "";
		String buttonName="";
		int pageNo = 0;
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		session = (Session) getSession();
		Transaction tx = null;

		try {
			// --------------Transaction Started----------
			tx = session.beginTransaction();

			if (masterAndDetailMap.get("storeIndentM") != null)
				storeIndentM3 = (StoreIndentM) masterAndDetailMap
				.get("storeIndentM");
			if (masterAndDetailMap.get("storeIndentTListForUpdate") != null) {
				storeIndentTListForUpdate = (List<StoreIndentT>) (masterAndDetailMap
						.get("storeIndentTListForUpdate"));
			}
			if (masterAndDetailMap.get("storeIndentTListForAdd") != null) {
				storeIndentTListForAdd = (List<StoreIndentT>) (masterAndDetailMap
						.get("storeIndentTListForAdd"));
			}
			if (masterAndDetailMap.get("indentId") != null) {
				indentId = Integer.parseInt(""
						+ masterAndDetailMap.get("indentId"));
			}
			if(masterAndDetailMap.get("buttonName")!=null){
				buttonName=(String)masterAndDetailMap.get("buttonName");
			}
			if (masterAndDetailMap.get("lastChgBy") != null) {
				lastChgBy = ("" + masterAndDetailMap.get("lastChgBy"));
			}
			if (masterAndDetailMap.get("lastChgTime") != null) {
				lastChgTime = ("" + masterAndDetailMap.get("lastChgTime"));
			}
			if (masterAndDetailMap.get("pageNo") != null) {
				pageNo = Integer.parseInt(("" + masterAndDetailMap
						.get("pageNo")));
			}
			if (masterAndDetailMap.get("lastChgDate") != null) {
				SimpleDateFormat formatterIn = new SimpleDateFormat(
				"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
				"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn.parse(""
						+ masterAndDetailMap.get("lastChgDate")));
				lastChgDate = java.sql.Date.valueOf(date4MySQL);
			}

			if (pageNo == 1) {

				hbt.update(storeIndentM3);
				indentId = storeIndentM3.getId();
				int deptId=storeIndentM3.getDepartment().getId();
				int hospitalId=storeIndentM3.getHospital().getId();
				String indentNo=storeIndentM3.getIndentNo();
				int storeFyId = 0;
				/*
				 * storeIndentMlist=getHibernateTemplate().find("from
				 * jkt.hms.masters.business.StoreIndentM as md where md.IndentNo =
				 * '"+indentNo+"'"); for(StoreIndentM
				 * storeIndentM2:storeIndentMlist){
				 * indentId=storeIndentM2.getId(); //}
				 */
				Criteria c = session.createCriteria(StoreFyDocumentNo.class)
				.add(Restrictions.eq("Department.Id", deptId)).add(
						Restrictions.eq("Hospital.Id", hospitalId)); // addd javed khan
				storeFyDocumentNoList = c.list();

				for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
					storeFyId = documentNo.getId();
				}

				StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
				.load(StoreFyDocumentNo.class, storeFyId);
				storeFyDocumentNo.setIndentToDepotNo(indentNo);
				hbt.update(storeFyDocumentNo);
			}
			if(buttonName.equals("close"))
			{
				StoreIndentM storeIndentM = (StoreIndentM) getHibernateTemplate()
				.load(StoreIndentM.class, indentId);
				storeIndentM.setStatus("o");
				hbt.update(storeIndentM);
			}

			if (masterAndDetailMap.get("storeIndentTListForUpdate") != null) {

				storeIndentTListForUpdate = (List<StoreIndentT>) masterAndDetailMap
				.get("storeIndentTListForUpdate");
				if (storeIndentTListForUpdate.size() > 0) {

					for (int i = 0; i < storeIndentTListForUpdate.size(); i++) {

						StoreIndentT storeIndentT = new StoreIndentT();
						storeIndentT = (StoreIndentT) storeIndentTListForUpdate.get(i);
						StoreIndentM storeIndentM = new StoreIndentM();
						storeIndentM.setId(indentId);
						storeIndentT.setIndent(storeIndentM);
						hbt.update(storeIndentT);

					}
				}
				successfullyAdded = true;
			}
			if (masterAndDetailMap.get("storeIndentTListForAdd") != null) {

				storeIndentTListForAdd = (List<StoreIndentT>) masterAndDetailMap
				.get("storeIndentTListForAdd");
				if (storeIndentTListForAdd.size() > 0) {

					for (int i = 0; i < storeIndentTListForAdd.size(); i++) {

						StoreIndentT storeIndentT = new StoreIndentT();
						storeIndentT = (StoreIndentT) storeIndentTListForAdd
						.get(i);

						StoreIndentM storeIndentM = new StoreIndentM();
						storeIndentM.setId(indentId);
						storeIndentT.setIndent(storeIndentM);
						hbt.save(storeIndentT);
					}
				}
				successfullyAdded = true;
				// --------------Transaction Ended----------
				tx.commit();

			}
		} catch (Exception e) {
			// --------------In case of Transaction Failure----------
			if (tx != null)
				tx.rollback();

			e.printStackTrace();

		}

		return successfullyAdded;
	}

	@SuppressWarnings("unchecked")
	public Map getIndentModifyMapForDepot(int indentId, int pageNo , int deptId,int hospitalId) {

		Map map = new HashMap();
		List<StoreIndentM> gridIndentMList = new ArrayList<StoreIndentM>();
		List<StoreIndentT> gridIndentTList = new ArrayList<StoreIndentT>();
		@SuppressWarnings("unused")
		List<MasStoreSection> gridSectionList = new ArrayList<MasStoreSection>();
		List<MasStoreAirForceDepot> masStoreAirForceDepotList = new ArrayList<MasStoreAirForceDepot>();
		int id = 0;
		int firstResult = 0;
		int maxResults = 8;
		int totalNumberOfRecord = 0 ;
		int totalNumberOfPages = 0 ;
		if (pageNo != 1) {
			firstResult = firstResult + (pageNo - 1) * 8;
		}
		List<StoreIndentM> searchIndentList = new ArrayList<StoreIndentM>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<MasStoreSupplier> masStoreSupplierList = new ArrayList<MasStoreSupplier>();
		List<StoreIndentM> list = new ArrayList<StoreIndentM>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		String no = "";
		session = (Session) getSession();
		List objectList = new ArrayList();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		session = (Session) getSession();
		Transaction tx = null;
		try {
			// --------------Transaction Started----------
			tx = session.beginTransaction();
			Criteria c = session.createCriteria(StoreIndentT.class).add(
					Restrictions.eq("Indent.Id", indentId)) .addOrder(Order.asc("SerialNo"));
			totalNumberOfRecord = c.list().size();
			c.setFirstResult(firstResult);
			c.setMaxResults(maxResults);
			gridIndentTList = c.list();
			gridIndentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIndentM as md where md.Id = '"
					+ indentId + "'and  md.Department.Id='"
					+ deptId + "' and md.Hospital.Id='"
					+ hospitalId + "'");

			String qry = "select mas.item_id,mas.pvms_no,mas.nomenclature,mas.strength,b.stock,c.qty_in_mmf,mas.old_niv_no,mas.department_id,con.item_unit_name from mas_store_item mas inner join mas_store_item_conversion con on mas.item_conversion_id= con.item_conversion_id left outer join (select ba.item_id,sum(ba.closing_stock) stock from store_item_batch_stock ba where department_id=1 group by ba.item_id)b on mas.item_id=b.item_id left outer join (select it.qty_in_mmf, it.item_id from  store_indent_m im inner join store_indent_t it on im.indent_id=it.indent_id where im.mmf_for_the_year='"
				+ year + "' )c on mas.item_id=c.item_id";
			objectList = (List) session.createSQLQuery(qry).list();
			masStoreSupplierList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasStoreSupplier as md order by md.SupplierName");
			searchIndentList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreIndentM as md where md.Status = 'o'and  md.Department.Id='"
					+ deptId + "' and md.Hospital.Id='"
					+ hospitalId + "' and md.IndentType='d' ");
			sectionList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasStoreSection ");
			masStoreAirForceDepotList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasStoreAirForceDepot as md where md.Status = 'y'");
			sectionList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasStoreSection ");
			storeFyDocumentNoList = (List) getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"
					+ deptId + "' and sfdn.Hospital.Id='"+ hospitalId+"'");  // add javed khan
			for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
				if (storeFyDocumentNo.getIndentToDepotNo() != null) {
					no = ("" + storeFyDocumentNo.getIndentToDepotNo());
					no = getMaxNo(no);
				} else {
					no = getMaxNo("");
				}

			}
			// --------------Transaction Ended----------
			tx.commit();

		} catch (Exception e) {
			// --------------In case of Transaction Failure----------
			if (tx != null)
				tx.rollback();
			e.printStackTrace();

		}
		totalNumberOfPages = ((int)totalNumberOfRecord/8)+1 ;
		map.put("totalNumberOfPages", totalNumberOfPages);
		map.put("gridIndentMList", gridIndentMList);
		map.put("gridIndentTList", gridIndentTList);
		map.put("indentId", indentId);
		map.put("masStoreSupplierList", masStoreSupplierList);
		map.put("searchIndentList", searchIndentList);
		map.put("sectionList", sectionList);
		map.put("objectList", objectList);
		map.put("maxIndentNo", no);
		map.put("masStoreAirForceDepotList", masStoreAirForceDepotList);

		return map;
	}


	@SuppressWarnings("unchecked")
	public Map getIndentModifyMapForDepotOld(int indentId, int pageNo , int deptId,int hospitalId) {

		Map map = new HashMap();
		List<StoreIndentM> gridIndentMList = new ArrayList<StoreIndentM>();
		List<StoreIndentT> gridIndentTList = new ArrayList<StoreIndentT>();
		@SuppressWarnings("unused")
		List<MasStoreSection> gridSectionList = new ArrayList<MasStoreSection>();
		List<MasStoreAirForceDepot> masStoreAirForceDepotList = new ArrayList<MasStoreAirForceDepot>();
		int id = 0;
		int firstResult = 0;
		int maxResults = 8;
		int totalNumberOfRecord = 0 ;
		int totalNumberOfPages = 0 ;
		if (pageNo != 1) {
			firstResult = firstResult + (pageNo - 1) * 8;
		}
		List<StoreIndentM> searchIndentList = new ArrayList<StoreIndentM>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<MasStoreSupplier> masStoreSupplierList = new ArrayList<MasStoreSupplier>();
		List<StoreIndentM> list = new ArrayList<StoreIndentM>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		String no = "";
		session = (Session) getSession();
		List objectList = new ArrayList();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		session = (Session) getSession();
		Transaction tx = null;
		try {
			// --------------Transaction Started----------
			tx = session.beginTransaction();
			Criteria c = session.createCriteria(StoreIndentT.class).add(
					Restrictions.eq("Indent.Id", indentId)) .addOrder(Order.asc("SerialNo"));
			totalNumberOfRecord = c.list().size();
			//c.setFirstResult(firstResult);
			//c.setMaxResults(maxResults);
			gridIndentTList = c.list();

			gridIndentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIndentM as md where md.Id = '"
					+ indentId + "'and  md.Department.Id='"
					+ deptId + "' and md.Hospital.Id='"
					+ hospitalId + "'");

			String qry = "select mas.item_id,mas.pvms_no,mas.nomenclature,mas.strength,b.stock,c.qty_in_mmf,mas.old_niv_no,mas.department_id,con.item_unit_name from mas_store_item mas inner join mas_store_item_conversion con on mas.item_conversion_id= con.item_conversion_id left outer join (select ba.item_id,sum(ba.closing_stock) stock from store_item_batch_stock ba where department_id=1 group by ba.item_id)b on mas.item_id=b.item_id left outer join (select it.qty_in_mmf, it.item_id from  store_indent_m im inner join store_indent_t it on im.indent_id=it.indent_id where im.mmf_for_the_year='"
				+ year + "' )c on mas.item_id=c.item_id";
			objectList = (List) session.createSQLQuery(qry).list();
			masStoreSupplierList = getHibernateTemplate()
			.find(
			"from jkt.hms.masters.business.MasStoreSupplier as md order by md.SupplierName");
			searchIndentList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreIndentM as md where md.Status = 'o'and  md.Department.Id='"
					+ deptId + "' and md.Hospital.Id='"
					+ hospitalId + "' and md.IndentType='d' ");
			sectionList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasStoreSection ");
			masStoreAirForceDepotList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasStoreAirForceDepot as md where md.Status = 'y'");
			sectionList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasStoreSection ");
			storeFyDocumentNoList = (List) getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"
					+ deptId + "' and sfdn.Hospital.Id='"+ hospitalId+"'");  // add javed khan
			for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
				if (storeFyDocumentNo.getIndentToDepotNo() != null) {
					no = ("" + storeFyDocumentNo.getIndentToDepotNo());
					no = getMaxNo(no);
				} else {
					no = getMaxNo("");
				}

			}
			// --------------Transaction Ended----------
			tx.commit();

		} catch (Exception e) {
			// --------------In case of Transaction Failure----------
			if (tx != null)
				tx.rollback();
			e.printStackTrace();

		}
		totalNumberOfPages = ((int)totalNumberOfRecord/8)+1 ;
		map.put("totalNumberOfPages", totalNumberOfPages);
		map.put("gridIndentMList", gridIndentMList);
		map.put("gridIndentTList", gridIndentTList);
		map.put("indentId", indentId);
		map.put("masStoreSupplierList", masStoreSupplierList);
		map.put("searchIndentList", searchIndentList);
		map.put("sectionList", sectionList);
		map.put("objectList", objectList);
		map.put("maxIndentNo", no);
		map.put("masStoreAirForceDepotList", masStoreAirForceDepotList);

		return map;
	}


	@SuppressWarnings("unchecked")
	public Map<String, Object> addNextOrSubmitIndentToDepot(
			Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		if (dataMap.get("deptId") != null)
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		if (dataMap.get("hospitalId") != null)
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		if (dataMap.get("userName") != null)
			userName = ("" + dataMap.get("userName"));
		session = (Session) getSession();
		String successfullyAdded = "no";
		@SuppressWarnings("unused")
		int pageNo = 0;
		String maxIndentNo = "";
		StoreIndentM storeIndentM = new StoreIndentM();
		List<StoreIndentM> storeIndentMlist = new ArrayList<StoreIndentM>();
		List<StoreIndentT> storeIndentTlist = new ArrayList<StoreIndentT>();
		List<MasStoreAirForceDepot> masStoreAirForceDepotList = new ArrayList<MasStoreAirForceDepot>();
		// For Show Jsp
		List<StoreIndentM> searchIndentList = new ArrayList<StoreIndentM>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<MasStoreSupplier> masStoreSupplierList = new ArrayList<MasStoreSupplier>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<StoreIndentM> list = new ArrayList<StoreIndentM>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();

		session = (Session) getSession();
		List objectList = new ArrayList();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));

		int indentId = 0;
		int storeFyId = 0;
		String indentNo = "";
		if (dataMap.get("storeIndentM") != null) {
			storeIndentM = (StoreIndentM) dataMap.get("storeIndentM");
		}
		if (dataMap.get("indentNo") != null) {
			indentNo = "" + dataMap.get("indentNo");
		}

		if (dataMap.get("storeIndentTlist") != null) {
			storeIndentTlist = (List<StoreIndentT>) dataMap
			.get("storeIndentTlist");
		}
		if (dataMap.get("pageNo") != null) {
			pageNo = Integer.parseInt("" + dataMap.get("pageNo"));
		}
		if (dataMap.get("indentId") != null) {
			indentId = Integer.parseInt("" + dataMap.get("indentId"));
		}
		// Session sess = factory.openSession();
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (pageNo == 1) {

				hbt.save(storeIndentM);
				indentId = storeIndentM.getId();
				/*
				 * storeIndentMlist=getHibernateTemplate().find("from
				 * jkt.hms.masters.business.StoreIndentM as md where md.IndentNo =
				 * '"+indentNo+"'"); for(StoreIndentM
				 * storeIndentM2:storeIndentMlist){
				 * indentId=storeIndentM2.getId(); //System.out.println("indentId
				 * in DS "+indentId); }
				 */
				Criteria c = session.createCriteria(StoreFyDocumentNo.class)
				.add(Restrictions.eq("Department.Id", deptId)).add(
						Restrictions.eq("Hospital.Id", hospitalId)); // addd javed khan
				storeFyDocumentNoList = c.list();

				for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
					storeFyId = documentNo.getId();

				}

				StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
				.load(StoreFyDocumentNo.class, storeFyId);
				storeFyDocumentNo.setIndentToDepotNo(indentNo);
				hbt.update(storeFyDocumentNo);
			}


			String buttonName="";
			if(dataMap.get("buttonName")!=null){
				buttonName=(String)dataMap.get("buttonName");
			}

			if(buttonName.equals("close"))
			{
				StoreIndentM storeIndentM1 = (StoreIndentM) getHibernateTemplate()
				.load(StoreIndentM.class, indentId);
				storeIndentM1.setStatus("o");
				hbt.update(storeIndentM1);
			}



			if (storeIndentTlist.size() > 0) {
				if (pageNo != 1) {
					storeIndentM.setId(indentId);
				}
				for (int i = 0; i < storeIndentTlist.size(); i++) {

					StoreIndentT storeIndentTObj = new StoreIndentT();
					storeIndentTObj = (StoreIndentT) storeIndentTlist.get(i);
					storeIndentTObj.setIndent(storeIndentM);
					hbt.save(storeIndentTObj);
				}

			}
			successfullyAdded = "yes";
			String qry = "select mas.item_id,mas.pvms_no,mas.nomenclature,mas.strength,b.stock,c.qty_in_mmf,mas.old_niv_no,mas.department_id,con.item_unit_name from mas_store_item mas inner join mas_store_item_conversion con on mas.item_conversion_id= con.item_conversion_id left outer join (select ba.item_id,sum(ba.closing_stock) stock from store_item_batch_stock ba where department_id='"
				+ deptId
				+ "' group by ba.item_id)b on mas.item_id=b.item_id left outer join (select it.qty_in_mmf, it.item_id from  store_indent_m im inner join store_indent_t it on im.indent_id=it.indent_id where im.mmf_for_the_year='"
				+ year + "' )c on mas.item_id=c.item_id";
			objectList = (List) session.createSQLQuery(qry).list();
			masStoreSupplierList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasStoreSupplier as md where Hospital.Id ="+hospitalId+" order by md.SupplierName");
			searchIndentList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreIndentM as md where md.Status = 'y'");
			sectionList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasStoreSection ");
			masStoreAirForceDepotList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasStoreAirForceDepot as md where md.Status = 'y'");
			tx.commit();

		} catch (RuntimeException e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();
		} finally {
			// //session.close();
		}

		map.put("masStoreSupplierList", masStoreSupplierList);
		map.put("searchIndentList", searchIndentList);
		map.put("sectionList", sectionList);
		map.put("objectList", objectList);
		map.put("successfullyAdded", successfullyAdded);
		map.put("indentId", indentId);
		map.put("masStoreAirForceDepotList", masStoreAirForceDepotList);

		return map;

	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> showIndentJspDepot(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		if (dataMap.get("deptId") != null)
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		if (dataMap.get("hospitalId") != null)
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		if (dataMap.get("userName") != null)
			userName = ("" + dataMap.get("userName"));

		List<StoreIndentM> searchIndentList = new ArrayList<StoreIndentM>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<MasStoreAirForceDepot> masStoreAirForceDepotList = new ArrayList<MasStoreAirForceDepot>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<StoreIndentM> list = new ArrayList<StoreIndentM>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		int grnStartNo = 0;
		String no = "";
		session = (Session) getSession();
		List objectList = new ArrayList();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {
			String qry = "select mas.item_id,mas.pvms_no,mas.nomenclature,mas.strength,b.stock,c.qty_in_mmf," +
			"mas.old_niv_no,mas.department_id," +
			" con.item_unit_name from mas_store_item mas " +
			" inner join mas_store_item_conversion con on mas.item_conversion_id= con.item_conversion_id " +
			" left outer join " +
			"(select ba.item_id,sum(ba.closing_stock) stock from " +
			" store_item_batch_stock ba where department_id=1 group by ba.item_id)b" +
			" on mas.item_id=b.item_id left outer join " +
			" (select it.qty_in_mmf, it.item_id from  store_indent_m im inner join store_indent_t it " +
			"on im.indent_id=it.indent_id where im.mmf_for_the_year=" + year + " )c on mas.item_id=c.item_id";
			objectList = (List) session.createSQLQuery(qry).list();
			/*
			 * Commented By Ujjwal For Vulnerabilty
			 * on date:14th Aug 2012
			 * at 2:49 pm
			 */


			/*	
			masStoreAirForceDepotList = getHibernateTemplate()
			.find(
			"from jkt.hms.masters.business.MasStoreAirForceDepot as md where md.Status = 'y'");
searchIndentList = 
getHibernateTemplate().find(
"from jkt.hms.masters.business.StoreIndentM as md where md.Status = 'o'and  md.Department.Id='"
+ deptId + "' and md.IndentType='d' and md.Hospital.Id="+hospitalId+" order by md.Id desc ");
			sectionList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasStoreSection ");
			storeFyDocumentNoList = (List) getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"
					+ deptId + "' and sfdn.Hospital.Id='"+ hospitalId+"'");  // add javed khan
			 */	
			/*******Code By Ujjwal For searchIndentList through criteria Query****/
			searchIndentList=session.createCriteria(StoreIndentM.class).add(Restrictions.eq("Status", "o"))
			.add(Restrictions.eq("Department.Id",deptId)).add(Restrictions.eq("IndentType", "d")).add(Restrictions.eq("Hospital.Id", hospitalId))
			.addOrder(Order.desc("Id")).list();

			masStoreAirForceDepotList=session.createCriteria(MasStoreAirForceDepot.class)
			.add(Restrictions.eq("Status", "y")).list();	

			sectionList=session.createCriteria(MasStoreSection.class).addOrder(Order.asc("SectionName")).list();
			storeFyDocumentNoList=session.createCriteria(StoreFyDocumentNo.class)
			.add(Restrictions.eq("Department.Id", deptId))
			.add(Restrictions.eq("Hospital.Id", hospitalId)).list();
			for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
				if (storeFyDocumentNo.getIndentToDepotNo() != null) {
					no = ("" + storeFyDocumentNo.getIndentToDepotNo());
					no = getMaxNo(no);
				} else {
					no = getMaxNo("");
				}

			}
			String Hos_name="";
			String Hos_address="";
			List<MasHospital> masHospital = new ArrayList<MasHospital>();
			masHospital = session.createCriteria(MasHospital.class).add(
					Restrictions.eq("Status", "y")).add(
							Restrictions.eq("Id", hospitalId)).list();

			if (masHospital != null && masHospital.size() > 0) {
				MasHospital obj = (MasHospital) masHospital.get(0);
				Hos_name = obj.getHospitalName();
				Hos_address=obj.getAddress();
			}
			map.put("Hos_name", Hos_name);
			map.put("Hos_address", Hos_address);
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("masStoreAirForceDepotList", masStoreAirForceDepotList);
		map.put("searchIndentList", searchIndentList);
		map.put("sectionList", sectionList);
		map.put("maxIndentNo", no);
		map.put("objectList", objectList);
		return map;

	}

	// ------End of Indent To Depot--------
	// --------------------------------------INDENT---------
	public Map printMmfIndent(int indentId) {

		Map map = new HashMap();
		session = (Session) getSession();
		List<StoreIndentM> indentMList = new ArrayList<StoreIndentM>();
		String indentType = "";

		Connection con = session.connection();
		try {
			map.put("conn", con);
			indentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIndentM as md where md.Id = '"
					+ indentId + "'");
			for (StoreIndentM indentM : indentMList) {

				map.put("indentor", "" + "CHAF,Bangalore");
				map.put("projectionTo", "DGAFMS");
				map.put("mmfYear", "" + indentM.getMmfForTheYear());
				map.put("Hosp_Name", ""
						+ indentM.getHospital().getHospitalName());

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	public Map<String, Object> getItemListForMMFIndentModify(
			Map<String, Object> dataMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		session = (Session) getSession();
		String pvmsNo = null;
		int deptId = 0;
		int issueId = 0;
		int mmfForTheYear = 0;
		deptId = Integer.parseInt("" + dataMap.get("deptId"));
		mmfForTheYear = Integer.parseInt("" + dataMap.get("mmfForTheYear"));
		List objectList = new ArrayList();
		List objectList1 = new ArrayList();
		try {
			String str = "%" + dataMap.get("autoHint") + "%";
			String qry = "SELECT t.item_id FROM store_indent_t t,store_indent_m m where m.mmf_for_the_year='"
				+ mmfForTheYear
				+ "' and m.imported ='y' and m.indent_type='p'; ";
			objectList = (List) session.createSQLQuery(qry).list();
			if (objectList.size() != 0) {

				Criteria c = session.createCriteria(MasStoreItem.class).add(
						Restrictions.like("Nomenclature", str)).add(
								Restrictions.eq("Department.Id", deptId)).add(
										Restrictions.not(Restrictions.in("Id", objectList)));
				c.setFirstResult(0);
				c.setMaxResults(10);
				itemList = c.list();
			} else {
				Criteria c = session.createCriteria(MasStoreItem.class).add(
						Restrictions.like("Nomenclature", str)).add(
								Restrictions.eq("Department.Id", deptId));

				c.setFirstResult(0);
				c.setMaxResults(10);
				itemList = c.list();

			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;

	}

	public Map<String, Object> getItemListForMMFIndent(
			Map<String, Object> dataMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		session = (Session) getSession();
		String pvmsNo = null;
		int deptId = 0;
		int issueId = 0;
		int mmfForTheYear = 0;
		deptId = Integer.parseInt("" + dataMap.get("deptId"));
		mmfForTheYear = Integer.parseInt("" + dataMap.get("mmfForTheYear"));
		List objectList = new ArrayList();
		List objectList1 = new ArrayList();
		try {

			String str = "%" + dataMap.get("autoHint") + "%";
			String qry1 = "SELECT t.item_id FROM store_indent_t t,store_indent_m m where m.mmf_for_the_year='"
				+ mmfForTheYear
				+ "' and m.imported ='y' and m.indent_type='p';";
			objectList1 = (List) session.createSQLQuery(qry1).list();
			if (objectList1.size() == 0) {
				String qry = "SELECT t.item_id FROM store_indent_t t,store_indent_m m where m.mmf_for_the_year='"
					+ mmfForTheYear + "'  and m.indent_type='p'; ";
				objectList = (List) session.createSQLQuery(qry).list();
				if ((objectList.size() != 0) && (mmfForTheYear != 0)) {
					Criteria c = session.createCriteria(MasStoreItem.class)
					.add(Restrictions.like("Nomenclature", str)).add(
							Restrictions.eq("Department.Id", deptId))
							.add(
									Restrictions.not(Restrictions.in("Id",
											objectList)));
					c.setFirstResult(0);
					c.setMaxResults(10);
					itemList = c.list();
				} else {
					Criteria c = session.createCriteria(MasStoreItem.class)
					.add(Restrictions.like("Nomenclature", str)).add(
							Restrictions.eq("Department.Id", deptId));

					c.setFirstResult(0);
					c.setMaxResults(10);
					itemList = c.list();

				}
			}

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;

	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> checkYearExists(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIndentM> storeIndentMList = new ArrayList<StoreIndentM>();
		List<StoreIndentM> searchIndentList = new ArrayList<StoreIndentM>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		String thisYearValue = "n";
		String nextYearValue = "n";
		int mmfForTheYear = 0;
		int deptId = 0;
		String no = "";
		if (dataMap.get("mmfForTheYear") != null) {
			mmfForTheYear = Integer.parseInt("" + dataMap.get("mmfForTheYear"));
		}
		if (dataMap.get("deptId") != null) {
			deptId = (Integer) dataMap.get("deptId");
		}
		String messageType = "";
		if (mmfForTheYear != 0)
			storeIndentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIndentM as sim where sim.MmfForTheYear='"
					+ mmfForTheYear + "'   and sim.IndentType='p'");
		String messageTOBeVisibleToTheUser = "";
		searchIndentList = getHibernateTemplate()
		.find(
				"from jkt.hms.masters.business.StoreIndentM as md where md.Status = 'o' and md.IndentType='p'");
		if (storeIndentMList.size() == 0) {

		} else {
			messageTOBeVisibleToTheUser = "For " + mmfForTheYear
			+ " year Records already added.Go for Search to add more ";
			messageType = "failure";
			thisYearValue = "y";
			nextYearValue = "y";
		}
		storeFyDocumentNoList = (List) getHibernateTemplate().find(
		"from jkt.hms.masters.business.StoreFyDocumentNo ");
		for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
			if (storeFyDocumentNo.getDepartment().getId() == deptId) {
				no = ("" + storeFyDocumentNo.getMmfIndentNo());
				no = getMaxNo(no);
			}
		}
		map.put("maxIndentNo", no);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		map.put("messageType", messageType);
		map.put("searchIndentList", searchIndentList);
		map.put("nextYearValue", nextYearValue);
		map.put("thisYearValue", thisYearValue);
		return map;
	}

	public Map<String, Object> lockMMFIndent(int year) {
		String messageTOBeVisibleToTheUser = "Record Not Locked";
		Map<String, Object> map = new HashMap<String, Object>();
		String messageType = "failure";
		List<StoreIndentM> storeIndentMList = new ArrayList<StoreIndentM>();
		List<StoreIndentM> searchIndentList = new ArrayList<StoreIndentM>();
		int indentId = 0;
		try {
			storeIndentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIndentM as sim where sim.MmfForTheYear='"
					+ year
					+ "'   and sim.Status='o' and sim.IndentType='p'");

			for (StoreIndentM storeIndentM : storeIndentMList) {
				indentId = Integer.parseInt("" + storeIndentM.getId());
			}
			if (indentId != 0) {
				StoreIndentM storeIndentM1 = (StoreIndentM) getHibernateTemplate()
				.load(StoreIndentM.class, indentId);
				storeIndentM1.setStatus("p");
				HibernateTemplate hbt = getHibernateTemplate();
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
				hbt.update(storeIndentM1);
				messageType = "success";
				messageTOBeVisibleToTheUser = "Record  Locked";
			} else {
				messageType = "failure";
				messageTOBeVisibleToTheUser = "No Records found ";
			}

			searchIndentList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreIndentM as md where md.Status = 'o' and md.IndentType='p'");

		} catch (Exception e) {
			e.printStackTrace();
			messageType = "failure";
			messageTOBeVisibleToTheUser = "Record Not Locked";
		}
		map.put("searchIndentList", searchIndentList);
		map.put("messageType", messageType);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return map;
	}

	public Map<String, Object> showLockMMFIndent() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIndentM> storeIndentMList = new ArrayList<StoreIndentM>();
		try {
			storeIndentMList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreIndentM as sim where sim.IndentType='p'");
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("storeIndentMList", storeIndentMList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> importMMFIndent(Map<String, Object> dataMap)
	{
		List<StoreMmfDepartmentM> storeMmfDepartmentMList = new ArrayList<StoreMmfDepartmentM>();
		List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
		List<StoreIndentM> storeIndentMList = new ArrayList<StoreIndentM>();
		List<StoreIndentM> storeIndentMTempList = new ArrayList<StoreIndentM>();
		@SuppressWarnings("unused")
		StoreIndentM storeIndentM = new StoreIndentM();
		@SuppressWarnings("unused")
		Map<String, Object> map = new HashMap<String, Object>();
		@SuppressWarnings("unused")
		String flag = "no";
		int indentId = 0;
		int pageNo = 1;
		String messageTOBeVisibleToTheUser = "";
		String messageType = "failure";
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		String no = "";
		String date = "";
		String time = "";
		String userName = "";
		Date indentDate = null;
		session = (Session) getSession();
		Transaction tx = null;
		int year = 0;
		int departmentId = 0;
		int hospitalId = 0;
		if (dataMap.get("deptId") != null)
			departmentId = Integer.parseInt("" + dataMap.get("deptId"));
		if (dataMap.get("hospitalId") != null)
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		if (dataMap.get("userName") != null)
			userName = ("" + dataMap.get("userName"));
		if (dataMap.get("year") != null)
			year = Integer.parseInt("" + dataMap.get("year"));
		List<StoreIndentM> searchIndentList = new ArrayList<StoreIndentM>();
		String thisYearValue = "n";
		String nextYearValue = "n";

		try {
			// --------------Transaction Started----------
			tx = session.beginTransaction();

			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map) HMSUtil.getCurrentDateAndTime();
			date = (String) utilMap.get("currentDate");
			time = (String) utilMap.get("currentTime");
			SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
			String date4MySQL = formatterOut.format(formatterIn.parse(date));
			Date lastChgDate = java.sql.Date.valueOf(date4MySQL);
			// Checking for existence of Indent
			storeIndentMTempList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIndentM as md where md.MmfForTheYear='"
					+ year
					+ "' and md.Imported='y' and md.IndentType='p' ");
			if (storeIndentMTempList.size() > 0) {
				messageTOBeVisibleToTheUser = "Already Imported";
				thisYearValue = "y";
				nextYearValue = "y";
				map.put("messageTOBeVisibleToTheUser",
						messageTOBeVisibleToTheUser);
				map.put("messageType", messageType);
				map.put("thisYearValue", thisYearValue);
				map.put("nextYearValue", nextYearValue);
				return map;
			}
			// Fetching records from MMF Department
			String qry = "SELECT sum(t.mmf_in_qty),t.item_id,m.id from store_mmf_department_m as m,store_mmf_department_t as t where m.id=t.store_mmf_department_m_id and m.mmf_for_the_year='"
				+ year + "' and m.status='o' group by t.Item_Id;";
			List c = (List) session.createSQLQuery(qry).list();
			if (c.size() == 0) {
				messageTOBeVisibleToTheUser = "No records in MMF Departmet";
				map.put("messageType", messageType);
				map.put("messageTOBeVisibleToTheUser",
						messageTOBeVisibleToTheUser);
				map.put("thisYearValue", thisYearValue);
				map.put("nextYearValue", nextYearValue);
				return map;
			}
			// Getting indentId if records are already entered
			storeIndentMList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreIndentM as md where md.MmfForTheYear='"
					+ year
					+ "' and md.Imported='n' and md.IndentType='p' and md.Status='o'");
			for (StoreIndentM storeIndentM2 : storeIndentMList) {
				indentId = storeIndentM2.getId();
				map.put("indentId", indentId);
			}
			int srNo = 1;
			int mmfDeptId = 0;
			// Importing records from MMF Department
			StoreIndentM storeIndentM2 = new StoreIndentM();
			if (indentId == 0) {
				storeIndentM2.setMmfForTheYear(year);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				storeIndentM2.setHospital(masHospital);

				MasDepartment department = new MasDepartment();
				department.setId(departmentId);
				storeIndentM2.setDepartment(department);

				storeIndentM2.setSection(null);
				storeIndentM2.setItemReqDept(department);
				storeIndentM2.setSuppliedBy(null);
				storeIndentM2.setRequiredForm("Commandant,CHAFB");

				SimpleDateFormat formatterIn1 = new SimpleDateFormat(
				"dd/MM/yyyy");
				SimpleDateFormat formatterOut2 = new SimpleDateFormat(
				"yyyy-MM-dd");
				String date4MySQL1 = formatterOut.format(formatterIn
						.parse(date));
				storeIndentM2.setIndentDate(java.sql.Date.valueOf(date4MySQL));
				storeIndentM2.setLastChgBy(userName);
				storeIndentM2.setStatus("o");
				storeIndentM2.setIndentType("p");
				storeIndentM2.setLastChgDate(java.sql.Date.valueOf(date4MySQL));
				storeIndentM2.setLastChgTime(time);

				no = "01/" + year;
				storeIndentM2.setIndentNo(no);
				storeIndentM2.setImported("y");
				/*
				 * MasDepartment department2=new MasDepartment();
				 * department2.setId(1);
				 * storeIndentM2.setDepartment(department); MasDepartment
				 * department3=new MasDepartment(); department3.setId(1);
				 * storeIndentM2.setDepartment(department3);
				 */
				hbt.save(storeIndentM2);
				hbt.refresh(storeIndentM2);

				for (Iterator iterator = c.iterator(); iterator.hasNext();) {
					Object[] object = (Object[]) iterator.next();
					BigDecimal i0 = (BigDecimal) object[0];
					Integer i1 = (Integer) object[1];
					Integer i2 = (Integer) object[2];
					mmfDeptId = i2;
					StoreIndentT storeIndentT = new StoreIndentT();

					MasStoreItem masStoreItem = new MasStoreItem();
					masStoreItem.setId(i1);
					storeIndentT.setItem(masStoreItem);
					BigDecimal bigDecimal = new BigDecimal("" + i0);
					storeIndentT.setQtyInMmf(bigDecimal);
					storeIndentT.setSerialNo(srNo);

					storeIndentT.setIndent(storeIndentM2);

					storeIndentT.setSection(null);

					hbt.save(storeIndentT);
					srNo++;
				}

			} else {
				storeIndentM2.setId(indentId);
				for (Iterator iterator = c.iterator(); iterator.hasNext();) {
					Object[] object = (Object[]) iterator.next();
					BigDecimal i0 = (BigDecimal) object[0];
					Integer i1 = (Integer) object[1];
					Integer i2 = (Integer) object[2];
					mmfDeptId = i2;
					StoreIndentT storeIndentT = new StoreIndentT();

					MasStoreItem masStoreItem = new MasStoreItem();
					masStoreItem.setId(i1);
					storeIndentT.setItem(masStoreItem);
					BigDecimal bigDecimal = new BigDecimal("" + i0);
					storeIndentT.setQtyInMmf(bigDecimal);
					storeIndentT.setSerialNo(srNo);

					storeIndentT.setIndent(storeIndentM2);

					storeIndentT.setSection(null);

					hbt.save(storeIndentT);
					srNo++;
				}
			}

			String qry1 = "SELECT m.id from store_mmf_department_m as m where  m.mmf_for_the_year=2008 and m.status='o';";
			List deptList = (List) session.createSQLQuery(qry1).list();

			for (int i = 0; i < deptList.size(); i++) {
				mmfDeptId = Integer.parseInt("" + deptList.get(i));

				StoreMmfDepartmentM mmfDepartmentM = (StoreMmfDepartmentM) getHibernateTemplate()
				.load(StoreMmfDepartmentM.class, mmfDeptId);
				mmfDepartmentM.setStatus("p");
				hbt.update(mmfDepartmentM);
			}
			List<StoreIndentM> list2 = new ArrayList<StoreIndentM>();
			list2 = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIndentM as md where md.IndentNo='"
					+ no + "' ");
			for (StoreIndentM storeIndentM3 : list2) {
				indentId = storeIndentM3.getId();
				map.put("indentId", indentId);
			}

			StoreIndentM storeIndentM1 = (StoreIndentM) getHibernateTemplate()
			.load(StoreIndentM.class, indentId);
			storeIndentM1.setImported("y");
			hbt.update(storeIndentM1);
			messageType = "success";
			map.put("messageType", messageType);
			messageTOBeVisibleToTheUser = "Records are Imported Successfull.If you want to Modify Go for Search";
			searchIndentList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreIndentM as md where md.Status = 'o' and md.IndentType='p'");
			// --------------Transaction Ended----------
			tx.commit();
		} catch (Exception e) {
			e.printStackTrace();
			// --------------In case of Transaction Failure----------
			if (tx != null)
				tx.rollback();

			map.put("messageType", messageType);
			messageTOBeVisibleToTheUser = "Records are not Imported ";
		}
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		map.put("searchIndentList", searchIndentList);
		map.put("thisYearValue", thisYearValue);
		map.put("nextYearValue", nextYearValue);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> showImportMMFIndentJsp(
			Map<String, Object> dataMap) {
		List<StoreIndentM> indentMList = new ArrayList<StoreIndentM>();
		Map<String, Object> map = new HashMap<String, Object>();
		int departmentId = 0;
		if (dataMap.get("departmentId") != null)
			departmentId = Integer.parseInt("" + dataMap.get("departmentId"));
		try {
			session = (Session) getSession();
			String qry = "SELECT DISTINCT mmf_for_the_year  from store_mmf_department_m where status='o';";
			List list = (List) session.createSQLQuery(qry).list();
			map.put("list", list);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map getIndentDepotPrintMap(int indentId) {
		Map map = new HashMap();
		session = (Session) getSession();
		List<StoreIndentM> indentMList = new ArrayList<StoreIndentM>();
		String indentType = "";

		Connection con = session.connection();
		try {
			map.put("conn", con);
			indentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIndentM as md where md.Id = '"
					+ indentId + "'");
			for (StoreIndentM indentM : indentMList) {
				map.put("indentNo", "" + indentM.getIndentNo());
				SimpleDateFormat formatterIn = new SimpleDateFormat(
				"yyyy-MM-dd");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
				"dd/MM/yyyy");
				String date4MySQL = formatterOut.format(formatterIn.parse(""
						+ indentM.getIndentDate()));
				map.put("indentDate", "" + date4MySQL);
				map.put("indentor", "Commandant,CHAFB");
				map.put("nrs", "" + indentM.getNrs());
				map.put("address", "" + indentM.getPatientDetails());
				map.put("authority", "" + indentM.getAuthority());
				map.put("supplyDepot", ""
						+ indentM.getSuppliedBy().getAirForceDepotName());
				map.put("indentId", "" + indentM.getId());
				if (indentM.getIndentOption().equals("1")) {
					indentType = "Emergent";
				} else if (indentM.getIndentOption().equals("2")) {
					indentType = "Monthly";
				} else if (indentM.getIndentOption().equals("3")) {
					indentType = "Bi-Monthly";
				} else if (indentM.getIndentOption().equals("4")) {
					indentType = "Four Monthly";
				}

				map.put("typeOfIndet", indentType);
				map.put("Hosp_Name", indentM.getHospital().getHospitalName());
				map.put("section", indentM.getSection().getSectionName());
				map.put("CodeHead",indentM.getCodeHead());
				map.put("TellNo",indentM.getTellNo());
				map.put("SelfLife",indentM.getSelfLife());
				map.put("address",indentM.getPatientDetails());



			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map showPrintIndentDepotJsp(Map<String, Object> dataMap) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		if (dataMap.get("deptId") != null)
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		if (dataMap.get("hospitalId") != null)
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		if (dataMap.get("userName") != null)
			userName = ("" + dataMap.get("userName"));
		session = (Session) getSession();
		String successfullyAdded = "no";
		Map map = new HashMap();
		List<StoreIndentM> indentMList = new ArrayList<StoreIndentM>();
		indentMList = (List<StoreIndentM>) getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreIndentM as sim where sim.Hospital.Id='"
				+ hospitalId + "' and sim.Department.Id='" + deptId
				+ "'");
		map.put("indentMList", indentMList);
		return map;
	}

	@SuppressWarnings( { "unchecked", "deprecation", "unchecked" })
	public Map<String, Object> getIndentSocPrintMap(int indentId) {
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();
		List<StoreIndentM> indentMList = new ArrayList<StoreIndentM>();
		Connection con = session.connection();
		try {
			map.put("conn", con);
			indentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIndentM as md where md.Id = '"
					+ indentId + "'");
			for (StoreIndentM indentM : indentMList) {
				map.put("indentNo", "" + indentM.getIndentNo());
				SimpleDateFormat formatterIn = new SimpleDateFormat(
				"yyyy-MM-dd");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
				"dd/MM/yyyy");
				@SuppressWarnings("unused")
				String date4MySQL = formatterOut.format(formatterIn.parse(""
						+ indentM.getIndentDate()));
				map.put("detailOfPatient", "" + indentM.getPatientDetails());
				map.put("justification", "" + indentM.getJustificationNiv());
				map.put("specificJustification", ""
						+ indentM.getPacJustification());
				map.put("dateOfReceive", "" + indentM.getEncodedDate());
				map.put("unitName", "DGFMSHQ");
				map.put("indentId", indentM.getId());

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public Map getIndentModifyMap(int indentId, int pageNo) {

		Map map = new HashMap();
		List<StoreIndentM> gridIndentMList = new ArrayList<StoreIndentM>();
		List<StoreIndentT> gridIndentTList = new ArrayList<StoreIndentT>();
		List<MasStoreSection> gridSectionList = new ArrayList<MasStoreSection>();
		List<StoreIndentM> searchIndentList = new ArrayList<StoreIndentM>();
		int id = 0;
		int firstResult = 0;
		int maxResults = 8;
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		if (pageNo != 1) {
			firstResult = firstResult + (pageNo - 1) * 8;
		}

		try {
			Session session = (Session) getSession();
			Criteria c = session.createCriteria(StoreIndentT.class).add(
					Restrictions.eq("Indent.Id", indentId));
			c.setFirstResult(firstResult);
			c.setMaxResults(maxResults);
			gridIndentTList = c.list();
			itemList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasStoreItem as mi where mi.Status = 'y' and mi.Id<100");
			gridIndentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIndentM as md where md.Id = '"
					+ indentId + "' and md.Status='o'");
			searchIndentList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreIndentM as md where md.Status = 'o' and md.IndentType='p'");
			for (StoreIndentM storeIndentM : gridIndentMList) {
				id = storeIndentM.getMmfForTheYear();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("gridIndentMList", gridIndentMList);
		map.put("gridIndentTList", gridIndentTList);
		map.put("indentId", indentId);
		map.put("mmfForTheYear", id);
		map.put("itemList", itemList);
		map.put("searchIndentList", searchIndentList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> checkExistenceOfCuurentYearIndent(int year) {
		Map<String, Object> indentMap = new HashMap<String, Object>();
		List<StoreIndentM> tempIndentList = new ArrayList<StoreIndentM>();
		List<StoreIndentM> searchPanelIndentList = new ArrayList<StoreIndentM>();
		List<StoreIndentM> searchIndentListForNextYear = new ArrayList<StoreIndentM>();
		boolean masterRecordExist = false;
		int noOfRecordsAlreadyStored = 0;
		@SuppressWarnings("unused")
		int MaxSrNo = 0;
		int indentId = 0;
		int noOfRecordsAlreadyStoredNextYear = 0;
		List<StoreIndentT> gridIndentTList = new ArrayList<StoreIndentT>();
		tempIndentList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreIndentM as md where md.MmfForTheYear = '"
				+ year + "' and md.IndentType='p'");
		int nextYear = year + 1;
		searchIndentListForNextYear = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreIndentM as md where md.MmfForTheYear = '"
				+ nextYear + "' and md.IndentType='p'");
		if (searchIndentListForNextYear.size() > 0) {
			noOfRecordsAlreadyStoredNextYear = searchIndentListForNextYear
			.size();
		}
		if (tempIndentList.size() > 0) {
			masterRecordExist = true;
			for (StoreIndentM storeIndentM : tempIndentList) {
				indentId = Integer.parseInt("" + storeIndentM.getId());
			}
			gridIndentTList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIndentT as md where md.Indent.Id = '"
					+ indentId + "' ");
			if (gridIndentTList.size() > 0)
				noOfRecordsAlreadyStored = gridIndentTList.size();

		}
		searchPanelIndentList=getHibernateTemplate().find(
		"from jkt.hms.masters.business.StoreIndentM as md where md.Status = 'y' and  md.IndentType='p'");
		indentMap.put("masterRecordExist", masterRecordExist);
		indentMap.put("noOfRecordsAlreadyStored", noOfRecordsAlreadyStored);
		indentMap.put("noOfRecordsAlreadyStoredNextYear",
				noOfRecordsAlreadyStoredNextYear);
		indentMap.put("indentId", indentId);
		indentMap.put("searchPanelIndentList", searchPanelIndentList);
		return indentMap;
	}

	@SuppressWarnings("unchecked")
	public Map showIndent(int deptId) {

		// session = (Session)getSession();
		// Transaction tx = null;
		// try{
		// //--------------Transaction Started----------
		// tx= session.beginTransaction();
		// //--------------Transaction Ended----------
		// tx.commit();
		// }catch (Exception e) {
		// //--------------In case of Transaction Failure----------
		// if (tx != null) tx.rollback();
		// e.printStackTrace();
		// }
		// finally{
		// //--------Session Closing----------
		// //session.close();
		// }
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<StoreIndentM> searchIndentList = new ArrayList<StoreIndentM>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<StoreIndentM> list = new ArrayList<StoreIndentM>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		int grnStartNo = 0;
		String no = "";

		try {
			searchIndentList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreIndentM as md where md.Status = 'o' and md.IndentType='p'");
		} catch (Exception e) {
			e.printStackTrace();		}
		itemList = getHibernateTemplate()
		.find(
				"from jkt.hms.masters.business.MasStoreItem as mi where mi.Status = 'y' and mi.Id<100");
		try {
			sectionList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasStoreSection ");
		} catch (Exception e) {
			e.printStackTrace();
		}

		try {
			storeFyDocumentNoList = (List) getHibernateTemplate().find(
			"from jkt.hms.masters.business.StoreFyDocumentNo ");
			for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
				if (storeFyDocumentNo.getDepartment().getId() == deptId) {
					no = ("" + storeFyDocumentNo.getMmfIndentNo());
					no = getMaxNo(no);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("searchIndentList", searchIndentList);
		map.put("sectionList", sectionList);
		map.put("itemList", itemList);
		map.put("maxIndentNo", no);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map searchIndent(Map searchFieldMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		String fromDate = "";
		String toDate = "";
		List<StoreIndentM> gridIndentHeaderList = new ArrayList<StoreIndentM>();
		List<StoreIndentT> gridIndentDetailList = new ArrayList<StoreIndentT>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		String indentNo = "";
		int mmfYear = 0;

		try {
			if (searchFieldMap.get("mmfYear") != null) {

				mmfYear = Integer.parseInt("" + searchFieldMap.get("mmfYear"));
				gridIndentDetailList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreIndentT ");
				gridIndentHeaderList = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreIndentM as sim where sim.MmfForTheYear = '"
						+ mmfYear + "' and sim.Status='y' ");

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("gridIndentDetailList", gridIndentDetailList);
		map.put("gridIndentHeaderList", gridIndentHeaderList);
		map.put("itemList", itemList);

		return map;
	}

	@SuppressWarnings("unchecked")
	public boolean addNextOrSubmitIndentToMMF(StoreIndentM storeIndentM,
			List storeIndentTlist, Map map) {

		boolean successfullyAdded = false;
		@SuppressWarnings("unused")
		int pageNo = 0;
		String maxIndentNo = "";
		StoreIndentM storeIndentM2 = new StoreIndentM();
		session = (Session) getSession();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (!(map.get("headerStored") + "").equals("yes")) {
				hbt.save(storeIndentM);
			}

			if (storeIndentTlist.size() > 0) {
				if ((map.get("headerStored") + "").equals("yes")) {
					int id = Integer.parseInt("" + map.get("indentId"));
					storeIndentM2.setId(id);
				}
				for (int i = 0; i < storeIndentTlist.size(); i++) {
					StoreIndentT storeIndentTObj = new StoreIndentT();
					storeIndentTObj = (StoreIndentT) storeIndentTlist.get(i);
					if ((map.get("headerStored") + "").equals("yes")) {
						storeIndentTObj.setIndent(storeIndentM2);
					} else {
						storeIndentTObj.setIndent(storeIndentM);
					}
					hbt.save(storeIndentTObj);
				}

			}
			successfullyAdded = true;
			tx.commit();

		} catch (RuntimeException e) {
			if (tx != null)
				tx.rollback();
			// throw e; // or display error message
			e.printStackTrace();
		} finally {
			//session.close();
		}

		return successfullyAdded;
	}

	public boolean updateIndent(StoreIndentM storeIndentM, List storeIndentTlist) {
		boolean successfullyAdded = false;
		StoreIndentM storeIndentM2 = new StoreIndentM();
		storeIndentM2 = storeIndentM;
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");

		hbt.setCheckWriteOperations(false);

		try {

			hbt.update(storeIndentM2);
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {

			if (storeIndentTlist.size() > 0) {
				// StoreIndentM storeIndentM2=new StoreIndentM();
				// storeIndentM2.setId(1);
				for (int i = 0; i < storeIndentTlist.size(); i++) {
					StoreIndentT storeIndentTObj = new StoreIndentT();
					storeIndentTObj = (StoreIndentT) storeIndentTlist.get(i);
					// storeIndentTObj.setIndent(storeIndentM2);
					hbt.update(storeIndentTObj);
				}

			}
			successfullyAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;
	}

	@SuppressWarnings("unchecked")
	public boolean updateNextIndent(Map<String, Object> masterAndDetailMap)
	{
		boolean successfullyAdded = false;
		List<StoreIndentT> storeIndentTListForUpdate = new ArrayList<StoreIndentT>();
		List<StoreIndentT> storeIndentTListForAdd = new ArrayList<StoreIndentT>();
		int indentId = 0;
		String lastChgBy = "";
		Date lastChgDate = null;
		String lastChgTime = "";
		int pageNo = 0;
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		session = (Session) getSession();
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			if (masterAndDetailMap.get("storeIndentTListForUpdate") != null) {
				storeIndentTListForUpdate = (List<StoreIndentT>) (masterAndDetailMap
						.get("storeIndentTListForUpdate"));
			}
			if (masterAndDetailMap.get("storeIndentTListForAdd") != null) {
				storeIndentTListForAdd = (List<StoreIndentT>) (masterAndDetailMap
						.get("storeIndentTListForAdd"));
			}
			if (masterAndDetailMap.get("indentId") != null) {
				indentId = Integer.parseInt(""
						+ masterAndDetailMap.get("indentId"));
			}
			if (masterAndDetailMap.get("lastChgBy") != null) {
				lastChgBy = ("" + masterAndDetailMap.get("lastChgBy"));
			}
			if (masterAndDetailMap.get("lastChgTime") != null) {
				lastChgTime = ("" + masterAndDetailMap.get("lastChgTime"));
			}
			if (masterAndDetailMap.get("pageNo") != null) {
				pageNo = Integer.parseInt(("" + masterAndDetailMap
						.get("pageNo")));
			}
			if (masterAndDetailMap.get("lastChgDate") != null) {
				SimpleDateFormat formatterIn = new SimpleDateFormat(
				"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
				"yyyy-MM-dd");
				String date4MySQL = "";

				try {
					date4MySQL=formatterOut.format(formatterIn.parse(""+ masterAndDetailMap.get("lastChgDate")));
				} catch (ParseException e) {

					e.printStackTrace();
				}
				lastChgDate = java.sql.Date.valueOf(date4MySQL);
			}
			if (pageNo == 1) {
				StoreIndentM storeIndentM = (StoreIndentM) getHibernateTemplate()
				.load(StoreIndentM.class, indentId);
				storeIndentM.setLastChgBy(lastChgBy);
				storeIndentM.setLastChgDate(lastChgDate);
				storeIndentM.setLastChgTime(lastChgTime);
				hbt.update(storeIndentM);
			}

			if (masterAndDetailMap.get("storeIndentTListForUpdate") != null) {

				storeIndentTListForUpdate = (List<StoreIndentT>) masterAndDetailMap
				.get("storeIndentTListForUpdate");
				if (storeIndentTListForUpdate.size() > 0) {
					for (int i = 0; i < storeIndentTListForUpdate.size(); i++) {
						StoreIndentT storeIndentT = new StoreIndentT();
						storeIndentT = (StoreIndentT) storeIndentTListForUpdate
						.get(i);

						StoreIndentM storeIndentM = new StoreIndentM();
						storeIndentM.setId(indentId);
						storeIndentT.setIndent(storeIndentM);

						hbt.update(storeIndentT);
					}
				}
				successfullyAdded = true;
			}
			if (masterAndDetailMap.get("storeIndentTListForAdd") != null) {
				storeIndentTListForAdd = (List<StoreIndentT>) masterAndDetailMap
				.get("storeIndentTListForAdd");
				if (storeIndentTListForAdd.size() > 0) {
					for (int i = 0; i < storeIndentTListForAdd.size(); i++) {
						StoreIndentT storeIndentT = new StoreIndentT();
						storeIndentT = (StoreIndentT) storeIndentTListForAdd
						.get(i);

						StoreIndentM storeIndentM = new StoreIndentM();
						storeIndentM.setId(indentId);
						storeIndentT.setIndent(storeIndentM);

						hbt.save(storeIndentT);
					}
				}
				successfullyAdded = true;
				tx.commit();
			}
		} catch (RuntimeException e) {
			if (tx != null)
				tx.rollback();
			// throw e; // or display error message
			e.printStackTrace();
		} finally {
			//session.close();
		}

		return successfullyAdded;
	}

	public StoreIndentM getStoresIndentMObject(int indentId) {
		StoreIndentM storeIndentM = (StoreIndentM) getHibernateTemplate().load(
				StoreIndentM.class, indentId);
		return storeIndentM;
	}

	@SuppressWarnings("unchecked")
	public int getIndentId(int mmfForTheYear) {
		@SuppressWarnings("unused")
		int indentId = 0;
		List<StoreIndentM> list = new ArrayList<StoreIndentM>();
		list = (List) getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreIndentM as pod where pod.MmfForTheYear = '"
				+ mmfForTheYear + "'");
		for (StoreIndentM indentM2 : list) {
			indentId = Integer.parseInt("" + indentM2.getId());
		}
		return indentId;
	}

	public Map getIndentMAndT(int indentId) {
		Map map = new HashMap();
		List<StoreIndentM> previousStoreIndentMList = new ArrayList<StoreIndentM>();
		List<StoreIndentT> previousStoreIndentTList = new ArrayList<StoreIndentT>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();

		try {
			previousStoreIndentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIndentM as sm where sm.Id='"
					+ indentId + "'");
			previousStoreIndentTList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.StoreIndentT ");
			itemList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasStoreItem as mi where mi.Status = 'y' and mi.Id<100");
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("previousStoreIndentMList", previousStoreIndentMList);
		map.put("previousStoreIndentTList", previousStoreIndentTList);
		map.put("itemList", itemList);

		return map;
	}

	public Map getIndentMAndTUpdate(int indentId) {
		Map map = new HashMap();
		List<StoreIndentM> gridIndentMList = new ArrayList<StoreIndentM>();
		List<StoreIndentT> gridIndentTList = new ArrayList<StoreIndentT>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();

		try {
			gridIndentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIndentM as sm where sm.Id='"
					+ indentId + "'");
			gridIndentTList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIndentT as st where st.Indent.Id='"
					+ indentId + "'  ");
		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("gridIndentMList", gridIndentMList);
		map.put("gridIndentTList", gridIndentTList);

		return map;
	}

	// ---------------------------------------- Department Issue

	public Map<String, Object> getIssuePrintMap(int issue_m_id) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIssueM> storeIssueMList = new ArrayList<StoreIssueM>();
		session = (Session) getSession();
		List<StoreIndentM> indentMList = new ArrayList<StoreIndentM>();
		Connection con = session.connection();
		String demanNo = "";
		String accountingUnit = "";
		String recieptVoucherNo = "";
		String period1 = "";
		String period2 = "";
		String unit1 = "";
		String unit2 = "";
		String address1 = "";
		String address2 = "";
		String depotNo = "";
		String civNo = "";
		String dated = "";
		String Hosp_Name = "";

		String fromDept="";
		String toDept="";
		try {
			storeIssueMList = getHibernateTemplate().find(
					" from jkt.hms.masters.business.StoreIssueM as sim where sim.Id='"
					+ issue_m_id + "'");
			for (StoreIssueM storeIssueM : storeIssueMList) {
				Hosp_Name = storeIssueM.getHospital().getHospitalName();
				demanNo = "" + storeIssueM.getRequestNo().getDemandNo();
				accountingUnit = "";
				if (storeIssueM.getDocNo() != null) {
					recieptVoucherNo = "" + storeIssueM.getDocNo();
				} else {
					recieptVoucherNo = "";
				}
				// javed khan
				fromDept=""+storeIssueM.getDepartment().getDepartmentName();
				toDept=""+storeIssueM.getToStore().getDepartmentName();
				String issueString = storeIssueM.getIssueNo();
				period1 = "" + issueString.substring(3);
				period2 = "" + issueString.substring(3);
				unit1 = "" + storeIssueM.getDepartment().getDepartmentName();
				//address1 = "CHAFB,Bangalore-7";
				address2 = "";
				civNo =  storeIssueM.getIssueNo();
				dated = ""
					+ HMSUtil.changeDateToddMMyyyy(storeIssueM
							.getIssueDate());
				unit2 = "" + storeIssueM.getToStore().getDepartmentName();
				depotNo = "";

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("fromDept", fromDept);
		map.put("toDept", toDept);
		map.put("demandNo", demanNo);
		map.put("accountingUnit", "");
		map.put("recieptVoucherNo", recieptVoucherNo);
		map.put("period1", period1);
		map.put("period2", period2);
		map.put("unit1", unit1);
		map.put("unit2", unit2);
		map.put("address1", address1);
		map.put("address2", address2);
		map.put("depotNo", depotNo);
		map.put("civNo", civNo);
		map.put("dated", dated);
		map.put("conn", con);
		map.put("Hosp_Name", Hosp_Name);
		return map;
	}

	public Map<String, Object> getLoanOutPrintMap(Map dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();

		session = (Session) getSession();
		List<StoreInternalIndentM> indentMList = new ArrayList<StoreInternalIndentM>();
		Connection con = session.connection();
		int internalIndentId = 0;

		int toStore = 0;

		String Hosp_Name = "";
		if (dataMap.get("internalIndentId") != null) {
			internalIndentId = (Integer) dataMap.get("internalIndentId");
		}
		try {
			indentMList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreInternalIndentM as sim where  sim.Status='o' and sim.Id="
					+ internalIndentId + "");

			StoreInternalIndentM storeInternalIndentM = (StoreInternalIndentM) indentMList
			.get(0);
			Hosp_Name = storeInternalIndentM.getHospital().getHospitalName();

			toStore = storeInternalIndentM.getDepartment().getId();

		} catch (Exception e) {

			e.printStackTrace();
		}
		map.put("toStore", toStore);
		map.put("conn", con);
		map.put("Hosp_Name", Hosp_Name);
		return map;
	}

	public Map<String, Object> getIssueIndentMap(String demandNo, int deptId) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreInternalIndentM> storeIndentMList = new ArrayList<StoreInternalIndentM>();
		session = (Session) getSession();
		List<StoreIndentM> indentMList = new ArrayList<StoreIndentM>();
		Connection con = session.connection();
		String approvedBy = "";
		String requestBy = "";
		String demanNo = "";
		String accountingUnit = "";
		String recieptVoucherNo = "";
		String period1 = "";
		String period2 = "";
		String unit1 = "";
		String unit2 = "";
		String address1 = "";
		String address2 = "";
		String depotNo = "";
		String civNo = "";
		String dated = "";
		String Hosp_Name = "";
		String empName = "";
		String empRank = "";
		String requestByName = "";
		String requestByRank = "";
		try {
			storeIndentMList = getHibernateTemplate()
			.find(
					" from jkt.hms.masters.business.StoreInternalIndentM as sim where sim.DemandNo='"
					+ demandNo
					+ "' and sim.Department.Id='"
					+ deptId + "'");
			for (StoreInternalIndentM storeIndentM : storeIndentMList) {
				Hosp_Name = storeIndentM.getHospital().getHospitalName();
				demanNo = "" + storeIndentM.getDemandNo();
				if (storeIndentM.getApprovedBy() != null) {
					if (storeIndentM.getApprovedBy().getFirstName() != null) {
						empName = storeIndentM.getApprovedBy().getFirstName();
					}
					if (storeIndentM.getApprovedBy().getMiddleName() != null) {
						empName = empName + " "
						+ storeIndentM.getApprovedBy().getMiddleName();
					}
					if (storeIndentM.getApprovedBy().getLastName() != null) {
						empName = empName + " "
						+ storeIndentM.getApprovedBy().getLastName();
					}
					if (storeIndentM.getApprovedBy().getRank() != null) {
						empRank = storeIndentM.getApprovedBy().getRank()
						.getRankName();
					}
				}
				approvedBy = "" + empName;

				if (storeIndentM.getRequestedBy() != null) {
					if (storeIndentM.getRequestedBy().getFirstName() != null) {
						requestByName = storeIndentM.getRequestedBy()
						.getFirstName();
					}
					if (storeIndentM.getRequestedBy().getMiddleName() != null) {
						requestByName = requestByName + " "
						+ storeIndentM.getRequestedBy().getMiddleName();
					}
					if (storeIndentM.getRequestedBy().getLastName() != null) {
						requestByName = requestByName + " "
						+ storeIndentM.getRequestedBy().getLastName();
					}
					if (storeIndentM.getRequestedBy().getRank() != null) {
						requestByRank = storeIndentM.getRequestedBy().getRank()
						.getRankName();
					}
				}
				requestBy = "" + requestByName;
				accountingUnit = "";
				recieptVoucherNo = "";
				period1 = "";
				period2 = "";
				unit1 = "" + storeIndentM.getDepartment().getDepartmentName();
				address1 = "CHAFB,Bangalore-7";
				address2 = "";
				civNo = "CIV";
				dated = ""
					+ HMSUtil.changeDateToddMMyyyy(storeIndentM
							.getDemandDate());
				unit2 = "" + storeIndentM.getToStore().getDepartmentName();
				depotNo = "";

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("demandNo", demanNo);
		map.put("accountingUnit", "");
		map.put("recieptVoucherNo", recieptVoucherNo);
		map.put("period1", period1);
		map.put("period2", period2);
		map.put("unit1", unit1);
		map.put("unit2", unit2);
		map.put("address1", address1);
		map.put("address2", address2);
		map.put("depotNo", depotNo);
		map.put("civNo", civNo);
		map.put("dated", dated);
		map.put("conn", con);
		map.put("Hosp_Name", Hosp_Name);
		map.put("approvedBy", approvedBy);
		map.put("empRank", empRank);
		map.put("requestBy", requestBy);
		map.put("requestByRank", requestByRank);
		return map;
	}

	public Map<String, Object> showPrintIssueToDispensary() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIssueM> storeIssueMList = new ArrayList<StoreIssueM>();
		try {
			storeIssueMList = getHibernateTemplate().find(
			" from jkt.hms.masters.business.StoreIssueM as sgrm");
		} catch (Exception e) {
		}
		map.put("storeIssueMList", storeIssueMList);
		return map;
	}

	public Map<String, Object> getAdjustLoanOutMap(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIssueM> storeIssueMList = new ArrayList<StoreIssueM>();
		List<StoreIssueT> storeIssueTList = new ArrayList<StoreIssueT>();
		GregorianCalendar gregorianCalendar = new GregorianCalendar();
		int currentMonth = gregorianCalendar.get(Calendar.MONTH) + 1;
		int currentYear = Integer.parseInt(""+ gregorianCalendar.get(Calendar.YEAR));
		int toStoreId = 0;

		int deptId = 0;
		int issueMId = 0;

		String monthAndYear = "";
		try {
			if (dataMap.get("deptId") != null) {
				deptId = Integer.parseInt("" + dataMap.get("deptId"));
			}
			if (dataMap.get("toStoreId") != null) {
				toStoreId = Integer.parseInt("" + dataMap.get("toStoreId"));
			}
			if (currentMonth == 1) {
				currentMonth = 12;
				currentYear = currentYear - 1;
				monthAndYear = (currentYear + "-" + currentMonth);

			} else {
				if (currentMonth <= 10) {
					monthAndYear = (currentYear + "-0" + (currentMonth - 1));
				} else {
					monthAndYear = (currentYear + "-" + (currentMonth - 1));
				}
			}
			// storeIssueTList = getHibernateTemplate().find("from
			// jkt.hms.masters.business.StoreIssueT as sim where sim.IssueM <=
			// '"+monthAndYear+"' and sim.IssueM.IssueType='l' and
			// sim.IssueM.Status='o' and sim.IssueM.Department.Id='"+deptId+"'
			// and sim.IssueM.ToStore.Id='"+toStoreId+"'");
			storeIssueTList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreIssueT as sim where sim.IssueM.IssueType='l'  and sim.IssueM.Status='o' and sim.IssueM.Department.Id='"
					+ deptId
					+ "'and sim.IssueM.ToStore.Id='"
					+ toStoreId + "'");
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("storeIssueTList", storeIssueTList);
		map.put("issueMId", issueMId);

		return map;
	}

	/*
	 * This method is user to evaluate auto generated number based on the year
	 * It takes one parameter that is coming from store_fy_document_no
	 */
	public String getMaxNo(String no) {
		
		System.out.println("getMaxNo="+no);
		String maxNo = "";
		String y1 = "";
		String y2 = "";
		String y3 = "";
		int tempMonth = 0;
		if ((no == null) || (no.equals("0"))) {
			no = "";
		}
		GregorianCalendar gregorianCalendar = new GregorianCalendar();
		int currentMonth = gregorianCalendar.get(Calendar.MONTH) + 1;
		String currentYear = "" + gregorianCalendar.get(Calendar.YEAR);
		try {
			if ((Integer.parseInt(currentYear.substring(2)) - 1) <= 9)
				y1 = "0" + (Integer.parseInt(currentYear.substring(2)) - 1);
			else
				y1 = "" + (Integer.parseInt(currentYear.substring(2)) - 1);

			if (Integer.parseInt(currentYear.substring(2)) <= 9)
				y2 = "0" + Integer.parseInt(currentYear.substring(2));
			else
				y2 = "" + Integer.parseInt(currentYear.substring(2));
			if ((Integer.parseInt(currentYear.substring(2)) + 1) <= 9)
				y3 = "0" + (Integer.parseInt(currentYear.substring(2)) + 1);
			else
				y3 = "" + (Integer.parseInt(currentYear.substring(2)) + 1);
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			if (!no.equals("")) {
				StringTokenizer stringTokenizer = new StringTokenizer(no, "/");
				tempMonth = Integer.parseInt(stringTokenizer.nextToken());
				tempMonth++;
				if (currentMonth < 4) {
					if (tempMonth < 10) {
						maxNo = "0" + tempMonth + "/" + y1 + "-" + y2;
					} else {
						maxNo = tempMonth + "/" + y1 + "-" + y2;
					}
				} else {
					if (tempMonth < 10) {
						maxNo = "0" + tempMonth + "/" + y2 + "-" + y3;
					} else {
						maxNo = tempMonth + "/" + y2 + "-" + y3;
					}
				}

			} else {
				if (currentMonth < 4) {
					maxNo = "01" + "/" + y1 + "-" + y2;
				} else {
					maxNo = "01" + "/" + y2 + "-" + y3;
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return maxNo;
	}

	public Map getBrandMap(Map<String, Object> dataMap)
	{

		Map map = new HashMap();
		List<StoreItemBatchStock> masStoreBrandList = new ArrayList<StoreItemBatchStock>();
		List masStoreBrandListWithoutExpiryDateRestriction = new ArrayList();
		session = (Session) getSession();
		int deptId = 0;
		int itemId = 0;
		if (dataMap.get("deptId") != null) {
			deptId = (Integer)dataMap.get("deptId");
		}
		if (dataMap.get("itemId") != null) {
			itemId = (Integer)dataMap.get("itemId");
		}
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
		SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
		String date4MySQL = "";
		try {
			date4MySQL = formatterOut.format(formatterIn.parse(date));
		} catch (ParseException e1) {

			e1.printStackTrace();
		}
		Date issueDate = java.sql.Date.valueOf(date4MySQL);

		BigDecimal costPrice = new BigDecimal("0");
		try {
			masStoreBrandList = session
			.createCriteria(StoreItemBatchStock.class)
			.createAlias("Item", "item")
			.createAlias("Department", "dept")
			.add(Restrictions.eq("dept.Id", deptId))
			.add(Restrictions.eq("item.Id", itemId))
			//.add(Restrictions.gt("CostPrice", costPrice))
			.add(Restrictions.gt("ExpiryDate", issueDate))
			.add(Restrictions.gt("ClosingStock", new BigDecimal(0)))
			.addOrder(Order.asc("ExpiryDate")).list();

			// String qry="select *,
			// stock.batch_no,stock.expiry_date,stock.closing_stock,stock.cost_price
			// FROM store_item_batch_stock stock where
			// stock.item_id='"+itemId+"' and stock.department_id='"+deptId+"'
			// and stock.closing_stock >0 and stock.expiry_date>'"+issueDate+"'
			// order by stock.expiry_date;";
			// masStoreBrandList = (List) session.createSQLQuery(qry).list();

			/*
			 * if(masStoreBrandList==null||masStoreBrandList.size()==0){
			 * qry="select
			 * stock.brand_id,brand.brand_name,stock.batch_no,stock.expiry_date
			 * ,stock.closing_stock,stock.cost_price FROM mas_store_brand
			 * brand,store_item_batch_stock stock where
			 * stock.item_id='"+itemId+"' and brand.brand_id=stock.brand_id and
			 * stock.department_id='"+deptId+"' and stock.closing_stock >0 order
			 * by stock.expiry_date;"; // System.out.println("query 1 "+qry);
			 * masStoreBrandListWithoutExpiryDateRestriction = (List)
			 * session.createSQLQuery(qry).list();
			 * if(masStoreBrandListWithoutExpiryDateRestriction
			 * !=null&&masStoreBrandListWithoutExpiryDateRestriction.size()>0){
			 * map.put("masStoreBrandListWithoutExpiryDateRestriction",
			 * masStoreBrandListWithoutExpiryDateRestriction); //
			 * }
			 */
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("masStoreBrandList", masStoreBrandList);
		return map;

		/*		Map map = new HashMap();
		List masStoreBrandList = new ArrayList();
		List<StoreIssueT> storeIssueTList = new ArrayList<StoreIssueT>();
		List<StoreIssueM> storeIssueMList = new ArrayList<StoreIssueM>();
		List<MasStoreItem> masStoreItemList = new ArrayList<MasStoreItem>();

		List masStoreBrandListWithoutExpiryDateRestriction = new ArrayList();
		session = (Session) getSession();
		int deptId = 0;
		int itemId = 0;
		BigDecimal issuedQty = new BigDecimal(0);
		String issueNo = "";
		int issueMId = 0;
		int toDept = 0;

		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}

		if (dataMap.get("itemId") != null) {
			itemId = Integer.parseInt("" + dataMap.get("itemId"));
		}

		if (dataMap.get("issuedQty") != null) {
			issuedQty = (BigDecimal) dataMap.get("issuedQty");
		}

		if (dataMap.get("issueNo") != null) {
			issueNo = dataMap.get("issueNo").toString();
		}

		if (dataMap.get("issueMId") != null) {
			issueMId = Integer.parseInt("" + dataMap.get("issueMId"));
		}

		if (dataMap.get("toDept") != null) {
			toDept = Integer.parseInt("" + dataMap.get("toDept"));
		}

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");

		SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
		SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
		String date4MySQL = formatterOut.format(formatterIn.parse(date));
		Date datestr = java.sql.Date.valueOf(date4MySQL);
		SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
		String issueDate=sdf.format(datestr);

		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

		try {
			String qry = "select stock.brand_id,brand.brand_name,stock.batch_no,stock.expiry_date,stock.closing_stock,stock.cost_price FROM mas_store_brand brand,store_item_batch_stock stock where   stock.item_id='"
					+ itemId
					+ "' and brand.brand_id=stock.brand_id  and stock.department_id='"
					+ deptId
					+ "' and  stock.closing_stock >0  and stock.expiry_date>'"
					+ issueDate + "' order by stock.expiry_date";
			masStoreBrandList = (List) session.createSQLQuery(qry).list();
			masStoreItemList = session.createCriteria(MasStoreItem.class).add(
					Restrictions.eq("Id", itemId)).list();
			if (masStoreBrandList == null || masStoreBrandList.size() == 0) {
				qry = "select stock.brand_id,brand.brand_name,stock.batch_no,stock.expiry_date,stock.closing_stock,stock.cost_price FROM mas_store_brand brand,store_item_batch_stock stock where   stock.item_id='"
						+ itemId
						+ "' and brand.brand_id=stock.brand_id  and stock.department_id='"
						+ deptId
						+ "' and  stock.closing_stock >0   order by stock.expiry_date";
				masStoreBrandListWithoutExpiryDateRestriction = (List) session
						.createSQLQuery(qry).list();
				if (masStoreBrandListWithoutExpiryDateRestriction != null
						&& masStoreBrandListWithoutExpiryDateRestriction.size() > 0) {
					map.put("masStoreBrandListWithoutExpiryDateRestriction",
							masStoreBrandListWithoutExpiryDateRestriction);
				}
			}

			if (issuedQty.doubleValue() > 0) {
				storeIssueTList = session.createCriteria(StoreIssueT.class)
						.add(Restrictions.eq("Item.Id", itemId))
						.add(Restrictions.gt("QtyIssued", new BigDecimal(0)))
						.createAlias("IssueM", "issueM").add(
								Restrictions.eq("issueM.IssueNo", issueNo))
						.list();

			}
			storeIssueMList = session.createCriteria(StoreIssueM.class).add(
					Restrictions.lt("Id", issueMId)).add(
					Restrictions.eq("Status", "o")).add(
					Restrictions.eq("IssueType", "i")).add(
					Restrictions.eq("ToStore.Id", toDept)).list();


			StoreIssueM storeIssueM = (StoreIssueM) hbt.load(StoreIssueM.class,
					issueMId);
			String cstatus = "";
			if (storeIssueM != null) {
				cstatus = storeIssueM.getStatus();
			}
			map.put("cstatus", cstatus);

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("masStoreBrandList", masStoreBrandList);
		map.put("storeIssueTList", storeIssueTList);
		map.put("masStoreItemList", masStoreItemList);
		map.put("storeIssueMList", storeIssueMList);
		return map;*/
	}

	public boolean addBrandDetails(Map<String, Object> dataMap) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		List costPriceList = null;
		List batchNoList = null;
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("userName") != null) {
			userName = ("" + dataMap.get("userName"));
		}
		if (dataMap.get("costPriceList") != null) {
			costPriceList = (List) dataMap.get("costPriceList");
		}
		if (dataMap.get("batchNoList") != null) {
			batchNoList = (List) dataMap.get("batchNoList");
		}
		String issueNo = "";
		int[] brandIdList = new int[100];
		BigDecimal[] qtyIssuedArray = new BigDecimal[100];
		int issueId = 0;
		int itemId = 0;
		int detailId = 0;
		int itemIssuedIdArray[] = null;
		String qtyIssuedTempArray[] = null;
		List<StoreIssueT> storeIssueTList = new ArrayList<StoreIssueT>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		int storeFyId = 0;
		if (dataMap.get("itemIssuedIdArray") != null) {
			itemIssuedIdArray = (int[]) dataMap.get("itemIssuedIdArray");
		}

		if (dataMap.get("qtyIssuedTempArray") != null) {
			qtyIssuedTempArray = (String[]) dataMap.get("qtyIssuedTempArray");
		}

		if (dataMap.get("itemId") != null) {
			itemId = Integer.parseInt("" + dataMap.get("itemId"));
		}
		if (dataMap.get("storeIssueTList") != null) {
			storeIssueTList = (List) dataMap.get("storeIssueTList");
		}
		if (dataMap.get("issueId") != null) {
			issueId = Integer.parseInt("" + dataMap.get("issueId"));
		}
		if (dataMap.get("issueNo") != null) {
			issueNo = ("" + dataMap.get("issueNo"));
		}
		if (dataMap.get("detailId") != null) {
			detailId = Integer.parseInt("" + dataMap.get("detailId"));
		}

		boolean successfullyAdded = false;

		Session session = (Session) getSession();
		Transaction tx = null;
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {
			tx = session.beginTransaction();
			StoreIssueM storeIssueM2 = new StoreIssueM();

			/*
			 * String hql="delete from jkt.hms.masters.business.StoreIssueT as a
			 * where a.Id='"+detailId+"'"; Query query =
			 * session.createQuery(hql); int row = query.executeUpdate();
			 */
			List<StoreIssueT> storeIssueTNoList = new ArrayList<StoreIssueT>();
			storeIssueTNoList = session.createCriteria(StoreIssueT.class).add(
					Restrictions.eq("IssueM.Id", issueId)).add(
							Restrictions.eq("Issued", "y")).list();

			if (storeIssueTList.size() > 0)
				for (int i = 0; i < storeIssueTList.size(); i++) {
					StoreIssueT issueTObj = new StoreIssueT();
					issueTObj = (StoreIssueT) storeIssueTList.get(i);
					issueTObj.setIssued("y");
					hbt.save(issueTObj);
				}

			// --------------------------Start of Stock
			// Updating--------------------------
			BigDecimal stock = null;
			BigDecimal issueQty = null;
			for (int i = 0; i < itemIssuedIdArray.length; i++) {
				if (!(new BigDecimal("" + qtyIssuedTempArray[i]))
						.equals(new BigDecimal("0"))) {
					BigDecimal costprice = new BigDecimal(""
							+ costPriceList.get(i));
					String qry = "select closing_stock,issue_qty from store_item_batch_stock a where a.brand_id='"
						+ itemIssuedIdArray[i]
						                    + "' and a.item_id='"
						                    + itemId
						                    + "' and a.department_id='"
						                    + deptId
						                    + "'and a.batch_no='"
						                    + batchNoList.get(i)
						                    + "'and a.cost_price='" + costprice + "'";
					List c = (List) session.createSQLQuery(qry).list();

					Object[] object = (Object[]) c.get(0);
					if (object[0] == null) {
						stock = new BigDecimal("0");
					} else {
						stock = (BigDecimal) object[0];
					}
					if (object[1] == null) {
						issueQty = new BigDecimal("0");
					} else {
						issueQty = (BigDecimal) object[1];
					}

					String hql2 = "update from jkt.hms.masters.business.StoreItemBatchStock  as a set a.ClosingStock='"
						+ stock.subtract(new BigDecimal(
								qtyIssuedTempArray[i]))
								+ "'  where a.Brand.Id='"
								+ itemIssuedIdArray[i]
								                    + "'and a.CostPrice='"
								                    + costprice
								                    + "'and a.BatchNo='"
								                    + batchNoList.get(i)
								                    + "'and a.Department.Id='" + deptId + "'";
					String hql3 = "update from jkt.hms.masters.business.StoreItemBatchStock  as a set a.IssueQty='"
						+ issueQty
						.add(new BigDecimal(qtyIssuedTempArray[i]))
						+ "'  where a.Brand.Id='"
						+ itemIssuedIdArray[i]
						                    + "'and a.CostPrice='"
						                    + costprice
						                    + "'and a.BatchNo='"
						                    + batchNoList.get(i)
						                    + "'and a.Department.Id='" + deptId + "'";
					Query query2 = session.createQuery(hql2);
					int row2 = query2.executeUpdate();
					Query query3 = session.createQuery(hql3);
					int row3 = query3.executeUpdate();
					// --------------------------Start of Stock
					// Updating--------------------------

				}
			}

			Criteria c = session.createCriteria(StoreFyDocumentNo.class).add(
					Restrictions.eq("Department.Id", deptId));
			storeFyDocumentNoList = c.list();
			for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
				storeFyId = documentNo.getId();
			}

			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
			.load(StoreFyDocumentNo.class, storeFyId);

			if (storeIssueTNoList.size() == 0) {
				storeFyDocumentNo.setIssueDeptNo(issueNo);
				hbt.update(storeFyDocumentNo);
			}

			tx.commit();
			successfullyAdded = true;
		} catch (RuntimeException e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();
		} finally {
			//session.close();
		}
		return successfullyAdded;
	}

	public int getIssueId(String issueNo) {
		List<StoreIssueM> storeIssueMList = new ArrayList<StoreIssueM>();
		int id = 0;
		try {
			storeIssueMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIssueM as msb where msb.IssueNo = '"
					+ issueNo + "'");
		} catch (Exception e) {
			e.printStackTrace();
		}
		for (StoreIssueM storeIssueM : storeIssueMList) {
			id = storeIssueM.getId();
		}
		return id;
	}

	// -------------------------------------- Start of Indent Soc Tracker
	// ------------------------------------------

	public Map<String, Object> getItemListForSocTracker(
			Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIndentT> storeIndentTList = new ArrayList<StoreIndentT>();
		int indentId = 0;

		try {
			if (dataMap.get("indentId") != null) {
				indentId = Integer.parseInt("" + dataMap.get("indentId"));
			}
			if (indentId != 0) {
				storeIndentTList = getHibernateTemplate().find(
						" from jkt.hms.masters.business.StoreIndentT as sit where   sit.Indent.Id= '"
						+ indentId + "'");
			}
			map.put("storeIndentTList", storeIndentTList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	public Map<String, Object> getIndentListForSocTracker(
			Map<String, Object> dataMap) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		if (dataMap.get("deptId") != null)
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		if (dataMap.get("hospitalId") != null)
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		if (dataMap.get("userName") != null)
			userName = ("" + dataMap.get("userName"));
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIndentM> storeIndentMList = new ArrayList<StoreIndentM>();
		int selectedDepartmentId = 0;
		if (dataMap.get("selectedDepartmentId") != null) {
			selectedDepartmentId = Integer.parseInt(""
					+ dataMap.get("selectedDepartmentId"));
		}
		if (selectedDepartmentId != 0)
			storeIndentMList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreIndentM as sim where sim.IndentType='s' and sim.Status='o' and sim.Department.Id='"
					+ deptId
					+ "' and sim.ItemReqDept.Id= '"
					+ selectedDepartmentId + "'");
		map.put("storeIndentMList", storeIndentMList);
		return map;
	}

	/*
	 * This is the method to get the Indent Soc Tracker related lists
	 *
	 */
	public Map<String, Object> showIndentSocTracker() {

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();

		Session session = (Session) getSession();
		try {
			departmentList = session.createCriteria(MasDepartment.class).add(
					Restrictions.eq("Status", "y")).list();

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("departmentList", departmentList);

		return map;

	}

	/*
	 * This is the method to get the map from store_indent_soc_tracker table
	 * based on the indentId,departmentId,nomenclature
	 */
	public Map<String, Object> getIndentSocTracker(Map<String, Object> idsMap) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		if (idsMap.get("deptId") != null)
			deptId = Integer.parseInt("" + idsMap.get("deptId"));
		if (idsMap.get("hospitalId") != null)
			hospitalId = Integer.parseInt("" + idsMap.get("hospitalId"));
		if (idsMap.get("userName") != null)
			userName = ("" + idsMap.get("userName"));
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIndentSocTracker> storeIndentSocTrackerList = new ArrayList<StoreIndentSocTracker>();
		List<StoreIndentT> indentTList = new ArrayList<StoreIndentT>();
		List<MasStoreItem> masStoreItemList = new ArrayList<MasStoreItem>();
		List objectList = new ArrayList();
		int indentId = 0;
		int toDepartmentId = 0;
		String nomenclature = "";
		int indentIdForGrid = 0;
		int itemId = 0;
		session = (Session) getSession();
		try {
			if (idsMap.get("indentId") != null) {
				indentId = Integer.parseInt("" + idsMap.get("indentId"));
			}
			if (idsMap.get("toDepartmentId") != null) {
				toDepartmentId = Integer.parseInt(""
						+ idsMap.get("toDepartmentId"));
			}
			if (idsMap.get("itemId") != null) {
				itemId = Integer.parseInt("" + idsMap.get("itemId"));
			}

			String qry = "SELECT item.item_id,item.nomenclature,item.pvms_no,conversion.item_unit_name,t.unit_rate,t.last_receipt_qty,t.stock_in FROM store_indent_t t,store_indent_m m,mas_store_item item,mas_store_item_conversion conversion where m.indent_id='"
				+ indentId
				+ " and m.indent_id=t.indent_id and item.item_id="
				+ itemId
				+ " and conversion.item_conversion_id=item.item_conversion_id and t.item_id="
				+ itemId + " ";
			objectList = (List) session.createSQLQuery(qry).list();

			storeIndentSocTrackerList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreIndentSocTracker as sist where sist.Department="
					+ toDepartmentId
					+ " and sist.Indent.Id="
					+ indentId
					+ " and sist.Item.Id="
					+ itemId + " ");
			indentTList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIndentT as sist where  sist.Indent.Id='"
					+ indentId + "' and sist.Item.Id=" + itemId + " ");
			masStoreItemList = (List<MasStoreItem>) getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasStoreItem as mis where mis.Id= "
					+ itemId + " ");
			map.put("storeIndentSocTrackerList", storeIndentSocTrackerList);
			map.put("objectList", objectList);
			map.put("indentTList", indentTList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	/*
	 * This is the method used to add or update the Indent Soc Tracker details
	 *
	 */
	public boolean addOrUpdateIndentSocTracker(
			StoreIndentSocTracker indentSocTracker, int indentSocTrackerId) {
		Boolean addOrUpdate = false;
		session = (Session) getSession();
		Transaction tx = null;
		try {
			// --------------Transaction Started----------
			tx = session.beginTransaction();

			if (indentSocTrackerId != 0) {
				HibernateTemplate hbt = getHibernateTemplate();
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
				hbt.update(indentSocTracker);
			} else {
				HibernateTemplate hbt2 = getHibernateTemplate();
				hbt2.setFlushModeName("FLUSH_EAGER");
				hbt2.setCheckWriteOperations(false);
				hbt2.save(indentSocTracker);
			}
			addOrUpdate = true;
			// --------------Transaction Ended----------
			tx.commit();

		} catch (Exception e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();
		}
		return addOrUpdate;
	}

	public Map<String, Object> getItemMapForAutoComplete() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> masStoreItemList = new ArrayList<MasStoreItem>();
		List<MasFormation> list = new ArrayList<MasFormation>();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {
			list = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasFormation ");
			masStoreItemList = (List<MasStoreItem>) hbt
			.find("from jkt.hms.masters.business.MasStoreItem as mis where mis.Status='y'  and mis.Id<100");
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("masStoreItemList", masStoreItemList);
		return map;
	}

	// ----------------------------Start Of Issues To Dispensary (CIV)
	// ----------------------

	/*
	 * Methods starting for CIV Issue changes by vikas
	 */


	public Map showIssueUnit(Map<String, Object> dataMap)
	{

		Session session = (Session) getSession();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("userName") != null) {
			userName = ("" + dataMap.get("userName"));
		}
		Map map = new HashMap();

		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasDepartment> departmentNameSendToJsp = new ArrayList<MasDepartment>();
		List<MasStoreAirForceDepot> masStoreAirForceDepotList = new ArrayList<MasStoreAirForceDepot>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<StoreIssueM> searchListForPopup = new ArrayList<StoreIssueM>();
		List<StoreSetup> storeSetupList = new ArrayList<StoreSetup>();
		//List<MasStoreBrand> masStoreBrandList = new ArrayList<MasStoreBrand>();
		//	List<Patient> patientList = new ArrayList<Patient>();

		departmentList = getHibernateTemplate().find(
		"from jkt.hms.masters.business.MasDepartment as md where md.Status='y' order by md.DepartmentName asc");
		departmentNameSendToJsp = getHibernateTemplate().find(
				"from jkt.hms.masters.business.MasDepartment as md where md.Id='"
				+ deptId + "'");
		employeeList = getHibernateTemplate()
		.find("from jkt.hms.masters.business.MasEmployee where Status='y' order by FirstName asc");
		masStoreAirForceDepotList = getHibernateTemplate().find(
		"from jkt.hms.masters.business.MasStoreAirForceDepot where Status='y'");


		List<StoreInternalIndentM> storeInternalPendingIndentList = new ArrayList<StoreInternalIndentM>();

		storeInternalPendingIndentList = session
		.createCriteria(StoreInternalIndentM.class)
		.add(Restrictions.eq("Status", "o"))
		.createAlias("ToStore", "d")
		.add(Restrictions.eq("d.Id", deptId))
		.addOrder(Order.desc("Id")).list();

		StoreSetup storeSetup = new StoreSetup();
		String max = "";
		String startNo = "";
		String no = "";
		String deptName = "";
		try {
			storeSetupList = session.createCriteria(StoreSetup.class).list();
			if (storeSetupList != null && storeSetupList.size() > 0) {
				storeSetup = (StoreSetup) storeSetupList.get(0);
			}
			// patientList=getHibernateTemplate().find("from
			// jkt.hms.masters.business.Patient as pt where pt.Status='y'");

			List<StoreIssueM> issueNoList = new ArrayList<StoreIssueM>();
			/*issueNoList = session.createCriteria(StoreIssueM.class)
					.setProjection(Projections.property("IssueNo")).list();*/
			issueNoList=getHibernateTemplate().find("from jkt.hms.masters.business.StoreIssueM as sim order by sim.Id desc");
			if (issueNoList.size() > 0) {
				StoreIssueM storeIssueM=new StoreIssueM();
				storeIssueM = (StoreIssueM) issueNoList.get(0);
				no=storeIssueM.getIssueNo();
				/*for (int i = 0; i < issueNoList.size(); i++) {
				}*/
			}

			/*storeFyDocumentNoList = getHibernateTemplate()
					.find(
							"from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"
									+ deptId + "' ");*/
			// storeInternalIndentMList = getHibernateTemplate().find("from
			// jkt.hms.masters.business.StoreInternalIndentM as siim where
			// siim.Department.Id='"+storeSetup.getStoreDispensary().getId() +"'
			// and siim.Status='o' and siim.ToStore='"+deptId+"'");
			storeInternalIndentMList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreInternalIndentM as siim  where siim.Status='o' and siim.ToStore='"
					+ deptId + "' order by siim.DemandNo desc");
			/*for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
				if (storeFyDocumentNo.getIssueDeptNo() != null) {
					no = ("" + storeFyDocumentNo.getIssueDeptNo());
				} else {
					no = "";
				}

			}*/
			searchListForPopup = getHibernateTemplate()
			.find("from jkt.hms.masters.business.StoreIssueM sim where sim.Department.Id='"
					+ deptId
					+ "' and sim.Status='o' and sim.IssueType='i'  order by Id desc");
			MasDepartment masDepartment = departmentNameSendToJsp.get(0);
			deptName = masDepartment.getDepartmentName();


			Map<String, Object> mapDate = new HashMap<String, Object>();
			mapDate=HMSUtil.getCurrentDateAndTime();
			String currentDate="";
			if(mapDate.get("currentDate")!=null){
				currentDate=(String)mapDate.get("currentDate");
			}

			List<Object[]> storeInternalIndentPendingList = new ArrayList<Object[]>();
			String qry = "";
			/*qry = "select sim.id,sim.demand_no,sim.demand_date from store_internal_indent_m sim left join store_internal_indent_t sit on " +
			     " sim.id = sit.internal_id where sim.department_id="+deptId+
			     " and (sit.qty_request - isnull(sit.qty_issued,0)) > 0 group by sim.demand_no,sim.id,sim.demand_date order by sim.demand_date desc";
			 */
			qry = "select sim.id,sim.demand_no,sim.demand_date,dept_req.department_name as req_department,dept_reqBy.department_name as reqBy_department," +
			"(emp.first_name||' '||nvl(emp.middle_name,'')||' '||nvl(emp.last_name,'')) as requested_by from store_internal_indent_m sim left join store_internal_indent_t sit " +
			"on sim.id = sit.internal_id,mas_department dept_req,mas_department dept_reqBy,mas_employee  emp where emp.employee_id=sim.requested_by and dept_reqBy.department_id=sim.to_store " +
			"and dept_req.department_id=sim.department_id and sim.to_store=24 and (sit.qty_request - nvl(sit.qty_issued,0)) > 0 group by sim.demand_no,sim.id,sim.demand_date,dept_req.department_name,dept_reqBy.department_name " +
			",emp.first_name,emp.middle_name,emp.last_name order by sim.demand_date desc";

			storeInternalIndentPendingList = session.createSQLQuery(qry).list();
			map.put("storeInternalIndentPendingList", storeInternalIndentPendingList);
			// searchListForPopup----"+searchListForPopup.size());
		} catch (Exception e) {
			e.printStackTrace();
		}
		String deptType="";
		if (dataMap.get("deptType") != null) {
			deptType = ("" + dataMap.get("deptType"));
		}
		try {
			//max = getMaxNo(no);
			Map<String, Object> maxMap=new HashMap<String, Object>();
			maxMap.put("no", no);
			maxMap.put("deptType", deptType);
			max =getMaxNoByDeptCode(maxMap);
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("deptName", deptName);
		//List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();
		//	map.put("storeInternalIndentTList", storeInternalIndentTList);
		map.put("storeInternalIndentMList", storeInternalIndentMList);
		map.put("departmentList", departmentList);
		map.put("masStoreAirForceDepotList", masStoreAirForceDepotList);
		map.put("employeeList", employeeList);
		map.put("max", max);
		//map.put("masStoreBrandList", masStoreBrandList);
		map.put("searchListForPopup", searchListForPopup);
		//map.put("patientList", patientList);
		map.put("storeSetup", storeSetup);
		return map;

	}
	public Map showIssueDispensaryJsp(Map<String, Object> dataMap) {
		Session session = (Session) getSession();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));

		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("userName") != null) {
			userName = ("" + dataMap.get("userName"));
		}
		Map map = new HashMap();

		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasDepartment> departmentNameSendToJsp = new ArrayList<MasDepartment>();
		List<MasStoreAirForceDepot> masStoreAirForceDepotList = new ArrayList<MasStoreAirForceDepot>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<StoreIssueM> searchListForPopup = new ArrayList<StoreIssueM>();
		List<StoreSetup> storeSetupList = new ArrayList<StoreSetup>();
		//List<MasStoreBrand> masStoreBrandList = new ArrayList<MasStoreBrand>();
		//	List<Patient> patientList = new ArrayList<Patient>();

		/*departmentList = getHibernateTemplate().find(
		"from jkt.hms.masters.business.MasDepartment as md where md.Status='y' and  md.Hospital.Id= " +
		+ hospitalId +
		"order by md.DepartmentName asc");*/

		/*departmentList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.MasDepartment as md where md.Status='y'  "+
		"order by md.DepartmentName asc");
		System.out.println("beforeNamedQuery---------------->"+departmentList.size());*/
	Query q = session.createQuery("from jkt.hms.masters.business.MasDepartment as md where md.Status=? "+"order by md.DepartmentName asc");
	q.setParameter(0, "y");	
	 departmentList = q.list();	 
		
		/*departmentNameSendToJsp = getHibernateTemplate().find(
				"from jkt.hms.masters.business.MasDepartment as md where md.Id='"
				+ deptId + "' ");*/
	 departmentNameSendToJsp = session.createCriteria(MasDepartment.class).add(Restrictions.eq("Status", "y")).add(Restrictions.ne("Id", deptId)).list();
	 
		/*employeeList = getHibernateTemplate()
		.find("from jkt.hms.masters.business.MasEmployee as me where me.Status='y' and  me.Hospital.Id= "
				+ hospitalId +" order by FirstName asc");*/
	
	 employeeList = session.createCriteria(MasEmployee.class).add(Restrictions.eq("Status", "y")).add(Restrictions.in("Id", getEmployeeIdDepartmentWise(session, deptId))).add(Restrictions.eq("Hospital.Id", hospitalId)).addOrder(Order.asc("FirstName")).list();
		
		/*masStoreAirForceDepotList = getHibernateTemplate().find(
		"from jkt.hms.masters.business.MasStoreAirForceDepot where Status='y'");
*/
	// masStoreAirForceDepotList = session.createCriteria(MasStoreAirForceDepot.class).add(Restrictions.eq("Status", "y")).add(Restrictions.ne("Id", deptId)).list();

		List<StoreInternalIndentM> storeInternalPendingIndentList = new ArrayList<StoreInternalIndentM>();

		storeInternalPendingIndentList = session
		.createCriteria(StoreInternalIndentM.class)
		.add(Restrictions.eq("Status", "o"))
		.createAlias("ToStore", "d")
		.add(Restrictions.eq("d.Id", deptId))
		.createAlias("Hospital", "h")
		.add(Restrictions.eq("h.Id", hospitalId)) // add by javed khan
		.addOrder(Order.desc("Id")).list();

		StoreSetup storeSetup = new StoreSetup();
		String max = "";
		String startNo = "";
		String no = "";
		String deptName = "";
		try {
			storeSetupList = session.createCriteria(StoreSetup.class).list();
			if (storeSetupList != null && storeSetupList.size() > 0) {
				storeSetup = (StoreSetup) storeSetupList.get(0);
			}
			// patientList=getHibernateTemplate().find("from
			// jkt.hms.masters.business.Patient as pt where pt.Status='y'");

			List<StoreIssueM> issueNoList = new ArrayList<StoreIssueM>();
			/*issueNoList = session.createCriteria(StoreIssueM.class)
					.setProjection(Projections.property("IssueNo")).list();*/
			
			/*issueNoList=getHibernateTemplate().find("from jkt.hms.masters.business.StoreIssueM as sim where sim.Hospital.Id = "
					+ hospitalId +
			" order by sim.Id desc"); */
			//issueNoList = session.createCriteria(StoreIssueM.class).add(Restrictions.eq("Hospital.Id", hospitalId)).addOrder(Order.asc("Id")).list();
			
			issueNoList = session.createCriteria(StoreIssueM.class).add(Restrictions.eq("Department.Id", deptId)).add(Restrictions.eq("Hospital.Id", hospitalId)).addOrder(Order.desc("Id")).list();
			
			// add by javed khan
			if (issueNoList.size() > 0) {
				StoreIssueM storeIssueM=new StoreIssueM();
				storeIssueM = (StoreIssueM) issueNoList.get(0);
				no=storeIssueM.getIssueNo();
				/*for (int i = 0; i < issueNoList.size(); i++) {
				}*/
			}
			
			System.out.println("no="+no);

			/*storeFyDocumentNoList = getHibernateTemplate()
					.find(
							"from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"
									+ deptId + "' ");*/
			// storeInternalIndentMList = getHibernateTemplate().find("from
			// jkt.hms.masters.business.StoreInternalIndentM as siim where
			// siim.Department.Id='"+storeSetup.getStoreDispensary().getId() +"'
			// and siim.Status='o' and siim.ToStore='"+deptId+"'");
			//comment by sanjay
			/*storeInternalIndentMList = getHibernateTemplate()
			.find(	"from jkt.hms.masters.business.StoreInternalIndentM as siim  where siim.Status='o' and siim.ToStore='"
					+ deptId + "' and siim.Hospital.Id = "
					+hospitalId+" order by siim.DemandNo desc");*/
			//Code by sanjay
			storeInternalIndentMList = session.createCriteria(StoreInternalIndentM.class).add(Restrictions.eq("Status", "o")).add(Restrictions.eq("ToStore.Id", deptId)).add(Restrictions.eq("Hospital.Id", hospitalId)).addOrder(Order.desc("DemandNo")).list();
			/*for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
				if (storeFyDocumentNo.getIssueDeptNo() != null) {
					no = ("" + storeFyDocumentNo.getIssueDeptNo());
				} else {
					no = "";
				}

			}*/
			//commented by SKY
			
			/*searchListForPopup = getHibernateTemplate()
			.find("from jkt.hms.masters.business.StoreIssueM sim where sim.Department.Id='"
					+ deptId
					+ "' and sim.Status='o' and sim.IssueType='i' and sim.Hospital.Id = " +hospitalId+" order by Id desc");*/
			MasDepartment masDepartment = departmentNameSendToJsp.get(0);
			deptName = masDepartment.getDepartmentName();


			Map<String, Object> mapDate = new HashMap<String, Object>();
			mapDate=HMSUtil.getCurrentDateAndTime();
			String currentDate="";
			if(mapDate.get("currentDate")!=null){
				currentDate=(String)mapDate.get("currentDate");
			}

			List<Object[]> storeInternalIndentPendingList = new ArrayList<Object[]>();
			String qry = "";
			/*qry = "select sim.id,sim.demand_no,sim.demand_date from store_internal_indent_m sim left join store_internal_indent_t sit on " +
			     " sim.id = sit.internal_id where sim.department_id="+deptId+
			     " and (sit.qty_request - isnull(sit.qty_issued,0)) > 0 group by sim.demand_no,sim.id,sim.demand_date order by sim.demand_date desc";
			 */
			qry = "select sim.id,sim.demand_no,sim.demand_date,dept_req.department_name as req_department,dept_reqBy.department_name as reqBy_department," +
			"(emp.first_name+' '+isnull(emp.middle_name,'')+' '+isnull(emp.last_name,'')) as requested_by from store_internal_indent_m sim left join store_internal_indent_t sit " +
			"on sim.id = sit.internal_id,mas_department dept_req,mas_department dept_reqBy,mas_employee  emp where emp.employee_id=sim.requested_by and dept_reqBy.department_id=sim.to_store " +
			"and dept_req.department_id=sim.department_id and sim.to_store=24 and sim.hospital_id = " +hospitalId
			+" and (sit.qty_request - isnull(sit.qty_issued,0)) > 0 group by sim.demand_no,sim.id,sim.demand_date,dept_req.department_name,dept_reqBy.department_name " +
			",emp.first_name,emp.middle_name,emp.last_name order by sim.demand_date desc";
			storeInternalIndentPendingList = session.createSQLQuery(qry).list();
			System.out.println("storeInternalIndentPendingList :"+storeInternalIndentPendingList.size());
			map.put("storeInternalIndentPendingList", storeInternalIndentPendingList);
			// searchListForPopup----"+searchListForPopup.size());
		} catch (Exception e) {
			e.printStackTrace();
		}
		String deptType="";
		if (dataMap.get("deptType") != null) {
			deptType = ("" + dataMap.get("deptType"));
		}
		try {
			//max = getMaxNo(no);
			Map<String, Object> maxMap=new HashMap<String, Object>();
			maxMap.put("no", no);
			maxMap.put("deptType", deptType);
			max =getMaxNoByDeptCode(maxMap);
		} catch (Exception e) {
			e.printStackTrace();
		}

		// added by javed khan for search CiV

		List storeIssueMList = new ArrayList();
	
		//comment BY SKY
		String searchQry="select sim.ID,sim.ISSUE_NO from Store_issue_m sim where sim.Department_id='"
			+deptId+"'"
			+ " and sim.ISSUE_TYPE='i' and sim.Hospital_id ='"
			+hospitalId+"'"
			+" order by sim.Id desc ";
		storeIssueMList=(List) session.createSQLQuery(searchQry).list();

		map.put("storeIssueMList", storeIssueMList);

		map.put("deptList", departmentNameSendToJsp);
		map.put("deptName", deptName);
		//List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();
		//	map.put("storeInternalIndentTList", storeInternalIndentTList);
		map.put("storeInternalIndentMList", storeInternalIndentMList);
		map.put("departmentList", departmentList);
		map.put("masStoreAirForceDepotList", masStoreAirForceDepotList);
		map.put("employeeList", employeeList);
		map.put("max", max);
		//map.put("masStoreBrandList", masStoreBrandList);
		map.put("searchListForPopup", searchListForPopup);
		//map.put("patientList", patientList);
		map.put("storeSetup", storeSetup);
		return map;
	}
	
	public Map showIssueDispensaryJspPartial(Map<String, Object> dataMap) {
		Session session = (Session) getSession();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));

		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("userName") != null) {
			userName = ("" + dataMap.get("userName"));
		}
		Map map = new HashMap();

		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasDepartment> departmentNameSendToJsp = new ArrayList<MasDepartment>();
		List<MasStoreAirForceDepot> masStoreAirForceDepotList = new ArrayList<MasStoreAirForceDepot>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<StoreIssueM> searchListForPopup = new ArrayList<StoreIssueM>();
		List<StoreSetup> storeSetupList = new ArrayList<StoreSetup>();
		//List<MasStoreBrand> masStoreBrandList = new ArrayList<MasStoreBrand>();
		//	List<Patient> patientList = new ArrayList<Patient>();

		/*departmentList = getHibernateTemplate().find(
		"from jkt.hms.masters.business.MasDepartment as md where md.Status='y' and  md.Hospital.Id= " +
		+ hospitalId +
		"order by md.DepartmentName asc");*/

		/*departmentList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.MasDepartment as md where md.Status='y'  "+
		"order by md.DepartmentName asc");
		System.out.println("beforeNamedQuery---------------->"+departmentList.size());*/
	Query q = session.createQuery("from jkt.hms.masters.business.MasDepartment as md where md.Status=? "+"order by md.DepartmentName asc");
	q.setParameter(0, "y");	
	 departmentList = q.list();	 
		
		/*departmentNameSendToJsp = getHibernateTemplate().find(
				"from jkt.hms.masters.business.MasDepartment as md where md.Id='"
				+ deptId + "' ");*/
	 departmentNameSendToJsp = session.createCriteria(MasDepartment.class).add(Restrictions.eq("Status", "y")).add(Restrictions.ne("Id", deptId)).list();
	 
		/*employeeList = getHibernateTemplate()
		.find("from jkt.hms.masters.business.MasEmployee as me where me.Status='y' and  me.Hospital.Id= "
				+ hospitalId +" order by FirstName asc");*/
	
	 employeeList = session.createCriteria(MasEmployee.class).add(Restrictions.eq("Status", "y")).add(Restrictions.in("Id", getEmployeeIdDepartmentWise(session, deptId))).add(Restrictions.eq("Hospital.Id", hospitalId)).addOrder(Order.asc("FirstName")).list();
		
		/*masStoreAirForceDepotList = getHibernateTemplate().find(
		"from jkt.hms.masters.business.MasStoreAirForceDepot where Status='y'");
*/
	// masStoreAirForceDepotList = session.createCriteria(MasStoreAirForceDepot.class).add(Restrictions.eq("Status", "y")).add(Restrictions.ne("Id", deptId)).list();

		List<StoreInternalIndentM> storeInternalPendingIndentList = new ArrayList<StoreInternalIndentM>();

		storeInternalPendingIndentList = session
		.createCriteria(StoreInternalIndentM.class)
		.add(Restrictions.eq("Status", "o"))
		.createAlias("ToStore", "d")
		.add(Restrictions.eq("d.Id", deptId))
		.createAlias("Hospital", "h")
		.add(Restrictions.eq("h.Id", hospitalId)) // add by javed khan
		.addOrder(Order.desc("Id")).list();

		StoreSetup storeSetup = new StoreSetup();
		String max = "";
		String startNo = "";
		String no = "";
		String deptName = "";
		try {
			storeSetupList = session.createCriteria(StoreSetup.class).list();
			if (storeSetupList != null && storeSetupList.size() > 0) {
				storeSetup = (StoreSetup) storeSetupList.get(0);
			}
			// patientList=getHibernateTemplate().find("from
			// jkt.hms.masters.business.Patient as pt where pt.Status='y'");

			List<StoreIssueM> issueNoList = new ArrayList<StoreIssueM>();
			/*issueNoList = session.createCriteria(StoreIssueM.class)
					.setProjection(Projections.property("IssueNo")).list();*/
			
			/*issueNoList=getHibernateTemplate().find("from jkt.hms.masters.business.StoreIssueM as sim where sim.Hospital.Id = "
					+ hospitalId +
			" order by sim.Id desc"); */
			//issueNoList = session.createCriteria(StoreIssueM.class).add(Restrictions.eq("Hospital.Id", hospitalId)).addOrder(Order.asc("Id")).list();
			
			issueNoList = session.createCriteria(StoreIssueM.class).add(Restrictions.eq("Department.Id", deptId)).add(Restrictions.eq("Hospital.Id", hospitalId)).addOrder(Order.desc("Id")).list();
			
			// add by javed khan
			if (issueNoList.size() > 0) {
				StoreIssueM storeIssueM=new StoreIssueM();
				storeIssueM = (StoreIssueM) issueNoList.get(0);
				no=storeIssueM.getIssueNo();
				/*for (int i = 0; i < issueNoList.size(); i++) {
				}*/
			}
			
			System.out.println("no="+no);

			/*storeFyDocumentNoList = getHibernateTemplate()
					.find(
							"from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"
									+ deptId + "' ");*/
			// storeInternalIndentMList = getHibernateTemplate().find("from
			// jkt.hms.masters.business.StoreInternalIndentM as siim where
			// siim.Department.Id='"+storeSetup.getStoreDispensary().getId() +"'
			// and siim.Status='o' and siim.ToStore='"+deptId+"'");
			//comment by sanjay
			/*storeInternalIndentMList = getHibernateTemplate()
			.find(	"from jkt.hms.masters.business.StoreInternalIndentM as siim  where siim.Status='o' and siim.ToStore='"
					+ deptId + "' and siim.Hospital.Id = "
					+hospitalId+" order by siim.DemandNo desc");*/
			//Code by sanjay
			storeInternalIndentMList = session.createCriteria(StoreInternalIndentM.class).add(Restrictions.eq("Status", "o")).add(Restrictions.eq("ToStore.Id", deptId)).add(Restrictions.eq("Hospital.Id", hospitalId)).addOrder(Order.desc("DemandNo")).list();
			/*for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
				if (storeFyDocumentNo.getIssueDeptNo() != null) {
					no = ("" + storeFyDocumentNo.getIssueDeptNo());
				} else {
					no = "";
				}

			}*/
			//commented by SKY
			
			/*searchListForPopup = getHibernateTemplate()
			.find("from jkt.hms.masters.business.StoreIssueM sim where sim.Department.Id='"
					+ deptId
					+ "' and sim.Status='o' and sim.IssueType='i' and sim.Hospital.Id = " +hospitalId+" order by Id desc");*/
			MasDepartment masDepartment = departmentNameSendToJsp.get(0);
			deptName = masDepartment.getDepartmentName();


			Map<String, Object> mapDate = new HashMap<String, Object>();
			mapDate=HMSUtil.getCurrentDateAndTime();
			String currentDate="";
			if(mapDate.get("currentDate")!=null){
				currentDate=(String)mapDate.get("currentDate");
			}

			List<Object[]> storeInternalIndentPendingList = new ArrayList<Object[]>();
			String qry = "";
			/*qry = "select sim.id,sim.demand_no,sim.demand_date from store_internal_indent_m sim left join store_internal_indent_t sit on " +
			     " sim.id = sit.internal_id where sim.department_id="+deptId+
			     " and (sit.qty_request - isnull(sit.qty_issued,0)) > 0 group by sim.demand_no,sim.id,sim.demand_date order by sim.demand_date desc";
			 */
			qry = "select sim.id,sim.demand_no,sim.demand_date,dept_req.department_name as req_department,dept_reqBy.department_name as reqBy_department," +
			"(emp.first_name+' '+isnull(emp.middle_name,'')+' '+isnull(emp.last_name,'')) as requested_by from store_internal_indent_m sim left join store_internal_indent_t sit " +
			"on sim.id = sit.internal_id,mas_department dept_req,mas_department dept_reqBy,mas_employee  emp where emp.employee_id=sim.requested_by and dept_reqBy.department_id=sim.to_store " +
			"and dept_req.department_id=sim.department_id and sim.to_store=24 and sim.hospital_id = " +hospitalId
			+" and (sit.qty_request - isnull(sit.qty_issued,0)) > 0 group by sim.demand_no,sim.id,sim.demand_date,dept_req.department_name,dept_reqBy.department_name " +
			",emp.first_name,emp.middle_name,emp.last_name order by sim.demand_date desc";
			storeInternalIndentPendingList = session.createSQLQuery(qry).list();
			System.out.println("storeInternalIndentPendingList :"+storeInternalIndentPendingList.size());
			map.put("storeInternalIndentPendingList", storeInternalIndentPendingList);
			// searchListForPopup----"+searchListForPopup.size());
		} catch (Exception e) {
			e.printStackTrace();
		}
		String deptType="";
		if (dataMap.get("deptType") != null) {
			deptType = ("" + dataMap.get("deptType"));
		}
		try {
			//max = getMaxNo(no);
			Map<String, Object> maxMap=new HashMap<String, Object>();
			maxMap.put("no", no);
			maxMap.put("deptType", deptType);
			max =getMaxNoByDeptCode(maxMap);
		} catch (Exception e) {
			e.printStackTrace();
		}

		// added by javed khan for search CiV

		List storeIssueMList = new ArrayList();
	
		//comment BY SKY
		String searchQry="select sim.ID,sim.ISSUE_NO from Store_issue_m sim where sim.Department_id='"
			+deptId+"'"
			+ " and sim.ISSUE_TYPE='i' and sim.Hospital_id ='"
			+hospitalId+"'"
			+" order by sim.Id desc ";
		storeIssueMList=(List) session.createSQLQuery(searchQry).list();

		map.put("storeIssueMList", storeIssueMList);

		map.put("deptList", departmentNameSendToJsp);
		map.put("deptName", deptName);
		//List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();
		//	map.put("storeInternalIndentTList", storeInternalIndentTList);
		map.put("storeInternalIndentMList", storeInternalIndentMList);
		map.put("departmentList", departmentList);
		map.put("masStoreAirForceDepotList", masStoreAirForceDepotList);
		map.put("employeeList", employeeList);
		map.put("max", max);
		//map.put("masStoreBrandList", masStoreBrandList);
		map.put("searchListForPopup", searchListForPopup);
		//map.put("patientList", patientList);
		map.put("storeSetup", storeSetup);
		return map;
	}

	public Map showIssueDispensaryJspForRC(Map<String, Object> dataMap) {
		Session session = (Session) getSession();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));

		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("userName") != null) {
			userName = ("" + dataMap.get("userName"));
		}
		Map map = new HashMap();

		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasDepartment> departmentNameSendToJsp = new ArrayList<MasDepartment>();
		List<MasStoreAirForceDepot> masStoreAirForceDepotList = new ArrayList<MasStoreAirForceDepot>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<StoreIssueM> searchListForPopup = new ArrayList<StoreIssueM>();
		List<StoreSetup> storeSetupList = new ArrayList<StoreSetup>();
		//List<MasStoreBrand> masStoreBrandList = new ArrayList<MasStoreBrand>();
		//	List<Patient> patientList = new ArrayList<Patient>();

		/*departmentList = getHibernateTemplate().find(
		"from jkt.hms.masters.business.MasDepartment as md where md.Status='y' and  md.Hospital.Id= " +
		+ hospitalId +
		"order by md.DepartmentName asc");*/

		/*departmentList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.MasDepartment as md where md.Status='y'  "+
		"order by md.DepartmentName asc");
		System.out.println("beforeNamedQuery---------------->"+departmentList.size());*/
	Query q = session.createQuery("from jkt.hms.masters.business.MasDepartment as md where md.Status=? "+"order by md.DepartmentName asc");
	q.setParameter(0, "y");	
	 departmentList = q.list();	 
		
		/*departmentNameSendToJsp = getHibernateTemplate().find(
				"from jkt.hms.masters.business.MasDepartment as md where md.Id='"
				+ deptId + "' ");*/
	 departmentNameSendToJsp = session.createCriteria(MasDepartment.class).add(Restrictions.eq("Status", "y")).add(Restrictions.ne("Id", deptId)).list();
	 
		/*employeeList = getHibernateTemplate()
		.find("from jkt.hms.masters.business.MasEmployee as me where me.Status='y' and  me.Hospital.Id= "
				+ hospitalId +" order by FirstName asc");*/
	
	 employeeList = session.createCriteria(MasEmployee.class).add(Restrictions.eq("Status", "y")).add(Restrictions.in("Id", getEmployeeIdDepartmentWise(session, deptId))).add(Restrictions.eq("Hospital.Id", hospitalId)).addOrder(Order.asc("FirstName")).list();
		
		/*masStoreAirForceDepotList = getHibernateTemplate().find(
		"from jkt.hms.masters.business.MasStoreAirForceDepot where Status='y'");
*/
	// masStoreAirForceDepotList = session.createCriteria(MasStoreAirForceDepot.class).add(Restrictions.eq("Status", "y")).add(Restrictions.ne("Id", deptId)).list();

		List<StoreInternalIndentM> storeInternalPendingIndentList = new ArrayList<StoreInternalIndentM>();

		storeInternalPendingIndentList = session
		.createCriteria(StoreInternalIndentM.class)
		.add(Restrictions.eq("Status", "o"))
		.createAlias("ToStore", "d")
		.add(Restrictions.eq("d.Id", deptId))
		.createAlias("Hospital", "h")
		.add(Restrictions.eq("h.Id", hospitalId)) // add by javed khan
		.addOrder(Order.desc("Id")).list();

		StoreSetup storeSetup = new StoreSetup();
		String max = "";
		String startNo = "";
		String no = "";
		String deptName = "";
		try {
			storeSetupList = session.createCriteria(StoreSetup.class).list();
			if (storeSetupList != null && storeSetupList.size() > 0) {
				storeSetup = (StoreSetup) storeSetupList.get(0);
			}
			// patientList=getHibernateTemplate().find("from
			// jkt.hms.masters.business.Patient as pt where pt.Status='y'");

			List<StoreIssueM> issueNoList = new ArrayList<StoreIssueM>();
			/*issueNoList = session.createCriteria(StoreIssueM.class)
					.setProjection(Projections.property("IssueNo")).list();*/
			
			/*issueNoList=getHibernateTemplate().find("from jkt.hms.masters.business.StoreIssueM as sim where sim.Hospital.Id = "
					+ hospitalId +
			" order by sim.Id desc"); */
			//issueNoList = session.createCriteria(StoreIssueM.class).add(Restrictions.eq("Hospital.Id", hospitalId)).addOrder(Order.asc("Id")).list();
			
			issueNoList = session.createCriteria(StoreIssueM.class).add(Restrictions.eq("Department.Id", deptId)).add(Restrictions.eq("Hospital.Id", hospitalId)).addOrder(Order.desc("Id")).list();
			
			// add by javed khan
			if (issueNoList.size() > 0) {
				StoreIssueM storeIssueM=new StoreIssueM();
				storeIssueM = (StoreIssueM) issueNoList.get(0);
				no=storeIssueM.getIssueNo();
				/*for (int i = 0; i < issueNoList.size(); i++) {
				}*/
			}
			
			System.out.println("no="+no);

			/*storeFyDocumentNoList = getHibernateTemplate()
					.find(
							"from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"
									+ deptId + "' ");*/
			// storeInternalIndentMList = getHibernateTemplate().find("from
			// jkt.hms.masters.business.StoreInternalIndentM as siim where
			// siim.Department.Id='"+storeSetup.getStoreDispensary().getId() +"'
			// and siim.Status='o' and siim.ToStore='"+deptId+"'");
			//comment by sanjay
			/*storeInternalIndentMList = getHibernateTemplate()
			.find(	"from jkt.hms.masters.business.StoreInternalIndentM as siim  where siim.Status='o' and siim.ToStore='"
					+ deptId + "' and siim.Hospital.Id = "
					+hospitalId+" order by siim.DemandNo desc");*/
			//Code by sanjay
			storeInternalIndentMList = session.createCriteria(StoreInternalIndentM.class).add(Restrictions.eq("Status", "o")).add(Restrictions.eq("ToStore.Id", deptId)).add(Restrictions.eq("Hospital.Id", hospitalId)).addOrder(Order.desc("DemandNo")).list();
			/*for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
				if (storeFyDocumentNo.getIssueDeptNo() != null) {
					no = ("" + storeFyDocumentNo.getIssueDeptNo());
				} else {
					no = "";
				}

			}*/
			//commented by SKY
			
			/*searchListForPopup = getHibernateTemplate()
			.find("from jkt.hms.masters.business.StoreIssueM sim where sim.Department.Id='"
					+ deptId
					+ "' and sim.Status='o' and sim.IssueType='i' and sim.Hospital.Id = " +hospitalId+" order by Id desc");*/
			MasDepartment masDepartment = departmentNameSendToJsp.get(0);
			deptName = masDepartment.getDepartmentName();


			Map<String, Object> mapDate = new HashMap<String, Object>();
			mapDate=HMSUtil.getCurrentDateAndTime();
			String currentDate="";
			if(mapDate.get("currentDate")!=null){
				currentDate=(String)mapDate.get("currentDate");
			}

			List<Object[]> storeInternalIndentPendingList = new ArrayList<Object[]>();
			String qry = "";
			/*qry = "select sim.id,sim.demand_no,sim.demand_date from store_internal_indent_m sim left join store_internal_indent_t sit on " +
			     " sim.id = sit.internal_id where sim.department_id="+deptId+
			     " and (sit.qty_request - isnull(sit.qty_issued,0)) > 0 group by sim.demand_no,sim.id,sim.demand_date order by sim.demand_date desc";
			 */
			qry = "select sim.id,sim.demand_no,sim.demand_date,dept_req.department_name as req_department,dept_reqBy.department_name as reqBy_department," +
			"(emp.first_name+' '+isnull(emp.middle_name,'')+' '+isnull(emp.last_name,'')) as requested_by from store_internal_indent_m sim left join store_internal_indent_t sit " +
			"on sim.id = sit.internal_id,mas_department dept_req,mas_department dept_reqBy,mas_employee  emp where emp.employee_id=sim.requested_by and dept_reqBy.department_id=sim.to_store " +
			"and dept_req.department_id=sim.department_id and sim.to_store=24 and sim.hospital_id = " +hospitalId
			+" and (sit.qty_request - isnull(sit.qty_issued,0)) > 0 group by sim.demand_no,sim.id,sim.demand_date,dept_req.department_name,dept_reqBy.department_name " +
			",emp.first_name,emp.middle_name,emp.last_name order by sim.demand_date desc";
			storeInternalIndentPendingList = session.createSQLQuery(qry).list();
			System.out.println("storeInternalIndentPendingList :"+storeInternalIndentPendingList.size());
			map.put("storeInternalIndentPendingList", storeInternalIndentPendingList);
			// searchListForPopup----"+searchListForPopup.size());
		} catch (Exception e) {
			e.printStackTrace();
		}
		String deptType="";
		if (dataMap.get("deptType") != null) {
			deptType = ("" + dataMap.get("deptType"));
		}
		try {
			//max = getMaxNo(no);
			Map<String, Object> maxMap=new HashMap<String, Object>();
			maxMap.put("no", no);
			maxMap.put("deptType", deptType);
			max =getMaxNoByDeptCode(maxMap);
		} catch (Exception e) {
			e.printStackTrace();
		}

		// added by javed khan for search CiV

		List storeIssueMList = new ArrayList();
	
		//comment BY SKY
		String searchQry="select sim.ID,sim.ISSUE_NO from Store_issue_m sim where sim.Department_id='"
			+deptId+"'"
			+ " and sim.ISSUE_TYPE='i' and sim.Hospital_id ='"
			+hospitalId+"'"
			+" order by sim.Id desc ";
		storeIssueMList=(List) session.createSQLQuery(searchQry).list();

		map.put("storeIssueMList", storeIssueMList);

		map.put("deptList", departmentNameSendToJsp);
		map.put("deptName", deptName);
		//List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();
		//	map.put("storeInternalIndentTList", storeInternalIndentTList);
		map.put("storeInternalIndentMList", storeInternalIndentMList);
		map.put("departmentList", departmentList);
		map.put("masStoreAirForceDepotList", masStoreAirForceDepotList);
		map.put("employeeList", employeeList);
		map.put("max", max);
		//map.put("masStoreBrandList", masStoreBrandList);
		map.put("searchListForPopup", searchListForPopup);
		//map.put("patientList", patientList);
		map.put("storeSetup", storeSetup);
		return map;
	}
	
	public Map<String, Object> getDemandListForRC(Map dataMap) {

		int dispenceryId = 0;
		Map<String, Object> map = new HashMap<String, Object>();
		/*List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();*/
		List<Object[]> storeInternalIndentMList = new ArrayList<Object[]>();
		List<MasDepartment> departmentNameSendToJsp = new ArrayList<MasDepartment>();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		String deptName = "";
		session = getSession();
		try {
			if (dataMap.get("deptId") != null) {
				deptId = Integer.parseInt("" + dataMap.get("deptId"));
			}
			if (dataMap.get("hospitalId") != null) {
				hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
			}
			if (dataMap.get("userName") != null) {
				userName = ("" + dataMap.get("userName"));
			}
			if (dataMap.get("dispenceryId") != null) {
				dispenceryId = Integer.parseInt(""+ dataMap.get("dispenceryId"));
			}
			List<StoreIssueM> searchListForPopup = new ArrayList<StoreIssueM>();
			// add javed khan
			searchListForPopup = getHibernateTemplate()
			.find("from jkt.hms.masters.business.StoreIssueM sim where sim.Department.Id='"
					+ deptId+ "' and sim.Hospital.Id= '"+ hospitalId+ "' and sim.Status='o' and sim.IssueType='i'  order by Id desc");
			departmentNameSendToJsp = getHibernateTemplate().find("from jkt.hms.masters.business.MasDepartment as md where md.Status='y' ");
			map.put("searchListForPopup", searchListForPopup);
			/**
			 * Commented By Ritu
			 *
			 */
			/* storeInternalIndentMList = getHibernateTemplate()
		     .find("from jkt.hms.masters.business.StoreInternalIndentM as siim  where siim.Department.Id='"
		       + dispenceryId
		       + "' and siim.Status='o' and siim.ToStore='"
		       + deptId + "'");*/
			/**
			 * Added By Ritu for multiple issue of a indent
			 */
			/*String previousDate=HMSUtil.getPrevDate(Integer.parseInt(properties.getProperty("store.pending_from_last_days")));
			Map<String, Object> mapDate = new HashMap<String, Object>();
			mapDate=HMSUtil.getCurrentDateAndTime();
			String currentDate="";
			if(mapDate.get("currentDate")!=null){
				currentDate=(String)mapDate.get("currentDate");
			}*/
			String qry = "";
			// add javed khan

			// comment by javed for addExistingIndent

			/* qry = "select sim.id,sim.demand_no,sim.demand_date from store_internal_indent_m sim left join store_internal_indent_t sit on " +
		     " sim.id = sit.internal_id where sim.department_id="+dispenceryId+
		     " and sim.to_store="+deptId+" and sim.HOSPITAL_ID="+hospitalId+" and (sit.qty_request - nvl(sit.qty_issued,0)) > 0 group by sim.demand_no,sim.id,sim.demand_date order by sim.id desc";*/

			//and sim.Status!='o' and (sit.qty_request - isnull(sit.qty_issued,0)) > 0

			qry = "select rh.id,rh.rc_no,rh.last_chg_date from rc_header rh left join rc_details rd on " +
			" rh.id = rd.header_id where rh.department_id="+dispenceryId+
			" and rh.to_store="+deptId+" and rh.HOSPITAL_ID="+hospitalId+" and rh.Status='o'  group by rh.rc_no,rh.id,rh.last_chg_date order by rh.id desc";
			storeInternalIndentMList = session.createSQLQuery(qry).list();
			//System.out.println(dispenceryId+"====="+deptId +"====="+storeInternalIndentMList.size());
			List<Object[]> storeInternalIndentPendingList = new ArrayList<Object[]>();
			String qryPending = "";
			/*
		   qryPending = "select sim.id,sim.demand_no,sim.demand_date,dept_req.department_name as req_department,dept_reqBy.department_name as reqBy_department"+
		// "(emp.first_name+' '+nvl(emp.middle_name,'')+' '+nvl(emp.last_name,'')) as requested_by"+
		   " from store_internal_indent_m sim left join store_internal_indent_t sit on sim.id = sit.internal_id,mas_department dept_req,mas_department dept_reqBy,mas_employee as emp where emp.employee_id=sim.requested_by and dept_reqBy.department_id=sim.to_store and dept_req.department_id=sim.department_id and sim.to_store="+deptId+
		    " and (sit.qty_request - nvl(sit.qty_issued,0)) > 0 group by sim.demand_no,sim.id,sim.demand_date,dept_req.department_name,dept_reqBy.department_name ";(mas_store_supplier.local_address1|| mas_store_supplier.local_address2|| mas_store_supplier.local_city) as address,
			 */
			/*//FOR Multiple Time Issue Until Demanded Quantity ==0 
			qryPending = "select sim.id,sim.demand_no,sim.demand_date,dept_req.department_name as req_department,dept_reqBy.department_name as reqBy_department,emp.first_name+' '+ emp.last_name as requested_by,emp.EMPLOYEE_ID  from store_internal_indent_m sim left join store_internal_indent_t sit on sim.id = sit.internal_id,mas_department dept_req,mas_department dept_reqBy,mas_employee  emp where emp.employee_id=sim.requested_by and dept_reqBy.department_id=sim.to_store and dept_req.department_id=sim.department_id and sim.to_store="+deptId+" and (sit.qty_request - isnull(sit.qty_issued,0)) > 0 group by sim.demand_no,sim.demand_date,sim.demand_date,sim.id,dept_req.department_name,dept_reqBy.department_name,emp.first_name,emp.last_name,emp.EMPLOYEE_ID";
			*/
			qryPending = "select sim.id,sim.demand_no,sim.demand_date,dept_req.department_name as req_department,dept_reqBy.department_name as reqBy_department,emp.first_name+' '+ emp.last_name as requested_by,emp.EMPLOYEE_ID  from store_internal_indent_m sim left join store_internal_indent_t sit on sim.id = sit.internal_id,mas_department dept_req,mas_department dept_reqBy,mas_employee  emp "
					+ "where emp.employee_id=sim.requested_by and dept_reqBy.department_id=sim.to_store and dept_req.department_id=sim.department_id and sim.to_store="+deptId+" and sim.status='o' group by sim.demand_no,sim.demand_date,sim.demand_date,sim.id,dept_req.department_name,dept_reqBy.department_name,emp.first_name,emp.last_name,emp.EMPLOYEE_ID";
			storeInternalIndentPendingList = session.createSQLQuery(qryPending).list();
			//System.out.println("Indent: ..>"+storeInternalIndentPendingList.size());
			map.put("storeInternalIndentPendingList", storeInternalIndentPendingList);
			List<MasEmployee> employeeDeptByList = new ArrayList<MasEmployee>();
			// add javed khan
			employeeDeptByList=getHibernateTemplate()
			.find("from jkt.hms.masters.business.MasEmployee as emp where  emp.Department.Id="+deptId+" and emp.Hospital.Id="+hospitalId+" and emp.Status='y' order by emp.FirstName asc");
			map.put("employeeDeptByList", employeeDeptByList);
//			MasDepartment masDepartment = departmentNameSendToJsp.get(0);
//			deptName = masDepartment.getDepartmentName();
			System.out.println("storeInternalIndentMList: ..>"+storeInternalIndentMList.size());
			map.put("storeInternalIndentMList", storeInternalIndentMList);
			map.put("deptName", deptName);
			map.put("deptList", departmentNameSendToJsp);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

		/*int dispenceryId = 0;
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		List<MasDepartment> departmentNameSendToJsp = new ArrayList<MasDepartment>();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		String deptName = "";

		try {
			if (dataMap.get("deptId") != null)
				deptId = Integer.parseInt("" + dataMap.get("deptId"));
			if (dataMap.get("hospitalId") != null)
				hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
			if (dataMap.get("userName") != null)
				userName = ("" + dataMap.get("userName"));
			if (dataMap.get("dispenceryId") != null) {
				dispenceryId = Integer.parseInt(""
						+ dataMap.get("dispenceryId"));
			}

			departmentNameSendToJsp = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasDepartment as md where md.Id='"
							+ deptId + "'");
			storeInternalIndentMList = getHibernateTemplate()
					.find(
							"from jkt.hms.masters.business.StoreInternalIndentM as siim  where siim.Department.Id='"
									+ dispenceryId
									+ "' and siim.Status='o' and siim.ToStore='"
									+ deptId + "'");

			MasDepartment masDepartment;
			try {
				masDepartment = departmentNameSendToJsp.get(0);
				deptName = masDepartment.getDepartmentName();
				map.put("storeInternalIndentMList", storeInternalIndentMList);
				map.put("deptName", deptName);
			} catch (Exception e) {
				e.printStackTrace();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;*/
	}

	public Map<String, Object> getDemandList(Map dataMap) {

		int dispenceryId = 0;
		Map<String, Object> map = new HashMap<String, Object>();
		/*List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();*/
		List<Object[]> storeInternalIndentMList = new ArrayList<Object[]>();
		List<MasDepartment> departmentNameSendToJsp = new ArrayList<MasDepartment>();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		String deptName = "";
		session = getSession();
		try {
			if (dataMap.get("deptId") != null) {
				deptId = Integer.parseInt("" + dataMap.get("deptId"));
			}
			if (dataMap.get("hospitalId") != null) {
				hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
			}
			if (dataMap.get("userName") != null) {
				userName = ("" + dataMap.get("userName"));
			}
			if (dataMap.get("dispenceryId") != null) {
				dispenceryId = Integer.parseInt(""+ dataMap.get("dispenceryId"));
			}
			List<StoreIssueM> searchListForPopup = new ArrayList<StoreIssueM>();
			// add javed khan
			searchListForPopup = getHibernateTemplate()
			.find("from jkt.hms.masters.business.StoreIssueM sim where sim.Department.Id='"
					+ deptId+ "' and sim.Hospital.Id= '"+ hospitalId+ "' and sim.Status='o' and sim.IssueType='i'  order by Id desc");
			departmentNameSendToJsp = getHibernateTemplate().find("from jkt.hms.masters.business.MasDepartment as md where md.Status='y' ");
			map.put("searchListForPopup", searchListForPopup);
		
			String qry = "";
		

			qry = "select sim.id,sim.demand_no,sim.demand_date from store_internal_indent_m sim left join store_internal_indent_t sit on " +
			" sim.id = sit.internal_id where sim.department_id="+dispenceryId+
			" and sim.to_store="+deptId+" and sim.HOSPITAL_ID="+hospitalId+" and sim.Status='o'  group by sim.demand_no,sim.id,sim.demand_date order by sim.id desc";
			storeInternalIndentMList = session.createSQLQuery(qry).list();
			//System.out.println(dispenceryId+"====="+deptId +"====="+storeInternalIndentMList.size());
			List<Object[]> storeInternalIndentPendingList = new ArrayList<Object[]>();
			String qryPending = "";
		
			map.put("storeInternalIndentPendingList", storeInternalIndentPendingList);
			List<MasEmployee> employeeDeptByList = new ArrayList<MasEmployee>();
		
			System.out.println("storeInternalIndentMList: ..>"+storeInternalIndentMList.size());
			map.put("storeInternalIndentMList", storeInternalIndentMList);
			map.put("deptName", deptName);
			map.put("deptList", departmentNameSendToJsp);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	
	}
	
	public Map<String, Object> getDemandListPartial(Map dataMap) {

		int dispenceryId = 0;
		Map<String, Object> map = new HashMap<String, Object>();
		/*List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();*/
		List<Object[]> storeInternalIndentMList = new ArrayList<Object[]>();
		List<MasDepartment> departmentNameSendToJsp = new ArrayList<MasDepartment>();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		String deptName = "";
		session = getSession();
		try {
			if (dataMap.get("deptId") != null) {
				deptId = Integer.parseInt("" + dataMap.get("deptId"));
			}
			if (dataMap.get("hospitalId") != null) {
				hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
			}
			if (dataMap.get("userName") != null) {
				userName = ("" + dataMap.get("userName"));
			}
			if (dataMap.get("dispenceryId") != null) {
				dispenceryId = Integer.parseInt(""+ dataMap.get("dispenceryId"));
			}
			List<StoreIssueM> searchListForPopup = new ArrayList<StoreIssueM>();
			// add javed khan
			searchListForPopup = getHibernateTemplate()
			.find("from jkt.hms.masters.business.StoreIssueM sim where sim.Department.Id='"
					+ deptId+ "' and sim.Hospital.Id= '"+ hospitalId+ "' and sim.Status='o' and sim.IssueType='i'  order by Id desc");
			departmentNameSendToJsp = getHibernateTemplate().find("from jkt.hms.masters.business.MasDepartment as md where md.Status='y' ");
			map.put("searchListForPopup", searchListForPopup);
		
			String qry = "";
		

			qry = "select sim.id,sim.demand_no,sim.demand_date from store_internal_indent_m sim left join store_internal_indent_t sit on " +
			" sim.id = sit.internal_id where sim.department_id="+dispenceryId+
			" and sim.to_store="+deptId+" and sim.HOSPITAL_ID="+hospitalId+" and sim.Status='w'  group by sim.demand_no,sim.id,sim.demand_date order by sim.id desc";
			storeInternalIndentMList = session.createSQLQuery(qry).list();
			//System.out.println(dispenceryId+"====="+deptId +"====="+storeInternalIndentMList.size());
			List<Object[]> storeInternalIndentPendingList = new ArrayList<Object[]>();
			String qryPending = "";
		
			map.put("storeInternalIndentPendingList", storeInternalIndentPendingList);
			List<MasEmployee> employeeDeptByList = new ArrayList<MasEmployee>();
	
			System.out.println("storeInternalIndentMList: ..>"+storeInternalIndentMList.size());
			map.put("storeInternalIndentMList", storeInternalIndentMList);
			map.put("deptName", deptName);
			map.put("deptList", departmentNameSendToJsp);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	
	}

	// ---- method for searching Issue CIV-----------------------
	@SuppressWarnings("unchecked")
	public Map searchIssueCiv(Box box) {
		int issueId = 0;
		int deptId = 0;
		String deptName = "";
		List<StoreIssueM> searchListForPopup = new ArrayList<StoreIssueM>();
		List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		List<MasDepartment> departmentNameSendToJsp = new ArrayList<MasDepartment>();
		Map<String, Object> pageMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		StoreIssueM issueM = new StoreIssueM();
		List<StoreIssueM> list = new ArrayList<StoreIssueM>();
		List<StoreIssueT> loanList = new ArrayList<StoreIssueT>(); // add javed khan
		deptId = Integer.parseInt("" + box.get("deptId"));
		session = (Session) getSession();
		Transaction tx = null;
		int pageNo = 1;
		String issued = "n";
		if (box.get("parent") != null) {
			issueId = Integer.parseInt(box.get("parent"));
			// civ---------"+issueId);
		}
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		list = hbt
		.find("from jkt.hms.masters.business.StoreIssueM as sim where sim.Id = '"
				+ issueId + "'");
		String date11 = "";
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		date11 = (String) utilMap.get("currentDate");
		try {
			// --------------Transaction Started----------
			tx = session.beginTransaction();

			for (StoreIssueM storeIssueM : list) {
				box.put("issueNo", storeIssueM.getIssueNo());
				try {
					SimpleDateFormat formatterOut = new SimpleDateFormat("dd/MM/yyyy");
					String date4MySQL = formatterOut.format(storeIssueM.getIssueDate());
					String requestedDate4MySQL = formatterOut.format(storeIssueM.getRequestDate());
					box.put("requestDate", requestedDate4MySQL);
					box.put("issueDate", date4MySQL);
				} catch (Exception e) {
					box.put("issueDate", date11);
					box.put("requestDate", date11);
					e.printStackTrace();
				}
				if (storeIssueM.getDocNo() != null)
					box.put("reference", storeIssueM.getDocNo());

				box.put("departmentIdTemp", storeIssueM.getToStore().getId());

				if (storeIssueM.getRequestBy() != null)
					box.put("requestBy", storeIssueM.getRequestBy().getId());

				if (storeIssueM.getApprovedBy() != null)
					box.put("approvedBy", storeIssueM.getApprovedBy().getId());

				if (storeIssueM.getIssuedBy() != null)
					box.put("issuedBy", storeIssueM.getIssuedBy().getId());

				box.put("requestNo", storeIssueM.getRequestNo().getId());
				box.put("indentNo", storeIssueM.getRequestNo().getDemandNo());
				departmentNameSendToJsp = getHibernateTemplate().find(
						"from jkt.hms.masters.business.MasDepartment as md where md.Id='"
						+ deptId + "'");
				storeInternalIndentMList = getHibernateTemplate()
				.find(
						"from jkt.hms.masters.business.StoreInternalIndentM as siim  where    siim.ToStore='"
						+ deptId + "'");
				MasDepartment masDepartment = departmentNameSendToJsp.get(0);
				deptName = masDepartment.getDepartmentName();
				box.put("deptName", deptName);

				// add javed khan
				loanList = session.createCriteria(StoreIssueT.class).add(Restrictions.eq("CivLoan", "Loan"))
				.add(Restrictions.eq("IssueM.Id", issueId)).list();

				// --------------Transaction Ended----------
				tx.commit();

			}
		} catch (Exception e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();
		}
		pageMap.put("issueId", issueId);
		pageMap.put("pageNo", pageNo);
		pageMap.put("deptId", deptId);
		pageMap.put("hospitalId", box.getInt("hospitalId"));
		//map = getIssueDetailPageByPage(pageMap);
		map = getIssueDetailPageByPage1(pageMap);
		map.put("box", box);
		map.put("storeInternalIndentMList", storeInternalIndentMList);
		map.put("loanList", loanList);// add javed khan

		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getIssueDetailPageByPage(Map<String, Object> pageMap) {
		List<StoreIssueM> searchListForPopup = new ArrayList<StoreIssueM>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		// List<StoreIssueT> issueTList=new ArrayList<StoreIssueT>();
		List<StoreIssueT> loanList = new ArrayList<StoreIssueT>(); // javed khan
		List issueTList = new ArrayList();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<StoreSetup> storeSetupList = new ArrayList<StoreSetup>();
		List stockAvailableList = new ArrayList();
		List loanOutList = new ArrayList();
		StoreSetup storeSetup = new StoreSetup();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		SimpleDateFormat formatterIn1 = new SimpleDateFormat("dd/MM/yyyy");
		SimpleDateFormat formatterOut1 = new SimpleDateFormat("yyyy-MM-dd");
		Map mapbatch = new HashMap(); // add javed for modify civ
		int issueId = 0;
		int pageNo = 1;
		String issued = "n";
		int deptId = 0;
		deptId = Integer.parseInt("" + pageMap.get("deptId"));
		HibernateTemplate hbt = getHibernateTemplate();
		session = (Session) getSession();
		session.flush();

		if (pageMap.get("pageNo") != null) {
			pageNo = Integer.parseInt("" + pageMap.get("pageNo"));
		}

		int firstResult = 0;
		int maxResults = 20;

		if (pageNo != 1) {
			firstResult = firstResult + (pageNo - 1) * 20;
		}

		try {
			String date4MySQL = formatterOut1.format(formatterIn1.parse(date));
			Date datestr = java.sql.Date.valueOf(date4MySQL);
			SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
			String issueDate=sdf.format(datestr);
			//Date issueDate=dateFormatterDDMMYYYY.parse(dateate);
			if (pageMap.get("issueId") != null) {
				issueId = Integer.parseInt("" + pageMap.get("issueId"));
			}

			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			storeSetupList = session.createCriteria(StoreSetup.class).list();
			if (storeSetupList != null && storeSetupList.size() > 0) {
				storeSetup = (StoreSetup) storeSetupList.get(0);
			}

			// Hibernate Pagination
			String pvmsSearch = "";
			String query="";
			if (pageMap.get("pvmsSearch") != null
					&& !((String) pageMap.get("pvmsSearch")).equals(""))
			{
				pvmsSearch = "%" + (String) pageMap.get("pvmsSearch") + "%";
				map.put("pvmsNo1", pvmsSearch);
				// String query = " select b.item_id, i.pvms_no, i.nomenclature,
				// d.unit_name,a.department_id, a.id, b.id, max(b.qty_request),
				// sum(b.qty_issued) from store_issue_m a, store_issue_t
				// b,mas_store_item i, mas_store_item_conversion c,
				// mas_store_unit d where i.item_conversion_id =
				// c.item_conversion_id and c.purchase_unit_id = d.unit_id and
				// b.item_id=i.item_id and a.id = b.issue_m_id and b.issue_m_id
				// = " + issueId + " and (i.pvms_no like '" + pvmsSearch + "' or
				// i.nomenclature like '" + pvmsSearch + "') group by
				// b.item_id";
				// add b.CIV_LOAN by javed khan
				query = " select b.item_id, i.pvms_no, i.nomenclature, d.unit_name,a.department_id, a.id as id1,   b.id, max(b.qty_request), sum(b.qty_issued),i.BRANDED_GENERIC,b.BATCH_NO,b.CIV_LOAN from store_issue_m a, store_issue_t b,mas_store_item i, mas_store_item_conversion c, mas_store_unit d " +
				"where i.item_conversion_id = c.item_conversion_id and c.purchase_unit_id = d.unit_id and b.item_id=i.item_id and a.id = b.issue_m_id and b.issue_m_id = "
				+ issueId
				+ " and i.pvms_no like '"
				+ pvmsSearch
				+ "' group by b.item_id, i.pvms_no, i.nomenclature, d.unit_name,a.department_id, a.id,   b.id ,i.BRANDED_GENERIC,b.BATCH_NO, b.CIV_LOAN";
				issueTList = session.createSQLQuery(query).setFirstResult(firstResult).setMaxResults(maxResults).list();
			}
			else
			{
				// add b.CIV_LOAN by javed khan
				query = "select b.item_id, i.pvms_no, i.nomenclature, d.unit_name,a.department_id, a.id as id1,   b.id , b.expiry_date, max(b.qty_request), sum(b.qty_issued),i.BRANDED_GENERIC,b.BATCH_NO, b.CIV_LOAN  from store_issue_m a, store_issue_t b,mas_store_item i, mas_store_item_conversion c, mas_store_unit d where i.item_conversion_id = c.item_conversion_id and c.purchase_unit_id = d.unit_id  and b.item_id=i.item_id and a.id = b.issue_m_id and b.issue_m_id  = "
					+ issueId + " group by b.item_id, i.pvms_no, i.nomenclature, d.unit_name,a.department_id, a.id,   b.id, b.expiry_date,i.BRANDED_GENERIC,b.BATCH_NO ,b.CIV_LOAN";
				issueTList = session.createSQLQuery(query).setFirstResult(firstResult).setMaxResults(maxResults).list();


			}
			employeeList = session.createCriteria(MasEmployee.class).list();
			departmentList = session.createCriteria(MasDepartment.class).list();


			// javed for batch by issue
			List BatchList = new ArrayList();

			for(int k=0; k<issueTList.size();k++){
				Object[] object=(Object[])issueTList.get(k);
				String query123="select sibs.BATCH_NO from store_item_batch_stock sibs where sibs.ITEM_ID="+object[0]+"and sibs.EXPIRY_DATE> '"+issueDate+"' and sibs.CLOSING_STOCK>0 and sibs.DEPARTMENT_ID="+deptId+" group by sibs.BATCH_NO";
				BatchList=session.createSQLQuery(query123).list();
				mapbatch.put(object[0],BatchList);

			}


			if (pageMap.get("issue_type") != null
					&& pageMap.get("issue_type").toString().equals("l")) {
				searchListForPopup = session.createCriteria(StoreIssueM.class)
				.add(Restrictions.eq("Department.Id", deptId)).add(
						Restrictions.eq("Status", "o")).add(
								Restrictions.eq("IssueType", "l")).list();
			} else {
				searchListForPopup = session.createCriteria(StoreIssueM.class)
				.add(Restrictions.eq("Department.Id", deptId)).add(
						Restrictions.eq("IssueType", "i")).list();
			}
			// Get Loan Out Details
			List stockList = new ArrayList();
			List loanOutQtyList = new ArrayList();
			List objectList = new ArrayList();

			for (Iterator iterator = issueTList.iterator(); iterator.hasNext();) {
				Object[] object = (Object[]) iterator.next();
				String str = "";
				if (pageMap.get("issue_type") != null
						&& pageMap.get("issue_type").toString().equals("l")) {
					str = "select sum(b.qty_issued) from store_issue_m a, store_issue_t b,mas_store_item i where b.item_id=i.item_id and a.id = b.issue_m_id and a.status='o' and  a.issue_type='l' and b.item_order=2 and b.item_issued = '"
						+ object[0] + "' order by i.pvms_no ";
				} else {
					str = "select sum(b.qty_issued) from store_issue_m a, store_issue_t b,mas_store_item i where b.item_id=i.item_id and a.id = b.issue_m_id and a.status='o' and  a.issue_type='i' and b.item_order=2 and b.item_issued = '"
						+ object[0] + "' order by i.pvms_no ";
				}
				objectList = session.createSQLQuery(str).list();
				if (objectList.get(0) != null)
					map.put(object[0].toString(), objectList.get(0).toString());
				else
					map.put(object[0].toString(), "0");

				int itemId = Integer.parseInt(object[0].toString());
				int departmentId = Integer.parseInt(object[4].toString());
				int issueMId = Integer.parseInt(object[5].toString());

				BigDecimal stock = null;
				BigDecimal loanOutQty = null;
				String str3 = "select sum(nvl(a.closing_stock,0)) from store_item_batch_stock a,mas_store_item i " +
				" where a.item_id=i.item_id and a.item_id = '"
				+ itemId
				+ "' and a.department_id='"
				+ departmentId
				+ "' and a.expiry_date > '"
				+ issueDate
				+ "' group by a.item_id ";

				stockAvailableList = session.createSQLQuery(str3).list();

				String str1 = "select sum(a.qty_issued) from store_issue_t a,mas_store_item i " +
				"where a.item_id=i.item_id and a.item_id = '"
				+ itemId
				+ "' and a.issue_m_id='"
				+ issueMId
				+ "' and a.item_order='"
				+ 2
				+ "' group by a.item_id";

				loanOutList = session.createSQLQuery(str1).list();

				if (stockAvailableList.size() > 0
						&& stockAvailableList.get(0) != null) {
					stock = (BigDecimal) stockAvailableList.get(0);
				} else {
					stock = new BigDecimal("0");
				}

				if (loanOutList.size() > 0 && loanOutList.get(0) != null) {
					loanOutQty = (BigDecimal) loanOutList.get(0);
				} else {
					loanOutQty = new BigDecimal("0");
				}
				stockList.add(stock);
				loanOutQtyList.add(loanOutQty);
			}
			// for complete stock list

			int totalPages = 0;
			double totalPage = 0.0;
			if (pageMap.get("pvmsSearch") != null
					&& !((String) pageMap.get("pvmsSearch")).equals("")) {

				String str1 = "select count(*) from store_issue_t a,store_issue_m b,mas_store_item i  where a.item_id=i.item_id and  a.issue_m_id=b.id and a.issue_m_id='"
					+ issueId
					+ "' and i.pvms_no like '"
					+ pvmsSearch
					+ "'	";
				List countList = session.createSQLQuery(str1).list();
				if (countList != null && countList.size() > 0) {
					totalPage = (double) countList.size() / (double) 20;
					Double d = new Double(Math.ceil(totalPage));
					totalPages = d.intValue();
				}
			} else {
				String str1 = "select count(*) from store_issue_t a,store_issue_m b  where a.issue_m_id=b.id and a.issue_m_id='"
					+ issueId + "' group by a.item_id";
				List countList = session.createSQLQuery(str1).list();
				if (countList != null && countList.size() > 0) {
					totalPage = (double) countList.size() / (double) 20;
					Double d = new Double(Math.ceil(totalPage));
					totalPages = d.intValue();
				}
			}

			/*
			 * Map<String,Object> utilMap = new HashMap<String,Object>();
			 * utilMap = (Map)HMSUtil.getCurrentDateAndTime(); String date11 =
			 * (String)utilMap.get("currentDate");
			 */
			try {

				List<StoreIssueM> storeIssueMList1 = new ArrayList<StoreIssueM>();
				storeIssueMList1 = session.createCriteria(StoreIssueM.class)
				.add(Restrictions.eq("Id", issueId)).list();
				StoreIssueM storeIssueM = new StoreIssueM();
				String issueMStatus = "";
				if (storeIssueMList1.size() > 0 && storeIssueMList1 != null) {
					storeIssueM = storeIssueMList1.get(0);
					issueMStatus = storeIssueM.getStatus();
					map.put("issueMStatus", issueMStatus);
					map.put("departmentIdTemp", storeIssueM.getToStore()
							.getId());

				}
				SimpleDateFormat formatterIn = new SimpleDateFormat(
				"yyyy-MM-dd");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
				"dd/MM/yyyy");

				if (storeIssueM.getIssueDate() != null) {
					String date4MySQL1 = formatterOut.format(storeIssueM
							.getIssueDate());
					map.put("issueDate", date4MySQL1);
				} else {
					map.put("requestDate", date);
				}

				if (storeIssueM.getRequestDate() != null) {
					String requestedDate4MySQL = formatterOut
					.format(storeIssueM.getRequestDate());
					map.put("requestDate", requestedDate4MySQL);
				} else
					map.put("requestDate", date);

				List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
				storeInternalIndentMList = session.createCriteria(
						StoreInternalIndentM.class).add(
								Restrictions.eq("ToStore.Id", deptId)).list();

				if (storeInternalIndentMList != null
						&& storeInternalIndentMList.size() > 0) {
					map.put("storeInternalIndentMList",
							storeInternalIndentMList);
					if (storeIssueM.getRequestNo() != null)
						map
						.put("requestNo", storeIssueM.getRequestNo()
								.getId());
				}

				loanList = session.createCriteria(StoreIssueT.class).add(Restrictions.eq("CivLoan", "Loan"))
				.add(Restrictions.eq("IssueM.Id", issueId)).list();
			} catch (Exception e) {
				map.put("issueDate", date);
				map.put("requestDate", date);
				e.printStackTrace();
			}

			map.put("stockList", stockList);
			map.put("totalPages", totalPages);
			map.put("loanOutQtyList", loanOutQtyList);
			session.flush();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("mapbatch",mapbatch);// add javed for modify civ
		map.put("searchListForPopup", searchListForPopup);
		map.put("issueTList", issueTList);
		map.put("departmentList", departmentList);
		map.put("employeeList", employeeList);
		map.put("issueId", issueId);
		map.put("storeSetup", storeSetup);
		map.put("loanList", loanList);// add javed khan

		return map;
	}

	@SuppressWarnings("unchecked")
	public Map searchInternalIndentDetails(Map<String, Object> dataMap)
	{
		List<StoreIssueM> searchListForPopup = new ArrayList<StoreIssueM>();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("userName") != null) {
			userName = ("" + dataMap.get("userName"));
		}
		Map<String, Object> map = new HashMap<String, Object>();
		int internalIndentId = 0;
		String issueNo = "";
		String issueNo1 = "";
		int issueId = 0;
		int firstResult = 0;
		int maxResults = 8;
		String no = "";
		int approvedBy = 0;
		int requestedBy = 0;
		int issuedBy = 0;
		String refNo = "";
		int despenceryName = 0;
		int storeFyId = 0;
		String date = "";
		String reqDate = "";
		String time = "";
		Date demandDate = null;
		List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();
		List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		List<MasStoreAirForceDepot> masStoreAirForceDepotList = new ArrayList<MasStoreAirForceDepot>();
		List<StoreIssueM> list = new ArrayList<StoreIssueM>();
		List<StoreIssueM> storeIssueLoanOutList = new ArrayList<StoreIssueM>();
		List<StoreIssueM> storeIssueMList2 = new ArrayList<StoreIssueM>();
		List<StoreIssueM> storeIssueMList = new ArrayList<StoreIssueM>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		GregorianCalendar gregorianCalendar = new GregorianCalendar();
		int currentMonth = gregorianCalendar.get(Calendar.MONTH) + 1;
		int currentYear = Integer.parseInt(""+ gregorianCalendar.get(Calendar.YEAR));
		int month = 0;
		int year = 0;
		java.sql.Date startDate = null;
		java.sql.Date endDate = null;
		String messageTOBeVisibleToTheUser = "";
		String messageType = "failure";
		String message = "";
		String adjustLoanButtonToShow = "false";
		int issueTempId = 0;
		StoreIssueM storeIssueM = null;
		// Retriving data from map
		if (dataMap.get("issueId") != null) {
			issueId = Integer.parseInt(("" + dataMap.get("issueId")));
		}
		if (dataMap.get("internalIndentId") != null) {
			internalIndentId = Integer.parseInt(""+ dataMap.get("internalIndentId"));
		}
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		if (dataMap.get("issueNo") != null) {
			issueNo1 = "" + dataMap.get("issueNo");
		}
		if (dataMap.get("approvedBy") != null) {
			approvedBy = Integer.parseInt("" + dataMap.get("approvedBy"));
		}
		if (dataMap.get("requestedBy") != null) {
			requestedBy = Integer.parseInt("" + dataMap.get("requestedBy"));
		}
		if (dataMap.get("issuedBy") != null) {
			issuedBy = Integer.parseInt("" + dataMap.get("issuedBy"));
		}
		if (dataMap.get("refNo") != null) {
			refNo = "" + dataMap.get("refNo");
		}
		if (dataMap.get("despenceryName") != null) {
			despenceryName = Integer.parseInt(""+ dataMap.get("despenceryName"));
		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("userName") != null) {
			userName = ("" + dataMap.get("userName"));
		}
		if (dataMap.get("date") != null) {
			date = ("" + dataMap.get("date"));
		}
		/*if (dataMap.get("reqDate") != null && !(dataMap.get("reqDate").equals(""))) {
			reqDate = ("" + dataMap.get("reqDate"));
		}*/
		if (dataMap.get("time") != null) {
			time = ("" + dataMap.get("time"));
		}
		Session session = (Session) getSession();
		Transaction tx = null;
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {
			// --------------Transaction Started----------
			tx = session.beginTransaction();

			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map) HMSUtil.getCurrentDateAndTime();
			String date22 = (String) utilMap.get("currentDate");
			SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
			String date4MySQL = formatterOut.format(formatterIn.parse(date22));
			Date issueDate = java.sql.Date.valueOf(date4MySQL);
			/*Date reqDate1=null;
			String reqDateMySQL = formatterOut.format(formatterIn.parse(reqDate));
			 reqDate1 = java.sql.Date.valueOf(reqDateMySQL);
			 */
			String monthAndYear = "";
			if (currentMonth == 1) {
				currentMonth = 12;
				currentYear = currentYear - 1;
				monthAndYear = (currentYear + "-" + currentMonth);
			} else {
				if (currentMonth <= 10) {
					monthAndYear = (currentYear + "-0" + (currentMonth - 1));
				} else {
					monthAndYear = (currentYear + "-" + (currentMonth - 1));
				}
			}
			String currentMonthAndYear = "";
			currentMonthAndYear = (currentYear + "-0" + (currentMonth));

			// --------Start of Checking for Loan Out--------------------
			storeIssueLoanOutList = getHibernateTemplate()
			.find("from jkt.hms.masters.business.StoreIssueM as sim where     sim.IssueType='l'  and sim.Status='o' and sim.ToStore.Id='"
					+ despenceryName + "' ");
			if (storeIssueLoanOutList.size() > 0) {
				messageTOBeVisibleToTheUser = "Please Adjust Loan out ...!";
				messageType = "failure";
				adjustLoanButtonToShow = "true";
				map.put("messageTOBeVisibleToTheUser",messageTOBeVisibleToTheUser);
				map.put("messageType", messageType);
				map.put("adjustLoanButtonToShow", adjustLoanButtonToShow);
				// map.put("internalIndentId",internalIndentId);
				storeInternalIndentMList = getHibernateTemplate()
				.find("from jkt.hms.masters.business.StoreInternalIndentM as msb where msb.Id = '"+ internalIndentId + "' ");
				map.put("storeInternalIndentMList", storeInternalIndentMList);
				return map;
			}
			// --------End of Checking for Loan Out--------------------
			storeInternalIndentTList = getHibernateTemplate()
			.find("from jkt.hms.masters.business.StoreInternalIndentT as msb where msb.Internal.Id = '"
					+ internalIndentId + "' ");
			storeInternalIndentMList = getHibernateTemplate()
			.find("from jkt.hms.masters.business.StoreInternalIndentM as msb where msb.Id = '"
					+ internalIndentId + "' ");

			for (StoreInternalIndentM storeInternalIndentM : storeInternalIndentMList) {
				demandDate = (Date) storeInternalIndentM.getDemandDate();
			}
			// ----------------Start of Fetching records from Internal Indent & storing in Issue-----
			// ---------------Start of Finding Adjusted loanout Id------------------------
			storeIssueMList2 = getHibernateTemplate()
			.find("from jkt.hms.masters.business.StoreIssueM as sim where  substring(sim.IssueDate, 1,7) = '"
					+ currentMonthAndYear
					+ "' and  sim.IssueType='i'  and sim.Status='o' and sim.Department.Id='"
					+ deptId + "' and sim.ToStore.Id='"	+ despenceryName + "'");
			if (storeIssueMList2.size() > 0)
				for (StoreIssueM storeIssueM2 : storeIssueMList2) {
					issueTempId = Integer.parseInt("" + storeIssueM2.getId());
					issueNo = "" + storeIssueM2.getIssueNo();
				}
			// ---------------End of Finding Adjusted loanout Id-----------------
			storeFyDocumentNoList = getHibernateTemplate()
			.find("from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"
					+ deptId + "' ");
			for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
				if (storeFyDocumentNo.getIssueDeptNo() != null) {
					no = ("" + storeFyDocumentNo.getIssueDeptNo());
				} else {
					no = "";
				}
			}
			if (issueId == 0) {
				no = getMaxNo(no);

				List<StoreIssueM> storeIssueM1List = new ArrayList<StoreIssueM>();
				storeIssueM1List = session.createCriteria(StoreIssueM.class)
				.add(Restrictions.eq("Department.Id", deptId))
				.add(Restrictions.eq("IssueType", "i"))
				.add(Restrictions.eq("IssueNo", issueNo1)).list();

				if(storeIssueM1List.size() == 0){
					storeIssueM = new StoreIssueM();
					storeIssueM.setIssueNo(no);
					// }
					StoreInternalIndentM storeInternalIndentM = new StoreInternalIndentM();
					storeInternalIndentM.setId(internalIndentId);
					storeIssueM.setRequestNo(storeInternalIndentM);
					if (approvedBy != 0) {
						MasEmployee employee = new MasEmployee();
						employee.setId(approvedBy);
						storeIssueM.setApprovedBy(employee);
					}
					if (requestedBy != 0) {
						MasEmployee employee2 = new MasEmployee();
						employee2.setId(requestedBy);
						storeIssueM.setRequestBy(employee2);
					}
					if (issuedBy != 0) {
						MasEmployee employee3 = new MasEmployee();
						employee3.setId(issuedBy);
						storeIssueM.setIssuedBy(employee3);
					}
					MasDepartment department1 = new MasDepartment();
					department1.setId(deptId);
					storeIssueM.setDepartment(department1);
					MasDepartment department = new MasDepartment();
					department.setId(despenceryName);
					storeIssueM.setToStore(department);
					storeIssueM.setDocNo(refNo);
					storeIssueM.setStatus("o");
					storeIssueM.setIssueType("i");
					SimpleDateFormat formatterIn2 = new SimpleDateFormat("dd/MM/yyyy");
					SimpleDateFormat formatterOut2 = new SimpleDateFormat("yyyy-MM-dd");
					String date4MySQL2 = formatterOut.format(formatterIn.parse(date));
					Date issueDate2 = java.sql.Date.valueOf(date4MySQL);
					storeIssueM.setIssueDate(issueDate2);
					//	storeIssueM.setRequestDate(reqDate1);
					storeIssueM.setToUnit(null);
					storeIssueM.setToDepot(null);
					MasHospital hospital = new MasHospital();
					hospital.setId(hospitalId);
					storeIssueM.setHospital(hospital);
					storeIssueM.setLastChgDate(issueDate2);
					storeIssueM.setLastChgBy(userName);
					storeIssueM.setLastChgTime(time);
					hbt.save(storeIssueM);
					hbt.refresh(storeIssueM);

					int StoreFyDocumentNoId = 1;
					Criteria c = session.createCriteria(StoreFyDocumentNo.class)
					.add(Restrictions.eq("Department.Id", deptId));
					storeFyDocumentNoList = c.list();
					for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
						storeFyId = documentNo.getId();
					}
					StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
					.load(StoreFyDocumentNo.class, storeFyId);
					// storeFyDocumentNo.setIssueDeptReturnNo(issueNo);
					storeFyDocumentNo.setIssueDeptNo(no);
					hbt.update(storeFyDocumentNo);
					hbt.refresh(storeFyDocumentNo);
					StoreInternalIndentM internalIndentM = (StoreInternalIndentM) getHibernateTemplate()
					.load(StoreInternalIndentM.class, internalIndentId);
					internalIndentM.setStatus("p");
					hbt.update(internalIndentM);
				}else{
					message = "Issue No. should not be duplicate. Please try again";
				}

			} else {
				storeIssueM = (StoreIssueM) getHibernateTemplate().load(
						StoreIssueM.class, issueId);
			}
			// String qryForId="SELECT id FROM store_issue_m s where
			// issue_no='"+no+"' and department_id='"+deptId+"';";
			// List objectList = (List) session.createSQLQuery(qryForId).list();
			// issueTempId=Integer.parseInt(""+objectList.get(0));

			// StoreIssueM tempStoreIssueM = new StoreIssueM();
			// tempStoreIssueM.setId(issueTempId);
			if(storeIssueM != null){
				for (StoreInternalIndentT storeInternalIndentT : storeInternalIndentTList) {
					StoreIssueT storeIssueT = new StoreIssueT();
					storeIssueT.setIssueM(storeIssueM);
					MasStoreItem masStoreItem = new MasStoreItem();

					if (storeInternalIndentT.getItem() != null) {
						masStoreItem.setId(storeInternalIndentT.getItem().getId());
						storeIssueT.setItem(masStoreItem);
						storeIssueT.setItemIssued(masStoreItem);
					}
					BigDecimal bigDecimal = new BigDecimal(
							storeInternalIndentT.getQtyRequest());
					storeIssueT.setQtyRequest(bigDecimal);
					storeIssueT.setIssueM(storeIssueM);
					storeIssueT.setBrand(null);
					storeIssueT.setSrNo(storeInternalIndentT.getSrNo());
					storeIssueT.setIssued("n");
					storeIssueT.setQtyIssued(new BigDecimal(0));
					storeIssueT.setItemOrder("1");
					hbt.save(storeIssueT);
					hbt.refresh(storeIssueT);
				}
			}
			// -----End of Fetching records from Internal Indent & storing in
			// Issue-----
			int StoreFyDocumentNoId = 1;
			// StoreFyDocumentNo
			// storeFyDocumentNo=(StoreFyDocumentNo)getHibernateTemplate().load(StoreFyDocumentNo.class,StoreFyDocumentNoId);
			// storeFyDocumentNo.setIssueCivNo(issueNo);
			Criteria c = session.createCriteria(StoreFyDocumentNo.class).add(
					Restrictions.eq("Department.Id", deptId));
			storeFyDocumentNoList = c.list();
			for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
				storeFyId = documentNo.getId();
			}
			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
			.load(StoreFyDocumentNo.class, storeFyId);
			// storeFyDocumentNo.setIssueDeptReturnNo(issueNo);
			storeFyDocumentNo.setIssueDeptNo(issueNo);
			hbt.update(storeFyDocumentNo);
			hbt.refresh(storeFyDocumentNo);
			StoreInternalIndentM internalIndentM = (StoreInternalIndentM) getHibernateTemplate()
			.load(StoreInternalIndentM.class, internalIndentId);
			internalIndentM.setStatus("p");
			hbt.update(internalIndentM);
			searchListForPopup = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIssueM sim where sim.Department.Id='"
					+ deptId + "' and sim.Status='o'");
			// --------------Transaction End----------
			tx.commit();
		} catch (Exception e) {
			// --------------In case of Transaction Failure----------
			if (tx != null) {
				tx.rollback();
			}
			e.printStackTrace();
		} finally {
			// --------Session Closing----------
			// //session.close();

		}
		if (issueId == 0) {
			map.put("issueId", storeIssueM.getId());
		}
		map.put("searchListForPopup", searchListForPopup);
		map.put("storeInternalIndentMList", storeInternalIndentMList);
		map.put("message", message);
		return map;
	}

	/*
	 * Methods ending for CIV Issue changes by vikas
	 */

	public Map<String, Object> checkHinExistence(Map<String, Object> dataMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<Patient> patientList = new ArrayList<Patient>();
		session = (Session) getSession();
		int deptId = 0;
		int hospitalId = 0;
		try {
			if (dataMap.get("deptId") != null) {
				deptId = Integer.parseInt("" + dataMap.get("deptId"));
			}
			if (dataMap.get("hospitalId") != null) {
				hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
			}

			String hinNo = "" + dataMap.get("hinNo");
			Criteria c = session.createCriteria(Patient.class).add(
					Restrictions.eq("HinNo", hinNo));
			patientList = c.list();
			map.put("patientList", patientList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	public Map openDeletePopupForIssueciv(Map<String, Object> dataMap) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("userName") != null) {
			userName = ("" + dataMap.get("userName"));
		}
		Map map = new HashMap();
		List<StoreIssueM> deleteStoreIssueList = new ArrayList<StoreIssueM>();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		deleteStoreIssueList = hbt
		.find("from jkt.hms.masters.business.StoreIssueM as sim where  sim.IssueType='i'  and sim.Status='o' and sim.Department.Id='"
				+ deptId + "'");
		map.put("deleteStoreIssueList", deleteStoreIssueList);
		return map;
	}

	public Map showDeleteIsuueCiv(Box box) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		if (box.get("deptId") != null) {
			deptId = Integer.parseInt("" + box.get("deptId"));
		}

		List<StoreIssueT> deleteStoreIssueList = new ArrayList<StoreIssueT>();
		StoreIssueT storeIssueT = new StoreIssueT();
		Map map = new HashMap();
		HibernateTemplate hbt = getHibernateTemplate();
		session = (Session) getSession();
		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;

		hbt.setFlushModeName("FLUSH_EAGER");
		int issueId = 0;
		if (box.get("issueId") != null) {
			issueId = Integer.parseInt("" + box.get("issueId"));
		}
		String qry = "SELECT i.item_id,item2.pvms_no,item2.nomenclature,i.qty_request,i.qty_issued,i.issue_m_id,i.item_from_indent,i.batch_no,i.cost_price,brand.brand_name,i.id FROM store_issue_t i,mas_store_item item,mas_store_item item2,mas_store_brand brand where i.issue_m_id='"
			+ issueId
			+ "'and i.brand_id=brand.brand_id and item.item_id=i.item_id and item2.item_id=i.item_issued and i.issued='y' order by i.item_id;";
		List objectList = (List) session.createSQLQuery(qry).list();

		int id = 0;
		String nomenclature = null;
		int itemId = 0;
		int detailId = 0;
		String pvmsNo = "";
		String issuedItemName = null;
		BigDecimal requestedQty = null;
		BigDecimal issuedQty = null;
		int issueMId = 0;
		String itemFromIndent = "y";
		String batchNo = "";
		BigDecimal costPrice = null;
		String brandName = "";
		int issueTId = 0;

		for (Iterator iterator = objectList.iterator(); iterator.hasNext();) {
			Object[] object = (Object[]) iterator.next();

			try {
				itemId = (Integer) object[0];
			} catch (Exception e) {
				e.printStackTrace();
				itemId = 0;
			}
			try {
				pvmsNo = (String) object[1];
			} catch (Exception e) {
				pvmsNo = "";
			}
			try {
				issuedItemName = (String) object[2];
			} catch (Exception e) {
				e.printStackTrace();
				issuedItemName = "";
			}
			try {
				requestedQty = new BigDecimal("" + object[3]);
			} catch (Exception e) {
				requestedQty = new BigDecimal("" + 0);
			}

			try {
				issuedQty = new BigDecimal("" + object[4]);
			} catch (Exception e) {
				e.printStackTrace();
				issuedQty = new BigDecimal("" + 0);
			}

			try {
				issueMId = (Integer) object[5];
			} catch (Exception e) {
				e.printStackTrace();
				issueMId = 0;
			}
			try {
				itemFromIndent = "" + object[6];
			} catch (Exception e) {
				e.printStackTrace();
				itemFromIndent = "y";
			}
			try {
				batchNo = "" + object[7];
			} catch (Exception e) {
				e.printStackTrace();
				batchNo = "";
			}
			try {
				costPrice = (BigDecimal) object[8];
			} catch (Exception e) {
				e.printStackTrace();
				costPrice = new BigDecimal("0");
			}
			try {
				brandName = (String) object[9];
			} catch (Exception e) {
				e.printStackTrace();
				brandName = "";
			}
			try {
				issueTId = (Integer) object[10];
			} catch (Exception e) {
				e.printStackTrace();
				issueTId = 0;
			}
			hData = new HashMap<String, Object>();

			hData.put("pvmsNo", pvmsNo);
			hData.put("issuedItemName", issuedItemName);
			hData.put("requestedQty", requestedQty);
			hData.put("issuedQty", issuedQty);
			hData.put("itemId", itemId);
			hData.put("issueMId", issueMId);
			hData.put("batchNo", batchNo);
			hData.put("costPrice", costPrice);
			hData.put("brandName", brandName);
			hData.put("issueTId", issueTId);
			vResult.add(hData);
		}

		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}

		try {
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);
		} catch (Exception e) {
			e.printStackTrace();
		}
		deleteStoreIssueList = hbt
		.find("from jkt.hms.masters.business.StoreIssueM as sim where  sim.IssueType='i'  and sim.Status='o' and sim.Department.Id='"
				+ deptId + "'");
		map.put("deleteStoreIssueList", deleteStoreIssueList);
		map.put("pagedArray", pagedArray);
		return map;
	}

	public Map deleteIssueCivItems(Box box) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		if (box.get("deptId") != null) {
			deptId = Integer.parseInt("" + box.get("deptId"));
		}

		Session session = (Session) getSession();
		List<StoreIssueT> storeTenderTList = new ArrayList<StoreIssueT>();
		StoreIssueT storeIssueT = new StoreIssueT();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIssueT> deleteStoreIssueList = new ArrayList<StoreIssueT>();
		Transaction tx = null;
		BigDecimal stock = null;
		BigDecimal issueQty = null;
		try {
			// --------------Transaction Started----------
			tx = session.beginTransaction();

			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			Vector id = box.getVector("id");
			Vector nomenclature = box.getVector("nomenclature");
			Vector delete = box.getVector("items_to_be_deleted");
			Vector itemIdVector = box.getVector("itemId");
			Vector qtyInReq = box.getVector("requestedQty");
			Vector issuedQty = box.getVector("issuedQty");
			Vector itemFromIndentList = box.getVector("itemFromIndent");
			String obj = null;
			int tempBrandId = 0;

			for (int i = 0; i < delete.size(); i++) {
				StoreIssueT storeIssueT2 = new StoreIssueT();
				int issueId = Integer.parseInt(delete.get(i).toString());
				int itemId = Integer.parseInt(itemIdVector.get(i).toString());
				BigDecimal qtyReq = new BigDecimal(qtyInReq.get(i).toString());
				String itemFromIndent = (itemFromIndentList.get(i).toString());
				List<StoreIssueT> tempList = new ArrayList<StoreIssueT>();
				// deleteIssueCivItems========"+issueId);

				// --------------------------Start of Stock
				// Updating--------------------------
				tempList = hbt
				.find("from jkt.hms.masters.business.StoreIssueT as a where a.Id='"
						+ issueId + "' ");

				// for(StoreIssueT storeIssueT3 :tempList){
				StoreIssueT storeIssueT3 = tempList.get(0);
				if (storeIssueT3.getBatchNo() != null) {
					tempBrandId = storeIssueT3.getBrand().getId();
					BigDecimal bigDecimal = storeIssueT3.getQtyIssued();
					String batchNo = storeIssueT3.getBatchNo();
					BigDecimal costPrice = storeIssueT3.getCostPrice();
					int itemIdFromT = storeIssueT3.getItem().getId();
					Date expiryDate = storeIssueT3.getExpiryDate();
					String qry2 = "select closing_stock,issue_qty from store_item_batch_stock where brand_id='"
						+ tempBrandId
						+ "' and item_id='"
						+ itemIdFromT
						+ "' and batch_no='"
						+ batchNo
						+ "' and cost_price='"
						+ costPrice
						+ "' and expiry_date='" + expiryDate + "'";
					List c = (List) session.createSQLQuery(qry2).list();

					Object[] object = (Object[]) c.get(0);
					if (object[0] == null) {
						stock = new BigDecimal("0");
					} else {
						stock = (BigDecimal) object[0];
					}
					// Float issueqty=Float.parseFloat(object[1].toString());
					if (object[1] == null) {
						issueQty = new BigDecimal("0");
					} else {
						issueQty = (BigDecimal) object[1];
					}
					logger.debug(":::::::tore item batch stock::::::" + stock);
					stock = stock.add(bigDecimal);

					issueQty = issueQty.subtract(bigDecimal);
					List storeItemList = session.createCriteria(
							StoreItemBatchStock.class).createAlias("Item",
							"item").createAlias("Brand", "brand").add(
									Restrictions.eq("BatchNo", batchNo)).add(
											Restrictions.eq("item.Id", itemIdFromT)).add(
													Restrictions.eq("brand.Id", tempBrandId)).add(
															Restrictions.eq("CostPrice", costPrice)).add(
																	Restrictions.eq("ExpiryDate", expiryDate)).list();

					StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock) storeItemList
					.get(0);
					int storeId = storeItemBatchStock.getId();
					StoreItemBatchStock storeItemBatchStock2 = (StoreItemBatchStock) hbt
					.load(StoreItemBatchStock.class, storeId);
					storeItemBatchStock2.setClosingStock(stock);
					storeItemBatchStock2.setIssueQty(issueQty);
					hbt.update(storeItemBatchStock2);
					hbt.refresh(storeItemBatchStock2);

				}
				// --------------------------End of Stock
				// Updating--------------------------
				String hql = "delete from jkt.hms.masters.business.StoreIssueT as a where a.Id='"
					+ issueId + "' ";
				Query query = session.createQuery(hql);
				int row = query.executeUpdate();

				if (itemFromIndent.equals("y")) {
					MasStoreItem storeItem = new MasStoreItem();
					storeItem.setId(itemId);
					storeIssueT2.setItem(storeItem);

					StoreIssueM issueM = new StoreIssueM();
					issueM.setId(issueId);
					storeIssueT2.setIssueM(issueM);
					storeIssueT2.setQtyRequest(qtyReq);
					storeIssueT2.setQtyIssued(new BigDecimal(0));
					storeIssueT2.setIssued("n");
					storeIssueT2.setBrand(null);
					MasStoreItem storeItem2 = new MasStoreItem();
					storeItem2.setId(itemId);
					storeIssueT2.setItemIssued(storeItem);
					hbt.save(storeIssueT2);
				}
			}

			deleteStoreIssueList = hbt
			.find("from jkt.hms.masters.business.StoreIssueM as sim where  sim.IssueType='i'  and sim.Status='o' and sim.Department.Id='"
					+ deptId + "'");
			map.put("deleteStoreIssueList", deleteStoreIssueList);
			map.put("total_records", id.size());
			map.put("deleted_records", delete.size());
			// --------------Transaction Ended----------
			tx.commit();

		} catch (Exception e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();
		}

		/*
		 * if (Integer.parseInt(map.get("total_records").toString()) ==
		 * Integer.parseInt(map.get("deleted_records").toString())) {
		 * (box.getInt("currPage") > 1)
		 * box.put("currPage",box.getInt("currPage")-1); }
		 */

		map = showDeleteIsuueCiv(box);
		return map;
	}

	public List<MasStoreItem> getItemList() {
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		itemList = (List<MasStoreItem>) hbt
		.find("from jkt.hms.masters.business.MasStoreItem as mis where mis.Status='y'  and mis.Id<100");
		return itemList;
	}

	public Map<String, Object> getHinNo(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Patient> patientList = new ArrayList<Patient>();
		session = (Session) getSession();
		int deptId = 0;
		int hospitalId = 0;
		try {
			if (dataMap.get("deptId") != null) {
				deptId = Integer.parseInt("" + dataMap.get("deptId"));
			}
			if (dataMap.get("hospitalId") != null) {
				hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
			}
			String str = "%" + dataMap.get("autoHint") + "%";
			Criteria c = session.createCriteria(Patient.class).add(
					Restrictions.like("HinNo", str)).add(
							Restrictions.eq("Hospital.Id", hospitalId));
			c.setFirstResult(0);
			c.setMaxResults(10);
			patientList = c.list();
			map.put("patientList", patientList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public Map<String, Object> getRequestedBy(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Integer> objectList = new ArrayList<Integer>();
		session = (Session) getSession();
		int deptId = 0;
		int hospitalId = 0;
		int indent_id=0;
		String Employee_id="";
		String Employee_name="";
		String Demand_Date="";
		

		try {
			if (dataMap.get("deptId") != null) {
				deptId = Integer.parseInt("" + dataMap.get("deptId"));
			}
			if (dataMap.get("hospitalId") != null) {
				hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
			}
			if (dataMap.get("indent_id") != null && !dataMap.get("indent_id").equals("")) {
				indent_id = Integer.parseInt("" + dataMap.get("indent_id"));
			}
			//commented By SKY
			
			String qry = "select me.EMPLOYEE_ID,me.FIRST_NAME +' ' +me.LAST_NAME as requestedby,siim.DEMAND_DATE as DemandDate from" +
			" STORE_INTERNAL_INDENT_M siim left outer join " +
			" MAS_EMPLOYEE me on siim.REQUESTED_BY=me.EMPLOYEE_ID left outer join MAS_RANK mr on me.RANK_ID=mr.RANK_ID where siim.ID='"+indent_id+"'";

			List c = (List) session.createSQLQuery(qry).list();
			for (Iterator iterator = c.iterator(); iterator.hasNext();) {
				Object[] object = (Object[]) iterator.next();
				Employee_id =object[0].toString();
				Employee_name =object[1].toString();
				Demand_Date=object[2].toString();
			}
			map.put("Employee_id",Employee_id);
			map.put("Employee_name",Employee_name);
			map.put("Demand_Date",Demand_Date);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}



	public Map<String, Object> adjustLoanOut(Map<String, Object> dataMap) {
		Session session = (Session) getSession();
		List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dateMap = new HashMap<String, Object>();
		List<StoreIssueM> storeIssueMList = new ArrayList<StoreIssueM>();
		List<StoreIssueT> storeIssueTList = new ArrayList<StoreIssueT>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<StoreIssueM> storeIssueMLoanOutList = new ArrayList<StoreIssueM>();
		List<StoreIssueT> storeIssueTLoanOutList = new ArrayList<StoreIssueT>();
		GregorianCalendar gregorianCalendar = new GregorianCalendar();
		int currentMonth = gregorianCalendar.get(Calendar.MONTH) + 1;
		int currentYear = Integer.parseInt(""
				+ gregorianCalendar.get(Calendar.YEAR));
		int month = 0;
		int year = 0;
		java.sql.Date startDate = null;
		java.sql.Date endDate = null;
		int issueMId = 0;
		int toStoreId = 0;
		int tempIssueMId = 0;
		int deptId = 0;
		int hospitalId = 0;
		String no = "";
		String max = "";
		String successfullyAdded = "n";
		String monthAndYear = "";
		String messageTOBeVisibleToTheUser = "";
		int issueId = 0;
		if (dataMap.get("issueMId") != null) {
			issueMId = Integer.parseInt("" + dataMap.get("issueMId"));
		}
		if (dataMap.get("toStoreId") != null) {
			toStoreId = Integer.parseInt("" + dataMap.get("toStoreId"));
		}
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}

		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		if (dataMap.get("toStoreId") != null) {
			toStoreId = Integer.parseInt("" + dataMap.get("toStoreId"));
		}
		if (currentMonth == 1) {
			currentMonth = 12;
			currentYear = currentYear - 1;
			monthAndYear = (currentYear + "-" + currentMonth);

		} else {
			if (currentMonth <= 10) {
				monthAndYear = (currentYear + "-0" + (currentMonth - 1));
			} else {
				monthAndYear = (currentYear + "-" + (currentMonth - 1));
			}
		}

		String date = "";
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		date = (String) utilMap.get("currentDate");
		int storefyId = 0;
		Transaction tx = null;
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {
			// --------------Transaction Started----------
			tx = session.beginTransaction();
			utilMap = (Map) HMSUtil.getCurrentDateAndTime();
			String date22 = (String) utilMap.get("currentDate");
			SimpleDateFormat formatterIn1 = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat formatterOut1 = new SimpleDateFormat("yyyy-MM-dd");
			String date4MySQL1 = formatterOut1.format(formatterIn1
					.parse(date22));
			Date currentDate = java.sql.Date.valueOf(date4MySQL1);
			// storeIssueMList = getHibernateTemplate().find("from
			// jkt.hms.masters.business.StoreIssueM as sim where sim.IssueDate
			// <='"+currentDate+"' and sim.IssueType='l' and sim.Status='o' and
			// sim.Department.Id='"+deptId+"' and
			// sim.ToStore.Id='"+toStoreId+"'");
			storeIssueMList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreIssueM as sim where sim.IssueType='l' and sim.Status='o' and sim.Department.Id= "
					+ deptId);
			storeFyDocumentNoList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"
					+ deptId + "' ");
			for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
				storefyId = storeFyDocumentNo.getId();
				if (storeFyDocumentNo.getIssueDeptNo() != null) {
					no = ("" + storeFyDocumentNo.getIssueDeptNo());
				} else {
					no = "";
				}
			}
			max = getMaxNo(no);
			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
			.load(StoreFyDocumentNo.class, storefyId);
			storeFyDocumentNo.setIssueDeptNo(max);
			hbt.update(storeFyDocumentNo);
			hbt.refresh(storeFyDocumentNo);

			StoreIssueM storeIssueMTemp = new StoreIssueM();
			storeIssueMTemp.setIssueNo(max);
			storeIssueMTemp.setIssueType("i");
			SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
			String date4MySQL = formatterOut.format(formatterIn.parse(date));
			java.sql.Date issueDate = java.sql.Date.valueOf(date4MySQL);
			storeIssueMTemp.setIssueDate(issueDate);
			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(deptId);
			storeIssueMTemp.setDepartment(masDepartment);
			MasDepartment masDepartment1 = new MasDepartment();
			masDepartment1.setId(toStoreId);
			storeIssueMTemp.setToStore(masDepartment1);
			MasEmployee masEmployee = new MasEmployee();
			masEmployee.setId((Integer) dataMap.get("requestBy"));
			storeIssueMTemp.setRequestBy(masEmployee);

			MasEmployee masEmp = new MasEmployee();
			if (((Integer) dataMap.get("approvedBy")) != 0
					&& dataMap.get("approvedBy") != null) {
				masEmp.setId((Integer) dataMap.get("approvedBy"));
				storeIssueMTemp.setApprovedBy(masEmp);
			}

			if (((Integer) dataMap.get("issuedBy")) != 0
					&& dataMap.get("issuedBy") != null) {
				MasEmployee masEmp1 = new MasEmployee();
				masEmp1.setId((Integer) dataMap.get("issuedBy"));
				storeIssueMTemp.setIssuedBy(masEmp1);
			}
			storeIssueMTemp.setStatus("o");
			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			storeIssueMTemp.setHospital(masHospital);
			storeIssueMTemp.setRequestNo(new StoreInternalIndentM(Integer
					.parseInt(dataMap.get("demandNo").toString())));
			hbt.save(storeIssueMTemp);

			for (StoreIssueM storeIssueM : storeIssueMList) {
				tempIssueMId = storeIssueM.getId();
				if (tempIssueMId != 0) {
					storeIssueTList = getHibernateTemplate().find(
							"from jkt.hms.masters.business.StoreIssueT as sit where sit.IssueM.Id='"
							+ tempIssueMId + "'");

					for (StoreIssueT storeIssueT : storeIssueTList) {

						StoreIssueT storeIssueTTemp = new StoreIssueT();

						MasStoreItem item = new MasStoreItem();
						item.setId(storeIssueT.getItem().getId());
						storeIssueTTemp.setItem(item);

						storeIssueTTemp.setQtyRequest(storeIssueT
								.getQtyRequest());
						storeIssueTTemp.setItemIssued(item);
						storeIssueTTemp.setBatchNo(storeIssueT.getBatchNo());
						storeIssueTTemp
						.setQtyIssued(storeIssueT.getQtyIssued());
						storeIssueTTemp.setRemarks(storeIssueT.getRemarks());
						storeIssueTTemp.setExpiryDate(storeIssueT
								.getExpiryDate());

						storeIssueTTemp
						.setCostPrice(storeIssueT.getCostPrice());
						storeIssueTTemp.setIssueM(storeIssueMTemp);

						MasStoreBrand brand = new MasStoreBrand();
						brand.setId(storeIssueT.getBrand().getId());
						storeIssueTTemp.setBrand(brand);

						storeIssueTTemp.setSrNo(storeIssueT.getSrNo());
						storeIssueTTemp.setIssued("y");
						storeIssueTTemp.setItemOrder("2");
						// storeIssueTTemp.setItemFromIndent("y");
						hbt.save(storeIssueTTemp);

						BigDecimal loanOutQty = new BigDecimal(0);
						BigDecimal issueQty = new BigDecimal(0);
						String qry3 = "select loan_out_qty,issue_qty  from store_item_batch_stock as a where a.brand_id='"
							+ storeIssueT.getBrand().getId()
							+ "' and a.item_id = '"
							+ storeIssueT.getItem().getId()
							+ "' and a.department_id='"
							+ storeIssueT.getIssueM().getDepartment()
							.getId()
							+ "'and a.batch_no='"
							+ storeIssueT.getBatchNo()
							+ "'and a.cost_price='"
							+ storeIssueT.getCostPrice() + "';";
						List c2 = (List) session.createSQLQuery(qry3).list();

						Object[] object = (Object[]) c2.get(0);

						if (object[0] == null) {
							loanOutQty = new BigDecimal("0");
						} else {
							loanOutQty = (BigDecimal) object[0];
						}

						if (object[1] == null) {
							issueQty = new BigDecimal("0");
						} else {
							issueQty = (BigDecimal) object[1];
						}


						String hql3 = "update from jkt.hms.masters.business.StoreItemBatchStock  as a set a.LoanOutQty='"
							+ loanOutQty.subtract(new BigDecimal(""
									+ storeIssueT.getQtyIssued()))
									+ "'  where a.Item.Id = '"
									+ storeIssueT.getItemIssued().getId()
									+ "' and "
									+ " a.Brand.Id = '"
									+ storeIssueT.getBrand().getId()
									+ "'and a.Department.Id='"
									+ storeIssueT.getIssueM().getDepartment()
									.getId()
									+ "' and a.BatchNo = '"
									+ storeIssueT.getBatchNo()
									+ "' and a.CostPrice = '"
									+ storeIssueT.getCostPrice() + "'";
						String hql4 = "update from jkt.hms.masters.business.StoreItemBatchStock  as a set a.IssueQty='"
							+ issueQty.add(new BigDecimal(""
									+ storeIssueT.getQtyIssued()))
									+ "'  where a.Item.Id = '"
									+ storeIssueT.getItemIssued().getId()
									+ "' and "
									+ " a.Brand.Id = '"
									+ storeIssueT.getBrand().getId()
									+ "' and a.Department.Id='"
									+ storeIssueT.getIssueM().getDepartment()
									.getId()
									+ "' and a.BatchNo = '"
									+ storeIssueT.getBatchNo()
									+ "'and a.CostPrice = '"
									+ storeIssueT.getCostPrice() + "'";
						Query query2 = session.createQuery(hql3);
						Query query3 = session.createQuery(hql4);
						int row2 = query2.executeUpdate();
						int row3 = query3.executeUpdate();
					}

					for (StoreIssueT storeIssueT : storeIssueTList) {
						StoreIssueM storeIssueM3 = (StoreIssueM) getHibernateTemplate()
						.load(StoreIssueM.class,
								storeIssueT.getIssueM().getId());
						storeIssueM3.setStatus("p");
						hbt.update(storeIssueM3);
						hbt.refresh(storeIssueM3);
					}

				} else {
					if (tx != null)
						tx.rollback();
					successfullyAdded = "n";
					messageTOBeVisibleToTheUser = "Current month  Issue is not Created  ";
				}
			}

			// --------------Transaction Ended----------
			tx.commit();
			successfullyAdded = "y";
		} catch (Exception e) {
			// --------------In case of Transaction Failure----------
			if (tx != null)
				tx.rollback();
			e.printStackTrace();
		} finally {
			// --------Session Closing----------
			// //session.close();
		}
		storeIssueMList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreIssueM as sit where sit.Department.Id='"
				+ deptId + "' and sit.IssueNo='" + max
				+ "' and sit.IssueType='i'");
		for (StoreIssueM issueM : storeIssueMList) {
			issueId = issueM.getId();
		}
		map.put("issueId", issueId);
		map.put("successfullyAdded", successfullyAdded);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return map;
	}

	public Map<String, Object> getItemListForIssueToDispensary(
			Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreItem> itemList1 = new ArrayList<MasStoreItem>();
		List<StoreSetup> storeSetupList = new ArrayList<StoreSetup>();
		List<Integer> stockIdList = new ArrayList<Integer>();
		session = (Session) getSession();
		String pvmsNo = null;
		int deptId = 0;
		int issueId = 0;
		int hospitalId=0;

		try {
			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map) HMSUtil.getCurrentDateAndTime();
			String date = (String) utilMap.get("currentDate");
			SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
			String date4MySQL = formatterOut.format(formatterIn.parse(date));
			Date datestr = java.sql.Date.valueOf(date4MySQL);
			SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
			String issueDate=sdf.format(datestr);
			//	Date issueDate = java.sql.Date.valueOf(date4MySQL);

			deptId = Integer.parseInt("" + dataMap.get("deptId"));
			issueId = Integer.parseInt("" + dataMap.get("issueId"));
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));  // add javed khan
			List objectList = new ArrayList();
			String str = dataMap.get("autoHint") + "%";
			String qry = " SELECT item_id FROM store_issue_t where issue_m_id='"
				+ issueId + "'";

			String qry2 = "SELECT item_id FROM store_item_batch_stock where department_id="
				+ deptId
				+"and hospital_id= "
				+hospitalId
				+ " and closing_stock > 0 and  expiry_date > '"
				+ issueDate + "'";

			stockIdList = (List) session.createSQLQuery(qry2).list();
			objectList = (List) session.createSQLQuery(qry).list();
			/*
			 * if((objectList.size() > 0)&&(stockIdList.size()>0)){
			 *
			 * Criteria c =
			 * session.createCriteria(MasStoreItem.class).add(Restrictions.like("Nomenclature",str))
			 * .add(Restrictions.eq("Department.Id", deptId))
			 * .add(Restrictions.in("Id",stockIdList))
			 * .add(Restrictions.not(Restrictions.in("Id", objectList)));
			 * c.setFirstResult(0); c.setMaxResults(10); itemList = c.list();
			 * }else if((stockIdList.size()>0)){ Criteria c =
			 * session.createCriteria(MasStoreItem.class).add(Restrictions.like("Nomenclature",str))
			 * .add(Restrictions.in("Id",stockIdList))
			 * .add(Restrictions.eq("Department.Id", deptId));
			 *
			 * c.setFirstResult(0); c.setMaxResults(10); itemList = c.list();
			 *  }
			 */



			/*if (dataMap.get("typeOfIssue") != null
					&& dataMap.get("typeOfIssue").toString().equalsIgnoreCase("OtherUnits")) {
				storeSetupList = session.createCriteria(StoreSetup.class).list();
				if (storeSetupList != null && storeSetupList.size() > 0) {
					deptId = storeSetupList.get(0).getStoreExpendable().getId();
				}
			}*/

			if(dataMap.get("deptId") != null )
			{
				deptId=(Integer)dataMap.get("deptId");
			}

			if ((stockIdList.size() > 0)) {
				/*Criteria c = session.createCriteria(MasStoreItem.class).add(
						Restrictions.like("Nomenclature", str).ignoreCase())
						//.add( Restrictions.in("Id", stockIdList))
						.add(Restrictions.eq("Department.Id", deptId))
						.add(Restrictions.eq("Status", "y"));
				 */


				// add javed khan

				Criteria c = session.createCriteria(MasStoreItem.class).add(
						Restrictions.like("Nomenclature", str).ignoreCase())
						//.add( Restrictions.in("Id", stockIdList))
						.add(Restrictions.eq("ItemType.Id", 2))
						.add(Restrictions.eq("Hospital.Id", hospitalId))
						.add(Restrictions.eq("Status", "y"));


				c.setFirstResult(0);
				c.setMaxResults(10);
				itemList = c.list();

				Criteria c1 = session.createCriteria(MasStoreItem.class).add(
						Restrictions.like("Nomenclature", str).ignoreCase())
						.add(Restrictions.eq("ItemType.Id", 1))
						.add(Restrictions.eq("Status", "y"));
				c1.setFirstResult(0);
				c1.setMaxResults(10);
				itemList1 = c1.list();
				itemList.addAll(itemList1);

			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("itemList", itemList);
		return map;

	}

	// ----------------------------End Of Issues To Dispensary (CIV)
	// ----------------------------Start Of Issues To Dispensary Loan Out

	public Map<String, Object> getItemListForLoanoutByAutocomplete(
			Map<String, Object> dataMap) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		session = (Session) getSession();
		String pvms = null;
		String nomenclature = null;
		String strength = null;
		String au = null;
		BigDecimal qtymmf = null;
		BigDecimal annreq = null;
		int item_id = 0;

		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			String queryString = null;
			String str = "%" + dataMap.get("autoHint") + "%";
			Integer[] ob = { 1750, 1063 };
			Criteria c = session.createCriteria(MasStoreItem.class).add(
					Restrictions.like("Nomenclature", str)).add(
							Restrictions.not(Restrictions.in("Id", ob)));
			c.setFirstResult(0);
			c.setMaxResults(10);
			itemList = c.list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;
	}

	public Map<String, Object> openDeletePopupForIssueLoanOut(Map dataMap) {
		Map map = new HashMap();
		int deptId = 0;
		List<StoreIssueM> deleteStoreIssueList = new ArrayList<StoreIssueM>();
		HibernateTemplate hbt = getHibernateTemplate();
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		hbt.setFlushModeName("FLUSH_EAGER");
		deleteStoreIssueList = hbt
		.find("from jkt.hms.masters.business.StoreIssueM as sim where sim.IssueType='l'  and sim.Status='o' and sim.Department.Id='"
				+ deptId + "'");
		map.put("deleteStoreIssueList", deleteStoreIssueList);
		return map;
	}

	public Map showDeleteIsuueLoanout(Box box) {

		List<StoreIssueT> deleteStoreIssueList = new ArrayList<StoreIssueT>();
		StoreIssueT storeIssueT = new StoreIssueT();
		Map map = new HashMap();
		HibernateTemplate hbt = getHibernateTemplate();
		session = (Session) getSession();
		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		int departmentIdTemp = 0;
		int deptId = 0;
		deptId = Integer.parseInt("" + box.get("deptId"));
		departmentIdTemp = Integer.parseInt("" + box.get("issueId"));

		hbt.setFlushModeName("FLUSH_EAGER");
		int issueId = 0;
		if (box.get("issueId") != null) {
			issueId = Integer.parseInt("" + box.get("issueId"));
		}
		String qry = "SELECT i.item_id,item.nomenclature, i.qty_request,i.qty_issued,i.issue_m_id, i.id FROM store_issue_t i, mas_store_item item where i.issue_m_id='"
			+ issueId + "' and item.item_id=i.item_id and i.issued='y'";
		List objectList = (List) session.createSQLQuery(qry).list();

		int id = 0;
		String nomenclature = null;
		int itemId = 0;
		int detailId = 0;
		BigDecimal requestedQty = null;
		BigDecimal issuedQty = null;
		BigDecimal cost_price = null;
		String batch_no = "";
		int issueMId = 0;
		int issueTId = 0;

		for (Iterator iterator = objectList.iterator(); iterator.hasNext();) {
			Object[] object = (Object[]) iterator.next();

			try {
				itemId = Integer.parseInt(object[0].toString());
			} catch (Exception e) {
				e.printStackTrace();
				itemId = 0;
			}
			try {
				nomenclature = (String) object[1];
			} catch (Exception e) {
				nomenclature = "";
			}

			try {
				requestedQty = new BigDecimal("" + object[2]);
			} catch (Exception e) {
				requestedQty = new BigDecimal("" + 0);
			}

			try {
				issuedQty = new BigDecimal("" + object[3]);
			} catch (Exception e) {
				e.printStackTrace();
				issuedQty = new BigDecimal("" + 0);
			}

			try {
				issueMId = Integer.parseInt(object[4].toString());
			} catch (Exception e) {
				e.printStackTrace();
				issueMId = 0;
			}

			try {
				issueTId = Integer.parseInt(object[5].toString());
			} catch (Exception e) {
				e.printStackTrace();
				issueTId = 0;
			}

			hData = new HashMap<String, Object>();

			hData.put("nomenclature", nomenclature);
			hData.put("requestedQty", requestedQty);
			hData.put("issuedQty", issuedQty);
			hData.put("itemId", itemId);
			hData.put("issueMId", issueMId);
			hData.put("issueTId", issueTId);

			vResult.add(hData);
		}

		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}

		try {
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);
		} catch (Exception e) {
			e.printStackTrace();
		}
		deleteStoreIssueList = hbt
		.find("from jkt.hms.masters.business.StoreIssueM as sim where sim.IssueType='l' and sim.Status='o' and sim.Department.Id='"
				+ deptId + "'");
		map.put("deleteStoreIssueList", deleteStoreIssueList);
		map.put("pagedArray", pagedArray);
		return map;
	}

	public Map deleteIssueLoanoutItems(Box box) {
		List<StoreIssueT> storeTenderTList = new ArrayList<StoreIssueT>();
		StoreIssueT storeIssueT = new StoreIssueT();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIssueT> deleteStoreIssueList = new ArrayList<StoreIssueT>();
		session = (Session) getSession();
		int deptId = 0;
		deptId = Integer.parseInt("" + box.get("deptId"));
		Transaction tx = null;
		try {
			// --------------Transaction Started----------
			tx = session.beginTransaction();

			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			Vector id = box.getVector("id");
			Vector nomenclature = box.getVector("nomenclature");
			Vector delete = box.getVector("items_to_be_deleted");
			Vector issueMId = box.getVector("issueMId");
			Vector issueT = box.getVector("issueTId");
			Vector qtyInReq = box.getVector("requestedQty");
			Vector issuedQty = box.getVector("issuedQty");
			Vector items = box.getVector("items");
			BigDecimal stock = null;
			BigDecimal loanOutQty = null;
			String obj = null;
			int tempBrandId = 0;

			for (int i = 0; i < delete.size(); i++) {
				StoreIssueT storeIssueT2 = new StoreIssueT();
				int index = Integer.parseInt(delete.get(i).toString());
				int issueId = Integer.parseInt(issueMId.get(index).toString());
				int issueTId = Integer.parseInt(issueT.get(index).toString());
				BigDecimal qtyIssued = new BigDecimal("" + issuedQty.get(index));

				List<StoreIssueT> tempList = new ArrayList<StoreIssueT>();

				// --------------------------Start of Stock
				// Updating--------------------------
				tempList = hbt
				.find("from jkt.hms.masters.business.StoreIssueT as a where a.IssueM.Id='"
						+ issueId + "' and a.Id=  '" + issueTId + "'  ");

				for (StoreIssueT storeIssueT3 : tempList) {
					if (storeIssueT3.getBrand() != null) {
						tempBrandId = Integer.parseInt(""
								+ storeIssueT3.getBrand().getId());
						BigDecimal cost_price = storeIssueT3.getCostPrice();
						int item_id = storeIssueT3.getItemIssued().getId();
						String batch_no = storeIssueT3.getBatchNo();

						String qry2 = "select closing_stock,loan_out_qty from store_item_batch_stock where brand_id="
							+ tempBrandId
							+ " and item_id = "
							+ item_id
							+ " and batch_no = '"
							+ batch_no
							+ "' and cost_price = " + cost_price;
						List c = (List) session.createSQLQuery(qry2).list();

						for (Iterator iterator = c.iterator(); iterator
						.hasNext();) {
							Object[] object = (Object[]) iterator.next();

							if (object[0] == null) {
								stock = new BigDecimal("0");
							} else {
								stock = (BigDecimal) object[0];
							}

							if (object[1] == null) {
								loanOutQty = new BigDecimal("0");
							} else {
								loanOutQty = (BigDecimal) object[1];
							}
						}


						stock = stock.add(qtyIssued);
						loanOutQty = loanOutQty.subtract(qtyIssued);


						String qry1 = "update store_item_batch_stock as s set s.closing_stock ='"
							+ stock
							+ "' where brand_id='"
							+ tempBrandId
							+ "' and item_id = "
							+ item_id
							+ " and batch_no = '"
							+ batch_no
							+ "' and cost_price = " + cost_price;
						Query query1 = session.createSQLQuery(qry1);
						int row1 = query1.executeUpdate();
						String qry3 = "update store_item_batch_stock as s set s.loan_out_qty ='"
							+ loanOutQty
							+ "' where brand_id='"
							+ tempBrandId
							+ "' and item_id = "
							+ item_id
							+ " and batch_no = '"
							+ batch_no
							+ "' and cost_price = " + cost_price;
						Query query2 = session.createSQLQuery(qry3);
						int row2 = query2.executeUpdate();
					}
				}
				//---End of Stock Updating--------------------------

				String hql = "delete from jkt.hms.masters.business.StoreIssueT as a where a.IssueM.Id='"
					+ issueId + "' and a.Id=  '" + issueTId + "' ";
				Query query = session.createQuery(hql);
				int row = query.executeUpdate();
			}

			deleteStoreIssueList = hbt
			.find("from jkt.hms.masters.business.StoreIssueM as sim where sim.IssueType='l' and sim.Status='o' and sim.Department.Id='"
					+ deptId + "'");
			map.put("deleteStoreIssueList", deleteStoreIssueList);
			map.put("total_records", id.size());
			map.put("deleted_records", delete.size());
			// --------------Transaction Ended----------
			tx.commit();

		} catch (Exception e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();

		}

		if (Integer.parseInt(map.get("total_records").toString()) == Integer
				.parseInt(map.get("deleted_records").toString())) {
			if (box.getInt("currPage") > 1)
				box.put("currPage", box.getInt("currPage") - 1);
		}

		// map = showDeleteIsuueCiv(box);
		map = showDeleteIsuueLoanout(box);
		return map;

	}

	/*
	 * ---------------------start of methods for loan out
	 * functionality----------------------------
	 *
	 * @see jkt.hms.stores.dataservice.StoresDataService#(java.util.Map)
	 */
	public Map showIssueDispensaryManualJsp(Map<String, Object> dataMap) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("userName") != null) {
			userName = ("" + dataMap.get("userName"));
		}

		Map map = new HashMap();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		// List<StoreInternalIndentT> storeInternalIndentTList = new
		// ArrayList<StoreInternalIndentT>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasStoreAirForceDepot> masStoreAirForceDepotList = new ArrayList<MasStoreAirForceDepot>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		// List<MasStoreBrand> masStoreBrandList= new
		// ArrayList<MasStoreBrand>();
		List<Patient> patientList = new ArrayList<Patient>();
		List<StoreIssueM> searchListForPopup = new ArrayList<StoreIssueM>();
		List<StoreLoanoutExpendM> searchListForPopup1 = new ArrayList<StoreLoanoutExpendM>(); // javed khan
		String max = "";
		String startNo = "";
		String no = "";
		try {
			// patientList=getHibernateTemplate().find("from
			// jkt.hms.masters.business.Patient as pt where pt.Status='y'");
			storeInternalIndentMList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.StoreInternalIndentM");
			departmentList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasDepartment");
			// masStoreAirForceDepotList = getHibernateTemplate().find("from
			// jkt.hms.masters.business.MasStoreAirForceDepot");
			// itemList=getHibernateTemplate().find("from
			// jkt.hms.masters.business.MasStoreItem as it where it.Id<100 ");



			// add hospital_id by javed khan

			employeeList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasEmployee as me where me.Status='y' and me.Hospital.Id='" + hospitalId + "' order by me.FirstName asc");
			storeFyDocumentNoList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"
					+ deptId + "' and sfdn.Hospital.Id='"
					+hospitalId+ "' ");
			for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
				if (storeFyDocumentNo.getIssueLoanoutNo() != null) {
					no = ("" + storeFyDocumentNo.getIssueLoanoutNo());
				} else {
					no = "";
				}
			}
			// searchListForPopup=getHibernateTemplate().find("from
			// jkt.hms.masters.business.StoreIssueM as sim where
			// sim.RequestType='m' and sim.IssueType and sim.DocType='l' and
			// sim.Status='o'");
			searchListForPopup = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIssueM sim where sim.Department.Id='"
					+ deptId
					+ "' and sim.Status='o' and sim.IssueType='l'");
			// javed khan

			searchListForPopup1 = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreLoanoutExpendM slem where slem.Department.Id='"
					+ deptId
					+ "' and slem.Hospital.Id='"
					+hospitalId
					+"' order by slem.Id desc ");
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			max = getMaxNo(no);
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("storeInternalIndentMList", storeInternalIndentMList);
		// map.put("storeInternalIndentTList", storeInternalIndentTList);
		map.put("departmentList", departmentList);
		// map.put("masStoreAirForceDepotList", masStoreAirForceDepotList);
		// map.put("itemList", itemList);
		map.put("employeeList", employeeList);
		map.put("max", max);
		// map.put("masStoreBrandList", masStoreBrandList);
		map.put("searchListForPopup", searchListForPopup);
		// map.put("patientList",patientList);
		map.put("searchListForPopup1", searchListForPopup1);  // javed khan
		return map;

	}

	public Map searchIssueLoanout(Box box) {
		int issueId = 0;
		int deptId = 0;
		String deptName = "";
		List<StoreIssueM> searchListForPopup = new ArrayList<StoreIssueM>();
		List<StoreIssueT> storeIssueTList = new ArrayList<StoreIssueT>();
		List<MasDepartment> departmentNameSendToJsp = new ArrayList<MasDepartment>();
		Map<String, Object> pageMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> valueMap = new HashMap<String, Object>();
		StoreIssueM issueM = new StoreIssueM();
		List<StoreIssueM> list = new ArrayList<StoreIssueM>();
		List<StoreLoanoutExpendM> list1 = new ArrayList<StoreLoanoutExpendM>();// javed khan
		StoreLoanoutExpendM LoanoutExpendM = new StoreLoanoutExpendM(); // javed khan
		List<StoreLoanoutExpendT> StoreLoanoutExpendTList = new ArrayList<StoreLoanoutExpendT>(); // javed khan
		deptId = Integer.parseInt("" + box.get("deptId"));
		session = (Session) getSession();
		Transaction tx = null;
		int pageNo = 1;
		String issued = "n";
		if (box.get("issueUnit") != null) {
			issueId = Integer.parseInt(box.get("issueUnit"));

		}
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		/*list = hbt
				.find("from jkt.hms.masters.business.StoreIssueM as sim where sim.Id = '"
						+ issueId + "'");*/
		/*
		 * commented by ujjwal for sql injection
		 */
		/*		list1 = hbt
		.find("from jkt.hms.masters.business.StoreLoanoutExpendM  as sim where sim.Id = '"
				+ issueId + "'");
		 */
		list1=session.createCriteria(StoreLoanoutExpendM.class).add(Restrictions.eq("Id", issueId)).list();
		try {
			// --------------Transaction Started----------
			tx = session.beginTransaction();

			/*StoreIssueM storeIssueM = (StoreIssueM) list.get(0);
			valueMap.put("issueNo", storeIssueM.getIssueNo());*/

			StoreLoanoutExpendM storeLoanoutExpendM = (StoreLoanoutExpendM) list1.get(0);
			valueMap.put("issueNo", storeLoanoutExpendM.getIssueNo());

			/*if (storeIssueM.getDocNo() != null)
				valueMap.put("reference", storeIssueM.getDocNo());*/

			if (storeLoanoutExpendM.getDocNo() != null)
				valueMap.put("reference", storeLoanoutExpendM.getDocNo());

			/*valueMap.put("departmentIdTemp", storeIssueM.getToStore().getId());

			valueMap.put("requestBy", storeIssueM.getRequestBy().getId());
			valueMap.put("approvedBy", storeIssueM.getApprovedBy().getId());
			valueMap.put("issuedBy", storeIssueM.getIssuedBy().getId());*/

			valueMap.put("departmentIdTemp", storeLoanoutExpendM.getToStore().getId());

			valueMap.put("requestBy", storeLoanoutExpendM.getRequestBy().getId());
			valueMap.put("approvedBy", storeLoanoutExpendM.getApprovedBy().getId());
			valueMap.put("issuedBy", storeLoanoutExpendM.getIssuedBy().getId());

			/*try {
				box.put("issuedDate", HMSUtil
						.convertDateToStringWithoutTime(issueM.getIssueDate()));
			} catch (Exception e) {
				box.put("issuedDate", "");
			}*/


			/*try {
				box.put("demandDate",
						HMSUtil.convertDateToStringWithoutTime(issueM
								.getRequestDate()));
			} catch (Exception e) {
				box.put("demandDate", "");
			}*/

			// javed khan
			try {
				box.put("issuedDate", HMSUtil
						.convertDateToStringWithoutTime(LoanoutExpendM.getIssueDate()));
			} catch (Exception e) {
				box.put("issuedDate", "");
			}
			try {
				box.put("demandDate",
						HMSUtil.convertDateToStringWithoutTime(LoanoutExpendM
								.getRequestDate()));
			} catch (Exception e) {
				box.put("demandDate", "");
			}
			/*
			 * commented by ujjwal for sql injection
			 */
			/*			departmentNameSendToJsp = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasDepartment as md where md.Id='"
							+ deptId + "'");
			 */			
			departmentNameSendToJsp=session.createCriteria(MasDepartment.class).add(Restrictions.eq("Id", deptId)).list();
			/*
			 * commented by ujjwal for sql injection
			 */

			/*			storeIssueTList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIssueT as siim  where    siim.IssueM.Id='"
							+ issueId + "'");

			 */			storeIssueTList=session.createCriteria(StoreIssueT.class)
			 .createAlias("IssueM", "sim").add(Restrictions.eq("sim.Id", issueId)).list();
			 /*
			  * commented by ujjwal for sql injection
			  */
			 /*StoreLoanoutExpendTList = getHibernateTemplate().find(
		"from jkt.hms.masters.business.StoreLoanoutExpendT as siim  where    siim.IssueM.Id='"
		+ issueId + "'");
			  */	
			 StoreLoanoutExpendTList=session.createCriteria(StoreLoanoutExpendT.class)
			 .createAlias("IssueM", "sim").add(Restrictions.eq("sim.Id", issueId)).list();

			 MasDepartment masDepartment = departmentNameSendToJsp.get(0);
			 deptName = masDepartment.getDepartmentName();
			 valueMap.put("deptName", deptName);
			 // --------------Transaction Ended----------
			 tx.commit();

		} catch (Exception e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();

		}
		valueMap.put("issueId", issueId);
		valueMap.put("pageNo", pageNo);
		valueMap.put("deptId", deptId);
		valueMap.put("issue_type", "l");
		map = getIssueDetailPageByPage(valueMap);
		map.put("valueMap", valueMap);
		map.put("storeIssueTList", storeIssueTList);
		map.put("StoreLoanoutExpendTList", StoreLoanoutExpendTList); // javed khan
		return map;
	}

	public Map addBrandDetailsForLoanOut(Box box)
	{
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		if (box.get("deptId") != null) {
			deptId = Integer.parseInt("" + box.get("deptId"));
		}
		if (box.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + box.get("hospitalId"));
		}
		if (box.get("userName") != null) {
			userName = ("" + box.get("userName"));
		}
		Map map = new HashMap();
		int itemId = 0;
		int detailId = 0;
		int itemIssuedIdArray[] = null;
		String qtyIssuedTempArray[] = null;
		//List<StoreIssueT> storeIssueTList = new ArrayList<StoreIssueT>();
		String successfullyAdded = "n";
		int issueId = 0;
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		int storeFyId = 0;
		session = (Session) getSession();
		Transaction tx = null;

		try {
			// --------------Transaction Started----------
			tx = session.beginTransaction();

			Vector brandId = box.getVector(RequestConstants.BRAND_ID);
			Vector qtyIssued = box.getVector(QTY_ISSUED);
			Vector remarks = box.getVector(RequestConstants.REMARKS);
			Vector batchNo = box.getVector(RequestConstants.BATCH_NO);
			Vector expDate = box.getVector(RequestConstants.EXPIRY_DATE);
			Vector costPrice = box.getVector(RequestConstants.COST_PRICE);
			Vector Item_id = box.getVector(RequestConstants.ITEM_ID);
			Vector batchId = box.getVector(RequestConstants.BATCH_ID);

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			String issueNo = "" + box.get("issueNo");
			issueId = Integer.parseInt("" + box.get("issueId"));
			int departmentIdTemp = Integer.parseInt(""
					+ box.get("departmentIdTemp"));
			//StoreIssueM storeIssueM = new StoreIssueM();

			StoreLoanoutExpendM storeIssueM = new StoreLoanoutExpendM ();


			if (issueId == 0) {
				storeIssueM.setIssueType("l");
				storeIssueM.setIssueNo(box.get("issueNo"));
				SimpleDateFormat formatterIn = new SimpleDateFormat(
				"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
				"yyyy-MM-dd");
				String dd = "" + box.get("issueDate");
				String date4MySQL ="";
				try {
					date4MySQL = formatterOut.format(formatterIn.parse(dd));
				} catch (ParseException e) {

					e.printStackTrace();
				}
				java.sql.Date issueDate = java.sql.Date.valueOf(date4MySQL);
				storeIssueM.setIssueDate(issueDate);
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				storeIssueM.setDepartment(masDepartment);
				MasDepartment masDepartment2 = new MasDepartment();
				masDepartment2.setId(Integer.parseInt(""
						+ box.get("departmentIdTemp")));
				storeIssueM.setToStore(masDepartment2);
				storeIssueM.setRequestNo(null);
				storeIssueM.setRequestDate(null);

				MasEmployee masEmployee = new MasEmployee();
				masEmployee.setId(Integer.parseInt("" + box.get("requestBy")));
				storeIssueM.setRequestBy(masEmployee);
				MasEmployee masEmployee2 = new MasEmployee();
				masEmployee2.setId(Integer.parseInt("" + box.get("issuedBy")));
				storeIssueM.setIssuedBy(masEmployee2);
				MasEmployee masEmployee3 = new MasEmployee();
				//masEmployee3
				//.setId(Integer.parseInt("" + box.get("approvedBy")));
				masEmployee3
				.setId(Integer.parseInt("" + box.get("issuedBy")));
				storeIssueM.setApprovedBy(masEmployee3);
				storeIssueM.setStatus("l");
				//storeIssueM.setDocNo(box.get("docNo"));
				storeIssueM.setToUnit(null);
				storeIssueM.setToDepot(null);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(Integer.parseInt("" + box.get("hospitalId")));
				storeIssueM.setHospital(masHospital);
				storeIssueM.setLastChgBy(box.get("changed_by"));
				storeIssueM.setLastChgDate(issueDate);

				storeIssueM.setLastChgTime(box.get("changed_time"));
				if ((box.get("patientName") != null)
						&& (!box.get("patientName").equals(""))) {
					String qry = "SELECT hin_id FROM patient where hin_no='"
						+ box.get("patientName") + "'";
					List listForHin = (List) session.createSQLQuery(qry).list();
					Integer hinId = (Integer) listForHin.get(0);
					Patient hin = new Patient();
					hin.setId(hinId);
					storeIssueM.setHin(hin);
				} else {
					storeIssueM.setHin(null);
				}
				hbt.save(storeIssueM);
				hbt.refresh(storeIssueM);

				//tx.commit();
			} else {
				storeIssueM.setId(issueId);
			}
			int count = Integer.parseInt(""+box.get("count"));
			//for (int i = 0; i < brandId.size(); i++) {
			for(int i = 0; i < qtyIssued.size(); i++) {
				if ( qtyIssued.get(i) != null  && !qtyIssued.get(i).equals("")) {
					if(Integer.parseInt("" + qtyIssued.get(i)) != 0 ){
						//StoreIssueT storeIssueT = new StoreIssueT();
						StoreLoanoutExpendT storeIssueT = new StoreLoanoutExpendT();
						BigDecimal costprice = null;
						/*if ((new BigDecimal("" + costPrice.get(i))) != (new BigDecimal(
							"0"))) {
						costprice = new BigDecimal("" + costPrice.get(i));
					} else {*/
						costprice = new BigDecimal("0");
						//}

						MasStoreItem masStoreItem = new MasStoreItem();
						//masStoreItem.setId(Integer.parseInt("" + box.get("itemId")));
						masStoreItem.setId(Integer.parseInt("" + Item_id.get(i)));
						storeIssueT.setItem(masStoreItem);
						storeIssueT.setQtyRequest(new BigDecimal(0));
						storeIssueT.setItem(masStoreItem);
						storeIssueT.setBatchNo("" + batchNo.get(i));

						storeIssueT.setCostPrice(new BigDecimal("" + costprice));

						storeIssueT.setQtyIssued(new BigDecimal(""
								+ qtyIssued.get(i)));
						storeIssueT.setRemarks(box.get("remarks"));
						storeIssueT.setItemOrder("2");
						SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
						SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
						String date4MySQL ="";
						try {
							date4MySQL = formatterOut.format(formatterIn
									.parse(expDate.get(i).toString()));
						} catch (ParseException e2) {

							e2.printStackTrace();
						}
						Date expDateT = java.sql.Date.valueOf(date4MySQL);
						try {
							storeIssueT.setExpiryDate(expDateT);
						} catch (Exception e) {
							storeIssueT.setExpiryDate(null);
						}

						MasStoreBrand brand = new MasStoreBrand();
						if(!brandId.get(i).equals("") && brandId.get(i) != null){
							brand.setId(Integer.parseInt("" + brandId.get(i)));
						}else{
							brand.setId(Integer.parseInt("3982"));
						}
						storeIssueT.setBrand(brand);

						StoreItemBatchStock stock1 = new StoreItemBatchStock();
						if(!batchId.get(i).equals("") && batchId.get(i) != null){
							//brand.setId(Integer.parseInt("" + brandId
							stock1.setId(Integer.parseInt("" + batchId.get(i)));
						}else{
							stock1.setId(Integer.parseInt("3982"));
						}
						storeIssueT.setBatchStock(stock1);

						/*if (("" + remarks.get(i)).equals("emptyString")) {
						storeIssueT.setRemarks(null);
					} else {
						storeIssueT.setRemarks("" + remarks.get(i));
					}*/

						storeIssueT.setIssueM(storeIssueM);
						storeIssueT.setSrNo(0);
						storeIssueT.setIssued("y");
						storeIssueT.setItemIssued(masStoreItem);
						hbt.save(storeIssueT);
						hbt.refresh(storeIssueT);

						// -Start of Stock Updating--------------------------
						BigDecimal stock = null;
						BigDecimal loanOutQty = null;
						/*String qry3 = "select closing_stock,loan_out_qty from store_item_batch_stock as a where a.brand_id='"
							+ brandId.get(i)
							+ "'and a.department_id='"
							+ deptId
							+ "'and a.batch_no='"
							+ batchNo.get(i)
							+ "'and a.cost_price='" + costprice + "';";*/
						String qry3 = "select closing_stock,loan_out_qty from store_item_batch_stock  a where a.department_id='"
							+ deptId
							+ "'and a.item_id='"
							+Integer.parseInt("" + Item_id.get(i))
							+ "'and a.batch_no='"+ batchNo.get(i)+"' and a.hospital_id='"+ hospitalId+"'";
						List c2 = (List) session.createSQLQuery(qry3).list();
						Object[] object = (Object[]) c2.get(0);
						if (object[0] == null) {
							stock = new BigDecimal("0");
						} else {
							stock = (BigDecimal) object[0];
						}
						if (object[1] == null) {
							loanOutQty = new BigDecimal("0");
						} else {
							loanOutQty = (BigDecimal) object[1];
						}

						/*String hql2 = "update from jkt.hms.masters.business.StoreItemBatchStock  as a set a.ClosingStock='"
							+ stock.subtract(new BigDecimal(""
									+ qtyIssued.get(i)))
							+ "'  where a.Brand.Id='"
							+ brandId.get(i)
							+ "'and a.Department.Id='"
							+ deptId
							+ "'and a.BatchNo='"
							+ batchNo.get(i)
							+ "'and a.CostPrice='" + costprice + "'";*/
						String hql2 = "update from jkt.hms.masters.business.StoreItemBatchStock  as a set a.ClosingStock='"
							+ stock.subtract(new BigDecimal(""
									+ qtyIssued.get(i)))
									+ "'  where a.Department.Id='"
									+ deptId
									+ "'and a.Item.Id='"
									+Integer.parseInt("" + Item_id.get(i))
									+ "'and a.BatchNo='"+ batchNo.get(i)+"' and a.Hospital.Id='"+ hospitalId+"'";
									

						/*String hql3 = "update from jkt.hms.masters.business.StoreItemBatchStock  as a set a.LoanOutQty='"
							+ loanOutQty.add(new BigDecimal(""
									+ qtyIssued.get(i)))
							+ "'  where a.Brand.Id='"
							+ brandId.get(i)
							+ "'and a.Department.Id='"
							+ deptId
							+ "'and a.BatchNo='"
							+ batchNo.get(i)
							+ "'and a.CostPrice='" + costprice + "'";*/
						String hql3 = "update from jkt.hms.masters.business.StoreItemBatchStock  as a set a.LoanOutQty='"
							+ loanOutQty.add(new BigDecimal(""
									+ qtyIssued.get(i)))
									+ "'  where a.Department.Id='"
									+ deptId
									+ "'and a.Item.Id='"
									+Integer.parseInt("" + Item_id.get(i))
									+ "'and a.BatchNo='"+ batchNo.get(i)+"' and a.Hospital.Id='"+ hospitalId+"'";


						BigDecimal stockdis = null;
						BigDecimal loanInQtydis= null;
						String qry4 = "select closing_stock,loan_in_qty from store_item_batch_stock  a where a.department_id='"
							+ departmentIdTemp
							+ "'and a.item_id='"
							+Integer.parseInt("" + Item_id.get(i))						
							+ "'and a.batch_no='"+ batchNo.get(i)+"' and a.hospital_id='"+ hospitalId+"'";
						
						List c4 = (List) session.createSQLQuery(qry4).list();
						if(c4.size()>0){
							Object[] object1 = (Object[]) c4.get(0);
							if (object1[0] == null) {
								stockdis  = new BigDecimal("0");
							} else {
								stockdis  = (BigDecimal) object1[0];
							}
							if (object1[1] == null) {
								loanInQtydis = new BigDecimal("0");
							} else {
								loanInQtydis = (BigDecimal) object1[1];
							}

							if(!stockdis.equals("0.0")){
								String hql4 = "update from jkt.hms.masters.business.StoreItemBatchStock  as a set a.ClosingStock='"
									+ stockdis.add(new BigDecimal(""
											+ qtyIssued.get(i)))
											+ "'  where a.Department.Id='"
											+ departmentIdTemp
											+ "'and a.Item.Id='"
											+Integer.parseInt("" + Item_id.get(i))
											+ "'and a.BatchNo='"+ batchNo.get(i)+"' and a.Hospital.Id='"+ hospitalId+"'";
								
								Query query4 = session.createQuery(hql4);
								int row4 = query4.executeUpdate();
							}
						}else{
							StoreItemBatchStock sibs= new StoreItemBatchStock();
							MasStoreItem masStoreItem1 = new MasStoreItem();
							//masStoreItem1.setId(Integer.parseInt("" + box.get("itemId")));

							masStoreItem1.setId(Integer.parseInt("" + Item_id.get(i)));
							sibs.setItem(masStoreItem1);
							sibs.setBatchNo("" + batchNo.get(i));
							MasDepartment masDepartment3 = new MasDepartment();
							masDepartment3.setId(Integer.parseInt(""
									+ box.get("departmentIdTemp")));
							sibs.setDepartment(masDepartment3);


							// add javed khan hospitalId
							MasHospital masHospital = new MasHospital();
							masHospital.setId(hospitalId);
							sibs.setHospital(masHospital);

							SimpleDateFormat formatterIn1 = new SimpleDateFormat(
							"dd/MM/yyyy");
							SimpleDateFormat formatterOut1 = new SimpleDateFormat(
							"yyyy-MM-dd");
							String date4MySQL1 = "";
							try {
								date4MySQL1 = formatterOut1.format(formatterIn1
										.parse(expDate.get(i).toString()));
							} catch (ParseException e1) {

								e1.printStackTrace();
							}
							Date expDateT1 = java.sql.Date.valueOf(date4MySQL1);
							try {
								sibs.setExpiryDate(expDateT1);
							} catch (Exception e) {
								sibs.setExpiryDate(null);
							}

							sibs.setClosingStock(new BigDecimal(""
									+ qtyIssued.get(i)));
							sibs.setLoanInQty(new BigDecimal(""
									+ qtyIssued.get(i)));


							MasStoreBrand brand1 = new MasStoreBrand();
							if(!brandId.get(i).equals("") && brandId.get(i) != null){
								brand1.setId(Integer.parseInt("" + brandId.get(i)));
							}else{
								brand1.setId(Integer.parseInt("3982"));
							}
							sibs.setBrand(brand1);
							costprice = new BigDecimal("0");
							sibs.setCostPrice(new BigDecimal("" + costprice));


							hbt.save(sibs);
							hbt.refresh(sibs);

						}

						Query query2 = session.createQuery(hql2);
						int row2 = query2.executeUpdate();
						Query query3 = session.createQuery(hql3);
						int row3 = query3.executeUpdate();
					}
				}
			}

			/*String qry = "select id from store_issue_m where issue_no='"
					+ issueNo + "' and issue_type='l' and department_id='"
					+ deptId + "' and to_store='" + departmentIdTemp + "';";
			List objectList = (List) session.createSQLQuery(qry).list();
			issueId = Integer.parseInt("" + objectList.get(0));*/

			Criteria c = session.createCriteria(StoreFyDocumentNo.class).add(
					Restrictions.eq("Department.Id", deptId)).add(
							Restrictions.eq("Hospital.Id", hospitalId));
			storeFyDocumentNoList = c.list();
			for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
				storeFyId = documentNo.getId();
			}
			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
			.load(StoreFyDocumentNo.class, storeFyId);
			storeFyDocumentNo.setIssueLoanoutNo(issueNo);
			hbt.update(storeFyDocumentNo);
			// --------------Transaction End----------
			tx.commit();

			successfullyAdded = "y";


		} catch (RuntimeException e) {
			if (tx != null)
				tx.rollback();
			//tx.commit();
			e.printStackTrace();
		} finally {
			// //session.close();
		}



		// --------------Transaction End----------

		map.put("successfullyAdded", successfullyAdded);
		map.put("issueId", issueId);
		return map;
	}

	/*
	 * ---------------------End of methods for loan out
	 * functionality----------------------------
	 *
	 * @see jkt.hms.stores.dataservice.StoresDataService#showIssueDispensaryManualJsp(java.util.Map)
	 */

	public Map<String, Object> fillItemsForIssueToDispensary(
			Map<String, Object> dataMap) {

		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		String pvmsNo = null;
		int deptId = 0;
		int hospitalId = 0;
		pvmsNo = "" + dataMap.get("pvmsNo");

		deptId = Integer.parseInt("" + dataMap.get("deptId"));
		hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));  // add javed khan
		BigDecimal stock = new BigDecimal(0);
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
		SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
		String date4MySQL = null;
		try {
			date4MySQL = formatterOut.format(formatterIn.parse(date));
		} catch (Exception e1) {

			e1.printStackTrace();
		}
		Date datestr = java.sql.Date.valueOf(date4MySQL);
		//String issueDate=sdf.format(datestr);
		SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
		String issueDate=sdf.format(datestr);
		// javed khan
		List<StoreItemBatchStock> batchList = new ArrayList<StoreItemBatchStock>();

		//Date issueDate = java.sql.Date.valueOf(date4MySQL);

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			String queryString = null;
			String str = "" + dataMap.get("nomenclature");


			String sqlQry="select  msi.ITEM_TYPE_ID  from mas_store_item msi  where upper(msi.PVMS_NO)=UPPER('"+pvmsNo+"')";

			List nivList=session.createSQLQuery(sqlQry).list();
		
				itemList = session.createCriteria(MasStoreItem.class)
				.add(Restrictions.eq("PvmsNo", pvmsNo).ignoreCase()).add(Restrictions.or(Restrictions.eq("Hospital.Id", hospitalId), Restrictions.eq("Hospital.Id", 0)))
				.add(Restrictions.eq("Status", "y")).list();

				/*if((Integer.parseInt((""+nivList.get(0)))) == 1){

			}else{
				itemList = session.createCriteria(MasStoreItem.class)
				.add(Restrictions.eq("PvmsNo", pvmsNo).ignoreCase())
				.add(Restrictions.eq("Status", "y")).list();
			}*/



			/*Criteria c = session.createCriteria(MasStoreItem.class).add(
					Restrictions.like("PvmsNo", pvmsNo).ignoreCase()).add(
					Restrictions.eq("Hospital.Id", hospitalId)).add(
					Restrictions.eq("Status", "y"));
			itemList = c.list();*/

			if (itemList != null && itemList.size() > 0) {
				int itemId = itemList.get(0).getId();
				String str3 = "select sum(a.closing_stock) from store_item_batch_stock a,mas_store_item i " +
				" where a.item_id=i.item_id and a.item_id = '"
				+ itemId
				+ "' and a.department_id='"
				+ deptId
				+"' and a.hospital_id='"
				+ hospitalId
				+ "' and a.expiry_date > '"
				+issueDate
				+ "' and a.closing_stock >0 "
				+ " group by a.item_id ";


				List stockAvailableList = session.createSQLQuery(str3).list();

				// javed khan

				
				Date today = new Date();
				Criteria c4 = session.createCriteria(StoreItemBatchStock.class)
				.add(Restrictions.eq("Item.Id", itemId))
				.add(Restrictions.eq("Hospital.Id", hospitalId))
				.add(Restrictions.eq("Department.Id", deptId))
				.add(Restrictions.gt("ExpiryDate", today))
				.add(Restrictions.gt("ClosingStock", new BigDecimal(0.0)));  // add javed khan
				batchList = c4.list();



				if (stockAvailableList.size() > 0
						&& stockAvailableList.get(0) != null) {
					stock = (BigDecimal) stockAvailableList.get(0);
				} else {
					stock = new BigDecimal("0");
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("batchList", batchList);
		map.put("itemList", itemList);
		map.put("stock", stock);
		return map;

	}

	// ----------------------------End Of Issues To Dispensary Loan Out
	// -----------Start Of Issues To Other Units on Surplus (CIV) ------
	public Map printIssueToOtherUnits(int issue_m_id) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIssueM> storeIssueMList = new ArrayList<StoreIssueM>();
		session = (Session) getSession();
		List<StoreIndentM> indentMList = new ArrayList<StoreIndentM>();
		Connection con = session.connection();
		String demanNo = "";
		String accountingUnit = "";
		String recieptVoucherNo = "";
		String period1 = "";
		String period2 = "";
		String unit1 = "";
		String unit2 = "";
		String hosp_address1 = "";
		String address2 = "";
		String depotNo = "";
		String civNo = "";
		String dated = "";
		String Hosp_Name = "";
		try {
			storeIssueMList = getHibernateTemplate().find(
					" from jkt.hms.masters.business.StoreIssueM as sim where sim.Id='"
					+ issue_m_id + "'");
			for (StoreIssueM storeIssueM : storeIssueMList) {
				Hosp_Name = storeIssueM.getHospital().getHospitalName();
				demanNo = "" + storeIssueM.getIssueNo();
				accountingUnit = "";
				recieptVoucherNo = "" + storeIssueM.getDocNo();
				period1 = "";
				period2 = "";
				unit1 = "" + storeIssueM.getToUnit().getAirForceDepotName();
				unit2=""+storeIssueM.getToUnit().getAirForceDepotName();
				hosp_address1 = ""+storeIssueM.getHospital().getAddress();
				address2 = ""+storeIssueM.getHospital().getAddress();
				civNo = "EXt. " + storeIssueM.getIssueNo();
				dated = ""
					+ HMSUtil.changeDateToddMMyyyy(storeIssueM
							.getIssueDate());
				unit2 = "" + storeIssueM.getToUnit().getAirForceDepotName();
				depotNo = "";

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("demandNo", demanNo);
		map.put("accountingUnit", "");
		map.put("recieptVoucherNo", recieptVoucherNo);
		map.put("period1", period1);
		map.put("period2", period2);
		map.put("unit1", unit1);
		map.put("unit2", unit2);
		map.put("address1", hosp_address1);
		map.put("address2", address2);
		map.put("depotNo", depotNo);
		map.put("civNo", civNo);
		map.put("dated", dated);
		map.put("conn", con);
		map.put("Hosp_Name", Hosp_Name);
		return map;

	}

	public Map addBrandDetailsToOtherUnits(Box box)
	{
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		if (box.get("deptId") != null) {
			deptId = Integer.parseInt("" + box.get("deptId"));
		}
		if (box.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + box.get("hospitalId"));
		}

		Map map = new HashMap();
		int itemId = 0;
		int detailId = 0;
		int itemIssuedIdArray[] = null;
		String qtyIssuedTempArray[] = null;
		List<StoreIssueT> storeIssueTList = new ArrayList<StoreIssueT>();
		String successfullyAdded = "n";
		int issueId = 0;
		session = (Session) getSession();
		Transaction tx = null;

		try {
			// --------------Transaction Started----------
			tx = session.beginTransaction();

			Vector brandId = box.getVector(BRAND_ID);
			Vector qtyIssued = box.getVector(QTY_ISSUED);
			Vector remarks = box.getVector(RequestConstants.REMARKS);
			Vector batchNo = box.getVector(RequestConstants.BATCH_NO);
			Vector expDate = box.getVector(RequestConstants.EXPIRY_DATE);
			Vector costPrice = box.getVector(RequestConstants.COST_PRICE);

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			String issueNo = "" + box.get("issueNo");
			issueId = Integer.parseInt("" + box.get("issueId"));
			int departmentIdTemp = Integer.parseInt(""
					+ box.get("departmentIdTemp"));
			StoreIssueM storeIssueM = new StoreIssueM();
			if (issueId == 0) {
				storeIssueM.setIssueType("o");
				storeIssueM.setIssueNo(box.get("issueNo"));
				SimpleDateFormat formatterIn = new SimpleDateFormat(
				"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
				"yyyy-MM-dd");
				String dd = "" + box.get("issueDate");

				String date4MySQL = "";
				try {
					date4MySQL = formatterOut.format(formatterIn.parse(dd));
				} catch (ParseException e) {

					e.printStackTrace();
				}

				java.sql.Date issueDate = java.sql.Date.valueOf(date4MySQL);
				storeIssueM.setIssueDate(issueDate);
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				storeIssueM.setDepartment(masDepartment);
				MasStoreAirForceDepot masStoreAirForceDepot = new MasStoreAirForceDepot();

				masStoreAirForceDepot.setId(departmentIdTemp);
				storeIssueM.setToUnit(masStoreAirForceDepot);
				storeIssueM.setRequestNo(null);
				storeIssueM.setRequestDate(null);

				MasEmployee masEmployee = new MasEmployee();
				masEmployee.setId(Integer.parseInt("" + box.get("requestBy")));
				storeIssueM.setRequestBy(masEmployee);

				MasEmployee masEmployee2 = new MasEmployee();
				masEmployee2.setId(Integer.parseInt("" + box.get("issuedBy")));
				storeIssueM.setIssuedBy(masEmployee2);

				MasEmployee masEmployee3 = new MasEmployee();
				masEmployee3
				.setId(Integer.parseInt("" + box.get("approvedBy")));
				storeIssueM.setApprovedBy(masEmployee3);
				storeIssueM.setStatus("o");
				storeIssueM.setDocNo(box.get("docNo"));
				storeIssueM.setToDepot(null);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(Integer.parseInt("" + box.get("hospitalId")));
				storeIssueM.setHospital(masHospital);
				storeIssueM.setLastChgBy(box.get("changed_by"));
				storeIssueM.setLastChgDate(issueDate);
				storeIssueM.setLastChgTime(box.get("changed_time"));

				hbt.save(storeIssueM);
				hbt.refresh(storeIssueM);
			} else {
				storeIssueM.setId(issueId);
			}
			for (int i = 0; i < brandId.size(); i++) {
				if (Integer.parseInt("" + qtyIssued.get(i)) != 0) {
					StoreIssueT storeIssueT = new StoreIssueT();

					MasStoreItem masStoreItem = new MasStoreItem();
					masStoreItem
					.setId(Integer.parseInt("" + box.get("itemId")));
					storeIssueT.setItem(masStoreItem);
					storeIssueT.setQtyRequest(new BigDecimal(0));
					storeIssueT.setItem(masStoreItem);
					storeIssueT.setBatchNo("" + batchNo.get(i));
					storeIssueT.setQtyIssued(new BigDecimal(""
							+ qtyIssued.get(i)));
					storeIssueT.setCostPrice(new BigDecimal(costPrice.get(i)
							.toString()));
					storeIssueT.setRemarks(box.get("remarks"));
					try {
						storeIssueT
						.setExpiryDate(new Date("" + expDate.get(i)));
					} catch (Exception e) {
						storeIssueT.setExpiryDate(null);
					}

					MasStoreBrand brand = new MasStoreBrand();
					brand.setId(Integer.parseInt("" + brandId.get(i)));
					storeIssueT.setBrand(brand);
					if (("" + remarks.get(i)).equals("emptyString")) {
						storeIssueT.setRemarks(null);
					} else {
						storeIssueT.setRemarks("" + remarks.get(i));
					}

					storeIssueT.setIssueM(storeIssueM);
					storeIssueT.setSrNo(0);
					storeIssueT.setIssued("y");
					storeIssueT.setItemIssued(masStoreItem);
					hbt.save(storeIssueT);
					hbt.refresh(storeIssueT);

					// --------------------------Start of Stock
					// Updating--------------------------
					BigDecimal stock = new BigDecimal(0);
					BigDecimal issueQty = new BigDecimal(0);

					String qry3 = "select closing_stock,issue_qty from store_item_batch_stock where brand_id= "
						+ brandId.get(i).toString()
						+ " and item_id = "
						+ box.getInt("itemId")
						+ " and batch_no = '"
						+ batchNo.get(i).toString()
						+ "' and cost_price = "
						+ Double.parseDouble(costPrice.get(i).toString())
						+ " and department_id = " + deptId;
					List c2 = (List) session.createSQLQuery(qry3).list();

					if (c2 != null && c2.size() > 0) {
						Object[] object = (Object[]) c2.get(0);
						if (object[0] == null) {
							stock = new BigDecimal("0");
						} else {
							stock = (BigDecimal) object[0];
						}

						if (object[1] == null) {
							issueQty = new BigDecimal("0");
						} else {
							issueQty = (BigDecimal) object[1];
						}

						String hql2 = "update from jkt.hms.masters.business.StoreItemBatchStock  as a set a.ClosingStock='"
							+ stock.subtract(new BigDecimal(""
									+ qtyIssued.get(i)))
									+ "'  where a.Brand.Id='"
									+ brandId.get(i).toString()
									+ "' and a.Item.Id = "
									+ box.getInt("itemId")
									+ " and a.BatchNo = '"
									+ batchNo.get(i).toString()
									+ "' and a.CostPrice = "
									+ Double.parseDouble(costPrice.get(i)
											.toString())
											+ " and a.Department.Id = " + deptId;
						String hql3 = "update from jkt.hms.masters.business.StoreItemBatchStock  as a set a.IssueQty='"
							+ issueQty.add(new BigDecimal(""
									+ qtyIssued.get(i)))
									+ "'  where a.Brand.Id='"
									+ brandId.get(i).toString()
									+ "' and a.Item.Id = "
									+ box.getInt("itemId")
									+ " and a.BatchNo = '"
									+ batchNo.get(i).toString()
									+ "' and a.CostPrice = "
									+ Double.parseDouble(costPrice.get(i)
											.toString())
											+ " and a.Department.Id = " + deptId;
						Query query2 = session.createQuery(hql2);
						int row2 = query2.executeUpdate();
						Query query3 = session.createQuery(hql3);
						int row3 = query3.executeUpdate();
					}
					// --------------------------Start of Stock
					// Updating--------------------------

				}
			}

			String qry = "select id from store_issue_m where issue_no='"
				+ issueNo + "' and issue_type='o' and department_id='"
				+ deptId + "' and to_unit='" + departmentIdTemp + "';";
			List objectList = (List) session.createSQLQuery(qry).list();
			issueId = Integer.parseInt("" + objectList.get(0));

			List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
			int storeFyId = 0;
			Criteria c = session.createCriteria(StoreFyDocumentNo.class).add(
					Restrictions.eq("Department.Id", deptId));
			storeFyDocumentNoList = c.list();
			for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
				storeFyId = documentNo.getId();
			}
			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
			.load(StoreFyDocumentNo.class, storeFyId);
			storeFyDocumentNo.setIssueOtherUnitsNo(issueNo);
			hbt.update(storeFyDocumentNo);

			// --------------Transaction End----------
			tx.commit();
			successfullyAdded = "y";
		} catch (RuntimeException e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();
		} finally {
			// //session.close();
		}

		map.put("successfullyAdded", successfullyAdded);
		map.put("issueId", issueId);
		return map;
	}

	public Map<String, Object> openDeletePopupForIssueToOtherUnits(Map dataMap) {
		Map map = new HashMap();
		int departmentIdTemp = 0;
		int deptId = 0;
		List<StoreIssueM> deleteStoreIssueList = new ArrayList<StoreIssueM>();
		HibernateTemplate hbt = getHibernateTemplate();
		if (dataMap.get("departmentIdTemp") != null) {
			departmentIdTemp = Integer.parseInt(""
					+ dataMap.get("departmentIdTemp"));
		}
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}

		hbt.setFlushModeName("FLUSH_EAGER");
		deleteStoreIssueList = hbt
		.find("from jkt.hms.masters.business.StoreIssueM as sim where  sim.IssueType='o' and sim.Status='o' and sim.Department.Id="
				+ deptId);
		map.put("deleteStoreIssueList", deleteStoreIssueList);
		return map;
	}

	public Map showDeleteIsuueToOtherUnits(Box box) {

		List<StoreIssueT> deleteStoreIssueList = new ArrayList<StoreIssueT>();
		StoreIssueT storeIssueT = new StoreIssueT();
		Map map = new HashMap();
		HibernateTemplate hbt = getHibernateTemplate();
		session = (Session) getSession();
		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		int departmentIdTemp = 0;
		int deptId = 0;
		deptId = Integer.parseInt("" + box.get("deptId"));
		departmentIdTemp = Integer.parseInt("" + box.get("issueId"));

		hbt.setFlushModeName("FLUSH_EAGER");
		int issueId = 0;
		if (box.get("issueId") != null) {
			issueId = Integer.parseInt("" + box.get("issueId"));
		}

		String qry = "SELECT i.item_id,item.nomenclature,item2.nomenclature,i.qty_request,i.qty_issued,i.issue_m_id, i.id, brand.brand_name, i.batch_no FROM store_issue_t i,mas_store_item item,mas_store_item item2, mas_store_brand brand where i.issue_m_id='"
			+ issueId
			+ "' and item.item_id=i.item_id and i.brand_id = brand.brand_id and item2.item_id=i.item_issued and i.issued='y' order by i.item_id";
		List objectList = (List) session.createSQLQuery(qry).list();

		int id = 0;
		String nomenclature = null;
		int itemId = 0;
		int detailId = 0;
		String issuedItemName = null;
		String brandName = null;
		BigDecimal requestedQty = null;
		BigDecimal issuedQty = null;
		String batchNo = null;
		int issueMId = 0;
		int issueTId = 0;

		for (Iterator iterator = objectList.iterator(); iterator.hasNext();) {
			Object[] object = (Object[]) iterator.next();

			try {
				itemId = (Integer) object[0];
			} catch (Exception e) {
				e.printStackTrace();
				itemId = 0;
			}
			try {
				nomenclature = (String) object[1];
			} catch (Exception e) {
				nomenclature = "";
			}
			try {
				issuedItemName = (String) object[2];
			} catch (Exception e) {
				e.printStackTrace();
				issuedItemName = "";
			}
			try {
				requestedQty = new BigDecimal("" + object[3]);
			} catch (Exception e) {
				requestedQty = new BigDecimal("" + 0);
			}

			try {
				issuedQty = new BigDecimal("" + object[4]);
			} catch (Exception e) {
				e.printStackTrace();
				issuedQty = new BigDecimal("" + 0);
			}

			try {
				issueMId = (Integer) object[5];
			} catch (Exception e) {
				e.printStackTrace();
				issueMId = 0;
			}

			try {
				issueTId = (Integer) object[6];
			} catch (Exception e) {
				e.printStackTrace();
				issueTId = 0;
			}

			try {
				brandName = (String) object[7];
			} catch (Exception e) {
				e.printStackTrace();
				brandName = "";
			}

			try {
				batchNo = (String) object[8];
			} catch (Exception e) {
				e.printStackTrace();
				batchNo = "";
			}

			hData = new HashMap<String, Object>();

			hData.put("nomenclature", nomenclature);
			hData.put("issuedItemName", issuedItemName);
			hData.put("requestedQty", requestedQty);
			hData.put("issuedQty", issuedQty);
			hData.put("itemId", itemId);
			hData.put("issueMId", issueMId);
			hData.put("issueTId", issueTId);
			hData.put("brandName", brandName);
			hData.put("batchNo", batchNo);

			vResult.add(hData);
		}

		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}

		try {
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);
		} catch (Exception e) {
			e.printStackTrace();
		}
		deleteStoreIssueList = hbt
		.find("from jkt.hms.masters.business.StoreIssueM as sim where  sim.IssueType='o'  and sim.Status='o' and sim.Department.Id='"
				+ deptId + "'");
		map.put("deleteStoreIssueList", deleteStoreIssueList);
		map.put("pagedArray", pagedArray);
		return map;

	}

	public Map deleteIssueToOtherUnitsItems(Box box) {
		int deptId = 0;
		deptId = Integer.parseInt("" + box.get("deptId"));
		List<StoreIssueT> storeTenderTList = new ArrayList<StoreIssueT>();
		StoreIssueT storeIssueT = new StoreIssueT();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIssueT> deleteStoreIssueList = new ArrayList<StoreIssueT>();
		Session session = (Session) getSession();
		Transaction tx = null;
		try {
			// --------------Transaction Started----------
			tx = session.beginTransaction();
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			Vector id = box.getVector("id");
			Vector nomenclature = box.getVector("nomenclature");
			Vector delete = box.getVector("items_to_be_deleted");
			Vector itemId = box.getVector("itemId");
			Vector issueMId = box.getVector("issueMId");
			Vector qtyInReq = box.getVector("requestedQty");
			Vector issuedQty = box.getVector("issuedQty");
			BigDecimal stock = new BigDecimal(0);
			BigDecimal issueQty = new BigDecimal(0);
			String obj = null;
			int tempBrandId = 0;

			for (int i = 0; i < delete.size(); i++) {
				StoreIssueT storeIssueT2 = new StoreIssueT();
				int issueTId = Integer.parseInt(delete.get(i).toString());
				// int issueId = Integer.parseInt(issueMId.get(i).toString());
				int item_id = Integer.parseInt(itemId.get(i).toString());
				BigDecimal qtyReq = new BigDecimal(qtyInReq.get(i).toString());
				List<StoreIssueT> tempList = new ArrayList<StoreIssueT>();

				// --------------------------Start of Stock
				// Updating--------------------------

				tempList = hbt
				.find("from jkt.hms.masters.business.StoreIssueT as a where a.Id="
						+ issueTId);

				for (StoreIssueT storeIssueT3 : tempList) {
					if (storeIssueT3.getBrand() != null) {
						tempBrandId = storeIssueT3.getBrand().getId();
						BigDecimal bigDecimal = storeIssueT3.getQtyIssued();
						String batchNo = storeIssueT3.getBatchNo();
						BigDecimal costPrice = storeIssueT3.getCostPrice();
						int itemIdFromT = storeIssueT3.getItem().getId();
						String qry2 = "select closing_stock,issue_qty from store_item_batch_stock where brand_id="
							+ tempBrandId
							+ " and item_id= "
							+ itemIdFromT
							+ " and batch_no='"
							+ batchNo
							+ "' and cost_price="
							+ costPrice
							+ " and department_id = " + deptId;
						List c = (List) session.createSQLQuery(qry2).list();

						if (c != null && c.size() > 0) {
							Object[] object = (Object[]) c.get(0);

							if (object[0] == null) {
								stock = new BigDecimal("0");
							} else {
								stock = (BigDecimal) object[0];
							}

							if (object[1] == null) {
								issueQty = new BigDecimal("0");
							} else {
								issueQty = (BigDecimal) object[1];
							}
						}

						stock = stock.add(bigDecimal);
						issueQty = issueQty.subtract(bigDecimal);

						List storeItemList = session.createCriteria(
								StoreItemBatchStock.class).createAlias("Item",
								"item").createAlias("Brand", "brand").add(
										Restrictions.eq("BatchNo", batchNo)).add(
												Restrictions.eq("item.Id", itemIdFromT)).add(
														Restrictions.eq("brand.Id", tempBrandId)).add(
																Restrictions.eq("CostPrice", costPrice)).add(
																		Restrictions.eq("Department.Id", deptId))
																		.list();

						StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock) storeItemList
						.get(0);
						int storeId = storeItemBatchStock.getId();
						StoreItemBatchStock storeItemBatchStock2 = (StoreItemBatchStock) hbt
						.load(StoreItemBatchStock.class, storeId);
						storeItemBatchStock2.setClosingStock(stock);
						storeItemBatchStock2.setIssueQty(issueQty);
						hbt.update(storeItemBatchStock2);
						hbt.refresh(storeItemBatchStock2);

						String hql = "delete from jkt.hms.masters.business.StoreIssueT as a where a.Id='"
							+ issueTId + "' ";
						Query query = session.createQuery(hql);
						int row = query.executeUpdate();
					}
				}
			}

			map.put("total_records", id.size());
			map.put("deleted_records", delete.size());

			tx.commit();
		} catch (Exception e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();

		}

		if (Integer.parseInt(map.get("total_records").toString()) == Integer
				.parseInt(map.get("deleted_records").toString())) {
			if (box.getInt("currPage") > 1)
				box.put("currPage", box.getInt("currPage") - 1);
		}

		map = showDeleteIsuueToOtherUnits(box);
		return map;

	}

	public Map showIssueToOtherUnitsJsp(Map<String, Object> dataMap) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("userName") != null) {
			userName = ("" + dataMap.get("userName"));
		}

		Map map = new HashMap();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		// Commneted by Vinay previously we are issue the items to airforceDepot but now we 'll be issue the items to SMC(Hospital)
		//List<MasStoreAirForceDepot> masStoreAirForceDepotList = new ArrayList<MasStoreAirForceDepot>();
		
		List<MasHospital> masStoreAirForceDepotList = new ArrayList<MasHospital>();
		
		//List<MasStoreAirForceDepot> masStoreAirForceDepotList = new ArrayList<MasStoreAirForceDepot>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<MasStoreBrand> masStoreBrandList = new ArrayList<MasStoreBrand>();
		// List <Patient> patientList=new ArrayList<Patient>();
		List<StoreIssueM> searchListForPopup = new ArrayList<StoreIssueM>();
		String max = "";
		String startNo = "";
		String no = "";
		try {
			// patientList=getHibernateTemplate().find("from
			// jkt.hms.masters.business.Patient as pt where pt.Status='y'");
			// storeInternalIndentMList = getHibernateTemplate().find("from
			// jkt.hms.masters.business.StoreInternalIndentM");
			departmentList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasDepartment");
			masStoreAirForceDepotList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasHospital mh where mh.Status='y'");
			employeeList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasEmployee as me where me.Status='y' and  me.Hospital.Id= "
					+ hospitalId +
			" order by FirstName asc");
			storeFyDocumentNoList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.StoreFyDocumentNo ");

			storeFyDocumentNoList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"
					+ deptId + "' and sfdn.Hospital.Id='"
					+hospitalId+"'");
			for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
				if (storeFyDocumentNo.getIssueOtherUnitsNo() != null) {
					no = ("" + storeFyDocumentNo.getIssueOtherUnitsNo());
				} else {
					no = "";
				}
			}
			searchListForPopup = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreIssueM as sim where sim.IssueType='o' and sim.Status='o' and sim.Department.Id='"
					+ deptId + "' and sim.Hospital.Id='"
					+hospitalId +"'");

		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			max = getMaxNo(no);
		} catch (Exception e) {
			e.printStackTrace();
		}
		// map.put("storeInternalIndentMList", storeInternalIndentMList);
		// map.put("storeInternalIndentTList", storeInternalIndentTList);
		
		System.out.println("employeeList="+employeeList);
		map.put("departmentList", departmentList);
		map.put("masStoreAirForceDepotList", masStoreAirForceDepotList);
		map.put("employeeList", employeeList);
		map.put("max", max);
		map.put("masStoreBrandList", masStoreBrandList);
		map.put("searchListForPopup", searchListForPopup);
		// map.put("patientList",patientList);
		return map;

	}

	public Map searchIssueToOtherUnits(Box box) {
		Map map = new HashMap();
		Map pageMap = new HashMap();
		int issueId = 0;
		List<StoreIssueM> list = new ArrayList<StoreIssueM>();
		try {
			try {
				issueId = Integer.parseInt("" + box.get("issueUnit"));
			} catch (Exception e) {
				issueId = Integer.parseInt("" + box.get(ISSUE_ID));
			}

			list = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIssueM as ss where ss.Id='"
					+ issueId + "'");

			for (StoreIssueM issueM : list) {
				box.put("issueId", issueId);
				box.put("issueNo", issueM.getIssueNo());
				box.put("departmentIdTemp", issueM.getToUnit().getId());
				if(issueM.getDocNo() != null)
					box.put("docNo", issueM.getDocNo());
				if(issueM.getRequestBy() != null)
					box.put("requestBy", issueM.getRequestBy().getId());
				//box.put("approvedBy", issueM.getApprovedBy().getId());
				box.put("issuedBy", issueM.getIssuedBy().getId());
				box.put(RequestConstants.DECLARED_VIDE, issueM.getDeclaredVide());
				box.put(RequestConstants.AUTHORITY_FOR_ISSUE, issueM.getAuthorityForIssue());
				box.put(RequestConstants.COSIGNEESDEMANDNO, issueM.getConsineesDemandNo());
				box.put(REMARKS, issueM.getRemarks());

				try {
					box.put("issuedDate", HMSUtil
							.convertDateToStringWithoutTime(issueM
									.getIssueDate()));
				} catch (Exception e) {
					box.put("issuedDate", "");
				}

				try {
					box.put("demandDate", HMSUtil
							.convertDateToStringWithoutTime(issueM
									.getRequestDate()));
				} catch (Exception e) {
					box.put("demandDate", "");
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasStoreAirForceDepot> masStoreAirForceDepotList = new ArrayList<MasStoreAirForceDepot>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<MasStoreBrand> masStoreBrandList = new ArrayList<MasStoreBrand>();
		List<StoreIssueM> searchListForPopup = new ArrayList<StoreIssueM>();

		String startNo = "";
		String no = "";
		try {
			departmentList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasDepartment");
			masStoreAirForceDepotList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasStoreAirForceDepot");
			employeeList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasEmployee");
			storeFyDocumentNoList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.StoreFyDocumentNo ");
			searchListForPopup = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreIssueM as sim where sim.IssueType = 'o' and sim.Status='o' and sim.Department.Id = "
					+ box.getInt("deptId"));
		} catch (Exception e) {
			e.printStackTrace();
		}

		pageMap.put("issueId", issueId);
		pageMap.put("pageNo", box.getInt("pageNo"));
		pageMap.put("issue_type", "o");
		pageMap.put("deptId", box.getInt("deptId"));
		map = getIssueDetailPageByPageForOTAFU(pageMap);
		map.put("box", box);
		map.put("departmentList", departmentList);
		map.put("masStoreAirForceDepotList", masStoreAirForceDepotList);
		map.put("employeeList", employeeList);
		map.put("masStoreBrandList", masStoreBrandList);
		map.put("searchListForPopup", searchListForPopup);

		return map;
	}

	public Map<String, Object> getItemListThroughAjax(
			Map<String, Object> dataMap) {

		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		session = (Session) getSession();
		String pvms = null;
		String nomenclature = null;
		String strength = null;
		String au = null;
		BigDecimal qtymmf = null;
		BigDecimal annreq = null;
		int item_id = 0;

		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			String queryString = null;
			String str = "%" + dataMap.get("autoHint") + "%";
			Criteria c = session.createCriteria(MasStoreItem.class).add(
					Restrictions.like("Nomenclature", str)).add(
							Restrictions.eq("Status", "y"));
			c.setFirstResult(0);
			c.setMaxResults(10);
			itemList = c.list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;

	}

	public Map<String, Object> fillItemsForIssueToDepot(
			Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreItem> itemList1 = new ArrayList<MasStoreItem>();
		session = (Session) getSession();
		String pvmsNo = null;
		int hospitalId=0;
		
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		
		try {
			pvmsNo = "" + dataMap.get("pvmsNo");
			Criteria c = session.createCriteria(MasStoreItem.class)
					.add(Restrictions.eq("PvmsNo", pvmsNo))
					.add(Restrictions.eq("ItemType.Id", 2))
					.add(Restrictions.eq("Hospital.Id", hospitalId))
					.add(Restrictions.eq("Status", "y").ignoreCase());
					itemList = c.list();

					Criteria c2 = session.createCriteria(MasStoreItem.class)
					.add(Restrictions.eq("PvmsNo", pvmsNo))
					.add(Restrictions.eq("ItemType.Id", 1))
					.add(Restrictions.eq("Status", "y").ignoreCase());

					itemList1 = c2.list();
					itemList.addAll(itemList1);
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;
	}

	// -----------------------------------End Of Issues To Other Units on
	// Surplus (CIV) --------------------------------

	// --------------------------------Start Of Issues To Other Than Airforce
	// Units ---------------------------------

	public Map addBrandDetailsToOTAFU(Box box){
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		if (box.get("deptId") != null) {
			deptId = Integer.parseInt("" + box.get("deptId"));
		}
		if (box.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + box.get("hospitalId"));
		}

		Map map = new HashMap();
		int itemId = 0;
		int detailId = 0;
		int itemIssuedIdArray[] = null;
		String qtyIssuedTempArray[] = null;
		List<StoreIssueT> storeIssueTList = new ArrayList<StoreIssueT>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		String successfullyAdded = "n";
		int issueId = 0;
		session = (Session) getSession();
		Transaction tx = null;

		try {
			// --------------Transaction Started----------
			tx = session.beginTransaction();

			Vector brandId = box.getVector(BRAND_ID);
			Vector qtyIssued = box.getVector(QTY_ISSUED);
			Vector remarks = box.getVector(RequestConstants.REMARKS);
			Vector batchNo = box.getVector(RequestConstants.BATCH_NO);
			Vector expDate = box.getVector(RequestConstants.EXPIRY_DATE);
			Vector costPrice = box.getVector(RequestConstants.COST_PRICE);

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			String issueNo = "" + box.get("issueNo");
			issueId = Integer.parseInt("" + box.get("issueId"));
			int departmentIdTemp = Integer.parseInt(""
					+ box.get("departmentIdTemp"));
			StoreIssueM storeIssueM = new StoreIssueM();

			if (issueId == 0) {
				storeIssueM.setIssueType("x");
				storeIssueM.setIssueNo(box.get("issueNo"));
				SimpleDateFormat formatterIn = new SimpleDateFormat(
				"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
				"yyyy-MM-dd");
				String dd = "" + box.get("issueDate");
				String date4MySQL ="";
				try {
					date4MySQL = formatterOut.format(formatterIn.parse(dd));
				} catch (ParseException e) {

					e.printStackTrace();
				}
				java.sql.Date issueDate = java.sql.Date.valueOf(date4MySQL);
				storeIssueM.setIssueDate(issueDate);
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				storeIssueM.setDepartment(masDepartment);

				storeIssueM.setRequestNo(null);
				storeIssueM.setRequestDate(null);

				MasEmployee masEmployee = new MasEmployee();
				masEmployee.setId(Integer.parseInt("" + box.get("requestBy")));
				storeIssueM.setRequestBy(masEmployee);

				MasUnit masUnit = new MasUnit();
				masUnit.setId(Integer
						.parseInt("" + box.get("departmentIdTemp")));
				storeIssueM.setOtafu(masUnit);

				MasEmployee masEmployee2 = new MasEmployee();
				masEmployee2.setId(Integer.parseInt("" + box.get("issuedBy")));
				storeIssueM.setIssuedBy(masEmployee2);

				MasEmployee masEmployee3 = new MasEmployee();
				masEmployee3
				.setId(Integer.parseInt("" + box.get("approvedBy")));
				storeIssueM.setApprovedBy(masEmployee3);
				storeIssueM.setStatus("o");
				storeIssueM.setDocNo(box.get("docNo"));
				storeIssueM.setToUnit(null);
				storeIssueM.setToDepot(null);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(Integer.parseInt("" + box.get("hospitalId")));
				storeIssueM.setHospital(masHospital);
				storeIssueM.setLastChgBy(box.get("changed_by"));
				storeIssueM.setLastChgDate(issueDate);
				storeIssueM.setLastChgTime(box.get("changed_time"));

				hbt.save(storeIssueM);
				hbt.refresh(storeIssueM);
			} else {
				storeIssueM.setId(issueId);
			}

			for (int i = 0; i < brandId.size(); i++) {
				if (Integer.parseInt("" + qtyIssued.get(i)) > 0) {
					StoreIssueT storeIssueT = new StoreIssueT();

					MasStoreItem masStoreItem = new MasStoreItem();
					masStoreItem.setId(Integer.parseInt("" + box.get("itemId")));
					storeIssueT.setItem(masStoreItem);
					storeIssueT.setQtyRequest(new BigDecimal(0));
					storeIssueT.setItem(masStoreItem);
					storeIssueT.setBatchNo("" + batchNo.get(i));
					storeIssueT.setQtyIssued(new BigDecimal(""+ qtyIssued.get(i)));
					storeIssueT.setCostPrice(new BigDecimal(""+ costPrice.get(i)));
					storeIssueT.setRemarks(box.get("remarks"));
					try {
						storeIssueT.setExpiryDate(new Date("" + expDate.get(i)));
					} catch (Exception e) {
						storeIssueT.setExpiryDate(null);
					}
					MasStoreBrand brand = new MasStoreBrand();
					brand.setId(Integer.parseInt("" + brandId.get(i)));
					storeIssueT.setBrand(brand);
					if (("" + remarks.get(i)).equals("emptyString")) {
						storeIssueT.setRemarks(null);
					} else {
						storeIssueT.setRemarks("" + remarks.get(i));
					}

					storeIssueT.setIssueM(storeIssueM);
					storeIssueT.setSrNo(0);
					storeIssueT.setIssued("y");
					storeIssueT.setItemIssued(masStoreItem);
					hbt.save(storeIssueT);
					hbt.refresh(storeIssueT);

					// --------------------------Start of Stock
					// Updating--------------------------
					BigDecimal stock = null;
					BigDecimal issueQty = null;

					String qry3 = "select closing_stock,issue_qty from store_item_batch_stock where brand_id= "
						+ brandId.get(i).toString()
						+ " and item_id = "
						+ box.getInt("itemId")
						+ " and batch_no = '"
						+ batchNo.get(i).toString()
						+ "' and cost_price = "
						+ Double.parseDouble(costPrice.get(i).toString())
						+ " and department_id = " + deptId;
					List c2 = (List) session.createSQLQuery(qry3).list();

					if (c2 != null && c2.size() > 0) {
						Object[] object = (Object[]) c2.get(0);
						if (object[0] == null) {
							stock = new BigDecimal("0");
						} else {
							stock = (BigDecimal) object[0];
						}

						if (object[1] == null) {
							issueQty = new BigDecimal("0");
						} else {
							issueQty = (BigDecimal) object[1];
						}

						String hql2 = "update from jkt.hms.masters.business.StoreItemBatchStock  as a set a.ClosingStock='"
							+ stock.subtract(new BigDecimal(""
									+ qtyIssued.get(i)))
									+ "'  where a.Brand.Id='"
									+ brandId.get(i).toString()
									+ "' and a.Item.Id = "
									+ box.getInt("itemId")
									+ " and a.BatchNo = '"
									+ batchNo.get(i).toString()
									+ "' and a.CostPrice = "
									+ Double.parseDouble(costPrice.get(i)
											.toString())
											+ " and a.Department.Id = " + deptId;
						String hql3 = "update from jkt.hms.masters.business.StoreItemBatchStock  as a set a.IssueQty='"
							+ issueQty.add(new BigDecimal(""
									+ qtyIssued.get(i)))
									+ "'  where a.Brand.Id='"
									+ brandId.get(i).toString()
									+ "' and a.Item.Id = "
									+ box.getInt("itemId")
									+ " and a.BatchNo = '"
									+ batchNo.get(i).toString()
									+ "' and a.CostPrice = "
									+ Double.parseDouble(costPrice.get(i)
											.toString())
											+ " and a.Department.Id = " + deptId;
						Query query2 = session.createQuery(hql2);
						int row2 = query2.executeUpdate();
						Query query3 = session.createQuery(hql3);
						int row3 = query3.executeUpdate();
					}

					// --------------------------End of Stock
					// Updating--------------------------

				}
			}
			String qry = "select id from store_issue_m where issue_no='"
				+ issueNo + "' and issue_type='x' and department_id='"
				+ deptId + "' and otafu='" + departmentIdTemp + "'";
			List objectList = (List) session.createSQLQuery(qry).list();
			issueId = Integer.parseInt("" + objectList.get(0));

			int storeFyId = 0;
			Criteria c = session.createCriteria(StoreFyDocumentNo.class).add(
					Restrictions.eq("Department.Id", deptId));
			storeFyDocumentNoList = c.list();
			for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
				storeFyId = documentNo.getId();
			}

			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
			.load(StoreFyDocumentNo.class, storeFyId);
			storeFyDocumentNo.setIssueOtafuNo(issueNo);
			hbt.update(storeFyDocumentNo);

			// --------------Transaction End----------
			tx.commit();
			successfullyAdded = "y";
		} catch (RuntimeException e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();
		} finally {
			// //session.close();
		}

		map.put("successfullyAdded", successfullyAdded);
		map.put("issueId", issueId);
		return map;
	}

	public Map<String, Object> openDeletePopupForIssueToOTAFU(Map dataMap) {
		Map map = new HashMap();
		int deptId = 0;
		session = (Session) getSession();
		List<StoreIssueM> deleteStoreIssueList = new ArrayList<StoreIssueM>();
		HibernateTemplate hbt = getHibernateTemplate();
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}

		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {
			Criteria c = session.createCriteria(StoreIssueM.class).add(
					Restrictions.eq("IssueType", "x")).add(
							Restrictions.eq("Status", "o")).add(
									Restrictions.eq("Department.Id", deptId));
			c.setFirstResult(0);
			c.setMaxResults(10);
			deleteStoreIssueList = c.list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("deleteStoreIssueList", deleteStoreIssueList);
		map.put("deptId", deptId);
		return map;
	}

	public Map showDeleteIsuueToOTAFU(Box box) {
		int deptId = 0;
		deptId = Integer.parseInt("" + box.get("deptId"));
		List<StoreIssueT> deleteStoreIssueList = new ArrayList<StoreIssueT>();
		StoreIssueT storeIssueT = new StoreIssueT();
		Map map = new HashMap();
		HibernateTemplate hbt = getHibernateTemplate();
		session = (Session) getSession();
		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		int departmentIdTemp = 0;

		departmentIdTemp = Integer.parseInt("" + box.get("departmentIdTemp"));

		hbt.setFlushModeName("FLUSH_EAGER");
		int issueId = 0;
		if (box.get("issueId") != null) {
			issueId = Integer.parseInt("" + box.get("issueId"));
		}

		String qry = "SELECT i.item_id,item.nomenclature,item2.nomenclature,i.qty_request,i.qty_issued,i.issue_m_id, i.id, brand.brand_name, i.batch_no FROM store_issue_t i,mas_store_item item,mas_store_item item2, mas_store_brand brand where i.issue_m_id='"
			+ issueId
			+ "' and item.item_id=i.item_id and i.brand_id = brand.brand_id and item2.item_id=i.item_issued and i.issued='y' order by i.item_id";
		List objectList = (List) session.createSQLQuery(qry).list();

		int id = 0;
		String nomenclature = null;
		int itemId = 0;
		int detailId = 0;
		String issuedItemName = null;
		String brandName = null;
		String batchNo = null;
		BigDecimal requestedQty = null;
		BigDecimal issuedQty = null;
		int issueMId = 0;
		int issueTId = 0;

		for (Iterator iterator = objectList.iterator(); iterator.hasNext();) {
			Object[] object = (Object[]) iterator.next();

			try {
				itemId = (Integer) object[0];
			} catch (Exception e) {
				e.printStackTrace();
				itemId = 0;
			}
			try {
				nomenclature = (String) object[1];
			} catch (Exception e) {
				nomenclature = "";
			}
			try {
				issuedItemName = (String) object[2];
			} catch (Exception e) {
				e.printStackTrace();
				issuedItemName = "";
			}
			try {
				requestedQty = new BigDecimal("" + object[3]);
			} catch (Exception e) {
				requestedQty = new BigDecimal("" + 0);
			}

			try {
				issuedQty = new BigDecimal("" + object[4]);
			} catch (Exception e) {
				e.printStackTrace();
				issuedQty = new BigDecimal("" + 0);
			}

			try {
				issueMId = (Integer) object[5];
			} catch (Exception e) {
				e.printStackTrace();
				issueMId = 0;
			}

			try {
				issueTId = (Integer) object[6];
			} catch (Exception e) {
				e.printStackTrace();
				issueTId = 0;
			}

			try {
				brandName = (String) object[7];
			} catch (Exception e) {
				e.printStackTrace();
				brandName = "";
			}

			try {
				batchNo = (String) object[8];
			} catch (Exception e) {
				e.printStackTrace();
				batchNo = "";
			}

			hData = new HashMap<String, Object>();

			hData.put("nomenclature", nomenclature);
			hData.put("issuedItemName", issuedItemName);
			hData.put("requestedQty", requestedQty);
			hData.put("issuedQty", issuedQty);
			hData.put("itemId", itemId);
			hData.put("issueMId", issueMId);
			hData.put("issueTId", issueTId);
			hData.put("brandName", brandName);
			hData.put("batchNo", batchNo);
			vResult.add(hData);
		}

		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}

		try {
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			Criteria c = session.createCriteria(StoreIssueM.class).add(
					Restrictions.eq("IssueType", "x")).add(
							Restrictions.eq("Status", "o")).add(
									Restrictions.eq("Department.Id", deptId));
			c.setFirstResult(0);
			c.setMaxResults(10);
			deleteStoreIssueList = c.list();
		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("deleteStoreIssueList", deleteStoreIssueList);
		map.put("pagedArray", pagedArray);
		return map;

	}

	public Map deleteIssueToOTAFU(Box box) {
		int deptId = 0;
		deptId = Integer.parseInt("" + box.get("deptId"));
		List<StoreIssueT> storeTenderTList = new ArrayList<StoreIssueT>();
		StoreIssueT storeIssueT = new StoreIssueT();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIssueT> deleteStoreIssueList = new ArrayList<StoreIssueT>();
		int departmentIdTemp = 0;
		Session session = (Session) getSession();
		Transaction tx = null;
		try {
			// --------------Transaction Started----------
			tx = session.beginTransaction();

			departmentIdTemp = Integer.parseInt(""
					+ box.get("departmentIdTemp"));

			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			Vector id = box.getVector("id");
			Vector nomenclature = box.getVector("nomenclature");
			Vector delete = box.getVector("items_to_be_deleted");
			Vector itemId = box.getVector("itemId");
			Vector issueMId = box.getVector("issueMId");
			Vector qtyInReq = box.getVector("requestedQty");
			Vector issuedQty = box.getVector("issuedQty");
			BigDecimal stock = new BigDecimal(0);
			BigDecimal issueQty = new BigDecimal(0);
			String obj = null;
			int tempBrandId = 0;

			for (int i = 0; i < delete.size(); i++) {
				StoreIssueT storeIssueT2 = new StoreIssueT();
				int issueTId = Integer.parseInt(delete.get(i).toString());
				int issueId = Integer.parseInt(issueMId.get(i).toString());
				int item_id = Integer.parseInt(itemId.get(i).toString());
				BigDecimal qtyReq = new BigDecimal(qtyInReq.get(i).toString());
				List<StoreIssueT> tempList = new ArrayList<StoreIssueT>();

				// --------------------------Start of Stock
				// Updating--------------------------
				tempList = hbt
				.find("from jkt.hms.masters.business.StoreIssueT as a where a.Id="
						+ issueTId);

				for (StoreIssueT storeIssueT3 : tempList) {
					if (storeIssueT3.getBrand() != null) {
						tempBrandId = storeIssueT3.getBrand().getId();
						BigDecimal bigDecimal = storeIssueT3.getQtyIssued();
						String batchNo = storeIssueT3.getBatchNo();
						BigDecimal costPrice = storeIssueT3.getCostPrice();
						int itemIdFromT = storeIssueT3.getItem().getId();
						String qry2 = "select closing_stock,issue_qty from store_item_batch_stock where brand_id="
							+ tempBrandId
							+ " and item_id= "
							+ itemIdFromT
							+ " and batch_no='"
							+ batchNo
							+ "' and cost_price="
							+ costPrice
							+ " and department_id = " + deptId;
						List c = (List) session.createSQLQuery(qry2).list();

						if (c != null && c.size() > 0) {
							Object[] object = (Object[]) c.get(0);

							if (object[0] == null) {
								stock = new BigDecimal("0");
							} else {
								stock = (BigDecimal) object[0];
							}

							if (object[1] == null) {
								issueQty = new BigDecimal("0");
							} else {
								issueQty = (BigDecimal) object[1];
							}
						}

						stock = stock.add(bigDecimal);
						issueQty = issueQty.subtract(bigDecimal);

						List storeItemList = session.createCriteria(
								StoreItemBatchStock.class).createAlias("Item",
								"item").createAlias("Brand", "brand").add(
										Restrictions.eq("BatchNo", batchNo)).add(
												Restrictions.eq("item.Id", itemIdFromT)).add(
														Restrictions.eq("brand.Id", tempBrandId)).add(
																Restrictions.eq("CostPrice", costPrice)).list();

						StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock) storeItemList
						.get(0);
						int storeId = storeItemBatchStock.getId();
						StoreItemBatchStock storeItemBatchStock2 = (StoreItemBatchStock) hbt
						.load(StoreItemBatchStock.class, storeId);
						storeItemBatchStock2.setClosingStock(stock);
						storeItemBatchStock2.setIssueQty(issueQty);
						hbt.update(storeItemBatchStock2);
						hbt.refresh(storeItemBatchStock2);

						String hql = "delete from jkt.hms.masters.business.StoreIssueT as a where a.Id='"
							+ issueTId + "' ";
						Query query = session.createQuery(hql);
						int row = query.executeUpdate();
					}
				}
			}

			map.put("total_records", id.size());
			map.put("deleted_records", delete.size());

			tx.commit();
		} catch (Exception e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();

		}

		if (Integer.parseInt(map.get("total_records").toString()) == Integer
				.parseInt(map.get("deleted_records").toString())) {
			if (box.getInt("currPage") > 1)
				box.put("currPage", box.getInt("currPage") - 1);
		}

		map = showDeleteIsuueToOTAFU(box);
		return map;
	}

	public Map showIssueToOTAFUJsp(Map<String, Object> dataMap) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}

		Map map = new HashMap();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasUnit> masUnitList = new ArrayList<MasUnit>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<StoreIssueM> searchListForPopup = new ArrayList<StoreIssueM>();

		String max = "";
		String startNo = "";
		String no = "";

		try {
			departmentList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasDepartment");
			masUnitList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasUnit");
			employeeList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasEmployee");
			storeFyDocumentNoList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"
					+ deptId + "' ");
			for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
				if (storeFyDocumentNo.getIssueOtafuNo() != null) {
					no = ("" + storeFyDocumentNo.getIssueOtafuNo());
				} else {
					no = "";
				}
			}
			max = getMaxNo(no);
			searchListForPopup = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreIssueM as sim where sim.IssueType='x' and sim.Status='o' and sim.Department.Id='"
					+ deptId + "' ");

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("departmentList", departmentList);
		map.put("masUnitList", masUnitList);
		map.put("employeeList", employeeList);
		map.put("max", max);
		map.put("searchListForPopup", searchListForPopup);
		return map;

	}

	public Map searchIssueToOTAFU(Box box) {
		Map map = new HashMap();
		Map pageMap = new HashMap();
		int issueId = 0;
		List<StoreIssueM> list = new ArrayList<StoreIssueM>();
		try {
			try {
				issueId = Integer.parseInt("" + box.get("issueUnit"));
			} catch (Exception e) {
				issueId = Integer.parseInt("" + box.get(ISSUE_ID));
			}
			list = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIssueM as ss where ss.Id='"
					+ issueId + "'");
			for (StoreIssueM issueM : list) {
				box.put("issueId", issueId);
				box.put("issueNo", issueM.getIssueNo());
				if (issueM.getOtafu() != null) {
					box.put("departmentIdTemp", issueM.getOtafu().getId());
				} else {
					box.put("departmentIdTemp", 0);
				}
				box.put("docNo", issueM.getDocNo());
				box.put("requestBy", issueM.getRequestBy().getId());
				box.put("approvedBy", issueM.getApprovedBy().getId());
				box.put("issuedBy", issueM.getIssuedBy().getId());

				try {
					box.put("issuedDate", HMSUtil
							.convertDateToStringWithoutTime(issueM
									.getIssueDate()));
				} catch (Exception e) {
					box.put("issuedDate", "");
				}

				try {
					box.put("demandDate", HMSUtil
							.convertDateToStringWithoutTime(issueM
									.getRequestDate()));
				} catch (Exception e) {
					box.put("demandDate", "");
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<MasUnit> masUnitList = new ArrayList<MasUnit>();

		String startNo = "";
		String no = "";
		try {
			masUnitList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasUnit as pt where pt.Status='y'");
			departmentList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasDepartment");
			employeeList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasEmployee");
			storeFyDocumentNoList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.StoreFyDocumentNo ");

		} catch (Exception e) {
			e.printStackTrace();
		}

		pageMap.put("issueId", issueId);
		pageMap.put("pageNo", box.getInt("pageNo"));
		pageMap.put("issue_type", "x");
		pageMap.put("deptId", box.getInt("deptId"));
		map = getIssueDetailPageByPageForOTAFU(pageMap);
		map.put("box", box);
		map.put("departmentList", departmentList);
		map.put("employeeList", employeeList);
		map.put("masUnitList", masUnitList);

		return map;
	}

	public Map<String, Object> getIssueDetailPageByPageForOTAFU(
			Map<String, Object> pageMap) {
		List<StoreIssueM> searchListForPopup = new ArrayList<StoreIssueM>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List issueTList = new ArrayList();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<StoreSetup> storeSetupList = new ArrayList<StoreSetup>();
		List stockAvailableList = new ArrayList();
		List loanOutList = new ArrayList();
		StoreSetup storeSetup = new StoreSetup();

		int issueId = 0;
		int pageNo = 1;
		String issued = "n";
		int deptId = 0;
		deptId = Integer.parseInt("" + pageMap.get("deptId"));
		HibernateTemplate hbt = getHibernateTemplate();
		session = (Session) getSession();
		session.flush();

		if (pageMap.get("pageNo") != null) {
			pageNo = Integer.parseInt("" + pageMap.get("pageNo"));
		}

		int firstResult = 0;
		int maxResults = 20;

		if (pageNo != 1) {
			firstResult = firstResult + (pageNo - 1) * 20;
		}

		try {
			if (pageMap.get("issueId") != null) {
				issueId = Integer.parseInt("" + pageMap.get("issueId"));
			}

			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			storeSetupList = session.createCriteria(StoreSetup.class).list();
			if (storeSetupList != null && storeSetupList.size() > 0) {
				storeSetup = (StoreSetup) storeSetupList.get(0);
			}

			// Hibernate Pagination
			String pvmsSearch = "";
			if (pageMap.get("pvmsSearch") != null
					&& !((String) pageMap.get("pvmsSearch")).equals("")) {
				pvmsSearch = "%" + (String) pageMap.get("pvmsSearch") + "%";
				map.put("pvmsNo1", pvmsSearch);
				String query = " select b.item_id, i.pvms_no, i.nomenclature, d.unit_name,a.department_id, a.id,   b.id, max(b.qty_request), sum(b.qty_issued),b.expiry_date,b.batch_no,b.batch_stock_id  from store_issue_m a, store_issue_t b,mas_store_item i, mas_store_item_conversion c, mas_store_unit d,store_item_batch_stock s  where i.item_conversion_id = c.item_conversion_id and c.purchase_unit_id = d.unit_id and b.item_id=i.item_id and a.id = b.issue_m_id and b.issue_m_id = "
					+ issueId
					+ " and i.pvms_no like '"
					+ pvmsSearch
					+ "' and b.batch_stock_id = s.stock_id and rownum <= "+maxResults+"  group by b.item_id,i.pvms_no, i.nomenclature,b.batch_no,b.batch_stock_id,b.expiry_date, d.unit_name,a.department_id, a.id as hdid,   b.id as dtid";
				issueTList = session.createSQLQuery(query).list();
			} else {
				String query = "select b.item_id, i.pvms_no, i.nomenclature, d.unit_name,a.department_id, a.id  as hdid,   b.id as dtid , max(b.qty_request), sum(b.qty_issued),b.expiry_date,b.batch_no,b.batch_stock_id from store_issue_m a, store_issue_t b,mas_store_item i, mas_store_item_conversion c, mas_store_unit d,store_item_batch_stock s where i.item_conversion_id = c.item_conversion_id and c.purchase_unit_id = d.unit_id  and b.item_id=i.item_id and a.id = b.issue_m_id and b.issue_m_id  = "
					+ issueId + " and b.batch_stock_id = s.stock_id and rownum <= "+maxResults+" group by b.item_id,i.pvms_no, i.nomenclature,b.batch_no,b.batch_stock_id,b.expiry_date, d.unit_name,a.department_id, a.id,   b.id ";
				issueTList = session.createSQLQuery(query).list();
			}

			employeeList = session.createCriteria(MasEmployee.class).add(Restrictions.eq("Status", "y")).list();
			departmentList = session.createCriteria(MasDepartment.class).add(Restrictions.eq("Status", "y")).addOrder(Order.asc("DepartmentName")).list();

			if (pageMap.get("issue_type") != null
					&& pageMap.get("issue_type").toString().equals("x")) {
				searchListForPopup = session.createCriteria(StoreIssueM.class)
				.add(Restrictions.eq("Department.Id", deptId)).add(
						Restrictions.eq("Status", "o")).add(
								Restrictions.eq("IssueType", "x")).list();
			} else {
				searchListForPopup = session.createCriteria(StoreIssueM.class)
				.add(Restrictions.eq("Department.Id", deptId)).add(
						Restrictions.eq("Status", "o")).add(
								Restrictions.eq("IssueType", "o")).list();
			}

			List objectList = new ArrayList();

			// for complete stock list

			int totalPages = 0;
			double totalPage = 0.0;
			if (pageMap.get("pvmsSearch") != null
					&& !((String) pageMap.get("pvmsSearch")).equals("")) {
				String str1 = "select count(*) from store_issue_t a,store_issue_m b,mas_store_item i  where a.item_id=i.item_id and  a.issue_m_id=b.id and a.issue_m_id='"
					+ issueId
					+ "' and i.pvms_no like '"
					+ pvmsSearch
					+ "'	";
				List countList = session.createSQLQuery(str1).list();
				if (countList != null && countList.size() > 0) {
					totalPage = (double) countList.size() / (double) 20;
					Double d = new Double(Math.ceil(totalPage));
					totalPages = d.intValue();
				}
			} else {
				String str1 = "select count(*) from store_issue_t a,store_issue_m b  where a.issue_m_id=b.id and a.issue_m_id='"
					+ issueId + "' group by a.item_id";
				List countList = session.createSQLQuery(str1).list();
				if (countList != null && countList.size() > 0) {
					totalPage = (double) countList.size() / (double) 20;
					Double d = new Double(Math.ceil(totalPage));
					totalPages = d.intValue();
				}
			}

			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map) HMSUtil.getCurrentDateAndTime();
			String date11 = (String) utilMap.get("currentDate");
			try {
				List<StoreIssueM> storeIssueMList1 = new ArrayList<StoreIssueM>();
				storeIssueMList1 = session.createCriteria(StoreIssueM.class)
				.add(Restrictions.eq("Id", issueId)).list();
				StoreIssueM storeIssueM = new StoreIssueM();
				if (storeIssueMList1.size() > 0 && storeIssueMList1 != null) {
					storeIssueM = storeIssueMList1.get(0);
				}
				SimpleDateFormat formatterIn = new SimpleDateFormat(
				"yyyy-MM-dd");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
				"dd/MM/yyyy");

				if (storeIssueM.getIssueDate() != null) {
					String date4MySQL = formatterOut.format(storeIssueM
							.getIssueDate());
					map.put("issueDate", date4MySQL);
				} else {
					map.put("requestDate", date11);
				}

				if (storeIssueM.getRequestDate() != null) {
					String requestedDate4MySQL = formatterOut
					.format(storeIssueM.getRequestDate());
					map.put("requestDate", requestedDate4MySQL);
				} else
					map.put("requestDate", date11);

			} catch (Exception e) {
				map.put("issueDate", date11);
				map.put("requestDate", date11);
				e.printStackTrace();
			}

			map.put("totalPages", totalPages);
			session.flush();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("searchListForPopup", searchListForPopup);
		map.put("issueTList", issueTList);
		map.put("departmentList", departmentList);
		map.put("employeeList", employeeList);
		map.put("issueId", issueId);
		map.put("storeSetup", storeSetup);

		return map;
	}

	public Map<String, Object> getItemListThroughAjaxToOTAFU(
			Map<String, Object> dataMap) {

		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		session = (Session) getSession();
		String pvms = null;
		String nomenclature = null;
		String strength = null;
		String au = null;
		BigDecimal qtymmf = null;
		BigDecimal annreq = null;
		int item_id = 0;

		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			String queryString = null;
			String str = "%" + dataMap.get("autoHint") + "%";
			// Criteria c =
			// session.createCriteria(MasStoreItem.class).add(Restrictions.like("Nomenclature",str));
			Criteria c = session.createCriteria(MasStoreItem.class).add(
					Restrictions.like("Nomenclature", str)).add(
							Restrictions.eq("Status", "y"));
			c.setFirstResult(0);
			c.setMaxResults(10);
			itemList = c.list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;

	}

	public Map<String, Object> fillItemsForIssueToOTAFU(
			Map<String, Object> dataMap) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		session = (Session) getSession();
		String pvms = null;
		String nomenclature = null;
		String strength = null;
		String au = null;
		BigDecimal qtymmf = null;
		BigDecimal annreq = null;
		int item_id = 0;

		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			String queryString = null;
			String str = "" + dataMap.get("nomenclature");
			Criteria c = session.createCriteria(MasStoreItem.class).add(
					Restrictions.like("Nomenclature", str)).add(
							Restrictions.eq("Status", "y"));
			c.setFirstResult(0);
			c.setMaxResults(10);
			itemList = c.list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}

		map.put("itemList", itemList);
		return map;
	}

	public boolean addIndent(StoreIndentM storeIndentM)
	throws IllegalStateException, SystemException {
		// TODO Auto-generated method stub
		return false;
	}

	public boolean addIndents(StoreIndentM storeIndentM, List list, Map map) {
		// TODO Auto-generated method stub
		return false;
	}

	public Map<String, Object> getItemListForIssueToOTAFU(
			Map<String, Object> dataMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		session = (Session) getSession();
		String pvmsNo = null;
		int deptId = 0;
		int issueId = 0;
		deptId = Integer.parseInt("" + dataMap.get("deptId"));
		issueId = Integer.parseInt("" + dataMap.get("issueId"));
		List objectList = new ArrayList();
		try {
			String str = "%" + dataMap.get("autoHint") + "%";
			if (issueId != 0) {
				String qry = " SELECT item_id FROM store_issue_t where issue_m_id='"
					+ issueId + "';";
				objectList = (List) session.createSQLQuery(qry).list();
				Criteria c = session.createCriteria(MasStoreItem.class).add(
						Restrictions.like("Nomenclature", str)).add(
								Restrictions.eq("Department.Id", deptId)).add(
										Restrictions.not(Restrictions.in("Id", objectList)));
				c.setFirstResult(0);
				c.setMaxResults(10);
				itemList = c.list();
			} else {
				Criteria c = session.createCriteria(MasStoreItem.class).add(
						Restrictions.like("Nomenclature", str)).add(
								Restrictions.eq("Department.Id", deptId));

				c.setFirstResult(0);
				c.setMaxResults(10);
				itemList = c.list();

			}

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;

	}

	public Map<String, Object> fillIssueToOTAFUBasedOnLotNo(
			Map<String, Object> dataMap) {
		List objectList = new ArrayList();
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		String lotNo = null;
		lotNo = "" + dataMap.get("lotNo");
		int itemId = 0;
		try {
			String qry = "SELECT item_id FROM store_item_batch_stock where lot_no='"
				+ lotNo + "';";
			objectList = (List) session.createSQLQuery(qry).list();
			itemId = Integer.parseInt("" + objectList.get(0));
			if (itemId != 0) {
				org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
				String queryString = null;
				String str = "" + dataMap.get("nomenclature");
				Criteria c = session.createCriteria(MasStoreItem.class).add(
						Restrictions.like("Id", itemId)).add(
								Restrictions.eq("Status", "y"));
				itemList = c.list();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("itemList", itemList);
		return map;

	}

	// -----------------------------------End Of Issues To Other Than Airforce
	// Units --------------------------------

	// ----------------------------Start Of Vendor Return ----------------------
	public Map<String, Object> getItemListForVendorReturn(
			Map<String, Object> dataMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		session = (Session) getSession();
		String pvmsNo = null;
		int deptId = 0;
		int indentId = 0;
		deptId = Integer.parseInt("" + dataMap.get("deptId"));
		indentId = Integer.parseInt("" + dataMap.get("indentId"));
		List objectList = new ArrayList();
		try {
			String str = "%" + dataMap.get("autoHint") + "%";
			// String qry1 ="SELECT t.item_id FROM store_indent_t
			// t,store_indent_m m where t.indent_id='"+indentId+"' and
			// m.indent_id=t.indent_id";
			// String qry="select Distinct(sib.brand_id),brand.brand_name from
			// store_item_batch_stock as sib,mas_store_brand as brand where
			// sib.department_id='"+deptId+"' and sib.brand_id=brand.brand_id
			// and and brand.brand_name LIKE '"+str+";";
			// objectList = (List) session.createSQLQuery(qry).list();
			String query = "SELECT DISTINCT (sib.Brand.BrandName),sib.Brand.Id from  StoreItemBatchStock as sib where   sib.Brand.BrandName like '"
				+ str + "'";
			Query q = session.createQuery(query);
			q.setFirstResult(0);
			q.setMaxResults(10);
			itemList = q.list();
			Query q2 = session.createQuery(query);
			q2.setFirstResult(0);
			q2.setMaxResults(10);
			itemList = q2.list();
			// if(objectList.size()!=0){
			// Criteria c =
			// session.createCriteria(MasStoreItem.class).add(Restrictions.like("Nomenclature",str))
			// .add(Restrictions.eq("Department.Id", deptId))
			// .add(Restrictions.not(Restrictions.in("Id", objectList)));
			// c.setFirstResult(0);
			// c.setMaxResults(10);
			// itemList = c.list();
			// }else{
			// Criteria c =
			// session.createCriteria(MasStoreItem.class).add(Restrictions.like("Nomenclature",str))
			// .add(Restrictions.eq("Department.Id", deptId));
			// c.setFirstResult(0);
			// c.setMaxResults(10);
			// itemList = c.list();
			// }
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;

	}

	public Map<String, Object> fillItemsForIndentToVendorReturn(
			Map<String, Object> dataMap) {

		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		session = (Session) getSession();
		String brandName = null;
		int item_id = 0;
		int deptId = 0;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		List objectList = new ArrayList();
		brandName = "" + dataMap.get("brandName");
		deptId = Integer.parseInt("" + dataMap.get("deptId"));

		try {
			/*String qry = "select msi.PVMS_NO,msi.NOMENCLATURE,msic.ITEM_UNIT_NAME,sibc.BATCH_NO,sibc.EXPIRY_DATE,sibc.STOCK_ID,msi.item_id from mas_store_item msi" +
					" left outer join MAS_STORE_ITEM_CONVERSION msic on msic.ITEM_CONVERSION_ID=msi.ITEM_CONVERSION_ID " +
					"left outer join store_item_batch_stock sibc on msi.ITEM_ID=sibc.ITEM_ID" +
					" where msi.NOMENCLATURE='"+brandName+"'";*/
			String qry = "select msi.PVMS_NO,msi.NOMENCLATURE,msic.ITEM_UNIT_NAME,sibc.BATCH_NO,sibc.EXPIRY_DATE,sibc.STOCK_ID,msi.item_id from mas_store_item msi" +
			" left outer join MAS_STORE_ITEM_CONVERSION msic on msic.ITEM_CONVERSION_ID=msi.ITEM_CONVERSION_ID " +
			"left outer join store_item_batch_stock sibc on msi.ITEM_ID=sibc.ITEM_ID" +
			" where msi.NOMENCLATURE='"+brandName+"' and sibc.department_id='"+deptId+"'";
			objectList = (List) session.createSQLQuery(qry).list();

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("objectList", objectList);
		return map;
	}
	public Map<String, Object> showVendorReturnJsp(Map<String, Object> map) {
		List<MasDepartment> deptList = new ArrayList<MasDepartment>();
		List<StoreItemBatchStock> listOfItemsInStock = new ArrayList<StoreItemBatchStock>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<StoreFyDocumentNo> issueReturnNoList = new ArrayList<StoreFyDocumentNo>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<StoreGrnReturnM> returnNoList = new ArrayList<StoreGrnReturnM>();
		List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<StoreGrnReturnM> searchList = new ArrayList<StoreGrnReturnM>();
		Session session = (Session) getSession();
		String returnNo = "";
		String finalReturnNo = "";
		int storeFyDocumentNoId = 0;
		String buttonFlag = "";
		String no = "";
		int deptId = 0;
		String max = "";
		if (map.get("buttonFlag") != null) {
			buttonFlag = (String) map.get("buttonFlag");
		}
		if (map.get("deptId") != null) {
			deptId = Integer.parseInt("" + map.get("deptId"));
		}
		try {
			storeFyDocumentNoList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"
					+ deptId + "' ");
			for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
				if (storeFyDocumentNo.getVendorReturnNo() != null) {
					no = ("" + storeFyDocumentNo.getVendorReturnNo());
				} else {
					no = "";
				}
			}
			supplierList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasStoreSupplier as pt order by pt.SupplierName");
			searchList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreGrnReturnM as pt where pt.Status='y' and pt.Department.id='"
					+ deptId + "'");
			max = getMaxNo(no);
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			
			 employeeList = session.createCriteria(MasEmployee.class, "emp").add(Restrictions.in("emp.Id", getEmployeeIdDepartmentWise(session, deptId)))
						.add(Restrictions.eq("emp.Status", "y")).addOrder(Order.asc("emp.FirstName")).list();
			issueReturnNoList = session.createQuery(
					"select syd from StoreFyDocumentNo as syd where syd.Department.Id="
					+ deptId).list();
			Iterator iterator = listOfItemsInStock.iterator();
			while (iterator.hasNext()) {
				Object[] pair = (Object[]) iterator.next();
				StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock) pair[0];
				BigDecimal qtyInHand = (BigDecimal) pair[1];
				String pvmsNo = storeItemBatchStock.getItem().getPvmsNo();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		/*if (!buttonFlag.equals("next")) {
			if (issueReturnNoList != null && issueReturnNoList.size() > 0) {
				StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) issueReturnNoList
				.get(0);
				returnNo = ("" + storeFyDocumentNo.getIssueDeptReturnNo());
				storeFyDocumentNoId = storeFyDocumentNo.getId();
				try {
					finalReturnNo = getMaxNo(returnNo);
				} catch (Exception e) {
					e.printStackTrace();
				}
				map.put("storeFyDocumentNoId", storeFyDocumentNoId);
				map.put("finalReturnNo", finalReturnNo);
			}
		}*/
		//map.put("listOfItemsInStock", listOfItemsInStock);
		map.put("issueReturnNoList", issueReturnNoList);
		//map.put("brandList", brandList);
		map.put("returnNoList", returnNoList);
		//map.put("deptList", deptList);
		map.put("employeeList", employeeList);
		map.put("returnNo", max);
		map.put("supplierList", supplierList);
		map.put("searchList", searchList);
		System.out.println("searchList="+searchList.size());

		return map;
	}

	public Map<String, Object> showStockDetailsForVendorReturn(
			Map<String, Object> map) {
		List listOfItemsInStock = new ArrayList();
		Session session = (Session) getSession();
		int deptId = (Integer) map.get("deptId");
		int brandId = (Integer) map.get("brandId");
		try {
			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map) HMSUtil.getCurrentDateAndTime();
			String date = (String) utilMap.get("currentDate");
			SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
			String date4MySQL = "";
			try {
				date4MySQL = formatterOut.format(formatterIn.parse(date));
			} catch (Exception e) {

				e.printStackTrace();
			}
			Date issueDate = java.sql.Date.valueOf(date4MySQL);
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			listOfItemsInStock = session
			.createQuery(
					"select sib,  sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="
					+ deptId
					+ " and sib.Brand.Id="
					+ brandId
					+ "and sib.ExpiryDate >"
					+ issueDate
					+ "and sib.ClosingStock>0"
					+ "group by sib.BatchNo,sib.CostPrice ")
					.list();

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("listOfItemsInStock", listOfItemsInStock);

		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> submitVendorReturnDetails(
			Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();
		String succesfullyAdded = "";
		String fromDateToDate = null;
		String issueType = "w";
		List<String> pvmsList = (List) dataMap.get("pvmsList");
		List<String> batchNumberList = (List) dataMap.get("batchNumberList");
		List brandNameList = (List) dataMap.get("brandNameList");
		List expiryDateList = (List) dataMap.get("expiryDateList");
		List issQtyList = (List) dataMap.get("issQtyList");
		List costPriceList = (List) dataMap.get("costPriceList");
		List amountList = (List) dataMap.get("amountList");
		List storeItemBatchStockIdList = (List) dataMap.get("storeItemBatchStockIdList");
		List itemList = (List) dataMap.get("itemList");
		String date = (String) dataMap.get("date");
		String time = (String) dataMap.get("time");
		StoreGrnReturnM storeGrnReturnM = new StoreGrnReturnM();

		String returnDate = (String) dataMap.get("returnDate");
		String returnNo = (String) dataMap.get("returnNo");
		String referenceNo = (String) dataMap.get("referenceNo");
		String SONo = (String) dataMap.get("SONo");
		String poNo = (String) dataMap.get("poNo");
		System.out.println("poNo="+poNo);

		int returnById = (Integer) dataMap.get("returnById");

		String remarks = (String) dataMap.get("remarks");
		String reason = (String) dataMap.get("reason");

		int vendorId = (Integer) dataMap.get("vendorId");
		int hospitalId = (Integer) dataMap.get("hospitalId");
		String userName = (String) dataMap.get("userName");
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<StoreGrnReturnM> StoreGrnReturnMTemp = new ArrayList<StoreGrnReturnM>();
		int storeFyId = 0;
		int deptId = 0;
		int approvedById = 0;
		int storeGrnReturnMId = 0;
		deptId = Integer.parseInt("" + dataMap.get("deptId"));
		if (dataMap.get("storeGrnReturnMId") != null)
			storeGrnReturnMId = Integer.parseInt(""
					+ dataMap.get("storeGrnReturnMId"));
		int itemId = Integer.parseInt("" + dataMap.get("itemId"));
		approvedById = Integer.parseInt("" + dataMap.get("approvedById"));
		Date dateToInsert = null;
		if (!date.equals(""))
			dateToInsert = HMSUtil.convertStringTypeDateToDateType(date);
		Date returnDateForAdd = HMSUtil
		.convertStringTypeDateToDateType(returnDate);
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Transaction transaction = null;
		try {
			// --------------Transaction Started----------
			transaction = session.beginTransaction();
			Criteria c = session.createCriteria(StoreFyDocumentNo.class).add(
					Restrictions.eq("Department.Id", deptId));
			storeFyDocumentNoList = c.list();
			for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
				storeFyId = documentNo.getId();
			}
			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
			.load(StoreFyDocumentNo.class, storeFyId);
			storeFyDocumentNo.setVendorReturnNo(returnNo);
			hbt.update(storeFyDocumentNo);

			if (storeGrnReturnMId == 0) {
				storeGrnReturnM.setReturnNo(returnNo);

				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				storeGrnReturnM.setDepartment(masDepartment);

				MasStoreSupplier masStoreSupplier = new MasStoreSupplier();
				masStoreSupplier.setId(vendorId);
				storeGrnReturnM.setSupplier(masStoreSupplier);

				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				storeGrnReturnM.setHospital(masHospital);

				storeGrnReturnM.setReturnDate(returnDateForAdd);
				storeGrnReturnM.setRefDocNo(referenceNo);
				storeGrnReturnM.setSupplyOrderNo(poNo);
		

				MasEmployee employee = new MasEmployee();
				employee.setId(returnById);
				storeGrnReturnM.setApprovedBy(employee);

				storeGrnReturnM.setReason(reason);
				storeGrnReturnM.setRemarks(remarks);

				MasEmployee returnBy = new MasEmployee();
				returnBy.setId(returnById);
				storeGrnReturnM.setReturnBy(returnBy);

				storeGrnReturnM.setLastChgBy(userName);
				storeGrnReturnM.setLastChgDate(dateToInsert);
				storeGrnReturnM.setLastChgTime(time);
				storeGrnReturnM.setStatus("y");
				
				hbt.save(storeGrnReturnM);
			} else {
				storeGrnReturnM.setId(storeGrnReturnMId);
			}
			System.out.println("issQtyListindata="+issQtyList.size());
			Iterator itr = issQtyList.iterator();
			for (int i = 0; i < issQtyList.size(); i++) {
				System.out.println("i="+i);
				BigDecimal totalQtyReturned;
				StoreGrnReturnT storeGrnReturnT = new StoreGrnReturnT();

				storeGrnReturnT.setGrnReturn(storeGrnReturnM);
				MasStoreItem masStoreItem = new MasStoreItem();
				masStoreItem.setId(Integer.parseInt(itemList.get(i).toString()));
				storeGrnReturnT.setItem(masStoreItem);
				
				List<StoreItemBatchStock> sibsList=session.createCriteria(StoreItemBatchStock.class).add(
						Restrictions.eq("id", Integer.parseInt(""+ storeItemBatchStockIdList.get(i))))
						.add(Restrictions.eq("Hospital.Id", hospitalId ))
						.add(Restrictions.eq("Department.Id", deptId ))
						.list();
				
				storeGrnReturnT.setBatchNo(sibsList.get(0).getBatchNo()); // javed

				
				Date expiryDate = (Date) (sibsList.get(0).getExpiryDate()!=null?sibsList.get(0).getExpiryDate():null);
				System.out.println("expiryDate="+expiryDate+"Vinay");
				if(expiryDate !=null)
				{
				   String date1 = HMSUtil.convertDateToStringTypeDateOnly(expiryDate);
					Date expiryDateToInsert = HMSUtil.convertStringTypeDateToDateType(date1);
					storeGrnReturnT.setExpiryDate(expiryDateToInsert);
		    	} 
				
				int brandId = (Integer) (sibsList.get(0).getBrand()!=null?sibsList.get(0).getBrand().getId():"0");
				if(brandId !=0)
				{
					MasStoreBrand brandObj = new MasStoreBrand();
					brandObj.setId(brandId);
					storeGrnReturnT.setBrand(brandObj);	
				}
				
				BigDecimal issuedReturnFromJsp=new BigDecimal("0.0");
				System.out.println("issQtyList.get(i)="+issQtyList.get(i));

				if(issQtyList.get(i) != null && !issQtyList.get(i).equals("") ){
					issuedReturnFromJsp = new BigDecimal(""+ issQtyList.get(i));
					storeGrnReturnT.setReturnQty(issuedReturnFromJsp);

				}else{

					storeGrnReturnT.setReturnQty(issuedReturnFromJsp);
				}
				
				double costPrice = (Double) (sibsList.get(0).getCostPrice()!=null?sibsList.get(0).getCostPrice().doubleValue():"0.0");
				if(costPrice != 0.0)
				{
					storeGrnReturnT.setUnitRate(new BigDecimal(costPrice));
					storeGrnReturnT.setReturnAmount(issuedReturnFromJsp.multiply(new BigDecimal(costPrice)));
				}
					
				

				/* hbt.save(tObj);
				 hbt.refresh(tObj);

				

				String expiryDate = (String) expiryDateList.get(i);
				if (expiryDate != null) {
					Date expiryDateToInsert = HMSUtil
					.convertStringTypeDateToDateType(expiryDate);
					storeGrnReturnT.setExpiryDate(expiryDateToInsert);
				} else {
					storeGrnReturnT.setExpiryDate(null);
				}
				BigDecimal issuedReturnFromJsp = new BigDecimal(""
						+ issQtyList.get(i));
				storeGrnReturnT.setReturnQty(issuedReturnFromJsp);
				BigDecimal bigDecimal2 = new BigDecimal(""
						+ costPriceList.get(i));
				storeGrnReturnT.setUnitRate(bigDecimal2);
				BigDecimal bigDecimal3 = new BigDecimal("" + amountList.get(i));
				storeGrnReturnT.setReturnAmount(bigDecimal3);*/

				int storeItemBatchStockId = Integer.parseInt(""
						+ storeItemBatchStockIdList.get(i));

				StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock) hbt.load(StoreItemBatchStock.class, storeItemBatchStockId);
				BigDecimal qtyReturned = (BigDecimal) storeItemBatchStock.getIssueReturn();

				if (qtyReturned != null) {
					totalQtyReturned = qtyReturned.add(issuedReturnFromJsp);
				} else {
					totalQtyReturned = issuedReturnFromJsp;
				}

				BigDecimal closingStock = (BigDecimal) storeItemBatchStock.getClosingStock();
				closingStock = closingStock.subtract(issuedReturnFromJsp);

				storeItemBatchStock.setIssueReturn(totalQtyReturned);
				storeItemBatchStock.setClosingStock(closingStock);

				hbt.save(storeGrnReturnT);
				hbt.update(storeItemBatchStock);

				
			}

			Criteria c2 = session.createCriteria(StoreGrnReturnM.class).add(
					Restrictions.eq("Department.Id", deptId)).add(
							Restrictions.eq("ReturnNo", returnNo));
			StoreGrnReturnMTemp = (List<StoreGrnReturnM>) c2.list();
			for (StoreGrnReturnM grnReturnM : StoreGrnReturnMTemp) {
				storeGrnReturnMId = Integer.parseInt("" + grnReturnM.getId());
			}

			// --------------Transaction End----------
			transaction.commit();
			succesfullyAdded = "true";

		} catch (Exception e) {
			if (transaction != null)
				transaction.rollback();
			e.printStackTrace();
		}
		map.put("succesfullyAdded", succesfullyAdded);
		map.put("storeGrnReturnMId", storeGrnReturnMId);
		return map;
	}

	public Map<String, Object> showDeleteVendorReturn(Map<String, Object> map) {
		Session session = (Session) getSession();

		String returnNo = (String) map.get("returnNo");
		List<StoreGrnReturnM> storeReturnMList = session.createQuery(
				"select sim from StoreGrnReturnM as sim where sim.ReturnNo = '"
				+ returnNo + "'").list();
		if (storeReturnMList.size() > 0) {
			StoreGrnReturnM storeGrnReturnM = (StoreGrnReturnM) storeReturnMList
			.get(0);
			int returnId = storeGrnReturnM.getId();
			List<StoreGrnReturnT> storeReturnTList = session.createQuery(
					"select sit from StoreGrnReturnT as sit where sit.GrnReturn.Id='"
					+ returnId + "'").list();
			map.put("storeReturnTList", storeReturnTList);
		}

		return map;
	}

	public boolean deleteStockDetailsVendorReturn(Map<String, Object> map) {

		BigDecimal totalQtyReturned;
		boolean sucessfullyDeleted = false;
		Session session = (Session) getSession();
		int returnTId = (Integer) map.get("returnTId");
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			StoreGrnReturnT tObj = (StoreGrnReturnT) hbt.load(
					StoreGrnReturnT.class, returnTId);
			int brandId = tObj.getBrand().getId();
			String batchNo = tObj.getBatchNo();
			BigDecimal costPrice = tObj.getUnitRate();
			BigDecimal qtyReturned = tObj.getReturnQty();
			String hql = "delete from StoreGrnReturnT as sit where sit.Id like :returnTId";
			Query query = session.createQuery(hql).setParameter("returnTId",
					returnTId);
			int row = query.executeUpdate();

			List storeItemBatchStockList = session.createQuery(
					"select sib  from StoreItemBatchStock as sib where sib.BatchNo="
					+ batchNo + "and sib.Brand.Id=" + brandId
					+ "and sib.CostPrice=" + costPrice).list();
			StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock) storeItemBatchStockList
			.get(0);
			BigDecimal qtyReturnedFromDB = (BigDecimal) storeItemBatchStock
			.getIssueReturn();
			if (qtyReturned != null) {
				totalQtyReturned = qtyReturnedFromDB.subtract(qtyReturned);
			} else {
				totalQtyReturned = qtyReturnedFromDB;
			}
			BigDecimal closingStock = (BigDecimal) storeItemBatchStock
			.getClosingStock();
			closingStock = closingStock.add(qtyReturned);
			storeItemBatchStock.setIssueQty(totalQtyReturned);
			storeItemBatchStock.setClosingStock(closingStock);
			hbt.update(storeItemBatchStock);

			sucessfullyDeleted = true;
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return sucessfullyDeleted;
	}

	@SuppressWarnings( { "unchecked", "unused" })
	public Map<String, Object> searchVendorReturn(Map<String, Object> searchMap)
	{
		String fromDate = "";
		String toDate = "";
		int returnId = 0;
		int pageNo = 1;
		int firstResult = 0;
		int maxResults = 8;
		List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier>();
		if (searchMap.get("pageNo") != null) {
			pageNo = Integer.parseInt("" + searchMap.get("pageNo"));
		}
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreSupplier> searchSupplierList = new ArrayList<MasStoreSupplier>();
		List<StoreInternalReturnM> searchReturnMList = new ArrayList<StoreInternalReturnM>();
		List<StoreGrnReturnT> searchReturnTList = new ArrayList<StoreGrnReturnT>();
		Session session = (Session) getSession();

		if (!(searchMap.get("fromDate").equals(""))
				&& (!searchMap.get("toDate").equals(""))) {
			fromDate = (String) searchMap.get("fromDate");
			toDate = (String) searchMap.get("toDate");
			String date4MySQL1;
			String date4MySQL2;
			try {
				SimpleDateFormat formatterIn = new SimpleDateFormat(
				"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
				"yyyy-MM-dd");
				date4MySQL1 = formatterOut.format(formatterIn.parse(fromDate));
				date4MySQL2 = formatterOut.format(formatterIn.parse(toDate));
				java.sql.Date startDate = java.sql.Date.valueOf(date4MySQL1);
				java.sql.Date endDate = java.sql.Date.valueOf(date4MySQL2);

				searchReturnTList = session.createCriteria(
						StoreInternalReturnT.class).add(
								Restrictions.eq("ReturnMain.Id", returnId)).list();
				// searchSupplierList =
				// session.createCriteria(MasStoreSupplier.class).add(Restrictions.eq("Status",
				// "y")).list();
				searchReturnMList = session.createCriteria(
						StoreInternalReturnM.class).add(
								Restrictions.eq("Status", "y")).add(
										Restrictions.between("ReturnDate", startDate, endDate))
										.list();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		if (pageNo != 1) {
			firstResult = firstResult + (pageNo - 1) * 8;
		}
		if ((Integer) searchMap.get("returnId") != 0) {
			returnId = (Integer) searchMap.get("returnId");

			Criteria c = session.createCriteria(StoreGrnReturnT.class).add(
					Restrictions.eq("GrnReturn.Id", returnId));

			c.setFirstResult(firstResult);
			c.setMaxResults(maxResults);
			searchReturnTList = c.list();

			searchReturnMList = session.createCriteria(StoreGrnReturnM.class)
			.add(Restrictions.eq("Status", "y")).add(
					Restrictions.eq("Id", returnId)).list();
		}
		supplierList = getHibernateTemplate()
		.find(
				"from jkt.hms.masters.business.MasStoreSupplier as pt order by pt.SupplierName");
		map.put("searchReturnMList", searchReturnMList);

		map.put("supplierList", supplierList);
		map.put("searchReturnTList", searchReturnTList);

		return map;
	}

	// ----------------------------End Of Vendor Return ----------------------

	// *********************************************************************************************************************
	// ------------------------------------End of Methods Written By
	// Vivek------------------------------------------
	// ****************************************************************************************************************
	// *********************************************************************************************************************
	// *********************************************************************************************************************
	// ------------------------------------ Methods Written By
	// Vikas------------------------------------------
	// ****************************************************************************************************************

	// -------------------------------methods for opd patient issue by
	// vikas-------------------------------

	public Map<String, Object> showOPDPatientIssueFAC(Map dataMap) {

		List<MasEmployee> empList = new ArrayList<MasEmployee>();

		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreOpPatientIssueM> storeOpPatientIssueM = new ArrayList<StoreOpPatientIssueM>();
		Session session = (Session) getSession();
		int deptId=0;
		if(dataMap.get("deptId")!=null)
			deptId= Integer.parseInt(""+dataMap.get("deptId"));
		int hospitalId=0;
		if(dataMap.get("hospitalId")!=null)
			hospitalId= Integer.parseInt(""+dataMap.get("hospitalId"));
		int departmentTypeId = 10;
		List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();
		List opdIssueNo = new ArrayList();
		String opdIssuenoIncremented = "";
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			storeOpPatientIssueM = session.createCriteria(StoreOpPatientIssueM.class)
			.add(Restrictions.eq("Department.Id", deptId))
			.add(Restrictions.eq("IssueType", "I"))
			.add(Restrictions.eq("TypeOfIssue", "P"))
			.addOrder(Order.desc("IssueNo")).list();
			// deptList = session.createCriteria(MasDepartment.class).list();
			/*empList = session
			.createQuery("select emp from MasEmployee  as emp where emp.EmpCategory.Id=" + 1).list();*/

		
			frequencyList = session.createCriteria(MasFrequency.class).add(Restrictions.eq("Status","y" )).list();
		
			opdIssueNo = session.createQuery(
					"select syd from StoreFyDocumentNo as syd where syd.Department.Id="+deptId+" and syd.Hospital.Id="+hospitalId).list();
			
			if (map.get("buttonFlag") != null) {
				String issueNo = (String) map.get("issueNo");
				opdIssuenoIncremented = issueNo;
				
			} else {
			
				String opdIssueNoFromDB = "";
				if(opdIssueNo.size() > 0){
					StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) opdIssueNo.get(0);
					opdIssueNoFromDB = storeFyDocumentNo.getOpdIssueNo();
				}
				opdIssuenoIncremented = getMaxNo(opdIssueNoFromDB);
			}
			
			
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("opdIssueNo", opdIssueNo);
		map.put("opdIssuenoIncremented", opdIssuenoIncremented);
		map.put("empList", empList);
		map.put("frequencyList", frequencyList);
		map.put("opPatientIssueList", storeOpPatientIssueM);
		return map;
	}
	
	public Map<String, Object> showOPDPatientIssue(Map dataMap) {

		List<MasEmployee> empList = new ArrayList<MasEmployee>();

		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreOpPatientIssueM> storeOpPatientIssueM = new ArrayList<StoreOpPatientIssueM>();
		Session session = (Session) getSession();
		int deptId=0;
		if(dataMap.get("deptId")!=null)
			deptId= Integer.parseInt(""+dataMap.get("deptId"));
		int hospitalId=0;
		if(dataMap.get("hospitalId")!=null)
			hospitalId= Integer.parseInt(""+dataMap.get("hospitalId"));
		int departmentTypeId = 10;
		List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();
		List opdIssueNo = new ArrayList();
		String opdIssuenoIncremented = "";
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			storeOpPatientIssueM = session.createCriteria(StoreOpPatientIssueM.class)
			.add(Restrictions.eq("Department.Id", deptId))
			.add(Restrictions.eq("IssueType", "I"))
			.add(Restrictions.eq("TypeOfIssue", "P"))
			.addOrder(Order.desc("IssueNo")).list();
			// deptList = session.createCriteria(MasDepartment.class).list();
			/*empList = session
			.createQuery("select emp from MasEmployee  as emp where emp.EmpCategory.Id=" + 1).list();*/

		
			frequencyList = session.createCriteria(MasFrequency.class).add(Restrictions.eq("Status","y" )).list();
		
			opdIssueNo = session.createQuery(
					"select syd from StoreFyDocumentNo as syd where syd.Department.Id="+deptId+" and syd.Hospital.Id="+hospitalId).list();
			
			if (map.get("buttonFlag") != null) {
				String issueNo = (String) map.get("issueNo");
				opdIssuenoIncremented = issueNo;
				
			} else {
			
				String opdIssueNoFromDB = "";
				if(opdIssueNo.size() > 0){
					StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) opdIssueNo.get(0);
					opdIssueNoFromDB = storeFyDocumentNo.getOpdIssueNo();
				}
				opdIssuenoIncremented = getMaxNo(opdIssueNoFromDB);
			}
			
			
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("opdIssueNo", opdIssueNo);
		map.put("opdIssuenoIncremented", opdIssuenoIncremented);
		map.put("empList", empList);
		map.put("frequencyList", frequencyList);
		map.put("opPatientIssueList", storeOpPatientIssueM);
		return map;
	}

	public Map<String, Object> getHinNoList(String serviceNumber) {
		Session session = (Session) getSession();
		List<Object> hinList = new ArrayList<Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			hinList = session.createCriteria(Patient.class).add(
					Restrictions.eq("ServiceNo", serviceNumber)).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("hinList", hinList);
		return map;
	}



	public Map<String, Object> getParaList(String issueNo) {
		Session session = (Session) getSession();

		List<Object> paraList = new ArrayList<Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		String serviceNo="";
		String hospitalId="";
		int visitNo=0;
		String hinNo="";
		try {
			String query="select oim.SERVICE_NO,oim.HOSPITAL_ID,v.VISIT_NO,p.HIN_NO from store_op_patient_issue_m  oim,PATIENT_PRESCRIPTION_HEADER ppd,visit v,patient p  where oim.PRESCRIPTION_ID=ppd.PRESCRIPTION_ID and ppd.VISIT_ID=v.VISIT_ID and ppd.HIN_ID=p.HIN_ID and oim.ISSUE_NO='"
				+ issueNo + "'";

			paraList = session.createSQLQuery(query).list();
			for (Iterator iterator2 = paraList.iterator(); iterator2.hasNext();)
			{
				Object[] obj = (Object[]) iterator2.next();
				serviceNo=obj[0].toString();
				hospitalId=obj[1].toString();
				visitNo=Integer.parseInt((obj[2]).toString());
				hinNo=obj[3].toString();
			}


		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("serviceNo", serviceNo);
		map.put("hospitalId", hospitalId);
		map.put("visitNo", visitNo);
		map.put("hinNo", hinNo);
		return map;
	}







	public Map<String, Object> showIPDPatientIssueGridPatientWise(Map map)
	{

		List listOfItemsInStock = new ArrayList();
		List opdIssueNo = new ArrayList();
		List itemList = new ArrayList();
		List hinNoList = new ArrayList();
		List issueNoList = new ArrayList();
		List<StoreItemBatchStock> listOfItemsStock = new ArrayList<StoreItemBatchStock>();
		List<StoreItemBatchStock> listOfItemsStockInStock = new ArrayList<StoreItemBatchStock>();
		List<MasEmployee> empList = new ArrayList<MasEmployee>();
		Map mapItem=new HashMap();
		Session session = (Session) getSession();
		int deptId = (Integer) map.get("deptId");
		int hospitalId=(Integer)map.get("hospitalId");
		Calendar expiryDate = Calendar.getInstance();
		expiryDate.add(Calendar.DAY_OF_MONTH, Integer.parseInt(HMSUtil.getProperties("adt.properties", "prescriptionExpiry")));
		String expiryStr = HMSUtil.convertDateToStringFormat(expiryDate.getTime(), "yyyy-MM-dd");
		List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();
		String hinNo = "";
		String opdIssuenoIncremented = "";
		int wardId = 0;
		int itemId = 0;
		
		if(map.get("wardId") != null){
			wardId = (Integer)map.get("wardId");
		}
		
		if(map.get("itemId") != null){
			itemId = (Integer)map.get("itemId");
		}
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (map.get("hinNo") == null
					&& Integer.parseInt(map.get("hinId").toString()) != 0) {
				int hinId = (Integer) map.get("hinId");
				hinNoList = session.createQuery(
						"select p from Patient as p where p.Id=" + hinId)
						.list();
				Patient patient = (Patient) hinNoList.get(0);
				hinNo = patient.getHinNo();
			} else {
				hinNo = (String) map.get("hinNo");
			}


			listOfItemsInStock = session.createQuery("select sib.Item.Id,sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="+deptId+" and sib.Hospital.Id="+hospitalId+"  group by sib.Item.Id ").list();



			opdIssueNo = session.createQuery(
					"select syd from StoreFyDocumentNo as syd where syd.Department.Id="+deptId+" and syd.Hospital.Id="+hospitalId).list();
			// issueNoList = session.createQuery("select sim from StoreIpIssueM
			// as sim where sim.Department.Id="+deptId+"and
			// sim.IssueType='w'").list();
			empList = session
			.createQuery("select emp from MasEmployee  as emp where emp.EmpCategory.Id=" + 1)
			.list();
			Iterator iterator = listOfItemsInStock.iterator();
			if (map.get("buttonFlag") != null) {
				String issueNo = (String) map.get("issueNo");
				opdIssuenoIncremented = issueNo;
				// opdIssueNo = session.createQuery("select syd from
				// StoreFyDocumentNo as syd where
				// syd.OpdIssueNo="+opdIssuenoIncremented).list();
				// opdIssueNo=
				// session.createCriteria(StoreFyDocumentNo.class).add(Restrictions.eq("OpdIssueNo",
				// opdIssuenoIncremented)).list();
			} else {
				// opdIssueNo = session.createQuery("select syd from
				// StoreFyDocumentNo as syd where
				// syd.Department.Id="+deptId).list();
				String opdIssueNoFromDB = "";
				if(opdIssueNo.size() > 0){
					StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) opdIssueNo.get(0);
					opdIssueNoFromDB = storeFyDocumentNo.getOpdIssueNo();
				}
				opdIssuenoIncremented = getMaxNo(opdIssueNoFromDB);
			}

			List<PatientPrescriptionDetails>  presList = new ArrayList<PatientPrescriptionDetails>();
			List<Object[]> stockInHandList = new ArrayList<Object[]>();
			if(wardId != 0){
				String status ="c";
				presList = session.createCriteria(PatientPrescriptionDetails.class).createAlias("Prescription", "presc")
				.add(Restrictions.eq("Item.Id", itemId))		
				.add(Restrictions.eq("presc.Department.Id", wardId))
				.add(Restrictions.eq("presc.Status", "p").ignoreCase())
				.add(Restrictions.isNotNull("presc.Inpatient"))
				.createAlias("presc.Hospital","hospital").add(Restrictions.eq("hospital.Id", hospitalId))
				.add(Restrictions.ne("Total",0))
				.list();


				if (presList != null && presList.size() > 0) {
					map.put("presList", presList);
					for (PatientPrescriptionDetails patientPrescriptionDetails : presList) {
						List<Object[]> batchStockList = new ArrayList<Object[]>();
						batchStockList = session.createCriteria(StoreItemBatchStock.class).createAlias("Item", "item")
						.createAlias("Department", "dept").add(Restrictions.eq("dept.Id", deptId))
						.createAlias("Hospital","hospital").add(Restrictions.eq("hospital.Id", hospitalId))
						.add(Restrictions.eq("item.Id", patientPrescriptionDetails.getItem().getId()))
						.add(Restrictions.isNotNull("ExpiryDate"))
						.setProjection(Projections.projectionList().add(Projections.property("item.Id")).add(Projections.groupProperty("item.Id"))
								.add(Projections.sum("ClosingStock"))).list();
						if(batchStockList.size()>0)
							stockInHandList.add(batchStockList.get(0));
						List BatchList=new ArrayList();
						String query="select sibs.BATCH_NO from store_item_batch_stock sibs where sibs.Expiry_Date>'"+expiryStr+"' and sibs.ITEM_ID="+patientPrescriptionDetails.getItem().getId()+"and sibs.CLOSING_STOCK>0 and sibs.DEPARTMENT_ID="+deptId+" and sibs.HOSPITAL_ID="+hospitalId+" group by sibs.BATCH_NO,sibs.Expiry_Date order by sibs.Expiry_Date asc ";

						BatchList=session.createSQLQuery(query).list();
						mapItem.put(patientPrescriptionDetails.getItem().getId(),BatchList);
					}
					map.put("stockInHandList", stockInHandList);
				}
				List<StoreOpPatientIssueM> issueList = new ArrayList<StoreOpPatientIssueM>();
				issueList = session.createCriteria(StoreOpPatientIssueM.class).createAlias("PatientPrescriptionHeader", "pph")
				.add(Restrictions.eq("pph.Department.Id", wardId))
				.add(Restrictions.isNotNull("pph.Inpatient"))
				.list();
				map.put("issueList", issueList);
				System.out.println("issueList"+ issueList.size());
				System.out.println("presList"+ presList.size());
			}
			listOfItemsStock = session
			.createQuery(
					"select sib.Item.Id,sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="
					+ deptId + "and sib.Hospital.Id="+hospitalId+" and sib.ExpiryDate>'"+expiryStr+"' group by sib.Item.Id ").list();

			listOfItemsStockInStock=session.createQuery(
					"select sib.Item.Id,sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="
					+ "24" + "and sib.Hospital.Id="+hospitalId+" and sib.ExpiryDate>'"+expiryStr+"' group by sib.Item.Id ").list();

			
			frequencyList = session.createCriteria(MasFrequency.class).add(Restrictions.eq("Status","y" )).list();
			
			
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		
		map.put("opdIssueNo", opdIssueNo);
		map.put("listOfItemsStock", listOfItemsStock);
		map.put("listOfItemsStockInStock",listOfItemsStockInStock);
		map.put("empList", empList);
		map.put("hinNo", hinNo);
		map.put("opdIssuenoIncremented", opdIssuenoIncremented);
		map.put("mapItem",mapItem);
		map.put("frequencyList",frequencyList);
		return map;
	}
	
	public Map<String, Object> showOPDPatientIssueGridFAC(Map map)
	{

		List listOfItemsInStock = new ArrayList();
		List opdIssueNo = new ArrayList();
		List itemList = new ArrayList();
		List hinNoList = new ArrayList();
		List issueNoList = new ArrayList();
		List<StoreItemBatchStock> listOfItemsStock = new ArrayList<StoreItemBatchStock>();
		List<StoreItemBatchStock> listOfItemsStockInStock = new ArrayList<StoreItemBatchStock>();
		List<MasEmployee> empList = new ArrayList<MasEmployee>();
		Map mapItem=new HashMap();
		Session session = (Session) getSession();
		int deptId = (Integer) map.get("deptId");
		int hospitalId=(Integer)map.get("hospitalId");		
		/*Calendar expiryDate = Calendar.getInstance();
		expiryDate.add(Calendar.DAY_OF_MONTH, Integer.parseInt(HMSUtil.getProperties("adt.properties", "prescriptionExpiry")));
		String expiryStr = HMSUtil.convertDateToStringFormat(expiryDate.getTime(), "yyyy-MM-dd");*/
		
		Date expiryDate = HMSUtil.getExpiryDateYYYYMMDD();	
		String expiryStr = HMSUtil.convertDateToStringFormat(expiryDate, "yyyy-MM-dd");
		
		List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();
		String hinNo = "";
		String opdIssuenoIncremented = "";
		int prescriptionId = 0;
		if(map.get("prescriptionId") != null){
			prescriptionId = (Integer)map.get("prescriptionId");
		}
		System.out.println("prescriptionId"+prescriptionId);
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (map.get("hinNo") == null
					&& Integer.parseInt(map.get("hinId").toString()) != 0) {
				int hinId = (Integer) map.get("hinId");
				hinNoList = session.createQuery(
						"select p from Patient as p where p.Id=" + hinId)
						.list();
				Patient patient = (Patient) hinNoList.get(0);
				hinNo = patient.getHinNo();
			} else {
				hinNo = (String) map.get("hinNo");
			}


			listOfItemsInStock = session.createQuery("select sib.Item.Id,sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="+deptId+" and sib.Hospital.Id="+hospitalId+"  group by sib.Item.Id ").list();



			opdIssueNo = session.createQuery(
					"select syd from StoreFyDocumentNo as syd where syd.Department.Id="+deptId+" and syd.Hospital.Id="+hospitalId).list();
			// issueNoList = session.createQuery("select sim from StoreIpIssueM
			// as sim where sim.Department.Id="+deptId+"and
			// sim.IssueType='w'").list();
			/*empList = session
			.createQuery("select emp from MasEmployee  as emp where emp.EmpCategory.Id=" + 1)
			.list();*/
			Iterator iterator = listOfItemsInStock.iterator();
			if (map.get("buttonFlag") != null) {
				String issueNo = (String) map.get("issueNo");
				opdIssuenoIncremented = issueNo;
				// opdIssueNo = session.createQuery("select syd from
				// StoreFyDocumentNo as syd where
				// syd.OpdIssueNo="+opdIssuenoIncremented).list();
				// opdIssueNo=
				// session.createCriteria(StoreFyDocumentNo.class).add(Restrictions.eq("OpdIssueNo",
				// opdIssuenoIncremented)).list();
			} else {
				// opdIssueNo = session.createQuery("select syd from
				// StoreFyDocumentNo as syd where
				// syd.Department.Id="+deptId).list();
				String opdIssueNoFromDB = "";
				if(opdIssueNo.size() > 0){
					StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) opdIssueNo.get(0);
					opdIssueNoFromDB = storeFyDocumentNo.getOpdIssueNo();
				}
				opdIssuenoIncremented = getMaxNo(opdIssueNoFromDB);
			}

			List<PatientPrescriptionDetails>  presList = new ArrayList<PatientPrescriptionDetails>();
			List<PatientPrescriptionDetails>  nipList = new ArrayList<PatientPrescriptionDetails>();
			List<PatientPrescriptionDetails>  injList = new ArrayList<PatientPrescriptionDetails>();
			List<Object[]> stockInHandList = new ArrayList<Object[]>();
			if(prescriptionId != 0){
				String status ="c";
				presList = session.createCriteria(PatientPrescriptionDetails.class)
						.createAlias("Prescription", "presc")
						.createAlias("Item", "item")
				.add(Restrictions.eq("item.IssueFrom","d").ignoreCase())
				.add(Restrictions.eq("item.ItemClassification.Id",1))
				.add(Restrictions.eq("presc.Id", prescriptionId))
				.add(Restrictions.eq("presc.Status", "p").ignoreCase())
				.createAlias("presc.Hospital","hospital").add(Restrictions.eq("hospital.Id", hospitalId))
				.add(Restrictions.ne("Total",0))
				.list();
				
				
				nipList = session.createCriteria(PatientPrescriptionDetails.class)
						.createAlias("Prescription", "presc")
						.createAlias("Item", "item")	
				.add(Restrictions.or(Restrictions.isNull("item.IssueFrom"), Restrictions.eq("item.IssueFrom","d").ignoreCase()))
				.add(Restrictions.eq("item.ItemClassification.Id",2))
				.add(Restrictions.eq("presc.Id", prescriptionId))
				.add(Restrictions.eq("presc.NipStatus", "A").ignoreCase())
				.add(Restrictions.eq("presc.Status", "p").ignoreCase())
				.createAlias("presc.Hospital","hospital").add(Restrictions.eq("hospital.Id", hospitalId))
				.add(Restrictions.ne("Total",0))
				.list();
				
				map.put("nipList", nipList);
				
				injList = session.createCriteria(PatientPrescriptionDetails.class)
						.createAlias("Prescription", "presc")
						.createAlias("Item", "item")
				.add( Restrictions.eq("item.IssueFrom","i").ignoreCase()) 	
				.add(Restrictions.eq("item.ItemClassification.Id",1))
				.add(Restrictions.eq("presc.Id", prescriptionId))
				.add(Restrictions.eq("presc.Status", "p").ignoreCase())
				.createAlias("presc.Hospital","hospital").add(Restrictions.eq("hospital.Id", hospitalId))
				.add(Restrictions.ne("Total",0))
				.list();
				map.put("injList", injList);
                System.out.println("presList"+presList.size());   

				if (presList != null && presList.size() > 0) {
					map.put("presList", presList);
					for (PatientPrescriptionDetails patientPrescriptionDetails : presList) {
						/*List<Object[]> batchStockList = new ArrayList<Object[]>();
						batchStockList = session.createCriteria(StoreItemBatchStock.class).createAlias("Item", "item")
						.createAlias("Department", "dept").add(Restrictions.eq("dept.Id", deptId))
						.createAlias("Hospital","hospital").add(Restrictions.eq("hospital.Id", hospitalId))
						.add(Restrictions.eq("item.Id", patientPrescriptionDetails.getItem().getId()))
						.add(Restrictions.isNotNull("ExpiryDate"))
						.setProjection(Projections.projectionList().add(Projections.property("item.Id")).add(Projections.groupProperty("item.Id"))
								.add(Projections.sum("ClosingStock"))).list();*/
						List<StoreItemBatchStock> BatchList=new ArrayList<StoreItemBatchStock>();
						BatchList = session.createCriteria(StoreItemBatchStock.class)								
								.add(Restrictions.gt("ExpiryDate", expiryDate))
								.add(Restrictions.eq("Item.Id", patientPrescriptionDetails.getItem().getId()))	
							    .add(Restrictions.eq("Department.Id", deptId))
								.add(Restrictions.eq("Hospital.Id", hospitalId))
								.add(Restrictions.gt("ClosingStock", new BigDecimal(0)))
								.addOrder(Order.asc("ExpiryDate")).list();
								
						if(BatchList.size()>0)
							/*stockInHandList.add(batchStockList.get(0));*/
						
						/*String query="select sibs.BATCH_NO from store_item_batch_stock sibs where sibs.Expiry_Date>'"+expiryStr+"' and sibs.ITEM_ID="+patientPrescriptionDetails.getItem().getId()+"and sibs.CLOSING_STOCK>0 and sibs.DEPARTMENT_ID="+deptId+" and sibs.HOSPITAL_ID="+hospitalId+" group by sibs.BATCH_NO,sibs.Expiry_Date order by sibs.Expiry_Date asc ";*/
						/*String query="select sibs.BATCH_NO, sibs.stock_id from store_item_batch_stock sibs where sibs.Expiry_Date>'"+expiryStr+"' and sibs.ITEM_ID="+patientPrescriptionDetails.getItem().getId()+"and sibs.CLOSING_STOCK>0 and sibs.DEPARTMENT_ID="+deptId+" and sibs.HOSPITAL_ID="+hospitalId+" order by sibs.Expiry_Date asc ";*/
					
						mapItem.put(patientPrescriptionDetails.getItem().getId(),BatchList);
					}
					map.put("stockInHandList", stockInHandList);
				}
				List<StoreOpPatientIssueM> issueList = new ArrayList<StoreOpPatientIssueM>();
				issueList = session.createCriteria(StoreOpPatientIssueM.class).createAlias("PatientPrescriptionHeader", "pph")
				.add(Restrictions.eq("pph.Id", prescriptionId)).list();
				map.put("issueList", issueList);
			}
			listOfItemsStock = session
			.createQuery(
					"select sib.Item.Id,sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="
					+ deptId + "and sib.Hospital.Id="+hospitalId+" and sib.ExpiryDate>'"+expiryStr+"' group by sib.Item.Id ").list();

			listOfItemsStockInStock=session.createQuery(
					"select sib.Item.Id,sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="
					+ "24" + "and sib.Hospital.Id="+hospitalId+" and sib.ExpiryDate>'"+expiryStr+"' group by sib.Item.Id ").list();

			
			frequencyList = session.createCriteria(MasFrequency.class).add(Restrictions.eq("Status","y" )).list();
			
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("opdIssueNo", opdIssueNo);
		map.put("listOfItemsStock", listOfItemsStock);
		map.put("listOfItemsStockInStock",listOfItemsStockInStock);
		map.put("empList", empList);
		map.put("hinNo", hinNo);
		map.put("opdIssuenoIncremented", opdIssuenoIncremented);
		map.put("mapItem",mapItem);
		map.put("frequencyList",frequencyList);
		return map;
	}

	
	public Map<String, Object> showOPDPatientIssueGrid(Map map)
	{

		List listOfItemsInStock = new ArrayList();
		List opdIssueNo = new ArrayList();
		List itemList = new ArrayList();
		List hinNoList = new ArrayList();
		List issueNoList = new ArrayList();
		List<StoreItemBatchStock> listOfItemsStock = new ArrayList<StoreItemBatchStock>();
		List<StoreItemBatchStock> listOfItemsStockInStock = new ArrayList<StoreItemBatchStock>();
		List<StoreItemBatchStock> listOfItemsInDis = new ArrayList<StoreItemBatchStock>();
		
		List<MasEmployee> empList = new ArrayList<MasEmployee>();
		Map mapItem=new HashMap();
		Session session = (Session) getSession();
		int deptId = (Integer) map.get("deptId");
		int hospitalId=(Integer)map.get("hospitalId");
		/*Calendar expiryDate = Calendar.getInstance();
		expiryDate.add(Calendar.DAY_OF_MONTH, Integer.parseInt(HMSUtil.getProperties("adt.properties", "prescriptionExpiry")));
		String expiryStr = HMSUtil.convertDateToStringFormat(expiryDate.getTime(), "yyyy-MM-dd");*/
		Date expiryDate = HMSUtil.getExpiryDateYYYYMMDD();	
		String expiryStr = HMSUtil.convertDateToStringFormat(expiryDate, "yyyy-MM-dd");
		List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();
		String hinNo = "";
		String opdIssuenoIncremented = "";
		int wardId = 0;
		int duration = Integer.parseInt(HMSUtil.getProperties("adt.properties", "prescriptionDurationForIPD"));
		Calendar cal = GregorianCalendar.getInstance();
		cal.add( Calendar.DAY_OF_YEAR, -duration);
		Date minimumDate = cal.getTime();
		
		if(map.get("wardId") != null){
			wardId = (Integer)map.get("wardId");
		}
		
		int storesId = 0;
		int WpId = 0;
		int CDId=0;
		Properties properties = new Properties();
		URL resourcePath = Thread.currentThread().getContextClassLoader()
				.getResource("adt.properties");

		try {
			properties.load(resourcePath.openStream());
			storesId = Integer.parseInt(properties.getProperty("storesDeptId"));
			WpId = Integer.parseInt(properties.getProperty("WPDepId"));
			CDId = Integer.parseInt(properties.getProperty("pharmacyDepId"));
	
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	
		
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (map.get("hinNo") == null
					&& Integer.parseInt(map.get("hinId").toString()) != 0) {
				int hinId = (Integer) map.get("hinId");
				hinNoList = session.createQuery(
						"select p from Patient as p where p.Id=" + hinId)
						.list();
				Patient patient = (Patient) hinNoList.get(0);
				hinNo = patient.getHinNo();
			} else {
				hinNo = (String) map.get("hinNo");
			}
			
			
			


			 /*listOfItemsInStock = session.createQuery("select sib.Item.Id,sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="+storesId+" and sib.Hospital.Id="+hospitalId+"  group by sib.Item.Id ").list();*/



			opdIssueNo = session.createQuery(
					"select syd from StoreFyDocumentNo as syd where syd.Department.Id="+deptId+" and syd.Hospital.Id="+hospitalId).list();
			// issueNoList = session.createQuery("select sim from StoreIpIssueM
			// as sim where sim.Department.Id="+deptId+"and
			// sim.IssueType='w'").list();
			empList = session
			.createQuery("select emp from MasEmployee  as emp where emp.EmpCategory.Id=" + 1)
			.list();
		/*	Iterator iterator = listOfItemsInStock.iterator();
			if (map.get("buttonFlag") != null) {
				String issueNo = (String) map.get("issueNo");
				opdIssuenoIncremented = issueNo;
				// opdIssueNo = session.createQuery("select syd from
				// StoreFyDocumentNo as syd where
				// syd.OpdIssueNo="+opdIssuenoIncremented).list();
				// opdIssueNo=
				// session.createCriteria(StoreFyDocumentNo.class).add(Restrictions.eq("OpdIssueNo",
				// opdIssuenoIncremented)).list();
			} else {
				// opdIssueNo = session.createQuery("select syd from
				// StoreFyDocumentNo as syd where
				// syd.Department.Id="+deptId).list();
				String opdIssueNoFromDB = "";
				if(opdIssueNo.size() > 0){
					StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) opdIssueNo.get(0);
					opdIssueNoFromDB = storeFyDocumentNo.getOpdIssueNo();
				}
				opdIssuenoIncremented = getMaxNo(opdIssueNoFromDB);
			}*/

			List<PatientPrescriptionDetails>  presList = new ArrayList<PatientPrescriptionDetails>();
			List<Object[]> stockInHandList = new ArrayList<Object[]>();
			if(wardId != 0){
				String status ="c";
				presList = session.createCriteria(PatientPrescriptionDetails.class).createAlias("Prescription", "presc")
				.add(Restrictions.eq("presc.Department.Id", wardId))
				.add(Restrictions.eq("presc.Status", "p").ignoreCase())
				.add(Restrictions.isNotNull("presc.Inpatient"))
				.add(Restrictions.ge("presc.PrescriptionDate", minimumDate))
				.createAlias("presc.Hospital","hospital").add(Restrictions.eq("hospital.Id", hospitalId))
				.add(Restrictions.isNull("QtyIssued"))
				.add(Restrictions.ne("Total",0))
				.list();


				if (presList != null && presList.size() > 0) {
					map.put("presList", presList);
					Set<Integer> itemSet = new HashSet<Integer>();
					
					for (PatientPrescriptionDetails patientPrescriptionDetails : presList) {
						itemSet.add(patientPrescriptionDetails.getItem().getId());
						List<Object[]> batchStockList = new ArrayList<Object[]>();
						batchStockList = session.createCriteria(StoreItemBatchStock.class).createAlias("Item", "item")
						.createAlias("Department", "dept").add(Restrictions.eq("dept.Id", deptId))
						.createAlias("Hospital","hospital").add(Restrictions.eq("hospital.Id", hospitalId))
						.add(Restrictions.eq("item.Id", patientPrescriptionDetails.getItem().getId()))
						.add(Restrictions.isNotNull("ExpiryDate"))
						.setProjection(Projections.projectionList().add(Projections.property("item.Id")).add(Projections.groupProperty("item.Id"))
								.add(Projections.sum("ClosingStock"))).list();
						if(batchStockList.size()>0)
							stockInHandList.add(batchStockList.get(0));
						List BatchList=new ArrayList();
						String query="select sibs.BATCH_NO from store_item_batch_stock sibs where sibs.Expiry_Date>'"+expiryStr+"' and sibs.ITEM_ID="+patientPrescriptionDetails.getItem().getId()+"and sibs.CLOSING_STOCK>0 and sibs.DEPARTMENT_ID="+deptId+" and sibs.HOSPITAL_ID="+hospitalId+" group by sibs.BATCH_NO,sibs.Expiry_Date order by sibs.Expiry_Date asc ";

						BatchList=session.createSQLQuery(query).list();
						mapItem.put(patientPrescriptionDetails.getItem().getId(),BatchList);
					}
					map.put("stockInHandList", stockInHandList);
					map.put("itemSet", itemSet);
				}
				/*List<StoreOpPatientIssueM> issueList = new ArrayList<StoreOpPatientIssueM>();
				issueList = session.createCriteria(StoreOpPatientIssueM.class).createAlias("PatientPrescriptionHeader", "pph")
				.add(Restrictions.eq("pph.Department.Id", wardId))
				.add(Restrictions.isNotNull("pph.Inpatient"))
				.list();
				map.put("issueList", issueList);*/
				/*System.out.println("issueList"+ issueList.size());*/
				System.out.println("presList"+ presList.size());
			}
			listOfItemsStock = session
			.createQuery(
					"select sib.Item.Id,sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="
					+ WpId + "and sib.Hospital.Id="+hospitalId+" and sib.ExpiryDate>'"+expiryStr+"' group by sib.Item.Id ").list();

			listOfItemsStockInStock=session.createQuery(
					"select sib.Item.Id,sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="
					+ storesId + "and sib.Hospital.Id="+hospitalId+" and sib.ExpiryDate>'"+expiryStr+"' group by sib.Item.Id ").list();

			listOfItemsInDis=session.createQuery(
					"select sib.Item.Id,sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="
					+ CDId + "and sib.Hospital.Id="+hospitalId+" and sib.ExpiryDate>'"+expiryStr+"' group by sib.Item.Id ").list();

			
			frequencyList = session.createCriteria(MasFrequency.class).add(Restrictions.eq("Status","y" )).list();
			
			
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		
		map.put("opdIssueNo", opdIssueNo);
		map.put("listOfItemsStock", listOfItemsStock);
		map.put("listOfItemsInDis", listOfItemsInDis);
		map.put("listOfItemsStockInStock",listOfItemsStockInStock);
		map.put("empList", empList);
		map.put("hinNo", hinNo);
		map.put("opdIssuenoIncremented", opdIssuenoIncremented);
		map.put("mapItem",mapItem);
		map.put("frequencyList",frequencyList);
		return map;
	}
	
	public Map<String, Object> showOPDPatientIssueGridForMIssue(Map map)
	{

		List listOfItemsInStock = new ArrayList();
		List opdIssueNo = new ArrayList();
		List itemList = new ArrayList();
		List hinNoList = new ArrayList();
		List issueNoList = new ArrayList();
		/*List<StoreItemBatchStock> listOfItemsStock = new ArrayList<StoreItemBatchStock>();
		List<StoreItemBatchStock> listOfItemsStockInStock = new ArrayList<StoreItemBatchStock>();
		List<StoreItemBatchStock> listOfItemsInDis = new ArrayList<StoreItemBatchStock>();*/
		
		List<MasEmployee> empList = new ArrayList<MasEmployee>();
		Map mapItem=new HashMap();
		Session session = (Session) getSession();
		int deptId = (Integer) map.get("deptId");
		int hospitalId=(Integer)map.get("hospitalId");
		/*Calendar expiryDate = Calendar.getInstance();
		expiryDate.add(Calendar.DAY_OF_MONTH, Integer.parseInt(HMSUtil.getProperties("adt.properties", "prescriptionExpiry")));
		String expiryStr = HMSUtil.convertDateToStringFormat(expiryDate.getTime(), "yyyy-MM-dd");*/
		Date expiryDate = HMSUtil.getExpiryDateYYYYMMDD();	
		String expiryStr = HMSUtil.convertDateToStringFormat(expiryDate, "yyyy-MM-dd");
		List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();
		String hinNo = "";
		String opdIssuenoIncremented = "";
		/*int wardId = 0;*/
		int duration = Integer.parseInt(HMSUtil.getProperties("adt.properties", "prescriptionDurationForIPD"));
		Calendar cal = GregorianCalendar.getInstance();
		cal.add( Calendar.DAY_OF_YEAR, -duration);
		Date minimumDate = cal.getTime();
		
	/*	if(map.get("wardId") != null){
			wardId = (Integer)map.get("wardId");
		}*/
		
		int storesId = 0;
		int WpId = 0;
		int CDId=0;
		Properties properties = new Properties();
		URL resourcePath = Thread.currentThread().getContextClassLoader()
				.getResource("adt.properties");

		try {
			properties.load(resourcePath.openStream());
			storesId = Integer.parseInt(properties.getProperty("storesDeptId"));
			WpId = Integer.parseInt(properties.getProperty("WPDepId"));
			CDId = Integer.parseInt(properties.getProperty("pharmacyDepId"));
	
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	
		
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
		/*	if (map.get("hinNo") == null
					&& Integer.parseInt(map.get("hinId").toString()) != 0) {
				int hinId = (Integer) map.get("hinId");
				hinNoList = session.createQuery(
						"select p from Patient as p where p.Id=" + hinId)
						.list();
				Patient patient = (Patient) hinNoList.get(0);
				hinNo = patient.getHinNo();
			} else {
				hinNo = (String) map.get("hinNo");
			}*/
			
			
			


			 /*listOfItemsInStock = session.createQuery("select sib.Item.Id,sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="+storesId+" and sib.Hospital.Id="+hospitalId+"  group by sib.Item.Id ").list();*/



			opdIssueNo = session.createQuery(
					"select syd from StoreFyDocumentNo as syd where syd.Department.Id="+deptId+" and syd.Hospital.Id="+hospitalId).list();
			// issueNoList = session.createQuery("select sim from StoreIpIssueM
			// as sim where sim.Department.Id="+deptId+"and
			// sim.IssueType='w'").list();
		/*	empList = session
			.createQuery("select emp from MasEmployee  as emp where emp.EmpCategory.Id=" + 1)
			.list();*/
		/*	Iterator iterator = listOfItemsInStock.iterator();
			if (map.get("buttonFlag") != null) {
				String issueNo = (String) map.get("issueNo");
				opdIssuenoIncremented = issueNo;
				// opdIssueNo = session.createQuery("select syd from
				// StoreFyDocumentNo as syd where
				// syd.OpdIssueNo="+opdIssuenoIncremented).list();
				// opdIssueNo=
				// session.createCriteria(StoreFyDocumentNo.class).add(Restrictions.eq("OpdIssueNo",
				// opdIssuenoIncremented)).list();
			} else {
				// opdIssueNo = session.createQuery("select syd from
				// StoreFyDocumentNo as syd where
				// syd.Department.Id="+deptId).list();
				String opdIssueNoFromDB = "";
				if(opdIssueNo.size() > 0){
					StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) opdIssueNo.get(0);
					opdIssueNoFromDB = storeFyDocumentNo.getOpdIssueNo();
				}
				opdIssuenoIncremented = getMaxNo(opdIssueNoFromDB);
			}*/

			List<PatientPrescriptionDetails>  presList = new ArrayList<PatientPrescriptionDetails>();
			List<Object[]> stockInHandList = new ArrayList<Object[]>();
			if(deptId != 0){
				String status ="c";
				presList = session.createCriteria(PatientPrescriptionDetails.class).createAlias("Prescription", "presc")
				.add(Restrictions.eq("presc.Department.Id", deptId))
				.add(Restrictions.eq("presc.Status", "p").ignoreCase())
				.add(Restrictions.isNotNull("presc.Inpatient"))
				.add(Restrictions.ge("presc.PrescriptionDate", minimumDate))
				.createAlias("presc.Hospital","hospital").add(Restrictions.eq("hospital.Id", hospitalId))
				.add(Restrictions.isNull("QtyIssued"))
				.add(Restrictions.ne("Total",0))
				.list();


				if (presList != null && presList.size() > 0) {
					map.put("presList", presList);
					Set<Integer> itemSet = new HashSet<Integer>();
					
					for (PatientPrescriptionDetails patientPrescriptionDetails : presList) {
						itemSet.add(patientPrescriptionDetails.getItem().getId());
						/*List<Object[]> batchStockList = new ArrayList<Object[]>();
						batchStockList = session.createCriteria(StoreItemBatchStock.class).createAlias("Item", "item")
						.createAlias("Department", "dept").add(Restrictions.eq("dept.Id", deptId))
						.createAlias("Hospital","hospital").add(Restrictions.eq("hospital.Id", hospitalId))
						.add(Restrictions.eq("item.Id", patientPrescriptionDetails.getItem().getId()))
						.add(Restrictions.isNotNull("ExpiryDate"))
						.setProjection(Projections.projectionList().add(Projections.property("item.Id")).add(Projections.groupProperty("item.Id"))
								.add(Projections.sum("ClosingStock"))).list();
						if(batchStockList.size()>0)
							stockInHandList.add(batchStockList.get(0));
						List BatchList=new ArrayList();
						String query="select sibs.BATCH_NO from store_item_batch_stock sibs where sibs.Expiry_Date>'"+expiryStr+"' and sibs.ITEM_ID="+patientPrescriptionDetails.getItem().getId()+"and sibs.CLOSING_STOCK>0 and sibs.DEPARTMENT_ID="+deptId+" and sibs.HOSPITAL_ID="+hospitalId+" group by sibs.BATCH_NO,sibs.Expiry_Date order by sibs.Expiry_Date asc ";

						BatchList=session.createSQLQuery(query).list();
						mapItem.put(patientPrescriptionDetails.getItem().getId(),BatchList);*/
					}
					/*map.put("stockInHandList", stockInHandList);*/
					map.put("itemSet", itemSet);
				}
				/*List<StoreOpPatientIssueM> issueList = new ArrayList<StoreOpPatientIssueM>();
				issueList = session.createCriteria(StoreOpPatientIssueM.class).createAlias("PatientPrescriptionHeader", "pph")
				.add(Restrictions.eq("pph.Department.Id", wardId))
				.add(Restrictions.isNotNull("pph.Inpatient"))
				.list();
				map.put("issueList", issueList);*/
				/*System.out.println("issueList"+ issueList.size());*/
				System.out.println("presList"+ presList.size());
			}
		/*	listOfItemsStock = session
			.createQuery(
					"select sib.Item.Id,sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="
					+ WpId + "and sib.Hospital.Id="+hospitalId+" and sib.ExpiryDate>'"+expiryStr+"' group by sib.Item.Id ").list();

			listOfItemsStockInStock=session.createQuery(
					"select sib.Item.Id,sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="
					+ storesId + "and sib.Hospital.Id="+hospitalId+" and sib.ExpiryDate>'"+expiryStr+"' group by sib.Item.Id ").list();

			listOfItemsInDis=session.createQuery(
					"select sib.Item.Id,sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="
					+ CDId + "and sib.Hospital.Id="+hospitalId+" and sib.ExpiryDate>'"+expiryStr+"' group by sib.Item.Id ").list();

			
			frequencyList = session.createCriteria(MasFrequency.class).add(Restrictions.eq("Status","y" )).list();
			*/
			
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		
		map.put("opdIssueNo", opdIssueNo);
/*		map.put("listOfItemsStock", listOfItemsStock);
		map.put("listOfItemsInDis", listOfItemsInDis);
		map.put("listOfItemsStockInStock",listOfItemsStockInStock);*/
		map.put("empList", empList);
		map.put("hinNo", hinNo);
		map.put("opdIssuenoIncremented", opdIssuenoIncremented);
		map.put("mapItem",mapItem);
		map.put("frequencyList",frequencyList);
		return map;
	}
	
	public Map<String, Object> showOPDPatientIssueGridPartial(Map map)
	{

		List listOfItemsInStock = new ArrayList();
		List opdIssueNo = new ArrayList();
		List itemList = new ArrayList();
		List hinNoList = new ArrayList();
		List issueNoList = new ArrayList();
		List<StoreItemBatchStock> listOfItemsStock = new ArrayList<StoreItemBatchStock>();
		List<StoreItemBatchStock> listOfItemsStockInStock = new ArrayList<StoreItemBatchStock>();
		List<StoreItemBatchStock> listOfItemsInDis = new ArrayList<StoreItemBatchStock>();
		
		List<MasEmployee> empList = new ArrayList<MasEmployee>();
		Map mapItem=new HashMap();
		Set issueNoSet=new HashSet();
		Session session = (Session) getSession();
		int deptId = (Integer) map.get("deptId");
		int hospitalId=(Integer)map.get("hospitalId");
		/*Calendar expiryDate = Calendar.getInstance();
		expiryDate.add(Calendar.DAY_OF_MONTH, Integer.parseInt(HMSUtil.getProperties("adt.properties", "prescriptionExpiry")));
		String expiryStr = HMSUtil.convertDateToStringFormat(expiryDate.getTime(), "yyyy-MM-dd");*/
		Date expiryDate = HMSUtil.getExpiryDateYYYYMMDD();	
		String expiryStr = HMSUtil.convertDateToStringFormat(expiryDate, "yyyy-MM-dd");
		List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();
		
		List<Object[]> dmiArray = new ArrayList<Object[]>();
		String hinNo = "";
		String opdIssuenoIncremented = "";
		int wardId = 0;
		if(map.get("wardId") != null){
			wardId = (Integer)map.get("wardId");
		}
		
		int storesId = 0;
		int WpId = 0;
		int CDId=0;
		Properties properties = new Properties();
		URL resourcePath = Thread.currentThread().getContextClassLoader()
				.getResource("adt.properties");

		try {
			properties.load(resourcePath.openStream());
			storesId = Integer.parseInt(properties.getProperty("storesDeptId"));
			WpId = Integer.parseInt(properties.getProperty("WPDepId"));
			CDId = Integer.parseInt(properties.getProperty("pharmacyDepId"));
	
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	
		
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (map.get("hinNo") == null
					&& Integer.parseInt(map.get("hinId").toString()) != 0) {
				int hinId = (Integer) map.get("hinId");
				hinNoList = session.createQuery(
						"select p from Patient as p where p.Id=" + hinId)
						.list();
				Patient patient = (Patient) hinNoList.get(0);
				hinNo = patient.getHinNo();
			} else {
				hinNo = (String) map.get("hinNo");
			}
			
			
			


			 /*listOfItemsInStock = session.createQuery("select sib.Item.Id,sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="+storesId+" and sib.Hospital.Id="+hospitalId+"  group by sib.Item.Id ").list();*/



			opdIssueNo = session.createQuery(
					"select syd from StoreFyDocumentNo as syd where syd.Department.Id="+deptId+" and syd.Hospital.Id="+hospitalId).list();
			// issueNoList = session.createQuery("select sim from StoreIpIssueM
			// as sim where sim.Department.Id="+deptId+"and
			// sim.IssueType='w'").list();
			empList = session
			.createQuery("select emp from MasEmployee  as emp where emp.EmpCategory.Id=" + 1)
			.list();
		/*	Iterator iterator = listOfItemsInStock.iterator();
			if (map.get("buttonFlag") != null) {
				String issueNo = (String) map.get("issueNo");
				opdIssuenoIncremented = issueNo;
				// opdIssueNo = session.createQuery("select syd from
				// StoreFyDocumentNo as syd where
				// syd.OpdIssueNo="+opdIssuenoIncremented).list();
				// opdIssueNo=
				// session.createCriteria(StoreFyDocumentNo.class).add(Restrictions.eq("OpdIssueNo",
				// opdIssuenoIncremented)).list();
			} else {
				// opdIssueNo = session.createQuery("select syd from
				// StoreFyDocumentNo as syd where
				// syd.Department.Id="+deptId).list();
				String opdIssueNoFromDB = "";
				if(opdIssueNo.size() > 0){
					StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) opdIssueNo.get(0);
					opdIssueNoFromDB = storeFyDocumentNo.getOpdIssueNo();
				}
				opdIssuenoIncremented = getMaxNo(opdIssueNoFromDB);
			}*/

			List<PatientPrescriptionDetails>  presList = new ArrayList<PatientPrescriptionDetails>();
			List<Object[]> stockInHandList = new ArrayList<Object[]>();
			if(wardId != 0){
				String status ="c";
				presList = session.createCriteria(PatientPrescriptionDetails.class).createAlias("Prescription", "presc")
				.add(Restrictions.eq("presc.Department.Id", wardId))
				.add(Restrictions.eq("presc.Status", "i").ignoreCase())
				.add(Restrictions.isNotNull("presc.Inpatient"))
				.createAlias("presc.Hospital","hospital").add(Restrictions.eq("hospital.Id", hospitalId))
				/*.add(Restrictions.isNull("QtyIssued"))
				.add(Restrictions.ne("Total",0))*/
				.list();


				if (presList != null && presList.size() > 0) {
					map.put("presList", presList);
					Set<Integer> itemSet = new HashSet<Integer>();
					
					for (PatientPrescriptionDetails patientPrescriptionDetails : presList) {
						itemSet.add(patientPrescriptionDetails.getItem().getId());
						List<Object[]> batchStockList = new ArrayList<Object[]>();
						batchStockList = session.createCriteria(StoreItemBatchStock.class).createAlias("Item", "item")
						.createAlias("Department", "dept").add(Restrictions.eq("dept.Id", deptId))
						.createAlias("Hospital","hospital").add(Restrictions.eq("hospital.Id", hospitalId))
						.add(Restrictions.eq("item.Id", patientPrescriptionDetails.getItem().getId()))
						.add(Restrictions.isNotNull("ExpiryDate"))
						.setProjection(Projections.projectionList().add(Projections.property("item.Id")).add(Projections.groupProperty("item.Id"))
								.add(Projections.sum("ClosingStock"))).list();
						if(batchStockList.size()>0)
							stockInHandList.add(batchStockList.get(0));
						List BatchList=new ArrayList();
						String query="select sibs.BATCH_NO from store_item_batch_stock sibs where sibs.Expiry_Date>'"+expiryStr+"' and sibs.ITEM_ID="+patientPrescriptionDetails.getItem().getId()+"and sibs.CLOSING_STOCK>0 and sibs.DEPARTMENT_ID="+deptId+" and sibs.HOSPITAL_ID="+hospitalId+" group by sibs.BATCH_NO,sibs.Expiry_Date order by sibs.Expiry_Date asc ";

						BatchList=session.createSQLQuery(query).list();
						mapItem.put(patientPrescriptionDetails.getItem().getId(),BatchList);
						issueNoSet.add(patientPrescriptionDetails.getPrescription().getDispensaryIssueNo());
					}
					map.put("stockInHandList", stockInHandList);
					map.put("itemSet", itemSet);
				}
				/*List<StoreOpPatientIssueM> issueList = new ArrayList<StoreOpPatientIssueM>();
				issueList = session.createCriteria(StoreOpPatientIssueM.class).createAlias("PatientPrescriptionHeader", "pph")
				.add(Restrictions.eq("pph.Department.Id", wardId))
				.add(Restrictions.isNotNull("pph.Inpatient"))
				.list();
				map.put("issueList", issueList);*/
				/*System.out.println("issueList"+ issueList.size());*/
				System.out.println("presList"+ presList.size());
			}
			listOfItemsStock = session
			.createQuery(
					"select sib.Item.Id,sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="
					+ WpId + "and sib.Hospital.Id="+hospitalId+" and sib.ExpiryDate>'"+expiryStr+"' group by sib.Item.Id ").list();

			listOfItemsStockInStock=session.createQuery(
					"select sib.Item.Id,sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="
					+ storesId + "and sib.Hospital.Id="+hospitalId+" and sib.ExpiryDate>'"+expiryStr+"' group by sib.Item.Id ").list();

			listOfItemsInDis=session.createQuery(
					"select sib.Item.Id,sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="
					+ CDId + "and sib.Hospital.Id="+hospitalId+" and sib.ExpiryDate>'"+expiryStr+"' group by sib.Item.Id ").list();

			
			frequencyList = session.createCriteria(MasFrequency.class).add(Restrictions.eq("Status","y" )).list();
			dmiArray = session.createCriteria(DepartmentMedicineIssue.class)
					.add(Restrictions.eq("Department.Id", wardId))
					.add(Restrictions.in("DispensaryIssueNo", issueNoSet))
					.setProjection(Projections.projectionList()
					.add( Projections.property("Item.Id"))
					.add( Projections.sum("QtyIssued"))
					.add( Projections.groupProperty("Item.Id"))).list();
			
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		
		map.put("opdIssueNo", opdIssueNo);
		map.put("dmiArray", dmiArray);
		map.put("listOfItemsStock", listOfItemsStock);
		map.put("listOfItemsInDis", listOfItemsInDis);
		map.put("listOfItemsStockInStock",listOfItemsStockInStock);
		map.put("empList", empList);
		map.put("hinNo", hinNo);
		map.put("opdIssuenoIncremented", opdIssuenoIncremented);
		map.put("mapItem",mapItem);
		map.put("frequencyList",frequencyList);
		return map;
	}

	public Map<String, Object> showIPDPartialPatientIssueGrid(Map map)
	{

		List listOfItemsInStock = new ArrayList();
		List opdIssueNo = new ArrayList();
		List itemList = new ArrayList();
		List hinNoList = new ArrayList();
		List issueNoList = new ArrayList();
		List<StoreItemBatchStock> listOfItemsStock = new ArrayList<StoreItemBatchStock>();
		List<StoreItemBatchStock> listOfItemsStockInStock = new ArrayList<StoreItemBatchStock>();
		List<MasEmployee> empList = new ArrayList<MasEmployee>();
		Map mapItem=new HashMap();
		Session session = (Session) getSession();
		int deptId = (Integer) map.get("deptId");
		int hospitalId=(Integer)map.get("hospitalId");
		Calendar expiryDate = Calendar.getInstance();
		expiryDate.add(Calendar.DAY_OF_MONTH, Integer.parseInt(HMSUtil.getProperties("adt.properties", "prescriptionExpiry")));
		String expiryStr = HMSUtil.convertDateToStringFormat(expiryDate.getTime(), "yyyy-MM-dd");
		List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();
		String hinNo = "";
		String opdIssuenoIncremented = "";
		int prescriptionId = 0;
		if(map.get("prescriptionId") != null){
			prescriptionId = (Integer)map.get("prescriptionId");
		}
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (map.get("hinNo") == null
					&& Integer.parseInt(map.get("hinId").toString()) != 0) {
				int hinId = (Integer) map.get("hinId");
				hinNoList = session.createQuery(
						"select p from Patient as p where p.Id=" + hinId)
						.list();
				Patient patient = (Patient) hinNoList.get(0);
				hinNo = patient.getHinNo();
			} else {
				hinNo = (String) map.get("hinNo");
			}


			listOfItemsInStock = session.createQuery("select sib.Item.Id,sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="+deptId+" and sib.Hospital.Id="+hospitalId+"  group by sib.Item.Id ").list();



			opdIssueNo = session.createQuery(
					"select syd from StoreFyDocumentNo as syd where syd.Department.Id="+deptId+" and syd.Hospital.Id="+hospitalId).list();
			// issueNoList = session.createQuery("select sim from StoreIpIssueM
			// as sim where sim.Department.Id="+deptId+"and
			// sim.IssueType='w'").list();
			empList = session
			.createQuery("select emp from MasEmployee  as emp where emp.EmpCategory.Id=" + 1)
			.list();
			Iterator iterator = listOfItemsInStock.iterator();
			if (map.get("buttonFlag") != null) {
				String issueNo = (String) map.get("issueNo");
				opdIssuenoIncremented = issueNo;
				// opdIssueNo = session.createQuery("select syd from
				// StoreFyDocumentNo as syd where
				// syd.OpdIssueNo="+opdIssuenoIncremented).list();
				// opdIssueNo=
				// session.createCriteria(StoreFyDocumentNo.class).add(Restrictions.eq("OpdIssueNo",
				// opdIssuenoIncremented)).list();
			} else {
				// opdIssueNo = session.createQuery("select syd from
				// StoreFyDocumentNo as syd where
				// syd.Department.Id="+deptId).list();
				String opdIssueNoFromDB = "";
				if(opdIssueNo.size() > 0){
					StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) opdIssueNo.get(0);
					opdIssueNoFromDB = storeFyDocumentNo.getOpdIssueNo();
				}
				opdIssuenoIncremented = getMaxNo(opdIssueNoFromDB);
			}

			List<PatientPrescriptionDetails>  presList = new ArrayList<PatientPrescriptionDetails>();
			List<Object[]> stockInHandList = new ArrayList<Object[]>();
			if(prescriptionId != 0){
				String status ="c";
				presList = session.createCriteria(PatientPrescriptionDetails.class).createAlias("Prescription", "presc")
				.add(Restrictions.eq("presc.Id", prescriptionId))
				.createAlias("presc.Hospital","hospital").add(Restrictions.eq("hospital.Id", hospitalId))
				.add(Restrictions.ne("Total",0))
				.list();


				if (presList != null && presList.size() > 0) {
					map.put("presList", presList);
					for (PatientPrescriptionDetails patientPrescriptionDetails : presList) {
						List<Object[]> batchStockList = new ArrayList<Object[]>();
						batchStockList = session.createCriteria(StoreItemBatchStock.class).createAlias("Item", "item")
						.createAlias("Department", "dept").add(Restrictions.eq("dept.Id", deptId))
						.createAlias("Hospital","hospital").add(Restrictions.eq("hospital.Id", hospitalId))
						.add(Restrictions.eq("item.Id", patientPrescriptionDetails.getItem().getId()))
						.add(Restrictions.isNotNull("ExpiryDate"))
						.setProjection(Projections.projectionList().add(Projections.property("item.Id")).add(Projections.groupProperty("item.Id"))
								.add(Projections.sum("ClosingStock"))).list();
						if(batchStockList.size()>0)
							stockInHandList.add(batchStockList.get(0));
						List BatchList=new ArrayList();
						String query="select sibs.BATCH_NO from store_item_batch_stock sibs where sibs.Expiry_Date>'"+expiryStr+"' and sibs.ITEM_ID="+patientPrescriptionDetails.getItem().getId()+"and sibs.CLOSING_STOCK>0 and sibs.DEPARTMENT_ID="+deptId+" and sibs.HOSPITAL_ID="+hospitalId+" group by sibs.BATCH_NO,sibs.Expiry_Date order by sibs.Expiry_Date asc ";

						BatchList=session.createSQLQuery(query).list();
						mapItem.put(patientPrescriptionDetails.getItem().getId(),BatchList);
					}
					map.put("stockInHandList", stockInHandList);
				}
				List<StoreOpPatientIssueM> issueList = new ArrayList<StoreOpPatientIssueM>();
				issueList = session.createCriteria(StoreOpPatientIssueM.class).createAlias("PatientPrescriptionHeader", "pph")
				.add(Restrictions.eq("pph.Id", prescriptionId)).list();
				map.put("issueList", issueList);
			}
			listOfItemsStock = session
			.createQuery(
					"select sib.Item.Id,sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="
					+ deptId + "and sib.Hospital.Id="+hospitalId+" and sib.ExpiryDate>'"+expiryStr+"' group by sib.Item.Id ").list();

			listOfItemsStockInStock=session.createQuery(
					"select sib.Item.Id,sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="
					+ "24" + "and sib.Hospital.Id="+hospitalId+" and sib.ExpiryDate>'"+expiryStr+"' group by sib.Item.Id ").list();

			
			frequencyList = session.createCriteria(MasFrequency.class).add(Restrictions.eq("Status","y" )).list();
			
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("opdIssueNo", opdIssueNo);
		map.put("listOfItemsStock", listOfItemsStock);
		map.put("listOfItemsStockInStock",listOfItemsStockInStock);
		map.put("empList", empList);
		map.put("hinNo", hinNo);
		map.put("opdIssuenoIncremented", opdIssuenoIncremented);
		map.put("mapItem",mapItem);
		map.put("frequencyList",frequencyList);
		return map;
	}

	public Map<String, Object> showOPDPatientIssueGridByHin(Map map)
	{

		List listOfItemsInStock = new ArrayList(); 
		List opdIssueNo = new ArrayList();
		List itemList = new ArrayList();
		List hinNoList = new ArrayList();
		List issueNoList = new ArrayList();
		List<StoreItemBatchStock> listOfItemsStock = new ArrayList<StoreItemBatchStock>();
		List<StoreItemBatchStock> listOfItemsStockInStock = new ArrayList<StoreItemBatchStock>();
		List<MasEmployee> empList = new ArrayList<MasEmployee>();
		Map mapItem=new HashMap();
		Session session = (Session) getSession();
		int deptId = (Integer) map.get("deptId");
		int hospitalId=(Integer)map.get("hospitalId");
		int duration = Integer.parseInt(HMSUtil.getProperties("adt.properties", "prescriptionDurationForDispensary"));
		Calendar cal = GregorianCalendar.getInstance();
		cal.add( Calendar.DAY_OF_YEAR, -duration);
		Date minimumDate = cal.getTime();
		
		System.out.println("minimumDate="+minimumDate);
		/*Calendar expiryDate = Calendar.getInstance();*/
		/*expiryDate.add(Calendar.DAY_OF_MONTH, Integer.parseInt(HMSUtil.getProperties("adt.properties", "prescriptionExpiry")));*/
		
		Date expiryDate = HMSUtil.getExpiryDateYYYYMMDD();	
		String expiryStr = HMSUtil.convertDateToStringFormat(expiryDate, "yyyy-MM-dd");
		System.out.println("expiryStr"+expiryStr);
		/*String expiryStr = HMSUtil.convertDateToStringFormat(expiryDate.getTime(), "yyyy-MM-dd");*/
		List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();
		String hinNo = "";
		String opdIssuenoIncremented = "";
		int prescriptionId = 0;
		int hinId = 0;
		if(map.get("prescriptionId") != null){
			prescriptionId = (Integer)map.get("prescriptionId");
		}
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (map.get("hinNo") == null
					&& Integer.parseInt(map.get("hinId").toString()) != 0) {
				 hinId = (Integer) map.get("hinId");
				hinNoList = session.createQuery(
						"select p from Patient as p where p.Id=" + hinId)
						.list();
				Patient patient = (Patient) hinNoList.get(0);
				hinNo = patient.getHinNo();
			} else {
				hinNo = (String) map.get("hinNo");
			}


			listOfItemsInStock = session.createQuery("select sib.Item.Id,sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="+deptId+" and sib.Hospital.Id="+hospitalId+"  group by sib.Item.Id ").list();



			opdIssueNo = session.createQuery(
					"select syd from StoreFyDocumentNo as syd where syd.Department.Id="+deptId+" and syd.Hospital.Id="+hospitalId).list();
			// issueNoList = session.createQuery("select sim from StoreIpIssueM
			// as sim where sim.Department.Id="+deptId+"and
			// sim.IssueType='w'").list();
			/*empList = session
			.createQuery("select emp from MasEmployee  as emp where emp.EmpCategory.Id=" + 1)
			.list();*/
			Iterator iterator = listOfItemsInStock.iterator();
			if (map.get("buttonFlag") != null) {
				String issueNo = (String) map.get("issueNo");
				opdIssuenoIncremented = issueNo;
				// opdIssueNo = session.createQuery("select syd from
				// StoreFyDocumentNo as syd where
				// syd.OpdIssueNo="+opdIssuenoIncremented).list();
				// opdIssueNo=
				// session.createCriteria(StoreFyDocumentNo.class).add(Restrictions.eq("OpdIssueNo",
				// opdIssuenoIncremented)).list();
			} else {
				// opdIssueNo = session.createQuery("select syd from
				// StoreFyDocumentNo as syd where
				// syd.Department.Id="+deptId).list();
				String opdIssueNoFromDB = "";
				if(opdIssueNo.size() > 0){
					StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) opdIssueNo.get(0);
					opdIssueNoFromDB = storeFyDocumentNo.getOpdIssueNo();
				}
				opdIssuenoIncremented = getMaxNo(opdIssueNoFromDB);
			}

			List<PatientPrescriptionDetails>  presList = new ArrayList<PatientPrescriptionDetails>();
			List<PatientPrescriptionDetails>  nipList = new ArrayList<PatientPrescriptionDetails>();
			List<PatientPrescriptionDetails>  injList = new ArrayList<PatientPrescriptionDetails>();
			List<Object[]> stockInHandList = new ArrayList<Object[]>();
			System.out.println("hinId"+hinId);
			if(hinId != 0){
				String status ="c";
				presList = session.createCriteria(PatientPrescriptionDetails.class).createAlias("Prescription", "presc")
						.createAlias("Item", "item")
						.add(Restrictions.eq("item.IssueFrom","d").ignoreCase())
						.add(Restrictions.eq("item.ItemClassification.Id",1))
				.add(Restrictions.eq("presc.Hin.Id", hinId))
				.add(Restrictions.isNull("presc.Division"))
				.add(Restrictions.ge("presc.PrescriptionDate", minimumDate))
				.add(Restrictions.eq("presc.Status", "P").ignoreCase())
				.add(Restrictions.or(Restrictions.eq("presc.NipStatus", "n").ignoreCase(), Restrictions.eq("presc.NipStatus", "A").ignoreCase()))
				.createAlias("presc.Hospital","hospital")
				.add(Restrictions.eq("hospital.Id", hospitalId))
				.add(Restrictions.ne("Total",0))
				.list();
				
				
				injList = session.createCriteria(PatientPrescriptionDetails.class).createAlias("Prescription", "presc")
						.createAlias("Item", "item")
						.add(Restrictions.eq("item.IssueFrom","i").ignoreCase())
						.add(Restrictions.eq("item.ItemClassification.Id",1))
				.add(Restrictions.eq("presc.Hin.Id", hinId))
				.add(Restrictions.isNull("presc.Division"))
				.add(Restrictions.ge("presc.PrescriptionDate", minimumDate))
				.add(Restrictions.eq("presc.Status", "P").ignoreCase())
				.add(Restrictions.or(Restrictions.eq("presc.NipStatus", "n").ignoreCase(), Restrictions.eq("presc.NipStatus", "A").ignoreCase()))
				.createAlias("presc.Hospital","hospital")
				.add(Restrictions.eq("hospital.Id", hospitalId))
				.add(Restrictions.ne("Total",0))
				.list();
				
				
				nipList = session.createCriteria(PatientPrescriptionDetails.class).createAlias("Prescription", "presc")
						.createAlias("Item", "item")			
						.add(Restrictions.or(Restrictions.isNull("item.IssueFrom"), Restrictions.eq("item.IssueFrom","d").ignoreCase()))
						.add(Restrictions.eq("item.ItemClassification.Id",2))
						.add(Restrictions.eq("presc.Hin.Id", hinId))
						.add(Restrictions.isNull("presc.Division"))
						.add(Restrictions.ge("presc.PrescriptionDate", minimumDate))
						.add(Restrictions.eq("presc.Status", "P").ignoreCase())
						.add(Restrictions.eq("presc.NipStatus", "A").ignoreCase())
						.createAlias("presc.Hospital","hospital")
						.add(Restrictions.eq("hospital.Id", hospitalId))
						.add(Restrictions.ne("Total",0))
						.list();

                 System.out.println("presList"+presList.size());
                 System.out.println("nipList"+nipList.size());
                 map.put("nipList", nipList);
				if (presList != null && presList.size() > 0) {
					map.put("presList", presList);
					
					for (PatientPrescriptionDetails patientPrescriptionDetails : presList) {
						List<Object[]> batchStockList = new ArrayList<Object[]>();
						batchStockList = session.createCriteria(StoreItemBatchStock.class).createAlias("Item", "item")
						.createAlias("Department", "dept").add(Restrictions.eq("dept.Id", deptId))
						.createAlias("Hospital","hospital").add(Restrictions.eq("hospital.Id", hospitalId))
						.add(Restrictions.eq("item.Id", patientPrescriptionDetails.getItem().getId()))
						.add(Restrictions.isNotNull("ExpiryDate"))
						.setProjection(Projections.projectionList().add(Projections.property("item.Id")).add(Projections.groupProperty("item.Id"))
								.add(Projections.sum("ClosingStock"))).list();
						if(batchStockList.size()>0)
							stockInHandList.add(batchStockList.get(0));
						List BatchList=new ArrayList();
						/*String query="select sibs.BATCH_NO from store_item_batch_stock sibs where sibs.Expiry_Date>'"+expiryStr+"' and sibs.ITEM_ID="+patientPrescriptionDetails.getItem().getId()+"and sibs.CLOSING_STOCK>0 and sibs.DEPARTMENT_ID="+deptId+" and sibs.HOSPITAL_ID="+hospitalId+" group by sibs.BATCH_NO,sibs.Expiry_Date order by sibs.Expiry_Date asc ";*/
						String query="select sibs.stock_id,sibs.BATCH_NO from store_item_batch_stock sibs where sibs.Expiry_Date>'"+expiryStr+"' and sibs.ITEM_ID="+patientPrescriptionDetails.getItem().getId()+" and sibs.CLOSING_STOCK>0 and sibs.DEPARTMENT_ID="+deptId+" and sibs.HOSPITAL_ID = "+hospitalId+" order by sibs.EXPIRY_DATE asc";
						BatchList=session.createSQLQuery(query).list();
						mapItem.put(patientPrescriptionDetails.getItem().getId(),BatchList);
					}
					map.put("stockInHandList", stockInHandList);
				}
				List<StoreOpPatientIssueM> issueList = new ArrayList<StoreOpPatientIssueM>();
				issueList = session.createCriteria(StoreOpPatientIssueM.class).createAlias("PatientPrescriptionHeader", "pph")
						.add(Restrictions.ge("pph.PrescriptionDate", minimumDate))
						.add(Restrictions.eq("pph.Hin.Id", hinId)).list();
				map.put("issueList", issueList);
			}
			listOfItemsStock = session
			.createQuery(
					"select sib.Item.Id,sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="
					+ deptId + "and sib.Hospital.Id="+hospitalId+" and sib.ExpiryDate>'"+expiryStr+"' group by sib.Item.Id").list();

			listOfItemsStockInStock=session.createQuery(
					"select sib.Item.Id,sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="
					+ "24" + "and sib.Hospital.Id="+hospitalId+" and sib.ExpiryDate>'"+expiryStr+"' group by sib.Item.Id").list();

			
			frequencyList = session.createCriteria(MasFrequency.class).add(Restrictions.eq("Status","y" )).list();
			map.put("injList", injList);
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("opdIssueNo", opdIssueNo);		
		map.put("listOfItemsStock", listOfItemsStock);
		map.put("listOfItemsStockInStock",listOfItemsStockInStock);
		map.put("empList", empList);
		map.put("hinNo", hinNo);
		map.put("opdIssuenoIncremented", opdIssuenoIncremented);
		map.put("mapItem",mapItem);
		map.put("frequencyList",frequencyList);
		return map;
	}

	public Map<String, Object> showOPDPatientNIPApprovalGrid(Map map)
	{

		List listOfItemsInStock = new ArrayList();
		List opdIssueNo = new ArrayList();
		List itemList = new ArrayList();
		List hinNoList = new ArrayList();
		List issueNoList = new ArrayList();
		List<StoreItemBatchStock> listOfItemsStock = new ArrayList<StoreItemBatchStock>();
		List<StoreItemBatchStock> listOfItemsStockInStock = new ArrayList<StoreItemBatchStock>();
		List<MasEmployee> empList = new ArrayList<MasEmployee>();
		Map mapItem=new HashMap();
		Session session = (Session) getSession();
		int deptId = (Integer) map.get("deptId");
		int hospitalId=(Integer)map.get("hospitalId");
		/*Calendar expiryDate = Calendar.getInstance();*/
		/*expiryDate.add(Calendar.DAY_OF_MONTH, Integer.parseInt(HMSUtil.getProperties("adt.properties", "prescriptionExpiry")));*/
		
		Date expiryDate = HMSUtil.getExpiryDateYYYYMMDD();	
		String expiryStr = HMSUtil.convertDateToStringFormat(expiryDate, "yyyy-MM-dd");
		System.out.println("expiryStr"+expiryStr);
		/*String expiryStr = HMSUtil.convertDateToStringFormat(expiryDate.getTime(), "yyyy-MM-dd");*/
		List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();
		String hinNo = "";
		String opdIssuenoIncremented = "";
		int prescriptionId = 0;
		int hinId = 0;
		if(map.get("prescriptionId") != null){
			prescriptionId = (Integer)map.get("prescriptionId");
		}
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			

int duration = Integer.parseInt(HMSUtil.getProperties("adt.properties", "prescriptionDurationForNIP"));
		Calendar cal = GregorianCalendar.getInstance();
		cal.add( Calendar.DAY_OF_YEAR, -duration);
		Date minimumDate = cal.getTime();
			
			if (map.get("hinNo") == null
					&& Integer.parseInt(map.get("hinId").toString()) != 0) {
				 hinId = (Integer) map.get("hinId");
				hinNoList = session.createQuery(
						"select p from Patient as p where p.Id=" + hinId)
						.list();
				Patient patient = (Patient) hinNoList.get(0);
				hinNo = patient.getHinNo();
			} else {
				hinNo = (String) map.get("hinNo");
			}


			listOfItemsInStock = session.createQuery("select sib.Item.Id,sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="+deptId+" and sib.Hospital.Id="+hospitalId+"  group by sib.Item.Id ").list();



			opdIssueNo = session.createQuery(
					"select syd from StoreFyDocumentNo as syd where syd.Department.Id="+deptId+" and syd.Hospital.Id="+hospitalId).list();
			
			/*empList = session
			.createQuery("select emp from MasEmployee  as emp where emp.EmpCategory.Id=" + 1)
			.list();*/
			Iterator iterator = listOfItemsInStock.iterator();
			if (map.get("buttonFlag") != null) {
				String issueNo = (String) map.get("issueNo");
				opdIssuenoIncremented = issueNo;				
			} else {				
				String opdIssueNoFromDB = "";
				if(opdIssueNo.size() > 0){
					StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) opdIssueNo.get(0);
					opdIssueNoFromDB = storeFyDocumentNo.getOpdIssueNo();
				}
				opdIssuenoIncremented = getMaxNo(opdIssueNoFromDB);
			}

			List<PatientPrescriptionDetails>  presList = new ArrayList<PatientPrescriptionDetails>();
			List<PatientPrescriptionDetails>  nipList = new ArrayList<PatientPrescriptionDetails>();
			List<Object[]> stockInHandList = new ArrayList<Object[]>();
			System.out.println("hinId"+hinId);
			if(hinId != 0){
				String status ="c";
				presList = session.createCriteria(PatientPrescriptionDetails.class).createAlias("Prescription", "presc")
						.createAlias("Item", "item")						
						.add(Restrictions.eq("item.ItemClassification.Id",1))
				.add(Restrictions.eq("presc.Hin.Id", hinId))
				.add(Restrictions.ge("presc.PrescriptionDate", minimumDate))
				.add(Restrictions.eq("presc.Status", "P").ignoreCase())
				.add(Restrictions.or(Restrictions.eq("presc.NipStatus", "n").ignoreCase(), Restrictions.eq("presc.NipStatus", "y").ignoreCase()))
				.createAlias("presc.Hospital","hospital")
				.add(Restrictions.eq("hospital.Id", hospitalId))
				.add(Restrictions.ne("Total",0))
				.list();
				
				nipList = session.createCriteria(PatientPrescriptionDetails.class).createAlias("Prescription", "presc")
						.createAlias("Item", "item")						
						.add(Restrictions.eq("item.ItemClassification.Id",2))
						.add(Restrictions.eq("presc.Hin.Id", hinId))
						.add(Restrictions.ge("presc.PrescriptionDate", minimumDate))
						.add(Restrictions.eq("presc.Status", "P").ignoreCase())
						.add(Restrictions.eq("presc.NipStatus", "y").ignoreCase())
						.createAlias("presc.Hospital","hospital")
						.add(Restrictions.eq("hospital.Id", hospitalId))
						.add(Restrictions.ne("Total",0))
						.list();

                 System.out.println("presList"+presList.size());
                 System.out.println("nipList"+nipList.size());
                 map.put("nipList", nipList);
				if (presList != null && presList.size() > 0) {
					map.put("presList", presList);
					
					for (PatientPrescriptionDetails patientPrescriptionDetails : presList) {
						List<Object[]> batchStockList = new ArrayList<Object[]>();
						batchStockList = session.createCriteria(StoreItemBatchStock.class).createAlias("Item", "item")
						.createAlias("Department", "dept").add(Restrictions.eq("dept.Id", deptId))
						.createAlias("Hospital","hospital").add(Restrictions.eq("hospital.Id", hospitalId))
						.add(Restrictions.eq("item.Id", patientPrescriptionDetails.getItem().getId()))
						.add(Restrictions.isNotNull("ExpiryDate"))
						.setProjection(Projections.projectionList().add(Projections.property("item.Id")).add(Projections.groupProperty("item.Id"))
								.add(Projections.sum("ClosingStock"))).list();
						if(batchStockList.size()>0)
							stockInHandList.add(batchStockList.get(0));
						List BatchList=new ArrayList();
						String query="select sibs.BATCH_NO from store_item_batch_stock sibs where sibs.Expiry_Date>'"+expiryStr+"' and sibs.ITEM_ID="+patientPrescriptionDetails.getItem().getId()+"and sibs.CLOSING_STOCK>0 and sibs.DEPARTMENT_ID="+deptId+" and sibs.HOSPITAL_ID="+hospitalId+" group by sibs.BATCH_NO,sibs.Expiry_Date order by sibs.Expiry_Date asc ";

						BatchList=session.createSQLQuery(query).list();
						mapItem.put(patientPrescriptionDetails.getItem().getId(),BatchList);
					}
					map.put("stockInHandList", stockInHandList);
				}
				List<StoreOpPatientIssueM> issueList = new ArrayList<StoreOpPatientIssueM>();
				issueList = session.createCriteria(StoreOpPatientIssueM.class).createAlias("PatientPrescriptionHeader", "pph")
						.add(Restrictions.eq("pph.Hin.Id", hinId)).list();
				map.put("issueList", issueList);
			}
			listOfItemsStock = session
			.createQuery(
					"select sib.Item.Id,sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="
					+ deptId + "and sib.Hospital.Id="+hospitalId+" and sib.ExpiryDate>'"+expiryStr+"' group by sib.Item.Id ").list();

			listOfItemsStockInStock=session.createQuery(
					"select sib.Item.Id,sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="
					+ "24" + "and sib.Hospital.Id="+hospitalId+" and sib.ExpiryDate>'"+expiryStr+"' group by sib.Item.Id ").list();

			
			frequencyList = session.createCriteria(MasFrequency.class).add(Restrictions.eq("Status","y" )).list();
			
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("opdIssueNo", opdIssueNo);
		map.put("listOfItemsStock", listOfItemsStock);
		map.put("listOfItemsStockInStock",listOfItemsStockInStock);
		map.put("empList", empList);
		map.put("hinNo", hinNo);
		map.put("opdIssuenoIncremented", opdIssuenoIncremented);
		map.put("mapItem",mapItem);
		map.put("frequencyList",frequencyList);
		return map;
	}



	public Map<String, Object> showOPDStockDetailsJsp(Map map)
	{
		List<StoreItemBatchStock> listOfItemsInStock = new ArrayList<StoreItemBatchStock>();
		Session session = (Session) getSession();
		int deptId = (Integer) map.get("deptId");
		int itemId = (Integer) map.get("itemId");
		String loanout=(String)map.get("loanOut");
		if(loanout.equals("y")){

			deptId=24;
		}
		Date currentDate= new Date();
		SimpleDateFormat format = new SimpleDateFormat("dd-MMM-yyyy");
		String expiryDateCompare = format.format(currentDate);
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			/*listOfItemsInStock = session
					.createQuery(
							"select sib,  sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="
									+ deptId
									+ " and sib.Item.Id="
									+ itemId
									+ " and sib.ExpiryDate != 'null' group by sib.BatchNo, sib.CostPrice , sib.Brand.Id")
					.list(); */
			listOfItemsInStock = session.createQuery("select sib.Item.PvmsNo,sib.Item.Id,sib.Id,sib.Item.Nomenclature,sib.ExpiryDate,sib.Brand.Id,sib.Brand.BrandName,sib.BatchNo,sib.CostPrice,sib.Item.ItemConversion.ItemUnitName, sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="
					+ deptId
					+ " and sib.Item.Id="
					+ itemId+" and sib.ExpiryDate > '"+expiryDateCompare
					+ "'group by sib.BatchNo,sib.CostPrice,sib.Brand.Id,sib.Item.PvmsNo,sib.Item.Id,sib.Id,sib.Item.Nomenclature,sib.ExpiryDate,sib.Brand.BrandName,sib.Item.ItemConversion.ItemUnitName").list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("listOfItemsInStock", listOfItemsInStock);

		return map;
	}


	public boolean deleteStockDetails(Map map) {

		BigDecimal totalQtyIssued;
		boolean sucessfullyDeleted = false;
		Session session = (Session) getSession();
		// int brandId=(Integer)map.get("brandId");
		int opdIssueTId = (Integer) map.get("opdIssueTId");

		// String batchNo=(String)map.get("batchNo");
		// BigDecimal costPrice= new BigDecimal(""+map.get("costPrice"));
		// BigDecimal qtyIssued= new BigDecimal(""+map.get("qtyIssued"));
		// int qtyIssued=(Integer)map.get("qtyIssued");

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			StoreOpPatientIssueT storeOpPatientIssueT = (StoreOpPatientIssueT) hbt
			.load(StoreOpPatientIssueT.class, opdIssueTId);
			int brandId = storeOpPatientIssueT.getBrand().getId();
			String batchNo = storeOpPatientIssueT.getBatchNo();
			BigDecimal costPrice = storeOpPatientIssueT.getRate();
			BigDecimal qtyIssued = storeOpPatientIssueT.getQtyIssued();

			String hql = "delete from StoreOpPatientIssueT as sit where sit.Id like :opdIssueTId";
			Query query = session.createQuery(hql).setParameter("opdIssueTId",
					opdIssueTId);
			int row = query.executeUpdate();

			List storeItemBatchStockList = session.createQuery(
					"select sib  from StoreItemBatchStock as sib where sib.BatchNo= '"
					+ batchNo + "' and sib.Brand.Id = " + brandId
					+ " and sib.CostPrice = " + costPrice).list();
			StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock) storeItemBatchStockList
			.get(0);
			BigDecimal qtyIssuedFromDB = (BigDecimal) storeItemBatchStock
			.getIssueQty();
			if (qtyIssued != null) {
				totalQtyIssued = qtyIssuedFromDB.subtract(qtyIssued);
			} else {
				totalQtyIssued = qtyIssuedFromDB;
			}
			BigDecimal closingStock = (BigDecimal) storeItemBatchStock
			.getClosingStock();
			closingStock = closingStock.add(qtyIssued);

			storeItemBatchStock.setIssueQty(totalQtyIssued);
			storeItemBatchStock.setClosingStock(closingStock);
			hbt.update(storeItemBatchStock);

			sucessfullyDeleted = true;
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		return sucessfullyDeleted;
	}

	public Map<String, Object> showStockDetailsForLotNo(Map map) {

		Session session = (Session) getSession();
		List listOfItemsInStock = new ArrayList();
		String lotNo = (String) map.get("lotNo");
		int deptId = (Integer) map.get("deptId");
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			listOfItemsInStock = session
			.createQuery(
					"select sib from StoreItemBatchStock as sib where sib.LotNo="
					+ lotNo
					+ "and sib.ExpiryDate != 'null' and sib.Department.Id="
					+ deptId).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("listOfItemsInStock", listOfItemsInStock);
		return map;
	}


	public Map<String, Object> showModifyOPDPatientIssueJsp(Map map) {
		Session session = (Session) getSession();
		String search = (String) map.get("search");
		int deptId = Integer.parseInt(""+map.get("deptId"));

		String issueType = "I";
		List<StoreOpPatientIssueM> storeOPDPatientMList = new ArrayList<StoreOpPatientIssueM>();

		Criteria c = session.createCriteria(
				StoreOpPatientIssueM.class);
		if(search.equals("y")){
			int opdIssueno = Integer.parseInt(""+map.get("OPDIssueNo"));
			c = c.add(Restrictions.eq("Id", opdIssueno));
		} else {
			String opdIssueno = (String)map.get("OPDIssueNo");
			c = c.add(Restrictions.eq("IssueNo", opdIssueno));
		}
		c= c.add(Restrictions.eq("IssueType", issueType))
		.add(Restrictions.eq("Department.Id", deptId))
		.add(Restrictions.eq("TypeOfIssue","P"));

		storeOPDPatientMList = c.list();
		if (storeOPDPatientMList.size() > 0) {
			StoreOpPatientIssueM storOpPatientIssueM = (StoreOpPatientIssueM) storeOPDPatientMList
			.get(0);
			int storeOPDIssueMId = storOpPatientIssueM.getId();
			List storeOPDIssueTList = session.createQuery(
					"select sot from StoreOpPatientIssueT as sot where sot.OpIssue.Id="
					+ storeOPDIssueMId).list();
			map.put("storeOPDIssueTList", storeOPDIssueTList);
		}
		return map;
	}



	public Map<String, Object> getItemListForOPD(Map map) {
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreItem> itemList1 = new ArrayList<MasStoreItem>();
		Session session = (Session) getSession();
		int deptId = 0;
		int hospitalId=0;
		deptId = Integer.parseInt("" + map.get("deptId"));
		hospitalId = Integer.parseInt("" + map.get("hospitalId"));

		try {
			String str = "" + map.get("autoHint") + "%";



			// comment by javed khan for SQL Injuction on 15-08-2012

			/*String query = "SELECT DISTINCT (sib.Nomenclature),sib.Id from  MasStoreItem as sib where "
				+ " sib.Hospital.Id="+hospitalId+" and sib.ItemType.Id='2' and upper(sib.Nomenclature) like upper('"
				+ str
				+ "')";


			String query1 = "SELECT DISTINCT (sib.Nomenclature),sib.Id from  MasStoreItem as sib where "
				+ "sib.ItemType.Id='1' and upper(sib.Nomenclature) like upper('"
				+ str
				+ "')";


			Query q = session.createQuery(query);
			Query q1 = session.createQuery(query1);

			itemList = q.list();
			itemList1=q1.list();
			itemList.addAll(itemList1); */

			// comment by javed khan for SQL Injuction on 15-08-2012


			// add by javed khan for SQL Injuction on 15-08-2012

			Criteria c= session.createCriteria(MasStoreItem.class)
//					.add(Restrictions.eq("Hospital.Id", hospitalId)).
//			add(Restrictions.eq("ItemType.Id", 2))
			.add(Restrictions.like("Nomenclature",str).ignoreCase())
			.setProjection(Projections.distinct(Projections.projectionList().
					add(Projections.property("Nomenclature")).add(Projections.property("Id"))));

			/*Criteria c1= session.createCriteria(MasStoreItem.class).
			add(Restrictions.eq("ItemType.Id", 1)).add(Restrictions.like("Nomenclature",str).ignoreCase())
			.setProjection(Projections.distinct(Projections.projectionList().
					add(Projections.property("Nomenclature")).add(Projections.property("Id"))));*/

			itemList = c.list();
//			itemList1=c1.list();
			itemList.addAll(itemList1);

			// add by javed khan for SQL Injuction on 15-08-2012


			// Criteria c = session.createCriteria(
			// StoreItemBatchStock.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY)
			// .createAlias("Brand", "brand")
			// .add(Restrictions.like("brand.BrandName",str));
			// .createAlias("Department", "dept")
			// .add(Restrictions.eq("dept.Id", deptId));

			// c.setFirstResult(0);
			// c.setMaxResults(10);
			// itemList = c.list();

			Iterator itr = itemList.iterator();
			while (itr.hasNext()) {
				Object[] pair = (Object[]) itr.next();
				String nomenclature = (String) pair[0];

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;

	}

	public Map<String, Object> fillItemsInGridForOPD(Map map) {

		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Session session = (Session) getSession();
		List<StoreItemBatchStock> listOfItemsStock = new ArrayList<StoreItemBatchStock>();
		List<StoreItemBatchStock> batchNoList = new ArrayList<StoreItemBatchStock>();
		int itemId = (Integer) map.get("itemId");
		int deptId = (Integer) map.get("deptId");
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			itemList = session.createCriteria(MasStoreItem.class).add(
					Restrictions.eq("Id", itemId)).add(
							Restrictions.eq("Status", "y")).list();


			batchNoList = session.createCriteria(StoreItemBatchStock.class).add(
					Restrictions.eq("Item.Id", itemId)).list();

			map.put("itemList", itemList);
			listOfItemsStock = session
			.createQuery(
					"select sib.Item.Id,sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="
					+ deptId + "group by sib.Item.Id ").list();
			map.put("batchNoList", batchNoList);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return map;
	}

	//by ashutosh


	public Map<String, Object> fillItemsInGridForOPDDir(Map map) {
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Session session = (Session) getSession();
		List<StoreItemBatchStock> listOfItemsStock = new ArrayList<StoreItemBatchStock>();
		List<StoreItemBatchStock> listOfItemsStockInStores = new ArrayList<StoreItemBatchStock>();

		List<StoreItemBatchStock> batchNoList = new ArrayList<StoreItemBatchStock>();
		int itemId = (Integer) map.get("itemId");
		int deptId = (Integer) map.get("deptId");
		int hospitalId=(Integer)map.get("hospitalId");
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			itemList = session.createCriteria(MasStoreItem.class).add(
					Restrictions.eq("Id", itemId)).add(
							Restrictions.eq("Status", "y")).list();








			batchNoList = session.createCriteria(StoreItemBatchStock.class).add(
					Restrictions.eq("Item.Id", itemId)).add(Restrictions.eq("Department.Id",deptId)).add(Restrictions.eq("Hospital.Id",hospitalId)).list();
            System.out.println("batchNoList="+batchNoList);
			map.put("itemList", itemList);

			// comment by javed khan for SQL Injuction on 15-08-2012

			/*	listOfItemsStock = session
			.createQuery(
					"select sib.Item.Id,sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="
							+ deptId +"and sib.Hospital.Id="+hospitalId+" group by sib.Item.Id ").list();*/

			// comment by javed khan for SQL Injuction on 15-08-2012


			// add by javed khan for SQL Injuction on 15-08-2012

			listOfItemsStock =session.createCriteria(StoreItemBatchStock.class)
			.add(Restrictions.eq("Department.Id",deptId))
			.add(Restrictions.eq("Hospital.Id", hospitalId))
			.setProjection(Projections.projectionList()
					.add( Projections.property("Item.Id"))
					.add( Projections.sum("ClosingStock"))
					.add( Projections.groupProperty("Item.Id"))).list();

			// add by javed khan for SQL Injuction on 15-08-2012



			int storedeptId=24;

			// comment by javed khan for SQL Injuction on 15-08-2012

			/*listOfItemsStockInStores = session
			.createQuery(
					"select sib.Item.Id,sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="
							+ storedeptId +"and sib.Hospital.Id="+hospitalId +"group by sib.Item.Id ").list();*/

			// comment by javed khan for SQL Injuction on 15-08-2012


			// add by javed khan for SQL Injuction on 15-08-2012

			listOfItemsStockInStores =session.createCriteria(StoreItemBatchStock.class)
			.add(Restrictions.eq("Department.Id",storedeptId))
			.add(Restrictions.eq("Hospital.Id", hospitalId))
			.setProjection(Projections.projectionList()
					.add( Projections.property("Item.Id"))
					.add( Projections.sum("ClosingStock"))
					.add( Projections.groupProperty("Item.Id"))).list();

			// add by javed khan for SQL Injuction on 15-08-2012

			map.put("batchNoList", batchNoList);
			map.put("listOfItemsStock",listOfItemsStock);
			map.put("listOfItemsStockInStores", listOfItemsStockInStores);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return map;
	}


	//end by ashutosh














	public Map<String, Object> fillItemsInGridForLotNo(Map map) {
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Session session = (Session) getSession();
		String lotNo = (String) map.get("lotNo");

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			itemList = session.createCriteria(StoreItemBatchStock.class).add(
					Restrictions.eq("LotNo", lotNo)).list();

			map.put("itemList", itemList);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return map;
	}

	// *********************************************************************************************************************
	// ------------------------------------End of Methods Written By
	// Vikas------------------------------------------
	// ****************************************************************************************************************

	// ********************************Start Of Modules By Deepti
	// Tevatia****************************

	// --------------------------Return from
	// Dispensary------------------------------

	public Map<String, Object> showReturnFromDispensaryJsp(
			Map<String, Object> map){
		List<MasDepartment> deptList = new ArrayList<MasDepartment>();
		List<StoreItemBatchStock> listOfItemsInStock = new ArrayList<StoreItemBatchStock>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<StoreFyDocumentNo> issueReturnNoList = new ArrayList<StoreFyDocumentNo>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<StoreInternalReturnM> returnNoList = new ArrayList<StoreInternalReturnM>();

		Session session = (Session) getSession();
		String returnNo = "";
		String finalReturnNo = "";
		int storeFyDocumentNoId = 0;
		String buttonFlag = "";

		Properties properties = new Properties();
		URL resourcePath = Thread.currentThread().getContextClassLoader()
		.getResource("stores.properties");
		try {
			properties.load(resourcePath.openStream());
		} catch (Exception e) {
			e.printStackTrace();
		}

		if (map.get("buttonFlag") != null) {
			buttonFlag = (String) map.get("buttonFlag");
		}
		int empCategoryIdForReturnFromDispensary = Integer.parseInt(properties
				.getProperty("empCategoryIdForReturnFromDispensary"));
	
		int departmentIdForDrugDisposalCommittee = Integer.parseInt(HMSUtil.getProperties("adt.properties", "departmentIdForDrugDisposalCommittee"));

		int deptId = 0;
		if (map.get("deptId") != null) {
			deptId = (Integer) map.get("deptId");
		}
		int hospitalId = 0;
		if (map.get("hospitalId") != null) {
			hospitalId = (Integer) map.get("hospitalId");
		}

		try {
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			/*deptList = session
			.createQuery(
					"select md from MasDepartment  as md where md.Status = 'y' order by md.DepartmentName asc")
					.list();*/
			deptList = session.createCriteria(MasDepartment.class).add(Restrictions.eq("Status", "y"))
					.add(Restrictions.eq("Id", departmentIdForDrugDisposalCommittee))
					.addOrder(Order.asc("DepartmentName")).list();                                 
			/*	listOfItemsInStock = session
			.createQuery("select sib,sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="
									+ deptId
									+ "group by sib,sib.BatchNo,sib.CostPrice").list(); */

			listOfItemsInStock=session.createCriteria(StoreItemBatchStock.class)
			.createAlias("Department", "dept").add(Restrictions.eq("dept.Id",deptId)).
			add(Restrictions.eq("Hospital.Id",hospitalId)).
			setProjection( Projections.projectionList()
					.add( Projections.groupProperty("BatchNo") )
					.add(Projections.groupProperty("CostPrice"))
					.add( Projections.sum("ClosingStock"))).list();


			/* listOfItemsInStock = session
			.createQuery(
					"select sib,  sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="
							+ deptId
							+ "group by sib.BatchNo,sib.CostPrice ")
			.list();*/
			brandList = session
			.createQuery(
					"select Distinct(sib.Brand.Id),sib.Brand.BrandName from  StoreItemBatchStock as sib where sib.Department.Id="
					+ deptId+" and  sib.Hospital.Id="+ hospitalId).list();


		System.out.println("deptId="+deptId);
			employeeList = session.createCriteria(MasEmployee.class, "emp").add(Restrictions.in("emp.Id", getEmployeeIdDepartmentWise(session, deptId)))
					.add(Restrictions.eq("emp.Status", "y")).addOrder(Order.asc("emp.FirstName")).list();



			returnNoList = session.createQuery(
					"select sim from  StoreInternalReturnM as sim where sim.FromDepartment.Id="
					+ deptId+" and  sim.Hospital.Id="+ hospitalId+" order by Id desc ").list();
			issueReturnNoList = session.createQuery(
					"select syd from StoreFyDocumentNo as syd where syd.Department.Id="
					+ deptId+" and  syd.Hospital.Id="+ hospitalId).list();



			Iterator iterator = listOfItemsInStock.iterator();
			while (iterator.hasNext()) {
				Object[] pair = (Object[]) iterator.next();
				//StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock) pair[0];
				//BigDecimal qtyInHand = (BigDecimal) pair[1];
				//String pvmsNo = storeItemBatchStock.getItem().getPvmsNo();
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		if (!buttonFlag.equals("next")) {
			if (issueReturnNoList != null && issueReturnNoList.size() > 0) {
				StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) issueReturnNoList
				.get(0);
				returnNo =  storeFyDocumentNo.getIssueDeptReturnNo();
				storeFyDocumentNoId = storeFyDocumentNo.getId();
				try {
					finalReturnNo = getMaxNo(returnNo);
				} catch (Exception e) {
					e.printStackTrace();
				}
				map.put("storeFyDocumentNoId", storeFyDocumentNoId);
				map.put("finalReturnNo", finalReturnNo);
			}
		}

		map.put("listOfItemsInStock", listOfItemsInStock);
		map.put("issueReturnNoList", issueReturnNoList);
		map.put("brandList", brandList);
		map.put("returnNoList", returnNoList);
		map.put("deptList", deptList);
		map.put("employeeList", employeeList);

		return map;
	}

	public Map<String, Object> showStockDetailsForReturnDispensary(
			Map<String, Object> map) {
		List<StoreItemBatchStock> listOfItemsInStock = new ArrayList<StoreItemBatchStock>();

		Session session = (Session) getSession();
		int deptId = (Integer) map.get("deptId");
		int brandId = (Integer) map.get("brandId");
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			listOfItemsInStock = session
			.createQuery(
					"select sib.Item.PvmsNo,sib.Item.Id,sib.Id,sib.Item.Nomenclature,sib.ExpiryDate,sib.Brand.Id,sib.Brand.BrandName,sib.BatchNo,sib.CostPrice,sib.Item.ItemConversion.ItemUnitName, sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="
					+ deptId
					+ " and sib.Brand.Id="
					+ brandId
					+ "group by sib.Item.PvmsNo,sib.Item.Id,sib.Id,sib.Item.Nomenclature,sib.ExpiryDate,sib.Brand.Id,sib.Brand.BrandName,sib.BatchNo,sib.CostPrice,sib.Item.ItemConversion.ItemUnitName ")
					.list();
			/*listOfItemsInStock =session.createCriteria(StoreItemBatchStock.class).createAlias("Department", "dept")
			.add(Restrictions.eq("dept.Id",deptId)).createAlias("Brand", "brand")
		    .add(Restrictions.eq("brand.Id",brandId))
           	.setProjection(Projections.projectionList().add(Projections.groupProperty("BatchNo"))
			.add(Projections.groupProperty("CostPrice")).add(Projections.sum("ClosingStock"))).list();
			 */

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("listOfItemsInStock", listOfItemsInStock);

		return map;
	}

	@SuppressWarnings("unchecked")


	
	public Map<String, Object>  submitReturnDispensaryDetails(Map<String, Object> dataMap) {
		Session session = (Session) getSession();
		String succesfullyAdded = "";
		int storeGrnInternalId=0;
		
		Map<String, Object> map = new HashMap<String, Object>();
		String fromDateToDate = null;
		String issueType = "w";

		List<String> itemIdList = (List) dataMap.get("itemIdList");  // javed khan		
		List<String> pvmsList = (List) dataMap.get("pvmsList");
		List<String> nomaenclature=(List)dataMap.get("nomaenclature");		
		List<String> batchNumberList = (List) dataMap.get("batchNumberList");	
		List issQtyList = (List) dataMap.get("issQtyList");
		System.out.println("issQtyList="+issQtyList.size());
		List storeItemBatchStockIdList = (List) dataMap.get("storeItemBatchStockIdList");
		String date = (String) dataMap.get("date");
		int fromDeptId = (Integer) dataMap.get("fromDeptId");
		int toDeptId = (Integer) dataMap.get("toDeptId");
		String returnDate = (String) dataMap.get("returnDate");
		String returnNo = (String) dataMap.get("returnNo");
		String referenceNo = (String) dataMap.get("referenceNo");

		int receivedById = (Integer) dataMap.get("receivedById");
		int returnById = (Integer) dataMap.get("returnById");

		String remarks = (String) dataMap.get("remarks");
		String reason = (String) dataMap.get("reason");

		int hospitalId = (Integer) dataMap.get("hospitalId");
		String time = (String) dataMap.get("time");
		String userName = (String) dataMap.get("userName");
		int storeFyDocumentNoId = (Integer) dataMap.get("storeFyDocumentNoId");
		System.out.println("storeFyDocumentNoId"+storeFyDocumentNoId);
		
		Date dateToInsert = HMSUtil.convertStringTypeDateToDateType(date);
		Date returnDateForAdd = HMSUtil.convertStringTypeDateToDateType(returnDate);

		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) hbt.load(
				StoreFyDocumentNo.class, storeFyDocumentNoId);
		List<StoreInternalReturnM> StoreInternalReturnMTemp = new ArrayList<StoreInternalReturnM>();
		StoreInternalReturnM mObj = null;
		String returnNoFromDB = storeFyDocumentNo.getIssueDeptReturnNo();
		//int i = 0;
		int count;
		Transaction tx = null;
		
		try {
			tx = session.beginTransaction();
			if (!returnNoFromDB.equals(returnNo)) {
				storeFyDocumentNo.setIssueDeptReturnNo(returnNo);
				hbt.update(storeFyDocumentNo);

				mObj = new StoreInternalReturnM();
				mObj.setReturnNo(returnNo);

				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(fromDeptId);
				mObj.setFromDepartment(masDepartment);

				MasDepartment masDepartment1 = new MasDepartment();
				masDepartment1.setId(toDeptId);
				mObj.setToDepartment(masDepartment1);

				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				mObj.setHospital(masHospital);
				mObj.setReturnDate(returnDateForAdd);

				mObj.setReferenceNo(referenceNo);

				/*MasEmployee receivedBy = new MasEmployee();
				receivedBy.setId(receivedById);
				mObj.setReceivedBy(receivedBy);*/

				mObj.setReason(reason);
				mObj.setRemarks(remarks);

				MasEmployee returnBy = new MasEmployee();
				returnBy.setId(returnById);
				mObj.setReturnBy(returnBy);

				mObj.setLastChangedBy(userName);
				mObj.setLastChangedDate(dateToInsert);
				mObj.setLastChangedTime(time);
				mObj.setStatus("y");
				hbt.save(mObj);
				hbt.refresh(mObj);
				storeGrnInternalId= mObj.getId();
			} else {
				// List returnList = session.createQuery("select sir from
				// StoreInternalReturnM as sir where
				// sir.ReturnNo="+returnNo).list();
				List returnList = session
				.createCriteria(StoreInternalReturnM.class).add(
						Restrictions.eq("ReturnNo", returnNo)).add(
								Restrictions.eq("Status", "y")).list();

				mObj = (StoreInternalReturnM) returnList.get(0);
				storeGrnInternalId= mObj.getId();
			}

			Iterator itr = issQtyList.iterator();
			count = 0;
			for (int i = 0; i < issQtyList.size(); i++)
				// while(itr.hasNext())
			{

				BigDecimal totalQtyReturned;
				StoreInternalReturnT tObj = new StoreInternalReturnT();
				tObj.setReturnMain(mObj);
				MasStoreItem masStoreItem = new MasStoreItem();
				//masStoreItem.setId(Integer.parseInt(pvmsList.get(i).toString()));
				masStoreItem.setId(Integer.parseInt(itemIdList.get(i).toString())); // javed
				tObj.setItem(masStoreItem);
				//  javed
				List<StoreItemBatchStock> sibsList=session.createCriteria(StoreItemBatchStock.class).add(
						Restrictions.eq("id", Integer.parseInt(""+ storeItemBatchStockIdList.get(i))))
						.add(Restrictions.eq("Hospital.Id", hospitalId ))
						.add(Restrictions.eq("Department.Id", fromDeptId ))
						.list();
				
				tObj.setBatchNo(sibsList.get(0).getBatchNo()); // javed

				
				String expiryDate = (String) (sibsList.get(0).getExpiryDate()!=null?sibsList.get(0).getExpiryDate().toString():"");
				if(expiryDate !="")
				tObj.setExpiryDate(expiryDate);
				int brandId = (Integer) (sibsList.get(0).getBrand()!=null?sibsList.get(0).getBrand().getId():"0");
				if(brandId !=0)
				{
					MasStoreBrand brandObj = new MasStoreBrand();
					brandObj.setId(brandId);
					tObj.setBrand(brandObj);	
				}
				
				BigDecimal issuedReturnFromJsp=new BigDecimal("0.0");

				if(issQtyList.get(i) != null && !issQtyList.get(i).equals("") ){
					issuedReturnFromJsp = new BigDecimal(""+ issQtyList.get(i));
					tObj.setReturnQty(issuedReturnFromJsp);

				}else{

					tObj.setReturnQty(issuedReturnFromJsp);
				}
				
				double costPrice = (Double) (sibsList.get(0).getCostPrice()!=null?sibsList.get(0).getCostPrice().doubleValue():"0.0");
				System.out.println("costPrice="+costPrice);
				if(costPrice != 0.0)
				{
					tObj.setRate(new BigDecimal(costPrice).setScale(2, BigDecimal.ROUND_HALF_UP));
					tObj.setItemAmount(issuedReturnFromJsp.multiply(new BigDecimal(costPrice)).setScale(2, BigDecimal.ROUND_HALF_UP));
					
				}
				int storeItemBatchStockId = Integer.parseInt(""+ storeItemBatchStockIdList.get(i));	
				StoreItemBatchStock objStock = new StoreItemBatchStock();
				objStock.setId(storeItemBatchStockId);
				if(storeItemBatchStockId !=0)
				{
					tObj.setStock(objStock);
				}
					
				

				 hbt.save(tObj);
				 hbt.refresh(tObj);
				 
				 
                // Code to Update Total Retured Qty and Closing Stock in STore Item Batch Stock
							
				StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock) hbt.load(StoreItemBatchStock.class,storeItemBatchStockId);
				BigDecimal qtyReturned = (BigDecimal) storeItemBatchStock.getIssueReturn();				
				if (qtyReturned != null) {
					totalQtyReturned = qtyReturned.add(issuedReturnFromJsp);
				} else {
					totalQtyReturned = issuedReturnFromJsp;
				}
				BigDecimal closingStock = (BigDecimal) storeItemBatchStock.getClosingStock();
				closingStock = closingStock.subtract(issuedReturnFromJsp);
				
				storeItemBatchStock.setIssueReturn(totalQtyReturned);
				storeItemBatchStock.setClosingStock(closingStock);
				
				hbt.update(storeItemBatchStock);
				hbt.refresh(storeItemBatchStock);



				/*//***** javed for Add return Qty in store
				BigDecimal totalQtyReturnedForStore;
				String qry="select stock_id from  store_item_batch_stock where Item_id='"+Integer.parseInt(itemIdList.get(i).toString())+"' and  batch_no='"
				+sibsList.get(0).getBatchNo()+"'"
				+" and department_id='"
				+toDeptId+"'"
				+" and hospital_id='"
				+hospitalId+"'";

				BigDecimal stockIdForStore1=(BigDecimal)session.createSQLQuery(qry).uniqueResult();

				if(stockIdForStore1 !=null){
					StoreItemBatchStock storeItemBatchStockForStore = (StoreItemBatchStock) hbt.load(StoreItemBatchStock.class,stockIdForStore1.intValue());
					BigDecimal qtyReturnedForStore = (BigDecimal) storeItemBatchStockForStore.getIssueReturn();
					if (qtyReturnedForStore != null) {
						totalQtyReturnedForStore = qtyReturnedForStore.add(issuedReturnFromJsp);
					} else {
						totalQtyReturnedForStore = issuedReturnFromJsp;
					}
					BigDecimal closingStockForStore = (BigDecimal) storeItemBatchStockForStore.getClosingStock();
					closingStockForStore = closingStockForStore.add(issuedReturnFromJsp);
					storeItemBatchStockForStore.setIssueReturn(totalQtyReturnedForStore);
					storeItemBatchStockForStore.setClosingStock(closingStockForStore);

					hbt.save(tObj);

					hbt.update(storeItemBatchStock);
					hbt.update(storeItemBatchStockForStore);
					count++;
				}else{

					StoreItemBatchStock sibs= new StoreItemBatchStock();
					MasStoreItem masStoreItem1 = new MasStoreItem();
					//masStoreItem1.setId(Integer.parseInt("" + box.get("itemId")));

					masStoreItem1.setId(Integer.parseInt(itemIdList.get(i).toString()));
					sibs.setItem(masStoreItem1);

					sibs.setBatchNo("" + sibsList.get(0).getBatchNo());
					MasDepartment masDepartment3 = new MasDepartment();
					masDepartment3.setId(toDeptId);
					sibs.setDepartment(masDepartment3);

					// add javed khan hospitalId
					MasHospital masHospital = new MasHospital();
					masHospital.setId(hospitalId);
					sibs.setHospital(masHospital);

					SimpleDateFormat formatterIn1 = new SimpleDateFormat(
							"dd/MM/yyyy");
					SimpleDateFormat formatterOut1 = new SimpleDateFormat(
					"yyyy-MM-dd");
					try {
						String date4MySQL1 = formatterOut1.format(formatterIn1
								.parse(expiryDateList.get(i).toString()));
						Date expDateT1 = java.sql.Date.valueOf(date4MySQL1);

						sibs.setExpiryDate(expDateT1);
					} catch (Exception e) {
						sibs.setExpiryDate(null);
					}

					sibs.setClosingStock(issuedReturnFromJsp);
					sibs.setIssueReturn(issuedReturnFromJsp);

					MasStoreBrand brand1 = new MasStoreBrand();
				if(! brandIdList.get(i).equals("") && brandIdList.get(i) != null){
					brand1.setId(Integer.parseInt("" + brandIdList.get(i)));
					}else{
					brand1.setId(Integer.parseInt(""));
					}
					sibs.setBarcodeNo(""+sibsList.get(0).getBatchNo());


					hbt.save(sibs);
					hbt.refresh(sibs);


				}*/

			}
			



		// --------------Transaction End----------
		tx.commit();
		succesfullyAdded = "true";

	} catch (Exception e) {
		if (tx != null)
			tx.rollback();
		e.printStackTrace();
	}
	map.put("succesfullyAdded", succesfullyAdded);
	map.put("storeGrnInternalId", storeGrnInternalId);
	return map;
	}


	public Map<String, Object> showDeleteReturnFromDispensary(
			Map<String, Object> map) {
		Session session = (Session) getSession();

		String returnNo = (String) map.get("returnNo");

		List<StoreInternalReturnM> storeReturnMList = session.createQuery(
				"select sim from StoreInternalReturnM as sim where sim.ReturnNo = '"
				+ returnNo + "'").list();
		if (storeReturnMList.size() > 0) {
			StoreInternalReturnM storeInternalReturnM = (StoreInternalReturnM) storeReturnMList
			.get(0);
			int returnId = storeInternalReturnM.getId();
			List<StoreInternalReturnT> storeReturnTList = session.createQuery(
					"select sit from StoreInternalReturnT as sit where sit.ReturnMain.Id="
					+ returnId).list();
			map.put("storeReturnTList", storeReturnTList);

		}

		return map;
	}

	public boolean deleteStockDetailsReturnToDispensary(Map<String, Object> map) {

		BigDecimal totalQtyReturned;
		boolean sucessfullyDeleted = false;
		Session session = (Session) getSession();
		int returnTId = (Integer) map.get("returnTId");
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			StoreInternalReturnT tObj = (StoreInternalReturnT) hbt.load(
					StoreInternalReturnT.class, returnTId);
			int brandId = tObj.getBrand().getId();
			String batchNo = tObj.getBatchNo();
			BigDecimal costPrice = tObj.getRate();
			BigDecimal qtyReturned = tObj.getReturnQty();


			String hql = "delete from StoreInternalReturnT as sit where sit.Id like :returnTId";
			Query query = session.createQuery(hql).setParameter("returnTId",
					returnTId);
			int row = query.executeUpdate();

			List storeItemBatchStockList = session.createQuery(
					"select sib  from StoreItemBatchStock as sib where sib.BatchNo='"
					+ batchNo + "' and sib.Brand.Id=" + brandId
					+ " and sib.CostPrice=" + costPrice).list();
			StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock) storeItemBatchStockList
			.get(0);
			BigDecimal qtyReturnedFromDB = (BigDecimal) storeItemBatchStock
			.getIssueReturn();
			if (qtyReturned != null && qtyReturnedFromDB !=null)
			{
				totalQtyReturned = qtyReturnedFromDB.subtract(qtyReturned);
			} else {
				totalQtyReturned = qtyReturnedFromDB;
			}
			BigDecimal closingStock = (BigDecimal) storeItemBatchStock
			.getClosingStock();
			closingStock = closingStock.add(qtyReturned);

			storeItemBatchStock.setIssueQty(totalQtyReturned);
			storeItemBatchStock.setClosingStock(closingStock);
			hbt.update(storeItemBatchStock);

			sucessfullyDeleted = true;
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return sucessfullyDeleted;
	}

	@SuppressWarnings( { "unchecked", "unused" })
	public Map<String, Object> searchReturnToDispensary(
			Map<String, Object> searchMap) {
		String fromDate = "";
		String toDate = "";
		int returnId = 0;
		int pageNo = 1;
		int firstResult = 0;
		int maxResults = 8;
		int deptId = 0;
		if (searchMap.get("pageNo") != null) {
			pageNo = Integer.parseInt("" + searchMap.get("pageNo"));
		}

		if (searchMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + searchMap.get("deptId"));
		}
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreSupplier> searchSupplierList = new ArrayList<MasStoreSupplier>();
		List<StoreInternalReturnM> searchReturnMList = new ArrayList<StoreInternalReturnM>();
		List<StoreInternalReturnT> searchReturnTList = new ArrayList<StoreInternalReturnT>();
		List<StoreInternalReturnM> returnNoList = new ArrayList<StoreInternalReturnM>();
		Session session = (Session) getSession();

		if (!(searchMap.get("fromDate").equals(""))
				&& (!searchMap.get("toDate").equals(""))) {
			fromDate = (String) searchMap.get("fromDate");
			toDate = (String) searchMap.get("toDate");
			String date4MySQL1;
			String date4MySQL2;
			try {
				SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
				date4MySQL1 = formatterOut.format(formatterIn.parse(fromDate));
				date4MySQL2 = formatterOut.format(formatterIn.parse(toDate));
				java.sql.Date startDate = java.sql.Date.valueOf(date4MySQL1);
				java.sql.Date endDate = java.sql.Date.valueOf(date4MySQL2);

				searchReturnTList = session.createCriteria(
						StoreInternalReturnT.class).add(
								Restrictions.eq("ReturnMain.Id", returnId)).list();
				// searchSupplierList =
				// session.createCriteria(MasStoreSupplier.class).add(Restrictions.eq("Status",
				// "y")).list();
				searchReturnMList = session.createCriteria(
						StoreInternalReturnM.class).add(
								Restrictions.eq("Status", "y")).add(
										Restrictions.between("ReturnDate", startDate, endDate))
										.list();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		if (pageNo != 1) {
			firstResult = firstResult + (pageNo - 1) * 8;
		}
		if ((Integer) searchMap.get("returnId") != 0) {
			returnId = (Integer) searchMap.get("returnId");


			Criteria c = session.createCriteria(StoreInternalReturnT.class)
			.add(Restrictions.eq("ReturnMain.Id", returnId));
			// Criteria c =
			// session.createCriteria(StoreInternalReturnT.class).add(Restrictions.eq("ReturnMain.Id",
			// loanInId));
			c.setFirstResult(firstResult);
			c.setMaxResults(maxResults);
			searchReturnTList = c.list();
			// searchSupplierList =
			// session.createCriteria(MasStoreSupplier.class).add(Restrictions.eq("Status",
			// "y")).list();
			searchReturnMList = session.createCriteria(
					StoreInternalReturnM.class).add(
							Restrictions.eq("Status", "y")).add(
									Restrictions.eq("Id", returnId)).list();

		}
		//returnNoList = session.createQuery("select sim from  StoreInternalReturnM as sim where sim.FromDepartment.Id="+ deptId).list();

		map.put("searchReturnMList", searchReturnMList);
		map.put("returnNoList", returnNoList);
		map.put("searchReturnTList", searchReturnTList);

		return map;
	}

	public Map<String, Object> getItemListForDepartmentReturn(Map<String, Object> dataMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		session = (Session) getSession();
		String pvmsNo = null;
		int deptId = 0;
		int hospitalId = 0;
		// int returnId = 0;
		deptId = Integer.parseInt("" + dataMap.get("deptId"));
		hospitalId = Integer.parseInt("" + dataMap.get("hospitalId")); // add by javed khan
		// returnId = Integer.parseInt("" + dataMap.get("returnId"));
		List objectList = new ArrayList();
		try {
			String str = "" + dataMap.get("autoHint") + "%";

		

			Criteria c= session.createCriteria(StoreItemBatchStock.class)
			.createAlias("Item", "msi")
			.add(Restrictions.eq("Department.Id", deptId))
			.add(Restrictions.eq("Hospital.Id", hospitalId))
			/*.add(Restrictions.lt("ExpiryDate", new Date()))*/
			.add(Restrictions.gt("ClosingStock", new BigDecimal(0)))
			.add(Restrictions.like("msi.Nomenclature",str).ignoreCase())
			.setProjection(Projections.projectionList().add(Projections.property("msi.Nomenclature"))
			.add(Projections.property("msi.PvmsNo")).add( Projections.groupProperty("msi.Nomenclature"))
			.add( Projections.groupProperty("msi.PvmsNo")))
			.setMaxResults(10);
			itemList = c.list();

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;
	}

	// New Grid For MMf Department

	public Map<String, Object> showMmfDepartment(int deptId, int hospitalId){
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		List<StoreMmfDepartmentM> searchStoreMmfDepartmentMList = new ArrayList<StoreMmfDepartmentM>();
		List<StoreFyDocumentNo> mmfNoList = new ArrayList<StoreFyDocumentNo>();
		int storeFyDocumentNoId = 0;
		String mmfNo = "";
		String finalMmfNo = "";
		session = (Session) getSession();

		// add and commentd by javed khan on 08-08-2013 for sql injuction
		/*departmentList = getHibernateTemplate()
		.find(
				"from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y' ");*/
		/*approvedByEmployeeList = getHibernateTemplate().find(
		"from jkt.hms.masters.business.MasEmployee as mi where mi.Status = 'y' order by mi.FirstName");*/

		departmentList =session.createCriteria(MasDepartment.class).
		add(Restrictions.eq("Status", "y")).list();
		approvedByEmployeeList = approvedByEmployeeList = session.createCriteria(MasEmployee.class)
		.add(Restrictions.eq("Status", "y")).addOrder(Order.asc("FirstName")).list();
		
		searchStoreMmfDepartmentMList = session.createCriteria(
				StoreMmfDepartmentM.class).add(
						Restrictions.eq("StoreWardDept.Id", deptId)).
						add(Restrictions.eq("Hospital.Id", hospitalId))
						//.add(Restrictions.eq("MmfStoreType", "e"))
						.list();

		// Earlier MMF No Generation with Financial year 08-09

		/*
		 * mmfNoList = session.createCriteria(StoreFyDocumentNo.class)
		 * .add(Restrictions.eq("Department.Id", deptId)).list();
		 *
		 * if(mmfNoList != null && mmfNoList.size() > 0){ StoreFyDocumentNo
		 * storeFyDocumentNo= (StoreFyDocumentNo)mmfNoList.get(0); mmfNo =
		 * (""+storeFyDocumentNo.getMmfNo()); storeFyDocumentNoId =
		 * storeFyDocumentNo.getId(); try{ finalMmfNo = getMaxNo(mmfNo);
		 * (Exception e) { e.printStackTrace(); } map.put("mmfNoList",
		 * mmfNoList); map.put("storeFyDocumentNoId", storeFyDocumentNoId);
		 * map.put("finalMmfNo", finalMmfNo); }
		 */

		map.put("departmentList", departmentList);
		map.put("approvedByList", approvedByEmployeeList);
		map.put("searchStoreMmfDepartmentMList", searchStoreMmfDepartmentMList);

		return map;
	}

	public Map<String, Object> createAndImportMmfDepartmentData(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();
		String pvms = null;
		String nomenclature = null;
		String au = null;
		BigDecimal qtymmf = new BigDecimal(0);
		BigDecimal currQtymmf = new BigDecimal(0);
		BigDecimal preQtymmf = new BigDecimal(0);
		String remark = null;
		int id = 0;
		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;

		List<StoreMmfDepartmentT> storeMmfDepartmentTListPreviousYear = new ArrayList<StoreMmfDepartmentT>();
		List<StoreMmfDepartmentT> storeMmfDepartmentTListCurrentYear = new ArrayList<StoreMmfDepartmentT>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		StoreFyDocumentNo storeFyDocumentNo = null;
		List<StoreMmfDepartmentM> storeMmfDepartmentMListPreviousYear = new ArrayList<StoreMmfDepartmentM>();
		List<StoreMmfDepartmentM> storeMmfDepartmentMListCurrentYear = new ArrayList<StoreMmfDepartmentM>();
		List<StoreMmfDepartmentM> searchStoreMmfDepartmentMList = new ArrayList<StoreMmfDepartmentM>();

		int currentYear = box.getInt(MMF_DEPARTMENT_DATE);
		int previousYear = currentYear - 1;
		String mmfNo = "";

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			StoreMmfDepartmentT storeMmfDepartmentT1 = new StoreMmfDepartmentT();

			int sno = 0;
			// String mmfNo = box.get("mmfNo");
			// For Generating & Saving new MMF No for StoreFyDocumentNo Table
			searchStoreMmfDepartmentMList = session
			.createCriteria(StoreMmfDepartmentM.class)
			.add(Restrictions.eq("StoreWardDept.Id",
					box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
					.add(Restrictions.eq("Hospital.Id",box.getInt("hospitalId")))
					//.add(Restrictions.eq("MmfStoreType", box.get("storeType")))
					.list();

			storeMmfDepartmentMListCurrentYear = session
			.createCriteria(StoreMmfDepartmentM.class)
			.add(Restrictions.eq("MmfForTheYear", currentYear))
			.add(Restrictions.eq("StoreWardDept.Id",
					box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
					.add(Restrictions.eq("Hospital.Id",box.getInt("hospitalId")))
					//.add(Restrictions.eq("MmfStoreType", box.get("storeType")))
					.list();

			storeMmfDepartmentMListPreviousYear = session
			.createCriteria(StoreMmfDepartmentM.class)
			.add(Restrictions.eq("MmfForTheYear", previousYear))
			.add(Restrictions.eq("StoreWardDept.Id",
					box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
					.add(Restrictions.eq("Hospital.Id",box.getInt("hospitalId")))
					//.add(Restrictions.eq("MmfStoreType", box.get("storeType")))
					.list();

			storeMmfDepartmentTListPreviousYear = session
			.createCriteria(StoreMmfDepartmentT.class)
			.addOrder(Order.asc("SrNo"))
			.createAlias("StoreMmfDepartmentM", "m")
			.add(Restrictions.eq("m.MmfForTheYear", previousYear))
			.add(Restrictions.eq("m.StoreWardDept.Id",
					box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
					.add(Restrictions.eq("m.Hospital.Id",box.getInt("hospitalId")))
					//.add(Restrictions.eq("m.MmfStoreType", box.get("storeType")))
					.list();

			if (storeMmfDepartmentMListPreviousYear != null
					&& storeMmfDepartmentMListPreviousYear.size() > 0) {

				if (storeMmfDepartmentMListCurrentYear.size() == 0) {

					departmentList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y'");
					approvedByEmployeeList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasEmployee ");
					map.put("departmentList", departmentList);
					map.put("approvedByEmployeeList", approvedByEmployeeList);
					StoreMmfDepartmentM storeMmfDepartmentM = new StoreMmfDepartmentM();

					/*
					 * if (box.getInt(APPROVED_BY_EMPLOYEE_ID_MMF_DEPENDENT) !=
					 * 0) { MasEmployee masEmployee = new MasEmployee();
					 * masEmployee.setId(box
					 * .getInt(APPROVED_BY_EMPLOYEE_ID_MMF_DEPENDENT));
					 * storeMmfDepartmentM.setApprovedBy(masEmployee);
					 *  }
					 */
					mmfNo = "01/" + currentYear;
					List<StoreFyDocumentNo> mmfNoList = session
					.createCriteria(StoreFyDocumentNo.class)
					.add(Restrictions.eq("Department.Id",
							box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
							.add(Restrictions.eq("Hospital.Id",box.getInt("hospitalId")))
							.list();
					if (mmfNoList != null && mmfNoList.size() > 0) {
						storeFyDocumentNo = mmfNoList.get(0);
					}
					storeFyDocumentNo.setMmfNo(mmfNo);
					hbt.update(storeFyDocumentNo);
					hbt.refresh(storeFyDocumentNo);

					storeMmfDepartmentM.setDocNo(mmfNo);
					map.put("docId", mmfNo);
					storeMmfDepartmentM.setLastChgBy(box.get(CHANGED_BY));
					storeMmfDepartmentM.setLastChgDate(HMSUtil
							.convertStringTypeDateToDateType(box
									.getString(CHANGED_DATE)));
					storeMmfDepartmentM.setLastChgTime(box.get(CHANGED_TIME));
					storeMmfDepartmentM.setMmfForTheYear(currentYear);
					storeMmfDepartmentM.setCheckedBy(box.getString(CHECKED_BY));
					storeMmfDepartmentM.setPreparedBy(box
							.getString(PREPARED_BY));
					storeMmfDepartmentM.setMmfStoreType(box.get("storeType"));
					storeMmfDepartmentM.setRemarks(box.get(REMARKS).toString());
					storeMmfDepartmentM.setStatus("o");

					MasDepartment storeWardDept = new MasDepartment();
					storeWardDept.setId(box
							.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT));
					storeMmfDepartmentM.setStoreWardDept(storeWardDept);
					MasHospital masHospital = new MasHospital();
					masHospital.setId(box.getInt("hospitalId"));
					storeMmfDepartmentM.setHospital(masHospital);

					hbt.setFlushModeName("FLUSH_EAGER");
					hbt.setCheckWriteOperations(false);
					hbt.save(storeMmfDepartmentM);

					if (storeMmfDepartmentTListPreviousYear != null
							&& storeMmfDepartmentTListPreviousYear.size() > 0) {
						sno = storeMmfDepartmentTListPreviousYear.get(0)
						.getSrNo().intValue();

						for (Iterator iterator = storeMmfDepartmentTListPreviousYear
								.iterator(); iterator.hasNext();) {
							StoreMmfDepartmentT storeMmfDepartmentTPreviousYear = (StoreMmfDepartmentT) iterator
							.next();
							StoreMmfDepartmentT storeMmfDepartmentTnew = new StoreMmfDepartmentT();
							storeMmfDepartmentTnew
							.setItem(storeMmfDepartmentTPreviousYear
									.getItem());
							storeMmfDepartmentTnew
							.setPreYearMmf(storeMmfDepartmentTPreviousYear
									.getCurrYearMmf());
							storeMmfDepartmentTnew
							.setCurrYearMmf(storeMmfDepartmentTPreviousYear
									.getCurrYearMmf());
							storeMmfDepartmentTnew
							.setMmfInQty(storeMmfDepartmentTPreviousYear
									.getCurrYearMmf());
							storeMmfDepartmentTnew
							.setRemarks(storeMmfDepartmentTPreviousYear
									.getRemarks());
							storeMmfDepartmentTnew
							.setSrNo(storeMmfDepartmentTPreviousYear
									.getSrNo());
							storeMmfDepartmentTnew
							.setStoreMmfDepartmentM(storeMmfDepartmentM);
							hbt.save(storeMmfDepartmentTnew);
						}
					}

					storeMmfDepartmentMListCurrentYear = session
					.createCriteria(StoreMmfDepartmentM.class)
					.add(Restrictions.eq("MmfForTheYear", currentYear))
					.add(Restrictions.eq("StoreWardDept.Id",
							box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
							.add(Restrictions.eq("Hospital.Id",box.getInt("hospitalId")))
							//.add(Restrictions.eq("MmfStoreType", box.get("storeType")))
							.list();

					storeMmfDepartmentTListCurrentYear = session
					.createCriteria(StoreMmfDepartmentT.class)
					.createAlias("StoreMmfDepartmentM", "m")
					.add(Restrictions.eq("m.MmfForTheYear", currentYear))
					.add(Restrictions.eq("m.StoreWardDept.Id",
							box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
							.add(Restrictions.eq("Hospital.Id",box.getInt("hospitalId")))
							//.add(Restrictions.eq("m.MmfStoreType", box.get("storeType")))
							.list();
					if (storeMmfDepartmentTListCurrentYear != null
							&& storeMmfDepartmentTListCurrentYear.size() > 0) {
						int mmfMasterId = storeMmfDepartmentTListCurrentYear
						.get(0).getStoreMmfDepartmentM().getId();
						mmfNo = storeMmfDepartmentTListCurrentYear.get(0)
						.getStoreMmfDepartmentM().getDocNo();
						map.put("mmfMasterId", mmfMasterId);
						map.put("mmfNo", mmfNo);
					}

					for (Iterator iterator = storeMmfDepartmentTListCurrentYear
							.iterator(); iterator.hasNext();) {
						StoreMmfDepartmentT storeMmfDepartmentT = (StoreMmfDepartmentT) iterator.next();
						try {
							id = storeMmfDepartmentT.getId();
						} catch (Exception e) {
							id = 0;
						}
						try {
							pvms = storeMmfDepartmentT.getItem().getPvmsNo();
						} catch (Exception e) {
							pvms = "";
						}
						try {
							nomenclature = storeMmfDepartmentT.getItem()
							.getNomenclature();
						} catch (Exception e) {
							nomenclature = "";
						}
						try {
							au = storeMmfDepartmentT.getItem()
							.getItemConversion().getPurchaseUnit()
							.getUnitName();
						} catch (Exception e) {
							au = "";
						}
						try {
							qtymmf = storeMmfDepartmentT.getMmfInQty();
						} catch (Exception e) {
							qtymmf = new BigDecimal(0);
						}
						try {
							currQtymmf = storeMmfDepartmentT.getCurrYearMmf();
						} catch (Exception e) {
							currQtymmf = new BigDecimal(0);
						}
						try {
							preQtymmf = storeMmfDepartmentT.getPreYearMmf();
						} catch (Exception e) {
							preQtymmf = new BigDecimal(0);
						}
						try {
							qtymmf = storeMmfDepartmentT.getMmfInQty();
						} catch (Exception e) {
							qtymmf = new BigDecimal(0);
						}
						try {
							remark = storeMmfDepartmentT.getRemarks();
						} catch (Exception e) {
							remark = "";
						}

						hData = new HashMap<String, Object>();
						hData.put("id", id);
						hData.put("pvms", pvms);
						hData.put("nomenclature", nomenclature);
						hData.put("au", au);
						hData.put("qtymmf", qtymmf);
						hData.put("currQtymmf", currQtymmf);
						hData.put("preQtymmf", preQtymmf);
						hData.put("remark", remark);

						vResult.add(hData);
					}
					if (vResult.size() > 0) {
						testPageData = new HashMap[vResult.size()];
						vResult.copyInto(testPageData);
					}
					try {
						pagedArray = new PageUtil().convertToPagedArrayIndex(
								testPageData, box);
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		map.put("pagedArray", pagedArray);
		map.put("import", "import");
		map.put("searchStoreMmfDepartmentMList", searchStoreMmfDepartmentMList);
		return map;
	}

	public Map<String, Object> resetMmfDepartmentData(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
		StoreMmfDepartmentT storeMmfDepartmentT = null;
		String docId = "";
		try {
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			Vector srno = box.getVector("srno");
			Vector qtymmf = box.getVector("qtymmf");
			Vector items = box.getVector("id");
			Vector remark = box.getVector("remark");



			String obj = null;
			for (int i = 0; i < srno.size(); i++) {
				int itemId = Integer.parseInt(items.get(i).toString());
				StoreMmfDepartmentT tObj = (StoreMmfDepartmentT) hbt.load(
						StoreMmfDepartmentT.class, itemId);
				// qtymmf.get(i).toString());
				// remark.get(i).toString());
				tObj.setMmfInQty(new BigDecimal(0));
				tObj.setCurrYearMmf(new BigDecimal(0));
				docId = tObj.getStoreMmfDepartmentM().getDocNo();
				tObj.setRemarks("");
				hbt.update(tObj);
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		map = getMmfDepartmentData(box);
		map.put("docId", docId);
		return map;
	}

	public Map<String, Object> getMmfDepartmentData(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();

		String pvms = null;
		String nomenclature = null;
		String au = null;
		BigDecimal qtymmf = new BigDecimal(0);
		BigDecimal preQtymmf = new BigDecimal(0);
		BigDecimal currQtymmf = new BigDecimal(0);

		String remark = null;
		String docId = "";
		int id = 0;
		int hospitalid = 0;

		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;

		List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
		// List<StoreMmfDepartmentT> storeMmfDepartmentTList1 = new
		// ArrayList<StoreMmfDepartmentT>();

		List<StoreMmfDepartmentM> searchStoreMmfDepartmentMList = new ArrayList<StoreMmfDepartmentM>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		hospitalid = Integer.parseInt(""+box.get("hospitalId"));
		if (box.getString("pvmsNo") != null
				&& (!(box.getString("pvmsNo").equals("")))) {

			try {
				org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);

				StoreMmfDepartmentT storeMmfDepartmentT1 = new StoreMmfDepartmentT();
				int currentYear = box.getInt(MMF_DEPARTMENT_DATE);
				departmentList = getHibernateTemplate()
				.find(
						"from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y'");
				approvedByEmployeeList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.MasEmployee ");

				searchStoreMmfDepartmentMList = session
				.createCriteria(StoreMmfDepartmentM.class)
				.add(Restrictions.eq("StoreWardDept.Id",
						box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT))).
						add(Restrictions.eq("Hospital.Id",hospitalid)).list();
				//.add(Restrictions.eq("MmfStoreType", box.get("storeType"))).list();

				map.put("departmentList", departmentList);
				map.put("approvedByEmployeeList", approvedByEmployeeList);
				map.put("searchStoreMmfDepartmentMList",
						searchStoreMmfDepartmentMList);

				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
				/*
				 * storeMmfDepartmentTList = hbt .find("from
				 * jkt.hms.masters.business.StoreMmfDepartmentT as inp where
				 * inp.StoreMmfDepartmentM.MmfForTheYear=" + currentYear + " and
				 * inp.StoreMmfDepartmentM.StoreWardDept.Id=" +
				 * box.get(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT) +" and
				 * inp.StoreMmfDepartmentM.MmfStoreType="+box.get("storeType"));
				 */

				// for searching in gridItems for pvms no and niv
				String str = "%" + box.getString("pvmsNo") + "%";

				storeMmfDepartmentTList = session
				.createCriteria(StoreMmfDepartmentT.class)
				.createAlias("StoreMmfDepartmentM", "m")
				.add(Restrictions.eq("m.MmfForTheYear", currentYear))
				.add(Restrictions.eq("m.StoreWardDept.Id",
						box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
						//.add(Restrictions.eq("m.MmfStoreType", box.get("storeType")))
						.add(Restrictions.eq("m.Hospital.Id", hospitalid))
						.createAlias("Item","s").add(Restrictions.like("s.PvmsNo", str)).list();



				/*
				 * else{
				 * storeMmfDepartmentTList=session.createCriteria(StoreMmfDepartmentT.class).createAlias("StoreMmfDepartmentM",
				 * "m") .add(Restrictions.eq("m.MmfForTheYear", currentYear)).
				 * add(Restrictions.eq("m.StoreWardDept.Id",
				 * box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
				 * .add(Restrictions.eq("m.MmfStoreType",box.get("storeType"))).add(Restrictions.in("Item.PvmsNo",
				 * str)).list(); }
				 */
				int mmfMasterId = 0;
				int approvedId = 0;

				if (storeMmfDepartmentTList != null
						&& storeMmfDepartmentTList.size() > 0) {
					mmfMasterId = storeMmfDepartmentTList.get(0)
					.getStoreMmfDepartmentM().getId();
					docId = storeMmfDepartmentTList.get(0)
					.getStoreMmfDepartmentM().getDocNo();
					map.put("docId", docId);
					if (storeMmfDepartmentTList.get(0).getStoreMmfDepartmentM()
							.getApprovedBy() != null) {
						approvedId = storeMmfDepartmentTList.get(0)
						.getStoreMmfDepartmentM().getApprovedBy()
						.getId();
						map.put("approvedId", approvedId);
					}

					map.put("mmfMasterId", mmfMasterId);
				}
				// changes done on 23-12-2008
				List<StoreMmfDepartmentM> storeMmfDepartmentMListForGettingMasterId = new ArrayList<StoreMmfDepartmentM>();

				storeMmfDepartmentMListForGettingMasterId = session
				.createCriteria(StoreMmfDepartmentM.class)
				.add(Restrictions.eq("MmfForTheYear", currentYear))
				.add(Restrictions.eq("StoreWardDept.Id",box
						.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
						.add(Restrictions.eq("Hospital.Id", hospitalid)).list();
				//.add(Restrictions.eq("MmfStoreType", box.get("storeType"))).list();

				if (storeMmfDepartmentMListForGettingMasterId != null
						&& storeMmfDepartmentMListForGettingMasterId.size() > 0) {
					map.put("mmfMasterId",
							storeMmfDepartmentMListForGettingMasterId.get(0)
							.getId());



					// Data"+storeMmfDepartmentMListForGettingMasterId.get(0).getId());
				}

				for (Iterator iterator = storeMmfDepartmentTList.iterator(); iterator
				.hasNext();) {
					StoreMmfDepartmentT storeMmfDepartmentT = (StoreMmfDepartmentT) iterator
					.next();

					try {
						id = storeMmfDepartmentT.getId();
					} catch (Exception e) {
						id = 0;
					}

					try {
						pvms = storeMmfDepartmentT.getItem().getPvmsNo();
					} catch (Exception e) {
						pvms = "";
					}

					try {
						nomenclature = storeMmfDepartmentT.getItem()
						.getNomenclature();
					} catch (Exception e) {
						nomenclature = "";
					}

					try {
						au = storeMmfDepartmentT.getItem().getItemConversion()
						.getPurchaseUnit().getUnitName();
					} catch (Exception e) {
						au = "";
					}

					try {
						qtymmf = storeMmfDepartmentT.getMmfInQty();
					} catch (Exception e) {
						qtymmf = new BigDecimal(0);
					}
					try {
						if (storeMmfDepartmentT.getPreYearMmf() != null)
							preQtymmf = storeMmfDepartmentT.getPreYearMmf();
						else
							preQtymmf = new BigDecimal(0);
					} catch (Exception e) {
						preQtymmf = new BigDecimal(0);
					}
					try {
						if (storeMmfDepartmentT.getCurrYearMmf() != null)
							currQtymmf = storeMmfDepartmentT.getCurrYearMmf();
						else
							currQtymmf = new BigDecimal(0);
					} catch (Exception e) {
						currQtymmf = new BigDecimal(0);
					}
					try {
						remark = storeMmfDepartmentT.getRemarks();
					} catch (Exception e) {
						remark = "";
					}
					hData = new HashMap<String, Object>();
					// code for checking that approval for particular item is
					// alredy done
					List<StoreMmfDepartmentT> storeMmfDepartmentTList1 = new ArrayList<StoreMmfDepartmentT>();
					/*storeMmfDepartmentTList1 = session.createCriteria(
							StoreMmfDepartmentT.class).createAlias(
							"StoreMmfDepartmentM", "m").add(
							Restrictions.eq("m.MmfStoreType", box
									.get("storeType"))).add(
							Restrictions.eq("m.MmfForTheYear", box
									.getInt(MMF_DEPARTMENT_DATE))).createAlias(
							"Item", "i").add(
							Restrictions.eq("i.Id", storeMmfDepartmentT
									.getItem().getId())).list();*/
					storeMmfDepartmentTList1 = session.createCriteria(
							StoreMmfDepartmentT.class).createAlias(
									"StoreMmfDepartmentM", "m").add(
											Restrictions.eq("m.MmfForTheYear", box.getInt(MMF_DEPARTMENT_DATE)))
											.add(Restrictions.eq("m.Hospital.Id", hospitalid))
											.createAlias("Item", "i").add(Restrictions.eq("i.Id", storeMmfDepartmentT
													.getItem().getId())).list();


					boolean flag = false;
					for (StoreMmfDepartmentT storeMmfDepartmentT2 : storeMmfDepartmentTList1) {
						if (storeMmfDepartmentT2.getApprovedStatus() != null
								&& !storeMmfDepartmentT2.getApprovedStatus()
								.equals("")) {
							if (storeMmfDepartmentT2.getApprovedStatus()
									.equalsIgnoreCase("p")) {
								hData.put("approvedStatus", "p");
								flag = true;
							}

						}
						if (flag == true)
							break;

					}

					hData.put("id", id);
					hData.put("pvms", pvms);
					hData.put("nomenclature", nomenclature);
					hData.put("au", au);
					hData.put("qtymmf", qtymmf);
					hData.put("preQtymmf", preQtymmf);
					hData.put("currQtymmf", currQtymmf);

					hData.put("remark", remark);

					vResult.add(hData);
				}

				if (vResult.size() > 0) {
					testPageData = new HashMap[vResult.size()];
					vResult.copyInto(testPageData);
				}

				try {
					pagedArray = new PageUtil().convertToPagedArrayIndex(
							testPageData, box);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} catch (HibernateException e) {
				e.printStackTrace();
			}
			map.put("pagedArray", pagedArray);
		}

		else {
			try {
				org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);

				StoreMmfDepartmentT storeMmfDepartmentT1 = new StoreMmfDepartmentT();
				int currentYear = box.getInt(MMF_DEPARTMENT_DATE);
				departmentList = getHibernateTemplate()
				.find(
						"from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y'");
				approvedByEmployeeList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.MasEmployee ");

				searchStoreMmfDepartmentMList = session
				.createCriteria(StoreMmfDepartmentM.class)
				.add(Restrictions.eq("StoreWardDept.Id",box
						.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
						.add(Restrictions.eq("Hospital.Id", hospitalid))
						.list();
				//.add(Restrictions.eq("MmfStoreType", box.get("storeType"))).list();
				map.put("departmentList", departmentList);
				map.put("approvedByEmployeeList", approvedByEmployeeList);
				map.put("searchStoreMmfDepartmentMList",
						searchStoreMmfDepartmentMList);

				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
				/*
				 * storeMmfDepartmentTList = hbt .find("from
				 * jkt.hms.masters.business.StoreMmfDepartmentT as inp where
				 * inp.StoreMmfDepartmentM.MmfForTheYear=" + currentYear + " and
				 * inp.StoreMmfDepartmentM.StoreWardDept.Id=" +
				 * box.get(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT) +" and
				 * inp.StoreMmfDepartmentM.MmfStoreType="+box.get("storeType"));
				 */

				// for searching in gridItems for pvms no and niv
				storeMmfDepartmentTList = session
				.createCriteria(StoreMmfDepartmentT.class)
				.createAlias("StoreMmfDepartmentM", "m")
				.add(Restrictions.eq("m.MmfForTheYear", currentYear))
				.add(
						Restrictions
						.eq(
								"m.StoreWardDept.Id",
								box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
								.add(Restrictions.eq("m.Hospital.Id", hospitalid))
								.list();

				//.add(Restrictions.eq("m.MmfStoreType", box.get("storeType"))).list();


				/*
				 * else{
				 * storeMmfDepartmentTList=session.createCriteria(StoreMmfDepartmentT.class).createAlias("StoreMmfDepartmentM",
				 * "m") .add(Restrictions.eq("m.MmfForTheYear", currentYear)).
				 * add(Restrictions.eq("m.StoreWardDept.Id",
				 * box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
				 * .add(Restrictions.eq("m.MmfStoreType",box.get("storeType"))).add(Restrictions.in("Item.PvmsNo",
				 * str)).list(); }
				 */
				int mmfMasterId = 0;
				int approvedId = 0;

				if (storeMmfDepartmentTList != null
						&& storeMmfDepartmentTList.size() > 0) {
					mmfMasterId = storeMmfDepartmentTList.get(0)
					.getStoreMmfDepartmentM().getId();
					docId = storeMmfDepartmentTList.get(0)
					.getStoreMmfDepartmentM().getDocNo();
					map.put("docId", docId);
					if (storeMmfDepartmentTList.get(0).getStoreMmfDepartmentM()
							.getApprovedBy() != null) {
						approvedId = storeMmfDepartmentTList.get(0)
						.getStoreMmfDepartmentM().getApprovedBy()
						.getId();
						map.put("approvedId", approvedId);
					}

					map.put("mmfMasterId", mmfMasterId);
				}

				for (Iterator iterator = storeMmfDepartmentTList.iterator(); iterator
				.hasNext();) {
					StoreMmfDepartmentT storeMmfDepartmentT = (StoreMmfDepartmentT) iterator
					.next();

					try {
						id = storeMmfDepartmentT.getId();
					} catch (Exception e) {
						id = 0;
					}

					try {
						pvms = storeMmfDepartmentT.getItem().getPvmsNo();
					} catch (Exception e) {
						pvms = "";
					}

					try {
						nomenclature = storeMmfDepartmentT.getItem()
						.getNomenclature();
					} catch (Exception e) {
						nomenclature = "";
					}

					try {
						au = storeMmfDepartmentT.getItem().getItemConversion()
						.getPurchaseUnit().getUnitName();
					} catch (Exception e) {
						au = "";
					}

					try {
						qtymmf = storeMmfDepartmentT.getMmfInQty();
					} catch (Exception e) {
						qtymmf = new BigDecimal(0);
					}
					try {
						if (storeMmfDepartmentT.getPreYearMmf() != null)
							preQtymmf = storeMmfDepartmentT.getPreYearMmf();
						else
							preQtymmf = new BigDecimal(0);
					} catch (Exception e) {
						preQtymmf = new BigDecimal(0);
					}
					try {
						if (storeMmfDepartmentT.getCurrYearMmf() != null)
							currQtymmf = storeMmfDepartmentT.getCurrYearMmf();
						else
							currQtymmf = new BigDecimal(0);
					} catch (Exception e) {
						currQtymmf = new BigDecimal(0);
					}
					try {
						remark = storeMmfDepartmentT.getRemarks();
					} catch (Exception e) {
						remark = "";
					}
					hData = new HashMap<String, Object>();
					// code for checking that approval for particular item is
					// alredy done
					List<StoreMmfDepartmentT> storeMmfDepartmentTList1 = new ArrayList<StoreMmfDepartmentT>();
					/*storeMmfDepartmentTList1 = session.createCriteria(
							StoreMmfDepartmentT.class).createAlias(
							"StoreMmfDepartmentM", "m").add(
							Restrictions.eq("m.MmfStoreType", box
									.get("storeType"))).add(
							Restrictions.eq("m.MmfForTheYear", box
									.getInt(MMF_DEPARTMENT_DATE))).createAlias(
							"Item", "i").add(
							Restrictions.eq("i.Id", storeMmfDepartmentT
									.getItem().getId())).list();*/
					storeMmfDepartmentTList1 = session.createCriteria(
							StoreMmfDepartmentT.class).createAlias(
									"StoreMmfDepartmentM", "m").add(
											Restrictions.eq("m.MmfForTheYear", box
													.getInt(MMF_DEPARTMENT_DATE)))
													.add(Restrictions.eq("m.Hospital.Id", hospitalid))
													.createAlias("Item", "i").add(
															Restrictions.eq("i.Id", storeMmfDepartmentT
																	.getItem().getId())).list();
					boolean flag = false;
					for (StoreMmfDepartmentT storeMmfDepartmentT2 : storeMmfDepartmentTList1) {
						if (storeMmfDepartmentT2.getApprovedStatus() != null
								&& !storeMmfDepartmentT2.getApprovedStatus()
								.equals("")) {
							if (storeMmfDepartmentT2.getApprovedStatus()
									.equalsIgnoreCase("p")) {
								hData.put("approvedStatus", "p");
								flag = true;
							}

						}
						if (flag == true)
							break;

					}

					hData.put("id", id);
					hData.put("pvms", pvms);
					hData.put("nomenclature", nomenclature);
					hData.put("au", au);
					hData.put("qtymmf", qtymmf);
					hData.put("preQtymmf", preQtymmf);
					hData.put("currQtymmf", currQtymmf);

					hData.put("remark", remark);

					vResult.add(hData);
				}

				if (vResult.size() > 0) {
					testPageData = new HashMap[vResult.size()];
					vResult.copyInto(testPageData);
				}

				try {
					pagedArray = new PageUtil().convertToPagedArrayIndex(
							testPageData, box);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} catch (HibernateException e) {
				e.printStackTrace();
			}
			map.put("pagedArray", pagedArray);
		}

		return map;
	}

	public Map<String, Object> searchMmfDepartmentData(Box box) {
		// TODO Auto-generated method stub
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();

		String pvms = null;
		String nomenclature = null;
		String au = null;
		BigDecimal qtymmf = new BigDecimal(0);
		String remark = null;
		String remarks = null;
		BigDecimal preQtymmf = new BigDecimal(0);
		BigDecimal currQtymmf = new BigDecimal(0);

		int id = 0;
		String docId = "";
		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;

		List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
		List<StoreMmfDepartmentM> searchStoreMmfDepartmentMList = new ArrayList<StoreMmfDepartmentM>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			StoreMmfDepartmentT storeMmfDepartmentT1 = new StoreMmfDepartmentT();
			int currentYear = box.getInt(MMF_DEPARTMENT_DATE);

			/*
			 * Commented By Ujjwal For Sql Injection
			 */
			/*			departmentList = getHibernateTemplate()
					.find(
							"from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y'");
			 */
			departmentList=session.createCriteria(MasDepartment.class).add(Restrictions.eq("Status", "y")).addOrder(Order.asc("DepartmentName")).list();

			/*
			 * Commented By Ujjwal For Sql Injection
			 */

			/*			approvedByEmployeeList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasEmployee");
			 */
			approvedByEmployeeList=session.createCriteria(MasEmployee.class).add(Restrictions.eq("Status", "y")).list();


			searchStoreMmfDepartmentMList = session
			.createCriteria(StoreMmfDepartmentM.class)
			.add(Restrictions.eq("StoreWardDept.Id",
					box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
					.add(Restrictions.eq("Hospital.Id",box.getInt("hospitalId")))
					//.add(Restrictions.eq("MmfStoreType", box.get("storeType")))
					.list();
/*
			if (searchStoreMmfDepartmentMList != null
					&& searchStoreMmfDepartmentMList.size() > 0) {
				map.put("docId", searchStoreMmfDepartmentMList.get(0)
						.getDocNo());
				
				
			}
*/
			map.put("departmentList", departmentList);
			map.put("approvedByEmployeeList", approvedByEmployeeList);
			map.put("searchStoreMmfDepartmentMList",
					searchStoreMmfDepartmentMList);
			if (searchStoreMmfDepartmentMList != null
					&& searchStoreMmfDepartmentMList.size() > 0)
				map.put("remarks", searchStoreMmfDepartmentMList.get(0).getRemarks());

			// comment by javed khan

			//map.put("preparedBy", searchStoreMmfDepartmentMList.get(0).getPreparedBy());
			//map.put("checkedBy", searchStoreMmfDepartmentMList.get(0).getCheckedBy());

			 map.put("docId", box.getString(DOC_NO));

			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			storeMmfDepartmentTList = session
			.createCriteria(StoreMmfDepartmentT.class)
			.createAlias("StoreMmfDepartmentM", "m")

			.add(Restrictions.eq("m.StoreWardDept.Id",
					box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
					.add(Restrictions.eq("m.Hospital.Id",box.getInt("hospitalId")))
					//.add(Restrictions.eq("m.MmfStoreType", box.get("storeType")))
					.add(Restrictions.eq("m.DocNo", box.get(DOC_NO)))
					.addOrder(Order.asc("Item.Id"))
					.list();




		} catch (HibernateException e) {
			e.printStackTrace();
		}

		if (storeMmfDepartmentTList != null
				&& storeMmfDepartmentTList.size() > 0) {
			int mmfMasterId = storeMmfDepartmentTList.get(0)
			.getStoreMmfDepartmentM().getId();
			int mmfDate = storeMmfDepartmentTList.get(0)
			.getStoreMmfDepartmentM().getMmfForTheYear();
			if (storeMmfDepartmentTList.get(0).getStoreMmfDepartmentM()
					.getApprovedBy() != null) {
				int approvedId = storeMmfDepartmentTList.get(0)
				.getStoreMmfDepartmentM().getApprovedBy().getId();
				docId = storeMmfDepartmentTList.get(0).getStoreMmfDepartmentM()
				.getDocNo();
				map.put("approvedId", approvedId);
				map.put("docId", docId);
			}
			map.put("mmfMasterId", mmfMasterId);
			map.put("mmfDate", mmfDate);
		}

		for (Iterator iterator = storeMmfDepartmentTList.iterator(); iterator
		.hasNext();) {
			StoreMmfDepartmentT storeMmfDepartmentT = (StoreMmfDepartmentT) iterator
			.next();

			try {
				id = storeMmfDepartmentT.getId();
			} catch (Exception e) {
				id = 0;
			}

			try {
				pvms = storeMmfDepartmentT.getItem().getPvmsNo();
			} catch (Exception e) {
				pvms = "";
			}

			try {
				nomenclature = storeMmfDepartmentT.getItem().getNomenclature();
			} catch (Exception e) {
				nomenclature = "";
			}

			try {
				au = storeMmfDepartmentT.getItem().getItemConversion()
				.getPurchaseUnit().getUnitName();
			} catch (Exception e) {
				au = "";
			}

			try {
				qtymmf = storeMmfDepartmentT.getMmfInQty();
			} catch (Exception e) {
				qtymmf = new BigDecimal(0);
			}

			try {
				if (preQtymmf != null)
					preQtymmf = storeMmfDepartmentT.getPreYearMmf();
				else
					preQtymmf = new BigDecimal(0);
			} catch (Exception e) {
				preQtymmf = new BigDecimal(0);
			}
			try {
				if (currQtymmf != null)
					currQtymmf = storeMmfDepartmentT.getCurrYearMmf();
				else
					currQtymmf = new BigDecimal(0);
			} catch (Exception e) {
				currQtymmf = new BigDecimal(0);
			}
			try {
				remark = storeMmfDepartmentT.getRemarks();
			} catch (Exception e) {
				remark = "";
			}
			hData = new HashMap<String, Object>();
			// code for checking that approval for particular item is alredy
			// done
			List<StoreMmfDepartmentT> storeMmfDepartmentTList1 = new ArrayList<StoreMmfDepartmentT>();
			/*storeMmfDepartmentTList1 = session.createCriteria(
					StoreMmfDepartmentT.class).createAlias(
					"StoreMmfDepartmentM", "m").add(
					Restrictions.eq("m.MmfStoreType", box.get("storeType")))
					.add(
							Restrictions.eq("m.MmfForTheYear", box
									.getInt(MMF_DEPARTMENT_DATE))).createAlias(
							"Item", "i").add(
							Restrictions.eq("i.Id", storeMmfDepartmentT
									.getItem().getId())).list();*/
			storeMmfDepartmentTList1 = session.createCriteria(
					StoreMmfDepartmentT.class).createAlias("StoreMmfDepartmentM", "m")
					//.add(Restrictions.eq("m.MmfStoreType", box.get("storeType")))
					.add(Restrictions.eq("m.MmfForTheYear", box.getInt(MMF_DEPARTMENT_DATE)))
					.add(Restrictions.eq("m.Hospital.Id",box.getInt("hospitalId")))
					.createAlias("Item", "i").add(Restrictions.eq("i.Id", storeMmfDepartmentT
							.getItem().getId())).list();



			boolean flag = false;
			for (StoreMmfDepartmentT storeMmfDepartmentT2 : storeMmfDepartmentTList1) {
				if (storeMmfDepartmentT2.getApprovedStatus() != null
						&& !storeMmfDepartmentT2.getApprovedStatus().equals("")) {
					if (storeMmfDepartmentT2.getApprovedStatus()
							.equalsIgnoreCase("p")) {
						hData.put("approvedStatus", "p");
						flag = true;
					}

				}
				if (flag == true)
					break;

			}

			hData.put("id", id);
			hData.put("pvms", pvms);
			hData.put("nomenclature", nomenclature);
			hData.put("au", au);
			hData.put("qtymmf", qtymmf);
			hData.put("currQtymmf", currQtymmf);
			hData.put("preQtymmf", preQtymmf);
			hData.put("remark", remark);

			vResult.add(hData);
		}

		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}

		try {
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);
		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("pagedArray", pagedArray);
		return map;
	}

	public Map<String, Object> getItemDetails(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<UserEmpGroup> userEmp = new ArrayList<UserEmpGroup>();
		session = (Session) getSession();

		String pvms = null;
		String nomenclature = null;
		String strength = null;
		String au = null;
		BigDecimal qtymmf = new BigDecimal(0);
		String str = null;
		String str1 = null;
		// BigDecimal annreq = null;
		int item_id = 0;

		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector mmfTItems = new Vector();
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		Criteria c = null;
		List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			String mmfNo = box.get("mmfNo");
			map.put("mmfNo", mmfNo);

			userEmp = session.createCriteria(UserEmpGroup.class)
			.add(Restrictions.eq("User.Id",box.getInt("userId")))
			.add(Restrictions.eq("EmpGroup.Id", 1)).list();



			if (box.getInt("mmfMasterId") != 0)
				storeMmfDepartmentTList = hbt
				.find("from jkt.hms.masters.business.StoreMmfDepartmentT as inp where inp.StoreMmfDepartmentM.Id = "
						+ box.getInt("mmfMasterId"));

			for (Iterator iterator = storeMmfDepartmentTList.iterator(); iterator
			.hasNext();) {
				StoreMmfDepartmentT storeMmfDepartmentT = (StoreMmfDepartmentT) iterator
				.next();
				mmfTItems.add(storeMmfDepartmentT.getItem().getId());
			}

			if (box.get("search_text") != null
					&& box.getString("search_text").length() > 0) {
				if (box.get("pvms") != null
						&& box.getString("pvms").length() > 0) {
					str = "%" + box.getString("search_text") + "%";
					str1 = "%" + box.getString("pvms") + "%";
					c = session.createCriteria(MasStoreItem.class).add(
							Restrictions.eq("Status", "y")).add(
									Restrictions.or(Restrictions.like("Nomenclature",
											str), Restrictions.like("PvmsNo", str1)))
											.add(Restrictions.eq("Department.Id", 24));
				} else {
					str = "%" + box.getString("search_text") + "%";
					c = session.createCriteria(MasStoreItem.class).add(
							Restrictions.like("Nomenclature", str)).add(
									Restrictions.eq("Department.Id", 24));
				}
			} else {
				if (box.get("pvms") != null
						&& box.getString("pvms").length() > 0) {
					str1 = "%" + box.getString("pvms") + "%";

					c = session.createCriteria(MasStoreItem.class).add(
							Restrictions.like("PvmsNo", str1)).add(
									Restrictions.eq("Department.Id", 24)).add(
											Restrictions.eq("Status", "y"));
				} else {
					c = session.createCriteria(MasStoreItem.class).add(
							Restrictions.eq("Department.Id", 24)).add(
									Restrictions.eq("Status", "y"));
					c.setFirstResult(0);
					c.setMaxResults(1000);
				}
			}
		}

		catch (HibernateException e) {
			e.printStackTrace();
		}
		/*
		 * int firstResult = box.getInt("currPage") - 1 *
		 * box.getInt("numOfRows"); int maxResults = box.getInt("numOfRows");
		 * c.setFirstResult(firstResult); c.setMaxResults(maxResults);
		 */
		itemList = c.list();

		StoreMmfDepartmentT storeMmfDepartmentT = new StoreMmfDepartmentT();
		for (Iterator iterator = itemList.iterator(); iterator.hasNext();) {
			MasStoreItem masStoreItem = (MasStoreItem) iterator.next();

			try {
				pvms = masStoreItem.getPvmsNo();
			} catch (Exception e) {
				pvms = "";
			}

			try {
				nomenclature = masStoreItem.getNomenclature();
			} catch (Exception e) {
				nomenclature = "";
			}

			try {
				strength = masStoreItem.getStrength();
			} catch (Exception e) {
				strength = "";
			}

			try {
				au = masStoreItem.getItemConversion().getPurchaseUnit()
				.getUnitName();
			} catch (Exception e) {
				au = "";
			}

			try {
				item_id = masStoreItem.getId();
			} catch (Exception e) {
				item_id = 0;
			}

			// if (!mmfTItems.contains(item_id)) {
			hData = new HashMap<String, Object>();
			hData.put("itemId", item_id);
			hData.put("pvms", pvms);
			hData.put("nomenclature", nomenclature);
			hData.put("strength", strength);
			hData.put("qtymmf", new BigDecimal(0));

			// code for checking that approval for particular item is alredy
			// done

			List<StoreMmfDepartmentT> storeMmfDepartmentTList1 = new ArrayList<StoreMmfDepartmentT>();
			try {
				storeMmfDepartmentTList1 = session.createCriteria(
						StoreMmfDepartmentT.class).createAlias(
								"StoreMmfDepartmentM", "m")
								.add(Restrictions.eq("m.MmfStoreType", box.get("storeType")))
								.add(Restrictions.eq("m.MmfForTheYear", box	.getInt(MMF_DEPARTMENT_DATE)))
								.add(Restrictions.eq("m.Hospital.Id", box.getInt("hospitalId")))
								.createAlias("Item", "i").add(Restrictions.eq("i.Id", item_id)).list();

			} catch (Exception e) {

			}
			boolean flag = false;
			for (StoreMmfDepartmentT storeMmfDepartmentT2 : storeMmfDepartmentTList1) {
				if (storeMmfDepartmentT2.getApprovedStatus() != null
						&& !storeMmfDepartmentT2.getApprovedStatus().equals("")) {
					if (storeMmfDepartmentT2.getApprovedStatus()
							.equalsIgnoreCase("p")) {
						hData.put("approvedStatus", "p");
						flag = true;
					}

				}
				if (flag == true)
					break;

			}
			for (StoreMmfDepartmentT storeMmfDepartmentT1 : storeMmfDepartmentTList) {
				if (storeMmfDepartmentT1.getItem().getId() == masStoreItem
						.getId()) {

					hData.put("qtymmf", storeMmfDepartmentT1.getMmfInQty());
					break;
				}
			}
			// hData.put(TENDER_ANNREQ, annreq);
			hData.put("au", au);

			vResult.add(hData);

			// }
		}

		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}

		try {
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);
		} catch (Exception e) {
			e.printStackTrace();
		}
		boolean rites = false;
		if(userEmp != null && userEmp.size() > 0){
			rites = true;
		}
		map.put("mmfTItems", mmfTItems);
		map.put("rites", rites);
		map.put("pagedArray", pagedArray);
		map.put("storeType", box.get("storeType"));
		session.flush();
		return map;
	}

	public Map<String, Object> getItemDetailsForMmfDepartmentJspForNextRecord(
			Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		session = (Session) getSession();
		String pvms = null;
		String nomenclature = null;
		String strength = null;
		String au = null;
		BigDecimal qtymmf = new BigDecimal(0);
		String str = null;
		// BigDecimal annreq = null;
		int item_id = 0;

		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector mmfTItems = new Vector();
		mmfTItems = box.getVector("mmfTItems");
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		Criteria c = null;
		List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			String mmfNo = box.get("mmfNo");

			map.put("mmfNo", mmfNo);

			if (box.getInt("mmfMasterId") != 0)
				storeMmfDepartmentTList = hbt
				.find("from jkt.hms.masters.business.StoreMmfDepartmentT as inp where inp.StoreMmfDepartmentM.Id = "
						+ box.getInt("mmfMasterId"));
			int count = 1;
			for (Iterator iterator = storeMmfDepartmentTList.iterator(); iterator
			.hasNext();) {
				if (count != 1) {
					StoreMmfDepartmentT storeMmfDepartmentT = (StoreMmfDepartmentT) iterator
					.next();
					mmfTItems.add(storeMmfDepartmentT.getItem().getId());
				}
				count++;
			}

			if (box.get("search_text") != null
					&& box.getString("search_text").length() > 0) {
				if (box.get("pvms") != null
						&& box.getString("pvms").length() > 0) {
					str = "%" + box.getString("search_text") + "%";
					pvms = box.getString("pvms");
					c = session.createCriteria(MasStoreItem.class).add(
							Restrictions.eq("Status", "y")).add(
									Restrictions.or(Restrictions.like("Nomenclature",
											str), Restrictions.eq("PvmsNo", pvms)));
				} else {
					str = "%" + box.getString("search_text") + "%";
					c = session.createCriteria(MasStoreItem.class).add(
							Restrictions.eq("Status", "y")).add(
									Restrictions.like("Nomenclature", str));
				}
				// itemList = c.list();
			} else {
				int itemId = 0;
				if (box.getString("buttonName").equals("next")) {
					itemId = box.getInt("itemId");
				} else {
					itemId = Integer.parseInt(box
							.getString("itemIdForNextRecord"));
				}

				c = session.createCriteria(MasStoreItem.class).add(
						Restrictions.eq("Status", "y")).add(
								Restrictions.ge("Id", itemId))
								.addOrder(Order.asc("Id"));
				c.setFirstResult(0);
				c.setMaxResults(1000);
				// itemList = c.list();
				String itemIdForNextRecord = Integer.toString(itemId);
				map.put("itemIdForNextRecord", itemIdForNextRecord);
			}
			itemList = c.list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		/*
		 * int firstResult = box.getInt("currPage") - 1 *
		 * box.getInt("numOfRows"); int maxResults = box.getInt("numOfRows");
		 * c.setFirstResult(firstResult); c.setMaxResults(maxResults);
		 */

		// StoreMmfDepartmentT storeMmfDepartmentT=new StoreMmfDepartmentT();
		for (Iterator iterator = itemList.iterator(); iterator.hasNext();) {
			MasStoreItem masStoreItem = (MasStoreItem) iterator.next();

			try {
				pvms = masStoreItem.getPvmsNo();
			} catch (Exception e) {
				pvms = "";
			}

			try {
				nomenclature = masStoreItem.getNomenclature();
			} catch (Exception e) {
				nomenclature = "";
			}

			try {
				strength = masStoreItem.getStrength();
			} catch (Exception e) {
				strength = "";
			}

			try {
				au = masStoreItem.getItemConversion().getPurchaseUnit()
				.getUnitName();
			} catch (Exception e) {
				au = "";
			}

			try {
				item_id = masStoreItem.getId();
			} catch (Exception e) {
				item_id = 0;
			}

			// if (!mmfTItems.contains(item_id)) {
			hData = new HashMap<String, Object>();
			hData.put("itemId", item_id);
			hData.put("pvms", pvms);
			hData.put("nomenclature", nomenclature);
			hData.put("strength", strength);

			// hData = new HashMap<String, Object>();

			// code for checking that approval for particular item is alredy
			// done
			List<StoreMmfDepartmentT> storeMmfDepartmentTList1 = new ArrayList<StoreMmfDepartmentT>();
			storeMmfDepartmentTList1 = session.createCriteria(
					StoreMmfDepartmentT.class).createAlias(
							"StoreMmfDepartmentM", "m").add(
									Restrictions.eq("m.MmfStoreType", box.get("storeType")))
									.add(
											Restrictions.eq("m.MmfForTheYear", box
													.getInt(MMF_DEPARTMENT_DATE))).createAlias(
															"Item", "i").add(Restrictions.eq("i.Id", item_id))
															.list();
			boolean flag = false;
			for (StoreMmfDepartmentT storeMmfDepartmentT2 : storeMmfDepartmentTList1) {
				if (storeMmfDepartmentT2.getApprovedStatus() != null
						&& !storeMmfDepartmentT2.getApprovedStatus().equals("")) {
					if (storeMmfDepartmentT2.getApprovedStatus()
							.equalsIgnoreCase("p")) {
						hData.put("approvedStatus", "p");
						flag = true;
					}

				}
				if (flag == true)
					break;

			}

			hData.put("qtymmf", new BigDecimal(0));

			for (StoreMmfDepartmentT storeMmfDepartmentT1 : storeMmfDepartmentTList) {

				if (storeMmfDepartmentT1.getItem().getId() == masStoreItem
						.getId()) {

					hData.put("qtymmf", storeMmfDepartmentT1.getMmfInQty());

					break;
				}
			}
			// hData.put(TENDER_ANNREQ, annreq);
			hData.put("au", au);
			vResult.add(hData);

			// }
		}

		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}

		try {
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("pagedArray", pagedArray);
		map.put("storeType", box.get("storeType"));
		map.put("mmfTItems", mmfTItems);
		session.flush();
		return map;
	}

	public Map<String, Object> doAddMmfItems(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		session = (Session) getSession();
		int hospitalId=0;
		Vector items = box.getVector("itemId");
		Vector qtymmf = box.getVector("qtymmf");
		// Vector annreq = box.getVector(TENDER_ANNREQ);
		Vector items_to_be_added = box.getVector(ITEMS_TO_BE_ADDED);
		int mmfMasterId = box.getInt("mmfMasterId");
		int newmmfMasterId = 0;
		int previousYear = box.getInt("previousYear");
		StoreMmfDepartmentM storeMmfDepartmentM = null;
		List<StoreMmfDepartmentM> storeMmfDepartmentMList1 = null;

		StoreMmfDepartmentM newMObj = null;
		StoreMmfDepartmentT storeMmfDepartmentT = null;
		MasStoreItem masStoreItem = null;

		int sr_no = 0;
		int currentYear = box.getInt(MMF_DEPARTMENT_DATE);
		String mmfNo = box.get("mmfNo");
		String no = "";
		hospitalId=Integer.parseInt((""+box.get("hospitalId")));
		StoreFyDocumentNo storeFyDocumentNo = new StoreFyDocumentNo();

		/*
		 * storeMmfDepartmentMList = hbt .find("from
		 * jkt.hms.masters.business.StoreMmfDepartmentM as a where a.Id =" +
		 * mmfMasterId);
		 *
		 * storeMmfDepartmentTList = hbt .find("from
		 * jkt.hms.masters.business.StoreMmfDepartmentT as b where
		 * b.StoreMmfDepartmentM.Id =" + mmfMasterId + " order by b.SrNo desc");
		 *
		 * if (storeMmfDepartmentMList != null && storeMmfDepartmentMList.size() >
		 * 0) { storeMmfDepartmentM = (StoreMmfDepartmentM)
		 * storeMmfDepartmentMList .get(0); }
		 */

		/*
		 * if (storeMmfDepartmentTList != null && storeMmfDepartmentTList.size() >
		 * 0) { sr_no = storeMmfDepartmentTList.get(0).getSrNo().intValue(); }
		 *
		 *
		 * if (mmfNo == null || mmfNo.equals("")) {
		 *  // For Generating & Saving new MMF No for StoreFyDocumentNo Table
		 *
		 * List<StoreFyDocumentNo> mmfNoList = session
		 * .createCriteria(StoreFyDocumentNo.class).addOrder(Order.desc("Id"))
		 * .add(Restrictions.eq("Department.Id",box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
		 * .list();
		 *
		 * if (mmfNoList != null && mmfNoList.size() > 0) { storeFyDocumentNo =
		 * (StoreFyDocumentNo) mmfNoList.get(0); mmfNo = ("" +
		 * storeFyDocumentNo.getMmfNo());
		 *
		 * mmfNo = "01/" + currentYear; } }
		 */
		try {
			List<StoreMmfDepartmentM> storeMmfDepartmentMList = new ArrayList<StoreMmfDepartmentM>();
			List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			/*
			 * if (box.getInt("mmfMasterId") != 0) {
			 *
			 * storeMmfDepartmentMList = hbt .find("from
			 * jkt.hms.masters.business.StoreMmfDepartmentM as a where a.Id =" +
			 * mmfMasterId);
			 *
			 * storeMmfDepartmentTList = hbt .find("from
			 * jkt.hms.masters.business.StoreMmfDepartmentT as b where
			 * b.StoreMmfDepartmentM.Id =" + mmfMasterId + " order by b.SrNo
			 * desc");
			 *
			 * if (storeMmfDepartmentMList != null &&
			 * storeMmfDepartmentMList.size() > 0) { storeMmfDepartmentM =
			 * (StoreMmfDepartmentM) storeMmfDepartmentMList .get(0); }
			 *
			 * if (storeMmfDepartmentTList != null &&
			 * storeMmfDepartmentTList.size() > 0) { sr_no =
			 * storeMmfDepartmentTList.get(0).getSrNo().intValue(); }
			 * newmmfMasterId = storeMmfDepartmentM.getId();
			 */

			storeMmfDepartmentTList = session
			.createCriteria(StoreMmfDepartmentT.class)
			.createAlias("StoreMmfDepartmentM", "m")
			.add(Restrictions.eq("m.MmfForTheYear", box.getInt(MMF_DEPARTMENT_DATE)))
			.add(Restrictions.eq("m.StoreWardDept.Id",
					box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
					.add(Restrictions.eq("m.Hospital.Id",hospitalId))
					//.add(Restrictions.eq("m.MmfStoreType", box.get("storeType")))
					.addOrder(Order.desc("SrNo")).list();

			if (storeMmfDepartmentTList != null
					&& storeMmfDepartmentTList.size() > 0) {
				sr_no = storeMmfDepartmentTList.get(0).getSrNo().intValue();
			}


			// comment by javed

			/*storeMmfDepartmentMList = session
					.createCriteria(StoreMmfDepartmentM.class)
					.add(Restrictions.eq("MmfForTheYear", box.getInt(MMF_DEPARTMENT_DATE)))
					.add(Restrictions.eq("StoreWardDept.Id",
											box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
					.add(Restrictions.eq("MmfStoreType", box.get("storeType")))
					.list();*/

			// add by javed

			storeMmfDepartmentMList = session
			.createCriteria(StoreMmfDepartmentM.class)
			.add(Restrictions.eq("MmfForTheYear", box.getInt(MMF_DEPARTMENT_DATE)))
			.add(Restrictions.eq("StoreWardDept.Id",
					box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
					.add(Restrictions.eq("Hospital.Id",hospitalId))
					.list();
			mmfNo = "01/" + currentYear;
			newMObj = new StoreMmfDepartmentM();

			if (storeMmfDepartmentMList.size() > 0
					&& storeMmfDepartmentMList != null) {
				newMObj = storeMmfDepartmentMList.get(0);

				newmmfMasterId = newMObj.getId();
			} else {

				/*
				 * if (box.getInt(APPROVED_BY_EMPLOYEE_ID_MMF_DEPENDENT) != 0) {
				 * MasEmployee masEmployee = new MasEmployee();
				 * masEmployee.setId(box
				 * .getInt(APPROVED_BY_EMPLOYEE_ID_MMF_DEPENDENT));
				 * newMObj.setApprovedBy(masEmployee); }
				 */
				// according to new requirements of adding 2 textfields
				newMObj.setDocNo(mmfNo);
				map.put("docId", mmfNo);
				newMObj.setLastChgBy(box.get(CHANGED_BY));
				newMObj.setLastChgDate(HMSUtil
						.convertStringTypeDateToDateType(box
								.getString(CHANGED_DATE)));
				newMObj.setLastChgTime(box.get(CHANGED_TIME));
				newMObj.setMmfForTheYear(currentYear);

				newMObj.setRemarks(box.get(REMARKS));
				newMObj.setStatus("o");
				newMObj.setCheckedBy(box.getString(CHECKED_BY));
				newMObj.setPreparedBy(box.getString(PREPARED_BY));

				MasDepartment storeWardDept = new MasDepartment();
				storeWardDept.setId(box
						.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT));
				newMObj.setStoreWardDept(storeWardDept);

				MasHospital masHospital = new MasHospital();
				masHospital.setId(box.getInt("hospitalId"));
				newMObj.setHospital(masHospital);
				newMObj.setMmfStoreType(box.get("storeType"));
				hbt.save(newMObj);
				hbt.refresh(newMObj);
				List<StoreFyDocumentNo> mmfNoList = session
				.createCriteria(StoreFyDocumentNo.class)
				.add(Restrictions.eq("Department.Id",
						box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
						.add(Restrictions.eq("Hospital.Id",hospitalId)).list();

				// + mmfNoList.size() + "---" + mmfNo);
				if (mmfNoList != null && mmfNoList.size() > 0) {
					storeFyDocumentNo = mmfNoList.get(0);
					storeFyDocumentNo.setMmfNo(mmfNo);
					hbt.saveOrUpdate(storeFyDocumentNo);
					hbt.refresh(storeFyDocumentNo);
				}

				else {
					storeFyDocumentNo.setMmfNo(mmfNo);
					MasDepartment masDepartment = new MasDepartment();
					masDepartment.setId(box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT));
					storeFyDocumentNo.setDepartment(masDepartment);
					hbt.save(storeFyDocumentNo);
					hbt.refresh(storeFyDocumentNo);
				}

				/*storeMmfDepartmentMList1 = session
						.createCriteria(StoreMmfDepartmentM.class)
						.add(Restrictions.eq("MmfForTheYear", box.getInt(MMF_DEPARTMENT_DATE)))
						.add(Restrictions.eq("StoreWardDept.Id",
								                 box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
						.add(Restrictions.eq("MmfStoreType", box.get("storeType"))).list();*/
				// comment by javed khna

				storeMmfDepartmentMList1 = session
				.createCriteria(StoreMmfDepartmentM.class)
				.add(Restrictions.eq("MmfForTheYear", box.getInt(MMF_DEPARTMENT_DATE)))
				.add(Restrictions.eq("StoreWardDept.Id",
						box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
						.add(Restrictions.eq("Hospital.Id",hospitalId))
						.list();

				newmmfMasterId = storeMmfDepartmentMList1.get(0).getId();


			}
			for (int i = 0; i < items.size(); i++) {
				if (items_to_be_added.contains(items.get(i))) {
					masStoreItem = new MasStoreItem();
					masStoreItem
					.setId(Integer.valueOf(items.get(i).toString()));

					storeMmfDepartmentT = new StoreMmfDepartmentT();

					storeMmfDepartmentT.setItem(masStoreItem);
					// Create new department Master record
					storeMmfDepartmentT.setStoreMmfDepartmentM(newMObj);

					storeMmfDepartmentT.setMmfInQty(new BigDecimal(qtymmf
							.get(i).toString()));
					// todo
					storeMmfDepartmentT.setCurrYearMmf(new BigDecimal(qtymmf
							.get(i).toString()));

					List<StoreMmfDepartmentT> preStoreMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
					/*
					 * preStoreMmfDepartmentTList=(List<StoreMmfDepartmentT>)session.createCriteria(StoreMmfDepartmentT.class).createAlias("StoreMmfDepartmentT","i").add(Restrictions.eq("i.StoreMmfDepartmentM.MmfForTheYear",
					 * previousYear))
					 *
					 * .add(Restrictions.eq("i.StoreMmfDepartmentM.StoreWardDept.Id",
					 * box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT))
					 * .add(Restrictions.eq("i.ItemId",
					 * Integer.valueOf(.get(i).toString())).list();
					 */

					// storeMmfDepartmentT.setPreYearMmf();
					preStoreMmfDepartmentTList = hbt
					.find("from StoreMmfDepartmentT  premmf where premmf.Item="
							+ Integer.valueOf(items.get(i).toString())
							+ " and premmf.StoreMmfDepartmentM.MmfForTheYear="
							+ (currentYear - 1)
							+ " and premmf.StoreMmfDepartmentM.Hospital.Id="  // add javed
							+hospitalId
							+ " and premmf.StoreMmfDepartmentM.StoreWardDept.Id="
							+ box
							.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT));
					if (preStoreMmfDepartmentTList != null
							&& preStoreMmfDepartmentTList.size() > 0)
						storeMmfDepartmentT
						.setPreYearMmf((preStoreMmfDepartmentTList
								.get(0)).getMmfInQty());
					else
						storeMmfDepartmentT.setPreYearMmf(new BigDecimal(0));
					storeMmfDepartmentT.setSrNo(++sr_no);
					hbt.save(storeMmfDepartmentT);
					hbt.refresh(storeMmfDepartmentT);
				}
			}
			box.put("mmfMasterId", newmmfMasterId);
			if (!box.getString("itemIdForNextRecord").equals("null")) {
				map = getItemDetailsForMmfDepartmentJspForNextRecord(box);
			} else {
				map = getItemDetails(box);
			}

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("newmmfMasterId", newmmfMasterId);
		map.put("currentYear", currentYear);
		map.put("previousYear", previousYear);
		return map;
	}

	/*public Map<String, Object> doAddMmfItems(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		session = (Session) getSession();

		Vector items = box.getVector("itemId");
		Vector qtymmf = box.getVector("qtymmf");
		// Vector annreq = box.getVector(TENDER_ANNREQ);
		Vector items_to_be_added = box.getVector(ITEMS_TO_BE_ADDED);
		int mmfMasterId = box.getInt("mmfMasterId");
		int newmmfMasterId = 0;
		int previousYear = box.getInt("previousYear");
		StoreMmfDepartmentM storeMmfDepartmentM = null;
		List<StoreMmfDepartmentM> storeMmfDepartmentMList1 = null;

		StoreMmfDepartmentM newMObj = null;
		StoreMmfDepartmentT storeMmfDepartmentT = null;
		MasStoreItem masStoreItem = null;

		int sr_no = 0;
		int currentYear = box.getInt(MMF_DEPARTMENT_DATE);
		int month=box.getInt(MONTH);
		String mmfNo = box.get("mmfNo");
		String no = "";
		StoreFyDocumentNo storeFyDocumentNo = new StoreFyDocumentNo();

		/*
	 * storeMmfDepartmentMList = hbt .find("from
	 * jkt.hms.masters.business.StoreMmfDepartmentM as a where a.Id =" +
	 * mmfMasterId);
	 *
	 * storeMmfDepartmentTList = hbt .find("from
	 * jkt.hms.masters.business.StoreMmfDepartmentT as b where
	 * b.StoreMmfDepartmentM.Id =" + mmfMasterId + " order by b.SrNo desc");
	 *
	 * if (storeMmfDepartmentMList != null && storeMmfDepartmentMList.size() >
	 * 0) { storeMmfDepartmentM = (StoreMmfDepartmentM)
	 * storeMmfDepartmentMList .get(0); }
	 */

	/*
	 * if (storeMmfDepartmentTList != null && storeMmfDepartmentTList.size() >
	 * 0) { sr_no = storeMmfDepartmentTList.get(0).getSrNo().intValue(); }
	 *
	 *
	 * if (mmfNo == null || mmfNo.equals("")) {
	 *  // For Generating & Saving new MMF No for StoreFyDocumentNo Table
	 *
	 * List<StoreFyDocumentNo> mmfNoList = session
	 * .createCriteria(StoreFyDocumentNo.class).addOrder(Order.desc("Id"))
	 * .add(Restrictions.eq("Department.Id",box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
	 * .list();
	 *
	 * if (mmfNoList != null && mmfNoList.size() > 0) { storeFyDocumentNo =
	 * (StoreFyDocumentNo) mmfNoList.get(0); mmfNo = ("" +
	 * storeFyDocumentNo.getMmfNo());
	 *
	 * mmfNo = "01/" + currentYear; } }
	 */
	/*try {
			List<StoreMmfDepartmentM> storeMmfDepartmentMList = new ArrayList<StoreMmfDepartmentM>();
			List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);*/
	/*
	 * if (box.getInt("mmfMasterId") != 0) {
	 *
	 * storeMmfDepartmentMList = hbt .find("from
	 * jkt.hms.masters.business.StoreMmfDepartmentM as a where a.Id =" +
	 * mmfMasterId);
	 *
	 * storeMmfDepartmentTList = hbt .find("from
	 * jkt.hms.masters.business.StoreMmfDepartmentT as b where
	 * b.StoreMmfDepartmentM.Id =" + mmfMasterId + " order by b.SrNo
	 * desc");
	 *
	 * if (storeMmfDepartmentMList != null &&
	 * storeMmfDepartmentMList.size() > 0) { storeMmfDepartmentM =
	 * (StoreMmfDepartmentM) storeMmfDepartmentMList .get(0); }
	 *
	 * if (storeMmfDepartmentTList != null &&
	 * storeMmfDepartmentTList.size() > 0) { sr_no =
	 * storeMmfDepartmentTList.get(0).getSrNo().intValue(); }
	 * newmmfMasterId = storeMmfDepartmentM.getId();
	 */

	/*storeMmfDepartmentTList = session
					.createCriteria(StoreMmfDepartmentT.class)
					.createAlias("StoreMmfDepartmentM", "m")
					.add(Restrictions.eq("m.MmfForTheYear", box.getInt(MMF_DEPARTMENT_DATE)))
					.add(Restrictions.eq("m.MmfForTheMonth", box.getInt(MONTH)))
					.add(Restrictions.eq("m.StoreWardDept.Id",
							                    box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
					.add(Restrictions.eq("m.MmfStoreType", box.get("storeType"))).addOrder(
							Order.desc("SrNo")).list();

			if (storeMmfDepartmentTList != null
					&& storeMmfDepartmentTList.size() > 0) {
				sr_no = storeMmfDepartmentTList.get(0).getSrNo().intValue();
			}
			storeMmfDepartmentMList = session
					.createCriteria(StoreMmfDepartmentM.class)
					.add(Restrictions.eq("MmfForTheYear", box.getInt(MMF_DEPARTMENT_DATE)))
					.add(Restrictions.eq("MmfForTheMonth", box.getInt(MONTH)))
					.add(Restrictions.eq("StoreWardDept.Id",
											box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
					.add(Restrictions.eq("MmfStoreType", box.get("storeType")))
					.list();
			mmfNo = "01/" + currentYear;
			newMObj = new StoreMmfDepartmentM();

			if (storeMmfDepartmentMList.size() > 0
					&& storeMmfDepartmentMList != null) {
				newMObj = storeMmfDepartmentMList.get(0);

				newmmfMasterId = newMObj.getId();
			} else {*/

	/*
	 * if (box.getInt(APPROVED_BY_EMPLOYEE_ID_MMF_DEPENDENT) != 0) {
	 * MasEmployee masEmployee = new MasEmployee();
	 * masEmployee.setId(box
	 * .getInt(APPROVED_BY_EMPLOYEE_ID_MMF_DEPENDENT));
	 * newMObj.setApprovedBy(masEmployee); }
	 */
	// according to new requirements of adding 2 textfields

	/*newMObj.setDocNo(mmfNo);
				map.put("docId", mmfNo);
				newMObj.setLastChgBy(box.get(CHANGED_BY));
				newMObj.setLastChgDate(HMSUtil
						.convertStringTypeDateToDateType(box
								.getString(CHANGED_DATE)));
				newMObj.setLastChgTime(box.get(CHANGED_TIME));
				newMObj.setMmfForTheYear(currentYear);
				newMObj.setMmfForTheMonth(month);*/

	/*newMObj.setRemarks(box.get(REMARKS));
				newMObj.setStatus("o");
				newMObj.setCheckedBy(box.getString(CHECKED_BY));
				newMObj.setPreparedBy(box.getString(PREPARED_BY));

				MasDepartment storeWardDept = new MasDepartment();
				storeWardDept.setId(box
						.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT));
				newMObj.setStoreWardDept(storeWardDept);*/

	/*MasHospital masHospital = new MasHospital();
				masHospital.setId(box.getInt("hospitalId"));
				newMObj.setHospital(masHospital);
				newMObj.setMmfStoreType(box.get("storeType"));
				hbt.save(newMObj);
				hbt.refresh(newMObj);
				List<StoreFyDocumentNo> mmfNoList = session
						.createCriteria(StoreFyDocumentNo.class)
						.add(Restrictions.eq("Department.Id",
									box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT))).list();

				if (mmfNoList != null && mmfNoList.size() > 0) {
					storeFyDocumentNo = mmfNoList.get(0);
					storeFyDocumentNo.setMmfNo(mmfNo);
					hbt.saveOrUpdate(storeFyDocumentNo);
					hbt.refresh(storeFyDocumentNo);
				}

				else {
					storeFyDocumentNo.setMmfNo(mmfNo);
					MasDepartment masDepartment = new MasDepartment();
					masDepartment.setId(box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT));
					storeFyDocumentNo.setDepartment(masDepartment);
					hbt.save(storeFyDocumentNo);
					hbt.refresh(storeFyDocumentNo);
				}

				storeMmfDepartmentMList1 = session
						.createCriteria(StoreMmfDepartmentM.class)
						.add(Restrictions.eq("MmfForTheYear", box.getInt(MMF_DEPARTMENT_DATE)))
						.add(Restrictions.eq("StoreWardDept.Id",
								                 box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
						.add(Restrictions.eq("MmfStoreType", box.get("storeType"))).list();
				newmmfMasterId = storeMmfDepartmentMList1.get(0).getId();


			}
			for (int i = 0; i < items.size(); i++) {
				if (items_to_be_added.contains(items.get(i))) {
					masStoreItem = new MasStoreItem();
					masStoreItem
							.setId(Integer.valueOf(items.get(i).toString()));

					storeMmfDepartmentT = new StoreMmfDepartmentT();

					storeMmfDepartmentT.setItem(masStoreItem);
					// Create new department Master record
					storeMmfDepartmentT.setStoreMmfDepartmentM(newMObj);

					storeMmfDepartmentT.setMmfInQty(new BigDecimal(qtymmf
							.get(i).toString()));
					// todo
					storeMmfDepartmentT.setCurrYearMmf(new BigDecimal(qtymmf
							.get(i).toString()));

					List<StoreMmfDepartmentT> preStoreMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();*/
	/*
	 * preStoreMmfDepartmentTList=(List<StoreMmfDepartmentT>)session.createCriteria(StoreMmfDepartmentT.class).createAlias("StoreMmfDepartmentT","i").add(Restrictions.eq("i.StoreMmfDepartmentM.MmfForTheYear",
	 * previousYear))
	 *
	 * .add(Restrictions.eq("i.StoreMmfDepartmentM.StoreWardDept.Id",
	 * box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT))
	 * .add(Restrictions.eq("i.ItemId",
	 * Integer.valueOf(.get(i).toString())).list();
	 */

	// storeMmfDepartmentT.setPreYearMmf();
	/*preStoreMmfDepartmentTList = hbt
							.find("from StoreMmfDepartmentT  premmf where premmf.Item="
									+ Integer.valueOf(items.get(i).toString())
									+ " and premmf.StoreMmfDepartmentM.MmfForTheYear="
									+ (currentYear - 1)
									+ " and premmf.StoreMmfDepartmentM.StoreWardDept.Id="
									+ box
											.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT));*/
	/*if (preStoreMmfDepartmentTList != null
							&& preStoreMmfDepartmentTList.size() > 0)
						storeMmfDepartmentT
								.setPreYearMmf((preStoreMmfDepartmentTList
										.get(0)).getMmfInQty());
					else
						storeMmfDepartmentT.setPreYearMmf(new BigDecimal(0));
					storeMmfDepartmentT.setSrNo(++sr_no);
					hbt.save(storeMmfDepartmentT);
					hbt.refresh(storeMmfDepartmentT);
				}
			}
			box.put("mmfMasterId", newmmfMasterId);
			if (!box.getString("itemIdForNextRecord").equals("null")) {
				map = getItemDetailsForMmfDepartmentJspForNextRecord(box);
			} else {
				map = getItemDetails(box);
			}

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("newmmfMasterId", newmmfMasterId);
		map.put("currentYear", currentYear);
		map.put("previousYear", previousYear);
		return map;
	}*/

	public Map<String, Object> updateGridItemsInMmf(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
		StoreMmfDepartmentT storeMmfDepartmentT = null;
		String obj = null;
		String docId = "";
		Vector items = box.getVector("id");
		session = (Session) getSession();
		Transaction tx = null;
		Transaction tx1 = null;

		if (items.size() > 0) {
			try {
				tx = session.beginTransaction();
				HibernateTemplate hbt = getHibernateTemplate();
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
				Vector srno = box.getVector("srno");
				Vector qtymmf = box.getVector("qtymmf");

				Vector remark = box.getVector("remark");
				int itemId1 = 0;

				if (items.get(0).toString() != null
						&& !items.get(0).toString().equals("")) {
					itemId1 = Integer.parseInt(items.get(0).toString());
				}
				StoreMmfDepartmentT tObj1 = (StoreMmfDepartmentT) hbt.load(
						StoreMmfDepartmentT.class, itemId1);
				tObj1.getStoreMmfDepartmentM()
				.setLastChgBy(box.get(CHANGED_BY));
				tObj1.getStoreMmfDepartmentM().setLastChgDate(
						HMSUtil.convertStringTypeDateToDateType(box
								.getString(CHANGED_DATE)));
				tObj1.getStoreMmfDepartmentM().setLastChgTime(
						box.get(CHANGED_TIME));
				tObj1.getStoreMmfDepartmentM().setRemarks(box.get(REMARKS));
				tObj1.getStoreMmfDepartmentM().setPreparedBy(
						box.get(PREPARED_BY));
				tObj1.getStoreMmfDepartmentM().setCheckedBy(
						box.getString(CHECKED_BY));
				hbt.update(tObj1);
				tx.commit();


				for (int i = 0; i < srno.size(); i++) {
					tx1 = session.beginTransaction();
					int itemId = Integer.parseInt(items.get(i).toString());
					StoreMmfDepartmentT tObj = (StoreMmfDepartmentT) hbt.load(
							StoreMmfDepartmentT.class, itemId);
					/*
					 */
					tObj.setMmfInQty(new BigDecimal(qtymmf.get(i).toString()));
					tObj
					.setCurrYearMmf(new BigDecimal(qtymmf.get(i)
							.toString()));
					docId = tObj.getStoreMmfDepartmentM().getDocNo();
					tObj.setRemarks(remark.get(i).toString());
					docId = tObj.getStoreMmfDepartmentM().getDocNo();
					hbt.update(tObj);

					tx1.commit();

				}
			} catch (HibernateException e) {
				e.printStackTrace();
			}
		}
		map = getMmfDepartmentData(box);
		map.put("docId", docId);
		return map;
	}
	public Map<String, Object> getCurrentYearMmf(Box box) {/*
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();

		String pvms = null;
		String nomenclature = null;
		String au = null;
		BigDecimal preQtymmf = new BigDecimal(0);
		BigDecimal qtymmf = new BigDecimal(0);
		BigDecimal currQtymmf = new BigDecimal(0);

		String remark = null;

		int id = 0;

		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;

		List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();

		List<StoreMmfDepartmentM> searchStoreMmfDepartmentMList = new ArrayList<StoreMmfDepartmentM>();
		List<StoreMmfDepartmentM> storeMmfDepartmentMList = new ArrayList<StoreMmfDepartmentM>();
		// added by shailesh
		List<StoreMmfDepartmentT> preStoreMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
		// added by shailesh
		List<Integer> mmfDepartmentQntCurrYear = new ArrayList<Integer>();
		String docId = "";

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			StoreMmfDepartmentT storeMmfDepartmentT1 = new StoreMmfDepartmentT();
			int currentYear = box.getInt(MMF_DEPARTMENT_DATE);
			int previousYear = currentYear - 1;
			String mmfNo = box.get("mmfNo");
			departmentList = getHibernateTemplate()
					.find(
							"from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y'");
			approvedByEmployeeList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasEmployee ");
			searchStoreMmfDepartmentMList = session
					.createCriteria(StoreMmfDepartmentM.class)
					.add(Restrictions.eq("StoreWardDept.Id",
											box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
					.add(Restrictions.eq("MmfStoreType", box.get("storeType")))
					.list();

			storeMmfDepartmentMList = session
					.createCriteria(StoreMmfDepartmentM.class)
					.add(Restrictions.eq("MmfForTheYear", box.getInt(MMF_DEPARTMENT_DATE)))
					.add(Restrictions.eq("MmfForTheMonth", box.getInt(MONTH)))
					.add(Restrictions.eq("StoreWardDept.Id",
											box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
					.add(Restrictions.eq("MmfStoreType", box.get("storeType")))
					.list();


			map.put("currentYear", currentYear);
			map.put("storeType", box.get("storeType"));
			map.put("previousYear", previousYear);
			map.put("departmentList", departmentList);
			map.put("approvedByEmployeeList", approvedByEmployeeList);
			map.put("searchStoreMmfDepartmentMList",
					searchStoreMmfDepartmentMList);
			map.put("storeMmfDepartmentMList", storeMmfDepartmentMList);

			map.put("mmfNo", mmfNo);
			if (storeMmfDepartmentMList != null
					&& storeMmfDepartmentMList.size() > 0) {
				map.put("docId", storeMmfDepartmentMList.get(0).getDocNo());
				int approvedId = 0;
				try {
					approvedId = storeMmfDepartmentMList.get(0).getApprovedBy()
							.getId();
				} catch (Exception e) {
					approvedId = 0;
				}
				String remarks = storeMmfDepartmentMList.get(0).getRemarks();
				String preparedBy = storeMmfDepartmentMList.get(0)
						.getPreparedBy();
				String checkedBy = storeMmfDepartmentMList.get(0)
						.getCheckedBy();
				map.put("checkedBy", checkedBy);
				map.put("preparedBy", preparedBy);
				map.put("approvedId", approvedId);
				map.put("remarks", remarks);

				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
				storeMmfDepartmentTList = session
						.createCriteria(StoreMmfDepartmentT.class)
						.createAlias("StoreMmfDepartmentM", "m")
						.add(Restrictions.eq("m.MmfForTheYear", box.getInt(MMF_DEPARTMENT_DATE)))
						.add(Restrictions.eq("m.StoreWardDept.Id",
												box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
						.add(Restrictions.eq("m.MmfStoreType", box.get("storeType"))).list();

                storeMmfDepartmentTList = session
				.createCriteria(StoreMmfDepartmentT.class)
				.createAlias("StoreMmfDepartmentM", "m")
				.add(Restrictions.eq("m.MmfForTheYear", box.getInt(MMF_DEPARTMENT_DATE)))
				.add(Restrictions.eq("m.StoreWardDept.Id",
										box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
			    .add(Restrictions.eq("m.MmfForTheMonth",
										box.getInt(MONTH)))
				.add(Restrictions.eq("m.MmfStoreType", box.get("storeType"))).list();


				if (storeMmfDepartmentTList != null
						&& storeMmfDepartmentTList.size() > 0) {
					int mmfMasterId = storeMmfDepartmentTList.get(0)
							.getStoreMmfDepartmentM().getId();
					map.put("mmfMasterId", mmfMasterId);

				}

				for (Iterator iterator = storeMmfDepartmentTList.iterator(); iterator
						.hasNext();) {
					StoreMmfDepartmentT storeMmfDepartmentT = (StoreMmfDepartmentT) iterator
							.next();

					try {
						id = storeMmfDepartmentT.getId();
					} catch (Exception e) {
						id = 0;
					}

					try {
						pvms = storeMmfDepartmentT.getItem().getPvmsNo();
					} catch (Exception e) {
						pvms = "";
					}

					try {
						nomenclature = storeMmfDepartmentT.getItem()
								.getNomenclature();
					} catch (Exception e) {
						nomenclature = "";
					}

					try {
						au = storeMmfDepartmentT.getItem().getItemConversion()
								.getPurchaseUnit().getUnitName();
					} catch (Exception e) {
						au = "";
					}

					try {
						qtymmf = storeMmfDepartmentT.getMmfInQty();
					} catch (Exception e) {
						qtymmf = new BigDecimal(0);
					}

					try {
						remark = storeMmfDepartmentT.getRemarks();
					} catch (Exception e) {
						remark = "";
					}
					try {
						if (storeMmfDepartmentT.getPreYearMmf() != null)
							preQtymmf = storeMmfDepartmentT.getPreYearMmf();
						else
							preQtymmf = new BigDecimal(0);
					} catch (Exception e) {
						preQtymmf = new BigDecimal(0);
					}

					try {
						if (storeMmfDepartmentT.getCurrYearMmf() != null)
							currQtymmf = storeMmfDepartmentT.getCurrYearMmf();
						else
							currQtymmf = new BigDecimal(0);
					} catch (Exception e) {
						currQtymmf = new BigDecimal(0);
					}
					hData = new HashMap<String, Object>();
					// code for checking that approval for particular item is
					// alredy done
					List<StoreMmfDepartmentT> storeMmfDepartmentTList1 = new ArrayList<StoreMmfDepartmentT>();
					storeMmfDepartmentTList1 = session.createCriteria(
							StoreMmfDepartmentT.class).createAlias(
							"StoreMmfDepartmentM", "m").add(
							Restrictions.eq("m.MmfStoreType", box
									.get("storeType")))
							.add(Restrictions.eq("m.MmfForTheYear", box
									.getInt(MMF_DEPARTMENT_DATE)))
							.add(Restrictions.eq("m.MmfForTheMonth", box
									.getInt(MONTH)))
							.createAlias(
							"Item", "i").add(
							Restrictions.eq("i.Id", storeMmfDepartmentT
									.getItem().getId())).list();

							);
					boolean flag = false;
					// da5a- "+storeMmfDepartmentTList1.size());
					for (StoreMmfDepartmentT storeMmfDepartmentT2 : storeMmfDepartmentTList1) {
						if (storeMmfDepartmentT2.getApprovedStatus() != null
								&& !storeMmfDepartmentT2.getApprovedStatus()
										.equals("")) {
							if (storeMmfDepartmentT2.getApprovedStatus()
									.equalsIgnoreCase("p")) {
								hData.put("approvedStatus", "p");
								flag = true;
							}

						}
						if (flag == true)
							break;

					}

					hData.put("id", id);
					hData.put("pvms", pvms);
					hData.put("nomenclature", nomenclature);
					hData.put("au", au);
					hData.put("qtymmf", qtymmf);
					hData.put("preQtymmf", preQtymmf);
					hData.put("currQtymmf", currQtymmf);

					hData.put("remark", remark);

					vResult.add(hData);
				}
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}

		try {
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);
		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("pagedArray", pagedArray);
		return map;

	 */

		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();

		String pvms = null;
		String nomenclature = null;
		String au = null;
		BigDecimal preQtymmf = new BigDecimal(0);
		BigDecimal qtymmf = new BigDecimal(0);
		BigDecimal currQtymmf = new BigDecimal(0);

		String remark = null;

		int id = 0;

		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;

		List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();

		List<StoreMmfDepartmentM> searchStoreMmfDepartmentMList = new ArrayList<StoreMmfDepartmentM>();
		List<StoreMmfDepartmentM> storeMmfDepartmentMList = new ArrayList<StoreMmfDepartmentM>();
		// added by shailesh
		List<StoreMmfDepartmentT> preStoreMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
		// added by shailesh
		List<Integer> mmfDepartmentQntCurrYear = new ArrayList<Integer>();
		String docId = "";

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			StoreMmfDepartmentT storeMmfDepartmentT1 = new StoreMmfDepartmentT();
			int currentYear = box.getInt(MMF_DEPARTMENT_DATE);
			int previousYear = currentYear - 1;
			String mmfNo = box.get("mmfNo");
			departmentList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y'");
			approvedByEmployeeList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasEmployee ");
			searchStoreMmfDepartmentMList = session
			.createCriteria(StoreMmfDepartmentM.class)
			.add(Restrictions.eq("StoreWardDept.Id",
					box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
					.add(Restrictions.eq("MmfStoreType", box.get("storeType")))
					.list();

			storeMmfDepartmentMList = session
			.createCriteria(StoreMmfDepartmentM.class)
			.add(Restrictions.eq("MmfForTheYear", box.getInt(MMF_DEPARTMENT_DATE)))
			.add(Restrictions.eq("StoreWardDept.Id",
					box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
					.add(Restrictions.eq("MmfStoreType", box.get("storeType")))
					.list();
			/*
			 * storeMmfDepartmentMList.size());
			 */
			map.put("currentYear", currentYear);
			map.put("storeType", box.get("storeType"));
			map.put("previousYear", previousYear);
			map.put("departmentList", departmentList);
			map.put("approvedByEmployeeList", approvedByEmployeeList);
			map.put("searchStoreMmfDepartmentMList",
					searchStoreMmfDepartmentMList);
			map.put("storeMmfDepartmentMList", storeMmfDepartmentMList);

			map.put("mmfNo", mmfNo);
			if (storeMmfDepartmentMList != null
					&& storeMmfDepartmentMList.size() > 0) {
				map.put("docId", storeMmfDepartmentMList.get(0).getDocNo());
				int approvedId = 0;
				try {
					approvedId = storeMmfDepartmentMList.get(0).getApprovedBy()
					.getId();
				} catch (Exception e) {
					approvedId = 0;
				}
				String remarks = storeMmfDepartmentMList.get(0).getRemarks();
				String preparedBy = storeMmfDepartmentMList.get(0)
				.getPreparedBy();
				String checkedBy = storeMmfDepartmentMList.get(0)
				.getCheckedBy();
				map.put("checkedBy", checkedBy);
				map.put("preparedBy", preparedBy);
				map.put("approvedId", approvedId);
				map.put("remarks", remarks);

				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);

				storeMmfDepartmentTList = session
				.createCriteria(StoreMmfDepartmentT.class)
				.createAlias("StoreMmfDepartmentM", "m")
				.add(Restrictions.eq("m.MmfForTheYear", box.getInt(MMF_DEPARTMENT_DATE)))
				.add(Restrictions.eq("m.StoreWardDept.Id",
						box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
						.add(Restrictions.eq("m.MmfStoreType", box.get("storeType"))).list();

				if (storeMmfDepartmentTList != null
						&& storeMmfDepartmentTList.size() > 0) {
					int mmfMasterId = storeMmfDepartmentTList.get(0)
					.getStoreMmfDepartmentM().getId();
					map.put("mmfMasterId", mmfMasterId);

				}

				for (Iterator iterator = storeMmfDepartmentTList.iterator(); iterator
				.hasNext();) {
					StoreMmfDepartmentT storeMmfDepartmentT = (StoreMmfDepartmentT) iterator
					.next();

					try {
						id = storeMmfDepartmentT.getId();
					} catch (Exception e) {
						id = 0;
					}

					try {
						pvms = storeMmfDepartmentT.getItem().getPvmsNo();
					} catch (Exception e) {
						pvms = "";
					}

					try {
						nomenclature = storeMmfDepartmentT.getItem()
						.getNomenclature();
					} catch (Exception e) {
						nomenclature = "";
					}

					try {
						au = storeMmfDepartmentT.getItem().getItemConversion()
						.getPurchaseUnit().getUnitName();
					} catch (Exception e) {
						au = "";
					}

					try {
						qtymmf = storeMmfDepartmentT.getMmfInQty();
					} catch (Exception e) {
						qtymmf = new BigDecimal(0);
					}

					try {
						remark = storeMmfDepartmentT.getRemarks();
					} catch (Exception e) {
						remark = "";
					}
					try {
						if (storeMmfDepartmentT.getPreYearMmf() != null)
							preQtymmf = storeMmfDepartmentT.getPreYearMmf();
						else
							preQtymmf = new BigDecimal(0);
					} catch (Exception e) {
						preQtymmf = new BigDecimal(0);
					}

					try {
						if (storeMmfDepartmentT.getCurrYearMmf() != null)
							currQtymmf = storeMmfDepartmentT.getCurrYearMmf();
						else
							currQtymmf = new BigDecimal(0);
					} catch (Exception e) {
						currQtymmf = new BigDecimal(0);
					}
					hData = new HashMap<String, Object>();
					// code for checking that approval for particular item is
					// alredy done
					List<StoreMmfDepartmentT> storeMmfDepartmentTList1 = new ArrayList<StoreMmfDepartmentT>();
					storeMmfDepartmentTList1 = session.createCriteria(
							StoreMmfDepartmentT.class).createAlias(
									"StoreMmfDepartmentM", "m").add(
											Restrictions.eq("m.MmfStoreType", box
													.get("storeType"))).add(
															Restrictions.eq("m.MmfForTheYear", box
																	.getInt(MMF_DEPARTMENT_DATE))).createAlias(
																			"Item", "i").add(
																					Restrictions.eq("i.Id", storeMmfDepartmentT
																							.getItem().getId())).list();
					boolean flag = false;
					for (StoreMmfDepartmentT storeMmfDepartmentT2 : storeMmfDepartmentTList1) {
						if (storeMmfDepartmentT2.getApprovedStatus() != null
								&& !storeMmfDepartmentT2.getApprovedStatus()
								.equals("")) {
							if (storeMmfDepartmentT2.getApprovedStatus()
									.equalsIgnoreCase("p")) {
								hData.put("approvedStatus", "p");
								flag = true;
							}

						}
						if (flag == true)
							break;

					}

					hData.put("id", id);
					hData.put("pvms", pvms);
					hData.put("nomenclature", nomenclature);
					hData.put("au", au);
					hData.put("qtymmf", qtymmf);
					hData.put("preQtymmf", preQtymmf);
					hData.put("currQtymmf", currQtymmf);

					hData.put("remark", remark);

					vResult.add(hData);
				}
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}

		try {
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);
		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("pagedArray", pagedArray);
		return map;
	}

	public Map<String, Object> deleteGridItemsForMmf(Box box) {/*
		Session session = (Session) getSession();
		List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
		List<StoreMmfDepartmentT> storeMmfDepartmentTList1 = new ArrayList<StoreMmfDepartmentT>();
		List<StoreMmfDepartmentT> storeMmfDepartmentMList = new ArrayList<StoreMmfDepartmentT>();
		StoreMmfDepartmentT storeMmfDepartmentT = new StoreMmfDepartmentT();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			HibernateTemplate hbt = getHibernateTemplate();

			Vector srno = box.getVector("srno");
			// Vector annreq = box.getVector(TENDER_ANNREQ);
			Vector items = box.getVector("id");
			Vector delete = box.getVector(ITEMS_TO_BE_DELETED);

			storeMmfDepartmentMList = session
					.createCriteria(StoreMmfDepartmentM.class)
					.add(Restrictions.eq("MmfForTheYear", box
									.getInt(MMF_DEPARTMENT_DATE)))
					.add(Restrictions.eq("MmfForTheMonth", box
									.getInt(MONTH)))
					.add(
							Restrictions
									.eq(
											"StoreWardDept.Id",
											box
													.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
					.add(Restrictions.eq("MmfStoreType", box.get("storeType")))
					.list();

			storeMmfDepartmentTList1 = session
					.createCriteria(StoreMmfDepartmentT.class)
					.createAlias("StoreMmfDepartmentM", "m")
					.add(
							Restrictions.eq("m.MmfForTheYear", box
									.getInt(MMF_DEPARTMENT_DATE)))
					.add(
							Restrictions.eq("m.MmfForTheMonth", box
									.getInt(MONTH)))
					.add(
							Restrictions
									.eq(
											"m.StoreWardDept.Id",
											box
													.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
					.add(
							Restrictions.eq("m.MmfStoreType", box
									.get("storeType"))).list();
			String obj = null;
			for (int i = 0; i < delete.size(); i++) {
				int itemId = Integer.parseInt(delete.get(i).toString());
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
				// String hql="delete from
				// jkt.hms.masters.business.StoreMmfDepartmentT as a where
				// a.Item.Id = "+itemId;
				String hql = "delete from jkt.hms.masters.business.StoreMmfDepartmentT as a where a.Id like :itemId";
				Query query = session.createQuery(hql).setParameter("itemId",
						itemId);
				int row = query.executeUpdate();

			}
			if (storeMmfDepartmentTList1.size() == delete.size()) {
				int StoreMmfDepartmentMId = storeMmfDepartmentTList1.get(0)
						.getStoreMmfDepartmentM().getId();
				String hql = "delete from jkt.hms.masters.business.StoreMmfDepartmentM as a where a.Id like :itemId";
				Query query = session.createQuery(hql).setParameter("itemId",
						StoreMmfDepartmentMId);
				int row = query.executeUpdate();
			}
			map.put("total_records", srno.size());
			map.put("deleted_records", delete.size());
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		if (Integer.parseInt(map.get("total_records").toString()) == Integer
				.parseInt(map.get("deleted_records").toString())) {
			if (box.getInt("currPage") > 1)
				box.put("currPage", box.getInt("currPage") - 1);
		}
		box.remove("pvmsNo");

		map = getMmfDepartmentData(box);
		return map;

	 */
		Session session = (Session) getSession();
		List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
		List<StoreMmfDepartmentT> storeMmfDepartmentTList1 = new ArrayList<StoreMmfDepartmentT>();
		List<StoreMmfDepartmentT> storeMmfDepartmentMList = new ArrayList<StoreMmfDepartmentT>();
		StoreMmfDepartmentT storeMmfDepartmentT = new StoreMmfDepartmentT();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			HibernateTemplate hbt = getHibernateTemplate();

			Vector srno = box.getVector("srno");
			// Vector annreq = box.getVector(TENDER_ANNREQ);
			Vector items = box.getVector("id");
			Vector delete = box.getVector(ITEMS_TO_BE_DELETED);

			storeMmfDepartmentMList = session
			.createCriteria(StoreMmfDepartmentM.class)
			.add(
					Restrictions.eq("MmfForTheYear", box
							.getInt(MMF_DEPARTMENT_DATE)))
							.add(
									Restrictions
									.eq(
											"StoreWardDept.Id",
											box
											.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
											.add(Restrictions.eq("MmfStoreType", box.get("storeType")))
											.list();

			storeMmfDepartmentTList1 = session
			.createCriteria(StoreMmfDepartmentT.class)
			.createAlias("StoreMmfDepartmentM", "m")
			.add(
					Restrictions.eq("m.MmfForTheYear", box
							.getInt(MMF_DEPARTMENT_DATE)))
							.add(
									Restrictions
									.eq(
											"m.StoreWardDept.Id",
											box
											.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
											.add(
													Restrictions.eq("m.MmfStoreType", box
															.get("storeType"))).list();
			String obj = null;
			for (int i = 0; i < delete.size(); i++) {
				int itemId = Integer.parseInt(delete.get(i).toString());
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
				// String hql="delete from
				// jkt.hms.masters.business.StoreMmfDepartmentT as a where
				// a.Item.Id = "+itemId;
				String hql = "delete from jkt.hms.masters.business.StoreMmfDepartmentT as a where a.Id like :itemId";
				Query query = session.createQuery(hql).setParameter("itemId",
						itemId);
				int row = query.executeUpdate();

			}
			if (storeMmfDepartmentTList1.size() == delete.size()) {
				int StoreMmfDepartmentMId = storeMmfDepartmentTList1.get(0)
				.getStoreMmfDepartmentM().getId();
				String hql = "delete from jkt.hms.masters.business.StoreMmfDepartmentM as a where a.Id like :itemId";
				Query query = session.createQuery(hql).setParameter("itemId",
						StoreMmfDepartmentMId);
				int row = query.executeUpdate();
			}
			map.put("total_records", srno.size());
			map.put("deleted_records", delete.size());
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		if (Integer.parseInt(map.get("total_records").toString()) == Integer
				.parseInt(map.get("deleted_records").toString())) {
			if (box.getInt("currPage") > 1)
				box.put("currPage", box.getInt("currPage") - 1);
		}
		box.remove("pvmsNo");

		map = getMmfDepartmentData(box);
		return map;


	}

	// ---------------------------------- Physical
	// Stock----------------------------------------

	public Map<String, Object> searchPhysicalStock(int departmentId) {
		List<StoreStockTakingT> searchStoreStockTakingTList = new ArrayList<StoreStockTakingT>();
		List<StoreStockTakingM> searchStoreStockTakingMList = new ArrayList<StoreStockTakingM>();
		List<MasDepartment> searchMasDepartmentList = new ArrayList<MasDepartment>();
		List<StoreItemBatchStock> searchStoreItemBatchStockList = new ArrayList<StoreItemBatchStock>();
		Map<String, Object> indentTFieldsMap = new HashMap<String, Object>();
		try {
			if ((departmentId != 0)) {
				searchStoreStockTakingTList = getHibernateTemplate()
				.find(
						"from jkt.hms.masters.business.StoreStockTakingT as SST where SST.StockTakingM.Department.Id='"
						+ departmentId + "'");
				searchMasDepartmentList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.MasDepartment as md");
				searchStoreItemBatchStockList = getHibernateTemplate()
				.find(
						"from jkt.hms.masters.business.StoreItemBatchStock as stb where stb.Department.Id= '"
						+ departmentId + "'");
				searchStoreStockTakingMList = getHibernateTemplate()
				.find(
						"from jkt.hms.masters.business.StoreStockTakingM as SST ");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		indentTFieldsMap.put("searchStoreStockTakingTList",
				searchStoreStockTakingTList);
		indentTFieldsMap.put("searchStoreItemBatchStockList",
				searchStoreItemBatchStockList);
		indentTFieldsMap
		.put("searchMasDepartmentList", searchMasDepartmentList);
		indentTFieldsMap.put("searchStoreStockTakingMList",
				searchStoreStockTakingMList);

		return indentTFieldsMap;
	}

	public boolean addPhysicalStock(StoreStockTakingM storeStockTakingM,
			List<StoreStockTakingT> storeStockTakingTlist) {
		boolean successfullyAdded = false;
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {
			hbt.save(storeStockTakingM);
		} catch (Exception e) {
			e.printStackTrace();
		}

		try {

			if (storeStockTakingTlist.size() > 0) {
				for (int i = 0; i < storeStockTakingTlist.size(); i++) {
					StoreStockTakingT storeStockTakingTObj = new StoreStockTakingT();
					storeStockTakingTObj = (StoreStockTakingT) storeStockTakingTlist
					.get(i);
					storeStockTakingTObj.setStockTakingM(storeStockTakingM);
					hbt.save(storeStockTakingTObj);
				}

			}
			successfullyAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;

	}

	public boolean addPhysicalStock11(StoreStockTakingM storeStockTakingM,
			List<StoreStockTakingT> storeStockTakingTlist,
			Map<String, Object> map) {

		boolean successfullyAdded = false;
		@SuppressWarnings("unused")
		int pageNo = 0;
		StoreStockTakingM storeStockTakingM2 = new StoreStockTakingM();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

		if (!(map.get("headerStored") + "").equals("yes")) {
			try {
				hbt.save(storeStockTakingM);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		try {
			if (storeStockTakingTlist.size() > 0) {
				if ((map.get("headerStored") + "").equals("yes")) {
					int id = Integer.parseInt("" + map.get("physicalStockId"));
					storeStockTakingM2.setId(id);
				}
				for (int i = 0; i < storeStockTakingTlist.size(); i++) {
					StoreStockTakingT storeStockTakingTObj = new StoreStockTakingT();
					storeStockTakingTObj = (StoreStockTakingT) storeStockTakingTlist
					.get(i);
					if ((map.get("headerStored") + "").equals("yes")) {
						storeStockTakingTObj
						.setStockTakingM(storeStockTakingM2);
					} else {
						storeStockTakingTObj.setStockTakingM(storeStockTakingM);
					}
					hbt.save(storeStockTakingTObj);
				}

			}
			successfullyAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;

	}

	public boolean updatePhysicalStock(StoreStockTakingM storeStockTakingM,
			List<StoreStockTakingT> storeStockTakingTlist) {
		boolean successfullyAdded = false;
		StoreStockTakingM storeStockTakingM2 = new StoreStockTakingM();
		storeStockTakingM2 = storeStockTakingM;
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");

		hbt.setCheckWriteOperations(false);

		try {

			hbt.update(storeStockTakingM2);
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {

			if (storeStockTakingTlist.size() > 0) {
				for (int i = 0; i < storeStockTakingTlist.size(); i++) {
					StoreStockTakingT storeStockTakingTObj = new StoreStockTakingT();
					storeStockTakingTObj = (StoreStockTakingT) storeStockTakingTlist
					.get(i);
					hbt.update(storeStockTakingTObj);
				}

			}
			successfullyAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;
	}

	public Map<String, Object> showAdjustment1(Box box) {

		Map<String, Object> map = new HashMap<String, Object>();

		List<StoreAdjustmentM> searchStoreAdjustmentMList = new ArrayList<StoreAdjustmentM>();
		List<StoreAdjustmentT> searchStoreAdjustmentTList = new ArrayList<StoreAdjustmentT>();
		List<MasDepartment> searchMasDepartmentList = new ArrayList<MasDepartment>();
		List<StoreStockTakingM> searchStoreStockTakingMList = new ArrayList<StoreStockTakingM>();
		List<StoreStockTakingT> searchStoreStockTakingTList = new ArrayList<StoreStockTakingT>();
		List<StoreItemBatchStock> searchStoreItemBatchStockList = new ArrayList<StoreItemBatchStock>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		boolean adjustmentRecordExists = false ;
		String max = "";
		String startNo = "";
		String no = "";
		String empty = "false";
		int physicalStockMId = 0;
		Session session = (Session) getSession();
		try {
			if ((box.getInt("departmentId") != 0 && box.get("physicalStockMDate") != null)) {
				SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
				String date4MySQL1 = formatterOut.format(formatterIn.parse(box.getString("physicalStockMDate")));
				java.sql.Date physicalDate = java.sql.Date.valueOf(date4MySQL1);

				String date =formatterIn.parse(box.getString("physicalStockMDate")).toString();

				/*searchStoreStockTakingMList = getHibernateTemplate()
						.find("from jkt.hms.masters.business.StoreStockTakingM as SST where SST.Department.Id = "
								+ box.getInt("departmentId")
								+ " and SST.PhysicalDate = '"
								+ date
								+ "'");*/
				searchStoreStockTakingMList=session.createCriteria(StoreStockTakingM.class)
				.add(Restrictions.eq("Department.Id", box.getInt("departmentId")))
				.add(Restrictions.eq("PhysicalDate", physicalDate)).list();
				// searchStoreAdjustmentMList =
				// getHibernateTemplate().find("from
				// jkt.hms.masters.business.StoreAdjustmentM as md where
				// md.Department.Id = "+box.getInt("departmentId"));
				// searchStoreAdjustmentTList =
				// getHibernateTemplate().find("from
				// jkt.hms.masters.business.StoreAdjustmentT as md");
				// searchMasDepartmentList = getHibernateTemplate().find("from
				// jkt.hms.masters.business.MasDepartment as md where md.Status
				// = 'y'");
				searchStoreItemBatchStockList = getHibernateTemplate()
				.find("from jkt.hms.masters.business.StoreItemBatchStock");
				storeFyDocumentNoList = getHibernateTemplate()
				.find("from jkt.hms.masters.business.StoreFyDocumentNo as inp where inp.Department.Id = "
						+ box.getInt("departmentId"));
				for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
					if (storeFyDocumentNo.getDepartment().getId() == box
							.getInt("departmentId")) {
						no = ("" + storeFyDocumentNo.getAdjustmentNo());
					}
				}

				/*
				 * searchStoreStockTakingTList =
				 * getHibernateTemplate().find("from
				 * jkt.hms.masters.business.StoreStockTakingT as SST where
				 * SST.StockTakingM.Department.Id='"+ departmentId + "'and
				 * SST.StockTakingM.PhysicalDate='"+ physicalDate + "'");
				 * searchStoreStockTakingTList.size()); StoreStockTakingT
				 * stockTakingT = (StoreStockTakingT)
				 * searchStoreStockTakingTList.get(0); physicalStockMId =
				 * stockTakingT.getStockTakingM().getId();
				 *
				 *
				 * if (searchStoreStockTakingTList.size() == 0) { empty =
				 * "false"; } else { empty = "true"; }
				 */

				int pageno = 1;
				int numOfRows = 5;
				try {
					if (box.get("pageno") != null) {
						pageno = Integer.parseInt(box.getString("pageno"));
					}
				} catch (Exception e) {
					// e.printStackTrace();
					pageno = 1;
				}

				try {
					if (box.get("numOfRows") != null) {
						numOfRows = Integer
						.parseInt(box.getString("numOfRows"));
					}
				} catch (Exception e) {
					numOfRows = 5;
				}

				map.put("pageno", pageno);

				int first = (pageno - 1) * numOfRows;
				int totalRecords = 0;
				if (searchStoreStockTakingMList != null
						&& searchStoreStockTakingMList.size() > 0) {
					StoreStockTakingM mObj = (StoreStockTakingM) searchStoreStockTakingMList.get(0);
					physicalStockMId = mObj.getId();

					String qry = "SELECT count(*) FROM store_stock_taking_t where stock_taking_m_id = "
						+ physicalStockMId ;
					String queryForNumber = "SELECT count(*) FROM store_stock_taking_t where stock_taking_m_id = "
						+ physicalStockMId +" and ( stock_surplus > 0 or stock_deficient > 0 ) ";
					try {
						totalRecords = Integer.parseInt(session.createSQLQuery(qry).list().get(0).toString());
						int stocktakingforadjustmentcount = Integer.parseInt(session.createSQLQuery(queryForNumber).list().get(0).toString());

						if(stocktakingforadjustmentcount ==0){
							adjustmentRecordExists = true ;
						}else {
							adjustmentRecordExists=false;
						}


					} catch (Exception e) {
						totalRecords = 0;
					}
					map.put("totalRecords", totalRecords);
					map.put("adjustmentRecordExists", adjustmentRecordExists);

					double totalPages = 0.0;
					totalPages = (double) totalRecords / (double) numOfRows;
					Double d = new Double(Math.ceil(totalPages));
					map.put("totalPages", d.intValue());

					Criteria c = session
					.createCriteria(StoreStockTakingT.class).createAlias("StockTakingM", "stm")
					.add(Restrictions.eq("stm.Id",physicalStockMId)).add(Restrictions.eq("stm.Department.Id",  box.getInt("departmentId")))
					//comment By Tirath	.addOrder(Order.desc("Item.Id")).add(Restrictions.gt("ComputedStock", (new BigDecimal(0))));
					.addOrder(Order.desc("Item.Id"));

					c.setFirstResult(first);
					c.setMaxResults(numOfRows);
					searchStoreStockTakingTList = c.list();
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			max = getMaxNo(no);
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("searchStoreStockTakingMList", searchStoreStockTakingMList);
		map.put("searchStoreStockTakingTList", searchStoreStockTakingTList);
		map.put("searchStoreItemBatchStockList", searchStoreItemBatchStockList);
		map.put("physicalStockMId", physicalStockMId);
		map.put("physicalStockMDate", box.get("physicalStockMDate"));
		map.put("max", max);
		return map;

	}

	/*public boolean addAdjustment(Box box) {
		List<StoreStockTakingM> storeStockTakingMList = new ArrayList<StoreStockTakingM>();
		List<StoreStockTakingT> storeStockTakingTList = new ArrayList<StoreStockTakingT>();
		List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
		StoreAdjustmentM storeAdjustmentM = new StoreAdjustmentM();
		StoreAdjustmentT storeAdjustmentT = new StoreAdjustmentT();
		int buffersize = 0 ;
		boolean flag = false;
		Transaction tx = null;
		Session session = (Session) getSession();
		try {
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
			String date4MySQL1 = formatterOut.format(formatterIn.parse(box
					.getString(RequestConstants.ADJUSTMENT_DATE)));
			String date4MySQL2 = formatterOut.format(formatterIn.parse(box
					.getString(RequestConstants.CHANGED_DATE)));
			java.sql.Date adjustmentDate = java.sql.Date.valueOf(date4MySQL1);
			java.sql.Date changedDate = java.sql.Date.valueOf(date4MySQL2);

			storeAdjustmentM = new StoreAdjustmentM();
			storeAdjustmentM.setAdjustmentNo(box.get(RequestConstants.ADJUSTMENT_NO));
			storeAdjustmentM.setAdjustmentDate(adjustmentDate);
			storeAdjustmentM.setReason(box.getString(RequestConstants.REASON));
			storeAdjustmentM.setDepartment(new MasDepartment(box.getInt(DEPARTMENT_ID)));
			storeAdjustmentM.setHospital(new MasHospital(box.getInt(RequestConstants.HOSPITAL_ID)));
			storeAdjustmentM.setRemarks(box.getString(REMARKS));
			storeAdjustmentM.setLastChangedBy(box.getString(CHANGED_BY));
			storeAdjustmentM.setLastChangedDate(changedDate);
			storeAdjustmentM.setApprovedBy(box.getString(RequestConstants.APPROVED_BY_EMPLOYEE_ID_ADJUSTMENT));
			storeAdjustmentM.setLastChangedTime(box.getString(CHANGED_TIME));
			storeAdjustmentM.setStatus("o");
			storeAdjustmentM.setStoreStockTakingM(
					new StoreStockTakingM(box.getInt(RequestConstants.PHYSICAL_STOCK_ID_ID)));
			hbt.save(storeAdjustmentM);
			hbt.refresh(storeAdjustmentM);
			StoreFyDocumentNo storeFyDocumentNo =(StoreFyDocumentNo) session.createCriteria(StoreFyDocumentNo.class)
													.createAlias("Department", "dept")
													.add(Restrictions.eq("dept.Id", box.getInt(DEPARTMENT_ID))).list().get(0);
			int adjustmentNo = Integer.parseInt(storeFyDocumentNo.getAdjustmentNo())+1 ;
			storeFyDocumentNo.setAdjustmentNo(String.valueOf(adjustmentNo));
			hbt.saveOrUpdate(storeFyDocumentNo);
			hbt.refresh(storeFyDocumentNo);
			storeStockTakingTList = session.createCriteria(
					StoreStockTakingT.class)
					.add(Restrictions.eq("StockTakingM.Id", box.getInt(RequestConstants.PHYSICAL_STOCK_ID_ID)))
					.addOrder(Order.asc("Item.Id")).list();

			if (storeStockTakingTList != null
					&& storeStockTakingTList.size() > 0) {
				int slno = 1;
				for (Iterator iterator = storeStockTakingTList.iterator(); iterator
				.hasNext();) {
					StoreStockTakingT storeStockTakingT = (StoreStockTakingT) iterator
					.next();
					storeAdjustmentT = new StoreAdjustmentT();
					storeAdjustmentT.setSlNo(slno++);
					storeAdjustmentT.setItem(storeStockTakingT.getItem());
					storeAdjustmentT.setBrand(storeStockTakingT.getBrand());
					storeAdjustmentT.setBatchNo(storeStockTakingT.getBatchNo());
					storeAdjustmentT.setExpiryDate(storeStockTakingT.getExpiryDate());
					storeAdjustmentT.setAdjustQty(storeStockTakingT.getStoreStockService().subtract(storeStockTakingT.getComputedStock()));
					storeAdjustmentT.setAdjust(storeAdjustmentM);

					session.save(storeAdjustmentT);

					if (storeStockTakingT.getItemBatchStock() != null) {
						storeItemBatchStockList = session.createCriteria(
								StoreItemBatchStock.class).add(Restrictions.eq("Id", storeStockTakingT
										.getItemBatchStock().getId())).list();
						if (storeItemBatchStockList != null
								&& storeItemBatchStockList.size() > 0) {
							StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock) storeItemBatchStockList
							.get(0);
							BigDecimal closingStock = (BigDecimal) storeItemBatchStock.getClosingStock();
							BigDecimal difference = storeStockTakingT.getStoreStockService().subtract(
									storeStockTakingT.getComputedStock());
							BigDecimal finalStock = closingStock.add(storeStockTakingT.getStoreStockService());

							storeItemBatchStock.setAdjustQty(difference);
							storeItemBatchStock.setClosingStock(storeStockTakingT.getStoreStockService());

							session.update(storeItemBatchStock);

						}
					} else {
						// Add Items which are not in Item Batch Stock
						StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
						storeItemBatchStock.setItem(storeStockTakingT.getItem());
						storeItemBatchStock.setBatchNo(storeStockTakingT.getBatchNo());
						storeItemBatchStock.setDepartment(storeStockTakingT
								.getStockTakingM().getDepartment());
						storeItemBatchStock.setExpiryDate(storeStockTakingT.getExpiryDate());
						storeItemBatchStock.setOpeningBalanceDate(changedDate);
						storeItemBatchStock.setOpeningBalanceQty(
								storeStockTakingT.getStoreStockService()
								.subtract(storeStockTakingT.getComputedStock()));
						storeItemBatchStock.setAdjustQty(storeStockTakingT.getStoreStockService().subtract(
								storeStockTakingT.getComputedStock()));
						BigDecimal compStock = storeStockTakingT
						.getComputedStock();
						BigDecimal defi = storeStockTakingT.getStockDeficient();
						BigDecimal surplus = storeStockTakingT
						.getStockSurplus();
						BigDecimal finalStock = compStock.add(surplus).subtract(defi);
						//storeItemBatchStock.setClosingStock(finalStock);
						storeItemBatchStock.setClosingStock(storeStockTakingT.getStoreStockService());
						storeItemBatchStock.setCostPrice(storeStockTakingT
								.getCostPrice());
						storeItemBatchStock.setBrand(storeStockTakingT
								.getBrand());

						session.save(storeItemBatchStock);

					}
					buffersize++;
					if(buffersize%60==0){
						session.flush();
						session.clear();
					}

				}
			}
			if (storeStockTakingTList != null
					&& storeStockTakingTList.size() > 0) {
				StoreStockTakingM stockM = storeStockTakingTList.get(0)
				.getStockTakingM();
				stockM.setStatus("p");
				hbt.update(stockM);
			}

			tx.commit();

			flag = true;
		} catch (Exception e) {
			e.printStackTrace();
			if (tx != null) {
				tx.rollback();
			}
		}
		return flag;
	}
	 */
	public boolean addAdjustment1(Box box ){
		return true ;
	}
	public boolean addAdjustment(Box box)
	{
		List<StoreStockTakingM> storeStockTakingMList = new ArrayList<StoreStockTakingM>();
		List<StoreStockTakingT> storeStockTakingTList = new ArrayList<StoreStockTakingT>();
		List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
		StoreAdjustmentM storeAdjustmentM = new StoreAdjustmentM();
		StoreAdjustmentT storeAdjustmentT = new StoreAdjustmentT();
		boolean flag = false;

		session = (Session) getSession();
		Transaction tx = null;

		try {
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
			String date4MySQL1 = formatterOut.format(formatterIn.parse(box
					.getString(RequestConstants.ADJUSTMENT_DATE)));
			String date4MySQL2 = formatterOut.format(formatterIn.parse(box
					.getString(RequestConstants.CHANGED_DATE)));
			java.sql.Date adjustmentDate = java.sql.Date.valueOf(date4MySQL1);
			java.sql.Date changedDate = java.sql.Date.valueOf(date4MySQL2);

			storeAdjustmentM = new StoreAdjustmentM();
			storeAdjustmentM.setAdjustmentNo(box
					.get(RequestConstants.ADJUSTMENT_NO));
			storeAdjustmentM.setAdjustmentDate(adjustmentDate);
			storeAdjustmentM.setReason(box.getString(RequestConstants.REASON));
			storeAdjustmentM.setDepartment(new MasDepartment(box
					.getInt(DEPARTMENT_ID)));
			storeAdjustmentM.setHospital(new MasHospital(box
					.getInt(RequestConstants.HOSPITAL_ID)));
			storeAdjustmentM.setRemarks(box.getString(REMARKS));
			storeAdjustmentM.setLastChangedBy(box.getString(CHANGED_BY));
			storeAdjustmentM.setLastChangedDate(changedDate);
			storeAdjustmentM
			.setApprovedBy(box
					.getString(RequestConstants.APPROVED_BY_EMPLOYEE_ID_ADJUSTMENT));
			storeAdjustmentM.setLastChangedTime(box.getString(CHANGED_TIME));
			storeAdjustmentM.setStatus("o");
			storeAdjustmentM.setStoreStockTakingM(new StoreStockTakingM(box
					.getInt(RequestConstants.PHYSICAL_STOCK_ID_ID)));
			hbt.save(storeAdjustmentM);

			storeStockTakingTList = session
			.createCriteria(StoreStockTakingT.class)
			.add(Restrictions.eq("StockTakingM.Id",
					box.getInt(RequestConstants.PHYSICAL_STOCK_ID_ID)))
					.addOrder(Order.asc("Item.Id")).list();

			if (storeStockTakingTList != null
					&& storeStockTakingTList.size() > 0) {
				int slno = 1;
				for (Iterator iterator = storeStockTakingTList.iterator(); iterator
				.hasNext();) {
					StoreStockTakingT storeStockTakingT = (StoreStockTakingT) iterator
					.next();
					if(storeStockTakingT.getStoreStockService().subtract(storeStockTakingT.getComputedStock()).compareTo(new BigDecimal(0)) != 0){
						storeAdjustmentT = new StoreAdjustmentT();
						storeAdjustmentT.setSlNo(slno++);
						storeAdjustmentT.setItem(storeStockTakingT.getItem());
						// storeAdjustmentT.setBrand(storeStockTakingT.getBrand());
						storeAdjustmentT.setBatchNo(storeStockTakingT.getBatchNo());
						storeAdjustmentT.setExpiryDate(storeStockTakingT
								.getExpiryDate());
						if (storeStockTakingT.getStoreStockService() != null
								&& storeStockTakingT.getComputedStock() != null) {

							storeAdjustmentT.setAdjustQty(storeStockTakingT
									.getStoreStockService().subtract(
											storeStockTakingT.getComputedStock()));
						} else {
							storeAdjustmentT.setAdjustQty(new BigDecimal(0.00));
						}
						storeAdjustmentT.setAdjust(storeAdjustmentM);
						hbt.save(storeAdjustmentT);
						hbt.refresh(storeAdjustmentT);

						if (storeStockTakingT.getItemBatchStock() != null) {
							storeItemBatchStockList = session
							.createCriteria(StoreItemBatchStock.class)
							.add(Restrictions.eq("Id", storeStockTakingT
									.getItemBatchStock().getId())).list();

							if (storeItemBatchStockList != null
									&& storeItemBatchStockList.size() > 0) {
								StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock) storeItemBatchStockList
								.get(0);
								BigDecimal closingStock = (BigDecimal) storeItemBatchStock
								.getClosingStock();
								BigDecimal difference = new BigDecimal(0.00);
								if (storeStockTakingT.getStoreStockService() != null
										&& storeStockTakingT.getComputedStock() != null) {
									difference = storeStockTakingT
									.getStoreStockService().subtract(
											storeStockTakingT
											.getComputedStock());
								}
								BigDecimal finalStock = closingStock
								.add(difference);

								storeItemBatchStock.setAdjustQty(difference);
								storeItemBatchStock.setClosingStock(finalStock);
								hbt.update(storeItemBatchStock);
								hbt.refresh(storeItemBatchStock);
							}
						} else {

							List<StoreItemBatchStock> storeItemBatchStockList1 = session
							.createCriteria(StoreItemBatchStock.class)
							.add(Restrictions.eq("Department.Id",
									storeStockTakingT.getStockTakingM()
									.getDepartment().getId()))
									.add(Restrictions.eq("BatchNo",
											storeStockTakingT.getBatchNo()))
											.add(Restrictions.eq("Item.Id",
													storeStockTakingT.getItem().getId()))
													.list();
							if (storeItemBatchStockList1 != null
									&& storeItemBatchStockList1.size() > 0) {
								StoreItemBatchStock storeItemBatchStock1 = new StoreItemBatchStock();
								storeItemBatchStock1 = storeItemBatchStockList1
								.get(0);
								try {
									BigDecimal adjustQty = storeItemBatchStock1
									.getAdjustQty();
									storeItemBatchStock1
									.setAdjustQty(adjustQty
											.add(storeStockTakingT
													.getStoreStockService()
													.subtract(
															storeStockTakingT
															.getComputedStock())));
								} catch (Exception e) {
									storeItemBatchStock1
									.setAdjustQty(storeStockTakingT
											.getStoreStockService()
											.subtract(
													storeStockTakingT
													.getComputedStock()));
								}
								BigDecimal compStock = storeStockTakingT
								.getComputedStock();
								BigDecimal defi = storeStockTakingT
								.getStockDeficient();
								BigDecimal surplus = storeStockTakingT
								.getStockSurplus();
								BigDecimal finalStock = compStock.add(surplus)
								.subtract(defi);
								try {
									BigDecimal closingStock = storeItemBatchStock1
									.getClosingStock();
									storeItemBatchStock1.setClosingStock(finalStock
											.add(closingStock));
								} catch (Exception e) {
									storeItemBatchStock1
									.setClosingStock(finalStock);
								}
								hbt.update(storeItemBatchStock1);
								hbt.refresh(storeItemBatchStock1);
							} else {
								// Add Items which are not in Item Batch Stock
								StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
								storeItemBatchStock.setItem(storeStockTakingT
										.getItem());
								storeItemBatchStock.setBatchNo(storeStockTakingT
										.getBatchNo());
								storeItemBatchStock.setDepartment(storeStockTakingT
										.getStockTakingM().getDepartment());
								storeItemBatchStock.setExpiryDate(storeStockTakingT
										.getExpiryDate());
								storeItemBatchStock
								.setOpeningBalanceDate(changedDate);
								storeItemBatchStock
								.setOpeningBalanceQty(storeStockTakingT
										.getStoreStockService()
										.subtract(
												storeStockTakingT
												.getComputedStock()));
								storeItemBatchStock.setAdjustQty(storeStockTakingT
										.getStoreStockService().subtract(
												storeStockTakingT
												.getComputedStock()));

								BigDecimal compStock = storeStockTakingT
								.getComputedStock();
								BigDecimal defi = storeStockTakingT
								.getStockDeficient();
								BigDecimal surplus = storeStockTakingT
								.getStockSurplus();
								BigDecimal finalStock = compStock.add(surplus)
								.subtract(defi);

								storeItemBatchStock.setClosingStock(finalStock);
								storeItemBatchStock.setCostPrice(storeStockTakingT
										.getCostPrice());
								// storeItemBatchStock.setBrand(storeStockTakingT.getBrand());
								hbt.save(storeItemBatchStock);
								hbt.refresh(storeItemBatchStock);
							}
						}
					}
				}
			}

			if (storeStockTakingTList != null
					&& storeStockTakingTList.size() > 0) {
				StoreStockTakingM stockM = storeStockTakingTList.get(0)
				.getStockTakingM();
				stockM.setStatus("p");
				hbt.update(stockM);
			}
			tx.commit();
			flag = true;
		} catch (Exception e) {
			e.printStackTrace();
			if (tx != null) {
				tx.rollback();
			}
		}
		return flag;
	}
	/* comment for proc way
	 * public boolean addAdjustment(Box box)
	{
			List<StoreStockTakingM> storeStockTakingMList = new ArrayList<StoreStockTakingM>();
			List<StoreStockTakingT> storeStockTakingTList = new ArrayList<StoreStockTakingT>();
			List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
			StoreAdjustmentM storeAdjustmentM = new StoreAdjustmentM();
			StoreAdjustmentT storeAdjustmentT = new StoreAdjustmentT();
			int buffersize = 0 ;
			boolean flag = false;
			// Session session = factory.openSession();
			Transaction tx = null;
			// session = (Session)getSession();
			Session session = (Session) getSession();
			//session.flush();


				//Transaction tx = session.beginTransaction();


				tx = session.beginTransaction();
				HibernateTemplate hbt = getHibernateTemplate();
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
				SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
				String date4MySQL1="";
				String date4MySQL2="";
				try {
					date4MySQL1 = formatterOut.format(formatterIn.parse(box
							.getString(RequestConstants.ADJUSTMENT_DATE)));
					date4MySQL2 = formatterOut.format(formatterIn.parse(box
							.getString(RequestConstants.CHANGED_DATE)));
				} catch (java.text.ParseException e1) {

					e1.printStackTrace();
				}


				java.sql.Date adjustmentDate = java.sql.Date.valueOf(date4MySQL1);
				java.sql.Date changedDate = java.sql.Date.valueOf(date4MySQL2);


				// JDBC version start -------------------------
				// JDBC version end -------------------------


				Connection conn = null;
			    String url = "jdbc:mysql://localhost:3306/";
			    String dbName = "hms";
			    String driver = "com.mysql.jdbc.Driver";
			    String userName = "hms";
			    String password = "hms";
				String url = "";
				String user ="" ;
				String password = "";
				String driver ="" ;

				url = box.get("url");
				user = box.get("user");
				password = box.get("password");
				driver = box.get("driver");

			    	try {
						Class.forName(driver).newInstance();
						conn = DriverManager.getConnection(url,user,password);
						//n		
					} catch (InstantiationException e) {

						e.printStackTrace();
					} catch (IllegalAccessException e) {

						e.printStackTrace();
					} catch (ClassNotFoundException e) {

						e.printStackTrace();
					} catch (SQLException e) {

						e.printStackTrace();
					}


			    	String ADJUSTMENT_NO = box.get(RequestConstants.ADJUSTMENT_NO);
			    //  Date adjustmentDate =adjustmentDate;
					String REASON = box.getString(RequestConstants.REASON);
					//int DEPARTMENT_ID=new Integer(box.getInt(DEPARTMENT_ID)).intValue();
					int DEPARTMENT_ID = box.getInt(RequestConstants.DEPARTMENT_ID);
					int HOSPITAL_ID = box.getInt(RequestConstants.HOSPITAL_ID);
					String REMARKS = box.getString(RequestConstants.REMARKS);
					String CHANGED_BY = box.getString(RequestConstants.CHANGED_BY);
					//storeAdjustmentM.setLastChangedDate(RequestConstants.changedDate);
					String APPROVED_BY_EMPLOYEE_ID_ADJUSTMENT = box.getString(RequestConstants.APPROVED_BY_EMPLOYEE_ID_ADJUSTMENT);
					String CHANGED_TIME = box.getString(RequestConstants.CHANGED_TIME);
					String status = "o";
					int PHYSICAL_STOCK_ID_ID = box.getInt(RequestConstants.PHYSICAL_STOCK_ID_ID);
					Statement stmt = null;
					Statement stmt1 = null;
					Statement stmts = null;
					ResultSet rs = null;
					ResultSet rst = null;
					 int autoIncValue = -1;
					try{
				    stmt =  conn.createStatement();
				    String sql="INSERT store_adjustment_m (adjustment_no,adjustment_date,reason,department_id,hospital_id,approved_by,remarks,last_changed_by,last_changed_date,last_changed_time,status,store_stock_taking_m_id) values('"+ADJUSTMENT_NO+"','"+adjustmentDate+"','"+REASON+"', "+DEPARTMENT_ID+","+HOSPITAL_ID+",'"+APPROVED_BY_EMPLOYEE_ID_ADJUSTMENT+"','"+REMARKS+"','"+CHANGED_BY+"','"+changedDate+"','"+CHANGED_TIME+"','"+status+"',"+PHYSICAL_STOCK_ID_ID+" )";
				  //n    //System.out.println("00000000000000000        "+sql);
				    try{

				    stmt.executeUpdate(sql);
				    stmts =  conn.createStatement();
				    rst=stmts.executeQuery("SELECT MAX(id) from store_adjustment_m");


				   // rst = stmt.getGeneratedKeys();

				    if (rst!=null && rst.next()) {
				    	//n   	//System.out.println("Auto Key ::: "+rst.getInt(1));
				        autoIncValue = rst.getInt(1);
				    }
				    stmts.close();
				    rst.close();


				    }catch(SQLException ex)
				    {
				    }
					 //stmt.close();

				  //n   //System.out.println("11111111111111");
					 	stmt1 =  conn.createStatement();
					 	String sql1="SELECT * from store_stock_taking_t where stock_taking_m_id= "+PHYSICAL_STOCK_ID_ID+" ORDER BY item_id ASC";
					 	//System.out.println("SQL 1:::::: " +sql1);
					 	rs=stmt1.executeQuery(sql1);
					 	//n    //System.out.println("22222222222222");
					 	Statement stmt2 = null;
						ResultSet rs1 = null;
						Statement stmt3 = null;
						Statement stmt4 = null;
						Statement stmt5 = null;
						Statement stmt6 = null;
						ResultSet rs2 = null;
						int slno = 1;

						if(rs!=null)
						{
						int stock_taking_m_id=0;
						   stmt2 =  conn.createStatement();
						   stmt3 =  conn.createStatement();
						   stmt4 =  conn.createStatement();
						   stmt5 =  conn.createStatement();
						   stmt6 =  conn.createStatement();
						while(rs.next())
						{
							//n	   //System.out.println("444444444444444");
							double adjustQty=0;
							 stock_taking_m_id=rs.getInt("stock_taking_m_id");
							adjustQty=rs.getDouble("store_stock_service")-rs.getDouble("computed_stock");
							//n	   //System.out.println("55555555555555555");
							 //  rs.getDate("expiry_date")
						//	String sql2="Insert store_adjustment_t (sl_no,item_id,brand_id,batch_no,expiry_date,adjust_qty,adjust_id)values("+slno+","+rs.getInt("item_id")+","+rs.getInt("brand_id")+",'"+rs.getString("batch_no")+"','"+rs.getDate("expiry_date")+"',"+adjustQty+","+autoIncValue+")";

							String sql2="Insert store_adjustment_t (sl_no";
							if(String.valueOf(rs.getInt("item_id"))!=null)
							{
								sql2=sql2+ ",item_id";
							}
							if(String.valueOf(rs.getInt("brand_id"))!=null)
							{
								sql2=sql2+ ",brand_id";
							}
							if(rs.getString("batch_no")!=null)
							{
								sql2=sql2+ ",batch_no";
							}if(rs.getDate("expiry_date")!=null)
							{
								sql2=sql2+ ",expiry_date";
							}
							sql2=sql2+ ",adjust_qty,adjust_id)values("+slno+" ";
							if(String.valueOf(rs.getInt("item_id"))!=null)
							{
								sql2=sql2+ ","+rs.getInt("item_id")+" ";
							}
							if(String.valueOf(rs.getInt("brand_id"))!=null)
							{
								sql2=sql2+ ","+rs.getInt("brand_id")+" ";
							}
							if(rs.getString("batch_no")!=null)
							{
								sql2=sql2+ ",'"+rs.getString("batch_no")+"'";
							}if(rs.getDate("expiry_date")!=null)
							{
								sql2=sql2+ ",'"+rs.getDate("expiry_date")+"' ";
							}
							sql2=sql2+	", "+adjustQty+","+autoIncValue+")";



							//n	   //System.out.println("sql2    :::::::::::  "+sql2);
							stmt2.addBatch(sql2);
							slno++;
							//n	   //System.out.println("66666666666666666 sql2:: " +sql2);
							if(String.valueOf(rs.getInt("store_item_batch_stock_id"))!=null)
							{
								//n	   //System.out.println("77777777777777777");
							String sql3="Select * from store_item_batch_stock where stock_id="+rs.getInt("store_item_batch_stock_id")+" ";
							//n	//System.out.println("SQL 3::: " +sql3);
							rs1=stmt3.executeQuery(sql3);
							//n   //System.out.println("8888888888888888888");
								if (rs1 != null && rs1.next())
								{
									//n   //System.out.println("999999999999999999");
									double closingStock= 0;
										//closingStock=rs1.getDouble("closing_stock");
									closingStock=rs.getDouble("store_stock_service");
									//double finalStock=closingStock + adjustQty;
									//n	//System.out.println("closingStock ::: " +closingStock);
									String sql4="Update store_item_batch_stock SET adjust_qty="+adjustQty+" , closing_stock="+closingStock+" where batch_no='"+rs.getString("batch_no")+"'";
									//n	//System.out.println("sql4 ::: " +sql4);
									stmt4.addBatch(sql4);
									//n	   //System.out.println("AAAAAAAAAAAAAAAAAAAAAAAA");
								}
							}
							else
							{
								// Add Items which are not in Item Batch Stock

								//n	   //System.out.println("BBBBBBBBBBBBBBBBBBBBBBBb");
								//String sql5="INSERT store_item_batch_stock (item_id,batch_no,department_id,expiry_date,opening_balance_date, opening_balance_qty,adjust_qty,closing_stock,cost_price,brand_id) values("+rs.getInt("item_id")+",'"+rs.getString("batch_no")+"',"+rs.getInt("department_id")+",'"+rs.getDate("expiry_date")+"', '"+changedDate+"',"+adjustQty+", "+adjustQty+","+rs.getDouble("store_stock_service")+", "+rs.getDouble("cost_price")+","+rs.getInt("brand_id")+"  )";




								   String sql5="INSERT store_item_batch_stock (";
								if(String.valueOf(rs.getInt("item_id"))!=null)
								{
									sql5=sql5+ "item_id,";
								}
								if(rs.getString("batch_no")!=null)
								{
									sql5=sql5+ "batch_no,";
								}
								if(String.valueOf(rs.getInt("department_id"))!=null)
								{
									sql5=sql5+ "department_id,";
								}if(rs.getDate("expiry_date")!=null)
								{
									sql5=sql5+ "expiry_date,";
								}if(rs.getDate("closing_stock")!=null)
								{
									sql5=sql5+ "closing_stock,";
								}if(rs.getDate("cost_price")!=null)
								{
									sql5=sql5+ "cost_price,";
								}if(rs.getDate("brand_id")!=null)
								{
									sql5=sql5+ "brand_id,";
								}
								sql5=sql5+" opening_balance_date, opening_balance_qty,adjust_qty) values(";
								if(String.valueOf(rs.getInt("item_id"))!=null)
								{
									sql5=sql5+ " "+rs.getInt("item_id")+", ";
								}
								if(rs.getString("batch_no")!=null)
								{
									sql5=sql5+ " '"+rs.getString("batch_no")+"', ";
								}
								if(String.valueOf(rs.getInt("department_id"))!=null)
								{
									sql5=sql5+ " "+rs.getInt("department_id")+", ";
								}if(rs.getDate("expiry_date")!=null)
								{
									sql5=sql5+ "'"+rs.getDate("expiry_date")+"',";
								}if(rs.getDate("closing_stock")!=null)
								{
									sql5=sql5+ ""+rs.getDouble("store_stock_service")+",";
								}if(rs.getDate("cost_price")!=null)
								{
									sql5=sql5+ ""+rs.getDouble("cost_price")+",";
								}if(rs.getDate("brand_id")!=null)
								{
									sql5=sql5+ ""+rs.getInt("brand_id")+",";
								}
								sql5=sql5+ "'"+changedDate+"',"+adjustQty+", "+adjustQty+")";


								//n	
								stmt5.addBatch(sql5);
								//n	
							}
						}
						//n   
						stmt3.executeBatch();
						//n   
						stmt4.executeBatch();
						//n   
						   stmt5.executeBatch();
						 //n  
						stmt2.executeBatch();
						//n   
						String sql6="Update store_stock_taking_m Set status='p' where id="+stock_taking_m_id+"";
						stmt6.executeUpdate(sql6);
						//n  
						stmt3.close();
						stmt4.close();
						stmt5.close();
						stmt2.close();
						stmt6.close();
						   //n //System.out.println("IIIIIIIIIIIIIIIII");
						flag=true;
						}

						rs.close();
						rs1.close();
						conn.close();
					}catch (SQLException s){

				          //System.out.println("SQL statement is not executed!  " +s);
				        }

	           // s.close ();

				// hibernate version start -------------------------
				storeAdjustmentM = new StoreAdjustmentM();
				storeAdjustmentM.setAdjustmentNo(box.get(RequestConstants.ADJUSTMENT_NO));
				storeAdjustmentM.setAdjustmentDate(adjustmentDate);
				storeAdjustmentM.setReason(box.getString(RequestConstants.REASON));
				storeAdjustmentM.setDepartment(new MasDepartment(box.getInt(DEPARTMENT_ID)));
				storeAdjustmentM.setHospital(new MasHospital(box.getInt(RequestConstants.HOSPITAL_ID)));
				storeAdjustmentM.setRemarks(box.getString(REMARKS));
				storeAdjustmentM.setLastChangedBy(box.getString(CHANGED_BY));
				storeAdjustmentM.setLastChangedDate(changedDate);
				storeAdjustmentM.setApprovedBy(box.getString(RequestConstants.APPROVED_BY_EMPLOYEE_ID_ADJUSTMENT));
				storeAdjustmentM.setLastChangedTime(box.getString(CHANGED_TIME));
				storeAdjustmentM.setStatus("o");
				storeAdjustmentM.setStoreStockTakingM(
						new StoreStockTakingM(box.getInt(RequestConstants.PHYSICAL_STOCK_ID_ID)));
				hbt.save(storeAdjustmentM);
				hbt.refresh(storeAdjustmentM);

				storeStockTakingTList = session.createCriteria(
						StoreStockTakingT.class)
						.add(Restrictions.eq("StockTakingM.Id", box.getInt(RequestConstants.PHYSICAL_STOCK_ID_ID)))
						.addOrder(Order.asc("Item.Id")).list();

				if (storeStockTakingTList != null
						&& storeStockTakingTList.size() > 0) {
					int slno = 1;
					for (Iterator iterator = storeStockTakingTList.iterator(); iterator
					.hasNext();) {
						StoreStockTakingT storeStockTakingT = (StoreStockTakingT) iterator
						.next();
						storeAdjustmentT = new StoreAdjustmentT();
						storeAdjustmentT.setSlNo(slno++);
						storeAdjustmentT.setItem(storeStockTakingT.getItem());
						storeAdjustmentT.setBrand(storeStockTakingT.getBrand());
						storeAdjustmentT.setBatchNo(storeStockTakingT.getBatchNo());
						storeAdjustmentT.setExpiryDate(storeStockTakingT.getExpiryDate());
						storeAdjustmentT.setAdjustQty(storeStockTakingT.getStoreStockService().subtract(storeStockTakingT.getComputedStock()));
						storeAdjustmentT.setAdjust(storeAdjustmentM);
						//hbt.save(storeAdjustmentT);
						session.save(storeAdjustmentT);
						//hbt.refresh(storeAdjustmentT);
						if (storeStockTakingT.getItemBatchStock() != null) {
							storeItemBatchStockList = session.createCriteria(
									StoreItemBatchStock.class).add(Restrictions.eq("Id",
											storeStockTakingT.getItemBatchStock().getId())).list();
							if (storeItemBatchStockList != null
									&& storeItemBatchStockList.size() > 0) {
								StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock) storeItemBatchStockList
								.get(0);
								BigDecimal closingStock = (BigDecimal) storeItemBatchStock.getClosingStock();
								BigDecimal difference = storeStockTakingT.getStoreStockService().subtract(
										storeStockTakingT.getComputedStock());
								BigDecimal finalStock = closingStock.add(storeStockTakingT.getStoreStockService());

								storeItemBatchStock.setAdjustQty(difference);
								storeItemBatchStock.setClosingStock(storeStockTakingT.getStoreStockService());
								//	session.update(storeItemBatchStock);
								session.update(storeItemBatchStock);
								//hbt.refresh(storeItemBatchStock);
							}
						} else {
							// Add Items which are not in Item Batch Stock
							StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
							storeItemBatchStock.setItem(storeStockTakingT.getItem());
							storeItemBatchStock.setBatchNo(storeStockTakingT.getBatchNo());
							storeItemBatchStock.setDepartment(storeStockTakingT
									.getStockTakingM().getDepartment());
							storeItemBatchStock.setExpiryDate(storeStockTakingT.getExpiryDate());
							storeItemBatchStock.setOpeningBalanceDate(changedDate);
							storeItemBatchStock.setOpeningBalanceQty(
									storeStockTakingT.getStoreStockService()
									.subtract(storeStockTakingT.getComputedStock()));
							storeItemBatchStock.setAdjustQty(storeStockTakingT.getStoreStockService().subtract(
									storeStockTakingT.getComputedStock()));
							BigDecimal compStock = storeStockTakingT
							.getComputedStock();
							BigDecimal defi = storeStockTakingT.getStockDeficient();
							BigDecimal surplus = storeStockTakingT.getStockSurplus();
							BigDecimal finalStock = compStock.add(surplus).subtract(defi);
							//storeItemBatchStock.setClosingStock(finalStock);
							storeItemBatchStock.setClosingStock(storeStockTakingT.getStoreStockService());
							storeItemBatchStock.setCostPrice(storeStockTakingT.getCostPrice());
							storeItemBatchStock.setBrand(storeStockTakingT.getBrand());

							session.save(storeItemBatchStock);
							//hbt.refresh(storeItemBatchStock);
						}
						buffersize++;
						if(buffersize%50==0){
							session.flush();
							session.clear();
						}
						if((slno % 50) == 0){
							session.flush();
							session.clear();
						}
					}
				}
				if (storeStockTakingTList != null
						&& storeStockTakingTList.size() > 0) {
					StoreStockTakingM stockM = storeStockTakingTList.get(0)
					.getStockTakingM();
					stockM.setStatus("p");
					hbt.update(stockM);
				}
				// session.flush();
				tx.commit();
				//session.close();

				flag = true;
			} catch (Exception e) {
				e.printStackTrace();
				if (tx != null) {
					tx.rollback();
				}
			}
				// hibernate version end -------------------------
			return flag;

		}*/	/*
		 * public boolean storeItemBatch(Map<String, Object> map) {
		 *
		 * String sucessfully = "false"; Session session = (Session) getSession();
		 * int brandId = (Integer) map.get("brandId"); int adjustmentID = (Integer)
		 * map.get("adjustmentID"); String batchNo = (String) map.get("batchNo");
		 * BigDecimal costPrice = new BigDecimal("" + map.get("costPrice"));
		 * BigDecimal surplusStock = new BigDecimal("" + map.get("surplusStock"));
		 * BigDecimal deficient = new BigDecimal("" + map.get("deficient"));
		 *
		 * try { org.springframework.orm.hibernate3.HibernateTemplate hbt =
		 * getHibernateTemplate(); hbt.setFlushModeName("FLUSH_EAGER");
		 * hbt.setCheckWriteOperations(false);
		 *
		 *
		 * String hql="delete from StoreAdjustmentM as sit where sit.Id like
		 * :adjustmentID"; Query query =
		 * session.createQuery(hql).setParameter("adjustmentID", adjustmentID); int
		 * row = query.executeUpdate();
		 *
		 * //System.out.println("batchNo>>>>"+batchNo); List storeItemBatchStockList =
		 * session.createQuery("select sib from StoreItemBatchStock as sib where
		 * sib.BatchNo=" + batchNo + "and sib.Brand.Id=" + brandId + "and
		 * sib.CostPrice=" + costPrice).list();
		 * //System.out.println("storeItemBatchStockList in
		 * DS>>>>>>"+storeItemBatchStockList.size()); if
		 * (storeItemBatchStockList.size()>0){ StoreItemBatchStock
		 * storeItemBatchStock = (StoreItemBatchStock)
		 * storeItemBatchStockList.get(0); int storeItemBatchStockId =
		 * storeItemBatchStock.getId(); StoreItemBatchStock storeItemBatchStockObj =
		 * (StoreItemBatchStock) hbt.load(StoreItemBatchStock.class,
		 * storeItemBatchStockId); BigDecimal closingStock = (BigDecimal)
		 * storeItemBatchStock.getClosingStock(); //System.out.println("deficient" +
		 * deficient.abs()); //System.out.println("surplusStock" + surplusStock);
		 * BigDecimal new_adjust_qty = new BigDecimal(0);
		 *
		 * if (!deficient.toString().equals("0.000")&&
		 * surplusStock.toString().equals("0.000")) { //System.out.println("in if ");
		 * closingStock = closingStock.subtract(deficient); new_adjust_qty =
		 * storeItemBatchStock.getAdjustQty().add(deficient); } else if
		 * (deficient.toString().equals("0.000") &&
		 * !surplusStock.toString().equals("0.000")) { //System.out.println("in if
		 * assaasas "); closingStock = closingStock.add(surplusStock);
		 * new_adjust_qty = storeItemBatchStock.getAdjustQty().add(surplusStock); }
		 * else { closingStock = (BigDecimal) storeItemBatchStock.getClosingStock(); }
		 *
		 * storeItemBatchStockObj.setClosingStock(closingStock);
		 * storeItemBatchStockObj.setAdjustQty(new_adjust_qty);
		 * hbt.update(storeItemBatchStockObj);
		 *
		 * //System.out.println("closing stock has been incresed to===="+
		 * closingStock); //System.out.println("new_adjust_qty ===="+ new_adjust_qty);
		 * storeItemBatchStock.setClosingStock(closingStock);
		 * hbt.update(storeItemBatchStock); sucessfully = "true"; } else {
		 * sucessfully = "false"; } }catch (HibernateException e) {
		 * e.printStackTrace(); }
		 *
		 * return false; }
		 */
	public int getStoreMmfDepartmentId(int docNo) {
		@SuppressWarnings("unused")
		int mmfDepartmentId = 0;
		List<StoreMmfDepartmentM> list = new ArrayList<StoreMmfDepartmentM>();
		list = (List) getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreMmfDepartmentM as pod where pod.DocNo = '"
				+ docNo + "'");
		for (StoreMmfDepartmentM storeMmfDepartmentM2 : list) {
			mmfDepartmentId = Integer.parseInt(""
					+ storeMmfDepartmentM2.getId());
		}
		return mmfDepartmentId;
	}
	//  For Employee Department wise
	public List<Integer> getEmployeeIdDepartmentWise(Session session, int department){
		List<Integer> empId = (List<Integer>)session.createCriteria(MasEmployeeDepartment.class, "med")
				.createAlias("med.Employee", "emp").add(Restrictions.eq("med.Department.Id", department))
				.add(Restrictions.eq("med.Status", "y")).setProjection(Projections.property("emp.Id")).list();
		return empId;
	}

	/*
	 * Start of Methods for Raisisng CIV
	 */
	// --------------------------------New Grid For Department
	// Indent----------------------
	public Map<String, Object> showDepartmentIndent(int deptId,int hospitalId) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasDepartment> departmentCentralStoreList = new ArrayList<MasDepartment>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		List<MasEmployee> requestByEmployeeList = new ArrayList<MasEmployee>();
		List<StoreInternalIndentM> searchStoreInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		List<StoreFyDocumentNo> demandNoList = new ArrayList<StoreFyDocumentNo>();
		int storeFyDocumentNoId = 0;
		String demandNo = "";
		String finalDemandNo = "";
		Session session = (Session) getSession();
		try {
			// add hospitalId By javed khan
			sectionList = getHibernateTemplate()
			.find("from jkt.hms.masters.business.MasStoreSection as ms where ms.Status = 'y' and ms.Hospital.Id="+hospitalId);
			departmentList = getHibernateTemplate()
			.find("from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y'");
			departmentCentralStoreList = getHibernateTemplate()
			.find("from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y' and mi.DepartmentType.Id='3'");
			/*requestByEmployeeList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasEmployee as mi where mi.Status = 'y' and mi.Hospital.Id="+hospitalId);*/
			//requestByEmployeeList = getHibernateTemplate()
			//.find("from jkt.hms.masters.business.MasEmployee as mi where mi.Status = 'y' and mi.Hospital.Id="+hospitalId+" order by mi.FirstName");    // comment by javed khan on 22-10-2013
			//.find("from jkt.hms.masters.business.MasEmployee as mi where mi.Status = 'y' and mi.Hospital.Id="+hospitalId+" order by mi.FirstName"); // added by javed khan on 22-10-2013
			requestByEmployeeList = session.createCriteria(MasEmployee.class, "emp").add(Restrictions.in("emp.Id", getEmployeeIdDepartmentWise(session, deptId)))
					.add(Restrictions.eq("emp.Status", "y")).addOrder(Order.asc("emp.FirstName")).list();
			
			//approvedByEmployeeList = getHibernateTemplate()
			//.find("from jkt.hms.masters.business.MasEmployee as mi where mi.Status = 'y'  and mi.Hospital.Id="+hospitalId+" and mi.EmpCategory.Id  ='1' order by mi.FirstName");  // comment by javed khan on 22-10-2013
			//.find("from jkt.hms.masters.business.MasEmployee as mi where mi.Status = 'y'  and mi.Hospital.Id="+hospitalId+" and mi.EmpCategory.Id  ='1' order by mi.FirstName");        // added by javed khan on 22-10-2013
			approvedByEmployeeList = session.createCriteria(MasEmployee.class, "emp").add(Restrictions.in("emp.Id", getEmployeeIdDepartmentWise(session, deptId)))
					.add(Restrictions.eq("emp.Status", "y")).addOrder(Order.asc("emp.FirstName")).list();
			
			// add hospitalId By javed khan
			searchStoreInternalIndentMList = session.createCriteria(
					StoreInternalIndentM.class).add(
							Restrictions.eq("Department.Id", deptId)).add(Restrictions.eq("Hospital.Id", hospitalId))
							.addOrder(Order.desc("Id")).list();
			// add hospitalId By javed khan
			demandNoList = session.createCriteria(StoreFyDocumentNo.class).add(
					Restrictions.eq("Department.Id", deptId)).add(Restrictions.eq("Hospital.Id", hospitalId)).list();



		} catch (Exception e) {
			e.printStackTrace();
		}
		if (demandNoList != null && demandNoList.size() > 0) {
			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) demandNoList
			.get(0);
			if(storeFyDocumentNo.getDemandNo()!= null)
				demandNo = ("" + storeFyDocumentNo.getDemandNo());
			storeFyDocumentNoId = storeFyDocumentNo.getId();
			try {
				finalDemandNo = getMaxNo(demandNo);

			} catch (Exception e) {
				e.printStackTrace();
			}
			map.put("demandNoList", demandNoList);
			map.put("storeFyDocumentNoId", storeFyDocumentNoId);
			map.put("finalDemandNo", finalDemandNo);
		}else{
			finalDemandNo = getMaxNo("");
			map.put("finalDemandNo", finalDemandNo);
		}
		map.put("departmentCentralStoreList",departmentCentralStoreList);
		map.put("sectionList", sectionList);
		map.put("departmentList", departmentList);
		map.put("approvedByEmployeeList", approvedByEmployeeList);
		map.put("requestByEmployeeList", requestByEmployeeList);
		map.put("searchStoreInternalIndentMList",
				searchStoreInternalIndentMList);
		return map;

	}


	// add javed khan
	public Map<String, Object> getDepartmentIndentData(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();
		String pvms = null;
		String nomenclature = null;
		String au = null;
		Integer qtymmf = null;
		Integer qtyRequest = null;
		Integer stock = null;
		int id = 0;
		int itemId=0;
		String common_name = null;
		String reason = null;  // add by javed
		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasDepartment> departmentCentralStoreList = new ArrayList<MasDepartment>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		List<MasEmployee> requestByEmployeeList = new ArrayList<MasEmployee>();
		List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		List<StoreInternalIndentM> searchStoreInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		List<StoreIssueM> storeIssueMListForReport = new ArrayList<StoreIssueM>();
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		StoreInternalIndentT storeInternalIndentT1 = new StoreInternalIndentT();
		int sno = 0;
		int hospitalId=box.getInt("hospitalId");
		int deptId=box.getInt("deptId");
		String demandNo = box.get(DEMAND_NO);
		storeInternalIndentMList = hbt
		.find("from jkt.hms.masters.business.StoreInternalIndentM inp where inp.Id = '"
				+ demandNo
				+ "' and inp.Department.Id="
				+ box.get(FROM_WARD)+" and inp.Hospital.Id="+hospitalId);
		map.put("storeInternalIndentMList", storeInternalIndentMList);
		if (box.getString("pvmsNo").length() > 0) {
			String strForPvms = box.getString("pvmsNo");
			strForPvms = strForPvms.replace(" ", "%") + "%";
			storeInternalIndentTList = hbt
			.find("from jkt.hms.masters.business.StoreInternalIndentT as inp where inp.Internal.Id = '"
					+ demandNo
					+ "' and inp.Internal.Department.Id='"
					+ box.get(FROM_WARD)
					+ "' and inp.Item.PvmsNo like '" + strForPvms + "'");
		} else {
			storeInternalIndentTList = hbt
			.find("from jkt.hms.masters.business.StoreInternalIndentT as inp where inp.Internal.Id = '"
					+ demandNo
					+ "' and inp.Internal.Department.Id="
					+ box.get(FROM_WARD) + " order by inp.Item.PvmsNo ");
		}
		// Check for existence of previous year records
		departmentList = getHibernateTemplate()
		.find("from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y'");
		/*approvedByEmployeeList = getHibernateTemplate()
		.find("from jkt.hms.masters.business.MasEmployee as mi where  mi.Status = 'y' and mi.Hospital.Id="+hospitalId+"  and mi.EmpCategory.Id  ='1' ");
		requestByEmployeeList = getHibernateTemplate()
		.find("from jkt.hms.masters.business.MasEmployee as mi where mi.Status = 'y'and mi.Hospital.Id="+hospitalId);
*/
		requestByEmployeeList = session.createCriteria(MasEmployee.class, "emp").add(Restrictions.in("emp.Id", getEmployeeIdDepartmentWise(session, deptId))).addOrder(Order.asc("emp.FirstName")).list();
		approvedByEmployeeList = session.createCriteria(MasEmployee.class, "emp").add(Restrictions.in("emp.Id", getEmployeeIdDepartmentWise(session, deptId))).addOrder(Order.asc("emp.FirstName")).list();
		
		departmentCentralStoreList = getHibernateTemplate()
		.find("from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y' and mi.DepartmentType.Id='3'");

		// search list for Demand no for search criteria on each page

		searchStoreInternalIndentMList = session.createCriteria(
				StoreInternalIndentM.class).add(
						Restrictions.eq("Department.Id", box.getInt(FROM_WARD)))
						.add(Restrictions.eq("Hospital.Id",hospitalId ))
						.addOrder(Order.desc("Id")).list();
		map.put("departmentList", departmentList);
		map.put("approvedByEmployeeList", approvedByEmployeeList);
		map.put("departmentCentralStoreList",departmentCentralStoreList);
		map.put("requestByEmployeeList", requestByEmployeeList);
		map.put("searchStoreInternalIndentMList",
				searchStoreInternalIndentMList);
		map.put("newDemandNo", demandNo);

		/*if (storeInternalIndentTList != null
				&& storeInternalIndentTList.size() > 0) {
			int internalIndentId = storeInternalIndentTList.get(0)
					.getInternal().getId();

			map.put("demandNo",storeInternalIndentTList.get(0).getInternal().getDemandNo());
		}*/
		if(storeInternalIndentMList != null && storeInternalIndentMList.size() > 0){
			map.put("demandNo",storeInternalIndentMList.get(0).getDemandNo());
			map.put("internalIndentId", storeInternalIndentMList.get(0).getId());
		}

		for (Iterator iterator = storeInternalIndentTList.iterator(); iterator
		.hasNext();) {
			StoreInternalIndentT storeInternalIndentT = (StoreInternalIndentT) iterator
			.next();
			try {
				id = storeInternalIndentT.getId();
			} catch (Exception e) {
				id = 0;
			}
			try {
				pvms = storeInternalIndentT.getItem().getPvmsNo();
				itemId=storeInternalIndentT.getItem().getId();
			} catch (Exception e) {
				pvms = "";
			}
			try {
				nomenclature = storeInternalIndentT.getItem().getNomenclature();
			} catch (Exception e) {
				nomenclature = "";
			}
			try {
				if(storeInternalIndentT.getItem().getCommonName() != null && !storeInternalIndentT.getItem().getCommonName().equals(""))
					common_name = storeInternalIndentT.getItem().getCommonName();
				else
					common_name = "No Common Name";
			} catch (Exception e) {
				common_name = "No Common Name";
			}
			try {
				au = storeInternalIndentT.getItem().getItemConversion()
				.getPurchaseUnit().getUnitName();
			} catch (Exception e) {
				au = "";
			}
			try {
				qtymmf = storeInternalIndentT.getMmfQty();
			} catch (Exception e) {
				qtymmf = 0;
			}
			try {
				qtyRequest = storeInternalIndentT.getQtyRequest();
			} catch (Exception e) {
				qtyRequest = 0;
			}
			try {
				reason = storeInternalIndentT.getReasonForDemand();

			} catch (Exception e) {
				reason = "";
			}

			hData = new HashMap<String, Object>();
			Map<String, Object> groupByItemMap = new HashMap<String, Object>();
			String str = "select inp.item_id,sum(inp.closing_stock) from store_item_batch_stock inp where inp.department_id = "
				+ box.get(FROM_WARD) + " group by inp.item_id";

			List<StoreItemBatchStock> groupByItemList = session.createSQLQuery(str).list();
			for (Iterator iterator2 = groupByItemList.iterator(); iterator2
			.hasNext();) {
				Object[] obj = (Object[]) iterator2.next();
				// Integer itemId = (Integer) obj[0];
				BigDecimal closingStock = (BigDecimal) obj[1];
				groupByItemMap.put(obj[0].toString(), closingStock);
			}
			hData.put("id", id);
			/*if (groupByItemMap.get(id) != null) {
				hData.put("stock", groupByItemMap.get(id));
			} else {
				hData.put("stock", 0);
			}*/
			int qtyInHand = 0 ;
			try {
				qtyInHand = storeInternalIndentT.getStockInHand();
			} catch (Exception e) {
				qtyInHand = 0;
			}
			hData.put("reason", reason);
			hData.put("stock", qtyInHand);
			hData.put("pvms", pvms);
			hData.put("itemId",itemId);
			hData.put("nomenclature", nomenclature);
			hData.put("commonName",common_name);
			hData.put("au", au);
			hData.put("qtymmf", qtymmf);
			hData.put("qtyRequest", qtyRequest);
			vResult.add(hData);
		}
		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}

		storeIssueMListForReport = session.createCriteria(StoreIssueM.class).
		createAlias("RequestNo", "storeinternalindent")
		.add(Restrictions.eq("storeinternalindent.Id",Integer.parseInt(demandNo)))
		.add(Restrictions.eq("storeinternalindent.Hospital.Id",hospitalId ))
		.createAlias("storeinternalindent.Department", "fromDept").add(Restrictions.eq("fromDept.Id", box.getInt(FROM_WARD)))
		.list();

		if(storeIssueMListForReport.size()>0){
			for(StoreIssueM storeIssueM :storeIssueMListForReport){
				int issueId = storeIssueM.getId();
				map.put("issueId", issueId);
			}
		}
		try
		{
			/*pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);*/
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);
		} catch (Exception e) {
			e.printStackTrace();
		}
		// javed khan for loan out
		List<StoreLoanoutExpendT> loanoutTList = new ArrayList<StoreLoanoutExpendT>();
		/*List loanoutTList = new ArrayList();
		String loanQry="select * from STORE_LOANOUT_EXPEND_t slet "
			+" left outer join  STORE_LOANOUT_EXPEND_m slem on  slet.ISSUE_M_ID=slem.ID "
			+" where slem.STATUS='l'";
		loanoutTList=session.createSQLQuery(loanQry).list();*/
		loanoutTList=session.createCriteria(StoreLoanoutExpendT.class).
		createAlias("IssueM", "storeloanoutM")
		.add(Restrictions.eq("storeloanoutM.Status","l")).list();
		map.put("loanoutTList", loanoutTList);



		// javed khan for loan out

		//map.put("demandNo", box.get(DEMAND_NO));
		map.put("pagedArray", pagedArray);
		map.put("storeInternalIndentTList", storeInternalIndentTList);
		return map;
	}

	public Map<String, Object> createAndImportDepartmentIndentData(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();
		String pvms = null;
		String nomenclature = null;
		String au = null;
		Integer qtymmf = null;
		Integer qtyRequest = null;
		Integer stock = null;
		int importDemandNumber=0;
		if((box.getString("importDemandNumber")!=null) &&(!box.getString("importDemandNumber").equals("")))
			importDemandNumber= Integer.parseInt(box.getString("importDemandNumber"));
		int id = 0;
		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		String mmfType = "";
		List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();
		List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		List<StoreInternalIndentT> storeInternalIndentTList1 = new ArrayList<StoreInternalIndentT>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		List<MasEmployee> requestByEmployeeList = new ArrayList<MasEmployee>();

		try {
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			StoreInternalIndentT storeInternalIndentT1 = new StoreInternalIndentT();
			// int currentYear = box.getInt(MMF_DEPARTMENT_DATE);
			// int previousYear = currentYear - 1;
			int sno = 0;
			String demandNo = box.get(DEMAND_NO);
			//int from_ward=Integer.parseInt(""+box.get(FROM_WARD));
			int month, year;

			Calendar cal = Calendar.getInstance();
			Calendar calendar = Calendar.getInstance();
			month = calendar.get(Calendar.MONTH) + 1;
			if (month < 4) {
				year = calendar.get(Calendar.YEAR) - 1;
			} else {
				year = calendar.get(Calendar.YEAR);
			}
			int st1 = demandNo.indexOf("/");
			int no = Integer.parseInt(demandNo.substring(0, st1)) - 1;
			String lastStringOfDemandNo = demandNo.substring(st1);

			String newNo = null;
			if (no < 10) {
				newNo = "0" + Integer.toString(no);
			} else {
				newNo = "" + no;
			}
			String lastDemandNo = newNo + lastStringOfDemandNo;

			List<StoreSetup> storeSetupList = new ArrayList<StoreSetup>();
			storeSetupList = hbt.find("from jkt.hms.masters.business.StoreSetup");

			int echs_dept_id = storeSetupList.get(0).getStoreEchs().getId();
			int echs_disp_id = storeSetupList.get(0).getStoreEchsDispensary().getId();
			int exp_dept_id = storeSetupList.get(0).getStoreExpendable().getId();
			int exp_disp_id = storeSetupList.get(0).getStoreDispensary().getId();
			if (box.getInt(TO_WARD) == exp_dept_id || box.getInt(TO_WARD) == exp_disp_id)
			{
				mmfType = "e";
			}
			else if (box.getInt(TO_WARD) == echs_dept_id || box.getInt(TO_WARD) == echs_disp_id) {
				mmfType = "h";
			}
			/*storeInternalIndentMList = session.createCriteria(
					StoreInternalIndentM.class).add(
							Restrictions.eq("Department.Id", box.getInt(FROM_WARD)))
							.add(Restrictions.eq("ToStore.Id", box.getInt(TO_WARD)))
							.addOrder(Order.desc("Id")).list();*/


			/*
			 * Code By Mukesh
			 * Date 07 Sep 2010
			 */
			storeInternalIndentTList = session.createCriteria(StoreInternalIndentT.class).createAlias("Internal",
			"inp").add(Restrictions.eq("inp.Id", importDemandNumber))
			.list();
			/*
			 * End Code By Mukesh
			 * Date 07 Sep 2010
			 */
			int internalIndentMId = 0;
			internalIndentMId = importDemandNumber;
			/*
			 storeInternalIndentMList = session.createCriteria(
					StoreInternalIndentM.class).add(
							Restrictions.eq("Id",importDemandNumber)).list();
			  if (storeInternalIndentMList != null) {

				StoreInternalIndentM storeInternalIndentM = (StoreInternalIndentM) storeInternalIndentMList
				.get(0);
				String demandNoFromDB = storeInternalIndentM.getDemandNo();

				if (demandNoFromDB != null && !demandNoFromDB.equals("")) {
					log.debug("demand number --------------"
							+ demandNoFromDB);
					internalIndentMId = storeInternalIndentM.getId();
					storeInternalIndentTList = session.createCriteria(StoreInternalIndentT.class).createAlias("Internal",
					"inp").add(Restrictions.eq("inp.Id", internalIndentMId))
					.list();
				}
			}*/
			// storeInternalIndentTList = hbt.find("from
			// jkt.hms.masters.business.StoreInternalIndentT as inp where
			// inp.Internal.DemandNo = '" + lastDemandNo + "' and
			// inp.Internal.ToStore.Id=" + box.get(TO_WARD));
			// storeInternalIndentTList = hbt.find("from
			// jkt.hms.masters.business.StoreInternalIndentT as inp where
			// inp.Internal.DemandNo = '" + lastDemandNo + "'");

			// storeInternalIndentMList =
			// session.createCriteria(StoreInternalIndentM.class).add(Restrictions.eq("Department.Id",
			// box.get(FROM_WARD))).add(Restrictions.eq("DemandNo",
			// demandNo)).list();
			// Check for existence of previous year records

			if (storeInternalIndentTList != null
					&& storeInternalIndentTList.size() > 0) {
				storeInternalIndentTList1 = hbt
				.find("from jkt.hms.masters.business.StoreInternalIndentT inp where inp.Internal.DemandNo = '"
						+ demandNo
						+ "' and inp.Internal.Department.Id="
						+ box.get(FROM_WARD)
						+ " order by inp.SrNo desc");

				departmentList = getHibernateTemplate()
				.find("from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y'");
				approvedByEmployeeList = getHibernateTemplate()
				.find("from jkt.hms.masters.business.MasEmployee as mi where mi.EmpCategory.Id='1'");
				requestByEmployeeList = getHibernateTemplate()
				.find("from jkt.hms.masters.business.MasEmployee as mi where mi.EmpCategory.Id='1' ");
				storeInternalIndentMList = session.createCriteria(
						StoreInternalIndentM.class).add(
								Restrictions.eq("Id", internalIndentMId)).list();
				map.put("departmentList", departmentList);
				map.put("approvedByEmployeeList", approvedByEmployeeList);
				map.put("requestByEmployeeList", requestByEmployeeList);
				StoreInternalIndentM storeInternalIndentM = null;
				/*if (storeInternalIndentMList != null
						& storeInternalIndentMList.size() > 0) {
					storeInternalIndentM = storeInternalIndentMList.get(0);
					int internalIndentId = storeInternalIndentM.getId();
					StoreInternalIndentM storeInternalIndentMNew = (StoreInternalIndentM) getHibernateTemplate()
							.load(StoreInternalIndentM.class, internalIndentId);

					if (box.get(APPROVED_BY_EMPLOYEE_ID_DEPENDENT_INDENT) != null
							&& box
									.getInt(APPROVED_BY_EMPLOYEE_ID_DEPENDENT_INDENT) != 0) {
						MasEmployee masEmployee1 = new MasEmployee();
						masEmployee1
								.setId(box
										.getInt(APPROVED_BY_EMPLOYEE_ID_DEPENDENT_INDENT));
						storeInternalIndentMNew.setApprovedBy(masEmployee1);
					}

					if (box.get(REQUEST_BY_EMPLOYEE_ID_DEPENDENT_INDENT) != null
							&& box
									.getInt(REQUEST_BY_EMPLOYEE_ID_DEPENDENT_INDENT) != 0) {
						MasEmployee masEmployee2 = new MasEmployee();
						masEmployee2
								.setId(box
										.getInt(REQUEST_BY_EMPLOYEE_ID_DEPENDENT_INDENT));
						storeInternalIndentMNew.setRequestedBy(masEmployee2);
					}

					storeInternalIndentMNew.setDemandNo(demandNo);
					storeInternalIndentMNew.setLastChgBy(box.get(CHANGED_BY));
					storeInternalIndentMNew.setLastChgDate(HMSUtil
							.convertStringTypeDateToDateType(box
									.getString(CHANGED_DATE)));
					// storeInternalIndentM.setLastChgTime(box.get(CHANGED_TIME));
					storeInternalIndentMNew.setDemandDate(HMSUtil
							.convertStringTypeDateToDateType(box
									.getString(DEMAND_DATE)));
					storeInternalIndentMNew.setStatus("o");

					MasDepartment fromDept = new MasDepartment();
					fromDept.setId(box.getInt(FROM_WARD));
					storeInternalIndentMNew.setDepartment(fromDept);

					MasDepartment toDept = new MasDepartment();
					toDept.setId(box.getInt(TO_WARD));
					storeInternalIndentMNew.setToStore(toDept);
					MasHospital masHospital = new MasHospital();
					masHospital.setId(box.getInt("hospitalId"));
					storeInternalIndentMNew.setHospital(masHospital);
					hbt.update(storeInternalIndentMNew);
				} *///else {
				storeInternalIndentM = new StoreInternalIndentM();
				if (box.get(APPROVED_BY_EMPLOYEE_ID_DEPENDENT_INDENT) != null
						&& box.getInt(APPROVED_BY_EMPLOYEE_ID_DEPENDENT_INDENT) != 0) {
					MasEmployee masEmployee1 = new MasEmployee();
					masEmployee1.setId(
							box.getInt(APPROVED_BY_EMPLOYEE_ID_DEPENDENT_INDENT));
					storeInternalIndentM.setApprovedBy(masEmployee1);
				}
				if (box.get(REQUEST_BY_EMPLOYEE_ID_DEPENDENT_INDENT) != null
						&& box.getInt(REQUEST_BY_EMPLOYEE_ID_DEPENDENT_INDENT) != 0) {
					MasEmployee masEmployee2 = new MasEmployee();
					masEmployee2.setId(
							box.getInt(REQUEST_BY_EMPLOYEE_ID_DEPENDENT_INDENT));
					storeInternalIndentM.setRequestedBy(masEmployee2);
				}
				storeInternalIndentM.setDemandNo(demandNo);
				storeInternalIndentM.setLastChgBy(box.get(CHANGED_BY));
				storeInternalIndentM.setLastChgDate(HMSUtil
						.convertStringTypeDateToDateType(box
								.getString(CHANGED_DATE)));
				// storeInternalIndentM.setLastChgTime(box.get(CHANGED_TIME));
				storeInternalIndentM.setDemandDate(HMSUtil
						.convertStringTypeDateToDateType(box
								.getString(DEMAND_DATE)));
				storeInternalIndentM.setStatus("o");
				MasDepartment fromDept = new MasDepartment();
				fromDept.setId(box.getInt(FROM_WARD));
				storeInternalIndentM.setDepartment(fromDept);
				MasDepartment toDept = new MasDepartment();
				toDept.setId(box.getInt(TO_WARD));
				storeInternalIndentM.setToStore(toDept);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(box.getInt("hospitalId"));
				storeInternalIndentM.setHospital(masHospital);
				// hbt.setFlushModeName("FLUSH_EAGER");
				// hbt.setCheckWriteOperations(false);
				hbt.save(storeInternalIndentM);
				//}
				if (storeInternalIndentTList1 != null
						&& storeInternalIndentTList1.size() > 0) {
					sno = storeInternalIndentTList1.get(0).getSrNo().intValue();
				}
				StoreInternalIndentT storeInternalIndentTnew = null;
				List<Object> objectCurrentYearList=new ArrayList<Object>();
				objectCurrentYearList=getHibernateTemplate().find("select sum(smdt.CurrYearMmf),sum(sibs.ClosingStock),item.Id,item.PvmsNo,item.ItemConversion.PurchaseUnit.UnitName,item.Nomenclature from jkt.hms.masters.business.StoreMmfDepartmentT as smdt join smdt.StoreMmfDepartmentM as smdm join smdt.Item as item join item.StoreItemBatchStocks as sibs where smdm.MmfForTheYear='"
						+ year
						+ "'"
						+" and sibs.Department.Id='"
						+ box.getInt("fromWard")
						+ "' and smdm.MmfStoreType='"
						+ mmfType +
				"' group by item.Id,item.PvmsNo,item.ItemConversion.PurchaseUnit.UnitName,item.Nomenclature order by item.Id asc");


				int loanOut=0;
				int item_id=0;
				hData = new HashMap<String, Object>();




				for (Iterator iterator = storeInternalIndentTList.iterator(); iterator
				.hasNext();) {
					StoreInternalIndentT storeInternalIndentT = (StoreInternalIndentT) iterator
					.next();
					item_id=storeInternalIndentT.getItem().getId();
					storeInternalIndentTnew = new StoreInternalIndentT();
					storeInternalIndentTnew.setItem(storeInternalIndentT.getItem());
					BigDecimal qtyInHand = null;
					/*String currYearMmfSumQuery = "SELECT sum(curr_year_mmf) FROM store_mmf_department_t t,store_mmf_department_m m,mas_store_item s where t.store_mmf_department_m_id=m.id and t.item_id=s.item_id and m.mmf_for_the_year='"
						+ year
						+ "'"
						+ " and s.item_id ='"
						+ storeInternalIndentT.getItem().getId()
						+ "' and m.mmf_store_type='" + mmfType + "' and m.store_ward_dept = '"+box.getInt(FROM_WARD)+"'" ;
					 *///List objectCurrentYearList = new ArrayList();
					//objectCurrentYearList = (List) session.createSQLQuery(currYearMmfSumQuery).list();
					BigDecimal qtymmf1 = null;
					if(objectCurrentYearList != null
							&& objectCurrentYearList.size()>0){
						for (Iterator iterator2 = objectCurrentYearList
								.iterator(); iterator2.hasNext();) {
							Object[] object = (Object[]) iterator2
							.next();
							/*MasStoreItem masStoreItem=new MasStoreItem();
							masStoreItem=(MasStoreItem)object[2];
							if(masStoreItem.getId().equals(item_id)){
								pvms = masStoreItem.getPvmsNo();
								if(masStoreItem.getItemConversion()!=null){
									au = masStoreItem.getItemConversion().getPurchaseUnit()
									.getUnitName();
								}
								nomenclature = masStoreItem.getNomenclature();
							 */
							Integer masStoreItemId=(Integer)object[2];
							if(masStoreItemId.equals(item_id))
							{
								pvms = (String)object[3];
								au =(String)object[4];

								nomenclature = (String)object[5];;
								/*
								 * Code for qtymmf
								 */
								if (object[0]!= null) {
									//	log.debug("qtymmf----"+object[0]);
									qtymmf1 = new BigDecimal(""+ object[0]);
								} else {
									qtymmf1 = new BigDecimal(0);
								}
								/*
								 * Code for qtyInHand
								 */
								if (object[1]!= null) {
									//log.debug("qtyInHand----"+object[1]);
									qtyInHand = new BigDecimal(""+ object[1]);
								} else {
									qtyInHand = new BigDecimal(1);
								}
								break;
							}



						}
					}
					//-------------------------------


					/*if (objectCurrentYearList != null && objectCurrentYearList.size() > 0) {
						if (objectCurrentYearList.get(0) != null) {
							qtymmf1 = new BigDecimal(""
									+ objectCurrentYearList.get(0));
						}
					} else {
						qtymmf1 = new BigDecimal(0);
					}*/

					if (qtymmf1 != new BigDecimal(0) && qtymmf1 != null) {
						storeInternalIndentTnew.setMmfQty(qtymmf1.intValue());
					} else {
						storeInternalIndentTnew.setMmfQty(0);
					}

					/*					List storeItemBatchStockList = new ArrayList();
					String str = "select sum(inp.closing_stock) from store_item_batch_stock as inp where department_id = "
						+ box.getInt(FROM_WARD)
						+ " and item_id = "
						+ storeInternalIndentT.getItem().getId();
					storeItemBatchStockList = session.createSQLQuery(str)
					.list();

					if (storeItemBatchStockList != null && storeItemBatchStockList.size() > 0) {
						Iterator iterator1 = storeItemBatchStockList.iterator();
						while (iterator1.hasNext()) {
							qtyInHand = (BigDecimal) iterator1.next();
						}
					} else{
						qtyInHand = new BigDecimal(0);
					}
					 */
					BigDecimal qtyReqt = null;
					if (qtyInHand == null) {
						qtyInHand = new BigDecimal("0");
					}
					if (qtymmf1 == null) {
						qtymmf1 = new BigDecimal("0");
					}
					qtyReqt = qtymmf1.subtract(qtyInHand);

					if (qtyReqt.compareTo(new BigDecimal(0)) >= 0) {
						storeInternalIndentTnew.setQtyRequest(qtyReqt.intValue());//storeInternalIndentT.getQtyRequest()
					} else {
						storeInternalIndentTnew.setQtyRequest(0);
					}
					//-------------------------------------------------------
					storeInternalIndentTnew.setStockInHand(qtyInHand.intValue());
					// storeInternalIndentTnew.setMmfQty(storeInternalIndentT.getMmfQty());
					storeInternalIndentTnew.setSrNo(++sno);
					storeInternalIndentTnew.setInternal(storeInternalIndentM);
					storeInternalIndentTnew.setDepartment(storeInternalIndentT
							.getDepartment());
					hbt.save(storeInternalIndentTnew);
					hbt.refresh(storeInternalIndentTnew);
				}

				List<StoreFyDocumentNo> demandNoList = new ArrayList<StoreFyDocumentNo>();
				int deptId = box.getInt(FROM_WARD);
				demandNoList = session.createCriteria(StoreFyDocumentNo.class)
				.add(Restrictions.eq("Department.Id", deptId)).list();
				StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) demandNoList
				.get(0);
				storeFyDocumentNo.setDemandNo(demandNo);
				hbt.save(storeFyDocumentNo);
				hbt.setFlushModeName("FLUSH_EAGER");
				// hbt.setCheckWriteOperations(false);
				// storeInternalIndentTList = hbt.find("from
				// jkt.hms.masters.business.StoreInternalIndentT as inp where
				// inp.StoreMmfDepartmentM.MmfForTheYear=" + currentYear + " and
				// inp.StoreMmfDepartmentM.StoreWardDept.Id=" +
				// box.get(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT));
				storeInternalIndentTList = hbt
				.find("from jkt.hms.masters.business.StoreInternalIndentT as inp where inp.Internal.DemandNo = '"
						+ demandNo
						+ "' and inp.Internal.Department.Id="
						+ box.get(FROM_WARD));
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}


		if (storeInternalIndentTList != null
				&& storeInternalIndentTList.size() > 0) {
			int internalIndentId = storeInternalIndentTList.get(0)
			.getInternal().getId();
			String demandNo = storeInternalIndentTList.get(0).getInternal()
			.getDemandNo();
			map.put("internalIndentId", internalIndentId);
			map.put("demandNo", demandNo);
		}
		for (Iterator iterator = storeInternalIndentTList.iterator(); iterator
		.hasNext();) {
			StoreInternalIndentT storeInternalIndentT = (StoreInternalIndentT) iterator
			.next();
			try {
				id = storeInternalIndentT.getId();
			} catch (Exception e) {
				id = 0;
			}
			try {
				pvms = storeInternalIndentT.getItem().getPvmsNo();
			} catch (Exception e) {
				pvms = "";
			}

			try {
				nomenclature = storeInternalIndentT.getItem().getNomenclature();
			} catch (Exception e) {
				nomenclature = "";
			}

			try {
				au = storeInternalIndentT.getItem().getItemConversion()
				.getPurchaseUnit().getUnitName();
			} catch (Exception e) {
				au = "";
			}

			try {
				qtymmf = storeInternalIndentT.getMmfQty();
			} catch (Exception e) {
				qtymmf = 0;
			}

			try {
				qtyRequest = storeInternalIndentT.getQtyRequest();
			} catch (Exception e) {
				qtyRequest = 0;
			}

			hData = new HashMap<String, Object>();

			Map<String, Object> groupByItemMap = new HashMap<String, Object>();
			String str = "select inp.item_id,sum(inp.closing_stock) from store_item_batch_stock inp where department_id = "
				+ box.get(FROM_WARD) + " group by inp.item_id";

			List<StoreItemBatchStock> groupByItemList = session.createSQLQuery(
					str).list();

			for (Iterator iterator2 = groupByItemList.iterator(); iterator2
			.hasNext();) {
				Object[] obj = (Object[]) iterator2.next();
				// Integer itemId = (Integer) obj[0];
				BigDecimal closingStock = (BigDecimal) obj[1];

				groupByItemMap.put(obj[0].toString(), closingStock);
			}
			hData.put("id", id);
			/*if (groupByItemMap.get(id) != null) {
				hData.put("stock", groupByItemMap.get(id));
			} else {
				hData.put("stock", 0);
			}*/
			//new added by yogesh
			int qtyInHand = 0 ;
			try {
				qtyInHand = storeInternalIndentT.getStockInHand();
			} catch (Exception e) {
				qtyInHand = 0;
			}

			hData.put("stock",qtyInHand);
			hData.put("pvms", pvms);
			hData.put("nomenclature", nomenclature);
			hData.put("au", au);
			hData.put("qtymmf", qtymmf);
			hData.put("qtyRequest", qtyRequest);
			vResult.add(hData);
		}
		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}
		try {
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);
		} catch (Exception e) {
			e.printStackTrace();
		}
		if (map.get("demandNo") == null) {
			map.put("demandNo", box.get("demandNo"));
		}
		if (box.get("demandNo") != null) {
			map.put("newDemandNo", box.get("demandNo"));
		}
		map.put("pagedArray", pagedArray);
		return map;
	}	/*
	 * ----------------------------End of Methods for Raisisng CIV---------------
	 */
	public Map<String, Object> getItemDetailsForDepartmentIndent(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		session = (Session) getSession();
		String pvms = null;
		String commonName = null;
		String nomenclature = null;
		String strength = null;
		String au = null;
		// BigDecimal qtymmf = null;
		BigDecimal qtyInHand = null;
		int item_id = 0;

		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector indentTItems = new Vector();
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
		List<StoreIndentT> storeIndentTList = new ArrayList<StoreIndentT>();
		List<StoreSetup> storeSetupList = new ArrayList<StoreSetup>();
		List objectList = new ArrayList();
		Criteria c = null;
		Map dateMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) dateMap.get("currentDate");
		String mmfDate = date.substring(6, date.length());
		int mmfYear = Integer.parseInt(mmfDate);
		String mmfType = "";
		int month, year;

		Calendar cal = Calendar.getInstance();
		Calendar calendar = Calendar.getInstance();
		month = calendar.get(Calendar.MONTH) + 1;
		if (month < 4) {
			year = calendar.get(Calendar.YEAR) - 1;
		} else {
			year = calendar.get(Calendar.YEAR);
		}
		org.springframework.orm.hibernate3.HibernateTemplate hbt1 = getHibernateTemplate();
		hbt1.setFlushModeName("FLUSH_EAGER");
		hbt1.setCheckWriteOperations(false);

		String demandDate = box.getString(DEMAND_DATE);
		demandDate = demandDate.substring(6, demandDate.length());
		int demandYear = Integer.parseInt(demandDate);
		try {
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();

			if (box.getInt("internalIndentId") != 0)
				storeInternalIndentTList = hbt
				.find("from jkt.hms.masters.business.StoreInternalIndentT as inp where inp.Internal.Id = "
						+ box.getInt("internalIndentId"));
			for (Iterator iterator = storeInternalIndentTList.iterator(); iterator
			.hasNext();) {
				StoreInternalIndentT storeInternalIndentT = (StoreInternalIndentT) iterator
				.next();
				indentTItems.add(storeInternalIndentT.getItem().getId());
			}

			//	String queryString = null;
			//	queryString = "from jkt.hms.masters.business.MasStoreItem as inp where 1 = 1 ";
			if (box.get("search_text") != null
					&& box.getString("search_text").length() > 0) {
				//	String str = "%" + box.getString("search_text") + "%";
				String str = box.get("search_text");
				if (str!=null && str.length()>0)
				{
					str = "%"+ str.replace(" ", "%")+ "%";
					c = session.createCriteria(MasStoreItem.class).add(
							Restrictions.eq("Status", "y")).add(
									Restrictions.like("Nomenclature", str));
					itemList = c.list();
				} }else if (box.get("pvms") != null
						&& box.getString("pvms").length() > 0) {
					String str2= "%"+box.get("pvms")+"%";
					c = session.createCriteria(MasStoreItem.class).add(
							Restrictions.eq("Status", "y")).add(
									Restrictions.like("PvmsNo",str2 )).addOrder(
											Order.asc("Id"));
					c.setFirstResult(0);
					c.setMaxResults(1000);
					itemList = c.list();
				} else if (box.get("commonName") != null
						&& box.getString("commonName").length() > 0) {
					String str1 = box.getString("commonName");
					str1 = "%"+ str1.replace(" ", "%")+ "%";
					c = session.createCriteria(MasStoreItem.class).add(
							Restrictions.eq("Status", "y")).add(
									Restrictions.like("CommonName", str1));
					itemList = c.list();
				}else {
					c = session.createCriteria(MasStoreItem.class).add(
							Restrictions.eq("Status", "y")).addOrder(
									Order.asc("Id"));
					c.setFirstResult(0);
					c.setMaxResults(1000);
					itemList = c.list();
				}

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		storeSetupList = hbt1.find("from jkt.hms.masters.business.StoreSetup");
		int echs_dept_id = storeSetupList.get(0).getStoreEchs().getId();
		int echs_disp_id = storeSetupList.get(0).getStoreEchsDispensary().getId();
		int exp_dept_id = storeSetupList.get(0).getStoreExpendable().getId();
		int DISP_dept_id = storeSetupList.get(0).getStoreDispensary().getId();


		// mmfType = "e";
		if (box.getInt("toWard") == DISP_dept_id
				|| box.getInt("toWard") == exp_dept_id) {
			mmfType = "e";
		} else if (box.getInt("toWard") == echs_dept_id || box.getInt("toWard") == echs_disp_id) {
			mmfType = "h";
		}

		for (Iterator iterator = itemList.iterator(); iterator.hasNext();) {
			MasStoreItem masStoreItem = (MasStoreItem) iterator.next();
			BigDecimal qtymmf = null;
			String currYearMmfSumQuery = "";
			// check for dispensary
			List<StoreMmfDepartmentT> storeMmfTList = new ArrayList<StoreMmfDepartmentT>();
			if (box.getInt("deptId") == storeSetupList.get(0)
					.getStoreDispensary().getId() || box.getInt("deptId") == storeSetupList.get(0)
					.getStoreEchsDispensary().getId()) {

				currYearMmfSumQuery = "SELECT sum(curr_year_mmf) FROM store_mmf_department_t t,store_mmf_department_m m,mas_store_item s where t.store_mmf_department_m_id=m.id and t.item_id=s.item_id and m.mmf_for_the_year='"
					+ year
					+ "'"
					+ " and s.item_id ='"
					+ masStoreItem.getId()
					+ "' and m.mmf_store_type='"
					+ mmfType + "'";
				List objectCurrentYearList = new ArrayList();
				objectCurrentYearList = (List) session.createSQLQuery(
						currYearMmfSumQuery).list();

				storeMmfTList = session.createCriteria(
						StoreMmfDepartmentT.class).createAlias(
								"StoreMmfDepartmentM", "m").add(
										Restrictions.eq("m.MmfStoreType", mmfType)).add(
												Restrictions.eq("m.MmfForTheYear", year))
												.add(
														Restrictions.eq("m.MmfForTheMonth", year))
														.add(
																Restrictions.eq("m.Status", "p")).add(
																		Restrictions.eq("m.StoreWardDept.Id", box
																				.getInt("fromWard"))).add(
																						Restrictions.eq("Item.Id", masStoreItem.getId()))
																						.list();
				/*
				 * if(storeMmfTList!=null&&storeMmfTList.size()>0){
				 * if(storeMmfTList.get(0)!=null){ StoreMmfDepartmentT storemmft =
				 * (StoreMmfDepartmentT) storeMmfTList.get(0); qtymmf
				 * =storemmft.getCurrYearMmf(); }else{ qtymmf = new
				 * BigDecimal(0); } } else { qtymmf = new BigDecimal(0); }
				 */

				if (objectCurrentYearList != null
						&& objectCurrentYearList.size() > 0) {
					if (objectCurrentYearList.get(0) != null) {
						qtymmf = new BigDecimal(""
								+ objectCurrentYearList.get(0));
					} else {
						qtymmf = new BigDecimal(0);
					}
				} else {
					qtymmf = new BigDecimal(0);
				}

				/*
				 * storeIndentTList = session.createCriteria(StoreIndentT.class)
				 * .createAlias("Indent","m")
				 * .add(Restrictions.eq("m.MmfForTheYear", demandYear))
				 * .add(Restrictions.eq("Item.Id",
				 * masStoreItem.getId())).list(); if(storeIndentTList != null &&
				 * storeIndentTList.size() > 0) { qtymmf =
				 * storeIndentTList.get(0).getQtyInMmf();
				 * ////System.out.println("in
				 * getItemDetailsForDepartmentIndent-----------------------in
				 * ifffff and quantity in mmf-------"+qtymmf);; } else {
				 * ////System.out.println("dxemand year
				 * value--------------"+demandYear); qtymmf = new BigDecimal(0);
				 * ////System.out.println("in
				 * getItemDetailsForDepartmentIndent&&&&&&&&&&&&&&&&&&&&&&&&&&&&
				 * and quantity in mmf-------"+qtymmf);; }
				 */

				List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
				String str = "select sum(inp.closing_stock) from store_item_batch_stock inp where department_id = "
					+ box.getInt("fromWard")
					+ " and item_id = "
					+ masStoreItem.getId();
				storeItemBatchStockList = session.createSQLQuery(str).list();
				if (storeItemBatchStockList != null
						&& storeItemBatchStockList.size() > 0) {
					Iterator iterator1 = storeItemBatchStockList.iterator();
					while (iterator1.hasNext()) {
						qtyInHand = (BigDecimal) iterator1.next();
					}
				} else {
					qtyInHand = new BigDecimal(0);
				}

				// calculate loan out quantity
				str = "select sum(b.qty_issued) from store_issue_m a, store_issue_t b where a.id  = b.issue_m_id and a.status='o' and  a.issue_type='l' and b.item_issued= "
					+ masStoreItem.getId();
				objectList = session.createSQLQuery(str).list();
			} else {

				currYearMmfSumQuery = "SELECT sum(curr_year_mmf) FROM store_mmf_department_t t,store_mmf_department_m m,mas_store_item s where t.store_mmf_department_m_id=m.id and t.item_id=s.item_id and m.mmf_for_the_year='"
					+ year
					+ "'"
					+ " and s.item_id ='"
					+ masStoreItem.getId()
					+ "' and m.mmf_store_type='"
					+ mmfType + "'";
				List objectCurrentYearList = new ArrayList();
				objectCurrentYearList = (List) session.createSQLQuery(
						currYearMmfSumQuery).list();

				storeMmfTList = session.createCriteria(
						StoreMmfDepartmentT.class).createAlias(
								"StoreMmfDepartmentM", "m").add(
										Restrictions.eq("m.MmfStoreType", mmfType)).add(
												Restrictions.eq("m.MmfForTheYear", year)).add(
														Restrictions.eq("m.Status", "p")).add(
																Restrictions.eq("m.StoreWardDept.Id", box
																		.getInt("fromWard"))).add(
																				Restrictions.eq("Item.Id", masStoreItem.getId()))
																				.list();

				// BigDecimal qtymmf = null;

				if (storeMmfTList != null && storeMmfTList.size() > 0) {
					if (storeMmfTList.get(0) != null) {
						StoreMmfDepartmentT storemmft = (StoreMmfDepartmentT) storeMmfTList
						.get(0);
						qtymmf = storemmft.getCurrYearMmf();
					} else {
						qtymmf = new BigDecimal(0);
					}
				} else {
					qtymmf = new BigDecimal(0);
				}

				/*
				 * storeMmfDepartmentTList =
				 * session.createCriteria(StoreMmfDepartmentT.class)
				 * .createAlias("StoreMmfDepartmentM","m")
				 * .add(Restrictions.eq("m.MmfForTheYear", demandYear))
				 * .add(Restrictions.eq("m.StoreWardDept.Id",
				 * box.getInt(FROM_WARD))) .add(Restrictions.eq("Item.Id",
				 * masStoreItem.getId())).list();
				 *
				 * if(storeMmfDepartmentTList != null &&
				 * storeMmfDepartmentTList.size() > 0) { qtymmf =
				 * storeMmfDepartmentTList.get(0).getMmfInQty(); } else { qtymmf =
				 * new BigDecimal(0); }
				 */

				List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
				String str = "select sum(inp.closing_stock) from store_item_batch_stock as inp where department_id = "
					+ box.getInt("fromWard")
					+ " and item_id = "
					+ masStoreItem.getId()+"";
				storeItemBatchStockList = session.createSQLQuery(str).list();
				if (storeItemBatchStockList != null
						&& storeItemBatchStockList.size() > 0) {
					Iterator iterator1 = storeItemBatchStockList.iterator();
					while (iterator1.hasNext()) {
						qtyInHand = (BigDecimal) iterator1.next();
					}
				} else
					qtyInHand = new BigDecimal(0);
			}

			// get item details to show in the Grid
			try {
				pvms = masStoreItem.getPvmsNo();
			} catch (Exception e) {
				pvms = "";
			}

			try {
				nomenclature = masStoreItem.getNomenclature();
			} catch (Exception e) {
				nomenclature = "";
			}

			try {
				if(masStoreItem.getCommonName()!= null)
					commonName = masStoreItem.getCommonName();
				else
					commonName = "No Common Name.";
			} catch (Exception e) {
				commonName = "";
			}

			try {
				strength = masStoreItem.getStrength();
			} catch (Exception e) {
				strength = "";
			}

			try {
				au = masStoreItem.getItemConversion().getPurchaseUnit()
				.getUnitName();
			} catch (Exception e) {
				au = "";
			}

			try {
				item_id = masStoreItem.getId();
			} catch (Exception e) {
				item_id = 0;
			}

			if (!indentTItems.contains(item_id)) {

				boolean mmfzero = false;
				if (qtymmf.compareTo(new BigDecimal("0")) == 0) {
					mmfzero = true;
				}
				if (box.get("show").equals("true")) {
					hData = new HashMap<String, Object>();
					BigDecimal qtyReq = new BigDecimal("0");

					hData.put("itemId", item_id);
					hData.put("pvms", pvms);
					hData.put("nomenclature", nomenclature);
					hData.put("strength", strength);
					hData.put("qtymmf", qtymmf);
					hData.put("commonName", commonName);


					if (qtyInHand != null) {
						hData.put("qtyInHand",
								new Integer(qtyInHand.intValue()));
						qtyReq = qtymmf.subtract(qtyInHand);
					} else {
						hData.put("qtyInHand", new Integer(0));
						qtyReq = qtymmf;
					}

					hData.put("qtyRequest", qtyReq);

					if (objectList != null && objectList.size() > 0
							&& objectList.get(0) != null)
						hData.put("loanOut", objectList.get(0).toString());
					else
						hData.put("loanOut", "0");

					// hData.put(TENDER_ANNREQ, annreq);
					hData.put("au", au);

					vResult.add(hData);
				} else {
					if (!mmfzero) {
						hData = new HashMap<String, Object>();
						BigDecimal qtyReq = new BigDecimal("0");

						hData.put("itemId", item_id);
						hData.put("pvms", pvms);
						hData.put("nomenclature", nomenclature);
						hData.put("strength", strength);
						hData.put("qtymmf", qtymmf);
						hData.put("commonName", commonName);

						if (qtyInHand != null) {
							hData.put("qtyInHand", new Integer(qtyInHand
									.intValue()));
							qtyReq = qtymmf.subtract(qtyInHand);
						} else {
							hData.put("qtyInHand", new Integer(0));
							qtyReq = qtymmf;
						}

						hData.put("qtyRequest", qtyReq);

						if (objectList != null && objectList.size() > 0
								&& objectList.get(0) != null)
							hData.put("loanOut", objectList.get(0).toString());
						else
							hData.put("loanOut", "0");

						// hData.put(TENDER_ANNREQ, annreq);
						hData.put("au", au);

						vResult.add(hData);
					}
				}

				/*
				 * Map<String, Object> groupByItemMap = new HashMap<String,
				 * Object>(); List<StoreItemBatchStock> groupByItemList = new
				 * ArrayList<StoreItemBatchStock>(); String str = "select
				 * inp.item_id,sum(inp.closing_stock) from
				 * store_item_batch_stock as inp where department_id =
				 * "+box.get(FROM_WARD)+" group by inp.item_id"; groupByItemList =
				 * session.createSQLQuery(str).list();
				 *
				 * Iterator iterator = listOfItemsInStock.iterator(); while
				 * (iterator.hasNext()) { Object[] pair = (Object[])
				 * iterator.next(); StoreItemBatchStock storeItemBatchStock =
				 * (StoreItemBatchStock) pair[0]; BigDecimal qtyInHand =
				 * (BigDecimal) pair[1]; String pvmsNo =
				 * storeItemBatchStock.getItem().getPvmsNo(); }
				 *
				 * for (Iterator iterator2 = groupByItemList.iterator();
				 * iterator2.hasNext();) { Object[] obj =(Object[])
				 * iterator2.next(); //Integer itemId = (Integer) obj[0];
				 * BigDecimal closingStock = (BigDecimal) obj[1];
				 *
				 * groupByItemMap.put(obj[0].toString(),closingStock); }
				 *
				 * if(groupByItemMap.get(item_id) != null){ hData.put("stock",
				 * groupByItemMap.get(item_id)); //System.out.println("stock
				 * groupbyItemMap=================== " +
				 * groupByItemMap.get(item_id)); }else{ hData.put("stock", 0); }
				 */
				// //System.out.println("::::::::"+qtymmf);
				/*
				 * BigDecimal qtyReq = new BigDecimal("0");
				 *
				 * hData.put("itemId", item_id); hData.put("pvms", pvms);
				 * hData.put("nomenclature", nomenclature);
				 * hData.put("strength", strength); hData.put("qtymmf", qtymmf);
				 *
				 *
				 * if (qtyInHand !=null){ hData.put("qtyInHand", new
				 * Integer(qtyInHand.intValue())); qtyReq =
				 * qtymmf.subtract(qtyInHand); } else{ hData.put("qtyInHand",
				 * new Integer(0)); qtyReq = qtymmf; }
				 *
				 *
				 * hData.put("qtyRequest", qtyReq);
				 *
				 * if (objectList!=null && objectList.size()>0 &&
				 * objectList.get(0)!=null)
				 * hData.put("loanOut",objectList.get(0).toString()); else
				 * hData.put("loanOut", "0");
				 *
				 * //hData.put(TENDER_ANNREQ, annreq); hData.put("au", au);
				 *
				 * vResult.add(hData);
				 */
			}
		}

		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}
		try {
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,box);
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("pagedArray", pagedArray);
		// map.put("box", box);
		return map;
	}


	public Map<String, Object> getItemDetailsForDepartmentIndentForNextRecord(
			Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		session = (Session) getSession();
		String pvms = null;
		String nomenclature = null;
		String strength = null;
		String au = null;
		BigDecimal qtymmf = null;
		BigDecimal qtyInHand = null;
		int item_id = 0;

		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector indentTItems = new Vector();
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
		List<StoreIndentT> storeIndentTList = new ArrayList<StoreIndentT>();
		List<StoreSetup> storeSetupList = new ArrayList<StoreSetup>();
		List objectList = new ArrayList();
		Criteria c = null;

		String demandDate = box.getString(DEMAND_DATE);
		demandDate = demandDate.substring(6, demandDate.length());
		int demandYear = Integer.parseInt(demandDate);
		try {
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();

			if (box.getInt("internalIndentId") != 0)
				storeInternalIndentTList = hbt
				.find("from jkt.hms.masters.business.StoreInternalIndentT as inp where inp.Internal.Id = "
						+ box.getInt("internalIndentId"));

			for (Iterator iterator = storeInternalIndentTList.iterator(); iterator
			.hasNext();) {
				StoreInternalIndentT storeInternalIndentT = (StoreInternalIndentT) iterator
				.next();
				indentTItems.add(storeInternalIndentT.getItem().getId());
			}

			String queryString = null;
			queryString = "from jkt.hms.masters.business.MasStoreItem as inp where 1 = 1 ";

			if (box.get("search_text") != null
					&& box.getString("search_text").length() > 0) {

				String str = "%" + box.getString("search_text") + "%";
				c = session.createCriteria(MasStoreItem.class).add(
						Restrictions.eq("Status", "y")).add(
								Restrictions.like("Nomenclature", str));
				itemList = c.list();
			} else {
				int itemId = 0;
				if (box.getString("buttonName").equals("next")) {
					itemId = box.getInt("itemId");
				} else {
					itemId = Integer.parseInt(box
							.getString("itemIdForNextRecord"));
				}

				c = session.createCriteria(MasStoreItem.class).add(
						Restrictions.eq("Status", "y")).add(
								Restrictions.gt("Id", itemId))
								.addOrder(Order.asc("Id"));
				c.setFirstResult(0);
				c.setMaxResults(1000);
				itemList = c.list();
				String itemIdForNextRecord = Integer.toString(itemId);
				map.put("itemIdForNextRecord", itemIdForNextRecord);
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		storeSetupList = session.createCriteria(StoreSetup.class).list();

		for (Iterator iterator = itemList.iterator(); iterator.hasNext();) {
			MasStoreItem masStoreItem = (MasStoreItem) iterator.next();

			// check for dispensary
			if (box.getInt("deptId") == storeSetupList.get(0)
					.getStoreDispensary().getId()) {
				storeIndentTList = session.createCriteria(StoreIndentT.class)
				.createAlias("Indent", "m").add(
						Restrictions.eq("m.MmfForTheYear", demandYear))
						.add(Restrictions.eq("Item.Id", masStoreItem.getId()))
						.list();
				if (storeIndentTList != null && storeIndentTList.size() > 0) {
					qtymmf = storeIndentTList.get(0).getQtyInMmf();
				} else {
					qtymmf = new BigDecimal(0);
				}

				List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
				String str = "select sum(inp.closing_stock) from store_item_batch_stock as inp where department_id = "
					+ box.getInt("fromWard")
					+ " and item_id = "
					+ masStoreItem.getId();
				storeItemBatchStockList = session.createSQLQuery(str).list();
				if (storeItemBatchStockList != null
						&& storeItemBatchStockList.size() > 0) {
					Iterator iterator1 = storeItemBatchStockList.iterator();
					while (iterator1.hasNext()) {
						qtyInHand = (BigDecimal) iterator1.next();
					}
				} else {
					qtyInHand = new BigDecimal(0);
				}

				// calculate loan out quantity
				str = "select sum(b.qty_issued) from store_issue_m a, store_issue_t b where a.id  = b.issue_m_id and a.status='o' and  a.issue_type='l' and b.item_issued= "
					+ item_id;
				objectList = session.createSQLQuery(str).list();

			} else {
				storeMmfDepartmentTList = session.createCriteria(
						StoreMmfDepartmentT.class).createAlias(
								"StoreMmfDepartmentM", "m").add(
										Restrictions.eq("m.MmfForTheYear", demandYear)).add(
												Restrictions.eq("m.StoreWardDept.Id", box
														.getInt(FROM_WARD))).add(
																Restrictions.eq("Item.Id", masStoreItem.getId()))
																.list();

				if (storeMmfDepartmentTList != null
						&& storeMmfDepartmentTList.size() > 0) {
					qtymmf = storeMmfDepartmentTList.get(0).getMmfInQty();
				} else {
					qtymmf = new BigDecimal(0);
				}

				List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
				String str = "select sum(inp.closing_stock) from store_item_batch_stock as inp where department_id = "
					+ box.getInt("fromWard")
					+ " and item_id = "
					+ masStoreItem.getId();
				storeItemBatchStockList = session.createSQLQuery(str).list();
				if (storeItemBatchStockList != null
						&& storeItemBatchStockList.size() > 0) {
					Iterator iterator1 = storeItemBatchStockList.iterator();
					while (iterator1.hasNext()) {
						qtyInHand = (BigDecimal) iterator1.next();
					}
				} else
					qtyInHand = new BigDecimal(0);
			}

			// get item details to show in the Grid
			try {
				pvms = masStoreItem.getPvmsNo();
			} catch (Exception e) {
				pvms = "";
			}

			try {
				nomenclature = masStoreItem.getNomenclature();
			} catch (Exception e) {
				nomenclature = "";
			}

			try {
				strength = masStoreItem.getStrength();
			} catch (Exception e) {
				strength = "";
			}

			try {
				au = masStoreItem.getItemConversion().getPurchaseUnit()
				.getUnitName();
			} catch (Exception e) {
				au = "";
			}

			try {
				item_id = masStoreItem.getId();
			} catch (Exception e) {
				item_id = 0;
			}

			if (!indentTItems.contains(item_id)) {
				hData = new HashMap<String, Object>();
				/*
				 * Map<String, Object> groupByItemMap = new HashMap<String,
				 * Object>(); List<StoreItemBatchStock> groupByItemList = new
				 * ArrayList<StoreItemBatchStock>(); String str = "select
				 * inp.item_id,sum(inp.closing_stock) from
				 * store_item_batch_stock as inp where department_id =
				 * "+box.get(FROM_WARD)+" group by inp.item_id"; groupByItemList =
				 * session.createSQLQuery(str).list();
				 *
				 * Iterator iterator = listOfItemsInStock.iterator(); while
				 * (iterator.hasNext()) { Object[] pair = (Object[])
				 * iterator.next(); StoreItemBatchStock storeItemBatchStock =
				 * (StoreItemBatchStock) pair[0]; BigDecimal qtyInHand =
				 * (BigDecimal) pair[1]; String pvmsNo =
				 * storeItemBatchStock.getItem().getPvmsNo(); }
				 *
				 * for (Iterator iterator2 = groupByItemList.iterator();
				 * iterator2.hasNext();) { Object[] obj =(Object[])
				 * iterator2.next(); //Integer itemId = (Integer) obj[0];
				 * BigDecimal closingStock = (BigDecimal) obj[1];
				 *
				 * groupByItemMap.put(obj[0].toString(),closingStock); }
				 *
				 * if(groupByItemMap.get(item_id) != null){ hData.put("stock",
				 * groupByItemMap.get(item_id)); //System.out.println("stock
				 * groupbyItemMap=================== " +
				 * groupByItemMap.get(item_id)); }else{ hData.put("stock", 0); }
				 */
				hData.put("itemId", item_id);
				hData.put("pvms", pvms);
				hData.put("nomenclature", nomenclature);
				hData.put("strength", strength);
				hData.put("qtymmf", new Integer(qtymmf.intValue()));

				if (qtyInHand != null)
					hData.put("qtyInHand", new Integer(qtyInHand.intValue()));
				else
					hData.put("qtyInHand", new Integer(0));

				hData.put("qtyRequest", new Integer(qtymmf.intValue()));

				if (objectList != null && objectList.size() > 0
						&& objectList.get(0) != null)
					hData.put("loanOut", objectList.get(0).toString());
				else
					hData.put("loanOut", "0");

				// hData.put(TENDER_ANNREQ, annreq);
				hData.put("au", au);

				vResult.add(hData);
			}
		}

		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}
		try {
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("pagedArray", pagedArray);
		// map.put("box", box);
		return map;
	}

	public Map<String, Object> doAddInternalIndentItems(Box box)
	{Session session = (Session) getSession();
    Map<String, Object> map = new HashMap<String, Object>();

    List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
    session = (Session) getSession();

    Vector items1 = box.getVector("itemId");
    Vector items = new Vector();
    try {
        for (int i = 0; i < items1.size(); i++) {
            if (!items1.get(i).toString().equals("")) {
                items.add(items1.get(i));
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
    }

    // Vector qtymmf = box.getVector("qtymmf");
    Vector qtyRequest = box.getVector("qtyRequest");
    Vector stock = box.getVector("stock");
    Vector items_to_be_added = box.getVector(ITEMS_TO_BE_ADDED);
    // Vector annreq = box.getVector(TENDER_ANNREQ);
    Vector reason = box.getVector("reason"); // add by javed khan


    int deptId = box.getInt(FROM_WARD);
    int hospitalId =Integer.parseInt (""+box.get("hospitalId"));
    int internalIndentId = box.getInt("internalIndentId");
    String demandNo = box.get(DEMAND_NO);
    int newinternalIndentId = 0;

    StoreInternalIndentM storeInternalIndentM = null;
    StoreInternalIndentM newMObj = null;
    StoreInternalIndentT storeInternalIndentT = null;
    MasStoreItem masStoreItem = null;
    int sr_no = 0;
    // int currentYear = box.getInt(MMF_DEPARTMENT_DATE);
    Transaction tx =null;
    try {
        tx = session.beginTransaction();
        List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
        List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();

        HibernateTemplate hbt = getHibernateTemplate();
        hbt.setFlushModeName("FLUSH_EAGER");
        hbt.setCheckWriteOperations(false);

        if (box.getInt("internalIndentId") != 0) {
            // storeMmfDepartmentMList = hbt.find("from
            // jkt.hms.masters.business.StoreMmfDepartmentM as a where a.Id
            // ="+mmfMasterId+" and a.StoreWardDept.Id=" +
            // box.get(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT));
            storeInternalIndentMList = hbt
            .find("from jkt.hms.masters.business.StoreInternalIndentM as a where a.Id ="
                    + internalIndentId);
            // storeMmfDepartmentTList = hbt.find("from
            // jkt.hms.masters.business.StoreMmfDepartmentT as b where
            // b.StoreMmfDepartmentM.Id ="+mmfMasterId+" and
            // b.StoreMmfDepartmentM.MmfForTheYear = " +
            // box.getInt(MMF_DEPARTMENT_DATE) + " order by b.SrNo desc");
            storeInternalIndentTList = hbt
            .find("from jkt.hms.masters.business.StoreInternalIndentT as b where b.Internal.Id ="
                    + internalIndentId + " order by b.SrNo desc");

            if (storeInternalIndentMList != null
                    && storeInternalIndentMList.size() > 0) {
                storeInternalIndentM = (StoreInternalIndentM) storeInternalIndentMList
                .get(0);
            }

            if (storeInternalIndentTList != null
                    && storeInternalIndentTList.size() > 0) {
                sr_no = storeInternalIndentTList.get(0).getSrNo()
                .intValue();
            }
            newinternalIndentId = storeInternalIndentM.getId();
        } else {
            /*
             * Code for Duplicate Indent No
             * Date 21 Jan 2011
             */
            List<StoreInternalIndentM> storeInternalIndentMForDemandNoList = new ArrayList<StoreInternalIndentM>();
            storeInternalIndentMForDemandNoList=hbt.find("from jkt.hms.masters.business.StoreInternalIndentM as siim where siim.Department.Id="+deptId+" and siim.Hospital.Id="+hospitalId+" and siim.DemandNo='"+demandNo+"'");

            if(storeInternalIndentMForDemandNoList.size()>0){
                //log.debug("Check For Duplicate Indent No storeInternalIndentMForDemandNoList----"+storeInternalIndentMForDemandNoList.size());
                String finalDemandNo="";
                List<StoreFyDocumentNo> demandNoForDuplicateList = new ArrayList<StoreFyDocumentNo>();
                demandNoForDuplicateList = session.createCriteria(StoreFyDocumentNo.class)
                .add(Restrictions.eq("Department.Id", deptId))
                .add(Restrictions.eq("Hospital.Id", hospitalId)).list();

                List<MasDepartment> departmentForIndentNoList = new ArrayList<MasDepartment>();
                departmentForIndentNoList=getHibernateTemplate().find("from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y' and mi.Id="+deptId+"");
                String deptType="";
                /*if(departmentForIndentNoList.size()>0){
                    for (MasDepartment masDepartment : departmentForIndentNoList) {
                        deptType="IND_"+masDepartment.getDepartmentType().getDepartmentTypeCode();
                    }
                }
                Map<String, Object> maxMap=new HashMap<String, Object>();
                maxMap.put("deptType", deptType);
                    try {
                        maxMap.put("no", demandNo);
                        demandNo=getMaxNoByDeptCode(maxMap);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                 */
                /*
                 * End Of caode for duplicate Indent Id
                 * Date 21 Jan 2011
                 * Date 21 Jan 2011
                 */
            }




            newMObj = new StoreInternalIndentM();
            if (box.getInt(APPROVED_BY_EMPLOYEE_ID_DEPENDENT_INDENT) != 0) {
                MasEmployee masEmployee1 = new MasEmployee();
                masEmployee1.setId(box
                        .getInt(APPROVED_BY_EMPLOYEE_ID_DEPENDENT_INDENT));
                newMObj.setApprovedBy(masEmployee1);
            }

            if (box.getInt(REQUEST_BY_EMPLOYEE_ID_DEPENDENT_INDENT) != 0) {
                MasEmployee masEmployee2 = new MasEmployee();
                masEmployee2.setId(box
                        .getInt(REQUEST_BY_EMPLOYEE_ID_DEPENDENT_INDENT));
                newMObj.setRequestedBy(masEmployee2);
            }
            /*int storeDepartmentId = 0;
            if (box.get("storeDepartmentId") != null
                    && !box.get("storeDepartmentId").equals("")) {
                storeDepartmentId = box.getInt("storeDepartmentId");

            }
            if (storeDepartmentId != 0) {
                MasDepartment masdepartment1 = new MasDepartment();
                masdepartment1.setId(storeDepartmentId);

                newMObj.setStoreDepartment(masdepartment1);
            }*/

            newMObj.setDemandNo(demandNo);
            newMObj.setLastChgBy(box.get(CHANGED_BY));

            newMObj.setLastChgDate(HMSUtil
                    .convertStringTypeDateToDateType(box
                            .getString(CHANGED_DATE)));

            // comment by javed khan

            //newMObj.setStatus("o");

            // add by javed khan
            newMObj.setStatus("u");

            MasDepartment fromDept = new MasDepartment();
            fromDept.setId(box.getInt(FROM_WARD));
            newMObj.setDepartment(fromDept);

            MasDepartment toDept = new MasDepartment();
            toDept.setId(box.getInt(TO_WARD));
            newMObj.setToStore(toDept);

            MasHospital masHospital = new MasHospital();
            masHospital.setId(box.getInt("hospitalId"));
            newMObj.setHospital(masHospital);

            newMObj.setDemandDate(HMSUtil
                    .convertStringTypeDateToDateType(box
                            .getString(DEMAND_DATE)));
            hbt.save(newMObj);
            hbt.refresh(newMObj);

            //session.save(newMObj);
            //session.refresh(newMObj);
            newinternalIndentId = newMObj.getId();

            // Auto-Increment No for demand No of Department Indent

            List<StoreFyDocumentNo> demandNoList = new ArrayList<StoreFyDocumentNo>();
            demandNoList = session.createCriteria(StoreFyDocumentNo.class)
            .add(Restrictions.eq("Department.Id", deptId))
            .add(Restrictions.eq("Hospital.Id", hospitalId)).list();
            if (demandNoList.size() > 0) {
                StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) demandNoList
                .get(0);
                storeFyDocumentNo.setDemandNo(demandNo);

                hbt.save(storeFyDocumentNo);
                hbt.refresh(storeFyDocumentNo);
                //session.saveOrUpdate(storeFyDocumentNo);
                //session.refresh(storeFyDocumentNo);
            }
        }
        for (int i = 0; i < items1.size(); i++) {
            if (items1.get(i) != null
                    && !items1.get(i).toString().equals("")) {

                masStoreItem = new MasStoreItem();
                masStoreItem.setId(Integer
                        .valueOf(items1.get(i).toString()));
                storeInternalIndentT = new StoreInternalIndentT();

                storeInternalIndentT.setItem(masStoreItem);
                if (box.getInt("internalIndentId") != 0) {
                    // Master already exists
                    storeInternalIndentT.setInternal(storeInternalIndentM);
                } else {
                    // Create new department Master record
                    storeInternalIndentT.setInternal(newMObj);
                }
                // storeInternalIndentT.setMmfQty(Integer.valueOf(qtymmf.get(i).toString()));

                int stockQnt = 0;
                stockQnt = new BigDecimal(stock.get(i).toString())
                .intValue();
                //if( !qtyRequest.get(i).equals("")){
                int qauntityRecd = new BigDecimal(qtyRequest.get(i)
                        .toString()).intValue();
                storeInternalIndentT.setQtyRequest(qauntityRecd);
                //}
                storeInternalIndentT.setSrNo(++sr_no);
                storeInternalIndentT.setQtyRequest(qauntityRecd);
                /*String qry = "select sum(closing_stock) from store_item_batch_stock where item_id="
                        + masStoreItem.getId()
                        + " and department_id="
                        + box.get(FROM_WARD) + " ";
                List<Object> storeItemBatchstockList = session
                        .createSQLQuery(qry).list();
                if (storeItemBatchstockList != null
                        && storeItemBatchstockList.size() > 0) {
                    if (storeItemBatchstockList.get(0) != null) {
                        storeInternalIndentT
                                .setStockInHand(((BigDecimal) storeItemBatchstockList
                                        .get(0)).intValue());
                    } else {
                        storeInternalIndentT.setStockInHand(0);
                    }
                } else {
                    storeInternalIndentT.setStockInHand(0);
                }*/
                storeInternalIndentT.setStockInHand(stockQnt);
                MasDepartment department = new MasDepartment();
                department.setId(box.getInt(FROM_WARD));
                storeInternalIndentT.setDepartment(department);

                // add by javed fro coulmn ReasonForDemand

                if(reason.get(i)!= null && !reason.get(i).equals("")){
                    storeInternalIndentT.setReasonForDemand(reason.get(i).toString());
                }else{
                    storeInternalIndentT.setReasonForDemand("");
                }
                hbt.save(storeInternalIndentT);
                hbt.refresh(storeInternalIndentT);
                /*session.save(storeInternalIndentT);
                session.refresh(storeInternalIndentT);*/

            }
        }

        box.put("internalIndentId", newinternalIndentId);
        /*if (!box.getString("itemIdForNextRecord").equals("null")) {
            // map = getItemDetailsForDepartmentIndentForNextRecord(box);
        } else {
            // map = getItemDetailsForDepartmentIndent(box);
        }*/
        List<StoreInternalIndentM> storeInternalIndentMList2 = session
        .createCriteria(StoreInternalIndentM.class)
        .add(Restrictions.eq("Id", newinternalIndentId)).list();
        box.put(DEMAND_NO, storeInternalIndentMList2.get(0).getDemandNo());
        tx.commit();
    } catch (HibernateException e) {
        e.printStackTrace();
        if (tx != null) {
            tx.rollback();
        }
    }

    map.put("newinternalIndentId", newinternalIndentId);

    return map;}

	public Map<String, Object> updateGridItemsInDepartmentIndent(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();
		StoreInternalIndentT storeInternalIndentT = null;
		try {
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			int deptId = box.getInt(TO_WARD);
			int approvedByEmpId = box
			.getInt(APPROVED_BY_EMPLOYEE_ID_DEPENDENT_INDENT);
			int requestBYEmpId = box
			.getInt(REQUEST_BY_EMPLOYEE_ID_DEPENDENT_INDENT);
			String demandNo = box.getString(DEMAND_NO);
			int internalIndentId = box.getInt("internalIndentId");
			StoreInternalIndentM mObj = (StoreInternalIndentM) hbt.load(
					StoreInternalIndentM.class, internalIndentId);

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(box.getInt(TO_WARD));
			mObj.setToStore(masDepartment);

			if (box.get(APPROVED_BY_EMPLOYEE_ID_DEPENDENT_INDENT) != null
					&& box.getInt(APPROVED_BY_EMPLOYEE_ID_DEPENDENT_INDENT) != 0) {
				MasEmployee masEmployee = new MasEmployee();
				masEmployee.setId(box
						.getInt(APPROVED_BY_EMPLOYEE_ID_DEPENDENT_INDENT));
				mObj.setApprovedBy(masEmployee);
			}

			if (box.get(REQUEST_BY_EMPLOYEE_ID_DEPENDENT_INDENT) != null
					&& box.getInt(REQUEST_BY_EMPLOYEE_ID_DEPENDENT_INDENT) != 0) {
				MasEmployee masEmployee2 = new MasEmployee();
				masEmployee2.setId(box
						.getInt(REQUEST_BY_EMPLOYEE_ID_DEPENDENT_INDENT));
				mObj.setRequestedBy(masEmployee2);
			}
			hbt.update(mObj);

			Vector srno = box.getVector("srno");
			Vector qtymmf = box.getVector("qtymmf");
			Vector items = box.getVector("id");
			Vector qtyRequest = box.getVector("qtyRequest");
			Vector stock = box.getVector("stock");

			String obj = null;
			for (int i = 0; i < srno.size(); i++) {
				int itemId = Integer.parseInt(items.get(i).toString());
				StoreInternalIndentT tObj = (StoreInternalIndentT) hbt.load(
						StoreInternalIndentT.class, itemId);
				int qm = 0;
				int qr = 0;
				int st = 0;
				try {
					qm = Integer.parseInt(qtymmf.get(i).toString());
				} catch (Exception e) {
					try {
						qm = Double.valueOf(qtymmf.get(i).toString())
						.intValue();
					} catch (Exception e1) {
						qm = 0;
					}
				}

				try {
					qr = Integer.parseInt(qtyRequest.get(i).toString());
				} catch (Exception e) {
					try {
						qr = Double.valueOf(qtyRequest.get(i).toString())
						.intValue();
					} catch (Exception e1) {
						qr = 0;
					}
				}

				try {
					st = Integer.parseInt(stock.get(i).toString());
				} catch (Exception e) {
					st = 0;
				}

				tObj.setMmfQty(qm);
				tObj.setQtyRequest(qr);
				tObj.setStockInHand(st);
				hbt.update(tObj);
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		map = getDepartmentIndentData(box);
		return map;
	}

	public Map<String, Object> deleteGridItemsForDepartmentIndent(Box box) {
		Session session = (Session) getSession();
		List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();
		StoreInternalIndentT storeInternalIndentT = new StoreInternalIndentT();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			HibernateTemplate hbt = getHibernateTemplate();

			Vector srno = box.getVector("srno");
			// Vector annreq = box.getVector(TENDER_ANNREQ);
			Vector items = box.getVector("id");
			Vector delete = box.getVector(ITEMS_TO_BE_DELETED);

			String obj = null;
			for (int i = 0; i < delete.size(); i++) {
				int itemId = Integer.parseInt(delete.get(i).toString());
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
				// String hql="delete from
				// jkt.hms.masters.business.StoreMmfDepartmentT as a where
				// a.Item.Id = "+itemId;
				String hql = "delete from jkt.hms.masters.business.StoreInternalIndentT as a where a.Id like :itemId";
				Query query = session.createQuery(hql).setParameter("itemId",
						itemId);
				int row = query.executeUpdate();

			}
			map.put("total_records", srno.size());
			map.put("deleted_records", delete.size());
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		if (Integer.parseInt(map.get("total_records").toString()) == Integer
				.parseInt(map.get("deleted_records").toString())) {
			if (box.getInt("currPage") > 1)
				box.put("currPage", box.getInt("currPage") - 1);
		}

		map = getDepartmentIndentData(box);
		return map;

	}


	public Map<String, Object> createGridForPhysicalStockData(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();

		String pvms = null;
		String nomenclature = null;
		String au = null;
		Integer qtymmf = null;
		String remark = null;
		String brand = null;
		String batchNo = null;
		Date expiryDate = null;
		BigDecimal computedStock = null;
		BigDecimal stockInStore = null;
		BigDecimal stockDefective = null;
		BigDecimal surplus = null;
		BigDecimal deficient = null;

		int id = 0;

		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;

		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<StoreStockTakingM> stockTakingMList = new ArrayList<StoreStockTakingM>();
		List<StoreStockTakingT> stockTakingTList = new ArrayList<StoreStockTakingT>();
		List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
		List<StoreStockTakingM> searchStoreStockTakingMList = new ArrayList<StoreStockTakingM>();

		int deptId = box.getInt("deptId");
		int hospitalId = box.getInt("hospitalId");
		String physicalDate = box.get(PHYSICAL_STOCK_DATE);

		try {
			SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
			String date4MySQL1 = formatterOut.format(formatterIn.parse(physicalDate));
			java.sql.Date stockDate = java.sql.Date.valueOf(date4MySQL1);

			departmentList = session.createCriteria(MasDepartment.class)
		//	.add(Restrictions.eq("Hospital.Id", hospitalId))
			.add(Restrictions.eq("Status", "y")).addOrder(Order.asc("DepartmentName")).list();
			stockTakingMList = session.createCriteria(StoreStockTakingM.class)
			.add(Restrictions.eq("Department.Id", deptId))
			.add(Restrictions.eq("Hospital.Id", hospitalId))
			.add(Restrictions.eq("PhysicalDate", stockDate)).list();

			searchStoreStockTakingMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreStockTakingM as i where i.Department.Id = "
					+ deptId + " and i.Hospital.Id='"+hospitalId+"' order by i.PhysicalDate desc");
			map.put("searchStoreStockTakingMList", searchStoreStockTakingMList);
			map.put("stockTakingMList", stockTakingMList);
			map.put("departmentList", departmentList);

			if (stockTakingMList == null || stockTakingMList.size() == 0) {
				HibernateTemplate hbt = getHibernateTemplate();
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
				Transaction tx = session.getTransaction();
				tx.begin();
				storeItemBatchStockList = session.createCriteria(
						StoreItemBatchStock.class)
						.add(Restrictions.eq("Hospital.Id", hospitalId))
						.add(Restrictions.eq("Department.Id", deptId))
						.addOrder(Order.asc("Item.Id")).list();

				StoreStockTakingM stockTakingM = new StoreStockTakingM();

				MasDepartment department = new MasDepartment();
				department.setId(deptId);
				stockTakingM.setDepartment(department);

				stockTakingM.setPhysicalDate(stockDate);
				stockTakingM.setLastChangedDate(HMSUtil.convertStringTypeDateToDateType(box.get(CHANGED_DATE)));
				stockTakingM.setLastChangedBy(box.get(CHANGED_BY));
				stockTakingM.setLastChangedTime(box.get(CHANGED_TIME));

				MasHospital masHospital = new MasHospital();
				masHospital.setId(box.getInt("hospitalId"));
				stockTakingM.setHospital(masHospital);

				stockTakingM.setStatus("o");
				
				stockTakingM.setReason(box.getString("reason"));
				hbt.save(stockTakingM);
				hbt.refresh(stockTakingM);

				int srNo = 1;
				int buffersize =0 ;
				for (Iterator iterator = storeItemBatchStockList.iterator(); iterator.hasNext();) {
					StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock) iterator.next();
					StoreStockTakingT stockTakingT = new StoreStockTakingT();
					if(storeItemBatchStock.getClosingStock().compareTo(new BigDecimal(0))>0){
						stockTakingT.setBatchNo(storeItemBatchStock.getBatchNo());
						if(storeItemBatchStock.getBrand()!=null){
							MasStoreBrand masbrand = new MasStoreBrand();
							masbrand.setId(storeItemBatchStock.getBrand().getId());
							stockTakingT.setBrand(masbrand);
						}
						if(storeItemBatchStock.getClosingStock()!=null)
							stockTakingT.setComputedStock(storeItemBatchStock.getClosingStock());
						if(storeItemBatchStock.getCostPrice()!=null)
							stockTakingT.setCostPrice(storeItemBatchStock.getCostPrice());
						if(storeItemBatchStock.getExpiryDate()!=null)
							stockTakingT.setExpiryDate(storeItemBatchStock.getExpiryDate());

						MasStoreItem item = new MasStoreItem();
						item.setId(storeItemBatchStock.getItem().getId());
						stockTakingT.setItem(item);
						stockTakingT.setRemarks("");
						stockTakingT.setSrNo(srNo++);
						stockTakingT.setStockDeficient(new BigDecimal(0));
						stockTakingT.setStockSurplus(new BigDecimal(0));
						stockTakingT.setStockTakingM(stockTakingM);
						stockTakingT.setStoreStockDefective(new BigDecimal(0));
						if(storeItemBatchStock.getClosingStock()!=null)
							stockTakingT.setStoreStockService(storeItemBatchStock.getClosingStock());
					}

					stockTakingT.setItemBatchStock(storeItemBatchStock);
					hbt.save(stockTakingT);
					buffersize++;
					if(buffersize%60==0){
						session.flush();
						session.clear();
					}
					//hbt.refresh(stockTakingT);
				}


				tx.commit();
				//session.close();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		map = getGridDataForPhysicalStock(box);
		return map;
	}

	public Map<String, Object> updateGridItemsInPhysicalStock(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreStockTakingT> storeStockTakingTList = new ArrayList<StoreStockTakingT>();
		StoreStockTakingT storeStockTakingT = null;
		try {
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			Vector srno = box.getVector("srno");
			Vector items = box.getVector("id");

			Vector stockInStore = box.getVector("stockInStore");
			// Vector stockDefective = box.getVector("stockDefective");
			Vector surplus = box.getVector("surplus");
			Vector deficient = box.getVector("deficient");
			Vector remark = box.getVector("remark");

			String obj = null;
			for (int i = 0; i < srno.size(); i++) {
				int itemId = Integer.parseInt(items.get(i).toString());
				StoreStockTakingT tObj = (StoreStockTakingT) hbt.load(
						StoreStockTakingT.class, itemId);
				tObj.setStoreStockService(new BigDecimal(stockInStore.get(i)
						.toString()));
				// tObj.setStoreStockDefective(new
				// BigDecimal(stockDefective.get(i).toString()));

				BigDecimal difference = tObj.getStoreStockService().subtract(
						tObj.getComputedStock());

				if (difference.doubleValue() > 0) {
					tObj.setStockSurplus(difference);
					tObj.setStockDeficient(new BigDecimal(0));
				}

				if (difference.doubleValue() < 0) {
					tObj.setStockDeficient(difference.abs());
					tObj.setStockSurplus(new BigDecimal(0));
				}

				if (difference.doubleValue() == 0) {
					tObj.setStockDeficient(new BigDecimal(0));
					tObj.setStockSurplus(new BigDecimal(0));
				}

				tObj.setRemarks(remark.get(i).toString());
				hbt.update(tObj);
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		map = getGridDataForPhysicalStock(box);
		return map;
	}


	public String getMmfNo(int docId) {

		session = (Session) getSession();
		String docNo = "";
		List<StoreMmfDepartmentM> list = session.createCriteria(
				StoreMmfDepartmentM.class).add(Restrictions.eq("Id", docId))
				.list();
		if (list.size() > 0) {
			StoreMmfDepartmentM mObj = (StoreMmfDepartmentM) list.get(0);
			docNo = mObj.getDocNo();
		}
		return docNo;
	}

	// ********************************END Of Modules By Deepti
	// Tevatia****************************

	// -----------------------------------------------------------------------------------------------------------------
	// -------------------------------------Start of Functions Written By
	// Mansi-------------------------------------------
	// -----------------------------------------------------------------------------------------------------------------

	// --------------------------------------------------------- Balance
	// -------------------------------

	public Map<String, Object> fillItemsForBalance(Map<String, Object> dataMap) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		session = (Session) getSession();
		String pvmsNo = null;
		int item_id = 0;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		List objectList = new ArrayList();
		pvmsNo = "" + dataMap.get("pvmsNo");
		try {
			// String qry="select
			// mas.item_id,mas.pvms_no,mas.nomenclature,mas.strength,con.item_unit_name
			// from mas_store_item mas inner join mas_store_item_conversion con
			// on mas.item_conversion_id = con.item_conversion_id ";
			String qry = "select mas.item_id,mas.pvms_no,mas.nomenclature,mas.strength,mas.old_niv_no, mas.department_id,con.item_unit_name from mas_store_item mas inner join mas_store_item_conversion con on mas.item_conversion_id=con.item_conversion_id where mas.pvms_no='"
				+ pvmsNo + "'";
			objectList = (List) session.createSQLQuery(qry).list();
			pvmsNo = "" + dataMap.get("pvmsNo");
			Criteria c = session.createCriteria(MasStoreItem.class).add(
					Restrictions.eq("Status", "y")).add(
							Restrictions.like("PvmsNo", pvmsNo));
			itemList = c.list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("objectList", objectList);
		return map;

	}

	public Map<String, Object> getItemListForLoanoutByAutocompleteBalance(
			Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		try {

			session = (Session) getSession();
			String pvmsNo = null;
			int deptId = 0;
			int balanceId = 0;
			int hospitalId = 0;
			int groupId = 0;
			int itemTypeId = 0;
			int sectionId = 0;
			int categoryId = 0;
			int classId = 0;
			String classCode = "";
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
			balanceId = Integer.parseInt("" + dataMap.get("balanceId"));
			if(dataMap.get("groupId")!= null){
				groupId =(Integer)dataMap.get("groupId");
			}
			if(dataMap.get("itemTypeId")!= null){
				itemTypeId =(Integer)dataMap.get("itemTypeId");
			}
			if(dataMap.get("sectionId")!= null){
				sectionId =(Integer)dataMap.get("sectionId");
			}
			if(dataMap.get("categoryId")!= null){
				categoryId =(Integer)dataMap.get("categoryId");
			}
			if(dataMap.get("classId")!= null){
				classId =(Integer)dataMap.get("classId");
			}
			
			if(dataMap.get("classCode")!= null){
				classCode =(String)dataMap.get("classCode");
			}
			
			List objectList = new ArrayList();
			List objectList1 = new ArrayList();
			try {
				String str = (String) dataMap.get("autoHint") + "%";
				String qry = "SELECT t.item_id FROM store_balance_t t,store_balance_m m where t.store_balance_m_id='"
						+ balanceId + "' and m.id=t.store_balance_m_id ";
				objectList = (List) session.createSQLQuery(qry).list();
		if (objectList.size() != 0) {

					Criteria c = session
							.createCriteria(MasStoreItem.class)
							.add(Restrictions.like("Nomenclature", str).ignoreCase())
							.add(Restrictions.not(Restrictions.in("Id",
									objectList)));

					c.setFirstResult(0);
					c.setMaxResults(10);
					itemList = c.list();
		} else {
			Criteria c = session.createCriteria(MasStoreItem.class)
					.add(Restrictions.like("Nomenclature", str).ignoreCase())
					;
					if (groupId != 0) {
						c = c.add(Restrictions.eq("Group.Id", groupId));
					}
					if (itemTypeId != 0) {
						c = c.add(Restrictions.eq("ItemType.Id",itemTypeId));
					}
					if (sectionId != 0) {
						c = c.add(Restrictions.eq("Section.Id",sectionId));
					}
					if (categoryId != 0) {
						c = c.add(Restrictions.eq("ItemCategory.Id",categoryId));
					}
					if (classId != 0) {
						c = c.add(Restrictions.eq("ItemClass.Id",classId));
					}
					if (!classCode.equals("")) {
						c.createAlias("ItemClass", "ic").add(Restrictions.eq("ic.ItemClassCode",classCode).ignoreCase());
						
					}
					c.setFirstResult(0);
					c.setMaxResults(10);
					itemList = c.list();
				}
			} catch (HibernateException e) {
				e.printStackTrace();
			}
			map.put("itemList", itemList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	public Map<String, Object> showBalance(Map<String, Object> dataMap) {
		
		Map<String, Object> map = new HashMap<String, Object>();
		//	List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		//	List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
			List<MasManufacturer> manufacturerList = new ArrayList<MasManufacturer>();
		List<StoreBalanceM> searchStoreBalanceMList = new ArrayList<StoreBalanceM>();
		List<StoreBalanceM> list = new ArrayList<StoreBalanceM>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<MasStoreItem> masStoreItemList = new ArrayList<MasStoreItem>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		
		List<MasStoreGroup> storeGroupList = new ArrayList<MasStoreGroup>();
		List<MasItemType> itemTypeList = new ArrayList<MasItemType>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<MasItemCategory> categoryList = new ArrayList<MasItemCategory>();
		List<MasItemClass> itemClassList = new ArrayList<MasItemClass>();
		
		
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		if (dataMap.get("deptId") != null)
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		if (dataMap.get("hospitalId") != null)
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		if (dataMap.get("userName") != null)
			userName = ("" + dataMap.get("userName"));
		int grnStartNo = 0;
		String no = "";
		session = (Session) getSession();
		List objectList = new ArrayList();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		try {
			/*searchStoreBalanceMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreBalanceM as md where md.Department.Id='"
							+ deptId + "'");*/
			searchStoreBalanceMList=session.createCriteria(StoreBalanceM.class)
			.add(Restrictions.eq("Department.Id", deptId))
			.add(Restrictions.eq("Hospital.Id", hospitalId))
			.addOrder(Order.desc("Id")).list();
			/*approvedByEmployeeList = session.createCriteria(MasEmployee.class)
			.add(Restrictions.eq("Status", "y"))
			.add(Restrictions.eq("Hospital.Id", hospitalId)).addOrder(Order.asc("FirstName")).list();*/
			departmentList = session.createCriteria(MasDepartment.class).add(Restrictions.eq("Status", "y")).addOrder(Order.asc("DepartmentName")).list();
			
			storeGroupList = session.createCriteria(MasStoreGroup.class)
					.add(Restrictions.eq("Status", "y").ignoreCase()).list();
			itemTypeList = session.createCriteria(MasItemType.class)
					.add(Restrictions.eq("Status", "y").ignoreCase()).list();
			sectionList = session.createCriteria(MasStoreSection.class)
					.add(Restrictions.eq("Status", "y").ignoreCase()).list();
			categoryList = session.createCriteria(MasItemCategory.class)
					.add(Restrictions.eq("Status", "y").ignoreCase()).list();
			itemClassList = session.createCriteria(MasItemClass.class)
					.add(Restrictions.eq("Status", "y").ignoreCase()).list();
			
			manufacturerList = session.createCriteria(MasManufacturer.class)
					.add(Restrictions.eq("Status", "y").ignoreCase()).list();
			
			

			/*storeFyDocumentNoList = (List) getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"+deptId+"' and sfdn.Hospital.Id='"+hospitalId+"'");*/
			
			// added by javed khan for sql injuction on 08-08-2013
			storeFyDocumentNoList =session.createCriteria(StoreFyDocumentNo.class)
			.add(Restrictions.eq("Department.Id", deptId))
			.add(Restrictions.eq("Hospital.Id", hospitalId)).list();
			if(storeFyDocumentNoList.size()>0){
				for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {

					no = ("" + storeFyDocumentNo.getBalanceNo());
					no = getMaxNo(no);


				}
			}else{
				no = getMaxNo("");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		//map.put("objectList", objectList);
		//map.put("masStoreItemList", masStoreItemList);
		//map.put("brandList", brandList);
		map.put("manufacturerList", manufacturerList);
		map.put("approvedByList", approvedByEmployeeList);
		map.put("searchStoreBalanceMList", searchStoreBalanceMList);
		map.put("max", no);
		map.put("departmentList", departmentList);
		
		map.put("storeGroupList", storeGroupList);
		map.put("itemTypeList", itemTypeList);
		map.put("sectionList", sectionList);
		map.put("categoryList", categoryList);
		map.put("itemClassList", itemClassList);
		
		
		return map;

	}

	public Map<String, Object> searchBalance(Map<String, Object> searchFieldMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		/*Date fromDate =new Date();
		Date toDate = new Date();*/
		// javed khan
		Date fromDate =null ;
		Date toDate = null ;
		List<StoreBalanceM> gridIndentHeaderList = new ArrayList<StoreBalanceM>();
		List<StoreBalanceT> gridIndentDetailList = new ArrayList<StoreBalanceT>();
		List<MasEmployee> gridApprovedByList = new ArrayList<MasEmployee>();
		String balanceNo = "";
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		if (searchFieldMap.get("deptId") != null)
			deptId = Integer.parseInt("" + searchFieldMap.get("deptId"));
		if (searchFieldMap.get("hospitalId") != null)
			hospitalId = Integer
			.parseInt("" + searchFieldMap.get("hospitalId"));
		if (searchFieldMap.get("userName") != null)
			userName = ("" + searchFieldMap.get("userName"));


		try {
			if (searchFieldMap.get("max") != "0") {
				balanceNo = (String) searchFieldMap.get("max");
				/*
				 * commented By ujjwal For SQl Injection
				 */

				gridIndentDetailList=session.createCriteria(StoreBalanceT.class).list();
				/*gridIndentDetailList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreBalanceT ");
				 */
				/*gridIndentHeaderList = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreBalanceM as pod where pod.BalanceNo = '"
						+ balanceNo + "' and pod.Department.Id='"
						+ deptId + "' and pod.Hospital.Id='"+hospitalId+"'");

				 */
				/*
				 * commented By ujjwal For SQl Injection
				 */
				gridIndentHeaderList=session.createCriteria(StoreBalanceM.class).add(Restrictions.eq("BalanceNo", balanceNo))
				.add(Restrictions.eq("Department.Id", deptId)).add(Restrictions.eq("Hospital.Id", hospitalId)).list();				
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		try {
			if (!searchFieldMap.get("fromDate").equals("")
					&& !searchFieldMap.get("toDate").equals("")) {
				//fromDate = (Date) searchFieldMap.get("fromDate");
				//toDate = (Date) searchFieldMap.get("toDate");


				/*SimpleDateFormat formatterIn = new SimpleDateFormat(
				"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
				"dd/MM/yyyy");
				String date4MySQL1 = formatterOut.format(formatterIn
						.parse(fromDate));
				String date4MySQL2 = formatterOut.format(formatterIn
						.parse(toDate));
				java.util.Date startDate = java.util.Date.valueOf(date4MySQL1);
				java.util.Date endDate = java.util.Date.valueOf(date4MySQL2);*/

				/*				gridIndentDetailList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreBalanceT ");

				 */	
				/*
				 * commented By ujjwal For SQl Injection
				 */

				gridIndentDetailList=session.createCriteria(StoreBalanceT.class).list();


				/*gridIndentHeaderList = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreBalanceM as poh where "
						+ " poh.BalanceDate between '" + startDate
						+ "' and '" + endDate
						+ "'and poh.Department.Id='" + deptId + "'");*/


				gridIndentHeaderList = session.createCriteria(StoreBalanceM.class)
				.add(Restrictions.eq("Status", "o"))
				.add(Restrictions.between("BalanceDate", HMSUtil.convertStringTypeDateToDateType(""+searchFieldMap.get("fromDate")), HMSUtil.convertStringTypeDateToDateType(""+searchFieldMap.get("toDate"))))
				.add(Restrictions.eq("Department.Id", deptId))
				.add(Restrictions.eq("Hospital.Id", hospitalId)).list();

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		// add by javed khan

		try {
			if (searchFieldMap.get("fromDate").equals("")
					&& searchFieldMap.get("toDate").equals("") && searchFieldMap.get("max").equals("0")) {

				String fromDate1=(String)searchFieldMap.get("fromDate");
				String toDate1=(String)searchFieldMap.get("toDate");
				/*SimpleDateFormat formatterIn = new SimpleDateFormat(
				"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
				"dd/MM/yyyy");
				String date4MySQL1 = formatterOut.format(formatterIn
						.parse(fromDate));
				String date4MySQL2 = formatterOut.format(formatterIn
						.parse(toDate));
				java.util.Date startDate = java.util.Date.valueOf(date4MySQL1);
				java.util.Date endDate = java.util.Date.valueOf(date4MySQL2);*/

				/*
				 * commented By ujjwal For SQl Injection
				 */

				/*gridIndentDetailList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreBalanceT ");*/


				gridIndentDetailList=session.createCriteria(StoreBalanceT.class).list();

				/*gridIndentHeaderList = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreBalanceM as poh where "
						+ " poh.BalanceDate between '" + startDate
						+ "' and '" + endDate
						+ "'and poh.Department.Id='" + deptId + "'");*/


				gridIndentHeaderList = session.createCriteria(StoreBalanceM.class)
				.add(Restrictions.eq("Status", "o"))
				.add(Restrictions.eq("Department.Id", deptId))
				.add(Restrictions.eq("Hospital.Id", hospitalId))

				.list();

			}
		} catch (Exception e) {
			e.printStackTrace();
		}






		/*
		 * commented By ujjwal For SQl Injection
		 */

		/*		gridApprovedByList = getHibernateTemplate().find(
		"from jkt.hms.masters.business.MasEmployee as isc");
		 */		gridApprovedByList=session.createCriteria(MasEmployee.class).list();

		 map.put("approvedByEmployeeList", gridApprovedByList);
		 map.put("indentDetailList", gridIndentDetailList);
		 map.put("indentHeaderList", gridIndentHeaderList);

		 return map;

	}

	public boolean addBalance(StoreBalanceM storeBalanceM,
			List<StoreBalanceT> storeBalanceTlist, Map<String, Object> infoMap) {

		boolean successfullyAdded = false;
		StoreBalanceM storeBalanceM2 = new StoreBalanceM();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");

		hbt.setCheckWriteOperations(false);
		if (!(infoMap.get("headerStored") + "").equals("yes")) {

			try {
				hbt.save(storeBalanceM);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		try {

			if (storeBalanceTlist.size() > 0) {
				if ((infoMap.get("headerStored") + "").equals("yes")) {
					int id = Integer.parseInt("" + infoMap.get("balanceId"));
					storeBalanceM2.setId(id);
				}
				for (int i = 0; i < storeBalanceTlist.size(); i++) {
					StoreBalanceT storeBalanceTObj = new StoreBalanceT();
					storeBalanceTObj = (StoreBalanceT) storeBalanceTlist.get(i);
					if ((infoMap.get("headerStored") + "").equals("yes")) {
						storeBalanceTObj.setStoreBalanceM(storeBalanceM2);
					} else {
						storeBalanceTObj.setStoreBalanceM(storeBalanceM);
					}
					hbt.save(storeBalanceTObj);
				}
				int pageNo = 0;
				String maxBalanceNo = "";
				pageNo = Integer.parseInt("" + infoMap.get("pageNo"));
				maxBalanceNo = "" + infoMap.get("max");
				if (pageNo == 1) {
					int StoreFyDocumentNoId = 1;
					StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
					.load(StoreFyDocumentNo.class, StoreFyDocumentNoId);
					HibernateTemplate hbt2 = getHibernateTemplate();
					storeFyDocumentNo.setBalanceNo(maxBalanceNo);
					hbt2.setFlushModeName("FLUSH_EAGER");
					hbt2.update(storeFyDocumentNo);
				}
			}
			successfullyAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;

	}

	public Map<String, Object> getBalanceModifyMap(int radio_str) {

		Map map = new HashMap();
		List<StoreBalanceM> gridStoreBalanceMList = new ArrayList<StoreBalanceM>();
		List<StoreBalanceT> gridStoreBalanceTList = new ArrayList<StoreBalanceT>();

		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<MasManufacturer> manufacturerList = new ArrayList<MasManufacturer>();

		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		int id = 0;
		gridStoreBalanceMList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreBalanceM as md where md.Id = '"
				+ radio_str + "'");
		for (StoreBalanceM storeBalanceM : gridStoreBalanceMList) {
			id = storeBalanceM.getId();

		}
		itemList = getHibernateTemplate()
		.find(
				"from jkt.hms.masters.business.MasStoreItem as mi where mi.Status = 'y'");
		brandList = getHibernateTemplate()
		.find(
				"from jkt.hms.masters.business.MasStoreBrand as mi where mi.Status = 'y'");
		manufacturerList = getHibernateTemplate()
		.find(
				"from jkt.hms.masters.business.MasManufacturer as mi where mi.Status = 'y'");
		gridStoreBalanceTList = getHibernateTemplate()
		.find(
				"from jkt.hms.masters.business.StoreBalanceT as siit where siit.StoreBalanceM.Id = '"
				+ id + "'");
		approvedByEmployeeList = getHibernateTemplate().find(
		"from jkt.hms.masters.business.MasEmployee ");
		map.put("itemList", itemList);
		map.put("brandList", brandList);
		map.put("manufacturerList", manufacturerList);
		map.put("approvedByEmployeeList", approvedByEmployeeList);
		map.put("gridStoreBalanceTList", gridStoreBalanceTList);
		map.put("gridStoreBalanceMList", gridStoreBalanceMList);
		map.put("balanceId", id);

		return map;
	}

	public Map<String, Object> getBalanceMAndTUpdate(int balanceId) {
		Map map = new HashMap();
		List<StoreBalanceM> gridBalanceMList = new ArrayList<StoreBalanceM>();
		List<StoreBalanceT> gridBalanceTList = new ArrayList<StoreBalanceT>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<MasManufacturer> manufacturerList = new ArrayList<MasManufacturer>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();

		try {
			gridBalanceMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreBalanceM as sm where sm.Id='"
					+ balanceId + "'");
			gridBalanceTList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreBalanceT as st where st.StoreBalanceM.Id='"
					+ balanceId + "'  ");
			itemList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasStoreItem as mi where mi.Status = 'y'");
			brandList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasStoreBrand as mi where mi.Status = 'y'");
			manufacturerList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasManufacturer as mi where mi.Status = 'y'");
			approvedByEmployeeList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasEmployee ");
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("searchStoreBalanceMList", gridBalanceMList);
		map.put("searchStoreBalanceTList", gridBalanceTList);
		map.put("approvedByEmployeeList", approvedByEmployeeList);
		map.put("itemList", itemList);
		map.put("brandList", brandList);
		map.put("manufacturerList", manufacturerList);

		return map;
	}

	public boolean updateBalance(StoreBalanceM storeBalanceM,
			List<StoreBalanceT> storeBalanceTlist) {
		boolean successfullyAdded = false;
		StoreBalanceM storeBalanceM2 = new StoreBalanceM();
		storeBalanceM2 = storeBalanceM;
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");

		hbt.setCheckWriteOperations(false);

		try {

			hbt.update(storeBalanceM2);
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {

			if (storeBalanceTlist.size() > 0) {
				for (int i = 0; i < storeBalanceTlist.size(); i++) {
					StoreBalanceT storeBalanceTObj = new StoreBalanceT();
					storeBalanceTObj = (StoreBalanceT) storeBalanceTlist.get(i);
					hbt.update(storeBalanceTObj);
				}

			}
			successfullyAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;
	}

	public int getBalanceId(int balanceNo) {

		int balanceId = 0;
		List<StoreBalanceM> list = new ArrayList<StoreBalanceM>();
		list = (List) getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreBalanceM as pod where pod.BalanceNo = '"
				+ balanceNo + "'");
		for (StoreBalanceM balanceM2 : list) {
			balanceId = Integer.parseInt("" + balanceM2.getId());
		}
		return balanceId;
	}

	public Map getBalance1ModifyMap(int balanceId, int pageNo,
			Map<String, Object> dataMap) {

		Map map = new HashMap();
		List<StoreBalanceM> gridIndentMList = new ArrayList<StoreBalanceM>();
		List<StoreBalanceT> gridIndentTList = new ArrayList<StoreBalanceT>();
		List<MasEmployee> gridApprovedByList = new ArrayList<MasEmployee>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		int totalPages = 1;

		if (dataMap.get("deptId") != null)
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		if (dataMap.get("hospitalId") != null)
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		if (dataMap.get("userName") != null)
			userName = ("" + dataMap.get("userName"));

		int id = 0;
		int firstResult = 0;
		int maxResults = 10;

		if (pageNo != 1) {
			firstResult = firstResult + (pageNo - 1) * 10;
		}
		List<StoreBalanceM> searchStoreBalanceMList = new ArrayList<StoreBalanceM>();
		List<StoreBalanceM> list = new ArrayList<StoreBalanceM>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		session = (Session) getSession();
		List objectList = new ArrayList();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		try {

			Criteria c = session.createCriteria(StoreBalanceT.class).add(
					Restrictions.eq("StoreBalanceM.Id", balanceId));
			c.setFirstResult(firstResult);
			c.setMaxResults(maxResults);
			gridIndentTList = c.list();
			gridIndentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreBalanceM as md where md.Id ="
					+ balanceId + "and md.Department.Id='" + deptId
					+ "'");
			String qry = "select mas.item_id,mas.pvms_no,mas.nomenclature,mas.strength,con.item_unit_name from mas_store_item mas inner join mas_store_item_conversion con on mas.item_conversion_id = con.item_conversion_id ";
			objectList = (List) session.createSQLQuery(qry).list();
			gridApprovedByList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasEmployee as isc");
			// brandList = getHibernateTemplate().find("from
			// jkt.hms.masters.business.MasStoreBrand as mi where mi.Status =
			// 'y'");
			searchStoreBalanceMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreBalanceM as md where md.Department.Id='"
					+ deptId + "'");

			String str1 = "select count(*) from store_balance_t a,store_balance_m b  where a.store_balance_m_id=b.id and b.id = '"
				+ balanceId + "'";
			List balanceList = session.createSQLQuery(str1).list();
			int totalitems = (Integer.parseInt("" + balanceList.get(0)));
			if (balanceList.size() > 0 && balanceList != null) {

				totalPages = ((Integer.parseInt("" + balanceList.get(0))) / 10) + 1;
			}
			if (totalPages == 0) {
				totalPages = 0;
			}

		} catch (Exception e) {

			e.printStackTrace();
		}

		map.put("gridIndentMList", gridIndentMList);
		map.put("gridIndentTList", gridIndentTList);
		map.put("balanceId", balanceId);
		map.put("approvedByEmployeeList", gridApprovedByList);
		map.put("brandList", brandList);
		map.put("searchStoreBalanceMList", searchStoreBalanceMList);
		map.put("objectList", objectList);
		map.put("totalPages", totalPages);

		return map;

	}

	public boolean updateNextBalance1(Map<String, Object> masterAndDetailMap) {
		boolean successfullyAdded = false;
		@SuppressWarnings("unused")
		StoreBalanceM storeIndentM2 = new StoreBalanceM();
		StoreBalanceM storeIndentM3 = new StoreBalanceM();
		List<StoreBalanceT> storeIndentTListForUpdate = new ArrayList<StoreBalanceT>();
		List<StoreBalanceT> storeIndentTListForAdd = new ArrayList<StoreBalanceT>();
		List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
		StoreItemBatchStock storeItemBatchStock = null;
		int balanceId = 0;
		String lastChgBy = "";
		Date lastChgDate = null;
		String lastChgTime = "";
		int pageNo = 0;
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {
			if (masterAndDetailMap.get("storeBalanceM") != null)
				storeIndentM3 = (StoreBalanceM) masterAndDetailMap
				.get("storeBalanceM");
			if (masterAndDetailMap.get("storeIndentTListForUpdate") != null) {
				storeIndentTListForUpdate = (List<StoreBalanceT>) (masterAndDetailMap
						.get("storeIndentTListForUpdate"));
			}
			if (masterAndDetailMap.get("storeIndentTListForAdd") != null) {
				storeIndentTListForAdd = (List<StoreBalanceT>) (masterAndDetailMap
						.get("storeIndentTListForAdd"));
			}
			if (masterAndDetailMap.get("balanceId") != null) {
				balanceId = Integer.parseInt(""
						+ masterAndDetailMap.get("balanceId"));
			}

			if (masterAndDetailMap.get("lastChgBy") != null) {
				lastChgBy = ("" + masterAndDetailMap.get("lastChgBy"));
			}
			if (masterAndDetailMap.get("lastChgTime") != null) {
				lastChgTime = ("" + masterAndDetailMap.get("lastChgTime"));
			}
			if (masterAndDetailMap.get("pageNo") != null) {
				pageNo = Integer.parseInt(("" + masterAndDetailMap
						.get("pageNo")));
			}
			if (masterAndDetailMap.get("lastChgDate") != null) {
				SimpleDateFormat formatterIn = new SimpleDateFormat(
				"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
				"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn.parse(""
						+ masterAndDetailMap.get("lastChgDate")));
				lastChgDate = java.sql.Date.valueOf(date4MySQL);
			}
			if (pageNo == 1) {
				hbt.update(storeIndentM3);
			}
			if (masterAndDetailMap.get("storeIndentTListForUpdate") != null) {
				storeIndentTListForUpdate = (List<StoreBalanceT>) masterAndDetailMap
				.get("storeIndentTListForUpdate");
				if (storeIndentTListForUpdate.size() > 0) {
					for (int i = 0; i < storeIndentTListForUpdate.size(); i++) {
						StoreBalanceT storeBalanceT = new StoreBalanceT();
						storeBalanceT = (StoreBalanceT) storeIndentTListForUpdate
						.get(i);

						StoreBalanceM storeBalanceM = new StoreBalanceM();
						storeBalanceM.setId(balanceId);
						storeBalanceT.setStoreBalanceM(storeBalanceM);
						hbt.update(storeBalanceT);
						hbt.refresh(storeBalanceT);

						int item_id = storeBalanceT.getItem().getId();
						int brand_id = storeBalanceT.getBrand().getId();

						BigDecimal cost_price = storeBalanceT.getUnitRate();
						String batch_no = storeBalanceT.getBatchNo();
						int department_id = storeBalanceT.getStoreBalanceM()
						.getDepartment().getId();
						storeItemBatchStockList = hbt
						.find("from jkt.hms.masters.business.StoreItemBatchStock as inp where inp.Item.Id = "
								+ item_id
								+ " and inp.CostPrice = "
								+ cost_price
								+ "and inp.Department.Id= "
								+ department_id
								+ "and inp.BatchNo ='"
								+ batch_no
								+ "' and inp.Brand.Id = "
								+ brand_id);
						if (storeItemBatchStockList != null
								&& storeItemBatchStockList.size() > 0) {

							int id = storeItemBatchStockList.get(0).getId();
							storeItemBatchStock = (StoreItemBatchStock) getHibernateTemplate()
							.load(StoreItemBatchStock.class, id);
							storeItemBatchStock.setExpiryDate(storeBalanceT
									.getExpiryDate());
							// BigDecimal a = null;
							// BigDecimal b = null;
							// BigDecimal c = null;
							// a =storeBalanceT.getQty();
							// b= storeItemBatchStock.getClosingStock();
							// c= a.add(b);
							storeItemBatchStock.setClosingStock(storeBalanceT
									.getQty());
							storeItemBatchStock
							.setOpeningBalanceQty(storeBalanceT
									.getQty());
							// storeItemBatchStock.setOpeningBalanceDate(storeBalanceT.getStoreBalanceM().getBalanceDate());
							storeItemBatchStock.setCostPrice(storeBalanceT
									.getUnitRate());
							HibernateTemplate hbt1 = getHibernateTemplate();
							hbt1.setFlushModeName("FLUSH_EAGER");
							hbt1.setCheckWriteOperations(false);
							hbt1.update(storeItemBatchStock);
							hbt1.refresh(storeItemBatchStock);
						} else {
							storeItemBatchStock = new StoreItemBatchStock();
							storeItemBatchStock.setDepartment(storeBalanceT
									.getStoreBalanceM().getDepartment());
							storeItemBatchStock
							.setItem(storeBalanceT.getItem());
							storeItemBatchStock.setBatchNo(storeBalanceT
									.getBatchNo());
							storeItemBatchStock.setBrand(storeBalanceT
									.getBrand());
							storeItemBatchStock.setCostPrice(storeBalanceT
									.getUnitRate());
							storeItemBatchStock.setExpiryDate(storeBalanceT
									.getExpiryDate());
							storeItemBatchStock.setClosingStock(storeBalanceT
									.getQty());
							storeItemBatchStock
							.setOpeningBalanceDate(storeBalanceT
									.getStoreBalanceM()
									.getBalanceDate());
							storeItemBatchStock
							.setOpeningBalanceQty(storeBalanceT
									.getQty());
							HibernateTemplate hbt1 = getHibernateTemplate();
							hbt1.setFlushModeName("FLUSH_EAGER");
							hbt1.setCheckWriteOperations(false);
							hbt1.save(storeItemBatchStock);
						}
					}
				}
				successfullyAdded = true;
			}
			if (masterAndDetailMap.get("storeIndentTListForAdd") != null) {
				storeIndentTListForAdd = (List<StoreBalanceT>) masterAndDetailMap
				.get("storeIndentTListForAdd");
				if (storeIndentTListForAdd.size() > 0) {
					for (int i = 0; i < storeIndentTListForAdd.size(); i++) {
						StoreBalanceT storeBalanceT = new StoreBalanceT();
						storeBalanceT = (StoreBalanceT) storeIndentTListForAdd
						.get(i);

						StoreBalanceM storeBalanceM = new StoreBalanceM();
						storeBalanceM.setId(balanceId);
						storeBalanceT.setStoreBalanceM(storeBalanceM);
						hbt.save(storeBalanceT);
						hbt.refresh(storeBalanceT);

						int item_id = storeBalanceT.getItem().getId();
						int brand_id = storeBalanceT.getBrand().getId();

						BigDecimal cost_price = storeBalanceT.getUnitRate();
						String batch_no = storeBalanceT.getBatchNo();
						int department_id = storeBalanceT.getStoreBalanceM()
						.getDepartment().getId();
						storeItemBatchStockList = hbt
						.find("from jkt.hms.masters.business.StoreItemBatchStock as inp where inp.Item.Id = "
								+ item_id
								+ " and inp.CostPrice = "
								+ cost_price
								+ "and inp.Department.Id= "
								+ department_id
								+ "and inp.BatchNo ='"
								+ batch_no
								+ "' and inp.Brand.Id = "
								+ brand_id);
						if (storeItemBatchStockList != null
								&& storeItemBatchStockList.size() > 0) {

							int id = storeItemBatchStockList.get(0).getId();
							storeItemBatchStock = (StoreItemBatchStock) getHibernateTemplate()
							.load(StoreItemBatchStock.class, id);
							storeItemBatchStock.setExpiryDate(storeBalanceT
									.getExpiryDate());
							BigDecimal a = null;
							BigDecimal b = null;
							BigDecimal c = null;
							a = storeBalanceT.getQty();
							b = storeItemBatchStock.getClosingStock();
							c = a.add(b);
							storeItemBatchStock.setClosingStock(c);
							storeItemBatchStock
							.setOpeningBalanceDate(storeBalanceT
									.getStoreBalanceM()
									.getBalanceDate());
							storeItemBatchStock.setCostPrice(storeBalanceT
									.getUnitRate());
							HibernateTemplate hbt1 = getHibernateTemplate();
							hbt1.setFlushModeName("FLUSH_EAGER");
							hbt1.setCheckWriteOperations(false);
							hbt1.update(storeItemBatchStock);
						} else {
							storeItemBatchStock = new StoreItemBatchStock();
							storeItemBatchStock.setDepartment(storeBalanceT
									.getStoreBalanceM().getDepartment());
							storeItemBatchStock
							.setItem(storeBalanceT.getItem());
							storeItemBatchStock.setBatchNo(storeBalanceT
									.getBatchNo());
							storeItemBatchStock.setBrand(storeBalanceT
									.getBrand());
							storeItemBatchStock.setCostPrice(storeBalanceT
									.getUnitRate());
							storeItemBatchStock.setExpiryDate(storeBalanceT
									.getExpiryDate());
							storeItemBatchStock.setClosingStock(storeBalanceT
									.getQty());
							storeItemBatchStock
							.setOpeningBalanceDate(storeBalanceT
									.getStoreBalanceM()
									.getBalanceDate());
							storeItemBatchStock
							.setOpeningBalanceQty(storeBalanceT
									.getQty());
							HibernateTemplate hbt1 = getHibernateTemplate();
							hbt1.setFlushModeName("FLUSH_EAGER");
							hbt1.setCheckWriteOperations(false);
							hbt1.save(storeItemBatchStock);
						}
					}
				}
				successfullyAdded = true;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return successfullyAdded;
	}

	public Map<String, Object> addNextOrSubmitBalance(
			Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();
		String successfullyAdded = "no";
		@SuppressWarnings("unused")
		int pageNo = 0;
		StoreBalanceM storeBalanceM = new StoreBalanceM();
		List<StoreBalanceM> storeBalanceMlist = new ArrayList<StoreBalanceM>();
		List<StoreBalanceT> storeBalanceTList = new ArrayList<StoreBalanceT>();
		List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
		StoreItemBatchStock storeItemBatchStock = null;
		// For Show Jsp
		List<StoreBalanceM> searchStoreBalanceMList = new ArrayList<StoreBalanceM>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<StoreBalanceM> list = new ArrayList<StoreBalanceM>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();

		session = (Session) getSession();
		List objectList = new ArrayList();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));

		int balanceId = 0;
		String balanceNo = "";
		if (dataMap.get("storeBalanceM") != null) {
			storeBalanceM = (StoreBalanceM) dataMap.get("storeBalanceM");
		}
		if (dataMap.get("balanceNo") != null) {
			balanceNo = "" + dataMap.get("balanceNo");
		}

		if (dataMap.get("storeBalanceTList") != null) {
			storeBalanceTList = (List<StoreBalanceT>) dataMap
			.get("storeBalanceTList");
		}
		if (dataMap.get("pageNo") != null) {
			pageNo = Integer.parseInt("" + dataMap.get("pageNo"));
		}
		if (dataMap.get("balanceId") != null) {
			balanceId = Integer.parseInt("" + dataMap.get("balanceId"));
		}

		int deptId = 0;
		int hospitalId=0;
		hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		deptId = Integer.parseInt("" + dataMap.get("deptId"));
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (pageNo == 1) {
				hbt.save(storeBalanceM);
				hbt.refresh(storeBalanceM);

				storeBalanceMlist = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreBalanceM as md where md.BalanceNo = '"
						+ balanceNo + "'");
				for (StoreBalanceM storeBalanceM2 : storeBalanceMlist) {
					balanceId = storeBalanceM2.getId();
				}

				Criteria c = session.createCriteria(StoreFyDocumentNo.class).add(
						Restrictions.eq("Department.Id", deptId))
						.add(
								Restrictions.eq("Hospital.Id", hospitalId));

				storeFyDocumentNoList = c.list();
				String balanceNo1 = "";
				if(storeFyDocumentNoList.size()>0){
					for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
						if (storeFyDocumentNo.getBalanceNo() != null) {
							balanceNo1 = ("" + storeFyDocumentNo.getBalanceNo());
							balanceNo1 = getMaxNo(balanceNo1);
						} else {
							balanceNo1 = getMaxNo("");
						}
					}
				}

				int StoreFyDocumentNoId = 0;

				for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
					StoreFyDocumentNoId = documentNo.getId();
				}



				//int StoreFyDocumentNoId = 1;
				if(StoreFyDocumentNoId!=0){
					StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
							.load(StoreFyDocumentNo.class, StoreFyDocumentNoId);
					storeFyDocumentNo.setBalanceNo(balanceNo1);
					hbt.update(storeFyDocumentNo);
					hbt.refresh(storeFyDocumentNo);
				}else{
					StoreFyDocumentNo storeFyDocumentNo = new StoreFyDocumentNo();
					storeFyDocumentNo.setBalanceNo(balanceNo);
					MasDepartment department = new MasDepartment();
					department.setId(deptId);
					storeFyDocumentNo.setDepartment(department);
					
					MasHospital hospital = new MasHospital();
					hospital.setId(hospitalId);
					storeFyDocumentNo.setHospital(hospital);
					
					hbt.save(storeFyDocumentNo);
				}
			}
			if (storeBalanceTList.size() > 0) {
				if (pageNo != 1) {
					storeBalanceM.setId(balanceId);
				}
				for (int i = 0; i < storeBalanceTList.size(); i++) {
					StoreBalanceT storeBalanceTObj = new StoreBalanceT();
					storeBalanceTObj = (StoreBalanceT) storeBalanceTList.get(i);
					storeBalanceTObj.setStoreBalanceM(storeBalanceM);
					hbt.save(storeBalanceTObj);
					hbt.refresh(storeBalanceTObj);

					int item_id = storeBalanceTObj.getItem().getId();
					int brand_id=0;
					BigDecimal cost_price=new BigDecimal(0);
					try
					{
						brand_id = storeBalanceTObj.getBrand().getId();
					}
					catch(Exception e){

					}
					try
					{
						cost_price = storeBalanceTObj.getUnitRate();
					}catch(Exception e)
					{

					}
					String batch_no = storeBalanceTObj.getBatchNo();
					batch_no=batch_no.toUpperCase();
					int department_id = storeBalanceTObj.getStoreBalanceM()
					.getDepartment().getId();
					storeItemBatchStockList = hbt
					.find("from jkt.hms.masters.business.StoreItemBatchStock as inp where inp.Item.Id = "
							+ item_id
							//+ " and inp.CostPrice = "
							//+ cost_price
							+ " and inp.Department.Id= "
							+ department_id
							+ " and upper(inp.BatchNo) ='"
							+ batch_no+"'"
							//+ "' and inp.Brand.Id = "
							//+ brand_id
							+" and inp.Hospital.Id="+hospitalId);
					if (storeItemBatchStockList != null
							&& storeItemBatchStockList.size() > 0) {

						int id = storeItemBatchStockList.get(0).getId();

						storeItemBatchStock = (StoreItemBatchStock) getHibernateTemplate()
						.load(StoreItemBatchStock.class, id);

						storeItemBatchStock.setExpiryDate(storeBalanceTObj
								.getExpiryDate());

						BigDecimal a = null;
						BigDecimal b = null;
						BigDecimal c = null;
						a = storeBalanceTObj.getQty();
						b = storeItemBatchStock.getClosingStock();
						c = a.add(b);
						storeItemBatchStock.setClosingStock(c);

						storeItemBatchStock
						.setOpeningBalanceDate(storeBalanceTObj
								.getStoreBalanceM().getBalanceDate());

						storeItemBatchStock.setCostPrice(storeBalanceTObj
								.getUnitRate());

						HibernateTemplate hbt1 = getHibernateTemplate();
						hbt1.setFlushModeName("FLUSH_EAGER");
						hbt1.setCheckWriteOperations(false);
						hbt1.update(storeItemBatchStock);
					} else {
						storeItemBatchStock = new StoreItemBatchStock();
						storeItemBatchStock.setDepartment(storeBalanceTObj
								.getStoreBalanceM().getDepartment());
						storeItemBatchStock.setItem(storeBalanceTObj.getItem());
						storeItemBatchStock.setBatchNo(storeBalanceTObj
								.getBatchNo());

						try
						{
							storeItemBatchStock.setHospital(storeBalanceTObj.getStoreBalanceM().getHospital());
						}catch(Exception e)
						{

						}

						try
						{
							storeItemBatchStock.setBrand(storeBalanceTObj
									.getBrand());
						}catch(Exception e)
						{

						}

						try
						{
							storeItemBatchStock.setCostPrice(storeBalanceTObj
									.getUnitRate());
						}catch(Exception e)
						{

						}
						storeItemBatchStock.setExpiryDate(storeBalanceTObj
								.getExpiryDate());
						storeItemBatchStock.setClosingStock(storeBalanceTObj
								.getQty());
						storeItemBatchStock
						.setOpeningBalanceDate(storeBalanceTObj
								.getStoreBalanceM().getBalanceDate());
						storeItemBatchStock
						.setOpeningBalanceQty(storeBalanceTObj.getQty());
						HibernateTemplate hbt1 = getHibernateTemplate();
						hbt1.setFlushModeName("FLUSH_EAGER");
						hbt1.setCheckWriteOperations(false);
						hbt1.save(storeItemBatchStock);
					}
				}
			}
			successfullyAdded = "yes";

			/*String qry = "select mas.item_id,mas.pvms_no,mas.nomenclature,mas.strength,con.item_unit_name from mas_store_item mas inner join mas_store_item_conversion con on mas.item_conversion_id = con.item_conversion_id ";
			objectList = (List) session.createSQLQuery(qry).list();*/
			/*
			 * if(objectList.size()!=0){ Criteria c =
			 * session.createCriteria(MasStoreItem.class).add(Restrictions.eq("Department.Id",
			 * deptId)).add(Restrictions.not(Restrictions.in("Id",
			 * objectList))); c.setFirstResult(0); c.setMaxResults(10); itemList =
			 * c.list(); }else{ Criteria c =
			 * session.createCriteria(MasStoreItem.class).add(Restrictions.eq("Department.Id",
			 * deptId)); c.setFirstResult(0); c.setMaxResults(10); itemList =
			 * c.list(); }
			 *
			 *
			 */

			// itemList = getHibernateTemplate().find("from
			// jkt.hms.masters.business.MasStoreItem as mi where mi.Status =
			// 'y'");
			searchStoreBalanceMList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.StoreBalanceM as md ");
			/*approvedByEmployeeList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasEmployee ");*/
			// brandList=getHibernateTemplate().find("from
			// jkt.hms.masters.business.MasStoreBrand ");
			tx.commit();

		} catch (RuntimeException e) {
			if (tx != null)
				tx.rollback();
			// throw e; // or display error message
			e.printStackTrace();
		} finally {
			// //session.close();
		}

		// map.put("itemList",itemList);
		map.put("objectList", objectList);
		map.put("approvedByList", approvedByEmployeeList);
		// map.put("brandList", brandList);
		map.put("searchStoreBalanceMList", searchStoreBalanceMList);
		map.put("successfullyAdded", successfullyAdded);
		map.put("balanceId", balanceId);

		return map;
	}

	public Map<String, Object> showLastDemandNo(int pageNo) {
		Map map = new HashMap();
		List<StoreInternalIndentM> gridIndentMList = new ArrayList<StoreInternalIndentM>();
		List<StoreInternalIndentT> gridIndentTList = new ArrayList<StoreInternalIndentT>();
		@SuppressWarnings("unused")
		List<MasStoreSection> gridSectionList = new ArrayList<MasStoreSection>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		int id = 0;
		int firstResult = 0;
		int maxResults = 8;

		if (pageNo != 1) {
			firstResult = firstResult + (pageNo - 1) * 8;
		}
		List<StoreInternalIndentM> searchStoreInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		List<MasDepartment> sectionList = new ArrayList<MasDepartment>();
		List<StoreInternalIndentM> list = new ArrayList<StoreInternalIndentM>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		List<MasEmployee> requestByEmployeeList = new ArrayList<MasEmployee>();
		StoreInternalIndentM t = new StoreInternalIndentM();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		session = (Session) getSession();
		List objectList = new ArrayList();
		int internalIndentId = 0;
		int grnStartNo = 0;
		String no = "";
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		try {
			gridIndentMList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreInternalIndentM as md ");
			for (Iterator i = gridIndentMList.listIterator(); i.hasNext();) {
				t = (StoreInternalIndentM) i.next();

			}
			internalIndentId = t.getId();
			Criteria c = session.createCriteria(StoreInternalIndentT.class)
			.add(Restrictions.eq("Internal.Id", internalIndentId));
			c.setFirstResult(firstResult);
			c.setMaxResults(maxResults);
			gridIndentTList = c.list();
			String qry = "select mas.item_id,mas.pvms_no,mas.nomenclature,mas.strength,b.stock,c.mmf_qty,mas.department_id,con.item_unit_name from mas_store_item mas inner join mas_store_item_conversion con on mas.item_conversion_id= con.item_conversion_id left outer join (select ba.item_id,sum(ba.closing_stock) stock from store_item_batch_stock ba where department_id=1 group by ba.item_id)b on mas.item_id=b.item_id left outer join (select it.mmf_qty, it.item_id from  store_internal_indent_m im inner join store_internal_indent_t it on im.id=it.internal_id where it.mmf_qty='"
				+ year + "' )c on mas.item_id=c.item_id;";
			objectList = (List) session.createSQLQuery(qry).list();
			gridIndentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreInternalIndentM as md where md.Id ="
					+ internalIndentId);
			searchStoreInternalIndentMList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreInternalIndentM as md ");
			requestByEmployeeList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasEmployee ");
			approvedByEmployeeList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasEmployee ");
			sectionList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasDepartment as ms where ms.Status = 'y'");
			departmentList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y'");
			storeFyDocumentNoList = (List) getHibernateTemplate().find(
			"from jkt.hms.masters.business.StoreFyDocumentNo ");
			for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
				if (storeFyDocumentNo.getDepartment().getId() == 1) {
					no = ("" + storeFyDocumentNo.getDemandNo());
					no = getMaxNo(no);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("gridIndentMList", gridIndentMList);
		map.put("gridIndentTList", gridIndentTList);
		map.put("internalIndentId", internalIndentId);
		map.put("departmentList", departmentList);
		map.put("approvedByList", approvedByEmployeeList);
		map.put("requestByList", requestByEmployeeList);
		map.put("searchStoreInternalIndentMList",
				searchStoreInternalIndentMList);
		map.put("sectionList", sectionList);
		map.put("objectList", objectList);
		map.put("max", no);

		return map;
	}

	public Map<String, Object> showLastDocNo(int pageNo) {
		Map map = new HashMap();
		List<StoreMmfDepartmentM> gridIndentMList = new ArrayList<StoreMmfDepartmentM>();
		List<StoreMmfDepartmentT> gridIndentTList = new ArrayList<StoreMmfDepartmentT>();
		@SuppressWarnings("unused")
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		int id = 0;
		int firstResult = 0;
		int maxResults = 8;

		if (pageNo != 1) {
			firstResult = firstResult + (pageNo - 1) * 8;
		}
		List<StoreMmfDepartmentM> searchStoreMmfDepartmentMList = new ArrayList<StoreMmfDepartmentM>();
		List<StoreMmfDepartmentM> list = new ArrayList<StoreMmfDepartmentM>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		StoreMmfDepartmentM t = new StoreMmfDepartmentM();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		session = (Session) getSession();
		List objectList = new ArrayList();
		int mmfDepartmentId = 0;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		try {

			gridIndentMList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.StoreMmfDepartmentM as md ");
			for (Iterator i = gridIndentMList.listIterator(); i.hasNext();) {
				t = (StoreMmfDepartmentM) i.next();

			}
			mmfDepartmentId = t.getId();

			Criteria c = session.createCriteria(StoreMmfDepartmentT.class).add(
					Restrictions.eq("StoreMmfDepartmentM.Id", mmfDepartmentId));
			c.setFirstResult(firstResult);
			c.setMaxResults(maxResults);
			gridIndentTList = c.list();
			gridIndentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreMmfDepartmentM as md where md.Id ="
					+ mmfDepartmentId);
			String qry = "select mas.item_id,mas.pvms_no,mas.nomenclature,mas.strength,con.item_unit_name from mas_store_item mas inner join mas_store_item_conversion con on mas.item_conversion_id= con.item_conversion_id ;";
			objectList = (List) session.createSQLQuery(qry).list();
			searchStoreMmfDepartmentMList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.StoreMmfDepartmentM as md ");
			approvedByEmployeeList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasEmployee ");
			departmentList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y'");

		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("gridIndentMList", gridIndentMList);
		map.put("gridIndentTList", gridIndentTList);
		map.put("mmfDepartmentId", mmfDepartmentId);
		map.put("departmentList", departmentList);
		map.put("approvedByList", approvedByEmployeeList);
		map.put("searchStoreMmfDepartmentMList", searchStoreMmfDepartmentMList);
		map.put("objectList", objectList);

		return map;
	}

	public Map<String, Object> addNextOrSubmitMmfDepartment(
			Map<String, Object> dataMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();
		String successfullyAdded = "no";
		@SuppressWarnings("unused")
		int pageNo = 0;
		String maxDocNo = "";
		StoreMmfDepartmentM storeMmfDepartmentM = new StoreMmfDepartmentM();
		List<StoreMmfDepartmentM> storeMmfDepartmentMlist = new ArrayList<StoreMmfDepartmentM>();
		List<StoreMmfDepartmentT> storeMmfDepartmentTlist = new ArrayList<StoreMmfDepartmentT>();

		// For Show Jsp
		List<StoreMmfDepartmentM> searchStoreMmfDepartmentMList = new ArrayList<StoreMmfDepartmentM>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<StoreMmfDepartmentM> list = new ArrayList<StoreMmfDepartmentM>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();

		session = (Session) getSession();
		List objectList = new ArrayList();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));

		int mmfDepartmentId = 0;
		String docNo = "";
		if (dataMap.get("storeMmfDepartmentM") != null) {
			storeMmfDepartmentM = (StoreMmfDepartmentM) dataMap
			.get("storeMmfDepartmentM");
		}
		if (dataMap.get("docNo") != null) {
			docNo = "" + dataMap.get("docNo");
		}

		if (dataMap.get("storeMmfDepartmentTlist") != null) {
			storeMmfDepartmentTlist = (List<StoreMmfDepartmentT>) dataMap
			.get("storeMmfDepartmentTlist");
		}
		if (dataMap.get("pageNo") != null) {
			pageNo = Integer.parseInt("" + dataMap.get("pageNo"));
		}
		if (dataMap.get("mmfDepartmentId") != null) {
			mmfDepartmentId = Integer.parseInt(""
					+ dataMap.get("mmfDepartmentId"));
		}
		// Session sess = factory.openSession();
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (pageNo == 1) {
				hbt.save(storeMmfDepartmentM);
				storeMmfDepartmentMlist = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreMmfDepartmentM as md where md.DocNo = '"
						+ docNo + "'");
				for (StoreMmfDepartmentM storeMmfDepartmentM2 : storeMmfDepartmentMlist) {
					mmfDepartmentId = storeMmfDepartmentM2.getId();
				}
				int StoreFyDocumentNoId = 1;
				StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
				.load(StoreFyDocumentNo.class, StoreFyDocumentNoId);
				storeFyDocumentNo.setMmfNo(docNo);
				hbt.update(storeFyDocumentNo);
			}

			if (storeMmfDepartmentTlist.size() > 0) {
				if (pageNo != 1) {
					storeMmfDepartmentM.setId(mmfDepartmentId);
				}
				for (int i = 0; i < storeMmfDepartmentTlist.size(); i++) {
					StoreMmfDepartmentT storeMmfDepartmentTObj = new StoreMmfDepartmentT();
					storeMmfDepartmentTObj = (StoreMmfDepartmentT) storeMmfDepartmentTlist
					.get(i);
					storeMmfDepartmentTObj
					.setStoreMmfDepartmentM(storeMmfDepartmentM);
					hbt.save(storeMmfDepartmentTObj);
				}

			}
			successfullyAdded = "yes";
			String qry = "select mas.item_id,mas.pvms_no,mas.nomenclature,mas.strength,con.item_unit_name from mas_store_item mas inner join mas_store_item_conversion con on mas.item_conversion_id= con.item_conversion_id ;";
			objectList = (List) session.createSQLQuery(qry).list();
			searchStoreMmfDepartmentMList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.StoreMmfDepartmentM as md ");
			departmentList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y'");
			approvedByEmployeeList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasEmployee ");
			tx.commit();

		} catch (RuntimeException e) {
			if (tx != null)
				tx.rollback();
			// throw e; // or display error message
			e.printStackTrace();
		} finally {
			//session.close();
		}
		map.put("searchStoreMmfDepartmentMList", searchStoreMmfDepartmentMList);
		map.put("objectList", objectList);
		map.put("successfullyAdded", successfullyAdded);
		map.put("departmentList", departmentList);
		map.put("approvedByEmployeeList", approvedByEmployeeList);
		map.put("mmfDepartmentId", mmfDepartmentId);
		return map;

	}

	public Map getMmfDepartmentModifyMapForDepot(int mmfDepartmentId, int pageNo) {

		Map map = new HashMap();
		List<StoreMmfDepartmentM> gridIndentMList = new ArrayList<StoreMmfDepartmentM>();
		List<StoreMmfDepartmentT> gridIndentTList = new ArrayList<StoreMmfDepartmentT>();
		@SuppressWarnings("unused")
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		int id = 0;
		int firstResult = 0;
		int maxResults = 8;

		if (pageNo != 1) {
			firstResult = firstResult + (pageNo - 1) * 8;
		}
		List<StoreMmfDepartmentM> searchStoreMmfDepartmentMList = new ArrayList<StoreMmfDepartmentM>();
		List<StoreMmfDepartmentM> list = new ArrayList<StoreMmfDepartmentM>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		session = (Session) getSession();
		List objectList = new ArrayList();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		try {

			Criteria c = session.createCriteria(StoreMmfDepartmentT.class).add(
					Restrictions.eq("StoreMmfDepartmentM.Id", mmfDepartmentId));
			c.setFirstResult(firstResult);
			c.setMaxResults(maxResults);
			gridIndentTList = c.list();
			gridIndentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreMmfDepartmentM as md where md.Id ="
					+ mmfDepartmentId);
			String qry = "select mas.item_id,mas.pvms_no,mas.nomenclature,mas.strength,con.item_unit_name from mas_store_item mas inner join mas_store_item_conversion con on mas.item_conversion_id= con.item_conversion_id ;";
			objectList = (List) session.createSQLQuery(qry).list();
			searchStoreMmfDepartmentMList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.StoreMmfDepartmentM as md ");
			approvedByEmployeeList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasEmployee ");
			departmentList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y'");

		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("gridIndentMList", gridIndentMList);
		map.put("gridIndentTList", gridIndentTList);
		map.put("mmfDepartmentId", mmfDepartmentId);
		map.put("departmentList", departmentList);
		map.put("approvedByList", approvedByEmployeeList);
		map.put("searchStoreMmfDepartmentMList", searchStoreMmfDepartmentMList);
		map.put("objectList", objectList);

		return map;
	}

	public int getStoreMmfDepartmentId(String docNo) {
		@SuppressWarnings("unused")
		int mmfDepartmentId = 0;
		List<StoreMmfDepartmentM> list = new ArrayList<StoreMmfDepartmentM>();
		list = (List) getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreMmfDepartmentM as pod where pod.DocNo = '"
				+ docNo + "'");
		for (StoreMmfDepartmentM storeMmfDepartmentM2 : list) {
			mmfDepartmentId = Integer.parseInt(""
					+ storeMmfDepartmentM2.getId());
		}
		return mmfDepartmentId;
	}

	public boolean updateNextMmfDepartment(
			Map<String, Object> masterAndDetailMap) {

		boolean successfullyAdded = false;
		StoreMmfDepartmentM storeIndentM2 = new StoreMmfDepartmentM();
		StoreMmfDepartmentM storeIndentM3 = new StoreMmfDepartmentM();
		List<StoreMmfDepartmentT> storeIndentTListForUpdate = new ArrayList<StoreMmfDepartmentT>();
		List<StoreMmfDepartmentT> storeIndentTListForAdd = new ArrayList<StoreMmfDepartmentT>();
		int mmfDepartmentId = 0;
		String lastChgBy = "";
		Date lastChgDate = null;
		String lastChgTime = "";
		int pageNo = 0;
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {
			if (masterAndDetailMap.get("storeMmfDepartmentM") != null)
				storeIndentM3 = (StoreMmfDepartmentM) masterAndDetailMap
				.get("storeMmfDepartmentM");
			if (masterAndDetailMap.get("storeIndentTListForUpdate") != null) {
				storeIndentTListForUpdate = (List<StoreMmfDepartmentT>) (masterAndDetailMap
						.get("storeIndentTListForUpdate"));
			}
			if (masterAndDetailMap.get("storeIndentTListForAdd") != null) {
				storeIndentTListForAdd = (List<StoreMmfDepartmentT>) (masterAndDetailMap
						.get("storeIndentTListForAdd"));
			}
			if (masterAndDetailMap.get("mmfDepartmentId") != null) {
				mmfDepartmentId = Integer.parseInt(""
						+ masterAndDetailMap.get("mmfDepartmentId"));
			}

			if (masterAndDetailMap.get("lastChgBy") != null) {
				lastChgBy = ("" + masterAndDetailMap.get("lastChgBy"));
			}
			if (masterAndDetailMap.get("lastChgTime") != null) {
				lastChgTime = ("" + masterAndDetailMap.get("lastChgTime"));
			}
			if (masterAndDetailMap.get("pageNo") != null) {
				pageNo = Integer.parseInt(("" + masterAndDetailMap
						.get("pageNo")));
			}
			if (masterAndDetailMap.get("lastChgDate") != null) {
				SimpleDateFormat formatterIn = new SimpleDateFormat(
				"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
				"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn.parse(""
						+ masterAndDetailMap.get("lastChgDate")));
				lastChgDate = java.sql.Date.valueOf(date4MySQL);
			}
			if (pageNo == 1) {
				hbt.update(storeIndentM3);
			}

			if (masterAndDetailMap.get("storeIndentTListForUpdate") != null) {
				storeIndentTListForUpdate = (List<StoreMmfDepartmentT>) masterAndDetailMap
				.get("storeIndentTListForUpdate");
				if (storeIndentTListForUpdate.size() > 0) {
					for (int i = 0; i < storeIndentTListForUpdate.size(); i++) {
						StoreMmfDepartmentT storeMmfDepartmentT = new StoreMmfDepartmentT();
						storeMmfDepartmentT = (StoreMmfDepartmentT) storeIndentTListForUpdate
						.get(i);

						StoreMmfDepartmentM storeMmfDepartmentM = new StoreMmfDepartmentM();
						storeMmfDepartmentM.setId(mmfDepartmentId);
						storeMmfDepartmentT
						.setStoreMmfDepartmentM(storeMmfDepartmentM);

						hbt.update(storeMmfDepartmentT);
					}
				}
				successfullyAdded = true;
			}
			if (masterAndDetailMap.get("storeIndentTListForAdd") != null) {
				storeIndentTListForAdd = (List<StoreMmfDepartmentT>) masterAndDetailMap
				.get("storeIndentTListForAdd");
				if (storeIndentTListForAdd.size() > 0) {
					for (int i = 0; i < storeIndentTListForAdd.size(); i++) {
						StoreMmfDepartmentT storeMmfDepartmentT = new StoreMmfDepartmentT();
						storeMmfDepartmentT = (StoreMmfDepartmentT) storeIndentTListForAdd
						.get(i);

						StoreMmfDepartmentM storeMmfDepartmentM = new StoreMmfDepartmentM();
						storeMmfDepartmentM.setId(mmfDepartmentId);
						storeMmfDepartmentT
						.setStoreMmfDepartmentM(storeMmfDepartmentM);

						hbt.save(storeMmfDepartmentT);
					}
				}
				successfullyAdded = true;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return successfullyAdded;

	}

	// --------------------------------------------
	// Ack------------------------------------
	public Map<String, Object> showAckJsp(int deptId,int hospitalId)
	{
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIssueM> storeIssueMList = new ArrayList<StoreIssueM>();
		List<StoreIssueM> storeIssueMList1 = new ArrayList<StoreIssueM>();
		List<StoreIssueT> storeIssueTList = new ArrayList<StoreIssueT>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		List<StoreIssueM> searchStoreIssueMList = new ArrayList<StoreIssueM>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<StoreIssueM> list = new ArrayList<StoreIssueM>();
		Session session = (Session) getSession();
		//TreeMap tm = new TreeMap();
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		try {
			storeIssueMList = hbt
			.find("select distinct mi.IssueM from jkt.hms.masters.business.StoreIssueT as mi where mi.ReceivedBy = "
					+ null+ " and mi.AckDate = "+ null +" and  mi.Issued = 'y' and mi.IssueM.ToStore.Id = "
					+ deptId +"  and mi.IssueM.Hospital.Id = "+hospitalId); // add by javed khan
			String query = "select distinct d.Department from jkt.hms.masters.business.StoreIssueM as d " +
			" where d.Id in ( select distinct t.IssueM.Id from jkt.hms.masters.business.StoreIssueT as t" +
			" where t.AckDate is null and  t.ReceivedBy is null and t.Issued = 'y'  ) and  d.ToStore.Id = "+ deptId + " and  d.Hospital.Id = "+ hospitalId + " and d.IssueType='i'" ;
			departmentList = getHibernateTemplate()
			.find(query);
			/*
			 * "select distinct d.Department from jkt.hms.masters.business.StoreIssueM as d " +
							" left outer join jkt.hms.masters.business.StoreIssueT as t " +
							" where t.AckDate is null and d.Id = t.IssueM.Id and  d.ToStore.Id = "
									+ deptId + " and d.IssueType='i' group by t.IssueM.Id "
			 */
			for (StoreIssueM storeIssueM : storeIssueMList) {
				if (storeIssueM.getIssueType().equalsIgnoreCase("i")) {
					int storeIssueMId = storeIssueM.getId();
					storeIssueTList = getHibernateTemplate().find(
							"from jkt.hms.masters.business.StoreIssueT as mi where mi.IssueM.Id = "
							+ storeIssueMId + " and mi.ReceivedBy = "+ null + " and mi.AckDate = " + null
							+ " and  mi.Issued = 'y' ");
					if (storeIssueTList != null && storeIssueTList.size() > 0)
						storeIssueMList1.add(storeIssueM);
					//tm.put(storeIssueM.getIssueNo(),storeIssueM.getId());
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}	
		approvedByEmployeeList =  session.createCriteria(MasEmployee.class, "emp").add(Restrictions.in("emp.Id", getEmployeeIdDepartmentWise(session, deptId)))
				.add(Restrictions.eq("emp.Status", "y")).addOrder(Order.asc("emp.FirstName")).list();
		map.put("approvedByEmployeeList", approvedByEmployeeList);
		map.put("storeIssueMList", storeIssueMList1);
		map.put("departmentList", departmentList);
		//map.put("tm", tm);
		return map;
	}
	
	public Map<String, Object> showAckJspForRC(int deptId,int hospitalId)
	{
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIssueM> storeIssueMList = new ArrayList<StoreIssueM>();
		List<StoreIssueM> storeIssueMList1 = new ArrayList<StoreIssueM>();
		List<StoreIssueT> storeIssueTList = new ArrayList<StoreIssueT>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		List<StoreIssueM> searchStoreIssueMList = new ArrayList<StoreIssueM>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<StoreIssueM> list = new ArrayList<StoreIssueM>();
		Session session = (Session) getSession();
		//TreeMap tm = new TreeMap();
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		try {
			storeIssueMList = hbt
			.find("select distinct mi.IssueM from jkt.hms.masters.business.StoreIssueT as mi where mi.ReceivedBy = "
					+ null+ " and mi.AckDate = "+ null +" and  mi.Issued = 'y' and mi.IssueM.ToStore.Id = "
					+ deptId +"  and mi.IssueM.Hospital.Id = "+hospitalId); // add by javed khan
			String query = "select distinct d.Department from jkt.hms.masters.business.StoreIssueM as d " +
			" where d.Id in ( select distinct t.IssueM.Id from jkt.hms.masters.business.StoreIssueT as t" +
			" where t.AckDate is null and  t.ReceivedBy is null and t.Issued = 'y'  ) and  d.ToStore.Id = "+ deptId + " and  d.Hospital.Id = "+ hospitalId + " and d.IssueType='i'" ;
			departmentList = getHibernateTemplate()
			.find(query);
			/*
			 * "select distinct d.Department from jkt.hms.masters.business.StoreIssueM as d " +
							" left outer join jkt.hms.masters.business.StoreIssueT as t " +
							" where t.AckDate is null and d.Id = t.IssueM.Id and  d.ToStore.Id = "
									+ deptId + " and d.IssueType='i' group by t.IssueM.Id "
			 */
			for (StoreIssueM storeIssueM : storeIssueMList) {
				if (storeIssueM.getIssueType().equalsIgnoreCase("i")) {
					int storeIssueMId = storeIssueM.getId();
					storeIssueTList = getHibernateTemplate().find(
							"from jkt.hms.masters.business.StoreIssueT as mi where mi.IssueM.Id = "
							+ storeIssueMId + " and mi.ReceivedBy = "+ null + " and mi.AckDate = " + null
							+ " and  mi.Issued = 'y' ");
					if (storeIssueTList != null && storeIssueTList.size() > 0)
						storeIssueMList1.add(storeIssueM);
					//tm.put(storeIssueM.getIssueNo(),storeIssueM.getId());
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}	
		approvedByEmployeeList =  session.createCriteria(MasEmployee.class, "emp").add(Restrictions.in("emp.Id", getEmployeeIdDepartmentWise(session, deptId)))
				.add(Restrictions.eq("emp.Status", "y")).addOrder(Order.asc("emp.FirstName")).list();
		map.put("approvedByEmployeeList", approvedByEmployeeList);
		map.put("storeIssueMList", storeIssueMList1);
		map.put("departmentList", departmentList);
		//map.put("tm", tm);
		return map;
	}

	public Map<String, Object> createGridIssueData(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();
		List<StoreIssueM> storeIssueMList1 = new ArrayList<StoreIssueM>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		List<StoreIssueM> storeIssueMList = new ArrayList<StoreIssueM>();
		int itemId = 0;
		String pvms = null;
		String nomenclature = null;
		String au = null;
		int brand = 0;
		String brandname = null;

		String batchNo = null;
		BigDecimal qtyRequest = null;
		BigDecimal qtyIssued = null;
		String expiry_date = null;
		// javed khan
		String manu_date = null;
		String comp = null;
		int id = 0;
		int issueId = 0;
		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		List<StoreIssueM> issueMList = new ArrayList<StoreIssueM>();
		List<StoreIssueT> storeIssueTList = new ArrayList<StoreIssueT>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		int hospitalId=0;
		int deptId=box.getInt("deptId");

		int issueDeptId = box.getInt(ISSUE_DEPT);
		int issueNo = box.getInt(ISSUE_NO);
		Properties properties = new Properties();
		URL resourcePath = Thread.currentThread().getContextClassLoader()
		.getResource("stores.properties");
		try {
			properties.load(resourcePath.openStream());
		} catch (Exception e) {
			e.printStackTrace();
		}

		try {
			hospitalId = Integer.parseInt(""+box.get("hospitalId"));
			issueMList = session.createCriteria(StoreIssueM.class).add(
					Restrictions.eq("Id", issueNo))
					.add(Restrictions.eq("Hospital.Id", hospitalId)).list();

			approvedByEmployeeList =session.createCriteria(MasEmployee.class, "emp").add(Restrictions.in("emp.Id", getEmployeeIdDepartmentWise(session, deptId)))
					.add(Restrictions.eq("emp.Status", "y")).addOrder(Order.asc("emp.FirstName")).list();
			storeIssueMList = getHibernateTemplate()
			.find(
					"select distinct mi.IssueM from jkt.hms.masters.business.StoreIssueT as mi where mi.ReceivedBy = "
					+ null
					+ " and mi.AckDate = "
					+ null
					+ " and  mi.Issued = 'y' and mi.IssueM.ToStore.Id = "
					+ box.getInt("deptId")
					+" and mi.IssueM.Hospital.Id="+hospitalId);
			departmentList = getHibernateTemplate().find("select distinct d.Department from jkt.hms.masters.business.StoreIssueM as d " +
					" where d.Id in ( select distinct t.IssueM.Id from jkt.hms.masters.business.StoreIssueT as t" +
					" where t.AckDate is null and  t.ReceivedBy is null and t.Issued = 'y'  ) and  d.ToStore.Id = "+box.get("deptId")+ " and  d.Hospital.Id = "+ hospitalId + " and d.IssueType='i'");
			/*.find("select distinct mi.Department from jkt.hms.masters.business.StoreIssueM as mi where mi.ToStore.Id="
									+ box.get("deptId")
									+ " and mi.Status='o'");*/
			for (StoreIssueM storeIssueM : storeIssueMList) {
				if (storeIssueM.getIssueType().equalsIgnoreCase("i")
						&& storeIssueM.getStatus().equalsIgnoreCase("o")) {
					int storeIssueMId = storeIssueM.getId();
					storeIssueTList = getHibernateTemplate().find(
							"from jkt.hms.masters.business.StoreIssueT as mi where mi.IssueM.Id = "
							+ storeIssueMId + " and mi.ReceivedBy = "
							+ null + " and mi.AckDate = " + null
							+ " and  mi.Issued = 'y' and mi.IssueM.Hospital.Id = "+hospitalId);
					if (storeIssueTList != null && storeIssueTList.size() > 0)
						storeIssueMList1.add(storeIssueM);

				}
			}

			if (issueMList != null && issueMList.size() > 0) {
				StoreIssueM mObj = (StoreIssueM) issueMList.get(0);
				int storeIssueMId = mObj.getId();

				/*
				 * Case 1: Loan Out, issue_type = "l" Get All Issued but not
				 * acknowledged Items from store_issue_t
				 *
				 * Only do the Second Case, Case 1 will be adjusted after
				 * issuing. Case 2: Issue, issue_type = "i" Get only records of
				 * item_order 3 issued but not acknowledged from store_issue_t.
				 *
				 */

				/*
				 * if (mObj.getIssueType().equalsIgnoreCase("l")) {
				 * storeIssueTList =
				 * session.createCriteria(StoreIssueT.class).add(Restrictions.eq("IssueM.Id",
				 * storeIssueMId)) .add(Restrictions.eq("Issued", "y"))
				 * .add(Restrictions.isNull("AckDate"))
				 * .add(Restrictions.isNull("ReceivedBy")).list(); }
				 */

				if (mObj.getIssueType().equalsIgnoreCase("i")) {
					storeIssueTList = session.createCriteria(StoreIssueT.class)
					.add(Restrictions.eq("IssueM.Id", storeIssueMId))
					.add(Restrictions.eq("Issued", "y"))
					.add(Restrictions.isNull("CivLoan"))     // add by javed khan
					.add(Restrictions.isNull("AckDate")).add(
							Restrictions.isNull("ReceivedBy")).list();

				}
			}

			if (storeIssueTList != null && storeIssueTList.size() > 0) {
				for (Iterator iterator = storeIssueTList.iterator(); iterator
				.hasNext();) {
					StoreIssueT tObj = (StoreIssueT) iterator.next();

					try {
						expiry_date = HMSUtil
						.convertDateToStringWithoutTime(tObj
								.getExpiryDate());
					} catch (Exception e) {
						expiry_date = null;
					}

					try {
						itemId = tObj.getItem().getId();
					} catch (Exception e) {
						itemId = 0;
					}
					try {
						issueId = tObj.getIssueM().getId();
					} catch (Exception e) {
						issueId = 0;
					}

					try {
						id = tObj.getId();
					} catch (Exception e) {
						id = 0;
					}
					try {
						pvms = tObj.getItem().getPvmsNo();
					} catch (Exception e) {
						pvms = "";
					}

					try {
						nomenclature = tObj.getItem().getNomenclature();
					} catch (Exception e) {
						nomenclature = "";
					}

					try {
						brand = tObj.getBrand().getId();
					} catch (Exception e) {
						brand = 0;
					}
					try {
						brandname = tObj.getBrand().getBrandName();
					} catch (Exception e) {
						brandname = "";
					}

					try {
						au = tObj.getItem().getItemConversion()
						.getPurchaseUnit().getUnitName();
					} catch (Exception e) {
						au = "";
					}

					try {
						batchNo = tObj.getBatchNo();
					} catch (Exception e) {
						batchNo = "";
					}

					try {
						qtyRequest = tObj.getQtyRequest();
					} catch (Exception e) {
						qtyRequest = new BigDecimal(0);
					}
					try {
						qtyIssued = tObj.getQtyIssued();
					} catch (Exception e) {
						qtyIssued = new BigDecimal(0);
					}
					try {// javed khan
						manu_date = HMSUtil
						.convertDateToStringWithoutTime(tObj.getBatchStock().getManufactureDate());
					} catch (Exception e) {
						manu_date = null;
					}
					try {
						//comp = tObj.getItem().getManufacturer().getManufacturerName();
						comp = tObj.getBatchStock().getManufacturer().getManufacturerName();
					} catch (Exception e) {
						comp = "";
					}

					hData = new HashMap<String, Object>();
					hData.put("issueId", issueId);
					hData.put("itemId", itemId);
					hData.put("pvms", pvms);
					hData.put("nomenclature", nomenclature);
					hData.put("brand", brand);
					hData.put("brandname", brandname);
					hData.put("au", au);
					hData.put("batchNo", batchNo);
					hData.put("qtyRequest", qtyRequest);
					hData.put("qtyIssued", qtyIssued);
					hData.put("expiry_date", expiry_date);
					// javed khan
					hData.put("manu_date", manu_date );
					hData.put("comp", comp );

					vResult.add(hData);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}

		try {
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("pagedArray", pagedArray);
		map.put("approvedByEmployeeList", approvedByEmployeeList);
		map.put("storeIssueMList", storeIssueMList);
		map.put("departmentList", departmentList);
		return map;
	}

	
	public Map<String, Object> getItemRCList(Box box)
	{

		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<RcDetails> ipdRcDetailsList = new ArrayList<RcDetails>();
		session = (Session) getSession();
		
		/*int deptId = box.getInt(ISSUE_DEPT);
		int userId = box.getInt("userId");
		int issueMasterId = box.getInt(ISSUE_NO);*/
		int hospitalId = box.getInt("hospitalId") ;
		int id = box.getInt("id");
		Transaction tx = null;

		try {

			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			tx = session.beginTransaction();
			ipdRcDetailsList = session.createCriteria(RcDetails.class)
					.createAlias("Header", "hd")
			.add(Restrictions.eq("hd.Id", id))
			.add(Restrictions.eq("hd.Hospital.Id", hospitalId)) 
			.list();

		    map.put("ipdRcDetailsList", ipdRcDetailsList);
			tx.commit();
		} catch (HibernateException e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();
		}
		return map;
	}
	
	public Map<String, Object> doAddAckItems(Box box)
	{

		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreItemBatchStock> itemList = new ArrayList<StoreItemBatchStock>();
		session = (Session) getSession();
		Date ackDate = HMSUtil.dateFormatterDDMMYYYY(box.getString(ACK_DATE));
		int ackBy = box.getInt(ACK_BY);
		int deptId = box.getInt(ISSUE_DEPT);
		int userId = box.getInt("userId");
		int issueMasterId = box.getInt(ISSUE_NO);
		int hospitalId = Integer.parseInt(""+box.get("hospitalId")) ;
		Transaction tx = null;

		try {

			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			tx = session.beginTransaction();
			List storeIssueMList = session.createCriteria(StoreIssueM.class)
			.add(Restrictions.eq("Id", issueMasterId))
			.add(Restrictions.eq("Hospital.Id", hospitalId)) // add javed khan
			.list();

			if (storeIssueMList != null && storeIssueMList.size() > 0) {
				StoreIssueM storeIssueM = (StoreIssueM) storeIssueMList.get(0);
				List<StoreIssueT> storeIssueTList = new ArrayList<StoreIssueT>();
				// For StoreInternalIndentM Receive Status Update
				StoreInternalIndentM indentM = (StoreInternalIndentM)hbt.get(StoreInternalIndentM.class, storeIssueM.getRequestNo().getId());
				indentM.setReceivedStatus("y");
				hbt.update(indentM);
				hbt.flush();
				// End
				int count = 0;
				if (storeIssueM.getIssueType().equalsIgnoreCase("i")) {
					storeIssueTList = session.createCriteria(StoreIssueT.class)
					.add(Restrictions.eq("IssueM", storeIssueM)).add(
							Restrictions.eq("Issued", "y")).add(
									Restrictions.isNull("AckDate")).add(
											Restrictions.isNull("ReceivedBy")).list();
					// .add(Restrictions.eq("ItemOrder", "3")).list();

				}
				for (StoreIssueT storeIssueT : storeIssueTList) {
					if(storeIssueT.getCivLoan() == null){

						List storeItemBatchStockList = session.createQuery(
								"select sib  from StoreItemBatchStock as sib where sib.Item.Id ="
								+ storeIssueT.getItemIssued().getId()
								+ " and sib.BatchNo='"
								+ storeIssueT.getBatchNo()
								+ "' and sib.Brand.Id = "
								+ storeIssueT.getBrand().getId()
								+ " and sib.Manufacturer.Id = "
								+ storeIssueT.getBatchStock().getManufacturer().getId()
								+ " and sib.Department.Id = "
								+ box.getInt("deptId")
								+" and sib.Hospital.Id = "
								+ hospitalId).list(); // add javed khan

						// If alreay Item exists in Item Batch Stock, then update
						// the stock
						if (storeItemBatchStockList != null
								&& storeItemBatchStockList.size() > 0) {
							StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock) storeItemBatchStockList
							.get(0);
							int storeItemBatchStockId = storeItemBatchStock.getId();
							StoreItemBatchStock storeItemBatchStockObj = (StoreItemBatchStock) hbt
							.load(StoreItemBatchStock.class,
									storeItemBatchStockId);

							BigDecimal closingStock = (BigDecimal) storeItemBatchStock
							.getClosingStock();

							BigDecimal receivedQty = (BigDecimal) storeItemBatchStock
							.getReceivedQty();
							// javed khan

							try {
								if (storeIssueT.getQtyIssued()
										.equals(new BigDecimal(0)) && storeIssueT.getQtyIssued() == null )  {
									closingStock = (BigDecimal) storeItemBatchStock
									.getClosingStock();
								} else {
									closingStock = closingStock.add(storeIssueT
											.getQtyIssued());
								}
							} catch (Exception e) {
								// javed khan
								/*closingStock = (BigDecimal) storeItemBatchStock
							.getClosingStock();*/
								closingStock= (BigDecimal) storeIssueT.getQtyIssued();
								//e.printStackTrace();
							}
							storeItemBatchStockObj.setClosingStock(closingStock);

							try {
								if (storeIssueT.getQtyIssued()
										.equals(new BigDecimal(0))) {
									receivedQty = (BigDecimal) storeItemBatchStock
									.getReceivedQty();
								} else {
									receivedQty = receivedQty.add(storeIssueT
											.getQtyIssued());
								}
							} catch (Exception e) {
								
							try {
								storeItemBatchStockObj.setManufactureDate(storeIssueT.getBatchStock().getManufactureDate());
								storeItemBatchStockObj.setManufacturer(storeIssueT.getBatchStock().getManufacturer());
								storeItemBatchStockObj.setLastChgDate(new Date());
								//storeItemBatchStockObj.setLastChgBy(new Users(ackBy));
							} catch (Exception e1) {}
								/*receivedQty = (BigDecimal) storeItemBatchStock
							.getReceivedQty();*/
								receivedQty =(BigDecimal) storeIssueT.getQtyIssued();
							}
							storeItemBatchStockObj.setReceivedQty(receivedQty);

							hbt.update(storeItemBatchStockObj);
						} else // If item not found in item batch stock, add the
							// item with stock
						{
							StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
							storeItemBatchStock.setItem(new MasStoreItem(
									storeIssueT.getItemIssued().getId()));
							String batch = null;
							try {
								storeItemBatchStock.setBatchNo(storeIssueT
										.getBatchNo());
							} catch (Exception e) {
								storeItemBatchStock.setBatchNo("");
							}

							storeItemBatchStock.setDepartment(new MasDepartment(box
									.getInt("deptId")));
							// add javed khan
							MasHospital mh = new MasHospital();
							mh.setId(hospitalId);
							storeItemBatchStock.setHospital(mh);
							try {
								storeItemBatchStock.setExpiryDate(storeIssueT
										.getExpiryDate());
							} catch (Exception e) {
								storeItemBatchStock.setExpiryDate(null);
							}
							try {
								storeItemBatchStock.setManufactureDate(storeIssueT.getBatchStock().getManufactureDate());
								storeItemBatchStock.setManufacturer(storeIssueT.getBatchStock().getManufacturer());
								storeItemBatchStock.setLastChgDate(new Date());
								//storeItemBatchStock.setLastChgBy(new Users(userId));
							} catch (Exception e) {}

							try {
								storeItemBatchStock.setOpeningBalanceDate(ackDate);
							} catch (Exception e) {
								storeItemBatchStock.setOpeningBalanceDate(null);
							}

							try {
								storeItemBatchStock.setClosingStock(storeIssueT
										.getQtyIssued());
							} catch (Exception e) {
								storeItemBatchStock.setClosingStock(new BigDecimal(
										0));
							}
							//commented by nirul
							/*try {
							storeItemBatchStock
									.setOpeningBalanceQty(storeIssueT
											.getQtyIssued());
						} catch (Exception e) {
							storeItemBatchStock
									.setOpeningBalanceQty(new BigDecimal(0));
						}*/

							try {
								storeItemBatchStock.setReceivedQty(storeIssueT
										.getQtyIssued());
							} catch (Exception e) {
								storeItemBatchStock
								.setReceivedQty(new BigDecimal(0));
							}

							try {
								storeItemBatchStock
								.setBrand(storeIssueT.getBrand());
							} catch (Exception e) {
								storeItemBatchStock.setBrand(null);
							}

							try {
								storeItemBatchStock.setCostPrice(storeIssueT
										.getCostPrice());
							} catch (Exception e) {
								storeItemBatchStock.setCostPrice(new BigDecimal(0));
							}

							hbt.save(storeItemBatchStock);
						}
					}
					storeIssueT.setAckDate(ackDate);
					MasEmployee masEmployee = new MasEmployee();
					masEmployee.setId(ackBy);
					storeIssueT.setReceivedBy(masEmployee);
					hbt.update(storeIssueT);
					hbt.refresh(storeIssueT);
				}

				storeIssueM.setStatus("p");
				hbt.update(storeIssueM);
				// }

			}
			tx.commit();
		} catch (HibernateException e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();
		}
		return map;
	}

	
	public Map<String, Object> doAddAckItemsForRC(Box box)
	{

		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreItemBatchStock> itemList = new ArrayList<StoreItemBatchStock>();
		session = (Session) getSession();
		Date ackDate = HMSUtil.dateFormatterDDMMYYYY(box.getString(ACK_DATE));
		int ackBy = box.getInt(ACK_BY);
		int deptId = box.getInt(ISSUE_DEPT);
		int userId = box.getInt("userId");
		int issueMasterId = box.getInt(ISSUE_NO);
		int hospitalId = Integer.parseInt(""+box.get("hospitalId")) ;
		Transaction tx = null;

		try {

			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			tx = session.beginTransaction();
			List storeIssueMList = session.createCriteria(StoreIssueM.class)
			.add(Restrictions.eq("Id", issueMasterId))
			.add(Restrictions.eq("Hospital.Id", hospitalId)) // add javed khan
			.list();

			if (storeIssueMList != null && storeIssueMList.size() > 0) {
				StoreIssueM storeIssueM = (StoreIssueM) storeIssueMList.get(0);
				List<StoreIssueT> storeIssueTList = new ArrayList<StoreIssueT>();
				// For StoreInternalIndentM Receive Status Update
				RcRequestHeader requestHeader = (RcRequestHeader)hbt.get(RcRequestHeader.class, storeIssueM.getRequestHeader().getId());
				requestHeader.setReceivedSatus("y");
				hbt.update(requestHeader);
				hbt.flush();
				// End
				int count = 0;
				if (storeIssueM.getIssueType().equalsIgnoreCase("i")) {
					storeIssueTList = session.createCriteria(StoreIssueT.class)
					.add(Restrictions.eq("IssueM", storeIssueM)).add(
							Restrictions.eq("Issued", "y")).add(
									Restrictions.isNull("AckDate")).add(
											Restrictions.isNull("ReceivedBy")).list();
					// .add(Restrictions.eq("ItemOrder", "3")).list();

				}
				for (StoreIssueT storeIssueT : storeIssueTList) {
					if(storeIssueT.getCivLoan() == null){

						List storeItemBatchStockList = session.createQuery(
								"select sib  from StoreItemBatchStock as sib where sib.Item.Id ="
								+ storeIssueT.getItemIssued().getId()
								+ " and sib.BatchNo='"
								+ storeIssueT.getBatchNo()
								+ "' and sib.Brand.Id = "
								+ storeIssueT.getBrand().getId()
								+ " and sib.Manufacturer.Id = "
								+ storeIssueT.getBatchStock().getManufacturer().getId()
								+ " and sib.Department.Id = "
								+ box.getInt("deptId")
								+" and sib.Hospital.Id = "
								+ hospitalId).list(); // add javed khan

						// If alreay Item exists in Item Batch Stock, then update
						// the stock
						if (storeItemBatchStockList != null
								&& storeItemBatchStockList.size() > 0) {
							StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock) storeItemBatchStockList
							.get(0);
							int storeItemBatchStockId = storeItemBatchStock.getId();
							StoreItemBatchStock storeItemBatchStockObj = (StoreItemBatchStock) hbt
							.load(StoreItemBatchStock.class,
									storeItemBatchStockId);

							BigDecimal closingStock = (BigDecimal) storeItemBatchStock
							.getClosingStock();

							BigDecimal receivedQty = (BigDecimal) storeItemBatchStock
							.getReceivedQty();
							// javed khan

							try {
								if (storeIssueT.getQtyIssued()
										.equals(new BigDecimal(0)) && storeIssueT.getQtyIssued() == null )  {
									closingStock = (BigDecimal) storeItemBatchStock
									.getClosingStock();
								} else {
									closingStock = closingStock.add(storeIssueT
											.getQtyIssued());
								}
							} catch (Exception e) {
								// javed khan
								/*closingStock = (BigDecimal) storeItemBatchStock
							.getClosingStock();*/
								closingStock= (BigDecimal) storeIssueT.getQtyIssued();
								//e.printStackTrace();
							}
							storeItemBatchStockObj.setClosingStock(closingStock);

							try {
								if (storeIssueT.getQtyIssued()
										.equals(new BigDecimal(0))) {
									receivedQty = (BigDecimal) storeItemBatchStock
									.getReceivedQty();
								} else {
									receivedQty = receivedQty.add(storeIssueT
											.getQtyIssued());
								}
							} catch (Exception e) {
								
							try {
								storeItemBatchStockObj.setManufactureDate(storeIssueT.getBatchStock().getManufactureDate());
								storeItemBatchStockObj.setManufacturer(storeIssueT.getBatchStock().getManufacturer());
								storeItemBatchStockObj.setLastChgDate(new Date());
								//storeItemBatchStockObj.setLastChgBy(new Users(ackBy));
							} catch (Exception e1) {}
								/*receivedQty = (BigDecimal) storeItemBatchStock
							.getReceivedQty();*/
								receivedQty =(BigDecimal) storeIssueT.getQtyIssued();
							}
							storeItemBatchStockObj.setReceivedQty(receivedQty);

							hbt.update(storeItemBatchStockObj);
						} else // If item not found in item batch stock, add the
							// item with stock
						{
							StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
							storeItemBatchStock.setItem(new MasStoreItem(
									storeIssueT.getItemIssued().getId()));
							String batch = null;
							try {
								storeItemBatchStock.setBatchNo(storeIssueT
										.getBatchNo());
							} catch (Exception e) {
								storeItemBatchStock.setBatchNo("");
							}

							storeItemBatchStock.setDepartment(new MasDepartment(box
									.getInt("deptId")));
							// add javed khan
							MasHospital mh = new MasHospital();
							mh.setId(hospitalId);
							storeItemBatchStock.setHospital(mh);
							try {
								storeItemBatchStock.setExpiryDate(storeIssueT
										.getExpiryDate());
							} catch (Exception e) {
								storeItemBatchStock.setExpiryDate(null);
							}
							try {
								storeItemBatchStock.setManufactureDate(storeIssueT.getBatchStock().getManufactureDate());
								storeItemBatchStock.setManufacturer(storeIssueT.getBatchStock().getManufacturer());
								storeItemBatchStock.setLastChgDate(new Date());
								//storeItemBatchStock.setLastChgBy(new Users(userId));
							} catch (Exception e) {}

							try {
								storeItemBatchStock.setOpeningBalanceDate(ackDate);
							} catch (Exception e) {
								storeItemBatchStock.setOpeningBalanceDate(null);
							}

							try {
								storeItemBatchStock.setClosingStock(storeIssueT
										.getQtyIssued());
							} catch (Exception e) {
								storeItemBatchStock.setClosingStock(new BigDecimal(
										0));
							}
							//commented by nirul
							/*try {
							storeItemBatchStock
									.setOpeningBalanceQty(storeIssueT
											.getQtyIssued());
						} catch (Exception e) {
							storeItemBatchStock
									.setOpeningBalanceQty(new BigDecimal(0));
						}*/

							try {
								storeItemBatchStock.setReceivedQty(storeIssueT
										.getQtyIssued());
							} catch (Exception e) {
								storeItemBatchStock
								.setReceivedQty(new BigDecimal(0));
							}

							try {
								storeItemBatchStock
								.setBrand(storeIssueT.getBrand());
							} catch (Exception e) {
								storeItemBatchStock.setBrand(null);
							}

							try {
								storeItemBatchStock.setCostPrice(storeIssueT
										.getCostPrice());
							} catch (Exception e) {
								storeItemBatchStock.setCostPrice(new BigDecimal(0));
							}

							hbt.save(storeItemBatchStock);
						}
					}
					storeIssueT.setAckDate(ackDate);
					MasEmployee masEmployee = new MasEmployee();
					masEmployee.setId(ackBy);
					storeIssueT.setReceivedBy(masEmployee);
					hbt.update(storeIssueT);
					hbt.refresh(storeIssueT);
				}

				storeIssueM.setStatus("p");
				hbt.update(storeIssueM);
				// }

			}
			tx.commit();
		} catch (HibernateException e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();
		}
		return map;
	}
	
	// ---------------------------------- Supply Order Entry
	// -----------------------------------

	@SuppressWarnings("unchecked")
	public Map<String, Object> searchSupplyOrderEntry(int indentId) {
		List<StoreIndentT> searchStoreIndentTList = new ArrayList<StoreIndentT>();
		List<StoreIndentM> searchStoreIndentMList = new ArrayList<StoreIndentM>();
		List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier>();
		Map<String, Object> indentTFieldsMap = new HashMap<String, Object>();
		List<StoreSupplyOrderEntry> searchSupplyOrderList = new ArrayList<StoreSupplyOrderEntry>();
		try {
			if ((indentId != 0)) {
				searchStoreIndentTList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreIndentT ");
				searchStoreIndentMList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreIndentM as md");
				supplierList = getHibernateTemplate()
				.find(
						"from jkt.hms.masters.business.MasStoreSupplier as i order by i.SupplierName");
				searchSupplyOrderList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreSupplyOrderEntry ");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		indentTFieldsMap.put("searchStoreIndentTList", searchStoreIndentTList);
		indentTFieldsMap.put("searchStoreIndentMList", searchStoreIndentMList);
		indentTFieldsMap.put("searchSupplyOrderList", searchSupplyOrderList);
		indentTFieldsMap.put("supplierList", supplierList);
		return indentTFieldsMap;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> showSupplyOrderEntryJsp() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIndentM> searchStoreIndentMList = new ArrayList<StoreIndentM>();
		List<StoreIndentT> searchStoreIndentTList = new ArrayList<StoreIndentT>();
		List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier>();
		List<StoreSupplyOrderEntry> searchSupplyOrderList = new ArrayList<StoreSupplyOrderEntry>();
		try {
			searchStoreIndentMList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.StoreIndentM as md");
			searchStoreIndentTList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.StoreIndentT as i ");
			supplierList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasStoreSupplier as i order by i.SupplierName");
			searchSupplyOrderList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.StoreSupplyOrderEntry as i");
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("searchStoreIndentMList", searchStoreIndentMList);
		map.put("searchStoreIndentTList", searchStoreIndentTList);
		map.put("searchSupplyOrderList", searchSupplyOrderList);
		map.put("supplierList", supplierList);
		return map;
	}

	public boolean addStoreSupplyOrderEntry(int indentId,
			List<StoreSupplyOrderEntry> storeSupplyOrderEntrylist) {
		boolean successfullyAdded = false;
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {

			if (storeSupplyOrderEntrylist.size() > 0) {
				StoreIndentM storeIndentM = new StoreIndentM();
				storeIndentM.setId(indentId);
				for (int i = 0; i < storeSupplyOrderEntrylist.size(); i++) {
					StoreSupplyOrderEntry storeSupplyOrderEntryObj = new StoreSupplyOrderEntry();
					storeSupplyOrderEntryObj = (StoreSupplyOrderEntry) storeSupplyOrderEntrylist
					.get(i);
					storeSupplyOrderEntryObj.setIndent(storeIndentM);
					hbt.save(storeSupplyOrderEntryObj);
				}

			}
			successfullyAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;
	}

	public boolean updateSupplyOrderEnter(int indentId,
			List<StoreSupplyOrderEntry> storeSupplyOrderEntrylist) {
		boolean successfullyAdded = false;
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");

		hbt.setCheckWriteOperations(false);
		try {

			if (storeSupplyOrderEntrylist.size() > 0) {
				StoreIndentM storeIndentM = new StoreIndentM();
				storeIndentM.setId(indentId);
				for (int i = 0; i < storeSupplyOrderEntrylist.size(); i++) {
					StoreSupplyOrderEntry storeSupplyOrderEntryObj = new StoreSupplyOrderEntry();
					storeSupplyOrderEntryObj = (StoreSupplyOrderEntry) storeSupplyOrderEntrylist
					.get(i);
					storeSupplyOrderEntryObj.setIndent(storeIndentM);
					hbt.update(storeSupplyOrderEntryObj);
				}

			}
			successfullyAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;
	}

	/*
	 * public Map<String, Object> showSupplyOrderEntry() { Map<String,Object>
	 * map=new HashMap<String,Object>(); List<StoreIndentM> storeIssueMList=
	 * new ArrayList<StoreIndentM>(); List<StoreIndentT> storeIssueTList=new
	 * ArrayList<StoreIndentT>(); List<StoreIndentM> searchStoreIndentMList =
	 * new ArrayList<StoreIndentM>(); List<StoreIndentM> list= new ArrayList<StoreIndentM>();
	 * session = (Session)getSession(); try { searchStoreIndentMList =
	 * getHibernateTemplate().find("from jkt.hms.masters.business.StoreIndentM
	 * as inp where inp.IndentType='p' or inp.IndentType='s'"); } catch
	 * (Exception e) { e.printStackTrace(); } map.put("searchStoreIndentMList",
	 * searchStoreIndentMList); return map; }
	 */

	public Map<String, Object> createGridSupplyOrderEntryData(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();
		List<StoreIndentM> searchStoreIndentMList = new ArrayList<StoreIndentM>();
		String pvms = null;
		String nomenclature = null;
		String au = null;
		BigDecimal qty_recd = null;
		String firstRecNo = "";
		Date supplyOrderDate = new Date();
		Date date_of_receipt = new Date();
		String batch_no = null;
		Date manuf_date = new Date();
		Date expiry_date = new Date();
		String crv_no_date = null;
		String enclosure_no = null;
		String secondRecNo = "";
		Date secondRecDate = new Date();
		String supplyOrderNo = "";
		BigDecimal rate = null;
		String supplier_address = null;
		int itemId = 0;
		int supplyOrderId = 0;
		int indentId = 0;
		int indentTId = 0;
		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		List<StoreSupplyOrderEntry> storeSupplyOrderEntryList = new ArrayList<StoreSupplyOrderEntry>();
		int indentNo = box.getInt(INDENT_NO);
		/*
		 * Properties properties = new Properties(); URL resourcePath =
		 * Thread.currentThread().getContextClassLoader().getResource("stores.properties");
		 * try { properties.load(resourcePath.openStream()); } catch (Exception
		 * e) { e.printStackTrace(); }
		 */
		try {
			searchStoreIndentMList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreIndentM as inp where inp.IndentType='"
					+ box.getString("indent_type")
					+ "' and inp.Department.Id="
					+ box.getInt("deptId"));
			storeSupplyOrderEntryList = session.createCriteria(
					StoreSupplyOrderEntry.class).add(
							Restrictions.eq("Indent.Id", indentNo)).list();
			if (storeSupplyOrderEntryList != null
					&& storeSupplyOrderEntryList.size() > 0) {
				for (Iterator iterator = storeSupplyOrderEntryList.iterator(); iterator
				.hasNext();) {
					StoreSupplyOrderEntry tObj = (StoreSupplyOrderEntry) iterator
					.next();

					try {
						supplyOrderId = tObj.getId();
					} catch (Exception e) {
						supplyOrderId = 0;
					}

					try {
						pvms = tObj.getItem().getPvmsNo();
					} catch (Exception e) {
						pvms = "";
					}

					try {
						nomenclature = tObj.getItem().getNomenclature();
					} catch (Exception e) {
						nomenclature = "";
					}

					try {
						supplier_address = tObj.getSupplier().getSupplierName()
						+ " " + tObj.getSupplier().getAddress1() + " "
						+ tObj.getSupplier().getAddress2();
					} catch (Exception e) {
						supplier_address = "";
					}

					try {
						au = tObj.getItem().getItemConversion()
						.getPurchaseUnit().getUnitName();
					} catch (Exception e) {
						au = "";
					}

					try {
						supplyOrderNo = tObj.getSupplyOrderNo();
					} catch (Exception e) {
						supplyOrderNo = "";
					}

					try {
						supplyOrderDate = tObj.getSupplyOrderDate();
					} catch (Exception e) {
						supplyOrderDate = null;
					}

					try {
						rate = tObj.getRate();
					} catch (Exception e) {
						rate = new BigDecimal(0);
					}

					try {
						qty_recd = tObj.getQty();
					} catch (Exception e) {
						qty_recd = new BigDecimal(0);
					}
					try {
						itemId = tObj.getItem().getId();
					} catch (Exception e) {
						itemId = 0;
					}

					try {
						indentId = tObj.getIndent().getId();
					} catch (Exception e) {
						indentId = 0;
					}

					try {
						date_of_receipt = tObj.getDateOfReceipt();
					} catch (Exception e) {
						date_of_receipt = null;
					}

					try {
						batch_no = tObj.getBatchNo();
					} catch (Exception e) {
						batch_no = "";
					}

					try {
						manuf_date = tObj.getManufacturingDate();
					} catch (Exception e) {
						manuf_date = null;
					}

					try {
						expiry_date = tObj.getExpiryDate();
					} catch (Exception e) {
						expiry_date = null;
					}

					try {
						if (tObj.getCrvNo() != null) {
							crv_no_date = tObj.getCrvNo() + " dated "
							+ tObj.getCrvDate();
						} else {
							crv_no_date = "";
						}
					} catch (Exception e) {
						crv_no_date = "";
					}

					try {
						enclosure_no = tObj.getEnclosureNo();
					} catch (Exception e) {
						enclosure_no = "";
					}

					hData = new HashMap<String, Object>();
					hData.put("supplyOrderId", supplyOrderId);
					hData.put("date_of_receipt", date_of_receipt == null ? ""
							: date_of_receipt);
					hData.put("pvms", pvms);
					hData.put("nomenclature", nomenclature);
					hData.put("au", au == null ? "" : "");
					hData.put("qty_recd", qty_recd == null ? "0" : qty_recd);
					hData.put("batch_no", batch_no == null ? "" : batch_no);
					hData.put("manuf_date", manuf_date == null ? ""
							: manuf_date);
					hData.put("expiry_date", expiry_date == null ? ""
							: expiry_date);
					hData.put("supplyOrderNo", supplyOrderNo == null ? ""
							: supplyOrderNo);
					hData.put("supplyOrderDate", supplyOrderDate == null ? ""
							: supplyOrderDate);
					hData.put("supplier_address", supplier_address);
					hData.put("crv_no_date", crv_no_date);
					hData.put("enclosure_no", enclosure_no == null ? ""
							: enclosure_no);
					/*
					 * String converted_date =
					 * firstRecDate.toString().substring(8) + "/"
					 * +firstRecDate.toString().substring(5, 7) + "/" +
					 * firstRecDate.toString().substring(0, 4);
					 */
					vResult.add(hData);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}
		try {
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("searchStoreIndentMList", searchStoreIndentMList);
		map.put("pagedArray", pagedArray);
		return map;
	}

	public Map<String, Object> getItemDetailsForSupplyOrderEntry(Box box) {

		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreSupplyOrderEntry> storeSupplyOrderEntryList = new ArrayList<StoreSupplyOrderEntry>();
		session = (Session) getSession();
		int indentId = box.getInt(INDENT_NO);
		// Date
		// firstRecDate=HMSUtil.dateFormatterDDMMYYYY(box.getString("firstRecDate"));
		// Date
		// secondRecDate=HMSUtil.dateFormatterDDMMYYYY(box.getString("secondRecDate"));
		Vector mmf = box.getVector("mmf");
		String lastChgBy = box.get(CHANGED_BY);
		String lastChgTime = box.get(CHANGED_TIME);
		Date lastChgDate = HMSUtil.convertStringTypeDateToDateType(box
				.getString(CHANGED_DATE));
		Date firstRecDate = HMSUtil.convertStringTypeDateToDateType(box
				.getString("firstRecDate"));
		Vector supplyOrderNo = box.getVector("supplyOrderNo");
		Vector items = box.getVector("itemId");
		Vector rate = box.getVector("rate");
		Vector indentTId = box.getVector("indentTId");
		List<StoreIndentM> searchStoreIndentMList = new ArrayList<StoreIndentM>();
		List<StoreIndentT> storeIndentTList = new ArrayList<StoreIndentT>();
		StoreSupplyOrderEntry storeSupplyOrderEntry = null;

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			searchStoreIndentMList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.StoreIndentM");
			for (int i = 0; i < items.size(); i++) {
				storeSupplyOrderEntry = new StoreSupplyOrderEntry();
				StoreIndentM SMObj = new StoreIndentM();
				SMObj.setId(indentId);
				storeSupplyOrderEntry.setIndent(SMObj);

				storeSupplyOrderEntry.setSupplyOrderDate(firstRecDate);

				MasStoreItem masStoreItem = new MasStoreItem();
				masStoreItem.setId(Integer.parseInt(items.get(i).toString()));
				storeSupplyOrderEntry.setItem(masStoreItem);

				storeSupplyOrderEntry.setSupplyOrderNo(supplyOrderNo.get(i)
						.toString());

				storeSupplyOrderEntry.setRate(new BigDecimal(rate.get(i)
						.toString()));

				storeSupplyOrderEntry.setQty(new BigDecimal(mmf.get(i)
						.toString()));

				storeSupplyOrderEntry.setLastChgBy(lastChgBy);

				storeSupplyOrderEntry.setLastChgDate(lastChgDate);

				storeSupplyOrderEntry.setLastChgTime(lastChgTime);

				storeSupplyOrderEntry.setIndentType("y");
				hbt.save(storeSupplyOrderEntry);
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("searchStoreIndentMList", searchStoreIndentMList);
		return map;
	}

	public Map<String, Object> getItemDetailsForUpdateSupplyOrderEntry(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreSupplyOrderEntry> storeSupplyOrderEntryList = new ArrayList<StoreSupplyOrderEntry>();
		session = (Session) getSession();

		String lastChgBy = box.get(CHANGED_BY);
		String lastChgTime = box.get(CHANGED_TIME);
		Date lastChgDate = HMSUtil.convertStringTypeDateToDateType(box
				.getString(CHANGED_DATE));

		int indentId = box.getInt(INDENT_NO);
		Date firstRecDate = HMSUtil.dateFormatterDDMMYYYY(box
				.getString("firstRecDate"));
		Vector mmf = box.getVector("mmf");
		Vector supplyOrderNo = box.getVector("supplyOrderNo");
		Vector items = box.getVector("itemId");
		Vector rate = box.getVector("rate");
		Vector indentTId = box.getVector("indentTId");
		int supplyOrderId = box.getInt("supplyOrderId");

		List<StoreIndentM> searchStoreIndentMList = new ArrayList<StoreIndentM>();
		StoreSupplyOrderEntry storeSupplyOrderEntry = null;

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			searchStoreIndentMList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.StoreIndentM");
			storeSupplyOrderEntry = (StoreSupplyOrderEntry) hbt.load(
					StoreSupplyOrderEntry.class, supplyOrderId);
			for (int i = 0; i < items.size(); i++) {

				// storeSupplyOrderEntry = new StoreSupplyOrderEntry();
				StoreIndentM SMObj = new StoreIndentM();
				SMObj.setId(indentId);
				storeSupplyOrderEntry.setIndent(SMObj);

				MasStoreItem masStoreItem = new MasStoreItem();
				masStoreItem.setId(Integer.parseInt(items.get(i).toString()));
				storeSupplyOrderEntry.setItem(masStoreItem);

				storeSupplyOrderEntry.setSupplyOrderDate(firstRecDate);

				storeSupplyOrderEntry.setSupplyOrderNo(supplyOrderNo.get(i)
						.toString());

				storeSupplyOrderEntry.setRate(new BigDecimal(rate.get(i)
						.toString()));

				storeSupplyOrderEntry.setQty(new BigDecimal(mmf.get(i)
						.toString()));

				storeSupplyOrderEntry.setLastChgBy(lastChgBy);

				storeSupplyOrderEntry.setLastChgDate(lastChgDate);

				storeSupplyOrderEntry.setLastChgTime(lastChgTime);

				storeSupplyOrderEntry.setId(supplyOrderId);

				hbt.update(storeSupplyOrderEntry);
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("searchStoreIndentMList", searchStoreIndentMList);
		return map;
	}

	public Map<String, Object> getConnectionForReport() {
		Map<String, Object> connectionMap = new HashMap<String, Object>();
		Session session = (Session) getSession();
		Connection con = session.connection();
		connectionMap.put("con", con);
		return connectionMap;
	}
	
	public int getPrintCount(String column_name, String din_no) {
		Map<String, Object> connectionMap = new HashMap<String, Object>();
		Session session = (Session) getSession();
		int printCount=0;
		
		Object count = session.createCriteria(PatientPrescriptionHeader.class)
				.setProjection(Projections.property(column_name))
				.add(Restrictions.eq("DispensaryIssueNo", din_no)).setMaxResults(1).list().get(0);	
		if(count!=null)
		{
			printCount = Integer.parseInt(count.toString());
		}		
		
		return printCount;
	}
	
	public void updatePrintCount(String column_name, String din_no) {
		Map<String, Object> connectionMap = new HashMap<String, Object>();
		Session session = (Session) getSession();
		int printCount=1;
		
		Object count = session.createCriteria(PatientPrescriptionHeader.class)
				.setProjection(Projections.property(column_name))
				.add(Restrictions.eq("DispensaryIssueNo", din_no)).setMaxResults(1).list().get(0);	
		System.out.println("before update block");
		if(count!=null)
		{
			printCount = Integer.parseInt(count.toString());
			printCount++;
		}		
		if(din_no!=null && !din_no.equals(""))
		{
			System.out.println("in update block");
			session.createQuery("update PatientPrescriptionHeader pph set pph."+column_name+"="+printCount+" where pph.DispensaryIssueNo='"+din_no+"'").executeUpdate();
		}
				
	}

	public Map<String, Object> getResultValue(String pro,int hospitalId) {
		Map<String, Object> result = new HashMap<String, Object>();
		String prob=pro;
		Session session = (Session) getSession();
		List buList=new ArrayList();
		List nivList=new ArrayList();
		List pvmsList=new ArrayList();
		List brandItem=new ArrayList();
		List genItem=new ArrayList();
		List amtBrandItem=new ArrayList();
		List amtGenList=new ArrayList();
		List maxFin=new ArrayList();
		List TotalRes=new ArrayList();
		String proNo=prob;
		String qery2="select sph.TOTAL_ALLOCATED_AMOUNT, sph.BALANCE_AMOUNT,sph.SPEND_AMOUNT from STORE_PROFORMA_HEADER sph where sph.PROFORMA_NO='"+proNo+"' and sph.HOSPITAL_ID='"+hospitalId+"'";

		buList=session.createSQLQuery(qery2).list();
		Iterator itr12=buList.iterator();
		String BudgetAmt="";
		String SpentAmt="";
		String BalanceAmt="";
		while(itr12.hasNext()){
			Object[] tuple = (Object[]) itr12.next();
			BudgetAmt=(tuple[0]!=null?tuple[0].toString():"");
			BalanceAmt=(tuple[1]!=null?tuple[1].toString():"");
			SpentAmt=(tuple[2]!=null?tuple[2].toString():"");
		}

		nivList=session.createSQLQuery("select COUNT(DISTINCT msi.ITEM_ID) from store_proforma_header sph left outer join store_proforma_detail spd on sph.PROFORMA_ID=spd.PROFORMA_ID,mas_store_item msi where sph.PROFORMA_no='"+prob+"' and spd.ITEM_ID=msi.ITEM_ID and msi.ITEM_TYPE_ID=2 and sph.HOSPITAL_ID='"+hospitalId+"' ").list();
		String nivItem="";
		if(nivList.get(0)!=null){
			nivItem=nivList.get(0).toString();
		}

		pvmsList=session.createSQLQuery("select COUNT(DISTINCT msi.ITEM_ID) from store_proforma_header sph left outer join store_proforma_detail spd on sph.PROFORMA_ID=spd.PROFORMA_ID,mas_store_item msi where sph.PROFORMA_no='"+prob+"' and spd.ITEM_ID=msi.ITEM_ID and msi.ITEM_TYPE_ID=1 and sph.HOSPITAL_ID='"+hospitalId+"' ").list();
		String pvmsItem="";
		if(pvmsList.get(0)!=null){
			pvmsItem=pvmsList.get(0).toString();
		}

		brandItem=session.createSQLQuery("select COUNT(DISTINCT msi.ITEM_ID) from store_proforma_header sph left outer join store_proforma_detail spd on sph.PROFORMA_ID=spd.PROFORMA_ID,mas_store_item msi where sph.PROFORMA_no='"+prob+"' and spd.ITEM_ID=msi.ITEM_ID and spd.CATEGORY='B'  and sph.HOSPITAL_ID='"+hospitalId+"'").list();
		String BrandItem="";
		if(brandItem.get(0)!=null){
			BrandItem=brandItem.get(0).toString();
		}

		genItem=session.createSQLQuery("select COUNT(DISTINCT msi.ITEM_ID) from store_proforma_header sph left outer join store_proforma_detail spd on sph.PROFORMA_ID=spd.PROFORMA_ID,mas_store_item msi where sph.PROFORMA_no='"+prob+"' and spd.ITEM_ID=msi.ITEM_ID and spd.CATEGORY='G' and sph.HOSPITAL_ID='"+hospitalId+"'").list();
		String genericItem="";
		if(genItem.get(0)!=null){
			genericItem=genItem.get(0).toString();
		}

		amtBrandItem=session.createSQLQuery("select NVL(SUM(SGT.UNIT_RATE*SGT.RECEIVED_QTY),0.0),NVL(SUM(spd.DISCOUNT),0.0) from store_proforma_header sph left outer join store_proforma_detail spd on sph.PROFORMA_ID=spd.PROFORMA_ID left outer join STORE_LOANIN_T sgt on spd.CRV_ID=sgt.LOANIN_TRANS_ID LEFT outer join STORE_LOANIN_M sgm on sgm.LOANIN_MASTER_ID=sgt.LOANIN_MASTER_ID,mas_store_item msi where sph.PROFORMA_no='"+prob+"' and spd.ITEM_ID=msi.ITEM_ID and spd.CATEGORY='B'  and sph.HOSPITAL_ID='"+hospitalId+"'").list();
		Iterator itr=amtBrandItem.iterator();
		String amtValueBrand="";
		String disValueBrand="";
		while(itr.hasNext()){
			Object[] tuple = (Object[]) itr.next();
			amtValueBrand=(tuple[0]!=null?tuple[0].toString():"");
			disValueBrand=(tuple[1]!=null?tuple[1].toString():"");
		}
		amtGenList=session.createSQLQuery("select NVL(SUM(SGT.UNIT_RATE*SGT.RECEIVED_QTY),0.0),NVL(SUM(spd.DISCOUNT),0.0) from store_proforma_header sph left outer join store_proforma_detail spd on sph.PROFORMA_ID=spd.PROFORMA_ID left outer join STORE_LOANIN_T sgt on spd.CRV_ID=sgt.LOANIN_TRANS_ID LEFT outer join STORE_LOANIN_M sgm on sgm.LOANIN_MASTER_ID=sgt.LOANIN_MASTER_ID,mas_store_item msi where sph.PROFORMA_no='"+prob+"' and spd.ITEM_ID=msi.ITEM_ID and spd.CATEGORY='G'  and sph.HOSPITAL_ID='"+hospitalId+"'").list();
		Iterator itr1=amtGenList.iterator();
		String amtValueGen="";
		String disValueGen="";
		while(itr1.hasNext()){
			Object[] tuple = (Object[]) itr1.next();
			amtValueGen=(tuple[0]!=null?tuple[0].toString():"");
			disValueGen=(tuple[1]!=null?tuple[1].toString():"");
		}
		//----------------code by anamika--------------------
		//-----------for onocology item------------
		List oncologyItemList=new ArrayList();
		List amtOncologyItem=new ArrayList();
		oncologyItemList=session.createSQLQuery("select COUNT(DISTINCT msi.ITEM_ID) from store_proforma_header sph " +
				" left outer join store_proforma_detail spd on sph.PROFORMA_ID=spd.PROFORMA_ID " +
				" left outer join STORE_LOANIN_T sgt on spd.CRV_ID=sgt.LOANIN_TRANS_ID " +
				" LEFT outer join STORE_LOANIN_M sgm on sgm.LOANIN_MASTER_ID=sgt.LOANIN_MASTER_ID, " +
				" mas_store_item msi where sph.PROFORMA_no='"+prob+"' and spd.ITEM_ID=msi.ITEM_ID  " +
				" and sgt.s_bg='O' and sph.HOSPITAL_ID='"+hospitalId+"'").list();
		String oncologyItem="";
		if(oncologyItemList.get(0)!=null){
			oncologyItem=oncologyItemList.get(0).toString();
		}

		amtOncologyItem=session.createSQLQuery("select NVL(SUM(SGT.UNIT_RATE*SGT.RECEIVED_QTY),0.0),NVL(SUM(spd.DISCOUNT),0.0) from store_proforma_header sph left outer join store_proforma_detail spd on sph.PROFORMA_ID=spd.PROFORMA_ID left outer join STORE_LOANIN_T sgt on spd.CRV_ID=sgt.LOANIN_TRANS_ID LEFT outer join STORE_LOANIN_M sgm on sgm.LOANIN_MASTER_ID=sgt.LOANIN_MASTER_ID,mas_store_item msi where sph.PROFORMA_no='"+prob+"' and spd.ITEM_ID=msi.ITEM_ID and sgt.s_bg='O' and sph.HOSPITAL_ID='"+hospitalId+"'").list();
		Iterator itr2=amtOncologyItem.iterator();
		String amtValueOncology="";
		String disValueoncology="";
		while(itr.hasNext()){
			Object[] oncology = (Object[]) itr.next();
			amtValueOncology=(oncology[0]!=null?oncology[0].toString():"");
			disValueoncology=(oncology[1]!=null?oncology[1].toString():"");
		}


		List surgicalItemList=new ArrayList();
		List amtSurgicalItemList=new ArrayList();
		surgicalItemList=session.createSQLQuery("select COUNT(DISTINCT msi.ITEM_ID) from store_proforma_header sph " +
				" left outer join store_proforma_detail spd on sph.PROFORMA_ID=spd.PROFORMA_ID " +
				" left outer join STORE_LOANIN_T sgt on spd.CRV_ID=sgt.LOANIN_TRANS_ID " +
				" LEFT outer join STORE_LOANIN_M sgm on sgm.LOANIN_MASTER_ID=sgt.LOANIN_MASTER_ID, " +
				" mas_store_item msi where sph.PROFORMA_no='"+prob+"' and spd.ITEM_ID=msi.ITEM_ID  " +
				" and sgt.s_bg='S' and sph.HOSPITAL_ID='"+hospitalId+"'").list();
		String surgicalItem="";
		if(surgicalItemList.get(0)!=null){
			surgicalItem=surgicalItemList.get(0).toString();
		}

		amtSurgicalItemList=session.createSQLQuery("select NVL(SUM(SGT.UNIT_RATE*SGT.RECEIVED_QTY),0.0),NVL(SUM(spd.DISCOUNT),0.0) from store_proforma_header sph left outer join store_proforma_detail spd on sph.PROFORMA_ID=spd.PROFORMA_ID left outer join STORE_LOANIN_T sgt on spd.CRV_ID=sgt.LOANIN_TRANS_ID LEFT outer join STORE_LOANIN_M sgm on sgm.LOANIN_MASTER_ID=sgt.LOANIN_MASTER_ID,mas_store_item msi where sph.PROFORMA_no='"+prob+"' and spd.ITEM_ID=msi.ITEM_ID and sgt.s_bg='S' and sph.HOSPITAL_ID='"+hospitalId+"'").list();
		Iterator itr3=amtSurgicalItemList.iterator();
		String amtValueSurgical="";
		String disValueSurgical="";
		while(itr.hasNext()){
			Object[] surgical = (Object[]) itr.next();
			amtValueSurgical=(surgical[0]!=null?surgical[0].toString():"");
			disValueSurgical=(surgical[1]!=null?surgical[1].toString():"");
		}

		List labItemList=new ArrayList();
		List amtLabItemList=new ArrayList();
		labItemList=session.createSQLQuery("select COUNT(DISTINCT msi.ITEM_ID) from store_proforma_header sph " +
				" left outer join store_proforma_detail spd on sph.PROFORMA_ID=spd.PROFORMA_ID " +
				" left outer join STORE_LOANIN_T sgt on spd.CRV_ID=sgt.LOANIN_TRANS_ID " +
				" LEFT outer join STORE_LOANIN_M sgm on sgm.LOANIN_MASTER_ID=sgt.LOANIN_MASTER_ID, " +
				" mas_store_item msi where sph.PROFORMA_no='"+prob+"' and spd.ITEM_ID=msi.ITEM_ID  " +
				" and sgt.s_bg='L' and sph.HOSPITAL_ID='"+hospitalId+"'").list();
		String labItem="";
		if(labItemList.get(0)!=null){
			labItem=labItemList.get(0).toString();
		}

		amtLabItemList=session.createSQLQuery("select NVL(SUM(SGT.UNIT_RATE*SGT.RECEIVED_QTY),0.0),NVL(SUM(spd.DISCOUNT),0.0) from store_proforma_header sph left outer join store_proforma_detail spd on sph.PROFORMA_ID=spd.PROFORMA_ID left outer join STORE_LOANIN_T sgt on spd.CRV_ID=sgt.LOANIN_TRANS_ID LEFT outer join STORE_LOANIN_M sgm on sgm.LOANIN_MASTER_ID=sgt.LOANIN_MASTER_ID,mas_store_item msi where sph.PROFORMA_no='"+prob+"' and spd.ITEM_ID=msi.ITEM_ID and sgt.s_bg='L' and sph.HOSPITAL_ID='"+hospitalId+"'").list();
		Iterator itr4=amtLabItemList.iterator();
		String amtValueLab="";
		String disValueLab="";
		while(itr.hasNext()){
			Object[] lab = (Object[]) itr.next();
			amtValueLab=(lab[0]!=null?lab[0].toString():"");
			disValueLab=(lab[1]!=null?lab[1].toString():"");
		}

		List xrayItemList=new ArrayList();
		List amtXrayItemList=new ArrayList();
		xrayItemList=session.createSQLQuery("select COUNT(DISTINCT msi.ITEM_ID) from store_proforma_header sph " +
				" left outer join store_proforma_detail spd on sph.PROFORMA_ID=spd.PROFORMA_ID " +
				" left outer join STORE_LOANIN_T sgt on spd.CRV_ID=sgt.LOANIN_TRANS_ID " +
				" LEFT outer join STORE_LOANIN_M sgm on sgm.LOANIN_MASTER_ID=sgt.LOANIN_MASTER_ID, " +
				" mas_store_item msi where sph.PROFORMA_no='"+prob+"' and spd.ITEM_ID=msi.ITEM_ID  " +
				" and sgt.s_bg='X' and sph.HOSPITAL_ID='"+hospitalId+"'").list();
		String xrayItem="";
		if(xrayItemList.get(0)!=null){
			xrayItem=xrayItemList.get(0).toString();
		}

		amtXrayItemList=session.createSQLQuery("select NVL(SUM(SGT.UNIT_RATE*SGT.RECEIVED_QTY),0.0),NVL(SUM(spd.DISCOUNT),0.0) from store_proforma_header sph left outer join store_proforma_detail spd on sph.PROFORMA_ID=spd.PROFORMA_ID left outer join STORE_LOANIN_T sgt on spd.CRV_ID=sgt.LOANIN_TRANS_ID LEFT outer join STORE_LOANIN_M sgm on sgm.LOANIN_MASTER_ID=sgt.LOANIN_MASTER_ID,mas_store_item msi where sph.PROFORMA_no='"+prob+"' and spd.ITEM_ID=msi.ITEM_ID and sgt.s_bg='X' and sph.HOSPITAL_ID='"+hospitalId+"'").list();
		Iterator itr5=amtXrayItemList.iterator();
		String amtValueXray="";
		String disValueXray="";
		while(itr.hasNext()){
			Object[] xray = (Object[]) itr.next();
			amtValueXray=(xray[0]!=null?xray[0].toString():"");
			amtValueXray=(xray[1]!=null?xray[1].toString():"");
		}

		List textileItemList=new ArrayList();
		List amtTextileItemList=new ArrayList();
		textileItemList=session.createSQLQuery("select COUNT(DISTINCT msi.ITEM_ID) from store_proforma_header sph " +
				" left outer join store_proforma_detail spd on sph.PROFORMA_ID=spd.PROFORMA_ID " +
				" left outer join STORE_LOANIN_T sgt on spd.CRV_ID=sgt.LOANIN_TRANS_ID " +
				" LEFT outer join STORE_LOANIN_M sgm on sgm.LOANIN_MASTER_ID=sgt.LOANIN_MASTER_ID, " +
				" mas_store_item msi where sph.PROFORMA_no='"+prob+"' and spd.ITEM_ID=msi.ITEM_ID  " +
				" and sgt.s_bg='T' and sph.HOSPITAL_ID='"+hospitalId+"'").list();
		String textileItem="";
		if(textileItemList.get(0)!=null){
			textileItem=textileItemList.get(0).toString();
		}

		amtTextileItemList=session.createSQLQuery("select NVL(SUM(SGT.UNIT_RATE*SGT.RECEIVED_QTY),0.0),NVL(SUM(spd.DISCOUNT),0.0) from store_proforma_header sph left outer join store_proforma_detail spd on sph.PROFORMA_ID=spd.PROFORMA_ID left outer join STORE_LOANIN_T sgt on spd.CRV_ID=sgt.LOANIN_TRANS_ID LEFT outer join STORE_LOANIN_M sgm on sgm.LOANIN_MASTER_ID=sgt.LOANIN_MASTER_ID,mas_store_item msi where sph.PROFORMA_no='"+prob+"' and spd.ITEM_ID=msi.ITEM_ID and sgt.s_bg='T' and sph.HOSPITAL_ID='"+hospitalId+"'").list();
		Iterator itr6=amtTextileItemList.iterator();
		String amtValueTextile="";
		String disValueTextile="";
		while(itr.hasNext()){
			Object[] textile = (Object[]) itr.next();
			amtValueTextile=(textile[0]!=null?textile[0].toString():"");
			disValueTextile=(textile[1]!=null?textile[1].toString():"");
		}

		List rubberItemList=new ArrayList();
		List amtRubberItemList=new ArrayList();
		rubberItemList=session.createSQLQuery("select COUNT(DISTINCT msi.ITEM_ID) from store_proforma_header sph " +
				" left outer join store_proforma_detail spd on sph.PROFORMA_ID=spd.PROFORMA_ID " +
				" left outer join STORE_LOANIN_T sgt on spd.CRV_ID=sgt.LOANIN_TRANS_ID " +
				" LEFT outer join STORE_LOANIN_M sgm on sgm.LOANIN_MASTER_ID=sgt.LOANIN_MASTER_ID, " +
				" mas_store_item msi where sph.PROFORMA_no='"+prob+"' and spd.ITEM_ID=msi.ITEM_ID  " +
				" and sgt.s_bg='R' and sph.HOSPITAL_ID='"+hospitalId+"'").list();
		String rubberItem="";
		if(rubberItemList.get(0)!=null){
			rubberItem=rubberItemList.get(0).toString();
		}

		amtRubberItemList=session.createSQLQuery("select NVL(SUM(SGT.UNIT_RATE*SGT.RECEIVED_QTY),0.0),NVL(SUM(spd.DISCOUNT),0.0) from store_proforma_header sph left outer join store_proforma_detail spd on sph.PROFORMA_ID=spd.PROFORMA_ID left outer join STORE_LOANIN_T sgt on spd.CRV_ID=sgt.LOANIN_TRANS_ID LEFT outer join STORE_LOANIN_M sgm on sgm.LOANIN_MASTER_ID=sgt.LOANIN_MASTER_ID,mas_store_item msi where sph.PROFORMA_no='"+prob+"' and spd.ITEM_ID=msi.ITEM_ID and sgt.s_bg='R' and sph.HOSPITAL_ID='"+hospitalId+"'").list();
		Iterator itr7=amtRubberItemList.iterator();
		String amtValueRubber="";
		String disValueRubber="";
		while(itr.hasNext()){
			Object[] rubber = (Object[]) itr.next();
			amtValueRubber=(rubber[0]!=null?rubber[0].toString():"");
			disValueRubber=(rubber[1]!=null?rubber[1].toString():"");
		}

		List fluidsItemList=new ArrayList();
		List amtfluidsItemList=new ArrayList();
		fluidsItemList=session.createSQLQuery("select COUNT(DISTINCT msi.ITEM_ID) from store_proforma_header sph " +
				" left outer join store_proforma_detail spd on sph.PROFORMA_ID=spd.PROFORMA_ID " +
				" left outer join STORE_LOANIN_T sgt on spd.CRV_ID=sgt.LOANIN_TRANS_ID " +
				" LEFT outer join STORE_LOANIN_M sgm on sgm.LOANIN_MASTER_ID=sgt.LOANIN_MASTER_ID, " +
				" mas_store_item msi where sph.PROFORMA_no='"+prob+"' and spd.ITEM_ID=msi.ITEM_ID  " +
				" and sgt.s_bg='F' and sph.HOSPITAL_ID='"+hospitalId+"'").list();
		String fluidsItem="";
		if(fluidsItemList.get(0)!=null){
			fluidsItem=fluidsItemList.get(0).toString();
		}

		amtRubberItemList=session.createSQLQuery("select NVL(SUM(SGT.UNIT_RATE*SGT.RECEIVED_QTY),0.0),NVL(SUM(spd.DISCOUNT),0.0) from store_proforma_header sph left outer join store_proforma_detail spd on sph.PROFORMA_ID=spd.PROFORMA_ID left outer join STORE_LOANIN_T sgt on spd.CRV_ID=sgt.LOANIN_TRANS_ID LEFT outer join STORE_LOANIN_M sgm on sgm.LOANIN_MASTER_ID=sgt.LOANIN_MASTER_ID,mas_store_item msi where sph.PROFORMA_no='"+prob+"' and spd.ITEM_ID=msi.ITEM_ID and sgt.s_bg='F' and sph.HOSPITAL_ID='"+hospitalId+"'").list();
		Iterator itr8=amtRubberItemList.iterator();
		String amtValuefluidsItem="";
		String disValuefluidsItem="";
		while(itr.hasNext()){
			Object[] fluids = (Object[]) itr.next();
			amtValuefluidsItem=(fluids[0]!=null?fluids[0].toString():"");
			disValuefluidsItem=(fluids[1]!=null?fluids[1].toString():"");
		}

		List generalMaterialItemList=new ArrayList();
		List amtgeneralMaterialItemList=new ArrayList();
		generalMaterialItemList=session.createSQLQuery("select COUNT(DISTINCT msi.ITEM_ID) from store_proforma_header sph " +
				" left outer join store_proforma_detail spd on sph.PROFORMA_ID=spd.PROFORMA_ID " +
				" left outer join STORE_LOANIN_T sgt on spd.CRV_ID=sgt.LOANIN_TRANS_ID " +
				" LEFT outer join STORE_LOANIN_M sgm on sgm.LOANIN_MASTER_ID=sgt.LOANIN_MASTER_ID, " +
				" mas_store_item msi where sph.PROFORMA_no='"+prob+"' and spd.ITEM_ID=msi.ITEM_ID  " +
				" and sgt.s_bg='M' and sph.HOSPITAL_ID='"+hospitalId+"'").list();
		String generalMaterialItem="";
		if(generalMaterialItemList.get(0)!=null){
			generalMaterialItem=generalMaterialItemList.get(0).toString();
		}

		amtgeneralMaterialItemList=session.createSQLQuery("select NVL(SUM(SGT.UNIT_RATE*SGT.RECEIVED_QTY),0.0),NVL(SUM(spd.DISCOUNT),0.0) from store_proforma_header sph left outer join store_proforma_detail spd on sph.PROFORMA_ID=spd.PROFORMA_ID left outer join STORE_LOANIN_T sgt on spd.CRV_ID=sgt.LOANIN_TRANS_ID LEFT outer join STORE_LOANIN_M sgm on sgm.LOANIN_MASTER_ID=sgt.LOANIN_MASTER_ID,mas_store_item msi where sph.PROFORMA_no='"+prob+"' and spd.ITEM_ID=msi.ITEM_ID and sgt.s_bg='M' and sph.HOSPITAL_ID='"+hospitalId+"'").list();
		Iterator itr9=amtgeneralMaterialItemList.iterator();
		String amtValueGeneralMaterialItem="";
		String disValueGeneralMaterialItem="";
		while(itr.hasNext()){
			Object[] generalMaterial = (Object[]) itr.next();
			amtValueGeneralMaterialItem=(generalMaterial[0]!=null?generalMaterial[0].toString():"");
			disValueGeneralMaterialItem=(generalMaterial[1]!=null?generalMaterial[1].toString():"");
		}


		TotalRes=session.createSQLQuery("select NVL(sph.INVOICE_AMOUNT,0.0) from store_proforma_header sph where sph.PROFORMA_no='"+prob+"' and sph.HOSPITAL_ID='"+hospitalId+"'").list();

		String TotalResAmt="";
		if(TotalRes.size()>0)
			TotalResAmt = TotalRes.get(0).toString();

		result.put("BudgetAmt",BudgetAmt);
		result.put("BalanceAmt",BalanceAmt);
		result.put("SpentAmt",SpentAmt);
		result.put("nivItem",nivItem);
		result.put("pvmsItem",pvmsItem);
		result.put("BrandItem",BrandItem);
		result.put("genericItem",genericItem);
		result.put("amtValueBrand",amtValueBrand);
		result.put("disValueBrand",disValueBrand);
		result.put("amtValueGen",amtValueGen);
		result.put("disValueGen",disValueGen);
		result.put("TotalResAmt",TotalResAmt);

		result.put("oncologyItem",oncologyItem);
		result.put("amtValueOncology",amtValueOncology);
		result.put("disValueoncology",disValueoncology);

		result.put("surgicalItem",surgicalItem);
		result.put("amtValueSurgical",amtValueSurgical);
		result.put("disValueSurgical",disValueSurgical);

		result.put("labItem",labItem);
		result.put("amtValueLab",amtValueLab);
		result.put("disValueLab",disValueLab);

		result.put("xrayItem",xrayItem);
		result.put("amtValueXray",amtValueXray);
		result.put("disValueXray",disValueXray);

		result.put("textileItem",textileItem);
		result.put("amtValueTextile",amtValueTextile);
		result.put("disValueTextile",disValueTextile);

		result.put("rubberItem",rubberItem);
		result.put("amtValueRubber",amtValueRubber);
		result.put("disValueRubber",disValueRubber);

		result.put("fluidsItem",fluidsItem);
		result.put("amtValuefluidsItem",amtValuefluidsItem);
		result.put("disValuefluidsItem",disValuefluidsItem);

		result.put("generalMaterialItem",generalMaterialItem);
		result.put("amtValueGeneralMaterialItem",amtValueGeneralMaterialItem);
		result.put("disValueGeneralMaterialItem",disValueGeneralMaterialItem);

		return result;
	}





	// ------------ Print LPO-----------------

	public Map getLPOList(int grnId) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<StoreGrnM> crvNumberList = new ArrayList<StoreGrnM>();
		Connection con = session.connection();
		try {
			map.put("conn", con);
			crvNumberList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreGrnM as md where md.Id = '"
					+ grnId + "'");
			for (StoreGrnM storeGrnM : crvNumberList) {
				map.put("PO_No", "" + storeGrnM.getPo().getPoNumber());
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	// -----------------------------------------------------------------------------------------------------------------
	// -------------------------------------End of Functions Written By
	// Mansi-------------------------------------------
	// -----------------------------------------------------------------------------------------------------------------

	// -----------------------------------------------------------------------------------------------------------------
	// -------------------------------------Start of Functions Written By K.R.
	// Othivadivel------------------------------
	// -----------------------------------------------------------------------------------------------------------------

	public Map<String, Object> showMMFDepartmentWiseSplitup(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
		try {
			storeMmfDepartmentTList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreMmfDepartmentT as inp where inp.StoreMmfDepartmentM.MmfForTheYear= "
					+ box.getInt("year")
					+ " and inp.Item.PvmsNo = '"
					+ box.getString("pvmsno") + "'");
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("storeMmfDepartmentTList", storeMmfDepartmentTList);
		return map;
	}

	public Map<String, Object> getIndentNosForSupplyOrderEntry(Box box) {
		// TODO Auto-generated method stub
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIndentM> searchStoreIndentMList = new ArrayList<StoreIndentM>();
		session = (Session) getSession();
		try {
			searchStoreIndentMList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreIndentM as inp where inp.IndentType='"
					+ box.getString("indent_type")
					+ "' and inp.Department.Id="
					+ box.getInt("deptId"));
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("searchStoreIndentMList", searchStoreIndentMList);
		return map;
	}

	public Map<String, Object> getItemsForSupplyOrderEntryJsp(Box box) {
		// TODO Auto-generated method stub
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier>();
		session = (Session) getSession();
		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector supplyOrderEntries = new Vector();
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		String pvms = null;
		String nomenclature = null;
		String au = null;
		int indent_t_id = 0;
		int item_id = 0;

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			List<StoreIndentT> storeIndentTList = new ArrayList<StoreIndentT>();
			List<StoreSupplyOrderEntry> storeSupplyOrderEntryList = new ArrayList<StoreSupplyOrderEntry>();
			storeIndentTList = hbt
			.find("from jkt.hms.masters.business.StoreIndentT as inp where inp.Indent.Id="
					+ box.getInt("indent_id"));
			supplierList = hbt
			.find("from jkt.hms.masters.business.MasStoreSupplier as m order by m.SupplierName");
			storeSupplyOrderEntryList = hbt
			.find("from jkt.hms.masters.business.StoreSupplyOrderEntry as inp where inp.Indent.Id= "
					+ box.getInt("indent_id"));

			for (Iterator iterator = storeSupplyOrderEntryList.iterator(); iterator
			.hasNext();) {
				StoreSupplyOrderEntry storeSupplyOrderEntry = (StoreSupplyOrderEntry) iterator
				.next();
				supplyOrderEntries.add(storeSupplyOrderEntry.getItem().getId());
			}

			for (Iterator iterator = storeIndentTList.iterator(); iterator
			.hasNext();) {
				StoreIndentT storeIndentT = (StoreIndentT) iterator.next();

				try {
					indent_t_id = storeIndentT.getId();
				} catch (Exception e) {
					indent_t_id = 0;
				}

				try {
					pvms = storeIndentT.getItem().getPvmsNo();
				} catch (Exception e) {
					pvms = "";
				}

				try {
					item_id = storeIndentT.getItem().getId();
				} catch (Exception e) {
					item_id = 0;
				}

				try {
					nomenclature = storeIndentT.getItem().getNomenclature();
				} catch (Exception e) {
					nomenclature = "";
				}

				try {
					au = storeIndentT.getItem().getItemConversion()
					.getPurchaseUnit().getUnitName();
				} catch (Exception e) {
					au = "";
				}

				if (!supplyOrderEntries.contains(item_id)) {
					hData = new HashMap<String, Object>();
					hData.put("indent_t_id", indent_t_id);
					hData.put("pvms", pvms);
					hData.put("nomenclature", nomenclature);
					hData.put("au", au);
					hData.put("item_id", item_id);
					vResult.add(hData);
				}
			}

			if (vResult.size() > 0) {
				testPageData = new HashMap[vResult.size()];
				vResult.copyInto(testPageData);
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		try {
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("pagedArray", pagedArray);
		map.put("supplierList", supplierList);
		return map;
	}

	public Map<String, Object> doAddSupplyOrderEntryItems(Box box) {
		// TODO Auto-generated method stub
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<StoreSupplyOrderEntry> storeSupplyOrderEntryList = new ArrayList<StoreSupplyOrderEntry>();
		StoreSupplyOrderEntry storeSupplyOrderEntry = null;
		session = (Session) getSession();
		Vector items = box.getVector("item_id");
		Vector indent_t = box.getVector("indent_t_id");
		Vector qty_recd = box.getVector("qty_recd");
		Vector supplier = box.getVector("supplier");
		Vector supply_order_no = box.getVector("rc_no");
		Vector supply_order_date = box.getVector("rc_date");
		Vector date_of_receipt = box.getVector("date_of_receipt");
		Vector batch_no = box.getVector("batch_no");
		Vector manuf_date = box.getVector("manuf_date");
		Vector expiry_date = box.getVector("expiry_date");
		Vector enclosure_no = box.getVector("enclosure_no");
		Vector items_to_be_added = box.getVector(ITEMS_TO_BE_ADDED);

		String indent_type = box.get("indent_type");
		int indent_id = box.getInt("indent_id");

		int sr_no = 0;
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			storeSupplyOrderEntryList = hbt
			.find("from jkt.hms.masters.business.StoreSupplyOrderEntry as inp where inp.Indent.Id="
					+ box.getInt("indent_id")
					+ " order by inp.SerialNo desc");

			if (storeSupplyOrderEntryList != null
					&& storeSupplyOrderEntryList.size() > 0) {
				sr_no = storeSupplyOrderEntryList.get(0).getSerialNo();
			}

			for (int i = 0; i < items.size(); i++) {
				if (items_to_be_added.contains(items.get(i))) {
					storeSupplyOrderEntry = new StoreSupplyOrderEntry();
					storeSupplyOrderEntry
					.setIndent(new StoreIndentM(indent_id));
					storeSupplyOrderEntry.setSerialNo(++sr_no);
					storeSupplyOrderEntry.setItem(new MasStoreItem(Integer
							.parseInt(items.get(i).toString())));
					try {
						storeSupplyOrderEntry.setQty(new BigDecimal(qty_recd
								.get(i).toString()));
					} catch (Exception e) {
						storeSupplyOrderEntry.setQty(new BigDecimal(0));
					}
					storeSupplyOrderEntry.setDepartment(new MasDepartment(box
							.getInt("deptId")));

					try {
						storeSupplyOrderEntry.setSupplier(new MasStoreSupplier(
								Integer.parseInt(supplier.get(i).toString())));
					} catch (Exception e) {
						storeSupplyOrderEntry.setSupplier(null);
					}

					storeSupplyOrderEntry.setSupplyOrderNo(supply_order_no.get(
							i).toString());
					storeSupplyOrderEntry.setSupplyOrderDate(HMSUtil
							.convertStringTypeDateToDateType(supply_order_date
									.get(i).toString()));
					storeSupplyOrderEntry.setIndentType(indent_type);
					storeSupplyOrderEntry.setDateOfReceipt(HMSUtil
							.convertStringTypeDateToDateType(date_of_receipt
									.get(i).toString()));
					storeSupplyOrderEntry
					.setBatchNo(batch_no.get(i).toString());
					storeSupplyOrderEntry.setManufacturingDate(HMSUtil
							.convertStringTypeDateToDateType(manuf_date.get(i)
									.toString()));
					storeSupplyOrderEntry.setExpiryDate(HMSUtil
							.convertStringTypeDateToDateType(expiry_date.get(i)
									.toString()));
					storeSupplyOrderEntry.setEnclosureNo(enclosure_no.get(i)
							.toString());
					hbt.save(storeSupplyOrderEntry);
				}
			}

			map.put("total_records", items.size());
			map.put("added_records", items_to_be_added.size());

			if (items.size() == items_to_be_added.size()) {
				if (box.getInt("currPage") > 1)
					box.put("currPage", box.getInt("currPage") - 1);
			}

			map = getItemsForSupplyOrderEntryJsp(box);
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return map;
	}

	// -----------------------------------------------------------------------------------------------------------------
	// -------------------------------------End of Functions Written By K.R.
	// Othivadivel------------------------------
	// -----------------------------------------------------------------------------------------------------------------

	// -----------------------------------------------------------------------------------------------------------------
	// -------------------------------------Start of Reports Functions Written
	// By Mansi------------------------------
	// -----------------------------------------------------------------------------------------------------------------

	public String getHospitalName(int hospitalId) {
		Session session = (Session) getSession();
		String hospitalName = "";
		List<MasHospital> list = session.createCriteria(MasHospital.class).add(
				Restrictions.eq("Status", "y")).add(
						Restrictions.eq("Id", hospitalId)).list();

		if (list != null && list.size() > 0) {
			MasHospital obj = (MasHospital) list.get(0);
			hospitalName = obj.getHospitalName();
		}
		return hospitalName;
	}
	//  javed
	public String getHospitalAddress(int hospitalId) {
		Session session = (Session) getSession();
		String hospitalAddress = "";
		List<MasHospital> list = session.createCriteria(MasHospital.class).add(
				Restrictions.eq("Status", "y")).add(
						Restrictions.eq("Id", hospitalId)).list();

		if (list != null && list.size() > 0) {
			MasHospital obj = (MasHospital) list.get(0);
			hospitalAddress = obj.getAddress();
		}
		return hospitalAddress;
	}
	public Map showItemCatalogueJsp(Box box) {
		Map map = new HashMap();

		List<MasItemCategory> subSectionList = new ArrayList<MasItemCategory>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<StoreIssueM> storeIssueMList = new ArrayList<StoreIssueM>();
		/*subSectionList = (List<MasItemCategory>) getHibernateTemplate().find(
		"from jkt.hms.masters.business.MasItemCategory ");
		sectionList = (List<MasStoreSection>) getHibernateTemplate().find(
		"from jkt.hms.masters.business.MasStoreSection ");*/
		
		// add and comment by javed khan on 08-08-2013 for sql injuction
		
		int departmentId = box.getInt("departmentId");
		session = (Session) getSession();
		subSectionList =session.createCriteria(MasItemCategory.class).list();		
		sectionList =session.createCriteria(MasStoreSection.class).list();
		storeIssueMList=session.createCriteria(StoreIssueM.class).createAlias("Department", "dept").add(Restrictions.eq("dept.Id", departmentId)).list();
		map.put("subSectionList", subSectionList);
		map.put("sectionList", sectionList);
		map.put("storeIssueMList",storeIssueMList);
		return map;
	}

	public Map<String, Object> showVendorReportJsp() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreSupplier> searchMasStoreSupplierList = new ArrayList<MasStoreSupplier>();
		session = (Session) getSession();
		try {
			searchMasStoreSupplierList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasStoreSupplier as m order by m.SupplierName");
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("searchMasStoreSupplierList", searchMasStoreSupplierList);
		return map;
	}

	public Map<String, Object> showBrandReportJsp() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreBrand> searchMasStoreBrandList = new ArrayList<MasStoreBrand>();
		session = (Session) getSession();
		try {
			searchMasStoreBrandList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasStoreBrand");
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("searchMasStoreBrandList", searchMasStoreBrandList);
		return map;
	}

	public Map<String, Object> showDrugListBodySystemWiseReportJsp() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreSection> searchMasStoreSectionList = new ArrayList<MasStoreSection>();
		session = (Session) getSession();
		try {
			searchMasStoreSectionList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasStoreSection");

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("searchMasStoreSectionList", searchMasStoreSectionList);
		return map;

	}

	public Map<String, Object> showVendorTurnoverEnquiryReportJsp() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreSupplier> searchMasStoreSupplierList = new ArrayList<MasStoreSupplier>();
		session = (Session) getSession();
		try {
			searchMasStoreSupplierList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasStoreSupplier as m order by m.SupplierName");

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("searchMasStoreSupplierList", searchMasStoreSupplierList);
		return map;
	}

	public Map<String, Object> showExternalIssueReportJsp() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasUnit> searchMasUnitList = new ArrayList<MasUnit>();
		session = (Session) getSession();
		try {
			searchMasUnitList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasUnit");

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("searchMasUnitList", searchMasUnitList);
		return map;
	}

	public Map<String, Object> showDMConsumDrugWiseReportJsp() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasUnit> searchMasStoreItemGenericList = new ArrayList<MasUnit>();
		session = (Session) getSession();
		try {
			searchMasStoreItemGenericList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasStoreItemGeneric");

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("searchMasStoreItemGenericList", searchMasStoreItemGenericList);
		return map;
	}

	// -----------------------------------------------------------------------------------------------------------------
	// -------------------------------------End of Functions Written By
	// Mansi-------------------------------------------
	// -----------------------------------------------------------------------------------------------------------------

	/**
	 * added by Priyanka on 13-May-2008
	 */
	public Map<String, Object> getDBConnection() {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Connection conn = session.connection();
		map.put("conn", conn);
		return map;
	}

	public Map<String, Object> submitGrn(Box box) {
		// TODO Auto-generated method stub
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		int deptId = 0;
		int hospitalId = 0;
		int supplierOrUnitId = 0;
		int indentOrPoId = 0;
		int employeeId = 0;
		SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
		SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
		java.sql.Date grnDate = null;
		java.sql.Date invoiceDate = null;
		java.sql.Date date_received_surplus = null;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");

		String howReceived = "";
		String rrNo = "";
		String modeOfConveyance = "";
		String invoiceNo = "";
		String date4MySQL = "";
		String grnNo = "";
		String max = "";
		String no = "";
		String userName = "";
		String sos = "";
		String supplyOrderNo = "";
		String remarks = "";
		String civNo = "";
		Date civDate = null;


		BigDecimal invoiceAmount = null;
		BigDecimal freightDuty = null;
		BigDecimal exciseDuty = null;
		BigDecimal octroi = null;
		BigDecimal insuranceCharge = null;
		BigDecimal otherCharges = null;
		BigDecimal customDuty = null;
		BigDecimal grnValue = null;
		BigDecimal discount = null;
		BigDecimal vat = null;
		BigDecimal roundOffValue = null;
		BigDecimal actualGrnValue = null;
		BigDecimal totalCost = null;

		// Collecting Parameter Values from Box

		deptId = box.getInt("deptId");
		hospitalId = box.getInt("hospitalId");
		userName = box.getString("userName");

		sos = box.get(SOURCE_OF_SUPPLY);
		if(box.getInt(SUPPLIER_ID) !=0){
			supplierOrUnitId = box.getInt(SUPPLIER_ID);
		}

		//	if (sos.equalsIgnoreCase("w") || sos.equalsIgnoreCase("i")) {
		//	indentOrPoId = 0;
		//} else {
		indentOrPoId = box.getInt(INDENT_ID);


		//}

		grnNo = box.getString(GRN_NO);
		try {
			date4MySQL = formatterOut.format(formatterIn.parse(box
					.getString(GRN_DATE)));
			grnDate = java.sql.Date.valueOf(date4MySQL);


		} catch (Exception e) {
			grnDate = null;
		}

		try {
			date4MySQL = formatterOut.format(formatterIn.parse(box
					.getString(RECEIVED_DATE)));
			date_received_surplus = java.sql.Date.valueOf(date4MySQL);
		} catch (Exception e) {
			date_received_surplus = null;
		}
		if(box.getString(HOW_RECEIVED)!=null){
			howReceived = box.getString(HOW_RECEIVED);
		}
		if(box.getString(RR_NO) !=null){
			rrNo = box.getString(RR_NO);
		}
		if(box.getString(MODE_OF_CONVEYANCE) !=null){
			modeOfConveyance = box.getString(MODE_OF_CONVEYANCE);
		}
		if(box.getInt(EMPLOYEE_ID) != 0){
			employeeId = box.getInt(EMPLOYEE_ID);
		}
		if(box.getString(INVOICE_NO) !=null){
			invoiceNo = box.getString(INVOICE_NO);
		}
		try {
			if(box.getString(INVOICE_DATE) !=null){
				date4MySQL = formatterOut.format(formatterIn.parse(box
						.getString(INVOICE_DATE)));
				invoiceDate = java.sql.Date.valueOf(date4MySQL);
			}
		} catch (Exception e) {
			invoiceDate = null;
		}

		try {
			if(box.getString(INVOICE_AMOUNT) !=null){
				invoiceAmount = new BigDecimal(box.getString(INVOICE_AMOUNT));
			}
		} catch (Exception e) {
			invoiceAmount = new BigDecimal(0);
		}

		/*try {
			freightDuty = new BigDecimal(box.getString(FREIGHT_DUTY));
		} catch (Exception e) {
			freightDuty = new BigDecimal(0);
		}

		try {
			exciseDuty = new BigDecimal(box.getString(EXCISE_DUTY));
		} catch (Exception e) {
			exciseDuty = new BigDecimal(0);
		}

		try {
			octroi = new BigDecimal(box.getString(OCTROI));
		} catch (Exception e) {
			octroi = new BigDecimal(0);
		}*/

		/*	try {
			insuranceCharge = new BigDecimal(box.getString(INSURANCE_CHARGES));
		} catch (Exception e) {
			insuranceCharge = new BigDecimal(0);
		}*/

		/*try {
			customDuty = new BigDecimal(box.getString(CUSTOM_DUTY));
		} catch (Exception e) {
			customDuty = new BigDecimal(0);
		}*/

		try {
			if(box.getString(OTHER_CHARGES) !=null){
				otherCharges = new BigDecimal(box.getString(OTHER_CHARGES));
			}
		} catch (Exception e) {
			otherCharges = new BigDecimal(0);
		}

		try {
			if(box.getString("grnValue") !=null){
				grnValue = new BigDecimal(box.getString("grnValue"));
			}
		} catch (Exception e) {
			grnValue = new BigDecimal(0);
		}

		try {
			if(box.getString("actualGrnValue") !=null){
				actualGrnValue = new BigDecimal(box.getString("actualGrnValue"));
			}
		} catch (Exception e) {
			actualGrnValue = new BigDecimal(0);
		}
		try {
			if(box.getString("totalCost") !=null){
				totalCost = new BigDecimal(box.getString("totalCost"));
			}
		} catch (Exception e) {
			totalCost = new BigDecimal(0);
		}
		/*try {
			roundOffValue = new BigDecimal(box.getString("roundOfValue"));
		} catch (Exception e) {
			roundOffValue = new BigDecimal(0);
		}*/

		/*try {
			vat = new BigDecimal(box.getString("vatTax"));
		} catch (Exception e) {
			vat = new BigDecimal(0);
		}*/

		/*try {
			discount = new BigDecimal(box.getString("totDiscount"));
		} catch (Exception e) {
			discount = new BigDecimal(0);
		}*/
		if(box.getString(SUPPLY_ORDER_NO) !=null){
			supplyOrderNo = box.getString(SUPPLY_ORDER_NO);
		}
		remarks = box.getString(REMARKS);

		// Create StoreGrnM object and Set the Values

		StoreGrnM storeGrnM = new StoreGrnM();
		storeGrnM.setReceiveType(sos);
		storeGrnM.setAtSoNo(supplyOrderNo);
		storeGrnM.setDateReceivedSurplus(date_received_surplus);
		storeGrnM.setHowReceived(howReceived);
		storeGrnM.setModeOfConveyance(modeOfConveyance);
		storeGrnM.setRemarks(remarks);
		storeGrnM.setRrNo(rrNo);
		storeGrnM.setRoundOffValue(roundOffValue);
		storeGrnM.setTotalCost(totalCost);

		try {
			storeGrnM.setDepartment(new MasDepartment(deptId));
		} catch (Exception e) {
			storeGrnM.setDepartment(null);
		}

		try {
			if(employeeId > 0){
				storeGrnM.setEmployee(new MasEmployee(employeeId));
			}
		} catch (Exception e) {
			storeGrnM.setEmployee(null);
		}

		try {
			storeGrnM.setHospital(new MasHospital(hospitalId));
		} catch (Exception e) {
			storeGrnM.setHospital(null);
		}

		if (sos.equalsIgnoreCase("G")) {
			if (supplierOrUnitId != 0)
				storeGrnM.setSupplier(new MasStoreSupplier(supplierOrUnitId));
			else
				storeGrnM.setSupplier(null);

			if (indentOrPoId != 0)
				storeGrnM.setIndent(new StoreIndentM(indentOrPoId));
			else
				storeGrnM.setIndent(null);
		} 

		else if (sos.equalsIgnoreCase("U") ){
			if (supplierOrUnitId != 0)
				storeGrnM.setOtherUnit(new MasUnit(supplierOrUnitId));
			else
				storeGrnM.setUnit(null);

			if (indentOrPoId != 0)
				storeGrnM.setIndent(new StoreIndentM(indentOrPoId));
			else
				storeGrnM.setIndent(null);
		}
		else if (sos.equalsIgnoreCase("a")) 
		{

			if (supplierOrUnitId != 0)

				storeGrnM.setUnit(new MasStoreAirForceDepot(supplierOrUnitId));
			else
				storeGrnM.setUnit(null);

			if (indentOrPoId != 0)
				storeGrnM.setIndent(new StoreIndentM(indentOrPoId));
			else
				storeGrnM.setIndent(null);

			if (!box.getString("civNo").equals(""))
				storeGrnM.setCivNo(box.getString("civNo"));

			try {
				storeGrnM.setCivdate(java.sql.Date.valueOf(formatterOut
						.format(formatterIn.parse(box.getString("civDate")))));
			} catch (Exception e) {
				storeGrnM.setCivdate(null);
			}
		} 
		else if (sos.equalsIgnoreCase("l")) {
			if (supplierOrUnitId != 0)
				storeGrnM.setSupplier(new MasStoreSupplier(supplierOrUnitId));
			else
				storeGrnM.setSupplier(null);

			if (indentOrPoId != 0)
				storeGrnM.setPo(new StorePoHeader(indentOrPoId));
			else
				storeGrnM.setPo(null);
		} 



		//	storeGrnM.setCustomDuty(customDuty);
		//storeGrnM.setExciseDuty(exciseDuty);
		//storeGrnM.setFreightDuty(freightDuty);
		//storeGrnM.setInsuranceCharge(insuranceCharge);
		//storeGrnM.setOctroi(octroi);
		storeGrnM.setOtherCharges(otherCharges);

		storeGrnM.setGrnValue(actualGrnValue);
		//storeGrnM.setVat(vat);
		storeGrnM.setDiscount(discount);
		storeGrnM.setGrnAmount(grnValue);

		storeGrnM.setGrnNo(grnNo);
		storeGrnM.setGrnDate(grnDate);

		storeGrnM.setInvoiceNo(invoiceNo);
		storeGrnM.setInvoiceDate(invoiceDate);
		storeGrnM.setInvoiceAmount(invoiceAmount);

		storeGrnM.setStatus("o");
		storeGrnM.setLastChgBy(userName);
		storeGrnM.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(date));
		storeGrnM.setLastChgTime(time);

		// Create StoreGrnTList Contains StoreGrnT Objects and Set the
		// Corresponding Values
		List<StoreGrnT> storeGrnTList = new ArrayList<StoreGrnT>();
		StoreGrnT storeGrnT = null;
		Vector itemId = box.getVector(ITEM_ID);

		Vector brandId = box.getVector(BRAND_ID);
		Vector manufacturerId = box.getVector(MANUFACTURER_ID);
		Vector batchNo = box.getVector(BATCH_NO);
		Vector lotNo = box.getVector(LOT_NO);
		Vector receivedQty = box.getVector(QUANTITY_RECEIVED);
		Vector freeQty = box.getVector(FREE_QTY);
		Vector dispType = box.getVector("dispenseType");
		Vector mdqValue = box.getVector("mdq");
		Vector ratePerMdq = box.getVector("ratePerMdq");
		Vector convertedStock = box.getVector("convertedStock");
		Vector discountAmount = box.getVector("discountAmount");

		Vector discountPercentage=box.getVector("discountPercentage");
		Vector taxPercent=box.getVector("taxPercent");
		Vector reasonForDemand=box.getVector("reasonForDemand");

		Vector mrp = box.getVector(MRP);
		Vector preId=box.getVector("PreId");
		Vector taxAmount = new Vector();
		Vector taxAmountMdq = new Vector();


		Vector ed = new Vector();
		/*	if (sos.equalsIgnoreCase("l")) {
			taxAmountMdq = box.getVector(TAX_AMT_MDQ);
			ed = box.getVector("ed");
		} else {
			taxAmount = box.getVector("taxAmount");
		}
		 */
		taxAmount = box.getVector("taxAmount");
		Vector finalCostPrice = box.getVector(COST_PRICE);
		Vector amountValue = box.getVector(AMOUNT);


		Vector freeItem = box.getVector(FREE_ITEM);
		Vector manufacturerDate = box.getVector(MANUFACTURING_DATE);
		Vector expiryDate = box.getVector(EXPIRY_DATE);
		Vector flag = box.getVector("flag");
		Vector loaninId = box.getVector(DETAIL_ID);
		Vector loaninStatus = box.getVector("loanInItem");
		Vector barCodeNo = box.getVector("barCodeNo");
		boolean flag_loan = false;
		int slno = 1;
		for (int i = 0; i < itemId.size(); i++) {

			if (itemId.get(i).toString().equalsIgnoreCase("0"))
				break;
			try{
				if(!(batchNo.get(i).toString().equals("")))
				{
					storeGrnT = new StoreGrnT();
					storeGrnT.setSerialNo(slno++);

					storeGrnT.setPreId(Integer.parseInt(preId.get(i).toString()));

					if(sos.equalsIgnoreCase("l")){
						storeGrnT.setProStatus("y");
					}

					storeGrnT.setItem(new MasStoreItem(new Integer(itemId.get(i)
							.toString())));

					if(brandId.get(i)!=null && !brandId.get(i).equals("")){
						String brd=brandId.get(i).toString().trim();

						if(!brd.equals("0")){
							storeGrnT.setBrand(new MasStoreBrand(new Integer(brandId.get(i).toString())));
						}
					}
					if(manufacturerId.get(i)!=null && !manufacturerId.get(i).equals("")){
						String brd=manufacturerId.get(i).toString().trim();
						if(!brd.equals("0")){
							storeGrnT.setManufacturer(new MasManufacturer(new Integer(
									manufacturerId.get(i).toString())));
						}
					}
					storeGrnT.setBatchNo(batchNo.get(i).toString());
					// Lot no condition put in try catch block by Vishal
					/*try {
				storeGrnT.setLotNo(lotNo.get(i).toString());
			} catch (Exception e) {
				storeGrnT.setLotNo(new String(""));

			}*/

					try {
						storeGrnT.setReceivedQty(new BigDecimal(receivedQty.get(i)
								.toString()));
					} catch (Exception e) {

						storeGrnT.setReceivedQty(new BigDecimal(0));
					}

					/*try {
				storeGrnT.setFreeQty(new Integer(freeQty.get(i).toString()));
			} catch (Exception e) {
				storeGrnT.setFreeQty(new Integer(0));
			}*/

					try {
						storeGrnT.setDiscountPercent(new BigDecimal(discountPercentage.get(i).toString()));
					} catch (Exception e) {
						storeGrnT.setDiscountPercent(null);
					}


					try {
						storeGrnT.setTaxPercent(new BigDecimal(taxPercent.get(i).toString()));
					} catch (Exception e) {
						storeGrnT.setTaxPercent(null);
					}

					try {
						storeGrnT.setDiscount(new BigDecimal(discountAmount.get(i)
								.toString()));
					} catch (Exception e) {
						storeGrnT.setDiscount(null);
					}
					try {
						storeGrnT.setMrp(new BigDecimal(mrp.get(i).toString()));
					}
					catch (Exception e) {
						storeGrnT.setMrp(null);
					}
					try{
						storeGrnT.setReasonForDemand(reasonForDemand.get(i).toString());
					}
					catch(Exception e){
						storeGrnT.setReasonForDemand(null);
					}
					/*try {
				if (sos.equalsIgnoreCase("l")) {
					storeGrnT.setTaxAmt_mdq(new BigDecimal(taxAmountMdq.get(i)
							.toString()));
					storeGrnT.setTax(null);
					storeGrnT
							.setExciseDuty(new BigDecimal(ed.get(i).toString()));
				} else {
					storeGrnT
							.setTax(new BigDecimal(taxAmount.get(i).toString()));
					storeGrnT.setTaxAmt_mdq(null);
				}
			} catch (Exception e) {
				storeGrnT.setTax(null);
				storeGrnT.setTaxAmt_mdq(null);
			}
					 */


					try{
						storeGrnT.setTax(new BigDecimal(taxAmount.get(i).toString()));
					}catch(Exception e){
						storeGrnT.setTax(new BigDecimal(0));
					}
					try {
						storeGrnT.setFinalCostPrice(new BigDecimal(finalCostPrice
								.get(i).toString()));
					} catch (Exception e) {
						storeGrnT.setFinalCostPrice(new BigDecimal(0));
					}

					try {
						storeGrnT.setAmountValue(new BigDecimal(amountValue.get(i)
								.toString()));
					} catch (Exception e) {
						storeGrnT.setAmountValue(new BigDecimal(0));
					}

					//storeGrnT.setFreeItem(freeItem.get(i).toString());
					storeGrnT.setDispType(dispType.get(i).toString());
					try {
						storeGrnT
						.setMdqValue(new BigDecimal(mdqValue.get(i).toString()));
					} catch (Exception e) {
						storeGrnT.setMdqValue(new BigDecimal(0));
					}

					try {
						storeGrnT.setRatePerMdq(new BigDecimal(ratePerMdq.get(i)
								.toString()));
					} catch (Exception e) {
						storeGrnT.setRatePerMdq(new BigDecimal(0));
					}

					try {
						storeGrnT.setUnitRate(new BigDecimal(ratePerMdq.get(i)
								.toString()));
					} catch (Exception e) {
						storeGrnT.setUnitRate(new BigDecimal(0));
					}

					try {
						storeGrnT.setManufacturerDate(java.sql.Date
								.valueOf(formatterOut.format(formatterIn
										.parse(manufacturerDate.get(i).toString()))));
					} catch (Exception e) {
						storeGrnT.setManufacturerDate(null);
					}
					try {
						storeGrnT.setExpiryDate(java.sql.Date
								.valueOf(formatterOut.format(formatterIn
										.parse(expiryDate.get(i).toString()))));
					} catch (Exception e) {
						storeGrnT.setExpiryDate(null);
					}
					try {

						if (loaninStatus.get(i).toString().equals("Yes")) {
							storeGrnT.setLoanInItem("y");
							flag_loan = true;
						} else {
							storeGrnT.setLoanInItem("n");
						}

					} catch (Exception e) {
						storeGrnT.setLoanInItem(null);
					}
					storeGrnTList.add(storeGrnT);
				}
			}catch(Exception e){
				i++;
			}

		}
		// Save the Persistence Objects
		session = (Session) getSession();
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			/*
			 * Save StoreGrnM data & update StoreFyDocumentNo for Grn Number
			 */

			Criteria c = session.createCriteria(StoreFyDocumentNo.class).add(
					Restrictions.eq("Department.Id", deptId)).add(Restrictions.eq("Hospital.Id", hospitalId));
			storeFyDocumentNoList = c.list();
			String grnStartNo = "";
			for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
				if (storeFyDocumentNo.getGrnStartNo() != null) {
					grnStartNo = ("" + storeFyDocumentNo.getGrnStartNo());
					grnStartNo = getMaxNo(grnStartNo);
				} else {
					grnStartNo = getMaxNo("");
				}
			}
			storeGrnM.setGrnStartNo(grnStartNo);

			int storeFyId = 0;

			for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
				storeFyId = documentNo.getId();
			}
			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
			.load(StoreFyDocumentNo.class, storeFyId);
			storeFyDocumentNo.setGrnNo(grnNo);
			storeFyDocumentNo.setGrnStartNo(grnStartNo);
			hbt.update(storeFyDocumentNo);
			hbt.refresh(storeFyDocumentNo);
			/*
			 * If Source of Supply is "w" or "l" (only in Local Purchase Case)
			 * Update MasStoreBudget for the current Financial Year Get the
			 * financial Id from MasStoreFinancial Get the Record from
			 * MasStoreBudget : Check Financial Id and Department Id Update the
			 * CRV Committed Amount
			 */
			if (sos.equalsIgnoreCase("l")) {
				MasStoreBudget masStoreBudget = new MasStoreBudget();
				java.util.Date poDate = storeGrnM.getGrnDate();
				BigDecimal poAmount = storeGrnM.getGrnValue();

				List<MasStoreFinancial> masStoreFinancialList = new ArrayList<MasStoreFinancial>();
				masStoreFinancialList = session.createCriteria(
						MasStoreFinancial.class).list();
				java.util.Date start_date = null;
				java.util.Date end_date = null;
				int financial_id = 0;
				for (Iterator iterator2 = masStoreFinancialList.iterator(); iterator2
				.hasNext();) {
					MasStoreFinancial masStoreFinancial = (MasStoreFinancial) iterator2
					.next();
					start_date = (java.util.Date) masStoreFinancial
					.getStartDate();
					end_date = (java.util.Date) masStoreFinancial.getEndDate();
					if (poDate.after(start_date) && poDate.before(end_date)) {
						financial_id = masStoreFinancial.getId();
						break;
					} else if (poDate.equals(start_date)
							|| poDate.equals(end_date)) {
						financial_id = masStoreFinancial.getId();
						break;
					}
				}
				List maxFin=session.createSQLQuery("select max(msf.FINANCIAL_ID) from MAS_STORE_FINANCIAL msf").list();
				financial_id=Integer.parseInt(maxFin.get(0).toString());
				List<MasStoreBudget> masStoreBudgetList = new ArrayList<MasStoreBudget>();
				masStoreBudgetList = session.createCriteria(
						MasStoreBudget.class).add(
								Restrictions.eq("Financial.Id", financial_id)).add(
										Restrictions.eq("Department.Id", deptId)).list();
				BigDecimal existing_committed_amount = null;
				BigDecimal existing_balance_amount = null;
				BigDecimal existing_spent_amount = null;
				BigDecimal existing_alotted_amount = null;
				if (masStoreBudgetList != null && masStoreBudgetList.size() > 0) {
					masStoreBudget = masStoreBudgetList.get(0);
					try {
						existing_committed_amount = masStoreBudget
						.getCrvComittedAmount();
					} catch (Exception e) {
						existing_committed_amount = new BigDecimal(0);
					}

					try {
						existing_balance_amount = masStoreBudget
						.getBalanceAmount();
					} catch (Exception e) {
						existing_balance_amount = new BigDecimal(0);
					}

					try {
						existing_spent_amount = masStoreBudget.getSpendAmount();
					} catch (Exception e) {
						existing_spent_amount = new BigDecimal(0);
					}

					try {
						existing_alotted_amount = masStoreBudget
						.getTotalAllocatedAmount();
					} catch (Exception e) {
						existing_alotted_amount = new BigDecimal(0);
					}

					// masStoreBudget.setCrvComittedAmount(existing_committed_amount.add(poAmount));
					masStoreBudget.setBalanceAmount(existing_balance_amount
							.subtract(poAmount));
					masStoreBudget.setSpendAmount(existing_spent_amount
							.add(poAmount));

					storeGrnM.setCrvComittedAmount(existing_committed_amount);
					storeGrnM.setAllottedAmount(existing_alotted_amount);

					// hbt.update(masStoreBudget);
				}
			}
			try {
				hbt.save(storeGrnM);
				hbt.refresh(storeGrnM);
			} catch (Exception e) {

				e.printStackTrace();
			}
			/*
			 * End of MasStoreBudget Update
			 */

			/*
			 * Updating the Stock in StoreITemBatchStock
			 */
			List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
			StoreItemBatchStock storeItemBatchStock = null;
			if (storeGrnTList.size() > 0) {

				for (int i = 0; i < storeGrnTList.size(); i++) {
					StoreGrnT storeGrnTObj = new StoreGrnT();
					storeGrnTObj = (StoreGrnT) storeGrnTList.get(i);
					storeGrnTObj.setGrnMaster(storeGrnM);
					hbt.save(storeGrnTObj);
					//	hbt.refresh(storeGrnTObj);

					// Updating Quantity Received in StorePoDetail for the
					// particular Item
					// Only for New Items (not for Loan in Items)

					/*
					 * if (sos.equalsIgnoreCase("l") &&
					 * loaninId.get(i).toString().equalsIgnoreCase("0")) { List<StorePoDetail>
					 * storePoDetailList = new ArrayList<StorePoDetail>();
					 * StorePoDetail storePoDetail = new StorePoDetail();
					 * storePoDetailList =
					 * session.createCriteria(StorePoDetail.class).add(Restrictions.eq("Po.Id",
					 * indentOrPoId)) .add(Restrictions.eq("Item.Id",
					 * storeGrnTObj.getItem().getId())).list();
					 *
					 * if (storePoDetailList!=null &&
					 * storePoDetailList.size()>0) { storePoDetail =
					 * storePoDetailList.get(0); BigDecimal existingQuantity =
					 * null; BigDecimal quantity_to_be_added = null; BigDecimal
					 * newQuantity = new BigDecimal(0); Integer mdq =
					 * storePoDetail.getMdqValue();
					 *
					 * existingQuantity = storePoDetail.getQuantityReceived();
					 * BigDecimal recd_qty = storeGrnTObj.getReceivedQty();
					 * //quantity_to_be_added = recd_qty.divide(new
					 * BigDecimal(mdq), new MathContext(4,RoundingMode.UP));
					 * quantity_to_be_added = recd_qty;
					 *
					 * if (existingQuantity==null) existingQuantity = new
					 * BigDecimal(0);
					 *
					 * newQuantity = existingQuantity.add(quantity_to_be_added);
					 * storePoDetail.setQuantityReceived(newQuantity);
					 * //hbt.update(storePoDetail); } }
					 */

					// Update Stock in Item Batch Stock
					// Only for New Items (not for Loan in Items)
					int item_id = storeGrnTObj.getItem().getId();
					if(storeGrnTObj.getBrand()!=null){
						int brand_id = storeGrnTObj.getBrand().getId();
					}
					BigDecimal cost_price = storeGrnTObj.getFinalCostPrice();
					String batch_no = storeGrnTObj.getBatchNo();
					int department_id = storeGrnM.getDepartment().getId();

					/*storeItemBatchStockList = hbt.find("from  jkt.hms.masters.business.StoreItemBatchStock as inp where
							 inp.Item.Id = " + item_id + " and inp.CostPrice = " +
							  cost_price +"and inp.Department.Id= "+department_id +"and
							 inp.BatchNo ='"+batch_no + "' and inp.Brand.Id = " +
							 brand_id);*/
					/*storeItemBatchStockList=session.createCriteria(StoreItemBatchStock.class)
					.add(Restrictions.eq("Item.Id", item_id)).add(Restrictions.eq("Department.Id", department_id))
					.add(Restrictions.eq("BatchNo", batch_no))
					.add(Restrictions.eq("Brand.Id", brand_id)).list();

					int batchStockId=0;
					for (StoreItemBatchStock batchStock : storeItemBatchStockList) {
						batchStockId = batchStock.getId();
					}
					StoreItemBatchStock batchStoreStock  = (StoreItemBatchStock) getHibernateTemplate()
							.load(StoreItemBatchStock.class, batchStockId);
					if (storeItemBatchStockList.size() > 0) {
						for (int k = 0; k < storeItemBatchStockList.size(); k++) {

							if(barCodeNo.get(k) !=null && !barCodeNo.get(k).equals("") ){
								batchStoreStock.setBarcodeNo(barCodeNo.get(k).toString());

							}
							hbt.saveOrUpdate(batchStoreStock);
						}
					}*/

					/*storeItemBatchStockList = hbt.find("from  jkt.hms.masters.business.StoreItemBatchStock as inp +" +
					  		"where inp.Item.Id = " + item_id + " and inp.CostPrice = "
					  		+ cost_price +"and inp.Department.Id= "+department_id +"and inp.BatchNo ='"+batch_no + "' and inp.Brand.Id = " + brand_id);*/
					//  if (storeItemBatchStockList!=null &&  storeItemBatchStockList.size()>0) {
					/* if(loaninId.get(i).toString().equalsIgnoreCase("0")) {
					  storeItemBatchStock = storeItemBatchStockList.get(0);
					  BigDecimal existing_qty = new BigDecimal(0);
					String barCode="";
					  if (storeItemBatchStock.getReceivedQty()!=null) {
					  existing_qty = storeItemBatchStock.getReceivedQty(); }
					  else { existing_qty = new BigDecimal(0); }

					  BigDecimal recd_qty = new
					  BigDecimal(convertedStock.get(i).toString());

					  BigDecimal new_qty = new BigDecimal(0); new_qty =
					  existing_qty.add(recd_qty);

					  BigDecimal existing_closing_stock =
					  storeItemBatchStock.getClosingStock(); BigDecimal
					  new_closing_stock = new BigDecimal(0); new_closing_stock =
					  existing_closing_stock.add(recd_qty);

					 int id = storeItemBatchStock.getId(); storeItemBatchStock =
					  (StoreItemBatchStock)getHibernateTemplate().load(StoreItemBatchStock.class,
					 id);

					 storeItemBatchStock.setReceivedQty(new_qty);
					  storeItemBatchStock.setClosingStock(new_closing_stock);

					  HibernateTemplate hbt1 = getHibernateTemplate();
					  hbt1.setFlushModeName("FLUSH_EAGER");
					  hbt1.setCheckWriteOperations(false); //
					  hbt1.update(storeItemBatchStock); } else { //Update
					  storeItemBatchStock =
					  storeItemBatchStockList.get(0);
					  storeItemBatchStock.setLoanInQty(new BigDecimal(0));
					  HibernateTemplate hbt1 = getHibernateTemplate();
					  hbt1.setFlushModeName("FLUSH_EAGER");
					  hbt1.setCheckWriteOperations(false); //
					  hbt1.update(storeItemBatchStock); } } else { if
					  (loaninId.get(i).toString().equalsIgnoreCase("0")) {*/
					storeItemBatchStock = new StoreItemBatchStock();
					storeItemBatchStock.setDepartment(storeGrnM.getDepartment());
					storeItemBatchStock.setHospital(storeGrnM.getHospital());
					storeItemBatchStock.setItem(storeGrnTObj.getItem());
					storeItemBatchStock.setBatchNo(storeGrnTObj.getBatchNo());
					if(storeGrnTObj.getLotNo() != null) {
						storeItemBatchStock.setLotNo(storeGrnTObj.getLotNo());
					}else{
						storeItemBatchStock.setLotNo(null);
					}
					/* else {
					  storeItemBatchStock.setLotNo(storeGrnTObj.getBrand()+","+storeGrnTObj.getItem()+","+storeGrnTObj.getBatchNo()); }*/

					//BigDecimal recd_qty = new  BigDecimal(receivedQty.get(i).toString());

					storeItemBatchStock.setReceivedQty(storeGrnTObj.getReceivedQty());

					// storeItemBatchStock.setFreeItem(storeGrnTObj.getFreeItem());
					storeItemBatchStock.setBrand(storeGrnTObj.getBrand());
					storeItemBatchStock.setCostPrice(storeGrnTObj.getFinalCostPrice());
					storeItemBatchStock.setClosingStock(storeGrnTObj.getReceivedQty());
					storeItemBatchStock.setExpiryDate(storeGrnTObj.getExpiryDate());
					if(barCodeNo.get(i)!=null && !barCodeNo.get(i).equals("")){
						storeItemBatchStock.setBarcodeNo((String)barCodeNo.get(i));
					}else{
						storeItemBatchStock.setBarcodeNo((String)storeGrnTObj.getBatchNo());
					}
					HibernateTemplate hbt1 = getHibernateTemplate();
					hbt1.setFlushModeName("FLUSH_EAGER");
					hbt1.setCheckWriteOperations(false);
					hbt1.save(storeItemBatchStock);

				} // if loaninId =0 }
				// if itembatchstocksize > 0
				//} // end of for loop
			} // end of if GrnTlist > 0

			HibernateTemplate hbt3 = getHibernateTemplate();
			hbt3.setFlushModeName("FLUSH_EAGER");
			hbt3.setCheckWriteOperations(false);
			if (flag_loan) {
				List<StoreLoaninM> storeLoaninMList = new ArrayList<StoreLoaninM>();
				storeLoaninMList = session.createCriteria(StoreLoaninM.class)
				.add(Restrictions.eq("Po.Id", indentOrPoId)).add(
						Restrictions.eq("Department.Id", deptId))
						.list();
				for (StoreLoaninM storeLoaninML : storeLoaninMList) {
					StoreLoaninM storeLoanInM = (StoreLoaninM) getHibernateTemplate()
					.load(StoreLoaninM.class, storeLoaninML.getId());
					storeLoanInM.setStatus("p");
					hbt3.update(storeLoanInM);
				}
			}
			if ((sos.equalsIgnoreCase("a"))) {
				// StoreIndentM storeIndentM =
				// (StoreIndentM)getHibernateTemplate().load(StoreIndentM.class,
				// indentOrPoId);
				// storeIndentM.setStatus("p");
				// hbt3.update(storeIndentM);
			} else if (sos.equalsIgnoreCase("l")) {
				// StorePoHeader storePoHeader =
				// (StorePoHeader)getHibernateTemplate().load(StorePoHeader.class,
				// indentOrPoId);
				// storePoHeader.setStatus("p");
				// int grnMasterId = 0;
				// storePoHeader.setStoreGrnM(storeGrnM);
				// hbt3.update(storePoHeader);
			}
			tx.commit();
			map.put("messageTOBeVisibleToTheUser", "CRV saved successfully.");
		} catch (Exception e) {
			if (tx != null) {
				tx.rollback();
				map.put("messageTOBeVisibleToTheUser",
				"CRV not saved !..... ");
			}
			// throw e; // or display error message
			e.printStackTrace();
		}
		map.put("maxIndentNo", no);
		return map;
	}

	public Map<String, Object> getGrnNoListForAutoComplete(Box box) {


		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreGrnM> itemList = new ArrayList<StoreGrnM>();

		session = (Session) getSession();
		
		System.out.println("dept in autocomplete="+box.getInt("deptId"));

		String type = box.getString("type");
		try {

			Map<String, Object> utilMap = new HashMap<String, Object>();

			List objectList = new ArrayList();
			String str = "%" + box.get("autoHint") + "%";
			Criteria c = null;
			if (type.equals("reports")) {
				c = session.createCriteria(StoreGrnM.class).add(
						Restrictions.like("GrnNo", str)).add(
								Restrictions.eq("Status", "v")).add(
										Restrictions.eq("Department.Id", box.getInt("deptId")));
			} else if (type.equals("grid")) {
				c = session.createCriteria(StoreGrnM.class).add(
						Restrictions.like("GrnNo", str)).add(
								Restrictions.eq("Department.Id", box.getInt("deptId")))
								.add(Restrictions.ne("Status", "v"));
			}

			c.setFirstResult(0);
			c.setMaxResults(10);
			itemList = c.list();

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);

		return map;

	}

	public Map<String, Object> getBudgetDetails(Box box) {
		// TODO Auto-generated method stub
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();
		try {
			List<StoreGrnM> storeGrnMList = new ArrayList<StoreGrnM>();
			StoreGrnM storeGrnM = new StoreGrnM();
			storeGrnMList = session.createCriteria(StoreGrnM.class).add(
					Restrictions.eq("GrnNo", box.getString(GRN_NO))).add(
							Restrictions.eq("Department.Id", box.getInt("deptId")))
							.list();
			java.util.Date grnDate = null;
			BigDecimal grnAmount = new BigDecimal(0);
			BigDecimal vat = new BigDecimal(0);
			BigDecimal disc = new BigDecimal(0);
			if (storeGrnMList != null && storeGrnMList.size() > 0) {
				storeGrnM = (StoreGrnM) storeGrnMList.get(0);
				grnDate = storeGrnM.getGrnDate();
				grnAmount = storeGrnM.getGrnAmount();
				vat = storeGrnM.getVat();
				disc = storeGrnM.getDiscount();
				map.put("grn_amount", grnAmount);
				map.put("vat", vat);
				map.put("disc", disc);
			}

			List<MasStoreFinancial> masStoreFinancialList = new ArrayList<MasStoreFinancial>();
			masStoreFinancialList = session.createCriteria(
					MasStoreFinancial.class).list();
			java.util.Date start_date = null;
			java.util.Date end_date = null;
			int financial_id = 0;
			for (Iterator iterator2 = masStoreFinancialList.iterator(); iterator2
			.hasNext();) {
				MasStoreFinancial masStoreFinancial = (MasStoreFinancial) iterator2
				.next();
				start_date = (java.util.Date) masStoreFinancial.getStartDate();
				end_date = (java.util.Date) masStoreFinancial.getEndDate();
				if (grnDate != null) {
					if (grnDate.after(start_date) && grnDate.before(end_date)) {
						financial_id = masStoreFinancial.getId();
						break;
					} else if (grnDate.equals(start_date)
							|| grnDate.equals(end_date)) {
						financial_id = masStoreFinancial.getId();
						break;
					}
				}

			}
			MasStoreBudget masStoreBudget = new MasStoreBudget();
			List<MasStoreBudget> masStoreBudgetList = new ArrayList<MasStoreBudget>();
			masStoreBudgetList = session.createCriteria(MasStoreBudget.class)
			.add(Restrictions.eq("Financial.Id", financial_id)).add(
					Restrictions.eq("Department.Id", box
							.getInt("deptId"))).list();
			BigDecimal existing_committed_amount = null;
			if (masStoreBudgetList != null && masStoreBudgetList.size() > 0) {
				masStoreBudget = masStoreBudgetList.get(0);
				map.put("allocatedAmount", masStoreBudget
						.getTotalAllocatedAmount());
				map.put("spentAmount", masStoreBudget.getSpendAmount());
				map.put("balanceAmount", masStoreBudget.getBalanceAmount());
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return map;
	}

	public Map<String, Object> getItemListForCompleteStockNomenclatureByAutocomplete(
			Map dataMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreItem> itemList1 = new ArrayList<MasStoreItem>();
		session = (Session) getSession();
		String pvmsNo = null;
		int deptId = 0;
		int hospitalId=0;
		deptId = Integer.parseInt("" + dataMap.get("deptId"));
		hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));

		try {
			String str =dataMap.get("autoHint") + "%";
			// add hospital_id by javed khan
			Criteria c = session.createCriteria(MasStoreItem.class)
					.createAlias("ItemClassification", "cl").add(Restrictions.eq("cl.Id", 1))
			//.add(Restrictions.eq("ItemType.Id", 2))
			//.add(Restrictions.eq("Hospital.Id", hospitalId))
			.add(Restrictions.like("Nomenclature", str).ignoreCase());

			c.setFirstResult(0);
			c.setMaxResults(30);
			itemList = c.list();

			/*Criteria c1 = session.createCriteria(MasStoreItem.class)
			//.add(Restrictions.eq("ItemType.Id", 1))
			.add(Restrictions.like("Nomenclature", str).ignoreCase());
			c1.setFirstResult(0);
			c1.setMaxResults(10);
			itemList1 = c1.list();

			itemList.addAll(itemList1 );*/


		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;

	}
	public Map<String, Object> getItemListForCompleteStockCommonNameByAutocomplete(
			Map dataMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		session = (Session) getSession();
		String pvmsNo = null;
		int deptId = 0;
		deptId = Integer.parseInt("" + dataMap.get("deptId"));

		try {
			String str = "%" + dataMap.get("autoHint") + "%";

			Criteria c = session.createCriteria(MasStoreItem.class).add(
					Restrictions.eq("Status", "y")).add(
							Restrictions.like("CommonName", str));
			c.setFirstResult(0);
			c.setMaxResults(10);
			itemList = c.list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;

	}

	public Map<String, Object> getStockDetails(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreItemBatchStock> itemList = new ArrayList<StoreItemBatchStock>();
		session = (Session) getSession();

		String pvms = null;
		String nomenclature = null;

		String au = null;
		Integer qtymmf = null;
		String str = null;
		BigDecimal stockInHand = null;
		BigDecimal loanIn = null;
		BigDecimal loanOut = null;
		int item_id = 0;

		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector mmfTItems = new Vector();
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		Criteria c = null;
		List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
		Query q = null;
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			int deptId = box.getInt("deptId");
			if (box.getString("nillStock").equals("false")) {
				if (box.get("item_id") != null
						&& box.get("item_id").length() > 0) {

					BigDecimal stock = new BigDecimal("0");
					pvms = box.getString("item_id");
					String qry = "select i.pvms_no,i.nomenclature,u.unit_name,sum(s.loan_in_qty) as loanin,sum(s.loan_out_qty) as loanout,"
						+

						"sum(s.closing_stock) as stock,s.item_id from mas_store_item i inner join store_item_batch_stock s on i.item_id=s.item_id "
						+ "left outer join mas_store_item_conversion c on i.item_conversion_id=c.item_conversion_id "
						+ "left outer join mas_store_unit u on c.purchase_unit_id=u.unit_id "
						+ "where i.pvms_no='"
						+ pvms
						+ "' and s.department_id='"
						+ deptId
						+ "' group by i.pvms_no,i.nomenclature,u.unit_name";
					q = session.createSQLQuery(qry);

				} else if (!box.getString("pvmsVal").equals("")) {
					// BigDecimal stock=new BigDecimal("0");
					pvms = box.getString("pvmsVal");

					String qry = "select i.pvms_no,i.nomenclature,u.unit_name,sum(s.loan_in_qty) as loanin,sum(s.loan_out_qty) as loanout,"
						+

						"sum(s.closing_stock) as stock,s.item_id from mas_store_item i inner join store_item_batch_stock s on i.item_id=s.item_id "
						+ "left outer join mas_store_item_conversion c on i.item_conversion_id=c.item_conversion_id "
						+ "left outer join mas_store_unit u on c.purchase_unit_id=u.unit_id "
						+ "where i.pvms_no='"
						+ pvms
						+ "' and s.department_id='"
						+ deptId
						+ "' group by i.pvms_no,i.nomenclature,u.unit_name";
					q = session.createSQLQuery(qry);

				} else {
					String qry = "select i.pvms_no,i.nomenclature,u.unit_name,sum(s.loan_in_qty) as loanin,sum(s.loan_out_qty) as loanout,"
						+

						"sum(s.closing_stock) as stock,s.item_id from mas_store_item i inner join store_item_batch_stock s on i.item_id=s.item_id "
						+ "left outer join mas_store_item_conversion c on i.item_conversion_id=c.item_conversion_id "
						+ "left outer join mas_store_unit u on c.purchase_unit_id=u.unit_id "
						+ "where s.closing_stock>0 and s.department_id='"
						+ deptId
						+ "' group by i.pvms_no,i.nomenclature,u.unit_name order by s.item_id";
					q = session.createSQLQuery(qry);
					q.setFirstResult(0);
					q.setMaxResults(1000);
					// BigDecimal stock=new BigDecimal("0");
					// c =
					// session.createCriteria(StoreItemBatchStock.class).createAlias("Item",
					// "item")
					// .add(Restrictions.gt("ClosingStock",
					// stock)).addOrder(Order.asc("item.Id"));
					// c.setFirstResult(0);
					// c.setMaxResults(1000);
				}
			} else {
				if (box.get("item_id") != null
						&& box.get("item_id").length() > 0) {

					BigDecimal stock = new BigDecimal("0");
					pvms = box.getString("item_id");
					String qry = "select i.pvms_no,i.nomenclature,u.unit_name,sum(s.loan_in_qty) as loanin,sum(s.loan_out_qty) as loanout,"
						+

						"sum(s.closing_stock) as stock,s.item_id from mas_store_item i inner join store_item_batch_stock s on i.item_id=s.item_id "
						+ "left outer join mas_store_item_conversion c on i.item_conversion_id=c.item_conversion_id "
						+ "left outer join mas_store_unit u on c.purchase_unit_id=u.unit_id "
						+ "where i.pvms_no='"
						+ pvms
						+ "' group by i.pvms_no,i.nomenclature,u.unit_name";
					q = session.createSQLQuery(qry);

				} else if (!box.getString("pvmsVal").equals("")) {
					// BigDecimal stock=new BigDecimal("0");
					pvms = box.getString("pvmsVal");

					String qry = "select i.pvms_no,i.nomenclature,u.unit_name,sum(s.loan_in_qty) as loanin,sum(s.loan_out_qty) as loanout,"
						+

						"sum(s.closing_stock) as stock,s.item_id from mas_store_item i inner join store_item_batch_stock s on i.item_id=s.item_id "
						+ "left outer join mas_store_item_conversion c on i.item_conversion_id=c.item_conversion_id "
						+ "left outer join mas_store_unit u on c.purchase_unit_id=u.unit_id "
						+ "where i.pvms_no='"
						+ pvms
						+ "' group by i.pvms_no,i.nomenclature,u.unit_name";
					q = session.createSQLQuery(qry);

				} else {
					String qry = "select i.pvms_no,i.nomenclature,u.unit_name,sum(s.loan_in_qty) as loanin,sum(s.loan_out_qty) as loanout,"
						+

						"sum(s.closing_stock) as stock,s.item_id from mas_store_item i left outer join store_item_batch_stock s on i.item_id=s.item_id "
						+ "left outer join mas_store_item_conversion c on i.item_conversion_id=c.item_conversion_id "
						+ "left outer join mas_store_unit u on c.purchase_unit_id=u.unit_id "
						+ "where i.department_id='"
						+ deptId
						+ "' group by i.pvms_no,i.nomenclature,u.unit_name order by i.item_id";
					q = session.createSQLQuery(qry);
					q.setFirstResult(0);
					q.setMaxResults(1000);

				}
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		List list = q.list();
		for (Iterator iterator = list.iterator(); iterator.hasNext();) {
			Object[] object = (Object[]) iterator.next();

			if (object[0] == null)
				pvms = "";
			else
				pvms = (String) object[0];

			if (object[1] == null)
				nomenclature = "";
			else
				nomenclature = (String) object[1];

			if (object[2] == null)
				au = "";
			else
				au = (String) object[2];

			if (object[3] == null)
				loanIn = new BigDecimal("0");
			else
				loanIn = (BigDecimal) object[3];

			if (object[4] == null)
				loanOut = new BigDecimal("0");
			else
				loanOut = (BigDecimal) object[4];

			if (object[5] == null)
				stockInHand = new BigDecimal("0");
			else
				stockInHand = (BigDecimal) object[5];

			if (object[6] == null)
				item_id = 0;
			else
				item_id = (Integer) object[6];

			hData = new HashMap<String, Object>();
			hData.put("itemId", item_id);
			hData.put("pvms", pvms);
			hData.put("nomenclature", nomenclature);
			hData.put("loanIn", loanIn);
			hData.put("loanOut", loanOut);
			hData.put("stockInHand", stockInHand);
			hData.put("au", au);
			vResult.add(hData);

		}

		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}

		try {
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("pagedArray", pagedArray);

		return map;
	}

	public Map<String, Object> getStockDetailsForNextRecord(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreItemBatchStock> itemList = new ArrayList<StoreItemBatchStock>();
		session = (Session) getSession();

		String pvms = null;
		String nomenclature = null;
		String strength = null;
		String au = null;
		Integer qtymmf = null;
		String str = null;
		BigDecimal stockInHand = null;
		int item_id = 0;
		BigDecimal loanIn = null;
		BigDecimal loanOut = null;

		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector mmfTItems = new Vector();
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		Criteria c = null;
		List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
		Query q = null;
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			if (box.get("item_id") != null && box.get("item_id").length() > 0) {

				BigDecimal stock = new BigDecimal("0");
				pvms = box.getString("item_id");
				String qry = "select i.pvms_no,i.nomenclature,u.unit_name,sum(s.loan_in_qty) as loanin,sum(s.loan_out_qty) as loanout,"
					+

					"sum(s.closing_stock) as stock,s.item_id from mas_store_item i inner join store_item_batch_stock s on i.item_id=s.item_id "
					+ "left outer join mas_store_item_conversion c on i.item_conversion_id=c.item_conversion_id "
					+ "left outer join mas_store_unit u on c.purchase_unit_id=u.unit_id "
					+ "where i.pvms_no='"
					+ pvms
					+ "' group by i.pvms_no,i.nomenclature,u.unit_name";
				q = session.createSQLQuery(qry);

			} else if (!box.getString("pvmsVal").equals("")) {
				BigDecimal stock = new BigDecimal("0");
				pvms = box.getString("pvmsVal");
				String qry = "select i.pvms_no,i.nomenclature,u.unit_name,sum(s.loan_in_qty) as loanin,sum(s.loan_out_qty) as loanout,"
					+

					"sum(s.closing_stock) as stock,s.item_id from mas_store_item i inner join store_item_batch_stock s on i.item_id=s.item_id "
					+ "left outer join mas_store_item_conversion c on i.item_conversion_id=c.item_conversion_id "
					+ "left outer join mas_store_unit u on c.purchase_unit_id=u.unit_id "
					+ "where i.pvms_no='"
					+ pvms
					+ "' group by i.pvms_no,i.nomenclature,u.unit_name";
				q = session.createSQLQuery(qry);

			} else {

				int itemId = 0;
				if (box.getString("buttonName").equals("next")) {
					itemId = box.getInt("itemId");
				} else {
					itemId = Integer.parseInt(box
							.getString("itemIdForNextRecord"));
				}

				String qry = "select i.pvms_no,i.nomenclature,u.unit_name,sum(s.loan_in_qty) as loanin,sum(s.loan_out_qty) as loanout,"
					+

					"sum(s.closing_stock) as stock,s.item_id from mas_store_item i inner join store_item_batch_stock s on i.item_id=s.item_id "
					+ "left outer join mas_store_item_conversion c on i.item_conversion_id=c.item_conversion_id "
					+ "left outer join mas_store_unit u on c.purchase_unit_id=u.unit_id "
					+ "where s.closing_stock>0 and s.item_id>"
					+ itemId
					+ " group by i.pvms_no,i.nomenclature,u.unit_name order by s.item_id";
				q = session.createSQLQuery(qry);
				q.setFirstResult(0);
				q.setMaxResults(1000);

				/*
				 * BigDecimal stock=new BigDecimal("0"); c =
				 * session.createCriteria(StoreItemBatchStock.class).createAlias("Item",
				 * "item").add(Restrictions.ge("Id",itemId))
				 * .add(Restrictions.gt("ClosingStock",
				 * stock)).addOrder(Order.asc("item.Id")); c.setFirstResult(0);
				 * c.setMaxResults(1000);
				 */

				String itemIdForNextRecord = Integer.toString(itemId);
				map.put("itemIdForNextRecord", itemIdForNextRecord);
			}
		}

		catch (HibernateException e) {
			e.printStackTrace();
		}

		List list = q.list();
		for (Iterator iterator = list.iterator(); iterator.hasNext();) {
			Object[] object = (Object[]) iterator.next();

			if (object[0] == null)
				pvms = "";
			else
				pvms = (String) object[0];

			if (object[1] == null)
				nomenclature = "";
			else
				nomenclature = (String) object[1];

			if (object[2] == null)
				au = "";
			else
				au = (String) object[2];

			if (object[3] == null)
				loanIn = new BigDecimal("0");
			else
				loanIn = (BigDecimal) object[3];

			if (object[4] == null)
				loanOut = new BigDecimal("0");
			else
				loanOut = (BigDecimal) object[4];

			if (object[5] == null)
				stockInHand = new BigDecimal("0");
			else
				stockInHand = (BigDecimal) object[5];

			if (object[6] == null)
				item_id = 0;
			else
				item_id = (Integer) object[6];

			hData = new HashMap<String, Object>();
			hData.put("itemId", item_id);
			hData.put("pvms", pvms);
			hData.put("nomenclature", nomenclature);
			hData.put("loanIn", loanIn);
			hData.put("loanOut", loanOut);
			hData.put("stockInHand", stockInHand);
			hData.put("au", au);
			vResult.add(hData);

		}
		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}

		try {
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("pagedArray", pagedArray);

		return map;
	}

	public Map<String, Object> submitLoanIn(Box box) {
		// TODO Auto-generated method stub
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		int deptId = 0;
		int hospitalId = 0;
		int supplierId = 0;
		int employeeId = 0;

		SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
		SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
		java.sql.Date loanInDate = null;
		java.sql.Date challanDate = null;

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");

		String challanNumber = "";
		String loaninNo = "";
		String max = "";
		String no = "";
		int po_id = 0;
		String userName = "";
		String remarks = "";
		BigDecimal loanInValue = null;
		BigDecimal discount = null;
		BigDecimal vat = null;

		Session session = getSession();
		// Collecting Parameter Values from Box

		deptId = box.getInt("deptId");
		hospitalId = box.getInt("hospitalId");
		userName = box.getString("userName");
		supplierId = box.getInt(SUPPLIER_ID);
		loaninNo = box.getString(LOANIN_NO);
		po_id = box.getInt(INDENT_ID);
		try {
			String date4MySQL = formatterOut.format(formatterIn.parse(box
					.getString(LOANIN_DATE)));
			loanInDate = java.sql.Date.valueOf(date4MySQL);
		} catch (Exception e) {
			loanInDate = null;
		}

		try {
			String date4MySQL = formatterOut.format(formatterIn.parse(box
					.getString(CHALLAN_DATE)));
			challanDate = java.sql.Date.valueOf(date4MySQL);
		} catch (Exception e) {
			challanDate = null;
		}

		challanNumber = box.getString(CHALLAN_NO);
		employeeId = box.getInt(EMPLOYEE_ID);

		try {
			loanInValue = new BigDecimal(box.getString("actualGrnValue"));
		} catch (Exception e) {
			loanInValue = new BigDecimal(0);
		}

		remarks = box.getString(REMARKS);

		// Create StoreLoanInM object and Set the Values

		StoreLoaninM storeLoaninM = new StoreLoaninM();
		storeLoaninM.setChallanDate(challanDate);
		storeLoaninM.setChallanNo(challanNumber);

		storeLoaninM.setLastChgBy(userName);
		storeLoaninM.setLastChgDate(HMSUtil
				.convertStringTypeDateToDateType(date));
		storeLoaninM.setLastChgTime(time);
		storeLoaninM.setLoaninAmount(loanInValue);
		storeLoaninM.setLoaninDate(loanInDate);
		storeLoaninM.setLoaninNo(loaninNo);
		storeLoaninM.setLoaninValue(loanInValue);
		storeLoaninM.setRemarks(remarks);
		storeLoaninM.setStatus("o");
		if (supplierId != 0) {
			storeLoaninM.setSupplier(new MasStoreSupplier(supplierId));
		}

		try {
			storeLoaninM.setDepartment(new MasDepartment(deptId));
		} catch (Exception e) {
			storeLoaninM.setDepartment(null);
		}

		try {
			storeLoaninM.setEmployee(new MasEmployee(employeeId));
		} catch (Exception e) {
			storeLoaninM.setEmployee(null);
		}

		try {
			storeLoaninM.setHospital(new MasHospital(hospitalId));
		} catch (Exception e) {
			storeLoaninM.setHospital(null);
		}

		if (po_id != 0) {
			storeLoaninM.setPo(new StorePoHeader(po_id));
		}
		

		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		
		

		// Create StoreLoanInTList Contains StoreLoanInT Objects and Set the
		// Corresponding Values
		List<StoreLoaninT> storeLoaninTList = new ArrayList<StoreLoaninT>();
		StoreLoaninT storeLoaninT = null;

		Vector itemId = box.getVector(ITEM_ID);
		Vector brandId = box.getVector(BRAND_ID);
		Vector manufacturerId = box.getVector(MANUFACTURER_ID);
		Vector batchNo = box.getVector(BATCH_NO);
		Vector barCodeNo = box.getVector("barCodeNo");
		Vector lotNo = box.getVector(LOT_NO);
		Vector receivedQty = box.getVector(QUANTITY_RECEIVED);
		Vector freeQty = box.getVector(FREE_QTY);
		Vector dispType = box.getVector("dispenseType");
		Vector mdqValue = box.getVector("mdq");
		Vector ratePerMdq = box.getVector("ratePerMdq");
		Vector convertedStock = box.getVector("convertedStock");
		Vector discountPercentage=box.getVector(DISCOUNT_PERCENTAGE);
		Vector discountAmount = box.getVector("discountAmount");
		Vector taxAmount = box.getVector(TAX_PERCENT);
		Vector finalCostPrice = box.getVector(COST_PRICE);
		Vector amountValue = box.getVector(AMOUNT);
		Vector freeItem = box.getVector(FREE_ITEM);
		Vector manufacturerDate = box.getVector(MANUFACTURING_DATE);
		Vector expiryDate = box.getVector(EXPIRY_DATE);
		Vector reasonForDemand = box.getVector("reasonForDemand");
		Vector flag = box.getVector("flag");
		Vector preId=box.getVector("PreId");

		/**
		 * Added By Ritu
		 * Date 26-06-2012
		 */
		Vector brandGen = box.getVector("BRAND_GEN");
		Vector bg = box.getVector(BG);
		Vector suppliedBG = box.getVector("suppliedBG");
		Vector suppliedBrand = box.getVector("suppliedBrand");
		Vector suppliedManufacturer = box.getVector("suppliedManufacturer");
		Vector suppliedQty = box.getVector("suppliedQty");

		/**
		 * End
		 */
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			
			String partiallyReceive = box.getString("partiallyReceive");
			System.out.println("partiallyReceive="+partiallyReceive);
			// Add by Vinay 
			// Purpose : Remove the chalan No if receiving full supply order from chalan screen after sucessfully submit by updating the status as 'y'
			
			if(!partiallyReceive.equalsIgnoreCase("y"))
			{
				if (po_id != 0) {
					StorePoHeader poHeader = (StorePoHeader)hbt.get(StorePoHeader.class,po_id);
					if(poHeader != null)
					{
						poHeader.setStatus("y");
						hbt.update(poHeader);
						hbt.refresh(poHeader);
					}
				}
			}
			

			int slno = 1;
			for (int i = 0; i < itemId.size(); i++) {
				if (itemId.get(i).toString().equalsIgnoreCase("0"))
					break;
				if(batchNo.get(i)!=null && !batchNo.get(i).equals("") && !receivedQty.get(i).toString().equals("0.0")){
					storeLoaninT = new StoreLoaninT();
					storeLoaninT.setSerialNo(slno++);
					storeLoaninT.setItem(new MasStoreItem(new Integer(itemId.get(i).toString())));
					/**
					 * Commented By ritu 
					 * Date 26-06-2012
					 */
					/*if(brandId.get(i)!=null && brandId.get(i)!="" ){
				String branId=brandId.get(i).toString().trim();
				if(!(branId.equals("0"))){

			storeLoaninT.setBrand(new MasStoreBrand(new Integer(branId)));
			}

			}
			if(manufacturerId.get(i)!=null && manufacturerId.get(i)!=""){
				String manuId=manufacturerId.get(i).toString().trim();
				if(!(manuId.equals("0"))){
			storeLoaninT.setManufacturer(new MasManufacturer(new Integer(
					manuId)));
			}
			}*/
					/**
					 * Added By Ritu
					 * Date 26-06-2012
					 */
					String manuId="0";
					String sManuId="0";

					if(manufacturerId.get(i)!=null && !manufacturerId.get(i).toString().trim().equals("") && !manufacturerId.get(i).toString().trim().equals("0") ){
						manuId=manufacturerId.get(i).toString().trim();
						storeLoaninT.setRManufacturer(new MasManufacturer(new Integer(manuId)));
					} 
					if(suppliedManufacturer.size() >0 && suppliedManufacturer.get(i)!=null && !suppliedManufacturer.get(i).toString().trim().equals("") ){
						String sManuName= suppliedManufacturer.get(i).toString().trim();
						List<MasManufacturer> manufList = new ArrayList<MasManufacturer>();
						manufList = session.createCriteria(MasManufacturer.class).add(Restrictions.eq("ManufacturerName", sManuName).ignoreCase()).list();
						if(manufList.size() > 0){
							sManuId = (manufList.get(0).getId()).toString();
						}else{
							List<MasManufacturer> masManufacturerList = new ArrayList<MasManufacturer>();

							masManufacturerList = session.createCriteria(MasManufacturer.class).addOrder(
									Order.desc("Id")).setMaxResults(1).list();

							int newManufId= 0;
							if (masManufacturerList != null && masManufacturerList.size() > 0) {
								newManufId = masManufacturerList.get(0).getId();
								newManufId++;
							}
							MasManufacturer masManufacturer = new MasManufacturer();
							masManufacturer.setManufacturerCode("M" + newManufId);
							masManufacturer.setManufacturerName(sManuName);
							masManufacturer.setLastChgBy(userName);
							masManufacturer.setLastChgDate(HMSUtil
									.convertStringTypeDateToDateType(date));
							masManufacturer.setLastChgTime(time);
							//	masStoreBrand.setManufacturer(masManufacturer);
							masManufacturer.setStatus("y");
							hbt.save(masManufacturer);
							sManuId = masManufacturer.getId().toString();
						}


					}
					if(!(manuId.equals("0")) && sManuId.equals("0")){
						storeLoaninT.setManufacturer(new MasManufacturer(new Integer(manuId)));
					}else if((manuId.equals("0")) && !sManuId.equals("0")){
						storeLoaninT.setManufacturer(new MasManufacturer(new Integer(sManuId)));
					}else if(!(manuId.equals("0")) && !sManuId.equals("0")){
						storeLoaninT.setManufacturer(new MasManufacturer(new Integer(sManuId)));
					}

					String branId="0";
					String sbrandId="0";

					if(brandId.get(i)!=null && !brandId.get(i).toString().trim().equals("") && !brandId.get(i).toString().trim().equals("0") ){
						branId=brandId.get(i).toString().trim();
						storeLoaninT.setRBrand(new MasStoreBrand(new Integer(branId)));
					} 
					if(suppliedBrand.size() >0 &&  suppliedBrand.get(i)!=null && !suppliedBrand.get(i).toString().trim().equals("") ){
						String sBrandName= suppliedBrand.get(i).toString().trim();
						List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
						brandList = session.createCriteria(MasStoreBrand.class).add(Restrictions.eq("BrandName", sBrandName).ignoreCase()).list();
						if(brandList.size() > 0){
							sbrandId = (brandList.get(0).getId()).toString();
						}else{
							List<MasStoreBrand> masStoreBrandList = new ArrayList<MasStoreBrand>();

							masStoreBrandList = session.createCriteria(MasStoreBrand.class).addOrder(
									Order.desc("Id")).setMaxResults(1).list();

							int newBrandId= 0;
							if (masStoreBrandList != null && masStoreBrandList.size() > 0) {
								newBrandId = masStoreBrandList.get(0).getId();
								newBrandId++;
							}
							MasStoreBrand masStoreBrand = new MasStoreBrand();
							masStoreBrand.setBrandCode("B" + newBrandId);
							masStoreBrand.setBrandName(sBrandName);
							masStoreBrand.setItem(new MasStoreItem(new Integer(itemId.get(i).toString())));
							masStoreBrand.setLastChgBy(userName);
							masStoreBrand.setLastChgDate(HMSUtil
									.convertStringTypeDateToDateType(date));
							masStoreBrand.setLastChgTime(time);
							if(!sManuId.equals("0")){
								masStoreBrand.setManufacturer(new MasManufacturer(new Integer(sManuId)));
							}
							masStoreBrand.setStatus("y");
							hbt.save(masStoreBrand);
							sbrandId = masStoreBrand.getId().toString();
						}


					}
					if(!(branId.equals("0")) && sbrandId.equals("0")){
						storeLoaninT.setBrand(new MasStoreBrand(new Integer(branId)));
					}else if((branId.equals("0")) && !sbrandId.equals("0")){
						storeLoaninT.setBrand(new MasStoreBrand(new Integer(sbrandId)));
					}else if(!(branId.equals("0")) && !sbrandId.equals("0")){
						storeLoaninT.setBrand(new MasStoreBrand(new Integer(sbrandId)));
					}
					if(brandGen.size() > 0){
						storeLoaninT.setRBg(brandGen.get(i).toString());
						storeLoaninT.setSBg(brandGen.get(i).toString());
					}else{
						try {
							storeLoaninT.setRBg(bg.get(i).toString());
						} catch (Exception e) {
							storeLoaninT.setRBg("");
						}
						try {
							storeLoaninT.setSBg(suppliedBG.get(i).toString());
						} catch (Exception e) {
							storeLoaninT.setSBg("");
						}
					}

					/**
					 * End
					 */


					storeLoaninT.setPreId(new Integer(preId.get(i).toString()));
					storeLoaninT.setProStatus("y");
					if(!barCodeNo.get(i).equals(""))
					{
						storeLoaninT.setBarCodeNo(barCodeNo.get(i).toString());
					}
					else
					{
						storeLoaninT.setBarCodeNo(batchNo.get(i).toString());

					}



					storeLoaninT.setBatchNo(batchNo.get(i).toString());
					/*if(lotNo.get(i)!=null && lotNo.get(i)!=""){
				storeLoaninT.setLotNo(lotNo.get(i).toString());
			}*/
					/**
					 * Code By Ritu 
					 * Date 26-06-2012
					 */
					/*
			try {
				storeLoaninT.setReceivedQty(new BigDecimal(receivedQty.get(i)
						.toString()));
			} catch (Exception e) {
				storeLoaninT.setReceivedQty(new BigDecimal(0));
			}*/


					if(receivedQty.get(i)!=null && !(receivedQty.get(i).toString().trim().equals(""))){
						storeLoaninT.setReceivedQty(new BigDecimal(receivedQty.get(i).toString()));
					}

					if(suppliedQty.size() > 0 && suppliedQty.get(i)!=null && !(suppliedQty.get(i).toString().trim().equals(""))){
						storeLoaninT.setRQty(new BigDecimal(suppliedQty.get(i).toString()));
					}else if(receivedQty.get(i)!=null && !(receivedQty.get(i).toString().trim().equals(""))){
						storeLoaninT.setRQty(new BigDecimal(receivedQty.get(i).toString()));
					}
					/**
					 * End
					 */
					try {
						storeLoaninT.setFreeQty(new Integer(freeQty.get(i).toString()));
					} catch (Exception e) {
						storeLoaninT.setFreeQty(new Integer(0));
					}

					try {
						storeLoaninT.setDiscount(new BigDecimal(discountAmount.get(i).toString()));
					} catch (Exception e) {
						storeLoaninT.setDiscount(null);
					}
					try {
						storeLoaninT.setDisPrcentage(new BigDecimal(discountPercentage.get(i)
								.toString()));
					} catch (Exception e) {
						storeLoaninT.setDisPrcentage(new BigDecimal(0));
					}

					try {
						storeLoaninT
						.setTax(new BigDecimal(taxAmount.get(i).toString()));
					} catch (Exception e) {
						storeLoaninT.setTax(null);
					}

					try {
						storeLoaninT.setFinalCostPrice(new BigDecimal(finalCostPrice
								.get(i).toString()));
					} catch (Exception e) {
						storeLoaninT.setFinalCostPrice(new BigDecimal(0));
					}

					try {
						storeLoaninT.setAmountValue(new BigDecimal(amountValue.get(i)
								.toString()));
					} catch (Exception e) {
						storeLoaninT.setAmountValue(new BigDecimal(0));
					}

					/*storeLoaninT.setFreeItem(freeItem.get(i).toString());*/
					storeLoaninT.setDispType(dispType.get(i).toString());
					try {
						storeLoaninT.setMdqValue(new BigDecimal(mdqValue.get(i)
								.toString()));
					} catch (Exception e) {
						storeLoaninT.setMdqValue(new BigDecimal(0));
					}

					try {
						storeLoaninT.setRatePerMdq(new BigDecimal(ratePerMdq.get(i)
								.toString()));
					} catch (Exception e) {
						storeLoaninT.setRatePerMdq(new BigDecimal(0));
					}

					try {
						storeLoaninT.setUnitRate(new BigDecimal(ratePerMdq.get(i)
								.toString()));
					} catch (Exception e) {
						storeLoaninT.setUnitRate(new BigDecimal(0));
					}

					try {
						storeLoaninT.setManufacturerDate(formatterOut
								.format(formatterIn.parse(manufacturerDate.get(i)
										.toString())));
					} catch (Exception e) {
						storeLoaninT.setManufacturerDate(null);
					}
					try {
						storeLoaninT.setExpiryDate(java.sql.Date
								.valueOf(formatterOut.format(formatterIn
										.parse(expiryDate.get(i).toString()))));
					} catch (Exception e) {
						storeLoaninT.setExpiryDate(null);
					}

					try {
						storeLoaninT.setReasonForDemand(reasonForDemand.get(i).toString());
					} catch (Exception e) {
						storeLoaninT.setReasonForDemand("");
					}

					storeLoaninTList.add(storeLoaninT);
				}
			}

			// Save the Persistence Objects


			/*
			 * Save StoreLoanInM data & update StoreFyDocumentNo for LoanIn
			 * Number
			 */

			Criteria c = session.createCriteria(StoreFyDocumentNo.class).add(
					Restrictions.eq("Department.Id", deptId)).add(
							Restrictions.eq("Hospital.Id", hospitalId));
			storeFyDocumentNoList = c.list();
			String loanInStartNo = "";
			for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
				if (storeFyDocumentNo.getLoaninStartNo() != null) {
					loanInStartNo = ("" + storeFyDocumentNo.getLoaninStartNo());
					loanInStartNo = getMaxNo(loanInStartNo);
				} else {
					loanInStartNo = getMaxNo("");
				}
			}
			storeLoaninM.setLoaninNo(loanInStartNo);

			int storeFyId = 0;

			for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
				storeFyId = documentNo.getId();
			}
			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
			.load(StoreFyDocumentNo.class, storeFyId);
			storeFyDocumentNo.setLoaninNo(loaninNo);
			storeFyDocumentNo.setLoaninStartNo(loanInStartNo);
			hbt.update(storeFyDocumentNo);
			hbt.refresh(storeFyDocumentNo);

			hbt.save(storeLoaninM);

			/*
			 * Updating the Stock in StoreITemBatchStock
			 */

			List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
			StoreItemBatchStock storeItemBatchStock = null;

			if (storeLoaninTList.size() > 0) {
				for (int i = 0; i < storeLoaninTList.size(); i++) {
					storeLoaninT = new StoreLoaninT();
					storeLoaninT = (StoreLoaninT) storeLoaninTList.get(i);
					storeLoaninT.setLoaninMaster(storeLoaninM);
					hbt.save(storeLoaninT);
					hbt.refresh(storeLoaninT);

					// Updating Quantity Received in StorePoDetail for the
					// particular Item

					List<StorePoDetail> storePoDetailList = new ArrayList<StorePoDetail>();
					StorePoDetail storePoDetail = new StorePoDetail();
					storePoDetailList = session.createCriteria(
							StorePoDetail.class).add(
									Restrictions.eq("Po.Id", po_id)).add(
											Restrictions.eq("Item.Id", storeLoaninT.getItem()
													.getId())).list();

					if (storePoDetailList != null
							&& storePoDetailList.size() > 0) {
						storePoDetail = storePoDetailList.get(0);
						BigDecimal existingQuantity = null;
						BigDecimal quantity_to_be_added = null;
						BigDecimal newQuantity = new BigDecimal(0);
						BigDecimal mdq = storePoDetail.getMdqValue();

						existingQuantity = storePoDetail.getQuantityReceived();
						BigDecimal recd_qty = storeLoaninT.getReceivedQty();
						quantity_to_be_added = recd_qty;

						if (existingQuantity == null)
							existingQuantity = new BigDecimal(0);

						newQuantity = existingQuantity
						.add(quantity_to_be_added);
						storePoDetail.setQuantityReceived(newQuantity);
						HibernateTemplate hbt2 = getHibernateTemplate();
						hbt2.setFlushModeName("FLUSH_EAGER");
						hbt2.setCheckWriteOperations(false);
						hbt2.update(storePoDetail);
						hbt2.refresh(storePoDetail);
					}

					// Update Stock in Item Batch Stock
					// for All Items

					int item_id = storeLoaninT.getItem().getId();
					int brand_id=0;
					if(storeLoaninT.getBrand()!=null){
						brand_id = storeLoaninT.getBrand().getId();
					}
					BigDecimal cost_price=new BigDecimal(0);
					if(storeLoaninT.getFinalCostPrice()!=null){
						cost_price= storeLoaninT.getFinalCostPrice();
					}

					String batch_no = storeLoaninT.getBatchNo();
					int department_id = storeLoaninM.getDepartment().getId();

					storeItemBatchStockList = hbt
					.find("from jkt.hms.masters.business.StoreItemBatchStock as inp where inp.Item.Id = "
							+ item_id
							+ " and inp.CostPrice = "
							+ cost_price
							+ "and inp.Department.Id= "
							+ department_id
							+ "and inp.BatchNo ='"
							+ batch_no
							+ "'and inp.Brand.Id = "
							+ brand_id
							+ "and inp.Hospital.Id = "
							+hospitalId);


					if (storeItemBatchStockList != null
							&& storeItemBatchStockList.size() > 0) {
						storeItemBatchStock = storeItemBatchStockList.get(0);


						BigDecimal existing_qty = new BigDecimal(0);
						BigDecimal loaninQty = new BigDecimal(0);

						if (storeItemBatchStock.getReceivedQty() != null) {
							existing_qty = storeItemBatchStock.getReceivedQty();
						} else {
							existing_qty = new BigDecimal(0);
						}

						if (storeItemBatchStock.getLoanInQty() != null) {
							loaninQty = storeItemBatchStock.getLoanInQty();
						} else {
							loaninQty = new BigDecimal(0);
						}

						BigDecimal recd_qty = new BigDecimal(receivedQty.get(i).toString());

						BigDecimal new_qty = new BigDecimal(0);
						BigDecimal newLoaninQty = new BigDecimal(0);
						new_qty = existing_qty.add(recd_qty);
						newLoaninQty = loaninQty.add(recd_qty);

						BigDecimal existing_closing_stock = storeItemBatchStock
						.getClosingStock();
						BigDecimal new_closing_stock = new BigDecimal(0);
						new_closing_stock = existing_closing_stock
						.add(recd_qty);

						int id = storeItemBatchStock.getId();
						storeItemBatchStock = (StoreItemBatchStock) getHibernateTemplate()
						.load(StoreItemBatchStock.class, id);

						storeItemBatchStock.setReceivedQty(new_qty);
						storeItemBatchStock.setLoanInQty(newLoaninQty);
						storeItemBatchStock.setClosingStock(new_closing_stock);
						storeItemBatchStock.setBrandGeneric(storeLoaninT.getSBg());

						HibernateTemplate hbt1 = getHibernateTemplate();
						hbt1.setFlushModeName("FLUSH_EAGER");
						hbt1.setCheckWriteOperations(false);
						hbt1.update(storeItemBatchStock);
					} else {
						storeItemBatchStock = new StoreItemBatchStock();
						storeItemBatchStock.setDepartment(storeLoaninM
								.getDepartment());
						storeItemBatchStock.setItem(storeLoaninT.getItem());
						storeItemBatchStock.setBatchNo(storeLoaninT
								.getBatchNo());
						if (storeLoaninT.getLotNo() != null) {
							storeItemBatchStock.setLotNo(storeLoaninT
									.getLotNo());
						} else {
							storeItemBatchStock.setLotNo("");
						}

						BigDecimal recd_qty = new BigDecimal(receivedQty.get(i).toString());
						storeItemBatchStock.setReceivedQty(recd_qty);
						storeItemBatchStock.setLoanInQty(recd_qty);
						storeItemBatchStock.setFreeItem(storeLoaninT.getFreeItem());
						storeItemBatchStock.setBrandGeneric(storeLoaninT.getSBg());
						storeItemBatchStock.setBrand(storeLoaninT.getBrand());
						storeItemBatchStock.setCostPrice(storeLoaninT.getFinalCostPrice());
						storeItemBatchStock.setClosingStock(recd_qty);
						storeItemBatchStock.setExpiryDate(storeLoaninT.getExpiryDate());
						MasHospital masHospital = new MasHospital();
						masHospital.setId(hospitalId);
						storeItemBatchStock.setHospital(masHospital);
						//storeItemBatchStock.setManufactureDate(new Date(storeLoaninT.getManufacturerDate()));
						HibernateTemplate hbt1 = getHibernateTemplate();
						hbt1.setFlushModeName("FLUSH_EAGER");
						hbt1.setCheckWriteOperations(false);
						hbt1.save(storeItemBatchStock);
					}

					// if itembatchstocksize > 0
				}// end of for loop
			}// end of if GrnTlist > 0
			tx.commit();
			map.put("messageTOBeVisibleToTheUser",
			"Challan saved successfully.");
		} catch (Exception e) {
			if (tx != null) {
				tx.rollback();
				map.put("messageTOBeVisibleToTheUser",
				"Challan not saved !..... ");
			}
			// throw e; // or display error message
			e.printStackTrace();
		}
		return map;
	}
	public Map<String, Object> showMmfDepartmentApproval(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		departmentList = getHibernateTemplate()
		.find(
				"from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y'");
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		departmentList = getHibernateTemplate()
		.find(
				"from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y'");
		MasStoreItem firstItem = null;

		Criteria c = session.createCriteria(MasStoreItem.class).add(
				Restrictions.eq("Status", "y")).createAlias("Department", "d")
				.add(Restrictions.eq("d.Id", box.getInt("deptId"))).addOrder(
						Order.asc("Id"));
		c.setFirstResult(0);
		c.setMaxResults(5);

		List<MasStoreItem> masList = c.list();
		if (masList != null && masList.size() > 0) {
			firstItem = masList.get(0);
		}
		map.put("firstItem", firstItem);
		approvedByEmployeeList = getHibernateTemplate().find(
		"from jkt.hms.masters.business.MasEmployee ");
		map.put("departmentList", departmentList);
		map.put("fromShowDepartmentApproval", "true");
		map.put("approvedByEmployeeList", approvedByEmployeeList);
		return map;
	}

	public Map<String, Object> getCurrentYearMmfByItem(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> firstItemList = new ArrayList<MasStoreItem>();
		String pvms = null;
		String nomenclature = null;
		String departmentName = null;
		BigDecimal preQtymmf = new BigDecimal(0);
		BigDecimal qtymmf = new BigDecimal(0);
		BigDecimal currQtymmf = new BigDecimal(0);
		long storeItemId = 1;
		String remark = null;

		int id = 0;
		List objectCurrentYearList = new ArrayList();
		List objectPreviousYearList = new ArrayList();
		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;

		List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasStoreItem> masStoreItemList = new ArrayList<MasStoreItem>();
		List<Integer> objectList = new ArrayList<Integer>();

		List<StoreMmfDepartmentM> storeMmfDepartmentMList = new ArrayList<StoreMmfDepartmentM>();
		// added by shailesh

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			StoreMmfDepartmentT storeMmfDepartmentT1 = new StoreMmfDepartmentT();
			int currentYear = box.getInt(MMF_DEPARTMENT_DATE);

			int previousYear = currentYear - 1;
			String qry = "select count(*) from mas_store_item";
			String stringtotalIds = (String) (session.createSQLQuery(qry)
					.list()).get(0).toString();
			int totalIds = Integer.parseInt(stringtotalIds);

			departmentList = getHibernateTemplate()
			.find("from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y'");

			map.put("departmentList", departmentList);
			/*
			 * String qry="select * from mas_store_item where pvms_no='010105' ";
			 * List<MasStoreItem>
			 * storeItemsList=session.createSQLQuery(qry).list();
			 */
			// if(storeItemsList!=null&&storeItemsList.size()>0){

			int count = box.getInt("storeItemId");

			if (!box.getString("navigation").equals("")
					&& box.getString("navigation").equalsIgnoreCase("next")) {
				count++;
				for (int id1 = 1; id1 <= totalIds; id1++) {

					MasStoreItem firstItem = null;
					Criteria c = session.createCriteria(MasStoreItem.class)
					.createAlias("Department", "d")
					.add(Restrictions.eq("Id", count))
					.add(Restrictions.eq("Status", "y"))
					.add(Restrictions.eq("d.Id", box.getInt("deptId"))).addOrder(Order.asc("Id"));
					c.setFirstResult(0);
					c.setMaxResults(5);

					List<MasStoreItem> masList = c.list();
					if (masList != null && masList.size() > 0) {
						firstItem = masList.get(0);
					}
					if (firstItem != null) {
						map.put("firstItem", firstItem);
						box.put("pvmsNo", firstItem.getPvmsNo());
						break;
					} else {
						count++;
					}
				}
			}
			if (!box.getString("navigation").equals("")
					&& box.getString("navigation").equalsIgnoreCase("previous")) {
				count--;
				for (int id1 = 1; id1 <= totalIds; id1++) {

					MasStoreItem firstItem = null;
					Criteria c = session.createCriteria(MasStoreItem.class)
					.add(Restrictions.eq("Status", "y"))
					.createAlias("Department", "d")
					.add(Restrictions.eq("Id", count))
					.add(Restrictions.eq("d.Id", box.getInt("deptId")))
					.addOrder(Order.asc("Id"));
					c.setFirstResult(0);
					c.setMaxResults(5);

					List<MasStoreItem> masList = c.list();
					if (masList != null && masList.size() > 0) {
						firstItem = masList.get(0);
					}
					if (firstItem != null) {
						map.put("firstItem", firstItem);
						box.put("pvmsNo", firstItem.getPvmsNo());
						break;
					} else {
						count--;
					}
				}
			}
			if (!box.getString("fromUpdate").equals("")) {
				List<MasStoreItem> updateList = new ArrayList<MasStoreItem>();
				updateList = session.createCriteria(MasStoreItem.class).add(
						Restrictions.eq("PvmsNo", box.getString("pvmsNo")))
						.list();

				MasStoreItem firstItem = null;
				if (updateList != null & updateList.size() > 0) {
					firstItem = (MasStoreItem) getHibernateTemplate().load(
							MasStoreItem.class, updateList.get(0).getId());
					if (firstItem != null)
						map.put("firstItem", firstItem);
				}
			}
			if (box.getString("navigation").equals("")
					&& !box.getString("fromSearch").equalsIgnoreCase("true")
					&& box.getString("fromUpdate").equals("")) {

				MasStoreItem firstItem = null;
				Criteria c = session.createCriteria(MasStoreItem.class)
				.createAlias("Department", "d")
				.add(Restrictions.eq("Id", count))
				.add(Restrictions.eq("Status", "y"))
				.add(Restrictions.eq("d.Id", box.getInt("deptId")))
				.addOrder(Order.asc("Id"));
				c.setFirstResult(0);
				c.setMaxResults(5);

				List<MasStoreItem> masList = c.list();
				if (masList != null && masList.size() > 0) {
					firstItem = masList.get(0);
				}
				if (firstItem != null)
					map.put("firstItem", firstItem);
			}
			if (box.getString("navigation").equals("")
					&& box.getString("fromSearch").equalsIgnoreCase("true")) {

				box.put("pvmsNo", box.getString("pvmsNo"));
				MasStoreItem firstItem = null;
				Criteria c = session.createCriteria(MasStoreItem.class)
				.createAlias("Department", "d")
				.add(Restrictions.eq("Status", "y"))
				.add(Restrictions.eq("Id", count))
				.add(Restrictions.eq("d.Id", box.getInt("deptId")))
				.addOrder(Order.asc("Id"));
				c.setFirstResult(0);
				c.setMaxResults(5);

				List<MasStoreItem> masList = c.list();
				if (masList != null && masList.size() > 0) {
					firstItem = masList.get(0);
				}
				if (box.getString("flag").equalsIgnoreCase("true")) {
					String pvmsNo1 = box.getString("pvmsNo");
					if (!pvmsNo1.equalsIgnoreCase("")) {

						List<MasStoreItem> masStoreItemList1 = new ArrayList<MasStoreItem>();
						masStoreItemList1 = session.createCriteria(
								MasStoreItem.class)
								.add(Restrictions.eq("PvmsNo", pvmsNo1))
								.add(Restrictions.eq("Status", "y"))
								.createAlias("Department", "d")
								.add(Restrictions.eq("d.Id", box.getInt("deptId"))).list();
						if (masStoreItemList1 != null
								&& masStoreItemList1.size() > 0)
							firstItem = (MasStoreItem) getHibernateTemplate()
							.load(MasStoreItem.class,
									masStoreItemList1.get(0).getId());
					}
				}
				if (firstItem != null)
					map.put("firstItem", firstItem);
			}
			if (!box.getString("pvmsGroup").equals("")
					&& box.getString("pvmsGroup").equalsIgnoreCase("pvms_search")
					&& box.getString("navigation").equals("")
					&& !box.getString("fromUpdate").equals("fromUpdate")
					&& !box.getString("fromSearch").equalsIgnoreCase("true")
					&& box.getString("page").equals("")) {
				MasStoreItem firstItem = null;

				Criteria c = session.createCriteria(MasStoreItem.class)
				.createAlias("Department", "d")
				.add(Restrictions.eq("Status", "y"))
				.add(Restrictions.eq("Id", count))
				.add(Restrictions.eq("d.Id", box.getInt("deptId")))
				.addOrder(Order.asc("Id"));
				c.setFirstResult(0);
				c.setMaxResults(5);

				List<MasStoreItem> masList = c.list();
				if (masList != null && masList.size() > 0) {
					firstItem = masList.get(0);
					box.put("pvmsNo", firstItem.getPvmsNo());
				}

				box.put("pvms_search", "pvms_search");
				if (firstItem != null)
					map.put("firstItem", firstItem);
			}

			if (!box.getString("pvmsGroup").equals("")
					&& box.getString("pvmsGroup").equalsIgnoreCase("niv_search")
					&& box.getString("navigation").equals("")
					&& !box.getString("fromUpdate").equals("fromUpdate")
					&& !box.getString("fromSearch").equalsIgnoreCase("true")) {
				MasStoreItem firstItem = null;

				Criteria c = session.createCriteria(MasStoreItem.class)
				.createAlias("Department", "d")
				.add(Restrictions.eq("Status", "y"))
				.add(Restrictions.eq("Id", count))
				.add(Restrictions.eq("d.Id", box.getInt("deptId")))
				.addOrder(Order.asc("Id"));
				c.setFirstResult(0);
				c.setMaxResults(5);

				List<MasStoreItem> masList = c.list();
				if (masList != null && masList.size() > 0) {
					firstItem = masList.get(0);
					box.put("pvmsNo", firstItem.getPvmsNo());
				}

				box.put("pvms_search", "niv_search");
				if (firstItem != null)
					map.put("firstItem", firstItem);
			}
			if (!box.getString("pvmsGroup").equals("")
					&& box.getString("pvmsGroup")
					.equalsIgnoreCase("niv_search")
					&& box.getString("navigation").equals("")
					&& box.getString("fromUpdate").equals("")
					&& box.getString("fromSearch").equalsIgnoreCase("")
					&& box.getString("page").equals("")) {
				MasStoreItem firstItem = null;
				firstItemList = session.createCriteria(MasStoreItem.class)
				.createAlias("ItemType", "m").add(
						Restrictions.eq("m.Id", 2)).createAlias(
								"Department", "d").add(
										Restrictions.eq("d.Id", box.getInt("deptId")))
										.list();
				if (firstItemList != null && firstItemList.size() > 0) {
					firstItem = firstItemList.get(0);
					box.put("pvmsNo", firstItem.getPvmsNo());
					map.put("firstItem", firstItem);
				}
				box.put("niv_search", "niv_search");
			}
			int currYearMmfSum = 0;
			int preYearMmfSum = 0;
			String currYearMmfSumQuery = "SELECT sum(curr_year_mmf) FROM store_mmf_department_t t,store_mmf_department_m m,mas_store_item s where t.store_mmf_department_m_id=m.id and t.item_id=s.item_id and m.mmf_for_the_year='"
				+ box.getInt(MMF_DEPARTMENT_DATE)
				+ "'"
				+ " and s.pvms_no='"
				+ box.getString("pvmsNo")
				+ "' and s.status = 'y' and m.mmf_store_type='"
				+ box.getString("storeType") + "'";
			objectCurrentYearList = (List) session.createSQLQuery(
					currYearMmfSumQuery).list();
			if (objectCurrentYearList != null
					&& objectCurrentYearList.size() > 0) {
				if (objectCurrentYearList.get(0) != null)
					map.put("currYearMmfSum", new BigDecimal(""
							+ objectCurrentYearList.get(0)));
			} else {
				map.put("currYearMmfSum", new BigDecimal(0));

			}
			int previousYear1 = box.getInt(MMF_DEPARTMENT_DATE) - 1;
			String preYearMmfSumQuery = "SELECT sum(curr_year_mmf) FROM store_mmf_department_t t,store_mmf_department_m m,mas_store_item s where t.store_mmf_department_m_id=m.id and t.item_id=s.item_id and m.mmf_for_the_year='"
				+ previousYear1
				+ "'"
				+ " and s.pvms_no='"
				+ box.getString("pvmsNo")
				+ "' and s.status='y' and m.mmf_store_type='"
				+ box.getString("storeType") + "'";
			objectPreviousYearList = session.createSQLQuery(preYearMmfSumQuery)
			.list();
			if (objectPreviousYearList != null
					&& objectPreviousYearList.size() > 0) {
				if (objectPreviousYearList.get(0) != null)
					map.put("preYearMmfSum", new BigDecimal(""
							+ objectPreviousYearList.get(0)));
			} else {
				map.put("preYearMmfSum", new BigDecimal(0));
			}
			//
			/*int dateOfMonth, month1, year1;
			String date = "";
			Calendar calendar = Calendar.getInstance();
			StringBuffer finstart = new StringBuffer();
			StringBuffer finend = new StringBuffer();
			StringBuffer finend1 = new StringBuffer();
			month1 = calendar.get(Calendar.MONTH) + 1;
			if(month1 > 0 && month1 < 4){
				year1 = calendar.get(Calendar.YEAR) - 1;
			}else{
				year1 = calendar.get(Calendar.YEAR);
			}
			finstart.append(year1);	finstart.append("/");	finstart.append("04");
			finstart.append("/"); finstart.append("01");

			Map<String,Object> utilMap = new HashMap<String,Object>();
			utilMap = (Map)HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			date = (String)utilMap.get("currentDate");
			SimpleDateFormat dateFormatterDDMMYYYY = new SimpleDateFormat("dd-MM-yyyy");
			dateFormatterDDMMYYYY.format(new Date(date));
			Calendar cal = Calendar.getInstance();
			cal.setTime( new Date());
			int finendmonth = cal.get(Calendar.MONTH);
			int finendyear = 0;
			if(finendmonth < 2){
				finendyear = (cal.get(Calendar.YEAR) - 1);
			}else {
				finendyear = cal.get(Calendar.YEAR);
			}
			finend.append(finendyear); 	finend.append("/");
			if(finendmonth < 2){
				finend.append((cal.get(Calendar.MONTH) - 2) + 13);
			} else {
				finend.append((cal.get(Calendar.MONTH) - 2) + 1);
			}
			finend.append("/"); finend.append("01");
            int diffmonth = 0;
			GregorianCalendar cal2 = new GregorianCalendar();
			cal2.setTime(new Date(finend.toString()));
			finend1.append(finendyear);
			finend1.append("/");
			if(finendmonth < 2){
				if(((cal.get(Calendar.MONTH) - 2) + 13) < 10){
					finend1.append("0");
				}
				finend1.append((cal.get(Calendar.MONTH) - 2) + 13);
				diffmonth = (cal.get(Calendar.MONTH) - 2) + 13;
			} else {
				if((cal.get(Calendar.MONTH) - 1) < 10){
					finend1.append("0");
				}
				finend1.append(cal.get(Calendar.MONTH) - 1);
				diffmonth = cal.get(Calendar.MONTH) - 1;
			}
			finend1.append("/"); finend1.append(cal2.getActualMaximum(Calendar.DAY_OF_MONTH));

			StringBuffer finstart2 = new StringBuffer();
			StringBuffer finend2 = new StringBuffer();
			if(finendmonth < 1){
				finendyear = (cal.get(Calendar.YEAR) - 1);
			}else {
				finendyear = cal.get(Calendar.YEAR);
			}
			finstart2.append(finendyear); finstart2.append("/");
			if(finendmonth < 1){
				finstart2.append((cal.get(Calendar.MONTH) - 2) + 12 +2);
			} else {
				if(cal.get(Calendar.MONTH) < 10){
					finstart2.append("0");
				}
				finstart2.append(cal.get(Calendar.MONTH) - 2 + 2);
			}
			finstart2.append("/"); 	finstart2.append("01");
			Calendar cal3 = Calendar.getInstance();
			cal3.setTime(new Date());
			finend2.append(cal3.get(Calendar.YEAR));
			finend2.append("/");
			if((cal3.get(Calendar.MONTH) + 1) < 10){
				finend2.append("0");
			}
			finend2.append(cal3.get(Calendar.MONTH) + 1); finend2.append("/");
			if(cal3.get(Calendar.DATE) < 10)
				finend2.append("0"+cal3.get(Calendar.DATE));
			else
				finend2.append(cal3.get(Calendar.DATE));*/

			Calendar ca1 = Calendar.getInstance();
			int day = ca1.get(Calendar.DATE);
			int month = ca1.get(Calendar.MONTH)+1;
			int year = ca1.get(Calendar.YEAR);
			ca1.set(year,month,day);
			String finend2 = new String();
			finend2=year+"-"+month+"-"+day;
			ca1.add(Calendar.MONTH, -10);
			int month_ten=ca1.get(Calendar.MONTH);
			int year_ten=ca1.get(Calendar.YEAR);
			int day_ten=ca1.get(Calendar.DATE);
			String finend3 = new String();
			finend3=year_ten+"-"+month_ten+"-"+day_ten;
			//			String no_of_mon="SELECT period_diff( date_format( '"+finend2+"' , '%Y%m' ) , date_format( '"+finend3+"', '%Y%m' ) ) as no";
			//			Query noof_mon = session.createSQLQuery(no_of_mon);
			//			for(Iterator it=noof_mon.iterate();it.hasNext();){
			//			       Object[] row = (Object[]) it.next();
			int condeptId = 0;
			if(box.getString("storeType").equals("e")){
				condeptId = 24;
			}else {
				condeptId = 38;
			}

			String avgConsum ="select  round((sum(t.qty_issued)/10),2) from store_issue_t t inner join store_issue_m m " +
			"on t.issue_m_id = m.id " +
			"and m.issue_date >= '"+finend3+"' and m.issue_date <= '"+finend2+"' and t.qty_issued !=0 " +
			"and m.department_id='"+condeptId+"' inner join mas_store_item msi on msi.item_id = t.item_id and msi.pvms_no='"+box.getString("pvmsNo")+"'";
			List avgConsumObjectList = (List) session.createSQLQuery(avgConsum).list();
			String finend4 = new String();
			String finend5 = new String();
			BigDecimal avgConsump = new BigDecimal("0");
			finend4=finend3;
			finend5=finend2;
			if(avgConsumObjectList.size() > 0 ){
				for (Iterator iterator = avgConsumObjectList.iterator(); iterator.hasNext();) {
					avgConsump = (BigDecimal) iterator.next();
				}

			}
			map.put("avgConsump",avgConsump);
			map.put("finend3", finend4);
			map.put("finend2", finend5);
			storeMmfDepartmentTList = session.createCriteria(
					StoreMmfDepartmentT.class).createAlias("StoreMmfDepartmentM", "m")
					.add(Restrictions.eq("m.MmfForTheYear", box.getInt(MMF_DEPARTMENT_DATE)))
					.add(Restrictions.eq("m.MmfStoreType", box.get("storeType")))
					.createAlias("Item", "i").add(Restrictions.eq("i.PvmsNo",
							box.getString("pvmsNo"))).addOrder(Order.asc("m.StoreWardDept")).list();

			// code for inserting new transactions which are present in previous
			// year but not in this year for particular item

			List<StoreMmfDepartmentT> storeMmfDepartmentTListForPreviousYear = new ArrayList<StoreMmfDepartmentT>();

			storeMmfDepartmentTListForPreviousYear = session.createCriteria(
					StoreMmfDepartmentT.class).createAlias("StoreMmfDepartmentM", "m")
					.add(Restrictions.eq("m.MmfForTheYear",	box.getInt(MMF_DEPARTMENT_DATE) - 1))
					.add(Restrictions.eq("m.MmfStoreType", box.get("storeType")))
					.createAlias("Item", "i").add(Restrictions.eq("i.PvmsNo", box.getString("pvmsNo")))
					.addOrder(Order.asc("m.StoreWardDept")).list();

			List<MasStoreItem> pvmsNolist = new ArrayList<MasStoreItem>();
			pvmsNolist = session.createCriteria(MasStoreItem.class).add(
					Restrictions.eq("Status", "y")).add(Restrictions.eq("PvmsNo", box.get("pvmsNo"))).list();
			List<StoreMmfDepartmentT> newList = new ArrayList<StoreMmfDepartmentT>();
			List<StoreMmfDepartmentT> existList = new ArrayList<StoreMmfDepartmentT>();
			if (storeMmfDepartmentTListForPreviousYear != null
					&& storeMmfDepartmentTListForPreviousYear.size() > 0) { // int
				// buttonCount=1;
				for (StoreMmfDepartmentT preYearStoreMmfDepartmentT : storeMmfDepartmentTListForPreviousYear) {
					boolean check = false;

					if(storeMmfDepartmentTList != null && storeMmfDepartmentTList.size() > 0){
						for (StoreMmfDepartmentT storeMmfDepartmentT : storeMmfDepartmentTList) {
							if (storeMmfDepartmentT.getStoreMmfDepartmentM()
									.getStoreWardDept().getId() == preYearStoreMmfDepartmentT
									.getStoreMmfDepartmentM().getStoreWardDept()
									.getId()) {
								check = true;
								// newList.add(preYearStoreMmfDepartmentT);
								// storeMmfDepartmentT.setPreYearMmf(preYearStoreMmfDepartmentT.getCurrYearMmf());
							}
						}
					}

					/*if (!check) {
						List<StoreMmfDepartmentM> serchingMasterIdListForParticularDepartment = new ArrayList<StoreMmfDepartmentM>();
						// //System.out.println("in cheack for the
						// items"+preYearStoreMmfDepartmentT.getStoreMmfDepartmentM().getStoreWardDept().getDepartmentName());
						serchingMasterIdListForParticularDepartment = session
						.createCriteria(StoreMmfDepartmentM.class)
						.createAlias("StoreWardDept", "s")
						.add(Restrictions.eq("s.Id", preYearStoreMmfDepartmentT.getStoreMmfDepartmentM()
								.getStoreWardDept().getId()))
								.add(Restrictions.eq("MmfForTheYear",box.getInt(MMF_DEPARTMENT_DATE)))
								.add(Restrictions.eq("MmfStoreType", box.getString("storeType"))).list();

						if (serchingMasterIdListForParticularDepartment == null
								|| serchingMasterIdListForParticularDepartment
								.size() == 0) {
							StoreMmfDepartmentM storeMmfDepartmentM = new StoreMmfDepartmentM();
							String mmfNo = "01/"
								+ box.getInt(MMF_DEPARTMENT_DATE);
							storeMmfDepartmentM.setDocNo(mmfNo);
							storeMmfDepartmentM.setMmfForTheYear(box.getInt(MMF_DEPARTMENT_DATE));
							storeMmfDepartmentM.setMmfStoreType(box.getString("storeType"));
							storeMmfDepartmentM.setLastChgBy("admin");

							storeMmfDepartmentM.setLastChgDate(HMSUtil
									.convertStringTypeDateToDateType(box.get(CHANGED_DATE)));
							storeMmfDepartmentM.setLastChgTime(box.get(CHANGED_TIME));
							storeMmfDepartmentM.setStatus("p");
							MasHospital masHospital = new MasHospital();
							masHospital.setId(1);
							MasDepartment masDepartment = new MasDepartment();
							masDepartment.setId(preYearStoreMmfDepartmentT
									.getStoreMmfDepartmentM().getStoreWardDept().getId());
							storeMmfDepartmentM.setStoreWardDept(masDepartment);
							storeMmfDepartmentM.setHospital(masHospital);
							hbt.save(storeMmfDepartmentM);
							hbt.refresh(storeMmfDepartmentM);
						}

						serchingMasterIdListForParticularDepartment = session
						.createCriteria(StoreMmfDepartmentM.class)
						.createAlias("StoreWardDept", "s")
						.add(Restrictions.eq("s.Id",preYearStoreMmfDepartmentT
								.getStoreMmfDepartmentM().getStoreWardDept().getId()))
								.add(Restrictions.eq("MmfForTheYear", box.getInt(MMF_DEPARTMENT_DATE)))
								.add(Restrictions.eq("MmfStoreType", box.getString("storeType"))).list();

						// //System.out.println("in check for department
						// name"+preYearStoreMmfDepartmentT.getStoreMmfDepartmentM().getStoreWardDept().getDepartmentName());
						StoreMmfDepartmentT storeMmfDepartmentT = new StoreMmfDepartmentT();
						storeMmfDepartmentT.setPreYearMmf(preYearStoreMmfDepartmentT.getCurrYearMmf());
						storeMmfDepartmentT.setCurrYearMmf(new BigDecimal(0));
						storeMmfDepartmentT.setMmfInQty(new BigDecimal(0));
						if(pvmsNolist != null){
						MasStoreItem item = new MasStoreItem();
						item.setId(pvmsNolist.get(0).getId());
						storeMmfDepartmentT.setItem(item);
						}
						StoreMmfDepartmentM storeMmfDepartmentM = new StoreMmfDepartmentM();
						storeMmfDepartmentM.setId(serchingMasterIdListForParticularDepartment.get(0).getId());
						storeMmfDepartmentT.setStoreMmfDepartmentM(storeMmfDepartmentM);
						if (storeMmfDepartmentTList.size() > 0) {
						 storeMmfDepartmentT.setSrNo(storeMmfDepartmentTList.get(storeMmfDepartmentTList.size() - 1)
									.getSrNo());
						} else {
							storeMmfDepartmentT.setSrNo(1);
						}
						hbt.save(storeMmfDepartmentT);
						hbt.refresh(storeMmfDepartmentT);
					}*/
				}
			}

			storeMmfDepartmentTList = session.createCriteria(
					StoreMmfDepartmentT.class).createAlias("StoreMmfDepartmentM", "m")
					.add(Restrictions.eq("m.MmfForTheYear", box.getInt(MMF_DEPARTMENT_DATE)))
					.add(Restrictions.eq("m.MmfStoreType", box.get("storeType")))
					.createAlias("Item", "i").add(Restrictions.eq("i.PvmsNo", box.getString("pvmsNo")))
					.add(Restrictions.eq("i.Status", "y"))
					.addOrder(Order.asc("m.StoreWardDept")).list();

			List objectList1 = new ArrayList();
			for(StoreMmfDepartmentT storeMmfDepartmentT : storeMmfDepartmentTList){
				objectList1.add(storeMmfDepartmentT.getStoreMmfDepartmentM().getStoreWardDept().getId());
			}

			if(objectList1.size() > 0){
				newList = session.createCriteria(
						StoreMmfDepartmentT.class).createAlias("StoreMmfDepartmentM", "m")
						.add(Restrictions.eq("m.MmfForTheYear",	box.getInt(MMF_DEPARTMENT_DATE) - 1))
						.add(Restrictions.eq("m.MmfStoreType", box.get("storeType")))
						.createAlias("Item", "i").add(Restrictions.eq("i.PvmsNo", box.getString("pvmsNo")))
						.add(Restrictions.not(Restrictions.in("m.StoreWardDept.Id",objectList1)))
						.addOrder(Order.asc("m.StoreWardDept")).list();
			}else{
				newList = session.createCriteria(
						StoreMmfDepartmentT.class).createAlias("StoreMmfDepartmentM", "m")
						.add(Restrictions.eq("m.MmfForTheYear",	box.getInt(MMF_DEPARTMENT_DATE) - 1))
						.add(Restrictions.eq("m.MmfStoreType", box.get("storeType")))
						.createAlias("Item", "i").add(Restrictions.eq("i.PvmsNo", box.getString("pvmsNo")))
						.addOrder(Order.asc("m.StoreWardDept")).list();
			}


			map.put("currentYear", currentYear);
			map.put("previousYear", previousYear);
			map.put("departmentList", departmentList);
			int itemId = 0;
			map.put("storeMmfDepartmentMList", storeMmfDepartmentMList);

			if (storeMmfDepartmentTList != null
					&& storeMmfDepartmentTList.size() > 0) {
				for (StoreMmfDepartmentT storeMmfDepartmentT : storeMmfDepartmentTList) {

					/*
					 * String qry = "select item_id from mas_store_item where
					 * pvms_no=" + box.get("pvmsNo");
					 * //System.out.println("box.get(pvmsNo)" +
					 * box.get("pvmsNo")); objectList = (List)
					 * session.createSQLQuery(qry).list(); if (objectList.get(0) !=
					 * null && objectList.size() > 0) {
					 *
					 * itemId = objectList.get(0); //System.out.println("1 itemId" +
					 * itemId); }
					 */
					hData = new HashMap<String, Object>();
					/*
					 * storeMmfDepartmentTList = hbt .find("from
					 * jkt.hms.masters.business.StoreMmfDepartmentT as inp where
					 * inp.StoreMmfDepartmentM=" + storeMmfDepartmentM.getId() + "
					 * and inp.Item=" + itemId); if (storeMmfDepartmentTList !=
					 * null && storeMmfDepartmentTList.size() > 0) {
					 */
					try {
						id = storeMmfDepartmentT.getId();
						hData.put("id", id);
					} catch (Exception e) {
						id = 0;
					}
					try {
						preQtymmf = storeMmfDepartmentT.getPreYearMmf();
						if (preQtymmf == null) {
							preQtymmf = new BigDecimal(0);
						}
						hData.put("preQtymmf", preQtymmf);
					} catch (Exception e) {
						preQtymmf = new BigDecimal(0);
					}
					try {
						currQtymmf = storeMmfDepartmentT.getCurrYearMmf();
						if (currQtymmf == null) {
							currQtymmf = new BigDecimal(0);
						}
						hData.put("currQtymmf", currQtymmf);
					} catch (Exception e) {
						currQtymmf = new BigDecimal(0);
					}
					try {
						qtymmf = storeMmfDepartmentT.getMmfInQty();
						if (qtymmf == null) {
							qtymmf = new BigDecimal(0);
						}
						hData.put("qtymmf", qtymmf);
					} catch (Exception e) {
						qtymmf = new BigDecimal(0);
					}
					try {
						remark = storeMmfDepartmentT.getRemarks();
						if (remark == null) {
							remark = "";
						}
						hData.put("remark", remark);
					} catch (Exception e) {
						remark = "";
					}
					try {
						departmentName = storeMmfDepartmentT
						.getStoreMmfDepartmentM().getStoreWardDept()
						.getDepartmentName();

						if (departmentName == null) {
							departmentName = "";
						}
						hData.put("departmentName", departmentName);
					} catch (Exception e) {
						departmentName = "";
					}
					vResult.add(hData);
				}
			}
			if(newList != null && newList.size() > 0){
				for(StoreMmfDepartmentT storeMmfDepartmentT :newList){
					hData = new HashMap<String, Object>();
					try {
						id = storeMmfDepartmentT.getId();
						hData.put("id", id);
					} catch (Exception e) {
						id = 0;
					}
					try {
						preQtymmf = storeMmfDepartmentT.getCurrYearMmf();
						if (preQtymmf == null) {
							preQtymmf = new BigDecimal(0);
						}
						hData.put("preQtymmf", preQtymmf);
					} catch (Exception e) {
						preQtymmf = new BigDecimal(0);
					}
					try {
						hData.put("currQtymmf",new BigDecimal(0));
					} catch (Exception e) {
						currQtymmf = new BigDecimal(0);
					}
					try {
						hData.put("qtymmf", "NR");
					} catch (Exception e) {
						qtymmf = new BigDecimal(0);
					}
					try {
						hData.put("remark", "");
					} catch (Exception e) {
						remark = "";
					}
					try {
						departmentName = storeMmfDepartmentT.getStoreMmfDepartmentM()
						.getStoreWardDept().getDepartmentName();
						if (departmentName == null) {
							departmentName = "";
						}
						hData.put("departmentName", departmentName);
					} catch (Exception e) {
						departmentName = "";
					}
					vResult.add(hData);
				}
			}
		}
		catch (HibernateException e) {
			e.printStackTrace();
		}
		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}
		try {
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {

			List<StoreMmfDepartmentT> alreadyUpdatedTList = new ArrayList<StoreMmfDepartmentT>();
			HibernateTemplate hbt = getHibernateTemplate();

			if (!box.getString("pvmsNo").equals("")
					|| (map.get("firstItem") != null)) {
				String pvms2 = box.getString("pvmsNo");
				/*
				 * if((map.get("firstItem")!=null)){ //System.out.println("finalk
				 * chaeck"+pvms2);
				 * pvms2=((MasStoreItem)map.get("firstItem")).getPvmsNo(); }
				 */
				alreadyUpdatedTList = session.createCriteria(
						StoreMmfDepartmentT.class).createAlias("StoreMmfDepartmentM", "m")
						.add(Restrictions.eq("m.MmfForTheYear", box.getInt(MMF_DEPARTMENT_DATE)))
						.add(Restrictions.eq("m.MmfStoreType",
								box.getString("storeType"))).createAlias("Item","i")
								.add(Restrictions.eq("i.PvmsNo", pvms2))
								.add(Restrictions.eq("i.Status", "y"))
								.add(Restrictions.eq("ApprovedStatus", "p")).list();

				if (alreadyUpdatedTList != null
						&& alreadyUpdatedTList.size() > 0) {
					map.put("tListForDispensary", "true");
				} else {
					map.put("tListForDispensary", "false");
				}
			}
			List<StoreMmfItemRemarks> storeMmfItemRemarksList = new ArrayList<StoreMmfItemRemarks>();
			// showing remarks for particular pvms item
			storeMmfItemRemarksList = session.createCriteria(
					StoreMmfItemRemarks.class).createAlias("Item", "i").add(
							Restrictions.eq("i.PvmsNo", box.getString("pvmsNo"))).add(
									Restrictions.eq("i.Status", "y")).add(
											Restrictions.eq("MmfForTheYear", box
													.getInt(MMF_DEPARTMENT_DATE)))
													.add(Restrictions.eq("MmfStoreType", box
															.getString("storeType"))).list();

			if (storeMmfItemRemarksList != null
					&& storeMmfItemRemarksList.size() > 0) {
				map.put("updateRemarksForItem", storeMmfItemRemarksList.get(0)
						.getRemarks());
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("pagedArray", pagedArray);
		map.put("pvmsNo", box.get("pvmsNo"));
		return map;

	}

	public Map<String, Object> updateGridItemsInMmfDepartmentApproval(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
		List<StoreMmfDepartmentT> storeMmfDepartmentTListForDispensary = new ArrayList<StoreMmfDepartmentT>();
		StoreMmfDepartmentT storeMmfDepartmentT = null;
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		StoreMmfDepartmentM storeMmfDepartmentM = new StoreMmfDepartmentM();
		BigDecimal sumValueForDispensary = new BigDecimal(0);
		String lastChgBy = "";
		Date lastChgDate = null;
		String lastChgTime = "";
		try {
			departmentList = getHibernateTemplate()
			.find("from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y'");

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			Vector srno = box.getVector("srno");
			Vector currQtymmf = box.getVector("currQtymmf");
			Vector items = box.getVector("id");
			Vector remark = box.getVector("remark");
			storeMmfDepartmentTList = session.createCriteria(StoreMmfDepartmentT.class)
			.createAlias("StoreMmfDepartmentM", "m")
			.add(Restrictions.eq("m.MmfForTheYear", box.getInt(MMF_DEPARTMENT_DATE)))
			.add(Restrictions.eq("m.MmfStoreType", box.get("storeType")))
			.createAlias("Item", "i").add(Restrictions.eq("i.PvmsNo", box.getString("pvmsNo"))).list();
			String obj = null;
			for (int i = 0; i < srno.size(); i++) {
				int itemId = Integer.parseInt(items.get(i).toString());
				StoreMmfDepartmentT tObj = (StoreMmfDepartmentT) hbt.load(
						StoreMmfDepartmentT.class, itemId);
				tObj.setCurrYearMmf(new BigDecimal(currQtymmf.get(i).toString()));
				tObj.setRemarks(remark.get(i).toString());
				tObj.getStoreMmfDepartmentM().setStatus("p");
				tObj.setApprovedStatus("p");
				/*
				 * if(!box.getString("updateRemarksForItem").equals("")){ List<StoreMmfDepartmentT>listForUpdationOfRemarks=new
				 * ArrayList<StoreMmfDepartmentT>();
				 *  }
				 */
				hbt.update(tObj);
				hbt.refresh(tObj);
			}
			// code for inserting 25% mmf of total mmf to dispensary misc
			// department
			List<StoreMmfDepartmentM> mListForDispensary = new ArrayList<StoreMmfDepartmentM>();
			List<StoreMmfDepartmentT> tListForDispensary = new ArrayList<StoreMmfDepartmentT>();
			List<StoreMmfDepartmentT> tListForDispensary1 = new ArrayList<StoreMmfDepartmentT>();
			mListForDispensary = session.createCriteria(
					StoreMmfDepartmentM.class)
					.add(Restrictions.eq("MmfForTheYear", box.getInt(MMF_DEPARTMENT_DATE)))
					.createAlias("StoreWardDept", "s").add(Restrictions.eq("s.Id", 55))
					.add(Restrictions.eq("MmfStoreType", "e")).list();

			if (mListForDispensary == null || mListForDispensary.size() == 0) {

				String mmfNo = "01/" + box.getInt(MMF_DEPARTMENT_DATE);
				storeMmfDepartmentM.setDocNo(mmfNo);
				storeMmfDepartmentM.setMmfForTheYear(box.getInt(MMF_DEPARTMENT_DATE));
				storeMmfDepartmentM.setMmfStoreType("e");
				storeMmfDepartmentM.setLastChgBy("admin");
				storeMmfDepartmentM.setLastChgDate(HMSUtil
						.convertStringTypeDateToDateType(box.get(CHANGED_DATE)));
				storeMmfDepartmentM.setLastChgTime(box.get(CHANGED_TIME));
				storeMmfDepartmentM.setStatus("p");
				MasHospital masHospital = new MasHospital();
				masHospital.setId(1);
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(55);
				storeMmfDepartmentM.setStoreWardDept(masDepartment);
				storeMmfDepartmentM.setHospital(masHospital);
				hbt.save(storeMmfDepartmentM);
				hbt.refresh(storeMmfDepartmentM);
			}

			List<StoreMmfDepartmentM> newMListForDispensary = new ArrayList<StoreMmfDepartmentM>();
			newMListForDispensary = session.createCriteria(
					StoreMmfDepartmentM.class)
					.add(Restrictions.eq("MmfForTheYear", box.getInt(MMF_DEPARTMENT_DATE)))
					.createAlias("StoreWardDept", "s").add(Restrictions.eq("s.Id", 55))
					.add(Restrictions.eq("MmfStoreType", "e")).list();
			// List
			// objectList=session.createSQLQuery(queryForAllPvmsItems).list();
			// List<MasStoreItem> allPvmsList=new ArrayList<MasStoreItem>();
			/*
			 * for (Iterator iterator = objectList.iterator();
			 * iterator.hasNext();) { MasStoreItem masStoreItem=new
			 * MasStoreItem(); Object[] object = (Object[]) iterator.next();
			 * //int srNo = (Integer)object[0];
			 * masStoreItem.setId((Integer)object[0]) ;
			 * masStoreItem.setPvmsNo((String)object[1]);
			 * masStoreItem.setNomenclature((String)object[3]);
			 * allPvmsList.add(masStoreItem); }
			 */
			int count = 1;
			/*
			 * for(MasStoreItem ms:allPvmsList) {
			 */
			String sumOfMMFForSinglePvmsId = "select sum(curr_year_mmf) from store_mmf_department_t t "
				+ "left outer join store_mmf_department_m m "
				+ " on t.store_mmf_department_m_id=m.id left outer join mas_store_item i on i.item_id=t.item_id "
				+ " where i.pvms_no='"
				+ box.getString("pvmsNo")
				+ "' and m.mmf_for_the_year='"
				+ box.getInt(MMF_DEPARTMENT_DATE)
				+ "' and m.mmf_store_type='"
				+ box.getString("storeType")
				+ "'  and m.store_ward_dept!=55 ";

			List objectList1 = new ArrayList();
			objectList1 = session.createSQLQuery(sumOfMMFForSinglePvmsId).list();

			if (objectList1 != null && objectList1.size() > 0) {
				if (objectList1.get(0) != null) {
					sumValueForDispensary = new BigDecimal(
							Double.parseDouble((objectList1.get(0).toString())) / (4.0));
				}
			}
			tListForDispensary = session.createCriteria(
					StoreMmfDepartmentT.class).createAlias("StoreMmfDepartmentM", "m")
					.add(Restrictions.eq("m.MmfForTheYear", box.getInt(MMF_DEPARTMENT_DATE)))
					.add(Restrictions.eq("m.StoreWardDept.Id", 55))
					.add(Restrictions.eq("m.MmfStoreType", "e"))
					.createAlias("Item","i")
					.add(Restrictions.eq("i.PvmsNo", box.getString("pvmsNo"))).list();

			if (tListForDispensary != null
					&& tListForDispensary.size() > 0
					&& !box.getString("UpdateWithoutBuffer").equals(
					"UpdateWithoutBuffer")) {
				if (tListForDispensary.get(0).getMmfInQty() == new BigDecimal(0.00)
				|| ("0.00").equals(tListForDispensary.get(0).getMmfInQty().toString())) {
					StoreMmfDepartmentT oldStoreMmfDepartmentT = new StoreMmfDepartmentT();
					oldStoreMmfDepartmentT = tListForDispensary.get(0);
					oldStoreMmfDepartmentT.setCurrYearMmf(sumValueForDispensary);
					oldStoreMmfDepartmentT.setMmfInQty(sumValueForDispensary);
					hbt.update(oldStoreMmfDepartmentT);
					hbt.refresh(oldStoreMmfDepartmentT);
				}
			}
			StoreMmfItemRemarks storeMmfItemRemarks = new StoreMmfItemRemarks();
			if (objectList1 != null && objectList1.size() > 0) {
				if (objectList1.get(0) != null) {
					tListForDispensary1 = session.createCriteria(
							StoreMmfDepartmentT.class).createAlias("StoreMmfDepartmentM", "m")
							.add(Restrictions.eq("m.MmfForTheYear", box.getInt(MMF_DEPARTMENT_DATE) - 1))
							.add(Restrictions.eq("m.StoreWardDept.Id", 55))
							.add(Restrictions.eq("m.MmfStoreType", "e")).createAlias("Item", "i")
							.add(Restrictions.eq("i.PvmsNo", box.getString("pvmsNo"))).list();
					if (tListForDispensary == null || tListForDispensary.size() == 0) {
						StoreMmfDepartmentT newStoreMmfDepartmentT = new StoreMmfDepartmentT();
						StoreMmfDepartmentM storeMmfDepartmentM1 = new StoreMmfDepartmentM();
						storeMmfDepartmentM1.setId(newMListForDispensary.get(0).getId());
						newStoreMmfDepartmentT.setStoreMmfDepartmentM(storeMmfDepartmentM1);
						newStoreMmfDepartmentT.setCurrYearMmf(sumValueForDispensary);
						newStoreMmfDepartmentT.setMmfInQty(sumValueForDispensary);
						newStoreMmfDepartmentT.setApprovedStatus("p");
						if (tListForDispensary1 != null
								&& tListForDispensary1.size() > 0) {
							if (tListForDispensary1.get(0).getCurrYearMmf() != null) {
								newStoreMmfDepartmentT.setPreYearMmf(tListForDispensary1.get(0).getCurrYearMmf());
							} else
								newStoreMmfDepartmentT.setPreYearMmf(new BigDecimal(0));
						} else {
							newStoreMmfDepartmentT.setPreYearMmf(new BigDecimal(0));
						}
						newStoreMmfDepartmentT.setSrNo(count);
						count++;
						MasStoreItem masStoreItem = new MasStoreItem();
						List<MasStoreItem> pvmsCorrespondingIdList = session.createCriteria(MasStoreItem.class).add(
								Restrictions.eq("Status", "y"))
								.add(Restrictions.eq("PvmsNo", box.getString("pvmsNo"))).list();
						if (pvmsCorrespondingIdList != null
								&& pvmsCorrespondingIdList.size() > 0) {
							masStoreItem.setId(pvmsCorrespondingIdList.get(0).getId());
						}
						newStoreMmfDepartmentT.setItem(masStoreItem);
						if (!box.getString("UpdateWithoutBuffer").equals("UpdateWithoutBuffer")) {
							hbt.save(newStoreMmfDepartmentT);
							hbt.refresh(newStoreMmfDepartmentT);
						}
					}
				}

				// updating last chgby and lastchgdate and last chg time
				List<StoreMmfDepartmentT> storeMmfDepartmentTList3 = new ArrayList<StoreMmfDepartmentT>();
				storeMmfDepartmentTList3 = session.createCriteria(
						StoreMmfDepartmentT.class).createAlias("StoreMmfDepartmentM", "m")
						.add(Restrictions.eq("m.MmfForTheYear", box.getInt(MMF_DEPARTMENT_DATE)))
						.add(Restrictions.eq("m.MmfStoreType", box.get("storeType")))
						.createAlias("Item","i")
						.add(Restrictions.eq("i.PvmsNo", box.getString("pvmsNo")))
						.addOrder(Order.asc("m.StoreWardDept")).list();
				for (StoreMmfDepartmentT storeMmfDepartmentT3 : storeMmfDepartmentTList3) {
					StoreMmfDepartmentT t1 = storeMmfDepartmentT3;
					t1.setLastChgBy(box.getString("userName"));
					t1.setLastChgTime((String) HMSUtil.getCurrentDateAndTime().get("currentTime"));
					t1.setLastChgDate(HMSUtil.convertStringTypeDateToDateType((String) HMSUtil
							.getCurrentDateAndTime().get("currentDate")));
					hbt.update(t1);
					hbt.refresh(t1);

				}
				// saving Remarks for the pvms item in store_mmf_item_remarks

				List<MasStoreItem> pvmsCorrespondingIdList = session
				.createCriteria(MasStoreItem.class)
				.add(Restrictions.eq("PvmsNo", box.getString("pvmsNo"))).list();

				List<StoreMmfItemRemarks> storeMmfItemRemarksList = new ArrayList<StoreMmfItemRemarks>();
				storeMmfItemRemarksList = session.createCriteria(
						StoreMmfItemRemarks.class).createAlias("Item", "i")
						.add(Restrictions.eq("i.PvmsNo", box.getString("pvmsNo")))
						.add(Restrictions.eq("MmfForTheYear", box.getInt(MMF_DEPARTMENT_DATE)))
						.add(Restrictions.eq("MmfStoreType", box.getString("storeType"))).list();

				if (box.getString("updateRemarksForItem") != null
						&& !box.getString("updateRemarksForItem").equals("")) {
					storeMmfItemRemarks.setRemarks(box.getString("updateRemarksForItem"));
				}

				MasStoreItem masStoreItem1 = new MasStoreItem();
				storeMmfItemRemarks.setMmfForTheYear(box.getInt(MMF_DEPARTMENT_DATE));
				storeMmfItemRemarks.setMmfStoreType(box.getString("storeType"));
				if (pvmsCorrespondingIdList != null
						&& pvmsCorrespondingIdList.size() > 0) {
					masStoreItem1.setId(pvmsCorrespondingIdList.get(0).getId());
				}
				storeMmfItemRemarks.setItem(masStoreItem1);
				if (storeMmfItemRemarksList != null
						&& storeMmfItemRemarksList.size() > 0) {
					StoreMmfItemRemarks objectForUpdate = storeMmfItemRemarksList.get(0);
					objectForUpdate.setRemarks(box.getString("updateRemarksForItem"));

					hbt.update(objectForUpdate);
					hbt.refresh(objectForUpdate);
				} else {
					hbt.save(storeMmfItemRemarks);
				}
			}
			// }

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		box.put("fromUpdate", "fromUpdate");
		map = getCurrentYearMmfByItem(box);
		map.put("departmentList", departmentList);
		map.put("updateRemarksForItem", box.getString("updateRemarksForItem"));
		return map;
	}

	public Map<String, Object> getItemListForNomenclature(Box box) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();

		session = (Session) getSession();
		String pvmsNo = null;

		try {

			Map<String, Object> utilMap = new HashMap<String, Object>();

			List objectList = new ArrayList();
			String str = "%" + box.get("autoHint") + "%";

			/*
			 * if((objectList.size() > 0)&&(stockIdList.size()>0)){
			 *
			 * Criteria c =
			 * session.createCriteria(MasStoreItem.class).add(Restrictions.like("Nomenclature",str))
			 * .add(Restrictions.eq("Department.Id", deptId))
			 * .add(Restrictions.in("Id",stockIdList))
			 * .add(Restrictions.not(Restrictions.in("Id", objectList)));
			 * c.setFirstResult(0); c.setMaxResults(10); itemList = c.list();
			 * }else if((stockIdList.size()>0)){ Criteria c =
			 * session.createCriteria(MasStoreItem.class).add(Restrictions.like("Nomenclature",str))
			 * .add(Restrictions.in("Id",stockIdList))
			 * .add(Restrictions.eq("Department.Id", deptId));
			 *
			 * c.setFirstResult(0); c.setMaxResults(10); itemList = c.list(); }
			 */

			Criteria c = session.createCriteria(MasStoreItem.class).add(
					Restrictions.eq("Status", "y")).add(
							Restrictions.like("Nomenclature", str));

			c.setFirstResult(0);
			c.setMaxResults(10);
			itemList = c.list();

		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("itemList", itemList);
		map.put("forMMf", "forMMf");

		return map;

	}

	public Map<String, Object> checkNomenclatureExistence(
			Map<String, Object> dataMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();

		try {

			String nomenclature = "" + dataMap.get("nomenclature");

			Criteria c = session.createCriteria(MasStoreItem.class).add(
					Restrictions.eq("Nomenclature", nomenclature));
			itemList = c.list();
			map.put("itemList", itemList);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	public Map<String, Object> getItemObject(Box box) {
		session = (Session) getSession();

		String pvmsName = "";
		String qry = "";
		MasStoreItem firstItem = new MasStoreItem();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreItem> nonExpitemList = new ArrayList<MasStoreItem>();
		Map<String, Object> map = new HashMap<String, Object>();
		try {

			if (!"".equals(box.get("nomenclature"))) {
				itemList = session.createCriteria(MasStoreItem.class).add(
						Restrictions.eq("Status", "y")).add(
								Restrictions
								.eq("Nomenclature", box.get("nomenclature")))
								.add(Restrictions.eq("Department.Id", 24)).list();

				nonExpitemList = session.createCriteria(MasStoreItem.class)
				.add(
						Restrictions.eq("Nomenclature", box
								.get("nomenclature"))).add(
										Restrictions.ne("Department.Id", 24)).list();

				if (itemList != null && itemList.size() > 0) {
					firstItem = itemList.get(0);

				} else {
					firstItem.setPvmsNo("");
					firstItem.setNomenclature("");

					// firstItem.getItemConversion().setItemUnitName("");

				}
			} else {
				firstItem.setPvmsNo("");
				firstItem.setNomenclature("");
				// firstItem.getItemConversion().setItemUnitName("");

			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		box.put("firstItem", firstItem);
		if (firstItem.getPvmsNo() != null && !"".equals(firstItem.getPvmsNo()))
			box.put("pvmsNo", firstItem.getPvmsNo());
		box.put("fromSearch", "true");
		if (itemList != null && itemList.size() > 0) {
			map.putAll(getCurrentYearMmfByItem(box));
		} else if (nonExpitemList != null && nonExpitemList.size() > 0) {
			map.put("nonExpMesg", "NonExpendable Item should not be allowed");
		}
		map.put("firstItem", firstItem);
		return map;

	}



	public Map<String, Object> getEcelSheetDataForMMf(Box box) {
		int date = box.getInt(MMF_DEPARTMENT_DATE);
		String storeType = box.get("storeType");
		Session session = getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		String qry = "select c.`pvms_no`,c.`nomenclature`,f.unit_name, "
			+ "sum(if(a.mmf_for_the_year="
			+ date
			+ "-1,b.curr_year_mmf,0)) as 'prev year', "
			+ "sum(if(a.mmf_for_the_year="
			+ date
			+ ",b.curr_year_mmf,0)) as Appr1 " // r.remark  "
			+ " from "
			+ "store_mmf_department_m a,  store_mmf_department_t b, mas_store_item c,"
			// left join store_mmf_item_remarks r on r.item_id=c.item_id ,
			+ "mas_department d, "
			+ "mas_store_item_conversion e ,mas_store_unit f, mas_item_type i "
			+ " where a.id = b.store_mmf_department_m_id and e.item_conversion_id=c.item_conversion_id and f.unit_id = e.purchase_unit_id and "
			+ " a.store_ward_dept=d.department_id  "
			+ " and b.item_id = c.item_id "
			+ " and c.item_type_id = i.item_type_id"
			+ " and a.mmf_store_type='"
			+ storeType
			+ "' "
			//+ " and (r.mmf_store_type='"
			//+ storeType
			//+ "' or r.mmf_store_type is null)"
			+ " and c.status ='y' and c.department_id = '24' "
			+ " and i.item_type_id = '"
			+ box.get("itemType")
			+ "' "
			+ " group by b.item_id "
			+ " having Appr1 > 0"
			+ " order by c.`pvms_no`";
		try {
			List<Object> mmfDataList = new ArrayList<Object>();
			mmfDataList = session.createSQLQuery(qry).list();

			byte[] buffer = new byte[18024];
			HSSFWorkbook wb = new HSSFWorkbook();
			HSSFSheet sheet = wb.createSheet("TESTEXCEL");
			// Create a new font and alter it.
			HSSFFont font = wb.createFont();
			font.setFontHeightInPoints((short) 10);
			font.setFontName(HSSFFont.FONT_ARIAL);
			font.setColor((short) 62);
			font.setItalic(false);
			font.setStrikeout(false);
			font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
			HSSFFont font1 = wb.createFont();
			font1.setFontHeightInPoints((short) 10);
			font1.setFontName(HSSFFont.FONT_ARIAL);
			font1.setColor((short) 80);
			font1.setItalic(false);
			font1.setStrikeout(false);
			font1.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);

			// Fonts are set into a style so create a new one to
			// use.
			HSSFCellStyle style = wb.createCellStyle();
			style.setFont(font);

			HSSFCellStyle style1 = wb.createCellStyle();
			style1.setFont(font1);
			style1.setLocked(true);

			HSSFRow row2 = sheet.createRow((short) 2);
			// Create a cell and put a value in it.
			HSSFCell cell20 = row2.createCell((short) 3);
			cell20.setCellValue("COMMAND HOSPITAL AIR FORCE, BANGALORE -7");
			cell20.setCellStyle(style1);
			sheet.addMergedRegion(new Region(2, (short) 3, 2, (short) 7));

			HSSFRow row3 = sheet.createRow((short) 3);
			// Create a cell and put a value in it.
			HSSFCell cell30 = row3.createCell((short) 3);
			cell30.setCellValue("MMF Entry Approval Form Item Wise");
			cell30.setCellStyle(style1);
			sheet.addMergedRegion(new Region(3, (short) 3, 3, (short) 7));

			HSSFRow row4 = sheet.createRow((short) 4);
			// Create a cell and put a value in it.
			HSSFCell cell40 = row4.createCell((short) 4);
			cell40.setCellValue("Mmf for The Year :" + date + "");
			cell40.setCellStyle(style1);
			HSSFCell cell43 = row4.createCell((short) 1);
			cell43.setCellValue("Mmf for The Year :" + date + "");
			cell43.setCellStyle(style1);
			sheet.addMergedRegion(new Region(4, (short) 1, 4, (short) 7));

			HSSFRow row5 = sheet.createRow((short) 5);
			if (storeType.equalsIgnoreCase("e")) {
				storeType = "Expandable";
			} else {
				storeType = "ECHS";
			}
			HSSFCell cell44 = row5.createCell((short) 5);
			cell40.setCellValue("Mmf Type :");
			cell40.setCellStyle(style1);
			HSSFCell cell45 = row5.createCell((short) 3);
			cell45.setCellValue("Mmf Type :" + storeType);
			cell45.setCellStyle(style1);
			sheet.addMergedRegion(new Region(5, (short) 3, 5, (short) 7));

			HSSFRow headingRow = sheet.createRow((short) 6);

			HSSFCell cell50 = headingRow.createCell((short) 0);
			cell50.setCellValue("Sl.No");
			cell50.setCellStyle(style);
			HSSFCell cell51 = headingRow.createCell((short) 1);
			cell51.setCellValue("Pvms");
			cell51.setCellStyle(style);
			HSSFCell cell52 = headingRow.createCell((short) 2);
			cell52.setCellValue("Nomenclature");
			cell52.setCellStyle(style);
			HSSFCell cell53 = headingRow.createCell((short) 3);
			cell53.setCellValue("A/U");
			cell53.setCellStyle(style);
			HSSFCell cell54 = headingRow.createCell((short) 4);
			cell54.setCellValue("Total Pre Year Mmf");
			cell54.setCellStyle(style);
			HSSFCell cell55 = headingRow.createCell((short) 5);
			cell55.setCellValue("Total curr Year Mmf");
			cell55.setCellStyle(style);
			HSSFCell cell531 = headingRow.createCell((short) 6);
			cell531.setCellValue("Remarks");
			cell531.setCellStyle(style);

			int row = 7;
			int slno = 0;
			for (Iterator iterator = mmfDataList.iterator(); iterator.hasNext();) {
				Object[] object = (Object[]) iterator.next();
				sheet.createRow((short) row).createCell((short) 0)
				.setCellValue(++slno);
				sheet.createRow((short) row).createCell((short) 1)
				.setCellValue((String) (object[0]));
				if (object[1] != null) {
					sheet.createRow((short) row).createCell((short) 2)
					.setCellValue(object[1].toString());
				} else {
					sheet.createRow((short) row).createCell((short) 2)
					.setCellValue("");
				}
				if (object[2] != null) {
					sheet.createRow((short) row).createCell((short) 3)
					.setCellValue(object[2].toString());
				} else {
					sheet.createRow((short) row).createCell((short) 3)
					.setCellValue("");
				}
				if (object[3] != null) {
					sheet.createRow((short) row).createCell((short) 4)
					.setCellValue(
							((BigDecimal) object[3]).doubleValue());
				} else {
					sheet.createRow((short) row).createCell((short) 4)
					.setCellValue("");
				}
				if (object[4] != null) {
					sheet.createRow((short) row).createCell((short) 5)
					.setCellValue(
							((BigDecimal) object[4]).doubleValue());
				} else {
					sheet.createRow((short) row).createCell((short) 5)
					.setCellValue("");
				}
				// Remars is effected query result so remove it for temporary--for further work
				sheet.createRow((short) row).createCell((short) 6)
				.setCellValue("");
				/*if (object[5] != null) {
					sheet.createRow((short) row).createCell((short) 6)
							.setCellValue((String) object[5]);
				} else {
					sheet.createRow((short) row).createCell((short) 6)
							.setCellValue("");
				}*/

				sheet.setColumnWidth((short) 0, (short) (6 * 256));
				sheet.setColumnWidth((short) 1, (short) (15 * 256));
				sheet.setColumnWidth((short) 2, (short) (60 * 256));
				sheet.setColumnWidth((short) 3, (short) (15 * 256));
				sheet.setColumnWidth((short) 4, (short) (15 * 256));
				sheet.setColumnWidth((short) 5, (short) (15 * 256));
				sheet.setColumnWidth((short) 6, (short) (60 * 256));
				row++;
			}
			String grp_name = "MMFReports";
			// Write the output to a file
			grp_name = grp_name + ".xls";
			FileOutputStream fileOut = new FileOutputStream(grp_name);
			wb.write(fileOut);
			fileOut.close();

			map.put("flag", "DataFound");
			map.put("download_path", grp_name);
		} catch (IOException ioe) {
			ioe.printStackTrace();
			map.put("flag", "NoData");
		}

		return map;
	}

	public Map<String, Object> getItemDetailsForStockTakingAdd(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreItem> itemList1 = new ArrayList<MasStoreItem>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		session = (Session) getSession();
		String pvms = null;
		String nomenclature = null;
		String strength = null;
		String au = null;
		BigDecimal qtymmf = null;
		BigDecimal qtyInHand = null;
		int item_id = 0;

		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector indentTItems = new Vector();
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;

		try {
			int pageno = 1;
			int numOfRows = 25;
			try {
				if (box.get("pageno") != null) {
					pageno = Integer.parseInt(box.getString("pageno"));
				}
			} catch (Exception e) {
				// e.printStackTrace();
				pageno = 1;
			}
			int hospitalId=box.getInt("hospitalId");

			try {
				if (box.getInt("numOfRows") != 0) {
					numOfRows = box.getInt("numOfRows");
				}
			} catch (Exception e) {
				e.printStackTrace();
			}

			map.put("pageno", pageno);

			int first = (pageno - 1) * numOfRows;
			int totalRecords = 0;
			String str = "";
			Criteria c = null;

			if (box.getString("search_text").equals("")
					&& box.getString("pvms").equals("")) {
				c = session.createCriteria(MasStoreItem.class);
				String qry = "select count(*) from mas_store_item ";
				try {
					totalRecords = Integer.parseInt(session.createSQLQuery(qry)
							.list().get(0).toString());
				} catch (Exception e) {
					totalRecords = 0;
				}
				map.put("totalRecords", totalRecords);
			} else if (!box.getString("search_text").equals("")
					&& box.getString("pvms").equals("")) {
				str = "%" + box.getString("search_text") + "%";
				c = session.createCriteria(MasStoreItem.class)
				.add(Restrictions.eq("ItemType.Id", 1))
				.add(Restrictions.like("Nomenclature", str));

				itemList1 = session.createCriteria(MasStoreItem.class)
				.add(Restrictions.eq("ItemType.Id", 2))
				.add(Restrictions.eq("Hospital.Id", hospitalId))
				.add(Restrictions.like("Nomenclature", str)).list();


				String qry = "select count(*) from mas_store_item where nomenclature like '%"
					+ box.getString("search_text") + "%'";
				try {
					totalRecords = Integer.parseInt(session.createSQLQuery(qry)
							.list().get(0).toString());
				} catch (Exception e) {
					totalRecords = 0;
				}
				map.put("totalRecords", totalRecords);
			} else if (!box.getString("pvms").equals("")
					&& box.getString("search_text").equals("")) {
				str = "%" + box.getString("pvms") + "%";
				c = session.createCriteria(MasStoreItem.class)
				.add(Restrictions.eq("ItemType.Id", 1))
				.add(
						Restrictions.like("PvmsNo", str)).addOrder(Order.asc("Nomenclature")).addOrder(Order.asc("PvmsNo"));
				String qry = "select count(*) from mas_store_item where pvms_no like '%"
					+ box.getString("pvms") + "%'";

				itemList1 = session.createCriteria(MasStoreItem.class)
				.add(Restrictions.eq("ItemType.Id", 2))
				.add(Restrictions.eq("Hospital.Id", hospitalId))
				.add(Restrictions.like("Nomenclature", str)).list();

				try {
					totalRecords = Integer.parseInt(session.createSQLQuery(qry)
							.list().get(0).toString());
				} catch (Exception e) {
					totalRecords = 0;
				}
				map.put("totalRecords", totalRecords);
			}

			double totalPages = 0.0;
			totalPages = (double) totalRecords / (double) numOfRows;
			Double d = new Double(Math.ceil(totalPages));
			map.put("totalPages", d.intValue());

			if (totalRecords < numOfRows){
				itemList = c.list();
				itemList.addAll(itemList1);
			}
			else{
				itemList = c.setFirstResult(first).setMaxResults(numOfRows)
				.list();
				itemList.addAll(itemList1);
			}
			List a = new ArrayList<Integer>();
			for (int i = 0; i < itemList.size(); i++) {
				a.add(itemList.get(i).getId());
			}

			brandList = session.createCriteria(MasStoreBrand.class).add(Restrictions.in("Item.Id", a)).list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		map.put("brandList", brandList);

		return map;
	}

	public Map<String, Object> doAddStockTakingItems(Box box) {

		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();

		Vector items = box.getVector("itemId");
		Vector brand = box.getVector("brand");
		Vector batch = box.getVector("batch");
		Vector expiry = box.getVector("expiry");
		Vector costprice = box.getVector("cost_price");
		Vector qty = box.getVector("quantity");
		Vector department = box.getVector("dept_Id");
		Vector items_to_be_added = box.getVector(ITEMS_TO_BE_ADDED);

		int sr_no = 0;
		// int currentYear = box.getInt(MMF_DEPARTMENT_DATE);
		try {
			List<StoreStockTakingM> storeStockTakingMList = new ArrayList<StoreStockTakingM>();
			List<StoreStockTakingT> storeStockTakingTList = new ArrayList<StoreStockTakingT>();
			List<StoreItemBatchStock> storeBatchList = new ArrayList<StoreItemBatchStock>();
			StoreStockTakingM storeStockTakingM = new StoreStockTakingM();
			StoreStockTakingT storeStockTakingT = new StoreStockTakingT();

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			int srno = 1;

			SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
			String date4MySQL1 = formatterOut.format(formatterIn.parse(box.getString(PHYSICAL_STOCK_DATE)));
			java.sql.Date stockDate = java.sql.Date.valueOf(date4MySQL1);

			storeStockTakingMList = session.createCriteria(StoreStockTakingM.class)
			.add(Restrictions.eq("Department.Id", box.getInt(DEPARTMENT_ID))).add(
					Restrictions.eq("PhysicalDate", stockDate)).list();
			int stockTakingTId=0;
			if (storeStockTakingMList != null && storeStockTakingMList.size() > 0) {
				storeStockTakingM = storeStockTakingMList.get(0);
				storeStockTakingTList = session.createCriteria(StoreStockTakingT.class).add(
						Restrictions.eq("StockTakingM.Id", storeStockTakingM.getId())).addOrder(Order.desc("SrNo")).list();
				stockTakingTId=storeStockTakingTList.get(0).getId().intValue();
				if (storeStockTakingTList != null	&& storeStockTakingTList.size() > 0) {
					srno = storeStockTakingTList.get(0).getSrNo().intValue();
				}
			}
			int deptId = box.getInt("deptId");
			int batchStockId=0;

			BigDecimal cp = new BigDecimal(0);
			BigDecimal qty1 = new BigDecimal(0);
			BigDecimal closingStock = new BigDecimal(0);

			BigDecimal  totalStock=new BigDecimal(0);
			for (int i = 0; i < items.size(); i++) {
				storeBatchList=session.createCriteria(StoreItemBatchStock.class).add(Restrictions.eq("Department.Id", deptId))
				.add(Restrictions.eq("Item.Id",  Integer.parseInt((String) items.get(i))))
				.add(Restrictions.eq("BatchNo",  (String) batch.get(i))).list();
				if(storeBatchList!=null && storeBatchList.size()>0){
					batchStockId=storeBatchList.get(0).getId().intValue();

				}
				for(StoreItemBatchStock batchStock:storeBatchList){
					totalStock=batchStock.getClosingStock();
				}


				if(storeBatchList.size()>0 && batchStockId !=0){

					if (items_to_be_added.contains(items.get(i)) ) {
						try {
							cp = new BigDecimal(costprice.get(i).toString());
						} catch (Exception e) {
							cp = new BigDecimal(0);
						}
						try {
							qty1 = new BigDecimal(qty.get(i).toString());

						} catch (Exception e) {
							e.printStackTrace();
						}
						try{
							closingStock=qty1.add(totalStock);

						}catch(Exception e) {
							e.printStackTrace();
						}
						StoreItemBatchStock storeBatchStock = (StoreItemBatchStock) getHibernateTemplate()
						.get(StoreItemBatchStock.class, batchStockId);
						if(brand !=null || !brand.equals("")|| qty1.compareTo(new BigDecimal(0))>0){
							date4MySQL1 = formatterOut.format(formatterIn.parse(expiry.get(i).toString()));
							java.sql.Date expiryDate = java.sql.Date.valueOf(date4MySQL1);
							storeBatchStock.setAdjustQty(new BigDecimal(0));
							storeBatchStock.setDefectQty(new BigDecimal(0));
							storeBatchStock.setBatchNo(batch.get(i).toString());
							storeBatchStock.setItem(new MasStoreItem(Integer.parseInt(items.get(i).toString())));
							storeBatchStock.setBrand(new MasStoreBrand(Integer.parseInt(brand.get(i).toString())));
							storeBatchStock.setDepartment(new MasDepartment(deptId));
							storeBatchStock.setExpiryDate(expiryDate);
							storeBatchStock.setCostPrice(cp);
							storeBatchStock.setClosingStock(closingStock);
							//	storeBatchStock.setId(batchStockId);
							hbt.update(storeBatchStock);
							//	storeStockTakingT = new StoreStockTakingT();
							StoreStockTakingT storeStockTakingT1 = (StoreStockTakingT) getHibernateTemplate()
							.get(StoreStockTakingT.class, stockTakingTId);
							storeStockTakingT1.setBatchNo(batch.get(i).toString());
							storeStockTakingT1.setBrand(new MasStoreBrand(Integer.parseInt(brand.get(i).toString())));


							storeStockTakingT1.setCostPrice(cp);


							storeStockTakingT1.setExpiryDate(expiryDate);
							storeStockTakingT1.setItem(new MasStoreItem(Integer.parseInt(items.get(i).toString())));

							storeStockTakingT.setRemarks("items added during stock verification");
							storeStockTakingT1.setSrNo(++srno);
							storeStockTakingT1.setStockTakingM(storeStockTakingM);
							StoreItemBatchStock batchStock =new StoreItemBatchStock();
							batchStock.setId(batchStockId);
							storeStockTakingT1.setItemBatchStock(batchStock);

							storeStockTakingT1.setStockDeficient(new BigDecimal(0));
							storeStockTakingT1.setStockSurplus(new BigDecimal(0));//storeStockTakingT1.setStockSurplus(qty1);
							storeStockTakingT1.setStoreStockDefective(new BigDecimal(0));
							storeStockTakingT1.setStoreStockService(closingStock);
							storeStockTakingT1.setComputedStock(closingStock);

							hbt.update(storeStockTakingT1);
						}}
				}else{
					try {
						cp = new BigDecimal(costprice.get(i).toString());
					} catch (Exception e) {
						cp = new BigDecimal(0);
					}
					try {
						qty1 = new BigDecimal(qty.get(i).toString());
					} catch (Exception e) {
						//qty1 = new BigDecimal(0);
					}
					StoreItemBatchStock storeBatchStock =new StoreItemBatchStock();
					//if (items_to_be_added.contains(items.get(i)) && qty1.compareTo(new BigDecimal(0))>0) {  /*  By Tirath*/
					if (items_to_be_added.contains(items.get(i))) {
						if((brand !=null || !brand.equals(""))){
							date4MySQL1 = formatterOut.format(formatterIn.parse(expiry.get(i).toString()));
							java.sql.Date expiryDate = java.sql.Date.valueOf(date4MySQL1);
							storeBatchStock.setAdjustQty(new BigDecimal(0));
							storeBatchStock.setDefectQty(new BigDecimal(0));
							storeBatchStock.setBatchNo(batch.get(i).toString());
							storeBatchStock.setItem(new MasStoreItem(Integer.parseInt(items.get(i).toString())));
							storeBatchStock.setBrand(new MasStoreBrand(Integer.parseInt(brand.get(i).toString())));
							storeBatchStock.setDepartment(new MasDepartment(deptId));
							storeBatchStock.setExpiryDate(expiryDate);
							storeBatchStock.setCostPrice(cp);
							storeBatchStock.setClosingStock(qty1);
							hbt.save(storeBatchStock);
							//------------
							storeStockTakingT = new StoreStockTakingT();
							storeStockTakingT.setBatchNo(batch.get(i).toString());
							storeStockTakingT.setBrand(new MasStoreBrand(Integer.parseInt(brand.get(i).toString())));

							storeStockTakingT.setComputedStock(qty1);
							storeStockTakingT.setStoreStockService(qty1);
							storeStockTakingT.setStockSurplus(new BigDecimal(0));//storeStockTakingT.setStockSurplus(qty1);
							if(qty1 !=null || qty1!=new BigDecimal(0) || !qty1.equals("")||(qty1.compareTo(new BigDecimal(0))>0)){
								storeStockTakingT.setRemarks("New Item/Btach Added");
							}else{
								storeStockTakingT.setRemarks("items added during stock verification");
							}
							storeStockTakingT.setCostPrice(cp);

							storeStockTakingT.setExpiryDate(expiryDate);

							storeStockTakingT.setItem(new MasStoreItem(Integer.parseInt(items.get(i).toString())));

							storeStockTakingT.setSrNo(++srno);
							storeStockTakingT.setStockTakingM(storeStockTakingM);
							storeStockTakingT.setItemBatchStock(new StoreItemBatchStock(storeBatchStock.getId()));

							storeStockTakingT.setStockDeficient(new BigDecimal(0));
							//storeStockTakingT.setStockSurplus(new BigDecimal(0));
							storeStockTakingT.setStoreStockDefective(new BigDecimal(0));
							//	storeStockTakingT.setStoreStockService(new BigDecimal(0));
							//storeStockTakingT.setComputedStock(new BigDecimal(0));

							hbt.saveOrUpdate(storeStockTakingT);
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		map = getItemDetailsForStockTakingAdd(box);
		return map;

	}


	public Map<String, Object> showDispensaryComsumptionJsp(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasEmployee> empList = new ArrayList<MasEmployee>();
		List<StoreOpPatientIssueM> opPatientIssueList = new ArrayList<StoreOpPatientIssueM>();
		List<StoreOpPatientIssueM> opPatientIssueMList = new ArrayList<StoreOpPatientIssueM>();
		List<StoreOpPatientIssueT> opPatientIssueTList = new ArrayList<StoreOpPatientIssueT>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		Session session = (Session) getSession();
		int deptId = box.getInt("deptId");
		int pageNo = 1;
		int firstResult = 0;
		int maxResults = 20;
		String opdIssueno = "";
		String search = "n";

		if(box.getInt("pageNo") != 0){
			pageNo = box.getInt("pageNo");
		}

		if (pageNo != 1) {
			firstResult = firstResult + (pageNo - 1) * 20;
		}
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			empList = session
			.createQuery(
					"select emp from MasEmployee  as emp where emp.EmpCategory.Id=" + 1)
					.list();
			opPatientIssueList = session.createCriteria(
					StoreOpPatientIssueM.class).add(
							Restrictions.eq("Department.Id", deptId))
							.add(Restrictions.eq("TypeOfIssue","C"))
							.addOrder(Order.desc("IssueNo"))
							.list();

			if (box.getInt(ISSUE_NO) != 0) {
				int issueId = box.getInt(ISSUE_NO);
				if(box.getString("pvms") != null && !box.getString("pvms").equals("")){
					opPatientIssueTList = session.createCriteria(
							StoreOpPatientIssueT.class).add(
									Restrictions.eq("OpIssue.Id", issueId))
									.createAlias("ItemIdIssue", "i")
									.add(Restrictions.eq("i.PvmsNo",box.getString("pvms")))
									.setFirstResult(
											firstResult).setMaxResults(maxResults).list();
					search = "y";
				}else{
					opPatientIssueTList = session.createCriteria(
							StoreOpPatientIssueT.class).add(
									Restrictions.eq("OpIssue.Id", issueId))
									.setFirstResult(
											firstResult).setMaxResults(maxResults).list();
					/*String que ry = "SELECT sit FROM StoreOpPatientIssueT sit where OpIssue.Id='"+issueId+"' group by sit.ItemIdIssue.Id";*/

				}

				opPatientIssueMList = session.createCriteria(StoreOpPatientIssueM.class)
				.add(Restrictions.eq("Id", issueId)).list();

				if(opPatientIssueMList != null && opPatientIssueMList.size() > 0){
					opdIssueno = opPatientIssueMList.get(0).getIssueNo().toString();
				}


				if(box.getString("pageFlag").equals("submit")){
					StoreOpPatientIssueM dc =(StoreOpPatientIssueM) opPatientIssueMList.get(0);

					int empId = box.getInt("empId");
					String remarks =box.getString("remarks");
					String fromDate = box.getString("fromDate");
					String toDate = box.getString("toDate");
					String prescription = box.getString("prescription");
					if(empId != 0)
						dc.setEmp(new MasEmployee(empId));

					if(remarks != null && !remarks.equals(""))
						dc.setRemarks(remarks);
					if(fromDate != null && !fromDate.equals(""))
						dc.setIssueDate(HMSUtil
								.convertStringTypeDateToDateType(fromDate));
					if(toDate != null && !toDate.equals(""))
						dc.setIssueToDate(HMSUtil
								.convertStringTypeDateToDateType(toDate));

					if(prescription != null && !prescription.equals(""))
						dc.setPrescriptionNo(prescription);
					hbt.update(dc);
					hbt.refresh(dc);
				}


			}else{
				storeFyDocumentNoList = session.createCriteria(
						StoreFyDocumentNo.class).add(
								Restrictions.eq("Department.Id", deptId)).list();
				String no = "";

				int storeFyDocumentNoId = 0;
				if (storeFyDocumentNoList != null
						&& storeFyDocumentNoList.size() > 0) {
					no = storeFyDocumentNoList.get(0).getDeptConsumNo();
					opdIssueno = getMaxNo(no);
				}
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("empList", empList);
		map.put("opPatientIssueList", opPatientIssueList);
		map.put("opPatientIssueTList", opPatientIssueTList);
		map.put("opPatientIssueMList",opPatientIssueMList);
		map.put("opdIssueno",opdIssueno);
		map.put("search",search);

		return map;
	}

	public Map<String, Object> submitDispensaryConsumptionStockDetails(Map map) {
		Session session = (Session) getSession();
		boolean succesfullyAdded = false;
		List<String> batchNumberList = (List) map.get("batchNumberList");
		List brandNameList = (List) map.get("brandNameList");
		List expiryDateList = (List) map.get("expiryDateList");
		List issQtyList = (List) map.get("issQtyList");
		List costPriceList = (List) map.get("costPriceList");
		List amountList = (List) map.get("amountList");
		List storeItemBatchStockIdList = (List) map
		.get("storeItemBatchStockIdList");
		String date = (String) map.get("date");
		String fromDate = (String) map.get("fromDate");
		String toDate = (String) map.get("toDate");
		int deptId = (Integer) map.get("deptId");
		int hospitalId = (Integer) map.get("hospitalId");
		String time = (String) map.get("time");
		String userName = (String) map.get("userName");
		String remarks = (String) map.get("remarks");
		List<StoreOpPatientIssueM> storeOpM = new ArrayList<StoreOpPatientIssueM>();
		// int storeFyDocumentNoId=(Integer) map.get("storeFyDocumentNoId");
		// String opdIssueno=(String) map.get("opdIssueno");
		// int hinId=(Integer)map.get("hinId");
		int opdIssueMasterId = (Integer) map.get("opdIssueMasterId");

		int empId = (Integer) map.get("empId");
		int itemId = (Integer) map.get("itemId");
		String prescription = (String) map.get("prescription");
		String buttonFlag = (String) map.get("buttonFlag");
		String opdIssuenoT = (String) map.get("opdIssueno");
		// String serviceNo = (String)map.get("serviceNo");

		Date dateToInsert = HMSUtil.convertStringTypeDateToDateType(date);
		Transaction tx = null;

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			StoreOpPatientIssueM storeOpPatientIssueM = null;
			tx = session.beginTransaction();

			// Saving Master Record
			String issueType1 = "I";
			storeOpM = session.createCriteria(StoreOpPatientIssueM.class)
			.add(Restrictions.eq("IssueNo",opdIssuenoT))
			.add(Restrictions.eq("Department.Id", deptId))
			.add(Restrictions.eq("IssueType", issueType1))
			.add(Restrictions.eq("TypeOfIssue","C")).list();
			if(storeOpM != null && storeOpM.size() > 0){
				int masterId = storeOpM.get(0).getId();
				if(opdIssueMasterId == 0){
					opdIssueMasterId = masterId;
				}
			}


			if (opdIssueMasterId == 0) {
				List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
				storeFyDocumentNoList = session.createCriteria(
						StoreFyDocumentNo.class).add(
								Restrictions.eq("Department.Id", deptId)).list();
				String no = "";
				String opdIssueno = "";
				int storeFyDocumentNoId = 0;
				if (storeFyDocumentNoList != null
						&& storeFyDocumentNoList.size() > 0) {
					no = storeFyDocumentNoList.get(0).getDeptConsumNo();
					opdIssueno = getMaxNo(no);
					storeFyDocumentNoId = storeFyDocumentNoList.get(0).getId();
				}

				StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) hbt
				.load(StoreFyDocumentNo.class, storeFyDocumentNoId);

				storeFyDocumentNo.setDeptConsumNo(opdIssueno);
				hbt.update(storeFyDocumentNo);

				storeOpPatientIssueM = new StoreOpPatientIssueM();
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				storeOpPatientIssueM.setDepartment(masDepartment);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				storeOpPatientIssueM.setHospital(masHospital);
				storeOpPatientIssueM.setIssueType("I");
				storeOpPatientIssueM.setTypeOfIssue("C");
				storeOpPatientIssueM.setHin(null);
				storeOpPatientIssueM.setServiceNo(null);
				storeOpPatientIssueM.setIssueNo(opdIssueno);
				storeOpPatientIssueM.setIssueDate(HMSUtil
						.convertStringTypeDateToDateType(fromDate));
				storeOpPatientIssueM.setIssueToDate(HMSUtil
						.convertStringTypeDateToDateType(toDate));
				storeOpPatientIssueM.setStatus("y");
				storeOpPatientIssueM.setPrescriptionNo(prescription);
				if (empId != 0) {
					MasEmployee masEmployee = new MasEmployee();
					masEmployee.setId(empId);
					storeOpPatientIssueM.setEmp(masEmployee);
				}
				storeOpPatientIssueM.setLastChgBy(userName);
				storeOpPatientIssueM.setLastChgDate(dateToInsert);
				storeOpPatientIssueM.setLastChgTime(time);
				storeOpPatientIssueM.setRemarks(remarks.trim());
				hbt.save(storeOpPatientIssueM);
			} else {
				String issueType = "I";
				List storeOPDPatientMList = session.createCriteria(
						StoreOpPatientIssueM.class).add(
								Restrictions.eq("Id", opdIssueMasterId)).add(
										Restrictions.eq("IssueType", issueType))
										.add(Restrictions.eq("Department.Id", deptId))
										.add(Restrictions.eq("TypeOfIssue","C")).list();
				if (storeOPDPatientMList != null
						&& storeOPDPatientMList.size() > 0)
					storeOpPatientIssueM = (StoreOpPatientIssueM) storeOPDPatientMList
					.get(0);
			}

			// Saving Transaction Records
			// Iterator itr= issQtyList.iterator();
			for (int i = 0; i < issQtyList.size(); i++) {
				BigDecimal totalQtyIssued;
				StoreOpPatientIssueT storeOpPatientIssueT = new StoreOpPatientIssueT();
				storeOpPatientIssueT.setOpIssue(storeOpPatientIssueM);
				MasStoreItem masStoreItem = new MasStoreItem();
				masStoreItem.setId(itemId);
				storeOpPatientIssueT.setItemIdRequire(masStoreItem);
				storeOpPatientIssueT.setItemIdIssue(masStoreItem);

				storeOpPatientIssueT.setBatchNo(batchNumberList.get(i));

				MasStoreBrand masStoreBrand = new MasStoreBrand();
				masStoreBrand
				.setId(Integer.parseInt("" + brandNameList.get(i)));
				storeOpPatientIssueT.setBrand(masStoreBrand);
				String str_date = (String) expiryDateList.get(i);
				String expiryDate=str_date.substring(8)+"/"+str_date.substring(5,7)+"/"+str_date.substring(0,4);
				Date expiryDateToInsert = HMSUtil
				.convertStringTypeDateToDateType(expiryDate);
				storeOpPatientIssueT.setExpiryDate(expiryDateToInsert);
				BigDecimal issuedQtyFromJsp = new BigDecimal(""
						+ issQtyList.get(i).toString().trim());
				storeOpPatientIssueT.setQtyIssued(issuedQtyFromJsp);

				BigDecimal bigDecimal2 = new BigDecimal(""
						+ costPriceList.get(i));
				storeOpPatientIssueT.setRate(bigDecimal2);

				BigDecimal bigDecimal3 = new BigDecimal("" + amountList.get(i));
				storeOpPatientIssueT.setAmount(bigDecimal3);

				int storeItemBatchStockId = Integer.parseInt(""
						+ storeItemBatchStockIdList.get(i));

				StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock) hbt
				.load(StoreItemBatchStock.class, storeItemBatchStockId);
				BigDecimal qtyIssued = (BigDecimal) storeItemBatchStock
				.getIssueQty();

				if (qtyIssued != null) {
					totalQtyIssued = qtyIssued.add(issuedQtyFromJsp);
				} else {
					totalQtyIssued = issuedQtyFromJsp;
				}

				BigDecimal closingStock = (BigDecimal) storeItemBatchStock
				.getClosingStock();
				closingStock = closingStock.subtract(issuedQtyFromJsp);

				storeItemBatchStock.setIssueQty(totalQtyIssued);
				storeItemBatchStock.setClosingStock(closingStock);

				hbt.save(storeOpPatientIssueT);
				hbt.update(storeItemBatchStock);
			}
			map.put("message", "success");
			map.put("opdIssueMasterId", storeOpPatientIssueM.getId());
			tx.commit();
		} catch (Exception e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();

		}

		return map;
	}

	// ;:::::::::::::::::::Add FOR CRV UPDATION & VALIDATION:::::::::::::::::::
	public Map<String, Object> updateCrv(Box box) {
		// TODO Auto-generated method stub
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		session = (Session) getSession();
		int deptId = 0;
		int hospitalId = 0;
		int supplierOrUnitId = 0;
		int indentOrPoId = 0;
		int po_id = 0;
		int employeeId = 0;
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
		SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
		java.sql.Date grnDate = null;
		java.sql.Date invoiceDate = null;
		java.sql.Date date_received_surplus = null;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");

		String howReceived = "";
		String rrNo = "";
		String modeOfConveyance = "";
		String invoiceNo = "";
		String date4MySQL = "";
		String grnNo = "";
		String max = "";
		String no = "";
		String userName = "";
		String sos = "";
		String supplyOrderNo = "";
		String remarks = "";
		String civNo = "";
		Date civDate = null;

		BigDecimal invoiceAmount = null;
		BigDecimal freightDuty = null;
		BigDecimal exciseDuty = null;
		BigDecimal octroi = null;
		BigDecimal insuranceCharge = null;
		BigDecimal otherCharges = null;
		BigDecimal customDuty = null;
		BigDecimal grnValue = null;
		BigDecimal discount = null;
		BigDecimal vat = null;
		BigDecimal roundOffValue = null;
		BigDecimal actualGrnValue = null;
		BigDecimal totalCost = null;

		// Collecting Parameter Values from Box

		deptId = box.getInt("deptId");
		hospitalId = box.getInt("hospitalId");
		userName = box.getString("userName");

		sos = box.get(SOURCE_OF_SUPPLY);
		supplierOrUnitId = box.getInt(SUPPLIER_ID);

		if (sos.equalsIgnoreCase("w") || sos.equalsIgnoreCase("i")) {
			indentOrPoId = 0;
		} else {
			indentOrPoId = box.getInt(INDENT_ID);
		}
		if (sos.equalsIgnoreCase("l")) {
			po_id = box.getInt("po_id1");
		}

		grnNo = box.getString(GRN_NO);
		try {
			date4MySQL = formatterOut.format(formatterIn.parse(box
					.getString(GRN_DATE)));
			grnDate = java.sql.Date.valueOf(date4MySQL);
		} catch (Exception e) {
			grnDate = null;
		}

		try {
			date4MySQL = formatterOut.format(formatterIn.parse(box
					.getString(RECEIVED_DATE)));
			date_received_surplus = java.sql.Date.valueOf(date4MySQL);
		} catch (Exception e) {
			date_received_surplus = null;
		}

		howReceived = box.getString(HOW_RECEIVED);
		rrNo = box.getString(RR_NO);
		modeOfConveyance = box.getString(MODE_OF_CONVEYANCE);
		employeeId = box.getInt(EMPLOYEE_ID);
		invoiceNo = box.getString(INVOICE_NO);

		try {
			date4MySQL = formatterOut.format(formatterIn.parse(box
					.getString(INVOICE_DATE)));
			invoiceDate = java.sql.Date.valueOf(date4MySQL);
		} catch (Exception e) {
			invoiceDate = null;
		}
		try {
			invoiceAmount = new BigDecimal(box.getString(INVOICE_AMOUNT));
		} catch (Exception e) {
			invoiceAmount = new BigDecimal(0);
		}

		try {
			freightDuty = new BigDecimal(box.getString(FREIGHT_DUTY));
		} catch (Exception e) {
			freightDuty = new BigDecimal(0);
		}

		try {
			exciseDuty = new BigDecimal(box.getString(EXCISE_DUTY));
		} catch (Exception e) {
			exciseDuty = new BigDecimal(0);
		}

		try {
			octroi = new BigDecimal(box.getString(OCTROI));
		} catch (Exception e) {
			octroi = new BigDecimal(0);
		}

		try {
			insuranceCharge = new BigDecimal(box.getString(INSURANCE_CHARGES));
		} catch (Exception e) {
			insuranceCharge = new BigDecimal(0);
		}

		try {
			customDuty = new BigDecimal(box.getString(CUSTOM_DUTY));
		} catch (Exception e) {
			customDuty = new BigDecimal(0);
		}

		try {
			otherCharges = new BigDecimal(box.getString(OTHER_CHARGES));
		} catch (Exception e) {
			otherCharges = new BigDecimal(0);
		}

		try {
			grnValue = new BigDecimal(box.getString("grnValue"));
		} catch (Exception e) {
			grnValue = new BigDecimal(0);
		}

		try {
			actualGrnValue = new BigDecimal(box.getString("actualGrnValue"));
		} catch (Exception e) {
			actualGrnValue = new BigDecimal(0);
		}
		try {
			totalCost = new BigDecimal(box.getString("total_cost"));
		} catch (Exception e) {
			totalCost = new BigDecimal(0);
		}
		try {
			roundOffValue = new BigDecimal(box.getString("roundOfValue"));
		} catch (Exception e) {
			roundOffValue = new BigDecimal(0);
		}

		try {
			vat = new BigDecimal(box.getString("vatTax"));
		} catch (Exception e) {
			vat = new BigDecimal(0);
		}

		try {
			discount = new BigDecimal(box.getString("totDiscount"));
		} catch (Exception e) {
			discount = new BigDecimal(0);
		}

		supplyOrderNo = box.getString(SUPPLY_ORDER_NO);
		remarks = box.getString(REMARKS);

		// Create StoreGrnM object and Set the Values
		int grn_id = box.getInt(GRN_ID);
		StoreGrnM storeGrnM = new StoreGrnM();
		storeGrnM = (StoreGrnM) hbt.load(StoreGrnM.class, grn_id);
		storeGrnM.setReceiveType(sos);
		storeGrnM.setAtSoNo(supplyOrderNo);
		storeGrnM.setDateReceivedSurplus(date_received_surplus);
		storeGrnM.setHowReceived(howReceived);
		storeGrnM.setModeOfConveyance(modeOfConveyance);
		storeGrnM.setRemarks(remarks);
		storeGrnM.setRrNo(rrNo);
		storeGrnM.setRoundOffValue(roundOffValue);
		storeGrnM.setTotalCost(totalCost);

		try {
			storeGrnM.setDepartment(new MasDepartment(deptId));
		} catch (Exception e) {
			storeGrnM.setDepartment(null);
		}
		try {
			storeGrnM.setEmployee(new MasEmployee(employeeId));
		} catch (Exception e) {
			storeGrnM.setEmployee(null);
		}

		try {
			storeGrnM.setHospital(new MasHospital(hospitalId));
		} catch (Exception e) {
			storeGrnM.setHospital(null);
		}

		if (sos.equalsIgnoreCase("p")) {
			if (supplierOrUnitId != 0)
				storeGrnM.setSupplier(new MasStoreSupplier(supplierOrUnitId));
			else
				storeGrnM.setSupplier(null);

			if (indentOrPoId != 0)
				storeGrnM.setIndent(new StoreIndentM(indentOrPoId));
			else
				storeGrnM.setIndent(null);
		} else if (sos.equalsIgnoreCase("a") || sos.equalsIgnoreCase("i")) {
			if (supplierOrUnitId != 0)
				storeGrnM.setUnit(new MasStoreAirForceDepot(supplierOrUnitId));
			else
				storeGrnM.setUnit(null);

			if (indentOrPoId != 0)
				storeGrnM.setIndent(new StoreIndentM(indentOrPoId));
			else
				storeGrnM.setIndent(null);
		} else if (sos.equalsIgnoreCase("o")) {
			if (supplierOrUnitId != 0)
				storeGrnM.setOtherUnit(new MasUnit(supplierOrUnitId));
			else
				storeGrnM.setUnit(null);

			if (indentOrPoId != 0)
				storeGrnM.setIndent(new StoreIndentM(indentOrPoId));
			else
				storeGrnM.setIndent(null);

			if (!box.getString("civNo").equals(""))
				storeGrnM.setCivNo(box.getString("civNo"));

			try {
				storeGrnM.setCivdate(java.sql.Date.valueOf(formatterOut
						.format(formatterIn.parse(box.getString("civDate")))));
			} catch (Exception e) {
				storeGrnM.setCivdate(null);
			}
		} else if (sos.equalsIgnoreCase("l")) {
			// if (supplierOrUnitId!=0)
			// storeGrnM.setSupplier(new MasStoreSupplier(supplierOrUnitId));

			// if (po_id!=0)
			// storeGrnM.setPo(new StorePoHeader(po_id));

		} else if (sos.equalsIgnoreCase("w")) {
			if (supplierOrUnitId != 0)
				storeGrnM.setSupplier(new MasStoreSupplier(supplierOrUnitId));
			else
				storeGrnM.setSupplier(null);
		}

		storeGrnM.setCustomDuty(customDuty);
		storeGrnM.setExciseDuty(exciseDuty);
		storeGrnM.setFreightDuty(freightDuty);
		storeGrnM.setInsuranceCharge(insuranceCharge);
		storeGrnM.setOctroi(octroi);
		storeGrnM.setOtherCharges(otherCharges);

		storeGrnM.setGrnValue(actualGrnValue);
		storeGrnM.setVat(vat);
		storeGrnM.setDiscount(discount);
		storeGrnM.setGrnAmount(grnValue);
		// storeGrnM.setGrnNo(grnNo);
		// storeGrnM.setGrnDate(grnDate);
		storeGrnM.setInvoiceNo(invoiceNo);
		storeGrnM.setInvoiceDate(invoiceDate);
		storeGrnM.setInvoiceAmount(invoiceAmount);

		if (box.getString("validate").equals("t")) {
			storeGrnM.setStatus("v");
		} else {
			storeGrnM.setStatus("o");
		}

		storeGrnM.setLastChgBy(userName);
		storeGrnM.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(date));
		storeGrnM.setLastChgTime(time);

		Transaction tx = null;
		boolean conFlag = false;
		try {
			tx = session.beginTransaction();

			String hql = "delete from jkt.hms.masters.business.StoreGrnT as t where t.GrnMaster.Id='"
				+ box.get(GRN_ID) + "'";
			Query query = session.createQuery(hql);
			int row = query.executeUpdate();

			// Create StoreGrnTList Contains StoreGrnT Objects and Set the
			// Corresponding Values
			List<StoreGrnT> storeGrnTList = new ArrayList<StoreGrnT>();
			List objectList = new ArrayList();

			StoreGrnT storeGrnT = null;

			Vector itemId = box.getVector(ITEM_ID);
			Vector brandId = box.getVector(BRAND_ID);
			Vector manufacturerId = box.getVector(MANUFACTURER_ID);
			Vector batchNo = box.getVector(BATCH_NO);
			Vector lotNo = box.getVector(LOT_NO);
			Vector receivedQty = box.getVector(QUANTITY_RECEIVED);
			Vector freeQty = box.getVector(FREE_QTY);
			Vector dispType = box.getVector("dispenseType");
			Vector mdqValue = box.getVector("mdq");
			Vector ratePerMdq = box.getVector("ratePerMdq");
			Vector mrp = box.getVector(MRP);
			Vector convertedStock = box.getVector("convertedStock");
			Vector discountAmount = box.getVector("discountAmount");
			Vector taxAmount = new Vector();
			Vector taxAmountMdq = new Vector();
			Vector ed = new Vector();

			if (sos.equalsIgnoreCase("l")) {
				taxAmountMdq = box.getVector(TAX_AMT_MDQ);
				ed = box.getVector("ed");
			} else {
				taxAmount = box.getVector("taxAmount");
			}
			Vector finalCostPrice = box.getVector(COST_PRICE);
			Vector amountValue = box.getVector(AMOUNT);
			Vector freeItem = box.getVector(FREE_ITEM);
			Vector manufacturerDate = box.getVector(MANUFACTURING_DATE);
			Vector expiryDate = box.getVector(EXPIRY_DATE);
			Vector flag = box.getVector("flag");
			Vector loaninId = box.getVector(DETAIL_ID);
			Vector loaninStatus = box.getVector("loanInItem");
			int slno = 1;

			for (int i = 0; i < itemId.size(); i++) {
				if (itemId.get(i).toString().equalsIgnoreCase("0"))
					break;

				storeGrnT = new StoreGrnT();
				storeGrnT.setSerialNo(slno++);
				storeGrnT.setItem(new MasStoreItem(new Integer(itemId.get(i)
						.toString())));
				storeGrnT.setBrand(new MasStoreBrand(new Integer(brandId.get(i)
						.toString())));

				storeGrnT.setManufacturer(new MasManufacturer(new Integer(
						manufacturerId.get(i).toString())));
				storeGrnT.setBatchNo(batchNo.get(i).toString());
				// storeGrnT.setLotNo(lotNo.get(i).toString());
				try {
					storeGrnT.setReceivedQty(new BigDecimal(receivedQty.get(i)
							.toString()));
				} catch (Exception e) {
					storeGrnT.setReceivedQty(new BigDecimal(0));
				}

				/*try {
					storeGrnT
							.setFreeQty(new Integer(freeQty.get(i).toString()));
				} catch (Exception e) {
					storeGrnT.setFreeQty(new Integer(0));
				}
				 */
				try {
					storeGrnT.setDiscount(new BigDecimal(discountAmount.get(i)
							.toString()));
				} catch (Exception e) {
					storeGrnT.setDiscount(null);
				}

				try {
					if (sos.equalsIgnoreCase("l")) {
						storeGrnT.setTaxAmt_mdq(new BigDecimal(taxAmountMdq
								.get(i).toString()));
						storeGrnT.setExciseDuty(new BigDecimal(ed.get(i)
								.toString()));
					} else {
						storeGrnT.setTax(new BigDecimal(taxAmount.get(i)
								.toString()));
					}
				} catch (Exception e) {
					storeGrnT.setTax(null);
					storeGrnT.setTaxAmt_mdq(null);
					storeGrnT.setExciseDuty(null);
				}

				try {
					storeGrnT.setFinalCostPrice(new BigDecimal(finalCostPrice
							.get(i).toString()));
				} catch (Exception e) {
					storeGrnT.setFinalCostPrice(new BigDecimal(0));
				}

				try {
					storeGrnT.setAmountValue(new BigDecimal(amountValue.get(i)
							.toString()));
				} catch (Exception e) {
					storeGrnT.setAmountValue(new BigDecimal(0));
				}

				//storeGrnT.setFreeItem(freeItem.get(i).toString());
				//	storeGrnT.setDispType(dispType.get(i).toString());
				/*try {
					storeGrnT.setMdqValue(new BigDecimal(mdqValue.get(i)
							.toString()));
				} catch (Exception e) {
					storeGrnT.setMdqValue(new BigDecimal(0));
				}
				 */
				try {
					storeGrnT.setRatePerMdq(new BigDecimal(ratePerMdq.get(i)
							.toString()));
				} catch (Exception e) {
					storeGrnT.setRatePerMdq(new BigDecimal(0));
				}
				try {
					storeGrnT.setMrp(new BigDecimal(mrp.get(i).toString()));
				} catch (Exception e) {
					storeGrnT.setMrp(new BigDecimal(0));
				}
				try {
					storeGrnT.setUnitRate(new BigDecimal(ratePerMdq.get(i)
							.toString()));
				} catch (Exception e) {
					storeGrnT.setUnitRate(new BigDecimal(0));
				}

				try {
					storeGrnT
					.setManufacturerDate(java.sql.Date
							.valueOf(formatterOut.format(formatterIn
									.parse(manufacturerDate.get(i)
											.toString()))));
				} catch (Exception e) {
					storeGrnT.setManufacturerDate(null);
				}

				// SimpleDateFormat formatterIn = new
				// SimpleDateFormat("dd/MM/yyyy");
				// SimpleDateFormat formatterOut = new
				// SimpleDateFormat("yyyy-MM-dd");

				try {
					storeGrnT.setExpiryDate(java.sql.Date.valueOf(formatterOut
							.format(formatterIn.parse(expiryDate.get(i)
									.toString()))));
				} catch (Exception e) {
					storeGrnT.setExpiryDate(null);
				}
				/*try {
					if (loaninStatus.get(i).toString().equals("y")) {
						storeGrnT.setLoanInItem("y");
					} else {
						storeGrnT.setLoanInItem("n");
					}
				} catch (Exception e) {
					storeGrnT.setExpiryDate(null);
				}*/
				storeGrnTList.add(storeGrnT);
				objectList.add(new Integer(itemId.get(i).toString()));
			}

			// Save the Persistence Objects

			/*
			 * Save StoreGrnM data & update StoreFyDocumentNo for Grn Number
			 */

			/*
			 * Criteria c =
			 * session.createCriteria(StoreFyDocumentNo.class).add(Restrictions.eq("Department.Id",
			 * deptId)); storeFyDocumentNoList = c.list(); String grnStartNo =
			 * ""; for (StoreFyDocumentNo storeFyDocumentNo
			 * :storeFyDocumentNoList ) { if(storeFyDocumentNo.getGrnStartNo()!=
			 * null) { grnStartNo=(""+storeFyDocumentNo.getGrnStartNo());
			 * grnStartNo=getMaxNo(grnStartNo); } else {
			 * grnStartNo=getMaxNo(""); } } storeGrnM.setGrnStartNo(grnStartNo);
			 *
			 *
			 * int storeFyId = 0;
			 *
			 * for(StoreFyDocumentNo documentNo :storeFyDocumentNoList) {
			 * storeFyId=documentNo.getId(); } StoreFyDocumentNo
			 * storeFyDocumentNo=(StoreFyDocumentNo)getHibernateTemplate().load(StoreFyDocumentNo.class,storeFyId);
			 * storeFyDocumentNo.setGrnNo(grnNo);
			 * storeFyDocumentNo.setGrnStartNo(grnStartNo);
			 */// hbt.update(storeFyDocumentNo);
			// hbt.refresh(storeFyDocumentNo);
			/*
			 * If Source of Supply is "w" or "l" (only in Local Purchase Case)
			 * Update MasStoreBudget for the current Financial Year Get the
			 * financial Id from MasStoreFinancial Get the Record from
			 * MasStoreBudget : Check Financial Id and Department Id Update the
			 * CRV Committed Amount
			 */

			if (box.getString("validate").equals("t")) {
				if (sos.equalsIgnoreCase("l") || sos.equalsIgnoreCase("w")) {
					MasStoreBudget masStoreBudget = new MasStoreBudget();
					java.util.Date poDate = storeGrnM.getGrnDate();
					BigDecimal poAmount = storeGrnM.getGrnValue();

					List<MasStoreFinancial> masStoreFinancialList = new ArrayList<MasStoreFinancial>();
					masStoreFinancialList = session.createCriteria(
							MasStoreFinancial.class).list();
					java.util.Date start_date = null;
					java.util.Date end_date = null;
					int financial_id = 0;
					for (Iterator iterator2 = masStoreFinancialList.iterator(); iterator2
					.hasNext();) {
						MasStoreFinancial masStoreFinancial = (MasStoreFinancial) iterator2
						.next();
						start_date = (java.util.Date) masStoreFinancial
						.getStartDate();
						end_date = (java.util.Date) masStoreFinancial
						.getEndDate();
						if (poDate.after(start_date) && poDate.before(end_date)) {
							financial_id = masStoreFinancial.getId();
							break;
						} else if (poDate.equals(start_date)
								|| poDate.equals(end_date)) {
							financial_id = masStoreFinancial.getId();
							break;
						}
					}

					List<MasStoreBudget> masStoreBudgetList = new ArrayList<MasStoreBudget>();
					masStoreBudgetList = session.createCriteria(
							MasStoreBudget.class).add(
									Restrictions.eq("Financial.Id", financial_id)).add(
											Restrictions.eq("Department.Id", deptId)).list();
					BigDecimal existing_committed_amount = null;
					BigDecimal existing_balance_amount = null;
					BigDecimal existing_spent_amount = null;
					BigDecimal existing_alotted_amount = null;
					if (masStoreBudgetList != null
							&& masStoreBudgetList.size() > 0) {
						masStoreBudget = masStoreBudgetList.get(0);
						try {
							existing_committed_amount = masStoreBudget
							.getCrvComittedAmount();
						} catch (Exception e) {
							existing_committed_amount = new BigDecimal(0);
						}

						try {
							existing_balance_amount = masStoreBudget
							.getBalanceAmount();
						} catch (Exception e) {
							existing_balance_amount = new BigDecimal(0);
						}

						try {
							existing_spent_amount = masStoreBudget
							.getSpendAmount();
						} catch (Exception e) {
							existing_spent_amount = new BigDecimal(0);
						}

						try {
							existing_alotted_amount = masStoreBudget
							.getTotalAllocatedAmount();
						} catch (Exception e) {
							existing_alotted_amount = new BigDecimal(0);
						}

						masStoreBudget
						.setCrvComittedAmount(existing_committed_amount
								.add(poAmount));
						masStoreBudget.setBalanceAmount(existing_balance_amount
								.subtract(poAmount));
						masStoreBudget.setSpendAmount(existing_spent_amount
								.add(poAmount));

						storeGrnM
						.setCrvComittedAmount(existing_committed_amount);
						storeGrnM.setAllottedAmount(existing_alotted_amount);

						hbt.update(masStoreBudget);
					}
				}
			}
			// hbt.save(storeGrnM);
			hbt.update(storeGrnM);
			hbt.refresh(storeGrnM);
			/*
			 * End of MasStoreBudget Update
			 */

			/*
			 * Updating the Stock in StoreITemBatchStock
			 */
			List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
			StoreItemBatchStock storeItemBatchStock = null;

			if (storeGrnTList.size() > 0) {
				for (int i = 0; i < storeGrnTList.size(); i++) {
					StoreGrnT storeGrnTObj = new StoreGrnT();
					storeGrnTObj = (StoreGrnT) storeGrnTList.get(i);
					storeGrnTObj.setGrnMaster(storeGrnM);
					hbt.save(storeGrnTObj);
					hbt.refresh(storeGrnTObj);

					// Updating Quantity Received in StorePoDetail for the
					// particular Item
					// Only for New Items (not for Loan in Items)
					if (box.getString("validate").equals("t")) {
						if (sos.equalsIgnoreCase("l")) {
							List<StorePoDetail> storePoDetailList = new ArrayList<StorePoDetail>();
							StorePoDetail storePoDetail = new StorePoDetail();
							storePoDetailList = session.createCriteria(
									StorePoDetail.class).add(
											Restrictions.eq("Po.Id", po_id)).add(
													Restrictions.eq("Item.Id", storeGrnTObj
															.getItem().getId())).list();

							if (storePoDetailList != null
									&& storePoDetailList.size() > 0) {
								storePoDetail = storePoDetailList.get(0);
								BigDecimal existingQuantity = null;
								BigDecimal quantity_to_be_added = null;
								BigDecimal newQuantity = new BigDecimal(0);
								BigDecimal mdq = storePoDetail.getMdqValue();

								existingQuantity = storePoDetail
								.getQuantityReceived();
								BigDecimal recd_qty = storeGrnTObj
								.getReceivedQty();
								// quantity_to_be_added = recd_qty.divide(new
								// BigDecimal(mdq), new
								// MathContext(4,RoundingMode.UP));
								quantity_to_be_added = recd_qty;

								if (existingQuantity == null)
									existingQuantity = new BigDecimal(0);

								newQuantity = existingQuantity
								.add(quantity_to_be_added);
								storePoDetail.setQuantityReceived(newQuantity);
								hbt.update(storePoDetail);
								hbt.refresh(storePoDetail);
							}
						}
					}
					// Update Stock in Item Batch Stock
					// Only for New Items (not for Loan in Items)

					int item_id = storeGrnTObj.getItem().getId();
					int brand_id = storeGrnTObj.getBrand().getId();
					BigDecimal cost_price = storeGrnTObj.getFinalCostPrice();
					String batch_no = storeGrnTObj.getBatchNo();
					int department_id = storeGrnM.getDepartment().getId();

					if (box.getString("validate").equals("t")) {
						storeItemBatchStockList = hbt
						.find("from jkt.hms.masters.business.StoreItemBatchStock as inp where inp.Item.Id = "
								+ item_id
								+ " and inp.CostPrice = "
								+ cost_price
								+ "and inp.Department.Id= "
								+ department_id
								+ "and inp.BatchNo ='"
								+ batch_no
								+ "' and inp.Brand.Id = "
								+ brand_id);

						if (storeItemBatchStockList != null
								&& storeItemBatchStockList.size() > 0) {
							if (loaninStatus.get(i).toString()
									.equalsIgnoreCase("n")) {
								storeItemBatchStock = storeItemBatchStockList
								.get(0);
								BigDecimal existing_qty = new BigDecimal(0);

								if (storeItemBatchStock.getReceivedQty() != null) {
									existing_qty = storeItemBatchStock
									.getReceivedQty();
								} else {
									existing_qty = new BigDecimal(0);
								}

								BigDecimal recd_qty = new BigDecimal(
										convertedStock.get(i).toString(),new MathContext(3, RoundingMode.UP));

								BigDecimal new_qty = new BigDecimal(0);
								new_qty = existing_qty.add(recd_qty);

								BigDecimal existing_closing_stock = storeItemBatchStock
								.getClosingStock();
								BigDecimal new_closing_stock = new BigDecimal(0);
								new_closing_stock = existing_closing_stock
								.add(recd_qty);

								int id = storeItemBatchStock.getId();
								storeItemBatchStock = (StoreItemBatchStock) getHibernateTemplate()
								.load(StoreItemBatchStock.class, id);

								storeItemBatchStock.setReceivedQty(new_qty);
								storeItemBatchStock
								.setClosingStock(new_closing_stock);

								HibernateTemplate hbt1 = getHibernateTemplate();
								hbt1.setFlushModeName("FLUSH_EAGER");
								hbt1.setCheckWriteOperations(false);
								hbt1.update(storeItemBatchStock);
							} else {
								// Update Loanin qty to 0
								storeItemBatchStock = storeItemBatchStockList
								.get(0);
								storeItemBatchStock
								.setLoanInQty(new BigDecimal(0));
								HibernateTemplate hbt1 = getHibernateTemplate();
								hbt1.setFlushModeName("FLUSH_EAGER");
								hbt1.setCheckWriteOperations(false);
								hbt1.update(storeItemBatchStock);
							}
						} else {
							if (loaninStatus.get(i).toString()
									.equalsIgnoreCase("n")) {
								storeItemBatchStock = new StoreItemBatchStock();
								storeItemBatchStock
								.setDepartment(new MasDepartment(
										storeGrnM.getDepartment()
										.getId()));
								storeItemBatchStock.setItem(new MasStoreItem(
										storeGrnTObj.getItem().getId()));
								storeItemBatchStock.setBatchNo(storeGrnTObj
										.getBatchNo());

								if (storeGrnTObj.getLotNo() != null) {
									storeItemBatchStock.setLotNo(storeGrnTObj
											.getLotNo());
								} else {
									storeItemBatchStock.setLotNo(storeGrnTObj
											.getBrand().getBrandName()
											+ ","
											+ storeGrnTObj.getItem().getId()
											+ "," + storeGrnTObj.getBatchNo());
								}

								BigDecimal recd_qty = new BigDecimal(
										Double.valueOf((convertedStock.get(i).toString())));
								storeItemBatchStock.setReceivedQty(recd_qty);
								storeItemBatchStock.setFreeItem(storeGrnTObj
										.getFreeItem());
								storeItemBatchStock.setBrand(new MasStoreBrand(
										storeGrnTObj.getBrand().getId()));
								storeItemBatchStock.setCostPrice(storeGrnTObj
										.getFinalCostPrice());
								storeItemBatchStock.setClosingStock(recd_qty);
								storeItemBatchStock.setExpiryDate(storeGrnTObj
										.getExpiryDate());

								HibernateTemplate hbt1 = getHibernateTemplate();
								hbt1.setFlushModeName("FLUSH_EAGER");
								hbt1.setCheckWriteOperations(false);
								hbt1.save(storeItemBatchStock);
							} // if loaninId =0
						} // if
					} // End validate if
				} // end of for loop
			} // if itembatchstocksize > 0
			// } //end of if GrnTlist > 0

			HibernateTemplate hbt3 = getHibernateTemplate();
			hbt3.setFlushModeName("FLUSH_EAGER");
			hbt3.setCheckWriteOperations(false);
			if (box.getString("validate").equals("t")) {
				if ((sos.equalsIgnoreCase("a"))) {
					if(indentOrPoId != 0){
						StoreIndentM storeIndentM = (StoreIndentM) getHibernateTemplate()
						.load(StoreIndentM.class, indentOrPoId);
						storeIndentM.setStatus("p");
						hbt3.update(storeIndentM);
					}
				} else if (sos.equalsIgnoreCase("l")) {
					List<StorePoDetail> storePoDetailList = new ArrayList<StorePoDetail>();
					List<StoreGrnT> storeGrnTranList = new ArrayList<StoreGrnT>();
					List<StorePoDetail> storePoDetailTotList = new ArrayList<StorePoDetail>();
					boolean status = true;

					storePoDetailList = session.createCriteria(
							StorePoDetail.class).createAlias("Po", "P").add(
									Restrictions.eq("P.Id", po_id)).add(
											Restrictions.isNull("Cancelled")).list();

					for (StorePoDetail storePoDetail : storePoDetailList) {
						if (storePoDetail.getQuantityReceived() != null) {
							if (storePoDetail.getQuantityOrdered().intValue() == storePoDetail
									.getQuantityReceived().intValue()) {
								status = true;
							} else {
								status = false;
								break;
							}
						} else {
							status = false;
							break;
						}
					}
					StorePoHeader storePoHeader = (StorePoHeader) getHibernateTemplate()
					.load(StorePoHeader.class, po_id);
					if (status) {
						storePoHeader.setStatus("p");
					}
					int grnMasterId = 0;
					// storePoHeader.setStoreGrnM(storeGrnM);
					hbt3.update(storePoHeader);
				}
			}
			tx.commit();
			conFlag = true;
		} catch (Exception e) {
			if (tx != null) {
				tx.rollback();
			}
			// throw e; // or display error message
			e.printStackTrace();
		}
		map.put("maxIndentNo", no);
		map.put("conFlag", conFlag);
		return map;
	}

	public Map getSOItemDetails(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> masterDataMap = new HashMap<String, Object>();
		List<StorePoDetail> storePoDetailList = new ArrayList<StorePoDetail>();
		List<StorePoHeader> storePoHeaderList = new ArrayList<StorePoHeader>();
		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;

		List objectList = new ArrayList();
		List objectList1 = new ArrayList();
		String itemField = box.get("search_text");
		String pvmsNoField = box.get("pvms");

		String autoHint = box.get(itemField);
		try {
			String str = "%" + itemField + "%";
			String str1 = "%" + pvmsNoField + "%";

			Criteria ch = session.createCriteria(StorePoHeader.class).add(
					Restrictions.eq("Id", box.getInt("po_id")));
			storePoHeaderList = ch.list();
			StorePoHeader storePoHeader = (StorePoHeader) storePoHeaderList
			.get(0);

			Criteria cd = session.createCriteria(StorePoDetail.class)
			.createAlias("Po", "p").createAlias("Item", "item").add(
					Restrictions.eq("p.Id", box.getInt("po_id")));

			if (pvmsNoField != null && !pvmsNoField.equals("")) {
				cd = cd.add(Restrictions.like("item.PvmsNo", str1));
			} else if (itemField != null && !itemField.equals("")) {
				cd = cd.add(Restrictions.like("item.Nomenclature", str));
			}
			storePoDetailList = cd.list();



			int j=0;
			for (StorePoDetail storePoDetail : storePoDetailList) {
				int item_id = 0;
				String pvmsNo = null;
				String nomenclature = null;
				String au = null;
				int preId=0;

				if (storePoDetail.getItem() != null) {
					pvmsNo = storePoDetail.getItem().getPvmsNo();
					item_id = storePoDetail.getItem().getId();
					nomenclature = storePoDetail.getItem().getNomenclature();

					if (storePoDetail.getItem().getItemConversion() != null) {
						au = storePoDetail.getItem().getItemConversion()
						.getPurchaseUnit().getUnitName();
					} else {
						au = "-";
					}
					/*if(storePoDetail.getPreId()!=null){
						preId=storePoDetail.getPreId();
					}*/

					hData = new HashMap<String, Object>();
					hData.put("itemId", item_id);
					hData.put(PVMS_NO, pvmsNo);
					hData.put(NOMENCLATURE, nomenclature);
					hData.put(AU, au);
					hData.put("preId", preId);
					vResult.add(hData);
				}

			}
		} catch (Exception e) {
			e.printStackTrace();

		}
		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}

		try {
			pagedArray = new PageUtil().convertToPagedArrayIndexLen(testPageData,box,vResult.size());
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("pagedArray", pagedArray);
		map.put("itemField", itemField);
		map.put("pvmsNoField", pvmsNoField);
		map.put("storePoHeaderList", storePoHeaderList);
		map.put("storePoDetailList", storePoDetailList);
		return map;
	}

	public Map<String, Object> findloanInItems(Map<String, Object> dataMap) {
		// TODO Auto-generated method stub
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreLoaninM> storeLoanInList = new ArrayList<StoreLoaninM>();
		Session session = (Session) getSession();
		String soId = "0";
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

		if (dataMap.get("soId") != null && !dataMap.get("soId").equals("")) {
			soId = (String) dataMap.get("soId");
		}
		try {

			String qry = "select * from store_loanin_m where po_id  = '" + soId
			+ "' and status = 'o'";
			storeLoanInList = (List) session.createSQLQuery(qry).list();

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("storeLoanInList", storeLoanInList);
		return map;
	}

	public Map<String, Object> findGrnLedgeraction(Map<String, Object> dataMap) {
		// TODO Auto-generated method stub
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreGrnM> storegrnMList = new ArrayList<StoreGrnM>();
		Session session = (Session) getSession();
		String grnNo = "0";
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		int deptId = 0;
		if (dataMap.get("grnNo") != null && !dataMap.get("grnNo").equals("")) {
			grnNo = (String) dataMap.get("grnNo");
		}

		if (dataMap.get("deptId") != null && !dataMap.get("deptId").equals("")) {
			deptId = (Integer) dataMap.get("deptId");
		}
		try {
			String qry = "select * from store_grn_m where grn_no =  '" + grnNo
			+ "' and status = 'v' and department_id= '" + deptId + "'";
			storegrnMList = (List) session.createSQLQuery(qry).list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("storegrnMList", storegrnMList);
		return map;
	}

	// ::::::::::::: END CRV VALIDATION:::::::::::::::::::::::::::
	public Map<String, Object> pendingSupplierOrderDetails(
			Map<String, Object> dataMap) {
		// TODO Auto-generated method stub
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();

		Criteria criteria = null;

		try {
			criteria = session.createCriteria(MasDepartment.class).add(
					Restrictions.eq("Status", "y"));
			departmentList = criteria.list();
			map.put("departmentList", departmentList);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public Map<String, Object> showItemSearchJsp(Box box) {

		List<MasStoreItem> masStoreItemList = new ArrayList<MasStoreItem>();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String str = box.get("pvms_no");
			if (str != null && str.length() > 0) {
				str = "%" + str.replace(" ", "%") + "%";
				Session session = (Session) getSession();
				org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
				// masIcdList =
				// session.createCriteria(MasIcd.class).add(Restrictions.like("IcdName",
				// str)).list();
				String query = "from MasStoreItem as item  where item.PvmsNo like '"
					+ str + "' and item.Status='y'";
				Query q = session.createQuery(query);
				masStoreItemList = q.list();
			}
			map.put("masStoreItemList", masStoreItemList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public Map<String, Object> showPvmsNomencaltureSearchJsp(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();

		List<MasStoreItem> masStoreItemList = new ArrayList<MasStoreItem>();
		session = (Session) getSession();

		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

		String str = box.get("nomenclature");
		String strForPvms = box.get("pvms");
		if (str != null && str.length() > 0) {
			str = "%" + str.replace(" ", "%") + "%";
			masStoreItemList = hbt
			.find(" from jkt.hms.masters.business.MasStoreItem as m where "
					+ " m.Nomenclature like '" + str + "'");
		} else if (strForPvms != null && strForPvms.length() > 0) {

			strForPvms = strForPvms.replace(" ", "%") + "%";
			masStoreItemList = hbt
			.find(" from jkt.hms.masters.business.MasStoreItem as m where "
					+ " m.PvmsNo like '" + strForPvms + "' ");
		}
		map.put("masStoreItemList", masStoreItemList);
		return map;
	}

	public Map<String, Object> showLoanOutStatusJsp(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasDepartment> masDepartmentList = new ArrayList<MasDepartment>();
		session = (Session) getSession();
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

		masDepartmentList = session.createCriteria(MasDepartment.class).add(
				Restrictions.eq("Status", "y")).list();
		map.put("masDepartmentList", masDepartmentList);
		return map;
	}

	public Map<String, Object> getItemId(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> masStoreItemList = new ArrayList<MasStoreItem>();
		Session session = (Session) getSession();
		String pvmsNo = "";
		int itemId = 0;
	//	java.sql.Date fromDate = null;
	//	java.sql.Date toDate = null;
		pvmsNo = box.getString("pvmsNo");

		if (!pvmsNo.equals("") && pvmsNo.length() > 0) {
			masStoreItemList = (List<MasStoreItem>) session.createCriteria(
					MasStoreItem.class)
					.add((Restrictions.eq("PvmsNo", pvmsNo))).list();

			if (masStoreItemList != null && masStoreItemList.size() > 0) {
				MasStoreItem masStoreItem = (MasStoreItem) masStoreItemList
				.get(0);
				itemId = masStoreItem.getId();
			}
		}
		if (itemId == 0)
			itemId = box.getInt("item_id");

		java.sql.Connection con = session.connection();
		Date fromDate = HMSUtil.convertStringTypeDateToDateType(box.getString("fromDate"));
		Date toDate = HMSUtil.convertStringTypeDateToDateType(box.getString("toDate"));
		SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
		String sql = "{call ledger_proc('" + sdf.format(fromDate) + "','"
		+ sdf.format(toDate) + "'," + box.getInt("deptId") + "," 
		+ itemId +", "+  box.getInt("hospitalId") +")}";

		try {
			CallableStatement cals = con.prepareCall(sql);
			cals.execute();
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		map.put("itemId", itemId);
		return map;
	}
	public Map<String, Object> getMasItemId(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> masStoreItemList = new ArrayList<MasStoreItem>();
		Session session = (Session) getSession();
		String pvmsNo = "";
		int itemId = 0;
		java.sql.Date fromDate = null;
		java.sql.Date toDate = null;
		pvmsNo = box.getString("pvmsNo");

		if (!pvmsNo.equals("") && pvmsNo.length() > 0) {
			masStoreItemList = (List<MasStoreItem>) session.createCriteria(
					MasStoreItem.class)
					.add((Restrictions.eq("PvmsNo", pvmsNo))).list();

			if (masStoreItemList != null && masStoreItemList.size() > 0) {
				MasStoreItem masStoreItem = (MasStoreItem) masStoreItemList
				.get(0);
				itemId = masStoreItem.getId();
			}
		}
		if (itemId == 0)
			itemId = box.getInt("item_id");
		map.put("itemId", itemId);
		return map;
	}

	public Map<String, Object> checkgrnNo(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreGrnM> storeGrnMList = new ArrayList<StoreGrnM>();
		String grnNo = "";
		int hospitalId=0;
		Session session = (Session) getSession();
		grnNo = box.getString(GRN_NO);
		hospitalId=box.getInt("hospitalId");
		storeGrnMList = session.createCriteria(StoreGrnM.class).add(
				Restrictions.eq("GrnNo", grnNo)).add(
						Restrictions.eq("Department.Id", box.getInt("deptId"))).add(Restrictions.eq("Hospital.Id", box.getInt("hospitalId"))).list();
		map.put("messageTOBeVisibleToTheUser", "" + grnNo
				+ "  CRV Already Created Successfully");
		map.put("storeGrnMList", storeGrnMList);
		return map;
	}

	public Map<String, Object> getVendorDetails(Box box) {

		List<MasStoreSupplier> masSupplierList = new ArrayList<MasStoreSupplier>();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String str = box.get("supplier_name");
			if (str != null && str.length() > 0) {
				str = "%" + str.replace(" ", "%") + "%";
				Session session = (Session) getSession();
				org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
				// masIcdList =
				// session.createCriteria(MasIcd.class).add(Restrictions.like("IcdName",
				// str)).list();
				String query = "from MasStoreSupplier as supplier  where supplier.SupplierName like '"
					+ str + "' and supplier.Status='y'";
				Query q = session.createQuery(query);
				masSupplierList = q.list();
			}
			map.put("masSupplerList", masSupplierList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	public boolean closeIssueCiv(int issueId) {
		// TODO Auto-generated method stub
		boolean succes = false;
		Session session = (Session) getSession();
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {
			StoreIssueM storeIssueM = (StoreIssueM) hbt.load(StoreIssueM.class,
					issueId);
			storeIssueM.setStatus("p");
			hbt.update(storeIssueM);
			hbt.refresh(storeIssueM);
			succes = true;
		} catch (Exception e) {
			e.printStackTrace();
		}

		return succes;
	}

	/** method to get the list based on pvms no */
	public Map<String, Object> getItemListForLoanoutByAutocompleteBalancePvms(
			Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		try {
			session = (Session) getSession();
			String pvmsNo = null;
			int deptId = 0;
			int balanceId = 0;
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
			balanceId = Integer.parseInt("" + dataMap.get("balanceId"));
			List objectList = new ArrayList();
			List objectList1 = new ArrayList();
			try {
				String str = "%" + dataMap.get("autoHint") + "%";
				String qry = "SELECT t.item_id FROM store_balance_t t,store_balance_m m where t.store_balance_m_id='"
					+ balanceId + "' and m.id=t.store_balance_m_id ";
				objectList = (List) session.createSQLQuery(qry).list();
				if (objectList.size() != 0) {
					Criteria c = session.createCriteria(MasStoreItem.class)
					.add(Restrictions.eq("Status", "y")).add(
							Restrictions.like("PvmsNo", str)).add(
									Restrictions.not(Restrictions.in("Id",
											objectList)));
					c.setFirstResult(0);
					c.setMaxResults(10);
					itemList = c.list();
				} else {
					Criteria c = session.createCriteria(MasStoreItem.class)
					.add(Restrictions.eq("Status", "y")).add(
							Restrictions.like("PvmsNo", str));
					c.setFirstResult(0);
					c.setMaxResults(10);
					itemList = c.list();

				}
			} catch (HibernateException e) {
				e.printStackTrace();
			}
			map.put("itemList", itemList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public boolean checkCrvStatus(Box box) {
		// TODO Auto-generated method stub
		boolean succes = false;
		Session session = (Session) getSession();
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		int grn_id = box.getInt(GRN_ID);
		try {
			StoreGrnM storeGrnM = (StoreGrnM) hbt.load(StoreGrnM.class, grn_id);
			if (storeGrnM.getStatus().equals("v")) {
				succes = true;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return succes;
	}

	public Map<String, Object> deleteOpeningBalanceItems(Box box) {
		List<MasStoreSupplier> masSupplierList = new ArrayList<MasStoreSupplier>();
		Map<String, Object> map = new HashMap<String, Object>();
		Vector itemId = box.getVector(ITEMS_TO_BE_DELETED);
		try {
			if (itemId.size() > 0) {
				for (int i = 0; i <= itemId.size(); i++) {

				}
			}
			map.put("masSupplerList", masSupplierList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public Map<String, Object> validateOpeningBalanceItems(Box box) {
		// TODO Auto-generated method stub
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		List<StoreBalanceM> storeBalanceMList = new ArrayList<StoreBalanceM>();
		storeBalanceMList = session.createCriteria(StoreBalanceM.class).add(
				Restrictions.eq("BalanceNo", box.get("balanceNo"))).add(
						Restrictions.eq("Department.Id", box.getInt("deptId"))).list();

		if (storeBalanceMList != null && storeBalanceMList.size() > 0) {
			StoreBalanceM storeBalanceM = (StoreBalanceM) storeBalanceMList
			.get(0);
			storeBalanceM.setStatus("p");
			hbt.save(storeBalanceM);
			hbt.refresh(storeBalanceM);
		}

		map.put("messageType", "success");

		return map;
	}

	public Map<String, Object> deleteGridItemsIssueToDispensary(Box box) {
		Session session = (Session) getSession();
		List<StoreIssueT> storeIssueTList = new ArrayList<StoreIssueT>();
		List<StoreIssueM> storeIssueMList = new ArrayList<StoreIssueM>();
		StoreIssueT storeIssueT = new StoreIssueT();
		String message = "";
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			HibernateTemplate hbt = getHibernateTemplate();
			Vector srno = box.getVector("srno");
			Vector items = box.getVector("id");
			Vector delete = box.getVector(ITEMS_TO_BE_DELETED);
			String obj = null;
			int issueUnit = box.getInt("issueUnit");
			storeIssueTList = session.createCriteria(StoreIssueT.class)
			.add(Restrictions.eq("IssueM.Id",issueUnit))
			.add(Restrictions.isNotNull("AckDate")).list();

			storeIssueMList = session.createCriteria(StoreIssueM.class).add(Restrictions.eq("Id",issueUnit)).list();
			String issuemStatus = "";
			if(storeIssueMList.size() > 0){
				issuemStatus = storeIssueMList.get(0).getStatus();
			}
			if(issuemStatus.equals("o")){
				if(storeIssueTList.size() == 0 ){
					for (int i = 0; i < delete.size(); i++) {
						int itemId = Integer.parseInt(delete.get(i).toString());
						hbt.setFlushModeName("FLUSH_EAGER");
						hbt.setCheckWriteOperations(false);
						List<StoreIssueT> storeIsseT1List = new ArrayList<StoreIssueT>();
						storeIsseT1List = session.createCriteria(StoreIssueT.class)
						.add(Restrictions.eq("IssueM.Id",issueUnit))
						.add(Restrictions.eq("Item.Id", itemId))
						.add(Restrictions.eq("Issued", "y")).list();
						BigDecimal quantity = new BigDecimal("0");
						String batch= "";
						for(StoreIssueT issueT : storeIsseT1List){
							List<StoreItemBatchStock> storeItemStock = new ArrayList<StoreItemBatchStock>();
							storeItemStock = session.createCriteria(StoreItemBatchStock.class)
							.add(Restrictions.eq("Item.Id", issueT.getItem().getId()))
							.add(Restrictions.eq("BatchNo", issueT.getBatchNo()))
							.add(Restrictions.eq("Department.Id", box.getInt("deptId"))).list();

							for(StoreItemBatchStock stock : storeItemStock){
								StoreItemBatchStock stockItem = (StoreItemBatchStock)hbt.load(StoreItemBatchStock.class, stock.getId());
								stockItem.setIssueQty(stockItem.getIssueQty().subtract(issueT.getQtyIssued()));
								stockItem.setClosingStock(stockItem.getClosingStock().add(issueT.getQtyIssued()));
								hbt.save(stockItem);
								hbt.refresh(stockItem);
							}
						}
						String hql = "delete from jkt.hms.masters.business.StoreIssueT as a where a.IssueM.Id ="+issueUnit+" and a.Item.Id = "+itemId+" and a.Issued ='y'";
						Query query = session.createQuery(hql);
						int row = query.executeUpdate();


						message = "Item deleted successfully.";
					}
				}else{
					message = "you can not delete. Items are already acknowledged";
				}
			}else{
				message = "you can not delete. CIV is closed.";
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("message", message);
		return map;
	}

	public Map<String, Object> showNewDepartmentMMFJsp(Box box) {
		// TODO Auto-generated method stub
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		Session session = (Session) getSession();
		departmentList = session.createCriteria(MasDepartment.class).add(Restrictions.eq("Status","y")).list();
		map.put("departmentList",departmentList);
		return map;
	}

	public Map<String, Object> doAddNewMmfItems(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		session = (Session) getSession();
		Map<String,Object> utilMap = new HashMap<String,Object>();
		utilMap = (Map)HMSUtil.getCurrentDateAndTime();
		String date = (String)utilMap.get("currentDate");
		String time = (String)utilMap.get("currentTime");
		itemList = session.createCriteria(MasStoreItem.class).add(Restrictions.eq("PvmsNo", box.getString("pvms")))
		.add(Restrictions.eq("Status", "y")).list();
		int itemId = 0;
		if(itemList.size() > 0){
			itemId = itemList.get(0).getId();
		}
		//Vector items = box.getVector("itemId");
		//Vector qtymmf = box.getVector("qtymmf");
		//Vector items_to_be_added = box.getVector(ITEMS_TO_BE_ADDED);
		int newmmfMasterId = 0;
		int mmfMasterId = box.getInt("mmfMasterId");
		int previousYear = box.getInt("previousYear");
		StoreMmfDepartmentM storeMmfDepartmentM = null;
		List<StoreMmfDepartmentM> storeMmfDepartmentMList1 = null;

		StoreMmfDepartmentM newMObj = null;
		StoreMmfDepartmentT storeMmfDepartmentT = null;
		MasStoreItem masStoreItem = null;
		int sr_no = 0;
		int currentYear = box.getInt("year");
		String mmfNo = box.get("mmfNo");
		String no = "";
		StoreFyDocumentNo storeFyDocumentNo = new StoreFyDocumentNo();

		try {
			List<StoreMmfDepartmentM> storeMmfDepartmentMList = new ArrayList<StoreMmfDepartmentM>();
			List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
			List<StoreMmfDepartmentT> storeMmfItemTList = new ArrayList<StoreMmfDepartmentT>();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			storeMmfDepartmentTList = session
			.createCriteria(StoreMmfDepartmentT.class)
			.createAlias("StoreMmfDepartmentM", "m")
			.add(Restrictions.eq("m.MmfForTheYear", box.getInt("year")))
			.add(Restrictions.eq("m.StoreWardDept.Id",
					box.getInt("departmentId")))
					.add(Restrictions.eq("m.MmfStoreType", box.get("storeType"))).addOrder(
							Order.desc("SrNo")).list();

			storeMmfItemTList = session
			.createCriteria(StoreMmfDepartmentT.class)
			.createAlias("StoreMmfDepartmentM", "m")
			.add(Restrictions.eq("m.MmfForTheYear", box.getInt("year")))
			.add(Restrictions.eq("m.StoreWardDept.Id",box.getInt("departmentId")))
			.add(Restrictions.eq("Item.Id", itemId))
			.add(Restrictions.eq("m.MmfStoreType", box.get("storeType"))).addOrder(
					Order.desc("SrNo")).list();

			if (storeMmfDepartmentTList != null
					&& storeMmfDepartmentTList.size() > 0) {
				sr_no = storeMmfDepartmentTList.get(0).getSrNo().intValue();
			}



			storeMmfDepartmentMList = session
			.createCriteria(StoreMmfDepartmentM.class)
			.add(Restrictions.eq("MmfForTheYear", box.getInt("year")))
			.add(Restrictions.eq("StoreWardDept.Id",box.getInt("departmentId")))
			.add(Restrictions.eq("MmfStoreType", box.get("storeType")))
			.list();

			mmfNo = "01/" + currentYear;
			newMObj = new StoreMmfDepartmentM();
			if (storeMmfDepartmentMList.size() > 0
					&& storeMmfDepartmentMList != null) {
				newMObj = storeMmfDepartmentMList.get(0);
				newmmfMasterId = newMObj.getId();
			} else {
				newMObj.setDocNo(mmfNo);
				map.put("docId", mmfNo);
				newMObj.setLastChgBy(box.get("userName"));
				newMObj.setLastChgDate(HMSUtil
						.convertStringTypeDateToDateType(date));
				newMObj.setLastChgTime(time);
				newMObj.setMmfForTheYear(currentYear);
				newMObj.setRemarks(box.get(REMARKS));
				newMObj.setStatus("o");
				newMObj.setCheckedBy(box.get("userName"));
				newMObj.setPreparedBy(box.get("userName"));
				MasDepartment storeWardDept = new MasDepartment();
				storeWardDept.setId(box.getInt("departmentId"));
				newMObj.setStoreWardDept(storeWardDept);

				MasHospital masHospital = new MasHospital();
				masHospital.setId(box.getInt("hospitalId"));
				newMObj.setHospital(masHospital);
				newMObj.setMmfStoreType(box.get("storeType"));
				hbt.save(newMObj);
				hbt.refresh(newMObj);

				List<StoreFyDocumentNo> mmfNoList = session
				.createCriteria(StoreFyDocumentNo.class)
				.add(Restrictions.eq("Department.Id",
						box.getInt("departmentId"))).list();

				if (mmfNoList != null && mmfNoList.size() > 0) {
					storeFyDocumentNo = mmfNoList.get(0);
					storeFyDocumentNo.setMmfNo(mmfNo);
					hbt.saveOrUpdate(storeFyDocumentNo);
					hbt.refresh(storeFyDocumentNo);
				} else {
					storeFyDocumentNo.setMmfNo(mmfNo);
					MasDepartment masDepartment = new MasDepartment();
					masDepartment.setId(box.getInt("departmentId"));
					storeFyDocumentNo.setDepartment(masDepartment);
					
					MasHospital hospital = new MasHospital();
					hospital.setId(box.getInt("hospitalId"));
					storeFyDocumentNo.setHospital(hospital);
					
					hbt.save(storeFyDocumentNo);
					hbt.refresh(storeFyDocumentNo);
				}
				storeMmfDepartmentMList1 = session
				.createCriteria(StoreMmfDepartmentM.class)
				.add(Restrictions.eq("MmfForTheYear", box.getInt("year")))
				.add(Restrictions.eq("StoreWardDept.Id",box.getInt("departmentId")))
				.add(Restrictions.eq("MmfStoreType", box.get("storeType"))).list();
				newmmfMasterId = storeMmfDepartmentMList1.get(0).getId();
			}

			if (itemId != 0 && storeMmfItemTList.size() == 0) {
				masStoreItem = new MasStoreItem();
				masStoreItem.setId(itemId);
				storeMmfDepartmentT = new StoreMmfDepartmentT();
				storeMmfDepartmentT.setItem(masStoreItem);
				storeMmfDepartmentT.setStoreMmfDepartmentM(newMObj);
				storeMmfDepartmentT.setMmfInQty(new BigDecimal("0"));
				storeMmfDepartmentT.setCurrYearMmf(new BigDecimal(box.getString("MMFQTY")));
				//storeMmfDepartmentT.setApprovedStatus("p");
				storeMmfDepartmentT.setLastChgBy(box.get("userName"));
				storeMmfDepartmentT.setRemarks(box.get(REMARKS));
				storeMmfDepartmentT.setLastChgDate(HMSUtil
						.convertStringTypeDateToDateType(date));
				storeMmfDepartmentT.setLastChgTime(time);
				List<StoreMmfDepartmentT> preStoreMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
				preStoreMmfDepartmentTList = hbt
				.find("from StoreMmfDepartmentT  premmf where premmf.Item="
						+ itemId
						+ " and premmf.StoreMmfDepartmentM.MmfForTheYear="
						+ (currentYear - 1)
						+ " and premmf.StoreMmfDepartmentM.StoreWardDept.Id="
						+ box.getInt("departmentId"));
				if (preStoreMmfDepartmentTList != null
						&& preStoreMmfDepartmentTList.size() > 0)
					storeMmfDepartmentT.setPreYearMmf((preStoreMmfDepartmentTList.get(0)).getMmfInQty());
				else
					storeMmfDepartmentT.setPreYearMmf(new BigDecimal(0));

				storeMmfDepartmentT.setSrNo(++sr_no);
				hbt.save(storeMmfDepartmentT);
				hbt.refresh(storeMmfDepartmentT);
			}
			box.put("mmfMasterId", newmmfMasterId);
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("newmmfMasterId", newmmfMasterId);
		map.put("currentYear", currentYear);
		map.put("previousYear", previousYear);
		return map;
	}

	public Map<String, Object> createAndImportTotalMmfDepartmentData(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();
		String pvms = null;
		String nomenclature = null;
		String au = null;
		BigDecimal qtymmf = new BigDecimal(0);
		BigDecimal currQtymmf = new BigDecimal(0);
		BigDecimal preQtymmf = new BigDecimal(0);
		String remark = null;
		int id = 0;
		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");

		List<StoreMmfDepartmentT> storeMmfDepartmentTListPreviousYear = new ArrayList<StoreMmfDepartmentT>();
		List<StoreMmfDepartmentT> storeMmfDepartmentTListCurrentYear = new ArrayList<StoreMmfDepartmentT>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		StoreFyDocumentNo storeFyDocumentNo = null;
		List<StoreMmfDepartmentM> storeMmfDepartmentMListPreviousYear = new ArrayList<StoreMmfDepartmentM>();
		List<StoreMmfDepartmentM> storeMmfDepartmentMListCurrentYear = new ArrayList<StoreMmfDepartmentM>();
		int currentYear = box.getInt(MMF_DEPARTMENT_DATE);
		int previousYear = currentYear - 1;
		String mmfNo = "";
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			StoreMmfDepartmentT storeMmfDepartmentT1 = new StoreMmfDepartmentT();
			int sno = 0;
			// String mmfNo = box.get("mmfNo");
			// For Generating & Saving new MMF No for StoreFyDocumentNo Table

			storeMmfDepartmentMListCurrentYear = session
			.createCriteria(StoreMmfDepartmentM.class)
			.add(Restrictions.eq("MmfForTheYear", currentYear))
			.add(Restrictions.eq("MmfStoreType", box.get("storeType")))
			.list();

			storeMmfDepartmentMListPreviousYear = session
			.createCriteria(StoreMmfDepartmentM.class)
			.add(Restrictions.eq("MmfForTheYear", previousYear))
			.add(Restrictions.eq("MmfStoreType", box.get("storeType")))
			.list();
			if (storeMmfDepartmentMListPreviousYear != null
					&& storeMmfDepartmentMListPreviousYear.size() > 0) {
				for(StoreMmfDepartmentM storeMmfDepartmentM : storeMmfDepartmentMListPreviousYear){
					List<StoreMmfDepartmentM> storeMmfDepartmentMListCurrentYearD = new ArrayList<StoreMmfDepartmentM>();
					List<StoreMmfDepartmentT> storeMmfDepartmentTListCurrentYearD = new ArrayList<StoreMmfDepartmentT>();
					List<StoreMmfDepartmentT> storeMmfDepartmentTListPreviousYearD = new ArrayList<StoreMmfDepartmentT>();

					storeMmfDepartmentMListCurrentYearD = session
					.createCriteria(StoreMmfDepartmentM.class)
					.add(Restrictions.eq("MmfForTheYear", currentYear))
					.add(Restrictions.eq("StoreWardDept.Id",storeMmfDepartmentM.getStoreWardDept().getId()))
					.add(Restrictions.eq("MmfStoreType", box.get("storeType"))).list();

					storeMmfDepartmentTListCurrentYearD = session
					.createCriteria(StoreMmfDepartmentT.class).addOrder(Order.asc("SrNo"))
					.createAlias("StoreMmfDepartmentM", "m")
					.add(Restrictions.eq("m.MmfForTheYear", currentYear))
					.add(Restrictions.eq("m.StoreWardDept.Id",
							storeMmfDepartmentM.getStoreWardDept().getId()))
							.add(Restrictions.eq("m.MmfStoreType", box.get("storeType"))).list();

					storeMmfDepartmentTListPreviousYearD = session
					.createCriteria(StoreMmfDepartmentT.class).addOrder(Order.asc("SrNo"))
					.createAlias("StoreMmfDepartmentM", "m")
					.add(Restrictions.eq("m.MmfForTheYear", previousYear))
					.add(Restrictions.eq("m.StoreWardDept.Id",
							storeMmfDepartmentM.getStoreWardDept().getId()))
							.add(Restrictions.eq("m.MmfStoreType", box.get("storeType"))).list();

					if(storeMmfDepartmentTListCurrentYearD.size() == 0){
						StoreMmfDepartmentM storeMmfDepartmentMD = new StoreMmfDepartmentM();
						if(storeMmfDepartmentMListCurrentYearD.size() == 0){
							departmentList = getHibernateTemplate()
							.find("from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y'");
							approvedByEmployeeList = getHibernateTemplate().find(
							"from jkt.hms.masters.business.MasEmployee ");
							map.put("departmentList", departmentList);
							map.put("approvedByEmployeeList", approvedByEmployeeList);
							/*
							 * if (box.getInt(APPROVED_BY_EMPLOYEE_ID_MMF_DEPENDENT) !=
							 * 0) { MasEmployee masEmployee = new MasEmployee();
							 * masEmployee.setId(box
							 * .getInt(APPROVED_BY_EMPLOYEE_ID_MMF_DEPENDENT));
							 * storeMmfDepartmentM.setApprovedBy(masEmployee);
							 *  }
							 */
							mmfNo = "01/" + currentYear;
							List<StoreFyDocumentNo> mmfNoList = session
							.createCriteria(StoreFyDocumentNo.class)
							.add(Restrictions.eq("Department.Id",
									storeMmfDepartmentM.getStoreWardDept().getId())).list();
							if (mmfNoList != null && mmfNoList.size() > 0) {
								storeFyDocumentNo = mmfNoList.get(0);
							}
							storeFyDocumentNo.setMmfNo(mmfNo);
							hbt.update(storeFyDocumentNo);
							hbt.refresh(storeFyDocumentNo);
							storeMmfDepartmentMD.setDocNo(mmfNo);
							map.put("docId", mmfNo);
							storeMmfDepartmentMD.setLastChgBy(storeMmfDepartmentM.getLastChgBy());
							storeMmfDepartmentMD.setLastChgDate(new Date());
							storeMmfDepartmentMD.setLastChgTime(box.getString("changed_time"));
							storeMmfDepartmentMD.setMmfForTheYear(currentYear);
							storeMmfDepartmentMD.setCheckedBy(storeMmfDepartmentM.getCheckedBy());
							storeMmfDepartmentMD.setPreparedBy(storeMmfDepartmentM.getPreparedBy());
							storeMmfDepartmentMD.setMmfStoreType(storeMmfDepartmentM.getMmfStoreType());
							//storeMmfDepartmentMD.setRemarks(storeMmfDepartmentM.getRemarks());
							storeMmfDepartmentMD.setStatus("o");
							MasDepartment storeWardDept = new MasDepartment();
							storeWardDept.setId(storeMmfDepartmentM.getStoreWardDept().getId());
							storeMmfDepartmentMD.setStoreWardDept(storeWardDept);
							MasHospital masHospital = new MasHospital();
							masHospital.setId(storeMmfDepartmentM.getHospital().getId());
							storeMmfDepartmentMD.setHospital(masHospital);
							hbt.setFlushModeName("FLUSH_EAGER");
							hbt.setCheckWriteOperations(false);
							hbt.save(storeMmfDepartmentMD);
							hbt.refresh(storeMmfDepartmentMD);
						}else{
							storeMmfDepartmentMD = (StoreMmfDepartmentM)storeMmfDepartmentMListCurrentYearD.get(0);
						}

						if (storeMmfDepartmentTListPreviousYearD != null
								&& storeMmfDepartmentTListPreviousYearD.size() > 0) {
							sno = storeMmfDepartmentTListPreviousYearD.get(0).getSrNo().intValue();
							for (Iterator iterator = storeMmfDepartmentTListPreviousYearD.iterator(); iterator.hasNext();) {
								StoreMmfDepartmentT storeMmfDepartmentTPreviousYear = (StoreMmfDepartmentT) iterator.next();
								if(!storeMmfDepartmentTPreviousYear.getCurrYearMmf().equals(new BigDecimal("0.00"))){
									StoreMmfDepartmentT storeMmfDepartmentTnew = new StoreMmfDepartmentT();
									storeMmfDepartmentTnew.setItem(storeMmfDepartmentTPreviousYear.getItem());
									storeMmfDepartmentTnew.setPreYearMmf(storeMmfDepartmentTPreviousYear.getCurrYearMmf());
									storeMmfDepartmentTnew.setCurrYearMmf(storeMmfDepartmentTPreviousYear.getCurrYearMmf());
									storeMmfDepartmentTnew.setMmfInQty(storeMmfDepartmentTPreviousYear.getCurrYearMmf());
									//storeMmfDepartmentTnew.setRemarks(storeMmfDepartmentTPreviousYear.getRemarks());
									storeMmfDepartmentTnew.setSrNo(storeMmfDepartmentTPreviousYear.getSrNo());
									storeMmfDepartmentTnew.setStoreMmfDepartmentM(storeMmfDepartmentMD);
									hbt.save(storeMmfDepartmentTnew);
									hbt.refresh(storeMmfDepartmentTnew);
								}
							}
						}
					}
				}
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("pagedArray", pagedArray);
		map.put("import", "import");
		return map;
	}
	public Map<String, Object> showItemAdjustmentScreen(Map<String, Object> map) {
		Map<String, Object> infoMap = new HashMap<String, Object>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		List<TransactionSequence> orderSeqNoList = new ArrayList<TransactionSequence>();
		List<MasEmployee> masEmployeeList = new ArrayList<MasEmployee>();
		List<StoreItemAdjustmentM> storeItemAdjustmentMList = new ArrayList<StoreItemAdjustmentM>();
		String entrySeqNo = "";
		String lastSeqNo = "";
		String lastSeqYear = "";
		int deptId = 0;
		deptId = (Integer) map.get("deptId");
		MasDepartment masDepartment = new MasDepartment();

		Session session = getSession();
		masDepartment = (MasDepartment) session
		.get(MasDepartment.class, deptId);
		String deptName = masDepartment.getDepartmentName();
		masEmployeeList = (List<MasEmployee>) session.createCriteria(
				MasEmployee.class).add(Restrictions.eq("Status", "y")).list();

		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");

		String currentYear = date.substring(date.lastIndexOf("/") + 1);

		try {
			storeItemAdjustmentMList = session.createCriteria(
					StoreItemAdjustmentM.class).list();
			if (storeItemAdjustmentMList.size() > 0) {
				for (StoreItemAdjustmentM storeItemAdjustmentM : storeItemAdjustmentMList) {
					lastSeqNo = storeItemAdjustmentM.getAdjustmentNo();
				}
				StringTokenizer str = new StringTokenizer(lastSeqNo, "/");
				while (str.hasMoreTokens()) {
					lastSeqYear = str.nextToken();
				}
			} else {
				lastSeqYear = currentYear;
			}

			orderSeqNoList = session.createCriteria(TransactionSequence.class)
			.add(Restrictions.eq("TransactionPrefix", "SIAS")).list();
			// .setProjection(Projections.projectionList().add(Projections.max("TransactionSequenceNumber")))
			if (orderSeqNoList != null && orderSeqNoList.size() > 0) {
				for (TransactionSequence maxOrderNo : orderSeqNoList) {
					if (currentYear.equals(lastSeqYear)) {
						entrySeqNo = String.valueOf(maxOrderNo
								.getTransactionSequenceNumber() + 1);
					} else {
						entrySeqNo = String.valueOf(1);

					}
				}
			} else {
				entrySeqNo = String.valueOf(1);
				TransactionSequence transactionSequence = new TransactionSequence();
				transactionSequence.setTransactionPrefix("SIAS");
				transactionSequence
				.setTransactionSequenceName("Item Adjustment No.");
				transactionSequence.setTransactionSequenceNumber(0);
				transactionSequence.setTablename("StoreItemAdjustmentM");
				transactionSequence.setStatus("y");
				session.save(transactionSequence);
			}
			entrySeqNo = entrySeqNo.concat("/").concat(
					String.valueOf(lastSeqYear));
		} catch (HibernateException e) {
			e.printStackTrace();
			//session.close();
		}
		infoMap.put("deptName", deptName);
		infoMap.put("masEmployeeList", masEmployeeList);
		infoMap.put("entrySeqNo", entrySeqNo);

		return infoMap;
	}
	public boolean updateItemForAdjustment(Map<String , Object> map ){
		Box box = null ;
		int deptId = 0;
		String adjustmentNo ="";
		Date adjustmentDate = null;
		String adjustmentRemarks = "";
		int adjustmentAuthority = 0;
		int qtyAdjusted = 0 ;
		StoreItemAdjustmentM storeItemAdjustementM = new StoreItemAdjustmentM();
		TransactionSequence transactionSequence = null ;
		Session session = getSession();
		if(map.get("box")!=null)
		{
			box =(Box)map.get("box");
		}
		if(map.get("deptId")!=null && !map.get("deptId").equals(""))
		{
			deptId=(Integer)map.get("deptId");
		}
		if(box.getString("adjustmentNo")!=null)
		{
			adjustmentNo=box.getString("adjustmentNo");
		}
		if(box.getString("adjustmentDate")!= null && !box.getString("adjustmentDate").equals("") )
		{
			adjustmentDate=HMSUtil.convertStringTypeDateToDateType(box.getString("adjustmentDate"));
		}
		if(box.getInt("adjustmentAuthority")!= 0)
		{
			MasEmployee masEmployee = new MasEmployee();
			adjustmentAuthority =box.getInt("adjustmentAuthority");
			masEmployee.setId(adjustmentAuthority);
			storeItemAdjustementM.setAdjustmentAuthority(masEmployee);

		}
		if(box.getString("adjustmentRemarks")!=null)
		{
			adjustmentRemarks = box.getString("adjustmentRemarks") ;
		}
		storeItemAdjustementM.setAdjustmentDate(adjustmentDate);
		storeItemAdjustementM.setAdjustmentLoginDept(deptId);
		storeItemAdjustementM.setAdjustmentNo(adjustmentNo);
		storeItemAdjustementM.setAdjustmentRemarks(adjustmentRemarks);
		try{
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			hbt.save(storeItemAdjustementM);
			hbt.refresh(storeItemAdjustementM);
			transactionSequence = (TransactionSequence)session.createCriteria(TransactionSequence.class).add(Restrictions.eq("TransactionPrefix","SIAS" )).list().get(0);
			transactionSequence.setTransactionSequenceNumber(transactionSequence.getTransactionSequenceNumber()+1);
			hbt.saveOrUpdate(transactionSequence);
			hbt.refresh(transactionSequence);

			Vector itemIds = box.getVector(ITEM_ID);
			Vector adjustmentType=box.getVector("adjustmentType");
			Vector batchIdCombo=box.getVector("itemBatchNoCombo");
			Vector batchIdText=box.getVector("itemBatchNoText");
			Vector adjustmentQty = box.getVector("adjustmentQty");
			Vector itemExpiryDate = box.getVector("itemExpiryDate");
			//Vector itemExpiryDateNew = box.getVector("itemExpiryDateNew");
			Vector itemBrandId = box.getVector("itemBrandId");
			String batchNumber="";
			int batchId = 0 ;
			int brandId = 0;
			String expiryDate ="";
			String adjustType ="";
			MasStoreItem masStoreItem =null ;
			MasStoreBrand masStoreBrand = null ;
			MasDepartment masDepartment = new MasDepartment(deptId);
			StoreItemAdjustmentT storeItemAdjustmentT= null;
			StoreItemBatchStock storeItemBatchStock = null ;
			List<StoreItemBatchStock> storeItemBatchStockList =null;
			for(int i = 0 ;i<itemIds.size();i++){
				if(!((String)adjustmentQty.get(i)).equals("") && !((String)itemIds.get(i)).equals("") && !((String)itemIds.get(i)).equals("0"))
				{
					masStoreItem = new MasStoreItem();
					masStoreItem.setId(Integer.parseInt((String)itemIds.get(i)));
					qtyAdjusted = Integer.parseInt((String)adjustmentQty.get(i));
					brandId = Integer.parseInt((String)itemBrandId.get(i));
					masStoreBrand = new MasStoreBrand();
					masStoreBrand.setId(brandId);
					adjustType=(String)adjustmentType.get(i);
					storeItemAdjustmentT = new StoreItemAdjustmentT();
					storeItemAdjustmentT.setItemAdjustmentMId(storeItemAdjustementM);
					storeItemAdjustmentT.setItemId(masStoreItem);
					storeItemAdjustmentT.setItemType(adjustType);
					storeItemAdjustmentT.setItemBrandId(masStoreBrand);
					if(((String)adjustmentType.get(i)).equals("New"))
					{
						expiryDate = (String)itemExpiryDate.get(i);
						batchNumber=(String)batchIdText.get(i);
						storeItemAdjustmentT.setBatchNo(batchNumber);
						storeItemAdjustmentT.setAdjustmentExpiryDate(HMSUtil.convertStringTypeDateToDateType(expiryDate));
						storeItemAdjustmentT.setAdjustedQty(new BigDecimal(qtyAdjusted));

						storeItemBatchStock = new StoreItemBatchStock();
						storeItemBatchStock.setBatchNo(batchNumber);
						storeItemBatchStock.setAdjustQty(new BigDecimal(qtyAdjusted));
						storeItemBatchStock.setClosingStock(new BigDecimal(qtyAdjusted));
						storeItemBatchStock.setBrand(masStoreBrand);
						storeItemBatchStock.setDepartment(masDepartment);
						storeItemBatchStock.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expiryDate));
						storeItemBatchStock.setItem(masStoreItem);
						hbt.save(storeItemBatchStock);
						hbt.refresh(storeItemBatchStock);

						storeItemAdjustmentT.setItemBatchStockId(storeItemBatchStock);
						hbt.save(storeItemAdjustmentT);
						hbt.refresh(storeItemAdjustmentT);
					}else{
						expiryDate = (String)itemExpiryDate.get(i);
						batchNumber = (String)batchIdCombo.get(i);
						storeItemAdjustmentT.setBatchNo(batchNumber);
						storeItemAdjustmentT.setAdjustmentExpiryDate(HMSUtil.convertStringTypeDateToDateType(expiryDate));

						storeItemBatchStockList = session.createCriteria(StoreItemBatchStock.class).add(Restrictions.eq("BatchNo", batchNumber))
						.createAlias("Department", "dept").add(Restrictions.eq("dept.Id",deptId ))
						.createAlias("Item", "item").add(Restrictions.eq("item.Id",Integer.parseInt((String)itemIds.get(i)) ))
						.addOrder(Order.desc("Id")).list();
						BigDecimal temp = new BigDecimal(qtyAdjusted);
						for(StoreItemBatchStock storeItemBatchStocK :storeItemBatchStockList){

							if(qtyAdjusted>=0){
								if(storeItemBatchStocK.getAdjustQty()!=null){
									storeItemBatchStocK.setAdjustQty( storeItemBatchStocK.getAdjustQty().add(new BigDecimal(qtyAdjusted)) );
								}else{
									storeItemBatchStocK.setAdjustQty(new BigDecimal(qtyAdjusted));
								}
								storeItemBatchStocK.setClosingStock( storeItemBatchStocK.getClosingStock().add(new BigDecimal(qtyAdjusted)) );
								hbt.saveOrUpdate(storeItemBatchStocK);
								hbt.refresh(storeItemBatchStocK);
								storeItemAdjustmentT.setItemBatchStockId(storeItemBatchStocK);
								storeItemAdjustmentT.setAdjustedQty(new BigDecimal(qtyAdjusted));
								hbt.save(storeItemAdjustmentT);
								hbt.refresh(storeItemAdjustmentT);
								break ;
							}else if(temp.intValue()<0){
								temp = storeItemBatchStocK.getClosingStock().add(temp);
								if(temp.intValue()<0)
								{
									if(storeItemBatchStocK.getAdjustQty()!=null){
										storeItemBatchStocK.setAdjustQty( storeItemBatchStocK.getAdjustQty().subtract(storeItemBatchStocK.getClosingStock()));
									}else{
										storeItemBatchStocK.setAdjustQty(new BigDecimal(-storeItemBatchStocK.getClosingStock().intValue()));
									}
									storeItemBatchStocK.setClosingStock(new BigDecimal(0));
									hbt.saveOrUpdate(storeItemBatchStocK);
									hbt.refresh(storeItemBatchStocK);
									storeItemAdjustmentT.setItemBatchStockId(storeItemBatchStocK);
									storeItemAdjustmentT.setAdjustedQty(new BigDecimal(qtyAdjusted));
									hbt.save(storeItemAdjustmentT);
									hbt.refresh(storeItemAdjustmentT);

								}else{
									if(storeItemBatchStocK.getAdjustQty()!=null){
										storeItemBatchStocK.setAdjustQty( storeItemBatchStocK.getAdjustQty().add(new BigDecimal(qtyAdjusted)));
									}else{
										storeItemBatchStocK.setAdjustQty(new BigDecimal(qtyAdjusted));
									}
									storeItemBatchStocK.setClosingStock(temp);
									hbt.saveOrUpdate(storeItemBatchStocK);
									hbt.refresh(storeItemBatchStocK);
									storeItemAdjustmentT.setItemBatchStockId(storeItemBatchStocK);
									storeItemAdjustmentT.setAdjustedQty(new BigDecimal(qtyAdjusted));
									hbt.save(storeItemAdjustmentT);
									hbt.refresh(storeItemAdjustmentT);
									break ;

								}



							}
						}
					}

				}

			}
		}catch (HibernateException e) {
			e.printStackTrace();
		}

		return true ;
	}
	public Map<String, Object> fillItemsForAdjustment(
			Map<String, Object> dataMap) {

		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<Object[]> objectList = new ArrayList<Object[]>();
		String pvmsNo = null;
		int deptId = 0;
		pvmsNo = "" + dataMap.get("pvmsNo");
		deptId = Integer.parseInt("" + dataMap.get("deptId"));
		BigDecimal stock = new BigDecimal(0);

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			String queryString = null;
			String str = "" + dataMap.get("nomenclature");
			Criteria c = session.createCriteria(MasStoreItem.class).add(
					Restrictions.like("PvmsNo", pvmsNo)).add(
							Restrictions.eq("Status", "y"));
			itemList = c.list();

			if (itemList != null && itemList.size() > 0) {
				int itemId = itemList.get(0).getId();
				String str3 = "select stock_id , item_id, batch_no , expiry_date , sum(closing_stock) , brand_id from  store_item_batch_stock a where  a.item_id = '"
					+ itemId
					+ "'and a.closing_stock >0.00 and a.department_id='"
					+ deptId
					+ "' group by a.closing_stock ";
				objectList = session.createSQLQuery(str3).list();

			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("itemList", itemList);
		map.put("objectList", objectList);
		return map;

	}
	public boolean updateGRN(){
		boolean flag=false;
		Session session = (Session) getSession();


		Transaction tx = null;
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {
			String hql2 = "update from jkt.hms.masters.business.StoreFyDocumentNo as a set a.GrnNo='0', a.PoNo='0'"
				+ " , a.IssueDeptNo='0' , a.LoaninNo='0' , a.DemandNo='0' , a.BooNo='0' ,a.IssueOtafuNo='0' ,"
				+ " a.IssueLoanoutNo='0' ,a.IndentToDepotNo='0' , a.TenderNo='0' , a.DeptConsumNo='0'";
			Query query = session.createQuery(hql2);
			int row= query.executeUpdate();
			//session.flush();
			flag=true;
			//tx.commit();
		} catch (DataAccessException e)  {
			e.printStackTrace();
		}
		return flag;
	}

	public Map<String, Object> getitem(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		session = (Session) getSession();
		List<BigDecimal[]> objectList = new ArrayList<BigDecimal[]>();
		int deptId = 0;
		String pvmsNo="";
		BigDecimal cmpStock = null;
		deptId = Integer.parseInt(box.getString("deptId"));
		pvmsNo = box.getString("pvmsNo");
		int itemId=0;
		List<MasStoreItem> masStoreItemList = new ArrayList<MasStoreItem>();
		List<StoreStockTakingT> stockTakingTList = new ArrayList<StoreStockTakingT>();
		if (!pvmsNo.equals("") && pvmsNo.length() > 0) {
			masStoreItemList = (List<MasStoreItem>) session.createCriteria(MasStoreItem.class)
			.add((Restrictions.eq("PvmsNo", pvmsNo))).add((Restrictions.eq("Status", "y"))).list();

			if (masStoreItemList != null && masStoreItemList.size() > 0) {
				MasStoreItem masStoreItem = (MasStoreItem) masStoreItemList.get(0);
				itemId = masStoreItem.getId();
			}
		}
		//String qry = "select stock_id,sum(closing_stock) from store_item_batch_stock "+
		//"where department_id = " + deptId +
		//" and item_id = " + itemId ;
		/*String qry = "select stm.id,  sum(stt.computed_stock) from store_stock_taking_m stm, store_stock_taking_t stt " +
										  " where stm.department_id = " + deptId + " and stt.stock_taking_m_id = stm.id " +
                                          " and stt.item_id = " + itemId + "group by  stt.item_id;"; */

		int stockTakingMId = Integer.parseInt(box.get("StockTakingMId"));
		if(stockTakingMId !=0){
			String qry =  "SELECT  sum(store_stock_taking_t.`computed_stock`) AS store_stock_taking_t_computed_stock "
				+" FROM `store_stock_taking_t` store_stock_taking_t left outer JOIN `store_stock_taking_m` store_stock_taking_m ON store_stock_taking_m.`id` = store_stock_taking_t.`stock_taking_m_id` "
				+ " where store_stock_taking_m.`id` = "+ stockTakingMId+ " and store_stock_taking_t.`item_id`  = " +  itemId + " and store_stock_taking_t.`computed_stock` > 0" ;
			objectList= (List<BigDecimal[]>) session.createSQLQuery(qry).list();
		}
		map.put("objectList", objectList);
		return map;
	}
	public Map<String, Object> getPatientDetailsForPrescription(int wardId) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<PatientPrescriptionHeader> prescriptionList = new ArrayList<PatientPrescriptionHeader>();

		Session session = getSession();
		try {
			prescriptionList = session.createCriteria(PatientPrescriptionHeader.class)
					.add(Restrictions.eq("Department.Id",wardId))
					.add(Restrictions.isNotNull("Inpatient"))
					.add(Restrictions.eq("Status","p").ignoreCase())
					.list();
			map.put("prescriptionList", prescriptionList);
			System.out.println("prescriptionList"+prescriptionList.size());
			System.out.println("wardId"+wardId);
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return map;
	}
	
	public Map<String, Object> getPatientDetailsForPrescriptionPartial(int wardId) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<PatientPrescriptionHeader> prescriptionList = new ArrayList<PatientPrescriptionHeader>();

		Session session = getSession();
		try {
			prescriptionList = session.createCriteria(PatientPrescriptionHeader.class)
					.add(Restrictions.eq("Department.Id",wardId))
					.add(Restrictions.isNotNull("Inpatient"))
					.add(Restrictions.eq("Status","i").ignoreCase())
					.list();
			map.put("prescriptionList", prescriptionList);
			System.out.println("prescriptionList"+prescriptionList.size());
			System.out.println("wardId"+wardId);
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return map;
	}
	
	public Map<String, Object> getPatientDetailsForPrescriptionFAC(int prescriptionId) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<PatientPrescriptionHeader> prescriptionList = new ArrayList<PatientPrescriptionHeader>();

		Session session = getSession();
		try {
			prescriptionList = session.createCriteria(PatientPrescriptionHeader.class).add(Restrictions.idEq(prescriptionId)).list();
			map.put("prescriptionList", prescriptionList);
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return map;
	}
	public Map<String, Object> getPatientDetailsForPartialPrescription(int prescriptionId) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<PatientPrescriptionHeader> prescriptionList = new ArrayList<PatientPrescriptionHeader>();

		Session session = getSession();
		try {
			prescriptionList = session.createCriteria(PatientPrescriptionHeader.class).add(Restrictions.idEq(prescriptionId)).list();
			map.put("prescriptionList", prescriptionList);
			
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return map;
	}	
	public Map<String, Object> getPatientDetailsForPrescriptionByHin(int hinId) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<PatientPrescriptionHeader> prescriptionList = new ArrayList<PatientPrescriptionHeader>();

		Session session = getSession();
		try {
			prescriptionList = session.createCriteria(PatientPrescriptionHeader.class)
					.add(Restrictions.eq("Hin.Id", hinId))
					.add(Restrictions.eq("Status", "P").ignoreCase())
					.add(Restrictions.or(Restrictions.eq("NipStatus", "n").ignoreCase(), Restrictions.eq("NipStatus", "A").ignoreCase())).list();
			System.out.println("prescriptionList"+prescriptionList.size());
			map.put("prescriptionList", prescriptionList);
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return map;
	}
	
	public Map<String, Object> getPatientDetailsForNIP(int hinId) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<PatientPrescriptionHeader> prescriptionList = new ArrayList<PatientPrescriptionHeader>();

		Session session = getSession();
		try {
			prescriptionList = session.createCriteria(PatientPrescriptionHeader.class)
					.add(Restrictions.eq("Hin.Id", hinId))
					.add(Restrictions.and(Restrictions.eq("Status", "P").ignoreCase(), Restrictions.eq("NipStatus", "Y").ignoreCase()))
					/*.add(Restrictions.eq("PrescriptionDate", new Date()))*/
							.list();
			System.out.println("prescriptionList"+prescriptionList.size());
			map.put("prescriptionList", prescriptionList);
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return map;
	}
	public Map<String, Object> showSearchDepartmentIndent(int deptId, int hospitalId ) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreInternalIndentM> searchStoreInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		List<StoreInternalIndentM> searchStoreInternalIndentMExistList = new ArrayList<StoreInternalIndentM>();
		Session session = getSession();
		// add hospitalId by javed khan
		searchStoreInternalIndentMList = session.createCriteria(
				StoreInternalIndentM.class).add(
						Restrictions.eq("Department.Id", deptId))
						.add(Restrictions.eq("Status", "u")).add(Restrictions.eq("Hospital.Id", hospitalId)).addOrder(
								Order.desc("Id")).list();

		// add  by javed khan for addExistingIndent
		searchStoreInternalIndentMExistList = session.createCriteria(
				StoreInternalIndentM.class).add(
						Restrictions.eq("Department.Id", deptId))
						.add(Restrictions.eq("Status", "u")).add(Restrictions.eq("Hospital.Id", hospitalId)).addOrder(
								Order.desc("Id")).list();
		map.put("searchStoreInternalIndentMList", searchStoreInternalIndentMList);
		map.put("searchStoreInternalIndentMExistList", searchStoreInternalIndentMExistList);
		return map;

	}
	public Map<String, Object> showDemandIssueReportJsp(int deptId) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreInternalIndentM> searchStoreInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		Session session = getSession();
		searchStoreInternalIndentMList = session.createCriteria(
				StoreInternalIndentM.class).add(
						Restrictions.eq("Department.Id", deptId)).addOrder(
								Order.desc("Id")).list();
		map.put("searchStoreInternalIndentMList", searchStoreInternalIndentMList);
		return map;
	}
	public boolean checkDemandIssue(Map<String,Object> map){
		String demandNo = "";
		int deptId = 0;
		Session session = getSession();
		if (map.get("demandno")!=null ){
			demandNo=(String)map.get("demandno");
		}
		if (map.get("deptId")!=null ){
			deptId=(Integer)map.get("deptId");
		}
		List<StoreInternalIndentM> searchStoreInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		List<StoreIssueM> searchStoreIssueMList = new ArrayList<StoreIssueM>();

		searchStoreInternalIndentMList = session.createCriteria(
				StoreInternalIndentM.class).add(
						Restrictions.eq("DemandNo", demandNo)).add(Restrictions.eq("Department.Id", deptId)).list();

		if(searchStoreInternalIndentMList.size()>0){
			int storeInternalIndentMId = searchStoreInternalIndentMList.get(0).getId();
			searchStoreIssueMList = session.createCriteria(StoreIssueM.class).add(Restrictions.eq("RequestNo.Id", storeInternalIndentMId)).list();
		}

		if(searchStoreIssueMList.size()>0){
			return true;
		}else{
			return false;
		}

	}
	public Map<String, Object> getItemObjectFromPvms(Box box) {
		session = (Session) getSession();

		String pvmsName = "";
		String qry = "";
		MasStoreItem firstItem = new MasStoreItem();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreItem> nonExpitemList = new ArrayList<MasStoreItem>();
		Map<String, Object> map = new HashMap<String, Object>();
		try {

			if (!"".equals(box.get("pvmsNo"))) {
				//				pvmsName = "" + box.get("pvmsNo") + "%";
				pvmsName = "" + box.get("pvmsNo") ;
				/*itemList = session.createCriteria(MasStoreItem.class).add(
						Restrictions.like("PvmsNo", pvmsName)).add(
						Restrictions.eq("Status", "y")).add(
						Restrictions.eq("Department.Id", 24)).addOrder(Order.asc("PvmsNo")).list();
				nonExpitemList = session.createCriteria(MasStoreItem.class)
						.add(Restrictions.like("PvmsNo", pvmsName)).add(
								Restrictions.eq("Status", "y")).add(
								Restrictions.ne("Department.Id", 24)).list();*/
				itemList = session.createCriteria(MasStoreItem.class).add(
						Restrictions.eq("PvmsNo", pvmsName)).add(
								Restrictions.eq("Status", "y")).add(
										Restrictions.eq("Department.Id", 24)).addOrder(Order.asc("PvmsNo")).list();
				nonExpitemList = session.createCriteria(MasStoreItem.class)
				.add(Restrictions.eq("PvmsNo", pvmsName)).add(
						Restrictions.eq("Status", "y")).add(
								Restrictions.ne("Department.Id", 24)).list();

				if (itemList != null && itemList.size() > 0) {
					firstItem = itemList.get(0);

				} else {
					firstItem.setPvmsNo("");
					firstItem.setNomenclature("");

				}

			} else {
				firstItem.setPvmsNo("");
				firstItem.setNomenclature("");

			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		box.put("firstItem", firstItem);
		if (firstItem.getPvmsNo() != null && !"".equals(firstItem.getPvmsNo()))
			box.put("pvmsNo", firstItem.getPvmsNo());


		box.put("fromSearch", "true");
		if (itemList != null && itemList.size() > 0) {
			map.putAll(getCurrentYearMmfByItem(box));
		} else if (nonExpitemList != null && nonExpitemList.size() > 0) {

			map.put("nonExpMesg", "NonExpendable Item should not be allowed");
		}
		if (box.getString("flag").equals("true")) {
			map.put("firstItem", firstItem);
		} else if (box.getString("enter").equals("true")) {
			map.put("firstItem", firstItem);
		} else {
			map.put("firstItem", null);
		}

		return map;

	}


	public Map<String, Object> searchItemForMMFApproval(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		String nomenclature = box.getString("nomenclature");
		String commonName = box.getString(COMMON_NAME);
		String pvms = box.getString("pvms");
		Session session = getSession();
		Criteria crit = null;

		crit = session.createCriteria(MasStoreItem.class).add(Restrictions.eq("Status", "y")).createAlias("Department", "dept")
		.add(Restrictions.eq("dept.Id", 24));
		if(!nomenclature.equals("")){
			crit = crit.add(Restrictions.like("Nomenclature", nomenclature+"%"));
		}
		if(!pvms.equals("")){
			crit = crit.add(Restrictions.like("PvmsNo", pvms+"%"));
		}
		if(!commonName.equals("")){
			crit = crit.add(Restrictions.like("CommonName", commonName+"%"));
		}
		itemList = crit.list();

		map.put("itemList", itemList);

		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		PagedArray pagedArray = null;
		if(itemList.size() > 0){
			for(MasStoreItem storeItem : itemList){
				HashMap hData = new HashMap<String, Object>();
				hData.put("itemId", storeItem.getId());
				hData.put("pvmsNo", storeItem.getPvmsNo());
				hData.put("nomenclature", storeItem.getNomenclature());
				hData.put("commonName", storeItem.getCommonName());
				vResult.add(hData);

			}
		}
		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}

		try {
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("pagedArray", pagedArray);
		return map;
	}
	public Map<String, Object> getVendorList() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreSupplier> vendorList = new ArrayList<MasStoreSupplier>();
		Session session = getSession();
		try {
			vendorList = session.createCriteria(MasStoreSupplier.class).add(Restrictions.eq("Status", "y")).list();
			map.put("vendorList", vendorList);
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return map;
	}
	public Map<String, Object> getSOListForLoanIn(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();

		int supplierId = (Integer)dataMap.get("supplierId");
		Integer[] itemIdArr = (Integer[])dataMap.get("itemIdArr");
		int deptId = (Integer)dataMap.get("deptId");
		String[] qtyArr = (String[])dataMap.get("qtyArr");

		List<StorePoHeader> poDetailsList = new ArrayList<StorePoHeader>();
		List<Object[]> objectList = new ArrayList<Object[]>();

		boolean flagTemp = false;
		Session session = (Session) getSession();
		if(itemIdArr.length>0){
			for (int j = 0; j < itemIdArr.length; j++) {
				poDetailsList = session.createCriteria(StorePoDetail.class)
				.createAlias("Po", "po")
				.createAlias("po.Department", "dept")
				.createAlias("po.Supplier", "supp")
				.add(Restrictions.eq("supp.Id",supplierId))
				.add(Restrictions.eq("dept.Id",deptId))
				.add(Restrictions.eq("Item.Id",itemIdArr[j]))
				.add(Restrictions.ge("QuantityOrdered",new BigDecimal(qtyArr[j].toString())))
				.add(Restrictions.eq("po.Status", "o"))
				.list();
				if(poDetailsList.size() == 0){
					flagTemp=true;
				}
			}
		}

		if(!flagTemp){
			objectList = session.createCriteria(StorePoHeader.class).createAlias("Department", "dept")
			.createAlias("StorePoDetails", "pod").add(Restrictions.eq("dept.Id",deptId))
			.createAlias("Supplier", "supp")
			.add(Restrictions.eq("supp.Id",supplierId))
			.add(Restrictions.in("pod.Item.Id",itemIdArr))
			.setProjection(Projections.projectionList().add(Projections.distinct(Projections.property("PoNumber")))
					.add(Projections.property("Id")))
					.add(Restrictions.eq("Status", "o")).list();
		}

		map.put("objectList", objectList);
		return map;
	}
	public Map<String, Object> getLoanInTListForModify(int loanInId) {
		List<StoreLoaninT> storeLoanInTList = new ArrayList<StoreLoaninT>();

		int firstResult = 0;
		int maxResults = 10;

		/*if (pageNo != 0) {
			firstResult = firstResult + (pageNo) * 10;
		}*/
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		Criteria c = session.createCriteria(StoreLoaninT.class).add(
				Restrictions.eq("LoaninMaster.Id", loanInId));
		c.setFirstResult(firstResult);
		c.setMaxResults(maxResults);
		storeLoanInTList = c.list();
		if(storeLoanInTList.size() > 0){
			map.put("storeLoanInTList", storeLoanInTList);
		}
		return map;
	}
	public Map<String, Object> getLoanInItemsForVendor(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreLoaninT> loaninTList = new ArrayList<StoreLoaninT>();
		Session session = getSession();
		try {
			String pvms = box.getString("pvms");
			int supplierId = box.getInt("supplierId");
			loaninTList = session.createCriteria(StoreLoaninT.class)
			.createAlias("LoaninMaster", "l").add(Restrictions.eq("l.Status", "o"))
			.createAlias("Item", "item").add(Restrictions.eq("item.PvmsNo", pvms))
			.createAlias("l.Supplier", "supplier").add(Restrictions.eq("supplier.Id", supplierId))
			.createAlias("l.Department", "dept").add(Restrictions.eq("dept.Id", box.getInt("deptId"))).list();
			map.put("loaninTList", loaninTList);
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return map;
	}

	@Override
	public Map<String, Object> showInternalIssueReportJsp() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		Session session = getSession();
		try{
			departmentList=session.createCriteria(MasDepartment.class).add(Restrictions.eq("Status", "y")).list();
		}catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("departmentList", departmentList);
		return map;
	}

	//  Dinesh
	/*	public boolean submitDispensaryForLp(Box box)
	{
		boolean status=false;
		Vector pvmsNo = box.getVector("pvmsNo");
		Vector nomenclature = box.getVector("nomenclature");
		Vector strength = box.getVector("strength");
		Vector lp = box.getVector("lpId");
		Vector qtyPending=box.getVector("qtyPending");
		Vector dept_Id=box.getVector("deptId");
		Vector hospital_Id = box.getVector("hospitalId");
		Vector changeBy = box.getVector("changeBy");
		Vector changeDate = box.getVector("date1");
		Vector sr_no=box.getVector(RequestConstants.SR_NO);
		Vector itemId=box.getVector("itemId");
		int deptId=Integer.parseInt(dept_Id.get(0).toString());
		int hospitalId=Integer.parseInt(hospital_Id.get(0).toString());


		List<StoreFyDocumentNo> demandNoList = new ArrayList<StoreFyDocumentNo>();
		String demandNo = "";
		String finalDemandNo = "";
		int storeFyDocumentNoId = 0;
		Session session = (Session)getSession();
		demandNoList = session.createCriteria(StoreFyDocumentNo.class).add(Restrictions.eq("Department.Id", deptId)).list();
		if (demandNoList != null && demandNoList.size() > 0)
		{
		  StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) demandNoList.get(0);
		  demandNo = ("" + storeFyDocumentNo.getDemandNo());
		  storeFyDocumentNoId = storeFyDocumentNo.getId();
			try {
			              finalDemandNo = getMaxNo(demandNo);

		} catch (Exception e)
		{
		   e.printStackTrace();
		}
		}
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
        int header=1;
        int newinternalIndentId=0;
        StoreInternalIndentM newMObj = new StoreInternalIndentM();
		for (int i = 0; i < pvmsNo.size(); i++)
		{
        if((lp.get(i).toString()).equals("y"))
        {
            int qtypending=Integer.parseInt(qtyPending.get(i).toString());
            if(qtypending>0)
            {
               if(header==1)
               {

            	   newMObj.setDemandNo(finalDemandNo);
            	   MasDepartment fromdept = new MasDepartment();
            	   fromdept.setId(deptId);
            	   newMObj.setDepartment(fromdept);
            	   MasHospital masHospital = new MasHospital();
            	   masHospital.setId(hospitalId);
            	   newMObj.setHospital(masHospital);
            	   Date d1=null;
            	   if((changeDate.get(0)!=null)&&(!changeDate.get(0).toString().equals("")))
            	   d1=HMSUtil.convertStringTypeDateToDateType(changeDate.get(0).toString());
            	   newMObj.setDemandDate(d1);
            	   newMObj.setLastChgBy(changeBy.get(0).toString());
            	   newMObj.setLastChgDate(d1);
            	   newMObj.setStatus("o");
            	   MasDepartment todept = new MasDepartment();
            	   todept.setId(24);
            	   newMObj.setToStore(todept);
            	   newMObj.setDispensaryLp("y");
            	   hbt.save(newMObj);
			       hbt.refresh(newMObj);
				   newinternalIndentId = newMObj.getId();
            	// Auto-Increment No for demand No of Department Indent
					List<StoreFyDocumentNo> demandnoList = new ArrayList<StoreFyDocumentNo>();
					demandnoList = session.createCriteria(StoreFyDocumentNo.class).add(Restrictions.eq("Department.Id", deptId)).list();

					StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) demandnoList.get(0);
					storeFyDocumentNo.setDemandNo(finalDemandNo);

					hbt.save(storeFyDocumentNo);
					hbt.refresh(storeFyDocumentNo);
            	   header++;
               }
               List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();
               StoreInternalIndentT storeInternalIndentT = new StoreInternalIndentT();
               int srNo=Integer.parseInt((sr_no.get(i).toString()));
               storeInternalIndentT.setInternal(newMObj);
               storeInternalIndentT.setSrNo(srNo);
               storeInternalIndentT.setStockInHand(0);
               int item_id=Integer.parseInt(itemId.get(i).toString());
               storeInternalIndentT.setQtyRequest(qtypending);
               MasStoreItem masStoreItem = new MasStoreItem();
               masStoreItem.setId(item_id);
               storeInternalIndentT.setItem(masStoreItem);
               MasDepartment department = new MasDepartment();
               department.setId(deptId);
        	   storeInternalIndentT.setDepartment(department);
        	   hbt.save(storeInternalIndentT);
		       hbt.refresh(storeInternalIndentT);

		     status=true;
            }
         }
		}
    return status;
   }*/


	public boolean submitDispensaryForLp(Box box)
	{
		boolean status=false;
		Map keyValue=new HashMap();
		Vector pvmsNo = box.getVector("pvmsNo");
		Vector nomenclature = box.getVector("nomenclature");
		Vector strength = box.getVector("strength");
		Vector lp = box.getVector("lpId");
		Vector lpItem=box.getVector("lp");
		Vector lpQty=box.getVector("lpQty");
		Vector lotOut=box.getVector("lotOut");
		Vector lotQty=box.getVector("lotQty");



		Vector qtyPending=box.getVector("qtyPending");
		Vector dept_Id=box.getVector("deptId");
		Vector hospital_Id = box.getVector("hospitalId");
		Vector changeBy = box.getVector("changeBy");
		Vector changeDate = box.getVector("date1");
		Vector sr_no=box.getVector(RequestConstants.SR_NO);
		Vector itemId=box.getVector("itemId");
		for(int i=0;i<itemId.size();i++){
			keyValue.put(itemId.get(i),lpQty.get(i));
		}
		Set set=keyValue.keySet();

		String serviceNo=box.get("serviceNoS");
		String hinNo=box.get("hinNoS");
		String visitNumber=box.get("visitNumber");
		int deptId=Integer.parseInt(dept_Id.get(0).toString());

		List preList =new ArrayList();

		int hospitalId=Integer.parseInt(hospital_Id.get(0).toString());

		List<StoreFyDocumentNo> demandNoList = new ArrayList<StoreFyDocumentNo>();
		String demandNo = "";
		String finalDemandNo = "";
		int storeFyDocumentNoId = 0;
		Session session = (Session)getSession();
		demandNoList = session.createCriteria(StoreFyDocumentNo.class).add(Restrictions.eq("Department.Id", deptId)).list();
		if (demandNoList != null && demandNoList.size() > 0)
		{
			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) demandNoList.get(0);
			demandNo = ("" + storeFyDocumentNo.getDemandNo());
			storeFyDocumentNoId = storeFyDocumentNo.getId();
			try {
				finalDemandNo = getMaxNo(demandNo);

			} catch (Exception e)
			{
				e.printStackTrace();
			}
		}
		String abc="select ppd.PRESCRIPTION_ID,ppd.ITEM_ID from Patient_Prescription_header pph left " +
		"outer join Patient_Prescription_details ppd on " +
		"pph.PRESCRIPTION_ID=ppd.PRESCRIPTION_ID where  visit_id in (select v.VISIT_ID " +
		"from visit v " +
		"where v.HIN_ID in " +
		"(select p.HIN_ID from patient p where p.HIN_NO='"+hinNo+"' and p.SERVICE_NO='"+serviceNo+"' ) and v.VISIT_NO='"+visitNumber+"')";
		preList=session.createSQLQuery(abc).list();


		Iterator itr=preList.iterator();

		Query query=null;
		int i=0;
		String updatePendingPre="update PatientPrescriptionDetails as ppd  set ppd.SoId=:SoId" +
		",ppd.SoItem=:SoItem,ppd.SoQty=:SoQty" +
		" where ppd.Prescription.Id=:Prescription and ppd.Item.Id=:Item";
		query=session.createQuery(updatePendingPre);
		while(itr.hasNext()){
			Object[] tuple = (Object[]) itr.next();
			if(lpItem.contains(tuple[1].toString())){

				query.setParameter("SoId","");
				query.setParameter("SoItem","n");
				query.setParameter("SoQty", Integer.parseInt(keyValue.get((tuple[1].toString()).trim()).toString().trim()));
				query.setParameter("Prescription", Integer.parseInt(tuple[0].toString()));
				query.setParameter("Item", Integer.parseInt(tuple[1].toString()));
				query.executeUpdate();
			}
		}


		//List idList=session.creat

		/*for (int i = 0; i < pvmsNo.size(); i++)
		{
        if((lp.get(i).toString()).equals("y"))
        {
            int qtypending=Integer.parseInt(qtyPending.get(i).toString());
            if(qtypending>0)
            {
               if(header==1)
               {
            	   newMObj.setDemandNo(finalDemandNo);
            	   MasDepartment fromdept = new MasDepartment();
            	   fromdept.setId(deptId);
            	   newMObj.setDepartment(fromdept);
            	   MasHospital masHospital = new MasHospital();
            	   masHospital.setId(hospitalId);
            	   newMObj.setHospital(masHospital);
            	   Date d1=null;
            	   if((changeDate.get(0)!=null)&&(!changeDate.get(0).toString().equals("")))
            	   d1=HMSUtil.convertStringTypeDateToDateType(changeDate.get(0).toString());
            	   newMObj.setDemandDate(d1);
            	   newMObj.setLastChgBy(changeBy.get(0).toString());
            	   newMObj.setLastChgDate(d1);
            	   newMObj.setStatus("o");
            	   MasDepartment todept = new MasDepartment();
            	   todept.setId(24);
            	   newMObj.setToStore(todept);
            	   newMObj.setDispensaryLp("y");
            	   hbt.save(newMObj);
			       hbt.refresh(newMObj);
				   newinternalIndentId = newMObj.getId();
            	// Auto-Increment No for demand No of Department Indent
					List<StoreFyDocumentNo> demandnoList = new ArrayList<StoreFyDocumentNo>();
					demandnoList = session.createCriteria(StoreFyDocumentNo.class).add(Restrictions.eq("Department.Id", deptId)).list();

					StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) demandnoList.get(0);
					storeFyDocumentNo.setDemandNo(finalDemandNo);

					hbt.save(storeFyDocumentNo);
					hbt.refresh(storeFyDocumentNo);
            	   header++;
               }
               List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();
               StoreInternalIndentT storeInternalIndentT = new StoreInternalIndentT();
               int srNo=Integer.parseInt((sr_no.get(i).toString()));
               storeInternalIndentT.setInternal(newMObj);
               storeInternalIndentT.setSrNo(srNo);
               storeInternalIndentT.setStockInHand(0);
               int item_id=Integer.parseInt(itemId.get(i).toString());
               storeInternalIndentT.setQtyRequest(qtypending);
               MasStoreItem masStoreItem = new MasStoreItem();
               masStoreItem.setId(item_id);
               storeInternalIndentT.setItem(masStoreItem);
               MasDepartment department = new MasDepartment();
               department.setId(deptId);
        	   storeInternalIndentT.setDepartment(department);*/




		status=true;
		return status;
	}








	public Map<String, Object> getPrescriptionForPatientIssueList(Map<String, Object> dataMap)
	{
		Session session = (Session) getSession();
		List<PatientPrescriptionHeader> prescriptionHeaderList = new ArrayList<PatientPrescriptionHeader>();
		List<PatientPrescriptionDetails> prescriptionDetailsList=new ArrayList<PatientPrescriptionDetails>();
		List<StoreItemBatchStock> listOfItemsStock = new ArrayList<StoreItemBatchStock>();
		Map<String, Object> map = new HashMap<String, Object>();
		int prescriprionId=0;
		int deptId=0;
		int prescriptionNo=0;
		if(dataMap.get("deptId")!=null)
			deptId = (Integer) dataMap.get("deptId");
		if(dataMap.get("prescriptionNo")!=null)
			prescriptionNo = (Integer) dataMap.get("prescriptionNo");

		try {
			prescriptionHeaderList = session.createCriteria(PatientPrescriptionHeader.class).add(
					Restrictions.eq("PrescriptionNo", prescriptionNo)).list();

			for(PatientPrescriptionHeader patientPresciptionHeader:prescriptionHeaderList)
			{
				prescriprionId=patientPresciptionHeader.getId();
			}

			prescriptionDetailsList = session.createCriteria(PatientPrescriptionDetails.class).add(
					Restrictions.eq("Prescription.Id",prescriprionId)).list();

			listOfItemsStock = session
			.createQuery(
					"select sib.Item.Id,sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="
					+ deptId + "group by sib.Item.Id ").list();

		}catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("prescriptionDetailsList", prescriptionDetailsList);
		map.put("listOfItemsStock", listOfItemsStock);

		return map;
	}
	@Override
	public Map<String, Object> showActualStockReportJsp() {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = getSession();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<MasItemType> itemTypeList = new ArrayList<MasItemType>();
		List<MasItemCategory> itemCategoryList = new ArrayList<MasItemCategory>();
		List<MasStoreGroup> groupList = new ArrayList<MasStoreGroup>();
		List<MasItemClass> masItemClassList = new ArrayList<MasItemClass>();
		try{
			sectionList=session.createCriteria(MasStoreSection.class).add(Restrictions.eq("Status", "y")).addOrder(Order.asc("SectionName")).list();


			
			itemTypeList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasItemType as mc where upper(mc.Status) = upper('y')");
			itemCategoryList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasItemCategory as mc where upper(mc.Status) = upper('y')");
		
			groupList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasStoreGroup as mg where upper(mg.Status) =upper('y')");
			
			masItemClassList= getHibernateTemplate()
			.find("from jkt.hms.masters.business.MasItemClass where upper(Status) =upper('y')");

		}catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("sectionList", sectionList);
		map.put("storeSectionList", sectionList);
		map.put("itemTypeList", itemTypeList);
		map.put("itemCategoryList", itemCategoryList);
		map.put("masItemClassList", masItemClassList);
		map.put("groupList", groupList);
		
		return map;
	}
	public Map<String, Object> generateActualStockExcel(Map<String,Object> map)
	{
		String hospitalName = null;
		int hospitalId=0;
		int deptId=0;
		String deptName = null;
		String query="";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Session session = getSession();
		List storeItmBatchList=new ArrayList();
		if(map.get("hospitalName") != null){
			hospitalName = (String)map.get("hospitalName");
		}
		if(map.get("hospitalId") != null){
			hospitalId = (Integer)map.get("hospitalId");
		}
		if(map.get("deptName") != null){
			deptName = (String)map.get("deptName");
		}
		if(map.get("deptId") != null){
			deptId = (Integer)map.get("deptId");
		}
		if(map.get("query") != null){
			query = (String)map.get("query");
		}

		/*String qry="select sum(nvl(store_item_batch_stock.received_qty,0)) as batch_stock_received_qty," +
	    		"sum(nvl(store_item_batch_stock.issue_qty,0)) as batch_stock_issue_qty,sum(nvl(store_item_batch_stock.opening_balance_qty,0))" +
	    		" as batch_stock_opning_balnce_qty,mas_store_item.pvms_no as mas_store_item_pvms_no,mas_store_item.nomenclature as mas_store_item_nomenclature" +
	    		",(sum(nvl(store_item_batch_stock.opening_balance_qty,0)) + sum(nvl(store_item_batch_stock.received_qty,0)) - sum(nvl(store_item_batch_stock.issue_qty,0)))" +
	    		"as balance_qty,store_item_batch_stock.item_id from mas_store_item mas_store_item inner join store_item_batch_stock store_item_batch_stock on mas_store_item.item_id = store_item_batch_stock.item_id" +
	    		" where store_item_batch_stock.department_id =" +deptId+" "+query+
	    		" group by store_item_batch_stock.item_id,mas_store_item.pvms_no,mas_store_item.nomenclature " +
	    		"order by  mas_store_item_pvms_no,mas_store_item.nomenclature";*/


		// add by javed khan fro multi hospital

		String qry="select " +
		" mas_store_item.pvms_no as mas_store_item_pvms_no,mas_store_item.nomenclature as mas_store_item_nomenclature" +
		", sum(coalesce(store_item_batch_stock.closing_stock,0)) " +
		"as balance_qty,store_item_batch_stock.item_id,msic.ITEM_UNIT_NAME from mas_store_item mas_store_item inner join store_item_batch_stock store_item_batch_stock on mas_store_item.item_id = store_item_batch_stock.item_id" +
		" left outer join mas_store_item_conversion msic on mas_store_item.ITEM_CONVERSION_ID = msic.ITEM_CONVERSION_ID "+
		" where store_item_batch_stock.department_id =" +deptId+
		" and store_item_batch_stock.hospital_id=" +hospitalId+" and store_item_batch_stock.closing_stock>0"+" "+" "+query+
		" group by store_item_batch_stock.item_id,mas_store_item.pvms_no,mas_store_item.nomenclature, msic.ITEM_UNIT_NAME " +
		"order by  mas_store_item_pvms_no,mas_store_item.nomenclature";
		
		Query queryHiber = session.createSQLQuery(qry);
		if (map.get("pvms") != null &&(!map.get("pvms").equals(""))) {
			queryHiber =queryHiber.setParameter("pvms", map.get("pvms"));
		}
		storeItmBatchList=queryHiber.list();
		
		//storeItmBatchList=session.createSQLQuery(qry).list();
		Iterator itr=storeItmBatchList.iterator();
		try
		{

			HSSFWorkbook wb = new HSSFWorkbook();
			HSSFSheet sheet = wb.createSheet("Stock Status Report");
			//sheet.setColumnWidth((short) 1, (short)10);
			// Create a new font and alter it.

			HSSFFont font = wb.createFont();
			font.setFontHeightInPoints((short) 10);
			font.setFontName(HSSFFont.FONT_ARIAL);
			font.setColor((short) 180);
			font.setItalic(false);
			font.setStrikeout(false);
			font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);

			HSSFFont font1 = wb.createFont();
			font1.setFontHeightInPoints((short) 12);
			font1.setFontName(HSSFFont.FONT_ARIAL);
			font1.setColor((short) 180);
			font1.setItalic(false);
			font1.setStrikeout(false);
			font1.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);

			HSSFFont font2 = wb.createFont();
			font2.setFontHeightInPoints((short) 9);
			font2.setFontName(HSSFFont.FONT_ARIAL);
			font2.setColor((short) 180);
			font2.setItalic(false);
			font2.setStrikeout(false);
			font2.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);

			// Fonts are set into a style so create a new one to
			// use.
			HSSFCellStyle style = wb.createCellStyle();
			style.setFont(font);
			style.setAlignment((short) 2);

			HSSFCellStyle style1 = wb.createCellStyle();
			style1.setFont(font1);
			style1.setAlignment((short) 2);

			HSSFCellStyle style2 = wb.createCellStyle();
			style2.setFont(font2);
			style2.setAlignment((short) 2);

			//style1.setLocked(true);

			HSSFRow row2 = sheet.createRow((short) 2);
			HSSFCell cell20 = row2.createCell((short) 2);
			cell20.setCellValue(new HSSFRichTextString(hospitalName));
			cell20.setCellStyle(style1);
			sheet.addMergedRegion(new Region(2, (short) 2, 2, (short) 4));

			HSSFRow row3 = sheet.createRow((short) 3);
			HSSFCell cell30 = row3.createCell((short) 2);
			SimpleDateFormat sdf = new SimpleDateFormat("dd/mm/yyyy");
			//String dateStringFormat = java.util.Date.valueOf((sdf.format(new Date())));
			cell30.setCellValue(new HSSFRichTextString("Stock Status Report as on Date"));
			cell30.setCellStyle(style1);
			sheet.addMergedRegion(new Region(3, (short) 2, 3, (short) 4));

			//HSSFCell cell32 = row3.createCell((short) 7);
			//cell32.setCellValue(new HSSFRichTextString("25/12/2011"));

			HSSFRow row4 = sheet.createRow((short) 4);
			HSSFCell cell40 = row4.createCell((short)1);
			cell40.setCellStyle(style1);
			cell40.setCellValue(new HSSFRichTextString(""));
			sheet.addMergedRegion(new Region(4, (short) 0, 4, (short) 7));

			// =====Heading Row Start===========================
			HSSFRow headingRow1 = sheet.createRow((short) 5);

			HSSFCell cell70 = headingRow1.createCell((short) 0);
			cell70.setCellValue(new HSSFRichTextString("Sl No."));
			cell70.setCellStyle(style2);
			sheet.autoSizeColumn((short) 0);

			HSSFCell cell71 = headingRow1.createCell((short) 1);
			cell71.setCellValue(new HSSFRichTextString("PVMS/NIV No."));
			cell71.setCellStyle(style2);
			sheet.autoSizeColumn((short) 1);

			HSSFCell cell72 = headingRow1.createCell((short) 2);
			cell72.setCellValue(new HSSFRichTextString("       Nomenclature                "));
			cell72.setCellStyle(style2);
			sheet.autoSizeColumn((short) 2);

			/*HSSFCell cell73 = headingRow1.createCell((short) 3);
				cell73.setCellValue(new HSSFRichTextString(" Opening Bal Qty "));
				cell73.setCellStyle(style2);
				sheet.autoSizeColumn((short) 3);

				HSSFCell cell74 = headingRow1.createCell((short) 4);
				cell74.setCellValue(new HSSFRichTextString(" Received Qty "));
				cell74.setCellStyle(style2);
				sheet.autoSizeColumn((short) 4);

				HSSFCell cell75 = headingRow1.createCell((short) 5);
				cell75.setCellStyle(style);
				cell75.setCellValue(new HSSFRichTextString(" Issues Qty Issued "));
				cell75.setCellStyle(style2);
				sheet.autoSizeColumn((short) 5);*/

			HSSFCell cell73 = headingRow1.createCell((short) 3);
			cell73.setCellValue(new HSSFRichTextString("        A/U       "));
			cell73.setCellStyle(style2);
			sheet.autoSizeColumn((short) 3);

			HSSFCell cell77 = headingRow1.createCell((short) 4);
			cell77.setCellValue(new HSSFRichTextString(" Stock Qty "));
			cell77.setCellStyle(style2);
			sheet.autoSizeColumn((short) 6);

			//============Heading Completed=======================

			//Region(int rowFrom, short colFrom, int rowTo, short colTo)
			//	sheet.addMergedRegion(new Region(6, (short) 1, 6, (short) 2));


			int row=6;
			int i=1;
			while(itr.hasNext())
			{
				Object[] pair = (Object[]) itr.next();


				String pvms_no=pair[0].toString();
				String nomenclature=pair[1].toString();
				float balance_qty=Float.parseFloat(pair[2].toString());
				float item_id=Float.parseFloat(pair[3].toString());
				if(pair[4]!= "")
				{
				String AU=pair[4].toString();
				}
				HSSFRow detailRow = sheet.createRow((short) row);

				HSSFCell cell90 = detailRow.createCell((short) 0);
				cell90.setCellValue(i);

				HSSFCell cell91 = detailRow.createCell((short) 1);
				cell91.setCellValue(new HSSFRichTextString(pvms_no));


				HSSFCell cell92 = detailRow.createCell((short) 2);
				cell92.setCellValue(new HSSFRichTextString(nomenclature));

				/*HSSFCell cell93 = detailRow.createCell((short) 3);
			cell93.setCellValue(opening_balance_qty);

			HSSFCell cell94 = detailRow.createCell((short) 4);
			cell94.setCellValue(received_qty);

			HSSFCell cell95 = detailRow.createCell((short) 5);
			cell95.setCellValue(issue_qty);
				 */

				HSSFCell cell93 = detailRow.createCell((short) 3);
				cell93.setCellValue(AU);

				HSSFCell cell97 = detailRow.createCell((short) 4);
				cell97.setCellValue(balance_qty);
				i++;
				row = row + 1;
			}

			dataMap.put("wb", wb);
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return dataMap;
	}
	public Map<String, Object> generateActualStockDetailsExcel(Map<String,Object> map)
	{
		String hospitalName = null;
		int hospitalId=0;
		int deptId=0;
		String deptName = null;
		String query="";
		//String qry="";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Session session = getSession();
		List storeItmBatchList=new ArrayList();
		if(map.get("hospitalName") != null){
			hospitalName = (String)map.get("hospitalName");
		}
		if(map.get("hospitalId") != null){
			hospitalId = (Integer)map.get("hospitalId");
		}
		if(map.get("deptName") != null){
			deptName = (String)map.get("deptName");
		}
		if(map.get("deptId") != null){
			deptId = (Integer)map.get("deptId");
		}
		if(map.get("query") != null){
			query = (String)map.get("query");
		}

		/*
	    String qry="select sibs.item_id,mas_store_item.nomenclature,mas_store_item.pvms_no,sibs.batch_no,sibs.expiry_date," +
	    		"(sum(nvl(sibs.opening_balance_qty,0))+ sum(nvl(sibs.received_qty,0)) - sum(nvl(sibs.issue_qty,0))) as Stock_qty from mas_store_item " +
	    		"mas_store_item left outer join store_item_batch_stock  sibs on mas_store_item.item_id=sibs.item_id where " +
	    		"sibs.department_id =" +deptId+
	    		" and  mas_store_item.Status='y' " +query +
	    		" group by sibs.item_id,mas_store_item.nomenclature,mas_store_item.pvms_no,sibs.batch_no,sibs.expiry_date,mas_store_item.pvms_no,sibs.batch_no," +
	    		"sibs.expiry_date,sibs.cost_price,sibs.mrp Order By mas_store_item.pvms_no,mas_store_item.nomenclature";*/



		// javed khan for hospital_id
		/*String qry="select sibs.item_id,mas_store_item.nomenclature,mas_store_item.pvms_no,sibs.batch_no,sibs.expiry_date," +
		" sum(nvl(sibs.closing_stock,0)) as Stock_qty from mas_store_item " +
		"mas_store_item left outer join store_item_batch_stock  sibs on mas_store_item.item_id=sibs.item_id where " +
		"sibs.department_id =" +deptId+
		" and sibs.hospital_id="+hospitalId+
		" and  mas_store_item.Status='y' " +query +
		" group by sibs.item_id,mas_store_item.nomenclature,mas_store_item.pvms_no,sibs.batch_no,sibs.expiry_date,mas_store_item.pvms_no,sibs.batch_no," +
		"sibs.expiry_date,sibs.cost_price,sibs.mrp,sibs.closing_stock Order By mas_store_item.pvms_no,mas_store_item.nomenclature";*/



		String qry="select  mas_store_item.pvms_no as mas_store_item_pvms_no,"+
		" mas_store_item.nomenclature as mas_store_item_nomenclature,"+ 
		" sum(store_item_batch_stock.CLOSING_STOCK) as balance_qty,"+
		" store_item_batch_stock.item_id,"+
		" store_item_batch_stock.batch_no,"+
		" cast(store_item_batch_stock.expiry_date as varchar(10)),"+     
		" mas_store_item_conversion.ITEM_UNIT_NAME  ,"+
		" store_item_batch_stock.MANUFACTURE_DATE , mm.MANUFACTURER_NAME as comp  from mas_store_item mas_store_item "+ 
		" inner join store_item_batch_stock store_item_batch_stock on mas_store_item.item_id = store_item_batch_stock.item_id "+
		" left outer join mas_store_item_conversion mas_store_item_conversion on mas_store_item.ITEM_CONVERSION_ID=mas_store_item_conversion.ITEM_CONVERSION_ID "+
		" left outer join mas_store_brand msb on store_item_batch_stock.brand_ID = msb.brand_ID"+
		" left outer join mas_manufacturer mm on  msb.MANUFACTURER_ID   =mm.MANUFACTURER_ID "+ 
		" where store_item_batch_stock.department_id =" +deptId+
		" and store_item_batch_stock.hospital_id="+hospitalId+		
		query +
		" and store_item_batch_stock.CLOSING_STOCK>0 "+
		" group by store_item_batch_stock.item_id,mas_store_item.pvms_no, "+
		" mas_store_item.nomenclature,mas_store_item_conversion.ITEM_UNIT_NAME, "+
		" store_item_batch_stock.batch_no,store_item_batch_stock.expiry_date , "+
		" store_item_batch_stock.MANUFACTURE_DATE ,mm.MANUFACTURER_NAME order by "+ 
		" mas_store_item_pvms_no,mas_store_item.nomenclature ";

		// added by javed khan on 23-10-13
		
		Query queryHiber = session.createSQLQuery(qry);
		if (map.get("pvms") != null &&(!map.get("pvms").equals(""))) {
			queryHiber =queryHiber.setParameter("pvms", map.get("pvms"));
		}
		//storeItmBatchList=session.createSQLQuery(qry).list();
		storeItmBatchList=queryHiber.list();
		
		// added by javed khan on 23-10-13
	
		Iterator itr=storeItmBatchList.iterator();
		try
		{

			HSSFWorkbook wb = new HSSFWorkbook();
			HSSFSheet sheet = wb.createSheet("Stock Status Report");
			//sheet.setColumnWidth((short) 1, (short)10);
			// Create a new font and alter it.

			HSSFFont font = wb.createFont();
			font.setFontHeightInPoints((short) 10);
			font.setFontName(HSSFFont.FONT_ARIAL);
			font.setColor((short) 80);
			font.setItalic(false);
			font.setStrikeout(false);
			font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);

			HSSFFont font1 = wb.createFont();
			font1.setFontHeightInPoints((short) 12);
			font1.setFontName(HSSFFont.FONT_ARIAL);
			font1.setColor((short) 80);
			font1.setItalic(false);
			font1.setStrikeout(false);
			font1.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);

			HSSFFont font2 = wb.createFont();
			font2.setFontHeightInPoints((short) 9);
			font2.setFontName(HSSFFont.FONT_ARIAL);
			font2.setColor((short) 80);
			font2.setItalic(false);
			font2.setStrikeout(false);
			font2.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);

			// Fonts are set into a style so create a new one to
			// use.
			HSSFCellStyle style = wb.createCellStyle();
			style.setFont(font);
			style.setAlignment((short) 2);

			HSSFCellStyle style1 = wb.createCellStyle();
			style1.setFont(font1);
			style1.setAlignment((short) 2);

			HSSFCellStyle style2 = wb.createCellStyle();
			style2.setFont(font2);
			style2.setAlignment((short) 2);

			//style1.setLocked(true);

			HSSFRow row2 = sheet.createRow((short) 2);
			HSSFCell cell20 = row2.createCell((short) 2);
			cell20.setCellValue(new HSSFRichTextString(hospitalName));
			cell20.setCellStyle(style1);
			sheet.addMergedRegion(new Region(2, (short) 2, 2, (short) 4));

			HSSFRow row3 = sheet.createRow((short) 3);
			HSSFCell cell30 = row3.createCell((short) 2);
			cell30.setCellValue(new HSSFRichTextString("Stock Status Details Report"));
			cell30.setCellStyle(style1);
			sheet.addMergedRegion(new Region(3, (short) 2, 3, (short) 4));

			//HSSFCell cell32 = row3.createCell((short) 7);
			//cell32.setCellValue(new HSSFRichTextString("25/12/2011"));

			HSSFRow row4 = sheet.createRow((short) 4);
			HSSFCell cell40 = row4.createCell((short) 1);
			cell40.setCellStyle(style1);
			cell40.setCellValue(new HSSFRichTextString(""));
			sheet.addMergedRegion(new Region(4, (short) 0, 4, (short) 7));

			// =====Heading Row Start===========================
			HSSFRow headingRow1 = sheet.createRow((short) 5);

			HSSFCell cell70 = headingRow1.createCell((short) 0);
			cell70.setCellValue(new HSSFRichTextString("Sl NO."));
			cell70.setCellStyle(style2);
			sheet.autoSizeColumn((short) 0);

			HSSFCell cell71 = headingRow1.createCell((short) 1);
			cell71.setCellValue(new HSSFRichTextString("PVMS/NIV No."));
			cell71.setCellStyle(style2);
			sheet.autoSizeColumn((short) 1);

			HSSFCell cell72 = headingRow1.createCell((short) 2);
			cell72.setCellValue(new HSSFRichTextString("       Nomenclature                "));
			cell72.setCellStyle(style2);
			sheet.autoSizeColumn((short) 2);

			HSSFCell cell73 = headingRow1.createCell((short) 3);
			cell73.setCellValue(new HSSFRichTextString(" Batch No. "));
			cell73.setCellStyle(style2);
			sheet.autoSizeColumn((short) 3);

			HSSFCell cell74 = headingRow1.createCell((short) 4);
			cell74.setCellValue(new HSSFRichTextString(" Expiry Date "));
			cell74.setCellStyle(style2);
			sheet.autoSizeColumn((short) 4);

			HSSFCell cell75 = headingRow1.createCell((short) 5);
			cell75.setCellStyle(style);
			cell75.setCellValue(new HSSFRichTextString(" Stock Qty "));
			cell75.setCellStyle(style2);
			sheet.autoSizeColumn((short) 5);


			int row=6;
			int i=1;
			while(itr.hasNext())
			{
				Object[] pair = (Object[]) itr.next();
				String expiry_date="";
				float stock_qty=Float.parseFloat(pair[2].toString());
				String pvms_no=pair[0].toString();
				String nomenclature=pair[1].toString();
				String batch_no="";
				if(pair[4]!=null){
					batch_no =pair[4].toString();
				}
				try {
					if(!pair[5].equals("") && pair[5]!=null){
						expiry_date=pair[5].toString();
					}else{
						expiry_date="-";
					}
				} catch (Exception e) {
					expiry_date="-";
				}

				HSSFRow detailRow = sheet.createRow((short) row);

				HSSFCell cell90 = detailRow.createCell((short) 0);
				cell90.setCellValue(i);

				HSSFCell cell91 = detailRow.createCell((short) 1);
				cell91.setCellValue(new HSSFRichTextString(pvms_no));


				HSSFCell cell92 = detailRow.createCell((short) 2);
				cell92.setCellValue(new HSSFRichTextString(nomenclature));

				HSSFCell cell93 = detailRow.createCell((short) 3);
				cell93.setCellValue(new HSSFRichTextString(batch_no));

				HSSFCell cell94 = detailRow.createCell((short) 4);
				cell94.setCellValue(new HSSFRichTextString(expiry_date));

				HSSFCell cell95 = detailRow.createCell((short) 5);
				cell95.setCellValue(stock_qty);


				i++;
				row = row + 1;
			}

			dataMap.put("wb", wb);
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return dataMap;
	}


	public Map<String, Object> generateActualStockSactionExcel(Map<String,Object> map)
	{
		String hospitalName = null;
		String query=null;
		int hospitalId=0;
		int deptId=0;
		String deptName = null;
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Session session = getSession();
		List storeItmBatchList=new ArrayList();
		if(map.get("hospitalName") != null){
			hospitalName = (String)map.get("hospitalName");
		}
		if(map.get("hospitalId") != null){
			hospitalId = (Integer)map.get("hospitalId");
		}
		if(map.get("deptName") != null){
			deptName = (String)map.get("deptName");
		}
		if(map.get("deptId") != null){
			deptId = (Integer)map.get("deptId");
		}
		if(map.get("query") != null){
			query = (String)map.get("query");
		}
		String qry="select sum(coalesce(store_item_batch_stock.received_qty,0)) as batch_stock_received_qty," +
		" sum(coalesce(store_item_batch_stock.issue_qty,0)) as batch_stock_issue_qty,sum(coalesce(store_item_batch_stock.opening_balance_qty,0)) as " +
		"batch_stock_opning_balnce_qty, mas_store_item.pvms_no as mas_store_item_pvms_no,mas_store_item.nomenclature as mas_store_item_nomenclature," +
		"(sum(coalesce(store_item_batch_stock.opening_balance_qty,0))+ sum(coalesce(store_item_batch_stock.received_qty,0)) - sum(coalesce(store_item_batch_stock.issue_qty,0)))as" +
		" balance_qty,store_item_batch_stock.item_id,mas_store_section.section_name from mas_store_item mas_store_item inner join store_item_batch_stock " +
		"store_item_batch_stock on mas_store_item.item_id = store_item_batch_stock.item_id left outer join  mas_store_section mas_store_section on " +
		"mas_store_item.section_id = mas_store_section.section_id where store_item_batch_stock.department_id = " +
		deptId +" "+query+
		" group by store_item_batch_stock.item_id,mas_store_item.pvms_no,mas_store_item.nomenclature,mas_store_section.section_name " +
		"order by  mas_store_item_pvms_no,mas_store_item.nomenclature";
		
		// add by javed khan on 23-10-2013
		Query queryHiber =(Query)session.createSQLQuery(qry);
		if (map.get("section") != null && !map.get("section").equals("")) {
			queryHiber = queryHiber.setParameter("section",map.get("section"))	;	
				}

				if ((map.get("pvms") != null && (!map.get("pvms").equals("")))) {
					queryHiber =queryHiber.setParameter("pvms", map.get("pvms"));
				}
				
		//storeItmBatchList=session.createSQLQuery(qry).list();
				storeItmBatchList =  (List) queryHiber.list();
		// add by javed khan on 23-10-2013
		Iterator itr=storeItmBatchList.iterator();
		try
		{

			HSSFWorkbook wb = new HSSFWorkbook();
			HSSFSheet sheet = wb.createSheet("Stock Status Report");
			//sheet.setColumnWidth((short) 1, (short)10);
			// Create a new font and alter it.

			HSSFFont font = wb.createFont();
			font.setFontHeightInPoints((short) 10);
			font.setFontName(HSSFFont.FONT_ARIAL);
			font.setColor((short) 80);
			font.setItalic(false);
			font.setStrikeout(false);
			font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);

			HSSFFont font1 = wb.createFont();
			font1.setFontHeightInPoints((short) 12);
			font1.setFontName(HSSFFont.FONT_ARIAL);
			font1.setColor((short) 80);
			font1.setItalic(false);
			font1.setStrikeout(false);
			font1.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);

			HSSFFont font2 = wb.createFont();
			font2.setFontHeightInPoints((short) 9);
			font2.setFontName(HSSFFont.FONT_ARIAL);
			font2.setColor((short) 80);
			font2.setItalic(false);
			font2.setStrikeout(false);
			font2.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);

			// Fonts are set into a style so create a new one to
			// use.
			HSSFCellStyle style = wb.createCellStyle();
			style.setFont(font);
			style.setAlignment((short) 2);

			HSSFCellStyle style1 = wb.createCellStyle();
			style1.setFont(font1);
			style1.setAlignment((short) 2);

			HSSFCellStyle style2 = wb.createCellStyle();
			style2.setFont(font2);
			style2.setAlignment((short) 2);

			//style1.setLocked(true);

			HSSFRow row2 = sheet.createRow((short) 2);
			HSSFCell cell20 = row2.createCell((short) 2);
			cell20.setCellValue(new HSSFRichTextString(hospitalName));
			cell20.setCellStyle(style1);
			sheet.addMergedRegion(new Region(2, (short) 2, 2, (short) 4));

			HSSFRow row3 = sheet.createRow((short) 3);
			HSSFCell cell30 = row3.createCell((short) 2);
			cell30.setCellValue(new HSSFRichTextString("Stock Status Report"));
			cell30.setCellStyle(style1);
			sheet.addMergedRegion(new Region(3, (short) 2, 3, (short) 4));

			//HSSFCell cell32 = row3.createCell((short) 7);
			//cell32.setCellValue(new HSSFRichTextString("25/12/2011"));

			HSSFRow row4 = sheet.createRow((short) 4);
			HSSFCell cell40 = row4.createCell((short) 1);
			cell40.setCellStyle(style1);
			cell40.setCellValue(new HSSFRichTextString(""));
			sheet.addMergedRegion(new Region(4, (short) 0, 4, (short) 7));

			// =====Heading Row Start===========================
			HSSFRow headingRow1 = sheet.createRow((short) 5);

			HSSFCell cell70 = headingRow1.createCell((short) 0);
			cell70.setCellValue(new HSSFRichTextString("SR. NO."));
			cell70.setCellStyle(style2);
			sheet.autoSizeColumn((short) 0);

			HSSFCell cell71 = headingRow1.createCell((short) 1);
			cell71.setCellValue(new HSSFRichTextString("PVMS/NIV No."));
			cell71.setCellStyle(style2);
			sheet.autoSizeColumn((short) 1);

			HSSFCell cell72 = headingRow1.createCell((short) 2);
			cell72.setCellValue(new HSSFRichTextString("       Nomenclature                "));
			cell72.setCellStyle(style2);
			sheet.autoSizeColumn((short) 2);

			HSSFCell cell73 = headingRow1.createCell((short) 3);
			cell73.setCellValue(new HSSFRichTextString("Opening Bal Qty"));
			cell73.setCellStyle(style2);
			sheet.autoSizeColumn((short) 3);

			HSSFCell cell74 = headingRow1.createCell((short) 4);
			cell74.setCellValue(new HSSFRichTextString("Received Qty"));
			cell74.setCellStyle(style2);
			sheet.autoSizeColumn((short) 4);

			HSSFCell cell75 = headingRow1.createCell((short) 5);
			cell75.setCellStyle(style);
			cell75.setCellValue(new HSSFRichTextString("Issues Qty Issued"));
			cell75.setCellStyle(style2);
			sheet.autoSizeColumn((short) 5);

			HSSFCell cell77 = headingRow1.createCell((short) 6);
			cell77.setCellValue(new HSSFRichTextString("Balance Qty"));
			cell77.setCellStyle(style2);
			sheet.autoSizeColumn((short) 6);


			int row=6;
			int i=1;
			while(itr.hasNext())
			{
				Object[] pair = (Object[]) itr.next();

				float received_qty=Float.parseFloat(pair[0].toString());
				float issue_qty=Float.parseFloat(pair[1].toString());
				float opening_balance_qty=Float.parseFloat(pair[2].toString());
				String pvms_no=pair[3].toString();
				String nomenclature=pair[4].toString();
				String section_name=pair[7].toString();
				float balance_qty=Float.parseFloat(pair[5].toString());

				HSSFRow detailRow = sheet.createRow((short) row);

				HSSFCell cell90 = detailRow.createCell((short) 0);
				cell90.setCellValue(i);

				HSSFCell cell91 = detailRow.createCell((short) 1);
				cell91.setCellValue(new HSSFRichTextString(pvms_no));


				HSSFCell cell92 = detailRow.createCell((short) 2);
				cell92.setCellValue(new HSSFRichTextString(nomenclature));

				HSSFCell cell93 = detailRow.createCell((short) 3);
				cell93.setCellValue(opening_balance_qty);

				HSSFCell cell94 = detailRow.createCell((short) 4);
				cell94.setCellValue(received_qty);

				HSSFCell cell95 = detailRow.createCell((short) 5);
				cell95.setCellValue(issue_qty);

				HSSFCell cell97 = detailRow.createCell((short) 6);
				cell97.setCellValue(balance_qty);

				i++;
				row = row + 1;
			}

			dataMap.put("wb", wb);
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return dataMap;
	}

	public  List<StoreOpPatientIssueT> getDailyIssueSummery(Map<String,Object> map)
	{
		int hospitalId=0;
		int deptId=0;
		Date fromDate=null;
		Date toDate=null;
		String pvmsNo="";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if(map.get("hospitalId") != null){
			hospitalId = (Integer)map.get("hospitalId");
		}
		if(map.get("deptId") != null){
			deptId = (Integer)map.get("deptId");
		}
		if(map.get("fromDate") != null){
			fromDate =(Date)map.get("fromDate");
		}
		if(map.get("toDate") != null){
			toDate = (Date)map.get("toDate");
		}
		if(map.get("pvmsNo") != null){
			pvmsNo = (String)map.get("pvmsNo");
		}

		Session session = getSession();
		List<StoreOpPatientIssueM> storeOpPatientIssueM=new ArrayList<StoreOpPatientIssueM>();
		List<StoreOpPatientIssueT> storeOpPatientIssueT=new ArrayList<StoreOpPatientIssueT>();
		/* storeOpPatientIssueM = session.createCriteria(StoreOpPatientIssueM.class).add(
				Restrictions.eq("Status", "y")).add(Restrictions.between("IssueDate", fromDate, toDate))
			.add(Restrictions.eq("Department.Id", deptId)).add(Restrictions.eq("Hospital.Id", hospitalId)).list();
	    int opPatientId=0;
	    for(StoreOpPatientIssueM opPatientIssueM:storeOpPatientIssueM)
	    {
	    	opPatientId=opPatientIssueM.getId();
		 */
		storeOpPatientIssueT = session.createCriteria(StoreOpPatientIssueT.class).
		createAlias("OpIssue", "opIssueM")
		.add(Restrictions.eq("opIssueM.Status","y"))
		.add(Restrictions.between("opIssueM.IssueDate", fromDate, toDate))
		.add(Restrictions.eq("opIssueM.Department.Id", deptId))
		.add(Restrictions.eq("opIssueM.Hospital.Id", hospitalId))
		.createAlias("ItemIdIssue", "itemIdIssue")
		.add(Restrictions.eq("itemIdIssue.PvmsNo", pvmsNo)).list();
		//}

		return storeOpPatientIssueT;

	}
	public Map<String, Object> getPatientDetailsForNextPrescription(int prescriptionId)
	{
		Map<String, Object> map = new HashMap<String, Object>();
		List<PatientPrescriptionHeader> prescriptionList = new ArrayList<PatientPrescriptionHeader>();
		int prescriptionNo=prescriptionId+1;
		String checkNextRecord=null;
		Session session = getSession();
		try {
			prescriptionList = session.createCriteria(PatientPrescriptionHeader.class).
			add(Restrictions.eq("PrescriptionNo", prescriptionNo)).list();
			if(prescriptionList.size()>0)
			{
				checkNextRecord="no";
				map.put("prescriptionList", prescriptionList);
			}else
			{
				checkNextRecord="yes";
				prescriptionNo=prescriptionNo-1;
				prescriptionList = session.createCriteria(PatientPrescriptionHeader.class).
				add(Restrictions.eq("PrescriptionNo", prescriptionNo)).list();
				map.put("prescriptionList", prescriptionList);

			}
			map.put("checkNextRecord", checkNextRecord);
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return map;
	}
	public Map<String, Object> fillItemsInGridForDepartmentIndent(Map map) {

		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Session session = (Session) getSession();
		List<Object> listOfItemsStock = new ArrayList<Object>();
		int itemId = (Integer) map.get("itemId");
		int deptId = (Integer) map.get("deptId");
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			itemList = session.createCriteria(MasStoreItem.class).add(
					Restrictions.eq("Id", itemId)).add(
							Restrictions.eq("Status", "y")).list();

			map.put("itemList", itemList);

			listOfItemsStock = session
			.createQuery(
					"select sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="
					+ deptId + " and sib.Item.Id="+ itemList.get(0).getId() +" group by sib.Item.Id ").list();

			if (listOfItemsStock != null && listOfItemsStock.size() > 0)
			{
				for (Object obj : listOfItemsStock) {
					map.put("stock", (BigDecimal) obj);

				}

			} else {
				map.put("stock", new BigDecimal(0));
			}


		} catch (Exception e) {
			e.printStackTrace();
		}

		return map;
	}
	public boolean submitOPDPatientStockDetailsWithBarCode(Map map) {
		Session session = (Session) getSession();
		boolean succesfullyAdded = false;
		List<String> batchNumberList = (List) map.get("batchNumberList");
		List brandNameList = (List) map.get("brandNameList");
		List expiryDateList = (List) map.get("expiryDateList");
		List issQtyList = (List) map.get("issQtyList");
		List costPriceList = (List) map.get("costPriceList");
		List amountList = (List) map.get("amountList");
		List storeItemBatchStockIdList = (List) map.get("storeItemBatchStockIdList");
		String date = (String) map.get("date");
		int deptId = (Integer) map.get("deptId");
		int hospitalId = (Integer) map.get("hospitalId");
		String time = (String) map.get("time");
		String userName = (String) map.get("userName");
		int storeFyDocumentNoId = (Integer) map.get("storeFyDocumentNoId");
		String opdIssueno = (String) map.get("opdIssueno");
		int hinId = (Integer) map.get("hinId");
		int empId = (Integer) map.get("empId");
		int itemId = (Integer) map.get("itemId");
		String prescriptionNo = (String) map.get("prescriptionNo");
		String buttonFlag = (String) map.get("buttonFlag");
		String serviceNo = (String) map.get("serviceNo");
		int patientPrescriptionId = 0;
		String issueTypeP=null;
		List loanOutQtyList=null;
		if(map.get("issueType")!=null){
			issueTypeP=(String)map.get("issueType");
		}
		if(map.get("loanOutQtyList")!=null){
			loanOutQtyList=(List)map.get("loanOutQtyList");
		}
		if(map.get("patientPrescriptionId") != null){
			patientPrescriptionId = (Integer)(map.get("patientPrescriptionId"));
		}
		Date dateToInsert=null;
		if((map.get("date")!=null)&&(!map.get("date").equals("")))
			dateToInsert = HMSUtil.convertStringTypeDateToDateType(date);
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) hbt.load(StoreFyDocumentNo.class,storeFyDocumentNoId);
			StoreOpPatientIssueM storeOpPatientIssueM = null;
			String opdPatientIssueNoFromDB = "";
			if(storeFyDocumentNo.getOpdIssueNo() != null)
				opdPatientIssueNoFromDB = storeFyDocumentNo.getOpdIssueNo();

			if (!opdPatientIssueNoFromDB.equals(opdIssueno)) {

				storeFyDocumentNo.setOpdIssueNo(opdIssueno);
				hbt.update(storeFyDocumentNo);

				storeOpPatientIssueM = new StoreOpPatientIssueM();
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				storeOpPatientIssueM.setDepartment(masDepartment);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				storeOpPatientIssueM.setHospital(masHospital);

				PatientPrescriptionHeader prescriptionHeader = new PatientPrescriptionHeader();

				if(patientPrescriptionId != 0){
					prescriptionHeader.setId(patientPrescriptionId);
					storeOpPatientIssueM.setPatientPrescriptionHeader(prescriptionHeader);
				}

				storeOpPatientIssueM.setIssueType("I");
				storeOpPatientIssueM.setTypeOfIssue("P");
				Patient patient = new Patient();
				if (hinId != 0) {
					patient.setId(hinId);
					storeOpPatientIssueM.setHin(patient);
					storeOpPatientIssueM.setServiceNo(serviceNo);
				} else
					storeOpPatientIssueM.setServiceNo(serviceNo);

				storeOpPatientIssueM.setIssueNo(opdIssueno);
				storeOpPatientIssueM.setIssueDate(dateToInsert);
				storeOpPatientIssueM.setStatus("y");
				storeOpPatientIssueM.setPrescriptionNo(prescriptionNo);
				MasEmployee masEmployee = new MasEmployee();
				if(empId != 0){
					masEmployee.setId(empId);
					storeOpPatientIssueM.setEmp(masEmployee);
				}

				storeOpPatientIssueM.setLastChgBy(userName);
				storeOpPatientIssueM.setLastChgDate(dateToInsert);
				storeOpPatientIssueM.setLastChgTime(time);
				hbt.save(storeOpPatientIssueM);
			} else {
				String issueType = "I";
				// List storeOPDPatientMList = session.createQuery("select som
				// from StoreOpPatientIssueM as som where
				// som.IssueNo="+opdIssueno+" and som.IssueType='I'").list();
				List storeOPDPatientMList = session.createCriteria(
						StoreOpPatientIssueM.class).add(
								Restrictions.eq("IssueNo", opdIssueno)).add(
										Restrictions.eq("IssueType", issueType))
										.add(Restrictions.eq("TypeOfIssue","P"))
										.createAlias("Department", "dept")
										.add(Restrictions.eq("dept.Id", deptId)).list();
				storeOpPatientIssueM = (StoreOpPatientIssueM) storeOPDPatientMList
				.get(0);
			}

			Iterator itr = issQtyList.iterator();
			int i = 0;
			for (int j = 0; i < issQtyList.size(); j++)	{
				BigDecimal totalQtyIssued;
				StoreOpPatientIssueT storeOpPatientIssueT = new StoreOpPatientIssueT();

				storeOpPatientIssueT.setOpIssue(storeOpPatientIssueM);
				MasStoreItem masStoreItem = new MasStoreItem();
				masStoreItem.setId(itemId);
				storeOpPatientIssueT.setItemIdRequire(masStoreItem);
				storeOpPatientIssueT.setItemIdIssue(masStoreItem);
				storeOpPatientIssueT.setBatchNo(batchNumberList.get(i));
				MasStoreBrand masStoreBrand = new MasStoreBrand();
				masStoreBrand.setId(Integer.parseInt("" + brandNameList.get(i)));
				storeOpPatientIssueT.setBrand(masStoreBrand);
				String str_date = (String) expiryDateList.get(i);
				String expiryDate=str_date.substring(8)+"/"+str_date.substring(5,7)+"/"+str_date.substring(0,4);
				Date expiryDateToInsert = HMSUtil
				.convertStringTypeDateToDateType(expiryDate);
				storeOpPatientIssueT.setExpiryDate(expiryDateToInsert);
				BigDecimal issuedQtyFromJsp = new BigDecimal(""
						+ issQtyList.get(i));
				storeOpPatientIssueT.setQtyIssued(issuedQtyFromJsp);
				if(issueTypeP.equalsIgnoreCase("loanOut")){
					storeOpPatientIssueT.setOpIssueType(issueTypeP);
					BigDecimal bigDecimal4 = new BigDecimal("" + loanOutQtyList.get(i));
					storeOpPatientIssueT.setOpLoanQty(bigDecimal4);
				}
				BigDecimal bigDecimal2 = new BigDecimal(""
						+ costPriceList.get(i));
				storeOpPatientIssueT.setRate(bigDecimal2);
				BigDecimal bigDecimal3 = new BigDecimal("" + amountList.get(i));
				storeOpPatientIssueT.setAmount(bigDecimal3);
				// hbt.save(storeIpIssueT);
				int storeItemBatchStockId = Integer.parseInt(""
						+ storeItemBatchStockIdList.get(i));
				StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock) hbt
				.load(StoreItemBatchStock.class, storeItemBatchStockId);
				BigDecimal qtyIssued = (BigDecimal) storeItemBatchStock
				.getIssueQty();
				// BigDecimal issQty=(BigDecimal)issQtyList.get(i);

				if (qtyIssued != null) {
					totalQtyIssued = qtyIssued.add(issuedQtyFromJsp);
				} else {
					totalQtyIssued = issuedQtyFromJsp;
				}

				BigDecimal closingStock = (BigDecimal) storeItemBatchStock
				.getClosingStock();
				closingStock = closingStock.subtract(issuedQtyFromJsp);
				storeItemBatchStock.setIssueQty(totalQtyIssued);
				storeItemBatchStock.setClosingStock(closingStock);
				if(issueTypeP.equalsIgnoreCase("loanOut")){
					BigDecimal bigDecimal5 = new BigDecimal("" + loanOutQtyList.get(i));
					storeItemBatchStock.setLoanOutQty(bigDecimal5);
				}

				// hbt.save(storeIpIssueM);
				hbt.save(storeOpPatientIssueT);
				hbt.update(storeItemBatchStock);

				/**
				 * Update Qty Issued in Patient Prescription
				 * Added by Ritu
				 *
				 */
				int patientPrescriptionDtId = 0;
				if(map.get("patientPrescriptionDtId") != null){
					patientPrescriptionDtId = (Integer)map.get("patientPrescriptionDtId");
				}

				if(patientPrescriptionDtId !=0){
					int alreadyIssuedQty = 0;
					PatientPrescriptionDetails patientPrescriptionDetails = (PatientPrescriptionDetails)hbt.load(PatientPrescriptionDetails.class, patientPrescriptionDtId);
					if(patientPrescriptionDetails.getQtyIssued() != null){
						alreadyIssuedQty = patientPrescriptionDetails.getQtyIssued();
					}
					patientPrescriptionDetails.setTotal(Integer.parseInt(issQtyList.get(i).toString()));
					patientPrescriptionDetails.setQtyIssued(alreadyIssuedQty+Integer.parseInt(issQtyList.get(i).toString()));
					hbt.update(patientPrescriptionDetails);
				}

				i++;
			}
			boolean allIssued = true;
			if(patientPrescriptionId != 0){
				List<PatientPrescriptionDetails> prescDtList = new ArrayList<PatientPrescriptionDetails>();
				prescDtList = session.createCriteria(PatientPrescriptionDetails.class).createAlias("Prescription", "p")
				.add(Restrictions.eq("p.Id", patientPrescriptionId)).add(Restrictions.isNull("QtyIssued")).list();
				if(prescDtList.size() ==0 ){
					PatientPrescriptionHeader presHd = (PatientPrescriptionHeader)hbt.load(PatientPrescriptionHeader.class, patientPrescriptionId);
					presHd.setStatus("c");
					hbt.update(presHd);
				}
			}
			succesfullyAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return succesfullyAdded;
	}




	//----------By Dipali For indent To Depo---
	@Override
	public Map<String, Object> showSearchIndentToDepo(int deptId,int hospitalId) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIndentM> searchStoreIndentMList = new ArrayList<StoreIndentM>();
		List<StoreIndentM> searchStoreIndentMExistList = new ArrayList<StoreIndentM>();
		Session session = getSession();
		List<MasStoreSection> sectionList;
		try {
			Criteria c= session.createCriteria(StoreIndentM.class).add(Restrictions.eq("Status", "o")).add(Restrictions.eq("Department.Id", deptId)).add(Restrictions.eq("Hospital.Id",hospitalId)).addOrder(Order.desc("IndentNo"));
			c.setFirstResult(0);
			c.setMaxResults(10);
			searchStoreIndentMList=c.list(); 
			Criteria c1= session.createCriteria(StoreIndentM.class).add(Restrictions.eq("Status", "u")).add(Restrictions.eq("Department.Id", deptId)).add(Restrictions.eq("Hospital.Id",hospitalId)).addOrder(Order.desc("Id"));
			//c1.setMaxResults(10);
			searchStoreIndentMExistList=c1.list();

			// add by javed khan for merging

			sectionList = new ArrayList<MasStoreSection>();
			sectionList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasStoreSection as ms where ms.Status = 'y' order by ms.SectionName asc ");
			map.put("sectionList", sectionList);
		} catch (HibernateException e) {

			e.printStackTrace();
		} catch (DataAccessException e) {

			e.printStackTrace();
		}

		// add by javed khan for merging


		map.put("searchStoreIndentMList", searchStoreIndentMList);
		map.put("searchStoreIndentMExistList", searchStoreIndentMExistList);

		return map;
	}

	@Override
	public Map<String, Object> deleteGridItemsForIndentDepo(Box box) {
		Session session = (Session) getSession();
		List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
		List<StoreMmfDepartmentT> storeMmfDepartmentTList1 = new ArrayList<StoreMmfDepartmentT>();
		List<StoreMmfDepartmentT> storeMmfDepartmentMList = new ArrayList<StoreMmfDepartmentT>();
		StoreMmfDepartmentT storeMmfDepartmentT = new StoreMmfDepartmentT();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			HibernateTemplate hbt = getHibernateTemplate();

			Vector srno = box.getVector(SR_NO);
			int indentId=box.getInt(RequestConstants.INDENT_ID);
			// Vector annreq = box.getVector(TENDER_ANNREQ);
			//	Vector items = box.getVector("id");
			Vector delete = box.getVector(ITEMS_TO_BE_DELETED);

			/*storeMmfDepartmentTList1 = session
					.createCriteria(StoreMmfDepartmentT.class)
					.createAlias("StoreMmfDepartmentM", "m")
					.add(
							Restrictions.eq("m.MmfForTheYear", box
									.getInt(MMF_DEPARTMENT_DATE)))
					.add(
							Restrictions
									.eq(
											"m.StoreWardDept.Id",
											box
													.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
					.add(
							Restrictions.eq("m.MmfStoreType", box
									.get("storeType"))).list();
			String obj = null;*/
			for (int i = 0; i < delete.size(); i++) {
				int itemId = Integer.parseInt(delete.get(i).toString());
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
				// String hql="delete from
				// jkt.hms.masters.business.StoreMmfDepartmentT as a where
				// a.Item.Id = "+itemId;
				//String hql = "delete from jkt.hms.masters.business.StoreIssueT as a where a.IssueM.Id ="+issueUnit+" and a.Item.Id = "+itemId+" and a.Issued ='y'";
				String hql = "delete from jkt.hms.masters.business.StoreIndentT as a where a.Id="+itemId+" and  a.Indent.Id="+indentId+"";
				Query query = session.createQuery(hql);
				int row = query.executeUpdate();
			}

			map.put("total_records", srno.size());
			map.put("deleted_records", delete.size());
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		box.remove("pvmsNo");

		//	map = getIndentModifyMapForDepot(box);
		return map;
	}
	//----------Stores by Dipali-----

	public Map<String, Object> searchIndentDetails(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		int requestNo = box.getInt("requestNo");
		int deptId=0;
		List<Object[]> indentTList = new ArrayList<Object[]>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		SimpleDateFormat formatterIn1 = new SimpleDateFormat("dd/MM/yyyy");
		SimpleDateFormat formatterOut1 = new SimpleDateFormat("yyyy-MM-dd");
		int hospitalId=0;
		if(box.get("hospitalId") != null)
		{
			hospitalId=Integer.parseInt(""+box.getInt("hospitalId"));
		}
		try {
			Session session = getSession();
			String date4MySQL=null;
			try {
				date4MySQL = formatterOut1.format(formatterIn1.parse(date));
			} catch (Exception e) {
				e.printStackTrace();
			}
			Date datestr = HMSUtil.getExpiryDateYYYYMMDD();
			SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
			String issueDate=sdf.format(datestr);
			/*String query="select masstoreit2_.item_id as col_0_0_, masstoreit2_.pvms_no as col_1_0_, masstoreit2_.nomenclature as col_2_0_,masstoreun4_.unit_name as col_3_0_, storeinter1_.department_id as col_4_0_, storeinter1_.id as col_5_0_, storeinter0_.id as col_6_0_, max(storeinter0_.qty_request) as col_7_0_, sum(storeinter0_.qty_issued) as col_8_0_, storeinter0_.sr_no as col_9_0_, storeinter1_.demand_date as col_10_0_, storeinter1_.requested_by as col_11_0_ ,msb.BRAND_ID from store_internal_indent_t storeinter0_ inner join store_internal_indent_m storeinter1_ on storeinter0_.internal_id=storeinter1_.id inner join mas_store_item masstoreit2_ on storeinter0_.item_id=masstoreit2_.item_id inner join mas_store_item_conversion masstoreit3_ on masstoreit2_.item_conversion_id=masstoreit3_.item_conversion_id inner join mas_store_unit masstoreun4_ on masstoreit3_.purchase_unit_id=masstoreun4_.unit_id inner join mas_store_brand msb on storeinter0_.ITEM_ID=msb.ITEM_ID where storeinter1_.id='"+requestNo+"' and storeinter0_.qty_request>nvl(storeinter0_.qty_issued, '0') group by masstoreit2_.item_id , masstoreit2_.pvms_no , masstoreit2_.nomenclature , masstoreun4_.unit_name , storeinter1_.department_id , storeinter1_.id , storeinter0_.id , storeinter0_.sr_no , storeinter1_.demand_date , storeinter1_.requested_by,msb.BRAND_ID order by masstoreit2_.nomenclature";*/
			// this qry comment by javed khan for adding hospital_id
			// String query="select mas_store_item .item_id , mas_store_item .pvms_no , mas_store_item .nomenclature , mas_store_unit .unit_name , store_internal_indent_m .department_id , store_internal_indent_m .id , store_internal_indent_t.id , max(store_internal_indent_t.qty_request) , sum(store_internal_indent_t.qty_issued) , store_internal_indent_t.sr_no, store_internal_indent_m .demand_date , store_internal_indent_m .requested_by,mas_store_item.BRAND_ID,mas_store_item.BRANDED_GENERIC   from store_internal_indent_t store_internal_indent_t inner join store_internal_indent_m store_internal_indent_m  on store_internal_indent_t.internal_id=store_internal_indent_m .id inner join mas_store_item mas_store_item  on store_internal_indent_t.item_id=mas_store_item .item_id inner join mas_store_item_conversion mas_store_item_conversion  on mas_store_item .item_conversion_id=mas_store_item_conversion .item_conversion_id inner join mas_store_unit mas_store_unit  on mas_store_item_conversion .purchase_unit_id=mas_store_unit .unit_id  where store_internal_indent_m .id='"+requestNo+"' and store_internal_indent_t.qty_request>nvl(store_internal_indent_t.qty_issued, '0') group by mas_store_item .item_id , mas_store_item .pvms_no , mas_store_item .nomenclature , mas_store_unit .unit_name , store_internal_indent_m .department_id , store_internal_indent_m .id , store_internal_indent_t.id , store_internal_indent_t.sr_no , store_internal_indent_m .demand_date , store_internal_indent_m .requested_by,mas_store_item.BRAND_ID,mas_store_item.BRANDED_GENERIC  order by mas_store_item .nomenclature";
			String query="select mas_store_item .item_id , mas_store_item .pvms_no , mas_store_item .nomenclature , mas_store_unit .unit_name , store_internal_indent_m .department_id , store_internal_indent_m .id , store_internal_indent_t.id , max(store_internal_indent_t.qty_request) as requested, sum(store_internal_indent_t.qty_issued) as issued, store_internal_indent_t.sr_no, store_internal_indent_m .demand_date , store_internal_indent_m .requested_by,mas_store_item.BRAND_ID,mas_store_item.BRANDED_GENERIC   from store_internal_indent_t store_internal_indent_t inner join store_internal_indent_m store_internal_indent_m  on store_internal_indent_t.internal_id=store_internal_indent_m .id inner join mas_store_item mas_store_item  on store_internal_indent_t.item_id=mas_store_item .item_id inner join mas_store_item_conversion mas_store_item_conversion  on mas_store_item .item_conversion_id=mas_store_item_conversion .item_conversion_id inner join mas_store_unit mas_store_unit  on mas_store_item_conversion .purchase_unit_id=mas_store_unit .unit_id  where store_internal_indent_m .id='"+requestNo+"' and store_internal_indent_t.qty_request>isnull(store_internal_indent_t.qty_issued, '0') and store_internal_indent_m.hospital_id = "
			+ hospitalId +" group by mas_store_item .item_id , mas_store_item .pvms_no , mas_store_item .nomenclature , mas_store_unit .unit_name , store_internal_indent_m .department_id , store_internal_indent_m .id , store_internal_indent_t.id , store_internal_indent_t.sr_no , store_internal_indent_m .demand_date , store_internal_indent_m .requested_by,mas_store_item.BRAND_ID,mas_store_item.BRANDED_GENERIC  order by mas_store_item .nomenclature";
			indentTList=(List)session.createSQLQuery(query).list();
			//indentTList = getHibernateTemplate().find(query);
			/*indentTList = getHibernateTemplate().find("select item_i.Id,item_i.PvmsNo,item_i.Nomenclature,pu_d.UnitName,siim_a.Department.Id,"+
		     "siim_a.Id,siit_b.Id,max(siit_b.QtyRequest),sum(siit_b.QtyIssued),siit_b.SrNo,siim_a.DemandDate,siim_a.RequestedBy.Id,ib.id" +
		     " from jkt.hms.masters.business.StoreInternalIndentT as siit_b join siit_b.Internal as siim_a " +
		     " join siit_b.Item as item_i join item_i.ItemConversion as ic_c join ic_c.PurchaseUnit as pu_d join item_i.Brand as ib where siim_a.Id="+ requestNo + "" +
		     " and siit_b.QtyRequest>nvl(siit_b.QtyIssued,'0') group by item_i.Id,item_i.PvmsNo,item_i.Nomenclature,pu_d.UnitName,siim_a.Department.Id,siim_a.Id,siit_b.Id,siit_b.SrNo,siim_a.DemandDate,siim_a.RequestedBy.Id,ib.id order by item_i.Nomenclature");
			 */
			int i=0;
			List<BigDecimal> stockAvailableList = new ArrayList<BigDecimal>();
			List stockList = new ArrayList();
			int requestByEmpId=0;
			String demandIndentDate="";
			int departmentId = 0;
			int deptIdBox=0;
			/***change by anand because their is issue department login department**/
			if(map.get("deptId") != null)
			{
				deptId=(Integer)map.get("deptId");
			}
			if(box.getInt("deptId") != 0)
			{
				deptIdBox=box.getInt("deptId");
			}
			// javed for batch by issue
			List BatchList = new ArrayList();
			Map mapbatch = new HashMap();
			for(int k=0; k<indentTList.size();k++){
				Object[] object=indentTList.get(k);
				// add hospital_id by javed khan
				Date date1 = new Date();
				// here issue date id today 
				/*String query123="select sibs.BATCH_NO from store_item_batch_stock sibs where sibs.ITEM_ID="+object[0]+" and sibs.EXPIRY_DATE> '"+issueDate+"' and sibs.CLOSING_STOCK>0 and sibs.DEPARTMENT_ID="+deptIdBox+" and sibs.HOSPITAL_ID = "+hospitalId+" group by sibs.BATCH_NO, sibs.EXPIRY_DATE order by sibs.EXPIRY_DATE asc";*/
				String query123 = "select sibs.stock_id,sibs.BATCH_NO from store_item_batch_stock sibs where sibs.ITEM_ID="+object[0]+" and (sibs.EXPIRY_DATE> '"+issueDate+"' or sibs.EXPIRY_DATE is null) and sibs.CLOSING_STOCK>0 and sibs.DEPARTMENT_ID="+deptIdBox+" and sibs.HOSPITAL_ID = "+hospitalId+" order by sibs.EXPIRY_DATE asc";
				BatchList=session.createSQLQuery(query123).list();
				mapbatch.put(object[0],BatchList);
			}
			for(Object[] obj : indentTList){
				BigDecimal stock = new BigDecimal(0);
				departmentId = Integer.parseInt(obj[4].toString());
				if(obj[11] !=null){
					requestByEmpId=Integer.parseInt(obj[11].toString());
				}
				demandIndentDate=HMSUtil.convertDateToStringTypeDateOnly((Date)obj[10]);
				// add hospital_id by javed khan
				String str3 = "select sum(a.closing_stock) " +"from store_item_batch_stock a,mas_store_item i  " +
				"where a.item_id=i.item_id and a.item_id = '"+ obj[0]+ "' and a.department_id='"+ deptIdBox+ "' and a.hospital_id='"
				 + hospitalId+ "' and (a.EXPIRY_DATE> '"+issueDate+"' or a.EXPIRY_DATE is null) and a.closing_stock>0 group by a.item_id,i.pvms_no order by i.pvms_no";
				stockAvailableList = session.createSQLQuery(str3).list();
				if (stockAvailableList.size() > 0 && stockAvailableList.get(0) != null) {
					stock = (BigDecimal) stockAvailableList.get(0);
				} else {
					stock = new BigDecimal("0");
				}
				i++;
				stockList.add(stock);
			}
			// employeeList = session.createCriteria(MasEmployee.class).list();
			// add hospital_id by javed khan
			/*employeeList = getHibernateTemplate().find("from jkt.hms.masters.business.MasEmployee as me where me.Status='y' and  me.Hospital.Id= "
					+ hospitalId +" order by FirstName asc");*/
			departmentList = session.createCriteria(MasDepartment.class).add(Restrictions.eq("Status", "y")).addOrder(Order.asc("DepartmentName")).list();
			// javed khan for search CIV
			List storeIssueMList = new ArrayList();
			String searchQry="select sim.ID,sim.ISSUE_NO from Store_issue_m sim where sim.Department_id='"+deptIdBox+"'"
				+ " and sim.ISSUE_TYPE='i' and sim.Hospital_id ='"+hospitalId+"'"+" order by sim.Id desc ";  // add hospital_id by javed khan
			storeIssueMList=(List) session.createSQLQuery(searchQry).list();
			storeIssueMList=(List) session.createSQLQuery(searchQry).list();
			// javed khan for loan out
			List<StoreLoanoutExpendT> loanoutTList = new ArrayList<StoreLoanoutExpendT>();
			loanoutTList=session.createCriteria(StoreLoanoutExpendT.class).
			createAlias("IssueM", "storeloanoutM").add(Restrictions.eq("storeloanoutM.Status","l"))
			.add(Restrictions.eq("storeloanoutM.Hospital.Id",hospitalId)).list(); // add hospital_id by javed khan
			map.put("loanoutTList", loanoutTList);
			map.put("storeIssueMList", storeIssueMList);
			map.put("mapbatch",mapbatch);
			map.put("employeeList",employeeList);
			map.put("departmentList", departmentList);
			map.put("stockList",stockList);
			map.put("indentTList", indentTList);
			map.put("requestByEmpId",requestByEmpId);
			map.put("requestNoForAcc", requestNo);
			map.put("demandIndentDate", demandIndentDate);
		} catch (DataAccessResourceFailureException e) {
			e.printStackTrace();
		}
		return map;
	}
	
	public Map<String, Object> getRCRequestDetails(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		int requestNo = box.getInt("requestHeaderId");
		int deptId=0;
		List<Object[]> indentTList = new ArrayList<Object[]>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		SimpleDateFormat formatterIn1 = new SimpleDateFormat("dd/MM/yyyy");
		SimpleDateFormat formatterOut1 = new SimpleDateFormat("yyyy-MM-dd");
		int hospitalId=0;
		if(box.get("hospitalId") != null)
		{
			hospitalId=Integer.parseInt(""+box.getInt("hospitalId"));
		}
		try {
			Session session = getSession();
			String date4MySQL=null;
			try {
				date4MySQL = formatterOut1.format(formatterIn1.parse(date));
			} catch (Exception e) {
				e.printStackTrace();
			}
			Date datestr = java.sql.Date.valueOf(date4MySQL);
			
			Date expiryDate = HMSUtil.getExpiryDateYYYYMMDD();	
			String issueDate = HMSUtil.convertDateToStringFormat(expiryDate, "yyyy-MM-dd");
			
			/*SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
			String issueDate=sdf.format(datestr); */
			/*String query="select masstoreit2_.item_id as col_0_0_, masstoreit2_.pvms_no as col_1_0_, masstoreit2_.nomenclature as col_2_0_,masstoreun4_.unit_name as col_3_0_, storeinter1_.department_id as col_4_0_, storeinter1_.id as col_5_0_, storeinter0_.id as col_6_0_, max(storeinter0_.qty_request) as col_7_0_, sum(storeinter0_.qty_issued) as col_8_0_, storeinter0_.sr_no as col_9_0_, storeinter1_.demand_date as col_10_0_, storeinter1_.requested_by as col_11_0_ ,msb.BRAND_ID from store_internal_indent_t storeinter0_ inner join store_internal_indent_m storeinter1_ on storeinter0_.internal_id=storeinter1_.id inner join mas_store_item masstoreit2_ on storeinter0_.item_id=masstoreit2_.item_id inner join mas_store_item_conversion masstoreit3_ on masstoreit2_.item_conversion_id=masstoreit3_.item_conversion_id inner join mas_store_unit masstoreun4_ on masstoreit3_.purchase_unit_id=masstoreun4_.unit_id inner join mas_store_brand msb on storeinter0_.ITEM_ID=msb.ITEM_ID where storeinter1_.id='"+requestNo+"' and storeinter0_.qty_request>nvl(storeinter0_.qty_issued, '0') group by masstoreit2_.item_id , masstoreit2_.pvms_no , masstoreit2_.nomenclature , masstoreun4_.unit_name , storeinter1_.department_id , storeinter1_.id , storeinter0_.id , storeinter0_.sr_no , storeinter1_.demand_date , storeinter1_.requested_by,msb.BRAND_ID order by masstoreit2_.nomenclature";*/
			// this qry comment by javed khan for adding hospital_id
			// String query="select mas_store_item .item_id , mas_store_item .pvms_no , mas_store_item .nomenclature , mas_store_unit .unit_name , store_internal_indent_m .department_id , store_internal_indent_m .id , store_internal_indent_t.id , max(store_internal_indent_t.qty_request) , sum(store_internal_indent_t.qty_issued) , store_internal_indent_t.sr_no, store_internal_indent_m .demand_date , store_internal_indent_m .requested_by,mas_store_item.BRAND_ID,mas_store_item.BRANDED_GENERIC   from store_internal_indent_t store_internal_indent_t inner join store_internal_indent_m store_internal_indent_m  on store_internal_indent_t.internal_id=store_internal_indent_m .id inner join mas_store_item mas_store_item  on store_internal_indent_t.item_id=mas_store_item .item_id inner join mas_store_item_conversion mas_store_item_conversion  on mas_store_item .item_conversion_id=mas_store_item_conversion .item_conversion_id inner join mas_store_unit mas_store_unit  on mas_store_item_conversion .purchase_unit_id=mas_store_unit .unit_id  where store_internal_indent_m .id='"+requestNo+"' and store_internal_indent_t.qty_request>nvl(store_internal_indent_t.qty_issued, '0') group by mas_store_item .item_id , mas_store_item .pvms_no , mas_store_item .nomenclature , mas_store_unit .unit_name , store_internal_indent_m .department_id , store_internal_indent_m .id , store_internal_indent_t.id , store_internal_indent_t.sr_no , store_internal_indent_m .demand_date , store_internal_indent_m .requested_by,mas_store_item.BRAND_ID,mas_store_item.BRANDED_GENERIC  order by mas_store_item .nomenclature";
			/*String query="select mas_store_item .item_id , mas_store_item .pvms_no , mas_store_item .nomenclature , mas_store_unit .unit_name , store_internal_indent_m .department_id , store_internal_indent_m .id , store_internal_indent_t.id , max(store_internal_indent_t.qty_request) , sum(store_internal_indent_t.qty_issued) , store_internal_indent_t.sr_no, store_internal_indent_m .demand_date , store_internal_indent_m .requested_by,mas_store_item.BRAND_ID,mas_store_item.BRANDED_GENERIC   from store_internal_indent_t store_internal_indent_t inner join store_internal_indent_m store_internal_indent_m  on store_internal_indent_t.internal_id=store_internal_indent_m .id inner join mas_store_item mas_store_item  on store_internal_indent_t.item_id=mas_store_item .item_id inner join mas_store_item_conversion mas_store_item_conversion  on mas_store_item .item_conversion_id=mas_store_item_conversion .item_conversion_id inner join mas_store_unit mas_store_unit  on mas_store_item_conversion .purchase_unit_id=mas_store_unit .unit_id  where store_internal_indent_m .id='"+requestNo+"' and store_internal_indent_t.qty_request>isnull(store_internal_indent_t.qty_issued, '0') and store_internal_indent_m.hospital_id = "
			+ hospitalId +" group by mas_store_item .item_id , mas_store_item .pvms_no , mas_store_item .nomenclature , mas_store_unit .unit_name , store_internal_indent_m .department_id , store_internal_indent_m .id , store_internal_indent_t.id , store_internal_indent_t.sr_no , store_internal_indent_m .demand_date , store_internal_indent_m .requested_by,mas_store_item.BRAND_ID,mas_store_item.BRANDED_GENERIC  order by mas_store_item .nomenclature";*/
			
			/*String query="select mas_store_item.item_id, mas_store_item.pvms_no, mas_store_item.nomenclature, mas_store_unit.unit_name, "
					+ "rh.department_id, rh.id, rd.id, max(rd.req_qty), sum(rd.qty_issued), "
					+ "rh.request_no, rh.request_date, rh.reqested_by, mas_store_item.BRAND_ID, "
					+ "mas_store_item.BRANDED_GENERIC from rc_request_details rd "
					+ "inner join rc_request_header rh on rd.header_id=rh.id "
					+ "inner join mas_store_item mas_store_item on rd.item_id=mas_store_item.item_id "
					+ "inner join mas_store_item_conversion mas_store_item_conversion on mas_store_item.item_conversion_id=mas_store_item_conversion.item_conversion_id "
					+ "inner join mas_store_unit mas_store_unit on mas_store_item_conversion.purchase_unit_id=mas_store_unit.unit_id  "
					+ "where rh.id='"+requestNo+"' "
					+ "and rd.req_qty>isnull(rd.qty_issued, '0') and rh.hospital_id = "+ hospitalId +" "
							+ "group by mas_store_item.item_id, mas_store_item.pvms_no, mas_store_item.nomenclature, mas_store_unit.unit_name, rh.department_id, rh.id ,rd.id, rh.request_no, rh.request_date, rh.reqested_by, mas_store_item.BRAND_ID, mas_store_item.BRANDED_GENERIC order by mas_store_item.nomenclature";*/
			indentTList = session.createCriteria(RcRequestDetails.class)
			.createAlias("Header", "rh")
			.createAlias("Item", "msi")
			.createAlias("msi.ItemConversion", "msic")
			.createAlias("msic.IntermediateUnit", "msu")
			.createAlias("rh.ReqestedBy", "u")
			.createAlias("u.Employee", "emp")
			.add(Restrictions.eq("rh.id", requestNo))
			.add(Restrictions.eq("rh.Hospital.Id", hospitalId))
			.setProjection(Projections.projectionList()
					.add(Projections.property("msi.Id"))
					.add(Projections.property("msi.PvmsNo"))
					.add(Projections.property("msi.Nomenclature"))					
					.add(Projections.property("msu.UnitName"))
					.add(Projections.property("rh.Department.Id"))
					.add(Projections.property("rh.Id"))
					.add(Projections.property("Id"))
					.add(Projections.max("ReqQty"))
					.add(Projections.max("QtyIssued"))
					.add(Projections.property("rh.RequestNo"))
					.add(Projections.property("rh.RequestDate"))
					.add(Projections.property("emp.Id"))
					.add(Projections.property("msi.Brand.Id"))
					.add(Projections.property("msi.BrandedGeneric"))	
					.add(Projections.property("emp.FirstName"))
					.add(Projections.property("emp.LastName"))
					.add(Projections.groupProperty("msi.Id"))
					.add(Projections.groupProperty("msi.PvmsNo"))					
					.add(Projections.groupProperty("msi.BrandedGeneric"))
					.add(Projections.groupProperty("msu.UnitName"))
					.add(Projections.groupProperty("rh.Department.Id"))
					.add(Projections.groupProperty("rh.Id"))
					.add(Projections.groupProperty("Id"))
					/*.add(Projections.max("rd.ReqQty"))*/
					.add(Projections.groupProperty("rh.RequestNo"))
					.add(Projections.groupProperty("rh.RequestDate"))
					.add(Projections.groupProperty("emp.Id"))
					.add(Projections.groupProperty("msi.Nomenclature"))
					.add(Projections.groupProperty("msi.Brand.Id"))
					.add(Projections.groupProperty("emp.FirstName"))
					.add(Projections.groupProperty("emp.LastName"))).list();	
			
			
			/*indentTList=(List)session.createSQLQuery(query).list();*/
			
			//indentTList = getHibernateTemplate().find(query);
			/*indentTList = getHibernateTemplate().find("select item_i.Id,item_i.PvmsNo,item_i.Nomenclature,pu_d.UnitName,siim_a.Department.Id,"+
		     "siim_a.Id,siit_b.Id,max(siit_b.QtyRequest),sum(siit_b.QtyIssued),siit_b.SrNo,siim_a.DemandDate,siim_a.RequestedBy.Id,ib.id" +
		     " from jkt.hms.masters.business.StoreInternalIndentT as siit_b join siit_b.Internal as siim_a " +
		     " join siit_b.Item as item_i join item_i.ItemConversion as ic_c join ic_c.PurchaseUnit as pu_d join item_i.Brand as ib where siim_a.Id="+ requestNo + "" +
		     " and siit_b.QtyRequest>nvl(siit_b.QtyIssued,'0') group by item_i.Id,item_i.PvmsNo,item_i.Nomenclature,pu_d.UnitName,siim_a.Department.Id,siim_a.Id,siit_b.Id,siit_b.SrNo,siim_a.DemandDate,siim_a.RequestedBy.Id,ib.id order by item_i.Nomenclature");
			 */
			int i=0;
			List<BigDecimal> stockAvailableList = new ArrayList<BigDecimal>();
			List stockList = new ArrayList();
			int requestByEmpId=0;
			String demandIndentDate="";
			int departmentId = 0;
			int deptIdBox=0;
			/***change by anand because their is issue department login department**/
			if(map.get("deptId") != null)
			{
				deptId=(Integer)map.get("deptId");
			}
			if(box.getInt("deptId") != 0)
			{
				deptIdBox=box.getInt("deptId");
			}
			// javed for batch by issue
			List BatchList = new ArrayList();
			Map mapbatch = new HashMap();
			for(int k=0; k<indentTList.size();k++){
				Object[] object=indentTList.get(k);
				// add hospital_id by javed khan
				Date date1 = new Date();
				// here issue date id today 
				String query123="select sibs.BATCH_NO from store_item_batch_stock sibs where sibs.ITEM_ID="+object[0]+" and sibs.EXPIRY_DATE> '"+issueDate+"' and sibs.CLOSING_STOCK>0 and sibs.DEPARTMENT_ID="+deptIdBox+" and sibs.HOSPITAL_ID = "+hospitalId+" group by sibs.BATCH_NO, sibs.EXPIRY_DATE order by sibs.EXPIRY_DATE asc";
				BatchList=session.createSQLQuery(query123).list();
				mapbatch.put(object[0],BatchList);
			}
			for(Object[] obj : indentTList){
				BigDecimal stock = new BigDecimal(0);
				departmentId = Integer.parseInt(obj[4].toString());
				if(obj[11] !=null){
					requestByEmpId=Integer.parseInt(obj[11].toString());
				}
				demandIndentDate=HMSUtil.convertDateToStringTypeDateOnly((Date)obj[10]);
				// add hospital_id by javed khan
				String str3 = "select sum(a.closing_stock) " +"from store_item_batch_stock a,mas_store_item i  " +
				"where a.item_id=i.item_id and a.item_id = '"+ obj[0]+ "' and a.department_id='"+ deptIdBox+ "' and a.hospital_id='"
				 + hospitalId+ "' and a.expiry_date > '"+ issueDate+ "' group by a.item_id,i.pvms_no order by i.pvms_no";
				stockAvailableList = session.createSQLQuery(str3).list();
				if (stockAvailableList.size() > 0 && stockAvailableList.get(0) != null) {
					stock = (BigDecimal) stockAvailableList.get(0);
				} else {
					stock = new BigDecimal("0");
				}
				i++;
				stockList.add(stock);
			}
			// employeeList = session.createCriteria(MasEmployee.class).list();
			// add hospital_id by javed khan
			employeeList = getHibernateTemplate().find("from jkt.hms.masters.business.MasEmployee as me where me.Status='y' and  me.Hospital.Id= "
					+ hospitalId +" order by FirstName asc");
			departmentList = session.createCriteria(MasDepartment.class).add(Restrictions.eq("Status", "y")).addOrder(Order.asc("DepartmentName")).list();
			// javed khan for search CIV
			List storeIssueMList = new ArrayList();
			String searchQry="select sim.ID,sim.ISSUE_NO from Store_issue_m sim where sim.Department_id='"+deptIdBox+"'"
				+ " and sim.ISSUE_TYPE='i' and sim.Hospital_id ='"+hospitalId+"'"+" order by sim.Id desc ";  // add hospital_id by javed khan
			storeIssueMList=(List) session.createSQLQuery(searchQry).list();
			storeIssueMList=(List) session.createSQLQuery(searchQry).list();
			// javed khan for loan out
			List<StoreLoanoutExpendT> loanoutTList = new ArrayList<StoreLoanoutExpendT>();
			loanoutTList=session.createCriteria(StoreLoanoutExpendT.class).
			createAlias("IssueM", "storeloanoutM").add(Restrictions.eq("storeloanoutM.Status","l"))
			.add(Restrictions.eq("storeloanoutM.Hospital.Id",hospitalId)).list(); // add hospital_id by javed khan
			map.put("loanoutTList", loanoutTList);
			map.put("storeIssueMList", storeIssueMList);
			map.put("mapbatch",mapbatch);
			map.put("employeeList",employeeList);
			map.put("departmentList", departmentList);
			map.put("stockList",stockList);
			map.put("indentTList", indentTList);
			map.put("requestByEmpId",requestByEmpId);
			map.put("requestNoForAcc", requestNo);
			map.put("demandIndentDate", demandIndentDate);
		} catch (DataAccessResourceFailureException e) {
			e.printStackTrace();
		}
		return map;
	}


	public String getMaxNoByDeptCode(Map<String, Object> dataMap) {
		String maxNo = "";
		/*String y1 = "";
			String y2 = "";
			String y3 = "";
			int tempMonth = 0;*/
		int seqNo=0;
		String financialYear="";
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		financialYear=HMSUtil.getFinancialYearYY_YY(currentDate);
		String no="";
		if(dataMap.get("no")!=null){
			no=(String)dataMap.get("no");
		}
		String deptType="";
		if(dataMap.get("deptType")!=null){
			deptType=(String)dataMap.get("deptType");
		}
		try {
			if (!no.equals("") && !no.equals("0")) {
				StringTokenizer stringTokenizer = new StringTokenizer(no, "/");
				seqNo = Integer.parseInt(stringTokenizer.nextToken());
				//	String arr[] = no.split("/");
				++seqNo;
				maxNo = seqNo+"/"+ financialYear;
			} else {
				maxNo =  "01"+ "/" + financialYear;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return maxNo;
	}
	// New Grid For Physical Stock

	public Map<String, Object> showPhysicalStock(Map<String,Object>dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<StoreStockTakingT> searchStoreStockTakingTList = new ArrayList<StoreStockTakingT>();
		List<StoreStockTakingM> searchStoreStockTakingMList = new ArrayList<StoreStockTakingM>();
		List<StoreStockTakingM> stockTakingMOfPhysicalDateList = new ArrayList<StoreStockTakingM>();

		session = (Session) getSession();
		String physicalDate = "";
		java.sql.Date stockDate = null;
		int hospitalId=0;
		int deptId=0;

		hospitalId=(Integer)dataMap.get("hospitalId");
		deptId=(Integer)dataMap.get("deptId");

		physicalDate = (String) utilMap.get("currentDate");

		try {
			SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
			String date4MySQL1 = formatterOut.format(formatterIn.parse(physicalDate));
			stockDate = java.sql.Date.valueOf(date4MySQL1);
		} catch (Exception e) {
			e.printStackTrace();
		}

		try {
			departmentList = session.createCriteria(MasDepartment.class)
			.add(Restrictions.eq("Status", "y")).addOrder(Order.asc("DepartmentName")).list();

			searchStoreStockTakingMList = session.createCriteria(StoreStockTakingM.class)
			.add(Restrictions.eq("Hospital.Id", hospitalId))
			.add(Restrictions.eq("Department.Id", deptId))
			.addOrder(Order.desc("PhysicalDate")).list();
			stockTakingMOfPhysicalDateList = session.createCriteria(StoreStockTakingM.class)
			.add(Restrictions.eq("Hospital.Id", hospitalId))
			.add(Restrictions.eq("Department.Id", deptId)).add(Restrictions.eq("PhysicalDate", stockDate))
			.addOrder(Order.desc("PhysicalDate")).list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		Box box = new Box("");
		box.put("deptId", deptId);
		map = getGridDataForPhysicalStock(box);

		map.put("departmentList", departmentList);
		//map.put("searchStoreStockTakingTList", searchStoreStockTakingTList);
		map.put("searchStoreStockTakingMList", searchStoreStockTakingMList);
		map.put("stockTakingMOfPhysicalDateList",stockTakingMOfPhysicalDateList);

		return map;

	}
	// Display Grids Only

	public Map<String, Object> getGridDataForPhysicalStock(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> utilMap = (Map<String, Object>) HMSUtil
		.getCurrentDateAndTime();
		session = (Session) getSession();

		String pvms = null;
		String nomenclature = null;
		String au = null;
		Integer qtymmf = null;
		String remark = null;
		String brand = null;
		String batchNo = null;
		Date expiryDate = null;

		BigDecimal computedStock = null;
		BigDecimal stockInStore = null;
		BigDecimal stockDefective = null;
		BigDecimal surplus = null;
		BigDecimal deficient = null;

		int id = 0;
		int deptId = 0;
		int hospitalId=0;
		String physicalDate = "";

		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;

		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<StoreStockTakingM> stockTakingMList = new ArrayList<StoreStockTakingM>();
		List<StoreStockTakingT> stockTakingTList = new ArrayList<StoreStockTakingT>();
		List<StoreStockTakingT> stockTakingTList1 = new ArrayList<StoreStockTakingT>();
		List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
		List<StoreStockTakingM> searchStoreStockTakingMList = new ArrayList<StoreStockTakingM>();

		if (box.getInt(DEPARTMENT_ID) != 0) {
			deptId = box.getInt(DEPARTMENT_ID);
			physicalDate = box.get(PHYSICAL_STOCK_DATE);
		} else {
			deptId = box.getInt("deptId");
		}

		hospitalId= box.getInt("hospitalId");

		if (physicalDate == "") {
			physicalDate = (String) utilMap.get("currentDate");
		}
		int itemId=box.getInt("itemId");


		try {
			SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
			String date4MySQL1 = formatterOut.format(formatterIn
					.parse(physicalDate));
			java.sql.Date stockDate = java.sql.Date.valueOf(date4MySQL1);

			departmentList = session.createCriteria(MasDepartment.class)
			.add(Restrictions.eq("Status", "y"))
			//.add(Restrictions.eq("Hospital.Id", hospitalId))
			.list();

			stockTakingMList = session.createCriteria(StoreStockTakingM.class)
			.add(Restrictions.eq("Department.Id", deptId))
			.add(Restrictions.eq("Hospital.Id", hospitalId))
			.add(Restrictions.eq("PhysicalDate", stockDate)).list();

			/*
			 * Commented By ujjwal for Sql Injection
			 */
			/*searchStoreStockTakingMList = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreStockTakingM as i where i.Department.Id = "
								+ deptId + " and i.Hospital.Id='"+hospitalId+"' order by i.PhysicalDate desc");
			 */
			searchStoreStockTakingMList=session.createCriteria(StoreStockTakingM.class)
			.add(Restrictions.eq("Department.Id", deptId))
			.add(Restrictions.eq("Hospital.Id", hospitalId))
			.addOrder(Order.desc("PhysicalDate")).list();
			map.put("searchStoreStockTakingMList", searchStoreStockTakingMList);
			map.put("departmentList", departmentList);
			map.put("stockTakingMList", stockTakingMList);

			int pageno = 1;
			int numOfRows = 25;
			try {
				if (box.get("pageno") != null) {
					pageno = Integer.parseInt(box.getString("pageno"));
				}
			} catch (Exception e) {
				// e.printStackTrace();
				pageno = 1;
			}

			try {
				if (box.get("numOfRows") != null) {
					numOfRows = Integer.parseInt(box.getString("numOfRows"));
				}
			} catch (Exception e) {
				numOfRows = 5;
			}

			map.put("pageno", pageno);

			int first = (pageno - 1) * numOfRows;
			int totalRecords = 0;
			if (stockTakingMList != null && stockTakingMList.size() > 0) {
				StoreStockTakingM mObj = (StoreStockTakingM) stockTakingMList
				.get(0);
				int stockTakingMId = mObj.getId();

				String qry="";
				Criteria c1=null;
				if(itemId !=0)
				{
					/*
					 * commented By Ujjwal
					 */
					/*
						qry = "SELECT count(*) FROM store_stock_taking_t where stock_taking_m_id = "
							+ stockTakingMId+"item_id="+itemId;
					 */						
					c1=session.createCriteria(StoreStockTakingT.class)
					.createAlias("StockTakingM", "m")
					.add(Restrictions.eq("m.Id", stockTakingMId))
					.add(Restrictions.eq("Item.Id", itemId));
					/*Integer totalRecords = (Integer) c1.uniqueResult();
					    itemCount = count.intValue();*/
					/* criteria.setProjection(null);
					    criteria.setResultTransformer(Criteria.ROOT_ENTITY);*/
				}else
				{
					/*
					 * commented By Ujjwal
					 */
					/*	 qry = "SELECT count(*) FROM store_stock_taking_t where stock_taking_m_id = "
							+ stockTakingMId;
					 */						 
					c1=session.createCriteria(StoreStockTakingT.class)
					 .createAlias("StockTakingM", "m")
					 .add(Restrictions.eq("m.Id", stockTakingMId));
					// .add(Restrictions.eq("Item.Id", itemId));
				}
				c1.setProjection(Projections.rowCount());
				Integer count = (Integer) c1.uniqueResult();
				totalRecords = count.intValue();

				/*try {
					totalRecords = Integer.parseInt(session.createSQLQuery(qry)
							.list().get(0).toString());
				} catch (Exception e) {
					totalRecords = 0;
				}*/
				map.put("totalRecords", totalRecords);

				double totalPages = 0.0;
				totalPages = (double) totalRecords / (double) numOfRows;
				Double d = new Double(Math.ceil(totalPages));
				map.put("totalPages", d.intValue());

				//Criteria c = session.createCriteria(StoreStockTakingT.class).add(Restrictions.or((Restrictions.gt("ComputedStock", (new BigDecimal(0)))),Restrictions.eq("Remarks", "items added during stock verification")))
				Criteria c = session.createCriteria(StoreStockTakingT.class)
				.createAlias("StockTakingM", "stm")
				.add(Restrictions.eq("stm.Id", stockTakingMId))
				.add(Restrictions.eq("stm.Department.Id", deptId))
				.createAlias("Item", "Item");



				if(itemId != 0)
				{
					c = c.add(Restrictions.eq("Item.Id", itemId));
				}




				if (box.getString("pvmsNo") != null && !box.getString("pvmsNo").equals("")) {
					c = c.add(Restrictions.eq("Item.PvmsNo", box.getString("pvmsNo")));
				}
				c = c.addOrder(Order.asc("Item.PvmsNo"));
				if(itemId ==0)
				{
					c.setFirstResult(first);

					if (totalRecords < numOfRows) {
						c.setMaxResults(totalRecords);
					} else {
						c.setMaxResults(numOfRows);
					}

				}
				c.addOrder(Order.asc("Item.Nomenclature"));
				stockTakingTList = c.list();
			}
			map.put("stockTakingTList", stockTakingTList);
			if (stockTakingTList != null && stockTakingTList.size() > 0) {

				for (Iterator iterator = stockTakingTList.iterator(); iterator
				.hasNext();) {
					StoreStockTakingT tObj = (StoreStockTakingT) iterator
					.next();

					try {
						id = tObj.getId();
					} catch (Exception e) {
						id = 0;
					}

					try {
						pvms = tObj.getItem().getPvmsNo();
					} catch (Exception e) {
						pvms = "";
					}

					try {
						nomenclature = tObj.getItem().getNomenclature();
					} catch (Exception e) {
						nomenclature = "";
					}

					try {
						brand = tObj.getBrand().getBrandName();
					} catch (Exception e) {
						brand = "";
					}

					try {
						au = tObj.getItem().getItemConversion()
						.getPurchaseUnit().getUnitName();
					} catch (Exception e) {
						au = "";
					}

					try {
						batchNo = tObj.getBatchNo();
					} catch (Exception e) {
						au = "";
					}

					try {
						expiryDate = tObj.getExpiryDate();
					} catch (Exception e) {
						au = null;
					}

					try {
						computedStock = tObj.getComputedStock();
					} catch (Exception e) {
						computedStock = new BigDecimal(0);
					}

					try {
						stockInStore = tObj.getStoreStockService();
					} catch (Exception e) {
						stockInStore = new BigDecimal(0);
					}

					try {
						stockDefective = tObj.getStoreStockDefective();
					} catch (Exception e) {
						stockDefective = new BigDecimal(0);
					}

					try {
						surplus = tObj.getStockSurplus();
					} catch (Exception e) {
						surplus = new BigDecimal(0);
					}

					try {
						deficient = tObj.getStockDeficient();
					} catch (Exception e) {
						deficient = new BigDecimal(0);
					}

					try {
						remark = tObj.getRemarks();
					} catch (Exception e) {
						remark = "";
					}

					hData = new HashMap<String, Object>();
					hData.put("id", id);
					hData.put("pvms", pvms);
					hData.put("nomenclature", nomenclature);

					hData.put("brand", brand);
					hData.put("au", au);

					hData.put("batchNo", batchNo);
					hData.put("expiryDate", expiryDate);
					hData.put("computedStock", computedStock);
					hData.put("stockInStore", stockInStore);

					hData.put("stockDefective", stockDefective);
					hData.put("surplus", surplus);
					hData.put("deficient", deficient);

					hData.put("remark", remark);

					vResult.add(hData);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}

		try {
			if (!box.contains("numOfRows")) {
				box.put("numOfRows", 5);
			}
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("pagedArray", pagedArray);
		return map;
	}


	@Override
	public Map<String, Object> getItemListForIndent(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Object> itemList = new ArrayList<Object>();
		List<Object> itemList1 = new ArrayList<Object>(); 
		List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();
		session = (Session) getSession();
		String pvmsNo = null;
		int deptId = 0;
		deptId = box.getInt("deptId");
		int toWard=0;
		toWard=box.getInt("toWard");
		int hospitalId=0;
		hospitalId = box.getInt("hospitalId");
		List<Integer> objectList = new ArrayList<Integer>();
		int internalIndentId = 0;
		int storeDepartmentId = 0;
		/*if (box.get("storeDepartmentId") != null
					&& !box.get("storeDepartmentId").equals("")) {
				storeDepartmentId = box.getInt("storeDepartmentId");
			}*/
		if (box.get("internalIndentId") != null && !box.get("internalIndentId").equals("")) {
			internalIndentId = box.getInt("internalIndentId");
		}
		try {
			String str = "%"+box.get("autoHint")+"%";
			String sql="";
			String query = "";
			String query1 = "";   
			if(toWard>0){
				toWard=toWard;
			}else{
				toWard=deptId;
			}
			Criteria c= session.createCriteria(MasStoreItem.class).add(
					Restrictions.eq("Status", "y"))
					//.add(Restrictions.eq("Hospital.Id", hospitalId))
					//.add(Restrictions.eq("ItemType.Id", 2))
					.add(Restrictions.like("Nomenclature",str).ignoreCase())
					.setProjection(Projections.projectionList().add(Projections.property("Id"))
							.add(Projections.property("PvmsNo")).add(Projections.property("Nomenclature"))
							.add( Projections.groupProperty("Id")).add( Projections.groupProperty("PvmsNo"))
							.add( Projections.groupProperty("Nomenclature")));
			/*Criteria c1= session.createCriteria(MasStoreItem.class).add(
					Restrictions.eq("Status", "y"))
					//.add(Restrictions.eq("ItemType.Id", 1))
					.add(Restrictions.like("Nomenclature",str).ignoreCase())
					.setProjection(Projections.projectionList().add(Projections.property("Id"))
							.add(Projections.property("PvmsNo")).add(Projections.property("Nomenclature"))
							.add( Projections.groupProperty("Id")).add( Projections.groupProperty("PvmsNo"))
							.add( Projections.groupProperty("Nomenclature")));*/
			itemList = c.list();
			//itemList1 = c1.list();
			itemList.addAll(itemList1);
		}catch (Exception e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		map.put("objectList", objectList);
		return map;
	}

	@Override
	public Map<String, Object> getOtherItemsForIndent(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<StoreItemBatchStock> itemBatchStockList = new ArrayList<StoreItemBatchStock>();
		int hospitalId =0; 
		try {
			hospitalId = Integer.parseInt(""+box.get("hospitalId"));
			String str = "";
			str = box.get("requiredField");
			str = str.trim();
			Criteria c = session.createCriteria(MasStoreItem.class);
		/*	List nivList=c.setProjection(Projections.projectionList().add(Projections.property("ItemType.Id"))).add(
					Restrictions.eq("PvmsNo", str.toUpperCase())).list();
			// add  by javed khan for SQL Injuction on 15-08-2012
			System.out.println("nivList.get(0)="+nivList.get(0));
			if((Integer.parseInt((""+nivList.get(0)))) == 2){*/
				itemList = session.createCriteria(MasStoreItem.class)
				.add(Restrictions.eq("PvmsNo", str).ignoreCase())
				.add(Restrictions.eq("Status", "y")).list();
			/*}else{
				itemList = session.createCriteria(MasStoreItem.class)
				.add(Restrictions.eq("PvmsNo", str).ignoreCase()).add(Restrictions.eq("Hospital.Id", 1))
				.add(Restrictions.eq("Status", "y")).list();
			}*/
			map.put("itemList", itemList);
			if(itemList.size()>0){
				Calendar expiryDate = Calendar.getInstance();
				expiryDate.add(Calendar.DAY_OF_MONTH, Integer.parseInt(HMSUtil.getProperties("adt.properties", "AddDaysInExpiryDate")));
				List<Object> objectList =session.createCriteria(StoreItemBatchStock.class)
				.add(Restrictions.gt("ExpiryDate", expiryDate.getTime()))
				.add(Restrictions.eq("Department.Id",box.getInt(FROM_WARD))).add(Restrictions.eq("Hospital.Id", hospitalId))
				.add(Restrictions.eq("Item.Id", itemList.get(0).getId())).setProjection(Projections.projectionList()
						.add( Projections.sum("ClosingStock")).add( Projections.groupProperty("Item.Id"))).list();
				// add  by javed khan for SQL Injuction on 15-08-2012
				if (objectList != null && objectList.size() > 0) {
					//for (Object obj : objectList) {
					Iterator i = objectList.iterator();
					while(i.hasNext()){
						Object []  object = (Object[] )i.next(); 
						map.put("stock", new BigDecimal(""+object[0]));}
					//}
				} else {
					map.put("stock", new BigDecimal(0));
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@Override
	public Map<String, Object> showAddDepartmentIndentJsp(Box box) {
        Session session = (Session) getSession();
        Map<String, Object> map = new HashMap<String, Object>();
        session = (Session) getSession();

        String pvms = null;
        String nomenclature = null;
        String au = null;
        Integer qtymmf = null;
        Integer qtyRequest = null;
        Integer stock = null;

        int id = 0;

        PagedArray pagedArray = null;
        HashMap<String, Object> hData = null;
        Vector<HashMap> vResult = new Vector<HashMap>();
        HashMap[] testPageData = null;

        List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();
        List<StoreInternalIndentT> storeInternalIndentTList1 = new ArrayList<StoreInternalIndentT>();
        List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
        List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
        List<MasEmployee> requestByEmployeeList = new ArrayList<MasEmployee>();
        List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
        List<StoreInternalIndentM> searchStoreInternalIndentMList = new ArrayList<StoreInternalIndentM>();

        org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
        hbt.setFlushModeName("FLUSH_EAGER");
        hbt.setCheckWriteOperations(false);
        StoreInternalIndentT storeInternalIndentT1 = new StoreInternalIndentT();
        int sno = 0;
        String demandNo = box.get(DEMAND_NO);
        int hospitalId=Integer.parseInt(""+box.get("hospitalId"));
        List storeItemBatchStockList = new ArrayList();
        try {
            int pageNo = box.getInt("pageNo");

            storeInternalIndentMList = hbt
            .find("from jkt.hms.masters.business.StoreInternalIndentM as inp where inp.DemandNo = '"
                    + demandNo
                    + "' and inp.Department.Id='"
                    + box.get(FROM_WARD)
                    + "' and inp.Status='u' and inp.Hospital.Id = "
                    +hospitalId);    // add by javed khan

            map.put("storeInternalIndentMList", storeInternalIndentMList);
            
            System.out.println("storeInternalIndentMList="+storeInternalIndentMList.size());

            Criteria c = session
            .createCriteria(StoreInternalIndentT.class)
            .createAlias("Internal", "m")
            .add(Restrictions.eq("m.DemandNo", demandNo))
            .add(Restrictions.eq("m.Department.Id",
                    box.getInt(FROM_WARD)))
                    .add(Restrictions.eq("m.Hospital.Id",
                            hospitalId));   // add by javed khan

            int firstResult = 0;
            int maxResults = 14;

            if (pageNo != 1) {
                firstResult = firstResult + (pageNo - 1) * 14;
            }
            c.setFirstResult(firstResult);
            c.setMaxResults(maxResults);
            storeInternalIndentTList = c.list();
            
            System.out.println("storeInternalIndentTList="+storeInternalIndentTList.size());


            Criteria c1 = session
            .createCriteria(StoreInternalIndentT.class)
            .createAlias("Internal", "m")
            .add(Restrictions.eq("m.DemandNo", demandNo))
            .add(Restrictions.eq("m.Department.Id",
                    box.getInt(FROM_WARD)))
                    .add(Restrictions.eq("m.Hospital.Id",
                            hospitalId));  // add by javed khan
            int sizeOfStoreInternalIndentT = 0;
            if (c1.list() != null && c1.list().size() > 0) {
                sizeOfStoreInternalIndentT = c1.list().size();
                for (StoreInternalIndentT storeInternalIndentT : storeInternalIndentTList) {
                    String qry = "select sum(closing_stock) from store_item_batch_stock i where i.item_id="
                        + storeInternalIndentT.getItem().getId() + " and i.hospital_id="+hospitalId+" ";
                    List<Object> objectList = session.createSQLQuery(qry)
                    .list();
                    storeItemBatchStockList.add((BigDecimal) objectList.get(0));
                }
            }
            map.put("storeItemBatchStockList", storeItemBatchStockList);
            map.put("sizeOfStoreInternalIndentT", sizeOfStoreInternalIndentT);


            map.put("storeInternalIndentTList", storeInternalIndentTList);
            map.put("pageNo", pageNo);
            map.put("newDemandNo", demandNo);

            if (storeInternalIndentTList != null
                    && storeInternalIndentTList.size() > 0) {
                int internalIndentId = storeInternalIndentTList.get(0)
                .getInternal().getId();
                map.put("internalIndentId", internalIndentId);

            }
            map.put("demandNo", box.get(DEMAND_NO));

        } catch (Exception e) {
            e.printStackTrace();
        }
        return map;}
	public Map<String, Object> getDataForBarcode(Box box)
	{
		session = getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		String source="";
		BigDecimal mmf = null;
		List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
		Calendar calendar=Calendar.getInstance();
		int year=calendar.get(calendar.YEAR);
		Calendar expiryDate = Calendar.getInstance();
		expiryDate.add(Calendar.DAY_OF_MONTH, Integer.parseInt(HMSUtil.getProperties("adt.properties", "prescriptionExpiry")));
		Date date = HMSUtil.getExpiryDateYYYYMMDD();
		
		
		try {
			storeItemBatchStockList = session
			.createCriteria(StoreItemBatchStock.class)
			.add(Restrictions.eq("Item.Id", box.getInt("itemId")))
			.add(Restrictions.eq("BarcodeNo", box.get("barCodeNo")))
			.add(Restrictions.eq("Department.Id", box.getInt("deptId")))
			.add(Restrictions.ge("ExpiryDate", date))
			.add(Restrictions.eq("Hospital.Id", box.getInt("hospitalId")))
			.list();

			if(storeItemBatchStockList.size()==0){
				storeItemBatchStockList = session
				.createCriteria(StoreItemBatchStock.class)
				.add(Restrictions.eq("Item.Id", box.getInt("itemId")))
				.add(Restrictions.eq("BatchNo", box.get("barCodeNo")))
				.add(Restrictions.eq("Department.Id", box.getInt("deptId")))
				.add(Restrictions.ge("ExpiryDate", date))
				.add(Restrictions.eq("Hospital.Id", box.getInt("hospitalId")))
				.list();
			}
			String qry="Select sgm.RECEIVE_TYPE from store_grn_m sgm left outer join store_grn_t sgt on sgm.GRN_MASTER_ID=sgt.GRN_MASTER_ID where sgt.ITEM_ID='"
				+box.getInt("itemId")+"'"
				+"and sgt.BATCH_NO='"
				+box.get("barCodeNo")+"'"					
				+" and sgm.HOSPITAL_ID='"
				+box.get("hospitalId")+"'";
				//+" and rownum<2";
			source=(String)session.createSQLQuery(qry).uniqueResult();

			String mmfQry="select smdt.MMF_IN_QTY from  store_mmf_department_t smdt "
				+" left outer join mas_store_item msi on smdt.ITEM_ID=msi.ITEM_ID"
				+" left outer join store_mmf_department_m smdm on smdt.STORE_MMF_DEPARTMENT_M_ID=smdm.ID"
				+" where smdt.ITEM_ID='"
				+ box.getInt("itemId")+"'"
				+" and  smdm.MMF_FOR_THE_YEAR='"
				+ year+"'"
				+" and smdm.STORE_WARD_DEPT='"
				+ box.getInt("deptId")+"'"
				+" and smdm.hospital_id='"
				+box.getInt("hospitalId")+"'";

			mmf=(BigDecimal)session.createSQLQuery(mmfQry).uniqueResult();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("storeItemBatchStockList", storeItemBatchStockList);
		map.put("source", source);
		map.put("mmf", mmf);
		return map;
	}
	
	public Map<String, Object> getDataForBarcodeDispensary(Box box)
	{
		session = getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		String source="";
		BigDecimal mmf = null;
		List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
		Calendar calendar=Calendar.getInstance();
		int year=calendar.get(calendar.YEAR);
		Calendar expiryDate = Calendar.getInstance();
		expiryDate.add(Calendar.DAY_OF_MONTH, Integer.parseInt(HMSUtil.getProperties("adt.properties", "prescriptionExpiry")));
		Date date = HMSUtil.getExpiryDateYYYYMMDD();
		int stockId = 0;
		
		if(box.get("barCodeNo")!=null && !box.getString("barCodeNo").trim().equals(""))
		{
			stockId = box.getInt("barCodeNo");
		}
		
		
		try {
			storeItemBatchStockList = session
			.createCriteria(StoreItemBatchStock.class)
			.add(Restrictions.eq("Item.Id", box.getInt("itemId")))
			.add(Restrictions.eq("Id", stockId))
			.add(Restrictions.eq("Department.Id", box.getInt("deptId")))
			.add(Restrictions.ge("ExpiryDate", date))
			.add(Restrictions.eq("Hospital.Id", box.getInt("hospitalId")))
			.list();

			/*if(storeItemBatchStockList.size()==0){
				storeItemBatchStockList = session
				.createCriteria(StoreItemBatchStock.class)
				.add(Restrictions.eq("Item.Id", box.getInt("itemId")))
				.add(Restrictions.eq("Id", stockId))
				.add(Restrictions.eq("Department.Id", box.getInt("deptId")))
				.add(Restrictions.ge("ExpiryDate", date))
				.add(Restrictions.eq("Hospital.Id", box.getInt("hospitalId")))
				.list();
			}*/
		/*	String qry="Select sgm.RECEIVE_TYPE from store_grn_m sgm left outer join store_grn_t sgt on sgm.GRN_MASTER_ID=sgt.GRN_MASTER_ID where sgt.ITEM_ID='"
				+box.getInt("itemId")+"'"
				+"and sgt.stock_id='"
				+stockId+"'"					
				+" and sgm.HOSPITAL_ID='"
				+box.get("hospitalId")+"'";
				//+" and rownum<2";
			source=(String)session.createSQLQuery(qry).uniqueResult();

			String mmfQry="select smdt.MMF_IN_QTY from  store_mmf_department_t smdt "
				+" left outer join mas_store_item msi on smdt.ITEM_ID=msi.ITEM_ID"
				+" left outer join store_mmf_department_m smdm on smdt.STORE_MMF_DEPARTMENT_M_ID=smdm.ID"
				+" where smdt.ITEM_ID='"
				+ box.getInt("itemId")+"'"
				+" and  smdm.MMF_FOR_THE_YEAR='"
				+ year+"'"
				+" and smdm.STORE_WARD_DEPT='"
				+ box.getInt("deptId")+"'"
				+" and smdm.hospital_id='"
				+box.getInt("hospitalId")+"'";

			mmf=(BigDecimal)session.createSQLQuery(mmfQry).uniqueResult();*/
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("storeItemBatchStockList", storeItemBatchStockList);
	/*	map.put("source", source);
		map.put("mmf", mmf);*/
		return map;
	}
	public Map<String, Object> getDataForIssueBarcode(Box box)
	{
		session = getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
		try {
			storeItemBatchStockList = session
			.createCriteria(StoreItemBatchStock.class)
			.add(Restrictions.eq("BarcodeNo", box.get("barcodeNo")))
			.add(Restrictions.eq("Item.Id", box.get(ITEM_ID)))
			.add(Restrictions.eq("Department.Id", box.getInt("deptId")))
			.list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("storeItemBatchStockList", storeItemBatchStockList);
		return map;
	}
	public List<StoreOpPatientIssueM> printPatientIssue(int deptId,int hospitalId)
	{
		Session session = (Session) getSession();
		List<StoreOpPatientIssueM> storeOpPatientIssueM = session
		.createCriteria(StoreOpPatientIssueM.class)
		.add(Restrictions.eq("Department.Id", deptId))
		.add(Restrictions.eq("Hospital.Id",hospitalId))
		.addOrder(Order.desc("Id")).list();
		return storeOpPatientIssueM;
	}
	
	
	public synchronized Map<String, Object> submitOPDPatientStockDetailsFAC(Map map) {
		Map<String, Object> mapData = new HashMap<String, Object>();
		Session session = (Session) getSession();
		boolean succesfullyAdded = false;
		List<String> batchNumberList = (List) map.get("batchNumberList");
//		List<Character> nisSatusList = (List<Character>) map.get("batchNumberList");
		List brandNameList = (List) map.get("brandNameList");
		List expiryDateList = (List) map.get("expiryDateList");
		List issQtyList = (List) map.get("issQtyList");
		List costPriceList = (List) map.get("costPriceList");
		//List amountList = (List) map.get("amountList");
		List itemIdList = (List) map.get("itemIdList");
		List<PatientPrescriptionDetails> patientPrescriptionDetailsList=new ArrayList<PatientPrescriptionDetails>();
		//List storeItemBatchStockIdList = (List) map.get("storeItemBatchStockIdList");
		String date = (String) map.get("date");
		int deptId = (Integer) map.get("deptId");
		int hospitalId = (Integer) map.get("hospitalId");
		String time = (String) map.get("time");
		int userId = (Integer) map.get("userId");
		Users user  = new Users();
		user.setId(userId);
		String userName = (String) map.get("userName");
		int storeFyDocumentNoId = (Integer) map.get("storeFyDocumentNoId");
		String opdIssueno = (String) map.get("opdIssueno");
		int hinId = (Integer) map.get("hinId");
		String specialty=(String)map.get("specialty");
		List<Integer> frequencyList = (List) map.get("frequencyList");
		List<String> ctList = (List) map.get("ctList");
		List<String> dosageList = (List) map.get("dosageList");
		List<Integer> totalList = (List) map.get("totalList");
		List<Integer> noOfDaysList = (List) map.get("noOfDaysList");
		List<String> remarksList = (List) map.get("remarksList");
		List<String> routeList = (List) map.get("routeList");
		int empId = (Integer) map.get("empId");
		String prescription = (String) map.get("prescription");
		String serviceNo = (String) map.get("serviceNo");
		int patientPrescriptionId = 0;
		String nisStatus = "n";
		String facStatus = "n";
		Integer visitId = 0;
		String nipNo = "";
		String nisNo = "";
		String pNo = "";
		boolean nipFlag=false;
		boolean nisFlag=false;
		boolean nipNISFlag = true;
		
		if(map.get("patientPrescriptionId") != null){
			patientPrescriptionId = (Integer)(map.get("patientPrescriptionId"));
		}
		Date dateToInsert=null;
		if((map.get("date")!=null)&&(!map.get("date").equals("")))
			dateToInsert = HMSUtil.convertStringTypeDateToDateType(date);
		List<Integer> prescriptionDtIdList  = new ArrayList<Integer>();
		if(map.get("prescriptionDtIdList")!=null){
			prescriptionDtIdList = (List<Integer>)map.get("prescriptionDtIdList");
		}
		Transaction tx = null;
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {
			tx = session.beginTransaction();
			
			
		
			
			Map<String, Object> inMap = new HashMap<String, Object>();						
			inMap.put("tableObjectName", "PatientPrescriptionHeader");			
			inMap.put("isHospitalWise", "y");
			inMap.put("hospitalId", hospitalId);
			inMap.put("isYearly", "n");			
			inMap.put("isMonthly", "n");
			inMap.put("isPrefix", "y");
			inMap.put("transactionPrefixProperty", "transactionPrefixFordispensaryIssueNo");	
			pNo = HMSUtil.generateTransactionSequence(inMap, session, hbt);
			
			   
				
				Iterator itr = issQtyList.iterator();
				System.out.println("issQtyList"+issQtyList.size());
				System.out.println("itemIdList"+itemIdList.size());
				int qtyIssue = 0;
				StoreOpPatientIssueM storeOpPatientIssueM = new StoreOpPatientIssueM();	
				String batchExpiryDate = "";
				for (int i = 0; i < issQtyList.size(); i++)
				{
					batchExpiryDate = "";
					if(i==0)
					{
						 			
							MasDepartment masDepartment = new MasDepartment();
							masDepartment.setId(deptId);
							storeOpPatientIssueM.setDepartment(masDepartment);
							MasHospital masHospital = new MasHospital();
							masHospital.setId(hospitalId);
							storeOpPatientIssueM.setHospital(masHospital);
							
							storeOpPatientIssueM.setIssueType("OPD");				
							Patient patient = new Patient();
							
								patient.setId(hinId);
								storeOpPatientIssueM.setHin(patient);
								storeOpPatientIssueM.setServiceNo(serviceNo);
							
							storeOpPatientIssueM.setIssueNo(pNo);
							storeOpPatientIssueM.setIssueDate(dateToInsert);
							storeOpPatientIssueM.setStatus("y");
							storeOpPatientIssueM.setPrescriptionNo(prescription);
							MasEmployee masEmployee = new MasEmployee();
							if(empId != 0){
								masEmployee.setId(empId);
								storeOpPatientIssueM.setEmp(masEmployee);
							}
							storeOpPatientIssueM.setLastChgBy(user);
							storeOpPatientIssueM.setLastChgDate(dateToInsert);
							storeOpPatientIssueM.setLastChgTime(time);
							hbt.save(storeOpPatientIssueM);
							hbt.flush();
					}
					PatientPrescriptionDetails prescriptionDetails = new PatientPrescriptionDetails();
					prescriptionDetails = (PatientPrescriptionDetails)session.load(PatientPrescriptionDetails.class, prescriptionDtIdList.get(i));
					qtyIssue=prescriptionDetails.getQtyIssued()!=null?prescriptionDetails.getQtyIssued():0;
					System.out.println("issQtyList.get(i)"+issQtyList.get(i));
					if(issQtyList.get(i)!=null && !issQtyList.get(i).equals("")){
						BigDecimal totalQtyIssued;
						Integer requestedQty = 0;
						StoreOpPatientIssueT storeOpPatientIssueT = new StoreOpPatientIssueT();
						int itemId=Integer.parseInt(itemIdList.get(i).toString());
						List<StoreItemBatchStock> storeItemBatchStockList = session.createCriteria(StoreItemBatchStock.class)
								.add(Restrictions.eq("BatchNo", batchNumberList.get(i)))
								.add(Restrictions.eq("Item.Id", itemId))
								.add(Restrictions.eq("Hospital.Id", hospitalId))
								.add(Restrictions.eq("Department.Id",deptId)).list();
						storeOpPatientIssueT.setOpIssue(storeOpPatientIssueM);
						MasStoreItem masStoreItem = new MasStoreItem();
						masStoreItem.setId(itemId);
						storeOpPatientIssueT.setItemIdRequire(masStoreItem);
						storeOpPatientIssueT.setItemIdIssue(masStoreItem);
						storeOpPatientIssueT.setItem(masStoreItem);
						storeOpPatientIssueT.setBatchNo(batchNumberList.get(i));
						MasStoreBrand masStoreBrand = new MasStoreBrand();
						if(brandNameList.get(i)!=null && !brandNameList.get(i).equals("")){
							masStoreBrand.setId(Integer.parseInt("" + brandNameList.get(i)));
							storeOpPatientIssueT.setBrand(masStoreBrand);
						}
						String str_date = (String) expiryDateList.get(i);
						batchExpiryDate += batchNumberList.get(i) + " ("+str_date+")" + " ("+issQtyList.get(i).toString()+")" ;
						//	String expiryDate=str_date.substring(8)+"/"+str_date.substring(5,7)+"/"+str_date.substring(0,4);
						//	Date expiryDateToInsert = HMSUtil.convertStringTypeDateToDateType(expiryDate);
						if(!str_date.equals("")){
							Date expiryDateToInsert=HMSUtil.convertStringTypeDateToDateType(str_date);
							storeOpPatientIssueT.setExpiryDate(expiryDateToInsert);
						}
						BigDecimal issuedQtyFromJsp=new BigDecimal(""+0.0);
						if(issQtyList.get(i)!=null && !issQtyList.get(i).equals("")){
							issuedQtyFromJsp = new BigDecimal(""+ issQtyList.get(i));
							storeOpPatientIssueT.setQtyIssued(issuedQtyFromJsp);
						}
						System.out.println("prescriptionDtIdList.get(i)"+prescriptionDtIdList.get(i));
						
						
						qtyIssue +=Integer.parseInt(issQtyList.get(i).toString());
						prescriptionDetails.setQtyIssued(qtyIssue);
						/*hbt.update(prescriptionDetails);*/
						
						hbt.save(storeOpPatientIssueT);
						hbt.flush();
					
						BigDecimal nisQty = new BigDecimal(requestedQty);// Ranjesh: For NIS
						
						for(StoreItemBatchStock storeItemBatchStock:storeItemBatchStockList)
						{
							BigDecimal qtyIssued = (BigDecimal) storeItemBatchStock.getIssueQty();
							if (qtyIssued != null)
							{
								totalQtyIssued = qtyIssued.add(issuedQtyFromJsp);
							} else {
								totalQtyIssued = issuedQtyFromJsp;
							}
							BigDecimal closingStock = (BigDecimal) storeItemBatchStock.getClosingStock();
						//  Ranjesh: For NIS And Stock Managment Start
							if(closingStock.compareTo(issuedQtyFromJsp)>=0){
								closingStock = closingStock.subtract(issuedQtyFromJsp);
								issuedQtyFromJsp = issuedQtyFromJsp.subtract(issuedQtyFromJsp);
							
							}else{
								closingStock = closingStock.subtract(closingStock);
								issuedQtyFromJsp = issuedQtyFromJsp.subtract(closingStock);
								
							}
							
						//  Ranjesh: For NIS And Stock Managment End
							storeItemBatchStock.setIssueQty(totalQtyIssued);
							storeItemBatchStock.setClosingStock(closingStock);
							
							hbt.update(storeItemBatchStock);
							hbt.flush();
							System.out.println("closingStock   "+closingStock);
							prescriptionDetails.setBatchExpiryDate((prescriptionDetails.getBatchExpiryDate()!=null?prescriptionDetails.getBatchExpiryDate()+", ":"") +batchExpiryDate);
							prescriptionDetails.setRemainingQty((prescriptionDetails.getRemainingQty()!=null?prescriptionDetails.getRemainingQty():new BigDecimal(0.0)).add(closingStock));
						}
						
					}
					else
					{
						prescriptionDetails.setQtyIssued(qtyIssue);
						
					}
					
					hbt.update(prescriptionDetails);
					hbt.flush();
					
				}
				
				
				
				
				PatientPrescriptionHeader presHd = (PatientPrescriptionHeader)session.get(PatientPrescriptionHeader.class, patientPrescriptionId);
				
				
				
				System.out.println("presHd.getHin().getEmployee().getEmployeeType().getEmployeeTypeCode().trim()"+presHd.getHin().getEmployee().getEmployeeType().getEmployeeTypeCode().trim());
				if(presHd.getHin().getEmployee().getEmployeeStatus() !=null)
				{
					if(presHd.getHin().getEmployee().getEmployeeStatus().getEmpStatusName().trim().equals("Contract"))
					{
						nipNISFlag = false;
					}
				}
				
				
				
				presHd.setStatus("I");
				presHd.setIssuedBy(user);
				presHd.setIssuedDate(new Date());
				hbt.update(presHd);
				hbt.flush();
				
				for(int detailsId : prescriptionDtIdList)
				{
					PatientPrescriptionDetails prescriptionDetails = new PatientPrescriptionDetails();
					prescriptionDetails = (PatientPrescriptionDetails)session.load(PatientPrescriptionDetails.class, detailsId);
					prescriptionDetails.getPrescription().setDispensaryIssueNo(pNo);
					if(prescriptionDetails.getItem().getItemClassification().getId()==2 && nipNISFlag)
					{
						if(nipNo.equals(""))
						{
							Map<String, Object> nipMap = new HashMap<String, Object>();						
							nipMap.put("tableObjectName", "PatientPrescriptionDetails");			
							nipMap.put("isHospitalWise", "y");
							nipMap.put("hospitalId", hospitalId);
							nipMap.put("isYearly", "n");			
							nipMap.put("isMonthly", "n");
							nipMap.put("isPrefix", "y");
							nipMap.put("transactionPrefixProperty", "transactionPrefixForNIP");						
							
							nipNo = HMSUtil.generateTransactionSequence(nipMap, session, hbt);
							prescriptionDetails.setNipNo(nipNo);
							nipFlag=true;
							
						}
						else
						{
							prescriptionDetails.setNipNo(nipNo);
							nipFlag=true;
						}
					}
					else if(prescriptionDetails.getTotal()>prescriptionDetails.getQtyIssued() && nipNISFlag)
					{
						if(nisNo.equals(""))
						{
							Map<String, Object> nisMap = new HashMap<String, Object>();						
							nisMap.put("tableObjectName", "PatientPrescriptionDetails");			
							nisMap.put("isHospitalWise", "y");
							nisMap.put("hospitalId", hospitalId);
							nisMap.put("isYearly", "n");			
							nisMap.put("isMonthly", "n");
							nisMap.put("isPrefix", "y");
							nisMap.put("transactionPrefixProperty", "transactionPrefixForNIS");						
							
							nisNo = HMSUtil.generateTransactionSequence(nisMap, session, hbt);
							prescriptionDetails.setNisNo(nisNo);
							nisFlag = true;
							
						}
						else
						{
							prescriptionDetails.setNisNo(nisNo);
							nisFlag = true;
						}
					}
					hbt.update(prescriptionDetails);
					hbt.flush();
				}
				/*String serviceNoS="0";
				if(map.get("serviceNoS")!=null && !map.get("serviceNoS").toString().equals(""))
					serviceNoS =  map.get("serviceNoS").toString();
				String hinNo=map.get("hinNoS").toString();
				int visitNumber=0;
				if(map.get("visitNumber")!=null && !map.get("visitNumber").toString().equals(""))
					visitNumber=Integer.parseInt(map.get("visitNumber").toString());*/
				
				
				/*List<PatientPrescriptionDetails> patientPrescriptionList=session.createCriteria(PatientPrescriptionDetails.class)
						.createAlias("Prescription", "pre")
						.add(Restrictions.eq("pre.Hin.Id", hinId))
						.add(Restrictions.eq("pre.Status", "P").ignoreCase())
						.add(Restrictions.eq("pre.PrescriptionDate", new Date())).list();
						System.out.println("patientPrescriptionList.size()"+patientPrescriptionList.size());
				for(PatientPrescriptionDetails details : patientPrescriptionList)
				{*/
					/*if(details.getTotal() > details.getQtyIssued())
					{
						PatientPrescriptionHeader presHd = details.getPrescription();
						presHd.setStatus("I");
						nisStatus = "y";
						if(presHd.getFacStatus()!=null)
						facStatus = presHd.getFacStatus(); 
						hbt.update(presHd);
						hbt.flush();
					}
					else
					{
						PatientPrescriptionHeader presHd = details.getPrescription();
						presHd.setStatus("c");
						if(presHd.getFacStatus()!=null)
							facStatus = presHd.getFacStatus();
						hbt.update(presHd);
						hbt.flush();
					}*/
					
					
				/*}*/
						
						
			
				succesfullyAdded = true;
				tx.commit();
			/*}*/
		} catch (Exception e) {
			succesfullyAdded=false;
			tx.rollback();
			e.printStackTrace();
		}
		mapData.put("flag", succesfullyAdded);
		mapData.put("nipFlag", nipFlag);
		mapData.put("nisFlag", nisFlag);		
		mapData.put("nipNISFlag", nipNISFlag);
		mapData.put("visitId", visitId);
		mapData.put("pNo", pNo);
		mapData.put("nisNo", nisNo);
		mapData.put("nipNo", nipNo);
		mapData.put("nisStatus", nisStatus);
		mapData.put("facStatus", facStatus);
		return mapData;
	}
	
	
	public synchronized Map<String, Object> submitOPDPatientStockDetails(Map map) {
		Map<String, Object> mapData = new HashMap<String, Object>();
		Session session = (Session) getSession();
		boolean succesfullyAdded = false;
		List<String> batchNumberList = (List) map.get("batchNumberList");
//		List<Character> nisSatusList = (List<Character>) map.get("batchNumberList");
		List brandNameList = (List) map.get("brandNameList");
		List expiryDateList = (List) map.get("expiryDateList");
		List issQtyList = (List) map.get("issQtyList");
		List costPriceList = (List) map.get("costPriceList");
		//List amountList = (List) map.get("amountList");
		List itemIdList = (List) map.get("itemIdList");
		List<PatientPrescriptionDetails> patientPrescriptionDetailsList=new ArrayList<PatientPrescriptionDetails>();
		//List storeItemBatchStockIdList = (List) map.get("storeItemBatchStockIdList");
		String date = (String) map.get("date");
		int deptId = (Integer) map.get("deptId");
		int hospitalId = (Integer) map.get("hospitalId");
		String time = (String) map.get("time");
		String userName = (String) map.get("userName");
		int storeFyDocumentNoId = (Integer) map.get("storeFyDocumentNoId");
		String opdIssueno = (String) map.get("opdIssueno");
		int hinId = (Integer) map.get("hinId");
		String specialty=(String)map.get("specialty");
		List<Integer> frequencyList = (List) map.get("frequencyList");
		List<String> ctList = (List) map.get("ctList");
		List<String> dosageList = (List) map.get("dosageList");
		List<Integer> totalList = (List) map.get("totalList");
		List<Integer> noOfDaysList = (List) map.get("noOfDaysList");
		List<String> remarksList = (List) map.get("remarksList");
		List<String> routeList = (List) map.get("routeList");
		int empId = (Integer) map.get("empId");
		String prescription = (String) map.get("prescription");
		String serviceNo = (String) map.get("serviceNo");
		Users user = new Users();
		user.setId((Integer)map.get("userId"));
		int patientPrescriptionId = 0;
		String nisStatus = "n";
		String facStatus = "n";
		Integer visitId = 0;
		if(map.get("patientPrescriptionId") != null){
			patientPrescriptionId = (Integer)(map.get("patientPrescriptionId"));
		}
		Date dateToInsert=null;
		if((map.get("date")!=null)&&(!map.get("date").equals("")))
			dateToInsert = HMSUtil.convertStringTypeDateToDateType(date);
		List<Integer> prescriptionDtIdList  = new ArrayList<Integer>();
		if(map.get("prescriptionDtIdList")!=null){
			prescriptionDtIdList = (List<Integer>)map.get("prescriptionDtIdList");
		}
		Transaction tx = null;
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {
			tx = session.beginTransaction();
			System.out.println("itemIdList"+itemIdList.size());
			if(prescriptionDtIdList.size()==0){
				System.out.println("itemIdList"+itemIdList.size());
				if (itemIdList.size() > 0 ) {
					for (int i = 0; i < itemIdList.size(); i++) {
						if(Integer.parseInt(itemIdList.get(i).toString()) !=0){
						List<MasStoreItem> itemCodeList = new ArrayList<MasStoreItem>();
						PatientPrescriptionDetails patientPrescriptionDetails = new PatientPrescriptionDetails();
						visitId = patientPrescriptionDetails.getPrescription().getVisit().getId();
						MasStoreItem masStoreItem = new MasStoreItem();
						masStoreItem.setId((Integer)itemIdList.get(i));
						patientPrescriptionDetails.setItem(masStoreItem);
						System.out.println("in patientPrescriptionDetails");
						if (frequencyList.get(i) != null && !frequencyList.get(i).equals("")) {
							MasFrequency masFrequency = new MasFrequency();
							masFrequency.setId(frequencyList.get(i));
							patientPrescriptionDetails.setFrequency(masFrequency);
							}
							if (dosageList.get(i) != null && !dosageList.get(i).equals("") && !dosageList.get(i).equals("0")) {
								patientPrescriptionDetails.setDosage(dosageList.get(i));
							}else{
								patientPrescriptionDetails.setDosage("0");
							}
							if (remarksList.get(i) != null && !remarksList.get(i).equals("")) {
								patientPrescriptionDetails.setRemarks(remarksList.get(i));
							}
							//patientPrescriptionDetails.setType(typeLeftRightList.get(i));
							if (noOfDaysList.get(i) != null && !noOfDaysList.get(i).equals("")) {
								patientPrescriptionDetails.setNoOfDays(noOfDaysList.get(i));
							}
							if (routeList.get(i) != null && !routeList.get(i).equals("")) {
								patientPrescriptionDetails.setRoute(routeList.get(i));
							}
							/*if (totalList.get(i) != null && !totalList.get(i).equals("")) {
								patientPrescriptionDetails.setTotal(Math.round(totalList.get(i).floatValue()));
							}*/
							if (totalList.get(i) != null && !totalList.get(i).equals("") && totalList.get(i) != 0) {
								patientPrescriptionDetails.setTotal(totalList.get(i));
							}else{
								patientPrescriptionDetails.setTotal(1);
							}
							patientPrescriptionDetails.setGivenQty(0);
						PatientPrescriptionHeader patientPrescriptionHeader = new PatientPrescriptionHeader();
						patientPrescriptionHeader.setId(patientPrescriptionId);
						patientPrescriptionDetails.setPrescription(patientPrescriptionHeader);
						patientPrescriptionDetails.setDetailStatus("a");
						patientPrescriptionDetails.setInjectionStatus("n");
						if(ctList.get(i).equals("y")){
							patientPrescriptionDetails.setCt("yes");
						}else{
							patientPrescriptionDetails.setCt("no");
						}
						hbt.save(patientPrescriptionDetails);
						hbt.flush();
						}
					}
				}
			}
			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) hbt.load(
					StoreFyDocumentNo.class, storeFyDocumentNoId);
			StoreOpPatientIssueM storeOpPatientIssueM = null;
			String opdPatientIssueNoFromDB = "";
			if(storeFyDocumentNo.getOpdIssueNo() != null && storeFyDocumentNo.getOpdIssueNo().equals(""))
				opdPatientIssueNoFromDB = storeFyDocumentNo.getOpdIssueNo();
			if (!opdPatientIssueNoFromDB.equals(opdIssueno))
			{
				storeFyDocumentNo.setOpdIssueNo(opdIssueno);
				hbt.update(storeFyDocumentNo);
				storeOpPatientIssueM = new StoreOpPatientIssueM();
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				storeOpPatientIssueM.setDepartment(masDepartment);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				storeOpPatientIssueM.setHospital(masHospital);
				PatientPrescriptionHeader prescriptionHeader = new PatientPrescriptionHeader();
				if(patientPrescriptionId != 0){
					prescriptionHeader.setId(patientPrescriptionId);
					storeOpPatientIssueM.setPatientPrescriptionHeader(prescriptionHeader);
				}
				storeOpPatientIssueM.setIssueType("I");
				storeOpPatientIssueM.setTypeOfIssue("P");
				Patient patient = new Patient();
				if (hinId != 0) {
					patient.setId(hinId);
					storeOpPatientIssueM.setHin(patient);
					storeOpPatientIssueM.setServiceNo(serviceNo);
				} else
					storeOpPatientIssueM.setServiceNo(serviceNo);
				storeOpPatientIssueM.setIssueNo(opdIssueno);
				storeOpPatientIssueM.setIssueDate(dateToInsert);
				storeOpPatientIssueM.setStatus("y");
				storeOpPatientIssueM.setPrescriptionNo(prescription);
				MasEmployee masEmployee = new MasEmployee();
				if(empId != 0){
					masEmployee.setId(empId);
					storeOpPatientIssueM.setEmp(masEmployee);
				}
				storeOpPatientIssueM.setLastChgBy(user);
				storeOpPatientIssueM.setLastChgDate(dateToInsert);
				storeOpPatientIssueM.setLastChgTime(time);
				hbt.save(storeOpPatientIssueM);
				hbt.flush();
				PatientPrescriptionHeader patientPricriptionHeader = (PatientPrescriptionHeader) getHibernateTemplate()
				.load(PatientPrescriptionHeader.class, patientPrescriptionId);
				patientPricriptionHeader.setSpecialty(specialty);
				hbt.update(patientPricriptionHeader);
				hbt.flush();
				Iterator itr = issQtyList.iterator();
				int i = 0;
				for (int j = 0; i < issQtyList.size(); j++)
				{
					if(issQtyList.get(i)!=null && !issQtyList.get(i).equals("")){
						BigDecimal totalQtyIssued;
						Integer requestedQty = 0;
						StoreOpPatientIssueT storeOpPatientIssueT = new StoreOpPatientIssueT();
						int itemId=Integer.parseInt(""+itemIdList.get(i));
						List<StoreItemBatchStock> storeItemBatchStockList = session.createCriteria(StoreItemBatchStock.class)
								.add(Restrictions.eq("BatchNo", batchNumberList.get(i)))
								.add(Restrictions.eq("Item.Id", itemId))
								.add(Restrictions.eq("Hospital.Id", hospitalId))
								.add(Restrictions.eq("Department.Id",deptId)).list();
						storeOpPatientIssueT.setOpIssue(storeOpPatientIssueM);
						MasStoreItem masStoreItem = new MasStoreItem();
						masStoreItem.setId(itemId);
						storeOpPatientIssueT.setItemIdRequire(masStoreItem);
						storeOpPatientIssueT.setItemIdIssue(masStoreItem);
						storeOpPatientIssueT.setBatchNo(batchNumberList.get(i));
						MasStoreBrand masStoreBrand = new MasStoreBrand();
						if(brandNameList.get(i)!=null && !brandNameList.get(i).equals("")){
							masStoreBrand.setId(Integer.parseInt("" + brandNameList.get(i)));
							storeOpPatientIssueT.setBrand(masStoreBrand);
						}
						String str_date = (String) expiryDateList.get(i);
						//	String expiryDate=str_date.substring(8)+"/"+str_date.substring(5,7)+"/"+str_date.substring(0,4);
						//	Date expiryDateToInsert = HMSUtil.convertStringTypeDateToDateType(expiryDate);
						if(!str_date.equals("")){
							Date expiryDateToInsert=HMSUtil.convertStringTypeDateToDateType(str_date);
							storeOpPatientIssueT.setExpiryDate(expiryDateToInsert);
						}
						BigDecimal issuedQtyFromJsp=new BigDecimal(""+0.0);
						if(issQtyList.get(i)!=null && !issQtyList.get(i).equals("")){
							issuedQtyFromJsp = new BigDecimal(""+ issQtyList.get(i));
							storeOpPatientIssueT.setQtyIssued(issuedQtyFromJsp);
						}
						/*System.out.println("issuedQtyFromJsp="+issuedQtyFromJsp+i);*/
						//BigDecimal bigDecimal2 = new BigDecimal(""
						//	+ costPriceList.get(i));
						//storeOpPatientIssueT.setRate(bigDecimal2);
						//BigDecimal bigDecimal3 = new BigDecimal("" + amountList.get(i));
						//storeOpPatientIssueT.setAmount(bigDecimal3);
						// hbt.save(storeIpIssueT);
						patientPrescriptionDetailsList=session.createCriteria(PatientPrescriptionDetails.class)
						.add(Restrictions.eq("Prescription.Id",patientPrescriptionId ))
						.add(Restrictions.eq("Item.Id", itemId)).list();
						if (patientPrescriptionDetailsList != null && patientPrescriptionDetailsList.size() > 0)
						{
							PatientPrescriptionDetails prescriptionDetails=patientPrescriptionDetailsList.get(0);
							if(prescriptionDetails.getQtyIssued()!=null)
							{
								storeOpPatientIssueT.setVisit(prescriptionDetails.getPrescription().getVisit());
								storeOpPatientIssueT.setPrescription(prescriptionDetails);
								storeOpPatientIssueT.setItem(prescriptionDetails.getItem());
								int qtyIssued=prescriptionDetails.getQtyIssued();
								qtyIssued +=Integer.parseInt(""+issQtyList.get(i));
								prescriptionDetails.setQtyIssued(qtyIssued);
								requestedQty = prescriptionDetails.getTotal();
								int total=prescriptionDetails.getTotal();
								total -=Integer.parseInt(""+issQtyList.get(i));
								/*prescriptionDetails.setTotal(total);*/
								hbt.update(prescriptionDetails);
								hbt.flush();
								//hbt.refresh(prescriptionDetails);
							}
							else
							{
								storeOpPatientIssueT.setVisit(prescriptionDetails.getPrescription().getVisit());
								storeOpPatientIssueT.setPrescription(prescriptionDetails);
								storeOpPatientIssueT.setItem(prescriptionDetails.getItem());
								int qtyIssued =Integer.parseInt(""+issQtyList.get(i));
								prescriptionDetails.setQtyIssued(qtyIssued);
								int total=prescriptionDetails.getTotal();
								requestedQty = prescriptionDetails.getTotal();
								total -=Integer.parseInt(""+issQtyList.get(i));
								/*prescriptionDetails.setTotal(total);*/
								hbt.update(prescriptionDetails);
								hbt.refresh(prescriptionDetails);
								hbt.flush();
							}
						}
						BigDecimal nisQty = new BigDecimal(requestedQty);// Ranjesh: For NIS
						//if(storeItemBatchStockList.size()>0){
						for(StoreItemBatchStock storeItemBatchStock:storeItemBatchStockList)
						{
							BigDecimal qtyIssued = (BigDecimal) storeItemBatchStock.getIssueQty();
							if (qtyIssued != null)
							{
								totalQtyIssued = qtyIssued.add(issuedQtyFromJsp);
							} else {
								totalQtyIssued = issuedQtyFromJsp;
							}
							BigDecimal closingStock = (BigDecimal) storeItemBatchStock.getClosingStock();
						//  Ranjesh: For NIS And Stock Managment Start
							if(closingStock.compareTo(issuedQtyFromJsp)>=0){
								closingStock = closingStock.subtract(issuedQtyFromJsp);
								/*if(issuedQtyFromJsp.compareTo(nisQty)<0){
									nisQty = nisQty.subtract(issuedQtyFromJsp);
									nisStatus = "y";
							    	storeOpPatientIssueT.setNisStatus(nisStatus);
							    	storeOpPatientIssueT.setNisQty(nisQty);
								}else{
									nisStatus = "n";
									storeOpPatientIssueT.setNisStatus(nisStatus);
							    	storeOpPatientIssueT.setNisQty(new BigDecimal("0.0"));
								}*/
							}else{
								closingStock.subtract(closingStock);
								/*nisQty = nisQty.subtract(closingStock);
								nisStatus = "y";
						    	storeOpPatientIssueT.setNisStatus(nisStatus);
						    	storeOpPatientIssueT.setNisQty(nisQty);*/
							}
						//  Ranjesh: For NIS And Stock Managment End
							storeItemBatchStock.setIssueQty(totalQtyIssued);
							storeItemBatchStock.setClosingStock(closingStock);
							// hbt.save(storeIpIssueM);
							hbt.update(storeItemBatchStock);
							hbt.flush();
						}/*}else{
							nisStatus = "y";
					    	storeOpPatientIssueT.setNisStatus(nisStatus);
					    	storeOpPatientIssueT.setNisQty(nisQty);
						}*/
						hbt.save(storeOpPatientIssueT);
						hbt.flush();
					}
					i++;
				}
				String serviceNoS="0";
				if(map.get("serviceNoS")!=null && !map.get("serviceNoS").toString().equals(""))
					serviceNoS =  map.get("serviceNoS").toString();
				String hinNo=map.get("hinNoS").toString();
				int visitNumber=0;
				if(map.get("visitNumber")!=null && !map.get("visitNumber").toString().equals(""))
					visitNumber=Integer.parseInt(map.get("visitNumber").toString());
				/*List lpItem=null;
				List lpItemQty=null;
				List lotOut=null;
				List lotQty=null;
				if(map.get("lpItem")!=null){
					lpItem=(List) map.get("lpItem");
				}
				if(map.get("lpItemQty")!=null){
					lpItemQty=(List)map.get("lpItemQty");
				}
				if(map.get("lotOut")!=null){
					lotOut=(List) map.get("lotOut");
				}
				if(map.get("lotQty")!=null){
					lotQty=(List)map.get("lotQty");
				}
				if(deptId!=24){
					if(lpItem!=null){
						Map keyValue=new HashMap();
						for(int j=0;j<lpItem.size();j++){
							keyValue.put(lpItem.get(j),lpItemQty.get(j));
						}
						Map KeyValueL=new HashMap();
						for(int j=0;j<lotOut.size();j++){
							KeyValueL.put(lotOut.get(j),lotQty.get(j));
						}
						List preList=new ArrayList();
						String abc="select ppd.PRESCRIPTION_ID,ppd.ITEM_ID from Patient_Prescription_header pph left " +
						"outer join Patient_Prescription_details ppd on " +
						"pph.PRESCRIPTION_ID=ppd.PRESCRIPTION_ID where  visit_id in (select v.VISIT_ID " +
						"from visit v " +
						"where v.HIN_ID in " +
						"(select p.HIN_ID from patient p where p.HIN_NO='"+hinNo+"' and p.SERVICE_NO='"+serviceNo+"' ) and v.VISIT_NO='"+visitNumber+"')";
						preList=session.createSQLQuery(abc).list();
						Iterator itr1=preList.iterator();
						Query query=null;
						int i1=0;
						String updatePendingPre="update PatientPrescriptionDetails as ppd  set ppd.SoId=:SoId" +
						",ppd.SoItem=:SoItem,ppd.SoQty=:SoQty,ppd.LoId=:LoId,ppd.LoItem=:LoItem,ppd.LoQty=:LoQty" +
						" where ppd.Prescription.Id=:Prescription and ppd.Item.Id=:Item";
						query=session.createQuery(updatePendingPre);
						while(itr1.hasNext()){
							Object[] tuple = (Object[]) itr1.next();
							if(lpItem.contains(tuple[1].toString())){
								query.setParameter("SoId","");
								query.setParameter("SoItem","n");
								query.setParameter("SoQty", Integer.parseInt(keyValue.get((tuple[1].toString()).trim()).toString().trim()));
								query.setParameter("LoId","");
								query.setParameter("LoItem","");
								query.setParameter("LoQty",null);
								query.setParameter("Prescription", Integer.parseInt(tuple[0].toString()));
								query.setParameter("Item", Integer.parseInt(tuple[1].toString()));
								query.executeUpdate();
							}
							else if(lotOut.contains(tuple[1].toString())){
								query.setParameter("SoId","");
								query.setParameter("SoItem","");
								query.setParameter("SoQty",null );
								query.setParameter("LoId","");
								query.setParameter("LoItem","n");
								query.setParameter("LoQty",Integer.parseInt(KeyValueL.get((tuple[1].toString()).trim()).toString().trim()));
								query.setParameter("Prescription", Integer.parseInt(tuple[0].toString()));
								query.setParameter("Item", Integer.parseInt(tuple[1].toString()));
								query.executeUpdate();
							}
						}
					}}*/
				
						
						
				List<PatientPrescriptionDetails> patientPrescriptionList=session.createCriteria(PatientPrescriptionDetails.class)
				.add(Restrictions.eq("Prescription.Id",patientPrescriptionId ))
				.add(Restrictions.ne("Total",0)).list();
				if(patientPrescriptionList.size()==0)
				{
					PatientPrescriptionHeader presHd = (PatientPrescriptionHeader)hbt.load(PatientPrescriptionHeader.class, patientPrescriptionId);
					presHd.setStatus("c");
					if(presHd.getFacStatus()!=null)
						facStatus = presHd.getFacStatus();
					hbt.update(presHd);
					hbt.flush();
				}else{
					PatientPrescriptionHeader presHd = (PatientPrescriptionHeader)hbt.load(PatientPrescriptionHeader.class, patientPrescriptionId);
					presHd.setStatus("l");
					nisStatus = "y";
					if(presHd.getFacStatus()!=null)
					facStatus = presHd.getFacStatus(); 
					hbt.update(presHd);
					hbt.flush();
				}
				succesfullyAdded = true;
				tx.commit();
			}
		} catch (Exception e) {
			succesfullyAdded=false;
			tx.rollback();
			e.printStackTrace();
		}
		mapData.put("flag", succesfullyAdded);
		mapData.put("visitId", visitId);
		mapData.put("nisStatus", nisStatus);
		mapData.put("facStatus", facStatus);
		return mapData;
	}


	public synchronized Map<String, Object> submitOPDPatientNIPDetails(Box box) {
		Map<String, Object> mapData = new HashMap<String, Object>();
		Session session = (Session) getSession();
		boolean succesfullyAdded = false;
		
		List<Integer> prescriptionDtIdList  = new ArrayList<Integer>();
		int counter = 0;
	
		Transaction tx = null;
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {
			tx = session.beginTransaction();
			
			if(box.get("counter")!=null)
			{
				 counter = box.getInt("counter");	
			}
			Users user = new Users(box.getInt("userId"));
			
			System.out.println("counter="+counter);
		
			
			int headerId = 0;
				for(int i=1; i<=counter; i++)
				{
					PatientPrescriptionDetails prescriptionDetails = new PatientPrescriptionDetails();
					prescriptionDetails = (PatientPrescriptionDetails)session.load(PatientPrescriptionDetails.class, box.getInt("patientPrescriptionDtId" + i));
					PatientPrescriptionHeader pph = new PatientPrescriptionHeader();
					pph = prescriptionDetails.getPrescription();
					
					if(box.get("deleteId" + i)!=null && box.getString("deleteId" + i).equals("y"))
					{
						System.out.println("if");
						hbt.delete(prescriptionDetails);
					}
					else
					{
						System.out.println("else");
						prescriptionDetails.getPrescription().setNipStatus("A");
						MasStoreItem msi = new MasStoreItem();
						msi.setId(box.getInt("itemId"+i));
						prescriptionDetails.setItem(msi);	
						prescriptionDetails.getPrescription().setNipApprovedBy(user);
						hbt.update(prescriptionDetails);
						hbt.update(prescriptionDetails.getPrescription());
					}					
					hbt.flush();
					List<PatientPrescriptionDetails> ppdList = new ArrayList<PatientPrescriptionDetails>();
					ppdList = session.createCriteria(PatientPrescriptionDetails.class)
					.add(Restrictions.eq("Prescription.Id", pph.getId())).list();
					if(ppdList.size()==0)
					{
						hbt.delete(pph);
					}
					hbt.flush();
				}
				
						
						
				
				succesfullyAdded = true;
				tx.commit();
			
		} catch (Exception e) {
			succesfullyAdded=false;
			tx.rollback();
			e.printStackTrace();
		}
		mapData.put("flag", succesfullyAdded);
		
		
		return mapData;
	}
	
	public Map<String, Object> submitOPDPatientStockDetailsByHin(Map map) {
		Map<String, Object> mapData = new HashMap<String, Object>();
		Session session = (Session) getSession();
		boolean succesfullyAdded = false;
		List<String> batchNumberList = (List) map.get("batchNumberList");
//		List<Character> nisSatusList = (List<Character>) map.get("batchNumberList");
		List brandNameList = (List) map.get("brandNameList");
		List storeItemBatchStockIdList = (List) map.get("storeItemBatchStockIdList");
		List expiryDateList = (List) map.get("expiryDateList");
		List issQtyList = (List) map.get("issQtyList");
		List costPriceList = (List) map.get("costPriceList");
		//List amountList = (List) map.get("amountList");
		List itemIdList = (List) map.get("itemIdList");
		List<PatientPrescriptionDetails> patientPrescriptionDetailsList=new ArrayList<PatientPrescriptionDetails>();
		//List storeItemBatchStockIdList = (List) map.get("storeItemBatchStockIdList");
		String date = (String) map.get("date");
		int deptId = (Integer) map.get("deptId");
		int hospitalId = (Integer) map.get("hospitalId");
		String time = (String) map.get("time");
		String userName = (String) map.get("userName");
		int storeFyDocumentNoId = (Integer) map.get("storeFyDocumentNoId");
		String opdIssueno = (String) map.get("opdIssueno");
		int hinId = (Integer) map.get("hinId");
		String specialty=(String)map.get("specialty");
		List<Integer> frequencyList = (List) map.get("frequencyList");
		List<String> ctList = (List) map.get("ctList");
		List<String> dosageList = (List) map.get("dosageList");
		List<Integer> totalList = (List) map.get("totalList");
		List<Integer> noOfDaysList = (List) map.get("noOfDaysList");
		List<String> remarksList = (List) map.get("remarksList");
		List<String> routeList = (List) map.get("routeList");
		int empId = (Integer) map.get("empId");
		String prescription = (String) map.get("prescription");
		String serviceNo = (String) map.get("serviceNo");
		int patientPrescriptionId = 0;
		String message = "";
		boolean qtyFlag = false;
		boolean reSubmitFlag = true;
		String nisStatus = "n";
		String facStatus = "n";
		Integer visitId = 0;
		String nipNo = "";
		String nisNo = "";
		String pNo = "";
		boolean nipFlag=false;
		boolean nisFlag=false;
		boolean nipNISFlag = true;
		int divisionId=0;
		String prescriptiondate="";
		Users user = new Users();
		user.setId((Integer)map.get("userId"));
		if(map.get("patientPrescriptionId") != null){
			patientPrescriptionId = (Integer)(map.get("patientPrescriptionId"));
		}
		Date dateToInsert=null;
		if((map.get("date")!=null)&&(!map.get("date").equals("")))
			dateToInsert = HMSUtil.convertStringTypeDateToDateType(date);
		List<Integer> prescriptionDtIdList  = new ArrayList<Integer>();
		if(map.get("prescriptionDtIdList")!=null){
			prescriptionDtIdList = (List<Integer>)map.get("prescriptionDtIdList");
		}
		
		String[] injDetailsIdArray =null;
		if(map.get("injDetailsIdArray")!=null){
			injDetailsIdArray = (String[])map.get("injDetailsIdArray");
		}
		System.out.println("prescriptionDtIdList"+prescriptionDtIdList.size());
		Transaction tx = null;
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {
			tx = session.beginTransaction();
			
			Map<String, Object> inMap = new HashMap<String, Object>();						
			inMap.put("tableObjectName", "PatientPrescriptionHeader");			
			inMap.put("isHospitalWise", "y");
			inMap.put("hospitalId", hospitalId);
			inMap.put("isYearly", "n");			
			inMap.put("isMonthly", "n");
			inMap.put("isPrefix", "y");
			inMap.put("transactionPrefixProperty", "transactionPrefixFordispensaryIssueNo");	
			pNo = HMSUtil.generateTransactionSequence(inMap, session, hbt);
			
			if(prescriptionDtIdList.size()>0)
			{
				
			for(int dtId: prescriptionDtIdList)
			{
				PatientPrescriptionDetails prescriptionDetailsForStatusCheck = new PatientPrescriptionDetails();
				prescriptionDetailsForStatusCheck = (PatientPrescriptionDetails)session.load(PatientPrescriptionDetails.class, dtId);
				if(prescriptionDetailsForStatusCheck.getNisNo()!=null)
				{
					nisNo =prescriptionDetailsForStatusCheck.getNisNo();
					nisFlag=true;
				}
				if(prescriptionDetailsForStatusCheck.getNipNo()!=null)
				{
					nipNo =prescriptionDetailsForStatusCheck.getNipNo();
					nipFlag=true;
				}
				
				if(reSubmitFlag)
				{
				if(prescriptionDetailsForStatusCheck.getPrescription().getStatus().equalsIgnoreCase("I")){
					pNo = prescriptionDetailsForStatusCheck.getPrescription().getDispensaryIssueNo();
					reSubmitFlag = false;
				}
				}
			}
				
				
				if(reSubmitFlag) // if status is I thats mean it is already submitted and it will not allow user to resubmit by refresing page
				{
			
			
		
				Iterator itr = issQtyList.iterator();
				System.out.println("issQtyList"+issQtyList.size());
				System.out.println("itemIdList"+itemIdList.size());
				int qtyIssue = 0;
				StoreOpPatientIssueM storeOpPatientIssueM = new StoreOpPatientIssueM();	
				String batchExpiryDate = "";
				for (int i = 0; i < issQtyList.size(); i++)
				{
					batchExpiryDate = "";
					if(i==0)
					{
						 			
							MasDepartment masDepartment = new MasDepartment();
							masDepartment.setId(deptId);
							storeOpPatientIssueM.setDepartment(masDepartment);
							MasHospital masHospital = new MasHospital();
							masHospital.setId(hospitalId);
							storeOpPatientIssueM.setHospital(masHospital);
							
							storeOpPatientIssueM.setIssueType("OPD");				
							Patient patient = new Patient();
							
								patient.setId(hinId);
								storeOpPatientIssueM.setHin(patient);
								storeOpPatientIssueM.setServiceNo(serviceNo);
							
							storeOpPatientIssueM.setIssueNo(pNo);
							storeOpPatientIssueM.setIssueDate(dateToInsert);
							storeOpPatientIssueM.setStatus("y");
							storeOpPatientIssueM.setPrescriptionNo(prescription);
							MasEmployee masEmployee = new MasEmployee();
							if(empId != 0){
								masEmployee.setId(empId);
								storeOpPatientIssueM.setEmp(masEmployee);
							}
							storeOpPatientIssueM.setLastChgBy(user);
							storeOpPatientIssueM.setLastChgDate(dateToInsert);
							storeOpPatientIssueM.setLastChgTime(time);
							hbt.save(storeOpPatientIssueM);
							hbt.flush();
					}
					PatientPrescriptionDetails prescriptionDetails = new PatientPrescriptionDetails();
					prescriptionDetails = (PatientPrescriptionDetails)session.load(PatientPrescriptionDetails.class, prescriptionDtIdList.get(i));
					qtyIssue=prescriptionDetails.getQtyIssued()!=null?prescriptionDetails.getQtyIssued():0;
					System.out.println("issQtyList.get(i)"+issQtyList.get(i));
					if(issQtyList.get(i)!=null && !issQtyList.get(i).equals("")){
						BigDecimal totalQtyIssued;
						Integer requestedQty = 0;
						StoreOpPatientIssueT storeOpPatientIssueT = new StoreOpPatientIssueT();
						int itemId=Integer.parseInt(itemIdList.get(i).toString());
						List<StoreItemBatchStock> storeItemBatchStockList = session.createCriteria(StoreItemBatchStock.class)
								.add(Restrictions.eq("Id", Integer.parseInt(storeItemBatchStockIdList.get(i).toString())))
								.add(Restrictions.eq("Item.Id", itemId))
								.add(Restrictions.eq("Hospital.Id", hospitalId))
								.add(Restrictions.eq("Department.Id",deptId)).list();
						System.out.println("itemId"+itemId);
						storeOpPatientIssueT.setOpIssue(storeOpPatientIssueM);
						MasStoreItem masStoreItem = new MasStoreItem();
						masStoreItem.setId(itemId);
						storeOpPatientIssueT.setItemIdRequire(masStoreItem);
						storeOpPatientIssueT.setItemIdIssue(masStoreItem);
						storeOpPatientIssueT.setItem(masStoreItem);
						storeOpPatientIssueT.setBatchNo(batchNumberList.get(i));
						MasStoreBrand masStoreBrand = new MasStoreBrand();
						if(brandNameList.get(i)!=null && !brandNameList.get(i).equals("")){
							masStoreBrand.setId(Integer.parseInt("" + brandNameList.get(i)));
							storeOpPatientIssueT.setBrand(masStoreBrand);
						}
						String str_date = (String) expiryDateList.get(i);
						batchExpiryDate += storeItemBatchStockList.get(0).getBatchNo() + " ("+str_date+")" + " ("+issQtyList.get(i).toString()+")"  ;
						//	String expiryDate=str_date.substring(8)+"/"+str_date.substring(5,7)+"/"+str_date.substring(0,4);
						//	Date expiryDateToInsert = HMSUtil.convertStringTypeDateToDateType(expiryDate);
						if(!str_date.equals("")){
							Date expiryDateToInsert=HMSUtil.convertStringTypeDateToDateType(str_date);
							storeOpPatientIssueT.setExpiryDate(expiryDateToInsert);
						}
						BigDecimal issuedQtyFromJsp=new BigDecimal(""+0.0);
						if(issQtyList.get(i)!=null && !issQtyList.get(i).equals("")){
							issuedQtyFromJsp = new BigDecimal(""+ issQtyList.get(i));
							storeOpPatientIssueT.setQtyIssued(issuedQtyFromJsp);
						}
						System.out.println("prescriptionDtIdList.get(i)"+prescriptionDtIdList.get(i));
						
						
						qtyIssue +=Integer.parseInt(issQtyList.get(i).toString());
						prescriptionDetails.setQtyIssued(qtyIssue);
					
						
						hbt.save(storeOpPatientIssueT);
						hbt.flush();
					
						BigDecimal nisQty = new BigDecimal(requestedQty);// Ranjesh: For NIS
						//if(storeItemBatchStockList.size()>0){
						for(StoreItemBatchStock storeItemBatchStock:storeItemBatchStockList)
						{
							BigDecimal qtyIssued = (BigDecimal) storeItemBatchStock.getIssueQty();
							if (qtyIssued != null)
							{
								totalQtyIssued = qtyIssued.add(issuedQtyFromJsp);
							} else {
								totalQtyIssued = issuedQtyFromJsp;
							}
							BigDecimal closingStock = (BigDecimal) storeItemBatchStock.getClosingStock();
						//  Ranjesh: For NIS And Stock Managment Start
							if(closingStock.compareTo(issuedQtyFromJsp)>=0){
								closingStock = closingStock.subtract(issuedQtyFromJsp);
								issuedQtyFromJsp = issuedQtyFromJsp.subtract(issuedQtyFromJsp);
							
							}else{
								closingStock = closingStock.subtract(closingStock);
								issuedQtyFromJsp = issuedQtyFromJsp.subtract(closingStock);
								message += ", "+storeItemBatchStock.getItem().getNomenclature()+"("+storeItemBatchStock.getBatchNo()+")";
								qtyFlag=true;
								
								
							}
							
						//  Ranjesh: For NIS And Stock Managment End
							storeItemBatchStock.setIssueQty(totalQtyIssued);
							storeItemBatchStock.setClosingStock(closingStock);
							// hbt.save(storeIpIssueM);
							hbt.update(storeItemBatchStock);
							hbt.flush();
							prescriptionDetails.setBatchExpiryDate((prescriptionDetails.getBatchExpiryDate()!=null?prescriptionDetails.getBatchExpiryDate()+", ":"") +batchExpiryDate);
							prescriptionDetails.setRemainingQty((prescriptionDetails.getRemainingQty()!=null?prescriptionDetails.getRemainingQty():new BigDecimal(0.0)).add(closingStock));
						}
						
					}
					else
					{
						prescriptionDetails.setQtyIssued(qtyIssue);
						
					}
					
					hbt.update(prescriptionDetails);
					hbt.flush();
					
					
				}
				
		
				
				
				
				for(int detailsId : prescriptionDtIdList)
				{
					PatientPrescriptionDetails prescriptionDetails = new PatientPrescriptionDetails();
					prescriptionDetails = (PatientPrescriptionDetails)session.load(PatientPrescriptionDetails.class, detailsId);
					prescriptionDetails.getPrescription().setDispensaryIssueNo(pNo);


                    //update status=I start 
					
					
					
					if(prescriptionDetails.getPrescription().getHin().getEmployee() !=null)
					{
						if(prescriptionDetails.getPrescription().getHin().getEmployee().getEmployeeStatus() !=null)
						{
							if(prescriptionDetails.getPrescription().getHin().getEmployee().getEmployeeStatus().getEmpStatusName().trim().equals("Contract"))
							{
								nipNISFlag = false;  // it is an contractual employee
							}
						}
					}
					
					
					if(prescriptionDetails.getPrescription().getHin().getPatientType().getId() == 2)
					{
						
								nipNISFlag = false;  // it is an Other Patient so in case of other patient we are not generateing NIS and NIP
						
					}
					
					
					
					prescriptionDetails.getPrescription().setStatus("I");
					prescriptionDetails.getPrescription().setIssuedBy(user);
					prescriptionDetails.getPrescription().setIssuedDate(new Date());
					prescriptionDetails.getPrescription().setIssuedTime(time);
					 divisionId = prescriptionDetails.getPrescription().getDivision() !=null?prescriptionDetails.getPrescription().getDivision().getId():0;
					 prescriptiondate = prescriptionDetails.getPrescription().getPrescriptionDate() !=null?HMSUtil.changeDateToddMMyyyy(prescriptionDetails.getPrescription().getPrescriptionDate()):"";
					
					//update status=I end
					
					if(prescriptionDetails.getItem().getItemClassification().getId()==2 && nipNISFlag)
					{
						if(nipNo.equals(""))
						{
							Map<String, Object> nipMap = new HashMap<String, Object>();						
							nipMap.put("tableObjectName", "PatientPrescriptionDetails");			
							nipMap.put("isHospitalWise", "y");
							nipMap.put("hospitalId", hospitalId);
							nipMap.put("isYearly", "n");			
							nipMap.put("isMonthly", "n");
							nipMap.put("isPrefix", "y");
							nipMap.put("transactionPrefixProperty", "transactionPrefixForNIP");						
							
							nipNo = HMSUtil.generateTransactionSequence(nipMap, session, hbt);
							prescriptionDetails.setNipNo(nipNo);
							nipFlag=true;
							
						}
						else
						{
							prescriptionDetails.setNipNo(nipNo);
							nipFlag=true;
						}
					}
					else
						if(prescriptionDetails.getTotal()>prescriptionDetails.getQtyIssued() && prescriptionDetails.getItem().getItemClassification().getId()==1 && prescriptionDetails.getPrescription().getHin().getPatientType().getId() == 1)
					{
						if(nisNo.equals(""))
						{
							Map<String, Object> nisMap = new HashMap<String, Object>();						
							nisMap.put("tableObjectName", "PatientPrescriptionDetails");			
							nisMap.put("isHospitalWise", "y");
							nisMap.put("hospitalId", hospitalId);
							nisMap.put("isYearly", "n");			
							nisMap.put("isMonthly", "n");
							nisMap.put("isPrefix", "y");
							nisMap.put("transactionPrefixProperty", "transactionPrefixForNIS");						
							
							nisNo = HMSUtil.generateTransactionSequence(nisMap, session, hbt);
							prescriptionDetails.setNisNo(nisNo);
							nisFlag = true;
							
						}
						else
						{
							prescriptionDetails.setNisNo(nisNo);
							nisFlag = true;
						}
					}
					hbt.update(prescriptionDetails);
					hbt.flush();
				}
			
				}
				else
				{
					message = "<font color='red'>Prescription Already Submitted Successfully</font>";
				
				}
			}
			
			// code for injection issue starts
			if(injDetailsIdArray!=null)
			{
				for(String id : injDetailsIdArray)
				{
					
					PatientPrescriptionDetails ppd = new PatientPrescriptionDetails();
					ppd = (PatientPrescriptionDetails)session.get(PatientPrescriptionDetails.class, Integer.parseInt(id));
					ppd.getPrescription().setStatus("I");
					ppd.getPrescription().setIssuedBy(user);
					ppd.getPrescription().setIssuedDate(new Date());
					ppd.getPrescription().setIssuedTime(time);
					ppd.getPrescription().setDispensaryIssueNo(pNo);
					hbt.update(ppd);
					hbt.flush();
				}
	     	}
			  	
			// code for injection issue ends
			
				if(qtyFlag)
				{
					message = "<font color='red'>Not Enough Stock For"+message.substring(1)+"</font>";
					tx.rollback();
				}
				else
				{
					if(reSubmitFlag)
					{
						tx.commit();	
					}
					else
					{
						tx.rollback();
					}
					
				}
				succesfullyAdded = true;
				
			
				
				
				
		
			
		} catch (Exception e) {
			succesfullyAdded=false;
			tx.rollback();
			e.printStackTrace();
		}
		mapData.put("flag", succesfullyAdded);
		mapData.put("nipFlag", nipFlag);
		mapData.put("qtyFlag", qtyFlag);
		mapData.put("message", message);
		mapData.put("nisFlag", nisFlag);		
		mapData.put("visitId", visitId);
		mapData.put("nipNISFlag", nipNISFlag);
		mapData.put("pNo", pNo);
		mapData.put("nisNo", nisNo);
		mapData.put("nipNo", nipNo);
		mapData.put("nisStatus", nisStatus);
		mapData.put("facStatus", facStatus);
		mapData.put("divisionId", divisionId);
		mapData.put("fromDate", prescriptiondate);
		return mapData;
	}
	

	public synchronized Map<String, Object> submitIPPartialPatientStockDetails(Map map) {
		Map<String, Object> mapData = new HashMap<String, Object>();
		Session session = (Session) getSession();
		boolean succesfullyAdded = false;
		List<String> batchNumberList = (List) map.get("batchNumberList");
		List brandNameList = (List) map.get("brandNameList");
		List expiryDateList = (List) map.get("expiryDateList");
		List issQtyList = (List) map.get("issQtyList");
		List costPriceList = (List) map.get("costPriceList");
		List itemIdList = (List) map.get("itemIdList");
		List<PatientPrescriptionDetails> patientPrescriptionDetailsList=new ArrayList<PatientPrescriptionDetails>();
		String date = (String) map.get("date");
		int deptId = (Integer) map.get("deptId");
		int hospitalId = (Integer) map.get("hospitalId");
		int userId = (Integer) map.get("userId");
		Users user = new Users();
		user.setId(userId);
		String time = (String) map.get("time");
		String userName = (String) map.get("userName");
		int storeFyDocumentNoId = (Integer) map.get("storeFyDocumentNoId");
		String opdIssueno = (String) map.get("opdIssueno");
		int hinId = (Integer) map.get("hinId");
		String specialty=(String)map.get("specialty");
		List<Integer> frequencyList = (List) map.get("frequencyList");
		List<String> ctList = (List) map.get("ctList");
		List<String> dosageList = (List) map.get("dosageList");
		List<Integer> totalList = (List) map.get("totalList");
		List<Integer> noOfDaysList = (List) map.get("noOfDaysList");
		List<String> remarksList = (List) map.get("remarksList");
		List<String> routeList = (List) map.get("routeList");
		List<String> rcList = (List) map.get("rc");
		List<String> rcQtyList = (List) map.get("rcQty");
		int empId = (Integer) map.get("empId");
		String prescription = (String) map.get("prescription");
		String serviceNo = (String) map.get("serviceNo");
		int patientPrescriptionId = 0;
		String rcStatus = "n";
		Integer inpatientId = 0;
		if(map.get("patientPrescriptionId") != null){
			patientPrescriptionId = (Integer)(map.get("patientPrescriptionId"));
		}
		Date dateToInsert=null;
		if((map.get("date")!=null)&&(!map.get("date").equals("")))
			dateToInsert = HMSUtil.convertStringTypeDateToDateType(date);
		List<Integer> prescriptionDtIdList  = new ArrayList<Integer>();
		if(map.get("prescriptionDtIdList")!=null){
			prescriptionDtIdList = (List<Integer>)map.get("prescriptionDtIdList");
		}
		Transaction tx = null;
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {
			tx = session.beginTransaction();
			if(prescriptionDtIdList.size()==0){
				if (itemIdList.size() > 0 ) {
					for (int i = 0; i < itemIdList.size(); i++) {
						if(Integer.parseInt(itemIdList.get(i).toString()) !=0){
							List<MasStoreItem> itemCodeList = new ArrayList<MasStoreItem>();
							PatientPrescriptionDetails patientPrescriptionDetails = new PatientPrescriptionDetails();
							inpatientId = patientPrescriptionDetails.getPrescription().getInpatient().getId();
							MasStoreItem masStoreItem = new MasStoreItem();
							masStoreItem.setId((Integer)itemIdList.get(i));
							patientPrescriptionDetails.setItem(masStoreItem);
							if (frequencyList.get(i) != null && !frequencyList.get(i).equals("")) {
								MasFrequency masFrequency = new MasFrequency();
								masFrequency.setId(frequencyList.get(i));
								patientPrescriptionDetails.setFrequency(masFrequency);
							}
							if (dosageList.get(i) != null && !dosageList.get(i).equals("") && !dosageList.get(i).equals("0")) {
								patientPrescriptionDetails.setDosage(dosageList.get(i));
							}else{
								patientPrescriptionDetails.setDosage("0");
							}
							if (remarksList.get(i) != null && !remarksList.get(i).equals("")) {
								patientPrescriptionDetails.setRemarks(remarksList.get(i));
							}
							if (noOfDaysList.get(i) != null && !noOfDaysList.get(i).equals("")) {
								patientPrescriptionDetails.setNoOfDays(noOfDaysList.get(i));
							}
							if (routeList.get(i) != null && !routeList.get(i).equals("")) {
								patientPrescriptionDetails.setRoute(routeList.get(i));
							}
							if (totalList.get(i) != null && !totalList.get(i).equals("") && totalList.get(i) != 0) {
								patientPrescriptionDetails.setTotal(totalList.get(i));
							}else{
								patientPrescriptionDetails.setTotal(1);
							}
							// For RC Status Start
							if(rcList.get(i) !=null && !rcList.get(i).equals("") && rcList.get(i).equals("on")){
								rcStatus = "y";
								if(rcQtyList.get(i) !=null && !rcQtyList.get(i).equals("")){
									patientPrescriptionDetails.setRcQty(Integer.parseInt(rcQtyList.get(i)));
								}
							}
							// For RC Status End
							patientPrescriptionDetails.setGivenQty(0);
							PatientPrescriptionHeader patientPrescriptionHeader = new PatientPrescriptionHeader();
							patientPrescriptionHeader.setId(patientPrescriptionId);
							patientPrescriptionDetails.setPrescription(patientPrescriptionHeader);
							patientPrescriptionDetails.setDetailStatus("a");
							patientPrescriptionDetails.setInjectionStatus("n");
							if(ctList.get(i).equals("y")){
								patientPrescriptionDetails.setCt("yes");
							}else{
								patientPrescriptionDetails.setCt("no");
							}
							hbt.save(patientPrescriptionDetails);
							hbt.flush();
						}
					}
				}
			}
			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) hbt.load(
					StoreFyDocumentNo.class, storeFyDocumentNoId);
			StoreOpPatientIssueM storeOpPatientIssueM = null;
			String opdPatientIssueNoFromDB = "";
			if(storeFyDocumentNo.getOpdIssueNo() != null && storeFyDocumentNo.getOpdIssueNo().equals(""))
				opdPatientIssueNoFromDB = storeFyDocumentNo.getOpdIssueNo();
			if (!opdPatientIssueNoFromDB.equals(opdIssueno))
			{
				storeFyDocumentNo.setOpdIssueNo(opdIssueno);
				hbt.update(storeFyDocumentNo);
				storeOpPatientIssueM = new StoreOpPatientIssueM();
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				storeOpPatientIssueM.setDepartment(masDepartment);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				storeOpPatientIssueM.setHospital(masHospital);
				PatientPrescriptionHeader prescriptionHeader = (PatientPrescriptionHeader)hbt.get(PatientPrescriptionHeader.class, patientPrescriptionId);
				storeOpPatientIssueM.setPatientPrescriptionHeader(prescriptionHeader);
				inpatientId = prescriptionHeader.getInpatient().getId();
				storeOpPatientIssueM.setInPatient(prescriptionHeader.getInpatient());
				storeOpPatientIssueM.setIssueType("I");
				storeOpPatientIssueM.setTypeOfIssue("P");
				Patient patient = new Patient();
				if (hinId != 0) {
					patient.setId(hinId);
					storeOpPatientIssueM.setHin(patient);
					storeOpPatientIssueM.setServiceNo(serviceNo);
				} else
					storeOpPatientIssueM.setServiceNo(serviceNo);
				storeOpPatientIssueM.setIssueNo(opdIssueno);
				storeOpPatientIssueM.setIssueDate(dateToInsert);
				storeOpPatientIssueM.setStatus("y");
				storeOpPatientIssueM.setPrescriptionNo(prescription);
				MasEmployee masEmployee = new MasEmployee();
				if(empId != 0){
					masEmployee.setId(empId);
					storeOpPatientIssueM.setEmp(masEmployee);
				}
				storeOpPatientIssueM.setLastChgBy(userName);
				storeOpPatientIssueM.setLastChgDate(dateToInsert);
				storeOpPatientIssueM.setLastChgTime(time);
				hbt.save(storeOpPatientIssueM);
				hbt.flush();
				PatientPrescriptionHeader patientPricriptionHeader = (PatientPrescriptionHeader) getHibernateTemplate()
						.load(PatientPrescriptionHeader.class, patientPrescriptionId);
				patientPricriptionHeader.setSpecialty(specialty);
				// For Only RC
				/*if(issQtyList.size()==0 && rcList.size()>0){
					Iterator itr = rcList.iterator();
					int i = 0;
					for (int j = 0; i < rcList.size(); j++)
					{
						if(rcList.get(i)!=null && !rcList.get(i).equals("")){
							BigDecimal totalQtyIssued;
							Integer requestedQty = 0;
							Integer rcQty = 0;
							StoreOpPatientIssueT storeOpPatientIssueT = new StoreOpPatientIssueT();
							int itemId=Integer.parseInt(""+itemIdList.get(i));
							List<StoreItemBatchStock> storeItemBatchStockList = session.createCriteria(StoreItemBatchStock.class)
									.add(Restrictions.eq("BatchNo", batchNumberList.get(i)))
									.add(Restrictions.eq("Item.Id", itemId))
									.add(Restrictions.eq("Hospital.Id", hospitalId))
									.add(Restrictions.eq("Department.Id",deptId)).list();
							storeOpPatientIssueT.setOpIssue(storeOpPatientIssueM);
							storeOpPatientIssueT.setInPatient(new Inpatient(inpatientId));
							MasStoreItem masStoreItem = new MasStoreItem();
							masStoreItem.setId(itemId);
							storeOpPatientIssueT.setItemIdRequire(masStoreItem);
							storeOpPatientIssueT.setItemIdIssue(masStoreItem);
							storeOpPatientIssueT.setBatchNo(batchNumberList.get(i));
							MasStoreBrand masStoreBrand = new MasStoreBrand();
							if(brandNameList.get(i)!=null && !brandNameList.get(i).equals("")){
								masStoreBrand.setId(Integer.parseInt("" + brandNameList.get(i)));
								storeOpPatientIssueT.setBrand(masStoreBrand);
							}
							if(rcList.get(i)!=null && !rcList.get(i).equals("") && rcList.get(i).equals("on")){
								if(rcQtyList.get(i)!=null && !rcQtyList.get(i).equals("")){
									rcStatus = "y";
									rcQty = Integer.parseInt(rcQtyList.get(i));
									storeOpPatientIssueT.setRcQty(rcQty);
							}}
							String str_date = (String) expiryDateList.get(i);
							if(!str_date.equals("")){
								Date expiryDateToInsert=HMSUtil.convertStringTypeDateToDateType(str_date);
								storeOpPatientIssueT.setExpiryDate(expiryDateToInsert);
							}
							BigDecimal issuedQtyFromJsp=new BigDecimal(""+0.0);
							if(issQtyList.get(i)!=null && !issQtyList.get(i).equals("")){
								issuedQtyFromJsp = new BigDecimal(""+ issQtyList.get(i));
								storeOpPatientIssueT.setQtyIssued(issuedQtyFromJsp);
							}
							patientPrescriptionDetailsList=session.createCriteria(PatientPrescriptionDetails.class)
									.add(Restrictions.eq("Prescription.Id",patientPrescriptionId ))
									.add(Restrictions.eq("Item.Id", itemId)).list();
							if (patientPrescriptionDetailsList != null && patientPrescriptionDetailsList.size() > 0)
							{
								PatientPrescriptionDetails prescriptionDetails=patientPrescriptionDetailsList.get(0);
								if(prescriptionDetails.getRcQty()!=null)
								{
									storeOpPatientIssueT.setInPatient(prescriptionDetails.getPrescription().getInpatient());
									storeOpPatientIssueT.setPrescription(prescriptionDetails);
									storeOpPatientIssueT.setItem(prescriptionDetails.getItem());
									prescriptionDetails.setRcQty(rcQty);
									hbt.update(prescriptionDetails);
									hbt.flush();
								}
								else
								{
									storeOpPatientIssueT.setInPatient(prescriptionDetails.getPrescription().getInpatient());
									storeOpPatientIssueT.setPrescription(prescriptionDetails);
									storeOpPatientIssueT.setItem(prescriptionDetails.getItem());
									prescriptionDetails.setRcQty(rcQty);
									hbt.update(prescriptionDetails);
									hbt.refresh(prescriptionDetails);
									hbt.flush();
								}
							}
				}}}*/
				// RC End
				hbt.update(patientPricriptionHeader);
				hbt.flush();
				Iterator itr = issQtyList.iterator();
				int i = 0;
				for (int j = 0; i < issQtyList.size(); j++)
				{
					if(issQtyList.get(i)!=null){//&& !issQtyList.get(i).equals("")
						BigDecimal totalQtyIssued;
						Integer requestedQty = 0;
						Integer rcQty = 0;
						StoreOpPatientIssueT storeOpPatientIssueT = new StoreOpPatientIssueT();
						int itemId=Integer.parseInt(""+itemIdList.get(i));
						List<StoreItemBatchStock> storeItemBatchStockList = session.createCriteria(StoreItemBatchStock.class)
								.add(Restrictions.eq("BatchNo", batchNumberList.get(i)))
								.add(Restrictions.eq("Item.Id", itemId))
								.add(Restrictions.eq("Hospital.Id", hospitalId))
								.add(Restrictions.eq("Department.Id",deptId)).list();
						storeOpPatientIssueT.setOpIssue(storeOpPatientIssueM);
						storeOpPatientIssueT.setInPatient(new Inpatient(inpatientId));
						MasStoreItem masStoreItem = new MasStoreItem();
						masStoreItem.setId(itemId);
						storeOpPatientIssueT.setItemIdRequire(masStoreItem);
						storeOpPatientIssueT.setItemIdIssue(masStoreItem);
						storeOpPatientIssueT.setBatchNo(batchNumberList.get(i));
						MasStoreBrand masStoreBrand = new MasStoreBrand();
						if(brandNameList.get(i)!=null && !brandNameList.get(i).equals("")){
							masStoreBrand.setId(Integer.parseInt("" + brandNameList.get(i)));
							storeOpPatientIssueT.setBrand(masStoreBrand);
						}
						if(rcList.get(i)!=null && !rcList.get(i).equals("") && rcList.get(i).equals("on")){
							if(rcQtyList.get(i)!=null && !rcQtyList.get(i).equals("")){
								rcStatus = "y";
								rcQty = Integer.parseInt(rcQtyList.get(i));
								storeOpPatientIssueT.setRcQty(rcQty);
						}}
						String str_date = (String) expiryDateList.get(i);
						if(!str_date.equals("")){
							Date expiryDateToInsert=HMSUtil.convertStringTypeDateToDateType(str_date);
							storeOpPatientIssueT.setExpiryDate(expiryDateToInsert);
						}
						BigDecimal issuedQtyFromJsp=new BigDecimal(""+0.0);
						if(issQtyList.get(i)!=null && !issQtyList.get(i).equals("")){
							issuedQtyFromJsp = new BigDecimal(""+ issQtyList.get(i));
							storeOpPatientIssueT.setQtyIssued(issuedQtyFromJsp);
						}
						patientPrescriptionDetailsList=session.createCriteria(PatientPrescriptionDetails.class)
								.add(Restrictions.eq("Prescription.Id",patientPrescriptionId ))
								.add(Restrictions.eq("Item.Id", itemId)).list();
						if (patientPrescriptionDetailsList != null && patientPrescriptionDetailsList.size() > 0)
						{
							PatientPrescriptionDetails prescriptionDetails=patientPrescriptionDetailsList.get(0);
							IpdMedicineIssueHeader ipdMedicineIssueHeader = new IpdMedicineIssueHeader();
							if(prescriptionDetails.getQtyIssued()!=null)
							{
								storeOpPatientIssueT.setInPatient(prescriptionDetails.getPrescription().getInpatient());
								storeOpPatientIssueT.setPrescription(prescriptionDetails);
								storeOpPatientIssueT.setItem(prescriptionDetails.getItem());
								int qtyIssued=prescriptionDetails.getQtyIssued();
								qtyIssued +=issuedQtyFromJsp.intValue();
								prescriptionDetails.setQtyIssued(qtyIssued);
								requestedQty = prescriptionDetails.getTotal();
								int total=prescriptionDetails.getTotal();
								total -=issuedQtyFromJsp.intValue();
								/*prescriptionDetails.setTotal(total);*/
								/*prescriptionDetails.setRcQty(rcQty);*/
								hbt.update(prescriptionDetails);
								ipdMedicineIssueHeader.setPatientPrescriptionDetails(prescriptionDetails);
								ipdMedicineIssueHeader.setIssuedQuantity(0);
								ipdMedicineIssueHeader.setStatus("i");
								ipdMedicineIssueHeader.setLastChgBy(user);
								ipdMedicineIssueHeader.setLastChgDate(new Date());
								ipdMedicineIssueHeader.setLastChgTime(time);
								//hbt.save(ipdMedicineIssueHeader);
								
								//hbt.flush();
							}
							else
							{
								storeOpPatientIssueT.setInPatient(prescriptionDetails.getPrescription().getInpatient());
								storeOpPatientIssueT.setPrescription(prescriptionDetails);
								storeOpPatientIssueT.setItem(prescriptionDetails.getItem());
								int qtyIssued =issuedQtyFromJsp.intValue();
								prescriptionDetails.setQtyIssued(qtyIssued);
								int total=prescriptionDetails.getTotal();
								requestedQty = prescriptionDetails.getTotal();
								total -=issuedQtyFromJsp.intValue();
								/*prescriptionDetails.setTotal(total);*/
								/*prescriptionDetails.setRcQty(rcQty);*/
								hbt.update(prescriptionDetails);
								hbt.refresh(prescriptionDetails);
								ipdMedicineIssueHeader.setPatientPrescriptionDetails(prescriptionDetails);
								ipdMedicineIssueHeader.setIssuedQuantity(0);
								ipdMedicineIssueHeader.setStatus("i");
								ipdMedicineIssueHeader.setLastChgBy(user);
								ipdMedicineIssueHeader.setLastChgDate(new Date());
								ipdMedicineIssueHeader.setLastChgTime(time);
								//hbt.save(ipdMedicineIssueHeader);
								//hbt.flush();
							}
						}
						BigDecimal nisQty = new BigDecimal(requestedQty);// Ranjesh: For NIS
						for(StoreItemBatchStock storeItemBatchStock:storeItemBatchStockList)
						{
							BigDecimal qtyIssued = (BigDecimal) storeItemBatchStock.getIssueQty();
							if (qtyIssued != null)
							{
								totalQtyIssued = qtyIssued.add(issuedQtyFromJsp);
							} else {
								totalQtyIssued = issuedQtyFromJsp;
							}
							BigDecimal closingStock = (BigDecimal) storeItemBatchStock.getClosingStock();
							//  Ranjesh: For NIS And Stock Managment Start
							if(closingStock.compareTo(issuedQtyFromJsp)>=0){
								closingStock = closingStock.subtract(issuedQtyFromJsp);
								
							}else{
								closingStock.subtract(closingStock);
							}
							//  Ranjesh: For NIS And Stock Managment End
							
							storeItemBatchStock.setIssueQty(totalQtyIssued);
							storeItemBatchStock.setClosingStock(closingStock);
							//hbt.save(storeIpIssueM);
							hbt.update(storeItemBatchStock);
							hbt.flush();
						}
						hbt.save(storeOpPatientIssueT);
						hbt.flush();
					}
					i++;
				}
				int serviceNoS=0;
				if(map.get("serviceNoS")!=null && !map.get("serviceNoS").toString().equals(""))
					serviceNoS =  Integer.parseInt(map.get("serviceNoS").toString());
				String hinNo=map.get("hinNoS").toString();
				int visitNumber=0;
				if(map.get("visitNumber")!=null && !map.get("visitNumber").toString().equals(""))
					visitNumber=Integer.parseInt(map.get("visitNumber").toString());
				List<PatientPrescriptionDetails> patientPrescriptionList=session.createCriteria(PatientPrescriptionDetails.class)
						.add(Restrictions.eq("Prescription.Id",patientPrescriptionId ))
						.add(Restrictions.ne("Total",0)).list();
				if(patientPrescriptionList.size()==0)
				{
					PatientPrescriptionHeader presHd = (PatientPrescriptionHeader)hbt.load(PatientPrescriptionHeader.class, patientPrescriptionId);
					presHd.setStatus("c");
					hbt.update(presHd);
					hbt.flush();
				}else{
					PatientPrescriptionHeader presHd = (PatientPrescriptionHeader)hbt.load(PatientPrescriptionHeader.class, patientPrescriptionId);
					presHd.setStatus("l");
					presHd.setRcStatus(rcStatus);
					hbt.update(presHd);
					hbt.flush();
				}
				succesfullyAdded = true;
				tx.commit();
			}
		} catch (Exception e) {
			succesfullyAdded=false;
			tx.rollback();
			e.printStackTrace();
		}
		mapData.put("flag", succesfullyAdded);
		mapData.put("inpatientId", inpatientId);
		mapData.put("rcStatus", rcStatus);
		return mapData;
	}
	
	public synchronized Map<String, Object> submitIPPatientStockDetails(Box box) {
		Map<String, Object> mapData = new HashMap<String, Object>();
		Session session = (Session) getSession();
		boolean succesfullyAdded = false;
		boolean headerSaveFlag = true;
		int hospitalId = (Integer) box.getInt("hospitalId");
		int deptId = box.getInt("deptId");
		MasHospital mh = new MasHospital();
		mh.setId(hospitalId);
		Users user = new Users();
		MasEmployee me = new MasEmployee();		
		int userId = box.getInt("userId");
		int empId = box.getInt("empId");	
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String time = (String) utilMap.get("currentTime");
		user.setId(userId);
		me.setId(empId);			
		int WpId = 0;		
		Properties properties = new Properties();
		URL resourcePath = Thread.currentThread().getContextClassLoader()
				.getResource("adt.properties");
		try {
			properties.load(resourcePath.openStream());			
			WpId = Integer.parseInt(properties.getProperty("WPDepId"));		
	
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	
		int patientPrescriptionId = 0;
		String rcStatus = "n";
		Integer inpatientId = 0;
		/*if(map.get("patientPrescriptionId") != null){
			patientPrescriptionId = (Integer)(map.get("patientPrescriptionId"));
		}*/
		/*Date dateToInsert=null;
		if((map.get("date")!=null)&&(!map.get("date").equals("")))
			dateToInsert = HMSUtil.convertStringTypeDateToDateType(date);*/
		String[] prescriptionDtIdArray = new String[0];
		if(!box.getString("selectedDetailsId").trim().equals(""))
		{
			prescriptionDtIdArray = box.getString("selectedDetailsId").split(",");
		}
		
		/*if(map.get("prescriptionDtIdList")!=null){
			prescriptionDtIdList = (List<Integer>)map.get("prescriptionDtIdList");
		}*/
		Transaction tx = null;
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {
			tx = session.beginTransaction();
			
				// by atul end
			   System.out.println("wardId"+box.getInt("wardId"));
			   List<PatientPrescriptionDetails> allDetailList = session.createCriteria(PatientPrescriptionDetails.class).createAlias("Prescription", "presc")
					.add(Restrictions.eq("presc.Department.Id", box.getInt("wardId")))
					.add(Restrictions.eq("presc.Status", "p").ignoreCase())
					.add(Restrictions.isNotNull("presc.Inpatient"))
					.createAlias("presc.Hospital","hospital").add(Restrictions.eq("hospital.Id", hospitalId))
					.add(Restrictions.isNull("QtyIssued"))
					.add(Restrictions.ne("Total",0))
					.list();
			   System.out.println("allDetailList.size"+allDetailList.size());
				int i = 1;
				boolean flag=true;
				String pNo = "";
				Map<String, Object> inMap = new HashMap<String, Object>();						
				inMap.put("tableObjectName", "PatientPrescriptionHeader");			
				inMap.put("isHospitalWise", "y");
				inMap.put("hospitalId", hospitalId);
				inMap.put("isYearly", "n");			
				inMap.put("isMonthly", "n");
				inMap.put("isPrefix", "y");
				inMap.put("transactionPrefixProperty", "transactionPrefixFordispensaryIssueNo");	
				pNo = HMSUtil.generateTransactionSequence(inMap, session, hbt);
				
				
				for(PatientPrescriptionDetails presDetails : allDetailList)
				{
					flag=true;
					System.out.println("prescriptionDtIdArray.length"+prescriptionDtIdArray.length);
					
					
				for (int j = 0; j < prescriptionDtIdArray.length; j++)
				{
				
					
					if(presDetails.getId() == Integer.parseInt(prescriptionDtIdArray[j].split("-")[0]))
					{
					
						presDetails.setQtyIssued(presDetails.getTotal());
				
					i++;
					flag=false;
				}
					}
				if(flag)
				{
					if(presDetails.getQtyIssued()==null)
					{
						presDetails.setQtyIssued(0);
					}
		
					
				}
				presDetails.getPrescription().setStatus("I");
				presDetails.getPrescription().setDispensaryIssueNo(pNo);
				presDetails.getPrescription().setIssuedBy(user);
				presDetails.getPrescription().setIssuedDate(new Date());
				hbt.update(presDetails.getPrescription());
				hbt.update(presDetails);
				hbt.flush();
					}
				int totalCount = box.getInt("hdb");
				System.out.println("totalCount"+totalCount);
				
				RcRequestHeader requestHeader = new RcRequestHeader();
				List<RcRequestDetails> rdDetailsList = new ArrayList<RcRequestDetails>();
				rdDetailsList= session.createCriteria(RcRequestDetails.class)
				.createAlias("Header", "h")
				/*.add(Restrictions.eq("Item.Id", box.getInt("itemId"+k)))*/
				.add(Restrictions.eq("h.Status", "u").ignoreCase())
				.add(Restrictions.eq("h.Department.Id", WpId)).list();
				
				if(rdDetailsList.size()>0)
				{
					requestHeader = rdDetailsList.get(0).getHeader();
				}
				/*else
				{
				
				}*/
				boolean rcDetailFlag = true;
				Map<Integer, Integer> itemMap = new HashMap<Integer, Integer>();
				boolean reqQtyFlag = true; 
				for(int k=1; k<=totalCount; k++)
				{   
					
					//for RC
					rcDetailFlag = true;
					if(box.getInt("rcQty"+k)!=0)
					{	
					
						if(rdDetailsList.size()>0)
						{
							for(RcRequestDetails rcrd: rdDetailsList)
							{
								if(rcrd.getItem().getId()==box.getInt("itemId"+k))
								{
														
									rcrd.setReqQty(rcrd.getReqQty().add(new BigDecimal(box.getDouble("rcQty"+k)).setScale(2, BigDecimal.ROUND_HALF_UP)));
									rcrd.setReasonForDemand(box.getString("remark"+k));
									hbt.save(rcrd);
									hbt.flush();
									rcDetailFlag = false;
									
								}
								
							}
							if(rcDetailFlag)
							{
								RcRequestDetails requestDetails = new RcRequestDetails();
								MasStoreItem msi = new MasStoreItem();
								msi.setId(box.getInt("itemId"+k));
								requestDetails.setItem(msi);
								requestDetails.setHeader(requestHeader);
								requestDetails.setReqQty(new BigDecimal(box.getDouble("rcQty"+k)).setScale(2, BigDecimal.ROUND_HALF_UP));
								requestDetails.setAvailableStock(new BigDecimal(box.getDouble("stockAvailable"+k)).setScale(2, BigDecimal.ROUND_HALF_UP));
								requestDetails.setWpStock(new BigDecimal(box.getDouble("stockAvailable"+k)).setScale(2, BigDecimal.ROUND_HALF_UP));
								requestDetails.setCdStock(new BigDecimal(box.getDouble("qtyDis"+k)).setScale(2, BigDecimal.ROUND_HALF_UP));
								requestDetails.setStoresStock(new BigDecimal(box.getDouble("qtyStock"+k)).setScale(2, BigDecimal.ROUND_HALF_UP));
								requestDetails.setReasonForDemand(box.getString("remark"+k));
								hbt.save(requestDetails);
								hbt.flush();
								
							}
						
						}
						else{
							
							
							
							if(headerSaveFlag)
							{
								String requestNo = "";
								Map<String, Object> adMap = new HashMap<String, Object>();
								 adMap.put("tableObjectName", "RcRequestHeader");			
									adMap.put("isHospitalWise", "n");
									adMap.put("hospitalId", hospitalId);
									adMap.put("isYearly", "y");			
									adMap.put("isMonthly", "n");
									adMap.put("isPrefix", "y");
								
									adMap.put("transactionPrefixProperty", "transactionPrefixForRCRequest");
									
									try{
										requestNo = HMSUtil.generateTransactionSequence(adMap, session, hbt);
									}catch(Exception e)
									{
										System.out.print("Exception in Method Save MR="+e);
									}
								   requestHeader.setRequestNo(requestNo);
								   
								MasDepartment ms = new  MasDepartment();
								ms.setId(WpId);
								requestHeader.setDepartment(ms);
								requestHeader.setRequestDate(new Date());
								requestHeader.setStatus("u");
								requestHeader.setHospital(mh);
								requestHeader.setReqestedBy(user);
								requestHeader.setRequestNo(requestNo);
								requestHeader.setLastChgBy(user);
								requestHeader.setLastChgDate(new Date());
								hbt.save(requestHeader);
								headerSaveFlag = false;
							}
						
						RcRequestDetails requestDetails = new RcRequestDetails();
						MasStoreItem msi = new MasStoreItem();
						msi.setId(box.getInt("itemId"+k));
						requestDetails.setItem(msi);
						requestDetails.setHeader(requestHeader);
						requestDetails.setReqQty(new BigDecimal(box.getDouble("rcQty"+k)).setScale(2, BigDecimal.ROUND_HALF_UP));
						requestDetails.setAvailableStock(new BigDecimal(box.getDouble("stockAvailable"+k)).setScale(2, BigDecimal.ROUND_HALF_UP));
						requestDetails.setWpStock(new BigDecimal(box.getDouble("stockAvailable"+k)).setScale(2, BigDecimal.ROUND_HALF_UP));
						requestDetails.setCdStock(new BigDecimal(box.getDouble("qtyDis"+k)).setScale(2, BigDecimal.ROUND_HALF_UP));
						requestDetails.setStoresStock(new BigDecimal(box.getDouble("qtyStock"+k)).setScale(2, BigDecimal.ROUND_HALF_UP));
						requestDetails.setReasonForDemand(box.getString("remark"+k));
						hbt.save(requestDetails);
						hbt.flush();						
						
						}
					}
					
					
					
					if(box.get("qtyIssued"+k)!=null && box.getDouble("qtyIssued"+k)!=0.0 && box.getDouble("qtyIssued"+k)!=0)
					{
						Date expiryDate = HMSUtil.getExpiryDateYYYYMMDD();	
						/*String expiryStr = HMSUtil.convertDateToStringFormat(expiryDate, "yyyy-MM-dd");*/
					//for updating medicine quantity in store item batch stock
					BigDecimal totalQtyIssued;
					Integer requestedQty = 0;
					Integer rcQty = 0;
					System.out.println("deptId"+deptId+"hospitalId"+hospitalId+"box.getInt(itemId+k)"+box.getInt("itemId"+k)+"box.getInt(batchNo+k)"+box.getInt("batchNo"+k));
					List<StoreItemBatchStock> storeItemBatchStockList = session.createCriteria(StoreItemBatchStock.class)
							.add(Restrictions.eq("BatchNo", box.getString("batchNo"+k)))
							.add(Restrictions.eq("Item.Id", box.getInt("itemId"+k)))
							.add(Restrictions.eq("Hospital.Id", hospitalId))
							.add(Restrictions.gt("ExpiryDate", expiryDate))
							.add(Restrictions.eq("Department.Id", deptId)).list();
					BigDecimal issuedQtyFromJsp = new BigDecimal(box.getDouble("qtyIssued"+k));
					for(StoreItemBatchStock storeItemBatchStock:storeItemBatchStockList)
					{
						BigDecimal qtyIssued = (BigDecimal) storeItemBatchStock.getIssueQty();
						if (qtyIssued != null)
						{
							totalQtyIssued = qtyIssued.add(issuedQtyFromJsp);
						} else {
							totalQtyIssued = issuedQtyFromJsp;
						}
						BigDecimal closingStock = (BigDecimal) storeItemBatchStock.getClosingStock();
					//  Ranjesh: For NIS And Stock Managment Start
						if(closingStock.compareTo(issuedQtyFromJsp)>=0){
							closingStock = closingStock.subtract(issuedQtyFromJsp);
							issuedQtyFromJsp = issuedQtyFromJsp.subtract(issuedQtyFromJsp);
						
						}else{
							closingStock = closingStock.subtract(closingStock);
							issuedQtyFromJsp = issuedQtyFromJsp.subtract(closingStock);
							
						}
						
					//  Ranjesh: For NIS And Stock Managment End
						storeItemBatchStock.setIssueQty(totalQtyIssued);
						storeItemBatchStock.setClosingStock(closingStock);
						// hbt.save(storeIpIssueM);
						hbt.update(storeItemBatchStock);
						hbt.flush();
						
					}
					//for inserting issued medicine quantity in department_medicine_issue
					
			
					
				
					DepartmentMedicineIssue dmi = new DepartmentMedicineIssue();
				
						MasStoreItem item = new MasStoreItem();
						item.setId(box.getInt("itemId"+k));
						
						 dmi = new DepartmentMedicineIssue();
						dmi.setItem(item);
						MasDepartment department = new MasDepartment();
						department.setId(box.getInt("wardId"));
						dmi.setQtyRequired(new BigDecimal(box.getDouble("qtyPrescription"+k)).setScale(2, BigDecimal.ROUND_HALF_UP));
						dmi.setQtyIssued(new BigDecimal(box.getDouble("qtyIssued"+k)).setScale(2, BigDecimal.ROUND_HALF_UP));
						dmi.setQtyRemaining(new BigDecimal(box.getDouble("qtyIssued"+k)).setScale(2, BigDecimal.ROUND_HALF_UP));
						dmi.setDepartment(department);
						dmi.setStoreItemBatchStock(storeItemBatchStockList.get(0));;
						dmi.setIssueDate(new Date());
						dmi.setLastChgBy(user);
						dmi.setLastChgDate(new Date());
						dmi.setLastChgTime(time);
						dmi.setDispensaryIssueNo(pNo);
						dmi.setRemarks(box.getString("remark"+k));
						hbt.save(dmi);
						hbt.flush();
				
					
					
				}
					
				
				}
				
		
				succesfullyAdded = true;
				tx.commit();
			/*}*/
		} catch (Exception e) {
			succesfullyAdded=false;
			tx.rollback();
			e.printStackTrace();
		}
		mapData.put("flag", succesfullyAdded);
		mapData.put("inpatientId", inpatientId);
		mapData.put("rcStatus", rcStatus);
		return mapData;
	}
	
	public synchronized Map<String, Object> submitIPPatientStockDetailsPartial(Box box) {
		Map<String, Object> mapData = new HashMap<String, Object>();
		Session session = (Session) getSession();
		boolean succesfullyAdded = false;
		boolean headerSaveFlag = true;
		int hospitalId = (Integer) box.getInt("hospitalId");
		int deptId = box.getInt("deptId");
		MasHospital mh = new MasHospital();
		mh.setId(hospitalId);
		Users user = new Users();
		MasEmployee me = new MasEmployee();		
		int userId = box.getInt("userId");
		int empId = box.getInt("empId");	
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String time = (String) utilMap.get("currentTime");
		user.setId(userId);
		me.setId(empId);			
		int WpId = 0;		
		Properties properties = new Properties();
		URL resourcePath = Thread.currentThread().getContextClassLoader()
				.getResource("adt.properties");
		try {
			properties.load(resourcePath.openStream());			
			WpId = Integer.parseInt(properties.getProperty("WPDepId"));		
	
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	
		int patientPrescriptionId = 0;
		String rcStatus = "n";
		Integer inpatientId = 0;
		/*if(map.get("patientPrescriptionId") != null){
			patientPrescriptionId = (Integer)(map.get("patientPrescriptionId"));
		}*/
		/*Date dateToInsert=null;
		if((map.get("date")!=null)&&(!map.get("date").equals("")))
			dateToInsert = HMSUtil.convertStringTypeDateToDateType(date);*/
		String[] prescriptionDtIdArray = new String[0];
		if(!box.getString("selectedDetailsId").trim().equals(""))
		{
			prescriptionDtIdArray = box.getString("selectedDetailsId").split(",");
		}
		
		/*if(map.get("prescriptionDtIdList")!=null){
			prescriptionDtIdList = (List<Integer>)map.get("prescriptionDtIdList");
		}*/
		Transaction tx = null;
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {
			tx = session.beginTransaction();
			
				// by atul end
			   System.out.println("wardId"+box.getInt("wardId"));
			   List<PatientPrescriptionDetails> allDetailList = session.createCriteria(PatientPrescriptionDetails.class).createAlias("Prescription", "presc")
					.add(Restrictions.eq("presc.Department.Id", box.getInt("wardId")))
					.add(Restrictions.eq("presc.Status", "i").ignoreCase())
					.add(Restrictions.isNotNull("presc.Inpatient"))
					.createAlias("presc.Hospital","hospital").add(Restrictions.eq("hospital.Id", hospitalId))
					/*.add(Restrictions.isNull("QtyIssued"))
					.add(Restrictions.ne("Total",0))*/
					.list();
			   System.out.println("allDetailList.size"+allDetailList.size());
				int i = 1;
				boolean flag=true;
				String pNo = "";
				String issueNoString= "";
				Map<String, Object> inMap = new HashMap<String, Object>();						
				inMap.put("tableObjectName", "PatientPrescriptionHeader");			
				inMap.put("isHospitalWise", "y");
				inMap.put("hospitalId", hospitalId);
				inMap.put("isYearly", "n");			
				inMap.put("isMonthly", "n");
				inMap.put("isPrefix", "y");
				inMap.put("transactionPrefixProperty", "transactionPrefixFordispensaryIssueNo");	
				pNo = HMSUtil.generateTransactionSequence(inMap, session, hbt);
				
				
				for(PatientPrescriptionDetails presDetails : allDetailList)
				{
					flag=true;
					System.out.println("prescriptionDtIdArray.length"+prescriptionDtIdArray.length);
					
					
				for (int j = 0; j < prescriptionDtIdArray.length; j++)
				{
				
					
					if(presDetails.getId() == Integer.parseInt(prescriptionDtIdArray[j].split("-")[0]))
					{
					
						presDetails.setQtyIssued(presDetails.getTotal());
				
					i++;
					flag=false;
				}
					}
				if(flag)
				{
					if(presDetails.getQtyIssued()==null)
					{
						presDetails.setQtyIssued(0);
					}
		
					
				}
				presDetails.getPrescription().setStatus("I");
				issueNoString +=", '" + presDetails.getPrescription().getDispensaryIssueNo()+"'";
				presDetails.getPrescription().setDispensaryIssueNo(pNo);
				presDetails.getPrescription().setIssuedBy(user);
				presDetails.getPrescription().setIssuedDate(new Date());
				hbt.update(presDetails.getPrescription());
				hbt.update(presDetails);
				hbt.flush();
					}
				int totalCount = box.getInt("hdb");
				System.out.println("totalCount"+totalCount);
				
				RcRequestHeader requestHeader = new RcRequestHeader();
				List<RcRequestDetails> rdDetailsList = new ArrayList<RcRequestDetails>();
				rdDetailsList= session.createCriteria(RcRequestDetails.class)
				.createAlias("Header", "h")
				/*.add(Restrictions.eq("Item.Id", box.getInt("itemId"+k)))*/
				.add(Restrictions.eq("h.Status", "u").ignoreCase())
				.add(Restrictions.eq("h.Department.Id", WpId)).list();
				
				if(rdDetailsList.size()>0)
				{
					requestHeader = rdDetailsList.get(0).getHeader();
				}
				/*else
				{
				
				}*/
				boolean rcDetailFlag = true;
				Map<Integer, Integer> itemMap = new HashMap<Integer, Integer>();
				boolean reqQtyFlag = true; 
				for(int k=1; k<=totalCount; k++)
				{   
					
					//for RC
					rcDetailFlag = true;
					if(box.getInt("rcQty"+k)!=0)
					{	
					
						if(rdDetailsList.size()>0)
						{
							for(RcRequestDetails rcrd: rdDetailsList)
							{
								if(rcrd.getItem().getId()==box.getInt("itemId"+k))
								{
														
									rcrd.setReqQty(rcrd.getReqQty().add(new BigDecimal(box.getDouble("rcQty"+k)).setScale(2, BigDecimal.ROUND_HALF_UP)));
									rcrd.setReasonForDemand(box.getString("remark"+k));
									hbt.save(rcrd);
									hbt.flush();
									rcDetailFlag = false;
									
								}
								
							}
							if(rcDetailFlag)
							{
								RcRequestDetails requestDetails = new RcRequestDetails();
								MasStoreItem msi = new MasStoreItem();
								msi.setId(box.getInt("itemId"+k));
								requestDetails.setItem(msi);
								requestDetails.setHeader(requestHeader);
								requestDetails.setReqQty(new BigDecimal(box.getDouble("rcQty"+k)).setScale(2, BigDecimal.ROUND_HALF_UP));
								requestDetails.setAvailableStock(new BigDecimal(box.getDouble("stockAvailable"+k)).setScale(2, BigDecimal.ROUND_HALF_UP));
								requestDetails.setWpStock(new BigDecimal(box.getDouble("stockAvailable"+k)).setScale(2, BigDecimal.ROUND_HALF_UP));
								requestDetails.setCdStock(new BigDecimal(box.getDouble("qtyDis"+k)).setScale(2, BigDecimal.ROUND_HALF_UP));
								requestDetails.setStoresStock(new BigDecimal(box.getDouble("qtyStock"+k)).setScale(2, BigDecimal.ROUND_HALF_UP));
								requestDetails.setReasonForDemand(box.getString("remark"+k));
								hbt.save(requestDetails);
								hbt.flush();
								
							}
						
						}
						else{
							
							
							
							if(headerSaveFlag)
							{
								String requestNo = "";
								Map<String, Object> adMap = new HashMap<String, Object>();
								 adMap.put("tableObjectName", "RcRequestHeader");			
									adMap.put("isHospitalWise", "n");
									adMap.put("hospitalId", hospitalId);
									adMap.put("isYearly", "y");			
									adMap.put("isMonthly", "n");
									adMap.put("isPrefix", "y");
								
									adMap.put("transactionPrefixProperty", "transactionPrefixForRCRequest");
									
									try{
										requestNo = HMSUtil.generateTransactionSequence(adMap, session, hbt);
									}catch(Exception e)
									{
										System.out.print("Exception in Method Save MR="+e);
									}
								   requestHeader.setRequestNo(requestNo);
								   
								MasDepartment ms = new  MasDepartment();
								ms.setId(WpId);
								requestHeader.setDepartment(ms);
								requestHeader.setRequestDate(new Date());
								requestHeader.setStatus("u");
								requestHeader.setHospital(mh);
								requestHeader.setReqestedBy(user);
								requestHeader.setRequestNo(requestNo);
								requestHeader.setLastChgBy(user);
								requestHeader.setLastChgDate(new Date());
								hbt.save(requestHeader);
								headerSaveFlag = false;
							}
						
						RcRequestDetails requestDetails = new RcRequestDetails();
						MasStoreItem msi = new MasStoreItem();
						msi.setId(box.getInt("itemId"+k));
						requestDetails.setItem(msi);
						requestDetails.setHeader(requestHeader);
						requestDetails.setReqQty(new BigDecimal(box.getDouble("rcQty"+k)).setScale(2, BigDecimal.ROUND_HALF_UP));
						requestDetails.setAvailableStock(new BigDecimal(box.getDouble("stockAvailable"+k)).setScale(2, BigDecimal.ROUND_HALF_UP));
						requestDetails.setWpStock(new BigDecimal(box.getDouble("stockAvailable"+k)).setScale(2, BigDecimal.ROUND_HALF_UP));
						requestDetails.setCdStock(new BigDecimal(box.getDouble("qtyDis"+k)).setScale(2, BigDecimal.ROUND_HALF_UP));
						requestDetails.setStoresStock(new BigDecimal(box.getDouble("qtyStock"+k)).setScale(2, BigDecimal.ROUND_HALF_UP));
						requestDetails.setReasonForDemand(box.getString("remark"+k));
						hbt.save(requestDetails);
						hbt.flush();						
						
						}
					}
					
					
					
					if(box.get("qtyIssued"+k)!=null && box.getDouble("qtyIssued"+k)!=0.0 && box.getDouble("qtyIssued"+k)!=0)
					{
						Date expiryDate = HMSUtil.getExpiryDateYYYYMMDD();	
						/*String expiryStr = HMSUtil.convertDateToStringFormat(expiryDate, "yyyy-MM-dd");*/
					//for updating medicine quantity in store item batch stock
					BigDecimal totalQtyIssued;
					Integer requestedQty = 0;
					Integer rcQty = 0;
					System.out.println("deptId"+deptId+"hospitalId"+hospitalId+"box.getInt(itemId+k)"+box.getInt("itemId"+k)+"box.getInt(batchNo+k)"+box.getInt("batchNo"+k));
					List<StoreItemBatchStock> storeItemBatchStockList = session.createCriteria(StoreItemBatchStock.class)
							.add(Restrictions.eq("BatchNo", box.getString("batchNo"+k)))
							.add(Restrictions.eq("Item.Id", box.getInt("itemId"+k)))
							.add(Restrictions.eq("Hospital.Id", hospitalId))
							.add(Restrictions.gt("ExpiryDate", expiryDate))
							.add(Restrictions.eq("Department.Id", deptId)).list();
					BigDecimal issuedQtyFromJsp = new BigDecimal(box.getDouble("qtyIssued"+k));
					for(StoreItemBatchStock storeItemBatchStock:storeItemBatchStockList)
					{
						BigDecimal qtyIssued = (BigDecimal) storeItemBatchStock.getIssueQty();
						if (qtyIssued != null)
						{
							totalQtyIssued = qtyIssued.add(issuedQtyFromJsp);
						} else {
							totalQtyIssued = issuedQtyFromJsp;
						}
						BigDecimal closingStock = (BigDecimal) storeItemBatchStock.getClosingStock();
					//  Ranjesh: For NIS And Stock Managment Start
						if(closingStock.compareTo(issuedQtyFromJsp)>=0){
							closingStock = closingStock.subtract(issuedQtyFromJsp);
							issuedQtyFromJsp = issuedQtyFromJsp.subtract(issuedQtyFromJsp);
						
						}else{
							closingStock = closingStock.subtract(closingStock);
							issuedQtyFromJsp = issuedQtyFromJsp.subtract(closingStock);
							
						}
						
					//  Ranjesh: For NIS And Stock Managment End
						storeItemBatchStock.setIssueQty(totalQtyIssued);
						storeItemBatchStock.setClosingStock(closingStock);
						// hbt.save(storeIpIssueM);
						hbt.update(storeItemBatchStock);
						hbt.flush();
						
					}
					//for inserting issued medicine quantity in department_medicine_issue
					
			
					
				
					DepartmentMedicineIssue dmi = new DepartmentMedicineIssue();
				
						MasStoreItem item = new MasStoreItem();
						item.setId(box.getInt("itemId"+k));
						
						 dmi = new DepartmentMedicineIssue();
						dmi.setItem(item);
						MasDepartment department = new MasDepartment();
						department.setId(box.getInt("wardId"));
						dmi.setQtyRequired(new BigDecimal(box.getDouble("qtyPrescription"+k)).setScale(2, BigDecimal.ROUND_HALF_UP));
						dmi.setQtyIssued(new BigDecimal(box.getDouble("qtyIssued"+k)).setScale(2, BigDecimal.ROUND_HALF_UP));
						dmi.setQtyRemaining(new BigDecimal(box.getDouble("qtyIssued"+k)).setScale(2, BigDecimal.ROUND_HALF_UP));
						dmi.setDepartment(department);
						dmi.setStoreItemBatchStock(storeItemBatchStockList.get(0));;
						dmi.setIssueDate(new Date());
						dmi.setLastChgBy(user);
						dmi.setLastChgDate(new Date());
						dmi.setLastChgTime(time);
						dmi.setDispensaryIssueNo(pNo);
						dmi.setRemarks(box.getString("remark"+k));
						hbt.save(dmi);
						hbt.flush();
				
					
					
				}
					
				
				}
		// for updating issue no in DepartmentMedicineIssueTable
	
				
			
			   session.createQuery("update DepartmentMedicineIssue dmi set dmi.DispensaryIssueNo='"+pNo+"' Where dmi.DispensaryIssueNo in ("+issueNoString.substring(1)+") and dmi.Department.Id="+box.getInt("wardId")).executeUpdate(); 
			   
			
				
		
				succesfullyAdded = true;
				tx.commit();
			/*}*/
		} catch (Exception e) {
			succesfullyAdded=false;
			tx.rollback();
			e.printStackTrace();
		}
		mapData.put("flag", succesfullyAdded);
		mapData.put("inpatientId", inpatientId);
		mapData.put("rcStatus", rcStatus);
		return mapData;
	}



	@Override
	public boolean updateDefective(Box box) {
		boolean flag = false;
		int headerId = box.getInt(ENTRY_ID);

		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");

		try {
			StoreDefectiveDrugM storeDefectiveDrugM = (StoreDefectiveDrugM)hbt.load(StoreDefectiveDrugM.class, headerId);

			MasEmployee authorisedBy=new MasEmployee();
			authorisedBy.setId(box.getInt(AUTHORISED_BY));
			storeDefectiveDrugM.setAuthorisedBy(authorisedBy);

			MasEmployee enterdBy=new MasEmployee();
			enterdBy.setId(box.getInt(ENTERD_BY));
			storeDefectiveDrugM.setEnteredBy(enterdBy);

			storeDefectiveDrugM.setReason(box.getString(REASON));

			storeDefectiveDrugM.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(date));
			storeDefectiveDrugM.setLastChgTime(time);
			storeDefectiveDrugM.setStatus("y");

			storeDefectiveDrugM.setLastChgBy(box.getString("userName"));

			hbt.update(storeDefectiveDrugM);

			Vector detailsIds = box.getVector(DETAIL_ID);
			Vector defectQty = box.getVector(QUANTITY_RECEIVED);
			Vector batchIds = box.getVector(BATCH_ID);
			for (int i = 0; i < detailsIds.size(); i++) {
				int detailId = Integer.parseInt((String)detailsIds.get(i));
				BigDecimal qty =  new BigDecimal((String)defectQty.get(i));
				int batchId = Integer.parseInt((String)batchIds.get(i));
				BigDecimal existingQty =  new BigDecimal(0);

				StoreDefectiveDrugT storeDefectiveDrugT =(StoreDefectiveDrugT)hbt.load(StoreDefectiveDrugT.class,detailId);
				existingQty = storeDefectiveDrugT.getDefectQty();

				storeDefectiveDrugT.setDefectQty(qty);
				hbt.update(storeDefectiveDrugT);

				StoreItemBatchStock batchStock = (StoreItemBatchStock)hbt.load(StoreItemBatchStock.class, batchId);
				batchStock.setClosingStock(batchStock.getClosingStock().subtract(qty.subtract(existingQty)));
				hbt.update(batchStock);
			}
			flag=true;
		} catch (DataAccessException e) {
			e.printStackTrace();
		}

		return flag;
	}


	public Map<String, Object> generateActualStockSactionDetailsExcel(Map<String,Object> map)
	{
		String hospitalName = null;
		String query=null;
		int hospitalId=0;
		int deptId=0;
		String deptName = null;
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Session session = getSession();
		List storeItmBatchList=new ArrayList();
		if(map.get("hospitalName") != null){
			hospitalName = (String)map.get("hospitalName");
		}
		if(map.get("hospitalId") != null){
			hospitalId = (Integer)map.get("hospitalId");
		}
		if(map.get("deptName") != null){
			deptName = (String)map.get("deptName");
		}
		if(map.get("deptId") != null){
			deptId = (Integer)map.get("deptId");
		}
		if(map.get("query") != null){
			query = (String)map.get("query");
		}
		String qry="select sibs.item_id,mas_store_item.nomenclature,mas_store_item.pvms_no,sibs.batch_no,sibs.expiry_date," +
		"(sum(nvl(sibs.opening_balance_qty,0))+ sum(nvl(sibs.received_qty,0))- sum(nvl(sibs.issue_qty,0))) as Stock_qty," +
		"mas_store_section.section_name from mas_store_item mas_store_item left outer join store_item_batch_stock  sibs on " +
		"mas_store_item.item_id=sibs.item_id left outer join  mas_store_section mas_store_section on mas_store_item.section_id = mas_store_section.section_id" +
		" where sibs.department_id = " +
		deptId+" and  mas_store_item.Status='y' " +query +
		" group by sibs.item_id,mas_store_item.nomenclature, mas_store_item.pvms_no,sibs.batch_no,sibs.expiry_date,mas_store_item.pvms_no,sibs.batch_no,sibs.expiry_date," +
		"mas_store_section.section_name Order By mas_store_item.pvms_no,mas_store_item.nomenclature";

		// add by javed khan on 23-10-2013
		
		Query queryHiber =(Query)session.createSQLQuery(qry);
		if (map.get("section") != null && (!map.get("section").equals(""))) {
			queryHiber = queryHiber.setParameter("section",map.get("section"))	;	
				}

				if ((map.get("pvms") != null && (!map.get("pvms").equals("")))) {
					queryHiber =queryHiber.setParameter("pvms", map.get("pvms"));
				}
				
		//storeItmBatchList=session.createSQLQuery(qry).list();
				storeItmBatchList =  (List) queryHiber.list();
		// add by javed khan on 23-10-2013
					// add by javed khan on 23-10-2013
		Iterator itr=storeItmBatchList.iterator();
		try
		{

			HSSFWorkbook wb = new HSSFWorkbook();
			HSSFSheet sheet = wb.createSheet("Stock Status Report");
			//sheet.setColumnWidth((short) 1, (short)10);
			// Create a new font and alter it.

			HSSFFont font = wb.createFont();
			font.setFontHeightInPoints((short) 10);
			font.setFontName(HSSFFont.FONT_ARIAL);
			font.setColor((short) 80);
			font.setItalic(false);
			font.setStrikeout(false);
			font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);

			HSSFFont font1 = wb.createFont();
			font1.setFontHeightInPoints((short) 12);
			font1.setFontName(HSSFFont.FONT_ARIAL);
			font1.setColor((short) 80);
			font1.setItalic(false);
			font1.setStrikeout(false);
			font1.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);

			HSSFFont font2 = wb.createFont();
			font2.setFontHeightInPoints((short) 9);
			font2.setFontName(HSSFFont.FONT_ARIAL);
			font2.setColor((short) 80);
			font2.setItalic(false);
			font2.setStrikeout(false);
			font2.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);

			// Fonts are set into a style so create a new one to
			// use.
			HSSFCellStyle style = wb.createCellStyle();
			style.setFont(font);
			style.setAlignment((short) 2);

			HSSFCellStyle style1 = wb.createCellStyle();
			style1.setFont(font1);
			style1.setAlignment((short) 2);

			HSSFCellStyle style2 = wb.createCellStyle();
			style2.setFont(font2);
			style2.setAlignment((short) 2);

			//style1.setLocked(true);


			HSSFRow row2 = sheet.createRow((short) 2);
			HSSFCell cell20 = row2.createCell((short) 2);
			cell20.setCellValue(new HSSFRichTextString(hospitalName));
			cell20.setCellStyle(style1);
			sheet.addMergedRegion(new Region(2, (short) 2, 2, (short) 4));

			HSSFRow row3 = sheet.createRow((short) 3);
			HSSFCell cell30 = row3.createCell((short) 2);
			cell30.setCellValue(new HSSFRichTextString("Stock Status Report"));
			cell30.setCellStyle(style1);
			sheet.addMergedRegion(new Region(3, (short) 2, 3, (short) 4));

			//HSSFCell cell32 = row3.createCell((short) 7);
			//cell32.setCellValue(new HSSFRichTextString("25/12/2011"));

			HSSFRow row4 = sheet.createRow((short) 4);
			HSSFCell cell40 = row4.createCell((short) 1);
			cell40.setCellStyle(style1);
			cell40.setCellValue(new HSSFRichTextString(""));
			sheet.addMergedRegion(new Region(4, (short) 0, 4, (short) 7));

			// =====Heading Row Start===========================
			HSSFRow headingRow1 = sheet.createRow((short) 5);

			HSSFCell cell70 = headingRow1.createCell((short) 0);
			cell70.setCellValue(new HSSFRichTextString("SR. NO."));
			cell70.setCellStyle(style2);
			sheet.autoSizeColumn((short) 0);

			HSSFCell cell71 = headingRow1.createCell((short) 1);
			cell71.setCellValue(new HSSFRichTextString("PVMS/NIV No."));
			cell71.setCellStyle(style2);
			sheet.autoSizeColumn((short) 1);

			HSSFCell cell72 = headingRow1.createCell((short) 2);
			cell72.setCellValue(new HSSFRichTextString("       Nomenclature                "));
			cell72.setCellStyle(style2);
			sheet.autoSizeColumn((short) 2);

			HSSFCell cell73 = headingRow1.createCell((short) 3);
			cell73.setCellValue(new HSSFRichTextString(" Batch No. "));
			cell73.setCellStyle(style2);
			sheet.autoSizeColumn((short) 3);

			HSSFCell cell74 = headingRow1.createCell((short) 4);
			cell74.setCellValue(new HSSFRichTextString(" Expiry Date "));
			cell74.setCellStyle(style2);
			sheet.autoSizeColumn((short) 4);

			HSSFCell cell75 = headingRow1.createCell((short) 5);
			cell75.setCellStyle(style);
			cell75.setCellValue(new HSSFRichTextString(" Stock Qty "));
			cell75.setCellStyle(style2);
			sheet.autoSizeColumn((short) 5);




			int row=6;
			int i=1;
			while(itr.hasNext())
			{
				Object[] pair = (Object[]) itr.next();

				String pvms_no=pair[2].toString();
				String nomenclature=pair[1].toString();
				String batch_no=pair[3].toString();
				String section_name=pair[6].toString();
				String expiry_date="";
				if(pair[4] != null && !pair[4].equals("")){
				 expiry_date=pair[4].toString();
				}
				else{
					expiry_date="";
				}
				float stock_qty=Float.parseFloat(pair[5].toString());

				HSSFRow detailRow = sheet.createRow((short) row);

				HSSFCell cell90 = detailRow.createCell((short) 0);
				cell90.setCellValue(i);

				HSSFCell cell91 = detailRow.createCell((short) 1);
				cell91.setCellValue(new HSSFRichTextString(pvms_no));


				HSSFCell cell92 = detailRow.createCell((short) 2);
				cell92.setCellValue(new HSSFRichTextString(nomenclature));

				HSSFCell cell93 = detailRow.createCell((short) 3);
				cell93.setCellValue(new HSSFRichTextString(batch_no));

				HSSFCell cell94 = detailRow.createCell((short) 4);
				cell94.setCellValue(new HSSFRichTextString(expiry_date));

				HSSFCell cell95 = detailRow.createCell((short) 5);
				cell95.setCellValue(stock_qty);



				i++;
				row = row + 1;
			}

			dataMap.put("wb", wb);
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return dataMap;
	}

	public Map<String, Object> printDispensaryReceiveItemReportExcel(Map<String,Object> map)
	{
		String hospitalName = null;
		int hospitalId=0;
		int deptId=0;
		String from_date = null;
		String to_date = null;
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Session session = getSession();
		List storeItmBatchList=new ArrayList();
		if(map.get("hospitalName") != null){
			hospitalName = (String)map.get("hospitalName");
		}
		if(map.get("hospitalId") != null){
			hospitalId = (Integer)map.get("hospitalId");
		}
		if(map.get("from_date") != null){
			from_date = (String)map.get("from_date");
		}
		if(map.get("to_date") != null){
			to_date = (String)map.get("to_date");
		}
		if(map.get("deptId") != null){
			deptId = (Integer)map.get("deptId");
		}

		String qry="SELECT ms.issue_no,ms.issue_date,msi.pvms_no,msu.unit_name,msi.nomenclature as item_name,ts.qty_request,ts.item_issued," +
		"ts.batch_no,ts.expiry_date,ts.qty_issued,ts.ack_date,ts.manufacture_date FROM store_issue_m ms left outer join store_issue_t ts " +
		"on ms.id= ts.issue_m_id left outer join mas_department md on ms.department_id= md.department_id left outer join mas_department md1 " +
		"on ms.to_store= md1.department_id  left outer join mas_store_item msi on ts.item_id=msi.item_id left outer join mas_store_item_conversion msic " +
		"on msic.item_conversion_id=msi.item_conversion_id left outer join mas_store_unit msu on msu.unit_id=msic.issue_unit_id left outer join mas_hospital mh " +
		"on ms.hospital_id=ms.hospital_id where  ms.issue_type='i' and ms.status='p' and ts.ack_date is not null and ms.issue_date " +
		"between to_date('"+from_date+"','dd/mm/yyyy') and to_date('"+to_date+"','dd/mm/yyyy') and ms.to_store="+deptId+" and ms.hospital_id ="+hospitalId+" group by msi.nomenclature," +
		"msi.pvms_no,batch_no,ts.item_issued,issue_date,ts.ack_date,ts.expiry_date,msu.unit_name,issue_no,ts.qty_request,ts.qty_issued,ts.manufacture_date " +
		"Order By ms.issue_no,issue_date,ts.ack_date,item_name,batch_no";
		storeItmBatchList=session.createSQLQuery(qry).list();
		Iterator itr=storeItmBatchList.iterator();
		try
		{

			HSSFWorkbook wb = new HSSFWorkbook();
			HSSFSheet sheet = wb.createSheet("Received Item Details Report");
			//sheet.setColumnWidth((short) 1, (short)10);
			// Create a new font and alter it.

			HSSFFont font = wb.createFont();
			font.setFontHeightInPoints((short) 10);
			font.setFontName(HSSFFont.FONT_ARIAL);
			font.setColor((short) 85);
			font.setItalic(false);
			font.setStrikeout(false);
			font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);

			HSSFFont font1 = wb.createFont();
			font1.setFontHeightInPoints((short) 12);
			font1.setFontName(HSSFFont.FONT_ARIAL);
			font1.setColor((short) 85);
			font1.setItalic(false);
			font1.setStrikeout(false);
			font1.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);

			HSSFFont font2 = wb.createFont();
			font2.setFontHeightInPoints((short) 9);
			font2.setFontName(HSSFFont.FONT_ARIAL);
			font2.setColor((short) 85);
			font2.setItalic(false);
			font2.setStrikeout(false);
			font2.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);

			// Fonts are set into a style so create a new one to
			// use.
			HSSFCellStyle style = wb.createCellStyle();
			style.setFont(font);
			style.setAlignment((short) 2);

			HSSFCellStyle style1 = wb.createCellStyle();
			style1.setFont(font1);
			style1.setAlignment((short) 2);

			HSSFCellStyle style2 = wb.createCellStyle();
			style2.setFont(font2);
			style2.setAlignment((short) 2);

			//style1.setLocked(true);


			HSSFRow row2 = sheet.createRow((short) 1);
			HSSFCell cell20 = row2.createCell((short) 2);
			cell20.setCellValue(new HSSFRichTextString(hospitalName));
			cell20.setCellStyle(style1);
			sheet.addMergedRegion(new Region(1, (short) 2, 1, (short) 5));

			HSSFRow row3 = sheet.createRow((short) 2);
			HSSFCell cell30 = row3.createCell((short) 2);
			cell30.setCellValue(new HSSFRichTextString("Received Item Details Report"));
			cell30.setCellStyle(style1);
			sheet.addMergedRegion(new Region(2, (short) 2, 2, (short) 5));

			//HSSFCell cell32 = row3.createCell((short) 7);
			//cell32.setCellValue(new HSSFRichTextString("25/12/2011"));
			HSSFRow row31 = sheet.createRow((short) 3);
			HSSFCell cell31 = row31.createCell((short) 2);
			cell31.setCellValue(new HSSFRichTextString("Receive       From"));
			cell31.setCellStyle(style2);
			HSSFCell cell32 = row31.createCell((short) 3);
			cell32.setCellValue(new HSSFRichTextString(from_date));
			cell32.setCellStyle(style2);
			HSSFCell cell33 = row31.createCell((short) 5);
			cell33.setCellValue(new HSSFRichTextString("To  "));
			cell33.setCellStyle(style2);
			HSSFCell cell34 = row31.createCell((short) 6);
			cell34.setCellValue(new HSSFRichTextString(to_date));
			cell34.setCellStyle(style2);



			HSSFRow row4 = sheet.createRow((short) 4);
			HSSFCell cell40 = row4.createCell((short) 1);
			cell40.setCellStyle(style1);
			cell40.setCellValue(new HSSFRichTextString(""));
			sheet.addMergedRegion(new Region(4, (short) 0, 4, (short) 7));

			// =====Heading Row Start===========================
			HSSFRow headingRow1 = sheet.createRow((short) 5);

			HSSFCell cell70 = headingRow1.createCell((short) 0);
			cell70.setCellValue(new HSSFRichTextString("Sl No."));
			cell70.setCellStyle(style2);
			sheet.autoSizeColumn((short) 0);

			HSSFCell cell71 = headingRow1.createCell((short) 1);
			cell71.setCellValue(new HSSFRichTextString("PVMS/NIV No."));
			cell71.setCellStyle(style2);
			sheet.autoSizeColumn((short) 1);

			HSSFCell cell72 = headingRow1.createCell((short) 2);
			cell72.setCellValue(new HSSFRichTextString("       Nomenclature            "));
			cell72.setCellStyle(style2);
			sheet.autoSizeColumn((short) 2);

			HSSFCell cell73 = headingRow1.createCell((short) 3);
			cell73.setCellValue(new HSSFRichTextString("   AU   "));
			cell73.setCellStyle(style2);
			sheet.autoSizeColumn((short) 3);

			HSSFCell cell74 = headingRow1.createCell((short) 4);
			cell74.setCellValue(new HSSFRichTextString(" Batch No  "));
			cell74.setCellStyle(style2);
			sheet.autoSizeColumn((short) 4);

			HSSFCell cell75 = headingRow1.createCell((short) 5);
			cell75.setCellStyle(style);
			cell75.setCellValue(new HSSFRichTextString(" Receive Date "));
			cell75.setCellStyle(style2);
			sheet.autoSizeColumn((short) 5);

			HSSFCell cell76 = headingRow1.createCell((short) 6);
			cell76.setCellStyle(style);
			cell76.setCellValue(new HSSFRichTextString("  CIV No  "));
			cell76.setCellStyle(style2);
			sheet.autoSizeColumn((short) 6);

			HSSFCell cell77 = headingRow1.createCell((short) 7);
			cell77.setCellStyle(style);
			cell77.setCellValue(new HSSFRichTextString("    DOM      "));
			cell77.setCellStyle(style2);
			sheet.autoSizeColumn((short) 7);

			HSSFCell cell78 = headingRow1.createCell((short) 8);
			cell78.setCellStyle(style);
			cell78.setCellValue(new HSSFRichTextString("   DOE    "));
			cell78.setCellStyle(style2);
			sheet.autoSizeColumn((short) 8);

			HSSFCell cell79 = headingRow1.createCell((short) 9);
			cell79.setCellStyle(style);
			cell79.setCellValue(new HSSFRichTextString("  Received Qty   "));
			cell79.setCellStyle(style2);
			sheet.autoSizeColumn((short) 9);



			int row=6;
			int i=1;
			while(itr.hasNext())
			{
				Object[] pair = (Object[]) itr.next();

				String issue_no=pair[0].toString();
				String issue_date=pair[1].toString();
				String pvms_no=pair[2].toString();
				String au=pair[3].toString();
				String nomenclature=pair[4].toString();

				String batch_no=pair[7].toString();
				String expiry_date= "";
				if(pair[8]!= null){
					expiry_date=pair[8].toString();
				}else{
					expiry_date="-";
				}
				float qty_receive =0.0f ;
				if(pair[9]!= null){
					qty_receive =Float.parseFloat(pair[9].toString());
				}else{
					qty_receive = 0.0f;
				}
				String manufacture_date="";
				if(pair[11]!=null)
					manufacture_date=pair[11].toString();

				HSSFRow detailRow = sheet.createRow((short) row);

				HSSFCell cell90 = detailRow.createCell((short) 0);
				cell90.setCellValue(i);

				HSSFCell cell91 = detailRow.createCell((short) 1);
				cell91.setCellValue(new HSSFRichTextString(pvms_no));
				sheet.autoSizeColumn((short) 1);

				HSSFCell cell92 = detailRow.createCell((short) 2);
				cell92.setCellValue(new HSSFRichTextString(nomenclature));
				sheet.autoSizeColumn((short) 2);
				HSSFCell cell93 = detailRow.createCell((short) 3);
				cell93.setCellValue(new HSSFRichTextString(au));
				sheet.autoSizeColumn((short) 3);
				HSSFCell cell94 = detailRow.createCell((short) 4);
				cell94.setCellValue(new HSSFRichTextString(batch_no));
				sheet.autoSizeColumn((short) 4);
				HSSFCell cell95 = detailRow.createCell((short) 5);
				cell95.setCellValue(new HSSFRichTextString(issue_date));
				sheet.autoSizeColumn((short) 5);
				HSSFCell cell96 = detailRow.createCell((short) 6);
				cell96.setCellValue(new HSSFRichTextString(issue_no));
				sheet.autoSizeColumn((short) 6);
				HSSFCell cell97 = detailRow.createCell((short) 7);
				cell97.setCellValue(new HSSFRichTextString(manufacture_date));
				sheet.autoSizeColumn((short) 7);
				HSSFCell cell98 = detailRow.createCell((short) 8);
				cell98.setCellValue(new HSSFRichTextString(expiry_date));
				sheet.autoSizeColumn((short) 8);
				HSSFCell cell99 = detailRow.createCell((short) 9);
				cell99.setCellValue(qty_receive);
				sheet.autoSizeColumn((short) 9);


				i++;
				row = row + 1;
			}

			dataMap.put("wb", wb);
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return dataMap;
	}

	public boolean submitIssueToDispensary(Map map) {
		Session session = (Session) getSession();
		boolean succesfullyAdded = false;
		List<String> batchNumberList = (List) map.get("batchNumberList");
		List brandNameList = (List) map.get("brandNameList");
		List expiryDateList = (List) map.get("expiryDateList");
		List issQtyList = (List) map.get("issQtyList");
		List costPriceList = (List) map.get("costPriceList");
		//List amountList = (List) map.get("amountList");
		List itemIdList = (List) map.get("itemIdList");
		//List storeItemBatchStockIdList = (List) map.get("storeItemBatchStockIdList");
		String date = (String) map.get("date");
		int deptId = (Integer) map.get("deptId");
		int hospitalId = (Integer) map.get("hospitalId");
		String time = (String) map.get("time");
		String userName = (String) map.get("userName");
		int storeFyDocumentNoId = (Integer) map.get("storeFyDocumentNoId");
		String opdIssueno = (String) map.get("opdIssueno");
		int hinId = (Integer) map.get("hinId");

		int empId = (Integer) map.get("empId");
		String prescription = (String) map.get("prescription");
		String serviceNo = (String) map.get("serviceNo");
		int patientPrescriptionId = 0;
		if(map.get("patientPrescriptionId") != null){
			patientPrescriptionId = (Integer)(map.get("patientPrescriptionId"));
		}
		Date dateToInsert=null;
		if((map.get("date")!=null)&&(!map.get("date").equals("")))
			dateToInsert = HMSUtil.convertStringTypeDateToDateType(date);

		Transaction tx = null;
		try {

			tx = session.beginTransaction();

			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) hbt.load(
					StoreFyDocumentNo.class, storeFyDocumentNoId);
			StoreOpPatientIssueM storeOpPatientIssueM = null;
			String opdPatientIssueNoFromDB = "";
			if(storeFyDocumentNo.getOpdIssueNo() != null)
				opdPatientIssueNoFromDB = storeFyDocumentNo.getOpdIssueNo();

			if (!opdPatientIssueNoFromDB.equals(opdIssueno))
			{
				storeFyDocumentNo.setOpdIssueNo(opdIssueno);
				hbt.update(storeFyDocumentNo);

				storeOpPatientIssueM = new StoreOpPatientIssueM();
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				storeOpPatientIssueM.setDepartment(masDepartment);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				storeOpPatientIssueM.setHospital(masHospital);

				PatientPrescriptionHeader prescriptionHeader = new PatientPrescriptionHeader();

				if(patientPrescriptionId != 0){
					prescriptionHeader.setId(patientPrescriptionId);
					storeOpPatientIssueM.setPatientPrescriptionHeader(prescriptionHeader);
				}

				storeOpPatientIssueM.setIssueType("I");
				storeOpPatientIssueM.setTypeOfIssue("P");
				Patient patient = new Patient();
				if (hinId != 0) {
					patient.setId(hinId);
					storeOpPatientIssueM.setHin(patient);
					storeOpPatientIssueM.setServiceNo(serviceNo);
				} else
					storeOpPatientIssueM.setServiceNo(serviceNo);

				storeOpPatientIssueM.setIssueNo(opdIssueno);
				storeOpPatientIssueM.setIssueDate(dateToInsert);
				storeOpPatientIssueM.setStatus("y");
				storeOpPatientIssueM.setPrescriptionNo(prescription);
				MasEmployee masEmployee = new MasEmployee();
				if(empId != 0){
					masEmployee.setId(empId);
					storeOpPatientIssueM.setEmp(masEmployee);
				}

				storeOpPatientIssueM.setLastChgBy(userName);
				storeOpPatientIssueM.setLastChgDate(dateToInsert);
				storeOpPatientIssueM.setLastChgTime(time);
				hbt.save(storeOpPatientIssueM);

				Iterator itr = issQtyList.iterator();
				int i = 0;
				for (int j = 0; i < issQtyList.size(); j++)
				{

					BigDecimal totalQtyIssued;
					StoreOpPatientIssueT storeOpPatientIssueT = new StoreOpPatientIssueT();
					int itemId=Integer.parseInt(""+itemIdList.get(i));
					storeOpPatientIssueT.setOpIssue(storeOpPatientIssueM);
					MasStoreItem masStoreItem = new MasStoreItem();
					masStoreItem.setId(itemId);
					storeOpPatientIssueT.setItemIdRequire(masStoreItem);
					storeOpPatientIssueT.setItemIdIssue(masStoreItem);
					storeOpPatientIssueT.setBatchNo(batchNumberList.get(i));
					MasStoreBrand masStoreBrand = new MasStoreBrand();
					masStoreBrand.setId(Integer.parseInt("" + brandNameList.get(i)));
					storeOpPatientIssueT.setBrand(masStoreBrand);
					String str_date = (String) expiryDateList.get(i);
					//	String expiryDate=str_date.substring(8)+"/"+str_date.substring(5,7)+"/"+str_date.substring(0,4);
					//	Date expiryDateToInsert = HMSUtil.convertStringTypeDateToDateType(expiryDate);
					Date expiryDateToInsert=HMSUtil.convertStringTypeDateToDateType(str_date);
					storeOpPatientIssueT.setExpiryDate(expiryDateToInsert);
					BigDecimal issuedQtyFromJsp = new BigDecimal(""
							+ issQtyList.get(i));
					storeOpPatientIssueT.setQtyIssued(issuedQtyFromJsp);
					BigDecimal bigDecimal2 = new BigDecimal(""
							+ costPriceList.get(i));
					storeOpPatientIssueT.setRate(bigDecimal2);
					//BigDecimal bigDecimal3 = new BigDecimal("" + amountList.get(i));
					//storeOpPatientIssueT.setAmount(bigDecimal3);
					// hbt.save(storeIpIssueT);

					List<StoreItemBatchStock> storeItemBatchStockList = session.createCriteria(StoreItemBatchStock.class)
					.add(Restrictions.eq("BatchNo", batchNumberList.get(i)))
					.add(Restrictions.eq("Item.Id", itemId))
					.add(Restrictions.eq("Hospital.Id", hospitalId))
					.add(Restrictions.eq("Department.Id",deptId)).list();
					for(StoreItemBatchStock storeItemBatchStock:storeItemBatchStockList)
					{
						BigDecimal qtyIssued = (BigDecimal) storeItemBatchStock.getIssueQty();
						if (qtyIssued != null)
						{
							totalQtyIssued = qtyIssued.add(issuedQtyFromJsp);
						} else {
							totalQtyIssued = issuedQtyFromJsp;
						}

						BigDecimal closingStock = (BigDecimal) storeItemBatchStock
						.getClosingStock();
						closingStock = closingStock.subtract(issuedQtyFromJsp);
						storeItemBatchStock.setIssueQty(totalQtyIssued);
						storeItemBatchStock.setClosingStock(closingStock);
						// hbt.save(storeIpIssueM);
						hbt.save(storeOpPatientIssueT);
						hbt.update(storeItemBatchStock);

					}

					i++;
				}
				PatientPrescriptionHeader presHd = (PatientPrescriptionHeader)hbt.load(PatientPrescriptionHeader.class, patientPrescriptionId);
				presHd.setStatus("c");
				hbt.update(presHd);
				succesfullyAdded = true;
				tx.commit();
			}

		} catch (Exception e) {
			succesfullyAdded=false;
			tx.rollback();
			e.printStackTrace();
		}
		return succesfullyAdded;
	}

	public Map<String, Object>  insertIssueForIndent(Map<String, Object> utilMap,Box box) {
		boolean b = false;
		Session session = getSession();
		Transaction tx =null;
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<StoreInternalIndentT> storeInternalTList = new ArrayList<StoreInternalIndentT>();
		List<StoreIssueT> childList=new ArrayList<StoreIssueT>();
		int indentDtId = 0;
		int issueId=0;
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		int indentInternalId=0;
		String issueNo ="";
		String issuedBatchIdAndQty="";
		indentInternalId=(Integer)utilMap.get("indentInternalId");
		List<String> batchNumberList = (List) utilMap.get("batchNumberList");
		List brandNameList = (List) utilMap.get("brandNameList");
		List expiryDateList = (List) utilMap.get("expiryDateList");
		List issQtyList = (List) utilMap.get("issQtyList");
		List itemIdList = (List) utilMap.get("itemIdList");
		List reqQtyList = (List) utilMap.get("reqQtyList");
		try{
			tx = session.beginTransaction();
			Date dateStringFormat = null;
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			dateStringFormat = java.sql.Date.valueOf((sdf.format(new Date())));


			if(utilMap.get("deptId")!=null){
				deptId=(Integer)utilMap.get("deptId");
			}
			/*int totalQtyIssued = 0;
					 if(utilMap.get("totalQtyIssued")!=null){
						 totalQtyIssued=(Integer)utilMap.get("totalQtyIssued");
					 }*/
			if(utilMap.get("issuedBatchIdAndQty")!=null){
				issuedBatchIdAndQty=(String)utilMap.get("issuedBatchIdAndQty");
			}
			if(utilMap.get("issueNo")!=null){
				issueNo=(String)utilMap.get("issueNo");
			}

			StoreIssueM issueM = new StoreIssueM();
			if(utilMap.get("issueM")!=null){
				issueM=(StoreIssueM)utilMap.get("issueM");
			}
			if(utilMap.get("childList")!=null){
				childList=(List<StoreIssueT>)utilMap.get("childList");
			}
			//	Vector receivedQty = box.getVector(RequestConstants.QTY_ISSUED);
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			hbt.save(issueM);
			hbt.refresh(issueM);
			issueId = issueM.getId();
			map.put("issueId", issueId);
			int issuemId=issueM.getRequestNo().getId();
			Iterator itr = issQtyList.iterator();

			for (int i = 0;  i< issQtyList.size(); i++)
			{

				BigDecimal totalQtyIssued;
				StoreIssueT storeIssueT = new StoreIssueT();
				int itemId=Integer.parseInt(""+itemIdList.get(i));
				storeIssueT.setIssueM(issueM);
				MasStoreItem masStoreItem = new MasStoreItem();
				masStoreItem.setId(itemId);
				storeIssueT.setItem(masStoreItem);
				storeIssueT.setItemIssued(masStoreItem);
				storeIssueT.setBatchNo(batchNumberList.get(i));
				/*MasStoreBrand masStoreBrand = new MasStoreBrand();
         				masStoreBrand.setId(Integer.parseInt("" + brandNameList.get(i)));
         				storeIssueT.setBrand(masStoreBrand);
				 */String str_date = (String) expiryDateList.get(i);
				 Date expiryDateToInsert=HMSUtil.convertStringTypeDateToDateType(str_date);
				 storeIssueT.setExpiryDate(expiryDateToInsert);
				 BigDecimal issuedQtyFromJsp = new BigDecimal(""
						 + issQtyList.get(i));
				 storeIssueT.setQtyIssued(issuedQtyFromJsp);
				 BigDecimal reqQtyFromJsp = new BigDecimal(""+reqQtyList.get(i));

				 storeIssueT.setQtyRequest(reqQtyFromJsp);


				 int storeFyId = 0;
				 Criteria c = session.createCriteria(StoreFyDocumentNo.class).add(
						 Restrictions.eq("Department.Id",deptId));
				 storeFyDocumentNoList = c.list();
				 for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
					 storeFyId = documentNo.getId();
				 }
				 HibernateTemplate hbt4 = getHibernateTemplate();
				 hbt4.setFlushModeName("FLUSH_EAGER");
				 hbt4.setCheckWriteOperations(false);
				 StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) hbt4.load(StoreFyDocumentNo.class, storeFyId);
				 storeFyDocumentNo.setIssueDeptNo(issueNo);
				 hbt4.update(storeFyDocumentNo);
				 hbt4.refresh(storeFyDocumentNo);
				 int internalIndentTId=0;
				 storeInternalTList=session.createCriteria(StoreInternalIndentT.class)
				 .add(Restrictions.eq("Internal.Id",indentInternalId ))
				 .add(Restrictions.eq("Item.Id", itemId)).list();
				 for(StoreInternalIndentT storeInternalIndentT : storeInternalTList)
				 {
					 internalIndentTId = storeInternalIndentT.getId();
					 HibernateTemplate hbt5 = getHibernateTemplate();
					 hbt5.setFlushModeName("FLUSH_EAGER");
					 hbt5.setCheckWriteOperations(false);
					 StoreInternalIndentT internalIndentT = new StoreInternalIndentT();
					 internalIndentT = (StoreInternalIndentT)hbt5.load(StoreInternalIndentT.class, internalIndentTId);
					 int quantityRcvd=0;
					 if(internalIndentT.getQtyIssued()!=null){
						 quantityRcvd=internalIndentT.getQtyIssued();
					 }
					 int quantityReceivedFinal=quantityRcvd +Integer.parseInt(""+issQtyList.get(i));
					 internalIndentT.setQtyIssued(quantityReceivedFinal);
					 hbt5.update(internalIndentT);
					 hbt5.refresh(internalIndentT);
				 }
				 /*	if (storeInternalTList != null && storeInternalTList.size() > 0)
	         				{
	         					StoreInternalIndentT storeinIndentT=storeInternalTList.get(0);
	         				  if(storeinIndentT.getQtyRequest()!=null)
	         				  {
	         					 int qtyIssued=storeinIndentT.getQtyRequest();
	         					 qtyIssued +=Integer.parseInt(""+issQtyList.get(i));
	         					storeinIndentT.setQtyIssued(qtyIssued);
	         					int total=storeinIndentT.getQtyRequest();
	         					total -=Integer.parseInt(""+issQtyList.get(i));
	         					storeinIndentT.setQtyIssued(total);

	         					hbt.update(storeinIndentT);
	         					hbt.refresh(storeinIndentT);

	         				  }
	         				  else
	         				  {
	         					int qtyIssued =Integer.parseInt(""+issQtyList.get(i));
	         					storeinIndentT.setQtyIssued(qtyIssued);
	         					int total=storeinIndentT.getQtyRequest();
	          					total -=Integer.parseInt(""+issQtyList.get(i));
	          					storeinIndentT.setQtyIssued(total);
	          					hbt.update(storeinIndentT);
	          					hbt.refresh(storeinIndentT);
	         				  }
	         			}*/
				 List<StoreItemBatchStock> storeItemBatchStockList = session.createCriteria(StoreItemBatchStock.class)
				 .add(Restrictions.eq("BatchNo", batchNumberList.get(i)))
				 .add(Restrictions.eq("Item.Id", itemId))
				 .add(Restrictions.eq("Hospital.Id", hospitalId))
				 .add(Restrictions.eq("Department.Id",deptId)).list();
				 for(StoreItemBatchStock storeItemBatchStock:storeItemBatchStockList)
				 {
					 BigDecimal qtyIssued = (BigDecimal) storeItemBatchStock.getIssueQty();
					 if (qtyIssued != null)
					 {
						 totalQtyIssued = qtyIssued.add(issuedQtyFromJsp);
					 } else {
						 totalQtyIssued = issuedQtyFromJsp;
					 }

					 BigDecimal closingStock = (BigDecimal) storeItemBatchStock
					 .getClosingStock();
					 closingStock = closingStock.subtract(issuedQtyFromJsp);
					 storeItemBatchStock.setIssueQty(totalQtyIssued);
					 storeItemBatchStock.setClosingStock(closingStock);
					 // hbt.save(storeIpIssueM);
					 hbt.save(storeIssueT);
					 hbt.update(storeItemBatchStock);


				 }
				 //i++;
			}
			List indentList =session.createCriteria(StoreInternalIndentM.class).add(Restrictions.eq("Id", issueM.getRequestNo().getId())).list();
			StoreInternalIndentM indentM1 = new StoreInternalIndentM();
			indentM1 = (StoreInternalIndentM)indentList.get(0);
			indentM1.setStatus("y");
			session.saveOrUpdate(indentM1);

			b = true;
			tx.commit();
		}catch(Exception exception){
			b = false;
			tx.rollback();
			exception.printStackTrace();
		}
		map.put("issueId", issueId);
		map.put("b", b);
		return map;
	}
	
	public Map<String, Object>  insertIssueForIndentwithoutbarcodeForRC(Map<String, Object> utilMap,Box box) {
		boolean b = false;
		Session session = getSession();
		Transaction tx =null;
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<RcRequestDetails> rcRequestDetailsList = new ArrayList<RcRequestDetails>();
		List<StoreIssueT> childList=new ArrayList<StoreIssueT>();
		int indentDtId = 0;
		int issueId=0;
		int itemId=0;
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		String issueNo ="";
		String issuedBatchIdAndQty="";

		try{
			Vector v1=box.getVector("tt8");
			Vector v2=box.getVector("tt6");
			tx = session.beginTransaction();
			Date dateStringFormat = null;
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			dateStringFormat = java.sql.Date.valueOf((sdf.format(new Date())));


			if(utilMap.get("deptId")!=null){
				deptId=(Integer)utilMap.get("deptId");
			}
			if(utilMap.get("hospitalId")!=null){
				hospitalId=(Integer)utilMap.get("hospitalId");

			}
			int totalQtyIssued = 0;
			if(utilMap.get("totalQtyIssued")!=null){
				totalQtyIssued=(Integer)utilMap.get("totalQtyIssued");
			}
			if(utilMap.get("issuedBatchIdAndQty")!=null){
				issuedBatchIdAndQty=(String)utilMap.get("issuedBatchIdAndQty");
			}
			if(utilMap.get("issueNo")!=null){
				issueNo=(String)utilMap.get("issueNo");
			}

			StoreIssueM issueM = new StoreIssueM();
			if(utilMap.get("issueM")!=null){
				issueM=(StoreIssueM)utilMap.get("issueM");
			}
			if(utilMap.get("childList")!=null){
				childList=(List<StoreIssueT>)utilMap.get("childList");
			}

			// this for loanout --- javed khan
			List<StoreIssueT> childList1=new ArrayList<StoreIssueT>();
			if(utilMap.get("childList1")!=null){
				childList1=(List<StoreIssueT>)utilMap.get("childList1");
			}
			List issueMListL = new ArrayList();
			if(utilMap.get("issueMListL")!=null){
				issueMListL=(List<StoreIssueT>)utilMap.get("issueMListL");
			}
			// this for loanout --- javed khan


			//				    Vector receivedQty = box.getVector(RequestConstants.QTY_ISSUED);
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			
			map.put("tableObjectName", "StoreIssueM");			
			map.put("isHospitalWise", "y");
			map.put("hospitalId", hospitalId);
			map.put("isDepartmentWise", "y");
			map.put("departmentId", deptId);
			map.put("isYearly", "y");			
			map.put("isMonthly", "n");
			map.put("isPrefix", "y");
			map.put("transactionPrefixProperty", "transactionPrefixForIssueNoRC");
			String IssueNo = HMSUtil.generateTransactionSequence(map, session, hbt);
			issueM.setIssueNo(IssueNo);
			
			hbt.save(issueM);
			hbt.flush();
			//hbt.refresh(issueM);
			issueId = issueM.getId();
			map.put("issueId", issueId);
			int issuemId=issueM.getRequestHeader().getId();
			if (childList.size() > 0) {

				for (int i = 0; i < childList.size(); i++) {
					StoreIssueT storeIssueT = new StoreIssueT();
					storeIssueT = (StoreIssueT) childList.get(i);
					storeIssueT.setIssueM(issueM);
					hbt.save(storeIssueT);
				}

			}

			// this for loanout --- javed khan
			if (childList1.size() > 0) {

				for (int i = 0; i < childList1.size(); i++) {
					StoreIssueT storeIssueT = new StoreIssueT();
					storeIssueT = (StoreIssueT) childList1.get(i);
					storeIssueT.setIssueM(issueM);
					hbt.save(storeIssueT);

					// this for StoreLoanoutExpendM set status - javed khan
					StoreLoanoutExpendM slem = new StoreLoanoutExpendM ();
					slem=(StoreLoanoutExpendM) hbt.load(StoreLoanoutExpendM.class, Integer.parseInt(""+issueMListL.get(i)));
					slem.setStatus("C");
					hbt.update(slem);
				}

			}
			// comment by javed
			List requestHeaderList =session.createCriteria(RcRequestHeader.class).add(Restrictions.eq("Id", issueM.getRequestHeader().getId()))
			.add(Restrictions.eq("Hospital.Id", hospitalId)).list();  // add hospital_id by javed khan
			RcRequestHeader requstHeader1 = new RcRequestHeader();
			requstHeader1 = (RcRequestHeader)requestHeaderList.get(0);
			requstHeader1.setStatus("y");
			session.saveOrUpdate(requstHeader1);

			
			
			//Update Item Stock
			List lstData1 = session.createCriteria(StoreIssueT.class).add(Restrictions.eq("IssueM.Id", issueId))
			.createAlias("IssueM", "i").add(Restrictions.eq("i.Hospital.Id", hospitalId)).list(); // add hospital_id
			List loanData = session.createCriteria(StoreIssueT.class).add(Restrictions.eq("IssueM.Id", issueId))
			.add(Restrictions.eq("CivLoan", "Loan")).createAlias("IssueM", "i")
			.add(Restrictions.eq("i.Hospital.Id", hospitalId)).list(); // add hospital_id
			//List lstData1 = new ArrayList(header.getIssueId());
			int j=0;
			int k=1;
			for(int i=0;i<lstData1.size();i++) {
				
				
				
				//if(!(((StoreIssueT)lstData1.get(i)).getBatchNo().trim()).equals("0")){
				MasStoreItem item = ((StoreIssueT)lstData1.get(i)).getItem();

				List lstdata = getHibernateTemplate().find("from jkt.hms.masters.business.StoreItemBatchStock ss where ss.Item='"+((StoreIssueT)lstData1.get(i)).getItem().getId()
						+"' and ss.BatchNo='"+((StoreIssueT)lstData1.get(i)).getBatchNo().trim()+"'"
						+" and ss.Department.Id='"+ issueM.getDepartment().getId() +"'"
						+" and ss.Hospital.Id='"+ hospitalId +"'");
				if(lstdata.size()>0 && ((StoreIssueT)lstData1.get(i)).getQtyIssued() != null){
					StoreItemBatchStock itemBatchStock = new StoreItemBatchStock();
					itemBatchStock =(StoreItemBatchStock)lstdata.get(0);
					StoreItemBatchStock batchStockObj = (StoreItemBatchStock)hbt.load(
							StoreItemBatchStock.class, itemBatchStock.getId());
					if(batchStockObj.getClosingStock() != null){
						batchStockObj.setClosingStock(batchStockObj.getClosingStock()
								.subtract(((StoreIssueT)lstData1.get(i)).getQtyIssued()));
						// javed khan for subtract qty demand

						//  start code for subtract loan qty from store_internal_indent_t 24/04/2012
						String qury="";
						/*if(loanData.size()>0){
							int loanQty=0;
							for(int l=0;l<loanData.size();l++) {
								int issueQty= ((StoreIssueT)lstData1.get(i)).getItem().getId();
								int loanQty1=((StoreIssueT)loanData.get(l)).getItem().getId();
								if(issueQty == loanQty1 ){
									//loanQty = loanQty+Integer.parseInt( (""+((StoreIssueT)lstData1.get(l)).getQtyIssued()));
									loanQty = loanQty+Integer.parseInt( (""+((StoreIssueT)loanData.get(l)).getQtyIssued()));
									qury="update  store_internal_indent_t  set QTY_REQUEST=QTY_REQUEST-'"
										+(((((StoreIssueT)lstData1.get(i))).getQtyIssued().intValue())+loanQty )+"'"
										+ " where INTERNAL_ID='"
										+ issueM.getRequestNo().getId()+"'"
										+" and ITEM_ID='"
										+ ((StoreIssueT)lstData1.get(i)).getItem().getId()+"'";
								}
							}
							if(loanQty==0){
								qury="update  store_internal_indent_t  set QTY_REQUEST=QTY_REQUEST-'"
									+(((StoreIssueT)lstData1.get(i))).getQtyIssued()+"'"
									+ " where INTERNAL_ID='"
									+ issueM.getRequestNo().getId()+"'"
									+" and ITEM_ID='"
									+ ((StoreIssueT)lstData1.get(i)).getItem().getId()+"'";
							}

						}else{ // end code for subtract loan qty from store_internal_indent_t 24/04/2012
							qury="update  store_internal_indent_t  set QTY_REQUEST=QTY_REQUEST-'"
								+(((StoreIssueT)lstData1.get(i))).getQtyIssued()+"'"
								+ " where INTERNAL_ID='"
								+ issueM.getRequestNo().getId()+"'"
								+" and ITEM_ID='"
								+ ((StoreIssueT)lstData1.get(i)).getItem().getId()+"'";
						}*/
						qury="update  rc_request_details  set qty_issued='"
								+(((StoreIssueT)lstData1.get(i))).getQtyIssued()+"'"
								+ " where header_id='"
								+ issueM.getRequestHeader().getId()+"'"
								+" and ITEM_ID='"
								+ ((StoreIssueT)lstData1.get(i)).getItem().getId()+"'";

						Query que=session.createSQLQuery(qury);
						int rowCount=que.executeUpdate();

					}
					BigDecimal issueQty = new BigDecimal(0.00);

					if(batchStockObj.getIssueQty() != null){
						issueQty = batchStockObj.getIssueQty();
					}
					batchStockObj.setIssueQty(issueQty.add(((StoreIssueT)lstData1.get(i)).getQtyIssued()));
					hbt.update(batchStockObj);
					
					//Commented By Vinay
					/*// update/add new stock in issued department
					
					List<StoreItemBatchStock> newBatchList= new ArrayList<StoreItemBatchStock>();
					
					newBatchList= session.createCriteria(StoreItemBatchStock.class)
							.createAlias("Item", "item").add(Restrictions.eq("item.Id", ((StoreIssueT)lstData1.get(i)).getItem().getId()))
							.createAlias("Hospital", "hospital").add(Restrictions.eq("hospital.Id", hospitalId))
							.createAlias("Department", "dept").add(Restrictions.eq("dept.Id", issueM.getToStore().getId()))
							.add(Restrictions.eq("BatchNo", ((StoreIssueT)lstData1.get(i)).getBatchNo().trim())).list();
					System.out.println("newBatchList="+newBatchList.size());
					
					if(newBatchList.size()>0)
					{
						StoreItemBatchStock newBatchObj = new StoreItemBatchStock();
						newBatchObj = newBatchList.get(0);
						System.out.println("Id="+newBatchObj.getId());
						BigDecimal receivedQty = new BigDecimal(0.00);

						if(newBatchObj.getReceivedQty() != null){
							receivedQty = newBatchObj.getReceivedQty();
						}
						newBatchObj.setReceivedQty(receivedQty.add(((StoreIssueT)lstData1.get(i)).getQtyIssued()));
											
						newBatchObj.setClosingStock(newBatchObj.getClosingStock()
								.add(((StoreIssueT)lstData1.get(i)).getQtyIssued()));
						hbt.update(newBatchObj);
						
					}
					else
					{
						StoreItemBatchStock newBatchObj = new StoreItemBatchStock();						
						newBatchObj.setItem(item);
						newBatchObj.setBatchNo(((StoreIssueT)lstData1.get(i)).getBatchNo().trim());
						MasDepartment dept= issueM.getToStore();
						newBatchObj.setDepartment(dept);
						newBatchObj.setExpiryDate(((StoreIssueT)lstData1.get(i)).getExpiryDate());
						BigDecimal receivedQty = new BigDecimal(0.00);

						if(newBatchObj.getReceivedQty() != null){
							receivedQty = newBatchObj.getReceivedQty();
						}
						newBatchObj.setReceivedQty(receivedQty.add(((StoreIssueT)lstData1.get(i)).getQtyIssued()));
						BigDecimal closingStock = new BigDecimal(0.00);
						newBatchObj.setClosingStock(closingStock
								.add(((StoreIssueT)lstData1.get(i)).getQtyIssued()));
						MasHospital hosp= issueM.getHospital();
						newBatchObj.setHospital(hosp);
						
						hbt.save(newBatchObj);
						hbt.refresh(newBatchObj);
						
					}
					*/
					int storeFyId = 0;
					Criteria c = session.createCriteria(StoreFyDocumentNo.class).add(
							Restrictions.eq("Department.Id",deptId)).add(
									Restrictions.eq("Hospital.Id",hospitalId));   // add hospital_id by javed khan
					storeFyDocumentNoList = c.list();
					for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
						storeFyId = documentNo.getId();
					}
					HibernateTemplate hbt4 = getHibernateTemplate();
					hbt4.setFlushModeName("FLUSH_EAGER");
					hbt4.setCheckWriteOperations(false);
					StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) hbt4.load(StoreFyDocumentNo.class, storeFyId);
					storeFyDocumentNo.setIssueDeptNo(issueNo);
					hbt4.update(storeFyDocumentNo);
					hbt4.refresh(storeFyDocumentNo);
					j=j+1;
					k = k+1;
				}
			}
			int p=0;
			int q=1;

			Vector itemList = box.getVector(RequestConstants.ITEM_ID);


			for(int ii=0;ii<itemList.size();ii++){
				Criteria crit = session.createCriteria(RcRequestDetails.class)
				.createAlias("RcHeader", "rh")
				.createAlias("Item", "item")
				.add(Restrictions.eq("rh.Id",issuemId ))
				.add(Restrictions.eq("item.Id",Integer.parseInt(itemList.get(ii).toString())))
				.add(Restrictions.eq("rh.Hospital.Id",hospitalId ));   // add by javed khan
				rcRequestDetailsList = crit.list();
				int internalIndentTId =0;
				for(RcRequestDetails requestDetails : rcRequestDetailsList)
				{
					
					HibernateTemplate hbt5 = getHibernateTemplate();
					hbt5.setFlushModeName("FLUSH_EAGER");
					hbt5.setCheckWriteOperations(false);
					
					BigDecimal quantityRcvd= new BigDecimal(0.0);
					if(requestDetails.getQtyIssued()!=null){
						quantityRcvd=requestDetails.getQtyIssued();
					}
					BigDecimal quantityReceivedFinal=quantityRcvd.add(new BigDecimal(box.getDouble("qtyIssued"+q)).setScale(2, BigDecimal.ROUND_HALF_UP));
					requestDetails.setQtyIssued(quantityReceivedFinal);
					
					hbt5.update(requestDetails);
					hbt5.refresh(requestDetails);
				}
				p =p+1;
				q=q+1;
			}


			b = true;
			tx.commit();
		}catch(Exception exception){
			b = false;
			tx.rollback();
			exception.printStackTrace();
		}
		map.put("issueId", issueId);
		map.put("b", b);
		return map;
	}

	public Map<String, Object>  insertIssueForIndentwithoutbarcode(Map<String, Object> utilMap,Box box) {
		boolean b = false;
		Session session = getSession();
		Transaction tx =null;
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<StoreInternalIndentT> storeInternalTList = new ArrayList<StoreInternalIndentT>();
		List<StoreIssueT> childList=new ArrayList<StoreIssueT>();
		int indentDtId = 0;
		int issueId=0;
		int itemId=0;
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		String issueNo ="";
		String issuedBatchIdAndQty="";

		try{
			Vector v1=box.getVector("tt8");
			Vector v2=box.getVector("tt6");
			tx = session.beginTransaction();
			Date dateStringFormat = null;
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			dateStringFormat = java.sql.Date.valueOf((sdf.format(new Date())));


			if(utilMap.get("deptId")!=null){
				deptId=(Integer)utilMap.get("deptId");
			}
			if(utilMap.get("hospitalId")!=null){
				hospitalId=(Integer)utilMap.get("hospitalId");

			}
			int totalQtyIssued = 0;
			if(utilMap.get("totalQtyIssued")!=null){
				totalQtyIssued=(Integer)utilMap.get("totalQtyIssued");
			}
			if(utilMap.get("issuedBatchIdAndQty")!=null){
				issuedBatchIdAndQty=(String)utilMap.get("issuedBatchIdAndQty");
			}
			if(utilMap.get("issueNo")!=null){
				issueNo=(String)utilMap.get("issueNo");
			}

			StoreIssueM issueM = new StoreIssueM();
			if(utilMap.get("issueM")!=null){
				issueM=(StoreIssueM)utilMap.get("issueM");
			}
			if(utilMap.get("childList")!=null){
				childList=(List<StoreIssueT>)utilMap.get("childList");
			}

			// this for loanout --- javed khan
			List<StoreIssueT> childList1=new ArrayList<StoreIssueT>();
			if(utilMap.get("childList1")!=null){
				childList1=(List<StoreIssueT>)utilMap.get("childList1");
			}
			List issueMListL = new ArrayList();
			if(utilMap.get("issueMListL")!=null){
				issueMListL=(List<StoreIssueT>)utilMap.get("issueMListL");
			}
			// this for loanout --- javed khan


			//				    Vector receivedQty = box.getVector(RequestConstants.QTY_ISSUED);
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			
			
			map.put("tableObjectName", "StoreIssueM");			
			map.put("isHospitalWise", "y");
			map.put("hospitalId", hospitalId);
			map.put("isDepartmentWise", "y");
			map.put("departmentId", deptId);
			map.put("isYearly", "y");			
			map.put("isMonthly", "n");
			map.put("isPrefix", "y");
			map.put("transactionPrefixProperty", "transactionPrefixForIssueNo");
			String IssueNo = HMSUtil.generateTransactionSequence(map, session, hbt);
			issueM.setIssueNo(IssueNo);
			hbt.save(issueM);
			hbt.flush();
			//hbt.refresh(issueM);
			issueId = issueM.getId();
			map.put("issueId", issueId);
			int issuemId=issueM.getRequestNo().getId();
			if (childList.size() > 0) {

				for (int i = 0; i < childList.size(); i++) {
					StoreIssueT storeIssueT = new StoreIssueT();
					storeIssueT = (StoreIssueT) childList.get(i);
					storeIssueT.setIssueM(issueM);
					StoreItemBatchStock  sibs = (StoreItemBatchStock)session.get(StoreItemBatchStock.class, storeIssueT.getBatchStock().getId());
					storeIssueT.setBatchNo(sibs.getBatchNo());
					hbt.save(storeIssueT);
				}

			}

			// this for loanout --- javed khan
			if (childList1.size() > 0) {

				for (int i = 0; i < childList1.size(); i++) {
					StoreIssueT storeIssueT = new StoreIssueT();
					storeIssueT = (StoreIssueT) childList1.get(i);
					storeIssueT.setIssueM(issueM);
					StoreItemBatchStock  sibs = (StoreItemBatchStock)session.get(StoreItemBatchStock.class, storeIssueT.getBatchStock().getId());
					storeIssueT.setBatchNo(sibs.getBatchNo());
					hbt.save(storeIssueT);

					// this for StoreLoanoutExpendM set status - javed khan
					StoreLoanoutExpendM slem = new StoreLoanoutExpendM ();
					slem=(StoreLoanoutExpendM) hbt.load(StoreLoanoutExpendM.class, Integer.parseInt(""+issueMListL.get(i)));
					slem.setStatus("C");
					hbt.update(slem);
				}

			}
			// comment by javed
			List indentList =session.createCriteria(StoreInternalIndentM.class).add(Restrictions.eq("Id", issueM.getRequestNo().getId()))
			.add(Restrictions.eq("Hospital.Id", hospitalId)).list();  // add hospital_id by javed khan
			StoreInternalIndentM indentM1 = new StoreInternalIndentM();
			indentM1 = (StoreInternalIndentM)indentList.get(0);
			indentM1.setStatus("y");
			session.saveOrUpdate(indentM1);

			
			
			//Update Item Stock
			List lstData1 = session.createCriteria(StoreIssueT.class).add(Restrictions.eq("IssueM.Id", issueId))
			.createAlias("IssueM", "i").add(Restrictions.eq("i.Hospital.Id", hospitalId)).list(); // add hospital_id
			
			int j=0;
			int k=1;
			for(int i=0;i<lstData1.size();i++) {
				
				
				
				//if(!(((StoreIssueT)lstData1.get(i)).getBatchNo().trim()).equals("0")){
				MasStoreItem item = ((StoreIssueT)lstData1.get(i)).getItem();

				List lstdata = getHibernateTemplate().find("from jkt.hms.masters.business.StoreItemBatchStock ss where ss.Item='"+((StoreIssueT)lstData1.get(i)).getItem().getId()
						+"' and ss.Id='"+((StoreIssueT)lstData1.get(i)).getBatchStock().getId()+"'"
						+" and ss.Department.Id='"+ issueM.getDepartment().getId() +"'"
						+" and ss.Hospital.Id='"+ hospitalId +"'");
				if(lstdata.size()>0 && ((StoreIssueT)lstData1.get(i)).getQtyIssued() != null){
					StoreItemBatchStock itemBatchStock = new StoreItemBatchStock();
					itemBatchStock =(StoreItemBatchStock)lstdata.get(0);
					StoreItemBatchStock batchStockObj = (StoreItemBatchStock)hbt.load(
							StoreItemBatchStock.class, itemBatchStock.getId());
					if(batchStockObj.getClosingStock() != null){
						batchStockObj.setClosingStock(batchStockObj.getClosingStock()
								.subtract(((StoreIssueT)lstData1.get(i)).getQtyIssued()));
						// javed khan for subtract qty demand

						//  start code for subtract loan qty from store_internal_indent_t 24/04/2012
						String qury="";
						
						List<StoreInternalIndentT> newBatchList= new ArrayList<StoreInternalIndentT>();
						
						newBatchList= session.createCriteria(StoreInternalIndentT.class)
								.createAlias("Item", "item").add(Restrictions.eq("item.Id", ((StoreIssueT)lstData1.get(i)).getItem().getId()))
								
								.createAlias("Internal", "header").add(Restrictions.eq("header.Id", issueM.getRequestNo().getId()))
								.createAlias("header.Hospital", "hospital").add(Restrictions.eq("hospital.Id", hospitalId))
								.list();
						Integer IssuedQty = new Integer(0);
						
						int internalIndentTId=0;
						if(newBatchList.size()>0)
						{
							
							if(newBatchList.get(0).getQtyIssued() !=null)
							IssuedQty = newBatchList.get(0).getQtyIssued().intValue();
							internalIndentTId = newBatchList.get(0).getId();
						}
						
						/*System.out.println("IssuedQtyBefore="+IssuedQty);
						System.out.println("ItemId="+((StoreIssueT)lstData1.get(i)).getItem().getId());*/
						
					
						Integer IterationIssuedQty = (((StoreIssueT)lstData1.get(i))).getQtyIssued().intValue();
						IssuedQty = IssuedQty + IterationIssuedQty;
						/*System.out.println("IterationIssuedQty="+IterationIssuedQty);
						System.out.println("IssuedQtyAfter="+IssuedQty);*/
						
						HibernateTemplate hbt5 = getHibernateTemplate();
						hbt5.setFlushModeName("FLUSH_EAGER");
						hbt5.setCheckWriteOperations(false);
						StoreInternalIndentT internalIndentT = new StoreInternalIndentT();
						//System.out.println("internalIndentT="+internalIndentT);
						internalIndentT = (StoreInternalIndentT)hbt5.get(StoreInternalIndentT.class, internalIndentTId);
						if(internalIndentT !=null)
						{
							internalIndentT.setQtyIssued(IssuedQty);
							hbt5.update(internalIndentT);
							hbt5.flush();
							hbt5.refresh(internalIndentT);
						}
						
						
					}
					BigDecimal issueQty = new BigDecimal(0.00);

					if(batchStockObj.getIssueQty() != null){
						issueQty = batchStockObj.getIssueQty();
					}
					batchStockObj.setIssueQty(issueQty.add(((StoreIssueT)lstData1.get(i)).getQtyIssued()));
					hbt.update(batchStockObj);
					
					
					int storeFyId = 0;
					Criteria c = session.createCriteria(StoreFyDocumentNo.class).add(
							Restrictions.eq("Department.Id",deptId)).add(
									Restrictions.eq("Hospital.Id",hospitalId));   // add hospital_id by javed khan
					storeFyDocumentNoList = c.list();
					for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
						storeFyId = documentNo.getId();
					}
					HibernateTemplate hbt4 = getHibernateTemplate();
					hbt4.setFlushModeName("FLUSH_EAGER");
					hbt4.setCheckWriteOperations(false);
					StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) hbt4.load(StoreFyDocumentNo.class, storeFyId);
					storeFyDocumentNo.setIssueDeptNo(issueNo);
					hbt4.update(storeFyDocumentNo);
					hbt4.refresh(storeFyDocumentNo);
					j=j+1;
					k = k+1;
				}
			}
			int p=0;
			int q=1;

			Vector itemList = box.getVector(RequestConstants.ITEM_ID);

/*
			for(int ii=0;ii<itemList.size();ii++){
				Criteria crit = session.createCriteria(StoreInternalIndentT.class)
				.createAlias("Internal", "I")
				.createAlias("Item", "item")
				.add(Restrictions.eq("I.Id",issuemId ))
				.add(Restrictions.eq("item.Id",Integer.parseInt(itemList.get(ii).toString())))
				.add(Restrictions.eq("I.Hospital.Id",hospitalId ));   // add by javed khan
				storeInternalTList = crit.list();
				int internalIndentTId =0;
				for(StoreInternalIndentT storeInternalIndentT : storeInternalTList)
				{
					internalIndentTId = storeInternalIndentT.getId();
					HibernateTemplate hbt5 = getHibernateTemplate();
					hbt5.setFlushModeName("FLUSH_EAGER");
					hbt5.setCheckWriteOperations(false);
					StoreInternalIndentT internalIndentT = new StoreInternalIndentT();
					internalIndentT = (StoreInternalIndentT)hbt5.load(StoreInternalIndentT.class, internalIndentTId);
					int quantityRcvd=0;
					if(internalIndentT.getQtyIssued()!=null){
						quantityRcvd=internalIndentT.getQtyIssued();
					}
					int quantityReceivedFinal=quantityRcvd +box.getInt("qtyIssued"+q);
					internalIndentT.setQtyIssued(quantityReceivedFinal);
					String tempIssuedBatchIdAndQty="";
					int     batchId= box.getInt(RequestConstants.BATCH_ID+p);
					issuedBatchIdAndQty=issuedBatchIdAndQty+"#"+batchId+"/"+box.getInt(RequestConstants.QTY_ISSUED+q);
					internalIndentT.setIssuedBatchidAndQty(issuedBatchIdAndQty);
					hbt5.update(internalIndentT);
					hbt5.refresh(internalIndentT);
				}
				p =p+1;
				q=q+1;
			}*/


			b = true;
			tx.commit();
		}catch(Exception exception){
			b = false;
			tx.rollback();
			exception.printStackTrace();
		}
		map.put("issueId", issueId);
		map.put("b", b);
		return map;
	}

	
	public Map<String, Object>  insertIssueForIndentwithoutbarcodeWP(Map<String, Object> utilMap,Box box) {
		boolean b = false;
		Session session = getSession();
		Transaction tx =null;
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<StoreInternalIndentT> storeInternalTList = new ArrayList<StoreInternalIndentT>();
		List<StoreIssueT> childList=new ArrayList<StoreIssueT>();
		int indentDtId = 0;
		boolean statusflag = false;
		boolean innerStatusflag = true;
		boolean fullIssued = true;		
		int issueId=0;
		int itemId=0;
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		String issueNo ="";
		String issuedBatchIdAndQty="";

		try{
			Vector v1=box.getVector("tt8");
			Vector v2=box.getVector("tt6");
			tx = session.beginTransaction();
			Date dateStringFormat = null;
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			dateStringFormat = java.sql.Date.valueOf((sdf.format(new Date())));

            
			if(utilMap.get("deptId")!=null){
				deptId=(Integer)utilMap.get("deptId");
			}
			if(utilMap.get("hospitalId")!=null){
				hospitalId=(Integer)utilMap.get("hospitalId");

			}
			int totalQtyIssued = 0;
			if(utilMap.get("totalQtyIssued")!=null){
				totalQtyIssued=(Integer)utilMap.get("totalQtyIssued");
			}
			if(utilMap.get("issuedBatchIdAndQty")!=null){
				issuedBatchIdAndQty=(String)utilMap.get("issuedBatchIdAndQty");
			}
			if(utilMap.get("issueNo")!=null){
				issueNo=(String)utilMap.get("issueNo");
			}

			StoreIssueM issueM = new StoreIssueM();
			if(utilMap.get("issueM")!=null){
				issueM=(StoreIssueM)utilMap.get("issueM");
			}
			if(utilMap.get("childList")!=null){
				childList=(List<StoreIssueT>)utilMap.get("childList");
			}

			// this for loanout --- javed khan
			List<StoreIssueT> childList1=new ArrayList<StoreIssueT>();
			if(utilMap.get("childList1")!=null){
				childList1=(List<StoreIssueT>)utilMap.get("childList1");
			}
			List issueMListL = new ArrayList();
			if(utilMap.get("issueMListL")!=null){
				issueMListL=(List<StoreIssueT>)utilMap.get("issueMListL");
			}
			
			int storesId = 0;
			int WpId = 0;
			int CDId=0;
			Properties properties = new Properties();
			URL resourcePath = Thread.currentThread().getContextClassLoader()
					.getResource("adt.properties");

			try {
				properties.load(resourcePath.openStream());			
				WpId = Integer.parseInt(properties.getProperty("WPDepId"));
				
			} catch (Exception e) {
				e.printStackTrace();
			}
			
		
			
			// this for loanout --- javed khan


			//				    Vector receivedQty = box.getVector(RequestConstants.QTY_ISSUED);
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			
			
			map.put("tableObjectName", "StoreIssueM");			
			map.put("isHospitalWise", "y");
			map.put("hospitalId", hospitalId);
			map.put("isDepartmentWise", "y");
			map.put("departmentId", deptId);
			map.put("isYearly", "y");			
			map.put("isMonthly", "n");
			map.put("isPrefix", "y");
			map.put("transactionPrefixProperty", "transactionPrefixForIssueNo");
			String IssueNo = HMSUtil.generateTransactionSequence(map, session, hbt);
			issueM.setIssueNo(IssueNo);
			hbt.save(issueM);
			hbt.flush();
			//hbt.refresh(issueM);
			issueId = issueM.getId();
			map.put("issueId", issueId);
			int issuemId=issueM.getRequestNo().getId();
			System.out.println("childList"+childList.size());
		/*	if (childList.size() > 0) {

				for (int i = 0; i < childList.size(); i++) {
					StoreIssueT storeIssueT = new StoreIssueT();
					storeIssueT = (StoreIssueT) childList.get(i);
					storeIssueT.setIssueM(issueM);
					hbt.save(storeIssueT);
				}

			}*/

		
			
			
			//Update Item Stock
			/*List lstData1 = session.createCriteria(StoreIssueT.class).add(Restrictions.eq("IssueM.Id", issueId))
			.createAlias("IssueM", "i").add(Restrictions.eq("i.Hospital.Id", hospitalId)).list(); // add hospital_id
*/			
			int j=0;
			int k=1;
			System.out.println("childList.size()"+childList.size());
			 for (int i = 0; i < childList.size(); i++)
		      {
				
				
				/*MasStoreItem item = ((StoreIssueT)childList.get(i)).getItem();*/
                System.out.println("lstData1.get(i)).getBatchStock()"+((StoreIssueT)childList.get(i)).getBatchStock());
                if(((StoreIssueT)childList.get(i)).getBatchStock() !=null)
                {
                	List lstdata = getHibernateTemplate().find("from jkt.hms.masters.business.StoreItemBatchStock ss where ss.Item='"+((StoreIssueT)childList.get(i)).getItem().getId()
    						+"' and ss.Id='"+((StoreIssueT)childList.get(i)).getBatchStock().getId()+"'"
    						+" and ss.Department.Id='"+ issueM.getDepartment().getId() +"'"
    						+" and ss.Hospital.Id='"+ hospitalId +"'");
                	
                	if ((lstdata.size() > 0) && (((StoreIssueT)childList.get(i)).getQtyIssued() != null)) {
                        StoreItemBatchStock itemBatchStock = new StoreItemBatchStock();
                        StoreItemBatchStock batchStockObj = (StoreItemBatchStock)lstdata.get(0);
                        
                        Integer IterationIssuedQty;
                        if (batchStockObj.getClosingStock() != null) {
                          batchStockObj.setClosingStock(batchStockObj.getClosingStock()
                            .subtract(((StoreIssueT)childList.get(i)).getQtyIssued()));
                          


                          String qury = "";
                          
                          List<StoreInternalIndentT> newBatchList = new ArrayList();
                          
                          newBatchList = session.createCriteria(StoreInternalIndentT.class)
                            .createAlias("Item", "item").add(Restrictions.eq("item.Id", ((StoreIssueT)childList.get(i)).getItem().getId()))
                            
                            .createAlias("Internal", "header").add(Restrictions.eq("header.Id", issueM.getRequestNo().getId()))
                            .createAlias("header.Hospital", "hospital").add(Restrictions.eq("hospital.Id", Integer.valueOf(hospitalId)))
                            .list();
                          Integer IssuedQty = new Integer(0);
                          
                          int internalIndentTId = 0;
                          if (newBatchList.size() > 0)
                          {

                            if (((StoreInternalIndentT)newBatchList.get(0)).getQtyIssued() != null)
                              IssuedQty = Integer.valueOf(((StoreInternalIndentT)newBatchList.get(0)).getQtyIssued().intValue());
                            internalIndentTId = ((StoreInternalIndentT)newBatchList.get(0)).getId().intValue();
                          }
                          




                          IterationIssuedQty = Integer.valueOf(((StoreIssueT)childList.get(i)).getQtyIssued().intValue());
                          IssuedQty = Integer.valueOf(IssuedQty.intValue() + IterationIssuedQty.intValue());
                          





                          StoreInternalIndentT internalIndentT = new StoreInternalIndentT();
                          
                          internalIndentT = (StoreInternalIndentT)newBatchList.get(0);
                          if (internalIndentT != null)
                          {
                            if (IssuedQty.intValue() > internalIndentT.getQtyRequest().intValue())
                            {
                              IssuedQty = internalIndentT.getQtyRequest();
                            }
                            internalIndentT.setQtyIssued(IssuedQty);
                           
                            
                            System.out.println("internalIndentT.getQtyIssued()" + internalIndentT.getQtyIssued() + "  " + internalIndentT.getQtyRequest());
                            if ((IssuedQty == null) || (internalIndentT.getQtyIssued().intValue() != internalIndentT.getQtyRequest().intValue()))
                            {
                              statusflag = true;
                            }
                            hbt.update(internalIndentT);
                            ((StoreIssueT)childList.get(i)).setIssueM(issueM);
                            hbt.save(childList.get(i));
                            hbt.flush();
                            hbt.refresh(internalIndentT);
                          }
                        }
                        

                        BigDecimal issueQty = new BigDecimal(0.0D);
                        
                        if (batchStockObj.getIssueQty() != null) {
                          issueQty = batchStockObj.getIssueQty();
                        }
                        batchStockObj.setIssueQty(issueQty.add(((StoreIssueT)childList.get(i)).getQtyIssued()));
                        hbt.update(batchStockObj);
                        

                        int storeFyId = 0;
                        Criteria c = session.createCriteria(StoreFyDocumentNo.class).add(
                          Restrictions.eq("Department.Id", Integer.valueOf(deptId))).add(
                          Restrictions.eq("Hospital.Id", Integer.valueOf(hospitalId)));
                        storeFyDocumentNoList = c.list();
                        for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
                          storeFyId = documentNo.getId().intValue();
                        }
                        


                        StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo)hbt.load(StoreFyDocumentNo.class, Integer.valueOf(storeFyId));
                        storeFyDocumentNo.setIssueDeptNo(issueNo);
                        hbt.update(storeFyDocumentNo);
                        hbt.refresh(storeFyDocumentNo);
                        j++;
                        k++;
                      }
    				else
    				{
    					innerStatusflag = false;
    				}
                }
                else
                {
                	((StoreIssueT)childList.get(i)).setQtyIssued(new BigDecimal(0.0));
                	((StoreIssueT)childList.get(i)).setIssueM(issueM);
                    hbt.save(childList.get(i));
                    hbt.flush();
                	innerStatusflag = false;
                }
				
			
			}
			int p=0;
			int q=1;

			Vector itemList = box.getVector(RequestConstants.ITEM_ID);
            
		/*	List indentList =session.createCriteria(StoreInternalIndentM.class).add(Restrictions.eq("Id", issueM.getRequestNo().getId()))
					.add(Restrictions.eq("Hospital.Id", hospitalId)).list(); */
			
			
			
			
			//code starts for Status change in store_internal_indent_m table
			
		/*
			if(innerStatusflag)
			{
				if(statusflag)
	            {
	        		 
	    					StoreInternalIndentM indentM1 = new StoreInternalIndentM();
	    					indentM1 = (StoreInternalIndentM)indentList.get(0);
	    					indentM1.setStatus("w");
	    					hbt.update(indentM1);  
	            }
				 else
		            {
		            
		    					StoreInternalIndentM indentM1 = new StoreInternalIndentM();
		    					indentM1 = (StoreInternalIndentM)indentList.get(0);
		    					indentM1.setStatus("y");
		    					hbt.update(indentM1); 
		            }
			}
            
            else
            {
            
    					StoreInternalIndentM indentM1 = new StoreInternalIndentM();
    					indentM1 = (StoreInternalIndentM)indentList.get(0);
    					indentM1.setStatus("w");
    					hbt.update(indentM1); 
            }*/
            
		/*	StoreInternalIndentM indentMFull = new StoreInternalIndentM();
			indentMFull = (StoreInternalIndentM)indentList.get(0);
			Set<StoreInternalIndentT> indentTSet = indentMFull.getStoreInternalIndentTs();
			Set<StoreIssueM> storeIssueMSet= indentMFull.getStoreIssueMsByRequestNo();*/
			
			List<StoreIssueT> storeIssueTList =session.createCriteria(StoreIssueT.class)
					.createAlias("IssueM", "im")
					.createAlias("im.RequestNo", "siim")
					.add(Restrictions.eq("siim.Id", box.getInt("requestNo"))).list();
			
			/*StoreInternalIndentM indentMFull = new StoreInternalIndentM();
			indentMFull = (StoreInternalIndentM)storeIssueMList.get(0).getRequestNo();*/
			
			List<StoreInternalIndentT> indentTList =session.createCriteria(StoreInternalIndentT.class)
					.add(Restrictions.eq("Internal.Id",box.getInt("requestNo"))).list();
			
			
			/*Set<StoreInternalIndentT> indentTSet = indentMFull.getStoreInternalIndentTs();*/
		
			
		
			
			int issuedQty=0;
			for(StoreInternalIndentT siit : indentTList)
			{
				/*StoreInternalIndentT siit = (StoreInternalIndentT)indTItr.next();*/
				issuedQty = 0;
				System.out.println("siit"+siit.getId());
				
					for(StoreIssueT sit: storeIssueTList)
					{
						
						if(sit.getItem().getId().intValue()==siit.getItem().getId().intValue())
						{
							issuedQty += (sit.getQtyIssued()!=null?sit.getQtyIssued().intValue():0);
                            System.out.println("issuedQty"+issuedQty);
						}
					}
				
				  System.out.println("issuedQty1"+issuedQty);
				  System.out.println("siit.getQtyRequest().intValue("+siit.getQtyRequest().intValue());
				if(siit.getQtyRequest().intValue()>issuedQty)
				{
					fullIssued = false;
				}
			}
			
			if(fullIssued)
			{
				
				indentTList.get(0).getInternal().setStatus("y");
				
			}
			else
			{
			
				indentTList.get(0).getInternal().setStatus("w");
				
			}
			hbt.flush();
			
            //code ends for Status change in store_internal_indent_m table
            
            //code start for RC
                       
			
			String[] rcIdArray = (String[])box.getValuesArray("rc");   	
			
			
	
			System.out.println("rcIdArray"+rcIdArray==null);
			if(rcIdArray!=null)
			{
				
				RcRequestHeader requestHeader = new RcRequestHeader();
				List<RcRequestDetails> rdDetailsList = new ArrayList<RcRequestDetails>();
				rdDetailsList= session.createCriteria(RcRequestDetails.class)
				.createAlias("Header", "h")
				/*.add(Restrictions.eq("Item.Id", box.getInt("itemId"+k)))*/
				.add(Restrictions.eq("h.Status", "u").ignoreCase())
				.add(Restrictions.eq("h.Department.Id", WpId)).list();
				
				if(rdDetailsList.size()>0)
				{
					requestHeader = rdDetailsList.get(0).getHeader();
				}
				else
				{
					
		           /* int requestHeaderId=0;*/
		    		
		    		/*String txtRequestType = "Save";*/ // for save/submit(forward) to centre HEAD    		
		    		String requestNo =""; 
		    		
		    		
		    		/*int mrdepartmentId = box.getInt("mrdepartmentId");*/
		    		
		    		
		    		
		 /*   			
		    		String Status = "n";
		    		if(txtRequestType.equalsIgnoreCase("SAVE"))
		    		{
		    			Status = "u";
		    		}
		    		if(txtRequestType.equalsIgnoreCase("SUBMIT"))
		    		{
		    			Status = "s";
		    		}*/
		    		
		    		
		    		MasHospital hospital = new MasHospital();
		    		hospital.setId(hospitalId);
		    		
		    		MasDepartment department = new MasDepartment();
		    		department.setId(deptId);
		    		
		    		
		    		/*MasDepartment mrdepartment = new MasDepartment();
		    		mrdepartment.setId(mrdepartmentId);*/
		    		
		    		int UserId = box.getInt("userId");
		    		Users user = new Users();
		    		user.setId(UserId);
		    		
		    		Date changedDate = new Date();
		    		String changedTime = (String) HMSUtil.getCurrentDateAndTime().get("currentTime");
		    		
		    		
		    		Map<String, Object> adMap = new HashMap<String, Object>();
		    				 
		    				    adMap.put("tableObjectName", "RcRequestHeader");			
		    					adMap.put("isHospitalWise", "n");
		    					adMap.put("hospitalId", hospitalId);
		    					adMap.put("isYearly", "y");			
		    					adMap.put("isMonthly", "n");
		    					adMap.put("isPrefix", "y");
		    				
		    					adMap.put("transactionPrefixProperty", "transactionPrefixForRCRequest");
		    					
		    					try{
		    						requestNo = HMSUtil.generateTransactionSequence(adMap, session, hbt);
		    					}catch(Exception e)
		    					{
		    						System.out.print("Exception in Method Save MR="+e);
		    					}
		    				   requestHeader.setRequestNo(requestNo);
		    				   requestHeader.setRequestDate(changedDate);
		    				  
		    				  
		    				   requestHeader.setHospital(hospital);
		    				   /*requestHeader.setToStore(mrdepartment);*/
		    				   requestHeader.setDepartment(department);
		    				 
		    				   
		    				   requestHeader.setReqestedBy(user);	
		    				   requestHeader.setLastChgDate(changedDate);
		    				   requestHeader.setStatus("u");
		    				   requestHeader.setLastChgBy(user);
		    				   System.out.println("department.getDepartmentName()"+department.getDepartmentName());
		    				   
		    					hbt.save(requestHeader);
		    						/*datamap.put("requestHeaderId", requestHeader.getId());*/
		    							    					
		    						
		    		
				}
				
				boolean rcDetailFlag = true;
				Map<Integer, Integer> itemMap = new HashMap<Integer, Integer>();
				boolean reqQtyFlag = true; 
				for(int l=0; l<rcIdArray.length; l++)
				{   
					
					//for RC
					rcDetailFlag = true;
					
					
						if(rdDetailsList.size()>0)
						{
							for(RcRequestDetails rcrd: rdDetailsList)
							{
								if(rcrd.getItem().getId()==Integer.parseInt(rcIdArray[l]))
								{
														
								
									rcDetailFlag = false;
									rcrd.setFromDepartments((rcrd.getFromDepartments()!=null?rcrd.getFromDepartments()+", ":"")+indentTList.get(0).getInternal().getDepartment().getDepartmentName());
								    System.out.println("rcrd");
									hbt.update(rcrd);
									hbt.flush();
									
								}
								
							}
							if(rcDetailFlag)
							{
								int ItemId = Integer.parseInt(rcIdArray[l]);
								MasStoreItem item = new MasStoreItem();
								item.setId(ItemId);
										
								
								
								
							/*	BigDecimal txtRequiredQty = new BigDecimal(box.getDouble("txtRequiredQty" + array_RowId[i])).setScale(2, BigDecimal.ROUND_HALF_UP);
								int txtAvailableStock = box.getInt("txtAvailableStock" + array_RowId[i]);
								double txtWPStock = box.getDouble("txtWPStock" + array_RowId[i]);
								double txtCDStock = box.getDouble("txtCDStock" + array_RowId[i]);
								double txtStoresStock = box.getDouble("txtStoresStock" + array_RowId[i]);
								String txtRemarks = box.getString("txtRemarks" + array_RowId[i]);*/
								
								RcRequestDetails rcDetails = new RcRequestDetails();
								
								rcDetails.setItem(item);
											
							/*	rcDetails.setReasonForDemand(txtRemarks);*/
								rcDetails.setReqQty(new BigDecimal(0));
								
								rcDetails.setHeader(requestHeader);	
							/*	rcDetails.setAvailableStock(new BigDecimal(txtAvailableStock));
								rcDetails.setCdStock(new BigDecimal(txtCDStock));
								rcDetails.setWpStock(new BigDecimal(txtWPStock));
								rcDetails.setStoresStock(new BigDecimal(txtStoresStock));
								*/						
								
								rcDetails.setFromDepartments((rcDetails.getFromDepartments()!=null?rcDetails.getFromDepartments()+", ":"")+indentTList.get(0).getInternal().getDepartment().getDepartmentName());
								hbt.save(rcDetails);
								hbt.refresh(rcDetails);
								
								
							}
						
						}
						else{
							

							
								
								int ItemId = Integer.parseInt(rcIdArray[l]);
								MasStoreItem item = new MasStoreItem();
								item.setId(ItemId);
										
								
								
								
							/*	BigDecimal txtRequiredQty = new BigDecimal(box.getDouble("txtRequiredQty" + array_RowId[i])).setScale(2, BigDecimal.ROUND_HALF_UP);
								int txtAvailableStock = box.getInt("txtAvailableStock" + array_RowId[i]);
								double txtWPStock = box.getDouble("txtWPStock" + array_RowId[i]);
								double txtCDStock = box.getDouble("txtCDStock" + array_RowId[i]);
								double txtStoresStock = box.getDouble("txtStoresStock" + array_RowId[i]);
								String txtRemarks = box.getString("txtRemarks" + array_RowId[i]);*/
								
								RcRequestDetails rcDetails = new RcRequestDetails();
								
								rcDetails.setItem(item);
											
							/*	rcDetails.setReasonForDemand(txtRemarks);*/
								rcDetails.setReqQty(new BigDecimal(0));
								
								rcDetails.setHeader(requestHeader);	
							/*	rcDetails.setAvailableStock(new BigDecimal(txtAvailableStock));
								rcDetails.setCdStock(new BigDecimal(txtCDStock));
								rcDetails.setWpStock(new BigDecimal(txtWPStock));
								rcDetails.setStoresStock(new BigDecimal(txtStoresStock));
								*/
								rcDetails.setFromDepartments((rcDetails.getFromDepartments()!=null?rcDetails.getFromDepartments()+", ":"")+indentTList.get(0).getInternal().getDepartment().getDepartmentName());
								hbt.save(rcDetails);
								hbt.refresh(rcDetails);
								
															
								
								
											
						
						}
				
    						
		}
    				
            
			}  
            
            // code ends for RC
	
			
			b = true;
			tx.commit();
		}catch(Exception exception){
			b = false;
			tx.rollback();
			exception.printStackTrace();
		}
		map.put("issueId", issueId);
		map.put("b", b);
		return map;
	}
	
	//ASHUTOSH

	public Map<String, Object> getLpPrescriptionList(Map<String, Object> mapForDs)
	{
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		List<PatientPrescriptionHeader> prescriptionList = new ArrayList<PatientPrescriptionHeader>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> employeeList=new ArrayList<MasEmployee>();

		Date currentDate = new Date();

		Session session = (Session) getSession();
		Criteria crit = null;
		int hospitalId=0;
		int deptId = 0;
		if (mapForDs.get("deptId") != null)
			deptId = Integer.parseInt("" + mapForDs.get("deptId"));
		if (mapForDs.get("hospitalId") != null)
			hospitalId = Integer.parseInt("" + mapForDs.get("hospitalId"));
		if (mapForDs.get("currentDate") != null)
			currentDate =(Date) mapForDs.get("currentDate");

		try {
			/*crit = session.createCriteria(PatientPrescriptionHeader.class).createAlias(
								"Department", "dept").add(Restrictions.eq("dept.Id", deptId)).add(Restrictions.ne("Status", "c"))
								.add(Restrictions.eq("PrescriptionDate",currentDate)).add(Restrictions.eq("Hospital.Id",hospitalId));
			 */
			prescriptionList=session.createSQLQuery("select pph.* from Patient_Prescription_Header pph,store_grn_t sgt,Patient_Prescription_details ppd where sgt.ID=ppd.ID and pph.PRESCRIPTION_ID=ppd.PRESCRIPTION_ID AND SGT.ID_ISSUE IS NULL").list();

			//prescriptionList = crit.list();

			departmentList = session.createCriteria(MasDepartment.class).add(Restrictions.eq("Status", "y")).addOrder(Order.asc("DepartmentName")).list();
			employeeList=session.createCriteria(MasEmployee.class).add(Restrictions.eq("EmpCategory.Id",1)).
			add(Restrictions.eq("Hospital.Id",hospitalId)).add(Restrictions.eq("Status","y")).addOrder(Order.asc("FirstName")).list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("prescriptionList", prescriptionList);
		map.put("departmentList", departmentList);
		map.put("employeeList",employeeList);
		return map;
	}
	public Map<String, Object> getLpPrescriptionDetails(Map<String, Object> mapForDs)
	{
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		List<PatientPrescriptionHeader> prescriptionList = new ArrayList<PatientPrescriptionHeader>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> employeeList=new ArrayList<MasEmployee>();
		List<StoreOpPatientIssueM>  storeOpPatientIssueMList=new ArrayList<StoreOpPatientIssueM>();
		Date fromDate = new Date();
		Date toDate = new Date();
		Session session = (Session) getSession();
		Criteria crit = null;
		int deptId = 0;
		if (mapForDs.get("departmentId") != null)
			deptId = Integer.parseInt("" + mapForDs.get("departmentId"));

		if (mapForDs.get("fromDate") != null) {
			fromDate = (Date) mapForDs.get("fromDate");
		}
		if (mapForDs.get("toDate") != null) {
			toDate = (Date) mapForDs.get("toDate");
		}

		// *************** add javed khan on 28-08-2012
		int hospitalId = 0;
		if (mapForDs.get("hospitalId") != null){
			hospitalId = Integer.parseInt("" + mapForDs.get("hospitalId"));
		}
		// *************** add javed khan on 28-08-2012

		/*	int medicalOfficerId = 0;
					if (mapForDs.get("medicalOfficerId") != null)
						medicalOfficerId = Integer.parseInt(""+mapForDs.get("medicalOfficerId"));
			        if((deptId !=0)&&(medicalOfficerId !=0))
			        {
			             crit = session.createCriteria(PatientPrescriptionHeader.class).add(
			   				Restrictions.ne("Status", "c")).createAlias(
			   				"Department", "dept").add(
			   				Restrictions.eq("dept.Id", deptId)).add(Restrictions.eq("EmpId", medicalOfficerId))
			   				.add(Restrictions.between("PrescriptionDate",
			   								fromDate, toDate));
			        }
			        else if(deptId !=0)
			        {
			          crit = session.createCriteria(PatientPrescriptionHeader.class).add(
							Restrictions.ne("Status", "c")).createAlias(
							"Department", "dept").add(
							Restrictions.eq("dept.Id", deptId))
							.add(Restrictions.between("PrescriptionDate",
											fromDate, toDate));
			        }else if(medicalOfficerId !=0)
			        {
			            crit = session.createCriteria(PatientPrescriptionHeader.class).add(
			  				Restrictions.ne("Status", "c")).add(Restrictions.eq("EmpId", medicalOfficerId))
			  				.add(Restrictions.between("PrescriptionDate",
			  								fromDate, toDate));

			        }else
			        {
			            crit = session.createCriteria(PatientPrescriptionHeader.class).add(
			  				Restrictions.ne("Status", "c")).add(Restrictions.between("PrescriptionDate",
			  								fromDate, toDate));

			        }*/
		List objectList = new ArrayList();
		//Criteria pph=new PatientPrescriptionHeader();


		// *************** add and comment by javed khan on 28-08-2012

		//objectList=session.createSQLQuery("select pph.prescription_id,pph.HIN_ID from Patient_Prescription_Header pph,STORE_LOANIN_T sgt,Patient_Prescription_details ppd where sgt.ID=ppd.ID and pph.PRESCRIPTION_ID=ppd.PRESCRIPTION_ID AND  pph.STATUS='l' AND SGT.ID_ISSUE IS NULL").list();
		
		// *************** add and comment by javed khan on 08-08-2013
		//objectList=session.createSQLQuery("select pph.prescription_id,pph.HIN_ID from Patient_Prescription_Header pph,STORE_LOANIN_T sgt,Patient_Prescription_details ppd where sgt.ID=ppd.ID and pph.PRESCRIPTION_ID=ppd.PRESCRIPTION_ID AND  pph.STATUS='l' AND SGT.ID_ISSUE IS NULL and pph.hospital_id = "+hospitalId).list();
		Query qry = session.createSQLQuery("select pph.prescription_id,pph.HIN_ID from Patient_Prescription_Header pph,STORE_LOANIN_T sgt,Patient_Prescription_details ppd where sgt.ID=ppd.ID and pph.PRESCRIPTION_ID=ppd.PRESCRIPTION_ID AND  pph.STATUS='l' AND SGT.ID_ISSUE IS NULL and pph.hospital_id = ?");
		qry.setInteger(0, hospitalId);
		objectList = qry.list();
		
		// *************** add and comment by javed khan on 28-08-2012
		Iterator itr=objectList.iterator();
		String chk="";
		while(itr.hasNext()){

			Object[] tuple = (Object[]) itr.next();
			if(!chk.equalsIgnoreCase(tuple[0].toString())){
				Criteria  ppc=session.createCriteria(PatientPrescriptionHeader.class).add(Restrictions.eq("Id", Integer.parseInt(tuple[0].toString())));
				List<PatientPrescriptionHeader>ppl=ppc.list();
				PatientPrescriptionHeader pph=ppl.get(0);
				prescriptionList.add(pph);
			}
			chk=tuple[0].toString();
		}
		map.put("prescriptionList", prescriptionList);
		departmentList = session.createCriteria(MasDepartment.class).add(Restrictions.eq("Status", "y")).list();
		map.put("departmentList", departmentList);
		employeeList = session.createCriteria(MasEmployee.class).add(
				Restrictions.eq("Status", "y")).add(
						Restrictions.eq("EmpCategory.Id",1)).list();
		map.put("employeeList",employeeList);
		/*storeOpPatientIssueMList=session.createCriteria(StoreOpPatientIssueM.class).add(Restrictions.eq("Status", "y")).list();
					map.put("storeOpPatientIssueMList",storeOpPatientIssueMList);*/
		return map;
	}





	public List<Object> getBatchNoList(String serviceNo,int hospitalId) {
		Session session = (Session) getSession();
		List<Object> patientList = new ArrayList<Object>();

		try {
			if (!serviceNo.equals("")) {
				patientList = session.createQuery("select distinct sibs.BatchNo FROM  StoreItemBatchStock  sibs WHERE sibs.Item IN (select masStoreItem.Id from MasStoreItem masStoreItem WHERE masStoreItem.PvmsNo='"+serviceNo+"') and sibs.Hospital.Id='"+ hospitalId +"'").list();
				Iterator itr=patientList.iterator();
			}
		} catch (HibernateException e) {
			e.printStackTrace();
			//session.close();
		}
		return patientList;
	}

	public String getBarCodeNumber(String motherHinNo,String serviceNo) {
		List<Object> alist = new ArrayList<Object>();
		String motherName = "";
		Session session = (Session) getSession();
		alist = session.createQuery("select distinct storeibs.BarcodeNo from StoreItemBatchStock storeibs where storeibs.Item IN (select masStoreItem.Id from MasStoreItem masStoreItem WHERE masStoreItem.PvmsNo='"+serviceNo+"') and storeibs.BatchNo='"+motherHinNo+"'").list();
		if (alist.size() > 0) {
			String patient = (String)alist.get(0);
			if(patient==null){
				motherName=motherHinNo;
				Query que=session.createQuery("update StoreItemBatchStock storeibs set storeibs.BarcodeNo=:newBarCodeNumber where storeibs.Item IN (select masStoreItem.Id from MasStoreItem masStoreItem WHERE masStoreItem.PvmsNo=:serviceNo) and storeibs.BatchNo=:motherHinNo");
				que.setString("serviceNo",serviceNo);
				que.setString("motherHinNo",motherHinNo);
				que.setString("newBarCodeNumber",motherName);
				int rowCount=que.executeUpdate();
			}else{
				motherName = patient;
			}
		}
		return motherName;
	}


	@Override
	public Map<String, Object> checkCurrentBatchStock(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreItemBatchStock> batchList = new ArrayList<StoreItemBatchStock>();
		boolean flag = false;
		int batchId = 0;
		List batchIdList = new ArrayList();
		List issueQtyList = new ArrayList();
		if(dataMap.get("batchIdList") != null){
			batchIdList = (List)dataMap.get("batchIdList");
		}
		if(dataMap.get("issueQtyList") != null){
			issueQtyList = (List)dataMap.get("issueQtyList");
		}
		int counter = batchIdList.size();
		Session session = getSession();
		String message = "";
		for (int i = 0; i < counter; i++) {
			batchId = (Integer)batchIdList.get(i);
			if (batchId != 0) {
				batchList = session.createCriteria(StoreItemBatchStock.class)
				.add(Restrictions.idEq(batchId)).list();
				StoreItemBatchStock storeItemBatchStock = batchList.get(0);
				BigDecimal closingStock = new BigDecimal(0);
				if (storeItemBatchStock.getClosingStock() != null) {
					closingStock = storeItemBatchStock.getClosingStock();
				}

				if (closingStock.compareTo(new BigDecimal((String)issueQtyList.get(i))) >= 0) {
					flag = true;
				} else {
					flag = false;
					message += "Stock not available for batch no "
						+ storeItemBatchStock.getBatchNo() + " of Item "
						+ storeItemBatchStock.getItem().getNomenclature()
						+ ".\n";

				}
			}
		}
		map.put("flag", flag);
		map.put("message", message);
		return map;
	}



	// javed khan
	public Map<String, Object> generateExcelForDepot(Map<String,Object> dataMap)
	{
		int hospitalId = (Integer)dataMap.get("hospitalId");
		int deptId = (Integer)dataMap.get("deptId");
		String hospitalName = (String)dataMap.get("hospitalName");
		String deptName = (String)dataMap.get("deptName");
		String indentNo = (String)dataMap.get("indentNo");
		String indentDate="";
		String postalAddress="";
		String nrs="";
		String authority="";
		String Indentor="";
		String IndentType="";
		String self_life="";
		String section="";
		String code_head="";
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIndentM>storeIndentMList=new

		ArrayList<StoreIndentM>();
		List<StoreIndentT>storeIndentTList=new ArrayList<StoreIndentT>();
		int indentId=0;
		try {


			storeIndentMList=session.createCriteria(StoreIndentM.class)
			.add(Restrictions.eq("IndentNo",indentNo))
			.add(Restrictions.eq("Department.Id",deptId))
			.add(Restrictions.eq("Hospital.Id",hospitalId))
			.add(Restrictions.eq("IndentType","d")).list();

			if(storeIndentMList.size()>0)
			{
				indentId=storeIndentMList.get(0).getId();



				storeIndentTList=session.createCriteria(StoreIndentT.class)
				.add(Restrictions.eq("Indent.Id",indentId)).list();

				if(storeIndentMList.get(0).getIndentDate()!=null)
				{


					indentDate=HMSUtil.changeDateToddMMyyyy(storeIndentMList.get(0).getIndentDate());
				}
				else
				{
					indentDate="";
				}
				if(storeIndentMList.get(0).getNrs()!=null)
				{
					nrs=storeIndentMList.get(0).getNrs();
				}
				else
				{
					nrs="";
				}


				if(storeIndentMList.get(0).getPatientDetails()!=null)
				{


					postalAddress=storeIndentMList.get(0).getPatientDetails();
				}
				else
				{
					postalAddress="";
				}
				if(storeIndentMList.get(0).getAuthority()!=null)
				{
					authority=storeIndentMList.get(0).getAuthority();
				}
				else
				{

					authority="";
				}
				if(storeIndentMList.get(0).getIndentOption().equals("1")){
					IndentType="Emergent";
				}
				else if(storeIndentMList.get(0).getIndentOption().equals("2")){
					IndentType="3 Months";
				}
				/*else if(storeIndentMList.get(0).getIndentOption().equals("3")){    // javed khan
					IndentType="6 Months";
				}*/
				else{
					IndentType="6 Months";
				}

				if(storeIndentMList.get(0).getSelfLife()!=null)
				{
					self_life=storeIndentMList.get(0).getSelfLife();
				}
				else{
					self_life="";
				}

				if(storeIndentMList.get(0).getSection() !=null)
				{
					section=storeIndentMList.get(0).getSection().getSectionCode();
				}
				else{
					section="";
				}

				if(storeIndentMList.get(0).getCodeHead() !=null)
				{
					code_head=storeIndentMList.get(0).getCodeHead();
				}
				else{
					code_head="";
				}

				Indentor=storeIndentMList.get(0).getHospital().getHospitalName()+" "+
				storeIndentMList.get(0).getHospital().getAddress();
			}

			byte[] buffer = new byte[18024];
			HSSFWorkbook wb = new HSSFWorkbook();
			HSSFSheet sheet = wb.createSheet("TESTEXCEL");
			// Create a new font and alter it.
			HSSFFont font = wb.createFont();
			font.setFontHeightInPoints((short) 13);
			font.setFontName(HSSFFont.FONT_ARIAL);
			font.setColor((short) 0x0);
			font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);

			HSSFFont font1 = wb.createFont();
			font1.setFontHeightInPoints((short) 10);
			font1.setFontName(HSSFFont.FONT_ARIAL);
			font1.setColor((short) 0x0);
			font1.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);

			HSSFCellStyle style1 = wb.createCellStyle();
			style1.setFont(font);

			HSSFCellStyle style = wb.createCellStyle();
			style.setFont(font1);


			HSSFRow hr1 = sheet.createRow(0);
			HSSFCell hc1=hr1.createCell((short)2);
			hc1.setCellValue("     ");
			hc1.setCellStyle(style1);


			HSSFRow hr2 = sheet.createRow(1);
			HSSFCell hc2=hr2.createCell((short)3);
			hc2.setCellValue("INDENT DEMAND ISSUE VOUCHER");
			hc2.setCellStyle(style);

			HSSFRow hr221 = sheet.createRow(1);
			HSSFCell hc221=hr221.createCell((short)8);
			hc221.setCellValue("In Lieu of F-1216");
			hc221.setCellStyle(style);

			HSSFRow hr222 = sheet.createRow(2);
			HSSFCell hc222=hr222.createCell((short)0);
			hc222.setCellValue(" "+IndentType+" Indent "+self_life+" Group Sec- "+section);
			hc222.setCellStyle(style);

			HSSFRow hr3 = sheet.createRow(4);
			HSSFCell hc3=hr3.createCell((short)0);
			hc3.setCellValue("Indent Demand No.");
			hc3.setCellStyle(style);

			HSSFRow hr4 = sheet.createRow(4);
			HSSFCell hc4=hr4.createCell((short)1);
			hc4.setCellValue(indentNo);

			HSSFRow hr33 = sheet.createRow(4);
			HSSFCell hc33=hr33.createCell((short)3);
			hc33.setCellValue("Supply Depot");
			hc33.setCellStyle(style);

			HSSFRow hr34 = sheet.createRow(4);
			HSSFCell hc34=hr34.createCell((short)4);
			hc34.setCellValue(storeIndentMList.get(0).getSuppliedBy().getAirForceDepotName());

			HSSFRow hr35 = sheet.createRow(4);
			HSSFCell hc35=hr35.createCell((short)7);
			hc35.setCellValue("PAYMENT ISSUE BY BOOK DEBIT");
			hc35.setCellStyle(style);

			HSSFRow hr5 = sheet.createRow(5);
			HSSFCell hc5=hr5.createCell((short)0);
			hc5.setCellValue("Dated");
			hc5.setCellStyle(style);

			HSSFRow hr6 = sheet.createRow(5);
			HSSFCell hc6=hr6.createCell((short)1);
			hc6.setCellValue(indentDate);


			HSSFRow hr7 = sheet.createRow(6);
			HSSFCell hc7=hr7.createCell((short)0);
			hc7.setCellValue("Sheet No.");
			hc7.setCellStyle(style);

			HSSFRow hr8 = sheet.createRow(6);
			HSSFCell hc8=hr8.createCell((short)1);
			hc8.setCellValue("01");

			HSSFRow hr9 = sheet.createRow(7);
			HSSFCell hc9=hr9.createCell((short)0);
			hc9.setCellValue("Authy Scale");
			hc9.setCellStyle(style);

			HSSFRow hr10 = sheet.createRow(7);
			HSSFCell hc10=hr10.createCell((short)1);
			hc10.setCellValue(authority);

			HSSFRow hr11 = sheet.createRow(8);
			HSSFCell hc11=hr11.createCell((short)0);
			hc11.setCellValue("Indentor");
			hc11.setCellStyle(style);

			HSSFRow hr12 = sheet.createRow(8);
			HSSFCell hc12=hr12.createCell((short)1);
			hc12.setCellValue(Indentor);


			HSSFRow hr13 = sheet.createRow(9);
			HSSFCell hc13=hr13.createCell((short)0);
			hc13.setCellValue("Address");
			hc13.setCellStyle(style);

			HSSFRow hr14 = sheet.createRow(9);
			HSSFCell hc14=hr14.createCell((short)1);
			hc14.setCellValue(postalAddress);

			HSSFRow hr15 = sheet.createRow(10);
			HSSFCell hc15=hr15.createCell((short)0);
			hc15.setCellValue("Signature");
			hc15.setCellStyle(style);

			HSSFRow hr151= sheet.createRow(10);
			HSSFCell hc151=hr151.createCell((short)1);
			hc151.setCellValue(" ");

			HSSFRow hr155 = sheet.createRow(11);
			HSSFCell hc155=hr155.createCell((short)0);
			hc155.setCellValue("Code Head");
			hc155.setCellStyle(style);

			HSSFRow hr156= sheet.createRow(11);
			HSSFCell hc156=hr156.createCell((short)1);
			hc156.setCellValue(code_head);

			HSSFRow hr16 = sheet.createRow(13);
			HSSFCell hc16=hr16.createCell((short)0);
			hc16.setCellValue("Sl No.");
			hc16.setCellStyle(style);

			HSSFRow hr17= sheet.createRow(13);
			HSSFCell hc17=hr17.createCell((short)1);
			hc17.setCellValue("PVMS No.");
			hc17.setCellStyle(style);

			HSSFRow hr18 = sheet.createRow(13);
			HSSFCell hc18=hr18.createCell((short)2);
			hc18.setCellValue("Nomenclature");
			hc18.setCellStyle(style);

			HSSFRow hr19 = sheet.createRow(13);
			HSSFCell hc19=hr19.createCell((short)3);
			hc19.setCellValue("A/U");
			hc19.setCellStyle(style);

			HSSFRow hr20 = sheet.createRow(13);
			HSSFCell hc20=hr20.createCell((short)4);
			hc20.setCellValue("Qty Held");
			hc20.setCellStyle(style);

			HSSFRow hr21 = sheet.createRow(13);
			HSSFCell hc21=hr21.createCell((short)5);
			hc21.setCellValue("MMF");
			hc21.setCellStyle(style);

			HSSFRow hr22 = sheet.createRow(13);
			HSSFCell hc22=hr22.createCell((short)6);
			hc22.setCellValue("Qty Demanded");
			hc22.setCellStyle(style);

			HSSFRow hr23 = sheet.createRow(13);
			HSSFCell hc23=hr23.createCell((short)7);
			hc23.setCellValue("Qty Sanction");
			hc23.setCellStyle(style);

			HSSFRow hr24= sheet.createRow(13);
			HSSFCell hc24=hr24.createCell((short)8);
			hc24.setCellValue("Qty Issued");
			hc24.setCellStyle(style);

			HSSFRow hr25 = sheet.createRow(13);
			HSSFCell hc25=hr25.createCell((short)9);
			hc25.setCellValue("Qty Outstanding");
			hc25.setCellStyle(style);

			HSSFRow hr26 = sheet.createRow(13);
			HSSFCell hc26=hr26.createCell((short)10);
			hc26.setCellValue("Cost Rs P");
			hc26.setCellStyle(style);

			HSSFRow hr27 = sheet.createRow(13);
			HSSFCell hc27=hr27.createCell((short)11);
			hc27.setCellValue("Remarks");
			hc27.setCellStyle(style);

			int row = 14;
			int slno = 0;

			String address="";
			String pvms="";
			String nomenclature="";
			String au="";
			double qtyStock=0f;
			double qtyDemand=0f;
			double qtyMmf=0f;
			double stockHeld=0f;
			for (StoreIndentT storeIndentT:storeIndentTList) {

				if(storeIndentT.getItem()!=null)
				{


					pvms=storeIndentT.getItem().getPvmsNo();


					nomenclature=storeIndentT.getItem().getNomenclature();


					au=storeIndentT.getItem().getItemConversion().getIssueUnit().getUnitName();
				}

				if(storeIndentT.getStockIn()!=null)
				{


					qtyStock=storeIndentT.getStockIn().doubleValue();
				}

				if(storeIndentT.getQtyInDemand()!=null)
				{


					qtyDemand=storeIndentT.getQtyInDemand().doubleValue();
				}
				// javed khan
				if(storeIndentT.getQtyInMmf()!=null)
				{


					qtyMmf=storeIndentT.getQtyInMmf().doubleValue();
				}
				if(storeIndentT.getStockIn()!=null)
				{


					stockHeld=storeIndentT.getStockIn().doubleValue();
				}

				HSSFRow r1 = sheet.createRow(row);
				HSSFCell c1=r1.createCell((short)0);
				c1.setCellValue(++slno);


				HSSFCell c2=r1.createCell((short)1);
				c2.setCellValue(pvms);

				HSSFCell c3=r1.createCell((short)2);
				c3.setCellValue(nomenclature);

				HSSFCell c4=r1.createCell((short)3);
				c4.setCellValue(au);

				HSSFCell c5=r1.createCell((short)4);
				c5.setCellValue(stockHeld);

				HSSFCell c6=r1.createCell((short)5);
				c6.setCellValue(qtyMmf);

				HSSFCell c7=r1.createCell((short)6);
				c7.setCellValue(qtyDemand);

				HSSFCell c8=r1.createCell((short)7);
				c8.setCellValue(" ");

				HSSFCell c9=r1.createCell((short)8);
				c9.setCellValue(" ");

				HSSFCell c10=r1.createCell((short)9);
				c10.setCellValue(" ");

				HSSFCell c11=r1.createCell((short)10);
				c11.setCellValue(" ");

				HSSFCell c12=r1.createCell((short)11);
				c12.setCellValue(" ");

				sheet.setColumnWidth((short)0,(short)(12 * 256));
				sheet.setColumnWidth((short)1,(short)(10 * 270));
				sheet.setColumnWidth((short)2,(short)(35 * 256));
				sheet.setColumnWidth((short)3,(short)(20 * 256));
				sheet.setColumnWidth((short)4,(short)(15 * 256));
				sheet.setColumnWidth((short)5,(short)(15 * 256));
				sheet.setColumnWidth((short)6,(short)(15 * 256));
				sheet.setColumnWidth((short)7,(short)(14 * 256));
				sheet.setColumnWidth((short)8,(short)(10 * 256));
				sheet.setColumnWidth((short)9,(short)(13 * 256));
				sheet.setColumnWidth((short)10,(short)(10 * 256));
				sheet.setColumnWidth((short)11,(short)(10 * 256));


				row++;
			}

			HSSFRow hr30 = sheet.createRow(15+slno);
			HSSFCell hc30=hr30.createCell((short)0);
			hc30.setCellValue("Total Item in this Indent - "+slno+" Item only");
			hc30.setCellStyle(style);

			HSSFRow hr31 = sheet.createRow(17+slno);
			HSSFCell hc31=hr31.createCell((short)7);
			hc31.setCellValue("Certificate");
			hc31.setCellStyle(style);

			HSSFRow hr32 = sheet.createRow(19+slno);
			HSSFCell hc32=hr32.createCell((short)4);
			hc32.setCellValue("Certified that M/M demended vide our indent No "+indentNo+" & issued vide");
			hc32.setCellStyle(style);

			HSSFRow hr37 = sheet.createRow(20+slno);
			HSSFCell hc37=hr37.createCell((short)4);
			hc37.setCellValue("your depot no  P-168/03/2011 has been taken into account while  submitting the indent.");
			hc37.setCellStyle(style);

			String fileName = "IndentToDepot.xls";

			FileOutputStream fileOut = new

			FileOutputStream(fileName);
			wb.write(fileOut);
			fileOut.close();

			map.put("flag", "DataFound");

			map.put("download_path", fileName);
		} catch (IOException ioe) {
			ioe.printStackTrace();
			map.put("flag", "NoData");
		}

		return map;
	}























	public Map<String, Object>  insertIssueForOtherUnits(Map<String, Object> utilMap,Box box) {
		boolean b = false;
		Session session = getSession();
		Transaction tx =null;
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<StoreInternalIndentT> storeInternalTList = new ArrayList<StoreInternalIndentT>();
		List<StoreIssueT> childList=new ArrayList<StoreIssueT>();
		int indentDtId = 0;
		int issueId=0;
		int itemId=0;
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		String issueNo ="";
		String issuedBatchIdAndQty="";

		try{
			tx = session.beginTransaction();
			Date dateStringFormat = null;
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			dateStringFormat = java.sql.Date.valueOf((sdf.format(new Date())));

			if(utilMap.get("hospitalId")!=null){
				hospitalId=(Integer)utilMap.get("hospitalId");
			}

			if(utilMap.get("deptId")!=null){
				deptId=(Integer)utilMap.get("deptId");
			}
			int totalQtyIssued = 0;
			if(utilMap.get("totalQtyIssued")!=null){
				totalQtyIssued=(Integer)utilMap.get("totalQtyIssued");
			}
			if(utilMap.get("issuedBatchIdAndQty")!=null){
				issuedBatchIdAndQty=(String)utilMap.get("issuedBatchIdAndQty");
			}
			if(utilMap.get("issueNo")!=null){
				issueNo=(String)utilMap.get("issueNo");
			}

			StoreIssueM issueM = new StoreIssueM();
			if(utilMap.get("issueM")!=null){
				issueM=(StoreIssueM)utilMap.get("issueM");
			}
			if(utilMap.get("childList")!=null){
				childList=(List<StoreIssueT>)utilMap.get("childList");
			}
			//				    Vector receivedQty = box.getVector(RequestConstants.QTY_ISSUED);
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			hbt.save(issueM);
			hbt.refresh(issueM);
			issueId = issueM.getId();
			map.put("issueId", issueId);
			//int issuemId=issueM.getRequestNo().getId();
			if (childList.size() > 0) {

				for (int i = 0; i < childList.size(); i++) {
					StoreIssueT storeIssueT = new StoreIssueT();
					storeIssueT = (StoreIssueT) childList.get(i);
					storeIssueT.setIssueM(issueM);
					hbt.save(storeIssueT);
				}

			}
			/***code by anand for other unit***/
			/*List indentList = getHibernateTemplate().findByCriteria(DetachedCriteria.forClass(StoreInternalIndentM.class)
				.add(Restrictions.eq("Id", issueM.getRequestNo().getId())));*/
			//List indentList =session.createCriteria(StoreInternalIndentM.class).add(Restrictions.eq("Id", issueM.getRequestNo().getId())).list();
			//StoreInternalIndentM indentM1 = new StoreInternalIndentM();
			//indentM1 = (StoreInternalIndentM)indentList.get(0);
			//indentM1.setStatus("y");
			//session.saveOrUpdate(indentM1);

			//Update Item Stock
			List lstData1 = session.createCriteria(StoreIssueT.class).add(Restrictions.eq("IssueM.Id", issueId)).list();
			//List lstData1 = new ArrayList(header.getIssueId());
			int j=0;
			int k=1;
			for(int i=0;i<lstData1.size();i++) {
				MasStoreItem item = ((StoreIssueT)lstData1.get(i)).getItem();

				List lstdata = getHibernateTemplate().find("from jkt.hms.masters.business.StoreItemBatchStock ss where ss.Item='"+((StoreIssueT)lstData1.get(i)).getItem().getId()
						+"' and ss.BatchNo='"+((StoreIssueT)lstData1.get(i)).getBatchNo().trim()+"'"
						+" and ss.Department.Id='"+ issueM.getDepartment().getId() +"'"
						+" and ss.Hospital.Id='"+ hospitalId +"'");

				StoreItemBatchStock itemBatchStock = new StoreItemBatchStock();
				itemBatchStock =(StoreItemBatchStock)lstdata.get(0);
				StoreItemBatchStock batchStockObj = (StoreItemBatchStock)hbt.load(
						StoreItemBatchStock.class, itemBatchStock.getId());
				if(batchStockObj.getClosingStock() != null){
					batchStockObj.setClosingStock(batchStockObj.getClosingStock()
							.subtract(((StoreIssueT)lstData1.get(i)).getQtyIssued()));
				}
				BigDecimal issueQty = new BigDecimal(0.00);

				if(batchStockObj.getIssueQty() != null){
					issueQty = batchStockObj.getIssueQty();
				}
				batchStockObj.setIssueQty(issueQty.add(((StoreIssueT)lstData1.get(i)).getQtyIssued()));
				hbt.update(batchStockObj);

				int storeFyId = 0;
				Criteria c = session.createCriteria(StoreFyDocumentNo.class).add(
						Restrictions.eq("Department.Id",deptId))
						.add(Restrictions.eq("Hospital.Id",hospitalId));

				storeFyDocumentNoList = c.list();
				for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
					storeFyId = documentNo.getId();
				}
				HibernateTemplate hbt4 = getHibernateTemplate();
				hbt4.setFlushModeName("FLUSH_EAGER");
				hbt4.setCheckWriteOperations(false);
				StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) hbt4.load(StoreFyDocumentNo.class, storeFyId);
				storeFyDocumentNo.setIssueOtherUnitsNo(issueNo);
				hbt4.update(storeFyDocumentNo);
				hbt4.refresh(storeFyDocumentNo);
				j=j+1;
				k = k+1;
			}
			int p=0;
			int q=1;

			Vector itemList = box.getVector(RequestConstants.ITEM_ID);
			/*	for(int ii=0;ii<itemList.size();ii++){
				Criteria crit = session.createCriteria(StoreInternalIndentT.class)
				.createAlias("Internal", "I")
				.createAlias("Item", "item")
				.add(Restrictions.eq("I.Id",issuemId ))
				.add(Restrictions.eq("item.Id",Integer.parseInt(itemList.get(ii).toString())));
				storeInternalTList = crit.list();
				int internalIndentTId =0;
				for(StoreInternalIndentT storeInternalIndentT : storeInternalTList)
				{
				internalIndentTId = storeInternalIndentT.getId();
				HibernateTemplate hbt5 = getHibernateTemplate();
				hbt5.setFlushModeName("FLUSH_EAGER");
				hbt5.setCheckWriteOperations(false);
				StoreInternalIndentT internalIndentT = new StoreInternalIndentT();
				internalIndentT = (StoreInternalIndentT)hbt5.load(StoreInternalIndentT.class, internalIndentTId);
				int quantityRcvd=0;
				if(internalIndentT.getQtyIssued()!=null){
				quantityRcvd=internalIndentT.getQtyIssued();
				}
				int quantityReceivedFinal=quantityRcvd +box.getInt("qtyIssued"+q);
				internalIndentT.setQtyIssued(quantityReceivedFinal);
				String tempIssuedBatchIdAndQty="";
				int     batchId= box.getInt(RequestConstants.BATCH_ID+p);
				issuedBatchIdAndQty=issuedBatchIdAndQty+"#"+batchId+"/"+box.getInt(RequestConstants.QTY_ISSUED+q);
				internalIndentT.setIssuedBatchIdAndQty(issuedBatchIdAndQty);
				hbt5.update(internalIndentT);
				hbt5.refresh(internalIndentT);
				}
				p =p+1;
				q=q+1;
				}*/
			b = true;
			tx.commit();
		}catch(Exception exception){
			b = false;
			tx.rollback();
			exception.printStackTrace();
		}
		map.put("issueId", issueId);
		map.put("b", b);
		return map;
	}

	@Override
	public boolean updateIssueToOtherUnit(Box box) {

		boolean flag = false;
		int headerId = box.getInt(ISSUE_ID);

		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		session = (Session) getSession();
		Transaction tx = null;
		try {
			tx= session.beginTransaction();
			StoreIssueM storeIssueM = (StoreIssueM)hbt.load(StoreIssueM.class, headerId);
			storeIssueM.setDocNo(box.getString(DOC_NO));

			storeIssueM.setDeclaredVide(box.getString(RequestConstants.DECLARED_VIDE));
			storeIssueM.setAuthorityForIssue(box.getString(RequestConstants.AUTHORITY_FOR_ISSUE));
			storeIssueM.setConsineesDemandNo(box.getString(RequestConstants.COSIGNEESDEMANDNO));
			storeIssueM.setRemarks(box.getString(REMARKS));


			MasStoreAirForceDepot department2 = new MasStoreAirForceDepot();
			department2.setId(box.getInt(DEPARTMENT_ID_TEMP));
			storeIssueM.setToUnit(department2);

			storeIssueM.setLastChgBy(box.getString("userName"));
			storeIssueM.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(date));
			storeIssueM.setLastChgTime(time);

			/*MasEmployee employee2 = new MasEmployee();
			    	employee2.setId(box.getInt(APPROVED_BY));
			    	storeIssueM.setApprovedBy(employee2);*/

			MasEmployee employee3 = new MasEmployee();
			employee3.setId(box.getInt(ISSUED_BY));
			storeIssueM.setIssuedBy(employee3);

			hbt.update(storeIssueM);


			Vector detailsIds = box.getVector("dtId");
			Vector batchIds = box.getVector(BATCH_ID);
			int j=0;
			for (int i = 0; i < detailsIds.size(); i++) {
				j=1;
				int detailId = Integer.parseInt((String)detailsIds.get(i));
				BigDecimal qty =  new BigDecimal(box.getString("qtyIssued"+j));
				BigDecimal existingQty =  new BigDecimal(0);

				StoreIssueT storeIssueT = (StoreIssueT)hbt.load(StoreIssueT.class, detailId);
				existingQty = storeIssueT.getQtyIssued();
				storeIssueT.setQtyIssued(qty);
				hbt.update(storeIssueT);

				int batchId = Integer.parseInt(batchIds.get(i).toString());
				StoreItemBatchStock batchStock = (StoreItemBatchStock)hbt.load(StoreItemBatchStock.class, batchId);

				batchStock.setClosingStock(batchStock.getClosingStock().subtract(qty.subtract(existingQty)));

				if(batchStock.getIssueQty() != null){
					batchStock.setIssueQty(batchStock.getIssueQty().add(qty.subtract(existingQty)));
				}else{
					batchStock.setIssueQty(qty.subtract(existingQty));
				}

				hbt.update(batchStock);
				j++;

			}
			tx.commit();
			flag=true;
		} catch (DataAccessException e) {
			e.printStackTrace();
			if(tx !=null){
				tx.rollback();
			}
		}

		return flag;

	}
	public Map<String, Object> reportPvms(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		session = (Session) getSession();
		String pvmsNo = null;
		int deptId = 0;
		int item_id = 0;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		List objectList = new ArrayList();
		List objectListStockStatus=new ArrayList();
		List objectListBatchDetails=new ArrayList();
		List objectListReciptDetails=new ArrayList();
		List objectListIssueDetails=new ArrayList();
		List objectListSurplusDetails=new ArrayList();
		List objectListDefecientDetails=new ArrayList();
		//pvmsNo = "" + dataMap.get("pvmsNo");
		try {
			//deptId = Integer.parseInt("" + dataMap.get("deptId"));
			String qry = "SELECT  nvl(msi.pvms_no,'N/A') AS item_pvms_no,nvl(msi.nomenclature,'N/A') AS item_nomenclature,nvl(mss.SECTION_NAME,'N/A') as item_section,nvl(msic.ITEM_UNIT_NAME,'N/A') AS item_unit_name,nvl(msb.BRAND_NAME,'N/A') as item_brand,nvl(msi.SPECIFICATION,'N/A') as item_spec,nvl(msi.SELF_LIFE,'N/A') as item_life,nvl(msi.COST_PRICE,'N/A') as item_cost,nvl(msu.UNIT_NAME,'N/A') as item_unit_name,nvl(msi.SOURCE_OF_SUPPLY,'N/A') as item_source_of_supply,nvl(msi.REMARKS,'N/A')  as item_remark,nvl(msi.MIN_STOCK,0) as item_min_stock,nvl(msi.ABC,'N/A') as item_abc,nvl(msi.VED,'N/A') as item_ved from mas_store_item msi left outer join mas_store_item_conversion msic on msi.ITEM_CONVERSION_ID=msic.ITEM_CONVERSION_ID left outer join mas_store_section mss on msi.SECTION_ID=mss.SECTION_ID left outer join mas_store_brand msb on msi.BRAND_ID=msb.BRAND_ID left outer join mas_store_unit msu on msic.PURCHASE_UNIT_ID=msu.UNIT_ID order by item_pvms_no";
			objectList = (List) session.createSQLQuery(qry).list();
			String qry1 = "select  NVL(mas_store_item.pvms_no,'N/A') as mas_store_item_pvms_no,NVL(mas_store_item.nomenclature,'N/A') as mas_store_item_nomenclature,NVL(msic.ITEM_UNIT_NAME,'N/A') as item_unit_name,NVL(sgm.GRN_NO,'N/A') as crvNo,NVL(sgm.GRN_DATE,SYSDATE) as crvDate,sum(nvl(store_item_batch_stock.received_qty,0)) as batch_stock_received_qty,sum(nvl(store_item_batch_stock.issue_qty,0)) as batch_stock_issue_qty,sum(nvl(store_item_batch_stock.opening_balance_qty,0)) as batch_stock_opning_balnce_qty,(sum(nvl(store_item_batch_stock.opening_balance_qty,0)) + sum(nvl(store_item_batch_stock.received_qty,0)) - sum(nvl(store_item_batch_stock.issue_qty,0)))as balance_qty,store_item_batch_stock.item_id from mas_store_item mas_store_item left outer join mas_store_item_conversion msic on mas_store_item.ITEM_CONVERSION_ID=msic.ITEM_CONVERSION_ID inner join store_item_batch_stock store_item_batch_stock on mas_store_item.item_id = store_item_batch_stock.item_id left outer join store_grn_t sgt on store_item_batch_stock.ITEM_ID=sgt.ITEM_ID and store_item_batch_stock.BATCH_NO=sgt.BATCH_NO left outer join store_grn_m sgm  on sgm.GRN_MASTER_ID=sgt.GRN_MASTER_ID group by store_item_batch_stock.item_id,mas_store_item.pvms_no,mas_store_item.nomenclature,msic.ITEM_UNIT_NAME,sgm.GRN_NO,sgm.GRN_DATE order by  mas_store_item_pvms_no,mas_store_item.nomenclature";
			objectListStockStatus = (List) session.createSQLQuery(qry1).list();

			String qry2 = "select nvl(mas_store_item.PVMS_NO,'N/A'),nvl(mas_store_item.NOMENCLATURE,'N/A'),nvl(msic.ITEM_UNIT_NAME,'N/A'),nvl(msb.BRAND_NAME,'N/A'),nvl(MAS_COMPANY.COMPANY_NAME,'N/A'),nvl(store_item_batch_stock.BATCH_NO,'N/A'),nvl(store_item_batch_stock.MANUFACTURE_DATE,SYSDATE),nvl(store_item_batch_stock.EXPIRY_DATE,SYSDATE),nvl(store_item_batch_stock.COST_PRICE,0.0),nvl(store_item_batch_stock.MRP,0.0),nvl(store_item_batch_stock.CLOSING_STOCK,0.0) from store_item_batch_stock store_item_batch_stock,mas_store_item mas_store_item left outer join MAS_COMPANY MAS_COMPANY on mas_store_item.COMPANY_ID=MAS_COMPANY.COMPANY_ID left outer join mas_store_item_conversion msic on mas_store_item.ITEM_CONVERSION_ID=msic.ITEM_CONVERSION_ID left outer join mas_store_brand msb on mas_store_item.BRAND_ID=msb.BRAND_ID where mas_store_item.item_id=store_item_batch_stock.ITEM_ID";
			objectListBatchDetails = (List) session.createSQLQuery(qry2).list();

			String qry3 = "SELECT NVL(mas_store_item.pvms_no,'N/A') AS item_pvms_no,NVL(mas_store_item.nomenclature,'N/A') AS item_nomenclature,NVL(mas_store_item_conversion.ITEM_UNIT_NAME,'N/A') as accountunit,NVL(mas_store_section.SECTION_NAME,'N/A'),NVL(store_grn_m.grn_no,'N/A') AS grn_m_grn_no,NVL(store_grn_m.grn_date,SYSDATE) AS grn_m_grn_date,NVL(store_grn_t.batch_no,'N/A') AS grn_t_batch_no,NVL(store_grn_t.MANUFACTURER_DATE,'N/A') As grn_t_manufacturing,NVL(store_grn_t.expiry_date,SYSDATE) AS grn_t_expiry_date,NVL(mas_store_item.SOURCE_OF_SUPPLY,'N/A'),NVL(mas_store_brand.BRAND_NAME,'N/A') as brand_name,NVL(mas_store_company.COMPANY_NAME,'N/A') as company_name,NVL(store_grn_t.received_qty,0.0) AS grn_t_received_qty,NVL(store_grn_t.unit_rate,0.0) AS grn_t_unit_rate,NVL((store_grn_t.RECEIVED_QTY*store_grn_t.UNIT_RATE),0.0) as cost,NVL(store_grn_t.DISCOUNT,0.0) as grn_t_discount,NVL(store_grn_t.amount_value,0.0) AS grn_t_amount_value FROM store_grn_m store_grn_m LEFT OUTER JOIN store_grn_t store_grn_t ON store_grn_m.grn_master_id = store_grn_t.grn_master_id LEFT OUTER JOIN mas_store_supplier mas_store_supplier ON store_grn_m.supplier_id = mas_store_supplier.supplier_id LEFT OUTER JOIN mas_hospital mas_hospital ON store_grn_m.hospital_id = mas_hospital.hospital_id LEFT OUTER JOIN mas_store_item mas_store_item ON store_grn_t.item_id = mas_store_item.item_id LEFT OUTER JOIN mas_unit_of_measurement mas_unit_of_measurement ON store_grn_t.unit_of_measurement_id = mas_unit_of_measurement.unit_of_measurement_id LEFT OUTER JOIN store_po_header store_po_header ON store_po_header.po_id = store_grn_m.po_id RIGHT OUTER JOIN mas_store_item_conversion mas_store_item_conversion ON mas_store_item.item_conversion_id = mas_store_item_conversion.item_conversion_id LEFT OUTER JOIN mas_store_unit mas_store_unit ON mas_store_item_conversion.purchase_unit_id = mas_store_unit.unit_id LEFT OUTER JOIN mas_store_section mas_store_section on mas_store_item.SECTION_ID=mas_store_section.SECTION_ID LEFT OUTER JOIN mas_store_brand mas_store_brand on mas_store_item.BRAND_ID=mas_store_brand.BRAND_ID LEFT OUTER JOIN mas_store_company mas_store_company on mas_store_item.COMPANY_ID=mas_store_company.COMPANY_CODE";
			objectListReciptDetails = (List) session.createSQLQuery(qry3).list();

			String qry4 = "select nvl(msi.PVMS_NO,'N/A') as pvms,nvl(msi.NOMENCLATURE,'N/A') as nomen,nvl(msic.ITEM_UNIT_NAME,'N/A') as au,nvl(mss.SECTION_NAME,'N/A') as section,nvl(sim.ISSUE_DATE,SYSDATE) as civDate,nvl(sim.ISSUE_NO,'N/A') as civNo,nvl(msi.SOURCE_OF_SUPPLY,'N/A') as source,nvl(msb.BRAND_NAME,'N/A') as bg,nvl(mc.COMPANY_NAME,'N/A') as company,nvl(sit.BATCH_NO,'N/A') as batchNo,nvl(sgt.MANUFACTURER_DATE,'N/A') as DOM,nvl(sgt.EXPIRY_DATE,SYSDATE) as expiryDate,nvl(sgt.UNIT_RATE,0.0) as mrp,nvl(sit.QTY_ISSUED,0.0) as qty,nvl((sgt.UNIT_RATE*sit.QTY_ISSUED),0.0) as costprice,nvl(sgt.DISCOUNT,0.0) as discout,nvl((sgt.UNIT_RATE*sit.QTY_ISSUED-sgt.DISCOUNT),0.0) as totalcost from store_issue_m  sim left outer join store_issue_t sit on sim.ID=sit.issue_m_id left outer join mas_store_item msi on sit.ITEM_ID=msi.ITEM_ID left outer join mas_store_item_conversion msic on msi.ITEM_CONVERSION_ID=msic.ITEM_CONVERSION_ID left outer join mas_store_section mss on msi.SECTION_ID=mss.SECTION_ID left outer join mas_store_brand msb on msi.BRAND_ID=msb.BRAND_ID left outer join mas_company  mc on msi.COMPANY_ID=mc.COMPANY_ID left outer join store_grn_t sgt on sit.ITEM_ID=sgt.ITEM_ID and sit.BATCH_NO=sgt.BATCH_NO";
			objectListIssueDetails = (List) session.createSQLQuery(qry4).list();

			String qry5 = "select NVL(MSI.PVMS_NO,'N/A'),NVL(MSI.NOMENCLATURE,'N/A'),NVL(MSIC.ITEM_UNIT_NAME,'N/A'),NVL(SGM.GRN_NO,'N/A'),NVL(SGM.GRN_DATE,SYSDATE),NVL(SIBS.BATCH_NO,'N/A'),NVL(SGT.MANUFACTURER_DATE,'N/A'),NVL(SGT.EXPIRY_DATE,SYSDATE),NVL(MSI.SOURCE_OF_SUPPLY,'N/A'),NVL(MSB.BRAND_NAME,'N/A'),NVL(MSC.COMPANY_NAME,'N/A'),NVL(SIBS.RECEIVED_QTY,0.0),NVL(SIBS.ISSUE_QTY,0.0),NVL(SIBS.CLOSING_STOCK,0.0) as Balance,NVL((NVL(SIBS.CLOSING_STOCK,0)-NVL(MSI.MAX_STOCK,0)),0.0) as Sulplus from MAS_STORE_ITEM  MSI LEFT OUTER JOIN MAS_STORE_ITEM_CONVERSION MSIC ON MSI.ITEM_CONVERSION_ID=MSIC.ITEM_CONVERSION_ID LEFT OUTER JOIN STORE_ITEM_BATCH_STOCK SIBS ON MSI.ITEM_ID=SIBS.ITEM_ID LEFT OUTER JOIN STORE_GRN_T SGT ON SIBS.ITEM_ID=SGT.ITEM_ID AND SIBS.BATCH_NO=SGT.BATCH_NO LEFT OUTER JOIN STORE_GRN_M SGM ON SGT.GRN_MASTER_ID=SGM.GRN_MASTER_ID LEFT OUTER JOIN MAS_STORE_BRAND MSB ON MSI.BRAND_ID=MSB.BRAND_ID LEFT OUTER JOIN MAS_STORE_COMPANY MSC ON MSI.COMPANY_ID=MSC.ID WHERE (NVL(SIBS.CLOSING_STOCK,0)-NVL(MSI.MAX_STOCK,0))>0 ";
			objectListSurplusDetails = (List) session.createSQLQuery(qry5).list();

			String qry6 = "select NVL(MSI.PVMS_NO,'N/A'),NVL(MSI.NOMENCLATURE,'N/A'),NVL(MSIC.ITEM_UNIT_NAME,'N/A'),NVL(SGM.GRN_NO,'N/A'),NVL(SGM.GRN_DATE,SYSDATE),NVL(SIBS.BATCH_NO,'N/A'),NVL(SGT.MANUFACTURER_DATE,'N/A'),NVL(SGT.EXPIRY_DATE,SYSDATE),NVL(MSI.SOURCE_OF_SUPPLY,'N/A'),NVL(MSB.BRAND_NAME,'N/A'),NVL(MSC.COMPANY_NAME,'N/A'),NVL(SIBS.RECEIVED_QTY,0.0),NVL(SIBS.ISSUE_QTY,0.0),NVL(SIBS.CLOSING_STOCK,0.0) as Balance,NVL((NVL(SIBS.CLOSING_STOCK,0)-NVL(MSI.MAX_STOCK,0)),0.0) as Deficient from MAS_STORE_ITEM  MSI LEFT OUTER JOIN MAS_STORE_ITEM_CONVERSION MSIC ON MSI.ITEM_CONVERSION_ID=MSIC.ITEM_CONVERSION_ID LEFT OUTER JOIN STORE_ITEM_BATCH_STOCK SIBS ON MSI.ITEM_ID=SIBS.ITEM_ID LEFT OUTER JOIN STORE_GRN_T SGT ON SIBS.ITEM_ID=SGT.ITEM_ID AND SIBS.BATCH_NO=SGT.BATCH_NO LEFT OUTER JOIN STORE_GRN_M SGM ON SGT.GRN_MASTER_ID=SGM.GRN_MASTER_ID LEFT OUTER JOIN MAS_STORE_BRAND MSB ON MSI.BRAND_ID=MSB.BRAND_ID LEFT OUTER JOIN MAS_STORE_COMPANY MSC ON MSI.COMPANY_ID=MSC.ID WHERE (NVL(SIBS.CLOSING_STOCK,0)-NVL(MSI.MIN_STOCK,0))<0  ";
			objectListDefecientDetails = (List) session.createSQLQuery(qry6).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("objectList", objectList);
		map.put("objectListStockStatus", objectListStockStatus);
		map.put("objectListBatchDetails", objectListBatchDetails);
		map.put("objectListReciptDetails", objectListReciptDetails);
		map.put("objectListIssueDetails", objectListIssueDetails);
		map.put("objectListSurplusDetails", objectListSurplusDetails);
		map.put("objectListDefecientDetails", objectListDefecientDetails);

		return map;
	}
	public Map<String, Object> reportMasterMedcine(Box box) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		session = (Session) getSession();
		String pvmsNo = null;

		int item_id = 0;

		String MANUFACTURER_id="0";

		int sectionId=0;
		int itemId=0;
		String sourceOfSupply="0";
		int manufacturerId=0;
		String LIFE_SPAN="0";
		String bg="0";
		String abc="0";
		String ved="0";
		String crvFrom="";
		String crvTo="";
		String doeFrom="";
		String doeTo="";
		BigDecimal discountFrom =  new BigDecimal(0);
		BigDecimal discountTo =  new BigDecimal(0);
		String soFrom="";
		String soTo="";
		String fromDate=null;
		String toDate=null;
		int hospitalId=box.getInt("hospitalId");
		int deptId=box.getInt("deptId");
		if(box.getString("pvmsNo")!=null && !box.getString("pvmsNo").equals("")){
			item_id=Integer.parseInt(box.getString("pvmsNo"));

		}
		if(box.getInt("sectionCode")!=0)
		{
			sectionId=box.getInt("sectionCode");
		}


		if(!box.getString(BRAND_GENERIC).equals(""))
		{
			bg=box.getString(BRAND_GENERIC);
		}

		if(!box.getString(ABC).equals(""))
		{
			abc=box.getString(ABC);
		}


		if(!box.get(VED).equals(""))
		{
			ved=box.getString(VED);
		}

		if(!box.getString("crvFrom").equals(""))
		{
			crvFrom=box.getString("crvFrom");

		}

		if(!box.get("crvTo").equals(""))
		{
			crvTo=box.getString("crvTo");
		}
		if(!box.get("doeFrom").equals(""))
		{
			Date doeFromStr=HMSUtil.convertStringTypeDateToDateType(box.get("doeFrom"));
			SimpleDateFormat df = new SimpleDateFormat("MM/dd/yyyy");
			doeFrom=df.format(doeFromStr);
		}
		if(!box.get("doeTo").equals(""))
		{
			Date doeToStr=HMSUtil.convertStringTypeDateToDateType(box.get("doeTo"));
			SimpleDateFormat df = new SimpleDateFormat("MM/dd/yyyy");
			doeTo=df.format(doeToStr);
		}

		if(!box.get("discountFrom").equals("")){
			discountFrom=new BigDecimal(box.get("discountFrom"));
		}
		if(!box.get("discountTo").equals("")){
			discountTo=new BigDecimal(box.get("discountTo"));
		}
		if(!box.get("soFrom").equals(""))
		{
			soFrom=box.getString("soFrom");
		}
		if(!box.get("soTo").equals(""))
		{
			soTo=box.getString("soTo");
		}
		if(!box.get("fromDate").equals(""))
		{
			Date fromDateStr=HMSUtil.convertStringTypeDateToDateType(box.get("fromDate"));
			SimpleDateFormat df = new SimpleDateFormat("MM/dd/yyyy");
			fromDate=df.format(fromDateStr);
		}
		if(!box.get("toDate").equals(""))
		{
			Date toDateStr=HMSUtil.convertStringTypeDateToDateType(box.get("toDate"));
			SimpleDateFormat df = new SimpleDateFormat("MM/dd/yyyy");
			toDate=df.format(toDateStr);

		}






		if(box.getString("sourceOfSupply")!=null && !box.getString("sourceOfSupply").equals("")){
			sourceOfSupply=box.getString("sourceOfSupply");
		}
		if(box.getString("MANUFACTURER")!=null && !box.getString("MANUFACTURER").equals("")){
			manufacturerId=Integer.parseInt(box.getString("MANUFACTURER"));
		}
		if(box.getString("LIFE_SPAN")!=null && !box.getString("LIFE_SPAN").equals("")){
			LIFE_SPAN=box.getString("LIFE_SPAN");
		}
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		List objectList = new ArrayList();
		List objectListStockStatus=new ArrayList();
		List objectListBatchDetails=new ArrayList();
		List objectListReciptDetails=new ArrayList();
		List objectListIssueDetails=new ArrayList();
		List objectListSurplusDetails=new ArrayList();
		List objectListDefecientDetails=new ArrayList();
		List<MasManufacturer> manufacturerList = new ArrayList<MasManufacturer>();
		//pvmsNo = "" + dataMap.get("pvmsNo");
		try {




			manufacturerList = getHibernateTemplate().find("from jkt.hms.masters.business.MasManufacturer as mi where mi.Status ='y'order by mi.ManufacturerName ");
			//deptId = Integer.parseInt("" + dataMap.get("deptId"));
			/*
					String qry  ="select distinct msi.PVMS_NO,msi.NOMENCLATURE,NVL(msic.ITEM_UNIT_NAME,'NA'),NVL(MSS.SECTION_NAME,'NA'),NVL(SMDT.MMF_IN_QTY,0),NVL(SGM.GRN_NO,'NA'),SGM.GRN_DATE,nvl(sph.PO_NUMBER,sim.INDENT_NO),nvl(sph.PO_DATE,sim.INDENT_DATE),NVL(msi.SELF_LIFE,'NA'),NVL(sibs.BATCH_NO,'NA'),to_date(sibs.MANUFACTURE_DATE,'dd/mm/yyyy'),to_date(sibs.EXPIRY_DATE,'dd/mm/yyyy'),NVL(sgm.RECEIVE_TYPE,'NA'),NVL(msi.BRANDED_GENERIC,'NA'),NVL(mm.MANUFACTURER_NAME,'NA'),NVL(sgt.UNIT_RATE,0.0),NVL(sgt.AMOUNT_VALUE,0.0),NVL(sgt.DISCOUNT_PERCENT,0.0),nvl(sibs.OPENING_BALANCE_QTY,0) + nvl(sibs.RECEIVED_QTY,0),nvl(sibs.ISSUE_QTY,0),NVL(sibs.CLOSING_STOCK,0),nvl(sgt.DISP_TYPE,'NA'),NVL(SGT.MDQ_VALUE,0),nvl(sgt.TAX_PERCENT,0.0),msi.SALT from mas_store_item msi left outer join mas_store_item_conversion msic on msi.ITEM_CONVERSION_ID=msic.ITEM_CONVERSION_ID left outer join  store_item_batch_stock sibs on msi.ITEM_ID=sibs.ITEM_ID LEFT OUTER JOIN  MAS_STORE_BRAND MSB ON  SIBS.BRAND_ID=MSB.BRAND_ID left outer join mas_manufacturer mm on MSB.MANUFACTURER_ID=mm.MANUFACTURER_ID LEFT OUTER JOIN STORE_GRN_T  SGT ON MSI.ITEM_ID=SGT.ITEM_ID and sibs.BATCH_NO=sgt.BATCH_NO left outer join store_issue_t sit on msi.ITEM_ID=sit.ITEM_ID left outer join store_issue_m sim1 on sit.ISSUE_M_ID=sim1.ID left outer join mas_department md on sim1.TO_STORE=md.DEPARTMENT_ID LEFT OUTER JOIN MAS_STORE_SECTION MSS ON MSI.SECTION_ID=MSS.SECTION_ID LEFT OUTER JOIN STORE_MMF_DEPARTMENT_T SMDT ON MSI.ITEM_ID=SMDT.ITEM_ID  left OUTER JOIN STORE_GRN_M  SGM ON SGM.GRN_MASTER_ID=SGT.GRN_MASTER_ID left outer join store_po_header sph on SGM.PO_ID=sph.PO_ID  left outer join store_indent_m sim on SGM.INDENT_ID=sim.INDENT_ID where sibs.DEPARTMENT_ID='24' order by msi.SALT";
					String qry1 ="select distinct msi.PVMS_NO,msi.NOMENCLATURE,NVL(msic.ITEM_UNIT_NAME,'NA'),NVL(MSS.SECTION_NAME,'NA'),NVL(SMDT.MMF_IN_QTY,0),NVL(SGM.GRN_NO,'NA'),SGM.GRN_DATE,nvl(sph.PO_NUMBER,sim.INDENT_NO),nvl(sph.PO_DATE,sim.INDENT_DATE),NVL(msi.SELF_LIFE,'NA'),NVL(sibs.BATCH_NO,'NA'),to_date(sibs.MANUFACTURE_DATE,'dd/mm/yyyy'),to_date(sibs.EXPIRY_DATE,'dd/mm/yyyy'),NVL(sgm.RECEIVE_TYPE,'NA'),NVL(msi.BRANDED_GENERIC,'NA'),NVL(mm.MANUFACTURER_NAME,'NA'),NVL(sgt.UNIT_RATE,0.0),NVL(sgt.AMOUNT_VALUE,0.0),NVL(sgt.DISCOUNT_PERCENT,0.0),nvl(sibs.OPENING_BALANCE_QTY,0) + nvl(sibs.RECEIVED_QTY,0),nvl(sibs.ISSUE_QTY,0),NVL(sibs.CLOSING_STOCK,0),nvl(sgt.DISP_TYPE,'NA'),NVL(SGT.MDQ_VALUE,0),nvl(sgt.TAX_PERCENT,0.0),msi.SALT from mas_store_item msi left outer join mas_store_item_conversion msic on msi.ITEM_CONVERSION_ID=msic.ITEM_CONVERSION_ID left outer join  store_item_batch_stock sibs on msi.ITEM_ID=sibs.ITEM_ID LEFT OUTER JOIN  MAS_STORE_BRAND MSB ON  SIBS.BRAND_ID=MSB.BRAND_ID left outer join mas_manufacturer mm on MSB.MANUFACTURER_ID=mm.MANUFACTURER_ID LEFT OUTER JOIN STORE_GRN_T  SGT ON MSI.ITEM_ID=SGT.ITEM_ID and sibs.BATCH_NO=sgt.BATCH_NO left outer join store_issue_t sit on msi.ITEM_ID=sit.ITEM_ID left outer join store_issue_m sim1 on sit.ISSUE_M_ID=sim1.ID left outer join mas_department md on sim1.TO_STORE=md.DEPARTMENT_ID LEFT OUTER JOIN MAS_STORE_SECTION MSS ON MSI.SECTION_ID=MSS.SECTION_ID LEFT OUTER JOIN STORE_MMF_DEPARTMENT_T SMDT ON MSI.ITEM_ID=SMDT.ITEM_ID  left OUTER JOIN STORE_GRN_M  SGM ON SGM.GRN_MASTER_ID=SGT.GRN_MASTER_ID left outer join store_po_header sph on SGM.PO_ID=sph.PO_ID  left outer join store_indent_m sim on SGM.INDENT_ID=sim.INDENT_ID where sibs.DEPARTMENT_ID='24' and msi.ITEM_ID='"+item_id+"'";


					String qry2 ="select distinct msi.PVMS_NO,msi.NOMENCLATURE,NVL(msic.ITEM_UNIT_NAME,'NA'),NVL(MSS.SECTION_NAME,'NA'),NVL(SMDT.MMF_IN_QTY,0),NVL(SGM.GRN_NO,'NA'),SGM.GRN_DATE,nvl(sph.PO_NUMBER,sim.INDENT_NO),nvl(sph.PO_DATE,sim.INDENT_DATE),NVL(msi.SELF_LIFE,'NA'),NVL(sibs.BATCH_NO,'NA'),to_date(sibs.MANUFACTURE_DATE,'dd/mm/yyyy'),to_date(sibs.EXPIRY_DATE,'dd/mm/yyyy'),NVL(sgm.RECEIVE_TYPE,'NA'),NVL(msi.BRANDED_GENERIC,'NA'),NVL(mm.MANUFACTURER_NAME,'NA'),NVL(sgt.UNIT_RATE,0.0),NVL(sgt.AMOUNT_VALUE,0.0),NVL(sgt.DISCOUNT_PERCENT,0.0),nvl(sibs.OPENING_BALANCE_QTY,0) + nvl(sibs.RECEIVED_QTY,0),nvl(sibs.ISSUE_QTY,0),NVL(sibs.CLOSING_STOCK,0),nvl(sgt.DISP_TYPE,'NA'),NVL(SGT.MDQ_VALUE,0),nvl(sgt.TAX_PERCENT,0.0),msi.SALT from mas_store_item msi left outer join mas_store_item_conversion msic on msi.ITEM_CONVERSION_ID=msic.ITEM_CONVERSION_ID left outer join  store_item_batch_stock sibs on msi.ITEM_ID=sibs.ITEM_ID LEFT OUTER JOIN  MAS_STORE_BRAND MSB ON  SIBS.BRAND_ID=MSB.BRAND_ID left outer join mas_manufacturer mm on MSB.MANUFACTURER_ID=mm.MANUFACTURER_ID LEFT OUTER JOIN STORE_GRN_T  SGT ON MSI.ITEM_ID=SGT.ITEM_ID and sibs.BATCH_NO=sgt.BATCH_NO left outer join store_issue_t sit on msi.ITEM_ID=sit.ITEM_ID left outer join store_issue_m sim1 on sit.ISSUE_M_ID=sim1.ID left outer join mas_department md on sim1.TO_STORE=md.DEPARTMENT_ID LEFT OUTER JOIN MAS_STORE_SECTION MSS ON MSI.SECTION_ID=MSS.SECTION_ID LEFT OUTER JOIN STORE_MMF_DEPARTMENT_T SMDT ON MSI.ITEM_ID=SMDT.ITEM_ID  left OUTER JOIN STORE_GRN_M  SGM ON SGM.GRN_MASTER_ID=SGT.GRN_MASTER_ID left outer join store_po_header sph on SGM.PO_ID=sph.PO_ID  left outer join store_indent_m sim on SGM.INDENT_ID=sim.INDENT_ID where sibs.DEPARTMENT_ID='24' and upper(sgm.RECEIVE_TYPE)='"+sourceOfSupply+"'order by msi.SALT";
					String qry3 ="select distinct msi.PVMS_NO,msi.NOMENCLATURE,NVL(msic.ITEM_UNIT_NAME,'NA'),NVL(MSS.SECTION_NAME,'NA'),NVL(SMDT.MMF_IN_QTY,0),NVL(SGM.GRN_NO,'NA'),SGM.GRN_DATE,nvl(sph.PO_NUMBER,sim.INDENT_NO),nvl(sph.PO_DATE,sim.INDENT_DATE),NVL(msi.SELF_LIFE,'NA'),NVL(sibs.BATCH_NO,'NA'),to_date(sibs.MANUFACTURE_DATE,'dd/mm/yyyy'),to_date(sibs.EXPIRY_DATE,'dd/mm/yyyy'),NVL(sgm.RECEIVE_TYPE,'NA'),NVL(msi.BRANDED_GENERIC,'NA'),NVL(mm.MANUFACTURER_NAME,'NA'),NVL(sgt.UNIT_RATE,0.0),NVL(sgt.AMOUNT_VALUE,0.0),NVL(sgt.DISCOUNT_PERCENT,0.0),nvl(sibs.OPENING_BALANCE_QTY,0) + nvl(sibs.RECEIVED_QTY,0),nvl(sibs.ISSUE_QTY,0),NVL(sibs.CLOSING_STOCK,0),nvl(sgt.DISP_TYPE,'NA'),NVL(SGT.MDQ_VALUE,0),nvl(sgt.TAX_PERCENT,0.0),msi.SALT from mas_store_item msi left outer join mas_store_item_conversion msic on msi.ITEM_CONVERSION_ID=msic.ITEM_CONVERSION_ID left outer join  store_item_batch_stock sibs on msi.ITEM_ID=sibs.ITEM_ID LEFT OUTER JOIN  MAS_STORE_BRAND MSB ON  SIBS.BRAND_ID=MSB.BRAND_ID left outer join mas_manufacturer mm on MSB.MANUFACTURER_ID=mm.MANUFACTURER_ID LEFT OUTER JOIN STORE_GRN_T  SGT ON MSI.ITEM_ID=SGT.ITEM_ID and sibs.BATCH_NO=sgt.BATCH_NO left outer join store_issue_t sit on msi.ITEM_ID=sit.ITEM_ID left outer join store_issue_m sim1 on sit.ISSUE_M_ID=sim1.ID left outer join mas_department md on sim1.TO_STORE=md.DEPARTMENT_ID LEFT OUTER JOIN MAS_STORE_SECTION MSS ON MSI.SECTION_ID=MSS.SECTION_ID LEFT OUTER JOIN STORE_MMF_DEPARTMENT_T SMDT ON MSI.ITEM_ID=SMDT.ITEM_ID  left OUTER JOIN STORE_GRN_M  SGM ON SGM.GRN_MASTER_ID=SGT.GRN_MASTER_ID left outer join store_po_header sph on SGM.PO_ID=sph.PO_ID  left outer join store_indent_m sim on SGM.INDENT_ID=sim.INDENT_ID where sibs.DEPARTMENT_ID='24' and msi.MANUFACTURER_ID='"+MANUFACTURER_id+"'order by msi.SALT";
					String qry4 ="select distinct msi.PVMS_NO,msi.NOMENCLATURE,NVL(msic.ITEM_UNIT_NAME,'NA'),NVL(MSS.SECTION_NAME,'NA'),NVL(SMDT.MMF_IN_QTY,0),NVL(SGM.GRN_NO,'NA'),SGM.GRN_DATE,nvl(sph.PO_NUMBER,sim.INDENT_NO),nvl(sph.PO_DATE,sim.INDENT_DATE),NVL(msi.SELF_LIFE,'NA'),NVL(sibs.BATCH_NO,'NA'),to_date(sibs.MANUFACTURE_DATE,'dd/mm/yyyy'),to_date(sibs.EXPIRY_DATE,'dd/mm/yyyy'),NVL(sgm.RECEIVE_TYPE,'NA'),NVL(msi.BRANDED_GENERIC,'NA'),NVL(mm.MANUFACTURER_NAME,'NA'),NVL(sgt.UNIT_RATE,0.0),NVL(sgt.AMOUNT_VALUE,0.0),NVL(sgt.DISCOUNT_PERCENT,0.0),nvl(sibs.OPENING_BALANCE_QTY,0) + nvl(sibs.RECEIVED_QTY,0),nvl(sibs.ISSUE_QTY,0),NVL(sibs.CLOSING_STOCK,0),nvl(sgt.DISP_TYPE,'NA'),NVL(SGT.MDQ_VALUE,0),nvl(sgt.TAX_PERCENT,0.0),msi.SALT from mas_store_item msi left outer join mas_store_item_conversion msic on msi.ITEM_CONVERSION_ID=msic.ITEM_CONVERSION_ID left outer join  store_item_batch_stock sibs on msi.ITEM_ID=sibs.ITEM_ID LEFT OUTER JOIN  MAS_STORE_BRAND MSB ON  SIBS.BRAND_ID=MSB.BRAND_ID left outer join mas_manufacturer mm on MSB.MANUFACTURER_ID=mm.MANUFACTURER_ID LEFT OUTER JOIN STORE_GRN_T  SGT ON MSI.ITEM_ID=SGT.ITEM_ID and sibs.BATCH_NO=sgt.BATCH_NO left outer join store_issue_t sit on msi.ITEM_ID=sit.ITEM_ID left outer join store_issue_m sim1 on sit.ISSUE_M_ID=sim1.ID left outer join mas_department md on sim1.TO_STORE=md.DEPARTMENT_ID LEFT OUTER JOIN MAS_STORE_SECTION MSS ON MSI.SECTION_ID=MSS.SECTION_ID LEFT OUTER JOIN STORE_MMF_DEPARTMENT_T SMDT ON MSI.ITEM_ID=SMDT.ITEM_ID  left OUTER JOIN STORE_GRN_M  SGM ON SGM.GRN_MASTER_ID=SGT.GRN_MASTER_ID left outer join store_po_header sph on SGM.PO_ID=sph.PO_ID  left outer join store_indent_m sim on SGM.INDENT_ID=sim.INDENT_ID where sibs.DEPARTMENT_ID='24' and msi.SELF_LIFE='"+LIFE_SPAN+"'order by msi.SALT";
					String qry5 ="select distinct msi.PVMS_NO,msi.NOMENCLATURE,NVL(msic.ITEM_UNIT_NAME,'NA'),NVL(MSS.SECTION_NAME,'NA'),NVL(SMDT.MMF_IN_QTY,0),NVL(SGM.GRN_NO,'NA'),SGM.GRN_DATE,nvl(sph.PO_NUMBER,sim.INDENT_NO),nvl(sph.PO_DATE,sim.INDENT_DATE),NVL(msi.SELF_LIFE,'NA'),NVL(sibs.BATCH_NO,'NA'),to_date(sibs.MANUFACTURE_DATE,'dd/mm/yyyy'),to_date(sibs.EXPIRY_DATE,'dd/mm/yyyy'),NVL(sgm.RECEIVE_TYPE,'NA'),NVL(msi.BRANDED_GENERIC,'NA'),NVL(mm.MANUFACTURER_NAME,'NA'),NVL(sgt.UNIT_RATE,0.0),NVL(sgt.AMOUNT_VALUE,0.0),NVL(sgt.DISCOUNT_PERCENT,0.0),nvl(sibs.OPENING_BALANCE_QTY,0) + nvl(sibs.RECEIVED_QTY,0),nvl(sibs.ISSUE_QTY,0),NVL(sibs.CLOSING_STOCK,0),nvl(sgt.DISP_TYPE,'NA'),NVL(SGT.MDQ_VALUE,0),nvl(sgt.TAX_PERCENT,0.0),msi.SALT from mas_store_item msi left outer join mas_store_item_conversion msic on msi.ITEM_CONVERSION_ID=msic.ITEM_CONVERSION_ID left outer join  store_item_batch_stock sibs on msi.ITEM_ID=sibs.ITEM_ID LEFT OUTER JOIN  MAS_STORE_BRAND MSB ON  SIBS.BRAND_ID=MSB.BRAND_ID left outer join mas_manufacturer mm on MSB.MANUFACTURER_ID=mm.MANUFACTURER_ID LEFT OUTER JOIN STORE_GRN_T  SGT ON MSI.ITEM_ID=SGT.ITEM_ID and sibs.BATCH_NO=sgt.BATCH_NO left outer join store_issue_t sit on msi.ITEM_ID=sit.ITEM_ID left outer join store_issue_m sim1 on sit.ISSUE_M_ID=sim1.ID left outer join mas_department md on sim1.TO_STORE=md.DEPARTMENT_ID LEFT OUTER JOIN MAS_STORE_SECTION MSS ON MSI.SECTION_ID=MSS.SECTION_ID LEFT OUTER JOIN STORE_MMF_DEPARTMENT_T SMDT ON MSI.ITEM_ID=SMDT.ITEM_ID  left OUTER JOIN STORE_GRN_M  SGM ON SGM.GRN_MASTER_ID=SGT.GRN_MASTER_ID left outer join store_po_header sph on SGM.PO_ID=sph.PO_ID  left outer join store_indent_m sim on SGM.INDENT_ID=sim.INDENT_ID where sibs.DEPARTMENT_ID='24' and upper(sgm.RECEIVE_TYPE)='"+sourceOfSupply+"' and msi.ITEM_ID='"+item_id+"' ";

					if(item_id!=0){
						objectList = (List) session.createSQLQuery(qry1).list();
					}else if(!sourceOfSupply.equals("0")&& sourceOfSupply!=null && sourceOfSupply!=""){
						objectList=(List)session.createSQLQuery(qry2).list();
					}else if(!MANUFACTURER_id.equals("0")&& MANUFACTURER_id!=null && MANUFACTURER_id!=""){
						objectList=(List)session.createSQLQuery(qry3).list();
					}else if(!LIFE_SPAN.equals("0")&& LIFE_SPAN!=null && LIFE_SPAN!=""){
						objectList=(List)session.createSQLQuery(qry4).list();
					}else if(item_id!=0 && !sourceOfSupply.equals("0")&& sourceOfSupply!=null && sourceOfSupply!="")
					{
						objectList=(List)session.createSQLQuery(qry5).list();
					}
				else{
					try
					{
						objectList = (List) session.createSQLQuery(qry).list();
					}
					catch(Exception e)
					{

					}

					}
			 */

			String qry1 = 
				"select distinct msi.PVMS_NO,msi.NOMENCLATURE,NVL(msic.ITEM_UNIT_NAME,'NA'),NVL(MSS.SECTION_NAME,'NA'),NVL(mmf.MMF_IN_QTY,0),"
				+ "NVL(SGM.GRN_NO,'NA'),SGM.GRN_DATE,nvl(sph.PO_NUMBER,sim.INDENT_NO),nvl(sph.PO_DATE,sim.INDENT_DATE),NVL(msi.SELF_LIFE,'NA'),"
				+ "NVL(sibs.BATCH_NO,'NA'),to_date(sibs.MANUFACTURE_DATE,'dd/mm/yyyy'),to_date(sibs.EXPIRY_DATE,'dd/mm/yyyy'),"
				+ "NVL(sgm.RECEIVE_TYPE,'NA'),nvl(case when sibs.BRAND_GENERIC !=null then sibs.BRAND_GENERIC else msi.BRANDED_GENERIC end,'NA'),"
				+ "NVL(mm.MANUFACTURER_NAME,'NA'),NVL(sgt.UNIT_RATE,0.0),NVL(sgt.AMOUNT_VALUE,0.0),NVL(sgt.DISCOUNT_PERCENT,0.0),"
				+ "nvl(sibs.OPENING_BALANCE_QTY,0) + nvl(sibs.RECEIVED_QTY,0),nvl(sibs.ISSUE_QTY,0),NVL(sibs.CLOSING_STOCK,0),"
				+ "nvl(sgt.DISP_TYPE,'NA'),NVL(SGT.MDQ_VALUE,0),nvl(sgt.TAX_PERCENT,0.0),msi.SALT,NVL(sibs.LOAN_IN_QTY,0) "
				+ "from store_item_batch_stock sibs "
				+ "left outer join  mas_store_item msi on sibs.ITEM_ID=msi.ITEM_ID "
				+ "left outer join mas_store_item_conversion msic on msi.ITEM_CONVERSION_ID=msic.ITEM_CONVERSION_ID "
				+ "LEFT OUTER JOIN  MAS_STORE_BRAND MSB ON  SIBS.BRAND_ID=MSB.BRAND_ID "
				+ "left outer join mas_manufacturer mm on MSB.MANUFACTURER_ID=mm.MANUFACTURER_ID  "
				+ "LEFT OUTER JOIN STORE_GRN_T  SGT ON (MSI.ITEM_ID=SGT.ITEM_ID and sibs.BATCH_NO=sgt.BATCH_NO  and mm.MANUFACTURER_ID = SGT.manufacturer_id)"
				+ " left OUTER JOIN STORE_GRN_M  SGM ON SGM.GRN_MASTER_ID=SGT.GRN_MASTER_ID "
				+ "left outer join store_issue_t sit on msi.ITEM_ID=sit.ITEM_ID  "
			//	+ "left outer join store_issue_m sim1 on sit.ISSUE_M_ID=sim1.ID "
			//	+ "left outer join mas_department md on sim1.TO_STORE=md.DEPARTMENT_ID  "
				+ "LEFT OUTER JOIN MAS_STORE_SECTION MSS ON MSI.SECTION_ID=MSS.SECTION_ID  "
				+ "LEFT OUTER JOIN ( select smdt.MMF_IN_QTY,smdt.item_id,smdm.store_ward_dept,smdm.hospital_id from STORE_MMF_DEPARTMENT_T SMDT "
				+ "		LEFT OUTER JOIN  STORE_MMF_DEPARTMENT_M SMDM ON SMDT.STORE_MMF_DEPARTMENT_M_ID=SMDM.ID "
				+ " 	where SMDM.HOSPITAL_ID="+hospitalId+" and smdm.mmf_for_the_year=EXTRACT(year from sysdate)"
				+ ") mmf  on "
				+ " (SIBS.ITEM_ID=mmf.ITEM_ID and mmf.store_ward_dept=sibs.department_id and sibs.hospital_id=mmf.hospital_id )"
				+ " left outer join store_po_header sph on SGM.PO_ID=sph.PO_ID"
				+ " left outer join store_indent_m sim on SGM.INDENT_ID=sim.INDENT_ID"
				+ "  where sibs.DEPARTMENT_ID="+deptId+" and sibs.HOSPITAL_ID="+hospitalId+" and sibs.closing_stock>=0 ";
			if(sectionId!=0)
			{
				qry1=qry1+ "  and mss.section_id="+sectionId;
			}
			if(item_id!=0)
			{
				qry1=qry1+ " and msi.ITEM_ID="+item_id;
			}

			if(!sourceOfSupply.equals("0"))
			{
				qry1=qry1+ " and upper(sgm.RECEIVE_TYPE)='"+sourceOfSupply+"'";
			}

			if(manufacturerId!=0)
			{
				qry1=qry1+ " and MSB.MANUFACTURER_ID="+manufacturerId;
			}

			if(!LIFE_SPAN.equals("0"))
			{
				qry1=qry1+ " and msi.SELF_LIFE='"+LIFE_SPAN+"'";
			}
			if(!bg.equals("0"))
			{
				qry1=qry1+ " and msi.branded_generic='"+bg+"'";
			}


			if(!abc.equals("0"))
			{
				qry1=qry1+ " and msi.abc='"+abc+"'";
			}

			if(!ved.equals("0"))
			{
				qry1=qry1+ " and msi.ved='"+ved+"'";
			}

			if(!crvFrom.equals("") && !crvTo.equals(""))
			{
				qry1=qry1+ " and sgm.grn_no between '"+crvFrom+"' and '"+crvTo+"'";
			}


			if(!box.get("doeFrom").equals("") && !box.get("doeTo").equals(""))
			{
				qry1=qry1+ " and sibs.expiry_date between to_date('"+doeFrom+"','mm/dd/yyyy') and to_date('"+doeTo+"','mm/dd/yyyy')";
			}


			if(!box.get("discountFrom").equals("") && !box.get("discountTo").equals(""))
			{
				qry1=qry1+ " and sgm.discount between '"+discountFrom+"' and '"+discountTo+"'";
			}

			if(!soFrom.equals("") && !soTo.equals(""))
			{
				qry1=qry1+ " and sph.po_number between '"+soFrom+"' and '"+soTo+"'";
			}


			if(!box.get("toDate").equals("") && !box.get("fromDate").equals(""))
			{
				qry1=qry1+ " and sgm.grn_date between to_date('"+fromDate+"','mm/dd/yyyy') and to_date('"+toDate+"','mm/dd/yyyy')";
			}
			qry1=qry1+" order by msi.SALT";

			objectList=(List)session.createSQLQuery(qry1).list();
			/********************* Comented By Ujjwal  ***/
			/*sectionList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasStoreSection ");*/
			sectionList=session.createCriteria(MasStoreSection.class).addOrder(Order.asc("SectionName")).list();

		}catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("manufacturerList", manufacturerList);
		map.put("objectList", objectList);
		map.put("sectionList", sectionList);


		return map;
	}

	public Map<String, Object> reportStockStatus(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		session = (Session) getSession();
		String pvmsNo = null;
		int deptId = 0;
		int item_id = 0;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		List objectListStockStatus = new ArrayList();
		//pvmsNo = "" + dataMap.get("pvmsNo");
		try {
			//deptId = Integer.parseInt("" + dataMap.get("deptId"));
			String qry = "select  mas_store_item.pvms_no as mas_store_item_pvms_no, mas_store_item.nomenclature as mas_store_item_nomenclature,msic.ITEM_UNIT_NAME as item_unit_name,sgm.GRN_NO as crvNo,sgm.GRN_DATE as crvDate,sum(nvl(store_item_batch_stock.received_qty,0)) as batch_stock_received_qty,sum(nvl(store_item_batch_stock.issue_qty,0)) as batch_stock_issue_qty,sum(nvl(store_item_batch_stock.opening_balance_qty,0)) as batch_stock_opning_balnce_qty,(sum(nvl(store_item_batch_stock.opening_balance_qty,0)) + sum(nvl(store_item_batch_stock.received_qty,0)) - sum(nvl(store_item_batch_stock.issue_qty,0)))as balance_qty,store_item_batch_stock.item_id from mas_store_item mas_store_item left outer join mas_store_item_conversion msic on mas_store_item.ITEM_CONVERSION_ID=msic.ITEM_CONVERSION_ID inner join store_item_batch_stock store_item_batch_stock on mas_store_item.item_id = store_item_batch_stock.item_id left outer join store_grn_t sgt on store_item_batch_stock.ITEM_ID=sgt.ITEM_ID and store_item_batch_stock.BATCH_NO=sgt.BATCH_NO left outer join store_grn_m sgm  on sgm.GRN_MASTER_ID=sgt.GRN_MASTER_ID group by store_item_batch_stock.item_id,mas_store_item.pvms_no,mas_store_item.nomenclature,msic.ITEM_UNIT_NAME,sgm.GRN_NO,sgm.GRN_DATE order by  mas_store_item_pvms_no,mas_store_item.nomenclature";
			objectListStockStatus = (List) session.createSQLQuery(qry).list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("objectListStockStatus", objectListStockStatus);
		return map;
	}

	public Map<String, Object> reportStockBatch(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		session = (Session) getSession();
		String pvmsNo = null;
		int deptId = 0;
		int item_id = 0;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		List objectList = new ArrayList();
		//pvmsNo = "" + dataMap.get("pvmsNo");
		try {
			//deptId = Integer.parseInt("" + dataMap.get("deptId"));
			/*	String qry = "SELECT mas_store_item.pvms_no AS item_pvms_no,mas_store_item.nomenclature AS item_nomenclature,mas_store_item_conversion.item_unit_name AS convrsn_itm_unit_name " +
							"from mas_store_item_conversion mas_store_item_conversion RIGHT OUTER JOIN mas_store_item mas_store_item " +
							"ON mas_store_item_conversion.item_conversion_id = mas_store_item.item_conversion_id RIGHT OUTER JOIN " +
							"mas_store_unit mas_store_unit ON mas_store_item_conversion.purchase_unit_id = mas_store_unit.unit_id order by mas_store_item.pvms_no";
					objectList = (List) session.createSQLQuery(qry).list();*/
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("objectList", objectList);
		return map;
	}
	public Map<String, Object> reportStockReceipt(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		session = (Session) getSession();
		String pvmsNo = null;
		int deptId = 0;
		int item_id = 0;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		List objectList = new ArrayList();
		//pvmsNo = "" + dataMap.get("pvmsNo");
		try {
			//deptId = Integer.parseInt("" + dataMap.get("deptId"));
			/*	String qry = "SELECT mas_store_item.pvms_no AS item_pvms_no,mas_store_item.nomenclature AS item_nomenclature,mas_store_item_conversion.item_unit_name AS convrsn_itm_unit_name " +
							"from mas_store_item_conversion mas_store_item_conversion RIGHT OUTER JOIN mas_store_item mas_store_item " +
							"ON mas_store_item_conversion.item_conversion_id = mas_store_item.item_conversion_id RIGHT OUTER JOIN " +
							"mas_store_unit mas_store_unit ON mas_store_item_conversion.purchase_unit_id = mas_store_unit.unit_id order by mas_store_item.pvms_no";
					objectList = (List) session.createSQLQuery(qry).list();*/
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("objectList", objectList);
		return map;
	}
	public Map<String, Object> reportStockIssue(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		session = (Session) getSession();
		String pvmsNo = null;
		int deptId = 0;
		int item_id = 0;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		List objectList = new ArrayList();
		//pvmsNo = "" + dataMap.get("pvmsNo");
		try {
			//deptId = Integer.parseInt("" + dataMap.get("deptId"));
			/*String qry = "SELECT mas_store_item.pvms_no AS item_pvms_no,mas_store_item.nomenclature AS item_nomenclature,mas_store_item_conversion.item_unit_name AS convrsn_itm_unit_name " +
							"from mas_store_item_conversion mas_store_item_conversion RIGHT OUTER JOIN mas_store_item mas_store_item " +
							"ON mas_store_item_conversion.item_conversion_id = mas_store_item.item_conversion_id RIGHT OUTER JOIN " +
							"mas_store_unit mas_store_unit ON mas_store_item_conversion.purchase_unit_id = mas_store_unit.unit_id order by mas_store_item.pvms_no";
					objectList = (List) session.createSQLQuery(qry).list();*/
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("objectList", objectList);
		return map;
	}

	public Map<String, Object> reportStockSurplus(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		session = (Session) getSession();
		String pvmsNo = null;
		int deptId = 0;
		int item_id = 0;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		List objectList = new ArrayList();
		//pvmsNo = "" + dataMap.get("pvmsNo");
		try {
			//deptId = Integer.parseInt("" + dataMap.get("deptId"));
			/*	String qry = "SELECT mas_store_item.pvms_no AS item_pvms_no,mas_store_item.nomenclature AS item_nomenclature,mas_store_item_conversion.item_unit_name AS convrsn_itm_unit_name " +
							"from mas_store_item_conversion mas_store_item_conversion RIGHT OUTER JOIN mas_store_item mas_store_item " +
							"ON mas_store_item_conversion.item_conversion_id = mas_store_item.item_conversion_id RIGHT OUTER JOIN " +
							"mas_store_unit mas_store_unit ON mas_store_item_conversion.purchase_unit_id = mas_store_unit.unit_id order by mas_store_item.pvms_no";
					objectList = (List) session.createSQLQuery(qry).list();*/
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("objectList", objectList);
		return map;
	}
	public Map<String, Object> reportStockDeficient(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		session = (Session) getSession();
		String pvmsNo = null;
		int deptId = 0;
		int item_id = 0;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		List objectList = new ArrayList();
		//pvmsNo = "" + dataMap.get("pvmsNo");
		try {
			//deptId = Integer.parseInt("" + dataMap.get("deptId"));
			/*String qry = "SELECT mas_store_item.pvms_no AS item_pvms_no,mas_store_item.nomenclature AS item_nomenclature,mas_store_item_conversion.item_unit_name AS convrsn_itm_unit_name " +
							"from mas_store_item_conversion mas_store_item_conversion RIGHT OUTER JOIN mas_store_item mas_store_item " +
							"ON mas_store_item_conversion.item_conversion_id = mas_store_item.item_conversion_id RIGHT OUTER JOIN " +
							"mas_store_unit mas_store_unit ON mas_store_item_conversion.purchase_unit_id = mas_store_unit.unit_id order by mas_store_item.pvms_no";
					objectList = (List) session.createSQLQuery(qry).list();*/
		}catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("objectList", objectList);
		return map;
	}

	public Map<String, Object> reportStockABC(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		session = (Session) getSession();
		String pvmsNo = null;
		int deptId = 0;
		int item_id = 0;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		List objectList = new ArrayList();
		//pvmsNo = "" + dataMap.get("pvmsNo");
		try {
			//deptId = Integer.parseInt("" + dataMap.get("deptId"));
			/*String qry = "SELECT mas_store_item.pvms_no AS item_pvms_no,mas_store_item.nomenclature AS item_nomenclature,mas_store_item_conversion.item_unit_name AS convrsn_itm_unit_name " +
							"from mas_store_item_conversion mas_store_item_conversion RIGHT OUTER JOIN mas_store_item mas_store_item " +
							"ON mas_store_item_conversion.item_conversion_id = mas_store_item.item_conversion_id RIGHT OUTER JOIN " +
							"mas_store_unit mas_store_unit ON mas_store_item_conversion.purchase_unit_id = mas_store_unit.unit_id order by mas_store_item.pvms_no";
					objectList = (List) session.createSQLQuery(qry).list();*/
		}
		catch (HibernateException e)
		{
			e.printStackTrace();
		}
		map.put("objectList", objectList);
		return map;
	}
	public Map<String, Object> reportStockVDU(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		session = (Session) getSession();
		String pvmsNo = null;
		int deptId = 0;
		int item_id = 0;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		List objectList = new ArrayList();
		//pvmsNo = "" + dataMap.get("pvmsNo");
		try {
			//deptId = Integer.parseInt("" + dataMap.get("deptId"));
			/*String qry = "SELECT mas_store_item.pvms_no AS item_pvms_no,mas_store_item.nomenclature AS item_nomenclature,mas_store_item_conversion.item_unit_name AS convrsn_itm_unit_name " +
							"from mas_store_item_conversion mas_store_item_conversion RIGHT OUTER JOIN mas_store_item mas_store_item " +
							"ON mas_store_item_conversion.item_conversion_id = mas_store_item.item_conversion_id RIGHT OUTER JOIN " +
							"mas_store_unit mas_store_unit ON mas_store_item_conversion.purchase_unit_id = mas_store_unit.unit_id order by mas_store_item.pvms_no";
					objectList = (List) session.createSQLQuery(qry).list();*/
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("objectList", objectList);
		return map;
	}

	public Map getLPItemDetails(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> masterDataMap = new HashMap<String, Object>();
		List<MasStoreSupplier> searchSupplierList = new ArrayList<MasStoreSupplier>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<MasStoreBrand> brandList1 = new ArrayList<MasStoreBrand>();
		//List<MasStoreSupplier>supplierList=new ArrayList<MasStoreSupplier>();

		String VenderId=box.get("VenderId");
		int hospitalId=box.getInt("hospitalId");
		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;

		List objectList = new ArrayList();
		List<PatientPrescriptionDetails>  presList = new ArrayList<PatientPrescriptionDetails>();
		int itemId=0;
		Map dateMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) dateMap.get("currentDate");
		try {
			Criteria ch = session.createCriteria(PatientPrescriptionDetails.class).add(Restrictions.eq("SoItem","n")).createAlias("Prescription","prescription").
			add(Restrictions.eq("prescription.PrescriptionDate",HMSUtil.convertStringTypeDateToDateType(date))).
			createAlias("prescription.Hospital","hospital").add(Restrictions.eq("hospital.Id",hospitalId));
			presList = ch.list();
			
			System.out.println("presList="+presList.size());

			/*if(presList.size()>0)
					{
						for(int i=0;i<presList.size();i++)
						{
						itemId=presList.get(i).getItem().getId();
						Criteria crit = session.createCriteria(MasStoreBrand.class).add(
								Restrictions.eq("Item.Id", itemId));
						brandList1=crit.list();
						brandList.addAll(brandList1);
						}

					}*/
			/*
			 * Code By Mukesh
			 * Date 31 Aug 2012
			 */
			List<Integer> itemList=new ArrayList<Integer>();
			String sqlItemId="";
			for (int i = 0; i < presList.size(); i++) {
				int itemId1=presList.get(i).getItem().getId();
				System.out.println("itemId1="+itemId1);
				itemList.add(itemId1);
				/*if(i==0){
								sqlItemId=""+itemId1;
							}else{
								sqlItemId +=" , "+itemId1;
							}*/
			}
			/*Criteria crit = session.createCriteria(MasStoreBrand.class).add(
					Restrictions.in("Item.Id", itemList));
			brandList=crit.list();*/
			//brandList.addAll(brandList1);
			/*	supplierList=session.createCriteria(MasStoreSupplier.class).add(Restrictions.eq("Status","y")).add(Restrictions.eq("Id",Integer.parseInt(VenderId)))
					.list();*/

			map.put("presList", presList);
			map.put("brandList", brandList);
			/*	map.put("supplierList",supplierList);*/
		}catch(Exception e){
			e.printStackTrace();
		}
		return map;
	}



	public Map getLPItemDetailsValidate(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> masterDataMap = new HashMap<String, Object>();
		List<MasStoreSupplier> searchSupplierList = new ArrayList<MasStoreSupplier>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<MasStoreBrand> brandList1 = new ArrayList<MasStoreBrand>();
		//List<MasStoreSupplier>supplierList=new ArrayList<MasStoreSupplier>();

		String VenderId=box.get("VenderId");
		int hospitalId=box.getInt("hospitalId");
		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;

		List objectList = new ArrayList();
		List<PatientPrescriptionDetails>  presList = new ArrayList<PatientPrescriptionDetails>();
		int itemId=0;
		Map dateMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) dateMap.get("currentDate");
		try {
			Criteria ch = session.createCriteria(PatientPrescriptionDetails.class).add(Restrictions.eq("SoItem","n")).createAlias("Prescription","prescription").
			add(Restrictions.eq("prescription.PrescriptionDate",HMSUtil.convertStringTypeDateToDateType(date))).
			createAlias("prescription.Hospital","hospital").add(Restrictions.eq("hospital.Id",hospitalId));
			presList = ch.list();

			/*if(presList.size()>0)
					{
						for(int i=0;i<presList.size();i++)
						{
						itemId=presList.get(i).getItem().getId();
						Criteria crit = session.createCriteria(MasStoreBrand.class).add(
								Restrictions.eq("Item.Id", itemId));
						brandList1=crit.list();
						brandList.addAll(brandList1);
						}

					}*/
			/*
			 * Code By Mukesh
			 * Date 31 Aug 2012
			 */
			List<Integer> itemList=new ArrayList<Integer>();
			String sqlItemId="";
			for (int i = 0; i < presList.size(); i++) {
				int itemId1=presList.get(i).getItem().getId();
				itemList.add(itemId1);
				/*if(i==0){
								sqlItemId=""+itemId1;
							}else{
								sqlItemId +=" , "+itemId1;
							}*/
			}
			Criteria crit = session.createCriteria(MasStoreBrand.class).add(
					Restrictions.in("Item.Id", itemList));
			brandList=crit.list();
			/*	supplierList=session.createCriteria(MasStoreSupplier.class).add(Restrictions.eq("Status","y")).add(Restrictions.eq("Id",Integer.parseInt(VenderId)))
					.list();*/

			map.put("presList", presList);
			map.put("brandList", brandList);
			/*	map.put("supplierList",supplierList);*/
		}catch(Exception e){
			e.printStackTrace();
		}
		return map;
	}


	public Map getLPItemProBDetails(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> masterDataMap = new HashMap<String, Object>();
		List<MasStoreSupplier> searchSupplierList = new ArrayList<MasStoreSupplier>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<MasStoreBrand> brandList1 = new ArrayList<MasStoreBrand>();

		List StoreGrnT=new ArrayList();
		List StoreGrnT1=new ArrayList();

		//List<MasStoreSupplier>supplierList=new ArrayList<MasStoreSupplier>();

		String VenderId=box.get("VenderId");
		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		Map map1=new HashMap();
		Map map2=new HashMap();

		String crvNoFrom=box.get("crvNoFrom");
		String crvNoTo=box.get("crvNoTo");
		String crvDateFrom=box.get("crvDateFrom");
		String crvDateTo=box.get("crvDateTo");
		int hospitalId=box.getInt("soNo");

		if(crvDateFrom!=null){

		}

		List objectList = new ArrayList();
		List<PatientPrescriptionDetails>  presList = new ArrayList<PatientPrescriptionDetails>();
		PatientPrescriptionDetails ppd=new PatientPrescriptionDetails();
		List<StoreLoaninT> itemListGrn=new ArrayList<StoreLoaninT>();
		int itemId=0;
		try {
			Criteria ch = session.createCriteria(StoreLoaninT.class).add(Restrictions.eq("ProStatus","y"));
			if(!crvDateFrom.equals("") && !crvDateTo.equals("")){
				//ch.createAlias("LoaninMaster", "grn1").add(Restrictions.between("grn1.LoaninDate", HMSUtil.convertStringTypeDateToDateType(crvDateFrom), HMSUtil.convertStringTypeDateToDateType(crvDateTo))).add(Restrictions.eq("grn1.Hospital.Id",hospitalId));
				ch.createAlias("LoaninMaster", "grn1").add(Restrictions.between("grn1.ChallanDate", HMSUtil.convertStringTypeDateToDateType(crvDateFrom), HMSUtil.convertStringTypeDateToDateType(crvDateTo))).add(Restrictions.eq("grn1.Hospital.Id",hospitalId));
			}
			if(!crvNoFrom.equals("") && !crvNoTo.equals("")){
//				ch.createAlias("LoaninMaster", "grn").add(Restrictions.between("grn.LoaninNo", crvNoFrom,crvNoTo)).add(Restrictions.eq("grn.Hospital.Id",hospitalId));
				ch.createAlias("LoaninMaster", "grn").add(Restrictions.between("grn.ChallanNo", crvNoFrom,crvNoTo)).add(Restrictions.eq("grn.Hospital.Id",hospitalId));
			}
			itemListGrn=ch.list();

			if(itemListGrn.size()>0)
			{
				for(int i=0;i<itemListGrn.size();i++)
				{
					if(itemListGrn.get(i).getPreId()!=0)
					{
						int patientId=itemListGrn.get(i).getPreId();
						Criteria crit = session.createCriteria(PatientPrescriptionDetails.class).add(Restrictions.eq("Id", patientId));
						ppd=(PatientPrescriptionDetails)crit.list().get(0);
						presList.add(ppd);
					}
					else{
						presList.add(null);
					}
				}
			}
			/*
					Criteria ch = session.createCriteria(PatientPrescriptionDetails.class).add(Restrictions.eq("SoItem","y"))
					.createAlias("Prescription", "pres").add(Restrictions.eq("pres.Status", "c"));
					presList = ch.list();
					if(presList.size()>0)
					{
						for(int i=0;i<presList.size();i++)
						{
						if(presList.get(i).getItem()!=null){
						itemId=presList.get(i).getItem().getId();
						Criteria crit = session.createCriteria(MasStoreBrand.class).add(Restrictions.eq("Item.Id", itemId));
						brandList1=crit.list();
						brandList.addAll(brandList1);
						String PreList=presList.get(i).getId().toString();
						String qury="select sgt.AMOUNT_VALUE from store_grn_t sgt where sgt.ID='"+PreList+"'";
						StoreGrnT= session.createSQLQuery(qury).list();
						String cost="0.0";
						if(StoreGrnT.size()>0 ){
						cost=StoreGrnT.get(0).toString();
						}else{
						cost="0.0";
						}
						map1.put(itemId,cost);
						}
						else{
							map1.put(itemId,"0.0");
						}
						}
					}
					supplierList=session.createCriteria(MasStoreSupplier.class).add(Restrictions.eq("Status","y")).add(Restrictions.eq("Id",Integer.parseInt(VenderId)))
					.list();

					map.put("presList", presList);
					map.put("brandList", brandList);
					map.put("map1",map1);
					map.put("supplierList",supplierList);
			 */
			map.put("presList", presList);
			map.put("itemListGrn", itemListGrn);


		}catch(Exception e){
			e.printStackTrace();
		}
		return map;
	}


	public boolean addProformaBEntry(Map<String, Object> infoMap,Map<String, Object> dataMap) {
		StoreProformaHeader storeProformaHeader = (StoreProformaHeader) infoMap.get("storeProformaHeader");
		List<StoreProformaDetail> storeProformaDetaillist = (ArrayList<StoreProformaDetail>) infoMap.get("storeProformaDetaillist");
		boolean successfullyAdded = false;
		@SuppressWarnings("unused")
		int pageNo = 0;
		String entryNo = "";
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		String max = "";
		String no = "";

		if (dataMap.get("deptId") != null)
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		if (dataMap.get("hospitalId") != null)
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		if (dataMap.get("userName") != null)
			userName = ("" + dataMap.get("userName"));
		String preId[]=null;
		if(dataMap.get("preId")!=null){
			preId=(String[])dataMap.get("preId");

		}
		int crvId[]=null;
		if(dataMap.get("crvId")!=null){
			crvId=(int[])dataMap.get("crvId");

		}
		// Session sess = factory.openSession();
		session = (Session) getSession();
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (!(infoMap.get("headerStored") + "").equals("yes")) {
				System.out.println("Before saveOrupdate ===========> headerStore=yes");
				hbt.saveOrUpdate(storeProformaHeader);
			}

			if (storeProformaDetaillist.size() > 0) {
				for (int i = 0; i < storeProformaDetaillist.size(); i++)
				{     System.out.println("storeProformaDetaillist in for Loop=======>");
					StoreProformaDetail storeProformaDetailObj = new StoreProformaDetail();
					storeProformaDetailObj = (StoreProformaDetail) storeProformaDetaillist.get(i);
					hbt.saveOrUpdate(storeProformaDetailObj);
				}
			}

			List<StoreFyDocumentNo> proformabnoList = new ArrayList<StoreFyDocumentNo>();
			proformabnoList = session.createCriteria(StoreFyDocumentNo.class).add(Restrictions.eq("Department.Id", deptId)).add(Restrictions.eq("Hospital.Id", hospitalId)).list();

			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) proformabnoList.get(0);
			storeFyDocumentNo.setProformaBEntryNo(storeProformaHeader.getProformaNo());

			hbt.save(storeFyDocumentNo);
			hbt.refresh(storeFyDocumentNo);

			successfullyAdded = true;
			Query query=null;
			int i1=0;
			String updatePendingPre="update StoreLoaninT as sgt  set " +
			"sgt.ProStatus=:ProStatus"+
			" where sgt.Id=:crvId" ;
			query=session.createQuery(updatePendingPre);
			for(int i=0;i<crvId.length;i++)
			{
				query.setParameter("ProStatus","n");
				try{
					query.setParameter("crvId", crvId[i]);
				}catch(Exception e)
				{
					e.printStackTrace();
				}
				query.executeUpdate();
			}


			MasStoreBudget masStoreBudget = new MasStoreBudget();
			List maxFin=session.createSQLQuery("select max(msf.FINANCIAL_ID) from MAS_STORE_FINANCIAL msf").list();

			int financial_id=Integer.parseInt(maxFin.get(0).toString());
			List<MasStoreBudget> masStoreBudgetList = new ArrayList<MasStoreBudget>();
			masStoreBudgetList = session.createCriteria(MasStoreBudget.class).add(
					Restrictions.eq("Financial.Id", financial_id)).add(
							Restrictions.eq("Department.Id", deptId)).add(Restrictions.eq("Hospital.Id", hospitalId)).list();


			BigDecimal TotalAmountAlloted = null;
			BigDecimal SpendAmount = null;
			BigDecimal BlanceAmount = null;

			if (masStoreBudgetList != null && masStoreBudgetList.size() > 0) {
				masStoreBudget = masStoreBudgetList.get(0);
				try {
					TotalAmountAlloted = masStoreBudget.getTotalAllocatedAmount();
				} catch (Exception e) {
					TotalAmountAlloted = new BigDecimal(0);
				}

				try {
					SpendAmount = masStoreBudget.getSpendAmount();
				} catch (Exception e) {
					SpendAmount = new BigDecimal(0);
				}

				try {
					if(masStoreBudget.getBalanceAmount() !=null){
						BlanceAmount = masStoreBudget.getBalanceAmount();
					}
				} catch (Exception e) {
					BlanceAmount = new BigDecimal(0);
				}
				//}

			BigDecimal poAmount=new BigDecimal(0);
			if(storeProformaHeader.getInvoiceAmount()!=null)
				poAmount = storeProformaHeader.getInvoiceAmount();
			 System.out.println("StoreDataServiceImple---->");
			// masStoreBudget.setCrvComittedAmount(existing_committed_amount.add(poAmount));

			masStoreBudget.setBalanceAmount(BlanceAmount.subtract(poAmount));
			masStoreBudget.setSpendAmount(SpendAmount.add(poAmount));

			hbt.update(masStoreBudget);
			}
			storeProformaHeader.setTotalAllocatedAmount(TotalAmountAlloted);
			storeProformaHeader.setBalanceAmount(SpendAmount);
			storeProformaHeader.setSpendAmount(BlanceAmount);
			hbt.update(storeProformaHeader);
			tx.commit();

		} catch (RuntimeException e) {
			if (tx != null)
				tx.rollback();
			// throw e; // or display error message
			e.printStackTrace();
		} finally {
			//session.close();
		}

		return successfullyAdded;

	}
	public boolean submitDispensaryForLoanOut(Box box)
	{
		boolean status=false;
		Map keyValue=new HashMap();
		Vector pvmsNo = box.getVector("pvmsNo");
		Vector nomenclature = box.getVector("nomenclature");
		Vector strength = box.getVector("strength");
		Vector lp = box.getVector("lpId");
		Vector lpItem=box.getVector("lp");
		Vector lpQty=box.getVector("lpQty");
		Vector lotOut=box.getVector("lotOut");
		Vector lotQty=box.getVector("lotQty");

		Vector qtyPending=box.getVector("qtyPending");
		Vector dept_Id=box.getVector("deptId");
		Vector hospital_Id = box.getVector("hospitalId");
		Vector changeBy = box.getVector("changeBy");
		Vector changeDate = box.getVector("date1");
		Vector sr_no=box.getVector(RequestConstants.SR_NO);
		Vector itemId=box.getVector("itemId");
		for(int i=0;i<itemId.size();i++){
			keyValue.put(itemId.get(i),lpQty.get(i));
		}
		Set set=keyValue.keySet();

		String serviceNo=box.get("serviceNoS");
		String hinNo=box.get("hinNoS");
		String visitNumber=box.get("visitNumber");


		int deptId=Integer.parseInt(dept_Id.get(0).toString());

		List preList =new ArrayList();

		int hospitalId=Integer.parseInt(hospital_Id.get(0).toString());

		List<StoreFyDocumentNo> demandNoList = new ArrayList<StoreFyDocumentNo>();
		String demandNo = "";
		String finalDemandNo = "";
		int storeFyDocumentNoId = 0;
		Session session = (Session)getSession();
		demandNoList = session.createCriteria(StoreFyDocumentNo.class).add(Restrictions.eq("Department.Id", deptId)).list();
		if (demandNoList != null && demandNoList.size() > 0)
		{
			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) demandNoList.get(0);
			demandNo = ("" + storeFyDocumentNo.getDemandNo());
			storeFyDocumentNoId = storeFyDocumentNo.getId();
			try {
				finalDemandNo = getMaxNo(demandNo);

			} catch (Exception e)
			{
				e.printStackTrace();
			}
		}
		preList=session.createSQLQuery("select ppd.PRESCRIPTION_ID,ppd.ITEM_ID from Patient_Prescription_header pph left " +
				"outer join Patient_Prescription_details ppd on " +
				"pph.PRESCRIPTION_ID=ppd.PRESCRIPTION_ID where  visit_id in (select v.VISIT_ID " +
				"from visit v " +
				"where v.HIN_ID in " +
				"(select p.HIN_ID from patient p where p.HIN_NO='"+hinNo+"' and p.SERVICE_NO='"+serviceNo+"' ) and v.VISIT_NO='"+visitNumber+"')").list();


		Iterator itr=preList.iterator();
		Query query=null;
		int i=0;
		String updatePendingPre="update PatientPrescriptionDetails as ppd  set ppd.SoId=:SoId" +
		",ppd.SoItem=:SoItem,ppd.SoQty=:SoQty" +
		" where ppd.Prescription.Id=:Prescription and ppd.Item.Id=:Item";
		query=session.createQuery(updatePendingPre);
		while(itr.hasNext()){
			Object[] tuple = (Object[]) itr.next();
			if(lpItem.contains(tuple[1].toString())){
				query.setParameter("SoId","");
				query.setParameter("SoItem","n");
				query.setParameter("SoQty", Integer.parseInt(keyValue.get(tuple[1].toString().trim()).toString()));
				query.setParameter("Prescription", Integer.parseInt(tuple[0].toString()));
				query.setParameter("Item", Integer.parseInt(tuple[1].toString()));
				query.executeUpdate();
			}
		}


		//List idList=session.creat

		/*for (int i = 0; i < pvmsNo.size(); i++)
				{
		        if((lp.get(i).toString()).equals("y"))
		        {
		            int qtypending=Integer.parseInt(qtyPending.get(i).toString());
		            if(qtypending>0)
		            {
		               if(header==1)
		               {
		            	   newMObj.setDemandNo(finalDemandNo);
		            	   MasDepartment fromdept = new MasDepartment();
		            	   fromdept.setId(deptId);
		            	   newMObj.setDepartment(fromdept);
		            	   MasHospital masHospital = new MasHospital();
		            	   masHospital.setId(hospitalId);
		            	   newMObj.setHospital(masHospital);
		            	   Date d1=null;
		            	   if((changeDate.get(0)!=null)&&(!changeDate.get(0).toString().equals("")))
		            	   d1=HMSUtil.convertStringTypeDateToDateType(changeDate.get(0).toString());
		            	   newMObj.setDemandDate(d1);
		            	   newMObj.setLastChgBy(changeBy.get(0).toString());
		            	   newMObj.setLastChgDate(d1);
		            	   newMObj.setStatus("o");
		            	   MasDepartment todept = new MasDepartment();
		            	   todept.setId(24);
		            	   newMObj.setToStore(todept);
		            	   newMObj.setDispensaryLp("y");
		            	   hbt.save(newMObj);
					       hbt.refresh(newMObj);
						   newinternalIndentId = newMObj.getId();
		            	// Auto-Increment No for demand No of Department Indent
							List<StoreFyDocumentNo> demandnoList = new ArrayList<StoreFyDocumentNo>();
							demandnoList = session.createCriteria(StoreFyDocumentNo.class).add(Restrictions.eq("Department.Id", deptId)).list();

							StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) demandnoList.get(0);
							storeFyDocumentNo.setDemandNo(finalDemandNo);

							hbt.save(storeFyDocumentNo);
							hbt.refresh(storeFyDocumentNo);
		            	   header++;
		               }
		               List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();
		               StoreInternalIndentT storeInternalIndentT = new StoreInternalIndentT();
		               int srNo=Integer.parseInt((sr_no.get(i).toString()));
		               storeInternalIndentT.setInternal(newMObj);
		               storeInternalIndentT.setSrNo(srNo);
		               storeInternalIndentT.setStockInHand(0);
		               int item_id=Integer.parseInt(itemId.get(i).toString());
		               storeInternalIndentT.setQtyRequest(qtypending);
		               MasStoreItem masStoreItem = new MasStoreItem();
		               masStoreItem.setId(item_id);
		               storeInternalIndentT.setItem(masStoreItem);
		               MasDepartment department = new MasDepartment();
		               department.setId(deptId);
		        	   storeInternalIndentT.setDepartment(department);*/




		status=true;
		return status;
	}

	public Map<String, Object> getReceiptRegisterReport(Map<String, Object> dataMap) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();
		int deptId = 0;
		int hospitalId=0;
		String fromDate="";
		String toDate="";
		Map<String, Object> utilMap = new HashMap<String, Object>();

		List objectList = new ArrayList();

		try {
			deptId = Integer.parseInt("" + dataMap.get("DEPART"));
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
			fromDate=(String)dataMap.get("fromDate");
			toDate=(String)dataMap.get("toDate");

			/*String qry="SELECT store_grn_m.grn_no AS grn_m_grn_no,store_grn_m.grn_date AS grn_m_grn_date,case TO_CHAR(mas_store_item_conversion.formula) WHEN '1'then ((store_grn_t.received_qty+store_grn_t.free_qty)*store_grn_t.mdq_value) / (mas_store_item_conversion.conversion_factor1) else (store_grn_t.received_qty+store_grn_t.free_qty) end as grn_t_received_qty,"
				    +"store_grn_t.received_qty AS grn_t_received_qty1, store_grn_t.unit_rate AS grn_t_unit_rate, store_grn_t.amount_value AS grn_t_amount_value, store_grn_t.batch_no AS grn_t_batch_no,"
				    +"store_grn_t.expiry_date AS grn_t_expiry_date, store_grn_m.at_so_no AS grn_m_at_so_no,store_grn_m.invoice_no AS grn_m_invoice_no, mas_store_supplier.supplier_name AS supplier_name,"
				     +"mas_store_item.pvms_no AS item_pvms_no,mas_store_item.nomenclature AS item_nomenclature,mas_unit_of_measurement.unit_of_measurement_name AS unit_mesurmnt_name,mas_hospital.hospital_name AS hospital_name,"
				     +"mas_store_unit.unit_name AS convrson_itm_unit_name, store_po_header.po_number AS header_po_number , mas_store_group.group_name as groupName, mas_store_item.remarks as remarks"
				    +" from  store_grn_m store_grn_m left outer join store_grn_t store_grn_t ON store_grn_m.grn_master_id = store_grn_t.grn_master_id"
				    +" left outer join mas_store_supplier mas_store_supplier ON store_grn_m.supplier_id = mas_store_supplier.supplier_id"
				    +" left outer join mas_hospital mas_hospital ON store_grn_m.hospital_id = mas_hospital.hospital_id"
				    +" left outer join mas_store_item mas_store_item ON store_grn_t.item_id = mas_store_item.item_id"
				    +" left outer join mas_unit_of_measurement mas_unit_of_measurement ON store_grn_t.unit_of_measurement_id = mas_unit_of_measurement.unit_of_measurement_id"
				    +" left outer join store_po_header store_po_header ON store_po_header.po_id = store_grn_m.po_id"
				    +" left outer join mas_store_group mas_store_group ON mas_store_item.group_id = mas_store_group.group_id"
				    +" right outer join mas_store_item_conversion mas_store_item_conversion ON mas_store_item.item_conversion_id = mas_store_item_conversion.item_conversion_id"
				    +" right outer join mas_store_unit mas_store_unit ON mas_store_item_conversion.purchase_unit_id = mas_store_unit.unit_id"
				    +" where store_grn_m.grn_date>=to_date('"
				    +fromDate +"',"+"'dd-mm-yyyy'"+")"
				    +"AND store_grn_m.grn_date <=to_date('"
				    +toDate +"',"+"'dd-mm-yyyy'"+")"
				    +"AND store_grn_m.department_id ='"
				    +deptId+"' and store_grn_m.hospital_id="+hospitalId; */  // add by javed khan


			String qry="SELECT store_grn_m.grn_no AS grn_m_grn_no, "+
			" store_grn_m.grn_date AS grn_m_grn_date, "+
			" case store_grn_m.RECEIVE_TYPE "+
			" when 'a' then masStoreAirForceDepot.AIR_FORCE_DEPOT_NAME "+
			" when 'U' then mas_unit.UNIT_NAME "+ 
			" when 'G' then store_grn_m.HOW_RECEIVED "+  
			" end as unitaddres, "+
			" mas_hospital.hospital_name AS hospital_name "+
			" from  store_grn_m store_grn_m "+
			" left outer join mas_hospital mas_hospital "+ 
			" ON store_grn_m.hospital_id = mas_hospital.hospital_id "+  
			" left outer join Mas_Store_Air_Force_Depot masStoreAirForceDepot "+
			" on store_grn_m.UNIT_ID=masStoreAirForceDepot.AIR_FORCE_DEPOT_ID "+
			" left outer join  mas_unit mas_unit   on  store_grn_m.OTHER_UNIT=mas_unit.UNIT_ID "+
			" where store_grn_m.grn_date>=to_date('"
			+fromDate +"',"+"'dd-mm-yyyy'"+")"
			+"AND store_grn_m.grn_date <=to_date('"
			+toDate +"',"+"'dd-mm-yyyy'"+")"
			+"AND store_grn_m.department_id ='"
			+deptId+"' and store_grn_m.hospital_id="+hospitalId+" and store_grn_m.RECEIVE_TYPE !='L' order by store_grn_m.GRN_MASTER_ID desc";  // add by javed khan


			objectList = (List) session.createSQLQuery(qry).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		if(objectList.size()==0){
			String msg="No Record Found !";
			map.put("msg", msg);
		}
		for (Iterator iterator = objectList.iterator(); iterator.hasNext();) {
			Object[] object = (Object[]) iterator.next();
		}

		map.put("objectList", objectList);
		return map;

	}
	public Map<String, Object> getSurplusItem(Map<String, Object> dataMap) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();
		int deptId = 0;
		int hospitalId = 0;
		String fromDate="";
		String toDate="";
		String qry="";
		String lifeSpan = "";
		
		Map<String, Object> utilMap = new HashMap<String, Object>();

		List objectList = new ArrayList();

		try {
			deptId = Integer.parseInt("" + dataMap.get("DEPART"));
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
			fromDate=(String)dataMap.get("fromDate");
			toDate=(String)dataMap.get("toDate");
			lifeSpan = (String)dataMap.get("lifeSpan");
			String lsQry = "";
			if(!lifeSpan.equals("")){
				lsQry = " and msi.self_life='"+lifeSpan+"' ";
			}
			
			if (dataMap.get("Pvms_no") != null && !(dataMap.get("Pvms_no").equals(""))){
				String pvms_no=(String)dataMap.get("Pvms_no");
				pvms_no=pvms_no.toUpperCase();
				List itemList= new ArrayList();
				//itemList=session.createQuery("select id from MasStoreItem  where PvmsNo =? and Hospital.Id=?").setParameter(0,pvms_no).setParameter(1, hospitalId)  .list();
				/********** commented and Coded by Ujjwal Kashyap For Sql injection **********************/	
				/*				        String sqlQry=
				        "select  msi.ITEM_TYPE_ID  from mas_store_item msi  where msi.PVMS_NO=UPPER('"+pvms_no+"')";
				 */				       
				
				
				Criteria c=session.createCriteria(MasStoreItem.class).add(Restrictions.eq("PvmsNo", pvms_no));
				if(!lifeSpan.equals("")){
					c = c.add(Restrictions.eq("SelfLife", lifeSpan));
				}
				List nivList=c.list();
				 /*nivList=session.createSQLQuery(sqlQry).list();*/
				 if((Integer.parseInt((""+nivList.get(0)))) == 2){
					 itemList = session.createCriteria(MasStoreItem.class)
					 .add(Restrictions.eq("PvmsNo", pvms_no).ignoreCase()).add(Restrictions.eq("Hospital.Id", hospitalId))
					 .add(Restrictions.eq("Status", "y")).list();
				 }else{
					 itemList = session.createCriteria(MasStoreItem.class)
					 .add(Restrictions.eq("PvmsNo", pvms_no).ignoreCase())
					 .add(Restrictions.eq("Status", "y")).list();
				 }


				 //itemList=session.createQuery("select id from MasStoreItem  where PvmsNo =? and Hospital.Id=?").setParameter(0,pvms_no).setParameter(1, hospitalId) .list();

				 // int item_id=(Integer)session.createQuery("select Id from MasStoreItem where PvmsNo = ?").setParameter(0,pvms_no).uniqueResult();
				 //if(item_id != 0){
				 if(itemList.size() > 0){
					 /*qry="select MAS_STORE_ITEM.PVMS_NO,MAS_STORE_ITEM.NOMENCLATURE,MAS_STORE_ITEM.MIN_STOCK,MAS_STORE_ITEM.MAX_STOCK,"
							   +"STORE_ITEM_BATCH_STOCK.BATCH_NO,STORE_ITEM_BATCH_STOCK.RECEIVED_QTY,STORE_ITEM_BATCH_STOCK.ISSUE_QTY,STORE_ITEM_BATCH_STOCK.OPENING_BALANCE_QTY,"
							   +"MAS_STORE_ITEM_CONVERSION.ITEM_UNIT_NAME,(NVL(STORE_ITEM_BATCH_STOCK.RECEIVED_QTY,0)+NVL(STORE_ITEM_BATCH_STOCK.OPENING_BALANCE_QTY,0)-NVL(STORE_ITEM_BATCH_STOCK.ISSUE_QTY,0)) as Balance ,"
							   +"(NVL(MAS_STORE_ITEM.MAX_STOCK,0)-NVL(STORE_ITEM_BATCH_STOCK.OPENING_BALANCE_QTY,0)) as Sulplus "
							   +" from MAS_STORE_ITEM  MAS_STORE_ITEM,STORE_ITEM_BATCH_STOCK STORE_ITEM_BATCH_STOCK,MAS_STORE_ITEM_CONVERSION MAS_STORE_ITEM_CONVERSION"

							   +" WHERE MAS_STORE_ITEM.ITEM_CONVERSION_ID=MAS_STORE_ITEM_CONVERSION.ITEM_CONVERSION_ID AND"
							   +" MAS_STORE_ITEM.ITEM_ID=STORE_ITEM_BATCH_STOCK.ITEM_ID AND (NVL(MAS_STORE_ITEM.MAX_STOCK,0)-NVL(STORE_ITEM_BATCH_STOCK.OPENING_BALANCE_QTY,0))>0"
							   +" AND MAS_STORE_ITEM.PVMS_NO='"
							   +pvms_no+"'";*/
					 MasStoreItem masStoreItem=(MasStoreItem)itemList.get(0);
					 int item_id=masStoreItem.getId();
					 /*  qry="select MAS_STORE_ITEM.PVMS_NO,MAS_STORE_ITEM.NOMENCLATURE,MAS_STORE_ITEM.MIN_STOCK,MAS_STORE_ITEM.MAX_STOCK,mas_store_brand.brand_name,"
							   +"STORE_ITEM_BATCH_STOCK.BATCH_NO,STORE_ITEM_BATCH_STOCK.RECEIVED_QTY,STORE_ITEM_BATCH_STOCK.ISSUE_QTY,STORE_ITEM_BATCH_STOCK.OPENING_BALANCE_QTY,STORE_ITEM_BATCH_STOCK.Closing_stock,STORE_ITEM_BATCH_STOCK.Expiry_date,STORE_ITEM_BATCH_STOCK.Manufacture_date,STORE_ITEM_BATCH_STOCK.Cost_price,"
							   +"MAS_STORE_ITEM_CONVERSION.ITEM_UNIT_NAME,(NVL(STORE_ITEM_BATCH_STOCK.RECEIVED_QTY,0)+NVL(STORE_ITEM_BATCH_STOCK.OPENING_BALANCE_QTY,0)-NVL(STORE_ITEM_BATCH_STOCK.ISSUE_QTY,0)) as Balance ,"
							   +"(NVL(MAS_STORE_ITEM.MAX_STOCK,0)-NVL(STORE_ITEM_BATCH_STOCK.OPENING_BALANCE_QTY,0)) as Sulplus "
							   +" from MAS_STORE_ITEM  MAS_STORE_ITEM,STORE_ITEM_BATCH_STOCK STORE_ITEM_BATCH_STOCK,MAS_STORE_ITEM_CONVERSION MAS_STORE_ITEM_CONVERSION,mas_store_brand"
							   +" WHERE MAS_STORE_ITEM.ITEM_CONVERSION_ID=MAS_STORE_ITEM_CONVERSION.ITEM_CONVERSION_ID AND"
							   +" MAS_STORE_ITEM.ITEM_ID=STORE_ITEM_BATCH_STOCK.ITEM_ID AND (NVL(MAS_STORE_ITEM.MAX_STOCK,0)-NVL(STORE_ITEM_BATCH_STOCK.OPENING_BALANCE_QTY,0))>0"
							   +" AND MAS_STORE_ITEM.ITEM_ID='"
							   +item_id+"' and mas_store_brand.item_id='"
							   +item_id+"' and mas_store_item.department_id='"
							   +deptId+"'"; */
					 /**/
					 qry ="select smdt.MMF_IN_QTY , sum(sibs.CLOSING_STOCK) as stock,"
						 +" case when msi.SELF_LIFE='SL' then sum(sibs.CLOSING_STOCK)-(smdt.MMF_IN_QTY*6)"
						 +" when msi.SELF_LIFE='LL' then sum(sibs.CLOSING_STOCK)-(smdt.MMF_IN_QTY*9)"
						 +" end "
						 +" as surplus ,"
						 +" msi.NOMENCLATURE,msi.BRANDED_GENERIC ,"
						 +" msic.ITEM_UNIT_NAME"
						 +" from store_mmf_department_t smdt left outer join  store_mmf_department_m smdm " 
						 +" on smdt.STORE_MMF_DEPARTMENT_M_ID = smdm.ID  left outer join store_item_batch_stock sibs" 
						 +" on smdt.ITEM_ID = sibs.ITEM_ID  left outer join mas_store_item msi on smdt.ITEM_ID = msi.ITEM_ID"  
						 +" left outer join mas_store_item_conversion msic on msic.ITEM_CONVERSION_ID = msi.ITEM_CONVERSION_ID" 
						 +" where  smdt.ITEM_ID='"+item_id+"' and smdm.STORE_WARD_DEPT='"+deptId+"' and sibs.DEPARTMENT_ID = '"+deptId+"' and sibs.HOSPITAL_ID='"+hospitalId+"'"
						 +" and smdm.hospital_id='"+hospitalId+"'"
						 +" group by smdt.MMF_IN_QTY, msi.NOMENCLATURE,msi.BRANDED_GENERIC,"  
						 +" msic.ITEM_UNIT_NAME,msi.SELF_LIFE"
						 +" having CASE WHEN MSI.SELF_LIFE='SL' THEN sum(sibs.CLOSING_STOCK)-(smdt.MMF_IN_QTY*6)"
						 +" WHEN MSI.SELF_LIFE='LL' THEN sum(sibs.CLOSING_STOCK)-(smdt.MMF_IN_QTY*9)"
						 +" END >0";



					 List masManuList= new ArrayList();
					 String qry1="select mas_store_item.NOMENCLATURE , mas_manufacturer.MANUFACTURER_NAME  from mas_store_item"
						 +" left outer join mas_manufacturer mas_manufacturer on MAS_STORE_ITEM.MANUFACTURER_ID=mas_manufacturer.MANUFACTURER_ID"
						 +" where mas_store_item.item_id='"
						 +item_id+"'";
					 masManuList = (List) session.createSQLQuery(qry1).list();
					 map.put("masManuList", masManuList);
					 objectList = (List) session.createSQLQuery(qry).list();
				 }
				 else{
					 String msg="Wrong Input";
					 map.put("msg",msg);
				 }
			}else{
				if(dataMap.get("item_name")!=null && !dataMap.get("item_name").equals("") ){
					int item_id = Integer.parseInt("" + dataMap.get("item_name"));
					/*  qry="select MAS_STORE_ITEM.PVMS_NO,MAS_STORE_ITEM.NOMENCLATURE,MAS_STORE_ITEM.MIN_STOCK,MAS_STORE_ITEM.MAX_STOCK,mas_store_brand.brand_name,"
							   +"STORE_ITEM_BATCH_STOCK.BATCH_NO,STORE_ITEM_BATCH_STOCK.RECEIVED_QTY,STORE_ITEM_BATCH_STOCK.ISSUE_QTY,STORE_ITEM_BATCH_STOCK.OPENING_BALANCE_QTY,STORE_ITEM_BATCH_STOCK.Closing_stock,STORE_ITEM_BATCH_STOCK.Expiry_date,STORE_ITEM_BATCH_STOCK.Manufacture_date,STORE_ITEM_BATCH_STOCK.Cost_price,"
							   +"MAS_STORE_ITEM_CONVERSION.ITEM_UNIT_NAME,(NVL(STORE_ITEM_BATCH_STOCK.RECEIVED_QTY,0)+NVL(STORE_ITEM_BATCH_STOCK.OPENING_BALANCE_QTY,0)-NVL(STORE_ITEM_BATCH_STOCK.ISSUE_QTY,0)) as Balance ,"
							   +"(NVL(MAS_STORE_ITEM.MAX_STOCK,0)-NVL(STORE_ITEM_BATCH_STOCK.OPENING_BALANCE_QTY,0)) as Sulplus "
							   +" from MAS_STORE_ITEM  MAS_STORE_ITEM,STORE_ITEM_BATCH_STOCK STORE_ITEM_BATCH_STOCK,MAS_STORE_ITEM_CONVERSION MAS_STORE_ITEM_CONVERSION,mas_store_brand"
							   +" WHERE MAS_STORE_ITEM.ITEM_CONVERSION_ID=MAS_STORE_ITEM_CONVERSION.ITEM_CONVERSION_ID AND"
							   +" MAS_STORE_ITEM.ITEM_ID=STORE_ITEM_BATCH_STOCK.ITEM_ID AND (NVL(MAS_STORE_ITEM.MAX_STOCK,0)-NVL(STORE_ITEM_BATCH_STOCK.OPENING_BALANCE_QTY,0))>0"
							   +" AND MAS_STORE_ITEM.ITEM_ID='"
							   +item_id+"'and mas_store_brand.item_id='"
							   +item_id+"' and mas_store_item.department_id='"
							   +deptId+"'";*/

					/*  qry ="select smdt.MMF_IN_QTY , sum(sibs.CLOSING_STOCK) as stock,sum(sibs.CLOSING_STOCK)-(smdt.MMF_IN_QTY*6) as surplus, msi.NOMENCLATURE,msi.BRANDED_GENERIC,msic.ITEM_UNIT_NAME from store_mmf_department_t smdt left outer join  store_mmf_department_m smdm  on smdt.STORE_MMF_DEPARTMENT_M_ID = smdm.ID  left outer join store_item_batch_stock sibs on smdt.ITEM_ID = sibs.ITEM_ID  left outer join mas_store_item msi on smdt.ITEM_ID = msi.ITEM_ID  left outer join mas_store_item_conversion msic on msic.ITEM_CONVERSION_ID = msi.ITEM_CONVERSION_ID"
                                +" where smdt.ITEM_ID='"
							  +item_id+"'  and  smdm.STORE_WARD_DEPT='"
							  +deptId+"' and sibs.DEPARTMENT_ID = '"
							  +deptId+"' and sibs.HOSPITAL_ID='"
							  + hospitalId+"' and smdm.hospital_id='"+hospitalId+"'"
							  +" group by smdt.MMF_IN_QTY , msi.NOMENCLATURE,msi.BRANDED_GENERIC,msic.ITEM_UNIT_NAME , "
							  +" msic.ITEM_UNIT_NAME "
							  +" having  sum(sibs.CLOSING_STOCK)-(smdt.MMF_IN_QTY*6)>0 ";
					 */


					qry ="select smdt.MMF_IN_QTY , sum(sibs.CLOSING_STOCK) as stock,"
						+" case when msi.SELF_LIFE='SL' then sum(sibs.CLOSING_STOCK)-(smdt.MMF_IN_QTY*6)"
						+" when msi.SELF_LIFE='LL' then sum(sibs.CLOSING_STOCK)-(smdt.MMF_IN_QTY*9)"
						+" end "
						+" as surplus ,"
						+" msi.NOMENCLATURE,msi.BRANDED_GENERIC ,"
						+" msic.ITEM_UNIT_NAME"
						+" from store_mmf_department_t smdt left outer join  store_mmf_department_m smdm " 
						+" on smdt.STORE_MMF_DEPARTMENT_M_ID = smdm.ID  left outer join store_item_batch_stock sibs" 
						+" on smdt.ITEM_ID = sibs.ITEM_ID  left outer join mas_store_item msi on smdt.ITEM_ID = msi.ITEM_ID"  
						+" left outer join mas_store_item_conversion msic on msic.ITEM_CONVERSION_ID = msi.ITEM_CONVERSION_ID" 
						+" where  smdt.ITEM_ID='"+item_id+"' and smdm.STORE_WARD_DEPT='"+deptId+"' and sibs.DEPARTMENT_ID = '"+deptId+"' and sibs.HOSPITAL_ID='"+hospitalId+"'"
						+" and smdm.hospital_id='"+hospitalId+"'"
						+ lsQry
						+" group by smdt.MMF_IN_QTY, msi.NOMENCLATURE,msi.BRANDED_GENERIC,"  
						+" msic.ITEM_UNIT_NAME,msi.SELF_LIFE"
						+" having CASE WHEN MSI.SELF_LIFE='SL' THEN sum(sibs.CLOSING_STOCK)-(smdt.MMF_IN_QTY*6)"
						+" WHEN MSI.SELF_LIFE='LL' THEN sum(sibs.CLOSING_STOCK)-(smdt.MMF_IN_QTY*9)"
						+" END >0";


					List masManuList= new ArrayList();
					String qry1="select mas_store_item.NOMENCLATURE , mas_manufacturer.MANUFACTURER_NAME  from mas_store_item"
						+" left outer join mas_manufacturer mas_manufacturer on MAS_STORE_ITEM.MANUFACTURER_ID=mas_manufacturer.MANUFACTURER_ID"
						+" where mas_store_item.item_id='"
						+item_id+"'";
					masManuList = (List) session.createSQLQuery(qry1).list();
					map.put("masManuList", masManuList);
					objectList = (List) session.createSQLQuery(qry).list();
				}else{

					//  int item_id = Integer.parseInt("" + dataMap.get("item_name"));
					/*  qry="select MAS_STORE_ITEM.PVMS_NO,MAS_STORE_ITEM.NOMENCLATURE,MAS_STORE_ITEM.MIN_STOCK,MAS_STORE_ITEM.MAX_STOCK,mas_store_brand.brand_name,"
								   +"STORE_ITEM_BATCH_STOCK.BATCH_NO,STORE_ITEM_BATCH_STOCK.RECEIVED_QTY,STORE_ITEM_BATCH_STOCK.ISSUE_QTY,STORE_ITEM_BATCH_STOCK.OPENING_BALANCE_QTY,STORE_ITEM_BATCH_STOCK.Closing_stock,STORE_ITEM_BATCH_STOCK.Expiry_date,STORE_ITEM_BATCH_STOCK.Manufacture_date,STORE_ITEM_BATCH_STOCK.Cost_price,"
								   +"MAS_STORE_ITEM_CONVERSION.ITEM_UNIT_NAME,(NVL(STORE_ITEM_BATCH_STOCK.RECEIVED_QTY,0)+NVL(STORE_ITEM_BATCH_STOCK.OPENING_BALANCE_QTY,0)-NVL(STORE_ITEM_BATCH_STOCK.ISSUE_QTY,0)) as Balance ,"
								   +"(NVL(MAS_STORE_ITEM.MAX_STOCK,0)-NVL(STORE_ITEM_BATCH_STOCK.OPENING_BALANCE_QTY,0)) as Sulplus "
								   +" from MAS_STORE_ITEM  MAS_STORE_ITEM,STORE_ITEM_BATCH_STOCK STORE_ITEM_BATCH_STOCK,MAS_STORE_ITEM_CONVERSION MAS_STORE_ITEM_CONVERSION,mas_store_brand"
								   +" WHERE MAS_STORE_ITEM.ITEM_CONVERSION_ID=MAS_STORE_ITEM_CONVERSION.ITEM_CONVERSION_ID AND"
								   +" MAS_STORE_ITEM.ITEM_ID=STORE_ITEM_BATCH_STOCK.ITEM_ID AND (NVL(MAS_STORE_ITEM.MAX_STOCK,0)-NVL(STORE_ITEM_BATCH_STOCK.OPENING_BALANCE_QTY,0))>0"
								   +" AND MAS_STORE_ITEM.ITEM_ID='"
								   +item_id+"'and mas_store_brand.item_id='"
								   +item_id+"' and mas_store_item.department_id='"
								   +deptId+"'";*/

					/* qry ="select smdt.MMF_IN_QTY , sum(sibs.CLOSING_STOCK) as stock,sum(sibs.CLOSING_STOCK)-(smdt.MMF_IN_QTY*6) as surplus, msi.NOMENCLATURE,msi.BRANDED_GENERIC,msic.ITEM_UNIT_NAME from store_mmf_department_t smdt left outer join  store_mmf_department_m smdm  on smdt.STORE_MMF_DEPARTMENT_M_ID = smdm.ID  left outer join store_item_batch_stock sibs on smdt.ITEM_ID = sibs.ITEM_ID  left outer join mas_store_item msi on smdt.ITEM_ID = msi.ITEM_ID  left outer join mas_store_item_conversion msic on msic.ITEM_CONVERSION_ID = msi.ITEM_CONVERSION_ID"
	                                +" where  smdm.STORE_WARD_DEPT='"
								  +deptId+"' and sibs.DEPARTMENT_ID = '"
								  +deptId+"' and sibs.HOSPITAL_ID='"
								  + hospitalId+"' and smdm.hospital_id='"+hospitalId+"'"
								  +" group by smdt.MMF_IN_QTY , msi.NOMENCLATURE,msi.BRANDED_GENERIC,msic.ITEM_UNIT_NAME , "
								  +" msic.ITEM_UNIT_NAME "
								  +" having  sum(sibs.CLOSING_STOCK)-(smdt.MMF_IN_QTY*6)>0 ";*/
					qry ="select smdt.MMF_IN_QTY , sum(sibs.CLOSING_STOCK) as stock,"
						+" case when msi.SELF_LIFE='SL' then sum(sibs.CLOSING_STOCK)-(smdt.MMF_IN_QTY*6)"
						+" when msi.SELF_LIFE='LL' then sum(sibs.CLOSING_STOCK)-(smdt.MMF_IN_QTY*9)"
						+" end "
						+" as surplus ,"
						+" msi.NOMENCLATURE,msi.BRANDED_GENERIC ,"
						+" msic.ITEM_UNIT_NAME"
						+" from store_mmf_department_t smdt left outer join  store_mmf_department_m smdm " 
						+" on smdt.STORE_MMF_DEPARTMENT_M_ID = smdm.ID  left outer join store_item_batch_stock sibs" 
						+" on smdt.ITEM_ID = sibs.ITEM_ID  left outer join mas_store_item msi on smdt.ITEM_ID = msi.ITEM_ID"  
						+" left outer join mas_store_item_conversion msic on msic.ITEM_CONVERSION_ID = msi.ITEM_CONVERSION_ID" 
						+" where  smdm.STORE_WARD_DEPT='"+deptId+"' and sibs.DEPARTMENT_ID = '"+deptId+"' and sibs.HOSPITAL_ID='"+hospitalId+"'"
						+" and smdm.hospital_id='"+hospitalId+"'"
						+ lsQry
						+" group by smdt.MMF_IN_QTY, msi.NOMENCLATURE,msi.BRANDED_GENERIC,"  
						+" msic.ITEM_UNIT_NAME,msi.SELF_LIFE"
						+" having CASE WHEN MSI.SELF_LIFE='SL' THEN sum(sibs.CLOSING_STOCK)-(smdt.MMF_IN_QTY*6)"
						+" WHEN MSI.SELF_LIFE='LL' THEN sum(sibs.CLOSING_STOCK)-(smdt.MMF_IN_QTY*9)"
						+" END >0";







					List masManuList= new ArrayList();
					String qry1="select mas_store_item.NOMENCLATURE , mas_manufacturer.MANUFACTURER_NAME  from mas_store_item"
						+" left outer join mas_manufacturer mas_manufacturer on MAS_STORE_ITEM.MANUFACTURER_ID=mas_manufacturer.MANUFACTURER_ID"
						+" ";
					masManuList = (List) session.createSQLQuery(qry1).list();
					map.put("masManuList", masManuList);
					objectList = (List) session.createSQLQuery(qry).list();
				}
			}

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		/*for (Iterator iterator = objectList.iterator(); iterator.hasNext();) {
					Object[] object = (Object[]) iterator.next();
				}*/

		map.put("objectList", objectList);
		return map;

	}

	public Map<String, Object> getRecieveItem(Map<String, Object> dataMap) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();
		int deptId = 0;
		int hospitalId=0;
		String fromDate="";
		String toDate="";
		String qry="";
		Map<String, Object> utilMap = new HashMap<String, Object>();

		List objectList = new ArrayList();

		try {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
			fromDate=(String)dataMap.get("from_date");
			toDate=(String)dataMap.get("to_date");
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));


			qry="SELECT ms.issue_no,ms.issue_date,msi.pvms_no,msu.unit_name,msi.nomenclature as item_name,"+
			"ts.qty_request,ts.item_issued,ts.batch_no,ts.expiry_date,ts.qty_issued,ts.ack_date,ts.manufacture_date"+
			" FROM store_issue_m ms left outer join store_issue_t ts on ms.id= ts.issue_m_id"+
			" left outer join mas_department md on ms.department_id= md.department_id"+
			" left outer join mas_department md1 on ms.to_store= md1.department_id"+
			" left outer join mas_store_item msi on ts.item_id=msi.item_id"+
			" left outer join mas_store_item_conversion msic on msic.item_conversion_id=msi.item_conversion_id"+
			" left outer join mas_store_unit msu on msu.unit_id=msic.issue_unit_id"+
			" left outer join mas_hospital mh on ms.hospital_id=ms.hospital_id"+
			" where  ms.issue_type='i' and ms.status='p' and ts.ack_date is not null"+
			" and ms.issue_date between to_date('"+fromDate +"',"+"'dd-mm-yyyy'"+")"+
			" and to_date('"+toDate +"',"+"'dd-mm-yyyy'"+")"+
			" and ms.to_store='"+deptId+"'"+
			" and ms.HOSPITAL_ID='"+hospitalId+"'"+
			" group by msi.nomenclature,msi.pvms_no,batch_no,ts.item_issued,issue_date,ts.ack_date,ts.expiry_date,"+
			" msu.unit_name,issue_no,ts.qty_request,ts.qty_issued,ts.manufacture_date"+
			" Order By ms.issue_no,issue_date,ts.ack_date,item_name,batch_no";


			objectList = (List) session.createSQLQuery(qry).list();
			if(objectList.size()==0){
				String msg="No Record Found !!!";
				map.put("msg", msg);


			}


		} catch (HibernateException e) {
			e.printStackTrace();
		}
		for (Iterator iterator = objectList.iterator(); iterator.hasNext();) {
			Object[] object = (Object[]) iterator.next();
			/*for(int i=0; i<object.length;i++)
					{
					}*/
		}

		map.put("objectList", objectList);
		return map;

	}

	// Javed khan
	public Map<String, Object> getLocalRegisterReport(Map<String, Object> dataMap) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();
		int deptId = 0;
		int hospitalId = 0;
		String fromDate="";
		String toDate="";
		String pvms="";
		String vendor="";
		String fromCrv="";
		String toCrv="";
		String item_name="";
		Map<String, Object> utilMap = new HashMap<String, Object>();

		List objectList = new ArrayList();

		try {
			deptId = Integer.parseInt("" + dataMap.get("DEPART"));
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));

			String qry="SELECT store_grn_m.grn_no AS grn_m_grn_no,store_grn_m.grn_date AS grn_m_grn_date,case TO_CHAR(mas_store_item_conversion.formula) WHEN '1'then ((store_grn_t.received_qty+store_grn_t.free_qty)*store_grn_t.mdq_value) / (mas_store_item_conversion.conversion_factor1) else (store_grn_t.received_qty+store_grn_t.free_qty) end as grn_t_received_qty,"
				+"store_grn_t.received_qty AS grn_t_received_qty1, store_grn_t.unit_rate AS grn_t_unit_rate, store_grn_t.amount_value AS grn_t_amount_value, store_grn_t.batch_no AS grn_t_batch_no,"
				+"store_grn_t.expiry_date AS grn_t_expiry_date, store_grn_m.at_so_no AS grn_m_at_so_no,store_grn_m.invoice_no AS grn_m_invoice_no,store_grn_m.invoice_date AS grn_m_invoice_date, mas_store_supplier.supplier_name AS supplier_name, mas_store_supplier.address1 AS supplier_address,"
				+"mas_store_item.pvms_no AS item_pvms_no,mas_store_item.nomenclature AS item_nomenclature,mas_unit_of_measurement.unit_of_measurement_name AS unit_mesurmnt_name,mas_hospital.hospital_name AS hospital_name,"
				+"mas_store_unit.unit_name AS convrson_itm_unit_name, store_po_header.po_number AS header_po_number , mas_store_group.group_name as groupName, mas_store_item.remarks as remarks,"

				+"patient_prescription_header.PRESCRIPTION_ID,patient_prescription_header.PRESCRIPTION_NO,p.P_FIRST_NAME,p.P_LAST_NAME, me.FIRST_NAME"
				+",me.LAST_NAME,p.S_FIRST_NAME,p.S_LAST_NAME,p.SERVICE_NO,mr.RANK_NAME,mrel.RELATION_NAME,patient_prescription_details.DOSAGE,v.DIAGNOSIS_NAME "

				+" from  store_grn_m store_grn_m left outer join store_grn_t store_grn_t ON store_grn_m.grn_master_id = store_grn_t.grn_master_id"
				+" left outer join mas_store_supplier mas_store_supplier ON store_grn_m.supplier_id = mas_store_supplier.supplier_id"
				+" left outer join mas_hospital mas_hospital ON store_grn_m.hospital_id = mas_hospital.hospital_id"
				+" left outer join mas_store_item mas_store_item ON store_grn_t.item_id = mas_store_item.item_id"
				+" left outer join mas_unit_of_measurement mas_unit_of_measurement ON store_grn_t.unit_of_measurement_id = mas_unit_of_measurement.unit_of_measurement_id"
				+" left outer join store_po_header store_po_header ON store_po_header.po_id = store_grn_m.po_id"
				+" left outer join mas_store_group mas_store_group ON mas_store_item.group_id = mas_store_group.group_id"
				+" right outer join mas_store_item_conversion mas_store_item_conversion ON mas_store_item.item_conversion_id = mas_store_item_conversion.item_conversion_id"
				+" right outer join mas_store_unit mas_store_unit ON mas_store_item_conversion.purchase_unit_id = mas_store_unit.unit_id"

				+" left outer join patient_prescription_details patient_prescription_details on store_grn_t.ID= patient_prescription_details.ID"
				+" left outer join patient_prescription_header patient_prescription_header on patient_prescription_details.PRESCRIPTION_ID=patient_prescription_header.PRESCRIPTION_ID"
				+" left outer join visit v on patient_prescription_header.VISIT_ID=v.VISIT_ID"
				+"	left outer join patient p on v.HIN_ID=p.HIN_ID"
				+" left outer join mas_employee me on v.DOCTOR_ID=me.EMPLOYEE_ID"
				+" left outer join mas_hospital mh on v.HOSPITAL_ID=mh.HOSPITAL_ID"
				+"	left outer join mas_rank mr on p.RANK_ID=mr.RANK_ID"
				+" left outer join mas_relation mrel on p.RELATION_ID  =mrel.RELATION_ID"

				+" where store_grn_m.hospital_id='"
				+ hospitalId+"'"
				+" and  store_grn_m.RECEIVE_TYPE='l' AND store_grn_m.department_id ='"
				+deptId+"' or store_grn_m.RECEIVE_TYPE='L'"
				+" order by store_grn_m.grn_date desc, store_grn_m.grn_no desc";

			SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
			if((String)dataMap.get("fromDate")!= null && (String)dataMap.get("toDate") != null){
				fromDate=(String)dataMap.get("fromDate");
				toDate=(String)dataMap.get("toDate");
				System.out.println("sdf.format(HMSUtil.convertStringTypeDateToDateType(toDate)---"+sdf.format(HMSUtil.convertStringTypeDateToDateType(toDate)));
				qry="SELECT store_grn_m.grn_no AS grn_m_grn_no,store_grn_m.grn_date AS grn_m_grn_date,case TO_CHAR(mas_store_item_conversion.formula) WHEN '1'then ((store_grn_t.received_qty+store_grn_t.free_qty)*store_grn_t.mdq_value) / (mas_store_item_conversion.conversion_factor1) else (store_grn_t.received_qty+store_grn_t.free_qty) end as grn_t_received_qty,"
					+"store_grn_t.received_qty AS grn_t_received_qty1, store_grn_t.unit_rate AS grn_t_unit_rate, store_grn_t.amount_value AS grn_t_amount_value, store_grn_t.batch_no AS grn_t_batch_no,"
					+"store_grn_t.expiry_date AS grn_t_expiry_date, store_grn_m.at_so_no AS grn_m_at_so_no,store_grn_m.invoice_no AS grn_m_invoice_no,store_grn_m.invoice_date AS grn_m_invoice_date, mas_store_supplier.supplier_name AS supplier_name, mas_store_supplier.address1 AS supplier_address,"
					+"mas_store_item.pvms_no AS item_pvms_no,mas_store_item.nomenclature AS item_nomenclature,mas_unit_of_measurement.unit_of_measurement_name AS unit_mesurmnt_name,mas_hospital.hospital_name AS hospital_name,"
					+"mas_store_unit.unit_name AS convrson_itm_unit_name, store_po_header.po_number AS header_po_number , mas_store_group.group_name as groupName, mas_store_item.remarks as remarks"

					+",patient_prescription_header.PRESCRIPTION_ID,patient_prescription_header.PRESCRIPTION_NO,p.P_FIRST_NAME,p.P_LAST_NAME, me.FIRST_NAME"
					+",me.LAST_NAME,p.S_FIRST_NAME,p.S_LAST_NAME,p.SERVICE_NO,mr.RANK_NAME,mrel.RELATION_NAME,patient_prescription_details.DOSAGE,v.DIAGNOSIS_NAME "

					+" from  store_grn_m store_grn_m left outer join store_grn_t store_grn_t ON store_grn_m.grn_master_id = store_grn_t.grn_master_id"
					+" left outer join mas_store_supplier mas_store_supplier ON store_grn_m.supplier_id = mas_store_supplier.supplier_id"
					+" left outer join mas_hospital mas_hospital ON store_grn_m.hospital_id = mas_hospital.hospital_id"
					+" left outer join mas_store_item mas_store_item ON store_grn_t.item_id = mas_store_item.item_id"
					+" left outer join mas_unit_of_measurement mas_unit_of_measurement ON store_grn_t.unit_of_measurement_id = mas_unit_of_measurement.unit_of_measurement_id"
					+" left outer join store_po_header store_po_header ON store_po_header.po_id = store_grn_m.po_id"
					+" left outer join mas_store_group mas_store_group ON mas_store_item.group_id = mas_store_group.group_id"
					+" right outer join mas_store_item_conversion mas_store_item_conversion ON mas_store_item.item_conversion_id = mas_store_item_conversion.item_conversion_id"
					+" right outer join mas_store_unit mas_store_unit ON mas_store_item_conversion.purchase_unit_id = mas_store_unit.unit_id"

					+" left outer join patient_prescription_details patient_prescription_details on store_grn_t.ID= patient_prescription_details.ID"
					+" left outer join patient_prescription_header patient_prescription_header on patient_prescription_details.PRESCRIPTION_ID=patient_prescription_header.PRESCRIPTION_ID"
					+" left outer join visit v on patient_prescription_header.VISIT_ID=v.VISIT_ID"
					+" left outer join patient p on v.HIN_ID=p.HIN_ID"
					+" left outer join mas_employee me on v.DOCTOR_ID=me.EMPLOYEE_ID"
					+" left outer join mas_hospital mh on v.HOSPITAL_ID=mh.HOSPITAL_ID"
					+" left outer join mas_rank mr on p.RANK_ID=mr.RANK_ID"
					+" left outer join mas_relation mrel on p.RELATION_ID  =mrel.RELATION_ID"

					+" where store_grn_m.hospital_id="+hospitalId+"  and   " 
					+" store_grn_m.RECEIVE_TYPE='l' AND store_grn_m.grn_date between '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(fromDate) )+"'"
					+" AND '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(toDate) )+"'"
					+"AND store_grn_m.department_id ="
					+deptId+" or store_grn_m.RECEIVE_TYPE='L'"
					+" AND store_grn_m.grn_date between '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(fromDate))
					+"' AND '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(toDate)) +"' order by store_grn_m.grn_date desc,  store_grn_m.grn_no desc";
			}

			if((String)dataMap.get("fromCrv")!= null && !dataMap.get("fromCrv").equals("") && !dataMap.get("toCrv").equals("") && (String)dataMap.get("toCrv") != null){
				fromCrv=(String)dataMap.get("fromCrv");
				toCrv=(String)dataMap.get("toCrv");

				qry="SELECT store_grn_m.grn_no AS grn_m_grn_no,store_grn_m.grn_date AS grn_m_grn_date,case TO_CHAR(mas_store_item_conversion.formula) WHEN '1'then ((store_grn_t.received_qty+store_grn_t.free_qty)*store_grn_t.mdq_value) / (mas_store_item_conversion.conversion_factor1) else (store_grn_t.received_qty+store_grn_t.free_qty) end as grn_t_received_qty,"
					+"store_grn_t.received_qty AS grn_t_received_qty1, store_grn_t.unit_rate AS grn_t_unit_rate, store_grn_t.amount_value AS grn_t_amount_value, store_grn_t.batch_no AS grn_t_batch_no,"
					+"store_grn_t.expiry_date AS grn_t_expiry_date, store_grn_m.at_so_no AS grn_m_at_so_no,store_grn_m.invoice_no AS grn_m_invoice_no,store_grn_m.invoice_date AS grn_m_invoice_date, mas_store_supplier.supplier_name AS supplier_name, mas_store_supplier.address1 AS supplier_address,"
					+"mas_store_item.pvms_no AS item_pvms_no,mas_store_item.nomenclature AS item_nomenclature,mas_unit_of_measurement.unit_of_measurement_name AS unit_mesurmnt_name,mas_hospital.hospital_name AS hospital_name,"
					+"mas_store_unit.unit_name AS convrson_itm_unit_name, store_po_header.po_number AS header_po_number , mas_store_group.group_name as groupName, mas_store_item.remarks as remarks"

					+",patient_prescription_header.PRESCRIPTION_ID,patient_prescription_header.PRESCRIPTION_NO,p.P_FIRST_NAME,p.P_LAST_NAME, me.FIRST_NAME"
					+",me.LAST_NAME,p.S_FIRST_NAME,p.S_LAST_NAME,p.SERVICE_NO,mr.RANK_NAME,mrel.RELATION_NAME,patient_prescription_details.DOSAGE,v.DIAGNOSIS_NAME "

					+" from  store_grn_m store_grn_m left outer join store_grn_t store_grn_t ON store_grn_m.grn_master_id = store_grn_t.grn_master_id"
					+" left outer join mas_store_supplier mas_store_supplier ON store_grn_m.supplier_id = mas_store_supplier.supplier_id"
					+" left outer join mas_hospital mas_hospital ON store_grn_m.hospital_id = mas_hospital.hospital_id"
					+" left outer join mas_store_item mas_store_item ON store_grn_t.item_id = mas_store_item.item_id"
					+" left outer join mas_unit_of_measurement mas_unit_of_measurement ON store_grn_t.unit_of_measurement_id = mas_unit_of_measurement.unit_of_measurement_id"
					+" left outer join store_po_header store_po_header ON store_po_header.po_id = store_grn_m.po_id"
					+" left outer join mas_store_group mas_store_group ON mas_store_item.group_id = mas_store_group.group_id"
					+" right outer join mas_store_item_conversion mas_store_item_conversion ON mas_store_item.item_conversion_id = mas_store_item_conversion.item_conversion_id"
					+" right outer join mas_store_unit mas_store_unit ON mas_store_item_conversion.purchase_unit_id = mas_store_unit.unit_id"

					+" left outer join patient_prescription_details patient_prescription_details on store_grn_t.ID= patient_prescription_details.ID"
					+" left outer join patient_prescription_header patient_prescription_header on patient_prescription_details.PRESCRIPTION_ID=patient_prescription_header.PRESCRIPTION_ID"
					+" left outer join visit v on patient_prescription_header.VISIT_ID=v.VISIT_ID"
					+" left outer join patient p on v.HIN_ID=p.HIN_ID"
					+" left outer join mas_employee me on v.DOCTOR_ID=me.EMPLOYEE_ID"
					+" left outer join mas_hospital mh on v.HOSPITAL_ID=mh.HOSPITAL_ID"
					+" left outer join mas_rank mr on p.RANK_ID=mr.RANK_ID"
					+" left outer join mas_relation mrel on p.RELATION_ID  =mrel.RELATION_ID"

					+" where  store_grn_m.hospital_id="+hospitalId+"  and store_grn_m.RECEIVE_TYPE='l' AND store_grn_m.grn_no between '"
					+fromCrv+"' AND '"
					+toCrv +"'"
					+"AND store_grn_m.department_id ='"
					+deptId+"' or store_grn_m.RECEIVE_TYPE='L'"
					+" AND store_grn_m.grn_no between '"
					+fromCrv+"' AND '"
					+toCrv +"'"
					+" order by store_grn_m.grn_date desc, store_grn_m.grn_no desc";

			}



			if((String)dataMap.get("pvms")!= null && !dataMap.get("pvms").equals("")){
				pvms=(String)dataMap.get("pvms");
				qry="SELECT store_grn_m.grn_no AS grn_m_grn_no,store_grn_m.grn_date AS grn_m_grn_date,case TO_CHAR(mas_store_item_conversion.formula) WHEN '1'then ((store_grn_t.received_qty+store_grn_t.free_qty)*store_grn_t.mdq_value) / (mas_store_item_conversion.conversion_factor1) else (store_grn_t.received_qty+store_grn_t.free_qty) end as grn_t_received_qty,"
					+"store_grn_t.received_qty AS grn_t_received_qty1, store_grn_t.unit_rate AS grn_t_unit_rate, store_grn_t.amount_value AS grn_t_amount_value, store_grn_t.batch_no AS grn_t_batch_no,"
					+"store_grn_t.expiry_date AS grn_t_expiry_date, store_grn_m.at_so_no AS grn_m_at_so_no,store_grn_m.invoice_no AS grn_m_invoice_no,store_grn_m.invoice_date AS grn_m_invoice_date, mas_store_supplier.supplier_name AS supplier_name, mas_store_supplier.address1 AS supplier_address,"
					+"mas_store_item.pvms_no AS item_pvms_no,mas_store_item.nomenclature AS item_nomenclature,mas_unit_of_measurement.unit_of_measurement_name AS unit_mesurmnt_name,mas_hospital.hospital_name AS hospital_name,"
					+"mas_store_unit.unit_name AS convrson_itm_unit_name, store_po_header.po_number AS header_po_number , mas_store_group.group_name as groupName, mas_store_item.remarks as remarks"

					+",patient_prescription_header.PRESCRIPTION_ID,patient_prescription_header.PRESCRIPTION_NO,p.P_FIRST_NAME,p.P_LAST_NAME, me.FIRST_NAME"
					+",me.LAST_NAME,p.S_FIRST_NAME,p.S_LAST_NAME,p.SERVICE_NO,mr.RANK_NAME,mrel.RELATION_NAME,patient_prescription_details.DOSAGE,v.DIAGNOSIS_NAME "

					+" from  store_grn_m store_grn_m left outer join store_grn_t store_grn_t ON store_grn_m.grn_master_id = store_grn_t.grn_master_id"
					+" left outer join mas_store_supplier mas_store_supplier ON store_grn_m.supplier_id = mas_store_supplier.supplier_id"
					+" left outer join mas_hospital mas_hospital ON store_grn_m.hospital_id = mas_hospital.hospital_id"
					+" left outer join mas_store_item mas_store_item ON store_grn_t.item_id = mas_store_item.item_id"
					+" left outer join mas_unit_of_measurement mas_unit_of_measurement ON store_grn_t.unit_of_measurement_id = mas_unit_of_measurement.unit_of_measurement_id"
					+" left outer join store_po_header store_po_header ON store_po_header.po_id = store_grn_m.po_id"
					+" left outer join mas_store_group mas_store_group ON mas_store_item.group_id = mas_store_group.group_id"
					+" right outer join mas_store_item_conversion mas_store_item_conversion ON mas_store_item.item_conversion_id = mas_store_item_conversion.item_conversion_id"
					+" right outer join mas_store_unit mas_store_unit ON mas_store_item_conversion.purchase_unit_id = mas_store_unit.unit_id"

					+" left outer join patient_prescription_details patient_prescription_details on store_grn_t.ID= patient_prescription_details.ID"
					+" left outer join patient_prescription_header patient_prescription_header on patient_prescription_details.PRESCRIPTION_ID=patient_prescription_header.PRESCRIPTION_ID"
					+" left outer join visit v on patient_prescription_header.VISIT_ID=v.VISIT_ID"
					+" left outer join patient p on v.HIN_ID=p.HIN_ID"
					+" left outer join mas_employee me on v.DOCTOR_ID=me.EMPLOYEE_ID"
					+" left outer join mas_hospital mh on v.HOSPITAL_ID=mh.HOSPITAL_ID"
					+" left outer join mas_rank mr on p.RANK_ID=mr.RANK_ID"
					+" left outer join mas_relation mrel on p.RELATION_ID  =mrel.RELATION_ID"

					+" where store_grn_m.hospital_id="+hospitalId+"  and store_grn_m.RECEIVE_TYPE='l' AND mas_store_item.pvms_no ='"
					+pvms +"'"
					+"AND store_grn_m.department_id ='"
					+deptId+"' or store_grn_m.RECEIVE_TYPE='L'"
					+" AND mas_store_item.pvms_no ='"
					+pvms +"'"
					+"  order by store_grn_m.grn_date desc, store_grn_m.grn_no desc";

			}
			if((String)dataMap.get("nameItem")!= null && !dataMap.get("nameItem").equals("")){
				item_name=(String)dataMap.get("nameItem");
				qry="SELECT store_grn_m.grn_no AS grn_m_grn_no,store_grn_m.grn_date AS grn_m_grn_date,case TO_CHAR(mas_store_item_conversion.formula) WHEN '1'then ((store_grn_t.received_qty+store_grn_t.free_qty)*store_grn_t.mdq_value) / (mas_store_item_conversion.conversion_factor1) else (store_grn_t.received_qty+store_grn_t.free_qty) end as grn_t_received_qty,"
					+"store_grn_t.received_qty AS grn_t_received_qty1, store_grn_t.unit_rate AS grn_t_unit_rate, store_grn_t.amount_value AS grn_t_amount_value, store_grn_t.batch_no AS grn_t_batch_no,"
					+"store_grn_t.expiry_date AS grn_t_expiry_date, store_grn_m.at_so_no AS grn_m_at_so_no,store_grn_m.invoice_no AS grn_m_invoice_no,store_grn_m.invoice_date AS grn_m_invoice_date, mas_store_supplier.supplier_name AS supplier_name, mas_store_supplier.address1 AS supplier_address,"
					+"mas_store_item.pvms_no AS item_pvms_no,mas_store_item.nomenclature AS item_nomenclature,mas_unit_of_measurement.unit_of_measurement_name AS unit_mesurmnt_name,mas_hospital.hospital_name AS hospital_name,"
					+"mas_store_unit.unit_name AS convrson_itm_unit_name, store_po_header.po_number AS header_po_number , mas_store_group.group_name as groupName, mas_store_item.remarks as remarks"

					+",patient_prescription_header.PRESCRIPTION_ID,patient_prescription_header.PRESCRIPTION_NO,p.P_FIRST_NAME,p.P_LAST_NAME, me.FIRST_NAME"
					+",me.LAST_NAME,p.S_FIRST_NAME,p.S_LAST_NAME,p.SERVICE_NO,mr.RANK_NAME,mrel.RELATION_NAME,patient_prescription_details.DOSAGE,v.DIAGNOSIS_NAME "

					+" from  store_grn_m store_grn_m left outer join store_grn_t store_grn_t ON store_grn_m.grn_master_id = store_grn_t.grn_master_id"
					+" left outer join mas_store_supplier mas_store_supplier ON store_grn_m.supplier_id = mas_store_supplier.supplier_id"
					+" left outer join mas_hospital mas_hospital ON store_grn_m.hospital_id = mas_hospital.hospital_id"
					+" left outer join mas_store_item mas_store_item ON store_grn_t.item_id = mas_store_item.item_id"
					+" left outer join mas_unit_of_measurement mas_unit_of_measurement ON store_grn_t.unit_of_measurement_id = mas_unit_of_measurement.unit_of_measurement_id"
					+" left outer join store_po_header store_po_header ON store_po_header.po_id = store_grn_m.po_id"
					+" left outer join mas_store_group mas_store_group ON mas_store_item.group_id = mas_store_group.group_id"
					+" right outer join mas_store_item_conversion mas_store_item_conversion ON mas_store_item.item_conversion_id = mas_store_item_conversion.item_conversion_id"
					+" right outer join mas_store_unit mas_store_unit ON mas_store_item_conversion.purchase_unit_id = mas_store_unit.unit_id"

					+" left outer join patient_prescription_details patient_prescription_details on store_grn_t.ID= patient_prescription_details.ID"
					+" left outer join patient_prescription_header patient_prescription_header on patient_prescription_details.PRESCRIPTION_ID=patient_prescription_header.PRESCRIPTION_ID"
					+" left outer join visit v on patient_prescription_header.VISIT_ID=v.VISIT_ID"
					+" left outer join patient p on v.HIN_ID=p.HIN_ID"
					+" left outer join mas_employee me on v.DOCTOR_ID=me.EMPLOYEE_ID"
					+" left outer join mas_hospital mh on v.HOSPITAL_ID=mh.HOSPITAL_ID"
					+" left outer join mas_rank mr on p.RANK_ID=mr.RANK_ID"
					+" left outer join mas_relation mrel on p.RELATION_ID  =mrel.RELATION_ID"

					+" where store_grn_m.hospital_id="+hospitalId+"  and store_grn_m.RECEIVE_TYPE='l' AND mas_store_item.nomenclature ='"
					+item_name +"'"
					+"AND store_grn_m.department_id ='"
					+deptId+"' or store_grn_m.RECEIVE_TYPE='L'"
					+"AND mas_store_item.nomenclature ='"
					+item_name +"'"
					+"  order by store_grn_m.grn_date desc,  store_grn_m.grn_no desc";

			}
			vendor=(String)dataMap.get("vendor");
			if(vendor != null && ! vendor.equals("0") ){
				vendor=(String)dataMap.get("vendor");
				qry="SELECT store_grn_m.grn_no AS grn_m_grn_no,store_grn_m.grn_date AS grn_m_grn_date,case TO_CHAR(mas_store_item_conversion.formula) WHEN '1'then ((store_grn_t.received_qty+store_grn_t.free_qty)*store_grn_t.mdq_value) / (mas_store_item_conversion.conversion_factor1) else (store_grn_t.received_qty+store_grn_t.free_qty) end as grn_t_received_qty,"
					+"store_grn_t.received_qty AS grn_t_received_qty1, store_grn_t.unit_rate AS grn_t_unit_rate, store_grn_t.amount_value AS grn_t_amount_value, store_grn_t.batch_no AS grn_t_batch_no,"
					+"store_grn_t.expiry_date AS grn_t_expiry_date, store_grn_m.at_so_no AS grn_m_at_so_no,store_grn_m.invoice_no AS grn_m_invoice_no,store_grn_m.invoice_date AS grn_m_invoice_date, mas_store_supplier.supplier_name AS supplier_name, mas_store_supplier.address1 AS supplier_address,"
					+"mas_store_item.pvms_no AS item_pvms_no,mas_store_item.nomenclature AS item_nomenclature,mas_unit_of_measurement.unit_of_measurement_name AS unit_mesurmnt_name,mas_hospital.hospital_name AS hospital_name,"
					+"mas_store_unit.unit_name AS convrson_itm_unit_name, store_po_header.po_number AS header_po_number , mas_store_group.group_name as groupName, mas_store_item.remarks as remarks"

					+",patient_prescription_header.PRESCRIPTION_ID,patient_prescription_header.PRESCRIPTION_NO,p.P_FIRST_NAME,p.P_LAST_NAME, me.FIRST_NAME"
					+",me.LAST_NAME,p.S_FIRST_NAME,p.S_LAST_NAME,p.SERVICE_NO,mr.RANK_NAME,mrel.RELATION_NAME,patient_prescription_details.DOSAGE,v.DIAGNOSIS_NAME "

					+" from  store_grn_m store_grn_m left outer join store_grn_t store_grn_t ON store_grn_m.grn_master_id = store_grn_t.grn_master_id"
					+" left outer join mas_store_supplier mas_store_supplier ON store_grn_m.supplier_id = mas_store_supplier.supplier_id"
					+" left outer join mas_hospital mas_hospital ON store_grn_m.hospital_id = mas_hospital.hospital_id"
					+" left outer join mas_store_item mas_store_item ON store_grn_t.item_id = mas_store_item.item_id"
					+" left outer join mas_unit_of_measurement mas_unit_of_measurement ON store_grn_t.unit_of_measurement_id = mas_unit_of_measurement.unit_of_measurement_id"
					+" left outer join store_po_header store_po_header ON store_po_header.po_id = store_grn_m.po_id"
					+" left outer join mas_store_group mas_store_group ON mas_store_item.group_id = mas_store_group.group_id"
					+" right outer join mas_store_item_conversion mas_store_item_conversion ON mas_store_item.item_conversion_id = mas_store_item_conversion.item_conversion_id"
					+" right outer join mas_store_unit mas_store_unit ON mas_store_item_conversion.purchase_unit_id = mas_store_unit.unit_id"

					+" left outer join patient_prescription_details patient_prescription_details on store_grn_t.ID= patient_prescription_details.ID"
					+" left outer join patient_prescription_header patient_prescription_header on patient_prescription_details.PRESCRIPTION_ID=patient_prescription_header.PRESCRIPTION_ID"
					+" left outer join visit v on patient_prescription_header.VISIT_ID=v.VISIT_ID"
					+" left outer join patient p on v.HIN_ID=p.HIN_ID"
					+" left outer join mas_employee me on v.DOCTOR_ID=me.EMPLOYEE_ID"
					+" left outer join mas_hospital mh on v.HOSPITAL_ID=mh.HOSPITAL_ID"
					+" left outer join mas_rank mr on p.RANK_ID=mr.RANK_ID"
					+" left outer join mas_relation mrel on p.RELATION_ID  =mrel.RELATION_ID"

					+" where  store_grn_m.hospital_id="+hospitalId+"  and store_grn_m.RECEIVE_TYPE='l' AND store_grn_m.supplier_id ='"
					+vendor +"'"
					+"AND store_grn_m.department_id ='"
					+deptId+"' or store_grn_m.RECEIVE_TYPE='L'"
					+"AND store_grn_m.supplier_id ='"
					+vendor +"'"
					+"  order by store_grn_m.grn_date desc, store_grn_m.grn_no desc ";

			}

			objectList = (List) session.createSQLQuery(qry).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		for (Iterator iterator = objectList.iterator(); iterator.hasNext();) {
			Object[] object = (Object[]) iterator.next();
			/*for(int i=0; i<object.length;i++)
					{
					}*/
		}

		map.put("objectList", objectList);
		return map;

	}

	//Javed
	public Map<String, Object> getActualStock(Map<String, Object> dataMap) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();
		int deptId = 0;
		String reportType="";
		String query="";
		String fromDate="";
		String toDate="";
		String qry="";
		int hosId = 0;  // javed khan
		Map<String, Object> utilMap = new HashMap<String, Object>();

		List objectList = new ArrayList();
		if(!(dataMap.get("hospitalId")).equals(""))
		{
		hosId= Integer.parseInt("" + dataMap.get("hospitalId"));
		}// javed khan
		try {
			if(!(dataMap.get("deptId")).equals(""))
			{
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
			}
			query=(String)dataMap.get("QUERY");
			reportType= (String)dataMap.get("report_Type");

			/*SQLQuery sqlQry = session.createSQLQuery(query);
					if(dataMap.get("pvms")!=null && !dataMap.get("pvms").equals("")){
						sqlQry.setParameter("pvms", dataMap.get("pvms"));

						}*/
			
		     Date date = HMSUtil.getExpiryDateYYYYMMDD();

			if(reportType.equalsIgnoreCase("detail")){
				qry="select  "
					+"mas_store_item.pvms_no as mas_store_item_pvms_no,mas_store_item.nomenclature as mas_store_item_nomenclature, "
					+" sum(store_item_batch_stock.CLOSING_STOCK) as balance_qty,"
					+"store_item_batch_stock.item_id,store_item_batch_stock.batch_no,cast(store_item_batch_stock.expiry_date as varchar(50)),mas_store_unit.UNIT_NAME "
					+" ,store_item_batch_stock.MANUFACTURE_DATE , mm.MANUFACTURER_NAME as comp "
					+" from store_item_batch_stock store_item_batch_stock  "
					+" left outer join mas_store_item mas_store_item on store_item_batch_stock.item_id = mas_store_item.item_id "
					+" left outer join mas_store_item_conversion mas_store_item_conversion on mas_store_item.ITEM_CONVERSION_ID=mas_store_item_conversion.ITEM_CONVERSION_ID"
					+" left outer join mas_store_unit mas_store_unit on mas_store_item_conversion.issue_unit_ID=mas_store_unit.unit_id"
					+" left outer join mas_store_brand msb on store_item_batch_stock.brand_ID = msb.brand_ID "
					+" left outer join mas_manufacturer mm on  store_item_batch_stock.MANUFACTURER_ID   =mm.MANUFACTURER_ID   "
					+" where store_item_batch_stock.department_id ='"
					+ deptId+"'"
					+" and store_item_batch_stock.hospital_id='"
					+ hosId+"'  and store_item_batch_stock.CLOSING_STOCK>0 "
					+ query+" group by store_item_batch_stock.item_id,mas_store_item.pvms_no,mas_store_item.nomenclature,mas_store_unit.UNIT_NAME"
					+",store_item_batch_stock.batch_no,store_item_batch_stock.expiry_date ,store_item_batch_stock.MANUFACTURE_DATE ,mm.MANUFACTURER_NAME"
					+" order by  mas_store_item_pvms_no,mas_store_item.nomenclature";
			}else{
				qry="select mas_store_item.pvms_no as mas_store_item_pvms_no,mas_store_item.nomenclature as mas_store_item_nomenclature, "
					+" sum(store_item_batch_stock.CLOSING_STOCK) as balance_qty,"
					+"mas_store_unit.UNIT_NAME "
					+" from mas_store_item mas_store_item "
					+" inner join store_item_batch_stock store_item_batch_stock on mas_store_item.item_id = store_item_batch_stock.item_id"
					+" left outer join mas_store_item_conversion mas_store_item_conversion on mas_store_item.ITEM_CONVERSION_ID=mas_store_item_conversion.ITEM_CONVERSION_ID"
					+" left outer join mas_store_unit mas_store_unit on mas_store_item_conversion.issue_unit_ID=mas_store_unit.unit_id"
					+" where store_item_batch_stock.department_id ='"
					+ deptId+"'"
					+" and store_item_batch_stock.hospital_id='"
					+ hosId+"'  and store_item_batch_stock.CLOSING_STOCK>0 "
					+ query+" group by store_item_batch_stock.item_id,mas_store_item.pvms_no,mas_store_item.nomenclature,mas_store_unit.UNIT_NAME"
					+" order by  mas_store_item_pvms_no,mas_store_item.nomenclature";
			}
			Query queryHiber =(Query) session.createSQLQuery(qry);
			if (dataMap.get("item") != null && !dataMap.get("item").equals("")) {
				queryHiber =queryHiber.setParameter("item", dataMap.get("item"));
			}
			if (dataMap.get("pvms") != null &&(!dataMap.get("pvms").equals(""))) {
				queryHiber =queryHiber.setParameter("pvms", dataMap.get("pvms"));
			}
			if (dataMap.get("item1") != null &&(!dataMap.get("item1").equals(""))) {
				queryHiber =queryHiber.setParameter("item1", dataMap.get("item1"));
			}
			
			//objectList = (List) session.createSQLQuery(qry).list();
			objectList = (List)queryHiber.list(); 

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		for (Iterator iterator = objectList.iterator(); iterator.hasNext();) {
			Object[] object = (Object[]) iterator.next();
			/*for(int i=0; i<object.length;i++)
					{
					}*/
		}

		map.put("objectList", objectList);
		return map;

	}

	//Javed
	public Map<String, Object> getActualStockSection(Map<String, Object> dataMap) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();
		int deptId = 0;
		String reportType="";
		String query="";
		String fromDate="";
		String toDate="";
		String qry="";
		Map<String, Object> utilMap = new HashMap<String, Object>();
		List objectList = new ArrayList();

		try {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
			query=(String)dataMap.get("QUERY");
			reportType= (String)dataMap.get("report_Type");
			if(reportType.equalsIgnoreCase("detail")){
				qry="select  sum(coalesce(store_item_batch_stock.received_qty,0)) as batch_stock_received_qty,"
					+"sum(coalesce(store_item_batch_stock.issue_qty,0)) as batch_stock_issue_qty,"
					+"sum(coalesce(store_item_batch_stock.opening_balance_qty,0)) as batch_stock_opning_balnce_qty,"
					+"mas_store_item.pvms_no as mas_store_item_pvms_no,mas_store_item.nomenclature as mas_store_item_nomenclature, "
					+" sum(store_item_batch_stock.CLOSING_STOCK) as balance_qty,"
					+"store_item_batch_stock.item_id,store_item_batch_stock.batch_no,store_item_batch_stock.expiry_date,mas_store_item_conversion.ITEM_UNIT_NAME "
					+" from mas_store_item mas_store_item "
					+" inner join store_item_batch_stock store_item_batch_stock on mas_store_item.item_id = store_item_batch_stock.item_id"
					+" left outer join mas_store_item_conversion mas_store_item_conversion on mas_store_item.ITEM_CONVERSION_ID=mas_store_item_conversion.ITEM_CONVERSION_ID"
					+" where store_item_batch_stock.department_id ='"
					+ deptId+"'"
					+ query+"group by store_item_batch_stock.item_id,mas_store_item.pvms_no,mas_store_item.nomenclature,mas_store_item_conversion.ITEM_UNIT_NAME"
					+",store_item_batch_stock.batch_no,store_item_batch_stock.expiry_date"
					+" order by  mas_store_item_pvms_no,mas_store_item.nomenclature";
			}
			else{
				qry="select  sum(coalesce(store_item_batch_stock.received_qty,0)) as batch_stock_received_qty,"
					+"sum(coalesce(store_item_batch_stock.issue_qty,0)) as batch_stock_issue_qty,"
					+"sum(coalesce(store_item_batch_stock.opening_balance_qty,0)) as batch_stock_opning_balnce_qty,"
					+"mas_store_item.pvms_no as mas_store_item_pvms_no,mas_store_item.nomenclature as mas_store_item_nomenclature, "
					+" sum(store_item_batch_stock.CLOSING_STOCK) as balance_qty ,"
					+"mas_store_item_conversion.ITEM_UNIT_NAME "
					+" from mas_store_item mas_store_item "
					+" inner join store_item_batch_stock store_item_batch_stock on mas_store_item.item_id = store_item_batch_stock.item_id"
					+" left outer join mas_store_item_conversion mas_store_item_conversion on mas_store_item.ITEM_CONVERSION_ID=mas_store_item_conversion.ITEM_CONVERSION_ID"
					+" where store_item_batch_stock.department_id ='"
					+ deptId+"'"
					+ query+" group by mas_store_item.pvms_no,mas_store_item.nomenclature,mas_store_item_conversion.ITEM_UNIT_NAME"
					+" order by  mas_store_item_pvms_no,mas_store_item.nomenclature";
			}

			// add by javed khan on 23-10-2013
			System.out.println(qry);
			Query queryHiber =(Query)session.createSQLQuery(qry);
			if (dataMap.get("section") != null && (!dataMap.get("section").equals("0"))) {
				queryHiber = queryHiber.setParameter("section",dataMap.get("section"))	;	
					}
			if (dataMap.get("itemClassId") != null && (!dataMap.get("itemClassId").equals("0"))) {
				queryHiber = queryHiber.setParameter("itemClassId",dataMap.get("itemClassId"))	;	
					}
			
			
			if (dataMap.get("itemCategoryId") != null && (!dataMap.get("itemCategoryId").equals("0"))) {
				queryHiber = queryHiber.setParameter("itemCategoryId",dataMap.get("itemCategoryId"))	;	
					}
			
			if (dataMap.get("groupId") != null && (!dataMap.get("groupId").equals("0"))) {
				queryHiber = queryHiber.setParameter("groupId",dataMap.get("groupId"))	;	
					}
			
			if (dataMap.get("itemTypeId") != null && (!dataMap.get("itemTypeId").equals("0"))) {
				queryHiber = queryHiber.setParameter("itemTypeId",dataMap.get("itemTypeId"))	;	
					}

					if ((dataMap.get("pvms") != null && (!dataMap.get("pvms").equals("")))) {
						queryHiber =queryHiber.setParameter("pvms", dataMap.get("pvms"));
					}
					
					objectList = (List) queryHiber.list();
					//objectList = (List) session.createSQLQuery(qry).list();
					
					// add by javed khan on 23-10-2013

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		for (Iterator iterator = objectList.iterator(); iterator.hasNext();) {
			Object[] object = (Object[]) iterator.next();
			/*	for(int i=0; i<object.length;i++)
					{
					}*/
		}

		map.put("objectList", objectList);
		return map;
	}

	public Map<String, Object> getDefectiveDrugsItem(Map<String, Object> dataMap) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();
		int deptId = 0;

		String fromDate="";
		String toDate="";
		String qry="";
		int hospitalId=0;
		Map<String, Object> utilMap = new HashMap<String, Object>();

		List objectList = new ArrayList();

		try {
			fromDate=(String)dataMap.get("fromDate");
			toDate=(String)dataMap.get("toDate");
			hospitalId=Integer.parseInt(""+dataMap.get("hospitalId"));


			qry="select STORE_DEFECTIVE_DRUG_M.ENTRY_DATE, STORE_DEFECTIVE_DRUG_M.SIGNAL_NO,STORE_DEFECTIVE_DRUG_M.REMARKS,"
				+"STORE_DEFECTIVE_DRUG_T.BATCH_NO, STORE_DEFECTIVE_DRUG_T.MANUFACTUREING_DATE, STORE_DEFECTIVE_DRUG_T.EXPIRY_DATE,"
				+"STORE_DEFECTIVE_DRUG_T.DEFECT_QTY,STORE_DEFECTIVE_DRUG_m.DISPOSAL_INSTRUCTIONS,"
				+"MAS_STORE_ITEM.PVMS_NO, MAS_STORE_ITEM.NOMENCLATURE,MAS_MANUFACTURER.CONTACT_PERSON,"
				+"MAS_STORE_ITEM_CONVERSION.ITEM_UNIT_NAME,STORE_DEFECTIVE_DRUG_m.STATUS"
				+" from  STORE_DEFECTIVE_DRUG_T"
				+" left outer join STORE_DEFECTIVE_DRUG_M STORE_DEFECTIVE_DRUG_M  on STORE_DEFECTIVE_DRUG_T.DEFECT_M_ID= STORE_DEFECTIVE_DRUG_M.DEFECT_M_ID"
				+" left outer join MAS_STORE_ITEM MAS_STORE_ITEM on STORE_DEFECTIVE_DRUG_T.ITEM_ID = MAS_STORE_ITEM.ITEM_ID"
				+" left outer join MAS_MANUFACTURER MAS_MANUFACTURER on STORE_DEFECTIVE_DRUG_T.MANUFACTURED_BY= MAS_MANUFACTURER.MANUFACTURER_ID"
				+" left outer join MAS_STORE_ITEM_CONVERSION  MAS_STORE_ITEM_CONVERSION on MAS_STORE_ITEM.ITEM_CONVERSION_ID= MAS_STORE_ITEM_CONVERSION.ITEM_CONVERSION_ID"
				+" where STORE_DEFECTIVE_DRUG_M.ENTRY_DATE between to_date('"+fromDate +"',"+"'dd-mm-yyyy'"+") and to_date('"+toDate +"',"+"'dd-mm-yyyy'"+") and STORE_DEFECTIVE_DRUG_M.hospital_id = "
				+ hospitalId
				+" order by STORE_DEFECTIVE_DRUG_M.DEFECT_M_ID desc ";
			objectList = (List) session.createSQLQuery(qry).list();



		} catch (HibernateException e) {
			e.printStackTrace();
		}
		for (Iterator iterator = objectList.iterator(); iterator.hasNext();) {
			Object[] object = (Object[]) iterator.next();
			/*for(int i=0; i<object.length;i++)
					{
					}*/
		}

		map.put("objectList", objectList);
		return map;

	}

	// javed

	public Map<String, Object> getVEDItem(Map<String, Object> requestParameters) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();
		int deptId = 0;
		int hospitalId = 0;  // add javed khan
		String fromDate="";
		String toDate="";
		String qry="";
		String vedType="";
		Map<String, Object> utilMap = new HashMap<String, Object>();

		List objectList = new ArrayList();
		if(requestParameters.get("vedType") !=null){
			vedType = (String)requestParameters.get("vedType");


		}

		try {


			deptId = Integer.parseInt("" + requestParameters.get("deptId"));
			hospitalId = Integer.parseInt("" + requestParameters.get("hospitalId"));
			if(vedType.equalsIgnoreCase("a")){
				/* qry="select msi.pvms_no,msi.nomenclature,msi.min_stock,msi.ved,sibs.closing_stock,msic.ITEM_UNIT_NAME,"
							  +" CASE WHEN nvl(sibs.closing_stock,0) < nvl(msi.min_stock,0) THEN (nvl(msi.min_stock,0)-nvl(sibs.closing_stock,0))"
							  +"  else  0 end as qty "
							  +" from mas_store_item msi"
							  +" left outer join store_item_batch_stock sibs on msi.ITEM_ID= sibs.ITEM_ID"
							  +" left outer join MAS_STORE_ITEM_CONVERSION  msic on msi.ITEM_CONVERSION_ID= msic.ITEM_CONVERSION_ID"
							  +" where sibs.DEPARTMENT_ID='"
							  + deptId+"'"
							  +" and status='y' order by msi.nomenclature";*/


				qry="select msi.pvms_no,msi.nomenclature,nvl(msi.min_stock,0),msi.ved,nvl(sum(sibs.closing_stock),0),msic.ITEM_UNIT_NAME"
					+" from mas_store_item msi"
					+" left outer join store_item_batch_stock sibs on msi.ITEM_ID= sibs.ITEM_ID"
					+" left outer join MAS_STORE_ITEM_CONVERSION  msic on msi.ITEM_CONVERSION_ID= msic.ITEM_CONVERSION_ID"
					+" where sibs.DEPARTMENT_ID='"
					+ deptId+"'"
					+" and sibs.HOSPITAL_ID= '"
					+ hospitalId+"'"
					+" and status='y'  group by msi.pvms_no,msi.nomenclature,msi.min_stock,msi.ved,msic.ITEM_UNIT_NAME"
					+" order by msi.nomenclature";

			}
			else{
				/* qry="select msi.pvms_no,msi.nomenclature,msi.min_stock,msi.ved,sibs.closing_stock,msic.ITEM_UNIT_NAME,"
							  +" CASE WHEN nvl(sibs.closing_stock,0) < nvl(msi.min_stock,0) THEN (nvl(msi.min_stock,0)-nvl(sibs.closing_stock,0))"
							  +"  else  0 end as qty "
							  +" from mas_store_item msi"
							  +" left outer join store_item_batch_stock sibs on msi.ITEM_ID= sibs.ITEM_ID"
							  +" left outer join MAS_STORE_ITEM_CONVERSION  msic on msi.ITEM_CONVERSION_ID= msic.ITEM_CONVERSION_ID"
							  +" where sibs.DEPARTMENT_ID='"
							  + deptId+"'"
							  +" and ( msi.ved='"
							  + vedType+"'"
							  +" or  msi.ved='"
							  + vedType.toUpperCase()+"'"
							  +" ) and status='y' order by msi.nomenclature";*/

				qry="select msi.pvms_no,msi.nomenclature,nvl(msi.min_stock,0),msi.ved,nvl(sum(sibs.closing_stock),0),msic.ITEM_UNIT_NAME"

					+" from mas_store_item msi"
					+" left outer join store_item_batch_stock sibs on msi.ITEM_ID= sibs.ITEM_ID"
					+" left outer join MAS_STORE_ITEM_CONVERSION  msic on msi.ITEM_CONVERSION_ID= msic.ITEM_CONVERSION_ID"
					+" where sibs.DEPARTMENT_ID='"
					+ deptId+"'"
					+" and sibs.HOSPITAL_ID= '"
					+ hospitalId+"'"
					+" and ( msi.ved='"
					+ vedType+"'"
					+" or  msi.ved='"
					+ vedType.toUpperCase()+"'"
					+" ) and status='y'  group by msi.pvms_no,msi.nomenclature,msi.min_stock,msi.ved,msic.ITEM_UNIT_NAME"
					+" order by msi.nomenclature";

			}
			objectList = (List) session.createSQLQuery(qry).list();



		} catch (HibernateException e) {
			e.printStackTrace();
		}
		/*for (Iterator iterator = objectList.iterator(); iterator.hasNext();) {
					Object[] object = (Object[]) iterator.next();
					for(int i=0; i<object.length;i++)
					{
					}
				}*/

		map.put("objectList", objectList);
		return map;


	}

	// javed

	public Map<String, Object> getFSNItem(Map<String, Object> requestParameters) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();
		int deptId = 0;
		int hospitalId=0;
		String fromDate="";
		String toDate="";
		String qry="";
		String fsnType="";
		String msg="";

		String fsnToDate="";
		String fFromDate="";
		String sFromDate="";
		String nFromDate="";


		Map<String, Object> utilMap = new HashMap<String, Object>();

		List objectList = new ArrayList();
		if(requestParameters.get("fsnType") !=null){
			fsnType = (String)requestParameters.get("fsnType");

		}

		try {


			fFromDate=(String)requestParameters.get("fFromDate");
			fsnToDate=(String)requestParameters.get("fsnToDate");
			sFromDate=(String)requestParameters.get("sFromDate");
			nFromDate=(String)requestParameters.get("nFromDate");
			/*fromDate=(String)requestParameters.get("from_date");
					  toDate=(String)requestParameters.get("to_date");
					Date date=(Date) session.createSQLQuery("select last_day(to_date('"
							+toDate+"'"
							+", 'dd/mm/yyyy')) from dual").uniqueResult();

					 String final_to_date=HMSUtil.changeDateToddMMyyyy(date);*/
			deptId = Integer.parseInt("" + requestParameters.get("deptId"));
			hospitalId = Integer.parseInt("" + requestParameters.get("hospitalId"));
			if(fsnType.equalsIgnoreCase("f")){
				//fFromDate=(String)requestParameters.get("fFromDate");
				// fsnToDate=(String)requestParameters.get("fsnToDate");
				qry=" select mm.ITEM_ID,"+
				" 		 sum(mm.MMF_IN_QTY),"+ 
				"		 sum(closing_stock),"+
				"		 msi.nomenclature,"+
				"		 msi.pvms_no,"+
				"		 ((sum(sit.qty_issued))/sum(mm.MMF_IN_QTY))*100 as per,"+
				"		 sum(sit.qty_issued),"+
				"						 sim.DEPARTMENT_ID,"+
				"						 msu.UNIT_NAME as ITEM_UNIT_NAME,"+
				"						 mh.hospital_name||' '||mh.address"+
				"						 from ( select smdt.MMF_IN_QTY,smdt.item_id ,smdm.hospital_id from"+ 
				" STORE_MMF_DEPARTMENT_T SMDT LEFT OUTER JOIN  STORE_MMF_DEPARTMENT_M SMDM ON SMDT.STORE_MMF_DEPARTMENT_M_ID=SMDM.ID "+
				" where SMDM.HOSPITAL_ID='"+hospitalId+"'"+" and smdm.STORE_WARD_DEPT="+deptId+") mm"+  
				" left outer join store_item_batch_stock SIBS on SIBS.ITEM_ID=mm.ITEM_ID "+
				" left outer join mas_store_item msi on mm.ITEM_ID = msi.ITEM_ID"+
				" left outer join STORE_ISSUE_t sit on mm.ITEM_ID=sit.ITEM_ID "+
				" left outer join STORE_ISSUE_m sim on sit.ISSUE_M_ID=sim.ID "+
				" left outer join mas_hospital mh on mh.HOSPITAL_ID=mm.HOSPITAL_ID"+ 
				" left outer join MAS_STORE_ITEM_CONVERSION  msic on msi.ITEM_CONVERSION_ID= msic.ITEM_CONVERSION_ID"+ 
				" left outer join mas_store_unit msu on msu.unit_id=msic.issue_unit_id"+
				" where  "+
				" sim.DEPARTMENT_ID='"+deptId+"'"+" and sim.HOSPITAL_ID= '"
				+ hospitalId+"'"+ " and"+
				" sim.ISSUE_DATE"+  
				" between to_date('"
				+ fFromDate+"'"
				+" ,'dd/mm/yyyy') and to_date(to_char(sysdate ,'dd/mm/yyyy'),'dd/mm/yyyy')"+
				" group by sim.DEPARTMENT_ID,"+
				" mm.ITEM_ID,mm.MMF_IN_QTY,"+ 
				"  msi.nomenclature,"+
				"  msi.pvms_no,"+
				"  msu.UNIT_NAME,"+
				" mh.hospital_name,"+
				" mh.address"+
				" having ((sum(sit.qty_issued))*100/mm.MMF_IN_QTY) > 50"+  
				" order by ((sum(sit.qty_issued))*100/mm.MMF_IN_QTY) desc ,"+ 
				" msi.nomenclature";


				objectList = (List) session.createSQLQuery(qry).list();

			}
			if(fsnType.equalsIgnoreCase("s")){
				//sFromDate=(String)requestParameters.get("sFromDate");
				//fsnToDate=(String)requestParameters.get("fsnToDate");
				qry=" select mm.ITEM_ID,"+
				" 		 sum(mm.MMF_IN_QTY),"+ 
				"		 sum(closing_stock),"+
				"		 msi.nomenclature,"+
				"		 msi.pvms_no,"+
				"		 ((sum(sit.qty_issued))/sum(mm.MMF_IN_QTY))*100 as per,"+
				"		 sum(sit.qty_issued),"+
				"						 sim.DEPARTMENT_ID,"+
				"						 msu.UNIT_NAME as ITEM_UNIT_NAME,"+
				"						 mh.hospital_name||' '||mh.address"+
				"						 from ( select smdt.MMF_IN_QTY,smdt.item_id ,smdm.hospital_id from"+ 
				" STORE_MMF_DEPARTMENT_T SMDT LEFT OUTER JOIN  STORE_MMF_DEPARTMENT_M SMDM ON SMDT.STORE_MMF_DEPARTMENT_M_ID=SMDM.ID "+
				" where SMDM.HOSPITAL_ID='"+hospitalId+"'"+" and smdm.STORE_WARD_DEPT="+deptId+") mm"+  
				" left outer join store_item_batch_stock SIBS on SIBS.ITEM_ID=mm.ITEM_ID "+
				" left outer join mas_store_item msi on mm.ITEM_ID = msi.ITEM_ID"+
				" left outer join STORE_ISSUE_t sit on mm.ITEM_ID=sit.ITEM_ID "+
				" left outer join STORE_ISSUE_m sim on sit.ISSUE_M_ID=sim.ID "+
				" left outer join mas_hospital mh on mh.HOSPITAL_ID=mm.HOSPITAL_ID"+ 
				" left outer join MAS_STORE_ITEM_CONVERSION  msic on msi.ITEM_CONVERSION_ID= msic.ITEM_CONVERSION_ID"+ 
				" left outer join mas_store_unit msu on msu.unit_id=msic.issue_unit_id"+
				" where  "+
				" sim.DEPARTMENT_ID='"+deptId+"'"+" and sim.HOSPITAL_ID= '"
				+ hospitalId+"'"+ " and"+
				" sim.ISSUE_DATE"+  
				" between to_date('"
				+ sFromDate+"'"
				+" ,'dd/mm/yyyy') and to_date(to_char(sysdate ,'dd/mm/yyyy'),'dd/mm/yyyy')"+
				" group by sim.DEPARTMENT_ID,"+
				" mm.ITEM_ID,mm.MMF_IN_QTY,"+ 
				"  msi.nomenclature,"+
				"  msi.pvms_no,"+
				"  msu.UNIT_NAME,"+
				" mh.hospital_name,"+
				" mh.address"+
				" having ((sum(sit.qty_issued))*100/mm.MMF_IN_QTY) > 50"+  
				" order by ((sum(sit.qty_issued))*100/mm.MMF_IN_QTY) desc ,"+ 
				" msi.nomenclature";

				objectList = (List) session.createSQLQuery(qry).list();

			}
			if(fsnType.equalsIgnoreCase("n")){
				//nFromDate=(String)requestParameters.get("nFromDate");
				// fsnToDate=(String)requestParameters.get("fsnToDate");
				qry="select"+ 
				" smdt.ITEM_ID,"+
				" sum(smdt.MMF_IN_QTY),"+ 
				" msi.nomenclature,"+
				" msi.pvms_no,"+
				" msic.ITEM_UNIT_NAME   ,"+
				" mh.hospital_name||' '||mh.address,"+
				" case "+
				" when sum(stbs.closing_stock) is null then 0.0 else sum(stbs.closing_stock) end as stck"+
				" from STORE_MMF_DEPARTMENT_T smdt  "+
				" left outer join mas_store_item msi on smdt.ITEM_ID = msi.ITEM_ID"+ 
				" left outer join STORE_MMF_DEPARTMENT_M smdm on smdt.STORE_MMF_DEPARTMENT_M_ID = smdm.ID"+ 
				" left outer join mas_hospital mh on mh.HOSPITAL_ID=smdm.HOSPITAL_ID "+
				" left outer join store_item_batch_stock  stbs on stbs.ITEM_ID=smdt.ITEM_ID"+ 
				" left outer join MAS_STORE_ITEM_CONVERSION  msic on msi.ITEM_CONVERSION_ID= msic.ITEM_CONVERSION_ID"+ 
				" where smdm.STORE_WARD_DEPT='"
				+ deptId+"'"+ 
				" and smdm.HOSPITAL_ID= '"
				+ hospitalId+"'"+ 
				" group by "+
				" smdt.ITEM_ID,smdt.MMF_IN_QTY,"+ 
				" msi.nomenclature,"+
				" msi.pvms_no,"+
				" msic.ITEM_UNIT_NAME,"+
				" mh.hospital_name,"+
				" mh.address"+
				" order by"+
				" msi.nomenclature";
				objectList = (List) session.createSQLQuery(qry).list();
			}
			/*if(fsnType.equalsIgnoreCase("a")){
					String qryF="select smdt.ITEM_ID,smdt.MMF_IN_QTY, msi.nomenclature,msi.pvms_no,"
							  +"((sum(sit.qty_issued))*100/smdt.MMF_IN_QTY) as per,sum(sit.qty_issued),sim.DEPARTMENT_ID"
							  +",msic.ITEM_UNIT_NAME, 'f'   from STORE_MMF_DEPARTMENT_T smdt "
							  +" left outer join mas_store_item msi on smdt.ITEM_ID = msi.ITEM_ID"
							  +" left outer join STORE_MMF_DEPARTMENT_M smdm on smdt.STORE_MMF_DEPARTMENT_M_ID = smdm.ID"
							  +" left outer join STORE_ISSUE_t sit on smdt.ITEM_ID=sit.ITEM_ID"
							  +" left outer join STORE_ISSUE_m sim on sit.ISSUE_M_ID=sim.ID"
							  +" left outer join MAS_STORE_ITEM_CONVERSION  msic on msi.ITEM_CONVERSION_ID= msic.ITEM_CONVERSION_ID"
							  +" where smdm.STORE_WARD_DEPT='"
							  + deptId+"'"
							  +" and smdm.HOSPITAL_ID ='"
							  + hospitalId +"'"
							  +" and sim.DEPARTMENT_ID='"
							  + deptId+"'"
							  +" and sim.HOSPITAL_ID='"
							  + hospitalId +"'"
							  +" and sim.ISSUE_DATE between to_date('"
							  + fFromDate+"'"
							  +" ,'dd/mm/yyyy') and to_date('"
							  + fsnToDate+"'"
							  +" ,'dd/mm/yyyy')"
							  +" group by sim.DEPARTMENT_ID,smdt.ITEM_ID,smdt.MMF_IN_QTY, msi.nomenclature,msi.pvms_no,msic.ITEM_UNIT_NAME  "
						  	  +" having ((sum(sit.qty_issued))*100/smdt.MMF_IN_QTY) > 50 "
						  	  +"order by ((sum(sit.qty_issued))*100/smdt.MMF_IN_QTY) desc , msi.nomenclature ";

					List objectListF = session.createSQLQuery(qryF).list();

					String qryS="select smdt.ITEM_ID,smdt.MMF_IN_QTY, msi.nomenclature,msi.pvms_no,"
							  +"((sum(sit.qty_issued))*100/smdt.MMF_IN_QTY) as per,sum(sit.qty_issued),sim.DEPARTMENT_ID"
							  +",msic.ITEM_UNIT_NAME, 's'   from STORE_MMF_DEPARTMENT_T smdt "
							  +" left outer join mas_store_item msi on smdt.ITEM_ID = msi.ITEM_ID"
							  +" left outer join STORE_MMF_DEPARTMENT_M smdm on smdt.STORE_MMF_DEPARTMENT_M_ID = smdm.ID"
							  +" left outer join STORE_ISSUE_t sit on smdt.ITEM_ID=sit.ITEM_ID"
							  +" left outer join STORE_ISSUE_m sim on sit.ISSUE_M_ID=sim.ID"
							  +" left outer join MAS_STORE_ITEM_CONVERSION  msic on msi.ITEM_CONVERSION_ID= msic.ITEM_CONVERSION_ID"
							  +" where smdm.STORE_WARD_DEPT='"
							  + deptId+"'"
							  +" and smdm.HOSPITAL_ID ='"
							  + hospitalId +"'"
							  +" and sim.DEPARTMENT_ID='"
							  + deptId+"'"
							  +" and sim.HOSPITAL_ID='"
							  + hospitalId +"'"
							  +" and sim.ISSUE_DATE between to_date('"
							  + sFromDate+"'"
							  +" ,'dd/mm/yyyy') and to_date('"
							  + fsnToDate+"'"
							  +" ,'dd/mm/yyyy')"
							  +" group by sim.DEPARTMENT_ID,smdt.ITEM_ID,smdt.MMF_IN_QTY, msi.nomenclature,msi.pvms_no,msic.ITEM_UNIT_NAME "
							  +" having ((sum(sit.qty_issued))*100/smdt.MMF_IN_QTY) > 50 "
							  +" order by ((sum(sit.qty_issued))*100/smdt.MMF_IN_QTY) desc , msi.nomenclature ";

					List objectListS = session.createSQLQuery(qryS).list();



					String  qryN="select smdt.ITEM_ID,smdt.MMF_IN_QTY, msi.nomenclature,msi.pvms_no,"
							  +"((sum(sit.qty_issued))*100/smdt.MMF_IN_QTY) as per,sum(sit.qty_issued),sim.DEPARTMENT_ID"
							  +",msic.ITEM_UNIT_NAME, 'n'   from STORE_MMF_DEPARTMENT_T smdt "
							  +" left outer join mas_store_item msi on smdt.ITEM_ID = msi.ITEM_ID"
							  +" left outer join STORE_MMF_DEPARTMENT_M smdm on smdt.STORE_MMF_DEPARTMENT_M_ID = smdm.ID"
							  +" left outer join STORE_ISSUE_t sit on smdt.ITEM_ID=sit.ITEM_ID"
							  +" left outer join STORE_ISSUE_m sim on sit.ISSUE_M_ID=sim.ID"
							  +" left outer join MAS_STORE_ITEM_CONVERSION  msic on msi.ITEM_CONVERSION_ID= msic.ITEM_CONVERSION_ID"
							  +" where smdm.STORE_WARD_DEPT='"
							  + deptId+"'"
							  +" and smdm.HOSPITAL_ID ='"
							  + hospitalId +"'"
							  +" and sim.DEPARTMENT_ID='"
							  + deptId+"'"
							  +" and sim.HOSPITAL_ID='"
							  + hospitalId +"'"
							  +" and sim.ISSUE_DATE between to_date('"
							  + nFromDate+"'"
							  +" ,'dd/mm/yyyy') and to_date('"
							  + fsnToDate+"'"
							  +" ,'dd/mm/yyyy')"
							  +" group by sim.DEPARTMENT_ID,smdt.ITEM_ID,smdt.MMF_IN_QTY, msi.nomenclature,msi.pvms_no,msic.ITEM_UNIT_NAME  "
						  	  +" having ((sum(sit.qty_issued))*100/smdt.MMF_IN_QTY) > 50 "
						  	  +"order by ((sum(sit.qty_issued))*100/smdt.MMF_IN_QTY) desc , msi.nomenclature ";
					List objectListN = session.createSQLQuery(qryN).list();*/

			/*objectList.addAll(objectListF);
					objectList.addAll(objectListS);
					objectList.addAll(objectListN);



					 }*/
			//objectList = (List) session.createSQLQuery(qry).list();


			if(objectList.size()==0){
				msg="No Record Found !!!";
				map.put("msg", msg);
			}

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		/*	for (Iterator iterator = objectList.iterator(); iterator.hasNext();) {
					Object[] object = (Object[]) iterator.next();
					for(int i=0; i<object.length;i++)
					{
					}
				}*/

		map.put("objectList", objectList);
		return map;

	}

	//javed khan
	public Map<String, Object> getTurnOverDataInAjax(Map<String, Object> dataMap) {
		int deptId = 0;
		int batchId = 0;
		int itemId=0;
		int hospitalId = 0;
		String batchNo = "";
		Date expiryDate = new Date();
		Date manufacturingDate=null;
		String manufacturer = "";
		List objectList = new ArrayList();
		List objectList2 = new ArrayList();
		Map<String, Object> map = new HashMap<String, Object>();
		String batchNoExact = "";
		session = (Session) getSession();
		int mId = 1;
		try {
			if (dataMap.get("deptId") != null)
				deptId = Integer.parseInt("" + dataMap.get("deptId"));
			if (dataMap.get("batchNo") != null)
				batchNo = ("" + dataMap.get("batchNo"));
			if (dataMap.get("itemId") != null)
				itemId = Integer.parseInt("" + dataMap.get("itemId"));

			if (dataMap.get("hospitalId") != null)
				hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));


			String qry1 = "SELECT manu.batch_no FROM store_item_batch_stock manu where manu.stock_id="
				+ batchNo +" and manu.Hospital_id = "+hospitalId ;
			List objectList1 = new ArrayList();
			objectList1 = (List) session.createSQLQuery(qry1).list();
			batchNoExact=(String)objectList1.get(0);



			String qry = "SELECT manu.expiry_date,manu.MANUFACTURE_DATE,mm.MANUFACTURER_NAME FROM store_item_batch_stock manu ,mas_store_item msi "
				+" left outer join mas_store_brand msb on msb.ITEM_ID = msi.ITEM_ID "
				+"left outer join  MAS_MANUFACTURER mm on msb.MANUFACTURER_ID=mm.MANUFACTURER_ID where manu.stock_id='"
				+ batchNo+"' and manu.Hospital_id = "
				+ hospitalId
				+" and msi.ITEM_ID= manu.ITEM_ID" ;
			objectList = (List) session.createSQLQuery(qry).list();
			Iterator itr=objectList.iterator();
			while(itr.hasNext()){
				Object[] tuple = (Object[]) itr.next();
				expiryDate = (Date) tuple[0];
				//	expiryDate = java.sql.Date.valueOf(("" + tuple[0]));
				if(tuple[1]!=null){
					manufacturingDate= (Date) tuple[1];
					//manufacturingDate=java.sql.Date.valueOf(("" + tuple[1]));
				}
				if(tuple[2]!=null){
					manufacturer=tuple[2].toString();
				}else{manufacturer="-";}
			}
			//String sql="";
			java.sql.Connection con = session.connection();

			// add javed

			//sql ="{call turn()}";

			//sql ="{call turn(?)}"; // add javed

			try {
				//if(sql!=""){
				CallableStatement cals = con.prepareCall("{call turn(?)}");
				cals.setInt(1, hospitalId);
				boolean b=cals.execute();
				String qry2="select Dt,doc_no,received_qty,issued_qty,closing_balance,opening_balance from turnOver "
					+"where batch_no='"
					+ batchNoExact+"'"
					+" and item_id='"
					+itemId +"'"
					+" and department_id='"
					+deptId +"'"
					+" order by dt ,typ";

				objectList2 = (List) session.createSQLQuery(qry2).list();

				//}
			}catch (Exception e) {
				e.printStackTrace();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("expiryDate", expiryDate);
		map.put("manufacturingDate",manufacturingDate);
		map.put("manufacturer", manufacturer);
		map.put("mId", mId);
		map.put("objectList2", objectList2);
		return map;
	}

	public Map<String, Object> getDailyIssueItem(Map<String, Object> requestParameters) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();
		int deptId = 0;
		int hosId=0;
		String fromDate="";
		String toDate="";
		String qry="";
		String pvms="";
		String reportType="";
		String nomen="";
		int toDeptId = 0;
		Map<String, Object> utilMap = new HashMap<String, Object>();

		List objectList = new ArrayList();
		if(requestParameters.get("pvms") !=null){
			pvms = (String)requestParameters.get("pvms");

		}
		if(requestParameters.get("reportType") !=null){
			reportType = (String)requestParameters.get("reportType");

		}
		if(requestParameters.get("hospitalId") !=null){
			hosId = Integer.parseInt("" + requestParameters.get("hospitalId"));

		}
		if(requestParameters.get("nomen") !=null){
			nomen = (String)requestParameters.get("nomen");

		}

		try {
			fromDate=(String)requestParameters.get("fromDate");
			toDate=(String)requestParameters.get("toDate");
			Date date=(Date) session.createSQLQuery("select last_day(to_date('"
					+toDate+"'"
					+", 'dd/mm/yyyy')) from dual").uniqueResult();

			String final_to_date=HMSUtil.changeDateToddMMyyyy(date);
			deptId = Integer.parseInt("" + requestParameters.get("deptId"));
			toDeptId = Integer.parseInt("" + requestParameters.get("depart"));
			// comment according to new SRS

			/*if(reportType.equalsIgnoreCase("summary")){
						 if(pvms.equals("")){
					 qry="select sum(qty_issued),item_id_issue,mas_store_item.pvms_no, mas_store_item.nomenclature,msic.ITEM_UNIT_NAME,"
					 	+"STORE_OP_PATIENT_ISSUE_m.DEPARTMENT_ID"
					 	+" from STORE_OP_PATIENT_ISSUE_t"
					 	+" left outer join  mas_store_item mas_store_item on STORE_OP_PATIENT_ISSUE_t.ITEM_ID_ISSUE=mas_store_item.ITEM_ID"
					 	+" left outer join MAS_STORE_ITEM_CONVERSION  msic on mas_store_item.ITEM_CONVERSION_ID= msic.ITEM_CONVERSION_ID"
					 	+" left outer join STORE_OP_PATIENT_ISSUE_m STORE_OP_PATIENT_ISSUE_m on STORE_OP_PATIENT_ISSUE_t.OP_ISSUE_ID=STORE_OP_PATIENT_ISSUE_m.OP_ISSUE_ID"
					 	+" where  STORE_OP_PATIENT_ISSUE_m.DEPARTMENT_ID='"
					 	+ deptId+"'"

					 	+" and STORE_OP_PATIENT_ISSUE_m.issue_date between to_date('"
					 	+ fromDate+"'"
					 	+" ,'dd/mm/yyyy') and to_date('"
					 	+ toDate+"'"
					 	+" ,'dd/mm/yyyy')"
					 	+" group by STORE_OP_PATIENT_ISSUE_t.item_id_issue,mas_store_item.pvms_no,"
					 	+" mas_store_item.nomenclature,msic.ITEM_UNIT_NAME,STORE_OP_PATIENT_ISSUE_m.DEPARTMENT_ID";
						 }
						 else{
							 qry="select sum(qty_issued),item_id_issue,mas_store_item.pvms_no, mas_store_item.nomenclature,msic.ITEM_UNIT_NAME,"
								 	+"STORE_OP_PATIENT_ISSUE_m.DEPARTMENT_ID"
								 	+" from STORE_OP_PATIENT_ISSUE_t"
								 	+" left outer join  mas_store_item mas_store_item on STORE_OP_PATIENT_ISSUE_t.ITEM_ID_ISSUE=mas_store_item.ITEM_ID"
								 	+" left outer join MAS_STORE_ITEM_CONVERSION  msic on mas_store_item.ITEM_CONVERSION_ID= msic.ITEM_CONVERSION_ID"
								 	+" left outer join STORE_OP_PATIENT_ISSUE_m STORE_OP_PATIENT_ISSUE_m on STORE_OP_PATIENT_ISSUE_t.OP_ISSUE_ID=STORE_OP_PATIENT_ISSUE_m.OP_ISSUE_ID"
								 	+" where  STORE_OP_PATIENT_ISSUE_m.DEPARTMENT_ID='"
								 	+ deptId+"'"
								 	+" and mas_store_item.pvms_no='"
								 	+ pvms+"'"
								 	+" and STORE_OP_PATIENT_ISSUE_m.issue_date between to_date('"
								 	+ fromDate+"'"
								 	+" ,'dd/mm/yyyy') and to_date('"
								 	+ toDate+"'"
								 	+" ,'dd/mm/yyyy')"
								 	+" group by STORE_OP_PATIENT_ISSUE_t.item_id_issue,mas_store_item.pvms_no,"
								 	+" mas_store_item.nomenclature,msic.ITEM_UNIT_NAME,STORE_OP_PATIENT_ISSUE_m.DEPARTMENT_ID";
						 }
					 }*/
			// else if(reportType.equalsIgnoreCase("detail")){
			if(toDeptId == 0){
				if(pvms.equals("") && nomen.equals("")){
					qry="select sum(qty_issued),item_id_issue,mas_store_item.pvms_no, mas_store_item.nomenclature,msic.ITEM_UNIT_NAME,"
						+"STORE_OP_PATIENT_ISSUE_m.DEPARTMENT_ID,STORE_OP_PATIENT_ISSUE_t.BATCH_NO,STORE_OP_PATIENT_ISSUE_t.EXPIRY_DATE "
						+",store_op_patient_issue_m.prescription_no as prescription_no,store_op_patient_issue_m.prescription_id as prescription_id "
						+", mm.MANUFACTURER_NAME"
						+" from STORE_OP_PATIENT_ISSUE_t"
						+" left outer join  mas_store_item mas_store_item on STORE_OP_PATIENT_ISSUE_t.ITEM_ID_ISSUE=mas_store_item.ITEM_ID"
						+" left outer join MAS_STORE_ITEM_CONVERSION  msic on mas_store_item.ITEM_CONVERSION_ID= msic.ITEM_CONVERSION_ID"
						+" left outer join STORE_OP_PATIENT_ISSUE_m STORE_OP_PATIENT_ISSUE_m on STORE_OP_PATIENT_ISSUE_t.OP_ISSUE_ID=STORE_OP_PATIENT_ISSUE_m.OP_ISSUE_ID"
						+"   left outer join mas_store_brand msb on  mas_store_item.ITEM_ID = msb.ITEM_ID "
						+" left outer join mas_manufacturer mm on  msb.MANUFACTURER_ID  = mm.MANUFACTURER_ID "
						+" where  STORE_OP_PATIENT_ISSUE_m.DEPARTMENT_ID='"
						+ deptId+"'"
						+" and STORE_OP_PATIENT_ISSUE_m.HOSPITAL_ID='"
						+ hosId +"'"
						+" and STORE_OP_PATIENT_ISSUE_m.issue_date between to_date('"
						+ fromDate+"'"
						+" ,'dd/mm/yyyy') and to_date('"
						+ toDate+"'"
						+" ,'dd/mm/yyyy')"
						+" group by STORE_OP_PATIENT_ISSUE_t.item_id_issue,STORE_OP_PATIENT_ISSUE_t.qty_issued,mas_store_item.pvms_no,"
						+" mas_store_item.nomenclature,msic.ITEM_UNIT_NAME,STORE_OP_PATIENT_ISSUE_m.DEPARTMENT_ID,STORE_OP_PATIENT_ISSUE_t.BATCH_NO,STORE_OP_PATIENT_ISSUE_t.EXPIRY_DATE,store_op_patient_issue_m.prescription_no ,store_op_patient_issue_m.prescription_id "
						+" ,mm.MANUFACTURER_NAME";
				}
				else if(!nomen.equals("") && nomen!= null){
					qry="select sum(qty_issued),item_id_issue,mas_store_item.pvms_no, mas_store_item.nomenclature,msic.ITEM_UNIT_NAME,"
						+"STORE_OP_PATIENT_ISSUE_m.DEPARTMENT_ID,STORE_OP_PATIENT_ISSUE_t.BATCH_NO,STORE_OP_PATIENT_ISSUE_t.EXPIRY_DATE "
						+",store_op_patient_issue_m.prescription_no as prescription_no,store_op_patient_issue_m.prescription_id as prescription_id "
						+", mm.MANUFACTURER_NAME"
						+" from STORE_OP_PATIENT_ISSUE_t"
						+" left outer join  mas_store_item mas_store_item on STORE_OP_PATIENT_ISSUE_t.ITEM_ID_ISSUE=mas_store_item.ITEM_ID"
						+" left outer join MAS_STORE_ITEM_CONVERSION  msic on mas_store_item.ITEM_CONVERSION_ID= msic.ITEM_CONVERSION_ID"
						+" left outer join STORE_OP_PATIENT_ISSUE_m STORE_OP_PATIENT_ISSUE_m on STORE_OP_PATIENT_ISSUE_t.OP_ISSUE_ID=STORE_OP_PATIENT_ISSUE_m.OP_ISSUE_ID"
						+"   left outer join mas_store_brand msb on  mas_store_item.ITEM_ID = msb.ITEM_ID "
						+" left outer join mas_manufacturer mm on  msb.MANUFACTURER_ID  = mm.MANUFACTURER_ID "
						+" where  STORE_OP_PATIENT_ISSUE_m.DEPARTMENT_ID='"
						+ deptId+"'"
						+" and STORE_OP_PATIENT_ISSUE_m.HOSPITAL_ID='"
						+ hosId +"'"
						+" and STORE_OP_PATIENT_ISSUE_m.issue_date between to_date('"
						+ fromDate+"'"
						+" ,'dd/mm/yyyy') and to_date('"
						+ toDate+"'"
						+" ,'dd/mm/yyyy')"
						+" and  mas_store_item.NOMENCLATURE='"
						+ nomen+"'"
						+" group by STORE_OP_PATIENT_ISSUE_t.item_id_issue,STORE_OP_PATIENT_ISSUE_t.qty_issued,mas_store_item.pvms_no, mas_store_item.nomenclature, msic.ITEM_UNIT_NAME"
						+" ,STORE_OP_PATIENT_ISSUE_m.DEPARTMENT_ID,STORE_OP_PATIENT_ISSUE_t.BATCH_NO,STORE_OP_PATIENT_ISSUE_t.EXPIRY_DATE,store_op_patient_issue_m.prescription_no ,store_op_patient_issue_m.prescription_id, mm.MANUFACTURER_NAME ";

				}
				else{
					/*qry="select sum(qty_issued),item_id_issue,mas_store_item.pvms_no, mas_store_item.nomenclature,msic.ITEM_UNIT_NAME,"
								 	+"STORE_OP_PATIENT_ISSUE_m.DEPARTMENT_ID,STORE_OP_PATIENT_ISSUE_t.BATCH_NO,STORE_OP_PATIENT_ISSUE_t.EXPIRY_DATE "
								 	+",store_op_patient_issue_m.prescription_no as prescription_no,store_op_patient_issue_m.prescription_id as prescription_id"
								 	+" from STORE_OP_PATIENT_ISSUE_t"
								 	+" left outer join  mas_store_item mas_store_item on STORE_OP_PATIENT_ISSUE_t.ITEM_ID_ISSUE=mas_store_item.ITEM_ID"
								 	+" left outer join MAS_STORE_ITEM_CONVERSION  msic on mas_store_item.ITEM_CONVERSION_ID= msic.ITEM_CONVERSION_ID"
								 	+" left outer join STORE_OP_PATIENT_ISSUE_m STORE_OP_PATIENT_ISSUE_m on STORE_OP_PATIENT_ISSUE_t.OP_ISSUE_ID=STORE_OP_PATIENT_ISSUE_m.OP_ISSUE_ID"
								 	+" where  STORE_OP_PATIENT_ISSUE_m.DEPARTMENT_ID='"
								 	+ deptId+"'"
								 	+" and mas_store_item.pvms_no='"
								 	+ pvms+"'"
								 	+" and STORE_OP_PATIENT_ISSUE_m.issue_date between to_date('"
								 	+ fromDate+"'"
								 	+" ,'dd/mm/yyyy') and to_date('"
								 	+ toDate+"'"
								 	+" ,'dd/mm/yyyy')"
								 	+" group by STORE_OP_PATIENT_ISSUE_t.item_id_issue,STORE_OP_PATIENT_ISSUE_t.qty_issued,mas_store_item.pvms_no,"
								 	+" mas_store_item.nomenclature,msic.ITEM_UNIT_NAME,STORE_OP_PATIENT_ISSUE_m.DEPARTMENT_ID,STORE_OP_PATIENT_ISSUE_t.BATCH_NO,STORE_OP_PATIENT_ISSUE_t.EXPIRY_DATE,store_op_patient_issue_m.prescription_no as prescription_no,store_op_patient_issue_m.prescription_id  ";*/
					qry="select sum(qty_issued),item_id_issue,mas_store_item.pvms_no, mas_store_item.nomenclature,msic.ITEM_UNIT_NAME,"
						+"STORE_OP_PATIENT_ISSUE_m.DEPARTMENT_ID,STORE_OP_PATIENT_ISSUE_t.BATCH_NO,STORE_OP_PATIENT_ISSUE_t.EXPIRY_DATE "
						+",store_op_patient_issue_m.prescription_no as prescription_no,store_op_patient_issue_m.prescription_id as prescription_id "
						+", mm.MANUFACTURER_NAME"
						+" from STORE_OP_PATIENT_ISSUE_t"
						+" left outer join  mas_store_item mas_store_item on STORE_OP_PATIENT_ISSUE_t.ITEM_ID_ISSUE=mas_store_item.ITEM_ID"
						+" left outer join MAS_STORE_ITEM_CONVERSION  msic on mas_store_item.ITEM_CONVERSION_ID= msic.ITEM_CONVERSION_ID"
						+" left outer join STORE_OP_PATIENT_ISSUE_m STORE_OP_PATIENT_ISSUE_m on STORE_OP_PATIENT_ISSUE_t.OP_ISSUE_ID=STORE_OP_PATIENT_ISSUE_m.OP_ISSUE_ID"
						+"   left outer join mas_store_brand msb on  mas_store_item.ITEM_ID = msb.ITEM_ID "
						+" left outer join mas_manufacturer mm on  msb.MANUFACTURER_ID  = mm.MANUFACTURER_ID "
						+" where  STORE_OP_PATIENT_ISSUE_m.DEPARTMENT_ID='"
						+ deptId+"'"
						+" and STORE_OP_PATIENT_ISSUE_m.HOSPITAL_ID='"
						+ hosId +"'"
						+" and STORE_OP_PATIENT_ISSUE_m.issue_date between to_date('"
						+ fromDate+"'"
						+" ,'dd/mm/yyyy') and to_date('"
						+ toDate+"'"
						+" ,'dd/mm/yyyy')"
						+" and  mas_store_item.PVMS_NO='"
						+ pvms+"'"
						+" group by STORE_OP_PATIENT_ISSUE_t.item_id_issue,STORE_OP_PATIENT_ISSUE_t.qty_issued,mas_store_item.pvms_no, mas_store_item.nomenclature, msic.ITEM_UNIT_NAME"
						+" ,STORE_OP_PATIENT_ISSUE_m.DEPARTMENT_ID,STORE_OP_PATIENT_ISSUE_t.BATCH_NO,STORE_OP_PATIENT_ISSUE_t.EXPIRY_DATE,store_op_patient_issue_m.prescription_no ,store_op_patient_issue_m.prescription_id, mm.MANUFACTURER_NAME ";

				}
			}else{
				if(pvms.equals("") && nomen.equals("")){
					qry=" select sum(qty_issued),STORE_ISSUE_t.item_id,mas_store_item.pvms_no, mas_store_item.nomenclature,msic.ITEM_UNIT_NAME,"
						+" STORE_ISSUE_m.DEPARTMENT_ID,STORE_ISSUE_t.BATCH_NO,STORE_ISSUE_t.EXPIRY_DATE"
						+" ,store_issue_m.ISSUE_NO ,store_issue_m.TO_STORE, mm.MANUFACTURER_NAME from STORE_ISSUE_t"
						+" left outer join  mas_store_item mas_store_item on STORE_ISSUE_t.ITEM_ID=mas_store_item.ITEM_ID"
						+" left outer join MAS_STORE_ITEM_CONVERSION  msic on mas_store_item.ITEM_CONVERSION_ID= msic.ITEM_CONVERSION_ID"
						+" left outer join STORE_ISSUE_m STORE_ISSUE_m on STORE_ISSUE_t.ISSUE_M_ID=STORE_ISSUE_m.ID"
						+"   left outer join mas_store_brand msb on  mas_store_item.ITEM_ID = msb.ITEM_ID "
						+" left outer join mas_manufacturer mm on  msb.MANUFACTURER_ID  = mm.MANUFACTURER_ID "
						+" where  STORE_ISSUE_m.DEPARTMENT_ID='"+deptId+"'"
						+" and  STORE_ISSUE_m.TO_STORE='"+toDeptId+"'"
						+"  and STORE_ISSUE_m.HOSPITAL_ID= '"+hosId+"'"
						+" and STORE_ISSUE_m.issue_date between to_date('"
						+ fromDate+"'"
						+" ,'dd/mm/yyyy') and to_date('"
						+ toDate+"'"
						+" ,'dd/mm/yyyy')"
						+" group by STORE_ISSUE_t.item_id,STORE_ISSUE_t.qty_issued,mas_store_item.pvms_no, mas_store_item.nomenclature, msic.ITEM_UNIT_NAME "
						+" ,STORE_ISSUE_m.DEPARTMENT_ID,STORE_ISSUE_t.BATCH_NO,STORE_ISSUE_t.EXPIRY_DATE, mm.MANUFACTURER_NAME ,store_issue_m.ISSUE_NO ,store_issue_m.TO_STORE ";
				}
				else if(!nomen.equals("") && nomen!= null){
					qry=" select sum(qty_issued),STORE_ISSUE_t.item_id,mas_store_item.pvms_no, mas_store_item.nomenclature,msic.ITEM_UNIT_NAME,"
						+" STORE_ISSUE_m.DEPARTMENT_ID,STORE_ISSUE_t.BATCH_NO,STORE_ISSUE_t.EXPIRY_DATE"
						+" ,store_issue_m.ISSUE_NO ,store_issue_m.TO_STORE, mm.MANUFACTURER_NAME from STORE_ISSUE_t"
						+" left outer join  mas_store_item mas_store_item on STORE_ISSUE_t.ITEM_ID=mas_store_item.ITEM_ID"
						+" left outer join MAS_STORE_ITEM_CONVERSION  msic on mas_store_item.ITEM_CONVERSION_ID= msic.ITEM_CONVERSION_ID"
						+" left outer join STORE_ISSUE_m STORE_ISSUE_m on STORE_ISSUE_t.ISSUE_M_ID=STORE_ISSUE_m.ID"
						+"   left outer join mas_store_brand msb on  mas_store_item.ITEM_ID = msb.ITEM_ID "
						+" left outer join mas_manufacturer mm on  msb.MANUFACTURER_ID  = mm.MANUFACTURER_ID "
						+" where  STORE_ISSUE_m.DEPARTMENT_ID='"+deptId+"'"
						+" and  STORE_ISSUE_m.TO_STORE='"+toDeptId+"'"
						+"  and STORE_ISSUE_m.HOSPITAL_ID= '"+hosId+"'"
						+" and STORE_ISSUE_m.issue_date between to_date('"
						+ fromDate+"'"
						+" ,'dd/mm/yyyy') and to_date('"
						+ toDate+"'"
						+" ,'dd/mm/yyyy')"
						+" and  mas_store_item.NOMENCLATURE='"
						+ nomen+"'"
						+" group by STORE_ISSUE_t.item_id,STORE_ISSUE_t.qty_issued,mas_store_item.pvms_no, mas_store_item.nomenclature, msic.ITEM_UNIT_NAME "
						+" ,STORE_ISSUE_m.DEPARTMENT_ID,STORE_ISSUE_t.BATCH_NO,STORE_ISSUE_t.EXPIRY_DATE, mm.MANUFACTURER_NAME ,store_issue_m.ISSUE_NO ,store_issue_m.TO_STORE ";

				}else{
					qry=" select sum(qty_issued),STORE_ISSUE_t.item_id,mas_store_item.pvms_no, mas_store_item.nomenclature,msic.ITEM_UNIT_NAME,"
						+" STORE_ISSUE_m.DEPARTMENT_ID,STORE_ISSUE_t.BATCH_NO,STORE_ISSUE_t.EXPIRY_DATE"
						+" ,store_issue_m.ISSUE_NO ,store_issue_m.TO_STORE, mm.MANUFACTURER_NAME from STORE_ISSUE_t"
						+" left outer join  mas_store_item mas_store_item on STORE_ISSUE_t.ITEM_ID=mas_store_item.ITEM_ID"
						+" left outer join MAS_STORE_ITEM_CONVERSION  msic on mas_store_item.ITEM_CONVERSION_ID= msic.ITEM_CONVERSION_ID"
						+" left outer join STORE_ISSUE_m STORE_ISSUE_m on STORE_ISSUE_t.ISSUE_M_ID=STORE_ISSUE_m.ID"
						+"   left outer join mas_store_brand msb on  mas_store_item.ITEM_ID = msb.ITEM_ID "
						+" left outer join mas_manufacturer mm on  msb.MANUFACTURER_ID  = mm.MANUFACTURER_ID "
						+" where  STORE_ISSUE_m.DEPARTMENT_ID='"+deptId+"'"
						+" and  STORE_ISSUE_m.TO_STORE='"+toDeptId+"'"
						+"  and STORE_ISSUE_m.HOSPITAL_ID= '"+hosId+"'"
						+" and STORE_ISSUE_m.issue_date between to_date('"
						+ fromDate+"'"
						+" ,'dd/mm/yyyy') and to_date('"
						+ toDate+"'"
						+" ,'dd/mm/yyyy')"
						+" and  mas_store_item.PVMS_NO='"
						+ pvms+"'"
						+" group by STORE_ISSUE_t.item_id,STORE_ISSUE_t.qty_issued,mas_store_item.pvms_no, mas_store_item.nomenclature, msic.ITEM_UNIT_NAME "
						+" ,STORE_ISSUE_m.DEPARTMENT_ID,STORE_ISSUE_t.BATCH_NO,STORE_ISSUE_t.EXPIRY_DATE, mm.MANUFACTURER_NAME ,store_issue_m.ISSUE_NO ,store_issue_m.TO_STORE ";

				}

			}

			// }
			objectList = (List) session.createSQLQuery(qry).list();


			if(objectList.size()==0){
				String msg="No Record Found !";
				map.put("msg", msg);
			}

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		for (Iterator iterator = objectList.iterator(); iterator.hasNext();) {
			Object[] object = (Object[]) iterator.next();
			/*for(int i=0; i<object.length;i++)
					{
					}*/
		}
		// javed khan
		List<MasDepartment> deptList = session.createCriteria(MasDepartment.class).add(
				Restrictions.eq("Status", "y")).list();
		map.put("deptList",deptList);
		map.put("objectList", objectList);
		return map;

	}

	public Map<String, Object> getdrugStock(Map<String, Object> requestParameters) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();
		int itemId= 0;
		int hospitalId=0;

		String qry="";
		String qry1="";
		String pvms="";
		String reportType="";
		Map<String, Object> utilMap = new HashMap<String, Object>();
		Map itemValue = new HashMap();

		List objectList = new ArrayList();
		List objectList1 = new ArrayList();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasStoreItem> itemList1 = new ArrayList<MasStoreItem>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<StoreItemBatchStock> batchStockList= new ArrayList<StoreItemBatchStock>();
		if(requestParameters.get("pvms") !=null){
			pvms = (String)requestParameters.get("pvms");

		}


		try {




			itemId = (Integer) requestParameters.get("itemId");
			hospitalId = (Integer) requestParameters.get("hospitalId");
			departmentList = session.createCriteria(MasDepartment.class).add(
					Restrictions.eq("Status", "y"))
					//.add(Restrictions.eq("Hospital.Id", hospitalId))
					.addOrder(Order.asc("Id")).list();
			itemList = session.createCriteria(MasStoreItem.class).add(
					Restrictions.eq("Status", "y")).add(Restrictions.eq("ItemType.Id", 1))
					.addOrder(Order.desc("Id")).list();

			itemList1 = session.createCriteria(MasStoreItem.class).add(
					Restrictions.eq("Status", "y")).add(Restrictions.eq("ItemType.Id", 2))
					.add(Restrictions.eq("Hospital.Id", hospitalId))
					.addOrder(Order.desc("Id")).list();
			itemList.addAll(itemList1);
			if(itemId==0){
				/*qry1="SELECT store_item_batch_stock.Department_id,store_item_batch_stock.item_id,  sum(store_item_batch_stock.closing_stock) AS closing_stock,mas_department.department_name AS department_name,"
							 	+" mas_store_item.pvms_no AS pvms_no,mas_store_item.nomenclature AS nomenclature,mas_store_item_conversion.item_unit_name AS unit_name"
							 	+" FROM  mas_department mas_department "
							 	+" RIGHT OUTER JOIN store_item_batch_stock store_item_batch_stock ON mas_department.department_id = store_item_batch_stock.department_id"
							 	+" LEFT OUTER JOIN mas_store_item mas_store_item ON store_item_batch_stock.item_id = mas_store_item.item_id"
							 	+" LEFT OUTER JOIN mas_store_item_conversion mas_store_item_conversion ON mas_store_item.item_conversion_id = mas_store_item_conversion.item_conversion_id"


							 	+" group by mas_department.department_id,mas_department.department_name,mas_store_item.nomenclature , mas_store_item_conversion.item_unit_name,mas_store_item.pvms_no, store_item_batch_stock.item_id"
							 	+" ,store_item_batch_stock.Department_id,store_item_batch_stock.item_id"
							 	+" order by mas_department.department_id , store_item_batch_stock.item_id";
						  objectList1 = (List) session.createSQLQuery(qry1).list();*/
				for(int i=0; i<itemList.size();i++)
				{String deptQuant="";
				// if(i<600){
				if(departmentList.size()>0){
					for(int j=0; j<departmentList.size(); j++){

						String jav="select case  when sum(nvl(closing_stock,0))  > 0  THEN sum(nvl(closing_stock,0)) else 0 end as closing_blance"
							+" from STORE_ITEM_BATCH_STOCK  where item_id='"
							+ itemList.get(i).getId()+"'"
							+" and department_id="
							+departmentList.get(j).getId()+" and hospital_id = "+hospitalId;
						int quantity=((BigDecimal)session.createSQLQuery(jav).uniqueResult()).intValue();
						//int quantity1=session.createSQLQuery("").uniqueResult()
						deptQuant+=departmentList.get(j).getId()+"@"+quantity+"#";


					}
					// }else{break;}
					itemValue.put(itemList.get(i).getId(),deptQuant);
				}
				}



			}
			else {

				qry="SELECT sum(store_item_batch_stock.closing_stock) AS closing_stock,mas_department.department_name AS department_name,"
					+" mas_store_item.pvms_no AS pvms_no,mas_store_item.nomenclature AS nomenclature,mas_store_item_conversion.item_unit_name AS unit_name"
					+" FROM  mas_department mas_department "
					+" RIGHT OUTER JOIN store_item_batch_stock store_item_batch_stock ON mas_department.department_id = store_item_batch_stock.department_id"
					+" LEFT OUTER JOIN mas_store_item mas_store_item ON store_item_batch_stock.item_id = mas_store_item.item_id"
					+" LEFT OUTER JOIN mas_store_item_conversion mas_store_item_conversion ON mas_store_item.item_conversion_id = mas_store_item_conversion.item_conversion_id"
					+" where store_item_batch_stock.item_id ='"
					+ itemId+"'"
					+" and store_item_batch_stock.hospital_id ='"
					+ hospitalId+"'"
					+" group by mas_department.department_id,mas_department.department_name,mas_store_item.nomenclature , mas_store_item_conversion.item_unit_name,mas_store_item.pvms_no, store_item_batch_stock.item_id"
					+" order by mas_department.department_id , store_item_batch_stock.item_id";
				objectList = (List) session.createSQLQuery(qry).list();
				if(objectList.size()==0)
				{
					String msg="NO Record Found !";
					map.put("msg",msg);
				}
			}


		} catch (HibernateException e) {
			e.printStackTrace();
		}
		/*for (Iterator iterator = objectList.iterator(); iterator.hasNext();) {
					Object[] object = (Object[]) iterator.next();
					for(int i=0; i<object.length;i++)
					{
					}
				}*/

		map.put("objectList", objectList);
		map.put("objectList1", objectList1);
		map.put("departmentList", departmentList);
		map.put("itemList", itemList);
		/*map.put("batchStockList", batchStockList);*/
		map.put("itemValue", itemValue);
		return map;

	}

	// javed

	public Map<String, Object> getSurplusMedicalStoreItem(Map<String, Object> requestParameters) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();
		int deptId = 0;
		int hospitalId = 0;
		String fromDate="";
		String toDate="";
		String qry="";
		String fsnType="";
		String msg="";
		Map<String, Object> utilMap = new HashMap<String, Object>();

		List objectList = new ArrayList();


		try {
			fromDate=(String)requestParameters.get("FROM_DATE1");
			toDate=(String)requestParameters.get("TO_DATE1");
			hospitalId = Integer.parseInt(""+requestParameters.get("hospitalId"));

			//deptId = Integer.parseInt("" + requestParameters.get("deptId"));

			qry="Select sim.DECLARED_VIDE, sim.AUTHORITY_FOR_ISSUE,sim.ISSUE_NO,sim.CONSINEES_DEMAND_NO, sit.ITEM_ID,sit.QTY_ISSUED,sit.BATCH_NO,"
				+"sit.EXPIRY_DATE,sit.MANUFACTURE_DATE, msi.Nomenclature,msi.PVMS_NO,sim.REMARKS,msic.ITEM_UNIT_NAME,msafd.AIR_FORCE_DEPOT_NAME"
				+" from store_issue_m sim"
				+" left outer join  store_issue_t sit on sim.ID=sit.ISSUE_M_ID"
				+" left outer join  mas_store_item msi on sit.item_id=msi.ITEM_ID"
				+" left outer join   MAS_STORE_ITEM_CONVERSION msic on msi.ITEM_CONVERSION_ID=msic.ITEM_CONVERSION_ID"
				+" left outer join  MAS_STORE_AIR_FORCE_DEPOT  msafd on sim.to_unit=msafd.AIR_FORCE_DEPOT_ID "
				+" where sim.ISSUE_TYPE='o' and sim.HOSPITAL_ID= "
				+ hospitalId
				+" and sim.ISSUE_DATE  between to_date('"
				+ fromDate+"'"
				+" ,'dd/mm/yyyy') and to_date('"
				+ toDate+"'"
				+" ,'dd/mm/yyyy')"
				+" order by sim.id desc";
			objectList = (List) session.createSQLQuery(qry).list();


			if(objectList.size()==0){
				msg="No Record Found !!!";
				map.put("msg", msg);
			}

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		for (Iterator iterator = objectList.iterator(); iterator.hasNext();) {
			Object[] object = (Object[]) iterator.next();
			for(int i=0; i<object.length;i++)
			{
			}
		}

		map.put("objectList", objectList);
		return map;

	}

	//javed khan
	public boolean addDrugCost(Map<String, Object> infoMap,
			Map<String, Object> dataMap) {
		StoreDrugCost storeDrugCost = (StoreDrugCost) infoMap.get("storeDrugCost");

		boolean successfullyAdded = false;
		@SuppressWarnings("unused")
		int pageNo = 0;
		String entryNo = "";

		StoreDefectiveDrugM storeDefectiveDrugM2 = new StoreDefectiveDrugM();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		String max = "";
		String no = "";
		String item_id="";
		String brand_id="";

		if (dataMap.get("deptId") != null)
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		if (dataMap.get("hospitalId") != null)
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		if (dataMap.get("userName") != null)
			userName = ("" + dataMap.get("userName"));
		if (dataMap.get("item_id") != null)
			item_id = ("" + dataMap.get("item_id"));
		if (dataMap.get("brand_id") != null)
			brand_id = ("" + dataMap.get("brand_id"));

		String qry="select * from store_drug_cost sdc where sdc.ITEM_ID='"+item_id+"' and sdc.HOSPITAL_ID = "+hospitalId;

		// Session sess = factory.openSession();
		session = (Session) getSession();
		//ArrayList<StoreDrugCost> al=(ArrayList<StoreDrugCost>)session.createSQLQuery(qry).list();
		ArrayList<StoreDrugCost> al=(ArrayList<StoreDrugCost>)session.createCriteria(StoreDrugCost.class).add(
				Restrictions.eq("Item.Id", Integer.parseInt(item_id))).
				add(Restrictions.eq("Brand.Id", Integer.parseInt(brand_id))).
				add(Restrictions.eq("Hospital.Id", hospitalId)).list(); // add javed khan

		if(al.size()<=0){
			Transaction tx = null;
			try {
				tx = session.beginTransaction();
				HibernateTemplate hbt = getHibernateTemplate();
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
				//if (!(infoMap.get("headerStored") + "").equals("yes")) {
				hbt.saveOrUpdate(storeDrugCost);
				//}

				successfullyAdded = true;
				tx.commit();

			} catch (RuntimeException e) {
				if (tx != null)
					tx.rollback();
				// throw e; // or display error message
				e.printStackTrace();
			} finally {
				//session.close();
			}
		}
		else{
			HibernateTemplate hbt4 = getHibernateTemplate();
			hbt4.setFlushModeName("FLUSH_EAGER");
			hbt4.setCheckWriteOperations(false);
			int id=(Integer)al.get(0).getId();
			StoreDrugCost storeDrugCost1 = (StoreDrugCost) hbt4.load(StoreDrugCost.class, id);
			MasStoreItem masItem= new MasStoreItem();
			masItem.setId(Integer.parseInt(item_id));
			storeDrugCost1.setItem(masItem);
			storeDrugCost1.setDrugCost((Float)storeDrugCost.getDrugCost());

			MasManufacturer masManufacturer= new MasManufacturer();
			masManufacturer.setId(Integer.parseInt(""+storeDrugCost.getManufacturer().getId()));
			storeDrugCost1.setManufacturer(masManufacturer);

			storeDrugCost1.setPackSize(""+storeDrugCost.getPackSize());
			/*storeDrugCost1.setMrpPerPack(""+storeDrugCost.getMrpPerPack());*/
			storeDrugCost1.setBG(""+storeDrugCost.getBG());
			storeDrugCost1.setLastChgDate((Date)storeDrugCost.getLastChgDate());
			storeDrugCost1.setLastChgTime((String)storeDrugCost.getLastChgTime());

			hbt4.update(storeDrugCost1);
			hbt4.refresh(storeDrugCost1);
			successfullyAdded = true;

		}
		return successfullyAdded;

	}

	public String getPVMS(String itemId){
		String PvmsNo="";
		List objectList=new ArrayList();
		int item_id=Integer.parseInt(itemId);
		session = (Session) getSession();
		String qry = "select msi.PVMS_NO from mas_store_item  msi where msi.ITEM_ID='"+item_id+"'";
		objectList =session.createSQLQuery(qry).list();
		PvmsNo=objectList.get(0).toString();
		return PvmsNo;
	}

	public String getBrand(String brandId){
		String brand[]=brandId.split(":");

		session = (Session) getSession();
		String BrandId="";
		if(brand.length>1){
			List objectList=new ArrayList();
			String qry = "select msb.BRAND_ID from MAS_STORE_BRAND msb where msb.BRAND_NAME='"+brand[1]+"'";
			objectList =session.createSQLQuery(qry).list();
			BrandId=objectList.get(0).toString();
		}else{
			List objectList=new ArrayList();
			String qry = "select msb.BRAND_ID from MAS_STORE_BRAND msb where upper(msb.BRAND_NAME)=upper('"+(brandId.trim())+"')";
			objectList =session.createSQLQuery(qry).list();
			if(objectList.size() >0)
				BrandId=objectList.get(0).toString();
		}
		return BrandId;
	}

	public String getSupplierId(String supplierNo){
		String supplierNo1=supplierNo;
		String SupplierId="";
		List objectList=new ArrayList();
		List objectListne=new ArrayList();

		session = (Session) getSession();
		String qry = "select sgm.SUPPLIER_ID,sgm.PO_ID from store_po_header sgm where sgm.PO_NUMBER='"+supplierNo1+"'";
		objectList =session.createSQLQuery(qry).list();
		Iterator itr=objectList.iterator();
		while(itr.hasNext()){
			String a=null;
			String b=null;
			Object[] tuple = (Object[]) itr.next();
			a=tuple[0].toString();
			b=tuple[1].toString();
			SupplierId=a+"-"+b;
		}
		return SupplierId;
	}
	public String getSupplierPenAmt(int supplierId,int hospitalId){
		String netAmuont="0.0";
		List amountValue=new ArrayList();
		try{
			String amtQry="select sum(slt.AMOUNT_VALUE) from STORE_LOANIN_M slm left outer join STORE_LOANIN_T slt " +

			"on slm.LOANIN_MASTER_ID=slt.LOANIN_MASTER_ID where slm.SUPPLIER_ID='"+supplierId+"' and slm.HOSPITAL_ID='"+hospitalId+"' and slt.PRO_STATUS='y'";
			amountValue=session.createSQLQuery(amtQry).list();
			netAmuont=amountValue.get(0).toString();
		}catch(Exception e){
			netAmuont="0.0";
		}
		return netAmuont;
	}



	public List getPreId(String supplierNo){
		String supplierNo1=supplierNo;
		Map map=new HashMap();
		Map mapQty=new HashMap();
		List lisQty=new ArrayList();
		String SupplierId="";
		List objectList=new ArrayList();
		session = (Session) getSession();
		String qry = "select spd.ITEM_ID,spd.id,spd.QUANTITY_ORDERED from store_po_detail spd left outer join store_po_header sph on spd.PO_ID=sph.PO_ID where sph.PO_NUMBER='"+supplierNo1+"'";
		objectList =session.createSQLQuery(qry).list();
		Iterator itr=objectList.iterator();
		while(itr.hasNext()){
			String id=null;
			String prePid=null;
			String orderQty=null;
			Object[] tuple = (Object[]) itr.next();
			id=tuple[0].toString();
			if(tuple[1]!=null){
				prePid=tuple[1].toString();
			}else{
				prePid="na";
			}
			orderQty=tuple[2].toString();
			String id1=id;
			if(map.containsKey(id)){
				String prePid1=map.get(id).toString();
				prePid=prePid1+"," +prePid;
				map.put(id,prePid);
			}else{
				map.put(id,prePid);
			}
			if(mapQty.containsKey(id1)){
				String orderQty1=mapQty.get(id1).toString();
				orderQty=orderQty1+","+orderQty;
				mapQty.put(id1,orderQty);
			}else{
				mapQty.put(id1,orderQty);
			}
		}
		lisQty.add(map);
		lisQty.add(mapQty);
		return lisQty;
	}



	public String getManu(String manuId){
		String manuID="";
		List objectList=new ArrayList();
		String manu=manuId;
		session = (Session) getSession();
		String qry ="select mm.MANUFACTURER_ID from mas_manufacturer mm where mm.MANUFACTURER_NAME='"+manu+"'";
		objectList =session.createSQLQuery(qry).list();
		if(objectList.size()>0){
			manuID=objectList.get(0).toString();
		}else{
			manuID="";
		}
		return manuID;
	}






	//javed khan
	public Map searchDrugCost(Map searchFieldMap) {

		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();
		String fromDate = "";
		String toDate = "";
		int hospital_id=0;
		List<StoreDrugCost> storeDrugCostList = new ArrayList<StoreDrugCost>();
		List<MasStoreItem> MasStoreItemList = new ArrayList<MasStoreItem>();

		String pvms = "";
		String item_name="";
		String msg = "";
		List objectListdrug = new ArrayList();
		Criteria c=null;
		try {
			hospital_id =Integer.parseInt(""+searchFieldMap.get("hospitalId"));
			c  = session.createCriteria(StoreDrugCost.class);
			if ((!searchFieldMap.get("item_name").equals(""))) {
				item_name =(String)searchFieldMap.get("item_name");
				String item[]=item_name.split("\\[");
				/*String qury="select msi.NOMENCLATURE,msi.PVMS_NO, sdc.DRUG_COST,msb.brand_name, mm.MANUFACTURER_NAME"
						+" from  STORE_DRUG_COST  sdc"
						+" left outer join mas_store_item msi on sdc.ITEM_ID=msi.ITEM_ID"
						+" left outer join mas_store_BRAND msb on sdc.brand_id=msb.brand_id"
						+" left outer join mas_manufacturer mm on sdc.MANUFACTURER_ID=mm.MANUFACTURER_ID"
						+" where msi.nomenclature='"
						+item[0]+"'"
						+" order by msi.ITEM_ID";

						objectListdrug = (List) session.createSQLQuery(qury).list();
						if(objectListdrug.size()==0){
							msg="No Record Found !!!";
							map.put("msg", msg);
						}*/
				String qry="select Item_id from mas_store_item msi where msi.NOMENCLATURE='"
					+item[0]+"'";

				MasStoreItemList=session.createCriteria(MasStoreItem.class).add(Restrictions.eq("Nomenclature",item[0]))
				.list();
				c  = session.createCriteria(StoreDrugCost.class).add(Restrictions.eq("Item.Id",MasStoreItemList.get(0).getId()));

				//storeDrugCostList=c.add(Restrictions.eq("Item.Id",MasStoreItemList.get(0).getId())).list();

			}

			if ((!searchFieldMap.get("pvms").equals(""))) {
				pvms =(String)searchFieldMap.get("pvms");

				MasStoreItemList=session.createCriteria(MasStoreItem.class).add(Restrictions.eq("PvmsNo",pvms))
				.list();
				c  = session.createCriteria(StoreDrugCost.class).add(Restrictions.eq("Item.Id",MasStoreItemList.get(0).getId()));

			}
			int Mid=0;
			if (Integer.parseInt((""+searchFieldMap.get("Mid")))!=0) {
				Mid =Integer.parseInt((""+searchFieldMap.get("Mid")));

				c  = session.createCriteria(StoreDrugCost.class).add(Restrictions.eq("Manufacturer.Id",Mid));

			}

			//storeDrugCostList=c.add(Restrictions.eq("Item.Id",MasStoreItemList.get(0).getId())).list();
			storeDrugCostList=c.add(Restrictions.eq("Hospital.Id", hospital_id)).list();
		} catch (Exception e) {
		}

		List<MasManufacturer> manuList=session.createCriteria(MasManufacturer.class).
		add(Restrictions.eq("Status", "y")).list();
		map.put("manuList", manuList);
		map.put("objectListdrug", objectListdrug);
		map.put("storeDrugCostList", storeDrugCostList);
		return map;
	}

	public Map<String, Object> getExpiryDateForReturnDispensary(Map<String, Object> dataMap) {
		int deptId = 0;
		int batchId = 0;
		String batchNo = "";
		//java.sql.Date expiryDate = null;
		String expiryDate ="";
		//Date expiryDate = new Date();

		//java.sql.Date manufacturingDate=null;

		String  manufacturingDate="";
		String brandName="";
		int brandId=0;
		List<Object[]> objectList = new ArrayList<Object[]>();
		List objectList1 = new ArrayList();

		BigDecimal stock=null;
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();
		int mId = 1;
		try {
			if (dataMap.get("deptId") != null)
				deptId = Integer.parseInt("" + dataMap.get("deptId"));
			if (dataMap.get("batchId") != null)
				batchId = (Integer)dataMap.get("batchId");
			
			objectList = session.createCriteria(StoreItemBatchStock.class)
					.add(Restrictions.eq("Id", batchId)).createAlias("Brand", "brand")
					.setProjection(Projections.projectionList()
							.add(Projections.property("ExpiryDate")).add(Projections.property("ManufactureDate"))
							.add(Projections.property("brand.BrandName")).add(Projections.property("ClosingStock")).add(Projections.property("Brand.Id"))).list();						
								
			
			
			if(objectList.size()>0)
			{
				for(Object[] tuple: objectList)
				{
					expiryDate=  ""+(tuple[0]!=null?tuple[0]:"");
					manufacturingDate = ""+(tuple[1]!=null?tuple[1]:"");					
					brandName=(String)tuple[2];
					stock = (BigDecimal)tuple[3];
					brandId = (Integer)tuple[4];
				}
			}
			

		} catch (Exception e) {
			e.printStackTrace();
		}
		System.out.println("expiryDate--"+expiryDate);
		System.out.println("manufacturingDate--"+manufacturingDate);
		System.out.println("brandName--"+brandName);
		System.out.println("stock--"+stock);
		map.put("expiryDate", expiryDate);
		map.put("manufacturingDate",manufacturingDate);
		map.put("brandName", brandName);
		map.put("stock", stock);
		map.put("brandId", brandId);
		
		return map;
	}

	public Map<String, Object> createAndSaveMmfDepartmentData(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();
		String pvms = null;
		String nomenclature = null;
		String au = null;
		BigDecimal qtymmf = new BigDecimal(0);
		BigDecimal currQtymmf = new BigDecimal(0);
		BigDecimal preQtymmf = new BigDecimal(0);
		String remark = null;
		int id = 0;
		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		boolean update=false;
		List<StoreMmfDepartmentT> storeMmfDepartmentTListPreviousYear = new ArrayList<StoreMmfDepartmentT>();
		List<StoreMmfDepartmentT> storeMmfDepartmentTListCurrentYear = new ArrayList<StoreMmfDepartmentT>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		StoreFyDocumentNo storeFyDocumentNo = null;
		List<StoreMmfDepartmentM> storeMmfDepartmentMListPreviousYear = new ArrayList<StoreMmfDepartmentM>();
		List<StoreMmfDepartmentM> storeMmfDepartmentMListCurrentYear = new ArrayList<StoreMmfDepartmentM>();
		List<StoreMmfDepartmentM> searchStoreMmfDepartmentMList = new ArrayList<StoreMmfDepartmentM>();

		int currentYear = box.getInt(MMF_DEPARTMENT_DATE);
		int previousYear = currentYear - 1;
		String mmfNo = "";

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			StoreMmfDepartmentT storeMmfDepartmentT1 = new StoreMmfDepartmentT();
			int sno = 0;
			// String mmfNo = box.get("mmfNo");
			// For Generating & Saving new MMF No for StoreFyDocumentNo Table
			searchStoreMmfDepartmentMList = session
			.createCriteria(StoreMmfDepartmentM.class)
			.add(Restrictions.eq("StoreWardDept.Id",
					box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
					.add(Restrictions.eq("MmfStoreType", box.get("storeType")))
					.list();

			storeMmfDepartmentMListCurrentYear = session
			.createCriteria(StoreMmfDepartmentM.class)
			.add(Restrictions.eq("MmfForTheYear", currentYear))
			.add(Restrictions.eq("StoreWardDept.Id",
					box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
					.add(Restrictions.eq("MmfStoreType", box.get("storeType")))
					.list();

			storeMmfDepartmentMListPreviousYear = session
			.createCriteria(StoreMmfDepartmentM.class)
			.add(Restrictions.eq("MmfForTheYear", previousYear))
			.add(Restrictions.eq("StoreWardDept.Id",
					box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
					.add(Restrictions.eq("MmfStoreType", box.get("storeType")))
					.list();

			storeMmfDepartmentTListPreviousYear = session
			.createCriteria(StoreMmfDepartmentT.class)
			.addOrder(Order.asc("SrNo"))
			.createAlias("StoreMmfDepartmentM", "m")
			.add(Restrictions.eq("m.MmfForTheYear", previousYear))
			.add(Restrictions.eq("m.StoreWardDept.Id",
					box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
					.add(Restrictions.eq("m.MmfStoreType", box.get("storeType"))).list();
			if (storeMmfDepartmentMListPreviousYear != null
					&& storeMmfDepartmentMListPreviousYear.size() > 0) {
				if (storeMmfDepartmentMListCurrentYear.size() == 0) {
					departmentList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y'");
					approvedByEmployeeList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasEmployee ");
					map.put("departmentList", departmentList);
					map.put("approvedByEmployeeList", approvedByEmployeeList);
					StoreMmfDepartmentM storeMmfDepartmentM = new StoreMmfDepartmentM();

					/*
					 * if (box.getInt(APPROVED_BY_EMPLOYEE_ID_MMF_DEPENDENT) !=
					 * 0) { MasEmployee masEmployee = new MasEmployee();
					 * masEmployee.setId(box
					 * .getInt(APPROVED_BY_EMPLOYEE_ID_MMF_DEPENDENT));
					 * storeMmfDepartmentM.setApprovedBy(masEmployee);
					 *  }
					 */
					mmfNo = "01/" + currentYear;
					List<StoreFyDocumentNo> mmfNoList = session
					.createCriteria(StoreFyDocumentNo.class)
					.add(Restrictions.eq("Department.Id",
							box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT))).list();
					if (mmfNoList != null && mmfNoList.size() > 0) {
						storeFyDocumentNo = mmfNoList.get(0);
					}
					storeFyDocumentNo.setMmfNo(mmfNo);
					hbt.update(storeFyDocumentNo);
					hbt.refresh(storeFyDocumentNo);

					storeMmfDepartmentM.setDocNo(mmfNo);
					map.put("docId", mmfNo);
					storeMmfDepartmentM.setLastChgBy(box.get(CHANGED_BY));
					storeMmfDepartmentM.setLastChgDate(HMSUtil
							.convertStringTypeDateToDateType(box
									.getString(CHANGED_DATE)));
					storeMmfDepartmentM.setLastChgTime(box.get(CHANGED_TIME));
					storeMmfDepartmentM.setMmfForTheYear(currentYear);
					storeMmfDepartmentM.setCheckedBy(box.getString(CHECKED_BY));
					storeMmfDepartmentM.setPreparedBy(box
							.getString(PREPARED_BY));
					storeMmfDepartmentM.setMmfStoreType(box.get("storeType"));
					storeMmfDepartmentM.setRemarks(box.get(REMARKS).toString());
					storeMmfDepartmentM.setStatus("o");

					MasDepartment storeWardDept = new MasDepartment();
					storeWardDept.setId(box
							.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT));
					storeMmfDepartmentM.setStoreWardDept(storeWardDept);
					MasHospital masHospital = new MasHospital();
					masHospital.setId(box.getInt("hospitalId"));
					storeMmfDepartmentM.setHospital(masHospital);

					hbt.setFlushModeName("FLUSH_EAGER");
					hbt.setCheckWriteOperations(false);
					hbt.save(storeMmfDepartmentM);
				}

				if(box.get(ITEM_ID)!= null){
					/*if (storeMmfDepartmentTListPreviousYear != null
									&& storeMmfDepartmentTListPreviousYear.size() > 0) {*/
					sno = storeMmfDepartmentTListPreviousYear.get(0)
					.getSrNo().intValue();

					/*for (Iterator iterator = storeMmfDepartmentTListPreviousYear
										.iterator(); iterator.hasNext();) {*/
					/*StoreMmfDepartmentT storeMmfDepartmentTPreviousYear = (StoreMmfDepartmentT) iterator
									.next();*/
					StoreMmfDepartmentT storeMmfDepartmentTnew = new StoreMmfDepartmentT();

					int item=Integer.parseInt(box.get(ITEM_ID));
					MasStoreItem msi=new MasStoreItem();
					msi.setId(item);
					storeMmfDepartmentTnew
					.setItem(msi);
					storeMmfDepartmentTnew
					.setPreYearMmf(new BigDecimal(box.get("preQtymmf")));
					storeMmfDepartmentTnew
					.setCurrYearMmf(new BigDecimal(box.get("currQtymmf")));
					storeMmfDepartmentTnew
					.setMmfInQty(new BigDecimal(box.get("qtymmf")));
					storeMmfDepartmentTnew
					.setRemarks(box.get("remark"));
					//storeMmfDepartmentTnew.setSrNo(Integer.parseInt(box.get("srno")));

					//List<StoreMmfDepartmentM> smdmList
					mmfNo = "01/" + currentYear;
					String qur="select id from store_mmf_department_m where doc_no='"
						+ mmfNo+"' and mmf_store_type='e' ";
					int smid	=((BigDecimal)session.createSQLQuery(qur).uniqueResult()).intValue();

					StoreMmfDepartmentM smdm= new StoreMmfDepartmentM();
					smdm.setId(smid);
					storeMmfDepartmentTnew
					.setStoreMmfDepartmentM(smdm);
					hbt.save(storeMmfDepartmentTnew);
					update=true;
				}
				//}
				//}

				storeMmfDepartmentMListCurrentYear = session
				.createCriteria(StoreMmfDepartmentM.class)
				.add(Restrictions.eq("MmfForTheYear", currentYear))
				.add(Restrictions.eq("StoreWardDept.Id",
						box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
						.add(Restrictions.eq("MmfStoreType", box
								.get("storeType"))).list();

				storeMmfDepartmentTListCurrentYear = session
				.createCriteria(StoreMmfDepartmentT.class)
				.createAlias("StoreMmfDepartmentM", "m")
				.add(Restrictions.eq("m.MmfForTheYear", currentYear))
				.add(Restrictions.eq("m.StoreWardDept.Id",
						box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
						.add(Restrictions.eq("m.MmfStoreType", box
								.get("storeType"))).list();
				if (storeMmfDepartmentTListCurrentYear != null
						&& storeMmfDepartmentTListCurrentYear.size() > 0) {
					int mmfMasterId = storeMmfDepartmentTListCurrentYear
					.get(0).getStoreMmfDepartmentM().getId();
					mmfNo = storeMmfDepartmentTListCurrentYear.get(0)
					.getStoreMmfDepartmentM().getDocNo();
					map.put("mmfMasterId", mmfMasterId);
					map.put("mmfNo", mmfNo);
				}

				for (Iterator iterator = storeMmfDepartmentTListCurrentYear
						.iterator(); iterator.hasNext();) {
					StoreMmfDepartmentT storeMmfDepartmentT = (StoreMmfDepartmentT) iterator.next();
					try {
						id = storeMmfDepartmentT.getId();
					} catch (Exception e) {
						id = 0;
					}
					try {
						pvms = storeMmfDepartmentT.getItem().getPvmsNo();
					} catch (Exception e) {
						pvms = "";
					}
					try {
						nomenclature = storeMmfDepartmentT.getItem()
						.getNomenclature();
					} catch (Exception e) {
						nomenclature = "";
					}
					try {
						au = storeMmfDepartmentT.getItem()
						.getItemConversion().getPurchaseUnit()
						.getUnitName();
					} catch (Exception e) {
						au = "";
					}
					try {
						qtymmf = storeMmfDepartmentT.getMmfInQty();
					} catch (Exception e) {
						qtymmf = new BigDecimal(0);
					}
					try {
						currQtymmf = storeMmfDepartmentT.getCurrYearMmf();
					} catch (Exception e) {
						currQtymmf = new BigDecimal(0);
					}
					try {
						preQtymmf = storeMmfDepartmentT.getPreYearMmf();
					} catch (Exception e) {
						preQtymmf = new BigDecimal(0);
					}
					try {
						qtymmf = storeMmfDepartmentT.getMmfInQty();
					} catch (Exception e) {
						qtymmf = new BigDecimal(0);
					}
					try {
						remark = storeMmfDepartmentT.getRemarks();
					} catch (Exception e) {
						remark = "";
					}

					hData = new HashMap<String, Object>();
					hData.put("id", id);
					hData.put("pvms", pvms);
					hData.put("nomenclature", nomenclature);
					hData.put("au", au);
					hData.put("qtymmf", qtymmf);
					hData.put("currQtymmf", currQtymmf);
					hData.put("preQtymmf", preQtymmf);
					hData.put("remark", remark);

					vResult.add(hData);
				}
				if (vResult.size() > 0) {
					testPageData = new HashMap[vResult.size()];
					vResult.copyInto(testPageData);
				}
				try {
					pagedArray = new PageUtil().convertToPagedArrayIndex(
							testPageData, box);
				} catch (Exception e) {
					e.printStackTrace();
				}
				//}
		}
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		map.put("pagedArray", pagedArray);
		map.put("import", "import");
		map.put("searchStoreMmfDepartmentMList", searchStoreMmfDepartmentMList);
		map.put("update",update);
		return map;
	}

	//javed khan
	public Map<String, Object> getPendingForIndentData(Map<String, Object> dataMap) {
		int deptId = 0;
		int batchId = 0;
		String lifeType = "";
		Date expiryDate = new Date();
		Date manufacturingDate=new Date();
		String manufacturer = "";
		List objectList = new ArrayList();
		List objectList1 = new ArrayList();
		List objectList2 = new ArrayList();
		List<MasStoreItem> itemList=new ArrayList<MasStoreItem>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<MasStoreAirForceDepot> masStoreAirForceDepotList = new ArrayList<MasStoreAirForceDepot>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		String batchNoExact = "";
		int indentQty = 0;
		String no = "";
		int section = 0;
		int hospitalId = 0;
		session = (Session) getSession();
		Calendar calendar=Calendar.getInstance();
		int year=calendar.get(calendar.YEAR);
		int mId = 1;
		try {
			if (dataMap.get("deptId") != null)
				deptId = Integer.parseInt("" + dataMap.get("deptId"));
			if (dataMap.get("hospitalId") != null)
				hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
			if (dataMap.get("lifeType") != null)
				lifeType = ("" + dataMap.get("lifeType"));
			if (dataMap.get("section") != null)
				section =Integer.parseInt( ("" + dataMap.get("section")));
			if(!lifeType.equals("a") && section == 0){
				itemList=session.createCriteria(MasStoreItem.class).add(
						Restrictions.eq("SelfLife", lifeType)).add(
								Restrictions.eq("Status", "y")).list();
				String query="select smdm.MMF_FOR_THE_YEAR, msi.NOMENCLATURE,msi.PVMS_NO , smdt.MMF_IN_QTY,nvl(sum(sibs.CLOSING_STOCK),0),msu.UNIT_NAME "
					+",msi.item_id, mss.SECTION_CODE from  store_mmf_department_t smdt"
					+" left outer join mas_store_item msi on smdt.ITEM_ID=msi.ITEM_ID "
					+" left outer join store_mmf_department_m smdm on smdt.STORE_MMF_DEPARTMENT_M_ID=smdm.ID"
					+" left outer join store_item_batch_stock sibs on smdt.ITEM_ID=sibs.ITEM_ID  and sibs.department_id='"
					+ deptId+"'"
					+" and sibs.hospital_id='"
					+ hospitalId+"'"
					+" left outer join MAS_STORE_ITEM_CONVERSION  msic on msi.ITEM_CONVERSION_ID= msic.ITEM_CONVERSION_ID" 
					+" left outer join MAS_STORE_UNIT msu on msic.ISSUE_UNIT_ID=msu.UNIT_ID"
					+" left outer join mas_store_section mss on msi.SECTION_ID=mss.SECTION_ID"
					+" where msi.SELF_LIFE='"
					+lifeType+"'"
					+" and smdm.MMF_FOR_THE_YEAR='"
					+year+"'"
					//+" and smdm.MMF_STORE_TYPE='e' and smdm.STORE_WARD_DEPT='"
					+"  and smdm.STORE_WARD_DEPT='"
					+ deptId+"'"
					+" and smdm.hospital_id='"
					+ hospitalId+"'"
					+" group by smdm.MMF_FOR_THE_YEAR, msi.NOMENCLATURE,msi.PVMS_NO , smdt.MMF_IN_QTY,msu.UNIT_NAME,msi.item_id,mss.SECTION_CODE";

				objectList1 = (List) session.createSQLQuery(query).list();
				if(lifeType.equalsIgnoreCase("SLB"))
				{

					for (Iterator itr1 = objectList1.iterator(); itr1.hasNext();) {
						Object[] object = (Object[]) itr1.next();
						int mmf=((BigDecimal)object[3]).intValue();
						int closingStock=((BigDecimal)object[4]).intValue();
						int mmfForIndent=6*mmf;
						if(mmfForIndent>closingStock)
						{
							indentQty=mmfForIndent-closingStock;
							objectList2.add(object);
							// objectList1.add(indentQty);
						}
						else{
							//objectList1.remove(object);

						}

					}

				}
				else if(lifeType.equalsIgnoreCase("SL")){
					for (Iterator itr1 = objectList1.iterator(); itr1.hasNext();) {
						Object[] object = (Object[]) itr1.next();
						int mmf=0;
						if(object[3] != null){
							mmf=((BigDecimal)object[3]).intValue();
						}
						int closingStock=((BigDecimal)object[4]).intValue();
						int mmfForIndent=6*mmf;
						if(mmfForIndent>closingStock)
						{
							indentQty=mmfForIndent-closingStock;
							objectList2.add(object);
							// objectList1.add(indentQty);
						}
						else{
							//objectList1.remove(object);

						}
					}

				}
				else if(lifeType.equalsIgnoreCase("LL")){
					for (Iterator itr1 = objectList1.iterator(); itr1.hasNext();) {
						Object[] object = (Object[]) itr1.next();
						int mmf=0;
						if(object[3] != null){
							mmf=((BigDecimal)object[3]).intValue();
						}
						int closingStock=((BigDecimal)object[4]).intValue();
						int mmfForIndent=9*mmf;
						if(mmfForIndent>closingStock)
						{
							indentQty=mmfForIndent-closingStock;
							objectList2.add(object);
							// objectList1.add(indentQty);
						}
						else{
							//objectList1.remove(object);

						}
					}

				}

				if(objectList2.size()==0)
				{
					String msg="No Record Found. !";
					map.put("msg", msg);
				}

			}
			else if(section !=0  && lifeType.equals("a")){
				itemList=session.createCriteria(MasStoreItem.class).add(
						Restrictions.eq("SelfLife", lifeType)).add(
								Restrictions.eq("Status", "y")).list();
				String query="select smdm.MMF_FOR_THE_YEAR, msi.NOMENCLATURE,msi.PVMS_NO , smdt.MMF_IN_QTY,nvl(sum(sibs.CLOSING_STOCK),0),msic.ITEM_UNIT_NAME "
					+",msi.item_id, mss.SECTION_Name,msi.SELF_LIFE from  store_mmf_department_t smdt"
					+" left outer join mas_store_item msi on smdt.ITEM_ID=msi.ITEM_ID"
					+" left outer join store_mmf_department_m smdm on smdt.STORE_MMF_DEPARTMENT_M_ID=smdm.ID"
					+" left outer join store_item_batch_stock sibs on smdt.ITEM_ID=sibs.ITEM_ID  "
					+" left outer join MAS_STORE_ITEM_CONVERSION  msic on msi.ITEM_CONVERSION_ID= msic.ITEM_CONVERSION_ID"
					+" left outer join mas_store_section mss on msi.SECTION_ID=mss.SECTION_ID"
					+" where mss.SECTION_ID ='"
					+section+"'"
					+" and smdm.MMF_FOR_THE_YEAR='"
					+year+"'"
					+" and sibs.hospital_id='"
					+ hospitalId+"'"
					+" and sibs.department_id='"
					+ deptId+"'"
					//+" and smdm.MMF_STORE_TYPE='e' and smdm.STORE_WARD_DEPT='"
					+"  and smdm.STORE_WARD_DEPT='"
					+ deptId+"'"
					+" and smdm.hospital_id='"
					+ hospitalId+"'"
					+" group by smdm.MMF_FOR_THE_YEAR, msi.NOMENCLATURE,msi.PVMS_NO , smdt.MMF_IN_QTY,msic.ITEM_UNIT_NAME,msi.item_id,mss.SECTION_Name,msi.SELF_LIFE";



				objectList1 = (List) session.createSQLQuery(query).list();


				for (Iterator itr1 = objectList1.iterator(); itr1.hasNext();) {
					Object[] object = (Object[]) itr1.next();
					if((""+object[8]).equalsIgnoreCase("SLB"))
					{
						int mmf=((BigDecimal)object[3]).intValue();
						int closingStock=((BigDecimal)object[4]).intValue();
						int mmfForIndent=6*mmf;
						if(mmfForIndent>closingStock)
						{
							indentQty=mmfForIndent-closingStock;
							objectList2.add(object);
							// objectList1.add(indentQty);
						}
						else{
							//objectList1.remove(object);

						}

					}
					else if((""+object[8]).equalsIgnoreCase("SL")){
						int mmf=((BigDecimal)object[3]).intValue();
						int closingStock=((BigDecimal)object[4]).intValue();
						int mmfForIndent=6*mmf;
						if(mmfForIndent>closingStock)
						{
							indentQty=mmfForIndent-closingStock;
							objectList2.add(object);
							// objectList1.add(indentQty);
						}
						else{
							//objectList1.remove(object);

						}



					}
					else if((""+object[8]).equalsIgnoreCase("LL")){

						int mmf=((BigDecimal)object[3]).intValue();
						int closingStock=((BigDecimal)object[4]).intValue();
						int mmfForIndent=9*mmf;
						if(mmfForIndent>closingStock)
						{
							indentQty=mmfForIndent-closingStock;
							objectList2.add(object);
							// objectList1.add(indentQty);
						}
						else{
							//objectList1.remove(object);

						}



					}

					if(objectList2.size()==0)
					{
						String msg="No Record Found. !";
						map.put("msg", msg);
					}

				}}
			else if(section !=0  && !lifeType.equals("a")){
				itemList=session.createCriteria(MasStoreItem.class).add(
						Restrictions.eq("SelfLife", lifeType)).add(
								Restrictions.eq("Status", "y")).list();
				String query="select smdm.MMF_FOR_THE_YEAR, msi.NOMENCLATURE,msi.PVMS_NO , smdt.MMF_IN_QTY,nvl(sum(sibs.CLOSING_STOCK),0),msic.ITEM_UNIT_NAME "
					+",msi.item_id, mss.SECTION_Name,msi.SELF_LIFE from  store_mmf_department_t smdt"
					+" left outer join mas_store_item msi on smdt.ITEM_ID=msi.ITEM_ID"
					+" left outer join store_mmf_department_m smdm on smdt.STORE_MMF_DEPARTMENT_M_ID=smdm.ID"
					+" left outer join store_item_batch_stock sibs on smdt.ITEM_ID=sibs.ITEM_ID  "
					+" left outer join MAS_STORE_ITEM_CONVERSION  msic on msi.ITEM_CONVERSION_ID= msic.ITEM_CONVERSION_ID"
					+" left outer join mas_store_section mss on msi.SECTION_ID=mss.SECTION_ID"
					+" where mss.SECTION_ID ='"
					+section+"'"
					+" and msi.SELF_LIFE= '"
					+lifeType +"'"
					+" and smdm.MMF_FOR_THE_YEAR='"
					+year+"'"
					+" and sibs.hospital_id='"
					+ hospitalId+"'"
					+" and sibs.department_id='"
					+ deptId+"'"
					//+" and smdm.MMF_STORE_TYPE='e' and smdm.STORE_WARD_DEPT='"
					+"  and smdm.STORE_WARD_DEPT='"
					+ deptId+"'"
					+" and smdm.hospital_id='"
					+ hospitalId+"'"
					+" group by smdm.MMF_FOR_THE_YEAR, msi.NOMENCLATURE,msi.PVMS_NO , smdt.MMF_IN_QTY,msic.ITEM_UNIT_NAME,msi.item_id,mss.SECTION_Name,msi.SELF_LIFE";

				objectList1 = (List) session.createSQLQuery(query).list();


				for (Iterator itr1 = objectList1.iterator(); itr1.hasNext();) {
					Object[] object = (Object[]) itr1.next();
					if((""+object[8]).equalsIgnoreCase("SLB"))
					{
						int mmf=((BigDecimal)object[3]).intValue();
						int closingStock=((BigDecimal)object[4]).intValue();
						int mmfForIndent=6*mmf;
						if(mmfForIndent>closingStock)
						{
							indentQty=mmfForIndent-closingStock;
							objectList2.add(object);
							// objectList1.add(indentQty);
						}
						else{
							//objectList1.remove(object);

						}

					}
					else if((""+object[8]).equalsIgnoreCase("SL")){
						int mmf=((BigDecimal)object[3]).intValue();
						int closingStock=((BigDecimal)object[4]).intValue();
						int mmfForIndent=6*mmf;
						if(mmfForIndent>closingStock)
						{
							indentQty=mmfForIndent-closingStock;
							objectList2.add(object);
							// objectList1.add(indentQty);
						}
						else{
							//objectList1.remove(object);

						}



					}
					else if((""+object[8]).equalsIgnoreCase("LL")){

						int mmf=((BigDecimal)object[3]).intValue();
						int closingStock=((BigDecimal)object[4]).intValue();
						int mmfForIndent=9*mmf;
						if(mmfForIndent>closingStock)
						{
							indentQty=mmfForIndent-closingStock;
							objectList2.add(object);
							// objectList1.add(indentQty);
						}
						else{
							//objectList1.remove(object);

						}

					}

					if(objectList2.size()==0)
					{
						String msg="No Record Found. !";
						map.put("msg", msg);
					}

				}}

			// for create indent
			sectionList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasStoreSection ");

			masStoreAirForceDepotList = getHibernateTemplate()
			.find("from jkt.hms.masters.business.MasStoreAirForceDepot as md where md.Status = 'y'");
			storeFyDocumentNoList = (List) getHibernateTemplate()
			.find("from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"
					+ deptId + "'and sfdn.Hospital.Id="+hospitalId);
			for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
				if (storeFyDocumentNo.getIndentToDepotNo() != null) {
					no = ("" + storeFyDocumentNo.getIndentToDepotNo());
					no = getMaxNo(no);
				} else {
					no = getMaxNo("");
				}

			}

			// javed khan 28 march
			List<StoreIndentM> searchStoreIndentMList = new ArrayList<StoreIndentM>();
			Session session = getSession();
			searchStoreIndentMList = session.createCriteria(
					StoreIndentM.class).add(
							Restrictions.eq("Status", "o"))
							.add(Restrictions.eq("Department.Id", deptId))
							.add(Restrictions.eq("Hospital.Id", hospitalId))
							.addOrder(Order.desc("Id")).list();


			map.put("searchStoreIndentMList", searchStoreIndentMList);

			// javed khan 28 march

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("expiryDate", expiryDate);
		map.put("manufacturingDate",manufacturingDate);
		map.put("manufacturer", manufacturer);
		map.put("mId", mId);
		map.put("sectionList", sectionList);
		map.put("objectList2",objectList2);
		map.put("objectList1",objectList1);
		map.put("maxIndentNo", no);
		map.put("masStoreAirForceDepotList", masStoreAirForceDepotList);
		return map;
	}

	public Map<String, Object> showLoanout(int deptId, int hospitalId) {
		Map<String, Object> map = new HashMap<String, Object>();
		//List<StoreOpPatientIssueT> pendingLoanoutList = new ArrayList<StoreOpPatientIssueT>();
		List<PatientPrescriptionHeader> pendingLoanoutList = new ArrayList<PatientPrescriptionHeader>();
		Session session = getSession();
		/*pendingLoanoutList = session.createCriteria(
						StoreOpPatientIssueT.class).add(
						Restrictions.eq("OpIssueType", "loanOut"))
						.list();*/
		List al=new ArrayList();
		String sql=" select patient_prescription_header.prescription_id, patient_prescription_details.lo_item from patient_prescription_header "+
		" left outer join  patient_prescription_details patient_prescription_details on patient_prescription_header.prescription_id=patient_prescription_details.prescription_id"
		+ " where  patient_prescription_details.lo_item='n' and patient_prescription_header.HOSPITAL_ID = '"
		+hospitalId+"'"+
		" order by patient_prescription_header.prescription_id" ;
		al=session.createSQLQuery(sql).list();
		Iterator itr=al.iterator();
		String chk="";
		while(itr.hasNext()){
			Object[] tuple = (Object[]) itr.next();
			if(!chk.equalsIgnoreCase(tuple[0].toString())){
				Criteria  ppc=session.createCriteria(PatientPrescriptionHeader.class).add(Restrictions.eq("Id", Integer.parseInt(tuple[0].toString())));
				List<PatientPrescriptionHeader>ppl=ppc.list();
				PatientPrescriptionHeader pph=ppl.get(0);
				pendingLoanoutList.add(pph);
			}
			chk=tuple[0].toString();
		}
		/**
		 * Code By Ritu 
		 * Date 02-11-2012
		 */
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		departmentList = session.createCriteria(MasDepartment.class).add(Restrictions.eq("Status", "y")).addOrder(Order.asc("DepartmentName")).list();
		List<MasEmployee> employeeList=new ArrayList<MasEmployee>();
		employeeList = session.createCriteria(MasEmployee.class).add(Restrictions.eq("Status", "y")).addOrder(Order.asc("FirstName")).list();


		map.put("pendingLoanoutList", pendingLoanoutList);
		map.put("departmentList", departmentList);
		map.put("employeeList", employeeList);
		return map;
	}

	public String consignerName(int sup_id,String jsp) {
		Map<String, Object> map = new HashMap<String, Object>();
		String conName="";
		List<MasStoreAirForceDepot> depotList = new ArrayList<MasStoreAirForceDepot>();
		List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier>();
		List<MasUnit> unitList = new ArrayList<MasUnit>();
		Session session = getSession();
		if(jsp.equalsIgnoreCase("grn")){
			depotList = session.createCriteria(MasStoreAirForceDepot.class).add(
					Restrictions.eq("id", sup_id)).list();
			conName=depotList.get(0).getAirForceDepotName();
		}
		
		// Add by vinay
		
		else if(jsp.equalsIgnoreCase("crvOtherUnit")){
			unitList  = session.createCriteria(MasUnit.class).add(
					Restrictions.eq("id", sup_id)).list();
			conName=unitList.get(0).getUnitName()+", "+unitList.get(0).getUnitAddress();

		}
		else if(jsp.equalsIgnoreCase("crvLocalPurchase")){
			supplierList  = session.createCriteria(MasStoreSupplier.class).add(
					Restrictions.eq("id", sup_id)).list();
			conName=supplierList.get(0).getSupplierName()+", "+supplierList.get(0).getAddress1();

		}

		return conName;
	}

	public Map<String, Object> getDepartmentList() {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasDepartment> deptList = session.createCriteria(MasDepartment.class)
				.add(Restrictions.eq("Status", "y").ignoreCase())
				.add(Restrictions.eq("Division.Id", 17))
				.addOrder(Order.asc("DepartmentName")).list();
		map.put("deptList",deptList);
		return map;
	}

	public Map<String, Object> showPrescriptionDetails(int precriptionId) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<PatientPrescriptionHeader> prescriptionList = session.createCriteria(PatientPrescriptionHeader.class).
		add(Restrictions.eq("Id", precriptionId)).list();
		map.put("prescriptionList", prescriptionList);
		return map;
	}
	public Map<String, Object> showOPDPatientLoanOutIssueGrid(Map map){
		List listOfItemsInStock = new ArrayList();
		List opdIssueNo = new ArrayList();
		List itemList = new ArrayList();
		List hinNoList = new ArrayList();
		List issueNoList = new ArrayList();
		List<StoreItemBatchStock> listOfItemsStock = new ArrayList<StoreItemBatchStock>();
		List<StoreItemBatchStock> listOfItemsStockInStock = new ArrayList<StoreItemBatchStock>();
		List<MasEmployee> empList = new ArrayList<MasEmployee>();
		Map mapItem=new HashMap();
		Session session = (Session) getSession();
		int deptId = (Integer) map.get("deptId");
		String hinNo = "";
		String opdIssuenoIncremented = "";
		int prescriptionId = 0;
		if(map.get("prescriptionId") != null){
			prescriptionId = (Integer)map.get("prescriptionId");
		}
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (map.get("hinNo") == null
					&& Integer.parseInt(map.get("hinId").toString()) != 0) {
				int hinId = (Integer) map.get("hinId");
				hinNoList = session.createQuery(
						"select p from Patient as p where p.Id=" + hinId)
						.list();
				Patient patient = (Patient) hinNoList.get(0);
				hinNo = patient.getHinNo();
			} else {
				hinNo = (String) map.get("hinNo");
			}

			listOfItemsInStock = session.createQuery("select sib.Item.Id,sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="+deptId+" group by sib.Item.Id ").list();

			opdIssueNo = session.createQuery(
					"select syd from StoreFyDocumentNo as syd where syd.Department.Id="
					+ deptId).list();
			// issueNoList = session.createQuery("select sim from StoreIpIssueM
			// as sim where sim.Department.Id="+deptId+"and
			// sim.IssueType='w'").list();
			empList = session
			.createQuery(
					"select emp from MasEmployee  as emp where emp.EmpCategory.Id=" + 1)
					.list();
			Iterator iterator = listOfItemsInStock.iterator();
			if (map.get("buttonFlag") != null) {
				String issueNo = (String) map.get("issueNo");
				opdIssuenoIncremented = issueNo;
				// opdIssueNo = session.createQuery("select syd from
				// StoreFyDocumentNo as syd where
				// syd.OpdIssueNo="+opdIssuenoIncremented).list();
				// opdIssueNo=
				// session.createCriteria(StoreFyDocumentNo.class).add(Restrictions.eq("OpdIssueNo",
				// opdIssuenoIncremented)).list();
			} else {
				// opdIssueNo = session.createQuery("select syd from
				// StoreFyDocumentNo as syd where
				// syd.Department.Id="+deptId).list();
				StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) opdIssueNo
				.get(0);
				String opdIssueNoFromDB = storeFyDocumentNo.getOpdIssueNo();
				opdIssuenoIncremented = getMaxNo(opdIssueNoFromDB);
			}

			List<PatientPrescriptionDetails>  presList = new ArrayList<PatientPrescriptionDetails>();
			List<Object[]> stockInHandList = new ArrayList<Object[]>();
			if(prescriptionId != 0){
				String status ="c";
				presList = session.createCriteria(PatientPrescriptionDetails.class).createAlias("Prescription", "presc")
				.add(Restrictions.eq("presc.Id", prescriptionId))
				.add(Restrictions.eq("LoItem","n"))
				.list();

				if (presList != null && presList.size() > 0) {
					map.put("presList", presList);
					for (PatientPrescriptionDetails patientPrescriptionDetails : presList) {
						List<Object[]> batchStockList = new ArrayList<Object[]>();
						batchStockList = session.createCriteria(StoreItemBatchStock.class).createAlias("Item", "item")
						.createAlias("Department", "dept").add(Restrictions.eq("dept.Id", deptId))
						.add(Restrictions.eq("item.Id", patientPrescriptionDetails.getItem().getId()))
						.add(Restrictions.isNotNull("ExpiryDate"))
						.setProjection(Projections.projectionList().add(Projections.property("item.Id")).add(Projections.groupProperty("item.Id"))
								.add(Projections.sum("ClosingStock"))).list();
						if(batchStockList.size()>0)
							stockInHandList.add(batchStockList.get(0));
						List BatchList=new ArrayList();
						String query="select sibs.BATCH_NO from store_item_batch_stock sibs where sibs.ITEM_ID="+patientPrescriptionDetails.getItem().getId()+"and sibs.CLOSING_STOCK>0 and sibs.DEPARTMENT_ID="+deptId+" group by sibs.BATCH_NO";
						BatchList=session.createSQLQuery(query).list();
						mapItem.put(patientPrescriptionDetails.getItem().getId(),BatchList);
					}
					map.put("stockInHandList", stockInHandList);
				}
				List<StoreOpPatientIssueM> issueList = new ArrayList<StoreOpPatientIssueM>();
				issueList = session.createCriteria(StoreOpPatientIssueM.class).createAlias("PatientPrescriptionHeader", "pph")
				.add(Restrictions.eq("pph.Id", prescriptionId)).list();
				map.put("issueList", issueList);
			}

			listOfItemsStock = session
			.createQuery(
					"select sib.Item.Id,sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="
					+ deptId + "group by sib.Item.Id ").list();
			listOfItemsStockInStock=session.createQuery(
					"select sib.Item.Id,sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="
					+ "24" + "group by sib.Item.Id ").list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("opdIssueNo", opdIssueNo);
		map.put("listOfItemsStock", listOfItemsStock);
		map.put("listOfItemsStockInStock",listOfItemsStockInStock);
		map.put("empList", empList);
		map.put("hinNo", hinNo);
		map.put("opdIssuenoIncremented", opdIssuenoIncremented);
		map.put("mapItem",mapItem);
		return map;
	}


	// javed for turn over
	public Map<String, Object> getItemListForTurnOverByAutocomplete(
			Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreItem> itemList1 = new ArrayList<MasStoreItem>();
		session = (Session) getSession();
		//String pvmsNo = null;
		//Box box = (Box) dataMap.get("box");
		int deptId = 0;
		int hospitalId = 0;
		deptId = Integer.parseInt("" + dataMap.get("deptId"));
		hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		List objectList = new ArrayList();
		try {
			String str = (String) dataMap.get("autoHint");
			str=str.toUpperCase()+ "%";
			String qry = "SELECT item_id FROM store_item_batch_stock where department_id="
				+ deptId +" and hospital_id="+hospitalId;
			objectList = (List) session.createSQLQuery(qry).list();
			if (objectList.size() != 0) {
				List<BigDecimal> objectNewList = new ArrayList<BigDecimal>();
				String sql="";
				for (int i=0;i<objectList.size();i++) {
					if(i<100){
						if(i==0){
							sql=""+objectList.get(i);
						}else{
							sql=sql+" , "+objectList.get(i);
						}
					}
				}
				/*Criteria c = session.createCriteria(MasStoreItem.class)
							.add(Restrictions.like("Nomenclature", str))

							.add(Restrictions.in("Id", objectList));
					c.setFirstResult(0);
					c.setMaxResults(10);
					itemList = c.list();*/
				/*if(sql!=""){
						itemList=getHibernateTemplate().find("select item from jkt.hms.masters.business.MasStoreItem as item where upper(item.Nomenclature) like '"+str+"' and item.Id not in("+sql+") and rownum < 15");
					}
					else{*/

				// camment by javed khan
				/*
				 * Commented and coded By Ujjwal Kashyap For Sql Injection
				 */
				//itemList=getHibernateTemplate().find("select item from jkt.hms.masters.business.MasStoreItem as item where upper(item.Nomenclature) like '"+str+"'");
				itemList=getHibernateTemplate().find("select item from jkt.hms.masters.business.MasStoreItem as item where upper(item.Nomenclature) like '"+str+"' and item.Status='y' and item.ItemType.Id='2' and item.Hospital.Id='"+hospitalId+"'");
				Criteria c= session.createCriteria(MasStoreItem.class).add(
						Restrictions.eq("Status", "y")).add(Restrictions.eq("Hospital.Id", hospitalId)).
						add(Restrictions.eq("ItemType.Id", 2)).add(Restrictions.like("Nomenclature",str).ignoreCase());
				itemList=c.list();     
				Criteria c1= session.createCriteria(MasStoreItem.class).add(
						Restrictions.eq("Status", "y")).add(Restrictions.eq("Hospital.Id", hospitalId)).
						add(Restrictions.eq("ItemType.Id", 1)).add(Restrictions.like("Nomenclature",str).ignoreCase());


				itemList1=c1.list();

				/*						itemList1=getHibernateTemplate().find("select item from jkt.hms.masters.business.MasStoreItem as item where upper(item.Nomenclature) like '"+str+"' and item.Status='y' and item.ItemType.Id='1'");
				 */						itemList.addAll(itemList1);

				 //}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		map.put("objectList", objectList);
		return map;
	}

	public List<MasStoreSupplier>  getSupplierName(int hospitalId) {
		Session session = (Session) getSession();
		List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier> ();
		supplierList=session.createCriteria(MasStoreSupplier.class).add(Restrictions.eq("Hospital.Id", hospitalId)).list();
		return supplierList;
	}
	// javed khan
	public Map<String, Object> getUnit(Map<String, Object> dataMap) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		String type="";
		// add by javed khan
		int hospitalId=0;
		if(dataMap.get("hospitalId")!= null){
			hospitalId=Integer.parseInt((""+dataMap.get("hospitalId")));

		}
		if(dataMap.get("type")!= null){
			type=(String)dataMap.get("type");

		}
		if(type.equals("UIssue")){
			List<MasUnit> unitList = session.createCriteria(MasUnit.class).
			add(Restrictions.eq("Status", "y")).list();
			map.put("unitList", unitList);}
		else if(type.equals("DIssue")){
			List<MasDepartment> departList=	 session.createCriteria(MasDepartment.class).
			add(Restrictions.eq("Status", "y")).addOrder(Order.asc("DepartmentName"))
			//add(Restrictions.eq("Hospital.Id", hospitalId))
			.list(); // add by javed khan
			map.put("departList", departList);
		}
		employeeList = getHibernateTemplate()
		.find("from jkt.hms.masters.business.MasEmployee as me  where me.Status='y' and  me.Hospital.Id ="
				+hospitalId+"order by FirstName asc"); // add by javed khan
		map.put("type", type);
		map.put("employeeList", employeeList);
		return map;
	}

	// javed khan
	public Map<String, Object> getAU() {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		String type="";


		List<MasStoreItemConversion> AUList=session.createCriteria(MasStoreItemConversion.class).
		add(Restrictions.eq("Status", "y")).list();
		map.put("AUList", AUList);

		List<MasManufacturer> manuList=session.createCriteria(MasManufacturer.class).
		add(Restrictions.eq("Status", "y")).list();
		map.put("manuList", manuList);

		return map;
	}




	public Map<String, Object> showPendingDefectiveItemsJsp(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();

		List<StoreDefectiveDrugT> pendingDefectiveList = new ArrayList<StoreDefectiveDrugT>();
		List<MasStoreItem> itemList1 = new ArrayList<MasStoreItem>();
		List<StoreIndentT> storeindentTList = new ArrayList<StoreIndentT>();
		List<StoreSetup> storeSetupList = new ArrayList<StoreSetup>();
		String message = "No Items Found (or) MMF not available";

		session = (Session) getSession();
		String pvms = null;
		String nomenclature = null;
		String strength = null;
		String au = null;
		String manufacturer="";
		String brand="";
		String batchNo="";
		Date dom=null;
		Date doe=null;
		BigDecimal defectQty = null;
		int itemId = 0;
		int stockQty=0;
		int storeDefctDrugMId=0;
		int hospitalId=box.getInt("hospitalId");
		String group_id = null;

		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector tenderTItems = new Vector();
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;

		Map dateMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) dateMap.get("currentDate");
		String mmfDate = date.substring(6, date.length());
		int mmfYear = Integer.parseInt(mmfDate);
		String mmfType = "";
		int stockId=0;
		int month, year;
		Calendar cal = Calendar.getInstance();
		Calendar calendar = Calendar.getInstance();
		month = calendar.get(Calendar.MONTH) + 1;


		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);


			Criteria crit = session.createCriteria(StoreDefectiveDrugT.class)
			.createAlias("DefectM", "defectM")
			.add(Restrictions.eq("defectM.Hospital.Id", hospitalId))
			.add(Restrictions.eq("defectM.Status", "y"));

			pendingDefectiveList=crit.list();



			for(StoreDefectiveDrugT storeDefectiveDrugT:pendingDefectiveList)
			{
				defectQty = (BigDecimal) storeDefectiveDrugT.getDefectQty();


				try {
					itemId = storeDefectiveDrugT.getItem().getId();
				} catch (Exception e) {
					itemId = 0;
				}

				try {
					nomenclature = storeDefectiveDrugT.getItem().getNomenclature();
				} catch (Exception e) {
					nomenclature = "";
				}

				try {
					au = storeDefectiveDrugT.getItem().getItemConversion().getPurchaseUnit()
					.getUnitName();
				} catch (Exception e) {
					au = "";
				}

				try {
					manufacturer = storeDefectiveDrugT.getManufacturedBy().getManufacturerName();
				} catch (Exception e) {
					manufacturer = "";
				}

				try {
					brand = storeDefectiveDrugT.getBrand().getBrandName();
				} catch (Exception e) {
					brand = "";
				}

				try {
					batchNo = storeDefectiveDrugT.getBatchNo().getBatchNo();
				} catch (Exception e) {
					batchNo = "";
				}

				try {
					stockId = storeDefectiveDrugT.getBatchNo().getId();
				} catch (Exception e) {
					stockId = 0;
				}


				try {
					dom = storeDefectiveDrugT.getManufactureringDate();
				} catch (Exception e) {
					dom = null;
				}

				try {
					doe = storeDefectiveDrugT.getExpiryDate();
				} catch (Exception e) {
					doe = null;
				}


				try {
					storeDefctDrugMId = storeDefectiveDrugT.getDefectM().getId();
				} catch (Exception e) {
					storeDefctDrugMId = 0;
				}


				hData = new HashMap<String, Object>();
				hData.put("storeDefctDrugMId", storeDefctDrugMId);
				hData.put("itemId", itemId);
				hData.put("nomenclature", nomenclature);
				hData.put("au", au);
				hData.put("manufacturer", manufacturer);

				hData.put("brand", brand);
				hData.put("defectQty", defectQty);
				hData.put("batchNo", batchNo);
				hData.put("dom", dom);
				hData.put("doe", doe);
				hData.put("stockId", stockId);
				vResult.add(hData);


			}

			if (vResult.size() > 0) {
				testPageData = new HashMap[vResult.size()];
				vResult.copyInto(testPageData);
			}

			try {
				pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
						box);
			} catch (Exception e) {
				e.printStackTrace();
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("message", message);
		map.put("pagedArray", pagedArray);
		map.put("groupId", box.getInt("groupId"));
		map.put("subGroupId", box.getInt("subGroupId"));
		map.put("search_text",box.get("search_text"));
		map.put("pvms",box.get("pvms"));
		map.put("showAllGroupItem",box.getInt("showAllGroupItem"));
		return map;
	}



	public Map<String, Object> submitPendingDefectiveItemsJsp(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();

		MasStoreGroup masStoreGroup = null;

		StoreDefectiveDrugM storeDefectiveDrugM=new StoreDefectiveDrugM();
		StoreTenderInvitaLetterToVender storeTenderInvitaletterToVender = null;
		MasStoreSupplier masStoreSupplier = null;
		Transaction transaction = null;
		Session session = (Session) getSession();
		int defectMId=0;
		StoreTenderToSupplier storeTenderToSupplier = null;
		String date4MySQL = "";
		java.sql.Date followUpDate1 = null;
		try {


			transaction = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");

			defectMId=box.getInt(ENTRY_ID);
			Vector storeFollowUpId = box.getVector("storeFollowUpId");
			Vector followUpDate = box
			.getVector("followUpDate");

			Vector referenceNo=box.getVector("referenceNo");
			Vector followUpRemarks=box.getVector("followUpRemarks");

			int stockMId=0;


			for (int i = 0; i < followUpDate.size(); i++) {
				if (storeFollowUpId.get(i).toString().contains("y"))

				{
					StoreFollowupDetails storeFollowupDetails =new StoreFollowupDetails();
					storeDefectiveDrugM.setId(defectMId);
					storeFollowupDetails.setDefectM(storeDefectiveDrugM);
					try{
						date4MySQL = formatterOut.format(formatterIn.parse(followUpDate.get(i).toString()));
						followUpDate1 = java.sql.Date.valueOf(date4MySQL);
						storeFollowupDetails.setFollowUpDate(followUpDate1);
					}
					catch(Exception e)
					{

					}

					storeFollowupDetails.setReferenceNo(referenceNo.get(i).toString());
					storeFollowupDetails.setRemarks(followUpRemarks.get(i).toString());
					hbt.save(storeFollowupDetails);

				}
			}
			transaction.commit();
		} catch (HibernateException e) {
			e.printStackTrace();
			if (transaction != null)
				transaction.rollback();
		}



		return map;
	}

	/**************** Method For Fill Filed By Tirath	*********************/


	public Map<String, Object> getPatientDetailsForPatientDirectPriscription(
			Map<String, Object> dataMap) {

		session = (Session) getSession();
		String pvms = null;
		List<Visit> patientDetailsList = new ArrayList<Visit>();
		List<Visit> patientDetailsList1 = new ArrayList<Visit>();

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List objectList = new ArrayList();
		Map<String, Object> utilMap = new HashMap<String, Object>();	
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		Date visitDate = null;

		visitDate = HMSUtil.convertStringTypeDateToDateType(utilMap.get("currentDate").toString());
		int deptId = 0;
		int hinId=0;
		BigDecimal stockIn = null;
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		try {
			hinId = (Integer)dataMap.get("hinId");
			patientDetailsList = session.createCriteria(Visit.class)
			.createAlias("Hin", "hin")
			.add(Restrictions.eq("hin.Id",hinId )).add(Restrictions.eq("VisitDate",visitDate))
			.addOrder(Order.desc("Id")).list();
		}catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDetailsList",patientDetailsList);
		return map;
	}



	public Map<String, Object> showDirectPriscriptionJsp(
			Map<String, Object> dataMap) {

		session = (Session) getSession();
		String pvms = null;
		List opdIssueNo = new ArrayList();
		List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();


		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		String opdIssuenoIncremented = "";
		StoreFyDocumentNo storeFyDocumentNo=null;
		List objectList = new ArrayList();
		int deptId = 0;
		int hospitalId=0;
		String serviceNo="";
		BigDecimal stockIn = null;
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));

		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));

		}
		try {
			serviceNo = (String)dataMap.get("serviceNo");
			frequencyList = session.createCriteria(MasFrequency.class)
			.add(Restrictions.eq("Status","y" )).list();
			opdIssueNo = session.createQuery("select syd from StoreFyDocumentNo as syd where syd.Department.Id="+ deptId+"and syd.Hospital.Id='"+hospitalId+"'").list();
			storeFyDocumentNo = (StoreFyDocumentNo) opdIssueNo.get(0);
			String opdIssueNoFromDB = storeFyDocumentNo.getOpdIssueNo();
			opdIssuenoIncremented = getMaxNo(opdIssueNoFromDB);
		} catch (HibernateException e) 
		{
			e.printStackTrace();
		}
		map.put("frequencyList",frequencyList);
		map.put("deptId",deptId);
		map.put("opdIssuenoIncremented",opdIssuenoIncremented);
		map.put("storeFyDocumentNo",storeFyDocumentNo);
		map.put("opdIssueNo",opdIssueNo);
		return map;
	}
	
	
	@Override
	public Map<String, Object> showIndentHistoryJsp(Map<String, Object> dataMap) {
		List<StoreInternalIndentM> internalIndentMs = new ArrayList<StoreInternalIndentM>();
		session = (Session)getSession();
		Criteria indentMs = session.createCriteria(StoreInternalIndentM.class, "indentM").add(Restrictions.eq("indentM.Department.Id", (Integer)dataMap.get("deptId"))).addOrder(Order.desc("indentM.DemandDate"));
		if(dataMap.get("fromDate")!=null && dataMap.get("toDate")!=null){
			indentMs.add(Restrictions.between("indentM.DemandDate", HMSUtil.convertStringTypeDateToDateType((String)dataMap.get("fromDate")), HMSUtil.convertStringTypeDateToDateType((String)dataMap.get("toDate"))));
		}
		internalIndentMs = indentMs.addOrder(Order.desc("indentM.DemandNo")).list();
		dataMap.put("internalIndentMs", internalIndentMs);
		return dataMap;
	}
	@Override
	public Map<String, Object> rcToVendor(Map<String, Object> dataMap) {
		List<Object[]> rcList = new ArrayList<Object[]>();
		session = (Session)getSession();
		Date currentDate=new Date();
		int hospitalId = 0;
		int deptId = 0;
		List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier>();
		Date fromDate = new Date();
		Date toDate = new Date();
		if(dataMap.get("hospitalId")!=null)
			hospitalId = Integer.parseInt(dataMap.get("hospitalId").toString());
		if(dataMap.get("deptId")!=null)
			deptId = Integer.parseInt(dataMap.get("deptId").toString());
		if(dataMap.get("fromDate")!=null)
			fromDate = HMSUtil.convertStringTypeDateToDateType((String)dataMap.get("fromDate"));
		 System.out.println("datefrom"+fromDate);
		if(dataMap.get("toDate")!=null)
			toDate = HMSUtil.convertStringTypeDateToDateType((String)dataMap.get("toDate"));
	/*	rcList = (List<Object[]>)session.createSQLQuery("SELECT msi.item_id, msi.pvms_no, msi.nomenclature, sum(ppd.rc_qty) as rc_qty FROM patient_prescription_details ppd inner join patient_prescription_header pph on ppd.prescription_id=pph.prescription_id inner join mas_store_item msi on ppd.item_id=msi.item_id where "
				+ "pph.prescription_date between '"+fromDate+"' and '"+toDate+"' and rc_qty>0 and ipd_rc_header_id is null	group by msi.item_id, msi.pvms_no, msi.nomenclature ").list();
		*/
		rcList = session.createCriteria(RcRequestDetails.class)
				.createAlias("Header", "h")
				.createAlias("Item", "i")
				.add(Restrictions.between("h.RequestDate", fromDate, toDate))
				/*.add(Restrictions.gt("ReqQty",0.0))*/
				.add(Restrictions.isNull("RcHeader"))
				.add(Restrictions.eq("h.Status", "o").ignoreCase())
				.add(Restrictions.eq("h.ToDepartment.Id", deptId))
				.setProjection(Projections.projectionList()                        
                        .add(Projections.property("i.Id"))
                        .add(Projections.property("i.PvmsNo"))
                        .add(Projections.property("i.Nomenclature"))
                        .add(Projections.sum("ReqQty"))                          
                        .add(Projections.groupProperty("i.Id"))
                        .add(Projections.groupProperty("i.PvmsNo"))
                        .add(Projections.groupProperty("i.Nomenclature"))
                ).list();
		//code starts for concatnation of from departments 
		List<RcRequestDetails> rRDList = new ArrayList<RcRequestDetails>();
		rRDList = session.createCriteria(RcRequestDetails.class)
		.createAlias("Header", "h")
		.createAlias("Item", "i")
		.add(Restrictions.between("h.RequestDate", fromDate, toDate))
		/*.add(Restrictions.gt("ReqQty",0.0))*/
		.add(Restrictions.isNull("RcHeader"))
		.add(Restrictions.eq("h.Status", "o").ignoreCase())
		.add(Restrictions.eq("h.ToDepartment.Id", deptId)).list();
		
		for(int i=0; i<rcList.size(); i++)
		{
			rcList.get(i)[4]="";
			for(RcRequestDetails rRD: rRDList)
			{
				
				if(rRD.getItem().getId().intValue() == ((Integer)rcList.get(i)[0]).intValue())
				{
					rcList.get(i)[4] += (rRD.getFromDepartments()!=null?rRD.getFromDepartments()+", ":"");
				}
			}
			if(!rcList.get(i)[4].toString().equals(""))
			{
				rcList.get(i)[4]=rcList.get(i)[4].toString().substring(0, (rcList.get(i)[4].toString().length()-2));
			}
			
		}
		
		
		// code ends for concatnation of from departments
		supplierList = session.createCriteria(MasStoreSupplier.class)
				.add(Restrictions.eq("Status", "y").ignoreCase())
				.add(Restrictions.eq("Hospital.Id", hospitalId)).list();
		
		dataMap.put("rcList", rcList);
		dataMap.put("supplierList", supplierList);				
		return dataMap;
	}
	
	@Override
	public Map<String, Object> rcListSubmitUntilReceive(Box box) {
		List<RcHeader> rcList = new ArrayList<RcHeader>();
	
		Map<String,Object> datamap = new HashMap<String,Object>();
		List<RcRequestHeader> requestHeaderList = new ArrayList<RcRequestHeader>();
		
		Session session = (Session) getSession();
		int pagingSize = 10;
		int pageNo = 1;		
				
		String ProjectionType = ""; 
		String RequestStatus = "" ; // Awaiting/Saved/Approved
		
		if (box.getString("PN") != null)
			pageNo = Integer.parseInt(box.getString("PN"));
				
		int deptId = box.getInt("deptId");
		int hospitalId = box.getInt("hospitalId");
		
		Criteria cr = session.createCriteria(RcHeader.class)							
				.add(Restrictions.eq("Status", "s").ignoreCase())
				.add(Restrictions.eq("Department.Id", deptId));	
		rcList = cr.list();
		
	
			
		List totalMatches = cr.list();
		cr = cr.setFirstResult(pagingSize * (pageNo - 1));
		cr = cr.setMaxResults(pagingSize);
		

		System.out.println("Total records=" + totalMatches.size());
		int totalRecords = totalMatches.size();
		totalMatches.clear();

		datamap.put("rcList", rcList);
		datamap.put("totalRecords", totalRecords);

		return datamap;
	}
	
	@Override
	public Map<String, Object> waitingForRateContract(Map<String, Object> dataMap) {
		List<Object[]> rcList = new ArrayList<Object[]>();
		session = (Session)getSession();
		Date currentDate=new Date();
		int hospitalId = 0;
		List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier>();
		Date fromDate = new Date();
		Date toDate = new Date();
		if(dataMap.get("hospitalId")!=null)
			hospitalId = Integer.parseInt(dataMap.get("hospitalId").toString());
		if(dataMap.get("fromDate")!=null)
			fromDate = HMSUtil.convertStringTypeDateToDateType((String)dataMap.get("fromDate"));
		 System.out.println("datefrom"+fromDate);
		if(dataMap.get("toDate")!=null)
			toDate = HMSUtil.convertStringTypeDateToDateType((String)dataMap.get("toDate"));
	/*	rcList = (List<Object[]>)session.createSQLQuery("SELECT msi.item_id, msi.pvms_no, msi.nomenclature, sum(ppd.rc_qty) as rc_qty FROM patient_prescription_details ppd inner join patient_prescription_header pph on ppd.prescription_id=pph.prescription_id inner join mas_store_item msi on ppd.item_id=msi.item_id where "
				+ "pph.prescription_date between '"+fromDate+"' and '"+toDate+"' and rc_qty>0 and ipd_rc_header_id is null	group by msi.item_id, msi.pvms_no, msi.nomenclature ").list();
		*/
		rcList = session.createCriteria(PatientPrescriptionDetails.class)
				.createAlias("Prescription", "ph")
				.createAlias("Item", "i")
				.add(Restrictions.between("ph.PrescriptionDate", fromDate, toDate))
				.add(Restrictions.gt("RcQty",0))
				.add(Restrictions.isNull("RcHeader"))
				.setProjection(Projections.projectionList()                        
                        .add(Projections.property("i.Id"))
                        .add(Projections.property("i.PvmsNo"))
                        .add(Projections.property("i.Nomenclature"))
                        .add(Projections.sum("RcQty"))  
                        .add(Projections.groupProperty("i.Id"))
                        .add(Projections.groupProperty("i.PvmsNo"))
                        .add(Projections.groupProperty("i.Nomenclature"))
                ).list();
		
		supplierList = session.createCriteria(MasStoreSupplier.class)
				.add(Restrictions.eq("Status", "y").ignoreCase())
				.add(Restrictions.eq("Hospital.Id", hospitalId)).list();
		
		dataMap.put("rcList", rcList);
		dataMap.put("supplierList", supplierList);				
		return dataMap;
	}
	
	@Override
	public Map<String, Object> showWardPrescription(Map<String, Object> dataMap) {
		List<StoreInternalIndentM> internalIndentMs = new ArrayList<StoreInternalIndentM>();
		session = (Session)getSession();
		/*Criteria indentMs = session.createCriteria(StoreInternalIndentM.class, "indentM").addOrder(Order.desc("indentM.DemandDate"));
		if(dataMap.get("fromDate")!=null && dataMap.get("toDate")!=null){
			indentMs.add(Restrictions.between("indentM.DemandDate", HMSUtil.convertStringTypeDateToDateType((String)dataMap.get("fromDate")), HMSUtil.convertStringTypeDateToDateType((String)dataMap.get("toDate"))));
		}
		internalIndentMs = indentMs.list();
		dataMap.put("internalIndentMs", internalIndentMs);*/
		return dataMap;
	}

	@Override
	public Map<String, Object> indentTrackingHistoryJsp(Map<String, Object> dataMap) {
		Session session = (Session) getSession();
		StoreInternalIndentM internalIndentM = (StoreInternalIndentM)session.get(StoreInternalIndentM.class, (Integer)dataMap.get("indentId"));
		List<? extends Object> indentDetailList = null;
		/*if(internalIndentM.getStatus().equals("y"))
			indentDetailList = (List<StoreIssueT>)session.createCriteria(StoreIssueT.class, "isT").createAlias("isT.IssueM", "isM").add(Restrictions.eq("isM.RequestNo.Id", internalIndentM.getId())).list();
		else*/
			indentDetailList = (List<StoreInternalIndentT>)session.createCriteria(StoreInternalIndentT.class).add(Restrictions.eq("Internal.Id", internalIndentM.getId())).list();
		dataMap.put("internalIndentM", internalIndentM);
		dataMap.put("indentDetailList", indentDetailList);
		return dataMap;
	}
	// javed khan for search civ
	public Map<String, Object> getDepartmentIssueData(Map dataMap) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();
		String pvms = null;
		String nomenclature = null;
		String au = null;
		Integer qtymmf = null;
		Integer qtyRequest = null;
		Integer stock = null;
		int id = 0;
		int itemId=0;
		int deptId=0;
		String common_name = null;
		int hospitalId=0;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		int issue_no=0;
		String todate="";
		String fromDate="";
		deptId = Integer.parseInt((""+dataMap.get("deptId")));
		hospitalId = Integer.parseInt((""+dataMap.get("hospitalId")));
		/*********************************commented By Ujjwal ***********************/
		//String sql="select * from store_issue_m sim where sim.DEPARTMENT_ID='24' and sim.TO_STORE='35'" ;
		//				String sql="select * from store_issue_m sim where sim.DEPARTMENT_ID="+deptId ;
		List<StoreIssueM> searchList = new ArrayList<StoreIssueM>();
		Criteria c=session.createCriteria(StoreIssueM.class).add(Restrictions.eq("Department.Id", deptId));

		if(Integer.parseInt((""+dataMap.get("issueNo"))) !=0){
			issue_no=Integer.parseInt((""+dataMap.get("issueNo")));
			//					sql = sql+" and sim.Id="+issue_no;
			c=c.add(Restrictions.eq("Id", issue_no));
		}
		if(!dataMap.get("todate").equals("") && dataMap.get("todate")!=null
				&& !dataMap.get("fromDate").equals("") && dataMap.get("fromDate")!=null){
			todate=(String)dataMap.get("todate");
			fromDate=(String)dataMap.get("fromDate");
			//				sql = sql+" and  sim.ISSUE_DATE between to_date('"+fromDate+"','dd/mm/yyyy') and to_date('"+todate+"','dd/mm/yyyy') " ;				}
			c=c.add(Restrictions.between("IssueDate", HMSUtil.convertStringTypeDateToDateType(fromDate), HMSUtil.convertStringTypeDateToDateType(todate)));

			//searchList=session.createCriteria(StoreIssueT.class).add(Restrictions.eq("IssueM.id", issue_no)).list();
			//			sql=sql+" and sim .hospital_id ="+hospitalId+" order by sim.id desc";
			c=c.add(Restrictions.eq("Hospital.Id", hospitalId));
			List  objectList= new ArrayList();
			//objectList=session.createSQLQuery(sql).list();
			//searchList=c.list(); //   change on 28 aug 2012
			map.put("objectList",  objectList );
			//map.put("searchList",  searchList );  //   change on 28 aug 2012

		}
		//   change on 28 aug 2012

		searchList=c.list();

		map.put("searchList",  searchList );
		//   change on 28 aug 2012
		return map;}



	/************************* Method Written By Tirath For GRN AFMSD	*****************************/


	public Map<String, Object> showGrnJspForAFMSD(Box box, Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		if (dataMap.get("deptId") != null)
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		if (dataMap.get("hospitalId") != null)
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		if (dataMap.get("userName") != null)
			userName = ("" + dataMap.get("userName"));

		List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier>();
		List<MasUnitOfMeasurement> uomList = new ArrayList<MasUnitOfMeasurement>();
		List<MasManufacturer> manufacturerList = new ArrayList<MasManufacturer>();
		List<StoreGrnM> searchGrnList = new ArrayList<StoreGrnM>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<MasStoreAirForceDepot> unitList = new ArrayList<MasStoreAirForceDepot>();
		List<StoreGrnM> grnList = new ArrayList<StoreGrnM>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<MasUnit>trueUnitList=new ArrayList<MasUnit>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<StoreIndentM> indentList = new ArrayList<StoreIndentM>();
		List<StorePoHeader> poList = new ArrayList<StorePoHeader>();
		List<StoreIndentM> gridLoanInMList = new ArrayList<StoreIndentM>();
		List<StoreIndentT> gridLoanInTList = new ArrayList<StoreIndentT>();
		List objectList = new ArrayList();

		List<StorePoHeader> poHeadList = new ArrayList<StorePoHeader>();
		String no = "";
		int indentId=0;
		session = (Session) getSession();




		map.put("choice", box.getString(SOURCE_OF_SUPPLY));



		indentList = getHibernateTemplate()
		.find(
				"from jkt.hms.masters.business.StoreIndentM as md where  md.Status='o' and md.IndentType='d' and md.SuppliedBy.Id = "
				+ box.getInt(SUPPLIER_ID)
				+ " and md.Department.Id = "
				+ box.getInt("deptId")
				+ " and md.Hospital.Id = "+hospitalId
				+" order by md.Id desc");
		try {
			supplierList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasStoreSupplier as ms where ms.Hospital.Id='"+hospitalId+"' order by ms.SupplierName");
			uomList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasUnitOfMeasurement as mi where mi.Status = 'y'");
			// manufacturerList=getHibernateTemplate().find("from
			// jkt.hms.masters.business.MasManufacturer as mi where mi.Status =
			// 'y' order by mi.ManufacturerName");
			searchGrnList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreGrnM as mi where mi.Department.Id='"
					+ deptId + "' and mi.Hospital.Id='"+hospitalId+"'");
			employeeList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasEmployee as mi where mi.Status = 'y' and mi.Hospital.Id='"+hospitalId+"' order by mi.FirstName");
			unitList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasStoreAirForceDepot as mi where mi.Status = 'y' order by mi.AirForceDepotName");
			trueUnitList=getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasUnit as mi where mi.Status = 'y' order by mi.UnitName");
			grnList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreGrnM as sgm where sgm.Hospital.Id='"+hospitalId+"'");
			// brandList=getHibernateTemplate().find("from
			// jkt.hms.masters.business.MasStoreBrand as msb");
			storeFyDocumentNoList = (List) getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"
					+ deptId + "' and sfdn.Hospital.Id='"+hospitalId+"'");

			for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
				if (storeFyDocumentNo.getGrnNo() != null) {
					no = ("" + storeFyDocumentNo.getGrnNo());
					no = getMaxNo(no);
				} else {
					no = getMaxNo("");
				}
			}

			indentId=box.getInt(INDENT_ID);



			//		if (loan.equals("Yes")) {
			gridLoanInTList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreIndentT as md where md.Indent.Id ='"
					+ indentId + "'");
			gridLoanInMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIndentM as md where md.Id = '"
					+ indentId + "' and md.Status='o'");

			//-------code by anamika------
			List<Integer>itemIdListFromIndent = new ArrayList<Integer>();
			List<MasStoreBrand> itemBrandList = new ArrayList<MasStoreBrand>();
			List<Integer>itemIdList = new ArrayList<Integer>();
			itemIdListFromIndent = session.createCriteria(StoreIndentT.class)
			.add(Restrictions.eq("Indent.Id", indentId))
			.setProjection(Projections.distinct(Projections.projectionList()
					.add(Projections.property("Item.Id")))).list();
			if(itemIdListFromIndent.size()>0){
				itemBrandList = session.createCriteria(MasStoreBrand.class)
				.add(Restrictions.in("Item.Id", itemIdListFromIndent)).list();
				map.put("itemBrandList", itemBrandList);
			}



			//	}
			//String qry = "select item_id,pvms_no,nomenclature from mas_store_item ";
			//	objectList = (List) session.createSQLQuery(qry).list();
			/*if (items.length() > 0) {
								StringTokenizer str = new StringTokenizer(items, ",");
								while (str.hasMoreTokens()) {
									objectList1.add(Integer.parseInt("" + str.nextToken()));
								}

								Criteria c2 = session.createCriteria(MasStoreBrand.class).add(
										Restrictions.in("Item.Id", objectList1)).add(Restrictions.eq("Status", "y"));
								brandList = c2.list();

								Criteria c3 = session.createCriteria(StorePoDetail.class).add(
										Restrictions.eq("Po.Id", indentId)).add(
										Restrictions.in("Item.Id", objectList1));
								poList = c3.list();
								poHeadList = session.createCriteria(StorePoHeader.class).add(
										Restrictions.eq("Id", indentId)).list();
			 */
			/*StringTokenizer str = new StringTokenizer(items, ",");
								while (str.hasMoreTokens()) {
									objectList1.add(Integer.parseInt(str.nextToken().toString()));
								}
					  			if(objectList1.size()>0){
					  				Criteria c3 = session.createCriteria(StorePoDetail.class).add(Restrictions.eq("Po.Id", indentId)).add(Restrictions.in("Item.Id", objectList1));
					  				poList = c3.list();
					  			}*/
			poHeadList = session.createCriteria(StorePoHeader.class).add(
					Restrictions.eq("Id", indentId)).list();

			manufacturerList = session.createCriteria(MasManufacturer.class)
			.add(Restrictions.eq("Hospital.Id", hospitalId))
			.add(Restrictions.eq("Status", "y")).list();

			brandList = session.createCriteria(MasStoreBrand.class).add(Restrictions.eq("Status", "y")).list();

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("supplierList", supplierList);
		map.put("second_combo", indentList);
		map.put("uomList", uomList);
		//map.put("manufacturerList", manufacturerList);
		map.put("searchGrnList", searchGrnList);
		map.put("employeeList", employeeList);
		map.put("unitList", unitList);
		map.put("grnList", grnList);
		//map.put("brandList", brandList);
		map.put("trueUnitList",trueUnitList);
		map.put("max", no);


		map.put("manufacturerList", manufacturerList);
		map.put("gridLoanInMList", gridLoanInMList);
		map.put("gridLoanInTList", gridLoanInTList);
		map.put("indentId", indentId);
		map.put("objectList", objectList);
		map.put("brandList", brandList);
		map.put("poList", poList);
		map.put("poHeadList", poHeadList);

		return map;

	}
	public Map getAdjustmentListForAFMSD(int indentId)
	{
		Map map = new HashMap();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<StoreIndentM> gridLoanInMList = new ArrayList<StoreIndentM>();
		List<StoreIndentT> gridLoanInTList = new ArrayList<StoreIndentT>();
		List<MasStoreItem> itemsList = new ArrayList<MasStoreItem>();
		List objectList1 = new ArrayList();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<StorePoDetail> poList = new ArrayList<StorePoDetail>();
		List<StorePoHeader> poHeadList = new ArrayList<StorePoHeader>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		List<MasManufacturer> manufacturerList = new ArrayList<MasManufacturer>();
		@SuppressWarnings("unused")
		int id = 0;
		int firstResult = 0;
		int maxResults = 8;
		session = (Session) getSession();
		List objectList = new ArrayList();

		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		session = (Session) getSession();
		Transaction tx = null;
		try {
			// --------------Transaction Started----------
			tx = session.beginTransaction();
			// Criteria c =
			// session.createCriteria(StoreLoaninT.class).add(Restrictions.eq("LoaninMaster.Id",
			// loanInId));
			// c.setFirstResult(firstResult);
			// c.setMaxResults(maxResults);
			// gridLoanInTList = c.list();
			//		if (loan.equals("Yes")) {
			gridLoanInTList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreIndentT as md where md.Indent.Id ='"
					+ indentId + "'");
			gridLoanInMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIndentM as md where md.Id = '"
					+ indentId + "' and md.Status='o'");
			//	}
			//String qry = "select item_id,pvms_no,nomenclature from mas_store_item ";
			//	objectList = (List) session.createSQLQuery(qry).list();
			/*if (items.length() > 0) {
						StringTokenizer str = new StringTokenizer(items, ",");
						while (str.hasMoreTokens()) {
							objectList1.add(Integer.parseInt("" + str.nextToken()));
						}

						Criteria c2 = session.createCriteria(MasStoreBrand.class).add(
								Restrictions.in("Item.Id", objectList1)).add(Restrictions.eq("Status", "y"));
						brandList = c2.list();

						Criteria c3 = session.createCriteria(StorePoDetail.class).add(
								Restrictions.eq("Po.Id", indentId)).add(
								Restrictions.in("Item.Id", objectList1));
						poList = c3.list();
						poHeadList = session.createCriteria(StorePoHeader.class).add(
								Restrictions.eq("Id", indentId)).list();
						/*StringTokenizer str = new StringTokenizer(items, ",");
						while (str.hasMoreTokens()) {
							objectList1.add(Integer.parseInt(str.nextToken().toString()));
						}
			  			if(objectList1.size()>0){
			  				Criteria c3 = session.createCriteria(StorePoDetail.class).add(Restrictions.eq("Po.Id", indentId)).add(Restrictions.in("Item.Id", objectList1));
			  				poList = c3.list();
			  			}*/
			poHeadList = session.createCriteria(StorePoHeader.class).add(
					Restrictions.eq("Id", indentId)).list();

			manufacturerList = session.createCriteria(MasManufacturer.class).add(Restrictions.eq("Status", "y")).list();



			brandList = session.createCriteria(MasStoreBrand.class).add(Restrictions.eq("Status", "y")).list();
			tx.commit();
			// --------------Transaction Ended----------

		} catch (Exception e) {
			// --------------In case of Transaction Failure----------
			if (tx != null)
				tx.rollback();

			e.printStackTrace();

		}
		map.put("manufacturerList", manufacturerList);
		map.put("gridLoanInMList", gridLoanInMList);
		map.put("gridLoanInTList", gridLoanInTList);
		map.put("indentId", indentId);
		map.put("objectList", objectList);
		map.put("brandList", brandList);
		map.put("poList", poList);
		map.put("poHeadList", poHeadList);
		return map;
	}


	//ashutosh singh

	public Map<String, Object> submitDirectPatientIssue(Map mapForDS) {

		Session session = (Session) getSession();
		String succesfullyAdded = "false";
		Map<String, Object> returnMap = new HashMap<String, Object>();
		List pvmsNoList = (List) mapForDS.get("pvmsNoList");
		List<Integer> frequencyList = (List) mapForDS.get("frequencyList");
		List<String> otherMedicineList = (List) mapForDS.get("otherMedicineList");
		List<String> ctList = (List) mapForDS.get("ctList");
		List<String> dosageList = (List) mapForDS.get("dosageList");
		List<Integer> totalList = (List) mapForDS.get("totalList");
		List<Integer> noOfDaysList = (List) mapForDS.get("noOfDaysList");
		List<String> remarksList = (List) mapForDS.get("remarksList");
		List<String> lpList=(List) mapForDS.get("lpList");
		List<Integer> lpQty=(List) mapForDS.get("lpQty");
		List<String> loList=(List) mapForDS.get("loList");
		List<Integer> loQt=(List) mapForDS.get("loQt");
		int hinId = (Integer) mapForDS.get("hinId");
		int departmentId = (Integer) mapForDS.get("departmentId");
		int visitId = (Integer) mapForDS.get("visitId");
		int hospitalId = (Integer) mapForDS.get("hospitalId");
		int empId = (Integer) mapForDS.get("empId");
		String DIAGNOSIS="";
		if(mapForDS.get("DIAGNOSIS")!=null && !mapForDS.get("DIAGNOSIS").equals("")){
			DIAGNOSIS=mapForDS.get("DIAGNOSIS").toString();
		}
		String specialty=(String)mapForDS.get("specialty");
		//int empIdCurrnet= (Integer) mapForDS.get("empIdCurrnet");
		//int userId = (Integer) mapForDS.get("userId");
		List<Integer> itemIdList = new ArrayList<Integer>();
		//	departmentId=117;
		int prescriptionId=0;
		int prescriptionNo1=0;
		int deptId = (Integer) mapForDS.get("deptId");
		Date changedDate=(Date)mapForDS.get("changedDate");
		String changedTime=(String)mapForDS.get("changedTime");
		String userName=(String)mapForDS.get("userName");


		String consultationTime = (String) mapForDS.get("consultationTime");
		String consultationDate = (String) mapForDS.get("consultationDate");



		Date consultationDateToInsert = HMSUtil.convertStringTypeDateToDateType(consultationDate);
		List<String> routeList = new ArrayList<String>();
		routeList= (List) mapForDS.get("routeList");
		Transaction tx = null;
		try{
			tx = session.beginTransaction();
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			Visit visit1 = (Visit) hbt.get(Visit.class, visitId);
			//visit1.setDiagnosisString(DIAGNOSIS);
			hbt.update(visit1);

			PatientPrescriptionHeader patientPrescriptionHeader = new PatientPrescriptionHeader();
			int item_category_id=0;
			if(pvmsNoList.size() > 0 || (otherMedicineList != null && otherMedicineList.size() > 0)){
				Patient patient = new Patient();
				patient.setId(hinId);
				patientPrescriptionHeader.setHin(patient);
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(departmentId);
				patientPrescriptionHeader.setDepartment(masDepartment);
				Visit visit = new Visit();
				visit.setId(visitId);
				//visit.setDiagnosisString("THIS IS DIGNOSIS ONLY");
				patientPrescriptionHeader.setVisit(visit);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				patientPrescriptionHeader.setHospital(masHospital);
				patientPrescriptionHeader.setStatus("p");
				patientPrescriptionHeader
				.setPrescriptionDate(consultationDateToInsert);
				patientPrescriptionHeader.setPrescriptionTime(consultationTime);
				if(empId!=0){
					MasEmployee employee = new MasEmployee();
					employee.setId(empId);
					patientPrescriptionHeader.setEmp(employee);
				}
				int prescriptionNo=getTransactionSequenceNoForPrescriptionNo(mapForDS);
				patientPrescriptionHeader.setPrescriptionNo(prescriptionNo);
				patientPrescriptionHeader.setSpecialty(specialty);
				hbt.save(patientPrescriptionHeader);


				prescriptionId=patientPrescriptionHeader.getId();
				prescriptionNo1=patientPrescriptionHeader.getPrescriptionNo();

				String sqlItemId="";

				for (int i = 0; i < pvmsNoList.size(); i++) {
					String pvmsNo = (String) pvmsNoList.get(i);
					int itemId = Integer.parseInt(pvmsNo);
					if(i==0){
						sqlItemId=""+itemId;
					}else{
						sqlItemId +=" , "+itemId;
					}
					itemIdList.add(itemId);
				}
				List<MasStoreItem> masItemList=new ArrayList<MasStoreItem>();
				Properties properties = new Properties();
				URL resourcePath = Thread.currentThread().getContextClassLoader()
				.getResource("adt.properties");

				try {
					properties.load(resourcePath.openStream());

					String item_category_code = properties.getProperty("item_category_id");
					item_category_id=Integer.parseInt(item_category_code);
				} catch (Exception e) {
					e.printStackTrace();
				}
				if(!sqlItemId.equals(""))
					masItemList=hbt.find("select item from jkt.hms.masters.business.MasStoreItem as item join item.ItemCategory as ic where item.Id in ("+sqlItemId+") and ic.Id="+item_category_id);

				if(masItemList.size()>0){
					patientPrescriptionHeader.setInjectionStatus("p");
				}else{
					patientPrescriptionHeader.setInjectionStatus("n");
				}

				List<MasStoreItem> itemCodeList = new ArrayList<MasStoreItem>();

				if (pvmsNoList.size() > 0 ) {
					for (int i = 0; i < itemIdList.size(); i++) {
						PatientPrescriptionDetails patientPrescriptionDetails = new PatientPrescriptionDetails();
						if(itemIdList.get(i) != null){
							MasStoreItem masStoreItem = new MasStoreItem();
							masStoreItem.setId(itemIdList.get(i));
							patientPrescriptionDetails.setItem(masStoreItem);
						}
						if (frequencyList.get(i) != null && !frequencyList.get(i).equals("")) {
							MasFrequency masFrequency = new MasFrequency();
							masFrequency.setId(frequencyList.get(i));
							patientPrescriptionDetails.setFrequency(masFrequency);
						}
						if (dosageList.get(i) != null && !dosageList.get(i).equals("")) {
							patientPrescriptionDetails.setDosage(dosageList.get(i));
						}
						if (remarksList.get(i) != null && !remarksList.get(i).equals("")) {
							patientPrescriptionDetails.setRemarks(remarksList.get(i));
						}
						//patientPrescriptionDetails.setType(typeLeftRightList.get(i));
						if (noOfDaysList.get(i) != null && !noOfDaysList.get(i).equals("")) {
							patientPrescriptionDetails.setNoOfDays(noOfDaysList.get(i));
						}
						if (routeList.get(i) != null && !routeList.get(i).equals("")) {
							patientPrescriptionDetails.setRoute(routeList.get(i));
						}
						if (totalList.get(i) != null && !totalList.get(i).equals("")) {
							patientPrescriptionDetails.setTotal(totalList.get(i));
						}
						if(lpList.get(i).equalsIgnoreCase("lp")){
							patientPrescriptionDetails.setSoItem("n");
							patientPrescriptionDetails.setSoQty(lpQty.get(i));
						}
						if(loList.get(i).equalsIgnoreCase("lo")){
							patientPrescriptionDetails.setLoItem("n");
							patientPrescriptionDetails.setLoQty(loQt.get(i));
						}
						patientPrescriptionDetails.setGivenQty(0);

						//patientPrescriptionDetails.setType(typeLeftRightList.get(i));

						//patientPrescriptionDetails.setInstruction(instructionList.get(i));

						patientPrescriptionDetails.setPrescription(patientPrescriptionHeader);

						patientPrescriptionDetails.setDetailStatus("a");
						List<MasStoreItem> storeItemList=new ArrayList<MasStoreItem>();
						storeItemList=hbt.find("select item from jkt.hms.masters.business.MasStoreItem as item join item.ItemCategory as ic where item.Id="+itemIdList.get(i)+" and ic.Id="+item_category_id);
						if(storeItemList.size() > 0){
							patientPrescriptionDetails.setInjectionStatus("p");
						}else{
							patientPrescriptionDetails.setInjectionStatus("n");
						}


						if(ctList.get(i).equals("y")){
							patientPrescriptionDetails.setCt("yes");
						}else{
							patientPrescriptionDetails.setCt("no");
						}
						hbt.save(patientPrescriptionDetails);
					}
				}





				if(otherMedicineList != null && otherMedicineList.size() > 0){
					String otherItem = "";
					if(otherMedicineList.size() >0){
						for(int i = 0; i < otherMedicineList.size(); i++){


							MasStoreItem masItem = new MasStoreItem();
							if(otherMedicineList.get(i) != null){
								otherItem =(String)otherMedicineList.get(i);
								masItem.setNomenclature(otherMedicineList.get(i));
								MasStoreSection masStoreSection = new MasStoreSection();
								masStoreSection.setId(1);
								masItem.setSection(masStoreSection);
								masItem.setStatus("y");
								MasHospital masHospital1 = new MasHospital();
								masHospital1.setId(hospitalId);
								masItem.setHospital(masHospital1);
								masItem.setBrandedGeneric("B");
								MasStoreItemConversion masStoreItemConversion = new MasStoreItemConversion();
								masStoreItemConversion.setId(1);
								masItem.setItemConversion(masStoreItemConversion);
								MasItemType masItemType = new MasItemType();
								masItemType.setId(2);
								MasDepartment department=new MasDepartment();
								department.setId(24);
								masItem.setDepartment(department);
								masItem.setLastChgBy(userName);
								masItem.setLastChgDate(changedDate);
								masItem.setLastChgTime(changedTime);


								/*itemCodeList =session.createCriteria(MasStoreItem.class).add(Restrictions.like("PvmsNo", "NIV%")).add(Restrictions.eq("Hospital.Id", hospitalId))
								.addOrder(Order.desc("Id")).setMaxResults(1).list();
								String itemNo = "";
								if(itemCodeList.size()>0){
									MasStoreItem masStoreItem =itemCodeList.get(0);
									String itemCode = masStoreItem.getPvmsNo();
									StringTokenizer str = new StringTokenizer(itemCode, "/");
									String itemNivCode = "";
									while (str.hasMoreTokens()) {

										itemNivCode = str.nextToken();

									}
									int itemNiv =Integer.parseInt(itemNivCode)+1;
									itemNo = "NIV/"+itemNiv;
								}else{
									itemNo = "NIV/011"; 
								}*/
								masItem.setPvmsNo("temp");
								hbt.save(masItem);






								PatientPrescriptionDetails patientPrescriptionDetails = new PatientPrescriptionDetails();
								if(masItem.getId() != null)
								{
									MasStoreItem masStoreItem = new MasStoreItem();
									masStoreItem.setId(masItem.getId());
									patientPrescriptionDetails.setItem(masStoreItem);
								}





								if (frequencyList.get(i) != null && !frequencyList.get(i).equals("")) {
									MasFrequency masFrequency = new MasFrequency();
									masFrequency.setId(frequencyList.get(i));
									patientPrescriptionDetails.setFrequency(masFrequency);
								}
								if (dosageList.get(i) != null && !dosageList.get(i).equals("")) {
									patientPrescriptionDetails.setDosage(dosageList.get(i));
								}
								if (remarksList.get(i) != null && !remarksList.get(i).equals("")) {
									patientPrescriptionDetails.setRemarks(remarksList.get(i));
								}
								//patientPrescriptionDetails.setType(typeLeftRightList.get(i));
								if (noOfDaysList.get(i) != null && !noOfDaysList.get(i).equals("")) {
									patientPrescriptionDetails.setNoOfDays(noOfDaysList.get(i));
								}
								if (routeList.get(i) != null && !routeList.get(i).equals("")) {
									patientPrescriptionDetails.setRoute(routeList.get(i));
								}

								//patientPrescriptionDetails.setInstruction(instructionList.get(i));
								if (totalList.get(i) != null && !totalList.get(i).equals(""))
								{
									patientPrescriptionDetails.setTotal(totalList.get(i));
								}
								//if(lpList.get(i).equalsIgnoreCase("lp")){
								patientPrescriptionDetails.setSoItem("n");
								patientPrescriptionDetails.setSoQty(lpQty.get(i));
								//}
								if(loList.get(i).equalsIgnoreCase("lo")){
									patientPrescriptionDetails.setLoItem("n");
									patientPrescriptionDetails.setLoQty(loQt.get(i));
								}
								patientPrescriptionDetails.setPrescription(patientPrescriptionHeader);
								patientPrescriptionDetails.setGivenQty(0);
								patientPrescriptionDetails.setDetailStatus("a");
								if(ctList.get(i).equals("y"))
								{
									patientPrescriptionDetails.setCt("yes");
								}
								else
								{
									patientPrescriptionDetails.setCt("no");
								}
								hbt.save(patientPrescriptionDetails);
							}
						}














					}
				}
			}






			tx.commit();
			String opdIssuenoIncremented="";
			List opdIssueNo = new ArrayList();
			opdIssueNo = session.createQuery("select syd from StoreFyDocumentNo as syd where syd.Department.Id="+ deptId+" and syd.Hospital.Id="+hospitalId).list();
			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) opdIssueNo.get(0);
			int storeFyDocumentNoId =storeFyDocumentNo.getId();
			String opdIssueNoFromDB = storeFyDocumentNo.getOpdIssueNo();
			opdIssuenoIncremented = getMaxNo(opdIssueNoFromDB);
			String opdIssueno =opdIssuenoIncremented;
			returnMap.put("opdIssuenoIncremented",opdIssuenoIncremented);
			returnMap.put("storeFyDocumentNoId",storeFyDocumentNoId);
			returnMap.put("opdIssueno",opdIssueno);
			returnMap.put("prescriptionId",prescriptionId);
			returnMap.put("prescriptionNo1",prescriptionNo1);

			succesfullyAdded = "true";

		}catch (Exception e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();

		} finally {
			// --------Session Closing----------
			session.close();
		}
		returnMap.put("succesfullyAdded", succesfullyAdded);
		return returnMap;
	}
	public int getTransactionSequenceNoForPrescriptionNo(Map mapForDS) {
		Session session = (Session) getSession();

		//int userId = (Integer) mapForDS.get("userId");
		String userName = (String) mapForDS.get("userName");
		List<TransactionSequence> orderNoList = new ArrayList<TransactionSequence>();
		String tableName = "PATIENT_PRESCRIPTION_HEADER";
		int currentYearInt=-1;
		int orderNo=0;
		int oldYear=-1;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int hospitalId = (Integer)mapForDS.get("hospitalId");
		String currentYear = date.substring(date.lastIndexOf("/") + 1);
		currentYearInt=Integer.parseInt(currentYear);
		String currentMonth = date.substring(date.indexOf("/") + 1, date
				.lastIndexOf("/"));
		TransactionSequence tranSeq=new TransactionSequence();
		tranSeq.setTransactionSequenceName("PrescriptionNo");
		tranSeq.setTransactionPrefix("PRNO");
		tranSeq.setTablename(tableName);
		tranSeq.setCreatedby(userName);
		tranSeq.setStatus("y");
		//MasServiceType masserType=new MasServiceType();
		tranSeq.setServiceType(null);
		tranSeq.setMonth(currentYearInt);
		//Transaction tx = null;

		try {
			//	tx = session.beginTransaction();
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			try {

				Criteria crit = session.createCriteria(TransactionSequence.class).add(Restrictions.eq("Hospital.Id", hospitalId))
				.add(Restrictions.eq("Tablename", tableName));
				orderNoList = crit.list();
			} catch (HibernateException e) {
				e.printStackTrace();
			}
			if(orderNoList!=null && orderNoList.size()>0)
			{
				TransactionSequence transactionSequence = orderNoList.get(0);
				orderNo = transactionSequence.getTransactionSequenceNumber();
				oldYear=transactionSequence.getMonth();
				if(currentYearInt>oldYear)
				{
					orderNo=0;
					transactionSequence.setMonth(currentYearInt);
					transactionSequence.setCreatedby(userName);
					transactionSequence.setTransactionSequenceNumber(orderNo);
					hbt.update(transactionSequence);
				}else
				{
					orderNo=orderNo+1;
					transactionSequence.setCreatedby(userName);
					transactionSequence.setTransactionSequenceNumber(orderNo);
					hbt.update(transactionSequence);
				}
			}else
			{
				MasHospital hospital = new MasHospital();
				hospital.setId(hospitalId);
				tranSeq.setHospital(hospital);
				tranSeq.setTransactionSequenceNumber(orderNo);
				hbt.save(tranSeq);
			}
			//	tx.commit();
		} catch (Exception e) {
			//if (tx != null)
			//	tx.rollback();
			e.printStackTrace();

		} finally {
			// --------Session Closing----------

		}
		return orderNo;

	}

	public int getItemIdFromPVMS(String pvmsNo) {
		List<MasStoreItem> itemIdList = new ArrayList<MasStoreItem>();
		Session session = (Session) getSession();
		int itemId = 0;
		try {
			itemIdList = session.createCriteria(MasStoreItem.class).add(Restrictions.eq("PvmsNo", pvmsNo)).list();
			MasStoreItem masStoreItem = itemIdList.get(0);
			itemId = masStoreItem.getId();
		} catch (Exception e) {

			e.printStackTrace();
		}

		return itemId;
	}


	//by ashutosh singh begin


	public boolean submitOPDPatientStockDetailsDirect(Map map) {
		Session session = (Session) getSession();
		boolean succesfullyAdded = false;
		List<String> batchNumberList = (List) map.get("batchNumberList");
		List brandNameList = (List) map.get("brandNameList");
		List expiryDateList = (List) map.get("expiryDateList");
		List issQtyList = (List) map.get("issQtyList");
		List costPriceList = (List) map.get("costPriceList");
		//List amountList = (List) map.get("amountList");
		List itemIdList = (List) map.get("itemIdList");
		List<PatientPrescriptionDetails> patientPrescriptionDetailsList=new ArrayList<PatientPrescriptionDetails>();
		//List storeItemBatchStockIdList = (List) map.get("storeItemBatchStockIdList");
		String date = (String) map.get("date");
		int deptId = (Integer) map.get("deptId");
		int hospitalId = (Integer) map.get("hospitalId");
		String time = (String) map.get("time");
		String userName = (String) map.get("userName");
		int storeFyDocumentNoId = (Integer) map.get("storeFyDocumentNoId");
		String opdIssueno = (String) map.get("opdIssueno");
		int hinId = (Integer) map.get("hinId");

		int empId = (Integer) map.get("empId");
		//	String prescription = map.get("prescription").toString();
		String serviceNo = (String) map.get("serviceNo");



		int patientPrescriptionId = 0;
		int patientPrescriptionNo=0;
		if(map.get("prescriptionId")!= null){
			patientPrescriptionId = (Integer)(map.get("prescriptionId"));
		}
		if(map.get("prescriptionNo1") != null){
			patientPrescriptionNo = (Integer)(map.get("prescriptionNo1"));
		}


		Date dateToInsert=null;
		/*	if((map.get("date")!=null)&&(!map.get("date").equals("")))
	     		dateToInsert = HMSUtil.convertStringTypeDateToDateType(date);
		 */
		if((map.get("dateToInsert")!=null)&&(!map.get("dateToInsert").equals("")))
			dateToInsert = (Date) map.get("dateToInsert");

		Transaction tx = null;
		try {
			tx = session.beginTransaction();

			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) hbt.get(StoreFyDocumentNo.class, storeFyDocumentNoId);
			StoreOpPatientIssueM storeOpPatientIssueM = null;
			String opdPatientIssueNoFromDB = "";
			if(storeFyDocumentNo!=null){
				if(storeFyDocumentNo.getOpdIssueNo() != null)
					opdPatientIssueNoFromDB = storeFyDocumentNo.getOpdIssueNo();
			}
			if (!opdPatientIssueNoFromDB.equals(opdIssueno))
			{
				storeFyDocumentNo.setOpdIssueNo(opdIssueno);
				hbt.update(storeFyDocumentNo);

				storeOpPatientIssueM = new StoreOpPatientIssueM();
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				storeOpPatientIssueM.setDepartment(masDepartment);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				storeOpPatientIssueM.setHospital(masHospital);

				PatientPrescriptionHeader prescriptionHeader = new PatientPrescriptionHeader();

				if(patientPrescriptionId != 0){
					prescriptionHeader.setId(patientPrescriptionId);
					storeOpPatientIssueM.setPatientPrescriptionHeader(prescriptionHeader);
				}
				storeOpPatientIssueM.setIssueType("I");
				storeOpPatientIssueM.setTypeOfIssue("P");
				Patient patient = new Patient();
				if (hinId != 0) {
					patient.setId(hinId);
					storeOpPatientIssueM.setHin(patient);
					storeOpPatientIssueM.setServiceNo(serviceNo);
				} else
					storeOpPatientIssueM.setServiceNo(serviceNo);

				storeOpPatientIssueM.setIssueNo(opdIssueno);
				storeOpPatientIssueM.setIssueDate(dateToInsert);
				storeOpPatientIssueM.setStatus("y");
				storeOpPatientIssueM.setPrescriptionNo(""+patientPrescriptionNo);
				MasEmployee masEmployee = new MasEmployee();
				if(empId != 0){
					masEmployee.setId(empId);
					storeOpPatientIssueM.setEmp(masEmployee);
				}

				storeOpPatientIssueM.setLastChgBy(userName);
				storeOpPatientIssueM.setLastChgDate(dateToInsert);
				storeOpPatientIssueM.setLastChgTime(time);
				hbt.save(storeOpPatientIssueM);

				Iterator itr = issQtyList.iterator();
				//int i = 0;

				for (int i = 0; i < issQtyList.size(); i++)
				{

					if(issQtyList.get(i)!=null && !issQtyList.get(i).equals("")){
						BigDecimal totalQtyIssued;
						StoreOpPatientIssueT storeOpPatientIssueT = new StoreOpPatientIssueT();
						int itemId=Integer.parseInt(""+itemIdList.get(i));
						storeOpPatientIssueT.setOpIssue(storeOpPatientIssueM);
						MasStoreItem masStoreItem = new MasStoreItem();
						masStoreItem.setId(itemId);
						storeOpPatientIssueT.setItemIdRequire(masStoreItem);
						storeOpPatientIssueT.setItemIdIssue(masStoreItem);
						if(batchNumberList.get(i) !=null && !batchNumberList.get(i).equals("")){
							storeOpPatientIssueT.setBatchNo(batchNumberList.get(i));
						}
						MasStoreBrand masStoreBrand = new MasStoreBrand();
						if(brandNameList.get(i)!=null && !brandNameList.get(i).equals("")){
							masStoreBrand.setId(Integer.parseInt("" + brandNameList.get(i)));
							storeOpPatientIssueT.setBrand(masStoreBrand);
						}
						String str_date = (String) expiryDateList.get(i);
						//	String expiryDate=str_date.substring(8)+"/"+str_date.substring(5,7)+"/"+str_date.substring(0,4);
						//	Date expiryDateToInsert = HMSUtil.convertStringTypeDateToDateType(expiryDate);
						Date expiryDateToInsert=HMSUtil.convertStringTypeDateToDateType(str_date);
						storeOpPatientIssueT.setExpiryDate(expiryDateToInsert);
						BigDecimal issuedQtyFromJsp=new BigDecimal(""+0.0);
						if(issQtyList.get(i)!=null && !issQtyList.get(i).equals(""))
						{
							issuedQtyFromJsp = new BigDecimal(""+ issQtyList.get(i));
							storeOpPatientIssueT.setQtyIssued(issuedQtyFromJsp);
						}
						hbt.save(storeOpPatientIssueT);
						//BigDecimal bigDecimal2 = new BigDecimal(""
						//	+ costPriceList.get(i));
						//storeOpPatientIssueT.setRate(bigDecimal2);

						//BigDecimal bigDecimal3 = new BigDecimal("" + amountList.get(i));
						//storeOpPatientIssueT.setAmount(bigDecimal3);
						// hbt.save(storeIpIssueT);

						patientPrescriptionDetailsList=session.createCriteria(PatientPrescriptionDetails.class)
						.add(Restrictions.eq("Prescription.Id",patientPrescriptionId ))
						.add(Restrictions.eq("Item.Id", itemId)).list();

						if (patientPrescriptionDetailsList != null && patientPrescriptionDetailsList.size() > 0)
						{
							PatientPrescriptionDetails prescriptionDetails=patientPrescriptionDetailsList.get(0);
							if(prescriptionDetails.getQtyIssued()!=null)
							{
								int qtyIssued=prescriptionDetails.getQtyIssued();
								qtyIssued +=Integer.parseInt(""+issQtyList.get(i));
								prescriptionDetails.setQtyIssued(qtyIssued);
								int total=prescriptionDetails.getTotal();
								total -=Integer.parseInt(""+issQtyList.get(i));
								prescriptionDetails.setTotal(total);

								hbt.update(prescriptionDetails);
								hbt.refresh(prescriptionDetails);

							}
							else
							{
								int qtyIssued =Integer.parseInt(""+issQtyList.get(i));
								prescriptionDetails.setQtyIssued(qtyIssued);
								int total=prescriptionDetails.getTotal();
								total -=Integer.parseInt(""+issQtyList.get(i));
								prescriptionDetails.setTotal(total);
								hbt.update(prescriptionDetails);
								hbt.refresh(prescriptionDetails);
							}
						}
						List<StoreItemBatchStock> storeItemBatchStockList = session.createCriteria(StoreItemBatchStock.class)
						.add(Restrictions.eq("BatchNo", batchNumberList.get(i)))
						.add(Restrictions.eq("Item.Id", itemId))
						.add(Restrictions.eq("Hospital.Id", hospitalId))
						.add(Restrictions.eq("Department.Id",deptId)).list();
						for(StoreItemBatchStock storeItemBatchStock:storeItemBatchStockList)
						{
							BigDecimal qtyIssued = (BigDecimal) storeItemBatchStock.getIssueQty();
							if (qtyIssued != null)
							{
								totalQtyIssued = qtyIssued.add(issuedQtyFromJsp);
							} else {
								totalQtyIssued = issuedQtyFromJsp;
							}

							BigDecimal closingStock = (BigDecimal) storeItemBatchStock.getClosingStock();
							closingStock = closingStock.subtract(issuedQtyFromJsp);
							storeItemBatchStock.setIssueQty(totalQtyIssued);
							storeItemBatchStock.setClosingStock(closingStock);
							// hbt.save(storeIpIssueM);

							hbt.update(storeItemBatchStock);
						}
					}
					//i++;
				}

				List<PatientPrescriptionDetails> patientPrescriptionList=session.createCriteria(PatientPrescriptionDetails.class)
				.add(Restrictions.eq("Prescription.Id",patientPrescriptionId ))
				.add(Restrictions.ne("Total",0)).list();
				if(patientPrescriptionList.size()==0)
				{
					PatientPrescriptionHeader presHd = (PatientPrescriptionHeader)hbt.get(PatientPrescriptionHeader.class, patientPrescriptionId);

					presHd.setStatus("c");
					hbt.update(presHd);
				}else{
					PatientPrescriptionHeader presHd = (PatientPrescriptionHeader)hbt.get(PatientPrescriptionHeader.class, patientPrescriptionId);
					presHd.setStatus("l");
					hbt.update(presHd);
				}
				succesfullyAdded = true;
				tx.commit();
			}

		} catch (Exception e) {
			succesfullyAdded=false;
			tx.rollback();
			e.printStackTrace();
		}
		return succesfullyAdded;
	}



	//by ashutosh singh end

	// add javed khan for remove duplicacy of IndentNo

	public Map<String, Object> getIndentNo(Map<String,Object> dataMap) {
		Map<String,Object>map=new HashMap<String,Object>();
		List<StoreIndentM> indentList = new ArrayList<StoreIndentM>();
		List souceOfSupplyList1=new ArrayList();
		List souceOfSupplyList2=new ArrayList();
		boolean flag=false;
		String IndentNo=(String)dataMap.get("indentNo");
		String choice=(String)dataMap.get("choice");

		Session session = (Session) getSession();


		int month, year;
		Calendar cal = Calendar.getInstance();
		Calendar calendar = Calendar.getInstance();
		month = calendar.get(Calendar.MONTH) + 1;
		if (month < 4) {
			year = calendar.get(Calendar.YEAR) - 1;
		} else {
			year = calendar.get(Calendar.YEAR);
		}


		Criteria c=null;

		c = session.createCriteria(StoreIndentM.class).add(Restrictions.eq("IndentNo",IndentNo));



		/*if(choice.equalsIgnoreCase("a") || choice.equalsIgnoreCase("i") || choice.equalsIgnoreCase("o"))
	{
	c = session.createCriteria(StoreGrnM.class).add(
	Restrictions.in("ReceiveType", souceOfSupplyList2)).
	add(Restrictions.eq("GrnNo",grnNo));;
	}*/




		indentList = c.list();
		if(indentList.size() > 0){
			flag=true;
		}
		map.put("flag",flag);
		return map;
	}



	// By Tirath For Submit Sample Testing Entry


	public boolean submitSampleTestingEntry(Map<String, Object> infoMap,
			Map<String, Object> dataMap) {
		StoreSampleTestingEntry storeSampleTestingEntry = (StoreSampleTestingEntry) infoMap
		.get("storeSampleTestingEntry");
		List<StoreSampleTestingDetail> StoreSampleTestingDetaillist = (ArrayList<StoreSampleTestingDetail>) infoMap
		.get("StoreSampleTestingDetaillist");
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		boolean successfullyAdded = false;
		@SuppressWarnings("unused")
		int pageNo = 0;
		String entryNo = "";

		StoreDefectiveDrugM storeDefectiveDrugM2 = new StoreDefectiveDrugM();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		String max = "";
		String no = "";
		List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
		StoreItemBatchStock storeItemBatchStock = null;
		if (dataMap.get("deptId") != null)
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		if (dataMap.get("hospitalId") != null)
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		if (dataMap.get("userName") != null)
			userName = ("" + dataMap.get("userName"));
		// Session sess = factory.openSession();
		session = (Session) getSession();
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (!(infoMap.get("headerStored") + "").equals("yes")) {
				hbt.saveOrUpdate(storeSampleTestingEntry);

				int storeFyId = 0;
				entryNo = (String) infoMap.get("entryNo");
				Criteria c = session.createCriteria(StoreFyDocumentNo.class)
				.add(Restrictions.eq("Hospital.Id", hospitalId))
				.add(Restrictions.eq("Department.Id", deptId));
				storeFyDocumentNoList = c.list();
				for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
					storeFyId = documentNo.getId();
				}
				StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
				.load(StoreFyDocumentNo.class, storeFyId);
				storeFyDocumentNo.setSampleTestingEntryNo(entryNo);
				hbt.update(storeFyDocumentNo);

			}

			int itemId=0;
			int stockId=0;

			if (StoreSampleTestingDetaillist.size() > 0) {
				/*if ((infoMap.get("headerStored") + "").equals("yes")) {
				int id = Integer.parseInt("" + infoMap.get("entryId"));
				storeDefectiveDrugM2.setId(id);
			}*/
				for (int i = 0; i < StoreSampleTestingDetaillist.size(); i++) {
					StoreSampleTestingDetail storeSampleTestingDetail = new StoreSampleTestingDetail();
					storeSampleTestingDetail = (StoreSampleTestingDetail) StoreSampleTestingDetaillist.get(i);
					if ((infoMap.get("headerStored") + "").equals("yes")) {
						storeSampleTestingDetail.setStoreSampleEntry(storeSampleTestingEntry);
					} else {
						storeSampleTestingDetail.setStoreSampleEntry(storeSampleTestingEntry);
					}
					hbt.saveOrUpdate(storeSampleTestingDetail);
					itemId=storeSampleTestingDetail.getItem().getId();
					stockId=storeSampleTestingDetail.getBatchNo().getId();

					storeItemBatchStockList = hbt
					.find("from jkt.hms.masters.business.StoreItemBatchStock as inp where inp.Item.Id = "
							+ itemId
							+ " and inp.Id ="
							+ stockId);

					if (storeItemBatchStockList != null
							&& storeItemBatchStockList.size() > 0) {
						int id = storeItemBatchStockList.get(0).getId();
						storeItemBatchStock = (StoreItemBatchStock) hbt.load(
								StoreItemBatchStock.class, id);
						BigDecimal existing_closing_stock = storeItemBatchStock
						.getClosingStock();
						BigDecimal existing_defect_stock = storeItemBatchStock
						.getDefectQty();
						BigDecimal defect_qty = storeSampleTestingDetail
						.getDefectQty();

						try
						{
							if(existing_defect_stock.equals(null))
							{
								existing_defect_stock=new BigDecimal(0);
							}
						}
						catch(Exception e)
						{
							existing_defect_stock=new BigDecimal(0);
						}

						storeItemBatchStock
						.setClosingStock(existing_closing_stock
								.subtract(defect_qty));
						storeItemBatchStock.setDefectQty(existing_defect_stock
								.add(defect_qty));
						hbt.update(storeItemBatchStock);
					}

				}
			}
			successfullyAdded = true;
			tx.commit();

		} catch (RuntimeException e) {
			if (tx != null)
				tx.rollback();
			// throw e; // or display error message
			e.printStackTrace();
		} finally {
			//session.close();
		}

		return successfullyAdded;

	}


	// By Tirath
	public Map<String, Object> showSampleTestingEntryJsp(Map<String, Object> dataMap) {
		Session session = (Session) getSession();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		if (dataMap.get("deptId") != null)
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		if (dataMap.get("hospitalId") != null)
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		if (dataMap.get("userName") != null)
			userName = ("" + dataMap.get("userName"));

		Set<StoreItemBatchStock> closingStockSet = new HashSet<StoreItemBatchStock>();
		Set<StoreItemBatchStock> set1 = new HashSet<StoreItemBatchStock>();
		HashMap<String, Object> map = new HashMap<String, Object>();

		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<StoreSampleTestingEntry> drugList = new ArrayList<StoreSampleTestingEntry>();
		List<StoreSampleTestingEntry> searchDrugList = new ArrayList<StoreSampleTestingEntry>();
		List<MasManufacturer> manufacturerList = new ArrayList<MasManufacturer>();
		List<StoreCopyAddressList> copyList = new ArrayList<StoreCopyAddressList>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<StoreFyDocumentNo> storeFyDocumentNo1List = new ArrayList<StoreFyDocumentNo>();
		MasStoreItem masStoreObj = new MasStoreItem();
		List<MasEmployee> enterdByList = new ArrayList<MasEmployee>();
		enterdByList=session.createCriteria(MasEmployee.class).add(Restrictions.eq("Status", "y")).list();
		List<MasEmployee> authorisedList = new ArrayList<MasEmployee>();
		List<StoreProformaHeader> storeProformaList = new ArrayList<StoreProformaHeader>(); // javed
		authorisedList=session.createCriteria(MasEmployee.class).add(Restrictions.eq("Status", "y")).list();// javed
		String max = "";
		String startNo = "";
		String no = "";
		try {
			// brandList=getHibernateTemplate().find("from
			// jkt.hms.masters.business.MasStoreBrand as msb");
			drugList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.StoreSampleTestingEntry as msb");
			searchDrugList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreSampleTestingEntry as msb where msb.Hospital.Id='"+hospitalId+"'");
			manufacturerList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasManufacturer as sca where sca.Hospital.Id='"+hospitalId+"'");
			copyList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreCopyAddressList as sca ");
			storeFyDocumentNoList = (List) getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Hospital.Id='"+hospitalId+"' and sfdn.Department.Id='"
					+ deptId + "'");
			storeFyDocumentNo1List = (List) getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Hospital.Id='"+hospitalId+"' and sfdn.Department.Id='"
					+ deptId + "'");
			storeProformaList= session.createCriteria(StoreProformaHeader.class)
			.add(Restrictions.eq("Hospital.Id", hospitalId))
			.addOrder(Order.asc("id")).list();;
			for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNo1List) {
				if (storeFyDocumentNo.getSampleTestingEntryNo() != null) {
					no = ("" + storeFyDocumentNo.getSampleTestingEntryNo());
					no = getMaxNo(no);
				} else {
					no = getMaxNo("");
				}
			}

			for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
				if (storeFyDocumentNo.getSampleTestingEntryNo() != null) {
					no = ("" + storeFyDocumentNo.getSampleTestingEntryNo());
					no = getMaxNo(no);
				} else {
					no = getMaxNo("");
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("max", no);
		map.put("searchDrugList", searchDrugList);
		map.put("drugList", drugList);
		map.put("brandList", brandList);
		map.put("set1", set1);
		map.put("manufacturerList", manufacturerList);
		map.put("copyList", copyList);
		map.put("enterdByList", enterdByList);
		map.put("authorisedList", authorisedList);
		map.put("storeProformaList", storeProformaList); // javed
		return map;
	}



	public Map<String, Object> submitFollowDetailsForSampleEntry(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();

		MasStoreGroup masStoreGroup = null;

		StoreSampleTestingEntry storeSampleTestingEntry=new StoreSampleTestingEntry();
		StoreTenderInvitaLetterToVender storeTenderInvitaletterToVender = null;
		MasStoreSupplier masStoreSupplier = null;
		Transaction transaction = null;
		Session session = (Session) getSession();
		int defectMId=0;
		StoreTenderToSupplier storeTenderToSupplier = null;
		String date4MySQL = "";
		java.sql.Date followUpDate1 = null;
		try {


			transaction = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");

			defectMId=box.getInt(ENTRY_ID);
			Vector storeFollowUpId = box.getVector("storeFollowUpId");
			Vector followUpDate = box
			.getVector("followUpDate");

			Vector referenceNo=box.getVector("referenceNo");
			Vector followUpRemarks=box.getVector("followUpRemarks");

			int stockMId=0;


			for (int i = 0; i < followUpDate.size(); i++) {
				if (storeFollowUpId.get(i).toString().contains("y"))

				{
					StoreFollowUpForSample storeFollowUpForSample =new StoreFollowUpForSample();
					storeSampleTestingEntry.setId(defectMId);
					storeFollowUpForSample.setSampleEntry(storeSampleTestingEntry);
					try{
						date4MySQL = formatterOut.format(formatterIn.parse(followUpDate.get(i).toString()));
						followUpDate1 = java.sql.Date.valueOf(date4MySQL);
						storeFollowUpForSample.setFollowUpDate(followUpDate1);
					}
					catch(Exception e)
					{

					}

					storeFollowUpForSample.setReferenceNo(referenceNo.get(i).toString());
					storeFollowUpForSample.setRemarks(followUpRemarks.get(i).toString());
					hbt.save(storeFollowUpForSample);

				}
			}
			transaction.commit();
		} catch (HibernateException e) {
			e.printStackTrace();
			if (transaction != null)
				transaction.rollback();
		}



		return map;
	}




	public Map searchSampleTestingEntry(Map searchFieldMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		String fromDate = "";
		String toDate = "";
		int hospitalId=0;
		int deptId=0;
		List<StoreSampleTestingEntry> gridDefectiveDrugHeaderList = new ArrayList<StoreSampleTestingEntry>();
		List<StoreSampleTestingDetail> gridDefectiveDrugDetailList = new ArrayList<StoreSampleTestingDetail>();
		String entryNo = "";
		try {
			hospitalId=(Integer)searchFieldMap.get("hospitalId");
			deptId=(Integer)searchFieldMap.get("deptId");

			if ((!searchFieldMap.get("fromDate").equals(""))
					&& (!searchFieldMap.get("toDate").equals(""))) {
				fromDate = (String) searchFieldMap.get("fromDate");
				toDate = (String) searchFieldMap.get("toDate");

				SimpleDateFormat formatterIn = new SimpleDateFormat(
				"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
				"yyyy-MM-dd");
				String date4MySQL1 = formatterOut.format(formatterIn
						.parse(fromDate));
				String date4MySQL2 = formatterOut.format(formatterIn
						.parse(toDate));
				java.sql.Date startDate = java.sql.Date.valueOf(date4MySQL1);
				java.sql.Date endDate = java.sql.Date.valueOf(date4MySQL2);

				gridDefectiveDrugDetailList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreSampleTestingDetail ");
				gridDefectiveDrugHeaderList = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreSampleTestingEntry as poh where "
						+ " poh.DefectiveDate between '" + startDate
						+ "' and '" + endDate + "' and poh.Hospital.Id='"+hospitalId+"'");

			}
		} catch (Exception e) {
			e.printStackTrace();	}

		try {
			if (!searchFieldMap.get("entryNo").equals("0")) {

				entryNo = (String) searchFieldMap.get("entryNo");
				gridDefectiveDrugDetailList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreSampleTestingEntry ");
				gridDefectiveDrugHeaderList = getHibernateTemplate()
				.find(
						"from jkt.hms.masters.business.StoreSampleTestingEntry as pod where pod.DefectNo = '"
						+ entryNo + "' and pod.Hospital.Id='"+hospitalId+"'");

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("gridDefectiveDrugDetailList", gridDefectiveDrugDetailList);
		map.put("gridDefectiveDrugHeaderList", gridDefectiveDrugHeaderList);

		return map;
	}


	public List<StoreSampleTestingEntry> getSampleTestingEntry() {
		Session session = (Session) getSession();
		List<StoreSampleTestingEntry> defectiveList = session.createCriteria(
				StoreSampleTestingEntry.class).add(Restrictions.eq("Status", "y"))
				.list();
		return defectiveList;
	}



	public Map getSampleTestEntryModifyMap(int entryId, int pageNo) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreSampleTestingEntry> gridDefectiveDrugMList = new ArrayList<StoreSampleTestingEntry>();
		List<StoreSampleTestingDetail> gridDefectiveDrugTList = new ArrayList<StoreSampleTestingDetail>();
		List<StoreFollowUpForSample> storeFollowupDetailsList = new ArrayList<StoreFollowUpForSample>();
		int firstResult = 0;
		int maxResults = 10;

		if (pageNo != 0) {
			firstResult = firstResult + (pageNo) * 10;
		}

		Session session = (Session) getSession();
		Criteria c = session.createCriteria(StoreSampleTestingDetail.class).add(
				Restrictions.eq("StoreSampleEntry.Id", entryId));
		c.setFirstResult(firstResult);
		c.setMaxResults(maxResults);
		gridDefectiveDrugTList = c.list();
		gridDefectiveDrugMList = session.createCriteria(
				StoreSampleTestingEntry.class).add(Restrictions.eq("Id", entryId))
				.list();

		storeFollowupDetailsList = session.createCriteria(
				StoreFollowUpForSample.class)
				.add(Restrictions.eq("SampleEntry.Id", entryId))
				.list();

		List<MasEmployee> enterdByList = new ArrayList<MasEmployee>();
		enterdByList=session.createCriteria(MasEmployee.class).add(Restrictions.eq("Status", "y")).list();
		List<MasEmployee> authorisedList = new ArrayList<MasEmployee>();
		authorisedList=session.createCriteria(MasEmployee.class).add(Restrictions.eq("Status", "y")).list();

		map.put("storeFollowupDetailsList", storeFollowupDetailsList);
		map.put("enterdByList", enterdByList);
		map.put("authorisedList", authorisedList);
		map.put("gridDefectiveDrugTList", gridDefectiveDrugTList);
		map.put("gridDefectiveDrugMList", gridDefectiveDrugMList);
		return map;
	}



	public boolean updateSampleTestingEntry(Box box) {
		boolean flag = false;

		int headerId = box.getInt(ENTRY_ID);
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		Date entryDate = new Date();
		Date docDate = new Date();
		try {
			StoreSampleTestingEntry storeSampleTestingEntry = (StoreSampleTestingEntry)hbt.load(StoreSampleTestingEntry.class, headerId);

			SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
			/*if (box.get(ENTRY_DATE) != null)
		{
			String date4MySQL = formatterOut.format(formatterIn.parse(box.getString(ENTRY_DATE)));
			entryDate = java.sql.Date.valueOf(date4MySQL);
			String date4MySQL1 = formatterOut.format(formatterIn.parse(box.getString(DOC_DATE)));
			docDate = java.sql.Date.valueOf(date4MySQL1);
			storeSampleTestingEntry.setDefectiveDate(docDate);
		}*/

			storeSampleTestingEntry.setDefectType(box.getString("defectType"));
			storeSampleTestingEntry.setPatientDetails(box.getString("PatientDetails"));
			storeSampleTestingEntry.setPatientReaction(box.getString("PatientReaction"));


			hbt.update(storeSampleTestingEntry);

			Vector detailsIds = box.getVector(DETAIL_ID);
			Vector defectQty = box.getVector(QUANTITY_RECEIVED);
			Vector batchIds = box.getVector(BATCH_ID);
			for (int i = 0; i < detailsIds.size(); i++) {
				int detailId = Integer.parseInt((String)detailsIds.get(i));
				BigDecimal qty =  new BigDecimal((String)defectQty.get(i));
				int batchId = Integer.parseInt((String)batchIds.get(i));
				BigDecimal existingQty =  new BigDecimal(0);

				StoreSampleTestingDetail storeSampleTestingDetail =(StoreSampleTestingDetail)hbt.load(StoreSampleTestingDetail.class,detailId);
				existingQty = storeSampleTestingDetail.getDefectQty();

				storeSampleTestingDetail.setDefectQty(qty);
				hbt.update(storeSampleTestingDetail);

				StoreItemBatchStock batchStock = (StoreItemBatchStock)hbt.load(StoreItemBatchStock.class, batchId);
				batchStock.setClosingStock(batchStock.getClosingStock().subtract(qty.subtract(existingQty)));
				hbt.update(batchStock);
			}
			flag=true;
		} catch (DataAccessException e) {
			e.printStackTrace();
		}

		return flag;
	}

	public Map<String, Object>  insertIssueForIndentupdate(Map<String, Object> utilMap,Box box) {
		boolean b = false;
		Session session = getSession();
		Transaction tx =null;
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<StoreInternalIndentT> storeInternalTList = new ArrayList<StoreInternalIndentT>();
		List<StoreIssueT> childList=new ArrayList<StoreIssueT>();
		int indentDtId = 0;
		int issueId=0;
		int itemId=0;
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		String issueNo ="";
		String issuedBatchIdAndQty="";
		int iss_id=0;
		try{
			tx = session.beginTransaction();
			Date dateStringFormat = null;
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			dateStringFormat = java.sql.Date.valueOf((sdf.format(new Date())));


			if(utilMap.get("deptId")!=null){
				deptId=(Integer)utilMap.get("deptId");
			}
			int totalQtyIssued = 0;
			if(utilMap.get("totalQtyIssued")!=null){
				totalQtyIssued=(Integer)utilMap.get("totalQtyIssued");
			}
			if(utilMap.get("issuedBatchIdAndQty")!=null){
				issuedBatchIdAndQty=(String)utilMap.get("issuedBatchIdAndQty");
			}
			if(utilMap.get("issueNo")!=null){
				issueNo=(String)utilMap.get("issueNo");
			}

			StoreIssueM issueM = new StoreIssueM();
			if(utilMap.get("issueM")!=null){
				issueM=(StoreIssueM)utilMap.get("issueM");
			}
			int indentInternalId=0;
			if(utilMap.get("indentInternalId")!=null){
				indentInternalId=Integer.parseInt(""+utilMap.get("indentInternalId"));
			}
			String IssueMid="";
			if(utilMap.get("IssueMid")!=null){
				//IssueMid=Integer.parseInt(""+utilMap.get("IssueMid"));
				IssueMid=(String)utilMap.get("IssueMid");
			}
			if(utilMap.get("childList")!=null){
				childList=(List<StoreIssueT>)utilMap.get("childList");
			}
			List<Integer> itemIdList = new ArrayList<Integer>();
			if(utilMap.get("itemIdList")!=null){
				itemIdList=(List<Integer>)utilMap.get("itemIdList");
			}
			List batchNumberList = new ArrayList();
			if(utilMap.get("batchNumberList")!=null){
				batchNumberList=(List)utilMap.get("batchNumberList");
			}

			List issQtyList = new ArrayList();
			if(utilMap.get("issQtyList")!=null){
				issQtyList=(List)utilMap.get("issQtyList");
			}
			List expiryDateList = new ArrayList();
			if(utilMap.get("expiryDateList")!=null){
				expiryDateList=(List)utilMap.get("expiryDateList");
			}
			List reqQtyList = new ArrayList();
			if(utilMap.get("reqQtyList")!=null){
				reqQtyList=(List)utilMap.get("reqQtyList");
			}
			List batchIdList = new ArrayList();
			if(utilMap.get("batchIdList")!=null){
				batchIdList=(List)utilMap.get("batchIdList");
			}




			//		    Vector receivedQty = box.getVector(RequestConstants.QTY_ISSUED);
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			//hbt.save(issueM);
			//hbt.refresh(issueM);
			//issueId = issueM.getId();
			//map.put("issueId", issueId);
			int issuemId=issueM.getRequestNo().getId();
			if (childList.size() > 0) {

				for (int i = 0; i < childList.size(); i++) {
					/*StoreIssueT storeIssueT = new StoreIssueT();
		storeIssueT = (StoreIssueT) childList.get(i);
		storeIssueT.setIssueM(issueM);
		hbt.save(storeIssueT);*/
					//StoreIssueT storeIssueT=(StoreIssueT) hbt.load(StoreIssueT.class, visitId);
				}

			}
			List al1=session.createSQLQuery("select id from Store_issue_m where issue_no='"+IssueMid+"'").list();
			iss_id=((BigDecimal)al1.get(0)).intValue();
			String qryy= "select sit.ITEM_ID from store_issue_t sit where sit.issue_m_id='"+iss_id+"'"+" and sit.BATCH_NO='0'";
			List al3=session.createSQLQuery(qryy).list();
			if (itemIdList.size() > 0) {

				for (int k1 = 0; k1 < itemIdList.size(); k1++) {


					/*StoreIssueT storeIssueT = new StoreIssueT();
			storeIssueT = (StoreIssueT) childList.get(i);
			storeIssueT.setIssueM(issueM);
			hbt.save(storeIssueT);*/

					/*String qry="Select  sit.ID from Store_issue_t sit where sit.issue_m_id='"
					+((BigDecimal)al1.get(0)).intValue()+"'"
					+" and sit.item_id='"
					+(Integer)itemIdList.get(k1)+"'"
					+" and sit.BATCH_NO='"
					+""+batchNumberList.get(k1)+"'";*/
					for(int m1 = 0; m1 < al3.size(); m1++){
						if(((Integer)itemIdList.get(k1))==Integer.parseInt(""+al3.get(m1))){

							String qry="Select  sit.ID from Store_issue_t sit where sit.issue_m_id='"
								+((BigDecimal)al1.get(0)).intValue()+"'"
								+" and sit.item_id='"
								+(Integer)itemIdList.get(k1)+"'"
								+" and sit.BATCH_NO='0'";

							//int id=(Integer)session.createSQLQuery(qry).uniqueResult();
							List al=session.createSQLQuery(qry).list();
							int id=0;
							if(al.size()>0){
								id=((BigDecimal)al.get(0)).intValue();
							}
							//if (childList.size() > 0) {

							//for (int i = 0; i < childList.size(); i++) {
							if(id!=0){
								StoreIssueT storeIssueT = new StoreIssueT();
								storeIssueT=(StoreIssueT) hbt.load(StoreIssueT.class, id);


								// javed khan

								//BigDecimal qt_issued=null;
								if(issQtyList.get(k1) != null && !issQtyList.get(k1).equals("") ){
									BigDecimal qt_issued=new BigDecimal((""+issQtyList.get(k1)));
									storeIssueT.setQtyIssued(qt_issued);
								}else{
									storeIssueT.setQtyIssued(null);
								}

								storeIssueT.setBatchNo(""+batchNumberList.get(k1));

								BigDecimal qt_req=new BigDecimal((""+reqQtyList.get(k1)));
								storeIssueT.setQtyRequest(qt_req);


								try
								{
									storeIssueT.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(""+expiryDateList.get(k1)));
								}catch (Exception e) {


								}
								//storeIssueT = (StoreIssueT) childList.get(i);
								hbt.update(storeIssueT);

								//  new code by javed  15-05-2012

								List lstdata = getHibernateTemplate().find("from jkt.hms.masters.business.StoreItemBatchStock ss where ss.Item='"+(Integer)itemIdList.get(k1)
										+"' and ss.BatchNo='"+batchNumberList.get(k1)+"'"
										+" and ss.Department.Id='"+ issueM.getDepartment().getId() +"'");
								if(issQtyList.get(k1) != null && !issQtyList.get(k1).equals("")){
									StoreItemBatchStock itemBatchStock = new StoreItemBatchStock();
									itemBatchStock =(StoreItemBatchStock)lstdata.get(0);
									StoreItemBatchStock batchStockObj = (StoreItemBatchStock)hbt.load(
											StoreItemBatchStock.class, itemBatchStock.getId());
									if(batchStockObj.getClosingStock() != null){
										BigDecimal qt_issued1=new BigDecimal((""+issQtyList.get(k1)));
										batchStockObj.setClosingStock(batchStockObj.getClosingStock().subtract(qt_issued1));

										// javed khan for subtract qty demand
										String qury="update  store_internal_indent_t siit set siit.QTY_REQUEST=siit.QTY_REQUEST-'"
											+qt_issued1+"'"
											+ " where siit.INTERNAL_ID='"
											+ issueM.getRequestNo().getId()+"'"
											+" and siit.ITEM_ID='"
											+ (Integer)itemIdList.get(k1)+"'"
											+" and siit.QTY_REQUEST >0 ";

										Query que=session.createSQLQuery(qury);
										int rowCount=que.executeUpdate();

									}
									BigDecimal issueQty = new BigDecimal(0.00);

									if(batchStockObj.getIssueQty() != null){
										issueQty = batchStockObj.getIssueQty();
									}
									batchStockObj.setIssueQty(issueQty.add(new BigDecimal((""+issQtyList.get(k1)))));
									hbt.update(batchStockObj);

								}
								//  new code by javed  15-05-2012





							}else{
								StoreIssueT storeIssueT1 = new StoreIssueT();
								MasStoreItem masStoreItem = new MasStoreItem();

								masStoreItem.setId((Integer)itemIdList.get(k1));
								storeIssueT1.setItem(masStoreItem);
								storeIssueT1.setItemIssued(masStoreItem);
								BigDecimal qt_issued=new BigDecimal((""+issQtyList.get(k1)));
								storeIssueT1.setBatchNo(""+batchNumberList.get(k1));
								storeIssueT1.setQtyIssued(qt_issued);
								BigDecimal qt_req=new BigDecimal((""+reqQtyList.get(k1)));
								storeIssueT1.setQtyRequest(qt_req);

								try
								{
									storeIssueT1.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(""+expiryDateList.get(k1)));
								}catch (Exception e) {


								}
								StoreIssueM issueM1 = new StoreIssueM();
								issueM1.setId(iss_id);
								storeIssueT1.setIssueM(issueM1);
								/*if(batchIdList.get(k1) != null && !batchIdList.get(k1).equals("")){
				    	StoreItemBatchStock batchStock = new StoreItemBatchStock();
				    	batchStock.setId(Integer.parseInt(""+batchIdList.get(k1)));
				    	storeIssueT1.setBatchStock(batchStock);
				    	}else{*/
								storeIssueT1.setBatchStock(null);
								storeIssueT1.setSrNo(1);
								//}
								storeIssueT1.setIssued("y");
								// storeIssueT1.setSrNo(++k1);
								hbt.save(storeIssueT1);
								hbt.refresh(storeIssueT1);

								//  new code by javed  15-05-2012

								List lstdata = getHibernateTemplate().find("from jkt.hms.masters.business.StoreItemBatchStock ss where ss.Item='"+(Integer)itemIdList.get(k1)
										+"' and ss.BatchNo='"+batchNumberList.get(k1)+"'"
										+" and ss.Department.Id='"+ issueM.getDepartment().getId() +"'");
								if(issQtyList.get(k1) != null && !issQtyList.get(k1).equals("")){
									StoreItemBatchStock itemBatchStock = new StoreItemBatchStock();
									itemBatchStock =(StoreItemBatchStock)lstdata.get(0);
									StoreItemBatchStock batchStockObj = (StoreItemBatchStock)hbt.load(
											StoreItemBatchStock.class, itemBatchStock.getId());
									if(batchStockObj.getClosingStock() != null ){
										BigDecimal qt_issued1=new BigDecimal((""+issQtyList.get(k1)));
										batchStockObj.setClosingStock(batchStockObj.getClosingStock().subtract(qt_issued1));

										// javed khan for subtract qty demand
										String qury="update  store_internal_indent_t siit set siit.QTY_REQUEST=siit.QTY_REQUEST-'"
											+qt_issued1+"'"
											+ " where siit.INTERNAL_ID='"
											+ issueM.getRequestNo().getId()+"'"
											+" and siit.ITEM_ID='"
											+ (Integer)itemIdList.get(k1)+"'"
											+" and siit.QTY_REQUEST >0 ";

										Query que=session.createSQLQuery(qury);
										int rowCount=que.executeUpdate();

									}
									BigDecimal issueQty = new BigDecimal(0.00);

									if(batchStockObj.getIssueQty() != null){
										issueQty = batchStockObj.getIssueQty();
									}
									batchStockObj.setIssueQty(issueQty.add(new BigDecimal((""+issQtyList.get(k1)))));
									hbt.update(batchStockObj);

								}
								//  new code by javed  15-05-2012




							}}
						//}
						//}
					}

				}


				/*List indentList = getHibernateTemplate().findByCriteria(DetachedCriteria.forClass(StoreInternalIndentM.class)
		.add(Restrictions.eq("Id", issueM.getRequestNo().getId())));*/
				List indentList =session.createCriteria(StoreInternalIndentM.class).add(Restrictions.eq("Id", issueM.getRequestNo().getId())).list();
				StoreInternalIndentM indentM1 = new StoreInternalIndentM();
				indentM1 = (StoreInternalIndentM)indentList.get(0);
				indentM1.setStatus("y");
				session.saveOrUpdate(indentM1);

				//Update Item Stock
				List lstData1 = session.createCriteria(StoreIssueT.class).add(Restrictions.eq("IssueM.Id", iss_id)).list();
				//List lstData1 = new ArrayList(header.getIssueId());
				int j=0;
				int k=1;
				for(int i=0;i<lstData1.size();i++) {
					//if(!(((StoreIssueT)lstData1.get(i)).getBatchNo().trim()).equals("0")){
					MasStoreItem item = ((StoreIssueT)lstData1.get(i)).getItem();

					/*List lstdata = getHibernateTemplate().find("from jkt.hms.masters.business.StoreItemBatchStock ss where ss.Item='"+((StoreIssueT)lstData1.get(i)).getItem().getId()
		+"' and ss.BatchNo='"+((StoreIssueT)lstData1.get(i)).getBatchNo().trim()+"'"
		+" and ss.Department.Id='"+ issueM.getDepartment().getId() +"'");
		System.out.println(((StoreIssueT)lstData1.get(i)).getItem().getId()+" >>> "+((StoreIssueT)lstData1.get(i)).getBatchNo().trim()+" >> "+issueM.getDepartment().getId()+"chck>>>>>"+lstdata.size());
		if(lstdata.size()>0 && ((StoreIssueT)lstData1.get(i)).getQtyIssued() != null){
		StoreItemBatchStock itemBatchStock = new StoreItemBatchStock();
		itemBatchStock =(StoreItemBatchStock)lstdata.get(0);
		StoreItemBatchStock batchStockObj = (StoreItemBatchStock)hbt.load(
		StoreItemBatchStock.class, itemBatchStock.getId());
		if(batchStockObj.getClosingStock() != null){
			System.out.println( batchStockObj.getClosingStock()+" ><sub> "+((StoreIssueT)lstData1.get(i)).getQtyIssued());
		batchStockObj.setClosingStock(batchStockObj.getClosingStock()
		.subtract(((StoreIssueT)lstData1.get(i)).getQtyIssued()));
		// javed khan for subtract qty demand
		System.out.println(((StoreIssueT)lstData1.get(i)).getQtyIssued()+" -- "+issueM.getRequestNo().getId()+" >> "+((StoreIssueT)lstData1.get(i)).getItem().getId());
		String qury="update  store_internal_indent_t siit set siit.QTY_REQUEST=siit.QTY_REQUEST-'"
			+(((StoreIssueT)lstData1.get(i))).getQtyIssued()+"'"
		   + " where siit.INTERNAL_ID='"
			   + issueM.getRequestNo().getId()+"'"
			   +" and siit.ITEM_ID='"
			   + ((StoreIssueT)lstData1.get(i)).getItem().getId()+"'"
			   +" and siit.QTY_REQUEST >0 ";

		Query que=session.createSQLQuery(qury);
	    int rowCount=que.executeUpdate();

		}
		BigDecimal issueQty = new BigDecimal(0.00);

		if(batchStockObj.getIssueQty() != null){
		issueQty = batchStockObj.getIssueQty();
		}
		batchStockObj.setIssueQty(issueQty.add(((StoreIssueT)lstData1.get(i)).getQtyIssued()));
		hbt.update(batchStockObj);*/
					int storeFyId = 0;
					Criteria c = session.createCriteria(StoreFyDocumentNo.class).add(
							Restrictions.eq("Department.Id",deptId));
					storeFyDocumentNoList = c.list();
					for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
						storeFyId = documentNo.getId();
					}
					/*HibernateTemplate hbt4 = getHibernateTemplate();
		hbt4.setFlushModeName("FLUSH_EAGER");
		hbt4.setCheckWriteOperations(false);
		StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) hbt4.load(StoreFyDocumentNo.class, storeFyId);
		storeFyDocumentNo.setIssueDeptNo(issueNo);
		hbt4.update(storeFyDocumentNo);
		hbt4.refresh(storeFyDocumentNo);*/
					j=j+1;
					k = k+1;
				}
			}
			//}
			int p=0;
			int q=1;

			Vector itemList = box.getVector(RequestConstants.ITEM_ID);

			for(int ii=0;ii<itemList.size();ii++){
				Criteria crit = session.createCriteria(StoreInternalIndentT.class)
				.createAlias("Internal", "I")
				.createAlias("Item", "item")
				.add(Restrictions.eq("I.Id",indentInternalId ))
				//.add(Restrictions.eq("I.Id",issuemId ))
				.add(Restrictions.eq("item.Id",Integer.parseInt(itemList.get(ii).toString())));
				storeInternalTList = crit.list();
				int internalIndentTId =0;
				for(StoreInternalIndentT storeInternalIndentT : storeInternalTList)
				{
					internalIndentTId = storeInternalIndentT.getId();
					HibernateTemplate hbt5 = getHibernateTemplate();
					hbt5.setFlushModeName("FLUSH_EAGER");
					hbt5.setCheckWriteOperations(false);
					StoreInternalIndentT internalIndentT = new StoreInternalIndentT();
					internalIndentT = (StoreInternalIndentT)hbt5.load(StoreInternalIndentT.class, internalIndentTId);
					int quantityRcvd=0;
					if(internalIndentT.getQtyIssued()!=null){
						quantityRcvd=internalIndentT.getQtyIssued();
					}
					int quantityReceivedFinal=quantityRcvd +box.getInt("qtyIssued"+q);
					internalIndentT.setQtyIssued(quantityReceivedFinal);
					String tempIssuedBatchIdAndQty="";
					int     batchId= box.getInt(RequestConstants.BATCH_ID+p);
					issuedBatchIdAndQty=issuedBatchIdAndQty+"#"+batchId+"/"+box.getInt(RequestConstants.QTY_ISSUED+q);
					internalIndentT.setIssuedBatchIdAndQty(issuedBatchIdAndQty);
					hbt5.update(internalIndentT);
					hbt5.refresh(internalIndentT);
				}
				p =p+1;
				q=q+1;
			}
			b = true;
			tx.commit();
		}catch(Exception exception){
			b = false;
			tx.rollback();
			exception.printStackTrace();
		}
		map.put("issueId", iss_id);
		map.put("b", b);
		return map;
	}


	public Map getMMFItem(Map<String,Object> dataMap) {
		int deptId = 0;
		int batchId = 0;
		int hospitalId=0;
		String lifeType = "";
		Date expiryDate = new Date();
		Date manufacturingDate=new Date();
		String manufacturer = "";
		List objectList = new ArrayList();
		List objectList1 = new ArrayList();
		List objectList2 = new ArrayList();
		List<MasStoreItem> itemList=new ArrayList<MasStoreItem>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<MasStoreAirForceDepot> masStoreAirForceDepotList = new ArrayList<MasStoreAirForceDepot>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		String batchNoExact = "";
		int indentQty = 0;
		String no = "";
		session = (Session) getSession();
		Calendar calendar=Calendar.getInstance();
		int year=calendar.get(calendar.YEAR);
		int mId = 1;
		try {
			if (dataMap.get("deptId") != null)
				deptId = Integer.parseInt("" + dataMap.get("deptId"));
			if (dataMap.get("hospitalId") != null)
				hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));

			/*itemList=session.createCriteria(MasStoreItem.class).add(
							Restrictions.eq("SelfLife", lifeType)).add(
							Restrictions.eq("Status", "y")).list();*/

			String query="select smdm.MMF_FOR_THE_YEAR, msi.NOMENCLATURE,msi.PVMS_NO , smdt.MMF_IN_QTY,nvl(sum(sibs.CLOSING_STOCK),0),msic.ITEM_UNIT_NAME "
				+",msi.item_id, mss.SECTION_CODE,mm.MANUFACTURER_NAME,mm.MANUFACTURER_id, msb.brand_id,msb.brand_name,msi.BRANDED_GENERIC  from  store_mmf_department_t smdt"
				+" left outer join mas_store_item msi on smdt.ITEM_ID=msi.ITEM_ID"
				+" left outer join store_mmf_department_m smdm on smdt.STORE_MMF_DEPARTMENT_M_ID=smdm.ID"
				+" left outer join store_item_batch_stock sibs on smdt.ITEM_ID=sibs.ITEM_ID  and sibs.department_id='"
				+ deptId+"'"
				+" and sibs.hospital_id='"
				+ hospitalId+"'"
				+" left outer join MAS_STORE_ITEM_CONVERSION  msic on msi.ITEM_CONVERSION_ID= msic.ITEM_CONVERSION_ID"
				+" left outer join mas_store_section mss on msi.SECTION_ID=mss.SECTION_ID"
				+" left outer join mas_store_brand msb on msi.brand_id=msb.brand_id"
				+" left outer join mas_manufacturer mm on mm.manufacturer_id=msb.MANUFACTURER_ID"

				+" where smdm.MMF_FOR_THE_YEAR='"
				+year+"'"
				+" and smdm.MMF_STORE_TYPE='e'  and smdm.STORE_WARD_DEPT='"
				+ deptId+"' and smdm.hospital_id='"+hospitalId+"' HAVING smdt.MMF_IN_QTY > nvl(sum(sibs.CLOSING_STOCK),0)"
				+" group by smdm.MMF_FOR_THE_YEAR, msi.NOMENCLATURE,msi.PVMS_NO , smdt.MMF_IN_QTY,msic.ITEM_UNIT_NAME,msi.item_id,mss.SECTION_CODE,msb.brand_id,msb.brand_name,mm.MANUFACTURER_ID,mm.MANUFACTURER_NAME,msi.BRANDED_GENERIC";

			objectList1 = (List) session.createSQLQuery(query).list();
			/*
			if(lifeType.equalsIgnoreCase("SLB"))
					{

						for (Iterator itr1 = objectList1.iterator(); itr1.hasNext();) {
							Object[] object = (Object[]) itr1.next();
							int mmf=((BigDecimal)object[3]).intValue();
							int closingStock=((BigDecimal)object[4]).intValue();
							int mmfForIndent=6*mmf;
							if(mmfForIndent>closingStock)
							{
								indentQty=mmfForIndent-closingStock;
								objectList2.add(object);
								// objectList1.add(indentQty);
							}
							else{
								//objectList1.remove(object);

							}

				}

			}
			else if(lifeType.equalsIgnoreCase("SL")){
				for (Iterator itr1 = objectList1.iterator(); itr1.hasNext();) {
					Object[] object = (Object[]) itr1.next();
					int mmf=((BigDecimal)object[3]).intValue();
					int closingStock=((BigDecimal)object[4]).intValue();
					int mmfForIndent=6*mmf;
					if(mmfForIndent>closingStock)
					{
						indentQty=mmfForIndent-closingStock;
						objectList2.add(object);
						// objectList1.add(indentQty);
					}
					else{
						//objectList1.remove(object);

					}
		}

			}
			else if(lifeType.equalsIgnoreCase("LL")){
				for (Iterator itr1 = objectList1.iterator(); itr1.hasNext();) {
					Object[] object = (Object[]) itr1.next();
					int mmf=((BigDecimal)object[3]).intValue();
					int closingStock=((BigDecimal)object[4]).intValue();
					int mmfForIndent=9*mmf;
					if(mmfForIndent>closingStock)
					{
						indentQty=mmfForIndent-closingStock;
						objectList2.add(object);
						// objectList1.add(indentQty);
					}
					else{
						//objectList1.remove(object);

					}
		}

			}

			if(objectList2.size()==0)
			{
				String msg="No Record Found. !";
				map.put("msg", msg);
			}

			// for create indent
			sectionList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasStoreSection ");

			masStoreAirForceDepotList = getHibernateTemplate()
			.find("from jkt.hms.masters.business.MasStoreAirForceDepot as md where md.Status = 'y'");
			storeFyDocumentNoList = (List) getHibernateTemplate()
			.find("from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"
							+ deptId + "'");
	for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
		if (storeFyDocumentNo.getIndentToDepotNo() != null) {
			no = ("" + storeFyDocumentNo.getIndentToDepotNo());
			no = getMaxNo(no);
		} else {
			no = getMaxNo("");
		}

	}

	// javed khan 28 march
	List<StoreIndentM> searchStoreIndentMList = new ArrayList<StoreIndentM>();
	Session session = getSession();
	searchStoreIndentMList = session.createCriteria(
			StoreIndentM.class).add(
			Restrictions.eq("Status", "o"))
			.add(Restrictions.eq("Department.Id", deptId)).addOrder(
			Order.desc("Id")).list();
	map.put("searchStoreIndentMList", searchStoreIndentMList);

			 */

		} catch (Exception e) {
			e.printStackTrace();
		}
		//map.put("expiryDate", expiryDate);
		// map.put("manufacturingDate",manufacturingDate);
		//map.put("manufacturer", manufacturer);
		//map.put("mId", mId);
		//map.put("sectionList", sectionList);
		//map.put("objectList2",objectList2);
		map.put("objectList1",objectList1);
		//map.put("maxIndentNo", no);
		//map.put("masStoreAirForceDepotList", masStoreAirForceDepotList);
		return map;

	}







	public Map<String, Object> ExportExcelForPerformaB(Box box) {
		int date = box.getInt(MMF_DEPARTMENT_DATE);
		String storeType = box.get("storeType");
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<String> supplierNameList=new ArrayList<String>();
		List<String> billNoList=new ArrayList<String>();
		List<String> performaList=new ArrayList<String>();
		List<String> compList=new ArrayList<String>();
		List<String> supplierBillNoList=new ArrayList<String>();
		List<String> priscribedByList=new ArrayList<String>();
		List<String> indentMarkedList=new ArrayList<String>();
		List<BigDecimal> totalDiscountList=new ArrayList<BigDecimal>();
		String pro="";
		String supplierName="";
		String billNo="";
		String billDate="";
		int hospitalId=0;

		pro=box.get("pro");
		hospitalId=box.getInt("hospitalId");

		String supplierNameString="select mss.SUPPLIER_NAME from  store_proforma_header sph" +
		" left outer join store_proforma_detail spd on sph.PROFORMA_ID= spd.PROFORMA_ID " +
		" left outer join STORE_LOANIN_T sgt on spd.CRV_ID=sgt.LOANIN_TRANS_ID" +
		" LEFT outer join STORE_LOANIN_M sgm on sgm.LOANIN_MASTER_ID=sgt.LOANIN_MASTER_ID" +
		" left outer join mas_store_supplier mss on sgm.SUPPLIER_ID=mss.SUPPLIER_ID" +
		" where  sph.PROFORMA_no='"
		+pro
		+"' group by mss.SUPPLIER_NAME";

		supplierNameList = session.createSQLQuery(supplierNameString).list();

		if(supplierNameList.size()>0)
		{
			try
			{
				supplierName=supplierNameList.get(0);
			}catch(Exception e)
			{
				supplierName="";
			}


		}

		String billNoString="select nvl(sph.INVOICE_NO,'NA')as billNo,sph.INVOICE_DATE" +
		" from  store_proforma_header sph" +
		" where  sph.PROFORMA_no='"+pro+"'";

		billNoList = session.createSQLQuery(billNoString).list();

		if(billNoList.size()>0)
		{
			for (Iterator iterator = billNoList.iterator(); iterator.hasNext();)
			{
				Object[] object = (Object[]) iterator.next();

				try
				{
					billNo=object[0].toString();
				}
				catch(Exception e)
				{
					billNo="";
				}
				try
				{
					String billDateSplit=object[1].toString();
					billDateSplit=billDateSplit.substring(0,10);
					String arrTo[]=billDateSplit.split("-");
					billDateSplit=arrTo[2]+"/"+arrTo[1]+"/"+arrTo[0];
					billDate=billDateSplit;
				}
				catch(Exception e)
				{
					billDate="";
				}
			}

		}


		String performaQry="select spd.CATEGORY,spd.AU, sum(spd.QTY),sph.DEPARTMENT_ID,sph.HOSPITAL_ID,sph.PROFORMA_DATE,sph.PROFORMA_ID,sph.PROFORMA_NO" +
		" ,msi.NOMENCLATURE,msi.PVMS_NO , " +
		"  CASE WHEN sum(sgt.RECEIVED_QTY) = 0 THEN 0 ELSE sum(sgt.AMOUNT_VALUE)/sum(sgt.RECEIVED_QTY) END ,"+
		"  sum(sgt.DISCOUNT),sum(sgt.AMOUNT_VALUE),spd.item_id," +
		"  avg(sgt.DISPERCENTAGE) as fin ,"+
		" sph.round_off,spd.INDENT_NO,avg(SGT.UNIT_RATE),sph.CHALLAN_FROM_DATE ,sph.CHALLAN_TO_DATE from  store_proforma_header sph" +
		" left outer join store_proforma_detail spd on sph.PROFORMA_ID= spd.PROFORMA_ID" +
		" left outer join mas_store_item msi on  spd.ITEM_ID= msi.ITEM_ID" +
		" left outer join STORE_LOANIN_T sgt on spd.CRV_ID=sgt.LOANIN_TRANS_ID" +
		" left outer join mas_manufacturer mm on sgt.MANUFACTURER_ID=mm.MANUFACTURER_ID" +
		" LEFT outer join STORE_LOANIN_M sgm on sgm.LOANIN_MASTER_ID=sgt.LOANIN_MASTER_ID" +
		" left outer join mas_store_supplier mss on sgm.SUPPLIER_ID=mss.SUPPLIER_ID" +
		" where  sph.PROFORMA_no='"+pro+"' and sph.HOSPITAL_ID="+hospitalId+
		" group by spd.CATEGORY,spd.AU,sph.DEPARTMENT_ID,sph.HOSPITAL_ID,sph.PROFORMA_DATE,sph.PROFORMA_ID,sph.PROFORMA_NO" +
		" ,msi.NOMENCLATURE,msi.PVMS_NO,sph.round_off" +
		" ,spd.item_id,spd.INDENT_NO,sph.CHALLAN_FROM_DATE,sph.CHALLAN_TO_DATE";

		performaList = session.createSQLQuery(performaQry).list();

		String sumDiscountString="select  sum(sgt.DISCOUNT),sum(sgt.AMOUNT_VALUE)" +
		" from  store_proforma_header sph " +
		" left outer join store_proforma_detail spd on sph.PROFORMA_ID= spd.PROFORMA_ID " +
		" left outer join mas_store_item msi on  spd.ITEM_ID= msi.ITEM_ID " +
		" left outer join STORE_LOANIN_T sgt on spd.CRV_ID=sgt.LOANIN_TRANS_ID " +
		" left outer join mas_manufacturer mm on sgt.MANUFACTURER_ID=mm.MANUFACTURER_ID " +
		" LEFT outer join STORE_LOANIN_M sgm on sgm.LOANIN_MASTER_ID=sgt.LOANIN_MASTER_ID" +
		" left outer join mas_store_supplier mss on sgm.SUPPLIER_ID=mss.SUPPLIER_ID " +
		" where  sph.PROFORMA_no='"+pro+"' and sph.HOSPITAL_ID="+hospitalId;

		totalDiscountList=session.createSQLQuery(sumDiscountString).list();

		String performaNo="";
		String performaDate="";
		String challanDateFrom="";
		String challanDateTo="";

		if(performaList.size()>0)
		{
			for (Iterator iterator = performaList.iterator(); iterator.hasNext();)
			{
				Object[] object = (Object[]) iterator.next();
				try
				{
					performaNo=object[7].toString();
				}
				catch(Exception e)
				{
					performaNo="";
				}
				try
				{
					String performaDateSplit=object[5].toString();

					performaDateSplit=performaDateSplit.substring(0,10);
					String arrTo[]=performaDateSplit.split("-");
					performaDateSplit=arrTo[2]+"/"+arrTo[1]+"/"+arrTo[0];
					performaDate=performaDateSplit;


				}
				catch(Exception e)
				{
					performaDate="";
				}


				try{
					String challanDateFromSplit=object[18].toString();
					challanDateFromSplit=challanDateFromSplit.substring(0,10);
					String arrTo[]=challanDateFromSplit.split("-");
					challanDateFromSplit=arrTo[2]+"/"+arrTo[1]+"/"+arrTo[0];
					challanDateFrom=challanDateFromSplit;
				}catch(Exception e){
					challanDateFrom="";
				}
				try{
					String challanDateToSplit=object[19].toString();
					challanDateToSplit=challanDateToSplit.substring(0,10);
					String arrTo[]=challanDateToSplit.split("-");
					challanDateToSplit=arrTo[2]+"/"+arrTo[1]+"/"+arrTo[0];
					challanDateTo=challanDateToSplit;

				}catch(Exception e){
					challanDateTo="";					
				}

			}	
		}

		try {
			List<Object> vendorDataList = new ArrayList<Object>();
			//vendorDataList = session.createSQLQuery(qry).list();

			byte[] buffer = new byte[18024];
			HSSFWorkbook wb = new HSSFWorkbook();
			HSSFSheet sheet = wb.createSheet("TESTEXCEL");
			// Create a new font and alter it.
			HSSFFont font = wb.createFont();
			font.setFontHeightInPoints((short) 10);
			font.setFontName(HSSFFont.FONT_ARIAL);
			font.setColor((short) 62);
			font.setItalic(false);
			font.setStrikeout(false);
			font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
			HSSFFont font1 = wb.createFont();
			font1.setFontHeightInPoints((short) 10);
			font1.setFontName(HSSFFont.FONT_ARIAL);
			font1.setColor((short) 0x0);
			font1.setItalic(false);
			font1.setStrikeout(false);
			font1.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);



			HSSFHeader header = sheet.getHeader();
			//header.setCenter("PROFORMA 'B' LOCAL PURCHASE OF MEDICAL STORES UNDER LCH-749/01 ");
			//header.setCenter("(FOR USE IN SMC/MI ROOM/ DENTAL CENTER ONLY)");
			// Fonts are set into a style so create a new one to
			// use.
			HSSFCellStyle style = wb.createCellStyle();
			style.setFont(font);

			HSSFCellStyle style1 = wb.createCellStyle();
			style1.setFont(font1);

			HSSFCellStyle style2=wb.createCellStyle();

			HSSFCellStyle lineStyle=wb.createCellStyle();
			lineStyle.setWrapText(true);
			lineStyle.setBorderLeft((short)1);
			lineStyle.setBorderRight((short)1);
			lineStyle.setBorderTop((short)1);
			lineStyle.setBorderBottom((short)1);
			//style1.setFont(font1);
			lineStyle.setVerticalAlignment(lineStyle.VERTICAL_JUSTIFY);

			HSSFCellStyle lineStyle1=wb.createCellStyle();
			lineStyle1.setWrapText(true);
			lineStyle1.setBorderLeft((short)1);
			lineStyle1.setBorderRight((short)1);
			lineStyle1.setBorderTop((short)1);
			lineStyle1.setBorderBottom((short)1);
			lineStyle1.setFont(font1);
			lineStyle1.setVerticalAlignment(lineStyle.VERTICAL_JUSTIFY);

			HSSFRow row0 = sheet.createRow((short) 0); // Create a cell and
			HSSFCell cell0 = row0.createCell((short) 3);
			cell0.setCellValue("PROFORMA 'B' LOCAL PURCHASE OF MEDICAL STORES UNDER LCH-749/01 ");
			//  sheet.getRow((short)0).getCell((short)3).setCellStyle(lineStyle1);


			HSSFRow row999 = sheet.createRow((short) 1); // Create a cell and
			HSSFCell cell999 = row999.createCell((short) 5);
			cell999.setCellValue("(FOR USE IN SMC/MI ROOM/ DENTAL CENTER ONLY)");
			//  sheet.getRow((short)1).getCell((short)5).setCellStyle(lineStyle1);


			HSSFRow row1 = sheet.createRow((short) 2); // Create a cell and
			HSSFCell cell1 = row1.createCell((short) 10);
			cell1.setCellValue("Name of Supplier  :"+supplierName);
			// sheet.getRow((short)2).getCell((short)10).setCellStyle(lineStyle1);

			HSSFRow row2 = sheet.createRow((short) 3); // Create a cell and
			HSSFCell cell2 = row2.createCell((short) 10);
			cell2.setCellValue("Bill No.          :"+billNo);
			// sheet.getRow((short)3).getCell((short)10).setCellStyle(lineStyle1);

			HSSFRow row3 = sheet.createRow((short) 4); // Create a cell and
			HSSFCell cell3 = row3.createCell((short) 10);
			cell3.setCellValue("Dated             :"+billDate);
			//sheet.getRow((short)4).getCell((short)10).setCellStyle(lineStyle1);


			HSSFRow row4 = sheet.createRow((short) 6); // Create a cell and
			HSSFCell cell4 = row4.createCell((short) 1);
			cell4.setCellValue("Name of Purchasing Unit:");

			HSSFRow row5 = sheet.createRow((short) 7); // Create a cell and
			HSSFCell cell5 = row5.createCell((short) 1);
			cell5.setCellValue("PERFORMA 'B' SL No  :   "+performaNo+"    DATED  "+performaDate);


			HSSFRow row6 = sheet.createRow((short) 8); // Create a cell and
			HSSFCell cell6 = row6.createCell((short) 1);
			cell6.setCellValue("Period during which under mentioned Drugs/Consumables were purchased for which this Performa is being raised  from "+ challanDateFrom +" to "+challanDateTo);


			HSSFRow row7 = sheet.createRow((short) 10); // Create a cell and
			HSSFCell cell7 = row7.createCell((short) 0);
			cell7.setCellValue("Sl. No.");
			sheet.getRow((short)10).getCell((short)0).setCellStyle(lineStyle1);

			HSSFCell cell8 = row7.createCell((short) 1);
			cell8.setCellValue("PVMS/NIV No.");
			sheet.getRow((short)10).getCell((short)1).setCellStyle(lineStyle1);

			HSSFCell cell9 = row7.createCell((short) 2);
			cell9.setCellValue("Nomenclature");
			sheet.getRow((short)10).getCell((short)2).setCellStyle(lineStyle1);

			HSSFCell cell10 = row7.createCell((short) 3);
			cell10.setCellValue("A/U");
			sheet.getRow((short)10).getCell((short)3).setCellStyle(lineStyle1);

			HSSFCell cell11 = row7.createCell((short) 4);
			cell11.setCellValue("QTY");
			sheet.getRow((short)10).getCell((short)4).setCellStyle(lineStyle1);


			HSSFCell cell12 = row7.createCell((short) 5);
			cell12.setCellValue("Brand/Generic");
			sheet.getRow((short)10).getCell((short)5).setCellStyle(lineStyle1);

			HSSFCell cell13 = row7.createCell((short) 6);
			cell13.setCellValue("Company");
			sheet.getRow((short)10).getCell((short)6).setCellStyle(lineStyle1);




			HSSFCell cell14 = row7.createCell((short) 7);
			cell14.setCellValue("MRP /Unit");
			sheet.getRow((short)10).getCell((short)7).setCellStyle(lineStyle1);


			HSSFCell cell15 = row7.createCell((short) 8);
			cell15.setCellValue("Total Of MRP");
			sheet.getRow((short)10).getCell((short)8).setCellStyle(lineStyle1);


			HSSFCell cell16 = row7.createCell((short) 9);
			cell16.setCellValue("% of rebate obtained");
			sheet.getRow((short)10).getCell((short)9).setCellStyle(lineStyle1);



			HSSFCell cell17 = row7.createCell((short) 10);
			cell17.setCellValue("Actual Cost Paid");
			sheet.getRow((short)10).getCell((short)10).setCellStyle(lineStyle1);



			HSSFCell cell18 = row7.createCell((short) 11);
			cell18.setCellValue("Name of Supplier,Bill NO & date");
			sheet.getRow((short)10).getCell((short)11).setCellStyle(lineStyle1);

			HSSFCell cell19 = row7.createCell((short) 12);
			cell19.setCellValue("Particular of patient");
			sheet.getRow((short)10).getCell((short)12).setCellStyle(lineStyle1);

			HSSFCell cell20 = row7.createCell((short) 13);
			cell20.setCellValue("DIAGNOSIS");
			sheet.getRow((short)10).getCell((short)13).setCellStyle(lineStyle1);



			HSSFCell cell21 = row7.createCell((short) 14);
			cell21.setCellValue("DOSAGES ");
			sheet.getRow((short)10).getCell((short)14).setCellStyle(lineStyle1);



			HSSFCell cell22 = row7.createCell((short) 15);
			cell22.setCellValue("PRESCRIBED BY ");
			sheet.getRow((short)10).getCell((short)15).setCellStyle(lineStyle1);

			HSSFCell cell23 = row7.createCell((short) 16);
			cell23.setCellValue("Indent No Marked N/A(For PVMS Store Only)");
			sheet.getRow((short)10).getCell((short)16).setCellStyle(lineStyle1);





			int row = 11;
			int slno = 0;
			int srNo=0;
			String address="";
			//for (Iterator iterator = vendorDataList.iterator(); iterator.hasNext();)
			int i=1;
			int itemId=0;
			String pvmsNo="";
			String nomenclature="";
			String au="";
			String category="";
			String compString="";
			String companyName="";
			String supplierNameAndBillNo="";
			String supplierNameAndBillNoString="";

			String priscribedByString="";
			String indentMarked="";
			String marked="";
			BigDecimal qty=new BigDecimal(0);
			BigDecimal mrp=new BigDecimal(0);
			BigDecimal cost=new BigDecimal(0);
			BigDecimal rebat=new BigDecimal(0);
			BigDecimal totalDiscount=new BigDecimal(0);
			BigDecimal totalAmount=new BigDecimal(0);
			BigDecimal total = new BigDecimal(0);
			BigDecimal round_off = new BigDecimal(0);
			String indenNo="";
			BigDecimal unitRate=new BigDecimal(0);
			BigDecimal totalMrpCost=new BigDecimal(0);
			int lastRowInsert=performaList.size();
			BigDecimal totalMrpCostPageWise=new BigDecimal(0);
			BigDecimal totalActCostPageWise=new BigDecimal(0);
			int k2=1;
			if(performaList.size()>0)
			{
				for (Iterator iterator = performaList.iterator(); iterator.hasNext();)
				{
					srNo++;
					Object[] object = (Object[]) iterator.next();
					try
					{
						pvmsNo=object[9].toString();
					}catch(Exception e)
					{
						pvmsNo="";
					}
					try
					{
						nomenclature=object[8].toString();
					}catch(Exception e)
					{
						nomenclature="";
					}

					try
					{
						category=object[0].toString();
					}catch(Exception e)
					{
						category="";
					}

					try
					{
						au=object[1].toString();
					}catch(Exception e)
					{
						au="";
					}

					try
					{
						qty=new BigDecimal(object[2].toString());
					}catch(Exception e)
					{
						qty=new BigDecimal(0);
					}

					try
					{
						mrp=new BigDecimal(object[10].toString());
					}catch(Exception e)
					{
						mrp=new BigDecimal(0);
					}

					try
					{
						cost=new BigDecimal(object[12].toString());
					}catch(Exception e)
					{
						cost=new BigDecimal(0);
					}

					try
					{
						rebat=new BigDecimal(object[14].toString());
					}catch(Exception e)
					{
						rebat=new BigDecimal(0);
					}

					try
					{
						itemId=Integer.parseInt(object[13].toString());
					}catch(Exception e)
					{
						itemId=0;
					}

					try
					{
						total=new BigDecimal(object[14].toString());
					}catch(Exception e)
					{
						total=new BigDecimal(0);
					}
					try
					{
						round_off=new BigDecimal(object[15].toString());
					}catch(Exception e)
					{
						round_off=new BigDecimal(0);
					}
					try
					{
						indenNo=object[16].toString();
					}catch(Exception e)
					{
						indenNo="NA";
					}
					try
					{
						unitRate=new BigDecimal(object[17].toString());
					}catch(Exception e)
					{
						unitRate=new BigDecimal(0);
					}


					try
					{
						totalMrpCost=unitRate.multiply(qty);
					}catch(Exception e)
					{
						totalMrpCost=new BigDecimal(0);
					}



					compString="select mm.MANUFACTURER_NAME,spd.ITEM_ID from store_proforma_header sph" +
					" left outer join store_proforma_detail spd on sph.PROFORMA_ID= spd.PROFORMA_ID" +
					" left outer join STORE_LOANIN_T sgt on spd.CRV_ID=sgt.LOANIN_TRANS_ID" +
					" left outer join store_item_batch_stock msit on sgt.BRAND_ID=msit.BRAND_ID" +
					" left outer join mas_store_brand msb on msit.BRAND_ID=msb.BRAND_ID" +
					" left outer join mas_manufacturer mm on msb.MANUFACTURER_ID=mm.MANUFACTURER_ID" +
					" right outer join STORE_LOANIN_M sgm on sgm.LOANIN_MASTER_ID=sgt.LOANIN_MASTER_ID" +
					" left outer join mas_store_supplier mss on sgm.SUPPLIER_ID=mss.SUPPLIER_ID" +
					" where  sph.PROFORMA_no='"+pro+"' and spd.item_id="+itemId+
					" group by spd.item_id,mm.MANUFACTURER_NAME";

					compList = session.createSQLQuery(compString).list();
					if(compList.size()>0)
					{
						for (Iterator iterator1 = compList.iterator(); iterator1.hasNext();)
						{
							Object[] object1 = (Object[]) iterator1.next();
							try
							{
								companyName=object1[0].toString();
							}catch(Exception e)
							{
								companyName="";
							}
						}
					}


					supplierNameAndBillNoString="select nvl(sph.INVOICE_NO,'NA')as billNo,sph.INVOICE_DATE ,mss.SUPPLIER_NAME" +
					" from  store_proforma_header sph" +
					" left outer join store_proforma_detail spd on sph.PROFORMA_ID= spd.PROFORMA_ID" +
					" left outer join STORE_LOANIN_T sgt  on spd.PRESCRIPTION_ID=sgt.ID" +
					" LEFT outer join STORE_LOANIN_M sgm on sgm.LOANIN_MASTER_ID=sgt.LOANIN_MASTER_ID" +
					" left outer join mas_store_supplier mss on sgm.SUPPLIER_ID=mss.SUPPLIER_ID" +
					" where  sph.PROFORMA_no='"+pro+"' and spd.item_id="+itemId+" and sph.HOSPITAL_ID="+hospitalId+" group by sph.INVOICE_NO,sph.INVOICE_DATE,mss.SUPPLIER_NAME";

					supplierBillNoList = session.createSQLQuery(supplierNameAndBillNoString).list();

					if(supplierBillNoList.size()>0)
					{
						for (Iterator iterator2 = supplierBillNoList.iterator(); iterator2.hasNext();)
						{
							Object[] object2 = (Object[]) iterator2.next();

							try
							{
								String billDateSplitr=object2[1].toString();
								billDateSplitr=billDateSplitr.substring(0,10);
								String arrTo[]=billDateSplitr.split("-");
								billDateSplitr=arrTo[2]+"/"+arrTo[1]+"/"+arrTo[0];
								String billDater=billDateSplitr;




								supplierNameAndBillNo=object2[2].toString()+","+object2[0].toString()+","+billDater;
							}catch(Exception e)
							{
								supplierNameAndBillNo="";
							}
						}
					}



					priscribedByString="select distinct to_char(v.WORKING_DIAGNOSIS),me.FIRST_NAME,me.LAST_NAME ,pph.specialty,"+
					"case mrel.RELATION_NAME when 'Self' then (p.SERVICE_NO ||' '||mr.RANK_NAME ||' '||p.S_FIRST_NAME||' '|| nvl(p.S_LAST_NAME,'') )"+ 
					"else (mrel.RELATION_NAME||' '||p.SERVICE_NO||' '||mr.RANK_NAME||' '||p.S_FIRST_NAME||' '||nvl(p.S_LAST_NAME,'')) end as rel"+
					",ppd.DOSAGE|| ' ' ||mf.FREQUENCY as dosages"+
					" from  store_proforma_header sph"+
					" left outer join store_proforma_detail spd on sph.PROFORMA_ID= spd.PROFORMA_ID"+ 
					" left outer join mas_store_item msi on  spd.ITEM_ID= msi.ITEM_ID"+
					" left outer join STORE_LOANIN_T sgt on spd.CRV_ID=sgt.LOANIN_TRANS_ID"+
					" left outer join mas_manufacturer mm on sgt.MANUFACTURER_ID=mm.MANUFACTURER_ID"+
					" LEFT outer join STORE_LOANIN_M sgm on sgm.LOANIN_MASTER_ID=sgt.LOANIN_MASTER_ID"+
					" left outer join mas_store_supplier mss on sgm.SUPPLIER_ID=mss.SUPPLIER_ID"+
					" left outer join patient_prescription_details ppd on  spd.PRESCRIPTION_ID= ppd.ID"+
					" right outer join patient_prescription_header pph on ppd.PRESCRIPTION_ID=pph.PRESCRIPTION_ID"+
					" left outer join mas_frequency mf on ppd.FREQUENCY_ID=mf.FREQUENCY_ID"+
					" left outer join visit v on pph.VISIT_ID=v.VISIT_ID"+
					" left outer join patient p on v.HIN_ID=p.HIN_ID"+
					" left outer join mas_employee me on v.DOCTOR_ID=me.EMPLOYEE_ID"+
					" left outer join mas_hospital mh on v.HOSPITAL_ID=mh.HOSPITAL_ID"+
					" left outer join mas_rank mr on p.RANK_ID=mr.RANK_ID"+
					" left outer join mas_relation mrel on p.RELATION_ID  =mrel.RELATION_ID"+
					" where  sph.PROFORMA_no='"+pro+"' and spd.item_id="+itemId+
					"  and sph.HOSPITAL_ID="+hospitalId;













					/*priscribedByString="select case mrel.RELATION_NAME when 'Self' then (p.SERVICE_NO ||' '||mr.RANK_NAME ||' '||p.S_FIRST_NAME||' '|| nvl(p.S_LAST_NAME,'') ) " +
									" else (mrel.RELATION_NAME||' '||p.SERVICE_NO||' '||mr.RANK_NAME||' '||p.S_FIRST_NAME||' '||nvl(p.S_LAST_NAME,'')) end as rel," +
									" DBMS_LOB.SUBSTR(v.DIAGNOSIS_NAME,2000,1), pph.SPECIALTY,ppd.DOSAGE || ' ' ||mf.FREQUENCY as dosages " +
									" from  store_proforma_header sph" +
									" left outer join store_proforma_detail spd on sph.PROFORMA_ID= spd.PROFORMA_ID " +
									" left outer join mas_store_item msi on  spd.ITEM_ID= msi.ITEM_ID" +
									" left outer join STORE_LOANIN_T sgt  on spd.PRESCRIPTION_ID=sgt.ID" +
									" LEFT outer join STORE_LOANIN_M sgm on sgm.LOANIN_MASTER_ID=sgt.LOANIN_MASTER_ID" +
									" left outer join patient_prescription_details ppd on  spd.PRESCRIPTION_ID= ppd.ID" +
									" right outer join patient_prescription_header pph on ppd.PRESCRIPTION_ID=pph.PRESCRIPTION_ID" +
									" left outer join mas_frequency mf on ppd.FREQUENCY_ID=mf.FREQUENCY_ID" +	
									" left outer join visit v on pph.VISIT_ID=v.VISIT_ID" +
									" left outer join patient p on v.HIN_ID=p.HIN_ID" +
									" left outer join mas_employee me on v.DOCTOR_ID=me.EMPLOYEE_ID" +
									" left outer join mas_hospital mh on v.HOSPITAL_ID=mh.HOSPITAL_ID" +
									" left outer join mas_rank mr on p.RANK_ID=mr.RANK_ID" +
									" left outer join mas_relation mrel on p.RELATION_ID  =mrel.RELATION_ID" +
									" where  sph.PROFORMA_no='"+pro+"' and spd.item_id="+itemId+
									"  and sph.HOSPITAL_ID="+hospitalId+
									" group by spd.PRESCRIPTION_ID ,ppd.DOSAGE,ppd.SO_ID  , p.P_FIRST_NAME,p.P_LAST_NAME,  me.FIRST_NAME,me.LAST_NAME ,mh.HOSPITAL_NAME,mh.ADDRESS " +
									" ,p.S_FIRST_NAME,p.S_LAST_NAME,p.SERVICE_NO,DBMS_LOB.SUBSTR(v.DIAGNOSIS_NAME,2000,1),mr.RANK_NAME,mrel.RELATION_NAME,pph.SPECIALTY,mf.FREQUENCY";
					 */


					priscribedByList = session.createSQLQuery(priscribedByString).list();
					ArrayList particular=new ArrayList();
					ArrayList diagnosis=new ArrayList();
					ArrayList dosage=new ArrayList();
					ArrayList priscribedBy=new ArrayList();
					if(priscribedByList.size()>0)
					{
						Iterator iterator3 = priscribedByList.iterator();
						while(iterator3.hasNext())
						{
							Object[] object3 = (Object[]) iterator3.next();
							try
							{
								particular.add(object3[4].toString());
							}catch(Exception e)
							{
								particular.add("");
							}
							try
							{
								diagnosis.add(object3[0].toString());
							}catch(Exception e)
							{
								diagnosis.add("");
							}
							try
							{
								priscribedBy.add(object3[3].toString());
							}catch(Exception e)
							{
								priscribedBy.add("");
							}
							try
							{
								dosage.add(object3[5].toString());
							}catch(Exception e)
							{
								dosage.add("");
							}
						}



					}

					indentMarked="select msi.ITEM_TYPE_ID," +
					" case when item_type_id=2 then 'N/A' else ( select INDENT_NO from (select * from store_indent_m sim left outer join" +
					" store_indent_t sit on sim.INDENT_ID=sit.INDENT_ID where sit.item_id ="+itemId+" order by sim.INDENT_ID desc)" +
					" where rownum = 1) end as Indent" +
					" from mas_store_item msi" +
					" where msi.ITEM_ID="+itemId;

					indentMarkedList = session.createSQLQuery(indentMarked).list();

					if(indentMarkedList.size()>0)
					{
						for (Iterator iterator4 = indentMarkedList.iterator(); iterator4.hasNext();)
						{
							Object[] object4 = (Object[]) iterator4.next();
							if(object4[1] != null){
								object4[1].toString();
							}
						}


					}


					if(totalDiscountList.size()>0)
					{
						for (Iterator itrDiscount = totalDiscountList.iterator(); itrDiscount.hasNext();)
						{
							Object[] objectDiscount = (Object[]) itrDiscount.next();
							try
							{
								totalDiscount=new BigDecimal(objectDiscount[0].toString());
							}catch(Exception e)
							{
								totalDiscount=new BigDecimal(0);
							}

							try
							{
								totalAmount=new BigDecimal(objectDiscount[1].toString());
							}catch(Exception e)
							{
								totalAmount=new BigDecimal(0);
							}
						}
					}


					sheet.createRow(row).createCell((short)0)
					.setCellValue(srNo);
					sheet.getRow(row).getCell((short)0).setCellStyle(lineStyle);

					sheet.createRow(row).createCell((short)1)
					.setCellValue(pvmsNo);
					sheet.getRow(row).getCell((short)1).setCellStyle(lineStyle);

					sheet.createRow(row).createCell((short)2)
					.setCellValue(nomenclature);
					sheet.getRow(row).getCell((short)2).setCellStyle(lineStyle);


					sheet.createRow(row).createCell((short)3)
					.setCellValue(au);
					sheet.getRow(row).getCell((short)3).setCellStyle(lineStyle);

					sheet.createRow(row).createCell((short)4)
					.setCellValue(qty.doubleValue());
					sheet.getRow(row).getCell((short)4).setCellStyle(lineStyle);


					sheet.createRow(row).createCell((short)5)
					.setCellValue(category);
					sheet.getRow(row).getCell((short)5).setCellStyle(lineStyle);


					sheet.createRow(row).createCell((short)6).setCellValue(companyName);
					sheet.getRow(row).getCell((short)6).setCellStyle(lineStyle);



					sheet.createRow(row).createCell((short)7)
					.setCellValue(unitRate.doubleValue());
					sheet.getRow(row).getCell((short)7).setCellStyle(lineStyle);



					sheet.createRow(row).createCell((short)8)
					.setCellValue(totalMrpCost.doubleValue());
					sheet.getRow(row).getCell((short)8).setCellStyle(lineStyle);
					totalMrpCostPageWise=totalMrpCostPageWise.add(totalMrpCost);

					sheet.createRow(row).createCell((short)9)
					.setCellValue(rebat.doubleValue());
					sheet.getRow(row).getCell((short)9).setCellStyle(lineStyle);


					sheet.createRow(row).createCell((short)10).setCellValue(cost.doubleValue());
					sheet.getRow(row).getCell((short)10).setCellStyle(lineStyle);
					totalActCostPageWise=totalActCostPageWise.add(cost);






					sheet.createRow(row).createCell((short)11)
					.setCellValue(supplierNameAndBillNo);
					sheet.getRow(row).getCell((short)11).setCellStyle(lineStyle);
					String particular1="";
					String diagnosis1="";
					String priscribedBy1="";
					String dosage1="";
					for(int j=0;j<particular.size();j++)
					{
						particular1=particular1+","+particular.get(j);
						diagnosis1=diagnosis1+","+diagnosis.get(j);
						priscribedBy1=priscribedBy1+","+priscribedBy.get(j);
						dosage1=dosage1+","+dosage.get(j);
					}
					try{
						particular1=particular1.substring(1);
						diagnosis1=diagnosis1.substring(1);
						priscribedBy1=priscribedBy1.substring(1);
						dosage1=dosage1.substring(1);
					}catch(Exception e){
						particular1="For SMC use only";

					}
					sheet.createRow(row).createCell((short)12).setCellValue(particular1);
					sheet.getRow(row).getCell((short)12).setCellStyle(lineStyle);


					sheet.createRow(row).createCell((short)13).setCellValue(diagnosis1);
					sheet.getRow(row).getCell((short)13).setCellStyle(lineStyle);


					sheet.createRow(row).createCell((short)14).setCellValue(dosage1);
					sheet.getRow(row).getCell((short)14).setCellStyle(lineStyle);


					sheet.createRow(row).createCell((short)15).setCellValue(priscribedBy1);
					sheet.getRow(row).getCell((short)15).setCellStyle(lineStyle);


					sheet.createRow(row).createCell((short)16)
					.setCellValue(indenNo);
					sheet.getRow(row).getCell((short)16).setCellStyle(lineStyle);

					row++;
					if(lastRowInsert==srNo || srNo==12*k2){
						sheet.createRow(row).createCell((short)7).setCellValue("Total Amt.");
						sheet.getRow(row).getCell((short)7).setCellStyle(lineStyle);
						sheet.createRow(row).createCell((short)8).setCellValue(totalMrpCostPageWise.doubleValue());
						sheet.getRow(row).getCell((short)8).setCellStyle(lineStyle);
						totalMrpCostPageWise=new BigDecimal(0);	


						sheet.createRow(row).createCell((short)9).setCellValue("Total Amt.");
						sheet.getRow(row).getCell((short)9).setCellStyle(lineStyle);
						sheet.createRow(row).createCell((short)10).setCellValue(totalActCostPageWise.doubleValue());
						sheet.getRow(row).getCell((short)10).setCellStyle(lineStyle);
						totalActCostPageWise=new BigDecimal(0);	
						k2=k2+1;


						row=row+3;
					}
				}
			}

			Map<String,Object>result=new HashMap<String,Object>();
			result=getResultValue(pro,hospitalId);
			BigDecimal AmtBudget1= new BigDecimal (result.get("BudgetAmt").toString());
			BigDecimal BalanceAmt1= new BigDecimal (result.get("BalanceAmt").toString());
			BigDecimal SpentAmt1= new BigDecimal (result.get("SpentAmt").toString());
			int TotalResAmt=0;



			try
			{
				TotalResAmt=Integer.parseInt(result.get("TotalResAmt").toString());
			}catch(Exception e){

			}

			double nivItem=new Double(result.get("nivItem").toString());
			double pvmsItem=new Double(result.get("pvmsItem").toString());
			double BrandItem=new Double(result.get("BrandItem").toString());
			double genericItem=new Double(result.get("genericItem").toString());
			double amtValueBrand=new Double(result.get("amtValueBrand").toString());
			double disValueBrand=new Double(result.get("disValueBrand").toString());
			double amtValueGen=new Double(result.get("amtValueGen").toString());
			double disValueGen=new Double(result.get("disValueGen").toString());

			//--------------code commented by anamika------------------
			double oncologyItem=new Double(result.get("oncologyItem").toString());
			double amtValueOncology =0.0;
			if(!result.get("amtValueOncology").equals("")){
				amtValueOncology=new Double(result.get("amtValueOncology").toString());
			}
			double disValueoncology =0.0;
			if(!result.get("disValueoncology").equals("")){
				disValueoncology=new Double(result.get("disValueoncology").toString());
			}
			double surgicalItem = 0.0;
			if(!result.get("surgicalItem").equals("")){
				surgicalItem=new Double(result.get("surgicalItem").toString());
			}
			double amtValueSurgical= 0.0;
			if(!result.get("amtValueSurgical").equals("")){
				amtValueSurgical=new Double(result.get("amtValueSurgical").toString());
			}
			double disValueSurgical= 0.0;
			if(!result.get("disValueSurgical").equals("")){
				disValueSurgical=new Double(result.get("disValueSurgical").toString());
			}
			double labItem = 0.0;
			if(!result.get("disValueSurgical").equals("")){
				labItem=new Double(result.get("labItem").toString());
			}
			double amtValueLab = 0.0;
			if(!result.get("amtValueLab").equals("")){
				amtValueLab=new Double(result.get("amtValueLab").toString());
			}
			double disValueLab = 0.0;
			if(!result.get("disValueLab").equals("")){
				disValueLab=new Double(result.get("disValueLab").toString());
			}
			double xrayItem = 0.0;
			if(!result.get("xrayItem").equals("")){
				xrayItem=new Double(result.get("xrayItem").toString());
			}
			double amtValueXray = 0.0;
			if(!result.get("amtValueXray").equals("")){
				amtValueXray=new Double(result.get("amtValueXray").toString());
			}
			double disValueXray = 0.0;
			if(!result.get("disValueXray").equals("")){
				disValueXray=new Double(result.get("disValueXray").toString());
			}
			double textileItem = 0.0;
			if(!result.get("textileItem").equals("")){
				textileItem=new Double(result.get("textileItem").toString());
			}
			double amtValueTextile = 0.0;
			if(!result.get("amtValueTextile").equals("")){
				amtValueTextile=new Double(result.get("amtValueTextile").toString());
			}
			double disValueTextile = 0.0;
			if(!result.get("disValueTextile").equals("")){
				disValueTextile=new Double(result.get("disValueTextile").toString());
			}
			double rubberItem = 0.0;
			if(!result.get("rubberItem").equals("")){
				rubberItem=new Double(result.get("rubberItem").toString());
			}
			double amtValueRubber = 0.0;
			if(!result.get("amtValueRubber").equals(""))
				amtValueRubber=new Double(result.get("amtValueRubber").toString());
			double disValueRubber=0.0;
			if(!result.get("disValueRubber").equals(""))
				disValueRubber=new Double(result.get("disValueRubber").toString());
			double fluidsItem=0.0;
			if(!result.get("fluidsItem").equals(""))
				fluidsItem=new Double(result.get("fluidsItem").toString());
			double amtValuefluidsItem=0.0;
			if(!result.get("amtValuefluidsItem").equals(""))
				amtValuefluidsItem=new Double(result.get("amtValuefluidsItem").toString());

			double disValuefluidsItem=0.0;
			if(!result.get("disValuefluidsItem").equals(""))
				disValuefluidsItem=new Double(result.get("disValuefluidsItem").toString());

			double generalMaterialItem=0.0;
			if(!result.get("generalMaterialItem").equals(""))
				generalMaterialItem=new Double(result.get("generalMaterialItem").toString());
			double amtValueGeneralMaterialItem=0.0;
			if(!result.get("amtValueGeneralMaterialItem").equals(""))
				amtValueGeneralMaterialItem=new Double(result.get("amtValueGeneralMaterialItem").toString());
			double disValueGeneralMaterialItem=0.0;
			if(!result.get("disValueGeneralMaterialItem").equals(""))
				disValueGeneralMaterialItem=new Double(result.get("disValueGeneralMaterialItem").toString());

			HMSUtil hcd=new HMSUtil();
			String amotInWord=hcd.convert(TotalResAmt);


			row=row+2;

			sheet.createRow(row).createCell((short)1)
			.setCellValue("Total MRP:   "+totalAmount.add(totalDiscount));


			sheet.createRow(row).createCell((short)11)
			.setCellValue("Amount Alloted:    "+AmtBudget1);

			row=row+1;

			sheet.createRow(row).createCell((short)1)
			.setCellValue("Discount(if any):    "+totalDiscount);

			sheet.createRow(row).createCell((short)11)
			.setCellValue("Amount Spent:    "+BalanceAmt1);

			row=row+1;

			sheet.createRow(row).createCell((short)1)
			.setCellValue("Total Amount:    "+totalAmount);

			sheet.createRow(row).createCell((short)11)
			.setCellValue("Amount Balance:    "+SpentAmt1);

			row=row+1;

			sheet.createRow(row).createCell((short)1)
			.setCellValue("Round off:    "+round_off);
			row=row+1;

			sheet.createRow(row).createCell((short)1)
			.setCellValue("Grand Total:    "+TotalResAmt);

			row=row+1;
			sheet.createRow(row).createCell((short)1)
			.setCellValue("Amount in words:    "+amotInWord);



			row=row+4;
			sheet.createRow(row).createCell((short)1)
			.setCellValue("(a) Total NO. of NIV Items=       "+nivItem);

			row=row+2;
			sheet.createRow(row).createCell((short)1)
			.setCellValue("(b) Total NO. of PVMS against NA items=       "+pvmsItem);

			row=row+2;
			sheet.createRow(row).createCell((short)1)
			.setCellValue("(c) Total NO. of Branded items=       "+BrandItem);


			sheet.createRow(row).createCell((short)10)
			.setCellValue("(h) Total No. of Xray Film & products =       "+xrayItem);


			sheet.createRow(row).createCell((short)20).setCellValue("ACRONYMS(Brand/Generic/Others)");
			sheet.getRow((short)row).getCell((short)20).setCellStyle(lineStyle1);
			row=row+1;
			sheet.createRow(row).createCell((short)2)
			.setCellValue("(i) MRP value of branded=       "+amtValueBrand);

			sheet.createRow(row).createCell((short)12)
			.setCellValue("(i) MRP value of Xray film Items=       "+amtValueXray);
			sheet.createRow(row).createCell((short)20).setCellValue("B-Branded");
			sheet.getRow((short)row).getCell((short)20).setCellStyle(lineStyle);

			row=row+1;
			sheet.createRow(row).createCell((short)2)
			.setCellValue("(ii) Discounted value of branded=       "+disValueBrand);

			sheet.createRow(row).createCell((short)12)
			.setCellValue("(ii) Discounted value of Xray Film Items=       "+disValueXray);
			sheet.createRow(row).createCell((short)20).setCellValue("G-Generic");
			sheet.getRow((short)row).getCell((short)20).setCellStyle(lineStyle);

			int temp=row+1;
			sheet.createRow(temp).createCell((short)20).setCellValue("L-Lab Item");
			sheet.getRow((short)temp).getCell((short)20).setCellStyle(lineStyle);






			row=row+2;
			sheet.createRow(row).createCell((short)1).setCellValue("(d)Total No. of generic items=       "+genericItem);

			sheet.createRow(row).createCell((short)10)
			.setCellValue("(i) Total No. of Textile Goods Items =       "+textileItem);

			sheet.createRow(row).createCell((short)20).setCellValue("O-Oncology");
			sheet.getRow((short)row).getCell((short)20).setCellStyle(lineStyle);

			row=row+1;
			sheet.createRow(row).createCell((short)2).setCellValue("(i) MRP value of generic=       "+amtValueGen);
			sheet.createRow(row).createCell((short)12)
			.setCellValue("(i) MRP value of Textile Goods Items=       "+amtValueTextile);


			sheet.createRow(row).createCell((short)20).setCellValue("S-Surgial");
			sheet.getRow((short)row).getCell((short)20).setCellStyle(lineStyle);



			row=row+1;
			sheet.createRow(row).createCell((short)2)
			.setCellValue("(ii) Discounted value of generic=       "+disValueGen);

			sheet.createRow(row).createCell((short)12)
			.setCellValue("(ii) Discounted value of Textile Goods Items=       "+disValueTextile);


			sheet.createRow(row).createCell((short)20).setCellValue("X-X-Ray Film & Products");
			sheet.getRow((short)row).getCell((short)20).setCellStyle(lineStyle);



			int temp1=row+1;
			sheet.createRow(temp1).createCell((short)20).setCellValue("T-Textile goods");
			sheet.getRow((short)temp1).getCell((short)20).setCellStyle(lineStyle);


			row=row+2;
			sheet.createRow(row).createCell((short)1)
			.setCellValue("(e) Total NO. of Oncology items=       "+oncologyItem);

			sheet.createRow(row).createCell((short)10)
			.setCellValue("(j) Total No. of Rubber Goods Items =       "+rubberItem);
			sheet.createRow(row).createCell((short)20).setCellValue("R-Rubber Goods");
			sheet.getRow((short)row).getCell((short)20).setCellStyle(lineStyle);



			row=row+1;
			sheet.createRow(row).createCell((short)2)
			.setCellValue("(i) MRP value of Oncology=       "+amtValueOncology);


			sheet.createRow(row).createCell((short)12)
			.setCellValue("(i) MRP value of Rubber Goods Items=       "+amtValueRubber);
			sheet.createRow(row).createCell((short)20).setCellValue("T- Transfusion Fluids");
			sheet.getRow((short)row).getCell((short)20).setCellStyle(lineStyle);




			row=row+1;
			sheet.createRow(row).createCell((short)2)
			.setCellValue("(i) Discounted value of Oncology=       "+disValueoncology);
			sheet.createRow(row).createCell((short)12)
			.setCellValue("(ii) Discounted value of Rubber Goods Items=       "+disValueRubber);
			sheet.createRow(row).createCell((short)20).setCellValue("M-General Matrial");
			sheet.getRow((short)row).getCell((short)20).setCellStyle(lineStyle);



			row=row+2;
			sheet.createRow(row).createCell((short)1)
			.setCellValue("(f) Total No. of Surgical items=       "+surgicalItem);

			sheet.createRow(row).createCell((short)10)
			.setCellValue("(k) Total No. of Transfusion Items =       "+fluidsItem);


			row=row+1;
			sheet.createRow(row).createCell((short)2)
			.setCellValue("(i) MRP value of Surgical Items=       "+amtValueSurgical);


			sheet.createRow(row).createCell((short)12)
			.setCellValue("(i) MRP value of Transfusion Items=       "+amtValuefluidsItem);



			row=row+1;
			sheet.createRow(row).createCell((short)2)
			.setCellValue("(ii) Discounted value of Surgical Items=       "+disValueSurgical);

			sheet.createRow(row).createCell((short)12)
			.setCellValue("(ii) Discounted value of Transfusion Items=       "+disValuefluidsItem);




			row=row+2;
			sheet.createRow(row).createCell((short)1)
			.setCellValue("(g) Total No. of Lab items=       "+labItem);


			sheet.createRow(row).createCell((short)10)
			.setCellValue("(l) Total No. of General Material =       "+fluidsItem);

			row=row+1;
			sheet.createRow(row).createCell((short)2)
			.setCellValue("(i) MRP value of Lab Items=       "+amtValueLab);
			row=row+1;
			sheet.createRow(row).createCell((short)12)
			.setCellValue("(i) MRP value of General Material Items=       "+amtValuefluidsItem);




			row=row+1;
			sheet.createRow(row).createCell((short)2)
			.setCellValue("(ii) Discounted value of Lab Items=       "+disValueLab);
			sheet.createRow(row).createCell((short)12)
			.setCellValue("(ii) Discounted value of General Material Items=       "+disValuefluidsItem);



			row=row+2;
			sheet.createRow(row).createCell((short)1)
			.setCellValue("(m)Total of(c)(i)+(d)(i)+(e)(i)+(f)(i)+(g)(i)+(h)(i)+(i)(i)+(j)(i)+(k)(i)+(l)(i)=       "+(amtValueBrand+amtValueGen+amtValueOncology+amtValueSurgical+amtValueLab+amtValueXray+amtValueTextile+amtValueRubber+amtValuefluidsItem+amtValueGeneralMaterialItem));

			row=row+2;
			sheet.createRow(row).createCell((short)1)
			.setCellValue("(n)Total of(c)(ii)+(d)(ii)=       "+(disValueBrand+disValueGen+disValueoncology+disValueSurgical+disValueLab+disValueXray+disValueTextile+disValueRubber+disValuefluidsItem+disValueGeneralMaterialItem));


			row=row+1;

			sheet.createRow(row).createCell((short)8)
			.setCellValue("CERIFICATE");

			row=row+1;

			sheet.createRow(row).createCell((short)2)
			.setCellValue("Certified that:-");

			row=row+1;

			sheet.createRow(row).createCell((short)3)
			.setCellValue("(a)Service issue items purchased were urgently required for treatement of entitled personnel and their families. Thease were not available through AFMSD/FMSD and any");

			row=row+2;
			sheet.createRow(row).createCell((short)3)
			.setCellValue("other service sources,and no substitutes were available.Element indent for the same have been placed with the dependent AFMSD/FMSD.");

			row=row+2;
			sheet.createRow(row).createCell((short)3)
			.setCellValue("(b)Quantity of the items purchased have not expected one month's requirement.");

			row=row+2;
			sheet.createRow(row).createCell((short)3)
			.setCellValue("(c)Non service issue items were purchased with prior concurrence of CFA.");

			row=row+3;
			sheet.createRow(row).createCell((short)11)
			.setCellValue(" Signature of SMO/Oi/c Medical Store");


			row=row+3;
			sheet.createRow(row).createCell((short)3)
			.setCellValue("Saction for purchase of items listed at Sl No 01 to "+srNo+" above,vide Performa 'B' Sl No "+performaNo+" dated "+performaDate+" of Rs. "+TotalResAmt+" is accorded. The items are to be brought on change.");


			row=row+3;
			sheet.createRow(row).createCell((short)7)
			.setCellValue("SANCTIONED / NOT SANCTION OF COMPETENT FINANCIAL AUTHORITY");

			row=row+3;
			sheet.createRow(row).createCell((short)11)
			.setCellValue(" Signature of CFA");

			row=row+1;
			sheet.createRow(row).createCell((short)11)
			.setCellValue(" (With official seal)");



			sheet.setColumnWidth((short)0, (short)(6 * 256));
			sheet.setColumnWidth((short)1, (short)(10 * 256));
			sheet.setColumnWidth((short)2, (short)(16 * 256));
			sheet.setColumnWidth((short)3, (short)(8 * 256));
			sheet.setColumnWidth((short)4, (short)(7 * 256));
			sheet.setColumnWidth((short)5, (short)(6 * 256));
			sheet.setColumnWidth((short)6, (short)(12 * 256));
			sheet.setColumnWidth((short)7, (short)(8 * 256));
			sheet.setColumnWidth((short)8, (short)(8 * 256));
			sheet.setColumnWidth((short)9, (short)(9 * 256));
			sheet.setColumnWidth((short)10, (short)(15 * 256));
			sheet.setColumnWidth((short)11, (short)(12 * 256));
			sheet.setColumnWidth((short)12, (short)(10* 256));
			sheet.setColumnWidth((short)13, (short)(12 * 256));
			sheet.setColumnWidth((short)14, (short)(14 * 256));

			// Write the output to a file
			String grp_name = "VendorReports";
			// Write the output to a file
			grp_name = grp_name + ".xls";
			FileOutputStream fileOut = new FileOutputStream(grp_name);
			wb.write(fileOut);
			fileOut.close();

			map.put("flag", "DataFound");
			map.put("download_path", grp_name);
		} catch (IOException ioe) {
			ioe.printStackTrace();
			map.put("flag", "NoData");
		}

		return map;
	}

	public Map<String, Object> showMedicineReturnJsp(Map<String,Object>dataMap) {
		session = (Session) getSession();
		String pvms = null;
		String max="";
		List opdIssueNo = new ArrayList();
		List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();


		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		String opdIssuenoIncremented = "";
		StoreFyDocumentNo storeFyDocumentNo=null;
		List objectList = new ArrayList();
		int deptId = 0;
		int hospitalId=0;
		String serviceNo="";
		BigDecimal stockIn = null;
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}

		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}

		try {
			serviceNo = (String)dataMap.get("serviceNo");
			frequencyList = session.createCriteria(MasFrequency.class)
			.add(Restrictions.eq("Status","y" )).list();

			opdIssueNo = session.createQuery("select syd from StoreFyDocumentNo as syd where syd.Department.Id="+ deptId+" and syd.Hospital.Id='"+hospitalId+"'").list();
			storeFyDocumentNo = (StoreFyDocumentNo) opdIssueNo.get(0);
			String medicineReturnNo = storeFyDocumentNo.getMedicineReturnNo();
			max = getMaxNo(medicineReturnNo);
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("frequencyList",frequencyList);
		map.put("deptId",deptId);
		map.put("max",max);
		map.put("storeFyDocumentNo",storeFyDocumentNo);
		map.put("opdIssueNo",opdIssueNo);
		return map;
	}

	public boolean submitMedicineReturn(Map<String, Object> infoMap,
			Map<String, Object> dataMap) {
		StoreMedicineReturnM storeMedicineReturnM = (StoreMedicineReturnM) infoMap
		.get("storeMedicineReturnM");
		List<StoreMedicineReturnT> StoreMedicineReturnTList = (ArrayList<StoreMedicineReturnT>) infoMap
		.get("StoreMedicineReturnTList");
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		boolean successfullyAdded = false;
		@SuppressWarnings("unused")
		int pageNo = 0;
		String returnNo = "";

		StoreDefectiveDrugM storeDefectiveDrugM2 = new StoreDefectiveDrugM();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		String max = "";
		String no = "";
		List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
		StoreItemBatchStock storeItemBatchStock = null;
		if (dataMap.get("deptId") != null)
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		if (dataMap.get("hospitalId") != null)
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		if (dataMap.get("userName") != null)
			userName = ("" + dataMap.get("userName"));
		// Session sess = factory.openSession();
		session = (Session) getSession();
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			hbt.save(storeMedicineReturnM);

			int storeFyId = 0;
			returnNo = (String) infoMap.get("returnNo");
			Criteria c = session.createCriteria(StoreFyDocumentNo.class)
			.add(Restrictions.eq("Hospital.Id", hospitalId))
			.add(Restrictions.eq("Department.Id", deptId));
			storeFyDocumentNoList = c.list();
			for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
				storeFyId = documentNo.getId();

				StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
				.load(StoreFyDocumentNo.class, storeFyId);
				storeFyDocumentNo.setMedicineReturnNo(returnNo);
				hbt.update(storeFyDocumentNo);

			}

			int itemId=0;
			String batchNo="";
			int brandId=0;

			if (StoreMedicineReturnTList.size() > 0) {
				/*if ((infoMap.get("headerStored") + "").equals("yes")) {
					int id = Integer.parseInt("" + infoMap.get("entryId"));
					storeDefectiveDrugM2.setId(id);
				}*/
				for (int i = 0; i < StoreMedicineReturnTList.size(); i++) {
					StoreMedicineReturnT storeMedicineReturnT = new StoreMedicineReturnT();
					storeMedicineReturnT = (StoreMedicineReturnT) StoreMedicineReturnTList.get(i);

					storeMedicineReturnT.setReturnM(storeMedicineReturnM);

					hbt.save(storeMedicineReturnT);
					itemId=storeMedicineReturnT.getItem().getId();
					batchNo=storeMedicineReturnT.getBatchNo();
					brandId=storeMedicineReturnT.getBrand().getId();
					storeItemBatchStockList = hbt
					.find("from jkt.hms.masters.business.StoreItemBatchStock as inp where inp.Item.Id = "
							+ itemId+
							" and inp.BatchNo='"+batchNo+"'"+ " and inp.Hospital.Id='"+hospitalId+"' and inp.Department.Id='"+deptId+"'");

					if (storeItemBatchStockList != null
							&& storeItemBatchStockList.size() > 0) {
						int id = storeItemBatchStockList.get(0).getId();
						storeItemBatchStock = (StoreItemBatchStock) hbt.load(
								StoreItemBatchStock.class, id);
						BigDecimal existing_closing_stock = storeItemBatchStock
						.getClosingStock();
						BigDecimal existing_defect_stock = storeItemBatchStock
						.getReceivedQty();
						try
						{
							if(existing_defect_stock.equals(null))
							{
								existing_defect_stock=new BigDecimal(0);
							}
						}
						catch(Exception e)
						{
							existing_defect_stock=new BigDecimal(0);
						}
						BigDecimal defect_qty = storeMedicineReturnT
						.getReturnQty();
						storeItemBatchStock
						.setClosingStock(existing_closing_stock
								.add(defect_qty));
						storeItemBatchStock.setReceivedQty(existing_defect_stock
								.add(defect_qty));
						hbt.update(storeItemBatchStock);
					}else
					{
						storeItemBatchStock = new StoreItemBatchStock();
						storeItemBatchStock.setDepartment(storeMedicineReturnM
								.getDepartment());
						storeItemBatchStock.setHospital(storeMedicineReturnM.getHospitalId());
						storeItemBatchStock.setItem(storeMedicineReturnT.getItem());
						storeItemBatchStock.setBatchNo(storeMedicineReturnT
								.getBatchNo());


						storeItemBatchStock.setReceivedQty(storeMedicineReturnT.getReturnQty());

						storeItemBatchStock
						.setBrand(storeMedicineReturnT.getBrand());

						storeItemBatchStock.setClosingStock(storeMedicineReturnT.getReturnQty());
						storeItemBatchStock.setExpiryDate(storeMedicineReturnT.getExpiryDate());

						// HibernateTemplate hbt1 = getHibernateTemplate();
						// hbt1.setFlushModeName("FLUSH_EAGER");
						// hbt1.setCheckWriteOperations(false);
						hbt.save(storeItemBatchStock);
						hbt.refresh(storeItemBatchStock);
					}

				}
			}
			successfullyAdded = true;
			tx.commit();

		} catch (RuntimeException e) {
			if (tx != null)
				tx.rollback();
			// throw e; // or display error message
			e.printStackTrace();
		} finally {
			//session.close();
		}

		return successfullyAdded;

	}





	// add javed for print issue to units from dispensary

	public Map printIssueDispToUnits(int issue_m_id) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIssueM> storeIssueMList = new ArrayList<StoreIssueM>();
		session = (Session) getSession();
		List<StoreIndentM> indentMList = new ArrayList<StoreIndentM>();
		Connection con = session.connection();
		String demanNo = "";
		String accountingUnit = "";
		String recieptVoucherNo = "";
		String period1 = "";
		String period2 = "";
		String unit1 = "";
		String unit2 = "";
		String hosp_address1 = "";
		String unit_address = "";
		String depotNo = "";
		String civNo = "";
		String dated = "";
		String Hosp_Name = "";
		try {
			storeIssueMList = getHibernateTemplate().find(
					" from jkt.hms.masters.business.StoreIssueM as sim where sim.Id='"
					+ issue_m_id + "'");
			for (StoreIssueM storeIssueM : storeIssueMList) {
				Hosp_Name = storeIssueM.getHospital().getHospitalName();
				demanNo = "" + storeIssueM.getIssueNo();
				accountingUnit = "";
				recieptVoucherNo = "" + storeIssueM.getDocNo();
				period1 = "";
				period2 = "";
				if(storeIssueM.getOtafu() != null)
				{
					unit1 = "" + storeIssueM.getOtafu().getUnitName();
					unit_address = ""+storeIssueM.getOtafu().getUnitAddress();
				}
				
				//unit2=""+storeIssueM.getToUnit().getAirForceDepotName();
				hosp_address1 = ""+storeIssueM.getHospital().getAddress();
				
				civNo = "EXt. " + storeIssueM.getIssueNo();
				dated = ""
					+ HMSUtil.changeDateToddMMyyyy(storeIssueM
							.getIssueDate());
				//unit2 = "" + storeIssueM.getToUnit().getAirForceDepotName();
				depotNo = "";

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("demandNo", demanNo);
		map.put("accountingUnit", "");
		map.put("recieptVoucherNo", recieptVoucherNo);
		map.put("period1", period1);
		map.put("period2", period2);
		map.put("unit1", unit1);
		map.put("unit2", unit2);
		map.put("address1", hosp_address1);
		map.put("unit_address", unit_address);
		map.put("depotNo", depotNo);
		map.put("civNo", civNo);
		map.put("dated", dated);
		map.put("conn", con);
		map.put("Hosp_Name", Hosp_Name);
		return map;

	}


	// javed khan

	public Map<String, Object>  insertIssueForIndentToUnit(Map<String, Object> utilMap,Box box) {
		boolean b = false;
		Session session = getSession();
		Transaction tx =null;
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<StoreInternalIndentT> storeInternalTList = new ArrayList<StoreInternalIndentT>();
		List<StoreIssueT> childList=new ArrayList<StoreIssueT>();
		int indentDtId = 0;
		int issueId=0;
		int itemId=0;
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		String issueNo ="";
		String issuedBatchIdAndQty="";

		try{
			tx = session.beginTransaction();
			Date dateStringFormat = null;
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			dateStringFormat = java.sql.Date.valueOf((sdf.format(new Date())));


			if(utilMap.get("deptId")!=null){
				deptId=(Integer)utilMap.get("deptId");
			}
			int totalQtyIssued = 0;
			if(utilMap.get("totalQtyIssued")!=null){
				totalQtyIssued=(Integer)utilMap.get("totalQtyIssued");
			}
			if(utilMap.get("issuedBatchIdAndQty")!=null){
				issuedBatchIdAndQty=(String)utilMap.get("issuedBatchIdAndQty");
			}
			if(utilMap.get("issueNo")!=null){
				issueNo=(String)utilMap.get("issueNo");
			}

			StoreIssueM issueM = new StoreIssueM();
			if(utilMap.get("issueM")!=null){
				issueM=(StoreIssueM)utilMap.get("issueM");
			}
			if(utilMap.get("childList")!=null){
				childList=(List<StoreIssueT>)utilMap.get("childList");
			}

			// this for loanout --- javed khan
			List<StoreIssueT> childList1=new ArrayList<StoreIssueT>();
			if(utilMap.get("childList1")!=null){
				childList1=(List<StoreIssueT>)utilMap.get("childList1");
			}
			List issueMListL = new ArrayList();
			if(utilMap.get("issueMListL")!=null){
				issueMListL=(List<StoreIssueT>)utilMap.get("issueMListL");
			}
			// this for loanout --- javed khan


			//		    Vector receivedQty = box.getVector(RequestConstants.QTY_ISSUED);
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			hbt.save(issueM);
			hbt.refresh(issueM);
			issueId = issueM.getId();
			map.put("issueId", issueId);
			//int issuemId=issueM.getRequestNo().getId();
			if (childList.size() > 0) {

				for (int i = 0; i < childList.size(); i++) {
					StoreIssueT storeIssueT = new StoreIssueT();
					storeIssueT = (StoreIssueT) childList.get(i);
					storeIssueT.setIssueM(issueM);
					hbt.save(storeIssueT);
				}

			}

			// this for loanout --- javed khan
			if (childList1.size() > 0) {

				for (int i = 0; i < childList1.size(); i++) {
					StoreIssueT storeIssueT = new StoreIssueT();
					storeIssueT = (StoreIssueT) childList1.get(i);
					storeIssueT.setIssueM(issueM);
					hbt.save(storeIssueT);

					// this for StoreLoanoutExpendM set status - javed khan
					StoreLoanoutExpendM slem = new StoreLoanoutExpendM ();
					slem=(StoreLoanoutExpendM) hbt.load(StoreLoanoutExpendM.class, Integer.parseInt(""+issueMListL.get(i)));
					slem.setStatus("C");
					hbt.update(slem);
				}

			}


			// comment by javed


			/*List indentList =session.createCriteria(StoreInternalIndentM.class).add(Restrictions.eq("Id", issueM.getRequestNo().getId())).list();
		StoreInternalIndentM indentM1 = new StoreInternalIndentM();
		indentM1 = (StoreInternalIndentM)indentList.get(0);
		indentM1.setStatus("y");
		session.saveOrUpdate(indentM1);*/

			//Update Item Stock
			List lstData1 = session.createCriteria(StoreIssueT.class).add(Restrictions.eq("IssueM.Id", issueId)).list();
			//List lstData1 = new ArrayList(header.getIssueId());
			int j=0;
			int k=1;
			for(int i=0;i<lstData1.size();i++) {
				//if(!(((StoreIssueT)lstData1.get(i)).getBatchNo().trim()).equals("0")){
				MasStoreItem item = ((StoreIssueT)lstData1.get(i)).getItem();
				
						
				System.out.println("ItemId="+((StoreIssueT)lstData1.get(i)).getItem().getId());
				System.out.println("batchNo="+((StoreIssueT)lstData1.get(i)).getBatchNo().trim());
				System.out.println("dept="+issueM.getDepartment().getId());
				System.out.println("hospitalId="+issueM.getHospital().getId());

				List lstdata = getHibernateTemplate().find("from jkt.hms.masters.business.StoreItemBatchStock ss where ss.Item='"+((StoreIssueT)lstData1.get(i)).getItem().getId()
						+"' and ss.BatchNo='"+((StoreIssueT)lstData1.get(i)).getBatchNo().trim()+"'"
						+" and ss.Department.Id='"+ issueM.getDepartment().getId() +"'"
						+" and ss.Hospital.Id='"+ issueM.getHospital().getId() +"'");
				System.out.println("lstdata="+lstdata.size());
				if(lstdata.size()>0 && ((StoreIssueT)lstData1.get(i)).getQtyIssued() != null){
					StoreItemBatchStock itemBatchStock = new StoreItemBatchStock();
					itemBatchStock =(StoreItemBatchStock)lstdata.get(0);
					StoreItemBatchStock batchStockObj = (StoreItemBatchStock)hbt.load(
							StoreItemBatchStock.class, itemBatchStock.getId());
					if(batchStockObj.getClosingStock() != null){
						batchStockObj.setClosingStock(batchStockObj.getClosingStock()
								.subtract(((StoreIssueT)lstData1.get(i)).getQtyIssued()));
						// javed khan for subtract qty demand
						/*String qury="update  store_internal_indent_t siit set siit.QTY_REQUEST=siit.QTY_REQUEST-'"
			+(((StoreIssueT)lstData1.get(i))).getQtyIssued()+"'"
		   + " where siit.INTERNAL_ID='"
			   + issueM.getRequestNo().getId()+"'"
			   +" and siit.ITEM_ID='"
			   + ((StoreIssueT)lstData1.get(i)).getItem().getId()+"'";

		Query que=session.createSQLQuery(qury);
	    int rowCount=que.executeUpdate();
						 */

					}
					BigDecimal issueQty = new BigDecimal(0.00);

					if(batchStockObj.getIssueQty() != null){
						issueQty = batchStockObj.getIssueQty();
					}
					batchStockObj.setIssueQty(issueQty.add(((StoreIssueT)lstData1.get(i)).getQtyIssued()));
					hbt.update(batchStockObj);
					/*int storeFyId = 0;
		Criteria c = session.createCriteria(StoreFyDocumentNo.class).add(
		Restrictions.eq("Department.Id",deptId));
		storeFyDocumentNoList = c.list();
		for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
		storeFyId = documentNo.getId();
		}*/
					/*HibernateTemplate hbt4 = getHibernateTemplate();
		hbt4.setFlushModeName("FLUSH_EAGER");
		hbt4.setCheckWriteOperations(false);
		StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) hbt4.load(StoreFyDocumentNo.class, storeFyId);
		storeFyDocumentNo.setIssueDeptNo(issueNo);
		hbt4.update(storeFyDocumentNo);
		hbt4.refresh(storeFyDocumentNo);*/
					j=j+1;
					k = k+1;
				}
			}
			// end of comment by javed

			//}
			int p=0;
			int q=1;

			Vector itemList = box.getVector(RequestConstants.ITEM_ID);
			// comment by javed

			/*for(int ii=0;ii<itemList.size();ii++){
		Criteria crit = session.createCriteria(StoreInternalIndentT.class)
		.createAlias("Internal", "I")
		.createAlias("Item", "item")
		.add(Restrictions.eq("I.Id",issuemId ))
		.add(Restrictions.eq("item.Id",Integer.parseInt(itemList.get(ii).toString())));
		storeInternalTList = crit.list();
		int internalIndentTId =0;
		for(StoreInternalIndentT storeInternalIndentT : storeInternalTList)
		{
		internalIndentTId = storeInternalIndentT.getId();
		HibernateTemplate hbt5 = getHibernateTemplate();
		hbt5.setFlushModeName("FLUSH_EAGER");
		hbt5.setCheckWriteOperations(false);
		StoreInternalIndentT internalIndentT = new StoreInternalIndentT();
		internalIndentT = (StoreInternalIndentT)hbt5.load(StoreInternalIndentT.class, internalIndentTId);
		int quantityRcvd=0;
		if(internalIndentT.getQtyIssued()!=null){
		quantityRcvd=internalIndentT.getQtyIssued();
		}
		int quantityReceivedFinal=quantityRcvd +box.getInt("qtyIssued"+q);
		internalIndentT.setQtyIssued(quantityReceivedFinal);
		String tempIssuedBatchIdAndQty="";
		int     batchId= box.getInt(RequestConstants.BATCH_ID+p);
		issuedBatchIdAndQty=issuedBatchIdAndQty+"#"+batchId+"/"+box.getInt(RequestConstants.QTY_ISSUED+q);
		internalIndentT.setIssuedBatchIdAndQty(issuedBatchIdAndQty);
		hbt5.update(internalIndentT);
		hbt5.refresh(internalIndentT);
		}
		p =p+1;
		q=q+1;
		}*/

			//end of  comment by javed
			b = true;
			tx.commit();
		}catch(Exception exception){
			b = false;
			tx.rollback();
			exception.printStackTrace();
		}
		map.put("issueId", issueId);
		map.put("b", b);
		return map;
	}


	// add javed khan for section in auto indent

	public Map<String, Object> showSearchIndentToDepo1(Map<String, Object> requestParameters) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIndentM> searchStoreIndentMList = new ArrayList<StoreIndentM>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		int deptId=0;
		int hospitalId=0;
		if(requestParameters.get("deptId")!=null){
			deptId=(Integer)requestParameters.get("deptId");
		}
		if(requestParameters.get("hospitalId")!=null){
			hospitalId=(Integer)requestParameters.get("hospitalId");
		}
		Session session = getSession();
		searchStoreIndentMList = session.createCriteria(
				StoreIndentM.class).add(
						Restrictions.eq("Status", "o"))
						.add(Restrictions.eq("Department.Id", deptId))
						.add(Restrictions.eq("Hospital.Id", hospitalId))
						.addOrder(
								Order.desc("Id")).list();

		sectionList = getHibernateTemplate().find(
		"from jkt.hms.masters.business.MasStoreSection as ms where ms.Status = 'y'");
		map.put("sectionList", sectionList);


		map.put("searchStoreIndentMList", searchStoreIndentMList);
		return map;
	}

	//Method Added by kiran for Department Allocation

	public Map getSMCAndDept(Map<String,Object>dataMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasHospital> hospitalList = new ArrayList<MasHospital>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		int hospitalId=0;
		hospitalId=(Integer)dataMap.get("hospitalId");
		Session session = (Session) getSession();
		Criteria c = session.createCriteria(MasHospital.class).add(
				Restrictions.eq("Status", "y"));

		hospitalList = c.list();

		Criteria c1 = session.createCriteria(MasDepartment.class)

		.add(Restrictions.eq("Status", "y")).addOrder(Order.asc("DepartmentName"));

		departmentList = c1.list();

		map.put("hospitalList", hospitalList);
		map.put("departmentList", departmentList);
		return map;
	}


	//Method Added by kiran for Department Allocation

	public Map getAssignedDepartmentt(Map<String,Object>dataMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasHospital> hospitalList = new ArrayList<MasHospital>();
		List<StoreFyDocumentNo> departmentList = new ArrayList<StoreFyDocumentNo>();
		int hospitalId=0;
		hospitalId=(Integer)dataMap.get("hospitalId");
		Session session = (Session) getSession();
		Criteria c = session.createCriteria(StoreFyDocumentNo.class)
		.add(Restrictions.eq("Hospital.Id", hospitalId));

		departmentList = c.list();

		map.put("departmentList", departmentList);
		return map;
	}




	public boolean AssignDepartmentForStoreFyDocument(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		boolean successfullyAdded = false;
		@SuppressWarnings("unused")
		int pageNo = 0;
		String returnNo = "";


		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		String max = "";
		String no = "";
		String[] compIdArrayString ={"0"};


		if (dataMap.get("hospitalId") != null)
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));

		// Session sess = factory.openSession();
		session = (Session) getSession();
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);



			int storeFyId = 0;
			compIdArrayString = (String[]) dataMap.get("compIdArrayString");


			int storeFyDeptId=0;
			for(int i=0;i<compIdArrayString.length;i++)
			{
				StoreFyDocumentNo storeFyDocumentNo = new StoreFyDocumentNo();

				try
				{
					storeFyDeptId=new Integer(compIdArrayString[i]);
				}
				catch(Exception e)
				{

				}
				storeFyDocumentNoList = session.createCriteria(StoreFyDocumentNo.class)
				.add(Restrictions.eq("Hospital.Id", hospitalId))
				.add(Restrictions.eq("Department.Id", storeFyDeptId))
				.list();

				if(storeFyDocumentNoList.size()==0)
				{

					MasHospital hospital = new MasHospital();
					hospital.setId(hospitalId);
					storeFyDocumentNo.setHospital(hospital);
					MasDepartment department=new MasDepartment();
					department.setId(storeFyDeptId);
					storeFyDocumentNo.setDepartment(department);
					storeFyDocumentNo.setAdjustmentNo("0");
					storeFyDocumentNo.setAdjustmentStartNo("0");
					storeFyDocumentNo.setBalanceNo("0");
					storeFyDocumentNo.setBooNo("0");
					storeFyDocumentNo.setBooStartNo("0");
					storeFyDocumentNo.setDefectEntryNo("0");
					storeFyDocumentNo.setDefectEntryStartNo("0");
					storeFyDocumentNo.setDemandNo("0");
					storeFyDocumentNo.setDemandStartNo("0");
					storeFyDocumentNo.setDepotIndentNo("0");
					storeFyDocumentNo.setDepotIndentStartNo("0");
					storeFyDocumentNo.setDeptConsumNo("0");
					storeFyDocumentNo.setDisposalEntryNo("0");
					storeFyDocumentNo.setDisposalEntryStartNo("0");
					storeFyDocumentNo.setGrnNo("0");
					storeFyDocumentNo.setGrnStartNo("0");
					storeFyDocumentNo.setIndentToDepotNo("0");
					storeFyDocumentNo.setIndentToDepotStartNo("0");
					storeFyDocumentNo.setInIndentNo("0");
					storeFyDocumentNo.setIndentToSocNo("0");
					storeFyDocumentNo.setIssueDeptReturnNo("0");
					storeFyDocumentNo.setIssueDeptReturnStartNo("0");
					storeFyDocumentNo.setIssueDeptStartNo("0");
					storeFyDocumentNo.setIssueInPatientNo(new Integer(0));
					storeFyDocumentNo.setIssueDeptReturnStartNo("0");
					storeFyDocumentNo.setIssueInPatientReturnNo("0");
					storeFyDocumentNo.setIssueInPatientReturnStartNo("0");
					storeFyDocumentNo.setIssueInPatientStartNo("0");
					storeFyDocumentNo.setIssueLoanoutNo("0");
					storeFyDocumentNo.setIssueOtafuNo("0");
					storeFyDocumentNo.setIssueOtafuStartNo("0");
					storeFyDocumentNo.setIssueOtherUnitsNo("0");
					storeFyDocumentNo.setIssueOtherUnitsStartNo("0");
					storeFyDocumentNo.setIssueWardNo(0);
					storeFyDocumentNo.setIsuueLoanoutStartNo("0");
					storeFyDocumentNo.setIndentToSocNo("0");
					storeFyDocumentNo.setInIndentNo("0");
					storeFyDocumentNo.setLoaninNo("0");
					storeFyDocumentNo.setLoaninStartNo("0");
					storeFyDocumentNo.setMedicineReturnNo("0");
					storeFyDocumentNo.setMmfIndentNo("0");
					storeFyDocumentNo.setMmfIndentStartNo("0");
					storeFyDocumentNo.setMmfNo("0");
					storeFyDocumentNo.setMmfStartNo("0");
					storeFyDocumentNo.setOpdIssueNo("0");
					storeFyDocumentNo.setOpdReturnNo("0");
					storeFyDocumentNo.setPatientReturnNo("0");
					storeFyDocumentNo.setPoIndentNo("0");
					storeFyDocumentNo.setPoIndentStartNo("0");
					storeFyDocumentNo.setPoNo("0");
					storeFyDocumentNo.setPoStartNo("0");
					storeFyDocumentNo.setQuotationRecNo("0");
					storeFyDocumentNo.setQuotationRecStartNo("0");
					storeFyDocumentNo.setQuotationReqNo("0");
					storeFyDocumentNo.setQuotationReqStartNo("0");
					storeFyDocumentNo.setSocIndentNo("0");
					storeFyDocumentNo.setSocIndentStartNo("0");
					storeFyDocumentNo.setTenderNo("0");
					storeFyDocumentNo.setVendorReturnNo("0");
					storeFyDocumentNo.setVendorReturnStartNo("0");
					storeFyDocumentNo.setWardReturnNo("0");
					storeFyDocumentNo.setWorkOrderNo("0");
					storeFyDocumentNo.setWorkOrderStartNo("0");

					hbt.save(storeFyDocumentNo);



				}



			}


			successfullyAdded = true;
			tx.commit();

		} catch (RuntimeException e) {
			if (tx != null)
				tx.rollback();
			// throw e; // or display error message
			e.printStackTrace();
		} finally {
			//session.close();
		}

		return successfullyAdded;

	}



	// Method Added by Javed khan for Proforma B Approval

	public Map showProformaBApproval(Map<String,Object>dataMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasHospital> hospitalList = new ArrayList<MasHospital>();
		List<StoreProformaHeader> storeProformaHList = new ArrayList<StoreProformaHeader>();

		Session session = (Session) getSession();
		Criteria c = session.createCriteria(MasHospital.class).add(
				Restrictions.eq("Status", "y")).addOrder(Order.asc("HospitalName"));

		hospitalList = c.list();

		Criteria c1 = session.createCriteria(StoreProformaHeader.class)
		.add(Restrictions.eq("Status", "n"));

		storeProformaHList = c1.list();
		System.out.println("storeProformaHList in StoreDataServiceImple--->"+storeProformaHList.size());

		map.put("hospitalList", hospitalList);
		map.put("storeProformaHList", storeProformaHList);
		return map;
	}



	public Map getPendingProformaForApproval(Map<String,Object>dataMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasHospital> hospitalList = new ArrayList<MasHospital>();
		List<StoreProformaHeader> storeProformaHList = new ArrayList<StoreProformaHeader>();
		List<StoreProformaHeader> storeProformaHList1 = new ArrayList<StoreProformaHeader>();
		int hospitalId=0;
		int unitId=0;

		Session session = (Session) getSession();

		if(dataMap.get("hospitalId")!=null){
			hospitalId=(Integer)dataMap.get("hospitalId");
		}

		if(dataMap.get("unitId")!=null){
			unitId=(Integer)dataMap.get("unitId");
		}
		Criteria c = session.createCriteria(MasHospital.class).add(
				Restrictions.eq("Status", "y"));

		hospitalList = c.list();

		Criteria c1 = session.createCriteria(StoreProformaHeader.class)
		.add(Restrictions.eq("Status", "n"));

		storeProformaHList = c1.list();

		Criteria c2 = session.createCriteria(StoreProformaHeader.class)
		.add(Restrictions.eq("Hospital.Id", unitId))
		.add(Restrictions.eq("Status", "n")).addOrder(Order.desc("Id"));
		storeProformaHList1 = c2.list();

		map.put("hospitalList", hospitalList);
		map.put("storeProformaHList", storeProformaHList);
		map.put("storeProformaHList1", storeProformaHList1);
		map.put("unitId", unitId);
		return map;
	}


	// Method Added by Javed khan for Proforma B Approval

	public Map proformaBApproved(Map<String,Object>dataMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasHospital> hospitalList = new ArrayList<MasHospital>();
		List<StoreProformaHeader> storeProformaHList = new ArrayList<StoreProformaHeader>();
		List<StoreProformaHeader> storeProformaHList1 = new ArrayList<StoreProformaHeader>();
		int hospitalId=0;
		int unitId=0;
		int performaId=0;
		String approval="";
		String remarks="";
		Session session = (Session) getSession();

		if(dataMap.get("hospitalId")!=null){
			hospitalId=(Integer)dataMap.get("hospitalId");
		}

		if(dataMap.get("unitId")!=null){
			unitId=(Integer)dataMap.get("unitId");
		}

		if(dataMap.get("performaId")!=null){
			performaId=(Integer)dataMap.get("performaId");
		}
		if(dataMap.get("approval")!=null){
			approval=(String)dataMap.get("approval");
		}
		if(dataMap.get("remarks")!=null){
			remarks=(String)dataMap.get("remarks");
		}
		/*
		Criteria c = session.createCriteria(MasHospital.class).add(
				Restrictions.eq("Status", "y"));

		hospitalList = c.list();

		Criteria c1 = session.createCriteria(StoreProformaHeader.class)
		.add(Restrictions.eq("Status", "n"));

		storeProformaHList = c1.list();

		Criteria c2 = session.createCriteria(StoreProformaHeader.class)
		.add(Restrictions.eq("Hospital.Id", unitId))
		.add(Restrictions.eq("Status", "n"));
		storeProformaHList1 = c2.list();*/
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		//java.sql.Date approveDate = null;
		//approveDate = java.sql.Date.valueOf(date);
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			// save data  in StoreProformabApproved

			StoreProformabApproved storeProformabApproved = new StoreProformabApproved();
			storeProformabApproved.setRemarks(remarks);
			storeProformabApproved.setStatus(approval);
			storeProformabApproved.setProformaApprovedDate(HMSUtil
					.convertStringTypeDateToDateType(date));



			MasHospital masHospital = new MasHospital();
			masHospital.setId(unitId);
			storeProformabApproved.setHospital(masHospital);

			StoreProformaHeader storeProformaHeader1 = new StoreProformaHeader();
			storeProformaHeader1.setId(performaId);
			storeProformabApproved.setProforma(storeProformaHeader1);
			hbt.save(storeProformabApproved);

			// update status in StoreProformaHeader

			StoreProformaHeader storeProformaHeader = (StoreProformaHeader) getHibernateTemplate()
			.load(StoreProformaHeader.class, performaId);
			storeProformaHeader.setStatus(approval);
			hbt.update(storeProformaHeader);
			tx.commit();
		}catch(Exception e){
			e.printStackTrace();
			if (tx != null)
				tx.rollback();
		}
		//map.put("hospitalList", hospitalList);
		//map.put("storeProformaHList", storeProformaHList);
		//map.put("storeProformaHList1", storeProformaHList1);
		return map;
	}

	// add javed khan

	@SuppressWarnings("unchecked")
	public Map<String, Object> getIssueDetailPageByPage1(Map<String, Object> pageMap) {
		List<StoreIssueM> searchListForPopup = new ArrayList<StoreIssueM>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		// List<StoreIssueT> issueTList=new ArrayList<StoreIssueT>();
		List<StoreIssueT> loanList = new ArrayList<StoreIssueT>(); // javed khan
		List issueTList = new ArrayList();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<StoreSetup> storeSetupList = new ArrayList<StoreSetup>();
		List stockAvailableList = new ArrayList();
		List loanOutList = new ArrayList();
		StoreSetup storeSetup = new StoreSetup();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		SimpleDateFormat formatterIn1 = new SimpleDateFormat("dd/MM/yyyy");
		SimpleDateFormat formatterOut1 = new SimpleDateFormat("yyyy-MM-dd");
		Map mapbatch = new HashMap(); // add javed for modify civ
		int issueId = 0;
		int pageNo = 1;
		String issued = "n";
		int deptId = 0;
		deptId = Integer.parseInt("" + pageMap.get("deptId"));
		int hospitalId = 0;
		hospitalId = (Integer)pageMap.get("hospitalId");
		HibernateTemplate hbt = getHibernateTemplate();
		session = (Session) getSession();
		session.flush();

		if (pageMap.get("pageNo") != null) {
			pageNo = Integer.parseInt("" + pageMap.get("pageNo"));
		}

		int firstResult = 0;
		int maxResults = 20;

		if (pageNo != 1) {
			firstResult = firstResult + (pageNo - 1) * 20;
		}

		try {
			String date4MySQL = formatterOut1.format(formatterIn1.parse(date));
			Date datestr = java.sql.Date.valueOf(date4MySQL);
			SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
			String issueDate=sdf.format(datestr);
			//Date issueDate=dateFormatterDDMMYYYY.parse(dateate);
			if (pageMap.get("issueId") != null) {
				issueId = Integer.parseInt("" + pageMap.get("issueId"));
			}

			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			storeSetupList = session.createCriteria(StoreSetup.class).list();
			if (storeSetupList != null && storeSetupList.size() > 0) {
				storeSetup = (StoreSetup) storeSetupList.get(0);
			}

			// Hibernate Pagination
			String pvmsSearch = "";
			String query="";
			if (pageMap.get("pvmsSearch") != null
					&& !((String) pageMap.get("pvmsSearch")).equals(""))
			{
				pvmsSearch = "%" + (String) pageMap.get("pvmsSearch") + "%";
				map.put("pvmsNo1", pvmsSearch);
				// String query = " select b.item_id, i.pvms_no, i.nomenclature,
				// d.unit_name,a.department_id, a.id, b.id, max(b.qty_request),
				// sum(b.qty_issued) from store_issue_m a, store_issue_t
				// b,mas_store_item i, mas_store_item_conversion c,
				// mas_store_unit d where i.item_conversion_id =
				// c.item_conversion_id and c.purchase_unit_id = d.unit_id and
				// b.item_id=i.item_id and a.id = b.issue_m_id and b.issue_m_id
				// = " + issueId + " and (i.pvms_no like '" + pvmsSearch + "' or
				// i.nomenclature like '" + pvmsSearch + "') group by
				// b.item_id";
				// add b.CIV_LOAN by javed khan
				query = " select b.item_id, i.pvms_no, i.nomenclature, d.unit_name,a.department_id, a.id as id1,   b.id, max(b.qty_request), sum(b.qty_issued),i.BRANDED_GENERIC,b.BATCH_NO,b.CIV_LOAN from store_issue_m a, store_issue_t b,mas_store_item i, mas_store_item_conversion c, mas_store_unit d " +
				"where i.item_conversion_id = c.item_conversion_id and c.purchase_unit_id = d.unit_id and b.item_id=i.item_id and a.id = b.issue_m_id and b.issue_m_id = "
				+ issueId
				+ " and i.pvms_no like '"
				+ pvmsSearch
				+ "' group by b.item_id, i.pvms_no, i.nomenclature, d.unit_name,a.department_id, a.id,   b.id ,i.BRANDED_GENERIC,b.BATCH_NO, b.CIV_LOAN";
				issueTList = session.createSQLQuery(query).setFirstResult(firstResult).setMaxResults(maxResults).list();
			}
			else
			{
				// add b.CIV_LOAN by javed khan
				query = "select b.item_id, i.pvms_no, i.nomenclature, d.unit_name,a.department_id, a.id as id1,   b.id , b.expiry_date, max(b.qty_request), sum(b.qty_issued),i.BRANDED_GENERIC,b.BATCH_NO, b.CIV_LOAN  from store_issue_m a, store_issue_t b,mas_store_item i, mas_store_item_conversion c, mas_store_unit d where i.item_conversion_id = c.item_conversion_id and c.purchase_unit_id = d.unit_id  and b.item_id=i.item_id and a.id = b.issue_m_id and b.issue_m_id  = "
					+ issueId + " group by b.item_id, i.pvms_no, i.nomenclature, d.unit_name,a.department_id, a.id,   b.id, b.expiry_date,i.BRANDED_GENERIC,b.BATCH_NO ,b.CIV_LOAN";
				// issueTList = session.createSQLQuery(query).setFirstResult(firstResult).setMaxResults(maxResults).list();
				issueTList = session.createSQLQuery(query).list();

			}
			employeeList = session.createCriteria(MasEmployee.class).add(Restrictions.eq("Status", "y")).add(Restrictions.eq("Hospital.Id", hospitalId)).list();
			departmentList = session.createCriteria(MasDepartment.class).add(Restrictions.eq("Status", "y")).addOrder(Order.asc("DepartmentName")).list();


			// javed for batch by issue
			List BatchList = new ArrayList();

			for(int k=0; k<issueTList.size();k++){
				Object[] object=(Object[])issueTList.get(k);
				String query123="select sibs.BATCH_NO from store_item_batch_stock sibs where sibs.ITEM_ID="+object[0]+"and sibs.EXPIRY_DATE> '"+issueDate+"' and sibs.CLOSING_STOCK>0 and sibs.DEPARTMENT_ID="+deptId+" group by sibs.BATCH_NO";
				BatchList=session.createSQLQuery(query123).list();
				mapbatch.put(object[0],BatchList);

			}


			if (pageMap.get("issue_type") != null
					&& pageMap.get("issue_type").toString().equals("l")) {
				searchListForPopup = session.createCriteria(StoreIssueM.class)
				.add(Restrictions.eq("Department.Id", deptId)).add(
						Restrictions.eq("Status", "o")).add(
								Restrictions.eq("IssueType", "l")).list();
			} else {
				searchListForPopup = session.createCriteria(StoreIssueM.class)
				.add(Restrictions.eq("Department.Id", deptId)).add(
						Restrictions.eq("IssueType", "i")).list();
			}
			// Get Loan Out Details
			List stockList = new ArrayList();
			List loanOutQtyList = new ArrayList();
			List objectList = new ArrayList();

			for (Iterator iterator = issueTList.iterator(); iterator.hasNext();) {
				Object[] object = (Object[]) iterator.next();
				String str = "";
				if (pageMap.get("issue_type") != null
						&& pageMap.get("issue_type").toString().equals("l")) {
					str = "select sum(b.qty_issued) from store_issue_m a, store_issue_t b,mas_store_item i where b.item_id=i.item_id and a.id = b.issue_m_id and a.status='o' and  a.issue_type='l' and b.item_order=2 and b.item_issued = '"
						+ object[0] + "' order by i.pvms_no ";
				} else {
					str = "select sum(b.qty_issued) from store_issue_m a, store_issue_t b,mas_store_item i where b.item_id=i.item_id and a.id = b.issue_m_id and a.status='o' and  a.issue_type='i' and b.item_order=2 and b.item_issued = '"
						+ object[0] + "' order by i.pvms_no ";
				}
				objectList = session.createSQLQuery(str).list();
				if (objectList.get(0) != null)
					map.put(object[0].toString(), objectList.get(0).toString());
				else
					map.put(object[0].toString(), "0");

				int itemId = Integer.parseInt(object[0].toString());
				int departmentId = Integer.parseInt(object[4].toString());
				int issueMId = Integer.parseInt(object[5].toString());

				BigDecimal stock = null;
				BigDecimal loanOutQty = null;
				String str3 = "select sum(nvl(a.closing_stock,0)) from store_item_batch_stock a,mas_store_item i " +
				" where a.item_id=i.item_id and a.item_id = '"
				+ itemId
				+ "' and a.department_id='"
				+ departmentId
				+ "' and a.expiry_date > '"
				+ issueDate
				+ "' group by a.item_id ";

				stockAvailableList = session.createSQLQuery(str3).list();

				String str1 = "select sum(a.qty_issued) from store_issue_t a,mas_store_item i " +
				"where a.item_id=i.item_id and a.item_id = '"
				+ itemId
				+ "' and a.issue_m_id='"
				+ issueMId
				+ "' and a.item_order='"
				+ 2
				+ "' group by a.item_id";

				loanOutList = session.createSQLQuery(str1).list();

				if (stockAvailableList.size() > 0
						&& stockAvailableList.get(0) != null) {
					stock = (BigDecimal) stockAvailableList.get(0);
				} else {
					stock = new BigDecimal("0");
				}

				if (loanOutList.size() > 0 && loanOutList.get(0) != null) {
					loanOutQty = (BigDecimal) loanOutList.get(0);
				} else {
					loanOutQty = new BigDecimal("0");
				}
				stockList.add(stock);
				loanOutQtyList.add(loanOutQty);
			}
			// for complete stock list

			int totalPages = 0;
			double totalPage = 0.0;
			if (pageMap.get("pvmsSearch") != null
					&& !((String) pageMap.get("pvmsSearch")).equals("")) {

				String str1 = "select count(*) from store_issue_t a,store_issue_m b,mas_store_item i  where a.item_id=i.item_id and  a.issue_m_id=b.id and a.issue_m_id='"
					+ issueId
					+ "' and i.pvms_no like '"
					+ pvmsSearch
					+ "'	";
				List countList = session.createSQLQuery(str1).list();
				if (countList != null && countList.size() > 0) {
					totalPage = (double) countList.size() / (double) 20;
					Double d = new Double(Math.ceil(totalPage));
					totalPages = d.intValue();
				}
			} else {
				String str1 = "select count(*) from store_issue_t a,store_issue_m b  where a.issue_m_id=b.id and a.issue_m_id='"
					+ issueId + "' group by a.item_id";
				List countList = session.createSQLQuery(str1).list();
				if (countList != null && countList.size() > 0) {
					totalPage = (double) countList.size() / (double) 20;
					Double d = new Double(Math.ceil(totalPage));
					totalPages = d.intValue();
				}
			}

			/*
			 * Map<String,Object> utilMap = new HashMap<String,Object>();
			 * utilMap = (Map)HMSUtil.getCurrentDateAndTime(); String date11 =
			 * (String)utilMap.get("currentDate");
			 */
			try {

				List<StoreIssueM> storeIssueMList1 = new ArrayList<StoreIssueM>();
				storeIssueMList1 = session.createCriteria(StoreIssueM.class)
				.add(Restrictions.eq("Id", issueId)).list();
				StoreIssueM storeIssueM = new StoreIssueM();
				String issueMStatus = "";
				if (storeIssueMList1.size() > 0 && storeIssueMList1 != null) {
					storeIssueM = storeIssueMList1.get(0);
					issueMStatus = storeIssueM.getStatus();
					map.put("issueMStatus", issueMStatus);
					map.put("departmentIdTemp", storeIssueM.getToStore()
							.getId());

				}
				SimpleDateFormat formatterIn = new SimpleDateFormat(
				"yyyy-MM-dd");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
				"dd/MM/yyyy");

				if (storeIssueM.getIssueDate() != null) {
					String date4MySQL1 = formatterOut.format(storeIssueM
							.getIssueDate());
					map.put("issueDate", date4MySQL1);
				} else {
					map.put("requestDate", date);
				}

				if (storeIssueM.getRequestDate() != null) {
					String requestedDate4MySQL = formatterOut
					.format(storeIssueM.getRequestDate());
					map.put("requestDate", requestedDate4MySQL);
				} else
					map.put("requestDate", date);

				List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
				storeInternalIndentMList = session.createCriteria(
						StoreInternalIndentM.class).add(
								Restrictions.eq("ToStore.Id", deptId)).list();

				if (storeInternalIndentMList != null
						&& storeInternalIndentMList.size() > 0) {
					map.put("storeInternalIndentMList",
							storeInternalIndentMList);
					if (storeIssueM.getRequestNo() != null)
						map
						.put("requestNo", storeIssueM.getRequestNo()
								.getId());
				}

				loanList = session.createCriteria(StoreIssueT.class).add(Restrictions.eq("CivLoan", "Loan"))
				.add(Restrictions.eq("IssueM.Id", issueId)).list();
			} catch (Exception e) {
				map.put("issueDate", date);
				map.put("requestDate", date);
				e.printStackTrace();
			}

			map.put("stockList", stockList);
			map.put("totalPages", totalPages);
			map.put("loanOutQtyList", loanOutQtyList);
			session.flush();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("mapbatch",mapbatch);// add javed for modify civ
		map.put("searchListForPopup", searchListForPopup);
		map.put("issueTList", issueTList);
		map.put("departmentList", departmentList);
		map.put("employeeList", employeeList);
		map.put("issueId", issueId);
		map.put("storeSetup", storeSetup);
		map.put("loanList", loanList);// add javed khan

		return map;
	}


	// Method Added by Javed khan for Proforma B Approval

	public Map showProformaBeforApproval(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreProformaHeader> storeProformaHeaderList = new ArrayList<StoreProformaHeader>();
		List<StoreProformaDetail> storeProformaDetailList = new ArrayList<StoreProformaDetail>();
		List<PatientPrescriptionHeader> patientPrescriptionHeaderList = new ArrayList<PatientPrescriptionHeader>();
		List<PatientPrescriptionDetails> patientPrescriptiondetailList = new ArrayList<PatientPrescriptionDetails>();
		boolean successfullyAdded = false;
		@SuppressWarnings("unused")
		int pageNo = 0;
		String entryNo = "";
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		String max = "";
		String no = "";
		int proformaId = 0;

		if (box.get("deptId") != null)
			deptId = Integer.parseInt("" + box.get("deptId"));
		if (box.get("hospitalId") != null)
			hospitalId = Integer.parseInt("" + box.get("hospitalId"));

		if (box.get("profromaId") != null)
			proformaId = Integer.parseInt("" + box.get("profromaId"));


		// Session sess = factory.openSession();
		session = (Session) getSession();
		storeProformaHeaderList = session.createCriteria(StoreProformaHeader.class).add(Restrictions.eq("Id", proformaId ))
		.add(Restrictions.eq("Hospital.Id", hospitalId )).list();

		storeProformaDetailList = session.createCriteria(StoreProformaDetail.class).add(Restrictions.eq("Po.Id", proformaId ))
		/*.add(Restrictions.eq("Hospital.Id", hospitalId ))*/.list();

		patientPrescriptionHeaderList = session.createCriteria(PatientPrescriptionHeader.class).list();
		patientPrescriptiondetailList = session.createCriteria(PatientPrescriptionDetails.class)
		.addOrder(Order.desc("Id")).list();


		map.put("storeProformaHeaderList", storeProformaHeaderList);
		map.put("storeProformaDetailList", storeProformaDetailList);
		map.put("patientPrescriptionHeaderList", patientPrescriptionHeaderList);
		map.put("patientPrescriptiondetailList", patientPrescriptiondetailList);

		return map;

	}

	/************** Changed By Ujjwal For Sql Injection  ***********/

	@Override
	public Map<String, Object> newSearchIndent(Map<String, Object> searchFieldMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		int indentId = 0;

		if (searchFieldMap.get("deptId") != null)
			deptId = Integer.parseInt("" + searchFieldMap.get("deptId"));
		if (searchFieldMap.get("hospitalId") != null)
			hospitalId = Integer.parseInt("" + searchFieldMap.get("hospitalId"));
		if (searchFieldMap.get("userName") != null)
			userName = ("" + searchFieldMap.get("userName"));
		if (searchFieldMap.get("indentId") != null)
			indentId = Integer.parseInt("" + searchFieldMap.get("indentId"));

		List<StoreIndentM> searchIndentList = new ArrayList<StoreIndentM>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<MasStoreAirForceDepot> masStoreAirForceDepotList = new ArrayList<MasStoreAirForceDepot>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<StoreIndentM> list = new ArrayList<StoreIndentM>();

		int grnStartNo = 0;
		String no = "";
		session = (Session) getSession();
		List objectList = new ArrayList();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {

			/*		masStoreAirForceDepotList =getHibernateTemplate().find(
						"from jkt.hms.masters.business.MasStoreAirForceDepot as md where md.Status = 'y'");
			 */		
			masStoreAirForceDepotList=session.createCriteria(MasStoreAirForceDepot.class).add(Restrictions.eq("Status", "y")).list();
			if (indentId!=0 ){
				searchIndentList=session.createCriteria(StoreIndentM.class)
				.add(Restrictions.eq("Status","o"))
				.add(Restrictions.eq("Department.Id",deptId))
				.add(Restrictions.eq("IndentType","d"))
				.add(Restrictions.eq("Hospital.Id",hospitalId))
				.add(Restrictions.eq("Id",indentId))
				.list();	
			}else if(indentId == 0 && searchFieldMap.get("fromDate") == null &&  searchFieldMap.get("toDate")== null){
				/*searchIndentList = getHibernateTemplate()
				.find(
						"from jkt.hms.masters.business.StoreIndentM as md where md.Status = 'o'and  md.Department.Id='"
								+ deptId + "' and md.IndentType='d' and md.Hospital.Id="+hospitalId+" order by md.Id desc ");
				 */		searchIndentList=session.createCriteria(StoreIndentM.class)
				 .add(Restrictions.eq("Status","o"))
				 .add(Restrictions.eq("Department.Id",deptId))
				 .add(Restrictions.eq("IndentType","d"))
				 .add(Restrictions.eq("Hospital.Id",hospitalId))
				 .addOrder(Order.desc("Id"))
				 .list();		
			}else if(searchFieldMap.get("fromDate") != null &&  searchFieldMap.get("toDate")!= null)
			{
				String fromDate=(String)searchFieldMap.get("fromDate");
				String toDate=(String)searchFieldMap.get("toDate");
				/*SimpleDateFormat formatterIn = new SimpleDateFormat(
					"dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat(
					"yyyy-MM-dd");
			String date4MySQL1 = formatterOut.format(formatterIn
					.parse(fromDate));
			String date4MySQL2 = formatterOut.format(formatterIn
					.parse(toDate));

			java.sql.Date startDate = java.sql.Date.valueOf(date4MySQL1);
			java.sql.Date endDate = java.sql.Date.valueOf(date4MySQL2);*/


				//session.createSQLQuery("select sim.INDENT_ID FROM STORE_INDENT_M sim WHERE SIM.STATUS='o' AND SIM.INDENT_TYPE='d' and sim.DEPARTMENT_ID='"+deptId+"' and sim.HOSPITAL_ID='"+hospitalId+"'  and SIM.INDENT_DATE BETWEEN TO_DATE('"+fromDate+"','DD/MM/YYYY') AND TO_DATE('"+toDate+"','DD/MM/YYYY') order by sim.INDENT_ID").list();			
				//	List indentList=
				Criteria c=	session.createCriteria(StoreIndentM.class)
				.add(Restrictions.eq("Status","o"))
				.add(Restrictions.eq("Department.Id",deptId))
				.add(Restrictions.eq("IndentType","d"))
				.add(Restrictions.eq("Hospital.Id",hospitalId))
				.add(Restrictions.between("IndentDate", HMSUtil.convertStringTypeDateToDateType(fromDate), HMSUtil.convertStringTypeDateToDateType(toDate)));
				c=c.setProjection(Projections.projectionList().add(Projections.property("Id")));
				List indentList=c.list();

				for(int i=0;i<indentList.size();i++){
					/*Object[] object=(Object[])indentList.get(i);
					 */
					int IndentId=Integer.parseInt(indentList.get(i).toString());
					StoreIndentM sim = new StoreIndentM();
					sim=(StoreIndentM) hbt.load(StoreIndentM.class,IndentId);
					searchIndentList.add(sim);
				}
				/*searchIndentList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreIndentM as md where md.Status = 'o'and  md.Department.Id="+ deptId+ " and md.IndentDate between '" + startDate+ "' and '"+ endDate +" and  md.IndentType='d' and md.Hospital.Id="+hospitalId+" order by md.Id desc ");*/

			}else{

				/*			searchIndentList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreIndentM as md where md.Status = 'o'and  md.Department.Id='"
							+ deptId + "' and md.IndentType='d' and md.Id="+indentId+" and md.Hospital.Id="+hospitalId+" order by md.Id desc ");
				 */

				/********** code Added By Ujjwal For Sql Injection*********/
				searchIndentList=session.createCriteria(StoreIndentM.class)
				.add(Restrictions.eq("Status","o"))
				.add(Restrictions.eq("Department.Id",deptId))
				.add(Restrictions.eq("IndentType","d"))
				.add(Restrictions.eq("Hospital.Id",hospitalId))
				.add(Restrictions.eq("IndentNo",hospitalId))
				.addOrder(Order.desc("Id"))
				.list();	

			}
			/*		sectionList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.MasStoreSection ");
			 */
			/********** code Added By Ujjwal For Sql Injection*********/
			sectionList=session.createCriteria(MasStoreSection.class).list();


		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("masStoreAirForceDepotList", masStoreAirForceDepotList);
		map.put("searchIndentList", searchIndentList);
		map.put("sectionList", sectionList);
		map.put("maxIndentNo", no);

		return map;
	}



	public Map getIndentModifyMapForDepot1(int indentId, int pageNo , int deptId, int hospitalId) {

		Map map = new HashMap();
		List<StoreIndentM> gridIndentMList = new ArrayList<StoreIndentM>();
		List<StoreIndentT> gridIndentTList = new ArrayList<StoreIndentT>();
		@SuppressWarnings("unused")
		List<MasStoreSection> gridSectionList = new ArrayList<MasStoreSection>();
		List<MasStoreAirForceDepot> masStoreAirForceDepotList = new ArrayList<MasStoreAirForceDepot>();
		int id = 0;
		int firstResult = 0;
		int maxResults = 8;
		int totalNumberOfRecord = 0 ;
		int totalNumberOfPages = 0 ;
		if (pageNo != 1) {
			firstResult = firstResult + (pageNo - 1) * 8;
		}
		List<StoreIndentM> searchIndentList = new ArrayList<StoreIndentM>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<MasStoreSupplier> masStoreSupplierList = new ArrayList<MasStoreSupplier>();
		List<StoreIndentM> list = new ArrayList<StoreIndentM>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();

		session = (Session) getSession();
		List objectList = new ArrayList();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		session = (Session) getSession();
		Transaction tx = null;
		try {
			// --------------Transaction Started----------
			tx = session.beginTransaction();
			Criteria c = session.createCriteria(StoreIndentT.class).add(
					Restrictions.eq("Indent.Id", indentId));
			totalNumberOfRecord = c.list().size();
			c.setFirstResult(firstResult);
			c.setMaxResults(maxResults);
			gridIndentTList = c.list();
			gridIndentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIndentM as md where md.Id = '"
					+ indentId + "' and md.Status='o'");
			String qry = "select mas.item_id,mas.pvms_no,mas.nomenclature,mas.strength,b.stock,c.qty_in_mmf,mas.old_niv_no,mas.department_id,con.item_unit_name from mas_store_item mas inner join mas_store_item_conversion con on mas.item_conversion_id= con.item_conversion_id left outer join (select ba.item_id,sum(ba.closing_stock) stock from store_item_batch_stock ba where department_id=1 group by ba.item_id)b on mas.item_id=b.item_id left outer join (select it.qty_in_mmf, it.item_id from  store_indent_m im inner join store_indent_t it on im.indent_id=it.indent_id where im.mmf_for_the_year='"
				+ year + "' )c on mas.item_id=c.item_id";
			objectList = (List) session.createSQLQuery(qry).list();
			masStoreSupplierList = getHibernateTemplate()
			.find(
			"from jkt.hms.masters.business.MasStoreSupplier as md order by md.SupplierName");
			searchIndentList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreIndentM as md where md.Status = 'o'and  md.Department.Id='"
					+ deptId + "' and md.IndentType='d' and md.Hospital.Id="+ hospitalId +" order by md.Id desc ");
			sectionList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasStoreSection ");
			masStoreAirForceDepotList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasStoreAirForceDepot as md where md.Status = 'y'");
			sectionList = getHibernateTemplate().find(
			"from jkt.hms.masters.business.MasStoreSection ");
			// --------------Transaction Ended----------
			tx.commit();

		} catch (Exception e) {
			// --------------In case of Transaction Failure----------
			if (tx != null)
				tx.rollback();
			e.printStackTrace();

		}
		totalNumberOfPages = ((int)totalNumberOfRecord/8)+1 ;
		map.put("totalNumberOfPages", totalNumberOfPages);
		map.put("gridIndentMList", gridIndentMList);
		map.put("gridIndentTList", gridIndentTList);
		map.put("indentId", indentId);
		map.put("masStoreSupplierList", masStoreSupplierList);
		map.put("searchIndentList", searchIndentList);
		map.put("sectionList", sectionList);
		map.put("objectList", objectList);
		map.put("masStoreAirForceDepotList", masStoreAirForceDepotList);

		return map;
	}

	// add javed khan
	public Map<String, Object> getDepartmentExistingIndentData(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();
		String pvms = null;
		String nomenclature = null;
		String au = null;
		Integer qtymmf = null;
		Integer qtyRequest = null;
		Integer stock = null;
		int id = 0;
		int itemId=0;
		String common_name = null;
		String reason = null;  // add by javed
		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasDepartment> departmentCentralStoreList = new ArrayList<MasDepartment>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		List<MasEmployee> requestByEmployeeList = new ArrayList<MasEmployee>();
		List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		List<StoreInternalIndentM> searchStoreInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		List<StoreIssueM> storeIssueMListForReport = new ArrayList<StoreIssueM>();
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		StoreInternalIndentT storeInternalIndentT1 = new StoreInternalIndentT();
		int sno = 0;
		int hospitalId=box.getInt("hospitalId");
		String demandNo = box.get(DEMAND_NO);
		storeInternalIndentMList = hbt
		.find("from jkt.hms.masters.business.StoreInternalIndentM inp where inp.Id = '"
				+ demandNo
				+ "' and inp.Department.Id="
				+ box.get(FROM_WARD)+" and inp.Hospital.Id="+hospitalId+" and inp.Status='u'");
		map.put("storeInternalIndentMList", storeInternalIndentMList);
		if (box.getString("pvmsNo").length() > 0) {
			String strForPvms = box.getString("pvmsNo");
			strForPvms = strForPvms.replace(" ", "%") + "%";
			storeInternalIndentTList = hbt
			.find("from jkt.hms.masters.business.StoreInternalIndentT as inp where inp.Internal.Id = '"
					+ demandNo
					+ "' and inp.Internal.Department.Id='"
					+ box.get(FROM_WARD)
					+ "' and inp.Item.PvmsNo like '" + strForPvms + "'");
		} else {
			storeInternalIndentTList = hbt
			.find("from jkt.hms.masters.business.StoreInternalIndentT as inp where inp.Internal.Id = '"
					+ demandNo
					+ "' and inp.Internal.Department.Id="
					+ box.get(FROM_WARD) + " order by inp.Item.PvmsNo ");
		}
		// Check for existence of previous year records
		departmentList = getHibernateTemplate()
		.find("from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y'");
		approvedByEmployeeList = getHibernateTemplate()
		.find("from jkt.hms.masters.business.MasEmployee as mi where  mi.Status = 'y' and mi.Hospital.Id="+hospitalId+" and  and mi.EmpCategory.Id  ='1'");
		requestByEmployeeList = getHibernateTemplate()
		.find("from jkt.hms.masters.business.MasEmployee as mi where mi.Status = 'y'and mi.Hospital.Id="+hospitalId);

		departmentCentralStoreList = getHibernateTemplate()
		.find("from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y' and mi.DepartmentType.Id='3'");

		// search list for Demand no for search criteria on each page

		searchStoreInternalIndentMList = session.createCriteria(
				StoreInternalIndentM.class).add(
						Restrictions.eq("Department.Id", box.getInt(FROM_WARD)))
						.add(Restrictions.eq("Hospital.Id",hospitalId ))
						.addOrder(Order.desc("Id")).list();
		map.put("departmentList", departmentList);
		map.put("approvedByEmployeeList", approvedByEmployeeList);
		map.put("departmentCentralStoreList",departmentCentralStoreList);
		map.put("requestByEmployeeList", requestByEmployeeList);
		map.put("searchStoreInternalIndentMList",
				searchStoreInternalIndentMList);
		map.put("newDemandNo", demandNo);

		/*if (storeInternalIndentTList != null
			&& storeInternalIndentTList.size() > 0) {
		int internalIndentId = storeInternalIndentTList.get(0)
				.getInternal().getId();

		map.put("demandNo",storeInternalIndentTList.get(0).getInternal().getDemandNo());
	}*/
		if(storeInternalIndentMList != null && storeInternalIndentMList.size() > 0){
			map.put("demandNo",storeInternalIndentMList.get(0).getDemandNo());
			map.put("internalIndentId", storeInternalIndentMList.get(0).getId());
		}

		for (Iterator iterator = storeInternalIndentTList.iterator(); iterator
		.hasNext();) {
			StoreInternalIndentT storeInternalIndentT = (StoreInternalIndentT) iterator
			.next();
			try {
				id = storeInternalIndentT.getId();
			} catch (Exception e) {
				id = 0;
			}
			try {
				pvms = storeInternalIndentT.getItem().getPvmsNo();
				itemId=storeInternalIndentT.getItem().getId();
			} catch (Exception e) {
				pvms = "";
			}
			try {
				nomenclature = storeInternalIndentT.getItem().getNomenclature();
			} catch (Exception e) {
				nomenclature = "";
			}
			try {
				if(storeInternalIndentT.getItem().getCommonName() != null && !storeInternalIndentT.getItem().getCommonName().equals(""))
					common_name = storeInternalIndentT.getItem().getCommonName();
				else
					common_name = "No Common Name";
			} catch (Exception e) {
				common_name = "No Common Name";
			}
			try {
				au = storeInternalIndentT.getItem().getItemConversion()
				.getPurchaseUnit().getUnitName();
			} catch (Exception e) {
				au = "";
			}
			try {
				qtymmf = storeInternalIndentT.getMmfQty();
			} catch (Exception e) {
				qtymmf = 0;
			}
			try {
				qtyRequest = storeInternalIndentT.getQtyRequest();
			} catch (Exception e) {
				qtyRequest = 0;
			}
			try {
				reason = storeInternalIndentT.getReasonForDemand();
			} catch (Exception e) {
				reason = "";
			}

			hData = new HashMap<String, Object>();
			Map<String, Object> groupByItemMap = new HashMap<String, Object>();
			String str = "select inp.item_id,sum(inp.closing_stock) from store_item_batch_stock inp where inp.department_id = "
				+ box.get(FROM_WARD) + " group by inp.item_id";

			List<StoreItemBatchStock> groupByItemList = session.createSQLQuery(str).list();
			for (Iterator iterator2 = groupByItemList.iterator(); iterator2
			.hasNext();) {
				Object[] obj = (Object[]) iterator2.next();
				// Integer itemId = (Integer) obj[0];
				BigDecimal closingStock = (BigDecimal) obj[1];
				groupByItemMap.put(obj[0].toString(), closingStock);
			}
			hData.put("id", id);
			/*if (groupByItemMap.get(id) != null) {
			hData.put("stock", groupByItemMap.get(id));
		} else {
			hData.put("stock", 0);
		}*/
			int qtyInHand = 0 ;
			try {
				qtyInHand = storeInternalIndentT.getStockInHand();
			} catch (Exception e) {
				qtyInHand = 0;
			}
			hData.put("reason", reason);
			hData.put("stock", qtyInHand);
			hData.put("pvms", pvms);
			hData.put("itemId",itemId);
			hData.put("nomenclature", nomenclature);
			hData.put("commonName",common_name);
			hData.put("au", au);
			hData.put("qtymmf", qtymmf);
			hData.put("qtyRequest", qtyRequest);
			vResult.add(hData);
		}
		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}

		storeIssueMListForReport = session.createCriteria(StoreIssueM.class).
		createAlias("RequestNo", "storeinternalindent")
		.add(Restrictions.eq("storeinternalindent.Id",Integer.parseInt(demandNo)))
		.add(Restrictions.eq("storeinternalindent.Hospital.Id",hospitalId ))
		.createAlias("storeinternalindent.Department", "fromDept").add(Restrictions.eq("fromDept.Id", box.getInt(FROM_WARD)))
		.list();

		if(storeIssueMListForReport.size()>0){
			for(StoreIssueM storeIssueM :storeIssueMListForReport){
				int issueId = storeIssueM.getId();
				map.put("issueId", issueId);
			}
		}
		try
		{
			/*pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
				box);*/
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);
		} catch (Exception e) {
			e.printStackTrace();
		}
		// javed khan for loan out
		List<StoreLoanoutExpendT> loanoutTList = new ArrayList<StoreLoanoutExpendT>();
		/*List loanoutTList = new ArrayList();
	String loanQry="select * from STORE_LOANOUT_EXPEND_t slet "
		+" left outer join  STORE_LOANOUT_EXPEND_m slem on  slet.ISSUE_M_ID=slem.ID "
		+" where slem.STATUS='l'";
	loanoutTList=session.createSQLQuery(loanQry).list();*/
		loanoutTList=session.createCriteria(StoreLoanoutExpendT.class).
		createAlias("IssueM", "storeloanoutM")
		.add(Restrictions.eq("storeloanoutM.Status","l")).list();
		map.put("loanoutTList", loanoutTList);



		// javed khan for loan out

		//map.put("demandNo", box.get(DEMAND_NO));
		map.put("pagedArray", pagedArray);
		map.put("storeInternalIndentTList", storeInternalIndentTList);
		return map;
	}



	public Map<String, Object> doAddInternalIndentsubmit(Box box)
	{
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();

		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		session = (Session) getSession();
		int deptId = box.getInt(FROM_WARD);
		int hospitalId =Integer.parseInt (""+box.get("hospitalId"));
		int internalIndentId = box.getInt("indentId");
		String demandNo = box.get(DEMAND_NO);
		String msg="";
		Transaction tx =null;
		try {
			tx = session.beginTransaction();
			List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
			List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			if (internalIndentId != 0) {
				StoreInternalIndentM siim = new StoreInternalIndentM();
				siim=(StoreInternalIndentM) hbt.load(StoreInternalIndentM.class, internalIndentId);
				siim.setStatus("o");
				hbt.update(siim);
				hbt.refresh(siim);
				tx.commit();
				msg="MR "+demandNo+" saved successfully.";
			
			}
		}catch(Exception e){e.printStackTrace();}

		map.put("msg", msg);
		return map;
	}




	//add javed khan
	public Map<String, Object> getDepartmentIndentSearchData(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();
		String pvms = null;
		String nomenclature = null;
		String au = null;
		Integer qtymmf = null;
		Integer qtyRequest = null;
		Integer stock = null;
		int id = 0;
		int itemId=0;
		String common_name = null;
		String reason = null;  // add by javed
		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasDepartment> departmentCentralStoreList = new ArrayList<MasDepartment>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		List<MasEmployee> requestByEmployeeList = new ArrayList<MasEmployee>();
		List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		List<StoreInternalIndentM> searchStoreInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		List<StoreIssueM> storeIssueMListForReport = new ArrayList<StoreIssueM>();
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		StoreInternalIndentT storeInternalIndentT1 = new StoreInternalIndentT();
		int sno = 0;
		int hospitalId=box.getInt("hospitalId");
		String demandNo = box.get(DEMAND_NO);
		int DemandId = box.getInt(DEMAND_NO);

		/* code comment by javed khan for SQL Injuction on 14-08-2012

	  String sql="select siim.ID, siim.DEMAND_NO, siim.DEMAND_DATE from store_internal_indent_m siim  where  siim.DEPARTMENT_ID = "
		+box.get(FROM_WARD)+" and siim.hospital_id = "+hospitalId;

		 code comment by javed khan for SQL Injuction on 14-08-2012
		 */

		// code add  by javed khan for SQL Injuction on 14-08-2012

		Criteria c = session.createCriteria(StoreInternalIndentM.class).add(Restrictions.eq("Department.Id", box.getInt(FROM_WARD))).
		add(Restrictions.eq("Hospital.Id", hospitalId));
		/*c=c.setProjection(Projections.projectionList()
			.add(Projections.property("Id"))).setProjection(Projections.projectionList()
			.add(Projections.property("DemandNo")))
			.setProjection(Projections.projectionList()
			.add(Projections.property("DemandDate")));*/

		if(demandNo != null && !demandNo.equals("")){
			//sql = sql+ " and siim.ID= "+demandNo;  comment by javed khan for SQL Injuction on 14-08-2012
			c=c.add(Restrictions.eq("Id",DemandId)); //add  by javed khan for SQL Injuction on 14-08-2012
		}
		if(box.get("fromDate") != null && !box.get("fromDate").equals("") &&  box.get("toDate")!= null  && !box.get("toDate").equals("") )
		{
			String fromDate=(String)box.get("fromDate");
			String todate=(String)box.get("toDate");
			c=c.add(Restrictions.between("DemandDate", HMSUtil.convertStringTypeDateToDateType(fromDate), HMSUtil.convertStringTypeDateToDateType(todate))); // add  by javed khan for SQL Injuction on 14-08-2012
			//sql = sql+ " and  siim.DEMAND_DATE between to_date('"+fromDate+"','dd/mm/yyyy') and to_date('"+todate+"','dd/mm/yyyy') " ;  comment by javed khan for SQL Injuction on 14-08-2012

		}
		c=c.addOrder(Order.desc("Id"));
		List<StoreInternalIndentM> objectList= c.list();

		// code add  by javed khan for SQL Injuction on 14-08-2012

		//sql =sql+" order by siim.Id desc";
		map.put("objectList", objectList);

		/* code comment by javed khan for SQL Injuction on 14-08-2012

		storeInternalIndentMList = hbt
		.find("from jkt.hms.masters.business.StoreInternalIndentM inp where inp.Id = '"
				+ demandNo
				+ "' and inp.Department.Id="
				+ box.get(FROM_WARD)+" and inp.Hospital.Id="+hospitalId);

		 code comment by javed khan for SQL Injuction on 14-08-2012
		 */

		// code add  by javed khan for SQL Injuction on 14-08-2012
		storeInternalIndentMList = session.createCriteria(StoreInternalIndentM.class).add(
				Restrictions.eq("Id", DemandId))
				.add(Restrictions.eq("Department.Id",box.getInt(FROM_WARD)))
				.add(Restrictions.eq("Hospital.Id", hospitalId)).list();

		// code add  by javed khan for SQL Injuction on 14-08-2012

		map.put("storeInternalIndentMList", storeInternalIndentMList);

		if (box.getString("pvmsNo").length() > 0) {
			String strForPvms = box.getString("pvmsNo");
			strForPvms = strForPvms.replace(" ", "%") + "%";

			/* code comment by javed khan for SQL Injuction on 14-08-2012


		storeInternalIndentTList = hbt
		.find("from jkt.hms.masters.business.StoreInternalIndentT as inp where inp.Internal.Id = '"
				+ demandNo
				+ "' and inp.Internal.Department.Id='"
				+ box.get(FROM_WARD)
				+ "' and inp.Item.PvmsNo like '" + strForPvms + "'");

			 code comment by javed khan for SQL Injuction on 14-08-2012
			 */

			// code add  by javed khan for SQL Injuction on 14-08-2012

			storeInternalIndentTList = session.createCriteria(StoreInternalIndentT.class).
			createAlias("Internal", "i").
			add(Restrictions.eq("i.Id", DemandId))
			.add(Restrictions.eq("i.Department.Id", box.getInt(FROM_WARD))).
			createAlias("Item", "Item").
			add(Restrictions.like("Item.PvmsNo", strForPvms )).list();

			// code add  by javed khan for SQL Injuction on 14-08-2012		

		} else {
			/* code comment by javed khan for SQL Injuction on 14-08-2012

		storeInternalIndentTList = hbt
		.find("from jkt.hms.masters.business.StoreInternalIndentT as inp where inp.Internal.Id = '"
				+ demandNo
				+ "' and inp.Internal.Department.Id="
				+ box.get(FROM_WARD) + " order by inp.Item.PvmsNo ");

				 code comment by javed khan for SQL Injuction on 14-08-2012
			 */

			// code add  by javed khan for SQL Injuction on 14-08-2012

			storeInternalIndentTList = session.createCriteria(StoreInternalIndentT.class).
			createAlias("Internal", "i").
			add(Restrictions.eq("i.Id", DemandId))
			.add(Restrictions.eq("i.Department.Id", box.getInt(FROM_WARD))).
			createAlias("Item", "Item").
			addOrder(Order.asc("Item.PvmsNo")).list();

			// code add  by javed khan for SQL Injuction on 14-08-2012	

		}
		// Check for existence of previous year records

		/* code comment by javed khan for SQL Injuction on 14-08-2012

	departmentList = getHibernateTemplate()
	.find("from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y'");
	approvedByEmployeeList = getHibernateTemplate()
	.find("from jkt.hms.masters.business.MasEmployee as mi where  mi.Status = 'y' and mi.Hospital.Id="+hospitalId+"  and mi.EmpCategory.Id  ='1' ");
	requestByEmployeeList = getHibernateTemplate()
	.find("from jkt.hms.masters.business.MasEmployee as mi where mi.Status = 'y'and mi.Hospital.Id="+hospitalId);

	departmentCentralStoreList = getHibernateTemplate()
	.find("from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y' and mi.DepartmentType.Id='3'");

	code comment by javed khan for SQL Injuction on 14-08-2012
		 */


		// code add  by javed khan for SQL Injuction on 14-08-2012

		departmentList = session.createCriteria(MasDepartment.class).add(
				Restrictions.eq("Status", "y")).addOrder(Order.asc("DepartmentName")).list();
		approvedByEmployeeList = session.createCriteria(MasEmployee.class).add(
				Restrictions.eq("Status", "y")).add(Restrictions.eq("Hospital.Id", hospitalId)).list();
		requestByEmployeeList =session.createCriteria(MasEmployee.class).add(
				Restrictions.eq("Status", "y")).add(Restrictions.eq("Hospital.Id", hospitalId)).list();
		departmentCentralStoreList = session.createCriteria(MasDepartment.class).add(
				Restrictions.eq("Status", "y")).
				createAlias("DepartmentType", "DT").add(
						Restrictions.eq("DT.Id", 3)).addOrder(Order.asc("DepartmentName")).list();
		// code add  by javed khan for SQL Injuction on 14-08-2012

		// search list for Demand no for search criteria on each page

		searchStoreInternalIndentMList = session.createCriteria(
				StoreInternalIndentM.class).add(
						Restrictions.eq("Department.Id", box.getInt(FROM_WARD)))
						.add(Restrictions.eq("Hospital.Id",hospitalId ))
						.addOrder(Order.desc("Id")).list();
		map.put("departmentList", departmentList);
		map.put("approvedByEmployeeList", approvedByEmployeeList);
		map.put("departmentCentralStoreList",departmentCentralStoreList);
		map.put("requestByEmployeeList", requestByEmployeeList);
		map.put("searchStoreInternalIndentMList",
				searchStoreInternalIndentMList);
		map.put("newDemandNo", demandNo);

		/*if (storeInternalIndentTList != null
			&& storeInternalIndentTList.size() > 0) {
		int internalIndentId = storeInternalIndentTList.get(0)
				.getInternal().getId();

		map.put("demandNo",storeInternalIndentTList.get(0).getInternal().getDemandNo());
	}*/
		if(storeInternalIndentMList != null && storeInternalIndentMList.size() > 0){
			map.put("demandNo",storeInternalIndentMList.get(0).getDemandNo());
			map.put("internalIndentId", storeInternalIndentMList.get(0).getId());
		}

		for (Iterator iterator = storeInternalIndentTList.iterator(); iterator
		.hasNext();) {
			StoreInternalIndentT storeInternalIndentT = (StoreInternalIndentT) iterator
			.next();
			try {
				id = storeInternalIndentT.getId();
			} catch (Exception e) {
				id = 0;
			}
			try {
				pvms = storeInternalIndentT.getItem().getPvmsNo();
				itemId=storeInternalIndentT.getItem().getId();
			} catch (Exception e) {
				pvms = "";
			}
			try {
				nomenclature = storeInternalIndentT.getItem().getNomenclature();
			} catch (Exception e) {
				nomenclature = "";
			}
			try {
				if(storeInternalIndentT.getItem().getCommonName() != null && !storeInternalIndentT.getItem().getCommonName().equals(""))
					common_name = storeInternalIndentT.getItem().getCommonName();
				else
					common_name = "No Common Name";
			} catch (Exception e) {
				common_name = "No Common Name";
			}
			try {
				au = storeInternalIndentT.getItem().getItemConversion()
				.getPurchaseUnit().getUnitName();
			} catch (Exception e) {
				au = "";
			}
			try {
				qtymmf = storeInternalIndentT.getMmfQty();
			} catch (Exception e) {
				qtymmf = 0;
			}
			try {
				qtyRequest = storeInternalIndentT.getQtyRequest();
			} catch (Exception e) {
				qtyRequest = 0;
			}
			try {
				reason = storeInternalIndentT.getReasonForDemand();
			} catch (Exception e) {
				reason = "";
			}

			hData = new HashMap<String, Object>();
			Map<String, Object> groupByItemMap = new HashMap<String, Object>();
			String str = "select inp.item_id,sum(inp.closing_stock) from store_item_batch_stock inp where inp.department_id = "
				+ box.get(FROM_WARD) + " group by inp.item_id";

			List<StoreItemBatchStock> groupByItemList = session.createSQLQuery(str).list();
			for (Iterator iterator2 = groupByItemList.iterator(); iterator2
			.hasNext();) {
				Object[] obj = (Object[]) iterator2.next();
				// Integer itemId = (Integer) obj[0];
				BigDecimal closingStock = (BigDecimal) obj[1];
				groupByItemMap.put(obj[0].toString(), closingStock);
			}
			hData.put("id", id);
			/*if (groupByItemMap.get(id) != null) {
			hData.put("stock", groupByItemMap.get(id));
		} else {
			hData.put("stock", 0);
		}*/
			int qtyInHand = 0 ;
			try {
				qtyInHand = storeInternalIndentT.getStockInHand();
			} catch (Exception e) {
				qtyInHand = 0;
			}
			hData.put("reason", reason);
			hData.put("stock", qtyInHand);
			hData.put("pvms", pvms);
			hData.put("itemId",itemId);
			hData.put("nomenclature", nomenclature);
			hData.put("commonName",common_name);
			hData.put("au", au);
			hData.put("qtymmf", qtymmf);
			hData.put("qtyRequest", qtyRequest);
			vResult.add(hData);
		}
		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}



		if(storeIssueMListForReport.size()>0){
			for(StoreIssueM storeIssueM :storeIssueMListForReport){
				int issueId = storeIssueM.getId();
				map.put("issueId", issueId);
			}
		}

		// javed khan for loan out
		List<StoreLoanoutExpendT> loanoutTList = new ArrayList<StoreLoanoutExpendT>();
		/*List loanoutTList = new ArrayList();
	String loanQry="select * from STORE_LOANOUT_EXPEND_t slet "
		+" left outer join  STORE_LOANOUT_EXPEND_m slem on  slet.ISSUE_M_ID=slem.ID "
		+" where slem.STATUS='l'";
	loanoutTList=session.createSQLQuery(loanQry).list();*/
		loanoutTList=session.createCriteria(StoreLoanoutExpendT.class).
		createAlias("IssueM", "storeloanoutM")
		.add(Restrictions.eq("storeloanoutM.Status","l")).list();
		map.put("loanoutTList", loanoutTList);



		// javed khan for loan out

		//map.put("demandNo", box.get(DEMAND_NO));
		map.put("pagedArray", pagedArray);
		map.put("storeInternalIndentTList", storeInternalIndentTList);
		return map;
	}


	public Map<String, Object> doAddIndentsubmit(Box box)
	{
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();

		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		session = (Session) getSession();

		int deptId = box.getInt(FROM_WARD);
		int hospitalId =Integer.parseInt (""+box.get("hospitalId"));
		int indentId = box.getInt("indentId");
		String msg="";
		Transaction tx =null;
		try {
			tx = session.beginTransaction();
			List<StoreIndentM> storeIndentMList = new ArrayList<StoreIndentM>();
			List<StoreIndentT> storeIndentTList = new ArrayList<StoreIndentT>();

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			if (indentId != 0) {

				StoreIndentM siim = new StoreIndentM();
				siim=(StoreIndentM) hbt.load(StoreIndentM.class, indentId);
				siim.setStatus("o");
				hbt.update(siim);
				hbt.refresh(siim);
				msg="Successfully Indent created.";
			}
		}catch(Exception e){e.printStackTrace();}

		map.put("msg", msg);
		return map;
	}

	public Map<String, Object> showGrnProJsp(Box box, Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		int proformaId=0;
		if (dataMap.get("deptId") != null)
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		if (dataMap.get("hospitalId") != null)
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		if (dataMap.get("userName") != null)
			userName = ("" + dataMap.get("userName"));
		if(dataMap.get("proformaId")!=null)
			proformaId=Integer.parseInt(""+dataMap.get("proformaId"));


		List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier>();
		List<MasUnitOfMeasurement> uomList = new ArrayList<MasUnitOfMeasurement>();
		List<MasManufacturer> manufacturerList = new ArrayList<MasManufacturer>();
		List<StoreGrnM> searchGrnList = new ArrayList<StoreGrnM>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<MasStoreAirForceDepot> unitList = new ArrayList<MasStoreAirForceDepot>();
		List<StoreGrnM> grnList = new ArrayList<StoreGrnM>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<MasUnit>trueUnitList=new ArrayList<MasUnit>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<StoreProformaHeader> storeProformaNoList = new ArrayList<StoreProformaHeader>();
		List<StoreLoaninT> storeLoaninTList = new ArrayList<StoreLoaninT>();
		StoreProformaHeader storeProformaHeader=new StoreProformaHeader();
		MasStoreSupplier masStoreSupplier=new MasStoreSupplier();


		List crvObj=new ArrayList();

		String no = "";
		session = (Session) getSession();
		HibernateTemplate hbt = getHibernateTemplate();
		try {
			StoreIndentM siim = new StoreIndentM();
			storeProformaHeader=(StoreProformaHeader) hbt.load(StoreProformaHeader.class, proformaId);
			crvObj=session.createSQLQuery("select crv_id from store_proforma_detail spd where spd.PROFORMA_ID='"+proformaId+"'").list();
			StoreLoaninT storeLoaninT=null;
			for(int i=0;i<crvObj.size();i++){
				int crvId=Integer.parseInt(crvObj.get(i).toString());
				storeLoaninT=new StoreLoaninT();
				storeLoaninT=(StoreLoaninT) hbt.load(StoreLoaninT.class, crvId);
				storeLoaninTList.add(storeLoaninT);
			}
			if(storeLoaninT!=null){
				int supplierId=storeLoaninT.getLoaninMaster().getSupplier().getId();
				masStoreSupplier=(MasStoreSupplier)hbt.load(MasStoreSupplier.class,supplierId);
			}
			supplierList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasStoreSupplier as ms where ms.Hospital.Id='"+hospitalId+"' order by ms.SupplierName");
			uomList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasUnitOfMeasurement as mi where mi.Status = 'y'");
			// manufacturerList=getHibernateTemplate().find("from
			// jkt.hms.masters.business.MasManufacturer as mi where mi.Status =
			// 'y' order by mi.ManufacturerName");
			searchGrnList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreGrnM as mi where mi.Department.Id='"
					+ deptId + "' and mi.Hospital.Id='"+hospitalId+"'");
			employeeList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasEmployee as mi  where mi.Status = 'y' and mi.Hospital.Id='"+hospitalId+"' order by mi.FirstName");
			unitList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.MasStoreAirForceDepot as mi where mi.Status = 'y' order by mi.AirForceDepotName");
			trueUnitList=getHibernateTemplate()
			.find(
			"from jkt.hms.masters.business.MasUnit as mi where mi.Status = 'y' order by mi.UnitName");

			grnList = getHibernateTemplate().find("from jkt.hms.masters.business.StoreGrnM as sgm where sgm.Hospital.Id='"+hospitalId+"'");
			// brandList=getHibernateTemplate().find("from
			// jkt.hms.masters.business.MasStoreBrand as msb");
			storeFyDocumentNoList = (List) getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"
					+ deptId + "' and sfdn.Hospital.Id='"+hospitalId+"'");
			/*storeProformaNoList=(List) getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreProformaHeader as sph where sph.Department.Id='"
					+ deptId + "' and sph.Status='y' and sph.Hospital.Id='"+hospitalId+"'");*/
			
			// comment and by  added by javed khan by Girjesh sir on 07-oct-2013
			storeProformaNoList=(List) getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreProformaHeader as sph where sph.Department.Id='"
					+ deptId + "' and sph.Status='p' and sph.Hospital.Id='"+hospitalId+"'");


			for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
				if (storeFyDocumentNo.getGrnNo() != null) {
					no = ("" + storeFyDocumentNo.getGrnNo());
					no = getMaxNo(no);
				} else {
					no = getMaxNo("");
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("proformaId", proformaId);  // add by javed khan on 07-oct-2013
		map.put("supplierList", supplierList);
		map.put("uomList", uomList);
		map.put("manufacturerList", manufacturerList);
		map.put("searchGrnList", searchGrnList);
		map.put("employeeList", employeeList);
		map.put("unitList", unitList);
		map.put("grnList", grnList);
		map.put("brandList", brandList);
		map.put("trueUnitList",trueUnitList);
		map.put("max", no);
		map.put("storeProformaNoList",storeProformaNoList);
		map.put("storeProformaHeader",storeProformaHeader);
		map.put("storeLoaninTList",storeLoaninTList);
		map.put("masStoreSupplier", masStoreSupplier);
		return map;

	}


	public Map<String, Object> submitCrvAftProDeatail(Box box) {
		// TODO Auto-generated method stub
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		int hospitalId = 0;
		int supplierOrUnitId = 0;
		int indentOrPoId = 0;
		int employeeId = 0;
		SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
		SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
		java.sql.Date grnDate = null;
		java.sql.Date invoiceDate = null;
		java.sql.Date date_received_surplus = null;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");

		String howReceived = "";
		String rrNo = "";
		String modeOfConveyance = "";
		String invoiceNo = "";
		String date4MySQL = "";
		String grnNo = "";
		String max = "";
		String no = "";
		String userName = "";
		String sos = "";
		String supplyOrderNo = "";
		String remarks = "";
		String civNo = "";
		Date civDate = null;
		String proformaNo="";
		java.sql.Date proformaDate=null;



		BigDecimal invoiceAmount = null;
		BigDecimal freightDuty = null;
		BigDecimal exciseDuty = null;
		BigDecimal octroi = null;
		BigDecimal insuranceCharge = null;
		BigDecimal otherCharges = null;
		BigDecimal customDuty = null;
		BigDecimal grnValue = null;
		BigDecimal discount = null;
		BigDecimal vat = null;
		BigDecimal roundOffValue = null;
		BigDecimal actualGrnValue = null;
		BigDecimal totalCost = null;

		// Collecting Parameter Values from Box

		deptId = box.getInt("deptId");
		hospitalId = box.getInt("hospitalId");
		userName = box.getString("userName");

		sos = box.get(SOURCE_OF_SUPPLY);
		if(box.getInt(SUPPLIER_ID) !=0){
			supplierOrUnitId = box.getInt(SUPPLIER_ID);
		}

		//	if (sos.equalsIgnoreCase("w") || sos.equalsIgnoreCase("i")) {
		//	indentOrPoId = 0;
		//} else {
		indentOrPoId = box.getInt(INDENT_ID);


		//}

		grnNo = box.getString(GRN_NO);
		try {
			date4MySQL = formatterOut.format(formatterIn.parse(box
					.getString(GRN_DATE)));
			grnDate = java.sql.Date.valueOf(date4MySQL);


		} catch (Exception e) {
			grnDate = null;
		}

		try {
			date4MySQL = formatterOut.format(formatterIn.parse(box
					.getString(RECEIVED_DATE)));
			date_received_surplus = java.sql.Date.valueOf(date4MySQL);
		} catch (Exception e) {
			date_received_surplus = null;
		}

		howReceived = box.getString(HOW_RECEIVED);
		if(box.getString(RR_NO) !=null){
			rrNo = box.getString(RR_NO);
		}
		if(box.getString(MODE_OF_CONVEYANCE) !=null){
			modeOfConveyance = box.getString(MODE_OF_CONVEYANCE);
		}
		if(box.getInt(EMPLOYEE_ID) != 0){
			employeeId = box.getInt(EMPLOYEE_ID);
		}
		if(box.getString(INVOICE_NO) !=null){
			invoiceNo = box.getString(INVOICE_NO);
		}
		try {
			if(box.getString(INVOICE_DATE) !=null){
				date4MySQL = formatterOut.format(formatterIn.parse(box
						.getString(INVOICE_DATE)));
				invoiceDate = java.sql.Date.valueOf(date4MySQL);
			}
		} catch (Exception e) {
			invoiceDate = null;
		}



		try {
			if(box.getString("proformaDate") !=null){
				date4MySQL = formatterOut.format(formatterIn.parse(box
						.getString("proformaDate")));
				proformaDate = java.sql.Date.valueOf(date4MySQL);
			}
		} catch (Exception e) {
			proformaDate = null;
		}






		try {
			
			if(box.getString("proformaNo") !=null){
				proformaNo=box.getString("proformaNo");
			}
		} catch (Exception e) {
			proformaNo = null;
		}






		try {
			if(box.getString(INVOICE_AMOUNT) !=null){
				invoiceAmount = new BigDecimal(box.getString(INVOICE_AMOUNT));
			}
		} catch (Exception e) {
			invoiceAmount = new BigDecimal(0);
		}

		/*try {
		freightDuty = new BigDecimal(box.getString(FREIGHT_DUTY));
	} catch (Exception e) {
		freightDuty = new BigDecimal(0);
	}

	try {
		exciseDuty = new BigDecimal(box.getString(EXCISE_DUTY));
	} catch (Exception e) {
		exciseDuty = new BigDecimal(0);
	}

	try {
		octroi = new BigDecimal(box.getString(OCTROI));
	} catch (Exception e) {
		octroi = new BigDecimal(0);
	}*/

		/*	try {
		insuranceCharge = new BigDecimal(box.getString(INSURANCE_CHARGES));
	} catch (Exception e) {
		insuranceCharge = new BigDecimal(0);
	}*/

		/*try {
		customDuty = new BigDecimal(box.getString(CUSTOM_DUTY));
	} catch (Exception e) {
		customDuty = new BigDecimal(0);
	}*/

		try {
			if(box.getString(OTHER_CHARGES) !=null){
				otherCharges = new BigDecimal(box.getString(OTHER_CHARGES));
			}
		} catch (Exception e) {
			otherCharges = new BigDecimal(0);
		}

		try {
			if(box.getString("grnValue") !=null){
				grnValue = new BigDecimal(box.getString("grnValue"));
			}
		} catch (Exception e) {
			grnValue = new BigDecimal(0);
		}

		try {
			if(box.getString("actualGrnValue") !=null){
				actualGrnValue = new BigDecimal(box.getString("actualGrnValue"));
			}
		} catch (Exception e) {
			actualGrnValue = new BigDecimal(0);
		}
		try {
			if(box.getString("totalCost") !=null){
				totalCost = new BigDecimal(box.getString("totalCost"));
			}
		} catch (Exception e) {
			totalCost = new BigDecimal(0);
		}





		/*try {
		roundOffValue = new BigDecimal(box.getString("roundOfValue"));
	} catch (Exception e) {
		roundOffValue = new BigDecimal(0);
	}*/

		/*try {
		vat = new BigDecimal(box.getString("vatTax"));
	} catch (Exception e) {
		vat = new BigDecimal(0);
	}*/

		/*try {
		discount = new BigDecimal(box.getString("totDiscount"));
	} catch (Exception e) {
		discount = new BigDecimal(0);
	}*/
		if(box.getString(SUPPLY_ORDER_NO) !=null){
			supplyOrderNo = box.getString(SUPPLY_ORDER_NO);
		}
		remarks = box.getString(REMARKS);

		// Create StoreGrnM object and Set the Values

		StoreGrnM storeGrnM = new StoreGrnM();
		storeGrnM.setReceiveType(sos);
		storeGrnM.setAtSoNo(supplyOrderNo);
		storeGrnM.setDateReceivedSurplus(date_received_surplus);
		storeGrnM.setHowReceived(howReceived);
		storeGrnM.setModeOfConveyance(modeOfConveyance);
		storeGrnM.setRemarks(remarks);
		storeGrnM.setRrNo(rrNo);
		storeGrnM.setRoundOffValue(roundOffValue);
		storeGrnM.setTotalCost(totalCost);
		storeGrnM.setProformaDate(proformaDate);
		storeGrnM.setProformaNo(proformaNo);

		try {
			storeGrnM.setDepartment(new MasDepartment(deptId));
		} catch (Exception e) {
			storeGrnM.setDepartment(null);
		}

		try {
			if(employeeId > 0){
				storeGrnM.setEmployee(new MasEmployee(employeeId));
			}
		} catch (Exception e) {
			storeGrnM.setEmployee(null);
		}

		try {
			storeGrnM.setHospital(new MasHospital(hospitalId));
		} catch (Exception e) {
			storeGrnM.setHospital(null);
		}

		if (sos.equalsIgnoreCase("p")) {
			if (supplierOrUnitId != 0)
				storeGrnM.setSupplier(new MasStoreSupplier(supplierOrUnitId));
			else
				storeGrnM.setSupplier(null);

			if (indentOrPoId != 0)
				storeGrnM.setIndent(new StoreIndentM(indentOrPoId));
			else
				storeGrnM.setIndent(null);
		} else if (sos.equalsIgnoreCase("a") || sos.equalsIgnoreCase("i")) {
			if (supplierOrUnitId != 0)
				storeGrnM.setUnit(new MasStoreAirForceDepot(supplierOrUnitId));
			else
				storeGrnM.setUnit(null);

			if (indentOrPoId != 0)
				storeGrnM.setIndent(new StoreIndentM(indentOrPoId));
			else
				storeGrnM.setIndent(null);
		} else if (sos.equalsIgnoreCase("o")) {
			if (supplierOrUnitId != 0)
				storeGrnM.setOtherUnit(new MasUnit(supplierOrUnitId));
			else
				storeGrnM.setUnit(null);

			if (indentOrPoId != 0)
				storeGrnM.setIndent(new StoreIndentM(indentOrPoId));
			else
				storeGrnM.setIndent(null);

			if (!box.getString("civNo").equals(""))
				storeGrnM.setCivNo(box.getString("civNo"));

			try {
				storeGrnM.setCivdate(java.sql.Date.valueOf(formatterOut
						.format(formatterIn.parse(box.getString("civDate")))));
			} catch (Exception e) {
				storeGrnM.setCivdate(null);
			}
		} else if (sos.equalsIgnoreCase("l")) {
			if (supplierOrUnitId != 0)
				storeGrnM.setSupplier(new MasStoreSupplier(supplierOrUnitId));
			else
				storeGrnM.setSupplier(null);

			if (indentOrPoId != 0)
				storeGrnM.setPo(new StorePoHeader(indentOrPoId));
			else
				storeGrnM.setPo(null);
		} else if (sos.equalsIgnoreCase("w")) {
			if (supplierOrUnitId != 0)
				storeGrnM.setSupplier(new MasStoreSupplier(supplierOrUnitId));
			else
				storeGrnM.setSupplier(null);
		}

		//	storeGrnM.setCustomDuty(customDuty);
		//storeGrnM.setExciseDuty(exciseDuty);
		//storeGrnM.setFreightDuty(freightDuty);
		//storeGrnM.setInsuranceCharge(insuranceCharge);
		//storeGrnM.setOctroi(octroi);
		storeGrnM.setOtherCharges(otherCharges);

		storeGrnM.setGrnValue(actualGrnValue);
		//storeGrnM.setVat(vat);
		storeGrnM.setDiscount(discount);
		storeGrnM.setGrnAmount(grnValue);

		storeGrnM.setGrnNo(grnNo);
		storeGrnM.setGrnDate(grnDate);

		storeGrnM.setInvoiceNo(invoiceNo);
		storeGrnM.setInvoiceDate(invoiceDate);
		storeGrnM.setInvoiceAmount(invoiceAmount);

		storeGrnM.setStatus("o");
		storeGrnM.setLastChgBy(userName);
		storeGrnM.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(date));
		storeGrnM.setLastChgTime(time);

		// Create StoreGrnTList Contains StoreGrnT Objects and Set the
		// Corresponding Values
		List<StoreGrnT> storeGrnTList = new ArrayList<StoreGrnT>();
		StoreGrnT storeGrnT = null;
		Vector itemId = box.getVector(ITEM_ID);

		Vector brandId = box.getVector(BRAND_ID);
		Vector manufacturerId = box.getVector(MANUFACTURER_ID);
		Vector batchNo = box.getVector(BATCH_NO);
		Vector lotNo = box.getVector(LOT_NO);
		Vector receivedQty = box.getVector(QUANTITY_RECEIVED);
		Vector freeQty = box.getVector(FREE_QTY);
		Vector dispType = box.getVector("dispenseType");
		Vector mdqValue = box.getVector("mdq");
		Vector ratePerMdq = box.getVector("ratePerMdq");
		Vector convertedStock = box.getVector("convertedStock");
		Vector discountAmount = box.getVector("discountAmount");

		Vector discountPercentage=box.getVector("discountPercentage");
		Vector taxPercent=box.getVector("taxPercent");
		Vector reasonForDemand=box.getVector("reasonForDemand");

		Vector mrp = box.getVector(MRP);
		Vector preId=box.getVector("PreId");
		Vector taxAmount = new Vector();
		Vector taxAmountMdq = new Vector();


		Vector ed = new Vector();
		/*	if (sos.equalsIgnoreCase("l")) {
		taxAmountMdq = box.getVector(TAX_AMT_MDQ);
		ed = box.getVector("ed");
	} else {
		taxAmount = box.getVector("taxAmount");
	}
		 */

		taxAmount = box.getVector("taxAmount");
		Vector finalCostPrice = box.getVector(COST_PRICE);
		Vector amountValue = box.getVector(AMOUNT);


		Vector freeItem = box.getVector(FREE_ITEM);
		Vector manufacturerDate = box.getVector(MANUFACTURING_DATE);
		Vector expiryDate = box.getVector(EXPIRY_DATE);
		Vector flag = box.getVector("flag");
		Vector loaninId = box.getVector(DETAIL_ID);
		Vector loaninStatus = box.getVector("loanInItem");
		Vector barCodeNo = box.getVector("barCodeNo");



		boolean flag_loan = false;
		int slno = 1;
		for (int i = 0; i < itemId.size(); i++) {
			if (itemId.get(i).toString().equalsIgnoreCase("0"))
				break;
			try{
				if(!(batchNo.get(i).toString().equals("")))
				{
					storeGrnT = new StoreGrnT();
					storeGrnT.setSerialNo(slno++);



					if(sos.equalsIgnoreCase("l")){
						storeGrnT.setProStatus("y");
					}

					storeGrnT.setItem(new MasStoreItem(new Integer(itemId.get(i)
							.toString())));

					if(brandId.get(i)!=null && !brandId.get(i).equals("")){
						String brd=brandId.get(i).toString().trim();

						if(!brd.equals("0")){
							storeGrnT.setBrand(new MasStoreBrand(new Integer(brandId.get(i).toString())));
						}
					}
					if(manufacturerId.get(i)!=null && !manufacturerId.get(i).equals("")){
						String brd=manufacturerId.get(i).toString().trim();
						if(!brd.equals("0")){
							storeGrnT.setManufacturer(new MasManufacturer(new Integer(
									manufacturerId.get(i).toString())));
						}
					}
					storeGrnT.setBatchNo(batchNo.get(i).toString());
					// Lot no condition put in try catch block by Vishal
					/*try {
			storeGrnT.setLotNo(lotNo.get(i).toString());
		} catch (Exception e) {
			storeGrnT.setLotNo(new String(""));

		}*/

					try {
						storeGrnT.setReceivedQty(new BigDecimal(receivedQty.get(i)
								.toString()));
					} catch (Exception e) {

						storeGrnT.setReceivedQty(new BigDecimal(0));
					}

					/*try {
			storeGrnT.setFreeQty(new Integer(freeQty.get(i).toString()));
		} catch (Exception e) {
			storeGrnT.setFreeQty(new Integer(0));
		}*/

					try {
						storeGrnT.setDiscountPercent(new BigDecimal(discountPercentage.get(i).toString()));
					} catch (Exception e) {
						storeGrnT.setDiscountPercent(null);
					}


					try {
						storeGrnT.setTaxPercent(new BigDecimal(taxPercent.get(i).toString()));
					} catch (Exception e) {
						storeGrnT.setTaxPercent(null);
					}

					try {
						storeGrnT.setDiscount(new BigDecimal(discountAmount.get(i)
								.toString()));
					} catch (Exception e) {
						storeGrnT.setDiscount(null);
					}
					try {
						storeGrnT.setMrp(new BigDecimal(mrp.get(i).toString()));
					}
					catch (Exception e) {
						storeGrnT.setMrp(null);
					}
					try{
						storeGrnT.setReasonForDemand(reasonForDemand.get(i).toString());
					}
					catch(Exception e){
						storeGrnT.setReasonForDemand(null);
					}
					/*try {
			if (sos.equalsIgnoreCase("l")) {
				storeGrnT.setTaxAmt_mdq(new BigDecimal(taxAmountMdq.get(i)
						.toString()));
				storeGrnT.setTax(null);
				storeGrnT
						.setExciseDuty(new BigDecimal(ed.get(i).toString()));
			} else {
				storeGrnT
						.setTax(new BigDecimal(taxAmount.get(i).toString()));
				storeGrnT.setTaxAmt_mdq(null);
			}
		} catch (Exception e) {
			storeGrnT.setTax(null);
			storeGrnT.setTaxAmt_mdq(null);
		}
					 */


					try{
						storeGrnT.setTax(new BigDecimal(taxAmount.get(i).toString()));
					}catch(Exception e){
						storeGrnT.setTax(new BigDecimal(0));
					}
					try {
						storeGrnT.setFinalCostPrice(new BigDecimal(finalCostPrice
								.get(i).toString()));
					} catch (Exception e) {
						storeGrnT.setFinalCostPrice(new BigDecimal(0));
					}

					try {
						storeGrnT.setAmountValue(new BigDecimal(amountValue.get(i)
								.toString()));
					} catch (Exception e) {
						storeGrnT.setAmountValue(new BigDecimal(0));
					}

					//storeGrnT.setFreeItem(freeItem.get(i).toString());
					storeGrnT.setDispType(dispType.get(i).toString());
					try {
						storeGrnT
						.setMdqValue(new BigDecimal(mdqValue.get(i).toString()));
					} catch (Exception e) {
						storeGrnT.setMdqValue(new BigDecimal(0));
					}

					try {
						storeGrnT.setRatePerMdq(new BigDecimal(ratePerMdq.get(i)
								.toString()));
					} catch (Exception e) {
						storeGrnT.setRatePerMdq(new BigDecimal(0));
					}

					try {
						storeGrnT.setUnitRate(new BigDecimal(ratePerMdq.get(i)
								.toString()));
					} catch (Exception e) {
						storeGrnT.setUnitRate(new BigDecimal(0));
					}

					try {
						storeGrnT.setManufacturerDate(java.sql.Date
								.valueOf(formatterOut.format(formatterIn
										.parse(manufacturerDate.get(i).toString()))));
					} catch (Exception e) {
						storeGrnT.setManufacturerDate(null);
					}
					try {
						storeGrnT.setExpiryDate(java.sql.Date
								.valueOf(formatterOut.format(formatterIn
										.parse(expiryDate.get(i).toString()))));
					} catch (Exception e) {
						storeGrnT.setExpiryDate(null);
					}
					try {

						if (loaninStatus.get(i).toString().equals("Yes")) {
							storeGrnT.setLoanInItem("y");
							flag_loan = true;
						} else {
							storeGrnT.setLoanInItem("n");
						}

					} catch (Exception e) {
						storeGrnT.setLoanInItem(null);
					}
					storeGrnTList.add(storeGrnT);
				}
			}catch(Exception e){
				i++;
			}

		}
		// Save the Persistence Objects
		session = (Session) getSession();
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			/*
			 * Save StoreGrnM data & update StoreFyDocumentNo for Grn Number
			 */

			Criteria c = session.createCriteria(StoreFyDocumentNo.class).add(
					Restrictions.eq("Department.Id", deptId)).add(Restrictions.eq("Hospital.Id", hospitalId));
			storeFyDocumentNoList = c.list();
			String grnStartNo = "";
			for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
				if (storeFyDocumentNo.getGrnStartNo() != null) {
					grnStartNo = ("" + storeFyDocumentNo.getGrnStartNo());
					grnStartNo = getMaxNo(grnStartNo);
				} else {
					grnStartNo = getMaxNo("");
				}
			}
			storeGrnM.setGrnStartNo(grnStartNo);

			int storeFyId = 0;

			for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
				storeFyId = documentNo.getId();
			}
			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
			.load(StoreFyDocumentNo.class, storeFyId);
			storeFyDocumentNo.setGrnNo(grnNo);
			storeFyDocumentNo.setGrnStartNo(grnStartNo);
			hbt.update(storeFyDocumentNo);
			hbt.refresh(storeFyDocumentNo);
			/*
			 * If Source of Supply is "w" or "l" (only in Local Purchase Case)
			 * Update MasStoreBudget for the current Financial Year Get the
			 * financial Id from MasStoreFinancial Get the Record from
			 * MasStoreBudget : Check Financial Id and Department Id Update the
			 * CRV Committed Amount
			 *//*
		if (sos.equalsIgnoreCase("l")) {
			MasStoreBudget masStoreBudget = new MasStoreBudget();
			java.util.Date poDate = storeGrnM.getGrnDate();
			BigDecimal poAmount = storeGrnM.getGrnValue();

			List<MasStoreFinancial> masStoreFinancialList = new ArrayList<MasStoreFinancial>();
			masStoreFinancialList = session.createCriteria(
					MasStoreFinancial.class).list();
			java.util.Date start_date = null;
			java.util.Date end_date = null;
			int financial_id = 0;
			for (Iterator iterator2 = masStoreFinancialList.iterator(); iterator2
					.hasNext();) {
				MasStoreFinancial masStoreFinancial = (MasStoreFinancial) iterator2
						.next();
				start_date = (java.util.Date) masStoreFinancial
						.getStartDate();
				end_date = (java.util.Date) masStoreFinancial.getEndDate();
				if (poDate.after(start_date) && poDate.before(end_date)) {
					financial_id = masStoreFinancial.getId();
					break;
				} else if (poDate.equals(start_date)
						|| poDate.equals(end_date)) {
					financial_id = masStoreFinancial.getId();
					break;
				}
			}
			List maxFin=session.createSQLQuery("select max(msf.FINANCIAL_ID) from MAS_STORE_FINANCIAL msf").list();
			financial_id=Integer.parseInt(maxFin.get(0).toString());
			List<MasStoreBudget> masStoreBudgetList = new ArrayList<MasStoreBudget>();
			masStoreBudgetList = session.createCriteria(
					MasStoreBudget.class).add(
					Restrictions.eq("Financial.Id", financial_id)).add(
					Restrictions.eq("Department.Id", deptId)).list();
			BigDecimal existing_committed_amount = null;
			BigDecimal existing_balance_amount = null;
			BigDecimal existing_spent_amount = null;
			BigDecimal existing_alotted_amount = null;
			if (masStoreBudgetList != null && masStoreBudgetList.size() > 0) {
				masStoreBudget = masStoreBudgetList.get(0);
				try {
					existing_committed_amount = masStoreBudget
							.getCrvComittedAmount();
				} catch (Exception e) {
					existing_committed_amount = new BigDecimal(0);
				}

				try {
					existing_balance_amount = masStoreBudget
							.getBalanceAmount();
				} catch (Exception e) {
					existing_balance_amount = new BigDecimal(0);
				}

				try {
					existing_spent_amount = masStoreBudget.getSpendAmount();
				} catch (Exception e) {
					existing_spent_amount = new BigDecimal(0);
				}

				try {
					existing_alotted_amount = masStoreBudget
							.getTotalAllocatedAmount();
				} catch (Exception e) {
					existing_alotted_amount = new BigDecimal(0);
				}

				// masStoreBudget.setCrvComittedAmount(existing_committed_amount.add(poAmount));
				masStoreBudget.setBalanceAmount(existing_balance_amount
						.subtract(poAmount));
				masStoreBudget.setSpendAmount(existing_spent_amount
						.add(poAmount));

				storeGrnM.setCrvComittedAmount(existing_committed_amount);
				storeGrnM.setAllottedAmount(existing_alotted_amount);

				// hbt.update(masStoreBudget);
			}
		}*/
			
			
			
			
			
			
			
			try {
				hbt.save(storeGrnM);
				hbt.refresh(storeGrnM);
			} catch (Exception e) {

				e.printStackTrace();
			}
			/*
			 * End of MasStoreBudget Update
			 */


			/*
			 * Updating the Stock in StoreITemBatchStock
			 */

			List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
			StoreItemBatchStock storeItemBatchStock = null;
			if (storeGrnTList.size() > 0) {

				for (int i = 0; i < storeGrnTList.size(); i++) {
					StoreGrnT storeGrnTObj = new StoreGrnT();
					storeGrnTObj = (StoreGrnT) storeGrnTList.get(i);


					storeGrnTObj.setGrnMaster(storeGrnM);
					hbt.save(storeGrnTObj);

					int item_id = storeGrnTObj.getItem().getId();
					if(storeGrnTObj.getBrand()!=null){
						int brand_id = storeGrnTObj.getBrand().getId();
					}
					BigDecimal cost_price = storeGrnTObj.getFinalCostPrice();
					String batch_no = storeGrnTObj.getBatchNo();
					int department_id = storeGrnM.getDepartment().getId();
					hospitalId=storeGrnM.getHospital().getId();
					storeItemBatchStockList = hbt
					.find("from jkt.hms.masters.business.StoreItemBatchStock as inp where inp.Item.Id = "
							+ item_id
							+ " and inp.Hospital.Id = "
							+ hospitalId
							+ "and inp.Department.Id= "
							+ department_id
							+ "and inp.BatchNo ='"
							+ batch_no
							+ "'");

					if (storeItemBatchStockList != null  && storeItemBatchStockList.size() > 0)
					{
						storeItemBatchStock = storeItemBatchStockList.get(0);
						storeItemBatchStock.setLoanInQty(null);
						HibernateTemplate hbt1 = getHibernateTemplate();
						hbt1.setFlushModeName("FLUSH_EAGER");
						hbt1.setCheckWriteOperations(false);
						hbt1.update(storeItemBatchStock);
					}
				}
			}

// add by javed khan for status change in storeProformaHeader after crv complete on 07-09-2013
			if(box.getString("proformaId") !=null){
				HibernateTemplate hbt2 = getHibernateTemplate();
				StoreProformaHeader storeProformaHeader = (StoreProformaHeader) getHibernateTemplate()
				.load(StoreProformaHeader.class, box.getInt("proformaId"));
				storeProformaHeader.setStatus("c"); // this nstatus for proforma complete after crv
				hbt2.update(storeProformaHeader);
						}
			
			map.put("messageTOBeVisibleToTheUser", "CRV saved successfully.");
		} catch (Exception e) {
			if (tx != null) {
				tx.rollback();
				map.put("messageTOBeVisibleToTheUser",
				"CRV Not saved !..... ");
			}
			// throw e; // or display error message
			e.printStackTrace();
		}
		map.put("maxIndentNo", no);
		return map;
	}

	public Map<String, Object> getStockQtyInAjax(Map<String,Object>dataMap)
	{
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();

		List<StoreItemBatchStock> stockList = new ArrayList<StoreItemBatchStock>();
		session = (Session) getSession();

		int deptId = 0;
		int hospitalId = 0;
		int batchId=0;
		int itemId=0;

		if (dataMap.get("deptId") != null)
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		if (dataMap.get("hospitalId") != null)
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));


		if (dataMap.get("batchId") != null)
			batchId = Integer.parseInt("" + dataMap.get("batchId"));

		if (dataMap.get("itemId") != null)
			itemId = Integer.parseInt("" + dataMap.get("itemId"));



		try {

			stockList = session.createCriteria(StoreItemBatchStock.class)
			.add(Restrictions.eq("Department.Id", deptId))
			.add(Restrictions.eq("Hospital.Id", hospitalId))
			.add(Restrictions.eq("Id", batchId)).list();


		}catch(Exception e)
		{e.printStackTrace();}

		map.put("stockList", stockList);
		return map;
	}


	public Map<String, Object> updateArrovalPro(Map<String, Object> dataMap) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreItem> itemList1 = new ArrayList<MasStoreItem>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<StoreProformaHeader>storeProformaList=new ArrayList<StoreProformaHeader>();
		session = (Session) getSession();
		String pvmsNo = null;
		int item_id = 0;
		int hospitalId=0;
		int sec=0;
		String mes="";
		String ProformaNo="";
		try {
			pvmsNo = "" + dataMap.get("pvmsNo");
			if(dataMap.get("sec")!=null){
				sec=Integer.parseInt(""+dataMap.get("sec"));
			}
			hospitalId=(Integer)dataMap.get("hospitalId");
			ProformaNo=""+dataMap.get("proformaNo");

			int storeFyId = 0;


			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			Criteria c = session.createCriteria(StoreProformaHeader.class).add(Restrictions.eq("ProformaNo", ProformaNo))
			.add(Restrictions.eq("Hospital.Id", hospitalId));
			storeProformaList = c.list();
			for (StoreProformaHeader documentNo : storeProformaList) {
				storeFyId = documentNo.getId();
			}
			StoreProformaHeader storeFyDocumentNo = (StoreProformaHeader)getHibernateTemplate().load(StoreProformaHeader.class, storeFyId);

			if(storeFyDocumentNo.getStatus().equals("s")){
				storeFyDocumentNo.setStatus("n");
				Map<String, Object> utilMap = new HashMap<String, Object>();
				utilMap = (Map) HMSUtil.getCurrentDateAndTime();
				String date11 = (String) utilMap.get("currentDate");
				storeFyDocumentNo.setProformaLastUpdate(HMSUtil
						.convertStringTypeDateToDateType(date11));
				hbt.update(storeFyDocumentNo);
				mes="Sent Successyfully";
			}else{
				mes="Alerady sent";
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		map.put("mes",mes);
		return map;
	}



	public Map showProformaBAccountApproval(Map<String,Object>dataMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasHospital> hospitalList = new ArrayList<MasHospital>();
		List<StoreProformaHeader> storeProformaHList = new ArrayList<StoreProformaHeader>();

		Session session = (Session) getSession();
		Criteria c = session.createCriteria(MasHospital.class).add(
				Restrictions.eq("Status", "y")).addOrder(Order.asc("HospitalName"));

		hospitalList = c.list();

		Criteria c1 = session.createCriteria(StoreProformaHeader.class)
		.add(Restrictions.eq("Status", "y"));

		storeProformaHList = c1.list();

		map.put("hospitalList", hospitalList);
		map.put("storeProformaHList", storeProformaHList);
		return map;
	}



	public Map getPendingProformaForApprovalAccount(Map<String,Object>dataMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasHospital> hospitalList = new ArrayList<MasHospital>();
		List<StoreProformaHeader> storeProformaHList = new ArrayList<StoreProformaHeader>();
		List<StoreProformaHeader> storeProformaHList1 = new ArrayList<StoreProformaHeader>();
		int hospitalId=0;
		int unitId=0;

		Session session = (Session) getSession();

		if(dataMap.get("hospitalId")!=null){
			hospitalId=(Integer)dataMap.get("hospitalId");
		}

		if(dataMap.get("unitId")!=null){
			unitId=(Integer)dataMap.get("unitId");
		}
		Criteria c = session.createCriteria(MasHospital.class).add(
				Restrictions.eq("Status", "y"));

		hospitalList = c.list();

		Criteria c1 = session.createCriteria(StoreProformaHeader.class)
		.add(Restrictions.eq("Status", "y"));

		storeProformaHList = c1.list();

		Criteria c2 = session.createCriteria(StoreProformaHeader.class)
		.add(Restrictions.eq("Hospital.Id", unitId))
		.add(Restrictions.eq("Status", "y")).addOrder(Order.desc("Id"));
		storeProformaHList1 = c2.list();

		map.put("hospitalList", hospitalList);
		map.put("storeProformaHList", storeProformaHList);
		map.put("storeProformaHList1", storeProformaHList1);
		map.put("unitId", unitId);
		return map;
	}


	public Map<String, Object> validateNivMaster(Map<String, Object> dataMap) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreItem> itemList1 = new ArrayList<MasStoreItem>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<StoreProformaHeader>storeProformaList=new ArrayList<StoreProformaHeader>();
		session = (Session) getSession();
		String pvmsNo = null;
		int item_id = 0;
		int hospitalId=0;
		int sec=0;
		String mes="";
		int itemId=0;
		String NivNo="";
		int deptId=0;
		try {
			hospitalId=(Integer)dataMap.get("hospitalId");
			deptId=(Integer)dataMap.get("deptId");
			itemId=Integer.parseInt(dataMap.get("itemId").toString());
			NivNo=dataMap.get("NivNo").toString();
			List<MasStoreItem> masStoreItemList = new ArrayList<MasStoreItem>();
			Date changedDate=(Date)dataMap.get("changedDate");
			String changedTime=(String)dataMap.get("changedTime");
			String userName=(String)dataMap.get("userName");

			masStoreItemList = session.createCriteria(MasStoreItem.class).add(Restrictions.eq("PvmsNo", NivNo.trim()).ignoreCase()).add(Restrictions.eq("Hospital.Id", hospitalId)).list();


			int storeFyId = 0;


			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);


			/*	Criteria c = session.createCriteria(StoreProformaHeader.class).add(Restrictions.eq("ProformaNo", ProformaNo))
								.add(Restrictions.eq("Hospital.Id", hospitalId));
						storeProformaList = c.list();
						for (StoreProformaHeader documentNo : storeProformaList) {
							storeFyId = documentNo.getId();
						}*/


			if(masStoreItemList.size()==0){
				MasStoreItem masStoreItem = (MasStoreItem)getHibernateTemplate().load(MasStoreItem.class, itemId);
				masStoreItem.setPvmsNo(NivNo);
				MasDepartment department=new MasDepartment();
				department.setId(deptId);
				masStoreItem.setDepartment(department);
				masStoreItem.setLastChgBy(userName);
				masStoreItem.setLastChgDate(changedDate);
				masStoreItem.setLastChgTime(changedTime);
				hbt.update(masStoreItem);
				mes="Updated Successyfully";
			}else{
				mes="NIV already exists.";
			}

		} catch (HibernateException e) {
			mes="Not Updated";
			e.printStackTrace();
			NivNo="";
		}
		map.put("itemList", itemList);
		map.put("NivNo",NivNo);
		map.put("mes",mes);
		return map;
	}


	//-------By Kiran


	public String generateABCAnalysisReport(int deptId, String fromDate, String toDate) {
		String status="false";
		try {
			SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat("MM/dd/yyyy");

			String fromDate1=formatterOut.format(formatterIn.parse(fromDate));
			String toDate1=formatterOut.format(formatterIn.parse(toDate));



			Session session = (Session)getSession();
			Connection con = session.connection();

			CallableStatement cals = con.prepareCall("{call stores_abc_analysis(?,?,?)}");
			cals.setInt(1, deptId);
			cals.setString(2,fromDate1);
			cals.setString(3,toDate1);
			cals.execute();
			status="true";
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (RuntimeException e) {
			e.printStackTrace();
		} catch (ParseException e) {

			e.printStackTrace();
		}
		return status;
	}

	@Override
	public String getPVMS(int deptId, String nomenclature, int hospitalId) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		String nom[]=nomenclature.split("\\[");
		String pvmsNo="";
		itemList=session.createCriteria(MasStoreItem.class).add(Restrictions.eq("Nomenclature",nom[0])).add(Restrictions.eq("Hospital.Id", hospitalId))
		.add(Restrictions.eq("Department.Id", deptId)).list();
		for(MasStoreItem masStoreItem:itemList ){
			pvmsNo=masStoreItem.getPvmsNo();
		}
		return pvmsNo;
	}
	public Map<String, Object> fillBatchForIssueToPatient(
			Map<String, Object> dataMap) {

		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		int itemId = 0;
		int deptId = 0;
		int hospitalId = 0;
		itemId = Integer.parseInt("" + dataMap.get("itemId"));
		deptId = Integer.parseInt("" + dataMap.get("deptId"));
		hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));  // add javed khan
		BigDecimal stock = new BigDecimal(0);
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
		SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
		String date4MySQL = null;
		try {
			date4MySQL = formatterOut.format(formatterIn.parse(date));
		} catch (Exception e1) {

			e1.printStackTrace();
		}
		Date datestr = HMSUtil.getExpiryDateYYYYMMDD();
		//String issueDate=sdf.format(datestr);
		SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
		String issueDate=sdf.format(datestr);
		// javed khan
		List<StoreItemBatchStock> batchList = new ArrayList<StoreItemBatchStock>();

		//Date issueDate = java.sql.Date.valueOf(date4MySQL);

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			/*		String queryString = null;
		String str = "" + dataMap.get("nomenclature");


		String sqlQry="select  msi.ITEM_TYPE_ID  from mas_store_item msi  where msi.ITEM_ID='"+itemId+"'";
		List nivList=session.createSQLQuery(sqlQry).list();
		if((Integer.parseInt((""+nivList.get(0)))) == 2){
			itemList = session.createCriteria(MasStoreItem.class)
			.add(Restrictions.eq("Id", Id)).add(Restrictions.eq("Hospital.Id", hospitalId))
			.add(Restrictions.eq("Status", "y")).list();



		}else{
	itemList = session.createCriteria(MasStoreItem.class)
			.add(Restrictions.eq("PvmsNo", pvmsNo).ignoreCase())
			.add(Restrictions.eq("Status", "y")).list();
		}*/



			/*Criteria c = session.createCriteria(MasStoreItem.class).add(
				Restrictions.like("PvmsNo", pvmsNo).ignoreCase()).add(
				Restrictions.eq("Hospital.Id", hospitalId)).add(
				Restrictions.eq("Status", "y"));
		itemList = c.list();*/

			if (itemId!=0) {

				String str3 = "select sum(a.closing_stock) from store_item_batch_stock a,mas_store_item i " +
				" where a.item_id=i.item_id and a.item_id = '"
				+ itemId
				+ "' and a.department_id='"
				+ deptId
				+"' and a.hospital_id='"
				+ hospitalId
				+ "' and a.expiry_date > '"
				+issueDate
				+ "' and a.closing_stock >0 "
				+ " group by a.item_id ";

				List stockAvailableList = session.createSQLQuery(str3).list();

				// javed khan

				Criteria c4 = session.createCriteria(StoreItemBatchStock.class)
				.add(Restrictions.eq("Item.Id", itemId)).add(Restrictions.eq("Department.Id", deptId))
				.add(Restrictions.eq("Hospital.Id", hospitalId))
				.add(Restrictions.or(Restrictions.gt("ExpiryDate", datestr), Restrictions.isNull("ExpiryDate")))
				.add(Restrictions.gt("ClosingStock", new BigDecimal(0.0)));  // add javed khan
				batchList = c4.list();

				if (stockAvailableList.size() > 0
						&& stockAvailableList.get(0) != null) {
					stock = (BigDecimal) stockAvailableList.get(0);
				} else {
					stock = new BigDecimal("0");
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("batchList", batchList);
		map.put("itemList", itemList);
		map.put("stock", stock);
		return map;

	}


	@Override
	public Map<String, Object> importNivMaster(Map<String, Object> utilMap) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List fileUploadedList = null;
		List<String> nivNoList = new ArrayList<String>();
		List<String> nomenclatureList = new ArrayList<String>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<Integer> auList = new ArrayList<Integer>();
		List<String> batch1 = new ArrayList<String>();
		List<String> batch2 = new ArrayList<String>();
		List<String> batch3 = new ArrayList<String>();
		List<String> batch4 = new ArrayList<String>();
		List<String> batch5 = new ArrayList<String>();
		List<String> batch6 = new ArrayList<String>();
		List<String> batch7 = new ArrayList<String>();
		List<String> batch8 = new ArrayList<String>();
		List<String> batch9 = new ArrayList<String>();
		List<String> batch10 = new ArrayList<String>();
		List<String> expiryDate1 = new ArrayList<String>();
		List<String> expiryDate2 = new ArrayList<String>();
		List<String> expiryDate3 = new ArrayList<String>();
		List<String> expiryDate4 = new ArrayList<String>();
		List<String> expiryDate5 = new ArrayList<String>();
		List<String> expiryDate6 = new ArrayList<String>();
		List<String> expiryDate7 = new ArrayList<String>();
		List<String> expiryDate8 = new ArrayList<String>();
		List<String> expiryDate9 = new ArrayList<String>();
		List<String> expiryDate10 = new ArrayList<String>();
		List<BigDecimal> qty1 = new ArrayList<BigDecimal>();
		List<BigDecimal> qty2 = new ArrayList<BigDecimal>();
		List<BigDecimal> qty3 = new ArrayList<BigDecimal>();
		List<BigDecimal> qty4 = new ArrayList<BigDecimal>();
		List<BigDecimal> qty5 = new ArrayList<BigDecimal>();
		List<BigDecimal> qty6 = new ArrayList<BigDecimal>();
		List<BigDecimal> qty7 = new ArrayList<BigDecimal>();
		List<BigDecimal> qty8 = new ArrayList<BigDecimal>();
		List<BigDecimal> qty9 = new ArrayList<BigDecimal>();
		List<BigDecimal> qty10 = new ArrayList<BigDecimal>();
		nivNoList=(List)utilMap.get("nivNoList");
		nomenclatureList=(List)utilMap.get("nomenclatureList");
		auList=(List)utilMap.get("auList");
		batch1=(List)utilMap.get("batch1");
		batch2=(List)utilMap.get("batch2");
		batch3=(List)utilMap.get("batch3");
		batch4=(List)utilMap.get("batch4");
		batch5=(List)utilMap.get("batch5");
		batch6=(List)utilMap.get("batch6");
		batch7=(List)utilMap.get("batch7");
		batch8=(List)utilMap.get("batch8");
		batch9=(List)utilMap.get("batch9");
		batch10=(List)utilMap.get("batch10");
		expiryDate1=(List)utilMap.get("expiryDate1");
		expiryDate2=(List)utilMap.get("expiryDate2");
		expiryDate3=(List)utilMap.get("expiryDate3");
		expiryDate4=(List)utilMap.get("expiryDate4");
		expiryDate5=(List)utilMap.get("expiryDate5");
		expiryDate6=(List)utilMap.get("expiryDate6");
		expiryDate7=(List)utilMap.get("expiryDate7");
		expiryDate8=(List)utilMap.get("expiryDate8");
		expiryDate9=(List)utilMap.get("expiryDate9");
		expiryDate10=(List)utilMap.get("expiryDate10");
		qty1=(List)utilMap.get("qty1");
		qty2=(List)utilMap.get("qty2");
		qty3=(List)utilMap.get("qty3");
		qty4=(List)utilMap.get("qty4");
		qty5=(List)utilMap.get("qty5");
		qty6=(List)utilMap.get("qty6");
		qty7=(List)utilMap.get("qty7");
		qty8=(List)utilMap.get("qty8");
		qty9=(List)utilMap.get("qty9");
		qty10=(List)utilMap.get("qty10");
		int deptId=(Integer)utilMap.get("deptId");
		int hospitalId=(Integer)utilMap.get("hospitalId");
		List<MasStoreItem> storeItemList = new ArrayList<MasStoreItem>();
		List<StoreBalanceT> storeBalanceTList = new ArrayList<StoreBalanceT>();
		List<StoreFyDocumentNo> storeFyDocumentNoList= new ArrayList<StoreFyDocumentNo>();
		String message = "No Items Found (or) MMF not available";
		String userName=(String)utilMap.get("utilMap");
		session = (Session) getSession();
		String pvms = null;
		String nomenclature = null;
		int auId = 0;
		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector tenderTItems = new Vector();
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		Map dateMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) dateMap.get("currentDate");
		String time = (String)dateMap.get("currentTime");
    	String 	msg= null; // added by javed khan on 22-10-2013 
		org.springframework.orm.hibernate3.HibernateTemplate hbt1 = getHibernateTemplate();
		hbt1.setFlushModeName("FLUSH_EAGER");
		hbt1.setCheckWriteOperations(false);
		Transaction tx=null;
		try
		{
			tx = session.beginTransaction();

			String pvmsNo="";
			String no = "";
			int StoreFyDocumentNoId= 0;
			MasHospital masHospital=new MasHospital();
			int i=0;
			List<StoreBalanceT> storeBalTBatch1List = new ArrayList<StoreBalanceT>();
			List<StoreBalanceT> storeBalTBatch2List = new ArrayList<StoreBalanceT>();
			List<StoreBalanceT> storeBalTBatch3List = new ArrayList<StoreBalanceT>();
			List<StoreBalanceT> storeBalTBatch4List = new ArrayList<StoreBalanceT>();
			List<StoreBalanceT> storeBalTBatch5List = new ArrayList<StoreBalanceT>();
			List<StoreBalanceT> storeBalTBatch6List = new ArrayList<StoreBalanceT>();
			List<StoreBalanceT> storeBalTBatch7List = new ArrayList<StoreBalanceT>();
			List<StoreBalanceT> storeBalTBatch8List = new ArrayList<StoreBalanceT>();
			List<StoreBalanceT> storeBalTBatch9List = new ArrayList<StoreBalanceT>();
			List<StoreBalanceT> storeBalTBatch10List = new ArrayList<StoreBalanceT>();
			
			if(nomenclatureList.size()>0){
				
				storeFyDocumentNoList = (List) getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"+deptId+"' and sfdn.Hospital.Id='"+hospitalId+"'");
				/**
				 * Added By Ritu
				 */
				/*for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {

					no = ("" + storeFyDocumentNo.getBalanceNo());
					no = getMaxNo(no);
					StoreFyDocumentNoId = storeFyDocumentNo.getId();
				}
				*/
				if(storeFyDocumentNoList.size()>0){
					for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {

						no = ("" + storeFyDocumentNo.getBalanceNo());
						no = getMaxNo(no);
						StoreFyDocumentNoId = storeFyDocumentNo.getId();
					}
				}else{
					StoreFyDocumentNo storeFyDocumentNo = new StoreFyDocumentNo();
					MasHospital hospital = new MasHospital();
					hospital.setId(hospitalId);
					storeFyDocumentNo.setHospital(hospital);
					MasDepartment department=new MasDepartment();
					department.setId(deptId);
					storeFyDocumentNo.setDepartment(department);
					storeFyDocumentNo.setAdjustmentNo("0");
					storeFyDocumentNo.setAdjustmentStartNo("0");
					storeFyDocumentNo.setBalanceNo("0");
					storeFyDocumentNo.setBooNo("0");
					storeFyDocumentNo.setBooStartNo("0");
					storeFyDocumentNo.setDefectEntryNo("0");
					storeFyDocumentNo.setDefectEntryStartNo("0");
					storeFyDocumentNo.setDemandNo("0");
					storeFyDocumentNo.setDemandStartNo("0");
					storeFyDocumentNo.setDepotIndentNo("0");
					storeFyDocumentNo.setDepotIndentStartNo("0");
					storeFyDocumentNo.setDeptConsumNo("0");
					storeFyDocumentNo.setDisposalEntryNo("0");
					storeFyDocumentNo.setDisposalEntryStartNo("0");
					storeFyDocumentNo.setGrnNo("0");
					storeFyDocumentNo.setGrnStartNo("0");
					storeFyDocumentNo.setIndentToDepotNo("0");
					storeFyDocumentNo.setIndentToDepotStartNo("0");
					storeFyDocumentNo.setInIndentNo("0");
					storeFyDocumentNo.setIndentToSocNo("0");
					storeFyDocumentNo.setIssueDeptReturnNo("0");
					storeFyDocumentNo.setIssueDeptReturnStartNo("0");
					storeFyDocumentNo.setIssueDeptStartNo("0");
					storeFyDocumentNo.setIssueInPatientNo(new Integer(0));
					storeFyDocumentNo.setIssueDeptReturnStartNo("0");
					storeFyDocumentNo.setIssueInPatientReturnNo("0");
					storeFyDocumentNo.setIssueInPatientReturnStartNo("0");
					storeFyDocumentNo.setIssueInPatientStartNo("0");
					storeFyDocumentNo.setIssueLoanoutNo("0");
					storeFyDocumentNo.setIssueOtafuNo("0");
					storeFyDocumentNo.setIssueOtafuStartNo("0");
					storeFyDocumentNo.setIssueOtherUnitsNo("0");
					storeFyDocumentNo.setIssueOtherUnitsStartNo("0");
					storeFyDocumentNo.setIssueWardNo(0);
					storeFyDocumentNo.setIsuueLoanoutStartNo("0");
					storeFyDocumentNo.setIndentToSocNo("0");
					storeFyDocumentNo.setInIndentNo("0");
					storeFyDocumentNo.setLoaninNo("0");
					storeFyDocumentNo.setLoaninStartNo("0");
					storeFyDocumentNo.setMedicineReturnNo("0");
					storeFyDocumentNo.setMmfIndentNo("0");
					storeFyDocumentNo.setMmfIndentStartNo("0");
					storeFyDocumentNo.setMmfNo("0");
					storeFyDocumentNo.setMmfStartNo("0");
					storeFyDocumentNo.setOpdIssueNo("0");
					storeFyDocumentNo.setOpdReturnNo("0");
					storeFyDocumentNo.setPatientReturnNo("0");
					storeFyDocumentNo.setPoIndentNo("0");
					storeFyDocumentNo.setPoIndentStartNo("0");
					storeFyDocumentNo.setPoNo("0");
					storeFyDocumentNo.setPoStartNo("0");
					storeFyDocumentNo.setQuotationRecNo("0");
					storeFyDocumentNo.setQuotationRecStartNo("0");
					storeFyDocumentNo.setQuotationReqNo("0");
					storeFyDocumentNo.setQuotationReqStartNo("0");
					storeFyDocumentNo.setSocIndentNo("0");
					storeFyDocumentNo.setSocIndentStartNo("0");
					storeFyDocumentNo.setTenderNo("0");
					storeFyDocumentNo.setVendorReturnNo("0");
					storeFyDocumentNo.setVendorReturnStartNo("0");
					storeFyDocumentNo.setWardReturnNo("0");
					storeFyDocumentNo.setWorkOrderNo("0");
					storeFyDocumentNo.setWorkOrderStartNo("0");

					hbt1.save(storeFyDocumentNo);

					no = getMaxNo(no);
					StoreFyDocumentNoId = storeFyDocumentNo.getId();

				
				}
				int cnt = 0;
				for (i=0;i<nomenclatureList.size();i++) {
					pvmsNo=nivNoList.get(i);
					storeItemList = session.createCriteria(MasStoreItem.class).add(Restrictions.eq("PvmsNo", pvmsNo)).add(Restrictions.eq("Hospital.Id", hospitalId)).list();
					
					if(storeItemList.size()>0){
						List<StoreBalanceT> storeBalTList = new ArrayList<StoreBalanceT>();
						storeBalTList = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",storeItemList.get(0).getId())).setProjection(Projections.distinct(Projections.projectionList().add(Projections.property("Item.Id")).add(Projections.property("BatchNo")))).list();
						System.out.println("storeBalTList"+storeBalTList.size());
						if(storeBalTList.size() > 0){
							storeBalanceTList.addAll(storeBalTList);
						}
						if(!batch1.get(i).toString().equals("")){
							storeBalTBatch1List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",storeItemList.get(0).getId())).add(Restrictions.eq("BatchNo", batch1.get(i).toString())).list();
						}
						if(!batch2.get(i).toString().equals("")){
							storeBalTBatch2List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",storeItemList.get(0).getId())).add(Restrictions.eq("BatchNo", batch2.get(i).toString())).list();
						}
						if(!batch3.get(i).toString().equals("")){
							storeBalTBatch3List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",storeItemList.get(0).getId())).add(Restrictions.eq("BatchNo", batch3.get(i).toString())).list();
						}
						if(!batch4.get(i).toString().equals("")){
							storeBalTBatch4List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",storeItemList.get(0).getId())).add(Restrictions.eq("BatchNo", batch4.get(i).toString())).list();
						}
						if(!batch5.get(i).toString().equals("")){
							storeBalTBatch5List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",storeItemList.get(0).getId())).add(Restrictions.eq("BatchNo", batch5.get(i).toString())).list();
						}
						if(!batch6.get(i).toString().equals("")){
							storeBalTBatch6List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",storeItemList.get(0).getId())).add(Restrictions.eq("BatchNo", batch6.get(i).toString())).list();
						}
						if(!batch7.get(i).toString().equals("")){
							storeBalTBatch7List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",storeItemList.get(0).getId())).add(Restrictions.eq("BatchNo", batch7.get(i).toString())).list();
						}
						if(!batch8.get(i).toString().equals("")){
							storeBalTBatch8List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",storeItemList.get(0).getId())).add(Restrictions.eq("BatchNo", batch8.get(i).toString())).list();
						}
						if(!batch9.get(i).toString().equals("")){
							storeBalTBatch9List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",storeItemList.get(0).getId())).add(Restrictions.eq("BatchNo", batch9.get(i).toString())).list();
						}
						if(!batch10.get(i).toString().equals("")){
							storeBalTBatch10List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",storeItemList.get(0).getId())).add(Restrictions.eq("BatchNo", batch10.get(i).toString())).list();
						}
						System.out.println(batch1.size()+" batch1<<<storeBalTBatch1List "+storeBalTBatch1List.size());
						if(storeBalTBatch1List.size()==0 && !batch1.get(i).toString().equals("")){
							cnt= cnt+1;
						}
						if(storeBalTBatch2List.size()==0 &&  !batch2.get(i).toString().equals("")){
							cnt= cnt+1;
						}
						if(storeBalTBatch3List.size()==0 && !batch3.get(i).toString().equals("")){
							cnt= cnt+1;
						}
						if(storeBalTBatch4List.size()==0 && !batch4.get(i).toString().equals("")){
							cnt= cnt+1;
						}
						if(storeBalTBatch5List.size()==0 && !batch5.get(i).toString().equals("")){
							cnt= cnt+1;
						}
						if(storeBalTBatch6List.size()==0 && !batch6.get(i).toString().equals("")){
							cnt= cnt+1;
						}
						if(storeBalTBatch7List.size()==0 && !batch7.get(i).toString().equals("")){
							cnt= cnt+1;
						}
						if(storeBalTBatch8List.size()==0 && !batch8.get(i).toString().equals("")){
							cnt= cnt+1;
						}
						if(storeBalTBatch9List.size()==0 && !batch9.get(i).toString().equals("")){
							cnt= cnt+1;
						}
						if(storeBalTBatch10List.size()==0 && !batch10.get(i).toString().equals("")){
							cnt= cnt+1;
						}
					}
				}
				StoreBalanceM storeBalanceM = new StoreBalanceM();
				MasDepartment masDepartment=new MasDepartment();
				System.out.println(cnt+" cnt");
				if(cnt > 0){
					//storeBalanceM.setApprovedBy(approvedBy)
					storeBalanceM.setBalanceDate(HMSUtil.convertStringTypeDateToDateType(date));
					masDepartment.setId(deptId);
					storeBalanceM.setDepartment(masDepartment);
					masHospital.setId(hospitalId);
					storeBalanceM.setHospital(masHospital);
					storeBalanceM.setLastChgBy(userName);
					storeBalanceM.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(date));
					storeBalanceM.setLastChgTime(time);
					storeBalanceM.setStatus("o");
					storeBalanceM.setBalanceNo(no);
					hbt1.save(storeBalanceM);
				}
				/**
				 * 
				 */
				
				
				/*MasDepartment masDepartment=new MasDepartment();
				StoreBalanceM storeBalanceM = new StoreBalanceM();

				//storeBalanceM.setApprovedBy(approvedBy)
				storeBalanceM.setBalanceDate(HMSUtil.convertStringTypeDateToDateType(date));
				masDepartment.setId(deptId);
				storeBalanceM.setDepartment(masDepartment);
				masHospital.setId(hospitalId);
				storeBalanceM.setHospital(masHospital);
				storeBalanceM.setLastChgBy(userName);
				storeBalanceM.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(date));
				storeBalanceM.setLastChgTime(time);
				storeBalanceM.setStatus("o");
				storeBalanceM.setBalanceNo(no);
				hbt1.save(storeBalanceM);*/
				StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
				.load(StoreFyDocumentNo.class, StoreFyDocumentNoId);
				storeFyDocumentNo.setBalanceNo(no);
				hbt1.update(storeFyDocumentNo);
				
				
				Pattern pt2 = Pattern.compile("\\\\");
				Pattern pt3 = Pattern.compile("^([0-2]{0,1}\\d|3[01])(/|\\\\|-)(0{0,1}\\d|1[0-2])(/|\\\\|-)[12]{0,1}(\\d{3}|\\d{2})$");
				
				
				for (i=0;i<nomenclatureList.size();i++) {

					MasStoreItem masStoreItem=new MasStoreItem();
					pvmsNo=nivNoList.get(i);
					storeItemList = session.createCriteria(MasStoreItem.class).add(Restrictions.eq("PvmsNo", pvmsNo)).add(Restrictions.eq("Hospital.Id", hospitalId)).list();
					if(storeItemList.size()>0){
						
						masStoreItem.setId(storeItemList.get(0).getId());
					}else{
						//qtymmfList.add(qtymmf);
						System.out.println("new Item");
						masDepartment.setId(deptId);
						masStoreItem.setDepartment(masDepartment);
						masHospital.setId(hospitalId);
						masStoreItem.setHospital(masHospital);

						masStoreItem.setPvmsNo(nivNoList.get(i));
						masStoreItem.setNomenclature(nomenclatureList.get(i));

						MasStoreSection masStoreSection = new MasStoreSection();
						masStoreSection.setId(1);
						masStoreItem.setSection(masStoreSection);

						MasItemType masStoreItemType = new MasItemType();
						masStoreItemType.setId(2);
						masStoreItem.setItemType(masStoreItemType);
						if(!auList.get(i).toString().equals("")){
							MasStoreItemConversion masStoreItemConversion = new MasStoreItemConversion();
							masStoreItemConversion.setId(auList.get(i));
							masStoreItem.setItemConversion(masStoreItemConversion);
						}
						masStoreItem.setLastChgBy(userName);
						masStoreItem.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(date));
						masStoreItem.setLastChgTime(time);
						masStoreItem.setStatus("y");
						hbt1.save(masStoreItem);
						
						
						// added by javed khan on 22-10-2013
						
						storeBalanceM.setBalanceDate(HMSUtil.convertStringTypeDateToDateType(date));
						masDepartment.setId(deptId);
						storeBalanceM.setDepartment(masDepartment);
						masHospital.setId(hospitalId);
						storeBalanceM.setHospital(masHospital);
						storeBalanceM.setLastChgBy(userName);
						storeBalanceM.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(date));
						storeBalanceM.setLastChgTime(time);
						storeBalanceM.setStatus("o");
						storeBalanceM.setBalanceNo(no);
						hbt1.save(storeBalanceM);
						// added by javed khan on 22-10-2013
						
					}
					
					/**
					 * 
					 */
					
					List<StoreBalanceT> storeBalTBat1List = new ArrayList<StoreBalanceT>();
					List<StoreBalanceT> storeBalTBat2List = new ArrayList<StoreBalanceT>();
					List<StoreBalanceT> storeBalTBat3List = new ArrayList<StoreBalanceT>();
					List<StoreBalanceT> storeBalTBat4List = new ArrayList<StoreBalanceT>();
					List<StoreBalanceT> storeBalTBat5List = new ArrayList<StoreBalanceT>();
					List<StoreBalanceT> storeBalTBat6List = new ArrayList<StoreBalanceT>();
					List<StoreBalanceT> storeBalTBat7List = new ArrayList<StoreBalanceT>();
					List<StoreBalanceT> storeBalTBat8List = new ArrayList<StoreBalanceT>();
					List<StoreBalanceT> storeBalTBat9List = new ArrayList<StoreBalanceT>();
					List<StoreBalanceT> storeBalTBat10List = new ArrayList<StoreBalanceT>();
					if(!batch1.get(i).toString().equals("")){
						storeBalTBat1List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",masStoreItem.getId())).add(Restrictions.eq("BatchNo", batch1.get(i).toString())).list();
					}
					if(!batch2.get(i).toString().equals("")){
						storeBalTBat2List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",masStoreItem.getId())).add(Restrictions.eq("BatchNo", batch2.get(i).toString())).list();
					}
					if(!batch3.get(i).toString().equals("")){
						storeBalTBat3List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",masStoreItem.getId())).add(Restrictions.eq("BatchNo", batch3.get(i).toString())).list();
					}
					if(!batch4.get(i).toString().equals("")){
						storeBalTBat4List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",masStoreItem.getId())).add(Restrictions.eq("BatchNo", batch4.get(i).toString())).list();
					}
					if(!batch5.get(i).toString().equals("")){
						storeBalTBat5List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",masStoreItem.getId())).add(Restrictions.eq("BatchNo", batch5.get(i).toString())).list();
					}
					if(!batch6.get(i).toString().equals("")){
						storeBalTBat6List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",masStoreItem.getId())).add(Restrictions.eq("BatchNo", batch6.get(i).toString())).list();
					}
					if(!batch7.get(i).toString().equals("")){
						storeBalTBat7List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",masStoreItem.getId())).add(Restrictions.eq("BatchNo", batch7.get(i).toString())).list();
					}
					if(!batch8.get(i).toString().equals("")){
						storeBalTBat8List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",masStoreItem.getId())).add(Restrictions.eq("BatchNo", batch8.get(i).toString())).list();
					}
					if(!batch9.get(i).toString().equals("")){
						storeBalTBat9List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",masStoreItem.getId())).add(Restrictions.eq("BatchNo", batch9.get(i).toString())).list();
					}
					if(!batch10.get(i).toString().equals("")){
						storeBalTBat10List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",masStoreItem.getId())).add(Restrictions.eq("BatchNo", batch10.get(i).toString())).list();
					}
					/**
					 * 
					 */
						SimpleDateFormat formatter = new SimpleDateFormat("dd/mm/yyyy");
						if(storeBalTBat1List.size()==0 && !batch1.get(i).toString().equals("")){
							StoreBalanceT storeBalanceT = new StoreBalanceT();
							StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
							storeBalanceT.setItem(masStoreItem);
							storeBalanceT.setBatchNo(batch1.get(i).toString());
							storeItemBatchStock.setBatchNo(batch1.get(i).toString());
							storeBalanceT.setSrNo(i);
							if(!qty1.get(i).toString().equals("")){
								storeBalanceT.setQty(new BigDecimal(qty1.get(i).toString()));
								storeItemBatchStock.setOpeningBalanceQty(new BigDecimal(qty1.get(i).toString()));
								storeItemBatchStock.setClosingStock(new BigDecimal(qty1.get(i).toString()));
								storeItemBatchStock.setBatchNo(batch1.get(i).toString());
							}
							if(!expiryDate1.get(i).toString().equals("")){

								//String formattedDate = formatter.format(expiryDate1.get(i));
//								String[] str = expiryDate1.get(i).toString().split(" ");
								String expDate="";
								/*if(str.length>2){
									if(str[0]!=null){
										expDate=str[0].toString();
									}
									if(str[1]!=null){
										expDate=expDate+"/"+str[1].toString();
									}
									if(str[2]!=null){
										expDate=expDate+"/"+str[2].toString();
									}
								}*/
								Matcher mt2 = pt3.matcher(expiryDate1.get(i).toString().trim());
								int count = 0;
								while(mt2.find()){count++;}
								if(count == 1)
								{
									String tmp = expiryDate1.get(i).toString().trim();
									Matcher mttmp = pt2.matcher(tmp);
									tmp = mttmp.replaceAll("/");
									SimpleDateFormat formatterIn;
									if(tmp.split("/")[2].length() == 2)
										formatterIn = new SimpleDateFormat("dd/MM/yy");
									else
										formatterIn = new SimpleDateFormat("dd/MM/yyyy");
									SimpleDateFormat formatterOut = new SimpleDateFormat("dd/MM/yyyy");
									expDate = formatterOut.format(formatterIn.parse(tmp));
								}
								if(expDate!=""){
									storeBalanceT.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
									storeItemBatchStock.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
								}else{
									storeBalanceT.setExpiryDate(null);
									storeItemBatchStock.setExpiryDate(null);
								}
							}
							
							
							storeBalanceT.setStoreBalanceM(storeBalanceM);
							hbt1.save(storeBalanceT);
							storeItemBatchStock.setHospital(masHospital);
							storeItemBatchStock.setItem(masStoreItem);
							storeItemBatchStock.setDepartment(masDepartment);
							storeItemBatchStock.setOpeningBalanceDate(HMSUtil.convertStringTypeDateToDateType(date));
							hbt1.save(storeItemBatchStock);
						}
						if(storeBalTBat2List.size()==0 && !batch2.get(i).toString().equals("")){
							StoreBalanceT storeBalanceT = new StoreBalanceT();
							StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
							storeBalanceT.setItem(masStoreItem);
							storeBalanceT.setBatchNo(batch2.get(i).toString());
							storeItemBatchStock.setBatchNo(batch2.get(i).toString());
							storeBalanceT.setSrNo(i);
							if(!qty2.get(i).toString().equals("")){
								storeBalanceT.setQty(new BigDecimal(qty2.get(i).toString()));
								storeItemBatchStock.setOpeningBalanceQty(new BigDecimal(qty2.get(i).toString()));
								storeItemBatchStock.setClosingStock(new BigDecimal(qty2.get(i).toString()));
							}
							if(!expiryDate2.get(i).toString().equals("")){
								String expDate="";
							/*	String[] str = expiryDate2.get(i).toString().split(" ");
								if(str.length>2){
									if(str[0]!=null){
										expDate=str[0].toString();
									}
									if(str[1]!=null){
										expDate=expDate+"/"+str[1].toString();
									}
									if(str[2]!=null){
										expDate=expDate+"/"+str[2].toString();
									}
								}*/
								Matcher mt2 = pt3.matcher(expiryDate2.get(i).toString().trim());
								int count = 0;
								while(mt2.find()){count++;}
								if(count == 1)
								{
									String tmp = expiryDate2.get(i).toString().trim();
									Matcher mttmp = pt2.matcher(tmp);
									tmp = mttmp.replaceAll("/");
									SimpleDateFormat formatterIn;
									if(tmp.split("/")[2].length() == 2)
										formatterIn = new SimpleDateFormat("dd/MM/yy");
									else
										formatterIn = new SimpleDateFormat("dd/MM/yyyy");
									SimpleDateFormat formatterOut = new SimpleDateFormat("dd/MM/yyyy");
									expDate = formatterOut.format(formatterIn.parse(tmp));
								}
								if(expDate!=""){
									storeBalanceT.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
									storeItemBatchStock.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
								}else{
									storeBalanceT.setExpiryDate(null);
									storeItemBatchStock.setExpiryDate(null);
								}
							}
							storeBalanceT.setStoreBalanceM(storeBalanceM);
							hbt1.save(storeBalanceT);
							storeItemBatchStock.setHospital(masHospital);
							storeItemBatchStock.setItem(masStoreItem);
							storeItemBatchStock.setDepartment(masDepartment);
							storeItemBatchStock.setOpeningBalanceDate(HMSUtil.convertStringTypeDateToDateType(date));
							hbt1.save(storeItemBatchStock);
						}
						if(storeBalTBat3List.size()==0 && !batch3.get(i).toString().equals("")){
							StoreBalanceT storeBalanceT = new StoreBalanceT();
							StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
							storeBalanceT.setItem(masStoreItem);
							storeBalanceT.setBatchNo(batch3.get(i).toString());
							storeItemBatchStock.setBatchNo(batch3.get(i).toString());
							storeBalanceT.setSrNo(i);
							if(!qty3.get(i).toString().equals("")){
								storeBalanceT.setQty(new BigDecimal(qty3.get(i).toString()));
								storeItemBatchStock.setOpeningBalanceQty(new BigDecimal(qty3.get(i).toString()));
								storeItemBatchStock.setClosingStock(new BigDecimal(qty3.get(i).toString()));
							}
							if(!expiryDate3.get(i).toString().equals("")){
								String expDate="";
								//String formattedDate = formatter.format(expiryDate3.get(i).toString());
							/*	String[] str = expiryDate3.get(i).toString().split(" ");
								if(str.length>2){
									if(str[0]!=null){
										expDate=str[0].toString();
									}
									if(str[1]!=null){
										expDate=expDate+"/"+str[1].toString();
									}
									if(str[2]!=null){
										expDate=expDate+"/"+str[2].toString();
									}
								}*/
								Matcher mt2 = pt3.matcher(expiryDate3.get(i).toString().trim());
								int count = 0;
								while(mt2.find()){count++;}
								if(count == 1)
								{
									String tmp = expiryDate3.get(i).toString().trim();
									Matcher mttmp = pt2.matcher(tmp);
									tmp = mttmp.replaceAll("/");
									SimpleDateFormat formatterIn;
									if(tmp.split("/")[2].length() == 2)
										formatterIn = new SimpleDateFormat("dd/MM/yy");
									else
										formatterIn = new SimpleDateFormat("dd/MM/yyyy");
									SimpleDateFormat formatterOut = new SimpleDateFormat("dd/MM/yyyy");
									expDate = formatterOut.format(formatterIn.parse(tmp));
								}
								if(expDate!=""){
									storeBalanceT.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
									storeItemBatchStock.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
								}else{
									storeBalanceT.setExpiryDate(null);
									storeItemBatchStock.setExpiryDate(null);
								}
							}
							storeBalanceT.setStoreBalanceM(storeBalanceM);
							hbt1.save(storeBalanceT);
							storeItemBatchStock.setHospital(masHospital);
							storeItemBatchStock.setItem(masStoreItem);
							storeItemBatchStock.setDepartment(masDepartment);
							storeItemBatchStock.setOpeningBalanceDate(HMSUtil.convertStringTypeDateToDateType(date));
							hbt1.save(storeItemBatchStock);
						}
						if(storeBalTBat4List.size()==0 && !batch4.get(i).toString().equals("")){
							StoreBalanceT storeBalanceT = new StoreBalanceT();
							StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
							storeBalanceT.setItem(masStoreItem);
							storeBalanceT.setBatchNo(batch4.get(i).toString());
							storeItemBatchStock.setBatchNo(batch4.get(i).toString());
							storeBalanceT.setSrNo(i);
							if(!qty4.get(i).toString().equals("")){
								storeBalanceT.setQty(new BigDecimal(qty4.get(i).toString()));
								storeItemBatchStock.setOpeningBalanceQty(new BigDecimal(qty4.get(i).toString()));
								storeItemBatchStock.setClosingStock(new BigDecimal(qty4.get(i).toString()));
							}
							if(!expiryDate4.get(i).toString().equals("")){
								String expDate="";
								//String formattedDate = formatter.format(expiryDate4.get(i).toString());
//								String[] str = expiryDate4.get(i).toString().split(" ");
								/*if(str.length>2){
									if(str[0]!=null){
										expDate=str[0].toString();
									}
									if(str[1]!=null){
										expDate=expDate+"/"+str[1].toString();
									}
									if(str[2]!=null){
										expDate=expDate+"/"+str[2].toString();
									}
								}*/
								Matcher mt2 = pt3.matcher(expiryDate4.get(i).toString().trim());
								int count = 0;
								while(mt2.find()){count++;}
								if(count == 1)
								{
									String tmp = expiryDate4.get(i).toString().trim();
									Matcher mttmp = pt2.matcher(tmp);
									tmp = mttmp.replaceAll("/");
									SimpleDateFormat formatterIn;
									if(tmp.split("/")[2].length() == 2)
										formatterIn = new SimpleDateFormat("dd/MM/yy");
									else
										formatterIn = new SimpleDateFormat("dd/MM/yyyy");
									SimpleDateFormat formatterOut = new SimpleDateFormat("dd/MM/yyyy");
									expDate = formatterOut.format(formatterIn.parse(tmp));
								}
								if(expDate!=""){
									storeBalanceT.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
									storeItemBatchStock.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
								}else{
									storeBalanceT.setExpiryDate(null);
									storeItemBatchStock.setExpiryDate(null);
								}
							}
							storeBalanceT.setStoreBalanceM(storeBalanceM);
							hbt1.save(storeBalanceT);
							storeItemBatchStock.setHospital(masHospital);
							storeItemBatchStock.setItem(masStoreItem);
							storeItemBatchStock.setDepartment(masDepartment);
							storeItemBatchStock.setOpeningBalanceDate(HMSUtil.convertStringTypeDateToDateType(date));
							hbt1.save(storeItemBatchStock);
						}
						if(storeBalTBat5List.size()==0 && !batch5.get(i).toString().equals("")){
							StoreBalanceT storeBalanceT = new StoreBalanceT();
							StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
							storeBalanceT.setItem(masStoreItem);
							storeBalanceT.setBatchNo(batch5.get(i).toString());
							storeItemBatchStock.setBatchNo(batch5.get(i).toString());
							storeBalanceT.setSrNo(i);
							if(!qty5.get(i).toString().equals("")){
								storeBalanceT.setQty(new BigDecimal(qty5.get(i).toString()));
								storeItemBatchStock.setOpeningBalanceQty(new BigDecimal(qty5.get(i).toString()));
								storeItemBatchStock.setClosingStock(new BigDecimal(qty5.get(i).toString()));
							}
							if(!expiryDate5.get(i).toString().equals("")){
								String expDate="";
								//String formattedDate = formatter.format(expiryDate5.get(i).toString());
								/*String[] str = expiryDate5.get(i).toString().split(" ");
								if(str.length>2){
									if(str[0]!=null){
										expDate=str[0].toString();
									}
									if(str[1]!=null){
										expDate=expDate+"/"+str[1].toString();
									}
									if(str[2]!=null){
										expDate=expDate+"/"+str[2].toString();
									}
								}*/
								Matcher mt2 = pt3.matcher(expiryDate5.get(i).toString().trim());
								int count = 0;
								while(mt2.find()){count++;}
								if(count == 1)
								{
									String tmp = expiryDate5.get(i).toString().trim();
									Matcher mttmp = pt2.matcher(tmp);
									tmp = mttmp.replaceAll("/");
									SimpleDateFormat formatterIn;
									if(tmp.split("/")[2].length() == 2)
										formatterIn = new SimpleDateFormat("dd/MM/yy");
									else
										formatterIn = new SimpleDateFormat("dd/MM/yyyy");
									SimpleDateFormat formatterOut = new SimpleDateFormat("dd/MM/yyyy");
									expDate = formatterOut.format(formatterIn.parse(tmp));
								}
								if(expDate!=""){
									storeBalanceT.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
									storeItemBatchStock.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
								}else{
									storeBalanceT.setExpiryDate(null);
									storeItemBatchStock.setExpiryDate(null);
								}
							}
							storeBalanceT.setStoreBalanceM(storeBalanceM);
							hbt1.save(storeBalanceT);
							storeItemBatchStock.setHospital(masHospital);
							storeItemBatchStock.setItem(masStoreItem);
							storeItemBatchStock.setDepartment(masDepartment);
							storeItemBatchStock.setOpeningBalanceDate(HMSUtil.convertStringTypeDateToDateType(date));
							hbt1.save(storeItemBatchStock);
						}
						if(storeBalTBat6List.size()==0 && !batch6.get(i).toString().equals("")){
							StoreBalanceT storeBalanceT = new StoreBalanceT();
							StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
							storeBalanceT.setItem(masStoreItem);
							storeBalanceT.setBatchNo(batch6.get(i).toString());
							storeItemBatchStock.setBatchNo(batch6.get(i).toString());
							storeBalanceT.setSrNo(i);
							if(!qty6.get(i).toString().equals("")){
								storeBalanceT.setQty(new BigDecimal(qty6.get(i).toString()));
								storeItemBatchStock.setOpeningBalanceQty(new BigDecimal(qty6.get(i).toString()));
								storeItemBatchStock.setClosingStock(new BigDecimal(qty6.get(i).toString()));
							}
							if(!expiryDate6.get(i).toString().equals("")){
								String expDate="";
								//String formattedDate = formatter.format(expiryDate6.get(i).toString());
								/*String[] str = expiryDate6.get(i).toString().split(" ");
								if(str.length>2){
									if(str[0]!=null){
										expDate=str[0].toString();
									}
									if(str[1]!=null){
										expDate=expDate+"/"+str[1].toString();
									}
									if(str[2]!=null){
										expDate=expDate+"/"+str[2].toString();
									}
								}*/
								Matcher mt2 = pt3.matcher(expiryDate6.get(i).toString().trim());
								int count = 0;
								while(mt2.find()){count++;}
								if(count == 1)
								{
									String tmp = expiryDate6.get(i).toString().trim();
									Matcher mttmp = pt2.matcher(tmp);
									tmp = mttmp.replaceAll("/");
									SimpleDateFormat formatterIn;
									if(tmp.split("/")[2].length() == 2)
										formatterIn = new SimpleDateFormat("dd/MM/yy");
									else
										formatterIn = new SimpleDateFormat("dd/MM/yyyy");
									SimpleDateFormat formatterOut = new SimpleDateFormat("dd/MM/yyyy");
									expDate = formatterOut.format(formatterIn.parse(tmp));
								}
								if(expDate!=""){
									storeBalanceT.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
									storeItemBatchStock.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
								}else{
									storeBalanceT.setExpiryDate(null);
									storeItemBatchStock.setExpiryDate(null);
								}
							}
							storeBalanceT.setStoreBalanceM(storeBalanceM);
							hbt1.save(storeBalanceT);
							storeItemBatchStock.setHospital(masHospital);
							storeItemBatchStock.setItem(masStoreItem);
							storeItemBatchStock.setDepartment(masDepartment);
							storeItemBatchStock.setOpeningBalanceDate(HMSUtil.convertStringTypeDateToDateType(date));
							hbt1.save(storeItemBatchStock);
						}
						if(storeBalTBat7List.size()==0 && !batch7.get(i).toString().equals("")){
							StoreBalanceT storeBalanceT = new StoreBalanceT();
							StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
							storeBalanceT.setItem(masStoreItem);
							storeBalanceT.setBatchNo(batch7.get(i).toString());
							storeItemBatchStock.setBatchNo(batch7.get(i).toString());
							storeBalanceT.setSrNo(i);
							if(!qty7.get(i).toString().equals("")){
								storeBalanceT.setQty(new BigDecimal(qty7.get(i).toString()));
								storeItemBatchStock.setOpeningBalanceQty(new BigDecimal(qty7.get(i).toString()));
								storeItemBatchStock.setClosingStock(new BigDecimal(qty7.get(i).toString()));
							}
							if(!expiryDate7.get(i).toString().equals("")){
								String expDate="";
								//String formattedDate = formatter.format(expiryDate7.get(i).toString());
								/*String[] str = expiryDate7.get(i).toString().split(" ");
								if(str.length>2){
									if(str[0]!=null){
										expDate=str[0].toString();
									}
									if(str[1]!=null){
										expDate=expDate+"/"+str[1].toString();
									}
									if(str[2]!=null){
										expDate=expDate+"/"+str[2].toString();
									}
								}*/
								Matcher mt2 = pt3.matcher(expiryDate7.get(i).toString().trim());
								int count = 0;
								while(mt2.find()){count++;}
								if(count == 1)
								{
									String tmp = expiryDate7.get(i).toString().trim();
									Matcher mttmp = pt2.matcher(tmp);
									tmp = mttmp.replaceAll("/");
									SimpleDateFormat formatterIn;
									if(tmp.split("/")[2].length() == 2)
										formatterIn = new SimpleDateFormat("dd/MM/yy");
									else
										formatterIn = new SimpleDateFormat("dd/MM/yyyy");
									SimpleDateFormat formatterOut = new SimpleDateFormat("dd/MM/yyyy");
									expDate = formatterOut.format(formatterIn.parse(tmp));
								}
								if(expDate!=""){
									storeBalanceT.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
									storeItemBatchStock.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
								}else{
									storeBalanceT.setExpiryDate(null);
									storeItemBatchStock.setExpiryDate(null);
								}
							}
							storeBalanceT.setStoreBalanceM(storeBalanceM);
							hbt1.save(storeBalanceT);
							storeItemBatchStock.setHospital(masHospital);
							storeItemBatchStock.setItem(masStoreItem);
							storeItemBatchStock.setDepartment(masDepartment);
							storeItemBatchStock.setOpeningBalanceDate(HMSUtil.convertStringTypeDateToDateType(date));
							hbt1.save(storeItemBatchStock);
						}
						if(storeBalTBat8List.size()==0 && !batch8.get(i).toString().equals("")){
							StoreBalanceT storeBalanceT = new StoreBalanceT();
							StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
							storeBalanceT.setItem(masStoreItem);
							storeBalanceT.setBatchNo(batch8.get(i).toString());
							storeItemBatchStock.setBatchNo(batch8.get(i).toString());
							storeBalanceT.setSrNo(i);
							if(!qty8.get(i).toString().equals("")){
								storeBalanceT.setQty(new BigDecimal(qty8.get(i).toString()));
								storeItemBatchStock.setOpeningBalanceQty(new BigDecimal(qty8.get(i).toString()));
								storeItemBatchStock.setClosingStock(new BigDecimal(qty8.get(i).toString()));
							}
							if(!expiryDate8.get(i).toString().equals("")){
								String expDate="";
								//String formattedDate = formatter.format(expiryDate8.get(i).toString());
								/*String[] str = expiryDate8.get(i).toString().split(" ");
								if(str.length>2){
									if(str[0]!=null){
										expDate=str[0].toString();
									}
									if(str[1]!=null){
										expDate=expDate+"/"+str[1].toString();
									}
									if(str[2]!=null){
										expDate=expDate+"/"+str[2].toString();
									}
								}*/
								Matcher mt2 = pt3.matcher(expiryDate8.get(i).toString().trim());
								int count = 0;
								while(mt2.find()){count++;}
								if(count == 1)
								{
									String tmp = expiryDate8.get(i).toString().trim();
									Matcher mttmp = pt2.matcher(tmp);
									tmp = mttmp.replaceAll("/");
									SimpleDateFormat formatterIn;
									if(tmp.split("/")[2].length() == 2)
										formatterIn = new SimpleDateFormat("dd/MM/yy");
									else
										formatterIn = new SimpleDateFormat("dd/MM/yyyy");
									SimpleDateFormat formatterOut = new SimpleDateFormat("dd/MM/yyyy");
									expDate = formatterOut.format(formatterIn.parse(tmp));
								}
								if(expDate!=""){
									storeBalanceT.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
									storeItemBatchStock.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
								}else{
									storeBalanceT.setExpiryDate(null);
									storeItemBatchStock.setExpiryDate(null);
								}
							}
							storeBalanceT.setStoreBalanceM(storeBalanceM);
							hbt1.save(storeBalanceT);
							storeItemBatchStock.setHospital(masHospital);
							storeItemBatchStock.setItem(masStoreItem);
							storeItemBatchStock.setDepartment(masDepartment);
							storeItemBatchStock.setOpeningBalanceDate(HMSUtil.convertStringTypeDateToDateType(date));
							hbt1.save(storeItemBatchStock);
						}
						if(storeBalTBat9List.size()==0 && !batch9.get(i).toString().equals("")){
							StoreBalanceT storeBalanceT = new StoreBalanceT();
							StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
							storeBalanceT.setItem(masStoreItem);
							storeBalanceT.setBatchNo(batch9.get(i).toString());
							storeItemBatchStock.setBatchNo(batch9.get(i).toString());
							storeBalanceT.setSrNo(i);
							if(!qty9.get(i).toString().equals("")){
								storeBalanceT.setQty(new BigDecimal(qty9.get(i).toString()));
								storeItemBatchStock.setOpeningBalanceQty(new BigDecimal(qty9.get(i).toString()));
								storeItemBatchStock.setClosingStock(new BigDecimal(qty9.get(i).toString()));
							}
							if(!expiryDate9.get(i).toString().equals("")){
								String expDate="";
								//String formattedDate = formatter.format(expiryDate9.get(i).toString());
								/*String[] str = expiryDate9.get(i).toString().split(" ");
								if(str.length>2){
									if(str[0]!=null){
										expDate=str[0].toString();
									}
									if(str[1]!=null){
										expDate=expDate+"/"+str[1].toString();
									}
									if(str[2]!=null){
										expDate=expDate+"/"+str[2].toString();
									}
								}*/
								Matcher mt2 = pt3.matcher(expiryDate9.get(i).toString().trim());
								int count = 0;
								while(mt2.find()){count++;}
								if(count == 1)
								{
									String tmp = expiryDate9.get(i).toString().trim();
									Matcher mttmp = pt2.matcher(tmp);
									tmp = mttmp.replaceAll("/");
									SimpleDateFormat formatterIn;
									if(tmp.split("/")[2].length() == 2)
										formatterIn = new SimpleDateFormat("dd/MM/yy");
									else
										formatterIn = new SimpleDateFormat("dd/MM/yyyy");
									SimpleDateFormat formatterOut = new SimpleDateFormat("dd/MM/yyyy");
									expDate = formatterOut.format(formatterIn.parse(tmp));
								}
								if(expDate!=""){
									storeBalanceT.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
									storeItemBatchStock.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
								}else{
									storeBalanceT.setExpiryDate(null);
									storeItemBatchStock.setExpiryDate(null);
								}
							}
							storeBalanceT.setStoreBalanceM(storeBalanceM);
							hbt1.save(storeBalanceT);
							storeItemBatchStock.setHospital(masHospital);
							storeItemBatchStock.setItem(masStoreItem);
							storeItemBatchStock.setDepartment(masDepartment);
							storeItemBatchStock.setOpeningBalanceDate(HMSUtil.convertStringTypeDateToDateType(date));
							hbt1.save(storeItemBatchStock);
						}
						if(storeBalTBat10List.size()==0 && !batch10.get(i).toString().equals("")){
							StoreBalanceT storeBalanceT = new StoreBalanceT();
							StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
							storeBalanceT.setItem(masStoreItem);
							storeBalanceT.setBatchNo(batch10.get(i).toString());
							storeItemBatchStock.setBatchNo(batch10.get(i).toString());
							storeBalanceT.setSrNo(i);
							if(!qty10.get(i).toString().equals("")){
								storeBalanceT.setQty(new BigDecimal(qty10.get(i).toString()));
								storeItemBatchStock.setOpeningBalanceQty(new BigDecimal(qty10.get(i).toString()));
								storeItemBatchStock.setClosingStock(new BigDecimal(qty10.get(i).toString()));
							}
							if(!expiryDate10.get(i).toString().equals("")){
								String expDate="";
								//String formattedDate = formatter.format(expiryDate9.get(i).toString());
								/*String[] str = expiryDate10.get(i).toString().split(" ");
								if(str.length>2){
									if(str[0]!=null){
										expDate=str[0].toString();
									}
									if(str[1]!=null){
										expDate=expDate+"/"+str[1].toString();
									}
									if(str[2]!=null){
										expDate=expDate+"/"+str[2].toString();
									}
								}*/
								Matcher mt2 = pt3.matcher(expiryDate10.get(i).toString().trim());
								int count = 0;
								while(mt2.find()){count++;}
								if(count == 1)
								{
									String tmp = expiryDate10.get(i).toString().trim();
									Matcher mttmp = pt2.matcher(tmp);
									tmp = mttmp.replaceAll("/");
									SimpleDateFormat formatterIn;
									if(tmp.split("/")[2].length() == 2)
										formatterIn = new SimpleDateFormat("dd/MM/yy");
									else
										formatterIn = new SimpleDateFormat("dd/MM/yyyy");
									SimpleDateFormat formatterOut = new SimpleDateFormat("dd/MM/yyyy");
									expDate = formatterOut.format(formatterIn.parse(tmp));
								}
								if(expDate!=""){
									storeBalanceT.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
									storeItemBatchStock.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
								}else{
									storeBalanceT.setExpiryDate(null);
									storeItemBatchStock.setExpiryDate(null);
								}
							}
							storeBalanceT.setStoreBalanceM(storeBalanceM);
							hbt1.save(storeBalanceT);
							storeItemBatchStock.setHospital(masHospital);
							storeItemBatchStock.setItem(masStoreItem);
							storeItemBatchStock.setDepartment(masDepartment);
							storeItemBatchStock.setOpeningBalanceDate(HMSUtil.convertStringTypeDateToDateType(date));
							hbt1.save(storeItemBatchStock);
						}

						/******************** Saving the Record into Table mas_store_item *********************/
				}
			}
			msg = "Record Added Sucessfully..";// added by javed khan on 22-10-2013 
			tx.commit();
		}catch (Exception e) {
			tx.rollback();
			e.printStackTrace();
		}
		departmentList = session.createCriteria(MasDepartment.class).add(Restrictions.eq("Status", "y")).addOrder(Order.asc("DepartmentName")).list();
		map.put("departmentList", departmentList);
		map.put("time", time);
		map.put("msg", msg); // added by javed khan on 22-10-2013 
		return map;
	}

	@Override
	public Map<String, Object> createPvmsItemExcelList(Box box) {
		Map<String, Object> map1 = new HashMap<String, Object>();
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		String message = "No Items Found (or) MMF not available";
		List<MasStoreItem> masStoreItemList = new ArrayList<MasStoreItem>();
		String pvms = null;
		String nomenclature = null;
		String strength = null;
		int au = 0;
		String disp_type = null;
		BigDecimal annreq = null;
		int item_id = 0;
		String group_id = null;
		String groupName="";
		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector tenderTItems = new Vector();
		List<Integer> itemIdList=new ArrayList<Integer>();
		List <String>pvmsNoList=new ArrayList<String>();
		List <String>itemNameList=new ArrayList<String>();
		List <Integer>itemUnitList=new ArrayList<Integer>();

		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;

		Map dateMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) dateMap.get("currentDate");
		String mmfDate = date.substring(6, date.length());
		int mmfYear = Integer.parseInt(mmfDate);
		String mmfType = "";

		int month, year;
		Calendar cal = Calendar.getInstance();
		Calendar calendar = Calendar.getInstance();
		month = calendar.get(Calendar.MONTH) + 1;
		if (month < 4) {
			year = calendar.get(Calendar.YEAR) - 1;
		} else {
			year = calendar.get(Calendar.YEAR);
		}
		String grp_name = "";
		org.springframework.orm.hibernate3.HibernateTemplate hbt1 = getHibernateTemplate();
		hbt1.setFlushModeName("FLUSH_EAGER");
		hbt1.setCheckWriteOperations(false);

		//try {
		//org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		//hbt.setFlushModeName("FLUSH_EAGER");
		//hbt.setCheckWriteOperations(false);
		/*if (!box.getString(TENDER_NO).equals("")) {
			//List<StoreTenderT> storeTenderTList = new ArrayList<StoreTenderT>();
			storeTenderTList = hbt
					.find("from jkt.hms.masters.business.StoreTenderT as inp where inp.TenderM.TenderNo='"
							+ box.get(TENDER_NO).toString() + "'");
			for (Iterator iterator = storeTenderTList.iterator(); iterator
					.hasNext();) {
				StoreTenderT storeTenderT = (StoreTenderT) iterator.next();
				tenderTItems.add(storeTenderT.getItem().getId());
			}
		} else {
			List<StoreTenderProposal> storeTenderProposalList = new ArrayList<StoreTenderProposal>();
			storeTenderProposalList = hbt
					.find("from jkt.hms.masters.business.StoreTenderProposal as inp where inp.Status='o' and inp.Department.Id="
							+ box.getInt("deptId"));
			for (Iterator iterator = storeTenderProposalList.iterator(); iterator
					.hasNext();) {
				StoreTenderProposal storeTenderProposal = (StoreTenderProposal) iterator
						.next();
				tenderTItems.add(storeTenderProposal.getItem().getId());
			}
		}*/

		/*String str = "";
		Criteria c = null;
		String queryString = null;

		if (box.get("search_text") != null
				&& box.getString("search_text").length() > 0) {
			if (box.get("pvms") != null
					&& box.getString("pvms").length() > 0) {
				str = "%" + box.getString("search_text") + "%";
				pvms = box.getString("pvms");
				c = session.createCriteria(MasStoreItem.class).add(
						Restrictions.or(Restrictions.like("Nomenclature",
								str), Restrictions.eq("PvmsNo", pvms)))
						.add(
								Restrictions.eq("Group.Id", box
										.getInt("groupId"))).add(
								Restrictions.eq("Status", "y"))
								.addOrder(Order.asc("item.Nomenclature"));
			} else {
				str = "%" + box.getString("search_text") + "%";
				c = session.createCriteria(MasStoreItem.class).add(
						Restrictions.like("Nomenclature", str)).add(
						Restrictions.eq("Group.Id", box.getInt("groupId")))
						.add(Restrictions.eq("Status", "y"))
						.addOrder(Order.asc("item.Id"));
			}
		} else {
			if (box.get("pvms") != null
					&& box.getString("pvms").length() > 0) {
				pvms = box.getString("pvms");
				c = session.createCriteria(MasStoreItem.class).add(
						Restrictions.like("PvmsNo", pvms)).add(
						Restrictions.eq("Group.Id", box.getInt("groupId")))
						.add(Restrictions.eq("Status", "y"))
						.addOrder(Order.asc("item.Nomenclature"));
			} else {
				c = session.createCriteria(MasStoreItemGroup.class)
				.createAlias("Item", "item")
				.add(Restrictions.eq("Group.Id", box.getInt("groupId")))
						.add(Restrictions.eq("item.Status", "y"))
						.addOrder(Order.asc("item.Nomenclature"));
				c.setFirstResult(0);
				//c.setMaxResults(2000);
			}
		}

		itemList = c.list();
	} catch (HibernateException e) {
		e.printStackTrace();
	}

	List<MasStoreGroup>groupList=new ArrayList<MasStoreGroup>();
	groupList=session.createCriteria(MasStoreGroup.class).add(
			Restrictions.eq("Id", box.getInt("groupId")))
			.add(Restrictions.eq("Status", "y")).list();
	if(groupList.size()>0)
	{
		groupName=groupList.get(0).getGroupName();
	}
	for (Iterator iterator = itemList.iterator(); iterator.hasNext();) {
		MasStoreItemGroup masStoreItem = (MasStoreItemGroup) iterator.next();

		String currYearMmfSumQuery = "SELECT sum(curr_year_mmf) FROM store_mmf_department_t t,store_mmf_department_m m,mas_store_item s where t.store_mmf_department_m_id=m.id and t.item_id=s.item_id and m.mmf_for_the_year='"
				+ year
				+ "'"
				+ " and s.item_id ='"
				+ masStoreItem.getItem().getId()
				+ "' and m.mmf_store_type='" + mmfType + "'";


		List objectCurrentYearList = new ArrayList();
		objectCurrentYearList = (List) session.createSQLQuery(
				currYearMmfSumQuery).list();

		BigDecimal qtymmf = null;
		if (objectCurrentYearList != null
				&& objectCurrentYearList.size() > 0) {
			if (objectCurrentYearList.get(0) != null) {
				qtymmf = new BigDecimal("" + objectCurrentYearList.get(0));
			}
		} else {
			qtymmf = new BigDecimal(0);
		}
		 */


		/*BigDecimal qtyInHand = null;
		List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
		String str = "select sum(inp.closing_stock) from store_item_batch_stock as inp where department_id = "
				+ box.getInt("deptId")
				+ " and item_id = "
				+ masStoreItem.getItem().getId();
		storeItemBatchStockList = session.createSQLQuery(str).list();*/
		masStoreItemList = session.createCriteria(MasStoreItem.class).add(Restrictions.eq("ItemClassification.Id", 1))
		.add(Restrictions.eq("Status", "y")).list();
		for(MasStoreItem masStoreItem :masStoreItemList){
			try {
				pvms = masStoreItem.getPvmsNo();
			} catch (Exception e) {
				pvms = "";
			}

			try {
				nomenclature = masStoreItem.getNomenclature();
			} catch (Exception e) {
				nomenclature = "";
			}


			try {
				au = masStoreItem.getItemConversion().getId();

			} catch (Exception e) {
				au = 0;
			}



			try {
				item_id = masStoreItem.getId();
			} catch (Exception e) {
				item_id = 0;
			}

			itemIdList.add(item_id);
			pvmsNoList.add(pvms);
			itemNameList.add(nomenclature);
			itemUnitList.add(au);
		}



		org.springframework.orm.hibernate3.HibernateTemplate hbt2 = getHibernateTemplate();
		hbt2.setFlushModeName("FLUSH_EAGER");
		hbt2.setCheckWriteOperations(false);

		try {
			grp_name = "Export";
			byte[] buffer = new byte[18024];
			grp_name = "pvmsMaster" + ".zip";
			ZipOutputStream out = new ZipOutputStream(
					new FileOutputStream(grp_name));
			out.setLevel(Deflater.DEFAULT_COMPRESSION);
			int i=0;


			HSSFWorkbook wb = new HSSFWorkbook();
			/*
			 * HSSFSheet sheet =
			 * wb.createSheet(storeTenderToSupplier
			 * .getGroup().getGroupCode());
			 */
			HSSFSheet sheet = wb.createSheet("PVMS_Master");
			//sheet.setProtect(false);
			// Create a new font and alter it.
			HSSFFont font = wb.createFont();
			font.setFontHeightInPoints((short) 10);
			font.setFontName(HSSFFont.FONT_ARIAL);
			font.setColor((short) 62);
			font.setItalic(false);
			font.setStrikeout(false);
			font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);

			HSSFFont font1 = wb.createFont();
			font1.setFontHeightInPoints((short) 10);
			font1.setFontName(HSSFFont.FONT_ARIAL);
			font1.setColor((short) 0x0);


			font1.setItalic(false);
			font1.setStrikeout(false);
			font1.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);

			// Fonts are set into a style so create a new one to
			// use.
			HSSFCellStyle style = wb.createCellStyle();
			style.setFont(font);

			HSSFCellStyle style1 = wb.createCellStyle();
			style1.setFont(font1);
			//style1.setLocked(true);
			HSSFCellStyle style2 = wb.createCellStyle();
			style2.setFont(font);

			//sheet.protectSheet("tir");

			/* cell style for locking */
			//HSSFCellStyle lockedCellStyle = wb.createCellStyle();
			//lockedCellStyle.setLocked(true);
			/* cell style for editable cells */
			//HSSFCellStyle unlockedCellStyle = wb.createCellStyle();
			//unlockedCellStyle.setLocked(false);



			//HSSFCellStyle lockedNumericStyle = wb.createCellStyle();
			HSSFRow headingRow = sheet.createRow((short) 0);
			// Create a cell and put a value in it.
			HSSFCell cell50 = headingRow.createCell((short) 0);
			cell50.setCellValue("ItemId");
			cell50.setCellStyle(style);
			//cell50.setCellStyle(lockedCellStyle);



			HSSFCell cell51 = headingRow.createCell((short) 1);
			cell51.setCellValue("PVMS No");
			//cell51.setCellStyle(unlockedCellStyle);
			cell51.setCellStyle(style);
			HSSFCell cell52 = headingRow.createCell((short) 2);
			cell52.setCellValue("Nomenclature");
			cell52.setCellStyle(style);
			/*
			 * HSSFCell cell53 = headingRow.createCell((short)3);
			 * cell53.setCellValue("Strength");
			 * cell53.setCellStyle(style);
			 */
			HSSFCell cell53 = headingRow.createCell((short) 3);
			cell53.setCellValue("A/U");
			cell53.setCellStyle(style);
			HSSFCell cell531 = headingRow.createCell((short) 4);
			cell531.setCellValue("Batch1");
			cell531.setCellStyle(style);
			HSSFCell cell54 = headingRow.createCell((short) 5);
			cell54.setCellValue("Expiry1");
			cell54.setCellStyle(style);
			HSSFCell cell541 = headingRow.createCell((short) 6);
			cell541.setCellValue("Qty1");
			cell541.setCellStyle(style);
			HSSFCell cell55 = headingRow.createCell((short) 7);
			cell55.setCellValue("Batch2");
			cell55.setCellStyle(style);
			HSSFCell cell551 = headingRow.createCell((short) 8);
			cell551.setCellValue("Expiry2");
			cell551.setCellStyle(style);
			HSSFCell cell56 = headingRow.createCell((short) 9);
			cell56.setCellValue("Qty2");
			cell56.setCellStyle(style);

			HSSFCell cell561 = headingRow.createCell((short) 10);
			cell561.setCellValue("Batch3");
			cell561.setCellStyle(style);
			HSSFCell cell57 = headingRow.createCell((short) 11);
			cell57.setCellValue("Expiry3");
			cell57.setCellStyle(style);
			HSSFCell cell571 = headingRow.createCell((short) 12);
			cell571.setCellValue("Qty3");
			cell571.setCellStyle(style);

			HSSFCell cell58 = headingRow.createCell((short) 13);
			cell58.setCellValue("Batch4");
			cell58.setCellStyle(style);
			HSSFCell cell581 = headingRow.createCell((short) 14);
			cell581.setCellValue("Expiry4");
			cell581.setCellStyle(style);
			HSSFCell cell59 = headingRow.createCell((short) 15);
			cell59.setCellValue("Qty4");
			cell59.setCellStyle(style);

			HSSFCell cell591 = headingRow.createCell((short) 16);
			cell591.setCellValue("Batch5");
			cell591.setCellStyle(style);
			HSSFCell cell60 = headingRow.createCell((short) 17);
			cell60.setCellValue("Expiry5");
			cell60.setCellStyle(style);
			HSSFCell cell601 = headingRow.createCell((short) 18);
			cell601.setCellValue("Qty5");
			cell601.setCellStyle(style);

			HSSFCell cell61 = headingRow.createCell((short) 19);
			cell61.setCellValue("Batch6");
			cell61.setCellStyle(style);
			HSSFCell cell611 = headingRow.createCell((short) 20);
			cell611.setCellValue("Expiry6");
			cell611.setCellStyle(style);
			HSSFCell cell62 = headingRow.createCell((short) 21);
			cell62.setCellValue("Qty6");
			cell62.setCellStyle(style);

			HSSFCell cell63 = headingRow.createCell((short) 22);
			cell63.setCellValue("Batch7");
			cell63.setCellStyle(style);
			HSSFCell cell631 = headingRow.createCell((short) 23);
			cell631.setCellValue("Expiry7");
			cell631.setCellStyle(style);
			HSSFCell cell64 = headingRow.createCell((short) 24);
			cell64.setCellValue("Qty7");
			cell64.setCellStyle(style);

			HSSFCell cell65 = headingRow.createCell((short) 25);
			cell65.setCellValue("Batch8");
			cell65.setCellStyle(style);
			HSSFCell cell651 = headingRow.createCell((short) 26);
			cell651.setCellValue("Expiry8");
			cell651.setCellStyle(style);
			HSSFCell cell66 = headingRow.createCell((short) 27);
			cell66.setCellValue("Qty8");
			cell66.setCellStyle(style);

			HSSFCell cell661 = headingRow.createCell((short) 28);
			cell661.setCellValue("Batch9");
			cell661.setCellStyle(style);
			HSSFCell cell67 = headingRow.createCell((short) 29);
			cell67.setCellValue("Expiry9");
			cell67.setCellStyle(style);
			HSSFCell cell671 = headingRow.createCell((short) 30);
			cell671.setCellValue("Qty9");
			cell671.setCellStyle(style);

			HSSFCell cell68 = headingRow.createCell((short) 31);
			cell68.setCellValue("Batch10");
			cell68.setCellStyle(style);
			HSSFCell cell681 = headingRow.createCell((short) 32);
			cell681.setCellValue("Expiry10");
			cell681.setCellStyle(style);
			HSSFCell cell69 = headingRow.createCell((short) 33);
			cell69.setCellValue("Qty10");
			cell69.setCellStyle(style);

			int row = 1;
			int slno = 0;
			int j=0;
			for (j=0;j<itemNameList.size();j++) {

				String pvms1 = "";
				String nomenclature1 = "";
				BigDecimal mmfQty1 = null;
				int itemId1 = 0;
				int au1 = 0;
				BigDecimal tender_qty = new BigDecimal(0);
				try {
					itemId1= (Integer)itemIdList.get(j);

				} catch (Exception e) {
					itemId1 = 0;
				}

				try {
					pvms1 = (String)pvmsNoList.get(j);
				} catch (Exception e) {
					pvms1 = "";
				}

				try {
					nomenclature1 = (String)itemNameList.get(j);
				} catch (Exception e) {
					nomenclature1 = "";
				}


				try {
					au1 = Integer.parseInt(itemUnitList.get(j).toString());
				} catch (Exception e) {
					au1 = 0;
				}




				sheet.createRow((short) row).createCell((short) 0)
				.setCellValue(itemId1);
				sheet.getRow((short) row).getCell((short) 0);



				sheet.createRow((short) row).createCell((short) 1)
				.setCellValue(pvms1);
				sheet.getRow((short) row).getCell((short) 1);

				sheet.createRow((short) row).createCell((short) 2)
				.setCellValue(nomenclature1);
				sheet.createRow((short) row).createCell((short) 3)
				.setCellValue(au1);
				//sheet.createRow((short) row).createCell((short) 4)
				//.setCellValue(mmfQty1.doubleValue());



				sheet.createRow((short) row).createCell((short) 4)
				.setCellValue("");
				sheet.getRow((short) row).getCell((short) 4);
				sheet.createRow((short) row).createCell((short) 5)
				.setCellValue("");
				sheet.getRow((short) row).getCell((short) 5);


				sheet.setColumnWidth((short) 0, (short) (6 * 256));
				sheet.setColumnWidth((short) 1, (short) (11 * 256));
				sheet.setColumnWidth((short) 2, (short) (60 * 256));
				sheet.setColumnWidth((short) 3, (short) (15 * 256));
				sheet.setColumnWidth((short) 4, (short) (15 * 256));
				sheet.setColumnWidth((short) 5, (short) (15 * 256));
				//sheet.setColumnWidth((short) 6, (short) (25 * 256));



				row++;

			}



			// Write the output to a file
			FileOutputStream fileOut = new FileOutputStream("PVMS.xls");
			wb.write(fileOut);
			fileOut.close();
			FileInputStream in = new FileInputStream("PVMS.xls");
			out.putNextEntry(new ZipEntry("PVMS.xls"));
			int len;
			while ((len = in.read(buffer)) > 0) {
				out.write(buffer, 0, len);
			}
			out.closeEntry();
			in.close();
			File f = new File("PVMS.xls");
			if (f.exists())
				f.delete();


			out.close();
			//map = getGroupAndTenderComboDetails(box);
			map.put("flag", "DataFound");
			map.put("download_path", grp_name);
		} catch (IOException ioe) {
			ioe.printStackTrace();
			//map = getGroupAndTenderComboDetails(box);
			map.put("flag", "NoData");
		}


		return map;
	}
	public Map<String, Object> importPvmsMaster(Map<String, Object> utilMap) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List fileUploadedList = null;
		List<Integer> itemIdList = new ArrayList<Integer>();
		List<String> pvmsNoList = new ArrayList<String>();
		List<String> nomenclatureList = new ArrayList<String>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<Integer> auList = new ArrayList<Integer>();
		List<String> batch1 = new ArrayList<String>();
		List<String> batch2 = new ArrayList<String>();
		List<String> batch3 = new ArrayList<String>();
		List<String> batch4 = new ArrayList<String>();
		List<String> batch5 = new ArrayList<String>();
		List<String> batch6 = new ArrayList<String>();
		List<String> batch7 = new ArrayList<String>();
		List<String> batch8 = new ArrayList<String>();
		List<String> batch9 = new ArrayList<String>();
		List<String> batch10 = new ArrayList<String>();
		List<String> expiryDate1 = new ArrayList<String>();
		List<String> expiryDate2 = new ArrayList<String>();
		List<String> expiryDate3 = new ArrayList<String>();
		List<String> expiryDate4 = new ArrayList<String>();
		List<String> expiryDate5 = new ArrayList<String>();
		List<String> expiryDate6 = new ArrayList<String>();
		List<String> expiryDate7 = new ArrayList<String>();
		List<String> expiryDate8 = new ArrayList<String>();
		List<String> expiryDate9 = new ArrayList<String>();
		List<String> expiryDate10 = new ArrayList<String>();
		List<BigDecimal> qty1 = new ArrayList<BigDecimal>();
		List<BigDecimal> qty2 = new ArrayList<BigDecimal>();
		List<BigDecimal> qty3 = new ArrayList<BigDecimal>();
		List<BigDecimal> qty4 = new ArrayList<BigDecimal>();
		List<BigDecimal> qty5 = new ArrayList<BigDecimal>();
		List<BigDecimal> qty6 = new ArrayList<BigDecimal>();
		List<BigDecimal> qty7 = new ArrayList<BigDecimal>();
		List<BigDecimal> qty8 = new ArrayList<BigDecimal>();
		List<BigDecimal> qty9 = new ArrayList<BigDecimal>();
		List<BigDecimal> qty10 = new ArrayList<BigDecimal>();
		itemIdList = (List)utilMap.get("itemIdList");
		pvmsNoList=(List)utilMap.get("pvmsNoList");
		nomenclatureList=(List)utilMap.get("nomenclatureList");
		auList=(List)utilMap.get("auList");
		batch1=(List)utilMap.get("batch1");
		batch2=(List)utilMap.get("batch2");
		batch3=(List)utilMap.get("batch3");
		batch4=(List)utilMap.get("batch4");
		batch5=(List)utilMap.get("batch5");
		batch6=(List)utilMap.get("batch6");
		batch7=(List)utilMap.get("batch7");
		batch8=(List)utilMap.get("batch8");
		batch9=(List)utilMap.get("batch9");
		batch10=(List)utilMap.get("batch10");
		expiryDate1=(List)utilMap.get("expiryDate1");
		expiryDate2=(List)utilMap.get("expiryDate2");
		expiryDate3=(List)utilMap.get("expiryDate3");
		expiryDate4=(List)utilMap.get("expiryDate4");
		expiryDate5=(List)utilMap.get("expiryDate5");
		expiryDate6=(List)utilMap.get("expiryDate6");
		expiryDate7=(List)utilMap.get("expiryDate7");
		expiryDate8=(List)utilMap.get("expiryDate8");
		expiryDate9=(List)utilMap.get("expiryDate9");
		expiryDate10=(List)utilMap.get("expiryDate10");
		qty1=(List)utilMap.get("qty1");
		qty2=(List)utilMap.get("qty2");
		qty3=(List)utilMap.get("qty3");
		qty4=(List)utilMap.get("qty4");
		qty5=(List)utilMap.get("qty5");
		qty6=(List)utilMap.get("qty6");
		qty7=(List)utilMap.get("qty7");
		qty8=(List)utilMap.get("qty8");
		qty9=(List)utilMap.get("qty9");
		qty10=(List)utilMap.get("qty10");
		int deptId=(Integer)utilMap.get("deptId");
		int hospitalId=(Integer)utilMap.get("hospitalId");
		List<MasStoreItem> storeItemList = new ArrayList<MasStoreItem>();
		List<StoreBalanceT> storeBalanceTList = new ArrayList<StoreBalanceT>();
		List<StoreFyDocumentNo> storeFyDocumentNoList= new ArrayList<StoreFyDocumentNo>();
		String message = "No Items Found (or) MMF not available";
		String userName=(String)utilMap.get("utilMap");
		session = (Session) getSession();
		String pvms = null;
		String nomenclature = null;
		int auId = 0;
		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector tenderTItems = new Vector();
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		Map dateMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) dateMap.get("currentDate");
		String time = (String)dateMap.get("currentTime");
		org.springframework.orm.hibernate3.HibernateTemplate hbt1 = getHibernateTemplate();
		hbt1.setFlushModeName("FLUSH_EAGER");
		hbt1.setCheckWriteOperations(false);
		Transaction tx=null;
		String msg = "";
		boolean succesfullyAdded = false;
		try
		{
			tx = session.beginTransaction();

			String pvmsNo="";
			int itemId = 0;
			String no = "";
			int StoreFyDocumentNoId= 0;
			MasHospital masHospital=new MasHospital();
			int i=0;
			List<StoreBalanceT> storeBalTBatch1List = new ArrayList<StoreBalanceT>();
			List<StoreBalanceT> storeBalTBatch2List = new ArrayList<StoreBalanceT>();
			List<StoreBalanceT> storeBalTBatch3List = new ArrayList<StoreBalanceT>();
			List<StoreBalanceT> storeBalTBatch4List = new ArrayList<StoreBalanceT>();
			List<StoreBalanceT> storeBalTBatch5List = new ArrayList<StoreBalanceT>();
			List<StoreBalanceT> storeBalTBatch6List = new ArrayList<StoreBalanceT>();
			List<StoreBalanceT> storeBalTBatch7List = new ArrayList<StoreBalanceT>();
			List<StoreBalanceT> storeBalTBatch8List = new ArrayList<StoreBalanceT>();
			List<StoreBalanceT> storeBalTBatch9List = new ArrayList<StoreBalanceT>();
			List<StoreBalanceT> storeBalTBatch10List = new ArrayList<StoreBalanceT>();
			//	storeBalanceTList = session.createCriteria(StoreBalanceT.class).add(Restrictions.in("Item.Id",itemIdList)).setProjection(Projections.distinct(Projections.projectionList().add(Projections.property("Item.Id")).add(Projections.property("BatchNo")))).list();

			if(itemIdList.size() > 0){
				for(Integer iId : itemIdList){
					List<StoreBalanceT> storeBalTList = new ArrayList<StoreBalanceT>();
					storeBalTList = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",iId)).setProjection(Projections.distinct(Projections.projectionList().add(Projections.property("Item.Id")).add(Projections.property("BatchNo")))).list();
					if(storeBalTList.size() > 0){
						storeBalanceTList.addAll(storeBalTList);
					}

				}

			}

			if(nomenclatureList.size()>0){
				storeFyDocumentNoList = (List) getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"+deptId+"' and sfdn.Hospital.Id='"+hospitalId+"'");
				if(storeFyDocumentNoList.size()>0){
					for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {

						no = ("" + storeFyDocumentNo.getBalanceNo());
						no = getMaxNo(no);
						StoreFyDocumentNoId = storeFyDocumentNo.getId();
					}
				}else{
					StoreFyDocumentNo storeFyDocumentNo = new StoreFyDocumentNo();
					MasHospital hospital = new MasHospital();
					hospital.setId(hospitalId);
					storeFyDocumentNo.setHospital(hospital);
					MasDepartment department=new MasDepartment();
					department.setId(deptId);
					storeFyDocumentNo.setDepartment(department);
					storeFyDocumentNo.setAdjustmentNo("0");
					storeFyDocumentNo.setAdjustmentStartNo("0");
					storeFyDocumentNo.setBalanceNo("0");
					storeFyDocumentNo.setBooNo("0");
					storeFyDocumentNo.setBooStartNo("0");
					storeFyDocumentNo.setDefectEntryNo("0");
					storeFyDocumentNo.setDefectEntryStartNo("0");
					storeFyDocumentNo.setDemandNo("0");
					storeFyDocumentNo.setDemandStartNo("0");
					storeFyDocumentNo.setDepotIndentNo("0");
					storeFyDocumentNo.setDepotIndentStartNo("0");
					storeFyDocumentNo.setDeptConsumNo("0");
					storeFyDocumentNo.setDisposalEntryNo("0");
					storeFyDocumentNo.setDisposalEntryStartNo("0");
					storeFyDocumentNo.setGrnNo("0");
					storeFyDocumentNo.setGrnStartNo("0");
					storeFyDocumentNo.setIndentToDepotNo("0");
					storeFyDocumentNo.setIndentToDepotStartNo("0");
					storeFyDocumentNo.setInIndentNo("0");
					storeFyDocumentNo.setIndentToSocNo("0");
					storeFyDocumentNo.setIssueDeptReturnNo("0");
					storeFyDocumentNo.setIssueDeptReturnStartNo("0");
					storeFyDocumentNo.setIssueDeptStartNo("0");
					storeFyDocumentNo.setIssueInPatientNo(new Integer(0));
					storeFyDocumentNo.setIssueDeptReturnStartNo("0");
					storeFyDocumentNo.setIssueInPatientReturnNo("0");
					storeFyDocumentNo.setIssueInPatientReturnStartNo("0");
					storeFyDocumentNo.setIssueInPatientStartNo("0");
					storeFyDocumentNo.setIssueLoanoutNo("0");
					storeFyDocumentNo.setIssueOtafuNo("0");
					storeFyDocumentNo.setIssueOtafuStartNo("0");
					storeFyDocumentNo.setIssueOtherUnitsNo("0");
					storeFyDocumentNo.setIssueOtherUnitsStartNo("0");
					storeFyDocumentNo.setIssueWardNo(0);
					storeFyDocumentNo.setIsuueLoanoutStartNo("0");
					storeFyDocumentNo.setIndentToSocNo("0");
					storeFyDocumentNo.setInIndentNo("0");
					storeFyDocumentNo.setLoaninNo("0");
					storeFyDocumentNo.setLoaninStartNo("0");
					storeFyDocumentNo.setMedicineReturnNo("0");
					storeFyDocumentNo.setMmfIndentNo("0");
					storeFyDocumentNo.setMmfIndentStartNo("0");
					storeFyDocumentNo.setMmfNo("0");
					storeFyDocumentNo.setMmfStartNo("0");
					storeFyDocumentNo.setOpdIssueNo("0");
					storeFyDocumentNo.setOpdReturnNo("0");
					storeFyDocumentNo.setPatientReturnNo("0");
					storeFyDocumentNo.setPoIndentNo("0");
					storeFyDocumentNo.setPoIndentStartNo("0");
					storeFyDocumentNo.setPoNo("0");
					storeFyDocumentNo.setPoStartNo("0");
					storeFyDocumentNo.setQuotationRecNo("0");
					storeFyDocumentNo.setQuotationRecStartNo("0");
					storeFyDocumentNo.setQuotationReqNo("0");
					storeFyDocumentNo.setQuotationReqStartNo("0");
					storeFyDocumentNo.setSocIndentNo("0");
					storeFyDocumentNo.setSocIndentStartNo("0");
					storeFyDocumentNo.setTenderNo("0");
					storeFyDocumentNo.setVendorReturnNo("0");
					storeFyDocumentNo.setVendorReturnStartNo("0");
					storeFyDocumentNo.setWardReturnNo("0");
					storeFyDocumentNo.setWorkOrderNo("0");
					storeFyDocumentNo.setWorkOrderStartNo("0");

					hbt1.save(storeFyDocumentNo);

					no = getMaxNo(no);
					StoreFyDocumentNoId = storeFyDocumentNo.getId();

				
				}
				StoreBalanceM storeBalanceM = new StoreBalanceM();
				MasDepartment masDepartment=new MasDepartment();
				int cnt = 0;
				for (int j=0;j<nomenclatureList.size();j++) {
					if(!batch1.get(j).toString().equals("")){
						storeBalTBatch1List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",itemIdList.get(j))).add(Restrictions.eq("BatchNo", batch1.get(j).toString())).list();
					}
					if(!batch2.get(j).toString().equals("")){
						storeBalTBatch2List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",itemIdList.get(j))).add(Restrictions.eq("BatchNo", batch2.get(j).toString())).list();
					}
					if(!batch3.get(j).toString().equals("")){
						storeBalTBatch3List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",itemIdList.get(j))).add(Restrictions.eq("BatchNo", batch3.get(j).toString())).list();
					}
					if(!batch4.get(j).toString().equals("")){
						storeBalTBatch4List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",itemIdList.get(j))).add(Restrictions.eq("BatchNo", batch4.get(j).toString())).list();
					}
					if(!batch5.get(j).toString().equals("")){
						storeBalTBatch5List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",itemIdList.get(j))).add(Restrictions.eq("BatchNo", batch5.get(j).toString())).list();
					}
					if(!batch6.get(j).toString().equals("")){
						storeBalTBatch6List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",itemIdList.get(j))).add(Restrictions.eq("BatchNo", batch6.get(j).toString())).list();
					}
					if(!batch7.get(j).toString().equals("")){
						storeBalTBatch7List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",itemIdList.get(j))).add(Restrictions.eq("BatchNo", batch7.get(j).toString())).list();
					}
					if(!batch8.get(j).toString().equals("")){
						storeBalTBatch8List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",itemIdList.get(j))).add(Restrictions.eq("BatchNo", batch8.get(j).toString())).list();
					}
					if(!batch9.get(j).toString().equals("")){
						storeBalTBatch9List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",itemIdList.get(j))).add(Restrictions.eq("BatchNo", batch9.get(j).toString())).list();
					}
					if(!batch10.get(j).toString().equals("")){
						storeBalTBatch10List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",itemIdList.get(j))).add(Restrictions.eq("BatchNo", batch10.get(j).toString())).list();
					}

					if(storeBalTBatch1List.size()==0 && !batch1.get(j).toString().equals("")){
						cnt= cnt+1;
					}
					if(storeBalTBatch2List.size()==0 &&  !batch2.get(j).toString().equals("")){
						cnt= cnt+1;
					}
					if(storeBalTBatch3List.size()==0 && !batch3.get(j).toString().equals("")){
						cnt= cnt+1;
					}
					if(storeBalTBatch4List.size()==0 && !batch4.get(j).toString().equals("")){
						cnt= cnt+1;
					}
					if(storeBalTBatch5List.size()==0 && !batch5.get(j).toString().equals("")){
						cnt= cnt+1;
					}
					if(storeBalTBatch6List.size()==0 && !batch6.get(j).toString().equals("")){
						cnt= cnt+1;
					}
					if(storeBalTBatch7List.size()==0 && !batch7.get(j).toString().equals("")){
						cnt= cnt+1;
					}
					if(storeBalTBatch8List.size()==0 && !batch8.get(j).toString().equals("")){
						cnt= cnt+1;
					}
					if(storeBalTBatch9List.size()==0 && !batch9.get(j).toString().equals("")){
						cnt= cnt+1;
					}
					if(storeBalTBatch10List.size()==0 && !batch10.get(j).toString().equals("")){
						cnt= cnt+1;
					}
				}
			//	if(storeBalanceTList.size() < (itemIdList.size()*cnt)){
				if(cnt > 0){
					//storeBalanceM.setApprovedBy(approvedBy)
					storeBalanceM.setBalanceDate(HMSUtil.convertStringTypeDateToDateType(date));
					masDepartment.setId(deptId);
					storeBalanceM.setDepartment(masDepartment);
					masHospital.setId(hospitalId);
					storeBalanceM.setHospital(masHospital);
					storeBalanceM.setLastChgBy(userName);
					storeBalanceM.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(date));
					storeBalanceM.setLastChgTime(time);
					storeBalanceM.setStatus("o");
					storeBalanceM.setBalanceNo(no);
					hbt1.save(storeBalanceM);
				}
				StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate().load(StoreFyDocumentNo.class, StoreFyDocumentNoId);
				storeFyDocumentNo.setBalanceNo(no);
				hbt1.update(storeFyDocumentNo);
				
				
				Pattern pt2 = Pattern.compile("\\\\");
				Pattern pt3 = Pattern.compile("^([0-2]{0,1}\\d|3[01])(/|\\\\|-)(0{0,1}\\d|1[0-2])(/|\\\\|-)[12]{0,1}(\\d{3}|\\d{2})$");
			
				
				for (i=0;i<nomenclatureList.size();i++) {
					pvmsNo=pvmsNoList.get(i);
					itemId = (Integer)itemIdList.get(i);
					/*if(storeBalanceTList.size()>0){
			msg = "Record already Exist";
		}else{*/
					if(itemId!=0 && (!batch1.get(i).toString().equals("") || !batch2.get(i).toString().equals("") || !batch3.get(i).toString().equals("") || !batch4.get(i).toString().equals("")
							 || !batch5.get(i).toString().equals("") || !batch6.get(i).toString().equals("") || !batch7.get(i).toString().equals("")
							 || !batch8.get(i).toString().equals("") || !batch9.get(i).toString().equals("") || !batch10.get(i).toString().equals(""))){
						List<StoreBalanceT> storeBalTBat1List = new ArrayList<StoreBalanceT>();
						List<StoreBalanceT> storeBalTBat2List = new ArrayList<StoreBalanceT>();
						List<StoreBalanceT> storeBalTBat3List = new ArrayList<StoreBalanceT>();
						List<StoreBalanceT> storeBalTBat4List = new ArrayList<StoreBalanceT>();
						List<StoreBalanceT> storeBalTBat5List = new ArrayList<StoreBalanceT>();
						List<StoreBalanceT> storeBalTBat6List = new ArrayList<StoreBalanceT>();
						List<StoreBalanceT> storeBalTBat7List = new ArrayList<StoreBalanceT>();
						List<StoreBalanceT> storeBalTBat8List = new ArrayList<StoreBalanceT>();
						List<StoreBalanceT> storeBalTBat9List = new ArrayList<StoreBalanceT>();
						List<StoreBalanceT> storeBalTBat10List = new ArrayList<StoreBalanceT>();
						if(!batch1.get(i).toString().equals("")){
							storeBalTBat1List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",itemIdList.get(i))).add(Restrictions.eq("BatchNo", batch1.get(i).toString())).list();
						}
						if(!batch2.get(i).toString().equals("")){
							storeBalTBat2List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",itemIdList.get(i))).add(Restrictions.eq("BatchNo", batch2.get(i).toString())).list();
						}
						if(!batch3.get(i).toString().equals("")){
							storeBalTBat3List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",itemIdList.get(i))).add(Restrictions.eq("BatchNo", batch3.get(i).toString())).list();
						}
						if(!batch4.get(i).toString().equals("")){
							storeBalTBat4List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",itemIdList.get(i))).add(Restrictions.eq("BatchNo", batch4.get(i).toString())).list();
						}
						if(!batch5.get(i).toString().equals("")){
							storeBalTBat5List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",itemIdList.get(i))).add(Restrictions.eq("BatchNo", batch5.get(i).toString())).list();
						}
						if(!batch6.get(i).toString().equals("")){
							storeBalTBat6List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",itemIdList.get(i))).add(Restrictions.eq("BatchNo", batch6.get(i).toString())).list();
						}
						if(!batch7.get(i).toString().equals("")){
							storeBalTBat7List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",itemIdList.get(i))).add(Restrictions.eq("BatchNo", batch7.get(i).toString())).list();
						}
						if(!batch8.get(i).toString().equals("")){
							storeBalTBat8List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",itemIdList.get(i))).add(Restrictions.eq("BatchNo", batch8.get(i).toString())).list();
						}
						if(!batch9.get(i).toString().equals("")){
							storeBalTBat9List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",itemIdList.get(i))).add(Restrictions.eq("BatchNo", batch9.get(i).toString())).list();
						}
						if(!batch10.get(i).toString().equals("")){
							storeBalTBat10List = session.createCriteria(StoreBalanceT.class).createAlias("StoreBalanceM", "sbm").add(Restrictions.eq("sbm.Hospital.Id", hospitalId)).add(Restrictions.eq("sbm.Department.Id", deptId)).add(Restrictions.eq("Item.Id",itemIdList.get(i))).add(Restrictions.eq("BatchNo", batch10.get(i).toString())).list();
						}


						MasStoreItem storeItem = new MasStoreItem();
						storeItem.setId(itemId);
						SimpleDateFormat formatter = new SimpleDateFormat("dd/mm/yyyy");
						if(storeBalTBat1List.size()==0 && !batch1.get(i).toString().equals("")){
							StoreBalanceT storeBalanceT = new StoreBalanceT();
							StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();

							storeBalanceT.setItem(storeItem);
							storeBalanceT.setBatchNo(batch1.get(i).toString());
							storeItemBatchStock.setBatchNo(batch1.get(i).toString());
							storeBalanceT.setSrNo(i);
							if(!qty1.get(i).toString().equals("")){
								storeBalanceT.setQty(new BigDecimal(qty1.get(i).toString()));
								storeItemBatchStock.setOpeningBalanceQty(new BigDecimal(qty1.get(i).toString()));
								storeItemBatchStock.setClosingStock(new BigDecimal(qty1.get(i).toString()));
								storeItemBatchStock.setBatchNo(batch1.get(i).toString());
							}
							if(!expiryDate1.get(i).toString().equals("")){
									
								System.out.println("expiryDate1.get(i).toString()"+expiryDate1.get(i).toString());
								String expDate="";
								//String formattedDate = formatter.format(expiryDate1.get(i));
								/*String[] str = expiryDate1.get(i).toString().split(" ");
								if(str.length>2){
									if(str[0]!=null){
										expDate=str[0].toString();
									}
									if(str[1]!=null){
										expDate=expDate+"/"+str[1].toString();
									}
									if(str[2]!=null){
										expDate=expDate+"/"+str[2].toString();
									}
								}*/
								Matcher mt2 = pt3.matcher(expiryDate1.get(i).toString().trim());
								int count = 0;
								while(mt2.find()){count++;}
								if(count == 1)
								{
									String tmp = expiryDate1.get(i).toString().trim();
									System.out.println("tmp="+tmp);
									Matcher mttmp = pt2.matcher(tmp);
									tmp = mttmp.replaceAll("/");
									SimpleDateFormat formatterIn;
									if(tmp.split("/")[2].length() == 2)
										formatterIn = new SimpleDateFormat("dd/MM/yy");
									else
										formatterIn = new SimpleDateFormat("dd/MM/yyyy");
									SimpleDateFormat formatterOut = new SimpleDateFormat("dd/MM/yyyy");
									expDate = formatterOut.format(formatterIn.parse(tmp));
								}
								System.out.println("expDate="+expDate);
								if(expDate!=""){
									storeBalanceT.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
									storeItemBatchStock.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
								}else{
									storeBalanceT.setExpiryDate(null);
									storeItemBatchStock.setExpiryDate(null);
								}
							}
							storeBalanceT.setStoreBalanceM(storeBalanceM);
							hbt1.save(storeBalanceT);
							storeItemBatchStock.setHospital(masHospital);
							storeItemBatchStock.setItem(storeItem);
							storeItemBatchStock.setDepartment(masDepartment);
							storeItemBatchStock.setOpeningBalanceDate(HMSUtil.convertStringTypeDateToDateType(date));
							hbt1.save(storeItemBatchStock);
						}

						if(storeBalTBat2List.size()==0 && !batch2.get(i).toString().equals("")){
							StoreBalanceT storeBalanceT = new StoreBalanceT();
							StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
							storeBalanceT.setItem(storeItem);
							storeBalanceT.setBatchNo(batch2.get(i).toString());
							storeItemBatchStock.setBatchNo(batch2.get(i).toString());
							storeBalanceT.setSrNo(i);
							if(!qty2.get(i).toString().equals("")){
								storeBalanceT.setQty(new BigDecimal(qty2.get(i).toString()));
								storeItemBatchStock.setOpeningBalanceQty(new BigDecimal(qty2.get(i).toString()));
								storeItemBatchStock.setClosingStock(new BigDecimal(qty2.get(i).toString()));
							}
							if(!expiryDate2.get(i).toString().equals("")){
								String expDate="";
								/*String[] str = expiryDate2.get(i).toString().split(" ");
								if(str.length>2){
									if(str[0]!=null){
										expDate=str[0].toString();
									}
									if(str[1]!=null){
										expDate=expDate+"/"+str[1].toString();
									}
									if(str[2]!=null){
										expDate=expDate+"/"+str[2].toString();
									}
								}*/
								Matcher mt2 = pt3.matcher(expiryDate2.get(i).toString().trim());
								int count = 0;
								while(mt2.find()){count++;}
								if(count == 1)
								{
									String tmp = expiryDate2.get(i).toString().trim();
									Matcher mttmp = pt2.matcher(tmp);
									tmp = mttmp.replaceAll("/");
									SimpleDateFormat formatterIn;
									if(tmp.split("/")[2].length() == 2)
										formatterIn = new SimpleDateFormat("dd/MM/yy");
									else
										formatterIn = new SimpleDateFormat("dd/MM/yyyy");
									SimpleDateFormat formatterOut = new SimpleDateFormat("dd/MM/yyyy");
									expDate = formatterOut.format(formatterIn.parse(tmp));
								}
								if(expDate!=""){
									storeBalanceT.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
									storeItemBatchStock.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
								}else{
									storeBalanceT.setExpiryDate(null);
									storeItemBatchStock.setExpiryDate(null);
								}
							}
							storeBalanceT.setStoreBalanceM(storeBalanceM);
							hbt1.save(storeBalanceT);
							storeItemBatchStock.setHospital(masHospital);
							storeItemBatchStock.setItem(storeItem);
							storeItemBatchStock.setDepartment(masDepartment);
							storeItemBatchStock.setOpeningBalanceDate(HMSUtil.convertStringTypeDateToDateType(date));
							hbt1.save(storeItemBatchStock);
						}

						if(storeBalTBat3List.size()==0 && !batch3.get(i).toString().equals("")){
							StoreBalanceT storeBalanceT = new StoreBalanceT();
							StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
							storeBalanceT.setItem(storeItem);
							storeBalanceT.setBatchNo(batch3.get(i).toString());
							storeItemBatchStock.setBatchNo(batch3.get(i).toString());
							storeBalanceT.setSrNo(i);
							if(!qty3.get(i).toString().equals("")){
								storeBalanceT.setQty(new BigDecimal(qty3.get(i).toString()));
								storeItemBatchStock.setOpeningBalanceQty(new BigDecimal(qty3.get(i).toString()));
								storeItemBatchStock.setClosingStock(new BigDecimal(qty3.get(i).toString()));
							}
							if(!expiryDate3.get(i).toString().equals("")){
								String expDate="";
								//String formattedDate = formatter.format(expiryDate3.get(i).toString());
								/*String[] str = expiryDate3.get(i).toString().split(" ");
								if(str.length>2){
									if(str[0]!=null){
										expDate=str[0].toString();
									}
									if(str[1]!=null){
										expDate=expDate+"/"+str[1].toString();
									}
									if(str[2]!=null){
										expDate=expDate+"/"+str[2].toString();
									}
								}*/
								Matcher mt2 = pt3.matcher(expiryDate3.get(i).toString().trim());
								int count = 0;
								while(mt2.find()){count++;}
								if(count == 1)
								{
									String tmp = expiryDate3.get(i).toString().trim();
									Matcher mttmp = pt2.matcher(tmp);
									tmp = mttmp.replaceAll("/");
									SimpleDateFormat formatterIn;
									if(tmp.split("/")[2].length() == 2)
										formatterIn = new SimpleDateFormat("dd/MM/yy");
									else
										formatterIn = new SimpleDateFormat("dd/MM/yyyy");
									SimpleDateFormat formatterOut = new SimpleDateFormat("dd/MM/yyyy");
									expDate = formatterOut.format(formatterIn.parse(tmp));
								}
								if(expDate!=""){
									storeBalanceT.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
									storeItemBatchStock.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
								}else{
									storeBalanceT.setExpiryDate(null);
									storeItemBatchStock.setExpiryDate(null);
								}
							}
							storeBalanceT.setStoreBalanceM(storeBalanceM);
							hbt1.save(storeBalanceT);
							storeItemBatchStock.setHospital(masHospital);
							storeItemBatchStock.setItem(storeItem);
							storeItemBatchStock.setDepartment(masDepartment);
							storeItemBatchStock.setOpeningBalanceDate(HMSUtil.convertStringTypeDateToDateType(date));
							hbt1.save(storeItemBatchStock);
						}

						if(storeBalTBat4List.size()==0 && !batch4.get(i).toString().equals("")){
							StoreBalanceT storeBalanceT = new StoreBalanceT();
							StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
							storeBalanceT.setItem(storeItem);
							storeBalanceT.setBatchNo(batch4.get(i).toString());
							storeItemBatchStock.setBatchNo(batch4.get(i).toString());
							storeBalanceT.setSrNo(i);
							if(!qty4.get(i).toString().equals("")){
								storeBalanceT.setQty(new BigDecimal(qty4.get(i).toString()));
								storeItemBatchStock.setOpeningBalanceQty(new BigDecimal(qty4.get(i).toString()));
								storeItemBatchStock.setClosingStock(new BigDecimal(qty4.get(i).toString()));
							}
							if(!expiryDate4.get(i).toString().equals("")){
								String expDate="";
								//String formattedDate = formatter.format(expiryDate4.get(i).toString());
								/*String[] str = expiryDate4.get(i).toString().split(" ");
								if(str.length>2){
									if(str[0]!=null){
										expDate=str[0].toString();
									}
									if(str[1]!=null){
										expDate=expDate+"/"+str[1].toString();
									}
									if(str[2]!=null){
										expDate=expDate+"/"+str[2].toString();
									}
								}*/
								Matcher mt2 = pt3.matcher(expiryDate4.get(i).toString().trim());
								int count = 0;
								while(mt2.find()){count++;}
								if(count == 1)
								{
									String tmp = expiryDate4.get(i).toString().trim();
									Matcher mttmp = pt2.matcher(tmp);
									tmp = mttmp.replaceAll("/");
									SimpleDateFormat formatterIn;
									if(tmp.split("/")[2].length() == 2)
										formatterIn = new SimpleDateFormat("dd/MM/yy");
									else
										formatterIn = new SimpleDateFormat("dd/MM/yyyy");
									SimpleDateFormat formatterOut = new SimpleDateFormat("dd/MM/yyyy");
									expDate = formatterOut.format(formatterIn.parse(tmp));
								}
								if(expDate!=""){
									storeBalanceT.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
									storeItemBatchStock.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
								}else{
									storeBalanceT.setExpiryDate(null);
									storeItemBatchStock.setExpiryDate(null);
								}
							}
							storeBalanceT.setStoreBalanceM(storeBalanceM);
							hbt1.save(storeBalanceT);
							storeItemBatchStock.setHospital(masHospital);
							storeItemBatchStock.setItem(storeItem);
							storeItemBatchStock.setDepartment(masDepartment);
							storeItemBatchStock.setOpeningBalanceDate(HMSUtil.convertStringTypeDateToDateType(date));
							hbt1.save(storeItemBatchStock);
						}

						if(storeBalTBat5List.size()==0 && !batch5.get(i).toString().equals("")){
							StoreBalanceT storeBalanceT = new StoreBalanceT();
							StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
							storeBalanceT.setItem(storeItem);
							storeBalanceT.setBatchNo(batch5.get(i).toString());
							storeItemBatchStock.setBatchNo(batch5.get(i).toString());
							storeBalanceT.setSrNo(i);
							if(!qty5.get(i).toString().equals("")){
								storeBalanceT.setQty(new BigDecimal(qty5.get(i).toString()));
								storeItemBatchStock.setOpeningBalanceQty(new BigDecimal(qty5.get(i).toString()));
								storeItemBatchStock.setClosingStock(new BigDecimal(qty5.get(i).toString()));
							}
							if(!expiryDate5.get(i).toString().equals("")){
								String expDate="";
								//String formattedDate = formatter.format(expiryDate5.get(i).toString());
							/*	String[] str = expiryDate5.get(i).toString().split(" ");
								if(str.length>2){
									if(str[0]!=null){
										expDate=str[0].toString();
									}
									if(str[1]!=null){
										expDate=expDate+"/"+str[1].toString();
									}
									if(str[2]!=null){
										expDate=expDate+"/"+str[2].toString();
									}
								}*/
								Matcher mt2 = pt3.matcher(expiryDate5.get(i).toString().trim());
								int count = 0;
								while(mt2.find()){count++;}
								if(count == 1)
								{
									String tmp = expiryDate5.get(i).toString().trim();
									Matcher mttmp = pt2.matcher(tmp);
									tmp = mttmp.replaceAll("/");
									SimpleDateFormat formatterIn;
									if(tmp.split("/")[2].length() == 2)
										formatterIn = new SimpleDateFormat("dd/MM/yy");
									else
										formatterIn = new SimpleDateFormat("dd/MM/yyyy");
									SimpleDateFormat formatterOut = new SimpleDateFormat("dd/MM/yyyy");
									expDate = formatterOut.format(formatterIn.parse(tmp));
								}
								if(expDate!=""){
									storeBalanceT.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
									storeItemBatchStock.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
								}else{
									storeBalanceT.setExpiryDate(null);
									storeItemBatchStock.setExpiryDate(null);
								}
							}
							storeBalanceT.setStoreBalanceM(storeBalanceM);
							hbt1.save(storeBalanceT);
							storeItemBatchStock.setHospital(masHospital);
							storeItemBatchStock.setItem(storeItem);
							storeItemBatchStock.setDepartment(masDepartment);
							storeItemBatchStock.setOpeningBalanceDate(HMSUtil.convertStringTypeDateToDateType(date));
							hbt1.save(storeItemBatchStock);
						}

						if(storeBalTBat6List.size()==0 && !batch6.get(i).toString().equals("")){
							StoreBalanceT storeBalanceT = new StoreBalanceT();
							StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
							storeBalanceT.setItem(storeItem);
							storeBalanceT.setBatchNo(batch6.get(i).toString());
							storeItemBatchStock.setBatchNo(batch6.get(i).toString());
							storeBalanceT.setSrNo(i);
							if(!qty6.get(i).toString().equals("")){
								storeBalanceT.setQty(new BigDecimal(qty6.get(i).toString()));
								storeItemBatchStock.setOpeningBalanceQty(new BigDecimal(qty6.get(i).toString()));
								storeItemBatchStock.setClosingStock(new BigDecimal(qty6.get(i).toString()));
							}
							if(!expiryDate6.get(i).toString().equals("")){
								String expDate="";
								//String formattedDate = formatter.format(expiryDate6.get(i).toString());
								/*String[] str = expiryDate6.get(i).toString().split(" ");
								if(str.length>2){
									if(str[0]!=null){
										expDate=str[0].toString();
									}
									if(str[1]!=null){
										expDate=expDate+"/"+str[1].toString();
									}
									if(str[2]!=null){
										expDate=expDate+"/"+str[2].toString();
									}
								}*/
								Matcher mt2 = pt3.matcher(expiryDate6.get(i).toString().trim());
								int count = 0;
								while(mt2.find()){count++;}
								if(count == 1)
								{
									String tmp = expiryDate6.get(i).toString().trim();
									Matcher mttmp = pt2.matcher(tmp);
									tmp = mttmp.replaceAll("/");
									SimpleDateFormat formatterIn;
									if(tmp.split("/")[2].length() == 2)
										formatterIn = new SimpleDateFormat("dd/MM/yy");
									else
										formatterIn = new SimpleDateFormat("dd/MM/yyyy");
									SimpleDateFormat formatterOut = new SimpleDateFormat("dd/MM/yyyy");
									expDate = formatterOut.format(formatterIn.parse(tmp));
								}
								if(expDate!=""){
									storeBalanceT.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
									storeItemBatchStock.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
								}else{
									storeBalanceT.setExpiryDate(null);
									storeItemBatchStock.setExpiryDate(null);
								}
							}
							storeBalanceT.setStoreBalanceM(storeBalanceM);
							hbt1.save(storeBalanceT);
							storeItemBatchStock.setHospital(masHospital);
							storeItemBatchStock.setItem(storeItem);
							storeItemBatchStock.setDepartment(masDepartment);
							storeItemBatchStock.setOpeningBalanceDate(HMSUtil.convertStringTypeDateToDateType(date));
							hbt1.save(storeItemBatchStock);
						}


						if(storeBalTBat7List.size()==0 && !batch7.get(i).toString().equals("")){
							StoreBalanceT storeBalanceT = new StoreBalanceT();
							StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
							storeBalanceT.setItem(storeItem);
							storeBalanceT.setBatchNo(batch7.get(i).toString());
							storeItemBatchStock.setBatchNo(batch7.get(i).toString());
							storeBalanceT.setSrNo(i);
							if(!qty7.get(i).toString().equals("")){
								storeBalanceT.setQty(new BigDecimal(qty7.get(i).toString()));
								storeItemBatchStock.setOpeningBalanceQty(new BigDecimal(qty7.get(i).toString()));
								storeItemBatchStock.setClosingStock(new BigDecimal(qty7.get(i).toString()));
							}
							if(!expiryDate7.get(i).toString().equals("")){
								String expDate="";
								//String formattedDate = formatter.format(expiryDate7.get(i).toString());
							/*	String[] str = expiryDate7.get(i).toString().split(" ");
								if(str.length>2){
									if(str[0]!=null){
										expDate=str[0].toString();
									}
									if(str[1]!=null){
										expDate=expDate+"/"+str[1].toString();
									}
									if(str[2]!=null){
										expDate=expDate+"/"+str[2].toString();
									}
								}*/
								Matcher mt2 = pt3.matcher(expiryDate7.get(i).toString().trim());
								int count = 0;
								while(mt2.find()){count++;}
								if(count == 1)
								{
									String tmp = expiryDate7.get(i).toString().trim();
									Matcher mttmp = pt2.matcher(tmp);
									tmp = mttmp.replaceAll("/");
									SimpleDateFormat formatterIn;
									if(tmp.split("/")[2].length() == 2)
										formatterIn = new SimpleDateFormat("dd/MM/yy");
									else
										formatterIn = new SimpleDateFormat("dd/MM/yyyy");
									SimpleDateFormat formatterOut = new SimpleDateFormat("dd/MM/yyyy");
									expDate = formatterOut.format(formatterIn.parse(tmp));
								}
								if(expDate!=""){
									storeBalanceT.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
									storeItemBatchStock.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
								}else{
									storeBalanceT.setExpiryDate(null);
									storeItemBatchStock.setExpiryDate(null);
								}
							}
							storeBalanceT.setStoreBalanceM(storeBalanceM);
							hbt1.save(storeBalanceT);
							storeItemBatchStock.setHospital(masHospital);
							storeItemBatchStock.setItem(storeItem);
							storeItemBatchStock.setDepartment(masDepartment);
							storeItemBatchStock.setOpeningBalanceDate(HMSUtil.convertStringTypeDateToDateType(date));
							hbt1.save(storeItemBatchStock);
						}

						if(storeBalTBat8List.size()==0 && !batch8.get(i).toString().equals("")){
							StoreBalanceT storeBalanceT = new StoreBalanceT();
							StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
							storeBalanceT.setItem(storeItem);
							storeBalanceT.setBatchNo(batch8.get(i).toString());
							storeItemBatchStock.setBatchNo(batch8.get(i).toString());
							storeBalanceT.setSrNo(i);
							if(!qty8.get(i).toString().equals("")){
								storeBalanceT.setQty(new BigDecimal(qty8.get(i).toString()));
								storeItemBatchStock.setOpeningBalanceQty(new BigDecimal(qty8.get(i).toString()));
								storeItemBatchStock.setClosingStock(new BigDecimal(qty8.get(i).toString()));
							}
							if(!expiryDate8.get(i).toString().equals("")){
								String expDate="";
								//String formattedDate = formatter.format(expiryDate8.get(i).toString());
								/*String[] str = expiryDate8.get(i).toString().split(" ");
								if(str.length>2){
									if(str[0]!=null){
										expDate=str[0].toString();
									}
									if(str[1]!=null){
										expDate=expDate+"/"+str[1].toString();
									}
									if(str[2]!=null){
										expDate=expDate+"/"+str[2].toString();
									}
								}*/
								Matcher mt2 = pt3.matcher(expiryDate8.get(i).toString().trim());
								int count = 0;
								while(mt2.find()){count++;}
								if(count == 1)
								{
									String tmp = expiryDate8.get(i).toString().trim();
									Matcher mttmp = pt2.matcher(tmp);
									tmp = mttmp.replaceAll("/");
									SimpleDateFormat formatterIn;
									if(tmp.split("/")[2].length() == 2)
										formatterIn = new SimpleDateFormat("dd/MM/yy");
									else
										formatterIn = new SimpleDateFormat("dd/MM/yyyy");
									SimpleDateFormat formatterOut = new SimpleDateFormat("dd/MM/yyyy");
									expDate = formatterOut.format(formatterIn.parse(tmp));
								}
								if(expDate!=""){
									storeBalanceT.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
									storeItemBatchStock.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
								}else{
									storeBalanceT.setExpiryDate(null);
									storeItemBatchStock.setExpiryDate(null);
								}
							}
							storeBalanceT.setStoreBalanceM(storeBalanceM);
							hbt1.save(storeBalanceT);
							storeItemBatchStock.setHospital(masHospital);
							storeItemBatchStock.setItem(storeItem);
							storeItemBatchStock.setDepartment(masDepartment);
							storeItemBatchStock.setOpeningBalanceDate(HMSUtil.convertStringTypeDateToDateType(date));
							hbt1.save(storeItemBatchStock);
						}

						if(storeBalTBat9List.size()==0 && !batch9.get(i).toString().equals("")){
							StoreBalanceT storeBalanceT = new StoreBalanceT();
							StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
							storeBalanceT.setItem(storeItem);
							storeBalanceT.setBatchNo(batch9.get(i).toString());
							storeItemBatchStock.setBatchNo(batch9.get(i).toString());
							storeBalanceT.setSrNo(i);
							if(!qty9.get(i).toString().equals("")){
								storeBalanceT.setQty(new BigDecimal(qty9.get(i).toString()));
								storeItemBatchStock.setOpeningBalanceQty(new BigDecimal(qty9.get(i).toString()));
								storeItemBatchStock.setClosingStock(new BigDecimal(qty9.get(i).toString()));
							}
							if(!expiryDate9.get(i).toString().equals("")){
								String expDate="";
								//String formattedDate = formatter.format(expiryDate9.get(i).toString());
								/*String[] str = expiryDate9.get(i).toString().split(" ");
								if(str.length>2){
									if(str[0]!=null){
										expDate=str[0].toString();
									}
									if(str[1]!=null){
										expDate=expDate+"/"+str[1].toString();
									}
									if(str[2]!=null){
										expDate=expDate+"/"+str[2].toString();
									}
								}*/
								Matcher mt2 = pt3.matcher(expiryDate9.get(i).toString().trim());
								int count = 0;
								while(mt2.find()){count++;}
								if(count == 1)
								{
									String tmp = expiryDate9.get(i).toString().trim();
									Matcher mttmp = pt2.matcher(tmp);
									tmp = mttmp.replaceAll("/");
									SimpleDateFormat formatterIn;
									if(tmp.split("/")[2].length() == 2)
										formatterIn = new SimpleDateFormat("dd/MM/yy");
									else
										formatterIn = new SimpleDateFormat("dd/MM/yyyy");
									SimpleDateFormat formatterOut = new SimpleDateFormat("dd/MM/yyyy");
									expDate = formatterOut.format(formatterIn.parse(tmp));
								}
								if(expDate!=""){
									storeBalanceT.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
									storeItemBatchStock.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
								}else{
									storeBalanceT.setExpiryDate(null);
									storeItemBatchStock.setExpiryDate(null);
								}
							}
							storeBalanceT.setStoreBalanceM(storeBalanceM);
							hbt1.save(storeBalanceT);
							storeItemBatchStock.setHospital(masHospital);
							storeItemBatchStock.setItem(storeItem);
							storeItemBatchStock.setDepartment(masDepartment);
							storeItemBatchStock.setOpeningBalanceDate(HMSUtil.convertStringTypeDateToDateType(date));
							hbt1.save(storeItemBatchStock);
						}

						if(storeBalTBat10List.size()==0 && !batch10.get(i).toString().equals("")){
							StoreBalanceT storeBalanceT = new StoreBalanceT();
							StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
							storeBalanceT.setItem(storeItem);
							storeBalanceT.setBatchNo(batch10.get(i).toString());
							storeItemBatchStock.setBatchNo(batch10.get(i).toString());
							storeBalanceT.setSrNo(i);
							if(!qty10.get(i).toString().equals("")){
								storeBalanceT.setQty(new BigDecimal(qty10.get(i).toString()));
								storeItemBatchStock.setOpeningBalanceQty(new BigDecimal(qty10.get(i).toString()));
								storeItemBatchStock.setClosingStock(new BigDecimal(qty10.get(i).toString()));
							}
							if(!expiryDate10.get(i).toString().equals("")){
								String expDate="";
								//String formattedDate = formatter.format(expiryDate9.get(i).toString());
								/*String[] str = expiryDate10.get(i).toString().split(" ");
								if(str.length>2){
									if(str[0]!=null){
										expDate=str[0].toString();
									}
									if(str[1]!=null){
										expDate=expDate+"/"+str[1].toString();
									}
									if(str[2]!=null){
										expDate=expDate+"/"+str[2].toString();
									}
								}*/
								Matcher mt2 = pt3.matcher(expiryDate10.get(i).toString().trim());
								int count = 0;
								while(mt2.find()){count++;}
								if(count == 1)
								{
									String tmp = expiryDate10.get(i).toString().trim();
									Matcher mttmp = pt2.matcher(tmp);
									tmp = mttmp.replaceAll("/");
									SimpleDateFormat formatterIn;
									if(tmp.split("/")[2].length() == 2)
										formatterIn = new SimpleDateFormat("dd/MM/yy");
									else
										formatterIn = new SimpleDateFormat("dd/MM/yyyy");
									SimpleDateFormat formatterOut = new SimpleDateFormat("dd/MM/yyyy");
									expDate = formatterOut.format(formatterIn.parse(tmp));
								}
								if(expDate!=""){
									storeBalanceT.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
									storeItemBatchStock.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
								}else{
									storeBalanceT.setExpiryDate(null);
									storeItemBatchStock.setExpiryDate(null);
								}
							}
							storeBalanceT.setStoreBalanceM(storeBalanceM);
							hbt1.save(storeBalanceT);
							storeItemBatchStock.setHospital(masHospital);
							storeItemBatchStock.setItem(storeItem);
							storeItemBatchStock.setDepartment(masDepartment);
							storeItemBatchStock.setOpeningBalanceDate(HMSUtil.convertStringTypeDateToDateType(date));
							hbt1.save(storeItemBatchStock);
						}
						succesfullyAdded = true;
						/******************** Saving the Record into Table mas_store_item *********************/
						//	}
					}
				}
			}
			/*if(storeBalTBatch1List.size()>0 && storeBalTBatch2List.size()>0 && storeBalTBatch3List.size()>0 && storeBalTBatch4List.size()>0 && storeBalTBatch5List.size()>0 && storeBalTBatch6List.size()>0 && storeBalTBatch7List.size()>0 && storeBalTBatch8List.size()>0 && storeBalTBatch9List.size()>0 && storeBalTBatch10List.size()>0 ){
			msg = " Some Record Already Exist..";
		}else{*/
			msg = "Record Added Sucessfully..";
			//	}

			tx.commit();
		}catch (Exception e) {
			tx.rollback();
			e.printStackTrace();
		}
		departmentList = session.createCriteria(MasDepartment.class).add(Restrictions.eq("Status", "y")).addOrder(Order.asc("DepartmentName")).list();

		map.put("succesfullyAdded", succesfullyAdded);
		map.put("time", time);
		map.put("departmentList", departmentList);
		map.put("msg", msg);
		return map;
	}

	@Override
	public Map<String, Object> updateMmfDepartmentEntry(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Transaction tx=null;
		boolean succesfullyUpdated = false;
		
		Vector storeMmfTIds = box.getVector("storeMmfDepartmentTId");
		Vector qtymmf = box.getVector("qtymmf");
		Session session = (Session)getSession();
		 try {
			 tx= session.beginTransaction();
			if(storeMmfTIds.size() > 0){
				 for(int i=0;i<storeMmfTIds.size();i++){
					 StoreMmfDepartmentT storeMmfDepartmentT = (StoreMmfDepartmentT)hbt.load(StoreMmfDepartmentT.class,Integer.parseInt(storeMmfTIds.get(i).toString()));
					 storeMmfDepartmentT.setMmfInQty(new BigDecimal(qtymmf.get(i).toString()));
					 storeMmfDepartmentT.setCurrYearMmf(new BigDecimal(qtymmf.get(i).toString()));
					 hbt.update(storeMmfDepartmentT);
				 }
			 }
			tx.commit();
			succesfullyUpdated = true;
		} catch (Exception e) {
			if(tx!=null)
				tx.rollback();
			e.printStackTrace();
		}
		map.put("succesfullyUpdated", succesfullyUpdated);
		return map;
	}

	

	@Override
	public Map<String, Object> getItemDetailsToUpdate(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreItemBatchStock> batchWiseList = new ArrayList<StoreItemBatchStock>();
		Session session = (Session)getSession();
		int hospitalId = box.getInt("hospitalId");
		int deptId = box.getInt("deptId");
		String pvmsNo = box.getString("pvmsNo");
		Criteria crit = null;
		
		crit = session.createCriteria(StoreItemBatchStock.class).createAlias("Item", "item").add(Restrictions.eq("item.PvmsNo", pvmsNo).ignoreCase()).add(Restrictions.eq("Hospital.Id", hospitalId)).add(Restrictions.eq("Department.Id", deptId));
		if(box.getInt("batchId")!=0){
			crit = crit.add(Restrictions.eq("Id", box.getInt("batchId")));
		}
		
		batchWiseList = crit.list();
		map.put("batchWiseList", batchWiseList);
		return map;
	}

	@Override
	public Map<String, Object> updateBatchAndExpiryDate(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Transaction tx=null;
		boolean succesfullyUpdated = false;
		int counter = box.getInt("counter");
		Session session = (Session)getSession();
		try {
			tx= session.beginTransaction();
			if(counter >0 ){
				for(int i = 1;i<=counter;i++){
					StoreItemBatchStock batchStock = (StoreItemBatchStock)hbt.load(StoreItemBatchStock.class, box.getInt("batchId"+i));
					batchStock.setBatchNo(box.getString("batchNo"+i));
					if(!box.getString("expiryDate"+i).equals(""))
						batchStock.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(box.getString("expiryDate"+i)));
					hbt.update(batchStock);
				}
			}
			tx.commit();
			succesfullyUpdated = true;
		} catch (Exception e) {
			if(tx!=null)
				tx.rollback();
			e.printStackTrace();
		}
		map.put("succesfullyUpdated", succesfullyUpdated);
		return map;
	}
	public Map<String, Object> getItemBatch(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreItemBatchStock> batchList = new ArrayList<StoreItemBatchStock>();
		int deptId = box.getInt("deptId");
		int itemId =  box.getInt("itemId");
		Session session = (Session)getSession();
		batchList = session.createCriteria(StoreItemBatchStock.class).createAlias("Item", "item").add(Restrictions.eq("item.PvmsNo", box.getString("pvmsNo")))
		  				.createAlias("Department", "dept").add(Restrictions.eq("dept.Id", deptId)).add(Restrictions.eq("Hospital.Id", box.getInt("hospitalId"))).list();
		map.put("batchList", batchList);
		return map;
	}

	@Override
	public Map<String, Object> generateExcelForMmf(Box box) {
		String hospitalName = null;
	    int hospitalId=0;
	    int deptId=0;
		String deptName = null;
		String docId="";
		 Map<String, Object> dataMap = new HashMap<String, Object>();
		Session session = getSession();
	    List<StoreMmfDepartmentT> mmfDetailsList=new ArrayList<StoreMmfDepartmentT>();
    	hospitalName = box.getString("hospitalName");
    	hospitalId = box.getInt("hospitalId");
    	deptName = box.getString("deptName");
    	deptId = box.getInt("deptId");
    	docId=box.getString("docId");

    	/*String qry="select store_mmf_department_t.mmf_in_qty as qty, store_mmf_department_t.remarks as remarks," +
    			" mas_store_item.pvms_no as pvms_no,mas_store_item.nomenclature as nomenclature,msu.unit_name as unit," +
    			" (mas_employee.first_name ||' '||mas_employee.last_name)as approved_by, mas_department.department_name as department_name," +
    			" store_mmf_department_t.curr_year_mmf as curr_year_mmf,store_mmf_department_m.id as department_m_id,store_mmf_department_m.doc_no as doc_no," +
    			" store_mmf_department_m.remarks as store_mmf_department_m_remarks,h.hospital_name,store_mmf_department_m.mmf_for_the_year as mmf_for_the_year" +
    			" from " +
    			" store_mmf_department_t  store_mmf_department_t left outer join mas_store_item  mas_store_item on store_mmf_department_t.item_id = mas_store_item.item_id" +
    			" left outer join mas_store_item_conversion  mas_store_item_conversion on mas_store_item.item_conversion_id = mas_store_item_conversion.item_conversion_id" +
    			" left outer join mas_store_unit msu on msu.unit_id=mas_store_item_conversion.purchase_unit_id" +
    			" right outer join store_mmf_department_m  store_mmf_department_m on store_mmf_department_t.store_mmf_department_m_id = store_mmf_department_m.id" +
    			" left outer join mas_department  mas_department on store_mmf_department_m.store_ward_dept = mas_department.department_id" +
    			" left outer join mas_hospital h on store_mmf_department_m.hospital_id=h.hospital_id" +
    			" left outer join mas_employee  mas_employee on store_mmf_department_m.approved_by = mas_employee.employee_id" +
    			" where " +
    			" store_mmf_department_m.store_ward_dept = "+deptId+""+
    			" and store_mmf_department_m.doc_no = '"+docId +"' "+
    			" and store_mmf_department_m.hospital_id="+hospitalId+"" +
    		//	" group by  mas_store_item.pvms_no, store_mmf_department_t.mmf_in_qty,store_mmf_department_t.remarks," +
    		//	" mas_store_item.nomenclature,  msu.unit_name,  mas_department.department_name,store_mmf_department_t.curr_year_mmf," +
    		//	" store_mmf_department_m.id, store_mmf_department_m.doc_no, store_mmf_department_m.remarks,store_mmf_department_m.mmf_for_the_year," +
    		//	" mas_employee.first_name, mas_employee.last_name,h.hospital_name" +
    			" order by  mas_store_item.pvms_no asc";*/

    	//mmfDetailsList=session.createSQLQuery(qry).list();
    	
    	/*mmfDetailsList=session.createCriteria(StoreMmfDepartmentT.class).createAlias("StoreMmfDepartmentM", "i")
    						  .add(Restrictions.eq("i.StoreWardDept.Id", deptId))
    						//  .add(Restrictions.eq("i.ApprovedBy.Id", Integer.parseInt(docId)))
    						  .add(Restrictions.eq("i.Hospital.Id",hospitalId))
    						   .add(Restrictions.eq("i.StoreWardDept.Id", deptId))
//    						  .createAlias("ic.IntermediateUnit", "ic")
    						  .list();*/
    	
    	mmfDetailsList=session.createCriteria(StoreMmfDepartmentT.class).createAlias("StoreMmfDepartmentM", "i")
		  .add(Restrictions.eq("i.StoreWardDept.Id", deptId))
		//  .add(Restrictions.eq("i.ApprovedBy.Id", Integer.parseInt(docId)))
		  .add(Restrictions.eq("i.Hospital.Id",hospitalId))
		   .add(Restrictions.eq("i.DocNo", docId))
//		  .createAlias("ic.IntermediateUnit", "ic")
		  .list();
    	
    	//BigDecimal mmfYear = new BigDecimal(0);
    	Integer  mmfYear = new Integer(0);
    	if(mmfDetailsList.size() > 0){
    		for(StoreMmfDepartmentT ob : mmfDetailsList){
    			//mmfYear = (BigDecimal)ob.getPreYearMmf();
    			mmfYear = (Integer)ob.getStoreMmfDepartmentM().getMmfForTheYear();
    			break;
    		}
    	}
	
       try
       {

			HSSFWorkbook wb = new HSSFWorkbook();
			HSSFSheet sheet = wb.createSheet("MMF");
			//sheet.setColumnWidth((short) 1, (short)10);
			// Create a new font and alter it.

			HSSFFont font = wb.createFont();
			font.setFontHeightInPoints((short) 10);
			font.setFontName(HSSFFont.FONT_ARIAL);
			font.setColor((short) 62);
			font.setItalic(false);
			font.setStrikeout(false);
			font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);

		
			HSSFFont font1 = wb.createFont();
			font1.setFontHeightInPoints((short) 12);
			font1.setFontName(HSSFFont.FONT_ARIAL);
			font1.setColor((short) 62);
			font1.setItalic(false);
			font1.setStrikeout(false);
			font1.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);

			HSSFFont font2 = wb.createFont();
			font2.setFontHeightInPoints((short) 9);
			font2.setFontName(HSSFFont.FONT_ARIAL);
			font2.setColor((short) 62);
			font2.setItalic(false);
			font2.setStrikeout(false);
			font2.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);

			// Fonts are set into a style so create a new one to
			// use.
			HSSFCellStyle style = wb.createCellStyle();
			style.setFont(font);
			style.setAlignment((short) 2);


			HSSFCellStyle style1 = wb.createCellStyle();
			style1.setFont(font1);
			style1.setAlignment((short) 2);


			HSSFCellStyle style2 = wb.createCellStyle();
			style2.setFont(font2);
			style2.setAlignment((short) 2);

			//style1.setLocked(true);

				HSSFRow row2 = sheet.createRow((short) 2);
				HSSFCell cell20 = row2.createCell((short) 2);
				cell20.setCellValue(new HSSFRichTextString(hospitalName));
				cell20.setCellStyle(style1);
				sheet.addMergedRegion(new Region(2, (short) 2, 2, (short) 4));

				HSSFRow row3 = sheet.createRow((short) 3);
				HSSFCell cell30 = row3.createCell((short) 2);
				SimpleDateFormat sdf = new SimpleDateFormat("dd/mm/yyyy");
				//String dateStringFormat = java.util.Date.valueOf((sdf.format(new Date())));
				cell30.setCellValue(new HSSFRichTextString("MMF for the year "+mmfYear));
				cell30.setCellStyle(style1);
				sheet.addMergedRegion(new Region(3, (short) 2, 3, (short) 4));

				//HSSFCell cell32 = row3.createCell((short) 7);
				//cell32.setCellValue(new HSSFRichTextString("25/12/2011"));

				HSSFRow row4 = sheet.createRow((short) 4);
				HSSFCell cell40 = row4.createCell((short)1);
				cell40.setCellStyle(style1);
				cell40.setCellValue(new HSSFRichTextString(""));
				sheet.addMergedRegion(new Region(4, (short) 0, 4, (short) 7));


				HSSFRow headingRow1 = sheet.createRow((short) 5);

				HSSFCell cell70 = headingRow1.createCell((short) 0);
				cell70.setCellValue(new HSSFRichTextString("Sl No."));
				cell70.setCellStyle(style2);
				sheet.autoSizeColumn((short) 0);

				HSSFCell cell71 = headingRow1.createCell((short) 1);
				cell71.setCellValue(new HSSFRichTextString("PVMS No."));
				cell71.setCellStyle(style2);
				sheet.autoSizeColumn((short) 1);

				HSSFCell cell72 = headingRow1.createCell((short) 2);
				cell72.setCellValue(new HSSFRichTextString("       Nomenclature                "));
				cell72.setCellStyle(style2);
				sheet.autoSizeColumn((short) 2);

				HSSFCell cell73 = headingRow1.createCell((short) 3);
				cell73.setCellValue(new HSSFRichTextString(" A/U "));
				cell73.setCellStyle(style2);
				sheet.autoSizeColumn((short) 3);


				HSSFCell cell74 = headingRow1.createCell((short) 4);
				cell74.setCellValue(new HSSFRichTextString("MMF "));
				cell74.setCellStyle(style2);
				sheet.autoSizeColumn((short) 4);



				HSSFCell cell75 = headingRow1.createCell((short) 5);
				cell75.setCellStyle(style);
				cell75.setCellValue(new HSSFRichTextString(" Remarks "));
				cell75.setCellStyle(style2);
				sheet.autoSizeColumn((short) 5);


				//============Heading Completed=======================

				//Region(int rowFrom, short colFrom, int rowTo, short colTo)
			//	sheet.addMergedRegion(new Region(6, (short) 1, 6, (short) 2));


	    int row=9;
	    int i=1;
	    for(StoreMmfDepartmentT pair : mmfDetailsList)
	    {

	    	
	    	String pvms_no="";
	    	String Nomenclature="";
	    	String AccountinUnit="";
	    	String mmf="";
	    	String remarks="";
	    	

	    	if(pair.getItem().getPvmsNo()!=null){
	    		pvms_no=pair.getItem().getPvmsNo().toString();
	    	}else{
	    		pvms_no="";
	    	}
	    	if(pair.getItem().getNomenclature()!=null){
	    	 Nomenclature=pair.getItem().getNomenclature().toString();
	    	}else{
	    		 Nomenclature="";
	    	}
	    	if(pair.getItem().getItemConversion().getIntermediateUnit()!=null){
	    	 AccountinUnit=pair.getItem().getItemConversion().getIntermediateUnit().getUnitName().toString();
	    	}else{
	    		AccountinUnit="";
	    	}
	    	if(pair.getMmfInQty()!=null){
	    	mmf=pair.getMmfInQty().toString();
	    	}else{
		    mmf="0";
	    	}
	    	if(pair.getRemarks()!=null){
	    	remarks=pair.getRemarks().toString();
	    	}else{
	    		remarks="";
	    	}   
	    	
	    	

	        //String item_id=pair[6].toString();

	    	HSSFRow detailRow = sheet.createRow((short) row);

	    	HSSFCell cell90 = detailRow.createCell((short) 0);
			cell90.setCellValue(i);

			HSSFCell cell91 = detailRow.createCell((short) 1);
			cell91.setCellValue(new HSSFRichTextString(pvms_no));


			HSSFCell cell92 = detailRow.createCell((short) 2);
			cell92.setCellValue(new HSSFRichTextString(Nomenclature));

			HSSFCell cell93 = detailRow.createCell((short) 3);
			cell93.setCellValue(new HSSFRichTextString(AccountinUnit));

			HSSFCell cell94 = detailRow.createCell((short) 4);
			cell94.setCellValue(mmf);

			HSSFCell cell95 = detailRow.createCell((short) 5);
			cell95.setCellValue(remarks);

			i++;
			row = row + 1;
	    }

	    dataMap.put("wb", wb);
       }
		catch (Exception e) {
			e.printStackTrace();
		}
		return dataMap;
   }
	
	public Map<String, Object> showProformaBEntryJsp(Map<String, Object> dataMap){
		Session session = (Session) getSession();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		String no = "";
		if (dataMap.get("deptId") != null)
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		if (dataMap.get("hospitalId") != null)
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));

		HashMap<String, Object> map = new HashMap<String, Object>();

		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<StoreProformaHeader> storeProformaList = new ArrayList<StoreProformaHeader>();// add by javed khan on 25-10-2013

		storeFyDocumentNoList = session.createCriteria(StoreFyDocumentNo.class).add(Restrictions.eq("Hospital.Id", hospitalId)).add(Restrictions.eq("Department.Id", deptId)).list();
		storeProformaList= session.createCriteria(StoreProformaHeader.class).add(Restrictions.eq("Status","n")).add(Restrictions.eq("Hospital.Id",hospitalId)).addOrder(Order.asc("id")).list(); // add by javed khan on 25-10-2013
		for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
			if (storeFyDocumentNo.getProformaBEntryNo() != null) {
				no = ("" + storeFyDocumentNo.getProformaBEntryNo());
				no = getMaxNo(no);
			} else {
				no = getMaxNo("");
			}
		}

		
		map.put("storeProformaList", storeProformaList);// add by javed khan on 25-10-2013
		map.put("max", no);
		return map;
	}
	public Map<String,Object> getPvmsID(String pvmsNo)
	{
		Session session = (Session)getSession();
		Map<String,Object> map= new HashMap<String,Object>();
		List<Integer> pvmsList = new ArrayList<Integer>();
		pvmsList = session.createCriteria(MasStoreItem.class).add(Restrictions.eq("PvmsNo", pvmsNo)).setProjection(Projections.property("Id") ).list();
		map.put("pvmsList", pvmsList);
		return map;
		
	}
	
	public Map<String,Object> getDrugExpiryList(Box box)
	{
		Session session = (Session)getSession();
		Map<String,Object> map= new HashMap<String,Object>();
		
		
		Criteria cr = null;
		List<StoreItemBatchStock> stockList = new ArrayList<StoreItemBatchStock>();		
	
		int pagingSize = 10;
		int pageNo = 1;	
		int hospitalId = box.getInt("hospitalId");
		int deptId = box.getInt("deptId");
		int ExpiryPeriod = box.getInt("ddlExpiryPeriod");
		
		Date date = new Date();
		  
		Calendar cal = Calendar.getInstance();
		Calendar cal1 = Calendar.getInstance();
		
		String pvmsNo =box.getString("pvmsNiv");
		String nomenclature =box.getString("nomenclature");
		String nomen[]=nomenclature.split("\\[");
	
		System.out.println(pvmsNo);
		
		Date fromDate = null;
		Date toDate = null;
		if (box.get(FROM_DATE) != null
				&& !(box.get(FROM_DATE).equals(""))) {
			fromDate = HMSUtil.convertStringTypeDateToDateType(box.getString(FROM_DATE));
			
			System.out.println("fromDate"+fromDate);
		
		}
		if (box.get(TO_DATE) != null
				&& !(box.get(TO_DATE).equals(""))) {
			toDate = HMSUtil.convertStringTypeDateToDateType(box.getString(TO_DATE));
		
			
		
		}
		
		if (box.getString("PN") != null)
			pageNo = Integer.parseInt(box.getString("PN"));
		
		
		cr = session.createCriteria(StoreItemBatchStock.class).createAlias("Hospital", "hosp").createAlias("Department", "dept")
				.add(Restrictions.eq("hosp.Id", hospitalId))
				.add(Restrictions.gt("ClosingStock", new BigDecimal(0)))
				.add(Restrictions.eq("dept.Id", deptId)).addOrder(Order.asc("ExpiryDate"))
				.createAlias("Item", "i");
		if(!pvmsNo.equals("")){
				
			   cr= cr.add(Restrictions.eq("i.PvmsNo", pvmsNo));
		}
		if(!nomen[0].equals("")){
			
			   cr= cr.add(Restrictions.eq("i.Nomenclature", nomen[0]));
		}
		
		if(box.get(TO_DATE) != null
				&& !(box.get(TO_DATE).equals(""))){
			cr= cr.add(Restrictions.le("ExpiryDate", toDate));
		}
		
		if(box.get(FROM_DATE) != null
				&& !(box.get(FROM_DATE).equals(""))){
			cr= cr.add(Restrictions.ge("ExpiryDate", fromDate));
		}
		
	
		stockList = cr.list();
		
		 	    
		    List totalMatches = cr.list();
		    cr = cr.setFirstResult(pagingSize * (pageNo - 1));
		    cr = cr.setMaxResults(pagingSize);
		    stockList = cr.list();
		    
		    int totalRecords = totalMatches.size();
		    totalMatches.clear();
		    	    
		    map.put("totalRecords", Integer.valueOf(totalRecords));
		    map.put("stockList", stockList);
		
		
		
		return map;
		
	}
	
	@Override
	public Map<String, Object> getItemTypeList(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasItemType> masItemTypeList = new ArrayList<MasItemType>();
		Session session = (Session) getSession();
		int group = 0;
		try {
			masItemTypeList = session.createCriteria(MasItemType.class)
					.createAlias("Group", "g")
					.add(Restrictions.eq("g.Id", box.getInt("group")))
					.add(Restrictions.eq("Status", "y").ignoreCase()).list();

		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("masItemTypeList", masItemTypeList);
		return map;

	}
	
	public Map<String, Object> getSectionList(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreSection> masStoreSectionList = new ArrayList<MasStoreSection>();
		Session session = (Session) getSession();
		try {
			masStoreSectionList = session.createCriteria(MasStoreSection.class)
					.createAlias("ItemType", "g")
					.add(Restrictions.eq("g.Id", box.getInt("itemType")))
					.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("masStoreSectionList", masStoreSectionList);
		return map;

	}
	
	@Override
	public Map<String, Object> getCategoryList(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasItemCategory> categoryList = new ArrayList<MasItemCategory>();
		List<MasItemClass> classList = new ArrayList<MasItemClass>();
		Session session = (Session) getSession();
		try {
			categoryList = session.createCriteria(MasItemCategory.class)
					.createAlias("Section", "section")
					.add(Restrictions.eq("section.Id", box.getInt("section")))
					.add(Restrictions.eq("Status", "y").ignoreCase()).list();
			classList = session.createCriteria(MasItemClass.class)
					.createAlias("Section", "section")
					.add(Restrictions.eq("section.Id", box.getInt("section")))
					.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("categoryList", categoryList);
		map.put("classList", classList);
		return map;

	}
	
	@SuppressWarnings("unchecked")
	public List<StoreMaterialPurchaseReqM> getMPRNumberList(int deptId,int hospitalId) {
		Session session = (Session) getSession();
		List<StoreMaterialPurchaseReqM> MPRNumberList = session.createCriteria(StoreMaterialPurchaseReqM.class).add(Restrictions.eq("Department.Id", deptId)).add(Restrictions.eq("Hospital.Id", hospitalId)).addOrder(Order.desc("Id")).list();
		return MPRNumberList;
	}
	
	@Override
	public Map<String, Object> getMasterByAutocomplete(
			Map<String, Object> dataMap) {
		Map<String, Object> map=new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<MasStoreBrand> masStoreBrandList = null;
		List<MasManufacturer> masManufacturerList = null;
		String masterName = (String)dataMap.get("masterName");
		String brandNameTypeValue = (String)dataMap.get("brandNameTypeValue");
		if(masterName!=null){
			switch (masterName) {
			case "masStoreBrand":
				masStoreBrandList = (List<MasStoreBrand>)session.createCriteria(MasStoreBrand.class)
				.add(Restrictions.eq("Status", "y")).add(Restrictions.ilike("BrandName", "%"+brandNameTypeValue+"%")).list();
				break;
			case "masManufacturer":
				masManufacturerList = (List<MasManufacturer>)session.createCriteria(MasManufacturer.class)
						.add(Restrictions.eq("Status", "y")).add(Restrictions.ilike("ManufacturerName", "%"+brandNameTypeValue+"%")).list();
			default:
				break;
			}
		}
		map.put("masStoreBrandList", masStoreBrandList);
		map.put("masManufacturerList", masManufacturerList);
		return map;
	}
	
	@Override
	public Map<String, Object> jsonForMasterAdd(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		String entryResponce = "";
		int saveId=0;
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_AUTO");
		hbt.setCheckWriteOperations(false);
		Session session = (Session)getSession();
		String curentDate = (String)HMSUtil.getCurrentDateAndTime().get("currentDate");
		String currentTime = (String)HMSUtil.getCurrentTimeWithoutSecond().get("currentTime");
		String masterName = (String)dataMap.get("masterName");
		switch (masterName) {
		case "masStoreBrand":
			MasStoreBrand masStoreBrand = new MasStoreBrand();
			masStoreBrand.setBrandName((String)dataMap.get("entryName"));
			masStoreBrand.setBrandCode(masStoreBrand.getBrandName().substring(0, 3).toUpperCase());
			masStoreBrand.setStatus("y");
			masStoreBrand.setLastChgBy((String)dataMap.get("userName"));
			masStoreBrand.setLastChgDate(new Date());
			masStoreBrand.setLastChgTime(currentTime);
			saveId = (Integer)hbt.save(masStoreBrand);
			entryResponce = masStoreBrand.getBrandName()+"["+saveId+"]";
			break;
		case "masManufacturer":
			MasManufacturer masManufacturer = new MasManufacturer();
			masManufacturer.setManufacturerName((String)dataMap.get("entryName"));
			masManufacturer.setManufacturerCode(masManufacturer.getManufacturerName().substring(0, 3).toUpperCase());
			masManufacturer.setStatus("y");
			masManufacturer.setLastChgBy((String)dataMap.get("userName"));
			masManufacturer.setLastChgDate(new Date());
			masManufacturer.setLastChgTime(currentTime);
			saveId = (Integer)hbt.save(masManufacturer);
			entryResponce = masManufacturer.getManufacturerName()+"["+saveId+"]";
			break;
		}
		hbt.flush();
		map.put("entryResponce", entryResponce);
		return map;
	}
	@SuppressWarnings("unchecked")
	public Map<String, Object> showMPRScreen(Map<String,Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier>();		
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<MasItemCategory>masItemCategory=new ArrayList<MasItemCategory>();
		List<MprPriority>priorityList=new ArrayList<MprPriority>();
		List<MasProposedMPR>probaseList=new ArrayList<MasProposedMPR>();
		
		String max = "";
		String no = "";
		int hospitalId=(Integer)dataMap.get("hospitalId");
		int deptId=(Integer)dataMap.get("deptId");
		Session session = (Session) getSession();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_AUTO");
		hbt.setCheckWriteOperations(false);
/**
 * Commented By ritu
 * Date 21-05-0213
 */
		
				
		priorityList=session.createCriteria(MprPriority.class).add(Restrictions.eq("Status", "y").ignoreCase()).list();	
		probaseList=session.createCriteria(MasProposedMPR.class).add(Restrictions.eq("Status", "y").ignoreCase()).list();	
	
		supplierList = session.createCriteria(MasStoreSupplier.class)
		.add(Restrictions.eq("Hospital.Id",hospitalId))
		.add(Restrictions.eq("Status", "y")).addOrder(
				Order.asc("SupplierName")).list();
		
		
		
		System.out.println("supplierList"+supplierList.size());
		System.out.println("priorityList"+priorityList.size());
		System.out.println("probaseList"+probaseList.size());
		map.put("supplierList",supplierList);
		
		map.put("priorityList",priorityList);
		map.put("probaseList",probaseList);
		
		Map<String, Object> adMap = new HashMap<String, Object>();

		map.put("max", max);
		return map;
	}

	/*
	 * This method is user to evaluate auto generated number based on the year
	 * It takes one parameter that is coming from store_fy_document_no
	 */
	public String getMaxMPRNo(String no) {
		String maxNo = "";
		String y1 = "";
		String y2 = "";
		String y3 = "";
		int tempMonth = 0;

		GregorianCalendar gregorianCalendar = new GregorianCalendar();
		int currentMonth = gregorianCalendar.get(Calendar.MONTH) + 1;
		String currentYear = "" + gregorianCalendar.get(Calendar.YEAR);

		if ((Integer.parseInt(currentYear.substring(2)) - 1) <= 9)
			y1 = "0" + (Integer.parseInt(currentYear.substring(2)) - 1);
		else
			y1 = "" + (Integer.parseInt(currentYear.substring(2)) - 1);

		if (Integer.parseInt(currentYear.substring(2)) <= 9)
			y2 = "0" + Integer.parseInt(currentYear.substring(2));
		else
			y2 = "" + Integer.parseInt(currentYear.substring(2));
		if ((Integer.parseInt(currentYear.substring(2)) + 1) <= 9)
			y3 = "0" + (Integer.parseInt(currentYear.substring(2)) + 1);
		else
			y3 = "" + (Integer.parseInt(currentYear.substring(2)) + 1);

		try {
			if (!no.equals("")) {
				StringTokenizer stringTokenizer = new StringTokenizer(no, "/");
				tempMonth = Integer.parseInt(stringTokenizer.nextToken());

				tempMonth++;

				if (currentMonth < 4) {

					maxNo = "MPR/"+tempMonth + "/" + y1 + "-" + y2;
				} else {
					maxNo = "MPR/"+tempMonth + "/" + y2 + "-" + y3;
				}

			} else {
				if (currentMonth < 4) {
					maxNo = "MPR/"+"01" + "/" + y1 + "-" + y2;
				} else {
					maxNo = "MPR/"+"01" + "/" + y2 + "-" + y3;
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return maxNo;
	}
	
	@Override
	public Map<String, Object> addNextOrSubmitBalance(
			Map<String, Object> dataMap, Box box) {
		Map<String, Object> map = new HashMap<String, Object>(); 
		Session session = (Session) getSession();
		String successfullyAdded = "no";
		@SuppressWarnings("unused")
		int pageNo = 0;
		StoreBalanceM storeBalanceM = new StoreBalanceM();
		List<StoreBalanceM> storeBalanceMlist = new ArrayList<StoreBalanceM>();
		List<StoreBalanceT> storeBalanceTList = new ArrayList<StoreBalanceT>();
		List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();

		// For Show Jsp
		List<StoreBalanceM> searchStoreBalanceMList = new ArrayList<StoreBalanceM>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		// List<MasStoreBrand> brandList= new ArrayList<MasStoreBrand>();
		List<StoreBalanceM> list = new ArrayList<StoreBalanceM>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();

		List objectList = new ArrayList();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));

		int balanceId = 0;
		int hospitalId = 0;
		int userId = 0;
		String balanceNo = "";
		Date balanceDate = new Date();
		if (dataMap.get("storeBalanceM") != null) {
			storeBalanceM = (StoreBalanceM) dataMap.get("storeBalanceM");
		}
		if (dataMap.get("balanceNo") != null) {
			balanceNo = "" + dataMap.get("balanceNo");
		}

		if (dataMap.get("storeBalanceTList") != null) {
			storeBalanceTList = (List<StoreBalanceT>) dataMap
					.get("storeBalanceTList");
		}
		if (dataMap.get("pageNo") != null) {
			pageNo = Integer.parseInt("" + dataMap.get("pageNo"));
		}
		if (dataMap.get("balanceId") != null) {
			balanceId = Integer.parseInt("" + dataMap.get("balanceId"));
		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("userId") != null) {
			userId = Integer.parseInt("" + dataMap.get("userId"));
		}
		if (dataMap.get("balanceDate") != null) {
			balanceDate = (Date) (dataMap.get("balanceDate"));
		}
		int deptId = 0;
		deptId = Integer.parseInt("" + dataMap.get("deptId"));
		Vector manufactureId = box.getVector("manufacturerId");
		Vector brandId = box.getVector("brandId");
		Vector manufactureDate = box.getVector("manufactureDate");
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			String no = "";
			//if (pageNo == 1) {
				storeFyDocumentNoList = (List) getHibernateTemplate()
						.find("from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Hospital.Id ="
								+ hospitalId + " and department_id =" + deptId);
				try {
					hbt.save(storeBalanceM); 
					synchronized (this) {

						if (storeFyDocumentNoList.size() > 0) {
							StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) storeFyDocumentNoList.get(0);
							storeFyDocumentNo.setBalanceNo(balanceNo);
							hbt.update(storeFyDocumentNo);
							hbt.refresh(storeFyDocumentNo); 
						} else {

							StoreFyDocumentNo storeFyDocumentNo = new StoreFyDocumentNo();
							storeFyDocumentNo.setAdjustmentNo("0");
							storeFyDocumentNo.setAdjustmentStartNo("0");
							storeFyDocumentNo.setBalanceNo(balanceNo);
							storeFyDocumentNo.setBalanceStartNo("0");
							storeFyDocumentNo.setDefectEntryNo("0");
							storeFyDocumentNo.setDefectEntryStartNo("0");
							storeFyDocumentNo.setDemandNo("0");
							storeFyDocumentNo.setDemandStartNo("0");
							storeFyDocumentNo.setInIndentNo("0");
							storeFyDocumentNo.setDepartment(new MasDepartment(deptId));
							storeFyDocumentNo.setGrnNo("0");
							storeFyDocumentNo.setGrnStartNo("0");
							storeFyDocumentNo.setIssueDeptNo("0");
							storeFyDocumentNo.setIssueDeptReturnNo("0");
							storeFyDocumentNo.setIssueDeptReturnStartNo("0");
							storeFyDocumentNo.setIssueDeptStartNo("0");
							storeFyDocumentNo.setVendorReturnNo("0");
							storeFyDocumentNo.setVendorReturnStartNo("0");
							String issueDeptNo = "";
							issueDeptNo = getMaxNo("0");
							String issueDeptStartNo = issueDeptNo;
							storeFyDocumentNo.setIssueDeptNo(issueDeptNo);
							storeFyDocumentNo.setIssueDeptStartNo(issueDeptStartNo);
							MasHospital hospital = new MasHospital();
							hospital.setId(hospitalId);
							storeFyDocumentNo.setHospital(hospital);
							hbt.save(storeFyDocumentNo);
							hbt.refresh(storeFyDocumentNo); 
						}
					}
				} catch (Exception e) {
					e.printStackTrace();
					tx.rollback();
				}
				storeBalanceMlist = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreBalanceM as md where md.BalanceNo = '"
								+ balanceNo + "' and md.Hospital.Id ="
								+ hospitalId);
				for (StoreBalanceM storeBalanceM2 : storeBalanceMlist) {
					balanceId = storeBalanceM2.getId();
				//}
				/*
				 * int StoreFyDocumentNoId = 1; StoreFyDocumentNo
				 * storeFyDocumentNo = (StoreFyDocumentNo)
				 * getHibernateTemplate() .load(StoreFyDocumentNo.class,
				 * StoreFyDocumentNoId);
				 * storeFyDocumentNo.setBalanceNo(balanceNo);
				 * hbt.update(storeFyDocumentNo);
				 */
			}
			/*if (storeFyDocumentNoList != null
					&& storeFyDocumentNoList.size() > 0) {
				for (StoreFyDocumentNo storeFyDocumentNo2 : storeFyDocumentNoList) {
					if (storeFyDocumentNo2.getBalanceNo() != null) {
						no = ("" + storeFyDocumentNo2.getBalanceNo());
						no = getMaxNo(no);
					} else {
						no = getMaxNo(no);
					}
					storeFyDocumentNo2.setBalanceNo(no);

					hbt.update(storeFyDocumentNo2);
					hbt.refresh(storeFyDocumentNo2);
				}
			} else {
				StoreFyDocumentNo fyDocumentNo = new StoreFyDocumentNo();
				no = getMaxNo(no);
				fyDocumentNo.setBalanceNo(no);
				hbt.save(fyDocumentNo);
				hbt.refresh(fyDocumentNo);
			}
			*/
				List<StoreItemBatchStock> storeItemBatchStocksList=new ArrayList<StoreItemBatchStock>();
				List<StoreBalanceT > StoreBalanceTList =new ArrayList<StoreBalanceT>();
			if (storeBalanceTList.size() > 0) {
				if (pageNo != 1) {
					storeBalanceM.setId(balanceId);
				}
				for (int i = 0; i < storeBalanceTList.size(); i++) {
					StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
					StoreBalanceT storeBalanceTObj = new StoreBalanceT();
					storeBalanceTObj = (StoreBalanceT) storeBalanceTList.get(i);
					// saving cost price in mas store item
					if (storeBalanceTObj.getUnitRate() != null) {
						MasStoreItem masStoreItem = (MasStoreItem) getHibernateTemplate()
								.load(MasStoreItem.class,
										storeBalanceTObj.getItem().getId());

//						masStoreItem.setCostPrice(storeBalanceTObj
//								.getUnitRate());
						hbt.update(masStoreItem);
					}
					/**
					 * laundry_group_id==53 means Laundry laundry_group_id=53
					 */
					int laundry_group_id = 0;
					laundry_group_id = Integer.parseInt(properties.getProperty("laundry_group_id"));
					String laundry_batch_no = "";
					laundry_batch_no = properties.getProperty("laundry_batch_no");

					/**
					 * if item group is laundry then default bacth is A for all
					 * item Code By Mukesh Narayan Singh Date 07 July 2011
					 */
					List<MasStoreItem> masStoreItemList = new ArrayList<MasStoreItem>();
					int item_id = storeBalanceTObj.getItem().getId();
					masStoreItemList = session.createCriteria(MasStoreItem.class).add(Restrictions.idEq(item_id)).list();
					int itemGroup = 0;
					if (masStoreItemList.size() > 0) {
						MasStoreItem masStoreItem = (MasStoreItem) masStoreItemList.get(0);
						if (masStoreItem.getDepartment() != null) {
							itemGroup = masStoreItem.getGroup().getId();
						}
					}
					if (laundry_group_id == itemGroup) {
						storeBalanceTObj.setBatchNo(laundry_batch_no);
					}

					storeBalanceTObj.setStoreBalanceM(storeBalanceM);
					hbt.save(storeBalanceTObj);
					StoreBalanceTList.add(storeBalanceTObj);

					BigDecimal cost_price = storeBalanceTObj.getUnitRate();
					String batch_no = storeBalanceTObj.getBatchNo();
					int brandId1= storeBalanceTObj.getBrand().getId();
					int manuId = storeBalanceTObj.getManufacturer().getId();
										
					storeItemBatchStockList = hbt
         					.find("from jkt.hms.masters.business.StoreItemBatchStock as inp where inp.Item.Id = "
         							+ item_id                                                							
         							+ " and inp.Department.Id= "
         							+ deptId
         							+ " and inp.BatchNo ='"
         							+ batch_no
         							+ "' and inp.Brand.Id = "
         							+ brandId1
         							+ " and inp.Manufacturer.Id = "
         							+ manuId
         							+ " and inp.Hospital.Id = "
         							+hospitalId);
					
					/*storeItemBatchStockList = hbt
         					.find("from jkt.hms.masters.business.StoreItemBatchStock as inp where inp.Item.Id = "
         							+ item_id                                                							
         							+ " and inp.Department.Id= "
         							+ deptId
         							+ " and inp.BatchNo ='"
         							+ batch_no
         							+ "' and inp.Hospital.Id = "
         							+hospitalId);*/

					if (storeItemBatchStockList != null
							&& storeItemBatchStockList.size() > 0) {

						int id = storeItemBatchStockList.get(0).getId();

						storeItemBatchStock = (StoreItemBatchStock) getHibernateTemplate()
								.load(StoreItemBatchStock.class, id);

						storeItemBatchStock.setExpiryDate(storeBalanceTObj
								.getExpiryDate());

						BigDecimal a = null;
						BigDecimal b = null;
						BigDecimal c = null;
						a = storeBalanceTObj.getQty();
						b = storeItemBatchStock.getClosingStock();

						c = a.add(b);

						storeItemBatchStock.setClosingStock(c);

						
						BigDecimal stockOpeningBalanceQty = new BigDecimal(0);
						BigDecimal stockOpeningBalanceEntryQty = new BigDecimal(
								0);
						BigDecimal stockOpeningBalanceQtyTotal = new BigDecimal(
								0);
						if (storeItemBatchStock.getOpeningBalanceQty() != null) {
							stockOpeningBalanceEntryQty = storeBalanceTObj
									.getQty();
							stockOpeningBalanceQty = storeItemBatchStock
									.getOpeningBalanceQty();
							stockOpeningBalanceQtyTotal = stockOpeningBalanceQty
									.add(stockOpeningBalanceEntryQty);
							storeItemBatchStock
									.setOpeningBalanceQty(stockOpeningBalanceQtyTotal);
						} else {
							if (storeBalanceTObj.getQty() != null) {
								stockOpeningBalanceEntryQty = storeBalanceTObj
										.getQty();
							} else {
								stockOpeningBalanceEntryQty = new BigDecimal(0);
							}
							stockOpeningBalanceQtyTotal = stockOpeningBalanceQty
									.add(stockOpeningBalanceEntryQty);
							storeItemBatchStock
									.setOpeningBalanceQty(stockOpeningBalanceQtyTotal);
						}
						/*if (storeBalanceTObj.getTotalAmount() != null) {
							storeItemBatchStock
									.setDispencingPrice(storeBalanceTObj
											.getTotalAmount());
						} else {
							storeItemBatchStock
									.setDispencingPrice(new BigDecimal(0));
						}
						if (storeBalanceTObj.getMrp() != null) {
							storeItemBatchStock.setMrp(storeBalanceTObj
									.getMrp());
						} else {
							storeItemBatchStock
									.setDispencingPrice(new BigDecimal(0));
						}*/

						storeItemBatchStock
								.setOpeningBalanceDate(storeBalanceTObj
										.getStoreBalanceM().getBalanceDate());

						storeItemBatchStock.setCostPrice(storeBalanceTObj
								.getUnitRate());

						hbt.update(storeItemBatchStock);
					} else {
						MasDepartment department = new MasDepartment();
						department.setId(deptId);
						storeItemBatchStock.setDepartment(department);
						MasHospital masHospital = new MasHospital();
						masHospital.setId(hospitalId);
						storeItemBatchStock.setHospital(masHospital);
						// storeItemBatchStock.setDepartment(storeBalanceTObj
						// .getStoreBalanceM().getDepartment());
						storeItemBatchStock.setItem(storeBalanceTObj.getItem());
						storeItemBatchStock.setBatchNo(storeBalanceTObj
								.getBatchNo());
						// storeItemBatchStock.setBrand(storeBalanceTObj.getBrand());
						storeItemBatchStock.setCostPrice(storeBalanceTObj
								.getUnitRate());
						/*if (storeBalanceTObj.getDispencingPrice() != null) {
							storeItemBatchStock
									.setDispencingPrice(storeBalanceTObj
											.getDispencingPrice());
						}
						if (storeBalanceTObj.getMrp() != null) {
							storeItemBatchStock.setMrp(storeBalanceTObj
									.getMrp());
						}*/
						
						if(storeBalanceTObj.getExpiryDate() !=null)
						storeItemBatchStock.setExpiryDate(storeBalanceTObj.getExpiryDate());
						
						if(manufactureDate.get(i).toString() != "")
						storeItemBatchStock.setManufactureDate(HMSUtil.convertStringTypeDateToDateType(manufactureDate.get(i).toString()));
						MasManufacturer masManufacturer = new MasManufacturer();
						masManufacturer.setId(Integer.parseInt(manufactureId
								.get(i).toString()));
						storeItemBatchStock.setManufacturer(masManufacturer);
						storeItemBatchStock.setBrand(new MasStoreBrand(Integer.parseInt(""+brandId.get(i))));
						storeItemBatchStock.setClosingStock(storeBalanceTObj
								.getQty());
						storeItemBatchStock.setOpeningBalanceDate(balanceDate);
						storeItemBatchStock
								.setOpeningBalanceQty(storeBalanceTObj.getQty());
						Users user = new Users();
						user.setId(userId);
						storeItemBatchStock.setLastChgBy(user);
						storeItemBatchStock.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(date));
						hbt.save(storeItemBatchStock);
					}

				}

			}
			successfullyAdded = "yes";

			String qry = "select mas.item_id,mas.pvms_no,mas.nomenclature,mas.strength,con.item_unit_name from mas_store_item mas inner join mas_store_item_conversion con on mas.item_conversion_id = con.item_conversion_id ";
			objectList = (List) session.createSQLQuery(qry).list();
			/*
			 * if(objectList.size()!=0){ Criteria c =
			 * session.createCriteria(MasStoreItem
			 * .class).add(Restrictions.eq("Department.Id",
			 * deptId)).add(Restrictions.not(Restrictions.in("Id",
			 * objectList))); c.setFirstResult(0); c.setMaxResults(10); itemList
			 * = c.list(); }else{ Criteria c =
			 * session.createCriteria(MasStoreItem
			 * .class).add(Restrictions.eq("Department.Id", deptId));
			 * c.setFirstResult(0); c.setMaxResults(10); itemList = c.list(); }
			 */

			// itemList = getHibernateTemplate().find("from
			// jkt.hms.masters.business.MasStoreItem as mi where mi.Status =
			// 'y'");
			searchStoreBalanceMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreBalanceM as md where  md.Hospital.Id = "
							+ hospitalId);
			approvedByEmployeeList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasEmployee as emp where emp.Hospital.Id = "
							+ hospitalId);
			// brandList=getHibernateTemplate().find("from
			// jkt.hms.masters.business.MasStoreBrand ");
			tx.commit(); 
		} catch (RuntimeException e) {
			if (tx != null) {
				tx.rollback();
			}
			// throw e; // or display error message
			e.printStackTrace();
		} // finally {
			// session.close();
		// }

		// map.put("itemList",itemList);
		map.put("objectList", objectList);
		map.put("approvedByList", approvedByEmployeeList);
		// map.put("brandList", brandList);
		map.put("searchStoreBalanceMList", searchStoreBalanceMList);
		map.put("successfullyAdded", successfullyAdded);
		map.put("balanceId", balanceId);

		return map;
	}
	@Override
	public Map<String, Object> rcReceive(Map<String, Object> dataMap, Box box) {
		Map<String, Object> map = new HashMap<String, Object>(); 
		Session session = (Session) getSession();
		String successfullyAdded = "no";
		@SuppressWarnings("unused")
		int pageNo = 0;
		StoreBalanceM storeBalanceM = new StoreBalanceM();
		List<StoreBalanceM> storeBalanceMlist = new ArrayList<StoreBalanceM>();
		List<StoreBalanceT> storeBalanceTList = new ArrayList<StoreBalanceT>();
		List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
		
		// For Show Jsp
		List<StoreBalanceM> searchStoreBalanceMList = new ArrayList<StoreBalanceM>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		// List<MasStoreBrand> brandList= new ArrayList<MasStoreBrand>();
		List<StoreBalanceM> list = new ArrayList<StoreBalanceM>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		
		List objectList = new ArrayList();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		
		int balanceId = 0;
		int hospitalId = 0;
		int userId = 0;
		String balanceNo = "";
		Date balanceDate = new Date();
		if (dataMap.get("storeBalanceM") != null) {
			storeBalanceM = (StoreBalanceM) dataMap.get("storeBalanceM");
		}
		if (dataMap.get("balanceNo") != null) {
			balanceNo = "" + dataMap.get("balanceNo");
		}
		
		if (dataMap.get("storeBalanceTList") != null) {
			storeBalanceTList = (List<StoreBalanceT>) dataMap
					.get("storeBalanceTList");
		}
		if (dataMap.get("pageNo") != null) {
			pageNo = Integer.parseInt("" + dataMap.get("pageNo"));
		}
		if (dataMap.get("balanceId") != null) {
			balanceId = Integer.parseInt("" + dataMap.get("balanceId"));
		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("userId") != null) {
			userId = Integer.parseInt("" + dataMap.get("userId"));
		}
		if (dataMap.get("balanceDate") != null) {
			balanceDate = (Date) (dataMap.get("balanceDate"));
		}
		int deptId = 0;
		deptId = Integer.parseInt("" + dataMap.get("deptId"));
		Vector manufactureId = box.getVector("manufacturerId");
		Vector brandId = box.getVector("brandId");
		Vector manufactureDate = box.getVector("manufactureDate");
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			String no = "";
			//if (pageNo == 1) {
			storeFyDocumentNoList = (List) getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Hospital.Id ="
							+ hospitalId + " and department_id =" + deptId);
			try {
				hbt.save(storeBalanceM); 
				synchronized (this) {
					
					if (storeFyDocumentNoList.size() > 0) {
						StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) storeFyDocumentNoList.get(0);
						storeFyDocumentNo.setBalanceNo(balanceNo);
						hbt.update(storeFyDocumentNo);
						hbt.refresh(storeFyDocumentNo); 
					} else {
						
						StoreFyDocumentNo storeFyDocumentNo = new StoreFyDocumentNo();
						storeFyDocumentNo.setAdjustmentNo("0");
						storeFyDocumentNo.setAdjustmentStartNo("0");
						storeFyDocumentNo.setBalanceNo(balanceNo);
						storeFyDocumentNo.setBalanceStartNo("0");
						storeFyDocumentNo.setDefectEntryNo("0");
						storeFyDocumentNo.setDefectEntryStartNo("0");
						storeFyDocumentNo.setDemandNo("0");
						storeFyDocumentNo.setDemandStartNo("0");
						storeFyDocumentNo.setInIndentNo("0");
						storeFyDocumentNo.setDepartment(new MasDepartment(deptId));
						storeFyDocumentNo.setGrnNo("0");
						storeFyDocumentNo.setGrnStartNo("0");
						storeFyDocumentNo.setIssueDeptNo("0");
						storeFyDocumentNo.setIssueDeptReturnNo("0");
						storeFyDocumentNo.setIssueDeptReturnStartNo("0");
						storeFyDocumentNo.setIssueDeptStartNo("0");
						storeFyDocumentNo.setVendorReturnNo("0");
						storeFyDocumentNo.setVendorReturnStartNo("0");
						String issueDeptNo = "";
						issueDeptNo = getMaxNo("0");
						String issueDeptStartNo = issueDeptNo;
						storeFyDocumentNo.setIssueDeptNo(issueDeptNo);
						storeFyDocumentNo.setIssueDeptStartNo(issueDeptStartNo);
						MasHospital hospital = new MasHospital();
						hospital.setId(hospitalId);
						storeFyDocumentNo.setHospital(hospital);
						hbt.save(storeFyDocumentNo);
						hbt.refresh(storeFyDocumentNo); 
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
				tx.rollback();
			}
			storeBalanceMlist = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreBalanceM as md where md.BalanceNo = '"
							+ balanceNo + "' and md.Hospital.Id ="
							+ hospitalId);
			for (StoreBalanceM storeBalanceM2 : storeBalanceMlist) {
				balanceId = storeBalanceM2.getId();
				//}
				/*
				 * int StoreFyDocumentNoId = 1; StoreFyDocumentNo
				 * storeFyDocumentNo = (StoreFyDocumentNo)
				 * getHibernateTemplate() .load(StoreFyDocumentNo.class,
				 * StoreFyDocumentNoId);
				 * storeFyDocumentNo.setBalanceNo(balanceNo);
				 * hbt.update(storeFyDocumentNo);
				 */
			}
			/*if (storeFyDocumentNoList != null
					&& storeFyDocumentNoList.size() > 0) {
				for (StoreFyDocumentNo storeFyDocumentNo2 : storeFyDocumentNoList) {
					if (storeFyDocumentNo2.getBalanceNo() != null) {
						no = ("" + storeFyDocumentNo2.getBalanceNo());
						no = getMaxNo(no);
					} else {
						no = getMaxNo(no);
					}
					storeFyDocumentNo2.setBalanceNo(no);

					hbt.update(storeFyDocumentNo2);
					hbt.refresh(storeFyDocumentNo2);
				}
			} else {
				StoreFyDocumentNo fyDocumentNo = new StoreFyDocumentNo();
				no = getMaxNo(no);
				fyDocumentNo.setBalanceNo(no);
				hbt.save(fyDocumentNo);
				hbt.refresh(fyDocumentNo);
			}
			 */
			List<StoreItemBatchStock> storeItemBatchStocksList=new ArrayList<StoreItemBatchStock>();
			List<StoreBalanceT > StoreBalanceTList =new ArrayList<StoreBalanceT>();
			if (storeBalanceTList.size() > 0) {
				if (pageNo != 1) {
					storeBalanceM.setId(balanceId);
				}
				for (int i = 0; i < storeBalanceTList.size(); i++) {
					StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
					StoreBalanceT storeBalanceTObj = new StoreBalanceT();
					storeBalanceTObj = (StoreBalanceT) storeBalanceTList.get(i);
					// saving cost price in mas store item
					if (storeBalanceTObj.getUnitRate() != null) {
						MasStoreItem masStoreItem = (MasStoreItem) getHibernateTemplate()
								.load(MasStoreItem.class,
										storeBalanceTObj.getItem().getId());
						
//						masStoreItem.setCostPrice(storeBalanceTObj
//								.getUnitRate());
						hbt.update(masStoreItem);
					}
					/**
					 * laundry_group_id==53 means Laundry laundry_group_id=53
					 */
					int laundry_group_id = 0;
					laundry_group_id = Integer.parseInt(properties.getProperty("laundry_group_id"));
					String laundry_batch_no = "";
					laundry_batch_no = properties.getProperty("laundry_batch_no");
					
					/**
					 * if item group is laundry then default bacth is A for all
					 * item Code By Mukesh Narayan Singh Date 07 July 2011
					 */
					List<MasStoreItem> masStoreItemList = new ArrayList<MasStoreItem>();
					int item_id = storeBalanceTObj.getItem().getId();
					masStoreItemList = session.createCriteria(MasStoreItem.class).add(Restrictions.idEq(item_id)).list();
					int itemGroup = 0;
					if (masStoreItemList.size() > 0) {
						MasStoreItem masStoreItem = (MasStoreItem) masStoreItemList.get(0);
						if (masStoreItem.getDepartment() != null) {
							itemGroup = masStoreItem.getGroup().getId();
						}
					}
					if (laundry_group_id == itemGroup) {
						storeBalanceTObj.setBatchNo(laundry_batch_no);
					}
					
					storeBalanceTObj.setStoreBalanceM(storeBalanceM);
					hbt.save(storeBalanceTObj);
					StoreBalanceTList.add(storeBalanceTObj);
					
					BigDecimal cost_price = storeBalanceTObj.getUnitRate();
					String batch_no = storeBalanceTObj.getBatchNo();
					int brandId1= storeBalanceTObj.getBrand().getId();
					int manuId = storeBalanceTObj.getManufacturer().getId();
										
					storeItemBatchStockList = hbt
         					.find("from jkt.hms.masters.business.StoreItemBatchStock as inp where inp.Item.Id = "
         							+ item_id                                                							
         							+ " and inp.Department.Id= "
         							+ deptId
         							+ " and inp.BatchNo ='"
         							+ batch_no
         							+ "' and inp.Brand.Id = "
         							+ brandId1
         							+ " and inp.Manufacturer.Id = "
         							+ manuId
         							+ " and inp.Hospital.Id = "
         							+hospitalId);
					
					if (storeItemBatchStockList != null
							&& storeItemBatchStockList.size() > 0) {
						
						int id = storeItemBatchStockList.get(0).getId();
						
						storeItemBatchStock = (StoreItemBatchStock) getHibernateTemplate()
								.load(StoreItemBatchStock.class, id);
						
						storeItemBatchStock.setExpiryDate(storeBalanceTObj
								.getExpiryDate());
						
						BigDecimal a = null;
						BigDecimal b = null;
						BigDecimal c = null;
						a = storeBalanceTObj.getQty();
						b = storeItemBatchStock.getClosingStock();
						
						c = a.add(b);
						
						storeItemBatchStock.setClosingStock(c);
						
						
						BigDecimal stockOpeningBalanceQty = new BigDecimal(0);
						BigDecimal stockOpeningBalanceEntryQty = new BigDecimal(
								0);
						BigDecimal stockOpeningBalanceQtyTotal = new BigDecimal(
								0);
						if (storeItemBatchStock.getOpeningBalanceQty() != null) {
							stockOpeningBalanceEntryQty = storeBalanceTObj
									.getQty();
							stockOpeningBalanceQty = storeItemBatchStock
									.getOpeningBalanceQty();
							stockOpeningBalanceQtyTotal = stockOpeningBalanceQty
									.add(stockOpeningBalanceEntryQty);
							storeItemBatchStock
							.setOpeningBalanceQty(stockOpeningBalanceQtyTotal);
						} else {
							if (storeBalanceTObj.getQty() != null) {
								stockOpeningBalanceEntryQty = storeBalanceTObj
										.getQty();
							} else {
								stockOpeningBalanceEntryQty = new BigDecimal(0);
							}
							stockOpeningBalanceQtyTotal = stockOpeningBalanceQty
									.add(stockOpeningBalanceEntryQty);
							storeItemBatchStock
							.setOpeningBalanceQty(stockOpeningBalanceQtyTotal);
						}
						/*if (storeBalanceTObj.getTotalAmount() != null) {
							storeItemBatchStock
									.setDispencingPrice(storeBalanceTObj
											.getTotalAmount());
						} else {
							storeItemBatchStock
									.setDispencingPrice(new BigDecimal(0));
						}
						if (storeBalanceTObj.getMrp() != null) {
							storeItemBatchStock.setMrp(storeBalanceTObj
									.getMrp());
						} else {
							storeItemBatchStock
									.setDispencingPrice(new BigDecimal(0));
						}*/
						
						storeItemBatchStock
						.setOpeningBalanceDate(storeBalanceTObj
								.getStoreBalanceM().getBalanceDate());
						
						storeItemBatchStock.setCostPrice(storeBalanceTObj
								.getUnitRate());
						
						hbt.update(storeItemBatchStock);
					} else {
						MasDepartment department = new MasDepartment();
						department.setId(deptId);
						storeItemBatchStock.setDepartment(department);
						MasHospital masHospital = new MasHospital();
						masHospital.setId(hospitalId);
						storeItemBatchStock.setHospital(masHospital);
						// storeItemBatchStock.setDepartment(storeBalanceTObj
						// .getStoreBalanceM().getDepartment());
						storeItemBatchStock.setItem(storeBalanceTObj.getItem());
						storeItemBatchStock.setBatchNo(storeBalanceTObj
								.getBatchNo());
						// storeItemBatchStock.setBrand(storeBalanceTObj.getBrand());
						storeItemBatchStock.setCostPrice(storeBalanceTObj
								.getUnitRate());
						/*if (storeBalanceTObj.getDispencingPrice() != null) {
							storeItemBatchStock
									.setDispencingPrice(storeBalanceTObj
											.getDispencingPrice());
						}
						if (storeBalanceTObj.getMrp() != null) {
							storeItemBatchStock.setMrp(storeBalanceTObj
									.getMrp());
						}*/
						storeItemBatchStock.setExpiryDate(storeBalanceTObj
								.getExpiryDate());
						storeItemBatchStock.setManufactureDate(HMSUtil.convertStringTypeDateToDateType(manufactureDate.get(i).toString()));
						MasManufacturer masManufacturer = new MasManufacturer();
						masManufacturer.setId(Integer.parseInt(manufactureId
								.get(i).toString()));
						storeItemBatchStock.setManufacturer(masManufacturer);
						storeItemBatchStock.setBrand(new MasStoreBrand(Integer.parseInt(""+brandId.get(i))));
						storeItemBatchStock.setClosingStock(storeBalanceTObj
								.getQty());
						storeItemBatchStock.setOpeningBalanceDate(balanceDate);
						storeItemBatchStock
						.setOpeningBalanceQty(storeBalanceTObj.getQty());
						Users user = new Users();
						user.setId(userId);
						storeItemBatchStock.setLastChgBy(user);
						storeItemBatchStock.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(date));
						hbt.save(storeItemBatchStock);
					}
					
				}
				
			}
			successfullyAdded = "yes";
			
			String qry = "select mas.item_id,mas.pvms_no,mas.nomenclature,mas.strength,con.item_unit_name from mas_store_item mas inner join mas_store_item_conversion con on mas.item_conversion_id = con.item_conversion_id ";
			objectList = (List) session.createSQLQuery(qry).list();
			/*
			 * if(objectList.size()!=0){ Criteria c =
			 * session.createCriteria(MasStoreItem
			 * .class).add(Restrictions.eq("Department.Id",
			 * deptId)).add(Restrictions.not(Restrictions.in("Id",
			 * objectList))); c.setFirstResult(0); c.setMaxResults(10); itemList
			 * = c.list(); }else{ Criteria c =
			 * session.createCriteria(MasStoreItem
			 * .class).add(Restrictions.eq("Department.Id", deptId));
			 * c.setFirstResult(0); c.setMaxResults(10); itemList = c.list(); }
			 */
			
			// itemList = getHibernateTemplate().find("from
			// jkt.hms.masters.business.MasStoreItem as mi where mi.Status =
			// 'y'");
			searchStoreBalanceMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreBalanceM as md where  md.Hospital.Id = "
							+ hospitalId);
			approvedByEmployeeList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasEmployee as emp where emp.Hospital.Id = "
							+ hospitalId);
			// brandList=getHibernateTemplate().find("from
			// jkt.hms.masters.business.MasStoreBrand ");
			tx.commit(); 
		} catch (RuntimeException e) {
			if (tx != null) {
				tx.rollback();
			}
			// throw e; // or display error message
			e.printStackTrace();
		} // finally {
		// session.close();
		// }
		
		// map.put("itemList",itemList);
		map.put("objectList", objectList);
		map.put("approvedByList", approvedByEmployeeList);
		// map.put("brandList", brandList);
		map.put("searchStoreBalanceMList", searchStoreBalanceMList);
		map.put("successfullyAdded", successfullyAdded);
		map.put("balanceId", balanceId);
		
		return map;
	}
	

	@Override
	public Map<String, Object> getItemTypeGLList(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasItemType> masItemTypeList = new ArrayList<MasItemType>();
		Session session = (Session) getSession();
		
		session = (Session) getSession();
		int group = 0;
		try {
			
			if(dataMap.get("group") != null ){
				group = (Integer)dataMap.get("group");
			}
			masItemTypeList = session.createCriteria(MasItemType.class)
						.createAlias("Group", "g")
						.add(Restrictions.eq("g.Id",group))
						.add(Restrictions.eq("Status", "y").ignoreCase()).list();



			

		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("masItemTypeList", masItemTypeList);
		return map;

}

	@Override
	public Map<String, Object> getSectionGLList(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreSection> masStoreSectionList = new ArrayList<MasStoreSection>();
		Session session = (Session) getSession();
		
		session = (Session) getSession();
		int itemType = 0;
		try {
			
			if(dataMap.get("itemType") != null ){
				itemType = (Integer)dataMap.get("itemType");
			}
			masStoreSectionList = session.createCriteria(MasStoreSection.class)
						.createAlias("ItemType", "g")
						.add(Restrictions.eq("g.Id",itemType))
						//.add(Restrictions.eq("SectionName","Medicinal"))
						.add(Restrictions.eq("Status", "y").ignoreCase()).list();



			

		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("masStoreSectionList", masStoreSectionList);
		return map;

}

	@Override
	public Map<String, Object> getCategoryGList(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasItemCategory> categoryList = new ArrayList<MasItemCategory>();
		List<MasItemClass> classList = new ArrayList<MasItemClass>();
		Session session = (Session) getSession();
		try {
			categoryList = session.createCriteria(MasItemCategory.class)
					.createAlias("Section", "section")
					.add(Restrictions.eq("section.Id", box.getInt("section")))
					.add(Restrictions.eq("Status", "y").ignoreCase()).list();
			classList = session.createCriteria(MasItemClass.class)
					.createAlias("Section", "section")
					.add(Restrictions.eq("section.Id", box.getInt("section")))
					.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("categoryList", categoryList);
		map.put("classList", classList);
		return map;

	}
	
	@Override
	public Map<String, Object> showNIS(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Patient> patients = null;
		Session session = (Session)getSession();
		Box box = (Box)dataMap.get("box");
		if(dataMap.get("box")!=null){
		String serviceNo = box.getString("employeeId");
		int hospitalId = box.getInt("hospitalId");
		//int depId = box.getInt("depId");
		patients = (List<Patient>)session.createCriteria(Patient.class, "p").add(Restrictions.eq("p.ServiceNo", serviceNo)).add(Restrictions.eq("p.Hospital.Id", hospitalId))
				.list();
		}
		map.put("patients",patients);
		return map;
	}

	public Map<String,Object> getDrugExpiryListReport(Box box)
	{
		Session session = (Session)getSession();
		Map<String,Object> map= new HashMap<String,Object>();
		int hospitalId = box.getInt("hospitalId");
		int deptId = box.getInt("deptId");
		int ExpiryPeriod = box.getInt("ddlExpiryPeriod");
		String pvmsNo =box.getString("pvmsNiv");
		String nomenclature =box.getString("nomenclature");
		String nomen[]=nomenclature.split("\\[");
		Calendar cal = Calendar.getInstance();
		String qry="";
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
		Date date = new Date();
		String convertedDate	= sdf.format(date);
		List objectList = new ArrayList();
	try {
		 // 	dateadd(day,12,
			 qry="SELECT b.pvms_no, b.nomenclature, e.unit_name au, a.batch_no,cast(a.expiry_date as varchar(10))as expiry_date"+
					 	" FROM store_item_batch_stock a "+  
					 	" left outer join mas_store_item b on a.item_id = b.item_id "+ 
					 	" left outer join mas_store_item_conversion d on  b.item_conversion_id = d.item_conversion_id "+ 
					 	" left outer join  mas_store_unit e  on d.purchase_unit_id = e.unit_id "+
			 	" where a.expiry_date >= dateadd(day,"+ExpiryPeriod+",'"+convertedDate+"') "+ 	
			
			 	" and a.department_id = '"+deptId+"' "+
			 	" and a.hospital_id = '"+hospitalId+"' "+
			 	" and a.item_id = :pvmsNo "+
			 	"and a.CLOSING_STOCK > 0 "+
			 	"group by b.pvms_no , a.BATCH_NO, b.nomenclature,e.unit_name,a.batch_no,a.expiry_date, a.closing_stock "+
			  "order by b.pvms_no";

			 
			 Query queryHiber =(Query) session.createSQLQuery(qry);
			 if(!pvmsNo.equals("")){
					
				 queryHiber =queryHiber.setParameter("pvmsNo", pvmsNo);
			}
			 if(!nomen[0].equals("")){
					
				 queryHiber =queryHiber.setParameter("nomen", nomen[0]);
			}
			 
			objectList = (List) session.createSQLQuery(qry).list();



		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("objectList", objectList);
		return map;

	}

	

	@Override
	public Map<String, Object> saveMPR(Box box) {

		
		Map<String,Object>datamap = new HashMap<String,Object>();
		
		
		Session session = (Session) getSession();
		Transaction tx = null;
		boolean bSuccessfullyAdded = false;
		
		String message= "";
		//String ProjectionSystemGeneratedHeaderId = "PRJ001";
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		int mprHeaderId=0;
		
		String txtRequestType = box.getString("txtRequestType"); // for save/submit(forward) to centre HEAD
		String mprDate = box.getString("mprDate");
		String mprNo = box.getString("mprNo");
		String projectName = box.getString("projectName");
		int priorityId = box.getInt("priority");
		int ddlRequestYear = box.getInt("ddlRequestYear");
		int proposedMPR = box.getInt("proposedMPR");
		String specialNotes = box.getString("specialNotes");
		
		MprPriority pr = new MprPriority();
		pr.setId(priorityId);
		
			
		String Status = "n";
		if(txtRequestType.equalsIgnoreCase("SAVE"))
		{
			Status = "u";
		}
		if(txtRequestType.equalsIgnoreCase("SUBMIT"))
		{
			Status = "y";
		}
		
		int hospitalId = 0;
		
		int departmentId =0;
		
		hospitalId = box.getInt("hospitalId");
		departmentId = box.getInt("deptId");
		
		MasHospital hospital = new MasHospital();
		hospital.setId(hospitalId);
		
		MasDepartment department = new MasDepartment();
		department.setId(departmentId);
		
		int UserId = box.getInt("CHANGED_BY");
		Users user = new Users();
		user.setId(UserId);
		
		Date changedDate = new Date();
		String changedTime = (String) HMSUtil.getCurrentDateAndTime().get("currentTime");
		
		
		Map<String, Object> adMap = new HashMap<String, Object>();
			   if(true)
			   {			   
	                 
				   StoreMaterialPurchaseReqM mprHeader = new StoreMaterialPurchaseReqM();
				   
				    adMap.put("tableObjectName", "StoreMaterialPurchaseReqM");			
					adMap.put("isHospitalWise", "n");
					adMap.put("hospitalId", hospitalId);
					adMap.put("isYearly", "y");			
					adMap.put("isMonthly", "n");
					adMap.put("isPrefix", "y");
				    if(priorityId ==1)
					adMap.put("transactionPrefixProperty", "transactionPrefixForDrugMPR");
				    if(priorityId ==2)
						adMap.put("transactionPrefixProperty", "transactionPrefixForNonDrugMPR");
					
					try{
				   mprNo = HMSUtil.generateTransactionSequence(adMap, session, hbt);
					}catch(Exception e)
					{
						System.out.print("Exception in Method Save MPR="+e);
					}
				   mprHeader.setMprNo(mprNo);
				   mprHeader.setMprDate(HMSUtil.convertStringTypeDateToDateType(mprDate));
				   mprHeader.setMprPriority(pr);
				   mprHeader.setProject(projectName);
				   mprHeader.setHospital(hospital);
				   mprHeader.setDepartment(department);
				   MasStoreFinancial fy = new MasStoreFinancial();
				   fy.setId(ddlRequestYear);
				   mprHeader.setFinancial(fy);
				   mprHeader.setSpecialNotes(specialNotes);
				   mprHeader.setDeliverySchedule(box.getString("remarks"));
				   
				   mprHeader.setPreparedBy(user);	
					mprHeader.setPreparedDate(changedDate);
					mprHeader.setStatus(Status);
					if(proposedMPR !=0)
					{
						MasProposedMPR obj = new MasProposedMPR();
						obj.setId(proposedMPR);
						mprHeader.setProbase(obj);
					}
					
					
					
					try{
						
						tx = session.beginTransaction();

						hbt.save(mprHeader);
						hbt.refresh(mprHeader);
						
						
						
						String tableRowId = "";
						tableRowId = box.getString("tableRowId");
						
						System.out.println("tableRowId="+tableRowId);

						String array_RowId[];
						array_RowId = tableRowId.split(",");
						System.out.println("array_RowId="+array_RowId+"tableRowId="+tableRowId);

						double HashQty =0;
						double HashValue=0;
						if (tableRowId != "") 
						{
							for (int i = 0; i < array_RowId.length; i++)
							{
								System.out.println("ItemId"+ array_RowId[i]);
								int ItemId = box.getInt("ItemId"+ array_RowId[i]);
								MasStoreItem item = new MasStoreItem();
								item.setId(ItemId);
										
								
								System.out.println("ItemId="+ItemId);
								
								double txtRequiredQty = box.getDouble("txtRequiredQty" + array_RowId[i]);
								HashQty = HashQty+txtRequiredQty;
								
								String deliveryDate = box.getString("deliveryDate" + array_RowId[i]);
								double txtEstimatedValue = box.getDouble("txtEstimatedValue" + array_RowId[i]);
								HashValue = HashValue+ txtEstimatedValue;
								String txtRemarks = box.getString("txtRemarks" + array_RowId[i]);
								String txtProjectionRemarks = box.getString("txtProjectionRemarks" + array_RowId[i]);
								double txtMonthlyConsp = box.getDouble("txtMonthlyConsp" + array_RowId[i]);
								double txtMprQty = box.getDouble("txtMprQty" + array_RowId[i]);
								
								String txtPONo = box.getString("txtPONo" + array_RowId[i]);
								double txtPORate = box.getDouble("txtPORate" + array_RowId[i]);
								String txtPODate = box.getString("txtPODate" + array_RowId[i]);
								String txtSupplier = box.getString("txtSupplier" + array_RowId[i]);
								double pendingPOQty  = box.getDouble("txtQtAC" + array_RowId[i]);
								double txtStockQty= box.getDouble("txtStockQty" + array_RowId[i]);
								String txtMprNo = box.getString("txtMprNo" + array_RowId[i]);
								double txtUnitRate= box.getDouble("txtUnitRate" + array_RowId[i]);
								String txtSources =  box.getString("txtSources" + array_RowId[i]);
								String Range =  box.getString("Range" + array_RowId[i]);
								
								Object txtSources_array[] = (Object[])box.getValuesArray("txtSources" + array_RowId[i]);
								String Sources="";
								
								//System.out.println("txtSources="+txtSources);
								//System.out.println("txtSources_array.length="+txtSources_array.length);
								
								if(txtSources.length()>2)
								{
									for(int s=0; s<txtSources_array.length; s++)
									   {
										Sources = Sources.concat(txtSources_array[s].toString());
										Sources = Sources.concat("\n");
										
									   }
								}
								
								
								System.out.println("txtSources="+Sources);
								String txtTax =  box.getString("txtTax" + array_RowId[i]);
								
								
								
								StoreMaterialPurchaseReqT mprDetails = new StoreMaterialPurchaseReqT();
								
								mprDetails.setItem(item);
								mprDetails.setQtyRequired(new BigDecimal(txtRequiredQty));
								//mprDetails.setDeliveryDate(HMSUtil.convertStringTypeDateToDateType(deliveryDate));
								mprDetails.setEstimatedValues(new BigDecimal(txtEstimatedValue).setScale(2, BigDecimal.ROUND_HALF_UP));
								
								mprDetails.setMprNo(txtMprNo);
								mprDetails.setMprQty(new BigDecimal(txtMprQty));
								mprDetails.setAvgMontlyConsumption(new BigDecimal(txtMonthlyConsp).setScale(2, BigDecimal.ROUND_HALF_UP));
								mprDetails.setPreviosPoNo(txtPONo);
								mprDetails.setPoRate(new BigDecimal(txtPORate).setScale(3, BigDecimal.ROUND_HALF_UP));
								mprDetails.setPoDate(HMSUtil.convertStringTypeDateToDateType(txtPODate));
								mprDetails.setPreviosSupplier(txtSupplier);
								mprDetails.setPendingQtyLastPo(new BigDecimal(pendingPOQty));
								mprDetails.setQtyInStock(new BigDecimal(txtStockQty));
								mprDetails.setUnitRate(new BigDecimal(txtUnitRate).setScale(3, BigDecimal.ROUND_HALF_UP));
								mprDetails.setRemarks(txtRemarks);
								mprDetails.setSources(Sources);
								mprDetails.setTax(txtTax);
								mprDetails.setItemRangeCapacity(Range);
								
								mprDetails.setHeader(mprHeader);								
								
								
								hbt.save(mprDetails);
								hbt.refresh(mprDetails);
								
								StoreMaterialPurchaseReqM objMPRHeader = (StoreMaterialPurchaseReqM)hbt.get(StoreMaterialPurchaseReqM.class, mprHeader.getId());
								if(objMPRHeader != null)
								{
									objMPRHeader.setHashTableQty(new BigDecimal(HashQty).setScale(2, BigDecimal.ROUND_HALF_UP));
									objMPRHeader.setHashTableValue(new BigDecimal(HashValue).setScale(2, BigDecimal.ROUND_HALF_UP));
									
									hbt.update(objMPRHeader);
									hbt.refresh(objMPRHeader);
								}
								
								
								
								
							}
						}
						mprHeaderId = mprHeader.getId();
						tx.commit();
						bSuccessfullyAdded = true;
					}
					
					catch(Exception e)
					{
						System.out.println("dd="+e);
						if (tx != null) {
							tx.rollback();
							e.printStackTrace();
							System.out.print(e);
						}
					}
				   
			   }// close if for bRecordExist
		
		
		
				if (bSuccessfullyAdded) {
					
					if(txtRequestType.equalsIgnoreCase("SAVE"))
					{
						message = "Materail Purchase Request saved successfully and MPR Number is: "
								+ mprNo;
					}
					
					if(txtRequestType.equalsIgnoreCase("SUBMIT"))
					{
						message = "Materail Purchase Request submitted/Approved successfully and MPR Number is: "
								+ mprNo;
					}
					
				} else {

					message = "Try Again!";
				}		

		datamap.put("message", message);
		datamap.put("bSuccessfullyAdded", bSuccessfullyAdded);
		datamap.put("mprHeaderId", mprHeaderId);
		
		
		return datamap;	
		
		
	}

	
	@Override
	public List<Object[]> getFinancialYearList() 
	{
		List<Object[]> financialYearList = new ArrayList<Object[]>();		
		Session session = (Session)getSession();
		Criteria cr = session.createCriteria(MasStoreFinancial.class).add(Restrictions.eq("Status", "y").ignoreCase()).addOrder(Order.asc("StartDate"));
		financialYearList = cr.setProjection(Projections.projectionList().add(Projections.property("Id")).add(Projections.property("FinancialYear"))).list();
		return financialYearList;
	}

	@Override
	public List<Object[]> getMPRPriorityList() 
	{
		List<Object[]> mprPriorityList = new ArrayList<Object[]>();		
		Session session = (Session)getSession();
		Criteria cr = session.createCriteria(MprPriority.class).add(Restrictions.eq("Status", "y").ignoreCase());
		mprPriorityList = cr.setProjection(Projections.projectionList().add(Projections.property("Id")).add(Projections.property("PrName"))).list();
		return mprPriorityList;
	}




	
	@Override
	public Map<String, Object> getListOfMPR(Box box) {
		Map<String,Object> datamap = new HashMap<String,Object>();
		List<StoreMaterialPurchaseReqM> mprHeaderList = new ArrayList<StoreMaterialPurchaseReqM>();
		
		Session session = (Session) getSession();
		int pagingSize = 10;
		int pageNo = 1;		
		int ddlMPRPriority = 0;		
		int ddlRequestYear = 0;
		int hospitalId = 0;
		String ProjectionType = ""; 
		String RequestStatus = "" ; // Awaiting/Saved/Approved
		
		if (box.getString("PN") != null)
			pageNo = Integer.parseInt(box.getString("PN"));
		
		if (box.getString("ddlMPRPriority") != null)
			ddlMPRPriority = box.getInt("ddlMPRPriority");
		if (box.getString("ddlRequestYear") != null)
			ddlRequestYear = box.getInt("ddlRequestYear");
		if (box.getString("hospitalId") != null)
			hospitalId = box.getInt("hospitalId");		
		if (box.getString("RequestStatus") != null)
			RequestStatus = box.getString("RequestStatus");
		
		
		Criteria cr = null;
		cr = session.createCriteria(StoreMaterialPurchaseReqM.class);
		cr = cr.addOrder(Order.desc("MprDate"));
		
		
		if (ddlMPRPriority != 0 ) {
			cr = cr.createAlias("MprPriority", "pr");
			cr = cr.add(Restrictions.eq("pr.Id", ddlMPRPriority));
		}
		
		if (ddlRequestYear != 0 ) {
			cr = cr.createAlias("Financial", "yr");
			cr = cr.add(Restrictions.eq("yr.Id", ddlRequestYear));
		}
		
		String unitType= box.getString("unitType");
		
		
		
		/*
		if(!box.getString("ProjectionStatus").equalsIgnoreCase("0")) // Add restriction in the case of Awaiting for Approval of HO Sales projection
		{
			if(ProjectionStatus.equalsIgnoreCase("Awaiting"))
			{
				cr = cr.createAlias("Status", "st");
				cr = cr.add(Restrictions.eq("st.Id", 3));
			}
		}*/
		
		
		
		List totalMatches = cr.list();
		cr = cr.setFirstResult(pagingSize * (pageNo - 1));
		cr = cr.setMaxResults(pagingSize);
		mprHeaderList = cr.list();

		System.out.println("Total records=" + totalMatches.size());
		int totalRecords = totalMatches.size();
		totalMatches.clear();

		System.out.println("Size of mprHeaderList in dataservice="
				+ mprHeaderList.size());

		datamap.put("mprHeaderList", mprHeaderList);
		datamap.put("totalRecords", totalRecords);

		return datamap;

	}
	
	
	public Map<String, Object> getMPRDetails(int mprId) 
	{
		Map<String,Object> datamap = new HashMap<String,Object>();
		List<StoreMaterialPurchaseReqT> mprDetails = new ArrayList<StoreMaterialPurchaseReqT>();
	 	List<StoreMaterialPurchaseReqM> mprHeader = new ArrayList<StoreMaterialPurchaseReqM>();
		
				
		Session session = (Session) getSession();
		Criteria cr = null;
		cr = session.createCriteria(StoreMaterialPurchaseReqT.class);
		cr = cr.createAlias("Header", "header");
		cr = cr.add(Restrictions.eq("header.Id", mprId));
		mprDetails = cr.list();
		
		cr = session.createCriteria(StoreMaterialPurchaseReqM.class);		
		cr = cr.add(Restrictions.eq("Id", mprId));
		mprHeader = cr.list();	
		
		datamap.put("mprDetails", mprDetails);
		datamap.put("mprHeader", mprHeader);
		
		return datamap;
		
		
	}
	
	public Map<String, Object> updateSavedMPR(Box box)
	{

		Map<String,Object>datamap = new HashMap<String,Object>();
		
		
		Session session = (Session) getSession();
		Transaction tx = null;
		boolean bSuccessfullyAdded = false;		
		boolean bHeaderRecordExist = false;
		String message = "";
		
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		
		int mprHeaderId = 0;
		if(box.getInt("mprHeaderId")!= 0)
		{
			mprHeaderId = box.getInt("mprHeaderId");
		}
		String txtRequestType = box.getString("txtRequestType"); // for save/submit(forward) to centre HEAD		
		String Status = "n";
		if(txtRequestType.equalsIgnoreCase("SAVE"))
		{
			Status = "u";
		}
		if(txtRequestType.equalsIgnoreCase("SUBMIT"))
		{
			Status = "y";
		}
		
		int proposedMPR = box.getInt("proposedMPR");
		
		
		
		int UserId = box.getInt("CHANGED_BY");
		Users user = new Users();
		user.setId(UserId);
		
		Date changedDate = new Date();
		String changedTime = (String) HMSUtil.getCurrentDateAndTime().get("currentTime");	
				
		
				  				
				   StoreMaterialPurchaseReqM mprHeader = (StoreMaterialPurchaseReqM) hbt.get(StoreMaterialPurchaseReqM.class, mprHeaderId);			   			
					
					mprHeader.setPreparedBy(user);	
					mprHeader.setPreparedDate(changedDate);
					mprHeader.setSpecialNotes(box.getString("specialNotes"));
					mprHeader.setDeliverySchedule(box.getString("remarks"));
					mprHeader.setStatus(Status);
					if(proposedMPR !=0)
					{
						MasProposedMPR obj = new MasProposedMPR();
						obj.setId(proposedMPR);
						mprHeader.setProbase(obj);
					}
					
					
					try{
						
						tx = session.beginTransaction();					
						
						String tableRowId = "";
						tableRowId = box.getString("tableRowId");

						String array_RowId[];
						array_RowId = tableRowId.split(",");
						System.out.println("array_RowId="+array_RowId+"tableRowId="+tableRowId);
						double HashQty =0;
						double HashValue=0;
						if (tableRowId != "") 
						{
							for (int i = 0; i < array_RowId.length; i++)
							{
								StoreMaterialPurchaseReqT mprDetails = new StoreMaterialPurchaseReqT();
								mprDetails = (StoreMaterialPurchaseReqT) hbt.get(StoreMaterialPurchaseReqT.class,Integer.parseInt(array_RowId[i]));
								int tempMPRHeaderId= 0;
								if(mprDetails != null)
								{
									tempMPRHeaderId = mprDetails.getHeader().getId();
								}
								
								double txtRequiredQty = box.getDouble("txtRequiredQty" + array_RowId[i]);
								HashQty = HashQty+txtRequiredQty;
								
								String deliveryDate = box.getString("deliveryDate" + array_RowId[i]);
								double txtEstimatedValue = box.getDouble("txtEstimatedValue" + array_RowId[i]);
								HashValue = HashValue+ txtEstimatedValue;								
								String txtRemarks = box.getString("txtRemarks" + array_RowId[i]);	
								
								double txtMonthlyConsp = box.getDouble("txtMonthlyConsp" + array_RowId[i]);
								double txtMprQty = box.getDouble("txtMprQty" + array_RowId[i]);
								
								String txtPONo = box.getString("txtPONo" + array_RowId[i]);
								double txtPORate = box.getDouble("txtPORate" + array_RowId[i]);
								String txtPODate = box.getString("txtPODate" + array_RowId[i]);
								String txtSupplier = box.getString("txtSupplier" + array_RowId[i]);
								double pendingPOQty  = box.getDouble("txtQtAC" + array_RowId[i]);
								double txtStockQty= box.getDouble("txtStockQty" + array_RowId[i]);
								String txtMprNo = box.getString("txtMprNo" + array_RowId[i]);
								double txtUnitRate= box.getDouble("txtUnitRate" + array_RowId[i]);
								String txtSources = box.getString("txtSources" + array_RowId[i]);	
								String txtTax = box.getString("txtTax" + array_RowId[i]);
								String Range = box.getString("Range" + array_RowId[i]);
								
								
								Object txtSources_array[] = (Object[])box.getValuesArray("txtSources" + array_RowId[i]);
								String Sources="";
								for(int s=0; s<txtSources_array.length; s++)
								   {
									Sources = Sources.concat(txtSources_array[s].toString());
									Sources = Sources.concat("\n");
									
								   }
								System.out.println();
								
								if(mprDetails!= null && tempMPRHeaderId == mprHeaderId)
								{							
									mprDetails.setQtyRequired(new BigDecimal(txtRequiredQty));
									//mprDetails.setDeliveryDate(HMSUtil.convertStringTypeDateToDateType(deliveryDate));
									mprDetails.setEstimatedValues(new BigDecimal(txtEstimatedValue).setScale(2, BigDecimal.ROUND_HALF_UP));
									mprDetails.setRemarks(txtRemarks);
									
									mprDetails.setMprNo(txtMprNo);
									mprDetails.setMprQty(new BigDecimal(txtMprQty).setScale(2, BigDecimal.ROUND_HALF_UP));
									mprDetails.setAvgMontlyConsumption(new BigDecimal(txtMonthlyConsp).setScale(2, BigDecimal.ROUND_HALF_UP));
									mprDetails.setPreviosPoNo(txtPONo);
									mprDetails.setPoRate(new BigDecimal(txtPORate).setScale(3, BigDecimal.ROUND_HALF_UP));
									mprDetails.setPoDate(HMSUtil.convertStringTypeDateToDateType(txtPODate));
									mprDetails.setPreviosSupplier(txtSupplier);
									mprDetails.setPendingQtyLastPo(new BigDecimal(pendingPOQty).setScale(2, BigDecimal.ROUND_HALF_UP));
									mprDetails.setQtyInStock(new BigDecimal(txtStockQty).setScale(2, BigDecimal.ROUND_HALF_UP));
									mprDetails.setUnitRate(new BigDecimal(txtUnitRate).setScale(3, BigDecimal.ROUND_HALF_UP));
									mprDetails.setSources(Sources);
									mprDetails.setTax(txtTax);
									mprDetails.setItemRangeCapacity(Range);
																
									hbt.update(mprDetails);
									hbt.refresh(mprDetails);
								}
								else
								{
									StoreMaterialPurchaseReqT mprDetails1 = new StoreMaterialPurchaseReqT();
																
									int ItemId = box.getInt("ItemId"+ array_RowId[i]);
									MasStoreItem item = new MasStoreItem();
									item.setId(ItemId);										
									
									System.out.println("ItemId="+ItemId);
									mprDetails1.setItem(item);
									mprDetails1.setQtyRequired(new BigDecimal(txtRequiredQty).setScale(2, BigDecimal.ROUND_HALF_UP));
									//mprDetails1.setDeliveryDate(HMSUtil.convertStringTypeDateToDateType(deliveryDate));
									mprDetails1.setEstimatedValues(new BigDecimal(txtEstimatedValue).setScale(2, BigDecimal.ROUND_HALF_UP));
									mprDetails1.setRemarks(txtRemarks);
									mprDetails1.setHeader(mprHeader);	
									
									mprDetails1.setMprNo(txtMprNo);
									mprDetails1.setMprQty(new BigDecimal(txtMprQty).setScale(2, BigDecimal.ROUND_HALF_UP));
									mprDetails1.setAvgMontlyConsumption(new BigDecimal(txtMonthlyConsp).setScale(2, BigDecimal.ROUND_HALF_UP));
									mprDetails1.setPreviosPoNo(txtPONo);
									mprDetails1.setPoRate(new BigDecimal(txtPORate).setScale(2, BigDecimal.ROUND_HALF_UP));
									mprDetails1.setPoDate(HMSUtil.convertStringTypeDateToDateType(txtPODate));
									mprDetails1.setPreviosSupplier(txtSupplier);
									mprDetails1.setPendingQtyLastPo(new BigDecimal(pendingPOQty).setScale(2, BigDecimal.ROUND_HALF_UP));
									mprDetails1.setQtyInStock(new BigDecimal(txtStockQty).setScale(2, BigDecimal.ROUND_HALF_UP));
									mprDetails1.setUnitRate(new BigDecimal(txtUnitRate).setScale(3, BigDecimal.ROUND_HALF_UP));
									mprDetails1.setSources(Sources);
									mprDetails1.setTax(txtTax);
									mprDetails1.setItemRangeCapacity(Range);
									
									hbt.save(mprDetails1);
									hbt.refresh(mprDetails1);
								}
								
								
								mprHeader.setHashTableQty(new BigDecimal(HashQty).setScale(2, BigDecimal.ROUND_HALF_UP));
								mprHeader.setHashTableValue(new BigDecimal(HashValue).setScale(2, BigDecimal.ROUND_HALF_UP));
								hbt.update(mprHeader);
								hbt.refresh(mprHeader);	
								
								
								
								
							}
						}
						tx.commit();
						bSuccessfullyAdded = true;
					}
					
					catch(Exception e)
					{
						System.out.println("dd="+e);
						if (tx != null) {
							tx.rollback();
							e.printStackTrace();
							System.out.print(e);
						}
					}
				   
			
		
		
				if (bSuccessfullyAdded) {
					
					if(txtRequestType.equalsIgnoreCase("SAVE"))
					{
						message = "MPR Details saved successfully";
								
					}
					
					if(txtRequestType.equalsIgnoreCase("SUBMIT"))
					{
						message = "MPR Details submitted successfully for Approval"; 
					}
					
				} else {

					message = "Try Again!";
				}
			
				
		
		

		datamap.put("message", message);
		datamap.put("bSuccessfullyAdded", bSuccessfullyAdded);
		
		return datamap;	
	
	}
	
	@Override
	public Map<String, Object> DeleteFromDatabase_AddRemoveGrid(Box box) {
		Map<String,Object> datamap = new HashMap<String,Object>();
		List<StoreMaterialPurchaseReqT> mprDetails = new ArrayList<StoreMaterialPurchaseReqT>();
		List<StoreInternalIndentT> mrDetails = new ArrayList<StoreInternalIndentT>();
		
		Transaction tx = null;
		Session session = (Session) getSession();		
		boolean bSuccessfullyDelete = false;		
			
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		int headerId = 0;
		String tableRowId = "";
		tableRowId = box.getString("valCheckBox");
		headerId = box.getInt("headerId");
		String ObjectName = box.getString("ObjectName");
        System.out.println("ObjectName="+ObjectName);
		String array_RowId[];
		array_RowId = tableRowId.split(",");
		System.out.println("array_RowId="+array_RowId+"tableRowId="+tableRowId);
		
		
		if (tableRowId != "" && ObjectName.equalsIgnoreCase("StoreMaterialPurchaseReqT") ) 
		{
			try{
			for (int i = 0; i < array_RowId.length; i++)
			{		
				
				tx = session.beginTransaction();
				
				mprDetails =  session.createCriteria(StoreMaterialPurchaseReqT.class)
						.add(Restrictions.eq("Id", Integer.parseInt(array_RowId[i])))
						.createAlias("Header", "header")
						.add(Restrictions.eq("header.Id", headerId))
						.list(); 
				if(mprDetails.size() > 0)
				{					
					hbt.deleteAll(mprDetails);					
				}
				
			}
			tx.commit();
			bSuccessfullyDelete = true;
			}catch(Exception e)
			{
				System.out.println("dd="+e);
				if (tx != null) {
					tx.rollback();
					e.printStackTrace();
					System.out.print(e);
				}
			}
		}	
		
		
		if (tableRowId != "" && ObjectName.equalsIgnoreCase("StoreInternalIndentT") ) 
		{
			try{
			for (int i = 0; i < array_RowId.length; i++)
			{		
				
				tx = session.beginTransaction();
				
				mrDetails =  session.createCriteria(StoreInternalIndentT.class)
						.add(Restrictions.eq("Id", Integer.parseInt(array_RowId[i])))
						.createAlias("Internal", "header")
						.add(Restrictions.eq("header.Id", headerId))
						.list(); 
				if(mrDetails.size() > 0)
				{					
					hbt.deleteAll(mrDetails);					
				}
				
			}
			tx.commit();
			bSuccessfullyDelete = true;
			}catch(Exception e)
			{
				System.out.println("dd="+e);
				if (tx != null) {
					tx.rollback();
					e.printStackTrace();
					System.out.print(e);
				}
			}
		}		
		
		
		System.out.print("bSuccessfullyDelete="+bSuccessfullyDelete);
		datamap.put("bSuccessfullyDelete", bSuccessfullyDelete);
		return datamap;
	}
	
	@Override
	public Map<String, Object> DeleteFromDatabase_AddRemoveGridRC(Box box) {
		Map<String,Object> datamap = new HashMap<String,Object>();
		List<RcDetails> rcDetails = new ArrayList<RcDetails>();
		List<RcRequestDetails> rcReqDetails = new ArrayList<RcRequestDetails>();
	
		
		
		Transaction tx = null;
		Session session = (Session) getSession();		
		boolean bSuccessfullyDelete = false;		
			
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		int headerId = 0;
		String tableRowId = "";
		tableRowId = box.getString("valCheckBox");
		headerId = box.getInt("headerId");
		String ObjectName = box.getString("ObjectName");
        System.out.println("ObjectName="+ObjectName);
		String array_RowId[];
		array_RowId = tableRowId.split(",");
		System.out.println("array_RowId="+array_RowId+"tableRowId="+tableRowId);
		
		
		if (tableRowId != "" && ObjectName.equalsIgnoreCase("RcDetails") ) 
		{
			try{
			for (int i = 0; i < array_RowId.length; i++)
			{		
				
				tx = session.beginTransaction();
				
				rcDetails =  session.createCriteria(RcDetails.class)
						.add(Restrictions.eq("Id", Integer.parseInt(array_RowId[i])))
						.createAlias("Header", "header")
						.add(Restrictions.eq("header.Id", headerId))
						.list(); 
				if(rcDetails.size() > 0)
				{					
					hbt.deleteAll(rcDetails);					
				}
				
			}
			tx.commit();
			bSuccessfullyDelete = true;
			}catch(Exception e)
			{
				System.out.println("dd="+e);
				if (tx != null) {
					tx.rollback();
					e.printStackTrace();
					System.out.print(e);
				}
			}
		}
		
		if (tableRowId != "" && ObjectName.equalsIgnoreCase("RcRequestDetails") ) 
		{
			try{
			for (int i = 0; i < array_RowId.length; i++)
			{		
				
				tx = session.beginTransaction();
				
				rcReqDetails =  session.createCriteria(RcRequestDetails.class)
						.add(Restrictions.eq("Id", Integer.parseInt(array_RowId[i])))
						.createAlias("Header", "header")
						.add(Restrictions.eq("header.Id", headerId))
						.list(); 
				
				if(rcReqDetails.size() > 0)
				{					
					hbt.deleteAll(rcReqDetails);					
				}
				
			}
			tx.commit();
			bSuccessfullyDelete = true;
			}catch(Exception e)
			{
				System.out.println("dd="+e);
				if (tx != null) {
					tx.rollback();
					e.printStackTrace();
					System.out.print(e);
				}
			}
		}	
		
	/*	
		if (tableRowId != "" && ObjectName.equalsIgnoreCase("RcDetails") ) 
		{
			try{
			for (int i = 0; i < array_RowId.length; i++)
			{		
				
				tx = session.beginTransaction();
				
				mrDetails =  session.createCriteria(StoreInternalIndentT.class)
						.add(Restrictions.eq("Id", Integer.parseInt(array_RowId[i])))
						.createAlias("Internal", "header")
						.add(Restrictions.eq("header.Id", headerId))
						.list(); 
				if(mrDetails.size() > 0)
				{					
					hbt.deleteAll(mrDetails);					
				}
				
			}
			tx.commit();
			bSuccessfullyDelete = true;
			}catch(Exception e)
			{
				System.out.println("dd="+e);
				if (tx != null) {
					tx.rollback();
					e.printStackTrace();
					System.out.print(e);
				}
			}
		}	*/	
		
		
		System.out.print("bSuccessfullyDelete="+bSuccessfullyDelete);
		datamap.put("bSuccessfullyDelete", bSuccessfullyDelete);
		return datamap;
	}
	

	public Map<String, Object> showVendorReturnRptJsp() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreGrnReturnM> storeGrnReturnMList = new ArrayList<StoreGrnReturnM>();
		session = (Session) getSession();
		try {
			storeGrnReturnMList = getHibernateTemplate()
			.find(
					"from jkt.hms.masters.business.StoreGrnReturnM as m order by m.StoreGrnReturnM");
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("storeGrnReturnMList", storeGrnReturnMList);
		return map;
	}


	@Override
	public Map<String, Object> showDepartmentReturnRegJsp(int hospitalId) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		session = (Session) getSession();
		try {
			departmentList = getHibernateTemplate()
					.find(
							"from jkt.hms.masters.business.MasDepartment as ms where ms.Hospital.Id='"+hospitalId+"' and ms.Status='y' order by ms.DepartmentName");
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("departmentList", departmentList);
		return map;
	}

	@Override
	public Map<String, Object> showVendorReturnRegJsp(int hospitalId) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreSupplier> storeSupplierList = new ArrayList<MasStoreSupplier>();
		session = (Session) getSession();
		try {
			storeSupplierList = getHibernateTemplate()
					.find(
							"from jkt.hms.masters.business.MasStoreSupplier as ms where ms.Hospital.Id='"+hospitalId+"' order by ms.SupplierName");
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("storeSupplierList", storeSupplierList);
		return map;
	}
	
	public Map<String, Object> dailyIssueSummryReport() {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		String type="";
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasDivision> divisionList = new ArrayList<MasDivision>();
		List<MasZonal> zonalList = new ArrayList<MasZonal>();
		String departmentCodeForDispensary = HMSUtil.getProperties("adt.properties", "departmentCodeForDispensary");
		session = (Session) getSession();
		try {
			String departmentTypeCodeForOpd = HMSUtil.getProperties("adt.properties", "departmentTypeCodeForOpd");
			 departmentList=session.createCriteria(MasDepartment.class)
					 .createAlias("DepartmentType", "dt")					
					 .add(Restrictions.eq("Status", "y"))					
					 .add(Restrictions.eq("dt.DepartmentTypeCode", departmentTypeCodeForOpd)).list();
				map.put("departmentList", departmentList);
			
			 divisionList=session.createCriteria(MasDivision.class).
					add(Restrictions.eq("Status", "y")).list();
					map.put("divisionList", divisionList);
					
					 zonalList=session.createCriteria(MasZonal.class).
								add(Restrictions.eq("Status", "y")).list();
								map.put("zonalList", zonalList);
								
								List<Users> pharmacistList = new ArrayList<Users>();
								pharmacistList =  session.createCriteria(Users.class)
										.createAlias("Employee", "emp")
										.createAlias("emp.Department", "dept")
								        .add(Restrictions.eq("dept.DepartmentCode", departmentCodeForDispensary).ignoreCase())
												.add(Restrictions.eq("emp.Status", "y").ignoreCase())
												.add(Restrictions.eq("Status", "y").ignoreCase())
												.addOrder(Order.asc("emp.FirstName")).list();
										map.put("pharmacistList", pharmacistList);
										
		} catch (Exception e) {
			e.printStackTrace();
		}
		

		return map;
	}
	
	@Override
	public Map<String, Object> showRCPrintJsp(int hospitalId) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		session = (Session) getSession();
		Properties properties = new Properties();
		URL resourcePath = Thread.currentThread().getContextClassLoader()
		.getResource("adt.properties");
		int departmentTypeIdWard=0;
		try {
			properties.load(resourcePath.openStream());
		} catch (Exception e) {
			e.printStackTrace();
		}

		 String departmentTypeCodeForWard = properties.getProperty("departmentTypeCodeForWard");
			List<String> arrayDeptCode = new ArrayList<String>();
			arrayDeptCode.add(departmentTypeCodeForWard);
			
			
		
	
		try {
			
			departmentList = session.createCriteria(MasDepartment.class)
					.createAlias("DepartmentType", "dt").add(Restrictions.in("dt.DepartmentTypeCode", arrayDeptCode))	
					.add(Restrictions.eq("Status", "y")).list();
		} catch (Exception e) {
			e.printStackTrace();
		}
	
		 
		map.put("departmentList", departmentList);
		return map;
	}

	

	@Override
	public Map<String, Object> showRequestForQuotationJsp(Map<String, Object> dataMap)
	{
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier>();		
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<StoreMaterialPurchaseReqM>mprList=new ArrayList<StoreMaterialPurchaseReqM>();
		List<MprPriority>priorityList=new ArrayList<MprPriority>();
		String max = "";
		String no = "";
		int hospitalId=(Integer)dataMap.get("hospitalId");
		
		Session session = (Session) getSession();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_AUTO");
		hbt.setCheckWriteOperations(false);	
		
		supplierList = session.createCriteria(MasStoreSupplier.class)
		.add(Restrictions.eq("Hospital.Id",hospitalId))
		.add(Restrictions.eq("Status", "y"))
		.addOrder(Order.asc("SupplierName")).list();
		
		
		
		
		map.put("supplierList",supplierList);
		
		
		System.out.println("supplierList="+supplierList.size());
		
		map.put("max", max);
		return map;
	}

	

	
	
	@SuppressWarnings("unchecked")
	public Map<String, Object> getMPRListListbasedonYear(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreMaterialPurchaseReqM> mprList = new ArrayList<StoreMaterialPurchaseReqM>();
	
		
		
     
		int yearId = box.getInt("yearId");
		try {
	
			mprList=session.createCriteria(StoreMaterialPurchaseReqM.class)
					.createAlias("Financial", "yr")
					.add(Restrictions.eq("yr.Id",yearId))
					.add(Restrictions.eq("Status","y").ignoreCase())					
					.list();
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		//System.out.println("mprList="+mprList.size());
		map.put("mprList", mprList);
		
		return map;
	}
	
	@SuppressWarnings("unchecked")
	public Map<String, Object> getMPRDetailsforQuotation(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreMaterialPurchaseReqT> mprList = new ArrayList<StoreMaterialPurchaseReqT>();
	
		
		int hospitalId = box.getInt("hospitalId");
		int deptId = box.getInt("deptId");
     
		int mprNo = box.getInt("mprNo");
		try {
	
			mprList=session.createCriteria(StoreMaterialPurchaseReqT.class)
					.createAlias("Header", "hd")
					.add(Restrictions.eq("hd.Id",mprNo))
					.add(Restrictions.eq("hd.Status","y").ignoreCase())					
					.list();
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		//System.out.println("mprList="+mprList.size());
		map.put("mprList", mprList);
		
		return map;
	}
	
	@Override
	public Map<String, Object> saveEnquiryforQuotation(Box box) {

		
		Map<String,Object>datamap = new HashMap<String,Object>();
		
		List<StoreQuotationRequestM> listA = new ArrayList<StoreQuotationRequestM>();
		Session session = (Session) getSession();
		Transaction tx = null;
		boolean bSuccessfullyAdded = false;
		int quotationHeaderId=0;
		
		String message= "";
		//String ProjectionSystemGeneratedHeaderId = "PRJ001";
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		
		String txtRequestType = box.getString("txtRequestType"); // for save/submit(forward) to centre HEAD
		String enquiryDate = box.getString("enquiryDate");
		String dueDate = box.getString("dueDate");
		String quotationNo = "";
		String deliveryInstruction="";
	
		int ddlRequestYear = box.getInt("ddlRequestYear");
		int mprHeaderId= box.getInt("mprNo");
		
		Object supplier_array[] = (Object[])box.getValuesArray("supplier");
		
		String MPRSeq="";
		String QNo="";
		
		StoreMaterialPurchaseReqM mprObj = new StoreMaterialPurchaseReqM();
		mprObj.setId(mprHeaderId);
		
			
		String Status = "n";
		if(txtRequestType.equalsIgnoreCase("SAVE"))
		{
			Status = "u";
		}
		if(txtRequestType.equalsIgnoreCase("SUBMIT"))
		{
			Status = "y";
		}
		
		int hospitalId = 0;
		
		int departmentId =0;
		
		deliveryInstruction = box.getString("deliveryInstruction");
		
		hospitalId = box.getInt("hospitalId");
		departmentId = box.getInt("deptId");
		
		MasHospital hospital = new MasHospital();
		hospital.setId(hospitalId);
		
		MasDepartment department = new MasDepartment();
		department.setId(departmentId);
		
		int UserId = box.getInt("CHANGED_BY");
		Users user = new Users();
		user.setId(UserId);
		
		Date changedDate = new Date();
		String changedTime = (String) HMSUtil.getCurrentDateAndTime().get("currentTime");
		
		boolean bRecordNotExist = true;
		Map<String, Object> adMap = new HashMap<String, Object>();
		
		List<Integer>supplierIdList = new ArrayList<Integer>();
		
		for(int s=0; s<supplier_array.length; s++)
		   {
			   int supplierId = Integer.parseInt(supplier_array[s].toString());
			   supplierIdList.add(supplierId);
		   }
		
		tx = session.beginTransaction(); 
		
		
		
		listA = session.createCriteria(StoreQuotationRequestM.class)
		.createAlias("MprHeader", "header").add(Restrictions.eq("header.Id", mprHeaderId)).list();
		System.out.println("listA="+listA.size());
		if(listA.size()>0)
		{
			/*bRecordNotExist=false;*/
			for(StoreQuotationRequestM sqrm: listA) {
             
				hbt.deleteAll(sqrm.getStoreQuotationRequestTs());
				
			}
			quotationNo = listA.get(0).getRequestNo().trim();
			
			hbt.deleteAll(listA); 
			
		}
		
		int MPRTypeId=0;
		StoreMaterialPurchaseReqM objMPRHeader = (StoreMaterialPurchaseReqM)hbt.get(StoreMaterialPurchaseReqM.class, mprHeaderId);
		if(objMPRHeader != null)
		{
			MPRTypeId=objMPRHeader.getMprPriority().getId();
		}
				
				
			   if(bRecordNotExist)
			   {			   
				   try{
					   
						
					
						if(quotationNo.equals(""))
						{
							 adMap.put("tableObjectName", "StoreQuotationRequestM");			
								adMap.put("isHospitalWise", "n");
								adMap.put("hospitalId", hospitalId);
								adMap.put("isYearly", "y");			
								adMap.put("isMonthly", "n");
								adMap.put("isPrefix", "y");
							    
								if(MPRTypeId == 1)
								adMap.put("transactionPrefixProperty", "transactionPrefixForDrugQuotation");
								if(MPRTypeId == 2)
									adMap.put("transactionPrefixProperty", "transactionPrefixForNonDrugQuotation");
								
								try{
									quotationNo = HMSUtil.generateTransactionSequence(adMap, session, hbt);
								}catch(Exception e)
								{
									System.out.print("Exception in generate  Quotation No="+e);
								}
								/*StoreMaterialPurchaseReqM mprHeader = new StoreMaterialPurchaseReqM();
								mprHeader = (StoreMaterialPurchaseReqM) hbt.get(StoreMaterialPurchaseReqM.class,mprHeaderId);*/
								if(objMPRHeader !=null)
								{
									String MPRNo=objMPRHeader.getMprNo();
									int firstpos = HMSUtil.ordinalIndexOf(MPRNo, "/", 2);
								    int secpos = HMSUtil.ordinalIndexOf(MPRNo, "/", 3);
								    
								    MPRSeq = MPRNo.substring(firstpos+1,secpos);
								    quotationNo=quotationNo+"/"+MPRSeq;
									
								
								}
								
						}
						
							int supplier = 0;
				   for(int s=0; s<supplier_array.length; s++)
				   {
					   supplier = Integer.parseInt(supplier_array[s].toString());
					   MasStoreSupplier supplierObj = new MasStoreSupplier();
						supplierObj.setId(supplier);
					StoreQuotationRequestM quotationHeader = new StoreQuotationRequestM();
				   quotationHeader.setRequestNo(quotationNo);
				   quotationHeader.setDueDate(HMSUtil.convertStringTypeDateToDateType(dueDate));
				   quotationHeader.setRequestDate(HMSUtil.convertStringTypeDateToDateType(enquiryDate));
				   if(supplier !=0)
				   {
					   quotationHeader.setSupplier(supplierObj);
				   }
				   
				   quotationHeader.setDepartment(department);
				   MasStoreFinancial fy = new MasStoreFinancial();
				   fy.setId(ddlRequestYear);
				   quotationHeader.setYear(fy);
				   
				   quotationHeader.setPreparedBy(user);	
				   quotationHeader.setMprHeader(mprObj);
				   quotationHeader.setLastChgDate(changedDate);
				   quotationHeader.setStatus(Status);
				   quotationHeader.setDeliveryInstruction(deliveryInstruction);
				   				

						hbt.save(quotationHeader);
						hbt.refresh(quotationHeader);						
						
						
						String tableRowId = "";
						tableRowId = box.getString("tableRowId");
						
						System.out.println("tableRowId="+tableRowId);

						String array_RowId[];
						array_RowId = tableRowId.split(",");
						System.out.println("array_RowId="+array_RowId+"tableRowId="+tableRowId);

						double HashQty =0;
						double HashValue=0;
						if (tableRowId != "") 
						{
							for (int i = 0; i < array_RowId.length; i++)
							{
								System.out.println("ItemId"+ array_RowId[i]);
								int mprDetailsId = Integer.parseInt(array_RowId[i]);
								StoreMaterialPurchaseReqT mprDetailsObj = new StoreMaterialPurchaseReqT();
								mprDetailsObj.setId(mprDetailsId);
								//int ItemId = mprDetailsObj.getItem().getId();	
								
								//MasStoreItem item = new MasStoreItem();
								//item.setId(ItemId);	
								
								
								StoreQuotationRequestT quotationDetails = new StoreQuotationRequestT();								
								//quotationDetails.setItem(item);
								quotationDetails.setMprDetails(mprDetailsObj);	
								
								quotationDetails.setMaster(quotationHeader);									
								
								hbt.save(quotationDetails);
								hbt.refresh(quotationDetails);		
								
						
							
								
								
							    
								
								
							}
						}
						
						
						quotationHeaderId = quotationHeader.getId();
						
						bSuccessfullyAdded = true;
				   }
				   tx.commit();
					}
					
					catch(Exception e)
					{
						System.out.println("Error is QuotationSubmission="+e);
						if (tx != null) {
							tx.rollback();
							e.printStackTrace();
							System.out.print(e);
						}
					}
				   
			   }// close if for bRecordExist
		
		
		        if(bRecordNotExist)
		        {
		        	if (bSuccessfullyAdded) {
						
						if(txtRequestType.equalsIgnoreCase("SAVE"))
						{
							message = "Quotation saved successfully and Refernce Number is: "
									+ quotationNo;
						}
						
						if(txtRequestType.equalsIgnoreCase("SUBMIT"))
						{
							message = "Quotation submit successfully and Refernce Number is: "
									+ quotationNo;
						}
		        }
		        	else
		        	{
		        		message = "Try Again";
		        	}
				
					
				} else {

					message = "Quotation already submitted for this vendor and MPR";
				}		

		datamap.put("message", message);
		datamap.put("bSuccessfullyAdded", bSuccessfullyAdded);
		datamap.put("quotationHeaderId", quotationHeaderId);
		
		return datamap;	
		
		
	}
	
	@Override
	public Map<String, Object> getListOfEnquiry(Box box) {
		Map<String,Object> datamap = new HashMap<String,Object>();
		List<StoreQuotationRequestM> enquiryList = new ArrayList<StoreQuotationRequestM>();
		
		Session session = (Session) getSession();
		int pagingSize = 10;
		int pageNo = 1;		
		int mprNo = 0;		
		int ddlRequestYear = 0;
		int ddlSupplier=0;
		int hospitalId = 0;
		
		
		if (box.getString("PN") != null)
			pageNo = Integer.parseInt(box.getString("PN"));
		
		if (box.getString("mprNo") != null)
			mprNo = box.getInt("mprNo");
		if (box.getString("ddlRequestYear") != null)
			ddlRequestYear = box.getInt("ddlRequestYear");
		if (box.getString("ddlSupplier") != null)
			ddlSupplier = box.getInt("ddlSupplier");	
		
		String quotationNo = box.getString("quotationNo");
		
		
		
		Criteria cr = null;
		cr = session.createCriteria(StoreQuotationRequestM.class);
		cr = cr.addOrder(Order.desc("LastChgDate"));
		
		
		if (mprNo != 0 ) {
			cr = cr.createAlias("MprHeader", "mpr");
			cr = cr.add(Restrictions.eq("mpr.Id", mprNo));
		}
		
		if (ddlRequestYear != 0 ) {
			cr = cr.createAlias("Year", "yr");
			cr = cr.add(Restrictions.eq("yr.Id", ddlRequestYear));
		}
		
		if (ddlSupplier != 0 ) {
			cr = cr.createAlias("Supplier", "sp");
			cr = cr.add(Restrictions.eq("sp.Id", ddlSupplier));
		}
		
		if (!quotationNo.equalsIgnoreCase("NA")) {
			
			cr = cr.add(Restrictions.eq("RequestNo", quotationNo));
		}
		
		
		List totalMatches = cr.list();
		cr = cr.setFirstResult(pagingSize * (pageNo - 1));
		cr = cr.setMaxResults(pagingSize);
		enquiryList = cr.list();

		System.out.println("Total records=" + totalMatches.size());
		int totalRecords = totalMatches.size();
		totalMatches.clear();

		System.out.println("Size of enquiryList in dataservice="
				+ enquiryList.size());

		datamap.put("enquiryList", enquiryList);
		datamap.put("totalRecords", totalRecords);

		return datamap;

	}

	
	
	public Map<String, Object> getVendorQuotationDetails(int headerId) 
	{
		Map<String,Object> datamap = new HashMap<String,Object>();
		List<StoreQuotationRequestM> quotationHeader = new ArrayList<StoreQuotationRequestM>();
		List<StoreQuotationRequestT> quotationDetails = new ArrayList<StoreQuotationRequestT>();
		List<MasStoreSupplier> masStoreSupplierList = new ArrayList<MasStoreSupplier>();
				
		Session session = (Session) getSession();
		Criteria cr = null;
		cr = session.createCriteria(StoreQuotationRequestT.class);
		cr = cr.createAlias("Master", "header");
		cr = cr.add(Restrictions.eq("header.Id", headerId));
		quotationDetails = cr.list();
		
		cr = session.createCriteria(StoreQuotationRequestM.class);		
		cr = cr.add(Restrictions.eq("Id", headerId));
		quotationHeader = cr.list();	
		
		
		masStoreSupplierList = session.createCriteria(MasStoreSupplier.class)
		.createAlias("StoreQuotationRequestMs", "rm")
		.add(Restrictions.eq("rm.MprHeader.Id", quotationHeader.get(0).getMprHeader().getId())).list();
		
		cr = cr.add(Restrictions.eq("Id", headerId));
		quotationHeader = cr.list();
		
		datamap.put("quotationDetails", quotationDetails);
		datamap.put("quotationHeader", quotationHeader);
		datamap.put("masStoreSupplierList", masStoreSupplierList);
		
		return datamap;
		
		
	}
	
	@SuppressWarnings("unchecked")
	public Map<String, Object> getEnquiryListListbasedonYear(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		/*List<StoreQuotationRequestM> enquiryList = new ArrayList<StoreQuotationRequestM>();*/
		List<Object[]> enquiryList = new ArrayList<Object[]>();
		
	
		
		
     
		int yearId = box.getInt("yearId");
		try {
	
			/*enquiryList=session.createCriteria(StoreQuotationRequestM.class)
					.createAlias("Year", "yr")
					.add(Restrictions.eq("yr.Id",yearId))
					.add(Restrictions.eq("Status","y").ignoreCase())					
					.list();*/
			
			enquiryList=session.createCriteria(StoreQuotationRequestM.class)
					.createAlias("Year", "yr")
					.add(Restrictions.eq("yr.Id",yearId))
					.add(Restrictions.eq("Status","y").ignoreCase())	
					.setProjection(Projections.projectionList()
							.add(Projections.property("RequestNo"))
					.add(Projections.groupProperty("RequestNo")))
					.list();
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		//System.out.println("mprList="+mprList.size());
		map.put("enquiryList", enquiryList);
		System.out.println("enquiryList="+enquiryList.size());
		
		return map;
	}
	
	
	@SuppressWarnings("unchecked")
	public Map<String, Object> getVendorDetailsforPO(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<Object[]> quotationList = new ArrayList<Object[]>();
	
		
		int hospitalId = box.getInt("hospitalId");
		int deptId = box.getInt("deptId");
		Criteria cr=null;
     
		String quotationNo = box.getString("quotationNo");
		try {
	
			cr=session.createCriteria(StoreQuotationRequestT.class)
					.createAlias("Master", "hd").createAlias("hd.Supplier", "supplier")
					.add(Restrictions.eq("hd.RequestNo",quotationNo))
					.add(Restrictions.eq("hd.Status","y").ignoreCase())	;
					
					
			
			quotationList = cr.setProjection(Projections.projectionList().add(Projections.groupProperty("supplier.Id")).add(Projections.groupProperty("supplier.SupplierName")).add(Projections.groupProperty("supplier.Address1")).add(Projections.groupProperty("supplier.Address2"))).list();
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		//System.out.println("mprList="+mprList.size());
		map.put("quotationList", quotationList);
		System.out.println("quotationList="+quotationList.size());
		
		return map;
	}
	
	@SuppressWarnings("unchecked")
	public Map<String, Object> getQuotationDetailsforPO(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreQuotationRequestT> quotationList = new ArrayList<StoreQuotationRequestT>();
		List<StoreQuotationRequestM> quotationHList = new ArrayList<StoreQuotationRequestM>();
		
	
		
		int hospitalId = box.getInt("hospitalId");
		int deptId = box.getInt("deptId");
     
		String quotationNo = box.getString("quotationNo");
		try {
	
			
			quotationHList=session.createCriteria(StoreQuotationRequestM.class)
					
					.add(Restrictions.eq("RequestNo",quotationNo))
					.add(Restrictions.eq("Status","y").ignoreCase())	
					
					.list();
			
			int hId = quotationHList.get(0).getId();
			
			
			quotationList=session.createCriteria(StoreQuotationRequestT.class)
					.createAlias("Master", "hd")
					.add(Restrictions.eq("hd.Id",hId))
					.add(Restrictions.eq("hd.Status","y").ignoreCase())	
					
					.list();
			
			
		
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		//System.out.println("mprList="+mprList.size());
		map.put("quotationList", quotationList);
		System.out.println("quotationList1="+quotationList.size());
		
		return map;
	}
	
	@Override
	public Map<String, Object> savePO(Box box) {

		
		Map<String,Object>datamap = new HashMap<String,Object>();
		
		List<StorePoHeader> listA = new ArrayList<StorePoHeader>();
		List<StorePoDetail> poDList = new ArrayList<StorePoDetail>();
		List<StoreQuotationRequestM> listB = new ArrayList<StoreQuotationRequestM>();
		Session session = (Session) getSession();
		Transaction tx = null;
		boolean bSuccessfullyAdded = false;
		
		String message= "";
		//String ProjectionSystemGeneratedHeaderId = "PRJ001";
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		
		String txtRequestType = box.getString("txtRequestType"); // for save/submit(forward) to centre HEAD
		String poDate = box.getString("poDate");
		String deliveryDate = box.getString("deliveryDate");
		String poNo = box.getString("poNo");
		int poHeaderId=box.getInt("poHeaderId");
	
		int ddlRequestYear = box.getInt("ddlRequestYear");
		String quotationNo= box.getString("quotationNo");
		int supplierId = box.getInt("supplierId");
		int hospitalId=box.getInt("hospitalId");
		
		
		
		
			
		
			
		String Status = "n";
		if(txtRequestType.equalsIgnoreCase("SAVE"))
		{
			Status = "u";
		}
		if(txtRequestType.equalsIgnoreCase("SUBMIT"))
		{
			Status = "y";
		}
		
		String QSeq="";
		String PONO="";
		
		int departmentId =0;		
		
		
		hospitalId = box.getInt("hospitalId");
		departmentId = box.getInt("deptId");
		
		MasHospital hospital = new MasHospital();
		hospital.setId(hospitalId);
		
		MasDepartment department = new MasDepartment();
		department.setId(departmentId);
		
		int UserId = box.getInt("CHANGED_BY");
		Users user = new Users();
		user.setId(UserId);
		
		Date changedDate = new Date();
		String changedTime = (String) HMSUtil.getCurrentDateAndTime().get("currentTime");
		
		boolean bRecordNotExist = true;
		Map<String, Object> adMap = new HashMap<String, Object>();
		
		tx = session.beginTransaction(); 
		 try{
			 
		listB = session.createCriteria(StoreQuotationRequestM.class)
				.add(Restrictions.eq("RequestNo", quotationNo))
				.list();
		
		int quotationHeaderId=0;
		int TypeId=0;
		
		if(listB.size()>0)
		{
			for(StoreQuotationRequestM list:listB)
			{
				quotationHeaderId = list.getId();
				TypeId = list.getMprHeader().getMprPriority().getId();
			}
		}
		
		listB.clear();
		listA = session.createCriteria(StorePoHeader.class)
		.add(Restrictions.eq("Id", poHeaderId))
		.list();
		poDList = session.createCriteria(StorePoDetail.class)
				.createAlias("Po", "po")
				.add(Restrictions.eq("po.Id", poHeaderId))
				.list();
		System.out.println("listA="+listA.size());
		System.out.println("poDList="+poDList.size());
		if(listA.size()>0)
		{
			/*bRecordNotExist=false;*/
			if(listA.size()>0)
			{
				
			
				hbt.deleteAll(poDList); 
				hbt.deleteAll(listA); 
				
			}
		}
			   if(bRecordNotExist)
			   {			   
				  
						
					
					StorePoHeader poHeader = new StorePoHeader();				   
				   /* adMap.put("tableObjectName", "StorePoHeader");			
					adMap.put("isHospitalWise", "n");
					adMap.put("hospitalId", hospitalId);
					adMap.put("isYearly", "y");			
					adMap.put("isMonthly", "n");
					adMap.put("isPrefix", "y");
				
					if(TypeId ==1)
					adMap.put("transactionPrefixProperty", "transactionPrefixForDrugPO");
					if(TypeId ==2)
						adMap.put("transactionPrefixProperty", "transactionPrefixForNonDrugPO");
					
					try{
						poNo = HMSUtil.generateTransactionSequence(adMap, session, hbt);
					}catch(Exception e)
					{
						System.out.print("Exception in generate  Quotation No="+e);
					}*/
					poHeader.setPoNumber(poNo);
					poHeader.setPoDate(HMSUtil.convertStringTypeDateToDateType(poDate));
					poHeader.setDeliveryDate(HMSUtil.convertStringTypeDateToDateType(deliveryDate));
					
				  if(quotationHeaderId !=0)
				   {
					   StoreQuotationRequestM quotationHeader = new StoreQuotationRequestM();
					   quotationHeader.setId(quotationHeaderId);
					   poHeader.setQuotation(quotationHeader);
				   }
				  if(supplierId != 0)
				  {
					  MasStoreSupplier supplier = new MasStoreSupplier();
					  supplier.setId(supplierId);
					  poHeader.setSupplier(supplier);
				  }
				   
				   poHeader.setDepartment(department);
				   MasStoreFinancial fy = new MasStoreFinancial();
				   fy.setId(ddlRequestYear);
				   poHeader.setFinancialYear(fy);				   
				   poHeader.setLastChgBy(user);					  
				   poHeader.setLastChgDate(changedDate);
				   poHeader.setStatus(Status);
				   if(hospitalId !=0)
				   {
					   MasHospital hospital1 = new MasHospital();
					   hospital1.setId(hospitalId);
					   poHeader.setHospital(hospital1);
				   }
				   
				   poHeader.setReference(box.getString("ReferenceNo"));
				   String mprApprovalDate = box.getString("mprApprovalDate");
				   poHeader.setMprApprovalDate(HMSUtil.convertStringTypeDateToDateType(mprApprovalDate));
				   String ProposalDate = box.getString("ProposalDate");
				   poHeader.setProposalDate(HMSUtil.convertStringTypeDateToDateType(ProposalDate));
				   String ProposalApprovalDate = box.getString("ProposalApprovalDate");
				   poHeader.setProposalApprovalDate(HMSUtil.convertStringTypeDateToDateType(ProposalApprovalDate));
				   poHeader.setProposalNo(box.getString("ProposalNo"));
				   
				   int ddlstockist = box.getInt("ddlstockist");
				   if(ddlstockist != 0)
					  {
						  MasStoreSupplier stockist = new MasStoreSupplier();
						  stockist.setId(ddlstockist);
						  poHeader.setStockist(stockist);
					  }
				   poHeader.setTaxTerm(box.getString("TaxDetails"));
				   poHeader.setDeliverySchedule(box.getString("DeliverySchedule"));
				   poHeader.setPayTerms(box.getString("PaymentTerms"));
				   
				   
				   
				 
				   				

						hbt.save(poHeader);
						hbt.refresh(poHeader);						
						
						
						String tableRowId = "";
						tableRowId = box.getString("tableRowId");
						
						System.out.println("tableRowId="+tableRowId);

						String array_RowId[];
						array_RowId = tableRowId.split(",");
						System.out.println("array_RowId="+array_RowId+"tableRowId="+tableRowId);
						
						if (tableRowId != "") 
						{
							for (int i = 0; i < array_RowId.length; i++)
							{
								System.out.println("ItemId"+ array_RowId[i]);
								int quotationDetailsId = Integer.parseInt(array_RowId[i]);
								StoreQuotationRequestT detailsObj = new StoreQuotationRequestT();
								detailsObj.setId(quotationDetailsId);							
								
								StorePoDetail poDetails = new StorePoDetail();							
								
								poDetails.setPo(poHeader);	
								poDetails.setQuotationDetails(detailsObj);
								int itemId = box.getInt("txtItemId"+array_RowId[i]);
								if(itemId !=0)
								{
									MasStoreItem item = new MasStoreItem();
									item.setId(itemId);
									poDetails.setItem(item);
								}
								int brandId = box.getInt("brandId"+array_RowId[i]);
								if(brandId != 0)
								{
									MasStoreBrand br = new MasStoreBrand();
									br.setId(brandId);
									poDetails.setBrand(br);
								}
								int manufacturerId = box.getInt("manufacturerId"+array_RowId[i]);
								if(manufacturerId != 0)
								{
									MasManufacturer mn = new MasManufacturer();
									mn.setId(manufacturerId);
									poDetails.setManufacturer(mn);
								}
								
								poDetails.setQuantityOrdered(new BigDecimal(box.getString("txtQtyReq"+array_RowId[i])));
								poDetails.setAmount(new BigDecimal(box.getString("txtItemValue"+array_RowId[i])));
								poDetails.setUnitRate(new BigDecimal(box.getString("txtUnitRate"+array_RowId[i])));
								poDetails.setAmount(new BigDecimal(box.getString("txtItemValue"+array_RowId[i])));
								poDetails.setChemicalComposition(box.getString("chemicalComposition"+array_RowId[i]));
																
								
								
								/*int itemId = box.getInt("ItemId"+array_RowId[i]));
								MasStoreMan item = new MasStoreItem();
								item.setId(itemId);*/
								
								hbt.save(poDetails);
								hbt.refresh(poDetails);	
								poHeaderId = poHeader.getId();
								
								
							}
						}
						
						
						
						
						StoreQuotationRequestM qHeader = new StoreQuotationRequestM();
						qHeader = (StoreQuotationRequestM) hbt.get(StoreQuotationRequestM.class,quotationHeaderId);
						if(qHeader !=null)
						{
							String qNo=qHeader.getRequestNo();
							int firstpos = HMSUtil.ordinalIndexOf(qNo, "/", 2);
						    int secpos = HMSUtil.ordinalIndexOf(qNo, "/", 3);
						    
						    QSeq = qNo.substring(firstpos+1,secpos);
						}
						
						//poHeader.setPoNumber(poNo+"/"+QSeq);
						//PONO=poNo+"/"+QSeq;
						hbt.save(poHeader);
						hbt.refresh(poHeader);	
						
						tx.commit();
						bSuccessfullyAdded = true;
					}
					
					
				   
			   }// close if for bRecordExist
		
			   catch(Exception e)
				{
					System.out.println("Error is POSubmission="+e);
					if (tx != null) {
						tx.rollback();
						e.printStackTrace();
						System.out.print(e);
					}
				}
		        if(bRecordNotExist)
		        {
		        	if (bSuccessfullyAdded) {
						
						if(txtRequestType.equalsIgnoreCase("SAVE"))
						{
							message = "Purchase Order saved successfully and Refernce Number is: "
									+ poNo;
						}
						
						if(txtRequestType.equalsIgnoreCase("SUBMIT"))
						{
							message = "Purchase Order submit successfully and Refernce Number is: "
									+ poNo;
						}
		        }
		        	else
		        	{
		        		message = "Try Again";
		        	}
				
					
				} else {

					message = "Purchase Order already created for this vendor and Quotation No";
				}		

		datamap.put("message", message);
		datamap.put("bSuccessfullyAdded", bSuccessfullyAdded);
		datamap.put("Id", poHeaderId);
		
		return datamap;	
		
		
	}
	
	@Override
	public Map<String, Object> getListOfPO(Box box) {
		Map<String,Object> datamap = new HashMap<String,Object>();
		List<StorePoHeader> poHeaderList = new ArrayList<StorePoHeader>();
		
		Session session = (Session) getSession();
		int pagingSize = 10;
		int pageNo = 1;		
		int mprNo = 0;		
		int ddlRequestYear = 0;
		int ddlSupplier=0;
		int hospitalId = 0;
		
		
		if (box.getString("PN") != null)
			pageNo = Integer.parseInt(box.getString("PN"));
		
		/*if (box.getString("mprNo") != null)
			mprNo = box.getInt("mprNo");*/
		if (box.getString("ddlRequestYear") != null)
			ddlRequestYear = box.getInt("ddlRequestYear");
		if (box.getString("ddlSupplier") != null)
			ddlSupplier = box.getInt("ddlSupplier");		
		
		
		
		Criteria cr = null;
		cr = session.createCriteria(StorePoHeader.class);
		cr = cr.addOrder(Order.desc("PoDate"));
		
		
		/*if (mprNo != 0 ) {
			cr = cr.createAlias("MprHeader", "mpr");
			cr = cr.add(Restrictions.eq("mpr.Id", mprNo));
		}*/
		
		if (ddlRequestYear != 0 ) {
			cr = cr.createAlias("FinancialYear", "yr");
			cr = cr.add(Restrictions.eq("yr.Id", ddlRequestYear));
		}
		
		if (ddlSupplier != 0 ) {
			cr = cr.createAlias("Supplier", "sp");
			cr = cr.add(Restrictions.eq("sp.Id", ddlSupplier));
		}
		
			
		
		
		List totalMatches = cr.list();
		cr = cr.setFirstResult(pagingSize * (pageNo - 1));
		cr = cr.setMaxResults(pagingSize);
		poHeaderList = cr.list();

		System.out.println("Total records=" + totalMatches.size());
		int totalRecords = totalMatches.size();
		totalMatches.clear();

		System.out.println("Size of PO in dataservice="
				+ poHeaderList.size());

		datamap.put("poHeaderList", poHeaderList);
		datamap.put("totalRecords", totalRecords);

		return datamap;

	}
	
	public Map<String, Object> getPODetails(int headerId) 
	{
		Map<String,Object> datamap = new HashMap<String,Object>();
		List<StorePoHeader> poHeader = new ArrayList<StorePoHeader>();
		List<StorePoDetail> poDetails = new ArrayList<StorePoDetail>();
		
				
		Session session = (Session) getSession();
		Criteria cr = null;
		cr = session.createCriteria(StorePoDetail.class);
		cr = cr.createAlias("Po", "header");
		cr = cr.add(Restrictions.eq("header.Id", headerId));
		poDetails = cr.list();
		
		cr = session.createCriteria(StorePoHeader.class);		
		cr = cr.add(Restrictions.eq("Id", headerId));
		poHeader = cr.list();	
		
		datamap.put("poDetails", poDetails);
		datamap.put("poHeader", poHeader);
		
		return datamap;
		
		
	}
	
	@SuppressWarnings("unchecked")
	public Map<String, Object> submitRCWaitingList(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean succesfullyAdded = false;
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setCheckWriteOperations(false);
		hbt.setFlushModeName("FLUSH_EAGER");
		Session session = (Session)getSession();
		List<PatientPrescriptionDetails> pdeatilsList = new ArrayList<PatientPrescriptionDetails>();
		Transaction tx= null;
		Date currentDate=new Date();
		String rcNo = "";
		try {
			Map<String,Object> utilMap = new HashMap<String,Object>();
			
			int userId = box.getInt("userId");			
			int hospitalId = box.getInt("hospitalId");
			int deptId = box.getInt("deptId");
			
			utilMap = (Map)HMSUtil.getCurrentDateAndTime();
			String currentTime = (String)utilMap.get("currentTime");
			
			MasStoreSupplier supplier = new MasStoreSupplier();
			Users user = new Users();
			user.setId(userId);
			MasHospital masHospitalObj = new MasHospital();
			masHospitalObj.setId(hospitalId);			
			MasDepartment md=new MasDepartment();
			md.setId(deptId);
			Date fromDate = new Date();
			Date toDate = new Date();
			if(box.get("fromDate")!=null)
				fromDate = HMSUtil.convertStringTypeDateToDateType(box.getString("fromDate"));
			if(box.get("toDate")!=null)
				toDate = HMSUtil.convertStringTypeDateToDateType(box.getString("toDate"));
			
			if(box.get("supplierId")!=null)
			{
				supplier.setId(box.getInt("supplierId"));
			}
			

			tx = session.beginTransaction();
			
			/*MasEmployee masEmployee = new MasEmployee();
			masEmployee.setId(box.getInt("empId"));*/
			
			
			
			
			map.put("tableObjectName", "IpdRcHeader");			
			map.put("isHospitalWise", "y");
			map.put("hospitalId", hospitalId);
			map.put("isYearly", "y");			
			map.put("isMonthly", "y");
			map.put("isPrefix", "y");
			map.put("transactionPrefixProperty", "transactionPrefixForRC");
			
			rcNo = HMSUtil.generateTransactionSequence(map, session, hbt);
			
			
		int count = box.getInt("count");
		RcHeader rcheader = new RcHeader();
		rcheader.setRcNo(rcNo);
		rcheader.setSupplier(supplier);
		rcheader.setDepartment(md);
		rcheader.setHospital(masHospitalObj);
		rcheader.setStatus("s");
		rcheader.setLastChgBy(user);
		rcheader.setLastChgDate(new Date());
		rcheader.setLastChgTime(currentTime);
		rcheader.setFromDate(fromDate);
		rcheader.setToDate(toDate);
		rcheader.setRcDate(new Date());
		hbt.save(rcheader);
		map.put("id", rcheader.getId());
		
		List<RcRequestDetails> requestDetails = new ArrayList<RcRequestDetails>(); 
		requestDetails = session.createCriteria(RcRequestDetails.class)
				.createAlias("Header", "h")
				.createAlias("Item", "i")	
				.add(Restrictions.between("h.RequestDate", fromDate, toDate))
				.add(Restrictions.isNull("RcHeader"))
				.add(Restrictions.eq("h.ToDepartment.Id", deptId))
				.add(Restrictions.eq("h.Status", "o").ignoreCase()).list();
		
		for (int i = 1; i <= count; i++) {
			RcDetails rcdetails = new RcDetails();
			MasStoreItem item = new MasStoreItem();
			item.setId(box.getInt("itemId"+i));
			for(RcRequestDetails rc: requestDetails) 
			{
				System.out.println("rcdetails.rc.getItem().getId()()"+rc.getItem().getId());
				System.out.println("rcdetails.rc.getItem().getId()()"+item.getId());
				if(rc.getItem().getId().intValue()==item.getId().intValue())
				{
					System.out.println("rcdetails.getFromDepartments()"+rcdetails.getFromDepartments());
					rcdetails.setFromDepartments((rcdetails.getFromDepartments()!=null?rcdetails.getFromDepartments()+", ":"")+(rc.getFromDepartments()!=null?rc.getFromDepartments():""));
				}
			}
			rcdetails.setHeader(rcheader);
			rcdetails.setItem(item);
			rcdetails.setRcStatus("s");
			rcdetails.setRequestedQty(new BigDecimal(box.getDouble("requestedQty"+i)).setScale(2, BigDecimal.ROUND_HALF_UP));
			/*rcdetails.setBrand(brand);
			rcdetails.setManufacturer(manufacturer);*/
			hbt.save(rcdetails);
			hbt.flush();
			
		}
		
		
		
		
		
		for(RcRequestDetails rc: requestDetails) 
		{
			rc.setRcHeader(rcheader);
			RcRequestHeader header = new RcRequestHeader();
			header = rc.getHeader();
			header.setRcHeader(rcheader);
			hbt.update(header);
			hbt.update(rc);
		}
		
		/*pdeatilsList = session.createCriteria(PatientPrescriptionDetails.class)
				.createAlias("Prescription", "ph")
				.createAlias("Item", "i")
				.add(Restrictions.between("ph.PrescriptionDate", fromDate, toDate))
				.add(Restrictions.gt("RcQty",0))
				.add(Restrictions.isNull("IpdRcHeader")).list();
		
				
		for(PatientPrescriptionDetails ppd: pdeatilsList) 
		{
			ppd.setIpdRcHeader(rcheader);
			hbt.update(ppd);
		}*/
		
		
		
		succesfullyAdded = true;
		tx.commit();
	} catch (Exception e) {
		if (tx != null) {
			tx.rollback();
		}
		e.printStackTrace();
		succesfullyAdded = false;
	}

	finally {
		// --------Session Closing----------
		session.close();
	}
		map.put("succesfullyAdded", succesfullyAdded);
		map.put("rcNo", rcNo);
		return map;
	}
	
	@SuppressWarnings("unchecked")
	public Map<String, Object> getPOListbasedonYear(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StorePoHeader> poList = new ArrayList<StorePoHeader>();
		List<Object[]> poListforGRN = new ArrayList<Object[]>();
		Criteria cr = null;
	
		
		
     
		int yearId = box.getInt("yearId");
		int vendorName = box.getInt("vendorName");
		try {
	        if(yearId !=0)
	        {
	        	poList=session.createCriteria(StorePoHeader.class)
						.createAlias("FinancialYear", "yr")
						.add(Restrictions.eq("yr.Id",yearId))
						.add(Restrictions.eq("Status","y").ignoreCase())
						.add(Restrictions.or(Restrictions.isNull("ReceivedStatus"), Restrictions.eq("ReceivedStatus","P").ignoreCase()))
						.list();
	        	map.put("poList", poList);
	        }
	        if(vendorName != 0)
	        {
	        	cr=session.createCriteria(StoreGrnM.class)
						.createAlias("Supplier", "sp")
						.add(Restrictions.eq("Supplier.Id",vendorName))
						.add(Restrictions.eq("ReceiveType","PO").ignoreCase());
	        		cr = cr.createAlias("Po", "po",CriteriaSpecification.LEFT_JOIN);
						poListforGRN = cr.setProjection(Projections.projectionList().add(Projections.property("po.Id")).add(Projections.property("po.PoNumber"))).list();
						map.put("poListforGRN", poListforGRN);
	        }
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		//System.out.println("mprList="+mprList.size());
		
		System.out.println("poList="+poList.size());
		System.out.println("poListforGRN="+poListforGRN.size());
		
		
		return map;
	}
	
	
	@SuppressWarnings("unchecked")
	public Map<String, Object> getPODetailsforChallanEntry(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StorePoDetail> poList = new ArrayList<StorePoDetail>();
	
		
		int hospitalId = box.getInt("hospitalId");
		int deptId = box.getInt("deptId");
     
		int poNo = box.getInt("poNo");
		try {
	
			poList=session.createCriteria(StorePoDetail.class)
					.createAlias("Po", "hd")
					.add(Restrictions.eq("hd.Id",poNo))
					.add(Restrictions.eq("hd.Status","y").ignoreCase())					
					.list();
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		//System.out.println("mprList="+mprList.size());
		map.put("poList", poList);
		System.out.println("poList="+poList.size());
		
		return map;
	}
	
	@Override
    public List<Object[]> getEmployeeListForDepartment(Box box)
    {
            List<Object[]> employeeList = new ArrayList<Object[]>();        
            Session session = (Session)getSession();
            int deptId = box.getInt("deptId");
            /*Criteria cr = session.createCriteria(MasEmplo.class).add(Restrictions.eq("Status", "y").ignoreCase()).addOrder(Order.asc("StartDate"));*/
            Criteria cr = session.createCriteria(MasEmployee.class, "emp").add(Restrictions.in("emp.Id", getEmployeeIdDepartmentWise(session, deptId))).addOrder(Order.asc("emp.FirstName")).add(Restrictions.eq("Status", "y").ignoreCase());
            employeeList = cr.setProjection(Projections.projectionList().add(Projections.property("Id")).add(Projections.property("emp.FirstName"))).list();
            return employeeList;
    }
    
    
    @Override
    public Map<String, Object> submitRREntry(Box box) {

            
            Map<String,Object>datamap = new HashMap<String,Object>();
            
            List<StorePoHeader> listA = new ArrayList<StorePoHeader>();
            Session session = (Session) getSession();
            Transaction tx = null;
            boolean bSuccessfullyAdded = false;
            
            String message= "";
            //String ProjectionSystemGeneratedHeaderId = "PRJ001";
            org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
            hbt.setFlushModeName("FLUSH_EAGER");
            hbt.setCheckWriteOperations(false);
            
            String txtRequestType = box.getString("txtRequestType"); // for save/submit(forward) to centre HEAD
            String poDate = box.getString("poDate");
            String challanDate = box.getString("challanDate");
            String invoiceDate = box.getString("invoiceDate");
            String invoiceNo = box.getString("invoiceNo");
            double invoiceAmount = box.getDouble("invoiceAmount");
            String challanNo = "";        
            String grnNo = "";        
            int grnHeaderId=0;
    
            int ddlRequestYear = box.getInt("ddlRequestYear");
            int poNo= box.getInt("poNo");
            int supplierId = box.getInt("supplierId");
            int hospitalId=box.getInt("hospitalId");
            int indentNo = box.getInt("indentNo");
            
                            
            String Status = "P";
            if(txtRequestType.equalsIgnoreCase("SAVE"))
            {
                    Status = "P";
            }
            if(txtRequestType.equalsIgnoreCase("SUBMIT"))
            {
                    Status = "F";
            }
            
            
            
            int departmentId =0;                
            
            
            hospitalId = box.getInt("hospitalId");
            departmentId = box.getInt("deptId");
            
            MasHospital hospital = new MasHospital();
            hospital.setId(hospitalId);
            
            MasDepartment department = new MasDepartment();
            department.setId(departmentId);
            int ddlEmployee = box.getInt("ddlEmployee");
            
            int UserId = box.getInt("CHANGED_BY");
            Users user = new Users();
            user.setId(UserId);
            
            Date changedDate = new Date();
            String changedTime = (String) HMSUtil.getCurrentDateAndTime().get("currentTime");
            
            boolean bRecordNotExist = true;
            Map<String, Object> rrMap = new HashMap<String, Object>();
            Map<String, Object> grnMap = new HashMap<String, Object>();
            
    /*        listA = session.createCriteria(StorePoHeader.class)
            .createAlias("Quotation", "qh").add(Restrictions.eq("qh.Id", quotationHeaderId))
            .list();
            System.out.println("listA="+listA.size());
            if(listA.size()>0)
            {
                    bRecordNotExist=false;
            }*/
                       if(bRecordNotExist)
                       {                          
                               try{
                                            
                                            tx = session.beginTransaction();
                                    StoreGrnM grnHeader = new StoreGrnM();                                  
                                rrMap.put("tableObjectName", "StoreGrnMChallan");                        
                                    rrMap.put("isHospitalWise", "y");
                                    rrMap.put("hospitalId", hospitalId);
                                    rrMap.put("isYearly", "y");                        
                                    rrMap.put("isMonthly", "n");
                                    rrMap.put("isPrefix", "y");
                            
                                    rrMap.put("transactionPrefixProperty", "transactionPrefixForRR");
                                    
                                    try{
                                            challanNo = HMSUtil.generateTransactionSequence(rrMap, session, hbt);
                                    }catch(Exception e)
                                    {
                                            System.out.print("Exception in generate  Challan No="+e);
                                    }
                                    
                                                              
                                grnMap.put("tableObjectName", "StoreGrnM");                        
                                grnMap.put("isHospitalWise", "y");
                                grnMap.put("hospitalId", hospitalId);
                                grnMap.put("isYearly", "y");                        
                                grnMap.put("isMonthly", "n");
                                grnMap.put("isPrefix", "y");
                            
                                grnMap.put("transactionPrefixProperty", "transactionPrefixForGRN");
                                    
                                    try{
                                            grnNo = HMSUtil.generateTransactionSequence(grnMap, session, hbt);
                                    }catch(Exception e)
                                    {
                                            System.out.print("Exception in generate  GRN No="+e);
                                    }

                                                    
                                    grnHeader.setGrnNo(grnNo);
                                    grnHeader.setChallanNo(challanNo);
                                    
                                    if(poNo !=0)
                                    {
                                            StorePoHeader poH = new StorePoHeader();
                                            poH.setId(poNo);
                                            grnHeader.setPo(poH);
                                    }
                                    if(supplierId !=0)
                                    {
                                            MasStoreSupplier supp = new MasStoreSupplier();
                                            supp.setId(supplierId);
                                            grnHeader.setSupplier(supp);
                                    }
                                    grnHeader.setChallanDate(HMSUtil.convertStringTypeDateToDateType(challanDate));
                                    grnHeader.setGrnDate(HMSUtil.convertStringTypeDateToDateType(challanDate));
                                    grnHeader.setInvoiceDate(HMSUtil.convertStringTypeDateToDateType(invoiceDate));
                                    grnHeader.setInvoiceNo(invoiceNo);
                                    grnHeader.setInvoiceAmount(new BigDecimal(invoiceAmount));
                                    grnHeader.setReceiveType("PO");
                                    grnHeader.setEnteredBy(user);
                                    grnHeader.setGrnStatus("Entered");
                                    if(indentNo !=0)
                                    {
                                    	StoreIndentM obj = new StoreIndentM();
                                    	obj.setId(indentNo);
                                    	grnHeader.setIndent(obj);
                                    	
                                    	StoreIndentM indentHeader = (StoreIndentM)hbt.get(StoreIndentM.class, indentNo);
                                    	if(indentHeader !=null)
                                    	{
                                    		indentHeader.setIndentReceivedStatus("y");
                                    		hbt.update(indentHeader);
                                    		hbt.refresh(indentHeader);
                                    	}
                                    	
                                    }
                                   
                              
                               grnHeader.setDepartment(department);
                               MasStoreFinancial fy = new MasStoreFinancial();
                               fy.setId(ddlRequestYear);
                               grnHeader.setYear(fy);                                  
                               grnHeader.setLastChgBy(user);                                          
                               grnHeader.setLastChgDate(changedDate);
                               grnHeader.setLastChgTime(changedTime);
                               grnHeader.setStatus(Status);
                               if(hospitalId !=0)
                               {
                                       MasHospital hospital1 = new MasHospital();
                                       hospital1.setId(hospitalId);
                                       grnHeader.setHospital(hospital1);
                               }                                
                                                              

                                            hbt.save(grnHeader);
                                            hbt.refresh(grnHeader);                                                
                                            
                                            
                                            String tableRowId = "";
                                            tableRowId = box.getString("tableRowId");
                                            
                                            System.out.println("tableRowId="+tableRowId);

                                            String array_RowId[];
                                            array_RowId = tableRowId.split(",");
                                            System.out.println("array_RowId="+array_RowId+"tableRowId="+tableRowId);
                                            System.out.println("length="+array_RowId.length);
                                            
                                            if (tableRowId != "")
                                            {
                                                    for (int i = 0; i < array_RowId.length; i++)
                                                    {
                                                            
                                                            String txtManDate = box.getString("txtManDate"+array_RowId[i]);                                                                
                                                            String txtExpiryDate = box.getString("txtExpiryDate"+array_RowId[i]);                                                        
                                                            String txtBatchNo = box.getString("txtBatchNo"+array_RowId[i]);
                                                            double txtReceivedQty = box.getDouble("txtReceivedQty"+array_RowId[i]);
                                                            double txtOrderedQty = box.getDouble("txtOrderedQty"+array_RowId[i]);
                                                            //here txtOrderedQty is qty advised in RR Screen
                                                            double txtRejectedQty = box.getDouble("txtRejectedQty"+array_RowId[i]);
                                                            double txtAcceptedQty = box.getDouble("txtAcceptedQty"+array_RowId[i]);
                                                            double txtUnitRate = box.getDouble("txtUnitRate"+array_RowId[i]);                                                                
                                                            double txtItemValue = box.getDouble("txtItemValue"+array_RowId[i]);
                                                            double txtShortageQty = box.getDouble("txtShortageQty"+array_RowId[i]);
                                                            double txtSurplusQty = box.getDouble("txtSurplusQty"+array_RowId[i]);
                                                            String txtRemarks = box.getString("txtRemarks"+array_RowId[i]);
                                                            int txtPOId = box.getInt("txtPOId"+array_RowId[i]);
                                                            
                                                            int brandId=0;
                                                            int manuId= 0;
                                                            int itemId = 0;
                                                            
                                                          
                                                           
                                                            StorePoDetail poDetails= (StorePoDetail)hbt.get(StorePoDetail.class, txtPOId);
                                                            if(poDetails != null)
                                                            {    
                                                            
	                                                            	BigDecimal AdvisedQty = new BigDecimal(0);
	                                                                if(poDetails.getQtyAdvised() != null)
	                                                                {
	                                                                	AdvisedQty= poDetails.getQtyAdvised();                                                                                
	                                                                }
	                                                                AdvisedQty=AdvisedQty.add(new BigDecimal(txtOrderedQty));
	                                                                poDetails.setQtyAdvised(AdvisedQty);
                                                                
                                                                    BigDecimal ReceviedQty = new BigDecimal(0);
                                                                    if(poDetails.getQuantityReceived() != null)
                                                                    {
                                                                            ReceviedQty= poDetails.getQuantityReceived();                                                                                
                                                                    }
                                                                    ReceviedQty=ReceviedQty.add(new BigDecimal(txtReceivedQty));
                                                                    poDetails.setQuantityReceived(ReceviedQty);
                                                                    
                                                                    BigDecimal AcceptedQty = new BigDecimal(0);
                                                                    if(poDetails.getAcceptedQty() != null)
                                                                    {
                                                                            AcceptedQty= poDetails.getAcceptedQty();                                                                                
                                                                    }
                                                                    AcceptedQty = AcceptedQty.add(new BigDecimal(txtAcceptedQty));
                                                                    poDetails.setAcceptedQty(AcceptedQty);
                                                                    
                                                                    BigDecimal RejectedQty = new BigDecimal(0);
                                                                    if(poDetails.getRejectedQty() != null)
                                                                    {
                                                                            RejectedQty= poDetails.getRejectedQty();                                                                                
                                                                    }
                                                                    RejectedQty= RejectedQty.add(new BigDecimal(txtRejectedQty));
                                                                    poDetails.setRejectedQty(RejectedQty);
                                                                    
                                                                    if(poDetails.getManufacturer() != null)
                                                                    {
                                                                            manuId= poDetails.getManufacturer().getId(); 
                                                                           
                                                                    }
                                                                    if(poDetails.getBrand() != null)
                                                                    {
                                                                            brandId= poDetails.getBrand().getId();                                                                        
                                                                    }
                                                                    if(poDetails.getItem() != null)
                                                                    {
                                                                            itemId= poDetails.getItem().getId();                                                                        
                                                                    }
                                                                    
                                                                    System.out.println("ReceviedQty="+ReceviedQty);
                                                                    
                                                                    hbt.update(poDetails);
                                                                    hbt.refresh(poDetails);
                                                                    
                                                            }
                                                            
                                                            StoreGrnT grnDetails = new StoreGrnT();
                                                            
                                                                                                    
                                                            
                                                            grnDetails.setManufacturerDate(HMSUtil.convertStringTypeDateToDateType(txtManDate));
                                                            grnDetails.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(txtExpiryDate));
                                                            grnDetails.setBatchNo(txtBatchNo);
                                                            grnDetails.setQtyAdvised(new BigDecimal(txtOrderedQty));
                                                            // Here txtOrderedQty is the Qty Advised in the RR Screen
                                                            grnDetails.setReceivedQty(new BigDecimal(txtReceivedQty));
                                                            grnDetails.setAcceptedQty(new BigDecimal(txtAcceptedQty));
                                                            grnDetails.setRejectedQty(new BigDecimal(txtRejectedQty));
                                                            grnDetails.setUnitRate(new BigDecimal(txtUnitRate).setScale(2, BigDecimal.ROUND_HALF_UP));
                                                            grnDetails.setAmountValue(new BigDecimal(txtItemValue).setScale(2, BigDecimal.ROUND_HALF_UP));
                                                            grnDetails.setShortage(new BigDecimal(txtShortageQty));
                                                            grnDetails.setSurplus(new BigDecimal(txtSurplusQty));
                                                            grnDetails.setRrRemarks(txtRemarks);
                                                            grnDetails.setPoDetail(poDetails);
                                                            if(manuId !=0)
                                                            {
                                                            	MasManufacturer mn = new MasManufacturer();
                            									mn.setId(manuId);
                            									grnDetails.setManufacturer(mn);
                                                            }
                                                            if(brandId !=0)
                                                            {
                                                            	MasStoreBrand br = new MasStoreBrand();
                            									br.setId(brandId);
                            									grnDetails.setBrand(br);
                                                            }
                                                                    
                                                            if(itemId !=0)
                                                            {
                                                                    MasStoreItem item = new MasStoreItem();
                                                                    item.setId(itemId);
                                                                    grnDetails.setItem(item);
                                                            }
                                                            grnDetails.setGrnMaster(grnHeader);
                                                            
                                                           
                                                					//update StorePoHeader
                                                                    StorePoHeader poHeader= new StorePoHeader();                                            
                                                                    poHeader = (StorePoHeader) getHibernateTemplate().get(StorePoHeader.class, poNo);
                                            						if(poHeader != null)
                                            						{
                                            							poHeader.setReceivedStatus(Status);
                                            							HibernateTemplate hbt1 = getHibernateTemplate();
                                                						hbt1.setFlushModeName("FLUSH_EAGER");
                                                						hbt1.setCheckWriteOperations(false);
                                                						hbt1.update(poHeader);
                                            						}
                                                            
                                                            
                                                            hbt.save(grnDetails);
                                                            hbt.refresh(grnDetails);        
                                                            grnHeaderId = grnHeader.getId();
                                                            
                                                            
                                                    }
                                            }
                                            tx.commit();
                                            bSuccessfullyAdded = true;
                                    }
                                    
                                    catch(Exception e)
                                    {
                                            System.out.println("Error is PO GRN Submission="+e);
                                            if (tx != null) {
                                                    tx.rollback();
                                                    e.printStackTrace();
                                                    System.out.print(e);
                                            }
                                    }
                              
                       }// close if for bRecordExist
            
            
                    if(bRecordNotExist)
                    {
                            if (bSuccessfullyAdded) {
                                            
                                            if(txtRequestType.equalsIgnoreCase("SAVE"))
                                            {
                                                    message = "Receive Entry saved successfully and Refernce Number is: "
                                                                    + challanNo;
                                            }
                                            
                                            if(txtRequestType.equalsIgnoreCase("SUBMIT"))
                                            {
                                                    message = "Receive Entry submit successfully and Refernce Number is: "
                                                                    + challanNo;
                                            }
                    }
                            else
                            {
                                    message = "Try Again";
                            }
                            
                                    
                            } else {

                                    message = "Purchase Order already created for this vendor and Quotation No";
                            }                

            datamap.put("message", message);
            datamap.put("bSuccessfullyAdded", bSuccessfullyAdded);
            datamap.put("Id", grnHeaderId);
            
            return datamap;        
            
            
    }
    
    
    @Override
    public Map<String,Object> GetMPRAndPODetailsOfItem(Box box)
    {
    		Map<String,Object> datamap = new HashMap<String,Object>();
            List<Object> objectList = new ArrayList<Object>();   
            Session session = (Session)getSession();
            int ItemId = box.getInt("ItemId");
            /*Criteria cr = session.createCriteria(MasEmplo.class).add(Restrictions.eq("Status", "y").ignoreCase()).addOrder(Order.asc("StartDate"));*/
            Criteria cr = session.createCriteria(StorePoDetail.class).createAlias("Item", "item").createAlias("PO", "header").add(Restrictions.eq("item.Id", ItemId)).add(Restrictions.eq("header.Status", "y").ignoreCase());
          //  objectList = cr.setProjection(Projections.projectionList().add(Projections.property("Id")).add(Projections.property("emp.FirstName"))).list();
            return datamap;
    }
    
    
    @Override
    public Map<String, Object> submitRCEntry(Box box) {

            
            Map<String,Object>datamap = new HashMap<String,Object>();
            
            List<StorePoHeader> listA = new ArrayList<StorePoHeader>();
            Session session = (Session) getSession();
            Transaction tx = null;
            boolean successfullyAdded = false;
            
            String message= "";
            //String ProjectionSystemGeneratedHeaderId = "PRJ001";
            org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
            hbt.setFlushModeName("FLUSH_EAGER");
            hbt.setCheckWriteOperations(false);
            
            String txtRequestType = box.getString("txtRequestType"); // for save/submit(forward) to centre HEAD
            /*String poDate = box.getString("poDate");*/
            String rcDate = box.getString("rcDate");
            String invoiceDate = box.getString("invoiceDate");
            String invoiceNo = box.getString("invoiceNo");
            double invoiceAmount = box.getDouble("invoiceAmount");
            String rcNo = "";        
            String grnNo = "";        
            int grnHeaderId=0;
    
            /*int ddlRequestYear = box.getInt("ddlRequestYear");*/
            /*int poNo= box.getInt("poNo");*/
            int supplierId = box.getInt("supplierId");
            int rcId = box.getInt("rcId");
            int hospitalId=box.getInt("hospitalId");
            
                            
            String Status = "F";
          /*  if(txtRequestType.equalsIgnoreCase("SAVE"))
            {
                    Status = "P";
            }
            if(txtRequestType.equalsIgnoreCase("SUBMIT"))
            {
                    Status = "F";
            }*/
            
            
            
            int departmentId =0;                
            
            
            hospitalId = box.getInt("hospitalId");
            departmentId = box.getInt("deptId");
            
            MasHospital hospital = new MasHospital();
            hospital.setId(hospitalId);
            
            MasDepartment department = new MasDepartment();
            department.setId(departmentId);
            
            int UserId = box.getInt("changed_by");
            Users user = new Users();
            user.setId(UserId);
            
            Date changedDate = new Date();
            String changedTime = (String) HMSUtil.getCurrentDateAndTime().get("currentTime");
            
            boolean bRecordNotExist = true;
            Map<String, Object> rrMap = new HashMap<String, Object>();
            Map<String, Object> grnMap = new HashMap<String, Object>();
            
    /*        listA = session.createCriteria(StorePoHeader.class)
            .createAlias("Quotation", "qh").add(Restrictions.eq("qh.Id", quotationHeaderId))
            .list();
            System.out.println("listA="+listA.size());
            if(listA.size()>0)
            {
                    bRecordNotExist=false;
            }*/
                       if(bRecordNotExist)
                       {                          
                               try{
                                            
                                            tx = session.beginTransaction();
                                    StoreGrnM grnHeader = new StoreGrnM();                                  
                                rrMap.put("tableObjectName", "StoreGrnMRC");                        
                                    rrMap.put("isHospitalWise", "n");
                                    rrMap.put("hospitalId", hospitalId);
                                    rrMap.put("isYearly", "y");                        
                                    rrMap.put("isMonthly", "n");
                                    rrMap.put("isPrefix", "y");
                            
                                    rrMap.put("transactionPrefixProperty", "transactionPrefixForRCGRN");
                                    
                                   
                                            rcNo = HMSUtil.generateTransactionSequence(rrMap, session, hbt);
                                    
                                   
                                                              
                                grnMap.put("tableObjectName", "StoreGrnM");                        
                                grnMap.put("isHospitalWise", "n");
                                grnMap.put("hospitalId", hospitalId);
                                grnMap.put("isYearly", "y");                        
                                grnMap.put("isMonthly", "n");
                                grnMap.put("isPrefix", "y");
                            
                                grnMap.put("transactionPrefixProperty", "transactionPrefixForGRN");
                                    
                                   
                                            grnNo = HMSUtil.generateTransactionSequence(grnMap, session, hbt);
                                    
                                  

                                    MasEmployee employee = new MasEmployee();  
                                    employee.setId(box.getInt("ddlEmployee"));
                                    grnHeader.setGrnNo(grnNo);
                                    grnHeader.setChallanNo(rcNo);
                                    grnHeader.setEmployee(employee);
                                    
                                   /* if(poNo !=0)
                                    {
                                            StorePoHeader poH = new StorePoHeader();
                                            poH.setId(poNo);
                                            grnHeader.setPo(poH);
                                    }*/
                                    if(supplierId !=0)
                                    {
                                            MasStoreSupplier supp = new MasStoreSupplier();
                                            supp.setId(supplierId);
                                            grnHeader.setSupplier(supp);
                                    }
                                    
                                    if(rcId !=0)
                                    {
                                            RcHeader rcHeader = new RcHeader();
                                            rcHeader.setId(rcId);
                                            grnHeader.setRc(rcHeader);
                                    }
                                    grnHeader.setChallanDate(HMSUtil.convertStringTypeDateToDateType(rcDate));
                                    grnHeader.setGrnDate(HMSUtil.convertStringTypeDateToDateType(rcDate));
                                    grnHeader.setInvoiceDate(HMSUtil.convertStringTypeDateToDateType(invoiceDate));
                                    grnHeader.setInvoiceNo(invoiceNo);
                                    grnHeader.setInvoiceAmount(new BigDecimal(invoiceAmount).setScale(2, BigDecimal.ROUND_HALF_UP));
                                    grnHeader.setReceiveType("RC");                                
                            
                              
                               grnHeader.setDepartment(department);
                              /* MasStoreFinancial fy = new MasStoreFinancial();
                               fy.setId(ddlRequestYear);*/
                               /*grnHeader.setYear(fy);  */                                
                               grnHeader.setLastChgBy(user);                                          
                               grnHeader.setLastChgDate(changedDate);
                               grnHeader.setLastChgTime(changedTime);
                               grnHeader.setStatus(Status);
                               if(hospitalId !=0)
                               {
                                       MasHospital hospital1 = new MasHospital();
                                       hospital1.setId(hospitalId);
                                       grnHeader.setHospital(hospital1);
                               }                                
                                                              

                                            hbt.save(grnHeader);
                                            datamap.put("grnId", grnHeader.getId());
                                            /*hbt.refresh(grnHeader);    */                                          
                                            
                                            
              
                                          int count = box.getInt("count");
                                          int detailsId =0;
                                          int rcHeaderId = 0;
                                                    for (int i = 1; i <=count; i++)
                                                    {
                                                        detailsId = 0;
                                                        
                                                        if(box.get("detailsId"+i)!=null && !box.getString("detailsId"+i).trim().equals(""))
                                                        {
                                                            detailsId = box.getInt("detailsId"+i);                                                            
                                                            String txtManDate = box.getString("manufactureDate"+i);                                                                
                                                            String txtExpiryDate = box.getString("expiryDate"+i);                                                        
                                                            String txtBatchNo = box.getString("batch"+i);
                                                            BigDecimal txtReceivedQty = new BigDecimal(box.getDouble("txtReceivedQty"+i));
                                                            BigDecimal txtAdvisedQty = new BigDecimal(box.getDouble("qtyBalanceTemp"+i));
                                                            BigDecimal txtRejectedQty = new BigDecimal(box.getDouble("txtRejectedQty"+i));
                                                            BigDecimal txtAcceptedQty = new BigDecimal(box.getDouble("txtAcceptedQty"+i));
                                                            BigDecimal txtUnitRate = new BigDecimal(box.getDouble("unitRateBalanceTemp"+i));                                                                
                                                            BigDecimal txtItemValue = new BigDecimal(box.getDouble("unitRateBalance"+i));
                                                            BigDecimal txtDiscountPer = new BigDecimal(box.getDouble("discount"+i));
                                                            BigDecimal txtDiscountValue = new BigDecimal(box.getDouble("discountAmount"+i));
                                                            BigDecimal txtFinalAmount = new BigDecimal(box.getDouble("finalAmount"+i));
                                                            int itemId = box.getInt("itemId"+i);                                                         
                                                            
                                                            int manufacturerId = box.getInt("ManufacturerId"+i);
                                                            int brandId = box.getInt("BrandId"+i);
                                                            MasManufacturer manufacturer = new MasManufacturer();
                                                            manufacturer.setId(manufacturerId);
                                                            
                                                            MasStoreBrand brand = new MasStoreBrand();
                                                            brand.setId(brandId);
                                                            
                                                            
                                                             // code starts for Store_item_batch_stock
                                                            List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
                                                                        StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
                                                            
                                                            storeItemBatchStockList = hbt.find("from jkt.hms.masters.business.StoreItemBatchStock as inp where inp.Item.Id = "
                                                                                                        + itemId                                                                                                        
                                                                                                        + " and inp.Department.Id= "
                                                                                                        + departmentId
                                                                                                        + " and inp.BatchNo ='"
                                                                                                        + txtBatchNo
                                                                                                        + "' and inp.Brand.Id = "
                                                                                                        + brandId
                                                                                                        + " and inp.Manufacturer.Id = "
                                                                                                        + manufacturerId
                                                                                                        + " and inp.Hospital.Id = "
                                                                                                        +hospitalId);


                                                                                        if (storeItemBatchStockList != null && storeItemBatchStockList.size() > 0)
                                                                                        {
                                                                                                storeItemBatchStock = storeItemBatchStockList.get(0);


                                                                                                BigDecimal existing_qty = new BigDecimal(0);                                                                                                

                                                                                                if (storeItemBatchStock.getReceivedQty() != null) {
                                                                                                        existing_qty = storeItemBatchStock.getReceivedQty();
                                                                                                } else {
                                                                                                        existing_qty = new BigDecimal(0);
                                                                                                }                                                                                              
                                                                                                
                                                                                                BigDecimal new_closing_stock = new BigDecimal(0);
                                                                                                
                                                                                                if(storeItemBatchStock.getClosingStock() !=null)
                                                                                                {
                                                                                                    BigDecimal existing_closing_stock = storeItemBatchStock.getClosingStock();                                                                                                    
                                                                                                    new_closing_stock = existing_closing_stock.add(txtAcceptedQty);
                                                                                                }
                                                                                                existing_qty = existing_qty.add(txtAcceptedQty);                                                                                    
                                                                                                
                                                                                                                                                                                        

                                                                                                int id = storeItemBatchStock.getId();
                                                                                                
                                                                                                                                                                                                                                                                                                     
                                                                                                    storeItemBatchStock.setReceivedQty(existing_qty.setScale(2, BigDecimal.ROUND_HALF_UP));                                                                                                    
                                                                                                    storeItemBatchStock.setClosingStock(new_closing_stock.setScale(2, BigDecimal.ROUND_HALF_UP));
                                                                                                    storeItemBatchStock.setManufactureDate(HMSUtil.convertStringTypeDateToDateType(txtManDate));
                                                                                                    storeItemBatchStock.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(txtExpiryDate));
                                                                                                    storeItemBatchStock.setBatchNo(txtBatchNo);                                                
                                                                                                    
                                                                                                    
                                                                                                    storeItemBatchStock.setCostPrice(txtUnitRate.setScale(2, BigDecimal.ROUND_HALF_UP));
                                                                                                    if(hospitalId !=0)
                                                                            {
                                                                                    MasHospital hospital1 = new MasHospital();
                                                                                    hospital1.setId(hospitalId);
                                                                                    storeItemBatchStock.setHospital(hospital1);
                                                                            }    
                                                                            if(departmentId !=0)
                                                                            {
                                                                                    MasDepartment dept = new MasDepartment();
                                                                                    dept.setId(departmentId);
                                                                                    storeItemBatchStock.setDepartment(dept);
                                                                            }
                                                                            if(itemId !=0)
                                                                            {
                                                                                     MasStoreItem item = new MasStoreItem();
                                                                                 item.setId(itemId);
                                                                                    storeItemBatchStock.setItem(item);
                                                                            }
                                                                            storeItemBatchStock.setLastChgDate(changedDate);
                                                                            storeItemBatchStock.setLastChgBy(user);
                                                                            storeItemBatchStock.setManufacturer(manufacturer);
                                                                            storeItemBatchStock.setBrand(brand);
                                                                            
                                                                            
                                                                                                 
                                                                                                    hbt.update(storeItemBatchStock);
                                                                                                    
                                                                                                
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                                
                                                                                                storeItemBatchStock.setReceivedQty(txtAcceptedQty.setScale(2, BigDecimal.ROUND_HALF_UP));                                                                                                    
                                                                                                storeItemBatchStock.setClosingStock(txtAcceptedQty.setScale(2, BigDecimal.ROUND_HALF_UP));  
                                                                                                storeItemBatchStock.setManufactureDate(HMSUtil.convertStringTypeDateToDateType(txtManDate));
                                                                                                storeItemBatchStock.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(txtExpiryDate));
                                                                                                storeItemBatchStock.setBatchNo(txtBatchNo);                                                
                                                                                                
                                                                                                
                                                                                                storeItemBatchStock.setCostPrice(txtUnitRate.setScale(2, BigDecimal.ROUND_HALF_UP));
                                                                                                if(hospitalId !=0)
                                                                        {
                                                                                MasHospital hospital1 = new MasHospital();
                                                                                hospital1.setId(hospitalId);
                                                                                storeItemBatchStock.setHospital(hospital1);
                                                                        }    
                                                                       // Add Ward Pharmacy deprtment Id // code wiil be replace by later
                                                                                MasDepartment dept = new MasDepartment();
                                                                                dept.setId(departmentId);
                                                                                storeItemBatchStock.setDepartment(dept);
                                                                        
                                                                        if(itemId !=0)
                                                                        {
                                                                                 MasStoreItem item = new MasStoreItem();
                                                                             item.setId(itemId);
                                                                                storeItemBatchStock.setItem(item);
                                                                        }
                                                                        storeItemBatchStock.setLastChgDate(changedDate);
                                                                        storeItemBatchStock.setLastChgBy(user);
                                                                        storeItemBatchStock.setManufacturer(manufacturer);
                                                                        storeItemBatchStock.setBrand(brand);
                                                                                              
                                                                                                hbt.save(storeItemBatchStock);
                                                                                                
                                                                                                
                                                                                          
                                                                                        }
                                                                                        
                                                                                        //code ends for Store_item_batch_stock
                                                            
                                                            
                                                            
                                                            
                                                            
                                                            
                                                           
                                                            RcDetails rcDetails= (RcDetails)hbt.get(RcDetails.class, detailsId);
                                                            rcHeaderId = rcDetails.getHeader().getId();
                                                            if(rcDetails != null)
                                                            {
                                                                rcDetails.setReceivedQty(txtReceivedQty.setScale(2, BigDecimal.ROUND_HALF_UP));
                                                                rcDetails.setAcceptedQty(txtAcceptedQty.setScale(2, BigDecimal.ROUND_HALF_UP));
                                                                rcDetails.setRejectedQty(txtRejectedQty.setScale(2, BigDecimal.ROUND_HALF_UP));
                                                                rcDetails.setManufacturer(manufacturer);
                                                                rcDetails.setBrand(brand);
                                                                rcDetails.setRcStatus("C");
                                                                rcDetails.setStock(storeItemBatchStock);
                                                                hbt.update(rcDetails);
                                                                
                                                                    
                                                            }
                                                            
                                                            StoreGrnT grnDetails = new StoreGrnT();                                                           
                                                                                                    
                                                            
                                                            grnDetails.setManufacturerDate(HMSUtil.convertStringTypeDateToDateType(txtManDate));
                                                            grnDetails.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(txtExpiryDate));
                                                            grnDetails.setBatchNo(txtBatchNo);
                                                            grnDetails.setReceivedQty(txtReceivedQty.setScale(2, BigDecimal.ROUND_HALF_UP));
                                                            grnDetails.setAcceptedQty(txtAcceptedQty.setScale(2, BigDecimal.ROUND_HALF_UP));
                                                            grnDetails.setRejectedQty(txtRejectedQty.setScale(2, BigDecimal.ROUND_HALF_UP));
                                                            grnDetails.setUnitRate(txtUnitRate.setScale(2, BigDecimal.ROUND_HALF_UP));
                                                            grnDetails.setManufacturer(manufacturer);
                                                            grnDetails.setBrand(brand);
                                                            grnDetails.setUnitRate(txtUnitRate.setScale(2, BigDecimal.ROUND_HALF_UP));
                                                            grnDetails.setAmountValueWithoutDiscount(txtItemValue.setScale(2, BigDecimal.ROUND_HALF_UP));
                                                            grnDetails.setDiscountPercent(txtDiscountPer.setScale(2, BigDecimal.ROUND_HALF_UP));
                                                            grnDetails.setDiscount(txtDiscountValue.setScale(2, BigDecimal.ROUND_HALF_UP));                                                           
                                                            grnDetails.setAmountValue(txtFinalAmount.setScale(2, BigDecimal.ROUND_HALF_UP));
                                                            grnDetails.setQtyAdvised(txtAdvisedQty.setScale(2, BigDecimal.ROUND_HALF_UP));
                                                                    
                                                            if(itemId !=0)
                                                            {
                                                                    MasStoreItem item = new MasStoreItem();
                                                                    item.setId(itemId);
                                                                    grnDetails.setItem(item);
                                                            }
                                                            grnDetails.setGrnMaster(grnHeader);
                                                            
                                                            grnHeaderId = grnHeader.getId();
                                                            
                                                            hbt.save(grnDetails);
                                                            hbt.flush();
                                                           /* hbt.refresh(grnDetails);     */   
                                                           
                                                            
                                                           
                                                            
                                                            
                                                    } }
                                                    List<RcDetails> detailList = new ArrayList<RcDetails>();
                                                    detailList = session.createCriteria(RcDetails.class)
                                                    		.add(Restrictions.eq("RcStatus", "P").ignoreCase())
                                                    		.add(Restrictions.eq("Header.Id", rcHeaderId)).list(); 
                                                    if(detailList.size()==0)
                                                    {
                                                    	RcHeader rcHeader = (RcHeader)session.load(RcHeader.class, rcHeaderId);
                                                    	rcHeader.setStatus("C");
                                                    	hbt.update(rcHeader);
                                                    }
                                            tx.commit();
                                            successfullyAdded = true;
                                    }
                                    
                                    catch(Exception e)
                                    {
                                            System.out.println("Error is RC GRN Submission="+e);
                                            if (tx != null) {
                                                    tx.rollback();
                                                    e.printStackTrace();
                                                    System.out.print(e);
                                            }
                                    }
                              
                       }// close if for bRecordExist
            
            
                      
                    
                 
                    
                    
                    

            datamap.put("message", message);
            datamap.put("successfullyAdded", successfullyAdded);
            datamap.put("Id", grnHeaderId);
            datamap.put("rcNo", rcNo);
            
            return datamap;        
            
            
    }

	@Override
	public Map<String, Object> showRCReportJsp(int hospitalId, int deptId) {
		
		Map<String, Object> map = new HashMap<String, Object>();
		
		Criteria cr = null;
		List<RcHeader> ipdRcHeaderList= new ArrayList<RcHeader>();	
		Session session = (Session) getSession();
		
		cr = session.createCriteria(RcHeader.class)
				.add(Restrictions.eq("Department.Id", deptId));				
				
		
		
		ipdRcHeaderList = cr.list();
		map.put("ipdRcHeaderList", ipdRcHeaderList);		
	
				
		return map;
	}
	
	@Override
	public Map<String, Object> showIssueMedicineReportJsp() {
		
		Map<String, Object> map = new HashMap<String, Object>();
		
		Criteria cr = null;
		List<RcHeader> ipdRcHeaderList= new ArrayList<RcHeader>();	
		Session session = (Session) getSession();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		
		Properties properties = new Properties();
		URL resourcePath = Thread.currentThread().getContextClassLoader()
		.getResource("adt.properties");
		int departmentTypeIdWard=0;
		try {
			properties.load(resourcePath.openStream());
		} catch (Exception e) {
			e.printStackTrace();
		}

		 String departmentTypeCodeForWard = properties.getProperty("departmentTypeCodeForWard");
			List<String> arrayDeptCode = new ArrayList<String>();
			arrayDeptCode.add(departmentTypeCodeForWard);
			
			
		
	
		try {
			
			departmentList = session.createCriteria(MasDepartment.class)
					.createAlias("DepartmentType", "dt").add(Restrictions.in("dt.DepartmentTypeCode", arrayDeptCode))	
					.add(Restrictions.eq("Status", "y")).list();
		} catch (Exception e) {
			e.printStackTrace();
		}
	
		 
		map.put("departmentList", departmentList);			
	
		return map;
	}


	@Override
	public Map<String, Object> getRRList(Map<String, Object> dataMap) {
		int rc_id = 0;
		Map<String, Object> map = new HashMap<String, Object>();
		if (dataMap.get("rc_id") != null){
			rc_id = Integer.parseInt("" + dataMap.get("rc_id"));
		}
		Criteria cr = null;
		List<StoreGrnM> storeGrnMList= new ArrayList<StoreGrnM>();	
		Session session = (Session) getSession();
		
		cr = session.createCriteria(StoreGrnM.class).createAlias("Rc", "rc").add(Restrictions.eq("rc.Id", rc_id));				
				
		
		
		storeGrnMList = cr.list();
		map.put("storeGrnMList", storeGrnMList);		
	
				
		return map;
	}

	@Override
	public Map<String, Object> getPOList(Map<String, Object> dataMap) {
		int poNo = 0;
		Map<String, Object> map = new HashMap<String, Object>();
		if (dataMap.get("poNo") != null){
			poNo = Integer.parseInt("" + dataMap.get("poNo"));
		}
		Criteria cr = null;
		List<StoreGrnM> storeGrnMList= new ArrayList<StoreGrnM>();	
		Session session = (Session) getSession();
		
		cr = session.createCriteria(StoreGrnM.class).createAlias("Po", "po").add(Restrictions.eq("po.Id", poNo));				
				
		
		
		storeGrnMList = cr.list();
		map.put("storeGrnMList", storeGrnMList);		
	
				
		return map;
	}
	@SuppressWarnings("unchecked")
	public Map<String, Object> getPOYear(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StorePoHeader> poList = new ArrayList<StorePoHeader>();
	
		
		
     
		int yearId = box.getInt("yearId");
		try {
	
			poList=session.createCriteria(StorePoHeader.class)
					.createAlias("FinancialYear", "yr")
					.add(Restrictions.eq("yr.Id",yearId))
					.add(Restrictions.eq("Status","y").ignoreCase())
					.list();
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		//System.out.println("mprList="+mprList.size());
		map.put("poList", poList);
		System.out.println("poList="+poList.size());
		
		
		return map;
	}
	
	@Override
    public Map<String, Object> submitIndentForSupplier(Box box) {

            
            Map<String,Object>datamap = new HashMap<String,Object>();
            
            List<StorePoHeader> listA = new ArrayList<StorePoHeader>();
            Session session = (Session) getSession();
            Transaction tx = null;
            boolean bSuccessfullyAdded = false;
            
            String message= "";
            //String ProjectionSystemGeneratedHeaderId = "PRJ001";
            org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
            hbt.setFlushModeName("FLUSH_EAGER");
            hbt.setCheckWriteOperations(false);
            
            String txtRequestType = box.getString("txtRequestType"); // for save/submit(forward) to centre HEAD
            String indentDate = box.getString("indentDate");
            
            String indentNo = "";        
                
            int indentHeaderId=0;
    
            int ddlRequestYear = box.getInt("ddlRequestYear");
            int poNo= box.getInt("poNo");
            int supplierId = box.getInt("supplierId");
            int hospitalId=box.getInt("hospitalId");
            
                            
            String Status = "P";
            if(txtRequestType.equalsIgnoreCase("SAVE"))
            {
                    Status = "P";
            }
            if(txtRequestType.equalsIgnoreCase("SUBMIT"))
            {
                    Status = "F";
            }
            
            
            
            int departmentId =0;                
            
            
            hospitalId = box.getInt("hospitalId");
            departmentId = box.getInt("deptId");
            
            MasHospital hospital = new MasHospital();
            hospital.setId(hospitalId);
            
            MasDepartment department = new MasDepartment();
            department.setId(departmentId);
            int ddlEmployee = box.getInt("ddlEmployee");
            
            int UserId = box.getInt("CHANGED_BY");
            Users user = new Users();
            user.setId(UserId);
            
            Date changedDate = new Date();
            String changedTime = (String) HMSUtil.getCurrentDateAndTime().get("currentTime");
            
            boolean bRecordNotExist = true;
            Map<String, Object> StoreIndentMMap = new HashMap<String, Object>();
            Map<String, Object> grnMap = new HashMap<String, Object>();
            
    /*        listA = session.createCriteria(StorePoHeader.class)
            .createAlias("Quotation", "qh").add(Restrictions.eq("qh.Id", quotationHeaderId))
            .list();
            System.out.println("listA="+listA.size());
            if(listA.size()>0)
            {
                    bRecordNotExist=false;
            }*/
                       if(bRecordNotExist)
                       {                          
                               try{
                                            
                                            tx = session.beginTransaction();
                                    StoreIndentM indentHeader = new StoreIndentM();                                  
                                    StoreIndentMMap.put("tableObjectName", "StoreIndentM");                        
                                    StoreIndentMMap.put("isHospitalWise", "y");
                                    StoreIndentMMap.put("hospitalId", hospitalId);
                                    StoreIndentMMap.put("isYearly", "y");                        
                                    StoreIndentMMap.put("isMonthly", "n");
                                    StoreIndentMMap.put("isPrefix", "y");
                            
                                    StoreIndentMMap.put("transactionPrefixProperty", "transactionPrefixForSupplierIndent");
                                    
                                    try{
                                            indentNo = HMSUtil.generateTransactionSequence(StoreIndentMMap, session, hbt);
                                    }catch(Exception e)
                                    {
                                            System.out.print("Exception in generate  Supplier Indent No="+e);
                                    }                    
                                         

                                                    
                                    indentHeader.setIndentNo(indentNo);           
                                   
                                   
                                    
                                    if(poNo !=0)
                                    {
                                    	StorePoHeader poHeader = new StorePoHeader();
                                        poHeader.setId(poNo);
                                        indentHeader.setPo(poHeader);
                                    }                            
                                    
                                   
                              
                               indentHeader.setDepartment(department);           
                                                                 
                               indentHeader.setLastChgBy(user); 
                               indentHeader.setCreatedBy(user);
                               indentHeader.setLastChgDate(changedDate);
                               indentHeader.setIndentCreationDate(HMSUtil.convertStringTypeDateToDateType(indentDate));
                               indentHeader.setIndentDate(HMSUtil.convertStringTypeDateToDateType(indentDate));
                               indentHeader.setIndentType("I");
                               indentHeader.setLastChgTime(changedTime);
                               indentHeader.setIndentReceivedStatus("n");
                               indentHeader.setStatus("y");
                               indentHeader.setImported("i");
                               if(hospitalId !=0)
                               {
                                       MasHospital hospital1 = new MasHospital();
                                       hospital1.setId(hospitalId);
                                       indentHeader.setHospital(hospital1);
                               }                                
                                                              

                                            hbt.save(indentHeader);
                                            hbt.refresh(indentHeader);                                                
                                            
                                            
                                            String tableRowId = "";
                                            tableRowId = box.getString("tableRowId");
                                            
                                            System.out.println("tableRowId="+tableRowId);

                                            String array_RowId[];
                                            array_RowId = tableRowId.split(",");
                                            System.out.println("array_RowId="+array_RowId+"tableRowId="+tableRowId);
                                            System.out.println("length="+array_RowId.length);
                                            
                                            if (tableRowId != "")
                                            {
                                                    for (int i = 0; i < array_RowId.length; i++)
                                                    {                                                          
                                                           
                                                            double txtRequiredQty = box.getDouble("txtRequiredQty"+array_RowId[i]);                                                            
                                                            double txtUnitRate = box.getDouble("txtUnitRate"+array_RowId[i]);                                                                
                                                            double txtItemValue = box.getDouble("txtItemValue"+array_RowId[i]);
                                                          
                                                            int brandId=0;
                                                            int manuId= 0;
                                                            int itemId = 0;
                                                           
                                                            StorePoDetail poDetails= (StorePoDetail)hbt.get(StorePoDetail.class, Integer.parseInt(array_RowId[i]));
                                                            if(poDetails != null)
                                                            {                                                           
                                                                    
                                                                    
                                                                    if(poDetails.getManufacturer() != null)
                                                                    {
                                                                            manuId= poDetails.getManufacturer().getId(); 
                                                                           
                                                                    }
                                                                    if(poDetails.getBrand() != null)
                                                                    {
                                                                            brandId= poDetails.getBrand().getId();                                                                        
                                                                    }
                                                                    if(poDetails.getItem() != null)
                                                                    {
                                                                            itemId= poDetails.getItem().getId();                                                                        
                                                                    }
                                                                    
                                                                  
                                                                    
                                                            }
                                                            
                                                            StoreIndentT indentDetails = new StoreIndentT();                                 
                                                                                                    
                                                            StorePoDetail dt = new StorePoDetail();
                                                            dt.setId(Integer.parseInt(array_RowId[i]));
                                                            indentDetails.setPoDetail(dt);
                                                            indentDetails.setQtyInDemand(new BigDecimal(txtRequiredQty));                                                            
                                                            indentDetails.setUnitRate(new BigDecimal(txtUnitRate).setScale(2, BigDecimal.ROUND_HALF_UP));
                                                            indentDetails.setTotalCost(new BigDecimal(txtItemValue).setScale(2, BigDecimal.ROUND_HALF_UP));
                                                            if(manuId !=0)
                                                            {
                                                            	MasManufacturer mn = new MasManufacturer();
                            									mn.setId(manuId);
                            									indentDetails.setManufacturer(mn);
                                                            }
                                                            if(brandId !=0)
                                                            {
                                                            	MasStoreBrand br = new MasStoreBrand();
                            									br.setId(brandId);
                            									indentDetails.setBrand(br);
                                                            }
                                                                    
                                                            if(itemId !=0)
                                                            {
                                                                    MasStoreItem item = new MasStoreItem();
                                                                    item.setId(itemId);
                                                                    indentDetails.setItem(item);
                                                            }
                                                            indentDetails.setIndent(indentHeader);
                                                            
                                                            hbt.save(indentDetails);
                                                            hbt.refresh(indentDetails);        
                                                            indentHeaderId = indentHeader.getId();
                                                            
                                                            
                                                    }
                                            }
                                            tx.commit();
                                            bSuccessfullyAdded = true;
                                    }
                                    
                                    catch(Exception e)
                                    {
                                            System.out.println("Error is PO Supplier Submission="+e);
                                            if (tx != null) {
                                                    tx.rollback();
                                                    e.printStackTrace();
                                                    System.out.print(e);
                                            }
                                    }
                              
                       }// close if for bRecordExist
            
            
                    if(bRecordNotExist)
                    {
                            if (bSuccessfullyAdded) {
                                            
                                            if(txtRequestType.equalsIgnoreCase("SAVE"))
                                            {
                                                    message = "Indent to Supplier is created successfully and Refernce Number is: "
                                                                    + indentNo;
                                            }
                                            
                                            if(txtRequestType.equalsIgnoreCase("SUBMIT"))
                                            {
                                                    message = "Indent to Supplier is created successfully and Refernce Number is: "
                                                                    + indentNo;
                                            }
                    }
                            else
                            {
                                    message = "Try Again";
                            }
                            
                                    
                            } else {

                                    message = "NA";
                            }                

            datamap.put("message", message);
            datamap.put("bSuccessfullyAdded", bSuccessfullyAdded);
            datamap.put("Id", indentHeaderId);
            
            return datamap;        
            
            
    }
	
	
	@Override
	public Map<String, Object> getListOfSupplierIndent(Box box) {
		Map<String,Object> datamap = new HashMap<String,Object>();
		List<StoreIndentM> indentList = new ArrayList<StoreIndentM>();
		
		Session session = (Session) getSession();
		int pagingSize = 10;
		int pageNo = 1;		
		int mprNo = 0;		
		int ddlRequestYear = 0;
		int ddlSupplier=0;
		int hospitalId = 0;
		int PONo=0;
		
		
		if (box.getString("PN") != null)
			pageNo = Integer.parseInt(box.getString("PN"));
		
		/*if (box.getString("mprNo") != null)
			mprNo = box.getInt("mprNo");*/
		if (box.getString("ddlRequestYear") != null)
			ddlRequestYear = box.getInt("ddlRequestYear");
		if (box.getString("ddlSupplier") != null)
			ddlSupplier = box.getInt("ddlSupplier");	
		if (box.getInt("PONo") != 0)
			PONo = box.getInt("PONo");
		
		String ddlIndentStatus = box.getString("ddlIndentStatus");
		
		
		
		Criteria cr = null;
		cr = session.createCriteria(StoreIndentM.class);
		cr = cr.addOrder(Order.desc("IndentDate"));		
		
		System.out.println("ddlRequestYear="+ddlRequestYear);
		System.out.println("ddlSupplier="+ddlSupplier);
		System.out.println("ddlIndentStatus="+ddlIndentStatus);
		
		cr = cr.createAlias("Po", "ph");
		if (ddlRequestYear != 0 ) {
			cr=cr.createAlias("ph.FinancialYear", "yr");;
			cr = cr.add(Restrictions.eq("yr.Id", ddlRequestYear));
		}
		
		if (ddlSupplier != 0 ) {
			cr = cr.createAlias("ph.Supplier", "sp");
			cr = cr.add(Restrictions.eq("sp.Id", ddlSupplier));
		}
		if(!ddlIndentStatus.equalsIgnoreCase("0"))
		{
			cr = cr.add(Restrictions.eq("IndentReceivedStatus", ddlIndentStatus).ignoreCase());
		}
		
			
		
		
		List totalMatches = cr.list();
		cr = cr.setFirstResult(pagingSize * (pageNo - 1));
		cr = cr.setMaxResults(pagingSize);
		indentList = cr.list();

		
		int totalRecords = totalMatches.size();
		totalMatches.clear();


		datamap.put("indentList", indentList);
		datamap.put("totalRecords", totalRecords);

		return datamap;

	}
	
	public Map<String, Object> getSupplierIndentDetails(int headerId) 
	{
		Map<String,Object> datamap = new HashMap<String,Object>();
		List<StoreIndentM> indentHeader = new ArrayList<StoreIndentM>();
		List<StoreIndentT> indentDetails = new ArrayList<StoreIndentT>();
		
				
		Session session = (Session) getSession();
		Criteria cr = null;
		cr = session.createCriteria(StoreIndentT.class);
		cr = cr.createAlias("Indent", "header");
		cr = cr.add(Restrictions.eq("header.Id", headerId));
		indentDetails = cr.list();
		
		cr = session.createCriteria(StoreIndentM.class);		
		cr = cr.add(Restrictions.eq("Id", headerId));
		indentHeader = cr.list();	
		
		datamap.put("indentDetails", indentDetails);
		datamap.put("indentHeader", indentHeader);
		
		return datamap;
		
		
	}
	public Map<String, Object> fillItemsForIndent(
			Map<String, Object> dataMap) {

		session = (Session) getSession();
		String pvms = null;
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreItem> itemList1 = new ArrayList<MasStoreItem>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List objectList = new ArrayList();
		int deptId = 0;
		int hospitalId = 0;
		
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
		SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
				
		
		String date4MySQL = null;
		try {
			date4MySQL = formatterOut.format(formatterIn.parse(date));
		} catch (Exception e1) {

			e1.printStackTrace();
		}
		Date datestr = java.sql.Date.valueOf(date4MySQL);
		SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
		String issueDate=sdf.format(datestr);
		
		
		BigDecimal stockIn = null;
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		try {
			String str = "" + dataMap.get("pvmsNo");
			
			Criteria c = session.createCriteria(MasStoreItem.class)
					.add(Restrictions.eq("PvmsNo", str))					
					.add(Restrictions.eq("Status", "y").ignoreCase());
					itemList = c.list();

					

					itemList = c.list();
					
					
					
			
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		try {
			int itemId = 0;
			for (MasStoreItem masStoreItem : itemList) {
				itemId = masStoreItem.getId();

			}

			if (itemId != 0 && deptId!=0 ) {
			
			String qry = "SELECT sum(closing_stock) FROM store_item_batch_stock where item_id= "+ itemId + " and department_id= " +deptId+ "and expiry_date >'"+ issueDate + "'";
			objectList = (List) session.createSQLQuery(qry).list();

			}
			
			if (objectList.get(0) != null)
				stockIn = new BigDecimal("" + objectList.get(0));
			else
				stockIn = new BigDecimal("0");
			
			
			map.put("itemList", itemList);
			map.put("stockIn", stockIn);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}
	
	@Override
	public Map<String, Object> getRRListForInspection(Box box) {
		Map<String,Object> datamap = new HashMap<String,Object>();
		List<StoreGrnM> grnList = new ArrayList<StoreGrnM>();
		
		Session session = (Session) getSession();
		int pagingSize = 10;
		int pageNo = 1;		
		int mprNo = 0;		
		int ddlRequestYear = 0;
		int ddlSupplier=0;
		int hospitalId = 0;
		int PONo=0;
		
		
		if (box.getString("PN") != null)
			pageNo = Integer.parseInt(box.getString("PN"));
		
		/*if (box.getString("mprNo") != null)
			mprNo = box.getInt("mprNo");*/
		if (box.getString("ddlRequestYear") != null)
			ddlRequestYear = box.getInt("ddlRequestYear");
		if (box.getString("ddlSupplier") != null)
			ddlSupplier = box.getInt("ddlSupplier");	
		if (box.getInt("PONo") != 0)
			PONo = box.getInt("PONo");
		
		String flag="";
		flag= box.getString("flag");
		
		Criteria cr = null;
		cr = session.createCriteria(StoreGrnM.class);
		if(flag.equalsIgnoreCase("Entered"))
		cr = cr.add(Restrictions.eq("GrnStatus", "Entered"));
		if(flag.equalsIgnoreCase("Inspected"))
			cr = cr.add(Restrictions.eq("GrnStatus", "Inspected"));
		cr = cr.addOrder(Order.desc("GrnDate"));
			
		
		
		List totalMatches = cr.list();
		cr = cr.setFirstResult(pagingSize * (pageNo - 1));
		cr = cr.setMaxResults(pagingSize);
		grnList = cr.list();

		
		int totalRecords = totalMatches.size();
		totalMatches.clear();

System.out.println("grnList="+grnList.size());
		datamap.put("grnList", grnList);
		datamap.put("totalRecords", totalRecords);

		return datamap;

	}
	
	
	public Map<String, Object> getRRDetailsforInspection(int headerId) 
	{
		Map<String,Object> datamap = new HashMap<String,Object>();
		List<StoreGrnM> grnHeader = new ArrayList<StoreGrnM>();
		List<StoreGrnT> grnDetails = new ArrayList<StoreGrnT>();
		
				
		Session session = (Session) getSession();
		Criteria cr = null;
		cr = session.createCriteria(StoreGrnT.class);
		cr = cr.createAlias("GrnMaster", "header");
		cr = cr.add(Restrictions.eq("header.Id", headerId));
		grnDetails = cr.list();
		
		cr = session.createCriteria(StoreGrnM.class);		
		cr = cr.add(Restrictions.eq("Id", headerId));
		grnHeader = cr.list();	
		
		datamap.put("grnDetails", grnDetails);
		datamap.put("grnHeader", grnHeader);
		
		return datamap;		
		
	}
	
	@Override
	public Map<String, Object> submitRRInspectionDetails(Box box) {
		
		Map<String,Object>datamap = new HashMap<String,Object>();
		
		String DiscrepancyFlag="N";
		Session session = (Session) getSession();
		Transaction tx = null;
		boolean bSuccessfullyAdded = false;
		
		String message= "";
		//String ProjectionSystemGeneratedHeaderId = "PRJ001";
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		int grnHeaderId=0;
		
		grnHeaderId= box.getInt("grnHeaderId");
		
		int hospitalId=0;
		hospitalId = box.getInt("hospitalId");
		String DiscrepancyAdviseNo="";
		
		int UserId = box.getInt("CHANGED_BY");
		Users user = new Users();
		user.setId(UserId);
		
		Date changedDate = new Date();
		String changedTime = (String) HMSUtil.getCurrentDateAndTime().get("currentTime");
		
		
		Map<String, Object> adMap = new HashMap<String, Object>();
			   if(true)
			   {			   
	                 
				 
				   
				    adMap.put("tableObjectName", "StoreGrnMDiscrepancy");			
					adMap.put("isHospitalWise", "n");
					adMap.put("hospitalId", hospitalId);
					adMap.put("isYearly", "y");			
					adMap.put("isMonthly", "n");
					adMap.put("isPrefix", "y");
				
					adMap.put("transactionPrefixProperty", "transactionPrefixForRRDiscrepancy");
					
					try{
						DiscrepancyAdviseNo = HMSUtil.generateTransactionSequence(adMap, session, hbt);
					}catch(Exception e)
					{
						System.out.print("Exception in Method Save RR Inspection="+e);
					}
					StoreGrnM objGRNHeader = (StoreGrnM)hbt.get(StoreGrnM.class, grnHeaderId);
					if(objGRNHeader != null)
					{
						objGRNHeader.setInspectedBy(user);
						objGRNHeader.setInspectedDate(changedDate);	
						objGRNHeader.setGrnStatus("Inspected");
						
					}
				   
					
					
					try{
						
						tx = session.beginTransaction();


						hbt.update(objGRNHeader);
						hbt.refresh(objGRNHeader);
						

						Vector grnDetailId = box.getVector("grnDetailId");
						
						
							for (int i = 0; i < grnDetailId.size(); i++)
							{
								int grnId = Integer.parseInt(grnDetailId.get(i).toString());
								StoreGrnT objGRNDetail = (StoreGrnT)hbt.get(StoreGrnT.class, grnId);
								System.out.println("grnId"+ grnId);
								
								
								double txtRejectedQty = box.getDouble("txtRejectedQty" + grnId);
								double txtAcceptedQty = box.getDouble("txtAcceptedQty" + grnId);
								double txtUnitRate = box.getDouble("txtUnitRate" + grnId);
								double txtItemValue = box.getDouble("txtItemValue" + grnId);
								String txtRemarks = box.getString("txtRemarks" + grnId);
								
								objGRNDetail.setRejectedQty(new BigDecimal(txtRejectedQty));
								objGRNDetail.setAcceptedQty(new BigDecimal(txtAcceptedQty));
								objGRNDetail.setUnitRate(new BigDecimal(txtUnitRate).setScale(2, BigDecimal.ROUND_HALF_UP));
								objGRNDetail.setAmountValue(new BigDecimal(txtItemValue).setScale(2, BigDecimal.ROUND_HALF_UP));
								objGRNDetail.setRrRemarks(txtRemarks);
																
								hbt.update(objGRNDetail);
								hbt.refresh(objGRNDetail);
								
								int itemId = objGRNDetail.getItem().getId();
								int departmentId  = objGRNDetail.getGrnMaster().getDepartment().getId(); 
								int hospitalId1 = objGRNDetail.getGrnMaster().getHospital().getId();
								String txtBatchNo = objGRNDetail.getBatchNo();
								int brandId = objGRNDetail.getBrand().getId();
								int manuId = objGRNDetail.getManufacturer().getId();
								int poHeaderid = objGRNDetail.getGrnMaster().getPo().getId();
								
								List<StorePoDetail> poList = new ArrayList<StorePoDetail>();
								poList = session.createCriteria(StorePoDetail.class)
								.createAlias("Po", "header")
								.add(Restrictions.eq("header.Id", poHeaderid))
								.add(Restrictions.eq("Item.Id", itemId)).list();
								
								int poDetailId = poList.get(0).getId();
								
								 StorePoDetail poDetails= (StorePoDetail)hbt.get(StorePoDetail.class, poDetailId);
                                 if(poDetails != null)
                                 {    
                                 
                                                                                 
                                         BigDecimal AcceptedQty = new BigDecimal(0);
                                         if(poDetails.getAcceptedQty() != null)
                                         {
                                                 AcceptedQty= poDetails.getAcceptedQty();                                                                                
                                         }
                                         AcceptedQty = AcceptedQty.subtract(new BigDecimal(txtRejectedQty));
                                         poDetails.setAcceptedQty(AcceptedQty);
                                         
                                         BigDecimal RejectedQty = new BigDecimal(0);
                                         if(poDetails.getRejectedQty() != null)
                                         {
                                                 RejectedQty= poDetails.getRejectedQty();                                                                                
                                         }
                                         RejectedQty= RejectedQty.add(new BigDecimal(txtRejectedQty));
                                         poDetails.setRejectedQty(RejectedQty);
                                         
                                                                                  
                                         hbt.update(poDetails);
                                         hbt.refresh(poDetails);
                                         
                                 }
								
								if(txtRejectedQty > 0)
								{
									StoreGrnM objGRNHeader1 = (StoreGrnM)hbt.get(StoreGrnM.class, grnHeaderId);
									if(objGRNHeader1 != null)
									{
										objGRNHeader1.setDiscrepancyAdviseNo(DiscrepancyAdviseNo);										
										
										hbt.update(objGRNHeader1);
										hbt.refresh(objGRNHeader1);
										DiscrepancyFlag = "Y";
									}
								}
								
								
								
								
								
							}
						
						tx.commit();
						bSuccessfullyAdded = true;
					}
					
					catch(Exception e)
					{
						System.out.println("dd="+e);
						if (tx != null) {
							tx.rollback();
							e.printStackTrace();
							System.out.print(e);
						}
					}
				   
			   }// close if for bRecordExist
		
		
		
				if (bSuccessfullyAdded) {
					
						message = "Inspection Details are submitted sucessfully: ";
					
					
				} else {

					message = "Try Again!";
				}		

		datamap.put("message", message);
		datamap.put("bSuccessfullyAdded", bSuccessfullyAdded);
		datamap.put("grnHeaderId", grnHeaderId);		
		datamap.put("DiscrepancyFlag", DiscrepancyFlag);
		
		
		return datamap;	
		
		
	}
	
	@Override
	public Map<String, Object> submitRRApprovalDetails(Box box) {
		
		Map<String,Object>datamap = new HashMap<String,Object>();		
		
		Session session = (Session) getSession();
		Transaction tx = null;
		boolean bSuccessfullyAdded = false;
		
		String message= "";
		//String ProjectionSystemGeneratedHeaderId = "PRJ001";
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		int grnHeaderId=0;
		
		grnHeaderId= box.getInt("grnHeaderId");
		
		int hospitalId=0;
		hospitalId = box.getInt("hospitalId");
		String DiscrepancyAdviseNo="";
		
		int UserId = box.getInt("CHANGED_BY");
		Users user = new Users();
		user.setId(UserId);
		
		Date changedDate = new Date();
		String changedTime = (String) HMSUtil.getCurrentDateAndTime().get("currentTime");
		
		
		Map<String, Object> adMap = new HashMap<String, Object>();
			   if(true)
			   {			   
				    
					StoreGrnM objGRNHeader = (StoreGrnM)hbt.get(StoreGrnM.class, grnHeaderId);
					if(objGRNHeader != null)
					{
						objGRNHeader.setApprovedBy(user);
						objGRNHeader.setApprovalDate(changedDate);	
						objGRNHeader.setGrnStatus("Approved");
						
					} 					
					
					try{
						
						tx = session.beginTransaction();
						hbt.update(objGRNHeader);
						hbt.refresh(objGRNHeader);						

						Vector grnDetailId = box.getVector("grnDetailId");						
						
							for (int i = 0; i < grnDetailId.size(); i++)
							{
								int grnId = Integer.parseInt(grnDetailId.get(i).toString());
								StoreGrnT objGRNDetail = (StoreGrnT)hbt.get(StoreGrnT.class, grnId);
								System.out.println("grnId"+ grnId);
								
								
								double txtReceivedQty = box.getDouble("txtReceivedQty" + grnId);
								double txtRejectedQty = box.getDouble("txtRejectedQty" + grnId);
								double txtAcceptedQty = box.getDouble("txtAcceptedQty" + grnId);
								double txtUnitRate = box.getDouble("txtUnitRate" + grnId);
								double txtItemValue = box.getDouble("txtItemValue" + grnId);
								double txtShortQty = box.getDouble("txtShortageQty" + grnId);
								double txtOverQty = box.getDouble("txtSurplusQty" + grnId);
								String txtRemarks = box.getString("txtRemarks" + grnId);
								double previousShortageQty = objGRNDetail.getShortage().doubleValue();
								double ActualShortageQty = txtShortQty-previousShortageQty;
								
								double previousOverQty = objGRNDetail.getSurplus().doubleValue();
								double ActualOverQty = txtOverQty-previousOverQty;
								
								 StorePoDetail poDetails= (StorePoDetail)hbt.get(StorePoDetail.class, objGRNDetail.getPoDetail().getId());
                                 if(poDetails != null)
                                 {
                                	 System.out.println("txtShortQty="+txtShortQty);
                                	 System.out.println("ActualShortageQty="+ActualShortageQty);
                                	 if(txtShortQty >0)
                                	 {
                                		 System.out.println("in shoratgeif");
                                		 BigDecimal AcceptedQty = new BigDecimal(0);
                                         if(poDetails.getAcceptedQty() != null)
                                         {
                                                 AcceptedQty= poDetails.getAcceptedQty();                                                                                
                                         }
                                        
                                        	 AcceptedQty = AcceptedQty.subtract(new BigDecimal(ActualShortageQty));
                                             poDetails.setAcceptedQty(AcceptedQty);
                                       
                                         
                                         
                                         
                                         BigDecimal ReceivedQty = new BigDecimal(0);
                                         if(poDetails.getQuantityReceived() != null)
                                         {
                                        	 ReceivedQty= poDetails.getQuantityReceived();                                                                                
                                         }
                                         
                                         System.out.println("ReceivedQty="+ReceivedQty);
                                         
                                         
                                        	 ReceivedQty = ReceivedQty.subtract(new BigDecimal(ActualShortageQty));
                                             poDetails.setQuantityReceived(ReceivedQty);
                                        
                                         
                                         
                                         
                                	 }
                                 }
							
								objGRNDetail.setReceivedQty(new BigDecimal(txtReceivedQty));
								objGRNDetail.setRejectedQty(new BigDecimal(txtRejectedQty));
								objGRNDetail.setAcceptedQty(new BigDecimal(txtAcceptedQty));
								objGRNDetail.setUnitRate(new BigDecimal(txtUnitRate).setScale(2, BigDecimal.ROUND_HALF_UP));
								objGRNDetail.setAmountValue(new BigDecimal(txtItemValue).setScale(2, BigDecimal.ROUND_HALF_UP));
								objGRNDetail.setShortage(new BigDecimal(txtShortQty));
								
								objGRNDetail.setRrRemarks(txtRemarks);
								
								
								hbt.update(objGRNDetail);
								hbt.refresh(objGRNDetail);	
								
								int itemId = objGRNDetail.getItem().getId();
								int departmentId  = objGRNDetail.getGrnMaster().getDepartment().getId(); 
								int hospitalId1 = objGRNDetail.getGrnMaster().getHospital().getId();
								String txtBatchNo = objGRNDetail.getBatchNo();
								int brandId = objGRNDetail.getBrand().getId();
								int manuId = objGRNDetail.getManufacturer().getId();
								String txtManDate = objGRNDetail.getManufacturerDate() !=null?HMSUtil.convertDateToStringTypeDateOnly(objGRNDetail.getManufacturerDate()):"";
								String txtExpiryDate = objGRNDetail.getExpiryDate() !=null?HMSUtil.convertDateToStringTypeDateOnly(objGRNDetail.getExpiryDate()):"";
								
								
								
								List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
                    			StoreItemBatchStock storeItemBatchStock = null;
                                
                                storeItemBatchStockList = hbt
                    					.find("from jkt.hms.masters.business.StoreItemBatchStock as inp where inp.Item.Id = "
                    							+ itemId                                                							
                    							+ " and inp.Department.Id= "
                    							+ departmentId
                    							+ " and inp.BatchNo ='"
                    							+ txtBatchNo
                    							+ "' and inp.Brand.Id = "
                    							+ brandId
                    							+ " and inp.Manufacturer.Id = "
                    							+ manuId
                    							+ " and inp.Hospital.Id = "
                    							+hospitalId1);


                    					if (storeItemBatchStockList != null && storeItemBatchStockList.size() > 0) 
                    					{
                    						storeItemBatchStock = storeItemBatchStockList.get(0);


                    						BigDecimal existing_qty = new BigDecimal(0);                                                						

                    						if (storeItemBatchStock.getReceivedQty() != null) {
                    							existing_qty = storeItemBatchStock.getReceivedQty();
                    						} else {
                    							existing_qty = new BigDecimal(0);
                    						}                                               						
                    						
                    						BigDecimal new_closing_stock = new BigDecimal(0);
                    						
                    						if(storeItemBatchStock.getClosingStock() !=null)
                    						{
                    							BigDecimal existing_closing_stock = storeItemBatchStock.getClosingStock();                                                    						
                        						new_closing_stock = existing_closing_stock.add(new BigDecimal(txtAcceptedQty));
                    						}
                    						existing_qty = existing_qty.add(new BigDecimal(txtAcceptedQty));                                     						
                    						
                    						                                        						
                    						
                    						int id = storeItemBatchStock.getId();
                    						
                    						StoreItemBatchStock storeItemBatchStock1 = new StoreItemBatchStock();
                    						
                    						
                    						storeItemBatchStock1 = (StoreItemBatchStock) getHibernateTemplate().get(StoreItemBatchStock.class, id);
                    						if(storeItemBatchStock1 != null)
                    						{                                                							                                                   						
                    							storeItemBatchStock1.setReceivedQty(existing_qty);                                                    						
                        						storeItemBatchStock1.setClosingStock(new_closing_stock);
                        						storeItemBatchStock1.setManufactureDate(HMSUtil.convertStringTypeDateToDateType(txtManDate));
                        						storeItemBatchStock1.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(txtExpiryDate));
                        						storeItemBatchStock1.setBatchNo(txtBatchNo); 						
                        						
                        						
                        						storeItemBatchStock1.setCostPrice(new BigDecimal(txtUnitRate).setScale(2, BigDecimal.ROUND_HALF_UP));
                        						if(hospitalId !=0)
                                                {
                                                        MasHospital hospital1 = new MasHospital();
                                                        hospital1.setId(hospitalId);
                                                        storeItemBatchStock1.setHospital(hospital1);
                                                }    
                                                if(departmentId !=0)
                                                {
                                                	MasDepartment dept = new MasDepartment();
                                                	dept.setId(departmentId);
                                                	storeItemBatchStock1.setDepartment(dept);
                                                }
                                                if(itemId !=0)
                                                {
                                                	 MasStoreItem item = new MasStoreItem();
                                                     item.setId(itemId);
                                                	storeItemBatchStock1.setItem(item);
                                                }
                                                if(manuId !=0)
                                                {
                                                	MasManufacturer mn = new MasManufacturer();
                									mn.setId(manuId);
                									storeItemBatchStock1.setManufacturer(mn);
                                                }
                                                if(brandId !=0)
                                                {
                                                	MasStoreBrand br = new MasStoreBrand();
                									br.setId(brandId);
                									storeItemBatchStock1.setBrand(br);
                                                }
                                                storeItemBatchStock1.setLastChgDate(changedDate);
                                                storeItemBatchStock1.setLastChgBy(user);
                                                
                                                
                        						HibernateTemplate hbt1 = getHibernateTemplate();
                        						hbt1.setFlushModeName("FLUSH_EAGER");
                        						hbt1.setCheckWriteOperations(false);
                        						hbt1.update(storeItemBatchStock);
                    						}
                    					}
                    					else
                    					{
                    						StoreItemBatchStock storeItemBatchStock2 = new StoreItemBatchStock();
                    						storeItemBatchStock2.setReceivedQty(new BigDecimal(txtAcceptedQty));                                                    						
                    						storeItemBatchStock2.setClosingStock(new BigDecimal(txtAcceptedQty));   
                    						storeItemBatchStock2.setManufactureDate(HMSUtil.convertStringTypeDateToDateType(txtManDate));
                    						storeItemBatchStock2.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(txtExpiryDate));
                    						storeItemBatchStock2.setBatchNo(txtBatchNo); 						
                    						
                    						
                    						storeItemBatchStock2.setCostPrice(new BigDecimal(txtUnitRate).setScale(2, BigDecimal.ROUND_HALF_UP));
                    						if(hospitalId !=0)
                                            {
                                                    MasHospital hospital1 = new MasHospital();
                                                    hospital1.setId(hospitalId);
                                                    storeItemBatchStock2.setHospital(hospital1);
                                            }    
                                            if(departmentId !=0)
                                            {
                                            	MasDepartment dept = new MasDepartment();
                                            	dept.setId(departmentId);
                                            	storeItemBatchStock2.setDepartment(dept);
                                            }
                                            if(itemId !=0)
                                            {
                                            	 MasStoreItem item = new MasStoreItem();
                                                 item.setId(itemId);
                                            	storeItemBatchStock2.setItem(item);
                                            }
                                            if(manuId !=0)
                                            {
                                            	MasManufacturer mn = new MasManufacturer();
            									mn.setId(manuId);
            									storeItemBatchStock2.setManufacturer(mn);
                                            }
                                            if(brandId !=0)
                                            {
                                            	MasStoreBrand br = new MasStoreBrand();
            									br.setId(brandId);
            									storeItemBatchStock2.setBrand(br);
                                            }
                                            storeItemBatchStock2.setLastChgDate(changedDate);
                                            storeItemBatchStock2.setLastChgBy(user);
                                            
                    						HibernateTemplate hbt1 = getHibernateTemplate();
                    						hbt1.setFlushModeName("FLUSH_EAGER");
                    						hbt1.setCheckWriteOperations(false);
                    						hbt1.save(storeItemBatchStock2);
                    						
                    					   
                        				}
								
								
								
								
							}
						
						tx.commit();
						bSuccessfullyAdded = true;
					}
					
					catch(Exception e)
					{
						System.out.println("dd="+e);
						if (tx != null) {
							tx.rollback();
							e.printStackTrace();
							System.out.print(e);
						}
					}
				   
			   }// close if for bRecordExist
		
				
				if (bSuccessfullyAdded) {
					
						message = "Receving Report approved sucessfully ";
										
				} else {

					message = "Try Again!";
				}		

		datamap.put("message", message);
		datamap.put("bSuccessfullyAdded", bSuccessfullyAdded);
		datamap.put("grnHeaderId", grnHeaderId);
		
		
		return datamap;	
		
		
	}
	
	@SuppressWarnings("unchecked")
	public Map<String, Object> getSupplierIndentListbasedonPO(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIndentM> indentList = new ArrayList<StoreIndentM>();
		
		Criteria cr = null;
	
		
		
     
		int poNo = box.getInt("poNo");
		
		try {
	        if(poNo !=0)
	        {
	        	indentList=session.createCriteria(StoreIndentM.class)
						.createAlias("Po", "po")
						.add(Restrictions.eq("po.Id",poNo))
						.add(Restrictions.eq("IndentReceivedStatus","n").ignoreCase())
						/*.add(Restrictions.or(Restrictions.isNull("ReceivedStatus"), Restrictions.eq("ReceivedStatus","P").ignoreCase()))*/
						.list();
	        	map.put("indentList", indentList);
	        }
	        			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		
		
		return map;
	}

	

	@Override
	public Map<String, Object> fillItemsForUnsedMedicine(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreItemBatchStock> itemList = new ArrayList<StoreItemBatchStock>();
		
		Criteria cr = null;
	
		
		String BatchNo = box.getString("BatchNo");
		
		String ExpiryDate = box.getString("ExpiryDate");
		String flag= box.getString("flag");
		int ItemId = box.getInt("itemId");
		
		int deptId = box.getInt("deptId");
		int hospitalId = box.getInt("hospitalId");
		
				
		int poNo = box.getInt("poNo");
		 if(flag.equalsIgnoreCase("BatchNo"))
		 {
			 try {
			        if(BatchNo !="")
			        {
			        
			        	itemList=session.createCriteria(StoreItemBatchStock.class)
								.add(Restrictions.eq("BatchNo", BatchNo).ignoreCase())
								.add(Restrictions.eq("Hospital.Id", hospitalId))
								.add(Restrictions.eq("Department.Id", deptId))
								
								.list();
			        	System.out.println("itemListB="+itemList.size());
			    		
			        	map.put("itemList", itemList);
			        }
			        			
					
					
				} catch (Exception e) {
					e.printStackTrace();
				}
		 }
		 
		 if(flag.equalsIgnoreCase("ExpiryDate"))
		 {
			 
			 Date d1= HMSUtil.convertStringTypeDateToDateType(ExpiryDate);
			 try {
			        if(ExpiryDate !="")
			        {
			        	itemList=session.createCriteria(StoreItemBatchStock.class)
								.add(Restrictions.eq("ExpiryDate", d1))
								.add(Restrictions.eq("Hospital.Id", hospitalId))
								.add(Restrictions.eq("Department.Id", deptId))
								
								.list();
			        
			    		
			        	map.put("itemList", itemList);
			        }
			        			
					
					
				} catch (Exception e) {
					e.printStackTrace();
				}
		 }
		 
		 if(flag.equalsIgnoreCase("ItemId"))
		 {
			 try {
			        if(ItemId !=0)
			        {
			        	itemList=session.createCriteria(StoreItemBatchStock.class)
								.add(Restrictions.eq("Id", ItemId))
								
								.list();
			        	map.put("itemList", itemList);
			        }
			        			
					
					
				} catch (Exception e) {
					e.printStackTrace();
				}
		 }
		
		
		
		return map;
	}
	
	
	@Override
    public Map<String, Object> addStockofReturnedMedicine(Box box) {

            
            Map<String,Object>datamap = new HashMap<String,Object>();
            
            List<StorePoHeader> listA = new ArrayList<StorePoHeader>();
            Session session = (Session) getSession();
            Transaction tx = null;
            boolean bSuccessfullyAdded = false;
            
            String message= "";
            //String ProjectionSystemGeneratedHeaderId = "PRJ001";
            org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
            hbt.setFlushModeName("FLUSH_EAGER");
            hbt.setCheckWriteOperations(false);
            
            String txtRequestType = box.getString("txtRequestType"); // for save/submit(forward) to centre HEAD
          
            double invoiceAmount = box.getDouble("invoiceAmount");
            
            String challanNo = "";        
            String grnNo = "";        
            int grnHeaderId=0;
    
            int ddlRequestYear = box.getInt("ddlRequestYear");
            
            int hospitalId=box.getInt("hospitalId");
                      
                            
            String Status = "P";
            if(txtRequestType.equalsIgnoreCase("SAVE"))
            {
                    Status = "P";
            }
            if(txtRequestType.equalsIgnoreCase("SUBMIT"))
            {
                    Status = "F";
            }
            
            
            
            int departmentId =0;                
            
            
            hospitalId = box.getInt("hospitalId");
            departmentId = box.getInt("deptId");
            
            MasHospital hospital = new MasHospital();
            hospital.setId(hospitalId);
            
            MasDepartment department = new MasDepartment();
            department.setId(departmentId);
            int ddlEmployee = box.getInt("ddlEmployee");
            
            int UserId = box.getInt("CHANGED_BY");
            Users user = new Users();
            user.setId(UserId);
            
            Date changedDate = new Date();
            String changedTime = (String) HMSUtil.getCurrentDateAndTime().get("currentTime");
            
            boolean bRecordNotExist = true;
            Map<String, Object> rrMap = new HashMap<String, Object>();
            Map<String, Object> grnMap = new HashMap<String, Object>();
    
                       if(bRecordNotExist)
                       {                          
                               try{
                                            
                                            tx = session.beginTransaction();
                                    StoreGrnM grnHeader = new StoreGrnM();                                  
                                
                                                              
                                grnMap.put("tableObjectName", "StoreGrnM");                        
                                grnMap.put("isHospitalWise", "y");
                                grnMap.put("hospitalId", hospitalId);
                                grnMap.put("isYearly", "y");                        
                                grnMap.put("isMonthly", "n");
                                grnMap.put("isPrefix", "y");
                            
                                grnMap.put("transactionPrefixProperty", "transactionPrefixForGRN");
                                    
                                    try{
                                            grnNo = HMSUtil.generateTransactionSequence(grnMap, session, hbt);
                                    }catch(Exception e)
                                    {
                                            System.out.print("Exception in generate  GRN No="+e);
                                    }
                                                    
                                    grnHeader.setGrnNo(grnNo);                                
                                 
                                    grnHeader.setGrnDate(changedDate);
                                    
                                    grnHeader.setInvoiceAmount(new BigDecimal(invoiceAmount));
                                    grnHeader.setReceiveType("ReturnedMedicine");
                                    grnHeader.setEnteredBy(user);
                                    grnHeader.setGrnStatus("Approved");
                                 
                                   
                              
                               grnHeader.setDepartment(department);
                                                          
                               grnHeader.setLastChgBy(user);                                          
                               grnHeader.setLastChgDate(changedDate);
                               grnHeader.setLastChgTime(changedTime);
                               grnHeader.setStatus(Status);
                               if(hospitalId !=0)
                               {
                                       MasHospital hospital1 = new MasHospital();
                                       hospital1.setId(hospitalId);
                                       grnHeader.setHospital(hospital1);
                               }                                
                                                              

                                            hbt.save(grnHeader);
                                            hbt.refresh(grnHeader);                                                
                                            Vector ItemStockId = box.getVector("ItemStockId");
                                            Vector ItemId = box.getVector("ItemId");
                                            Vector BatchNo = box.getVector("BatchNo");
                                            Vector ManufacturerId = box.getVector("ManufacturerId");
                                            Vector BrandId = box.getVector("BrandId");
                                            Vector ExpiryDate = box.getVector("ExpiryDate");
                                            Vector txtManuDate = box.getVector("txtManuDate");
                                            Vector EnteredQty = box.getVector("txtEnteredQty");
                                            Vector txtUnitRate = box.getVector("txtUnitRate");
                                            System.out.println("ItemStockIdsize="+ItemStockId.size());
                                            System.out.println("EnteredQty="+EnteredQty.size());
                                            
                                            if (ItemStockId.size()>0 )
                                            {
                                                    for (int i = 0; i < ItemStockId.size(); i++)
                                                    {
                                                    	System.out.println("stockid="+ItemStockId.get(i));
                                                    	System.out.println("itemid="+ItemId.get(i));
                                                    	 double txtEnteredQty = Double.parseDouble(EnteredQty.get(i).toString());
                                                    	 String sBatchNo  = BatchNo.get(i).toString();
                         								
                         								
                                                    	
                                                    	if(ItemStockId.get(i) !="")
                                                    	{
                                                    		int stockId= Integer.parseInt(ItemStockId.get(i).toString());
                                                           
                                                            StoreItemBatchStock batchStock = (StoreItemBatchStock)hbt.get(StoreItemBatchStock.class, stockId);
                                                            if(batchStock !=null)
                                                            {
                                                            	int itemId = batchStock.getItem().getId();
                                								int deptId  = batchStock.getDepartment()!=null?batchStock.getDepartment().getId():0; 
                                								int hospitalId1 = batchStock.getHospital()!=null?batchStock.getHospital().getId():0;
                                								String txtBatchNo = batchStock.getBatchNo()!=null?batchStock.getBatchNo():"";
                                								int brandId = batchStock.getBrand()!=null?batchStock.getBrand().getId():0;
                                								int manuId = batchStock.getManufacturer()!=null?batchStock.getManufacturer().getId():0;
                                								String txtManDate = batchStock.getManufactureDate() !=null?HMSUtil.convertDateToStringTypeDateOnly(batchStock.getManufactureDate()):"";
                                								String txtExpiryDate = batchStock.getExpiryDate() !=null?HMSUtil.convertDateToStringTypeDateOnly(batchStock.getExpiryDate()):"";
                                								double dUnitRate = Double.parseDouble(txtUnitRate.get(i).toString());
                                								StoreGrnT grnDetails = new StoreGrnT();  
                                								double ItemValue = dUnitRate * txtEnteredQty;
                                                                
                                								invoiceAmount = invoiceAmount+ ItemValue;
                                                                
                                                                grnDetails.setManufacturerDate(HMSUtil.convertStringTypeDateToDateType(txtManDate));
                                                                grnDetails.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(txtExpiryDate));
                                                                grnDetails.setBatchNo(txtBatchNo);
                                                                grnDetails.setReceivedQty(new BigDecimal(txtEnteredQty));
                                                                grnDetails.setAcceptedQty(new BigDecimal(txtEnteredQty));
                                                                grnDetails.setRejectedQty(new BigDecimal(0));
                                                                grnDetails.setUnitRate(new BigDecimal(dUnitRate).setScale(2, BigDecimal.ROUND_HALF_UP));
                                                                grnDetails.setAmountValue(new BigDecimal(ItemValue).setScale(2, BigDecimal.ROUND_HALF_UP));
                                                                if(manuId !=0)
                                                                {
                                                                	MasManufacturer mn = new MasManufacturer();
                                									mn.setId(manuId);
                                									grnDetails.setManufacturer(mn);
                                                                }
                                                                if(brandId !=0)
                                                                {
                                                                	MasStoreBrand br = new MasStoreBrand();
                                									br.setId(brandId);
                                									grnDetails.setBrand(br);
                                                                }
                                                                        
                                                                if(itemId !=0)
                                                                {
                                                                        MasStoreItem item = new MasStoreItem();
                                                                        item.setId(itemId);
                                                                        grnDetails.setItem(item);
                                                                }
                                                                grnDetails.setGrnMaster(grnHeader);
                                                                
                                                                BigDecimal new_closing_stock = new BigDecimal(0);
                                        						
                                        						if(batchStock.getClosingStock() !=null)
                                        						{
                                        							BigDecimal existing_closing_stock = batchStock.getClosingStock();                                                    						
                                            						new_closing_stock = existing_closing_stock.add(new BigDecimal(txtEnteredQty));
                                            						batchStock.setClosingStock(new_closing_stock);
                                        						}
                                        						
                                        						hbt.update(batchStock);
                                        						hbt.refresh(batchStock);
                                        						
                                        						hbt.save(grnDetails);
                                                                hbt.refresh(grnDetails);
                                                                
                                                                
                                                            }    
                                                    	}
                                                    	
                                                    	if(ItemId.get(i) !="")
                                                    	{
                                                    		int itemId = Integer.parseInt(ItemId.get(i).toString());
                                                    		double dUnitRate = Double.parseDouble(txtUnitRate.get(i).toString());
                             								int brandId = BrandId.get(i) !=""?Integer.parseInt(BrandId.get(i).toString()):0;
                             								int manuId = ManufacturerId.get(i) !=""?Integer.parseInt(ManufacturerId.get(i).toString()):0;
                             								String txtManDate = txtManuDate.get(i).toString();
                             								String txtExpiryDate = ExpiryDate.get(i).toString();
                            								
                            								
                            								StoreGrnT grnDetails = new StoreGrnT();  
                            								double ItemValue = dUnitRate * txtEnteredQty;
                                                            
                            								invoiceAmount = invoiceAmount+ ItemValue;
                                                            
                                                            grnDetails.setManufacturerDate(HMSUtil.convertStringTypeDateToDateType(txtManDate));
                                                            grnDetails.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(txtExpiryDate));
                                                            grnDetails.setBatchNo(sBatchNo);
                                                            grnDetails.setReceivedQty(new BigDecimal(txtEnteredQty));
                                                            grnDetails.setAcceptedQty(new BigDecimal(txtEnteredQty));
                                                            grnDetails.setRejectedQty(new BigDecimal(0));
                                                            grnDetails.setUnitRate(new BigDecimal(dUnitRate).setScale(2, BigDecimal.ROUND_HALF_UP));
                                                            grnDetails.setAmountValue(new BigDecimal(ItemValue).setScale(2, BigDecimal.ROUND_HALF_UP));
                                                            if(manuId !=0)
                                                            {
                                                            	MasManufacturer mn = new MasManufacturer();
                            									mn.setId(manuId);
                            									grnDetails.setManufacturer(mn);
                                                            }
                                                            if(brandId !=0)
                                                            {
                                                            	MasStoreBrand br = new MasStoreBrand();
                            									br.setId(brandId);
                            									grnDetails.setBrand(br);
                                                            }
                                                                    
                                                            if(itemId !=0)
                                                            {
                                                                    MasStoreItem item = new MasStoreItem();
                                                                    item.setId(itemId);
                                                                    grnDetails.setItem(item);
                                                            }
                                                            grnDetails.setGrnMaster(grnHeader);
                                                            
                                                                                       						
                                    						
                                    						
                                    						hbt.save(grnDetails);
                                                            hbt.refresh(grnDetails);
                                                            List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
                                                			StoreItemBatchStock storeItemBatchStock = null;
                                                            
                                                            storeItemBatchStockList = hbt
                                                					.find("from jkt.hms.masters.business.StoreItemBatchStock as inp where inp.Item.Id = "
                                                							+ itemId                                                							
                                                							+ " and inp.Department.Id= "
                                                							+ departmentId
                                                							+ " and inp.BatchNo ='"
                                                							+ sBatchNo
                                                							+ "' and inp.Brand.Id = "
                                                							+ brandId
                                                							+ " and inp.Manufacturer.Id = "
                                                							+ manuId
                                                							+ " and inp.Hospital.Id = "
                                                							+hospitalId);


                                                					if (storeItemBatchStockList != null && storeItemBatchStockList.size() > 0) 
                                                					{
                                                						storeItemBatchStock = storeItemBatchStockList.get(0);


                                                						BigDecimal existing_qty = new BigDecimal(0);                                                						

                                                						if (storeItemBatchStock.getReceivedQty() != null) {
                                                							existing_qty = storeItemBatchStock.getReceivedQty();
                                                						} else {
                                                							existing_qty = new BigDecimal(0);
                                                						}                                               						
                                                						
                                                						BigDecimal new_closing_stock = new BigDecimal(0);
                                                						
                                                						if(storeItemBatchStock.getClosingStock() !=null)
                                                						{
                                                							BigDecimal existing_closing_stock = storeItemBatchStock.getClosingStock();                                                    						
                                                    						new_closing_stock = existing_closing_stock.add(new BigDecimal(txtEnteredQty));
                                                						}
                                                						existing_qty = existing_qty.add(new BigDecimal(txtEnteredQty));   
                                                            
                                                            
                                                            StoreItemBatchStock storeItemBatchStock2 =  new StoreItemBatchStock();                                                           
                                                            
                                                            
                                    						storeItemBatchStock2.setReceivedQty(existing_qty);                                                    						
                                    						storeItemBatchStock2.setClosingStock(new_closing_stock);   
                                    						
                                                            storeItemBatchStock2.setLastChgDate(changedDate);
                                                            storeItemBatchStock2.setLastChgBy(user);
                                                            
                                    						HibernateTemplate hbt1 = getHibernateTemplate();
                                    						hbt1.setFlushModeName("FLUSH_EAGER");
                                    						hbt1.setCheckWriteOperations(false);
                                    						hbt1.save(storeItemBatchStock2);
                                                            
                            								
                                                    	}
                                                		
                                                		else
                                                			{
                                                						StoreItemBatchStock storeItemBatchStock3 = new StoreItemBatchStock();
                                                						storeItemBatchStock3.setReceivedQty(new BigDecimal(txtEnteredQty));                                                    						
                                                						storeItemBatchStock3.setClosingStock(new BigDecimal(txtEnteredQty));   
                                                						storeItemBatchStock3.setManufactureDate(HMSUtil.convertStringTypeDateToDateType(txtManDate));
                                                						storeItemBatchStock3.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(txtExpiryDate));
                                                						storeItemBatchStock3.setBatchNo(sBatchNo); 						
                                                						
                                                						
                                                						storeItemBatchStock3.setCostPrice(new BigDecimal(dUnitRate).setScale(2, BigDecimal.ROUND_HALF_UP));
                                                						if(hospitalId !=0)
                                                                        {
                                                                                MasHospital hospital1 = new MasHospital();
                                                                                hospital1.setId(hospitalId);
                                                                                storeItemBatchStock3.setHospital(hospital1);
                                                                        }    
                                                                        if(departmentId !=0)
                                                                        {
                                                                        	MasDepartment dept = new MasDepartment();
                                                                        	dept.setId(departmentId);
                                                                        	storeItemBatchStock3.setDepartment(dept);
                                                                        }
                                                                        if(itemId !=0)
                                                                        {
                                                                        	 MasStoreItem item = new MasStoreItem();
                                                                             item.setId(itemId);
                                                                        	storeItemBatchStock3.setItem(item);
                                                                        }
                                                                        if(manuId !=0)
                                                                        {
                                                                        	MasManufacturer mn = new MasManufacturer();
                                        									mn.setId(manuId);
                                        									storeItemBatchStock3.setManufacturer(mn);
                                                                        }
                                                                        if(brandId !=0)
                                                                        {
                                                                        	MasStoreBrand br = new MasStoreBrand();
                                        									br.setId(brandId);
                                        									storeItemBatchStock3.setBrand(br);
                                                                        }
                                                                        storeItemBatchStock3.setLastChgDate(changedDate);
                                                                        storeItemBatchStock3.setLastChgBy(user);
                                                                        
                                                						HibernateTemplate hbt1 = getHibernateTemplate();
                                                						hbt1.setFlushModeName("FLUSH_EAGER");
                                                						hbt1.setCheckWriteOperations(false);
                                                						hbt1.save(storeItemBatchStock3);
                                                					}
                                                                                                   
                                                            
                                                            
                                                            
                                                            
                                                            
                                                            
                                                   }
                                                    
                                                    grnHeader.setInvoiceAmount(new BigDecimal(invoiceAmount).setScale(2, BigDecimal.ROUND_HALF_UP));
                                                    hbt.update(grnHeader);
                                                    hbt.refresh(grnHeader);
                                                    grnHeaderId = grnHeader.getId();
                                            }
                                            tx.commit();
                                            bSuccessfullyAdded = true;
                                    }
                               }
                                    
                                    catch(Exception e)
                                    {
                                            System.out.println("Error is Returned Medicine List Addition="+e);
                                            if (tx != null) {
                                                    tx.rollback();
                                                    e.printStackTrace();
                                                    System.out.print(e);
                                            }
                                    }
                              
                       }// close if for bRecordExist
            
            
                   
                            if (bSuccessfullyAdded) {
                                            
                                        
                                                    message = "Returned Medicine added sucessfully and the reference number is: "
                                                                    + grnNo;
                                           
                            	}
                            else
                            {
                                    message = "Try Again";
                            }
                            
                            System.out.println("bSuccessfullyAdded="+bSuccessfullyAdded);    

            datamap.put("message", message);
            datamap.put("bSuccessfullyAdded", bSuccessfullyAdded);
            datamap.put("Id", grnHeaderId);
            
            return datamap;        
            
            
    }
	
	@Override
	public Map<String, Object> getListOfUnusedMedicine(Box box) {
		Map<String,Object> datamap = new HashMap<String,Object>();
		List<StoreGrnM> grnList = new ArrayList<StoreGrnM>();
		
		Session session = (Session) getSession();
		int pagingSize = 10;
		int pageNo = 1;		
		int mprNo = 0;		
		int ddlRequestYear = 0;
		int ddlSupplier=0;
		int hospitalId = 0;
		int departmentId=0;
		int PONo=0;		
		
		if (box.getString("PN") != null)
			pageNo = Integer.parseInt(box.getString("PN"));
				
		if (box.getInt("departmentId") != 0)
			departmentId = box.getInt("departmentId");
		if (box.getInt("hospitalId") != 0)
			hospitalId = box.getInt("hospitalId");	
		
		String flag="";
		flag= box.getString("flag");
		
		Criteria cr = null;
		cr = session.createCriteria(StoreGrnM.class);
		cr = cr.add(Restrictions.eq("Hospital.Id", hospitalId));
		cr = cr.add(Restrictions.eq("Department.Id", departmentId));
		cr = cr.add(Restrictions.eq("ReceiveType", "ReturnedMedicine").ignoreCase());
		cr = cr.addOrder(Order.desc("GrnDate"));
			
		
		
		List totalMatches = cr.list();
		cr = cr.setFirstResult(pagingSize * (pageNo - 1));
		cr = cr.setMaxResults(pagingSize);
		grnList = cr.list();

		
		int totalRecords = totalMatches.size();
		totalMatches.clear();


		datamap.put("grnList", grnList);
		datamap.put("totalRecords", totalRecords);

		return datamap;

	}
	
	
	@Override
	public Map<String, Object> getStockDetailsforMR(Box box) {
		Map<String,Object> datamap = new HashMap<String,Object>();
		List<Object[]> availableStock = new ArrayList<Object[]>();
		List<Object[]> CDStockList = new ArrayList<Object[]>();
		List<Object[]> WPStockList = new ArrayList<Object[]>();
		List<Object[]> storesStockList = new ArrayList<Object[]>();
		
		Session session = (Session) getSession();
		
		int hospitalId = 0;
		int deptId = 0;
		double AvailableStock=0.0;
		double WPStock=0.0;
		double CDStock=0.0;
		double StoresStock=0.0;
		int ItemId=0;		
		
		
				
		if (box.getInt("deptId") != 0)
			deptId = box.getInt("deptId");
		if (box.getInt("hospitalId") != 0)
			hospitalId = box.getInt("hospitalId");	
		if (box.getInt("ItemId") != 0)
			ItemId = box.getInt("ItemId");
		
		String flag="";
		flag= box.getString("flag");
		
		Criteria cr = null;
		cr = session.createCriteria(StoreItemBatchStock.class);
		cr = cr.add(Restrictions.eq("Hospital.Id", hospitalId));
		cr = cr.add(Restrictions.eq("Department.Id", deptId));
		cr = cr.add(Restrictions.eq("Item.Id", ItemId));
				
		Date date = HMSUtil.getExpiryDateYYYYMMDD();
		cr = cr.add(Restrictions.or(Restrictions.gt("ExpiryDate", date), Restrictions.isNull("ExpiryDate")));
		availableStock = cr.setProjection(Projections.projectionList().add(Projections.groupProperty("Item.Id")).add(Projections.sum("ClosingStock"))).list();
		
		for(Object[] listB: availableStock)
		{
			double stockA = Double.parseDouble(listB[1].toString());
			datamap.put("stockA", stockA);
			System.out.println("stockA="+stockA);
		}
		
		
		String storesDeptId=null;
		String WPDepId=null;
		String pharmacyDepId=null;
		int storesId = 0;
		int WpId = 0;
		int CDId=0;
		Properties properties = new Properties();
		URL resourcePath = Thread.currentThread().getContextClassLoader()
				.getResource("adt.properties");

		try {
			properties.load(resourcePath.openStream());
			storesDeptId = properties.getProperty("storesDeptId");
			WPDepId = properties.getProperty("WPDepId");
			pharmacyDepId = properties.getProperty("pharmacyDepId");
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		if(storesDeptId !=null)
		{
			storesId = Integer.parseInt(storesDeptId);
			WpId = Integer.parseInt(WPDepId);
			CDId = Integer.parseInt(pharmacyDepId);
		}
		System.out.println("storesId="+storesId);
		System.out.println("WpId="+WpId);
		System.out.println("CDId="+CDId);
		Criteria cr1 = null;
		cr1 = session.createCriteria(StoreItemBatchStock.class);
		cr1 = cr1.add(Restrictions.eq("Hospital.Id", hospitalId));
		cr1 = cr1.add(Restrictions.eq("Department.Id", WpId));
		cr1 = cr1.add(Restrictions.eq("Item.Id", ItemId));			
		
		cr1 = cr1.add(Restrictions.or(Restrictions.gt("ExpiryDate", date), Restrictions.isNull("ExpiryDate")));
		WPStockList = cr1.setProjection(Projections.projectionList().add(Projections.groupProperty("Item.Id")).add(Projections.sum("ClosingStock"))).list();
		
		for(Object[] listA: WPStockList)
		{
			double stockW = Double.parseDouble(listA[1].toString());
			datamap.put("stockW", stockW);
			System.out.println("stockW="+stockW);
		}
		
		
		Criteria cr2 = null;
		cr2 = session.createCriteria(StoreItemBatchStock.class);
		cr2 = cr2.add(Restrictions.eq("Hospital.Id", hospitalId));
		cr2 = cr2.add(Restrictions.eq("Department.Id", CDId));
		cr2 = cr2.add(Restrictions.eq("Item.Id", ItemId));			
		
		cr2 = cr2.add(Restrictions.or(Restrictions.gt("ExpiryDate", date), Restrictions.isNull("ExpiryDate")));
		CDStockList = cr2.setProjection(Projections.projectionList().add(Projections.groupProperty("Item.Id")).add(Projections.sum("ClosingStock"))).list();
		
		for(Object[] listC: CDStockList)
		{
			double stockC = Double.parseDouble(listC[1].toString());
			datamap.put("stockC", stockC);
			System.out.println("stockC="+stockC);
		}
		
		Criteria cr3 = null;
		
		
		cr3 = session.createCriteria(StoreItemBatchStock.class);
		cr3 = cr3.add(Restrictions.eq("Hospital.Id", hospitalId));
		cr3 = cr3.add(Restrictions.eq("Department.Id", storesId));
		cr3 = cr3.add(Restrictions.eq("Item.Id", ItemId));			
		
		cr3 = cr3.add(Restrictions.or(Restrictions.gt("ExpiryDate", date), Restrictions.isNull("ExpiryDate")));
		storesStockList = cr3.setProjection(Projections.projectionList().add(Projections.groupProperty("Item.Id")).add(Projections.sum("ClosingStock"))).list();
		for(Object[] listD: storesStockList)
		{
			double stockS = Double.parseDouble(listD[1].toString());
			datamap.put("stockS", stockS);
			System.out.println("stockS="+stockS);
		}
		
		availableStock.clear();
		WPStockList.clear();
		CDStockList.clear();
		storesStockList.clear();
		

		return datamap;

	}
	
	
	@Override
	public Map<String, Object> saveMR(Box box) {

		
		Map<String,Object>datamap = new HashMap<String,Object>();
		
		
		Session session = (Session) getSession();
		Transaction tx = null;
		boolean bSuccessfullyAdded = false;
		
		String message= "";
		//String ProjectionSystemGeneratedHeaderId = "PRJ001";
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		int mrHeaderId=0;
		
		String txtRequestType = box.getString("txtRequestType"); // for save/submit(forward) to centre HEAD
		String mrDate = box.getString("mrDate");
		String mrNo =""; 
		
		int ddlRequestYear = box.getInt("ddlRequestYear");
		int mrdepartmentId = box.getInt("mrdepartmentId");
		
		
		
			
		String Status = "n";
		if(txtRequestType.equalsIgnoreCase("SAVE"))
		{
			Status = "u";
		}
		if(txtRequestType.equalsIgnoreCase("SUBMIT"))
		{
			Status = "s";
		}
		
		int hospitalId = 0;
		
		int departmentId =0;
		
		hospitalId = box.getInt("hospitalId");
		departmentId = box.getInt("deptId");
		int empId = box.getInt("empId");
		
		MasHospital hospital = new MasHospital();
		hospital.setId(hospitalId);
		
		MasDepartment department = new MasDepartment();
		department.setId(departmentId);
		
		MasDepartment mrdepartment = new MasDepartment();
		mrdepartment.setId(mrdepartmentId);
		
		int UserId = box.getInt("CHANGED_BY");
		Users user = new Users();
		user.setId(UserId);
		
		Date changedDate = new Date();
		String changedTime = (String) HMSUtil.getCurrentDateAndTime().get("currentTime");
		
		
		Map<String, Object> adMap = new HashMap<String, Object>();
			   if(true)
			   {			   
	                 
				   StoreInternalIndentM mrHeader = new StoreInternalIndentM();
				   
				    adMap.put("tableObjectName", "StoreInternalIndentM");			
					adMap.put("isHospitalWise", "n");
					adMap.put("hospitalId", hospitalId);
					adMap.put("isYearly", "y");			
					adMap.put("isMonthly", "n");
					adMap.put("isPrefix", "y");
					adMap.put("departmentId", departmentId);
					adMap.put("isDepartmentWise", "y");
				
					adMap.put("transactionPrefixProperty", "transactionPrefixForMR");
					
					try{
				   mrNo = HMSUtil.generateTransactionSequence(adMap, session, hbt);
					}catch(Exception e)
					{
						System.out.print("Exception in Method Save MR="+e);
					}
				   mrHeader.setDemandNo(mrNo);
				   mrHeader.setDemandDate(HMSUtil.convertStringTypeDateToDateType(mrDate));
				  
				  
				   mrHeader.setHospital(hospital);
				   mrHeader.setToStore(mrdepartment);
				   mrHeader.setDepartment(department);
				   MasStoreFinancial fy = new MasStoreFinancial();
				   fy.setId(ddlRequestYear);
				   //mrHeader.setFinancial(fy);
				   
				   mrHeader.setCreatedBy(user);	
					mrHeader.setLastChgDate(changedDate);
					mrHeader.setStatus(Status);
					if(empId !=0)
					{
						MasEmployee requestedBy = new MasEmployee();
						requestedBy.setId(empId);
						mrHeader.setRequestedBy(requestedBy);
					}
										
					
					try{
						
						tx = session.beginTransaction();

						hbt.save(mrHeader);
						hbt.refresh(mrHeader);
						
						
						
						String tableRowId = "";
						tableRowId = box.getString("tableRowId");
						
						System.out.println("tableRowId="+tableRowId);

						String array_RowId[];
						array_RowId = tableRowId.split(",");
						System.out.println("array_RowId="+array_RowId+"tableRowId="+tableRowId);

						double HashQty =0;
						double HashValue=0;
						if (tableRowId != "") 
						{
							for (int i = 0; i < array_RowId.length; i++)
							{
								System.out.println("ItemId"+ array_RowId[i]);
								int ItemId = box.getInt("ItemId"+ array_RowId[i]);
								MasStoreItem item = new MasStoreItem();
								item.setId(ItemId);
										
								
								System.out.println("ItemId="+ItemId);
								
								int txtRequiredQty = box.getInt("txtRequiredQty" + array_RowId[i]);
								int txtAvailableStock = box.getInt("txtAvailableStock" + array_RowId[i]);
								double txtWPStock = box.getDouble("txtWPStock" + array_RowId[i]);
								double txtCDStock = box.getDouble("txtCDStock" + array_RowId[i]);
								double txtStoresStock = box.getDouble("txtStoresStock" + array_RowId[i]);
								String txtRemarks = box.getString("txtRemarks" + array_RowId[i]);
								System.out.println("txtStoresStock"+txtStoresStock);
								
								StoreInternalIndentT mrDetails = new StoreInternalIndentT();
								
								mrDetails.setItem(item);
								mrDetails.setAvailableStock(new BigDecimal(txtAvailableStock));
								mrDetails.setCdStock(new BigDecimal(txtCDStock));
								mrDetails.setWpStock(new BigDecimal(txtWPStock));
								mrDetails.setStoresStock(new BigDecimal(txtStoresStock));
								mrDetails.setQtyRequest(txtRequiredQty);
								mrDetails.setDepartment(department);					
								mrDetails.setReasonForDemand(txtRemarks);
								mrDetails.setStockInHand(txtAvailableStock);
								
								mrDetails.setInternal(mrHeader);								
								
								
								hbt.save(mrDetails);
								hbt.refresh(mrDetails);
								
															
								
								
							}
						}
						mrHeaderId = mrHeader.getId();
						tx.commit();
						bSuccessfullyAdded = true;
					}
					
					catch(Exception e)
					{
						System.out.println("dd="+e);
						if (tx != null) {
							tx.rollback();
							e.printStackTrace();
							System.out.print(e);
						}
					}
				   
			   }// close if for bRecordExist
		
		
		
				if (bSuccessfullyAdded) {
					
					if(txtRequestType.equalsIgnoreCase("SAVE"))
					{
						message = "Materail  Request saved successfully and MR Number is: "
								+ mrNo;
					}
					
					if(txtRequestType.equalsIgnoreCase("SUBMIT"))
					{
						message = "Materail  Request submitted successfully for Approval and MR Number is: "
								+ mrNo;
					}
					
				} else {

					message = "Try Again!";
				}		

		datamap.put("message", message);
		datamap.put("bSuccessfullyAdded", bSuccessfullyAdded);
		datamap.put("mrHeaderId", mrHeaderId);
		
		
		return datamap;	
		
		
	}
	
	
	@Override
	public Map<String, Object> saveMRMIssue(Box box) {

		
		Map<String,Object>datamap = new HashMap<String,Object>();
		
		
		Session session = (Session) getSession();
		Transaction tx = null;
		boolean bSuccessfullyAdded = false;
		
		String message= "";
		//String ProjectionSystemGeneratedHeaderId = "PRJ001";
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		int mrHeaderId=0;
		
		String txtRequestType = box.getString("txtRequestType"); // for save/submit(forward) to centre HEAD
		String mrDate = box.getString("mrDate");
		String mrNo =""; 
		
		int ddlRequestYear = box.getInt("ddlRequestYear");
		int mrdepartmentId = box.getInt("mrdepartmentId");
		
		
		
			
		String Status = "n";
		if(txtRequestType.equalsIgnoreCase("SAVE"))
		{
			Status = "u";
		}
		if(txtRequestType.equalsIgnoreCase("SUBMIT"))
		{
			Status = "o";
		}
		
		int hospitalId = 0;
		
		int departmentId =0;
		
		hospitalId = box.getInt("hospitalId");
		departmentId = box.getInt("deptId");
		int empId = box.getInt("empId");
		
		MasHospital hospital = new MasHospital();
		hospital.setId(hospitalId);
		
		MasDepartment department = new MasDepartment();
		department.setId(departmentId);
		
		MasDepartment mrdepartment = new MasDepartment();
		mrdepartment.setId(mrdepartmentId);
		
		int UserId = box.getInt("CHANGED_BY");
		Users user = new Users();
		user.setId(UserId);
		
		Date changedDate = new Date();
		String changedTime = (String) HMSUtil.getCurrentDateAndTime().get("currentTime");
		
		
		Map<String, Object> adMap = new HashMap<String, Object>();
			   if(true)
			   {			   
	                 
				   StoreInternalIndentM mrHeader = new StoreInternalIndentM();
				   
				    adMap.put("tableObjectName", "StoreInternalIndentM");			
					adMap.put("isHospitalWise", "n");
					adMap.put("hospitalId", hospitalId);
					adMap.put("isYearly", "y");			
					adMap.put("isMonthly", "n");
					adMap.put("isPrefix", "y");
					adMap.put("departmentId", departmentId);
					adMap.put("isDepartmentWise", "y");
				
					adMap.put("transactionPrefixProperty", "transactionPrefixForMR");
					
					try{
				   mrNo = HMSUtil.generateTransactionSequence(adMap, session, hbt);
					}catch(Exception e)
					{
						System.out.print("Exception in Method Save MR="+e);
					}
				   mrHeader.setDemandNo(mrNo);
				   mrHeader.setDemandDate(HMSUtil.convertStringTypeDateToDateType(mrDate));
				  
				  
				   mrHeader.setHospital(hospital);
				   mrHeader.setToStore(mrdepartment);
				   mrHeader.setDepartment(department);
				   MasStoreFinancial fy = new MasStoreFinancial();
				   fy.setId(ddlRequestYear);
				   //mrHeader.setFinancial(fy);
				   
				   mrHeader.setCreatedBy(user);	
					mrHeader.setLastChgDate(changedDate);
					mrHeader.setStatus(Status);
					mrHeader.setApprovalDate(changedDate);
					if(empId !=0)
					{
						MasEmployee requestedBy = new MasEmployee();
						requestedBy.setId(empId);
						mrHeader.setRequestedBy(requestedBy);
						mrHeader.setApprovedBy(requestedBy);	
					}
										
					
					try{
						
						tx = session.beginTransaction();
						
											
						
						
						hbt.save(mrHeader);
						hbt.refresh(mrHeader);
						
						
						
						String tableRowId = "";
						tableRowId = box.getString("tableRowId");
						
						System.out.println("tableRowId="+tableRowId);

						String array_RowId[];
						array_RowId = tableRowId.split(",");
						System.out.println("array_RowId="+array_RowId+"tableRowId="+tableRowId);

						double HashQty =0;
						double HashValue=0;
						if (tableRowId != "") 
						{
							for (int i = 0; i < array_RowId.length; i++)
							{
								System.out.println("ItemId"+ array_RowId[i]);
								int ItemId = box.getInt("ItemId"+ array_RowId[i]);
								MasStoreItem item = new MasStoreItem();
								item.setId(ItemId);
										
								
								System.out.println("ItemId="+ItemId);
								
								int txtRequiredQty = box.getInt("txtRequiredQty" + array_RowId[i]);
								int txtAvailableStock = box.getInt("txtAvailableStock" + array_RowId[i]);
								double txtWPStock = box.getDouble("txtWPStock" + array_RowId[i]);
								double txtCDStock = box.getDouble("txtCDStock" + array_RowId[i]);
								double txtStoresStock = box.getDouble("txtStoresStock" + array_RowId[i]);
								String txtRemarks = box.getString("txtRemarks" + array_RowId[i]);
								
								StoreInternalIndentT mrDetails = new StoreInternalIndentT();
								
								mrDetails.setItem(item);
								mrDetails.setAvailableStock(new BigDecimal(txtAvailableStock));
								mrDetails.setCdStock(new BigDecimal(txtCDStock));
								mrDetails.setWpStock(new BigDecimal(txtWPStock));
								mrDetails.setStoresStock(new BigDecimal(txtStoresStock));
								mrDetails.setQtyRequest(txtRequiredQty);
								mrDetails.setDepartment(department);					
								mrDetails.setReasonForDemand(txtRemarks);
								mrDetails.setStockInHand(txtAvailableStock);
								
								mrDetails.setInternal(mrHeader);								
								
								
								hbt.save(mrDetails);
								hbt.refresh(mrDetails);
								
															
								
								
							}
						}
						mrHeaderId = mrHeader.getId();
					
						
						//code starts for changing the prescription header status
						
						String detailsIdList = box.getString("detailsIdList");
						if(!detailsIdList.equals(""))
						{
							detailsIdList = detailsIdList.substring(0, (detailsIdList.length()-1));
							System.out.println("detailsIdList"+detailsIdList);
							String[] detailsIdArray = detailsIdList.split(",");
							for(String detailsId : detailsIdArray)
							{
								PatientPrescriptionDetails ppd= new PatientPrescriptionDetails();
								ppd =(PatientPrescriptionDetails)hbt.get(PatientPrescriptionDetails.class, Integer.parseInt(detailsId));
								ppd.getPrescription().setStatus("I");
								hbt.flush();
								
								
							}
						}
						
						
						//code ends for changing the prescription header status
						
						
						tx.commit();
						bSuccessfullyAdded = true;
					}
					
					catch(Exception e)
					{
						System.out.println("dd="+e);
						if (tx != null) {
							tx.rollback();
							e.printStackTrace();
							System.out.print(e);
						}
					}
				   
			   }// close if for bRecordExist
		
		
		
				if (bSuccessfullyAdded) {
					
					if(txtRequestType.equalsIgnoreCase("SAVE"))
					{
						message = "Materail  Request saved successfully and MR Number is: "
								+ mrNo;
					}
					
					if(txtRequestType.equalsIgnoreCase("SUBMIT"))
					{
						message = "Materail  Request submitted successfully for Approval and MR Number is: "
								+ mrNo;
					}
					
				} else {

					message = "Try Again!";
				}		

		datamap.put("message", message);
		datamap.put("bSuccessfullyAdded", bSuccessfullyAdded);
		datamap.put("mrHeaderId", mrHeaderId);
		
		
		return datamap;	
		
		
	}
	
	@Override
	public Map<String, Object> saveRC(Box box) {

		
		Map<String,Object>datamap = new HashMap<String,Object>();
		
		
		Session session = (Session) getSession();
		Transaction tx = null;
		boolean bSuccessfullyAdded = false;
		
		String message= "";
		//String ProjectionSystemGeneratedHeaderId = "PRJ001";
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		int requestHeaderId=0;
		
		String txtRequestType = box.getString("txtRequestType"); // for save/submit(forward) to centre HEAD
		String requestDate = box.getString("mrDate");
		String requestNo =""; 
		
		int ddlRequestYear = box.getInt("ddlRequestYear");
		int mrdepartmentId = box.getInt("mrdepartmentId");
		
		
		
			
		String Status = "n";
		if(txtRequestType.equalsIgnoreCase("SAVE"))
		{
			Status = "u";
		}
		if(txtRequestType.equalsIgnoreCase("SUBMIT"))
		{
			Status = "s";
		}
		
		int hospitalId = 0;
		
		int departmentId =0;
		
		hospitalId = box.getInt("hospitalId");
		departmentId = box.getInt("deptId");
		int empId = box.getInt("empId");
		
		MasHospital hospital = new MasHospital();
		hospital.setId(hospitalId);
		
		MasDepartment department = new MasDepartment();
		department.setId(departmentId);
		
		MasDepartment mrdepartment = new MasDepartment();
		mrdepartment.setId(mrdepartmentId);
		
		int UserId = box.getInt("CHANGED_BY");
		Users user = new Users();
		user.setId(UserId);
		
		Date changedDate = new Date();
		String changedTime = (String) HMSUtil.getCurrentDateAndTime().get("currentTime");
		
		
		Map<String, Object> adMap = new HashMap<String, Object>();
			   if(true)
			   {			   
	                 
				   RcRequestHeader requestHeader = new RcRequestHeader();
				   
				    adMap.put("tableObjectName", "RcRequestHeader");			
					adMap.put("isHospitalWise", "n");
					adMap.put("hospitalId", hospitalId);
					adMap.put("isYearly", "y");			
					adMap.put("isMonthly", "n");
					adMap.put("isPrefix", "y");
				
					adMap.put("transactionPrefixProperty", "transactionPrefixForRCRequest");
					
					try{
						requestNo = HMSUtil.generateTransactionSequence(adMap, session, hbt);
					}catch(Exception e)
					{
						System.out.print("Exception in Method Save MR="+e);
					}
				   requestHeader.setRequestNo(requestNo);
				   requestHeader.setRequestDate(HMSUtil.convertStringTypeDateToDateType(requestDate));
				  
				  
				   requestHeader.setHospital(hospital);
				   /*requestHeader.setToStore(mrdepartment);*/
				   requestHeader.setDepartment(department);
				   MasStoreFinancial fy = new MasStoreFinancial();
				   fy.setId(ddlRequestYear);
				  /* requestHeader.setFinancial(fy);*/
				   
				   requestHeader.setReqestedBy(user);	
				   requestHeader.setLastChgDate(changedDate);
				   requestHeader.setStatus(Status);
				   requestHeader.setLastChgBy(user);
					/*if(empId !=0)
					{
						MasEmployee requestedBy = new MasEmployee();
						requestedBy.setId(empId);
						requestHeader.setRequestedBy(requestedBy);
					}*/
										
					
					try{
						
						tx = session.beginTransaction();

						hbt.save(requestHeader);
						datamap.put("requestHeaderId", requestHeader.getId());
						hbt.refresh(requestHeader);
						
						
						
						String tableRowId = "";
						tableRowId = box.getString("tableRowId");
						
						System.out.println("tableRowId="+tableRowId);

						String array_RowId[];
						array_RowId = tableRowId.split(",");
						System.out.println("array_RowId="+array_RowId+"tableRowId="+tableRowId);

						double HashQty =0;
						double HashValue=0;
						if (tableRowId != "") 
						{
							for (int i = 0; i < array_RowId.length; i++)
							{
								System.out.println("ItemId"+ array_RowId[i]);
								int ItemId = box.getInt("ItemId"+ array_RowId[i]);
								MasStoreItem item = new MasStoreItem();
								item.setId(ItemId);
										
								
								System.out.println("ItemId="+ItemId);
								
								BigDecimal txtRequiredQty = new BigDecimal(box.getDouble("txtRequiredQty" + array_RowId[i])).setScale(2, BigDecimal.ROUND_HALF_UP);
								int txtAvailableStock = box.getInt("txtAvailableStock" + array_RowId[i]);
								double txtWPStock = box.getDouble("txtWPStock" + array_RowId[i]);
								double txtCDStock = box.getDouble("txtCDStock" + array_RowId[i]);
								double txtStoresStock = box.getDouble("txtStoresStock" + array_RowId[i]);
								String fromDepartments = box.getString("from" + array_RowId[i]);
								String txtRemarks = box.getString("txtRemarks" + array_RowId[i]);
								
								RcRequestDetails rcDetails = new RcRequestDetails();
								
								rcDetails.setItem(item);
									
								rcDetails.setFromDepartments(fromDepartments);
								rcDetails.setReasonForDemand(txtRemarks);
								rcDetails.setReqQty(txtRequiredQty);
								
								rcDetails.setHeader(requestHeader);	
								rcDetails.setAvailableStock(new BigDecimal(txtAvailableStock));
								rcDetails.setCdStock(new BigDecimal(txtCDStock));
								rcDetails.setWpStock(new BigDecimal(txtWPStock));
								rcDetails.setStoresStock(new BigDecimal(txtStoresStock));
								
								
								hbt.save(rcDetails);
								hbt.refresh(rcDetails);
								
															
								
								
							}
						}
						requestHeaderId = requestHeader.getId();
						tx.commit();
						bSuccessfullyAdded = true;
					}
					
					catch(Exception e)
					{
						System.out.println("dd="+e);
						if (tx != null) {
							tx.rollback();
							e.printStackTrace();
							System.out.print(e);
						}
					}
				   
			   }// close if for bRecordExist
		
		
		
				if (bSuccessfullyAdded) {
					
					if(txtRequestType.equalsIgnoreCase("SAVE"))
					{
						message = "RC Request saved successfully and MR Number is: "
								+ requestNo;
					}
					
					if(txtRequestType.equalsIgnoreCase("SUBMIT"))
					{
						message = "RC Request submitted successfully for Approval and MR Number is: "
								+ requestNo;
					}
					
				} else {

					message = "Try Again!";
				}		

		datamap.put("message", message);
		datamap.put("bSuccessfullyAdded", bSuccessfullyAdded);
		datamap.put("mrHeaderId", requestHeaderId);
		
		
		return datamap;	
		
		
	}
	
	@Override
	public Map<String, Object> getListOfRC(Box box) {
		Map<String,Object> datamap = new HashMap<String,Object>();
		List<RcRequestHeader> requestHeaderList = new ArrayList<RcRequestHeader>();
		
		Session session = (Session) getSession();
		int pagingSize = 10;
		int pageNo = 1;		
				
		String ProjectionType = ""; 
		String RequestStatus = "" ; // Awaiting/Saved/Approved
		
		if (box.getString("PN") != null)
			pageNo = Integer.parseInt(box.getString("PN"));
				
		int deptId = box.getInt("deptId");
		int hospitalId = box.getInt("hospitalId");
		
		String Status = box.getString("Status");
		Criteria cr = null;
		cr = session.createCriteria(RcRequestHeader.class);
		cr = cr.addOrder(Order.desc("RequestDate"));	
		cr = cr.add(Restrictions.eq("Hospital.Id", hospitalId));
		
		if(box.getString("flag").equals("dept"))
		{
			cr = cr.add(Restrictions.eq("Department.Id", deptId));
		}
		
		//u-saved s-Submit o-approavl r -Rejected y-received
		if(Status.equalsIgnoreCase("Approval"))
		{
			cr = cr.add(Restrictions.eq("Status", "s").ignoreCase());
		}
	
			
		List totalMatches = cr.list();
		cr = cr.setFirstResult(pagingSize * (pageNo - 1));
		cr = cr.setMaxResults(pagingSize);
		requestHeaderList = cr.list();

		System.out.println("Total records=" + totalMatches.size());
		int totalRecords = totalMatches.size();
		totalMatches.clear();

		System.out.println("Size of requestHeaderList in dataservice="
				+ requestHeaderList.size());

		datamap.put("requestHeaderList", requestHeaderList);
		datamap.put("totalRecords", totalRecords);

		return datamap;

	}

	@Override
	public Map<String, Object> getListOfRCCDS(Box box) {
		Map<String,Object> datamap = new HashMap<String,Object>();
		List<RcRequestHeader> requestHeaderList = new ArrayList<RcRequestHeader>();
		
		Session session = (Session) getSession();
		int pagingSize = 10;
		int pageNo = 1;		
				
		String ProjectionType = ""; 
		String RequestStatus = "" ; // Awaiting/Saved/Approved
		
		if (box.getString("PN") != null)
			pageNo = Integer.parseInt(box.getString("PN"));
				
		int deptId = box.getInt("deptId");
		int hospitalId = box.getInt("hospitalId");
		
		String Status = box.getString("Status");
		Criteria cr = null;
		cr = session.createCriteria(RcRequestHeader.class);
		cr = cr.addOrder(Order.desc("RequestDate"));	
		cr = cr.add(Restrictions.or(Restrictions.eq("Status", "t").ignoreCase(), Restrictions.eq("Status", "o").ignoreCase()));
		cr = cr.add(Restrictions.eq("Hospital.Id", hospitalId));
		
		if(box.getString("flag").equals("dept"))
		{
			cr = cr.add(Restrictions.eq("ToDepartment.Id", deptId));
		}
		
		//u-saved s-Submit t-transferred to stores or dispensary o-approavl r -Rejected y-received
		
	
			
		List totalMatches = cr.list();
		cr = cr.setFirstResult(pagingSize * (pageNo - 1));
		cr = cr.setMaxResults(pagingSize);
		requestHeaderList = cr.list();

		System.out.println("Total records=" + totalMatches.size());
		int totalRecords = totalMatches.size();
		totalMatches.clear();

		System.out.println("Size of requestHeaderList in dataservice="
				+ requestHeaderList.size());

		datamap.put("requestHeaderList", requestHeaderList);
		datamap.put("totalRecords", totalRecords);

		return datamap;

	}


	@Override
	public Map<String, Object> getListOfReceiveRC(Box box) {
		Map<String,Object> datamap = new HashMap<String,Object>();
		List<RcRequestHeader> requestHeaderList = new ArrayList<RcRequestHeader>();
		
		Session session = (Session) getSession();
		int pagingSize = 10;
		int pageNo = 1;		
				
		String ProjectionType = ""; 
		String RequestStatus = "" ; // Awaiting/Saved/Approved
		
		if (box.getString("PN") != null)
			pageNo = Integer.parseInt(box.getString("PN"));
				
		int deptId = box.getInt("deptId");
		int hospitalId = box.getInt("hospitalId");
		
		String Status = box.getString("Status");
		Criteria cr = null;
		cr = session.createCriteria(RcRequestHeader.class)
        .createAlias("RcHeader", "rh")
		.add(Restrictions.eq("rh.Status", "c").ignoreCase())
		.add(Restrictions.eq("rh.Department.Id", deptId))
		.add(Restrictions.eq("Hospital.Id", hospitalId))
		.add(Restrictions.eq("Status", "t").ignoreCase())
		.addOrder(Order.desc("RequestDate"));
		/*cr = cr.add(Restrictions.eq("Department.Id", deptId));*/
		//u-saved s-Submit o-approavl r -Rejected y-received
		if(Status.equalsIgnoreCase("Approval"))
		{
			cr = cr.add(Restrictions.eq("Status", "s").ignoreCase());
		}
	
			
		List totalMatches = cr.list();
		cr = cr.setFirstResult(pagingSize * (pageNo - 1));
		cr = cr.setMaxResults(pagingSize);
		requestHeaderList = cr.list();

		System.out.println("Total records=" + totalMatches.size());
		int totalRecords = totalMatches.size();
		totalMatches.clear();

		System.out.println("Size of requestHeaderList in dataservice="
				+ requestHeaderList.size());

		datamap.put("requestHeaderList", requestHeaderList);
		datamap.put("totalRecords", totalRecords);

		return datamap;

	}
	
	@Override
	public Map<String, Object> getListOfReceiveMR(Box box) {
		Map<String,Object> datamap = new HashMap<String,Object>();
		List<StoreInternalIndentM> indentMList = new ArrayList<StoreInternalIndentM>();
		
		Session session = (Session) getSession();
		int pagingSize = 10;
		int pageNo = 1;		
				
		String ProjectionType = ""; 
		String RequestStatus = "" ; // Awaiting/Saved/Approved
		
		if (box.getString("PN") != null)
			pageNo = Integer.parseInt(box.getString("PN"));
				
		int deptId = box.getInt("deptId");
		int hospitalId = box.getInt("hospitalId");
		
		String Status = box.getString("Status");
		Criteria cr = null;
		cr = session.createCriteria(StoreInternalIndentM.class)
		.add(Restrictions.eq("ToStore.Id", deptId))
		.add(Restrictions.eq("Hospital.Id", hospitalId))
		.add(Restrictions.eq("Status", "o").ignoreCase())
		.addOrder(Order.desc("DemandDate"));
		/*cr = cr.add(Restrictions.eq("Department.Id", deptId));*/
		//u-saved s-Submit o-approavl r -Rejected y-received
		if(Status.equalsIgnoreCase("Approval"))
		{
			cr = cr.add(Restrictions.eq("Status", "s").ignoreCase());
		}
	
			
		List totalMatches = cr.list();
		cr = cr.setFirstResult(pagingSize * (pageNo - 1));
		cr = cr.setMaxResults(pagingSize);
		indentMList = cr.list();

		System.out.println("Total records=" + totalMatches.size());
		int totalRecords = totalMatches.size();
		totalMatches.clear();

		System.out.println("Size of requestHeaderList in dataservice="
				+ indentMList.size());

		datamap.put("indentMList", indentMList);
		datamap.put("totalRecords", totalRecords);

		return datamap;

	}
	
	
	@Override
	public Map<String, Object> getListOfReceiveMRForWard(Box box) {
		Map<String,Object> datamap = new HashMap<String,Object>();
		List<StoreInternalIndentM> indentMList = new ArrayList<StoreInternalIndentM>();
		
		Session session = (Session) getSession();
		int pagingSize = 10;
		int pageNo = 1;		
				
		String ProjectionType = ""; 
		String RequestStatus = "" ; // Awaiting/Saved/Approved
		int indentDurationForWardPharmacy = Integer.parseInt(HMSUtil.getProperties("adt.properties", "indentDurationForWardPharmacy"));
		Calendar cal = GregorianCalendar.getInstance();
		cal.add( Calendar.DAY_OF_YEAR, -indentDurationForWardPharmacy);
		Date minimumDate = cal.getTime();
		
		if (box.getString("PN") != null)
			pageNo = Integer.parseInt(box.getString("PN"));
				
		int deptId = box.getInt("deptId");
		int hospitalId = box.getInt("hospitalId");
		
		String Status = box.getString("Status");
		Criteria cr = null;
		cr = session.createCriteria(StoreInternalIndentM.class)
		.add(Restrictions.eq("ToStore.Id", deptId))
		.add(Restrictions.eq("Hospital.Id", hospitalId))
		.add(Restrictions.eq("Status", "o").ignoreCase())
		.add(Restrictions.gt("DemandDate", minimumDate))
		.addOrder(Order.desc("DemandDate"));
		/*cr = cr.add(Restrictions.eq("Department.Id", deptId));*/
		//u-saved s-Submit o-approavl r -Rejected y-received
		if(Status.equalsIgnoreCase("Approval"))
		{
			cr = cr.add(Restrictions.eq("Status", "s").ignoreCase());
		}
	
			
		List totalMatches = cr.list();
		cr = cr.setFirstResult(pagingSize * (pageNo - 1));
		cr = cr.setMaxResults(pagingSize);
		indentMList = cr.list();

		System.out.println("Total records=" + totalMatches.size());
		int totalRecords = totalMatches.size();
		totalMatches.clear();

		System.out.println("Size of requestHeaderList in dataservice="
				+ indentMList.size());

		datamap.put("indentMList", indentMList);
		datamap.put("totalRecords", totalRecords);

		return datamap;

	}
	
	@Override
	public Map<String, Object> getListOfReceiveMRPartial(Box box) {
		Map<String,Object> datamap = new HashMap<String,Object>();
		List<StoreInternalIndentM> indentMList = new ArrayList<StoreInternalIndentM>();
		
		Session session = (Session) getSession();
		int pagingSize = 10;
		int pageNo = 1;		
				
		String ProjectionType = ""; 
		String RequestStatus = "" ; // Awaiting/Saved/Approved		
		int indentDurationForWardPharmacy = Integer.parseInt(HMSUtil.getProperties("adt.properties", "indentDurationForWardPharmacy"));
		Calendar cal = GregorianCalendar.getInstance();
		cal.add( Calendar.DAY_OF_YEAR, -indentDurationForWardPharmacy);
		Date minimumDate = cal.getTime();
		if (box.getString("PN") != null)
			pageNo = Integer.parseInt(box.getString("PN"));
				
		int deptId = box.getInt("deptId");
		int hospitalId = box.getInt("hospitalId");
		
		String Status = box.getString("Status");
		Criteria cr = null;
		cr = session.createCriteria(StoreInternalIndentM.class)
		.add(Restrictions.eq("ToStore.Id", deptId))
		.add(Restrictions.eq("Hospital.Id", hospitalId))
		.add(Restrictions.eq("Status", "w").ignoreCase())
		.add(Restrictions.gt("DemandDate", minimumDate))
		.addOrder(Order.desc("DemandDate"));
		/*cr = cr.add(Restrictions.eq("Department.Id", deptId));*/
		//u-saved s-Submit o-approavl r -Rejected y-received
		if(Status.equalsIgnoreCase("Approval"))
		{
			cr = cr.add(Restrictions.eq("Status", "s").ignoreCase());
		}
	
			
		List totalMatches = cr.list();
		cr = cr.setFirstResult(pagingSize * (pageNo - 1));
		cr = cr.setMaxResults(pagingSize);
		indentMList = cr.list();

		System.out.println("Total records=" + totalMatches.size());
		int totalRecords = totalMatches.size();
		totalMatches.clear();

		System.out.println("Size of requestHeaderList in dataservice="
				+ indentMList.size());

		datamap.put("indentMList", indentMList);
		datamap.put("totalRecords", totalRecords);

		return datamap;

	}
	
	@Override
	public Map<String, Object> getListOfMR(Box box) {
		Map<String,Object> datamap = new HashMap<String,Object>();
		List<StoreInternalIndentM> mrHeaderList = new ArrayList<StoreInternalIndentM>();
		
		Session session = (Session) getSession();
		int pagingSize = 10;
		int pageNo = 1;		
				
		String ProjectionType = ""; 
		String RequestStatus = "" ; // Awaiting/Saved/Approved
		
		if (box.getString("PN") != null)
			pageNo = Integer.parseInt(box.getString("PN"));
				
		int deptId = box.getInt("deptId");
		int hospitalId = box.getInt("hospitalId");
		
		String Status = box.getString("Status");
		Criteria cr = null;
		cr = session.createCriteria(StoreInternalIndentM.class);
		cr = cr.addOrder(Order.desc("DemandDate"));	
		cr = cr.add(Restrictions.eq("Hospital.Id", hospitalId));
		cr = cr.add(Restrictions.eq("Department.Id", deptId));
		cr = cr.addOrder(Order.desc("LastChgDate"));
		//u-saved s-Submit o-approavl r -Rejected y-received
		if(Status.equalsIgnoreCase("Approval"))
		{
			cr = cr.add(Restrictions.eq("Status", "s").ignoreCase());
		}
	
			
		List totalMatches = cr.list();
		cr = cr.setFirstResult(pagingSize * (pageNo - 1));
		cr = cr.setMaxResults(pagingSize);
		mrHeaderList = cr.list();

		System.out.println("Total records=" + totalMatches.size());
		int totalRecords = totalMatches.size();
		totalMatches.clear();

		System.out.println("Size of mrHeaderList in dataservice="
				+ mrHeaderList.size());

		datamap.put("mrHeaderList", mrHeaderList);
		datamap.put("totalRecords", totalRecords);

		return datamap;

	}
	
	@Override
	public Map<String, Object> getListOfMRWard(Box box) {
		Map<String,Object> datamap = new HashMap<String,Object>();
		List<StoreInternalIndentM> mrHeaderList = new ArrayList<StoreInternalIndentM>();
		
		Session session = (Session) getSession();
		int pagingSize = 10;
		int pageNo = 1;		
				
		String ProjectionType = ""; 
		String RequestStatus = "" ; // Awaiting/Saved/Approved
		
		if (box.getString("PN") != null)
			pageNo = Integer.parseInt(box.getString("PN"));
				
		int deptId = box.getInt("deptId");
		int hospitalId = box.getInt("hospitalId");
		
		String Status = box.getString("Status");
		Criteria cr = null;
		cr = session.createCriteria(StoreInternalIndentM.class)
				.createAlias("Department", "dept")
				.createAlias("dept.DepartmentType", "deptype");
		cr = cr.addOrder(Order.desc("DemandDate"));	
		cr = cr.add(Restrictions.eq("Hospital.Id", hospitalId));
		cr = cr.add(Restrictions.eq("dept.Id", deptId));
		cr = cr.add(Restrictions.eq("deptype.DepartmentTypeName", "Ward").ignoreCase());
		cr = cr.addOrder(Order.desc("LastChgDate"));
		//u-saved s-Submit o-approavl r -Rejected y-received
		if(Status.equalsIgnoreCase("Approval"))
		{
			cr = cr.add(Restrictions.eq("Status", "s").ignoreCase());
		}
	
			
		List totalMatches = cr.list();
		cr = cr.setFirstResult(pagingSize * (pageNo - 1));
		cr = cr.setMaxResults(pagingSize);
		mrHeaderList = cr.list();

		System.out.println("Total records=" + totalMatches.size());
		int totalRecords = totalMatches.size();
		totalMatches.clear();

		System.out.println("Size of mrHeaderList in dataservice="
				+ mrHeaderList.size());

		datamap.put("mrHeaderList", mrHeaderList);
		datamap.put("totalRecords", totalRecords);

		return datamap;

	}
	
	public Map<String, Object> getMRDetails(int mrId) 
	{
		Map<String,Object> datamap = new HashMap<String,Object>();
		List<StoreInternalIndentT> mrDetails = new ArrayList<StoreInternalIndentT>();
		List<StoreInternalIndentM> mrHeader = new ArrayList<StoreInternalIndentM>();
		
		
				
		Session session = (Session) getSession();
		Criteria cr = null;
		cr = session.createCriteria(StoreInternalIndentT.class);
		cr = cr.createAlias("Internal", "header");
		cr = cr.add(Restrictions.eq("header.Id", mrId));
		mrDetails = cr.list();
		
		cr = session.createCriteria(StoreInternalIndentM.class);		
		cr = cr.add(Restrictions.eq("Id", mrId));
		mrHeader = cr.list();	
		
		datamap.put("mrDetails", mrDetails);
		datamap.put("mrHeader", mrHeader);
		
		return datamap;
		
		
	}
	
		
	public Map<String, Object> getRCDetails(int requestHeaderId) 
	{
		Map<String,Object> datamap = new HashMap<String,Object>();
		List<RcRequestDetails> requestDetails = new ArrayList<RcRequestDetails>();
		List<RcRequestHeader> requestHeader = new ArrayList<RcRequestHeader>();
		
		
				
		Session session = (Session) getSession();
		Criteria cr = null;
		cr = session.createCriteria(RcRequestDetails.class);
		cr = cr.createAlias("Header", "header");
		cr = cr.add(Restrictions.eq("header.Id", requestHeaderId));
		requestDetails = cr.list();
		
		cr = session.createCriteria(RcRequestHeader.class);		
		cr = cr.add(Restrictions.eq("Id", requestHeaderId));
		requestHeader = cr.list();	
		
		System.out.println("requestDetails"+requestDetails.size());
		System.out.println("requestHeader"+requestHeader.size());
		
		datamap.put("requestDetails", requestDetails);
		datamap.put("requestHeader", requestHeader);
		
		return datamap;
		
		
	}
	
	public Map<String, Object> getRCDetailsSubmitUntilReceive(int requestHeaderId) 
	{
		Map<String,Object> datamap = new HashMap<String,Object>();
		List<RcRequestDetails> requestDetails = new ArrayList<RcRequestDetails>();
		List<RcRequestHeader> requestHeader = new ArrayList<RcRequestHeader>();
		
		
				
		Session session = (Session) getSession();
		Criteria cr = null;
		cr = session.createCriteria(RcDetails.class);
		cr = cr.createAlias("Header", "header");
		cr = cr.add(Restrictions.eq("header.Id", requestHeaderId));
		requestDetails = cr.list();
		
		cr = session.createCriteria(RcHeader.class);		
		cr = cr.add(Restrictions.eq("Id", requestHeaderId));
		requestHeader = cr.list();	
		
		System.out.println("requestDetails"+requestDetails.size());
		System.out.println("requestHeader"+requestHeader.size());
		
		datamap.put("requestDetails", requestDetails);
		datamap.put("requestHeader", requestHeader);
		
		return datamap;
		
		
	}
	public Map<String, Object> viewUpdateRCSubmitUntilReceive(Box box) 
	{
		Map<String,Object> datamap = new HashMap<String,Object>();
		List<RcRequestDetails> rcDetails = new ArrayList<RcRequestDetails>();
		List<RcRequestHeader> rcHeader = new ArrayList<RcRequestHeader>();
        List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier>();
        int requestHeaderId=0;
        int hospitalId = 0;
        if(box.getInt("requestHeaderId") != 0)
    	{
    		requestHeaderId = box.getInt("requestHeaderId");
    	}
        if(box.getInt("hospitalId") != 0)
    	{
        	hospitalId = box.getInt("hospitalId");
    	}

				
		Session session = (Session) getSession();
		Criteria cr = null;
		cr = session.createCriteria(RcDetails.class);
		cr = cr.createAlias("Header", "header");
		cr = cr.add(Restrictions.eq("header.Id", requestHeaderId));
		rcDetails = cr.list();
		
		cr = session.createCriteria(RcHeader.class);		
		cr = cr.add(Restrictions.eq("Id", requestHeaderId));
		rcHeader = cr.list();	
		
		supplierList = session.createCriteria(MasStoreSupplier.class)
				.add(Restrictions.eq("Status", "y").ignoreCase())
				.add(Restrictions.eq("Hospital.Id", hospitalId)).list();
		
		
		datamap.put("supplierList", supplierList);	
		datamap.put("rcDetails", rcDetails);
		datamap.put("rcHeader", rcHeader);
		
		return datamap;
		
		
	}
	
	public Map<String, Object> updateSavedMR(Box box)
	{

		Map<String,Object>datamap = new HashMap<String,Object>();
		
		
		Session session = (Session) getSession();
		Transaction tx = null;
		boolean bSuccessfullyAdded = false;		
		boolean bHeaderRecordExist = false;
		String message = "";
		
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		
		int mrHeaderId = 0;
		if(box.getInt("mrHeaderId")!= 0)
		{
			mrHeaderId = box.getInt("mrHeaderId");
		}
		
		int deptId = box.getInt("deptId");
		
		MasDepartment department = new MasDepartment();
		department.setId(deptId);
		String txtRequestType = box.getString("txtRequestType"); // for save/submit(forward) to centre HEAD		
		String Status = "n";
		if(txtRequestType.equalsIgnoreCase("SAVE"))
		{
			Status = "u";
		}
		if(txtRequestType.equalsIgnoreCase("SUBMIT"))
		{
			Status = "s";
		}
		
		
		
		int UserId = box.getInt("CHANGED_BY");
		Users user = new Users();
		user.setId(UserId);
		
		Date changedDate = new Date();
		String changedTime = (String) HMSUtil.getCurrentDateAndTime().get("currentTime");	
				
		
				  				
				    StoreInternalIndentM mrHeader = (StoreInternalIndentM) hbt.get(StoreInternalIndentM.class, mrHeaderId);			   			
					
					mrHeader.setLastChgBy(user);
					mrHeader.setLastChgDate(changedDate);
					mrHeader.setDemandDate(changedDate);
					mrHeader.setCreatedBy(user);
					mrHeader.setStatus(Status);				  	
					
					
					try{
						
						hbt.save(mrHeader);
						hbt.refresh(mrHeader);
						
						
						tx = session.beginTransaction();					
						
						String tableRowId = "";
						tableRowId = box.getString("tableRowId");

						String array_RowId[];
						array_RowId = tableRowId.split(",");
						System.out.println("array_RowId="+array_RowId+"tableRowId="+tableRowId);
						double HashQty =0;
						double HashValue=0;
						if (tableRowId != "") 
						{
							for (int i = 0; i < array_RowId.length; i++)
							{
								StoreInternalIndentT mrDetails = new StoreInternalIndentT();
								mrDetails = (StoreInternalIndentT) hbt.get(StoreInternalIndentT.class,Integer.parseInt(array_RowId[i]));
								int tempMRHeaderId= 0;
								if(mrDetails != null)
								{
									tempMRHeaderId = mrDetails.getInternal().getId();
								}
								
								int ItemId = box.getInt("ItemId"+ array_RowId[i]);
								MasStoreItem item = new MasStoreItem();
								item.setId(ItemId);
								
								int txtRequiredQty = box.getInt("txtRequiredQty" + array_RowId[i]);
								int txtAvailableStock = box.getInt("txtAvailableStock" + array_RowId[i]);
								double txtWPStock = box.getDouble("txtWPStock" + array_RowId[i]);
								double txtCDStock = box.getDouble("txtCDStock" + array_RowId[i]);
								double txtStoresStock = box.getDouble("txtStoresStock" + array_RowId[i]);
								String txtRemarks = box.getString("txtRemarks" + array_RowId[i]);
								
																			
								System.out.println("tempMRHeaderId="+tempMRHeaderId);
								System.out.println("mrHeaderId="+mrHeaderId);
								System.out.println("isnull="+mrDetails!= null);
								
								if(mrDetails!= null && tempMRHeaderId == mrHeaderId)
								{							
									mrDetails.setQtyRequest(txtRequiredQty);
									mrDetails.setReasonForDemand(txtRemarks);
									
																
									hbt.update(mrDetails);
									hbt.refresh(mrDetails);
								}
								else
								{
									StoreInternalIndentT mrDetails1 = new StoreInternalIndentT();
																
									mrDetails1.setItem(item);
									mrDetails1.setAvailableStock(new BigDecimal(txtAvailableStock));
									mrDetails1.setCdStock(new BigDecimal(txtCDStock));
									mrDetails1.setWpStock(new BigDecimal(txtWPStock));
									mrDetails1.setStoresStock(new BigDecimal(txtStoresStock));
									mrDetails1.setQtyRequest(txtRequiredQty);
									mrDetails1.setDepartment(department);					
									mrDetails1.setReasonForDemand(txtRemarks);
									mrDetails1.setStockInHand(txtAvailableStock);
									
									mrDetails1.setInternal(mrHeader);								
									
									
									hbt.save(mrDetails1);
									hbt.refresh(mrDetails1);
								}
																
								
							}
						}
						tx.commit();
						bSuccessfullyAdded = true;
					}
					
					catch(Exception e)
					{
						System.out.println("Update MR="+e);
						if (tx != null) {
							tx.rollback();
							e.printStackTrace();
							System.out.print(e);
						}
					}
				   
			
		
		
				if (bSuccessfullyAdded) {
					
					if(txtRequestType.equalsIgnoreCase("SAVE"))
					{
						message = "MR Details saved successfully";
								
					}
					
					if(txtRequestType.equalsIgnoreCase("SUBMIT"))
					{
						message = "MR Details submitted successfully for Approval"; 
					}
					
				} else {

					message = "Try Again!";
				}
			
				
		
		

		datamap.put("message", message);
		datamap.put("bSuccessfullyAdded", bSuccessfullyAdded);
		
		return datamap;	
	
	}
	
	
	public Map<String, Object> updateSavedMRWard(Box box)
	{

		Map<String,Object>datamap = new HashMap<String,Object>();
		
		
		Session session = (Session) getSession();
		Transaction tx = null;
		boolean bSuccessfullyAdded = false;		
		boolean bHeaderRecordExist = false;
		String message = "";
		
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		
		int mrHeaderId = 0;
		if(box.getInt("mrHeaderId")!= 0)
		{
			mrHeaderId = box.getInt("mrHeaderId");
		}
		
		int deptId = box.getInt("deptId");
		
		MasDepartment department = new MasDepartment();
		department.setId(deptId);
		String txtRequestType = box.getString("txtRequestType"); // for save/submit(forward) to centre HEAD		
		String Status = "n";
		if(txtRequestType.equalsIgnoreCase("SAVE"))
		{
			Status = "u";
		}
		if(txtRequestType.equalsIgnoreCase("SUBMIT"))
		{
			Status = "o";
		}
		
		
		
		int UserId = box.getInt("CHANGED_BY");
		Users user = new Users();
		user.setId(UserId);
		
		Date changedDate = new Date();
		String changedTime = (String) HMSUtil.getCurrentDateAndTime().get("currentTime");	
				
		
				  				
				    StoreInternalIndentM mrHeader = (StoreInternalIndentM) hbt.get(StoreInternalIndentM.class, mrHeaderId);			   			
					
					mrHeader.setLastChgBy(user);
					mrHeader.setLastChgDate(changedDate);
					mrHeader.setDemandDate(changedDate);
					mrHeader.setCreatedBy(user);
					mrHeader.setStatus(Status);				  	
					
					
					try{
						
						hbt.save(mrHeader);
						hbt.refresh(mrHeader);
						
						
						tx = session.beginTransaction();					
						
						String tableRowId = "";
						tableRowId = box.getString("tableRowId");

						String array_RowId[];
						array_RowId = tableRowId.split(",");
						System.out.println("array_RowId="+array_RowId+"tableRowId="+tableRowId);
						double HashQty =0;
						double HashValue=0;
						if (tableRowId != "") 
						{
							for (int i = 0; i < array_RowId.length; i++)
							{
								StoreInternalIndentT mrDetails = new StoreInternalIndentT();
								mrDetails = (StoreInternalIndentT) hbt.get(StoreInternalIndentT.class,Integer.parseInt(array_RowId[i]));
								int tempMRHeaderId= 0;
								if(mrDetails != null)
								{
									tempMRHeaderId = mrDetails.getInternal().getId();
								}
								
								int ItemId = box.getInt("ItemId"+ array_RowId[i]);
								MasStoreItem item = new MasStoreItem();
								item.setId(ItemId);
								
								int txtRequiredQty = box.getInt("txtRequiredQty" + array_RowId[i]);
								int txtAvailableStock = box.getInt("txtAvailableStock" + array_RowId[i]);
								double txtWPStock = box.getDouble("txtWPStock" + array_RowId[i]);
								double txtCDStock = box.getDouble("txtCDStock" + array_RowId[i]);
								double txtStoresStock = box.getDouble("txtStoresStock" + array_RowId[i]);
								String txtRemarks = box.getString("txtRemarks" + array_RowId[i]);
								
																			
								System.out.println("tempMRHeaderId="+tempMRHeaderId);
								System.out.println("mrHeaderId="+mrHeaderId);
								System.out.println("isnull="+mrDetails!= null);
								
								if(mrDetails!= null && tempMRHeaderId == mrHeaderId)
								{							
									mrDetails.setQtyRequest(txtRequiredQty);
									mrDetails.setReasonForDemand(txtRemarks);
									
																
									hbt.update(mrDetails);
									hbt.refresh(mrDetails);
								}
								else
								{
									StoreInternalIndentT mrDetails1 = new StoreInternalIndentT();
																
									mrDetails1.setItem(item);
									mrDetails1.setAvailableStock(new BigDecimal(txtAvailableStock));
									mrDetails1.setCdStock(new BigDecimal(txtCDStock));
									mrDetails1.setWpStock(new BigDecimal(txtWPStock));
									mrDetails1.setStoresStock(new BigDecimal(txtStoresStock));
									mrDetails1.setQtyRequest(txtRequiredQty);
									mrDetails1.setDepartment(department);					
									mrDetails1.setReasonForDemand(txtRemarks);
									mrDetails1.setStockInHand(txtAvailableStock);
									
									mrDetails1.setInternal(mrHeader);								
									
									
									hbt.save(mrDetails1);
									hbt.refresh(mrDetails1);
								}
																
								
							}
						}
						tx.commit();
						bSuccessfullyAdded = true;
					}
					
					catch(Exception e)
					{
						System.out.println("Update MR="+e);
						if (tx != null) {
							tx.rollback();
							e.printStackTrace();
							System.out.print(e);
						}
					}
				   
			
		
		
				if (bSuccessfullyAdded) {
					
					if(txtRequestType.equalsIgnoreCase("SAVE"))
					{
						message = "MR Details saved successfully";
								
					}
					
					if(txtRequestType.equalsIgnoreCase("SUBMIT"))
					{
						message = "MR Details submitted successfully"; 
					}
					
				} else {

					message = "Try Again!";
				}
			
				
		
		

		datamap.put("message", message);
		datamap.put("bSuccessfullyAdded", bSuccessfullyAdded);
		
		return datamap;	
	
	}
	
	public Map<String, Object> updateSavedRC(Box box)
	{

		Map<String,Object>datamap = new HashMap<String,Object>();
		
		
		Session session = (Session) getSession();
		Transaction tx = null;
		boolean bSuccessfullyAdded = false;		
		boolean bHeaderRecordExist = false;
		String message = "";
		
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		
		int requestHeaderId = 0;
		if(box.getInt("requestHeaderId")!= 0)
		{
			requestHeaderId = box.getInt("requestHeaderId");
		}
		
		int deptId = box.getInt("deptId");
		
		MasDepartment department = new MasDepartment();
		department.setId(deptId);
		String txtRequestType = box.getString("txtRequestType"); // for save/submit(forward) to centre HEAD		
		String Status = "n";
		if(txtRequestType.equalsIgnoreCase("SAVE"))
		{
			Status = "u";
		}
		if(txtRequestType.equalsIgnoreCase("SUBMIT"))
		{
			Status = "s";
		}
		
		
		
		int UserId = box.getInt("CHANGED_BY");
		Users user = new Users();
		user.setId(UserId);
		
		Date changedDate = new Date();
		String changedTime = (String) HMSUtil.getCurrentDateAndTime().get("currentTime");	
				
		
				  				
				    RcRequestHeader requestHeader = (RcRequestHeader) hbt.get(RcRequestHeader.class, requestHeaderId);			   			
					
				    requestHeader.setRequestDate(changedDate);
				    requestHeader.setLastChgBy(user);
				    requestHeader.setLastChgDate(changedDate);
				    requestHeader.setStatus(Status);				  	
					
					
					try{
						
						hbt.save(requestHeader);
						hbt.refresh(requestHeader);
						
						
						tx = session.beginTransaction();					
						
						String tableRowId = "";
						tableRowId = box.getString("tableRowId");

						String array_RowId[];
						array_RowId = tableRowId.split(",");
						System.out.println("array_RowId="+array_RowId+"tableRowId="+tableRowId);
						double HashQty =0;
						double HashValue=0;
						if (tableRowId != "") 
						{
							for (int i = 0; i < array_RowId.length; i++)
							{
								RcRequestDetails requestDetails = new RcRequestDetails();
								requestDetails = (RcRequestDetails) hbt.get(RcRequestDetails.class,Integer.parseInt(array_RowId[i]));
								int tempRCHeaderId= 0;
								if(requestDetails != null)
								{
									tempRCHeaderId = requestDetails.getHeader().getId();
								}
								
								int ItemId = box.getInt("ItemId"+ array_RowId[i]);
								MasStoreItem item = new MasStoreItem();
								item.setId(ItemId);
								
								BigDecimal txtRequiredQty = new BigDecimal(box.getDouble("txtRequiredQty" + array_RowId[i])).setScale(2, BigDecimal.ROUND_HALF_UP);
								int txtAvailableStock = box.getInt("txtAvailableStock" + array_RowId[i]);
								double txtWPStock = box.getDouble("txtWPStock" + array_RowId[i]);
								double txtCDStock = box.getDouble("txtCDStock" + array_RowId[i]);
								double txtStoresStock = box.getDouble("txtStoresStock" + array_RowId[i]);
								String fromDepartments = box.getString("from" + array_RowId[i]);
								String txtRemarks = box.getString("txtRemarks" + array_RowId[i]);
								
																			
								/*System.out.println("tempMRHeaderId="+tempMRHeaderId);
								System.out.println("mrHeaderId="+mrHeaderId);
								System.out.println("isnull="+mrDetails!= null);*/
								
								if(requestDetails!= null && tempRCHeaderId == requestHeaderId)
								{							
									requestDetails.setReqQty(txtRequiredQty);
									requestDetails.setReasonForDemand(txtRemarks);
									requestDetails.setFromDepartments(fromDepartments);
									
																
									hbt.update(requestDetails);
									hbt.refresh(requestDetails);
								}
								else
								{
									RcRequestDetails requestDetails1 = new RcRequestDetails();
																
									requestDetails1.setItem(item);
									requestDetails1.setAvailableStock(new BigDecimal(txtAvailableStock));
									requestDetails1.setCdStock(new BigDecimal(txtCDStock));
									requestDetails1.setWpStock(new BigDecimal(txtWPStock));
									requestDetails1.setStoresStock(new BigDecimal(txtStoresStock));
									requestDetails1.setReqQty(txtRequiredQty);
													
									requestDetails1.setReasonForDemand(txtRemarks);
									
									
									requestDetails1.setHeader(requestHeader);
									requestDetails1.setFromDepartments(fromDepartments);
									
									
									hbt.save(requestDetails1);
									hbt.refresh(requestDetails1);
								}
																
								
							}
						}
						tx.commit();
						bSuccessfullyAdded = true;
					}
					
					catch(Exception e)
					{
						System.out.println("Update MR="+e);
						if (tx != null) {
							tx.rollback();
							e.printStackTrace();
							System.out.print(e);
						}
					}
				   
			
		
		
				if (bSuccessfullyAdded) {
					
					if(txtRequestType.equalsIgnoreCase("SAVE"))
					{
						message = "RC Details saved successfully";
								
					}
					
					if(txtRequestType.equalsIgnoreCase("SUBMIT"))
					{
						message = "RC Details submitted successfully for Approval"; 
					}
					
				} else {

					message = "Try Again!";
				}
			
				
		
		

		datamap.put("message", message);
		datamap.put("bSuccessfullyAdded", bSuccessfullyAdded);
		
		return datamap;	
	
	}
	
	
	public Map<String, Object> updateSavedRCCDS(Box box)
	{

		Map<String,Object>datamap = new HashMap<String,Object>();
		
		
		Session session = (Session) getSession();
		Transaction tx = null;
		boolean bSuccessfullyAdded = false;		
		boolean bHeaderRecordExist = false;
		String message = "";
		
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		
		int requestHeaderId = 0;
		if(box.getInt("requestHeaderId")!= 0)
		{
			requestHeaderId = box.getInt("requestHeaderId");
		}
		
		int deptId = box.getInt("deptId");
		
		MasDepartment department = new MasDepartment();
		department.setId(deptId);
		String txtRequestType = box.getString("txtRequestType"); // for save/submit(forward) to centre HEAD		
		String Status = "n";
		if(txtRequestType.equalsIgnoreCase("SAVE"))
		{
			Status = "t";
		}
		if(txtRequestType.equalsIgnoreCase("SUBMIT"))
		{
			Status = "o";
		}
		
		
		
		int UserId = box.getInt("CHANGED_BY");
		Users user = new Users();
		user.setId(UserId);
		
		Date changedDate = new Date();
		String changedTime = (String) HMSUtil.getCurrentDateAndTime().get("currentTime");	
				
		
				  				
				    RcRequestHeader requestHeader = (RcRequestHeader) hbt.get(RcRequestHeader.class, requestHeaderId);			   			
					
				    requestHeader.setLastChgBy(user);
				    requestHeader.setLastChgDate(changedDate);
				    requestHeader.setStatus(Status);				  	
					
					
					try{
						
						hbt.save(requestHeader);
						hbt.refresh(requestHeader);
						
						
						tx = session.beginTransaction();					
						
						String tableRowId = "";
						tableRowId = box.getString("tableRowId");

						String array_RowId[];
						array_RowId = tableRowId.split(",");
						System.out.println("array_RowId="+array_RowId+"tableRowId="+tableRowId);
						double HashQty =0;
						double HashValue=0;
						if (tableRowId != "") 
						{
							for (int i = 0; i < array_RowId.length; i++)
							{
								RcRequestDetails requestDetails = new RcRequestDetails();
								requestDetails = (RcRequestDetails) hbt.get(RcRequestDetails.class,Integer.parseInt(array_RowId[i]));
								int tempRCHeaderId= 0;
								if(requestDetails != null)
								{
									tempRCHeaderId = requestDetails.getHeader().getId();
								}
								
								int ItemId = box.getInt("ItemId"+ array_RowId[i]);
								MasStoreItem item = new MasStoreItem();
								item.setId(ItemId);
								
								BigDecimal txtRequiredQty = new BigDecimal(box.getDouble("txtRequiredQty" + array_RowId[i])).setScale(2, BigDecimal.ROUND_HALF_UP);
								int txtAvailableStock = box.getInt("txtAvailableStock" + array_RowId[i]);
								double txtWPStock = box.getDouble("txtWPStock" + array_RowId[i]);
								double txtCDStock = box.getDouble("txtCDStock" + array_RowId[i]);
								double txtStoresStock = box.getDouble("txtStoresStock" + array_RowId[i]);
								String fromDepartments = box.getString("from" + array_RowId[i]);
								String txtRemarks = box.getString("txtRemarks" + array_RowId[i]);
								
																			
								/*System.out.println("tempMRHeaderId="+tempMRHeaderId);
								System.out.println("mrHeaderId="+mrHeaderId);
								System.out.println("isnull="+mrDetails!= null);*/
								
								if(requestDetails!= null && tempRCHeaderId == requestHeaderId)
								{							
									requestDetails.setReqQty(txtRequiredQty);
									requestDetails.setReasonForDemand(txtRemarks);
									requestDetails.setFromDepartments(fromDepartments);
									
									
																
									hbt.update(requestDetails);
									hbt.refresh(requestDetails);
								}
								else
								{
									RcRequestDetails requestDetails1 = new RcRequestDetails();
																
									requestDetails1.setItem(item);
									requestDetails1.setAvailableStock(new BigDecimal(txtAvailableStock));
									requestDetails1.setCdStock(new BigDecimal(txtCDStock));
									requestDetails1.setWpStock(new BigDecimal(txtWPStock));
									requestDetails1.setStoresStock(new BigDecimal(txtStoresStock));
									requestDetails1.setReqQty(txtRequiredQty);
									requestDetails1.setFromDepartments(fromDepartments);
									
													
									requestDetails1.setReasonForDemand(txtRemarks);
									
									
									requestDetails1.setHeader(requestHeader);								
									
									
									hbt.save(requestDetails1);
									hbt.refresh(requestDetails1);
								}
																
								
							}
						}
						tx.commit();
						bSuccessfullyAdded = true;
					}
					
					catch(Exception e)
					{
						System.out.println("Update MR="+e);
						if (tx != null) {
							tx.rollback();
							e.printStackTrace();
							System.out.print(e);
						}
					}
				   
			
		
		
				if (bSuccessfullyAdded) {
					
					if(txtRequestType.equalsIgnoreCase("SAVE"))
					{
						message = "RC Details saved successfully";
								
					}
					
					if(txtRequestType.equalsIgnoreCase("SUBMIT"))
					{
						message = "RC Details submitted successfully for Approval"; 
					}
					
				} else {

					message = "Try Again!";
				}
			
				
		
		

		datamap.put("message", message);
		datamap.put("bSuccessfullyAdded", bSuccessfullyAdded);
		
		return datamap;	
	
	}


	public Map<String, Object> rcListToVendorSubmitUntilReceive(Box box)
	{

		Map<String,Object>datamap = new HashMap<String,Object>();
		
		
		Session session = (Session) getSession();
		Transaction tx = null;
		boolean bSuccessfullyAdded = false;		
		boolean bHeaderRecordExist = false;
		String message = "";
		
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		
		int requestHeaderId = 0;
		if(box.getInt("requestHeaderId")!= 0)
		{
			requestHeaderId = box.getInt("requestHeaderId");
		}
		
		int deptId = box.getInt("deptId");
		int supplierId = box.getInt("supplierId");
		
		MasDepartment department = new MasDepartment();
		department.setId(deptId);
		String txtRequestType = box.getString("txtRequestType"); // for save/submit(forward) to centre HEAD		
		String status = "n";
		if(txtRequestType.equalsIgnoreCase("SAVE"))
		{
			status = "s";
			message = "RC Details saved successfully"; 
		}
		if(txtRequestType.equalsIgnoreCase("SUBMIT"))
		{
			status = "p";
			message = "RC Details submitted successfully"; 
		}
		
		
		
		int UserId = box.getInt("CHANGED_BY");
		Users user = new Users();
		user.setId(UserId);
		
		Date changedDate = new Date();
		String changedTime = (String) HMSUtil.getCurrentDateAndTime().get("currentTime");	
				
		
				  				
				  			  	
					
					
					try{
				
						
						
						tx = session.beginTransaction();	
						MasStoreSupplier supplier = new MasStoreSupplier();
						supplier.setId(supplierId);
						  RcHeader requestHeader = (RcHeader) hbt.get(RcHeader.class, requestHeaderId);			   			
							
						    requestHeader.setRemarks(box.getString("remarks"));
						    requestHeader.setLastChgBy(user);
						    requestHeader.setLastChgDate(changedDate);
						    requestHeader.setStatus(status);	
						    requestHeader.setSupplier(supplier);
						hbt.save(requestHeader);
						hbt.refresh(requestHeader);
						
						String tableRowId = "";
						tableRowId = box.getString("tableRowId");

						String array_RowId[];
						array_RowId = tableRowId.split(",");
						System.out.println("array_RowId="+array_RowId+"tableRowId="+tableRowId);
						double HashQty =0;
						double HashValue=0;
						if (tableRowId != "") 
						{
							for (int i = 0; i < array_RowId.length; i++)
							{
								RcDetails requestDetails = new RcDetails();
								requestDetails = (RcDetails) hbt.get(RcDetails.class,Integer.parseInt(array_RowId[i]));
								int tempRCHeaderId= 0;
								if(requestDetails != null)
								{
									tempRCHeaderId = requestDetails.getHeader().getId();
								}
								
								int ItemId = box.getInt("ItemId"+ array_RowId[i]);
								MasStoreItem item = new MasStoreItem();
								item.setId(ItemId);
								
								BigDecimal requestedQty = new BigDecimal(box.getInt("txtRequiredQty"+ array_RowId[i]));
								BigDecimal recomQty = new BigDecimal(box.getInt("txtRecomQty"+ array_RowId[i]));
								BigDecimal finalQty = new BigDecimal(box.getInt("txtFinalQty"+ array_RowId[i]));
								
							
								/*String txtRemarks = box.getString("txtRemarks" + array_RowId[i]);*/
								
																			
								/*System.out.println("tempMRHeaderId="+tempMRHeaderId);
								System.out.println("mrHeaderId="+mrHeaderId);
								System.out.println("isnull="+mrDetails!= null);*/
								
								if(requestDetails!= null && tempRCHeaderId == requestHeaderId)
								{							
									/*requestDetails.setReqQty(txtRequiredQty);
									requestDetails.setReasonForDemand(txtRemarks);*/
									
									requestDetails.setRequestedQty(requestedQty);	
									requestDetails.setRecomQty(recomQty);
									requestDetails.setFinalQty(finalQty);
									requestDetails.setRcStatus(status);
									hbt.update(requestDetails);
									hbt.refresh(requestDetails);
								}
								else
								{
									RcDetails requestDetails1 = new RcDetails();
																
									requestDetails1.setItem(item);
									requestDetails1.setRequestedQty(requestedQty);
									requestDetails1.setRecomQty(recomQty);
									requestDetails1.setFinalQty(finalQty);
									requestDetails1.setHeader(requestHeader);								
									requestDetails1.setRcStatus(status);
									
									hbt.save(requestDetails1);
									hbt.refresh(requestDetails1);
								}
																
								
							}
						}
						tx.commit();
						bSuccessfullyAdded = true;
					}
					
					catch(Exception e)
					{
						System.out.println("Update MR="+e);
						if (tx != null) {
							tx.rollback();
							e.printStackTrace();
							System.out.print(e);
						}
					}
			
				if (!bSuccessfullyAdded) {
					
					
					message = "Try Again!";
					
					
				} 
		
		

		datamap.put("message", message);
		datamap.put("bSuccessfullyAdded", bSuccessfullyAdded);
		
		return datamap;	
	
	}
	
	public Map<String, Object> submitApprovalDetailsofMR(Box box)
	{

		Map<String,Object>datamap = new HashMap<String,Object>();
		
		
		Session session = (Session) getSession();
		Transaction tx = null;
		boolean bSuccessfullyAdded = false;		
		boolean bHeaderRecordExist = false;
		String message = "";
		
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		
		int mrHeaderId = 0;
		if(box.getInt("mrHeaderId")!= 0)
		{
			mrHeaderId = box.getInt("mrHeaderId");
		}
		
		
		String ApprovalStatus = box.getString("approvalStatus"); // for Approval Status and Remarks	
		String ApprovalRemarks = box.getString("approvalRemarks");
			
		int empId= box.getInt("empId");
		MasEmployee approvedBy = new MasEmployee();
		approvedBy.setId(empId);
		
		
		Date changedDate = new Date();
		String changedTime = (String) HMSUtil.getCurrentDateAndTime().get("currentTime");	
				
		
				  				
				    StoreInternalIndentM mrHeader = (StoreInternalIndentM) hbt.get(StoreInternalIndentM.class, mrHeaderId);			   			
					
					mrHeader.setApprovedBy(approvedBy);
					mrHeader.setApprovalRemarks(ApprovalRemarks);
					mrHeader.setStatus(ApprovalStatus);
					mrHeader.setApprovalDate(changedDate);
					
					
					try{
						
						hbt.save(mrHeader);
						hbt.refresh(mrHeader);
						
						
						tx = session.beginTransaction();					
						
						String tableRowId = "";
						tableRowId = box.getString("tableRowId");

						String array_RowId[];
						array_RowId = tableRowId.split(",");
						System.out.println("array_RowId="+array_RowId+"tableRowId="+tableRowId);
						double HashQty =0;
						double HashValue=0;
						if (tableRowId != "") 
						{
							for (int i = 0; i < array_RowId.length; i++)
							{
								StoreInternalIndentT mrDetails = new StoreInternalIndentT();
								mrDetails = (StoreInternalIndentT) hbt.get(StoreInternalIndentT.class,Integer.parseInt(array_RowId[i]));
								int tempMRHeaderId= 0;
								if(mrDetails != null)
								{
									tempMRHeaderId = mrDetails.getInternal().getId();
								}
								
								int ItemId = box.getInt("ItemId"+ array_RowId[i]);
								MasStoreItem item = new MasStoreItem();
								item.setId(ItemId);
								
								int txtRequiredQty = box.getInt("txtRequiredQty" + array_RowId[i]);								
								String txtRemarks = box.getString("txtRemarks" + array_RowId[i]);
								
								
								if(mrDetails!= null && tempMRHeaderId == mrHeaderId)
								{							
									mrDetails.setQtyRequest(txtRequiredQty);
									mrDetails.setReasonForDemand(txtRemarks);
									
																
									hbt.update(mrDetails);
									hbt.refresh(mrDetails);
								}
								
																
								
							}
						}
						tx.commit();
						bSuccessfullyAdded = true;
					}
					
					catch(Exception e)
					{
						System.out.println("Approved MR="+e);
						if (tx != null) {
							tx.rollback();
							e.printStackTrace();
							System.out.print(e);
						}
					}
				   
			
		
		
				if (bSuccessfullyAdded) {
					
					if(ApprovalStatus.equalsIgnoreCase("o"))
					{
						message = "MR Details are approved successfully";
								
					}
					
					if(ApprovalStatus.equalsIgnoreCase("r"))
					{
						message = "MR Details are rejected"; 
					}
					
				} else {

					message = "Try Again!";
				}
			
				
		
		

		datamap.put("message", message);
		datamap.put("bSuccessfullyAdded", bSuccessfullyAdded);
		
		return datamap;	
	
	}
	
	
	public Map<String, Object> submitApprovalDetailsofRC(Box box)
	{

		Map<String,Object>datamap = new HashMap<String,Object>();
		List<RcRequestDetails> rcDrugList = new ArrayList<RcRequestDetails>();
		List<RcRequestDetails> rcNonDrugList = new ArrayList<RcRequestDetails>();
		
		
		Session session = (Session) getSession();
		Transaction tx = null;
		boolean bSuccessfullyAdded = false;		
		boolean bHeaderRecordExist = false;
		String message = "";
		
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		
		int requestHeaderId = 0;
		if(box.getInt("requestHeaderId")!= 0)
		{
			requestHeaderId = box.getInt("requestHeaderId");
		}
		try{
		tx = session.beginTransaction();	
		String ApprovalStatus = box.getString("approvalStatus"); // for Approval Status and Remarks	
		String ApprovalRemarks = box.getString("approvalRemarks");
			
		int empId= box.getInt("empId");
		MasEmployee approvedBy = new MasEmployee();
		approvedBy.setId(empId);
		
		
		Properties properties = new Properties();
		URL resourcePath = Thread.currentThread().getContextClassLoader()
				.getResource("adt.properties");
		int sectionIdForDrugs=0;
		try {
			properties.load(resourcePath.openStream());
			sectionIdForDrugs = Integer.parseInt(properties.getProperty("SectionIdForDrugs"));
		
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		Date changedDate = new Date();
		String changedTime = (String) HMSUtil.getCurrentDateAndTime().get("currentTime");	
				
		
				  				
				    RcRequestHeader requestHeader = (RcRequestHeader) hbt.get(RcRequestHeader.class, requestHeaderId);			   			
					
				    requestHeader.setApprovedBy(approvedBy);
				    requestHeader.setApprovalRemarks(ApprovalRemarks);
				    requestHeader.setStatus(ApprovalStatus);
				    requestHeader.setApprovalDate(changedDate);
				    MasDepartment md = new MasDepartment();
				    md.setId(box.getInt("toDept"));
				    requestHeader.setToDepartment(md);
					
					
				
						
						hbt.save(requestHeader);
						hbt.refresh(requestHeader);
						
						
										
						
						String tableRowId = "";
						tableRowId = box.getString("tableRowId");

						String array_RowId[];
						array_RowId = tableRowId.split(",");
						System.out.println("array_RowId="+array_RowId+"tableRowId="+tableRowId);
						double HashQty =0;
						double HashValue=0;
						if (tableRowId != "") 
						{
							for (int i = 0; i < array_RowId.length; i++)
							{
								RcRequestDetails requestDetails = new RcRequestDetails();
								requestDetails = (RcRequestDetails) hbt.get(RcRequestDetails.class,Integer.parseInt(array_RowId[i]));
								int tempRCHeaderId= 0;
								if(requestDetails != null)
								{
									tempRCHeaderId = requestDetails.getHeader().getId();
								}
								
								int ItemId = box.getInt("ItemId"+ array_RowId[i]);
								MasStoreItem item = new MasStoreItem(); 
								item.setId(ItemId);
								
								BigDecimal txtRequiredQty = new BigDecimal(box.getDouble("txtRequiredQty" + array_RowId[i])).setScale(2, BigDecimal.ROUND_HALF_UP);								
								String txtRemarks = box.getString("txtRemarks" + array_RowId[i]);
								String fromDepartments = box.getString("from" + array_RowId[i]);
								
								
								if(requestDetails!= null && tempRCHeaderId == requestHeaderId)
								{							
									requestDetails.setReqQty(txtRequiredQty);
									requestDetails.setReasonForDemand(txtRemarks);
									requestDetails.setFromDepartments(fromDepartments);
									
																
									hbt.update(requestDetails);
									hbt.refresh(requestDetails);
								}
								
									if(requestDetails.getItem().getSection().getId().intValue()==sectionIdForDrugs)		
									{
										rcDrugList.add(requestDetails);
									}
									else
									{
										rcNonDrugList.add(requestDetails);	
									}
								
							}
						}
						
				
				
		// code start for consolidation in rc_header and rc_details table
						
						
				
				Map<String,Object> utilMap = new HashMap<String,Object>();
				String rcNo = "";
				
				int userId = box.getInt("userId");			
				int hospitalId = box.getInt("hospitalId");
				int deptId = box.getInt("deptId");
				System.out.println("hospitalId"+hospitalId);
				utilMap = (Map)HMSUtil.getCurrentDateAndTime();
				String currentTime = (String)utilMap.get("currentTime");
				
			
				Users user = new Users();
				user.setId(userId);
				MasHospital masHospitalObj = new MasHospital();
				masHospitalObj.setId(hospitalId);
				
				// code start for drug rc
				if(rcDrugList.size()>0)
				{
				List<RcDetails> rcDrugDetailsList = new ArrayList<RcDetails>(); 
				rcDrugDetailsList = session.createCriteria(RcDetails.class)
						.createAlias("Header", "h")						
						.add(Restrictions.eq("h.Department.Id", md.getId()))
						.add(Restrictions.eq("h.RcType", "d").ignoreCase())
						.add(Restrictions.eq("h.Status", "s").ignoreCase()).list();
				RcHeader rcDrugheader = new RcHeader();
				if(rcDrugDetailsList.size()==0)
				{
					Map<String, Object> map = new HashMap<String, Object>();
					map.put("tableObjectName", "RcHeader");			
					map.put("isHospitalWise", "y");
					map.put("hospitalId", hospitalId);
					map.put("isYearly", "y");			
					map.put("isMonthly", "y");
					map.put("isPrefix", "y");
					map.put("transactionPrefixProperty", "transactionPrefixForRC");		
					map.put("isPostfix", "y");
					map.put("transactionPostfixProperty", "transactionPostfixForRC");	
					rcNo = HMSUtil.generateTransactionSequence(map, session, hbt);
					
					int count = box.getInt("count");
					
					rcDrugheader.setRcNo(rcNo);		
					rcDrugheader.setDepartment(md);
					rcDrugheader.setHospital(masHospitalObj);
					rcDrugheader.setStatus("s");
					rcDrugheader.setLastChgBy(user);
					rcDrugheader.setLastChgDate(new Date());
					rcDrugheader.setLastChgTime(currentTime);
					rcDrugheader.setRcType("d");
					rcDrugheader.setRcDate(new Date());
					hbt.save(rcDrugheader);					
					
				}
				else
				{
					rcDrugheader= rcDrugDetailsList.get(0).getHeader();
				}
				
				
		
			boolean newItemFlag = true; 
				for(RcRequestDetails rc: rcDrugList) 
				{
					newItemFlag = true;
					for(RcDetails rcd : rcDrugDetailsList)
					{
						if(rc.getItem().getId().intValue()==rcd.getItem().getId().intValue())
						{
							
							rcd.setFromDepartments((rcd.getFromDepartments()!=null?rcd.getFromDepartments()+", ":"")+(rc.getFromDepartments()!=null?rc.getFromDepartments():""));
							rcd.setRequestedQty(rcd.getRequestedQty().add(rc.getReqQty()));
							newItemFlag = false;
						}
					
					}
					if(newItemFlag)
					{
						RcDetails rcDetails = new RcDetails();
						rcDetails.setHeader(rcDrugheader);
						rcDetails.setItem(rc.getItem());
						rcDetails.setRcStatus("s");
						rcDetails.setFromDepartments((rc.getFromDepartments()!=null?rc.getFromDepartments()+", ":"")+(rc.getFromDepartments()!=null?rc.getFromDepartments():""));
						rcDetails.setRequestedQty(rc.getReqQty());
						/*rcdetails.setBrand(brand);
						rcdetails.setManufacturer(manufacturer);*/
						hbt.save(rcDetails);
						hbt.flush();
					}
				
				}
			
			
			
			for(RcRequestDetails rcRequestD: rcDrugList) 
			{
				rcRequestD.setRcHeader(rcDrugheader);
				RcRequestHeader header = new RcRequestHeader();
				header = rcRequestD.getHeader();
				header.setRcHeader(rcDrugheader);
				hbt.update(header);
				hbt.update(rcRequestD);
			}
		}		
			// code ends for drug rc

			
			
			// code start for non drug rc
			if(rcNonDrugList.size()>0)
			{
			
			List<RcDetails> rcNonDrugDetailsList = new ArrayList<RcDetails>(); 
			rcNonDrugDetailsList = session.createCriteria(RcDetails.class)
					.createAlias("Header", "h")						
					.add(Restrictions.eq("h.Department.Id", md.getId()))
					.add(Restrictions.eq("h.RcType", "n").ignoreCase())
					.add(Restrictions.eq("h.Status", "s").ignoreCase()).list();
			RcHeader rcNonDrugheader = new RcHeader();
			if(rcNonDrugDetailsList.size()==0)
			{
				Map<String, Object> map = new HashMap<String, Object>();
				map.put("tableObjectName", "RcHeader");			
				map.put("isHospitalWise", "y");
				map.put("hospitalId", hospitalId);
				map.put("isYearly", "y");			
				map.put("isMonthly", "y");
				map.put("isPrefix", "y");
				map.put("transactionPrefixProperty", "transactionPrefixForRC");					
				rcNo = HMSUtil.generateTransactionSequence(map, session, hbt);
				
				int count = box.getInt("count");
				
				rcNonDrugheader.setRcNo(rcNo);		
				rcNonDrugheader.setDepartment(md);
				rcNonDrugheader.setHospital(masHospitalObj);
				rcNonDrugheader.setStatus("s");
				rcNonDrugheader.setLastChgBy(user);
				rcNonDrugheader.setLastChgDate(new Date());
				rcNonDrugheader.setLastChgTime(currentTime);
				rcNonDrugheader.setRcType("n");
				rcNonDrugheader.setRcDate(new Date());
				hbt.save(rcNonDrugheader);					
				
			}
			else
			{
				rcNonDrugheader= rcNonDrugDetailsList.get(0).getHeader();
			}
			
			
	
		boolean newItemFlagForND = true; 
			for(RcRequestDetails rc: rcNonDrugList) 
			{
				newItemFlagForND = true;
				for(RcDetails rcd : rcNonDrugDetailsList)
				{
					if(rc.getItem().getId().intValue()==rcd.getItem().getId().intValue())
					{
						
						rcd.setFromDepartments((rcd.getFromDepartments()!=null?rcd.getFromDepartments()+", ":"")+(rc.getFromDepartments()!=null?rc.getFromDepartments():""));
						rcd.setRequestedQty(rcd.getRequestedQty().add(rc.getReqQty()));
						newItemFlagForND = false;
					}
				
				}
				if(newItemFlagForND)
				{
					RcDetails rcDetails = new RcDetails();
					rcDetails.setHeader(rcNonDrugheader);
					rcDetails.setItem(rc.getItem());
					rcDetails.setRcStatus("s");
					rcDetails.setFromDepartments((rc.getFromDepartments()!=null?rc.getFromDepartments()+", ":"")+(rc.getFromDepartments()!=null?rc.getFromDepartments():""));
					rcDetails.setRequestedQty(rc.getReqQty());
					/*rcdetails.setBrand(brand);
					rcdetails.setManufacturer(manufacturer);*/
					hbt.save(rcDetails);
					hbt.flush();
				}
			
			}
		
		
		
		for(RcRequestDetails rcRequestD: rcNonDrugList) 
		{
			rcRequestD.setRcHeader(rcNonDrugheader);
			RcRequestHeader header = new RcRequestHeader();
			header = rcRequestD.getHeader();
			header.setRcHeader(rcNonDrugheader);
			hbt.update(header);
			hbt.update(rcRequestD);
		}
			}
		// code start for non drug rc
		
				
		// code ends for consolidation in rc_header and rc_details table		
			bSuccessfullyAdded = true;
			message = "RC Details are approved successfully";
			tx.commit();
					}
					
					catch(Exception e)
					{
						System.out.println("Approved MR="+e);
						if (tx != null) {
							tx.rollback();
							e.printStackTrace();
							System.out.print(e);
							message = "Some Problem Occured Try Again!";
						}
					}
				   
			
		
		
			
			

		datamap.put("message", message);
		datamap.put("bSuccessfullyAdded", bSuccessfullyAdded);
		
		return datamap;	
	
	}
	
	
	
	@Override
	public Map<String, Object> getListOfPendingForReceivingExpiredDrugs(Box box) {
		Map<String,Object> datamap = new HashMap<String,Object>();
		List<StoreInternalReturnM> rerturnHeaderList = new ArrayList<StoreInternalReturnM>();
		
		Session session = (Session) getSession();
		int pagingSize = 10;
		int pageNo = 1;		
	
		int hospitalId = 0;
		int deptId=0;
		int fromdept =0;
	
		
		if (box.getString("PN") != null)
			pageNo = Integer.parseInt(box.getString("PN"));		
		if (box.getInt("hospitalId") != 0)
			hospitalId = box.getInt("hospitalId");
		if (box.getInt("deptId") != 0)
			deptId = box.getInt("deptId");	
		if (box.getInt("fromdept") != 0)
			fromdept = box.getInt("fromdept");	
		
		
		
		
		Criteria cr = null;
		cr = session.createCriteria(StoreInternalReturnM.class);
		cr = cr.addOrder(Order.desc("ReturnDate"));
		
		
		if (fromdept != 0 ) {
			cr = cr.createAlias("FromDepartment", "fromdept");
			cr = cr.add(Restrictions.eq("fromdept.Id", fromdept));
		}
		
		if (deptId != 0 ) {
			cr = cr.createAlias("ToDepartment", "todept");
			cr = cr.add(Restrictions.eq("todept.Id", deptId));
		}
		
		if (hospitalId != 0 ) {
			cr = cr.createAlias("Hospital", "hp");
			cr = cr.add(Restrictions.eq("hp.Id", hospitalId));
		}
		
		cr = cr.add(Restrictions.isNull("ReceivedBy"));
		
		List totalMatches = cr.list();
		cr = cr.setFirstResult(pagingSize * (pageNo - 1));
		cr = cr.setMaxResults(pagingSize);
		rerturnHeaderList = cr.list();

		System.out.println("Total records=" + totalMatches.size());
		int totalRecords = totalMatches.size();
		totalMatches.clear();

		System.out.println("Size of rerturnHeaderList in dataservice="
				+ rerturnHeaderList.size());

		datamap.put("rerturnHeaderList", rerturnHeaderList);
		datamap.put("totalRecords", totalRecords);

		return datamap;

	}
	
	public Map<String, Object> getReturnDetailsofExpiredDrugs(int returnHeaderId) 
	{
		Map<String,Object> datamap = new HashMap<String,Object>();
		List<StoreInternalReturnM> returnHeader = new ArrayList<StoreInternalReturnM>();
		List<StoreInternalReturnT> returnDetails = new ArrayList<StoreInternalReturnT>();
		
		
				
		Session session = (Session) getSession();
		Criteria cr = null;
		cr = session.createCriteria(StoreInternalReturnT.class);
		cr = cr.createAlias("ReturnMain", "header");
		cr = cr.add(Restrictions.eq("header.Id", returnHeaderId));
		returnDetails = cr.list();
		
		cr = session.createCriteria(StoreInternalReturnM.class);		
		cr = cr.add(Restrictions.eq("Id", returnHeaderId));
		returnHeader = cr.list();	
		
		datamap.put("returnDetails", returnDetails);
		datamap.put("returnHeader", returnHeader);
		
		return datamap;
		
		
	}
	
	
	public Map<String, Object> saveStockofReturnDrugs(Box box)
	{

		Map<String,Object>datamap = new HashMap<String,Object>();
		
		
		Session session = (Session) getSession();
		Transaction tx = null;
		boolean bSuccessfullyAdded = false;		
		boolean bHeaderRecordExist = false;
		String message = "";
		
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		
		int returnHeaderId = 0;
		if(box.getInt("returnHeaderId")!= 0)
		{
			returnHeaderId = box.getInt("returnHeaderId");
		}
		
		int deptId = box.getInt("deptId");
		int hospitalId = box.getInt("hospitalId");
		
		MasDepartment department = new MasDepartment();
		department.setId(deptId);
		
		MasHospital hospital = new MasHospital();
		hospital.setId(hospitalId);
		
		int empId = box.getInt("empId");
		MasEmployee receivedBy = new MasEmployee();
		receivedBy.setId(empId);		
		
		
		int UserId = box.getInt("CHANGED_BY");
		Users user = new Users();
		user.setId(UserId);
		
		Date changedDate = new Date();
		String changedTime = (String) HMSUtil.getCurrentDateAndTime().get("currentTime");	
				
		
				  				
				    StoreInternalReturnM returnHeader = (StoreInternalReturnM) hbt.get(StoreInternalReturnM.class, returnHeaderId);			   			
					
				    returnHeader.setReceivedBy(receivedBy);
				    returnHeader.setReceivedDate(changedDate);
					  	
					
					
					try{
						
						hbt.save(returnHeader);
						hbt.refresh(returnHeader);
						
						
						tx = session.beginTransaction();					
						
						String tableRowId = "";
						tableRowId = box.getString("tableRowId");

						String array_RowId[];
						array_RowId = tableRowId.split(",");
						System.out.println("array_RowId="+array_RowId+"tableRowId="+tableRowId);
						double HashQty =0;
						double HashValue=0;
						if (tableRowId != "") 
						{
							for (int i = 0; i < array_RowId.length; i++)
							{
								StoreInternalReturnT returnDetails = new StoreInternalReturnT();
								returnDetails = (StoreInternalReturnT) hbt.get(StoreInternalReturnT.class,Integer.parseInt(array_RowId[i]));
								
								
								int txtReceivedQty = box.getInt("txtReceivedQty" + array_RowId[i]);
								String txtRemarks = box.getString("txtRemarks" + array_RowId[i]);
							
								int stockId = 0;
								if(returnDetails!= null)
								{							
									returnDetails.setReceivedQty(txtReceivedQty);
									returnDetails.setDiscrepancyRemarks(txtRemarks);
									stockId = returnDetails.getStock()!=null?returnDetails.getStock().getId():0;
																	
																
									hbt.update(returnDetails);
									hbt.refresh(returnDetails);
								}
								int itemId=0;
								int brandId=0;
								int manuId=0;
								String batchNo="";
								
								
								StoreItemBatchStock existingBatchStock = new StoreItemBatchStock();
								existingBatchStock = (StoreItemBatchStock) getHibernateTemplate().get(StoreItemBatchStock.class, stockId);
         						if(existingBatchStock != null)
         						{                                                							                                                   						
         							itemId = existingBatchStock.getItem()!=null? existingBatchStock.getItem().getId():0;
         							brandId = existingBatchStock.getBrand()!=null? existingBatchStock.getBrand().getId():0;
         							manuId = existingBatchStock.getManufacturer()!=null? existingBatchStock.getManufacturer().getId():0;
         							batchNo = existingBatchStock.getBatchNo()!=null? existingBatchStock.getBatchNo():"";
         							
         						}
								
								 // code for Store_item_batch_stock
                                 List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
                     			StoreItemBatchStock storeItemBatchStock = null;
                                 
                                 storeItemBatchStockList = hbt
                     					.find("from jkt.hms.masters.business.StoreItemBatchStock as inp where inp.Item.Id = "
                     							+ itemId                                                							
                     							+ " and inp.Department.Id= "
                     							+ deptId
                     							+ " and inp.BatchNo ='"
                     							+ batchNo
                     							+ "' and inp.Brand.Id = "
                     							+ brandId
                     							+ " and inp.Manufacturer.Id = "
                     							+ manuId
                     							+ " and inp.Hospital.Id = "
                     							+hospitalId);


                     					if (storeItemBatchStockList.size() > 0) 
                     					{
                     						storeItemBatchStock = storeItemBatchStockList.get(0);


                     						BigDecimal existing_qty = new BigDecimal(0);                                                						

                     						if (storeItemBatchStock.getReceivedQty() != null) {
                     							existing_qty = storeItemBatchStock.getReceivedQty();
                     						} else {
                     							existing_qty = new BigDecimal(0);
                     						}                                               						
                     						
                     						BigDecimal new_closing_stock = new BigDecimal(0);
                     						
                     						if(storeItemBatchStock.getClosingStock() !=null)
                     						{
                     							BigDecimal existing_closing_stock = storeItemBatchStock.getClosingStock();                                                    						
                         						new_closing_stock = existing_closing_stock.add(new BigDecimal(txtReceivedQty));
                     						}
                     						existing_qty = existing_qty.add(new BigDecimal(txtReceivedQty));                                     						
                     						
                     						                                        						
                     						
                     						int id = storeItemBatchStock.getId();
                     						
                     						StoreItemBatchStock existingstoreItemBatchStock = new StoreItemBatchStock();
                     						
                     						
                     						existingstoreItemBatchStock = (StoreItemBatchStock) getHibernateTemplate().get(StoreItemBatchStock.class, id);
                     						if(existingstoreItemBatchStock != null)
                     						{                                                							                                                   						
                     							existingstoreItemBatchStock.setReceivedQty(existing_qty);                                                    						
                     							existingstoreItemBatchStock.setClosingStock(new_closing_stock);                       											
                         						
                                                 existingstoreItemBatchStock.setLastChgDate(changedDate);
                                                 existingstoreItemBatchStock.setLastChgBy(user);
                                                 
                                                 
                         						HibernateTemplate hbt1 = getHibernateTemplate();
                         						hbt1.setFlushModeName("FLUSH_EAGER");
                         						hbt1.setCheckWriteOperations(false);
                         						hbt1.update(existingstoreItemBatchStock);
                     						}
                     					}
                     					else
                     					{
                     						
                     						
            									
            									
            									StoreItemBatchStock newBatchStock = new StoreItemBatchStock();
            									newBatchStock.setItem(existingBatchStock.getItem());
            									newBatchStock.setBatchNo(existingBatchStock.getBatchNo());
            									newBatchStock.setExpiryDate(existingBatchStock.getExpiryDate());
            									newBatchStock.setReceivedQty(new BigDecimal(txtReceivedQty));
            									newBatchStock.setClosingStock(new BigDecimal(txtReceivedQty));
            									newBatchStock.setCostPrice(existingBatchStock.getCostPrice());
            									newBatchStock.setBrand(existingBatchStock.getBrand());
            									newBatchStock.setManufacturer(existingBatchStock.getManufacturer());
            									newBatchStock.setManufactureDate(existingBatchStock.getManufactureDate());
            									newBatchStock.setLastChgBy(user);
            									newBatchStock.setOpeningBalanceDate(changedDate);
            									newBatchStock.setDepartment(department);
            									newBatchStock.setHospital(hospital);
            									newBatchStock.setLastChgDate(changedDate);
            									newBatchStock.setLastChgBy(user);
            									
            																
            									hbt.save(newBatchStock);
            									hbt.refresh(newBatchStock);
            								
                     					   
                         				}
								
								
								
																
								
							}
						}
						tx.commit();
						bSuccessfullyAdded = true;
					}
					
					catch(Exception e)
					{
						System.out.println("Saved Return Drugs="+e);
						if (tx != null) {
							tx.rollback();
							e.printStackTrace();
							System.out.print(e);
						}
					}
				   
			
		
		
				if (bSuccessfullyAdded) {
					
					
					
						message = "Drugs Details are Saved successfully"; 
				
					
				} else {

					message = "Try Again!";
				}
			
				
		
		

		datamap.put("message", message);
		datamap.put("bSuccessfullyAdded", bSuccessfullyAdded);
		
		return datamap;	
	
	}
	
	
	public Map<String,Object> getListofReceivedExpiredDrugs(Box box)
	{
		Session session = (Session)getSession();
		Map<String,Object> map= new HashMap<String,Object>();
		
		
		Criteria cr = null;
		List<StoreInternalReturnT> returnList = new ArrayList<StoreInternalReturnT>();		
	
		int pagingSize = 10;
		int pageNo = 1;	
		int hospitalId = box.getInt("hospitalId");
		int deptId = box.getInt("deptId");
		int fromDepartment = box.getInt("fromDepartment");

		
		if (box.getString("PN") != null)
			pageNo = Integer.parseInt(box.getString("PN"));
		
		
		cr = session.createCriteria(StoreInternalReturnT.class).createAlias("ReturnMain", "header")
				.createAlias("header.ToDepartment", "todept")
				.createAlias("header.FromDepartment", "fromdept")
				.add(Restrictions.eq("todept.Id", deptId))
				.add(Restrictions.eq("header.Hospital.Id", hospitalId))
				.add(Restrictions.isNotNull("ReceivedQty"));
		  
			if(fromDepartment !=0)
			{
				 cr= cr.add(Restrictions.eq("fromdept.Id", fromDepartment));
			}	  
			
	
			returnList = cr.list();		
		 	    
		    List totalMatches = cr.list();
		    cr = cr.setFirstResult(pagingSize * (pageNo - 1));
		    cr = cr.setMaxResults(pagingSize);
		    returnList = cr.list();
		    
		    int totalRecords = totalMatches.size();
		    totalMatches.clear();
		    	    
		    map.put("totalRecords", Integer.valueOf(totalRecords));
		    map.put("returnList", returnList);
		
		
		return map;
		
	}
	
	
	public Map<String,Object> getPendingListofActionofDrugDisposal(Box box)
	{
		Session session = (Session)getSession();
		Map<String,Object> map= new HashMap<String,Object>();
		
		
		Criteria cr = null;
		List<StoreInternalReturnT> returnList = new ArrayList<StoreInternalReturnT>();		
	
		int pagingSize = 10;
		int pageNo = 1;	
		int hospitalId = box.getInt("hospitalId");
		int deptId = box.getInt("deptId");
		int fromDepartment = box.getInt("fromDepartment");

		
		if (box.getString("PN") != null)
			pageNo = Integer.parseInt(box.getString("PN"));
		
		
		cr = session.createCriteria(StoreInternalReturnT.class).createAlias("ReturnMain", "header")
				.createAlias("header.ToDepartment", "todept")
				.createAlias("header.FromDepartment", "fromdept")
				.add(Restrictions.eq("todept.Id", deptId))
				.add(Restrictions.eq("header.Hospital.Id", hospitalId))
				.add(Restrictions.isNotNull("ReceivedQty"))
				.add(Restrictions.isNull("ActionTaken"));
		  
			if(fromDepartment !=0)
			{
				 cr= cr.add(Restrictions.eq("fromdept.Id", fromDepartment));
			}	  
			
	
			returnList = cr.list();		
		 	    
		    List totalMatches = cr.list();
		    cr = cr.setFirstResult(pagingSize * (pageNo - 1));
		    cr = cr.setMaxResults(pagingSize);
		    returnList = cr.list();
		    
		    int totalRecords = totalMatches.size();
		    totalMatches.clear();
		    	    
		    map.put("totalRecords", Integer.valueOf(totalRecords));
		    map.put("returnList", returnList);
		
		
		return map;
		
	}
	
	
	public Map<String, Object> submitActionDetailsofDrugsDisposal(Box box)
	{

		Map<String,Object>datamap = new HashMap<String,Object>();
		
		
		Session session = (Session) getSession();
		Transaction tx = null;
		boolean bSuccessfullyAdded = false;		
		boolean bHeaderRecordExist = false;
		String message = "";
		
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		
		
		int deptId = box.getInt("deptId");
		int hospitalId = box.getInt("hospitalId");
		String DecisionTaken = box.getString("DecisionTaken");
		
		String DisposalNo = "";
		Date changedDate = new Date();
		String changedTime = (String) HMSUtil.getCurrentDateAndTime().get("currentTime");	
		
					  	
					
					
					try{
						
						tx = session.beginTransaction();
						
						
				        if(DecisionTaken.equalsIgnoreCase("Disposal"))
				        {
				        	Map<String,Object> adMap = new HashMap<String,Object>();
						    adMap.put("tableObjectName", "StoreInternalReturnT");			
							adMap.put("isHospitalWise", "n");
							adMap.put("hospitalId", hospitalId);
							adMap.put("isYearly", "y");			
							adMap.put("isMonthly", "n");
							adMap.put("isPrefix", "y");
						
							adMap.put("transactionPrefixProperty", "transactionPrefixForDisposal");
							
							try{
								DisposalNo = HMSUtil.generateTransactionSequence(adMap, session, hbt);
							}catch(Exception e)
							{
								System.out.print("Exception in Method Generate Drug Disposal="+e);
							}
				        }
						
						
						
						
						String tableRowId = "";
						tableRowId = box.getString("tableRowId");

						String array_RowId[];
						array_RowId = tableRowId.split(",");
						System.out.println("array_RowId="+array_RowId+"tableRowId="+tableRowId);
						double HashQty =0;
						double HashValue=0;
						if (tableRowId != "") 
						{
							for (int i = 0; i < array_RowId.length; i++)
							{
								StoreInternalReturnT returnDetails = new StoreInternalReturnT();
								returnDetails = (StoreInternalReturnT) hbt.get(StoreInternalReturnT.class,Integer.parseInt(array_RowId[i]));
								
								if(returnDetails!= null)
								{							
									returnDetails.setActionDate(changedDate);
									returnDetails.setActionTaken(DecisionTaken);
									 if(DecisionTaken.equalsIgnoreCase("Disposal"))
										 returnDetails.setDisposalNo(DisposalNo);
									 else
										 returnDetails.setDisposalNo("VendorReturn");
									
																
									hbt.update(returnDetails);
									hbt.refresh(returnDetails);
								}
								
								
																
								
							}
						}
						tx.commit();
						bSuccessfullyAdded = true;
					}
					
					catch(Exception e)
					{
						System.out.println("Saved Action Taken in Drugs disposal="+e);
						if (tx != null) {
							tx.rollback();
							e.printStackTrace();
							System.out.print(e);
						}
					}
				   
			
		
		
				if (bSuccessfullyAdded) {
					
					
							if(DecisionTaken.equalsIgnoreCase("Disposal"))
									message = "Details are submitted successfully and Disposal reference number is "+DisposalNo; 
							else
								message = "Details are submitted successfully for Vendor Return"; 
				
					
				} else {

					message = "Try Again!";
				}
			
				
		
		

		datamap.put("message", message);
		datamap.put("DisposalNo", DisposalNo);
		datamap.put("bSuccessfullyAdded", bSuccessfullyAdded);
		
		return datamap;	
	
	}
	
	@Override
	public Map<String, Object> showPhysicalStockJsp(Box box) {
		 Map<String, Object>map = new HashMap<String, Object>();
		 /* Map<String, Object> utilMap = new HashMap<String, Object>();*/
		 List<Object[]> itemBatchStockList  = new ArrayList<Object[]>();
		/* List<StoreStockTakingM> StoreStockTakingMList = new ArrayList<StoreStockTakingM>();*/
//		 List<Object[]> employeeList = new ArrayList<Object[]>();
		/* List<MasDepartment> departmentList = new ArrayList<MasDepartment>();*/
		/* String entrySeqNo = "";
		 String lastSeqNo = "";
		 String lastSeqYear = "";
		 
		 String pvmsId = box.getString("pvmsId");*/
		 int itemId = 0;
		 String nomenclature = box.getString("nomenclature");
		 
		
		 if(nomenclature != "")
		 {
			 int begin = nomenclature.indexOf("[");
			 int end = nomenclature.indexOf("]");
			 String temp = nomenclature.substring(begin+1,end);			
			 itemId = Integer.parseInt(temp);
		 }
		 
		 Session session =(Session)getSession();

		/* departmentList = session.createCriteria(MasDepartment.class).add(Restrictions.eq("Status", "y")).addOrder(Order.asc("DepartmentName")).list();*/

		 Criteria cr=null;
		 
		 cr = session.createCriteria(StoreItemBatchStock.class).add(Restrictions.eq("Hospital.Id", box.getInt("locationId")))
				 			.add(Restrictions.eq("Department.Id", box.getInt("departmentId")))
		 					.createAlias("Item", "item")
		 					/*.add(Restrictions.ge("ClosingStock", new BigDecimal("0.0")))*/
		 					.add(Restrictions.or(Restrictions.gt("ExpiryDate", new Date()), Restrictions.isNull("ExpiryDate")))
		 					.addOrder(Order.asc("item.PvmsNo"))
		 					.setProjection(Projections.projectionList()
		 							.add(Projections.property("item.Id")).add(Projections.property("item.PvmsNo"))
		 							.add(Projections.property("item.Nomenclature"))
		 							/*.add(Projections.property("au.ItemUnitName"))*/
		 							.add(Projections.property("ClosingStock"))
		 							.add(Projections.property("ExpiryDate"))
		 							.add(Projections.property("BatchNo"))
		 							.add(Projections.property("Id"))
		 							.add(Projections.property("ClosingStock"))
		 							.add(Projections.property("ClosingStock")));
		 							
		 							
		 							
		 							
		 							
		 						
		 							if(itemId !=0)
		 							{
		 								cr=cr.add(Restrictions.eq("item.Id", itemId));
		 								itemBatchStockList = cr.list();
		 							}
		 							
	
	
        /* map.put("departmentList", departmentList);*/
		 map.put("itemBatchStockList", itemBatchStockList);
//		 map.put("employeeList", employeeList);
		return map;
		}



	@Override
	public Map<String, Object> submitPhysicalStockTaking(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = getSession();
		boolean saved = false;
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Transaction tx = null;
		boolean flag = false;
		int stockTakingMId=0;
		StoreItemBatchStock storeItemBatchStock = null ;
		List<StoreItemBatchStock> storeItemBatchStockList =null;
		Map<String,Object> utilMap = new HashMap<String,Object>();
		utilMap = (Map)HMSUtil.getCurrentDateAndTime();
		String time = (String)utilMap.get("currentTime");
		try {
			tx = session.beginTransaction();
			int counter = box.getInt("counter");
			
				StoreStockTakingM stockTakingM = new StoreStockTakingM();
				String StockTackingNo="";
				
				 Map<String,Object> adMap = new HashMap<String,Object>();
			    adMap.put("tableObjectName", "StoreStockTakingM");			
				adMap.put("isHospitalWise", "n");
				adMap.put("hospitalId", box.getInt("locationId"));
				adMap.put("isYearly", "y");			
				adMap.put("isMonthly", "n");
				adMap.put("isPrefix", "y");
				adMap.put("departmentId", box.getInt("departmentId"));
				adMap.put("isDepartmentWise", "y");
			
				adMap.put("transactionPrefixProperty", "transactionPrefixForStockTacking");
				
				try{
					StockTackingNo = HMSUtil.generateTransactionSequence(adMap, session, hbt);
				}catch(Exception e)
				{
					System.out.print("Exception in Method StockTackingNo="+e);
				}
				stockTakingM.setStockTakingNo(StockTackingNo);
			   
			   
				stockTakingM.setPhysicalDate(new Date());
				stockTakingM.setReason(box.getString("remarks"));
				
				if(box.getInt("locationId") != 0){
					MasHospital masHospital = new MasHospital();
					masHospital.setId(box.getInt("locationId"));
					stockTakingM.setHospital(masHospital);
				}
				MasDepartment department =new MasDepartment();
				department.setId(box.getInt("departmentId"));
				stockTakingM.setDepartment(department);
				

				stockTakingM.setLastChangedDate(new Date());
				stockTakingM.setLastChangedTime(time);
					Users user = new Users();
					user.setId(box.getInt("userId"));
					stockTakingM.setLastChangedBy(user);
					stockTakingM.setReason(box.getString("remarks"));
				
				hbt.save(stockTakingM);
				hbt.refresh(stockTakingM);
				stockTakingMId=stockTakingM.getId();
				System.out.println("counter="+counter);
				System.out.println("stockTakingMId="+stockTakingMId);
				
				for (int i = 1; i <= counter; i++) {
					if(box.getInt("itemId"+i) != 0){
						if(box.getDouble("computedStock"+i) !=box.getDouble("physicalStock"+i))
						{
						MasStoreItem masStoreItem = new MasStoreItem();
						StoreStockTakingT storeStockTakingT= new StoreStockTakingT();
						
						masStoreItem = new MasStoreItem();
						masStoreItem.setId(box.getInt("itemId"+i));
						System.out.println("Item="+box.getInt("itemId"+i));
						if(box.getString("expiryDate"+i)!="")
						{
						storeStockTakingT.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(box.getString("expiryDate"+i)));
						}
						storeStockTakingT.setItem(masStoreItem);
						storeStockTakingT.setStockTakingM(stockTakingM);
						StoreItemBatchStock stock = new StoreItemBatchStock();
						stock.setId(box.getInt("batchId"+i));
						System.out.println("BatchId="+box.getInt("batchId"+i));
						System.out.println("batchNo="+box.getInt("batchNo"+i));
						storeStockTakingT.setStoreItemBatchStock(stock);
						if(!box.getString("batchNo"+i).equals("")){
							storeStockTakingT.setBatchNo(box.getString("batchNo"+i));
						}
						if(box.getString("expiryDate"+i)!="")
						{
						storeStockTakingT.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(box.getString("expiryDate"+i)));
						}
						storeStockTakingT.setRemarks(box.getString("remarks"+i));
						storeStockTakingT.setComputedStock(new BigDecimal(box.getDouble("computedStock"+i)).setScale(2, BigDecimal.ROUND_HALF_UP));
						storeStockTakingT.setStoreStockService(new BigDecimal(box.getDouble("physicalStock"+i)).setScale(2, BigDecimal.ROUND_HALF_UP));
						
						storeStockTakingT.setStockSurplus(new BigDecimal(box.getDouble("surplus"+i)).setScale(2, BigDecimal.ROUND_HALF_UP));
						
						storeStockTakingT.setStockDeficient(new BigDecimal(box.getDouble("deficient"+i)).setScale(2, BigDecimal.ROUND_HALF_UP));
						System.out.println("remarks="+box.getString("remarks"+i));
						
						hbt.save(storeStockTakingT);
						hbt.refresh(storeStockTakingT);
						
						
						
					/*//	BigDecimal temp = new BigDecimal(box.getInt("physicalStock"+i));
						
						StoreItemBatchStock storeItemBatchStocK = (StoreItemBatchStock)hbt.load(StoreItemBatchStock.class, box.getInt("batchId"+i));
											
						
						if(box.getDouble("surplus"+i)>0){
							System.out.println("true 1");
							if(storeItemBatchStocK.getAdjustQty()!=null){
								storeItemBatchStocK.setAdjustQty( storeItemBatchStocK.getAdjustQty().add(new BigDecimal(box.getDouble("surplus"+i))) );
							}else{
								storeItemBatchStocK.setAdjustQty(new BigDecimal(box.getDouble("surplus"+i)));
							}
							storeItemBatchStocK.setClosingStock(new BigDecimal(box.getDouble("physicalStock"+i)));							
							
							
						}else if(box.getDouble("deficient"+i)>0){
								BigDecimal adjustQty = new BigDecimal(0);
								if(storeItemBatchStocK.getAdjustQty()!=null){
									adjustQty = storeItemBatchStocK.getAdjustQty();
									storeItemBatchStocK.setAdjustQty(adjustQty.subtract(new BigDecimal(box.getDouble("deficient"+i))));
								}
								else
								{
									storeItemBatchStocK.setAdjustQty(new BigDecimal(box.getDouble("deficient"+i)));
								}
								
								storeItemBatchStocK.setClosingStock(new BigDecimal(box.getDouble("physicalStock"+i)));							
								
								

						}
						hbt.update(storeItemBatchStocK);*/
						
						}
				}
				}

			map.put("stockTakingMId",stockTakingMId);
			saved=true;
			tx.commit();
		}catch (Exception e) {
				if (tx != null)
					tx.rollback();
				e.printStackTrace();
			}
			map.put("saved", saved);
			return map;
		}
	
	@SuppressWarnings("unchecked")
	public Map<String, Object> getIndentDetailsforChallanEntry(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIndentT> indentList = new ArrayList<StoreIndentT>();
	
		
		int hospitalId = box.getInt("hospitalId");
		int deptId = box.getInt("deptId");
     
		int indentNo = box.getInt("indentNo");
		try {
	
			indentList=session.createCriteria(StoreIndentT.class)
					.createAlias("Indent", "hd")
					.add(Restrictions.eq("hd.Id",indentNo))
									
					.list();
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		//System.out.println("mprList="+mprList.size());
		map.put("indentList", indentList);
		System.out.println("indentList="+indentList.size());
		
		return map;
	}
	
	public Map<String,Object> getPendingListforApprovalofStockTacking(Box box)
	{
		Session session = (Session)getSession();
		Map<String,Object> map= new HashMap<String,Object>();
		
		
		Criteria cr = null;
		List<StoreStockTakingM> stockTakingList = new ArrayList<StoreStockTakingM>();			
	
		int pagingSize = 10;
		int pageNo = 1;	
		int hospitalId = box.getInt("hospitalId");
		int deptId = box.getInt("deptId");
		int fromDepartment = box.getInt("fromDepartment");

		
		if (box.getString("PN") != null)
			pageNo = Integer.parseInt(box.getString("PN"));
		
		String flag="ApprovedList";
		
		if (box.getString("flag") != "")
			flag = box.getString("flag"); // flag will "LIST" in case of PAst history of Stock Taking
		
		cr = session.createCriteria(StoreStockTakingM.class)			
				.add(Restrictions.eq("Department.Id", deptId))			
				.add(Restrictions.eq("Hospital.Id", hospitalId));
		
		cr=cr.addOrder(Order.desc("PhysicalDate"));
		
		if(flag.equalsIgnoreCase("ApprovedList"))
		{
			cr= cr.add(Restrictions.isNull("ApprovedBy"));
		}
				
				
		  
		
			
	
		stockTakingList = cr.list();		
		 	    
		    List totalMatches = cr.list();
		    cr = cr.setFirstResult(pagingSize * (pageNo - 1));
		    cr = cr.setMaxResults(pagingSize);
		    stockTakingList = cr.list();
		    
		    int totalRecords = totalMatches.size();
		    totalMatches.clear();
		    	    
		    map.put("totalRecords", Integer.valueOf(totalRecords));
		    map.put("stockTakingList", stockTakingList);
		
		
		return map;
		
	}
	
	
	public Map<String,Object> showLabRequestWardWise(int hospitalId)
	{
		Session session = (Session)getSession();
		Map<String,Object> map= new HashMap<String,Object>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		
		departmentList = session.createCriteria(MasDepartment.class)
				.createAlias("DepartmentType", "dt")
				.add(Restrictions.eq("dt.DepartmentTypeName", "Ward").ignoreCase())
				.add(Restrictions.eq("Status", "y").ignoreCase())
				.add(Restrictions.eq("Hospital.Id", hospitalId))
				.addOrder(Order.asc("DepartmentName")).list();
		    	    
		    map.put("departmentList", departmentList);
		 
		
		return map;
		
	}
	
	public Map<String, Object> getStockTakingDetails(int stockTakingHeaderId) 
	{
		Map<String,Object> datamap = new HashMap<String,Object>();
		List<StoreStockTakingM> stockTakingHeader = new ArrayList<StoreStockTakingM>();		
		List<StoreStockTakingT> stockTakingDetail = new ArrayList<StoreStockTakingT>();
		
				
		Session session = (Session) getSession();
		Criteria cr = null;
		cr = session.createCriteria(StoreStockTakingT.class);
		cr = cr.createAlias("StockTakingM", "header");
		cr = cr.add(Restrictions.eq("header.Id", stockTakingHeaderId));
		stockTakingDetail = cr.list();
		
		cr = session.createCriteria(StoreStockTakingM.class);		
		cr = cr.add(Restrictions.eq("Id", stockTakingHeaderId));
		stockTakingHeader = cr.list();	
		
		datamap.put("stockTakingDetail", stockTakingDetail);
		datamap.put("stockTakingHeader", stockTakingHeader);
		System.out.println("");
		return datamap;
		
		
	}
	
	public Map<String, Object> updateStockTaking(Box box)
	{

		Map<String,Object>datamap = new HashMap<String,Object>();
		
		
		Session session = (Session) getSession();
		Transaction tx = null;
		boolean bSuccessfullyAdded = false;		
		boolean bHeaderRecordExist = false;
		String message = "";
		
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		
		int stockHeaderId = 0;
		if(box.getInt("stockHeaderId")!= 0)
		{
			stockHeaderId = box.getInt("stockHeaderId");
		}
		
		int deptId = box.getInt("deptId");
		
		MasDepartment department = new MasDepartment();
		department.setId(deptId);
		String txtRequestType = box.getString("txtRequestType"); // for save/submit(forward) to centre HEAD		
		
		
		int UserId = box.getInt("CHANGED_BY");
		Users user = new Users();
		user.setId(UserId);
		
		Date changedDate = new Date();
		String changedTime = (String) HMSUtil.getCurrentDateAndTime().get("currentTime");	
				
		
				  				
				    StoreStockTakingM stockTakingHeader = (StoreStockTakingM) hbt.get(StoreStockTakingM.class, stockHeaderId);   			
					if(txtRequestType.equalsIgnoreCase("APPROVE"))
					{
						stockTakingHeader.setApprovedBy(user);
					}
				    
							
					
					try{
						
						hbt.save(stockTakingHeader);
						hbt.refresh(stockTakingHeader);
						
						
						tx = session.beginTransaction();					
						
						String tableRowId = "";
						tableRowId = box.getString("tableRowId");

						String array_RowId[];
						array_RowId = tableRowId.split(",");
						System.out.println("array_RowId="+array_RowId+"tableRowId="+tableRowId);
						double HashQty =0;
						double HashValue=0;
						if (tableRowId != "") 
						{
							for (int i = 0; i < array_RowId.length; i++)
							{
								StoreStockTakingT stockTakingDetails = new StoreStockTakingT();
								stockTakingDetails = (StoreStockTakingT) hbt.get(StoreStockTakingT.class,Integer.parseInt(array_RowId[i]));
								int tempHeaderId= 0;
								if(stockTakingDetails != null)
								{
									tempHeaderId = stockTakingDetails.getStockTakingM().getId();
								}
								
								int ItemId = box.getInt("ItemId"+ array_RowId[i]);
								MasStoreItem item = new MasStoreItem();
								item.setId(ItemId);
								
								int physicalStock = box.getInt("physicalStock" + array_RowId[i]);
								int surplus = box.getInt("surplus" + array_RowId[i]);
								double deficient = box.getDouble("deficient" + array_RowId[i]);
								double txtCDStock = box.getDouble("txtCDStock" + array_RowId[i]);
								double txtStoresStock = box.getDouble("txtStoresStock" + array_RowId[i]);
								String remarks = box.getString("remarks" + array_RowId[i]);
								
																			
							
								
								if(stockTakingDetails!= null)
								{							
									stockTakingDetails.setStoreStockService(new BigDecimal(physicalStock));
								
									stockTakingDetails.setRemarks(remarks);
									stockTakingDetails.setStockDeficient(new BigDecimal(deficient));
									stockTakingDetails.setStockSurplus(new BigDecimal(surplus));
									
																
									hbt.update(stockTakingDetails);
									hbt.refresh(stockTakingDetails);
								}
								
								if(txtRequestType.equalsIgnoreCase("APPROVE"))
								{
									int ItembatchId= stockTakingDetails.getStoreItemBatchStock().getId();
									
									StoreItemBatchStock storeItemBatchStocK = (StoreItemBatchStock)hbt.load(StoreItemBatchStock.class, ItembatchId);
									
									
									if(box.getDouble("surplus"+array_RowId[i])>0)
									{										
										if(storeItemBatchStocK.getAdjustQty()!=null){
											storeItemBatchStocK.setAdjustQty( storeItemBatchStocK.getAdjustQty().add(new BigDecimal(box.getDouble("surplus"+i))) );
										}else{
											storeItemBatchStocK.setAdjustQty(new BigDecimal(box.getDouble("surplus"+array_RowId[i])));
										}
										//storeItemBatchStocK.setClosingStock(new BigDecimal(box.getDouble("physicalStock"+array_RowId[i])));	
										
										storeItemBatchStocK.setClosingStock(storeItemBatchStocK.getClosingStock().add(new BigDecimal(box.getDouble("surplus"+array_RowId[i]))));	
										
										
									}else if(box.getDouble("deficient"+array_RowId[i])>0){
											BigDecimal adjustQty = new BigDecimal(0);
											if(storeItemBatchStocK.getAdjustQty()!=null){
												adjustQty = storeItemBatchStocK.getAdjustQty();
												storeItemBatchStocK.setAdjustQty(adjustQty.subtract(new BigDecimal(box.getDouble("deficient"+array_RowId[i]))));
											}
											else
											{
												storeItemBatchStocK.setAdjustQty(new BigDecimal(box.getDouble("deficient"+array_RowId[i])));
											}
											
											storeItemBatchStocK.setClosingStock(storeItemBatchStocK.getClosingStock().subtract(new BigDecimal(box.getDouble("deficient"+array_RowId[i]))));		
											if(storeItemBatchStocK.getClosingStock().compareTo(new BigDecimal(0.0))<0)
											{
												storeItemBatchStocK.setClosingStock(new BigDecimal(0.0));
											}
											
											
											

									}
									hbt.update(storeItemBatchStocK);
								}
								
								
																
								
							}
						}
						tx.commit();
						bSuccessfullyAdded = true;
					}
					
					catch(Exception e)
					{
						System.out.println("Approve Stock Taking="+e);
						if (tx != null) {
							tx.rollback();
							e.printStackTrace();
							System.out.print(e);
						}
					}
				   
			
		
		
				if (bSuccessfullyAdded) {
					
					if(txtRequestType.equalsIgnoreCase("APPROVE"))
					{
						message = "Stock Taking Details approved successfully";
								
					}
					
					if(txtRequestType.equalsIgnoreCase("SUBMIT"))
					{
						message = "Stock Taking Details submitted successfully for Approval"; 
					}
					
				} else {

					message = "Try Again!";
				}
			
				
		
		

		datamap.put("message", message);
		datamap.put("bSuccessfullyAdded", bSuccessfullyAdded);
		
		return datamap;	
	
	}
	
	
	@SuppressWarnings("unchecked")
	public Map<String, Object> getVendorList(Map map) {
		List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier>();
		Session session = (Session) getSession();
		try {
			String str ="%" +(String)map.get("autoHint") + "%";
			/*String query = "from MasIcd as icd where upper (icd.IcdName) like upper('" + str
					+ "')";*/
			/*
			 * Change HQL to Named HQL
			 * Code By Mukesh
			 * Date 15 Aug 2012
			 */
			String query = "from MasStoreSupplier as name where upper (name.SupplierName) like upper(:str) and Status='y'";
			Query q = session.createQuery(query);
			q.setParameter("str",str);
			/*q.setFirstResult(0);
			q.setMaxResults(10);*/
			supplierList = q.list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("supplierList", supplierList);
		return map;
	}
	
	
	@SuppressWarnings("unchecked")
	public Map<String, Object> getVendorName(Map map) {
		List<StoreQuotationRequestM> quotationList = new ArrayList<StoreQuotationRequestM>();
		List<StoreQuotationRequestM> quotationList1 = new ArrayList<StoreQuotationRequestM>();
		Session session = (Session) getSession();
		String VendorList="";
		
		int quotationId = (Integer)map.get("masterId");
		try {
			
			Criteria  cr = session.createCriteria(StoreQuotationRequestM.class).add(Restrictions.eq("Id", quotationId));
			quotationList = cr.list();
			String QNo="";
			
			for(StoreQuotationRequestM listA: quotationList)
			{
				QNo = listA.getRequestNo();
			}
						
			Criteria  cr1 = session.createCriteria(StoreQuotationRequestM.class).add(Restrictions.eq("RequestNo", QNo).ignoreCase());
			quotationList1 = cr1.list();
			
			int counter=1;
			for(StoreQuotationRequestM listB: quotationList1)
			{
				String VendorName = listB.getSupplier().getSupplierName();
				VendorName = counter+". " +VendorName;
								
				VendorList = VendorList +"\n"+VendorName;
				counter++;
			}
						
		} catch (Exception e) {
			e.printStackTrace();
		}
		finally
		{
			quotationList.clear();
			quotationList1.clear();
		}
		map.put("VendorList", VendorList);
		return map;
	}
	
	
	public Map<String, Object> getDataForBarBatchStockId(Box box)
	{
		session = getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		String source="";
		BigDecimal mmf = null;
		List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
		Calendar calendar=Calendar.getInstance();
		int year=calendar.get(calendar.YEAR);
		Calendar expiryDate = Calendar.getInstance();
		expiryDate.add(Calendar.DAY_OF_MONTH, Integer.parseInt(HMSUtil.getProperties("adt.properties", "prescriptionExpiry")));
		Date date = HMSUtil.getExpiryDateYYYYMMDD();
		
		
		try {
			storeItemBatchStockList = session
			.createCriteria(StoreItemBatchStock.class)
			.add(Restrictions.eq("Item.Id", box.getInt("itemId")))
			.add(Restrictions.eq("Id", box.getInt("stockId")))
			.add(Restrictions.eq("Department.Id", box.getInt("deptId")))
			.add(Restrictions.or(Restrictions.ge("ExpiryDate", date), Restrictions.isNull("ExpiryDate")))
			.add(Restrictions.eq("Hospital.Id", box.getInt("hospitalId")))
			.list();

			
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("storeItemBatchStockList", storeItemBatchStockList);
		
		return map;
	}
	
	
	public Map<String, Object> searchIndentDetailswithBatchId(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		int requestNo = box.getInt("requestNo");
		int deptId=0;
		List<Object[]> indentTList = new ArrayList<Object[]>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		SimpleDateFormat formatterIn1 = new SimpleDateFormat("dd/MM/yyyy");
		SimpleDateFormat formatterOut1 = new SimpleDateFormat("yyyy-MM-dd");
		int hospitalId=0;
		if(box.get("hospitalId") != null)
		{
			hospitalId=Integer.parseInt(""+box.getInt("hospitalId"));
		}
		try {
			Session session = getSession();
			String date4MySQL=null;
			try {
				date4MySQL = formatterOut1.format(formatterIn1.parse(date));
			} catch (Exception e) {
				e.printStackTrace();
			}
			Date datestr = HMSUtil.getExpiryDateYYYYMMDD();
			SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
			String issueDate=sdf.format(datestr);
			/*String query="select masstoreit2_.item_id as col_0_0_, masstoreit2_.pvms_no as col_1_0_, masstoreit2_.nomenclature as col_2_0_,masstoreun4_.unit_name as col_3_0_, storeinter1_.department_id as col_4_0_, storeinter1_.id as col_5_0_, storeinter0_.id as col_6_0_, max(storeinter0_.qty_request) as col_7_0_, sum(storeinter0_.qty_issued) as col_8_0_, storeinter0_.sr_no as col_9_0_, storeinter1_.demand_date as col_10_0_, storeinter1_.requested_by as col_11_0_ ,msb.BRAND_ID from store_internal_indent_t storeinter0_ inner join store_internal_indent_m storeinter1_ on storeinter0_.internal_id=storeinter1_.id inner join mas_store_item masstoreit2_ on storeinter0_.item_id=masstoreit2_.item_id inner join mas_store_item_conversion masstoreit3_ on masstoreit2_.item_conversion_id=masstoreit3_.item_conversion_id inner join mas_store_unit masstoreun4_ on masstoreit3_.purchase_unit_id=masstoreun4_.unit_id inner join mas_store_brand msb on storeinter0_.ITEM_ID=msb.ITEM_ID where storeinter1_.id='"+requestNo+"' and storeinter0_.qty_request>nvl(storeinter0_.qty_issued, '0') group by masstoreit2_.item_id , masstoreit2_.pvms_no , masstoreit2_.nomenclature , masstoreun4_.unit_name , storeinter1_.department_id , storeinter1_.id , storeinter0_.id , storeinter0_.sr_no , storeinter1_.demand_date , storeinter1_.requested_by,msb.BRAND_ID order by masstoreit2_.nomenclature";*/
			// this qry comment by javed khan for adding hospital_id
			// String query="select mas_store_item .item_id , mas_store_item .pvms_no , mas_store_item .nomenclature , mas_store_unit .unit_name , store_internal_indent_m .department_id , store_internal_indent_m .id , store_internal_indent_t.id , max(store_internal_indent_t.qty_request) , sum(store_internal_indent_t.qty_issued) , store_internal_indent_t.sr_no, store_internal_indent_m .demand_date , store_internal_indent_m .requested_by,mas_store_item.BRAND_ID,mas_store_item.BRANDED_GENERIC   from store_internal_indent_t store_internal_indent_t inner join store_internal_indent_m store_internal_indent_m  on store_internal_indent_t.internal_id=store_internal_indent_m .id inner join mas_store_item mas_store_item  on store_internal_indent_t.item_id=mas_store_item .item_id inner join mas_store_item_conversion mas_store_item_conversion  on mas_store_item .item_conversion_id=mas_store_item_conversion .item_conversion_id inner join mas_store_unit mas_store_unit  on mas_store_item_conversion .purchase_unit_id=mas_store_unit .unit_id  where store_internal_indent_m .id='"+requestNo+"' and store_internal_indent_t.qty_request>nvl(store_internal_indent_t.qty_issued, '0') group by mas_store_item .item_id , mas_store_item .pvms_no , mas_store_item .nomenclature , mas_store_unit .unit_name , store_internal_indent_m .department_id , store_internal_indent_m .id , store_internal_indent_t.id , store_internal_indent_t.sr_no , store_internal_indent_m .demand_date , store_internal_indent_m .requested_by,mas_store_item.BRAND_ID,mas_store_item.BRANDED_GENERIC  order by mas_store_item .nomenclature";
			String query="select mas_store_item .item_id , mas_store_item .pvms_no , mas_store_item .nomenclature , mas_store_unit .unit_name , store_internal_indent_m .department_id , store_internal_indent_m .id , store_internal_indent_t.id , max(store_internal_indent_t.qty_request) as req , sum(store_internal_indent_t.qty_issued) as iss , store_internal_indent_t.sr_no, store_internal_indent_m .demand_date , store_internal_indent_m .requested_by,mas_store_item.BRAND_ID,mas_store_item.BRANDED_GENERIC   from store_internal_indent_t store_internal_indent_t inner join store_internal_indent_m store_internal_indent_m  on store_internal_indent_t.internal_id=store_internal_indent_m .id inner join mas_store_item mas_store_item  on store_internal_indent_t.item_id=mas_store_item .item_id inner join mas_store_item_conversion mas_store_item_conversion  on mas_store_item .item_conversion_id=mas_store_item_conversion .item_conversion_id inner join mas_store_unit mas_store_unit  on mas_store_item_conversion .purchase_unit_id=mas_store_unit .unit_id  where store_internal_indent_m .id='"+requestNo+"' and store_internal_indent_t.qty_request>isnull(store_internal_indent_t.qty_issued, '0') and store_internal_indent_m.hospital_id = "
			+ hospitalId +" group by mas_store_item .item_id , mas_store_item .pvms_no , mas_store_item .nomenclature , mas_store_unit .unit_name , store_internal_indent_m .department_id , store_internal_indent_m .id , store_internal_indent_t.id , store_internal_indent_t.sr_no , store_internal_indent_m .demand_date , store_internal_indent_m .requested_by,mas_store_item.BRAND_ID,mas_store_item.BRANDED_GENERIC  order by mas_store_item .nomenclature";
			indentTList=(List)session.createSQLQuery(query).list();
			//indentTList = getHibernateTemplate().find(query);
			/*indentTList = getHibernateTemplate().find("select item_i.Id,item_i.PvmsNo,item_i.Nomenclature,pu_d.UnitName,siim_a.Department.Id,"+
		     "siim_a.Id,siit_b.Id,max(siit_b.QtyRequest),sum(siit_b.QtyIssued),siit_b.SrNo,siim_a.DemandDate,siim_a.RequestedBy.Id,ib.id" +
		     " from jkt.hms.masters.business.StoreInternalIndentT as siit_b join siit_b.Internal as siim_a " +
		     " join siit_b.Item as item_i join item_i.ItemConversion as ic_c join ic_c.PurchaseUnit as pu_d join item_i.Brand as ib where siim_a.Id="+ requestNo + "" +
		     " and siit_b.QtyRequest>nvl(siit_b.QtyIssued,'0') group by item_i.Id,item_i.PvmsNo,item_i.Nomenclature,pu_d.UnitName,siim_a.Department.Id,siim_a.Id,siit_b.Id,siit_b.SrNo,siim_a.DemandDate,siim_a.RequestedBy.Id,ib.id order by item_i.Nomenclature");
			 */
			int i=0;
			List<BigDecimal> stockAvailableList = new ArrayList<BigDecimal>();
			List stockList = new ArrayList();
			int requestByEmpId=0;
			String demandIndentDate="";
			int departmentId = 0;
			int deptIdBox=0;
			/***change by anand because their is issue department login department**/
			if(map.get("deptId") != null)
			{
				deptId=(Integer)map.get("deptId");
			}
			if(box.getInt("deptId") != 0)
			{
				deptIdBox=box.getInt("deptId");
			}
			// javed for batch by issue
			List<Object[]> BatchList = new ArrayList<Object[]>();
			Map mapbatch = new HashMap();
			for(int k=0; k<indentTList.size();k++){
				Object[] object=indentTList.get(k);
				// add hospital_id by javed khan
				Date date1 = new Date();
				// here issue date id today 
				//String query123="select sibs.BATCH_NO from store_item_batch_stock sibs where sibs.ITEM_ID="+object[0]+" and sibs.EXPIRY_DATE> '"+issueDate+"' and sibs.CLOSING_STOCK>0 and sibs.DEPARTMENT_ID="+deptIdBox+" and sibs.HOSPITAL_ID = "+hospitalId+" group by sibs.BATCH_NO, sibs.EXPIRY_DATE order by sibs.EXPIRY_DATE asc";
				
				String query123="select sibs.stock_id,sibs.BATCH_NO,sibs.BATCH_NO from store_item_batch_stock sibs "
						+ "where sibs.ITEM_ID="+object[0]+" and (sibs.EXPIRY_DATE> '"+issueDate+"' or sibs.EXPIRY_DATE is null) "
								+ " and sibs.CLOSING_STOCK>0 and sibs.DEPARTMENT_ID="+deptIdBox+" and"
										+ " sibs.HOSPITAL_ID = "+hospitalId+" order by sibs.EXPIRY_DATE asc";
				
				
				BatchList = session.createCriteria(StoreItemBatchStock.class)
						
						
						.createAlias("Item", "item").add(Restrictions.eq("item.Id", Integer.parseInt(object[0].toString())))
						.createAlias("Hospital", "hospital").add(Restrictions.eq("hospital.Id", hospitalId))
						.createAlias("Department", "dept").add(Restrictions.eq("dept.Id", deptIdBox))
						.add(Restrictions.gt("ClosingStock", new BigDecimal(0)))
						.add(Restrictions.or(Restrictions.gt("ExpiryDate", datestr), Restrictions.isNull("ExpiryDate")))						
						.setProjection(Projections.projectionList()
								.add(Projections.property("Id"))
								.add(Projections.property("BatchNo"))
								.add(Projections.property("ExpiryDate")))
								.list();
				
				//BatchList=session.createSQLQuery(query123).list();
				mapbatch.put(object[0],BatchList);
				System.out.println("BatchList="+BatchList.size());
			}
			for(Object[] obj : indentTList){
				BigDecimal stock = new BigDecimal(0);
				departmentId = Integer.parseInt(obj[4].toString());
				if(obj[11] !=null){
					requestByEmpId=Integer.parseInt(obj[11].toString());
				}
				demandIndentDate=HMSUtil.convertDateToStringTypeDateOnly((Date)obj[10]);
				// add hospital_id by javed khan
				String str3 = "select sum(a.closing_stock) " +"from store_item_batch_stock a,mas_store_item i  " +
				"where a.item_id=i.item_id and a.item_id = '"+ obj[0]+ "' and a.department_id='"+ deptIdBox+ "' and a.hospital_id='"
				 + hospitalId+ "' and (a.EXPIRY_DATE> '"+issueDate+"' or a.EXPIRY_DATE is null) group by a.item_id,i.pvms_no order by i.pvms_no";
				stockAvailableList = session.createSQLQuery(str3).list();
				if (stockAvailableList.size() > 0 && stockAvailableList.get(0) != null) {
					stock = (BigDecimal) stockAvailableList.get(0);
				} else {
					stock = new BigDecimal("0");
				}
				i++;
				stockList.add(stock);
			}
			// employeeList = session.createCriteria(MasEmployee.class).list();
			// add hospital_id by javed khan
			/*employeeList = getHibernateTemplate().find("from jkt.hms.masters.business.MasEmployee as me where me.Status='y' and  me.Hospital.Id= "
					+ hospitalId +" order by FirstName asc");*/
			departmentList = session.createCriteria(MasDepartment.class).add(Restrictions.eq("Status", "y")).addOrder(Order.asc("DepartmentName")).list();
			// javed khan for search CIV
			List storeIssueMList = new ArrayList();
			String searchQry="select sim.ID,sim.ISSUE_NO from Store_issue_m sim where sim.Department_id='"+deptIdBox+"'"
				+ " and sim.ISSUE_TYPE='i' and sim.Hospital_id ='"+hospitalId+"'"+" order by sim.Id desc ";  // add hospital_id by javed khan
			storeIssueMList=(List) session.createSQLQuery(searchQry).list();
			storeIssueMList=(List) session.createSQLQuery(searchQry).list();
			// javed khan for loan out
			List<StoreLoanoutExpendT> loanoutTList = new ArrayList<StoreLoanoutExpendT>();
			loanoutTList=session.createCriteria(StoreLoanoutExpendT.class).
			createAlias("IssueM", "storeloanoutM").add(Restrictions.eq("storeloanoutM.Status","l"))
			.add(Restrictions.eq("storeloanoutM.Hospital.Id",hospitalId)).list(); // add hospital_id by javed khan
			map.put("loanoutTList", loanoutTList);
			map.put("storeIssueMList", storeIssueMList);
			map.put("mapbatch",mapbatch);
			map.put("employeeList",employeeList);
			map.put("departmentList", departmentList);
			map.put("stockList",stockList);
			map.put("indentTList", indentTList);
			map.put("requestByEmpId",requestByEmpId);
			map.put("requestNoForAcc", requestNo);
			map.put("demandIndentDate", demandIndentDate);
		} catch (DataAccessResourceFailureException e) {
			e.printStackTrace();
		}
		
		for(Object[] obj : indentTList){
			
			
		}
		return map;
	}
	
	

	public Map<String, Object> getStockDetailsForDepartment(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		int ItemId = box.getInt("ItemId");
		String nomen = box.getString("nomenclature");
		String pvmsNo = box.getString("pvmsNiv");
		
		if(nomen !="")
		{
			int begin= nomen.lastIndexOf("(");
			int end= nomen.lastIndexOf(")");
					String n= nomen.substring(begin+1, end);
					System.out.println("n="+n);
					pvmsNo=n;
		}
		
				
				
		int pageNo =1;
		int pagingSize = 10;
				
		if (box.getString("PN") != null)
			pageNo = Integer.parseInt(box.getString("PN"));		
		
	
		
	

		int deptId=0;
		List<Object[]> stockList = new ArrayList<Object[]>();	
		
			Session session = getSession();
			String qry="";
			if(pvmsNo !="")
			{
			     qry="SELECT * FROM (select item_id,closing_stock,department_id from store_item_batch_stock where department_id !=0 and hospital_id=1  ) stbs PIVOT ( sum(closing_stock) FOR stbs.department_id IN ([24],[35],[135]))  p left outer join mas_store_item msi on msi.item_id=p.item_id left outer join Mas_Store_Unit msu on msu.unit_id=msi.item_conversion_id where msi.pvms_no='"+pvmsNo+"'";
			}
			else
			{
				qry="SELECT * FROM (select item_id,closing_stock,department_id from store_item_batch_stock where department_id !=0 and hospital_id=1  ) stbs PIVOT ( sum(closing_stock) FOR stbs.department_id IN ([24],[35],[135]))  p left outer join mas_store_item msi on msi.item_id=p.item_id left outer join Mas_Store_Unit msu on msu.unit_id=msi.item_conversion_id ";
			}
			
			

					
					Query queryHiber = session.createSQLQuery(qry);
					/*if (pvmsNo !="") {
						queryHiber =queryHiber.setParameter("msi.pvms_no", pvmsNo);
					}*/
					
					
					int totalRecords = queryHiber.list().size();
					queryHiber.setFirstResult(pagingSize * (pageNo - 1));
					queryHiber.setMaxResults(pagingSize);
					
					stockList=queryHiber.list();
					
					map.put("stockList", stockList);
					map.put("totalRecords", totalRecords);
					
					System.out.println("stockList="+stockList.size());
					System.out.println("totalRecords="+totalRecords);
			
		return map;
	}
	
	
	
	public Map<String, Object> getMedicineIssueAndReceiveDetails(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		int ItemId = box.getInt("ItemId");
		String nomen = box.getString("nomenclature");
		String pvmsNo = box.getString("pvmsNiv");
		List<StoreIssueT> issueList = new ArrayList<StoreIssueT>();
		
		if(nomen !="")
		{
			int begin= nomen.lastIndexOf("(");
			int end= nomen.lastIndexOf(")");
					String n= nomen.substring(begin+1, end);
					System.out.println("n="+n);
					pvmsNo=n;
		}
		
				
				
		int pageNo =1;
		int pagingSize = 10;
				
		if (box.getString("PN") != null)
			pageNo = Integer.parseInt(box.getString("PN"));		
		
	  int deptId = box.getInt("deptId");

	  int hospitalId = box.getInt("hospitalId");
	
	  Session session = getSession();
		
		Criteria cr = session.createCriteria(StoreIssueT.class)
				.createAlias("IssueM", "header")
				.add(Restrictions.eq("header.Hospital.Id", hospitalId))
				.add(Restrictions.eq("header.Department.Id", deptId));
		
		if(pvmsNo !="")
		{
			
			cr=cr.createAlias("Item", "item").add(Restrictions.eq("item.PvmsNo", pvmsNo));
		}
	
		
		
		List totalMatches = cr.list();
		System.out.println("totalMatches="+totalMatches.size());
		cr = cr.setFirstResult(pagingSize * (pageNo - 1));
		cr = cr.setMaxResults(pagingSize);
		issueList = cr.list();
		int totalRecords = totalMatches.size();
					
					map.put("issueList", issueList);
					map.put("totalRecords", totalRecords);
					
					
			
		return map;
	}
	
	
	
	
	
	
	
}

