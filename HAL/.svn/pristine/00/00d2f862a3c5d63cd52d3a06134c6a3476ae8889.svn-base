<?xml version="1.0" encoding="ISO-8859-1"?>
<web-app version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">

	<display-name>Medical And Health Unit Application HAL</display-name>


	<description>HAL Hospital Management Information System Application</description>

	<!--
		Key of the system property that should specify the root directory of
		this web app. Applied by WebAppRootListener or Log4jConfigListener.
	-->
	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>hms.root</param-value>
	</context-param>

	<!--
		Location of the Log4J config file, for initialization and refresh
		checks. Applied by Log4jConfigListener.
	-->
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>/WEB-INF/log4j.properties</param-value>
	</context-param>
	<context-param>
		<param-name>defaultHtmlEscape</param-name>
		<param-value>true</param-value>
	</context-param>
	<!--
		- Configures Log4J for this web app. - As this context specifies a
		context-param "log4jConfigLocation", its file path - is used to load
		the Log4J configuration, including periodic refresh checks. - - Would
		fall back to default Log4J initialization (non-refreshing) if no
		special - context-params are given. - - Exports a "web app root key",
		i.e. a system property that specifies the root - directory of this web
		app, for usage in log file paths. - This web app specifies
		"petclinic.root" (see log4j.properties file).
	-->
	<!-- Leave the listener commented-out if using JBoss -->

	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>
	<listener>
		<listener-class>jkt.hms.util.SessionListenerClass</listener-class>
	</listener>
	<!--
		- Servlet that dispatches request to registered handlers (Controller
		implementations). - Has its own application context, by default
		defined in "{servlet-name}-servlet.xml", - i.e.
		"petclinic-servlet.xml". - - A web app can contain any number of such
		servlets. - Note that this web app has a shared root application
		context, serving as parent - of all DispatcherServlet contexts.
	-->
	<servlet>
		<servlet-name>hms</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<load-on-startup>2</load-on-startup>
	</servlet>

	<!--
		- Maps the petclinic dispatcher to "*.do". All handler mappings in -
		petclinic-servlet.xml will by default be applied to this subpath. - If
		a mapping isn't a /* subpath, the handler mappings are considered -
		relative to the web app root. - - NOTE: A single dispatcher can be
		mapped to multiple paths, like any servlet.
	-->
	<servlet-mapping>
		<servlet-name>hms</servlet-name>
		<url-pattern>/hms/*</url-pattern>
	</servlet-mapping>
	<!--<resource-ref>
	  <res-ref-name>jdbc/XE</res-ref-name>
	  <res-type>javax.sql.DataSource</res-type>
	  <res-auth>Container</res-auth>
	  <res-sharing-scope>Shareable</res-sharing-scope>
	</resource-ref>-->
	<session-config>
		<session-timeout>20</session-timeout>
	</session-config>

	<welcome-file-list>
		<!-- Redirects to login for dispatcher handling -->
		
		 <!-- <welcome-file>/jsp/framesetjsp.jsp</welcome-file> -->
	
		<welcome-file>/jsp/loginPage.jsp</welcome-file>
	
</welcome-file-list>

	
	<error-page>
		<exception-type>java.lang.Exception</exception-type>
		<!-- Displays a stack trace -->
		<location>/jsp/error.jsp</location>
	</error-page>
	<error-page>
		<error-code>500</error-code>
		<!-- Displays a stack trace -->
		<location>/jsp/error.jsp</location>
	</error-page>

	  <filter>
        <filter-name>loadSalt</filter-name>
        <filter-class>ICD.LoadSalt</filter-class>
    </filter>
    
    <filter-mapping>
        <filter-name>loadSalt</filter-name>
        <url-pattern>*</url-pattern>
    </filter-mapping> 
	
</web-app>
