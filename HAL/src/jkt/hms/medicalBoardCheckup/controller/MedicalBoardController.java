package jkt.hms.medicalBoardCheckup.controller;

import static jkt.hms.util.RequestConstants.*;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import javazoom.upload.MultipartFormDataRequest;
import javazoom.upload.UploadException;
import jkt.hms.lab.handler.LabHandlerService;
import jkt.hms.masters.business.Category;
import jkt.hms.masters.business.Disability;
import jkt.hms.masters.business.MasCommand;
import jkt.hms.masters.business.MasDepartment;
import jkt.hms.masters.business.MasEmployee;
import jkt.hms.masters.business.MasHospital;
import jkt.hms.masters.business.MasIcd;
import jkt.hms.masters.business.MasMaritalStatus;
import jkt.hms.masters.business.MasMedicalBoardExaminationDetail;
import jkt.hms.masters.business.MasMedicalExaminationDetail;
import jkt.hms.masters.business.MasMedicalExaminationReportOnEntry;
import jkt.hms.masters.business.MasMedicalUploadDocument;
import jkt.hms.masters.business.MasRank;
import jkt.hms.masters.business.MasServiceType;
import jkt.hms.masters.business.MasSystemDiagnosis;
import jkt.hms.masters.business.MasTrade;
import jkt.hms.masters.business.MasUnit;
import jkt.hms.masters.business.MbTypeOfEntryMaster;
import jkt.hms.masters.business.Patient;
import jkt.hms.masters.business.Users;
import jkt.hms.masters.business.Visit;
import jkt.hms.medicalBoardCheckup.handler.MedicalBoardHandlerService;
import jkt.hms.medicalExam.handler.MedicalExamHandlerService;
import jkt.hms.opd.handler.OPDHandlerService;
import jkt.hms.util.Box;
import jkt.hms.util.HMSUtil;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;

import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.Format;
import org.jdom.output.XMLOutputter;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.multiaction.MultiActionController;

public class MedicalBoardController extends MultiActionController {

	MedicalBoardHandlerService medicalBoardHandlerService = null;
	MedicalExamHandlerService medicalExamHandlerService = null;
	LabHandlerService labHandlerService = null;
	OPDHandlerService opdHandlerService = null;

	public MedicalExamHandlerService getMedicalExamHandlerService() {
		return medicalExamHandlerService;
	}

	public void setMedicalExamHandlerService(
			MedicalExamHandlerService medicalExamHandlerService) {
		this.medicalExamHandlerService = medicalExamHandlerService;
	}

	String title = "";
String userName = "";

public MedicalBoardHandlerService getMedicalBoardHandlerService() {
	return medicalBoardHandlerService;
}

public void setMedicalBoardHandlerService(
		MedicalBoardHandlerService medicalBoardHandlerService) {
	this.medicalBoardHandlerService = medicalBoardHandlerService;
}

public ModelAndView showMedicalBoardWaitingList(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	HttpSession session = request.getSession();
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	//map = medicalBoardHandlerService.showMedicalExamWaitingList(hospitalId);
	String jsp = "";
	//jsp = "medicalBoardWaitingList.jsp";
	jsp = "medicalBoardWaitingList_new.jsp";
	map.put("contentJsp", jsp);
	return new ModelAndView("index", "map", map);
}

public ModelAndView updateMedicalExamEntry(HttpServletRequest req,
		HttpServletResponse res) {
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	String serviceNo = "";
	String serviceiaf = "";
	String age = "";
	String typeOfCommunication = "";
	Date dateofcommun = null;
	String totalservice = "";
	String pastmedicalhistory = "";
	String presentmedicalhistory = "";
	String idealweight = "";
	String overweight = "";
	String waist = "";
	String chestfullexpansion = "";
	String bhi = "";
	String rangeofexpansion = "";
	String bodyfat = "";
	String signfoldthickness = "";
	String sportman = "";
	String actualweight = "";
	String lastame = "";
	Date entryDate = null;
	Date medicinExamDate = null;
	String lastChangedBy = "";
	String lastChangedTime = "";
	Date lastChangedDate = null;
	Date surgeyDate = null;
	int typeOfEntry = 0;
	String betchNo = "";
	String chestNo = "";
	String rollNo = "";
	int medicalExamHeld = 0;
	String medicalStatus = "";
	String fullName = "";
	Date dateOfBirth = null;
	int maritialStatus = 0;
	String service = "";
	String pNo = "";
	// String rank = "";
	String hoursOfFlown = "";
	String permanentAddress = "";
	String identification1 = "";
	String identification2 = "";
	String armsCrops = "";
	Date dateOfReporting = null;
	Date dateOfCompletion = null;
	Date documentForwardDate = null;
	String documentForwardTo = "";
	String fromWhereHeReport = "";
	String hypertension = "";
	String heartDisease = "";
	String diabetes = "";
	String bleedingDisorder = "";
	String mentalDisease = "";
	String nightBlindness = "";

	String asthama = "";
	String dischargeFrom = "";
	String plesury = "";
	String earDieses = "";
	String rheumatism = "";
	String frequentCough = "";
	String chronicIndigestion = "";
	String nervousBrakdown = "";
	String kidenyBladder = "";
	String fitsFaintinngAttacks = "";
	String std = "";
	String serveHeadInjury = "";
	String joundice = "";
	String sickness = "";
	String breastDisease = "";
	String trachoma = "";
	String amenorrhoea = "";
	String nightbindness = "";
	String menirrhagia = "";
	String laserTeartement = "";
	String pregnancy = "";
	String abortion = "";
	String eyeDisease = "";
	String rejectedAsUnfit = "";
	String dischargeMedicallyUnfit = "";
	String adimmitedInHospitalFirIllness = "";
	String stateNature = "";
	String otherInform = "";
	BigDecimal height = new BigDecimal(0);
	BigDecimal weight = new BigDecimal(0);
	BigDecimal acceptableKg = new BigDecimal(0);
	BigDecimal leglength = new BigDecimal(0);
	String appereance = "";
	String albumin = "";
	String sugar = "";
	String spGraviry = "";
	String hbPercentage = "";
	String physique = "";
	String anyOtherInv = "";
	String skin = "";
	String abdomen = "";
	String heartSize = "";
	String sound = "";
	String rhythm = "";
	String arterialWalls = "";
	String pulseRates = "";
	String bp = "";
	String fullExpension = "";
	String rangeOfExpension = "";
	String selfBalR = "";
	String selfBalL = "";
	String speechMental = "";
	String endocrinCond = "";
	String otherAbnormalities = "";
	String medicinRemarks = "";
	String finger = "";
	String hand = "";
	String wrist = "";
	String elbows = "";
	String shoulderGridles = "";
	String cercival = "";
	String dorsalVertebrate = "";
	String hullux = "";
	String valgus = "";
	String riggus = "";
	String flatFeet = "";
	String joints = "";
	String pelvis = "";
	String gail = "";
	String lumberScaler = "";
	String roccyxVericose = "";
	String hydrocele = "";
	String varicocele = "";
	String underScende = "";
	String hemonhoids = "";
	String herinaMusic = "";
	String breasts = "";
	String surgeryRemarks = "";
	String respatorySystem = "";

	String withGlassesDistantR = "";
	String withglassesDistantL = "";
	String withGlassesNearR = "";
	String withGlassesNearL = "";
	String withGlassesNearCP = "";
	String withoutGlassesDistantR = "";
	String withoutGlassesDistantL = "";
	String withoutGlassesNearR = "";
	String withoutGlassesNearL = "";
	String withoutGlassesNearCP = "";
	BigDecimal convergenceCP = new BigDecimal(0);

	BigDecimal convergenceC = new BigDecimal(0);
	String accommodationR = "";
	String accommodationL = "";
	String eyeRemarks = "";
	Date eyeDate = null;
	BigDecimal hearingRFW = new BigDecimal(0);
	BigDecimal hearingLFW = new BigDecimal(0);
	BigDecimal hearingBothFW = new BigDecimal(0);
	BigDecimal hearingRCV = new BigDecimal(0);
	BigDecimal hearingLCV = new BigDecimal(0);
	BigDecimal hearingBothCV = new BigDecimal(0);

	String innerEarR = "";
	String innerEarL = "";
	String audiometryRecord = "";
	String nose = "";
	String throatEar = "";
	String earReamrks = "";
	Date earDate = null;
	String externalEarR = "";
	String externalEarL = "";
	String middleEarR = "";
	String middleEarL = "";
	String evidienceOfTrachoma = "";
	String binocular = "";
	String manifestHypermetropia = "";
	String coverTest = "";
	String diaphragmTest = "";
	String fundMedia = "";
	String fields = "";
	String nightVisualCapacity = "";

	String dentalRemarks = "";
	String dentalReferToMH = "";
	Date dentalDate = null;
	String menstrualHistory = "";
	int noOfPregnancy = 0;
	int noOfAbortion = 0;
	int noOfChildren = 0;
	Date lastCondinement = null;
	String vaginalDischarge = "";
	String prolapse = "";
	String usgAbortion = "";
	String gyanaecologyRemarks = "";
	Date gyanaecologyDate = null;
	String medicalBoardExamination = "";
	int medicalBoardExaminationPlace = 0;
	Date medicalBoardExaminationDate = new Date();
	String subsequentMedicalBoardExam = "";
	int subsequentMedicalBoardExamPlace = 0;
	Date subsequentMedicalBoardExamDate = null;
	String ApprovingAuthority = "";
	int ApprovingAuthorityPlace = 0;
	Date ApprovingAuthorityDate = null;
	String lmp = "";
	String totalTeeth = "";
	String totalDefectiveTeeth = "";
	String missingTeeth = "";
	String DenstalPoint = "";
	String unserviceableTeeth = "";

	String dur8 = "", dur7 = "", dur6 = "";
	String dur5 = "";
	String dur4 = "";
	String dur3 = "";
	String dur2 = "";
	String dur1 = "";
	String dul8 = "";
	String dul7 = "";
	String dul6 = "";
	String dul5 = "";
	String dul4 = "";
	String dul3 = "";
	String dul2 = "";
	String dul1 = "";
	String dlr8 = "";
	String dlr7 = "";
	String dlr6 = "";
	String dlr5 = "";
	String dlr4 = "";
	String dlr3 = "";
	String dlr2 = "";
	String dlr1 = "";
	String dll8 = "";
	String dll7 = "";
	String dll6 = "";
	String dll5 = "";
	String dll4 = "";
	String dll3 = "";
	String dll2 = "";
	String dll1 = "";
	String mur8 = "";
	String mur7 = "";
	String mur6 = "";
	String mur5 = "";
	String mur4 = "";
	String mur3 = "";
	String mur2 = "";
	String mur1 = "";
	String mul8 = "";
	String mul7 = "";
	String mul6 = "";
	String mul5 = "";
	String mul4 = "";
	String mul3 = "";
	String mul2 = "";
	String mul1 = "";
	String mlr8 = "";
	String mlr7 = "";
	String mlr6 = "";
	String mlr5 = "";
	String mlr4 = "";
	String mlr3 = "";
	String mlr2 = "";
	String mlr1 = "";
	String mll8 = "";
	String mll7 = "";
	String mll6 = "";
	String mll5 = "";
	String mll4 = "";
	String mll3 = "";
	String mll2 = "";
	String mll1 = "";
	String uur8 = "";
	String uur7 = "";
	String uur6 = "";
	String uur5 = "";
	String uur4 = "";
	String uur3 = "";
	String uur2 = "";
	String uur1 = "";
	String uul8 = "";
	String uul7 = "";
	String uul6 = "";
	String uul5 = "";
	String uul4 = "";
	String uul3 = "";
	String uul2 = "";
	String uul1 = "";
	String ulr8 = "";
	String ulr7 = "";
	String ulr6 = "";
	String ulr5 = "";
	String ulr4 = "";
	String ulr3 = "";
	String ulr2 = "";
	String ulr1 = "";
	String ull8 = "";
	String ull7 = "";
	String ull6 = "";
	String ull5 = "";
	String ull4 = "";
	String ull3 = "";
	String ull2 = "";
	String ull1 = "";

	String sur8 = "";
	String sur7 = "";
	String sur6 = "";
	String sur5 = "";
	String sur4 = "";
	String sur3 = "";
	String sur2 = "";
	String sur1 = "";
	String sul8 = "";
	String sul7 = "";
	String sul6 = "";
	String sul5 = "";
	String sul4 = "";
	String sul3 = "";
	String sul2 = "";
	String sul1 = "";

	String slr8 = "";
	String slr7 = "";
	String slr6 = "";
	String slr5 = "";
	String slr4 = "";
	String slr3 = "";
	String slr2 = "";
	String slr1 = "";
	String sll8 = "";
	String sll7 = "";
	String sll6 = "";
	String sll5 = "";
	String sll4 = "";
	String sll3 = "";
	String sll2 = "";
	String sll1 = "";
	HttpSession session = req.getSession();
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	int userId = 0;
	Users user = (Users) session.getAttribute("users");
	userId = user.getId();
	int commandId = (Integer) session.getAttribute("commandId");
	Map<String, Object> map = new HashMap<String, Object>();
	int medExamId = 0;
	String message = "";
	String jsp = "";
	int visitId = 0;
	String ControllerUrl = "";
	int visitNumberForReport = 0;
	List<String> investigationReferToMHList = new ArrayList<String>();

	if (req.getParameter("medExamId") != null
			&& (Integer.parseInt(req.getParameter("medExamId")) != 0)) {
		medExamId = Integer.parseInt(req.getParameter("medExamId"));
		MasMedicalExaminationReportOnEntry masMedicalBoardProceedings = new MasMedicalExaminationReportOnEntry();
		masMedicalBoardProceedings = medicalBoardHandlerService
				.loadMedicalExamObj(medExamId);
		Map<String, Object> generalMap = new HashMap<String, Object>();
		List<MasMedicalBoardExaminationDetail> masMedicalBoardDetails = new ArrayList<MasMedicalBoardExaminationDetail>();

		if (req.getParameter(SERVICE_NO) != null) {
			serviceNo = req.getParameter(SERVICE_NO);
		}
		if (req.getParameter(AGE) != null) {
			age = req.getParameter(AGE);
		}
		if (req.getParameter(TOTAL_SERVICE) != null) {
			totalservice = req.getParameter(TOTAL_SERVICE);
		}
		if (req.getParameter("serviceiaf") != null) {
			serviceiaf = req.getParameter("serviceiaf");
		}

		if (req.getParameter("typeOfCommunication") != null) {
			typeOfCommunication = req.getParameter("typeOfCommunication");
		}
		if (req.getParameter(DATE_COMMENCEMENT) != null) {
			dateofcommun = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(DATE_COMMENCEMENT));
		}
		if (req.getParameter(PAST_MEDICAL_HISTORY) != null) {
			pastmedicalhistory = req.getParameter(PAST_MEDICAL_HISTORY);
		}
		if (req.getParameter(PRESENT_MEDICAL_CATEGORY) != null) {
			presentmedicalhistory = req
					.getParameter(PRESENT_MEDICAL_CATEGORY);
		}
		//---Addd By dipali as discussed with Anshu (06-mar-2013)
		String finalMedCat ="";
		if (req.getParameter("medCatPeriod") != null  && !req.getParameter("medCatPeriod").equals("")) {
			if (req.getParameter("medCatDuration") != null) {
				String medCatDuration = req.getParameter("medCatDuration");
				 finalMedCat = req.getParameter("medCatPeriod").concat(" ").concat(medCatDuration);
			}
		}
		String shapeFactor="";
		if (req.getParameter("shapeFactor") != null  && !req.getParameter("shapeFactor").equals("")) {
			shapeFactor=req.getParameter("shapeFactor");
		}
		
		String finalMedCatPeriod ="";
		if (req.getParameter("medCatPeriodRec") != null  && !req.getParameter("medCatPeriodRec").equals("")) {
				String medCatDurationRec = req.getParameter("medCatDurationRec");
				finalMedCatPeriod = req.getParameter("medCatPeriodRec").concat(" ").concat(medCatDurationRec);
		}
		String shapeFactorRec="";
		if (req.getParameter("shapeFactorRec") != null  && !req.getParameter("shapeFactorRec").equals("")) {
			shapeFactorRec=req.getParameter("shapeFactorRec");
		}
		if (req.getParameter(LAST_AME) != null) {
			lastame = req.getParameter(LAST_AME);
		}
		/*
		 * if (req.getParameter(HEIGHT_WITHOUT_SHOOSE) != null ) { height =
		 * req.getParameter(HEIGHT_WITHOUT_SHOOSE); }
		 */
		if (req.getParameter(ACTUAL_WEIGHT) != null) {
			actualweight = req.getParameter(ACTUAL_WEIGHT);
		}
		if (req.getParameter(IDEAL_WEIGHT) != null) {
			idealweight = req.getParameter(IDEAL_WEIGHT);
			System.out.println(idealweight+"---idealweight");
		}
		System.out.println(idealweight+"idealweight");
		if (req.getParameter(OVER_WEIGHT) != null) {
			overweight = req.getParameter(OVER_WEIGHT);
		}
		if (req.getParameter(WAIST) != null) {
			waist = req.getParameter(WAIST);
		}
		if (req.getParameter(CHEST_FULL) != null) {
			chestfullexpansion = req.getParameter(CHEST_FULL);
		}
		if (req.getParameter(RANGE_EXPANSION) != null) {
			rangeofexpansion = req.getParameter(RANGE_EXPANSION);
		}
		if (req.getParameter(BHI) != null) {
			bhi = req.getParameter(BHI);
		}
		if (req.getParameter(BODY_FAT) != null) {
			bodyfat = req.getParameter(BODY_FAT);
		}
		if (req.getParameter(THICKNESS) != null) {
			signfoldthickness = req.getParameter(THICKNESS);
		}
		if (req.getParameter(SPORTS) != null) {
			sportman = req.getParameter(SPORTS);
		}
		int deptId = 0;
		int empId = 0;
		int hinId = 0;
		if (req.getParameter("deptId") != null) {
			deptId = Integer.parseInt(req.getParameter("deptId"));
		}
		if (req.getParameter("empId") != null) {
			empId = Integer.parseInt(req.getParameter("empId"));
		}
		if (req.getParameter("hinId") != null) {
			hinId = Integer.parseInt(req.getParameter("hinId"));
		}
		if (req.getParameter("visitId") != null) {
			visitId = Integer.parseInt(req.getParameter("visitId"));
		}
		List<String> chargeCodeIdList = new ArrayList<String>();
		List<Integer> quantityList = new ArrayList<Integer>();

		List<Integer> patientInvestigationdetailsIdList = new ArrayList<Integer>();
		int patientInvestigationHeaderId = 0;
		if (req.getParameter("patientInvestigationHeaderId") != null
				&& !req.getParameter("patientInvestigationHeaderId")
						.equals("")) {
			patientInvestigationHeaderId = Integer.parseInt(req
					.getParameter("patientInvestigationHeaderId"));
		}
		int dgOrderhdId = 0;
		if (req.getParameter("dgOrderhdId") != null
				&& !req.getParameter("dgOrderhdId").equals("")) {
			dgOrderhdId = Integer.parseInt(req.getParameter("dgOrderhdId"));
		}
		List<String> investResultList = new ArrayList<String>();
		String clinicalNotes1 = "";
		if (req.getParameter("clinicalNotes1") != null
				&& !(req.getParameter("clinicalNotes1").equals(""))) {
			clinicalNotes1 = req.getParameter("clinicalNotes1");
		}
		String refferToMhForInv = "";
		if (req.getParameter("refferToMhForInv") != null
				&& !(req.getParameter("refferToMhForInv").equals(""))) {
			refferToMhForInv = req.getParameter("refferToMhForInv");
		}
		int hiddenValue = 1;
		String data = null;
		if (req.getParameter("data") != null
				&& !req.getParameter("data").equals("")) {
			data = (String) req.getParameter("data");
		}
		if (req.getParameter("hiddenValue") != null
				&& Integer.parseInt(req.getParameter("hiddenValue")) != 1) {
			hiddenValue = Integer.parseInt(req.getParameter("hiddenValue"));
		}
		System.out.println("data="+data);
		System.out.println("hiddenValue="+hiddenValue);
		
		String deleatedorderid = "";
		if (req.getParameter("deleatedorderid") != "") {
			deleatedorderid = req.getParameter("deleatedorderid");
		}
		mapForDS.put("deleatedorderid", deleatedorderid);
		String deleatedValue = "";
		if (req.getParameter("deleatedValue") != null
				&& req.getParameter("deleatedValue") != "") {
			deleatedValue = req.getParameter("deleatedValue");
		}
		mapForDS.put("deleatedValue", deleatedValue);
		// ------------------------------------------------------------------------------------------------
		String dlc = "", hb = "", tlc = "", esr = "", spGravity = "", albumen = "", sugarR = "";
		String sugarF = "", sugarPP = "", urea = "", uricAcid = "", srCreatine = "", cholesterol = "";
		String triglycerids = "", hdl = "", vldl = "";
		int temp = 1;
		List<Integer> dgOrderdtIdList = new ArrayList<Integer>();
		String[] chargeCodeIdArr = new String[hiddenValue];

		for (int i = 0; i < hiddenValue; i++) {
			if (req.getParameter("chargeCodeName" + temp) != null
					&& !req.getParameter("chargeCodeName" + temp)
							.equals("")) {
				String chargeCodeNameWithId = req
						.getParameter("chargeCodeName" + temp);
				int index1 = chargeCodeNameWithId.lastIndexOf("[");
				int index2 = chargeCodeNameWithId.lastIndexOf("]");
				index1++;
				String chargeCodeName = chargeCodeNameWithId.substring(0,
						(index1 - 1));
				String chargeCodeId = chargeCodeNameWithId.substring(
						index1, index2);
				System.out.println("chargeCodeId="+chargeCodeId);
				// patientInvestigationdetailsIdList
				if (!chargeCodeId.equals("")) {
					chargeCodeIdArr[i] = chargeCodeId;
					int qty = 1;
					// if (req.getParameter("investigationReferToMH" + temp)
					// != null && !req.getParameter("investigationReferToMH"
					// + temp).equals(""))
					if (req.getParameter("investigationReferToMH" + temp) != null) {
						investigationReferToMHList.add("y");
					} else {
						investigationReferToMHList.add("n");
					}
					//if (data != null) { // commented by vinay
					if (true) {
						String resultVal = "";
						if (req.getParameter("Result" + temp) != null && !req.getParameter("Result" + temp).equals("")) 
						{
							investResultList.add(req.getParameter("Result"+ temp));
							resultVal = req.getParameter("Result" + temp);
						} else {
							investResultList.add(" ");
							resultVal = " ";
						}
						if (chargeCodeName.equalsIgnoreCase("dlc")) {
							dlc = resultVal;
						} else if (chargeCodeName.equalsIgnoreCase("Hb")) {
							hb = resultVal;
						} else if (chargeCodeName.equalsIgnoreCase("tlc")) {
							tlc = resultVal;
						} else if (chargeCodeName.equalsIgnoreCase("esr")) {
							esr = resultVal;
						} else if (chargeCodeName
								.equalsIgnoreCase("Gravity")) {
							spGravity = resultVal;
						} else if (chargeCodeName
								.equalsIgnoreCase("ALBUMIN")) {
							albumen = resultVal;
						} else if (chargeCodeName
								.equalsIgnoreCase("SUGAR R")) {
							sugarR = resultVal;
						} else if (chargeCodeName
								.equalsIgnoreCase("SUGAR F")) {
							sugarF = resultVal;
						} else if (chargeCodeName
								.equalsIgnoreCase("SUGAR PP")) {
							sugarPP = resultVal;
						} else if (chargeCodeName.equalsIgnoreCase("Urea")) {
							urea = resultVal;
						} else if (chargeCodeName
								.equalsIgnoreCase("URIC ACID")) {
							uricAcid = resultVal;
						} else if (chargeCodeName
								.equalsIgnoreCase("CREATININE")) {
							srCreatine = resultVal;
						} else if (chargeCodeName
								.equalsIgnoreCase("CHOLESTEROL")) {
							cholesterol = resultVal;
						} else if (chargeCodeName
								.equalsIgnoreCase("TRIGLYCERIDE")) {
							triglycerids = resultVal;
						} else if (chargeCodeName.equalsIgnoreCase("HDL")) {
							hdl = resultVal;
						} else if (chargeCodeName.equalsIgnoreCase("VLDL")) {
							vldl = resultVal;
						}
					}
					chargeCodeIdList.add(chargeCodeIdArr[i]);
					quantityList.add(qty);
					// clinicalList.add(clinicalNotes);
				}
			}
			/*
			 * if (req.getParameter("patientInvestigationdetailsId" + i) !=
			 * null && !req.getParameter("patientInvestigationdetailsId" +
			 * i).equals("")) {
			 * patientInvestigationdetailsIdList.add(Integer
			 * .parseInt(req.getParameter("patientInvestigationdetailsId" +
			 * i))); } if (req.getParameter("dgOrderdtId" + i) != null &&
			 * !req.getParameter("dgOrderdtId" + i).equals("")) {
			 * dgOrderdtIdList
			 * .add(Integer.parseInt(req.getParameter("dgOrderdtId" + i)));
			 * }
			 */
			if (req.getParameter("patientInvestigationdetailsId" + temp) != null
					&& !req.getParameter(
							"patientInvestigationdetailsId" + temp).equals(
							"")) {
				patientInvestigationdetailsIdList.add(Integer.parseInt(req
						.getParameter("patientInvestigationdetailsId"
								+ temp)));
			} else {
				patientInvestigationdetailsIdList.add(new Integer(0));
			}
			if (req.getParameter("dgOrderdtId" + temp) != null
					&& !req.getParameter("dgOrderdtId" + temp).equals("")) {
				dgOrderdtIdList.add(Integer.parseInt(req
						.getParameter("dgOrderdtId" + temp)));
			} else {
				dgOrderdtIdList.add(new Integer(0));
			}
			temp++;

		}

		if (req.getParameter(ENTRY_OF_DATE) != null
				&& !(req.getParameter(ENTRY_OF_DATE).equals(""))) {
			entryDate = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(ENTRY_OF_DATE));
		}
		if (req.getParameter(TYPE_OF_ENTRY) != null
				&& !(req.getParameter(TYPE_OF_ENTRY).equals(""))) {
			typeOfEntry = Integer.parseInt(req.getParameter(TYPE_OF_ENTRY));
		}
		if (req.getParameter(BATCH1_NO) != null
				&& !(req.getParameter(BATCH1_NO).equals(""))) {
			betchNo = req.getParameter(BATCH1_NO);
		}
		if (req.getParameter(CHEST_NO) != null
				&& !(req.getParameter(CHEST_NO).equals(""))) {
			chestNo = req.getParameter(CHEST_NO);
		}

		if (req.getParameter(ROLL_NO) != null
				&& !(req.getParameter(ROLL_NO).equals(""))) {
			rollNo = req.getParameter(ROLL_NO);
		}

		if (req.getParameter(MEDICAL_EXAM_HELD_AT) != null) {
			medicalExamHeld = Integer.parseInt(req
					.getParameter(MEDICAL_EXAM_HELD_AT));
		}

		if (req.getParameter(MEDICAL_STATUS) != null
				&& !(req.getParameter(MEDICAL_STATUS).equals(""))) {
			medicalStatus = req.getParameter(MEDICAL_STATUS);
		}
		if (req.getParameter(FULL_NAME) != null
				&& !(req.getParameter(FULL_NAME).equals(""))) {
			fullName = req.getParameter(FULL_NAME);
		}

		if (req.getParameter(DATE_OF_BIRTH) != null
				&& !(req.getParameter(DATE_OF_BIRTH).equals("")))

		{
			dateOfBirth = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(DATE_OF_BIRTH));
		}

		if (req.getParameter(MARITIAL_STATUS) != null
				&& !(req.getParameter(MARITIAL_STATUS).equals(""))) {
			maritialStatus = Integer.parseInt(req
					.getParameter(MARITIAL_STATUS));
		}

		if (req.getParameter(SERVICE) != null
				&& !(req.getParameter(SERVICE).equals(""))) {
			service = req.getParameter(SERVICE);
		}

		if (req.getParameter(P_NO) != null
				&& !(req.getParameter(P_NO).equals(""))) {
			pNo = req.getParameter(P_NO);
		}

		if (req.getParameter(HOURS_OF_FLOWN) != null
				&& !(req.getParameter(HOURS_OF_FLOWN).equals(""))) {
			hoursOfFlown = req.getParameter(HOURS_OF_FLOWN);
		}
		if (req.getParameter(PERMANENT_ADDRESS) != null
				&& !(req.getParameter(PERMANENT_ADDRESS).equals(""))) {
			permanentAddress = req.getParameter(PERMANENT_ADDRESS);
		}

		if (req.getParameter(IDENTIFICATION_MARKS1) != null
				&& !(req.getParameter(IDENTIFICATION_MARKS1).equals(""))) {
			identification1 = req.getParameter(IDENTIFICATION_MARKS1);
		}

		if (req.getParameter(IDENTIFICATION_MARKS2) != null
				&& !(req.getParameter(IDENTIFICATION_MARKS2).equals(""))) {
			identification2 = req.getParameter(IDENTIFICATION_MARKS2);
		}

		if (req.getParameter(ARMS_CROPS) != null
				&& !(req.getParameter(ARMS_CROPS).equals(""))) {
			armsCrops = req.getParameter(ARMS_CROPS);
		}

		if (req.getParameter(DATE_OF_COMPLETION) != null
				&& !(req.getParameter(DATE_OF_COMPLETION).equals(""))) {
			dateOfCompletion = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(DATE_OF_COMPLETION));
		}

		if (req.getParameter(DOCUMENT_FORWARD_DATE1) != null
				&& !(req.getParameter(DOCUMENT_FORWARD_DATE1).equals(""))) {
			documentForwardDate = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(DOCUMENT_FORWARD_DATE1));

		}

		if (req.getParameter(DOCUMENT_FORWARD_TO) != null
				&& !(req.getParameter(DOCUMENT_FORWARD_TO).equals(""))) {
			documentForwardTo = req.getParameter(DOCUMENT_FORWARD_TO);
		}
		if (req.getParameter(DATE_OF_REPORTING) != null
				&& !(req.getParameter(DATE_OF_REPORTING).equals(""))) {
			dateOfReporting = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(DATE_OF_REPORTING));
		}

		if (req.getParameter(FROM_WHERE_HE_REPORT) != null
				&& !(req.getParameter(FROM_WHERE_HE_REPORT).equals(""))) {
			fromWhereHeReport = req.getParameter(FROM_WHERE_HE_REPORT);
		}
		if (req.getParameter(HYPERTENSION) != null
				&& !(req.getParameter(HYPERTENSION).equals(""))) {
			hypertension = req.getParameter(HYPERTENSION);
		}
		if (req.getParameter(HEAR_DISEASE) != null
				&& !(req.getParameter(HEAR_DISEASE).equals(""))) {
			heartDisease = req.getParameter(HEAR_DISEASE);
		}
		if (req.getParameter(DIABETES) != null
				&& !(req.getParameter(DIABETES).equals(""))) {
			diabetes = req.getParameter(DIABETES);
		}
		if (req.getParameter(BLEEDING_DIORDER) != null
				&& !(req.getParameter(BLEEDING_DIORDER).equals(""))) {
			bleedingDisorder = req.getParameter(BLEEDING_DIORDER);
		}
		if (req.getParameter(MENTAL_DISEASE) != null
				&& !(req.getParameter(MENTAL_DISEASE).equals(""))) {
			mentalDisease = req.getParameter(MENTAL_DISEASE);
		}
		if (req.getParameter(NIGHT_BLINDNESS) != null
				&& !(req.getParameter(NIGHT_BLINDNESS).equals(""))) {
			nightBlindness = req.getParameter(NIGHT_BLINDNESS);
		}

		if (req.getParameter(ASTHAMA) != null
				&& !(req.getParameter(ASTHAMA).equals(""))) {
			asthama = req.getParameter(ASTHAMA);
		}

		if (req.getParameter(DISCHARGE_FROM) != null
				&& !(req.getParameter(DISCHARGE_FROM).equals(""))) {
			dischargeFrom = req.getParameter(DISCHARGE_FROM);

		}

		if (req.getParameter(PLEURISY) != null
				&& !(req.getParameter(PLEURISY).equals(""))) {
			plesury = req.getParameter(PLEURISY);
		}

		if (req.getParameter(EAR_DISEASE) != null
				&& !(req.getParameter(EAR_DISEASE).equals(""))) {
			earDieses = req.getParameter(EAR_DISEASE);
		}

		if (req.getParameter(RHEUMATISM) != null
				&& !(req.getParameter(RHEUMATISM).equals(""))) {
			rheumatism = req.getParameter(RHEUMATISM);
		}
		if (req.getParameter(FREQUENT_CAUGH) != null
				&& !(req.getParameter(FREQUENT_CAUGH).equals(""))) {
			frequentCough = req.getParameter(FREQUENT_CAUGH);
		}

		if (req.getParameter(CHRONIC_INDIGESTION) != null
				&& !(req.getParameter(CHRONIC_INDIGESTION).equals(""))) {
			chronicIndigestion = req.getParameter(CHRONIC_INDIGESTION);
		}
		if (req.getParameter(NERVOUS_BRAKDOWN) != null
				&& !(req.getParameter(NERVOUS_BRAKDOWN).equals(""))) {
			nervousBrakdown = req.getParameter(NERVOUS_BRAKDOWN);
		}

		if (req.getParameter(KIDENY_BLADDER) != null
				&& !(req.getParameter(KIDENY_BLADDER).equals(""))) {
			kidenyBladder = req.getParameter(KIDENY_BLADDER);
		}
		if (req.getParameter(FITS_FAINTING_ATTACKS) != null
				&& !(req.getParameter(FITS_FAINTING_ATTACKS).equals(""))) {
			fitsFaintinngAttacks = req.getParameter(FITS_FAINTING_ATTACKS);
		}
		if (req.getParameter(STD) != null
				&& !(req.getParameter(STD).equals(""))) {
			std = req.getParameter(STD);
		}

		if (req.getParameter(SEVERE_HEAD_INJURY) != null
				&& !(req.getParameter(SEVERE_HEAD_INJURY).equals(""))) {
			serveHeadInjury = req.getParameter(SEVERE_HEAD_INJURY);
		}

		if (req.getParameter(JOUNDICE) != null
				&& !(req.getParameter(JOUNDICE).equals(""))) {
			joundice = req.getParameter(JOUNDICE);
		}
		if (req.getParameter(SICKNESS) != null
				&& !(req.getParameter(SICKNESS).equals(""))) {
			sickness = req.getParameter(SICKNESS);
		}
		if (req.getParameter(BREAST_DISEASE) != null
				&& !(req.getParameter(BREAST_DISEASE).equals(""))) {
			breastDisease = req.getParameter(BREAST_DISEASE);
		}
		if (req.getParameter(TRACHOMA) != null
				&& !(req.getParameter(TRACHOMA).equals(""))) {
			trachoma = req.getParameter(TRACHOMA);
		}

		if (req.getParameter(AMENORRHOEA) != null
				&& !(req.getParameter(AMENORRHOEA).equals(""))) {
			amenorrhoea = req.getParameter(AMENORRHOEA);
		}
		if (req.getParameter(NIGHT_BINDNESS) != null
				&& !(req.getParameter(NIGHT_BINDNESS).equals(""))) {
			nightbindness = req.getParameter(NIGHT_BINDNESS);
		}
		if (req.getParameter(MENORRHAGIA) != null
				&& !(req.getParameter(MENORRHAGIA).equals(""))) {
			menirrhagia = req.getParameter(MENORRHAGIA);
		}
		if (req.getParameter(LASER_TREATEMENT) != null
				&& !(req.getParameter(LASER_TREATEMENT).equals(""))) {
			laserTeartement = req.getParameter(LASER_TREATEMENT);
		}
		if (req.getParameter(PREGNANCY) != null
				&& !(req.getParameter(PREGNANCY).equals(""))) {
			pregnancy = req.getParameter(PREGNANCY);
		}
		if (req.getParameter(EYE_DISEASE) != null
				&& !(req.getParameter(EYE_DISEASE).equals(""))) {
			eyeDisease = req.getParameter(EYE_DISEASE);
		}
		if (req.getParameter(REJECTED_AS_UNFIT) != null
				&& !(req.getParameter(REJECTED_AS_UNFIT).equals(""))) {
			rejectedAsUnfit = req.getParameter(REJECTED_AS_UNFIT);
		}
		if (req.getParameter(DISCHARGE_MEDICALLY_UNFIT) != null
				&& !(req.getParameter(DISCHARGE_MEDICALLY_UNFIT).equals(""))) {
			dischargeMedicallyUnfit = req
					.getParameter(DISCHARGE_MEDICALLY_UNFIT);
		}
		if (req.getParameter(ADIMMITED_IN_HOSPITAL_FOR_ILLNESS) != null
				&& !(req.getParameter(ADIMMITED_IN_HOSPITAL_FOR_ILLNESS)
						.equals(""))) {
			adimmitedInHospitalFirIllness = req
					.getParameter(ADIMMITED_IN_HOSPITAL_FOR_ILLNESS);
		}
		if (req.getParameter(ABORTION) != null
				&& !(req.getParameter(ABORTION).equals(""))) {
			abortion = req.getParameter(ABORTION);
		}

		if (req.getParameter(STATE_NATURE_OF_THE_DISEASE) != null
				&& !(req.getParameter(STATE_NATURE_OF_THE_DISEASE)
						.equals(""))) {
			stateNature = req.getParameter(STATE_NATURE_OF_THE_DISEASE);
		}
		if (req.getParameter(OTHER_INFORMATION) != null
				&& !(req.getParameter(OTHER_INFORMATION).equals(""))) {
			otherInform = req.getParameter(OTHER_INFORMATION);
		}
		if (req.getParameter(HEIGHT_WITHOUT_SHOOSE) != null
				&& !(req.getParameter(HEIGHT_WITHOUT_SHOOSE).equals(""))) {
			height = (new BigDecimal(req
					.getParameter(HEIGHT_WITHOUT_SHOOSE)));
		}
		if (req.getParameter(ACTUAL_WEIGHT) != null
				&& !(req.getParameter(ACTUAL_WEIGHT).equals(""))) {
			weight = (new BigDecimal(req.getParameter(ACTUAL_WEIGHT)));
		}
		if (req.getParameter(ACCEPTABLE_KG) != null
				&& !(req.getParameter(ACCEPTABLE_KG).equals(""))) {
			acceptableKg = (new BigDecimal(req.getParameter(ACCEPTABLE_KG)));
		}
		if (req.getParameter(LEG_LENGTH) != null
				&& !(req.getParameter(LEG_LENGTH).equals(""))) {
			leglength = (new BigDecimal(req.getParameter(LEG_LENGTH)));
		}
		if (req.getParameter(APPEREANCE) != null
				&& !(req.getParameter(APPEREANCE).equals(""))) {
			appereance = req.getParameter(APPEREANCE);
		}
		if (req.getParameter(ALBUMIN) != null
				&& !(req.getParameter(ALBUMIN).equals(""))) {
			albumin = req.getParameter(ALBUMIN);
		}
		if (req.getParameter(SUGAR) != null
				&& !(req.getParameter(SUGAR).equals(""))) {
			sugar = req.getParameter(SUGAR);
		}
		if (req.getParameter(SP_GRAVITY) != null
				&& !(req.getParameter(SP_GRAVITY).equals(""))) {
			spGraviry = req.getParameter(SP_GRAVITY);
		}
		if (req.getParameter(HB_PERCENTAGE) != null
				&& !(req.getParameter(HB_PERCENTAGE).equals(""))) {
			hbPercentage = req.getParameter(HB_PERCENTAGE);
		}
		if (req.getParameter(PHYSIQUE) != null
				&& !(req.getParameter(PHYSIQUE).equals(""))) {
			physique = req.getParameter(PHYSIQUE);
		}

		if (req.getParameter(ANYOTHER_INV_CARRIED_OUT) != null
				&& !(req.getParameter(ANYOTHER_INV_CARRIED_OUT).equals(""))) {
			anyOtherInv = req.getParameter(ANYOTHER_INV_CARRIED_OUT);
		}
		if (req.getParameter(SKIN) != null
				&& !(req.getParameter(SKIN).equals(""))) {
			skin = req.getParameter(SKIN);
		}
		if (req.getParameter(ABDOMEN) != null
				&& !(req.getParameter(ABDOMEN).equals(""))) {
			abdomen = req.getParameter(ABDOMEN);
		}
		if (req.getParameter(HEART_SIZE) != null
				&& !(req.getParameter(HEART_SIZE).equals(""))) {
			heartSize = req.getParameter(HEART_SIZE);
		}
		if (req.getParameter(SOUND) != null
				&& !(req.getParameter(SOUND).equals(""))) {
			sound = req.getParameter(SOUND);
		}
		if (req.getParameter(RHYTHM) != null
				&& !(req.getParameter(RHYTHM).equals(""))) {
			rhythm = req.getParameter(RHYTHM);
		}
		if (req.getParameter(ARTERIAL_WALLS) != null
				&& !(req.getParameter(ARTERIAL_WALLS).equals(""))) {
			arterialWalls = req.getParameter(ARTERIAL_WALLS);
		}
		if (req.getParameter(PULSE_RATES) != null
				&& !(req.getParameter(PULSE_RATES).equals(""))) {
			pulseRates = req.getParameter(PULSE_RATES);
		}
		if (req.getParameter(BP1) != null
				&& !(req.getParameter(BP1).equals(""))) {
			bp = req.getParameter(BP1);
		}
		if (req.getParameter(FULL_EXPENSION) != null
				&& !(req.getParameter(FULL_EXPENSION).equals(""))) {
			fullExpension = req.getParameter(FULL_EXPENSION);
		}
		if (req.getParameter(RANGE_OF_EXPENSION) != null
				&& !(req.getParameter(RANGE_OF_EXPENSION).equals(""))) {
			rangeOfExpension = req.getParameter(RANGE_OF_EXPENSION);
		}

		if (req.getParameter(SELF_BALANCINF_R) != null
				&& !(req.getParameter(SELF_BALANCINF_R).equals(""))) {
			selfBalR = req.getParameter(SELF_BALANCINF_R);
		}
		if (req.getParameter(SELF_BALANCING_L) != null
				&& !(req.getParameter(SELF_BALANCING_L).equals(""))) {
			selfBalL = req.getParameter(SELF_BALANCING_L);
		}
		if (req.getParameter(SPEECH_MENTAL_CAPACITY) != null
				&& !(req.getParameter(SPEECH_MENTAL_CAPACITY).equals(""))) {
			speechMental = req.getParameter(SPEECH_MENTAL_CAPACITY);
		}
		if (req.getParameter(ENDOCRINE_CONDITION) != null
				&& !(req.getParameter(ENDOCRINE_CONDITION).equals(""))) {
			endocrinCond = req.getParameter(ENDOCRINE_CONDITION);
		}
		if (req.getParameter(OTHER_ABNORMALITIES) != null
				&& !(req.getParameter(OTHER_ABNORMALITIES).equals(""))) {
			otherAbnormalities = req.getParameter(OTHER_ABNORMALITIES);
		}
		if (req.getParameter(MEDICIN_REMARKS) != null
				&& !(req.getParameter(MEDICIN_REMARKS).equals(""))) {
			medicinRemarks = req.getParameter(MEDICIN_REMARKS);
		}
		if (req.getParameter(FINGER) != null
				&& !(req.getParameter(FINGER).equals(""))) {
			finger = req.getParameter(FINGER);
		}
		if (req.getParameter(HAND) != null
				&& !(req.getParameter(HAND).equals(""))) {
			hand = req.getParameter(HAND);
		}
		if (req.getParameter(WRIST) != null
				&& !(req.getParameter(WRIST).equals(""))) {
			wrist = req.getParameter(WRIST);
		}
		if (req.getParameter(ELBOWS) != null
				&& !(req.getParameter(ELBOWS).equals(""))) {
			elbows = req.getParameter(ELBOWS);
		}
		if (req.getParameter(SHOULDER_GIRDLES) != null
				&& !(req.getParameter(SHOULDER_GIRDLES).equals(""))) {
			shoulderGridles = req.getParameter(SHOULDER_GIRDLES);
		}
		if (req.getParameter(CERCIVAL) != null
				&& !(req.getParameter(CERCIVAL).equals(""))) {
			cercival = req.getParameter(CERCIVAL);
		}
		if (req.getParameter(DORSAL_VERTEBRATE) != null
				&& !(req.getParameter(DORSAL_VERTEBRATE).equals(""))) {
			dorsalVertebrate = req.getParameter(DORSAL_VERTEBRATE);
		}
		if (req.getParameter(HULLUX) != null
				&& !(req.getParameter(HULLUX).equals(""))) {
			hullux = req.getParameter(HULLUX);
		}
		if (req.getParameter(VALGUS) != null
				&& !(req.getParameter(VALGUS).equals(""))) {
			valgus = req.getParameter(VALGUS);
		}
		if (req.getParameter(RIGGUS) != null
				&& !(req.getParameter(RIGGUS).equals(""))) {
			riggus = req.getParameter(RIGGUS);
		}
		if (req.getParameter(FLAT_FEET) != null
				&& !(req.getParameter(FLAT_FEET).equals(""))) {
			flatFeet = req.getParameter(FLAT_FEET);
		}
		if (req.getParameter(JOINTS) != null
				&& !(req.getParameter(JOINTS).equals(""))) {
			joints = req.getParameter(JOINTS);
		}
		if (req.getParameter(PELVIS) != null
				&& !(req.getParameter(PELVIS).equals(""))) {
			pelvis = req.getParameter(PELVIS);
		}
		if (req.getParameter(GAIL) != null
				&& !(req.getParameter(GAIL).equals(""))) {
			gail = req.getParameter(GAIL);
		}
		if (req.getParameter(LUMBER_SCALER_VERTABRAC) != null
				&& !(req.getParameter(LUMBER_SCALER_VERTABRAC).equals(""))) {
			lumberScaler = req.getParameter(LUMBER_SCALER_VERTABRAC);
		}
		if (req.getParameter(ROCCYX_VARICOSE_VENIS) != null
				&& !(req.getParameter(ROCCYX_VARICOSE_VENIS).equals(""))) {
			roccyxVericose = req.getParameter(ROCCYX_VARICOSE_VENIS);
		}
		if (req.getParameter(HYDROCELE) != null
				&& !(req.getParameter(HYDROCELE).equals(""))) {
			hydrocele = req.getParameter(HYDROCELE);
		}
		if (req.getParameter(VARICOCELE) != null
				&& !(req.getParameter(VARICOCELE).equals(""))) {
			varicocele = req.getParameter(VARICOCELE);
		}
		if (req.getParameter(UNDER_SCENDED_TESTES) != null
				&& !(req.getParameter(UNDER_SCENDED_TESTES).equals(""))) {
			underScende = req.getParameter(UNDER_SCENDED_TESTES);
		}
		if (req.getParameter(HEMONHOIDS) != null
				&& !(req.getParameter(HEMONHOIDS).equals(""))) {
			hemonhoids = req.getParameter(HEMONHOIDS);
		}
		if (req.getParameter(HERNIA_MUSCLE) != null
				&& !(req.getParameter(HERNIA_MUSCLE).equals(""))) {
			herinaMusic = req.getParameter(HERNIA_MUSCLE);
		}
		if (req.getParameter(BREASTS) != null
				&& !(req.getParameter(BREASTS).equals(""))) {
			breasts = req.getParameter(BREASTS);
		}
		if (req.getParameter(SURGERY_REMARKS) != null
				&& !(req.getParameter(SURGERY_REMARKS).equals(""))) {
			surgeryRemarks = req.getParameter(SURGERY_REMARKS);
		}
		if (req.getParameter(RESPIRATORY_SYSTEM) != null
				&& !(req.getParameter(RESPIRATORY_SYSTEM).equals(""))) {
			respatorySystem = req.getParameter(RESPIRATORY_SYSTEM);
		}

		if (req.getParameter(WITH_GLASSES_DISTANT_R) != null
				&& !(req.getParameter(WITH_GLASSES_DISTANT_R).equals(""))) {
			withGlassesDistantR = req.getParameter(WITH_GLASSES_DISTANT_R);
		}
		if (req.getParameter(WITH_GLASSES_DISTANT_L) != null
				&& !(req.getParameter(WITH_GLASSES_DISTANT_L).equals(""))) {
			withglassesDistantL = req.getParameter(WITH_GLASSES_DISTANT_L);
		}
		if (req.getParameter(WITH_GLASSES_NEAR_R) != null
				&& !(req.getParameter(WITH_GLASSES_NEAR_R).equals(""))) {
			withGlassesNearR = req.getParameter(WITH_GLASSES_NEAR_R);
		}
		if (req.getParameter(WITH_GLASSES_NEAR_L) != null
				&& !(req.getParameter(WITH_GLASSES_NEAR_L).equals(""))) {
			withGlassesNearL = req.getParameter(WITH_GLASSES_NEAR_L);
		}
		if (req.getParameter(WITH_GLASSES_NEAR_CP) != null
				&& !(req.getParameter(WITH_GLASSES_NEAR_CP).equals(""))) {
			withGlassesNearCP = req.getParameter(WITH_GLASSES_NEAR_CP);

		}
		if (req.getParameter(WITHOUT_GLASSES_DISTANT_R) != null
				&& !(req.getParameter(WITHOUT_GLASSES_DISTANT_R).equals(""))) {
			withoutGlassesDistantR = req
					.getParameter(WITHOUT_GLASSES_DISTANT_R);
		}
		if (req.getParameter(WITHOUT_GLASSES_DISTANT_L) != null
				&& !(req.getParameter(WITHOUT_GLASSES_DISTANT_L).equals(""))) {
			withoutGlassesDistantL = req
					.getParameter(WITHOUT_GLASSES_DISTANT_L);
		}
		if (req.getParameter(WITHOUT_GLASSES_NEAR_R) != null
				&& !(req.getParameter(WITHOUT_GLASSES_NEAR_R).equals(""))) {
			withoutGlassesNearR = req.getParameter(WITHOUT_GLASSES_NEAR_R);
		}
		if (req.getParameter(WITHOUT_GLASSES_NEAR_L) != null
				&& !(req.getParameter(WITHOUT_GLASSES_NEAR_L).equals(""))) {
			withoutGlassesNearL = req.getParameter(WITHOUT_GLASSES_NEAR_L);
		}
		if (req.getParameter(WITHOUT_GLASSES_NEAR_CP) != null
				&& !(req.getParameter(WITHOUT_GLASSES_NEAR_CP).equals(""))) {
			withoutGlassesNearCP = req
					.getParameter(WITHOUT_GLASSES_NEAR_CP);
		}
		if (req.getParameter(CONVERGENCE_SC) != null
				&& !(req.getParameter(CONVERGENCE_SC).equals(""))) {
			convergenceCP = new BigDecimal(req.getParameter(CONVERGENCE_SC));
		}
		if (req.getParameter(CONVERGENCE_C) != null
				&& !(req.getParameter(CONVERGENCE_C).equals(""))) {
			convergenceC = new BigDecimal(req.getParameter(CONVERGENCE_C));

		}
		if (req.getParameter(ACCOMMODATION_R) != null
				&& !(req.getParameter(ACCOMMODATION_R).equals(""))) {
			accommodationR = req.getParameter(ACCOMMODATION_R);
		}
		if (req.getParameter(ACCOMMODATION_L) != null
				&& !(req.getParameter(ACCOMMODATION_L).equals(""))) {
			accommodationL = req.getParameter(ACCOMMODATION_L);
		}

		if (req.getParameter(EYE_REMARKS) != null
				&& !(req.getParameter(EYE_REMARKS).equals(""))) {
			eyeRemarks = req.getParameter(EYE_REMARKS);
		}
		if (req.getParameter(EYE_DATE) != null
				&& !(req.getParameter(EYE_DATE).equals(""))) {
			eyeDate = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(EYE_DATE));
		}
		if (req.getParameter(HEARING_R_F_W) != null
				&& !(req.getParameter(HEARING_R_F_W).equals(""))) {
			hearingRFW = new BigDecimal(req.getParameter(HEARING_R_F_W));
		}
		if (req.getParameter(HEARING_L_F_W) != null
				&& !(req.getParameter(HEARING_L_F_W).equals(""))) {
			hearingLFW = new BigDecimal(req.getParameter(HEARING_L_F_W));
		}
		if (req.getParameter(HEARING_BOTH_FW) != null
				&& !(req.getParameter(HEARING_BOTH_FW).equals(""))) {
			hearingBothFW = new BigDecimal(req
					.getParameter(HEARING_BOTH_FW));
		}

		if (req.getParameter(HEARING_R_C_V) != null
				&& !(req.getParameter(HEARING_R_C_V).equals(""))) {
			hearingRCV = new BigDecimal(req.getParameter(HEARING_R_C_V));
		}
		if (req.getParameter(HEARING_L_C_V) != null
				&& !(req.getParameter(HEARING_L_C_V).equals(""))) {
			hearingLCV = new BigDecimal(req.getParameter(HEARING_L_C_V));
		}
		if (req.getParameter(HEARING_BOTH_CV) != null
				&& !(req.getParameter(HEARING_BOTH_CV).equals(""))) {
			hearingBothCV = new BigDecimal(req
					.getParameter(HEARING_BOTH_CV));
		}
		if (req.getParameter(INNER_EAR_R) != null
				&& !(req.getParameter(INNER_EAR_R).equals(""))) {
			innerEarR = req.getParameter(INNER_EAR_R);
		}
		if (req.getParameter(INNER_EAR_L) != null
				&& !(req.getParameter(INNER_EAR_L).equals(""))) {
			innerEarL = req.getParameter(INNER_EAR_L);
		}
		/*
		 * Code for tmr,tml,mobility_r,mobility_l,noseThroatSinuses Date 12
		 * March 2012 By Mukesh
		 */
		String tmr = "";
		String tml = "";
		String mobility_r = "";
		String mobility_l = "";
		String noseThroatSinuses = "";

		if (req.getParameter(TYMPANIC_R) != null
				&& !(req.getParameter(TYMPANIC_R).equals(""))) {
			tmr = req.getParameter(TYMPANIC_R);
		}
		if (req.getParameter(TYMPANIC_L) != null
				&& !(req.getParameter(TYMPANIC_L).equals(""))) {
			tml = req.getParameter(TYMPANIC_L);
		}
		if (req.getParameter(MOBILITYR) != null
				&& !(req.getParameter(MOBILITYR).equals(""))) {
			mobility_r = req.getParameter(MOBILITYR);
		}
		if (req.getParameter(MOBILITYL) != null
				&& !(req.getParameter(MOBILITYL).equals(""))) {
			mobility_l = req.getParameter(MOBILITYL);
		}
		if (req.getParameter(NOSE_THROAT_SINUSES) != null
				&& !(req.getParameter(NOSE_THROAT_SINUSES).equals(""))) {
			noseThroatSinuses = req.getParameter(NOSE_THROAT_SINUSES);
		}
		masMedicalBoardProceedings.setTympanicR(tmr);
		masMedicalBoardProceedings.setTympanicL(tml);
		masMedicalBoardProceedings.setMobilityR(mobility_r);
		masMedicalBoardProceedings.setMobilityL(mobility_l);
		masMedicalBoardProceedings.setNoseThroatSinuses(noseThroatSinuses);
		/*
		 * End of Code for tmr,tml,mobility_r,mobility_l,noseThroatSinuses
		 * Date 12 March 2012
		 */
		if (req.getParameter(AUDIOMETRY_RECORD) != null
				&& !(req.getParameter(AUDIOMETRY_RECORD).equals(""))) {
			audiometryRecord = req.getParameter(AUDIOMETRY_RECORD);
		}
		if (req.getParameter(NOSE) != null
				&& !(req.getParameter(NOSE).equals(""))) {
			nose = req.getParameter(NOSE);
		}
		if (req.getParameter(THROAT_EAR) != null
				&& !(req.getParameter(THROAT_EAR).equals(""))) {
			throatEar = req.getParameter(THROAT_EAR);
		}
		if (req.getParameter(EAR_REMARKS) != null
				&& !(req.getParameter(EAR_REMARKS).equals(""))) {
			earReamrks = req.getParameter(EAR_REMARKS);
		}
		if (req.getParameter(EAR_DATE) != null
				&& !(req.getParameter(EAR_DATE).equals(""))) {
			earDate = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(EAR_DATE));
		}

		if (req.getParameter(EXTERNAL_EAR_R) != null
				&& !(req.getParameter(EXTERNAL_EAR_R).equals(""))) {
			externalEarR = req.getParameter(EXTERNAL_EAR_R);
		}
		if (req.getParameter(EXTERNAL_EAR_L) != null
				&& !(req.getParameter(EXTERNAL_EAR_L).equals(""))) {
			externalEarL = req.getParameter(EXTERNAL_EAR_L);
		}
		if (req.getParameter(MIDDLE_EAR_R) != null
				&& !(req.getParameter(MIDDLE_EAR_R).equals(""))) {
			middleEarR = req.getParameter(MIDDLE_EAR_R);
		}
		if (req.getParameter(MIDDLE_EAR_L) != null
				&& !(req.getParameter(MIDDLE_EAR_L).equals(""))) {
			middleEarL = req.getParameter(MIDDLE_EAR_L);
		}
		if (req.getParameter(ANY_EVIDENCE_OF_TRACHOMA) != null
				&& !(req.getParameter(ANY_EVIDENCE_OF_TRACHOMA).equals(""))) {
			evidienceOfTrachoma = req
					.getParameter(ANY_EVIDENCE_OF_TRACHOMA);
		}
		if (req.getParameter(BINOCULAR_VISION_GRADE) != null
				&& !(req.getParameter(BINOCULAR_VISION_GRADE).equals(""))) {
			binocular = req.getParameter(BINOCULAR_VISION_GRADE);
		}
		if (req.getParameter(MANIFEST_HYPERMETROPIA) != null
				&& !(req.getParameter(MANIFEST_HYPERMETROPIA).equals(""))) {
			manifestHypermetropia = req
					.getParameter(MANIFEST_HYPERMETROPIA);
		}
		if (req.getParameter(COVER_TEST) != null
				&& !(req.getParameter(COVER_TEST).equals(""))) {
			coverTest = req.getParameter(COVER_TEST);
		}
		if (req.getParameter(DIAPHRAGM_TEST) != null
				&& !(req.getParameter(DIAPHRAGM_TEST).equals(""))) {
			diaphragmTest = req.getParameter(DIAPHRAGM_TEST);
		}
		if (req.getParameter(FUND_MEDIA) != null
				&& !(req.getParameter(FUND_MEDIA).equals(""))) {
			fundMedia = req.getParameter(FUND_MEDIA);
		}
		if (req.getParameter(FIELDS) != null
				&& !(req.getParameter(FIELDS).equals(""))) {
			fields = req.getParameter(FIELDS);
		}
		if (req.getParameter(NIGHT_VISUAL_CAPACITY) != null
				&& !(req.getParameter(NIGHT_VISUAL_CAPACITY).equals(""))) {
			nightVisualCapacity = req.getParameter(NIGHT_VISUAL_CAPACITY);
		}
		if (req.getParameter(DENTAL_REMARKS) != null
				&& !(req.getParameter(DENTAL_REMARKS).equals(""))) {
			dentalRemarks = req.getParameter(DENTAL_REMARKS);
		}
		String refferToMhForDental = "";
		if (req.getParameter("refferToMhForDental") != null
				&& !(req.getParameter("refferToMhForDental").equals(""))) {
			refferToMhForDental = req.getParameter("refferToMhForDental");
		}
		if (req.getParameter("refferToMh") != null) {
			dentalReferToMH = "yes";
		} else {
			dentalReferToMH = "no";
		}

		if (req.getParameter(DENTAL_DATE) != null
				&& !(req.getParameter(DENTAL_DATE).equals(""))) {
			dentalDate = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(DENTAL_DATE));
		}
		if (req.getParameter(MENSTRUAL_HISTORY) != null
				&& !(req.getParameter(MENSTRUAL_HISTORY).equals(""))) {
			menstrualHistory = req.getParameter(MENSTRUAL_HISTORY);
		}
		if (req.getParameter(NO_OF_PREGNANCY) != null
				&& !(req.getParameter(NO_OF_PREGNANCY).equals(""))) {
			noOfPregnancy = Integer.parseInt(req
					.getParameter(NO_OF_PREGNANCY));
		}
		if (req.getParameter(NO_OF_ABORTION) != null
				&& !(req.getParameter(NO_OF_ABORTION).equals(""))) {
			noOfAbortion = Integer.parseInt(req
					.getParameter(NO_OF_ABORTION));
		}
		if (req.getParameter(NO_OF_CHILDREN) != null
				&& !(req.getParameter(NO_OF_CHILDREN).equals(""))) {
			noOfChildren = Integer.parseInt(req
					.getParameter(NO_OF_CHILDREN));
		}
		if (req.getParameter(DATE_OF_LASTCONFINEMENT) != null
				&& !(req.getParameter(DATE_OF_LASTCONFINEMENT).equals(""))) {
			lastCondinement = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(DATE_OF_LASTCONFINEMENT));
		}
		if (req.getParameter(VAGINAL_DISCHARGE) != null
				&& !(req.getParameter(VAGINAL_DISCHARGE).equals(""))) {
			vaginalDischarge = req.getParameter(VAGINAL_DISCHARGE);
		}
		if (req.getParameter(PROLAPSE) != null
				&& !(req.getParameter(PROLAPSE).equals(""))) {
			prolapse = req.getParameter(PROLAPSE);
		}
		if (req.getParameter(USG_ABORTION) != null
				&& !(req.getParameter(USG_ABORTION).equals(""))) {
			usgAbortion = req.getParameter(USG_ABORTION);
		}
		if (req.getParameter(GYANAECOLOGY_RAMARKS) != null
				&& !(req.getParameter(GYANAECOLOGY_RAMARKS).equals(""))) {
			gyanaecologyRemarks = req.getParameter(GYANAECOLOGY_RAMARKS);
		}
		if (req.getParameter(GYANAECOLOGY_DATE) != null
				&& !(req.getParameter(GYANAECOLOGY_DATE).equals(""))) {
			gyanaecologyDate = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(GYANAECOLOGY_DATE));
		}
		if (req.getParameter(GYANAECOLOGY_RAMARKS) != null
				&& !(req.getParameter(GYANAECOLOGY_RAMARKS).equals(""))) {
			gyanaecologyRemarks = req.getParameter(GYANAECOLOGY_RAMARKS);
		}
		if (req.getParameter(MEDICAL_BOARD_EXAMINATION) != null
				&& !(req.getParameter(MEDICAL_BOARD_EXAMINATION).equals(""))) {
			medicalBoardExamination = req
					.getParameter(MEDICAL_BOARD_EXAMINATION);
		}
		if (req.getParameter(MEDICAL_BOARD_EXAMINATION_PLACE) != null
				&& !(req.getParameter(MEDICAL_BOARD_EXAMINATION_PLACE)
						.equals(""))) {
			medicalBoardExaminationPlace = Integer.parseInt(req
					.getParameter(MEDICAL_BOARD_EXAMINATION_PLACE));
		}
		if (req.getParameter(MEDICAL_BOARD_EXAMINATION_DATE) != null
				&& !(req.getParameter(MEDICAL_BOARD_EXAMINATION_DATE)
						.equals(""))) {
			medicalBoardExaminationDate = HMSUtil
					.dateFormatterDDMMYYYY((req
							.getParameter(MEDICAL_BOARD_EXAMINATION_DATE)));
		}
		if (req.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION) != null
				&& !(req.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION)
						.equals(""))) {
			subsequentMedicalBoardExam = req
					.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION);
		}
		if (req.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION_PLACE) != null
				&& !(req
						.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION_PLACE)
						.equals(""))) {
			subsequentMedicalBoardExamPlace = Integer
					.parseInt(req
							.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION_PLACE));
		}
		if (req.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION_DATE) != null
				&& !(req
						.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION_DATE)
						.equals(""))) {
			subsequentMedicalBoardExamDate = HMSUtil
					.dateFormatterDDMMYYYY((req
							.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION_DATE)));
		}

		if (req.getParameter(APPROVING_AUTHORITY) != null
				&& !(req.getParameter(APPROVING_AUTHORITY).equals(""))) {
			ApprovingAuthority = req.getParameter(APPROVING_AUTHORITY);
		}
		if (req.getParameter(APPROVING_AUTHORITY_PLACE) != null
				&& !(req.getParameter(APPROVING_AUTHORITY_PLACE).equals(""))) {
			ApprovingAuthorityPlace = Integer.parseInt(req
					.getParameter(APPROVING_AUTHORITY_PLACE));
		}
		if (req.getParameter(APPROVING_AUTHORITY_DATE) != null
				&& !(req.getParameter(APPROVING_AUTHORITY_DATE).equals(""))) {
			ApprovingAuthorityDate = HMSUtil.dateFormatterDDMMYYYY((req
					.getParameter(APPROVING_AUTHORITY_DATE)));
		}
		if (req.getParameter(LMP) != null
				&& !(req.getParameter(LMP).equals(""))) {
			lmp = (req.getParameter(LMP));
		}

		if (req.getParameter(SURGERY_DATE) != null
				&& !(req.getParameter(SURGERY_DATE).equals(""))) {
			surgeyDate = HMSUtil.dateFormatterDDMMYYYY((req
					.getParameter(SURGERY_DATE)));
		}
		if (req.getParameter(MEDICIN_EXAM_DATE) != null
				&& !(req.getParameter(MEDICIN_EXAM_DATE).equals(""))) {
			medicinExamDate = HMSUtil.dateFormatterDDMMYYYY((req
					.getParameter(MEDICIN_EXAM_DATE)));
		}
		if (req.getParameter(TOTAL_NO_OF_TEETH) != null
				&& !(req.getParameter(TOTAL_NO_OF_TEETH).equals(""))) {
			totalTeeth = req.getParameter(TOTAL_NO_OF_TEETH);
		}
		if (req.getParameter(DEFECTIVE_TEETH) != null
				&& !(req.getParameter(DEFECTIVE_TEETH).equals(""))) {
			totalDefectiveTeeth = req.getParameter(DEFECTIVE_TEETH);

		}
		if (req.getParameter(MISSING_TEETH) != null
				&& !(req.getParameter(MISSING_TEETH).equals(""))) {
			missingTeeth = req.getParameter(MISSING_TEETH);

		}
		if (req.getParameter(MISSING_UNSERVICABLE_TEETH) != null
				&& !(req.getParameter(MISSING_UNSERVICABLE_TEETH)
						.equals(""))) {
			unserviceableTeeth = req
					.getParameter(MISSING_UNSERVICABLE_TEETH);

		}
		if (req.getParameter(DENTSL_POINT) != null
				&& !(req.getParameter(DENTSL_POINT).equals(""))) {
			DenstalPoint = req.getParameter(DENTSL_POINT);
		}
		if (req.getParameter(LAST_CHANGED_BY) != null) {
			lastChangedBy = req.getParameter(LAST_CHANGED_BY);
		}
		if (req.getParameter(LAST_CHANGED_DATE) != null) {
			lastChangedDate = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(LAST_CHANGED_DATE));
		}
		if (req.getParameter(LAST_CHANGED_TIME) != null) {
			lastChangedTime = req.getParameter(LAST_CHANGED_TIME);
		}
		// //////////////////////////////////
		if (req.getParameter(DUR_8) != null
				&& !req.getParameter(DUR_8).equals("")) {
			dur8 = (req.getParameter(DUR_8));

		} else {
			dur8 = "N";

		}

		if (req.getParameter(DUR_7) != null
				&& !req.getParameter(DUR_7).equals("")) {
			dur7 = (req.getParameter(DUR_7));

		} else {
			dur7 = "N";

		}
		if (req.getParameter(DUR_6) != null
				&& !req.getParameter(DUR_6).equals("")) {
			dur6 = (req.getParameter(DUR_6));

		} else {
			dur6 = "N";

		}
		if (req.getParameter(DUR_5) != null
				&& !req.getParameter(DUR_5).equals("")) {
			dur5 = (req.getParameter(DUR_5));

		} else {
			dur5 = "N";

		}

		if (req.getParameter(DUR_4) != null
				&& !req.getParameter(DUR_4).equals("")) {
			dur4 = (req.getParameter(DUR_4));
		} else {
			dur4 = "N";

		}
		if (req.getParameter(DUR_3) != null
				&& !req.getParameter(DUR_3).equals("")) {
			dur3 = (req.getParameter(DUR_3));

		} else {
			dur3 = "N";

		}
		if (req.getParameter(DUR_2) != null
				&& !req.getParameter(DUR_2).equals("")) {
			dur2 = (req.getParameter(DUR_2));

		} else {
			dur2 = "N";

		}
		if (req.getParameter(DUR_1) != null
				&& !req.getParameter(DUR_1).equals("")) {
			dur1 = (req.getParameter(DUR_1));

		} else {
			dur1 = "N";

		}

		if (req.getParameter(DUL_8) != null
				&& !req.getParameter(DUL_8).equals("")) {
			dul8 = (req.getParameter(DUL_8));
		} else {
			dul8 = "N";

		}
		if (req.getParameter(DUL_7) != null
				&& !req.getParameter(DUL_7).equals("")) {
			dul7 = (req.getParameter(DUL_7));

		} else {
			dul7 = "N";

		}
		if (req.getParameter(DUL_6) != null
				&& !req.getParameter(DUL_6).equals("")) {
			dul6 = (req.getParameter(DUL_6));
		} else {
			dul6 = "N";

		}
		if (req.getParameter(DUL_5) != null
				&& !req.getParameter(DUL_5).equals("")) {
			dul5 = (req.getParameter(DUL_5));
		} else {
			dul5 = "N";

		}
		if (req.getParameter(DUL_4) != null
				&& !req.getParameter(DUL_4).equals("")) {
			dul4 = (req.getParameter(DUL_4));
		} else {
			dul4 = "N";

		}
		if (req.getParameter(DUL_3) != null
				&& !req.getParameter(DUL_3).equals("")) {
			dul3 = (req.getParameter(DUL_3));
		} else {
			dul3 = "N";

		}
		if (req.getParameter(DUL_2) != null
				&& !req.getParameter(DUL_2).equals("")) {
			dul2 = (req.getParameter(DUL_2));
		} else {
			dul2 = "N";

		}
		if (req.getParameter(DUL_1) != null
				&& !req.getParameter(DUL_1).equals("")) {
			dul1 = (req.getParameter(DUL_1));
		} else {
			dul1 = "N";

		}

		if (req.getParameter(DLR_8) != null
				&& !req.getParameter(DLR_8).equals("")) {
			dlr8 = (req.getParameter(DLR_8));
		} else {
			dlr8 = "N";

		}
		if (req.getParameter(DLR_7) != null
				&& !req.getParameter(DLR_7).equals("")) {
			dlr7 = (req.getParameter(DLR_7));
		} else {
			dlr7 = "N";

		}
		if (req.getParameter(DLR_6) != null
				&& !req.getParameter(DLR_6).equals("")) {
			dlr6 = (req.getParameter(DLR_6));
		} else {
			dlr6 = "N";

		}
		if (req.getParameter(DLR_5) != null
				&& !req.getParameter(DLR_5).equals("")) {
			dlr5 = (req.getParameter(DLR_5));
		} else {
			dlr5 = "N";

		}
		if (req.getParameter(DLR_4) != null
				&& !req.getParameter(DLR_4).equals("")) {
			dlr4 = (req.getParameter(DLR_4));
		} else {
			dlr4 = "N";

		}
		if (req.getParameter(DLR_3) != null
				&& !req.getParameter(DLR_3).equals("")) {
			dlr3 = (req.getParameter(DLR_3));
		} else {
			dlr3 = "N";

		}
		if (req.getParameter(DLR_2) != null
				&& !req.getParameter(DLR_2).equals("")) {
			dlr2 = (req.getParameter(DLR_2));
		} else {
			dlr2 = "N";

		}

		if (req.getParameter(DLR_1) != null
				&& !req.getParameter(DLR_1).equals("")) {
			dlr1 = (req.getParameter(DLR_1));
		} else {
			dlr1 = "N";

		}

		if (req.getParameter(DLL_8) != null
				&& !req.getParameter(DLL_8).equals("")) {
			dll8 = (req.getParameter(DLL_8));
		} else {
			dll8 = "N";

		}
		if (req.getParameter(DLL_7) != null
				&& !req.getParameter(DLL_7).equals("")) {
			dll7 = (req.getParameter(DLL_7));
		} else {
			dll7 = "N";

		}

		if (req.getParameter(DLL_6) != null
				&& !req.getParameter(DLL_6).equals("")) {
			dll6 = (req.getParameter(DLL_6));
		} else {
			dll6 = "N";

		}
		if (req.getParameter(DLL_5) != null
				&& !req.getParameter(DLL_5).equals("")) {
			dll5 = (req.getParameter(DLL_5));
		} else {
			dll5 = "N";

		}
		if (req.getParameter(DLL_4) != null
				&& !req.getParameter(DLL_4).equals("")) {
			dll4 = (req.getParameter(DLL_4));
		} else {
			dll4 = "N";

		}
		if (req.getParameter(DLL_3) != null
				&& !req.getParameter(DLL_3).equals("")) {
			dll3 = (req.getParameter(DLL_3));
		} else {
			dll3 = "N";

		}
		if (req.getParameter(DLL_2) != null
				&& !req.getParameter(DLL_2).equals("")) {
			dll2 = (req.getParameter(DLL_2));
		} else {
			dll2 = "N";

		}
		if (req.getParameter(DLL_1) != null
				&& !req.getParameter(DLL_1).equals("")) {
			dll1 = (req.getParameter(DLL_1));
		} else {
			dll1 = "N";

		}
		// ///////////////////////////

		if (req.getParameter(UUR_8) != null
				&& !req.getParameter(UUR_8).equals("")) {
			uur8 = (req.getParameter(UUR_8));
		} else {
			uur8 = "N";

		}

		if (req.getParameter(UUR_7) != null
				&& !req.getParameter(UUR_7).equals("")) {
			uur7 = (req.getParameter(UUR_7));
		} else {
			uur7 = "N";

		}
		if (req.getParameter(UUR_6) != null
				&& !req.getParameter(UUR_6).equals("")) {
			uur6 = (req.getParameter(UUR_6));
		} else {
			uur6 = "N";

		}
		if (req.getParameter(UUR_5) != null
				&& !req.getParameter(UUR_5).equals("")) {
			uur5 = (req.getParameter(UUR_5));
		} else {
			uur5 = "N";

		}
		if (req.getParameter(UUR_4) != null
				&& !req.getParameter(UUR_4).equals("")) {
			uur4 = (req.getParameter(UUR_4));
		} else {
			uur4 = "N";

		}
		if (req.getParameter(UUR_3) != null
				&& !req.getParameter(UUR_3).equals("")) {
			uur3 = (req.getParameter(UUR_3));
		} else {
			uur3 = "N";

		}
		if (req.getParameter(UUR_2) != null
				&& !req.getParameter(UUR_2).equals("")) {
			uur2 = (req.getParameter(UUR_2));
		} else {
			uur2 = "N";

		}
		if (req.getParameter(UUR_1) != null
				&& !req.getParameter(UUR_1).equals("")) {
			uur1 = (req.getParameter(UUR_1));
		} else {
			uur1 = "N";

		}

		if (req.getParameter(UUL_8) != null
				&& !req.getParameter(UUL_8).equals("")) {
			uul8 = (req.getParameter(UUL_8));
		} else {
			uul8 = "N";

		}
		if (req.getParameter(UUL_7) != null
				&& !req.getParameter(UUL_7).equals("")) {
			uul7 = (req.getParameter(UUL_7));

		} else {
			uul7 = "N";

		}
		if (req.getParameter(UUL_6) != null
				&& !req.getParameter(UUL_6).equals("")) {
			uul6 = (req.getParameter(UUL_6));
		} else {
			uul6 = "N";

		}
		if (req.getParameter(UUL_5) != null
				&& !req.getParameter(UUL_5).equals("")) {
			uul5 = (req.getParameter(UUL_5));
		} else {
			uul5 = "N";

		}
		if (req.getParameter(UUL_4) != null
				&& !req.getParameter(UUL_4).equals("")) {
			uul4 = (req.getParameter(UUL_4));
		} else {
			uul4 = "N";

		}
		if (req.getParameter(UUL_3) != null
				&& !req.getParameter(UUL_3).equals("")) {
			uul3 = (req.getParameter(UUL_3));
		} else {
			uul3 = "N";

		}
		if (req.getParameter(UUL_2) != null
				&& !req.getParameter(UUL_2).equals("")) {
			uul2 = (req.getParameter(UUL_2));
		} else {
			uul2 = "N";

		}
		if (req.getParameter(UUL_1) != null
				&& !req.getParameter(UUL_1).equals("")) {
			uul1 = (req.getParameter(UUL_1));
		} else {
			uul1 = "N";

		}
		if (req.getParameter(ULR_8) != null
				&& !req.getParameter(ULR_8).equals("")) {
			ulr8 = (req.getParameter(ULR_8));
		} else {
			ulr8 = "N";

		}

		if (req.getParameter(ULR_7) != null
				&& !req.getParameter(ULR_7).equals("")) {
			ulr7 = (req.getParameter(ULR_7));
		} else {
			ulr7 = "N";

		}
		if (req.getParameter(ULR_6) != null
				&& !req.getParameter(ULR_6).equals("")) {
			ulr6 = (req.getParameter(ULR_6));
		} else {
			ulr6 = "N";

		}
		if (req.getParameter(ULR_5) != null
				&& !req.getParameter(ULR_5).equals("")) {
			ulr5 = (req.getParameter(ULR_5));
		} else {
			ulr5 = "N";

		}
		if (req.getParameter(ULR_4) != null
				&& !req.getParameter(ULR_4).equals("")) {
			ulr4 = (req.getParameter(ULR_4));
		} else {
			ulr4 = "N";

		}
		if (req.getParameter(ULR_3) != null
				&& !req.getParameter(ULR_3).equals("")) {
			ulr3 = (req.getParameter(ULR_3));
		} else {
			ulr3 = "N";

		}
		if (req.getParameter(ULR_2) != null
				&& !req.getParameter(ULR_2).equals("")) {
			ulr2 = (req.getParameter(ULR_2));
		} else {
			ulr2 = "N";

		}
		if (req.getParameter(ULR_1) != null
				&& !req.getParameter(ULR_1).equals("")) {
			ulr1 = (req.getParameter(ULR_1));
		} else {
			ulr1 = "N";

		}

		if (req.getParameter(ULL_8) != null
				&& !req.getParameter(ULL_8).equals("")) {
			ull8 = (req.getParameter(ULL_8));
		} else {
			ull8 = "N";

		}
		if (req.getParameter(ULL_7) != null
				&& !req.getParameter(ULL_7).equals("")) {
			ull7 = (req.getParameter(ULL_7));
		} else {
			ull7 = "N";

		}
		if (req.getParameter(ULL_6) != null
				&& !req.getParameter(ULL_6).equals("")) {
			ull6 = (req.getParameter(ULL_6));
		} else {
			ull6 = "N";

		}
		if (req.getParameter(ULL_5) != null
				&& !req.getParameter(ULL_5).equals("")) {
			ull5 = (req.getParameter(ULL_5));
		} else {
			ull5 = "N";

		}
		if (req.getParameter(ULL_4) != null
				&& !req.getParameter(ULL_4).equals("")) {
			ull4 = (req.getParameter(ULL_4));
		} else {
			ull4 = "N";

		}
		if (req.getParameter(ULL_3) != null
				&& !req.getParameter(ULL_3).equals("")) {
			ull3 = (req.getParameter(ULL_3));
		} else {
			ull3 = "N";

		}
		if (req.getParameter(ULL_2) != null
				&& !req.getParameter(ULL_2).equals("")) {
			ull2 = (req.getParameter(ULL_2));
		} else {
			ull2 = "N";

		}
		if (req.getParameter(ULL_1) != null
				&& !req.getParameter(ULL_1).equals("")) {
			ull1 = (req.getParameter(ULL_1));
		} else {
			ull1 = "N";

		}

		// ////////////////////////

		if (req.getParameter(MUR_8) != null
				&& !req.getParameter(MUR_8).equals("")) {
			mur8 = (req.getParameter(MUR_8));

		} else {
			mur8 = "N";

		}
		if (req.getParameter(MUR_7) != null
				&& !req.getParameter(MUR_7).equals("")) {
			mur7 = (req.getParameter(MUR_7));
		} else {
			mur7 = "N";

		}
		if (req.getParameter(MUR_6) != null
				&& !req.getParameter(MUR_6).equals("")) {
			mur6 = (req.getParameter(MUR_6));
		} else {
			mur6 = "N";

		}
		if (req.getParameter(MUR_5) != null
				&& !req.getParameter(MUR_5).equals("")) {
			mur5 = (req.getParameter(MUR_5));
		} else {
			mur5 = "N";

		}
		if (req.getParameter(MUR_4) != null
				&& !req.getParameter(MUR_4).equals("")) {
			mur4 = (req.getParameter(MUR_4));
		} else {
			mur4 = "N";

		}
		if (req.getParameter(MUR_3) != null
				&& !req.getParameter(MUR_3).equals("")) {
			mur3 = (req.getParameter(MUR_3));
		} else {
			mur3 = "N";

		}
		if (req.getParameter(MUR_2) != null
				&& !req.getParameter(MUR_2).equals("")) {
			mur2 = (req.getParameter(MUR_2));
		} else {
			mur2 = "N";

		}
		if (req.getParameter(MUR_1) != null
				&& !req.getParameter(MUR_1).equals("")) {
			mur1 = (req.getParameter(MUR_1));
		} else {
			mur1 = "N";

		}

		if (req.getParameter(MUL_8) != null
				&& !req.getParameter(MUL_8).equals("")) {
			mul8 = (req.getParameter(MUL_8));
		} else {
			mul8 = "N";

		}
		if (req.getParameter(MUL_7) != null
				&& !req.getParameter(MUL_7).equals("")) {
			mul7 = (req.getParameter(MUL_7));

		} else {
			mul7 = "N";

		}
		if (req.getParameter(MUL_6) != null
				&& !req.getParameter(MUL_6).equals("")) {
			mul6 = (req.getParameter(MUL_6));
		} else {
			mul6 = "N";

		}
		if (req.getParameter(MUL_5) != null
				&& !req.getParameter(MUL_5).equals("")) {
			mul5 = (req.getParameter(MUL_5));
		} else {
			mul5 = "N";

		}
		if (req.getParameter(MUL_4) != null
				&& !req.getParameter(MUL_4).equals("")) {
			mul4 = (req.getParameter(MUL_4));
		} else {
			mul4 = "N";

		}
		if (req.getParameter(MUL_3) != null
				&& !req.getParameter(MUL_3).equals("")) {
			mul3 = (req.getParameter(MUL_3));
		} else {
			mul3 = "N";

		}
		if (req.getParameter(MUL_2) != null
				&& !req.getParameter(MUL_2).equals("")) {
			mul2 = (req.getParameter(MUL_2));
		} else {
			mul2 = "N";

		}
		if (req.getParameter(MUL_1) != null
				&& !req.getParameter(MUL_1).equals("")) {
			mul1 = (req.getParameter(MUL_1));
		} else {
			mul1 = "N";

		}
		if (req.getParameter(MLR_8) != null
				&& !req.getParameter(MLR_8).equals("")) {
			mlr8 = (req.getParameter(MLR_8));
		} else {
			mlr8 = "N";

		}

		if (req.getParameter(MLR_7) != null
				&& !req.getParameter(MLR_7).equals("")) {
			mlr7 = (req.getParameter(MLR_7));
		} else {
			mlr7 = "N";

		}
		if (req.getParameter(MLR_6) != null
				&& !req.getParameter(MLR_6).equals("")) {
			mlr6 = (req.getParameter(MLR_6));
		} else {
			mlr6 = "N";

		}
		if (req.getParameter(MLR_5) != null
				&& !req.getParameter(MLR_5).equals("")) {
			mlr5 = (req.getParameter(MLR_5));
		} else {
			mlr5 = "N";

		}

		if (req.getParameter(MLR_4) != null
				&& !req.getParameter(MLR_4).equals("")) {
			mlr4 = (req.getParameter(MLR_4));
		} else {
			mlr4 = "N";

		}
		if (req.getParameter(MLR_3) != null
				&& !req.getParameter(MLR_3).equals("")) {
			mlr3 = (req.getParameter(MLR_3));
		} else {
			mlr3 = "N";

		}

		if (req.getParameter(MLR_2) != null
				&& !req.getParameter(MLR_2).equals("")) {
			mlr2 = (req.getParameter(MLR_2));
		} else {
			mlr2 = "N";

		}
		if (req.getParameter(MLR_1) != null
				&& !req.getParameter(MLR_1).equals("")) {
			mlr1 = (req.getParameter(MLR_1));
		} else {
			mlr1 = "N";

		}

		if (req.getParameter(MLL_8) != null
				&& !req.getParameter(MLL_8).equals("")) {
			mll8 = (req.getParameter(MLL_8));
		} else {
			mll8 = "N";

		}
		if (req.getParameter(MLL_7) != null
				&& !req.getParameter(MLL_7).equals("")) {
			mll7 = (req.getParameter(MLL_7));
		} else {
			mll7 = "N";

		}
		if (req.getParameter(MLL_5) != null
				&& !req.getParameter(MLL_6).equals("")) {
			mll6 = (req.getParameter(MLL_6));
		} else {
			mll6 = "N";

		}
		if (req.getParameter(MLL_5) != null
				&& !req.getParameter(MLL_5).equals("")) {
			mll5 = (req.getParameter(MLL_5));
		} else {
			mll5 = "N";

		}
		if (req.getParameter(MLL_4) != null
				&& !req.getParameter(MLL_4).equals("")) {
			mll4 = (req.getParameter(MLL_4));
		} else {
			mll4 = "N";

		}
		if (req.getParameter(MLL_3) != null
				&& !req.getParameter(MLL_3).equals("")) {
			mll3 = (req.getParameter(MLL_3));
		} else {
			mll3 = "N";

		}
		if (req.getParameter(MLL_2) != null
				&& !req.getParameter(MLL_2).equals("")) {
			mll2 = (req.getParameter(MLL_2));
		} else {
			mll2 = "N";

		}
		if (req.getParameter(MLL_1) != null
				&& !req.getParameter(MLL_1).equals("")) {
			mll1 = (req.getParameter(MLL_1));
		} else {
			mll1 = "N";

		}

		sur8 = dur8 + "" + mur8 + "" + uur8;

		sur7 = dur7 + "" + mur7 + "" + uur7;

		sur6 = dur6 + "" + mur6 + "" + uur6;
		sur5 = dur5 + "" + mur5 + "" + uur5;
		sur4 = dur4 + "" + mur4 + "" + uur4;
		sur3 = dur3 + "" + mur3 + "" + uur3;
		sur2 = dur2 + "" + mur2 + "" + uur2;
		sur1 = dur1 + "" + mur2 + "" + uur1;

		sul8 = dul8 + "" + mul8 + "" + uul8;
		sul7 = dul7 + "" + mul7 + "" + uul7;

		sul6 = dul6 + "" + mul6 + "" + uul6;
		sul5 = dul5 + "" + mul5 + "" + uul5;
		sul4 = dul4 + "" + mul4 + "" + uul4;
		sul3 = dul3 + "" + mul3 + "" + uul3;
		sul2 = dul2 + "" + mul2 + "" + uul2;
		sul1 = dul1 + "" + mul1 + "" + uul1;

		slr8 = dlr8 + "" + mlr8 + "" + ulr8;
		slr7 = dlr7 + "" + mlr7 + "" + ulr7;
		slr6 = dlr6 + "" + mlr6 + "" + ulr6;
		slr5 = dlr5 + "" + mlr5 + "" + ulr5;
		slr4 = dlr4 + "" + mlr4 + "" + ulr4;
		slr3 = dlr3 + "" + mlr3 + "" + ulr3;
		slr2 = dlr2 + "" + mlr2 + "" + ulr2;
		slr1 = dlr1 + "" + mlr2 + "" + ulr1;

		sll8 = dll8 + "" + mll8 + "" + ull8;
		sll7 = dll7 + "" + mll7 + "" + ull7;
		sll6 = dll6 + "" + mll6 + "" + ull6;
		sll5 = dll5 + "" + mll5 + "" + ull5;
		sll4 = dll4 + "" + mll4 + "" + ull4;
		sll3 = dll3 + "" + mll3 + "" + ull3;
		sll2 = dll2 + "" + mll2 + "" + ull2;
		sll1 = dll1 + "" + mll1 + "" + ull1;

		// MasMedicalExaminationReportOnEntry masMedicalBoardProceedings =
		// new MasMedicalExaminationReportOnEntry();
		// Map<String, Object> generalMap = new HashMap<String, Object>();
		MbTypeOfEntryMaster mbTypeOfEntryMaster = new MbTypeOfEntryMaster();
		mbTypeOfEntryMaster.setId(typeOfEntry);
		generalMap.put("serviceNo", serviceNo);
		// generalMap.put("name", betchNo);
		// generalMap.put("address", req.getParameter(TYPE_OF_ENTRY));

		// generalMap.put("pojoPropertyName", "BatchNo");
		generalMap.put("pojoPropertyCode", "serviceNo");
		// generalMap.put("pojoPropertyAddress", "TypeOfEntry");
		generalMap.put("pojoName", "MasMedicalExaminationReportOnEntry");

		// Map listMap =
		// commonMasterHandlerService.checkForExistingMasters(generalMap);
		Boolean successfullyAdded = false;
		// List codeList = (List) listMap.get("duplicateGeneralCodeList");
		// List nameList = (List) listMap.get("duplicateGeneralNameList");
		// List typeOfEntryList = (List)
		// listMap.get("duplicateGeneralAddressList");
		/*
		 * if (codeList != null && codeList.size() > 0) { message =
		 * "Yearly Serial No Already Exist!"; jsp = MEDICAL_BOARD_ERROR_MSG;
		 * } else {
		 */
		masMedicalBoardProceedings.setInnerEarL(innerEarL);
		masMedicalBoardProceedings.setHearingBothCv(hearingBothCV);
		masMedicalBoardProceedings.setDateSpecialExam(eyeDate);
		masMedicalBoardProceedings
				.setTotalDefectiveTeeth(totalDefectiveTeeth);
		masMedicalBoardProceedings.setTotalTeeth(totalTeeth);
		masMedicalBoardProceedings.setMissingTeeth(missingTeeth);
		masMedicalBoardProceedings.setUnservisableTeeth(unserviceableTeeth);
		masMedicalBoardProceedings.setDenstlPoint(DenstalPoint);
		masMedicalBoardProceedings.setYearlySerialNo(serviceNo);
		// masMedicalBoardProceedings.setMonthlySerialNo(rank);
		masMedicalBoardProceedings.setEntryDate(entryDate);

		masMedicalBoardProceedings.setTypeOfEntry(mbTypeOfEntryMaster);
		masMedicalBoardProceedings.setBatchNo(betchNo);
		masMedicalBoardProceedings.setChestNo(chestNo);
		masMedicalBoardProceedings.setRollNo(rollNo);
		/*
		 * MasUnit masUnit = new MasUnit(); masUnit.setId(medicalExamHeld);
		 * masMedicalBoardProceedings.setMedicalExamHeldAt(masUnit);
		 */
		masMedicalBoardProceedings.setMedicalStatus(medicalStatus);
		masMedicalBoardProceedings.setNameInFull(fullName);
		masMedicalBoardProceedings.setDateOfBirth(dateOfBirth);
		if (maritialStatus != 0) {
			MasMaritalStatus masMaritalStatus = new MasMaritalStatus();
			masMaritalStatus.setId(maritialStatus);
			masMedicalBoardProceedings.setMaritalStatus(masMaritalStatus);
		}
		masMedicalBoardProceedings.setPNo(pNo);

		masMedicalBoardProceedings.setHoursOfFlown(hoursOfFlown);
		masMedicalBoardProceedings.setParmanentAddress(permanentAddress);
		masMedicalBoardProceedings.setIdentificationMarks1(identification1);
		masMedicalBoardProceedings.setIdentificationMarks2(identification2);
		masMedicalBoardProceedings.setArmsCorps(armsCrops);
		masMedicalBoardProceedings.setDateOfCompletion(dateOfCompletion);
		masMedicalBoardProceedings
				.setDocumentForwardDate(documentForwardDate);
		masMedicalBoardProceedings.setDateOfReporting(dateOfReporting);
		masMedicalBoardProceedings.setDocumentForwardTo(documentForwardTo);
		masMedicalBoardProceedings.setFromWhereHeReport(fromWhereHeReport);
		masMedicalBoardProceedings.setHypertension(hypertension);
		masMedicalBoardProceedings.setHeartDiabetes(heartDisease);
		masMedicalBoardProceedings.setDiabetes(diabetes);
		masMedicalBoardProceedings.setBleedingDisorder(bleedingDisorder);
		masMedicalBoardProceedings.setMentalDisease(mentalDisease);
		masMedicalBoardProceedings.setNightBlindness(nightBlindness);
		masMedicalBoardProceedings.setChronicBronchitis(asthama);
		masMedicalBoardProceedings.setDischargeFromEars(dischargeFrom);
		masMedicalBoardProceedings.setPleurisy(plesury);
		masMedicalBoardProceedings.setAnyOtherEarDisease(earDieses);
		masMedicalBoardProceedings
				.setRheumatismFrequentSorethroats(rheumatism);
		masMedicalBoardProceedings
				.setFrequentCoughColdSinusitis(frequentCough);
		masMedicalBoardProceedings
				.setChronicIndigestion(chronicIndigestion);
		masMedicalBoardProceedings
				.setNervousBreakdownMentalIllness(nervousBrakdown);
		masMedicalBoardProceedings.setKidneyBladderTrouble(kidenyBladder);
		masMedicalBoardProceedings
				.setFitsFaintingAttack(fitsFaintinngAttacks);
		masMedicalBoardProceedings.setStd(std);
		masMedicalBoardProceedings.setSevereHeadInjury(serveHeadInjury);
		masMedicalBoardProceedings.setJaundice(joundice);
		masMedicalBoardProceedings.setAirSeaCarTrainSickness(sickness);
		masMedicalBoardProceedings.setBreastDiseaseDischarge(breastDisease);
		masMedicalBoardProceedings.setTrachoma(trachoma);
		masMedicalBoardProceedings.setAmenorrhoeaDysmenonhoea(amenorrhoea);
		masMedicalBoardProceedings.setNightBindness(nightbindness);
		masMedicalBoardProceedings.setMenonhagia(menirrhagia);
		masMedicalBoardProceedings
				.setLaserTreatementSurgeryForEye(laserTeartement);
		masMedicalBoardProceedings.setPregnancy(pregnancy);
		masMedicalBoardProceedings.setAnyOtherEyeDisease(eyeDisease);
		masMedicalBoardProceedings.setAbortion(abortion);
		masMedicalBoardProceedings
				.setBeenrejectedAsMedicallyUnfitForAnyBranch(rejectedAsUnfit);
		masMedicalBoardProceedings
				.setDischargeAsMedicallyUnfitForAnyBranch(dischargeMedicallyUnfit);
		masMedicalBoardProceedings
				.setAdmittedInHospitalForAnyIllnessOperationOrInjury(adimmitedInHospitalFirIllness);

		masMedicalBoardProceedings
				.setStateTheNatureOfDiseaseDuration(stateNature);
		masMedicalBoardProceedings
				.setAnyOtherInformationAboutYourHealth(otherInform);
		masMedicalBoardProceedings.setHeight(height);
		masMedicalBoardProceedings.setWeight(weight);
		masMedicalBoardProceedings.setAcceptable(acceptableKg);
		masMedicalBoardProceedings.setLegLength(leglength);
		masMedicalBoardProceedings.setAppearance(appereance);
		masMedicalBoardProceedings.setAlbumin(albumin);
		masMedicalBoardProceedings.setSugar(sugar);
		masMedicalBoardProceedings.setSpGravity(spGraviry);
		masMedicalBoardProceedings.setHbPercentage(hbPercentage);
		masMedicalBoardProceedings.setAnyOtherInvCarriedOut(anyOtherInv);
		masMedicalBoardProceedings.setPhysique(physique);
		masMedicalBoardProceedings.setSkin(skin);
		masMedicalBoardProceedings.setAbdomen(abdomen);
		masMedicalBoardProceedings.setHeartSize(heartSize);
		masMedicalBoardProceedings.setSounds(sound);
		masMedicalBoardProceedings.setRhythm(rhythm);
		masMedicalBoardProceedings.setArterialWalls(arterialWalls);
		masMedicalBoardProceedings.setPulseRates(pulseRates);
		masMedicalBoardProceedings.setBp(bp);
		masMedicalBoardProceedings.setChestMeasurement(fullExpension);
		masMedicalBoardProceedings.setRangeOfExpension(rangeOfExpension);
		masMedicalBoardProceedings.setSelfBalancingR(selfBalR);
		masMedicalBoardProceedings.setSelfBalancingL(selfBalL);
		masMedicalBoardProceedings.setSpeechMentalCapacity(speechMental);
		masMedicalBoardProceedings.setEndocrineCondition(endocrinCond);
		masMedicalBoardProceedings
				.setAnyOtheAbnormalities(otherAbnormalities);
		masMedicalBoardProceedings.setRemarks(medicinRemarks);
		masMedicalBoardProceedings.setFingers(finger);
		masMedicalBoardProceedings.setHand(hand);
		masMedicalBoardProceedings.setWrists(wrist);
		masMedicalBoardProceedings.setElbows(elbows);
		masMedicalBoardProceedings.setShoulderGirdles(shoulderGridles);
		masMedicalBoardProceedings.setCervical(cercival);
		masMedicalBoardProceedings.setDorsalVertebrate(dorsalVertebrate);
		masMedicalBoardProceedings.setHullux(hullux);
		masMedicalBoardProceedings.setValgus(valgus);
		masMedicalBoardProceedings.setRigigus(riggus);
		masMedicalBoardProceedings.setFlatFeet(flatFeet);
		masMedicalBoardProceedings.setJoints(joints);
		masMedicalBoardProceedings.setPelvis(pelvis);
		masMedicalBoardProceedings.setGail(gail);
		masMedicalBoardProceedings.setLumber(lumberScaler);
		masMedicalBoardProceedings.setRoccyxVarocose(roccyxVericose);
		masMedicalBoardProceedings.setHydrocele(hydrocele);
		masMedicalBoardProceedings.setVaricocele(varicocele);
		masMedicalBoardProceedings.setUnderscendedTest(underScende);
		masMedicalBoardProceedings.setHemorrhoids(hemonhoids);
		masMedicalBoardProceedings.setHerniaMusic(herinaMusic);
		masMedicalBoardProceedings.setBreasts(breasts);
		masMedicalBoardProceedings.setRemarksLowerlimbs(surgeryRemarks);
		masMedicalBoardProceedings.setRespiratorySystem(respatorySystem);
		masMedicalBoardProceedings
				.setWithGlassesLDistant(withglassesDistantL);
		masMedicalBoardProceedings
				.setWithGlassesRDistant(withGlassesDistantR);
		masMedicalBoardProceedings
				.setWithoutGlassesLDistant(withoutGlassesDistantL);
		masMedicalBoardProceedings
				.setWthoutGlassesRDistant(withoutGlassesDistantR);
		masMedicalBoardProceedings
				.setWithGlassesLNearvision(withGlassesNearL);
		masMedicalBoardProceedings
				.setWithGlassesRNearvision(withGlassesNearR);
		masMedicalBoardProceedings
				.setWithoutGlassesLNearvision(withoutGlassesNearL);
		masMedicalBoardProceedings
				.setWithoutGlassesRNearvision(withoutGlassesNearR);
		masMedicalBoardProceedings
				.setEvidenceOfTrachoma(evidienceOfTrachoma);
		masMedicalBoardProceedings.setBinocularVisionGrade(binocular);
		masMedicalBoardProceedings
				.setManifestHypermetropia(manifestHypermetropia);
		masMedicalBoardProceedings.setCoverTest(coverTest);
		masMedicalBoardProceedings.setDiaphragmTest(diaphragmTest);
		masMedicalBoardProceedings.setFundAndMedia(fundMedia);
		masMedicalBoardProceedings.setFields(fields);
		masMedicalBoardProceedings
				.setNightVisualCapacity(nightVisualCapacity);
		masMedicalBoardProceedings.setConvergenceC(convergenceC);
		masMedicalBoardProceedings.setConvergenceSc(convergenceCP);
		masMedicalBoardProceedings.setAccommodationR(accommodationR);
		masMedicalBoardProceedings.setAccommodationL(accommodationL);
		masMedicalBoardProceedings.setRemarksSpecialExam(eyeRemarks);
		masMedicalBoardProceedings.setHearingRcv(hearingRCV);
		masMedicalBoardProceedings.setHearingLcv(hearingLCV);
		masMedicalBoardProceedings.setEarHearingRfw(hearingRFW);
		masMedicalBoardProceedings.setEarHearingLfw(hearingLFW);
		masMedicalBoardProceedings.setEarHearingBothFw(hearingBothFW);
		masMedicalBoardProceedings.setExternalEarR(externalEarR);
		masMedicalBoardProceedings.setExternalEarL(externalEarL);
		masMedicalBoardProceedings.setMiddleEarR(middleEarR);
		masMedicalBoardProceedings.setMiddleEar(middleEarL);

		masMedicalBoardProceedings.setInnerEarR(innerEarR);
		masMedicalBoardProceedings.setAudiometryRecord(audiometryRecord);
		masMedicalBoardProceedings.setNose(nose);
		masMedicalBoardProceedings.setThroat(throatEar);
		masMedicalBoardProceedings.setRemarksEar(earReamrks);
		masMedicalBoardProceedings.setEarDate(earDate);
		masMedicalBoardProceedings.setDateTeath(dentalDate);
		masMedicalBoardProceedings.setRemarksTeath(dentalRemarks);
		// masMedicalBoardProceedings.setReferToMH(refferToMhForDental);
		masMedicalBoardProceedings.setReferToMH(dentalReferToMH);
		masMedicalBoardProceedings.setMenstrualHistory(menstrualHistory);
		masMedicalBoardProceedings.setNoOfPregnancies(noOfPregnancy);
		masMedicalBoardProceedings.setNoOfAbortions(noOfAbortion);
		masMedicalBoardProceedings.setNoOfChildren(noOfChildren);
		masMedicalBoardProceedings.setLastConfinementDate(lastCondinement);
		masMedicalBoardProceedings.setVaginalDischarge(vaginalDischarge);
		masMedicalBoardProceedings.setProlapse(prolapse);
		masMedicalBoardProceedings.setUsgAbdomen(usgAbortion);
		masMedicalBoardProceedings.setGynaecologyDate(gyanaecologyDate);
		masMedicalBoardProceedings
				.setRemarksGynaecology(gyanaecologyRemarks);
		masMedicalBoardProceedings
				.setMedicalBoardFindings(medicalBoardExamination);
		masMedicalBoardProceedings
				.setDateMedicalBoardExam(medicalBoardExaminationDate);

		String diagnosis1 = "";
		String diagnosis2 = "";
		String onsetDiag1 = "";
		String onsetDiag2 = "";
		String placeLastBoard = "";
		String presentConditions = "";
		String dateLastBoard = "";
		String medication = "";
		if (req.getParameter("diagnosis1") != null
				&& !req.getParameter("diagnosis1").equals("")) {
			diagnosis1 = req.getParameter("diagnosis1");
		}
		if (req.getParameter("diagnosis2") != null
				&& !req.getParameter("diagnosis2").equals("")) {
			diagnosis2 = req.getParameter("diagnosis2");
		}
		if (req.getParameter("onsetDiag1") != null
				&& !req.getParameter("onsetDiag1").equals("")) {
			onsetDiag1 = req.getParameter("onsetDiag1");
		}
		if (req.getParameter("onsetDiag2") != null
				&& !req.getParameter("onsetDiag2").equals("")) {
			onsetDiag2 = req.getParameter("onsetDiag2");
		}
		if (req.getParameter("lastMedBoardPlace") != null
				&& !req.getParameter("lastMedBoardPlace").equals("")) {
			placeLastBoard = req.getParameter("lastMedBoardPlace");
		}
		/*
		 * if(req.getParameter("dateLastBoard") != null &&
		 * !req.getParameter("dateLastBoard").equals("")) {
		 * dateLastBoard=req.getParameter("dateLastBoard"); }
		 */
		if (req.getParameter("presentConditions") != null
				&& !req.getParameter("presentConditions").equals("")) {
			presentConditions = req.getParameter("presentConditions");
		}
		if (req.getParameter("medication") != null
				&& !req.getParameter("medication").equals("")) {
			medication = req.getParameter("medication");
		}

		masMedicalBoardProceedings.setDiagnosis1Clini(diagnosis1);
		masMedicalBoardProceedings.setDiagnosis2Clini(diagnosis2);
		masMedicalBoardProceedings.setOnsetDiag1(onsetDiag1);
		masMedicalBoardProceedings.setOnsetDiag2(onsetDiag2);
		masMedicalBoardProceedings.setPlaceLastCatBoard(placeLastBoard);
		if (req.getParameter("dateLastBoard") != null
				&& !req.getParameter("dateLastBoard").equals("")) {
			dateLastBoard = req.getParameter("dateLastBoard");
			masMedicalBoardProceedings.setLastBoardDate(HMSUtil
					.convertStringTypeDateToDateType(dateLastBoard));
		}
		masMedicalBoardProceedings.setPresentCondition(presentConditions);
		masMedicalBoardProceedings.setMedication(medication);

		if (lmp != "" && !lmp.equalsIgnoreCase("")) {
			try {
				masMedicalBoardProceedings.setLmp(HMSUtil
						.dateFormatterDDMMYYYY(lmp));
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		// masMedicalBoardProceedings.setLmp(lmp);
		if (medicalBoardExaminationPlace != 0) {
			MasUnit masUnit1 = new MasUnit();
			masUnit1.setId(medicalBoardExaminationPlace);
			masMedicalBoardProceedings.setPlaceMedicalBoardExam(masUnit1);
		}
		masMedicalBoardProceedings
				.setMedicalBoardSubsequentFind(subsequentMedicalBoardExam);
		masMedicalBoardProceedings
				.setDateMedicalBoardSubsequent(subsequentMedicalBoardExamDate);
		if (subsequentMedicalBoardExamPlace != 0) {
			MasUnit masUnit2 = new MasUnit();
			masUnit2.setId(subsequentMedicalBoardExamPlace);
			masMedicalBoardProceedings
					.setPlaceMedicalBoardSubsequent(masUnit2);

		}
		masMedicalBoardProceedings
				.setApprovingAuthority(ApprovingAuthority);
		masMedicalBoardProceedings
				.setDateApprovingAuthority(ApprovingAuthorityDate);
		if (ApprovingAuthorityPlace != 0) {
			MasUnit masUnit3 = new MasUnit();
			masUnit3.setId(ApprovingAuthorityPlace);
			masMedicalBoardProceedings.setPlaceApprovingAuthority(masUnit3);
		}
		masMedicalBoardProceedings.setSurgeryDate(surgeyDate);
		masMedicalBoardProceedings.setMediceExamDate(medicinExamDate);
		masMedicalBoardProceedings
				.setNearVisionWithGlassCp(withGlassesNearCP);
		masMedicalBoardProceedings
				.setNearVisionWithoutGlassCp(withoutGlassesNearCP);
		masMedicalBoardProceedings.setUR1(sur1);
		masMedicalBoardProceedings.setUR2(sur2);
		masMedicalBoardProceedings.setUR3(sur3);
		masMedicalBoardProceedings.setUR4(sur4);
		masMedicalBoardProceedings.setUR5(sur5);
		masMedicalBoardProceedings.setUR6(sur6);
		masMedicalBoardProceedings.setUR7(sur7);
		masMedicalBoardProceedings.setUR8(sur8);

		masMedicalBoardProceedings.setUL1(sul1);
		masMedicalBoardProceedings.setUL2(sul2);
		masMedicalBoardProceedings.setUL3(sul3);
		masMedicalBoardProceedings.setUL4(sul4);
		masMedicalBoardProceedings.setUL5(sul5);
		masMedicalBoardProceedings.setUL6(sul6);
		masMedicalBoardProceedings.setUL7(sul7);
		masMedicalBoardProceedings.setUL8(sul8);

		masMedicalBoardProceedings.setLR1(slr1);
		masMedicalBoardProceedings.setLR2(slr2);
		masMedicalBoardProceedings.setLR3(slr3);
		masMedicalBoardProceedings.setLR4(slr4);
		masMedicalBoardProceedings.setLR5(slr5);
		masMedicalBoardProceedings.setLR6(slr6);
		masMedicalBoardProceedings.setLR7(slr7);
		masMedicalBoardProceedings.setLR8(slr8);

		masMedicalBoardProceedings.setLL1(sll1);
		masMedicalBoardProceedings.setLL2(sll2);
		masMedicalBoardProceedings.setLL3(sll3);
		masMedicalBoardProceedings.setLL4(sll4);
		masMedicalBoardProceedings.setLL5(sll5);
		masMedicalBoardProceedings.setLL6(sll6);
		masMedicalBoardProceedings.setLL7(sll7);
		masMedicalBoardProceedings.setLL8(sll8);
		masMedicalBoardProceedings.setLastChangedBy(lastChangedBy);
		masMedicalBoardProceedings.setLastChangedDate(lastChangedDate);
		masMedicalBoardProceedings.setLastChangedTime(lastChangedTime);
		masMedicalBoardProceedings.setServiceNo(serviceNo);
		// masMedicalBoardProceedings.setName(name);
		// masMedicalBoardProceedings.setUnit(unit);
		masMedicalBoardProceedings.setServiceiaf(serviceiaf);
		// masMedicalBoardProceedings.setBranch(branch);
		// masMedicalBoardProceedings.setDob(dob);

		masMedicalBoardProceedings.setTypeofcommision(typeOfCommunication);
		masMedicalBoardProceedings.setDateofcommun(dateofcommun);
		masMedicalBoardProceedings.setTotalService(totalservice);
		masMedicalBoardProceedings
				.setPastmedicalhistory(pastmedicalhistory);
		masMedicalBoardProceedings
				.setPresentmedicalhistory(presentmedicalhistory);
		masMedicalBoardProceedings.setPresentMedPeriod(finalMedCat);
		masMedicalBoardProceedings.setShapFactor(shapeFactor);
		masMedicalBoardProceedings.setRecMedPeriod(finalMedCatPeriod);
		masMedicalBoardProceedings.setShapeFactorRec(shapeFactorRec);
		masMedicalBoardProceedings.setIdealweight(idealweight);
		masMedicalBoardProceedings.setOverweight(overweight);
		masMedicalBoardProceedings.setWaist(waist);
		masMedicalBoardProceedings
				.setChestfullexpansion(chestfullexpansion);
		masMedicalBoardProceedings.setBhi(bhi);
		masMedicalBoardProceedings.setRangeofexpansion(rangeofexpansion);
		masMedicalBoardProceedings.setBodyfat(bodyfat);
		masMedicalBoardProceedings.setSignfoldthickness(signfoldthickness);
		masMedicalBoardProceedings.setSportman(sportman);
		masMedicalBoardProceedings.setLastame(lastame);
		masMedicalBoardProceedings.setActualweight(actualweight);

		/**
		 * Added By Mansi
		 */
		if(req.getParameter("sd") != null && !req.getParameter("sd").equals("")){
			masMedicalBoardProceedings.setSD(req.getParameter("sd"));
		}
		/**
		 * End
		 */
		if (req.getParameter(SERVICE_TYPE_ID) != null
				&& !(req.getParameter(SERVICE_TYPE_ID)).equals("0")) {
			MasServiceType serviceType = new MasServiceType();
			serviceType.setId(Integer.parseInt(req
					.getParameter(SERVICE_TYPE_ID)));
			masMedicalBoardProceedings.setServiceType(serviceType);
		}
		if (req.getParameter(RANK_ID) != null
				&& !(req.getParameter(RANK_ID)).equals("0")) {
			MasRank masRank = new MasRank();
			masRank.setId(Integer.parseInt(req.getParameter(RANK_ID)));
			masMedicalBoardProceedings.setRank(masRank);
		}
		if (req.getParameter(TRADE_ID) != null
				&& !(req.getParameter(TRADE_ID)).equals("")) {
			MasTrade masTrade = new MasTrade();
			masTrade.setId(Integer.parseInt(req.getParameter(TRADE_ID)));
			masMedicalBoardProceedings.setTrade(masTrade);
		}
		if (req.getParameter(UNIT_ID) != null
				&& !(req.getParameter(UNIT_ID)).equals("0")) {
			MasUnit unitObj = new MasUnit();
			unitObj.setId(Integer.parseInt(req.getParameter(UNIT_ID)));
			masMedicalBoardProceedings.setUnit(unitObj);
		}
		if (req.getParameter(VISIT_ID) != null
				&& !(req.getParameter(VISIT_ID)).equals("0")) {
			Visit visit = new Visit();
			visit.setId(Integer.parseInt(req.getParameter(VISIT_ID)));
			masMedicalBoardProceedings.setVisit(visit);
		}
		if (req.getParameter(HIN_ID) != null
				&& !(req.getParameter(HIN_ID)).equals("0")) {
			Patient patient = new Patient();
			patient.setId(Integer.parseInt(req.getParameter(HIN_ID)));
			masMedicalBoardProceedings.setHin(patient);
			mapForDS.put("hinId", Integer
					.parseInt(req.getParameter(HIN_ID)));
		}
		if (req.getParameter(FATHER_NAME) != null) {
			masMedicalBoardProceedings.setFatherName(req
					.getParameter(FATHER_NAME));
		}
		if (req.getParameter(RELEVANT_FAMILY_HISTORY) != null) {
			masMedicalBoardProceedings.setRelevantFamilyHistory(req
					.getParameter(RELEVANT_FAMILY_HISTORY));
		}
		if (req.getParameter(DEFECTS_NOT_TO_CAUSE_REJECTION) != null) {
			masMedicalBoardProceedings.setDefectNotToCauseRejection(req
					.getParameter(DEFECTS_NOT_TO_CAUSE_REJECTION));
		}
		if (req.getParameter(FOUND_FIT_IN_CATEGORY) != null) {
			masMedicalBoardProceedings.setFoundFitInCategory(req
					.getParameter(FOUND_FIT_IN_CATEGORY));
		}
		if (req.getParameter(APPOINTMENT_DATE) != null
				&& !req.getParameter(APPOINTMENT_DATE).equals("")) {
			masMedicalBoardProceedings.setAppointmentDate(HMSUtil
					.convertStringTypeDateToDateType(req
							.getParameter(APPOINTMENT_DATE)));
		}
		if (req.getParameter(APPOINTMENT_TIME) != null
				&& !req.getParameter(APPOINTMENT_TIME).equals("")) {
			masMedicalBoardProceedings.setAppointmentTime(req
					.getParameter(APPOINTMENT_TIME));
		}
		if (req.getParameter("medicalExamType") != null
				&& !req.getParameter("medicalExamType").equals("")) {
			masMedicalBoardProceedings.setMedicalExamType(req
					.getParameter("medicalExamType"));
		}
		if (req.getParameter("apparentAge") != null
				&& !req.getParameter("apparentAge").equals("")) {
			masMedicalBoardProceedings.setApparentAge(req
					.getParameter("apparentAge"));
		}
		if (req.getParameter(APPOINTMENT_TIME) != null
				&& !req.getParameter(APPOINTMENT_TIME).equals("")) {
			masMedicalBoardProceedings.setAppointmentTime(req
					.getParameter(APPOINTMENT_TIME));
		}
		if (req.getParameter(HIGHER_MENTAL_FUNCTION) != null
				&& !req.getParameter(HIGHER_MENTAL_FUNCTION).equals("")) {
			masMedicalBoardProceedings.setHigherMentalFunction(req
					.getParameter(HIGHER_MENTAL_FUNCTION));
		}
		if (req.getParameter(SPEECH) != null
				&& !req.getParameter(SPEECH).equals("")) {
			masMedicalBoardProceedings.setSpeech(req.getParameter(SPEECH));
		}
		if (req.getParameter(REFLEXES) != null
				&& !req.getParameter(REFLEXES).equals("")) {
			masMedicalBoardProceedings.setReflexes(req
					.getParameter(REFLEXES));
		}
		if (req.getParameter(TREMORS) != null
				&& !req.getParameter(TREMORS).equals("")) {
			masMedicalBoardProceedings
					.setTremors(req.getParameter(TREMORS));
		}
		if (req.getParameter(SELF_BALANCING_TEST) != null
				&& !req.getParameter(SELF_BALANCING_TEST).equals("")) {
			masMedicalBoardProceedings.setSelfBalancingTest(req
					.getParameter(SELF_BALANCING_TEST));
		}
		/*
		 * if(req.getParameter(GIVE_ON) != null &&
		 * !req.getParameter(GIVE_ON).equals("")){
		 * masMedicalBoardProceedings.setGiveOn(req.getParameter(GIVE_ON));
		 * } if(req.getParameter(DOM) != null &&
		 * !req.getParameter(DOM).equals("")){
		 * masMedicalBoardProceedings.setDom
		 * (HMSUtil.convertStringTypeDateToDateType(req.getParameter(DOM)));
		 * }
		 */
		
		String specialValue="";
		if(req.getParameter("specialValue") != null
				&& !req.getParameter("specialValue").equals("")){
			specialValue=req.getParameter("specialValue");
			masMedicalBoardProceedings.setSpecialistRefer(specialValue);
		}
		if (req.getParameter(CORONORY_RISK_FACTOR) != null
				&& !req.getParameter(CORONORY_RISK_FACTOR).equals("")) {
			masMedicalBoardProceedings.setCoronaryRiskFactor(req
					.getParameter(CORONORY_RISK_FACTOR));
		}
		if (req.getParameter(FM_DM) != null
				&& !req.getParameter(FM_DM).equals("")) {
			masMedicalBoardProceedings.setFmdm(req.getParameter(FM_DM));
		}
		if (req.getParameter(SIGNED_BY) != null
				&& !req.getParameter(SIGNED_BY).equals("")) {
			masMedicalBoardProceedings.setSignedBy(req
					.getParameter(SIGNED_BY));
		}
		if (req.getParameter(APPROVED_BY) != null
				&& !req.getParameter(APPROVED_BY).equals("")) {
			masMedicalBoardProceedings.setApprovedBy(req
					.getParameter(APPROVED_BY));
		}
		if (req.getParameter(SEND_TO) != null
				&& !req.getParameter(SEND_TO).equals("")) {
			masMedicalBoardProceedings.setSendTo(req.getParameter(SEND_TO));
		}
		if (req.getParameter("liver") != null
				&& !req.getParameter("liver").equals("")) {
			masMedicalBoardProceedings.setLiver(req.getParameter("liver"));
		}
		if (req.getParameter("spleen") != null
				&& !req.getParameter("spleen").equals("")) {
			masMedicalBoardProceedings
					.setSpleen(req.getParameter("spleen"));
		}
		if (req.getParameter("upperLimbs") != null
				&& !req.getParameter("upperLimbs").equals("")) {
			masMedicalBoardProceedings.setUpperLimbs(req
					.getParameter("upperLimbs"));
		}
		if (req.getParameter("locomotion") != null
				&& !req.getParameter("locomotion").equals("")) {
			masMedicalBoardProceedings.setLocomotion(req
					.getParameter("locomotion"));
		}
		if (req.getParameter("chestMeasurement") != null
				&& !req.getParameter("chestMeasurement").equals("")) {
			masMedicalBoardProceedings.setChestMeasurement(req
					.getParameter("chestMeasurement"));
		}
		if (req.getParameter("fullExpiration") != null
				&& !req.getParameter("fullExpiration").equals("")) {
			masMedicalBoardProceedings.setFullExpiration(req
					.getParameter("fullExpiration"));
		}
		if (req.getParameter("abnormalities") != null
				&& !req.getParameter("abnormalities").equals("")) {
			masMedicalBoardProceedings.setAbnormalities(req
					.getParameter("abnormalities"));
		}
		if (req.getParameter("otherAbnormalities") != null
				&& !req.getParameter("otherAbnormalities").equals("")) {
			masMedicalBoardProceedings.setAnyOtheAbnormalities(req
					.getParameter("otherAbnormalities"));
		}
		if (req.getParameter("anyEvidenceOfSkin") != null
				&& !req.getParameter("anyEvidenceOfSkin").equals("")) {
			masMedicalBoardProceedings.setAnyEvidenceOfSkin(req
					.getParameter("anyEvidenceOfSkin"));
		}
		if (req.getParameter("centralNervousSystem") != null
				&& !req.getParameter("centralNervousSystem").equals("")) {
			masMedicalBoardProceedings.setCentralNervousSystem(req
					.getParameter("centralNervousSystem"));
		}
		if (req.getParameter("mentalInstability") != null
				&& !req.getParameter("mentalInstability").equals("")) {
			masMedicalBoardProceedings.setMentalInstability(req
					.getParameter("mentalInstability"));
		}
		if (req.getParameter("essentialInstability") != null
				&& !req.getParameter("essentialInstability").equals("")) {
			masMedicalBoardProceedings.setEssentialInstability(req
					.getParameter("essentialInstability"));
		}
		if (req.getParameter("smoker") != null
				&& !req.getParameter("smoker").equals("")) {
			masMedicalBoardProceedings
					.setSmoker(req.getParameter("smoker"));
		}
		if (req.getParameter("drinker") != null
				&& !req.getParameter("drinker").equals("")) {
			masMedicalBoardProceedings.setDrinker(req
					.getParameter("drinker"));
		}
		if (req.getParameter("allergies") != null
				&& !req.getParameter("allergies").equals("")) {
			masMedicalBoardProceedings.setAllergies(req
					.getParameter("allergies"));
		}
		if (req.getParameter("locomoterSystem") != null
				&& !req.getParameter("locomoterSystem").equals("")) {
			masMedicalBoardProceedings.setLocomoterSystem(req
					.getParameter("locomoterSystem"));
		}
		if (req.getParameter("spine") != null
				&& !req.getParameter("spine").equals("")) {
			masMedicalBoardProceedings.setSpine(req.getParameter("spine"));
		}
		if (req.getParameter("tympanicMembranceIntact") != null
				&& !req.getParameter("tympanicMembranceIntact").equals("")) {
			masMedicalBoardProceedings.setTympanicMembranceIntact(req
					.getParameter("tympanicMembranceIntact"));
		}
		if (req.getParameter("mobility") != null
				&& !req.getParameter("mobility").equals("")) {
			masMedicalBoardProceedings.setMobilityR(req
					.getParameter("mobility"));
		}
		if (req.getParameter("noseThroatSinuses") != null
				&& !req.getParameter("noseThroatSinuses").equals("")) {
			masMedicalBoardProceedings.setNoseThroatSinuses(req
					.getParameter("noseThroatSinuses"));
		}
		if (req.getParameter(REPORTED_DATE) != null
				&& !req.getParameter(REPORTED_DATE).equals("")) {
			masMedicalBoardProceedings.setDateOfReporting(HMSUtil
					.convertStringTypeDateToDateType(req
							.getParameter(REPORTED_DATE)));
		}
		if (req.getParameter(KNOWN_ALLERGY) != null
				&& !req.getParameter(KNOWN_ALLERGY).equals("")) {
			masMedicalBoardProceedings.setAllergies(req
					.getParameter(KNOWN_ALLERGY));
		}
		if (req.getParameter(BATCH_NO) != null
				&& !req.getParameter(BATCH_NO).equals("")) {
			masMedicalBoardProceedings.setBatchNo(req
					.getParameter(BATCH_NO));
		}
		if (req.getParameter("cmMdRemarks") != null
				&& !req.getParameter("cmMdRemarks").equals("")) {
			masMedicalBoardProceedings.setMdRemarks(req
					.getParameter("cmMdRemarks"));
		}
		if (req.getParameter(AUTHORITY_OF_BOARD) != null
				&& !req.getParameter(AUTHORITY_OF_BOARD).equals("")) {
			masMedicalBoardProceedings.setAuthority(req
					.getParameter(AUTHORITY_OF_BOARD));
		}
		if (req.getParameter(PLACE) != null
				&& !req.getParameter(PLACE).equals("")) {
			masMedicalBoardProceedings.setPlace(req.getParameter(PLACE));
		}
		if (req.getParameter(DATE_DISCHARGE) != null
				&& !req.getParameter(DATE_DISCHARGE).equals("")) {
			masMedicalBoardProceedings.setDateDischarge(HMSUtil
					.convertStringTypeDateToDateType(req
							.getParameter(DATE_DISCHARGE)));
		}
		if (req.getParameter(DATE_OF_RELEASE) != null
				&& !req.getParameter(DATE_OF_RELEASE).equals("")) {
			masMedicalBoardProceedings.setDateRelease(HMSUtil
					.convertStringTypeDateToDateType(req
							.getParameter(DATE_OF_RELEASE)));
		}
		if (req.getParameter("Howlonghashe") != null
				&& !req.getParameter("Howlonghashe").equals("")) {
			masMedicalBoardProceedings.setHowlonghashe(HMSUtil
					.convertStringTypeDateToDateType(req
							.getParameter("Howlonghashe")));
		}
		if (req.getParameter("SinceWhen") != null
				&& !req.getParameter("SinceWhen").equals("")) {
			masMedicalBoardProceedings.setSinceWhen(HMSUtil
					.convertStringTypeDateToDateType(req
							.getParameter("SinceWhen")));
		}
		if (req.getParameter("SinceWhen1") != null
				&& !req.getParameter("SinceWhen1").equals("")) {
			masMedicalBoardProceedings.setSinceWhen1(HMSUtil
					.convertStringTypeDateToDateType(req
							.getParameter("SinceWhen")));
		}
		if (req.getParameter("CommandingOfficerDate") != null
				&& !req.getParameter("CommandingOfficerDate").equals("")) {
			masMedicalBoardProceedings.setCommandingOfficerDate(HMSUtil
					.convertStringTypeDateToDateType(req
							.getParameter("CommandingOfficerDate")));
		}
		if (req.getParameter("Datesoflastleave") != null
				&& !req.getParameter("Datesoflastleave").equals("")) {
			masMedicalBoardProceedings.setDatesoflastleave(HMSUtil
					.convertStringTypeDateToDateType(req
							.getParameter("Datesoflastleave")));
		}
		if (req.getParameter(MARITAL_STATUS_ID) != null
				&& !req.getParameter(MARITAL_STATUS_ID).equals("")) {
			MasMaritalStatus maritalstatus = new MasMaritalStatus();
			maritalstatus.setId(Integer.parseInt(req
					.getParameter(MARITAL_STATUS_ID)));
			masMedicalBoardProceedings.setMaritalStatus(maritalstatus);

		}

		if (req.getParameter(SERVICE_TYPE_ID) != null
				&& !req.getParameter(SERVICE_TYPE_ID).equals("")) {
			masMedicalBoardProceedings.setBatchNo(req
					.getParameter(SERVICE_TYPE_ID));
		}
		if (req.getParameter(DATE_DISEASE) != null
				&& !req.getParameter(DATE_DISEASE).equals("")) {
			masMedicalBoardProceedings.setDateDisease(HMSUtil
					.convertStringTypeDateToDateType(req
							.getParameter(DATE_DISEASE)));
		}
		if (req.getParameter(PLACE_DISEASE) != null
				&& !req.getParameter(PLACE_DISEASE).equals("")) {
			masMedicalBoardProceedings.setPlacedisease(req
					.getParameter(PLACE_DISEASE));
		}
		if (req.getParameter(WHERE_TREATED) != null
				&& !req.getParameter(WHERE_TREATED).equals("")) {
			masMedicalBoardProceedings.setWheretreated(req
					.getParameter(WHERE_TREATED));
		}
		if (req.getParameter(DATE_APPROXIMATE) != null
				&& !req.getParameter(DATE_APPROXIMATE).equals("")) {
			masMedicalBoardProceedings.setDateapproximate(HMSUtil
					.convertStringTypeDateToDateType(req
							.getParameter(DATE_APPROXIMATE)));
		}
		if (req.getParameter(DISABILITY_BEFORE) != null
				&& !req.getParameter(DISABILITY_BEFORE).equals("")) {
			masMedicalBoardProceedings.setDisabilitybefore(req
					.getParameter(DISABILITY_BEFORE));
		}
		if (req.getParameter(CLAMING_DISABILITY) != null
				&& !req.getParameter(CLAMING_DISABILITY).equals("")) {
			masMedicalBoardProceedings.setClamingdisability(req
					.getParameter(CLAMING_DISABILITY));
		}
		if (req.getParameter(DATE_DISCHARGE) != null
				&& !req.getParameter(DATE_DISCHARGE).equals("")) {
			masMedicalBoardProceedings.setDateDischarge(HMSUtil
					.convertStringTypeDateToDateType(req
							.getParameter(DATE_DISCHARGE)));
		}
		if (req.getParameter("medicalType") != null
				&& !req.getParameter("medicalType").equals("")) {
			masMedicalBoardProceedings.setMedicalType(req
					.getParameter("medicalType"));
		}
		if (req.getParameter("patientheight") != null
				&& !req.getParameter("patientheight").equals("")) {
			masMedicalBoardProceedings.setPatientheight(req
					.getParameter("patientheight"));
		}
		if (req.getParameter("patientweight") != null
				&& !req.getParameter("patientweight").equals("")) {
			masMedicalBoardProceedings.setPatientweight(req
					.getParameter("patientweight"));
		}
		if (req.getParameter(RECORDOFFICE) != null
				&& !req.getParameter(RECORDOFFICE).equals("")) {
			masMedicalBoardProceedings.setRecordoffice(req
					.getParameter(RECORDOFFICE));
		}
		if (req.getParameter(CEASEDDUTY) != null
				&& !req.getParameter(CEASEDDUTY).equals("")) {
			masMedicalBoardProceedings.setCeaseduty(HMSUtil
					.convertStringTypeDateToDateType(req
							.getParameter(CEASEDDUTY)));
		}
		if (req.getParameter(DISABILITY) != null
				&& !req.getParameter(DISABILITY).equals("")) {
			masMedicalBoardProceedings.setDisability(req
					.getParameter(DISABILITY));
		}
		if (req.getParameter(DISABILITY_ATTRIBUTABLE_DESC) != null
				&& !req.getParameter(DISABILITY_ATTRIBUTABLE_DESC).equals(
						"")) {
			masMedicalBoardProceedings.setDisabilityAttribute(req
					.getParameter(DISABILITY_ATTRIBUTABLE_DESC));
		}
		if (req.getParameter(AGGRAVATED_SERVICE_LABEL) != null
				&& !req.getParameter(AGGRAVATED_SERVICE_LABEL).equals("")) {
			masMedicalBoardProceedings.setAggravatedService(req
					.getParameter(AGGRAVATED_SERVICE_LABEL));
		}
		if (req.getParameter(AGGRAVATED_SERVICE_DESC) != null
				&& !req.getParameter(AGGRAVATED_SERVICE_DESC).equals("")) {
			masMedicalBoardProceedings.setAggravatedServiceDesc(req
					.getParameter(AGGRAVATED_SERVICE_DESC));
		}
		if (req.getParameter(CASE_SHEET) != null
				&& !req.getParameter(CASE_SHEET).equals("")) {
			masMedicalBoardProceedings.setCaseSheet(req
					.getParameter(CASE_SHEET));
		}
		if (req.getParameter(CONDITION_OF_GUMS) != null
				&& !req.getParameter(CONDITION_OF_GUMS).equals("")) {
			masMedicalBoardProceedings.setConditionOfGums(req
					.getParameter(CONDITION_OF_GUMS));
		}
		if (req.getParameter(MEDICAL_CATEGORY) != null
				&& !req.getParameter(MEDICAL_CATEGORY).equals("")) {
			masMedicalBoardProceedings.setCaseSheet(req
					.getParameter(MEDICAL_CATEGORY));
		}
		if (req.getParameter(CATEGORIZATION_PLACE) != null
				&& !req.getParameter(CATEGORIZATION_PLACE).equals("")) {
			masMedicalBoardProceedings.setCategoryplace(req
					.getParameter(CATEGORIZATION_PLACE));
		}
		if (req.getParameter(CATEGORIZATION_DATE) != null
				&& !req.getParameter(CATEGORIZATION_DATE).equals("")) {
			masMedicalBoardProceedings.setCategorydate(HMSUtil
					.convertStringTypeDateToDateType(req
							.getParameter(CATEGORIZATION_DATE)));
		}
		if (req.getParameter(PREVIOUS_DISABLEMENT) != null
				&& !req.getParameter(PREVIOUS_DISABLEMENT).equals("")) {
			masMedicalBoardProceedings.setPreviousDisablement(req
					.getParameter(PREVIOUS_DISABLEMENT));
		}
		if (req.getParameter(PRESENT_DISABLEMENT) != null
				&& !req.getParameter(PRESENT_DISABLEMENT).equals("")) {
			masMedicalBoardProceedings.setPresentDisablement(req
					.getParameter(PRESENT_DISABLEMENT));
		}
		if (req.getParameter("dentalValue") != null
				&& !req.getParameter("dentalValue").equals("")) {
			masMedicalBoardProceedings.setDentalValue(req
					.getParameter("dentalValue"));
		}
		if (req.getParameter("Personalans") != null
				&& !req.getParameter("Personalans").equals("")) {
			masMedicalBoardProceedings.setPersonalans(req
					.getParameter("Personalans"));
		}
		if (req.getParameter("SpecialistReport") != null
				&& !req.getParameter("SpecialistReport").equals("")) {
			masMedicalBoardProceedings.setSpecialistReport(req
					.getParameter("SpecialistReport"));
		}
		if (req.getParameter("Treatment") != null
				&& !req.getParameter("Treatment").equals("")) {
			masMedicalBoardProceedings.setTreatment(req
					.getParameter("Treatment"));
		}
		if (req.getParameter("PresentConditionin") != null
				&& !req.getParameter("PresentConditionin").equals("")) {
			masMedicalBoardProceedings.setPresentConditionin(req
					.getParameter("PresentConditionin"));
		}
		if (req.getParameter("Hips") != null
				&& !(req.getParameter("Hips").equals(""))) {
			masMedicalBoardProceedings.setHips(req.getParameter("Hips"));
		}
		if (req.getParameter("WHR") != null
				&& !(req.getParameter("WHR").equals(""))) {
			masMedicalBoardProceedings.setWhr(req.getParameter("WHR"));
		}

		if (req.getParameter("MonthlySerialNo") != null
				&& !req.getParameter("MonthlySerialNo").equals("")) {
			masMedicalBoardProceedings.setMonthlySerialNo(req
					.getParameter("MonthlySerialNo"));
		}
		if (req.getParameter("Investigated") != null
				&& !req.getParameter("Investigated").equals("")) {
			masMedicalBoardProceedings.setInvestigated(req
					.getParameter("Investigated"));
		}
		if (req.getParameter(REASOPNS_VARIATION) != null
				&& !req.getParameter(REASOPNS_VARIATION).equals("")) {
			masMedicalBoardProceedings.setReasopnsvariation(req
					.getParameter(REASOPNS_VARIATION));
		}
		if (req.getParameter(RESTRICTION_EMPLOYMENT) != null
				&& !req.getParameter(RESTRICTION_EMPLOYMENT).equals("")) {
			masMedicalBoardProceedings.setRestrictionemployment(req
					.getParameter(RESTRICTION_EMPLOYMENT));
		}
		if (req.getParameter(INSTRUCTION_BY_PRESIDENT) != null
				&& !req.getParameter(INSTRUCTION_BY_PRESIDENT).equals("")) {
			masMedicalBoardProceedings.setInstructionByPresident(req
					.getParameter(INSTRUCTION_BY_PRESIDENT));
		}
		if (req.getParameter(BOARD_PRESIDENT) != null
				&& !req.getParameter(BOARD_PRESIDENT).equals("")) {
			masMedicalBoardProceedings.setBoardPresident(req
					.getParameter(BOARD_PRESIDENT));
		}
		if (req.getParameter(BOARD_MEMBER) != null
				&& !req.getParameter(BOARD_MEMBER).equals("")) {
			masMedicalBoardProceedings.setBoardmember(req
					.getParameter(BOARD_MEMBER));
		}
		if (req.getParameter(UPLOADED_DATE) != null
				&& !req.getParameter(UPLOADED_DATE).equals("")) {
			masMedicalBoardProceedings.setUploadeddate(HMSUtil
					.convertStringTypeDateToDateType(req
							.getParameter(UPLOADED_DATE)));
		}
		if (req.getParameter(OPINION_DATE) != null
				&& !req.getParameter(OPINION_DATE).equals("")) {
			masMedicalBoardProceedings.setOpiniondate(HMSUtil
					.convertStringTypeDateToDateType(req
							.getParameter(OPINION_DATE)));
		}
		if (req.getParameter(PAST_MEDICAL_CATEGORY) != null
				&& !(req.getParameter(PAST_MEDICAL_CATEGORY)).equals("0")) {
			Category categ1 = new Category();
			categ1.setCategoryid(Integer.parseInt(req
					.getParameter(PAST_MEDICAL_CATEGORY)));
			masMedicalBoardProceedings.setPastMedicalCategory(categ1);
		}
		if (req.getParameter(PRESENT_MEDICAL_CATEGORY) != null
				&& !(req.getParameter(PRESENT_MEDICAL_CATEGORY))
						.equals("0")) {
			Category categ2 = new Category();
			categ2.setCategoryid(Integer.parseInt(req
					.getParameter(PRESENT_MEDICAL_CATEGORY)));
			masMedicalBoardProceedings.setPresentMedicalCategory(categ2);
		}
		if (req.getParameter(PREVIOUS_DISABLEMENT) != null
				&& !(req.getParameter(PREVIOUS_DISABLEMENT)).equals("0")) {
			Disability dis1 = new Disability();
			dis1.setDisabilityid(Integer.parseInt(req
					.getParameter(PREVIOUS_DISABLEMENT)));
			masMedicalBoardProceedings.setPastDisability(dis1);
		}
		if (req.getParameter(PRESENT_DISABLEMENT) != null
				&& !(req.getParameter(PRESENT_DISABLEMENT)).equals("0")) {
			Disability dis2 = new Disability();
			dis2.setDisabilityid(Integer.parseInt(req
					.getParameter(PRESENT_DISABLEMENT)));
			masMedicalBoardProceedings.setPresentDisability(dis2);
		}
		/**
		 * Code By Ritu Date 01 May 2012
		 */
		if (req.getParameter("medicalOfficer") != null
				&& !(req.getParameter("medicalOfficer").equals("0"))) {
			MasEmployee employee = new MasEmployee();
			employee.setId(Integer.parseInt(req
					.getParameter("medicalOfficer")));
			masMedicalBoardProceedings.setForwardMO(employee);
		}
		/**
		 * End
		 */

		if (req.getParameter("visitNumberForReport") != null
				&& !req.getParameter("visitNumberForReport").equals("")) {
			visitNumberForReport = Integer.parseInt(req
					.getParameter("visitNumberForReport"));

		}
		String medicaltype = masMedicalBoardProceedings
				.getMedicalExamType();

		if (req.getParameter("data") != null
				&& !req.getParameter("data").equals("")) {
			data = (String) req.getParameter("data");
		}

		if (req.getParameter("Labresult").equalsIgnoreCase("present")
				&& data != null) {
			if (data.equalsIgnoreCase("farwarded")) {
				// masMedicalBoardProceedings.setStatus("f");
				masMedicalBoardProceedings.setStatus("s");
			} else {
				masMedicalBoardProceedings.setStatus("p");
			}
			masMedicalBoardProceedings.setModate(new Date());
		}else if (req.getParameter("specialValue") != null
				&& !(req.getParameter("specialValue").equals(""))
				&& req.getParameter("specialValue").equals("y")){
			masMedicalBoardProceedings.setStatus("f");
		} else if (!masMedicalBoardProceedings.getStatus()
				.equalsIgnoreCase("p")) {
			// masMedicalBoardProceedings.setStatus("p");
		}
		MasMedicalExaminationDetail medicaldetail = new MasMedicalExaminationDetail();
		List<Integer> serialnolist = new ArrayList<Integer>();
		List<Integer> serviceidlist = new ArrayList<Integer>();
		List<String> fromlist = new ArrayList<String>();
		List<Integer> presentMedicalCategoryList = new ArrayList<Integer>();
		List<String> tolist = new ArrayList<String>();
		List<String> placelist = new ArrayList<String>();
		List<String> pnolist = new ArrayList<String>();
		List<Integer> serialnolist1 = new ArrayList<Integer>();
		List<String> illnesslist = new ArrayList<String>();
		List<Date> particulardatelist = new ArrayList<Date>();
		List<Integer> rankidlist = new ArrayList<Integer>();
		List<String> treatedlist = new ArrayList<String>();
		List<Date> approximatedatelist = new ArrayList<Date>();
		List<String> placelist1 = new ArrayList<String>();
		List<String> principallist = new ArrayList<String>();
		List<Date> origindatelist = new ArrayList<Date>();
		List<Date> medicalcatdatelist = new ArrayList<Date>();
		List<Date> nextcatdatelist = new ArrayList<Date>();
		List<Integer> disabilityIdList = new ArrayList<Integer>();
		List<Integer> icdIdList = new ArrayList<Integer>();
		List<Integer> disabilitygroupIdList = new ArrayList<Integer>();
		List<Integer> disabilityList = new ArrayList<Integer>();
		List<Date> disabilitydateList = new ArrayList<Date>();
		List<Integer> disabilityrankList = new ArrayList<Integer>();
		List<String> disabilityplaceList = new ArrayList<String>();
		List<Integer> disabilityunitList = new ArrayList<Integer>();
		List<String> disabilityRemarkList = new ArrayList<String>();
		List<String> disabilityAggravationList = new ArrayList<String>();

		List<String> prevDisabilitiesList = new ArrayList<String>();
		List<String> pastDisabilitiesList = new ArrayList<String>();
		List<String> variationReasonList = new ArrayList<String>();
		
		List<String> shapeFactorDetailList = new ArrayList<String>();
		List<String> medCatPeriodDisList = new ArrayList<String>();
		
		List<Integer> categoryDislist = new ArrayList<Integer>();
		List<Integer> compCategoryList = new ArrayList<Integer>();
		List<String> medCatPeriodList = new ArrayList<String>();
		List<String> compCatePeriodList = new ArrayList<String>();
		int k = 0;
		int hdbvalue = 1;
		int hdbvalue2 = 1;
		if (medicaltype.equalsIgnoreCase("Initial Medical Board AFMSF 15")
				|| medicaltype
						.equalsIgnoreCase("Medical Board Rel/Invalidment AFMSF 16")
				|| medicaltype
						.equalsIgnoreCase("Medical Board Review AFMSF 15")) {
			if (req.getParameter("hdb") != null
					&& Integer.parseInt(req.getParameter("hdb")) != 1) {
				hdbvalue = Integer.parseInt(req.getParameter("hdb"));
			}
			for (int i = 1; i <= hdbvalue; i++) {

				if (req.getParameter(SERVICEID + i) != null
						&& !req.getParameter(SERVICEID + i).equals("")) {
					// if(!req.getParameter(SERVICEID+ i).equals("")){
					serviceidlist.add(Integer.parseInt(req
							.getParameter(SERVICEID + i)));
					/*
					 * }else{ serviceidlist.add(0); }
					 */
				} else {
					serviceidlist.add(0);
				}
				if (req.getParameter(SIRIAL_NO + i) != null
						&& !req.getParameter(SIRIAL_NO + i).equals("")) {
					serialnolist.add(i);
				} else {
					serialnolist.add(0);
				}

				if (req.getParameter(FROM + i) != null
						&& !req.getParameter(FROM + i).equals("")) {
					fromlist.add(req.getParameter(FROM + i));
				} else {
					fromlist.add("");
				}
				if (req.getParameter(PRESENT_MEDICAL_CATEGORY + i) != null
						&& !req.getParameter(PRESENT_MEDICAL_CATEGORY + i)
								.equals("")) {
					presentMedicalCategoryList.add(Integer.parseInt(req
							.getParameter(PRESENT_MEDICAL_CATEGORY + i)));
				} else {
					presentMedicalCategoryList.add(0);
				}
				if (req.getParameter(TO + i) != null
						&& !req.getParameter(TO + i).equals("")) {
					tolist.add(req.getParameter(TO + i));
				} else {
					tolist.add("");
				}
				if (req.getParameter(PLACE + i) != null
						&& !req.getParameter(PLACE + i).equals("")) {
					placelist.add(req.getParameter(PLACE + i));
				} else {
					placelist.add("");
				}
				if (req.getParameter(P_NO + i) != null
						&& !req.getParameter(P_NO + i).equals("")) {
					pnolist.add(req.getParameter(P_NO + i));
				} else {
					pnolist.add("");
				}
				if (req.getParameter(PRINCIPAL + i) != null
						&& !req.getParameter(PRINCIPAL + i).equals("")) {
					principallist.add(req.getParameter(PRINCIPAL + i));
				} else {
					principallist.add("");
				}

				if (req.getParameter(ORIGIN_DATE + i) != null
						&& !req.getParameter(ORIGIN_DATE + i).equals("")) {
					origindatelist.add(HMSUtil
							.convertStringTypeDateToDateType(req
									.getParameter(ORIGIN_DATE + i)));
				} else {
					origindatelist.add(null);
				}

				if (req.getParameter(MEDICAL_CAT_DATE + i) != null
						&& !req.getParameter(MEDICAL_CAT_DATE + i).equals(
								"")) {
					medicalcatdatelist.add(HMSUtil
							.convertStringTypeDateToDateType(req
									.getParameter(MEDICAL_CAT_DATE + i)));
				} else {
					medicalcatdatelist.add(null);
				}
                if (req.getParameter("shapeFactorDetail" + i) != null
						&& !req.getParameter("shapeFactorDetail" + i).equals(
								"")) {
                	shapeFactorDetailList.add(req.getParameter("shapeFactorDetail" + i));
				} else {
					shapeFactorDetailList.add(null);
				}
                String medCatDurationDis="";
                if (req.getParameter("medCatPeriodDis"+i) != null) {
        			if (req.getParameter("medCatDurationDis"+i) != null) {
        				String durationDis = req.getParameter("medCatDurationDis"+i);
        				medCatDurationDis = req.getParameter("medCatPeriodDis"+i).concat(" ").concat(durationDis);
        			}
        			medCatPeriodDisList.add(medCatDurationDis);
        		}else{
        			medCatPeriodDisList.add(null);
        		}
                
				if (req.getParameter(NEXT_CAT_DATE + i) != null
						&& !req.getParameter(NEXT_CAT_DATE + i).equals("")) {
					nextcatdatelist.add(HMSUtil
							.convertStringTypeDateToDateType(req
									.getParameter(NEXT_CAT_DATE + i)));
				} else {
					nextcatdatelist.add(null);
				}
				if (req.getParameter("aggravation" + i) != null
						&& !req.getParameter("aggravation" + i).equals("")) {
					disabilityAggravationList.add(req
							.getParameter("aggravation" + i));
				} else {
					disabilityAggravationList.add("");
				}
				if (req.getParameter("remarks" + i) != null
						&& !req.getParameter("remarks" + i).equals("")) {
					disabilityRemarkList.add(req
							.getParameter("remarks" + i));
				} else {
					disabilityRemarkList.add("");
				}
				/*
				 * Data Will Come from MO List<String> prevDisabilitiesList
				 * = new ArrayList<String>(); List<String>
				 * pastDisabilitiesList = new ArrayList<String>();
				 * List<String> variationReasonList = new
				 * ArrayList<String>();
				 */

				if (req.getParameter("prevDisabilities" + i) != null
						&& !req.getParameter("prevDisabilities" + i)
								.equals("")) {
					prevDisabilitiesList.add(req
							.getParameter("prevDisabilities" + i));
				} else {
					prevDisabilitiesList.add("");
				}
				if (req.getParameter("pastDisabilities" + i) != null
						&& !req.getParameter("pastDisabilities" + i)
								.equals("")) {
					pastDisabilitiesList.add(req
							.getParameter("pastDisabilities" + i));
				} else {
					pastDisabilitiesList.add("");
				}
				if (req.getParameter("variationReason" + i) != null
						&& !req.getParameter("variationReason" + i).equals(
								"")) {
					variationReasonList.add(req
							.getParameter("variationReason" + i));
				} else {
					variationReasonList.add("");
				}
				// temp1=temp1+1;
				
				
				if (req.getParameter("categoryForDisable" + i) != null
						&& !req.getParameter("categoryForDisable" + i)
								.equals("0")) {
					categoryDislist.add(Integer.parseInt(req
							.getParameter("categoryForDisable" + i)));
				} else {
					categoryDislist.add(null);
				}
				if (req.getParameter("compositeCategory" + i) != null
						&& !req.getParameter("compositeCategory" + i)
								.equals("0")) {
					compCategoryList.add(Integer.parseInt(req.getParameter("compositeCategory" + i)));
				} else {
					compCategoryList.add(null);
				}
				
				String medCatPeriodComp="";
                if (req.getParameter("medCatPeriodComp"+i) != null) {
        			if (req.getParameter("medCatDurationComp"+i) != null) {
        				String medCatPeriodCompDis = req.getParameter("medCatDurationComp"+i);
        				medCatPeriodComp = req.getParameter("medCatPeriodComp"+i).concat(" ").concat(medCatPeriodCompDis);
        			}
        			compCatePeriodList.add(medCatPeriodComp);
        		}else{
        			compCatePeriodList.add(null);
        		}
				
				 String medCatDuration="";
	                if (req.getParameter("medCatPeriod"+i) != null) {
	        			if (req.getParameter("medCatDuration"+i) != null) {
	        				String duration = req.getParameter("medCatDuration"+i);
	        				medCatDuration = req.getParameter("medCatPeriod"+i).concat(" ").concat(duration);
	        			}
	        			medCatPeriodList.add(medCatDuration);
	        		}else{
	        			medCatPeriodList.add(null);
	        		}
			}
			mapForDS.put("categoryDislist", categoryDislist);
			mapForDS.put("compCategoryList", compCategoryList);
			mapForDS.put("compCatePeriodList", compCatePeriodList);
			mapForDS.put("medCatPeriodList", medCatPeriodList);
			
			mapForDS.put("hdbvalue", hdbvalue);
			mapForDS.put("hiddenValue", hiddenValue);
			mapForDS.put("serviceidlist", serviceidlist);
			mapForDS.put("serialnolist", serialnolist);
			mapForDS.put("fromlist", fromlist);
			mapForDS.put("presentMedicalCategoryList",
					presentMedicalCategoryList);
			mapForDS.put("disabilityAggravationList",
					disabilityAggravationList);
			mapForDS.put("disabilityRemarkList", disabilityRemarkList);

			mapForDS.put("prevDisabilitiesList", prevDisabilitiesList);
			mapForDS.put("pastDisabilitiesList", pastDisabilitiesList);
			mapForDS.put("variationReasonList", variationReasonList);
			mapForDS.put("tolist", tolist);
			mapForDS.put("placelist", placelist);
			mapForDS.put("pnolist", pnolist);
			mapForDS.put("principallist", principallist);
			mapForDS.put("origindatelist", origindatelist);
			mapForDS.put("medicalcatdatelist", medicalcatdatelist);
			mapForDS.put("nextcatdatelist", nextcatdatelist);
			mapForDS.put("shapeFactorDetailList",shapeFactorDetailList);
			mapForDS.put("medCatPeriodDisList",medCatPeriodDisList);
		}
		int hdbvalue1 = 1;
		int hiddenValue1 = 1;
		if (medicaltype.equalsIgnoreCase("Initial Medical Board AFMSF 15")
				|| medicaltype
						.equalsIgnoreCase("Medical Board Rel/Invalidment AFMSF 16")) {
			if (req.getParameter("hdb1") != null
					&& Integer.parseInt(req.getParameter("hdb1")) != 1) {
				hdbvalue1 = Integer.parseInt(req.getParameter("hdb1"));
			}
			for (int i = 1; i <= hdbvalue1; i++) {

				/*
				 * if(req.getParameter(SIRIAL_NO1+ i) == ""){
				 * serialnolist1.add(i); }else
				 */if (req.getParameter(SIRIAL_NO1 + i) != null
						&& !req.getParameter(SIRIAL_NO1 + i).equals("")) {
					serialnolist1.add(Integer.parseInt(req
							.getParameter(SIRIAL_NO1 + i)));
				} else {
					serialnolist1.add(0);
				}

				if (req.getParameter(PARTICULAR_DATE + i) != null
						&& !req.getParameter(PARTICULAR_DATE + i)
								.equals("")) {
					particulardatelist.add(HMSUtil
							.convertStringTypeDateToDateType(req
									.getParameter(PARTICULAR_DATE + i)));
				} else {
					particulardatelist.add(null);
				}
				if (req.getParameter(RANK_INDIVIDUAL_ID + i) != null
						&& !req.getParameter(PARTICULAR_DATE + i)
								.equals("")) {
					rankidlist.add(Integer.parseInt(req
							.getParameter(RANK_INDIVIDUAL_ID + i)));
				} else {
					rankidlist.add(0);
				}
				if (req.getParameter(TREATED + i) != null
						&& !req.getParameter(TREATED + i).equals("")) {
					treatedlist.add(req.getParameter(TREATED + i));
				} else {
					treatedlist.add("");
				}
				if (req.getParameter(PLACE1 + i) != null
						&& !req.getParameter(PLACE1 + i).equals("")) {
					placelist1.add(req.getParameter(PLACE1 + i));
				} else {
					placelist1.add("");
				}
				if (req.getParameter(APPROXIMATE_DATE + i) != null
						&& !req.getParameter(APPROXIMATE_DATE + i).equals(
								"")) {
					approximatedatelist.add(HMSUtil
							.convertStringTypeDateToDateType(req
									.getParameter(APPROXIMATE_DATE + i)));
				} else {
					approximatedatelist.add(null);
				}
				if (req.getParameter(DISABILITYID + i) != null
						&& !req.getParameter(DISABILITYID + i).equals("")) {
					disabilityIdList.add(Integer.parseInt(req
							.getParameter(DISABILITYID + i)));
				} else {
					disabilityIdList.add(0);
				}
				if (req.getParameter(ICDID + i) != null
						&& !req.getParameter(ICDID + i).equals("")) {
					icdIdList.add(Integer.parseInt(req.getParameter(ICDID
							+ i)));
				} else {
					icdIdList.add(0);
				}

				if (req.getParameter(DISABILITYGROUPID + i) != null
						&& !req.getParameter(DISABILITYGROUPID + i).equals(
								"")) {
					disabilitygroupIdList.add(Integer.parseInt(req
							.getParameter(DISABILITYGROUPID + i)));
				} else {
					disabilitygroupIdList.add(0);
				}
				if (req.getParameter(ILLNESS + i) != null
						&& !req.getParameter(ILLNESS + i).equals("")) {
					illnesslist.add(req.getParameter(ILLNESS + i));
				} else {
					illnesslist.add("");
				}
				// temp2=temp2+1;
			}
			mapForDS.put("hdbvalue1", hdbvalue1);
			mapForDS.put("hiddenValue1", hiddenValue1);
			mapForDS.put("serialnolist1", serialnolist1);
			mapForDS.put("illnesslist", illnesslist);
			mapForDS.put("particulardatelist", particulardatelist);
			mapForDS.put("rankidlist", rankidlist);
			mapForDS.put("treatedlist", treatedlist);
			mapForDS.put("approximatedatelist", approximatedatelist);
			mapForDS.put("placelist1", placelist1);
			mapForDS.put("disabilityIdList", disabilityIdList);
			mapForDS.put("icdIdList", icdIdList);
			mapForDS.put("disabilitygroupIdList", disabilitygroupIdList);
			masMedicalBoardProceedings.setMedicalType("MedicalBoard");
		}
		if (medicaltype
				.equalsIgnoreCase("Medical Board Rel/Invalidment AFMSF 16")) {
			if (Integer.parseInt(req.getParameter("hdb2")) != 1) {
				hdbvalue2 = Integer.parseInt(req.getParameter("hdb2"));
			}

			int temp2 = 1;
			for (int i = 1; i <= hdbvalue2; i++) {

				if (req.getParameter(DISABILITY_ID + i) != null
						&& !req.getParameter(DISABILITY_ID + i).equals("")) {
					disabilityList.add(Integer.parseInt(req
							.getParameter(DISABILITY_ID + i)));
				} else {
					disabilityList.add(0);
				}
				if (req.getParameter(DISABILITY_RANK_ID + i) != null
						&& !req.getParameter(DISABILITY_RANK_ID + i)
								.equals("")) {
					disabilityrankList.add(Integer.parseInt(req
							.getParameter(DISABILITY_RANK_ID + i)));
				} else {
					disabilityrankList.add(0);
				}
				if (req.getParameter(DISABILITY_DATE + i) != null
						&& !req.getParameter(DISABILITY_DATE + i)
								.equals("")) {
					disabilitydateList.add(HMSUtil
							.convertStringTypeDateToDateType(req
									.getParameter(DISABILITY_DATE + i)));
				} else {
					disabilitydateList.add(null);
				}
				if (req.getParameter(DISABILITY_PLACE + i) != null
						&& !req.getParameter(DISABILITY_PLACE + i).equals(
								"")) {
					disabilityplaceList.add(req
							.getParameter(DISABILITY_PLACE + i));
				} else {
					disabilityplaceList.add("");
				}

				if (req.getParameter(DISABILITY_UNIT + i) != null
						&& !req.getParameter(DISABILITY_UNIT + i)
								.equals("")) {
					disabilityunitList.add(Integer.parseInt(req
							.getParameter(DISABILITY_UNIT + i)));
				} else {
					disabilityunitList.add(0);
				}

			}
			mapForDS.put("hdbvalue2", hdbvalue2);
			mapForDS.put("disabilityList", disabilityList);
			mapForDS.put("disabilityrankList", disabilityrankList);
			mapForDS.put("disabilitydateList", disabilitydateList);
			mapForDS.put("disabilityplaceList", disabilityplaceList);
			mapForDS.put("disabilityunitList", disabilityunitList);
		}
		Users moUser = new Users();
		moUser.setId(userId);
		masMedicalBoardProceedings.setMoUser(moUser);

		MasHospital hospital = new MasHospital();
		hospital.setId(hospitalId);
		masMedicalBoardProceedings.setHospital(hospital);

		MasCommand command = new MasCommand();
		command.setId(commandId);
		masMedicalBoardProceedings.setCommand(command);

		/*
		 * if(req.getParameter("Labresult").equalsIgnoreCase("present")&&
		 * data!=null) { masMedicalBoardProceedings.setStatus("f");
		 * masMedicalBoardProceedings.setModate(new Date()); } else
		 * if(!masMedicalBoardProceedings.getStatus().equalsIgnoreCase("m"))
		 * { masMedicalBoardProceedings.setStatus("p"); }
		 */
		String investigationDataStatus = null;
		if (req.getParameter("investigationDataStatus") != null
				&& !req.getParameter("investigationDataStatus").equals("")) {
			investigationDataStatus = req
					.getParameter("investigationDataStatus");
		}

		mapForDS.put("investigationReferToMHList",
				investigationReferToMHList);
		// masMedicalBoardProceedings.setStatus("m");

		mapForDS.put("chargeCodeIdList", chargeCodeIdList);
		mapForDS.put("quantityList", quantityList);
		mapForDS.put("clinicalNotes1", clinicalNotes1);
		mapForDS.put("investigationDataStatus", investigationDataStatus);
		mapForDS.put("refferToMhForInv", refferToMhForInv);
		mapForDS.put("lastChangedBy", lastChangedBy);
		mapForDS.put("lastChangedDate", lastChangedDate);
		mapForDS.put("lastChangedTime", lastChangedTime);
		mapForDS.put("hospitalId", hospitalId);
		mapForDS.put("deptId", deptId);
		mapForDS.put("empId", empId);
		mapForDS.put("userId", userId);
		mapForDS.put("hinId", hinId);
		mapForDS.put("visitId", visitId);
		mapForDS.put("medExamId", medExamId);
		mapForDS.put("data", data);
		mapForDS.put("dgOrderdtIdList", dgOrderdtIdList);
		mapForDS.put("patientInvestigationHeaderId",
				patientInvestigationHeaderId);
		mapForDS.put("patientInvestigationdetailsIdList",
				patientInvestigationdetailsIdList);
		mapForDS.put("dgOrderhdId", dgOrderhdId);
		mapForDS.put("Labresult", req.getParameter("Labresult"));

		/*
		 * Code for Medical Board Details
		 */
		int medCatNowRecommend = 0;
		BigDecimal medboardDuration = new BigDecimal(0);
		String placeNextCat = "";
		String dateNextBoard = "";
		String opinionMedicalBoard = "";
		String dissentNotes = "";
		String medComposite = "";
		String empRestrictions = "";
		String instructions = "";

		if (req.getParameter("medCatNowRecommend") != null
				&& !req.getParameter("medCatNowRecommend").equals("")) {
			medCatNowRecommend = Integer.parseInt(req
					.getParameter("medCatNowRecommend"));
		}
		if (req.getParameter("medboardDuration") != null
				&& !req.getParameter("medboardDuration").equals("")) {
			medboardDuration = new BigDecimal(req
					.getParameter("medboardDuration"));
			masMedicalBoardProceedings
					.setMedboardDuration(medboardDuration);
		}
		if (req.getParameter("placeNextCat") != null
				&& !req.getParameter("placeNextCat").equals("")) {
			placeNextCat = req.getParameter("placeNextCat");
			masMedicalBoardProceedings.setPlaceNextCatBoard(placeNextCat);
		}
		/*
		 * if(req.getParameter("dateNextBoard") != null &&
		 * !req.getParameter("dateNextBoard").equals("")) {
		 * dateNextBoard=req.getParameter("dateNextBoard"); }
		 */
		if (req.getParameter("opinionMedicalBoard") != null
				&& !req.getParameter("opinionMedicalBoard").equals("")) {
			opinionMedicalBoard = req.getParameter("opinionMedicalBoard");
			masMedicalBoardProceedings.setOpinion(opinionMedicalBoard);
		}

		if (req.getParameter("dissentNotes") != null
				&& !req.getParameter("dissentNotes").equals("")) {
			dissentNotes = req.getParameter("dissentNotes");
			masMedicalBoardProceedings.setDissentNote(dissentNotes);
		}
		if (req.getParameter("medComposite") != null) {
			medComposite = req.getParameter("medComposite");
			masMedicalBoardProceedings.setMedComposite(medComposite);
		}
		if (req.getParameter("empRestrictions") != null
				&& !req.getParameter("empRestrictions").equals("")) {
			empRestrictions = req.getParameter("empRestrictions");
			masMedicalBoardProceedings.setEmpabiltyRestric(empRestrictions);
		}
		if (req.getParameter("instructions") != null
				&& !req.getParameter("instructions").equals("")) {
			instructions = req.getParameter("instructions");
			masMedicalBoardProceedings.setMedInstructions(instructions);
		}
		if (medCatNowRecommend > 0) {
			Category category = new Category();
			category.setCategoryid(medCatNowRecommend);
			/*
			 * label Med Cat Rec
			 */
			masMedicalBoardProceedings
					.setMedicalCategoryRecomended(category);
		}
		// ---Added by dipali
		if (req.getParameter("medcatrec") != null
				&& !req.getParameter("medcatrec").equals("")) {
			masMedicalBoardProceedings.setMedCatRec(req
					.getParameter("medcatrec"));
		}// ----------

		if (req.getParameter("dateNextBoard") != null
				&& !req.getParameter("dateNextBoard").equals("")) {
			dateNextBoard = req.getParameter("dateNextBoard");
			masMedicalBoardProceedings.setNextBoardDate(HMSUtil
					.convertStringTypeDateToDateType(dateNextBoard));
		}

		/*
		 * Composite should Bigdecimal
		 */
		/*
		 * if(!medComposite.equals("")){ //
		 * masMedicalBoardProceedings.setMedComposite
		 * (Integer.parseInt(medComposite));
		 * masMedicalBoardProceedings.setMedComposite(medComposite); }else{
		 * masMedicalBoardProceedings.setMedComposite("0"); }
		 */

		mapForDS.put("medCatNowRecommend", medCatNowRecommend);
		mapForDS.put("placeNextCat", placeNextCat);
		mapForDS.put("dateNextBoard", dateNextBoard);
		mapForDS.put("opinionMedicalBoard", opinionMedicalBoard);
		mapForDS.put("dissentNotes", dissentNotes);
		mapForDS.put("empRestrictions", empRestrictions);
		// two is missing
		mapForDS.put("medComposite", medComposite);
		mapForDS.put("instructions", instructions);
		/*
		 * End fo Code for Medical Board Details
		 */
		/*
		 * Code for Medical Board Clinical Summary
		 */

		BigDecimal temperature = new BigDecimal(0);
		// String pulseRates="";
		String bp1 = "";
		String rr = "";
		String generalPhysicalExam = "";
		String cardiovascularSystem = "";

		String respairatorySystem = "";
		String gastroIntestinalSystem = "";
		String breakDown = "";
		String centralNervousSystem = "";

		String localExamination = "";
		String remarksClinical = "";
		// int referredToMhClinical=0;
		String referredToMhClinical = "";
		int opdDeptClinical = 0;

		if (req.getParameter("temperature") != null
				&& !req.getParameter("temperature").equals("")) {
			temperature = new BigDecimal(req.getParameter("temperature"));
		}
		if (req.getParameter("bp1") != null
				&& !req.getParameter("bp1").equals("")) {
			bp1 = req.getParameter("bp1");
		}

		if (req.getParameter("generalPhysicalExam") != null
				&& !req.getParameter("generalPhysicalExam").equals("")) {
			generalPhysicalExam = req.getParameter("generalPhysicalExam");
		}
		if (req.getParameter("cardiovascularSystem") != null
				&& !req.getParameter("cardiovascularSystem").equals("")) {
			cardiovascularSystem = req.getParameter("cardiovascularSystem");
		}
		if (req.getParameter("respairatorySystem") != null
				&& !req.getParameter("respairatorySystem").equals("")) {
			respairatorySystem = req.getParameter("respairatorySystem");
		}

		if (req.getParameter("gastroIntestinalSystem") != null
				&& !req.getParameter("gastroIntestinalSystem").equals("")) {
			gastroIntestinalSystem = req
					.getParameter("gastroIntestinalSystem");
		}
		if (req.getParameter(NERVOUS_BRAKDOWN) != null
				&& !req.getParameter(NERVOUS_BRAKDOWN).equals("")) {
			breakDown = req.getParameter(NERVOUS_BRAKDOWN);
		}
		if (req.getParameter("centralNervousSystem") != null
				&& !req.getParameter("centralNervousSystem").equals("")) {
			centralNervousSystem = req.getParameter("centralNervousSystem");
		}

		if (req.getParameter("localExamination") != null
				&& !req.getParameter("localExamination").equals("")) {
			localExamination = req.getParameter("localExamination");
		}
		if (req.getParameter("remarksClinical") != null
				&& !req.getParameter("remarksClinical").equals("")) {
			remarksClinical = req.getParameter("remarksClinical");
		}
		if (req.getParameter("rr") != null
				&& !req.getParameter("rr").equals("")) {
			rr = req.getParameter("rr");
		}

		/*
		 * if(req.getParameter("referredToMhClinical") != null &&
		 * !req.getParameter("referredToMhClinical").equals("")) {
		 * referredToMhClinical
		 * =Integer.parseInt(req.getParameter("referredToMhClinical")); } as
		 * discussed with anshu it will be free text
		 */
		if (req.getParameter("referredToMhClinical") != null
				&& !req.getParameter("referredToMhClinical").equals("")) {
			referredToMhClinical = req.getParameter("referredToMhClinical");
		}
		/*
		 * if(referredToMhClinical>0){ MasHospital masHospital=new
		 * MasHospital(); masHospital.setId(referredToMhClinical);
		 * masMedicalBoardProceedings.setClinicalReferMh(masHospital); }
		 */
		masMedicalBoardProceedings.setClinicalReferMh(referredToMhClinical);
		if (req.getParameter("opdDeptClinical") != null
				&& !req.getParameter("opdDeptClinical").equals("")) {
			opdDeptClinical = Integer.parseInt(req
					.getParameter("opdDeptClinical"));
		}

		masMedicalBoardProceedings.setPresentCondition(presentConditions);
		masMedicalBoardProceedings.setMedication(medication);
		masMedicalBoardProceedings.setTemprature(temperature);
		masMedicalBoardProceedings.setBp(bp1);

		masMedicalBoardProceedings
				.setGeneralPhysicalExam(generalPhysicalExam);
		masMedicalBoardProceedings
				.setCardiovascularSystem(cardiovascularSystem);
		masMedicalBoardProceedings.setRespiratorySystem(respairatorySystem);
		masMedicalBoardProceedings
				.setGastroIntestinalSystem(gastroIntestinalSystem);
		masMedicalBoardProceedings.setCentralNervousSystemMMHG(breakDown);
		masMedicalBoardProceedings
				.setCentralNervousSystem(centralNervousSystem);
		masMedicalBoardProceedings.setLocalExamination(localExamination);
		masMedicalBoardProceedings.setRemarksClinical(remarksClinical);
		masMedicalBoardProceedings.setRrClinical(rr);

		if (opdDeptClinical > 0) {
			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(opdDeptClinical);
			masMedicalBoardProceedings.setClinicalOpdDept(masDepartment);
		}
		// ---Added by dipali
		int member1 = 0;
		if (req.getParameter("member1") != null
				&& !req.getParameter("member1").equals("0")) {
			member1 = Integer.parseInt(req.getParameter("member1"));
			MasEmployee member1Obj = new MasEmployee();
			member1Obj.setId(member1);
			masMedicalBoardProceedings.setMedDetailMember1(member1Obj);
		}
		int member2 = 0;
		if (req.getParameter("member2") != null
				&& !req.getParameter("member2").equals("0")) {
			member2 = Integer.parseInt(req.getParameter("member2"));
			MasEmployee member2Obj = new MasEmployee();
			member2Obj.setId(member2);
			masMedicalBoardProceedings.setMedDetailMember2(member2Obj);
		}
		int president = 0;
		if (req.getParameter("president") != null
				&& !req.getParameter("president").equals("0")) {
			president = Integer.parseInt(req.getParameter("president"));
			MasEmployee presidentObj = new MasEmployee();
			presidentObj.setId(president);
			masMedicalBoardProceedings.setMedDetailPresident(presidentObj);
		}
		String medRemarks = "";
		if (req.getParameter("medRemarks") != null
				&& !req.getParameter("medRemarks").equals("")) {
			medRemarks = (String) req.getParameter("medRemarks");
			masMedicalBoardProceedings.setMedRemarks(medRemarks);
		}
		String medDate = "";
		if (req.getParameter("medDate") != null
				&& !req.getParameter("medDate").equals("")) {
			medDate = (String) req.getParameter("medDate");
			masMedicalBoardProceedings.setMedDetailDate(HMSUtil
					.convertStringTypeDateToDateType(medDate));
		}
		String digitalIndividuals = "";
		if (req.getParameter("digitalIndividuals") != null
				&& !req.getParameter("digitalIndividuals").equals("")) {
			digitalIndividuals = (String) req
					.getParameter("digitalIndividuals");
			masMedicalBoardProceedings
					.setIndividualDigitalSign(digitalIndividuals);
		}
		/*
		 * End of Code for Medical Board Clinical Summary
		 */
		/*
		 * String specilaistOpinionRemark=""; String
		 * specilaistTreatmentAdvice=""; String specilaistOpinionDate="";
		 * int specilaistMedCatRec=0;
		 * if(req.getParameter("SpecilaistOpinionRemark") != null ) {
		 * specilaistOpinionRemark
		 * =req.getParameter("SpecilaistOpinionRemark"); }
		 * if(req.getParameter("SpecilaistTreatmentAdvice") != null ) {
		 * specilaistTreatmentAdvice
		 * =req.getParameter("SpecilaistTreatmentAdvice"); }
		 * if(req.getParameter("SpecilaistOpinionDate") != null ) {
		 * specilaistOpinionDate=req.getParameter("SpecilaistOpinionDate");
		 * } if(req.getParameter("SpecilaistMedCatRec") != null ) {
		 * specilaistMedCatRec
		 * =Integer.parseInt(req.getParameter("SpecilaistMedCatRec")); }
		 * 
		 * if(specilaistMedCatRec>0){ Category category=new Category();
		 * category.setCategoryid(specilaistMedCatRec);
		 * masMedicalBoardProceedings.setSpecilaistMedCatRec(category);
		 * 
		 * label Med Cat Rec
		 * 
		 * }masMedicalBoardProceedings.setSpecilaistOpinionRemark(
		 * specilaistOpinionRemark);
		 * masMedicalBoardProceedings.setSpecilaistTreatmentAdvice
		 * (specilaistTreatmentAdvice); if(specilaistOpinionDate!=""){
		 * masMedicalBoardProceedings
		 * .setSpecilaistOpinionDate(HMSUtil.convertStringTypeDateToDateType
		 * (specilaistOpinionDate)); }
		 */
		mapForDS.put("masMedicalBoardProceedings",
				masMedicalBoardProceedings);
		mapForDS.put("investigationReferToMHList", investigationReferToMHList);
		mapForDS.put("investResultList", investResultList); // Add By Vinay

		successfullyAdded = medicalBoardHandlerService
				.updateMedicalExaminationBoardInitial(mapForDS);
		message = "Record Updated Successfully!!";
		jsp = MEDICAL_BOARD_EXAM_MSG;
		if (!successfullyAdded) {
			message = "Some Problem Occured !!!";
			jsp = MEDICAL_BOARD_ERROR_MSG;
		} else if (data != null) {
			if (req.getParameter("Labresult")
					.equalsIgnoreCase("NotPresent")) {
				message = "Lab Result is not Found ! You Can Forward to Medical Officer After Lab Result.";
			} else if (req.getParameter("SecialFlag").equalsIgnoreCase("y")) {
				/*
				 * This Block is execute at Update time of Special Openion
				 * Code By Mukesh
				 */
				jsp = "mb_medicalExamSpMsg";
			} else if (req.getParameter("directFlag").equalsIgnoreCase("D")) {
				/*
				 * This Block is execute at Update time of Special Openion
				 * from waiting list Code By Mukesh
				 */
				/*
				 * map =
				 * medicalBoardHandlerService.showMedicalBoardSpecialist
				 * (hospitalId);
				 * 
				 * title = "Medical Board  Specialist Opinion Waiting List";
				 * jsp = "mb_medicalBoardSpecialist"; jsp += ".jsp";
				 * map.put("contentJsp", jsp); map.put("directFlag", "D");
				 * return new ModelAndView("index","map",map);
				 */
				message = "Record Updated Successfully!!";
			} else {
				message = "Record  Forwarded Successfully !!";

			}
		} else if (req.getParameter("SecialFlag") != null
				&& req.getParameter("SecialFlag").equalsIgnoreCase("y")) {
			/*
			 * This Block is execute at Update time of Special Openion Code
			 * By Mukesh
			 */
			jsp = "mb_medicalExamSpMsg";
		} else if (req.getParameter("SecialFlag") != null
				&& req.getParameter("SecialFlag").equalsIgnoreCase("D")) {
			/*
			 * This Block is execute at Update time of Special Openion from
			 * waiting list Code By Mukesh
			 */
			message = "Record Updated Successfully!!";
		}
		map.put("data", data);
	} else {
		message = "You Can Forward to Medical Officer After Submited By Medical Assistence";
		jsp = MEDICAL_BOARD_EXAM_MSG;
	}

	String medicalEntryNo = "";
	String medicalEntryNo1 = "";
	jsp += ".jsp";

	map.put("investigationReferToMHList", investigationReferToMHList);
	map.put("medicalEntryNo", medicalEntryNo);
	map.put("medicalEntryNo1", medicalEntryNo1);
	map.put("medicalExamType", req.getParameter("medicalExamType"));
	map.put("contentJsp", jsp);
	map.put("message", message);
	map.put("medExamId", medExamId);
	map.put("hinNoForreport", req.getParameter("hinNoForreport"));
	map.put("visitNumberForReport", visitNumberForReport);
	map.put("serviceNo", serviceNo);
	map.put("visitId", visitId);
	map.put("denatlToMH", dentalReferToMH);
	return new ModelAndView("indexB", "map", map);
}

public ModelAndView displayFileUploadInvestigation(
		HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	int masExamId = 0;
	int invest_id = 0;
	int hinId = 0;
	String hinNo = "";
	if (request.getParameter("hinId") != null) {
		hinId = Integer.parseInt(request.getParameter("hinId"));
	}
	if (request.getParameter("hinNo") != null) {
		hinNo = request.getParameter("hinNo");
	}
	if (request.getParameter("invest_id") != null
			&& !request.getParameter("invest_id").equals("")) {
		invest_id = Integer.parseInt(request.getParameter("invest_id"));
	}
	if (request.getParameter("masExamId") != null) {
		masExamId = Integer.parseInt(request.getParameter("masExamId"));
	}
	String jsp = "fileuploadPopupMedicalBoardInvest";

	map.put("masExamId", masExamId);
	map.put("hinId", hinId);
	map.put("hinNo", hinNo);
	map.put("invest_id", invest_id);

	return new ModelAndView(jsp, "map", map);
}

public ModelAndView viewUploadDocumentsDetailsInvest(
		HttpServletRequest request, HttpServletResponse response) {
	int hospitalId = 0;
	int masExamId = 0;
	int hinId = 0;
	String hin_no = "";
	int InvestId = 0;
	HttpSession session = request.getSession();

	Map<String, Object> dataMap = new HashMap<String, Object>();
	if (request.getParameter("hinNo") != null) {
		hin_no = (String) request.getParameter("hinNo");
	}
	if (request.getParameter("hinId") != null) {
		hinId = Integer.parseInt(request.getParameter("hinId"));
	}
	if (request.getParameter("InvestId") != null) {
		InvestId = Integer.parseInt(request.getParameter("InvestId"));
	}
	if (request.getParameter("masExamId") != null) {
		masExamId = Integer.parseInt(request.getParameter("masExamId"));
	}
	if (session.getAttribute(HOSPITAL_ID) != null) {
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);

	}
	dataMap.put("hinId", hinId);
	dataMap.put("InvestId", InvestId);
	dataMap.put("masExamId", masExamId);
	dataMap.put("hospitalId", hospitalId);

	Map<String, Object> map = new HashMap<String, Object>();

	map = medicalBoardHandlerService.viewUploadJsp(dataMap);
	String jsp = "medicalBoardInvestViewDocumentsPopUp";
	// jsp += ".jsp";
	map.put("hin_no", hin_no);
	return new ModelAndView(jsp, "map", map);

}

public ModelAndView viewUploadDocumentsDetails(HttpServletRequest request,
		HttpServletResponse response) {

	int hospitalId;
	int visitId = 0;
	int hinId = 0;
	String hin_no = "";
	HttpSession session = request.getSession();
	if (request.getParameter("hinNo") != null) {
		hin_no = (String) request.getParameter("hinNo");
	}
	if (request.getParameter("hinId") != null) {
		hinId = Integer.parseInt(request.getParameter("hinId"));
	}
	String folderName = "";
	if (request.getParameter("folderName") != null) {
		folderName = request.getParameter("folderName");
	}

	if (request.getParameter("visitId") != null) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	Map<String, Object> map = new HashMap<String, Object>();
	String userHome = getServletContext().getRealPath("");
	String fileSeparator = System.getProperty("file.separator");
	String uploadURL = userHome.substring(0, userHome
			.lastIndexOf(fileSeparator))
			+ fileSeparator
			+ "HMSDocumentFolder"
			+ fileSeparator
			+ "upload" + fileSeparator + folderName + fileSeparator;
	String[] files = null;
	try {
		File fileDir = new File(uploadURL + fileSeparator + hin_no);

		if (fileDir.exists()) {
			files = fileDir.list();
		}
	} catch (Exception exc) {
		exc.printStackTrace();

	}

	String jsp = "medicalBoardViewDocumentsPopUp";
	// jsp += ".jsp";
	map.put("hinNo", hin_no);
	map.put("hinId", hinId);
	map.put("folderName", folderName);
	map.put("visitId", visitId);
	map.put("contentJsp", jsp);
	map.put("uploadURL", uploadURL);
	map.put("files", files);
	return new ModelAndView(jsp, "map", map);

}

public ModelAndView viewMedicalBoardDocuments(HttpServletRequest request,
		HttpServletResponse response) {
	String filename = null;
	String fileExtension = null;
	String hin_no = "";
	HttpSession session = request.getSession();
	if (request.getParameter("hinNo") != null) {
		hin_no = (String) request.getParameter("hinNo");
	}
	String fileNameFinal = "";
	if (request.getParameter("filename") != null) {
		filename = (String) request.getParameter("filename");
	}
	String folderName = "";
	if (request.getParameter("folderName") != null) {
		folderName = (String) request.getParameter("folderName");
	}
	// String uploadURL = getServletContext().getRealPath("/upload/");
	String userHome = getServletContext().getRealPath("");
	String fileSeparator = System.getProperty("file.separator");

	String uploadURL = userHome.substring(0, userHome
			.lastIndexOf(fileSeparator))
			+ fileSeparator
			+ "HMSDocumentFolder"
			+ fileSeparator
			+ "upload"
			+ fileSeparator
			+ folderName
			+ fileSeparator
			+ hin_no;

	StringTokenizer st1 = new StringTokenizer(filename, ".");
	fileNameFinal = st1.nextToken();
	fileExtension = st1.nextToken();

	try {
		if (fileExtension == "doc" || fileExtension == "docx") {
			response.setContentType("application/vnd.ms-word");
		} else if (fileExtension == "xls" || fileExtension == "xlsx") {
			response.setContentType("application/vnd.ms-excel");
		} else if (fileExtension == "pdf") {
			response.setContentType("application/pdf");
		} else if (fileExtension.trim().equalsIgnoreCase("txt")) {
			response.setContentType("text/plain");
		} else if (fileExtension.trim().equalsIgnoreCase("ppt")) {
			response.setContentType("application/ppt");
		} else if (fileExtension == "png") {
			response.setContentType("image/png");
		} else if (fileExtension == "jpeg") {
			response.setContentType("image/jpeg");
		} else if (fileExtension == "wbmp") {
			response.setContentType("image/vnd.wap.wbmp");
		} else if (fileExtension == "gif") {
			response.setContentType("image/gif");
		} else if (fileExtension == "jpg") {
			response.setContentType("image/jpg");
		} else {
			response.setContentType("application/octet-stream");
		}
		// set the header and also the Name by which user will be prompted
		// to save
		response.setHeader("Content-Disposition", "attachment;filename="
				+ java.net.URLEncoder.encode(filename) + "");

		File f = new File(uploadURL + "/" + fileNameFinal + "."
				+ fileExtension);
		InputStream in = new FileInputStream(f);
		response.getOutputStream().flush();
		ServletOutputStream outs = response.getOutputStream();

		long length = f.length();

		if (length > Integer.MAX_VALUE) {
			// File is too large
		}

		// Create the byte array to hold the data
		byte[] bytes = new byte[(int) length];

		int offset = 0;
		int numRead = 0;
		while (offset < bytes.length
				&& (numRead = in.read(bytes, offset, bytes.length - offset)) >= 0) {
			offset += numRead;
		}

		if (offset < bytes.length) {
		}
		outs.write(bytes);
		in.close();

	} catch (IOException ioe) {
		ioe.printStackTrace();
	}

	return null;
}

public ModelAndView viewMedicalExamInvestDocuments(
		HttpServletRequest request, HttpServletResponse response) {

	String filename = null;
	String fileExtension = null;
	String hin_no = "";
	HttpSession session = request.getSession();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	Map<String, Object> map = new HashMap<String, Object>();
	if (request.getParameter("filename") != null) {
		filename = (String) request.getParameter("filename");
	}

	if (request.getParameter("fileExt") != null) {
		fileExtension = (String) request.getParameter("fileExt");
	}
	int invest_id = 0;
	if (request.getParameter("invest_id") != null) {
		invest_id = Integer.parseInt(request.getParameter("invest_id"));
	}
	int hinId = 0;
	if (request.getParameter("hinId") != null) {
		hinId = Integer.parseInt(request.getParameter("hinId"));
	}
	int medExamId = 0;
	if (request.getParameter("medExamId") != null) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"));
	}
	int hospitalId = 0;
	if (session.getAttribute(HOSPITAL_ID) != null) {
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);

	}
	dataMap.put("filename", filename);
	dataMap.put("fileExtension", fileExtension);
	dataMap.put("invest_id", invest_id);
	dataMap.put("hinId", hinId);
	dataMap.put("medExamId", medExamId);
	dataMap.put("hospitalId", hospitalId);
	map = medicalExamHandlerService.viewUploadInvestDocument(dataMap);
	try {
		if (fileExtension == "doc" || fileExtension == "docx") {
			response.setContentType("application/vnd.ms-word");
		} else if (fileExtension == "xls" || fileExtension == "xlsx") {
			response.setContentType("application/vnd.ms-excel");
		} else if (fileExtension == "pdf") {
			response.setContentType("application/pdf");
		} else if (fileExtension.trim().equalsIgnoreCase("txt")) {
			response.setContentType("text/plain");
		} else if (fileExtension.trim().equalsIgnoreCase("tiff")) {
			response.setContentType("image/tiff");
		} else if (fileExtension.trim().equalsIgnoreCase("bmp")) {
			response.setContentType("image/bmp");
		} else if (fileExtension.trim().equalsIgnoreCase("png")) {
			response.setContentType("image/png");
		} else if (fileExtension.trim().equalsIgnoreCase("jpeg")) {
			response.setContentType("image/jpeg");
		} else if (fileExtension.trim().equalsIgnoreCase("wbmp")) {
			response.setContentType("image/vnd.wap.wbmp");
		} else if (fileExtension.trim().equalsIgnoreCase("gif")) {
			response.setContentType("image/gif");
		} else if (fileExtension.trim().equalsIgnoreCase("jpg")) {
			response.setContentType("image/jpg");
		} else {
			response.setContentType("application/octet-stream");
		}
		// set the header and also the Name by which user will be prompted
		// to save
		response.setHeader("Content-Disposition", "attachment;filename="
				+ java.net.URLEncoder
						.encode(filename + "." + fileExtension) + "");

		List<MasMedicalUploadDocument> masMedicalUploadDocumentList = (List<MasMedicalUploadDocument>) map
				.get("masMedicalUploadDocumentList");
		if (masMedicalUploadDocumentList.size() > 0) {
			MasMedicalUploadDocument masMedicalUploadDocument = masMedicalUploadDocumentList
					.get(0);

			byte[] bytes = masMedicalUploadDocument.getDocument();
			response.getOutputStream().flush();
			ServletOutputStream outs = response.getOutputStream();
			outs.write(bytes);
		}

	} catch (IOException ioe) {
		ioe.printStackTrace();
	}

	return null;
}

public ModelAndView submitInvestigationUploadDocuments(
		HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> generalMap = new HashMap<String, Object>();
	MultipartFormDataRequest mrequest = null;
	HttpSession session = request.getSession();

	if (MultipartFormDataRequest.isMultipartFormData(request)) {
		try {
			mrequest = new MultipartFormDataRequest(request);
		} catch (UploadException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	String fileExtension = null;

	String filename = "";
	int hospitalId = 0;
	int hinId = 0;
	int investigationId = 0;
	int masMedicalExamId = 0;
	if (request.getParameter("filename") != null) {
		filename = request.getParameter("filename");
	}
	if (session.getAttribute(HOSPITAL_ID) != null) {
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);

	}
	if (request.getParameter("hinId") != null
			&& !request.getParameter("hinId").equals("")) {
		hinId = Integer.parseInt(request.getParameter("hinId"));

	}
	if (request.getParameter("invest_id") != null
			&& !request.getParameter("invest_id").equals("")) {
		investigationId = Integer.parseInt(request
				.getParameter("invest_id"));

	}
	String hinNo = "";
	if (request.getParameter("hinNo") != null
			&& !request.getParameter("hinNo").equals("")) {
		hinNo = request.getParameter("hinNo");

	}
	if (request.getParameter("masExamId") != null
			&& !request.getParameter("masExamId").equals("")) {
		masMedicalExamId = Integer.parseInt(request
				.getParameter("masExamId"));

	}
	StringTokenizer strToken = new StringTokenizer(filename, ".");
	filename = strToken.nextToken();
	fileExtension = strToken.nextToken();

	generalMap.put("filename", filename);
	generalMap.put("fileExtension", fileExtension);
	generalMap.put("hinId", hinId);
	generalMap.put("hospitalId", hospitalId);
	generalMap.put("investigationId", investigationId);
	generalMap.put("masMedicalExamId", masMedicalExamId);
	generalMap.put("mrequest", mrequest);
	map = medicalBoardHandlerService.submitUploadDocuments(generalMap);
	boolean status = false;
	status = (Boolean) map.get("status");
	String message = "";
	if (status == true) {
		message = "Document is uploaded successfully";
	} else {
		message = "Document is not uploaded successfully";
	}
	String jsp = "fileuploadPopupMedicalBoardInvest";
	// jsp += ".jsp";
	map.put("message", message);
	map.put("contentJsp", jsp);
	map.put("hinNo", hinNo);
	map.put("hinId", hinId);
	map.put("invest_id", investigationId);
	map.put("masExamId", masMedicalExamId);

	return new ModelAndView(jsp, "map", map);
}

public ModelAndView showUploadingDocumentsJsp(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	String hinNo = "";
	int visitId = 0;
	int hinId = 0;
	String folderName = "";
	if (request.getParameter("hinId") != null) {
		hinId = Integer.parseInt(request.getParameter("hinId"));
	}

	if (request.getParameter("visitId") != null) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	if (request.getParameter("hinNo") != null) {
		hinNo = request.getParameter("hinNo");
	}
	if (request.getParameter("folder") != null) {
		folderName = request.getParameter("folder");
	}
	// Map<String, Object> map = new HashMap<String, Object>();
	// int visitId = Integer.parseInt(request.getParameter("visitId"));
	// map = medicalBoardHandlerService.showUploadingDocumentsJsp(visitId);

	map.put("hinNo", hinNo);
	map.put("folderName", folderName);
	map.put("hinId", hinId);
	map.put("visitId", visitId);
	String jsp = "";
	jsp = "medicalboard_uploadpatientdoc";
	map.put("contentJsp", jsp);
	return new ModelAndView(jsp, "map", map);
}

public ModelAndView submitUploadDocuments(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	Box box = HMSUtil.getBox(request);
	MultipartFormDataRequest mrequest = null;
	String fileName = null;
	String message = null;
	String hin_no = "";
	String fileExtension = null;
	int hospitalId;
	int visitId = 0;
	int hinId = 0;
	String userName = "";
	if (MultipartFormDataRequest.isMultipartFormData(request)) {
		try {

			mrequest = new MultipartFormDataRequest(request);
		} catch (UploadException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	HttpSession session = request.getSession();
	if (request.getParameter("hinNo") != null) {
		hin_no = (String) request.getParameter("hinNo");
	}
	if (request.getParameter("hinId") != null) {
		hinId = Integer.parseInt(request.getParameter("hinId"));
	}
	String folderName = "";
	if (request.getParameter("folderName") != null) {
		folderName = request.getParameter("folderName");
	}
	if (session.getAttribute(HOSPITAL_ID) != null) {
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		box.put("hospitalId", hospitalId);
	}
	if (session.getAttribute(LOGIN_NAME) != null) {
		userName = (String) session.getAttribute(LOGIN_NAME);
		box.put("userName", userName);
	}
	if (request.getParameter("visitId") != null) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	Map<String, Object> uploadFileMap = new HashMap<String, Object>();
	String userHome = getServletContext().getRealPath("");
	String fileSeparator = System.getProperty("file.separator");
	String uploadURL = userHome.substring(0, userHome
			.lastIndexOf(fileSeparator))
			+ fileSeparator
			+ "HMSDocumentFolder"
			+ fileSeparator
			+ "upload" + fileSeparator + folderName + fileSeparator;
	HMSUtil.createFolderFroDocument(hin_no, uploadURL);
	List fileUploadedList = null;
	if (request.getParameter("filename") != null) {

		StringTokenizer strToken = new StringTokenizer(request
				.getParameter("filename"), ".");
		fileName = strToken.nextToken();
		fileExtension = strToken.nextToken();
		String whiteList = "*." + fileExtension;
		fileUploadedList = HMSUtil.uploadFileMedicalExam(mrequest,
				uploadURL + hin_no + fileSeparator, whiteList, request
						.getParameter("filename"));
		// box.put("filename", request.getParameter("filename"));
	}

	Boolean fileUploaded = false;
	if (fileUploadedList != null && fileUploadedList.size() != 0) {
		fileUploaded = (Boolean) fileUploadedList.get(0);
	}
	if (fileUploaded) {
		message = "File Uploaded Sucessfully!!";
	} else {
		message = "Data Cannot be Saved !!";
	}

	map.put("message", message);
	map.put("visitId", visitId);
	map.put("hinNo", hin_no);
	map.put("hinId", hinId);
	map.put("folderName", folderName);

	String jsp = "medicalboard_uploadpatientdoc";
	// jsp += ".jsp";

	return new ModelAndView(jsp, "map", map);
}

public ModelAndView showintialBoardJsp(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	Box box = HMSUtil.getBox(request);
	HttpSession session = request.getSession();
	int deptId = (Integer) session.getAttribute("deptId");
	box.put("deptId", deptId);
	map = medicalBoardHandlerService.showintialBoardJsp(box);
	List<MasMedicalExaminationReportOnEntry> existingMedExamList = new ArrayList<MasMedicalExaminationReportOnEntry>();
	// existingMedExamList =
	// medicalExamHandlerService.getExistingMedExamList(box);
	if (existingMedExamList.size() > 0) {
		map.put("existingMedExamList", existingMedExamList);
	}
	String jsp = "";
	jsp = "mb_primaryExtMedExam.jsp";
	map.put("contentJsp", jsp);

	return new ModelAndView("index", "map", map);
}

public ModelAndView showInitialMedicalBoardMedExamJsp(
		HttpServletRequest request, HttpServletResponse response) {
	String jsp = "";
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	Box box = HMSUtil.getBox(request);
	Map map = new HashMap();
	int visitId = 0;
	int medExamId = 0;
	String jspheading = null;
	if (request.getParameter("visitId") != null) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	if (request.getParameter("medExamType") != null) {
		jspheading = request.getParameter("medExamType");
	}
	if (request.getParameter("medExamId") != null) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"));
	}
	HttpSession session = request.getSession();
	int deptId = (Integer) session.getAttribute("deptId");
	mapForDS.put("visitId", visitId);
	mapForDS.put("deptId", deptId);
	mapForDS.put("medExamId", medExamId);
	mapForDS.put("hospitalId", session.getAttribute("hospitalId"));
	mapForDS.put("medExamType", jspheading);
	map = medicalBoardHandlerService
			.showInitialMedicalBoardMedExamJsp(mapForDS);
	// List<MasMedicalExaminationReportOnEntry> medExamList = new
	// ArrayList<MasMedicalExaminationReportOnEntry>();
	// medExamList = medicalExamHandlerService.getExistingMedExamList(box);
	jsp = "mb_medicalBoardProceedingInitiall";
	jsp += ".jsp";
	// map.put("medExamList",medExamList);
	map.put("visitId", visitId);
	map.put("jspheading", jspheading);
	map.put("contentJsp", jsp);
	// map.put("title", title);
	return new ModelAndView("indexB", "map", map);

}

public ModelAndView showMedicalOfficerAppointmentInitial(
		HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	String jsp = "";
	String title = "";
	HttpSession session = request.getSession();
	int hospitalId=0;
	if(session.getAttribute(HOSPITAL_ID)!=null)
	{	
	  hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	  mapForDS.put("hospitalId", hospitalId);
	}
	if (request.getParameter("consultingDoc") != null) {
		int empId = Integer.parseInt(request.getParameter("consultingDoc"));
		mapForDS.put("empId", empId);
	}else{
		Users user = new Users();
		if(session.getAttribute("users")!=null){
			user = (Users)session.getAttribute("users");
		}
		mapForDS.put("empId", user.getEmployee().getId());
	}
	map = medicalBoardHandlerService
			.showMedicalOfficerAppointmentInitial(mapForDS);
	jsp = "mb_medicalBoardInitialMedicalOfficerAppointment";

	jsp += ".jsp";
	title = "Medical Board Proceeding Search";
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("indexB", "map", map);
}

public ModelAndView addMedicalBoardInit(HttpServletRequest req,
		HttpServletResponse res) {
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	String serviceNo = "";
	String rank = "";
	String name = "";
	String unit = "";
	String serviceiaf = "";
	String branch = "";
	Date dob = null;
	String age = "";
	String typeOfCommunication = "";
	Date dateofcommun = null;
	String totalservice = "";
	String pastmedicalhistory = "";
	String presentmedicalhistory = "";
	String idealweight = "";
	String overweight = "";
	String waist = "";
	String chestfullexpansion = "";
	String bhi = "";
	String rangeofexpansion = "";
	String bodyfat = "";
	String signfoldthickness = "";
	String sportman = "";
	String actualweight = "";
	String lastame = "";

	Date entryDate = null;
	Date medicinExamDate = null;
	String lastChangedBy = "";
	String lastChangedTime = "";
	Date lastChangedDate = null;
	Date surgeyDate = null;
	int typeOfEntry = 0;
	String betchNo = "";
	String chestNo = "";
	String rollNo = "";
	int medicalExamHeld = 0;
	String medicalStatus = "";
	String fullName = "";
	Date dateOfBirth = null;
	int maritialStatus = 0;
	String service = "";
	String pNo = "";
	// String rank = "";
	String hoursOfFlown = "";
	String permanentAddress = "";
	String identification1 = "";
	String identification2 = "";
	String armsCrops = "";
	Date dateOfReporting = null;
	Date dateOfCompletion = null;
	Date documentForwardDate = null;
	String documentForwardTo = "";
	String fromWhereHeReport = "";
	String hypertension = "";
	String heartDisease = "";
	String diabetes = "";
	String bleedingDisorder = "";
	String mentalDisease = "";
	String nightBlindness = "";

	String asthama = "";
	String dischargeFrom = "";
	String plesury = "";
	String earDieses = "";
	String rheumatism = "";
	String frequentCough = "";
	String chronicIndigestion = "";
	String nervousBrakdown = "";
	String kidenyBladder = "";
	String fitsFaintinngAttacks = "";
	String std = "";
	String serveHeadInjury = "";
	String joundice = "";
	String sickness = "";
	String breastDisease = "";
	String trachoma = "";
	String amenorrhoea = "";
	String nightbindness = "";
	String menirrhagia = "";
	String laserTeartement = "";
	String pregnancy = "";
	String abortion = "";
	String eyeDisease = "";
	String rejectedAsUnfit = "";
	String dischargeMedicallyUnfit = "";
	String adimmitedInHospitalFirIllness = "";
	String stateNature = "";
	String otherInform = "";
	BigDecimal height = new BigDecimal(0);
	BigDecimal weight = new BigDecimal(0);
	BigDecimal acceptableKg = new BigDecimal(0);
	BigDecimal leglength = new BigDecimal(0);
	String appereance = "";
	String albumin = "";
	String sugar = "";
	String spGraviry = "";
	String hbPercentage = "";
	String physique = "";
	String anyOtherInv = "";
	String skin = "";
	String abdomen = "";
	String heartSize = "";
	String sound = "";
	String rhythm = "";
	String arterialWalls = "";
	String pulseRates = "";
	String bp = "";
	String fullExpension = "";
	String rangeOfExpension = "";
	String selfBalR = "";
	String selfBalL = "";
	String speechMental = "";
	String endocrinCond = "";
	String otherAbnormalities = "";
	String medicinRemarks = "";
	String finger = "";
	String hand = "";
	String wrist = "";
	String elbows = "";
	String shoulderGridles = "";
	String cercival = "";
	String dorsalVertebrate = "";
	String hullux = "";
	String valgus = "";
	String riggus = "";
	String flatFeet = "";
	String joints = "";
	String pelvis = "";
	String gail = "";
	String lumberScaler = "";
	String roccyxVericose = "";
	String hydrocele = "";
	String varicocele = "";
	String underScende = "";
	String hemonhoids = "";
	String herinaMusic = "";
	String breasts = "";
	String surgeryRemarks = "";
	String respatorySystem = "";
	String withGlassesDistantR = "";
	String withglassesDistantL = "";
	String withGlassesNearR = "";
	String withGlassesNearL = "";
	String withGlassesNearCP = "";
	String withoutGlassesDistantR = "";
	String withoutGlassesDistantL = "";
	String withoutGlassesNearR = "";
	String withoutGlassesNearL = "";
	String withoutGlassesNearCP = "";
	BigDecimal convergenceCP = new BigDecimal(0);
	BigDecimal convergenceC = new BigDecimal(0);
	String accommodationR = "";
	String accommodationL = "";
	String eyeRemarks = "";
	Date eyeDate = null;
	BigDecimal hearingRFW = new BigDecimal(0);
	BigDecimal hearingLFW = new BigDecimal(0);
	BigDecimal hearingBothFW = new BigDecimal(0);
	BigDecimal hearingRCV = new BigDecimal(0);
	BigDecimal hearingLCV = new BigDecimal(0);
	BigDecimal hearingBothCV = new BigDecimal(0);
	String innerEarR = "";
	String innerEarL = "";
	String audiometryRecord = "";
	String nose = "";
	String throatEar = "";
	String earReamrks = "";
	Date earDate = null;
	String externalEarR = "";
	String externalEarL = "";
	String middleEarR = "";
	String middleEarL = "";
	String evidienceOfTrachoma = "";
	String binocular = "";
	String manifestHypermetropia = "";
	String coverTest = "";
	String diaphragmTest = "";
	String fundMedia = "";
	String fields = "";
	String nightVisualCapacity = "";
	String dentalRemarks = "";
	Date dentalDate = null;
	String menstrualHistory = "";
	int noOfPregnancy = 0;
	int noOfAbortion = 0;
	int noOfChildren = 0;
	Date lastCondinement = null;
	String vaginalDischarge = "";
	String prolapse = "";
	String usgAbortion = "";
	String gyanaecologyRemarks = "";
	Date gyanaecologyDate = null;
	String medicalBoardExamination = "";
	int medicalBoardExaminationPlace = 0;
	Date medicalBoardExaminationDate = new Date();
	String subsequentMedicalBoardExam = "";
	int subsequentMedicalBoardExamPlace = 0;
	Date subsequentMedicalBoardExamDate = null;
	String ApprovingAuthority = "";
	int ApprovingAuthorityPlace = 0;
	Date ApprovingAuthorityDate = null;
	String lmp = "";
	String totalTeeth = "";
	String totalDefectiveTeeth = "";
	String missingTeeth = "";
	String DenstalPoint = "";
	String unserviceableTeeth = "";

	String dur8 = "";
	String dur7 = "";
	String dur6 = "";
	String dur5 = "";
	String dur4 = "";
	String dur3 = "";
	String dur2 = "";
	String dur1 = "";
	String dul8 = "";
	String dul7 = "";
	String dul6 = "";
	String dul5 = "";
	String dul4 = "";
	String dul3 = "";
	String dul2 = "";
	String dul1 = "";
	String dlr8 = "";
	String dlr7 = "";
	String dlr6 = "";
	String dlr5 = "";
	String dlr4 = "";
	String dlr3 = "";
	String dlr2 = "";
	String dlr1 = "";
	String dll8 = "";
	String dll7 = "";
	String dll6 = "";
	String dll5 = "";
	String dll4 = "";
	String dll3 = "";
	String dll2 = "";
	String dll1 = "";
	String mur8 = "";
	String mur7 = "";
	String mur6 = "";
	String mur5 = "";
	String mur4 = "";
	String mur3 = "";
	String mur2 = "";
	String mur1 = "";
	String mul8 = "";
	String mul7 = "";
	String mul6 = "";
	String mul5 = "";
	String mul4 = "";
	String mul3 = "";
	String mul2 = "";
	String mul1 = "";
	String mlr8 = "";
	String mlr7 = "";
	String mlr6 = "";
	String mlr5 = "";
	String mlr4 = "";
	String mlr3 = "";
	String mlr2 = "";
	String mlr1 = "";
	String mll8 = "";
	String mll7 = "";
	String mll6 = "";
	String mll5 = "";
	String mll4 = "";
	String mll3 = "";
	String mll2 = "";
	String mll1 = "";
	String uur8 = "";
	String uur7 = "";
	String uur6 = "";
	String uur5 = "";
	String uur4 = "";
	String uur3 = "";
	String uur2 = "";
	String uur1 = "";
	String uul8 = "";
	String uul7 = "";
	String uul6 = "";
	String uul5 = "";
	String uul4 = "";
	String uul3 = "";
	String uul2 = "";
	String uul1 = "";
	String ulr8 = "";
	String ulr7 = "";
	String ulr6 = "";
	String ulr5 = "";
	String ulr4 = "";
	String ulr3 = "";
	String ulr2 = "";
	String ulr1 = "";
	String ull8 = "";
	String ull7 = "";
	String ull6 = "";
	String ull5 = "";
	String ull4 = "";
	String ull3 = "";
	String ull2 = "";
	String ull1 = "";

	String sur8 = "";
	String sur7 = "";
	String sur6 = "";
	String sur5 = "";
	String sur4 = "";
	String sur3 = "";
	String sur2 = "";
	String sur1 = "";
	String sul8 = "";
	String sul7 = "";
	String sul6 = "";
	String sul5 = "";
	String sul4 = "";
	String sul3 = "";
	String sul2 = "";
	String sul1 = "";

	String slr8 = "";
	String slr7 = "";
	String slr6 = "";
	String slr5 = "";
	String slr4 = "";
	String slr3 = "";
	String slr2 = "";
	String slr1 = "";
	String sll8 = "";
	String sll7 = "";
	String sll6 = "";

	String sll5 = "";
	String sll4 = "";
	String sll3 = "";
	String sll2 = "";
	String sll1 = "";
	
	String DentalOfficer="";
	Date dentalcheckupdate = null;
	HttpSession session = req.getSession();
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	int userId = 0;
	Users user = (Users) session.getAttribute("users");
	userId = user.getId();

	int commandId = (Integer) session.getAttribute("commandId");

	Map<String, Object> map = new HashMap<String, Object>();
	// Box box = HMSUtil.getBox(req);
	MasMedicalExaminationReportOnEntry masMedicalBoardProceedings = new MasMedicalExaminationReportOnEntry();

	Map<String, Object> generalMap = new HashMap<String, Object>();
	List<MasMedicalBoardExaminationDetail> masMedicalBoardDetails = new ArrayList<MasMedicalBoardExaminationDetail>();

	/*
	 * Vector<String> v1 = box.getVector(RELATION);
	 * 
	 * Vector<String> v2 = box.getVector(AGE);
	 * 
	 * Vector<String> v3 = box.getVector(HEALTH);
	 * 
	 * Vector<String> v4 = box.getVector(CAUSE_OF_DEATH);
	 * 
	 * Vector<String> v5 = box.getVector(DIED);
	 * 
	 * Vector<String> v6 = box.getVector(SIRIAL_NO);
	 * 
	 * for (int i = 0; i < v2.size(); i++) {
	 * 
	 * MasMedicalBoardExaminationDetail masMedicalBoardDetail = new
	 * MasMedicalBoardExaminationDetail();
	 * masMedicalBoardDetail.setRelation(v1.get(i));
	 * 
	 * masMedicalBoardDetail.setAge(v2.get(i));
	 * 
	 * masMedicalBoardDetail.setHealth(v3.get(i));
	 * 
	 * masMedicalBoardDetail.setCauseOfDeath(v4.get(i));
	 * 
	 * masMedicalBoardDetail.setDied(v5.get(i));
	 * 
	 * masMedicalBoardDetail.setSrNo(Integer.parseInt(v6.get(i)));
	 * 
	 * masMedicalBoardDetails.add(masMedicalBoardDetail);
	 * 
	 * }
	 */
	if (req.getParameter(SERVICE_NO) != null) {
		serviceNo = req.getParameter(SERVICE_NO);
	}
	/*
	 * if (req.getParameter(RANK) != null ) { rank = req.getParameter(RANK);
	 * }
	 */
	/*
	 * if (req.getParameter(NAME) != null ) { rank = req.getParameter(NAME);
	 * }if (req.getParameter(UNIT) != null ) { rank =
	 * req.getParameter(UNIT); }
	 * 
	 * if (req.getParameter(TRADE) != null ) { rank =
	 * req.getParameter(TRADE); }if (req.getParameter(DOB) != null ) { rank
	 * = req.getParameter(DOB); }
	 */
	if (req.getParameter(AGE) != null) {
		age = req.getParameter(AGE);
	}
	if (req.getParameter(TOTAL_SERVICE) != null) {
		totalservice = req.getParameter(TOTAL_SERVICE);
	}
	if (req.getParameter("serviceiaf") != null) {
		serviceiaf = req.getParameter("serviceiaf");
	}

	if (req.getParameter("typeOfCommunication") != null) {
		typeOfCommunication = req.getParameter("typeOfCommunication");
	}
	if (req.getParameter(DATE_COMMENCEMENT) != null) {
		dateofcommun = HMSUtil.dateFormatterDDMMYYYY(req
				.getParameter(DATE_COMMENCEMENT));
	}
	if (req.getParameter(PAST_MEDICAL_HISTORY) != null) {
		pastmedicalhistory = req.getParameter(PAST_MEDICAL_HISTORY);
	}
	if (req.getParameter(PRESENT_MEDICAL_CATEGORY) != null) {
		presentmedicalhistory = req.getParameter(PRESENT_MEDICAL_CATEGORY);
	}
	//---Addd By dipali as discussed with Anshu (06-mar-2013)
	String finalMedCat ="";
	if (req.getParameter("medCatPeriod") != null  && !req.getParameter("medCatPeriod").equals("")) {
		if (req.getParameter("medCatDuration") != null) {
			String medCatDuration = req.getParameter("medCatDuration");
			 finalMedCat = req.getParameter("medCatPeriod").concat(" ").concat(medCatDuration);
		}
	}String shapeFactor="";
	if (req.getParameter("shapeFactor") != null  && !req.getParameter("shapeFactor").equals("")) {
		shapeFactor=req.getParameter("shapeFactor");
	}
	if (req.getParameter(LAST_AME) != null) {
		lastame = req.getParameter(LAST_AME);
	}// if (req.getParameter(HEIGHT_WITHOUT_SHOOSE) != null ) {
	// weight = req.getParameter(HEIGHT_WITHOUT_SHOOSE);
	// }
	if (req.getParameter(ACTUAL_WEIGHT) != null) {
		actualweight = req.getParameter(ACTUAL_WEIGHT);
	}
	if (req.getParameter(IDEAL_WEIGHT) != null) {
		idealweight = req.getParameter(IDEAL_WEIGHT);
	}
	if (req.getParameter(OVER_WEIGHT) != null) {
		overweight = req.getParameter(OVER_WEIGHT);
	}
	if (req.getParameter(WAIST) != null) {
		waist = req.getParameter(WAIST);
	}
	if (req.getParameter(CHEST_FULL) != null) {
		chestfullexpansion = req.getParameter(CHEST_FULL);
	}
	if (req.getParameter(RANGE_EXPANSION) != null) {
		rangeofexpansion = req.getParameter(RANGE_EXPANSION);
	}
	if (req.getParameter(BHI) != null) {
		bhi = req.getParameter(BHI);
	}
	if (req.getParameter(BODY_FAT) != null) {
		bodyfat = req.getParameter(BODY_FAT);
	}
	if (req.getParameter(THICKNESS) != null) {
		signfoldthickness = req.getParameter(THICKNESS);
	}
	if (req.getParameter(SPORTS) != null) {
		sportman = req.getParameter(SPORTS);
	}
	int deptId = 0;
	int empId = 0;
	int hinId = 0;
	int visitId = 0;
	if (req.getParameter("deptId") != null) {
		deptId = Integer.parseInt(req.getParameter("deptId"));
	}
	if (req.getParameter("empId") != null) {
		empId = Integer.parseInt(req.getParameter("empId"));
	}
	if (req.getParameter("hinId") != null) {
		hinId = Integer.parseInt(req.getParameter("hinId"));
	}
	if (req.getParameter("visitId") != null) {
		visitId = Integer.parseInt(req.getParameter("visitId"));
	}
	List<String> chargeCodeIdList = new ArrayList<String>();
	List<Integer> quantityList = new ArrayList<Integer>();
	List<String> investigationReferToMHList = new ArrayList<String>();
	List<Integer> patientInvestigationdetailsIdList = new ArrayList<Integer>();

	int patientInvestigationHeaderId = 0;
	if (req.getParameter("patientInvestigationHeaderId") != null
			&& !req.getParameter("patientInvestigationHeaderId").equals("")) {
		patientInvestigationHeaderId = Integer.parseInt(req
				.getParameter("patientInvestigationHeaderId"));
	}

	String clinicalNotes1 = "";
	if (req.getParameter("clinicalNotes1") != null
			&& !(req.getParameter("clinicalNotes1").equals(""))) {
		clinicalNotes1 = req.getParameter("clinicalNotes1");
	}

	int hiddenValue = 1;
	if (Integer.parseInt(req.getParameter("hiddenValue")) != 1) {
		hiddenValue = Integer.parseInt(req.getParameter("hiddenValue"));
	}
	String deleatedValue = "";
	if (req.getParameter("deleatedValue") != "") {
		deleatedValue = req.getParameter("deleatedValue");

	}
	mapForDS.put("deleatedValue", deleatedValue);

	/*
	 * int temp = 1; List<Integer> dgOrderdtIdList = new
	 * ArrayList<Integer>(); String[] chargeCodeIdArr = new
	 * String[hiddenValue]; for (int i = 0; i < hiddenValue; i++) { if
	 * (req.getParameter("chargeCodeName" + temp) != null &&
	 * !req.getParameter("chargeCodeName" + temp) .equals("")) {
	 * 
	 * String chargeCodeNameWithId = req .getParameter("chargeCodeName" +
	 * temp); int index1 = chargeCodeNameWithId.lastIndexOf("["); int index2
	 * = chargeCodeNameWithId.lastIndexOf("]"); index1++; String
	 * chargeCodeId = chargeCodeNameWithId.substring(index1, index2);
	 * //patientInvestigationdetailsIdList if (!chargeCodeId.equals("")) {
	 * chargeCodeIdArr[i] = chargeCodeId; int qty = 1; // int //
	 * qty=Integer.parseInt(request.getParameter("qty"+temp)); // String
	 * clinicalNotes = request.getParameter("clinicalNotes" + temp);
	 * 
	 * chargeCodeIdList.add(chargeCodeIdArr[i]); quantityList.add(qty);
	 * //clinicalList.add(clinicalNotes); } } if
	 * (req.getParameter("patientInvestigationdetailsId" + temp) != null &&
	 * !req.getParameter("patientInvestigationdetailsId" + temp)
	 * .equals("")) {
	 * patientInvestigationdetailsIdList.add(Integer.parseInt(
	 * req.getParameter("patientInvestigationdetailsId" + temp))); } if
	 * (req.getParameter("dgOrderdtId" + temp) != null &&
	 * !req.getParameter("dgOrderdtId" + temp) .equals("")) {
	 * dgOrderdtIdList.add(Integer.parseInt(req.getParameter("dgOrderdtId" +
	 * temp)));
	 * 
	 * } temp++; }
	 */
	int temp = 1;
	// List<Integer> patientInvestigationdetailsIdList = new
	// ArrayList<Integer>();
	List<Integer> dgOrderdtIdList = new ArrayList<Integer>();
	String[] chargeCodeIdArr = new String[hiddenValue];
	for (int i = 0; i < hiddenValue; i++) {
		if (req.getParameter("chargeCodeName" + temp) != null
				&& !req.getParameter("chargeCodeName" + temp).equals("")) {

			String chargeCodeNameWithId = req.getParameter("chargeCodeName"
					+ temp);
			int index1 = chargeCodeNameWithId.lastIndexOf("[");
			int index2 = chargeCodeNameWithId.lastIndexOf("]");
			index1++;
			String chargeCodeId = chargeCodeNameWithId.substring(index1,
					index2);
			if (!chargeCodeId.equals("")) {
				chargeCodeIdArr[i] = chargeCodeId;
				int qty = 1;
				if (req.getParameter("investigationReferToMH" + temp) != null) {
					investigationReferToMHList.add("y");
				} else {
					investigationReferToMHList.add("n");
				}
				// int
				// qty=Integer.parseInt(request.getParameter("qty"+temp));
				// String clinicalNotes =
				// request.getParameter("clinicalNotes" + temp);

				chargeCodeIdList.add(chargeCodeIdArr[i]);
				quantityList.add(qty);
				// clinicalList.add(clinicalNotes);
			}
		}
		if (req.getParameter("patientInvestigationdetailsId" + temp) != null
				&& !req
						.getParameter(
								"patientInvestigationdetailsId" + temp)
						.equals("")) {
			patientInvestigationdetailsIdList.add(Integer.parseInt(req
					.getParameter("patientInvestigationdetailsId" + temp)));
		}
		if (req.getParameter("dgOrderdtId" + temp) != null
				&& !req.getParameter("dgOrderdtId" + temp).equals("")) {
			dgOrderdtIdList.add(Integer.parseInt(req
					.getParameter("dgOrderdtId" + temp)));
		}
		temp++;
	}

	// --------------------------------------------------------------------------------------

	if (req.getParameter(ENTRY_OF_DATE) != null
			&& !(req.getParameter(ENTRY_OF_DATE).equals(""))) {
		entryDate = HMSUtil.dateFormatterDDMMYYYY(req
				.getParameter(ENTRY_OF_DATE));
	}
	if (req.getParameter(TYPE_OF_ENTRY) != null
			&& !(req.getParameter(TYPE_OF_ENTRY).equals(""))) {
		typeOfEntry = Integer.parseInt(req.getParameter(TYPE_OF_ENTRY));
	}
	if (req.getParameter(BATCH1_NO) != null
			&& !(req.getParameter(BATCH1_NO).equals(""))) {
		betchNo = req.getParameter(BATCH1_NO);
	}
	if (req.getParameter(CHEST_NO) != null
			&& !(req.getParameter(CHEST_NO).equals(""))) {
		chestNo = req.getParameter(CHEST_NO);
	}

	if (req.getParameter(ROLL_NO) != null
			&& !(req.getParameter(ROLL_NO).equals(""))) {
		rollNo = req.getParameter(ROLL_NO);
	}

	if (req.getParameter(MEDICAL_EXAM_HELD_AT) != null) {
		medicalExamHeld = Integer.parseInt(req
				.getParameter(MEDICAL_EXAM_HELD_AT));
	}

	if (req.getParameter(MEDICAL_STATUS) != null
			&& !(req.getParameter(MEDICAL_STATUS).equals(""))) {
		medicalStatus = req.getParameter(MEDICAL_STATUS);
	}
	if (req.getParameter(FULL_NAME) != null
			&& !(req.getParameter(FULL_NAME).equals(""))) {
		fullName = req.getParameter(FULL_NAME);
	}

	if (req.getParameter(DATE_OF_BIRTH) != null
			&& !(req.getParameter(DATE_OF_BIRTH).equals(""))) {
		dateOfBirth = HMSUtil.dateFormatterDDMMYYYY(req
				.getParameter(DATE_OF_BIRTH));
	}

	if (req.getParameter(MARITIAL_STATUS) != null
			&& !(req.getParameter(MARITIAL_STATUS).equals(""))) {
		maritialStatus = Integer
				.parseInt(req.getParameter(MARITIAL_STATUS));
	}

	if (req.getParameter(SERVICE) != null
			&& !(req.getParameter(SERVICE).equals(""))) {
		service = req.getParameter(SERVICE);
	}

	if (req.getParameter(P_NO) != null
			&& !(req.getParameter(P_NO).equals(""))) {
		pNo = req.getParameter(P_NO);
	}

	if (req.getParameter(RANK) != null
			&& !(req.getParameter(RANK).equals(""))) {
		rank = req.getParameter(RANK);
	}

	if (req.getParameter(HOURS_OF_FLOWN) != null
			&& !(req.getParameter(HOURS_OF_FLOWN).equals(""))) {
		hoursOfFlown = req.getParameter(HOURS_OF_FLOWN);
	}
	if (req.getParameter(PERMANENT_ADDRESS) != null
			&& !(req.getParameter(PERMANENT_ADDRESS).equals(""))) {
		permanentAddress = req.getParameter(PERMANENT_ADDRESS);
	}

	if (req.getParameter(IDENTIFICATION_MARKS1) != null
			&& !(req.getParameter(IDENTIFICATION_MARKS1).equals(""))) {
		identification1 = req.getParameter(IDENTIFICATION_MARKS1);
	}

	if (req.getParameter(IDENTIFICATION_MARKS2) != null
			&& !(req.getParameter(IDENTIFICATION_MARKS2).equals(""))) {
		identification2 = req.getParameter(IDENTIFICATION_MARKS2);
	}

	if (req.getParameter(ARMS_CROPS) != null
			&& !(req.getParameter(ARMS_CROPS).equals(""))) {
		armsCrops = req.getParameter(ARMS_CROPS);
	}

	if (req.getParameter(DATE_OF_COMPLETION) != null
			&& !(req.getParameter(DATE_OF_COMPLETION).equals(""))) {
		dateOfCompletion = HMSUtil.dateFormatterDDMMYYYY(req
				.getParameter(DATE_OF_COMPLETION));
	}

	if (req.getParameter(DOCUMENT_FORWARD_DATE1) != null
			&& !(req.getParameter(DOCUMENT_FORWARD_DATE1).equals(""))) {
		documentForwardDate = HMSUtil.dateFormatterDDMMYYYY(req
				.getParameter(DOCUMENT_FORWARD_DATE1));

	}

	if (req.getParameter(DOCUMENT_FORWARD_TO) != null
			&& !(req.getParameter(DOCUMENT_FORWARD_TO).equals(""))) {
		documentForwardTo = req.getParameter(DOCUMENT_FORWARD_TO);
	}
	if (req.getParameter(DATE_OF_REPORTING) != null
			&& !(req.getParameter(DATE_OF_REPORTING).equals(""))) {
		dateOfReporting = HMSUtil.dateFormatterDDMMYYYY(req
				.getParameter(DATE_OF_REPORTING));

	}

	if (req.getParameter(FROM_WHERE_HE_REPORT) != null
			&& !(req.getParameter(FROM_WHERE_HE_REPORT).equals(""))) {
		fromWhereHeReport = req.getParameter(FROM_WHERE_HE_REPORT);
	}
	if (req.getParameter(HYPERTENSION) != null
			&& !(req.getParameter(HYPERTENSION).equals(""))) {
		hypertension = req.getParameter(HYPERTENSION);
	}
	if (req.getParameter(HEAR_DISEASE) != null
			&& !(req.getParameter(HEAR_DISEASE).equals(""))) {
		heartDisease = req.getParameter(HEAR_DISEASE);
	}
	if (req.getParameter(DIABETES) != null
			&& !(req.getParameter(DIABETES).equals(""))) {
		diabetes = req.getParameter(DIABETES);
	}
	if (req.getParameter(BLEEDING_DIORDER) != null
			&& !(req.getParameter(BLEEDING_DIORDER).equals(""))) {
		bleedingDisorder = req.getParameter(BLEEDING_DIORDER);
	}
	if (req.getParameter(MENTAL_DISEASE) != null
			&& !(req.getParameter(MENTAL_DISEASE).equals(""))) {
		mentalDisease = req.getParameter(MENTAL_DISEASE);
	}
	if (req.getParameter(NIGHT_BLINDNESS) != null
			&& !(req.getParameter(NIGHT_BLINDNESS).equals(""))) {
		nightBlindness = req.getParameter(NIGHT_BLINDNESS);
	}

	if (req.getParameter(ASTHAMA) != null
			&& !(req.getParameter(ASTHAMA).equals(""))) {
		asthama = req.getParameter(ASTHAMA);
	}

	if (req.getParameter(DISCHARGE_FROM) != null
			&& !(req.getParameter(DISCHARGE_FROM).equals(""))) {
		dischargeFrom = req.getParameter(DISCHARGE_FROM);

	}

	if (req.getParameter(PLEURISY) != null
			&& !(req.getParameter(PLEURISY).equals(""))) {
		plesury = req.getParameter(PLEURISY);
	}

	if (req.getParameter(EAR_DISEASE) != null
			&& !(req.getParameter(EAR_DISEASE).equals(""))) {
		earDieses = req.getParameter(EAR_DISEASE);
	}

	if (req.getParameter(RHEUMATISM) != null
			&& !(req.getParameter(RHEUMATISM).equals(""))) {
		rheumatism = req.getParameter(RHEUMATISM);
	}
	if (req.getParameter(FREQUENT_CAUGH) != null
			&& !(req.getParameter(FREQUENT_CAUGH).equals(""))) {
		frequentCough = req.getParameter(FREQUENT_CAUGH);
	}

	if (req.getParameter(CHRONIC_INDIGESTION) != null
			&& !(req.getParameter(CHRONIC_INDIGESTION).equals(""))) {
		chronicIndigestion = req.getParameter(CHRONIC_INDIGESTION);
	}
	if (req.getParameter(NERVOUS_BRAKDOWN) != null
			&& !(req.getParameter(NERVOUS_BRAKDOWN).equals(""))) {
		nervousBrakdown = req.getParameter(NERVOUS_BRAKDOWN);
	}

	if (req.getParameter(KIDENY_BLADDER) != null
			&& !(req.getParameter(KIDENY_BLADDER).equals(""))) {
		kidenyBladder = req.getParameter(KIDENY_BLADDER);
	}
	if (req.getParameter(FITS_FAINTING_ATTACKS) != null
			&& !(req.getParameter(FITS_FAINTING_ATTACKS).equals(""))) {
		fitsFaintinngAttacks = req.getParameter(FITS_FAINTING_ATTACKS);
	}
	if (req.getParameter(STD) != null
			&& !(req.getParameter(STD).equals(""))) {
		std = req.getParameter(STD);
	}

	if (req.getParameter(SEVERE_HEAD_INJURY) != null
			&& !(req.getParameter(SEVERE_HEAD_INJURY).equals(""))) {
		serveHeadInjury = req.getParameter(SEVERE_HEAD_INJURY);
	}

	if (req.getParameter(JOUNDICE) != null
			&& !(req.getParameter(JOUNDICE).equals(""))) {
		joundice = req.getParameter(JOUNDICE);
	}
	if (req.getParameter(SICKNESS) != null
			&& !(req.getParameter(SICKNESS).equals(""))) {
		sickness = req.getParameter(SICKNESS);
	}
	if (req.getParameter(BREAST_DISEASE) != null
			&& !(req.getParameter(BREAST_DISEASE).equals(""))) {
		breastDisease = req.getParameter(BREAST_DISEASE);
	}
	if (req.getParameter(TRACHOMA) != null
			&& !(req.getParameter(TRACHOMA).equals(""))) {
		trachoma = req.getParameter(TRACHOMA);
	}

	if (req.getParameter(AMENORRHOEA) != null
			&& !(req.getParameter(AMENORRHOEA).equals(""))) {
		amenorrhoea = req.getParameter(AMENORRHOEA);
	}
	if (req.getParameter(NIGHT_BINDNESS) != null
			&& !(req.getParameter(NIGHT_BINDNESS).equals(""))) {
		nightbindness = req.getParameter(NIGHT_BINDNESS);
	}
	if (req.getParameter(MENORRHAGIA) != null
			&& !(req.getParameter(MENORRHAGIA).equals(""))) {
		menirrhagia = req.getParameter(MENORRHAGIA);
	}
	if (req.getParameter(LASER_TREATEMENT) != null
			&& !(req.getParameter(LASER_TREATEMENT).equals(""))) {
		laserTeartement = req.getParameter(LASER_TREATEMENT);
	}
	if (req.getParameter(PREGNANCY) != null
			&& !(req.getParameter(PREGNANCY).equals(""))) {
		pregnancy = req.getParameter(PREGNANCY);
	}
	if (req.getParameter(EYE_DISEASE) != null
			&& !(req.getParameter(EYE_DISEASE).equals(""))) {
		eyeDisease = req.getParameter(EYE_DISEASE);
	}
	if (req.getParameter(REJECTED_AS_UNFIT) != null
			&& !(req.getParameter(REJECTED_AS_UNFIT).equals(""))) {
		rejectedAsUnfit = req.getParameter(REJECTED_AS_UNFIT);
	}
	if (req.getParameter(DISCHARGE_MEDICALLY_UNFIT) != null
			&& !(req.getParameter(DISCHARGE_MEDICALLY_UNFIT).equals(""))) {
		dischargeMedicallyUnfit = req
				.getParameter(DISCHARGE_MEDICALLY_UNFIT);
	}
	if (req.getParameter(ADIMMITED_IN_HOSPITAL_FOR_ILLNESS) != null
			&& !(req.getParameter(ADIMMITED_IN_HOSPITAL_FOR_ILLNESS)
					.equals(""))) {
		adimmitedInHospitalFirIllness = req
				.getParameter(ADIMMITED_IN_HOSPITAL_FOR_ILLNESS);
	}
	if (req.getParameter(ABORTION) != null
			&& !(req.getParameter(ABORTION).equals(""))) {
		abortion = req.getParameter(ABORTION);
	}

	if (req.getParameter(STATE_NATURE_OF_THE_DISEASE) != null
			&& !(req.getParameter(STATE_NATURE_OF_THE_DISEASE).equals(""))) {
		stateNature = req.getParameter(STATE_NATURE_OF_THE_DISEASE);
	}
	if (req.getParameter(OTHER_INFORMATION) != null
			&& !(req.getParameter(OTHER_INFORMATION).equals(""))) {
		otherInform = req.getParameter(OTHER_INFORMATION);
	}
	if (req.getParameter(HEIGHT_WITHOUT_SHOOSE) != null
			&& !(req.getParameter(HEIGHT_WITHOUT_SHOOSE).equals(""))) {
		height = (new BigDecimal(req.getParameter(HEIGHT_WITHOUT_SHOOSE)));
	}
	if (req.getParameter(ACTUAL_WEIGHT) != null
			&& !(req.getParameter(ACTUAL_WEIGHT).equals(""))) {
		weight = (new BigDecimal(req.getParameter(ACTUAL_WEIGHT)));
	}
	if (req.getParameter(ACCEPTABLE_KG) != null
			&& !(req.getParameter(ACCEPTABLE_KG).equals(""))) {
		acceptableKg = (new BigDecimal(req.getParameter(ACCEPTABLE_KG)));
	}
	if (req.getParameter(LEG_LENGTH) != null
			&& !(req.getParameter(LEG_LENGTH).equals(""))) {
		leglength = (new BigDecimal(req.getParameter(LEG_LENGTH)));
	}
	if (req.getParameter(APPEREANCE) != null
			&& !(req.getParameter(APPEREANCE).equals(""))) {
		appereance = req.getParameter(APPEREANCE);
	}
	if (req.getParameter(ALBUMIN) != null
			&& !(req.getParameter(ALBUMIN).equals(""))) {
		albumin = req.getParameter(ALBUMIN);
	}
	if (req.getParameter(SUGAR) != null
			&& !(req.getParameter(SUGAR).equals(""))) {
		sugar = req.getParameter(SUGAR);
	}
	if (req.getParameter(SP_GRAVITY) != null
			&& !(req.getParameter(SP_GRAVITY).equals(""))) {
		spGraviry = req.getParameter(SP_GRAVITY);
	}
	if (req.getParameter(HB_PERCENTAGE) != null
			&& !(req.getParameter(HB_PERCENTAGE).equals(""))) {
		hbPercentage = req.getParameter(HB_PERCENTAGE);
	}
	if (req.getParameter(PHYSIQUE) != null
			&& !(req.getParameter(PHYSIQUE).equals(""))) {
		physique = req.getParameter(PHYSIQUE);
	}

	if (req.getParameter(ANYOTHER_INV_CARRIED_OUT) != null
			&& !(req.getParameter(ANYOTHER_INV_CARRIED_OUT).equals(""))) {
		anyOtherInv = req.getParameter(ANYOTHER_INV_CARRIED_OUT);
	}
	if (req.getParameter(SKIN) != null
			&& !(req.getParameter(SKIN).equals(""))) {
		skin = req.getParameter(SKIN);
	}
	if (req.getParameter(ABDOMEN) != null
			&& !(req.getParameter(ABDOMEN).equals(""))) {
		abdomen = req.getParameter(ABDOMEN);
	}
	if (req.getParameter(HEART_SIZE) != null
			&& !(req.getParameter(HEART_SIZE).equals(""))) {
		heartSize = req.getParameter(HEART_SIZE);
	}
	if (req.getParameter(SOUND) != null
			&& !(req.getParameter(SOUND).equals(""))) {
		sound = req.getParameter(SOUND);
	}
	if (req.getParameter(RHYTHM) != null
			&& !(req.getParameter(RHYTHM).equals(""))) {
		rhythm = req.getParameter(RHYTHM);
	}
	if (req.getParameter(ARTERIAL_WALLS) != null
			&& !(req.getParameter(ARTERIAL_WALLS).equals(""))) {
		arterialWalls = req.getParameter(ARTERIAL_WALLS);
	}
	if (req.getParameter(PULSE_RATES) != null
			&& !(req.getParameter(PULSE_RATES).equals(""))) {
		pulseRates = req.getParameter(PULSE_RATES);
	}
	if (req.getParameter(BP1) != null
			&& !(req.getParameter(BP1).equals(""))) {
		bp = req.getParameter(BP1);
	}
	if (req.getParameter(FULL_EXPENSION) != null
			&& !(req.getParameter(FULL_EXPENSION).equals(""))) {
		fullExpension = req.getParameter(FULL_EXPENSION);
	}
	if (req.getParameter(RANGE_OF_EXPENSION) != null
			&& !(req.getParameter(RANGE_OF_EXPENSION).equals(""))) {
		rangeOfExpension = req.getParameter(RANGE_OF_EXPENSION);
	}

	if (req.getParameter(SELF_BALANCINF_R) != null
			&& !(req.getParameter(SELF_BALANCINF_R).equals(""))) {
		selfBalR = req.getParameter(SELF_BALANCINF_R);
	}
	if (req.getParameter(SELF_BALANCING_L) != null
			&& !(req.getParameter(SELF_BALANCING_L).equals(""))) {
		selfBalL = req.getParameter(SELF_BALANCING_L);
	}
	if (req.getParameter(SPEECH_MENTAL_CAPACITY) != null
			&& !(req.getParameter(SPEECH_MENTAL_CAPACITY).equals(""))) {
		speechMental = req.getParameter(SPEECH_MENTAL_CAPACITY);
	}
	if (req.getParameter(ENDOCRINE_CONDITION) != null
			&& !(req.getParameter(ENDOCRINE_CONDITION).equals(""))) {
		endocrinCond = req.getParameter(ENDOCRINE_CONDITION);
	}
	if (req.getParameter(OTHER_ABNORMALITIES) != null
			&& !(req.getParameter(OTHER_ABNORMALITIES).equals(""))) {
		otherAbnormalities = req.getParameter(OTHER_ABNORMALITIES);
	}
	if (req.getParameter(MEDICIN_REMARKS) != null
			&& !(req.getParameter(MEDICIN_REMARKS).equals(""))) {
		medicinRemarks = req.getParameter(MEDICIN_REMARKS);
	}
	if (req.getParameter(FINGER) != null
			&& !(req.getParameter(FINGER).equals(""))) {
		finger = req.getParameter(FINGER);
	}
	if (req.getParameter(HAND) != null
			&& !(req.getParameter(HAND).equals(""))) {
		hand = req.getParameter(HAND);
	}
	if (req.getParameter(WRIST) != null
			&& !(req.getParameter(WRIST).equals(""))) {
		wrist = req.getParameter(WRIST);
	}
	if (req.getParameter(ELBOWS) != null
			&& !(req.getParameter(ELBOWS).equals(""))) {
		elbows = req.getParameter(ELBOWS);
	}
	if (req.getParameter(SHOULDER_GIRDLES) != null
			&& !(req.getParameter(SHOULDER_GIRDLES).equals(""))) {
		shoulderGridles = req.getParameter(SHOULDER_GIRDLES);
	}
	if (req.getParameter(CERCIVAL) != null
			&& !(req.getParameter(CERCIVAL).equals(""))) {
		cercival = req.getParameter(CERCIVAL);
	}
	if (req.getParameter(DORSAL_VERTEBRATE) != null
			&& !(req.getParameter(DORSAL_VERTEBRATE).equals(""))) {
		dorsalVertebrate = req.getParameter(DORSAL_VERTEBRATE);
	}
	if (req.getParameter(HULLUX) != null
			&& !(req.getParameter(HULLUX).equals(""))) {
		hullux = req.getParameter(HULLUX);
	}
	if (req.getParameter(VALGUS) != null
			&& !(req.getParameter(VALGUS).equals(""))) {
		valgus = req.getParameter(VALGUS);
	}
	if (req.getParameter(RIGGUS) != null
			&& !(req.getParameter(RIGGUS).equals(""))) {
		riggus = req.getParameter(RIGGUS);
	}
	if (req.getParameter(FLAT_FEET) != null
			&& !(req.getParameter(FLAT_FEET).equals(""))) {
		flatFeet = req.getParameter(FLAT_FEET);
	}
	if (req.getParameter(JOINTS) != null
			&& !(req.getParameter(JOINTS).equals(""))) {
		joints = req.getParameter(JOINTS);
	}
	if (req.getParameter(PELVIS) != null
			&& !(req.getParameter(PELVIS).equals(""))) {
		pelvis = req.getParameter(PELVIS);
	}
	if (req.getParameter(GAIL) != null
			&& !(req.getParameter(GAIL).equals(""))) {
		gail = req.getParameter(GAIL);
	}
	if (req.getParameter(LUMBER_SCALER_VERTABRAC) != null
			&& !(req.getParameter(LUMBER_SCALER_VERTABRAC).equals(""))) {
		lumberScaler = req.getParameter(LUMBER_SCALER_VERTABRAC);
	}
	if (req.getParameter(ROCCYX_VARICOSE_VENIS) != null
			&& !(req.getParameter(ROCCYX_VARICOSE_VENIS).equals(""))) {
		roccyxVericose = req.getParameter(ROCCYX_VARICOSE_VENIS);
	}
	if (req.getParameter(HYDROCELE) != null
			&& !(req.getParameter(HYDROCELE).equals(""))) {
		hydrocele = req.getParameter(HYDROCELE);
	}
	if (req.getParameter(VARICOCELE) != null
			&& !(req.getParameter(VARICOCELE).equals(""))) {
		varicocele = req.getParameter(VARICOCELE);
	}
	if (req.getParameter(UNDER_SCENDED_TESTES) != null
			&& !(req.getParameter(UNDER_SCENDED_TESTES).equals(""))) {
		underScende = req.getParameter(UNDER_SCENDED_TESTES);
	}
	if (req.getParameter(HEMONHOIDS) != null
			&& !(req.getParameter(HEMONHOIDS).equals(""))) {
		hemonhoids = req.getParameter(HEMONHOIDS);
	}
	if (req.getParameter(HERNIA_MUSCLE) != null
			&& !(req.getParameter(HERNIA_MUSCLE).equals(""))) {
		herinaMusic = req.getParameter(HERNIA_MUSCLE);
	}
	if (req.getParameter(BREASTS) != null
			&& !(req.getParameter(BREASTS).equals(""))) {
		breasts = req.getParameter(BREASTS);
	}
	if (req.getParameter(SURGERY_REMARKS) != null
			&& !(req.getParameter(SURGERY_REMARKS).equals(""))) {
		surgeryRemarks = req.getParameter(SURGERY_REMARKS);
	}
	if (req.getParameter(RESPIRATORY_SYSTEM) != null
			&& !(req.getParameter(RESPIRATORY_SYSTEM).equals(""))) {
		respatorySystem = req.getParameter(RESPIRATORY_SYSTEM);
	}

	if (req.getParameter(WITH_GLASSES_DISTANT_R) != null
			&& !(req.getParameter(WITH_GLASSES_DISTANT_R).equals(""))) {
		withGlassesDistantR = req.getParameter(WITH_GLASSES_DISTANT_R);
	}
	if (req.getParameter(WITH_GLASSES_DISTANT_L) != null
			&& !(req.getParameter(WITH_GLASSES_DISTANT_L).equals(""))) {
		withglassesDistantL = req.getParameter(WITH_GLASSES_DISTANT_L);
	}
	if (req.getParameter(WITH_GLASSES_NEAR_R) != null
			&& !(req.getParameter(WITH_GLASSES_NEAR_R).equals(""))) {
		withGlassesNearR = req.getParameter(WITH_GLASSES_NEAR_R);
	}
	if (req.getParameter(WITH_GLASSES_NEAR_L) != null
			&& !(req.getParameter(WITH_GLASSES_NEAR_L).equals(""))) {
		withGlassesNearL = req.getParameter(WITH_GLASSES_NEAR_L);
	}
	if (req.getParameter(WITH_GLASSES_NEAR_CP) != null
			&& !(req.getParameter(WITH_GLASSES_NEAR_CP).equals(""))) {
		withGlassesNearCP = req.getParameter(WITH_GLASSES_NEAR_CP);

	}
	if (req.getParameter(WITHOUT_GLASSES_DISTANT_R) != null
			&& !(req.getParameter(WITHOUT_GLASSES_DISTANT_R).equals(""))) {
		withoutGlassesDistantR = req
				.getParameter(WITHOUT_GLASSES_DISTANT_R);
	}
	if (req.getParameter(WITHOUT_GLASSES_DISTANT_L) != null
			&& !(req.getParameter(WITHOUT_GLASSES_DISTANT_L).equals(""))) {
		withoutGlassesDistantL = req
				.getParameter(WITHOUT_GLASSES_DISTANT_L);
	}
	if (req.getParameter(WITHOUT_GLASSES_NEAR_R) != null
			&& !(req.getParameter(WITHOUT_GLASSES_NEAR_R).equals(""))) {
		withoutGlassesNearR = req.getParameter(WITHOUT_GLASSES_NEAR_R);
	}
	if (req.getParameter(WITHOUT_GLASSES_NEAR_L) != null
			&& !(req.getParameter(WITHOUT_GLASSES_NEAR_L).equals(""))) {
		withoutGlassesNearL = req.getParameter(WITHOUT_GLASSES_NEAR_L);
	}
	if (req.getParameter(WITHOUT_GLASSES_NEAR_CP) != null
			&& !(req.getParameter(WITHOUT_GLASSES_NEAR_CP).equals(""))) {
		withoutGlassesNearCP = req.getParameter(WITHOUT_GLASSES_NEAR_CP);
	}
	if (req.getParameter(CONVERGENCE_SC) != null
			&& !(req.getParameter(CONVERGENCE_SC).equals(""))) {
		convergenceCP = new BigDecimal(req.getParameter(CONVERGENCE_SC));
	}
	if (req.getParameter(CONVERGENCE_C) != null
			&& !(req.getParameter(CONVERGENCE_C).equals(""))) {
		convergenceC = new BigDecimal(req.getParameter(CONVERGENCE_C));

	}
	if (req.getParameter(ACCOMMODATION_R) != null
			&& !(req.getParameter(ACCOMMODATION_R).equals(""))) {
		accommodationR = req.getParameter(ACCOMMODATION_R);
	}
	if (req.getParameter(ACCOMMODATION_L) != null
			&& !(req.getParameter(ACCOMMODATION_L).equals(""))) {
		accommodationL = req.getParameter(ACCOMMODATION_L);
	}

	if (req.getParameter(EYE_REMARKS) != null
			&& !(req.getParameter(EYE_REMARKS).equals(""))) {
		eyeRemarks = req.getParameter(EYE_REMARKS);
	}
	if (req.getParameter(EYE_DATE) != null
			&& !(req.getParameter(EYE_DATE).equals(""))) {
		eyeDate = HMSUtil.dateFormatterDDMMYYYY(req.getParameter(EYE_DATE));
	}
	if (req.getParameter(HEARING_R_F_W) != null
			&& !(req.getParameter(HEARING_R_F_W).equals(""))) {
		hearingRFW = new BigDecimal(req.getParameter(HEARING_R_F_W));
	}
	if (req.getParameter(HEARING_L_F_W) != null
			&& !(req.getParameter(HEARING_L_F_W).equals(""))) {
		hearingLFW = new BigDecimal(req.getParameter(HEARING_L_F_W));
	}
	if (req.getParameter(HEARING_BOTH_FW) != null
			&& !(req.getParameter(HEARING_BOTH_FW).equals(""))) {
		hearingBothFW = new BigDecimal(req.getParameter(HEARING_BOTH_FW));
	}

	if (req.getParameter(HEARING_R_C_V) != null
			&& !(req.getParameter(HEARING_R_C_V).equals(""))) {
		hearingRCV = new BigDecimal(req.getParameter(HEARING_R_C_V));
	}
	if (req.getParameter(HEARING_L_C_V) != null
			&& !(req.getParameter(HEARING_L_C_V).equals(""))) {
		hearingLCV = new BigDecimal(req.getParameter(HEARING_L_C_V));
	}
	if (req.getParameter(HEARING_BOTH_CV) != null
			&& !(req.getParameter(HEARING_BOTH_CV).equals(""))) {
		hearingBothCV = new BigDecimal(req.getParameter(HEARING_BOTH_CV));
	}
	/*
	 * Code for tmr,tml,mobility_r,mobility_l,noseThroatSinuses Date 12
	 * March 2012 By Mukesh
	 */
	String tmr = "";
	String tml = "";
	String mobility_r = "";
	String mobility_l = "";
	String noseThroatSinuses = "";

	if (req.getParameter(TYMPANIC_R) != null
			&& !(req.getParameter(TYMPANIC_R).equals(""))) {
		tmr = req.getParameter(TYMPANIC_R);
	}
	if (req.getParameter(TYMPANIC_L) != null
			&& !(req.getParameter(TYMPANIC_L).equals(""))) {
		tml = req.getParameter(TYMPANIC_L);
	}
	if (req.getParameter(MOBILITYR) != null
			&& !(req.getParameter(MOBILITYR).equals(""))) {
		mobility_r = req.getParameter(MOBILITYR);
	}
	if (req.getParameter(MOBILITYL) != null
			&& !(req.getParameter(MOBILITYL).equals(""))) {
		mobility_l = req.getParameter(MOBILITYL);
	}
	if (req.getParameter(NOSE_THROAT_SINUSES) != null
			&& !(req.getParameter(NOSE_THROAT_SINUSES).equals(""))) {
		noseThroatSinuses = req.getParameter(NOSE_THROAT_SINUSES);
	}
	
	//Added By Vinay

    if (req.getParameter("DentalOfficer") != null) {
	DentalOfficer= req.getParameter("DentalOfficer");
	
    }

	if (req.getParameter("dentalcheckupdate") != null
			&& !(req.getParameter("dentalcheckupdate").equals(""))) {
		dentalcheckupdate = HMSUtil.dateFormatterDDMMYYYY(req
				.getParameter("dentalcheckupdate"));
	}

	masMedicalBoardProceedings.setDentalOfficer(DentalOfficer);
    masMedicalBoardProceedings.setDentalCheckupDate(dentalcheckupdate);
    
    
    
	masMedicalBoardProceedings.setTympanicR(tmr);
	masMedicalBoardProceedings.setTympanicL(tml);
	masMedicalBoardProceedings.setMobilityR(mobility_r);
	masMedicalBoardProceedings.setMobilityL(mobility_l);
	masMedicalBoardProceedings.setNoseThroatSinuses(noseThroatSinuses);
	/*
	 * End of Code for tmr,tml,mobility_r,mobility_l,noseThroatSinuses Date
	 * 12 March 2012
	 */
	if (req.getParameter(INNER_EAR_R) != null
			&& !(req.getParameter(INNER_EAR_R).equals(""))) {
		innerEarR = req.getParameter(INNER_EAR_R);
	}
	if (req.getParameter(INNER_EAR_L) != null
			&& !(req.getParameter(INNER_EAR_L).equals(""))) {
		innerEarL = req.getParameter(INNER_EAR_L);
	}

	if (req.getParameter(AUDIOMETRY_RECORD) != null
			&& !(req.getParameter(AUDIOMETRY_RECORD).equals(""))) {
		audiometryRecord = req.getParameter(AUDIOMETRY_RECORD);
	}
	if (req.getParameter(NOSE) != null
			&& !(req.getParameter(NOSE).equals(""))) {
		nose = req.getParameter(NOSE);
	}
	if (req.getParameter(THROAT_EAR) != null
			&& !(req.getParameter(THROAT_EAR).equals(""))) {
		throatEar = req.getParameter(THROAT_EAR);
	}
	if (req.getParameter(EAR_REMARKS) != null
			&& !(req.getParameter(EAR_REMARKS).equals(""))) {
		earReamrks = req.getParameter(EAR_REMARKS);
	}
	if (req.getParameter(EAR_DATE) != null
			&& !(req.getParameter(EAR_DATE).equals(""))) {
		earDate = HMSUtil.dateFormatterDDMMYYYY(req.getParameter(EAR_DATE));
	}

	if (req.getParameter(EXTERNAL_EAR_R) != null
			&& !(req.getParameter(EXTERNAL_EAR_R).equals(""))) {
		externalEarR = req.getParameter(EXTERNAL_EAR_R);
	}
	if (req.getParameter(EXTERNAL_EAR_L) != null
			&& !(req.getParameter(EXTERNAL_EAR_L).equals(""))) {
		externalEarL = req.getParameter(EXTERNAL_EAR_L);
	}
	if (req.getParameter(MIDDLE_EAR_R) != null
			&& !(req.getParameter(MIDDLE_EAR_R).equals(""))) {
		middleEarR = req.getParameter(MIDDLE_EAR_R);
	}
	if (req.getParameter(MIDDLE_EAR_L) != null
			&& !(req.getParameter(MIDDLE_EAR_L).equals(""))) {
		middleEarL = req.getParameter(MIDDLE_EAR_L);
	}
	if (req.getParameter(ANY_EVIDENCE_OF_TRACHOMA) != null
			&& !(req.getParameter(ANY_EVIDENCE_OF_TRACHOMA).equals(""))) {
		evidienceOfTrachoma = req.getParameter(ANY_EVIDENCE_OF_TRACHOMA);
	}
	if (req.getParameter(BINOCULAR_VISION_GRADE) != null
			&& !(req.getParameter(BINOCULAR_VISION_GRADE).equals(""))) {
		binocular = req.getParameter(BINOCULAR_VISION_GRADE);
	}
	if (req.getParameter(MANIFEST_HYPERMETROPIA) != null
			&& !(req.getParameter(MANIFEST_HYPERMETROPIA).equals(""))) {
		manifestHypermetropia = req.getParameter(MANIFEST_HYPERMETROPIA);
	}
	if (req.getParameter(COVER_TEST) != null
			&& !(req.getParameter(COVER_TEST).equals(""))) {
		coverTest = req.getParameter(COVER_TEST);
	}
	if (req.getParameter(DIAPHRAGM_TEST) != null
			&& !(req.getParameter(DIAPHRAGM_TEST).equals(""))) {
		diaphragmTest = req.getParameter(DIAPHRAGM_TEST);
	}
	if (req.getParameter(FUND_MEDIA) != null
			&& !(req.getParameter(FUND_MEDIA).equals(""))) {
		fundMedia = req.getParameter(FUND_MEDIA);
	}
	if (req.getParameter(FIELDS) != null
			&& !(req.getParameter(FIELDS).equals(""))) {
		fields = req.getParameter(FIELDS);
	}
	if (req.getParameter(NIGHT_VISUAL_CAPACITY) != null
			&& !(req.getParameter(NIGHT_VISUAL_CAPACITY).equals(""))) {
		nightVisualCapacity = req.getParameter(NIGHT_VISUAL_CAPACITY);
	}
	if (req.getParameter(DENTAL_REMARKS) != null
			&& !(req.getParameter(DENTAL_REMARKS).equals(""))) {
		dentalRemarks = req.getParameter(DENTAL_REMARKS);
	}

	if (req.getParameter(DENTAL_DATE) != null
			&& !(req.getParameter(DENTAL_DATE).equals(""))) {
		dentalDate = HMSUtil.dateFormatterDDMMYYYY(req
				.getParameter(DENTAL_DATE));
	}
	if (req.getParameter(MENSTRUAL_HISTORY) != null
			&& !(req.getParameter(MENSTRUAL_HISTORY).equals(""))) {
		menstrualHistory = req.getParameter(MENSTRUAL_HISTORY);
	}
	if (req.getParameter(NO_OF_PREGNANCY) != null
			&& !(req.getParameter(NO_OF_PREGNANCY).equals(""))) {
		noOfPregnancy = Integer.parseInt(req.getParameter(NO_OF_PREGNANCY));
	}
	if (req.getParameter(NO_OF_ABORTION) != null
			&& !(req.getParameter(NO_OF_ABORTION).equals(""))) {
		noOfAbortion = Integer.parseInt(req.getParameter(NO_OF_ABORTION));
	}
	if (req.getParameter(NO_OF_CHILDREN) != null
			&& !(req.getParameter(NO_OF_CHILDREN).equals(""))) {
		noOfChildren = Integer.parseInt(req.getParameter(NO_OF_CHILDREN));
	}
	if (req.getParameter(DATE_OF_LASTCONFINEMENT) != null
			&& !(req.getParameter(DATE_OF_LASTCONFINEMENT).equals(""))) {
		lastCondinement = HMSUtil.dateFormatterDDMMYYYY(req
				.getParameter(DATE_OF_LASTCONFINEMENT));
	}
	if (req.getParameter(VAGINAL_DISCHARGE) != null
			&& !(req.getParameter(VAGINAL_DISCHARGE).equals(""))) {
		vaginalDischarge = req.getParameter(VAGINAL_DISCHARGE);
	}
	if (req.getParameter(PROLAPSE) != null
			&& !(req.getParameter(PROLAPSE).equals(""))) {
		prolapse = req.getParameter(PROLAPSE);
	}
	if (req.getParameter(USG_ABORTION) != null
			&& !(req.getParameter(USG_ABORTION).equals(""))) {
		usgAbortion = req.getParameter(USG_ABORTION);
	}
	if (req.getParameter(GYANAECOLOGY_RAMARKS) != null
			&& !(req.getParameter(GYANAECOLOGY_RAMARKS).equals(""))) {
		gyanaecologyRemarks = req.getParameter(GYANAECOLOGY_RAMARKS);
	}
	if (req.getParameter(GYANAECOLOGY_DATE) != null
			&& !(req.getParameter(GYANAECOLOGY_DATE).equals(""))) {
		gyanaecologyDate = HMSUtil.dateFormatterDDMMYYYY(req
				.getParameter(GYANAECOLOGY_DATE));
	}
	if (req.getParameter(GYANAECOLOGY_RAMARKS) != null
			&& !(req.getParameter(GYANAECOLOGY_RAMARKS).equals(""))) {
		gyanaecologyRemarks = req.getParameter(GYANAECOLOGY_RAMARKS);
	}
	if (req.getParameter(MEDICAL_BOARD_EXAMINATION) != null
			&& !(req.getParameter(MEDICAL_BOARD_EXAMINATION).equals(""))) {
		medicalBoardExamination = req
				.getParameter(MEDICAL_BOARD_EXAMINATION);
	}
	if (req.getParameter(MEDICAL_BOARD_EXAMINATION_PLACE) != null
			&& !(req.getParameter(MEDICAL_BOARD_EXAMINATION_PLACE)
					.equals(""))) {

		medicalBoardExaminationPlace = Integer.parseInt(req
				.getParameter(MEDICAL_BOARD_EXAMINATION_PLACE));

	}
	if (req.getParameter(MEDICAL_BOARD_EXAMINATION_DATE) != null
			&& !(req.getParameter(MEDICAL_BOARD_EXAMINATION_DATE)
					.equals(""))) {
		medicalBoardExaminationDate = HMSUtil.dateFormatterDDMMYYYY((req
				.getParameter(MEDICAL_BOARD_EXAMINATION_DATE)));
	}
	if (req.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION) != null
			&& !(req.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION)
					.equals(""))) {
		subsequentMedicalBoardExam = req
				.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION);
	}
	if (req.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION_PLACE) != null
			&& !(req
					.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION_PLACE)
					.equals(""))) {
		subsequentMedicalBoardExamPlace = Integer.parseInt(req
				.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION_PLACE));
	}
	if (req.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION_DATE) != null
			&& !(req
					.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION_DATE)
					.equals(""))) {
		subsequentMedicalBoardExamDate = HMSUtil.dateFormatterDDMMYYYY((req
				.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION_DATE)));
	}

	if (req.getParameter(APPROVING_AUTHORITY) != null
			&& !(req.getParameter(APPROVING_AUTHORITY).equals(""))) {
		ApprovingAuthority = req.getParameter(APPROVING_AUTHORITY);
	}
	if (req.getParameter(APPROVING_AUTHORITY_PLACE) != null
			&& !(req.getParameter(APPROVING_AUTHORITY_PLACE).equals(""))) {
		ApprovingAuthorityPlace = Integer.parseInt(req
				.getParameter(APPROVING_AUTHORITY_PLACE));
	}
	if (req.getParameter(APPROVING_AUTHORITY_DATE) != null
			&& !(req.getParameter(APPROVING_AUTHORITY_DATE).equals(""))) {
		ApprovingAuthorityDate = HMSUtil.dateFormatterDDMMYYYY((req
				.getParameter(APPROVING_AUTHORITY_DATE)));
	}
	if (req.getParameter(LMP) != null
			&& !(req.getParameter(LMP).equals(""))) {
		lmp = (req.getParameter(LMP));
	}

	if (req.getParameter(SURGERY_DATE) != null
			&& !(req.getParameter(SURGERY_DATE).equals(""))) {
		surgeyDate = HMSUtil.dateFormatterDDMMYYYY((req
				.getParameter(SURGERY_DATE)));
	}

	if (req.getParameter(MEDICIN_EXAM_DATE) != null
			&& !(req.getParameter(MEDICIN_EXAM_DATE).equals(""))) {
		medicinExamDate = HMSUtil.dateFormatterDDMMYYYY((req
				.getParameter(MEDICIN_EXAM_DATE)));

	}
	if (req.getParameter(TOTAL_NO_OF_TEETH) != null
			&& !(req.getParameter(TOTAL_NO_OF_TEETH).equals(""))) {
		totalTeeth = req.getParameter(TOTAL_NO_OF_TEETH);

	}
	if (req.getParameter(DEFECTIVE_TEETH) != null
			&& !(req.getParameter(DEFECTIVE_TEETH).equals(""))) {
		totalDefectiveTeeth = req.getParameter(DEFECTIVE_TEETH);

	}
	if (req.getParameter(MISSING_TEETH) != null
			&& !(req.getParameter(MISSING_TEETH).equals(""))) {
		missingTeeth = req.getParameter(MISSING_TEETH);

	}
	if (req.getParameter(MISSING_UNSERVICABLE_TEETH) != null
			&& !(req.getParameter(MISSING_UNSERVICABLE_TEETH).equals(""))) {
		unserviceableTeeth = req.getParameter(MISSING_UNSERVICABLE_TEETH);

	}
	if (req.getParameter(DENTSL_POINT) != null
			&& !(req.getParameter(DENTSL_POINT).equals(""))) {
		DenstalPoint = req.getParameter(DENTSL_POINT);

	}
	String dentalReferToMH = "";
	if (req.getParameter("refferToMh") != null) {
		dentalReferToMH = "yes";
	} else {
		dentalReferToMH = "no";
	}
	if (req.getParameter(LAST_CHANGED_BY) != null) {
		lastChangedBy = req.getParameter(LAST_CHANGED_BY);
	}
	if (req.getParameter(LAST_CHANGED_DATE) != null) {
		lastChangedDate = HMSUtil.dateFormatterDDMMYYYY(req
				.getParameter(LAST_CHANGED_DATE));
	}
	if (req.getParameter(LAST_CHANGED_TIME) != null) {
		lastChangedTime = req.getParameter(LAST_CHANGED_TIME);
	}
	// //////////////////////////////////

	if (req.getParameter(DUR_8) != null
			&& !req.getParameter(DUR_8).equals("")) {
		dur8 = (req.getParameter(DUR_8));

	} else {
		dur8 = "N";

	}

	if (req.getParameter(DUR_7) != null
			&& !req.getParameter(DUR_7).equals("")) {
		dur7 = (req.getParameter(DUR_7));

	} else {
		dur7 = "N";

	}
	if (req.getParameter(DUR_6) != null
			&& !req.getParameter(DUR_6).equals("")) {
		dur6 = (req.getParameter(DUR_6));

	} else {
		dur6 = "N";

	}
	if (req.getParameter(DUR_5) != null
			&& !req.getParameter(DUR_5).equals("")) {
		dur5 = (req.getParameter(DUR_5));

	} else {
		dur5 = "N";

	}

	if (req.getParameter(DUR_4) != null
			&& !req.getParameter(DUR_4).equals("")) {
		dur4 = (req.getParameter(DUR_4));
	} else {
		dur4 = "N";

	}
	if (req.getParameter(DUR_3) != null
			&& !req.getParameter(DUR_3).equals("")) {
		dur3 = (req.getParameter(DUR_3));

	} else {
		dur3 = "N";

	}
	if (req.getParameter(DUR_2) != null
			&& !req.getParameter(DUR_2).equals("")) {
		dur2 = (req.getParameter(DUR_2));

	} else {
		dur2 = "N";

	}
	if (req.getParameter(DUR_1) != null
			&& !req.getParameter(DUR_1).equals("")) {
		dur1 = (req.getParameter(DUR_1));

	} else {
		dur1 = "N";

	}

	if (req.getParameter(DUL_8) != null
			&& !req.getParameter(DUL_8).equals("")) {
		dul8 = (req.getParameter(DUL_8));
	} else {
		dul8 = "N";

	}
	if (req.getParameter(DUL_7) != null
			&& !req.getParameter(DUL_7).equals("")) {
		dul7 = (req.getParameter(DUL_7));

	} else {
		dul7 = "N";

	}
	if (req.getParameter(DUL_6) != null
			&& !req.getParameter(DUL_6).equals("")) {
		dul6 = (req.getParameter(DUL_6));
	} else {
		dul6 = "N";

	}
	if (req.getParameter(DUL_5) != null
			&& !req.getParameter(DUL_5).equals("")) {
		dul5 = (req.getParameter(DUL_5));
	} else {
		dul5 = "N";

	}
	if (req.getParameter(DUL_4) != null
			&& !req.getParameter(DUL_4).equals("")) {
		dul4 = (req.getParameter(DUL_4));
	} else {
		dul4 = "N";

	}
	if (req.getParameter(DUL_3) != null
			&& !req.getParameter(DUL_3).equals("")) {
		dul3 = (req.getParameter(DUL_3));
	} else {
		dul3 = "N";

	}
	if (req.getParameter(DUL_2) != null
			&& !req.getParameter(DUL_2).equals("")) {
		dul2 = (req.getParameter(DUL_2));
	} else {
		dul2 = "N";

	}
	if (req.getParameter(DUL_1) != null
			&& !req.getParameter(DUL_1).equals("")) {
		dul1 = (req.getParameter(DUL_1));
	} else {
		dul1 = "N";

	}

	if (req.getParameter(DLR_8) != null
			&& !req.getParameter(DLR_8).equals("")) {
		dlr8 = (req.getParameter(DLR_8));
	} else {
		dlr8 = "N";

	}
	if (req.getParameter(DLR_7) != null
			&& !req.getParameter(DLR_7).equals("")) {
		dlr7 = (req.getParameter(DLR_7));
	} else {
		dlr7 = "N";

	}
	if (req.getParameter(DLR_6) != null
			&& !req.getParameter(DLR_6).equals("")) {
		dlr6 = (req.getParameter(DLR_6));
	} else {
		dlr6 = "N";

	}
	if (req.getParameter(DLR_5) != null
			&& !req.getParameter(DLR_5).equals("")) {
		dlr5 = (req.getParameter(DLR_5));
	} else {
		dlr5 = "N";

	}
	if (req.getParameter(DLR_4) != null
			&& !req.getParameter(DLR_4).equals("")) {
		dlr4 = (req.getParameter(DLR_4));
	} else {
		dlr4 = "N";

	}
	if (req.getParameter(DLR_3) != null
			&& !req.getParameter(DLR_3).equals("")) {
		dlr3 = (req.getParameter(DLR_3));
	} else {
		dlr3 = "N";

	}
	if (req.getParameter(DLR_2) != null
			&& !req.getParameter(DLR_2).equals("")) {
		dlr2 = (req.getParameter(DLR_2));
	} else {
		dlr2 = "N";

	}

	if (req.getParameter(DLR_1) != null
			&& !req.getParameter(DLR_1).equals("")) {
		dlr1 = (req.getParameter(DLR_1));
	} else {
		dlr1 = "N";

	}

	if (req.getParameter(DLL_8) != null
			&& !req.getParameter(DLL_8).equals("")) {
		dll8 = (req.getParameter(DLL_8));
	} else {
		dll8 = "N";

	}
	if (req.getParameter(DLL_7) != null
			&& !req.getParameter(DLL_7).equals("")) {
		dll7 = (req.getParameter(DLL_7));
	} else {
		dll7 = "N";

	}

	if (req.getParameter(DLL_6) != null
			&& !req.getParameter(DLL_6).equals("")) {
		dll6 = (req.getParameter(DLL_6));
	} else {
		dll6 = "N";

	}
	if (req.getParameter(DLL_5) != null
			&& !req.getParameter(DLL_5).equals("")) {
		dll5 = (req.getParameter(DLL_5));
	} else {
		dll5 = "N";

	}
	if (req.getParameter(DLL_4) != null
			&& !req.getParameter(DLL_4).equals("")) {
		dll4 = (req.getParameter(DLL_4));
	} else {
		dll4 = "N";

	}
	if (req.getParameter(DLL_3) != null
			&& !req.getParameter(DLL_3).equals("")) {
		dll3 = (req.getParameter(DLL_3));
	} else {
		dll3 = "N";

	}
	if (req.getParameter(DLL_2) != null
			&& !req.getParameter(DLL_2).equals("")) {
		dll2 = (req.getParameter(DLL_2));
	} else {
		dll2 = "N";

	}
	if (req.getParameter(DLL_1) != null
			&& !req.getParameter(DLL_1).equals("")) {
		dll1 = (req.getParameter(DLL_1));
	} else {
		dll1 = "N";

	}
	// ///////////////////////////

	if (req.getParameter(UUR_8) != null
			&& !req.getParameter(UUR_8).equals("")) {
		uur8 = (req.getParameter(UUR_8));
	} else {
		uur8 = "N";

	}

	if (req.getParameter(UUR_7) != null
			&& !req.getParameter(UUR_7).equals("")) {
		uur7 = (req.getParameter(UUR_7));
	} else {
		uur7 = "N";

	}
	if (req.getParameter(UUR_6) != null
			&& !req.getParameter(UUR_6).equals("")) {
		uur6 = (req.getParameter(UUR_6));
	} else {
		uur6 = "N";

	}
	if (req.getParameter(UUR_5) != null
			&& !req.getParameter(UUR_5).equals("")) {
		uur5 = (req.getParameter(UUR_5));
	} else {
		uur5 = "N";

	}
	if (req.getParameter(UUR_4) != null
			&& !req.getParameter(UUR_4).equals("")) {
		uur4 = (req.getParameter(UUR_4));
	} else {
		uur4 = "N";

	}
	if (req.getParameter(UUR_3) != null
			&& !req.getParameter(UUR_3).equals("")) {
		uur3 = (req.getParameter(UUR_3));
	} else {
		uur3 = "N";

	}
	if (req.getParameter(UUR_2) != null
			&& !req.getParameter(UUR_2).equals("")) {
		uur2 = (req.getParameter(UUR_2));
	} else {
		uur2 = "N";

	}
	if (req.getParameter(UUR_1) != null
			&& !req.getParameter(UUR_1).equals("")) {
		uur1 = (req.getParameter(UUR_1));
	} else {
		uur1 = "N";

	}

	if (req.getParameter(UUL_8) != null
			&& !req.getParameter(UUL_8).equals("")) {
		uul8 = (req.getParameter(UUL_8));
	} else {
		uul8 = "N";

	}
	if (req.getParameter(UUL_7) != null
			&& !req.getParameter(UUL_7).equals("")) {
		uul7 = (req.getParameter(UUL_7));

	} else {
		uul7 = "N";

	}
	if (req.getParameter(UUL_6) != null
			&& !req.getParameter(UUL_6).equals("")) {
		uul6 = (req.getParameter(UUL_6));
	} else {
		uul6 = "N";

	}
	if (req.getParameter(UUL_5) != null
			&& !req.getParameter(UUL_5).equals("")) {
		uul5 = (req.getParameter(UUL_5));
	} else {
		uul5 = "N";

	}
	if (req.getParameter(UUL_4) != null
			&& !req.getParameter(UUL_4).equals("")) {
		uul4 = (req.getParameter(UUL_4));
	} else {
		uul4 = "N";

	}
	if (req.getParameter(UUL_3) != null
			&& !req.getParameter(UUL_3).equals("")) {
		uul3 = (req.getParameter(UUL_3));
	} else {
		uul3 = "N";

	}
	if (req.getParameter(UUL_2) != null
			&& !req.getParameter(UUL_2).equals("")) {
		uul2 = (req.getParameter(UUL_2));
	} else {
		uul2 = "N";

	}
	if (req.getParameter(UUL_1) != null
			&& !req.getParameter(UUL_1).equals("")) {
		uul1 = (req.getParameter(UUL_1));
	} else {
		uul1 = "N";

	}
	if (req.getParameter(ULR_8) != null
			&& !req.getParameter(ULR_8).equals("")) {
		ulr8 = (req.getParameter(ULR_8));
	} else {
		ulr8 = "N";

	}

	if (req.getParameter(ULR_7) != null
			&& !req.getParameter(ULR_7).equals("")) {
		ulr7 = (req.getParameter(ULR_7));
	} else {
		ulr7 = "N";

	}
	if (req.getParameter(ULR_6) != null
			&& !req.getParameter(ULR_6).equals("")) {
		ulr6 = (req.getParameter(ULR_6));
	} else {
		ulr6 = "N";

	}
	if (req.getParameter(ULR_5) != null
			&& !req.getParameter(ULR_5).equals("")) {
		ulr5 = (req.getParameter(ULR_5));
	} else {
		ulr5 = "N";

	}
	if (req.getParameter(ULR_4) != null
			&& !req.getParameter(ULR_4).equals("")) {
		ulr4 = (req.getParameter(ULR_4));
	} else {
		ulr4 = "N";

	}
	if (req.getParameter(ULR_3) != null
			&& !req.getParameter(ULR_3).equals("")) {
		ulr3 = (req.getParameter(ULR_3));
	} else {
		ulr3 = "N";

	}
	if (req.getParameter(ULR_2) != null
			&& !req.getParameter(ULR_2).equals("")) {
		ulr2 = (req.getParameter(ULR_2));
	} else {
		ulr2 = "N";

	}
	if (req.getParameter(ULR_1) != null
			&& !req.getParameter(ULR_1).equals("")) {
		ulr1 = (req.getParameter(ULR_1));
	} else {
		ulr1 = "N";

	}

	if (req.getParameter(ULL_8) != null
			&& !req.getParameter(ULL_8).equals("")) {
		ull8 = (req.getParameter(ULL_8));
	} else {
		ull8 = "N";

	}
	if (req.getParameter(ULL_7) != null
			&& !req.getParameter(ULL_7).equals("")) {
		ull7 = (req.getParameter(ULL_7));
	} else {
		ull7 = "N";

	}
	if (req.getParameter(ULL_6) != null
			&& !req.getParameter(ULL_6).equals("")) {
		ull6 = (req.getParameter(ULL_6));
	} else {
		ull6 = "N";

	}
	if (req.getParameter(ULL_5) != null
			&& !req.getParameter(ULL_5).equals("")) {
		ull5 = (req.getParameter(ULL_5));
	} else {
		ull5 = "N";

	}
	if (req.getParameter(ULL_4) != null
			&& !req.getParameter(ULL_4).equals("")) {
		ull4 = (req.getParameter(ULL_4));
	} else {
		ull4 = "N";

	}
	if (req.getParameter(ULL_3) != null
			&& !req.getParameter(ULL_3).equals("")) {
		ull3 = (req.getParameter(ULL_3));
	} else {
		ull3 = "N";

	}
	if (req.getParameter(ULL_2) != null
			&& !req.getParameter(ULL_2).equals("")) {
		ull2 = (req.getParameter(ULL_2));
	} else {
		ull2 = "N";

	}
	if (req.getParameter(ULL_1) != null
			&& !req.getParameter(ULL_1).equals("")) {
		ull1 = (req.getParameter(ULL_1));
	} else {
		ull1 = "N";

	}

	// ////////////////////////

	if (req.getParameter(MUR_8) != null
			&& !req.getParameter(MUR_8).equals("")) {
		mur8 = (req.getParameter(MUR_8));

	} else {
		mur8 = "N";

	}
	if (req.getParameter(MUR_7) != null
			&& !req.getParameter(MUR_7).equals("")) {
		mur7 = (req.getParameter(MUR_7));
	} else {
		mur7 = "N";

	}
	if (req.getParameter(MUR_6) != null
			&& !req.getParameter(MUR_6).equals("")) {
		mur6 = (req.getParameter(MUR_6));
	} else {
		mur6 = "N";

	}
	if (req.getParameter(MUR_5) != null
			&& !req.getParameter(MUR_5).equals("")) {
		mur5 = (req.getParameter(MUR_5));
	} else {
		mur5 = "N";

	}
	if (req.getParameter(MUR_4) != null
			&& !req.getParameter(MUR_4).equals("")) {
		mur4 = (req.getParameter(MUR_4));
	} else {
		mur4 = "N";

	}
	if (req.getParameter(MUR_3) != null
			&& !req.getParameter(MUR_3).equals("")) {
		mur3 = (req.getParameter(MUR_3));
	} else {
		mur3 = "N";

	}
	if (req.getParameter(MUR_2) != null
			&& !req.getParameter(MUR_2).equals("")) {
		mur2 = (req.getParameter(MUR_2));
	} else {
		mur2 = "N";

	}
	if (req.getParameter(MUR_1) != null
			&& !req.getParameter(MUR_1).equals("")) {
		mur1 = (req.getParameter(MUR_1));
	} else {
		mur1 = "N";

	}

	if (req.getParameter(MUL_8) != null
			&& !req.getParameter(MUL_8).equals("")) {
		mul8 = (req.getParameter(MUL_8));
	} else {
		mul8 = "N";

	}
	if (req.getParameter(MUL_7) != null
			&& !req.getParameter(MUL_7).equals("")) {
		mul7 = (req.getParameter(MUL_7));

	} else {
		mul7 = "N";

	}
	if (req.getParameter(MUL_6) != null
			&& !req.getParameter(MUL_6).equals("")) {
		mul6 = (req.getParameter(MUL_6));
	} else {
		mul6 = "N";

	}
	if (req.getParameter(MUL_5) != null
			&& !req.getParameter(MUL_5).equals("")) {
		mul5 = (req.getParameter(MUL_5));
	} else {
		mul5 = "N";

	}
	if (req.getParameter(MUL_4) != null
			&& !req.getParameter(MUL_4).equals("")) {
		mul4 = (req.getParameter(MUL_4));
	} else {
		mul4 = "N";

	}
	if (req.getParameter(MUL_3) != null
			&& !req.getParameter(MUL_3).equals("")) {
		mul3 = (req.getParameter(MUL_3));
	} else {
		mul3 = "N";

	}
	if (req.getParameter(MUL_2) != null
			&& !req.getParameter(MUL_2).equals("")) {
		mul2 = (req.getParameter(MUL_2));
	} else {
		mul2 = "N";

	}
	if (req.getParameter(MUL_1) != null
			&& !req.getParameter(MUL_1).equals("")) {
		mul1 = (req.getParameter(MUL_1));
	} else {
		mul1 = "N";

	}
	if (req.getParameter(MLR_8) != null
			&& !req.getParameter(MLR_8).equals("")) {
		mlr8 = (req.getParameter(MLR_8));
	} else {
		mlr8 = "N";

	}

	if (req.getParameter(MLR_7) != null
			&& !req.getParameter(MLR_7).equals("")) {
		mlr7 = (req.getParameter(MLR_7));
	} else {
		mlr7 = "N";

	}
	if (req.getParameter(MLR_6) != null
			&& !req.getParameter(MLR_6).equals("")) {
		mlr6 = (req.getParameter(MLR_6));
	} else {
		mlr6 = "N";

	}
	if (req.getParameter(MLR_5) != null
			&& !req.getParameter(MLR_5).equals("")) {
		mlr5 = (req.getParameter(MLR_5));
	} else {
		mlr5 = "N";

	}

	if (req.getParameter(MLR_4) != null
			&& !req.getParameter(MLR_4).equals("")) {
		mlr4 = (req.getParameter(MLR_4));
	} else {
		mlr4 = "N";

	}
	if (req.getParameter(MLR_3) != null
			&& !req.getParameter(MLR_3).equals("")) {
		mlr3 = (req.getParameter(MLR_3));
	} else {
		mlr3 = "N";

	}

	if (req.getParameter(MLR_2) != null
			&& !req.getParameter(MLR_2).equals("")) {
		mlr2 = (req.getParameter(MLR_2));
	} else {
		mlr2 = "N";

	}
	if (req.getParameter(MLR_1) != null
			&& !req.getParameter(MLR_1).equals("")) {
		mlr1 = (req.getParameter(MLR_1));
	} else {
		mlr1 = "N";

	}

	if (req.getParameter(MLL_8) != null
			&& !req.getParameter(MLL_8).equals("")) {
		mll8 = (req.getParameter(MLL_8));
	} else {
		mll8 = "N";

	}
	if (req.getParameter(MLL_7) != null
			&& !req.getParameter(MLL_7).equals("")) {
		mll7 = (req.getParameter(MLL_7));
	} else {
		mll7 = "N";

	}
	if (req.getParameter(MLL_6) != null
			&& !req.getParameter(MLL_6).equals("")) {
		mll6 = (req.getParameter(MLL_6));
	} else {
		mll6 = "N";

	}
	if (req.getParameter(MLL_5) != null
			&& !req.getParameter(MLL_5).equals("")) {
		mll5 = (req.getParameter(MLL_5));
	} else {
		mll5 = "N";

	}
	if (req.getParameter(MLL_4) != null
			&& !req.getParameter(MLL_4).equals("")) {
		mll4 = (req.getParameter(MLL_4));
	} else {
		mll4 = "N";

	}
	if (req.getParameter(MLL_3) != null
			&& !req.getParameter(MLL_3).equals("")) {
		mll3 = (req.getParameter(MLL_3));
	} else {
		mll3 = "N";

	}
	if (req.getParameter(MLL_2) != null
			&& !req.getParameter(MLL_2).equals("")) {
		mll2 = (req.getParameter(MLL_2));
	} else {
		mll2 = "N";

	}
	if (req.getParameter(MLL_1) != null
			&& !req.getParameter(MLL_1).equals("")) {
		mll1 = (req.getParameter(MLL_1));
	} else {
		mll1 = "N";

	}

	sur8 = dur8 + "" + mur8 + "" + uur8;

	sur7 = dur7 + "" + mur7 + "" + uur7;

	sur6 = dur6 + "" + mur6 + "" + uur6;
	sur5 = dur5 + "" + mur5 + "" + uur5;
	sur4 = dur4 + "" + mur4 + "" + uur4;
	sur3 = dur3 + "" + mur3 + "" + uur3;
	sur2 = dur2 + "" + mur2 + "" + uur2;
	sur1 = dur1 + "" + mur2 + "" + uur1;

	sul8 = dul8 + "" + mul8 + "" + uul8;
	sul7 = dul7 + "" + mul7 + "" + uul7;

	sul6 = dul6 + "" + mul6 + "" + uul6;
	sul5 = dul5 + "" + mul5 + "" + uul5;
	sul4 = dul4 + "" + mul4 + "" + uul4;
	sul3 = dul3 + "" + mul3 + "" + uul3;
	sul2 = dul2 + "" + mul2 + "" + uul2;
	sul1 = dul1 + "" + mul1 + "" + uul1;

	slr8 = dlr8 + "" + mlr8 + "" + ulr8;
	slr7 = dlr7 + "" + mlr7 + "" + ulr7;
	slr6 = dlr6 + "" + mlr6 + "" + ulr6;
	slr5 = dlr5 + "" + mlr5 + "" + ulr5;
	slr4 = dlr4 + "" + mlr4 + "" + ulr4;
	slr3 = dlr3 + "" + mlr3 + "" + ulr3;
	slr2 = dlr2 + "" + mlr2 + "" + ulr2;
	slr1 = dlr1 + "" + mlr2 + "" + ulr1;

	sll8 = dll8 + "" + mll8 + "" + ull8;
	sll7 = dll7 + "" + mll7 + "" + ull7;
	sll6 = dll6 + "" + mll6 + "" + ull6;
	sll5 = dll5 + "" + mll5 + "" + ull5;
	sll4 = dll4 + "" + mll4 + "" + ull4;
	sll3 = dll3 + "" + mll3 + "" + ull3;
	sll2 = dll2 + "" + mll2 + "" + ull2;
	sll1 = dll1 + "" + mll2 + "" + ull1;
	MbTypeOfEntryMaster mbTypeOfEntryMaster = new MbTypeOfEntryMaster();
	mbTypeOfEntryMaster.setId(typeOfEntry);
	generalMap.put("serviceNo", serviceNo);
	// generalMap.put("name", betchNo);
	// generalMap.put("address", req.getParameter(TYPE_OF_ENTRY));

	// generalMap.put("pojoPropertyName", "BatchNo");
	generalMap.put("pojoPropertyCode", "serviceNo");
	// generalMap.put("pojoPropertyAddress", "TypeOfEntry");
	generalMap.put("pojoName", "MasMedicalExaminationReportOnEntry");
	String message = "";
	String jsp = "";
	// Map listMap =
	// commonMasterHandlerService.checkForExistingMasters(generalMap);
	Boolean successfullyAdded = false;
	// List codeList = (List) listMap.get("duplicateGeneralCodeList");
	// List nameList = (List) listMap.get("duplicateGeneralNameList");
	// List typeOfEntryList = (List)
	// listMap.get("duplicateGeneralAddressList");
	/*
	 * if (codeList != null && codeList.size() > 0) { message =
	 * "Yearly Serial No Already Exist!"; jsp = MEDICAL_BOARD_ERROR_MSG; }
	 * else {
	 */
	masMedicalBoardProceedings.setInnerEarL(innerEarL);
	masMedicalBoardProceedings.setHearingBothCv(hearingBothCV);
	masMedicalBoardProceedings.setDateSpecialExam(eyeDate);
	masMedicalBoardProceedings.setTotalDefectiveTeeth(totalDefectiveTeeth);
	masMedicalBoardProceedings.setTotalTeeth(totalTeeth);
	masMedicalBoardProceedings.setMissingTeeth(missingTeeth);
	masMedicalBoardProceedings.setUnservisableTeeth(unserviceableTeeth);
	masMedicalBoardProceedings.setDenstlPoint(DenstalPoint);
	masMedicalBoardProceedings.setYearlySerialNo(serviceNo);
	// masMedicalBoardProceedings.setMonthlySerialNo(rank);
	masMedicalBoardProceedings.setEntryDate(entryDate);

	masMedicalBoardProceedings.setTypeOfEntry(mbTypeOfEntryMaster);
	masMedicalBoardProceedings.setBatchNo(betchNo);
	masMedicalBoardProceedings.setChestNo(chestNo);
	masMedicalBoardProceedings.setRollNo(rollNo);
	/*
	 * MasUnit masUnit = new MasUnit(); masUnit.setId(medicalExamHeld);
	 * masMedicalBoardProceedings.setMedicalExamHeldAt(masUnit);
	 */
	masMedicalBoardProceedings.setMedicalStatus(medicalStatus);
	masMedicalBoardProceedings.setNameInFull(fullName);
	masMedicalBoardProceedings.setDateOfBirth(dateOfBirth);
	if (maritialStatus != 0) {
		MasMaritalStatus masMaritalStatus = new MasMaritalStatus();
		masMaritalStatus.setId(maritialStatus);
		masMedicalBoardProceedings.setMaritalStatus(masMaritalStatus);
	}
	masMedicalBoardProceedings.setPNo(pNo);

	masMedicalBoardProceedings.setHoursOfFlown(hoursOfFlown);
	masMedicalBoardProceedings.setParmanentAddress(permanentAddress);
	masMedicalBoardProceedings.setIdentificationMarks1(identification1);
	masMedicalBoardProceedings.setIdentificationMarks2(identification2);
	masMedicalBoardProceedings.setArmsCorps(armsCrops);
	masMedicalBoardProceedings.setDateOfCompletion(dateOfCompletion);
	masMedicalBoardProceedings.setDocumentForwardDate(documentForwardDate);
	masMedicalBoardProceedings.setDateOfReporting(dateOfReporting);
	masMedicalBoardProceedings.setDocumentForwardTo(documentForwardTo);
	masMedicalBoardProceedings.setFromWhereHeReport(fromWhereHeReport);
	masMedicalBoardProceedings.setHypertension(hypertension);
	masMedicalBoardProceedings.setHeartDiabetes(heartDisease);
	masMedicalBoardProceedings.setDiabetes(diabetes);
	masMedicalBoardProceedings.setBleedingDisorder(bleedingDisorder);
	masMedicalBoardProceedings.setMentalDisease(mentalDisease);
	masMedicalBoardProceedings.setNightBlindness(nightBlindness);
	masMedicalBoardProceedings.setChronicBronchitis(asthama);
	masMedicalBoardProceedings.setDischargeFromEars(dischargeFrom);
	masMedicalBoardProceedings.setPleurisy(plesury);
	masMedicalBoardProceedings.setAnyOtherEarDisease(earDieses);
	masMedicalBoardProceedings.setRheumatismFrequentSorethroats(rheumatism);
	masMedicalBoardProceedings.setFrequentCoughColdSinusitis(frequentCough);
	masMedicalBoardProceedings.setChronicIndigestion(chronicIndigestion);
	masMedicalBoardProceedings
			.setNervousBreakdownMentalIllness(nervousBrakdown);
	masMedicalBoardProceedings.setKidneyBladderTrouble(kidenyBladder);
	masMedicalBoardProceedings.setFitsFaintingAttack(fitsFaintinngAttacks);
	masMedicalBoardProceedings.setStd(std);
	masMedicalBoardProceedings.setSevereHeadInjury(serveHeadInjury);
	masMedicalBoardProceedings.setJaundice(joundice);
	masMedicalBoardProceedings.setAirSeaCarTrainSickness(sickness);
	masMedicalBoardProceedings.setBreastDiseaseDischarge(breastDisease);
	masMedicalBoardProceedings.setTrachoma(trachoma);
	masMedicalBoardProceedings.setAmenorrhoeaDysmenonhoea(amenorrhoea);
	masMedicalBoardProceedings.setNightBindness(nightbindness);
	masMedicalBoardProceedings.setMenonhagia(menirrhagia);
	masMedicalBoardProceedings
			.setLaserTreatementSurgeryForEye(laserTeartement);
	masMedicalBoardProceedings.setPregnancy(pregnancy);
	masMedicalBoardProceedings.setAnyOtherEyeDisease(eyeDisease);
	masMedicalBoardProceedings.setAbortion(abortion);
	masMedicalBoardProceedings
			.setBeenrejectedAsMedicallyUnfitForAnyBranch(rejectedAsUnfit);
	masMedicalBoardProceedings
			.setDischargeAsMedicallyUnfitForAnyBranch(dischargeMedicallyUnfit);
	masMedicalBoardProceedings
			.setAdmittedInHospitalForAnyIllnessOperationOrInjury(adimmitedInHospitalFirIllness);

	masMedicalBoardProceedings
			.setStateTheNatureOfDiseaseDuration(stateNature);
	masMedicalBoardProceedings
			.setAnyOtherInformationAboutYourHealth(otherInform);
	masMedicalBoardProceedings.setHeight(height);
	masMedicalBoardProceedings.setWeight(weight);
	masMedicalBoardProceedings.setAcceptable(acceptableKg);
	masMedicalBoardProceedings.setLegLength(leglength);
	masMedicalBoardProceedings.setAppearance(appereance);
	masMedicalBoardProceedings.setAlbumin(albumin);
	masMedicalBoardProceedings.setSugar(sugar);
	masMedicalBoardProceedings.setSpGravity(spGraviry);
	masMedicalBoardProceedings.setHbPercentage(hbPercentage);
	masMedicalBoardProceedings.setAnyOtherInvCarriedOut(anyOtherInv);
	masMedicalBoardProceedings.setPhysique(physique);
	masMedicalBoardProceedings.setSkin(skin);
	masMedicalBoardProceedings.setAbdomen(abdomen);
	masMedicalBoardProceedings.setHeartSize(heartSize);
	masMedicalBoardProceedings.setSounds(sound);
	masMedicalBoardProceedings.setRhythm(rhythm);
	masMedicalBoardProceedings.setArterialWalls(arterialWalls);
	masMedicalBoardProceedings.setPulseRates(pulseRates);
	masMedicalBoardProceedings.setBp(bp);
	masMedicalBoardProceedings.setChestMeasurement(fullExpension);
	masMedicalBoardProceedings.setRangeOfExpension(rangeOfExpension);
	masMedicalBoardProceedings.setSelfBalancingR(selfBalR);
	masMedicalBoardProceedings.setSelfBalancingL(selfBalL);
	masMedicalBoardProceedings.setSpeechMentalCapacity(speechMental);
	masMedicalBoardProceedings.setEndocrineCondition(endocrinCond);
	masMedicalBoardProceedings.setAnyOtheAbnormalities(otherAbnormalities);
	masMedicalBoardProceedings.setRemarks(medicinRemarks);
	masMedicalBoardProceedings.setFingers(finger);
	masMedicalBoardProceedings.setHand(hand);
	masMedicalBoardProceedings.setWrists(wrist);
	masMedicalBoardProceedings.setElbows(elbows);
	masMedicalBoardProceedings.setShoulderGirdles(shoulderGridles);
	masMedicalBoardProceedings.setCervical(cercival);
	masMedicalBoardProceedings.setDorsalVertebrate(dorsalVertebrate);
	masMedicalBoardProceedings.setHullux(hullux);
	masMedicalBoardProceedings.setValgus(valgus);
	masMedicalBoardProceedings.setRigigus(riggus);
	masMedicalBoardProceedings.setFlatFeet(flatFeet);
	masMedicalBoardProceedings.setJoints(joints);
	masMedicalBoardProceedings.setPelvis(pelvis);
	masMedicalBoardProceedings.setGail(gail);
	masMedicalBoardProceedings.setLumber(lumberScaler);
	masMedicalBoardProceedings.setRoccyxVarocose(roccyxVericose);
	masMedicalBoardProceedings.setHydrocele(hydrocele);
	masMedicalBoardProceedings.setVaricocele(varicocele);
	masMedicalBoardProceedings.setUnderscendedTest(underScende);
	masMedicalBoardProceedings.setHemorrhoids(hemonhoids);
	masMedicalBoardProceedings.setHerniaMusic(herinaMusic);
	masMedicalBoardProceedings.setBreasts(breasts);
	masMedicalBoardProceedings.setRemarksLowerlimbs(surgeryRemarks);
	masMedicalBoardProceedings.setRespiratorySystem(respatorySystem);
	masMedicalBoardProceedings.setWithGlassesLDistant(withglassesDistantL);
	masMedicalBoardProceedings.setWithGlassesRDistant(withGlassesDistantR);
	masMedicalBoardProceedings
			.setWithoutGlassesLDistant(withoutGlassesDistantL);
	masMedicalBoardProceedings
			.setWthoutGlassesRDistant(withoutGlassesDistantR);
	masMedicalBoardProceedings.setWithGlassesLNearvision(withGlassesNearL);
	masMedicalBoardProceedings.setWithGlassesRNearvision(withGlassesNearR);
	masMedicalBoardProceedings
			.setWithoutGlassesLNearvision(withoutGlassesNearL);
	masMedicalBoardProceedings
			.setWithoutGlassesRNearvision(withoutGlassesNearR);
	masMedicalBoardProceedings.setEvidenceOfTrachoma(evidienceOfTrachoma);
	masMedicalBoardProceedings.setBinocularVisionGrade(binocular);
	masMedicalBoardProceedings
			.setManifestHypermetropia(manifestHypermetropia);
	masMedicalBoardProceedings.setCoverTest(coverTest);
	masMedicalBoardProceedings.setDiaphragmTest(diaphragmTest);
	masMedicalBoardProceedings.setFundAndMedia(fundMedia);
	masMedicalBoardProceedings.setFields(fields);
	masMedicalBoardProceedings.setNightVisualCapacity(nightVisualCapacity);
	masMedicalBoardProceedings.setConvergenceC(convergenceC);
	masMedicalBoardProceedings.setConvergenceSc(convergenceCP);
	masMedicalBoardProceedings.setAccommodationR(accommodationR);
	masMedicalBoardProceedings.setAccommodationL(accommodationL);
	masMedicalBoardProceedings.setRemarksSpecialExam(eyeRemarks);
	masMedicalBoardProceedings.setHearingRcv(hearingRCV);
	masMedicalBoardProceedings.setHearingLcv(hearingLCV);
	masMedicalBoardProceedings.setEarHearingRfw(hearingRFW);
	masMedicalBoardProceedings.setEarHearingLfw(hearingLFW);
	masMedicalBoardProceedings.setEarHearingBothFw(hearingBothFW);
	masMedicalBoardProceedings.setExternalEarR(externalEarR);
	masMedicalBoardProceedings.setExternalEarL(externalEarL);
	masMedicalBoardProceedings.setMiddleEarR(middleEarR);
	masMedicalBoardProceedings.setMiddleEar(middleEarL);

	masMedicalBoardProceedings.setInnerEarR(innerEarR);
	masMedicalBoardProceedings.setAudiometryRecord(audiometryRecord);
	masMedicalBoardProceedings.setNose(nose);
	masMedicalBoardProceedings.setThroat(throatEar);
	masMedicalBoardProceedings.setRemarksEar(earReamrks);
	masMedicalBoardProceedings.setEarDate(earDate);
	masMedicalBoardProceedings.setDateTeath(dentalDate);
	masMedicalBoardProceedings.setRemarksTeath(dentalRemarks);
	masMedicalBoardProceedings.setMenstrualHistory(menstrualHistory);
	masMedicalBoardProceedings.setNoOfPregnancies(noOfPregnancy);
	masMedicalBoardProceedings.setNoOfAbortions(noOfAbortion);
	masMedicalBoardProceedings.setNoOfChildren(noOfChildren);
	masMedicalBoardProceedings.setLastConfinementDate(lastCondinement);
	masMedicalBoardProceedings.setVaginalDischarge(vaginalDischarge);
	masMedicalBoardProceedings.setProlapse(prolapse);
	masMedicalBoardProceedings.setUsgAbdomen(usgAbortion);
	masMedicalBoardProceedings.setGynaecologyDate(gyanaecologyDate);
	masMedicalBoardProceedings.setRemarksGynaecology(gyanaecologyRemarks);

	masMedicalBoardProceedings
			.setMedicalBoardFindings(medicalBoardExamination);
	masMedicalBoardProceedings
			.setDateMedicalBoardExam(medicalBoardExaminationDate);
	if (lmp != "" && !lmp.equalsIgnoreCase("")) {
		try {
			masMedicalBoardProceedings.setLmp(HMSUtil
					.dateFormatterDDMMYYYY(lmp));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	if (medicalBoardExaminationPlace != 0) {
		MasUnit masUnit1 = new MasUnit();
		masUnit1.setId(medicalBoardExaminationPlace);
		masMedicalBoardProceedings.setPlaceMedicalBoardExam(masUnit1);
	}
	masMedicalBoardProceedings
			.setMedicalBoardSubsequentFind(subsequentMedicalBoardExam);
	masMedicalBoardProceedings
			.setDateMedicalBoardSubsequent(subsequentMedicalBoardExamDate);
	if (subsequentMedicalBoardExamPlace != 0) {
		MasUnit masUnit2 = new MasUnit();
		masUnit2.setId(subsequentMedicalBoardExamPlace);
		masMedicalBoardProceedings.setPlaceMedicalBoardSubsequent(masUnit2);
	}
	masMedicalBoardProceedings.setApprovingAuthority(ApprovingAuthority);
	masMedicalBoardProceedings
			.setDateApprovingAuthority(ApprovingAuthorityDate);
	if (ApprovingAuthorityPlace != 0) {
		MasUnit masUnit3 = new MasUnit();
		masUnit3.setId(ApprovingAuthorityPlace);
		masMedicalBoardProceedings.setPlaceApprovingAuthority(masUnit3);
	}
	masMedicalBoardProceedings.setSurgeryDate(surgeyDate);
	masMedicalBoardProceedings.setMediceExamDate(medicinExamDate);
	masMedicalBoardProceedings.setNearVisionWithGlassCp(withGlassesNearCP);
	masMedicalBoardProceedings
			.setNearVisionWithoutGlassCp(withoutGlassesNearCP);
	masMedicalBoardProceedings.setReferToMH(dentalReferToMH);
	masMedicalBoardProceedings.setUR1(sur1);
	masMedicalBoardProceedings.setUR2(sur2);
	masMedicalBoardProceedings.setUR3(sur3);
	masMedicalBoardProceedings.setUR4(sur4);
	masMedicalBoardProceedings.setUR5(sur5);
	masMedicalBoardProceedings.setUR6(sur6);
	masMedicalBoardProceedings.setUR7(sur7);
	masMedicalBoardProceedings.setUR8(sur8);

	masMedicalBoardProceedings.setUL1(sul1);
	masMedicalBoardProceedings.setUL2(sul2);
	masMedicalBoardProceedings.setUL3(sul3);
	masMedicalBoardProceedings.setUL4(sul4);
	masMedicalBoardProceedings.setUL5(sul5);
	masMedicalBoardProceedings.setUL6(sul6);
	masMedicalBoardProceedings.setUL7(sul7);
	masMedicalBoardProceedings.setUL8(sul8);

	masMedicalBoardProceedings.setLR1(slr1);
	masMedicalBoardProceedings.setLR2(slr2);
	masMedicalBoardProceedings.setLR3(slr3);
	masMedicalBoardProceedings.setLR4(slr4);
	masMedicalBoardProceedings.setLR5(slr5);
	masMedicalBoardProceedings.setLR6(slr6);
	masMedicalBoardProceedings.setLR7(slr7);
	masMedicalBoardProceedings.setLR8(slr8);

	masMedicalBoardProceedings.setLL1(sll1);
	masMedicalBoardProceedings.setLL2(sll2);
	masMedicalBoardProceedings.setLL3(sll3);
	masMedicalBoardProceedings.setLL4(sll4);
	masMedicalBoardProceedings.setLL5(sll5);
	masMedicalBoardProceedings.setLL6(sll6);
	masMedicalBoardProceedings.setLL7(sll7);
	masMedicalBoardProceedings.setLL8(sll8);
	masMedicalBoardProceedings.setLastChangedBy(lastChangedBy);
	masMedicalBoardProceedings.setLastChangedDate(lastChangedDate);
	masMedicalBoardProceedings.setLastChangedTime(lastChangedTime);
	masMedicalBoardProceedings.setServiceNo(serviceNo);
	// masMedicalBoardProceedings.setName(name);
	// masMedicalBoardProceedings.setUnit(unit);
	masMedicalBoardProceedings.setServiceiaf(serviceiaf);
	// masMedicalBoardProceedings.setBranch(branch);
	// masMedicalBoardProceedings.setDob(dob);

	masMedicalBoardProceedings.setTypeofcommision(typeOfCommunication);
	masMedicalBoardProceedings.setDateofcommun(dateofcommun);
	masMedicalBoardProceedings.setTotalService(totalservice);
	masMedicalBoardProceedings.setPastmedicalhistory(pastmedicalhistory);
	masMedicalBoardProceedings
			.setPresentmedicalhistory(presentmedicalhistory);
	masMedicalBoardProceedings.setPresentMedPeriod(finalMedCat);
	masMedicalBoardProceedings.setShapFactor(shapeFactor);
	masMedicalBoardProceedings.setIdealweight(idealweight);
	masMedicalBoardProceedings.setOverweight(overweight);
	masMedicalBoardProceedings.setWaist(waist);
	masMedicalBoardProceedings.setChestfullexpansion(chestfullexpansion);
	masMedicalBoardProceedings.setBhi(bhi);
	masMedicalBoardProceedings.setRangeofexpansion(rangeofexpansion);
	masMedicalBoardProceedings.setBodyfat(bodyfat);
	masMedicalBoardProceedings.setSignfoldthickness(signfoldthickness);
	masMedicalBoardProceedings.setSportman(sportman);
	masMedicalBoardProceedings.setLastame(lastame);
	masMedicalBoardProceedings.setActualweight(actualweight);

	if (req.getParameter(SERVICE_TYPE_ID) != null
			&& !(req.getParameter(SERVICE_TYPE_ID)).equals("0")) {
		MasServiceType serviceType = new MasServiceType();
		serviceType.setId(Integer.parseInt(req
				.getParameter(SERVICE_TYPE_ID)));
		masMedicalBoardProceedings.setServiceType(serviceType);
	}
	if (req.getParameter(RANK_ID) != null
			&& !(req.getParameter(RANK_ID)).equals("0")) {
		MasRank masRank = new MasRank();
		masRank.setId(Integer.parseInt(req.getParameter(RANK_ID)));
		masMedicalBoardProceedings.setRank(masRank);
	}
	if (req.getParameter(TRADE_ID) != null
			&& !(req.getParameter(TRADE_ID)).equals("0")) {
		MasTrade masTrade = new MasTrade();
		masTrade.setId(Integer.parseInt(req.getParameter(TRADE_ID)));
		masMedicalBoardProceedings.setTrade(masTrade);
	}
	if (req.getParameter(UNIT_ID) != null
			&& !(req.getParameter(UNIT_ID)).equals("0")) {
		MasUnit unitObj = new MasUnit();
		unitObj.setId(Integer.parseInt(req.getParameter(UNIT_ID)));
		masMedicalBoardProceedings.setUnit(unitObj);
	}
	if (req.getParameter(VISIT_ID) != null
			&& !(req.getParameter(VISIT_ID)).equals("0")) {
		Visit visit = new Visit();
		visit.setId(Integer.parseInt(req.getParameter(VISIT_ID)));
		masMedicalBoardProceedings.setVisit(visit);
	}
	if (req.getParameter(HIN_ID) != null
			&& !(req.getParameter(HIN_ID)).equals("0")) {
		Patient patient = new Patient();
		patient.setId(Integer.parseInt(req.getParameter(HIN_ID)));
		masMedicalBoardProceedings.setHin(patient);
		mapForDS.put("hinId", Integer.parseInt(req.getParameter(HIN_ID)));
	}
	if (req.getParameter(FATHER_NAME) != null) {
		masMedicalBoardProceedings.setFatherName(req
				.getParameter(FATHER_NAME));
	}
	if (req.getParameter(RELEVANT_FAMILY_HISTORY) != null) {
		masMedicalBoardProceedings.setRelevantFamilyHistory(req
				.getParameter(RELEVANT_FAMILY_HISTORY));
	}
	if (req.getParameter(DEFECTS_NOT_TO_CAUSE_REJECTION) != null) {
		masMedicalBoardProceedings.setDefectNotToCauseRejection(req
				.getParameter(DEFECTS_NOT_TO_CAUSE_REJECTION));
	}
	if (req.getParameter(FOUND_FIT_IN_CATEGORY) != null) {
		masMedicalBoardProceedings.setFoundFitInCategory(req
				.getParameter(FOUND_FIT_IN_CATEGORY));
	}
	if (req.getParameter(APPOINTMENT_DATE) != null
			&& !req.getParameter(APPOINTMENT_DATE).equals("")) {
		masMedicalBoardProceedings.setAppointmentDate(HMSUtil
				.convertStringTypeDateToDateType(req
						.getParameter(APPOINTMENT_DATE)));
	}
	if (req.getParameter(APPOINTMENT_TIME) != null
			&& !req.getParameter(APPOINTMENT_TIME).equals("")) {
		masMedicalBoardProceedings.setAppointmentTime(req
				.getParameter(APPOINTMENT_TIME));
	}
	if (req.getParameter("medicalExamType") != null
			&& !req.getParameter("medicalExamType").equals("")) {
		masMedicalBoardProceedings.setMedicalExamType(req
				.getParameter("medicalExamType"));
	}
	if (req.getParameter("apparentAge") != null
			&& !req.getParameter("apparentAge").equals("")) {
		masMedicalBoardProceedings.setApparentAge(req
				.getParameter("apparentAge"));
	}
	if (req.getParameter(APPOINTMENT_TIME) != null
			&& !req.getParameter(APPOINTMENT_TIME).equals("")) {
		masMedicalBoardProceedings.setAppointmentTime(req
				.getParameter(APPOINTMENT_TIME));
	}
	if (req.getParameter(HIGHER_MENTAL_FUNCTION) != null
			&& !req.getParameter(HIGHER_MENTAL_FUNCTION).equals("")) {
		masMedicalBoardProceedings.setHigherMentalFunction(req
				.getParameter(HIGHER_MENTAL_FUNCTION));
	}
	if (req.getParameter(SPEECH) != null
			&& !req.getParameter(SPEECH).equals("")) {
		masMedicalBoardProceedings.setSpeech(req.getParameter(SPEECH));
	}
	if (req.getParameter(REFLEXES) != null
			&& !req.getParameter(REFLEXES).equals("")) {
		masMedicalBoardProceedings.setReflexes(req.getParameter(REFLEXES));
	}
	if (req.getParameter(TREMORS) != null
			&& !req.getParameter(TREMORS).equals("")) {
		masMedicalBoardProceedings.setTremors(req.getParameter(TREMORS));
	}
	if (req.getParameter(SELF_BALANCING_TEST) != null
			&& !req.getParameter(SELF_BALANCING_TEST).equals("")) {
		masMedicalBoardProceedings.setSelfBalancingTest(req
				.getParameter(SELF_BALANCING_TEST));
	}
	/*
	 * if(req.getParameter(GIVE_ON) != null &&
	 * !req.getParameter(GIVE_ON).equals("")){
	 * masMedicalBoardProceedings.setGiveOn(req.getParameter(GIVE_ON)); }
	 * if(req.getParameter(DOM) != null &&
	 * !req.getParameter(DOM).equals("")){
	 * masMedicalBoardProceedings.setDom(
	 * HMSUtil.convertStringTypeDateToDateType(req.getParameter(DOM))); }
	 */if (req.getParameter(CORONORY_RISK_FACTOR) != null
			&& !req.getParameter(CORONORY_RISK_FACTOR).equals("")) {
		masMedicalBoardProceedings.setCoronaryRiskFactor(req
				.getParameter(CORONORY_RISK_FACTOR));
	}
	if (req.getParameter(FM_DM) != null
			&& !req.getParameter(FM_DM).equals("")) {
		masMedicalBoardProceedings.setFmdm(req.getParameter(FM_DM));
	}
	if (req.getParameter(SIGNED_BY) != null
			&& !req.getParameter(SIGNED_BY).equals("")) {
		masMedicalBoardProceedings.setSignedBy(req.getParameter(SIGNED_BY));
	}
	if (req.getParameter(APPROVED_BY) != null
			&& !req.getParameter(APPROVED_BY).equals("")) {
		masMedicalBoardProceedings.setApprovedBy(req
				.getParameter(APPROVED_BY));
	}
	if (req.getParameter(SEND_TO) != null
			&& !req.getParameter(SEND_TO).equals("")) {
		masMedicalBoardProceedings.setSendTo(req.getParameter(SEND_TO));
	}
	if (req.getParameter("liver") != null
			&& !req.getParameter("liver").equals("")) {
		masMedicalBoardProceedings.setLiver(req.getParameter("liver"));
	}
	if (req.getParameter("spleen") != null
			&& !req.getParameter("spleen").equals("")) {
		masMedicalBoardProceedings.setSpleen(req.getParameter("spleen"));
	}
	if (req.getParameter("upperLimbs") != null
			&& !req.getParameter("upperLimbs").equals("")) {
		masMedicalBoardProceedings.setUpperLimbs(req
				.getParameter("upperLimbs"));
	}
	if (req.getParameter("locomotion") != null
			&& !req.getParameter("locomotion").equals("")) {
		masMedicalBoardProceedings.setLocomotion(req
				.getParameter("locomotion"));
	}
	if (req.getParameter("chestMeasurement") != null
			&& !req.getParameter("chestMeasurement").equals("")) {
		masMedicalBoardProceedings.setChestMeasurement(req
				.getParameter("chestMeasurement"));
	}
	if (req.getParameter("fullExpiration") != null
			&& !req.getParameter("fullExpiration").equals("")) {
		masMedicalBoardProceedings.setFullExpiration(req
				.getParameter("fullExpiration"));
	}
	if (req.getParameter("abnormalities") != null
			&& !req.getParameter("abnormalities").equals("")) {
		masMedicalBoardProceedings.setAbnormalities(req
				.getParameter("abnormalities"));
	}
	if (req.getParameter("otherAbnormalities") != null
			&& !req.getParameter("otherAbnormalities").equals("")) {
		masMedicalBoardProceedings.setAnyOtheAbnormalities(req
				.getParameter("otherAbnormalities"));
	}
	if (req.getParameter("anyEvidenceOfSkin") != null
			&& !req.getParameter("anyEvidenceOfSkin").equals("")) {
		masMedicalBoardProceedings.setAnyEvidenceOfSkin(req
				.getParameter("anyEvidenceOfSkin"));
	}
	if (req.getParameter("centralNervousSystem") != null
			&& !req.getParameter("centralNervousSystem").equals("")) {
		masMedicalBoardProceedings.setCentralNervousSystem(req
				.getParameter("centralNervousSystem"));
	}
	if (req.getParameter("mentalInstability") != null
			&& !req.getParameter("mentalInstability").equals("")) {
		masMedicalBoardProceedings.setMentalInstability(req
				.getParameter("mentalInstability"));
	}
	if (req.getParameter("essentialInstability") != null
			&& !req.getParameter("essentialInstability").equals("")) {
		masMedicalBoardProceedings.setEssentialInstability(req
				.getParameter("essentialInstability"));
	}
	if (req.getParameter("smoker") != null
			&& !req.getParameter("smoker").equals("")) {
		masMedicalBoardProceedings.setSmoker(req.getParameter("smoker"));
	}
	if (req.getParameter("drinker") != null
			&& !req.getParameter("drinker").equals("")) {
		masMedicalBoardProceedings.setDrinker(req.getParameter("drinker"));
	}
	if (req.getParameter("allergies") != null
			&& !req.getParameter("allergies").equals("")) {
		masMedicalBoardProceedings.setAllergies(req
				.getParameter("allergies"));
	}
	if (req.getParameter("locomoterSystem") != null
			&& !req.getParameter("locomoterSystem").equals("")) {
		masMedicalBoardProceedings.setLocomoterSystem(req
				.getParameter("locomoterSystem"));
	}
	if (req.getParameter("spine") != null
			&& !req.getParameter("spine").equals("")) {
		masMedicalBoardProceedings.setSpine(req.getParameter("spine"));
	}
	if (req.getParameter("tympanicMembranceIntact") != null
			&& !req.getParameter("tympanicMembranceIntact").equals("")) {
		masMedicalBoardProceedings.setTympanicMembranceIntact(req
				.getParameter("tympanicMembranceIntact"));
	}
	if (req.getParameter("mobility") != null
			&& !req.getParameter("mobility").equals("")) {
		masMedicalBoardProceedings.setMobilityR(req
				.getParameter("mobility"));
	}
	if (req.getParameter("noseThroatSinuses") != null
			&& !req.getParameter("noseThroatSinuses").equals("")) {
		masMedicalBoardProceedings.setNoseThroatSinuses(req
				.getParameter("noseThroatSinuses"));
	}
	if (req.getParameter(REPORTED_DATE) != null
			&& !req.getParameter(REPORTED_DATE).equals("")) {
		masMedicalBoardProceedings.setDateOfReporting(HMSUtil
				.convertStringTypeDateToDateType(req
						.getParameter(REPORTED_DATE)));
	}
	if (req.getParameter(KNOWN_ALLERGY) != null
			&& !req.getParameter(KNOWN_ALLERGY).equals("")) {
		masMedicalBoardProceedings.setAllergies(req
				.getParameter(KNOWN_ALLERGY));
	}
	if (req.getParameter(BATCH_NO) != null
			&& !req.getParameter(BATCH_NO).equals("")) {
		masMedicalBoardProceedings.setBatchNo(req.getParameter(BATCH_NO));
	}
	if (req.getParameter("cmMdRemarks") != null
			&& !req.getParameter("cmMdRemarks").equals("")) {
		masMedicalBoardProceedings.setMdRemarks(req
				.getParameter("cmMdRemarks"));
	}
	if (req.getParameter(AUTHORITY_OF_BOARD) != null
			&& !req.getParameter(AUTHORITY_OF_BOARD).equals("")) {
		masMedicalBoardProceedings.setAuthority(req
				.getParameter(AUTHORITY_OF_BOARD));
	}
	if (req.getParameter(PLACE) != null
			&& !req.getParameter(PLACE).equals("")) {
		masMedicalBoardProceedings.setPlace(req.getParameter(PLACE));
	}
	if (req.getParameter(DATE_DISCHARGE) != null
			&& !req.getParameter(DATE_DISCHARGE).equals("")) {
		masMedicalBoardProceedings.setDateDischarge(HMSUtil
				.convertStringTypeDateToDateType(req
						.getParameter(DATE_DISCHARGE)));
	}
	if (req.getParameter(DATE_OF_RELEASE) != null
			&& !req.getParameter(DATE_OF_RELEASE).equals("")) {
		masMedicalBoardProceedings.setDateRelease(HMSUtil
				.convertStringTypeDateToDateType(req
						.getParameter(DATE_OF_RELEASE)));
	}
	if (req.getParameter(MARITAL_STATUS_ID) != null
			&& !req.getParameter(MARITAL_STATUS_ID).equals("")) {
		MasMaritalStatus maritalstatus = new MasMaritalStatus();
		maritalstatus.setId(Integer.parseInt(req
				.getParameter(MARITAL_STATUS_ID)));
		masMedicalBoardProceedings.setMaritalStatus(maritalstatus);

	}

	if (req.getParameter(SERVICE_TYPE_ID) != null
			&& !req.getParameter(SERVICE_TYPE_ID).equals("")) {
		masMedicalBoardProceedings.setBatchNo(req
				.getParameter(SERVICE_TYPE_ID));
	}
	if (req.getParameter(DATE_DISEASE) != null
			&& !req.getParameter(DATE_DISEASE).equals("")) {
		masMedicalBoardProceedings.setDateDisease(HMSUtil
				.convertStringTypeDateToDateType(req
						.getParameter(DATE_DISEASE)));
	}
	if (req.getParameter(PLACE_DISEASE) != null
			&& !req.getParameter(PLACE_DISEASE).equals("")) {
		masMedicalBoardProceedings.setPlacedisease(req
				.getParameter(PLACE_DISEASE));
	}
	if (req.getParameter(WHERE_TREATED) != null
			&& !req.getParameter(WHERE_TREATED).equals("")) {
		masMedicalBoardProceedings.setWheretreated(req
				.getParameter(WHERE_TREATED));
	}
	if (req.getParameter(DATE_APPROXIMATE) != null
			&& !req.getParameter(DATE_APPROXIMATE).equals("")) {
		masMedicalBoardProceedings.setDateapproximate(HMSUtil
				.convertStringTypeDateToDateType(req
						.getParameter(DATE_APPROXIMATE)));
	}
	if (req.getParameter(DISABILITY_BEFORE) != null
			&& !req.getParameter(DISABILITY_BEFORE).equals("")) {
		masMedicalBoardProceedings.setDisabilitybefore(req
				.getParameter(DISABILITY_BEFORE));
	}
	if (req.getParameter(CLAMING_DISABILITY) != null
			&& !req.getParameter(CLAMING_DISABILITY).equals("")) {
		masMedicalBoardProceedings.setClamingdisability(req
				.getParameter(CLAMING_DISABILITY));
	}
	if (req.getParameter(DATE_DISCHARGE) != null
			&& !req.getParameter(DATE_DISCHARGE).equals("")) {
		masMedicalBoardProceedings.setDateDischarge(HMSUtil
				.convertStringTypeDateToDateType(req
						.getParameter(DATE_DISCHARGE)));
	}
	if (req.getParameter("medicalType") != null
			&& !req.getParameter("medicalType").equals("")) {
		masMedicalBoardProceedings.setMedicalType(req
				.getParameter("medicalType"));
	}
	if (req.getParameter("patientheight") != null
			&& !req.getParameter("patientheight").equals("")) {
		masMedicalBoardProceedings.setPatientheight(req
				.getParameter("patientheight"));
	}
	if (req.getParameter("patientweight") != null
			&& !req.getParameter("patientweight").equals("")) {
		masMedicalBoardProceedings.setPatientweight(req
				.getParameter("patientweight"));
	}
	if (req.getParameter(RECORDOFFICE) != null
			&& !req.getParameter(RECORDOFFICE).equals("")) {
		masMedicalBoardProceedings.setRecordoffice(req
				.getParameter(RECORDOFFICE));
	}
	if (req.getParameter(CEASEDDUTY) != null
			&& !req.getParameter(CEASEDDUTY).equals("")) {
		masMedicalBoardProceedings.setCeaseduty(HMSUtil
				.convertStringTypeDateToDateType(req
						.getParameter(CEASEDDUTY)));
	}
	if (req.getParameter(DISABILITY) != null
			&& !req.getParameter(DISABILITY).equals("")) {
		masMedicalBoardProceedings.setDisability(req
				.getParameter(DISABILITY));
	}
	if (req.getParameter(DISABILITY_ATTRIBUTABLE_DESC) != null
			&& !req.getParameter(DISABILITY_ATTRIBUTABLE_DESC).equals("")) {
		masMedicalBoardProceedings.setDisabilityAttribute(req
				.getParameter(DISABILITY_ATTRIBUTABLE_DESC));
	}
	if (req.getParameter(AGGRAVATED_SERVICE_LABEL) != null
			&& !req.getParameter(AGGRAVATED_SERVICE_LABEL).equals("")) {
		masMedicalBoardProceedings.setAggravatedService(req
				.getParameter(AGGRAVATED_SERVICE_LABEL));
	}
	if (req.getParameter(AGGRAVATED_SERVICE_DESC) != null
			&& !req.getParameter(AGGRAVATED_SERVICE_DESC).equals("")) {
		masMedicalBoardProceedings.setAggravatedServiceDesc(req
				.getParameter(AGGRAVATED_SERVICE_DESC));
	}
	if (req.getParameter(CASE_SHEET) != null
			&& !req.getParameter(CASE_SHEET).equals("")) {
		masMedicalBoardProceedings.setCaseSheet(req
				.getParameter(CASE_SHEET));
	}
	if (req.getParameter(CONDITION_OF_GUMS) != null
			&& !req.getParameter(CONDITION_OF_GUMS).equals("")) {
		masMedicalBoardProceedings.setConditionOfGums(req
				.getParameter(CONDITION_OF_GUMS));
	}
	if (req.getParameter(MEDICAL_CATEGORY) != null
			&& !req.getParameter(MEDICAL_CATEGORY).equals("")) {
		masMedicalBoardProceedings.setCaseSheet(req
				.getParameter(MEDICAL_CATEGORY));
	}
	if (req.getParameter(CATEGORIZATION_PLACE) != null
			&& !req.getParameter(CATEGORIZATION_PLACE).equals("")) {
		masMedicalBoardProceedings.setCategoryplace(req
				.getParameter(CATEGORIZATION_PLACE));
	}
	if (req.getParameter(CATEGORIZATION_DATE) != null
			&& !req.getParameter(CATEGORIZATION_DATE).equals("")) {
		masMedicalBoardProceedings.setCategorydate(HMSUtil
				.convertStringTypeDateToDateType(req
						.getParameter(CATEGORIZATION_DATE)));
	}
	if (req.getParameter(PREVIOUS_DISABLEMENT) != null
			&& !req.getParameter(PREVIOUS_DISABLEMENT).equals("")) {
		masMedicalBoardProceedings.setPreviousDisablement(req
				.getParameter(PREVIOUS_DISABLEMENT));
	}
	if (req.getParameter(PRESENT_DISABLEMENT) != null
			&& !req.getParameter(PRESENT_DISABLEMENT).equals("")) {
		masMedicalBoardProceedings.setPresentDisablement(req
				.getParameter(PRESENT_DISABLEMENT));
	}
	if (req.getParameter(REASOPNS_VARIATION) != null
			&& !req.getParameter(REASOPNS_VARIATION).equals("")) {
		masMedicalBoardProceedings.setReasopnsvariation(req
				.getParameter(REASOPNS_VARIATION));
	}
	if (req.getParameter(RESTRICTION_EMPLOYMENT) != null
			&& !req.getParameter(RESTRICTION_EMPLOYMENT).equals("")) {
		masMedicalBoardProceedings.setRestrictionemployment(req
				.getParameter(RESTRICTION_EMPLOYMENT));
	}
	if (req.getParameter(INSTRUCTION_BY_PRESIDENT) != null
			&& !req.getParameter(INSTRUCTION_BY_PRESIDENT).equals("")) {
		masMedicalBoardProceedings.setInstructionByPresident(req
				.getParameter(INSTRUCTION_BY_PRESIDENT));
	}
	if (req.getParameter(BOARD_PRESIDENT) != null
			&& !req.getParameter(BOARD_PRESIDENT).equals("")) {
		masMedicalBoardProceedings.setBoardPresident(req
				.getParameter(BOARD_PRESIDENT));
	}
	if (req.getParameter(BOARD_MEMBER) != null
			&& !req.getParameter(BOARD_MEMBER).equals("")) {
		masMedicalBoardProceedings.setBoardmember(req
				.getParameter(BOARD_MEMBER));
	}
	if (req.getParameter(CASE_DETAIL) != null
			&& !req.getParameter(CASE_DETAIL).equals("")) {
		masMedicalBoardProceedings.setCaseDetail(req
				.getParameter(CASE_DETAIL));
	}
	if (req.getParameter(UPLOADED_DATE) != null
			&& !req.getParameter(UPLOADED_DATE).equals("")) {
		masMedicalBoardProceedings.setUploadeddate(HMSUtil
				.convertStringTypeDateToDateType(req
						.getParameter(UPLOADED_DATE)));
	}
	if (req.getParameter(OPINION_DATE) != null
			&& !req.getParameter(OPINION_DATE).equals("")) {
		masMedicalBoardProceedings.setOpiniondate(HMSUtil
				.convertStringTypeDateToDateType(req
						.getParameter(OPINION_DATE)));
	}
	if (req.getParameter(PAST_MEDICAL_CATEGORY) != null
			&& !(req.getParameter(PAST_MEDICAL_CATEGORY)).equals("0")) {
		Category categ1 = new Category();
		categ1.setCategoryid(Integer.parseInt(req
				.getParameter(PAST_MEDICAL_CATEGORY)));
		masMedicalBoardProceedings.setPastMedicalCategory(categ1);
	}
	if (req.getParameter(PRESENT_MEDICAL_CATEGORY) != null
			&& !(req.getParameter(PRESENT_MEDICAL_CATEGORY)).equals("0")) {
		Category categ2 = new Category();
		categ2.setCategoryid(Integer.parseInt(req
				.getParameter(PRESENT_MEDICAL_CATEGORY)));
		masMedicalBoardProceedings.setPresentMedicalCategory(categ2);
	}
	if (req.getParameter(PREVIOUS_DISABLEMENT) != null
			&& !(req.getParameter(PREVIOUS_DISABLEMENT)).equals("0")) {
		Disability dis1 = new Disability();
		dis1.setDisabilityid(Integer.parseInt(req
				.getParameter(PREVIOUS_DISABLEMENT)));
		masMedicalBoardProceedings.setPastDisability(dis1);
	}
	if (req.getParameter(PRESENT_DISABLEMENT) != null
			&& !(req.getParameter(PRESENT_DISABLEMENT)).equals("0")) {
		Disability dis2 = new Disability();
		dis2.setDisabilityid(Integer.parseInt(req
				.getParameter(PRESENT_DISABLEMENT)));
		masMedicalBoardProceedings.setPresentDisability(dis2);
	}
	if (req.getParameter("dentalValue") != null
			&& !req.getParameter("dentalValue").equals("")) {
		masMedicalBoardProceedings.setDentalValue(req
				.getParameter("dentalValue"));
	}
	if (req.getParameter("Personalans") != null
			&& !req.getParameter("Personalans").equals("")) {
		masMedicalBoardProceedings.setPersonalans(req
				.getParameter("Personalans"));
	}
	if (req.getParameter("SpecialistReport") != null
			&& !req.getParameter("SpecialistReport").equals("")) {
		masMedicalBoardProceedings.setSpecialistReport(req
				.getParameter("SpecialistReport"));
	}
	if (req.getParameter("Treatment") != null
			&& !req.getParameter("Treatment").equals("")) {
		masMedicalBoardProceedings.setTreatment(req
				.getParameter("Treatment"));
	}
	if (req.getParameter("PresentConditionin") != null
			&& !req.getParameter("PresentConditionin").equals("")) {
		masMedicalBoardProceedings.setPresentConditionin(req
				.getParameter("PresentConditionin"));
	}
	if (req.getParameter("Investigated") != null
			&& !req.getParameter("Investigated").equals("")) {
		masMedicalBoardProceedings.setInvestigated(req
				.getParameter("Investigated"));
	}
	if (req.getParameter("MonthlySerialNo") != null
			&& !req.getParameter("MonthlySerialNo").equals("")) {
		masMedicalBoardProceedings.setMonthlySerialNo(req
				.getParameter("MonthlySerialNo"));
	}
	if (req.getParameter("Hips") != null
			&& !(req.getParameter("Hips").equals(""))) {
		masMedicalBoardProceedings.setHips(req.getParameter("Hips"));
	}
	if (req.getParameter("WHR") != null
			&& !(req.getParameter("WHR").equals(""))) {
		masMedicalBoardProceedings.setWhr(req.getParameter("WHR"));
	}
	/**
	 * Code By Ritu Date 01 May 2012
	 */
	if (req.getParameter("medicalOfficer") != null
			&& !(req.getParameter("medicalOfficer").equals("0"))) {
		MasEmployee employee = new MasEmployee();
		employee
				.setId(Integer.parseInt(req.getParameter("medicalOfficer")));
		masMedicalBoardProceedings.setForwardMO(employee);
	}
	/**
	 * End
	 */
	
	/**
	 * Added By Mansi
	 */
	if(req.getParameter("sd") != null && !req.getParameter("sd").equals("")){
		masMedicalBoardProceedings.setSD(req.getParameter("sd"));
	}
	/**
	 * End
	 */
	
	String medicaltype = masMedicalBoardProceedings.getMedicalExamType();
	List<Integer> serialnolist = new ArrayList<Integer>();
	List<String> fromlist = new ArrayList<String>();
	List<Integer> presentMedicalCategoryList = new ArrayList<Integer>();
	List<String> tolist = new ArrayList<String>();
	List<String> placelist = new ArrayList<String>();
	List<String> pnolist = new ArrayList<String>();
	List<String> principallist = new ArrayList<String>();
	List<Date> origindatelist = new ArrayList<Date>();
	List<Date> medicalcatdatelist = new ArrayList<Date>();
	List<Date> nextcatdatelist = new ArrayList<Date>();
	List<Integer> disabilityList = new ArrayList<Integer>();
	List<Date> disabilitydateList = new ArrayList<Date>();
	List<Integer> disabilityrankList = new ArrayList<Integer>();
	List<String> disabilityplaceList = new ArrayList<String>();
	List<Integer> disabilityunitList = new ArrayList<Integer>();

	List<String> disabilityRemarkList = new ArrayList<String>();
	List<String> disabilityAggravationList = new ArrayList<String>();
	
	List<String> shapeFactorDetailList = new ArrayList<String>();
	List<String> medCatPeriodDisList = new ArrayList<String>();
	if (medicaltype.equalsIgnoreCase("Initial Medical Board AFMSF 15")
			|| medicaltype
					.equalsIgnoreCase("Medical Board Rel/Invalidment AFMSF 16")
			|| medicaltype
					.equalsIgnoreCase("Medical Board Review AFMSF 15")) {
		int hdbvalue = 1;
		/*
		 * if (Integer.parseInt(req.getParameter("hdb1")) != 1) { hdbvalue =
		 * Integer.parseInt(req.getParameter("hdb1")); }
		 */
		if (Integer.parseInt(req.getParameter("hdb")) != 1) {
			hdbvalue = Integer.parseInt(req.getParameter("hdb"));
		}
		for (int i = 1; i <= hdbvalue; i++) {

			if (req.getParameter(SIRIAL_NO + i) == "") {
				serialnolist.add(i);
			} else if (req.getParameter(SIRIAL_NO + i) != null
					&& !req.getParameter(SIRIAL_NO + i).equals("")) {
				serialnolist.add(Integer.parseInt(req
						.getParameter(SIRIAL_NO + i)));
			} else {
				serialnolist.add(0);
			}

			if (req.getParameter(FROM + i) != null) {
				fromlist.add(req.getParameter(FROM + i));
			} else {
				fromlist.add("");
			}
			if (req.getParameter(PRESENT_MEDICAL_CATEGORY + i) != null) {
				presentMedicalCategoryList.add(Integer.parseInt(req
						.getParameter(PRESENT_MEDICAL_CATEGORY + i)));
			} else {
				presentMedicalCategoryList.add(0);
			}

			if (req.getParameter(TO + i) != null
					&& !req.getParameter(TO + i).equals("")) {
				tolist.add(req.getParameter(TO + i));
			} else {
				tolist.add("");
			}
			if (req.getParameter(PLACE + i) != null
					&& !req.getParameter(PLACE + i).equals("")) {
				placelist.add(req.getParameter(PLACE + i));
			} else {
				placelist.add("");
			}
			if (req.getParameter(P_NO + i) != null
					&& !req.getParameter(P_NO + i).equals("")) {
				pnolist.add(req.getParameter(P_NO + i));
			} else {
				pnolist.add("");
			}
			if (req.getParameter(PRINCIPAL + i) != null
					&& !req.getParameter(PRINCIPAL + i).equals("")) {
				principallist.add(req.getParameter(PRINCIPAL + i));
			} else {
				principallist.add("");
			}
			if (req.getParameter(ORIGIN_DATE + i) != null
					&& !req.getParameter(ORIGIN_DATE + i).equals("")) {
				origindatelist.add(HMSUtil
						.convertStringTypeDateToDateType(req
								.getParameter(ORIGIN_DATE + i)));
			} else {
				origindatelist.add(null);
			}
			if (req.getParameter(MEDICAL_CAT_DATE + i) != null
					&& !req.getParameter(MEDICAL_CAT_DATE + i).equals("")) {
				medicalcatdatelist.add(HMSUtil
						.convertStringTypeDateToDateType(req
								.getParameter(MEDICAL_CAT_DATE + i)));
			} else {
				medicalcatdatelist.add(null);
			}
			//---Added by dipali---
			 if (req.getParameter("shapeFactorDetail" + i) != null
						&& !req.getParameter("shapeFactorDetail" + i).equals(
								"")) {
             	shapeFactorDetailList.add(req.getParameter("shapeFactorDetail" + i));
				} else {
					shapeFactorDetailList.add(null);
				}
             String medCatDurationDis="";
             if (req.getParameter("medCatPeriodDis"+i) != null) {
     			if (req.getParameter("medCatDurationDis"+i) != null) {
     				String durationDis = req.getParameter("medCatDurationDis"+i);
     				medCatDurationDis = req.getParameter("medCatPeriodDis"+i).concat(" ").concat(durationDis);
     			}
     			medCatPeriodDisList.add(medCatDurationDis);
     		}else{
     			medCatPeriodDisList.add(null);
     		}
			if (req.getParameter(NEXT_CAT_DATE + i) != null
					&& !req.getParameter(NEXT_CAT_DATE + i).equals("")) {
				nextcatdatelist.add(HMSUtil
						.convertStringTypeDateToDateType(req
								.getParameter(NEXT_CAT_DATE + i)));
			} else {
				nextcatdatelist.add(null);
			}
			if (req.getParameter("aggravation" + i) != null
					&& !req.getParameter("aggravation" + i).equals("")) {
				disabilityAggravationList.add(req
						.getParameter("aggravation" + i));
			} else {
				disabilityAggravationList.add("");
			}
			if (req.getParameter("remarks" + i) != null
					&& !req.getParameter("remarks" + i).equals("")) {
				disabilityRemarkList.add(req.getParameter("remarks" + i));
			} else {
				disabilityRemarkList.add("");
			}
			// temp1=temp1+1;

		}
		mapForDS.put("hdbvalue", hdbvalue);
		mapForDS.put("hiddenValue", hiddenValue);
		mapForDS.put("serialnolist", serialnolist);
		mapForDS.put("fromlist", fromlist);
		mapForDS
				.put("disabilityAggravationList", disabilityAggravationList);
		mapForDS.put("disabilityRemarkList", disabilityRemarkList);
		mapForDS.put("presentMedicalCategoryList",
				presentMedicalCategoryList);
		mapForDS.put("tolist", tolist);
		mapForDS.put("placelist", placelist);
		mapForDS.put("pnolist", pnolist);
		mapForDS.put("principallist", principallist);
		mapForDS.put("origindatelist", origindatelist);
		mapForDS.put("medicalcatdatelist", medicalcatdatelist);
		mapForDS.put("nextcatdatelist", nextcatdatelist);
		mapForDS.put("shapeFactorDetailList", shapeFactorDetailList);
		mapForDS.put("medCatPeriodDisList", medCatPeriodDisList);
		
	}
	int hdbvalue2 = 1;
	/*
	 * if(medicaltype.equalsIgnoreCase("Medical Board Rel/Invalidment AFMSF 16"
	 * )||medicaltype.equalsIgnoreCase("Initial Medical Board AFMSF 15")) {
	 * if (Integer.parseInt(req.getParameter("hdb1")) != 1) { hdbvalue1 =
	 * Integer.parseInt(req.getParameter("hdb1")); } int temp2 = 1; for (int
	 * i = 1; i < hdbvalue1; i++) {
	 * 
	 * if(req.getParameter(SIRIAL_NO1+ i) == "" ){ serialnolist1.add(i);
	 * }else if(req.getParameter(SIRIAL_NO1+ i) != null ){
	 * serialnolist1.add(Integer.parseInt(req.getParameter(SIRIAL_NO1+ i)));
	 * }
	 * 
	 * 
	 * if(req.getParameter(PARTICULAR_DATE+ i) != null ){
	 * particulardatelist.
	 * add(HMSUtil.convertStringTypeDateToDateType(req.getParameter
	 * (PARTICULAR_DATE+ i))); } if(req.getParameter(RANK_INDIVIDUAL_ID+ i)
	 * != null ){
	 * rankidlist.add(Integer.parseInt(req.getParameter(RANK_INDIVIDUAL_ID+
	 * i))); } if(req.getParameter(TREATED+ i) != null ){
	 * treatedlist.add(req.getParameter(TREATED+ i)); }
	 * if(req.getParameter(PLACE1+ i) != null ){
	 * placelist1.add(req.getParameter(PLACE1+ i)); }
	 * if(req.getParameter(APPROXIMATE_DATE+ i) != null ){
	 * approximatedatelist
	 * .add(HMSUtil.convertStringTypeDateToDateType(req.getParameter
	 * (APPROXIMATE_DATE+ i))); } if(req.getParameter(DISABILITYID+ i) !=
	 * null ){
	 * disabilityIdList.add(Integer.parseInt(req.getParameter(DISABILITYID+
	 * i))); } if(req.getParameter(ICDID+ i) != null ){
	 * icdIdList.add(Integer.parseInt(req.getParameter(ICDID+ i))); }
	 * 
	 * if(req.getParameter(DISABILITYGROUPID+ i) != null ){
	 * disabilitygroupIdList
	 * .add(Integer.parseInt(req.getParameter(DISABILITYGROUPID+ i))); }
	 * if(req.getParameter(ILLNESS+ i) != null ){
	 * illnesslist.add(req.getParameter(ILLNESS+ i));
	 * 
	 * } //temp2=temp2+1; } mapForDS.put("hdbvalue1", hdbvalue1);
	 * mapForDS.put("hiddenValue1", hiddenValue1);
	 * mapForDS.put("serialnolist1", serialnolist1);
	 * mapForDS.put("illnesslist", illnesslist);
	 * mapForDS.put("particulardatelist", particulardatelist);
	 * mapForDS.put("rankidlist", rankidlist); mapForDS.put("treatedlist",
	 * treatedlist); mapForDS.put("approximatedatelist",
	 * approximatedatelist); mapForDS.put("placelist1", placelist1);
	 * mapForDS.put("disabilityIdList", disabilityIdList);
	 * mapForDS.put("icdIdList", icdIdList);
	 * mapForDS.put("disabilitygroupIdList", disabilitygroupIdList); }
	 */
	if (medicaltype
			.equalsIgnoreCase("Medical Board Rel/Invalidment AFMSF 16")) {
		if (Integer.parseInt(req.getParameter("hdb2")) != 1) {
			hdbvalue2 = Integer.parseInt(req.getParameter("hdb2"));
		}
		int temp2 = 1;
		for (int i = 1; i < hdbvalue2; i++) {

			if (req.getParameter(DISABILITY + i) != null) {
				disabilityList.add(Integer.parseInt(req
						.getParameter(DISABILITY + i)));
			}
			if (req.getParameter(DISABILITY_RANK_ID + i) != null) {
				disabilityrankList.add(Integer.parseInt(req
						.getParameter(DISABILITY_RANK_ID + i)));
			}
			if (req.getParameter(DISABILITY_DATE + i) != null
					&& !req.getParameter(DISABILITY_DATE + i).equals("")) {
				disabilitydateList.add(HMSUtil
						.convertStringTypeDateToDateType(req
								.getParameter(DISABILITY_DATE + i)));
			}
			if (req.getParameter(DISABILITY_PLACE + i) != null) {
				disabilityplaceList.add(req.getParameter(DISABILITY_PLACE
						+ i));
			}
			if (req.getParameter(DISABILITY_UNIT + i) != null) {
				disabilityunitList.add(Integer.parseInt(req
						.getParameter(DISABILITY_UNIT + i)));
			}
		}
		mapForDS.put("hdbvalue2", hdbvalue2);
		mapForDS.put("disabilityList", disabilityList);
		mapForDS.put("disabilityrankList", disabilityrankList);
		mapForDS.put("disabilitydateList", disabilitydateList);
		mapForDS.put("disabilityplaceList", disabilityplaceList);
		mapForDS.put("disabilityunitList", disabilityunitList);
	}
	/*
	 * if (req.getParameter("investigationReferToMH" + temp) != null &&
	 * !req.getParameter("investigationReferToMH" + temp).equals("")) {
	 * investigationReferToMHList
	 * .add(req.getParameter("investigationReferToMH" + temp)); }else {
	 * investigationReferToMHList.add("n"); }
	 */
	Users maUser = new Users();
	maUser.setId(userId);
	masMedicalBoardProceedings.setMaUser(maUser);

	MasHospital hospital = new MasHospital();
	hospital.setId(hospitalId);
	masMedicalBoardProceedings.setHospital(hospital);

	MasCommand command = new MasCommand();
	command.setId(commandId);
	masMedicalBoardProceedings.setCommand(command);

	masMedicalBoardProceedings.setStatus("p");
	masMedicalBoardProceedings.setMedicalType("MedicalBoard");
	mapForDS.put("chargeCodeIdList", chargeCodeIdList);
	mapForDS.put("quantityList", quantityList);
	mapForDS.put("clinicalNotes1", clinicalNotes1);
	mapForDS.put("lastChangedBy", lastChangedBy);
	mapForDS.put("lastChangedDate", lastChangedDate);
	mapForDS.put("lastChangedTime", lastChangedTime);
	mapForDS.put("investigationReferToMHList", investigationReferToMHList);
	mapForDS.put("hospitalId", hospitalId);
	mapForDS.put("deptId", deptId);
	mapForDS.put("empId", empId);
	mapForDS.put("userId", userId);

	mapForDS.put("hinId", hinId);
	mapForDS.put("visitId", visitId);
	mapForDS.put("dgOrderdtIdList", dgOrderdtIdList);
	mapForDS.put("patientInvestigationHeaderId", 0);
	mapForDS.put("dgOrderhdId", 0);
	mapForDS.put("patientInvestigationdetailsIdList",
			patientInvestigationdetailsIdList);

	try {
		if(dentalReferToMH.equalsIgnoreCase("yes")){
		Visit visit = new Visit();

		visit.setTokenNo(0);
		if (hinId != 0) {
			Patient patient = new Patient();
			patient.setId(hinId);
			visit.setHin(patient);
		}
		if (hospitalId != 0) {
			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			visit.setHospital(masHospital);
		}
		if (deptId != 0) {
			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(deptId);
			visit.setDepartment(masDepartment);
		}
		if (empId != 0) {
			MasEmployee masEmployee = new MasEmployee();
			masEmployee.setId(empId);
			visit.setDoctor(masEmployee);
		}
		String ageId = "";
		if (req.getParameter("ageId") != null) {
			ageId = req.getParameter("ageId");
		}
		visit.setAge(ageId);
		visit.setAddEditBy(user);
		visit.setAddEditDate(lastChangedDate);
		visit.setAddEditTime(lastChangedTime);
		visit.setVisitDate(lastChangedDate);
		visit.setVisitTime(lastChangedTime);
		visit.setVisitStatus("w");
		visit.setReportingFor("Dental");
		visit.setAppointmentType("D");
		visit.setPriority(3);
		visit.setStatus("y");
		visit.setDentalFlag("MedBoard15");
		mapForDS.put("visit", visit);
		}
	} catch (Exception e1) {
		e1.printStackTrace();
	}
	Map<String, Object> dataMap = new HashMap<String, Object>();

	String orderSeqNo = "";
	orderSeqNo = labHandlerService.generateOrderNumber(hospitalId);
	mapForDS.put("orderSeqNo", orderSeqNo);
	mapForDS.put("hospitalId", hospitalId);
	dataMap = medicalBoardHandlerService.addMedicalBoardInit(
			masMedicalBoardProceedings, masMedicalBoardDetails, mapForDS);
	successfullyAdded = (Boolean) dataMap.get("successfullyAdded");
	if (successfullyAdded) {
		message = "Record Added Successfully!";
		jsp = MEDICAL_BOARD_EXAM_MSG;
		map.put("medExamId", (Integer) dataMap.get("medExamId"));
	}
	if (!successfullyAdded) {
		message = "Some Problem Occured !!!";
		jsp = MEDICAL_BOARD_ERROR_MSG;
	}
	// }
	try {
		// map =
		// medicalExaminationBoardHandlerService.showMedicalExaminationBoardJsp();
	} catch (Exception e) {
		e.printStackTrace();
	}
	String medicalEntryNo = "";
	String medicalEntryNo1 = "";
	String userName = "";
	String userName1 = "";
	// medicalEntryNo =
	// medicalExaminationBoardHandlerService.generateMedicalEntryNumber(userName);
	// medicalEntryNo1 =
	// medicalExaminationBoardHandlerService.generateMedicalEntryNumber1(userName1);
	jsp += ".jsp";
	map.put("investigationReferToMHList", investigationReferToMHList);
	map.put("medicalEntryNo", medicalEntryNo);
	map.put("medicalEntryNo1", medicalEntryNo1);
	map.put("contentJsp", jsp);
	map.put("message", message);
	map.put("hinNoForreport", req.getParameter("hinNoForreport"));
	map.put("visitNumberForReport", Integer.parseInt(req
			.getParameter("visitNumberForReport")));
	map.put("serviceNo", serviceNo);
	map.put("visitId", visitId);
	map.put("denatlToMH", dentalReferToMH);
	return new ModelAndView("indexB", "map", map);

}

// --------By Dipali
public ModelAndView showMedicalOfficerInitial(HttpServletRequest request,
		HttpServletResponse response) {
	String jsp = "";
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	Box box = HMSUtil.getBox(request);
	Map<String, Object> map = new HashMap<String, Object>();
	int visitId = 0;
	int medExamId = 0;
	String jspheading = null;
	if (request.getParameter("visitId") != null) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	if (request.getParameter("medExamType") != null) {
		jspheading = request.getParameter("medExamType");
	}
	if (request.getParameter("medExamId") != null) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"));
	}
	HttpSession session = request.getSession();
	int deptId = (Integer) session.getAttribute("deptId");
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	mapForDS.put("hospitalId", hospitalId);
	mapForDS.put("visitId", visitId);
	mapForDS.put("deptId", deptId);
	mapForDS.put("medExamId", medExamId);
	map = medicalBoardHandlerService.showMedicalOfficerInitial(mapForDS);
	jsp = MEDICAL_BOARD_MO;
	jsp += ".jsp";
	map.put("visitId", visitId);
	map.put("jspheading", jspheading);
	map.put("contentJsp", jsp);

	return new ModelAndView("index", "map", map);
}

public ModelAndView showClinicalSummaryJsp(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	String jsp = "mb_clinicalSummary";
	return new ModelAndView(jsp, "map", map);
}

public ModelAndView showSpecialistOpinionJsp(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	int medExamId = 0;
	if (request.getParameter("medExamId") != null) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"));
	}
	int visitId = 0;
	if (request.getParameter("visitId") != null) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	String directFlag = "";
	if (request.getParameter("directFlag") != null) {
		directFlag = request.getParameter("directFlag");
	}
	String SecialFlag = "";
	if (request.getParameter("SecialFlag") != null) {
		SecialFlag = request.getParameter("SecialFlag");
	}
	dataMap.put("medExamId", medExamId);
	dataMap.put("visitId", visitId);
	HttpSession session = request.getSession();
	int deptId = (Integer) session.getAttribute("deptId");
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	dataMap.put("hospitalId", hospitalId);
	dataMap.put("deptId", deptId);
	map = medicalBoardHandlerService.showMedicalExamList(dataMap);
	map.put("SecialFlag", SecialFlag);
	String jsp = "mb_SpecialistOpinion";
	if (directFlag.equalsIgnoreCase("D")) {
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("directFlag", "D");
		return new ModelAndView("index", "map", map);
	} else {
		map.put("directFlag", "N");
		return new ModelAndView(jsp, "map", map);
	}
}

public ModelAndView showSpecialistOpinionMainJsp(
		HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	int medExamId = 0;
	int visitId = 0;
	if (request.getParameter("medExamId") != null) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"));
	}
	if (request.getParameter("visitId") != null) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	dataMap.put("visitId", visitId);
	dataMap.put("medExamId", medExamId);
	map = medicalBoardHandlerService.showMedicalExamList(dataMap);
	String jsp = "mb_SpecialistOpinion";
	jsp += ".jsp";
	map.put("contentJsp", jsp);

	return new ModelAndView("index", "map", map);
}

public ModelAndView showMedicalBoardJsp(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	String jsp = "mb_MedicalBoardDetails";
	map.put("contentJsp", jsp);
	return new ModelAndView(jsp, "map", map);
}

public ModelAndView showMedicalBoard16Jsp(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	int medExamId = 0;
	int visitId = 0;
	int hospitalId = 0;
	if (request.getParameter("medExamId") != null) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"));
	}
	if (request.getParameter("visitId") != null) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	HttpSession session = request.getSession();
	if (session.getAttribute(HOSPITAL_ID) != null) {
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	}
	dataMap.put("hospitalId", hospitalId);
	dataMap.put("visitId", visitId);
	dataMap.put("medExamId", medExamId);
	map = medicalBoardHandlerService.showMedicalBoard16Jsp(dataMap);
	String jsp = "mb_viewMedicalBoard";
	return new ModelAndView(jsp, "map", map);
}

public ModelAndView showUploadViewDocumentJsp(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	int visitId = 0;
	int medExamId = 0;
	if (request.getParameter("visitId") != null) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	if (request.getParameter("medExamId") != null) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"));
	}
	HttpSession session = request.getSession();
	int deptId = (Integer) session.getAttribute("deptId");
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	String flag = "";
	if (request.getParameter("flag") != null) {
		flag = request.getParameter("flag").trim();
	}
	Map<String, Object> mapDetails = new HashMap<String, Object>();
	mapDetails.put("visitId", visitId);
	mapDetails.put("medExamId", medExamId);
	mapDetails.put("flag", flag);
	map = medicalBoardHandlerService.showUploadViewDocumentJsp(mapDetails);
	map.put("visitId", visitId);
	map.put("medExamId", medExamId);
	map.put("hospitalId", hospitalId);
	map.put("deptId", deptId);
	map.put("flag", flag);
	String jsp = "mb_uploadDocumentdoc";
	map.put("medExamId", medExamId);
	map.put("contentJsp", jsp);
	return new ModelAndView(jsp, "map", map);
}

/*
 * Code for Mo Upload Documents Code By Mukesh Date 08/02/2012
 */
public ModelAndView submitUploadDocumentsMo(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	Box box = HMSUtil.getBox(request);
	MultipartFormDataRequest mrequest = null;
	String fileName = null;
	String message = null;
	String hin_no = "";
	String fileExtension = null;
	int hospitalId = 0;
	int visitId = 0;
	int medExamId = 0;
	String userName = "";
	String flag = "";
	if (MultipartFormDataRequest.isMultipartFormData(request)) {
		try {

			mrequest = new MultipartFormDataRequest(request);
		} catch (UploadException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	HttpSession session = request.getSession();
	if (mrequest.getParameter("hin_no") != null) {
		hin_no = (String) mrequest.getParameter("hin_no");
	}
	if (session.getAttribute(HOSPITAL_ID) != null) {
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		mapForDS.put("hospitalId", hospitalId);
	}
	int deptId = (Integer) session.getAttribute("deptId");
	if (session.getAttribute(LOGIN_NAME) != null) {
		userName = (String) session.getAttribute(LOGIN_NAME);
		mapForDS.put("userName", userName);
	}
	if (request.getParameter("visitId") != null
			&& !request.getParameter("visitId").equals("0")) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	if (request.getParameter("medExamId") != null
			&& !request.getParameter("medExamId").equals("0")) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"));
	}
	// Map<String, Object> uploadFileMap = new HashMap<String, Object>();
	// Vector noOfFiles=box.getVector(UPLOAD_FILENAME);
	// String uploadURL = getServletContext().getRealPath("/upload/");
	String userHome = getServletContext().getRealPath("");
	String fileSeparator = System.getProperty("file.separator");
	String uploadURL = userHome.substring(0, userHome
			.lastIndexOf(fileSeparator))
			+ fileSeparator
			+ "HMSDocumentFolder"
			+ fileSeparator
			+ "upload" + fileSeparator;
	HMSUtil.createFolderFroDocument(hin_no, uploadURL);
	List fileUploadedList = null;
	int uploadCount = box.getInt("uploadCount");
	int i = 1;
	List<String> fileNameList = new ArrayList<String>();
	List<String> fileNameExtList = new ArrayList<String>();
	List<String> fileWhiteList = new ArrayList<String>();
	List<String> fileDescriptionList = new ArrayList<String>();
	List<String> fileModeList = new ArrayList<String>();
	for (i = 1; i <= uploadCount; i++) {
		if (request.getParameter("filename" + i) != null
				&& !request.getParameter("filename" + i).equals("")) {
			StringTokenizer strToken = new StringTokenizer(request
					.getParameter("filename" + i), ".");

			fileName = strToken.nextToken();
			fileExtension = strToken.nextToken();

			String whiteList = "*." + fileExtension;

			// Long fileSizeLimit = 2097152l;
			// RequestConstants.UPLOAD_FILENAME=box.getString("filename"+i);

			fileUploadedList = HMSUtil.uploadFile(mrequest, uploadURL
					+ hin_no + fileSeparator, whiteList, visitId
					+ request.getParameter("filename" + i), i);
			box.put("filename" + i, request.getParameter("filename" + i));
			box.put("description" + i, mrequest.getParameter("description"
					+ i));
			fileNameList.add(fileName);
			fileNameExtList.add(fileExtension);
			fileWhiteList.add(whiteList);
			fileDescriptionList.add(mrequest
					.getParameter("description" + i));
			fileModeList.add(mrequest.getParameter("mode" + i));
			flag = mrequest.getParameter("mode" + i);
		} else {
			mapForDS.put("filename" + i, "0");
		}
	}
	mapForDS.put("fileNameList", fileNameList);
	mapForDS.put("fileNameExtList", fileNameExtList);
	mapForDS.put("fileWhiteList", fileWhiteList);
	mapForDS.put("fileDescriptionList", fileDescriptionList);
	mapForDS.put("fileModeList", fileModeList);
	mapForDS.put("fileSeparator", fileSeparator);

	if (mrequest.getParameter("hinId") != null)
		mapForDS.put("hinId", mrequest.getParameter("hinId"));
	else
		mapForDS.put("hinId", 0);
	Boolean fileUploaded = false;
	if (fileUploadedList != null && fileUploadedList.size() != 0) {
		fileUploaded = (Boolean) fileUploadedList.get(0);
	}

	mapForDS.put("uploadCount", uploadCount);

	mapForDS.put("flag", flag);
	mapForDS.put("uploadURL", uploadURL);
	mapForDS.put("hin_no", hin_no);
	mapForDS.put("mrequest", mrequest);
	mapForDS.put("visitId", visitId);
	mapForDS.put("medExamId", medExamId);
	map = medicalBoardHandlerService.submitUploadDocumentsMo(mapForDS);
	if (map.get("dataSaved").equals(true)) {
		message = "File Uploaded Sucessfully!!";
	} else {
		message = "Data Cannot be Saved !!";
	}
	map.put("message", message);
	map.put("visitId", visitId);
	map.put("medExamId", medExamId);
	map.put("hospitalId", hospitalId);
	map.put("deptId", deptId);
	map.put("flag", flag);
	String jsp = "";
	jsp = "mb_uploadDocumentdoc";
	// jsp += ".jsp";
	title = "Upload Documents";
	// map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView(jsp, "map", map);
}

public ModelAndView viewUploadDocumentsMo(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	int hospitalId = 0;
	String userName = "";
	String jsp = "";
	String flag = "";
	String hin_no = "";
	int visitId = 0;
	int medExamId = 0;
	int hinId = 0;
	if (request.getParameter("hinId") != null) {
		hinId = Integer.parseInt(request.getParameter("hinId"));
	}
	if (request.getParameter("visitId") != null) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	if (request.getParameter("medExamId") != null) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"));
	}
	HttpSession session = request.getSession();
	int deptId = (Integer) session.getAttribute("deptId");
	hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	if (request.getParameter("flag") != null) {
		flag = request.getParameter("flag").trim();
	}

	Map<String, Object> mapDetails = new HashMap<String, Object>();
	mapDetails.put("visitId", visitId);
	mapDetails.put("hinId", hinId);
	mapDetails.put("medExamId", medExamId);
	mapDetails.put("flag", flag);

	if (session.getAttribute(LOGIN_NAME) != null) {
		userName = (String) session.getAttribute(LOGIN_NAME);
		mapDetails.put("userName", userName);
	}
	String userHome = getServletContext().getRealPath("");
	String fileSeparator = System.getProperty("file.separator");
	String uploadURL = userHome.substring(0, userHome
			.lastIndexOf(fileSeparator))
			+ fileSeparator
			+ "HMSDocumentFolder"
			+ fileSeparator
			+ "upload" + fileSeparator;

	String destuploadURL = getServletContext().getRealPath("/upload/");
	File urlName = new File(getServletContext().getRealPath("/upload/"));
	String getPathName = urlName.getPath();
	mapDetails.put("uploadURL", uploadURL + hin_no);
	mapDetails.put("destUploadURL", destuploadURL + fileSeparator + hin_no);
	map = medicalBoardHandlerService.viewUploadDocumentsMo(mapDetails);
	String[] files = null;
	try {
		File fileDir = new File(destuploadURL + fileSeparator + hin_no);
		if (fileDir.exists()) {
			files = fileDir.list();
		}
	} catch (Exception exc) {
		exc.printStackTrace();

	}
	map.put("visitId", visitId);
	map.put("medExamId", medExamId);
	map.put("hospitalId", hospitalId);
	map.put("deptId", deptId);
	map.put("flag", flag);
	jsp = "mb_uploadDocumentdoc";
	// jsp += ".jsp";
	title = "Upload Documents";
	// map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView(jsp, "map", map);
	// }

}

public ModelAndView viewPatientDocuments(HttpServletRequest request,
		HttpServletResponse response) {

	String filename = null;
	String fileExtension = null;
	HttpSession session = request.getSession();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	Map<String, Object> map = new HashMap<String, Object>();
	if (request.getParameter("filename") != null) {
		filename = (String) request.getParameter("filename");
	}

	if (request.getParameter("fileExt") != null) {
		fileExtension = (String) request.getParameter("fileExt");
	}

	int hinId = 0;
	if (request.getParameter("hinId") != null) {
		hinId = Integer.parseInt(request.getParameter("hinId"));
	}
	int medExamId = 0;
	if (request.getParameter("medExamId") != null) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"));
	}
	int hospitalId = 0;
	if (session.getAttribute(HOSPITAL_ID) != null) {
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);

	}
	String folderName = "";
	if (request.getParameter("folderName") != null) {
		folderName = (String) request.getParameter("folderName");
	}
	dataMap.put("folderName", folderName);
	dataMap.put("filename", filename);
	dataMap.put("fileExtension", fileExtension);
	dataMap.put("hinId", hinId);
	dataMap.put("medExamId", medExamId);
	dataMap.put("hospitalId", hospitalId);
	map = medicalExamHandlerService
			.getUploadDocumentMedicalExamData(dataMap);

	try {
		if (fileExtension == "doc" || fileExtension == "docx") {
			response.setContentType("application/vnd.ms-word");
		} else if (fileExtension == "xls" || fileExtension == "xlsx") {
			response.setContentType("application/vnd.ms-excel");
		} else if (fileExtension == "pdf") {
			response.setContentType("application/pdf");
		} else if (fileExtension.trim().equalsIgnoreCase("txt")) {
			response.setContentType("text/plain");
		} else if (fileExtension.trim().equalsIgnoreCase("tiff")) {
			response.setContentType("image/tiff");
		} else if (fileExtension.trim().equalsIgnoreCase("bmp")) {
			response.setContentType("image/bmp");
		} else if (fileExtension.trim().equalsIgnoreCase("png")) {
			response.setContentType("image/png");
		} else if (fileExtension.trim().equalsIgnoreCase("jpeg")) {
			response.setContentType("image/jpeg");
		} else if (fileExtension.trim().equalsIgnoreCase("wbmp")) {
			response.setContentType("image/vnd.wap.wbmp");
		} else if (fileExtension.trim().equalsIgnoreCase("gif")) {
			response.setContentType("image/gif");
		} else if (fileExtension.trim().equalsIgnoreCase("jpg")) {
			response.setContentType("image/jpg");
		} else {
			response.setContentType("application/octet-stream");
		}
		// set the header and also the Name by which user will be prompted
		// to save
		response.setHeader("Content-Disposition", "attachment;filename="
				+ java.net.URLEncoder
						.encode(filename + "." + fileExtension) + "");

		List<MasMedicalUploadDocument> masMedicalUploadDocumentList = (List<MasMedicalUploadDocument>) map
				.get("masMedicalUploadDocumentList");
		if (masMedicalUploadDocumentList.size() > 0) {
			MasMedicalUploadDocument masMedicalUploadDocument = masMedicalUploadDocumentList
					.get(0);

			byte[] bytes = masMedicalUploadDocument.getDocument();
			response.getOutputStream().flush();
			ServletOutputStream outs = response.getOutputStream();
			outs.write(bytes);
		}

	} catch (IOException ioe) {
		ioe.printStackTrace();
	}

	return null;

	/*
	 * Map<String, Object> map = new HashMap<String, Object>(); String jsp =
	 * ""; Box box = HMSUtil.getBox(request); String filename = null; String
	 * fileExtension = null; MultipartFormDataRequest mrequest = null;
	 * 
	 * if (MultipartFormDataRequest.isMultipartFormData(request)) { try {
	 * mrequest = new MultipartFormDataRequest(request); } catch
	 * (UploadException e) { e.printStackTrace(); } catch (IOException e) {
	 * e.printStackTrace(); } }
	 * 
	 * Map<String, Object> uploadFileMap = new HashMap<String, Object>();
	 * 
	 * String uploadURL = getServletContext().getRealPath("/upload/");
	 * 
	 * box.put("uploadURL", uploadURL); StringTokenizer st1 = new
	 * StringTokenizer(box.getString("filename"), "."); filename =
	 * st1.nextToken(); fileExtension = st1.nextToken(); String hin_no="";
	 * if(box.getString("hin_no")!=null){ hin_no=box.getString("hin_no"); }
	 * box.put("filename", box.getString("filename")); try { if
	 * (fileExtension == "doc" || fileExtension == "docx") {
	 * response.setContentType("application/vnd.ms-word"); } else if
	 * (fileExtension == "xls" || fileExtension == "xlsx") {
	 * response.setContentType("application/vnd.ms-excel"); } else if
	 * (fileExtension == "pdf") {
	 * response.setContentType("application/pdf"); } else if
	 * (fileExtension.trim().equalsIgnoreCase("txt")) {
	 * response.setContentType("text/plain"); } else if
	 * (fileExtension.trim().equalsIgnoreCase("ppt")) {
	 * response.setContentType("application/ppt"); } else if (fileExtension
	 * == "png") { response.setContentType("image/png"); } else if
	 * (fileExtension == "jpeg") { response.setContentType("image/jpeg"); }
	 * else if (fileExtension == "wbmp") {
	 * response.setContentType("image/vnd.wap.wbmp"); } else if
	 * (fileExtension == "gif") { response.setContentType("image/gif"); }
	 * else if (fileExtension == "jpg") {
	 * response.setContentType("image/jpg"); } else {
	 * response.setContentType("application/octet-stream"); } // set the
	 * header and also the Name by which user will be prompted // to save
	 * response.setHeader("Content-Disposition", "attachment;filename=" +
	 * java.net.URLEncoder.encode(box.getString("filename")) + "");
	 * 
	 * // response.setContentType("image/"+fileExtension); //
	 * response.setHeader("Content-Disposition", "attachment; //
	 * filename="+filename+"."+fileExtension);
	 * 
	 * File f = new File(uploadURL + "/" + hin_no+ "/" + filename + "." +
	 * fileExtension); InputStream in = new FileInputStream(f);
	 * response.getOutputStream().flush(); ServletOutputStream outs =
	 * response.getOutputStream();
	 * 
	 * long length = f.length();
	 * 
	 * if (length > Integer.MAX_VALUE) { // File is too large }
	 * 
	 * // Create the byte array to hold the data byte[] bytes = new
	 * byte[(int) length];
	 * 
	 * int offset = 0; int numRead = 0; while (offset < bytes.length &&
	 * (numRead = in.read(bytes, offset, bytes.length - offset)) >= 0) {
	 * offset += numRead; }
	 * 
	 * if (offset < bytes.length) { } outs.write(bytes); in.close();
	 * 
	 * } catch (IOException ioe) { ioe.printStackTrace(); } int visitId = 0;
	 * int medExamId =0; if(request.getParameter("visitId")!=null){ visitId
	 * =Integer.parseInt(request.getParameter("visitId")); }
	 * if(request.getParameter("medExamId")!=null){ medExamId
	 * =Integer.parseInt(request.getParameter("medExamId")); } HttpSession
	 * session = request.getSession(); int deptId = (Integer)
	 * session.getAttribute("deptId"); int hospitalId = (Integer)
	 * session.getAttribute(HOSPITAL_ID); String flag=""; if
	 * (request.getParameter("flag") != null) { flag =
	 * request.getParameter("flag").trim(); }
	 * 
	 * Map<String, Object> mapDetails = new HashMap<String, Object>();
	 * mapDetails.put("visitId", visitId); mapDetails.put("medExamId",
	 * medExamId); mapDetails.put("flag", flag); map =
	 * medicalBoardHandlerService.showUploadViewDocumentJsp(mapDetails);
	 * map.put("visitId", visitId); map.put("medExamId", medExamId);
	 * map.put("hospitalId", hospitalId); map.put("deptId", deptId);
	 * map.put("flag", flag);
	 * 
	 * jsp = "mb_uploadDocumentdoc"; jsp += ".jsp"; map.put("contentJsp",
	 * jsp); map.put("title", title); return new ModelAndView("indexB",
	 * "map", map);
	 */
}

public ModelAndView removeFilesInUploadFolder(HttpServletRequest request,
		HttpServletResponse response) {
	Box box = HMSUtil.getBox(request);
	Map<String, Object> map = new HashMap<String, Object>();
	String jsp = "";

	String uploadURL = getServletContext().getRealPath("/upload/");

	box.put("uploadURL", uploadURL);

	File f = new File(uploadURL);

	if (f.listFiles().length > 0) {
		File fd[] = f.listFiles();

		for (int i = 0; i < fd.length; i++) {
			if (fd[i].isFile())
				fd[i].delete();
		}
	}
	if (f.listFiles().length < 1) {
		if (!f.canWrite()) {
		}
	}

	jsp = "opdViewPatientDoc";
	jsp += ".jsp";
	title = "Import CD";
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("indexB", "map", map);
}

public ModelAndView showMedBoardMAForm16(HttpServletRequest request,
		HttpServletResponse response) {
	String jsp = "";
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	Box box = HMSUtil.getBox(request);
	Map map = new HashMap();
	int visitId = 0;
	int medExamId = 0;
	String jspheading = null;
	if (request.getParameter("visitId") != null) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	if (request.getParameter("medExamType") != null) {
		jspheading = request.getParameter("medExamType");
	}
	if (request.getParameter("medExamId") != null) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"));
	}
	HttpSession session = request.getSession();
	int deptId = (Integer) session.getAttribute("deptId");
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId = (Integer) session.getAttribute("hospitalId");
	}
	mapForDS.put("hospitalId", hospitalId);
	mapForDS.put("visitId", visitId);
	mapForDS.put("deptId", deptId);
	mapForDS.put("medExamId", medExamId);
	mapForDS.put("medExamType", jspheading);
	map = medicalBoardHandlerService
			.showInitialMedicalBoardMedExamJsp(mapForDS);
	jsp = MB_MA_FORM16;
	jsp += ".jsp";
	map.put("visitId", visitId);
	map.put("jspheading", jspheading);
	map.put("contentJsp", jsp);
	return new ModelAndView("indexB", "map", map);
}

public ModelAndView showCommandOfficerForm16(HttpServletRequest request,
		HttpServletResponse response) {
	String jsp = "";
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	Box box = HMSUtil.getBox(request);
	Map map = new HashMap();
	int visitId = 0;
	int medExamId = 0;
	String jspheading = null;
	if (request.getParameter("visitId") != null) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	if (request.getParameter("medExamType") != null) {
		jspheading = request.getParameter("medExamType");
	}
	if (request.getParameter("medExamId") != null) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"));
	}
	HttpSession session = request.getSession();
	int deptId = (Integer) session.getAttribute("deptId");
	int empId = (Integer) session.getAttribute("empId");
	mapForDS.put("visitId", visitId);
	mapForDS.put("deptId", deptId);
	mapForDS.put("empId", empId);
	mapForDS.put("medExamId", medExamId);
	map = medicalBoardHandlerService.showMBCommandingOfficerJsp(mapForDS);
	jsp = MB_COMMAND_OFFICER_FORM16;
	jsp += ".jsp";
	map.put("visitId", visitId);
	map.put("jspheading", jspheading);
	map.put("contentJsp", jsp);
	return new ModelAndView("indexB", "map", map);
}

public ModelAndView showConfirmingAuthorityForm16(
		HttpServletRequest request, HttpServletResponse response) {
	String jsp = "";
	Map<String, Object> map = new HashMap<String, Object>();
	jsp = MB_CONFIRM_AUTH_FORM16;
	jsp += ".jsp";
	map.put("contentJsp", jsp);
	return new ModelAndView("index", "map", map);
}
public ModelAndView showMisMedicalBoardReport(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> mapofds = new HashMap<String, Object>();
	Date fromDate = new Date();
	if (request.getParameter(FROM_DATE) != null && !(request.getParameter(FROM_DATE).equals(""))) {
		fromDate = HMSUtil.convertStringTypeDateToDateType(request.getParameter(FROM_DATE));
		mapofds.put("fromDate", fromDate);
	}
	Date toDate = new Date();
	if (request.getParameter(TO_DATE) != null && !(request.getParameter(TO_DATE).equals(""))) {
		toDate = HMSUtil.convertStringTypeDateToDateType(request.getParameter(TO_DATE));
		mapofds.put("toDate", toDate);
	}
	map = medicalBoardHandlerService.showMisMedicalBoardReport(mapofds);
	String jsp = "";
	jsp = "mb_MISMBReportData.jsp";
	title = "Medical Board Proceeding Search";
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("indexB", "map", map);
}
public ModelAndView showMisMedBoardStatics(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> mapofds = new HashMap<String, Object>();
	Map<String, Object> map = new HashMap<String, Object>();
	String jsp = "";
	String title = "";
	String CategoryId = null;
	String AgeFrom = null;
	String to = null;
	String LifeStyleFactor = null;
	String weight = null;
	Float fromTotalService=null;
	Float toTotalService=null;
	String fromServUnit=null;
	String toServUnit=null;
	String serviceNo=null;
	String gender = null;
	int unitId = 0;
	int commandid = 0;
	int tradeId = 0;
	int disabilityId = 0;
	int disabilityGroupId = 0;
	int bloodid = 0;
	int fromrankId=0;
	int Interval = 0;
	int toRankId=0;
	Date DateAson = new Date();
	Date IntervalFrom = new Date();
	Date IntervalTo = new Date();
	HttpSession session = request.getSession();
	int commandId = (Integer) session.getAttribute("commandId");
	mapofds.put("commandId", commandId);
	int hospitalId = (Integer) session.getAttribute("hospitalId");
	mapofds.put("hospitalId", hospitalId);

	String icdDiag = "";
	if (request.getParameter("icd") != null
			&& !(request.getParameter("icd").equals(""))) {
		String str = request.getParameter("icd");
		String systemDiagnosis = "";
		int lastIndex = str.indexOf("[");
		if (lastIndex > 0) {
			systemDiagnosis = str.substring(0, lastIndex);
			mapofds.put("systemDiagnosis", systemDiagnosis);
			icdDiag = systemDiagnosis;
		} else {
			systemDiagnosis = str;
		}
		int index1 = str.lastIndexOf("[");
		int index2 = str.lastIndexOf("]");
		int icdId = 0;
		// int icdId =Integer.parseInt(str.substring((index1+1),index2));
		try {
			if (str != null && !str.equals("")) {
				icdId = Integer.parseInt(str
						.substring((index1 + 1), index2));
			}
		} catch (NumberFormatException e) {

			e.printStackTrace();
		}
		mapofds.put("icdId", icdId);
	}
	Date fromDate = new Date();
	if (request.getParameter(FROM_DATE) != null && !(request.getParameter(FROM_DATE).equals(""))) {
		fromDate = HMSUtil.convertStringTypeDateToDateType(request.getParameter(FROM_DATE));
		mapofds.put("fromDate", fromDate);
	}
	Date toDate = new Date();
	if (request.getParameter(TO_DATE) != null && !(request.getParameter(TO_DATE).equals(""))) {
		toDate = HMSUtil.convertStringTypeDateToDateType(request.getParameter(TO_DATE));
		mapofds.put("toDate", toDate);
	}
	if (request.getParameter("fromrankId") != null && !(request.getParameter("fromrankId").equals(""))) {
		fromrankId = Integer.parseInt(request.getParameter("fromrankId"));
		mapofds.put("fromrankId", fromrankId);
	}
	if (request.getParameter("toRankId") != null && !(request.getParameter("toRankId").equals(""))) {
		toRankId = Integer.parseInt(request.getParameter("toRankId"));
		mapofds.put("toRankId", toRankId);
	}
	
	if (request.getParameter("AgeFrom") != null
			&& !(request.getParameter("AgeFrom").equals(""))) {
		AgeFrom = (request.getParameter("AgeFrom"));
		
		mapofds.put("AgeFrom", AgeFrom);
	}if (request.getParameter(TO) != null
			&& !(request.getParameter(TO).equals(""))) {
		to = (request
				.getParameter(TO));
		mapofds.put("to", to);
	}
	if (request.getParameter("fromServ") != null && !(request.getParameter("fromServ").equals(""))) {
		fromTotalService = Float.parseFloat(request.getParameter("fromServ"));
		mapofds.put("fromTotalService", fromTotalService);
	}
	if (request.getParameter("toServ") != null && !(request.getParameter("toServ").equals(""))) {
		toTotalService = Float.parseFloat(request.getParameter("toServ"));
		mapofds.put("toTotalService", toTotalService);
	}
	if (request.getParameter("fromServUnit") != null && !(request.getParameter("fromServUnit").equals(""))) {
		fromServUnit = (request.getParameter("fromServUnit"));
		mapofds.put("fromServUnit", fromServUnit);
	}
	if (request.getParameter("toServUnit") != null && !(request.getParameter("toServUnit").equals(""))) {
		toServUnit = (request.getParameter("toServUnit"));
		mapofds.put("toServUnit", toServUnit);
	}
	int serviceTypeId = 0;
	if (request.getParameter(SERVICE_TYPE_ID) != null && !(request.getParameter(SERVICE_TYPE_ID).equals(""))) {
		serviceTypeId = Integer.parseInt(request.getParameter(SERVICE_TYPE_ID));
		mapofds.put("serviceTypeId", serviceTypeId);
	}
	int serviceStatusId = 0;
	if (request.getParameter(SERVICE_STATUS_ID) != null && !(request.getParameter(SERVICE_STATUS_ID).equals(""))) {
		serviceStatusId = Integer.parseInt(request.getParameter(SERVICE_STATUS_ID));
		mapofds.put("serviceStatusId", serviceStatusId);
	}
	int rankCategoryId = 0;
	if (request.getParameter(RANK_CATEGORY_ID) != null && !(request.getParameter(RANK_CATEGORY_ID).equals(""))) {
		rankCategoryId = Integer.parseInt(request.getParameter(RANK_CATEGORY_ID));
		mapofds.put("rankCategoryId", rankCategoryId);
	}
	if (request.getParameter(TRADE_ID) != null && !(request.getParameter(TRADE_ID).equals(""))) {
		tradeId = Integer.parseInt(request.getParameter(TRADE_ID));
		mapofds.put("tradeId", tradeId);
	}
	if (request.getParameter("CategoryId") != null && !(request.getParameter("CategoryId").equals(""))) {
		CategoryId = (request.getParameter("CategoryId"));
		mapofds.put("CategoryId", CategoryId);
	}
	if (request.getParameter("Gender") != null && !(request.getParameter("Gender").equals(""))) {
		gender = (request.getParameter("Gender"));
		mapofds.put("Gender", gender);
	}
	if (request.getParameter(UNIT_ID) != null && !(request.getParameter(UNIT_ID).equals(""))) {
		unitId = Integer.parseInt(request.getParameter(UNIT_ID));
		mapofds.put("unitId", unitId);
	}
	
	if (request.getParameter(COMMAND) != null && !(request.getParameter(COMMAND).equals(""))) {
		commandid = Integer.parseInt(request.getParameter(COMMAND));
		mapofds.put("commandid", commandid);
	}
	int sectionId = 0;
	if (request.getParameter(SECTION_ID) != null && !(request.getParameter(SECTION_ID).equals(""))) {
		sectionId = Integer.parseInt(request.getParameter(SECTION_ID));
		mapofds.put("sectionId", sectionId);
	}
	if(request.getParameter(SERVICE_NO) != null){
		serviceNo = request.getParameter(SERVICE_NO);
		mapofds.put("serviceNo", serviceNo);
	}

	String overWeight = "";
	if(request.getParameter("overWeight") != null){
		overWeight = request.getParameter("overWeight");
		 mapofds.put("overWeight", overWeight);
	}
	String obesity = "";
	if(request.getParameter("obesity") != null){
		obesity = request.getParameter("obesity");
		 mapofds.put("obesity", obesity);
	}
	String overDue = "";
	if(request.getParameter("overdue") != null){
		overDue = request.getParameter("overdue");
		 mapofds.put("overDue", overDue);
	}
	
	String rejectStatus = "";
	if(request.getParameter("rejection") != null){
	 rejectStatus = request.getParameter("rejection");
	 mapofds.put("rejectStatus", rejectStatus);
	}
	if (request.getParameter("disabilityId") != null
			&& !(request.getParameter("disabilityId").equals(""))) {
		disabilityId = Integer.parseInt(request
				.getParameter("disabilityId"));
		mapofds.put("disabilityId", disabilityId);
	}
	if (request.getParameter("disabilityGroupId") != null
			&& !(request.getParameter("disabilityGroupId").equals(""))) {
		disabilityGroupId = Integer.parseInt(request
				.getParameter("disabilityGroupId"));
		mapofds.put("disabilityGroupId", disabilityGroupId);
	}
	if (request.getParameter("DateAson") != null
			&& !(request.getParameter("DateAson").equals(""))) {
		DateAson = HMSUtil.dateFormatterDDMMYYYY(request
				.getParameter("DateAson"));
		mapofds.put("DateAson", DateAson);
	}
	
	/*
	 * if (request.getParameter("group1") != null &&
	 * !(request.getParameter("group1").equals(""))) { group1 = (request
	 * .getParameter("group1")); mapofds.put("group1", group1); }
	 */
	if (request.getParameter(WEIGHT) != null
			&& !(request.getParameter(WEIGHT).equals(""))) {
		weight = (request.getParameter(WEIGHT));
		mapofds.put("weight", weight);
	}
	if (request.getParameter("LifeStyleFactor") != null
			&& !(request.getParameter("LifeStyleFactor").equals(""))) {
		LifeStyleFactor = (request.getParameter("LifeStyleFactor"));
		mapofds.put("LifeStyleFactor", LifeStyleFactor);
	}
	if (request.getParameter(BLOOD_GROUP_ID) != null
			&& !(request.getParameter(BLOOD_GROUP_ID).equals(""))) {
		bloodid = Integer.parseInt(request.getParameter(BLOOD_GROUP_ID));
		mapofds.put("bloodid", bloodid);
	}
	String searchtype = "search";
	if (request.getParameter("searchtype") != null
			&& !(request.getParameter("searchtype").equals(""))) {
		searchtype = (request.getParameter("searchtype"));
		mapofds.put("searchtype", searchtype);
	}
	if (request.getParameter("IntervalTo") != null
			&& !(request.getParameter("IntervalTo").equals(""))) {
		IntervalTo = HMSUtil.dateFormatterDDMMYYYY(request
				.getParameter("IntervalTo"));
		mapofds.put("IntervalTo", IntervalTo);
	}
	if (request.getParameter("IntervalFrom") != null
			&& !(request.getParameter("IntervalFrom").equals(""))) {
		IntervalFrom = HMSUtil.dateFormatterDDMMYYYY(request
				.getParameter("IntervalFrom"));
		mapofds.put("IntervalFrom", IntervalFrom);
	}
	if (request.getParameter("Interval") != null
			&& !(request.getParameter("Interval").equals(""))) {
		Interval = Integer.parseInt(request.getParameter("Interval"));
		mapofds.put("Interval", Interval);
	}
	map = medicalBoardHandlerService.showMisMedBoardStatics(mapofds);
	/*
	 * if(mapofds.get("searchtype")!=null &&
	 * mapofds.get("searchtype").equals("graph")) {
	 * HMSUtil.generateReport("Clinical_Sheet_Report", map, (Connection)
	 * map.get("conn"), response,getServletContext()); }
	 * if(mapofds.get("searchtype")!=null &&
	 * mapofds.get("searchtype").equals("graphInjsp")) { ChartRenderingInfo
	 * info = new ChartRenderingInfo(); try { OutputStream out =
	 * response.getOutputStream(); response.setContentType("image/png");
	 * ChartUtilities
	 * .writeChartAsPNG(out,(JFreeChart)map.get("chart"),600,500,info); }
	 * catch (IOException e) {
	 * 
	 * e.printStackTrace(); } }
	 */
	jsp = "mb_MISMBReportDataStatics.jsp";
	title = "Medical Board Proceeding Search";
	map.put("contentJsp", jsp);
	map.put("title", title);
	map.put("icdDiag", icdDiag);
//	map.put("commandId", commandId);
	map.put("searchtype", searchtype);
	return new ModelAndView("indexB", "map", map);
}

public ModelAndView showMISMedicalBoardReportGraph(
		HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	int hospitalId = 0;
	HttpSession session = request.getSession();
	if (session.getAttribute(HOSPITAL_ID) != null) {
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	}
	dataMap.put("hospitalId", hospitalId);
	String year = "";
	if (request.getParameter("year") != null
			&& !request.getParameter("year").equals("0")) {
		year = request.getParameter("year");
		String fromYear = year.substring(0, 4);
		String toYear = year.substring(5);
		dataMap.put("fromYear", fromYear);
		dataMap.put("toYear", toYear);
	}

	map = medicalBoardHandlerService
			.showMISMedicalBoardReportGraph(dataMap);
	List<Object[]> medicalExamRegisterList = new ArrayList<Object[]>();
	medicalExamRegisterList = (List<Object[]>) map
			.get("medicalExamRegisterList");
	String ENCODING = "ISO-8859-1";
	try {

		SAXBuilder builder = new SAXBuilder();
		File xmlFile = new File(getServletContext().getRealPath(
				"/jsp/chart/amcolumn_medical_board_settings.xml"));

		Document doc = (Document) builder.build(xmlFile);
		Element rootNode = doc.getRootElement();

		Element graphs = rootNode.getChild("graphs");

		int graphsChildsNo = graphs.getChildren().size();

		if (graphsChildsNo > 0) {
			for (int i = 0; i < graphsChildsNo; i++) {
				graphs.removeChild("graph");
			}
		}
		int j = 0;
		for (Object[] objVal : medicalExamRegisterList) {
			Element graph = new Element("graph");
			graph.setAttribute("id", "" + j);
			graphs.addContent(graph);
			String qtrVal = "" + objVal[4] + "0-"
					+ (Integer.parseInt("" + objVal[4]) + 1) + "0";
			Element title = new Element("title").setText(qtrVal);
			graph.addContent(title);
			j++;
		}
		XMLOutputter xmlOutput = new XMLOutputter();
		xmlOutput.setFormat(Format.getPrettyFormat());
		xmlOutput.output(doc, new FileWriter(getServletContext()
				.getRealPath(
						"/jsp/chart/amcolumn_medical_board_settings.xml")));
		OutputStreamWriter out = new OutputStreamWriter(
				new FileOutputStream(getServletContext().getRealPath(
						"/jsp/chart/amcolumn_medical_board_data.xml")));

		out.write("<?xml version=\"1.0\" encoding=\"" + ENCODING + "\"?>");
		out.write("<chart>");
		int i = 0;
		out.write("<series>");
		for (int k = 1; k <= 4; k++) {
			String qtr = "";
			qtr = "Qtr" + k;
			out.write("<value xid='" + i + "'>" + qtr + "</value>");
			i++;
		}
		out.write("</series>");
		out.write("<graphs>");

		int k = 0;

		for (Object[] objVal : medicalExamRegisterList) {
			out.write("<graph gid='" + k + "'>");
			out.write("<value xid='0' >" + objVal[0] + "</value>");
			out.write("<value xid='1' >" + objVal[1] + "</value>");
			out.write("<value xid='2' >" + objVal[2] + "</value>");
			out.write("<value xid='3' >" + objVal[3] + "</value>");
			out.write("</graph>");
			k++;
		}
		out.write("</graphs>");
		out.write("</chart>");
		out.close();
	} catch (RuntimeException e) {
		e.printStackTrace();
	} catch (Exception e) {
		e.printStackTrace();
	}
	String jsp = "medicalBoardRegisterGraph";

	return new ModelAndView(jsp, "map", map);
}

public ModelAndView showViewClinicalSummaryJsp(HttpServletRequest request,
		HttpServletResponse response) {

	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	int medExamId = 0;
	int visitId = 0;
	int hospitalId = 0;
	if (request.getParameter("medExamId") != null) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"));
	}
	if (request.getParameter("visitId") != null) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	HttpSession session = request.getSession();
	if (session.getAttribute(HOSPITAL_ID) != null) {
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	}
	dataMap.put("hospitalId", hospitalId);
	dataMap.put("visitId", visitId);
	dataMap.put("medExamId", medExamId);
	map = medicalBoardHandlerService.showMedicalExamList(dataMap);
	String jsp = "mb_ViewClinicalSummary";
	return new ModelAndView(jsp, "map", map);

}

public ModelAndView showViewClinicalSummary16Jsp(
		HttpServletRequest request, HttpServletResponse response) {

	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	int medExamId = 0;
	int visitId = 0;
	int hospitalId = 0;
	if (request.getParameter("medExamId") != null) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"));
	}
	if (request.getParameter("visitId") != null) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	HttpSession session = request.getSession();
	if (session.getAttribute(HOSPITAL_ID) != null) {
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	}
	dataMap.put("hospitalId", hospitalId);
	dataMap.put("visitId", visitId);
	dataMap.put("medExamId", medExamId);
	map = medicalBoardHandlerService.getCommandingStatementDetails(dataMap);
	String jsp = "mb_ViewClinicalSummary16";
	return new ModelAndView(jsp, "map", map);
}

public ModelAndView validateMBCommandingOfficer(HttpServletRequest request,
		HttpServletResponse response) {
	String jsp = "";
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	Box box = HMSUtil.getBox(request);
	Map<String, Object> map = new HashMap<String, Object>();
	int visitId = 0;
	int medExamId = 0;
	String jspheading = null;

	if (request.getParameter("visitId") != null
			&& !request.getParameter("visitId").equals("0")) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	if (request.getParameter("medExamType") != null
			&& !request.getParameter("medExamType").equals("")) {
		jspheading = request.getParameter("medExamType");
	}
	if (request.getParameter("medExamId") != null
			&& !request.getParameter("visitId").equals("0")) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"));
	}
	MasMedicalExaminationReportOnEntry masMedicalBoardProceedings = new MasMedicalExaminationReportOnEntry();
	masMedicalBoardProceedings = medicalBoardHandlerService
			.loadMedicalExamObj(medExamId);
	if (request.getParameter(UNIT_DATE) != null
			&& !request.getParameter(UNIT_DATE).equals("")) {
		masMedicalBoardProceedings.setDatetheIndividual(HMSUtil
				.convertStringTypeDateToDateType(request
						.getParameter(UNIT_DATE)));
	}
	if (request.getParameter(LOW_MED_CAT) != null
			&& !request.getParameter(LOW_MED_CAT).equals("")) {
		masMedicalBoardProceedings.setLowMedCat(request
				.getParameter(LOW_MED_CAT));
	}
	if (request.getParameter(DUTY_EXCUSED) != null
			&& !request.getParameter(DUTY_EXCUSED).equals("")) {
		masMedicalBoardProceedings.setDutyExcused(request
				.getParameter(DUTY_EXCUSED));
	}
	if (request.getParameter(NATURE_DUTIES) != null
			&& !request.getParameter(NATURE_DUTIES).equals("")) {
		masMedicalBoardProceedings.setNatureDuties(request
				.getParameter(NATURE_DUTIES));
	}
	if (request.getParameter(SEVERE_EXCEPTIONAL) != null
			&& !request.getParameter(SEVERE_EXCEPTIONAL).equals("")) {
		masMedicalBoardProceedings.setSevereExcepStress(request
				.getParameter(SEVERE_EXCEPTIONAL));
	}
	if (request.getParameter(SINCE_WHEN) != null
			&& !request.getParameter(SINCE_WHEN).equals("")) {
		masMedicalBoardProceedings.setSinceWhen(HMSUtil
				.convertStringTypeDateToDateType(request
						.getParameter(SINCE_WHEN)));
	}
	if (request.getParameter(SINCE_ON) != null
			&& !request.getParameter(SINCE_ON).equals("")) {
		masMedicalBoardProceedings.setSinceOn(request
				.getParameter(SINCE_ON));
	}
	if (request.getParameter(WITH_FAMILY) != null
			&& !request.getParameter(WITH_FAMILY).equals("")) {
		masMedicalBoardProceedings.setFamilyLiving(request
				.getParameter(WITH_FAMILY));
	}
	if (request.getParameter(SINCE_FAMILY) != null
			&& !request.getParameter(SINCE_FAMILY).equals("")) {
		masMedicalBoardProceedings.setSinceWhen1(HMSUtil
				.convertStringTypeDateToDateType(request
						.getParameter(SINCE_FAMILY)));
	}
	if (request.getParameter(SINCE_IN) != null
			&& !request.getParameter(SINCE_ON).equals("")) {
		masMedicalBoardProceedings.setSinceIn(request
				.getParameter(SINCE_IN));
	}
	if (request.getParameter(GOV_ACCOMODATE) != null
			&& !request.getParameter(GOV_ACCOMODATE).equals("")) {
		masMedicalBoardProceedings.setFamilyLivingIn(request
				.getParameter(GOV_ACCOMODATE));
	}
	if (request.getParameter(UNIT_LINES) != null
			&& !request.getParameter(UNIT_LINES).equals("")) {
		masMedicalBoardProceedings.setLivingUnitLines(request
				.getParameter(UNIT_LINES));
	}
	if (request.getParameter(LEAVE_DATE) != null
			&& !request.getParameter(LEAVE_DATE).equals("")) {
		masMedicalBoardProceedings.setDatesoflastleave(HMSUtil
				.convertStringTypeDateToDateType(request
						.getParameter(LEAVE_DATE)));
	}
	if (request.getParameter(SPENT) != null
			&& !request.getParameter(SPENT).equals("")) {
		masMedicalBoardProceedings.setSpent(request.getParameter(SPENT));
	}
	if (request.getParameter(DISABILTY_INFECTION) != null
			&& !request.getParameter(DISABILTY_INFECTION).equals("")) {
		masMedicalBoardProceedings.setInfectionDisability(request
				.getParameter(DISABILTY_INFECTION));
	}
	if (request.getParameter(OTHER_CASE_UNIT) != null
			&& !request.getParameter(OTHER_CASE_UNIT).equals("")) {
		masMedicalBoardProceedings.setDisabilityOtherCase(request
				.getParameter(OTHER_CASE_UNIT));
	}
	if (request.getParameter(SURROUNDING_AREAS) != null
			&& !request.getParameter(SURROUNDING_AREAS).equals("")) {
		masMedicalBoardProceedings.setDiseaseSurroundingAreas(request
				.getParameter(SURROUNDING_AREAS));
	}
	if (request.getParameter(PREVENT_MEASURES) != null
			&& !request.getParameter(PREVENT_MEASURES).equals("")) {
		masMedicalBoardProceedings.setPreventMeasure(request
				.getParameter(PREVENT_MEASURES));
	}
	if (request.getParameter(TRANMITTED_DISEASE) != null
			&& !request.getParameter(TRANMITTED_DISEASE).equals("")) {
		masMedicalBoardProceedings.setTranmittedDisease(request
				.getParameter(TRANMITTED_DISEASE));
	}
	if (request.getParameter(CONTACTED_DATE) != null
			&& !request.getParameter(CONTACTED_DATE).equals("")) {
		masMedicalBoardProceedings.setTranmittedDate(HMSUtil
				.convertStringTypeDateToDateType(request
						.getParameter(CONTACTED_DATE)));
	}
	if (request.getParameter(CONTACTED_PLACE) != null
			&& !request.getParameter(CONTACTED_PLACE).equals("")) {
		masMedicalBoardProceedings.setPlace(request
				.getParameter(CONTACTED_PLACE));
	}
	if (request.getParameter(HOSPITAL_STD) != null
			&& !request.getParameter(HOSPITAL_STD).equals("")) {
		masMedicalBoardProceedings.setHospitalStdCenter(request
				.getParameter(HOSPITAL_STD));
	}
	if (request.getParameter(TREATMENT_COMPLETED) != null
			&& !request.getParameter(TREATMENT_COMPLETED).equals("")) {
		masMedicalBoardProceedings.setFollowup_treatment(request
				.getParameter(TREATMENT_COMPLETED));
	}
	if (request.getParameter(FTC_DATE) != null
			&& !request.getParameter(FTC_DATE).equals("")) {
		masMedicalBoardProceedings.setFlcDate(HMSUtil
				.convertStringTypeDateToDateType(request
						.getParameter(FTC_DATE)));
	}
	if (request.getParameter(RESPONSIBLE_FACTORS) != null
			&& !request.getParameter(RESPONSIBLE_FACTORS).equals("")) {
		masMedicalBoardProceedings.setResponsiblityFactor(request
				.getParameter(RESPONSIBLE_FACTORS));
	}
	if (request.getParameter(COMMAND_RANK) != null
			&& !request.getParameter(COMMAND_RANK).equals("")) {
		masMedicalBoardProceedings.setComdOfficerRamk(request
				.getParameter(COMMAND_RANK));
	}
	if (request.getParameter(COMMAND_NAME) != null
			&& !request.getParameter(COMMAND_NAME).equals("")) {
		masMedicalBoardProceedings.setCommandingOfficer(request
				.getParameter(COMMAND_NAME));
	}
	if (request.getParameter(SIGNED_BY) != null
			&& !request.getParameter(SIGNED_BY).equals("")) {
		masMedicalBoardProceedings.setSignedBy(request
				.getParameter(SIGNED_BY));
	}
	if (request.getParameter(COMMAND_UNIT) != null
			&& !request.getParameter(COMMAND_UNIT).equals("")) {
		masMedicalBoardProceedings.setComdOfficerUnit(request
				.getParameter(COMMAND_UNIT));
	}
	int count = 0;
	if (request.getParameter("hdb3") != null
			&& !request.getParameter("hdb3").equals("")) {
		count = Integer.parseInt(request.getParameter("hdb3"));
	}
	List<MasMedicalExaminationDetail> masMedicalExaminationDetailList = new ArrayList<MasMedicalExaminationDetail>();
	for (int i = 1; i <= count; i++) {
		MasMedicalExaminationDetail masMedicalExaminationDetail = new MasMedicalExaminationDetail();
		String str = "";
		if (request.getParameter("disabilityCommand" + i) != null) {
			str = request.getParameter("disabilityCommand" + i);
		} else {
			str = "";
		}
		if (str != "") {
			String disabilityCommand = "";
			int lastIndex = str.indexOf("[");
			if (lastIndex > 0) {
				disabilityCommand = str.substring(0, lastIndex);
			} else {
				disabilityCommand = str;
			}
			int index1 = str.lastIndexOf("[");
			int index2 = str.lastIndexOf("]");
			int icdId = 0;
			// int icdId
			// =Integer.parseInt(str.substring((index1+1),index2));
			try {
				if (str != null && !str.equals("")) {
					icdId = Integer.parseInt(str.substring(
							(index1 + 1), index2));
				}
			} catch (NumberFormatException e) {

				e.printStackTrace();
			}
			
			 if(icdId>0){
				 MasIcd masIcd=new MasIcd();
				 masIcd.setId(icdId);
				 masMedicalExaminationDetail.setMasIcd(masIcd); 
			}
			masMedicalExaminationDetail.setIllness(disabilityCommand);
			if (request.getParameter("lowMedCat" + i) != null
					&& !request.getParameter("lowMedCat" + i).equals("")) {
				int medicalCatId = Integer.parseInt(request
						.getParameter("lowMedCat" + i));
				Category category = new Category();
				category.setCategoryid(medicalCatId);
				masMedicalExaminationDetail.setCategory(category);
			}
			if (request.getParameter("sinceDate" + i) != null
					&& !request.getParameter("sinceDate" + i).equals("")) {
				masMedicalExaminationDetail.setDisabilitydate(HMSUtil
						.convertStringTypeDateToDateType(request
								.getParameter("sinceDate" + i)));
			}
			if (request.getParameter("sinceYear" + i) != null
					&& !request.getParameter("sinceYear" + i).equals("")) {
				masMedicalExaminationDetail.setLMCYears(request
						.getParameter("sinceYear" + i));
			}
			if (request.getParameter("sinceMonth" + i) != null
					&& !request.getParameter("sinceMonth" + i).equals("")) {
				masMedicalExaminationDetail.setLMCMonth(request
						.getParameter("sinceMonth" + i));
			}
			masMedicalExaminationDetail.setPrincipal(disabilityCommand);
			masMedicalExaminationDetail.setParticular("DisabilityDetails");

			MasMedicalExaminationReportOnEntry masMedicalExaminationReportOnEntry = new MasMedicalExaminationReportOnEntry();
			masMedicalExaminationReportOnEntry.setId(medExamId);
			masMedicalExaminationDetail
					.setMasMedicalReport(masMedicalExaminationReportOnEntry);
			masMedicalExaminationDetailList
					.add(masMedicalExaminationDetail);
		}
	}
	Map<String, Object> utilMap = new HashMap<String, Object>();
	utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();

	String date = (String) utilMap.get("currentDate");
	masMedicalBoardProceedings.setCommanddate(HMSUtil
			.convertStringTypeDateToDateType(date));
	masMedicalBoardProceedings.setStatus("cd");
	HttpSession session = request.getSession();
	int deptId = (Integer) session.getAttribute("deptId");
	int hospitalId = 0;
	if (session.getAttribute(HOSPITAL_ID) != null) {
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	}
	mapForDS.put("hospitalId", hospitalId);
	mapForDS.put("visitId", visitId);
	mapForDS.put("deptId", deptId);
	mapForDS.put("medExamId", medExamId);
	mapForDS.put("masMedicalExaminationDetailList",
			masMedicalExaminationDetailList);
	mapForDS.put("masMedicalBoardProceedings", masMedicalBoardProceedings);
	synchronized (session) {
		map = medicalBoardHandlerService
				.validateMBCommandingOfficer(mapForDS);
	}
	boolean falg = false;
	if (map.get("falg") != null) {
		falg = (Boolean) map.get("falg");
	}
	String message = "";
	if (falg) {
		message = "Commanding Authority validated !Print Report";
	} else {
		message = "Some Problem Occurred.";
	}

	// map =
	// medicalBoardHandlerService.showMBCommandOfficerWaitList(hospitalId);
	map.put("printReport", "yes");
	map.put("medExamId", medExamId);
	map.put("visitId", visitId);
	map.put("medicalType", request.getParameter("medicalType"));
	map.put("medicalExamType", request.getParameter("medicalExamType"));
	jsp = MEDICAL_BOARD_EXAM_MSG;
	jsp += ".jsp";
	title = "commanding Officer Waiting List";
	map.put("message", message);
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("indexB", "map", map);
}

public ModelAndView validateMBOpinion(HttpServletRequest request,
		HttpServletResponse response) {
	String jsp = "";
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	Box box = HMSUtil.getBox(request);
	Map<String, Object> map = new HashMap<String, Object>();
	int visitId = 0;
	int medExamId = 0;
	String jspheading = null;

	if (request.getParameter("visitId") != null
			&& !request.getParameter("visitId").equals("0")) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	if (request.getParameter("medExamType") != null
			&& !request.getParameter("medExamType").equals("")) {
		jspheading = request.getParameter("medExamType");
	}
	if (request.getParameter("medExamId") != null
			&& !request.getParameter("visitId").equals("0")) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"));
	}
	MasMedicalExaminationReportOnEntry masMedicalBoardProceedings = new MasMedicalExaminationReportOnEntry();
	masMedicalBoardProceedings = medicalBoardHandlerService
			.loadMedicalExamObj(medExamId);
	if (request.getParameter(RELEVENT_FAMILY_HISTORY) != null
			&& !request.getParameter(RELEVENT_FAMILY_HISTORY).equals("")) {
		masMedicalBoardProceedings.setRelevantFamilyHistory(request
				.getParameter(RELEVENT_FAMILY_HISTORY));
	}
	if (request.getParameter(SPECIALIST_REPORT) != null
			&& !request.getParameter(SPECIALIST_REPORT).equals("")) {
		masMedicalBoardProceedings.setSpecialistReport(request
				.getParameter(SPECIALIST_REPORT));
	}
	if (request.getParameter(TREATMENT) != null
			&& !request.getParameter(TREATMENT).equals("")) {
		masMedicalBoardProceedings.setTreatment(request
				.getParameter(TREATMENT));
	}
	if (request.getParameter("presentConditions") != null
			&& !request.getParameter("presentConditions").equals("")) {
		masMedicalBoardProceedings.setPresentCondition(request
				.getParameter("presentConditions"));
	}
	if (request.getParameter(EXIST_DISABILITY) != null
			&& !request.getParameter(EXIST_DISABILITY).equals("")) {
		masMedicalBoardProceedings.setDisabilitybefore(request
				.getParameter(EXIST_DISABILITY));
	}
	if (request.getParameter(ROUTINE_MED_EXAM) != null
			&& !request.getParameter(ROUTINE_MED_EXAM).equals("")) {
		masMedicalBoardProceedings.setMedExamCarryTime(request
				.getParameter(ROUTINE_MED_EXAM));
	}
	if (request.getParameter(PERSIST_MATERIAL_PERIOD) != null
			&& !request.getParameter(PERSIST_MATERIAL_PERIOD).equals("")) {
		masMedicalBoardProceedings.setDisableAggravPersist(request
				.getParameter(PERSIST_MATERIAL_PERIOD));
	}
	if (request.getParameter(AGGRA_MATERIAL_PERIOD) != null
			&& !request.getParameter(AGGRA_MATERIAL_PERIOD).equals("")) {
		masMedicalBoardProceedings.setAggravMaterialPeriod(request
				.getParameter(AGGRA_MATERIAL_PERIOD));
	}
	if (request.getParameter(INDIVIDUAL_MISCONDUCT) != null
			&& !request.getParameter(INDIVIDUAL_MISCONDUCT).equals("")) {
		masMedicalBoardProceedings.setIndividualMisconduct(request
				.getParameter(INDIVIDUAL_MISCONDUCT));
	}
	if (request.getParameter(IN_WAY) != null
			&& !request.getParameter(IN_WAY).equals("")) {
		masMedicalBoardProceedings.setInWay(request.getParameter(IN_WAY));
	}
	if (request.getParameter(AGGRAVATED_MISCONDUCT) != null
			&& !request.getParameter(AGGRAVATED_MISCONDUCT).equals("")) {
		masMedicalBoardProceedings.setAggravatedMisconduct(request
				.getParameter(AGGRAVATED_MISCONDUCT));
	}
	if (request.getParameter(IN_WAY2) != null
			&& !request.getParameter(IN_WAY2).equals("")) {
		masMedicalBoardProceedings.setInWay2(request.getParameter(IN_WAY2));
	}
	if (request.getParameter(TOTAL_DISABLEMENT) != null
			&& !request.getParameter(TOTAL_DISABLEMENT).equals("")) {
		masMedicalBoardProceedings.setPercentageDisable(request
				.getParameter(TOTAL_DISABLEMENT));
	}
	if (request.getParameter(REFUSE_OPER_TREATMENT) != null
			&& !request.getParameter(REFUSE_OPER_TREATMENT).equals("")) {
		masMedicalBoardProceedings.setRefuseOperationTreat(request
				.getParameter(REFUSE_OPER_TREATMENT));
	}
	if (request.getParameter(INDIVIDUAL_REASON) != null
			&& !request.getParameter(INDIVIDUAL_REASON).equals("")) {
		masMedicalBoardProceedings.setIndividualReason(request
				.getParameter(INDIVIDUAL_REASON));
	}
	if (request.getParameter(REDUCTION_DISABLE_PENSION) != null
			&& !request.getParameter(REDUCTION_DISABLE_PENSION).equals("")) {
		masMedicalBoardProceedings.setReductionDisablePension(request
				.getParameter(REDUCTION_DISABLE_PENSION));
	}
	if (request.getParameter(REDUC_DISABLE_PENSION_ENTRY) != null
			&& !request.getParameter(REDUC_DISABLE_PENSION_ENTRY)
					.equals("")) {
		masMedicalBoardProceedings.setReducDisablePensionEntry(request
				.getParameter(REDUC_DISABLE_PENSION_ENTRY));
	}
	if (request.getParameter(OPERATION_TREAT_CURED) != null
			&& !request.getParameter(OPERATION_TREAT_CURED).equals("")) {
		masMedicalBoardProceedings.setOperationTreatCured(request
				.getParameter(OPERATION_TREAT_CURED));
	}
	if (request.getParameter(LEAVE_DATE) != null
			&& !request.getParameter(LEAVE_DATE).equals("")) {
		masMedicalBoardProceedings.setOpernTreatCuredEntry(request
				.getParameter(LEAVE_DATE));
	}

	if (request.getParameter(OPERATION_TREAT_CURED_ENTRY) != null
			&& !request.getParameter(OPERATION_TREAT_CURED_ENTRY)
					.equals("")) {
		masMedicalBoardProceedings.setOpernTreatCuredEntry(request
				.getParameter(OPERATION_TREAT_CURED_ENTRY));
	}
	if (request.getParameter(PERCENTAGE_DISABLE_TREAT) != null
			&& !request.getParameter(PERCENTAGE_DISABLE_TREAT).equals("")) {
		masMedicalBoardProceedings.setPercentageDisableTreatment(request
				.getParameter(PERCENTAGE_DISABLE_TREAT));
	}
	if (request.getParameter(PERCENTAGE_REFUSAL_TREAT) != null
			&& !request.getParameter(PERCENTAGE_REFUSAL_TREAT).equals("")) {
		masMedicalBoardProceedings.setIndividualRefusalTratment(request
				.getParameter(PERCENTAGE_REFUSAL_TREAT));
	}
	if (request.getParameter(OPERA_TREAT_RECOMMEND) != null
			&& !request.getParameter(OPERA_TREAT_RECOMMEND).equals("")) {
		masMedicalBoardProceedings.setOperaTreatmentRecommend(request
				.getParameter(OPERA_TREAT_RECOMMEND));
	}
	if (request.getParameter(INDIVIDUAL_FURTHER_TREAT) != null
			&& !request.getParameter(INDIVIDUAL_FURTHER_TREAT).equals("")) {
		masMedicalBoardProceedings.setIndividual_further_tratment(request
				.getParameter(INDIVIDUAL_FURTHER_TREAT));
	}
	if (request.getParameter(INDIVIDUAL_NATURE) != null
			&& !request.getParameter(INDIVIDUAL_NATURE).equals("")) {
		masMedicalBoardProceedings.setIndividualNature(request
				.getParameter(INDIVIDUAL_NATURE));
	}
	if (request.getParameter(TREATMET_YEAR) != null
			&& !request.getParameter(TREATMET_YEAR).equals("")) {
		masMedicalBoardProceedings.setTreatmentYear(request
				.getParameter(TREATMET_YEAR));
	}
	if (request.getParameter(TREATMET_MONTH) != null
			&& !request.getParameter(TREATMET_MONTH).equals("")) {
		masMedicalBoardProceedings.setTreatmentMonth(request
				.getParameter(TREATMET_MONTH));
	}
	if (request.getParameter(INDIVIDUAL_ATTENDENT) != null
			&& !request.getParameter(INDIVIDUAL_ATTENDENT).equals("")) {
		masMedicalBoardProceedings.setIndividualAttendent(request
				.getParameter(INDIVIDUAL_ATTENDENT));
	}
	if (request.getParameter(ATTENDENT_YEAR) != null
			&& !request.getParameter(ATTENDENT_YEAR).equals("")) {
		masMedicalBoardProceedings.setAttendentYear(request
				.getParameter(ATTENDENT_YEAR));
	}
	if (request.getParameter(ATTENDENT_MONTH) != null
			&& !request.getParameter(ATTENDENT_MONTH).equals("")) {
		masMedicalBoardProceedings.setAttendentMonth(request
				.getParameter(ATTENDENT_MONTH));
	}
	if (request.getParameter(TREATMENT_COMPLETED) != null
			&& !request.getParameter(TREATMENT_COMPLETED).equals("")) {
		masMedicalBoardProceedings.setFollowup_treatment(request
				.getParameter(TREATMENT_COMPLETED));
	}
	if (request.getParameter(FTC_DATE) != null
			&& !request.getParameter(FTC_DATE).equals("")) {
		masMedicalBoardProceedings.setFlcDate(HMSUtil
				.convertStringTypeDateToDateType(request
						.getParameter(FTC_DATE)));
	}
	if (request.getParameter(MED_BOARD_OPINION) != null
			&& !request.getParameter(MED_BOARD_OPINION).equals("")) {
		masMedicalBoardProceedings.setOpinion(request
				.getParameter(MED_BOARD_OPINION));
	}
	if (request.getParameter(INVALID_RELEASE_MED_CAT) != null
			&& !request.getParameter(INVALID_RELEASE_MED_CAT).equals("")) {
		masMedicalBoardProceedings.setReleaseMedCatValue(request
				.getParameter(INVALID_RELEASE_MED_CAT));
	}
	if (request.getParameter(INVALIDMENT_RELEASE_MED_CAT) != null
			&& !request.getParameter(INVALIDMENT_RELEASE_MED_CAT).equals(
					"0")) {
		Category invalidMedcat = new Category();
		invalidMedcat.setCategoryid(Integer.parseInt(request
				.getParameter(INVALIDMENT_RELEASE_MED_CAT)));
		masMedicalBoardProceedings.setMedCatRelease(invalidMedcat);
	}
	
	String releaseShapeFactor="";
	if (request.getParameter("releaseShapeFactor") != null  && !request.getParameter("releaseShapeFactor").equals("")) {
		releaseShapeFactor=request.getParameter("releaseShapeFactor");
		masMedicalBoardProceedings.setReleaseShapeFactor(releaseShapeFactor);
	}
	String releaseCatPeriod="";
	if (request.getParameter("releaseCatPeriod") != null) {
		if (request.getParameter("releaseCatDuration") != null) {
			String releaseCatDuration = request.getParameter("releaseCatDuration");
			releaseCatPeriod = request.getParameter("releaseCatPeriod").concat(" ").concat(releaseCatDuration);
		}
		masMedicalBoardProceedings.setReleaseMedPeriod(releaseCatPeriod);
	}
	if (request.getParameter(INVALID_RELEASE_MED_CAT) != null
			&& !request.getParameter(INVALID_RELEASE_MED_CAT).equals("")) {
		masMedicalBoardProceedings.setReleaseMedCatValue(request
				.getParameter(INVALID_RELEASE_MED_CAT));
	}
	if (request.getParameter("medcatrec") != null
			&& !request.getParameter("medcatrec").equals("")) {
		masMedicalBoardProceedings.setMedCatRec(request
				.getParameter("medcatrec"));
	}
	if (request.getParameter("member1") != null
			&& !request.getParameter("member1").equals("0")) {
		MasEmployee masEmployeeMember1 = new MasEmployee();
		masEmployeeMember1.setId(Integer.parseInt(request
				.getParameter("member1")));
		masMedicalBoardProceedings.setMedDetailMember1(masEmployeeMember1);
	}
	if (request.getParameter("member2") != null
			&& !request.getParameter("member2").equals("0")) {
		MasEmployee masEmployeeMember2 = new MasEmployee();
		masEmployeeMember2.setId(Integer.parseInt(request
				.getParameter("member2")));
		masMedicalBoardProceedings.setMedDetailMember2(masEmployeeMember2);
	}
	if (request.getParameter("president") != null
			&& !request.getParameter("president").equals("0")) {
		MasEmployee presidentEmployee = new MasEmployee();
		presidentEmployee.setId(Integer.parseInt(request
				.getParameter("president")));
		masMedicalBoardProceedings.setMedDetailPresident(presidentEmployee);
	}
	Map<String, Object> utilMap = new HashMap<String, Object>();
	utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();

	String date = (String) utilMap.get("currentDate");
	masMedicalBoardProceedings.setCommanddate(HMSUtil
			.convertStringTypeDateToDateType(date));
	String data = "";
	if (request.getParameter("data") != null
			&& !request.getParameter("data").equals("")) {
		data = (String) request.getParameter("data");
	}
	/*
	 * Code for Casual Relationship of the Disability with Service
	 * Conditions or Otherwise
	 */
	List<MasMedicalExaminationDetail> masMedicalExaminationDetailsDisabilityList = new ArrayList<MasMedicalExaminationDetail>();
	int hdbDisabilityService = 1;

	if (Integer.parseInt(request.getParameter("hdbDisabilityService")) != 1) {
		hdbDisabilityService = Integer.parseInt(request
				.getParameter("hdbDisabilityService"));
	}
	for (int i = 1; i <= hdbDisabilityService; i++) {
		MasMedicalExaminationDetail masMedicalExaminationDetail = new MasMedicalExaminationDetail();
		int disabilityServiceId = 0;
		if (request.getParameter("disabilityServiceId" + i) != null
				&& !request.getParameter("disabilityServiceId" + i).equals(
						"")) {
			disabilityServiceId = Integer.parseInt(request
					.getParameter("disabilityServiceId" + i));
		}
		if (disabilityServiceId > 0) {
			masMedicalExaminationDetail.setServiceid(disabilityServiceId);

			String attributService = "";
			String aggravateService = "";
			String notConnectedService = "";
			String reasonCause = "";
			// Date
			String fromServicePeriod = "";
			String toServicePeriod = "";
			if (request.getParameter("attributService" + i) != null
					&& !request.getParameter("attributService" + i).equals(
							"")) {
				attributService = request.getParameter("attributService"
						+ i);
			}
			if (request.getParameter("aggravateService" + i) != null
					&& !request.getParameter("aggravateService" + i)
							.equals("")) {
				aggravateService = request.getParameter("aggravateService"
						+ i);
			}
			if (request.getParameter("notConnectedService" + i) != null
					&& !request.getParameter("notConnectedService" + i)
							.equals("")) {
				notConnectedService = request
						.getParameter("notConnectedService" + i);
			}
			if (request.getParameter("reasonCause" + i) != null
					&& !request.getParameter("reasonCause" + i).equals("")) {
				reasonCause = request.getParameter("reasonCause" + i);
			}
			if (request.getParameter("fromServicePeriod" + i) != null
					&& !request.getParameter("fromServicePeriod" + i)
							.equals("")) {
				fromServicePeriod = request
						.getParameter("fromServicePeriod" + i);
			}
			if (request.getParameter("toServicePeriod" + i) != null
					&& !request.getParameter("toServicePeriod" + i).equals(
							"")) {
				toServicePeriod = request.getParameter("toServicePeriod"
						+ i);
			}
			masMedicalExaminationDetail
					.setAttributeService(attributService);
			masMedicalExaminationDetail
					.setAggravarteService(aggravateService);
			masMedicalExaminationDetail
					.setNotConnectService(notConnectedService);
			masMedicalExaminationDetail.setReasonVariation(reasonCause);
			masMedicalExaminationDetail.setToServicePeriod(toServicePeriod);
			masMedicalExaminationDetail
					.setFromServicePeriod(fromServicePeriod);
			masMedicalExaminationDetailsDisabilityList
					.add(masMedicalExaminationDetail);
		}
	}
	/*
	 * End of Code for Casual Relationship of the Disability with Service
	 * Conditions or Otherwise
	 */
	List<MasMedicalExaminationDetail> masMedicalExaminationDetailsPrasentList = new ArrayList<MasMedicalExaminationDetail>();
	int hdbDisabilityPresent = 1;
	if (Integer.parseInt(request.getParameter("hdbDisabilityPresent")) != 1) {
		hdbDisabilityPresent = Integer.parseInt(request
				.getParameter("hdbDisabilityPresent"));
	}
	for (int i = 1; i <= hdbDisabilityPresent; i++) {
		MasMedicalExaminationDetail medicalExaminationDetail = new MasMedicalExaminationDetail();
		int disablementServiceId = 0;
		if (request.getParameter("disablementServiceId" + i) != null
				&& !request.getParameter("disablementServiceId" + i)
						.equals("")) {
			disablementServiceId = Integer.parseInt(request
					.getParameter("disablementServiceId" + i));
		String percenDisablement = "";
		String disablementYear = "";
		String disablementMonth = "";
		String compositeAssessment = "";
		String disablityPension = "";
		String disablityPensionYear = "";
		String disablityPensionMonth = "";
		String netAssessment = "";
		String netAssessmentYear = "";
		String netAssessmentMonth = "";

		if (request.getParameter("percenDisablement" + i) != null
				&& !request.getParameter("percenDisablement" + i)
						.equals("")) {
			percenDisablement = request.getParameter("percenDisablement"
					+ i);
		}
		if (request.getParameter("disablementYear" + i) != null
				&& !request.getParameter("disablementYear" + i).equals("")) {
			disablementYear = request.getParameter("disablementYear" + i);
		}
		if (request.getParameter("disablementMonth" + i) != null
				&& !request.getParameter("disablementMonth" + i).equals("")) {
			disablementMonth = request.getParameter("disablementMonth" + i);
		}
		if (request.getParameter("compositeAssessment" + i) != null
				&& !request.getParameter("compositeAssessment" + i).equals(
						"")) {
			compositeAssessment = request
					.getParameter("compositeAssessment" + i);
		}
		if (request.getParameter("disablityPension" + i) != null
				&& !request.getParameter("disablityPension" + i).equals("")) {
			disablityPension = request.getParameter("disablityPension" + i);
		}
		if (request.getParameter("disablityPensionYear" + i) != null
				&& !request.getParameter("disablityPensionYear" + i)
						.equals("")) {
			disablityPensionYear = request
					.getParameter("disablityPensionYear" + i);
		}
		if (request.getParameter("disablityPensionMonth" + i) != null
				&& !request.getParameter("disablityPensionMonth" + i)
						.equals("")) {
			disablityPensionMonth = request
					.getParameter("disablityPensionMonth" + i);
		}
		if (request.getParameter("netAssessment" + i) != null
				&& !request.getParameter("netAssessment" + i).equals("")) {
			netAssessment = request.getParameter("netAssessment" + i);
		}
		if (request.getParameter("netAssessmentYear" + i) != null
				&& !request.getParameter("netAssessmentYear" + i)
						.equals("")) {
			netAssessmentYear = request.getParameter("netAssessmentYear"
					+ i);
		}
		if (request.getParameter("netAssessmentMonth" + i) != null
				&& !request.getParameter("netAssessmentMonth" + i).equals(
						"")) {
			netAssessmentMonth = request.getParameter("netAssessmentMonth"
					+ i);
		}

		medicalExaminationDetail.setServiceid(disablementServiceId);
		medicalExaminationDetail
				.setDisablementPercentage(percenDisablement);
		medicalExaminationDetail.setDisablementYear(disablementYear);
		medicalExaminationDetail.setDisablementMonth(disablementMonth);
		medicalExaminationDetail
				.setDisablityCompositeAssessment(compositeAssessment);
		medicalExaminationDetail.setDisablityPension(disablityPension);
		medicalExaminationDetail
				.setDisablityPensionYear(disablityPensionYear);
		medicalExaminationDetail
				.setDisablityPensionMonth(disablityPensionMonth);
		medicalExaminationDetail.setDisablityNetAssessment(netAssessment);
		medicalExaminationDetail
				.setDisablityAssessmentYear(netAssessmentYear);
		medicalExaminationDetail
				.setDisablityAssessmentMonth(netAssessmentMonth);
		masMedicalExaminationDetailsPrasentList
				.add(medicalExaminationDetail);
	}
}
	int hdbIcdCronicalDisability = 1;
	if (Integer.parseInt(request.getParameter("hdbIcdCronicalDisability")) != 1) {
		hdbIcdCronicalDisability = Integer.parseInt(request
				.getParameter("hdbIcdCronicalDisability"));
	}
	List<MasMedicalExaminationDetail> masMedicalExaminationDetailsCronicalList = new ArrayList<MasMedicalExaminationDetail>();
	for (int i = 1; i <= hdbIcdCronicalDisability; i++) {
		MasMedicalExaminationDetail medicalExaminationDetail = new MasMedicalExaminationDetail();
		int disablementServiceIdCronical = 0;
		if (request.getParameter("disablementServiceIdCronical" + i) != null
				&& !request
						.getParameter("disablementServiceIdCronical" + i)
						.equals("0")) {
			disablementServiceIdCronical = Integer.parseInt(request
					.getParameter("disablementServiceIdCronical" + i));
		}
		String dateOfOrigin = "";
		int rankDisablilty = 0;
		String placeServing = "";
		int unitDisablilty = 0;

		String str = "";
		if (request.getParameter("icdDisability" + i) != null) {
			str = request.getParameter("icdDisability" + i);
		} else {
			str = "";
		}
		if (str != "") {
			String systemDiagnosis = "";
			int lastIndex = str.indexOf("[");
			if (lastIndex > 0) {
				systemDiagnosis = str.substring(0, lastIndex);
			} else {
				systemDiagnosis = str;
			}
			int index1 = str.lastIndexOf("[");
			int index2 = str.lastIndexOf("]");
			int icdId = 0;
			// int icdId
			// =Integer.parseInt(str.substring((index1+1),index2));
			try {
				if (str != null && !str.equals("")) {
					icdId = Integer.parseInt(str.substring((index1 + 1),
							index2));
				}
			} catch (NumberFormatException e) {

				e.printStackTrace();
			}
			/*
			 * if(icdId>0){ MasIcd masIcd=new MasIcd(); masIcd.setId(icdId);
			 * masMedicalExaminationDetail.setMasIcd(masIcd); }
			 */

			/*
			 * if (request.getParameter("icdDisability"+i)!=null &&
			 * !request.getParameter("icdDisability"+i).equals("")){
			 * icdDisability = request.getParameter("icdDisability"+i); }
			 */
			if (request.getParameter("dateOfOrigin" + i) != null
					&& !request.getParameter("dateOfOrigin" + i).equals("")) {
				dateOfOrigin = request.getParameter("dateOfOrigin" + i);
			}
			if (request.getParameter("rankDisablilty" + i) != null
					&& !request.getParameter("rankDisablilty" + i).equals(
							"")) {
				rankDisablilty = Integer.parseInt(request
						.getParameter("rankDisablilty" + i));
			}
			if (request.getParameter("placeServing" + i) != null
					&& !request.getParameter("placeServing" + i).equals("")) {
				placeServing = request.getParameter("placeServing" + i);
			}
			if (request.getParameter("unitDisablilty" + i) != null
					&& !request.getParameter("unitDisablilty" + i).equals(
							"")) {
				unitDisablilty = Integer.parseInt(request
						.getParameter("unitDisablilty" + i));
			}

			// if(icdDisability!=""){
			if (disablementServiceIdCronical != 0) {
				medicalExaminationDetail
						.setServiceid(disablementServiceIdCronical);
			}
			// medicalExaminationDetail.setPrincipal(icdDisability);
			if (icdId > 0) {
			/*	MasSystemDiagnosis sysDiagnosis = new MasSystemDiagnosis();
				sysDiagnosis.setId(icdId);
				medicalExaminationDetail.setSystemDiagnosis(sysDiagnosis);*/
				MasIcd sysDiagnosis = new MasIcd();
				sysDiagnosis.setId(icdId);
				medicalExaminationDetail.setMasIcd(sysDiagnosis);
			}
			medicalExaminationDetail.setPrincipal(systemDiagnosis);
			if (dateOfOrigin != "") {
				medicalExaminationDetail.setOrigindate(HMSUtil
						.convertStringTypeDateToDateType(dateOfOrigin));
			}
			if (rankDisablilty > 0) {
				MasRank masRank = new MasRank();
				masRank.setId(rankDisablilty);
				medicalExaminationDetail.setRankDisability(masRank);
			}
			if (unitDisablilty > 0) {
				MasUnit masUnit = new MasUnit();
				masUnit.setId(unitDisablilty);
				medicalExaminationDetail.setUnitDisability(masUnit);
			}
			if (medExamId > 0) {
				MasMedicalExaminationReportOnEntry masMedicalObj = new MasMedicalExaminationReportOnEntry();
				masMedicalObj.setId(medExamId);
				medicalExaminationDetail.setMasMedicalReport(masMedicalObj);
			}
			medicalExaminationDetail.setPlaceDisability(placeServing);
			medicalExaminationDetail.setParticular("Cronical");
			masMedicalExaminationDetailsCronicalList
					.add(medicalExaminationDetail);
			// }
		}
	}
	mapForDS.put("masMedicalExaminationDetailsCronicalList",
			masMedicalExaminationDetailsCronicalList);
	if (data.equalsIgnoreCase("validate")) {
		masMedicalBoardProceedings.setStatus("v");
	} else {
		masMedicalBoardProceedings.setStatus("cd");
	}
	masMedicalBoardProceedings.setModate(new Date());
	HttpSession session = request.getSession();
	int deptId = (Integer) session.getAttribute("deptId");
	int hospitalId = 0;
	if (session.getAttribute(HOSPITAL_ID) != null) {
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	}
	mapForDS.put("hospitalId", hospitalId);
	mapForDS.put("visitId", visitId);
	mapForDS.put("deptId", deptId);
	mapForDS.put("medExamId", medExamId);
	mapForDS.put("box", box);
	mapForDS.put("releaseMedCat", Integer.parseInt(request.getParameter(INVALIDMENT_RELEASE_MED_CAT)));
	mapForDS.put("releaseCatPeriod", releaseCatPeriod);
	mapForDS.put("masMedicalExaminationDetailsDisabilityList",
			masMedicalExaminationDetailsDisabilityList);
	mapForDS.put("masMedicalExaminationDetailsPrasentList",
			masMedicalExaminationDetailsPrasentList);

	mapForDS.put("masMedicalBoardProceedings", masMedicalBoardProceedings);
	synchronized (session) {
		map = medicalBoardHandlerService.validateMBOpinion(mapForDS);
	}
	boolean falg = false;
	if (map.get("falg") != null) {
		falg = (Boolean) map.get("falg");
	}
	String message = "";
	if (falg) {
		message = "Medical Board validated !Print Report";
	} else {
		message = "Some Problem Occurred.";
	}

	// map =
	// medicalBoardHandlerService.showMBCommandOfficerWaitList(hospitalId);
	map.put("printReport", "yes");
	map.put("medExamId", medExamId);
	map.put("visitId", visitId);
	map.put("medicalType", request.getParameter("medicalType"));
	map.put("medicalExamType", request.getParameter("medicalExamType"));
	jsp = MEDICAL_BOARD_EXAM_MSG;
	jsp += ".jsp";
	title = "commanding Officer Waiting List";
	map.put("message", message);
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("indexB", "map", map);
}

// ---------------------End By Dipali
// ------------------- Start of Method By Mansi

public ModelAndView showMedicalBoardMO(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	String jsp = "";
	String title = "";
	jsp = "mb_medicalBoardMO";

	jsp += ".jsp";
	title = "MO Waiting List";
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("index", "map", map);
}

public ModelAndView showMedicalBoardSpecialist(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	HttpSession session = request.getSession();
	String jsp = "";
	String title = "";

	int hospitalId = 0;
	if (session.getAttribute(HOSPITAL_ID) != null) {
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	}
	map = medicalBoardHandlerService.showMedicalBoardSpecialist(hospitalId);

	title = "Medical Board  Specialist Opinion Waiting List";
	jsp = "mb_medicalBoardSpecialist";
	jsp += ".jsp";
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("index", "map", map);
}

public ModelAndView showMedicalBoardApprovingAuthority(
		HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	String jsp = "";
	String title = "";
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute(HOSPITAL_ID) != null) {
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	}
	int commandId = 0;
	System.out.println("comm"+request.getParameter("commandId"));
	if(session.getAttribute("commandId")!= null)
	{
		commandId = Integer.parseInt(""+session.getAttribute("commandId"));
	}
	
	//map = medicalBoardHandlerService.showMBApproveAuthWaitList(hospitalId);
	map = medicalBoardHandlerService.showMBApproveAuthWaitList(commandId);
	jsp = "mb_medicalBoardApprovingAuthority";

	jsp += ".jsp";
	title = "Approving Authority Waiting List";
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("indexB", "map", map);
}

public ModelAndView showMedicalBoardCommandingOfficer(
		HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	String jsp = "";
	String title = "";
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute(HOSPITAL_ID) != null) {
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	}
	map = medicalBoardHandlerService
			.showMBCommandOfficerWaitList(hospitalId);
	jsp = "mb_medicalBoardCommandingOfficer";

	jsp += ".jsp";
	title = "Commanding Officer Waiting List";
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("indexB", "map", map);
}

public ModelAndView showMedicalBoardPerusingAuthority(
		HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	HttpSession session = request.getSession();
	String jsp = "";
	String title = "";
	int hospitalId = 0;
	if (session.getAttribute(HOSPITAL_ID) != null) {
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	}
	map = medicalBoardHandlerService.showMBPerusingAuthWaitList(hospitalId);
	jsp = "mb_medicalBoardPerusingAuthority";

	jsp += ".jsp";
	title = "Perusing Authority Waiting List";
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("indexB", "map", map);
}

public ModelAndView showMedicalBoardOpinion(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	String jsp = "";
	String title = "";
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute(HOSPITAL_ID) != null) {
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	}
	map = medicalBoardHandlerService
			.showMedicalBoardOpinionWaitList(hospitalId);
	jsp = "mb_medicalBoard";

	jsp += ".jsp";
	title = "Commanding Officer Waiting List";
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("indexB", "map", map);
}

public ModelAndView showMedicalBoardConfirmingAuthority(
		HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	String jsp = "";
	String title = "";
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute(HOSPITAL_ID) != null) {
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	}
	map = medicalBoardHandlerService
			.showMedicalBoardConfirmingAuthority(hospitalId);

	jsp = "mb_medicalBoardConfirmingAuthority";

	jsp += ".jsp";
	title = "Confirming Authority Waiting List";
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("indexB", "map", map);
}

public ModelAndView showMedicalBoardAcceptingAuthority(
		HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	String jsp = "";
	String title = "";
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute(HOSPITAL_ID) != null) {
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	}
	map = medicalBoardHandlerService
			.showMedicalBoardAcceptingAuthority(hospitalId);
	jsp = "mb_medicalBoardAcceptingAuthority";

	jsp += ".jsp";
	title = "Accepting Authority Waiting List";
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("indexB", "map", map);
}

public ModelAndView showMedicalBoardForm16(HttpServletRequest request,
		HttpServletResponse response) {

	String jsp = "";
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	Box box = HMSUtil.getBox(request);
	Map map = new HashMap();
	int visitId = 0;
	int medExamId = 0;
	String jspheading = null;
	HttpSession session = request.getSession();
	if (request.getParameter("visitId") != null) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	if (request.getParameter("medExamType") != null) {
		jspheading = request.getParameter("medExamType");
	}
	if (request.getParameter("medExamId") != null) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"));
	}
	int hospitalId = 0;
	if (session.getAttribute(HOSPITAL_ID) != null) {
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	}
	int deptId = (Integer) session.getAttribute("deptId");
	mapForDS.put("hospitalId", hospitalId);
	mapForDS.put("visitId", visitId);
	mapForDS.put("deptId", deptId);
	mapForDS.put("medExamId", medExamId);
	int empId = (Integer) session.getAttribute("empId");
	mapForDS.put("empId", empId);
	map = medicalBoardHandlerService.showMedicalBoardForm16(mapForDS);
	jsp = "mb_medicalBoardForm16";
	jsp += ".jsp";
	map.put("visitId", visitId);
	map.put("jspheading", jspheading);
	map.put("contentJsp", jsp);
	return new ModelAndView("indexB", "map", map);

}

// -----------------Dinesh Dubey---------------------------
public ModelAndView showCommandOfficerJsp(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	int medExamId = 0;
	int visitId = 0;
	int hospitalId = 0;
	HttpSession session = request.getSession();
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	if (request.getParameter("medExamId") != null) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"));
	}
	if (request.getParameter("visitId") != null) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	if (session.getAttribute(HOSPITAL_ID) != null) {
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	}
	mapForDS.put("visitId", visitId);
	mapForDS.put("medExamId", medExamId);
	mapForDS.put("hospitalId", hospitalId);
	map = medicalBoardHandlerService
			.getCommandingStatementDetails(mapForDS);
	String jsp = "mb_commandOfficer";
	return new ModelAndView(jsp, "map", map);
}

public ModelAndView showCurrentMedicalBoardStatus(
		HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> mapofds = new HashMap<String, Object>();
	Map<String, Object> map = new HashMap<String, Object>();
	String jsp = "";
	String title = "";
	HttpSession session = request.getSession();
	int commandId = (Integer) session.getAttribute("commandId");
	mapofds.put("commandId", commandId);
	map = medicalBoardHandlerService.showCurrentMedicalBoardStatus(mapofds);
	jsp = "mb_currentMedicalBoardStatus.jsp";
	title = "Current Medical Board Status";
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("index", "map", map);
}

// -------------------- Reports
public ModelAndView medicalBoardReports(HttpServletRequest request,
		HttpServletResponse response) {
	String jsp = "";
	Map<String, Object> map = new HashMap<String, Object>();
	// map = medicalBoardHandlerService.medicalBoardReports();

	jsp = "mb_medicalBoardReport";
	jsp = jsp + ".jsp";
	map.put("contentJsp", jsp);

	return new ModelAndView("indexB", "map", map);
}

public ModelAndView generateMedicalBoardReport(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> parameters = new HashMap<String, Object>();
	Map<String, Object> map = new HashMap<String, Object>();
	String jsp = "";
	String title = "";
	Date from_date = null;
	Date to_date = null;
	String serPersonFName = "";
	String patientFName = "";
	String orderStatus = "";
	String serviceNo = "";
	HttpSession session = request.getSession();
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	parameters.put("hospitalId", hospitalId);
	if (request.getParameter(FROM_DATE) != null
			&& !(request.getParameter(FROM_DATE).equals(""))) {
		from_date = HMSUtil.convertStringTypeDateToDateType(request
				.getParameter(FROM_DATE));

	}

	if (request.getParameter(TO_DATE) != null
			&& !(request.getParameter(TO_DATE).equals(""))) {
		to_date = HMSUtil.convertStringTypeDateToDateType(request
				.getParameter(TO_DATE));
	}

	/*
	 * String query=""; if (to_date != null) { DateFormat formatter = new
	 * SimpleDateFormat("dd/MM/yyyy"); String today =
	 * formatter.format(to_date); //query =
	 * " where masmed.opiniondate between '" + fromDate + "' and '" + toDate
	 * + "'"; query =
	 * "where  masmed.medicalType='MedicalBoard' and masmed.date_of_completion <= to_date('"
	 * + today + "','dd/MM/yyyy' )"; //query = query +
	 * "where masmed.categorydate <= to_date('"+ toDate +
	 * "','dd/MM/yyyy') "; }
	 */

	/*
	 * if (hospitalId != 0) { query = query +
	 * "AND mas_hospital.hospital_id = '" + hospitalId + "' "; }
	 */
	parameters.put("to_date", to_date);
	parameters.put("from_date", from_date);
	// parameters.put("QUERY", query);
	// parameters.put("medicalType","MedicalBoard");
	Map<String, Object> detailsMap = medicalBoardHandlerService
			.getConnectionForReport();

	HMSUtil.generateReport("MedicalBoard_register", parameters,
			(Connection) detailsMap.get("conn"), response,
			getServletContext());
	return null;
}

private JasperReport getCompiledReport(String fileName) throws JRException {

	File reportFile = new File(getServletContext().getRealPath(
			"/reports/" + fileName + ".jasper"));
	JasperReport jasperReport = (JasperReport) JRLoader
			.loadObject(reportFile.getPath());

	return jasperReport;
}

public ModelAndView generateProceedingInitialAFMSFReport(
		HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> detailsMap = new HashMap<String, Object>();
	Map<String, Object> parameters = new HashMap<String, Object>();
	Map<String, Object> paraMap = new HashMap<String, Object>();
	detailsMap = medicalBoardHandlerService.getConnectionForReport();
	int visit_id = 0;
	if (request.getParameter("visitId") != null
			&& !(request.getParameter("visitId").equals(""))) {
		visit_id = Integer.parseInt(request.getParameter("visitId"));

	}
	parameters.put("visit_id", visit_id);
	
	parameters.put("SUBREPORT_DIR", getServletContext().getRealPath(
			"/reports/"));
	paraMap=medicalBoardHandlerService.getMedicalBoardList(parameters);
	List<MasMedicalExaminationDetail> examinationDetailList = new ArrayList<MasMedicalExaminationDetail>();
	if(paraMap.get("examinationDetailList") !=null){
		examinationDetailList=(List<MasMedicalExaminationDetail>)paraMap.get("examinationDetailList");
	}
	if(examinationDetailList !=null && examinationDetailList.size() >0){
	HMSUtil.generateReport("mb_proceeding_initial_afmsf", parameters,
			(Connection) detailsMap.get("conn"), response,
			getServletContext());
	}else{
		HMSUtil.generateReport("mb_proceeding_initial_afmsfNew", parameters,
				(Connection) detailsMap.get("conn"), response,
				getServletContext());
	}
	return null;
}

// ------------------- End of Method By Mansi

// ----Methods written by Kiran----

// --- MedicalBoard Approving authority Form - 15

public ModelAndView showInitialMedicalBoardAppAuthJsp(
		HttpServletRequest request, HttpServletResponse response) {
	String jsp = "";
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	Box box = HMSUtil.getBox(request);
	Map<String, Object> map = new HashMap<String, Object>();
	int visitId = 0;
	int medExamId = 0;
	String jspheading = null;
	if (request.getParameter("visitId") != null) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	if (request.getParameter("medExamType") != null) {
		jspheading = request.getParameter("medExamType");
	}
	if (request.getParameter("medExamId") != null) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"));
	}
	HttpSession session = request.getSession();
	int deptId = (Integer) session.getAttribute("deptId");
	mapForDS.put("visitId", visitId);
	mapForDS.put("deptId", deptId);
	mapForDS.put("medExamId", medExamId);
	int empId = (Integer) session.getAttribute("empId");
	mapForDS.put("empId", empId);
	map = medicalBoardHandlerService.showMBAppAuthDetails(mapForDS);
	jsp = "mb_medicalBoardAppAuth";
	jsp += ".jsp";
	map.put("visitId", visitId);
	map.put("jspheading", jspheading);
	map.put("contentJsp", jsp);
	return new ModelAndView("indexB", "map", map);
}

public ModelAndView saveInitialMedicalBoardAppAuthJsp(
		HttpServletRequest request, HttpServletResponse response) {
	String jsp = "";
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	Box box = HMSUtil.getBox(request);
	Map<String, Object> map = new HashMap<String, Object>();
	int visitId = 0;
	int medExamId = 0;
	String medicalType = "";
	String jspheading = null;

	if (request.getParameter("visitId") != null) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	String medicalExamType = "";
	if (request.getParameter("medicalExamType") != null) {
		medicalExamType = (String) request.getParameter("medicalExamType");

	}
	if (request.getParameter("medExamType") != null) {
		medicalType = request.getParameter("medExamType");
	}
	if (request.getParameter("medExamId") != null) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"));
	}
	MasMedicalExaminationReportOnEntry masMedicalBoardProceedings = new MasMedicalExaminationReportOnEntry();
	masMedicalBoardProceedings = medicalBoardHandlerService
			.loadMedicalExamObj(medExamId);
	if (request.getParameter(FINAL_OBSERVATION) != null
			&& !request.getParameter(FINAL_OBSERVATION).equals("")) {
		masMedicalBoardProceedings.setAprovAuthFinalObservation(request
				.getParameter(FINAL_OBSERVATION));
	}
	if (request.getParameter(AUTH_REMARKS) != null
			&& !request.getParameter(AUTH_REMARKS).equals("")) {
		masMedicalBoardProceedings.setApprovAuthRemarks(request
				.getParameter(AUTH_REMARKS));
	}
	if (request.getParameter(SIGNED_BY) != null
			&& !request.getParameter(SIGNED_BY).equals("")) {
		masMedicalBoardProceedings.setApprovAuthSignedBy(request
				.getParameter(SIGNED_BY));
	}
	/*
	 * Code By Mukesh Status m MA Waiting List (Direct from visit/reception)
	 * s MO Waiting List (forwarded from MA before Specliest Openion) f MO
	 * Waiting List (forwarded from MA after Speciel Openion) v Approving
	 * Authority Waiting List (validate from from Mo) a Perusing Authority
	 * Waiting List (validate from from Approving Authority) p Perusing
	 * Authority validated
	 */
	Map<String, Object> utilMap = new HashMap<String, Object>();
	utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();

	String date = (String) utilMap.get("currentDate");
	masMedicalBoardProceedings.setAppAuthDate(HMSUtil
			.convertStringTypeDateToDateType(date));
	masMedicalBoardProceedings.setStatus("a");
	HttpSession session = request.getSession();
	int deptId = (Integer) session.getAttribute("deptId");
	int hospitalId = 0;
	if (session.getAttribute(HOSPITAL_ID) != null) {
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	}
	mapForDS.put("hospitalId", hospitalId);
	mapForDS.put("visitId", visitId);
	mapForDS.put("deptId", deptId);
	mapForDS.put("medExamId", medExamId);
	mapForDS.put("masMedicalBoardProceedings", masMedicalBoardProceedings);
	synchronized (session) {
		map = medicalBoardHandlerService
				.saveInitialMedicalBoardPerusingAuthJsp(mapForDS);
	}
	boolean falg = false;
	if (map.get("falg") != null) {
		falg = (Boolean) map.get("falg");
	}
	String message = "";
	if (falg) {
		message = "Form Validated Successfuly. Do you want to print?";
	} else {
		message = "Some Problem Occurred.";
	}
	// jsp="mb_annualmedicalExamPrint";
	jsp = "messageForApprovingAuthority";
	map.put("medicalType", "MedicalBoard");
	map.put("medicalExamType", medicalExamType);
	// map =
	// medicalBoardHandlerService.showMBPerusingAuthWaitList(hospitalId);
	// jsp = "mb_medicalBoardPerusingAuthority";

	jsp += ".jsp";
	title = "Perusing Authority Waiting List";
	map.put("contentJsp", jsp);
	map.put("title", title);
	map.put("message", message);
	map.put("visitId", visitId);
	return new ModelAndView("indexB", "map", map);
}

// --- MedicalBoard Perusing authority Form - 15

public ModelAndView showInitialMedicalBoardPerusingAuthJsp(
		HttpServletRequest request, HttpServletResponse response) {
	String jsp = "";
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	Box box = HMSUtil.getBox(request);
	Map<String, Object> map = new HashMap<String, Object>();
	int visitId = 0;
	int medExamId = 0;
	String jspheading = null;
	if (request.getParameter("visitId") != null) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	if (request.getParameter("medExamType") != null) {
		jspheading = request.getParameter("medExamType");
	}
	if (request.getParameter("medExamId") != null) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"));
	}
	HttpSession session = request.getSession();
	int deptId = (Integer) session.getAttribute("deptId");
	mapForDS.put("visitId", visitId);
	mapForDS.put("deptId", deptId);
	mapForDS.put("medExamId", medExamId);
	int empId = (Integer) session.getAttribute("empId");
	mapForDS.put("empId", empId);
	map = medicalBoardHandlerService.showMBPerusingAuthDetails(mapForDS);
	jsp = "mb_medicalBoardPerusingAuth";
	jsp += ".jsp";
	map.put("visitId", visitId);
	map.put("jspheading", jspheading);
	map.put("contentJsp", jsp);
	return new ModelAndView("indexB", "map", map);
}

public ModelAndView saveInitialMedicalBoardPerusingAuthJsp(
		HttpServletRequest request, HttpServletResponse response) {
	String jsp = "";
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	Box box = HMSUtil.getBox(request);
	Map<String, Object> map = new HashMap<String, Object>();
	int visitId = 0;
	int medExamId = 0;
	String jspheading = null;

	if (request.getParameter("visitId") != null) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	if (request.getParameter("medExamType") != null) {
		jspheading = request.getParameter("medExamType");
	}
	if (request.getParameter("medExamId") != null) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"));
	}
	MasMedicalExaminationReportOnEntry masMedicalBoardProceedings = new MasMedicalExaminationReportOnEntry();
	masMedicalBoardProceedings = medicalBoardHandlerService
			.loadMedicalExamObj(medExamId);
	if (request.getParameter("perusingFinalObserv") != null
			&& !request.getParameter("perusingFinalObserv").equals("")) {
		masMedicalBoardProceedings.setPerFinalObservation(request
				.getParameter("perusingFinalObserv"));
	}
	if (request.getParameter("perusingRemarks") != null
			&& !request.getParameter("perusingRemarks").equals("")) {
		masMedicalBoardProceedings.setPerAuthRemarks(request
				.getParameter("perusingRemarks"));
	}
	if (request.getParameter("perusingSignedBy") != null
			&& !request.getParameter("perusingSignedBy").equals("")) {
		masMedicalBoardProceedings.setPerApprovAuthSignedBy(request
				.getParameter("perusingSignedBy"));
	}
	/*
	 * Code By Mukesh Status m MA Waiting List (Direct from visit/reception)
	 * f MO Waiting List (forwarded from MA) v Approving Authority Waiting
	 * List (validate from from Mo) a Perusing Authority Waiting List
	 * (validate from from Approving Authority) p Perusing Authority
	 * validated
	 */
	Map<String, Object> utilMap = new HashMap<String, Object>();
	utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();

	String date = (String) utilMap.get("currentDate");
	masMedicalBoardProceedings.setPerAuthDate(HMSUtil
			.convertStringTypeDateToDateType(date));
	masMedicalBoardProceedings.setDateOfCompletion(HMSUtil
			.convertStringTypeDateToDateType(date));

	masMedicalBoardProceedings.setStatus("p");
	HttpSession session = request.getSession();
	int deptId = (Integer) session.getAttribute("deptId");
	int hospitalId = 0;
	if (session.getAttribute(HOSPITAL_ID) != null) {
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	}
	mapForDS.put("hospitalId", hospitalId);
	mapForDS.put("visitId", visitId);
	mapForDS.put("deptId", deptId);
	mapForDS.put("medExamId", medExamId);
	mapForDS.put("masMedicalBoardProceedings", masMedicalBoardProceedings);
	synchronized (session) {
		map = medicalBoardHandlerService
				.saveInitialMedicalBoardPerusingAuthJsp(mapForDS);
	}
	boolean falg = false;
	if (map.get("falg") != null) {
		falg = (Boolean) map.get("falg");
	}
	String message = "";
	if (falg) {
		message = "Validate Successfully Do you want Print?";
	} else {
		message = "Some Problem Occurred.";
	}
	// map =
	// medicalBoardHandlerService.showMBPerusingAuthWaitList(hospitalId);

	// jsp = "mb_medicalBoardPerusingAuthority";
	jsp = "messageForPerusingAuthority";
	jsp += ".jsp";
	title = "Approving Authority Waiting List";
	map.put("contentJsp", jsp);
	map.put("message", message);
	map.put("title", title);
	map.put("visitId", visitId);
	return new ModelAndView("indexB", "map", map);
}

// --- MedicalBoard MO Form - 16

public ModelAndView showMedBoardMOForm16(HttpServletRequest request,
		HttpServletResponse response) {
	String jsp = "";
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	Box box = HMSUtil.getBox(request);
	Map map = new HashMap();
	int visitId = 0;
	int medExamId = 0;
	String jspheading = null;
	if (request.getParameter("visitId") != null) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	if (request.getParameter("medExamType") != null) {
		jspheading = request.getParameter("medExamType");
	}
	if (request.getParameter("medExamId") != null) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"));
	}
	HttpSession session = request.getSession();
	int deptId = (Integer) session.getAttribute("deptId");
	int empId = (Integer) session.getAttribute("empId");
	mapForDS.put("visitId", visitId);
	mapForDS.put("deptId", deptId);
	mapForDS.put("medExamId", medExamId);
	mapForDS.put("empId", empId);
	map = medicalBoardHandlerService.showMBForm16List(mapForDS);
	// List<MasMedicalExaminationReportOnEntry> medExamList = new
	// ArrayList<MasMedicalExaminationReportOnEntry>();
	// medExamList = medicalExamHandlerService.getExistingMedExamList(box);
	jsp = "mb_MOForm16";
	jsp += ".jsp";
	// map.put("medExamList",medExamList);
	map.put("visitId", visitId);
	map.put("jspheading", jspheading);
	map.put("contentJsp", jsp);
	// map.put("title", title);
	return new ModelAndView("indexB", "map", map);
}

// --- MedicalBoard Approving authority Form - 16

public ModelAndView showInitialMedicalBoardAppAuthForm16Jsp(
		HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	HttpSession session = request.getSession();
	Box box = HMSUtil.getBox(request);
	Map map = new HashMap();
	String jsp = "";
	int visitId = 0;
	int medExamId = 0;
	String jspheading = null;
	if (request.getParameter("visitId") != null) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	if (request.getParameter("medExamType") != null) {
		jspheading = request.getParameter("medExamType");
	}
	if (request.getParameter("medExamId") != null) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"));
	}
	int empId = (Integer) session.getAttribute("empId");
	int deptId = (Integer) session.getAttribute("deptId");

	mapForDS.put("empId", empId);
	mapForDS.put("visitId", visitId);
	mapForDS.put("deptId", deptId);
	mapForDS.put("medExamId", medExamId);
	map = medicalBoardHandlerService.showMBAppAuthForm16List(mapForDS);
	jsp = "mb_medicalBoardAppAuthForm16";
	jsp += ".jsp";
	map.put("visitId", visitId);
	map.put("jspheading", jspheading);
	map.put("contentJsp", jsp);
	return new ModelAndView("indexB", "map", map);
}

// --- MedicalBoard Confirming authority Form - 16

public ModelAndView showMBConfirmingAuthorityWaitList(
		HttpServletRequest request, HttpServletResponse response) {
	String jsp = "";
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	Box box = HMSUtil.getBox(request);
	Map map = new HashMap();
	int visitId = 0;
	int medExamId = 0;
	String jspheading = null;
	if (request.getParameter("visitId") != null) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	if (request.getParameter("medExamType") != null) {
		jspheading = request.getParameter("medExamType");
	}
	if (request.getParameter("medExamId") != null) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"));
	}
	HttpSession session = request.getSession();
	int deptId = (Integer) session.getAttribute("deptId");
	mapForDS.put("visitId", visitId);
	mapForDS.put("deptId", deptId);
	mapForDS.put("medExamId", medExamId);
	int empId = (Integer) session.getAttribute("empId");
	mapForDS.put("empId", empId);
	map = medicalBoardHandlerService.showMBConfAuthForm16List(mapForDS);
	jsp = "mb_confirmAuthForm16";
	jsp += ".jsp";
	map.put("visitId", visitId);
	map.put("jspheading", jspheading);
	map.put("contentJsp", jsp);
	return new ModelAndView("indexB", "map", map);

}

// --- MedicalBoard Accepting authority Form - 16

public ModelAndView showMBAcceptAuthForm16Jsp(HttpServletRequest request,
		HttpServletResponse response) {
	String jsp = "";
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	Box box = HMSUtil.getBox(request);
	Map map = new HashMap();
	int visitId = 0;
	int medExamId = 0;
	String jspheading = null;
	if (request.getParameter("visitId") != null) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	if (request.getParameter("medExamType") != null) {
		jspheading = request.getParameter("medExamType");
	}
	if (request.getParameter("medExamId") != null) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"));
	}
	HttpSession session = request.getSession();
	int deptId = (Integer) session.getAttribute("deptId");
	mapForDS.put("visitId", visitId);
	mapForDS.put("deptId", deptId);
	mapForDS.put("medExamId", medExamId);
	int empId = (Integer) session.getAttribute("empId");
	mapForDS.put("empId", empId);
	map = medicalBoardHandlerService.showMBAccpAuthForm16List(mapForDS);
	jsp = "mb_acceptAuthForm16";
	jsp += ".jsp";
	map.put("visitId", visitId);
	map.put("jspheading", jspheading);
	map.put("contentJsp", jsp);
	return new ModelAndView("indexB", "map", map);

}

// --- Pop Up of Med Exam Detail
public ModelAndView showPopUpViewMedExamDetail(HttpServletRequest request,
		HttpServletResponse response) {
	String jsp = "";
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	int medExamId = 0;
	int visitId = 0;
	if (request.getParameter("medExamId") != null) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"));
	}
	if (request.getParameter("visitId") != null) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	dataMap.put("visitId", visitId);
	dataMap.put("medExamId", medExamId);
	map = medicalBoardHandlerService.showMedicalExamList(dataMap);
	jsp = "popUpViewMedExamDetail";
	map.put("contentJsp", jsp);
	return new ModelAndView(jsp, "map", map);
}

// --- Pop Up of Med Board Detail
public ModelAndView showViewMedBoardDetailJsp(HttpServletRequest request,
		HttpServletResponse response) {
	String jsp = "";
	Map<String, Object> map = new HashMap<String, Object>();
	jsp = "popUpViewMedBoardDetail";
	// jsp += ".jsp";
	map.put("contentJsp", jsp);
	return new ModelAndView(jsp, "map", map);
}

// ------------------End By Kiran----
public ModelAndView rejectMedicalBoardEntry(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	int visitId = 0;
	int medExamId = 0;
	if (request.getParameter("visitId") != null) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	if (request.getParameter("medExamId") != null) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"));
	}
	HttpSession session = request.getSession();
	int deptId = (Integer) session.getAttribute("deptId");
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	mapForDS.put("hospitalId",hospitalId);
	String flag = "";
	if (request.getParameter("flag") != null) {
		flag = request.getParameter("flag").trim();
	}
	String medRemarks = "";
	if (request.getParameter("medRemarks") != null) {
		medRemarks = request.getParameter("medRemarks").trim();
	}
	String authRemarks = "";
	String perusingRemarks = "";
	String moRemarks = "";
	if (request.getParameter("authRemarks") != null) {
		authRemarks = request.getParameter("authRemarks").trim();
	}
	if (request.getParameter("perusingRemarks") != null) {
		perusingRemarks = request.getParameter("perusingRemarks").trim();
	}
	if (request.getParameter("moRemarks") != null) {
		moRemarks = request.getParameter("moRemarks").trim();
	}
	Map<String, Object> mapDetails = new HashMap<String, Object>();
	mapDetails.put("visitId", visitId);
	mapDetails.put("medExamId", medExamId);
	mapDetails.put("hospitalId", hospitalId);
	mapDetails.put("medRemarks", medRemarks);
	mapDetails.put("authRemarks", authRemarks);
	mapDetails.put("moRemarks", moRemarks);
	mapDetails.put("perusingRemarks", perusingRemarks);
	/*
	 * Code By Mukesh Status m MA Waiting List (Direct from visit/reception)
	 * f MO Waiting List (forwarded from MA) v Approving Authority Waiting
	 * List (validate from from Mo) a Perusing Authority Waiting List
	 * (validate from from Approving Authority) p Perusing Authority
	 * validated fr Rejected By Mo (Display In MA Waiting List) vr Rejected
	 * By Approving Authority(Display In MO Waiting List) ar Rejected
	 * Perusing Authority (Display In Approving Authority Waiting List)
	 */
	String rejectStatus = "";
	if (request.getParameter("rejectStatus") != null) {
		rejectStatus = request.getParameter("rejectStatus").trim();
	}
	mapDetails.put("rejectStatus", rejectStatus);
	map = medicalBoardHandlerService.rejectMedicalBoardEntry(mapDetails);

	String jsp = "";
	String title = "";
	map = medicalBoardHandlerService
			.showMedicalOfficerAppointmentInitial(mapForDS);
	jsp = "mb_medicalBoardInitialMedicalOfficerAppointment";

	jsp += ".jsp";
	title = "Medical Board Proceeding Search";
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("index", "map", map);
}

public ModelAndView validateMedExam(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	Box box = HMSUtil.getBox(request);
	HttpSession session = request.getSession();
	int userId = 0;
	String medicalType = null;
	Users user = (Users) session.getAttribute("users");
	userId = user.getId();
	/*
	 * if(request.getParameter(FM_DM) != null &&
	 * !request.getParameter(FM_DM).equals("")){
	 * box.put("FM_DM",request.getParameter(FM_DM)); }
	 */
	if (request.getParameter(SIGNED_BY) != null
			&& !request.getParameter(SIGNED_BY).equals("")) {
		box.put("SIGNED_BY", request.getParameter(SIGNED_BY));
	}
	if (request.getParameter(APPROVED_BY) != null
			&& !request.getParameter(APPROVED_BY).equals("")) {
		box.put("APPROVED_BY", request.getParameter(APPROVED_BY));
	}
	if (request.getParameter(SEND_TO) != null
			&& !request.getParameter(SEND_TO).equals("")) {
		box.put("SEND_TO", request.getParameter(SEND_TO));
	}
	if (request.getParameter(MED_CAT_REC) != null
			&& !request.getParameter(MED_CAT_REC).equals("")) {
		box.put("MED_CAT_REC", request.getParameter(MED_CAT_REC));
	}
	if (request.getParameter(MEDICIN_REMARKS) != null
			&& !request.getParameter(MEDICIN_REMARKS).equals("")) {
		box.put("MEDICIN_REMARKS", request.getParameter(MEDICIN_REMARKS));
	}
	if (request.getParameter("MissTeeth") != null
			&& !request.getParameter("MissTeeth").equals("")) {
		box.put("MissTeeth", request.getParameter("MissTeeth"));
	}
	if (request.getParameter("UnserTeeth") != null
			&& !request.getParameter("UnserTeeth").equals("")) {
		box.put("UnserTeeth", request.getParameter("UnserTeeth"));
	}
	int medExamId = 0;
	if (request.getParameter("medExamId") != null
			&& !request.getParameter("medExamId").equals("0")) {
		medExamId = Integer.parseInt(request.getParameter("medExamId")
				.toString());
	}
	int visitId = 0;
	if (request.getParameter("visitId") != null) {
		visitId = Integer.parseInt(request.getParameter("visitId")
				.toString());
	}
	String medicalExamType = "";
	if (request.getParameter("medicalExamType") != null) {
		medicalExamType = (String) request.getParameter("medicalExamType");
	}
	String dgOrderNO = "";
	if (request.getParameter("dgOrderNO") != null) {
		dgOrderNO = (String) request.getParameter("dgOrderNO");
	}
	if (request.getParameter("medicalType") != null) {
		medicalType = (String) request.getParameter("medicalType");
	}
	int member1 = 0;
	int member2 = 0;
	int president = 0;
	String medRemarks = "";
	String medDate = "";
	if (request.getParameter("member1") != null) {
		member1 = Integer.parseInt(request.getParameter("member1"));
	}
	if (request.getParameter("member2") != null) {
		member2 = Integer.parseInt(request.getParameter("member2"));
	}
	if (request.getParameter("president") != null) {
		president = Integer.parseInt(request.getParameter("president"));
	}
	if (request.getParameter("medRemarks") != null) {
		medRemarks = (String) request.getParameter("medRemarks");
	}
	if (request.getParameter("medDate") != null) {
		medDate = (String) request.getParameter("medDate");
	}
	String digitalIndividuals = "";
	if (request.getParameter("digitalIndividuals") != null) {
		digitalIndividuals = (String) request
				.getParameter("digitalIndividuals");
	}
	box.put("digitalIndividuals", digitalIndividuals);

	box.put("medDate", medDate);
	box.put("medRemarks", medRemarks);
	box.put("president", president);
	box.put("member2", member2);
	box.put("member1", member1);
	// box.put("medicalType", medicalType);
	box.put("userId", userId);

	/*
	 * Code for Medical Board Details
	 */
	int medCatNowRecommend = 0;
	BigDecimal medboardDuration = new BigDecimal(0);
	String placeNextCat = "";
	String dateNextBoard = "";
	String opinionMedicalBoard = "";
	String dissentNotes = "";
	String medComposite = "";
	String empRestrictions = "";
	String instructions = "";
	String shapeFactorRec="";
	String finalMedCat ="";
	if (request.getParameter("medCatPeriod") != null  && !request.getParameter("medCatPeriod").equals("")) {
		if (request.getParameter("medCatDuration") != null) {
			String medCatDuration = request.getParameter("medCatDuration");
			 finalMedCat = request.getParameter("medCatPeriod").concat(" ").concat(medCatDuration);
		}
	}
	if (request.getParameter("shapeFactorRec") != null
			&& !request.getParameter("shapeFactorRec").equals("")) {
		shapeFactorRec =request.getParameter("shapeFactorRec");
	}
	if (request.getParameter("medCatNowRecommend") != null
			&& !request.getParameter("medCatNowRecommend").equals("")) {
		medCatNowRecommend = Integer.parseInt(request
				.getParameter("medCatNowRecommend"));
	}
	if (request.getParameter("medboardDuration") != null
			&& !request.getParameter("medboardDuration").equals("")) {
		medboardDuration = new BigDecimal(request
				.getParameter("medboardDuration"));

	}
	if (request.getParameter("placeNextCat") != null
			&& !request.getParameter("placeNextCat").equals("")) {
		placeNextCat = request.getParameter("placeNextCat");

	}
	/*
	 * if(req.getParameter("dateNextBoard") != null &&
	 * !req.getParameter("dateNextBoard").equals("")) {
	 * dateNextBoard=req.getParameter("dateNextBoard"); }
	 */
	if (request.getParameter("opinionMedicalBoard") != null
			&& !request.getParameter("opinionMedicalBoard").equals("")) {
		opinionMedicalBoard = request.getParameter("opinionMedicalBoard");

	}

	if (request.getParameter("dissentNotes") != null
			&& !request.getParameter("dissentNotes").equals("")) {
		dissentNotes = request.getParameter("dissentNotes");

	}
	if (request.getParameter("medComposite") != null) {
		medComposite = request.getParameter("medComposite");

	}
	if (request.getParameter("empRestrictions") != null
			&& !request.getParameter("empRestrictions").equals("")) {
		empRestrictions = request.getParameter("empRestrictions");

	}
	if (request.getParameter("instructions") != null
			&& !request.getParameter("instructions").equals("")) {
		instructions = request.getParameter("instructions");

	}
	if (medCatNowRecommend > 0) {
		Category category = new Category();
		category.setCategoryid(medCatNowRecommend);
		/*
		 * label Med Cat Rec
		 */

	}

	if (request.getParameter("dateNextBoard") != null
			&& !request.getParameter("dateNextBoard").equals("")) {
		dateNextBoard = request.getParameter("dateNextBoard");

	}

	/*
	 * Composite should Bigdecimal
	 */
	/*
	 * if(!medComposite.equals("")){ //
	 * masMedicalBoardProceedings.setMedComposite
	 * (Integer.parseInt(medComposite));
	 * masMedicalBoardProceedings.setMedComposite(medComposite); }else{
	 * masMedicalBoardProceedings.setMedComposite("0"); }
	 */
	box.put("shapeFactorRec,",shapeFactorRec);
	box.put("finalMedCat",finalMedCat);
	box.put("medCatNowRecommend", medCatNowRecommend);
	box.put("placeNextCat", placeNextCat);
	box.put("dateNextBoard", dateNextBoard);
	box.put("opinionMedicalBoard", opinionMedicalBoard);
	box.put("dissentNotes", dissentNotes);
	box.put("empRestrictions", empRestrictions);
	// two is missing
	box.put("medComposite", medComposite);
	box.put("instructions", instructions);
	/*
	 * End fo Code for Medical Board Details
	 */
	/*
	 * Code for Medical Board Clinical Summary
	 */

	BigDecimal temperature = new BigDecimal(0);
	// String pulseRates="";
	String bp1 = "";
	String rr = "";
	String generalPhysicalExam = "";
	String cardiovascularSystem = "";

	String respairatorySystem = "";
	String gastroIntestinalSystem = "";
	String breakDown = "";
	String centralNervousSystem = "";

	String localExamination = "";
	String remarksClinical = "";
	// int referredToMhClinical=0;
	String referredToMhClinical = "";
	int opdDeptClinical = 0;

	if (request.getParameter("temperature") != null
			&& !request.getParameter("temperature").equals("")) {
		temperature = new BigDecimal(request.getParameter("temperature"));
	}
	if (request.getParameter("bp1") != null
			&& !request.getParameter("bp1").equals("")) {
		bp1 = request.getParameter("bp1");
	}

	if (request.getParameter("generalPhysicalExam") != null
			&& !request.getParameter("generalPhysicalExam").equals("")) {
		generalPhysicalExam = request.getParameter("generalPhysicalExam");
	}
	if (request.getParameter("cardiovascularSystem") != null
			&& !request.getParameter("cardiovascularSystem").equals("")) {
		cardiovascularSystem = request.getParameter("cardiovascularSystem");
	}
	if (request.getParameter("respairatorySystem") != null
			&& !request.getParameter("respairatorySystem").equals("")) {
		respairatorySystem = request.getParameter("respairatorySystem");
	}

	if (request.getParameter("gastroIntestinalSystem") != null
			&& !request.getParameter("gastroIntestinalSystem").equals("")) {
		gastroIntestinalSystem = request
				.getParameter("gastroIntestinalSystem");
	}
	if (request.getParameter(NERVOUS_BRAKDOWN) != null
			&& !request.getParameter(NERVOUS_BRAKDOWN).equals("")) {
		breakDown = request.getParameter(NERVOUS_BRAKDOWN);
	}
	if (request.getParameter("centralNervousSystem") != null
			&& !request.getParameter("centralNervousSystem").equals("")) {
		centralNervousSystem = request.getParameter("centralNervousSystem");
	}

	if (request.getParameter("localExamination") != null
			&& !request.getParameter("localExamination").equals("")) {
		localExamination = request.getParameter("localExamination");
	}
	if (request.getParameter("remarksClinical") != null
			&& !request.getParameter("remarksClinical").equals("")) {
		remarksClinical = request.getParameter("remarksClinical");
	}
	if (request.getParameter("rr") != null
			&& !request.getParameter("rr").equals("")) {
		rr = request.getParameter("rr");
	}

	if (request.getParameter("referredToMhClinical") != null
			&& !request.getParameter("referredToMhClinical").equals("")) {
		referredToMhClinical = request.getParameter("referredToMhClinical");
	}
	if (request.getParameter("opdDeptClinical") != null
			&& !request.getParameter("opdDeptClinical").equals("")) {
		opdDeptClinical = Integer.parseInt(request
				.getParameter("opdDeptClinical"));
	}
	box.put("temperature", temperature);
	box.put("bp1", bp1);
	box.put("generalPhysicalExam", generalPhysicalExam);
	box.put("cardiovascularSystem", cardiovascularSystem);
	box.put("respairatorySystem", respairatorySystem);
	box.put("gastroIntestinalSystem", gastroIntestinalSystem);
	box.put("breakDown", breakDown);
	box.put("centralNervousSystem", centralNervousSystem);
	box.put("localExamination", localExamination);
	box.put("remarksClinical", remarksClinical);
	box.put("rr", rr);
	box.put("referredToMhClinical", referredToMhClinical);
	box.put("opdDeptClinical", opdDeptClinical);
	String userSrNo = (String)session.getAttribute("userSrNo");
	box.put("userSrNo",userSrNo);
	
	map = medicalExamHandlerService.validateMedExam(box);
	boolean successfullyAdded = false;

	if (map.get("successfullyAdded") != null) {
		successfullyAdded = (Boolean) map.get("successfullyAdded");
	}
	String message = "";
	String jsp = "";
	if (successfullyAdded)
		message = "Record Validated Successfully";
	else
		message = "Some Problem Occured !!";
	if (map.get("dataMessage") != null && map.get("dataMessage") != "")
		message = (String) map.get("dataMessage");

	Map<String, Object> mapForDS = new HashMap<String, Object>();
	int hospitalId = 0;
	if (session.getAttribute(HOSPITAL_ID) != null) {
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	}
	mapForDS.put("hospitalId",hospitalId);
	// ------------------------------------------------------
	if (medicalExamType.equalsIgnoreCase("Medical Board AFMSF 16")) {
		
		
		map = medicalBoardHandlerService
				.showMedicalOfficerAppointmentInitial(mapForDS);
		jsp = MEDICAL_BOARD_EXAM_MSG;
		// map.put("medicalType", medicalType);
		map.put("medicalType", "MedicalBoard");
	} else if (medicalExamType
			.equalsIgnoreCase("Initial Medical Board AFMSF 15")
			|| medicalExamType
					.equalsIgnoreCase("Medical Board Review AFMSF 15")) {

	
		// map =
		// medicalExamHandlerService.showMedicalOfficerAppointment(hospitalId);
		// String jsp = "mb_medicalBoardSearchMedicalOfficerAppointment";
		map = medicalBoardHandlerService
				.showMedicalOfficerAppointmentInitial(mapForDS);
		// jsp = "mb_medicalBoardInitialMedicalOfficerAppointment";
		jsp = MEDICAL_BOARD_EXAM_MSG;
		map.put("medicalType", "MedicalBoard");
	}
	// String jsp = MEDICAL_BOARD_EXAM_MSG;
	jsp += ".jsp";
	title = "Medical Board Proceeding Search";
	map.put("printReport", "yes");
	map.put("visitId", visitId);

	map.put("medExamId", medExamId);
	map.put("medicalExamType", medicalExamType);
	map.put("dgOrderNO", dgOrderNO);
	map.put("message", message);
	map.put("contentJsp", jsp);
	return new ModelAndView("index", "map", map);
}

/*
 * Add Medical Board MA
 */
public ModelAndView addMedicalBoardMA16(HttpServletRequest req,
		HttpServletResponse res) {
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	String serviceNo = "";
	String rank = "";
	String place = "";
	if (req.getParameter(PLACE) != null
			&& !req.getParameter(PLACE).equals("")) {
		place = req.getParameter(PLACE);
	}
	String name = "";
	String unit = "";
	String serviceiaf = "";
	String branch = "";
	Date dob = null;
	String age = "";
	String typeOfCommunication = "";
	Date dateofcommun = null;
	String totalservice = "";
	String pastmedicalhistory = "";
	String presentmedicalhistory = "";
	String idealweight = "";
	String overweight = "";
	String waist = "";
	String chestfullexpansion = "";
	String bhi = "";
	String rangeofexpansion = "";
	String bodyfat = "";
	String signfoldthickness = "";
	String sportman = "";
	String actualweight = "";
	String lastame = "";
	Date entryDate = null;
	Date medicinExamDate = null;
	String lastChangedBy = "";
	String lastChangedTime = "";
	Date lastChangedDate = null;
	Date surgeyDate = null;
	int typeOfEntry = 0;
	String betchNo = "";
	String chestNo = "";
	String rollNo = "";
	int medicalExamHeld = 0;
	String medicalStatus = "";
	String fullName = "";
	Date dateOfBirth = null;
	int maritialStatus = 0;
	String service = "";
	String pNo = "";
	// String rank = "";
	String hoursOfFlown = "";
	String permanentAddress = "";
	String identification1 = "";
	String identification2 = "";
	String armsCrops = "";
	Date dateOfReporting = null;
	Date dateOfDischarge = null;
	Date dateOfCompletion = null;
	Date documentForwardDate = null;
	String documentForwardTo = "";
	String fromWhereHeReport = "";
	String hypertension = "";
	String heartDisease = "";
	String diabetes = "";
	String bleedingDisorder = "";
	String mentalDisease = "";
	String nightBlindness = "";
	String asthama = "";
	String dischargeFrom = "";
	String plesury = "";
	String earDieses = "";
	String rheumatism = "";
	String frequentCough = "";
	String chronicIndigestion = "";
	String nervousBrakdown = "";
	String kidenyBladder = "";
	String fitsFaintinngAttacks = "";
	String std = "";
	String serveHeadInjury = "";
	String joundice = "";
	String sickness = "";
	String breastDisease = "";
	String trachoma = "";
	String amenorrhoea = "";
	String nightbindness = "";
	String menirrhagia = "";
	String laserTeartement = "";
	String pregnancy = "";
	String abortion = "";
	String eyeDisease = "";
	String rejectedAsUnfit = "";
	String dischargeMedicallyUnfit = "";
	String adimmitedInHospitalFirIllness = "";
	String stateNature = "";
	String otherInform = "";
	BigDecimal height = new BigDecimal(0);
	BigDecimal weight = new BigDecimal(0);
	BigDecimal acceptableKg = new BigDecimal(0);
	BigDecimal leglength = new BigDecimal(0);
	String appereance = "";
	String albumin = "";
	String sugar = "";
	String spGraviry = "";
	String hbPercentage = "";
	String physique = "";
	String anyOtherInv = "";
	String skin = "";
	String abdomen = "";
	String heartSize = "";
	String sound = "";
	String rhythm = "";
	String arterialWalls = "";
	String pulseRates = "";
	String bp = "";
	String fullExpension = "";
	String rangeOfExpension = "";
	String selfBalR = "";
	String selfBalL = "";
	String speechMental = "";
	String endocrinCond = "";
	String otherAbnormalities = "";
	String medicinRemarks = "";
	String finger = "";
	String hand = "";
	String wrist = "";
	String elbows = "";
	String shoulderGridles = "";
	String cercival = "";
	String dorsalVertebrate = "";
	String hullux = "";
	String valgus = "";
	String riggus = "";
	String flatFeet = "";
	String joints = "";
	String pelvis = "";
	String gail = "";
	String lumberScaler = "";
	String roccyxVericose = "";
	String hydrocele = "";
	String varicocele = "";
	String underScende = "";
	String hemonhoids = "";
	String herinaMusic = "";
	String breasts = "";
	String surgeryRemarks = "";
	String respatorySystem = "";

	String withGlassesDistantR = "";
	String withglassesDistantL = "";
	String withGlassesNearR = "";
	String withGlassesNearL = "";
	String withGlassesNearCP = "";
	String withoutGlassesDistantR = "";
	String withoutGlassesDistantL = "";
	String withoutGlassesNearR = "";
	String withoutGlassesNearL = "";
	String withoutGlassesNearCP = "";
	BigDecimal convergenceCP = new BigDecimal(0);

	BigDecimal convergenceC = new BigDecimal(0);
	String accommodationR = "";
	String accommodationL = "";
	String eyeRemarks = "";
	Date eyeDate = null;
	BigDecimal hearingRFW = new BigDecimal(0);
	BigDecimal hearingLFW = new BigDecimal(0);
	BigDecimal hearingBothFW = new BigDecimal(0);
	BigDecimal hearingRCV = new BigDecimal(0);
	BigDecimal hearingLCV = new BigDecimal(0);
	BigDecimal hearingBothCV = new BigDecimal(0);

	String innerEarR = "";
	String innerEarL = "";
	String audiometryRecord = "";
	String nose = "";
	String throatEar = "";
	String earReamrks = "";
	Date earDate = null;
	String externalEarR = "";
	String externalEarL = "";
	String middleEarR = "";
	String middleEarL = "";
	String evidienceOfTrachoma = "";
	String binocular = "";
	String manifestHypermetropia = "";
	String coverTest = "";
	String diaphragmTest = "";
	String fundMedia = "";
	String fields = "";
	String nightVisualCapacity = "";

	String dentalRemarks = "";
	String denatlToMH = "no";
	Date dentalDate = null;
	String menstrualHistory = "";
	int noOfPregnancy = 0;
	int noOfAbortion = 0;
	int noOfChildren = 0;
	Date lastCondinement = null;
	String vaginalDischarge = "";
	String prolapse = "";
	String usgAbortion = "";
	String gyanaecologyRemarks = "";
	Date gyanaecologyDate = null;
	String medicalBoardExamination = "";
	int medicalBoardExaminationPlace = 0;
	Date medicalBoardExaminationDate = new Date();
	String subsequentMedicalBoardExam = "";
	int subsequentMedicalBoardExamPlace = 0;
	Date subsequentMedicalBoardExamDate = null;
	String ApprovingAuthority = "";
	int ApprovingAuthorityPlace = 0;
	Date ApprovingAuthorityDate = null;
	Date lmp = null;
	String totalTeeth = "";
	String totalDefectiveTeeth = "";
	String missingTeeth = "";
	String DenstalPoint = "";
	String unserviceableTeeth = "";
	String CocatHicNevreData = "";

	String dur8 = "";
	String dur7 = "";
	String dur6 = "";
	String dur5 = "";
	String dur4 = "";
	String dur3 = "";
	String dur2 = "";
	String dur1 = "";
	String dul8 = "";
	String dul7 = "";
	String dul6 = "";
	String dul5 = "";
	String dul4 = "";
	String dul3 = "";
	String dul2 = "";
	String dul1 = "";
	String dlr8 = "";
	String dlr7 = "";
	String dlr6 = "";
	String dlr5 = "";
	String dlr4 = "";
	String dlr3 = "";
	String dlr2 = "";
	String dlr1 = "";
	String dll8 = "";
	String dll7 = "";
	String dll6 = "";
	String dll5 = "";
	String dll4 = "";
	String dll3 = "";
	String dll2 = "";
	String dll1 = "";
	String mur8 = "";
	String mur7 = "";
	String mur6 = "";
	String mur5 = "";
	String mur4 = "";
	String mur3 = "";
	String mur2 = "";
	String mur1 = "";
	String mul8 = "";
	String mul7 = "";
	String mul6 = "";
	String mul5 = "";
	String mul4 = "";
	String mul3 = "";
	String mul2 = "";
	String mul1 = "";
	String mlr8 = "";
	String mlr7 = "";
	String mlr6 = "";
	String mlr5 = "";
	String mlr4 = "";
	String mlr3 = "";
	String mlr2 = "";
	String mlr1 = "";
	String mll8 = "";
	String mll7 = "";
	String mll6 = "";
	String mll5 = "";
	String mll4 = "";
	String mll3 = "";
	String mll2 = "";
	String mll1 = "";
	String uur8 = "";
	String uur7 = "";
	String uur6 = "";
	String uur5 = "";
	String uur4 = "";
	String uur3 = "";
	String uur2 = "";
	String uur1 = "";
	String uul8 = "";
	String uul7 = "";
	String uul6 = "";
	String uul5 = "";
	String uul4 = "";
	String uul3 = "";
	String uul2 = "";
	String uul1 = "";
	String ulr8 = "";
	String ulr7 = "";
	String ulr6 = "";
	String ulr5 = "";
	String ulr4 = "";
	String ulr3 = "";
	String ulr2 = "";
	String ulr1 = "";
	String ull8 = "";
	String ull7 = "";
	String ull6 = "";
	String ull5 = "";
	String ull4 = "";
	String ull3 = "";
	String ull2 = "";
	String ull1 = "";

	String sur8 = "";
	String sur7 = "";
	String sur6 = "";
	String sur5 = "";
	String sur4 = "";
	String sur3 = "";
	String sur2 = "";
	String sur1 = "";
	String sul8 = "";
	String sul7 = "";
	String sul6 = "";
	String sul5 = "";
	String sul4 = "";
	String sul3 = "";
	String sul2 = "";
	String sul1 = "";

	String slr8 = "";
	String slr7 = "";
	String slr6 = "";
	String slr5 = "";
	String slr4 = "";
	String slr3 = "";
	String slr2 = "";
	String slr1 = "";
	String sll8 = "";
	String sll7 = "";
	String sll6 = "";

	String sll5 = "";
	String sll4 = "";
	String sll3 = "";
	String sll2 = "";
	String sll1 = "";
	HttpSession session = req.getSession();
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	int userId = 0;
	Users user = (Users) session.getAttribute("users");
	userId = user.getId();

	int commandId = (Integer) session.getAttribute("commandId");

	Map<String, Object> map = new HashMap<String, Object>();
	// Box box = HMSUtil.getBox(req);
	MasMedicalExaminationReportOnEntry masMedicalBoardProceedings = new MasMedicalExaminationReportOnEntry();

	Map<String, Object> generalMap = new HashMap<String, Object>();
	List<MasMedicalBoardExaminationDetail> masMedicalBoardDetails = new ArrayList<MasMedicalBoardExaminationDetail>();
	if (req.getParameter(SERVICE_NO) != null
			&& !req.getParameter(SERVICE_NO).equals("")) {
		serviceNo = req.getParameter(SERVICE_NO);
	}
	if (req.getParameter(AGE) != null && !req.getParameter(AGE).equals("")) {
		age = req.getParameter(AGE);
	}
	if (req.getParameter(TOTAL_SERVICE) != null
			&& !req.getParameter(TOTAL_SERVICE).equals("")) {
		totalservice = req.getParameter(TOTAL_SERVICE);
	}
	if (req.getParameter("serviceiaf") != null
			&& !req.getParameter("serviceiaf").equals("")) {
		serviceiaf = req.getParameter("serviceiaf");
	}

	if (req.getParameter("typeOfCommunication") != null
			&& !req.getParameter("typeOfCommunication").equals("")) {
		typeOfCommunication = req.getParameter("typeOfCommunication");
	}
	if (req.getParameter(DATE_COMMENCEMENT) != null
			&& !req.getParameter(DATE_COMMENCEMENT).equals("")) {
		dateofcommun = HMSUtil.dateFormatterDDMMYYYY(req
				.getParameter(DATE_COMMENCEMENT));
	}
	if (req.getParameter(PAST_MEDICAL_HISTORY) != null
			&& !req.getParameter(PAST_MEDICAL_HISTORY).equals("")) {
		pastmedicalhistory = req.getParameter(PAST_MEDICAL_HISTORY);
	}
	if (req.getParameter(PRESENT_MEDICAL_CATEGORY) != null
			&& !req.getParameter(PRESENT_MEDICAL_CATEGORY).equals("")) {
		presentmedicalhistory = req.getParameter(PRESENT_MEDICAL_CATEGORY);
	}
	if (req.getParameter(LAST_AME) != null
			&& !req.getParameter(LAST_AME).equals("")) {
		lastame = req.getParameter(LAST_AME);
	}// if (req.getParameter(HEIGHT_WITHOUT_SHOOSE) != null ) {
	// weight = req.getParameter(HEIGHT_WITHOUT_SHOOSE);
	// }
	if (req.getParameter(ACTUAL_WEIGHT) != null
			&& !req.getParameter(ACTUAL_WEIGHT).equals("")) {
		actualweight = req.getParameter(ACTUAL_WEIGHT);
	}
	if (req.getParameter(IDEAL_WEIGHT) != null
			&& !req.getParameter(IDEAL_WEIGHT).equals("")) {
		idealweight = req.getParameter(IDEAL_WEIGHT);
	}
	if (req.getParameter(OVER_WEIGHT) != null
			&& !req.getParameter(OVER_WEIGHT).equals("")) {
		overweight = req.getParameter(OVER_WEIGHT);
	}
	if (req.getParameter(WAIST) != null
			&& !req.getParameter(WAIST).equals("")) {
		waist = req.getParameter(WAIST);
	}
	if (req.getParameter(CHEST_FULL) != null
			&& !req.getParameter(CHEST_FULL).equals("")) {
		chestfullexpansion = req.getParameter(CHEST_FULL);
	}
	if (req.getParameter(RANGE_EXPANSION) != null
			&& !req.getParameter(RANGE_EXPANSION).equals("")) {
		rangeofexpansion = req.getParameter(RANGE_EXPANSION);
	}
	if (req.getParameter(BHI) != null && !req.getParameter(BHI).equals("")) {
		bhi = req.getParameter(BHI);
	}
	if (req.getParameter(BODY_FAT) != null
			&& !req.getParameter(BODY_FAT).equals("")) {
		bodyfat = req.getParameter(BODY_FAT);
	}
	if (req.getParameter(THICKNESS) != null
			&& !req.getParameter(THICKNESS).equals("")) {
		signfoldthickness = req.getParameter(THICKNESS);
	}
	if (req.getParameter(SPORTS) != null
			&& !req.getParameter(SPORTS).equals("")) {
		sportman = req.getParameter(SPORTS);
	}
	int deptId = 0;
	int empId = 0;
	int hinId = 0;
	int visitId = 0;
	if (req.getParameter("deptId") != null
			&& !req.getParameter("deptId").equals("0")) {
		deptId = Integer.parseInt(req.getParameter("deptId"));
	}
	if (req.getParameter("empId") != null
			&& !req.getParameter("empId").equals("0")) {
		empId = Integer.parseInt(req.getParameter("empId"));
	}
	if (req.getParameter("hinId") != null
			&& !req.getParameter("hinId").equals("0")) {
		hinId = Integer.parseInt(req.getParameter("hinId"));
	}
	if (req.getParameter("visitId") != null
			&& !req.getParameter("visitId").equals("0")) {
		visitId = Integer.parseInt(req.getParameter("visitId"));
	}
	List<String> chargeCodeIdList = new ArrayList<String>();
	List<Integer> quantityList = new ArrayList<Integer>();
	List<String> investigationReferToMHList = new ArrayList<String>();
	List<Integer> patientInvestigationdetailsIdList = new ArrayList<Integer>();

	int patientInvestigationHeaderId = 0;
	if (req.getParameter("patientInvestigationHeaderId") != null
			&& !req.getParameter("patientInvestigationHeaderId").equals("")) {
		patientInvestigationHeaderId = Integer.parseInt(req
				.getParameter("patientInvestigationHeaderId"));
	}

	String clinicalNotes1 = "";
	if (req.getParameter("clinicalNotes1") != null
			&& !(req.getParameter("clinicalNotes1").equals(""))) {
		clinicalNotes1 = req.getParameter("clinicalNotes1");
	}

	int hiddenValue = 1;
	if (Integer.parseInt(req.getParameter("hiddenValue")) != 1) {
		hiddenValue = Integer.parseInt(req.getParameter("hiddenValue"));
	}
	String deleatedValue = "";
	if (req.getParameter("deleatedValue") != null
			&& !req.getParameter("deleatedValue").equals("")) {
		deleatedValue = req.getParameter("deleatedValue");

	}
	mapForDS.put("deleatedValue", deleatedValue);

	/*
	 * int temp = 1; List<Integer> dgOrderdtIdList = new
	 * ArrayList<Integer>(); String[] chargeCodeIdArr = new
	 * String[hiddenValue]; for (int i = 0; i < hiddenValue; i++) { if
	 * (req.getParameter("chargeCodeName" + temp) != null &&
	 * !req.getParameter("chargeCodeName" + temp) .equals("")) {
	 * 
	 * String chargeCodeNameWithId = req .getParameter("chargeCodeName" +
	 * temp); int index1 = chargeCodeNameWithId.lastIndexOf("["); int index2
	 * = chargeCodeNameWithId.lastIndexOf("]"); index1++; String
	 * chargeCodeId = chargeCodeNameWithId.substring(index1, index2);
	 * //patientInvestigationdetailsIdList if (!chargeCodeId.equals("")) {
	 * chargeCodeIdArr[i] = chargeCodeId; int qty = 1; // int //
	 * qty=Integer.parseInt(request.getParameter("qty"+temp)); // String
	 * clinicalNotes = request.getParameter("clinicalNotes" + temp);
	 * 
	 * chargeCodeIdList.add(chargeCodeIdArr[i]); quantityList.add(qty);
	 * //clinicalList.add(clinicalNotes); } } if
	 * (req.getParameter("patientInvestigationdetailsId" + temp) != null &&
	 * !req.getParameter("patientInvestigationdetailsId" + temp)
	 * .equals("")) {
	 * patientInvestigationdetailsIdList.add(Integer.parseInt(
	 * req.getParameter("patientInvestigationdetailsId" + temp))); } if
	 * (req.getParameter("dgOrderdtId" + temp) != null &&
	 * !req.getParameter("dgOrderdtId" + temp) .equals("")) {
	 * dgOrderdtIdList.add(Integer.parseInt(req.getParameter("dgOrderdtId" +
	 * temp)));
	 * 
	 * } temp++; }
	 */
	int temp = 1;
	// List<Integer> patientInvestigationdetailsIdList = new
	// ArrayList<Integer>();
	List<Integer> dgOrderdtIdList = new ArrayList<Integer>();
	String[] chargeCodeIdArr = new String[hiddenValue];
	for (int i = 0; i < hiddenValue; i++) {
		if (req.getParameter("chargeCodeName" + temp) != null
				&& !req.getParameter("chargeCodeName" + temp).equals("")) {

			String chargeCodeNameWithId = req.getParameter("chargeCodeName"
					+ temp);
			int index1 = chargeCodeNameWithId.lastIndexOf("[");
			int index2 = chargeCodeNameWithId.lastIndexOf("]");
			index1++;
			String chargeCodeId = chargeCodeNameWithId.substring(index1,
					index2);
			if (!chargeCodeId.equals("")) {
				chargeCodeIdArr[i] = chargeCodeId;
				int qty = 1;
				if (req.getParameter("investigationReferToMH" + temp) != null) {
					investigationReferToMHList.add(req
							.getParameter("investigationReferToMH" + temp));
				} else {
					investigationReferToMHList.add("n");
				}
				// int
				// qty=Integer.parseInt(request.getParameter("qty"+temp));
				// String clinicalNotes =
				// request.getParameter("clinicalNotes" + temp);

				chargeCodeIdList.add(chargeCodeIdArr[i]);
				quantityList.add(qty);
				// clinicalList.add(clinicalNotes);
			}
		}
		if (req.getParameter("patientInvestigationdetailsId" + temp) != null
				&& !req
						.getParameter(
								"patientInvestigationdetailsId" + temp)
						.equals("")) {
			patientInvestigationdetailsIdList.add(Integer.parseInt(req
					.getParameter("patientInvestigationdetailsId" + temp)));
		}
		if (req.getParameter("dgOrderdtId" + temp) != null
				&& !req.getParameter("dgOrderdtId" + temp).equals("")) {
			dgOrderdtIdList.add(Integer.parseInt(req
					.getParameter("dgOrderdtId" + temp)));
		}
		temp++;
	}

	// ----------------------------------------------------------------------------------------------
	String alcohol = "";
	if (req.getParameter("alcohol") != null
			&& !req.getParameter("alcohol").equals("")) {
		alcohol = req.getParameter("alcohol");
	}

	// -----------------------------------------------------------------------
	String[] familyHistoryArray = null;
	if (req.getParameterValues(FM_DM) != null
			&& !(req.getParameterValues(FM_DM).equals(""))) {
		familyHistoryArray = (String[]) req.getParameterValues(FM_DM);
		mapForDS.put("familyHistoryArray", familyHistoryArray);
	}
	String otherFamilyHistory = "";
	if (req.getParameter("otherFamilyHistory") != null
			&& !req.getParameter("otherFamilyHistory").equals("")) {
		otherFamilyHistory = req.getParameter("otherFamilyHistory");
		mapForDS.put("otherFamilyHistory", otherFamilyHistory);
	}

	// -----------------------------------------------------------------------------------------------

	if (req.getParameter(ENTRY_OF_DATE) != null
			&& !(req.getParameter(ENTRY_OF_DATE).equals(""))) {
		entryDate = HMSUtil.dateFormatterDDMMYYYY(req
				.getParameter(ENTRY_OF_DATE));
	}
	if (req.getParameter(TYPE_OF_ENTRY) != null
			&& !(req.getParameter(TYPE_OF_ENTRY).equals(""))) {
		typeOfEntry = Integer.parseInt(req.getParameter(TYPE_OF_ENTRY));
	}
	if (req.getParameter(BATCH1_NO) != null
			&& !(req.getParameter(BATCH1_NO).equals(""))) {
		betchNo = req.getParameter(BATCH1_NO);
	}
	if (req.getParameter(CHEST_NO) != null
			&& !(req.getParameter(CHEST_NO).equals(""))) {
		chestNo = req.getParameter(CHEST_NO);
	}

	if (req.getParameter(ROLL_NO) != null
			&& !(req.getParameter(ROLL_NO).equals(""))) {
		rollNo = req.getParameter(ROLL_NO);
	}

	if (req.getParameter(MEDICAL_EXAM_HELD_AT) != null
			&& !(req.getParameter(MEDICAL_EXAM_HELD_AT).equals("0"))) {
		medicalExamHeld = Integer.parseInt(req
				.getParameter(MEDICAL_EXAM_HELD_AT));
	}

	if (req.getParameter(MEDICAL_STATUS) != null
			&& !(req.getParameter(MEDICAL_STATUS).equals(""))) {
		medicalStatus = req.getParameter(MEDICAL_STATUS);
	}
	if (req.getParameter(FULL_NAME) != null
			&& !(req.getParameter(FULL_NAME).equals(""))) {
		fullName = req.getParameter(FULL_NAME);
	}

	if (req.getParameter(DATE_OF_BIRTH) != null
			&& !(req.getParameter(DATE_OF_BIRTH).equals(""))) {
		dateOfBirth = HMSUtil.dateFormatterDDMMYYYY(req
				.getParameter(DATE_OF_BIRTH));
	}

	if (req.getParameter(MARITIAL_STATUS) != null
			&& !(req.getParameter(MARITIAL_STATUS).equals(""))) {
		maritialStatus = Integer
				.parseInt(req.getParameter(MARITIAL_STATUS));
	}

	if (req.getParameter(SERVICE) != null
			&& !(req.getParameter(SERVICE).equals(""))) {
		service = req.getParameter(SERVICE);
	}

	if (req.getParameter(P_NO) != null
			&& !(req.getParameter(P_NO).equals(""))) {
		pNo = req.getParameter(P_NO);
	}

	if (req.getParameter(RANK) != null
			&& !(req.getParameter(RANK).equals(""))) {
		rank = req.getParameter(RANK);
	}

	if (req.getParameter(HOURS_OF_FLOWN) != null
			&& !(req.getParameter(HOURS_OF_FLOWN).equals(""))) {
		hoursOfFlown = req.getParameter(HOURS_OF_FLOWN);
	}
	if (req.getParameter(PERMANENT_ADDRESS) != null
			&& !(req.getParameter(PERMANENT_ADDRESS).equals(""))) {
		permanentAddress = req.getParameter(PERMANENT_ADDRESS);
	}

	if (req.getParameter(IDENTIFICATION_MARKS1) != null
			&& !(req.getParameter(IDENTIFICATION_MARKS1).equals(""))) {
		identification1 = req.getParameter(IDENTIFICATION_MARKS1);
	}

	if (req.getParameter(IDENTIFICATION_MARKS2) != null
			&& !(req.getParameter(IDENTIFICATION_MARKS2).equals(""))) {
		identification2 = req.getParameter(IDENTIFICATION_MARKS2);
	}

	if (req.getParameter(ARMS_CROPS) != null
			&& !(req.getParameter(ARMS_CROPS).equals(""))) {
		armsCrops = req.getParameter(ARMS_CROPS);
	}

	if (req.getParameter(DATE_OF_COMPLETION) != null
			&& !(req.getParameter(DATE_OF_COMPLETION).equals(""))) {
		dateOfCompletion = HMSUtil.dateFormatterDDMMYYYY(req
				.getParameter(DATE_OF_COMPLETION));
	}

	if (req.getParameter(DOCUMENT_FORWARD_DATE1) != null
			&& !(req.getParameter(DOCUMENT_FORWARD_DATE1).equals(""))) {
		documentForwardDate = HMSUtil.dateFormatterDDMMYYYY(req
				.getParameter(DOCUMENT_FORWARD_DATE1));

	}

	if (req.getParameter(DOCUMENT_FORWARD_TO) != null
			&& !(req.getParameter(DOCUMENT_FORWARD_TO).equals(""))) {
		documentForwardTo = req.getParameter(DOCUMENT_FORWARD_TO);
	}
	if (req.getParameter(DATE_OF_REPORTING) != null
			&& !(req.getParameter(DATE_OF_REPORTING).equals(""))) {
		dateOfReporting = HMSUtil.dateFormatterDDMMYYYY(req
				.getParameter(DATE_OF_REPORTING));

	}
	if (req.getParameter("dateOfDischarge") != null
			&& !(req.getParameter("dateOfDischarge").equals(""))) {
		dateOfDischarge = HMSUtil.dateFormatterDDMMYYYY(req
				.getParameter("dateOfDischarge"));

	}

	if (req.getParameter(FROM_WHERE_HE_REPORT) != null
			&& !(req.getParameter(FROM_WHERE_HE_REPORT).equals(""))) {
		fromWhereHeReport = req.getParameter(FROM_WHERE_HE_REPORT);
	}
	if (req.getParameter(HYPERTENSION) != null
			&& !(req.getParameter(HYPERTENSION).equals(""))) {
		hypertension = req.getParameter(HYPERTENSION);
	}
	if (req.getParameter(HEAR_DISEASE) != null
			&& !(req.getParameter(HEAR_DISEASE).equals(""))) {
		heartDisease = req.getParameter(HEAR_DISEASE);
	}
	if (req.getParameter(DIABETES) != null
			&& !(req.getParameter(DIABETES).equals(""))) {
		diabetes = req.getParameter(DIABETES);
	}
	if (req.getParameter(BLEEDING_DIORDER) != null
			&& !(req.getParameter(BLEEDING_DIORDER).equals(""))) {
		bleedingDisorder = req.getParameter(BLEEDING_DIORDER);
	}
	if (req.getParameter(MENTAL_DISEASE) != null
			&& !(req.getParameter(MENTAL_DISEASE).equals(""))) {
		mentalDisease = req.getParameter(MENTAL_DISEASE);
	}
	if (req.getParameter(NIGHT_BLINDNESS) != null
			&& !(req.getParameter(NIGHT_BLINDNESS).equals(""))) {
		nightBlindness = req.getParameter(NIGHT_BLINDNESS);
	}

	if (req.getParameter(ASTHAMA) != null
			&& !(req.getParameter(ASTHAMA).equals(""))) {
		asthama = req.getParameter(ASTHAMA);
	}

	if (req.getParameter(DISCHARGE_FROM) != null
			&& !(req.getParameter(DISCHARGE_FROM).equals(""))) {
		dischargeFrom = req.getParameter(DISCHARGE_FROM);

	}

	if (req.getParameter(PLEURISY) != null
			&& !(req.getParameter(PLEURISY).equals(""))) {
		plesury = req.getParameter(PLEURISY);
	}

	if (req.getParameter(EAR_DISEASE) != null
			&& !(req.getParameter(EAR_DISEASE).equals(""))) {
		earDieses = req.getParameter(EAR_DISEASE);
	}

	if (req.getParameter(RHEUMATISM) != null
			&& !(req.getParameter(RHEUMATISM).equals(""))) {
		rheumatism = req.getParameter(RHEUMATISM);
	}
	if (req.getParameter(FREQUENT_CAUGH) != null
			&& !(req.getParameter(FREQUENT_CAUGH).equals(""))) {
		frequentCough = req.getParameter(FREQUENT_CAUGH);
	}

	if (req.getParameter(CHRONIC_INDIGESTION) != null
			&& !(req.getParameter(CHRONIC_INDIGESTION).equals(""))) {
		chronicIndigestion = req.getParameter(CHRONIC_INDIGESTION);
	}
	if (req.getParameter(NERVOUS_BRAKDOWN) != null
			&& !(req.getParameter(NERVOUS_BRAKDOWN).equals(""))) {
		nervousBrakdown = req.getParameter(NERVOUS_BRAKDOWN);
	}

	if (req.getParameter(KIDENY_BLADDER) != null
			&& !(req.getParameter(KIDENY_BLADDER).equals(""))) {
		kidenyBladder = req.getParameter(KIDENY_BLADDER);
	}
	if (req.getParameter(FITS_FAINTING_ATTACKS) != null
			&& !(req.getParameter(FITS_FAINTING_ATTACKS).equals(""))) {
		fitsFaintinngAttacks = req.getParameter(FITS_FAINTING_ATTACKS);
	}
	if (req.getParameter(STD) != null
			&& !(req.getParameter(STD).equals(""))) {
		std = req.getParameter(STD);
	}

	if (req.getParameter(SEVERE_HEAD_INJURY) != null
			&& !(req.getParameter(SEVERE_HEAD_INJURY).equals(""))) {
		serveHeadInjury = req.getParameter(SEVERE_HEAD_INJURY);
	}

	if (req.getParameter(JOUNDICE) != null
			&& !(req.getParameter(JOUNDICE).equals(""))) {
		joundice = req.getParameter(JOUNDICE);
	}
	if (req.getParameter(SICKNESS) != null
			&& !(req.getParameter(SICKNESS).equals(""))) {
		sickness = req.getParameter(SICKNESS);
	}
	if (req.getParameter(BREAST_DISEASE) != null
			&& !(req.getParameter(BREAST_DISEASE).equals(""))) {
		breastDisease = req.getParameter(BREAST_DISEASE);
	}
	if (req.getParameter(TRACHOMA) != null
			&& !(req.getParameter(TRACHOMA).equals(""))) {
		trachoma = req.getParameter(TRACHOMA);
	}

	if (req.getParameter(AMENORRHOEA) != null
			&& !(req.getParameter(AMENORRHOEA).equals(""))) {
		amenorrhoea = req.getParameter(AMENORRHOEA);
	}
	if (req.getParameter(NIGHT_BINDNESS) != null
			&& !(req.getParameter(NIGHT_BINDNESS).equals(""))) {
		nightbindness = req.getParameter(NIGHT_BINDNESS);
	}
	if (req.getParameter(MENORRHAGIA) != null
			&& !(req.getParameter(MENORRHAGIA).equals(""))) {
		menirrhagia = req.getParameter(MENORRHAGIA);
	}
	if (req.getParameter(LASER_TREATEMENT) != null
			&& !(req.getParameter(LASER_TREATEMENT).equals(""))) {
		laserTeartement = req.getParameter(LASER_TREATEMENT);
	}
	if (req.getParameter(PREGNANCY) != null
			&& !(req.getParameter(PREGNANCY).equals(""))) {
		pregnancy = req.getParameter(PREGNANCY);
	}
	if (req.getParameter(EYE_DISEASE) != null
			&& !(req.getParameter(EYE_DISEASE).equals(""))) {
		eyeDisease = req.getParameter(EYE_DISEASE);
	}
	if (req.getParameter(REJECTED_AS_UNFIT) != null
			&& !(req.getParameter(REJECTED_AS_UNFIT).equals(""))) {
		rejectedAsUnfit = req.getParameter(REJECTED_AS_UNFIT);
	}
	if (req.getParameter(DISCHARGE_MEDICALLY_UNFIT) != null
			&& !(req.getParameter(DISCHARGE_MEDICALLY_UNFIT).equals(""))) {
		dischargeMedicallyUnfit = req
				.getParameter(DISCHARGE_MEDICALLY_UNFIT);
	}
	if (req.getParameter(ADIMMITED_IN_HOSPITAL_FOR_ILLNESS) != null
			&& !(req.getParameter(ADIMMITED_IN_HOSPITAL_FOR_ILLNESS)
					.equals(""))) {
		adimmitedInHospitalFirIllness = req
				.getParameter(ADIMMITED_IN_HOSPITAL_FOR_ILLNESS);
	}
	if (req.getParameter(ABORTION) != null
			&& !(req.getParameter(ABORTION).equals(""))) {
		abortion = req.getParameter(ABORTION);
	}

	if (req.getParameter(STATE_NATURE_OF_THE_DISEASE) != null
			&& !(req.getParameter(STATE_NATURE_OF_THE_DISEASE).equals(""))) {
		stateNature = req.getParameter(STATE_NATURE_OF_THE_DISEASE);
	}
	if (req.getParameter(OTHER_INFORMATION) != null
			&& !(req.getParameter(OTHER_INFORMATION).equals(""))) {
		otherInform = req.getParameter(OTHER_INFORMATION);
	}
	if (req.getParameter(HEIGHT_WITHOUT_SHOOSE) != null
			&& !(req.getParameter(HEIGHT_WITHOUT_SHOOSE).equals(""))) {
		height = (new BigDecimal(req.getParameter(HEIGHT_WITHOUT_SHOOSE)));
	}
	if (req.getParameter(ACTUAL_WEIGHT) != null
			&& !(req.getParameter(ACTUAL_WEIGHT).equals(""))) {
		weight = (new BigDecimal(req.getParameter(ACTUAL_WEIGHT)));
	}
	if (req.getParameter(ACCEPTABLE_KG) != null
			&& !(req.getParameter(ACCEPTABLE_KG).equals(""))) {
		acceptableKg = (new BigDecimal(req.getParameter(ACCEPTABLE_KG)));
	}
	if (req.getParameter(LEG_LENGTH) != null
			&& !(req.getParameter(LEG_LENGTH).equals(""))) {
		leglength = (new BigDecimal(req.getParameter(LEG_LENGTH)));
	}
	if (req.getParameter(APPEREANCE) != null
			&& !(req.getParameter(APPEREANCE).equals(""))) {
		appereance = req.getParameter(APPEREANCE);
	}
	if (req.getParameter(ALBUMIN) != null
			&& !(req.getParameter(ALBUMIN).equals(""))) {
		albumin = req.getParameter(ALBUMIN);
	}
	if (req.getParameter(SUGAR) != null
			&& !(req.getParameter(SUGAR).equals(""))) {
		sugar = req.getParameter(SUGAR);
	}
	if (req.getParameter(SP_GRAVITY) != null
			&& !(req.getParameter(SP_GRAVITY).equals(""))) {
		spGraviry = req.getParameter(SP_GRAVITY);
	}
	if (req.getParameter(HB_PERCENTAGE) != null
			&& !(req.getParameter(HB_PERCENTAGE).equals(""))) {
		hbPercentage = req.getParameter(HB_PERCENTAGE);
	}
	if (req.getParameter(PHYSIQUE) != null
			&& !(req.getParameter(PHYSIQUE).equals(""))) {
		physique = req.getParameter(PHYSIQUE);
	}

	if (req.getParameter(ANYOTHER_INV_CARRIED_OUT) != null
			&& !(req.getParameter(ANYOTHER_INV_CARRIED_OUT).equals(""))) {
		anyOtherInv = req.getParameter(ANYOTHER_INV_CARRIED_OUT);
	}
	if (req.getParameter(SKIN) != null
			&& !(req.getParameter(SKIN).equals(""))) {
		skin = req.getParameter(SKIN);
	}
	if (req.getParameter(ABDOMEN) != null
			&& !(req.getParameter(ABDOMEN).equals(""))) {
		abdomen = req.getParameter(ABDOMEN);
	}
	if (req.getParameter(HEART_SIZE) != null
			&& !(req.getParameter(HEART_SIZE).equals(""))) {
		heartSize = req.getParameter(HEART_SIZE);
	}
	if (req.getParameter(SOUND) != null
			&& !(req.getParameter(SOUND).equals(""))) {
		sound = req.getParameter(SOUND);
	}
	if (req.getParameter(RHYTHM) != null
			&& !(req.getParameter(RHYTHM).equals(""))) {
		rhythm = req.getParameter(RHYTHM);
	}
	if (req.getParameter(ARTERIAL_WALLS) != null
			&& !(req.getParameter(ARTERIAL_WALLS).equals(""))) {
		arterialWalls = req.getParameter(ARTERIAL_WALLS);
	}
	if (req.getParameter(PULSE_RATES) != null
			&& !(req.getParameter(PULSE_RATES).equals(""))) {
		pulseRates = req.getParameter(PULSE_RATES);
	}
	if (req.getParameter(BP1) != null
			&& !(req.getParameter(BP1).equals(""))) {
		bp = req.getParameter(BP1);
	}
	if (req.getParameter(FULL_EXPENSION) != null
			&& !(req.getParameter(FULL_EXPENSION).equals(""))) {
		fullExpension = req.getParameter(FULL_EXPENSION);
	}
	if (req.getParameter(RANGE_OF_EXPENSION) != null
			&& !(req.getParameter(RANGE_OF_EXPENSION).equals(""))) {
		rangeOfExpension = req.getParameter(RANGE_OF_EXPENSION);
	}

	if (req.getParameter(SELF_BALANCINF_R) != null
			&& !(req.getParameter(SELF_BALANCINF_R).equals(""))) {
		selfBalR = req.getParameter(SELF_BALANCINF_R);
	}
	if (req.getParameter(SELF_BALANCING_L) != null
			&& !(req.getParameter(SELF_BALANCING_L).equals(""))) {
		selfBalL = req.getParameter(SELF_BALANCING_L);
	}
	if (req.getParameter(SPEECH_MENTAL_CAPACITY) != null
			&& !(req.getParameter(SPEECH_MENTAL_CAPACITY).equals(""))) {
		speechMental = req.getParameter(SPEECH_MENTAL_CAPACITY);
	}
	if (req.getParameter(ENDOCRINE_CONDITION) != null
			&& !(req.getParameter(ENDOCRINE_CONDITION).equals(""))) {
		endocrinCond = req.getParameter(ENDOCRINE_CONDITION);
	}
	if (req.getParameter(OTHER_ABNORMALITIES) != null
			&& !(req.getParameter(OTHER_ABNORMALITIES).equals(""))) {
		otherAbnormalities = req.getParameter(OTHER_ABNORMALITIES);
	}
	if (req.getParameter(MEDICIN_REMARKS) != null
			&& !(req.getParameter(MEDICIN_REMARKS).equals(""))) {
		medicinRemarks = req.getParameter(MEDICIN_REMARKS);
	}
	if (req.getParameter(FINGER) != null
			&& !(req.getParameter(FINGER).equals(""))) {
		finger = req.getParameter(FINGER);
	}
	if (req.getParameter(HAND) != null
			&& !(req.getParameter(HAND).equals(""))) {
		hand = req.getParameter(HAND);
	}
	if (req.getParameter(WRIST) != null
			&& !(req.getParameter(WRIST).equals(""))) {
		wrist = req.getParameter(WRIST);
	}
	if (req.getParameter(ELBOWS) != null
			&& !(req.getParameter(ELBOWS).equals(""))) {
		elbows = req.getParameter(ELBOWS);
	}
	if (req.getParameter(SHOULDER_GIRDLES) != null
			&& !(req.getParameter(SHOULDER_GIRDLES).equals(""))) {
		shoulderGridles = req.getParameter(SHOULDER_GIRDLES);
	}
	if (req.getParameter(CERCIVAL) != null
			&& !(req.getParameter(CERCIVAL).equals(""))) {
		cercival = req.getParameter(CERCIVAL);
	}
	if (req.getParameter(DORSAL_VERTEBRATE) != null
			&& !(req.getParameter(DORSAL_VERTEBRATE).equals(""))) {
		dorsalVertebrate = req.getParameter(DORSAL_VERTEBRATE);
	}
	if (req.getParameter(HULLUX) != null
			&& !(req.getParameter(HULLUX).equals(""))) {
		hullux = req.getParameter(HULLUX);
	}
	if (req.getParameter(VALGUS) != null
			&& !(req.getParameter(VALGUS).equals(""))) {
		valgus = req.getParameter(VALGUS);
	}
	if (req.getParameter(RIGGUS) != null
			&& !(req.getParameter(RIGGUS).equals(""))) {
		riggus = req.getParameter(RIGGUS);
	}
	if (req.getParameter(FLAT_FEET) != null
			&& !(req.getParameter(FLAT_FEET).equals(""))) {
		flatFeet = req.getParameter(FLAT_FEET);
	}
	if (req.getParameter(JOINTS) != null
			&& !(req.getParameter(JOINTS).equals(""))) {
		joints = req.getParameter(JOINTS);
	}
	if (req.getParameter(PELVIS) != null
			&& !(req.getParameter(PELVIS).equals(""))) {
		pelvis = req.getParameter(PELVIS);
	}
	if (req.getParameter(GAIL) != null
			&& !(req.getParameter(GAIL).equals(""))) {
		gail = req.getParameter(GAIL);
	}
	if (req.getParameter(LUMBER_SCALER_VERTABRAC) != null
			&& !(req.getParameter(LUMBER_SCALER_VERTABRAC).equals(""))) {
		lumberScaler = req.getParameter(LUMBER_SCALER_VERTABRAC);
	}
	if (req.getParameter(ROCCYX_VARICOSE_VENIS) != null
			&& !(req.getParameter(ROCCYX_VARICOSE_VENIS).equals(""))) {
		roccyxVericose = req.getParameter(ROCCYX_VARICOSE_VENIS);
	}
	if (req.getParameter(HYDROCELE) != null
			&& !(req.getParameter(HYDROCELE).equals(""))) {
		hydrocele = req.getParameter(HYDROCELE);
		CocatHicNevreData += req.getParameter(HYDROCELE) + ",";
	}
	if (req.getParameter(VARICOCELE) != null
			&& !(req.getParameter(VARICOCELE).equals(""))) {
		varicocele = req.getParameter(VARICOCELE);
	}
	if (req.getParameter(UNDER_SCENDED_TESTES) != null
			&& !(req.getParameter(UNDER_SCENDED_TESTES).equals(""))) {
		underScende = req.getParameter(UNDER_SCENDED_TESTES);
	}
	if (req.getParameter(HEMONHOIDS) != null
			&& !(req.getParameter(HEMONHOIDS).equals(""))) {
		hemonhoids = req.getParameter(HEMONHOIDS);
		CocatHicNevreData += req.getParameter(HEMONHOIDS) + ",";
	}
	if (req.getParameter(HERNIA_MUSCLE) != null
			&& !(req.getParameter(HERNIA_MUSCLE).equals(""))) {
		herinaMusic = req.getParameter(HERNIA_MUSCLE);

	}
	if (req.getParameter(BREASTS) != null
			&& !(req.getParameter(BREASTS).equals(""))) {
		breasts = req.getParameter(BREASTS);
		CocatHicNevreData += req.getParameter(BREASTS) + ",";
	}
	if (req.getParameter(SURGERY_REMARKS) != null
			&& !(req.getParameter(SURGERY_REMARKS).equals(""))) {
		surgeryRemarks = req.getParameter(SURGERY_REMARKS);
	}
	if (req.getParameter(RESPIRATORY_SYSTEM) != null
			&& !(req.getParameter(RESPIRATORY_SYSTEM).equals(""))) {
		respatorySystem = req.getParameter(RESPIRATORY_SYSTEM);
	}

	if (req.getParameter(WITH_GLASSES_DISTANT_R) != null
			&& !(req.getParameter(WITH_GLASSES_DISTANT_R).equals(""))) {
		withGlassesDistantR = req.getParameter(WITH_GLASSES_DISTANT_R);
	}
	if (req.getParameter(WITH_GLASSES_DISTANT_L) != null
			&& !(req.getParameter(WITH_GLASSES_DISTANT_L).equals(""))) {
		withglassesDistantL = req.getParameter(WITH_GLASSES_DISTANT_L);
	}
	if (req.getParameter(WITH_GLASSES_NEAR_R) != null
			&& !(req.getParameter(WITH_GLASSES_NEAR_R).equals(""))) {
		withGlassesNearR = req.getParameter(WITH_GLASSES_NEAR_R);
	}
	if (req.getParameter(WITH_GLASSES_NEAR_L) != null
			&& !(req.getParameter(WITH_GLASSES_NEAR_L).equals(""))) {
		withGlassesNearL = req.getParameter(WITH_GLASSES_NEAR_L);
	}
	if (req.getParameter(WITH_GLASSES_NEAR_CP) != null
			&& !(req.getParameter(WITH_GLASSES_NEAR_CP).equals(""))) {
		withGlassesNearCP = req.getParameter(WITH_GLASSES_NEAR_CP);

	}
	if (req.getParameter(WITHOUT_GLASSES_DISTANT_R) != null
			&& !(req.getParameter(WITHOUT_GLASSES_DISTANT_R).equals(""))) {
		withoutGlassesDistantR = req
				.getParameter(WITHOUT_GLASSES_DISTANT_R);
	}
	if (req.getParameter(WITHOUT_GLASSES_DISTANT_L) != null
			&& !(req.getParameter(WITHOUT_GLASSES_DISTANT_L).equals(""))) {
		withoutGlassesDistantL = req
				.getParameter(WITHOUT_GLASSES_DISTANT_L);
	}
	if (req.getParameter(WITHOUT_GLASSES_NEAR_R) != null
			&& !(req.getParameter(WITHOUT_GLASSES_NEAR_R).equals(""))) {
		withoutGlassesNearR = req.getParameter(WITHOUT_GLASSES_NEAR_R);
	}
	if (req.getParameter(WITHOUT_GLASSES_NEAR_L) != null
			&& !(req.getParameter(WITHOUT_GLASSES_NEAR_L).equals(""))) {
		withoutGlassesNearL = req.getParameter(WITHOUT_GLASSES_NEAR_L);
	}
	if (req.getParameter(WITHOUT_GLASSES_NEAR_CP) != null
			&& !(req.getParameter(WITHOUT_GLASSES_NEAR_CP).equals(""))) {
		withoutGlassesNearCP = req.getParameter(WITHOUT_GLASSES_NEAR_CP);
	}
	if (req.getParameter(CONVERGENCE_SC) != null
			&& !(req.getParameter(CONVERGENCE_SC).equals(""))) {
		convergenceCP = new BigDecimal(req.getParameter(CONVERGENCE_SC));
	}
	if (req.getParameter(CONVERGENCE_C) != null
			&& !(req.getParameter(CONVERGENCE_C).equals(""))) {
		convergenceC = new BigDecimal(req.getParameter(CONVERGENCE_C));

	}
	if (req.getParameter(ACCOMMODATION_R) != null
			&& !(req.getParameter(ACCOMMODATION_R).equals(""))) {
		accommodationR = req.getParameter(ACCOMMODATION_R);
	}
	if (req.getParameter(ACCOMMODATION_L) != null
			&& !(req.getParameter(ACCOMMODATION_L).equals(""))) {
		accommodationL = req.getParameter(ACCOMMODATION_L);
	}

	if (req.getParameter(EYE_REMARKS) != null
			&& !(req.getParameter(EYE_REMARKS).equals(""))) {
		eyeRemarks = req.getParameter(EYE_REMARKS);
	}
	if (req.getParameter(EYE_DATE) != null
			&& !(req.getParameter(EYE_DATE).equals(""))) {
		eyeDate = HMSUtil.dateFormatterDDMMYYYY(req.getParameter(EYE_DATE));
	}
	if (req.getParameter(HEARING_R_F_W) != null
			&& !(req.getParameter(HEARING_R_F_W).equals(""))) {
		hearingRFW = new BigDecimal(req.getParameter(HEARING_R_F_W));
	}
	if (req.getParameter(HEARING_L_F_W) != null
			&& !(req.getParameter(HEARING_L_F_W).equals(""))) {
		hearingLFW = new BigDecimal(req.getParameter(HEARING_L_F_W));
	}
	if (req.getParameter(HEARING_BOTH_FW) != null
			&& !(req.getParameter(HEARING_BOTH_FW).equals(""))) {
		hearingBothFW = new BigDecimal(req.getParameter(HEARING_BOTH_FW));
	}

	if (req.getParameter(HEARING_R_C_V) != null
			&& !(req.getParameter(HEARING_R_C_V).equals(""))) {
		hearingRCV = new BigDecimal(req.getParameter(HEARING_R_C_V));
	}
	if (req.getParameter(HEARING_L_C_V) != null
			&& !(req.getParameter(HEARING_L_C_V).equals(""))) {
		hearingLCV = new BigDecimal(req.getParameter(HEARING_L_C_V));
	}
	if (req.getParameter(HEARING_BOTH_CV) != null
			&& !(req.getParameter(HEARING_BOTH_CV).equals(""))) {
		hearingBothCV = new BigDecimal(req.getParameter(HEARING_BOTH_CV));
	}
	if (req.getParameter(INNER_EAR_R) != null
			&& !(req.getParameter(INNER_EAR_R).equals(""))) {
		innerEarR = req.getParameter(INNER_EAR_R);
	}
	if (req.getParameter(INNER_EAR_L) != null
			&& !(req.getParameter(INNER_EAR_L).equals(""))) {
		innerEarL = req.getParameter(INNER_EAR_L);
	}

	if (req.getParameter(AUDIOMETRY_RECORD) != null
			&& !(req.getParameter(AUDIOMETRY_RECORD).equals(""))) {
		audiometryRecord = req.getParameter(AUDIOMETRY_RECORD);
	}
	if (req.getParameter(NOSE) != null
			&& !(req.getParameter(NOSE).equals(""))) {
		nose = req.getParameter(NOSE);
	}
	if (req.getParameter(THROAT_EAR) != null
			&& !(req.getParameter(THROAT_EAR).equals(""))) {
		throatEar = req.getParameter(THROAT_EAR);
	}
	if (req.getParameter(EAR_REMARKS) != null
			&& !(req.getParameter(EAR_REMARKS).equals(""))) {
		earReamrks = req.getParameter(EAR_REMARKS);
	}
	if (req.getParameter(EAR_DATE) != null
			&& !(req.getParameter(EAR_DATE).equals(""))) {
		earDate = HMSUtil.dateFormatterDDMMYYYY(req.getParameter(EAR_DATE));
	}

	if (req.getParameter(EXTERNAL_EAR_R) != null
			&& !(req.getParameter(EXTERNAL_EAR_R).equals(""))) {
		externalEarR = req.getParameter(EXTERNAL_EAR_R);
	}
	if (req.getParameter(EXTERNAL_EAR_L) != null
			&& !(req.getParameter(EXTERNAL_EAR_L).equals(""))) {
		externalEarL = req.getParameter(EXTERNAL_EAR_L);
	}
	if (req.getParameter(MIDDLE_EAR_R) != null
			&& !(req.getParameter(MIDDLE_EAR_R).equals(""))) {
		middleEarR = req.getParameter(MIDDLE_EAR_R);
	}
	if (req.getParameter(MIDDLE_EAR_L) != null
			&& !(req.getParameter(MIDDLE_EAR_L).equals(""))) {
		middleEarL = req.getParameter(MIDDLE_EAR_L);
	}
	if (req.getParameter(ANY_EVIDENCE_OF_TRACHOMA) != null
			&& !(req.getParameter(ANY_EVIDENCE_OF_TRACHOMA).equals(""))) {
		evidienceOfTrachoma = req.getParameter(ANY_EVIDENCE_OF_TRACHOMA);
	}
	if (req.getParameter(BINOCULAR_VISION_GRADE) != null
			&& !(req.getParameter(BINOCULAR_VISION_GRADE).equals(""))) {
		binocular = req.getParameter(BINOCULAR_VISION_GRADE);
	}
	if (req.getParameter(MANIFEST_HYPERMETROPIA) != null
			&& !(req.getParameter(MANIFEST_HYPERMETROPIA).equals(""))) {
		manifestHypermetropia = req.getParameter(MANIFEST_HYPERMETROPIA);
	}
	if (req.getParameter(COVER_TEST) != null
			&& !(req.getParameter(COVER_TEST).equals(""))) {
		coverTest = req.getParameter(COVER_TEST);
	}
	if (req.getParameter(DIAPHRAGM_TEST) != null
			&& !(req.getParameter(DIAPHRAGM_TEST).equals(""))) {
		diaphragmTest = req.getParameter(DIAPHRAGM_TEST);
	}
	if (req.getParameter(FUND_MEDIA) != null
			&& !(req.getParameter(FUND_MEDIA).equals(""))) {
		fundMedia = req.getParameter(FUND_MEDIA);
	}
	if (req.getParameter(FIELDS) != null
			&& !(req.getParameter(FIELDS).equals(""))) {
		fields = req.getParameter(FIELDS);
	}
	if (req.getParameter(NIGHT_VISUAL_CAPACITY) != null
			&& !(req.getParameter(NIGHT_VISUAL_CAPACITY).equals(""))) {
		nightVisualCapacity = req.getParameter(NIGHT_VISUAL_CAPACITY);
	}
	if (req.getParameter(DENTAL_REMARKS) != null
			&& !(req.getParameter(DENTAL_REMARKS).equals(""))) {
		dentalRemarks = req.getParameter(DENTAL_REMARKS);
	}
	if (req.getParameter("dentalReferToMH") != null
			&& !(req.getParameter("dentalReferToMH").equals(""))) {
		denatlToMH = req.getParameter("dentalReferToMH");
	}
	if (req.getParameter(DENTAL_DATE) != null
			&& !(req.getParameter(DENTAL_DATE).equals(""))) {
		dentalDate = HMSUtil.dateFormatterDDMMYYYY(req
				.getParameter(DENTAL_DATE));
	}
	if (req.getParameter(MENSTRUAL_HISTORY) != null
			&& !(req.getParameter(MENSTRUAL_HISTORY).equals(""))) {
		menstrualHistory = req.getParameter(MENSTRUAL_HISTORY);
	}
	if (req.getParameter(NO_OF_PREGNANCY) != null
			&& !(req.getParameter(NO_OF_PREGNANCY).equals(""))) {
		noOfPregnancy = Integer.parseInt(req.getParameter(NO_OF_PREGNANCY));
	}
	if (req.getParameter(NO_OF_ABORTION) != null
			&& !(req.getParameter(NO_OF_ABORTION).equals(""))) {
		noOfAbortion = Integer.parseInt(req.getParameter(NO_OF_ABORTION));
	}
	if (req.getParameter(NO_OF_CHILDREN) != null
			&& !(req.getParameter(NO_OF_CHILDREN).equals(""))) {
		noOfChildren = Integer.parseInt(req.getParameter(NO_OF_CHILDREN));
	}
	if (req.getParameter(DATE_OF_LASTCONFINEMENT) != null
			&& !(req.getParameter(DATE_OF_LASTCONFINEMENT).equals(""))) {
		lastCondinement = HMSUtil.dateFormatterDDMMYYYY(req
				.getParameter(DATE_OF_LASTCONFINEMENT));
	}
	if (req.getParameter(VAGINAL_DISCHARGE) != null
			&& !(req.getParameter(VAGINAL_DISCHARGE).equals(""))) {
		vaginalDischarge = req.getParameter(VAGINAL_DISCHARGE);
	}
	if (req.getParameter(PROLAPSE) != null
			&& !(req.getParameter(PROLAPSE).equals(""))) {
		prolapse = req.getParameter(PROLAPSE);
	}
	if (req.getParameter(USG_ABORTION) != null
			&& !(req.getParameter(USG_ABORTION).equals(""))) {
		usgAbortion = req.getParameter(USG_ABORTION);
	}
	if (req.getParameter(GYANAECOLOGY_RAMARKS) != null
			&& !(req.getParameter(GYANAECOLOGY_RAMARKS).equals(""))) {
		gyanaecologyRemarks = req.getParameter(GYANAECOLOGY_RAMARKS);
	}
	if (req.getParameter(GYANAECOLOGY_DATE) != null
			&& !(req.getParameter(GYANAECOLOGY_DATE).equals(""))) {
		gyanaecologyDate = HMSUtil.dateFormatterDDMMYYYY(req
				.getParameter(GYANAECOLOGY_DATE));
	}
	if (req.getParameter(GYANAECOLOGY_RAMARKS) != null
			&& !(req.getParameter(GYANAECOLOGY_RAMARKS).equals(""))) {
		gyanaecologyRemarks = req.getParameter(GYANAECOLOGY_RAMARKS);
	}
	if (req.getParameter(MEDICAL_BOARD_EXAMINATION) != null
			&& !(req.getParameter(MEDICAL_BOARD_EXAMINATION).equals(""))) {
		medicalBoardExamination = req
				.getParameter(MEDICAL_BOARD_EXAMINATION);
	}
	if (req.getParameter(MEDICAL_BOARD_EXAMINATION_PLACE) != null
			&& !(req.getParameter(MEDICAL_BOARD_EXAMINATION_PLACE)
					.equals(""))) {

		medicalBoardExaminationPlace = Integer.parseInt(req
				.getParameter(MEDICAL_BOARD_EXAMINATION_PLACE));

	}
	if (req.getParameter(MEDICAL_BOARD_EXAMINATION_DATE) != null
			&& !(req.getParameter(MEDICAL_BOARD_EXAMINATION_DATE)
					.equals(""))) {
		medicalBoardExaminationDate = HMSUtil.dateFormatterDDMMYYYY((req
				.getParameter(MEDICAL_BOARD_EXAMINATION_DATE)));
	}
	if (req.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION) != null
			&& !(req.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION)
					.equals(""))) {
		subsequentMedicalBoardExam = req
				.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION);
	}
	if (req.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION_PLACE) != null
			&& !(req
					.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION_PLACE)
					.equals(""))) {
		subsequentMedicalBoardExamPlace = Integer.parseInt(req
				.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION_PLACE));
	}
	if (req.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION_DATE) != null
			&& !(req
					.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION_DATE)
					.equals(""))) {
		subsequentMedicalBoardExamDate = HMSUtil.dateFormatterDDMMYYYY((req
				.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION_DATE)));
	}

	if (req.getParameter(APPROVING_AUTHORITY) != null
			&& !(req.getParameter(APPROVING_AUTHORITY).equals(""))) {
		ApprovingAuthority = req.getParameter(APPROVING_AUTHORITY);
	}
	if (req.getParameter(APPROVING_AUTHORITY_PLACE) != null
			&& !(req.getParameter(APPROVING_AUTHORITY_PLACE).equals(""))) {
		ApprovingAuthorityPlace = Integer.parseInt(req
				.getParameter(APPROVING_AUTHORITY_PLACE));
	}
	if (req.getParameter(APPROVING_AUTHORITY_DATE) != null
			&& !(req.getParameter(APPROVING_AUTHORITY_DATE).equals(""))) {
		ApprovingAuthorityDate = HMSUtil.dateFormatterDDMMYYYY((req
				.getParameter(APPROVING_AUTHORITY_DATE)));
	}
	if (req.getParameter(LMP) != null
			&& !(req.getParameter(LMP).equals(""))) {
		lmp = HMSUtil.dateFormatterDDMMYYYY((req.getParameter(LMP)));
	}

	if (req.getParameter(SURGERY_DATE) != null
			&& !(req.getParameter(SURGERY_DATE).equals(""))) {
		surgeyDate = HMSUtil.dateFormatterDDMMYYYY((req
				.getParameter(SURGERY_DATE)));
	}

	if (req.getParameter(MEDICIN_EXAM_DATE) != null
			&& !(req.getParameter(MEDICIN_EXAM_DATE).equals(""))) {
		medicinExamDate = HMSUtil.dateFormatterDDMMYYYY((req
				.getParameter(MEDICIN_EXAM_DATE)));

	}
	if (req.getParameter(TOTAL_NO_OF_TEETH) != null
			&& !(req.getParameter(TOTAL_NO_OF_TEETH).equals(""))) {
		totalTeeth = req.getParameter(TOTAL_NO_OF_TEETH);

	}
	if (req.getParameter(DEFECTIVE_TEETH) != null
			&& !(req.getParameter(DEFECTIVE_TEETH).equals(""))) {
		totalDefectiveTeeth = req.getParameter(DEFECTIVE_TEETH);

	}
	if (req.getParameter(MISSING_TEETH) != null
			&& !(req.getParameter(MISSING_TEETH).equals(""))) {
		missingTeeth = req.getParameter(MISSING_TEETH);

	}
	if (req.getParameter(MISSING_UNSERVICABLE_TEETH) != null
			&& !(req.getParameter(MISSING_UNSERVICABLE_TEETH).equals(""))) {
		unserviceableTeeth = req.getParameter(MISSING_UNSERVICABLE_TEETH);

	}
	if (req.getParameter(DENTSL_POINT) != null
			&& !(req.getParameter(DENTSL_POINT).equals(""))) {
		DenstalPoint = req.getParameter(DENTSL_POINT);

	}

	if (req.getParameter(LAST_CHANGED_BY) != null) {
		lastChangedBy = req.getParameter(LAST_CHANGED_BY);
	}
	if (req.getParameter(LAST_CHANGED_DATE) != null) {
		lastChangedDate = HMSUtil.dateFormatterDDMMYYYY(req
				.getParameter(LAST_CHANGED_DATE));
	}
	if (req.getParameter(LAST_CHANGED_TIME) != null) {
		lastChangedTime = req.getParameter(LAST_CHANGED_TIME);
	}
	// //////////////////////////////////

	if (req.getParameter(DUR_8) != null
			&& !req.getParameter(DUR_8).equals("")) {
		dur8 = (req.getParameter(DUR_8));

	} else {
		dur8 = "N";

	}

	if (req.getParameter(DUR_7) != null
			&& !req.getParameter(DUR_7).equals("")) {
		dur7 = (req.getParameter(DUR_7));

	} else {
		dur7 = "N";

	}
	if (req.getParameter(DUR_6) != null
			&& !req.getParameter(DUR_6).equals("")) {
		dur6 = (req.getParameter(DUR_6));

	} else {
		dur6 = "N";

	}
	if (req.getParameter(DUR_5) != null
			&& !req.getParameter(DUR_5).equals("")) {
		dur5 = (req.getParameter(DUR_5));

	} else {
		dur5 = "N";

	}

	if (req.getParameter(DUR_4) != null
			&& !req.getParameter(DUR_4).equals("")) {
		dur4 = (req.getParameter(DUR_4));
	} else {
		dur4 = "N";

	}
	if (req.getParameter(DUR_3) != null
			&& !req.getParameter(DUR_3).equals("")) {
		dur3 = (req.getParameter(DUR_3));

	} else {
		dur3 = "N";

	}
	if (req.getParameter(DUR_2) != null
			&& !req.getParameter(DUR_2).equals("")) {
		dur2 = (req.getParameter(DUR_2));

	} else {
		dur2 = "N";

	}
	if (req.getParameter(DUR_1) != null
			&& !req.getParameter(DUR_1).equals("")) {
		dur1 = (req.getParameter(DUR_1));

	} else {
		dur1 = "N";

	}

	if (req.getParameter(DUL_8) != null
			&& !req.getParameter(DUL_8).equals("")) {
		dul8 = (req.getParameter(DUL_8));
	} else {
		dul8 = "N";

	}
	if (req.getParameter(DUL_7) != null
			&& !req.getParameter(DUL_7).equals("")) {
		dul7 = (req.getParameter(DUL_7));

	} else {
		dul7 = "N";

	}
	if (req.getParameter(DUL_6) != null
			&& !req.getParameter(DUL_6).equals("")) {
		dul6 = (req.getParameter(DUL_6));
	} else {
		dul6 = "N";

	}
	if (req.getParameter(DUL_5) != null
			&& !req.getParameter(DUL_5).equals("")) {
		dul5 = (req.getParameter(DUL_5));
	} else {
		dul5 = "N";

	}
	if (req.getParameter(DUL_4) != null
			&& !req.getParameter(DUL_4).equals("")) {
		dul4 = (req.getParameter(DUL_4));
	} else {
		dul4 = "N";

	}
	if (req.getParameter(DUL_3) != null
			&& !req.getParameter(DUL_3).equals("")) {
		dul3 = (req.getParameter(DUL_3));
	} else {
		dul3 = "N";

	}
	if (req.getParameter(DUL_2) != null
			&& !req.getParameter(DUL_2).equals("")) {
		dul2 = (req.getParameter(DUL_2));
	} else {
		dul2 = "N";

	}
	if (req.getParameter(DUL_1) != null
			&& !req.getParameter(DUL_1).equals("")) {
		dul1 = (req.getParameter(DUL_1));
	} else {
		dul1 = "N";

	}

	if (req.getParameter(DLR_8) != null
			&& !req.getParameter(DLR_8).equals("")) {
		dlr8 = (req.getParameter(DLR_8));
	} else {
		dlr8 = "N";

	}
	if (req.getParameter(DLR_7) != null
			&& !req.getParameter(DLR_7).equals("")) {
		dlr7 = (req.getParameter(DLR_7));
	} else {
		dlr7 = "N";

	}
	if (req.getParameter(DLR_6) != null
			&& !req.getParameter(DLR_6).equals("")) {
		dlr6 = (req.getParameter(DLR_6));
	} else {
		dlr6 = "N";

	}
	if (req.getParameter(DLR_5) != null
			&& !req.getParameter(DLR_5).equals("")) {
		dlr5 = (req.getParameter(DLR_5));
	} else {
		dlr5 = "N";

	}
	if (req.getParameter(DLR_4) != null
			&& !req.getParameter(DLR_4).equals("")) {
		dlr4 = (req.getParameter(DLR_4));
	} else {
		dlr4 = "N";

	}
	if (req.getParameter(DLR_3) != null
			&& !req.getParameter(DLR_3).equals("")) {
		dlr3 = (req.getParameter(DLR_3));
	} else {
		dlr3 = "N";

	}
	if (req.getParameter(DLR_2) != null
			&& !req.getParameter(DLR_2).equals("")) {
		dlr2 = (req.getParameter(DLR_2));
	} else {
		dlr2 = "N";

	}

	if (req.getParameter(DLR_1) != null
			&& !req.getParameter(DLR_1).equals("")) {
		dlr1 = (req.getParameter(DLR_1));
	} else {
		dlr1 = "N";

	}

	if (req.getParameter(DLL_8) != null
			&& !req.getParameter(DLL_8).equals("")) {
		dll8 = (req.getParameter(DLL_8));
	} else {
		dll8 = "N";

	}
	if (req.getParameter(DLL_7) != null
			&& !req.getParameter(DLL_7).equals("")) {
		dll7 = (req.getParameter(DLL_7));
	} else {
		dll7 = "N";

	}

	if (req.getParameter(DLL_6) != null
			&& !req.getParameter(DLL_6).equals("")) {
		dll6 = (req.getParameter(DLL_6));
	} else {
		dll6 = "N";

	}
	if (req.getParameter(DLL_5) != null
			&& !req.getParameter(DLL_5).equals("")) {
		dll5 = (req.getParameter(DLL_5));
	} else {
		dll5 = "N";

	}
	if (req.getParameter(DLL_4) != null
			&& !req.getParameter(DLL_4).equals("")) {
		dll4 = (req.getParameter(DLL_4));
	} else {
		dll4 = "N";

	}
	if (req.getParameter(DLL_3) != null
			&& !req.getParameter(DLL_3).equals("")) {
		dll3 = (req.getParameter(DLL_3));
	} else {
		dll3 = "N";

	}
	if (req.getParameter(DLL_2) != null
			&& !req.getParameter(DLL_2).equals("")) {
		dll2 = (req.getParameter(DLL_2));
	} else {
		dll2 = "N";

	}
	if (req.getParameter(DLL_1) != null
			&& !req.getParameter(DLL_1).equals("")) {
		dll1 = (req.getParameter(DLL_1));
	} else {
		dll1 = "N";

	}
	// ///////////////////////////

	if (req.getParameter(UUR_8) != null
			&& !req.getParameter(UUR_8).equals("")) {
		uur8 = (req.getParameter(UUR_8));
	} else {
		uur8 = "N";

	}

	if (req.getParameter(UUR_7) != null
			&& !req.getParameter(UUR_7).equals("")) {
		uur7 = (req.getParameter(UUR_7));
	} else {
		uur7 = "N";

	}
	if (req.getParameter(UUR_6) != null
			&& !req.getParameter(UUR_6).equals("")) {
		uur6 = (req.getParameter(UUR_6));
	} else {
		uur6 = "N";

	}
	if (req.getParameter(UUR_5) != null
			&& !req.getParameter(UUR_5).equals("")) {
		uur5 = (req.getParameter(UUR_5));
	} else {
		uur5 = "N";

	}
	if (req.getParameter(UUR_4) != null
			&& !req.getParameter(UUR_4).equals("")) {
		uur4 = (req.getParameter(UUR_4));
	} else {
		uur4 = "N";

	}
	if (req.getParameter(UUR_3) != null
			&& !req.getParameter(UUR_3).equals("")) {
		uur3 = (req.getParameter(UUR_3));
	} else {
		uur3 = "N";

	}
	if (req.getParameter(UUR_2) != null
			&& !req.getParameter(UUR_2).equals("")) {
		uur2 = (req.getParameter(UUR_2));
	} else {
		uur2 = "N";

	}
	if (req.getParameter(UUR_1) != null
			&& !req.getParameter(UUR_1).equals("")) {
		uur1 = (req.getParameter(UUR_1));
	} else {
		uur1 = "N";

	}

	if (req.getParameter(UUL_8) != null
			&& !req.getParameter(UUL_8).equals("")) {
		uul8 = (req.getParameter(UUL_8));
	} else {
		uul8 = "N";

	}
	if (req.getParameter(UUL_7) != null
			&& !req.getParameter(UUL_7).equals("")) {
		uul7 = (req.getParameter(UUL_7));

	} else {
		uul7 = "N";

	}
	if (req.getParameter(UUL_6) != null
			&& !req.getParameter(UUL_6).equals("")) {
		uul6 = (req.getParameter(UUL_6));
	} else {
		uul6 = "N";

	}
	if (req.getParameter(UUL_5) != null
			&& !req.getParameter(UUL_5).equals("")) {
		uul5 = (req.getParameter(UUL_5));
	} else {
		uul5 = "N";

	}
	if (req.getParameter(UUL_4) != null
			&& !req.getParameter(UUL_4).equals("")) {
		uul4 = (req.getParameter(UUL_4));
	} else {
		uul4 = "N";

	}
	if (req.getParameter(UUL_3) != null
			&& !req.getParameter(UUL_3).equals("")) {
		uul3 = (req.getParameter(UUL_3));
	} else {
		uul3 = "N";

	}
	if (req.getParameter(UUL_2) != null
			&& !req.getParameter(UUL_2).equals("")) {
		uul2 = (req.getParameter(UUL_2));
	} else {
		uul2 = "N";

	}
	if (req.getParameter(UUL_1) != null
			&& !req.getParameter(UUL_1).equals("")) {
		uul1 = (req.getParameter(UUL_1));
	} else {
		uul1 = "N";

	}
	if (req.getParameter(ULR_8) != null
			&& !req.getParameter(ULR_8).equals("")) {
		ulr8 = (req.getParameter(ULR_8));
	} else {
		ulr8 = "N";

	}

	if (req.getParameter(ULR_7) != null
			&& !req.getParameter(ULR_7).equals("")) {
		ulr7 = (req.getParameter(ULR_7));
	} else {
		ulr7 = "N";

	}
	if (req.getParameter(ULR_6) != null
			&& !req.getParameter(ULR_6).equals("")) {
		ulr6 = (req.getParameter(ULR_6));
	} else {
		ulr6 = "N";

	}
	if (req.getParameter(ULR_5) != null
			&& !req.getParameter(ULR_5).equals("")) {
		ulr5 = (req.getParameter(ULR_5));
	} else {
		ulr5 = "N";

	}
	if (req.getParameter(ULR_4) != null
			&& !req.getParameter(ULR_4).equals("")) {
		ulr4 = (req.getParameter(ULR_4));
	} else {
		ulr4 = "N";

	}
	if (req.getParameter(ULR_3) != null
			&& !req.getParameter(ULR_3).equals("")) {
		ulr3 = (req.getParameter(ULR_3));
	} else {
		ulr3 = "N";

	}
	if (req.getParameter(ULR_2) != null
			&& !req.getParameter(ULR_2).equals("")) {
		ulr2 = (req.getParameter(ULR_2));
	} else {
		ulr2 = "N";

	}
	if (req.getParameter(ULR_1) != null
			&& !req.getParameter(ULR_1).equals("")) {
		ulr1 = (req.getParameter(ULR_1));
	} else {
		ulr1 = "N";

	}

	if (req.getParameter(ULL_8) != null
			&& !req.getParameter(ULL_8).equals("")) {
		ull8 = (req.getParameter(ULL_8));
	} else {
		ull8 = "N";

	}
	if (req.getParameter(ULL_7) != null
			&& !req.getParameter(ULL_8).equals("")) {
		ull7 = (req.getParameter(ULL_7));
	} else {
		ull7 = "N";

	}
	if (req.getParameter(ULL_6) != null
			&& !req.getParameter(ULL_6).equals("")) {
		ull6 = (req.getParameter(ULL_6));
	} else {
		ull6 = "N";

	}
	if (req.getParameter(ULL_5) != null
			&& !req.getParameter(ULL_5).equals("")) {
		ull5 = (req.getParameter(ULL_5));
	} else {
		ull5 = "N";

	}
	if (req.getParameter(ULL_4) != null
			&& !req.getParameter(ULL_4).equals("")) {
		ull4 = (req.getParameter(ULL_4));
	} else {
		ull4 = "N";

	}
	if (req.getParameter(ULL_3) != null
			&& !req.getParameter(ULL_3).equals("")) {
		ull3 = (req.getParameter(ULL_3));
	} else {
		ull3 = "N";

	}
	if (req.getParameter(ULL_2) != null
			&& !req.getParameter(ULL_2).equals("")) {
		ull2 = (req.getParameter(ULL_2));
	} else {
		ull2 = "N";

	}
	if (req.getParameter(ULL_1) != null
			&& !req.getParameter(ULL_1).equals("")) {
		ull1 = (req.getParameter(ULL_1));
	} else {
		ull1 = "N";

	}

	// ////////////////////////

	if (req.getParameter(MUR_8) != null
			&& !req.getParameter(MUR_8).equals("")) {
		mur8 = (req.getParameter(MUR_8));

	} else {
		mur8 = "N";

	}
	if (req.getParameter(MUR_7) != null
			&& !req.getParameter(MUR_7).equals("")) {
		mur7 = (req.getParameter(MUR_7));
	} else {
		mur7 = "N";

	}
	if (req.getParameter(MUR_6) != null
			&& !req.getParameter(MUR_6).equals("")) {
		mur6 = (req.getParameter(MUR_6));
	} else {
		mur6 = "N";

	}
	if (req.getParameter(MUR_5) != null
			&& !req.getParameter(MUR_5).equals("")) {
		mur5 = (req.getParameter(MUR_5));
	} else {
		mur5 = "N";

	}
	if (req.getParameter(MUR_4) != null
			&& !req.getParameter(MUR_4).equals("")) {
		mur4 = (req.getParameter(MUR_4));
	} else {
		mur4 = "N";

	}
	if (req.getParameter(MUR_3) != null
			&& !req.getParameter(MUR_3).equals("")) {
		mur3 = (req.getParameter(MUR_3));
	} else {
		mur3 = "N";

	}
	if (req.getParameter(MUR_2) != null
			&& !req.getParameter(MUR_2).equals("")) {
		mur2 = (req.getParameter(MUR_2));
	} else {
		mur2 = "N";

	}
	if (req.getParameter(MUR_1) != null
			&& !req.getParameter(MUR_1).equals("")) {
		mur1 = (req.getParameter(MUR_1));
	} else {
		mur1 = "N";

	}

	if (req.getParameter(MUL_8) != null
			&& !req.getParameter(MUL_8).equals("")) {
		mul8 = (req.getParameter(MUL_8));
	} else {
		mul8 = "N";

	}
	if (req.getParameter(MUL_7) != null
			&& !req.getParameter(MUL_7).equals("")) {
		mul7 = (req.getParameter(MUL_7));

	} else {
		mul7 = "N";

	}
	if (req.getParameter(MUL_6) != null
			&& !req.getParameter(MUL_6).equals("")) {
		mul6 = (req.getParameter(MUL_6));
	} else {
		mul6 = "N";

	}
	if (req.getParameter(MUL_5) != null
			&& !req.getParameter(MUL_5).equals("")) {
		mul5 = (req.getParameter(MUL_5));
	} else {
		mul5 = "N";

	}
	if (req.getParameter(MUL_4) != null
			&& !req.getParameter(MUL_4).equals("")) {
		mul4 = (req.getParameter(MUL_4));
	} else {
		mul4 = "N";

	}
	if (req.getParameter(MUL_3) != null
			&& !req.getParameter(MUL_3).equals("")) {
		mul3 = (req.getParameter(MUL_3));
	} else {
		mul3 = "N";

	}
	if (req.getParameter(MUL_2) != null
			&& !req.getParameter(MUL_2).equals("")) {
		mul2 = (req.getParameter(MUL_2));
	} else {
		mul2 = "N";

	}
	if (req.getParameter(MUL_1) != null
			&& !req.getParameter(MUL_1).equals("")) {
		mul1 = (req.getParameter(MUL_1));
	} else {
		mul1 = "N";

	}
	if (req.getParameter(MLR_8) != null
			&& !req.getParameter(MLR_8).equals("")) {
		mlr8 = (req.getParameter(MLR_8));
	} else {
		mlr8 = "N";

	}

	if (req.getParameter(MLR_7) != null
			&& !req.getParameter(MLR_7).equals("")) {
		mlr7 = (req.getParameter(MLR_7));
	} else {
		mlr7 = "N";

	}
	if (req.getParameter(MLR_6) != null
			&& !req.getParameter(MLR_6).equals("")) {
		mlr6 = (req.getParameter(MLR_6));
	} else {
		mlr6 = "N";

	}
	if (req.getParameter(MLR_5) != null
			&& !req.getParameter(MLR_5).equals("")) {
		mlr5 = (req.getParameter(MLR_5));
	} else {
		mlr5 = "N";

	}

	if (req.getParameter(MLR_4) != null
			&& !req.getParameter(MLR_4).equals("")) {
		mlr4 = (req.getParameter(MLR_4));
	} else {
		mlr4 = "N";

	}
	if (req.getParameter(MLR_3) != null
			&& !req.getParameter(MLR_3).equals("")) {
		mlr3 = (req.getParameter(MLR_3));
	} else {
		mlr3 = "N";

	}

	if (req.getParameter(MLR_2) != null
			&& !req.getParameter(MLR_2).equals("")) {
		mlr2 = (req.getParameter(MLR_2));
	} else {
		mlr2 = "N";

	}
	if (req.getParameter(MLR_1) != null
			&& !req.getParameter(MLR_1).equals("")) {
		mlr1 = (req.getParameter(MLR_1));
	} else {
		mlr1 = "N";

	}

	if (req.getParameter(MLL_8) != null
			&& !req.getParameter(MLL_8).equals("")) {
		mll8 = (req.getParameter(MLL_8));
	} else {
		mll8 = "N";

	}
	if (req.getParameter(MLL_7) != null
			&& !req.getParameter(MLL_7).equals("")) {
		mll7 = (req.getParameter(MLL_7));
	} else {
		mll7 = "N";

	}
	if (req.getParameter(MLL_6) != null
			&& !req.getParameter(MLL_6).equals("")) {
		mll6 = (req.getParameter(MLL_6));
	} else {
		mll6 = "N";

	}
	if (req.getParameter(MLL_5) != null
			&& !req.getParameter(MLL_5).equals("")) {
		mll5 = (req.getParameter(MLL_5));
	} else {
		mll5 = "N";

	}
	if (req.getParameter(MLL_4) != null
			&& !req.getParameter(MLL_4).equals("")) {
		mll4 = (req.getParameter(MLL_4));
	} else {
		mll4 = "N";

	}
	if (req.getParameter(MLL_3) != null
			&& !req.getParameter(MLL_3).equals("")) {
		mll3 = (req.getParameter(MLL_3));
	} else {
		mll3 = "N";

	}
	if (req.getParameter(MLL_2) != null
			&& !req.getParameter(MLL_2).equals("")) {
		mll2 = (req.getParameter(MLL_2));
	} else {
		mll2 = "N";

	}
	if (req.getParameter(MLL_1) != null
			&& !req.getParameter(MLL_1).equals("")) {
		mll1 = (req.getParameter(MLL_1));
	} else {
		mll1 = "N";

	}

	sur8 = dur8 + "" + mur8 + "" + uur8;

	sur7 = dur7 + "" + mur7 + "" + uur7;

	sur6 = dur6 + "" + mur6 + "" + uur6;
	sur5 = dur5 + "" + mur5 + "" + uur5;
	sur4 = dur4 + "" + mur4 + "" + uur4;
	sur3 = dur3 + "" + mur3 + "" + uur3;
	sur2 = dur2 + "" + mur2 + "" + uur2;
	sur1 = dur1 + "" + mur2 + "" + uur1;

	sul8 = dul8 + "" + mul8 + "" + uul8;
	sul7 = dul7 + "" + mul7 + "" + uul7;

	sul6 = dul6 + "" + mul6 + "" + uul6;
	sul5 = dul5 + "" + mul5 + "" + uul5;
	sul4 = dul4 + "" + mul4 + "" + uul4;
	sul3 = dul3 + "" + mul3 + "" + uul3;
	sul2 = dul2 + "" + mul2 + "" + uul2;
	sul1 = dul1 + "" + mul1 + "" + uul1;

	slr8 = dlr8 + "" + mlr8 + "" + ulr8;
	slr7 = dlr7 + "" + mlr7 + "" + ulr7;
	slr6 = dlr6 + "" + mlr6 + "" + ulr6;
	slr5 = dlr5 + "" + mlr5 + "" + ulr5;
	slr4 = dlr4 + "" + mlr4 + "" + ulr4;
	slr3 = dlr3 + "" + mlr3 + "" + ulr3;
	slr2 = dlr2 + "" + mlr2 + "" + ulr2;
	slr1 = dlr1 + "" + mlr2 + "" + ulr1;

	sll8 = dll8 + "" + mll8 + "" + ull8;
	sll7 = dll7 + "" + mll7 + "" + ull7;
	sll6 = dll6 + "" + mll6 + "" + ull6;
	sll5 = dll5 + "" + mll5 + "" + ull5;
	sll4 = dll4 + "" + mll4 + "" + ull4;
	sll3 = dll3 + "" + mll3 + "" + ull3;
	sll2 = dll2 + "" + mll2 + "" + ull2;
	sll1 = dll1 + "" + mll2 + "" + ull1;
	MbTypeOfEntryMaster mbTypeOfEntryMaster = new MbTypeOfEntryMaster();
	mbTypeOfEntryMaster.setId(typeOfEntry);
	generalMap.put("serviceNo", serviceNo);
	generalMap.put("pojoPropertyCode", "serviceNo");
	generalMap.put("pojoName", "MasMedicalExaminationReportOnEntry");
	String message = "";
	String jsp = "";
	Boolean successfullyAdded = false;
	masMedicalBoardProceedings.setInnerEarL(innerEarL);
	masMedicalBoardProceedings.setHearingBothCv(hearingBothCV);
	masMedicalBoardProceedings.setDateSpecialExam(eyeDate);
	masMedicalBoardProceedings.setTotalDefectiveTeeth(totalDefectiveTeeth);
	masMedicalBoardProceedings.setTotalTeeth(totalTeeth);
	masMedicalBoardProceedings.setMissingTeeth(missingTeeth);
	masMedicalBoardProceedings.setUnservisableTeeth(unserviceableTeeth);
	masMedicalBoardProceedings.setDenstlPoint(DenstalPoint);
	masMedicalBoardProceedings.setYearlySerialNo(serviceNo);
	// masMedicalBoardProceedings.setMonthlySerialNo(rank);
	masMedicalBoardProceedings.setEntryDate(entryDate);

	masMedicalBoardProceedings.setTypeOfEntry(mbTypeOfEntryMaster);
	// masMedicalBoardProceedings.setBatchNo(betchNo);
	masMedicalBoardProceedings.setChestNo(chestNo);
	masMedicalBoardProceedings.setRollNo(rollNo);
	masMedicalBoardProceedings.setMedicalStatus(medicalStatus);
	masMedicalBoardProceedings.setNameInFull(fullName);
	masMedicalBoardProceedings.setDateOfBirth(dateOfBirth);
	if (maritialStatus != 0) {
		MasMaritalStatus masMaritalStatus = new MasMaritalStatus();
		masMaritalStatus.setId(maritialStatus);
		masMedicalBoardProceedings.setMaritalStatus(masMaritalStatus);
	}
	masMedicalBoardProceedings.setPNo(pNo);

	masMedicalBoardProceedings.setHoursOfFlown(hoursOfFlown);
	masMedicalBoardProceedings.setParmanentAddress(permanentAddress);
	masMedicalBoardProceedings.setIdentificationMarks1(identification1);
	masMedicalBoardProceedings.setIdentificationMarks2(identification2);
	masMedicalBoardProceedings.setArmsCorps(armsCrops);
	masMedicalBoardProceedings.setDateOfCompletion(dateOfCompletion);
	masMedicalBoardProceedings.setDocumentForwardDate(documentForwardDate);
	masMedicalBoardProceedings.setDateOfReporting(dateOfReporting);
	//---Added by dipali	
	masMedicalBoardProceedings.setDateOfDischarge(dateOfDischarge);
	masMedicalBoardProceedings.setDocumentForwardTo(documentForwardTo);
	masMedicalBoardProceedings.setFromWhereHeReport(fromWhereHeReport);
	masMedicalBoardProceedings.setHypertension(hypertension);
	masMedicalBoardProceedings.setHeartDiabetes(heartDisease);
	masMedicalBoardProceedings.setDiabetes(diabetes);
	masMedicalBoardProceedings.setBleedingDisorder(bleedingDisorder);
	masMedicalBoardProceedings.setMentalDisease(mentalDisease);
	masMedicalBoardProceedings.setNightBlindness(nightBlindness);
	masMedicalBoardProceedings.setChronicBronchitis(asthama);
	masMedicalBoardProceedings.setDischargeFromEars(dischargeFrom);
	masMedicalBoardProceedings.setPleurisy(plesury);
	masMedicalBoardProceedings.setAnyOtherEarDisease(earDieses);
	masMedicalBoardProceedings.setRheumatismFrequentSorethroats(rheumatism);
	masMedicalBoardProceedings.setFrequentCoughColdSinusitis(frequentCough);
	masMedicalBoardProceedings.setChronicIndigestion(chronicIndigestion);
	masMedicalBoardProceedings
			.setNervousBreakdownMentalIllness(nervousBrakdown);
	masMedicalBoardProceedings.setKidneyBladderTrouble(kidenyBladder);
	masMedicalBoardProceedings.setFitsFaintingAttack(fitsFaintinngAttacks);
	masMedicalBoardProceedings.setStd(std);
	masMedicalBoardProceedings.setSevereHeadInjury(serveHeadInjury);
	masMedicalBoardProceedings.setJaundice(joundice);
	masMedicalBoardProceedings.setAirSeaCarTrainSickness(sickness);
	masMedicalBoardProceedings.setBreastDiseaseDischarge(breastDisease);
	masMedicalBoardProceedings.setTrachoma(trachoma);
	masMedicalBoardProceedings.setAmenorrhoeaDysmenonhoea(amenorrhoea);
	masMedicalBoardProceedings.setNightBindness(nightbindness);
	masMedicalBoardProceedings.setMenonhagia(menirrhagia);
	masMedicalBoardProceedings
			.setLaserTreatementSurgeryForEye(laserTeartement);
	masMedicalBoardProceedings.setPregnancy(pregnancy);
	masMedicalBoardProceedings.setAnyOtherEyeDisease(eyeDisease);
	masMedicalBoardProceedings.setAbortion(abortion);
	masMedicalBoardProceedings
			.setBeenrejectedAsMedicallyUnfitForAnyBranch(rejectedAsUnfit);
	masMedicalBoardProceedings
			.setDischargeAsMedicallyUnfitForAnyBranch(dischargeMedicallyUnfit);
	masMedicalBoardProceedings
			.setAdmittedInHospitalForAnyIllnessOperationOrInjury(adimmitedInHospitalFirIllness);

	masMedicalBoardProceedings
			.setStateTheNatureOfDiseaseDuration(stateNature);
	masMedicalBoardProceedings
			.setAnyOtherInformationAboutYourHealth(otherInform);
	masMedicalBoardProceedings.setHeight(height);
	masMedicalBoardProceedings.setWeight(weight);
	masMedicalBoardProceedings.setAcceptable(acceptableKg);
	masMedicalBoardProceedings.setLegLength(leglength);
	masMedicalBoardProceedings.setAppearance(appereance);
	masMedicalBoardProceedings.setAlbumin(albumin);
	masMedicalBoardProceedings.setSugar(sugar);
	masMedicalBoardProceedings.setAdmissionStatus("n");
	masMedicalBoardProceedings.setSpecialistOpinnionStatus("n");

	masMedicalBoardProceedings.setSpGravity(spGraviry);
	masMedicalBoardProceedings.setHbPercentage(hbPercentage);
	masMedicalBoardProceedings.setAnyOtherInvCarriedOut(anyOtherInv);
	masMedicalBoardProceedings.setPhysique(physique);
	masMedicalBoardProceedings.setSkin(skin);
	masMedicalBoardProceedings.setAbdomen(abdomen);
	masMedicalBoardProceedings.setHeartSize(heartSize);
	masMedicalBoardProceedings.setSounds(sound);
	masMedicalBoardProceedings.setRhythm(rhythm);
	masMedicalBoardProceedings.setArterialWalls(arterialWalls);
	masMedicalBoardProceedings.setPulseRates(pulseRates);
	masMedicalBoardProceedings.setBp(bp);
	masMedicalBoardProceedings.setChestMeasurement(fullExpension);
	masMedicalBoardProceedings.setRangeOfExpension(rangeOfExpension);
	masMedicalBoardProceedings.setSelfBalancingR(selfBalR);
	masMedicalBoardProceedings.setSelfBalancingL(selfBalL);
	masMedicalBoardProceedings.setSpeechMentalCapacity(speechMental);
	masMedicalBoardProceedings.setEndocrineCondition(endocrinCond);
	masMedicalBoardProceedings.setAnyOtheAbnormalities(otherAbnormalities);
	masMedicalBoardProceedings.setRemarks(medicinRemarks);
	masMedicalBoardProceedings.setFingers(finger);
	masMedicalBoardProceedings.setHand(hand);
	masMedicalBoardProceedings.setWrists(wrist);
	masMedicalBoardProceedings.setElbows(elbows);
	masMedicalBoardProceedings.setShoulderGirdles(shoulderGridles);
	masMedicalBoardProceedings.setCervical(cercival);
	masMedicalBoardProceedings.setDorsalVertebrate(dorsalVertebrate);
	masMedicalBoardProceedings.setHullux(hullux);
	masMedicalBoardProceedings.setValgus(valgus);
	masMedicalBoardProceedings.setRigigus(riggus);
	masMedicalBoardProceedings.setFlatFeet(flatFeet);
	masMedicalBoardProceedings.setJoints(joints);
	masMedicalBoardProceedings.setPelvis(pelvis);
	masMedicalBoardProceedings.setGail(gail);
	masMedicalBoardProceedings.setLumber(lumberScaler);
	masMedicalBoardProceedings.setRoccyxVarocose(roccyxVericose);
	masMedicalBoardProceedings.setHydrocele(hydrocele);
	masMedicalBoardProceedings.setVaricocele(varicocele);
	masMedicalBoardProceedings.setUnderscendedTest(underScende);
	masMedicalBoardProceedings.setHemorrhoids(hemonhoids);
	masMedicalBoardProceedings.setHerniaMusic(herinaMusic);
	masMedicalBoardProceedings.setBreasts(breasts);
	masMedicalBoardProceedings.setRemarksLowerlimbs(surgeryRemarks);
	masMedicalBoardProceedings.setRespiratorySystem(respatorySystem);
	masMedicalBoardProceedings.setWithGlassesLDistant(withglassesDistantL);
	masMedicalBoardProceedings.setWithGlassesRDistant(withGlassesDistantR);
	masMedicalBoardProceedings
			.setWithoutGlassesLDistant(withoutGlassesDistantL);
	masMedicalBoardProceedings
			.setWthoutGlassesRDistant(withoutGlassesDistantR);
	masMedicalBoardProceedings.setWithGlassesLNearvision(withGlassesNearL);
	masMedicalBoardProceedings.setWithGlassesRNearvision(withGlassesNearR);
	masMedicalBoardProceedings
			.setWithoutGlassesLNearvision(withoutGlassesNearL);
	masMedicalBoardProceedings
			.setWithoutGlassesRNearvision(withoutGlassesNearR);
	masMedicalBoardProceedings.setEvidenceOfTrachoma(evidienceOfTrachoma);
	masMedicalBoardProceedings.setBinocularVisionGrade(binocular);
	masMedicalBoardProceedings
			.setManifestHypermetropia(manifestHypermetropia);
	masMedicalBoardProceedings.setCoverTest(coverTest);
	masMedicalBoardProceedings.setDiaphragmTest(diaphragmTest);
	masMedicalBoardProceedings.setFundAndMedia(fundMedia);
	masMedicalBoardProceedings.setFields(fields);
	masMedicalBoardProceedings.setNightVisualCapacity(nightVisualCapacity);
	masMedicalBoardProceedings.setConvergenceC(convergenceC);
	masMedicalBoardProceedings.setConvergenceSc(convergenceCP);
	masMedicalBoardProceedings.setAccommodationR(accommodationR);
	masMedicalBoardProceedings.setAccommodationL(accommodationL);
	masMedicalBoardProceedings.setRemarksSpecialExam(eyeRemarks);
	masMedicalBoardProceedings.setHearingRcv(hearingRCV);
	masMedicalBoardProceedings.setHearingLcv(hearingLCV);
	masMedicalBoardProceedings.setEarHearingRfw(hearingRFW);
	masMedicalBoardProceedings.setEarHearingLfw(hearingLFW);
	masMedicalBoardProceedings.setEarHearingBothFw(hearingBothFW);
	masMedicalBoardProceedings.setExternalEarR(externalEarR);
	masMedicalBoardProceedings.setExternalEarL(externalEarL);
	masMedicalBoardProceedings.setMiddleEarR(middleEarR);
	masMedicalBoardProceedings.setMiddleEar(middleEarL);

	masMedicalBoardProceedings.setInnerEarR(innerEarR);
	masMedicalBoardProceedings.setAudiometryRecord(audiometryRecord);
	masMedicalBoardProceedings.setNose(nose);
	masMedicalBoardProceedings.setThroat(throatEar);
	masMedicalBoardProceedings.setRemarksEar(earReamrks);
	masMedicalBoardProceedings.setEarDate(earDate);
	masMedicalBoardProceedings.setDateTeath(dentalDate);
	masMedicalBoardProceedings.setRemarksTeath(dentalRemarks);
	masMedicalBoardProceedings.setReferToMH(denatlToMH);
	masMedicalBoardProceedings.setMenstrualHistory(menstrualHistory);
	masMedicalBoardProceedings.setNoOfPregnancies(noOfPregnancy);
	masMedicalBoardProceedings.setNoOfAbortions(noOfAbortion);
	masMedicalBoardProceedings.setNoOfChildren(noOfChildren);
	masMedicalBoardProceedings.setLastConfinementDate(lastCondinement);
	masMedicalBoardProceedings.setVaginalDischarge(vaginalDischarge);
	masMedicalBoardProceedings.setProlapse(prolapse);
	masMedicalBoardProceedings.setUsgAbdomen(usgAbortion);
	masMedicalBoardProceedings.setGynaecologyDate(gyanaecologyDate);
	masMedicalBoardProceedings.setRemarksGynaecology(gyanaecologyRemarks);

	masMedicalBoardProceedings
			.setMedicalBoardFindings(medicalBoardExamination);
	masMedicalBoardProceedings
			.setDateMedicalBoardExam(medicalBoardExaminationDate);
	masMedicalBoardProceedings.setLmp(lmp);
	if (medicalBoardExaminationPlace != 0) {
		MasUnit masUnit1 = new MasUnit();
		masUnit1.setId(medicalBoardExaminationPlace);
		masMedicalBoardProceedings.setPlaceMedicalBoardExam(masUnit1);
	}
	masMedicalBoardProceedings
			.setMedicalBoardSubsequentFind(subsequentMedicalBoardExam);
	masMedicalBoardProceedings
			.setDateMedicalBoardSubsequent(subsequentMedicalBoardExamDate);
	if (subsequentMedicalBoardExamPlace != 0) {
		MasUnit masUnit2 = new MasUnit();
		masUnit2.setId(subsequentMedicalBoardExamPlace);
		masMedicalBoardProceedings.setPlaceMedicalBoardSubsequent(masUnit2);
	}
	masMedicalBoardProceedings.setApprovingAuthority(ApprovingAuthority);
	masMedicalBoardProceedings
			.setDateApprovingAuthority(ApprovingAuthorityDate);
	if (ApprovingAuthorityPlace != 0) {
		MasUnit masUnit3 = new MasUnit();
		masUnit3.setId(ApprovingAuthorityPlace);
		masMedicalBoardProceedings.setPlaceApprovingAuthority(masUnit3);
	}
	masMedicalBoardProceedings.setSurgeryDate(surgeyDate);
	masMedicalBoardProceedings.setMediceExamDate(medicinExamDate);
	masMedicalBoardProceedings.setNearVisionWithGlassCp(withGlassesNearCP);
	masMedicalBoardProceedings
			.setNearVisionWithoutGlassCp(withoutGlassesNearCP);
	masMedicalBoardProceedings.setUR1(sur1);
	masMedicalBoardProceedings.setUR2(sur2);
	masMedicalBoardProceedings.setUR3(sur3);
	masMedicalBoardProceedings.setUR4(sur4);
	masMedicalBoardProceedings.setUR5(sur5);
	masMedicalBoardProceedings.setUR6(sur6);
	masMedicalBoardProceedings.setUR7(sur7);
	masMedicalBoardProceedings.setUR8(sur8);

	masMedicalBoardProceedings.setUL1(sul1);
	masMedicalBoardProceedings.setUL2(sul2);
	masMedicalBoardProceedings.setUL3(sul3);
	masMedicalBoardProceedings.setUL4(sul4);
	masMedicalBoardProceedings.setUL5(sul5);
	masMedicalBoardProceedings.setUL6(sul6);
	masMedicalBoardProceedings.setUL7(sul7);
	masMedicalBoardProceedings.setUL8(sul8);

	masMedicalBoardProceedings.setLR1(slr1);
	masMedicalBoardProceedings.setLR2(slr2);
	masMedicalBoardProceedings.setLR3(slr3);
	masMedicalBoardProceedings.setLR4(slr4);
	masMedicalBoardProceedings.setLR5(slr5);
	masMedicalBoardProceedings.setLR6(slr6);
	masMedicalBoardProceedings.setLR7(slr7);
	masMedicalBoardProceedings.setLR8(slr8);

	masMedicalBoardProceedings.setLL1(sll1);
	masMedicalBoardProceedings.setLL2(sll2);
	masMedicalBoardProceedings.setLL3(sll3);
	masMedicalBoardProceedings.setLL4(sll4);
	masMedicalBoardProceedings.setLL5(sll5);
	masMedicalBoardProceedings.setLL6(sll6);
	masMedicalBoardProceedings.setLL7(sll7);
	masMedicalBoardProceedings.setLL8(sll8);
	masMedicalBoardProceedings.setLastChangedBy(lastChangedBy);
	masMedicalBoardProceedings.setLastChangedDate(lastChangedDate);
	masMedicalBoardProceedings.setLastChangedTime(lastChangedTime);
	masMedicalBoardProceedings.setServiceNo(serviceNo);
	masMedicalBoardProceedings.setServiceiaf(serviceiaf);

	masMedicalBoardProceedings.setTypeofcommision(typeOfCommunication);
	masMedicalBoardProceedings.setDateofcommun(dateofcommun);
	masMedicalBoardProceedings.setTotalService(totalservice);
	masMedicalBoardProceedings.setPastmedicalhistory(pastmedicalhistory);
	masMedicalBoardProceedings
			.setPresentmedicalhistory(presentmedicalhistory);
	masMedicalBoardProceedings.setIdealweight(idealweight);
	masMedicalBoardProceedings.setOverweight(overweight);
	masMedicalBoardProceedings.setWaist(waist);
	masMedicalBoardProceedings.setChestfullexpansion(chestfullexpansion);
	masMedicalBoardProceedings.setBhi(bhi);
	masMedicalBoardProceedings.setRangeofexpansion(rangeofexpansion);
	masMedicalBoardProceedings.setBodyfat(bodyfat);
	masMedicalBoardProceedings.setSignfoldthickness(signfoldthickness);
	masMedicalBoardProceedings.setSportman(sportman);
	masMedicalBoardProceedings.setLastame(lastame);
	masMedicalBoardProceedings.setActualweight(actualweight);
	masMedicalBoardProceedings.setSourceOfData("MEDNET");
	masMedicalBoardProceedings.setHicStatus("n");
	/**
	 * Added By Mansi
	 */
	if(req.getParameter("sd") != null && !req.getParameter("sd").equals("")){
		masMedicalBoardProceedings.setSD(req.getParameter("sd"));
	}
	/**
	 * End
	 */
	
	
	
	if (req.getParameter(SERVICE_TYPE_ID) != null
			&& !(req.getParameter(SERVICE_TYPE_ID)).equals("0")) {
		MasServiceType serviceType = new MasServiceType();
		serviceType.setId(Integer.parseInt(req
				.getParameter(SERVICE_TYPE_ID)));
		masMedicalBoardProceedings.setServiceType(serviceType);
	}
	if (req.getParameter(RANK_ID) != null
			&& !(req.getParameter(RANK_ID)).equals("0")) {
		MasRank masRank = new MasRank();
		masRank.setId(Integer.parseInt(req.getParameter(RANK_ID)));
		masMedicalBoardProceedings.setRank(masRank);
	}
	if (req.getParameter(TRADE_ID) != null
			&& !(req.getParameter(TRADE_ID)).equals("0")) {
		MasTrade masTrade = new MasTrade();
		masTrade.setId(Integer.parseInt(req.getParameter(TRADE_ID)));
		masMedicalBoardProceedings.setTrade(masTrade);
	}
	if (req.getParameter(UNIT_ID) != null
			&& !(req.getParameter(UNIT_ID)).equals("0")) {
		MasUnit unitObj = new MasUnit();
		unitObj.setId(Integer.parseInt(req.getParameter(UNIT_ID)));
		masMedicalBoardProceedings.setUnit(unitObj);
	}
	if (req.getParameter("apparentAge") != null
			&& !req.getParameter("apparentAge").equals("")) {
		String aparentage = req.getParameter("apparentAge");
		masMedicalBoardProceedings.setApparentAge(aparentage
				.substring(0, 2));
	}
	if (req.getParameter(VISIT_ID) != null
			&& !(req.getParameter(VISIT_ID)).equals("0")) {
		Visit visit = new Visit();
		visit.setId(Integer.parseInt(req.getParameter(VISIT_ID)));
		if (req.getParameter("apparentAge") == null) {
			if (masMedicalBoardProceedings.getVisit() != null
					&& masMedicalBoardProceedings.getVisit().getAge() != null) {
				masMedicalBoardProceedings
						.setApparentAge(masMedicalBoardProceedings
								.getVisit().getAge().substring(0, 2));
			}
		}
		masMedicalBoardProceedings.setVisit(visit);
	}
	if (req.getParameter(HIN_ID) != null
			&& !(req.getParameter(HIN_ID)).equals("0")) {
		Patient patient = new Patient();
		patient.setId(Integer.parseInt(req.getParameter(HIN_ID)));
		masMedicalBoardProceedings.setHin(patient);
		mapForDS.put("hinId", Integer.parseInt(req.getParameter(HIN_ID)));
	}
	if (req.getParameter(FATHER_NAME) != null
			&& !(req.getParameter(FATHER_NAME)).equals("")) {
		masMedicalBoardProceedings.setFatherName(req
				.getParameter(FATHER_NAME));
	}
	if (req.getParameter(RELEVANT_FAMILY_HISTORY) != null
			&& !(req.getParameter(RELEVANT_FAMILY_HISTORY)).equals("")) {
		masMedicalBoardProceedings.setRelevantFamilyHistory(req
				.getParameter(RELEVANT_FAMILY_HISTORY));
	}
	if (req.getParameter(DEFECTS_NOT_TO_CAUSE_REJECTION) != null
			&& !(req.getParameter(DEFECTS_NOT_TO_CAUSE_REJECTION))
					.equals("")) {
		masMedicalBoardProceedings.setDefectNotToCauseRejection(req
				.getParameter(DEFECTS_NOT_TO_CAUSE_REJECTION));
	}
	if (req.getParameter(FOUND_FIT_IN_CATEGORY) != null
			&& !(req.getParameter(FOUND_FIT_IN_CATEGORY)).equals("")) {
		masMedicalBoardProceedings.setFoundFitInCategory(req
				.getParameter(FOUND_FIT_IN_CATEGORY));
	}
	if (req.getParameter(APPOINTMENT_DATE) != null
			&& !req.getParameter(APPOINTMENT_DATE).equals("")) {
		masMedicalBoardProceedings.setAppointmentDate(HMSUtil
				.convertStringTypeDateToDateType(req
						.getParameter(APPOINTMENT_DATE)));
	}
	if (req.getParameter(APPOINTMENT_TIME) != null
			&& !req.getParameter(APPOINTMENT_TIME).equals("")) {
		masMedicalBoardProceedings.setAppointmentTime(req
				.getParameter(APPOINTMENT_TIME));
	}
	if (req.getParameter("particularOfPreviousService") != null
			&& !(req.getParameter("particularOfPreviousService").equals(""))) {
		masMedicalBoardProceedings.setParticularOfPreviousService(req
				.getParameter("particularOfPreviousService"));
	}
	if (req.getParameter("Hips") != null
			&& !(req.getParameter("Hips").equals(""))) {
		masMedicalBoardProceedings.setHips(req.getParameter("Hips"));
	}
	if (req.getParameter("WHR") != null
			&& !(req.getParameter("WHR").equals(""))) {
		masMedicalBoardProceedings.setWhr(req.getParameter("WHR"));
	}
	if (req.getParameter("medicalExamType") != null
			&& !req.getParameter("medicalExamType").equals("")) {
		masMedicalBoardProceedings.setMedicalExamType(req
				.getParameter("medicalExamType"));
		mapForDS
				.put("medicalExamType", req.getParameter("medicalExamType"));
	}
	if (req.getParameter("MissTeeth") != null
			&& !req.getParameter("MissTeeth").equals("")) {
		masMedicalBoardProceedings.setMissTeeth(req
				.getParameter("MissTeeth"));
	}
	if (req.getParameter("UnserTeeth") != null
			&& !req.getParameter("UnserTeeth").equals("")) {
		masMedicalBoardProceedings.setUnserTeeth(req
				.getParameter("UnserTeeth"));
	}
	if (req.getParameter("Investigated") != null
			&& !req.getParameter("Investigated").equals("")) {
		masMedicalBoardProceedings.setInvestigated(req
				.getParameter("Investigated"));
	}
	if (req.getParameter(APPOINTMENT_TIME) != null
			&& !req.getParameter(APPOINTMENT_TIME).equals("")) {
		masMedicalBoardProceedings.setAppointmentTime(req
				.getParameter(APPOINTMENT_TIME));
	}
	if (req.getParameter(HIGHER_MENTAL_FUNCTION) != null
			&& !req.getParameter(HIGHER_MENTAL_FUNCTION).equals("")) {
		masMedicalBoardProceedings.setHigherMentalFunction(req
				.getParameter(HIGHER_MENTAL_FUNCTION));
	}
	if (req.getParameter(SPEECH) != null
			&& !req.getParameter(SPEECH).equals("")) {
		masMedicalBoardProceedings.setSpeech(req.getParameter(SPEECH));
	}
	if (req.getParameter(REFLEXES) != null
			&& !req.getParameter(REFLEXES).equals("")) {
		masMedicalBoardProceedings.setReflexes(req.getParameter(REFLEXES));
	}
	if (req.getParameter(TREMORS) != null
			&& !req.getParameter(TREMORS).equals("")) {
		masMedicalBoardProceedings.setTremors(req.getParameter(TREMORS));
	}
	if (req.getParameter(SELF_BALANCING_TEST) != null
			&& !req.getParameter(SELF_BALANCING_TEST).equals("")) {
		masMedicalBoardProceedings.setSelfBalancingTest(req
				.getParameter(SELF_BALANCING_TEST));
	}

	if (req.getParameter(CORONORY_RISK_FACTOR) != null
			&& !req.getParameter(CORONORY_RISK_FACTOR).equals("")) {
		masMedicalBoardProceedings.setCoronaryRiskFactor(req
				.getParameter(CORONORY_RISK_FACTOR));
	}
	if (req.getParameter("familyHistoryOther") != null
			&& !req.getParameter("familyHistoryOther").equals("")) {
		masMedicalBoardProceedings.setFmdm(req
				.getParameter("familyHistoryOther"));
	}
	if (req.getParameter(SIGNED_BY) != null
			&& !req.getParameter(SIGNED_BY).equals("")) {
		masMedicalBoardProceedings.setSignedBy(req.getParameter(SIGNED_BY));
	}
	if (req.getParameter(APPROVED_BY) != null
			&& !req.getParameter(APPROVED_BY).equals("")) {
		masMedicalBoardProceedings.setApprovedBy(req
				.getParameter(APPROVED_BY));
	}
	if (req.getParameter(SEND_TO) != null
			&& !req.getParameter(SEND_TO).equals("")) {
		masMedicalBoardProceedings.setSendTo(req.getParameter(SEND_TO));
	}
	if (req.getParameter("liver") != null
			&& !req.getParameter("liver").equals("")) {
		masMedicalBoardProceedings.setLiver(req.getParameter("liver"));
	}
	if (req.getParameter("spleen") != null
			&& !req.getParameter("spleen").equals("")) {
		masMedicalBoardProceedings.setSpleen(req.getParameter("spleen"));
	}
	if (req.getParameter("upperLimbs") != null
			&& !req.getParameter("upperLimbs").equals("")) {
		masMedicalBoardProceedings.setUpperLimbs(req
				.getParameter("upperLimbs"));
	}
	if (req.getParameter("locomotion") != null
			&& !req.getParameter("locomotion").equals("")) {
		masMedicalBoardProceedings.setLocomotion(req
				.getParameter("locomotion"));
	}
	if (req.getParameter("chestMeasurement") != null
			&& !req.getParameter("chestMeasurement").equals("")) {
		masMedicalBoardProceedings.setChestMeasurement(req
				.getParameter("chestMeasurement"));
	}
	if (req.getParameter("fullExpiration") != null
			&& !req.getParameter("fullExpiration").equals("")) {
		masMedicalBoardProceedings.setFullExpiration(req
				.getParameter("fullExpiration"));
	}
	if (req.getParameter("abnormalities") != null
			&& !req.getParameter("abnormalities").equals("")) {
		masMedicalBoardProceedings.setAbnormalities(req
				.getParameter("abnormalities"));
	}
	if (req.getParameter("otherAbnormalities") != null
			&& !req.getParameter("otherAbnormalities").equals("")) {
		masMedicalBoardProceedings.setAnyOtheAbnormalities(req
				.getParameter("otherAbnormalities"));
	}
	if (req.getParameter("anyEvidenceOfSkin") != null
			&& !req.getParameter("anyEvidenceOfSkin").equals("")) {
		masMedicalBoardProceedings.setAnyEvidenceOfSkin(req
				.getParameter("anyEvidenceOfSkin"));
	}
	if (req.getParameter("centralNervousSystem") != null
			&& !req.getParameter("centralNervousSystem").equals("")) {
		masMedicalBoardProceedings.setCentralNervousSystem(req
				.getParameter("centralNervousSystem"));
	}
	if (req.getParameter("mentalInstability") != null
			&& !req.getParameter("mentalInstability").equals("")) {
		masMedicalBoardProceedings.setMentalInstability(req
				.getParameter("mentalInstability"));
	}
	if (req.getParameter("essentialInstability") != null
			&& !req.getParameter("essentialInstability").equals("")) {
		masMedicalBoardProceedings.setEssentialInstability(req
				.getParameter("essentialInstability"));
	}
	if (req.getParameter("smoker") != null
			&& !req.getParameter("smoker").equals("")) {
		masMedicalBoardProceedings.setSmoker(req.getParameter("smoker"));
	}
	if (req.getParameter("drinker") != null
			&& !req.getParameter("drinker").equals("")) {
		masMedicalBoardProceedings.setDrinker(req.getParameter("drinker"));
	}
	if (req.getParameter("allergies") != null
			&& !req.getParameter("allergies").equals("")) {
		masMedicalBoardProceedings.setAllergies(req
				.getParameter("allergies"));
	}
	if (req.getParameter("locomoterSystem") != null
			&& !req.getParameter("locomoterSystem").equals("")) {
		masMedicalBoardProceedings.setLocomoterSystem(req
				.getParameter("locomoterSystem"));
		CocatHicNevreData = "LocomoterSystem" + ":"
				+ req.getParameter("locomoterSystem") + "/ ";
	} else {
		CocatHicNevreData = "LocomoterSystem" + ":" + "NA" + "/ ";
	}

	if (req.getParameter("spine") != null
			&& !req.getParameter("spine").equals("")) {
		masMedicalBoardProceedings.setSpine(req.getParameter("spine"));
		CocatHicNevreData += "Spine" + ":" + req.getParameter("spine")
				+ "/ ";
	} else {
		CocatHicNevreData += "Spine" + ":" + "NA" + "/ ";
	}
	if (req.getParameter("tympanicMembranceIntact") != null
			&& !req.getParameter("tympanicMembranceIntact").equals("")) {
		masMedicalBoardProceedings.setTympanicMembranceIntact(req
				.getParameter("tympanicMembranceIntact"));
	}
	if (req.getParameter(MOBILITYR) != null
			&& !req.getParameter(MOBILITYR).equals("")) {
		masMedicalBoardProceedings
				.setMobilityR(req.getParameter(MOBILITYR));
	}
	if (req.getParameter("noseThroatSinuses") != null
			&& !req.getParameter("noseThroatSinuses").equals("")) {
		masMedicalBoardProceedings.setNoseThroatSinuses(req
				.getParameter("noseThroatSinuses"));
	}

	if (req.getParameter(KNOWN_ALLERGY) != null
			&& !req.getParameter(KNOWN_ALLERGY).equals("")) {
		masMedicalBoardProceedings.setAllergies(req
				.getParameter(KNOWN_ALLERGY));
	}
	if (req.getParameter(BATCH_NO) != null
			&& !req.getParameter(BATCH_NO).equals("")) {
		masMedicalBoardProceedings.setBatchNo(req.getParameter(BATCH_NO));
	}
	if (req.getParameter("cmMdRemarks") != null
			&& !req.getParameter("cmMdRemarks").equals("")) {
		masMedicalBoardProceedings.setMdRemarks(req
				.getParameter("cmMdRemarks"));
	}
	if (req.getParameter(AUTHORITY_OF_BOARD) != null
			&& !req.getParameter(AUTHORITY_OF_BOARD).equals("")) {
		masMedicalBoardProceedings.setAuthority(req
				.getParameter(AUTHORITY_OF_BOARD));
	}
	if (req.getParameter(PLACE) != null
			&& !req.getParameter(PLACE).equals("")) {
		masMedicalBoardProceedings.setPlace(req.getParameter(PLACE));
	}
	if (req.getParameter(DATE_DISCHARGE) != null
			&& !req.getParameter(DATE_DISCHARGE).equals("")) {
		masMedicalBoardProceedings.setDateDischarge(HMSUtil
				.convertStringTypeDateToDateType(req
						.getParameter(DATE_DISCHARGE)));
	}
	if (req.getParameter(DATE_OF_RELEASE) != null
			&& !req.getParameter(DATE_OF_RELEASE).equals("")) {
		masMedicalBoardProceedings.setDateRelease(HMSUtil
				.convertStringTypeDateToDateType(req
						.getParameter(DATE_OF_RELEASE)));
	}
	if (req.getParameter(MARITAL_STATUS_ID) != null
			&& !req.getParameter(MARITAL_STATUS_ID).equals("")) {
		MasMaritalStatus maritalstatus = new MasMaritalStatus();
		maritalstatus.setId(Integer.parseInt(req
				.getParameter(MARITAL_STATUS_ID)));
		masMedicalBoardProceedings.setMaritalStatus(maritalstatus);

	}

	// if(req.getParameter(SERVICE_TYPE_ID) != null &&
	// !req.getParameter(SERVICE_TYPE_ID).equals("")){
	// masMedicalBoardProceedings.setBatchNo(req.getParameter(SERVICE_TYPE_ID));
	// }
	if (req.getParameter(DATE_DISEASE) != null
			&& !req.getParameter(DATE_DISEASE).equals("")) {
		masMedicalBoardProceedings.setDateDisease(HMSUtil
				.convertStringTypeDateToDateType(req
						.getParameter(DATE_DISEASE)));
	}
	if (req.getParameter(PLACE_DISEASE) != null
			&& !req.getParameter(PLACE_DISEASE).equals("")) {
		masMedicalBoardProceedings.setPlacedisease(req
				.getParameter(PLACE_DISEASE));
	}
	if (req.getParameter(WHERE_TREATED) != null
			&& !req.getParameter(WHERE_TREATED).equals("")) {
		masMedicalBoardProceedings.setWheretreated(req
				.getParameter(WHERE_TREATED));
	}
	if (req.getParameter(DATE_APPROXIMATE) != null
			&& !req.getParameter(DATE_APPROXIMATE).equals("")) {
		masMedicalBoardProceedings.setDateapproximate(HMSUtil
				.convertStringTypeDateToDateType(req
						.getParameter(DATE_APPROXIMATE)));
	}
	if (req.getParameter(DISABILITY_BEFORE) != null
			&& !req.getParameter(DISABILITY_BEFORE).equals("")) {
		masMedicalBoardProceedings.setDisabilitybefore(req
				.getParameter(DISABILITY_BEFORE));
	}
	if (req.getParameter(DISABILITY) != null
			&& !req.getParameter(DISABILITY).equals("")) {
		masMedicalBoardProceedings.setDisability(req
				.getParameter(DISABILITY));
	}
	if (req.getParameter(CLAMING_DISABILITY) != null
			&& !req.getParameter(CLAMING_DISABILITY).equals("")) {
		masMedicalBoardProceedings.setClamingdisability(req
				.getParameter(CLAMING_DISABILITY));
	}
	if (req.getParameter(DATE_DISCHARGE) != null
			&& !req.getParameter(DATE_DISCHARGE).equals("")) {
		masMedicalBoardProceedings.setDateDischarge(HMSUtil
				.convertStringTypeDateToDateType(req
						.getParameter(DATE_DISCHARGE)));
	}
	if (req.getParameter(UPLOADED_DATE) != null
			&& !req.getParameter(UPLOADED_DATE).equals("")) {
		masMedicalBoardProceedings.setUploadeddate(HMSUtil
				.convertStringTypeDateToDateType(req
						.getParameter(UPLOADED_DATE)));
	}
	if (req.getParameter(REPORTED_DATE) != null
			&& !req.getParameter(REPORTED_DATE).equals("")) {
		masMedicalBoardProceedings.setDateOfReporting(HMSUtil
				.convertStringTypeDateToDateType(req
						.getParameter(REPORTED_DATE)));
	}
	if (req.getParameter(CONDITION_OF_GUMS) != null
			&& !req.getParameter(CONDITION_OF_GUMS).equals("")) {
		masMedicalBoardProceedings.setConditionOfGums(req
				.getParameter(CONDITION_OF_GUMS));
	}
	if (req.getParameter(TYMPANIC_L) != null
			&& !req.getParameter(TYMPANIC_L).equals("")) {
		masMedicalBoardProceedings.setTympanicL(req
				.getParameter(TYMPANIC_L));
	}
	if (req.getParameter(TYMPANIC_R) != null
			&& !req.getParameter(TYMPANIC_R).equals("")) {
		masMedicalBoardProceedings.setTympanicR(req
				.getParameter(TYMPANIC_R));
	}
	if (req.getParameter(MOBILITYL) != null
			&& !req.getParameter(MOBILITYL).equals("")) {
		masMedicalBoardProceedings
				.setMobilityL(req.getParameter(MOBILITYL));
	}
	if (req.getParameter(NOSE_THROAT) != null
			&& !req.getParameter(NOSE_THROAT).equals("")) {
		masMedicalBoardProceedings.setNosethroat(req
				.getParameter(NOSE_THROAT));
	}
	if (req.getParameter(DATE_OF_AME) != null
			&& !req.getParameter(DATE_OF_AME).equals("")) {
		masMedicalBoardProceedings.setDateMedicalBoardSubsequent(HMSUtil
				.convertStringTypeDateToDateType(req
						.getParameter(DATE_OF_AME)));
	}

	if (req.getParameter(HERNIA_MUSCLE) != null
			&& !req.getParameter(HERNIA_MUSCLE).equals("")) {
		CocatHicNevreData += "HerniaMuscle" + ":"
				+ req.getParameter(HERNIA_MUSCLE) + "/ ";
	} else {
		CocatHicNevreData += "HerniaMuscle" + ":" + "NA" + "/ ";
	}
	if (req.getParameter(HYDROCELE) != null
			&& !req.getParameter(HYDROCELE).equals("")) {
		CocatHicNevreData += "Hydrocele" + ":"
				+ req.getParameter(HYDROCELE) + "/ ";
	} else {
		CocatHicNevreData += "Hydrocele" + ":" + "NA" + "/ ";
	}
	if (req.getParameter(HEMONHOIDS) != null
			&& !req.getParameter(HEMONHOIDS).equals("")) {
		CocatHicNevreData += "Hemonhoids" + " :"
				+ req.getParameter(HEMONHOIDS) + "/ ";
	} else {
		CocatHicNevreData += "Hemonhoids" + ":" + "NA" + "/ ";
	}
	if (req.getParameter(BREASTS) != null
			&& !req.getParameter(BREASTS).equals("")) {
		CocatHicNevreData += "Breasts" + ":" + req.getParameter(BREASTS)
				+ "/ ";
	} else {
		CocatHicNevreData += "Breasts" + ":" + "NA" + "/ ";
	}
	if (CocatHicNevreData != null && !CocatHicNevreData.equals("")) {
		masMedicalBoardProceedings.setDataOfNurveHic(CocatHicNevreData);
	}
	if (req.getParameter("dentalValue") != null
			&& !req.getParameter("dentalValue").equals("")) {
		masMedicalBoardProceedings.setDentalValue(req
				.getParameter("dentalValue"));
	}
	int visitNumberForReport = 0;
	if (req.getParameter("visitNumberForReport") != null
			&& !req.getParameter("visitNumberForReport").equals("")) {
		visitNumberForReport = Integer.parseInt(req
				.getParameter("visitNumberForReport"));
	}
	String hinNoForreport = null;
	if (req.getParameter("hinNoForreport") != null
			&& !req.getParameter("hinNoForreport").equals("")) {
		hinNoForreport = req.getParameter("hinNoForreport");
	}
	if (req.getParameter(PAST_MEDICAL_CATEGORY) != null
			&& !(req.getParameter(PAST_MEDICAL_CATEGORY)).equals("0")) {
		Category categ1 = new Category();
		categ1.setCategoryid(Integer.parseInt(req
				.getParameter(PAST_MEDICAL_CATEGORY)));
		masMedicalBoardProceedings.setPastMedicalCategory(categ1);
	}
	if (req.getParameter(PRESENT_MEDICAL_CATEGORY) != null
			&& !(req.getParameter(PRESENT_MEDICAL_CATEGORY)).equals("0")) {
		Category categ2 = new Category();
		categ2.setCategoryid(Integer.parseInt(req
				.getParameter(PRESENT_MEDICAL_CATEGORY)));
		masMedicalBoardProceedings.setPresentMedicalCategory(categ2);
	}
	String medicaltype = masMedicalBoardProceedings.getMedicalExamType();
	MasMedicalExaminationDetail medicaldetail = new MasMedicalExaminationDetail();
	int temp1 = 1;
	List<Integer> serialnolist = new ArrayList<Integer>();
	List<String> fromlist = new ArrayList<String>();
	List<String> tolist = new ArrayList<String>();
	List<String> placelist = new ArrayList<String>();
	List<String> pnolist = new ArrayList<String>();

	List<Integer> serialnolist1 = new ArrayList<Integer>();
	List<String> illnesslist = new ArrayList<String>();
	List<Date> particulardatelist = new ArrayList<Date>();
	List<Integer> rankidlist = new ArrayList<Integer>();
	List<String> treatedlist = new ArrayList<String>();
	List<Date> approximatedatelist = new ArrayList<Date>();
	List<Date> approximatedate2list = new ArrayList<Date>();
	List<String> beforeDisabilitylist = new ArrayList<String>();

	List<String> placelist1 = new ArrayList<String>();
	List<String> principallist = new ArrayList<String>();
	List<Date> origindatelist = new ArrayList<Date>();
	List<Date> medicalcatdatelist = new ArrayList<Date>();
	List<Date> nextcatdatelist = new ArrayList<Date>();

	int hdbvalue1 = 1;
	int hiddenValue1 = 1;
	int hdbvalue = 1;
	if (medicaltype.equalsIgnoreCase("Medical Board AFMSF 16")) {

		if (Integer.parseInt(req.getParameter("hdb")) != 1) {
			hdbvalue = Integer.parseInt(req.getParameter("hdb"));
		}
		int k = 0;
		for (int i = 1; i <= hdbvalue; i++) {
			if (req.getParameter(FROM + i) != null
					&& !req.getParameter(FROM + i).equals("")) {
				if (req.getParameter(SIRIAL_NO + i) == "") {
					serialnolist.add(i);
				} else if (req.getParameter(SIRIAL_NO + i) != null
						&& !req.getParameter(SIRIAL_NO + i).equals("")) {
					serialnolist.add(Integer.parseInt(req
							.getParameter(SIRIAL_NO + i)));
				} else {
					serialnolist.add(0);
				}

				if (req.getParameter(FROM + i) != null
						&& !req.getParameter(FROM + i).equals("")) {
					fromlist.add(req.getParameter(FROM + i));
				} else {
					fromlist.add("");
				}

				if (req.getParameter(TO + i) != null
						&& !req.getParameter(TO + i).equals("")) {
					tolist.add(req.getParameter(TO + i));
				} else {
					tolist.add("");
				}
				if (req.getParameter(PLACE + i) != null
						&& !req.getParameter(PLACE + i).equals("")) {
					placelist.add(req.getParameter(PLACE + i));
				} else {
					placelist.add("");
				}
				if (req.getParameter(P_NO + i) != null
						&& !req.getParameter(P_NO + i).equals("")) {
					pnolist.add(req.getParameter(P_NO + i));
				} else {
					pnolist.add("");
				}
				/*
				 * if(req.getParameter(PRINCIPAL+ i) != null ){
				 * principallist.add(req.getParameter(PRINCIPAL+ i)); }else{
				 * principallist.add(""); } if(req.getParameter(ORIGIN_DATE+
				 * i) != null &&(!req.getParameter(ORIGIN_DATE+
				 * i).equals(""))){
				 * origindatelist.add(HMSUtil.convertStringTypeDateToDateType
				 * (req.getParameter(ORIGIN_DATE+ i))); }else{
				 * origindatelist.add(null); }
				 * if(req.getParameter(MEDICAL_CAT_DATE+ i) != null
				 * &&(!req.getParameter(MEDICAL_CAT_DATE+ i).equals(""))){
				 * medicalcatdatelist
				 * .add(HMSUtil.convertStringTypeDateToDateType
				 * (req.getParameter(MEDICAL_CAT_DATE+ i))); }else{
				 * medicalcatdatelist.add(null); }
				 * if(req.getParameter(NEXT_CAT_DATE+ i) != null
				 * &&(!req.getParameter(NEXT_CAT_DATE+ i).equals(""))){
				 * nextcatdatelist
				 * .add(HMSUtil.convertStringTypeDateToDateType
				 * (req.getParameter(NEXT_CAT_DATE+ i))); }else{
				 * nextcatdatelist.add(null); }
				 */
			}
		}
		mapForDS.put("alcohol", alcohol);
		mapForDS.put("hdbvalue", hdbvalue);
		mapForDS.put("hiddenValue", hiddenValue);
		mapForDS.put("serialnolist", serialnolist);
		mapForDS.put("fromlist", fromlist);
		mapForDS.put("tolist", tolist);
		mapForDS.put("placelist", placelist);
		mapForDS.put("pnolist", pnolist);
		/*
		 * mapForDS.put("principallist", principallist);
		 * mapForDS.put("origindatelist", origindatelist);
		 * mapForDS.put("medicalcatdatelist", medicalcatdatelist);
		 * mapForDS.put("nextcatdatelist", nextcatdatelist);
		 */
		List<Integer> illnessICDlist = new ArrayList<Integer>();
		if (Integer.parseInt(req.getParameter("hdb1")) != 1) {
			hdbvalue1 = Integer.parseInt(req.getParameter("hdb1"));
		}
		for (int i = 1; i <= hdbvalue1; i++) {
			if (req.getParameter(ILLNESS + i) != null
					&& !req.getParameter(ILLNESS + i).equals("")) {
				if (req.getParameter(SIRIAL_NO1 + i).equals("")) {
					serialnolist1.add(i);
				} else if (req.getParameter(SIRIAL_NO1 + i) != null
						&& !req.getParameter(SIRIAL_NO1 + i).equals("")) {
					serialnolist1.add(Integer.parseInt(req
							.getParameter(SIRIAL_NO1 + i)));
				} else {
					serialnolist1.add(0);
				}

				/*
				 * if(req.getParameter(ILLNESS+ i) != null ){
				 * illnesslist.add(req.getParameter(ILLNESS+ i)); }else{
				 * illnesslist.add(""); }
				 */
				String str = "";
				if (req.getParameter(ILLNESS + i) != null) {
					// illnesslist.add(req.getParameter(ILLNESS+ i));
					str = req.getParameter(ILLNESS + i);
				} else {
					// illnesslist.add("");
					str = "";
				}
				int icdId = 0;
				if (str != "") {
					String illness = "";
					int lastIndex = str.indexOf("[");
					if (lastIndex > 0) {
						illness = str.substring(0, lastIndex);
						illnesslist.add(illness);
					} else {
						illness = str;
						illnesslist.add("");
					}
					int index1 = str.lastIndexOf("[");
					int index2 = str.lastIndexOf("]");
					// icdId
					// =Integer.parseInt(str.substring((index1+1),index2));
					try {
						if (str != null && !str.equals("")) {
							icdId = Integer.parseInt(str.substring(
									(index1 + 1), index2));
						}
					} catch (NumberFormatException e) {

						e.printStackTrace();
					}
					illnessICDlist.add(icdId);
				} else {
					illnessICDlist.add(icdId);
					illnesslist.add("");
				}
				if (req.getParameter(PARTICULAR_DATE + i) != null
						&& (!req.getParameter(PARTICULAR_DATE + i).equals(
								""))) {
					particulardatelist.add(HMSUtil
							.convertStringTypeDateToDateType(req
									.getParameter(PARTICULAR_DATE + i)));
				} else {
					particulardatelist.add(null);
				}
				/*
				 * if(req.getParameter(RANK_INDIVIDUAL_ID+ i) != null ){
				 * rankidlist
				 * .add(Integer.parseInt(req.getParameter(RANK_INDIVIDUAL_ID
				 * + i))); }else{ rankidlist.add(0); }
				 */
				if (req.getParameter(TREATED + i) != null
						&& !req.getParameter(TREATED + i).equals("")) {
					treatedlist.add(req.getParameter(TREATED + i));
				} else {
					treatedlist.add("");
				}
				if (req.getParameter(PLACE1 + i) != null
						&& !req.getParameter(PLACE1 + i).equals("")) {
					placelist1.add(req.getParameter(PLACE1 + i));
				} else {
					placelist1.add("");
				}
				if (req.getParameter(APPROXIMATE_DATE + i) != null
						&& (!req.getParameter(APPROXIMATE_DATE + i).equals(
								""))) {
					approximatedatelist.add(HMSUtil
							.convertStringTypeDateToDateType(req
									.getParameter(APPROXIMATE_DATE + i)));
				} else {
					approximatedatelist.add(null);
				}
				if (req.getParameter(APPROXIMATE_DATE2 + i) != null
						&& (!req.getParameter(APPROXIMATE_DATE2 + i)
								.equals(""))) {
					approximatedate2list.add(HMSUtil
							.convertStringTypeDateToDateType(req
									.getParameter(APPROXIMATE_DATE2 + i)));
				} else {
					approximatedate2list.add(null);
				}
				if (req.getParameter("beforeDisability" + i) != null) {
					beforeDisabilitylist.add(req
							.getParameter("beforeDisability" + i));
				} else {
					beforeDisabilitylist.add("n");
				}
			}
			mapForDS.put("illnessICDlist", illnessICDlist);
			mapForDS.put("hdbvalue1", hdbvalue1);
			mapForDS.put("hiddenValue1", hiddenValue1);
			mapForDS.put("serialnolist1", serialnolist1);
			mapForDS.put("illnesslist", illnesslist);
			mapForDS.put("particulardatelist", particulardatelist);
			// mapForDS.put("rankidlist", rankidlist);
			mapForDS.put("treatedlist", treatedlist);
			mapForDS.put("approximatedatelist", approximatedatelist);
			mapForDS.put("approximatedate2list", approximatedate2list);
			mapForDS.put("beforeDisabilitylist", beforeDisabilitylist);

			mapForDS.put("placelist1", placelist1);
		}
		/*
		 * Code for Disability Before Service Date 27 Feb 2012
		 */
		List<Integer> serialnoBeforeList = new ArrayList<Integer>();
		List<String> illnessBeforeList = new ArrayList<String>();
		List<Date> particulardateBeforeList = new ArrayList<Date>();
		List<String> treatedBeforeList = new ArrayList<String>();
		List<String> placeBeforeList = new ArrayList<String>();
		List<String> beforeDisabilityBeforeList = new ArrayList<String>();
		List<Integer> illnessICDBeforelist = new ArrayList<Integer>();
		int hdbBefore = 1;

		if (Integer.parseInt(req.getParameter("hdbBefore")) != 1) {
			hdbBefore = Integer.parseInt(req.getParameter("hdbBefore"));
		}
		for (int ii = 1; ii <= hdbBefore; ii++) {
			if (req.getParameter(ILLNESS + ii) != null
					&& !req.getParameter(ILLNESS + ii).equals("")) {
				/*
				 * if(req.getParameter(SIRIAL_NO1+"1"+ii) == "" ){
				 * serialnoBeforeList.add(ii); }else
				 */if (req.getParameter(SIRIAL_NO1 + "1" + ii) != null
						&& !req.getParameter(SIRIAL_NO1 + "1" + ii).equals(
								"")) {
					serialnoBeforeList.add(Integer.parseInt(req
							.getParameter(SIRIAL_NO1 + "1" + ii)));
				} else {
					serialnoBeforeList.add(0);
				}

				/*
				 * if(req.getParameter(ILLNESS+"1"+i) != null ){
				 * illnessBeforeList.add(req.getParameter(ILLNESS+"1"+i));
				 * }else{ illnessBeforeList.add(""); }
				 */
				String beforeStr = "";
				if (req.getParameter(ILLNESS + "1" + ii) != null) {
					beforeStr = req.getParameter(ILLNESS + "1" + ii);
				} else {
					// illnessBeforeList.add("");
					beforeStr = "";
				}

				int icdId = 0;
				if (beforeStr != "") {
					String illness = "";
					int lastIndex = beforeStr.indexOf("[");
					if (lastIndex > 0) {
						illness = beforeStr.substring(0, lastIndex);
						illnessBeforeList.add(illness);
					} else {
						illness = beforeStr;
						illnessBeforeList.add("");
					}
					int index1 = beforeStr.lastIndexOf("[");
					int index2 = beforeStr.lastIndexOf("]");
					// icdId
					// =Integer.parseInt(beforeStr.substring((index1+1),index2));
					try {
						if (beforeStr != null && !beforeStr.equals("")) {
							icdId = Integer.parseInt(beforeStr.substring(
									(index1 + 1), index2));
						}
					} catch (NumberFormatException e) {

						e.printStackTrace();
					}
					illnessICDBeforelist.add(icdId);
				} else {
					illnessICDBeforelist.add(icdId);
					illnessBeforeList.add("");
				}
				if (req.getParameter(PARTICULAR_DATE + "1" + ii) != null
						&& (!req.getParameter(PARTICULAR_DATE + "1" + ii)
								.equals(""))) {
					particulardateBeforeList.add(HMSUtil
							.convertStringTypeDateToDateType(req
									.getParameter(PARTICULAR_DATE + "1"
											+ ii)));
				} else {
					particulardateBeforeList.add(null);
				}
				if (req.getParameter(TREATED + "1" + ii) != null
						&& !req.getParameter(TREATED + "1" + ii).equals("")) {
					treatedBeforeList.add(req.getParameter(TREATED + "1"
							+ ii));
				} else {
					treatedBeforeList.add("");
				}
				if (req.getParameter(PLACE1 + "1" + ii) != null
						&& !req.getParameter(PLACE1 + "1" + ii).equals("")) {
					placeBeforeList
							.add(req.getParameter(PLACE1 + "1" + ii));
				} else {
					placeBeforeList.add("");
				}
				if (req.getParameter("beforeDisability" + "1" + ii) != null
						&& !req.getParameter("beforeDisability" + "1" + ii)
								.equals("")) {
					beforeDisabilityBeforeList.add(req
							.getParameter("beforeDisability" + "1" + ii));
				} else {
					beforeDisabilityBeforeList.add("n");
				}

				// temp2=temp2+1;
			}
			mapForDS.put("illnessICDBeforelist", illnessICDBeforelist);
			/*
			 * Code for Disability Date 01 March 2012
			 */
			int hdbDisability = 1;

			if (Integer.parseInt(req.getParameter("hdbDisability")) != 1) {
				hdbDisability = Integer.parseInt(req
						.getParameter("hdbDisability"));
			}
			List<MasMedicalExaminationDetail> masMedicalExaminationDetailsDisabilityList = new ArrayList<MasMedicalExaminationDetail>();
			for (int i = 1; i <= hdbDisability; i++) {
				MasMedicalExaminationDetail masMedicalExaminationDetail = new MasMedicalExaminationDetail();
				String str = "";
				if (req.getParameter("systemDiagnosis" + i) != null) {
					str = req.getParameter("systemDiagnosis" + i);
				} else {
					str = "";
				}
				/*
				 * if(req.getParameter("icdDisability"+i) != null ){
				 * str=req.getParameter("icdDisability"+i); }else{ str=""; }
				 */
				if (str != "") {
					String systemDiagnosis = "";
					int lastIndex = str.indexOf("[");
					if (lastIndex > 0) {
						systemDiagnosis = str.substring(0, lastIndex);
					} else {
						systemDiagnosis = str;
					}
					int index1 = str.lastIndexOf("[");
					int index2 = str.lastIndexOf("]");
					int icdId = 0;
					// int icdId
					// =Integer.parseInt(str.substring((index1+1),index2));
					try {
						if (str != null && !str.equals("")) {
							icdId = Integer.parseInt(str.substring(
									(index1 + 1), index2));
						}
					} catch (NumberFormatException e) {

						e.printStackTrace();
					}
					
					if(icdId>0){ 
						MasIcd masIcd=new MasIcd();
						masIcd.setId(icdId);
						masMedicalExaminationDetail.setMasIcd(masIcd);
					}
					 
				/*	if (icdId > 0) {
						MasSystemDiagnosis sysDiagnosis = new MasSystemDiagnosis();
						sysDiagnosis.setId(icdId);
						masMedicalExaminationDetail
								.setSystemDiagnosis(sysDiagnosis);
					}*/
					masMedicalExaminationDetail
							.setPrincipal(systemDiagnosis);
					masMedicalExaminationDetail.setParticular("detail");
					masMedicalExaminationDetailsDisabilityList
							.add(masMedicalExaminationDetail);

				}
			}
			mapForDS.put("masMedicalExaminationDetailsDisabilityList",
					masMedicalExaminationDetailsDisabilityList);
			/*
			 * End of Code for Disability Date 01 March 2012
			 */
			mapForDS.put("hdbBefore", hdbBefore);
			mapForDS.put("illnessBeforeList", illnessBeforeList);
			mapForDS.put("serialnoBeforeList", serialnoBeforeList);
			mapForDS.put("particulardateBeforeList",
					particulardateBeforeList);
			mapForDS.put("treatedBeforeList", treatedBeforeList);
			mapForDS.put("placeBeforeList", placeBeforeList);
			mapForDS.put("beforeDisabilityBeforeList",
					beforeDisabilityBeforeList);

			/*
			 * End of Code for Disability Before Service Date 27 Feb 2012
			 */
		}
	}

	Users maUser = new Users();
	maUser.setId(userId);
	masMedicalBoardProceedings.setMaUser(maUser);

	MasHospital hospital = new MasHospital();
	hospital.setId(hospitalId);
	masMedicalBoardProceedings.setHospital(hospital);

	MasCommand command = new MasCommand();
	command.setId(commandId);
	masMedicalBoardProceedings.setCommand(command);

	masMedicalBoardProceedings.setStatus("p");
	masMedicalBoardProceedings.setMedicalType("MedicalBoard");

	String incidents_during_your_service = "";
	String reasonWoundInjury = "";
	String MED_BOARD_HELD = "";
	String INJURY_REPORT = "";
	if (req.getParameter("incidents_during_your_service") != null
			&& !req.getParameter("incidents_during_your_service")
					.equals("")) {
		incidents_during_your_service = req
				.getParameter("incidents_during_your_service");
	}
	if (req.getParameter("reasonWoundInjury") != null
			&& !req.getParameter("reasonWoundInjury").equals("")) {
		reasonWoundInjury = req.getParameter("reasonWoundInjury");
	}
	if (req.getParameter("MED_BOARD_HELD") != null
			&& !req.getParameter("MED_BOARD_HELD").equals("")) {
		MED_BOARD_HELD = req.getParameter("MED_BOARD_HELD");
	}
	if (req.getParameter("INJURY_REPORT") != null
			&& !req.getParameter("INJURY_REPORT").equals("")) {
		INJURY_REPORT = req.getParameter("INJURY_REPORT");
	}
	String allergies = "";
	if (req.getParameter("allergies") != null) {
		allergies = req.getParameter("allergies");
	}
	masMedicalBoardProceedings
			.setIncidentsDuringYourService(incidents_during_your_service);
	masMedicalBoardProceedings.setReasonWoundInjury(reasonWoundInjury);

	masMedicalBoardProceedings.setMedBoardHeld(MED_BOARD_HELD);
	masMedicalBoardProceedings.setInjuryReport(INJURY_REPORT);
	masMedicalBoardProceedings.setPlace(place);
	String investigationDataStatus = null;
	if (req.getParameter("investigationDataStatus") != null) {
		investigationDataStatus = req
				.getParameter("investigationDataStatus");
	}
	mapForDS.put("investigationDataStatus", investigationDataStatus);
	mapForDS.put("chargeCodeIdList", chargeCodeIdList);
	mapForDS.put("quantityList", quantityList);
	mapForDS.put("clinicalNotes1", clinicalNotes1);
	mapForDS.put("lastChangedBy", lastChangedBy);
	mapForDS.put("lastChangedDate", lastChangedDate);
	mapForDS.put("lastChangedTime", lastChangedTime);
	mapForDS.put("investigationReferToMHList", investigationReferToMHList);

	mapForDS.put("hospitalId", hospitalId);
	mapForDS.put("deptId", deptId);
	mapForDS.put("empId", empId);
	mapForDS.put("userId", userId);
	mapForDS.put("hinId", hinId);
	mapForDS.put("permanentAddress", permanentAddress);

	mapForDS.put("allergies", allergies);
	mapForDS.put("visitId", visitId);
	mapForDS.put("patientInvestigationHeaderId", 0);
	mapForDS.put("dgOrderhdId", 0);
	mapForDS.put("patientInvestigationdetailsIdList",
			patientInvestigationdetailsIdList);
	mapForDS.put("dgOrderdtIdList", dgOrderdtIdList);

	// -----------------------

	try {
		if(denatlToMH.equalsIgnoreCase("yes")){
		Visit visit = new Visit();

		visit.setTokenNo(0);
		if (hinId != 0) {
			Patient patient = new Patient();
			patient.setId(hinId);
			visit.setHin(patient);
		}
		if (hospitalId != 0) {
			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			visit.setHospital(masHospital);
		}
		if (deptId != 0) {
			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(deptId);
			visit.setDepartment(masDepartment);
		}
		if (empId != 0) {
			MasEmployee masEmployee = new MasEmployee();
			masEmployee.setId(empId);
			visit.setDoctor(masEmployee);
		}
		String ageId = "";
		if (req.getParameter("ageId") != null) {
			ageId = req.getParameter("ageId");
		}
		visit.setAge(ageId);
		visit.setAddEditBy(user);
		visit.setAddEditDate(lastChangedDate);
		visit.setAddEditTime(lastChangedTime);
		visit.setVisitDate(lastChangedDate);
		visit.setVisitTime(lastChangedTime);
		visit.setVisitStatus("w");
		visit.setReportingFor("Dental");
		visit.setAppointmentType("D");
		visit.setPriority(3);
		visit.setStatus("y");
		visit.setDentalFlag("MedBoard16");
		mapForDS.put("visit", visit);
		}
	} catch (Exception e1) {
		e1.printStackTrace();
	}
	// ----------------------
	Map<String, Object> dataMap = new HashMap<String, Object>();
	String orderSeqNo = "";
	orderSeqNo = labHandlerService.generateOrderNumber(hospitalId);
	mapForDS.put("orderSeqNo", orderSeqNo);
	dataMap = medicalBoardHandlerService.addMedicalBoardMA16(
			masMedicalBoardProceedings, masMedicalBoardDetails, mapForDS);

	successfullyAdded = (Boolean) dataMap.get("successfullyAdded");
	if (successfullyAdded) {
		message = "Record Added Successfully!";
		jsp = MEDICAL_BOARD_EXAM_MSG;
		map.put("medExamId", (Integer) dataMap.get("medExamId"));
	}
	if (!successfullyAdded) {
		message = "Some Problem Occured !!!";
		jsp = MEDICAL_BOARD_ERROR_MSG;
	}
	// }
	try {
		// map =
		// medicalExaminationBoardHandlerService.showMedicalExaminationBoardJsp();
	} catch (Exception e) {
		e.printStackTrace();
	}
	String medicalEntryNo = "";
	String medicalEntryNo1 = "";
	String userName = "";
	String userName1 = "";
	// medicalEntryNo =
	// medicalExaminationBoardHandlerService.generateMedicalEntryNumber(userName);
	// medicalEntryNo1 =
	// medicalExaminationBoardHandlerService.generateMedicalEntryNumber1(userName1);
	jsp += ".jsp";

	map.put("medicalEntryNo", medicalEntryNo);
	map.put("investigationReferToMHList", investigationReferToMHList);
	map.put("medicalEntryNo1", medicalEntryNo1);
	map.put("contentJsp", jsp);
	map.put("message", message);
	map.put("hinNoForreport", hinNoForreport);
	map.put("visitNumberForReport", visitNumberForReport);
	map.put("serviceNo", serviceNo);
	map.put("visitId", visitId);
	map.put("denatlToMH", denatlToMH);
	map.put("medExamId", (Integer) dataMap.get("medExamId"));
	return new ModelAndView("indexB", "map", map);

}

public ModelAndView updateMedicalBoardMA16(HttpServletRequest req,
		HttpServletResponse res) {
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	String serviceNo = "";
	String serviceiaf = "";
	String place = "";
	if (req.getParameter(PLACE) != null
			&& !req.getParameter(PLACE).equals("")) {
		place = req.getParameter(PLACE);
	}
	String data = null;
	String age = "";
	String typeOfCommunication = "";
	Date dateofcommun = null;
	Date dateOfDischarge=null;
	String totalservice = "";
	String pastmedicalhistory = "";
	String presentmedicalhistory = "";
	String idealweight = "";
	String overweight = "";
	String waist = "";
	String denatlToMH = "no";
	String chestfullexpansion = "";
	String bhi = "";
	String rangeofexpansion = "";
	String bodyfat = "";
	String signfoldthickness = "";
	String sportman = "";
	String actualweight = "";
	String lastame = "";

	Date entryDate = null;
	Date medicinExamDate = null;
	String lastChangedBy = "";
	String lastChangedTime = "";
	Date lastChangedDate = null;
	Date surgeyDate = null;
	int typeOfEntry = 0;
	String betchNo = "";
	String chestNo = "";
	String rollNo = "";
	int medicalExamHeld = 0;
	String medicalStatus = "";
	String fullName = "";
	Date dateOfBirth = null;
	int maritialStatus = 0;
	String service = "";
	String pNo = "";
	// String rank = "";
	String hoursOfFlown = "";
	String permanentAddress = "";
	String identification1 = "";
	String identification2 = "";
	String armsCrops = "";
	Date dateOfReporting = null;
	Date dateOfCompletion = null;
	Date documentForwardDate = null;
	String documentForwardTo = "";
	String fromWhereHeReport = "";
	String hypertension = "";
	String heartDisease = "";
	String diabetes = "";
	String bleedingDisorder = "";
	String mentalDisease = "";
	String nightBlindness = "";

	String asthama = "";
	String dischargeFrom = "";
	String plesury = "";
	String earDieses = "";
	String rheumatism = "";
	String frequentCough = "";
	String chronicIndigestion = "";
	String nervousBrakdown = "";
	String kidenyBladder = "";
	String fitsFaintinngAttacks = "";
	String std = "";
	String serveHeadInjury = "";
	String joundice = "";
	String sickness = "";
	String breastDisease = "";
	String trachoma = "";
	String amenorrhoea = "";
	String nightbindness = "";
	String menirrhagia = "";
	String laserTeartement = "";
	String pregnancy = "";
	String abortion = "";
	String eyeDisease = "";
	String rejectedAsUnfit = "";
	String dischargeMedicallyUnfit = "";
	String adimmitedInHospitalFirIllness = "";
	String stateNature = "";
	String otherInform = "";
	BigDecimal height = new BigDecimal(0);
	BigDecimal weight = new BigDecimal(0);
	BigDecimal acceptableKg = new BigDecimal(0);
	BigDecimal leglength = new BigDecimal(0);
	String appereance = "";
	String albumin = "";
	String sugar = "";
	String spGraviry = "";
	String hbPercentage = "";
	String physique = "";
	String anyOtherInv = "";
	String skin = "";
	String abdomen = "";
	String heartSize = "";
	String sound = "";
	String rhythm = "";
	String arterialWalls = "";
	String pulseRates = "";
	String bp = "";
	String fullExpension = "";
	String rangeOfExpension = "";
	String selfBalR = "";
	String selfBalL = "";
	String speechMental = "";
	String endocrinCond = "";
	String otherAbnormalities = "";
	String medicinRemarks = "";
	String finger = "";
	String hand = "";
	String wrist = "";
	String elbows = "";
	String shoulderGridles = "";
	String cercival = "";
	String dorsalVertebrate = "";
	String hullux = "";
	String valgus = "";
	String riggus = "";
	String flatFeet = "";
	String joints = "";
	String pelvis = "";
	String gail = "";
	String lumberScaler = "";
	String roccyxVericose = "";
	String hydrocele = "";
	String varicocele = "";
	String underScende = "";
	String hemonhoids = "";
	String herinaMusic = "";
	String breasts = "";
	String surgeryRemarks = "";
	String respatorySystem = "";

	String withGlassesDistantR = "";
	String withglassesDistantL = "";
	String withGlassesNearR = "";
	String withGlassesNearL = "";
	String withGlassesNearCP = "";
	String withoutGlassesDistantR = "";
	String withoutGlassesDistantL = "";
	String withoutGlassesNearR = "";
	String withoutGlassesNearL = "";
	String withoutGlassesNearCP = "";
	BigDecimal convergenceCP = new BigDecimal(0);

	BigDecimal convergenceC = new BigDecimal(0);
	String accommodationR = "";
	String accommodationL = "";
	String eyeRemarks = "";
	Date eyeDate = null;
	BigDecimal hearingRFW = new BigDecimal(0);
	BigDecimal hearingLFW = new BigDecimal(0);
	BigDecimal hearingBothFW = new BigDecimal(0);
	BigDecimal hearingRCV = new BigDecimal(0);
	BigDecimal hearingLCV = new BigDecimal(0);
	BigDecimal hearingBothCV = new BigDecimal(0);

	String innerEarR = "";
	String innerEarL = "";
	String audiometryRecord = "";
	String nose = "";
	String throatEar = "";
	String earReamrks = "";
	Date earDate = null;
	String externalEarR = "";
	String externalEarL = "";
	String middleEarR = "";
	String middleEarL = "";
	String evidienceOfTrachoma = "";
	String binocular = "";
	String manifestHypermetropia = "";
	String coverTest = "";
	String diaphragmTest = "";
	String fundMedia = "";
	String fields = "";
	String nightVisualCapacity = "";

	String dentalRemarks = "";
	Date dentalDate = null;
	String menstrualHistory = "";
	int noOfPregnancy = 0;
	int noOfAbortion = 0;
	int noOfChildren = 0;
	Date lastCondinement = null;
	String vaginalDischarge = "";
	String prolapse = "";
	String usgAbortion = "";
	String gyanaecologyRemarks = "";
	Date gyanaecologyDate = null;
	String medicalBoardExamination = "";
	int medicalBoardExaminationPlace = 0;
	Date medicalBoardExaminationDate = new Date();
	String subsequentMedicalBoardExam = "";
	int subsequentMedicalBoardExamPlace = 0;
	Date subsequentMedicalBoardExamDate = null;
	String ApprovingAuthority = "";
	int ApprovingAuthorityPlace = 0;
	Date ApprovingAuthorityDate = null;
	Date lmp = null;
	String totalTeeth = "";
	String totalDefectiveTeeth = "";
	String missingTeeth = "";
	String DenstalPoint = "";
	String unserviceableTeeth = "";

	String dur8 = "";
	String dur7 = "";
	String dur6 = "";
	String dur5 = "";
	String dur4 = "";
	String dur3 = "";
	String dur2 = "";
	String dur1 = "";
	String dul8 = "";
	String dul7 = "";
	String dul6 = "";
	String dul5 = "";
	String dul4 = "";
	String dul3 = "";
	String dul2 = "";
	String dul1 = "";
	String dlr8 = "";
	String dlr7 = "";
	String dlr6 = "";
	String dlr5 = "";
	String dlr4 = "";
	String dlr3 = "";
	String dlr2 = "";
	String dlr1 = "";
	String dll8 = "";
	String dll7 = "";
	String dll6 = "";
	String dll5 = "";
	String dll4 = "";
	String dll3 = "";
	String dll2 = "";
	String dll1 = "";
	String mur8 = "";
	String mur7 = "";
	String mur6 = "";
	String mur5 = "";
	String mur4 = "";
	String mur3 = "";
	String mur2 = "";
	String mur1 = "";
	String mul8 = "";
	String mul7 = "";
	String mul6 = "";
	String mul5 = "";
	String mul4 = "";
	String mul3 = "";
	String mul2 = "";
	String mul1 = "";
	String mlr8 = "";
	String mlr7 = "";
	String mlr6 = "";
	String mlr5 = "";
	String mlr4 = "";
	String mlr3 = "";
	String mlr2 = "";
	String mlr1 = "";
	String mll8 = "";
	String mll7 = "";
	String mll6 = "";
	String mll5 = "";
	String mll4 = "";
	String mll3 = "";
	String mll2 = "";
	String mll1 = "";
	String uur8 = "";
	String uur7 = "";
	String uur6 = "";
	String uur5 = "";
	String uur4 = "";
	String uur3 = "";
	String uur2 = "";
	String uur1 = "";
	String uul8 = "";
	String uul7 = "";
	String uul6 = "";
	String uul5 = "";
	String uul4 = "";
	String uul3 = "";
	String uul2 = "";
	String uul1 = "";
	String ulr8 = "";
	String ulr7 = "";
	String ulr6 = "";
	String ulr5 = "";
	String ulr4 = "";
	String ulr3 = "";
	String ulr2 = "";
	String ulr1 = "";
	String ull8 = "";
	String ull7 = "";
	String ull6 = "";
	String ull5 = "";
	String ull4 = "";
	String ull3 = "";
	String ull2 = "";
	String ull1 = "";

	String sur8 = "";
	String sur7 = "";
	String sur6 = "";
	String sur5 = "";
	String sur4 = "";
	String sur3 = "";
	String sur2 = "";
	String sur1 = "";
	String sul8 = "";
	String sul7 = "";
	String sul6 = "";
	String sul5 = "";
	String sul4 = "";
	String sul3 = "";
	String sul2 = "";
	String sul1 = "";

	String slr8 = "";
	String slr7 = "";
	String slr6 = "";
	String slr5 = "";
	String slr4 = "";
	String slr3 = "";
	String slr2 = "";
	String slr1 = "";
	String sll8 = "";
	String sll7 = "";
	String sll6 = "";

	String sll5 = "";
	String sll4 = "";
	String sll3 = "";
	String sll2 = "";
	String sll1 = "";
	HttpSession session = req.getSession();
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);

	int userId = 0;
	Users user = (Users) session.getAttribute("users");
	userId = user.getId();

	int commandId = (Integer) session.getAttribute("commandId");

	Map<String, Object> map = new HashMap<String, Object>();
	// Box box = HMSUtil.getBox(req);
	int medExamId = 0;
	String message = "";
	String jsp = "";
	int visitId = 0;
	String investigationReferToMH = "";
	List<String> investigationReferToMHList = new ArrayList<String>();

	if ((req.getParameter("medExamId")) != null
			&& (Integer.parseInt(req.getParameter("medExamId")) != 0)) {
		medExamId = Integer.parseInt(req.getParameter("medExamId"));
		if (req.getParameter("investigationReferToMH") != null
				&& !req.getParameter("investigationReferToMH").equals("")) {
			investigationReferToMH = req
					.getParameter("investigationReferToMH");
		}

		MasMedicalExaminationReportOnEntry masMedicalBoardProceedings = new MasMedicalExaminationReportOnEntry();
		masMedicalBoardProceedings = medicalExamHandlerService
				.loadMedicalExamObj(medExamId);
		Map<String, Object> generalMap = new HashMap<String, Object>();
		List<MasMedicalBoardExaminationDetail> masMedicalBoardDetails = new ArrayList<MasMedicalBoardExaminationDetail>();

		if (req.getParameter(SERVICE_NO) != null
				&& !req.getParameter(SERVICE_NO).equals("")) {
			serviceNo = req.getParameter(SERVICE_NO);
		}
		if (req.getParameter(AGE) != null
				&& !req.getParameter(AGE).equals("")) {
			age = req.getParameter(AGE);
		}
		if (req.getParameter(TOTAL_SERVICE) != null
				&& !req.getParameter(TOTAL_SERVICE).equals("")) {
			totalservice = req.getParameter(TOTAL_SERVICE);
		}
		if (req.getParameter("serviceiaf") != null
				&& !req.getParameter("serviceiaf").equals("")) {
			serviceiaf = req.getParameter("serviceiaf");
		}

		if (req.getParameter("typeOfCommunication") != null
				&& !req.getParameter("typeOfCommunication").equals("")) {
			typeOfCommunication = req.getParameter("typeOfCommunication");
		}
		if (req.getParameter(DATE_COMMENCEMENT) != null
				&& !req.getParameter(DATE_COMMENCEMENT).equals("")) {
			dateofcommun = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(DATE_COMMENCEMENT));
		}
		if (req.getParameter("dateOfDischarge") != null
				&& !req.getParameter("dateOfDischarge").equals("")) {
			dateOfDischarge = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter("dateOfDischarge"));
		}
		if (req.getParameter(PAST_MEDICAL_HISTORY) != null
				&& !req.getParameter(PAST_MEDICAL_HISTORY).equals("")) {
			pastmedicalhistory = req.getParameter(PAST_MEDICAL_HISTORY);
		}
		if (req.getParameter(PRESENT_MEDICAL_CATEGORY) != null
				&& !req.getParameter(PRESENT_MEDICAL_CATEGORY).equals("")) {
			presentmedicalhistory = req
					.getParameter(PRESENT_MEDICAL_CATEGORY);
		}
		if (req.getParameter(LAST_AME) != null
				&& !req.getParameter(LAST_AME).equals("")) {
			lastame = req.getParameter(LAST_AME);
		}// if (req.getParameter(HEIGHT_WITHOUT_SHOOSE) != null ) {
		// weight = req.getParameter(HEIGHT_WITHOUT_SHOOSE);
		// }
		if (req.getParameter(ACTUAL_WEIGHT) != null
				&& !req.getParameter(ACTUAL_WEIGHT).equals("")) {
			actualweight = req.getParameter(ACTUAL_WEIGHT);
		}
		if (req.getParameter(IDEAL_WEIGHT) != null
				&& !req.getParameter(IDEAL_WEIGHT).equals("")) {
			idealweight = req.getParameter(IDEAL_WEIGHT);
		}
		if (req.getParameter(OVER_WEIGHT) != null
				&& !req.getParameter(OVER_WEIGHT).equals("")) {
			overweight = req.getParameter(OVER_WEIGHT);
		}
		if (req.getParameter(WAIST) != null
				&& !req.getParameter(WAIST).equals("")) {
			waist = req.getParameter(WAIST);
		}
		if (req.getParameter(CHEST_FULL) != null
				&& !req.getParameter(CHEST_FULL).equals("")) {
			chestfullexpansion = req.getParameter(CHEST_FULL);
		}
		if (req.getParameter(RANGE_EXPANSION) != null
				&& !req.getParameter(RANGE_EXPANSION).equals("")) {
			rangeofexpansion = req.getParameter(RANGE_EXPANSION);
		}
		if (req.getParameter(BHI) != null
				&& !req.getParameter(BHI).equals("")) {
			bhi = req.getParameter(BHI);
		}
		if (req.getParameter(BODY_FAT) != null
				&& !req.getParameter(BODY_FAT).equals("")) {
			bodyfat = req.getParameter(BODY_FAT);
		}
		if (req.getParameter(THICKNESS) != null
				&& !req.getParameter(THICKNESS).equals("")) {
			signfoldthickness = req.getParameter(THICKNESS);
		}
		if (req.getParameter(SPORTS) != null
				&& !req.getParameter(SPORTS).equals("")) {
			sportman = req.getParameter(SPORTS);
		}
		int deptId = 0;
		int empId = 0;
		int hinId = 0;

		if (req.getParameter("deptId") != null) {
			deptId = Integer.parseInt(req.getParameter("deptId"));
		}
		if (req.getParameter("empId") != null) {
			empId = Integer.parseInt(req.getParameter("empId"));
		}
		if (req.getParameter("hinId") != null) {
			hinId = Integer.parseInt(req.getParameter("hinId"));
		}
		if (req.getParameter("visitId") != null) {
			visitId = Integer.parseInt(req.getParameter("visitId"));
		}
		List<String> chargeCodeIdList = new ArrayList<String>();
		List<Integer> quantityList = new ArrayList<Integer>();
		List<Integer> patientInvestigationdetailsIdList = new ArrayList<Integer>();
		List<Integer> dgOrderdtIdList = new ArrayList<Integer>();
		List<String> investResultList = new ArrayList<String>();
		String clinicalNotes1 = "";
		if (req.getParameter("clinicalNotes1") != null
				&& !(req.getParameter("clinicalNotes1").equals(""))) {
			clinicalNotes1 = req.getParameter("clinicalNotes1");
		}

		int hiddenValue = 1;
		
		if (req.getParameter("data") != null
				&& !req.getParameter("data").equals("")) {
			data = (String) req.getParameter("data");
		}
		if (Integer.parseInt(req.getParameter("hiddenValue")) != 1) {
			hiddenValue = Integer.parseInt(req.getParameter("hiddenValue"));
		}
		String deleatedorderid = "";
		if (req.getParameter("deleatedorderid") != "") {
			deleatedorderid = req.getParameter("deleatedorderid");
		}
		mapForDS.put("deleatedorderid", deleatedorderid);
		String deleatedValue = "";
		if (req.getParameter("deleatedValue") != "") {
			deleatedValue = req.getParameter("deleatedValue");
		}
		mapForDS.put("deleatedValue", deleatedValue);
		// ----------------------------------------------------------------------------------------------------
		String dlc = "", hb = "", tlc = "", esr = "", spGravity = "", albumen = "", sugarR = "";
		String sugarF = "", sugarPP = "", urea = "", uricAcid = "", srCreatine = "", cholesterol = "";
		String triglycerids = "", hdl = "", vldl = "";
		int temp = 1;
		String[] chargeCodeIdArr = new String[hiddenValue];
		for (int i = 0; i < hiddenValue; i++) {
			if (req.getParameter("chargeCodeName" + temp) != null
					&& !req.getParameter("chargeCodeName" + temp)
							.equals("")) {
				String chargeCodeNameWithId = req
						.getParameter("chargeCodeName" + temp);
				int index1 = chargeCodeNameWithId.lastIndexOf("[");
				int index2 = chargeCodeNameWithId.lastIndexOf("]");
				index1++;
				String chargeCodeName = chargeCodeNameWithId.substring(0,
						(index1 - 1));

				String chargeCodeId = chargeCodeNameWithId.substring(
						index1, index2);
				if (!chargeCodeId.equals("")) {
					chargeCodeIdArr[i] = chargeCodeId;
					int qty = 1;
					/*
					 * if (req.getParameter("investigationReferToMH" + temp)
					 * != null && !req.getParameter("investigationReferToMH"
					 * + temp).equals("")) {
					 * investigationReferToMHList.add(req
					 * .getParameter("investigationReferToMH" + temp));
					 * map.put("investigationReferToMHList",
					 * investigationReferToMHList);
					 * 
					 * }else { investigationReferToMHList.add("n"); }
					 */
					if (req.getParameter("investigationReferToMH" + temp) != null) {
						investigationReferToMHList.add("y");
					} else {
						investigationReferToMHList.add("n");
					}

					if (data != null) {
						String resultVal = "";

						if (req.getParameter("Result" + temp) != null
								&& !req.getParameter("Result" + temp)
										.equals("")) {
							investResultList.add(req.getParameter("Result"
									+ temp));
							resultVal = req.getParameter("Result" + temp);
						} else {
							investResultList.add(" ");
							resultVal = " ";
						}

						if (chargeCodeName.equalsIgnoreCase("dlc")) {
							dlc = resultVal;
						} else if (chargeCodeName.equalsIgnoreCase("Hb")) {
							hb = resultVal;
						} else if (chargeCodeName.equalsIgnoreCase("tlc")) {
							tlc = resultVal;
						} else if (chargeCodeName.equalsIgnoreCase("esr")) {
							esr = resultVal;
						} else if (chargeCodeName
								.equalsIgnoreCase("Gravity")) {
							spGravity = resultVal;
						} else if (chargeCodeName
								.equalsIgnoreCase("ALBUMIN")) {
							albumen = resultVal;
						} else if (chargeCodeName
								.equalsIgnoreCase("SUGAR R")) {
							sugarR = resultVal;
						} else if (chargeCodeName
								.equalsIgnoreCase("SUGAR F")) {
							sugarF = resultVal;
						} else if (chargeCodeName
								.equalsIgnoreCase("SUGAR PP")) {
							sugarPP = resultVal;
						} else if (chargeCodeName.equalsIgnoreCase("Urea")) {
							urea = resultVal;
						} else if (chargeCodeName
								.equalsIgnoreCase("URIC ACID")) {
							uricAcid = resultVal;
						} else if (chargeCodeName
								.equalsIgnoreCase("CREATININE")) {
							srCreatine = resultVal;
						} else if (chargeCodeName
								.equalsIgnoreCase("CHOLESTEROL")) {
							cholesterol = resultVal;
						} else if (chargeCodeName
								.equalsIgnoreCase("TRIGLYCERIDE")) {
							triglycerids = resultVal;
						} else if (chargeCodeName.equalsIgnoreCase("HDL")) {
							hdl = resultVal;
						} else if (chargeCodeName.equalsIgnoreCase("VLDL")) {
							vldl = resultVal;
						}

					}
					chargeCodeIdList.add(chargeCodeIdArr[i]);
					quantityList.add(qty);
					// clinicalList.add(clinicalNotes);
				}

			}
			if (req.getParameter("patientInvestigationdetailsId" + temp) != null
					&& !req.getParameter(
							"patientInvestigationdetailsId" + temp).equals(
							"")) {
				patientInvestigationdetailsIdList.add(Integer.parseInt(req
						.getParameter("patientInvestigationdetailsId"
								+ temp)));
			}
			if (req.getParameter("dgOrderdtId" + temp) != null
					&& !req.getParameter("dgOrderdtId" + temp).equals("")) {
				dgOrderdtIdList.add(Integer.parseInt(req
						.getParameter("dgOrderdtId" + temp)));
			}
			temp++;
		}
		String alcohol = "";
		if (req.getParameter("alcohol") != null
				&& !req.getParameter("alcohol").equals("")) {
			alcohol = req.getParameter("alcohol");
		}
		mapForDS.put("alcohol", alcohol);
		// ----------------------------------------------------------------------------------
		String[] familyHistoryArray = null;
		if (req.getParameterValues(FM_DM) != null
				&& !(req.getParameterValues(FM_DM).equals(""))) {
			familyHistoryArray = (String[]) req.getParameterValues(FM_DM);
		}
		String otherFamilyHistory = "";
		if (req.getParameter("otherFamilyHistory") != null) {
			otherFamilyHistory = req.getParameter("otherFamilyHistory");
			mapForDS.put("otherFamilyHistory", otherFamilyHistory);
		}
		// -------------------------------------------------------------------------------------
		if (req.getParameter(ENTRY_OF_DATE) != null
				&& !(req.getParameter(ENTRY_OF_DATE).equals(""))) {
			entryDate = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(ENTRY_OF_DATE));
		}
		if (req.getParameter(TYPE_OF_ENTRY) != null
				&& !(req.getParameter(TYPE_OF_ENTRY).equals(""))) {
			typeOfEntry = Integer.parseInt(req.getParameter(TYPE_OF_ENTRY));
		}
		if (req.getParameter(BATCH1_NO) != null
				&& !(req.getParameter(BATCH1_NO).equals(""))) {
			betchNo = req.getParameter(BATCH1_NO);
		}
		if (req.getParameter(CHEST_NO) != null
				&& !(req.getParameter(CHEST_NO).equals(""))) {
			chestNo = req.getParameter(CHEST_NO);
		}

		if (req.getParameter(ROLL_NO) != null
				&& !(req.getParameter(ROLL_NO).equals(""))) {
			rollNo = req.getParameter(ROLL_NO);
		}

		if (req.getParameter(MEDICAL_EXAM_HELD_AT) != null) {
			medicalExamHeld = Integer.parseInt(req
					.getParameter(MEDICAL_EXAM_HELD_AT));
		}

		if (req.getParameter(MEDICAL_STATUS) != null
				&& !(req.getParameter(MEDICAL_STATUS).equals(""))) {
			medicalStatus = req.getParameter(MEDICAL_STATUS);
		}
		if (req.getParameter(FULL_NAME) != null
				&& !(req.getParameter(FULL_NAME).equals(""))) {
			fullName = req.getParameter(FULL_NAME);
		}

		if (req.getParameter(DATE_OF_BIRTH) != null
				&& !(req.getParameter(DATE_OF_BIRTH).equals(""))) {
			dateOfBirth = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(DATE_OF_BIRTH));
		}

		if (req.getParameter(MARITIAL_STATUS) != null
				&& !(req.getParameter(MARITIAL_STATUS).equals(""))) {
			maritialStatus = Integer.parseInt(req
					.getParameter(MARITIAL_STATUS));
		}

		if (req.getParameter(SERVICE) != null
				&& !(req.getParameter(SERVICE).equals(""))) {
			service = req.getParameter(SERVICE);
		}

		if (req.getParameter(P_NO) != null
				&& !(req.getParameter(P_NO).equals(""))) {
			pNo = req.getParameter(P_NO);
		}

		if (req.getParameter(HOURS_OF_FLOWN) != null
				&& !(req.getParameter(HOURS_OF_FLOWN).equals(""))) {
			hoursOfFlown = req.getParameter(HOURS_OF_FLOWN);
		}
		if (req.getParameter(PERMANENT_ADDRESS) != null
				&& !(req.getParameter(PERMANENT_ADDRESS).equals(""))) {
			permanentAddress = req.getParameter(PERMANENT_ADDRESS);
		}

		if (req.getParameter(IDENTIFICATION_MARKS1) != null
				&& !(req.getParameter(IDENTIFICATION_MARKS1).equals(""))) {
			identification1 = req.getParameter(IDENTIFICATION_MARKS1);
		}

		if (req.getParameter(IDENTIFICATION_MARKS2) != null
				&& !(req.getParameter(IDENTIFICATION_MARKS2).equals(""))) {
			identification2 = req.getParameter(IDENTIFICATION_MARKS2);
		}
		if (req.getParameter(ARMS_CROPS) != null
				&& !(req.getParameter(ARMS_CROPS).equals(""))) {
			armsCrops = req.getParameter(ARMS_CROPS);
		}

		if (req.getParameter(DATE_OF_COMPLETION) != null
				&& !(req.getParameter(DATE_OF_COMPLETION).equals(""))) {
			dateOfCompletion = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(DATE_OF_COMPLETION));
		}

		if (req.getParameter(DOCUMENT_FORWARD_DATE1) != null
				&& !(req.getParameter(DOCUMENT_FORWARD_DATE1).equals(""))) {
			documentForwardDate = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(DOCUMENT_FORWARD_DATE1));

		}

		if (req.getParameter(DOCUMENT_FORWARD_TO) != null
				&& !(req.getParameter(DOCUMENT_FORWARD_TO).equals(""))) {
			documentForwardTo = req.getParameter(DOCUMENT_FORWARD_TO);
		}
		/*
		 * if (req.getParameter(DATE_OF_REPORTING) != null &&
		 * !(req.getParameter(DATE_OF_REPORTING).equals(""))) {
		 * dateOfReporting = HMSUtil.dateFormatterDDMMYYYY(req
		 * .getParameter(DATE_OF_REPORTING));
		 * 
		 * }
		 */

		if (req.getParameter(FROM_WHERE_HE_REPORT) != null
				&& !(req.getParameter(FROM_WHERE_HE_REPORT).equals(""))) {
			fromWhereHeReport = req.getParameter(FROM_WHERE_HE_REPORT);
		}
		if (req.getParameter(HYPERTENSION) != null
				&& !(req.getParameter(HYPERTENSION).equals(""))) {
			hypertension = req.getParameter(HYPERTENSION);
		}
		if (req.getParameter(HEAR_DISEASE) != null
				&& !(req.getParameter(HEAR_DISEASE).equals(""))) {
			heartDisease = req.getParameter(HEAR_DISEASE);
		}
		if (req.getParameter(DIABETES) != null
				&& !(req.getParameter(DIABETES).equals(""))) {
			diabetes = req.getParameter(DIABETES);
		}
		if (req.getParameter(BLEEDING_DIORDER) != null
				&& !(req.getParameter(BLEEDING_DIORDER).equals(""))) {
			bleedingDisorder = req.getParameter(BLEEDING_DIORDER);
		}
		if (req.getParameter(MENTAL_DISEASE) != null
				&& !(req.getParameter(MENTAL_DISEASE).equals(""))) {
			mentalDisease = req.getParameter(MENTAL_DISEASE);
		}
		if (req.getParameter(NIGHT_BLINDNESS) != null
				&& !(req.getParameter(NIGHT_BLINDNESS).equals(""))) {
			nightBlindness = req.getParameter(NIGHT_BLINDNESS);
		}

		if (req.getParameter(ASTHAMA) != null
				&& !(req.getParameter(ASTHAMA).equals(""))) {
			asthama = req.getParameter(ASTHAMA);
		}

		if (req.getParameter(DISCHARGE_FROM) != null
				&& !(req.getParameter(DISCHARGE_FROM).equals(""))) {
			dischargeFrom = req.getParameter(DISCHARGE_FROM);

		}

		if (req.getParameter(PLEURISY) != null
				&& !(req.getParameter(PLEURISY).equals(""))) {
			plesury = req.getParameter(PLEURISY);
		}

		if (req.getParameter(EAR_DISEASE) != null
				&& !(req.getParameter(EAR_DISEASE).equals(""))) {
			earDieses = req.getParameter(EAR_DISEASE);
		}

		if (req.getParameter(RHEUMATISM) != null
				&& !(req.getParameter(RHEUMATISM).equals(""))) {
			rheumatism = req.getParameter(RHEUMATISM);
		}
		if (req.getParameter(FREQUENT_CAUGH) != null
				&& !(req.getParameter(FREQUENT_CAUGH).equals(""))) {
			frequentCough = req.getParameter(FREQUENT_CAUGH);
		}

		if (req.getParameter(CHRONIC_INDIGESTION) != null
				&& !(req.getParameter(CHRONIC_INDIGESTION).equals(""))) {
			chronicIndigestion = req.getParameter(CHRONIC_INDIGESTION);
		}
		if (req.getParameter(NERVOUS_BRAKDOWN) != null
				&& !(req.getParameter(NERVOUS_BRAKDOWN).equals(""))) {
			nervousBrakdown = req.getParameter(NERVOUS_BRAKDOWN);
		}

		if (req.getParameter(KIDENY_BLADDER) != null
				&& !(req.getParameter(KIDENY_BLADDER).equals(""))) {
			kidenyBladder = req.getParameter(KIDENY_BLADDER);
		}
		if (req.getParameter(FITS_FAINTING_ATTACKS) != null
				&& !(req.getParameter(FITS_FAINTING_ATTACKS).equals(""))) {
			fitsFaintinngAttacks = req.getParameter(FITS_FAINTING_ATTACKS);
		}
		if (req.getParameter(STD) != null
				&& !(req.getParameter(STD).equals(""))) {
			std = req.getParameter(STD);
		}

		if (req.getParameter(SEVERE_HEAD_INJURY) != null
				&& !(req.getParameter(SEVERE_HEAD_INJURY).equals(""))) {
			serveHeadInjury = req.getParameter(SEVERE_HEAD_INJURY);
		}

		if (req.getParameter(JOUNDICE) != null
				&& !(req.getParameter(JOUNDICE).equals(""))) {
			joundice = req.getParameter(JOUNDICE);
		}
		if (req.getParameter(SICKNESS) != null
				&& !(req.getParameter(SICKNESS).equals(""))) {
			sickness = req.getParameter(SICKNESS);
		}
		if (req.getParameter(BREAST_DISEASE) != null
				&& !(req.getParameter(BREAST_DISEASE).equals(""))) {
			breastDisease = req.getParameter(BREAST_DISEASE);
		}
		if (req.getParameter(TRACHOMA) != null
				&& !(req.getParameter(TRACHOMA).equals(""))) {
			trachoma = req.getParameter(TRACHOMA);
		}

		if (req.getParameter(AMENORRHOEA) != null
				&& !(req.getParameter(AMENORRHOEA).equals(""))) {
			amenorrhoea = req.getParameter(AMENORRHOEA);
		}
		if (req.getParameter(NIGHT_BINDNESS) != null
				&& !(req.getParameter(NIGHT_BINDNESS).equals(""))) {
			nightbindness = req.getParameter(NIGHT_BINDNESS);
		}
		if (req.getParameter(MENORRHAGIA) != null
				&& !(req.getParameter(MENORRHAGIA).equals(""))) {
			menirrhagia = req.getParameter(MENORRHAGIA);
		}
		if (req.getParameter(LASER_TREATEMENT) != null
				&& !(req.getParameter(LASER_TREATEMENT).equals(""))) {
			laserTeartement = req.getParameter(LASER_TREATEMENT);
		}
		if (req.getParameter(PREGNANCY) != null
				&& !(req.getParameter(PREGNANCY).equals(""))) {
			pregnancy = req.getParameter(PREGNANCY);
		}
		if (req.getParameter(EYE_DISEASE) != null
				&& !(req.getParameter(EYE_DISEASE).equals(""))) {
			eyeDisease = req.getParameter(EYE_DISEASE);
		}
		if (req.getParameter(REJECTED_AS_UNFIT) != null
				&& !(req.getParameter(REJECTED_AS_UNFIT).equals(""))) {
			rejectedAsUnfit = req.getParameter(REJECTED_AS_UNFIT);
		}
		if (req.getParameter(DISCHARGE_MEDICALLY_UNFIT) != null
				&& !(req.getParameter(DISCHARGE_MEDICALLY_UNFIT).equals(""))) {
			dischargeMedicallyUnfit = req
					.getParameter(DISCHARGE_MEDICALLY_UNFIT);
		}
		if (req.getParameter(ADIMMITED_IN_HOSPITAL_FOR_ILLNESS) != null
				&& !(req.getParameter(ADIMMITED_IN_HOSPITAL_FOR_ILLNESS)
						.equals(""))) {
			adimmitedInHospitalFirIllness = req
					.getParameter(ADIMMITED_IN_HOSPITAL_FOR_ILLNESS);
		}
		if (req.getParameter(ABORTION) != null
				&& !(req.getParameter(ABORTION).equals(""))) {
			abortion = req.getParameter(ABORTION);
		}

		if (req.getParameter(STATE_NATURE_OF_THE_DISEASE) != null
				&& !(req.getParameter(STATE_NATURE_OF_THE_DISEASE)
						.equals(""))) {
			stateNature = req.getParameter(STATE_NATURE_OF_THE_DISEASE);
		}
		if (req.getParameter(OTHER_INFORMATION) != null
				&& !(req.getParameter(OTHER_INFORMATION).equals(""))) {
			otherInform = req.getParameter(OTHER_INFORMATION);
		}
		if (req.getParameter(HEIGHT_WITHOUT_SHOOSE) != null
				&& !(req.getParameter(HEIGHT_WITHOUT_SHOOSE).equals(""))) {
			height = (new BigDecimal(req
					.getParameter(HEIGHT_WITHOUT_SHOOSE)));
		}
		if (req.getParameter(ACTUAL_WEIGHT) != null
				&& !(req.getParameter(ACTUAL_WEIGHT).equals(""))) {
			weight = (new BigDecimal(req.getParameter(ACTUAL_WEIGHT)));
		}
		if (req.getParameter(ACCEPTABLE_KG) != null
				&& !(req.getParameter(ACCEPTABLE_KG).equals(""))) {
			acceptableKg = (new BigDecimal(req.getParameter(ACCEPTABLE_KG)));
		}
		if (req.getParameter(LEG_LENGTH) != null
				&& !(req.getParameter(LEG_LENGTH).equals(""))) {
			leglength = (new BigDecimal(req.getParameter(LEG_LENGTH)));
		}
		if (req.getParameter(APPEREANCE) != null
				&& !(req.getParameter(APPEREANCE).equals(""))) {
			appereance = req.getParameter(APPEREANCE);
		}
		if (req.getParameter(ALBUMIN) != null
				&& !(req.getParameter(ALBUMIN).equals(""))) {
			albumin = req.getParameter(ALBUMIN);
		}
		if (req.getParameter(SUGAR) != null
				&& !(req.getParameter(SUGAR).equals(""))) {
			sugar = req.getParameter(SUGAR);
		}
		if (req.getParameter(SP_GRAVITY) != null
				&& !(req.getParameter(SP_GRAVITY).equals(""))) {
			spGraviry = req.getParameter(SP_GRAVITY);
		}
		if (req.getParameter(HB_PERCENTAGE) != null
				&& !(req.getParameter(HB_PERCENTAGE).equals(""))) {
			hbPercentage = req.getParameter(HB_PERCENTAGE);
		}
		if (req.getParameter(PHYSIQUE) != null
				&& !(req.getParameter(PHYSIQUE).equals(""))) {
			physique = req.getParameter(PHYSIQUE);
		}

		if (req.getParameter(ANYOTHER_INV_CARRIED_OUT) != null
				&& !(req.getParameter(ANYOTHER_INV_CARRIED_OUT).equals(""))) {
			anyOtherInv = req.getParameter(ANYOTHER_INV_CARRIED_OUT);
		}
		if (req.getParameter(SKIN) != null
				&& !(req.getParameter(SKIN).equals(""))) {
			skin = req.getParameter(SKIN);
		}
		if (req.getParameter(ABDOMEN) != null
				&& !(req.getParameter(ABDOMEN).equals(""))) {
			abdomen = req.getParameter(ABDOMEN);
		}
		if (req.getParameter(HEART_SIZE) != null
				&& !(req.getParameter(HEART_SIZE).equals(""))) {
			heartSize = req.getParameter(HEART_SIZE);
		}
		if (req.getParameter(SOUND) != null
				&& !(req.getParameter(SOUND).equals(""))) {
			sound = req.getParameter(SOUND);
		}
		if (req.getParameter(RHYTHM) != null
				&& !(req.getParameter(RHYTHM).equals(""))) {
			rhythm = req.getParameter(RHYTHM);
		}
		if (req.getParameter(ARTERIAL_WALLS) != null
				&& !(req.getParameter(ARTERIAL_WALLS).equals(""))) {
			arterialWalls = req.getParameter(ARTERIAL_WALLS);
		}
		if (req.getParameter(PULSE_RATES) != null
				&& !(req.getParameter(PULSE_RATES).equals(""))) {
			pulseRates = req.getParameter(PULSE_RATES);
		}
		if (req.getParameter(BP1) != null
				&& !(req.getParameter(BP1).equals(""))) {
			bp = req.getParameter(BP1);
		}
		if (req.getParameter(FULL_EXPENSION) != null
				&& !(req.getParameter(FULL_EXPENSION).equals(""))) {
			fullExpension = req.getParameter(FULL_EXPENSION);
		}
		if (req.getParameter(RANGE_OF_EXPENSION) != null
				&& !(req.getParameter(RANGE_OF_EXPENSION).equals(""))) {
			rangeOfExpension = req.getParameter(RANGE_OF_EXPENSION);
		}

		if (req.getParameter(SELF_BALANCINF_R) != null
				&& !(req.getParameter(SELF_BALANCINF_R).equals(""))) {
			selfBalR = req.getParameter(SELF_BALANCINF_R);
		}
		if (req.getParameter(SELF_BALANCING_L) != null
				&& !(req.getParameter(SELF_BALANCING_L).equals(""))) {
			selfBalL = req.getParameter(SELF_BALANCING_L);
		}
		if (req.getParameter(SPEECH_MENTAL_CAPACITY) != null
				&& !(req.getParameter(SPEECH_MENTAL_CAPACITY).equals(""))) {
			speechMental = req.getParameter(SPEECH_MENTAL_CAPACITY);
		}
		if (req.getParameter(ENDOCRINE_CONDITION) != null
				&& !(req.getParameter(ENDOCRINE_CONDITION).equals(""))) {
			endocrinCond = req.getParameter(ENDOCRINE_CONDITION);
		}
		if (req.getParameter(OTHER_ABNORMALITIES) != null
				&& !(req.getParameter(OTHER_ABNORMALITIES).equals(""))) {
			otherAbnormalities = req.getParameter(OTHER_ABNORMALITIES);
		}
		if (req.getParameter(MEDICIN_REMARKS) != null
				&& !(req.getParameter(MEDICIN_REMARKS).equals(""))) {
			medicinRemarks = req.getParameter(MEDICIN_REMARKS);
		}
		if (req.getParameter(FINGER) != null
				&& !(req.getParameter(FINGER).equals(""))) {
			finger = req.getParameter(FINGER);
		}
		if (req.getParameter(HAND) != null
				&& !(req.getParameter(HAND).equals(""))) {
			hand = req.getParameter(HAND);
		}
		if (req.getParameter(WRIST) != null
				&& !(req.getParameter(WRIST).equals(""))) {
			wrist = req.getParameter(WRIST);
		}
		if (req.getParameter(ELBOWS) != null
				&& !(req.getParameter(ELBOWS).equals(""))) {
			elbows = req.getParameter(ELBOWS);
		}
		if (req.getParameter(SHOULDER_GIRDLES) != null
				&& !(req.getParameter(SHOULDER_GIRDLES).equals(""))) {
			shoulderGridles = req.getParameter(SHOULDER_GIRDLES);
		}
		if (req.getParameter(CERCIVAL) != null
				&& !(req.getParameter(CERCIVAL).equals(""))) {
			cercival = req.getParameter(CERCIVAL);
		}
		if (req.getParameter(DORSAL_VERTEBRATE) != null
				&& !(req.getParameter(DORSAL_VERTEBRATE).equals(""))) {
			dorsalVertebrate = req.getParameter(DORSAL_VERTEBRATE);
		}
		if (req.getParameter(HULLUX) != null
				&& !(req.getParameter(HULLUX).equals(""))) {
			hullux = req.getParameter(HULLUX);
		}
		if (req.getParameter(VALGUS) != null
				&& !(req.getParameter(VALGUS).equals(""))) {
			valgus = req.getParameter(VALGUS);
		}
		if (req.getParameter(RIGGUS) != null
				&& !(req.getParameter(RIGGUS).equals(""))) {
			riggus = req.getParameter(RIGGUS);
		}
		if (req.getParameter(FLAT_FEET) != null
				&& !(req.getParameter(FLAT_FEET).equals(""))) {
			flatFeet = req.getParameter(FLAT_FEET);
		}
		if (req.getParameter(JOINTS) != null
				&& !(req.getParameter(JOINTS).equals(""))) {
			joints = req.getParameter(JOINTS);
		}
		if (req.getParameter(PELVIS) != null
				&& !(req.getParameter(PELVIS).equals(""))) {
			pelvis = req.getParameter(PELVIS);
		}
		if (req.getParameter(GAIL) != null
				&& !(req.getParameter(GAIL).equals(""))) {
			gail = req.getParameter(GAIL);
		}
		if (req.getParameter(LUMBER_SCALER_VERTABRAC) != null
				&& !(req.getParameter(LUMBER_SCALER_VERTABRAC).equals(""))) {
			lumberScaler = req.getParameter(LUMBER_SCALER_VERTABRAC);
		}
		if (req.getParameter(ROCCYX_VARICOSE_VENIS) != null
				&& !(req.getParameter(ROCCYX_VARICOSE_VENIS).equals(""))) {
			roccyxVericose = req.getParameter(ROCCYX_VARICOSE_VENIS);
		}
		if (req.getParameter(HYDROCELE) != null
				&& !(req.getParameter(HYDROCELE).equals(""))) {
			hydrocele = req.getParameter(HYDROCELE);
		}
		if (req.getParameter(VARICOCELE) != null
				&& !(req.getParameter(VARICOCELE).equals(""))) {
			varicocele = req.getParameter(VARICOCELE);
		}
		if (req.getParameter(UNDER_SCENDED_TESTES) != null
				&& !(req.getParameter(UNDER_SCENDED_TESTES).equals(""))) {
			underScende = req.getParameter(UNDER_SCENDED_TESTES);
		}
		if (req.getParameter(HEMONHOIDS) != null
				&& !(req.getParameter(HEMONHOIDS).equals(""))) {
			hemonhoids = req.getParameter(HEMONHOIDS);
		}
		if (req.getParameter(HERNIA_MUSCLE) != null
				&& !(req.getParameter(HERNIA_MUSCLE).equals(""))) {
			herinaMusic = req.getParameter(HERNIA_MUSCLE);
		}
		if (req.getParameter(BREASTS) != null
				&& !(req.getParameter(BREASTS).equals(""))) {
			breasts = req.getParameter(BREASTS);
		}
		if (req.getParameter(SURGERY_REMARKS) != null
				&& !(req.getParameter(SURGERY_REMARKS).equals(""))) {
			surgeryRemarks = req.getParameter(SURGERY_REMARKS);
		}
		if (req.getParameter(RESPIRATORY_SYSTEM) != null
				&& !(req.getParameter(RESPIRATORY_SYSTEM).equals(""))) {
			respatorySystem = req.getParameter(RESPIRATORY_SYSTEM);
		}

		if (req.getParameter(WITH_GLASSES_DISTANT_R) != null
				&& !(req.getParameter(WITH_GLASSES_DISTANT_R).equals(""))) {
			withGlassesDistantR = req.getParameter(WITH_GLASSES_DISTANT_R);
		}
		if (req.getParameter(WITH_GLASSES_DISTANT_L) != null
				&& !(req.getParameter(WITH_GLASSES_DISTANT_L).equals(""))) {
			withglassesDistantL = req.getParameter(WITH_GLASSES_DISTANT_L);
		}
		if (req.getParameter(WITH_GLASSES_NEAR_R) != null
				&& !(req.getParameter(WITH_GLASSES_NEAR_R).equals(""))) {
			withGlassesNearR = req.getParameter(WITH_GLASSES_NEAR_R);
		}
		if (req.getParameter(WITH_GLASSES_NEAR_L) != null
				&& !(req.getParameter(WITH_GLASSES_NEAR_L).equals(""))) {
			withGlassesNearL = req.getParameter(WITH_GLASSES_NEAR_L);
		}
		if (req.getParameter(WITH_GLASSES_NEAR_CP) != null
				&& !(req.getParameter(WITH_GLASSES_NEAR_CP).equals(""))) {
			withGlassesNearCP = req.getParameter(WITH_GLASSES_NEAR_CP);

		}
		if (req.getParameter(WITHOUT_GLASSES_DISTANT_R) != null
				&& !(req.getParameter(WITHOUT_GLASSES_DISTANT_R).equals(""))) {
			withoutGlassesDistantR = req
					.getParameter(WITHOUT_GLASSES_DISTANT_R);
		}
		if (req.getParameter(WITHOUT_GLASSES_DISTANT_L) != null
				&& !(req.getParameter(WITHOUT_GLASSES_DISTANT_L).equals(""))) {
			withoutGlassesDistantL = req
					.getParameter(WITHOUT_GLASSES_DISTANT_L);
		}
		if (req.getParameter(WITHOUT_GLASSES_NEAR_R) != null
				&& !(req.getParameter(WITHOUT_GLASSES_NEAR_R).equals(""))) {
			withoutGlassesNearR = req.getParameter(WITHOUT_GLASSES_NEAR_R);
		}
		if (req.getParameter(WITHOUT_GLASSES_NEAR_L) != null
				&& !(req.getParameter(WITHOUT_GLASSES_NEAR_L).equals(""))) {
			withoutGlassesNearL = req.getParameter(WITHOUT_GLASSES_NEAR_L);
		}
		if (req.getParameter(WITHOUT_GLASSES_NEAR_CP) != null
				&& !(req.getParameter(WITHOUT_GLASSES_NEAR_CP).equals(""))) {
			withoutGlassesNearCP = req
					.getParameter(WITHOUT_GLASSES_NEAR_CP);
		}
		if (req.getParameter(CONVERGENCE_SC) != null
				&& !(req.getParameter(CONVERGENCE_SC).equals(""))) {
			convergenceCP = new BigDecimal(req.getParameter(CONVERGENCE_SC));
		}
		if (req.getParameter(CONVERGENCE_C) != null
				&& !(req.getParameter(CONVERGENCE_C).equals(""))) {
			convergenceC = new BigDecimal(req.getParameter(CONVERGENCE_C));

		}
		if (req.getParameter(ACCOMMODATION_R) != null
				&& !(req.getParameter(ACCOMMODATION_R).equals(""))) {
			accommodationR = req.getParameter(ACCOMMODATION_R);
		}
		if (req.getParameter(ACCOMMODATION_L) != null
				&& !(req.getParameter(ACCOMMODATION_L).equals(""))) {
			accommodationL = req.getParameter(ACCOMMODATION_L);
		}

		if (req.getParameter(EYE_REMARKS) != null
				&& !(req.getParameter(EYE_REMARKS).equals(""))) {
			eyeRemarks = req.getParameter(EYE_REMARKS);
		}
		if (req.getParameter(EYE_DATE) != null
				&& !(req.getParameter(EYE_DATE).equals(""))) {
			eyeDate = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(EYE_DATE));
		}
		if (req.getParameter(HEARING_R_F_W) != null
				&& !(req.getParameter(HEARING_R_F_W).equals(""))) {
			hearingRFW = new BigDecimal(req.getParameter(HEARING_R_F_W));
		}
		if (req.getParameter(HEARING_L_F_W) != null
				&& !(req.getParameter(HEARING_L_F_W).equals(""))) {
			hearingLFW = new BigDecimal(req.getParameter(HEARING_L_F_W));
		}
		if (req.getParameter(HEARING_BOTH_FW) != null
				&& !(req.getParameter(HEARING_BOTH_FW).equals(""))) {
			hearingBothFW = new BigDecimal(req
					.getParameter(HEARING_BOTH_FW));
		}

		if (req.getParameter(HEARING_R_C_V) != null
				&& !(req.getParameter(HEARING_R_C_V).equals(""))) {
			hearingRCV = new BigDecimal(req.getParameter(HEARING_R_C_V));
		}
		if (req.getParameter(HEARING_L_C_V) != null
				&& !(req.getParameter(HEARING_L_C_V).equals(""))) {
			hearingLCV = new BigDecimal(req.getParameter(HEARING_L_C_V));
		}
		if (req.getParameter(HEARING_BOTH_CV) != null
				&& !(req.getParameter(HEARING_BOTH_CV).equals(""))) {
			hearingBothCV = new BigDecimal(req
					.getParameter(HEARING_BOTH_CV));
		}
		if (req.getParameter(INNER_EAR_R) != null
				&& !(req.getParameter(INNER_EAR_R).equals(""))) {
			innerEarR = req.getParameter(INNER_EAR_R);
		}
		if (req.getParameter(INNER_EAR_L) != null
				&& !(req.getParameter(INNER_EAR_L).equals(""))) {
			innerEarL = req.getParameter(INNER_EAR_L);
		}

		if (req.getParameter(AUDIOMETRY_RECORD) != null
				&& !(req.getParameter(AUDIOMETRY_RECORD).equals(""))) {
			audiometryRecord = req.getParameter(AUDIOMETRY_RECORD);
		}
		if (req.getParameter(NOSE) != null
				&& !(req.getParameter(NOSE).equals(""))) {
			nose = req.getParameter(NOSE);
		}
		if (req.getParameter(THROAT_EAR) != null
				&& !(req.getParameter(THROAT_EAR).equals(""))) {
			throatEar = req.getParameter(THROAT_EAR);
		}
		if (req.getParameter(EAR_REMARKS) != null
				&& !(req.getParameter(EAR_REMARKS).equals(""))) {
			earReamrks = req.getParameter(EAR_REMARKS);
		}
		if (req.getParameter(EAR_DATE) != null
				&& !(req.getParameter(EAR_DATE).equals(""))) {
			earDate = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(EAR_DATE));
		}

		if (req.getParameter(EXTERNAL_EAR_R) != null
				&& !(req.getParameter(EXTERNAL_EAR_R).equals(""))) {
			externalEarR = req.getParameter(EXTERNAL_EAR_R);
		}
		if (req.getParameter(EXTERNAL_EAR_L) != null
				&& !(req.getParameter(EXTERNAL_EAR_L).equals(""))) {
			externalEarL = req.getParameter(EXTERNAL_EAR_L);
		}
		if (req.getParameter(MIDDLE_EAR_R) != null
				&& !(req.getParameter(MIDDLE_EAR_R).equals(""))) {
			middleEarR = req.getParameter(MIDDLE_EAR_R);
		}
		if (req.getParameter(MIDDLE_EAR_L) != null
				&& !(req.getParameter(MIDDLE_EAR_L).equals(""))) {
			middleEarL = req.getParameter(MIDDLE_EAR_L);
		}
		if (req.getParameter(ANY_EVIDENCE_OF_TRACHOMA) != null
				&& !(req.getParameter(ANY_EVIDENCE_OF_TRACHOMA).equals(""))) {
			evidienceOfTrachoma = req
					.getParameter(ANY_EVIDENCE_OF_TRACHOMA);
		}
		if (req.getParameter(BINOCULAR_VISION_GRADE) != null
				&& !(req.getParameter(BINOCULAR_VISION_GRADE).equals(""))) {
			binocular = req.getParameter(BINOCULAR_VISION_GRADE);
		}
		if (req.getParameter(MANIFEST_HYPERMETROPIA) != null
				&& !(req.getParameter(MANIFEST_HYPERMETROPIA).equals(""))) {
			manifestHypermetropia = req
					.getParameter(MANIFEST_HYPERMETROPIA);
		}
		if (req.getParameter(COVER_TEST) != null
				&& !(req.getParameter(COVER_TEST).equals(""))) {
			coverTest = req.getParameter(COVER_TEST);
		}
		if (req.getParameter(DIAPHRAGM_TEST) != null
				&& !(req.getParameter(DIAPHRAGM_TEST).equals(""))) {
			diaphragmTest = req.getParameter(DIAPHRAGM_TEST);
		}
		if (req.getParameter(FUND_MEDIA) != null
				&& !(req.getParameter(FUND_MEDIA).equals(""))) {
			fundMedia = req.getParameter(FUND_MEDIA);
		}
		if (req.getParameter(FIELDS) != null
				&& !(req.getParameter(FIELDS).equals(""))) {
			fields = req.getParameter(FIELDS);
		}
		if (req.getParameter(NIGHT_VISUAL_CAPACITY) != null
				&& !(req.getParameter(NIGHT_VISUAL_CAPACITY).equals(""))) {
			nightVisualCapacity = req.getParameter(NIGHT_VISUAL_CAPACITY);
		}
		if (req.getParameter(DENTAL_REMARKS) != null
				&& !(req.getParameter(DENTAL_REMARKS).equals(""))) {
			dentalRemarks = req.getParameter(DENTAL_REMARKS);
		}

		if (req.getParameter(DENTAL_DATE) != null
				&& !(req.getParameter(DENTAL_DATE).equals(""))) {
			dentalDate = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(DENTAL_DATE));
		}
		if (req.getParameter(MENSTRUAL_HISTORY) != null
				&& !(req.getParameter(MENSTRUAL_HISTORY).equals(""))) {
			menstrualHistory = req.getParameter(MENSTRUAL_HISTORY);
		}
		if (req.getParameter(NO_OF_PREGNANCY) != null
				&& !(req.getParameter(NO_OF_PREGNANCY).equals(""))) {
			noOfPregnancy = Integer.parseInt(req
					.getParameter(NO_OF_PREGNANCY));
		}
		if (req.getParameter(NO_OF_ABORTION) != null
				&& !(req.getParameter(NO_OF_ABORTION).equals(""))) {
			noOfAbortion = Integer.parseInt(req
					.getParameter(NO_OF_ABORTION));
		}
		if (req.getParameter(NO_OF_CHILDREN) != null
				&& !(req.getParameter(NO_OF_CHILDREN).equals(""))) {
			noOfChildren = Integer.parseInt(req
					.getParameter(NO_OF_CHILDREN));
		}
		if (req.getParameter(DATE_OF_LASTCONFINEMENT) != null
				&& !(req.getParameter(DATE_OF_LASTCONFINEMENT).equals(""))) {
			lastCondinement = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(DATE_OF_LASTCONFINEMENT));
		}
		if (req.getParameter(VAGINAL_DISCHARGE) != null
				&& !(req.getParameter(VAGINAL_DISCHARGE).equals(""))) {
			vaginalDischarge = req.getParameter(VAGINAL_DISCHARGE);
		}
		if (req.getParameter(PROLAPSE) != null
				&& !(req.getParameter(PROLAPSE).equals(""))) {
			prolapse = req.getParameter(PROLAPSE);
		}
		if (req.getParameter(USG_ABORTION) != null
				&& !(req.getParameter(USG_ABORTION).equals(""))) {
			usgAbortion = req.getParameter(USG_ABORTION);
		}
		if (req.getParameter(GYANAECOLOGY_RAMARKS) != null
				&& !(req.getParameter(GYANAECOLOGY_RAMARKS).equals(""))) {
			gyanaecologyRemarks = req.getParameter(GYANAECOLOGY_RAMARKS);
		}
		if (req.getParameter(GYANAECOLOGY_DATE) != null
				&& !(req.getParameter(GYANAECOLOGY_DATE).equals(""))) {
			gyanaecologyDate = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(GYANAECOLOGY_DATE));
		}
		if (req.getParameter(GYANAECOLOGY_RAMARKS) != null
				&& !(req.getParameter(GYANAECOLOGY_RAMARKS).equals(""))) {
			gyanaecologyRemarks = req.getParameter(GYANAECOLOGY_RAMARKS);
		}
		if (req.getParameter(MEDICAL_BOARD_EXAMINATION) != null
				&& !(req.getParameter(MEDICAL_BOARD_EXAMINATION).equals(""))) {
			medicalBoardExamination = req
					.getParameter(MEDICAL_BOARD_EXAMINATION);
		}
		if (req.getParameter(MEDICAL_BOARD_EXAMINATION_PLACE) != null
				&& !(req.getParameter(MEDICAL_BOARD_EXAMINATION_PLACE)
						.equals(""))) {

			medicalBoardExaminationPlace = Integer.parseInt(req
					.getParameter(MEDICAL_BOARD_EXAMINATION_PLACE));

		}
		if (req.getParameter(MEDICAL_BOARD_EXAMINATION_DATE) != null
				&& !(req.getParameter(MEDICAL_BOARD_EXAMINATION_DATE)
						.equals(""))) {
			medicalBoardExaminationDate = HMSUtil
					.dateFormatterDDMMYYYY((req
							.getParameter(MEDICAL_BOARD_EXAMINATION_DATE)));
		}
		if (req.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION) != null
				&& !(req.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION)
						.equals(""))) {
			subsequentMedicalBoardExam = req
					.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION);
		}
		if (req.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION_PLACE) != null
				&& !(req
						.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION_PLACE)
						.equals(""))) {
			subsequentMedicalBoardExamPlace = Integer
					.parseInt(req
							.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION_PLACE));
		}
		if (req.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION_DATE) != null
				&& !(req
						.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION_DATE)
						.equals(""))) {
			subsequentMedicalBoardExamDate = HMSUtil
					.dateFormatterDDMMYYYY((req
							.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION_DATE)));
		}

		if (req.getParameter(APPROVING_AUTHORITY) != null
				&& !(req.getParameter(APPROVING_AUTHORITY).equals(""))) {
			ApprovingAuthority = req.getParameter(APPROVING_AUTHORITY);
		}
		if (req.getParameter(APPROVING_AUTHORITY_PLACE) != null
				&& !(req.getParameter(APPROVING_AUTHORITY_PLACE).equals(""))) {
			ApprovingAuthorityPlace = Integer.parseInt(req
					.getParameter(APPROVING_AUTHORITY_PLACE));
		}
		if (req.getParameter(APPROVING_AUTHORITY_DATE) != null
				&& !(req.getParameter(APPROVING_AUTHORITY_DATE).equals(""))) {
			ApprovingAuthorityDate = HMSUtil.dateFormatterDDMMYYYY((req
					.getParameter(APPROVING_AUTHORITY_DATE)));
		}
		if (req.getParameter(LMP) != null
				&& !(req.getParameter(LMP).equals(""))) {
			lmp = HMSUtil.dateFormatterDDMMYYYY((req.getParameter(LMP)));
		}

		if (req.getParameter(SURGERY_DATE) != null
				&& !(req.getParameter(SURGERY_DATE).equals(""))) {
			surgeyDate = HMSUtil.dateFormatterDDMMYYYY((req
					.getParameter(SURGERY_DATE)));
		}

		if (req.getParameter(MEDICIN_EXAM_DATE) != null
				&& !(req.getParameter(MEDICIN_EXAM_DATE).equals(""))) {
			medicinExamDate = HMSUtil.dateFormatterDDMMYYYY((req
					.getParameter(MEDICIN_EXAM_DATE)));

		}
		if (req.getParameter(TOTAL_NO_OF_TEETH) != null
				&& !(req.getParameter(TOTAL_NO_OF_TEETH).equals(""))) {
			totalTeeth = req.getParameter(TOTAL_NO_OF_TEETH);

		}
		if (req.getParameter(DEFECTIVE_TEETH) != null
				&& !(req.getParameter(DEFECTIVE_TEETH).equals(""))) {
			totalDefectiveTeeth = req.getParameter(DEFECTIVE_TEETH);

		}
		if (req.getParameter(MISSING_TEETH) != null
				&& !(req.getParameter(MISSING_TEETH).equals(""))) {
			missingTeeth = req.getParameter(MISSING_TEETH);

		}
		if (req.getParameter(MISSING_UNSERVICABLE_TEETH) != null
				&& !(req.getParameter(MISSING_UNSERVICABLE_TEETH)
						.equals(""))) {
			unserviceableTeeth = req
					.getParameter(MISSING_UNSERVICABLE_TEETH);

		}
		if (req.getParameter(DENTSL_POINT) != null
				&& !(req.getParameter(DENTSL_POINT).equals(""))) {
			DenstalPoint = req.getParameter(DENTSL_POINT);

		}

		if (req.getParameter(LAST_CHANGED_BY) != null) {
			lastChangedBy = req.getParameter(LAST_CHANGED_BY);
		}
		if (req.getParameter(LAST_CHANGED_DATE) != null) {
			lastChangedDate = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(LAST_CHANGED_DATE));
		}
		if (req.getParameter(LAST_CHANGED_TIME) != null) {
			lastChangedTime = req.getParameter(LAST_CHANGED_TIME);
		}
		// //////////////////////////////////

		if (req.getParameter(DUR_8) != null
				&& !req.getParameter(DUR_8).equals("")) {
			dur8 = (req.getParameter(DUR_8));

		} else {
			dur8 = "N";

		}

		if (req.getParameter(DUR_7) != null
				&& !req.getParameter(DUR_7).equals("")) {
			dur7 = (req.getParameter(DUR_7));

		} else {
			dur7 = "N";

		}
		if (req.getParameter(DUR_6) != null
				&& !req.getParameter(DUR_6).equals("")) {
			dur6 = (req.getParameter(DUR_6));

		} else {
			dur6 = "N";

		}
		if (req.getParameter(DUR_5) != null
				&& !req.getParameter(DUR_5).equals("")) {
			dur5 = (req.getParameter(DUR_5));

		} else {
			dur5 = "N";

		}

		if (req.getParameter(DUR_4) != null
				&& !req.getParameter(DUR_4).equals("")) {
			dur4 = (req.getParameter(DUR_4));
		} else {
			dur4 = "N";

		}
		if (req.getParameter(DUR_3) != null
				&& !req.getParameter(DUR_3).equals("")) {
			dur3 = (req.getParameter(DUR_3));

		} else {
			dur3 = "N";

		}
		if (req.getParameter(DUR_2) != null
				&& !req.getParameter(DUR_2).equals("")) {
			dur2 = (req.getParameter(DUR_2));

		} else {
			dur2 = "N";

		}
		if (req.getParameter(DUR_1) != null
				&& !req.getParameter(DUR_1).equals("")) {
			dur1 = (req.getParameter(DUR_1));

		} else {
			dur1 = "N";

		}

		if (req.getParameter(DUL_8) != null
				&& !req.getParameter(DUL_8).equals("")) {
			dul8 = (req.getParameter(DUL_8));
		} else {
			dul8 = "N";

		}
		if (req.getParameter(DUL_7) != null
				&& !req.getParameter(DUL_7).equals("")) {
			dul7 = (req.getParameter(DUL_7));

		} else {
			dul7 = "N";

		}
		if (req.getParameter(DUL_6) != null
				&& !req.getParameter(DUL_6).equals("")) {
			dul6 = (req.getParameter(DUL_6));
		} else {
			dul6 = "N";

		}
		if (req.getParameter(DUL_5) != null
				&& !req.getParameter(DUL_5).equals("")) {
			dul5 = (req.getParameter(DUL_5));
		} else {
			dul5 = "N";

		}
		if (req.getParameter(DUL_4) != null
				&& !req.getParameter(DUL_4).equals("")) {
			dul4 = (req.getParameter(DUL_4));
		} else {
			dul4 = "N";

		}
		if (req.getParameter(DUL_3) != null
				&& !req.getParameter(DUL_3).equals("")) {
			dul3 = (req.getParameter(DUL_3));
		} else {
			dul3 = "N";

		}
		if (req.getParameter(DUL_2) != null
				&& !req.getParameter(DUL_2).equals("")) {
			dul2 = (req.getParameter(DUL_2));
		} else {
			dul2 = "N";

		}
		if (req.getParameter(DUL_1) != null
				&& !req.getParameter(DUL_1).equals("")) {
			dul1 = (req.getParameter(DUL_1));
		} else {
			dul1 = "N";

		}

		if (req.getParameter(DLR_8) != null
				&& !req.getParameter(DLR_8).equals("")) {
			dlr8 = (req.getParameter(DLR_8));
		} else {
			dlr8 = "N";

		}
		if (req.getParameter(DLR_7) != null
				&& !req.getParameter(DLR_7).equals("")) {
			dlr7 = (req.getParameter(DLR_7));
		} else {
			dlr7 = "N";

		}
		if (req.getParameter(DLR_6) != null
				&& !req.getParameter(DLR_6).equals("")) {
			dlr6 = (req.getParameter(DLR_6));
		} else {
			dlr6 = "N";

		}
		if (req.getParameter(DLR_5) != null
				&& !req.getParameter(DLR_5).equals("")) {
			dlr5 = (req.getParameter(DLR_5));
		} else {
			dlr5 = "N";

		}
		if (req.getParameter(DLR_4) != null
				&& !req.getParameter(DLR_4).equals("")) {
			dlr4 = (req.getParameter(DLR_4));
		} else {
			dlr4 = "N";

		}
		if (req.getParameter(DLR_3) != null
				&& !req.getParameter(DLR_3).equals("")) {
			dlr3 = (req.getParameter(DLR_3));
		} else {
			dlr3 = "N";

		}
		if (req.getParameter(DLR_2) != null
				&& !req.getParameter(DLR_2).equals("")) {
			dlr2 = (req.getParameter(DLR_2));
		} else {
			dlr2 = "N";

		}

		if (req.getParameter(DLR_1) != null
				&& !req.getParameter(DLR_1).equals("")) {
			dlr1 = (req.getParameter(DLR_1));
		} else {
			dlr1 = "N";

		}

		if (req.getParameter(DLL_8) != null
				&& !req.getParameter(DLL_8).equals("")) {
			dll8 = (req.getParameter(DLL_8));
		} else {
			dll8 = "N";

		}
		if (req.getParameter(DLL_7) != null
				&& !req.getParameter(DLL_7).equals("")) {
			dll7 = (req.getParameter(DLL_7));
		} else {
			dll7 = "N";

		}

		if (req.getParameter(DLL_6) != null
				&& !req.getParameter(DLL_6).equals("")) {
			dll6 = (req.getParameter(DLL_6));
		} else {
			dll6 = "N";

		}
		if (req.getParameter(DLL_5) != null
				&& !req.getParameter(DLL_5).equals("")) {
			dll5 = (req.getParameter(DLL_5));
		} else {
			dll5 = "N";

		}
		if (req.getParameter(DLL_4) != null
				&& !req.getParameter(DLL_4).equals("")) {
			dll4 = (req.getParameter(DLL_4));
		} else {
			dll4 = "N";

		}
		if (req.getParameter(DLL_3) != null
				&& !req.getParameter(DLL_3).equals("")) {
			dll3 = (req.getParameter(DLL_3));
		} else {
			dll3 = "N";

		}
		if (req.getParameter(DLL_2) != null
				&& !req.getParameter(DLL_2).equals("")) {
			dll2 = (req.getParameter(DLL_2));
		} else {
			dll2 = "N";

		}
		if (req.getParameter(DLL_1) != null
				&& !req.getParameter(DLL_1).equals("")) {
			dll1 = (req.getParameter(DLL_1));
		} else {
			dll1 = "N";

		}
		// ///////////////////////////

		if (req.getParameter(UUR_8) != null
				&& !req.getParameter(UUR_8).equals("")) {
			uur8 = (req.getParameter(UUR_8));
		} else {
			uur8 = "N";

		}

		if (req.getParameter(UUR_7) != null
				&& !req.getParameter(UUR_7).equals("")) {
			uur7 = (req.getParameter(UUR_7));
		} else {
			uur7 = "N";

		}
		if (req.getParameter(UUR_6) != null
				&& !req.getParameter(UUR_6).equals("")) {
			uur6 = (req.getParameter(UUR_6));
		} else {
			uur6 = "N";

		}
		if (req.getParameter(UUR_5) != null
				&& !req.getParameter(UUR_5).equals("")) {
			uur5 = (req.getParameter(UUR_5));
		} else {
			uur5 = "N";

		}
		if (req.getParameter(UUR_4) != null
				&& !req.getParameter(UUR_4).equals("")) {
			uur4 = (req.getParameter(UUR_4));
		} else {
			uur4 = "N";

		}
		if (req.getParameter(UUR_3) != null
				&& !req.getParameter(UUR_3).equals("")) {
			uur3 = (req.getParameter(UUR_3));
		} else {
			uur3 = "N";

		}
		if (req.getParameter(UUR_2) != null
				&& !req.getParameter(UUR_2).equals("")) {
			uur2 = (req.getParameter(UUR_2));
		} else {
			uur2 = "N";

		}
		if (req.getParameter(UUR_1) != null
				&& !req.getParameter(UUR_1).equals("")) {
			uur1 = (req.getParameter(UUR_1));
		} else {
			uur1 = "N";

		}

		if (req.getParameter(UUL_8) != null
				&& !req.getParameter(UUL_8).equals("")) {
			uul8 = (req.getParameter(UUL_8));
		} else {
			uul8 = "N";

		}
		if (req.getParameter(UUL_7) != null
				&& !req.getParameter(UUL_7).equals("")) {
			uul7 = (req.getParameter(UUL_7));

		} else {
			uul7 = "N";

		}
		if (req.getParameter(UUL_6) != null
				&& !req.getParameter(UUL_6).equals("")) {
			uul6 = (req.getParameter(UUL_6));
		} else {
			uul6 = "N";

		}
		if (req.getParameter(UUL_5) != null
				&& !req.getParameter(UUL_5).equals("")) {
			uul5 = (req.getParameter(UUL_5));
		} else {
			uul5 = "N";

		}
		if (req.getParameter(UUL_4) != null
				&& !req.getParameter(UUL_4).equals("")) {
			uul4 = (req.getParameter(UUL_4));
		} else {
			uul4 = "N";

		}
		if (req.getParameter(UUL_3) != null
				&& !req.getParameter(UUL_3).equals("")) {
			uul3 = (req.getParameter(UUL_3));
		} else {
			uul3 = "N";

		}
		if (req.getParameter(UUL_2) != null
				&& !req.getParameter(UUL_2).equals("")) {
			uul2 = (req.getParameter(UUL_2));
		} else {
			uul2 = "N";

		}
		if (req.getParameter(UUL_1) != null
				&& !req.getParameter(UUL_1).equals("")) {
			uul1 = (req.getParameter(UUL_1));
		} else {
			uul1 = "N";

		}
		if (req.getParameter(ULR_8) != null
				&& !req.getParameter(ULR_8).equals("")) {
			ulr8 = (req.getParameter(ULR_8));
		} else {
			ulr8 = "N";

		}

		if (req.getParameter(ULR_7) != null
				&& !req.getParameter(ULR_7).equals("")) {
			ulr7 = (req.getParameter(ULR_7));
		} else {
			ulr7 = "N";

		}
		if (req.getParameter(ULR_6) != null
				&& !req.getParameter(ULR_6).equals("")) {
			ulr6 = (req.getParameter(ULR_6));
		} else {
			ulr6 = "N";

		}
		if (req.getParameter(ULR_5) != null
				&& !req.getParameter(ULR_5).equals("")) {
			ulr5 = (req.getParameter(ULR_5));
		} else {
			ulr5 = "N";

		}
		if (req.getParameter(ULR_4) != null
				&& !req.getParameter(ULR_4).equals("")) {
			ulr4 = (req.getParameter(ULR_4));
		} else {
			ulr4 = "N";

		}
		if (req.getParameter(ULR_3) != null
				&& !req.getParameter(ULR_3).equals("")) {
			ulr3 = (req.getParameter(ULR_3));
		} else {
			ulr3 = "N";

		}
		if (req.getParameter(ULR_2) != null
				&& !req.getParameter(ULR_2).equals("")) {
			ulr2 = (req.getParameter(ULR_2));
		} else {
			ulr2 = "N";

		}
		if (req.getParameter(ULR_1) != null
				&& !req.getParameter(ULR_1).equals("")) {
			ulr1 = (req.getParameter(ULR_1));
		} else {
			ulr1 = "N";

		}

		if (req.getParameter(ULL_8) != null
				&& !req.getParameter(ULL_8).equals("")) {
			ull8 = (req.getParameter(ULL_8));
		} else {
			ull8 = "N";

		}
		if (req.getParameter(ULL_7) != null
				&& !req.getParameter(ULL_8).equals("")) {
			ull7 = (req.getParameter(ULL_7));
		} else {
			ull7 = "N";

		}
		if (req.getParameter(ULL_6) != null
				&& !req.getParameter(ULL_6).equals("")) {
			ull6 = (req.getParameter(ULL_6));
		} else {
			ull6 = "N";

		}
		if (req.getParameter(ULL_5) != null
				&& !req.getParameter(ULL_5).equals("")) {
			ull5 = (req.getParameter(ULL_5));
		} else {
			ull5 = "N";

		}
		if (req.getParameter(ULL_4) != null
				&& !req.getParameter(ULL_4).equals("")) {
			ull4 = (req.getParameter(ULL_4));
		} else {
			ull4 = "N";

		}
		if (req.getParameter(ULL_3) != null
				&& !req.getParameter(ULL_3).equals("")) {
			ull3 = (req.getParameter(ULL_3));
		} else {
			ull3 = "N";

		}
		if (req.getParameter(ULL_2) != null
				&& !req.getParameter(ULL_2).equals("")) {
			ull2 = (req.getParameter(ULL_2));
		} else {
			ull2 = "N";

		}
		if (req.getParameter(ULL_1) != null
				&& !req.getParameter(ULL_1).equals("")) {
			ull1 = (req.getParameter(ULL_1));
		} else {
			ull1 = "N";

		}

		// ////////////////////////

		if (req.getParameter(MUR_8) != null
				&& !req.getParameter(MUR_8).equals("")) {
			mur8 = (req.getParameter(MUR_8));

		} else {
			mur8 = "N";

		}
		if (req.getParameter(MUR_7) != null
				&& !req.getParameter(MUR_7).equals("")) {
			mur7 = (req.getParameter(MUR_7));
		} else {
			mur7 = "N";

		}
		if (req.getParameter(MUR_6) != null
				&& !req.getParameter(MUR_6).equals("")) {
			mur6 = (req.getParameter(MUR_6));
		} else {
			mur6 = "N";

		}
		if (req.getParameter(MUR_5) != null
				&& !req.getParameter(MUR_5).equals("")) {
			mur5 = (req.getParameter(MUR_5));
		} else {
			mur5 = "N";

		}
		if (req.getParameter(MUR_4) != null
				&& !req.getParameter(MUR_4).equals("")) {
			mur4 = (req.getParameter(MUR_4));
		} else {
			mur4 = "N";

		}
		if (req.getParameter(MUR_3) != null
				&& !req.getParameter(MUR_3).equals("")) {
			mur3 = (req.getParameter(MUR_3));
		} else {
			mur3 = "N";

		}
		if (req.getParameter(MUR_2) != null
				&& !req.getParameter(MUR_2).equals("")) {
			mur2 = (req.getParameter(MUR_2));
		} else {
			mur2 = "N";

		}
		if (req.getParameter(MUR_1) != null
				&& !req.getParameter(MUR_1).equals("")) {
			mur1 = (req.getParameter(MUR_1));
		} else {
			mur1 = "N";

		}

		if (req.getParameter(MUL_8) != null
				&& !req.getParameter(MUL_8).equals("")) {
			mul8 = (req.getParameter(MUL_8));
		} else {
			mul8 = "N";

		}
		if (req.getParameter(MUL_7) != null
				&& !req.getParameter(MUL_7).equals("")) {
			mul7 = (req.getParameter(MUL_7));

		} else {
			mul7 = "N";

		}
		if (req.getParameter(MUL_6) != null
				&& !req.getParameter(MUL_6).equals("")) {
			mul6 = (req.getParameter(MUL_6));
		} else {
			mul6 = "N";

		}
		if (req.getParameter(MUL_5) != null
				&& !req.getParameter(MUL_5).equals("")) {
			mul5 = (req.getParameter(MUL_5));
		} else {
			mul5 = "N";

		}
		if (req.getParameter(MUL_4) != null
				&& !req.getParameter(MUL_4).equals("")) {
			mul4 = (req.getParameter(MUL_4));
		} else {
			mul4 = "N";

		}
		if (req.getParameter(MUL_3) != null
				&& !req.getParameter(MUL_3).equals("")) {
			mul3 = (req.getParameter(MUL_3));
		} else {
			mul3 = "N";

		}
		if (req.getParameter(MUL_2) != null
				&& !req.getParameter(MUL_2).equals("")) {
			mul2 = (req.getParameter(MUL_2));
		} else {
			mul2 = "N";

		}
		if (req.getParameter(MUL_1) != null
				&& !req.getParameter(MUL_1).equals("")) {
			mul1 = (req.getParameter(MUL_1));
		} else {
			mul1 = "N";

		}
		if (req.getParameter(MLR_8) != null
				&& !req.getParameter(MLR_8).equals("")) {
			mlr8 = (req.getParameter(MLR_8));
		} else {
			mlr8 = "N";

		}

		if (req.getParameter(MLR_7) != null
				&& !req.getParameter(MLR_7).equals("")) {
			mlr7 = (req.getParameter(MLR_7));
		} else {
			mlr7 = "N";

		}
		if (req.getParameter(MLR_6) != null
				&& !req.getParameter(MLR_6).equals("")) {
			mlr6 = (req.getParameter(MLR_6));
		} else {
			mlr6 = "N";

		}
		if (req.getParameter(MLR_5) != null
				&& !req.getParameter(MLR_5).equals("")) {
			mlr5 = (req.getParameter(MLR_5));
		} else {
			mlr5 = "N";

		}

		if (req.getParameter(MLR_4) != null
				&& !req.getParameter(MLR_4).equals("")) {
			mlr4 = (req.getParameter(MLR_4));
		} else {
			mlr4 = "N";

		}
		if (req.getParameter(MLR_3) != null
				&& !req.getParameter(MLR_3).equals("")) {
			mlr3 = (req.getParameter(MLR_3));
		} else {
			mlr3 = "N";

		}

		if (req.getParameter(MLR_2) != null
				&& !req.getParameter(MLR_2).equals("")) {
			mlr2 = (req.getParameter(MLR_2));
		} else {
			mlr2 = "N";

		}
		if (req.getParameter(MLR_1) != null
				&& !req.getParameter(MLR_1).equals("")) {
			mlr1 = (req.getParameter(MLR_1));
		} else {
			mlr1 = "N";

		}

		if (req.getParameter(MLL_8) != null
				&& !req.getParameter(MLL_8).equals("")) {
			mll8 = (req.getParameter(MLL_8));
		} else {
			mll8 = "N";

		}
		if (req.getParameter(MLL_7) != null
				&& !req.getParameter(MLL_7).equals("")) {
			mll7 = (req.getParameter(MLL_7));
		} else {
			mll7 = "N";

		}
		if (req.getParameter(MLL_5) != null
				&& !req.getParameter(MLL_6).equals("")) {
			mll6 = (req.getParameter(MLL_6));
		} else {
			mll6 = "N";

		}
		if (req.getParameter(MLL_5) != null
				&& !req.getParameter(MLL_5).equals("")) {
			mll5 = (req.getParameter(MLL_5));
		} else {
			mll5 = "N";

		}
		if (req.getParameter(MLL_4) != null
				&& !req.getParameter(MLL_4).equals("")) {
			mll4 = (req.getParameter(MLL_4));
		} else {
			mll4 = "N";

		}
		if (req.getParameter(MLL_3) != null
				&& !req.getParameter(MLL_3).equals("")) {
			mll3 = (req.getParameter(MLL_3));
		} else {
			mll3 = "N";

		}
		if (req.getParameter(MLL_2) != null
				&& !req.getParameter(MLL_2).equals("")) {
			mll2 = (req.getParameter(MLL_2));
		} else {
			mll2 = "N";

		}
		if (req.getParameter(MLL_1) != null
				&& !req.getParameter(MLL_1).equals("")) {
			mll1 = (req.getParameter(MLL_1));
		} else {
			mll1 = "N";

		}

		sur8 = dur8 + "" + mur8 + "" + uur8;

		sur7 = dur7 + "" + mur7 + "" + uur7;

		sur6 = dur6 + "" + mur6 + "" + uur6;
		sur5 = dur5 + "" + mur5 + "" + uur5;
		sur4 = dur4 + "" + mur4 + "" + uur4;
		sur3 = dur3 + "" + mur3 + "" + uur3;
		sur2 = dur2 + "" + mur2 + "" + uur2;
		sur1 = dur1 + "" + mur2 + "" + uur1;

		sul8 = dul8 + "" + mul8 + "" + uul8;
		sul7 = dul7 + "" + mul7 + "" + uul7;

		sul6 = dul6 + "" + mul6 + "" + uul6;
		sul5 = dul5 + "" + mul5 + "" + uul5;
		sul4 = dul4 + "" + mul4 + "" + uul4;
		sul3 = dul3 + "" + mul3 + "" + uul3;
		sul2 = dul2 + "" + mul2 + "" + uul2;
		sul1 = dul1 + "" + mul1 + "" + uul1;

		slr8 = dlr8 + "" + mlr8 + "" + ulr8;
		slr7 = dlr7 + "" + mlr7 + "" + ulr7;
		slr6 = dlr6 + "" + mlr6 + "" + ulr6;
		slr5 = dlr5 + "" + mlr5 + "" + ulr5;
		slr4 = dlr4 + "" + mlr4 + "" + ulr4;
		slr3 = dlr3 + "" + mlr3 + "" + ulr3;
		slr2 = dlr2 + "" + mlr2 + "" + ulr2;
		slr1 = dlr1 + "" + mlr2 + "" + ulr1;

		sll8 = dll8 + "" + mll8 + "" + ull8;
		sll7 = dll7 + "" + mll7 + "" + ull7;
		sll6 = dll6 + "" + mll6 + "" + ull6;
		sll5 = dll5 + "" + mll5 + "" + ull5;
		sll4 = dll4 + "" + mll4 + "" + ull4;
		sll3 = dll3 + "" + mll3 + "" + ull3;
		sll2 = dll2 + "" + mll2 + "" + ull2;
		sll1 = dll1 + "" + mll1 + "" + ull1;
		MbTypeOfEntryMaster mbTypeOfEntryMaster = new MbTypeOfEntryMaster();
		mbTypeOfEntryMaster.setId(typeOfEntry);
		generalMap.put("serviceNo", serviceNo);
		generalMap.put("pojoPropertyCode", "serviceNo");
		generalMap.put("pojoName", "MasMedicalExaminationReportOnEntry");

		// Map listMap =
		// commonMasterHandlerService.checkForExistingMasters(generalMap);
		Boolean successfullyAdded = false;
		// List codeList = (List) listMap.get("duplicateGeneralCodeList");
		// List nameList = (List) listMap.get("duplicateGeneralNameList");
		// List typeOfEntryList = (List)
		// listMap.get("duplicateGeneralAddressList");
		/*
		 * if (codeList != null && codeList.size() > 0) { message =
		 * "Yearly Serial No Already Exist!"; jsp = MEDICAL_BOARD_ERROR_MSG;
		 * } else {
		 */
		if (req.getParameter("dentalReferToMH") != null
				&& !(req.getParameter("dentalReferToMH").equals(""))) {
			denatlToMH = req.getParameter("dentalReferToMH");
			masMedicalBoardProceedings.setReferToMH(req
					.getParameter("dentalReferToMH"));
		}

		masMedicalBoardProceedings.setInnerEarL(innerEarL);
		masMedicalBoardProceedings.setHearingBothCv(hearingBothCV);
		masMedicalBoardProceedings.setDateSpecialExam(eyeDate);
		masMedicalBoardProceedings
				.setTotalDefectiveTeeth(totalDefectiveTeeth);
		masMedicalBoardProceedings.setTotalTeeth(totalTeeth);
		masMedicalBoardProceedings.setMissingTeeth(missingTeeth);
		masMedicalBoardProceedings.setUnservisableTeeth(unserviceableTeeth);
		masMedicalBoardProceedings.setDenstlPoint(DenstalPoint);
		masMedicalBoardProceedings.setYearlySerialNo(serviceNo);
		// masMedicalBoardProceedings.setMonthlySerialNo(rank);
		masMedicalBoardProceedings.setEntryDate(entryDate);
		// ----------------------------------------------------------------------------------------
		if (data != null) {

			masMedicalBoardProceedings.setDlc(dlc);
			masMedicalBoardProceedings.setHb(hb);
			masMedicalBoardProceedings.setTlc(tlc);
			masMedicalBoardProceedings.setEsr(esr);
			masMedicalBoardProceedings.setSpGravity(spGravity);
			masMedicalBoardProceedings.setAlbumin(albumen);
			masMedicalBoardProceedings.setSugar(sugarR);
			masMedicalBoardProceedings.setSugarF(sugarF);
			masMedicalBoardProceedings.setSugarPP(sugarPP);
			masMedicalBoardProceedings.setUrea(urea);
			masMedicalBoardProceedings.setUricAcid(uricAcid);
			masMedicalBoardProceedings.setSrCreatine(srCreatine);
			masMedicalBoardProceedings.setCholesterol(cholesterol);
			masMedicalBoardProceedings.setTriglycerides(triglycerids);
			masMedicalBoardProceedings.setHld(hdl);
			masMedicalBoardProceedings.setVldl(vldl);

		}
		// ----------------------------------------------------------------------------------------
		masMedicalBoardProceedings.setTypeOfEntry(mbTypeOfEntryMaster);
		// masMedicalBoardProceedings.setBatchNo(betchNo);
		masMedicalBoardProceedings.setChestNo(chestNo);
		masMedicalBoardProceedings.setRollNo(rollNo);
		/*
		 * MasUnit masUnit = new MasUnit(); masUnit.setId(medicalExamHeld);
		 * masMedicalBoardProceedings.setMedicalExamHeldAt(masUnit);
		 */
		masMedicalBoardProceedings.setMedicalStatus(medicalStatus);
		masMedicalBoardProceedings.setNameInFull(fullName);
		masMedicalBoardProceedings.setDateOfBirth(dateOfBirth);
		if (maritialStatus != 0) {
			MasMaritalStatus masMaritalStatus = new MasMaritalStatus();
			masMaritalStatus.setId(maritialStatus);
			masMedicalBoardProceedings.setMaritalStatus(masMaritalStatus);
		}
		masMedicalBoardProceedings.setPNo(pNo);

		masMedicalBoardProceedings.setHoursOfFlown(hoursOfFlown);
		masMedicalBoardProceedings.setParmanentAddress(permanentAddress);
		masMedicalBoardProceedings.setIdentificationMarks1(identification1);
		masMedicalBoardProceedings.setIdentificationMarks2(identification2);
		masMedicalBoardProceedings.setArmsCorps(armsCrops);
		masMedicalBoardProceedings.setDateOfCompletion(dateOfCompletion);
		masMedicalBoardProceedings
				.setDocumentForwardDate(documentForwardDate);
		// masMedicalBoardProceedings.setDateOfReporting(dateOfReporting);
		masMedicalBoardProceedings.setDocumentForwardTo(documentForwardTo);
		masMedicalBoardProceedings.setFromWhereHeReport(fromWhereHeReport);
		masMedicalBoardProceedings.setHypertension(hypertension);
		masMedicalBoardProceedings.setHeartDiabetes(heartDisease);
		masMedicalBoardProceedings.setDiabetes(diabetes);
		masMedicalBoardProceedings.setBleedingDisorder(bleedingDisorder);
		masMedicalBoardProceedings.setMentalDisease(mentalDisease);
		masMedicalBoardProceedings.setNightBlindness(nightBlindness);
		masMedicalBoardProceedings.setChronicBronchitis(asthama);
		masMedicalBoardProceedings.setDischargeFromEars(dischargeFrom);
		masMedicalBoardProceedings.setPleurisy(plesury);
		masMedicalBoardProceedings.setAnyOtherEarDisease(earDieses);
		masMedicalBoardProceedings
				.setRheumatismFrequentSorethroats(rheumatism);
		masMedicalBoardProceedings
				.setFrequentCoughColdSinusitis(frequentCough);
		masMedicalBoardProceedings
				.setChronicIndigestion(chronicIndigestion);
		masMedicalBoardProceedings
				.setNervousBreakdownMentalIllness(nervousBrakdown);
		masMedicalBoardProceedings.setKidneyBladderTrouble(kidenyBladder);
		masMedicalBoardProceedings
				.setFitsFaintingAttack(fitsFaintinngAttacks);
		masMedicalBoardProceedings.setStd(std);
		masMedicalBoardProceedings.setSevereHeadInjury(serveHeadInjury);
		masMedicalBoardProceedings.setJaundice(joundice);
		masMedicalBoardProceedings.setAirSeaCarTrainSickness(sickness);
		masMedicalBoardProceedings.setBreastDiseaseDischarge(breastDisease);
		masMedicalBoardProceedings.setTrachoma(trachoma);
		masMedicalBoardProceedings.setAmenorrhoeaDysmenonhoea(amenorrhoea);
		masMedicalBoardProceedings.setNightBindness(nightbindness);
		masMedicalBoardProceedings.setMenonhagia(menirrhagia);
		masMedicalBoardProceedings
				.setLaserTreatementSurgeryForEye(laserTeartement);
		masMedicalBoardProceedings.setPregnancy(pregnancy);
		masMedicalBoardProceedings.setAnyOtherEyeDisease(eyeDisease);
		masMedicalBoardProceedings.setAbortion(abortion);
		masMedicalBoardProceedings
				.setBeenrejectedAsMedicallyUnfitForAnyBranch(rejectedAsUnfit);
		masMedicalBoardProceedings
				.setDischargeAsMedicallyUnfitForAnyBranch(dischargeMedicallyUnfit);
		masMedicalBoardProceedings
				.setAdmittedInHospitalForAnyIllnessOperationOrInjury(adimmitedInHospitalFirIllness);

		masMedicalBoardProceedings
				.setStateTheNatureOfDiseaseDuration(stateNature);
		masMedicalBoardProceedings
				.setAnyOtherInformationAboutYourHealth(otherInform);
		masMedicalBoardProceedings.setHeight(height);
		masMedicalBoardProceedings.setWeight(weight);
		masMedicalBoardProceedings.setAcceptable(acceptableKg);
		masMedicalBoardProceedings.setLegLength(leglength);
		masMedicalBoardProceedings.setAppearance(appereance);
		masMedicalBoardProceedings.setAlbumin(albumin);
		masMedicalBoardProceedings.setSugar(sugar);
		masMedicalBoardProceedings.setSpGravity(spGraviry);
		masMedicalBoardProceedings.setHbPercentage(hbPercentage);
		masMedicalBoardProceedings.setAnyOtherInvCarriedOut(anyOtherInv);
		masMedicalBoardProceedings.setPhysique(physique);
		masMedicalBoardProceedings.setSkin(skin);
		masMedicalBoardProceedings.setAbdomen(abdomen);
		masMedicalBoardProceedings.setHeartSize(heartSize);
		masMedicalBoardProceedings.setSounds(sound);
		masMedicalBoardProceedings.setRhythm(rhythm);
		masMedicalBoardProceedings.setArterialWalls(arterialWalls);
		masMedicalBoardProceedings.setPulseRates(pulseRates);
		masMedicalBoardProceedings.setBp(bp);
		masMedicalBoardProceedings.setChestMeasurement(fullExpension);
		masMedicalBoardProceedings.setRangeOfExpension(rangeOfExpension);
		masMedicalBoardProceedings.setSelfBalancingR(selfBalR);
		masMedicalBoardProceedings.setSelfBalancingL(selfBalL);
		masMedicalBoardProceedings.setSpeechMentalCapacity(speechMental);
		masMedicalBoardProceedings.setEndocrineCondition(endocrinCond);
		masMedicalBoardProceedings
				.setAnyOtheAbnormalities(otherAbnormalities);
		masMedicalBoardProceedings.setRemarks(medicinRemarks);
		masMedicalBoardProceedings.setFingers(finger);
		masMedicalBoardProceedings.setHand(hand);
		masMedicalBoardProceedings.setWrists(wrist);
		masMedicalBoardProceedings.setElbows(elbows);
		masMedicalBoardProceedings.setShoulderGirdles(shoulderGridles);
		masMedicalBoardProceedings.setCervical(cercival);
		masMedicalBoardProceedings.setDorsalVertebrate(dorsalVertebrate);
		masMedicalBoardProceedings.setHullux(hullux);
		masMedicalBoardProceedings.setValgus(valgus);
		masMedicalBoardProceedings.setRigigus(riggus);
		masMedicalBoardProceedings.setFlatFeet(flatFeet);
		masMedicalBoardProceedings.setJoints(joints);
		masMedicalBoardProceedings.setPelvis(pelvis);
		masMedicalBoardProceedings.setGail(gail);
		masMedicalBoardProceedings.setLumber(lumberScaler);
		masMedicalBoardProceedings.setRoccyxVarocose(roccyxVericose);
		masMedicalBoardProceedings.setHydrocele(hydrocele);
		masMedicalBoardProceedings.setVaricocele(varicocele);
		masMedicalBoardProceedings.setUnderscendedTest(underScende);
		masMedicalBoardProceedings.setHemorrhoids(hemonhoids);
		masMedicalBoardProceedings.setHerniaMusic(herinaMusic);
		masMedicalBoardProceedings.setBreasts(breasts);
		masMedicalBoardProceedings.setRemarksLowerlimbs(surgeryRemarks);
		masMedicalBoardProceedings.setRespiratorySystem(respatorySystem);
		masMedicalBoardProceedings
				.setWithGlassesLDistant(withglassesDistantL);
		masMedicalBoardProceedings
				.setWithGlassesRDistant(withGlassesDistantR);
		masMedicalBoardProceedings
				.setWithoutGlassesLDistant(withoutGlassesDistantL);
		masMedicalBoardProceedings
				.setWthoutGlassesRDistant(withoutGlassesDistantR);
		masMedicalBoardProceedings
				.setWithGlassesLNearvision(withGlassesNearL);
		masMedicalBoardProceedings
				.setWithGlassesRNearvision(withGlassesNearR);
		masMedicalBoardProceedings
				.setWithoutGlassesLNearvision(withoutGlassesNearL);
		masMedicalBoardProceedings
				.setWithoutGlassesRNearvision(withoutGlassesNearR);
		masMedicalBoardProceedings
				.setEvidenceOfTrachoma(evidienceOfTrachoma);
		masMedicalBoardProceedings.setBinocularVisionGrade(binocular);
		masMedicalBoardProceedings
				.setManifestHypermetropia(manifestHypermetropia);
		masMedicalBoardProceedings.setCoverTest(coverTest);
		masMedicalBoardProceedings.setDiaphragmTest(diaphragmTest);
		masMedicalBoardProceedings.setFundAndMedia(fundMedia);
		masMedicalBoardProceedings.setFields(fields);
		masMedicalBoardProceedings
				.setNightVisualCapacity(nightVisualCapacity);
		masMedicalBoardProceedings.setConvergenceC(convergenceC);
		masMedicalBoardProceedings.setConvergenceSc(convergenceCP);
		masMedicalBoardProceedings.setAccommodationR(accommodationR);
		masMedicalBoardProceedings.setAccommodationL(accommodationL);
		masMedicalBoardProceedings.setRemarksSpecialExam(eyeRemarks);
		masMedicalBoardProceedings.setHearingRcv(hearingRCV);
		masMedicalBoardProceedings.setHearingLcv(hearingLCV);
		masMedicalBoardProceedings.setEarHearingRfw(hearingRFW);
		masMedicalBoardProceedings.setEarHearingLfw(hearingLFW);
		masMedicalBoardProceedings.setEarHearingBothFw(hearingBothFW);
		masMedicalBoardProceedings.setExternalEarR(externalEarR);
		masMedicalBoardProceedings.setExternalEarL(externalEarL);
		masMedicalBoardProceedings.setMiddleEarR(middleEarR);
		masMedicalBoardProceedings.setMiddleEar(middleEarL);

		masMedicalBoardProceedings.setInnerEarR(innerEarR);
		masMedicalBoardProceedings.setAudiometryRecord(audiometryRecord);
		masMedicalBoardProceedings.setNose(nose);
		masMedicalBoardProceedings.setThroat(throatEar);
		masMedicalBoardProceedings.setRemarksEar(earReamrks);
		masMedicalBoardProceedings.setEarDate(earDate);
		masMedicalBoardProceedings.setDateTeath(dentalDate);
		masMedicalBoardProceedings.setRemarksTeath(dentalRemarks);
		masMedicalBoardProceedings.setMenstrualHistory(menstrualHistory);
		masMedicalBoardProceedings.setNoOfPregnancies(noOfPregnancy);
		masMedicalBoardProceedings.setNoOfAbortions(noOfAbortion);
		masMedicalBoardProceedings.setNoOfChildren(noOfChildren);
		masMedicalBoardProceedings.setLastConfinementDate(lastCondinement);
		masMedicalBoardProceedings.setVaginalDischarge(vaginalDischarge);
		masMedicalBoardProceedings.setProlapse(prolapse);
		masMedicalBoardProceedings.setUsgAbdomen(usgAbortion);
		masMedicalBoardProceedings.setGynaecologyDate(gyanaecologyDate);
		masMedicalBoardProceedings
				.setRemarksGynaecology(gyanaecologyRemarks);
		masMedicalBoardProceedings
				.setMedicalBoardFindings(medicalBoardExamination);
		masMedicalBoardProceedings
				.setDateMedicalBoardExam(medicalBoardExaminationDate);
		masMedicalBoardProceedings.setLmp(lmp);
		if (medicalBoardExaminationPlace != 0) {
			MasUnit masUnit1 = new MasUnit();
			masUnit1.setId(medicalBoardExaminationPlace);
			masMedicalBoardProceedings.setPlaceMedicalBoardExam(masUnit1);
		}
		masMedicalBoardProceedings
				.setMedicalBoardSubsequentFind(subsequentMedicalBoardExam);
		masMedicalBoardProceedings
				.setDateMedicalBoardSubsequent(subsequentMedicalBoardExamDate);
		if (subsequentMedicalBoardExamPlace != 0) {
			MasUnit masUnit2 = new MasUnit();
			masUnit2.setId(subsequentMedicalBoardExamPlace);
			masMedicalBoardProceedings
					.setPlaceMedicalBoardSubsequent(masUnit2);
		}
		masMedicalBoardProceedings
				.setApprovingAuthority(ApprovingAuthority);
		masMedicalBoardProceedings
				.setDateApprovingAuthority(ApprovingAuthorityDate);
		if (ApprovingAuthorityPlace != 0) {
			MasUnit masUnit3 = new MasUnit();
			masUnit3.setId(ApprovingAuthorityPlace);
			masMedicalBoardProceedings.setPlaceApprovingAuthority(masUnit3);
		}
		masMedicalBoardProceedings.setSurgeryDate(surgeyDate);
		masMedicalBoardProceedings.setMediceExamDate(medicinExamDate);
		masMedicalBoardProceedings
				.setNearVisionWithGlassCp(withGlassesNearCP);
		masMedicalBoardProceedings
				.setNearVisionWithoutGlassCp(withoutGlassesNearCP);
		masMedicalBoardProceedings.setUR1(sur1);
		masMedicalBoardProceedings.setUR2(sur2);
		masMedicalBoardProceedings.setUR3(sur3);
		masMedicalBoardProceedings.setUR4(sur4);
		masMedicalBoardProceedings.setUR5(sur5);
		masMedicalBoardProceedings.setUR6(sur6);
		masMedicalBoardProceedings.setUR7(sur7);
		masMedicalBoardProceedings.setUR8(sur8);

		masMedicalBoardProceedings.setUL1(sul1);
		masMedicalBoardProceedings.setUL2(sul2);
		masMedicalBoardProceedings.setUL3(sul3);
		masMedicalBoardProceedings.setUL4(sul4);
		masMedicalBoardProceedings.setUL5(sul5);
		masMedicalBoardProceedings.setUL6(sul6);
		masMedicalBoardProceedings.setUL7(sul7);
		masMedicalBoardProceedings.setUL8(sul8);

		masMedicalBoardProceedings.setLR1(slr1);
		masMedicalBoardProceedings.setLR2(slr2);
		masMedicalBoardProceedings.setLR3(slr3);
		masMedicalBoardProceedings.setLR4(slr4);
		masMedicalBoardProceedings.setLR5(slr5);
		masMedicalBoardProceedings.setLR6(slr6);
		masMedicalBoardProceedings.setLR7(slr7);
		masMedicalBoardProceedings.setLR8(slr8);

		masMedicalBoardProceedings.setLL1(sll1);
		masMedicalBoardProceedings.setLL2(sll2);
		masMedicalBoardProceedings.setLL3(sll3);
		masMedicalBoardProceedings.setLL4(sll4);
		masMedicalBoardProceedings.setLL5(sll5);
		masMedicalBoardProceedings.setLL6(sll6);
		masMedicalBoardProceedings.setLL7(sll7);
		masMedicalBoardProceedings.setLL8(sll8);
		masMedicalBoardProceedings.setLastChangedBy(lastChangedBy);
		masMedicalBoardProceedings.setLastChangedDate(lastChangedDate);
		masMedicalBoardProceedings.setLastChangedTime(lastChangedTime);
		masMedicalBoardProceedings.setServiceNo(serviceNo);
		// masMedicalBoardProceedings.setName(name);
		// masMedicalBoardProceedings.setUnit(unit);
		masMedicalBoardProceedings.setServiceiaf(serviceiaf);
		// masMedicalBoardProceedings.setBranch(branch);
		// masMedicalBoardProceedings.setDob(dob);

		masMedicalBoardProceedings.setTypeofcommision(typeOfCommunication);
		masMedicalBoardProceedings.setDateofcommun(dateofcommun);
		//---added by dipali
		masMedicalBoardProceedings.setDateOfDischarge(dateOfDischarge);
		masMedicalBoardProceedings.setTotalService(totalservice);
		masMedicalBoardProceedings
				.setPastmedicalhistory(pastmedicalhistory);
		masMedicalBoardProceedings
				.setPresentmedicalhistory(presentmedicalhistory);
		masMedicalBoardProceedings.setIdealweight(idealweight);
		masMedicalBoardProceedings.setOverweight(overweight);
		masMedicalBoardProceedings.setWaist(waist);
		masMedicalBoardProceedings
				.setChestfullexpansion(chestfullexpansion);
		masMedicalBoardProceedings.setBhi(bhi);
		masMedicalBoardProceedings.setRangeofexpansion(rangeofexpansion);
		masMedicalBoardProceedings.setBodyfat(bodyfat);
		masMedicalBoardProceedings.setSignfoldthickness(signfoldthickness);
		masMedicalBoardProceedings.setSportman(sportman);
		masMedicalBoardProceedings.setLastame(lastame);
		masMedicalBoardProceedings.setActualweight(actualweight);

		if (req.getParameter(SERVICE_TYPE_ID) != null
				&& !(req.getParameter(SERVICE_TYPE_ID)).equals("0")) {
			MasServiceType serviceType = new MasServiceType();
			serviceType.setId(Integer.parseInt(req
					.getParameter(SERVICE_TYPE_ID)));
			masMedicalBoardProceedings.setServiceType(serviceType);
		}
		if (req.getParameter(RANK_ID) != null
				&& !(req.getParameter(RANK_ID)).equals("0")) {
			MasRank masRank = new MasRank();
			masRank.setId(Integer.parseInt(req.getParameter(RANK_ID)));
			masMedicalBoardProceedings.setRank(masRank);
		}
		if (req.getParameter(TRADE_ID) != null
				&& !(req.getParameter(TRADE_ID)).equals("")) {
			MasTrade masTrade = new MasTrade();
			masTrade.setId(Integer.parseInt(req.getParameter(TRADE_ID)));
			masMedicalBoardProceedings.setTrade(masTrade);
		}
		if (req.getParameter(UNIT_ID) != null
				&& !(req.getParameter(UNIT_ID)).equals("0")) {
			MasUnit unitObj = new MasUnit();
			unitObj.setId(Integer.parseInt(req.getParameter(UNIT_ID)));
			masMedicalBoardProceedings.setUnit(unitObj);
		}
		if (req.getParameter("apparentAge") != null
				&& !req.getParameter("apparentAge").equals("")) {
			String aparentage = req.getParameter("apparentAge");
			masMedicalBoardProceedings.setApparentAge(aparentage.substring(
					0, 2));
		}
		if (req.getParameter(VISIT_ID) != null
				&& !(req.getParameter(VISIT_ID)).equals("0")) {
			Visit visit = new Visit();
			visit.setId(Integer.parseInt(req.getParameter(VISIT_ID)));
			if (req.getParameter("apparentAge") == null) {
				if (masMedicalBoardProceedings.getVisit().getAge() != null) {
					masMedicalBoardProceedings
							.setApparentAge(masMedicalBoardProceedings
									.getVisit().getAge().substring(0, 2));
				}
			}
			masMedicalBoardProceedings.setVisit(visit);
		}
		if (req.getParameter(HIN_ID) != null
				&& !(req.getParameter(HIN_ID)).equals("0")) {
			Patient patient = new Patient();
			patient.setId(Integer.parseInt(req.getParameter(HIN_ID)));
			masMedicalBoardProceedings.setHin(patient);
			mapForDS.put("hinId", Integer
					.parseInt(req.getParameter(HIN_ID)));
		}
		if (req.getParameter(FATHER_NAME) != null) {
			masMedicalBoardProceedings.setFatherName(req
					.getParameter(FATHER_NAME));
		}
		if (req.getParameter(RELEVANT_FAMILY_HISTORY) != null) {
			masMedicalBoardProceedings.setRelevantFamilyHistory(req
					.getParameter(RELEVANT_FAMILY_HISTORY));
		}
		if (req.getParameter(DEFECTS_NOT_TO_CAUSE_REJECTION) != null) {
			masMedicalBoardProceedings.setDefectNotToCauseRejection(req
					.getParameter(DEFECTS_NOT_TO_CAUSE_REJECTION));
		}
		if (req.getParameter(FOUND_FIT_IN_CATEGORY) != null) {
			masMedicalBoardProceedings.setFoundFitInCategory(req
					.getParameter(FOUND_FIT_IN_CATEGORY));
		}
		if (req.getParameter(APPOINTMENT_DATE) != null
				&& !req.getParameter(APPOINTMENT_DATE).equals("")) {
			masMedicalBoardProceedings.setAppointmentDate(HMSUtil
					.convertStringTypeDateToDateType(req
							.getParameter(APPOINTMENT_DATE)));
		}
		if (req.getParameter(APPOINTMENT_TIME) != null
				&& !req.getParameter(APPOINTMENT_TIME).equals("")) {
			masMedicalBoardProceedings.setAppointmentTime(req
					.getParameter(APPOINTMENT_TIME));
		}
		if (req.getParameter("medicalExamType") != null
				&& !req.getParameter("medicalExamType").equals("")) {
			masMedicalBoardProceedings.setMedicalExamType(req
					.getParameter("medicalExamType"));
		}
		if (req.getParameter("Hips") != null
				&& !(req.getParameter("Hips").equals(""))) {
			masMedicalBoardProceedings.setHips(req.getParameter("Hips"));
		}
		if (req.getParameter("WHR") != null
				&& !(req.getParameter("WHR").equals(""))) {
			masMedicalBoardProceedings.setWhr(req.getParameter("WHR"));
		}
		if (req.getParameter(APPOINTMENT_TIME) != null
				&& !req.getParameter(APPOINTMENT_TIME).equals("")) {
			masMedicalBoardProceedings.setAppointmentTime(req
					.getParameter(APPOINTMENT_TIME));
		}
		if (req.getParameter(HIGHER_MENTAL_FUNCTION) != null
				&& !req.getParameter(HIGHER_MENTAL_FUNCTION).equals("")) {
			masMedicalBoardProceedings.setHigherMentalFunction(req
					.getParameter(HIGHER_MENTAL_FUNCTION));
		}
		if (req.getParameter(SPEECH) != null
				&& !req.getParameter(SPEECH).equals("")) {
			masMedicalBoardProceedings.setSpeech(req.getParameter(SPEECH));
		}
		if (req.getParameter(REFLEXES) != null
				&& !req.getParameter(REFLEXES).equals("")) {
			masMedicalBoardProceedings.setReflexes(req
					.getParameter(REFLEXES));
		}
		if (req.getParameter(TREMORS) != null
				&& !req.getParameter(TREMORS).equals("")) {
			masMedicalBoardProceedings
					.setTremors(req.getParameter(TREMORS));
		}
		if (req.getParameter(SELF_BALANCING_TEST) != null
				&& !req.getParameter(SELF_BALANCING_TEST).equals("")) {
			masMedicalBoardProceedings.setSelfBalancingTest(req
					.getParameter(SELF_BALANCING_TEST));
		}

		if (req.getParameter(DISABILITY) != null
				&& !req.getParameter(DISABILITY).equals("")) {
			masMedicalBoardProceedings.setDisability(req
					.getParameter(DISABILITY));
		}
		if (req.getParameter(CORONORY_RISK_FACTOR) != null
				&& !req.getParameter(CORONORY_RISK_FACTOR).equals("")) {
			masMedicalBoardProceedings.setCoronaryRiskFactor(req
					.getParameter(CORONORY_RISK_FACTOR));
		}
		if (req.getParameter("familyHistoryOther") != null
				&& !req.getParameter("familyHistoryOther").equals("")) {
			masMedicalBoardProceedings.setFmdm(req
					.getParameter("familyHistoryOther"));
		}
		if (req.getParameter("commutationOfPensionRemarks") != null
				&& !req.getParameter("commutationOfPensionRemarks").equals(
						"")) {
			masMedicalBoardProceedings.setCommandRemarks(req
					.getParameter("commutationOfPensionRemarks"));
		}
		if (req.getParameter(FINAL_OBSERVATION) != null
				&& !req.getParameter(FINAL_OBSERVATION).equals("")) {
			masMedicalBoardProceedings.setFinalObservation(req
					.getParameter(FINAL_OBSERVATION));
		}
		if (req.getParameter(SIGNED_BY) != null
				&& !req.getParameter(SIGNED_BY).equals("")) {
			masMedicalBoardProceedings.setSignedBy(req
					.getParameter(SIGNED_BY));
		}
		if (req.getParameter(APPROVED_BY) != null
				&& !req.getParameter(APPROVED_BY).equals("")) {
			masMedicalBoardProceedings.setApprovedBy(req
					.getParameter(APPROVED_BY));
		}
		String admissionStatus = "";
		String specialistOpinion = "";
		if (req.getParameter("admissionStatus") != null) {
			admissionStatus = "y";
		} else {
			admissionStatus = "n";

		}

		if (req.getParameter("specialistOpinion") != null) {
			specialistOpinion = "y";
		} else {
			specialistOpinion = "n";

		}

		masMedicalBoardProceedings.setAdmissionStatus(admissionStatus);
		masMedicalBoardProceedings
				.setSpecialistOpinnionStatus(specialistOpinion);

		if (req.getParameter("liver") != null
				&& !req.getParameter("liver").equals("")) {
			masMedicalBoardProceedings.setLiver(req.getParameter("liver"));
		}
		if (req.getParameter("spleen") != null
				&& !req.getParameter("spleen").equals("")) {
			masMedicalBoardProceedings
					.setSpleen(req.getParameter("spleen"));
		}
		if (req.getParameter("upperLimbs") != null
				&& !req.getParameter("upperLimbs").equals("")) {
			masMedicalBoardProceedings.setUpperLimbs(req
					.getParameter("upperLimbs"));
		}
		if (req.getParameter("locomotion") != null
				&& !req.getParameter("locomotion").equals("")) {
			masMedicalBoardProceedings.setLocomotion(req
					.getParameter("locomotion"));
		}
		if (req.getParameter("chestMeasurement") != null
				&& !req.getParameter("chestMeasurement").equals("")) {
			masMedicalBoardProceedings.setChestMeasurement(req
					.getParameter("chestMeasurement"));
		}
		if (req.getParameter("fullExpiration") != null
				&& !req.getParameter("fullExpiration").equals("")) {
			masMedicalBoardProceedings.setFullExpiration(req
					.getParameter("fullExpiration"));
		}
		if (req.getParameter("abnormalities") != null
				&& !req.getParameter("abnormalities").equals("")) {
			masMedicalBoardProceedings.setAbnormalities(req
					.getParameter("abnormalities"));
		}
		if (req.getParameter("otherAbnormalities") != null
				&& !req.getParameter("otherAbnormalities").equals("")) {
			masMedicalBoardProceedings.setAnyOtheAbnormalities(req
					.getParameter("otherAbnormalities"));
		}
		if (req.getParameter("anyEvidenceOfSkin") != null
				&& !req.getParameter("anyEvidenceOfSkin").equals("")) {
			masMedicalBoardProceedings.setAnyEvidenceOfSkin(req
					.getParameter("anyEvidenceOfSkin"));
		}
		if (req.getParameter("centralNervousSystem") != null
				&& !req.getParameter("centralNervousSystem").equals("")) {
			masMedicalBoardProceedings.setCentralNervousSystem(req
					.getParameter("centralNervousSystem"));
		}
		if (req.getParameter("mentalInstability") != null
				&& !req.getParameter("mentalInstability").equals("")) {
			masMedicalBoardProceedings.setMentalInstability(req
					.getParameter("mentalInstability"));
		}
		if (req.getParameter("essentialInstability") != null
				&& !req.getParameter("essentialInstability").equals("")) {
			masMedicalBoardProceedings.setEssentialInstability(req
					.getParameter("essentialInstability"));
		}
		if (req.getParameter("smoker") != null
				&& !req.getParameter("smoker").equals("")) {
			masMedicalBoardProceedings
					.setSmoker(req.getParameter("smoker"));
		}
		if (req.getParameter("drinker") != null
				&& !req.getParameter("drinker").equals("")) {
			masMedicalBoardProceedings.setDrinker(req
					.getParameter("drinker"));
		}
		if (req.getParameter("allergies") != null
				&& !req.getParameter("allergies").equals("")) {
			masMedicalBoardProceedings.setAllergies(req
					.getParameter("allergies"));
		}
		if (req.getParameter("locomoterSystem") != null
				&& !req.getParameter("locomoterSystem").equals("")) {
			masMedicalBoardProceedings.setLocomoterSystem(req
					.getParameter("locomoterSystem"));
		}
		if (req.getParameter("spine") != null
				&& !req.getParameter("spine").equals("")) {
			masMedicalBoardProceedings.setSpine(req.getParameter("spine"));
		}
		if (req.getParameter("tympanicMembranceIntact") != null
				&& !req.getParameter("tympanicMembranceIntact").equals("")) {
			masMedicalBoardProceedings.setTympanicMembranceIntact(req
					.getParameter("tympanicMembranceIntact"));
		}
		if (req.getParameter(MOBILITYR) != null
				&& !req.getParameter(MOBILITYR).equals("")) {
			masMedicalBoardProceedings.setMobilityR(req
					.getParameter(MOBILITYR));
		}
		if (req.getParameter("noseThroatSinuses") != null
				&& !req.getParameter("noseThroatSinuses").equals("")) {
			masMedicalBoardProceedings.setNoseThroatSinuses(req
					.getParameter("noseThroatSinuses"));
		}
		if (req.getParameter(KNOWN_ALLERGY) != null
				&& !req.getParameter(KNOWN_ALLERGY).equals("")) {
			masMedicalBoardProceedings.setAllergies(req
					.getParameter(KNOWN_ALLERGY));
		}
		if (req.getParameter(BATCH_NO) != null
				&& !req.getParameter(BATCH_NO).equals("")) {
			masMedicalBoardProceedings.setBatchNo(req
					.getParameter(BATCH_NO));
		}
		if (req.getParameter("cmMdRemarks") != null
				&& !req.getParameter("cmMdRemarks").equals("")) {
			masMedicalBoardProceedings.setMdRemarks(req
					.getParameter("cmMdRemarks"));
		}
		if (req.getParameter(AUTHORITY_OF_BOARD) != null
				&& !req.getParameter(AUTHORITY_OF_BOARD).equals("")) {
			masMedicalBoardProceedings.setAuthority(req
					.getParameter(AUTHORITY_OF_BOARD));
		}
		if (req.getParameter(PLACE) != null
				&& !req.getParameter(PLACE).equals("")) {
			masMedicalBoardProceedings.setPlace(req.getParameter(PLACE));
		}
		if (req.getParameter(DATE_DISCHARGE) != null
				&& !req.getParameter(DATE_DISCHARGE).equals("")) {
			masMedicalBoardProceedings.setDateDischarge(HMSUtil
					.convertStringTypeDateToDateType(req
							.getParameter(DATE_DISCHARGE)));
		}
		if (req.getParameter(DATE_OF_RELEASE) != null
				&& !req.getParameter(DATE_OF_RELEASE).equals("")) {
			masMedicalBoardProceedings.setDateRelease(HMSUtil
					.convertStringTypeDateToDateType(req
							.getParameter(DATE_OF_RELEASE)));
		}
		if (req.getParameter(MARITAL_STATUS_ID) != null
				&& !req.getParameter(MARITAL_STATUS_ID).equals("")) {
			MasMaritalStatus maritalstatus = new MasMaritalStatus();
			maritalstatus.setId(Integer.parseInt(req
					.getParameter(MARITAL_STATUS_ID)));
			masMedicalBoardProceedings.setMaritalStatus(maritalstatus);

		}

		// if(req.getParameter(SERVICE_TYPE_ID) != null &&
		// !req.getParameter(SERVICE_TYPE_ID).equals("")){
		// masMedicalBoardProceedings.setBatchNo(req.getParameter(SERVICE_TYPE_ID));
		// }
		if (req.getParameter(DATE_DISEASE) != null
				&& !req.getParameter(DATE_DISEASE).equals("")) {
			masMedicalBoardProceedings.setDateDisease(HMSUtil
					.convertStringTypeDateToDateType(req
							.getParameter(DATE_DISEASE)));
		}
		if (req.getParameter(PLACE_DISEASE) != null
				&& !req.getParameter(PLACE_DISEASE).equals("")) {
			masMedicalBoardProceedings.setPlacedisease(req
					.getParameter(PLACE_DISEASE));
		}
		if (req.getParameter(WHERE_TREATED) != null
				&& !req.getParameter(WHERE_TREATED).equals("")) {
			masMedicalBoardProceedings.setWheretreated(req
					.getParameter(WHERE_TREATED));
		}
		if (req.getParameter(DATE_APPROXIMATE) != null
				&& !req.getParameter(DATE_APPROXIMATE).equals("")) {
			masMedicalBoardProceedings.setDateapproximate(HMSUtil
					.convertStringTypeDateToDateType(req
							.getParameter(DATE_APPROXIMATE)));
		}
		if (req.getParameter(DISABILITY_BEFORE) != null
				&& !req.getParameter(DISABILITY_BEFORE).equals("")) {
			masMedicalBoardProceedings.setDisabilitybefore(req
					.getParameter(DISABILITY_BEFORE));
		}
		if (req.getParameter(CLAMING_DISABILITY) != null
				&& !req.getParameter(CLAMING_DISABILITY).equals("")) {
			masMedicalBoardProceedings.setClamingdisability(req
					.getParameter(CLAMING_DISABILITY));
		}
		if (req.getParameter(DATE_DISCHARGE) != null
				&& !req.getParameter(DATE_DISCHARGE).equals("")) {
			masMedicalBoardProceedings.setDateDischarge(HMSUtil
					.convertStringTypeDateToDateType(req
							.getParameter(DATE_DISCHARGE)));
		}
		if (req.getParameter(UPLOADED_DATE) != null
				&& !req.getParameter(UPLOADED_DATE).equals("")) {
			masMedicalBoardProceedings.setUploadeddate(HMSUtil
					.convertStringTypeDateToDateType(req
							.getParameter(UPLOADED_DATE)));
		}
		if (req.getParameter(CONDITION_OF_GUMS) != null
				&& !req.getParameter(CONDITION_OF_GUMS).equals("")) {
			masMedicalBoardProceedings.setConditionOfGums(req
					.getParameter(CONDITION_OF_GUMS));
		}
		if (req.getParameter(TYMPANIC_L) != null
				&& !req.getParameter(TYMPANIC_L).equals("")) {
			masMedicalBoardProceedings.setTympanicL(req
					.getParameter(TYMPANIC_L));
		}
		if (req.getParameter(TYMPANIC_R) != null
				&& !req.getParameter(TYMPANIC_R).equals("")) {
			masMedicalBoardProceedings.setTympanicR(req
					.getParameter(TYMPANIC_R));
		}
		if (req.getParameter(MOBILITYL) != null
				&& !req.getParameter(MOBILITYL).equals("")) {
			masMedicalBoardProceedings.setMobilityL(req
					.getParameter(MOBILITYL));
		}
		if (req.getParameter(NOSE_THROAT) != null
				&& !req.getParameter(NOSE_THROAT).equals("")) {
			masMedicalBoardProceedings.setNosethroat(req
					.getParameter(NOSE_THROAT));
		}
		if (req.getParameter(DATE_OF_AME) != null
				&& !req.getParameter(DATE_OF_AME).equals("")) {
			masMedicalBoardProceedings
					.setDateMedicalBoardSubsequent(HMSUtil
							.convertStringTypeDateToDateType(req
									.getParameter(DATE_OF_AME)));
		}
		if (req.getParameter("MissTeeth") != null
				&& !req.getParameter("MissTeeth").equals("")) {
			masMedicalBoardProceedings.setMissTeeth(req
					.getParameter("MissTeeth"));
		}
		if (req.getParameter("UnserTeeth") != null
				&& !req.getParameter("UnserTeeth").equals("")) {
			masMedicalBoardProceedings.setUnserTeeth(req
					.getParameter("UnserTeeth"));
		}
		if (req.getParameter("Investigated") != null
				&& !req.getParameter("Investigated").equals("")) {
			masMedicalBoardProceedings.setInvestigated(req
					.getParameter("Investigated"));
		}

		int patientInvestigationHeaderId = 0;
		if (req.getParameter("patientInvestigationHeaderId") != null
				&& !req.getParameter("patientInvestigationHeaderId")
						.equals("")) {
			patientInvestigationHeaderId = Integer.parseInt(req
					.getParameter("patientInvestigationHeaderId"));
		}
		int dgOrderhdId = 0;
		if (req.getParameter("dgOrderhdId") != null
				&& !req.getParameter("dgOrderhdId").equals("")) {
			dgOrderhdId = Integer.parseInt(req.getParameter("dgOrderhdId"));
		}

		/**
		 * Added By Mansi
		 */
		if(req.getParameter("sd") != null && !req.getParameter("sd").equals("")){
			masMedicalBoardProceedings.setSD(req.getParameter("sd"));
		}
		/**
		 * End
		 */
		
		String medicaltype = masMedicalBoardProceedings
				.getMedicalExamType();

		MasMedicalExaminationDetail medicaldetail = new MasMedicalExaminationDetail();
		int temp1 = 1;
		List<Integer> serialnolist = new ArrayList<Integer>();
		List<String> fromlist = new ArrayList<String>();
		List<String> tolist = new ArrayList<String>();
		List<String> placelist = new ArrayList<String>();
		List<String> pnolist = new ArrayList<String>();
		List<Integer> serialnolist1 = new ArrayList<Integer>();
		List<String> illnesslist = new ArrayList<String>();
		List<Date> particulardatelist = new ArrayList<Date>();
		List<Integer> rankidlist = new ArrayList<Integer>();
		List<String> treatedlist = new ArrayList<String>();
		List<Date> approximatedatelist = new ArrayList<Date>();
		List<Date> approximatedate2list = new ArrayList<Date>();
		List<String> placelist1 = new ArrayList<String>();
		List<String> principallist = new ArrayList<String>();
		List<Date> origindatelist = new ArrayList<Date>();
		List<Date> medicalcatdatelist = new ArrayList<Date>();
		List<Date> nextcatdatelist = new ArrayList<Date>();
		int k = 0;
		int hdbvalue = 1;
		if (req.getParameter("dentalValue") != null
				&& !req.getParameter("dentalValue").equals("")) {
			masMedicalBoardProceedings.setDentalValue(req
					.getParameter("dentalValue"));
		}
		if (req.getParameter(PAST_MEDICAL_CATEGORY) != null
				&& !(req.getParameter(PAST_MEDICAL_CATEGORY)).equals("0")) {
			Category categ1 = new Category();
			categ1.setCategoryid(Integer.parseInt(req
					.getParameter(PAST_MEDICAL_CATEGORY)));
			masMedicalBoardProceedings.setPastMedicalCategory(categ1);
		}
		if (req.getParameter(PRESENT_MEDICAL_CATEGORY) != null
				&& !(req.getParameter(PRESENT_MEDICAL_CATEGORY))
						.equals("0")) {
			Category categ2 = new Category();
			categ2.setCategoryid(Integer.parseInt(req
					.getParameter(PRESENT_MEDICAL_CATEGORY)));
			masMedicalBoardProceedings.setPresentMedicalCategory(categ2);
		}
		if (medicaltype.equalsIgnoreCase("Medical Board AFMSF 16")) {

			if (Integer.parseInt(req.getParameter("hdb")) != 1) {
				hdbvalue = Integer.parseInt(req.getParameter("hdb"));
			}
			for (int i = 1; i <= hdbvalue; i++) {
				// ---if condition added by dipali
				if (req.getParameter(FROM + i) != null
						&& !req.getParameter(FROM + i).equals("")) {
					if (req.getParameter(SIRIAL_NO + temp1) == "") {
						serialnolist.add(k);
					} else if (req.getParameter(SIRIAL_NO + i) != null
							&& !req.getParameter(SIRIAL_NO + i).equals("")) {
						serialnolist.add(Integer.parseInt(req
								.getParameter(SIRIAL_NO + i)));
					} else {
						serialnolist.add(0);
					}

					if (req.getParameter(FROM + i) != null
							&& !req.getParameter(FROM + i).equals("")) {
						fromlist.add(req.getParameter(FROM + i));
					} else {
						fromlist.add("");
					}

					if (req.getParameter(TO + i) != null
							&& !req.getParameter(TO + i).equals("")) {
						tolist.add(req.getParameter(TO + i));
					} else {
						tolist.add("");
					}
					if (req.getParameter(PLACE + i) != null
							&& !req.getParameter(PLACE + i).equals("")) {
						placelist.add(req.getParameter(PLACE + i));
					} else {
						placelist.add("");
					}
					if (req.getParameter(P_NO + i) != null
							&& !req.getParameter(P_NO + i).equals("")) {
						pnolist.add(req.getParameter(P_NO + i));
					} else {
						pnolist.add("");
					}
					/*
					 * if(req.getParameter(PRINCIPAL+ i) != null ){
					 * principallist.add(req.getParameter(PRINCIPAL+ i));
					 * }else{ principallist.add(""); }
					 * if(req.getParameter(ORIGIN_DATE+ i) != null &&
					 * (!req.getParameter(ORIGIN_DATE+ i).equals(""))){
					 * origindatelist
					 * .add(HMSUtil.convertStringTypeDateToDateType
					 * (req.getParameter(ORIGIN_DATE+ i))); }else{
					 * origindatelist.add(null); }
					 * if(req.getParameter(MEDICAL_CAT_DATE+ i) != null
					 * &&(!req.getParameter(MEDICAL_CAT_DATE+
					 * i).equals(""))){medicalcatdatelist.add(HMSUtil.
					 * convertStringTypeDateToDateType
					 * (req.getParameter(MEDICAL_CAT_DATE+ i))); }else{
					 * medicalcatdatelist.add(null); }
					 * if(req.getParameter(NEXT_CAT_DATE+ i) != null
					 * &&(!req.getParameter(NEXT_CAT_DATE+ i).equals(""))){
					 * nextcatdatelist
					 * .add(HMSUtil.convertStringTypeDateToDateType
					 * (req.getParameter(NEXT_CAT_DATE+ i))); }else{
					 * nextcatdatelist.add(null); }
					 */
					// temp1=temp1+1;
				}
			}
		}
		mapForDS.put("hdbvalue", hdbvalue);
		mapForDS.put("hiddenValue", hiddenValue);
		mapForDS.put("serialnolist", serialnolist);
		mapForDS.put("fromlist", fromlist);
		mapForDS.put("tolist", tolist);
		mapForDS.put("placelist", placelist);
		mapForDS.put("pnolist", pnolist);
		mapForDS.put("principallist", principallist);
		mapForDS.put("origindatelist", origindatelist);
		mapForDS.put("medicalcatdatelist", medicalcatdatelist);
		mapForDS.put("nextcatdatelist", nextcatdatelist);
		List<String> beforeDisabilitylist = new ArrayList<String>();
		List<Integer> illnessICDlist = new ArrayList<Integer>();
		int hdbvalue1 = 1;
		int hiddenValue1 = 1;
		if (medicaltype.equalsIgnoreCase("Medical Board AFMSF 16")) {
			if (Integer.parseInt(req.getParameter("hdb1")) != 1) {
				hdbvalue1 = Integer.parseInt(req.getParameter("hdb1"));
			}
			int temp2 = 1;
			for (int i = 1; i <= hdbvalue1; i++) {
				// ---if condition added by dipali
				if (req.getParameter(ILLNESS + i) != null
						&& !req.getParameter(ILLNESS + i).equals("")) {
					if (req.getParameter(SIRIAL_NO1 + i) == "") {
						serialnolist1.add(k);
					} else if (req.getParameter(SIRIAL_NO1 + i) != null
							&& !req.getParameter(SIRIAL_NO1 + i).equals("")) {
						serialnolist1.add(Integer.parseInt(req
								.getParameter(SIRIAL_NO1 + i)));
					} else {
						serialnolist1.add(0);
					}
					String str = "";
					if (req.getParameter(ILLNESS + i) != null) {
						// illnesslist.add(req.getParameter(ILLNESS+ i));
						str = req.getParameter(ILLNESS + i);
					} else {
						// illnesslist.add("");
						str = "";
					}

					int icdId = 0;
					if (str != "") {
						String illness = "";
						int lastIndex = str.indexOf("[");
						if (lastIndex > 0) {
							illness = str.substring(0, lastIndex);
							illnesslist.add(illness);
						} else {
							illness = str;
							illnesslist.add("");
						}
						int index1 = str.lastIndexOf("[");
						int index2 = str.lastIndexOf("]");
						// icdId
						// =Integer.parseInt(str.substring((index1+1),index2));
						try {
							icdId = Integer.parseInt(str.substring(
									(index1 + 1), index2));
						} catch (NumberFormatException e) {

							e.printStackTrace();
						}
						illnessICDlist.add(icdId);
					} else {
						illnessICDlist.add(icdId);
						illnesslist.add("");
					}
					if (req.getParameter(PARTICULAR_DATE + i) != null
							&& (!req.getParameter(PARTICULAR_DATE + i)
									.equals(""))) {
						particulardatelist
								.add(HMSUtil
										.convertStringTypeDateToDateType(req
												.getParameter(PARTICULAR_DATE
														+ i)));
					} else {
						particulardatelist.add(null);
					}
					if (req.getParameter(RANK_INDIVIDUAL_ID + i) != null) {
						rankidlist.add(Integer.parseInt(req
								.getParameter(RANK_INDIVIDUAL_ID + i)));
					} else {
						rankidlist.add(0);
					}
					if (req.getParameter(TREATED + i) != null) {
						treatedlist.add(req.getParameter(TREATED + i));
					} else {
						treatedlist.add("");
					}
					if (req.getParameter(PLACE1 + i) != null) {
						placelist1.add(req.getParameter(PLACE1 + i));
					} else {
						placelist1.add("");
					}
					if (req.getParameter(APPROXIMATE_DATE + i) != null
							&& (!req.getParameter(APPROXIMATE_DATE + i)
									.equals(""))) {
						approximatedatelist
								.add(HMSUtil
										.convertStringTypeDateToDateType(req
												.getParameter(APPROXIMATE_DATE
														+ i)));
					} else {
						approximatedatelist.add(null);
					}
					if (req.getParameter(APPROXIMATE_DATE2 + i) != null
							&& (!req.getParameter(APPROXIMATE_DATE2 + i)
									.equals(""))) {
						approximatedate2list
								.add(HMSUtil
										.convertStringTypeDateToDateType(req
												.getParameter(APPROXIMATE_DATE2
														+ i)));
					} else {
						approximatedate2list.add(null);
					}
					if (req.getParameter("beforeDisability" + i) != null) {
						beforeDisabilitylist.add(req
								.getParameter("beforeDisability" + i));
					} else {
						beforeDisabilitylist.add("n");
					}
					// temp2=temp2+1;
				}
			}
			mapForDS.put("illnessICDlist", illnessICDlist);
			mapForDS.put("hdbvalue1", hdbvalue1);
			mapForDS.put("hiddenValue1", hiddenValue1);
			mapForDS.put("serialnolist1", serialnolist1);
			mapForDS.put("illnesslist", illnesslist);
			mapForDS.put("particulardatelist", particulardatelist);
			mapForDS.put("rankidlist", rankidlist);
			mapForDS.put("treatedlist", treatedlist);
			mapForDS.put("approximatedatelist", approximatedatelist);
			mapForDS.put("approximatedate2list", approximatedate2list);
			mapForDS.put("placelist1", placelist1);
			mapForDS.put("beforeDisabilitylist", beforeDisabilitylist);

			/*
			 * Code for Disability Before Service Date 27 Feb 2012
			 */
			List<Integer> serialnoBeforeList = new ArrayList<Integer>();
			List<String> illnessBeforeList = new ArrayList<String>();
			List<Date> particulardateBeforeList = new ArrayList<Date>();
			List<String> treatedBeforeList = new ArrayList<String>();
			List<String> placeBeforeList = new ArrayList<String>();
			List<String> beforeDisabilityBeforeList = new ArrayList<String>();
			List<Integer> illnessICDBeforelist = new ArrayList<Integer>();
			int hdbBefore = 1;

			if (Integer.parseInt(req.getParameter("hdbBefore")) != 1) {
				hdbBefore = Integer.parseInt(req.getParameter("hdbBefore"));
			}
			for (int i = 1; i <= hdbBefore; i++) {
				// ---if condition added by dipali
				if (req.getParameter(ILLNESS + "1" + i) != null
						&& !req.getParameter(ILLNESS + "1" + i).equals("")) {
					if (req.getParameter(SIRIAL_NO1 + "1" + i) == "") {
						serialnoBeforeList.add(i);
					} else if (req.getParameter(SIRIAL_NO1 + "1" + i) != null
							&& !req.getParameter(SIRIAL_NO1 + i).equals("")) {
						serialnoBeforeList.add(Integer.parseInt(req
								.getParameter(SIRIAL_NO1 + "1" + i)));
					} else {
						serialnoBeforeList.add(0);
					}
					String beforeStr = "";
					if (req.getParameter(ILLNESS + "1" + i) != null) {
						beforeStr = req.getParameter(ILLNESS + "1" + i);
					} else {
						// illnessBeforeList.add("");
						beforeStr = "";
					}

					int icdId = 0;
					if (beforeStr != "") {
						String illness = "";
						int lastIndex = beforeStr.indexOf("[");
						if (lastIndex > 0) {
							illness = beforeStr.substring(0, lastIndex);
							illnessBeforeList.add(illness);
						} else {
							illness = beforeStr;
							illnessBeforeList.add("");
						}
						int index1 = beforeStr.lastIndexOf("[");
						int index2 = beforeStr.lastIndexOf("]");
						// icdId
						// =Integer.parseInt(beforeStr.substring((index1+1),index2));
						try {
							icdId = Integer.parseInt(beforeStr.substring(
									(index1 + 1), index2));
						} catch (NumberFormatException e) {

							e.printStackTrace();
						}
						illnessICDBeforelist.add(icdId);
					} else {
						illnessICDBeforelist.add(icdId);
						illnessBeforeList.add("");
					}

					if (req.getParameter(PARTICULAR_DATE + "1" + i) != null
							&& (!req
									.getParameter(PARTICULAR_DATE + "1" + i)
									.equals(""))) {
						particulardateBeforeList.add(HMSUtil
								.convertStringTypeDateToDateType(req
										.getParameter(PARTICULAR_DATE + "1"
												+ i)));
					} else {
						particulardateBeforeList.add(null);
					}
					if (req.getParameter(TREATED + "1" + i) != null) {
						treatedBeforeList.add(req.getParameter(TREATED
								+ "1" + i));
					} else {
						treatedBeforeList.add("");
					}
					if (req.getParameter(PLACE1 + "1" + i) != null) {
						placeBeforeList.add(req.getParameter(PLACE1 + "1"
								+ i));
					} else {
						placeBeforeList.add("");
					}
					if (req.getParameter("beforeDisability" + "1" + i) != null) {
						beforeDisabilityBeforeList
								.add(req.getParameter("beforeDisability"
										+ "1" + i));
					} else {
						beforeDisabilityBeforeList.add("y");
					}
				}
			}
			mapForDS.put("illnessICDBeforelist", illnessICDBeforelist);
			mapForDS.put("hdbBefore", hdbBefore);
			mapForDS.put("serialnoBeforeList", serialnoBeforeList);
			mapForDS.put("illnessBeforeList", illnessBeforeList);
			mapForDS.put("particulardateBeforeList",
					particulardateBeforeList);
			mapForDS.put("treatedBeforeList", treatedBeforeList);
			mapForDS.put("placeBeforeList", placeBeforeList);
			mapForDS.put("beforeDisabilityBeforeList",
					beforeDisabilityBeforeList);

			/*
			 * End of Code for Disability Before Service Date 27 Feb 2012
			 */
		}
		/*
		 * Code for Disability Date 01 March 2012
		 */

		int hdbDisability = 1;

		if (Integer.parseInt(req.getParameter("hdbDisability")) != 1) {
			hdbDisability = Integer.parseInt(req
					.getParameter("hdbDisability"));
		}
		List<MasMedicalExaminationDetail> masMedicalExaminationDetailsDisabilityList = new ArrayList<MasMedicalExaminationDetail>();
		for (int i = 1; i <= hdbDisability; i++) {
			MasMedicalExaminationDetail masMedicalExaminationDetail = new MasMedicalExaminationDetail();
			String str = "";
			if (req.getParameter("systemDiagnosis" + i) != null) {
				str = req.getParameter("systemDiagnosis" + i);
			} else {
				str = "";
			}
			/*
			 * if(req.getParameter("icdDisability"+i) != null ){
			 * str=req.getParameter("icdDisability"+i); }else{ str=""; }
			 */
			if (str != "") {
				String systemDiagnosis = "";
				int lastIndex = str.indexOf("[");
				if (lastIndex > 0) {
					systemDiagnosis = str.substring(0, lastIndex);
				} else {
					systemDiagnosis = str;
				}
				int index1 = str.lastIndexOf("[");
				int index2 = str.lastIndexOf("]");
				int icdId = 0;
				// int icdId
				// =Integer.parseInt(str.substring((index1+1),index2));
				try {
					icdId = Integer.parseInt(str.substring((index1 + 1),
							index2));
				} catch (NumberFormatException e) {

					e.printStackTrace();
				}
				
				if(icdId>0){ 
					MasIcd masIcd=new MasIcd();
					masIcd.setId(icdId);
					masMedicalExaminationDetail.setMasIcd(masIcd); 
				}
				 

				/*if (icdId > 0) {
					MasSystemDiagnosis sysDiagnosis = new MasSystemDiagnosis();
					sysDiagnosis.setId(icdId);
					masMedicalExaminationDetail
							.setSystemDiagnosis(sysDiagnosis);
				}*/
				masMedicalExaminationDetail.setPrincipal(systemDiagnosis);
				// masMedicalExaminationDetail.setParticular("Disability");
				masMedicalExaminationDetail.setParticular("detail");
				masMedicalExaminationDetailsDisabilityList
						.add(masMedicalExaminationDetail);
			}
		}

		mapForDS.put("masMedicalExaminationDetailsDisabilityList",
				masMedicalExaminationDetailsDisabilityList);
		/*
		 * End of Code for Disability Date 01 March 2012
		 */

		/**
		 * Code By Dipali Date 18 June 2012
		 */
		if (req.getParameter("medicalOfficer") != null
				&& !(req.getParameter("medicalOfficer").equals("0"))) {
			MasEmployee employee = new MasEmployee();
			employee.setId(Integer.parseInt(req
					.getParameter("medicalOfficer")));
			masMedicalBoardProceedings.setForwardMO(employee);
		}
		/**
		 * End
		 */

		Users moUser = new Users();
		moUser.setId(userId);
		masMedicalBoardProceedings.setMoUser(moUser);

		MasHospital hospital = new MasHospital();
		hospital.setId(hospitalId);
		masMedicalBoardProceedings.setHospital(hospital);

		MasCommand command = new MasCommand();
		command.setId(commandId);
		masMedicalBoardProceedings.setCommand(command);

		// if(req.getParameter("Labresult").equalsIgnoreCase("present")){
		/*
		 * commented by Dipali for maintaing status for mo
		 * 
		 * if(req.getParameter("Labresult").equalsIgnoreCase("present")&&
		 * data!=null) {
		 * 
		 * masMedicalBoardProceedings.setStatus("m");
		 * masMedicalBoardProceedings.setModate(new Date()); }else
		 * if(!masMedicalBoardProceedings
		 * .getStatus().equalsIgnoreCase("m")){
		 * masMedicalBoardProceedings.setStatus("p"); }
		 */
		// ----Added by dipali for maintaing status for mo
		if (req.getParameter("Labresult").equalsIgnoreCase("present")
				&& data != null) {
			if (data.equalsIgnoreCase("farwarded")) {
				// masMedicalBoardProceedings.setStatus("f");
				masMedicalBoardProceedings.setStatus("s");
			} else {
				masMedicalBoardProceedings.setStatus("p");
			}
			masMedicalBoardProceedings.setModate(new Date());
		} else if (!masMedicalBoardProceedings.getStatus()
				.equalsIgnoreCase("p")) {
			// masMedicalBoardProceedings.setStatus("p");
		}
		String investigationDataStatus = null;
		if (req.getParameter("investigationDataStatus") != null) {
			investigationDataStatus = req
					.getParameter("investigationDataStatus");
		}

		if (req.getParameter("investigationReferToMH" + temp) != null
				&& !req.getParameter("investigationReferToMH" + temp)
						.equals("")) {
			investigationReferToMH = (req
					.getParameter("investigationReferToMH" + temp));
		}

		String incidents_during_your_service = "";
		String reasonWoundInjury = "";
		String MED_BOARD_HELD = "";
		String INJURY_REPORT = "";
		if (req.getParameter("incidents_during_your_service") != null
				&& !req.getParameter("incidents_during_your_service")
						.equals("")) {
			incidents_during_your_service = req
					.getParameter("incidents_during_your_service");
		}
		if (req.getParameter("reasonWoundInjury") != null
				&& !req.getParameter("reasonWoundInjury").equals("")) {
			reasonWoundInjury = req.getParameter("reasonWoundInjury");
		}
		if (req.getParameter("MED_BOARD_HELD") != null
				&& !req.getParameter("MED_BOARD_HELD").equals("")) {
			MED_BOARD_HELD = req.getParameter("MED_BOARD_HELD");
		}
		if (req.getParameter("INJURY_REPORT") != null
				&& !req.getParameter("INJURY_REPORT").equals("")) {
			INJURY_REPORT = req.getParameter("INJURY_REPORT");
		}
		masMedicalBoardProceedings
				.setIncidentsDuringYourService(incidents_during_your_service);
		masMedicalBoardProceedings.setReasonWoundInjury(reasonWoundInjury);

		masMedicalBoardProceedings.setMedBoardHeld(MED_BOARD_HELD);
		masMedicalBoardProceedings.setInjuryReport(INJURY_REPORT);
		masMedicalBoardProceedings.setPlace(place);
		masMedicalBoardProceedings.setMedicalType("MedicalBoard");
		mapForDS.put("masMedicalBoardProceedings",
				masMedicalBoardProceedings);
		mapForDS.put("chargeCodeIdList", chargeCodeIdList);
		mapForDS.put("investigationReferToMHList",
				investigationReferToMHList);
		mapForDS.put("investResultList", investResultList);
		mapForDS.put("investigationDataStatus", investigationDataStatus);
		mapForDS.put("quantityList", quantityList);
		mapForDS.put("patientInvestigationdetailsIdList",
				patientInvestigationdetailsIdList);
		mapForDS.put("dgOrderdtIdList", dgOrderdtIdList);
		mapForDS.put("clinicalNotes1", clinicalNotes1);
		mapForDS.put("lastChangedBy", lastChangedBy);
		mapForDS.put("lastChangedDate", lastChangedDate);
		mapForDS.put("lastChangedTime", lastChangedTime);
		mapForDS.put("familyHistoryArray", familyHistoryArray);
		mapForDS.put("hospitalId", hospitalId);
		mapForDS.put("deptId", deptId);
		mapForDS.put("empId", empId);
		mapForDS.put("userId", userId);
		mapForDS.put("hinId", hinId);
		mapForDS.put("visitId", visitId);
		mapForDS.put("medExamId", medExamId);
		mapForDS.put("data", data);
		mapForDS.put("Labresult", req.getParameter("Labresult"));
		mapForDS.put("patientInvestigationHeaderId",
				patientInvestigationHeaderId);
		mapForDS.put("dgOrderhdId", dgOrderhdId);
		mapForDS.put("investigationReferToMH ", investigationReferToMH);
		successfullyAdded = medicalBoardHandlerService
				.updateMedicalBoardMA16(mapForDS);

		message = "Record Updated Successfully!!";
		jsp = MEDICAL_BOARD_EXAM_MSG;
		System.out.println("data--------->"+data);
		if (!successfullyAdded) {
			message = "Some Problem Occured !!!";
			jsp = MEDICAL_BOARD_ERROR_MSG;
		} else if (data != null) {
			if (req.getParameter("Labresult")
					.equalsIgnoreCase("NotPresent")) {
				message = "Lab Result is not Found ! You Can Forward to Medical Officer After Lab Result.";

			} else {
				message = "Record  Forwarded Successfully !!";
			}

		}

	} else {
		message = "You can forward to Medical Officer only after entering Investigation or Dental Reports";
		jsp = MEDICAL_BOARD_EXAM_MSG;
	}
	String medicalEntryNo = "";
	String medicalEntryNo1 = "";
	String userName = "";
	String userName1 = "";
	jsp += ".jsp";
	map.put("medicalEntryNo", medicalEntryNo);
	map.put("investigationReferToMHList", investigationReferToMHList);
	map.put("medicalEntryNo1", medicalEntryNo1);
	map.put("medicalExamType", req.getParameter("medicalExamType"));
	map.put("contentJsp", jsp);
	map.put("message", message);
	map.put("hinNoForreport", req.getParameter("hinNoForreport"));
	map.put("visitNumberForReport", Integer.parseInt(req
			.getParameter("visitNumberForReport")));
	map.put("serviceNo", serviceNo);
	map.put("visitId", visitId);
	map.put("denatlToMH", denatlToMH);
	map.put("medExamId", medExamId);
	map.put("data", data);
	return new ModelAndView("indexB", "map", map);
}

// -------------------- End addMedicalExam Method
// -----------------------------

public ModelAndView addMedicalBoardMO16(HttpServletRequest req,
		HttpServletResponse res) {
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	String serviceNo = "";
	String rank = "";
	String name = "";
	String unit = "";
	String serviceiaf = "";
	String branch = "";
	Date dob = null;
	String age = "";
	String typeOfCommunication = "";
	Date dateofcommun = null;
	String totalservice = "";
	String pastmedicalhistory = "";
	String presentmedicalhistory = "";
	String idealweight = "";
	String overweight = "";
	String waist = "";
	String chestfullexpansion = "";
	String bhi = "";
	String rangeofexpansion = "";
	String bodyfat = "";
	String signfoldthickness = "";
	String sportman = "";
	String actualweight = "";
	String lastame = "";
	Date entryDate = null;
	Date medicinExamDate = null;
	String lastChangedBy = "";
	String lastChangedTime = "";
	Date lastChangedDate = null;
	Date surgeyDate = null;
	int typeOfEntry = 0;
	String betchNo = "";
	String chestNo = "";
	String rollNo = "";
	int medicalExamHeld = 0;
	String medicalStatus = "";
	String fullName = "";
	Date dateOfBirth = null;
	int maritialStatus = 0;
	String service = "";
	String pNo = "";
	// String rank = "";
	String hoursOfFlown = "";
	String permanentAddress = "";
	String identification1 = "";
	String identification2 = "";
	String armsCrops = "";
	Date dateOfReporting = null;
	Date dateOfCompletion = null;
	Date documentForwardDate = null;
	String documentForwardTo = "";
	String fromWhereHeReport = "";
	String hypertension = "";
	String heartDisease = "";
	String diabetes = "";
	String bleedingDisorder = "";
	String mentalDisease = "";
	String nightBlindness = "";
	String asthama = "";
	String dischargeFrom = "";
	String plesury = "";
	String earDieses = "";
	String rheumatism = "";
	String frequentCough = "";
	String chronicIndigestion = "";
	String nervousBrakdown = "";
	String kidenyBladder = "";
	String fitsFaintinngAttacks = "";
	String std = "";
	String serveHeadInjury = "";
	String joundice = "";
	String sickness = "";
	String breastDisease = "";
	String trachoma = "";
	String amenorrhoea = "";
	String nightbindness = "";
	String menirrhagia = "";
	String laserTeartement = "";
	String pregnancy = "";
	String abortion = "";
	String eyeDisease = "";
	String rejectedAsUnfit = "";
	String dischargeMedicallyUnfit = "";
	String adimmitedInHospitalFirIllness = "";
	String stateNature = "";
	String otherInform = "";
	BigDecimal height = new BigDecimal(0);
	BigDecimal weight = new BigDecimal(0);
	BigDecimal acceptableKg = new BigDecimal(0);
	BigDecimal leglength = new BigDecimal(0);
	String appereance = "";
	String albumin = "";
	String sugar = "";
	String spGraviry = "";
	String hbPercentage = "";
	String physique = "";
	String anyOtherInv = "";
	String skin = "";
	String abdomen = "";
	String heartSize = "";
	String sound = "";
	String rhythm = "";
	String arterialWalls = "";
	String pulseRates = "";
	String bp = "";
	String fullExpension = "";
	String rangeOfExpension = "";
	String selfBalR = "";
	String selfBalL = "";
	String speechMental = "";
	String endocrinCond = "";
	String otherAbnormalities = "";
	String medicinRemarks = "";
	String finger = "";
	String hand = "";
	String wrist = "";
	String elbows = "";
	String shoulderGridles = "";
	String cercival = "";
	String dorsalVertebrate = "";
	String hullux = "";
	String valgus = "";
	String riggus = "";
	String flatFeet = "";
	String joints = "";
	String pelvis = "";
	String gail = "";
	String lumberScaler = "";
	String roccyxVericose = "";
	String hydrocele = "";
	String varicocele = "";
	String underScende = "";
	String hemonhoids = "";
	String herinaMusic = "";
	String breasts = "";
	String surgeryRemarks = "";
	String respatorySystem = "";

	String withGlassesDistantR = "";
	String withglassesDistantL = "";
	String withGlassesNearR = "";
	String withGlassesNearL = "";
	String withGlassesNearCP = "";
	String withoutGlassesDistantR = "";
	String withoutGlassesDistantL = "";
	String withoutGlassesNearR = "";
	String withoutGlassesNearL = "";
	String withoutGlassesNearCP = "";
	BigDecimal convergenceCP = new BigDecimal(0);

	BigDecimal convergenceC = new BigDecimal(0);
	String accommodationR = "";
	String accommodationL = "";
	String eyeRemarks = "";
	Date eyeDate = null;
	BigDecimal hearingRFW = new BigDecimal(0);
	BigDecimal hearingLFW = new BigDecimal(0);
	BigDecimal hearingBothFW = new BigDecimal(0);
	BigDecimal hearingRCV = new BigDecimal(0);
	BigDecimal hearingLCV = new BigDecimal(0);
	BigDecimal hearingBothCV = new BigDecimal(0);

	String innerEarR = "";
	String innerEarL = "";
	String audiometryRecord = "";
	String nose = "";
	String throatEar = "";
	String earReamrks = "";
	Date earDate = null;
	String externalEarR = "";
	String externalEarL = "";
	String middleEarR = "";
	String middleEarL = "";
	String evidienceOfTrachoma = "";
	String binocular = "";
	String manifestHypermetropia = "";
	String coverTest = "";
	String diaphragmTest = "";
	String fundMedia = "";
	String fields = "";
	String nightVisualCapacity = "";

	String dentalRemarks = "";
	String denatlToMH = "no";
	Date dentalDate = null;
	String menstrualHistory = "";
	int noOfPregnancy = 0;
	int noOfAbortion = 0;
	int noOfChildren = 0;
	Date lastCondinement = null;
	String vaginalDischarge = "";
	String prolapse = "";
	String usgAbortion = "";
	String gyanaecologyRemarks = "";
	Date gyanaecologyDate = null;
	String medicalBoardExamination = "";
	int medicalBoardExaminationPlace = 0;
	Date medicalBoardExaminationDate = new Date();
	String subsequentMedicalBoardExam = "";
	int subsequentMedicalBoardExamPlace = 0;
	Date subsequentMedicalBoardExamDate = null;
	String ApprovingAuthority = "";
	int ApprovingAuthorityPlace = 0;
	Date ApprovingAuthorityDate = null;
	Date lmp = null;
	String totalTeeth = "";
	String totalDefectiveTeeth = "";
	String missingTeeth = "";
	String DenstalPoint = "";
	String unserviceableTeeth = "";
	String CocatHicNevreData = "";

	String dur8 = "";
	String dur7 = "";
	String dur6 = "";
	String dur5 = "";
	String dur4 = "";
	String dur3 = "";
	String dur2 = "";
	String dur1 = "";
	String dul8 = "";
	String dul7 = "";
	String dul6 = "";
	String dul5 = "";
	String dul4 = "";
	String dul3 = "";
	String dul2 = "";
	String dul1 = "";
	String dlr8 = "";
	String dlr7 = "";
	String dlr6 = "";
	String dlr5 = "";
	String dlr4 = "";
	String dlr3 = "";
	String dlr2 = "";
	String dlr1 = "";
	String dll8 = "";
	String dll7 = "";
	String dll6 = "";
	String dll5 = "";
	String dll4 = "";
	String dll3 = "";
	String dll2 = "";
	String dll1 = "";
	String mur8 = "";
	String mur7 = "";
	String mur6 = "";
	String mur5 = "";
	String mur4 = "";
	String mur3 = "";
	String mur2 = "";
	String mur1 = "";
	String mul8 = "";
	String mul7 = "";
	String mul6 = "";
	String mul5 = "";
	String mul4 = "";
	String mul3 = "";
	String mul2 = "";
	String mul1 = "";
	String mlr8 = "";
	String mlr7 = "";
	String mlr6 = "";
	String mlr5 = "";
	String mlr4 = "";
	String mlr3 = "";
	String mlr2 = "";
	String mlr1 = "";
	String mll8 = "";
	String mll7 = "";
	String mll6 = "";
	String mll5 = "";
	String mll4 = "";
	String mll3 = "";
	String mll2 = "";
	String mll1 = "";
	String uur8 = "";
	String uur7 = "";
	String uur6 = "";
	String uur5 = "";
	String uur4 = "";
	String uur3 = "";
	String uur2 = "";
	String uur1 = "";
	String uul8 = "";
	String uul7 = "";
	String uul6 = "";
	String uul5 = "";
	String uul4 = "";
	String uul3 = "";
	String uul2 = "";
	String uul1 = "";
	String ulr8 = "";
	String ulr7 = "";
	String ulr6 = "";
	String ulr5 = "";
	String ulr4 = "";
	String ulr3 = "";
	String ulr2 = "";
	String ulr1 = "";
	String ull8 = "";
	String ull7 = "";
	String ull6 = "";
	String ull5 = "";
	String ull4 = "";
	String ull3 = "";
	String ull2 = "";
	String ull1 = "";

	String sur8 = "";
	String sur7 = "";
	String sur6 = "";
	String sur5 = "";
	String sur4 = "";
	String sur3 = "";
	String sur2 = "";
	String sur1 = "";
	String sul8 = "";
	String sul7 = "";
	String sul6 = "";
	String sul5 = "";
	String sul4 = "";
	String sul3 = "";
	String sul2 = "";
	String sul1 = "";

	String slr8 = "";
	String slr7 = "";
	String slr6 = "";
	String slr5 = "";
	String slr4 = "";
	String slr3 = "";
	String slr2 = "";
	String slr1 = "";
	String sll8 = "";
	String sll7 = "";
	String sll6 = "";

	String sll5 = "";
	String sll4 = "";
	String sll3 = "";
	String sll2 = "";
	String sll1 = "";
	HttpSession session = req.getSession();
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	int userId = 0;
	Users user = (Users) session.getAttribute("users");
	userId = user.getId();

	int commandId = (Integer) session.getAttribute("commandId");

	Map<String, Object> map = new HashMap<String, Object>();
	// Box box = HMSUtil.getBox(req);
	MasMedicalExaminationReportOnEntry masMedicalBoardProceedings = new MasMedicalExaminationReportOnEntry();

	Map<String, Object> generalMap = new HashMap<String, Object>();
	List<MasMedicalBoardExaminationDetail> masMedicalBoardDetails = new ArrayList<MasMedicalBoardExaminationDetail>();

	if (req.getParameter(SERVICE_NO) != null) {
		serviceNo = req.getParameter(SERVICE_NO);
	}
	if (req.getParameter(AGE) != null) {
		age = req.getParameter(AGE);
	}
	if (req.getParameter(TOTAL_SERVICE) != null) {
		totalservice = req.getParameter(TOTAL_SERVICE);
	}
	if (req.getParameter("serviceiaf") != null) {
		serviceiaf = req.getParameter("serviceiaf");
	}

	if (req.getParameter("typeOfCommunication") != null) {
		typeOfCommunication = req.getParameter("typeOfCommunication");
	}
	if (req.getParameter(DATE_COMMENCEMENT) != null) {
		dateofcommun = HMSUtil.dateFormatterDDMMYYYY(req
				.getParameter(DATE_COMMENCEMENT));
	}
	if (req.getParameter(PAST_MEDICAL_HISTORY) != null) {
		pastmedicalhistory = req.getParameter(PAST_MEDICAL_HISTORY);
	}
	if (req.getParameter(PRESENT_MEDICAL_CATEGORY) != null) {
		presentmedicalhistory = req.getParameter(PRESENT_MEDICAL_CATEGORY);
	}
	if (req.getParameter(LAST_AME) != null) {
		lastame = req.getParameter(LAST_AME);
	}// if (req.getParameter(HEIGHT_WITHOUT_SHOOSE) != null ) {
	// weight = req.getParameter(HEIGHT_WITHOUT_SHOOSE);
	// }
	if (req.getParameter(ACTUAL_WEIGHT) != null) {
		actualweight = req.getParameter(ACTUAL_WEIGHT);
	}
	if (req.getParameter(IDEAL_WEIGHT) != null) {
		idealweight = req.getParameter(IDEAL_WEIGHT);
	}
	if (req.getParameter(OVER_WEIGHT) != null) {
		overweight = req.getParameter(OVER_WEIGHT);
	}
	if (req.getParameter(WAIST) != null) {
		waist = req.getParameter(WAIST);
	}
	if (req.getParameter(CHEST_FULL) != null) {
		chestfullexpansion = req.getParameter(CHEST_FULL);
	}
	if (req.getParameter(RANGE_EXPANSION) != null) {
		rangeofexpansion = req.getParameter(RANGE_EXPANSION);
	}
	if (req.getParameter(BHI) != null) {
		bhi = req.getParameter(BHI);
	}
	if (req.getParameter(BODY_FAT) != null) {
		bodyfat = req.getParameter(BODY_FAT);
	}
	if (req.getParameter(THICKNESS) != null) {
		signfoldthickness = req.getParameter(THICKNESS);
	}
	if (req.getParameter(SPORTS) != null) {
		sportman = req.getParameter(SPORTS);
	}
	int deptId = 0;
	int empId = 0;
	int hinId = 0;
	int visitId = 0;
	if (req.getParameter("deptId") != null) {
		deptId = Integer.parseInt(req.getParameter("deptId"));
	}
	if (req.getParameter("empId") != null) {
		empId = Integer.parseInt(req.getParameter("empId"));
	}
	if (req.getParameter("hinId") != null) {
		hinId = Integer.parseInt(req.getParameter("hinId"));
	}
	if (req.getParameter("visitId") != null) {
		visitId = Integer.parseInt(req.getParameter("visitId"));
	}
	List<String> chargeCodeIdList = new ArrayList<String>();
	List<Integer> quantityList = new ArrayList<Integer>();
	List<String> investigationReferToMHList = new ArrayList<String>();
	String clinicalNotes1 = "";
	if (req.getParameter("clinicalNotes1") != null
			&& !(req.getParameter("clinicalNotes1").equals(""))) {
		clinicalNotes1 = req.getParameter("clinicalNotes1");
	}

	int hiddenValue = 1;
	if (Integer.parseInt(req.getParameter("hiddenValue")) != 1) {
		hiddenValue = Integer.parseInt(req.getParameter("hiddenValue"));
	}
	String deleatedValue = "";
	if (req.getParameter("deleatedValue") != "") {
		deleatedValue = req.getParameter("deleatedValue");

	}
	mapForDS.put("deleatedValue", deleatedValue);
	int temp = 1;
	List<Integer> patientInvestigationdetailsIdList = new ArrayList<Integer>();
	List<Integer> dgOrderdtIdList = new ArrayList<Integer>();
	String[] chargeCodeIdArr = new String[hiddenValue];
	for (int i = 0; i < hiddenValue; i++) {
		if (req.getParameter("chargeCodeName" + temp) != null
				&& !req.getParameter("chargeCodeName" + temp).equals("")) {

			String chargeCodeNameWithId = req.getParameter("chargeCodeName"
					+ temp);
			int index1 = chargeCodeNameWithId.lastIndexOf("[");
			int index2 = chargeCodeNameWithId.lastIndexOf("]");
			index1++;
			String chargeCodeId = chargeCodeNameWithId.substring(index1,
					index2);
			if (!chargeCodeId.equals("")) {
				chargeCodeIdArr[i] = chargeCodeId;
				int qty = 1;

				if (req.getParameter("investigationReferToMH" + temp) != null
						&& !req.getParameter(
								"investigationReferToMH" + temp).equals("")) {
					investigationReferToMHList.add(req
							.getParameter("investigationReferToMH" + temp));
				} else {
					investigationReferToMHList.add("n");
				}
				// int
				// qty=Integer.parseInt(request.getParameter("qty"+temp));
				// String clinicalNotes =
				// request.getParameter("clinicalNotes" + temp);

				chargeCodeIdList.add(chargeCodeIdArr[i]);
				quantityList.add(qty);
				// clinicalList.add(clinicalNotes);
			}
		}
		if (req.getParameter("patientInvestigationdetailsId" + temp) != null
				&& !req
						.getParameter(
								"patientInvestigationdetailsId" + temp)
						.equals("")) {
			patientInvestigationdetailsIdList.add(Integer.parseInt(req
					.getParameter("patientInvestigationdetailsId" + temp)));
		}
		if (req.getParameter("dgOrderdtId" + temp) != null
				&& !req.getParameter("dgOrderdtId" + temp).equals("")) {
			dgOrderdtIdList.add(Integer.parseInt(req
					.getParameter("dgOrderdtId" + temp)));
		}
		temp++;
	}

	// ----------------------------------------------------------------------------------------------
	String alcohol = "";
	if (req.getParameter("alcohol") != null
			&& !req.getParameter("alcohol").equals("")) {
		alcohol = req.getParameter("alcohol");
	}

	// -----------------------------------------------------------------------
	String[] familyHistoryArray = null;
	if (req.getParameterValues(FM_DM) != null
			&& !(req.getParameterValues(FM_DM).equals(""))) {
		familyHistoryArray = (String[]) req.getParameterValues(FM_DM);
	}
	String otherFamilyHistory = "";
	if (req.getParameter("otherFamilyHistory") != null) {
		otherFamilyHistory = req.getParameter("otherFamilyHistory");
		mapForDS.put("otherFamilyHistory", otherFamilyHistory);
	}

	// -----------------------------------------------------------------------------------------------

	if (req.getParameter(ENTRY_OF_DATE) != null
			&& !(req.getParameter(ENTRY_OF_DATE).equals(""))) {
		entryDate = HMSUtil.dateFormatterDDMMYYYY(req
				.getParameter(ENTRY_OF_DATE));
	}
	if (req.getParameter(TYPE_OF_ENTRY) != null
			&& !(req.getParameter(TYPE_OF_ENTRY).equals(""))) {
		typeOfEntry = Integer.parseInt(req.getParameter(TYPE_OF_ENTRY));
	}
	if (req.getParameter(BATCH1_NO) != null
			&& !(req.getParameter(BATCH1_NO).equals(""))) {
		betchNo = req.getParameter(BATCH1_NO);
	}
	if (req.getParameter(CHEST_NO) != null
			&& !(req.getParameter(CHEST_NO).equals(""))) {
		chestNo = req.getParameter(CHEST_NO);
	}

	if (req.getParameter(ROLL_NO) != null
			&& !(req.getParameter(ROLL_NO).equals(""))) {
		rollNo = req.getParameter(ROLL_NO);
	}

	if (req.getParameter(MEDICAL_EXAM_HELD_AT) != null) {
		medicalExamHeld = Integer.parseInt(req
				.getParameter(MEDICAL_EXAM_HELD_AT));
	}

	if (req.getParameter(MEDICAL_STATUS) != null
			&& !(req.getParameter(MEDICAL_STATUS).equals(""))) {
		medicalStatus = req.getParameter(MEDICAL_STATUS);
	}
	if (req.getParameter(FULL_NAME) != null
			&& !(req.getParameter(FULL_NAME).equals(""))) {
		fullName = req.getParameter(FULL_NAME);
	}

	if (req.getParameter(DATE_OF_BIRTH) != null
			&& !(req.getParameter(DATE_OF_BIRTH).equals(""))) {
		dateOfBirth = HMSUtil.dateFormatterDDMMYYYY(req
				.getParameter(DATE_OF_BIRTH));
	}

	if (req.getParameter(MARITIAL_STATUS) != null
			&& !(req.getParameter(MARITIAL_STATUS).equals(""))) {
		maritialStatus = Integer
				.parseInt(req.getParameter(MARITIAL_STATUS));
	}

	if (req.getParameter(SERVICE) != null
			&& !(req.getParameter(SERVICE).equals(""))) {
		service = req.getParameter(SERVICE);
	}

	if (req.getParameter(P_NO) != null
			&& !(req.getParameter(P_NO).equals(""))) {
		pNo = req.getParameter(P_NO);
	}

	if (req.getParameter(RANK) != null
			&& !(req.getParameter(RANK).equals(""))) {
		rank = req.getParameter(RANK);
	}

	if (req.getParameter(HOURS_OF_FLOWN) != null
			&& !(req.getParameter(HOURS_OF_FLOWN).equals(""))) {
		hoursOfFlown = req.getParameter(HOURS_OF_FLOWN);
	}
	if (req.getParameter(PERMANENT_ADDRESS) != null
			&& !(req.getParameter(PERMANENT_ADDRESS).equals(""))) {
		permanentAddress = req.getParameter(PERMANENT_ADDRESS);
	}

	if (req.getParameter(IDENTIFICATION_MARKS1) != null
			&& !(req.getParameter(IDENTIFICATION_MARKS1).equals(""))) {
		identification1 = req.getParameter(IDENTIFICATION_MARKS1);
	}

	if (req.getParameter(IDENTIFICATION_MARKS2) != null
			&& !(req.getParameter(IDENTIFICATION_MARKS2).equals(""))) {
		identification2 = req.getParameter(IDENTIFICATION_MARKS2);
	}

	if (req.getParameter(ARMS_CROPS) != null
			&& !(req.getParameter(ARMS_CROPS).equals(""))) {
		armsCrops = req.getParameter(ARMS_CROPS);
	}

	if (req.getParameter(DATE_OF_COMPLETION) != null
			&& !(req.getParameter(DATE_OF_COMPLETION).equals(""))) {
		dateOfCompletion = HMSUtil.dateFormatterDDMMYYYY(req
				.getParameter(DATE_OF_COMPLETION));
	}

	if (req.getParameter(DOCUMENT_FORWARD_DATE1) != null
			&& !(req.getParameter(DOCUMENT_FORWARD_DATE1).equals(""))) {
		documentForwardDate = HMSUtil.dateFormatterDDMMYYYY(req
				.getParameter(DOCUMENT_FORWARD_DATE1));

	}

	if (req.getParameter(DOCUMENT_FORWARD_TO) != null
			&& !(req.getParameter(DOCUMENT_FORWARD_TO).equals(""))) {
		documentForwardTo = req.getParameter(DOCUMENT_FORWARD_TO);
	}
	if (req.getParameter(DATE_OF_REPORTING) != null
			&& !(req.getParameter(DATE_OF_REPORTING).equals(""))) {
		dateOfReporting = HMSUtil.dateFormatterDDMMYYYY(req
				.getParameter(DATE_OF_REPORTING));

	}

	if (req.getParameter(FROM_WHERE_HE_REPORT) != null
			&& !(req.getParameter(FROM_WHERE_HE_REPORT).equals(""))) {
		fromWhereHeReport = req.getParameter(FROM_WHERE_HE_REPORT);
	}
	if (req.getParameter(HYPERTENSION) != null
			&& !(req.getParameter(HYPERTENSION).equals(""))) {
		hypertension = req.getParameter(HYPERTENSION);
	}
	if (req.getParameter(HEAR_DISEASE) != null
			&& !(req.getParameter(HEAR_DISEASE).equals(""))) {
		heartDisease = req.getParameter(HEAR_DISEASE);
	}
	if (req.getParameter(DIABETES) != null
			&& !(req.getParameter(DIABETES).equals(""))) {
		diabetes = req.getParameter(DIABETES);
	}
	if (req.getParameter(BLEEDING_DIORDER) != null
			&& !(req.getParameter(BLEEDING_DIORDER).equals(""))) {
		bleedingDisorder = req.getParameter(BLEEDING_DIORDER);
	}
	if (req.getParameter(MENTAL_DISEASE) != null
			&& !(req.getParameter(MENTAL_DISEASE).equals(""))) {
		mentalDisease = req.getParameter(MENTAL_DISEASE);
	}
	if (req.getParameter(NIGHT_BLINDNESS) != null
			&& !(req.getParameter(NIGHT_BLINDNESS).equals(""))) {
		nightBlindness = req.getParameter(NIGHT_BLINDNESS);
	}

	if (req.getParameter(ASTHAMA) != null
			&& !(req.getParameter(ASTHAMA).equals(""))) {
		asthama = req.getParameter(ASTHAMA);
	}

	if (req.getParameter(DISCHARGE_FROM) != null
			&& !(req.getParameter(DISCHARGE_FROM).equals(""))) {
		dischargeFrom = req.getParameter(DISCHARGE_FROM);

	}

	if (req.getParameter(PLEURISY) != null
			&& !(req.getParameter(PLEURISY).equals(""))) {
		plesury = req.getParameter(PLEURISY);
	}

	if (req.getParameter(EAR_DISEASE) != null
			&& !(req.getParameter(EAR_DISEASE).equals(""))) {
		earDieses = req.getParameter(EAR_DISEASE);
	}

	if (req.getParameter(RHEUMATISM) != null
			&& !(req.getParameter(RHEUMATISM).equals(""))) {
		rheumatism = req.getParameter(RHEUMATISM);
	}
	if (req.getParameter(FREQUENT_CAUGH) != null
			&& !(req.getParameter(FREQUENT_CAUGH).equals(""))) {
		frequentCough = req.getParameter(FREQUENT_CAUGH);
	}

	if (req.getParameter(CHRONIC_INDIGESTION) != null
			&& !(req.getParameter(CHRONIC_INDIGESTION).equals(""))) {
		chronicIndigestion = req.getParameter(CHRONIC_INDIGESTION);
	}
	if (req.getParameter(NERVOUS_BRAKDOWN) != null
			&& !(req.getParameter(NERVOUS_BRAKDOWN).equals(""))) {
		nervousBrakdown = req.getParameter(NERVOUS_BRAKDOWN);
	}

	if (req.getParameter(KIDENY_BLADDER) != null
			&& !(req.getParameter(KIDENY_BLADDER).equals(""))) {
		kidenyBladder = req.getParameter(KIDENY_BLADDER);
	}
	if (req.getParameter(FITS_FAINTING_ATTACKS) != null
			&& !(req.getParameter(FITS_FAINTING_ATTACKS).equals(""))) {
		fitsFaintinngAttacks = req.getParameter(FITS_FAINTING_ATTACKS);
	}
	if (req.getParameter(STD) != null
			&& !(req.getParameter(STD).equals(""))) {
		std = req.getParameter(STD);
	}

	if (req.getParameter(SEVERE_HEAD_INJURY) != null
			&& !(req.getParameter(SEVERE_HEAD_INJURY).equals(""))) {
		serveHeadInjury = req.getParameter(SEVERE_HEAD_INJURY);
	}

	if (req.getParameter(JOUNDICE) != null
			&& !(req.getParameter(JOUNDICE).equals(""))) {
		joundice = req.getParameter(JOUNDICE);
	}
	if (req.getParameter(SICKNESS) != null
			&& !(req.getParameter(SICKNESS).equals(""))) {
		sickness = req.getParameter(SICKNESS);
	}
	if (req.getParameter(BREAST_DISEASE) != null
			&& !(req.getParameter(BREAST_DISEASE).equals(""))) {
		breastDisease = req.getParameter(BREAST_DISEASE);
	}
	if (req.getParameter(TRACHOMA) != null
			&& !(req.getParameter(TRACHOMA).equals(""))) {
		trachoma = req.getParameter(TRACHOMA);
	}

	if (req.getParameter(AMENORRHOEA) != null
			&& !(req.getParameter(AMENORRHOEA).equals(""))) {
		amenorrhoea = req.getParameter(AMENORRHOEA);
	}
	if (req.getParameter(NIGHT_BINDNESS) != null
			&& !(req.getParameter(NIGHT_BINDNESS).equals(""))) {
		nightbindness = req.getParameter(NIGHT_BINDNESS);
	}
	if (req.getParameter(MENORRHAGIA) != null
			&& !(req.getParameter(MENORRHAGIA).equals(""))) {
		menirrhagia = req.getParameter(MENORRHAGIA);
	}
	if (req.getParameter(LASER_TREATEMENT) != null
			&& !(req.getParameter(LASER_TREATEMENT).equals(""))) {
		laserTeartement = req.getParameter(LASER_TREATEMENT);
	}
	if (req.getParameter(PREGNANCY) != null
			&& !(req.getParameter(PREGNANCY).equals(""))) {
		pregnancy = req.getParameter(PREGNANCY);
	}
	if (req.getParameter(EYE_DISEASE) != null
			&& !(req.getParameter(EYE_DISEASE).equals(""))) {
		eyeDisease = req.getParameter(EYE_DISEASE);
	}
	if (req.getParameter(REJECTED_AS_UNFIT) != null
			&& !(req.getParameter(REJECTED_AS_UNFIT).equals(""))) {
		rejectedAsUnfit = req.getParameter(REJECTED_AS_UNFIT);
	}
	if (req.getParameter(DISCHARGE_MEDICALLY_UNFIT) != null
			&& !(req.getParameter(DISCHARGE_MEDICALLY_UNFIT).equals(""))) {
		dischargeMedicallyUnfit = req
				.getParameter(DISCHARGE_MEDICALLY_UNFIT);
	}
	if (req.getParameter(ADIMMITED_IN_HOSPITAL_FOR_ILLNESS) != null
			&& !(req.getParameter(ADIMMITED_IN_HOSPITAL_FOR_ILLNESS)
					.equals(""))) {
		adimmitedInHospitalFirIllness = req
				.getParameter(ADIMMITED_IN_HOSPITAL_FOR_ILLNESS);
	}
	if (req.getParameter(ABORTION) != null
			&& !(req.getParameter(ABORTION).equals(""))) {
		abortion = req.getParameter(ABORTION);
	}

	if (req.getParameter(STATE_NATURE_OF_THE_DISEASE) != null
			&& !(req.getParameter(STATE_NATURE_OF_THE_DISEASE).equals(""))) {
		stateNature = req.getParameter(STATE_NATURE_OF_THE_DISEASE);
	}
	if (req.getParameter(OTHER_INFORMATION) != null
			&& !(req.getParameter(OTHER_INFORMATION).equals(""))) {
		otherInform = req.getParameter(OTHER_INFORMATION);
	}
	if (req.getParameter(HEIGHT_WITHOUT_SHOOSE) != null
			&& !(req.getParameter(HEIGHT_WITHOUT_SHOOSE).equals(""))) {
		height = (new BigDecimal(req.getParameter(HEIGHT_WITHOUT_SHOOSE)));
	}
	if (req.getParameter(ACTUAL_WEIGHT) != null
			&& !(req.getParameter(ACTUAL_WEIGHT).equals(""))) {
		weight = (new BigDecimal(req.getParameter(ACTUAL_WEIGHT)));
	}
	if (req.getParameter(ACCEPTABLE_KG) != null
			&& !(req.getParameter(ACCEPTABLE_KG).equals(""))) {
		acceptableKg = (new BigDecimal(req.getParameter(ACCEPTABLE_KG)));
	}
	if (req.getParameter(LEG_LENGTH) != null
			&& !(req.getParameter(LEG_LENGTH).equals(""))) {
		leglength = (new BigDecimal(req.getParameter(LEG_LENGTH)));
	}
	if (req.getParameter(APPEREANCE) != null
			&& !(req.getParameter(APPEREANCE).equals(""))) {
		appereance = req.getParameter(APPEREANCE);
	}
	if (req.getParameter(ALBUMIN) != null
			&& !(req.getParameter(ALBUMIN).equals(""))) {
		albumin = req.getParameter(ALBUMIN);
	}
	if (req.getParameter(SUGAR) != null
			&& !(req.getParameter(SUGAR).equals(""))) {
		sugar = req.getParameter(SUGAR);
	}
	if (req.getParameter(SP_GRAVITY) != null
			&& !(req.getParameter(SP_GRAVITY).equals(""))) {
		spGraviry = req.getParameter(SP_GRAVITY);
	}
	if (req.getParameter(HB_PERCENTAGE) != null
			&& !(req.getParameter(HB_PERCENTAGE).equals(""))) {
		hbPercentage = req.getParameter(HB_PERCENTAGE);
	}
	if (req.getParameter(PHYSIQUE) != null
			&& !(req.getParameter(PHYSIQUE).equals(""))) {
		physique = req.getParameter(PHYSIQUE);
	}

	if (req.getParameter(ANYOTHER_INV_CARRIED_OUT) != null
			&& !(req.getParameter(ANYOTHER_INV_CARRIED_OUT).equals(""))) {
		anyOtherInv = req.getParameter(ANYOTHER_INV_CARRIED_OUT);
	}
	if (req.getParameter(SKIN) != null
			&& !(req.getParameter(SKIN).equals(""))) {
		skin = req.getParameter(SKIN);
	}
	if (req.getParameter(ABDOMEN) != null
			&& !(req.getParameter(ABDOMEN).equals(""))) {
		abdomen = req.getParameter(ABDOMEN);
	}
	if (req.getParameter(HEART_SIZE) != null
			&& !(req.getParameter(HEART_SIZE).equals(""))) {
		heartSize = req.getParameter(HEART_SIZE);
	}
	if (req.getParameter(SOUND) != null
			&& !(req.getParameter(SOUND).equals(""))) {
		sound = req.getParameter(SOUND);
	}
	if (req.getParameter(RHYTHM) != null
			&& !(req.getParameter(RHYTHM).equals(""))) {
		rhythm = req.getParameter(RHYTHM);
	}
	if (req.getParameter(ARTERIAL_WALLS) != null
			&& !(req.getParameter(ARTERIAL_WALLS).equals(""))) {
		arterialWalls = req.getParameter(ARTERIAL_WALLS);
	}
	if (req.getParameter(PULSE_RATES) != null
			&& !(req.getParameter(PULSE_RATES).equals(""))) {
		pulseRates = req.getParameter(PULSE_RATES);
	}
	if (req.getParameter(BP1) != null
			&& !(req.getParameter(BP1).equals(""))) {
		bp = req.getParameter(BP1);
	}
	if (req.getParameter(FULL_EXPENSION) != null
			&& !(req.getParameter(FULL_EXPENSION).equals(""))) {
		fullExpension = req.getParameter(FULL_EXPENSION);
	}
	if (req.getParameter(RANGE_OF_EXPENSION) != null
			&& !(req.getParameter(RANGE_OF_EXPENSION).equals(""))) {
		rangeOfExpension = req.getParameter(RANGE_OF_EXPENSION);
	}

	if (req.getParameter(SELF_BALANCINF_R) != null
			&& !(req.getParameter(SELF_BALANCINF_R).equals(""))) {
		selfBalR = req.getParameter(SELF_BALANCINF_R);
	}
	if (req.getParameter(SELF_BALANCING_L) != null
			&& !(req.getParameter(SELF_BALANCING_L).equals(""))) {
		selfBalL = req.getParameter(SELF_BALANCING_L);
	}
	if (req.getParameter(SPEECH_MENTAL_CAPACITY) != null
			&& !(req.getParameter(SPEECH_MENTAL_CAPACITY).equals(""))) {
		speechMental = req.getParameter(SPEECH_MENTAL_CAPACITY);
	}
	if (req.getParameter(ENDOCRINE_CONDITION) != null
			&& !(req.getParameter(ENDOCRINE_CONDITION).equals(""))) {
		endocrinCond = req.getParameter(ENDOCRINE_CONDITION);
	}
	if (req.getParameter(OTHER_ABNORMALITIES) != null
			&& !(req.getParameter(OTHER_ABNORMALITIES).equals(""))) {
		otherAbnormalities = req.getParameter(OTHER_ABNORMALITIES);
	}
	if (req.getParameter(MEDICIN_REMARKS) != null
			&& !(req.getParameter(MEDICIN_REMARKS).equals(""))) {
		medicinRemarks = req.getParameter(MEDICIN_REMARKS);
	}
	if (req.getParameter(FINGER) != null
			&& !(req.getParameter(FINGER).equals(""))) {
		finger = req.getParameter(FINGER);
	}
	if (req.getParameter(HAND) != null
			&& !(req.getParameter(HAND).equals(""))) {
		hand = req.getParameter(HAND);
	}
	if (req.getParameter(WRIST) != null
			&& !(req.getParameter(WRIST).equals(""))) {
		wrist = req.getParameter(WRIST);
	}
	if (req.getParameter(ELBOWS) != null
			&& !(req.getParameter(ELBOWS).equals(""))) {
		elbows = req.getParameter(ELBOWS);
	}
	if (req.getParameter(SHOULDER_GIRDLES) != null
			&& !(req.getParameter(SHOULDER_GIRDLES).equals(""))) {
		shoulderGridles = req.getParameter(SHOULDER_GIRDLES);
	}
	if (req.getParameter(CERCIVAL) != null
			&& !(req.getParameter(CERCIVAL).equals(""))) {
		cercival = req.getParameter(CERCIVAL);
	}
	if (req.getParameter(DORSAL_VERTEBRATE) != null
			&& !(req.getParameter(DORSAL_VERTEBRATE).equals(""))) {
		dorsalVertebrate = req.getParameter(DORSAL_VERTEBRATE);
	}
	if (req.getParameter(HULLUX) != null
			&& !(req.getParameter(HULLUX).equals(""))) {
		hullux = req.getParameter(HULLUX);
	}
	if (req.getParameter(VALGUS) != null
			&& !(req.getParameter(VALGUS).equals(""))) {
		valgus = req.getParameter(VALGUS);
	}
	if (req.getParameter(RIGGUS) != null
			&& !(req.getParameter(RIGGUS).equals(""))) {
		riggus = req.getParameter(RIGGUS);
	}
	if (req.getParameter(FLAT_FEET) != null
			&& !(req.getParameter(FLAT_FEET).equals(""))) {
		flatFeet = req.getParameter(FLAT_FEET);
	}
	if (req.getParameter(JOINTS) != null
			&& !(req.getParameter(JOINTS).equals(""))) {
		joints = req.getParameter(JOINTS);
	}
	if (req.getParameter(PELVIS) != null
			&& !(req.getParameter(PELVIS).equals(""))) {
		pelvis = req.getParameter(PELVIS);
	}
	if (req.getParameter(GAIL) != null
			&& !(req.getParameter(GAIL).equals(""))) {
		gail = req.getParameter(GAIL);
	}
	if (req.getParameter(LUMBER_SCALER_VERTABRAC) != null
			&& !(req.getParameter(LUMBER_SCALER_VERTABRAC).equals(""))) {
		lumberScaler = req.getParameter(LUMBER_SCALER_VERTABRAC);
	}
	if (req.getParameter(ROCCYX_VARICOSE_VENIS) != null
			&& !(req.getParameter(ROCCYX_VARICOSE_VENIS).equals(""))) {
		roccyxVericose = req.getParameter(ROCCYX_VARICOSE_VENIS);
	}
	if (req.getParameter(HYDROCELE) != null
			&& !(req.getParameter(HYDROCELE).equals(""))) {
		hydrocele = req.getParameter(HYDROCELE);
		CocatHicNevreData += req.getParameter(HYDROCELE) + ",";
	}
	if (req.getParameter(VARICOCELE) != null
			&& !(req.getParameter(VARICOCELE).equals(""))) {
		varicocele = req.getParameter(VARICOCELE);
	}
	if (req.getParameter(UNDER_SCENDED_TESTES) != null
			&& !(req.getParameter(UNDER_SCENDED_TESTES).equals(""))) {
		underScende = req.getParameter(UNDER_SCENDED_TESTES);
	}
	if (req.getParameter(HEMONHOIDS) != null
			&& !(req.getParameter(HEMONHOIDS).equals(""))) {
		hemonhoids = req.getParameter(HEMONHOIDS);
		CocatHicNevreData += req.getParameter(HEMONHOIDS) + ",";
	}
	if (req.getParameter(HERNIA_MUSCLE) != null
			&& !(req.getParameter(HERNIA_MUSCLE).equals(""))) {
		herinaMusic = req.getParameter(HERNIA_MUSCLE);

	}
	if (req.getParameter(BREASTS) != null
			&& !(req.getParameter(BREASTS).equals(""))) {
		breasts = req.getParameter(BREASTS);
		CocatHicNevreData += req.getParameter(BREASTS) + ",";
	}
	if (req.getParameter(SURGERY_REMARKS) != null
			&& !(req.getParameter(SURGERY_REMARKS).equals(""))) {
		surgeryRemarks = req.getParameter(SURGERY_REMARKS);
	}
	if (req.getParameter(RESPIRATORY_SYSTEM) != null
			&& !(req.getParameter(RESPIRATORY_SYSTEM).equals(""))) {
		respatorySystem = req.getParameter(RESPIRATORY_SYSTEM);
	}

	if (req.getParameter(WITH_GLASSES_DISTANT_R) != null
			&& !(req.getParameter(WITH_GLASSES_DISTANT_R).equals(""))) {
		withGlassesDistantR = req.getParameter(WITH_GLASSES_DISTANT_R);
	}
	if (req.getParameter(WITH_GLASSES_DISTANT_L) != null
			&& !(req.getParameter(WITH_GLASSES_DISTANT_L).equals(""))) {
		withglassesDistantL = req.getParameter(WITH_GLASSES_DISTANT_L);
	}
	if (req.getParameter(WITH_GLASSES_NEAR_R) != null
			&& !(req.getParameter(WITH_GLASSES_NEAR_R).equals(""))) {
		withGlassesNearR = req.getParameter(WITH_GLASSES_NEAR_R);
	}
	if (req.getParameter(WITH_GLASSES_NEAR_L) != null
			&& !(req.getParameter(WITH_GLASSES_NEAR_L).equals(""))) {
		withGlassesNearL = req.getParameter(WITH_GLASSES_NEAR_L);
	}
	if (req.getParameter(WITH_GLASSES_NEAR_CP) != null
			&& !(req.getParameter(WITH_GLASSES_NEAR_CP).equals(""))) {
		withGlassesNearCP = req.getParameter(WITH_GLASSES_NEAR_CP);

	}
	if (req.getParameter(WITHOUT_GLASSES_DISTANT_R) != null
			&& !(req.getParameter(WITHOUT_GLASSES_DISTANT_R).equals(""))) {
		withoutGlassesDistantR = req
				.getParameter(WITHOUT_GLASSES_DISTANT_R);
	}
	if (req.getParameter(WITHOUT_GLASSES_DISTANT_L) != null
			&& !(req.getParameter(WITHOUT_GLASSES_DISTANT_L).equals(""))) {
		withoutGlassesDistantL = req
				.getParameter(WITHOUT_GLASSES_DISTANT_L);
	}
	if (req.getParameter(WITHOUT_GLASSES_NEAR_R) != null
			&& !(req.getParameter(WITHOUT_GLASSES_NEAR_R).equals(""))) {
		withoutGlassesNearR = req.getParameter(WITHOUT_GLASSES_NEAR_R);
	}
	if (req.getParameter(WITHOUT_GLASSES_NEAR_L) != null
			&& !(req.getParameter(WITHOUT_GLASSES_NEAR_L).equals(""))) {
		withoutGlassesNearL = req.getParameter(WITHOUT_GLASSES_NEAR_L);
	}
	if (req.getParameter(WITHOUT_GLASSES_NEAR_CP) != null
			&& !(req.getParameter(WITHOUT_GLASSES_NEAR_CP).equals(""))) {
		withoutGlassesNearCP = req.getParameter(WITHOUT_GLASSES_NEAR_CP);
	}
	if (req.getParameter(CONVERGENCE_SC) != null
			&& !(req.getParameter(CONVERGENCE_SC).equals(""))) {
		convergenceCP = new BigDecimal(req.getParameter(CONVERGENCE_SC));
	}
	if (req.getParameter(CONVERGENCE_C) != null
			&& !(req.getParameter(CONVERGENCE_C).equals(""))) {
		convergenceC = new BigDecimal(req.getParameter(CONVERGENCE_C));

	}
	if (req.getParameter(ACCOMMODATION_R) != null
			&& !(req.getParameter(ACCOMMODATION_R).equals(""))) {
		accommodationR = req.getParameter(ACCOMMODATION_R);
	}
	if (req.getParameter(ACCOMMODATION_L) != null
			&& !(req.getParameter(ACCOMMODATION_L).equals(""))) {
		accommodationL = req.getParameter(ACCOMMODATION_L);
	}

	if (req.getParameter(EYE_REMARKS) != null
			&& !(req.getParameter(EYE_REMARKS).equals(""))) {
		eyeRemarks = req.getParameter(EYE_REMARKS);
	}
	if (req.getParameter(EYE_DATE) != null
			&& !(req.getParameter(EYE_DATE).equals(""))) {
		eyeDate = HMSUtil.dateFormatterDDMMYYYY(req.getParameter(EYE_DATE));
	}
	if (req.getParameter(HEARING_R_F_W) != null
			&& !(req.getParameter(HEARING_R_F_W).equals(""))) {
		hearingRFW = new BigDecimal(req.getParameter(HEARING_R_F_W));
	}
	if (req.getParameter(HEARING_L_F_W) != null
			&& !(req.getParameter(HEARING_L_F_W).equals(""))) {
		hearingLFW = new BigDecimal(req.getParameter(HEARING_L_F_W));
	}
	if (req.getParameter(HEARING_BOTH_FW) != null
			&& !(req.getParameter(HEARING_BOTH_FW).equals(""))) {
		hearingBothFW = new BigDecimal(req.getParameter(HEARING_BOTH_FW));
	}

	if (req.getParameter(HEARING_R_C_V) != null
			&& !(req.getParameter(HEARING_R_C_V).equals(""))) {
		hearingRCV = new BigDecimal(req.getParameter(HEARING_R_C_V));
	}
	if (req.getParameter(HEARING_L_C_V) != null
			&& !(req.getParameter(HEARING_L_C_V).equals(""))) {
		hearingLCV = new BigDecimal(req.getParameter(HEARING_L_C_V));
	}
	if (req.getParameter(HEARING_BOTH_CV) != null
			&& !(req.getParameter(HEARING_BOTH_CV).equals(""))) {
		hearingBothCV = new BigDecimal(req.getParameter(HEARING_BOTH_CV));
	}
	if (req.getParameter(INNER_EAR_R) != null
			&& !(req.getParameter(INNER_EAR_R).equals(""))) {
		innerEarR = req.getParameter(INNER_EAR_R);
	}
	if (req.getParameter(INNER_EAR_L) != null
			&& !(req.getParameter(INNER_EAR_L).equals(""))) {
		innerEarL = req.getParameter(INNER_EAR_L);
	}
	String tmr = "";
	String tml = "";
	String mobility_r = "";
	String mobility_l = "";
	String noseThroatSinuses = "";

	if (req.getParameter(TYMPANIC_R) != null
			&& !(req.getParameter(TYMPANIC_R).equals(""))) {
		tmr = req.getParameter(TYMPANIC_R);
	}
	if (req.getParameter(TYMPANIC_L) != null
			&& !(req.getParameter(TYMPANIC_L).equals(""))) {
		tml = req.getParameter(TYMPANIC_L);
	}
	if (req.getParameter(MOBILITYR) != null
			&& !(req.getParameter(MOBILITYR).equals(""))) {
		mobility_r = req.getParameter(MOBILITYR);
	}
	if (req.getParameter(MOBILITYL) != null
			&& !(req.getParameter(MOBILITYL).equals(""))) {
		mobility_l = req.getParameter(MOBILITYL);
	}
	if (req.getParameter(NOSE_THROAT_SINUSES) != null
			&& !(req.getParameter(NOSE_THROAT_SINUSES).equals(""))) {
		noseThroatSinuses = req.getParameter(NOSE_THROAT_SINUSES);
	}
	masMedicalBoardProceedings.setTympanicR(tmr);
	masMedicalBoardProceedings.setTympanicL(tml);
	masMedicalBoardProceedings.setMobilityR(mobility_r);
	masMedicalBoardProceedings.setMobilityL(mobility_l);
	masMedicalBoardProceedings.setNoseThroatSinuses(noseThroatSinuses);
	if (req.getParameter(AUDIOMETRY_RECORD) != null
			&& !(req.getParameter(AUDIOMETRY_RECORD).equals(""))) {
		audiometryRecord = req.getParameter(AUDIOMETRY_RECORD);
	}
	if (req.getParameter(NOSE) != null
			&& !(req.getParameter(NOSE).equals(""))) {
		nose = req.getParameter(NOSE);
	}
	if (req.getParameter(THROAT_EAR) != null
			&& !(req.getParameter(THROAT_EAR).equals(""))) {
		throatEar = req.getParameter(THROAT_EAR);
	}
	if (req.getParameter(EAR_REMARKS) != null
			&& !(req.getParameter(EAR_REMARKS).equals(""))) {
		earReamrks = req.getParameter(EAR_REMARKS);
	}
	if (req.getParameter(EAR_DATE) != null
			&& !(req.getParameter(EAR_DATE).equals(""))) {
		earDate = HMSUtil.dateFormatterDDMMYYYY(req.getParameter(EAR_DATE));
	}

	if (req.getParameter(EXTERNAL_EAR_R) != null
			&& !(req.getParameter(EXTERNAL_EAR_R).equals(""))) {
		externalEarR = req.getParameter(EXTERNAL_EAR_R);
	}
	if (req.getParameter(EXTERNAL_EAR_L) != null
			&& !(req.getParameter(EXTERNAL_EAR_L).equals(""))) {
		externalEarL = req.getParameter(EXTERNAL_EAR_L);
	}
	if (req.getParameter(MIDDLE_EAR_R) != null
			&& !(req.getParameter(MIDDLE_EAR_R).equals(""))) {
		middleEarR = req.getParameter(MIDDLE_EAR_R);
	}
	if (req.getParameter(MIDDLE_EAR_L) != null
			&& !(req.getParameter(MIDDLE_EAR_L).equals(""))) {
		middleEarL = req.getParameter(MIDDLE_EAR_L);
	}
	if (req.getParameter(ANY_EVIDENCE_OF_TRACHOMA) != null
			&& !(req.getParameter(ANY_EVIDENCE_OF_TRACHOMA).equals(""))) {
		evidienceOfTrachoma = req.getParameter(ANY_EVIDENCE_OF_TRACHOMA);
	}
	if (req.getParameter(BINOCULAR_VISION_GRADE) != null
			&& !(req.getParameter(BINOCULAR_VISION_GRADE).equals(""))) {
		binocular = req.getParameter(BINOCULAR_VISION_GRADE);
	}
	if (req.getParameter(MANIFEST_HYPERMETROPIA) != null
			&& !(req.getParameter(MANIFEST_HYPERMETROPIA).equals(""))) {
		manifestHypermetropia = req.getParameter(MANIFEST_HYPERMETROPIA);
	}
	if (req.getParameter(COVER_TEST) != null
			&& !(req.getParameter(COVER_TEST).equals(""))) {
		coverTest = req.getParameter(COVER_TEST);
	}
	if (req.getParameter(DIAPHRAGM_TEST) != null
			&& !(req.getParameter(DIAPHRAGM_TEST).equals(""))) {
		diaphragmTest = req.getParameter(DIAPHRAGM_TEST);
	}
	if (req.getParameter(FUND_MEDIA) != null
			&& !(req.getParameter(FUND_MEDIA).equals(""))) {
		fundMedia = req.getParameter(FUND_MEDIA);
	}
	if (req.getParameter(FIELDS) != null
			&& !(req.getParameter(FIELDS).equals(""))) {
		fields = req.getParameter(FIELDS);
	}
	if (req.getParameter(NIGHT_VISUAL_CAPACITY) != null
			&& !(req.getParameter(NIGHT_VISUAL_CAPACITY).equals(""))) {
		nightVisualCapacity = req.getParameter(NIGHT_VISUAL_CAPACITY);
	}
	if (req.getParameter(DENTAL_REMARKS) != null
			&& !(req.getParameter(DENTAL_REMARKS).equals(""))) {
		dentalRemarks = req.getParameter(DENTAL_REMARKS);
	}
	if (req.getParameter("dentalReferToMH") != null
			&& !(req.getParameter("dentalReferToMH").equals(""))) {
		denatlToMH = req.getParameter("dentalReferToMH");
	}
	if (req.getParameter(DENTAL_DATE) != null
			&& !(req.getParameter(DENTAL_DATE).equals(""))) {
		dentalDate = HMSUtil.dateFormatterDDMMYYYY(req
				.getParameter(DENTAL_DATE));
	}
	if (req.getParameter(MENSTRUAL_HISTORY) != null
			&& !(req.getParameter(MENSTRUAL_HISTORY).equals(""))) {
		menstrualHistory = req.getParameter(MENSTRUAL_HISTORY);
	}
	if (req.getParameter(NO_OF_PREGNANCY) != null
			&& !(req.getParameter(NO_OF_PREGNANCY).equals(""))) {
		noOfPregnancy = Integer.parseInt(req.getParameter(NO_OF_PREGNANCY));
	}
	if (req.getParameter(NO_OF_ABORTION) != null
			&& !(req.getParameter(NO_OF_ABORTION).equals(""))) {
		noOfAbortion = Integer.parseInt(req.getParameter(NO_OF_ABORTION));
	}
	if (req.getParameter(NO_OF_CHILDREN) != null
			&& !(req.getParameter(NO_OF_CHILDREN).equals(""))) {
		noOfChildren = Integer.parseInt(req.getParameter(NO_OF_CHILDREN));
	}
	if (req.getParameter(DATE_OF_LASTCONFINEMENT) != null
			&& !(req.getParameter(DATE_OF_LASTCONFINEMENT).equals(""))) {
		lastCondinement = HMSUtil.dateFormatterDDMMYYYY(req
				.getParameter(DATE_OF_LASTCONFINEMENT));
	}
	if (req.getParameter(VAGINAL_DISCHARGE) != null
			&& !(req.getParameter(VAGINAL_DISCHARGE).equals(""))) {
		vaginalDischarge = req.getParameter(VAGINAL_DISCHARGE);
	}
	if (req.getParameter(PROLAPSE) != null
			&& !(req.getParameter(PROLAPSE).equals(""))) {
		prolapse = req.getParameter(PROLAPSE);
	}
	if (req.getParameter(USG_ABORTION) != null
			&& !(req.getParameter(USG_ABORTION).equals(""))) {
		usgAbortion = req.getParameter(USG_ABORTION);
	}
	if (req.getParameter(GYANAECOLOGY_RAMARKS) != null
			&& !(req.getParameter(GYANAECOLOGY_RAMARKS).equals(""))) {
		gyanaecologyRemarks = req.getParameter(GYANAECOLOGY_RAMARKS);
	}
	if (req.getParameter(GYANAECOLOGY_DATE) != null
			&& !(req.getParameter(GYANAECOLOGY_DATE).equals(""))) {
		gyanaecologyDate = HMSUtil.dateFormatterDDMMYYYY(req
				.getParameter(GYANAECOLOGY_DATE));
	}
	if (req.getParameter(GYANAECOLOGY_RAMARKS) != null
			&& !(req.getParameter(GYANAECOLOGY_RAMARKS).equals(""))) {
		gyanaecologyRemarks = req.getParameter(GYANAECOLOGY_RAMARKS);
	}
	if (req.getParameter(MEDICAL_BOARD_EXAMINATION) != null
			&& !(req.getParameter(MEDICAL_BOARD_EXAMINATION).equals(""))) {
		medicalBoardExamination = req
				.getParameter(MEDICAL_BOARD_EXAMINATION);
	}
	if (req.getParameter(MEDICAL_BOARD_EXAMINATION_PLACE) != null
			&& !(req.getParameter(MEDICAL_BOARD_EXAMINATION_PLACE)
					.equals(""))) {

		medicalBoardExaminationPlace = Integer.parseInt(req
				.getParameter(MEDICAL_BOARD_EXAMINATION_PLACE));

	}
	if (req.getParameter(MEDICAL_BOARD_EXAMINATION_DATE) != null
			&& !(req.getParameter(MEDICAL_BOARD_EXAMINATION_DATE)
					.equals(""))) {
		medicalBoardExaminationDate = HMSUtil.dateFormatterDDMMYYYY((req
				.getParameter(MEDICAL_BOARD_EXAMINATION_DATE)));
	}
	if (req.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION) != null
			&& !(req.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION)
					.equals(""))) {
		subsequentMedicalBoardExam = req
				.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION);
	}
	if (req.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION_PLACE) != null
			&& !(req
					.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION_PLACE)
					.equals(""))) {
		subsequentMedicalBoardExamPlace = Integer.parseInt(req
				.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION_PLACE));
	}
	if (req.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION_DATE) != null
			&& !(req
					.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION_DATE)
					.equals(""))) {
		subsequentMedicalBoardExamDate = HMSUtil.dateFormatterDDMMYYYY((req
				.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION_DATE)));
	}

	if (req.getParameter(APPROVING_AUTHORITY) != null
			&& !(req.getParameter(APPROVING_AUTHORITY).equals(""))) {
		ApprovingAuthority = req.getParameter(APPROVING_AUTHORITY);
	}
	if (req.getParameter(APPROVING_AUTHORITY_PLACE) != null
			&& !(req.getParameter(APPROVING_AUTHORITY_PLACE).equals(""))) {
		ApprovingAuthorityPlace = Integer.parseInt(req
				.getParameter(APPROVING_AUTHORITY_PLACE));
	}
	if (req.getParameter(APPROVING_AUTHORITY_DATE) != null
			&& !(req.getParameter(APPROVING_AUTHORITY_DATE).equals(""))) {
		ApprovingAuthorityDate = HMSUtil.dateFormatterDDMMYYYY((req
				.getParameter(APPROVING_AUTHORITY_DATE)));
	}
	if (req.getParameter(LMP) != null
			&& !(req.getParameter(LMP).equals(""))) {
		lmp = HMSUtil.dateFormatterDDMMYYYY((req.getParameter(LMP)));
	}

	if (req.getParameter(SURGERY_DATE) != null
			&& !(req.getParameter(SURGERY_DATE).equals(""))) {
		surgeyDate = HMSUtil.dateFormatterDDMMYYYY((req
				.getParameter(SURGERY_DATE)));
	}

	if (req.getParameter(MEDICIN_EXAM_DATE) != null
			&& !(req.getParameter(MEDICIN_EXAM_DATE).equals(""))) {
		medicinExamDate = HMSUtil.dateFormatterDDMMYYYY((req
				.getParameter(MEDICIN_EXAM_DATE)));

	}
	if (req.getParameter(TOTAL_NO_OF_TEETH) != null
			&& !(req.getParameter(TOTAL_NO_OF_TEETH).equals(""))) {
		totalTeeth = req.getParameter(TOTAL_NO_OF_TEETH);

	}
	if (req.getParameter(DEFECTIVE_TEETH) != null
			&& !(req.getParameter(DEFECTIVE_TEETH).equals(""))) {
		totalDefectiveTeeth = req.getParameter(DEFECTIVE_TEETH);

	}
	if (req.getParameter(MISSING_TEETH) != null
			&& !(req.getParameter(MISSING_TEETH).equals(""))) {
		missingTeeth = req.getParameter(MISSING_TEETH);

	}
	if (req.getParameter(MISSING_UNSERVICABLE_TEETH) != null
			&& !(req.getParameter(MISSING_UNSERVICABLE_TEETH).equals(""))) {
		unserviceableTeeth = req.getParameter(MISSING_UNSERVICABLE_TEETH);

	}
	if (req.getParameter(DENTSL_POINT) != null
			&& !(req.getParameter(DENTSL_POINT).equals(""))) {
		DenstalPoint = req.getParameter(DENTSL_POINT);

	}

	if (req.getParameter(LAST_CHANGED_BY) != null) {
		lastChangedBy = req.getParameter(LAST_CHANGED_BY);
	}
	if (req.getParameter(LAST_CHANGED_DATE) != null) {
		lastChangedDate = HMSUtil.dateFormatterDDMMYYYY(req
				.getParameter(LAST_CHANGED_DATE));
	}
	if (req.getParameter(LAST_CHANGED_TIME) != null) {
		lastChangedTime = req.getParameter(LAST_CHANGED_TIME);
	}
	// //////////////////////////////////

	if (req.getParameter(DUR_8) != null
			&& !req.getParameter(DUR_8).equals("")) {
		dur8 = (req.getParameter(DUR_8));

	} else {
		dur8 = "N";

	}

	if (req.getParameter(DUR_7) != null
			&& !req.getParameter(DUR_7).equals("")) {
		dur7 = (req.getParameter(DUR_7));

	} else {
		dur7 = "N";

	}
	if (req.getParameter(DUR_6) != null
			&& !req.getParameter(DUR_6).equals("")) {
		dur6 = (req.getParameter(DUR_6));

	} else {
		dur6 = "N";

	}
	if (req.getParameter(DUR_5) != null
			&& !req.getParameter(DUR_5).equals("")) {
		dur5 = (req.getParameter(DUR_5));

	} else {
		dur5 = "N";

	}

	if (req.getParameter(DUR_4) != null
			&& !req.getParameter(DUR_4).equals("")) {
		dur4 = (req.getParameter(DUR_4));
	} else {
		dur4 = "N";

	}
	if (req.getParameter(DUR_3) != null
			&& !req.getParameter(DUR_3).equals("")) {
		dur3 = (req.getParameter(DUR_3));

	} else {
		dur3 = "N";

	}
	if (req.getParameter(DUR_2) != null
			&& !req.getParameter(DUR_2).equals("")) {
		dur2 = (req.getParameter(DUR_2));

	} else {
		dur2 = "N";

	}
	if (req.getParameter(DUR_1) != null
			&& !req.getParameter(DUR_1).equals("")) {
		dur1 = (req.getParameter(DUR_1));

	} else {
		dur1 = "N";

	}

	if (req.getParameter(DUL_8) != null
			&& !req.getParameter(DUL_8).equals("")) {
		dul8 = (req.getParameter(DUL_8));
	} else {
		dul8 = "N";

	}
	if (req.getParameter(DUL_7) != null
			&& !req.getParameter(DUL_7).equals("")) {
		dul7 = (req.getParameter(DUL_7));

	} else {
		dul7 = "N";

	}
	if (req.getParameter(DUL_6) != null
			&& !req.getParameter(DUL_6).equals("")) {
		dul6 = (req.getParameter(DUL_6));
	} else {
		dul6 = "N";

	}
	if (req.getParameter(DUL_5) != null
			&& !req.getParameter(DUL_5).equals("")) {
		dul5 = (req.getParameter(DUL_5));
	} else {
		dul5 = "N";

	}
	if (req.getParameter(DUL_4) != null
			&& !req.getParameter(DUL_4).equals("")) {
		dul4 = (req.getParameter(DUL_4));
	} else {
		dul4 = "N";

	}
	if (req.getParameter(DUL_3) != null
			&& !req.getParameter(DUL_3).equals("")) {
		dul3 = (req.getParameter(DUL_3));
	} else {
		dul3 = "N";

	}
	if (req.getParameter(DUL_2) != null
			&& !req.getParameter(DUL_2).equals("")) {
		dul2 = (req.getParameter(DUL_2));
	} else {
		dul2 = "N";

	}
	if (req.getParameter(DUL_1) != null
			&& !req.getParameter(DUL_1).equals("")) {
		dul1 = (req.getParameter(DUL_1));
	} else {
		dul1 = "N";

	}

	if (req.getParameter(DLR_8) != null
			&& !req.getParameter(DLR_8).equals("")) {
		dlr8 = (req.getParameter(DLR_8));
	} else {
		dlr8 = "N";

	}
	if (req.getParameter(DLR_7) != null
			&& !req.getParameter(DLR_7).equals("")) {
		dlr7 = (req.getParameter(DLR_7));
	} else {
		dlr7 = "N";

	}
	if (req.getParameter(DLR_6) != null
			&& !req.getParameter(DLR_6).equals("")) {
		dlr6 = (req.getParameter(DLR_6));
	} else {
		dlr6 = "N";

	}
	if (req.getParameter(DLR_5) != null
			&& !req.getParameter(DLR_5).equals("")) {
		dlr5 = (req.getParameter(DLR_5));
	} else {
		dlr5 = "N";

	}
	if (req.getParameter(DLR_4) != null
			&& !req.getParameter(DLR_4).equals("")) {
		dlr4 = (req.getParameter(DLR_4));
	} else {
		dlr4 = "N";

	}
	if (req.getParameter(DLR_3) != null
			&& !req.getParameter(DLR_3).equals("")) {
		dlr3 = (req.getParameter(DLR_3));
	} else {
		dlr3 = "N";

	}
	if (req.getParameter(DLR_2) != null
			&& !req.getParameter(DLR_2).equals("")) {
		dlr2 = (req.getParameter(DLR_2));
	} else {
		dlr2 = "N";

	}

	if (req.getParameter(DLR_1) != null
			&& !req.getParameter(DLR_1).equals("")) {
		dlr1 = (req.getParameter(DLR_1));
	} else {
		dlr1 = "N";

	}

	if (req.getParameter(DLL_8) != null
			&& !req.getParameter(DLL_8).equals("")) {
		dll8 = (req.getParameter(DLL_8));
	} else {
		dll8 = "N";

	}
	if (req.getParameter(DLL_7) != null
			&& !req.getParameter(DLL_7).equals("")) {
		dll7 = (req.getParameter(DLL_7));
	} else {
		dll7 = "N";

	}

	if (req.getParameter(DLL_6) != null
			&& !req.getParameter(DLL_6).equals("")) {
		dll6 = (req.getParameter(DLL_6));
	} else {
		dll6 = "N";

	}
	if (req.getParameter(DLL_5) != null
			&& !req.getParameter(DLL_5).equals("")) {
		dll5 = (req.getParameter(DLL_5));
	} else {
		dll5 = "N";

	}
	if (req.getParameter(DLL_4) != null
			&& !req.getParameter(DLL_4).equals("")) {
		dll4 = (req.getParameter(DLL_4));
	} else {
		dll4 = "N";

	}
	if (req.getParameter(DLL_3) != null
			&& !req.getParameter(DLL_3).equals("")) {
		dll3 = (req.getParameter(DLL_3));
	} else {
		dll3 = "N";

	}
	if (req.getParameter(DLL_2) != null
			&& !req.getParameter(DLL_2).equals("")) {
		dll2 = (req.getParameter(DLL_2));
	} else {
		dll2 = "N";

	}
	if (req.getParameter(DLL_1) != null
			&& !req.getParameter(DLL_1).equals("")) {
		dll1 = (req.getParameter(DLL_1));
	} else {
		dll1 = "N";

	}
	// ///////////////////////////

	if (req.getParameter(UUR_8) != null
			&& !req.getParameter(UUR_8).equals("")) {
		uur8 = (req.getParameter(UUR_8));
	} else {
		uur8 = "N";

	}

	if (req.getParameter(UUR_7) != null
			&& !req.getParameter(UUR_7).equals("")) {
		uur7 = (req.getParameter(UUR_7));
	} else {
		uur7 = "N";

	}
	if (req.getParameter(UUR_6) != null
			&& !req.getParameter(UUR_6).equals("")) {
		uur6 = (req.getParameter(UUR_6));
	} else {
		uur6 = "N";

	}
	if (req.getParameter(UUR_5) != null
			&& !req.getParameter(UUR_5).equals("")) {
		uur5 = (req.getParameter(UUR_5));
	} else {
		uur5 = "N";

	}
	if (req.getParameter(UUR_4) != null
			&& !req.getParameter(UUR_4).equals("")) {
		uur4 = (req.getParameter(UUR_4));
	} else {
		uur4 = "N";

	}
	if (req.getParameter(UUR_3) != null
			&& !req.getParameter(UUR_3).equals("")) {
		uur3 = (req.getParameter(UUR_3));
	} else {
		uur3 = "N";

	}
	if (req.getParameter(UUR_2) != null
			&& !req.getParameter(UUR_2).equals("")) {
		uur2 = (req.getParameter(UUR_2));
	} else {
		uur2 = "N";

	}
	if (req.getParameter(UUR_1) != null
			&& !req.getParameter(UUR_1).equals("")) {
		uur1 = (req.getParameter(UUR_1));
	} else {
		uur1 = "N";

	}

	if (req.getParameter(UUL_8) != null
			&& !req.getParameter(UUL_8).equals("")) {
		uul8 = (req.getParameter(UUL_8));
	} else {
		uul8 = "N";

	}
	if (req.getParameter(UUL_7) != null
			&& !req.getParameter(UUL_7).equals("")) {
		uul7 = (req.getParameter(UUL_7));

	} else {
		uul7 = "N";

	}
	if (req.getParameter(UUL_6) != null
			&& !req.getParameter(UUL_6).equals("")) {
		uul6 = (req.getParameter(UUL_6));
	} else {
		uul6 = "N";

	}
	if (req.getParameter(UUL_5) != null
			&& !req.getParameter(UUL_5).equals("")) {
		uul5 = (req.getParameter(UUL_5));
	} else {
		uul5 = "N";

	}
	if (req.getParameter(UUL_4) != null
			&& !req.getParameter(UUL_4).equals("")) {
		uul4 = (req.getParameter(UUL_4));
	} else {
		uul4 = "N";

	}
	if (req.getParameter(UUL_3) != null
			&& !req.getParameter(UUL_3).equals("")) {
		uul3 = (req.getParameter(UUL_3));
	} else {
		uul3 = "N";

	}
	if (req.getParameter(UUL_2) != null
			&& !req.getParameter(UUL_2).equals("")) {
		uul2 = (req.getParameter(UUL_2));
	} else {
		uul2 = "N";

	}
	if (req.getParameter(UUL_1) != null
			&& !req.getParameter(UUL_1).equals("")) {
		uul1 = (req.getParameter(UUL_1));
	} else {
		uul1 = "N";

	}
	if (req.getParameter(ULR_8) != null
			&& !req.getParameter(ULR_8).equals("")) {
		ulr8 = (req.getParameter(ULR_8));
	} else {
		ulr8 = "N";

	}

	if (req.getParameter(ULR_7) != null
			&& !req.getParameter(ULR_7).equals("")) {
		ulr7 = (req.getParameter(ULR_7));
	} else {
		ulr7 = "N";

	}
	if (req.getParameter(ULR_6) != null
			&& !req.getParameter(ULR_6).equals("")) {
		ulr6 = (req.getParameter(ULR_6));
	} else {
		ulr6 = "N";

	}
	if (req.getParameter(ULR_5) != null
			&& !req.getParameter(ULR_5).equals("")) {
		ulr5 = (req.getParameter(ULR_5));
	} else {
		ulr5 = "N";

	}
	if (req.getParameter(ULR_4) != null
			&& !req.getParameter(ULR_4).equals("")) {
		ulr4 = (req.getParameter(ULR_4));
	} else {
		ulr4 = "N";

	}
	if (req.getParameter(ULR_3) != null
			&& !req.getParameter(ULR_3).equals("")) {
		ulr3 = (req.getParameter(ULR_3));
	} else {
		ulr3 = "N";

	}
	if (req.getParameter(ULR_2) != null
			&& !req.getParameter(ULR_2).equals("")) {
		ulr2 = (req.getParameter(ULR_2));
	} else {
		ulr2 = "N";

	}
	if (req.getParameter(ULR_1) != null
			&& !req.getParameter(ULR_1).equals("")) {
		ulr1 = (req.getParameter(ULR_1));
	} else {
		ulr1 = "N";

	}

	if (req.getParameter(ULL_8) != null
			&& !req.getParameter(ULL_8).equals("")) {
		ull8 = (req.getParameter(ULL_8));
	} else {
		ull8 = "N";

	}
	if (req.getParameter(ULL_7) != null
			&& !req.getParameter(ULL_8).equals("")) {
		ull7 = (req.getParameter(ULL_7));
	} else {
		ull7 = "N";

	}
	if (req.getParameter(ULL_6) != null
			&& !req.getParameter(ULL_6).equals("")) {
		ull6 = (req.getParameter(ULL_6));
	} else {
		ull6 = "N";

	}
	if (req.getParameter(ULL_5) != null
			&& !req.getParameter(ULL_5).equals("")) {
		ull5 = (req.getParameter(ULL_5));
	} else {
		ull5 = "N";

	}
	if (req.getParameter(ULL_4) != null
			&& !req.getParameter(ULL_4).equals("")) {
		ull4 = (req.getParameter(ULL_4));
	} else {
		ull4 = "N";

	}
	if (req.getParameter(ULL_3) != null
			&& !req.getParameter(ULL_3).equals("")) {
		ull3 = (req.getParameter(ULL_3));
	} else {
		ull3 = "N";

	}
	if (req.getParameter(ULL_2) != null
			&& !req.getParameter(ULL_2).equals("")) {
		ull2 = (req.getParameter(ULL_2));
	} else {
		ull2 = "N";

	}
	if (req.getParameter(ULL_1) != null
			&& !req.getParameter(ULL_1).equals("")) {
		ull1 = (req.getParameter(ULL_1));
	} else {
		ull1 = "N";

	}

	// ////////////////////////

	if (req.getParameter(MUR_8) != null
			&& !req.getParameter(MUR_8).equals("")) {
		mur8 = (req.getParameter(MUR_8));

	} else {
		mur8 = "N";

	}
	if (req.getParameter(MUR_7) != null
			&& !req.getParameter(MUR_7).equals("")) {
		mur7 = (req.getParameter(MUR_7));
	} else {
		mur7 = "N";

	}
	if (req.getParameter(MUR_6) != null
			&& !req.getParameter(MUR_6).equals("")) {
		mur6 = (req.getParameter(MUR_6));
	} else {
		mur6 = "N";

	}
	if (req.getParameter(MUR_5) != null
			&& !req.getParameter(MUR_5).equals("")) {
		mur5 = (req.getParameter(MUR_5));
	} else {
		mur5 = "N";

	}
	if (req.getParameter(MUR_4) != null
			&& !req.getParameter(MUR_4).equals("")) {
		mur4 = (req.getParameter(MUR_4));
	} else {
		mur4 = "N";

	}
	if (req.getParameter(MUR_3) != null
			&& !req.getParameter(MUR_3).equals("")) {
		mur3 = (req.getParameter(MUR_3));
	} else {
		mur3 = "N";

	}
	if (req.getParameter(MUR_2) != null
			&& !req.getParameter(MUR_2).equals("")) {
		mur2 = (req.getParameter(MUR_2));
	} else {
		mur2 = "N";

	}
	if (req.getParameter(MUR_1) != null
			&& !req.getParameter(MUR_1).equals("")) {
		mur1 = (req.getParameter(MUR_1));
	} else {
		mur1 = "N";

	}

	if (req.getParameter(MUL_8) != null
			&& !req.getParameter(MUL_8).equals("")) {
		mul8 = (req.getParameter(MUL_8));
	} else {
		mul8 = "N";

	}
	if (req.getParameter(MUL_7) != null
			&& !req.getParameter(MUL_7).equals("")) {
		mul7 = (req.getParameter(MUL_7));

	} else {
		mul7 = "N";

	}
	if (req.getParameter(MUL_6) != null
			&& !req.getParameter(MUL_6).equals("")) {
		mul6 = (req.getParameter(MUL_6));
	} else {
		mul6 = "N";

	}
	if (req.getParameter(MUL_5) != null
			&& !req.getParameter(MUL_5).equals("")) {
		mul5 = (req.getParameter(MUL_5));
	} else {
		mul5 = "N";

	}
	if (req.getParameter(MUL_4) != null
			&& !req.getParameter(MUL_4).equals("")) {
		mul4 = (req.getParameter(MUL_4));
	} else {
		mul4 = "N";

	}
	if (req.getParameter(MUL_3) != null
			&& !req.getParameter(MUL_3).equals("")) {
		mul3 = (req.getParameter(MUL_3));
	} else {
		mul3 = "N";

	}
	if (req.getParameter(MUL_2) != null
			&& !req.getParameter(MUL_2).equals("")) {
		mul2 = (req.getParameter(MUL_2));
	} else {
		mul2 = "N";

	}
	if (req.getParameter(MUL_1) != null
			&& !req.getParameter(MUL_1).equals("")) {
		mul1 = (req.getParameter(MUL_1));
	} else {
		mul1 = "N";

	}
	if (req.getParameter(MLR_8) != null
			&& !req.getParameter(MLR_8).equals("")) {
		mlr8 = (req.getParameter(MLR_8));
	} else {
		mlr8 = "N";

	}

	if (req.getParameter(MLR_7) != null
			&& !req.getParameter(MLR_7).equals("")) {
		mlr7 = (req.getParameter(MLR_7));
	} else {
		mlr7 = "N";

	}
	if (req.getParameter(MLR_6) != null
			&& !req.getParameter(MLR_6).equals("")) {
		mlr6 = (req.getParameter(MLR_6));
	} else {
		mlr6 = "N";

	}
	if (req.getParameter(MLR_5) != null
			&& !req.getParameter(MLR_5).equals("")) {
		mlr5 = (req.getParameter(MLR_5));
	} else {
		mlr5 = "N";

	}

	if (req.getParameter(MLR_4) != null
			&& !req.getParameter(MLR_4).equals("")) {
		mlr4 = (req.getParameter(MLR_4));
	} else {
		mlr4 = "N";

	}
	if (req.getParameter(MLR_3) != null
			&& !req.getParameter(MLR_3).equals("")) {
		mlr3 = (req.getParameter(MLR_3));
	} else {
		mlr3 = "N";

	}

	if (req.getParameter(MLR_2) != null
			&& !req.getParameter(MLR_2).equals("")) {
		mlr2 = (req.getParameter(MLR_2));
	} else {
		mlr2 = "N";

	}
	if (req.getParameter(MLR_1) != null
			&& !req.getParameter(MLR_1).equals("")) {
		mlr1 = (req.getParameter(MLR_1));
	} else {
		mlr1 = "N";

	}

	if (req.getParameter(MLL_8) != null
			&& !req.getParameter(MLL_8).equals("")) {
		mll8 = (req.getParameter(MLL_8));
	} else {
		mll8 = "N";

	}
	if (req.getParameter(MLL_7) != null
			&& !req.getParameter(MLL_7).equals("")) {
		mll7 = (req.getParameter(MLL_7));
	} else {
		mll7 = "N";

	}
	if (req.getParameter(MLL_5) != null
			&& !req.getParameter(MLL_6).equals("")) {
		mll6 = (req.getParameter(MLL_6));
	} else {
		mll6 = "N";

	}
	if (req.getParameter(MLL_5) != null
			&& !req.getParameter(MLL_5).equals("")) {
		mll5 = (req.getParameter(MLL_5));
	} else {
		mll5 = "N";

	}
	if (req.getParameter(MLL_4) != null
			&& !req.getParameter(MLL_4).equals("")) {
		mll4 = (req.getParameter(MLL_4));
	} else {
		mll4 = "N";

	}
	if (req.getParameter(MLL_3) != null
			&& !req.getParameter(MLL_3).equals("")) {
		mll3 = (req.getParameter(MLL_3));
	} else {
		mll3 = "N";

	}
	if (req.getParameter(MLL_2) != null
			&& !req.getParameter(MLL_2).equals("")) {
		mll2 = (req.getParameter(MLL_2));
	} else {
		mll2 = "N";

	}
	if (req.getParameter(MLL_1) != null
			&& !req.getParameter(MLL_1).equals("")) {
		mll1 = (req.getParameter(MLL_1));
	} else {
		mll1 = "N";

	}

	sur8 = dur8 + "" + mur8 + "" + uur8;

	sur7 = dur7 + "" + mur7 + "" + uur7;

	sur6 = dur6 + "" + mur6 + "" + uur6;
	sur5 = dur5 + "" + mur5 + "" + uur5;
	sur4 = dur4 + "" + mur4 + "" + uur4;
	sur3 = dur3 + "" + mur3 + "" + uur3;
	sur2 = dur2 + "" + mur2 + "" + uur2;
	sur1 = dur1 + "" + mur2 + "" + uur1;

	sul8 = dul8 + "" + mul8 + "" + uul8;
	sul7 = dul7 + "" + mul7 + "" + uul7;

	sul6 = dul6 + "" + mul6 + "" + uul6;
	sul5 = dul5 + "" + mul5 + "" + uul5;
	sul4 = dul4 + "" + mul4 + "" + uul4;
	sul3 = dul3 + "" + mul3 + "" + uul3;
	sul2 = dul2 + "" + mul2 + "" + uul2;
	sul1 = dul1 + "" + mul1 + "" + uul1;

	slr8 = dlr8 + "" + mlr8 + "" + ulr8;
	slr7 = dlr7 + "" + mlr7 + "" + ulr7;
	slr6 = dlr6 + "" + mlr6 + "" + ulr6;
	slr5 = dlr5 + "" + mlr5 + "" + ulr5;
	slr4 = dlr4 + "" + mlr4 + "" + ulr4;
	slr3 = dlr3 + "" + mlr3 + "" + ulr3;
	slr2 = dlr2 + "" + mlr2 + "" + ulr2;
	slr1 = dlr1 + "" + mlr2 + "" + ulr1;

	sll8 = dll8 + "" + mll8 + "" + ull8;
	sll7 = dll7 + "" + mll7 + "" + ull7;
	sll6 = dll6 + "" + mll6 + "" + ull6;
	sll5 = dll5 + "" + mll5 + "" + ull5;
	sll4 = dll4 + "" + mll4 + "" + ull4;
	sll3 = dll3 + "" + mll3 + "" + ull3;
	sll2 = dll2 + "" + mll2 + "" + ull2;
	sll1 = dll1 + "" + mll2 + "" + ull1;
	MbTypeOfEntryMaster mbTypeOfEntryMaster = new MbTypeOfEntryMaster();
	mbTypeOfEntryMaster.setId(typeOfEntry);
	generalMap.put("serviceNo", serviceNo);
	generalMap.put("pojoPropertyCode", "serviceNo");
	generalMap.put("pojoName", "MasMedicalExaminationReportOnEntry");
	String message = "";
	String jsp = "";
	Boolean successfullyAdded = false;
	masMedicalBoardProceedings.setInnerEarL(innerEarL);
	masMedicalBoardProceedings.setHearingBothCv(hearingBothCV);
	masMedicalBoardProceedings.setDateSpecialExam(eyeDate);
	masMedicalBoardProceedings.setTotalDefectiveTeeth(totalDefectiveTeeth);
	masMedicalBoardProceedings.setTotalTeeth(totalTeeth);
	masMedicalBoardProceedings.setMissingTeeth(missingTeeth);
	masMedicalBoardProceedings.setUnservisableTeeth(unserviceableTeeth);
	masMedicalBoardProceedings.setDenstlPoint(DenstalPoint);
	masMedicalBoardProceedings.setYearlySerialNo(serviceNo);
	// masMedicalBoardProceedings.setMonthlySerialNo(rank);
	masMedicalBoardProceedings.setEntryDate(entryDate);

	masMedicalBoardProceedings.setTypeOfEntry(mbTypeOfEntryMaster);
	// masMedicalBoardProceedings.setBatchNo(betchNo);
	masMedicalBoardProceedings.setChestNo(chestNo);
	masMedicalBoardProceedings.setRollNo(rollNo);
	masMedicalBoardProceedings.setMedicalStatus(medicalStatus);
	masMedicalBoardProceedings.setNameInFull(fullName);
	masMedicalBoardProceedings.setDateOfBirth(dateOfBirth);
	if (maritialStatus != 0) {
		MasMaritalStatus masMaritalStatus = new MasMaritalStatus();
		masMaritalStatus.setId(maritialStatus);
		masMedicalBoardProceedings.setMaritalStatus(masMaritalStatus);
	}
	masMedicalBoardProceedings.setPNo(pNo);

	masMedicalBoardProceedings.setHoursOfFlown(hoursOfFlown);
	masMedicalBoardProceedings.setParmanentAddress(permanentAddress);
	masMedicalBoardProceedings.setIdentificationMarks1(identification1);
	masMedicalBoardProceedings.setIdentificationMarks2(identification2);
	masMedicalBoardProceedings.setArmsCorps(armsCrops);
	masMedicalBoardProceedings.setDateOfCompletion(dateOfCompletion);
	masMedicalBoardProceedings.setDocumentForwardDate(documentForwardDate);
	masMedicalBoardProceedings.setDateOfReporting(dateOfReporting);
	masMedicalBoardProceedings.setDocumentForwardTo(documentForwardTo);
	masMedicalBoardProceedings.setFromWhereHeReport(fromWhereHeReport);
	masMedicalBoardProceedings.setHypertension(hypertension);
	masMedicalBoardProceedings.setHeartDiabetes(heartDisease);
	masMedicalBoardProceedings.setDiabetes(diabetes);
	masMedicalBoardProceedings.setBleedingDisorder(bleedingDisorder);
	masMedicalBoardProceedings.setMentalDisease(mentalDisease);
	masMedicalBoardProceedings.setNightBlindness(nightBlindness);
	masMedicalBoardProceedings.setChronicBronchitis(asthama);
	masMedicalBoardProceedings.setDischargeFromEars(dischargeFrom);
	masMedicalBoardProceedings.setPleurisy(plesury);
	masMedicalBoardProceedings.setAnyOtherEarDisease(earDieses);
	masMedicalBoardProceedings.setRheumatismFrequentSorethroats(rheumatism);
	masMedicalBoardProceedings.setFrequentCoughColdSinusitis(frequentCough);
	masMedicalBoardProceedings.setChronicIndigestion(chronicIndigestion);
	masMedicalBoardProceedings
			.setNervousBreakdownMentalIllness(nervousBrakdown);
	masMedicalBoardProceedings.setKidneyBladderTrouble(kidenyBladder);
	masMedicalBoardProceedings.setFitsFaintingAttack(fitsFaintinngAttacks);
	masMedicalBoardProceedings.setStd(std);
	masMedicalBoardProceedings.setSevereHeadInjury(serveHeadInjury);
	masMedicalBoardProceedings.setJaundice(joundice);
	masMedicalBoardProceedings.setAirSeaCarTrainSickness(sickness);
	masMedicalBoardProceedings.setBreastDiseaseDischarge(breastDisease);
	masMedicalBoardProceedings.setTrachoma(trachoma);
	masMedicalBoardProceedings.setAmenorrhoeaDysmenonhoea(amenorrhoea);
	masMedicalBoardProceedings.setNightBindness(nightbindness);
	masMedicalBoardProceedings.setMenonhagia(menirrhagia);
	masMedicalBoardProceedings
			.setLaserTreatementSurgeryForEye(laserTeartement);
	masMedicalBoardProceedings.setPregnancy(pregnancy);
	masMedicalBoardProceedings.setAnyOtherEyeDisease(eyeDisease);
	masMedicalBoardProceedings.setAbortion(abortion);
	masMedicalBoardProceedings
			.setBeenrejectedAsMedicallyUnfitForAnyBranch(rejectedAsUnfit);
	masMedicalBoardProceedings
			.setDischargeAsMedicallyUnfitForAnyBranch(dischargeMedicallyUnfit);
	masMedicalBoardProceedings
			.setAdmittedInHospitalForAnyIllnessOperationOrInjury(adimmitedInHospitalFirIllness);

	masMedicalBoardProceedings
			.setStateTheNatureOfDiseaseDuration(stateNature);
	masMedicalBoardProceedings
			.setAnyOtherInformationAboutYourHealth(otherInform);
	masMedicalBoardProceedings.setHeight(height);
	masMedicalBoardProceedings.setWeight(weight);
	masMedicalBoardProceedings.setAcceptable(acceptableKg);
	masMedicalBoardProceedings.setLegLength(leglength);
	masMedicalBoardProceedings.setAppearance(appereance);
	masMedicalBoardProceedings.setAlbumin(albumin);
	masMedicalBoardProceedings.setSugar(sugar);
	masMedicalBoardProceedings.setAdmissionStatus("n");
	masMedicalBoardProceedings.setSpecialistOpinnionStatus("n");

	masMedicalBoardProceedings.setSpGravity(spGraviry);
	masMedicalBoardProceedings.setHbPercentage(hbPercentage);
	masMedicalBoardProceedings.setAnyOtherInvCarriedOut(anyOtherInv);
	masMedicalBoardProceedings.setPhysique(physique);
	masMedicalBoardProceedings.setSkin(skin);
	masMedicalBoardProceedings.setAbdomen(abdomen);
	masMedicalBoardProceedings.setHeartSize(heartSize);
	masMedicalBoardProceedings.setSounds(sound);
	masMedicalBoardProceedings.setRhythm(rhythm);
	masMedicalBoardProceedings.setArterialWalls(arterialWalls);
	masMedicalBoardProceedings.setPulseRates(pulseRates);
	masMedicalBoardProceedings.setBp(bp);
	masMedicalBoardProceedings.setChestMeasurement(fullExpension);
	masMedicalBoardProceedings.setRangeOfExpension(rangeOfExpension);
	masMedicalBoardProceedings.setSelfBalancingR(selfBalR);
	masMedicalBoardProceedings.setSelfBalancingL(selfBalL);
	masMedicalBoardProceedings.setSpeechMentalCapacity(speechMental);
	masMedicalBoardProceedings.setEndocrineCondition(endocrinCond);
	masMedicalBoardProceedings.setAnyOtheAbnormalities(otherAbnormalities);
	masMedicalBoardProceedings.setRemarks(medicinRemarks);
	masMedicalBoardProceedings.setFingers(finger);
	masMedicalBoardProceedings.setHand(hand);
	masMedicalBoardProceedings.setWrists(wrist);
	masMedicalBoardProceedings.setElbows(elbows);
	masMedicalBoardProceedings.setShoulderGirdles(shoulderGridles);
	masMedicalBoardProceedings.setCervical(cercival);
	masMedicalBoardProceedings.setDorsalVertebrate(dorsalVertebrate);
	masMedicalBoardProceedings.setHullux(hullux);
	masMedicalBoardProceedings.setValgus(valgus);
	masMedicalBoardProceedings.setRigigus(riggus);
	masMedicalBoardProceedings.setFlatFeet(flatFeet);
	masMedicalBoardProceedings.setJoints(joints);
	masMedicalBoardProceedings.setPelvis(pelvis);
	masMedicalBoardProceedings.setGail(gail);
	masMedicalBoardProceedings.setLumber(lumberScaler);
	masMedicalBoardProceedings.setRoccyxVarocose(roccyxVericose);
	masMedicalBoardProceedings.setHydrocele(hydrocele);
	masMedicalBoardProceedings.setVaricocele(varicocele);
	masMedicalBoardProceedings.setUnderscendedTest(underScende);
	masMedicalBoardProceedings.setHemorrhoids(hemonhoids);
	masMedicalBoardProceedings.setHerniaMusic(herinaMusic);
	masMedicalBoardProceedings.setBreasts(breasts);
	masMedicalBoardProceedings.setRemarksLowerlimbs(surgeryRemarks);
	masMedicalBoardProceedings.setRespiratorySystem(respatorySystem);
	masMedicalBoardProceedings.setWithGlassesLDistant(withglassesDistantL);
	masMedicalBoardProceedings.setWithGlassesRDistant(withGlassesDistantR);
	masMedicalBoardProceedings
			.setWithoutGlassesLDistant(withoutGlassesDistantL);
	masMedicalBoardProceedings
			.setWthoutGlassesRDistant(withoutGlassesDistantR);
	masMedicalBoardProceedings.setWithGlassesLNearvision(withGlassesNearL);
	masMedicalBoardProceedings.setWithGlassesRNearvision(withGlassesNearR);
	masMedicalBoardProceedings
			.setWithoutGlassesLNearvision(withoutGlassesNearL);
	masMedicalBoardProceedings
			.setWithoutGlassesRNearvision(withoutGlassesNearR);
	masMedicalBoardProceedings.setEvidenceOfTrachoma(evidienceOfTrachoma);
	masMedicalBoardProceedings.setBinocularVisionGrade(binocular);
	masMedicalBoardProceedings
			.setManifestHypermetropia(manifestHypermetropia);
	masMedicalBoardProceedings.setCoverTest(coverTest);
	masMedicalBoardProceedings.setDiaphragmTest(diaphragmTest);
	masMedicalBoardProceedings.setFundAndMedia(fundMedia);
	masMedicalBoardProceedings.setFields(fields);
	masMedicalBoardProceedings.setNightVisualCapacity(nightVisualCapacity);
	masMedicalBoardProceedings.setConvergenceC(convergenceC);
	masMedicalBoardProceedings.setConvergenceSc(convergenceCP);
	masMedicalBoardProceedings.setAccommodationR(accommodationR);
	masMedicalBoardProceedings.setAccommodationL(accommodationL);
	masMedicalBoardProceedings.setRemarksSpecialExam(eyeRemarks);
	masMedicalBoardProceedings.setHearingRcv(hearingRCV);
	masMedicalBoardProceedings.setHearingLcv(hearingLCV);
	masMedicalBoardProceedings.setEarHearingRfw(hearingRFW);
	masMedicalBoardProceedings.setEarHearingLfw(hearingLFW);
	masMedicalBoardProceedings.setEarHearingBothFw(hearingBothFW);
	masMedicalBoardProceedings.setExternalEarR(externalEarR);
	masMedicalBoardProceedings.setExternalEarL(externalEarL);
	masMedicalBoardProceedings.setMiddleEarR(middleEarR);
	masMedicalBoardProceedings.setMiddleEar(middleEarL);

	masMedicalBoardProceedings.setInnerEarR(innerEarR);
	masMedicalBoardProceedings.setAudiometryRecord(audiometryRecord);
	masMedicalBoardProceedings.setNose(nose);
	masMedicalBoardProceedings.setThroat(throatEar);
	masMedicalBoardProceedings.setRemarksEar(earReamrks);
	masMedicalBoardProceedings.setEarDate(earDate);
	masMedicalBoardProceedings.setDateTeath(dentalDate);
	masMedicalBoardProceedings.setRemarksTeath(dentalRemarks);
	masMedicalBoardProceedings.setReferToMH(denatlToMH);
	masMedicalBoardProceedings.setMenstrualHistory(menstrualHistory);
	masMedicalBoardProceedings.setNoOfPregnancies(noOfPregnancy);
	masMedicalBoardProceedings.setNoOfAbortions(noOfAbortion);
	masMedicalBoardProceedings.setNoOfChildren(noOfChildren);
	masMedicalBoardProceedings.setLastConfinementDate(lastCondinement);
	masMedicalBoardProceedings.setVaginalDischarge(vaginalDischarge);
	masMedicalBoardProceedings.setProlapse(prolapse);
	masMedicalBoardProceedings.setUsgAbdomen(usgAbortion);
	masMedicalBoardProceedings.setGynaecologyDate(gyanaecologyDate);
	masMedicalBoardProceedings.setRemarksGynaecology(gyanaecologyRemarks);

	masMedicalBoardProceedings
			.setMedicalBoardFindings(medicalBoardExamination);
	masMedicalBoardProceedings
			.setDateMedicalBoardExam(medicalBoardExaminationDate);
	masMedicalBoardProceedings.setLmp(lmp);
	if (medicalBoardExaminationPlace != 0) {
		MasUnit masUnit1 = new MasUnit();
		masUnit1.setId(medicalBoardExaminationPlace);
		masMedicalBoardProceedings.setPlaceMedicalBoardExam(masUnit1);
	}
	masMedicalBoardProceedings
			.setMedicalBoardSubsequentFind(subsequentMedicalBoardExam);
	masMedicalBoardProceedings
			.setDateMedicalBoardSubsequent(subsequentMedicalBoardExamDate);
	if (subsequentMedicalBoardExamPlace != 0) {
		MasUnit masUnit2 = new MasUnit();
		masUnit2.setId(subsequentMedicalBoardExamPlace);
		masMedicalBoardProceedings.setPlaceMedicalBoardSubsequent(masUnit2);
	}
	masMedicalBoardProceedings.setApprovingAuthority(ApprovingAuthority);
	masMedicalBoardProceedings
			.setDateApprovingAuthority(ApprovingAuthorityDate);
	if (ApprovingAuthorityPlace != 0) {
		MasUnit masUnit3 = new MasUnit();
		masUnit3.setId(ApprovingAuthorityPlace);
		masMedicalBoardProceedings.setPlaceApprovingAuthority(masUnit3);
	}
	masMedicalBoardProceedings.setSurgeryDate(surgeyDate);
	masMedicalBoardProceedings.setMediceExamDate(medicinExamDate);
	masMedicalBoardProceedings.setNearVisionWithGlassCp(withGlassesNearCP);
	masMedicalBoardProceedings
			.setNearVisionWithoutGlassCp(withoutGlassesNearCP);
	masMedicalBoardProceedings.setUR1(sur1);
	masMedicalBoardProceedings.setUR2(sur2);
	masMedicalBoardProceedings.setUR3(sur3);
	masMedicalBoardProceedings.setUR4(sur4);
	masMedicalBoardProceedings.setUR5(sur5);
	masMedicalBoardProceedings.setUR6(sur6);
	masMedicalBoardProceedings.setUR7(sur7);
	masMedicalBoardProceedings.setUR8(sur8);

	masMedicalBoardProceedings.setUL1(sul1);
	masMedicalBoardProceedings.setUL2(sul2);
	masMedicalBoardProceedings.setUL3(sul3);
	masMedicalBoardProceedings.setUL4(sul4);
	masMedicalBoardProceedings.setUL5(sul5);
	masMedicalBoardProceedings.setUL6(sul6);
	masMedicalBoardProceedings.setUL7(sul7);
	masMedicalBoardProceedings.setUL8(sul8);

	masMedicalBoardProceedings.setLR1(slr1);
	masMedicalBoardProceedings.setLR2(slr2);
	masMedicalBoardProceedings.setLR3(slr3);
	masMedicalBoardProceedings.setLR4(slr4);
	masMedicalBoardProceedings.setLR5(slr5);
	masMedicalBoardProceedings.setLR6(slr6);
	masMedicalBoardProceedings.setLR7(slr7);
	masMedicalBoardProceedings.setLR8(slr8);

	masMedicalBoardProceedings.setLL1(sll1);
	masMedicalBoardProceedings.setLL2(sll2);
	masMedicalBoardProceedings.setLL3(sll3);
	masMedicalBoardProceedings.setLL4(sll4);
	masMedicalBoardProceedings.setLL5(sll5);
	masMedicalBoardProceedings.setLL6(sll6);
	masMedicalBoardProceedings.setLL7(sll7);
	masMedicalBoardProceedings.setLL8(sll8);
	masMedicalBoardProceedings.setLastChangedBy(lastChangedBy);
	masMedicalBoardProceedings.setLastChangedDate(lastChangedDate);
	masMedicalBoardProceedings.setLastChangedTime(lastChangedTime);
	masMedicalBoardProceedings.setServiceNo(serviceNo);
	masMedicalBoardProceedings.setServiceiaf(serviceiaf);
	masMedicalBoardProceedings.setTypeofcommision(typeOfCommunication);
	masMedicalBoardProceedings.setDateofcommun(dateofcommun);
	masMedicalBoardProceedings.setTotalService(totalservice);
	masMedicalBoardProceedings.setPastmedicalhistory(pastmedicalhistory);
	masMedicalBoardProceedings
			.setPresentmedicalhistory(presentmedicalhistory);
	masMedicalBoardProceedings.setIdealweight(idealweight);
	masMedicalBoardProceedings.setOverweight(overweight);
	masMedicalBoardProceedings.setWaist(waist);
	masMedicalBoardProceedings.setChestfullexpansion(chestfullexpansion);
	masMedicalBoardProceedings.setBhi(bhi);
	masMedicalBoardProceedings.setRangeofexpansion(rangeofexpansion);
	masMedicalBoardProceedings.setBodyfat(bodyfat);
	masMedicalBoardProceedings.setSignfoldthickness(signfoldthickness);
	masMedicalBoardProceedings.setSportman(sportman);
	masMedicalBoardProceedings.setLastame(lastame);
	masMedicalBoardProceedings.setActualweight(actualweight);
	masMedicalBoardProceedings.setSourceOfData("MEDNET");
	masMedicalBoardProceedings.setHicStatus("n");
	if (req.getParameter(SERVICE_TYPE_ID) != null
			&& !(req.getParameter(SERVICE_TYPE_ID)).equals("0")) {
		MasServiceType serviceType = new MasServiceType();
		serviceType.setId(Integer.parseInt(req
				.getParameter(SERVICE_TYPE_ID)));
		masMedicalBoardProceedings.setServiceType(serviceType);
	}
	if (req.getParameter(RANK_ID) != null
			&& !(req.getParameter(RANK_ID)).equals("0")) {
		MasRank masRank = new MasRank();
		masRank.setId(Integer.parseInt(req.getParameter(RANK_ID)));
		masMedicalBoardProceedings.setRank(masRank);
	}
	if (req.getParameter(TRADE_ID) != null) {
		MasTrade masTrade = new MasTrade();
		masTrade.setId(Integer.parseInt(req.getParameter(TRADE_ID)));
		masMedicalBoardProceedings.setTrade(masTrade);
	}
	if (req.getParameter(UNIT_ID) != null
			&& !(req.getParameter(UNIT_ID)).equals("0")) {
		MasUnit unitObj = new MasUnit();
		unitObj.setId(Integer.parseInt(req.getParameter(UNIT_ID)));
		masMedicalBoardProceedings.setUnit(unitObj);
	}
	if (req.getParameter("apparentAge") != null
			&& !req.getParameter("apparentAge").equals("")) {
		String aparentage = req.getParameter("apparentAge");
		masMedicalBoardProceedings.setApparentAge(aparentage
				.substring(0, 2));
	}
	if (req.getParameter(VISIT_ID) != null
			&& !(req.getParameter(VISIT_ID)).equals("0")) {
		Visit visit = new Visit();
		visit.setId(Integer.parseInt(req.getParameter(VISIT_ID)));
		if (req.getParameter("apparentAge") == null) {
			if (masMedicalBoardProceedings.getVisit() != null
					&& masMedicalBoardProceedings.getVisit().getAge() != null) {

				masMedicalBoardProceedings
						.setApparentAge(masMedicalBoardProceedings
								.getVisit().getAge().substring(0, 2));
			}
		}
		masMedicalBoardProceedings.setVisit(visit);
	}
	if (req.getParameter(HIN_ID) != null
			&& !(req.getParameter(HIN_ID)).equals("0")) {
		Patient patient = new Patient();
		patient.setId(Integer.parseInt(req.getParameter(HIN_ID)));
		masMedicalBoardProceedings.setHin(patient);
		mapForDS.put("hinId", Integer.parseInt(req.getParameter(HIN_ID)));
	}
	if (req.getParameter(FATHER_NAME) != null) {
		masMedicalBoardProceedings.setFatherName(req
				.getParameter(FATHER_NAME));
	}
	if (req.getParameter(RELEVANT_FAMILY_HISTORY) != null) {
		masMedicalBoardProceedings.setRelevantFamilyHistory(req
				.getParameter(RELEVANT_FAMILY_HISTORY));
	}
	if (req.getParameter(DEFECTS_NOT_TO_CAUSE_REJECTION) != null) {
		masMedicalBoardProceedings.setDefectNotToCauseRejection(req
				.getParameter(DEFECTS_NOT_TO_CAUSE_REJECTION));
	}
	if (req.getParameter(FOUND_FIT_IN_CATEGORY) != null) {
		masMedicalBoardProceedings.setFoundFitInCategory(req
				.getParameter(FOUND_FIT_IN_CATEGORY));
	}
	if (req.getParameter(APPOINTMENT_DATE) != null
			&& !req.getParameter(APPOINTMENT_DATE).equals("")) {
		masMedicalBoardProceedings.setAppointmentDate(HMSUtil
				.convertStringTypeDateToDateType(req
						.getParameter(APPOINTMENT_DATE)));
	}
	if (req.getParameter(APPOINTMENT_TIME) != null
			&& !req.getParameter(APPOINTMENT_TIME).equals("")) {
		masMedicalBoardProceedings.setAppointmentTime(req
				.getParameter(APPOINTMENT_TIME));
	}
	if (req.getParameter("particularOfPreviousService") != null
			&& !(req.getParameter("particularOfPreviousService").equals(""))) {
		masMedicalBoardProceedings.setParticularOfPreviousService(req
				.getParameter("particularOfPreviousService"));
	}
	if (req.getParameter("Hips") != null
			&& !(req.getParameter("Hips").equals(""))) {
		masMedicalBoardProceedings.setHips(req.getParameter("Hips"));
	}
	if (req.getParameter("WHR") != null
			&& !(req.getParameter("WHR").equals(""))) {
		masMedicalBoardProceedings.setWhr(req.getParameter("WHR"));
	}
	if (req.getParameter("medicalExamType") != null
			&& !req.getParameter("medicalExamType").equals("")) {
		masMedicalBoardProceedings.setMedicalExamType(req
				.getParameter("medicalExamType"));
		mapForDS
				.put("medicalExamType", req.getParameter("medicalExamType"));
	}
	if (req.getParameter("MissTeeth") != null
			&& !req.getParameter("MissTeeth").equals("")) {
		masMedicalBoardProceedings.setMissTeeth(req
				.getParameter("MissTeeth"));
	}
	if (req.getParameter("UnserTeeth") != null
			&& !req.getParameter("UnserTeeth").equals("")) {
		masMedicalBoardProceedings.setUnserTeeth(req
				.getParameter("UnserTeeth"));
	}
	if (req.getParameter("Investigated") != null
			&& !req.getParameter("Investigated").equals("")) {
		masMedicalBoardProceedings.setInvestigated(req
				.getParameter("Investigated"));
	}
	if (req.getParameter(APPOINTMENT_TIME) != null
			&& !req.getParameter(APPOINTMENT_TIME).equals("")) {
		masMedicalBoardProceedings.setAppointmentTime(req
				.getParameter(APPOINTMENT_TIME));
	}
	if (req.getParameter(HIGHER_MENTAL_FUNCTION) != null
			&& !req.getParameter(HIGHER_MENTAL_FUNCTION).equals("")) {
		masMedicalBoardProceedings.setHigherMentalFunction(req
				.getParameter(HIGHER_MENTAL_FUNCTION));
	}
	if (req.getParameter(SPEECH) != null
			&& !req.getParameter(SPEECH).equals("")) {
		masMedicalBoardProceedings.setSpeech(req.getParameter(SPEECH));
	}
	if (req.getParameter(REFLEXES) != null
			&& !req.getParameter(REFLEXES).equals("")) {
		masMedicalBoardProceedings.setReflexes(req.getParameter(REFLEXES));
	}
	if (req.getParameter(TREMORS) != null
			&& !req.getParameter(TREMORS).equals("")) {
		masMedicalBoardProceedings.setTremors(req.getParameter(TREMORS));
	}
	if (req.getParameter(SELF_BALANCING_TEST) != null
			&& !req.getParameter(SELF_BALANCING_TEST).equals("")) {
		masMedicalBoardProceedings.setSelfBalancingTest(req
				.getParameter(SELF_BALANCING_TEST));
	}

	if (req.getParameter(CORONORY_RISK_FACTOR) != null
			&& !req.getParameter(CORONORY_RISK_FACTOR).equals("")) {
		masMedicalBoardProceedings.setCoronaryRiskFactor(req
				.getParameter(CORONORY_RISK_FACTOR));
	}
	if (req.getParameter("familyHistoryOther") != null
			&& !req.getParameter("familyHistoryOther").equals("")) {
		masMedicalBoardProceedings.setFmdm(req
				.getParameter("familyHistoryOther"));
	}
	if (req.getParameter(SIGNED_BY) != null
			&& !req.getParameter(SIGNED_BY).equals("")) {
		masMedicalBoardProceedings.setSignedBy(req.getParameter(SIGNED_BY));
	}
	if (req.getParameter(APPROVED_BY) != null
			&& !req.getParameter(APPROVED_BY).equals("")) {
		masMedicalBoardProceedings.setApprovedBy(req
				.getParameter(APPROVED_BY));
	}
	if (req.getParameter(SEND_TO) != null
			&& !req.getParameter(SEND_TO).equals("")) {
		masMedicalBoardProceedings.setSendTo(req.getParameter(SEND_TO));
	}
	if (req.getParameter("liver") != null
			&& !req.getParameter("liver").equals("")) {
		masMedicalBoardProceedings.setLiver(req.getParameter("liver"));
	}
	if (req.getParameter("spleen") != null
			&& !req.getParameter("spleen").equals("")) {
		masMedicalBoardProceedings.setSpleen(req.getParameter("spleen"));
	}
	if (req.getParameter("upperLimbs") != null
			&& !req.getParameter("upperLimbs").equals("")) {
		masMedicalBoardProceedings.setUpperLimbs(req
				.getParameter("upperLimbs"));
	}
	if (req.getParameter("locomotion") != null
			&& !req.getParameter("locomotion").equals("")) {
		masMedicalBoardProceedings.setLocomotion(req
				.getParameter("locomotion"));
	}
	if (req.getParameter("chestMeasurement") != null
			&& !req.getParameter("chestMeasurement").equals("")) {
		masMedicalBoardProceedings.setChestMeasurement(req
				.getParameter("chestMeasurement"));
	}
	if (req.getParameter("fullExpiration") != null
			&& !req.getParameter("fullExpiration").equals("")) {
		masMedicalBoardProceedings.setFullExpiration(req
				.getParameter("fullExpiration"));
	}
	if (req.getParameter("abnormalities") != null
			&& !req.getParameter("abnormalities").equals("")) {
		masMedicalBoardProceedings.setAbnormalities(req
				.getParameter("abnormalities"));
	}
	if (req.getParameter("otherAbnormalities") != null
			&& !req.getParameter("otherAbnormalities").equals("")) {
		masMedicalBoardProceedings.setAnyOtheAbnormalities(req
				.getParameter("otherAbnormalities"));
	}
	if (req.getParameter("anyEvidenceOfSkin") != null
			&& !req.getParameter("anyEvidenceOfSkin").equals("")) {
		masMedicalBoardProceedings.setAnyEvidenceOfSkin(req
				.getParameter("anyEvidenceOfSkin"));
	}
	if (req.getParameter("centralNervousSystem") != null
			&& !req.getParameter("centralNervousSystem").equals("")) {
		masMedicalBoardProceedings.setCentralNervousSystem(req
				.getParameter("centralNervousSystem"));
	}
	if (req.getParameter("mentalInstability") != null
			&& !req.getParameter("mentalInstability").equals("")) {
		masMedicalBoardProceedings.setMentalInstability(req
				.getParameter("mentalInstability"));
	}
	if (req.getParameter("essentialInstability") != null
			&& !req.getParameter("essentialInstability").equals("")) {
		masMedicalBoardProceedings.setEssentialInstability(req
				.getParameter("essentialInstability"));
	}
	if (req.getParameter("smoker") != null
			&& !req.getParameter("smoker").equals("")) {
		masMedicalBoardProceedings.setSmoker(req.getParameter("smoker"));
	}
	if (req.getParameter("drinker") != null
			&& !req.getParameter("drinker").equals("")) {
		masMedicalBoardProceedings.setDrinker(req.getParameter("drinker"));
	}
	if (req.getParameter("allergies") != null
			&& !req.getParameter("allergies").equals("")) {
		masMedicalBoardProceedings.setAllergies(req
				.getParameter("allergies"));
	}
	if (req.getParameter("locomoterSystem") != null
			&& !req.getParameter("locomoterSystem").equals("")) {
		masMedicalBoardProceedings.setLocomoterSystem(req
				.getParameter("locomoterSystem"));
		CocatHicNevreData = "LocomoterSystem" + ":"
				+ req.getParameter("locomoterSystem") + "/ ";
	} else {
		CocatHicNevreData = "LocomoterSystem" + ":" + "NA" + "/ ";
	}

	if (req.getParameter("spine") != null
			&& !req.getParameter("spine").equals("")) {
		masMedicalBoardProceedings.setSpine(req.getParameter("spine"));
		CocatHicNevreData += "Spine" + ":" + req.getParameter("spine")
				+ "/ ";
	} else {
		CocatHicNevreData += "Spine" + ":" + "NA" + "/ ";
	}
	if (req.getParameter("tympanicMembranceIntact") != null
			&& !req.getParameter("tympanicMembranceIntact").equals("")) {
		masMedicalBoardProceedings.setTympanicMembranceIntact(req
				.getParameter("tympanicMembranceIntact"));
	}
	if (req.getParameter(MOBILITYR) != null
			&& !req.getParameter(MOBILITYR).equals("")) {
		masMedicalBoardProceedings
				.setMobilityR(req.getParameter(MOBILITYR));
	}
	if (req.getParameter("noseThroatSinuses") != null
			&& !req.getParameter("noseThroatSinuses").equals("")) {
		masMedicalBoardProceedings.setNoseThroatSinuses(req
				.getParameter("noseThroatSinuses"));
	}

	if (req.getParameter(KNOWN_ALLERGY) != null
			&& !req.getParameter(KNOWN_ALLERGY).equals("")) {
		masMedicalBoardProceedings.setAllergies(req
				.getParameter(KNOWN_ALLERGY));
	}
	if (req.getParameter(BATCH_NO) != null
			&& !req.getParameter(BATCH_NO).equals("")) {
		masMedicalBoardProceedings.setBatchNo(req.getParameter(BATCH_NO));
	}
	if (req.getParameter("cmMdRemarks") != null
			&& !req.getParameter("cmMdRemarks").equals("")) {
		masMedicalBoardProceedings.setMdRemarks(req
				.getParameter("cmMdRemarks"));
	}
	if (req.getParameter(AUTHORITY_OF_BOARD) != null
			&& !req.getParameter(AUTHORITY_OF_BOARD).equals("")) {
		masMedicalBoardProceedings.setAuthority(req
				.getParameter(AUTHORITY_OF_BOARD));
	}
	if (req.getParameter(PLACE) != null
			&& !req.getParameter(PLACE).equals("")) {
		masMedicalBoardProceedings.setPlace(req.getParameter(PLACE));
	}
	if (req.getParameter(DATE_DISCHARGE) != null
			&& !req.getParameter(DATE_DISCHARGE).equals("")) {
		masMedicalBoardProceedings.setDateDischarge(HMSUtil
				.convertStringTypeDateToDateType(req
						.getParameter(DATE_DISCHARGE)));
	}
	if (req.getParameter(DATE_OF_RELEASE) != null
			&& !req.getParameter(DATE_OF_RELEASE).equals("")) {
		masMedicalBoardProceedings.setDateRelease(HMSUtil
				.convertStringTypeDateToDateType(req
						.getParameter(DATE_OF_RELEASE)));
	}
	if (req.getParameter(MARITAL_STATUS_ID) != null
			&& !req.getParameter(MARITAL_STATUS_ID).equals("")) {
		MasMaritalStatus maritalstatus = new MasMaritalStatus();
		maritalstatus.setId(Integer.parseInt(req
				.getParameter(MARITAL_STATUS_ID)));
		masMedicalBoardProceedings.setMaritalStatus(maritalstatus);

	}

	// if(req.getParameter(SERVICE_TYPE_ID) != null &&
	// !req.getParameter(SERVICE_TYPE_ID).equals("")){
	// masMedicalBoardProceedings.setBatchNo(req.getParameter(SERVICE_TYPE_ID));
	// }
	if (req.getParameter(DATE_DISEASE) != null
			&& !req.getParameter(DATE_DISEASE).equals("")) {
		masMedicalBoardProceedings.setDateDisease(HMSUtil
				.convertStringTypeDateToDateType(req
						.getParameter(DATE_DISEASE)));
	}
	if (req.getParameter(PLACE_DISEASE) != null
			&& !req.getParameter(PLACE_DISEASE).equals("")) {
		masMedicalBoardProceedings.setPlacedisease(req
				.getParameter(PLACE_DISEASE));
	}
	if (req.getParameter(WHERE_TREATED) != null
			&& !req.getParameter(WHERE_TREATED).equals("")) {
		masMedicalBoardProceedings.setWheretreated(req
				.getParameter(WHERE_TREATED));
	}
	if (req.getParameter(DATE_APPROXIMATE) != null
			&& !req.getParameter(DATE_APPROXIMATE).equals("")) {
		masMedicalBoardProceedings.setDateapproximate(HMSUtil
				.convertStringTypeDateToDateType(req
						.getParameter(DATE_APPROXIMATE)));
	}
	if (req.getParameter(DISABILITY_BEFORE) != null
			&& !req.getParameter(DISABILITY_BEFORE).equals("")) {
		masMedicalBoardProceedings.setDisabilitybefore(req
				.getParameter(DISABILITY_BEFORE));
	}
	if (req.getParameter(DISABILITY) != null
			&& !req.getParameter(DISABILITY).equals("")) {
		masMedicalBoardProceedings.setDisability(req
				.getParameter(DISABILITY));
	}
	if (req.getParameter(CLAMING_DISABILITY) != null
			&& !req.getParameter(CLAMING_DISABILITY).equals("")) {
		masMedicalBoardProceedings.setClamingdisability(req
				.getParameter(CLAMING_DISABILITY));
	}
	if (req.getParameter(DATE_DISCHARGE) != null
			&& !req.getParameter(DATE_DISCHARGE).equals("")) {
		masMedicalBoardProceedings.setDateDischarge(HMSUtil
				.convertStringTypeDateToDateType(req
						.getParameter(DATE_DISCHARGE)));
	}
	if (req.getParameter(UPLOADED_DATE) != null
			&& !req.getParameter(UPLOADED_DATE).equals("")) {
		masMedicalBoardProceedings.setUploadeddate(HMSUtil
				.convertStringTypeDateToDateType(req
						.getParameter(UPLOADED_DATE)));
	}
	if (req.getParameter(REPORTED_DATE) != null
			&& !req.getParameter(REPORTED_DATE).equals("")) {
		masMedicalBoardProceedings.setDateOfReporting(HMSUtil
				.convertStringTypeDateToDateType(req
						.getParameter(REPORTED_DATE)));
	}
	if (req.getParameter(CONDITION_OF_GUMS) != null
			&& !req.getParameter(CONDITION_OF_GUMS).equals("")) {
		masMedicalBoardProceedings.setConditionOfGums(req
				.getParameter(CONDITION_OF_GUMS));
	}
	if (req.getParameter(TYMPANIC_L) != null
			&& !req.getParameter(TYMPANIC_L).equals("")) {
		masMedicalBoardProceedings.setTympanicL(req
				.getParameter(TYMPANIC_L));
	}
	if (req.getParameter(TYMPANIC_R) != null
			&& !req.getParameter(TYMPANIC_R).equals("")) {
		masMedicalBoardProceedings.setTympanicR(req
				.getParameter(TYMPANIC_R));
	}
	if (req.getParameter(MOBILITYL) != null
			&& !req.getParameter(MOBILITYL).equals("")) {
		masMedicalBoardProceedings
				.setMobilityL(req.getParameter(MOBILITYL));
	}
	if (req.getParameter(NOSE_THROAT) != null
			&& !req.getParameter(NOSE_THROAT).equals("")) {
		masMedicalBoardProceedings.setNosethroat(req
				.getParameter(NOSE_THROAT));
	}
	if (req.getParameter(DATE_OF_AME) != null
			&& !req.getParameter(DATE_OF_AME).equals("")) {
		masMedicalBoardProceedings.setDateMedicalBoardSubsequent(HMSUtil
				.convertStringTypeDateToDateType(req
						.getParameter(DATE_OF_AME)));
	}

	if (req.getParameter(HERNIA_MUSCLE) != null
			&& !req.getParameter(HERNIA_MUSCLE).equals("")) {
		CocatHicNevreData += "HerniaMuscle" + ":"
				+ req.getParameter(HERNIA_MUSCLE) + "/ ";
	} else {
		CocatHicNevreData += "HerniaMuscle" + ":" + "NA" + "/ ";
	}
	if (req.getParameter(HYDROCELE) != null
			&& !req.getParameter(HYDROCELE).equals("")) {
		CocatHicNevreData += "Hydrocele" + ":"
				+ req.getParameter(HYDROCELE) + "/ ";
	} else {
		CocatHicNevreData += "Hydrocele" + ":" + "NA" + "/ ";
	}
	if (req.getParameter(HEMONHOIDS) != null
			&& !req.getParameter(HEMONHOIDS).equals("")) {
		CocatHicNevreData += "Hemonhoids" + " :"
				+ req.getParameter(HEMONHOIDS) + "/ ";
	} else {
		CocatHicNevreData += "Hemonhoids" + ":" + "NA" + "/ ";
	}
	if (req.getParameter(BREASTS) != null
			&& !req.getParameter(BREASTS).equals("")) {
		CocatHicNevreData += "Breasts" + ":" + req.getParameter(BREASTS)
				+ "/ ";
	} else {
		CocatHicNevreData += "Breasts" + ":" + "NA" + "/ ";
	}
	if (CocatHicNevreData != null && !CocatHicNevreData.equals("")) {
		masMedicalBoardProceedings.setDataOfNurveHic(CocatHicNevreData);
	}
	if (req.getParameter("dentalValue") != null
			&& !req.getParameter("dentalValue").equals("")) {
		masMedicalBoardProceedings.setDentalValue(req
				.getParameter("dentalValue"));
	}
	int visitNumberForReport = 0;
	if (req.getParameter("visitNumberForReport") != null
			&& !req.getParameter("visitNumberForReport").equals("")) {
		visitNumberForReport = Integer.parseInt(req
				.getParameter("visitNumberForReport"));
	}
	String hinNoForreport = null;
	if (req.getParameter("hinNoForreport") != null
			&& !req.getParameter("hinNoForreport").equals("")) {
		hinNoForreport = req.getParameter("hinNoForreport");
	}
	if (req.getParameter(PAST_MEDICAL_CATEGORY) != null
			&& !(req.getParameter(PAST_MEDICAL_CATEGORY)).equals("0")) {
		Category categ1 = new Category();
		categ1.setCategoryid(Integer.parseInt(req
				.getParameter(PAST_MEDICAL_CATEGORY)));
		masMedicalBoardProceedings.setPastMedicalCategory(categ1);
	}
	if (req.getParameter(PRESENT_MEDICAL_CATEGORY) != null
			&& !(req.getParameter(PRESENT_MEDICAL_CATEGORY)).equals("0")) {
		Category categ2 = new Category();
		categ2.setCategoryid(Integer.parseInt(req
				.getParameter(PRESENT_MEDICAL_CATEGORY)));
		masMedicalBoardProceedings.setPresentMedicalCategory(categ2);
	}
	String medicaltype = masMedicalBoardProceedings.getMedicalExamType();
	MasMedicalExaminationDetail medicaldetail = new MasMedicalExaminationDetail();
	int temp1 = 1;
	List<Integer> serialnolist = new ArrayList<Integer>();
	List<String> fromlist = new ArrayList<String>();
	List<String> tolist = new ArrayList<String>();
	List<String> placelist = new ArrayList<String>();
	List<String> pnolist = new ArrayList<String>();
	List<Integer> serialnolist1 = new ArrayList<Integer>();
	List<String> illnesslist = new ArrayList<String>();
	List<Date> particulardatelist = new ArrayList<Date>();
	List<Integer> rankidlist = new ArrayList<Integer>();
	List<String> treatedlist = new ArrayList<String>();
	List<String> approximatedatelist = new ArrayList<String>();
	List<String> approximatedate2list = new ArrayList<String>();
	List<String> beforeDisabilitylist = new ArrayList<String>();

	List<String> placelist1 = new ArrayList<String>();
	List<String> principallist = new ArrayList<String>();
	List<Date> origindatelist = new ArrayList<Date>();
	List<Date> medicalcatdatelist = new ArrayList<Date>();
	List<Date> nextcatdatelist = new ArrayList<Date>();

	int hdbvalue1 = 1;
	int hiddenValue1 = 1;
	int hdbvalue = 1;
	if (medicaltype.equalsIgnoreCase("Medical Board AFMSF 16")) {

		if (Integer.parseInt(req.getParameter("hdb")) != 1) {
			hdbvalue = Integer.parseInt(req.getParameter("hdb"));
		}
		int k = 0;
		for (int i = 1; i <= hdbvalue; i++) {

			if (req.getParameter(SIRIAL_NO + i) == "") {
				serialnolist.add(i);
			} else if (req.getParameter(SIRIAL_NO + i) != null
					&& !req.getParameter(SIRIAL_NO + i).equals("")) {
				serialnolist.add(Integer.parseInt(req
						.getParameter(SIRIAL_NO + i)));
			} else {
				serialnolist.add(0);
			}

			if (req.getParameter(FROM + i) != null) {
				fromlist.add(req.getParameter(FROM + i));
			} else {
				fromlist.add("");
			}

			if (req.getParameter(TO + i) != null) {
				tolist.add(req.getParameter(TO + i));
			} else {
				tolist.add("");
			}
			if (req.getParameter(PLACE + i) != null) {
				placelist.add(req.getParameter(PLACE + i));
			} else {
				placelist.add("");
			}
			if (req.getParameter(P_NO + i) != null) {
				pnolist.add(req.getParameter(P_NO + i));
			} else {
				pnolist.add("");
			}
			if (req.getParameter(PRINCIPAL + i) != null) {
				principallist.add(req.getParameter(PRINCIPAL + i));
			} else {
				principallist.add("");
			}
			if (req.getParameter(ORIGIN_DATE + i) != null
					&& (!req.getParameter(ORIGIN_DATE + i).equals(""))) {
				origindatelist.add(HMSUtil
						.convertStringTypeDateToDateType(req
								.getParameter(ORIGIN_DATE + i)));
			} else {
				origindatelist.add(null);
			}
			if (req.getParameter(MEDICAL_CAT_DATE + i) != null
					&& (!req.getParameter(MEDICAL_CAT_DATE + i).equals(""))) {
				medicalcatdatelist.add(HMSUtil
						.convertStringTypeDateToDateType(req
								.getParameter(MEDICAL_CAT_DATE + i)));
			} else {
				medicalcatdatelist.add(null);
			}
			if (req.getParameter(NEXT_CAT_DATE + i) != null
					&& (!req.getParameter(NEXT_CAT_DATE + i).equals(""))) {
				nextcatdatelist.add(HMSUtil
						.convertStringTypeDateToDateType(req
								.getParameter(NEXT_CAT_DATE + i)));
			} else {
				nextcatdatelist.add(null);
			}

		}
		mapForDS.put("alcohol", alcohol);
		mapForDS.put("hdbvalue", hdbvalue);
		mapForDS.put("hiddenValue", hiddenValue);
		mapForDS.put("serialnolist", serialnolist);
		mapForDS.put("fromlist", fromlist);
		mapForDS.put("tolist", tolist);
		mapForDS.put("placelist", placelist);
		mapForDS.put("pnolist", pnolist);
		mapForDS.put("principallist", principallist);
		mapForDS.put("origindatelist", origindatelist);
		mapForDS.put("medicalcatdatelist", medicalcatdatelist);
		mapForDS.put("nextcatdatelist", nextcatdatelist);
		List<Integer> illnessICDlist = new ArrayList<Integer>();

		if (Integer.parseInt(req.getParameter("hdb1")) != 1) {
			hdbvalue1 = Integer.parseInt(req.getParameter("hdb1"));
		}
		// int temp2 = 1;
		for (int i = 1; i <= hdbvalue1; i++) {

			if (req.getParameter(SIRIAL_NO1 + i) == "") {
				serialnolist1.add(i);
			} else if (req.getParameter(SIRIAL_NO1 + i) != null
					&& !req.getParameter(SIRIAL_NO1 + i).equals("")) {
				serialnolist1.add(Integer.parseInt(req
						.getParameter(SIRIAL_NO1 + i)));
			} else {
				serialnolist1.add(0);
			}

			/*
			 * if(req.getParameter(ILLNESS+ i) != null ){
			 * illnesslist.add(req.getParameter(ILLNESS+ i)); }else{
			 * illnesslist.add(""); }
			 */
			String str = "";
			if (req.getParameter(ILLNESS + i) != null) {
				// illnesslist.add(req.getParameter(ILLNESS+ i));
				str = req.getParameter(ILLNESS + i);
			} else {
				// illnesslist.add("");
				str = "";
			}

			int icdId = 0;
			if (str != "") {
				String illness = "";
				int lastIndex = str.indexOf("[");
				if (lastIndex > 0) {
					illness = str.substring(0, lastIndex);
					illnesslist.add(illness);
				} else {
					illness = str;
					illnesslist.add("");
				}
				int index1 = str.lastIndexOf("[");
				int index2 = str.lastIndexOf("]");
				// icdId
				// =Integer.parseInt(str.substring((index1+1),index2));
				try {
					icdId = Integer.parseInt(str.substring((index1 + 1),
							index2));
				} catch (NumberFormatException e) {

					e.printStackTrace();
				}
				illnessICDlist.add(icdId);
			} else {
				illnessICDlist.add(icdId);
				illnesslist.add("");
			}
			if (req.getParameter(PARTICULAR_DATE + i) != null
					&& (!req.getParameter(PARTICULAR_DATE + i).equals(""))) {
				particulardatelist.add(HMSUtil
						.convertStringTypeDateToDateType(req
								.getParameter(PARTICULAR_DATE + i)));
			} else {
				particulardatelist.add(null);
			}
			if (req.getParameter(RANK_INDIVIDUAL_ID + i) != null) {
				rankidlist.add(Integer.parseInt(req
						.getParameter(RANK_INDIVIDUAL_ID + i)));
			} else {
				rankidlist.add(0);
			}
			if (req.getParameter(TREATED + i) != null) {
				treatedlist.add(req.getParameter(TREATED + i));
			} else {
				treatedlist.add("");
			}
			if (req.getParameter(PLACE1 + i) != null) {
				placelist1.add(req.getParameter(PLACE1 + i));
			} else {
				placelist1.add("");
			}
			if (req.getParameter(APPROXIMATE_DATE + i) != null
					&& (!req.getParameter(APPROXIMATE_DATE + i).equals(""))) {
				approximatedatelist.add(req.getParameter(APPROXIMATE_DATE
						+ i));
			} else {
				approximatedatelist.add(null);
			}
			if (req.getParameter(APPROXIMATE_DATE2 + i) != null
					&& (!req.getParameter(APPROXIMATE_DATE2 + i).equals(""))) {
				approximatedate2list.add(req.getParameter(APPROXIMATE_DATE2
						+ i));
			} else {
				approximatedate2list.add(null);
			}
			if (req.getParameter("beforeDisability" + i) != null) {
				beforeDisabilitylist.add(req
						.getParameter("beforeDisability" + i));
			} else {
				beforeDisabilitylist.add("n");
			}

			// temp2=temp2+1;
		}
		mapForDS.put("illnessICDlist", illnessICDlist);
		mapForDS.put("hdbvalue1", hdbvalue1);
		mapForDS.put("hiddenValue1", hiddenValue1);
		mapForDS.put("serialnolist1", serialnolist1);
		mapForDS.put("illnesslist", illnesslist);
		mapForDS.put("particulardatelist", particulardatelist);
		mapForDS.put("rankidlist", rankidlist);
		mapForDS.put("treatedlist", treatedlist);
		mapForDS.put("approximatedatelist", approximatedatelist);
		mapForDS.put("approximatedate2list", approximatedate2list);
		mapForDS.put("beforeDisabilitylist", beforeDisabilitylist);

		mapForDS.put("placelist1", placelist1);

		/*
		 * Code for Disability Before Service Date 27 Feb 2012
		 */
		List<Integer> serialnoBeforeList = new ArrayList<Integer>();
		List<String> illnessBeforeList = new ArrayList<String>();
		List<Date> particulardateBeforeList = new ArrayList<Date>();
		List<String> treatedBeforeList = new ArrayList<String>();
		List<String> placeBeforeList = new ArrayList<String>();
		List<String> beforeDisabilityBeforeList = new ArrayList<String>();
		List<Integer> illnessICDBeforelist = new ArrayList<Integer>();
		int hdbBefore = 1;

		if (Integer.parseInt(req.getParameter("hdbBefore")) != 1) {
			hdbBefore = Integer.parseInt(req.getParameter("hdbBefore"));
		}
		for (int i = 1; i <= hdbBefore; i++) {

			if (req.getParameter(SIRIAL_NO1 + "1" + i) == "") {
				serialnoBeforeList.add(i);
			} else if (req.getParameter(SIRIAL_NO1 + "1" + i) != null
					&& !req.getParameter(SIRIAL_NO1 + "1" + i).equals("")) {
				serialnoBeforeList.add(Integer.parseInt(req
						.getParameter(SIRIAL_NO1 + "1" + i)));
			} else {
				serialnoBeforeList.add(0);
			}

			/*
			 * if(req.getParameter(ILLNESS+"1"+i) != null ){
			 * illnessBeforeList.add(req.getParameter(ILLNESS+"1"+i));
			 * }else{ illnessBeforeList.add(""); }
			 */
			String beforeStr = "";
			if (req.getParameter(ILLNESS + "1" + i) != null) {
				beforeStr = req.getParameter(ILLNESS + "1" + i);
			} else {
				// illnessBeforeList.add("");
				beforeStr = "";
			}

			int icdId = 0;
			if (beforeStr != "") {
				String illness = "";
				int lastIndex = beforeStr.indexOf("[");
				if (lastIndex > 0) {
					illness = beforeStr.substring(0, lastIndex);
					illnessBeforeList.add(illness);
				} else {
					illness = beforeStr;
					illnessBeforeList.add("");
				}
				int index1 = beforeStr.lastIndexOf("[");
				int index2 = beforeStr.lastIndexOf("]");
				try {
					icdId = Integer.parseInt(beforeStr.substring(
							(index1 + 1), index2));
				} catch (NumberFormatException e) {

					e.printStackTrace();
				}
				illnessICDBeforelist.add(icdId);
			} else {
				illnessICDBeforelist.add(icdId);
				illnessBeforeList.add("");
			}
			if (req.getParameter(PARTICULAR_DATE + "1" + i) != null
					&& (!req.getParameter(PARTICULAR_DATE + "1" + i)
							.equals(""))) {
				particulardateBeforeList.add(HMSUtil
						.convertStringTypeDateToDateType(req
								.getParameter(PARTICULAR_DATE + "1" + i)));
			} else {
				particulardateBeforeList.add(null);
			}
			if (req.getParameter(TREATED + "1" + i) != null) {
				treatedBeforeList.add(req.getParameter(TREATED + "1" + i));
			} else {
				treatedBeforeList.add("");
			}
			if (req.getParameter(PLACE1 + "1" + i) != null) {
				placeBeforeList.add(req.getParameter(PLACE1 + "1" + i));
			} else {
				placeBeforeList.add("");
			}
			if (req.getParameter("beforeDisability" + "1" + i) != null) {
				beforeDisabilityBeforeList.add(req
						.getParameter("beforeDisability" + "1" + i));
			} else {
				beforeDisabilityBeforeList.add("n");
			}

			// temp2=temp2+1;
		}
		mapForDS.put("illnessICDBeforelist", illnessICDBeforelist);
		/*
		 * Code for Disability Date 01 March 2012
		 */
		int hdbDisability = 1;

		if (Integer.parseInt(req.getParameter("hdbDisability")) != 1) {
			hdbDisability = Integer.parseInt(req
					.getParameter("hdbDisability"));
		}
		List<MasMedicalExaminationDetail> masMedicalExaminationDetailsDisabilityList = new ArrayList<MasMedicalExaminationDetail>();
		for (int i = 1; i <= hdbDisability; i++) {
			MasMedicalExaminationDetail masMedicalExaminationDetail = new MasMedicalExaminationDetail();
			String str = "";
			if (req.getParameter("systemDiagnosis" + i) != null) {
				str = req.getParameter("systemDiagnosis" + i);
			} else {
				str = "";
			}
			if (str != "") {
				String systemDiagnosis = "";
				int lastIndex = str.indexOf("[");
				if (lastIndex > 0) {
					systemDiagnosis = str.substring(0, lastIndex);
				} else {
					systemDiagnosis = str;
				}

				int index1 = str.lastIndexOf("[");
				int index2 = str.lastIndexOf("]");
				int icdId = 0;
				// int icdId
				// =Integer.parseInt(str.substring((index1+1),index2));
				try {
					icdId = Integer.parseInt(str.substring((index1 + 1),
							index2));
				} catch (NumberFormatException e) {

					e.printStackTrace();
				}
				/*
				 * if(icdId>0){ MasIcd masIcd=new MasIcd();
				 * masIcd.setId(icdId);
				 * masMedicalExaminationDetail.setMasIcd(masIcd); }
				 */
				if (icdId > 0) {
					/*MasSystemDiagnosis masIcd = new MasSystemDiagnosis();
					masIcd.setId(icdId);
					masMedicalExaminationDetail.setSystemDiagnosis(masIcd);*/
					
					MasIcd masIcd=new MasIcd();
					masIcd.setId(icdId);
					masMedicalExaminationDetail.setMasIcd(masIcd);
				}
				masMedicalExaminationDetail.setPrincipal(systemDiagnosis);
				masMedicalExaminationDetail.setParticular("Disability");
				masMedicalExaminationDetailsDisabilityList
						.add(masMedicalExaminationDetail);

			}
		}
		mapForDS.put("masMedicalExaminationDetailsDisabilityList",
				masMedicalExaminationDetailsDisabilityList);

		/*
		 * End of Code for Disability Date 01 March 2012
		 */
		mapForDS.put("hdbBefore", hdbBefore);
		mapForDS.put("illnessBeforeList", illnessBeforeList);
		mapForDS.put("serialnoBeforeList", serialnoBeforeList);
		mapForDS.put("particulardateBeforeList", particulardateBeforeList);
		mapForDS.put("treatedBeforeList", treatedBeforeList);
		mapForDS.put("placeBeforeList", placeBeforeList);
		mapForDS.put("beforeDisabilityBeforeList",
				beforeDisabilityBeforeList);

		/*
		 * End of Code for Disability Before Service Date 27 Feb 2012
		 */
	}

	Users maUser = new Users();
	maUser.setId(userId);
	masMedicalBoardProceedings.setMaUser(maUser);

	MasHospital hospital = new MasHospital();
	hospital.setId(hospitalId);
	masMedicalBoardProceedings.setHospital(hospital);

	MasCommand command = new MasCommand();
	command.setId(commandId);
	masMedicalBoardProceedings.setCommand(command);

	masMedicalBoardProceedings.setStatus("p");
	masMedicalBoardProceedings.setMedicalType("MedicalBoard");

	String incidents_during_your_service = "";
	String reasonWoundInjury = "";
	String MED_BOARD_HELD = "";
	String INJURY_REPORT = "";
	if (req.getParameter("incidents_during_your_service") != null
			&& !req.getParameter("incidents_during_your_service")
					.equals("")) {
		incidents_during_your_service = req
				.getParameter("incidents_during_your_service");
	}
	if (req.getParameter("reasonWoundInjury") != null
			&& !req.getParameter("reasonWoundInjury").equals("")) {
		reasonWoundInjury = req.getParameter("reasonWoundInjury");
	}
	if (req.getParameter("MED_BOARD_HELD") != null
			&& !req.getParameter("MED_BOARD_HELD").equals("")) {
		MED_BOARD_HELD = req.getParameter("MED_BOARD_HELD");
	}
	if (req.getParameter("INJURY_REPORT") != null
			&& !req.getParameter("INJURY_REPORT").equals("")) {
		INJURY_REPORT = req.getParameter("INJURY_REPORT");
	}
	masMedicalBoardProceedings
			.setIncidentsDuringYourService(incidents_during_your_service);
	masMedicalBoardProceedings.setReasonWoundInjury(reasonWoundInjury);
	masMedicalBoardProceedings.setMedBoardHeld(MED_BOARD_HELD);
	masMedicalBoardProceedings.setInjuryReport(INJURY_REPORT);
	/*
	 * Code for Medical Board Clinical Summary
	 */
	String presentConditions = "";
	String medication = "";
	BigDecimal temperature = new BigDecimal(0);
	// String pulseRates="";
	String bp1 = "";
	String rr = "";
	String generalPhysicalExam = "";
	String cardiovascularSystem = "";

	String respairatorySystem = "";
	String gastroIntestinalSystem = "";
	String breakDown = "";
	String centralNervousSystem = "";

	String localExamination = "";
	String remarksClinical = "";
	// int referredToMhClinical=0;
	String referredToMhClinical = "";
	int opdDeptClinical = 0;

	if (req.getParameter("presentConditions") != null) {
		presentConditions = req.getParameter("presentConditions");
	}
	if (req.getParameter("medication") != null) {
		medication = req.getParameter("medication");
	}
	if (req.getParameter("temperature") != null) {
		temperature = new BigDecimal(req.getParameter("temperature"));
	}
	if (req.getParameter("bp1") != null) {
		bp1 = req.getParameter("bp1");
	}

	if (req.getParameter("generalPhysicalExam") != null) {
		generalPhysicalExam = req.getParameter("generalPhysicalExam");
	}
	if (req.getParameter("cardiovascularSystem") != null) {
		cardiovascularSystem = req.getParameter("cardiovascularSystem");
	}
	if (req.getParameter("respairatorySystem") != null) {
		respairatorySystem = req.getParameter("respairatorySystem");
	}

	if (req.getParameter("gastroIntestinalSystem") != null) {
		gastroIntestinalSystem = req.getParameter("gastroIntestinalSystem");
	}
	if (req.getParameter(NERVOUS_BRAKDOWN) != null) {
		breakDown = req.getParameter(NERVOUS_BRAKDOWN);
	}
	if (req.getParameter("centralNervousSystem") != null) {
		centralNervousSystem = req.getParameter("centralNervousSystem");
	}

	if (req.getParameter("localExamination") != null) {
		localExamination = req.getParameter("localExamination");
	}
	if (req.getParameter("remarksClinical") != null) {
		remarksClinical = req.getParameter("remarksClinical");
	}
	if (req.getParameter("rr") != null) {
		rr = req.getParameter("rr");
	}

	/*
	 * if(req.getParameter("referredToMhClinical") != null &&
	 * !req.getParameter("referredToMhClinical").equals("")) {
	 * referredToMhClinical
	 * =Integer.parseInt(req.getParameter("referredToMhClinical")); } as
	 * discussed with anshu it will be free text
	 */
	if (req.getParameter("referredToMhClinical") != null
			&& !req.getParameter("referredToMhClinical").equals("")) {
		referredToMhClinical = req.getParameter("referredToMhClinical");
	}
	/*
	 * if(referredToMhClinical>0){ MasHospital masHospital=new
	 * MasHospital(); masHospital.setId(referredToMhClinical);
	 * masMedicalBoardProceedings.setClinicalReferMh(masHospital); }
	 */
	masMedicalBoardProceedings.setClinicalReferMh(referredToMhClinical);
	if (req.getParameter("opdDeptClinical") != null) {
		opdDeptClinical = Integer.parseInt(req
				.getParameter("opdDeptClinical"));
	}
	String moRemarks = "";
	if (req.getParameter("moRemarks") != null) {
		moRemarks = req.getParameter("moRemarks");
	}
	String signedBy = "";
	if (req.getParameter("signedBy") != null) {
		signedBy = req.getParameter("signedBy");
	}
	masMedicalBoardProceedings.setPresentCondition(presentConditions);
	masMedicalBoardProceedings.setMedication(medication);
	masMedicalBoardProceedings.setTemprature(temperature);
	masMedicalBoardProceedings.setBp(bp1);

	masMedicalBoardProceedings.setGeneralPhysicalExam(generalPhysicalExam);
	masMedicalBoardProceedings
			.setCardiovascularSystem(cardiovascularSystem);
	masMedicalBoardProceedings.setRespiratorySystem(respairatorySystem);
	masMedicalBoardProceedings
			.setGastroIntestinalSystem(gastroIntestinalSystem);
	masMedicalBoardProceedings.setCentralNervousSystemMMHG(breakDown);
	masMedicalBoardProceedings
			.setCentralNervousSystem(centralNervousSystem);
	masMedicalBoardProceedings.setLocalExamination(localExamination);
	masMedicalBoardProceedings.setRemarksClinical(remarksClinical);
	masMedicalBoardProceedings.setRrClinical(rr);
	if (opdDeptClinical > 0) {
		MasDepartment masDepartment = new MasDepartment();
		masDepartment.setId(opdDeptClinical);
		masMedicalBoardProceedings.setClinicalOpdDept(masDepartment);
	}
	/*
	 * End of Code for Medical Board Clinical Summary
	 */
	masMedicalBoardProceedings.setRemarks(moRemarks);
	masMedicalBoardProceedings.setSignedBy(signedBy);
	mapForDS.put("chargeCodeIdList", chargeCodeIdList);
	mapForDS.put("quantityList", quantityList);
	mapForDS.put("clinicalNotes1", clinicalNotes1);
	mapForDS.put("lastChangedBy", lastChangedBy);
	mapForDS.put("lastChangedDate", lastChangedDate);
	mapForDS.put("lastChangedTime", lastChangedTime);
	mapForDS.put("investigationReferToMHList", investigationReferToMHList);

	mapForDS.put("hospitalId", hospitalId);
	mapForDS.put("deptId", deptId);
	mapForDS.put("empId", empId);
	mapForDS.put("userId", userId);
	mapForDS.put("hinId", hinId);
	mapForDS.put("visitId", visitId);
	mapForDS.put("patientInvestigationHeaderId", 0);
	mapForDS.put("dgOrderhdId", 0);
	mapForDS.put("patientInvestigationdetailsIdList",
			patientInvestigationdetailsIdList);
	mapForDS.put("dgOrderdtIdList", dgOrderdtIdList);

	String orderSeqNo = "";
	orderSeqNo = labHandlerService.generateOrderNumber(hospitalId);
	mapForDS.put("orderSeqNo", orderSeqNo);
	successfullyAdded = medicalBoardHandlerService.addMedicalBoardMO16(
			masMedicalBoardProceedings, masMedicalBoardDetails, mapForDS);
	message = "Record Added Successfully!";
	jsp = MEDICAL_BOARD_EXAM_MSG;
	if (!successfullyAdded) {
		message = "Some Problem Occured !!!";
		jsp = MEDICAL_BOARD_ERROR_MSG;
	}
	// }
	try {
		// map =
		// medicalExaminationBoardHandlerService.showMedicalExaminationBoardJsp();
	} catch (Exception e) {
		e.printStackTrace();
	}
	String medicalEntryNo = "";
	String medicalEntryNo1 = "";
	String userName = "";
	String userName1 = "";
	// medicalEntryNo =
	// medicalExaminationBoardHandlerService.generateMedicalEntryNumber(userName);
	// medicalEntryNo1 =
	// medicalExaminationBoardHandlerService.generateMedicalEntryNumber1(userName1);
	jsp += ".jsp";
	map.put("medicalEntryNo", medicalEntryNo);
	map.put("medicalEntryNo1", medicalEntryNo1);
	map.put("contentJsp", jsp);
	map.put("message", message);
	map.put("hinNoForreport", hinNoForreport);
	// map.put("visitNumberForReport", visitNumberForReport);
	map.put("serviceNo", serviceNo);
	map.put("visitId", visitId);
	return new ModelAndView("indexB", "map", map);

}

public ModelAndView updateMedicalBoardMO16(HttpServletRequest req,
		HttpServletResponse res) {
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	String serviceNo = "";
	String serviceiaf = "";
	String age = "";
	String typeOfCommunication = "";
	Date dateofcommun = null;
	String totalservice = "";
	String pastmedicalhistory = "";
	String presentmedicalhistory = "";
	String idealweight = "";
	String overweight = "";
	String waist = "";
	String chestfullexpansion = "";
	String bhi = "";
	String rangeofexpansion = "";
	String bodyfat = "";
	String signfoldthickness = "";
	String sportman = "";
	String actualweight = "";
	String lastame = "";

	Date entryDate = null;
	Date medicinExamDate = null;
	String lastChangedBy = "";
	String lastChangedTime = "";
	Date lastChangedDate = null;
	Date surgeyDate = null;
	int typeOfEntry = 0;
	String betchNo = "";
	String chestNo = "";
	String rollNo = "";
	int medicalExamHeld = 0;
	String medicalStatus = "";
	String fullName = "";
	Date dateOfBirth = null;
	int maritialStatus = 0;
	String service = "";
	String pNo = "";
	// String rank = "";
	String hoursOfFlown = "";
	String permanentAddress = "";
	String identification1 = "";
	String identification2 = "";
	String armsCrops = "";
	Date dateOfReporting = null;
	Date dateOfDischarge=null;
	Date dateOfCompletion = null;
	Date documentForwardDate = null;
	String documentForwardTo = "";
	String fromWhereHeReport = "";
	String hypertension = "";
	String heartDisease = "";
	String diabetes = "";
	String bleedingDisorder = "";
	String mentalDisease = "";
	String nightBlindness = "";

	String asthama = "";
	String dischargeFrom = "";
	String plesury = "";
	String earDieses = "";
	String rheumatism = "";
	String frequentCough = "";
	String chronicIndigestion = "";
	String nervousBrakdown = "";
	String kidenyBladder = "";
	String fitsFaintinngAttacks = "";
	String std = "";
	String serveHeadInjury = "";
	String joundice = "";
	String sickness = "";
	String breastDisease = "";
	String trachoma = "";
	String amenorrhoea = "";
	String nightbindness = "";
	String menirrhagia = "";
	String laserTeartement = "";
	String pregnancy = "";
	String abortion = "";
	String eyeDisease = "";
	String rejectedAsUnfit = "";
	String dischargeMedicallyUnfit = "";
	String adimmitedInHospitalFirIllness = "";
	String stateNature = "";
	String otherInform = "";
	BigDecimal height = new BigDecimal(0);
	BigDecimal weight = new BigDecimal(0);
	BigDecimal acceptableKg = new BigDecimal(0);
	BigDecimal leglength = new BigDecimal(0);
	String appereance = "";
	String albumin = "";
	String sugar = "";
	String spGraviry = "";
	String hbPercentage = "";
	String physique = "";
	String anyOtherInv = "";
	String skin = "";
	String abdomen = "";
	String heartSize = "";
	String sound = "";
	String rhythm = "";
	String arterialWalls = "";
	String pulseRates = "";
	String bp = "";
	String fullExpension = "";
	String rangeOfExpension = "";
	String selfBalR = "";
	String selfBalL = "";
	String speechMental = "";
	String endocrinCond = "";
	String otherAbnormalities = "";
	String medicinRemarks = "";
	String finger = "";
	String hand = "";
	String wrist = "";
	String elbows = "";
	String shoulderGridles = "";
	String cercival = "";
	String dorsalVertebrate = "";
	String hullux = "";
	String valgus = "";
	String riggus = "";
	String flatFeet = "";
	String joints = "";
	String pelvis = "";
	String gail = "";
	String lumberScaler = "";
	String roccyxVericose = "";
	String hydrocele = "";
	String varicocele = "";
	String underScende = "";
	String hemonhoids = "";
	String herinaMusic = "";
	String breasts = "";
	String surgeryRemarks = "";
	String respatorySystem = "";

	String withGlassesDistantR = "";
	String withglassesDistantL = "";
	String withGlassesNearR = "";
	String withGlassesNearL = "";
	String withGlassesNearCP = "";
	String withoutGlassesDistantR = "";
	String withoutGlassesDistantL = "";
	String withoutGlassesNearR = "";
	String withoutGlassesNearL = "";
	String withoutGlassesNearCP = "";
	BigDecimal convergenceCP = new BigDecimal(0);

	BigDecimal convergenceC = new BigDecimal(0);
	String accommodationR = "";
	String accommodationL = "";
	String eyeRemarks = "";
	Date eyeDate = null;
	BigDecimal hearingRFW = new BigDecimal(0);
	BigDecimal hearingLFW = new BigDecimal(0);
	BigDecimal hearingBothFW = new BigDecimal(0);
	BigDecimal hearingRCV = new BigDecimal(0);
	BigDecimal hearingLCV = new BigDecimal(0);
	BigDecimal hearingBothCV = new BigDecimal(0);

	String innerEarR = "";
	String innerEarL = "";
	String audiometryRecord = "";
	String nose = "";
	String throatEar = "";
	String earReamrks = "";
	Date earDate = null;
	String externalEarR = "";
	String externalEarL = "";
	String middleEarR = "";
	String middleEarL = "";
	String evidienceOfTrachoma = "";
	String binocular = "";
	String manifestHypermetropia = "";
	String coverTest = "";
	String diaphragmTest = "";
	String fundMedia = "";
	String fields = "";
	String nightVisualCapacity = "";

	String dentalRemarks = "";
	Date dentalDate = null;
	String menstrualHistory = "";
	int noOfPregnancy = 0;
	int noOfAbortion = 0;
	int noOfChildren = 0;
	Date lastCondinement = null;
	String vaginalDischarge = "";
	String prolapse = "";
	String usgAbortion = "";
	String gyanaecologyRemarks = "";
	Date gyanaecologyDate = null;
	String medicalBoardExamination = "";
	int medicalBoardExaminationPlace = 0;
	Date medicalBoardExaminationDate = new Date();
	String subsequentMedicalBoardExam = "";
	int subsequentMedicalBoardExamPlace = 0;
	Date subsequentMedicalBoardExamDate = null;
	String ApprovingAuthority = "";
	int ApprovingAuthorityPlace = 0;
	Date ApprovingAuthorityDate = null;
	Date lmp = null;
	String totalTeeth = "";
	String totalDefectiveTeeth = "";
	String missingTeeth = "";
	String DenstalPoint = "";
	String unserviceableTeeth = "";

	String dur8 = "";
	String dur7 = "";
	String dur6 = "";
	String dur5 = "";
	String dur4 = "";
	String dur3 = "";
	String dur2 = "";
	String dur1 = "";
	String dul8 = "";
	String dul7 = "";
	String dul6 = "";
	String dul5 = "";
	String dul4 = "";
	String dul3 = "";
	String dul2 = "";
	String dul1 = "";
	String dlr8 = "";
	String dlr7 = "";
	String dlr6 = "";
	String dlr5 = "";
	String dlr4 = "";
	String dlr3 = "";
	String dlr2 = "";
	String dlr1 = "";
	String dll8 = "";
	String dll7 = "";
	String dll6 = "";
	String dll5 = "";
	String dll4 = "";
	String dll3 = "";
	String dll2 = "";
	String dll1 = "";
	String mur8 = "";
	String mur7 = "";
	String mur6 = "";
	String mur5 = "";
	String mur4 = "";
	String mur3 = "";
	String mur2 = "";
	String mur1 = "";
	String mul8 = "";
	String mul7 = "";
	String mul6 = "";
	String mul5 = "";
	String mul4 = "";
	String mul3 = "";
	String mul2 = "";
	String mul1 = "";
	String mlr8 = "";
	String mlr7 = "";
	String mlr6 = "";
	String mlr5 = "";
	String mlr4 = "";
	String mlr3 = "";
	String mlr2 = "";
	String mlr1 = "";
	String mll8 = "";
	String mll7 = "";
	String mll6 = "";
	String mll5 = "";
	String mll4 = "";
	String mll3 = "";
	String mll2 = "";
	String mll1 = "";
	String uur8 = "";
	String uur7 = "";
	String uur6 = "";
	String uur5 = "";
	String uur4 = "";
	String uur3 = "";
	String uur2 = "";
	String uur1 = "";
	String uul8 = "";
	String uul7 = "";
	String uul6 = "";
	String uul5 = "";
	String uul4 = "";
	String uul3 = "";
	String uul2 = "";
	String uul1 = "";
	String ulr8 = "";
	String ulr7 = "";
	String ulr6 = "";
	String ulr5 = "";
	String ulr4 = "";
	String ulr3 = "";
	String ulr2 = "";
	String ulr1 = "";
	String ull8 = "";
	String ull7 = "";
	String ull6 = "";
	String ull5 = "";
	String ull4 = "";
	String ull3 = "";
	String ull2 = "";
	String ull1 = "";

	String sur8 = "";
	String sur7 = "";
	String sur6 = "";
	String sur5 = "";
	String sur4 = "";
	String sur3 = "";
	String sur2 = "";
	String sur1 = "";
	String sul8 = "";
	String sul7 = "";
	String sul6 = "";
	String sul5 = "";
	String sul4 = "";
	String sul3 = "";
	String sul2 = "";
	String sul1 = "";

	String slr8 = "";
	String slr7 = "";
	String slr6 = "";
	String slr5 = "";
	String slr4 = "";
	String slr3 = "";
	String slr2 = "";
	String slr1 = "";
	String sll8 = "";
	String sll7 = "";
	String sll6 = "";

	String sll5 = "";
	String sll4 = "";
	String sll3 = "";
	String sll2 = "";
	String sll1 = "";
	HttpSession session = req.getSession();
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);

	int userId = 0;
	Users user = (Users) session.getAttribute("users");
	userId = user.getId();

	int commandId = (Integer) session.getAttribute("commandId");

	Map<String, Object> map = new HashMap<String, Object>();
	// Box box = HMSUtil.getBox(req);
	int medExamId = 0;
	String message = "";
	String jsp = "";
	int visitId = 0;
	String investigationReferToMH = "";

	if ((req.getParameter("medExamId")) != null
			&& (Integer.parseInt(req.getParameter("medExamId")) != 0)) {
		medExamId = Integer.parseInt(req.getParameter("medExamId"));
		if (req.getParameter("investigationReferToMH") != null
				&& !req.getParameter("investigationReferToMH<%=inc %>")
						.equals("")) {
			investigationReferToMH = req
					.getParameter("investigationReferToMH");
		}

		MasMedicalExaminationReportOnEntry masMedicalBoardProceedings = new MasMedicalExaminationReportOnEntry();
		masMedicalBoardProceedings = medicalExamHandlerService
				.loadMedicalExamObj(medExamId);
		Map<String, Object> generalMap = new HashMap<String, Object>();
		List<MasMedicalBoardExaminationDetail> masMedicalBoardDetails = new ArrayList<MasMedicalBoardExaminationDetail>();

		if (req.getParameter(SERVICE_NO) != null
				&& !req.getParameter(SERVICE_NO).equals("")) {
			serviceNo = req.getParameter(SERVICE_NO);
		}

		if (req.getParameter(AGE) != null
				&& !req.getParameter(SERVICE_NO).equals("")) {
			age = req.getParameter(AGE);
		}
		if (req.getParameter(TOTAL_SERVICE) != null
				&& !req.getParameter(TOTAL_SERVICE).equals("")) {
			totalservice = req.getParameter(TOTAL_SERVICE);
		}
		if (req.getParameter("serviceiaf") != null
				&& !req.getParameter(TOTAL_SERVICE).equals("")) {
			serviceiaf = req.getParameter("serviceiaf");
		}

		if (req.getParameter("typeOfCommunication") != null
				&& !req.getParameter("typeOfCommunication").equals("")) {
			typeOfCommunication = req.getParameter("typeOfCommunication");
		}
		if (req.getParameter(DATE_COMMENCEMENT) != null
				&& !req.getParameter(DATE_COMMENCEMENT).equals("")) {
			dateofcommun = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(DATE_COMMENCEMENT));
		}
		if (req.getParameter(PAST_MEDICAL_HISTORY) != null
				&& !req.getParameter(PAST_MEDICAL_HISTORY).equals("")) {
			pastmedicalhistory = req.getParameter(PAST_MEDICAL_HISTORY);
		}
		if (req.getParameter(PRESENT_MEDICAL_CATEGORY) != null
				&& !req.getParameter(PRESENT_MEDICAL_CATEGORY).equals("")) {
			presentmedicalhistory = req
					.getParameter(PRESENT_MEDICAL_CATEGORY);
		}
		if (req.getParameter(LAST_AME) != null) {
			lastame = req.getParameter(LAST_AME);
		}
		/*
		 * if (req.getParameter(HEIGHT_WITHOUT_SHOOSE) != null ) { height =
		 * req.getParameter(HEIGHT_WITHOUT_SHOOSE); }
		 */
		if (req.getParameter(ACTUAL_WEIGHT) != null
				&& !req.getParameter(ACTUAL_WEIGHT).equals("")) {
			actualweight = req.getParameter(ACTUAL_WEIGHT);
		}
		if (req.getParameter(IDEAL_WEIGHT) != null
				&& !req.getParameter(IDEAL_WEIGHT).equals("")) {
			idealweight = req.getParameter(IDEAL_WEIGHT);
		}
		if (req.getParameter(OVER_WEIGHT) != null
				&& !req.getParameter(OVER_WEIGHT).equals("")) {
			overweight = req.getParameter(OVER_WEIGHT);
		}
		if (req.getParameter(WAIST) != null
				&& !req.getParameter(WAIST).equals("")) {
			waist = req.getParameter(WAIST);
		}
		if (req.getParameter(CHEST_FULL) != null
				&& !req.getParameter(CHEST_FULL).equals("")) {
			chestfullexpansion = req.getParameter(CHEST_FULL);
		}
		if (req.getParameter(RANGE_EXPANSION) != null
				&& !req.getParameter(RANGE_EXPANSION).equals("")) {
			rangeofexpansion = req.getParameter(RANGE_EXPANSION);
		}
		if (req.getParameter(BHI) != null
				&& !req.getParameter(BHI).equals("")) {
			bhi = req.getParameter(BHI);
		}
		if (req.getParameter(BODY_FAT) != null
				&& !req.getParameter(BODY_FAT).equals("")) {
			bodyfat = req.getParameter(BODY_FAT);
		}
		if (req.getParameter(THICKNESS) != null
				&& !req.getParameter(THICKNESS).equals("")) {
			signfoldthickness = req.getParameter(THICKNESS);
		}
		if (req.getParameter(SPORTS) != null
				&& !req.getParameter(SPORTS).equals("")) {
			sportman = req.getParameter(SPORTS);
		}
		/*
		 * int deptId=0; int empId=0; int hinId=0;
		 * 
		 * if (req.getParameter("deptId") != null ) { deptId =
		 * Integer.parseInt(req.getParameter("deptId")); } if
		 * (req.getParameter("empId") != null ) { empId =
		 * Integer.parseInt(req.getParameter("empId")); } if
		 * (req.getParameter("hinId") != null ) { hinId =
		 * Integer.parseInt(req.getParameter("hinId")); } if
		 * (req.getParameter("visitId") != null ) { visitId =
		 * Integer.parseInt(req.getParameter("visitId")); } List<String>
		 * chargeCodeIdList = new ArrayList<String>(); List<Integer>
		 * quantityList = new ArrayList<Integer>(); List<Integer>
		 * patientInvestigationdetailsIdList = new ArrayList<Integer>();
		 * List<Integer> dgOrderdtIdList = new ArrayList<Integer>();
		 * List<String> investigationReferToMHList=new ArrayList<String>();
		 * List<String> investResultList=new ArrayList<String>(); String
		 * clinicalNotes1=""; if (req.getParameter("clinicalNotes1") != null
		 * && !(req.getParameter("clinicalNotes1").equals(""))) {
		 * clinicalNotes1 = req.getParameter("clinicalNotes1"); }
		 * 
		 * int hiddenValue = 1; String data=null;
		 * if(req.getParameter("data") != null &&
		 * !req.getParameter("data").equals("")) {
		 * data=(String)req.getParameter("data"); } if
		 * (Integer.parseInt(req.getParameter("hiddenValue")) != 1) {
		 * hiddenValue = Integer.parseInt(req.getParameter("hiddenValue"));
		 * } String deleatedorderid = ""; if
		 * (req.getParameter("deleatedorderid") != "") { deleatedorderid =
		 * req.getParameter("deleatedorderid"); }
		 * mapForDS.put("deleatedorderid",deleatedorderid); String
		 * deleatedValue = ""; if (req.getParameter("deleatedValue") != "")
		 * { deleatedValue = req.getParameter("deleatedValue"); }
		 * mapForDS.put("deleatedValue",deleatedValue);
		 * //--------------------
		 * --------------------------------------------
		 * ------------------------------------ String
		 * dlc="",hb="",tlc="",esr="",spGravity="",albumen="",sugarR="";
		 * String
		 * sugarF="",sugarPP="",urea="",uricAcid="",srCreatine="",cholesterol
		 * =""; String triglycerids="",hdl="",vldl=""; int temp = 1;
		 * String[] chargeCodeIdArr = new String[hiddenValue]; for (int i =
		 * 0; i < hiddenValue; i++) { if (req.getParameter("chargeCodeName"
		 * + temp) != null && !req.getParameter("chargeCodeName" + temp)
		 * .equals("")) { String chargeCodeNameWithId = req
		 * .getParameter("chargeCodeName" + temp); int index1 =
		 * chargeCodeNameWithId.lastIndexOf("["); int index2 =
		 * chargeCodeNameWithId.lastIndexOf("]"); index1++; String
		 * chargeCodeName=chargeCodeNameWithId.substring(0,(index1-1));
		 * 
		 * String chargeCodeId = chargeCodeNameWithId.substring(index1,
		 * index2); if (!chargeCodeId.equals("")) { chargeCodeIdArr[i] =
		 * chargeCodeId; int qty = 1; if
		 * (req.getParameter("investigationReferToMH" + temp) != null &&
		 * !req.getParameter("investigationReferToMH" + temp).equals("")) {
		 * investigationReferToMHList
		 * .add(req.getParameter("investigationReferToMH" + temp));
		 * map.put("investigationReferToMHList",
		 * investigationReferToMHList);
		 * 
		 * }else { investigationReferToMHList.add("n"); } if(data!=null) {
		 * String resultVal="";
		 * 
		 * if (req.getParameter("Result" + temp) != null &&
		 * !req.getParameter("Result" + temp).equals("")) {
		 * investResultList.add(req.getParameter("Result" + temp));
		 * resultVal=req.getParameter("Result" + temp); }else {
		 * investResultList.add(" "); resultVal=" "; }
		 * 
		 * if(chargeCodeName.equalsIgnoreCase("dlc")) { dlc=resultVal; }else
		 * if(chargeCodeName.equalsIgnoreCase("Hb")) { hb=resultVal; }else
		 * if(chargeCodeName.equalsIgnoreCase("tlc")) { tlc=resultVal; }else
		 * if(chargeCodeName.equalsIgnoreCase("esr")) { esr=resultVal; }else
		 * if(chargeCodeName.equalsIgnoreCase("Gravity")) {
		 * spGravity=resultVal; }else
		 * if(chargeCodeName.equalsIgnoreCase("ALBUMIN")) {
		 * albumen=resultVal; }else
		 * if(chargeCodeName.equalsIgnoreCase("SUGAR R")) {
		 * sugarR=resultVal; }else
		 * if(chargeCodeName.equalsIgnoreCase("SUGAR F")) {
		 * sugarF=resultVal; }else
		 * if(chargeCodeName.equalsIgnoreCase("SUGAR PP")) {
		 * sugarPP=resultVal; }else
		 * if(chargeCodeName.equalsIgnoreCase("Urea")) { urea=resultVal;
		 * }else if(chargeCodeName.equalsIgnoreCase("URIC ACID")) {
		 * uricAcid=resultVal; }else
		 * if(chargeCodeName.equalsIgnoreCase("CREATININE")) {
		 * srCreatine=resultVal; }else
		 * if(chargeCodeName.equalsIgnoreCase("CHOLESTEROL")) {
		 * cholesterol=resultVal; }else
		 * if(chargeCodeName.equalsIgnoreCase("TRIGLYCERIDE")) {
		 * triglycerids=resultVal; }else
		 * if(chargeCodeName.equalsIgnoreCase("HDL")) { hdl=resultVal; }else
		 * if(chargeCodeName.equalsIgnoreCase("VLDL")) { vldl=resultVal; }
		 * 
		 * } chargeCodeIdList.add(chargeCodeIdArr[i]);
		 * quantityList.add(qty); //clinicalList.add(clinicalNotes); }
		 * 
		 * } if (req.getParameter("patientInvestigationdetailsId" + temp) !=
		 * null && !req.getParameter("patientInvestigationdetailsId" + temp)
		 * .equals("")) {
		 * patientInvestigationdetailsIdList.add(Integer.parseInt
		 * (req.getParameter("patientInvestigationdetailsId" + temp))); } if
		 * (req.getParameter("dgOrderdtId" + temp) != null &&
		 * !req.getParameter("dgOrderdtId" + temp) .equals("")) {
		 * dgOrderdtIdList
		 * .add(Integer.parseInt(req.getParameter("dgOrderdtId" + temp))); }
		 * temp++; }
		 */
		List<String> investigationReferToMHList = new ArrayList<String>();
		int deptId = 0;
		int empId = 0;
		int hinId = 0;
		if (req.getParameter("deptId") != null) {
			deptId = Integer.parseInt(req.getParameter("deptId"));
		}
		if (req.getParameter("empId") != null) {
			empId = Integer.parseInt(req.getParameter("empId"));
		}
		if (req.getParameter("hinId") != null) {
			hinId = Integer.parseInt(req.getParameter("hinId"));
		}
		if (req.getParameter("visitId") != null) {
			visitId = Integer.parseInt(req.getParameter("visitId"));
		}
		List<String> chargeCodeIdList = new ArrayList<String>();
		List<Integer> quantityList = new ArrayList<Integer>();

		List<Integer> patientInvestigationdetailsIdList = new ArrayList<Integer>();
		int patientInvestigationHeaderId = 0;
		if (req.getParameter("patientInvestigationHeaderId") != null
				&& !req.getParameter("patientInvestigationHeaderId")
						.equals("")) {
			patientInvestigationHeaderId = Integer.parseInt(req
					.getParameter("patientInvestigationHeaderId"));
		}
		int dgOrderhdId = 0;
		if (req.getParameter("dgOrderhdId") != null
				&& !req.getParameter("dgOrderhdId").equals("")) {
			dgOrderhdId = Integer.parseInt(req.getParameter("dgOrderhdId"));
		}
		List<String> investResultList = new ArrayList<String>();
		String clinicalNotes1 = "";
		if (req.getParameter("clinicalNotes1") != null
				&& !(req.getParameter("clinicalNotes1").equals(""))) {
			clinicalNotes1 = req.getParameter("clinicalNotes1");
		}
		String refferToMhForInv = "";
		if (req.getParameter("refferToMhForInv") != null
				&& !(req.getParameter("refferToMhForInv").equals(""))) {
			refferToMhForInv = req.getParameter("refferToMhForInv");
		}
		int hiddenValue = 1;
		String data = null;
		if (req.getParameter("data") != null
				&& !req.getParameter("data").equals("")) {
			data = (String) req.getParameter("data");
		}
		if (req.getParameter("hiddenValue") != null
				&& Integer.parseInt(req.getParameter("hiddenValue")) != 1) {
			hiddenValue = Integer.parseInt(req.getParameter("hiddenValue"));
		}
		String deleatedorderid = "";
		if (!req.getParameter("deleatedorderid").equals("")) {
			deleatedorderid = req.getParameter("deleatedorderid");
		}
		mapForDS.put("deleatedorderid", deleatedorderid);
		String deleatedValue = "";
		if (req.getParameter("deleatedValue") != null
				&& !req.getParameter("deleatedValue").equals("")) {
			deleatedValue = req.getParameter("deleatedValue");
		}
		mapForDS.put("deleatedValue", deleatedValue);
		// ------------------------------------------------------------------------------------------------
		String dlc = "", hb = "", tlc = "", esr = "", spGravity = "", albumen = "", sugarR = "";
		String sugarF = "", sugarPP = "", urea = "", uricAcid = "", srCreatine = "", cholesterol = "";
		String triglycerids = "", hdl = "", vldl = "";
		int temp = 1;
		List<Integer> dgOrderdtIdList = new ArrayList<Integer>();
		String[] chargeCodeIdArr = new String[hiddenValue];

		for (int i = 0; i < hiddenValue; i++) {
			if (req.getParameter("chargeCodeName" + temp) != null
					&& !req.getParameter("chargeCodeName" + temp)
							.equals("")) {
				String chargeCodeNameWithId = req
						.getParameter("chargeCodeName" + temp);
				int index1 = chargeCodeNameWithId.lastIndexOf("[");
				int index2 = chargeCodeNameWithId.lastIndexOf("]");
				index1++;
				String chargeCodeName = chargeCodeNameWithId.substring(0,
						(index1 - 1));
				String chargeCodeId = chargeCodeNameWithId.substring(
						index1, index2);
				// patientInvestigationdetailsIdList
				if (!chargeCodeId.equals("")) {
					chargeCodeIdArr[i] = chargeCodeId;
					int qty = 1;
					// if (req.getParameter("investigationReferToMH" + temp)
					// != null && !req.getParameter("investigationReferToMH"
					// + temp).equals(""))
					if (req.getParameter("investigationReferToMH" + temp) != null) {
						investigationReferToMHList.add("y");
					} else {
						investigationReferToMHList.add("n");
					}
					if (data != null) {
						String resultVal = "";
						if (req.getParameter("Result" + temp) != null
								&& !req.getParameter("Result" + temp)
										.equals("")) {
							investResultList.add(req.getParameter("Result"
									+ temp));
							resultVal = req.getParameter("Result" + temp);
						} else {
							investResultList.add(" ");
							resultVal = " ";
						}
						if (chargeCodeName.equalsIgnoreCase("dlc")) {
							dlc = resultVal;
						} else if (chargeCodeName.equalsIgnoreCase("Hb")) {
							hb = resultVal;
						} else if (chargeCodeName.equalsIgnoreCase("tlc")) {
							tlc = resultVal;
						} else if (chargeCodeName.equalsIgnoreCase("esr")) {
							esr = resultVal;
						} else if (chargeCodeName
								.equalsIgnoreCase("Gravity")) {
							spGravity = resultVal;
						} else if (chargeCodeName
								.equalsIgnoreCase("ALBUMIN")) {
							albumen = resultVal;
						} else if (chargeCodeName
								.equalsIgnoreCase("SUGAR R")) {
							sugarR = resultVal;
						} else if (chargeCodeName
								.equalsIgnoreCase("SUGAR F")) {
							sugarF = resultVal;
						} else if (chargeCodeName
								.equalsIgnoreCase("SUGAR PP")) {
							sugarPP = resultVal;
						} else if (chargeCodeName.equalsIgnoreCase("Urea")) {
							urea = resultVal;
						} else if (chargeCodeName
								.equalsIgnoreCase("URIC ACID")) {
							uricAcid = resultVal;
						} else if (chargeCodeName
								.equalsIgnoreCase("CREATININE")) {
							srCreatine = resultVal;
						} else if (chargeCodeName
								.equalsIgnoreCase("CHOLESTEROL")) {
							cholesterol = resultVal;
						} else if (chargeCodeName
								.equalsIgnoreCase("TRIGLYCERIDE")) {
							triglycerids = resultVal;
						} else if (chargeCodeName.equalsIgnoreCase("HDL")) {
							hdl = resultVal;
						} else if (chargeCodeName.equalsIgnoreCase("VLDL")) {
							vldl = resultVal;
						}
					}
					chargeCodeIdList.add(chargeCodeIdArr[i]);
					quantityList.add(qty);
					// clinicalList.add(clinicalNotes);
				}
			}
			/*
			 * if (req.getParameter("patientInvestigationdetailsId" + i) !=
			 * null && !req.getParameter("patientInvestigationdetailsId" +
			 * i).equals("")) {
			 * patientInvestigationdetailsIdList.add(Integer
			 * .parseInt(req.getParameter("patientInvestigationdetailsId" +
			 * i))); } if (req.getParameter("dgOrderdtId" + i) != null &&
			 * !req.getParameter("dgOrderdtId" + i).equals("")) {
			 * dgOrderdtIdList
			 * .add(Integer.parseInt(req.getParameter("dgOrderdtId" + i)));
			 * }
			 */
			if (req.getParameter("patientInvestigationdetailsId" + temp) != null
					&& !req.getParameter(
							"patientInvestigationdetailsId" + temp).equals(
							"")) {
				patientInvestigationdetailsIdList.add(Integer.parseInt(req
						.getParameter("patientInvestigationdetailsId"
								+ temp)));
			} else {
				patientInvestigationdetailsIdList.add(new Integer(0));
			}
			if (req.getParameter("dgOrderdtId" + temp) != null
					&& !req.getParameter("dgOrderdtId" + temp).equals("")) {
				dgOrderdtIdList.add(Integer.parseInt(req
						.getParameter("dgOrderdtId" + temp)));
			} else {
				dgOrderdtIdList.add(new Integer(0));
			}
			temp++;

		}
		String alcohol = "";
		if (req.getParameter("alcohol") != null
				&& !req.getParameter("alcohol").equals("")) {
			alcohol = req.getParameter("alcohol");
		}
		mapForDS.put("alcohol", alcohol);
		// ----------------------------------------------------------------------------------
		String[] familyHistoryArray = null;
		if (req.getParameterValues(FM_DM) != null
				&& !(req.getParameterValues(FM_DM).equals(""))) {
			familyHistoryArray = (String[]) req.getParameterValues(FM_DM);
		}
		String otherFamilyHistory = "";
		if (req.getParameter("otherFamilyHistory") != null
				&& !req.getParameter("otherFamilyHistory").equals("")) {
			otherFamilyHistory = req.getParameter("otherFamilyHistory");
			mapForDS.put("otherFamilyHistory", otherFamilyHistory);
		}
		// -------------------------------------------------------------------------------------
		if (req.getParameter(ENTRY_OF_DATE) != null
				&& !(req.getParameter(ENTRY_OF_DATE).equals(""))) {
			entryDate = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(ENTRY_OF_DATE));
		}
		if (req.getParameter(TYPE_OF_ENTRY) != null
				&& !(req.getParameter(TYPE_OF_ENTRY).equals(""))) {
			typeOfEntry = Integer.parseInt(req.getParameter(TYPE_OF_ENTRY));
		}
		if (req.getParameter(BATCH1_NO) != null
				&& !(req.getParameter(BATCH1_NO).equals(""))) {
			betchNo = req.getParameter(BATCH1_NO);
		}
		if (req.getParameter(CHEST_NO) != null
				&& !(req.getParameter(CHEST_NO).equals(""))) {
			chestNo = req.getParameter(CHEST_NO);
		}

		if (req.getParameter(ROLL_NO) != null
				&& !(req.getParameter(ROLL_NO).equals(""))) {
			rollNo = req.getParameter(ROLL_NO);
		}

		if (req.getParameter(MEDICAL_EXAM_HELD_AT) != null
				&& !(req.getParameter(MEDICAL_EXAM_HELD_AT).equals(""))) {
			medicalExamHeld = Integer.parseInt(req
					.getParameter(MEDICAL_EXAM_HELD_AT));
		}

		if (req.getParameter(MEDICAL_STATUS) != null
				&& !(req.getParameter(MEDICAL_STATUS).equals(""))) {
			medicalStatus = req.getParameter(MEDICAL_STATUS);
		}
		if (req.getParameter(FULL_NAME) != null
				&& !(req.getParameter(FULL_NAME).equals(""))) {
			fullName = req.getParameter(FULL_NAME);
		}

		if (req.getParameter(DATE_OF_BIRTH) != null
				&& !(req.getParameter(DATE_OF_BIRTH).equals(""))) {
			dateOfBirth = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(DATE_OF_BIRTH));
		}

		if (req.getParameter(MARITIAL_STATUS) != null
				&& !(req.getParameter(MARITIAL_STATUS).equals(""))) {
			maritialStatus = Integer.parseInt(req
					.getParameter(MARITIAL_STATUS));
		}

		if (req.getParameter(SERVICE) != null
				&& !(req.getParameter(SERVICE).equals(""))) {
			service = req.getParameter(SERVICE);
		}

		if (req.getParameter(P_NO) != null
				&& !(req.getParameter(P_NO).equals(""))) {
			pNo = req.getParameter(P_NO);
		}

		if (req.getParameter(HOURS_OF_FLOWN) != null
				&& !(req.getParameter(HOURS_OF_FLOWN).equals(""))) {
			hoursOfFlown = req.getParameter(HOURS_OF_FLOWN);
		}
		if (req.getParameter(PERMANENT_ADDRESS) != null
				&& !(req.getParameter(PERMANENT_ADDRESS).equals(""))) {
			permanentAddress = req.getParameter(PERMANENT_ADDRESS);
		}

		if (req.getParameter(IDENTIFICATION_MARKS1) != null
				&& !(req.getParameter(IDENTIFICATION_MARKS1).equals(""))) {
			identification1 = req.getParameter(IDENTIFICATION_MARKS1);
		}

		if (req.getParameter(IDENTIFICATION_MARKS2) != null
				&& !(req.getParameter(IDENTIFICATION_MARKS2).equals(""))) {
			identification2 = req.getParameter(IDENTIFICATION_MARKS2);
		}
		if (req.getParameter(ARMS_CROPS) != null
				&& !(req.getParameter(ARMS_CROPS).equals(""))) {
			armsCrops = req.getParameter(ARMS_CROPS);
		}

		if (req.getParameter(DATE_OF_COMPLETION) != null
				&& !(req.getParameter(DATE_OF_COMPLETION).equals(""))) {
			dateOfCompletion = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(DATE_OF_COMPLETION));
		}

		if (req.getParameter(DOCUMENT_FORWARD_DATE1) != null
				&& !(req.getParameter(DOCUMENT_FORWARD_DATE1).equals(""))) {
			documentForwardDate = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(DOCUMENT_FORWARD_DATE1));

		}

		if (req.getParameter(DOCUMENT_FORWARD_TO) != null
				&& !(req.getParameter(DOCUMENT_FORWARD_TO).equals(""))) {
			documentForwardTo = req.getParameter(DOCUMENT_FORWARD_TO);
		}
		/*
		 * if (req.getParameter(DATE_OF_REPORTING) != null &&
		 * !(req.getParameter(DATE_OF_REPORTING).equals(""))) {
		 * dateOfReporting = HMSUtil.dateFormatterDDMMYYYY(req
		 * .getParameter(DATE_OF_REPORTING));
		 * 
		 * }
		 */
		if (req.getParameter("dateOfDischarge") != null
				&& !(req.getParameter("dateOfDischarge").equals(""))) {
			dateOfDischarge = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter("dateOfDischarge"));

		}
		
		if (req.getParameter(FROM_WHERE_HE_REPORT) != null
				&& !(req.getParameter(FROM_WHERE_HE_REPORT).equals(""))) {
			fromWhereHeReport = req.getParameter(FROM_WHERE_HE_REPORT);
		}
		if (req.getParameter(HYPERTENSION) != null
				&& !(req.getParameter(HYPERTENSION).equals(""))) {
			hypertension = req.getParameter(HYPERTENSION);
		}
		if (req.getParameter(HEAR_DISEASE) != null
				&& !(req.getParameter(HEAR_DISEASE).equals(""))) {
			heartDisease = req.getParameter(HEAR_DISEASE);
		}
		if (req.getParameter(DIABETES) != null
				&& !(req.getParameter(DIABETES).equals(""))) {
			diabetes = req.getParameter(DIABETES);
		}
		if (req.getParameter(BLEEDING_DIORDER) != null
				&& !(req.getParameter(BLEEDING_DIORDER).equals(""))) {
			bleedingDisorder = req.getParameter(BLEEDING_DIORDER);
		}
		if (req.getParameter(MENTAL_DISEASE) != null
				&& !(req.getParameter(MENTAL_DISEASE).equals(""))) {
			mentalDisease = req.getParameter(MENTAL_DISEASE);
		}
		if (req.getParameter(NIGHT_BLINDNESS) != null
				&& !(req.getParameter(NIGHT_BLINDNESS).equals(""))) {
			nightBlindness = req.getParameter(NIGHT_BLINDNESS);
		}

		if (req.getParameter(ASTHAMA) != null
				&& !(req.getParameter(ASTHAMA).equals(""))) {
			asthama = req.getParameter(ASTHAMA);
		}

		if (req.getParameter(DISCHARGE_FROM) != null
				&& !(req.getParameter(DISCHARGE_FROM).equals(""))) {
			dischargeFrom = req.getParameter(DISCHARGE_FROM);

		}

		if (req.getParameter(PLEURISY) != null
				&& !(req.getParameter(PLEURISY).equals(""))) {
			plesury = req.getParameter(PLEURISY);
		}

		if (req.getParameter(EAR_DISEASE) != null
				&& !(req.getParameter(EAR_DISEASE).equals(""))) {
			earDieses = req.getParameter(EAR_DISEASE);
		}

		if (req.getParameter(RHEUMATISM) != null
				&& !(req.getParameter(RHEUMATISM).equals(""))) {
			rheumatism = req.getParameter(RHEUMATISM);
		}
		if (req.getParameter(FREQUENT_CAUGH) != null
				&& !(req.getParameter(FREQUENT_CAUGH).equals(""))) {
			frequentCough = req.getParameter(FREQUENT_CAUGH);
		}

		if (req.getParameter(CHRONIC_INDIGESTION) != null
				&& !(req.getParameter(CHRONIC_INDIGESTION).equals(""))) {
			chronicIndigestion = req.getParameter(CHRONIC_INDIGESTION);
		}
		/*
		 * if (req.getParameter(NERVOUS_BRAKDOWN) != null &&
		 * !(req.getParameter(NERVOUS_BRAKDOWN).equals(""))) {
		 * nervousBrakdown = req.getParameter(NERVOUS_BRAKDOWN); }
		 */
		if (req.getParameter(KIDENY_BLADDER) != null
				&& !(req.getParameter(KIDENY_BLADDER).equals(""))) {
			kidenyBladder = req.getParameter(KIDENY_BLADDER);
		}
		if (req.getParameter(FITS_FAINTING_ATTACKS) != null
				&& !(req.getParameter(FITS_FAINTING_ATTACKS).equals(""))) {
			fitsFaintinngAttacks = req.getParameter(FITS_FAINTING_ATTACKS);
		}
		if (req.getParameter(STD) != null
				&& !(req.getParameter(STD).equals(""))) {
			std = req.getParameter(STD);
		}

		if (req.getParameter(SEVERE_HEAD_INJURY) != null
				&& !(req.getParameter(SEVERE_HEAD_INJURY).equals(""))) {
			serveHeadInjury = req.getParameter(SEVERE_HEAD_INJURY);
		}

		if (req.getParameter(JOUNDICE) != null
				&& !(req.getParameter(JOUNDICE).equals(""))) {
			joundice = req.getParameter(JOUNDICE);
		}
		if (req.getParameter(SICKNESS) != null
				&& !(req.getParameter(SICKNESS).equals(""))) {
			sickness = req.getParameter(SICKNESS);
		}
		if (req.getParameter(BREAST_DISEASE) != null
				&& !(req.getParameter(BREAST_DISEASE).equals(""))) {
			breastDisease = req.getParameter(BREAST_DISEASE);
		}
		if (req.getParameter(TRACHOMA) != null
				&& !(req.getParameter(TRACHOMA).equals(""))) {
			trachoma = req.getParameter(TRACHOMA);
		}

		if (req.getParameter(AMENORRHOEA) != null
				&& !(req.getParameter(AMENORRHOEA).equals(""))) {
			amenorrhoea = req.getParameter(AMENORRHOEA);
		}
		if (req.getParameter(NIGHT_BINDNESS) != null
				&& !(req.getParameter(NIGHT_BINDNESS).equals(""))) {
			nightbindness = req.getParameter(NIGHT_BINDNESS);
		}
		if (req.getParameter(MENORRHAGIA) != null
				&& !(req.getParameter(MENORRHAGIA).equals(""))) {
			menirrhagia = req.getParameter(MENORRHAGIA);
		}
		if (req.getParameter(LASER_TREATEMENT) != null
				&& !(req.getParameter(LASER_TREATEMENT).equals(""))) {
			laserTeartement = req.getParameter(LASER_TREATEMENT);
		}
		if (req.getParameter(PREGNANCY) != null
				&& !(req.getParameter(PREGNANCY).equals(""))) {
			pregnancy = req.getParameter(PREGNANCY);
		}
		if (req.getParameter(EYE_DISEASE) != null
				&& !(req.getParameter(EYE_DISEASE).equals(""))) {
			eyeDisease = req.getParameter(EYE_DISEASE);
		}
		if (req.getParameter(REJECTED_AS_UNFIT) != null
				&& !(req.getParameter(REJECTED_AS_UNFIT).equals(""))) {
			rejectedAsUnfit = req.getParameter(REJECTED_AS_UNFIT);
		}
		if (req.getParameter(DISCHARGE_MEDICALLY_UNFIT) != null
				&& !(req.getParameter(DISCHARGE_MEDICALLY_UNFIT).equals(""))) {
			dischargeMedicallyUnfit = req
					.getParameter(DISCHARGE_MEDICALLY_UNFIT);
		}
		if (req.getParameter(ADIMMITED_IN_HOSPITAL_FOR_ILLNESS) != null
				&& !(req.getParameter(ADIMMITED_IN_HOSPITAL_FOR_ILLNESS)
						.equals(""))) {
			adimmitedInHospitalFirIllness = req
					.getParameter(ADIMMITED_IN_HOSPITAL_FOR_ILLNESS);
		}
		if (req.getParameter(ABORTION) != null
				&& !(req.getParameter(ABORTION).equals(""))) {
			abortion = req.getParameter(ABORTION);
		}

		if (req.getParameter(STATE_NATURE_OF_THE_DISEASE) != null
				&& !(req.getParameter(STATE_NATURE_OF_THE_DISEASE)
						.equals(""))) {
			stateNature = req.getParameter(STATE_NATURE_OF_THE_DISEASE);
		}
		if (req.getParameter(OTHER_INFORMATION) != null
				&& !(req.getParameter(OTHER_INFORMATION).equals(""))) {
			otherInform = req.getParameter(OTHER_INFORMATION);
		}
		if (req.getParameter(HEIGHT_WITHOUT_SHOOSE) != null
				&& !(req.getParameter(HEIGHT_WITHOUT_SHOOSE).equals(""))) {
			height = (new BigDecimal(req
					.getParameter(HEIGHT_WITHOUT_SHOOSE)));
		}
		if (req.getParameter(ACTUAL_WEIGHT) != null
				&& !(req.getParameter(ACTUAL_WEIGHT).equals(""))) {
			weight = (new BigDecimal(req.getParameter(ACTUAL_WEIGHT)));
		}
		if (req.getParameter(ACCEPTABLE_KG) != null
				&& !(req.getParameter(ACCEPTABLE_KG).equals(""))) {
			acceptableKg = (new BigDecimal(req.getParameter(ACCEPTABLE_KG)));
		}
		if (req.getParameter(LEG_LENGTH) != null
				&& !(req.getParameter(LEG_LENGTH).equals(""))) {
			leglength = (new BigDecimal(req.getParameter(LEG_LENGTH)));
		}
		if (req.getParameter(APPEREANCE) != null
				&& !(req.getParameter(APPEREANCE).equals(""))) {
			appereance = req.getParameter(APPEREANCE);
		}
		if (req.getParameter(ALBUMIN) != null
				&& !(req.getParameter(ALBUMIN).equals(""))) {
			albumin = req.getParameter(ALBUMIN);
		}
		if (req.getParameter(SUGAR) != null
				&& !(req.getParameter(SUGAR).equals(""))) {
			sugar = req.getParameter(SUGAR);
		}
		if (req.getParameter(SP_GRAVITY) != null
				&& !(req.getParameter(SP_GRAVITY).equals(""))) {
			spGraviry = req.getParameter(SP_GRAVITY);
		}
		if (req.getParameter(HB_PERCENTAGE) != null
				&& !(req.getParameter(HB_PERCENTAGE).equals(""))) {
			hbPercentage = req.getParameter(HB_PERCENTAGE);
		}
		if (req.getParameter(PHYSIQUE) != null
				&& !(req.getParameter(PHYSIQUE).equals(""))) {
			physique = req.getParameter(PHYSIQUE);
		}

		if (req.getParameter(ANYOTHER_INV_CARRIED_OUT) != null
				&& !(req.getParameter(ANYOTHER_INV_CARRIED_OUT).equals(""))) {
			anyOtherInv = req.getParameter(ANYOTHER_INV_CARRIED_OUT);
		}
		if (req.getParameter(SKIN) != null
				&& !(req.getParameter(SKIN).equals(""))) {
			skin = req.getParameter(SKIN);
		}
		if (req.getParameter(ABDOMEN) != null
				&& !(req.getParameter(ABDOMEN).equals(""))) {
			abdomen = req.getParameter(ABDOMEN);
		}
		if (req.getParameter(HEART_SIZE) != null
				&& !(req.getParameter(HEART_SIZE).equals(""))) {
			heartSize = req.getParameter(HEART_SIZE);
		}
		if (req.getParameter(SOUND) != null
				&& !(req.getParameter(SOUND).equals(""))) {
			sound = req.getParameter(SOUND);
		}
		if (req.getParameter(RHYTHM) != null
				&& !(req.getParameter(RHYTHM).equals(""))) {
			rhythm = req.getParameter(RHYTHM);
		}
		if (req.getParameter(ARTERIAL_WALLS) != null
				&& !(req.getParameter(ARTERIAL_WALLS).equals(""))) {
			arterialWalls = req.getParameter(ARTERIAL_WALLS);
		}
		if (req.getParameter(PULSE_RATES) != null
				&& !(req.getParameter(PULSE_RATES).equals(""))) {
			pulseRates = req.getParameter(PULSE_RATES);
		}
		if (req.getParameter(BP1) != null
				&& !(req.getParameter(BP1).equals(""))) {
			bp = req.getParameter(BP1);
		}
		if (req.getParameter(FULL_EXPENSION) != null
				&& !(req.getParameter(FULL_EXPENSION).equals(""))) {
			fullExpension = req.getParameter(FULL_EXPENSION);
		}
		if (req.getParameter(RANGE_OF_EXPENSION) != null
				&& !(req.getParameter(RANGE_OF_EXPENSION).equals(""))) {
			rangeOfExpension = req.getParameter(RANGE_OF_EXPENSION);
		}

		if (req.getParameter(SELF_BALANCINF_R) != null
				&& !(req.getParameter(SELF_BALANCINF_R).equals(""))) {
			selfBalR = req.getParameter(SELF_BALANCINF_R);
		}
		if (req.getParameter(SELF_BALANCING_L) != null
				&& !(req.getParameter(SELF_BALANCING_L).equals(""))) {
			selfBalL = req.getParameter(SELF_BALANCING_L);
		}
		if (req.getParameter(SPEECH_MENTAL_CAPACITY) != null
				&& !(req.getParameter(SPEECH_MENTAL_CAPACITY).equals(""))) {
			speechMental = req.getParameter(SPEECH_MENTAL_CAPACITY);
		}
		if (req.getParameter(ENDOCRINE_CONDITION) != null
				&& !(req.getParameter(ENDOCRINE_CONDITION).equals(""))) {
			endocrinCond = req.getParameter(ENDOCRINE_CONDITION);
		}
		if (req.getParameter(OTHER_ABNORMALITIES) != null
				&& !(req.getParameter(OTHER_ABNORMALITIES).equals(""))) {
			otherAbnormalities = req.getParameter(OTHER_ABNORMALITIES);
		}
		if (req.getParameter(MEDICIN_REMARKS) != null
				&& !(req.getParameter(MEDICIN_REMARKS).equals(""))) {
			medicinRemarks = req.getParameter(MEDICIN_REMARKS);
		}
		if (req.getParameter(FINGER) != null
				&& !(req.getParameter(FINGER).equals(""))) {
			finger = req.getParameter(FINGER);
		}
		if (req.getParameter(HAND) != null
				&& !(req.getParameter(HAND).equals(""))) {
			hand = req.getParameter(HAND);
		}
		if (req.getParameter(WRIST) != null
				&& !(req.getParameter(WRIST).equals(""))) {
			wrist = req.getParameter(WRIST);
		}
		if (req.getParameter(ELBOWS) != null
				&& !(req.getParameter(ELBOWS).equals(""))) {
			elbows = req.getParameter(ELBOWS);
		}
		if (req.getParameter(SHOULDER_GIRDLES) != null
				&& !(req.getParameter(SHOULDER_GIRDLES).equals(""))) {
			shoulderGridles = req.getParameter(SHOULDER_GIRDLES);
		}
		if (req.getParameter(CERCIVAL) != null
				&& !(req.getParameter(CERCIVAL).equals(""))) {
			cercival = req.getParameter(CERCIVAL);
		}
		if (req.getParameter(DORSAL_VERTEBRATE) != null
				&& !(req.getParameter(DORSAL_VERTEBRATE).equals(""))) {
			dorsalVertebrate = req.getParameter(DORSAL_VERTEBRATE);
		}
		if (req.getParameter(HULLUX) != null
				&& !(req.getParameter(HULLUX).equals(""))) {
			hullux = req.getParameter(HULLUX);
		}
		if (req.getParameter(VALGUS) != null
				&& !(req.getParameter(VALGUS).equals(""))) {
			valgus = req.getParameter(VALGUS);
		}
		if (req.getParameter(RIGGUS) != null
				&& !(req.getParameter(RIGGUS).equals(""))) {
			riggus = req.getParameter(RIGGUS);
		}
		if (req.getParameter(FLAT_FEET) != null
				&& !(req.getParameter(FLAT_FEET).equals(""))) {
			flatFeet = req.getParameter(FLAT_FEET);
		}
		if (req.getParameter(JOINTS) != null
				&& !(req.getParameter(JOINTS).equals(""))) {
			joints = req.getParameter(JOINTS);
		}
		if (req.getParameter(PELVIS) != null
				&& !(req.getParameter(PELVIS).equals(""))) {
			pelvis = req.getParameter(PELVIS);
		}
		if (req.getParameter(GAIL) != null
				&& !(req.getParameter(GAIL).equals(""))) {
			gail = req.getParameter(GAIL);
		}
		if (req.getParameter(LUMBER_SCALER_VERTABRAC) != null
				&& !(req.getParameter(LUMBER_SCALER_VERTABRAC).equals(""))) {
			lumberScaler = req.getParameter(LUMBER_SCALER_VERTABRAC);
		}
		if (req.getParameter(ROCCYX_VARICOSE_VENIS) != null
				&& !(req.getParameter(ROCCYX_VARICOSE_VENIS).equals(""))) {
			roccyxVericose = req.getParameter(ROCCYX_VARICOSE_VENIS);
		}
		if (req.getParameter(HYDROCELE) != null
				&& !(req.getParameter(HYDROCELE).equals(""))) {
			hydrocele = req.getParameter(HYDROCELE);
		}
		if (req.getParameter(VARICOCELE) != null
				&& !(req.getParameter(VARICOCELE).equals(""))) {
			varicocele = req.getParameter(VARICOCELE);
		}
		if (req.getParameter(UNDER_SCENDED_TESTES) != null
				&& !(req.getParameter(UNDER_SCENDED_TESTES).equals(""))) {
			underScende = req.getParameter(UNDER_SCENDED_TESTES);
		}
		if (req.getParameter(HEMONHOIDS) != null
				&& !(req.getParameter(HEMONHOIDS).equals(""))) {
			hemonhoids = req.getParameter(HEMONHOIDS);
		}
		if (req.getParameter(HERNIA_MUSCLE) != null
				&& !(req.getParameter(HERNIA_MUSCLE).equals(""))) {
			herinaMusic = req.getParameter(HERNIA_MUSCLE);
		}
		if (req.getParameter(BREASTS) != null
				&& !(req.getParameter(BREASTS).equals(""))) {
			breasts = req.getParameter(BREASTS);
		}
		if (req.getParameter(SURGERY_REMARKS) != null
				&& !(req.getParameter(SURGERY_REMARKS).equals(""))) {
			surgeryRemarks = req.getParameter(SURGERY_REMARKS);
		}
		if (req.getParameter(RESPIRATORY_SYSTEM) != null
				&& !(req.getParameter(RESPIRATORY_SYSTEM).equals(""))) {
			respatorySystem = req.getParameter(RESPIRATORY_SYSTEM);
		}

		if (req.getParameter(WITH_GLASSES_DISTANT_R) != null
				&& !(req.getParameter(WITH_GLASSES_DISTANT_R).equals(""))) {
			withGlassesDistantR = req.getParameter(WITH_GLASSES_DISTANT_R);
		}
		if (req.getParameter(WITH_GLASSES_DISTANT_L) != null
				&& !(req.getParameter(WITH_GLASSES_DISTANT_L).equals(""))) {
			withglassesDistantL = req.getParameter(WITH_GLASSES_DISTANT_L);
		}
		if (req.getParameter(WITH_GLASSES_NEAR_R) != null
				&& !(req.getParameter(WITH_GLASSES_NEAR_R).equals(""))) {
			withGlassesNearR = req.getParameter(WITH_GLASSES_NEAR_R);
		}
		if (req.getParameter(WITH_GLASSES_NEAR_L) != null
				&& !(req.getParameter(WITH_GLASSES_NEAR_L).equals(""))) {
			withGlassesNearL = req.getParameter(WITH_GLASSES_NEAR_L);
		}
		if (req.getParameter(WITH_GLASSES_NEAR_CP) != null
				&& !(req.getParameter(WITH_GLASSES_NEAR_CP).equals(""))) {
			withGlassesNearCP = req.getParameter(WITH_GLASSES_NEAR_CP);

		}
		if (req.getParameter(WITHOUT_GLASSES_DISTANT_R) != null
				&& !(req.getParameter(WITHOUT_GLASSES_DISTANT_R).equals(""))) {
			withoutGlassesDistantR = req
					.getParameter(WITHOUT_GLASSES_DISTANT_R);
		}
		if (req.getParameter(WITHOUT_GLASSES_DISTANT_L) != null
				&& !(req.getParameter(WITHOUT_GLASSES_DISTANT_L).equals(""))) {
			withoutGlassesDistantL = req
					.getParameter(WITHOUT_GLASSES_DISTANT_L);
		}
		if (req.getParameter(WITHOUT_GLASSES_NEAR_R) != null
				&& !(req.getParameter(WITHOUT_GLASSES_NEAR_R).equals(""))) {
			withoutGlassesNearR = req.getParameter(WITHOUT_GLASSES_NEAR_R);
		}
		if (req.getParameter(WITHOUT_GLASSES_NEAR_L) != null
				&& !(req.getParameter(WITHOUT_GLASSES_NEAR_L).equals(""))) {
			withoutGlassesNearL = req.getParameter(WITHOUT_GLASSES_NEAR_L);
		}
		if (req.getParameter(WITHOUT_GLASSES_NEAR_CP) != null
				&& !(req.getParameter(WITHOUT_GLASSES_NEAR_CP).equals(""))) {
			withoutGlassesNearCP = req
					.getParameter(WITHOUT_GLASSES_NEAR_CP);
		}
		if (req.getParameter(CONVERGENCE_SC) != null
				&& !(req.getParameter(CONVERGENCE_SC).equals(""))) {
			convergenceCP = new BigDecimal(req.getParameter(CONVERGENCE_SC));
		}
		if (req.getParameter(CONVERGENCE_C) != null
				&& !(req.getParameter(CONVERGENCE_C).equals(""))) {
			convergenceC = new BigDecimal(req.getParameter(CONVERGENCE_C));

		}
		if (req.getParameter(ACCOMMODATION_R) != null
				&& !(req.getParameter(ACCOMMODATION_R).equals(""))) {
			accommodationR = req.getParameter(ACCOMMODATION_R);
		}
		if (req.getParameter(ACCOMMODATION_L) != null
				&& !(req.getParameter(ACCOMMODATION_L).equals(""))) {
			accommodationL = req.getParameter(ACCOMMODATION_L);
		}

		if (req.getParameter(EYE_REMARKS) != null
				&& !(req.getParameter(EYE_REMARKS).equals(""))) {
			eyeRemarks = req.getParameter(EYE_REMARKS);
		}
		if (req.getParameter(EYE_DATE) != null
				&& !(req.getParameter(EYE_DATE).equals(""))) {
			eyeDate = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(EYE_DATE));
		}
		if (req.getParameter(HEARING_R_F_W) != null
				&& !(req.getParameter(HEARING_R_F_W).equals(""))) {
			hearingRFW = new BigDecimal(req.getParameter(HEARING_R_F_W));
		}
		if (req.getParameter(HEARING_L_F_W) != null
				&& !(req.getParameter(HEARING_L_F_W).equals(""))) {
			hearingLFW = new BigDecimal(req.getParameter(HEARING_L_F_W));
		}
		if (req.getParameter(HEARING_BOTH_FW) != null
				&& !(req.getParameter(HEARING_BOTH_FW).equals(""))) {
			hearingBothFW = new BigDecimal(req
					.getParameter(HEARING_BOTH_FW));
		}

		if (req.getParameter(HEARING_R_C_V) != null
				&& !(req.getParameter(HEARING_R_C_V).equals(""))) {
			hearingRCV = new BigDecimal(req.getParameter(HEARING_R_C_V));
		}
		if (req.getParameter(HEARING_L_C_V) != null
				&& !(req.getParameter(HEARING_L_C_V).equals(""))) {
			hearingLCV = new BigDecimal(req.getParameter(HEARING_L_C_V));
		}
		if (req.getParameter(HEARING_BOTH_CV) != null
				&& !(req.getParameter(HEARING_BOTH_CV).equals(""))) {
			hearingBothCV = new BigDecimal(req
					.getParameter(HEARING_BOTH_CV));
		}
		if (req.getParameter(INNER_EAR_R) != null
				&& !(req.getParameter(INNER_EAR_R).equals(""))) {
			innerEarR = req.getParameter(INNER_EAR_R);
		}
		if (req.getParameter(INNER_EAR_L) != null
				&& !(req.getParameter(INNER_EAR_L).equals(""))) {
			innerEarL = req.getParameter(INNER_EAR_L);
		}
		String tmr = "";
		String tml = "";
		String mobility_r = "";
		String mobility_l = "";
		String noseThroatSinuses = "";

		if (req.getParameter(TYMPANIC_R) != null
				&& !(req.getParameter(TYMPANIC_R).equals(""))) {
			tmr = req.getParameter(TYMPANIC_R);
		}
		if (req.getParameter(TYMPANIC_L) != null
				&& !(req.getParameter(TYMPANIC_L).equals(""))) {
			tml = req.getParameter(TYMPANIC_L);
		}
		if (req.getParameter(MOBILITYR) != null
				&& !(req.getParameter(MOBILITYR).equals(""))) {
			mobility_r = req.getParameter(MOBILITYR);
		}
		if (req.getParameter(MOBILITYL) != null
				&& !(req.getParameter(MOBILITYL).equals(""))) {
			mobility_l = req.getParameter(MOBILITYL);
		}
		if (req.getParameter(NOSE_THROAT_SINUSES) != null
				&& !(req.getParameter(NOSE_THROAT_SINUSES).equals(""))) {
			noseThroatSinuses = req.getParameter(NOSE_THROAT_SINUSES);
		}
		masMedicalBoardProceedings.setTympanicR(tmr);
		masMedicalBoardProceedings.setTympanicL(tml);
		masMedicalBoardProceedings.setMobilityR(mobility_r);
		masMedicalBoardProceedings.setMobilityL(mobility_l);
		masMedicalBoardProceedings.setNoseThroatSinuses(noseThroatSinuses);
		if (req.getParameter(AUDIOMETRY_RECORD) != null
				&& !(req.getParameter(AUDIOMETRY_RECORD).equals(""))) {
			audiometryRecord = req.getParameter(AUDIOMETRY_RECORD);
		}
		if (req.getParameter(NOSE) != null
				&& !(req.getParameter(NOSE).equals(""))) {
			nose = req.getParameter(NOSE);
		}
		if (req.getParameter(THROAT_EAR) != null
				&& !(req.getParameter(THROAT_EAR).equals(""))) {
			throatEar = req.getParameter(THROAT_EAR);
		}
		if (req.getParameter(EAR_REMARKS) != null
				&& !(req.getParameter(EAR_REMARKS).equals(""))) {
			earReamrks = req.getParameter(EAR_REMARKS);
		}
		if (req.getParameter(EAR_DATE) != null
				&& !(req.getParameter(EAR_DATE).equals(""))) {
			earDate = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(EAR_DATE));
		}

		if (req.getParameter(EXTERNAL_EAR_R) != null
				&& !(req.getParameter(EXTERNAL_EAR_R).equals(""))) {
			externalEarR = req.getParameter(EXTERNAL_EAR_R);
		}
		if (req.getParameter(EXTERNAL_EAR_L) != null
				&& !(req.getParameter(EXTERNAL_EAR_L).equals(""))) {
			externalEarL = req.getParameter(EXTERNAL_EAR_L);
		}
		if (req.getParameter(MIDDLE_EAR_R) != null
				&& !(req.getParameter(MIDDLE_EAR_R).equals(""))) {
			middleEarR = req.getParameter(MIDDLE_EAR_R);
		}
		if (req.getParameter(MIDDLE_EAR_L) != null
				&& !(req.getParameter(MIDDLE_EAR_L).equals(""))) {
			middleEarL = req.getParameter(MIDDLE_EAR_L);
		}
		if (req.getParameter(ANY_EVIDENCE_OF_TRACHOMA) != null
				&& !(req.getParameter(ANY_EVIDENCE_OF_TRACHOMA).equals(""))) {
			evidienceOfTrachoma = req
					.getParameter(ANY_EVIDENCE_OF_TRACHOMA);
		}
		if (req.getParameter(BINOCULAR_VISION_GRADE) != null
				&& !(req.getParameter(BINOCULAR_VISION_GRADE).equals(""))) {
			binocular = req.getParameter(BINOCULAR_VISION_GRADE);
		}
		if (req.getParameter(MANIFEST_HYPERMETROPIA) != null
				&& !(req.getParameter(MANIFEST_HYPERMETROPIA).equals(""))) {
			manifestHypermetropia = req
					.getParameter(MANIFEST_HYPERMETROPIA);
		}
		if (req.getParameter(COVER_TEST) != null
				&& !(req.getParameter(COVER_TEST).equals(""))) {
			coverTest = req.getParameter(COVER_TEST);
		}
		if (req.getParameter(DIAPHRAGM_TEST) != null
				&& !(req.getParameter(DIAPHRAGM_TEST).equals(""))) {
			diaphragmTest = req.getParameter(DIAPHRAGM_TEST);
		}
		if (req.getParameter(FUND_MEDIA) != null
				&& !(req.getParameter(FUND_MEDIA).equals(""))) {
			fundMedia = req.getParameter(FUND_MEDIA);
		}
		if (req.getParameter(FIELDS) != null
				&& !(req.getParameter(FIELDS).equals(""))) {
			fields = req.getParameter(FIELDS);
		}
		if (req.getParameter(NIGHT_VISUAL_CAPACITY) != null
				&& !(req.getParameter(NIGHT_VISUAL_CAPACITY).equals(""))) {
			nightVisualCapacity = req.getParameter(NIGHT_VISUAL_CAPACITY);
		}
		if (req.getParameter(DENTAL_REMARKS) != null
				&& !(req.getParameter(DENTAL_REMARKS).equals(""))) {
			dentalRemarks = req.getParameter(DENTAL_REMARKS);
		}

		if (req.getParameter(DENTAL_DATE) != null
				&& !(req.getParameter(DENTAL_DATE).equals(""))) {
			dentalDate = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(DENTAL_DATE));
		}
		if (req.getParameter(MENSTRUAL_HISTORY) != null
				&& !(req.getParameter(MENSTRUAL_HISTORY).equals(""))) {
			menstrualHistory = req.getParameter(MENSTRUAL_HISTORY);
		}
		if (req.getParameter(NO_OF_PREGNANCY) != null
				&& !(req.getParameter(NO_OF_PREGNANCY).equals(""))) {
			noOfPregnancy = Integer.parseInt(req
					.getParameter(NO_OF_PREGNANCY));
		}
		if (req.getParameter(NO_OF_ABORTION) != null
				&& !(req.getParameter(NO_OF_ABORTION).equals(""))) {
			noOfAbortion = Integer.parseInt(req
					.getParameter(NO_OF_ABORTION));
		}
		if (req.getParameter(NO_OF_CHILDREN) != null
				&& !(req.getParameter(NO_OF_CHILDREN).equals(""))) {
			noOfChildren = Integer.parseInt(req
					.getParameter(NO_OF_CHILDREN));
		}
		if (req.getParameter(DATE_OF_LASTCONFINEMENT) != null
				&& !(req.getParameter(DATE_OF_LASTCONFINEMENT).equals(""))) {
			lastCondinement = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(DATE_OF_LASTCONFINEMENT));
		}
		if (req.getParameter(VAGINAL_DISCHARGE) != null
				&& !(req.getParameter(VAGINAL_DISCHARGE).equals(""))) {
			vaginalDischarge = req.getParameter(VAGINAL_DISCHARGE);
		}
		if (req.getParameter(PROLAPSE) != null
				&& !(req.getParameter(PROLAPSE).equals(""))) {
			prolapse = req.getParameter(PROLAPSE);
		}
		if (req.getParameter(USG_ABORTION) != null
				&& !(req.getParameter(USG_ABORTION).equals(""))) {
			usgAbortion = req.getParameter(USG_ABORTION);
		}
		if (req.getParameter(GYANAECOLOGY_RAMARKS) != null
				&& !(req.getParameter(GYANAECOLOGY_RAMARKS).equals(""))) {
			gyanaecologyRemarks = req.getParameter(GYANAECOLOGY_RAMARKS);
		}
		if (req.getParameter(GYANAECOLOGY_DATE) != null
				&& !(req.getParameter(GYANAECOLOGY_DATE).equals(""))) {
			gyanaecologyDate = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(GYANAECOLOGY_DATE));
		}
		if (req.getParameter(GYANAECOLOGY_RAMARKS) != null
				&& !(req.getParameter(GYANAECOLOGY_RAMARKS).equals(""))) {
			gyanaecologyRemarks = req.getParameter(GYANAECOLOGY_RAMARKS);
		}
		if (req.getParameter(MEDICAL_BOARD_EXAMINATION) != null
				&& !(req.getParameter(MEDICAL_BOARD_EXAMINATION).equals(""))) {
			medicalBoardExamination = req
					.getParameter(MEDICAL_BOARD_EXAMINATION);
		}
		if (req.getParameter(MEDICAL_BOARD_EXAMINATION_PLACE) != null
				&& !(req.getParameter(MEDICAL_BOARD_EXAMINATION_PLACE)
						.equals(""))) {

			medicalBoardExaminationPlace = Integer.parseInt(req
					.getParameter(MEDICAL_BOARD_EXAMINATION_PLACE));

		}
		if (req.getParameter(MEDICAL_BOARD_EXAMINATION_DATE) != null
				&& !(req.getParameter(MEDICAL_BOARD_EXAMINATION_DATE)
						.equals(""))) {
			medicalBoardExaminationDate = HMSUtil
					.dateFormatterDDMMYYYY((req
							.getParameter(MEDICAL_BOARD_EXAMINATION_DATE)));
		}
		if (req.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION) != null
				&& !(req.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION)
						.equals(""))) {
			subsequentMedicalBoardExam = req
					.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION);
		}
		if (req.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION_PLACE) != null
				&& !(req
						.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION_PLACE)
						.equals(""))) {
			subsequentMedicalBoardExamPlace = Integer
					.parseInt(req
							.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION_PLACE));
		}
		if (req.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION_DATE) != null
				&& !(req
						.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION_DATE)
						.equals(""))) {
			subsequentMedicalBoardExamDate = HMSUtil
					.dateFormatterDDMMYYYY((req
							.getParameter(SUBSEQUENT_MEDICAL_BOARD_EXAMINATION_DATE)));
		}

		if (req.getParameter(APPROVING_AUTHORITY) != null
				&& !(req.getParameter(APPROVING_AUTHORITY).equals(""))) {
			ApprovingAuthority = req.getParameter(APPROVING_AUTHORITY);
		}
		if (req.getParameter(APPROVING_AUTHORITY_PLACE) != null
				&& !(req.getParameter(APPROVING_AUTHORITY_PLACE).equals(""))) {
			ApprovingAuthorityPlace = Integer.parseInt(req
					.getParameter(APPROVING_AUTHORITY_PLACE));
		}
		if (req.getParameter(APPROVING_AUTHORITY_DATE) != null
				&& !(req.getParameter(APPROVING_AUTHORITY_DATE).equals(""))) {
			ApprovingAuthorityDate = HMSUtil.dateFormatterDDMMYYYY((req
					.getParameter(APPROVING_AUTHORITY_DATE)));
		}
		if (req.getParameter(LMP) != null
				&& !(req.getParameter(LMP).equals(""))) {
			lmp = HMSUtil.dateFormatterDDMMYYYY((req.getParameter(LMP)));
		}

		if (req.getParameter(SURGERY_DATE) != null
				&& !(req.getParameter(SURGERY_DATE).equals(""))) {
			surgeyDate = HMSUtil.dateFormatterDDMMYYYY((req
					.getParameter(SURGERY_DATE)));
		}

		if (req.getParameter(MEDICIN_EXAM_DATE) != null
				&& !(req.getParameter(MEDICIN_EXAM_DATE).equals(""))) {
			medicinExamDate = HMSUtil.dateFormatterDDMMYYYY((req
					.getParameter(MEDICIN_EXAM_DATE)));

		}
		if (req.getParameter(TOTAL_NO_OF_TEETH) != null
				&& !(req.getParameter(TOTAL_NO_OF_TEETH).equals(""))) {
			totalTeeth = req.getParameter(TOTAL_NO_OF_TEETH);

		}
		if (req.getParameter(DEFECTIVE_TEETH) != null
				&& !(req.getParameter(DEFECTIVE_TEETH).equals(""))) {
			totalDefectiveTeeth = req.getParameter(DEFECTIVE_TEETH);

		}
		if (req.getParameter(MISSING_TEETH) != null
				&& !(req.getParameter(MISSING_TEETH).equals(""))) {
			missingTeeth = req.getParameter(MISSING_TEETH);

		}
		if (req.getParameter(MISSING_UNSERVICABLE_TEETH) != null
				&& !(req.getParameter(MISSING_UNSERVICABLE_TEETH)
						.equals(""))) {
			unserviceableTeeth = req
					.getParameter(MISSING_UNSERVICABLE_TEETH);

		}
		if (req.getParameter(DENTSL_POINT) != null
				&& !(req.getParameter(DENTSL_POINT).equals(""))) {
			DenstalPoint = req.getParameter(DENTSL_POINT);

		}

		if (req.getParameter(LAST_CHANGED_BY) != null) {
			lastChangedBy = req.getParameter(LAST_CHANGED_BY);
		}
		if (req.getParameter(LAST_CHANGED_DATE) != null) {
			lastChangedDate = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(LAST_CHANGED_DATE));
		}
		if (req.getParameter(LAST_CHANGED_TIME) != null) {
			lastChangedTime = req.getParameter(LAST_CHANGED_TIME);
		}
		// //////////////////////////////////

		if (req.getParameter(DUR_8) != null
				&& !req.getParameter(DUR_8).equals("")) {
			dur8 = (req.getParameter(DUR_8));

		} else {
			dur8 = "N";

		}

		if (req.getParameter(DUR_7) != null
				&& !req.getParameter(DUR_7).equals("")) {
			dur7 = (req.getParameter(DUR_7));

		} else {
			dur7 = "N";

		}
		if (req.getParameter(DUR_6) != null
				&& !req.getParameter(DUR_6).equals("")) {
			dur6 = (req.getParameter(DUR_6));

		} else {
			dur6 = "N";

		}
		if (req.getParameter(DUR_5) != null
				&& !req.getParameter(DUR_5).equals("")) {
			dur5 = (req.getParameter(DUR_5));

		} else {
			dur5 = "N";

		}

		if (req.getParameter(DUR_4) != null
				&& !req.getParameter(DUR_4).equals("")) {
			dur4 = (req.getParameter(DUR_4));
		} else {
			dur4 = "N";

		}
		if (req.getParameter(DUR_3) != null
				&& !req.getParameter(DUR_3).equals("")) {
			dur3 = (req.getParameter(DUR_3));

		} else {
			dur3 = "N";

		}
		if (req.getParameter(DUR_2) != null
				&& !req.getParameter(DUR_2).equals("")) {
			dur2 = (req.getParameter(DUR_2));

		} else {
			dur2 = "N";

		}
		if (req.getParameter(DUR_1) != null
				&& !req.getParameter(DUR_1).equals("")) {
			dur1 = (req.getParameter(DUR_1));

		} else {
			dur1 = "N";

		}

		if (req.getParameter(DUL_8) != null
				&& !req.getParameter(DUL_8).equals("")) {
			dul8 = (req.getParameter(DUL_8));
		} else {
			dul8 = "N";

		}
		if (req.getParameter(DUL_7) != null
				&& !req.getParameter(DUL_7).equals("")) {
			dul7 = (req.getParameter(DUL_7));

		} else {
			dul7 = "N";

		}
		if (req.getParameter(DUL_6) != null
				&& !req.getParameter(DUL_6).equals("")) {
			dul6 = (req.getParameter(DUL_6));
		} else {
			dul6 = "N";

		}
		if (req.getParameter(DUL_5) != null
				&& !req.getParameter(DUL_5).equals("")) {
			dul5 = (req.getParameter(DUL_5));
		} else {
			dul5 = "N";

		}
		if (req.getParameter(DUL_4) != null
				&& !req.getParameter(DUL_4).equals("")) {
			dul4 = (req.getParameter(DUL_4));
		} else {
			dul4 = "N";

		}
		if (req.getParameter(DUL_3) != null
				&& !req.getParameter(DUL_3).equals("")) {
			dul3 = (req.getParameter(DUL_3));
		} else {
			dul3 = "N";

		}
		if (req.getParameter(DUL_2) != null
				&& !req.getParameter(DUL_2).equals("")) {
			dul2 = (req.getParameter(DUL_2));
		} else {
			dul2 = "N";

		}
		if (req.getParameter(DUL_1) != null
				&& !req.getParameter(DUL_1).equals("")) {
			dul1 = (req.getParameter(DUL_1));
		} else {
			dul1 = "N";

		}

		if (req.getParameter(DLR_8) != null
				&& !req.getParameter(DLR_8).equals("")) {
			dlr8 = (req.getParameter(DLR_8));
		} else {
			dlr8 = "N";

		}
		if (req.getParameter(DLR_7) != null
				&& !req.getParameter(DLR_7).equals("")) {
			dlr7 = (req.getParameter(DLR_7));
		} else {
			dlr7 = "N";

		}
		if (req.getParameter(DLR_6) != null
				&& !req.getParameter(DLR_6).equals("")) {
			dlr6 = (req.getParameter(DLR_6));
		} else {
			dlr6 = "N";

		}
		if (req.getParameter(DLR_5) != null
				&& !req.getParameter(DLR_5).equals("")) {
			dlr5 = (req.getParameter(DLR_5));
		} else {
			dlr5 = "N";

		}
		if (req.getParameter(DLR_4) != null
				&& !req.getParameter(DLR_4).equals("")) {
			dlr4 = (req.getParameter(DLR_4));
		} else {
			dlr4 = "N";

		}
		if (req.getParameter(DLR_3) != null
				&& !req.getParameter(DLR_3).equals("")) {
			dlr3 = (req.getParameter(DLR_3));
		} else {
			dlr3 = "N";

		}
		if (req.getParameter(DLR_2) != null
				&& !req.getParameter(DLR_2).equals("")) {
			dlr2 = (req.getParameter(DLR_2));
		} else {
			dlr2 = "N";

		}

		if (req.getParameter(DLR_1) != null
				&& !req.getParameter(DLR_1).equals("")) {
			dlr1 = (req.getParameter(DLR_1));
		} else {
			dlr1 = "N";

		}

		if (req.getParameter(DLL_8) != null
				&& !req.getParameter(DLL_8).equals("")) {
			dll8 = (req.getParameter(DLL_8));
		} else {
			dll8 = "N";

		}
		if (req.getParameter(DLL_7) != null
				&& !req.getParameter(DLL_7).equals("")) {
			dll7 = (req.getParameter(DLL_7));
		} else {
			dll7 = "N";

		}

		if (req.getParameter(DLL_6) != null
				&& !req.getParameter(DLL_6).equals("")) {
			dll6 = (req.getParameter(DLL_6));
		} else {
			dll6 = "N";

		}
		if (req.getParameter(DLL_5) != null
				&& !req.getParameter(DLL_5).equals("")) {
			dll5 = (req.getParameter(DLL_5));
		} else {
			dll5 = "N";

		}
		if (req.getParameter(DLL_4) != null
				&& !req.getParameter(DLL_4).equals("")) {
			dll4 = (req.getParameter(DLL_4));
		} else {
			dll4 = "N";

		}
		if (req.getParameter(DLL_3) != null
				&& !req.getParameter(DLL_3).equals("")) {
			dll3 = (req.getParameter(DLL_3));
		} else {
			dll3 = "N";

		}
		if (req.getParameter(DLL_2) != null
				&& !req.getParameter(DLL_2).equals("")) {
			dll2 = (req.getParameter(DLL_2));
		} else {
			dll2 = "N";

		}
		if (req.getParameter(DLL_1) != null
				&& !req.getParameter(DLL_1).equals("")) {
			dll1 = (req.getParameter(DLL_1));
		} else {
			dll1 = "N";

		}
		// ///////////////////////////

		if (req.getParameter(UUR_8) != null
				&& !req.getParameter(UUR_8).equals("")) {
			uur8 = (req.getParameter(UUR_8));
		} else {
			uur8 = "N";

		}

		if (req.getParameter(UUR_7) != null
				&& !req.getParameter(UUR_7).equals("")) {
			uur7 = (req.getParameter(UUR_7));
		} else {
			uur7 = "N";

		}
		if (req.getParameter(UUR_6) != null
				&& !req.getParameter(UUR_6).equals("")) {
			uur6 = (req.getParameter(UUR_6));
		} else {
			uur6 = "N";

		}
		if (req.getParameter(UUR_5) != null
				&& !req.getParameter(UUR_5).equals("")) {
			uur5 = (req.getParameter(UUR_5));
		} else {
			uur5 = "N";

		}
		if (req.getParameter(UUR_4) != null
				&& !req.getParameter(UUR_4).equals("")) {
			uur4 = (req.getParameter(UUR_4));
		} else {
			uur4 = "N";

		}
		if (req.getParameter(UUR_3) != null
				&& !req.getParameter(UUR_3).equals("")) {
			uur3 = (req.getParameter(UUR_3));
		} else {
			uur3 = "N";

		}
		if (req.getParameter(UUR_2) != null
				&& !req.getParameter(UUR_2).equals("")) {
			uur2 = (req.getParameter(UUR_2));
		} else {
			uur2 = "N";

		}
		if (req.getParameter(UUR_1) != null
				&& !req.getParameter(UUR_1).equals("")) {
			uur1 = (req.getParameter(UUR_1));
		} else {
			uur1 = "N";

		}

		if (req.getParameter(UUL_8) != null
				&& !req.getParameter(UUL_8).equals("")) {
			uul8 = (req.getParameter(UUL_8));
		} else {
			uul8 = "N";

		}
		if (req.getParameter(UUL_7) != null
				&& !req.getParameter(UUL_7).equals("")) {
			uul7 = (req.getParameter(UUL_7));

		} else {
			uul7 = "N";

		}
		if (req.getParameter(UUL_6) != null
				&& !req.getParameter(UUL_6).equals("")) {
			uul6 = (req.getParameter(UUL_6));
		} else {
			uul6 = "N";

		}
		if (req.getParameter(UUL_5) != null
				&& !req.getParameter(UUL_5).equals("")) {
			uul5 = (req.getParameter(UUL_5));
		} else {
			uul5 = "N";

		}
		if (req.getParameter(UUL_4) != null
				&& !req.getParameter(UUL_4).equals("")) {
			uul4 = (req.getParameter(UUL_4));
		} else {
			uul4 = "N";

		}
		if (req.getParameter(UUL_3) != null
				&& !req.getParameter(UUL_3).equals("")) {
			uul3 = (req.getParameter(UUL_3));
		} else {
			uul3 = "N";

		}
		if (req.getParameter(UUL_2) != null
				&& !req.getParameter(UUL_2).equals("")) {
			uul2 = (req.getParameter(UUL_2));
		} else {
			uul2 = "N";

		}
		if (req.getParameter(UUL_1) != null
				&& !req.getParameter(UUL_1).equals("")) {
			uul1 = (req.getParameter(UUL_1));
		} else {
			uul1 = "N";

		}
		if (req.getParameter(ULR_8) != null
				&& !req.getParameter(ULR_8).equals("")) {
			ulr8 = (req.getParameter(ULR_8));
		} else {
			ulr8 = "N";

		}

		if (req.getParameter(ULR_7) != null
				&& !req.getParameter(ULR_7).equals("")) {
			ulr7 = (req.getParameter(ULR_7));
		} else {
			ulr7 = "N";

		}
		if (req.getParameter(ULR_6) != null
				&& !req.getParameter(ULR_6).equals("")) {
			ulr6 = (req.getParameter(ULR_6));
		} else {
			ulr6 = "N";

		}
		if (req.getParameter(ULR_5) != null
				&& !req.getParameter(ULR_5).equals("")) {
			ulr5 = (req.getParameter(ULR_5));
		} else {
			ulr5 = "N";

		}
		if (req.getParameter(ULR_4) != null
				&& !req.getParameter(ULR_4).equals("")) {
			ulr4 = (req.getParameter(ULR_4));
		} else {
			ulr4 = "N";

		}
		if (req.getParameter(ULR_3) != null
				&& !req.getParameter(ULR_3).equals("")) {
			ulr3 = (req.getParameter(ULR_3));
		} else {
			ulr3 = "N";

		}
		if (req.getParameter(ULR_2) != null
				&& !req.getParameter(ULR_2).equals("")) {
			ulr2 = (req.getParameter(ULR_2));
		} else {
			ulr2 = "N";

		}
		if (req.getParameter(ULR_1) != null
				&& !req.getParameter(ULR_1).equals("")) {
			ulr1 = (req.getParameter(ULR_1));
		} else {
			ulr1 = "N";

		}

		if (req.getParameter(ULL_8) != null
				&& !req.getParameter(ULL_8).equals("")) {
			ull8 = (req.getParameter(ULL_8));
		} else {
			ull8 = "N";

		}
		if (req.getParameter(ULL_7) != null
				&& !req.getParameter(ULL_8).equals("")) {
			ull7 = (req.getParameter(ULL_7));
		} else {
			ull7 = "N";

		}
		if (req.getParameter(ULL_6) != null
				&& !req.getParameter(ULL_6).equals("")) {
			ull6 = (req.getParameter(ULL_6));
		} else {
			ull6 = "N";

		}
		if (req.getParameter(ULL_5) != null
				&& !req.getParameter(ULL_5).equals("")) {
			ull5 = (req.getParameter(ULL_5));
		} else {
			ull5 = "N";

		}
		if (req.getParameter(ULL_4) != null
				&& !req.getParameter(ULL_4).equals("")) {
			ull4 = (req.getParameter(ULL_4));
		} else {
			ull4 = "N";

		}
		if (req.getParameter(ULL_3) != null
				&& !req.getParameter(ULL_3).equals("")) {
			ull3 = (req.getParameter(ULL_3));
		} else {
			ull3 = "N";

		}
		if (req.getParameter(ULL_2) != null
				&& !req.getParameter(ULL_2).equals("")) {
			ull2 = (req.getParameter(ULL_2));
		} else {
			ull2 = "N";

		}
		if (req.getParameter(ULL_1) != null
				&& !req.getParameter(ULL_1).equals("")) {
			ull1 = (req.getParameter(ULL_1));
		} else {
			ull1 = "N";

		}

		// ////////////////////////

		if (req.getParameter(MUR_8) != null
				&& !req.getParameter(MUR_8).equals("")) {
			mur8 = (req.getParameter(MUR_8));

		} else {
			mur8 = "N";

		}
		if (req.getParameter(MUR_7) != null
				&& !req.getParameter(MUR_7).equals("")) {
			mur7 = (req.getParameter(MUR_7));
		} else {
			mur7 = "N";

		}
		if (req.getParameter(MUR_6) != null
				&& !req.getParameter(MUR_6).equals("")) {
			mur6 = (req.getParameter(MUR_6));
		} else {
			mur6 = "N";

		}
		if (req.getParameter(MUR_5) != null
				&& !req.getParameter(MUR_5).equals("")) {
			mur5 = (req.getParameter(MUR_5));
		} else {
			mur5 = "N";

		}
		if (req.getParameter(MUR_4) != null
				&& !req.getParameter(MUR_4).equals("")) {
			mur4 = (req.getParameter(MUR_4));
		} else {
			mur4 = "N";

		}
		if (req.getParameter(MUR_3) != null
				&& !req.getParameter(MUR_3).equals("")) {
			mur3 = (req.getParameter(MUR_3));
		} else {
			mur3 = "N";

		}
		if (req.getParameter(MUR_2) != null
				&& !req.getParameter(MUR_2).equals("")) {
			mur2 = (req.getParameter(MUR_2));
		} else {
			mur2 = "N";

		}
		if (req.getParameter(MUR_1) != null
				&& !req.getParameter(MUR_1).equals("")) {
			mur1 = (req.getParameter(MUR_1));
		} else {
			mur1 = "N";

		}

		if (req.getParameter(MUL_8) != null
				&& !req.getParameter(MUL_8).equals("")) {
			mul8 = (req.getParameter(MUL_8));
		} else {
			mul8 = "N";

		}
		if (req.getParameter(MUL_7) != null
				&& !req.getParameter(MUL_7).equals("")) {
			mul7 = (req.getParameter(MUL_7));

		} else {
			mul7 = "N";

		}
		if (req.getParameter(MUL_6) != null
				&& !req.getParameter(MUL_6).equals("")) {
			mul6 = (req.getParameter(MUL_6));
		} else {
			mul6 = "N";

		}
		if (req.getParameter(MUL_5) != null
				&& !req.getParameter(MUL_5).equals("")) {
			mul5 = (req.getParameter(MUL_5));
		} else {
			mul5 = "N";

		}
		if (req.getParameter(MUL_4) != null
				&& !req.getParameter(MUL_4).equals("")) {
			mul4 = (req.getParameter(MUL_4));
		} else {
			mul4 = "N";

		}
		if (req.getParameter(MUL_3) != null
				&& !req.getParameter(MUL_3).equals("")) {
			mul3 = (req.getParameter(MUL_3));
		} else {
			mul3 = "N";

		}
		if (req.getParameter(MUL_2) != null
				&& !req.getParameter(MUL_2).equals("")) {
			mul2 = (req.getParameter(MUL_2));
		} else {
			mul2 = "N";

		}
		if (req.getParameter(MUL_1) != null
				&& !req.getParameter(MUL_1).equals("")) {
			mul1 = (req.getParameter(MUL_1));
		} else {
			mul1 = "N";

		}
		if (req.getParameter(MLR_8) != null
				&& !req.getParameter(MLR_8).equals("")) {
			mlr8 = (req.getParameter(MLR_8));
		} else {
			mlr8 = "N";

		}

		if (req.getParameter(MLR_7) != null
				&& !req.getParameter(MLR_7).equals("")) {
			mlr7 = (req.getParameter(MLR_7));
		} else {
			mlr7 = "N";

		}
		if (req.getParameter(MLR_6) != null
				&& !req.getParameter(MLR_6).equals("")) {
			mlr6 = (req.getParameter(MLR_6));
		} else {
			mlr6 = "N";

		}
		if (req.getParameter(MLR_5) != null
				&& !req.getParameter(MLR_5).equals("")) {
			mlr5 = (req.getParameter(MLR_5));
		} else {
			mlr5 = "N";

		}

		if (req.getParameter(MLR_4) != null
				&& !req.getParameter(MLR_4).equals("")) {
			mlr4 = (req.getParameter(MLR_4));
		} else {
			mlr4 = "N";

		}
		if (req.getParameter(MLR_3) != null
				&& !req.getParameter(MLR_3).equals("")) {
			mlr3 = (req.getParameter(MLR_3));
		} else {
			mlr3 = "N";

		}

		if (req.getParameter(MLR_2) != null
				&& !req.getParameter(MLR_2).equals("")) {
			mlr2 = (req.getParameter(MLR_2));
		} else {
			mlr2 = "N";

		}
		if (req.getParameter(MLR_1) != null
				&& !req.getParameter(MLR_1).equals("")) {
			mlr1 = (req.getParameter(MLR_1));
		} else {
			mlr1 = "N";

		}

		if (req.getParameter(MLL_8) != null
				&& !req.getParameter(MLL_8).equals("")) {
			mll8 = (req.getParameter(MLL_8));
		} else {
			mll8 = "N";

		}
		if (req.getParameter(MLL_7) != null
				&& !req.getParameter(MLL_7).equals("")) {
			mll7 = (req.getParameter(MLL_7));
		} else {
			mll7 = "N";

		}
		if (req.getParameter(MLL_5) != null
				&& !req.getParameter(MLL_6).equals("")) {
			mll6 = (req.getParameter(MLL_6));
		} else {
			mll6 = "N";

		}
		if (req.getParameter(MLL_5) != null
				&& !req.getParameter(MLL_5).equals("")) {
			mll5 = (req.getParameter(MLL_5));
		} else {
			mll5 = "N";

		}
		if (req.getParameter(MLL_4) != null
				&& !req.getParameter(MLL_4).equals("")) {
			mll4 = (req.getParameter(MLL_4));
		} else {
			mll4 = "N";

		}
		if (req.getParameter(MLL_3) != null
				&& !req.getParameter(MLL_3).equals("")) {
			mll3 = (req.getParameter(MLL_3));
		} else {
			mll3 = "N";

		}
		if (req.getParameter(MLL_2) != null
				&& !req.getParameter(MLL_2).equals("")) {
			mll2 = (req.getParameter(MLL_2));
		} else {
			mll2 = "N";

		}
		if (req.getParameter(MLL_1) != null
				&& !req.getParameter(MLL_1).equals("")) {
			mll1 = (req.getParameter(MLL_1));
		} else {
			mll1 = "N";

		}

		sur8 = dur8 + "" + mur8 + "" + uur8;

		sur7 = dur7 + "" + mur7 + "" + uur7;

		sur6 = dur6 + "" + mur6 + "" + uur6;
		sur5 = dur5 + "" + mur5 + "" + uur5;
		sur4 = dur4 + "" + mur4 + "" + uur4;
		sur3 = dur3 + "" + mur3 + "" + uur3;
		sur2 = dur2 + "" + mur2 + "" + uur2;
		sur1 = dur1 + "" + mur2 + "" + uur1;

		sul8 = dul8 + "" + mul8 + "" + uul8;
		sul7 = dul7 + "" + mul7 + "" + uul7;

		sul6 = dul6 + "" + mul6 + "" + uul6;
		sul5 = dul5 + "" + mul5 + "" + uul5;
		sul4 = dul4 + "" + mul4 + "" + uul4;
		sul3 = dul3 + "" + mul3 + "" + uul3;
		sul2 = dul2 + "" + mul2 + "" + uul2;
		sul1 = dul1 + "" + mul1 + "" + uul1;

		slr8 = dlr8 + "" + mlr8 + "" + ulr8;
		slr7 = dlr7 + "" + mlr7 + "" + ulr7;
		slr6 = dlr6 + "" + mlr6 + "" + ulr6;
		slr5 = dlr5 + "" + mlr5 + "" + ulr5;
		slr4 = dlr4 + "" + mlr4 + "" + ulr4;
		slr3 = dlr3 + "" + mlr3 + "" + ulr3;
		slr2 = dlr2 + "" + mlr2 + "" + ulr2;
		slr1 = dlr1 + "" + mlr2 + "" + ulr1;

		sll8 = dll8 + "" + mll8 + "" + ull8;
		sll7 = dll7 + "" + mll7 + "" + ull7;
		sll6 = dll6 + "" + mll6 + "" + ull6;
		sll5 = dll5 + "" + mll5 + "" + ull5;
		sll4 = dll4 + "" + mll4 + "" + ull4;
		sll3 = dll3 + "" + mll3 + "" + ull3;
		sll2 = dll2 + "" + mll2 + "" + ull2;
		sll1 = dll1 + "" + mll1 + "" + ull1;
		MbTypeOfEntryMaster mbTypeOfEntryMaster = new MbTypeOfEntryMaster();
		mbTypeOfEntryMaster.setId(typeOfEntry);
		generalMap.put("serviceNo", serviceNo);
		generalMap.put("pojoPropertyCode", "serviceNo");
		generalMap.put("pojoName", "MasMedicalExaminationReportOnEntry");

		// Map listMap =
		// commonMasterHandlerService.checkForExistingMasters(generalMap);
		Boolean successfullyAdded = false;
		// List codeList = (List) listMap.get("duplicateGeneralCodeList");
		// List nameList = (List) listMap.get("duplicateGeneralNameList");
		// List typeOfEntryList = (List)
		// listMap.get("duplicateGeneralAddressList");
		/*
		 * if (codeList != null && codeList.size() > 0) { message =
		 * "Yearly Serial No Already Exist!"; jsp = MEDICAL_BOARD_ERROR_MSG;
		 * } else {
		 */
		if (req.getParameter("dentalReferToMH") != null
				&& !(req.getParameter("dentalReferToMH").equals(""))) {
			masMedicalBoardProceedings.setReferToMH(req
					.getParameter("dentalReferToMH"));
		}

		masMedicalBoardProceedings.setInnerEarL(innerEarL);
		masMedicalBoardProceedings.setHearingBothCv(hearingBothCV);
		masMedicalBoardProceedings.setDateSpecialExam(eyeDate);
		masMedicalBoardProceedings
				.setTotalDefectiveTeeth(totalDefectiveTeeth);
		masMedicalBoardProceedings.setTotalTeeth(totalTeeth);
		masMedicalBoardProceedings.setMissingTeeth(missingTeeth);
		masMedicalBoardProceedings.setUnservisableTeeth(unserviceableTeeth);
		masMedicalBoardProceedings.setDenstlPoint(DenstalPoint);
		masMedicalBoardProceedings.setYearlySerialNo(serviceNo);
		// masMedicalBoardProceedings.setMonthlySerialNo(rank);
		masMedicalBoardProceedings.setEntryDate(entryDate);
		// ----------------------------------------------------------------------------------------
		if (data != null) {

			masMedicalBoardProceedings.setDlc(dlc);
			masMedicalBoardProceedings.setHb(hb);
			masMedicalBoardProceedings.setTlc(tlc);
			masMedicalBoardProceedings.setEsr(esr);
			masMedicalBoardProceedings.setSpGravity(spGravity);
			masMedicalBoardProceedings.setAlbumin(albumen);
			masMedicalBoardProceedings.setSugar(sugarR);
			masMedicalBoardProceedings.setSugarF(sugarF);
			masMedicalBoardProceedings.setSugarPP(sugarPP);
			masMedicalBoardProceedings.setUrea(urea);
			masMedicalBoardProceedings.setUricAcid(uricAcid);
			masMedicalBoardProceedings.setSrCreatine(srCreatine);
			masMedicalBoardProceedings.setCholesterol(cholesterol);
			masMedicalBoardProceedings.setTriglycerides(triglycerids);
			masMedicalBoardProceedings.setHld(hdl);
			masMedicalBoardProceedings.setVldl(vldl);

		}
		// ----------------------------------------------------------------------------------------
		masMedicalBoardProceedings.setTypeOfEntry(mbTypeOfEntryMaster);
		// masMedicalBoardProceedings.setBatchNo(betchNo);
		masMedicalBoardProceedings.setChestNo(chestNo);
		masMedicalBoardProceedings.setRollNo(rollNo);
		/*
		 * MasUnit masUnit = new MasUnit(); masUnit.setId(medicalExamHeld);
		 * masMedicalBoardProceedings.setMedicalExamHeldAt(masUnit);
		 */
		masMedicalBoardProceedings.setMedicalStatus(medicalStatus);
		masMedicalBoardProceedings.setNameInFull(fullName);
		masMedicalBoardProceedings.setDateOfBirth(dateOfBirth);
		if (maritialStatus != 0) {
			MasMaritalStatus masMaritalStatus = new MasMaritalStatus();
			masMaritalStatus.setId(maritialStatus);
			masMedicalBoardProceedings.setMaritalStatus(masMaritalStatus);
		}
		masMedicalBoardProceedings.setPNo(pNo);

		masMedicalBoardProceedings.setHoursOfFlown(hoursOfFlown);
		masMedicalBoardProceedings.setParmanentAddress(permanentAddress);
		masMedicalBoardProceedings.setIdentificationMarks1(identification1);
		masMedicalBoardProceedings.setIdentificationMarks2(identification2);
		masMedicalBoardProceedings.setArmsCorps(armsCrops);
		masMedicalBoardProceedings.setDateOfCompletion(dateOfCompletion);
		masMedicalBoardProceedings
				.setDocumentForwardDate(documentForwardDate);
		// masMedicalBoardProceedings.setDateOfReporting(dateOfReporting);
		masMedicalBoardProceedings.setDateOfDischarge(dateOfDischarge);
		masMedicalBoardProceedings.setDocumentForwardTo(documentForwardTo);
		masMedicalBoardProceedings.setFromWhereHeReport(fromWhereHeReport);
		masMedicalBoardProceedings.setHypertension(hypertension);
		masMedicalBoardProceedings.setHeartDiabetes(heartDisease);
		masMedicalBoardProceedings.setDiabetes(diabetes);
		masMedicalBoardProceedings.setBleedingDisorder(bleedingDisorder);
		masMedicalBoardProceedings.setMentalDisease(mentalDisease);
		masMedicalBoardProceedings.setNightBlindness(nightBlindness);
		masMedicalBoardProceedings.setChronicBronchitis(asthama);
		masMedicalBoardProceedings.setDischargeFromEars(dischargeFrom);
		masMedicalBoardProceedings.setPleurisy(plesury);
		masMedicalBoardProceedings.setAnyOtherEarDisease(earDieses);
		masMedicalBoardProceedings
				.setRheumatismFrequentSorethroats(rheumatism);
		masMedicalBoardProceedings
				.setFrequentCoughColdSinusitis(frequentCough);
		masMedicalBoardProceedings
				.setChronicIndigestion(chronicIndigestion);
		/*
		 * masMedicalBoardProceedings
		 * .setNervousBreakdownMentalIllness(nervousBrakdown);
		 */
		masMedicalBoardProceedings.setKidneyBladderTrouble(kidenyBladder);
		masMedicalBoardProceedings
				.setFitsFaintingAttack(fitsFaintinngAttacks);
		masMedicalBoardProceedings.setStd(std);
		masMedicalBoardProceedings.setSevereHeadInjury(serveHeadInjury);
		masMedicalBoardProceedings.setJaundice(joundice);
		masMedicalBoardProceedings.setAirSeaCarTrainSickness(sickness);
		masMedicalBoardProceedings.setBreastDiseaseDischarge(breastDisease);
		masMedicalBoardProceedings.setTrachoma(trachoma);
		masMedicalBoardProceedings.setAmenorrhoeaDysmenonhoea(amenorrhoea);
		masMedicalBoardProceedings.setNightBindness(nightbindness);
		masMedicalBoardProceedings.setMenonhagia(menirrhagia);
		masMedicalBoardProceedings
				.setLaserTreatementSurgeryForEye(laserTeartement);
		masMedicalBoardProceedings.setPregnancy(pregnancy);
		masMedicalBoardProceedings.setAnyOtherEyeDisease(eyeDisease);
		masMedicalBoardProceedings.setAbortion(abortion);
		masMedicalBoardProceedings
				.setBeenrejectedAsMedicallyUnfitForAnyBranch(rejectedAsUnfit);
		masMedicalBoardProceedings
				.setDischargeAsMedicallyUnfitForAnyBranch(dischargeMedicallyUnfit);
		masMedicalBoardProceedings
				.setAdmittedInHospitalForAnyIllnessOperationOrInjury(adimmitedInHospitalFirIllness);

		masMedicalBoardProceedings
				.setStateTheNatureOfDiseaseDuration(stateNature);
		masMedicalBoardProceedings
				.setAnyOtherInformationAboutYourHealth(otherInform);
		masMedicalBoardProceedings.setHeight(height);
		masMedicalBoardProceedings.setWeight(weight);
		masMedicalBoardProceedings.setAcceptable(acceptableKg);
		masMedicalBoardProceedings.setLegLength(leglength);
		masMedicalBoardProceedings.setAppearance(appereance);
		masMedicalBoardProceedings.setAlbumin(albumin);
		masMedicalBoardProceedings.setSugar(sugar);
		masMedicalBoardProceedings.setSpGravity(spGraviry);
		masMedicalBoardProceedings.setHbPercentage(hbPercentage);
		masMedicalBoardProceedings.setAnyOtherInvCarriedOut(anyOtherInv);
		masMedicalBoardProceedings.setPhysique(physique);
		masMedicalBoardProceedings.setSkin(skin);
		masMedicalBoardProceedings.setAbdomen(abdomen);
		masMedicalBoardProceedings.setHeartSize(heartSize);
		masMedicalBoardProceedings.setSounds(sound);
		masMedicalBoardProceedings.setRhythm(rhythm);
		masMedicalBoardProceedings.setArterialWalls(arterialWalls);
		masMedicalBoardProceedings.setPulseRates(pulseRates);
		masMedicalBoardProceedings.setBp(bp);
		masMedicalBoardProceedings.setChestMeasurement(fullExpension);
		masMedicalBoardProceedings.setRangeOfExpension(rangeOfExpension);
		masMedicalBoardProceedings.setSelfBalancingR(selfBalR);
		masMedicalBoardProceedings.setSelfBalancingL(selfBalL);
		masMedicalBoardProceedings.setSpeechMentalCapacity(speechMental);
		masMedicalBoardProceedings.setEndocrineCondition(endocrinCond);
		masMedicalBoardProceedings
				.setAnyOtheAbnormalities(otherAbnormalities);
		masMedicalBoardProceedings.setRemarks(medicinRemarks);
		masMedicalBoardProceedings.setFingers(finger);
		masMedicalBoardProceedings.setHand(hand);
		masMedicalBoardProceedings.setWrists(wrist);
		masMedicalBoardProceedings.setElbows(elbows);
		masMedicalBoardProceedings.setShoulderGirdles(shoulderGridles);
		masMedicalBoardProceedings.setCervical(cercival);
		masMedicalBoardProceedings.setDorsalVertebrate(dorsalVertebrate);
		masMedicalBoardProceedings.setHullux(hullux);
		masMedicalBoardProceedings.setValgus(valgus);
		masMedicalBoardProceedings.setRigigus(riggus);
		masMedicalBoardProceedings.setFlatFeet(flatFeet);
		masMedicalBoardProceedings.setJoints(joints);
		masMedicalBoardProceedings.setPelvis(pelvis);
		masMedicalBoardProceedings.setGail(gail);
		masMedicalBoardProceedings.setLumber(lumberScaler);
		masMedicalBoardProceedings.setRoccyxVarocose(roccyxVericose);
		masMedicalBoardProceedings.setHydrocele(hydrocele);
		masMedicalBoardProceedings.setVaricocele(varicocele);
		masMedicalBoardProceedings.setUnderscendedTest(underScende);
		masMedicalBoardProceedings.setHemorrhoids(hemonhoids);
		masMedicalBoardProceedings.setHerniaMusic(herinaMusic);
		masMedicalBoardProceedings.setBreasts(breasts);
		masMedicalBoardProceedings.setRemarksLowerlimbs(surgeryRemarks);
		masMedicalBoardProceedings.setRespiratorySystem(respatorySystem);
		masMedicalBoardProceedings
				.setWithGlassesLDistant(withglassesDistantL);
		masMedicalBoardProceedings
				.setWithGlassesRDistant(withGlassesDistantR);
		masMedicalBoardProceedings
				.setWithoutGlassesLDistant(withoutGlassesDistantL);
		masMedicalBoardProceedings
				.setWthoutGlassesRDistant(withoutGlassesDistantR);
		masMedicalBoardProceedings
				.setWithGlassesLNearvision(withGlassesNearL);
		masMedicalBoardProceedings
				.setWithGlassesRNearvision(withGlassesNearR);
		masMedicalBoardProceedings
				.setWithoutGlassesLNearvision(withoutGlassesNearL);
		masMedicalBoardProceedings
				.setWithoutGlassesRNearvision(withoutGlassesNearR);
		masMedicalBoardProceedings
				.setEvidenceOfTrachoma(evidienceOfTrachoma);
		masMedicalBoardProceedings.setBinocularVisionGrade(binocular);
		masMedicalBoardProceedings
				.setManifestHypermetropia(manifestHypermetropia);
		masMedicalBoardProceedings.setCoverTest(coverTest);
		masMedicalBoardProceedings.setDiaphragmTest(diaphragmTest);
		masMedicalBoardProceedings.setFundAndMedia(fundMedia);
		masMedicalBoardProceedings.setFields(fields);
		masMedicalBoardProceedings
				.setNightVisualCapacity(nightVisualCapacity);
		masMedicalBoardProceedings.setConvergenceC(convergenceC);
		masMedicalBoardProceedings.setConvergenceSc(convergenceCP);
		masMedicalBoardProceedings.setAccommodationR(accommodationR);
		masMedicalBoardProceedings.setAccommodationL(accommodationL);
		masMedicalBoardProceedings.setRemarksSpecialExam(eyeRemarks);
		masMedicalBoardProceedings.setHearingRcv(hearingRCV);
		masMedicalBoardProceedings.setHearingLcv(hearingLCV);
		masMedicalBoardProceedings.setEarHearingRfw(hearingRFW);
		masMedicalBoardProceedings.setEarHearingLfw(hearingLFW);
		masMedicalBoardProceedings.setEarHearingBothFw(hearingBothFW);
		masMedicalBoardProceedings.setExternalEarR(externalEarR);
		masMedicalBoardProceedings.setExternalEarL(externalEarL);
		masMedicalBoardProceedings.setMiddleEarR(middleEarR);
		masMedicalBoardProceedings.setMiddleEar(middleEarL);

		masMedicalBoardProceedings.setInnerEarR(innerEarR);
		masMedicalBoardProceedings.setAudiometryRecord(audiometryRecord);
		masMedicalBoardProceedings.setNose(nose);
		masMedicalBoardProceedings.setThroat(throatEar);
		masMedicalBoardProceedings.setRemarksEar(earReamrks);
		masMedicalBoardProceedings.setEarDate(earDate);
		masMedicalBoardProceedings.setDateTeath(dentalDate);
		masMedicalBoardProceedings.setRemarksTeath(dentalRemarks);
		masMedicalBoardProceedings.setMenstrualHistory(menstrualHistory);
		masMedicalBoardProceedings.setNoOfPregnancies(noOfPregnancy);
		masMedicalBoardProceedings.setNoOfAbortions(noOfAbortion);
		masMedicalBoardProceedings.setNoOfChildren(noOfChildren);
		masMedicalBoardProceedings.setLastConfinementDate(lastCondinement);
		masMedicalBoardProceedings.setVaginalDischarge(vaginalDischarge);
		masMedicalBoardProceedings.setProlapse(prolapse);
		masMedicalBoardProceedings.setUsgAbdomen(usgAbortion);
		masMedicalBoardProceedings.setGynaecologyDate(gyanaecologyDate);
		masMedicalBoardProceedings
				.setRemarksGynaecology(gyanaecologyRemarks);
		masMedicalBoardProceedings
				.setMedicalBoardFindings(medicalBoardExamination);
		masMedicalBoardProceedings
				.setDateMedicalBoardExam(medicalBoardExaminationDate);
		masMedicalBoardProceedings.setLmp(lmp);
		if (medicalBoardExaminationPlace != 0) {
			MasUnit masUnit1 = new MasUnit();
			masUnit1.setId(medicalBoardExaminationPlace);
			masMedicalBoardProceedings.setPlaceMedicalBoardExam(masUnit1);
		}
		masMedicalBoardProceedings
				.setMedicalBoardSubsequentFind(subsequentMedicalBoardExam);
		masMedicalBoardProceedings
				.setDateMedicalBoardSubsequent(subsequentMedicalBoardExamDate);
		if (subsequentMedicalBoardExamPlace != 0) {
			MasUnit masUnit2 = new MasUnit();
			masUnit2.setId(subsequentMedicalBoardExamPlace);
			masMedicalBoardProceedings
					.setPlaceMedicalBoardSubsequent(masUnit2);
		}
		masMedicalBoardProceedings
				.setApprovingAuthority(ApprovingAuthority);
		masMedicalBoardProceedings
				.setDateApprovingAuthority(ApprovingAuthorityDate);
		if (ApprovingAuthorityPlace != 0) {
			MasUnit masUnit3 = new MasUnit();
			masUnit3.setId(ApprovingAuthorityPlace);
			masMedicalBoardProceedings.setPlaceApprovingAuthority(masUnit3);
		}
		masMedicalBoardProceedings.setSurgeryDate(surgeyDate);
		masMedicalBoardProceedings.setMediceExamDate(medicinExamDate);
		masMedicalBoardProceedings
				.setNearVisionWithGlassCp(withGlassesNearCP);
		masMedicalBoardProceedings
				.setNearVisionWithoutGlassCp(withoutGlassesNearCP);
		masMedicalBoardProceedings.setUR1(sur1);
		masMedicalBoardProceedings.setUR2(sur2);
		masMedicalBoardProceedings.setUR3(sur3);
		masMedicalBoardProceedings.setUR4(sur4);
		masMedicalBoardProceedings.setUR5(sur5);
		masMedicalBoardProceedings.setUR6(sur6);
		masMedicalBoardProceedings.setUR7(sur7);
		masMedicalBoardProceedings.setUR8(sur8);

		masMedicalBoardProceedings.setUL1(sul1);
		masMedicalBoardProceedings.setUL2(sul2);
		masMedicalBoardProceedings.setUL3(sul3);
		masMedicalBoardProceedings.setUL4(sul4);
		masMedicalBoardProceedings.setUL5(sul5);
		masMedicalBoardProceedings.setUL6(sul6);
		masMedicalBoardProceedings.setUL7(sul7);
		masMedicalBoardProceedings.setUL8(sul8);

		masMedicalBoardProceedings.setLR1(slr1);
		masMedicalBoardProceedings.setLR2(slr2);
		masMedicalBoardProceedings.setLR3(slr3);
		masMedicalBoardProceedings.setLR4(slr4);
		masMedicalBoardProceedings.setLR5(slr5);
		masMedicalBoardProceedings.setLR6(slr6);
		masMedicalBoardProceedings.setLR7(slr7);
		masMedicalBoardProceedings.setLR8(slr8);

		masMedicalBoardProceedings.setLL1(sll1);
		masMedicalBoardProceedings.setLL2(sll2);
		masMedicalBoardProceedings.setLL3(sll3);
		masMedicalBoardProceedings.setLL4(sll4);
		masMedicalBoardProceedings.setLL5(sll5);
		masMedicalBoardProceedings.setLL6(sll6);
		masMedicalBoardProceedings.setLL7(sll7);
		masMedicalBoardProceedings.setLL8(sll8);
		masMedicalBoardProceedings.setLastChangedBy(lastChangedBy);
		masMedicalBoardProceedings.setLastChangedDate(lastChangedDate);
		masMedicalBoardProceedings.setLastChangedTime(lastChangedTime);
		masMedicalBoardProceedings.setServiceNo(serviceNo);
		// masMedicalBoardProceedings.setName(name);
		// masMedicalBoardProceedings.setUnit(unit);
		masMedicalBoardProceedings.setServiceiaf(serviceiaf);
		// masMedicalBoardProceedings.setBranch(branch);
		// masMedicalBoardProceedings.setDob(dob);

		masMedicalBoardProceedings.setTypeofcommision(typeOfCommunication);
		masMedicalBoardProceedings.setDateofcommun(dateofcommun);
		masMedicalBoardProceedings.setTotalService(totalservice);
		masMedicalBoardProceedings
				.setPastmedicalhistory(pastmedicalhistory);
		masMedicalBoardProceedings
				.setPresentmedicalhistory(presentmedicalhistory);
		masMedicalBoardProceedings.setIdealweight(idealweight);
		masMedicalBoardProceedings.setOverweight(overweight);
		masMedicalBoardProceedings.setWaist(waist);
		masMedicalBoardProceedings
				.setChestfullexpansion(chestfullexpansion);
		masMedicalBoardProceedings.setBhi(bhi);
		masMedicalBoardProceedings.setRangeofexpansion(rangeofexpansion);
		masMedicalBoardProceedings.setBodyfat(bodyfat);
		masMedicalBoardProceedings.setSignfoldthickness(signfoldthickness);
		masMedicalBoardProceedings.setSportman(sportman);
		masMedicalBoardProceedings.setLastame(lastame);
		masMedicalBoardProceedings.setActualweight(actualweight);

		
		/**
		 * Added By Mansi
		 */
		if(req.getParameter("sd") != null && !req.getParameter("sd").equals("")){
			masMedicalBoardProceedings.setSD(req.getParameter("sd"));
		}
		/**
		 * End
		 */
		if (req.getParameter(SERVICE_TYPE_ID) != null
				&& !(req.getParameter(SERVICE_TYPE_ID)).equals("0")) {
			MasServiceType serviceType = new MasServiceType();
			serviceType.setId(Integer.parseInt(req
					.getParameter(SERVICE_TYPE_ID)));
			masMedicalBoardProceedings.setServiceType(serviceType);
		}
		if (req.getParameter(RANK_ID) != null
				&& !(req.getParameter(RANK_ID)).equals("0")) {
			MasRank masRank = new MasRank();
			masRank.setId(Integer.parseInt(req.getParameter(RANK_ID)));
			masMedicalBoardProceedings.setRank(masRank);
		}
		if (req.getParameter(TRADE_ID) != null
				&& !(req.getParameter(TRADE_ID)).equals("")) {
			MasTrade masTrade = new MasTrade();
			masTrade.setId(Integer.parseInt(req.getParameter(TRADE_ID)));
			masMedicalBoardProceedings.setTrade(masTrade);
		}
		if (req.getParameter(UNIT_ID) != null
				&& !(req.getParameter(UNIT_ID)).equals("0")) {
			MasUnit unitObj = new MasUnit();
			unitObj.setId(Integer.parseInt(req.getParameter(UNIT_ID)));
			masMedicalBoardProceedings.setUnit(unitObj);
		}
		if (req.getParameter("apparentAge") != null
				&& !req.getParameter("apparentAge").equals("")) {
			String aparentage = req.getParameter("apparentAge");
			masMedicalBoardProceedings.setApparentAge(aparentage.substring(
					0, 2));
		}
		if (req.getParameter(VISIT_ID) != null
				&& !(req.getParameter(VISIT_ID)).equals("0")) {
			Visit visit = new Visit();
			visit.setId(Integer.parseInt(req.getParameter(VISIT_ID)));
			if (req.getParameter("apparentAge") == null) {
				if (masMedicalBoardProceedings.getVisit().getAge() != null) {
					masMedicalBoardProceedings
							.setApparentAge(masMedicalBoardProceedings
									.getVisit().getAge().substring(0, 2));
				}
			}
			masMedicalBoardProceedings.setVisit(visit);
		}
		if (req.getParameter(HIN_ID) != null
				&& !(req.getParameter(HIN_ID)).equals("0")) {
			Patient patient = new Patient();
			patient.setId(Integer.parseInt(req.getParameter(HIN_ID)));
			masMedicalBoardProceedings.setHin(patient);
			mapForDS.put("hinId", Integer
					.parseInt(req.getParameter(HIN_ID)));
		}
		if (req.getParameter(FATHER_NAME) != null) {
			masMedicalBoardProceedings.setFatherName(req
					.getParameter(FATHER_NAME));
		}
		if (req.getParameter(RELEVANT_FAMILY_HISTORY) != null) {
			masMedicalBoardProceedings.setRelevantFamilyHistory(req
					.getParameter(RELEVANT_FAMILY_HISTORY));
		}
		if (req.getParameter(DEFECTS_NOT_TO_CAUSE_REJECTION) != null) {
			masMedicalBoardProceedings.setDefectNotToCauseRejection(req
					.getParameter(DEFECTS_NOT_TO_CAUSE_REJECTION));
		}
		if (req.getParameter(FOUND_FIT_IN_CATEGORY) != null) {
			masMedicalBoardProceedings.setFoundFitInCategory(req
					.getParameter(FOUND_FIT_IN_CATEGORY));
		}
		if (req.getParameter(APPOINTMENT_DATE) != null
				&& !req.getParameter(APPOINTMENT_DATE).equals("")) {
			masMedicalBoardProceedings.setAppointmentDate(HMSUtil
					.convertStringTypeDateToDateType(req
							.getParameter(APPOINTMENT_DATE)));
		}
		if (req.getParameter(APPOINTMENT_TIME) != null
				&& !req.getParameter(APPOINTMENT_TIME).equals("")) {
			masMedicalBoardProceedings.setAppointmentTime(req
					.getParameter(APPOINTMENT_TIME));
		}
		if (req.getParameter("medicalExamType") != null
				&& !req.getParameter("medicalExamType").equals("")) {
			masMedicalBoardProceedings.setMedicalExamType(req
					.getParameter("medicalExamType"));
		}
		if (req.getParameter("Hips") != null
				&& !(req.getParameter("Hips").equals(""))) {
			masMedicalBoardProceedings.setHips(req.getParameter("Hips"));
		}
		if (req.getParameter("WHR") != null
				&& !(req.getParameter("WHR").equals(""))) {
			masMedicalBoardProceedings.setWhr(req.getParameter("WHR"));
		}
		if (req.getParameter(APPOINTMENT_TIME) != null
				&& !req.getParameter(APPOINTMENT_TIME).equals("")) {
			masMedicalBoardProceedings.setAppointmentTime(req
					.getParameter(APPOINTMENT_TIME));
		}
		if (req.getParameter(HIGHER_MENTAL_FUNCTION) != null
				&& !req.getParameter(HIGHER_MENTAL_FUNCTION).equals("")) {
			masMedicalBoardProceedings.setHigherMentalFunction(req
					.getParameter(HIGHER_MENTAL_FUNCTION));
		}
		if (req.getParameter(SPEECH) != null
				&& !req.getParameter(SPEECH).equals("")) {
			masMedicalBoardProceedings.setSpeech(req.getParameter(SPEECH));
		}
		if (req.getParameter(REFLEXES) != null
				&& !req.getParameter(REFLEXES).equals("")) {
			masMedicalBoardProceedings.setReflexes(req
					.getParameter(REFLEXES));
		}
		if (req.getParameter(TREMORS) != null
				&& !req.getParameter(TREMORS).equals("")) {
			masMedicalBoardProceedings
					.setTremors(req.getParameter(TREMORS));
		}
		if (req.getParameter(SELF_BALANCING_TEST) != null
				&& !req.getParameter(SELF_BALANCING_TEST).equals("")) {
			masMedicalBoardProceedings.setSelfBalancingTest(req
					.getParameter(SELF_BALANCING_TEST));
		}

		if (req.getParameter(DISABILITY) != null
				&& !req.getParameter(DISABILITY).equals("")) {
			masMedicalBoardProceedings.setDisability(req
					.getParameter(DISABILITY));
		}
		if (req.getParameter(CORONORY_RISK_FACTOR) != null
				&& !req.getParameter(CORONORY_RISK_FACTOR).equals("")) {
			masMedicalBoardProceedings.setCoronaryRiskFactor(req
					.getParameter(CORONORY_RISK_FACTOR));
		}
		if (req.getParameter("familyHistoryOther") != null
				&& !req.getParameter("familyHistoryOther").equals("")) {
			masMedicalBoardProceedings.setFmdm(req
					.getParameter("familyHistoryOther"));
		}
		if (req.getParameter("commutationOfPensionRemarks") != null
				&& !req.getParameter("commutationOfPensionRemarks").equals(
						"")) {
			masMedicalBoardProceedings.setCommandRemarks(req
					.getParameter("commutationOfPensionRemarks"));
		}
		if (req.getParameter(FINAL_OBSERVATION) != null
				&& !req.getParameter(FINAL_OBSERVATION).equals("")) {
			masMedicalBoardProceedings.setFinalObservation(req
					.getParameter(FINAL_OBSERVATION));
		}
		if (req.getParameter(SIGNED_BY) != null
				&& !req.getParameter(SIGNED_BY).equals("")) {
			masMedicalBoardProceedings.setSignedBy(req
					.getParameter(SIGNED_BY));
		}
		if (req.getParameter(APPROVED_BY) != null
				&& !req.getParameter(APPROVED_BY).equals("")) {
			masMedicalBoardProceedings.setApprovedBy(req
					.getParameter(APPROVED_BY));
		}
		String admissionStatus = "";
		String specialistOpinion = "";
		if (req.getParameter("admissionStatus") != null) {
			admissionStatus = "y";
		} else {
			admissionStatus = "n";

		}

		if (req.getParameter("specialistOpinion") != null) {
			specialistOpinion = "y";
		} else {
			specialistOpinion = "n";

		}

		masMedicalBoardProceedings.setAdmissionStatus(admissionStatus);
		masMedicalBoardProceedings
				.setSpecialistOpinnionStatus(specialistOpinion);

		if (req.getParameter("liver") != null
				&& !req.getParameter("liver").equals("")) {
			masMedicalBoardProceedings.setLiver(req.getParameter("liver"));
		}
		if (req.getParameter("spleen") != null
				&& !req.getParameter("spleen").equals("")) {
			masMedicalBoardProceedings
					.setSpleen(req.getParameter("spleen"));
		}
		if (req.getParameter("upperLimbs") != null
				&& !req.getParameter("upperLimbs").equals("")) {
			masMedicalBoardProceedings.setUpperLimbs(req
					.getParameter("upperLimbs"));
		}
		if (req.getParameter("locomotion") != null
				&& !req.getParameter("locomotion").equals("")) {
			masMedicalBoardProceedings.setLocomotion(req
					.getParameter("locomotion"));
		}
		if (req.getParameter("chestMeasurement") != null
				&& !req.getParameter("chestMeasurement").equals("")) {
			masMedicalBoardProceedings.setChestMeasurement(req
					.getParameter("chestMeasurement"));
		}
		if (req.getParameter("fullExpiration") != null
				&& !req.getParameter("fullExpiration").equals("")) {
			masMedicalBoardProceedings.setFullExpiration(req
					.getParameter("fullExpiration"));
		}
		if (req.getParameter("abnormalities") != null
				&& !req.getParameter("abnormalities").equals("")) {
			masMedicalBoardProceedings.setAbnormalities(req
					.getParameter("abnormalities"));
		}
		if (req.getParameter("otherAbnormalities") != null
				&& !req.getParameter("otherAbnormalities").equals("")) {
			masMedicalBoardProceedings.setAnyOtheAbnormalities(req
					.getParameter("otherAbnormalities"));
		}
		if (req.getParameter("anyEvidenceOfSkin") != null
				&& !req.getParameter("anyEvidenceOfSkin").equals("")) {
			masMedicalBoardProceedings.setAnyEvidenceOfSkin(req
					.getParameter("anyEvidenceOfSkin"));
		}
		if (req.getParameter(NERVOUS_BRAKDOWN) != null
				&& !req.getParameter(NERVOUS_BRAKDOWN).equals("")) {
			masMedicalBoardProceedings.setCentralNervousSystem(req
					.getParameter(NERVOUS_BRAKDOWN));
		}
		if (req.getParameter("mentalInstability") != null
				&& !req.getParameter("mentalInstability").equals("")) {
			masMedicalBoardProceedings.setMentalInstability(req
					.getParameter("mentalInstability"));
		}
		if (req.getParameter("essentialInstability") != null
				&& !req.getParameter("essentialInstability").equals("")) {
			masMedicalBoardProceedings.setEssentialInstability(req
					.getParameter("essentialInstability"));
		}
		if (req.getParameter("smoker") != null
				&& !req.getParameter("smoker").equals("")) {
			masMedicalBoardProceedings
					.setSmoker(req.getParameter("smoker"));
		}
		if (req.getParameter("drinker") != null
				&& !req.getParameter("drinker").equals("")) {
			masMedicalBoardProceedings.setDrinker(req
					.getParameter("drinker"));
		}
		if (req.getParameter("allergies") != null
				&& !req.getParameter("allergies").equals("")) {
			masMedicalBoardProceedings.setAllergies(req
					.getParameter("allergies"));
		}
		if (req.getParameter("locomoterSystem") != null
				&& !req.getParameter("locomoterSystem").equals("")) {
			masMedicalBoardProceedings.setLocomoterSystem(req
					.getParameter("locomoterSystem"));
		}
		if (req.getParameter("spine") != null
				&& !req.getParameter("spine").equals("")) {
			masMedicalBoardProceedings.setSpine(req.getParameter("spine"));
		}
		if (req.getParameter("tympanicMembranceIntact") != null
				&& !req.getParameter("tympanicMembranceIntact").equals("")) {
			masMedicalBoardProceedings.setTympanicMembranceIntact(req
					.getParameter("tympanicMembranceIntact"));
		}
		if (req.getParameter(MOBILITYR) != null
				&& !req.getParameter(MOBILITYR).equals("")) {
			masMedicalBoardProceedings.setMobilityR(req
					.getParameter(MOBILITYR));
		}
		if (req.getParameter("noseThroatSinuses") != null
				&& !req.getParameter("noseThroatSinuses").equals("")) {
			masMedicalBoardProceedings.setNoseThroatSinuses(req
					.getParameter("noseThroatSinuses"));
		}
		if (req.getParameter(KNOWN_ALLERGY) != null
				&& !req.getParameter(KNOWN_ALLERGY).equals("")) {
			masMedicalBoardProceedings.setAllergies(req
					.getParameter(KNOWN_ALLERGY));
		}
		if (req.getParameter(BATCH_NO) != null
				&& !req.getParameter(BATCH_NO).equals("")) {
			masMedicalBoardProceedings.setBatchNo(req
					.getParameter(BATCH_NO));
		}
		if (req.getParameter("cmMdRemarks") != null
				&& !req.getParameter("cmMdRemarks").equals("")) {
			masMedicalBoardProceedings.setMdRemarks(req
					.getParameter("cmMdRemarks"));
		}
		if (req.getParameter(AUTHORITY_OF_BOARD) != null
				&& !req.getParameter(AUTHORITY_OF_BOARD).equals("")) {
			masMedicalBoardProceedings.setAuthority(req
					.getParameter(AUTHORITY_OF_BOARD));
		}
		if (req.getParameter(PLACE) != null
				&& !req.getParameter(PLACE).equals("")) {
			masMedicalBoardProceedings.setPlace(req.getParameter(PLACE));
		}
		if (req.getParameter(DATE_DISCHARGE) != null
				&& !req.getParameter(DATE_DISCHARGE).equals("")) {
			masMedicalBoardProceedings.setDateDischarge(HMSUtil
					.convertStringTypeDateToDateType(req
							.getParameter(DATE_DISCHARGE)));
		}
		if (req.getParameter(DATE_OF_RELEASE) != null
				&& !req.getParameter(DATE_OF_RELEASE).equals("")) {
			masMedicalBoardProceedings.setDateRelease(HMSUtil
					.convertStringTypeDateToDateType(req
							.getParameter(DATE_OF_RELEASE)));
		}
		if (req.getParameter(MARITAL_STATUS_ID) != null
				&& !req.getParameter(MARITAL_STATUS_ID).equals("")) {
			MasMaritalStatus maritalstatus = new MasMaritalStatus();
			maritalstatus.setId(Integer.parseInt(req
					.getParameter(MARITAL_STATUS_ID)));
			masMedicalBoardProceedings.setMaritalStatus(maritalstatus);

		}

		// if(req.getParameter(SERVICE_TYPE_ID) != null &&
		// !req.getParameter(SERVICE_TYPE_ID).equals("")){
		// masMedicalBoardProceedings.setBatchNo(req.getParameter(SERVICE_TYPE_ID));
		// }
		if (req.getParameter(DATE_DISEASE) != null
				&& !req.getParameter(DATE_DISEASE).equals("")) {
			masMedicalBoardProceedings.setDateDisease(HMSUtil
					.convertStringTypeDateToDateType(req
							.getParameter(DATE_DISEASE)));
		}
		if (req.getParameter(PLACE_DISEASE) != null
				&& !req.getParameter(PLACE_DISEASE).equals("")) {
			masMedicalBoardProceedings.setPlacedisease(req
					.getParameter(PLACE_DISEASE));
		}
		if (req.getParameter(WHERE_TREATED) != null
				&& !req.getParameter(WHERE_TREATED).equals("")) {
			masMedicalBoardProceedings.setWheretreated(req
					.getParameter(WHERE_TREATED));
		}
		if (req.getParameter(DATE_APPROXIMATE) != null
				&& !req.getParameter(DATE_APPROXIMATE).equals("")) {
			masMedicalBoardProceedings.setDateapproximate(HMSUtil
					.convertStringTypeDateToDateType(req
							.getParameter(DATE_APPROXIMATE)));
		}
		if (req.getParameter(DISABILITY_BEFORE) != null
				&& !req.getParameter(DISABILITY_BEFORE).equals("")) {
			masMedicalBoardProceedings.setDisabilitybefore(req
					.getParameter(DISABILITY_BEFORE));
		}
		if (req.getParameter(CLAMING_DISABILITY) != null
				&& !req.getParameter(CLAMING_DISABILITY).equals("")) {
			masMedicalBoardProceedings.setClamingdisability(req
					.getParameter(CLAMING_DISABILITY));
		}
		if (req.getParameter(DATE_DISCHARGE) != null
				&& !req.getParameter(DATE_DISCHARGE).equals("")) {
			masMedicalBoardProceedings.setDateDischarge(HMSUtil
					.convertStringTypeDateToDateType(req
							.getParameter(DATE_DISCHARGE)));
		}
		if (req.getParameter(UPLOADED_DATE) != null
				&& !req.getParameter(UPLOADED_DATE).equals("")) {
			masMedicalBoardProceedings.setUploadeddate(HMSUtil
					.convertStringTypeDateToDateType(req
							.getParameter(UPLOADED_DATE)));
		}
		if (req.getParameter(CONDITION_OF_GUMS) != null
				&& !req.getParameter(CONDITION_OF_GUMS).equals("")) {
			masMedicalBoardProceedings.setConditionOfGums(req
					.getParameter(CONDITION_OF_GUMS));
		}
		if (req.getParameter(TYMPANIC_L) != null
				&& !req.getParameter(TYMPANIC_L).equals("")) {
			masMedicalBoardProceedings.setTympanicL(req
					.getParameter(TYMPANIC_L));
		}
		if (req.getParameter(TYMPANIC_R) != null
				&& !req.getParameter(TYMPANIC_R).equals("")) {
			masMedicalBoardProceedings.setTympanicR(req
					.getParameter(TYMPANIC_R));
		}
		if (req.getParameter(MOBILITYL) != null
				&& !req.getParameter(MOBILITYL).equals("")) {
			masMedicalBoardProceedings.setMobilityL(req
					.getParameter(MOBILITYL));
		}
		if (req.getParameter(NOSE_THROAT) != null
				&& !req.getParameter(NOSE_THROAT).equals("")) {
			masMedicalBoardProceedings.setNosethroat(req
					.getParameter(NOSE_THROAT));
		}
		if (req.getParameter(DATE_OF_AME) != null
				&& !req.getParameter(DATE_OF_AME).equals("")) {
			masMedicalBoardProceedings
					.setDateMedicalBoardSubsequent(HMSUtil
							.convertStringTypeDateToDateType(req
									.getParameter(DATE_OF_AME)));
		}
		if (req.getParameter("MissTeeth") != null
				&& !req.getParameter("MissTeeth").equals("")) {
			masMedicalBoardProceedings.setMissTeeth(req
					.getParameter("MissTeeth"));
		}
		if (req.getParameter("UnserTeeth") != null
				&& !req.getParameter("UnserTeeth").equals("")) {
			masMedicalBoardProceedings.setUnserTeeth(req
					.getParameter("UnserTeeth"));
		}
		if (req.getParameter("Investigated") != null
				&& !req.getParameter("Investigated").equals("")) {
			masMedicalBoardProceedings.setInvestigated(req
					.getParameter("Investigated"));
		}
		String medicaltype = masMedicalBoardProceedings
				.getMedicalExamType();
		MasMedicalExaminationDetail medicaldetail = new MasMedicalExaminationDetail();
		int temp1 = 1;
		List<Integer> serialnolist = new ArrayList<Integer>();
		List<String> fromlist = new ArrayList<String>();
		List<String> tolist = new ArrayList<String>();
		List<String> placelist = new ArrayList<String>();
		List<String> pnolist = new ArrayList<String>();
		List<Integer> serialnolist1 = new ArrayList<Integer>();
		List<String> illnesslist = new ArrayList<String>();
		List<Date> particulardatelist = new ArrayList<Date>();
		List<Integer> rankidlist = new ArrayList<Integer>();
		List<String> treatedlist = new ArrayList<String>();
		List<Date> approximatedatelist = new ArrayList<Date>();
		List<Date> approximatedate2list = new ArrayList<Date>();
		List<String> placelist1 = new ArrayList<String>();
		List<String> principallist = new ArrayList<String>();
		List<Date> origindatelist = new ArrayList<Date>();
		List<Date> medicalcatdatelist = new ArrayList<Date>();
		List<Date> nextcatdatelist = new ArrayList<Date>();
		int k = 0;
		int hdbvalue = 1;
		if (req.getParameter("dentalValue") != null
				&& !req.getParameter("dentalValue").equals("")) {
			masMedicalBoardProceedings.setDentalValue(req
					.getParameter("dentalValue"));
		}
		if (req.getParameter(PAST_MEDICAL_CATEGORY) != null
				&& !(req.getParameter(PAST_MEDICAL_CATEGORY)).equals("0")) {
			Category categ1 = new Category();
			categ1.setCategoryid(Integer.parseInt(req
					.getParameter(PAST_MEDICAL_CATEGORY)));
			masMedicalBoardProceedings.setPastMedicalCategory(categ1);
		}
		if (req.getParameter(PRESENT_MEDICAL_CATEGORY) != null
				&& !(req.getParameter(PRESENT_MEDICAL_CATEGORY))
						.equals("0")) {
			Category categ2 = new Category();
			categ2.setCategoryid(Integer.parseInt(req
					.getParameter(PRESENT_MEDICAL_CATEGORY)));
			masMedicalBoardProceedings.setPresentMedicalCategory(categ2);
		}
		if (medicaltype.equalsIgnoreCase("Medical Board AFMSF 16")) {

			if (Integer.parseInt(req.getParameter("hdb")) != 1) {
				hdbvalue = Integer.parseInt(req.getParameter("hdb"));
			}
			for (int i = 1; i <= hdbvalue; i++) {
				if (req.getParameter(FROM + i) != null
						&& !req.getParameter(FROM + i).equals("")) {
					if (req.getParameter(SIRIAL_NO + temp1) == "") {
						serialnolist.add(k);
					} else if (req.getParameter(SIRIAL_NO + i) != null
							&& !req.getParameter(SIRIAL_NO + i).equals("")) {
						serialnolist.add(Integer.parseInt(req
								.getParameter(SIRIAL_NO + i)));
					} else {
						serialnolist.add(0);
					}

					if (req.getParameter(FROM + i) != null
							&& !req.getParameter(FROM + i).equals("")) {
						fromlist.add(req.getParameter(FROM + i));
					} else {
						fromlist.add("");
					}

					if (req.getParameter(TO + i) != null
							&& !req.getParameter(TO + i).equals("")) {
						tolist.add(req.getParameter(TO + i));
					} else {
						tolist.add("");
					}
					if (req.getParameter(PLACE + i) != null
							&& !req.getParameter(PLACE + i).equals("")) {
						placelist.add(req.getParameter(PLACE + i));
					} else {
						placelist.add("");
					}
					if (req.getParameter(P_NO + i) != null
							&& !req.getParameter(P_NO + i).equals("")) {
						pnolist.add(req.getParameter(P_NO + i));
					} else {
						pnolist.add("");
					}
					if (req.getParameter(PRINCIPAL + i) != null
							&& !req.getParameter(PRINCIPAL + i).equals("")) {
						principallist.add(req.getParameter(PRINCIPAL + i));
					} else {
						principallist.add("");
					}
					if (req.getParameter(ORIGIN_DATE + i) != null
							&& (!req.getParameter(ORIGIN_DATE + i).equals(
									""))) {
						origindatelist.add(HMSUtil
								.convertStringTypeDateToDateType(req
										.getParameter(ORIGIN_DATE + i)));
					} else {
						origindatelist.add(null);
					}
					if (req.getParameter(MEDICAL_CAT_DATE + i) != null
							&& (!req.getParameter(MEDICAL_CAT_DATE + i)
									.equals(""))) {
						medicalcatdatelist
								.add(HMSUtil
										.convertStringTypeDateToDateType(req
												.getParameter(MEDICAL_CAT_DATE
														+ i)));
					} else {
						medicalcatdatelist.add(null);
					}
					if (req.getParameter(NEXT_CAT_DATE + i) != null
							&& (!req.getParameter(NEXT_CAT_DATE + i)
									.equals(""))) {
						nextcatdatelist.add(HMSUtil
								.convertStringTypeDateToDateType(req
										.getParameter(NEXT_CAT_DATE + i)));
					} else {
						nextcatdatelist.add(null);
					}
					// temp1=temp1+1;
				}
			}
		}
		mapForDS.put("hdbvalue", hdbvalue);
		mapForDS.put("hiddenValue", hiddenValue);
		mapForDS.put("serialnolist", serialnolist);
		mapForDS.put("fromlist", fromlist);
		mapForDS.put("tolist", tolist);
		mapForDS.put("placelist", placelist);
		mapForDS.put("pnolist", pnolist);
		mapForDS.put("principallist", principallist);
		mapForDS.put("origindatelist", origindatelist);
		mapForDS.put("medicalcatdatelist", medicalcatdatelist);
		mapForDS.put("nextcatdatelist", nextcatdatelist);

		List<Integer> illnessICDlist = new ArrayList<Integer>();
		List<Integer> illnessICDBeforelist = new ArrayList<Integer>();

		int hdbvalue1 = 1;
		int hiddenValue1 = 1;
		if (medicaltype.equalsIgnoreCase("Medical Board AFMSF 16")) {
			if (Integer.parseInt(req.getParameter("hdb1")) != 1) {
				hdbvalue1 = Integer.parseInt(req.getParameter("hdb1"));
			}
			int temp2 = 1;
			for (int i = 1; i <= hdbvalue1; i++) {
				if (req.getParameter(ILLNESS + i) != null
						&& !req.getParameter(ILLNESS + i).equals("")) {
					if (req.getParameter(SIRIAL_NO1 + i) == "") {
						serialnolist1.add(k);
					} else if (req.getParameter(SIRIAL_NO1 + i) != null
							&& !req.getParameter(SIRIAL_NO1 + i).equals("")) {
						serialnolist1.add(Integer.parseInt(req
								.getParameter(SIRIAL_NO1 + i)));
					} else {
						serialnolist1.add(0);
					}

					/*
					 * if(req.getParameter(ILLNESS+ i) != null ){
					 * illnesslist.add(req.getParameter(ILLNESS+ i)); }else{
					 * illnesslist.add(""); }
					 */
					String str = "";
					if (req.getParameter(ILLNESS + i) != null) {
						// illnesslist.add(req.getParameter(ILLNESS+ i));
						str = req.getParameter(ILLNESS + i);
					} else {
						// illnesslist.add("");
						str = "";
					}

					int icdId = 0;
					if (str != "") {
						String illness = "";
						int lastIndex = str.indexOf("[");
						if (lastIndex > 0) {
							illness = str.substring(0, lastIndex);
							illnesslist.add(illness);
						} else {
							illness = str;
							illnesslist.add("");
						}
						int index1 = str.lastIndexOf("[");
						int index2 = str.lastIndexOf("]");
						// icdId
						// =Integer.parseInt(str.substring((index1+1),index2));
						try {
							if (str != null && !str.equals("")) {
								icdId = Integer.parseInt(str.substring(
										(index1 + 1), index2));
							}
						} catch (NumberFormatException e) {

							e.printStackTrace();
						}
						illnessICDlist.add(icdId);
					} else {
						illnessICDlist.add(icdId);
						illnesslist.add("");
					}

					if (req.getParameter(PARTICULAR_DATE + i) != null
							&& (!req.getParameter(PARTICULAR_DATE + i)
									.equals(""))) {
						particulardatelist
								.add(HMSUtil
										.convertStringTypeDateToDateType(req
												.getParameter(PARTICULAR_DATE
														+ i)));
					} else {
						particulardatelist.add(null);
					}
					if (req.getParameter(RANK_INDIVIDUAL_ID + i) != null
							&& !req.getParameter(RANK_INDIVIDUAL_ID + i)
									.equals("")) {
						rankidlist.add(Integer.parseInt(req
								.getParameter(RANK_INDIVIDUAL_ID + i)));
					} else {
						rankidlist.add(0);
					}
					if (req.getParameter(TREATED + i) != null
							&& !req.getParameter(TREATED + i).equals("")) {
						treatedlist.add(req.getParameter(TREATED + i));
					} else {
						treatedlist.add("");
					}
					if (req.getParameter(PLACE1 + i) != null
							&& !req.getParameter(PLACE1 + i).equals("")) {
						placelist1.add(req.getParameter(PLACE1 + i));
					} else {
						placelist1.add("");
					}
					if (req.getParameter(APPROXIMATE_DATE + i) != null
							&& (!req.getParameter(APPROXIMATE_DATE + i)
									.equals(""))) {
						approximatedatelist
								.add(HMSUtil
										.convertStringTypeDateToDateType(req
												.getParameter(APPROXIMATE_DATE
														+ i)));
					} else {
						approximatedatelist.add(null);
					}
					if (req.getParameter(APPROXIMATE_DATE2 + i) != null
							&& (!req.getParameter(APPROXIMATE_DATE2 + i)
									.equals(""))) {
						approximatedate2list
								.add(HMSUtil
										.convertStringTypeDateToDateType(req
												.getParameter(APPROXIMATE_DATE2
														+ i)));
					} else {
						approximatedate2list.add(null);
					}
					// temp2=temp2+1;
				}
			}
			mapForDS.put("hdbvalue1", hdbvalue1);
			mapForDS.put("hiddenValue1", hiddenValue1);
			mapForDS.put("serialnolist1", serialnolist1);
			mapForDS.put("illnesslist", illnesslist);
			mapForDS.put("particulardatelist", particulardatelist);
			mapForDS.put("rankidlist", rankidlist);
			mapForDS.put("treatedlist", treatedlist);
			mapForDS.put("approximatedatelist", approximatedatelist);
			mapForDS.put("approximatedate2list", approximatedate2list);
			mapForDS.put("placelist1", placelist1);

			/*
			 * Code for Disability Before Service Date 27 Feb 2012
			 */
			List<Integer> serialnoBeforeList = new ArrayList<Integer>();
			List<String> illnessBeforeList = new ArrayList<String>();
			List<Date> particulardateBeforeList = new ArrayList<Date>();
			List<String> treatedBeforeList = new ArrayList<String>();
			List<String> placeBeforeList = new ArrayList<String>();
			List<String> beforeDisabilityBeforeList = new ArrayList<String>();
			int hdbBefore = 0;

			if (Integer.parseInt(req.getParameter("hdbBefore")) != 1) {
				hdbBefore = Integer.parseInt(req.getParameter("hdbBefore"));
			}
			for (int i = 1; i <= hdbBefore; i++) {
				if (req.getParameter(ILLNESS + "1" + i) != null
						&& !req.getParameter(ILLNESS + "1" + i).equals("")) {
					if (req.getParameter(SIRIAL_NO1 + "1" + i) == "") {
						serialnoBeforeList.add(i);
					} else if (req.getParameter(SIRIAL_NO1 + "1" + i) != null
							&& !req.getParameter(SIRIAL_NO1 + "1" + i)
									.equals("")) {
						serialnoBeforeList.add(Integer.parseInt(req
								.getParameter(SIRIAL_NO1 + "1" + i)));
					} else {
						serialnoBeforeList.add(0);
					}

					/*
					 * if(req.getParameter(ILLNESS+"1"+i) != null ){
					 * illnessBeforeList
					 * .add(req.getParameter(ILLNESS+"1"+i)); }else{
					 * illnessBeforeList.add(""); }
					 */
					String beforeStr = "";
					if (req.getParameter(ILLNESS + "1" + i) != null) {
						beforeStr = req.getParameter(ILLNESS + "1" + i);
					} else {
						// illnessBeforeList.add("");
						beforeStr = "";
					}

					int icdId = 0;
					if (beforeStr != "") {
						String illness = "";
						int lastIndex = beforeStr.indexOf("[");
						if (lastIndex > 0) {
							illness = beforeStr.substring(0, lastIndex);
							illnessBeforeList.add(illness);
						} else {
							illness = beforeStr;
							illnessBeforeList.add("");
						}
						int index1 = beforeStr.lastIndexOf("[");
						int index2 = beforeStr.lastIndexOf("]");
						try {
							if (beforeStr != null && !beforeStr.equals("")) {
								icdId = Integer.parseInt(beforeStr
										.substring((index1 + 1), index2));
							}
						} catch (NumberFormatException e) {

							e.printStackTrace();
						}
						illnessICDBeforelist.add(icdId);
					} else {
						illnessICDBeforelist.add(icdId);
						illnessBeforeList.add("");
					}

					if (req.getParameter(PARTICULAR_DATE + "1" + i) != null
							&& (!req
									.getParameter(PARTICULAR_DATE + "1" + i)
									.equals(""))) {
						particulardateBeforeList.add(HMSUtil
								.convertStringTypeDateToDateType(req
										.getParameter(PARTICULAR_DATE + "1"
												+ i)));
					} else {
						particulardateBeforeList.add(null);
					}
					if (req.getParameter(TREATED + "1" + i) != null
							&& !req.getParameter(TREATED + "1" + i).equals(
									"")) {
						treatedBeforeList.add(req.getParameter(TREATED
								+ "1" + i));
					} else {
						treatedBeforeList.add("");
					}
					if (req.getParameter(PLACE1 + "1" + i) != null
							&& !req.getParameter(PLACE1 + "1" + i).equals(
									"")) {
						placeBeforeList.add(req.getParameter(PLACE1 + "1"
								+ i));
					} else {
						placeBeforeList.add("");
					}
					if (req.getParameter("beforeDisability" + "1" + i) != null
							&& !req.getParameter(
									"beforeDisability" + "1" + i)
									.equals("")) {
						beforeDisabilityBeforeList
								.add(req.getParameter("beforeDisability"
										+ "1" + i));
					} else {
						beforeDisabilityBeforeList.add("y");
					}
				}
			}
			mapForDS.put("illnessICDlist", illnessICDlist);
			mapForDS.put("illnessICDBeforelist", illnessICDBeforelist);

			mapForDS.put("hdbBefore", hdbBefore);
			mapForDS.put("serialnoBeforeList", serialnoBeforeList);
			mapForDS.put("illnessBeforeList", illnessBeforeList);
			mapForDS.put("particulardateBeforeList",
					particulardateBeforeList);
			mapForDS.put("treatedBeforeList", treatedBeforeList);
			mapForDS.put("placeBeforeList", placeBeforeList);
			mapForDS.put("beforeDisabilityBeforeList",
					beforeDisabilityBeforeList);

			/*
			 * End of Code for Disability Before Service Date 27 Feb 2012
			 */
		}
		/*
		 * Code for Disability Date 01 March 2012
		 */

		int hdbDisability = 1;

		if (Integer.parseInt(req.getParameter("hdbDisability")) != 1) {
			hdbDisability = Integer.parseInt(req
					.getParameter("hdbDisability"));
		}
		List<Integer> systemDiagnosisIdList = new ArrayList<Integer>();
		List<String> systemDiagnosisList = new ArrayList<String>();
		List<MasMedicalExaminationDetail> masMedicalExaminationDetailsDisabilityList = new ArrayList<MasMedicalExaminationDetail>();
		for (int i = 1; i <= hdbDisability; i++) {
			MasMedicalExaminationDetail masMedicalExaminationDetail = new MasMedicalExaminationDetail();
			String str = "";
			if (req.getParameter("systemDiagnosis" + i) != null) {
				str = req.getParameter("systemDiagnosis" + i);
			} else {
				str = "";
			}
			if (str != "") {
				String systemDiagnosis = "";
				int lastIndex = str.indexOf("[");
				if (lastIndex > 0) {
					systemDiagnosis = str.substring(0, lastIndex);
				} else {
					systemDiagnosis = str;
				}
				int index1 = str.lastIndexOf("[");
				int index2 = str.lastIndexOf("]");
				int icdId = 0;
				// int icdId
				// =Integer.parseInt(str.substring((index1+1),index2));
				try {
					if (str != null && !str.equals("")) {
						icdId = Integer.parseInt(str.substring(
								(index1 + 1), index2));
					}
				} catch (NumberFormatException e) {

					e.printStackTrace();
				}
				
				 if(icdId>0){
					 MasIcd masIcd=new MasIcd();
					 masIcd.setId(icdId);
					 masMedicalExaminationDetail.setMasIcd(masIcd); 
				}
				 
				/*if (icdId > 0) {
					MasSystemDiagnosis sysDiagnosis = new MasSystemDiagnosis();
					sysDiagnosis.setId(icdId);
					masMedicalExaminationDetail
							.setSystemDiagnosis(sysDiagnosis);
				}*/
				masMedicalExaminationDetail.setPrincipal(systemDiagnosis);
				masMedicalExaminationDetail.setParticular("detail");
				masMedicalExaminationDetailsDisabilityList
						.add(masMedicalExaminationDetail);

			}
		}
		mapForDS.put("masMedicalExaminationDetailsDisabilityList",
				masMedicalExaminationDetailsDisabilityList);

		/*
		 * End of Code for Disability Date 01 March 2012
		 */

		Users moUser = new Users();
		moUser.setId(userId);
		masMedicalBoardProceedings.setMoUser(moUser);

		MasHospital hospital = new MasHospital();
		hospital.setId(hospitalId);
		masMedicalBoardProceedings.setHospital(hospital);

		MasCommand command = new MasCommand();
		command.setId(commandId);
		masMedicalBoardProceedings.setCommand(command);

		// if(req.getParameter("Labresult").equalsIgnoreCase("present")){
		/*
		 * commented by Dipali for maintaing status for mo
		 * 
		 * if(req.getParameter("Labresult").equalsIgnoreCase("present")&&
		 * data!=null) {
		 * 
		 * masMedicalBoardProceedings.setStatus("m");
		 * masMedicalBoardProceedings.setModate(new Date()); }else
		 * if(!masMedicalBoardProceedings
		 * .getStatus().equalsIgnoreCase("m")){
		 * masMedicalBoardProceedings.setStatus("p"); }
		 */
		// ----Added by dipali for maintaing status for mo
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();

		String date = (String) utilMap.get("currentDate");
		if (req.getParameter("Labresult").equalsIgnoreCase("present")
				&& data != null) {
			if (data.equalsIgnoreCase("validate")) {
				masMedicalBoardProceedings.setStatus("md");				
				masMedicalBoardProceedings.setDateOfCompletion(HMSUtil.convertStringTypeDateToDateType(date));
			} else {
				masMedicalBoardProceedings.setStatus("f");
			}
			masMedicalBoardProceedings.setModate(new Date());
		}else 	if (req.getParameter("specialValue") != null
					&& !(req.getParameter("specialValue").equals(""))
					&& req.getParameter("specialValue").equals("y")){
				masMedicalBoardProceedings.setStatus("f");
		
		
	}else if (!masMedicalBoardProceedings.getStatus()
				.equalsIgnoreCase("f")) {
			// masMedicalBoardProceedings.setStatus("p");
		}
		String investigationDataStatus = null;
		if (req.getParameter("investigationDataStatus") != null
				&& !req.getParameter("investigationDataStatus").equals("")) {
			investigationDataStatus = req
					.getParameter("investigationDataStatus");
		}

		if (req.getParameter("investigationReferToMH" + temp) != null
				&& !req.getParameter("investigationReferToMH" + temp)
						.equals("")) {
			investigationReferToMH = (req
					.getParameter("investigationReferToMH" + temp));
		}

		String incidents_during_your_service = "";
		String reasonWoundInjury = "";
		String MED_BOARD_HELD = "";
		String INJURY_REPORT = "";
		if (req.getParameter("incidents_during_your_service") != null
				&& !req.getParameter("incidents_during_your_service")
						.equals("")) {
			incidents_during_your_service = req
					.getParameter("incidents_during_your_service");
		}
		if (req.getParameter("reasonWoundInjury") != null
				&& !req.getParameter("reasonWoundInjury").equals("")) {
			reasonWoundInjury = req.getParameter("reasonWoundInjury");
		}
		if (req.getParameter("MED_BOARD_HELD") != null
				&& !req.getParameter("MED_BOARD_HELD").equals("")) {
			MED_BOARD_HELD = req.getParameter("MED_BOARD_HELD");
		}
		if (req.getParameter("INJURY_REPORT") != null
				&& !req.getParameter("INJURY_REPORT").equals("")) {
			INJURY_REPORT = req.getParameter("INJURY_REPORT");
		}
		masMedicalBoardProceedings
				.setIncidentsDuringYourService(incidents_during_your_service);
		masMedicalBoardProceedings.setReasonWoundInjury(reasonWoundInjury);

		masMedicalBoardProceedings.setMedBoardHeld(MED_BOARD_HELD);
		masMedicalBoardProceedings.setInjuryReport(INJURY_REPORT);

		masMedicalBoardProceedings.setMedicalType("MedicalBoard");

		/*
		 * Code for Medical Board Clinical Summary (dipali)
		 */
		String diagnosis1 = "";
		String diagnosis2 = "";
		String onsetDiag1 = "";
		String onsetDiag2 = "";
		String placeLastBoard = "";
		String presentConditions = "";
		String dateLastBoard = "";
		String medication = "";
		BigDecimal temperature = new BigDecimal(0);
		// String pulseRates="";
		String bp1 = "";
		String rr = "";
		String generalPhysicalExam = "";
		String cardiovascularSystem = "";

		String respairatorySystem = "";
		String gastroIntestinalSystem = "";
		String breakDown = "";
		String centralNervousSystem = "";

		String localExamination = "";
		String remarksClinical = "";
		// int referredToMhClinical=0;
		String referredToMhClinical = "";
		int opdDeptClinical = 0;
		if (req.getParameter("diagnosis1") != null
				&& !req.getParameter("diagnosis1").equals("")) {
			diagnosis1 = req.getParameter("diagnosis1");
		}
		if (req.getParameter("diagnosis2") != null
				&& !req.getParameter("diagnosis2").equals("")) {
			diagnosis2 = req.getParameter("diagnosis2");
		}
		if (req.getParameter("onsetDiag1") != null
				&& !req.getParameter("onsetDiag1").equals("")) {
			onsetDiag1 = req.getParameter("onsetDiag1");
		}
		if (req.getParameter("onsetDiag2") != null
				&& !req.getParameter("onsetDiag2").equals("")) {
			onsetDiag2 = req.getParameter("onsetDiag2");
		}
		if (req.getParameter("lastMedBoardPlace") != null
				&& !req.getParameter("lastMedBoardPlace").equals("")) {
			placeLastBoard = req.getParameter("lastMedBoardPlace");
		}
		if (req.getParameter("dateLastBoard") != null
				&& !req.getParameter("dateLastBoard").equals("")) {
			dateLastBoard = req.getParameter("dateLastBoard");
		}
		if (req.getParameter("presentConditions") != null
				&& !req.getParameter("presentConditions").equals("")) {
			presentConditions = req.getParameter("presentConditions");
		}
		if (req.getParameter("medication") != null
				&& !req.getParameter("medication").equals("")) {
			medication = req.getParameter("medication");
		}
		if (req.getParameter("temperature") != null
				&& !req.getParameter("temperature").equals("")) {
			temperature = new BigDecimal(req.getParameter("temperature"));
		}
		if (req.getParameter("bp1") != null
				&& !req.getParameter("bp1").equals("")) {
			bp1 = req.getParameter("bp1");
		}

		if (req.getParameter("generalPhysicalExam") != null
				&& !req.getParameter("generalPhysicalExam").equals("")) {
			generalPhysicalExam = req.getParameter("generalPhysicalExam");
		}
		if (req.getParameter("cardiovascularSystem") != null
				&& !req.getParameter("cardiovascularSystem").equals("")) {
			cardiovascularSystem = req.getParameter("cardiovascularSystem");
		}
		if (req.getParameter("respairatorySystem") != null
				&& !req.getParameter("respairatorySystem").equals("")) {
			respairatorySystem = req.getParameter("respairatorySystem");
		}

		if (req.getParameter("gastroIntestinalSystem") != null
				&& !req.getParameter("gastroIntestinalSystem").equals("")) {
			gastroIntestinalSystem = req
					.getParameter("gastroIntestinalSystem");
		}
		if (req.getParameter(NERVOUS_BRAKDOWN) != null
				&& !req.getParameter(NERVOUS_BRAKDOWN).equals("")) {
			breakDown = req.getParameter(NERVOUS_BRAKDOWN);
		}
		if (req.getParameter("centralNervousSystem") != null
				&& !req.getParameter("centralNervousSystem").equals("")) {
			centralNervousSystem = req.getParameter("centralNervousSystem");
		}

		if (req.getParameter("localExamination") != null
				&& !req.getParameter("localExamination").equals("")) {
			localExamination = req.getParameter("localExamination");
		}
		if (req.getParameter("remarksClinical") != null
				&& !req.getParameter("remarksClinical").equals("")) {
			remarksClinical = req.getParameter("remarksClinical");
		}
		if (req.getParameter("rr") != null
				&& !req.getParameter("rr").equals("")) {
			rr = req.getParameter("rr");
		}
		String specialValue="";
		if(req.getParameter("specialValue") != null
				&& !req.getParameter("specialValue").equals("")){
			specialValue=req.getParameter("specialValue");
		}
		/*
		 * if(req.getParameter("referredToMhClinical") != null &&
		 * !req.getParameter("referredToMhClinical").equals("")) {
		 * referredToMhClinical
		 * =Integer.parseInt(req.getParameter("referredToMhClinical")); } as
		 * discussed with anshu it will be free text
		 */
		if (req.getParameter("referredToMhClinical") != null
				&& !req.getParameter("referredToMhClinical").equals("")) {
			referredToMhClinical = req.getParameter("referredToMhClinical");
		}
		/*
		 * if(referredToMhClinical>0){ MasHospital masHospital=new
		 * MasHospital(); masHospital.setId(referredToMhClinical);
		 * masMedicalBoardProceedings.setClinicalReferMh(masHospital); }
		 */
		masMedicalBoardProceedings.setClinicalReferMh(referredToMhClinical);
		if (req.getParameter("opdDeptClinical") != null
				&& !req.getParameter("opdDeptClinical").equals("")) {
			opdDeptClinical = Integer.parseInt(req
					.getParameter("opdDeptClinical"));
		}
		String moRemarks = "";
		if (req.getParameter("moRemarks") != null
				&& !req.getParameter("moRemarks").equals("")) {
			moRemarks = req.getParameter("moRemarks");
		}
		String signedBy = "";
		if (req.getParameter("signedBy") != null
				&& !req.getParameter("signedBy").equals("")) {
			signedBy = req.getParameter("signedBy");
		}
		masMedicalBoardProceedings.setDiagnosis1Clini(diagnosis1);
		masMedicalBoardProceedings.setDiagnosis2Clini(diagnosis2);
		masMedicalBoardProceedings.setOnsetDiag1(onsetDiag1);
		masMedicalBoardProceedings.setOnsetDiag2(onsetDiag2);
		masMedicalBoardProceedings.setPlaceLastCatBoard(placeLastBoard);
		if (dateLastBoard != "") {
			masMedicalBoardProceedings.setLastBoardDate(HMSUtil
					.convertStringTypeDateToDateType(dateLastBoard));
		}
		masMedicalBoardProceedings.setPresentCondition(presentConditions);
		masMedicalBoardProceedings.setMedication(medication);
		masMedicalBoardProceedings.setTemprature(temperature);
		masMedicalBoardProceedings.setBp(bp1);

		masMedicalBoardProceedings
				.setGeneralPhysicalExam(generalPhysicalExam);
		masMedicalBoardProceedings
				.setCardiovascularSystem(cardiovascularSystem);
		masMedicalBoardProceedings.setRespiratorySystem(respairatorySystem);
		masMedicalBoardProceedings
				.setGastroIntestinalSystem(gastroIntestinalSystem);
		masMedicalBoardProceedings.setCentralNervousSystemMMHG(breakDown);
		masMedicalBoardProceedings
				.setCentralNervousSystem(centralNervousSystem);
		masMedicalBoardProceedings.setLocalExamination(localExamination);
		masMedicalBoardProceedings.setRemarksClinical(remarksClinical);
		masMedicalBoardProceedings.setRrClinical(rr);
		if (opdDeptClinical > 0) {
			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(opdDeptClinical);
			masMedicalBoardProceedings.setClinicalOpdDept(masDepartment);
		}
		masMedicalBoardProceedings.setSpecialistRefer(specialValue);
		/*
		 * End of Code for Medical Board Clinical Summary
		 */
		masMedicalBoardProceedings.setRemarks(moRemarks);
		masMedicalBoardProceedings.setSignedBy(signedBy);
		mapForDS.put("masMedicalBoardProceedings",
				masMedicalBoardProceedings);
		mapForDS.put("chargeCodeIdList", chargeCodeIdList);
		mapForDS.put("investigationReferToMHList",
				investigationReferToMHList);
		mapForDS.put("investResultList", investResultList);
		mapForDS.put("investigationDataStatus", investigationDataStatus);
		mapForDS.put("quantityList", quantityList);
		mapForDS.put("patientInvestigationdetailsIdList",
				patientInvestigationdetailsIdList);
		mapForDS.put("dgOrderdtIdList", dgOrderdtIdList);
		mapForDS.put("clinicalNotes1", clinicalNotes1);
		mapForDS.put("lastChangedBy", lastChangedBy);
		mapForDS.put("lastChangedDate", lastChangedDate);
		mapForDS.put("lastChangedTime", lastChangedTime);
		mapForDS.put("familyHistoryArray", familyHistoryArray);
		mapForDS.put("hospitalId", hospitalId);
		mapForDS.put("deptId", deptId);
		mapForDS.put("empId", empId);
		mapForDS.put("userId", userId);
		mapForDS.put("hinId", hinId);
		mapForDS.put("visitId", visitId);
		mapForDS.put("medExamId", medExamId);
		mapForDS.put("data", data);
		mapForDS.put("Labresult", req.getParameter("Labresult"));
		mapForDS.put("patientInvestigationHeaderId",
				patientInvestigationHeaderId);
		mapForDS.put("dgOrderhdId", dgOrderhdId);
		mapForDS.put("investigationReferToMH ", investigationReferToMH);
		successfullyAdded = medicalBoardHandlerService
				.updateMedicalBoardMO16(mapForDS);

		message = "Record Updated Successfully!!";
		jsp = MEDICAL_BOARD_EXAM_MSG;
		if (!successfullyAdded) {
			message = "Some Problem Occured !!!";
			jsp = MEDICAL_BOARD_ERROR_MSG;
		} else if (data != null) {
			if (req.getParameter("Labresult")
					.equalsIgnoreCase("NotPresent")) {
				message = "Lab Result is not Found ! You Can Forward to Medical Officer After Lab Result.";

			} else {
				message = "Record  Forwarded Successfully !Print Report.";
			}

		}

	} else {
		message = "You can forward to Medical Officer only after entering Investigation or Dental Reports";
		jsp = MEDICAL_BOARD_EXAM_MSG;
	}
	String medicalEntryNo = "";
	String medicalEntryNo1 = "";
	String userName = "";
	String userName1 = "";
	jsp += ".jsp";
	map.put("printReport", "yes");
	map.put("medicalEntryNo", medicalEntryNo);
	map.put("medicalEntryNo1", medicalEntryNo1);
	map.put("medicalType", req.getParameter("medicalType"));
	map.put("medicalExamType", req.getParameter("medicalExamType"));
	map.put("contentJsp", jsp);
	map.put("message", message);
	map.put("medExamId", medExamId);
	map.put("hinNoForreport", req.getParameter("hinNoForreport"));
	// map.put("visitNumberForReport",
	// Integer.parseInt(req.getParameter("visitNumberForReport")));
	map.put("serviceNo", serviceNo);
	map.put("visitId", visitId);
	return new ModelAndView("indexB", "map", map);
}

// --------Approving Authority Form-16 -By Dipali
public ModelAndView validateAppAuthForm16(HttpServletRequest request,
		HttpServletResponse response) {
	String jsp = "";
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	Box box = HMSUtil.getBox(request);
	Map<String, Object> map = new HashMap<String, Object>();
	int visitId = 0;
	int medExamId = 0;
	String jspheading = null;

	if (request.getParameter("visitId") != null
			&& !request.getParameter("visitId").equals("0")) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	if (request.getParameter("medExamType") != null
			&& !request.getParameter("medExamType").equals("")) {
		jspheading = request.getParameter("medExamType");
	}
	if (request.getParameter("medExamId") != null
			&& !request.getParameter("medExamId").equals("0")) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"));
	}
	MasMedicalExaminationReportOnEntry masMedicalBoardProceedings = new MasMedicalExaminationReportOnEntry();
	masMedicalBoardProceedings = medicalBoardHandlerService
			.loadMedicalExamObj(medExamId);
	if (request.getParameter(AUTH_REMARKS) != null
			&& !request.getParameter(AUTH_REMARKS).equals("")) {
		masMedicalBoardProceedings.setApprovAuthRemarks(request
				.getParameter(AUTH_REMARKS));
	}
	if (request.getParameter(SIGNED_BY) != null
			&& !request.getParameter(SIGNED_BY).equals("")) {
		masMedicalBoardProceedings.setApprovAuthSignedBy(request
				.getParameter(SIGNED_BY));
	}
	/*
	 * Code By Dipali Status m MA Waiting List (Direct from visit/reception)
	 * f MO Waiting List (forwarded from MA) md Commanding Waiting List
	 * (validate from MO) cd MB Opinion Waiting List (validate from
	 * Commanding) v Approving Authority Waiting List (validate from from MB
	 * Opinion) ap Confirming Authority Waiting List (validate from from
	 * Approving Authority) p Accepting Authority validated (validate from
	 * from Confirming Authority) fr Rejected By Mo (Display In MA Waiting
	 * List) mr Rejected By Approving Authority(Display In MB Opinion
	 * Waiting List) ar Rejected Confirming Authority (Display In Approving
	 * Authority Waiting List) pr Rejected Accepting Authority (Display In
	 * Confirming Authority Waiting List)
	 */
	Map<String, Object> utilMap = new HashMap<String, Object>();
	utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();

	String date = (String) utilMap.get("currentDate");
	masMedicalBoardProceedings.setAppAuthDate(HMSUtil
			.convertStringTypeDateToDateType(date));
	masMedicalBoardProceedings.setStatus("ap");
	HttpSession session = request.getSession();
	int deptId = (Integer) session.getAttribute("deptId");
	int hospitalId = 0;
	if (session.getAttribute(HOSPITAL_ID) != null) {
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	}
	mapForDS.put("hospitalId", hospitalId);
	mapForDS.put("visitId", visitId);
	mapForDS.put("deptId", deptId);
	mapForDS.put("medExamId", medExamId);
	mapForDS.put("masMedicalBoardProceedings", masMedicalBoardProceedings);
	synchronized (session) {
		map = medicalBoardHandlerService.validateAppAuthForm16Jsp(mapForDS);
	}
	boolean falg = false;
	if (map.get("falg") != null) {
		falg = (Boolean) map.get("falg");
	}
	String message = "";
	if (falg) {
		message = "Approving Authority Validated !Print Report";
	} else {
		message = "Some Problem Occurred.";
	}
	map.put("medicalType", request.getParameter("medicalType"));
	map.put("medicalExamType", request.getParameter("medicalExamType"));
	jsp = MEDICAL_BOARD_EXAM_MSG;
	jsp += ".jsp";
	title = "Approving Authority Waiting List";
	map.put("medExamId", medExamId);
	map.put("printReport", "yes");
	map.put("message", message);
	map.put("visitId", visitId);
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("indexB", "map", map);
}

public ModelAndView validateConfAuthForm16Jsp(HttpServletRequest request,
		HttpServletResponse response) {
	String jsp = "";
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	Box box = HMSUtil.getBox(request);
	Map<String, Object> map = new HashMap<String, Object>();
	int visitId = 0;
	int medExamId = 0;
	String jspheading = null;

	if (request.getParameter("visitId") != null
			&& !request.getParameter("visitId").equals("0")) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	if (request.getParameter("medExamType") != null
			&& !request.getParameter("medExamType").equals("")) {
		jspheading = request.getParameter("medExamType");
	}
	if (request.getParameter("medExamId") != null
			&& !request.getParameter("medExamId").equals("0")) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"));
	}
	MasMedicalExaminationReportOnEntry masMedicalBoardProceedings = new MasMedicalExaminationReportOnEntry();
	masMedicalBoardProceedings = medicalBoardHandlerService
			.loadMedicalExamObj(medExamId);
	if (request.getParameter(CONF_REMARKS) != null
			&& !request.getParameter(CONF_REMARKS).equals("")) {
		masMedicalBoardProceedings.setConfirmRemarks(request
				.getParameter(CONF_REMARKS));
	}
	if (request.getParameter(SIGNED_BY) != null
			&& !request.getParameter(SIGNED_BY).equals("")) {
		masMedicalBoardProceedings.setConfirmSignedBy(request
				.getParameter(SIGNED_BY));
	}
	/*
	 * Code By Dipali Status m MA Waiting List (Direct from visit/reception)
	 * f MO Waiting List (forwarded from MA) md Commanding Waiting List
	 * (validate from MO) cd MB Opinion Waiting List (validate from
	 * Commanding) v Approving Authority Waiting List (validate from from MB
	 * Opinion) ap Confirming Authority Waiting List (validate from from
	 * Approving Authority) a Accepting Authority validated (validate from
	 * from Confirming Authority) fr Rejected By Mo (Display In MA Waiting
	 * List) mr Rejected By Approving Authority(Display In MB Opinion
	 * Waiting List) ar Rejected Confirming Authority (Display In Approving
	 * Authority Waiting List) pr Rejected Accepting Authority (Display In
	 * Confirming Authority Waiting List)
	 */
	Map<String, Object> utilMap = new HashMap<String, Object>();
	utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();

	String date = (String) utilMap.get("currentDate");
	masMedicalBoardProceedings.setConfirmDate(HMSUtil
			.convertStringTypeDateToDateType(date));
	masMedicalBoardProceedings.setStatus("cn");
	HttpSession session = request.getSession();
	int deptId = (Integer) session.getAttribute("deptId");
	int hospitalId = 0;
	if (session.getAttribute(HOSPITAL_ID) != null) {
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	}
	map.put("printReport", "yes");
	mapForDS.put("hospitalId", hospitalId);
	mapForDS.put("visitId", visitId);
	mapForDS.put("deptId", deptId);
	mapForDS.put("medExamId", medExamId);
	mapForDS.put("masMedicalBoardProceedings", masMedicalBoardProceedings);
	synchronized (session) {
		map = medicalBoardHandlerService
				.validateConfAuthForm16Jsp(mapForDS);
	}
	boolean falg = false;
	if (map.get("falg") != null) {
		falg = (Boolean) map.get("falg");
	}
	String message = "";
	if (falg) {
		message = "Confirming Authority Validated !Print Report.";
	} else {
		message = "Some Problem Occurred.";
	}
	map.put("medicalType", request.getParameter("medicalType"));
	map.put("medicalExamType", request.getParameter("medicalExamType"));
	jsp = MEDICAL_BOARD_EXAM_MSG;
	jsp += ".jsp";
	title = "Confirm Authority Waiting List";
	map.put("medExamId", medExamId);
	map.put("printReport", "yes");
	map.put("message", message);
	map.put("visitId", visitId);
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("indexB", "map", map);
}

public ModelAndView validateAcceptAuthForm16Jsp(HttpServletRequest request,
		HttpServletResponse response) {
	String jsp = "";
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	Box box = HMSUtil.getBox(request);
	Map<String, Object> map = new HashMap<String, Object>();
	int visitId = 0;
	int medExamId = 0;
	String jspheading = null;

	if (request.getParameter("visitId") != null
			&& !request.getParameter("visitId").equals("0")) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	if (request.getParameter("medExamType") != null
			&& !request.getParameter("medExamType").equals("")) {
		jspheading = request.getParameter("medExamType");
	}
	if (request.getParameter("medExamId") != null
			&& !request.getParameter("medExamId").equals("0")) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"));
	}
	MasMedicalExaminationReportOnEntry masMedicalBoardProceedings = new MasMedicalExaminationReportOnEntry();
	masMedicalBoardProceedings = medicalBoardHandlerService
			.loadMedicalExamObj(medExamId);
	if (request.getParameter(ACCEPT_REMARKS) != null
			&& !request.getParameter(ACCEPT_REMARKS).equals("")) {
		masMedicalBoardProceedings.setAcceptRemarks(request
				.getParameter(ACCEPT_REMARKS));
	}
	if (request.getParameter(SIGNED_BY) != null
			&& !request.getParameter(SIGNED_BY).equals("")) {
		masMedicalBoardProceedings.setAcceptSignedBy(request
				.getParameter(SIGNED_BY));
	}
	/*
	 * Code By Dipali Status m MA Waiting List (Direct from visit/reception)
	 * f MO Waiting List (forwarded from MA) md Commanding Waiting List
	 * (validate from MO) cd MB Opinion Waiting List (validate from
	 * Commanding) v Approving Authority Waiting List (validate from from MB
	 * Opinion) ap Confirming Authority Waiting List (validate from from
	 * Approving Authority) p Accepting Authority validated (validate from
	 * from Confirming Authority) fr Rejected By Mo (Display In MA Waiting
	 * List) mr Rejected By Approving Authority(Display In MB Opinion
	 * Waiting List) ar Rejected Confirming Authority (Display In Approving
	 * Authority Waiting List) pr Rejected Accepting Authority (Display In
	 * Confirming Authority Waiting List)
	 */
	Map<String, Object> utilMap = new HashMap<String, Object>();
	utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();

	String date = (String) utilMap.get("currentDate");
	masMedicalBoardProceedings.setAcceptDate(HMSUtil
			.convertStringTypeDateToDateType(date));
	masMedicalBoardProceedings.setDateOfCompletion(HMSUtil
			.convertStringTypeDateToDateType(date));
	masMedicalBoardProceedings.setStatus("p");
	HttpSession session = request.getSession();
	int deptId = (Integer) session.getAttribute("deptId");
	int hospitalId = 0;
	if (session.getAttribute(HOSPITAL_ID) != null) {
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	}
	mapForDS.put("hospitalId", hospitalId);
	mapForDS.put("visitId", visitId);
	mapForDS.put("deptId", deptId);
	mapForDS.put("medExamId", medExamId);
	mapForDS.put("masMedicalBoardProceedings", masMedicalBoardProceedings);
	synchronized (session) {
		map = medicalBoardHandlerService
				.validateAcceptAuthForm16Jsp(mapForDS);
	}
	boolean falg = false;
	if (map.get("falg") != null) {
		falg = (Boolean) map.get("falg");
	}
	String message = "";
	if (falg) {
		message = "Accepting Authority Validated !Print Report.";
	} else {
		message = "Some Problem Occurred.";
	}
	map.put("medicalType", request.getParameter("medicalType"));
	map.put("medicalExamType", request.getParameter("medicalExamType"));
	jsp = MEDICAL_BOARD_EXAM_MSG;
	jsp += ".jsp";
	title = "Accepting Authority Waiting List";
	map.put("medExamId", medExamId);
	map.put("printReport", "yes");
	map.put("visitId", visitId);
	map.put("message", message);
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("indexB", "map", map);
}

public ModelAndView rejectMBForm16Entry(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();

	int visitId = 0;
	int medExamId = 0;
	if (request.getParameter("visitId") != null) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	if (request.getParameter("medExamId") != null) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"));
	}
	HttpSession session = request.getSession();
	int deptId = (Integer) session.getAttribute("deptId");
	int hospitalId = 0;
	if (session.getAttribute(HOSPITAL_ID) != null) {
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	}
	String flag = "";
	if (request.getParameter("flag") != null) {
		flag = request.getParameter("flag").trim();
	}
	String authRemarks = "";
	String confirmRemarks = "";
	String moRemarks = "";
	String acceptRemarks = "";
	if (request.getParameter("moRemarks") != null) {
		moRemarks = request.getParameter("moRemarks").trim();
	}
	if (request.getParameter(AUTH_REMARKS) != null) {
		authRemarks = request.getParameter(AUTH_REMARKS).trim();
	}
	if (request.getParameter(CONF_REMARKS) != null) {
		confirmRemarks = request.getParameter(CONF_REMARKS).trim();
	}
	if (request.getParameter(ACCEPT_REMARKS) != null) {
		acceptRemarks = request.getParameter(ACCEPT_REMARKS).trim();
	}
	Map<String, Object> mapDetails = new HashMap<String, Object>();
	mapDetails.put("visitId", visitId);
	mapDetails.put("medExamId", medExamId);
	mapDetails.put("hospitalId", hospitalId);
	mapDetails.put("moRemarks", moRemarks);
	mapDetails.put("authRemarks", authRemarks);
	mapDetails.put("confirmRemarks", confirmRemarks);
	mapDetails.put("acceptRemarks", acceptRemarks);
	/*
	 * Code By Dipali Status m MA Waiting List (Direct from visit/reception)
	 * f MO Waiting List (forwarded from MA) md Commanding Waiting List
	 * (validate from MO) cd MB Opinion Waiting List (validate from
	 * Commanding) v Approving Authority Waiting List (validate from from MB
	 * Opinion) ap Confirming Authority Waiting List (validate from from
	 * Approving Authority) p Accepting Authority validated (validate from
	 * from Confirming Authority) fr Rejected By Mo (Display In MA Waiting
	 * List) nr Rejected By Medical Board Opinion (Display In Commanding
	 * Waiting List) mr Rejected By Approving Authority(Display In MB
	 * Opinion Waiting List) ar Rejected Confirming Authority (Display In
	 * Approving Authority Waiting List) pr Rejected Accepting Authority
	 * (Display In Confirming Authority Waiting List)
	 */
	String rejectStatus = "";
	if (request.getParameter("rejectStatus") != null) {
		rejectStatus = request.getParameter("rejectStatus").trim();
	}
	mapDetails.put("rejectStatus", rejectStatus);
	map = medicalBoardHandlerService.rejectMBForm16Entry(mapDetails);
	MasMedicalExaminationReportOnEntry masMedicalBoardProceedings = new MasMedicalExaminationReportOnEntry();
	masMedicalBoardProceedings = medicalBoardHandlerService
			.loadMedicalExamObj(medExamId);
	String jsp = "";
	String title = "";
	
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	mapForDS.put("hospitalId", hospitalId);
	if (rejectStatus.equalsIgnoreCase("fr")) {
		map = medicalBoardHandlerService
				.showMedicalOfficerAppointmentInitial(mapForDS);
		jsp = "mb_medicalBoardInitialMedicalOfficerAppointment";
	} else if (rejectStatus.equalsIgnoreCase("nr")) {
		map = medicalBoardHandlerService
				.showMBCommandOfficerWaitList(hospitalId);
		jsp = "mb_medicalBoardCommandingOfficer";
	} else if (rejectStatus.equalsIgnoreCase("mr")) {
		map = medicalBoardHandlerService
				.showMedicalBoardOpinionWaitList(hospitalId);
		jsp = "mb_medicalBoard";
	} else if (rejectStatus.equalsIgnoreCase("ar")) {
		map = medicalBoardHandlerService
				.showMBApproveAuthWaitList(hospitalId);
		jsp = "mb_medicalBoardApprovingAuthority";
	} else if (rejectStatus.equalsIgnoreCase("pr")) {
		map = medicalBoardHandlerService
				.showMedicalBoardConfirmingAuthority(hospitalId);
		jsp = "mb_medicalBoardConfirmingAuthority";
	}

	jsp += ".jsp";
	title = "Medical Board Proceeding Search";
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("index", "map", map);
}

public ModelAndView generateMedicalBoardForm16(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> detailsMap = new HashMap<String, Object>();
	Map<String, Object> parameters = new HashMap<String, Object>();
	detailsMap = medicalBoardHandlerService.getConnectionForReport();
	int visit_id = 0;
	if (request.getParameter("visit_id") != null
			&& !(request.getParameter("visit_id").equals(""))) {
		visit_id = Integer.parseInt(request.getParameter("visit_id"));
	}
	parameters.put("visit_id", visit_id);
	parameters.put("SUBREPORT_DIR", getServletContext().getRealPath(
			"/reports/"));
	HMSUtil.generateReport("mb_form16_report", parameters,
			(Connection) detailsMap.get("conn"), response,
			getServletContext());
	return null;
}
public ModelAndView generateAFMSFR79eport(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> detailsMap = new HashMap<String, Object>();
	Map<String, Object> parameters = new HashMap<String, Object>();
	detailsMap = medicalBoardHandlerService.getConnectionForReport();
	int visit_id = 0;
	if (request.getParameter("visit_id") != null
			&& !(request.getParameter("visit_id").equals(""))) {
		visit_id = Integer.parseInt(request.getParameter("visit_id"));
	}
	parameters.put("visit_id", visit_id);
	
	HMSUtil.generateReport("mb_form79_report", parameters,
			(Connection) detailsMap.get("conn"), response,
			getServletContext());
	return null;
}

// ------------------- Dinesh Dubey -----------------------------------

public ModelAndView medicalBoardDetails(HttpServletRequest request,
		HttpServletResponse response) {
	String jsp = "";
	Map<String, Object> map = new HashMap<String, Object>();
	jsp = "MedicalBoardDetailsData";
	jsp = jsp + ".jsp";
	map.put("contentJsp", jsp);

	return new ModelAndView("indexB", "map", map);
}

public ModelAndView getMedicalBoardDetail(HttpServletRequest request,
		HttpServletResponse response) {
	String jsp = "";
	String serviceNo = null;
	Map<String, Object> mapfordata = new HashMap<String, Object>();
	Map<String, Object> map = new HashMap<String, Object>();
	if (request.getParameter(SERVICE_NO) != null) {
		serviceNo = request.getParameter(SERVICE_NO);
	}
	HttpSession session = request.getSession();
	Users user = (Users) session.getAttribute("users");
	int empId = user.getEmployee().getId();
	// parameters.put("visit_id", visit_id);
	mapfordata.put("serviceNo", serviceNo);
	mapfordata.put("empId", empId);
	// map = medicalBoardHandlerService.getMedicalBoardDetail(mapfordata);
	// jsp = "medicalBoardDetailsForSearch.jsp";
	map = medicalBoardHandlerService.getMedicalExamDetails(mapfordata);
	jsp = "medicalExamDetailsForSearch.jsp";
	map.put("contentJsp", jsp);

	return new ModelAndView("indexB", "map", map);
}

public ModelAndView getMedicalBoardDetails(HttpServletRequest request,
		HttpServletResponse response) {
	String jsp = "";
	String serviceNo = null;
	Map<String, Object> mapfordata = new HashMap<String, Object>();
	Map<String, Object> map = new HashMap<String, Object>();
	if (request.getParameter(SERVICE_NO) != null) {
		serviceNo = request.getParameter(SERVICE_NO);
	}
	mapfordata.put("serviceNo", serviceNo);
	map = medicalBoardHandlerService
			.getMedicalBoardDetailsForSearch(mapfordata);
	jsp = "MedicalBoardDetailsData";
	jsp = jsp + ".jsp";
	map.put("contentJsp", jsp);
	return new ModelAndView("indexB", "map", map);
}

public ModelAndView validateMedExamSpecialOpinion(
		HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	Box box = HMSUtil.getBox(request);
	HttpSession session = request.getSession();
	int userId = 0;
	String medicalType = null;
	Users user = (Users) session.getAttribute("users");
	userId = user.getId();
	int medExamId = 0;
	if (request.getParameter("medExamId") != null
			&& !request.getParameter("medExamId").equals("0")) {
		medExamId = Integer.parseInt(request.getParameter("medExamId")
				.toString());
	}
	String directFlag = "";
	if (request.getParameter("directFlag") != null) {
		directFlag = request.getParameter("directFlag");
	}
	int visitId = 0;
	if (request.getParameter("visitId") != null) {
		visitId = Integer.parseInt(request.getParameter("visitId")
				.toString());
	}
	box.put("userId", userId);
	int hospitalId = 0;
	if (session.getAttribute(HOSPITAL_ID) != null) {
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	}
	box.put("hospitalId", hospitalId);
	int hinId = 0;
	if (request.getParameter("hinId") != null
			&& request.getParameter("hinId") != "") {
		hinId = Integer.parseInt(request.getParameter("hinId"));
	}
	// String orderNo="";
	int orderNo = 0;
	if (request.getParameter("dgOrderhdId") != null
			&& request.getParameter("dgOrderhdId") != "") {
		orderNo = Integer.parseInt(request.getParameter("dgOrderhdId"));
	}
	map = medicalBoardHandlerService
			.updateMedicalExamEntryBySpecialist(box);
	boolean updated = false;
	if (map.get("successfullyAdded") != null) {
		updated = (Boolean) map.get("successfullyAdded");
	}
	boolean successfullyAdded = false;

	if (updated) {
		map = medicalExamHandlerService.validateMedExamSpecialOpinion(box);
	}
	if (map.get("successfullyAdded") != null) {
		successfullyAdded = (Boolean) map.get("successfullyAdded");
	}
	String jsp = "";

	if (directFlag.equalsIgnoreCase("D")) {
		/*
		 * map =
		 * medicalBoardHandlerService.showMedicalBoardSpecialist(hospitalId
		 * );
		 * 
		 * title = "Medical Board  Specialist Opinion Waiting List"; jsp =
		 * "mb_medicalBoardSpecialist"; jsp += ".jsp";
		 */
		String message = "Specialist Opinion Validated Successfully....";
		map.put("message", message);
		map.put("medExamId", medExamId);
		map.put("visitId", visitId);
		map.put("hinId", hinId);
		map.put("dgOrderhdOrderNo", orderNo);
		jsp = "mb_medicalExamSpMsg";
		jsp = jsp + ".jsp";

		map.put("contentJsp", jsp);
		map.put("directFlag", "D");
		return new ModelAndView("index", "map", map);
	} else {
		// String message="Specialist Opinion Validated Successfully....";
		String message = "";
		map.put("message", message);
		jsp = "mb_medicalExamSpMsg";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("directFlag", "N");
		map.put("hinId", hinId);
		map.put("dgOrderhdOrderNo", orderNo);
		return new ModelAndView("indexB", "map", map);
	}

	// return new ModelAndView("indexB", "map", map);
}

/*
 * Code for forward Medical Exam To Special Opinion Code by Mukesh 03 Apr
 * 2012
 */
public void forwardMedExamSpecialOpinion(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	Box box = HMSUtil.getBox(request);
	HttpSession session = request.getSession();
	int userId = 0;
	String medicalType = null;
	Users user = (Users) session.getAttribute("users");
	userId = user.getId();
	int medExamId = 0;
	if (request.getParameter("medExamId") != null
			&& !request.getParameter("medExamId").equals("0")) {
		medExamId = Integer.parseInt(request.getParameter("medExamId")
				.toString());
	}
	int visitId = 0;
	if (request.getParameter("visitId") != null
			&& !request.getParameter("visitId").equals("0")) {
		visitId = Integer.parseInt(request.getParameter("visitId")
				.toString());
	}
	box.put("userId", userId);
	String flagForward = "";
	if (request.getParameter("flagForward") != null
			&& !request.getParameter("flagForward").equals("")) {
		flagForward = request.getParameter("flagForward");
	}
	box.put("flagForward", flagForward);
	int hospitalId = 0;
	if (session.getAttribute(HOSPITAL_ID) != null) {
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	}

	map = medicalExamHandlerService.validateMedExamSpecialOpinion(box);
	boolean successfullyAdded = false;

	if (map.get("successfullyAdded") != null) {
		successfullyAdded = (Boolean) map.get("successfullyAdded");
	}
	String message = "";
	if (flagForward.equalsIgnoreCase("s")) {
		message = "Forwarded to Specialist Successfully....";
	} else {
		message = "Specialist Opinion Validated Successfully....";
	}
	map.put("message", message);

	try {
		StringBuffer sb = new StringBuffer();
		sb.append("<item>");
		sb.append("<msg>" + message + "</msg>");
		sb.append("</item>");
		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		response.getWriter().write(
				"<?xml version='1.0' encoding='ISO-8859-1'?>");
		response.getWriter().write("<items>");
		response.getWriter().write(sb.toString());
		response.getWriter().write("</items>");
	} catch (IOException e) {
		e.printStackTrace();
	}
	/*
	 * String jsp = ""; jsp = "mb_medicalExamSpMsg"; jsp = jsp + ".jsp";
	 * map.put("contentJsp", jsp); return new
	 * ModelAndView("indexB","map",map);
	 */
}

// ----Method written by Kiran

public ModelAndView ShowMID_MedicalBoard(HttpServletRequest request,
		HttpServletResponse response) {
	String jsp = "";

	Map map = new HashMap();
	Box box = HMSUtil.getBox(request);
	int visitId = 0;
	String search = "false";

	jsp = "MID_MedicalBoard";
	jsp += ".jsp";

	map.put("contentJsp", jsp);
	map.put("search", search);
	// map.put("title", title);
	return new ModelAndView("index", "map", map);

}

public ModelAndView getPatientDetailAndAddMedicalBoard(
		HttpServletRequest req, HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	HttpSession session = req.getSession();
	String serviceNo = "";
	if (req.getParameter(SERVICE_NO) != null
			&& !(req.getParameter(SERVICE_NO).equals(""))) {
		serviceNo = req.getParameter(SERVICE_NO);
	}

	map = medicalBoardHandlerService
			.getPatientDetailAndAddMedicalBoard(serviceNo);
	String jsp = "";
	jsp = "medicalBoardAddDetailsJsp.jsp";
	map.put("contentJsp", jsp);

	return new ModelAndView("indexB", "map", map);

}

public ModelAndView addOldMedicalBoardData(HttpServletRequest req,
		HttpServletResponse response) {
	Map<String, Object> dataMap = new HashMap<String, Object>();
	Map<String, Object> map = new HashMap<String, Object>();

	String allergies = "";
	HttpSession session = req.getSession();
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	dataMap.put("hospitalId", hospitalId);
	int userId = 0;
	try {
		Users user = (Users) session.getAttribute("users");
		userId = user.getId();
		dataMap.put("user", user);
		if (req.getParameter(SERVICE_NO) != null) {
			String serviceNo = req.getParameter(SERVICE_NO);
			dataMap.put("serviceNo", serviceNo);
		}
		if (req.getParameter("hinId") != null) {
			int hinId = Integer.parseInt("" + req.getParameter("hinId"));
			dataMap.put("hinId", hinId);
		}
		if (req.getParameter("genderId") != null) {
			int genderId = Integer.parseInt(""
					+ req.getParameter("genderId"));
			dataMap.put("genderId", genderId);
		}
		if (req.getParameter("rankId") != null) {
			int rankId = Integer.parseInt("" + req.getParameter("rankId"));
			dataMap.put("rankId", rankId);
		}
		if (req.getParameter("patientName") != null) {
			String patientName = req.getParameter("patientName");
			dataMap.put("patientName", patientName);
		}
		if (req.getParameter("tradeId") != null
				&& !req.getParameter("tradeId").equals("")) {
			int tradeId = Integer
					.parseInt("" + req.getParameter("tradeId"));
			dataMap.put("tradeId", tradeId);
		}
		if (req.getParameter("genderId") != null) {
			int genderId = Integer.parseInt(""
					+ req.getParameter("genderId"));
			dataMap.put("genderId", genderId);
		}

		if (req.getParameter(DATE_COMMENCEMENT) != null
				&& !req.getParameter(DATE_COMMENCEMENT).equals("")) {
			Date dateofcommun = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(DATE_COMMENCEMENT));
			dataMap.put("dateofcommun", dateofcommun);
		}

		if (req.getParameter(PRESENT_MEDICAL_CATEGORY) != null
				&& !req.getParameter(PRESENT_MEDICAL_CATEGORY).equals("0")) {
			Category categ2 = new Category();
			categ2.setCategoryid(Integer.parseInt(req
					.getParameter(PRESENT_MEDICAL_CATEGORY)));
			dataMap.put("presentMedicalCatId", categ2);
		}
		if (req.getParameter(LAST_AME) != null) {
			String lastAmePlace = req.getParameter(LAST_AME);
			dataMap.put("lastAmePlace", lastAmePlace);
		}
		if (req.getParameter("commandId") != null) {
			int commandId = Integer.parseInt(""
					+ req.getParameter("commandId"));
			dataMap.put("commandId", commandId);
		}

		if (req.getParameter(REPORTED_DATE) != null
				&& !req.getParameter(REPORTED_DATE).equals("")) {
			Date reportedDate = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(REPORTED_DATE));
			dataMap.put("reportedDate", reportedDate);
		}
		if (req.getParameter(DATE_OF_AME) != null
				&& !req.getParameter(DATE_OF_AME).equals("")) {
			Date lastAmeDate = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(DATE_OF_AME));
			dataMap.put("lastAmeDate", lastAmeDate);
		}

		if (req.getParameter("period") != null) {
			String period = req.getParameter("period");
			dataMap.put("period", period);
		}
		if (req.getParameter("waiver") != null) {
			String waiver = req.getParameter("waiver");
			dataMap.put("waiver", waiver);
		}
		if (req.getParameter("medExamType") != null) {
			String medExamType = req.getParameter("medExamType");
			dataMap.put("medExamType", medExamType);
		}

		if (req.getParameter("unitId") != null) {
			int unitId = Integer.parseInt("" + req.getParameter("unitId"));
			dataMap.put("unitId", unitId);
		}
		BigDecimal height = new BigDecimal(0);
		if (req.getParameter(HEIGHT_WITHOUT_SHOOSE) != null
				&& !(req.getParameter(HEIGHT_WITHOUT_SHOOSE).equals(""))) {
			height = (new BigDecimal(req
					.getParameter(HEIGHT_WITHOUT_SHOOSE)));

		}
		dataMap.put("height", height);
		BigDecimal weight = new BigDecimal(0);
		if (req.getParameter(ACTUAL_WEIGHT) != null
				&& !(req.getParameter(ACTUAL_WEIGHT).equals(""))) {
			weight = (new BigDecimal(req.getParameter(ACTUAL_WEIGHT)));

		}
		dataMap.put("weight", weight);
		BigDecimal idealWeight = new BigDecimal(0);
		if (req.getParameter(IDEAL_WEIGHT) != null
				&& !(req.getParameter(IDEAL_WEIGHT).equals(""))) {
			idealWeight = (new BigDecimal(req.getParameter(IDEAL_WEIGHT)));

		}
		dataMap.put("idealWeight", idealWeight);
		BigDecimal overWeight = new BigDecimal(0);
		if (req.getParameter(OVER_WEIGHT) != null
				&& !(req.getParameter(OVER_WEIGHT).equals(""))) {
			overWeight = (new BigDecimal(req.getParameter(OVER_WEIGHT)));

		}
		dataMap.put("overWeight", overWeight);
		if (req.getParameter("smokerMore10") != null) {
			if (req.getParameter("smokerMore10").equalsIgnoreCase("y")) {
				dataMap.put("smokerMore10", "y");
			} else {
				dataMap.put("smokerMore10", "n");
			}
		} else {
			dataMap.put("smokerMore10", "n");
		}
		if (req.getParameter("smokerLess10") != null) {
			if (req.getParameter("smokerLess10").equalsIgnoreCase("y")) {
				dataMap.put("smokerLess10", "y");
			} else {
				dataMap.put("smokerLess10", "n");
			}
		} else {
			dataMap.put("smokerLess10", "n");
		}
		if (req.getParameter("alcohol") != null) {
			String alcohol = req.getParameter("alcohol");
			dataMap.put("alcohol", alcohol);
		}
		if (req.getParameter("allergies") != null) {
			allergies = req.getParameter("allergies");
			dataMap.put("allergies", allergies);
		}
		int deptId = 0;
		if (req.getParameter("deptId") != null) {
			deptId = Integer.parseInt(req.getParameter("deptId"));
			dataMap.put("deptId", deptId);
		}

		// -----------------------------------------------------------------------
		String[] familyHistoryArray = null;
		if (req.getParameterValues(FM_DM) != null
				&& !(req.getParameterValues(FM_DM).equals(""))) {
			familyHistoryArray = (String[]) req.getParameterValues(FM_DM);
		}
		dataMap.put("familyHistoryArray", familyHistoryArray);
		String otherFamilyHistory = "";
		if (req.getParameter("otherFamilyHistory") != null) {
			otherFamilyHistory = req.getParameter("otherFamilyHistory");
			dataMap.put("otherFamilyHistory", otherFamilyHistory);
		}

		// -----------------------------------------------------------------------------------------------

		String lastChangedBy = "";
		Date lastChangedDate = null;
		String lastChangedTime = "";
		if (req.getParameter(LAST_CHANGED_BY) != null) {
			lastChangedBy = req.getParameter(LAST_CHANGED_BY);
			dataMap.put("lastChangedBy", lastChangedBy);
		}
		if (req.getParameter(LAST_CHANGED_DATE) != null) {
			lastChangedDate = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(LAST_CHANGED_DATE));
			dataMap.put("lastChangedDate", lastChangedDate);
		}
		if (req.getParameter(LAST_CHANGED_TIME) != null) {
			lastChangedTime = req.getParameter(LAST_CHANGED_TIME);
			dataMap.put("otherFamilyHistory", otherFamilyHistory);

		}
		dataMap.put("lastChangedTime", lastChangedTime);
		// masMedicalBoardProceedings.setAdmissionStatus("n");
		// masMedicalBoardProceedings.setSpecialistOpinnionStatus("n");

		int hdbDisability = 0;

		if (req.getParameter("hdbDisability") != null
				&& !req.getParameter("hdbDisability").equals("")) {
			hdbDisability = Integer.parseInt(req
					.getParameter("hdbDisability"));
		}
		List<String> systemDiagnosisList = new ArrayList<String>();
		List<Integer> systemDiagnosisIdList = new ArrayList<Integer>();

		for (int i = 1; i <= hdbDisability; i++) {
			String str = "";
			if (req.getParameter("systemDiagnosis" + i) != null) {
				str = req.getParameter("systemDiagnosis" + i);
			} else {
				str = "";
			}
			/*
			 * if(req.getParameter("icdDisability"+i) != null ){
			 * str=req.getParameter("icdDisability"+i); }else{ str=""; }
			 */
			if (str != "") {
				String systemDiagnosis = "";
				int lastIndex = str.indexOf("[");
				if (lastIndex > 0) {
					systemDiagnosis = str.substring(0, lastIndex);
				} else {
					systemDiagnosis = str;
				}
				int index1 = str.lastIndexOf("[");
				int index2 = str.lastIndexOf("]");
				int systemDiagnosisId = 0;
				systemDiagnosisList.add(systemDiagnosis);
				try {
					systemDiagnosisId = Integer.parseInt(str.substring(
							(index1 + 1), index2));
				} catch (NumberFormatException e) {
					e.printStackTrace();
				}
				if (systemDiagnosisId > 0) {
					systemDiagnosisIdList.add(systemDiagnosisId);
				}
			}
		}
		dataMap.put("systemDiagnosisIdList", systemDiagnosisIdList);
		dataMap.put("systemDiagnosisList", systemDiagnosisList);
		map = medicalBoardHandlerService.addOldMedicalBoardData(dataMap);
	} catch (Exception e) {
		e.printStackTrace();
	}
	String message = "";
	boolean status = false;
	if (map.get("status") != null) {
		status = (Boolean) map.get("status");
	}
	if (status == true) {
		message = "Record Added Successfully.";
	} else {
		message = "Some Problem Occured!";
	}
	String jsp = "";
	jsp = "MedicalBoardMessage.jsp";

	map.put("contentJsp", jsp);
	map.put("message", message);
	return new ModelAndView("indexB", "map", map);

}

/**
 * Code By Ritu Sahu Date 01 May 2012
 */
public ModelAndView updateMedicalExamEntryBySpecialist(
		HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	Box box = HMSUtil.getBox(request);
	boolean successfullyAdded = false;
	HttpSession session = request.getSession();
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	box.put("hospitalId", hospitalId);
	int userId = 0;
	Users user = (Users) session.getAttribute("users");
	userId = user.getId();
	box.put("userId", userId);
	map = medicalBoardHandlerService
			.updateMedicalExamEntryBySpecialist(box);
	if (map.get("successfullyAdded") != null) {
		successfullyAdded = (Boolean) map.get("successfullyAdded");
	}
	List<String> investigationReferToMHList = new ArrayList<String>();
	if (map.get("investigationReferToMHList") != null) {
		investigationReferToMHList = (List) map
				.get("investigationReferToMHList");
	}
	String message = "";
	String jsp = "";
	if (successfullyAdded) {
		message = "Record Updated Successfully.";
		jsp = MEDICAL_BOARD_EXAM_MSG + ".jsp";
	} else if (!successfullyAdded) {
		message = "Some Problem Occured !!!";
		jsp = MEDICAL_BOARD_ERROR_MSG + ".jsp";
	}
	map.put("investigationReferToMHList", investigationReferToMHList);
	map.put("message", message);
	map.put("contentJsp", jsp);
	return new ModelAndView("index", "map", map);
}

public void printMedicalCaseSheet(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> detailsMap = new HashMap<String, Object>();
	Map<String, Object> parameters = new HashMap<String, Object>();

	HttpSession session = request.getSession();

	int medExamId = 0;
	int visitId = 0;
	int hospitalId = 0;
	hospitalId = (Integer) session.getAttribute("hospitalId");
	if (request.getParameter("medExamId") != null
			&& !(request.getParameter("medExamId").equals(""))) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"));
	}
	if (request.getParameter("visitId") != null
			&& !(request.getParameter("visitId").equals(""))) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	parameters.put("hospitalId", hospitalId);
	parameters.put("visit_id", visitId);
	parameters.put("MedExamId", medExamId);
	parameters.put("SUBREPORT_DIR", getServletContext().getRealPath(
			"/reports/"));
	detailsMap = medicalBoardHandlerService.getConnectionForReport();
	HMSUtil.generateReport("mb_med_case_sheet_for_board", parameters,
			(Connection) detailsMap.get("conn"), response,
			getServletContext());

}

public void printSpecialistOpinionReport(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> detailsMap = new HashMap<String, Object>();
	Map<String, Object> parameters = new HashMap<String, Object>();

	HttpSession session = request.getSession();

	int medExamId = 0;
	int visitId = 0;
	int hospitalId = 0;
	hospitalId = (Integer) session.getAttribute("hospitalId");
	if (request.getParameter("medExamId") != null
			&& !(request.getParameter("medExamId").equals(""))) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"));
	}
	if (request.getParameter("visitId") != null
			&& !(request.getParameter("visitId").equals(""))) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	parameters.put("hospitalId", hospitalId);
	parameters.put("visit_id", visitId);
	parameters.put("MedExamId", medExamId);
	parameters.put("SUBREPORT_DIR", getServletContext().getRealPath(
			"/reports/"));
	detailsMap = medicalBoardHandlerService.getConnectionForReport();
	HMSUtil.generateReport("mb_specialist_opinion", parameters,
			(Connection) detailsMap.get("conn"), response,
			getServletContext());

}

public ModelAndView showViewSpecialistOpinionJsp(
		HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	int medExamId = 0;
	if (request.getParameter("medExamId") != null) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"));
	}
	int visitId = 0;
	if (request.getParameter("visitId") != null) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	String directFlag = "";
	if (request.getParameter("directFlag") != null) {
		directFlag = request.getParameter("directFlag");
	}
	String SecialFlag = "";
	if (request.getParameter("SecialFlag") != null) {
		SecialFlag = request.getParameter("SecialFlag");
	}
	dataMap.put("medExamId", medExamId);
	dataMap.put("visitId", visitId);
	HttpSession session = request.getSession();
	int deptId = (Integer) session.getAttribute("deptId");
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	dataMap.put("hospitalId", hospitalId);
	dataMap.put("deptId", deptId);
	map = medicalBoardHandlerService.showMedicalExamList(dataMap);
	map.put("SecialFlag", SecialFlag);
	String jsp = "mb_viewSpecialistopinion";
	/*
	 * if(directFlag.equalsIgnoreCase("D")){ jsp += ".jsp";
	 * map.put("contentJsp", jsp); map.put("directFlag", "D"); return new
	 * ModelAndView("index","map",map); }else{ map.put("directFlag", "N");
	 */
	return new ModelAndView(jsp, "map", map);
	/* } */
}

// Method By Tirath
// ---method by dipali
public ModelAndView getSystemDiagList(HttpServletRequest request,
		HttpServletResponse response) {

	HttpSession session = request.getSession();
	String itemNameField = "";
	String autoHint = "";

	Map<String, Object> map = new HashMap<String, Object>();
	try {
		if (request.getParameter("requiredField") != null) {
			itemNameField = (request.getParameter("requiredField"));
		}
		if (request.getParameter(itemNameField) != null) {
			autoHint = (request.getParameter(itemNameField));
		}

		map.put("autoHint", autoHint);
		map = opdHandlerService.getICDList(map);
	} catch (Exception e) {
		e.printStackTrace();
	}
	String jsp = "mb_systemDiagnosis";
	return new ModelAndView(jsp, "map", map);
}

public void showViewMedicalBoardHelp(HttpServletRequest request,
		HttpServletResponse response) {

	Box box = HMSUtil.getBox(request);
	String filename = null;
	String fileExtension = null;
	MultipartFormDataRequest mrequest = null;

	if (MultipartFormDataRequest.isMultipartFormData(request)) {
		try {
			mrequest = new MultipartFormDataRequest(request);
		} catch (UploadException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	Map<String, Object> uploadFileMap = new HashMap<String, Object>();

	// String uploadURL = getServletContext().getRealPath("/upload/");
	String userHome = getServletContext().getRealPath("");
	String fileSeparator = System.getProperty("file.separator");
	String uploadURL = userHome + fileSeparator + "help" + fileSeparator;
	try {

		response.setContentType("application/pdf");

		response.setHeader("Content-Disposition", "attachment;filename="
				+ java.net.URLEncoder.encode("Medical Board.pdf") + "");

		File f = new File(uploadURL + "/Medical Board.pdf");
		InputStream in = new FileInputStream(f);
		response.getOutputStream().flush();
		ServletOutputStream outs = response.getOutputStream();

		long length = f.length();

		if (length > Integer.MAX_VALUE) {
			// File is too large
		}
		// Create the byte array to hold the data
		byte[] bytes = new byte[(int) length];

		int offset = 0;
		int numRead = 0;
		while (offset < bytes.length
				&& (numRead = in.read(bytes, offset, bytes.length - offset)) >= 0) {
			offset += numRead;
		}

		if (offset < bytes.length) {
		}
		outs.write(bytes);
		in.close();

	} catch (IOException ioe) {
		ioe.printStackTrace();
	}
}

// -----------------Save MID DATA--By Dipali (28-june-2012)

public void saveMIDData(HttpServletRequest req, HttpServletResponse response) {/*
																				 * Map<
																				 * String
																				 * ,
																				 * Object
																				 * >
																				 * dataMap
																				 * =
																				 * new
																				 * HashMap
																				 * <
																				 * String
																				 * ,
																				 * Object
																				 * >
																				 * (
																				 * )
																				 * ;
																				 * Map
																				 * <
																				 * String
																				 * ,
																				 * Object
																				 * >
																				 * map
																				 * =
																				 * new
																				 * HashMap
																				 * <
																				 * String
																				 * ,
																				 * Object
																				 * >
																				 * (
																				 * )
																				 * ;
																				 * 
																				 * String
																				 * allergies
																				 * =
																				 * ""
																				 * ;
																				 * HttpSession
																				 * session
																				 * =
																				 * req
																				 * .
																				 * getSession
																				 * (
																				 * )
																				 * ;
																				 * int
																				 * hospitalId
																				 * =
																				 * (
																				 * Integer
																				 * )
																				 * session
																				 * .
																				 * getAttribute
																				 * (
																				 * HOSPITAL_ID
																				 * )
																				 * ;
																				 * dataMap
																				 * .
																				 * put
																				 * (
																				 * "hospitalId"
																				 * ,
																				 * hospitalId
																				 * )
																				 * ;
																				 * int
																				 * userId
																				 * =
																				 * 0
																				 * ;
																				 * try
																				 * {
																				 * Users
																				 * user
																				 * =
																				 * (
																				 * Users
																				 * )
																				 * session
																				 * .
																				 * getAttribute
																				 * (
																				 * "users"
																				 * )
																				 * ;
																				 * userId
																				 * =
																				 * user
																				 * .
																				 * getId
																				 * (
																				 * )
																				 * ;
																				 * dataMap
																				 * .
																				 * put
																				 * (
																				 * "user"
																				 * ,
																				 * user
																				 * )
																				 * ;
																				 * if
																				 * (
																				 * req
																				 * .
																				 * getParameter
																				 * (
																				 * SERVICE_NO
																				 * )
																				 * !=
																				 * null
																				 * )
																				 * {
																				 * String
																				 * serviceNo
																				 * =
																				 * req
																				 * .
																				 * getParameter
																				 * (
																				 * SERVICE_NO
																				 * )
																				 * ;
																				 * dataMap
																				 * .
																				 * put
																				 * (
																				 * "serviceNo"
																				 * ,
																				 * serviceNo
																				 * )
																				 * ;
																				 * }
																				 * if
																				 * (
																				 * req
																				 * .
																				 * getParameter
																				 * (
																				 * "hinId"
																				 * )
																				 * !=
																				 * null
																				 * )
																				 * {
																				 * int
																				 * hinId
																				 * =
																				 * Integer
																				 * .
																				 * parseInt
																				 * (
																				 * ""
																				 * +
																				 * req
																				 * .
																				 * getParameter
																				 * (
																				 * "hinId"
																				 * )
																				 * )
																				 * ;
																				 * dataMap
																				 * .
																				 * put
																				 * (
																				 * "hinId"
																				 * ,
																				 * hinId
																				 * )
																				 * ;
																				 * }
																				 * if
																				 * (
																				 * req
																				 * .
																				 * getParameter
																				 * (
																				 * "sexId"
																				 * )
																				 * !=
																				 * null
																				 * )
																				 * {
																				 * int
																				 * genderId
																				 * =
																				 * Integer
																				 * .
																				 * parseInt
																				 * (
																				 * ""
																				 * +
																				 * req
																				 * .
																				 * getParameter
																				 * (
																				 * "sexId"
																				 * )
																				 * )
																				 * ;
																				 * dataMap
																				 * .
																				 * put
																				 * (
																				 * "genderId"
																				 * ,
																				 * genderId
																				 * )
																				 * ;
																				 * }
																				 * if
																				 * (
																				 * req
																				 * .
																				 * getParameter
																				 * (
																				 * "rankId"
																				 * )
																				 * !=
																				 * null
																				 * )
																				 * {
																				 * int
																				 * rankId
																				 * =
																				 * Integer
																				 * .
																				 * parseInt
																				 * (
																				 * ""
																				 * +
																				 * req
																				 * .
																				 * getParameter
																				 * (
																				 * "rankId"
																				 * )
																				 * )
																				 * ;
																				 * dataMap
																				 * .
																				 * put
																				 * (
																				 * "rankId"
																				 * ,
																				 * rankId
																				 * )
																				 * ;
																				 * }
																				 * if
																				 * (
																				 * req
																				 * .
																				 * getParameter
																				 * (
																				 * "name"
																				 * )
																				 * !=
																				 * null
																				 * )
																				 * {
																				 * String
																				 * patientName
																				 * =
																				 * req
																				 * .
																				 * getParameter
																				 * (
																				 * "name"
																				 * )
																				 * ;
																				 * dataMap
																				 * .
																				 * put
																				 * (
																				 * "name"
																				 * ,
																				 * patientName
																				 * )
																				 * ;
																				 * }
																				 * 
																				 * if
																				 * (
																				 * req
																				 * .
																				 * getParameter
																				 * (
																				 * "commandId"
																				 * )
																				 * !=
																				 * null
																				 * )
																				 * {
																				 * int
																				 * commandId
																				 * =
																				 * Integer
																				 * .
																				 * parseInt
																				 * (
																				 * ""
																				 * +
																				 * req
																				 * .
																				 * getParameter
																				 * (
																				 * "commandId"
																				 * )
																				 * )
																				 * ;
																				 * dataMap
																				 * .
																				 * put
																				 * (
																				 * "commandId"
																				 * ,
																				 * commandId
																				 * )
																				 * ;
																				 * }
																				 * 
																				 * if
																				 * (
																				 * req
																				 * .
																				 * getParameter
																				 * (
																				 * REPORTED_DATE
																				 * )
																				 * !=
																				 * null
																				 * &&
																				 * !
																				 * req
																				 * .
																				 * getParameter
																				 * (
																				 * REPORTED_DATE
																				 * )
																				 * .
																				 * equals
																				 * (
																				 * ""
																				 * )
																				 * )
																				 * {
																				 * Date
																				 * reportedDate
																				 * =
																				 * HMSUtil
																				 * .
																				 * dateFormatterDDMMYYYY
																				 * (
																				 * req
																				 * .
																				 * getParameter
																				 * (
																				 * REPORTED_DATE
																				 * )
																				 * )
																				 * ;
																				 * dataMap
																				 * .
																				 * put
																				 * (
																				 * "reportedDate"
																				 * ,
																				 * reportedDate
																				 * )
																				 * ;
																				 * }
																				 * 
																				 * if
																				 * (
																				 * req
																				 * .
																				 * getParameter
																				 * (
																				 * "unitId"
																				 * )
																				 * !=
																				 * null
																				 * )
																				 * {
																				 * int
																				 * unitId
																				 * =
																				 * Integer
																				 * .
																				 * parseInt
																				 * (
																				 * ""
																				 * +
																				 * req
																				 * .
																				 * getParameter
																				 * (
																				 * "unitId"
																				 * )
																				 * )
																				 * ;
																				 * dataMap
																				 * .
																				 * put
																				 * (
																				 * "unitId"
																				 * ,
																				 * unitId
																				 * )
																				 * ;
																				 * }
																				 * 
																				 * BigDecimal
																				 * height
																				 * =
																				 * new
																				 * BigDecimal
																				 * (
																				 * 0
																				 * )
																				 * ;
																				 * if
																				 * (
																				 * req
																				 * .
																				 * getParameter
																				 * (
																				 * "height"
																				 * )
																				 * !=
																				 * null
																				 * &&
																				 * !
																				 * (
																				 * req
																				 * .
																				 * getParameter
																				 * (
																				 * "height"
																				 * )
																				 * .
																				 * equals
																				 * (
																				 * ""
																				 * )
																				 * )
																				 * )
																				 * {
																				 * height
																				 * =
																				 * (
																				 * new
																				 * BigDecimal
																				 * (
																				 * req
																				 * .
																				 * getParameter
																				 * (
																				 * "height"
																				 * )
																				 * )
																				 * )
																				 * ;
																				 * 
																				 * }
																				 * dataMap
																				 * .
																				 * put
																				 * (
																				 * "height"
																				 * ,
																				 * height
																				 * )
																				 * ;
																				 * BigDecimal
																				 * weight
																				 * =
																				 * new
																				 * BigDecimal
																				 * (
																				 * 0
																				 * )
																				 * ;
																				 * if
																				 * (
																				 * req
																				 * .
																				 * getParameter
																				 * (
																				 * "weight"
																				 * )
																				 * !=
																				 * null
																				 * &&
																				 * !
																				 * (
																				 * req
																				 * .
																				 * getParameter
																				 * (
																				 * "weight"
																				 * )
																				 * .
																				 * equals
																				 * (
																				 * ""
																				 * )
																				 * )
																				 * )
																				 * {
																				 * weight
																				 * =
																				 * (
																				 * new
																				 * BigDecimal
																				 * (
																				 * req
																				 * .
																				 * getParameter
																				 * (
																				 * "weight"
																				 * )
																				 * )
																				 * )
																				 * ;
																				 * 
																				 * }
																				 * dataMap
																				 * .
																				 * put
																				 * (
																				 * "weight"
																				 * ,
																				 * weight
																				 * )
																				 * ;
																				 * BigDecimal
																				 * idealWeight
																				 * =
																				 * new
																				 * BigDecimal
																				 * (
																				 * 0
																				 * )
																				 * ;
																				 * 
																				 * int
																				 * deptId
																				 * =
																				 * 0
																				 * ;
																				 * if
																				 * (
																				 * req
																				 * .
																				 * getParameter
																				 * (
																				 * "deptId"
																				 * )
																				 * !=
																				 * null
																				 * )
																				 * {
																				 * deptId
																				 * =
																				 * Integer
																				 * .
																				 * parseInt
																				 * (
																				 * req
																				 * .
																				 * getParameter
																				 * (
																				 * "deptId"
																				 * )
																				 * )
																				 * ;
																				 * dataMap
																				 * .
																				 * put
																				 * (
																				 * "deptId"
																				 * ,
																				 * deptId
																				 * )
																				 * ;
																				 * }
																				 * 
																				 * String
																				 * lastChangedBy
																				 * =
																				 * ""
																				 * ;
																				 * Date
																				 * lastChangedDate
																				 * =
																				 * null
																				 * ;
																				 * String
																				 * lastChangedTime
																				 * =
																				 * ""
																				 * ;
																				 * if
																				 * (
																				 * req
																				 * .
																				 * getParameter
																				 * (
																				 * LAST_CHANGED_BY
																				 * )
																				 * !=
																				 * null
																				 * )
																				 * {
																				 * lastChangedBy
																				 * =
																				 * req
																				 * .
																				 * getParameter
																				 * (
																				 * LAST_CHANGED_BY
																				 * )
																				 * ;
																				 * dataMap
																				 * .
																				 * put
																				 * (
																				 * "lastChangedBy"
																				 * ,
																				 * lastChangedBy
																				 * )
																				 * ;
																				 * }
																				 * if
																				 * (
																				 * req
																				 * .
																				 * getParameter
																				 * (
																				 * LAST_CHANGED_DATE
																				 * )
																				 * !=
																				 * null
																				 * )
																				 * {
																				 * lastChangedDate
																				 * =
																				 * HMSUtil
																				 * .
																				 * dateFormatterDDMMYYYY
																				 * (
																				 * req
																				 * .
																				 * getParameter
																				 * (
																				 * LAST_CHANGED_DATE
																				 * )
																				 * )
																				 * ;
																				 * dataMap
																				 * .
																				 * put
																				 * (
																				 * "lastChangedDate"
																				 * ,
																				 * lastChangedDate
																				 * )
																				 * ;
																				 * }
																				 * if
																				 * (
																				 * req
																				 * .
																				 * getParameter
																				 * (
																				 * LAST_CHANGED_TIME
																				 * )
																				 * !=
																				 * null
																				 * )
																				 * {
																				 * lastChangedTime
																				 * =
																				 * req
																				 * .
																				 * getParameter
																				 * (
																				 * LAST_CHANGED_TIME
																				 * )
																				 * ;
																				 * dataMap
																				 * .
																				 * put
																				 * (
																				 * "otherFamilyHistory"
																				 * ,
																				 * otherFamilyHistory
																				 * )
																				 * ;
																				 * 
																				 * }
																				 * dataMap
																				 * .
																				 * put
																				 * (
																				 * "lastChangedTime"
																				 * ,
																				 * lastChangedTime
																				 * )
																				 * ;
																				 * /
																				 * /
																				 * masMedicalBoardProceedings
																				 * .
																				 * setAdmissionStatus
																				 * (
																				 * "n"
																				 * )
																				 * ;
																				 * /
																				 * /
																				 * masMedicalBoardProceedings
																				 * .
																				 * setSpecialistOpinnionStatus
																				 * (
																				 * "n"
																				 * )
																				 * ;
																				 * 
																				 * int
																				 * hdbDisability
																				 * =
																				 * 0
																				 * ;
																				 * 
																				 * if
																				 * (
																				 * req
																				 * .
																				 * getParameter
																				 * (
																				 * "hdbDisability"
																				 * )
																				 * !=
																				 * null
																				 * &&
																				 * !
																				 * req
																				 * .
																				 * getParameter
																				 * (
																				 * "hdbDisability"
																				 * )
																				 * .
																				 * equals
																				 * (
																				 * ""
																				 * )
																				 * )
																				 * {
																				 * hdbDisability
																				 * =
																				 * Integer
																				 * .
																				 * parseInt
																				 * (
																				 * req
																				 * .
																				 * getParameter
																				 * (
																				 * "hdbDisability"
																				 * )
																				 * )
																				 * ;
																				 * }
																				 * List
																				 * <
																				 * String
																				 * >
																				 * systemDiagnosisList
																				 * =
																				 * new
																				 * ArrayList
																				 * <
																				 * String
																				 * >
																				 * (
																				 * )
																				 * ;
																				 * List
																				 * <
																				 * Integer
																				 * >
																				 * systemDiagnosisIdList
																				 * =
																				 * new
																				 * ArrayList
																				 * <
																				 * Integer
																				 * >
																				 * (
																				 * )
																				 * ;
																				 * 
																				 * for
																				 * (
																				 * int
																				 * i
																				 * =
																				 * 1
																				 * ;
																				 * i
																				 * <=
																				 * hdbDisability
																				 * ;
																				 * i
																				 * ++
																				 * )
																				 * {
																				 * String
																				 * str
																				 * =
																				 * ""
																				 * ;
																				 * if
																				 * (
																				 * req
																				 * .
																				 * getParameter
																				 * (
																				 * "systemDiagnosis"
																				 * +
																				 * i
																				 * )
																				 * !=
																				 * null
																				 * )
																				 * {
																				 * str
																				 * =
																				 * req
																				 * .
																				 * getParameter
																				 * (
																				 * "systemDiagnosis"
																				 * +
																				 * i
																				 * )
																				 * ;
																				 * }
																				 * else
																				 * {
																				 * str
																				 * =
																				 * ""
																				 * ;
																				 * }
																				 * if
																				 * (
																				 * req
																				 * .
																				 * getParameter
																				 * (
																				 * "icdDisability"
																				 * +
																				 * i
																				 * )
																				 * !=
																				 * null
																				 * )
																				 * {
																				 * str
																				 * =
																				 * req
																				 * .
																				 * getParameter
																				 * (
																				 * "icdDisability"
																				 * +
																				 * i
																				 * )
																				 * ;
																				 * }
																				 * else
																				 * {
																				 * str
																				 * =
																				 * ""
																				 * ;
																				 * }
																				 * if
																				 * (
																				 * str
																				 * !=
																				 * ""
																				 * )
																				 * {
																				 * String
																				 * systemDiagnosis
																				 * =
																				 * ""
																				 * ;
																				 * int
																				 * lastIndex
																				 * =
																				 * str
																				 * .
																				 * indexOf
																				 * (
																				 * "["
																				 * )
																				 * ;
																				 * if
																				 * (
																				 * lastIndex
																				 * >
																				 * 0
																				 * )
																				 * {
																				 * systemDiagnosis
																				 * =
																				 * str
																				 * .
																				 * substring
																				 * (
																				 * 0
																				 * ,
																				 * lastIndex
																				 * )
																				 * ;
																				 * }
																				 * else
																				 * {
																				 * systemDiagnosis
																				 * =
																				 * str
																				 * ;
																				 * }
																				 * int
																				 * index1
																				 * =
																				 * str
																				 * .
																				 * lastIndexOf
																				 * (
																				 * "["
																				 * )
																				 * ;
																				 * int
																				 * index2
																				 * =
																				 * str
																				 * .
																				 * lastIndexOf
																				 * (
																				 * "]"
																				 * )
																				 * ;
																				 * int
																				 * systemDiagnosisId
																				 * =
																				 * 0
																				 * ;
																				 * systemDiagnosisList
																				 * .
																				 * add
																				 * (
																				 * systemDiagnosis
																				 * )
																				 * ;
																				 * try
																				 * {
																				 * systemDiagnosisId
																				 * =
																				 * Integer
																				 * .
																				 * parseInt
																				 * (
																				 * str
																				 * .
																				 * substring
																				 * (
																				 * (
																				 * index1
																				 * +
																				 * 1
																				 * )
																				 * ,
																				 * index2
																				 * )
																				 * )
																				 * ;
																				 * }
																				 * catch
																				 * (
																				 * NumberFormatException
																				 * e
																				 * )
																				 * {
																				 * e
																				 * .
																				 * printStackTrace
																				 * (
																				 * )
																				 * ;
																				 * }
																				 * if
																				 * (
																				 * systemDiagnosisId
																				 * >
																				 * 0
																				 * )
																				 * {
																				 * systemDiagnosisIdList
																				 * .
																				 * add
																				 * (
																				 * systemDiagnosisId
																				 * )
																				 * ;
																				 * }
																				 * }
																				 * }
																				 * dataMap
																				 * .
																				 * put
																				 * (
																				 * "systemDiagnosisIdList"
																				 * ,
																				 * systemDiagnosisIdList
																				 * )
																				 * ;
																				 * dataMap
																				 * .
																				 * put
																				 * (
																				 * "systemDiagnosisList"
																				 * ,
																				 * systemDiagnosisList
																				 * )
																				 * ;
																				 * map
																				 * =
																				 * medicalBoardHandlerService
																				 * .
																				 * saveMIDData
																				 * (
																				 * dataMap
																				 * )
																				 * ;
																				 * }
																				 * catch
																				 * (
																				 * Exception
																				 * e
																				 * )
																				 * {
																				 * e
																				 * .
																				 * printStackTrace
																				 * (
																				 * )
																				 * ;
																				 * }
																				 * String
																				 * message
																				 * =
																				 * ""
																				 * ;
																				 * boolean
																				 * status
																				 * =
																				 * false
																				 * ;
																				 * if
																				 * (
																				 * map
																				 * .
																				 * get
																				 * (
																				 * "status"
																				 * )
																				 * !=
																				 * null
																				 * )
																				 * {
																				 * status
																				 * =
																				 * (
																				 * Boolean
																				 * )
																				 * map
																				 * .
																				 * get
																				 * (
																				 * "status"
																				 * )
																				 * ;
																				 * }
																				 * if
																				 * (
																				 * status
																				 * ==
																				 * true
																				 * )
																				 * {
																				 * message
																				 * =
																				 * "Record Added Successfully."
																				 * ;
																				 * }
																				 * else
																				 * {
																				 * message
																				 * =
																				 * "Try Again!"
																				 * ;
																				 * }
																				 * String
																				 * jsp
																				 * =
																				 * ""
																				 * ;
																				 * jsp
																				 * =
																				 * "mb_Message.jsp"
																				 * ;
																				 * 
																				 * map
																				 * .
																				 * put
																				 * (
																				 * "contentJsp"
																				 * ,
																				 * jsp
																				 * )
																				 * ;
																				 * map
																				 * .
																				 * put
																				 * (
																				 * "message"
																				 * ,
																				 * message
																				 * )
																				 * ;
																				 * return
																				 * new
																				 * ModelAndView
																				 * (
																				 * "indexB"
																				 * ,
																				 * "map"
																				 * ,
																				 * map
																				 * )
																				 * ;
																				 */

	Map<String, Object> dataMap = new HashMap<String, Object>();
	Map<String, Object> map = new HashMap<String, Object>();

	String allergies = "";
	HttpSession session = req.getSession();
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	dataMap.put("hospitalId", hospitalId);

	int deptId = (Integer) session.getAttribute("deptId");
	dataMap.put("deptId", deptId);

	int userId = 0;
	try {
		Users user = (Users) session.getAttribute("users");
		userId = user.getId();
		dataMap.put("user", user);

		if (req.getParameter(SERVICE_NO) != null) {
			String serviceNo = req.getParameter(SERVICE_NO);
			dataMap.put("serviceNo", serviceNo);
		}
		if (req.getParameter("hinId") != null) {
			int hinId = Integer.parseInt("" + req.getParameter("hinId"));
			dataMap.put("hinId", hinId);
		}
		if (req.getParameter("sexId") != null) {
			int genderId = Integer.parseInt("" + req.getParameter("sexId"));
			dataMap.put("genderId", genderId);
		}
		if (req.getParameter("rankId") != null) {
			int rankId = Integer.parseInt("" + req.getParameter("rankId"));
			dataMap.put("rankId", rankId);
		}
		if (req.getParameter("medcatId") != null) {
			String medcatId = req.getParameter("medcatId");
			dataMap.put("medcatId", medcatId);
		}
		if (req.getParameter("patientName") != null) {
			String patientName = req.getParameter("patientName");
			dataMap.put("patientName", patientName);
		}

		if (req.getParameter("commandId") != null
				&& !req.getParameter("commandId").equals("")) {
			int commandId = Integer.parseInt(""
					+ req.getParameter("commandId"));
			dataMap.put("commandId", commandId);
		}

		if (req.getParameter(REPORTED_DATE) != null
				&& !req.getParameter(REPORTED_DATE).equals("")) {
			Date reportedDate = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(REPORTED_DATE));
			dataMap.put("reportedDate", reportedDate);
		}

		if (req.getParameter("unitId") != null) {
			int unitId = Integer.parseInt("" + req.getParameter("unitId"));
			dataMap.put("unitId", unitId);
		}
		if (req.getParameter("commandId") != null) {
			int commandId = Integer.parseInt(""
					+ req.getParameter("commandId"));
			dataMap.put("commandId", commandId);
		}
		BigDecimal height = new BigDecimal(0);
		if (req.getParameter("height") != null
				&& !(req.getParameter("height").equals(""))) {
			height = (new BigDecimal(req.getParameter("height")));

		}
		dataMap.put("height", height);
		BigDecimal weight = new BigDecimal(0);
		if (req.getParameter("weight") != null
				&& !(req.getParameter("weight").equals(""))) {
			weight = (new BigDecimal(req.getParameter("weight")));

		}
		dataMap.put("weight", weight);
		String bp = "";
		String waist = "";
		if (req.getParameter("bp") != null
				&& !(req.getParameter("bp").equals(""))) {
			bp = req.getParameter("weight");

		}
		dataMap.put("bp", bp);
		if (req.getParameter("waist") != null
				&& !(req.getParameter("waist").equals(""))) {
			waist = req.getParameter("waist");

		}
		dataMap.put("waist", waist);
		String lastChangedBy = "";
		Date lastChangedDate = null;
		String lastChangedTime = "";
		if (req.getParameter(LAST_CHANGED_BY) != null) {
			lastChangedBy = req.getParameter(LAST_CHANGED_BY);
			dataMap.put("lastChangedBy", lastChangedBy);
		}
		if (req.getParameter(LAST_CHANGED_DATE) != null) {
			lastChangedDate = HMSUtil.dateFormatterDDMMYYYY(req
					.getParameter(LAST_CHANGED_DATE));
			dataMap.put("lastChangedDate", lastChangedDate);
		}
		dataMap.put("lastChangedTime", lastChangedTime);
		// masMedicalBoardProceedings.setAdmissionStatus("n");
		// masMedicalBoardProceedings.setSpecialistOpinnionStatus("n");

		int hdbDisability = 0;

		if (req.getParameter("hdbDisability") != null
				&& !req.getParameter("hdbDisability").equals("")) {
			hdbDisability = Integer.parseInt(req
					.getParameter("hdbDisability"));
		}
		List<String> systemDiagnosisList = new ArrayList<String>();
		List<Integer> systemDiagnosisIdList = new ArrayList<Integer>();
		String str = "";
		if (req.getParameter("systemDiagnosis") != null) {
			str = req.getParameter("systemDiagnosis");
		} else {
			str = "";
		}
		/*
		 * if(req.getParameter("icdDisability"+i) != null ){
		 * str=req.getParameter("icdDisability"+i); }else{ str=""; }
		 */
		if (str != "") {
			String systemDiagnosis = "";
			int lastIndex = str.indexOf("[");
			if (lastIndex > 0) {
				systemDiagnosis = str.substring(0, lastIndex);
			} else {
				systemDiagnosis = str;
			}
			int index1 = str.lastIndexOf("[");
			int index2 = str.lastIndexOf("]");
			int systemDiagnosisId = 0;
			systemDiagnosisList.add(systemDiagnosis);
			try {
				systemDiagnosisId = Integer.parseInt(str.substring(
						(index1 + 1), index2));
			} catch (NumberFormatException e) {
				e.printStackTrace();
			}
			if (systemDiagnosisId > 0) {
				systemDiagnosisIdList.add(systemDiagnosisId);
			}
			dataMap.put("systemDiagnosis", systemDiagnosis);
		}
		dataMap.put("systemDiagnosisIdList", systemDiagnosisIdList);
		dataMap.put("systemDiagnosisList", systemDiagnosisList);
		map = medicalBoardHandlerService.saveMIDData(dataMap);
	} catch (Exception e) {
		e.printStackTrace();
	}
	String message = "";
	boolean saved = false;
	if (map.get("saved") != null) {
		saved = (Boolean) map.get("saved");
	}
	List<MasMedicalExaminationDetail> medicalExamDetailList = new ArrayList<MasMedicalExaminationDetail>();
	if (map.get("medicalExamDetailList") != null) {
		medicalExamDetailList = (List<MasMedicalExaminationDetail>) map
				.get("medicalExamDetailList");
	}
	/*
	 * if(status==true && medicalExamDetailList.size() == 0 ) {
	 * message="Record Added Successfully."; }else if(medicalExamDetailList
	 * !=null && medicalExamDetailList.size() >0){
	 * message="Already data saved....."; }else { message="Try Again!"; }
	 */
	if (medicalExamDetailList != null && medicalExamDetailList.size() > 0) {
		message = "Already data saved.....";
	} else if (saved == true && medicalExamDetailList.size() == 0) {
		message = "Record Added Successfully.";
	} else {
		message = "Try Again!";
	}
	map.put("message", message);
	try {
		StringBuffer sb = new StringBuffer();
		sb.append("<item>");
		sb.append("<msg>" + message + "</msg>");
		sb.append("</item>");
		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		response.getWriter().write(
				"<?xml version='1.0' encoding='ISO-8859-1'?>");
		response.getWriter().write("<items>");
		response.getWriter().write(sb.toString());
		response.getWriter().write("</items>");
	} catch (IOException e) {
		e.printStackTrace();
	}
	/*
	 * String jsp=""; jsp="mb_Message.jsp";
	 * 
	 * map.put("contentJsp", jsp); return new ModelAndView("indexB", "map",
	 * map);
	 */

}

// ----------------------------------
// ---Method Added by Kiran..

public ModelAndView showMidData(HttpServletRequest request,
		HttpServletResponse response) {
	HttpSession session = request.getSession();
	String itemNameField = "";
	String autoHint = "";

	Map<String, Object> map = new HashMap<String, Object>();
	map = medicalBoardHandlerService.showMidData();
	// String jsp = "mb_midData.jsp";
	String jsp = "mb_midDataNew.jsp";
	map.put("contentJsp", jsp);
	return new ModelAndView("index", "map", map);
}

public ModelAndView getServiceNoDetailsMB(HttpServletRequest request,
		HttpServletResponse response) {
	HttpSession session = request.getSession();
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	List<Patient> patientList = new ArrayList<Patient>();
	String serviceNo = "";
	if (request.getParameter(SERVICE_NO) != null
			&& !request.getParameter(SERVICE_NO).equals("")) {
		serviceNo = request.getParameter(SERVICE_NO);
	}
	dataMap.put("serviceNo", serviceNo);

	map = medicalBoardHandlerService.fillServiceDetail(dataMap);

	String jsp = "mb_displayMIDData";
	return new ModelAndView(jsp, "map", map);
}

public void fillServiceDetail(HttpServletRequest request,
		HttpServletResponse response) {
	HttpSession session = request.getSession();
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	List<Patient> patientList = new ArrayList<Patient>();
	String serviceNo = "";
	if (request.getParameter(SERVICE_NO) != null
			&& !request.getParameter(SERVICE_NO).equals("")) {
		serviceNo = request.getParameter(SERVICE_NO);
	}
	dataMap.put("serviceNo", serviceNo);

	map = medicalBoardHandlerService.fillServiceDetail(dataMap);
	if (map.get("patientList") != null) {
		patientList = (List) map.get("patientList");
	}
	StringBuffer sb = new StringBuffer();
	try {
		sb.append("<items>");
		for (Patient patient : patientList) {
			sb.append("<item>");
			sb.append("<hinId>" + patient.getId() + "</hinId>");
			String name = "";
			name = patient.getPFirstName();
			if (patient.getPLastName() != null) {
				name = name + " " + patient.getPLastName();
			}
			sb.append("<name>" + name + "</name>");
			sb.append("<age>" + patient.getAge() + "</age>");
			if (patient.getSex() != null) {
				sb
						.append("<sexId>" + patient.getSex().getId()
								+ "</sexId>");
			} else {
				sb.append("<sexId>-</sexId>");
			}

			if (patient.getRank() != null) {
				sb.append("<rankId>" + patient.getRank().getId()
						+ "</rankId>");
			} else {
				sb.append("<rankId>-</rankId>");
			}
			if (patient.getUnit() != null) {
				sb.append("<unitId>" + patient.getUnit().getId()
						+ "</unitId>");
			} else {
				sb.append("<unitId>-</unitId>");
			}
			if (patient.getUnit() != null) {
				if (patient.getUnit().getStation() != null) {
					if (patient.getUnit().getStation().getCommand() != null) {

						sb.append("<commandId>"
								+ patient.getUnit().getStation()
										.getCommand().getId()
								+ "</commandId>");
					}
				}
			} else {
				sb.append("<commandId>-</commandId>");
			}
			if (patient.getCategory() != null) {
				sb.append("<medcatId>"
						+ patient.getCategory().getCategoryid()
						+ "</medcatId>");
			} else {
				sb.append("<medcatId>-</medcatId>");
			}
			sb.append("</item>");
			break;
		}
		sb.append("</items>");
		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
	} catch (Exception e) {
		e.printStackTrace();
	}
	response.setContentType("text/xml");
	response.setHeader("Cache-Control", "no-cache");
	try {
		response.getWriter().write(
				"<?xml version='1.0' encoding='ISO-8859-1'?>");
		response.getWriter().write("<chargeCodes>");
		response.getWriter().write(sb.toString());
		response.getWriter().write("</chargeCodes>");

	} catch (Exception e) {
		e.printStackTrace();
	}
}

public void updateMIDData(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	Map<String, Object> map = new HashMap<String, Object>();
	int medExamId = 0;
	int unitId = 0;
	int rowVal = 0;
	if (request.getParameter("rowVal") != null
			&& !request.getParameter("rowVal").equals("0")) {
		rowVal = Integer.parseInt(request.getParameter("rowVal"));
	}
	if (request.getParameter("medExamId" + rowVal) != null
			&& !request.getParameter("medExamId" + rowVal).equals("0")) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"
				+ rowVal));
	}
	if (request.getParameter("displayUnitId" + rowVal) != null
			&& !request.getParameter("displayUnitId" + rowVal).equals("0")) {
		unitId = Integer.parseInt(request.getParameter("displayUnitId"
				+ rowVal));
	}
	mapForDS.put("medExamId", medExamId);
	mapForDS.put("unitId", unitId);
	map = medicalBoardHandlerService.updateMIDData(mapForDS);
	String message = "";
	boolean update = false;
	if (map.get("update") != null) {
		update = (Boolean) map.get("update");
	}
	if (update == true) {
		message = "Record update Successfully.";
	} else {
		message = "Try Again!";
	}
	map.put("message", message);
	try {
		StringBuffer sb = new StringBuffer();
		sb.append("<item>");
		sb.append("<msg>" + message + "</msg>");
		sb.append("</item>");
		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		response.getWriter().write(
				"<?xml version='1.0' encoding='ISO-8859-1'?>");
		response.getWriter().write("<items>");
		response.getWriter().write(sb.toString());
		response.getWriter().write("</items>");
	} catch (IOException e) {
		e.printStackTrace();
	}
}

public ModelAndView showPatientPreviousVisitForViewScreen(
		HttpServletRequest request, HttpServletResponse response) {
	HttpSession session = request.getSession();
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	Map<String, Object> map = new HashMap<String, Object>();
	int hinId = Integer.parseInt(request.getParameter("hinId"));
	if (request.getParameter("deptId") != null) {
		int deptId = Integer.parseInt(request.getParameter("deptId"));
		mapForDS.put("deptId", deptId);
	}
	int visitNo = 0;
	if (request.getParameter("visitNo") != null) {
		Integer.parseInt(request.getParameter("visitNo"));
		mapForDS.put("visitNo", visitNo);
	}

	mapForDS.put("hinId", hinId);

	map = opdHandlerService.getPreviousPatientVisit(mapForDS);
	if (request.getParameter("visitId") != null) {
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		map.put("visitId", visitId);
	}
	if (request.getParameter("token") != null) {
		int token = Integer.parseInt(request.getParameter("token"));
		map.put("token", token);
	}
	if (request.getParameter("flag") != null) {
		map.put("flag", request.getParameter("flag"));
	}
	map.put("visitNoForJsp", visitNo);
	String jsp = "opd_preVisitForViewMB";
	// jsp += ".jsp";
	title = "Patient Previous Visit";
	/*
	 * map.put("contentJsp", jsp); map.put("title", title);
	 */

	return new ModelAndView(jsp, "map", map);
}

public ModelAndView getPrevMedBoardFromHIC(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> mapSmc = new HashMap<String, Object>();
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	int visitId = 0;
	int token = 0;
	String backFlag = "";
	String serviceNo = request.getParameter("serviceNo");
	if (request.getParameter("visitId") != null) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	if (request.getParameter("token") != null) {
		token = Integer.parseInt(request.getParameter("token"));
	}
	if (request.getParameter("backFlag") != null) {
		backFlag = request.getParameter("backFlag");
	}

	mapForDS.put("serviceNo", serviceNo);
	mapSmc = medicalExamHandlerService.getPrevMedBoardFromHIC(mapForDS);
	map = medicalExamHandlerService.getPrevMedBoardFromSMC(mapForDS);
	String url = "/hms/hms/medicalExam?method=showAnnualMedExamJsp";
	// String jsp = "opd_previousVisitForMedicalBoard";
	/*
	 * jsp += ".jsp"; map.put("contentJsp", jsp);
	 */
	String jsp = "mb_previousVisitForMB";
	map.put("visitId", visitId);
	map.put("token", token);
	map.put("backFlag", backFlag);
	// map.put("mapSmc", mapSmc);
	return new ModelAndView(jsp, "map", map);

}

public ModelAndView getPrevMedExamFromHIC(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> mapSmc = new HashMap<String, Object>();
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	int token = 0;
	String url = "";
	int visitId = 0;
	String backFlag = "";
	String serviceNo = request.getParameter("serviceNo");
	mapForDS.put("serviceNo", serviceNo);
	if (request.getParameter("visitId") != null) {
		visitId = Integer.parseInt(request.getParameter("visitId"));

	}
	if (request.getParameter("token") != null) {
		token = Integer.parseInt(request.getParameter("token"));

	}
	if (request.getParameter("backFlag") != null) {
		backFlag = request.getParameter("backFlag");

	}
	int medExamId = 0;
	if (request.getParameter("medExamId") != null
			&& !request.getParameter("medExamId").equals("")) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"));
	}
	map = medicalExamHandlerService.getPrevMedExamFromHIC(mapForDS);
	mapSmc = medicalExamHandlerService.getPrevMedExamFromSMC(mapForDS);
	String jsp = "mb_previousVisitForME";
	// url="/hms/hms/medicalExam?method=showAnnualMedExamJsp";
	// jsp += ".jsp";
	// map.put("contentJsp", jsp);
	map.put("visitId", visitId);
	map.put("token", token);
	map.put("mapSmc", mapSmc);
	map.put("url", url);
	map.put("visitId", visitId);
	map.put("backFlag", backFlag);
	map.put("medExamId", medExamId);
	return new ModelAndView(jsp, "map", map);

}

public ModelAndView showPatientPreVisitHospitality(
		HttpServletRequest request, HttpServletResponse response) {
	HttpSession session = request.getSession();
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	int hinId = 0;
	int deptId = 0;
	int visitNo = 0;
	int visitId = 0;
	if (request.getParameter("hinId") != null) {
		hinId = Integer.parseInt(request.getParameter("hinId"));
	}
	if (request.getParameter("deptId") != null) {
		deptId = Integer.parseInt(request.getParameter("deptId"));
	}
	if (request.getParameter("visitNo") != null) {
		visitNo = Integer.parseInt(request.getParameter("visitNo"));
	}
	if (request.getParameter("visitId") != null) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	int token = 0;
	if (request.getParameter("token") != null) {
		token = Integer.parseInt(request.getParameter("token"));
	}
	mapForDS.put("hinId", hinId);
	mapForDS.put("deptId", deptId);
	mapForDS.put("visitNo", visitNo);
	map = opdHandlerService
			.showPatientPreviousVisitForHospitality(mapForDS);

	map.put("visitNoForJsp", visitNo);
	String jsp = "";
	jsp = "mb_previousVisitForHospitality";
	// jsp += ".jsp";
	title = "Detail of Hospitalization";
	// map.put("contentJsp", jsp);
	map.put("visitId", visitId);
	map.put("token", token);
	map.put("title", title);

	return new ModelAndView(jsp, "map", map);
}

public ModelAndView viewUploadDocuments(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	int hospitalId = 0;
	String userName = "";
	String jsp = "";
	String flag = "";
	String hin_no = "";
	int visitId = 0;
	int medExamId = 0;
	int hinId = 0;
	if (request.getParameter("hinId") != null) {
		hinId = Integer.parseInt(request.getParameter("hinId"));
	}
	if (request.getParameter("visitId") != null) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	if (request.getParameter("medExamId") != null) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"));
	}
	HttpSession session = request.getSession();
	int deptId = (Integer) session.getAttribute("deptId");
	hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	if (request.getParameter("flag") != null) {
		flag = request.getParameter("flag").trim();
	}

	Map<String, Object> mapDetails = new HashMap<String, Object>();
	mapDetails.put("visitId", visitId);
	mapDetails.put("hinId", hinId);
	mapDetails.put("medExamId", medExamId);
	mapDetails.put("flag", flag);

	if (session.getAttribute(LOGIN_NAME) != null) {
		userName = (String) session.getAttribute(LOGIN_NAME);
		mapDetails.put("userName", userName);
	}
	String userHome = getServletContext().getRealPath("");
	String fileSeparator = System.getProperty("file.separator");
	String uploadURL = userHome.substring(0, userHome
			.lastIndexOf(fileSeparator))
			+ fileSeparator
			+ "HMSDocumentFolder"
			+ fileSeparator
			+ "upload" + fileSeparator;

	String destuploadURL = getServletContext().getRealPath("/upload/");
	File urlName = new File(getServletContext().getRealPath("/upload/"));
	String getPathName = urlName.getPath();
	mapDetails.put("uploadURL", uploadURL + hin_no);
	mapDetails.put("destUploadURL", destuploadURL + fileSeparator + hin_no);
	map = medicalBoardHandlerService.viewUploadDocumentsMo(mapDetails);
	String[] files = null;
	try {
		File fileDir = new File(destuploadURL + fileSeparator + hin_no);
		if (fileDir.exists()) {
			files = fileDir.list();
		}
	} catch (Exception exc) {
		exc.printStackTrace();

	}
	map.put("visitId", visitId);
	map.put("medExamId", medExamId);
	map.put("hospitalId", hospitalId);
	map.put("deptId", deptId);
	map.put("flag", flag);
	jsp = "mb_viewDocumentdoc";
	// jsp += ".jsp";
	title = "Upload Documents";
	// map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView(jsp, "map", map);

}

public ModelAndView showPrintValidateMO(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	String jsp = "";
	String title = "";
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute(HOSPITAL_ID) != null) {
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	}
	map = medicalBoardHandlerService.showPrintValidateMO(hospitalId);
	jsp = "mb_toPrintValidateMO";

	jsp += ".jsp";
	title = "Approving Authority Waiting List";
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("indexB", "map", map);
}

public ModelAndView generateMBToPrint(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> detailsMap = new HashMap<String, Object>();
	Map<String, Object> infoMap = new HashMap<String, Object>();
	Map<String, Object> parameters = new HashMap<String, Object>();
	Map<String, Object> map = new HashMap<String, Object>();
	detailsMap = medicalBoardHandlerService.getConnectionForReport();
	int visit_id = 0;

	if (request.getParameter("parent") != null
			&& !(request.getParameter("parent").equals(""))) {
		visit_id = Integer.parseInt(request.getParameter("parent"));
	}
	parameters.put("visit_id", visit_id);
	map = medicalBoardHandlerService.getMedicalType(visit_id);
	String medicalType = "";
	if (map.get("medicalType") != null) {
		medicalType = (String) map.get("medicalType");
	}
	parameters.put("SUBREPORT_DIR", getServletContext().getRealPath(				"/reports/"));
	if (medicalType.equalsIgnoreCase("Medical Board Review AFMSF 15")
			|| medicalType.equalsIgnoreCase("Initial Medical Board AFMSF 15")) {
		HMSUtil.generateReport("mb_proceeding_initial_afmsfNew", parameters,
				(Connection) detailsMap.get("conn"), response,getServletContext());
	} else if (medicalType.equalsIgnoreCase("Medical Board AFMSF 16")) {
		HMSUtil.generateReport("mb_form16_report", parameters,
				(Connection) detailsMap.get("conn"), response,getServletContext());
	}else if ((medicalType.equalsIgnoreCase("Annual Medical Exam(AFMSF-3B)"))
			||(medicalType.equalsIgnoreCase("Prior To Proceedings Abroad Med. Exam(AFMSF-3B)")) ||
			(medicalType.equalsIgnoreCase("High Altitude Med. Exam(AFMSF-3B)"))) {
	//	HMSUtil.generateReport("mb_form16_report", parameters,
				//(Connection) detailsMap.get("conn"), response,getServletContext());
	}else if (medicalType.equalsIgnoreCase("Primary/Extension Med. Exam(AFMSF-2A)")) {
		//HMSUtil.generateReport("mb_form16_report", parameters,
			//	(Connection) detailsMap.get("conn"), response,getServletContext());
	}

	return null;
}

/**
 * Code By Ritu for search in perusing authority wait list
 * 20 Nov 2012
 */
public ModelAndView searchMedicalBoardPerAuthority(HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	String jsp = "";
	String title = "";
	HttpSession session = request.getSession();
	Box box = HMSUtil.getBox(request);
	int hospitalId=0;
	if(session.getAttribute(HOSPITAL_ID)!=null)
	{	
	  hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	}
	box.put("hospitalId", hospitalId);
	map = medicalBoardHandlerService.searchMedicalBoardPerAuthority(box);
	jsp = "mb_medicalBoardPerusingAuthority";
	
	jsp += ".jsp";
	title = "Medical Board Proceeding Search";
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("indexB", "map", map);
}
//----Method for proceed Form-2A From  Form -15 ---By Dipali---
public void initiateVisistFor2A(HttpServletRequest request,HttpServletResponse response) 
{
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	HttpSession session = request.getSession();
	int userId = 0;
	Users user = (Users)session.getAttribute("users");
	userId = user.getId(); 
	Date lastChangedDate=null;
	String lastChangedTime="";
	int medExamId =0; 
	if(request.getParameter("medExamId") != null){
		medExamId = Integer.parseInt(request.getParameter("medExamId").toString());
	}
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	int hospitalId=0;
	if(session.getAttribute(HOSPITAL_ID)!=null)
	{	
	  hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	  mapForDS.put("hospitalId", hospitalId);
	}
	if (request.getParameter("consultingDoc") != null) {
		int empId = Integer.parseInt(request.getParameter("consultingDoc"));
		mapForDS.put("empId", empId);
	}else{
		if(session.getAttribute("users")!=null){
			user = (Users)session.getAttribute("users");
		}
		mapForDS.put("empId", user.getEmployee().getId());
	}
    
	dataMap.put("userId", userId);
    dataMap.put("hospitalId", hospitalId);
    dataMap.put("medExamId", medExamId);
    boolean successfullyAdded =false;
    successfullyAdded=medicalBoardHandlerService.initiateVisistFor2A(dataMap);
	
	String message = "";
	String jsp = "";
	if (successfullyAdded) {
		message = "Initiate Form 2A for Medical Exam...";
	} else {
		message = "Try Again....";
	}
	map.put("message", message);

	try {
		StringBuffer sb = new StringBuffer();
		sb.append("<item>");
		sb.append("<msg>" + message + "</msg>");
		sb.append("</item>");
		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		response.getWriter().write(
				"<?xml version='1.0' encoding='ISO-8859-1'?>");
		response.getWriter().write("<items>");
		response.getWriter().write(sb.toString());
		response.getWriter().write("</items>");
	} catch (IOException e) {
		e.printStackTrace();
	}

}
//------Form-10 added by dipali

//--------Start By Mansi on 13 March 2013
public ModelAndView showMedBoardForm10(HttpServletRequest request,
		HttpServletResponse response) {
	String jsp = "";
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	Box box = HMSUtil.getBox(request);
	Map<String, Object> map = new HashMap<String, Object>();
	int visitId = 0;
	int medExamId = 0;
	String jspheading = null;
	if (request.getParameter("visitId") != null) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	if (request.getParameter("medExamType") != null) {
		jspheading = request.getParameter("medExamType");
	}
	if (request.getParameter("medExamId") != null) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"));
	}
	HttpSession session = request.getSession();
	int deptId = (Integer) session.getAttribute("deptId");
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId = (Integer) session.getAttribute("hospitalId");
	}
	mapForDS.put("hospitalId", hospitalId);
	mapForDS.put("visitId", visitId);
	mapForDS.put("deptId", deptId);
	mapForDS.put("medExamId", medExamId);
	mapForDS.put("medExamType", jspheading);
	map = medicalBoardHandlerService
			.showMedBoardForm10(mapForDS);
	jsp = MB_FORM10;
	jsp += ".jsp";
	map.put("visitId", visitId);
	map.put("jspheading", jspheading);
	map.put("contentJsp", jsp);
	return new ModelAndView("indexB", "map", map);
}

public ModelAndView addMedicalBoardForm10(HttpServletRequest req,
		HttpServletResponse res) {
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	String serviceNo = "";
	if (req.getParameter(SERVICE_NO) != null) {
		serviceNo = req.getParameter(SERVICE_NO);
	}
	

	String name = "";
	if (req.getParameter(FULL_NAME) != null
			&& !(req.getParameter(FULL_NAME).equals(""))) {
		name = req.getParameter(FULL_NAME);
	}


	String branch = "";
	String age = "";
	Date dateofcommun = null;
	String totalservice = "";
	String pastmedicalhistory = "";

	Date medicinExamDate = null;
	String lastChangedBy = "";
	String lastChangedTime = "";
	Date lastChangedDate = null;
	String service = "";
	
	
	HttpSession session = req.getSession();
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	int userId = 0;
	Users user = (Users) session.getAttribute("users");
	userId = user.getId();

	int commandId = (Integer) session.getAttribute("commandId");

	Map<String, Object> map = new HashMap<String, Object>();
	MasMedicalExaminationReportOnEntry masMedicalBoardProceedings = new MasMedicalExaminationReportOnEntry();
	Map<String, Object> generalMap = new HashMap<String, Object>();
	
	if (req.getParameter(TOTAL_SERVICE) != null) {
		totalservice = req.getParameter(TOTAL_SERVICE);
	}
	
	if (req.getParameter(DATE_COMMENCEMENT) != null) {
		dateofcommun = HMSUtil.dateFormatterDDMMYYYY(req
				.getParameter(DATE_COMMENCEMENT));
	}
	if (req.getParameter(PAST_MEDICAL_HISTORY) != null) {
		pastmedicalhistory = req.getParameter(PAST_MEDICAL_HISTORY);
	}
	
	
	int deptId = 0;
	int empId = 0;
	int hinId = 0;
	int visitId = 0;
	if (req.getParameter("deptId") != null) {
		deptId = Integer.parseInt(req.getParameter("deptId"));
	}
	if (req.getParameter("empId") != null) {
		empId = Integer.parseInt(req.getParameter("empId"));
	}
	if (req.getParameter("hinId") != null) {
		hinId = Integer.parseInt(req.getParameter("hinId"));
	}
	if (req.getParameter("visitId") != null) {
		visitId = Integer.parseInt(req.getParameter("visitId"));
	}
	
	
	masMedicalBoardProceedings.setServiceNo(serviceNo);
	masMedicalBoardProceedings.setYearlySerialNo(serviceNo);
	masMedicalBoardProceedings.setNameInFull(name);
	
	if (req.getParameter(RANK_ID) != null
			&& !(req.getParameter(RANK_ID)).equals("0")) {
		MasRank masRank = new MasRank();
		masRank.setId(Integer.parseInt(req.getParameter(RANK_ID)));
		masMedicalBoardProceedings.setRank(masRank);
	}
	if (req.getParameter(UNIT_ID) != null
			&& !(req.getParameter(UNIT_ID)).equals("0")) {
		MasUnit masUnit = new MasUnit();
		masUnit.setId(Integer.parseInt(req.getParameter(UNIT_ID)));
		masMedicalBoardProceedings.setUnit(masUnit);
	}
	

	

	if (req.getParameter(SERVICE_TYPE_ID) != null
			&& !(req.getParameter(SERVICE_TYPE_ID)).equals("0")) {
		MasServiceType serviceType = new MasServiceType();
		serviceType.setId(Integer.parseInt(req
				.getParameter(SERVICE_TYPE_ID)));
		masMedicalBoardProceedings.setServiceType(serviceType);
	}

	if (req.getParameter(TRADE_ID) != null
			&& !(req.getParameter(TRADE_ID)).equals("0")) {
		MasTrade masTrade = new MasTrade();
		masTrade.setId(Integer.parseInt(req.getParameter(TRADE_ID)));
		masMedicalBoardProceedings.setTrade(masTrade);
	}
	if (req.getParameter(VISIT_ID) != null
			&& !(req.getParameter(VISIT_ID)).equals("0")) {
		Visit visit = new Visit();
		visit.setId(Integer.parseInt(req.getParameter(VISIT_ID)));
		masMedicalBoardProceedings.setVisit(visit);
	}
	if (req.getParameter(HIN_ID) != null
			&& !(req.getParameter(HIN_ID)).equals("0")) {
		Patient patient = new Patient();
		patient.setId(Integer.parseInt(req.getParameter(HIN_ID)));
		masMedicalBoardProceedings.setHin(patient);
		mapForDS.put("hinId", Integer.parseInt(req.getParameter(HIN_ID)));
	}
	
	
	if (req.getParameter("apparentAge") != null
			&& !req.getParameter("apparentAge").equals("")) {
		masMedicalBoardProceedings.setApparentAge(req
				.getParameter("apparentAge"));
	}
	Date dateOfBirth=null;
	if (req.getParameter(DATE_OF_BIRTH) != null
			&& !req.getParameter(DATE_OF_BIRTH).equals("")) {
		dateOfBirth = HMSUtil.dateFormatterDDMMYYYY(req
				.getParameter(DATE_OF_BIRTH));
		masMedicalBoardProceedings.setDateOfBirth(dateOfBirth);
	}
	Date dateOfCompletion=null;
	if (req.getParameter(DATE_OF_COMPLETION) != null
			&& !(req.getParameter(DATE_OF_COMPLETION).equals(""))) {
		dateOfCompletion = HMSUtil.dateFormatterDDMMYYYY(req
				.getParameter(DATE_OF_COMPLETION));
		masMedicalBoardProceedings.setDateOfCompletion(dateOfCompletion);
	}
	
	masMedicalBoardProceedings.setTotalService(totalservice);


	if (req.getParameter(FIELDS) != null
			&& !req.getParameter(FIELDS).equals("")) {
		masMedicalBoardProceedings.setMbField(req
				.getParameter(FIELDS));
	}
	String disciplinaryRecord="";
	
	if (req.getParameter(DISCIPLINE_REMARKS) != null) {
		disciplinaryRecord = req.getParameter(DISCIPLINE_REMARKS);
		masMedicalBoardProceedings.setDisciplinaryRecord(disciplinaryRecord);
	}
	String administrative_profile_a="";
	String administrative_profile_b="";
	String administrative_profile_c="";
	
	if (req.getParameter("administrative_profile_a") != null) {
		administrative_profile_a = req.getParameter("administrative_profile_a");
		masMedicalBoardProceedings.setAdministrativeProfileA(administrative_profile_a);
	}
	
	if (req.getParameter("administrative_profile_b") != null) {
		administrative_profile_b = req.getParameter("administrative_profile_b");
		masMedicalBoardProceedings.setAdministrativeProfileB(administrative_profile_b);
	}
	
	if (req.getParameter("administrative_profile_c") != null) {
		administrative_profile_c = req.getParameter("administrative_profile_c");
		masMedicalBoardProceedings.setAdministrativeProfileC(administrative_profile_c);
	}
	String coverTest="";
	if (req.getParameter(COVER_TEST) != null
			&& !(req.getParameter(COVER_TEST).equals(""))) {
		coverTest = req.getParameter(COVER_TEST);
		masMedicalBoardProceedings.setCoverTest(coverTest);
	}
	
	String drinker="";
	if (req.getParameter("drinker") != null
			&& !(req.getParameter("drinker").equals(""))) {
		drinker = req.getParameter("drinker");
		masMedicalBoardProceedings.setDrinker(drinker);
	}
	String alcohol_drug_related="";
	if (req.getParameter("alcohol_drug_related") != null
			&& !(req.getParameter("alcohol_drug_related").equals(""))) {
		alcohol_drug_related = req.getParameter("alcohol_drug_related");
		masMedicalBoardProceedings.setAlcoholDrugRelated(alcohol_drug_related);
	}
	
	
	int tradeNature=0;
	if (req.getParameter("tradeNature") != null
			&& !(req.getParameter("tradeNature")).equals("0")) {
		MasTrade masTradeNature = new MasTrade();
		masTradeNature.setId(Integer.parseInt(req.getParameter("tradeNature")));
		masMedicalBoardProceedings.setTradeNature(masTradeNature);
		
	}
	String regimental="";
	if (req.getParameter("regimental") != null
			&& !(req.getParameter("regimental").equals(""))) {
		regimental = req.getParameter("regimental");
		masMedicalBoardProceedings.setRegimental(regimental);
	}
	String others="";
	if (req.getParameter("others") != null
			&& !(req.getParameter("others").equals(""))) {
		others = req.getParameter("others");
		masMedicalBoardProceedings.setOthers(others);
	}
	String flyingHourTime="";
	if (req.getParameter(HOURS_OF_FLOWN) != null
			&& !(req.getParameter(HOURS_OF_FLOWN).equals(""))) {
		flyingHourTime = req.getParameter(HOURS_OF_FLOWN);
		masMedicalBoardProceedings.setHoursOfFlown(flyingHourTime);
	}
	String operational="";
	if (req.getParameter("operational") != null
			&& !(req.getParameter("operational").equals(""))) {
		operational = req.getParameter("operational");
		masMedicalBoardProceedings.setOperational(operational);
	}
	String professional="";
	
	if (req.getParameter("professional") != null
			&& !(req.getParameter("professional").equals(""))) {
		professional = req.getParameter("professional");
		masMedicalBoardProceedings.setProfessional(professional);
	}
	String regimentalOthers="";
	
	if (req.getParameter("regimentalOthers") != null
			&& !(req.getParameter("regimentalOthers").equals(""))) {
		regimentalOthers = req.getParameter("regimentalOthers");
		masMedicalBoardProceedings.setRegimentalOthers(regimentalOthers);
	}
	
	String motivation="";
	if (req.getParameter("motivation") != null
			&& !(req.getParameter("motivation").equals(""))) {
		motivation = req.getParameter("motivation");
		masMedicalBoardProceedings.setMotivation(motivation);
	}

	String performationUnderStress="";
	if (req.getParameter("performationUnderStress") != null
			&& !(req.getParameter("performationUnderStress").equals(""))) {
		performationUnderStress = req.getParameter("performationUnderStress");
		masMedicalBoardProceedings.setPerformationUnderStress(performationUnderStress);
	}
	String generalOutlook="";
	if (req.getParameter("generalOutlook") != null
			&& !(req.getParameter("generalOutlook").equals(""))) {
		generalOutlook = req.getParameter("generalOutlook");
		masMedicalBoardProceedings.setGeneralOutlook(generalOutlook);
	}
	
	String soicalInteraction="";
	if (req.getParameter("soicalInteraction") != null
			&& !(req.getParameter("soicalInteraction").equals(""))) {
		soicalInteraction = req.getParameter("soicalInteraction");
		masMedicalBoardProceedings.setSoicalInteraction(soicalInteraction);
	}



	StringBuffer abTrStr = new StringBuffer();
	String aStr = null;
	String[] abnormalTrailsArray=null;
	if (req.getParameterValues("abnormalTrails") != null
			&& !req.getParameterValues("abnormalTrails").equals("")) {
		abnormalTrailsArray = (String[]) (req.getParameterValues("abnormalTrails"));
		for (int i = 0; i < abnormalTrailsArray.length; i++) {
			abTrStr.append(abnormalTrailsArray[i]);
			abTrStr.append(",");
		}
		abTrStr.deleteCharAt(abTrStr.length() - 1);
		aStr=abTrStr.toString();
	
			masMedicalBoardProceedings.setAbnormalTrails(aStr);
	}
	
	String prior="";
	if (req.getParameter("prior") != null
			&& !(req.getParameter("prior").equals(""))) {
		prior = req.getParameter("prior");
		masMedicalBoardProceedings.setPriorToOnset(prior);
	}
	

	String priorAbnormalSpecify="";
	if (req.getParameter("priorAbnormalSpecify") != null
			&& !(req.getParameter("priorAbnormalSpecify").equals(""))) {
		priorAbnormalSpecify = req.getParameter("priorAbnormalSpecify");
		masMedicalBoardProceedings.setPriorAbnormalSpecify(priorAbnormalSpecify);
	}
	
	String since="";
	if (req.getParameter("since") != null
			&& !(req.getParameter("since").equals(""))) {
		since = req.getParameter("since");
		masMedicalBoardProceedings.setSince(since);
	}
	

	String sinceAbnormalSpecify="";
	if (req.getParameter("sinceAbnormalSpecify") != null
			&& !(req.getParameter("sinceAbnormalSpecify").equals(""))) {
		sinceAbnormalSpecify = req.getParameter("sinceAbnormalSpecify");
		masMedicalBoardProceedings.setSinceAbnormalSpecify(sinceAbnormalSpecify);
	}
	String sinceLastPsychiatric="";
	if (req.getParameter("sinceLastPsychiatric") != null
			&& !(req.getParameter("sinceLastPsychiatric").equals(""))) {
		sinceLastPsychiatric = req.getParameter("sinceLastPsychiatric");
		masMedicalBoardProceedings.setSinceLastPsychiatric(sinceLastPsychiatric);
	}
	

	String sinceLastPsychiatricAbnormalSpecify="";
	if (req.getParameter("sinceLastPsychiatricAbnormalSpecify") != null
			&& !(req.getParameter("sinceLastPsychiatricAbnormalSpecify").equals(""))) {
		sinceLastPsychiatricAbnormalSpecify = req.getParameter("sinceLastPsychiatricAbnormalSpecify");
		masMedicalBoardProceedings.setSinceLastPsychiatricAbnorma(sinceLastPsychiatricAbnormalSpecify);
	}
	
	String complianceWithTreatment="";
	if (req.getParameter("complianceWithTreatment") != null
			&& !(req.getParameter("complianceWithTreatment").equals(""))) {
		complianceWithTreatment = req.getParameter("complianceWithTreatment");
		masMedicalBoardProceedings.setComplianceWithTreatment(complianceWithTreatment);
	}
	
	String alocoholStatus="";
	if (req.getParameter("alocoholStatus") != null
			&& !(req.getParameter("alocoholStatus").equals(""))) {
		alocoholStatus = req.getParameter("alocoholStatus");
		masMedicalBoardProceedings.setAlocoholStatus(alocoholStatus);
	}
	

	String vocationalPerformance="";
	if (req.getParameter("vocationalPerformance") != null
			&& !(req.getParameter("vocationalPerformance").equals(""))) {
		vocationalPerformance = req.getParameter("vocationalPerformance");
		masMedicalBoardProceedings.setVocationalPerformance(vocationalPerformance);
	}
	String dateOfFPosting="";
	if (req.getParameter("dateOfFPosting") != null
			&& !(req.getParameter("dateOfFPosting").equals(""))) {
		dateOfFPosting = req.getParameter("dateOfFPosting");
		masMedicalBoardProceedings.setDateOfPosting(dateOfFPosting);
	}
	Date dateOfPostingIn=null; 
	if (req.getParameter("dateOfPostingIn") != null
			&& !(req.getParameter("dateOfPostingIn").equals(""))) {
		dateOfPostingIn = HMSUtil.dateFormatterDDMMYYYY(req
				.getParameter("dateOfPostingIn"));
		masMedicalBoardProceedings.setDateOfPostingIn(dateOfPostingIn);
		
	}
	Date dateOfPostingOut=null; 
	if (req.getParameter("dateOfPostingOut") != null
			&& !(req.getParameter("dateOfPostingOut").equals(""))) {
		dateOfPostingOut = HMSUtil.dateFormatterDDMMYYYY(req
				.getParameter("dateOfPostingOut"));
		masMedicalBoardProceedings.setDateOfPostingOut(dateOfPostingOut);

	}
	String dateOfPostingOutSpecify="";
	if (req.getParameter("dateOfPostingOutSpecify") != null
			&& !(req.getParameter("dateOfPostingOutSpecify").equals(""))) {
		dateOfPostingOutSpecify = req.getParameter("dateOfPostingOutSpecify");
		masMedicalBoardProceedings.setDateOfPostingOutSpecify(dateOfPostingOutSpecify);
	}
	Date dateOfLeave=null; 
	if (req.getParameter("dateOfLeave") != null
			&& !(req.getParameter("dateOfLeave").equals(""))) {
		dateOfLeave = HMSUtil.dateFormatterDDMMYYYY(req
				.getParameter("dateOfLeave"));
		masMedicalBoardProceedings.setDateOfLeave(dateOfLeave);

	}
	String pendingDisciplinaryCases="";
	if (req.getParameter("pendingDisciplinaryCases") != null
			&& !(req.getParameter("pendingDisciplinaryCases").equals(""))) {
		pendingDisciplinaryCases = req.getParameter("pendingDisciplinaryCases");
		masMedicalBoardProceedings.setPendingDisciplinaryCases(pendingDisciplinaryCases);
	}

	if (req.getParameter(PAST_MEDICAL_HISTORY) != null) {
		pastmedicalhistory = req.getParameter(PAST_MEDICAL_HISTORY);
		masMedicalBoardProceedings.setPastmedicalhistory(pastmedicalhistory);
	}

	String anyOtherRelevantInformation="";
	if (req.getParameter("anyOtherRelevantInformation") != null
			&& !(req.getParameter("anyOtherRelevantInformation").equals(""))) {
		anyOtherRelevantInformation = req.getParameter("anyOtherRelevantInformation");
		masMedicalBoardProceedings.setAnyOtherRelevantInformation(anyOtherRelevantInformation);
	}
	
	
	if (req.getParameter(LAST_CHANGED_BY) != null) {
		lastChangedBy = req.getParameter(LAST_CHANGED_BY);
	}
	if (req.getParameter(LAST_CHANGED_DATE) != null) {
		lastChangedDate = HMSUtil.dateFormatterDDMMYYYY(req
				.getParameter(LAST_CHANGED_DATE));
	}
	if (req.getParameter(LAST_CHANGED_TIME) != null) {
		lastChangedTime = req.getParameter(LAST_CHANGED_TIME);
	}
	
	generalMap.put("serviceNo", serviceNo);
	generalMap.put("pojoPropertyCode", "serviceNo");
	generalMap.put("pojoName", "MasMedicalExaminationReportOnEntry");
	String message = "";
	String jsp = "";

	Boolean successfullyAdded = false;
	
	
	masMedicalBoardProceedings.setLastChangedBy(lastChangedBy);
	masMedicalBoardProceedings.setLastChangedDate(lastChangedDate);
	masMedicalBoardProceedings.setLastChangedTime(lastChangedTime);
	

	Users maUser = new Users();
	maUser.setId(userId);
	masMedicalBoardProceedings.setMaUser(maUser);

	MasHospital hospital = new MasHospital();
	hospital.setId(hospitalId);
	masMedicalBoardProceedings.setHospital(hospital);

	MasCommand command = new MasCommand();
	command.setId(commandId);
	masMedicalBoardProceedings.setCommand(command);
	masMedicalBoardProceedings.setMedicalType("MedicalBoard");
	String serviceiaf="";
	if (req.getParameter("serviceiaf") != null) {
		serviceiaf = req.getParameter("serviceiaf");
		masMedicalBoardProceedings.setServiceiaf(serviceiaf);
	}
	masMedicalBoardProceedings.setMedicalExamType("Form - 10");
	masMedicalBoardProceedings.setStatus("x");
	
	
	Map<String, Object> dataMap = new HashMap<String, Object>();

/*	String orderSeqNo = "";
	orderSeqNo = labHandlerService.generateOrderNumber(hospitalId);
	mapForDS.put("orderSeqNo", orderSeqNo);*/
	
	dataMap = medicalBoardHandlerService.addMedicalBoardForm10(masMedicalBoardProceedings,visitId);
	successfullyAdded = (Boolean) dataMap.get("successfullyAdded");
	if (successfullyAdded) {
		message = "Record Added Successfully!";
		jsp = "mb_medicalExamMsgForm10";
		map.put("medExamId", (Integer) dataMap.get("medExamId"));
	}
	if (!successfullyAdded) {
		message = "Some Problem Occured !!!";
		jsp = MEDICAL_BOARD_ERROR_MSG;
	}
	// }
	try {
		// map =
		// medicalExaminationBoardHandlerService.showMedicalExaminationBoardJsp();
	} catch (Exception e) {
		e.printStackTrace();
	}

	jsp += ".jsp";
	
	map.put("contentJsp", jsp);
	map.put("message", message);
	map.put("hinNoForreport", req.getParameter("hinNoForreport"));
	map.put("visitNumberForReport", Integer.parseInt(req
			.getParameter("visitNumberForReport")));
	map.put("serviceNo", serviceNo);
	map.put("visitId", visitId);
	return new ModelAndView("indexB", "map", map);

}
public void printMedicalBoardForm10(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> detailsMap = new HashMap<String, Object>();
	Map<String, Object> parameters = new HashMap<String, Object>();

	HttpSession session = request.getSession();

	int medExamId = 0;
	int visitId = 0;
	int hospitalId = 0;
	hospitalId = (Integer) session.getAttribute("hospitalId");
	if (request.getParameter("medExamId") != null
			&& !(request.getParameter("medExamId").equals(""))) {
		medExamId = Integer.parseInt(request.getParameter("medExamId"));
	}
	if (request.getParameter("visitId") != null
			&& !(request.getParameter("visitId").equals(""))) {
		visitId = Integer.parseInt(request.getParameter("visitId"));
	}
	
	parameters.put("visit_id", visitId);
	parameters.put("medExamId", medExamId);
	parameters.put("SUBREPORT_DIR", getServletContext().getRealPath(
			"/reports/"));
	detailsMap = medicalBoardHandlerService.getConnectionForReport();
	HMSUtil.generateReport("mb_form_10", parameters,
			(Connection) detailsMap.get("conn"), response,
			getServletContext());

}
//----------added by mansi------
public ModelAndView printMedicalBoard(HttpServletRequest request,HttpServletResponse response)
{
	 int medical_examination_id = 0;
	 String order_no = "";
	 String p1="";
	 String p2="";
	 String p3="";
	 String p4="";
	 String p5="";
	 String p6="";
	 String p7="";
	 int hin_id=0;
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String,Object> parameters= new HashMap<String,Object>();
	if(request.getParameter("medExamId")!= null){
		medical_examination_id = Integer.parseInt(request.getParameter("medExamId"));
		
	}
	if(request.getParameter("hin_id")!= null)
	 {
		hin_id= Integer.parseInt(request.getParameter("hin_id"));
	 }
	if(request.getParameter("order_no")!= null)
	  {
		order_no = request.getParameter("order_no");
		
	  }
	
	if(request.getParameter("p1") != null)
	  {
		p1 = request.getParameter("p1");			
		parameters.put("p1", p1);
	  }
	if(request.getParameter("p2") != null)
	  {
		 p2 = request.getParameter("p2");			
		 parameters.put("p2", p2); 			
	  }
	 if(request.getParameter("p3") != null)
	  { 			 
		 p3 = request.getParameter("p3");				 
		 parameters.put("p3", p3);			 
	  }
	 if(request.getParameter("p4") != null)
	  {  
		 p4 = request.getParameter("p4");				
		 parameters.put("p4", p4);
	  }
	 if(request.getParameter("p5") != null)
	  { 
		 p5 = request.getParameter("p5");
		 parameters.put("p5", p5);	
		 
	
	  }
	 String serviceNoForReport="" ;
	 if(request.getParameter("serviceNoForReport") != null){
		 serviceNoForReport = request.getParameter("serviceNoForReport");
		 parameters.put("serNo", serviceNoForReport);	
	 }
	
		 if(request.getParameter("p6") != null)
		  {  
			 p6 = request.getParameter("p6");				
			 parameters.put("p6", p6);
		  }
		 if(request.getParameter("p7") != null)
		  {  
			 p7 = request.getParameter("p7");				
			 parameters.put("p7", p7);
		  }
		 
	  
	Map<String,Object> detailsMap=new HashMap<String,Object>();
	detailsMap = medicalExamHandlerService.getConnectionForReport();		
	parameters.put("medical_examination_id", medical_examination_id);
	parameters.put("order_no", order_no);
	parameters.put("hin_id", hin_id);
	parameters.put("SUBREPORT_DIR", getServletContext().getRealPath(
	"/reports/")); 		  
	HMSUtil.generateReport("printReport", parameters, (Connection)detailsMap.get("conn") , response, getServletContext());			
	return null;
	
}
// By Mansi on 20 March 2013
public ModelAndView showMbStaticsReport(HttpServletRequest request,
		HttpServletResponse response) {
	Date fromDate = null;
	Date toDate = null;
	int hospitalId = 0;
	HttpSession session = request.getSession();
	Box box = null;
	if(session.getAttribute("box")!=null){
		box = (Box)session.getAttribute("box");
	}else{
		box = HMSUtil.getBox(request);
	}

	if (!box.getString(FROM_DATE).equals("")) {
		fromDate = HMSUtil.convertStringTypeDateToDateType(box.getString(FROM_DATE));
	}
	
	if (!box.getString(TO_DATE).equals("")) {
		toDate = HMSUtil.convertStringTypeDateToDateType(box.getString(TO_DATE));
	}
	String qry = "";
	

	if(request.getParameter("cmdId")!=null && !request.getParameter("cmdId").equals("0") && !request.getParameter("cmdId").equals("") && request.getParameter("hospitalId")!=null && request.getParameter("hospitalId").equals("0") && request.getParameter("hospitalId").equals("")){
		
		qry += "  and mh.command_id="+Integer.parseInt(request.getParameter("cmdId"));
	}else{
		if(request.getParameter("hospitalId")!=null && !request.getParameter("hospitalId").equals("0") && !request.getParameter("hospitalId").equals("")){
			hospitalId = Integer.parseInt(request.getParameter("hospitalId"));
		}else{
			hospitalId = (Integer)session.getAttribute("hospitalId");
		}
		qry += "  and mas_medical_examination_report.hospital_id="+hospitalId;
	}
	
	if(box.getInt(SERVICE_TYPE_ID)!=0){
		qry += " and mas_medical_examination_report.service_type_id = "+box.getInt(SERVICE_TYPE_ID)+"";
	}
   if(box.getInt("fromRankId")!=0 && box.getInt("toRankId")!=0){
		qry += " and mas_medical_examination_report.rank_id between "+box.getInt("fromRankId")+" and "+box.getInt("toRankId");
	}
   if(box.getString("fromServ")!="" && box.getString("toServ")!=""){
		qry += " and mas_medical_examination_report.total_service between "+box.getString("fromServ")+" and "+box.getString("toServ");
	}
   
	if(box.getInt(TRADE_ID)!=0){
		qry += " and mas_medical_examination_report.branch_id = "+box.getInt(TRADE_ID)+"";
	}
	if(box.getInt(UNIT_ID)!=0){
		qry += " and mas_medical_examination_report.unit_id = "+box.getInt(UNIT_ID)+"";
	}
	if(box.getInt(SECTION_ID)!=0){
		qry += " and mas_medical_examination_report.section_id = "+box.getInt(SECTION_ID)+"";
	}
		if (!(box.getString(SERVICE_NO).equals(""))) {
		qry += " and mas_medical_examination_report.serviceno='"+box.getString(SERVICE_NO)+"'";
	}
	
		if (box.getString("overWeight").equals("1")) {
			System.out.println("overweiht checked");
			qry += " and to_number(mas_medical_examination_report.overweight)>=20.0 and to_number(mas_medical_examination_report.overweight)<=30.0";
		}
	if(box.getInt("CategoryId")!=0){
				qry += " and mas_medical_examination_report.presentMedicalCategory = "+box.getInt("CategoryId")+"";
			}
	if ((box.getString("obesity").equals("o"))) {
		qry += " and mas_medical_examination_report.sd='"+box.getString("obesity")+"'";
	}
	if ((box.getString("rejection").equals("r"))) {
		qry += " and mas_medical_examination_report.status='"+box.getString("rejection")+"'";
	}
	if (!(box.getString("fromAge").equals("")) && !(box.getString("fromAgeUnit").equals(""))
			&& !(box.getString("toAge").equals("")) && !(box.getString("toAgeUnit").equals(""))) {
		String fromAge = box.getString("fromAge");
		String toAge = box.getString("toAge");
		qry +=" and substr(mas_medical_examination_report.apparent_age,0,INSTR(mas_medical_examination_report.apparent_age,' ')) >="+fromAge+" " +
				" and  substr(mas_medical_examination_report.apparent_age,INSTR(mas_medical_examination_report.apparent_age,' ')+1,length(mas_medical_examination_report.apparent_age))='"+box.getString("fromAgeUnit")+"'" +
				" and substr(mas_medical_examination_report.apparent_age,0,INSTR(mas_medical_examination_report.apparent_age,' ')) <="+toAge+" " +
				" and  substr(mas_medical_examination_report.apparent_age,INSTR(mas_medical_examination_report.apparent_age,' ')+1,length(mas_medical_examination_report.apparent_age))='"+box.getString("toAgeUnit")+"'";
		
	}
	System.out.println("mbqry="+qry);
	Map<String, Object> detailsMap = new HashMap<String, Object>();
	detailsMap = medicalBoardHandlerService.getConnectionForReport();
	Map<String, Object> parameters = new HashMap<String, Object>();
	parameters.put("fromDate", fromDate);
	parameters.put("toDate", toDate);
	parameters.put("qry", qry);
	parameters.put("hospitalId", hospitalId);
	HMSUtil.generateReport("MBSTATISTICS", parameters,
			(Connection) detailsMap.get("conn"), response,
			getServletContext());
	return null;
}


	public ModelAndView showForm44Jsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int hospitalId = 0;
		HttpSession session = request.getSession();
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		}
		map = medicalBoardHandlerService.showForm44Jsp(hospitalId);
		String jsp = "mb_form44.jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);

	}	
	
	public ModelAndView showForm44Report(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		Map<String, Object> parameters = new HashMap<String, Object>();
		if(request.getParameter(UNIT_ID)!=null && !request.getParameter(UNIT_ID).equals("")){
			parameters.put("unitId", Integer.parseInt(request.getParameter(UNIT_ID)));
		}
	
		detailsMap = medicalBoardHandlerService.getConnectionForReport();
	
		
		HMSUtil.generateReport("mb_form44Report", parameters,
				(Connection) detailsMap.get("conn"), response,
				getServletContext());
		return null;
	}
	public ModelAndView autoCompleteForIcdDiagnosis(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		String itemNameField = "";
		String autoHint = "";
		String jsp="";
		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			dataMap.put("autoHint", autoHint);
			map = medicalBoardHandlerService.autoCompleteForIcdDiagnosis(dataMap);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "mb_responseForIcd";
		return new ModelAndView(jsp, "map", map);

	}
// ---------------------------------
	public LabHandlerService getLabHandlerService() {
		return labHandlerService;
	}

	public void setLabHandlerService(LabHandlerService labHandlerService) {
		this.labHandlerService = labHandlerService;
	}

	public OPDHandlerService getOpdHandlerService() {
		return opdHandlerService;
	}

	public void setOpdHandlerService(OPDHandlerService opdHandlerService) {
		this.opdHandlerService = opdHandlerService;
	}

	
	//----------By Kiran Form 44 jsp after clicking on waiting list

	public ModelAndView showMbForm44JSP(HttpServletRequest request,HttpServletResponse response) {
			
		HttpSession session = request.getSession();
		int hospitalId=0;
		int visitId=0;
		if
		(request.getParameter("visitId")!= null)
		{
			visitId = Integer.parseInt(request.getParameter("visitId"));
		}
		if(session.getAttribute(HOSPITAL_ID) != null){
			hospitalId = (Integer)session.getAttribute(HOSPITAL_ID);
		}

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> generalMap = new HashMap<String, Object>();
		generalMap.put("hospitalId", hospitalId);
		generalMap.put("visitId", visitId);
	
		String jsp = "";
		String title = "";
		
		map = medicalBoardHandlerService.showMbForm44JSP(generalMap);
		jsp = "medical_board_form44";
		jsp += ".jsp";
		title = "form 44 Waiting List";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
			
	}

	public ModelAndView submitMedicalBoardForm44(HttpServletRequest request,HttpServletResponse response) 
	{
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		session = request.getSession();
		int hinNumber = 0;
		//int basisOfDiagnosis = 0;
		
		
		String clinical = "";
		String disposal = "";
		
	   int hospitalId =0;
	   
	   int hinId=0;
	   int visitId=0;
	   
	   if(session.getAttribute("hospitalId")!= null)
	     {	   hospitalId = Integer.parseInt(""+session.getAttribute("hospitalId"));
	     }
	   
	   /*int empId = 0;
		if (request.getParameter("empId") != null && request.getParameter("empId") != "") 
		{
			empId = Integer.parseInt(request.getParameter("empId"));
		}*/
		if (request.getParameter("hinNumber") != null
				&& !(request.getParameter("hinNumber").equals(""))) {
			hinNumber = Integer.parseInt(request.getParameter("hinNumber"));
		}
			
		if (request.getParameter("clinical") != null
				&& !(request.getParameter("clinical").equals(""))) {
			clinical = request.getParameter("clinical");
		}
		
		if (request.getParameter("disposal") != null
				&& !(request.getParameter("disposal").equals(""))) {
			disposal = request.getParameter("disposal");
		}
			
		if(request.getParameter("hinId") != null && !(request.getParameter("hinId").equals("")))
		{
			hinId=(Integer.parseInt(request.getParameter("hinId")));
		}
		
		if(request.getParameter("visitId") != null && !(request.getParameter("visitId").equals("")))
		{
			visitId=(Integer.parseInt(request.getParameter("visitId")));
		}
		
		
		map.put("hinNumber", hinNumber);
		
		map.put("hospitalId", hospitalId);
		//map.put("empId", empId);

		map.put("hinId", hinId);
		map.put("visitId", visitId);
		
		map.put("clinical", clinical);
		map.put("disposal", disposal);
		
		boolean successfullyAdded = medicalBoardHandlerService.submitMedicalBoardForm44(map);
		
		int vId = 0;
		if(map.get("vId")!=null)
		{
			vId= (Integer)map.get("vId");
		}
		
		String message = "";
		String jsp = "";
		String title = "";
		
		if (successfullyAdded) {
			message = "Record Added Successfully. Do You Want Print !!";
		} else {
			message = "Try Again !!";
		}
		jsp = "messageForForm44";
		title = "Submit Form 44";
		jsp += ".jsp";

		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("vId", vId);
		map.put("message", message);

		return new ModelAndView("indexB", "map", map);
	}
	
	//----------By Kiran Form 44 jsp after clicking on waiting list

	public ModelAndView showMbForm44IntermeJSP(HttpServletRequest request,HttpServletResponse response) {
			
		HttpSession session = request.getSession();
		int hospitalId=0;
		int visitId=0;
		if
		(request.getParameter("visitId")!= null)
		{
			visitId = Integer.parseInt(request.getParameter("visitId"));
		}
		if(session.getAttribute(HOSPITAL_ID) != null){
			hospitalId = (Integer)session.getAttribute(HOSPITAL_ID);
		}

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> generalMap = new HashMap<String, Object>();
		generalMap.put("hospitalId", hospitalId);
		generalMap.put("visitId", visitId);
	
		String jsp = "";
		String title = "";
		
		map = medicalBoardHandlerService.showMbForm44IntermeJSP(generalMap);
		jsp = "medical_board_form44_intreim_category";
		jsp += ".jsp";
		title = "form 44 Waiting List";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
			
		}

	public ModelAndView submitMedicalExamForm44Interme(HttpServletRequest request,HttpServletResponse response) 
	{
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		session = request.getSession();
		int hinNumber = 0;
		//int basisOfDiagnosis = 0;	
		
		String clinical = "";
		String disposal = "";
		
	   int hospitalId =0;	   
	   int hinId=0;
	   int visitId=0;
	   
	   if(session.getAttribute("hospitalId")!= null)
	     {	   hospitalId = Integer.parseInt(""+session.getAttribute("hospitalId"));
	     }
	   
	   /*int empId = 0;
		if (request.getParameter("empId") != null && request.getParameter("empId") != "") 
		{
			empId = Integer.parseInt(request.getParameter("empId"));
		}*/
		if (request.getParameter("hinNumber") != null && !(request.getParameter("hinNumber").equals(""))) 
		{
			hinNumber = Integer.parseInt(request.getParameter("hinNumber"));
		}
			
		if (request.getParameter("clinical") != null && !(request.getParameter("clinical").equals(""))) 
		{
			clinical = request.getParameter("clinical");
		}
		
		if (request.getParameter("disposal") != null && !(request.getParameter("disposal").equals(""))) 
		{
			disposal = request.getParameter("disposal");
		}
			
		if(request.getParameter("hinId") != null && !(request.getParameter("hinId").equals("")))
		{
			hinId=(Integer.parseInt(request.getParameter("hinId")));
		}
		
		if(request.getParameter("visitId") != null && !(request.getParameter("visitId").equals("")))
		{
			visitId=(Integer.parseInt(request.getParameter("visitId")));
		}
		
		map.put("hinNumber", hinNumber);		
		map.put("hospitalId", hospitalId);
		//map.put("empId", empId);
		map.put("hinId", hinId);
		map.put("visitId", visitId);
		
		map.put("clinical", clinical);
		map.put("disposal", disposal);
		
		boolean successfullyAdded = medicalBoardHandlerService.submitMedicalExamForm44Interme(map);
		int vId = 0;
		if(map.get("vId")!=null)
		{
			vId= (Integer)map.get("vId");
		}
		String message = "";
		String jsp = "";
		String title = "";
		
		if (successfullyAdded) {
			message = "Record Added Successfully. Do You Want Print !!";
		} else {
			message = "Try Again !!";
		}
		jsp = "messageForForm44";
		title = "Submit Form 44";
		jsp += ".jsp";

		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("vId", vId);
		map.put("message", message);

		return new ModelAndView("indexB", "map", map);
	}
	
public ModelAndView getListOfMedicalBoard(HttpServletRequest request,HttpServletResponse response)
	
	{
		
		Map<String,Object> map = new HashMap<String,Object>();
		HttpSession session = request.getSession();
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		List<Visit> meVisitList = new ArrayList<Visit>();
		Box box = HMSUtil.getBox(request);
		box.put("hospitalId", hospitalId);
		
		String ExamType="MedBoard";
		box.put("ExamType", ExamType);
		
		
		map = medicalExamHandlerService.getListOfMedicalExam(box);	
		
		if(map.get("meVisitList")!= null)
		{
			meVisitList =(ArrayList) map.get("meVisitList");
		}
		List<String> labResultStausList = new ArrayList<String>();
		
		if(map.get("labResultStausList") != null)
		{
			labResultStausList=(List<String>)map.get("labResultStausList");
		}
		
		int totalRecords = 0;
		if(map.get("totalRecords")!= null)
		{
			totalRecords = (Integer) map.get("totalRecords");
		}
		
		try
		{
			PrintWriter pw = response.getWriter();	
			
			pw.write("[");
			int counter=1;
			int i=0;
			
			for(Visit list : meVisitList)
			{
				
				
			    if(counter != meVisitList.size())
			    {
			    	String servicepatientName="";
			    	if(list.getHin().getPFirstName()!= null){
			    		servicepatientName=list.getHin().getSFirstName();
			    	}
			    	
			    	if(list.getHin().getSMiddleName()!= null){
			    		servicepatientName=servicepatientName+" "+list.getHin().getSMiddleName();
			    	}
			    	if(list.getHin().getSLastName()!= null)
			    	{
			    		servicepatientName=servicepatientName+" "+list.getHin().getSLastName();
			    	}
			    	
			    	String labResultStatus=labResultStausList.get(i);
			    	String ma_status="";
					if(labResultStatus.equalsIgnoreCase("no"))
					{
						ma_status="New";
					}else if(labResultStatus.equalsIgnoreCase("pending"))
					{
						ma_status="Investigation Pending";
					}else if(labResultStatus.equalsIgnoreCase("validated"))
					{
						ma_status="Result Validated";
					}
					
			    	
					pw.write("{\"Id\": \""+list.getId()+"\",\"visitDate\": \""+(list.getVisitDate() !=null?HMSUtil.changeDateToddMMyyyy(list.getVisitDate()):"")+"\",\"visitTime\": \""+(list.getVisitTime()!=null?list.getVisitTime():"")+"\",\"serviceNo\": \""+(list.getHin() != null?list.getHin().getServiceNo():"")+"\",\"rank\": \""+(list.getHin().getRank() != null?list.getHin().getRank().getRankName():"")+"\",\"name\": \""+servicepatientName+"\",\"cat\": \""+(list.getHin().getCategory()!=null?list.getHin().getCategory().getCategories():"-")+"\",\"examType\":\""+(list.getMedExamType()!=null?list.getMedExamType():"")+"\",\"contactNo\": \""+(list.getHin().getMobileNumber()!=null?list.getHin().getMobileNumber():"")+"\",\"ma_status\":\""+ma_status+"\",\"totalRecords\":\""+totalRecords+"\"},");
			    	
			    }
			    else
			    {		    	
			    	String servicepatientName="";
			    	if(list.getHin().getPFirstName()!= null){
			    		servicepatientName=list.getHin().getSFirstName();
			    	}
			    	
			    	if(list.getHin().getSMiddleName()!= null){
			    		servicepatientName=servicepatientName+" "+list.getHin().getSMiddleName();
			    	}
			    	if(list.getHin().getSLastName()!= null)
			    	{
			    		servicepatientName=servicepatientName+" "+list.getHin().getSLastName();
			    	}
			    	
			    	String labResultStatus=labResultStausList.get(i);
			    	String ma_status="";
					if(labResultStatus.equalsIgnoreCase("no"))
					{
						ma_status="New";
					}else if(labResultStatus.equalsIgnoreCase("pending"))
					{
						ma_status="Investigation Pending";
					}else if(labResultStatus.equalsIgnoreCase("validated"))
					{
						ma_status="Result Validated";
					}
			    	
					pw.write("{\"Id\": \""+list.getId()+"\",\"visitDate\": \""+(list.getVisitDate() !=null?HMSUtil.changeDateToddMMyyyy(list.getVisitDate()):"")+"\",\"visitTime\": \""+(list.getVisitTime()!=null?list.getVisitTime():"")+"\",\"serviceNo\": \""+(list.getHin() != null?list.getHin().getServiceNo():"")+"\",\"rank\": \""+(list.getHin().getRank() != null?list.getHin().getRank().getRankName():"")+"\",\"name\": \""+servicepatientName+"\",\"cat\": \""+(list.getHin().getCategory()!=null?list.getHin().getCategory().getCategories():"-")+"\",\"examType\":\""+(list.getMedExamType()!=null?list.getMedExamType():"")+"\",\"contactNo\": \""+(list.getHin().getMobileNumber()!=null?list.getHin().getMobileNumber():"")+"\",\"ma_status\":\""+ma_status+"\",\"totalRecords\":\""+totalRecords+"\"}");
			    	
			    	
			    }
			
			    counter++;	
			    i++;
			}
			
			
			pw.write("]");
			
			
		}
		
		catch(Exception e)
		{
			meVisitList.clear();
			labResultStausList.clear();
			e.printStackTrace();
		}	
		meVisitList.clear();
		labResultStausList.clear();
		return null;		
		

	}
	
}
