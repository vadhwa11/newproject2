/*
 * Copyright 2008 JK Technosoft Ltd. All rights reserved.
 * Use is subject to license terms.
 * StoresController.java
 * Purpose of the claas -  This is the Controller for Stores Module
 * @authors  Dinesh ,Dipali
 * Revision Date:
 * Revision By:
 * @version 2.0
 */
package jkt.hms.stores.controller;

import static jkt.hms.util.RequestConstants.*;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.math.BigDecimal;
import java.net.URLDecoder;
import java.sql.Connection;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Base64.Encoder;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Vector;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import javazoom.upload.MultipartFormDataRequest;
import javazoom.upload.UploadException;
import javazoom.upload.UploadFile;
import jkt.hms.masters.business.RcDetails;
import jkt.hms.masters.business.RcHeader;
import jkt.hms.masters.business.MasDepartment;
import jkt.hms.masters.business.MasEmployee;
import jkt.hms.masters.business.MasHospital;
import jkt.hms.masters.business.MasManufacturer;
import jkt.hms.masters.business.MasRank;
import jkt.hms.masters.business.MasStoreAirForceDepot;
import jkt.hms.masters.business.MasStoreBrand;
import jkt.hms.masters.business.MasStoreItem;
import jkt.hms.masters.business.MasStoreSection;
import jkt.hms.masters.business.MasStoreSupplier;
import jkt.hms.masters.business.MasUnit;
import jkt.hms.masters.business.OpdPatientDetails;
import jkt.hms.masters.business.Patient;
import jkt.hms.masters.business.PatientPrescriptionHeader;
import jkt.hms.masters.business.RcHeader;
import jkt.hms.masters.business.RcRequestDetails;
import jkt.hms.masters.business.RcRequestHeader;
import jkt.hms.masters.business.StoreAdjustmentM;
import jkt.hms.masters.business.StoreAdjustmentT;
import jkt.hms.masters.business.StoreBalanceM;
import jkt.hms.masters.business.StoreBalanceT;
import jkt.hms.masters.business.StoreBoo;
import jkt.hms.masters.business.StoreBooMember;
import jkt.hms.masters.business.StoreDefectiveDrugM;
import jkt.hms.masters.business.StoreDefectiveDrugT;
import jkt.hms.masters.business.StoreDrugCost;
import jkt.hms.masters.business.StoreGrnM;
import jkt.hms.masters.business.StoreGrnT;
import jkt.hms.masters.business.StoreIndentM;
import jkt.hms.masters.business.StoreIndentSocTracker;
import jkt.hms.masters.business.StoreIndentT;
import jkt.hms.masters.business.StoreInternalIndentM;
import jkt.hms.masters.business.StoreInternalIndentT;
import jkt.hms.masters.business.StoreInternalReturnM;
import jkt.hms.masters.business.StoreInternalReturnT;
import jkt.hms.masters.business.StoreIssueM;
import jkt.hms.masters.business.StoreIssueT;
import jkt.hms.masters.business.StoreItemBatchStock;
import jkt.hms.masters.business.StoreLoaninM;
import jkt.hms.masters.business.StoreLoaninT;
import jkt.hms.masters.business.StoreMaterialPurchaseReqM;
import jkt.hms.masters.business.StoreMaterialPurchaseReqT;
import jkt.hms.masters.business.StoreMedicineReturnM;
import jkt.hms.masters.business.StoreMedicineReturnT;
import jkt.hms.masters.business.StoreMmfDepartmentM;
import jkt.hms.masters.business.StoreOpPatientIssueM;
import jkt.hms.masters.business.StoreOpPatientIssueT;
import jkt.hms.masters.business.StorePoDetail;
import jkt.hms.masters.business.StorePoHeader;
import jkt.hms.masters.business.StoreProformaDetail;
import jkt.hms.masters.business.StoreProformaHeader;
import jkt.hms.masters.business.StoreQuotationRequestM;
import jkt.hms.masters.business.StoreQuotationRequestT;
import jkt.hms.masters.business.StoreSampleTestingDetail;
import jkt.hms.masters.business.StoreSampleTestingEntry;
import jkt.hms.masters.business.StoreSetup;
import jkt.hms.masters.business.StoreStockTakingM;
import jkt.hms.masters.business.StoreStockTakingT;
import jkt.hms.masters.business.StoreSupplyOrderEntry;
import jkt.hms.masters.business.StoreTenderT;
import jkt.hms.masters.business.UserButtonRights;
import jkt.hms.masters.business.Users;
import jkt.hms.masters.business.Visit;
import jkt.hms.masters.handler.CommonMasterHandlerService;
import jkt.hms.opd.handler.OPDHandlerService;
import jkt.hms.stores.handler.StoresHandlerService;
import jkt.hms.util.Box;
import jkt.hms.util.HMSUtil;
import jkt.hms.util.JKTRequestUtils;
import jkt.hms.util.PagedArray;
import jkt.hms.util.RequestConstants;
import jxl.Cell;
import jxl.DateCell;
import jxl.WorkbookSettings;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.util.JRLoader;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.hibernate.criterion.Restrictions;
import org.springframework.web.bind.ServletRequestBindingException;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.multiaction.MultiActionController;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
public class StoresController extends MultiActionController {
	/*
	 * Instance variables
	 */
	StoresHandlerService storesHandlerService = null;
	CommonMasterHandlerService commonMasterHandlerService = null;
	OPDHandlerService opdHandlerService = null;

	HttpSession session = null;
	Map<String, Object> map = new HashMap<String, Object>();
	String jsp = "";
	String title = "";
	String pojoPropertyName = "";
	String pojoPropertyCode = "";
	String pojoName = "";
	String userName = "";
	String currentDate = "";
	String currentTime = "";
	String message = "";
	String url = "";
	private String item_name;
	// ==========================================================================================

	// ==========================================================================================
	// ========================== GRN,LOAN IN , BOO ,DEFECTIVE DRUGS By
	// ABHA=====================

	// For adding Grn
	/*
	 * public ModelAndView submitGrn(HttpServletRequest request,
	 * HttpServletResponse response) { Box box = HMSUtil.getBox(request);
	 * session = request.getSession();
	 *
	 * Map<String, Object> map = new HashMap<String, Object>(); Map<String,
	 * Object> infoMap = new HashMap<String, Object>(); Map<String, Object>
	 * dataMap = new HashMap<String, Object>(); StoreGrnM storeGrnM=new
	 * StoreGrnM(); StoreItemBatchStock storeItemBatchStock= new
	 * StoreItemBatchStock(); StoreIndentM storeIndentM2 = new StoreIndentM();
	 * StorePoHeader storePoHeader2= new StorePoHeader();
	 *
	 * int deptId =0;
	 *
	 * if(session.getAttribute("deptId") !=null)
	 * deptId=Integer.parseInt(""+session.getAttribute("deptId"));
	 *
	 * int hospitalId = 0; if(session.getAttribute("hospitalId") !=null)
	 * hospitalId=Integer.parseInt(""+session.getAttribute("hospitalId"));
	 *
	 * //List addOrUpdate = new ArrayList(); String grnNo=""; int rows=0; String
	 * sourceOfSupply=""; Date grnDate =new Date(); int grnId=0; //int unitId=0;
	 * int indentId=0; int poId=0; String howReceived=""; Date
	 * dateReceivedSurplus=new Date(); String rrNo=""; String
	 * modeOfConveyance=""; int employeeId=0; String invoiceNo=""; Date
	 * invoiceDate=new Date(); BigDecimal invoiceAmount =null; BigDecimal
	 * freightDuty=null; BigDecimal exciseDuty=null; BigDecimal octroi=null;
	 * BigDecimal customDuty=null; BigDecimal insuranceCharge=null; BigDecimal
	 * otherCharges=null; BigDecimal grnValue=null; BigDecimal
	 * roundOffValue=null; BigDecimal grnAmount=null; BigDecimal totalAmount=
	 * null; int supplierId=0; String encodedBy=""; Date encodedDate = null;
	 * String lastChgBy="A"; Date lastChgDate = null; String lastChgTime="";
	 * String atSoNo=""; //int departmentId=0; String remarks=""; String date =
	 * ""; String time = ""; String choice=""; int noOfRows=0; int pageNo=1;
	 * String buttonFlag=""; try { if (request.getParameter("pageNo") != null)
	 * pageNo= Integer.parseInt(request.getParameter("pageNo")); if
	 * (request.getParameter("noOfRows") != null) noOfRows =
	 * Integer.parseInt(request.getParameter("noOfRows")); if
	 * (request.getParameter(GRN_ID) != null) grnId=
	 * Integer.parseInt(request.getParameter(GRN_ID));
	 *
	 * if (request.getParameter(SUPPLIER_ID) != null &&
	 * !request.getParameter(SUPPLIER_ID).equals("0")) supplierId =
	 * Integer.parseInt(request.getParameter(SUPPLIER_ID));
	 *
	 * if (request.getParameter(EMPLOYEE_ID) != null &&
	 * !request.getParameter(EMPLOYEE_ID).equals("0")) { employeeId =
	 * Integer.parseInt(request.getParameter(EMPLOYEE_ID)); }
	 * if(request.getParameter("buttonFlag") != null){ buttonFlag =
	 * request.getParameter("buttonFlag"); }
	 *
	 * if(request.getParameter(SOURCE_OF_SUPPLY).equals("p")) { if
	 * (request.getParameter(INDENT_ID) != null) {
	 * indentId=Integer.parseInt((request.getParameter(INDENT_ID))); } if
	 * (request.getParameter(SUPPLIER_ID) != null) {
	 * supplierId=Integer.parseInt((request.getParameter(SUPPLIER_ID))); } }
	 * else if(request.getParameter(SOURCE_OF_SUPPLY).equals("l")) { if
	 * (request.getParameter(INDENT_ID) != null) { indentId=Integer.parseInt(
	 * (request.getParameter(INDENT_ID))); }
	 *
	 * if (request.getParameter(SUPPLIER_ID) != null) {
	 * supplierId=Integer.parseInt( (request.getParameter(SUPPLIER_ID))); } }
	 * else if(request.getParameter(SOURCE_OF_SUPPLY).equals("a")) { if
	 * (request.getParameter(INDENT_ID) != null) {
	 * indentId=Integer.parseInt((request.getParameter(INDENT_ID))); } if
	 * (request.getParameter(SUPPLIER_ID) != null) {
	 * supplierId=Integer.parseInt((request.getParameter(SUPPLIER_ID))); } }
	 * else if (request.getParameter(SOURCE_OF_SUPPLY).equals("o")) { if
	 * (request.getParameter(SUPPLIER_ID) != null) {
	 * supplierId=Integer.parseInt((request.getParameter(SUPPLIER_ID))); } }
	 *
	 * if (request.getParameter(GRN_NO) != null) { grnNo=
	 * (request.getParameter(GRN_NO)); } if (request.getParameter(INVOICE_NO) !=
	 * null) { invoiceNo= (request.getParameter(INVOICE_NO)); } if
	 * (request.getParameter(REMARKS) != null) { remarks=
	 * request.getParameter(REMARKS); } if (request.getParameter(RR_NO) != null)
	 * { rrNo= request.getParameter(RR_NO); } if
	 * (request.getParameter(MODE_OF_CONVEYANCE) != null) { modeOfConveyance=
	 * request.getParameter(MODE_OF_CONVEYANCE); } if
	 * (request.getParameter(SUPPLY_ORDER_NO) != null) { atSoNo=
	 * request.getParameter(SUPPLY_ORDER_NO); } if
	 * (request.getParameter(HOW_RECEIVED) != null) { howReceived=
	 * request.getParameter(HOW_RECEIVED); } if
	 * (request.getParameter(SOURCE_OF_SUPPLY) != null) { sourceOfSupply=
	 * request.getParameter(SOURCE_OF_SUPPLY); } }catch (Exception e) {
	 * e.printStackTrace(); }
	 *
	 * try { String te=""; if (request.getParameter(GRN_DATE) != null) { te=
	 * (String)(request.getParameter(GRN_DATE));
	 *
	 * SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
	 * SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
	 * String
	 * date4MySQL=formatterOut.format(formatterIn.parse(request.getParameter
	 * (GRN_DATE))); grnDate = java.sql.Date.valueOf(date4MySQL); } } catch
	 * (Exception e) { e.printStackTrace(); }
	 *
	 * try { String teinvoice=""; if (request.getParameter(INVOICE_DATE) !=
	 * null) { teinvoice= (String)(request.getParameter(INVOICE_DATE));
	 * SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
	 * SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
	 * String
	 * date4MySQL=formatterOut.format(formatterIn.parse(request.getParameter
	 * (INVOICE_DATE))); invoiceDate = java.sql.Date.valueOf(date4MySQL); } }
	 * catch (Exception e) { e.printStackTrace(); }
	 *
	 *
	 * Map<String, Object> utilMap = new HashMap<String, Object>(); utilMap =
	 * (Map<String, Object>)HMSUtil.getCurrentDateAndTime(); date =
	 * (String)utilMap.get("currentDate"); time =
	 * (String)utilMap.get("currentTime");
	 *
	 *
	 * if (request.getParameter(INVOICE_AMOUNT) != null &&
	 * !request.getParameter(INVOICE_AMOUNT).equals("")) { invoiceAmount =new
	 * BigDecimal(request.getParameter(INVOICE_AMOUNT));
	 * storeGrnM.setInvoiceAmount(invoiceAmount); }
	 *
	 * if (request.getParameter(FREIGHT_DUTY) != null &&
	 * !request.getParameter(FREIGHT_DUTY).equals("")) { freightDuty= new
	 * BigDecimal(request.getParameter(FREIGHT_DUTY)); } if
	 * (request.getParameter(EXCISE_DUTY) != null &&
	 * !request.getParameter(EXCISE_DUTY).equals("")) { exciseDuty=new
	 * BigDecimal(request.getParameter(EXCISE_DUTY)); }
	 *
	 * if (request.getParameter(OCTROI) != null &&
	 * !request.getParameter(OCTROI).equals("")) { octroi=new
	 * BigDecimal(request.getParameter(OCTROI)); } if
	 * (request.getParameter(CUSTOM_DUTY) != null &&
	 * !request.getParameter(CUSTOM_DUTY).equals("")) { customDuty= new
	 * BigDecimal(request.getParameter(CUSTOM_DUTY));
	 * storeGrnM.setCustomDuty(customDuty); } if
	 * (request.getParameter(INSURANCE_CHARGES) != null &&
	 * !request.getParameter(INSURANCE_CHARGES).equals("")) {
	 * insuranceCharge=new BigDecimal(request.getParameter(INSURANCE_CHARGES));
	 * }
	 *
	 * if (request.getParameter(OTHER_CHARGES) != null &&
	 * !request.getParameter(OTHER_CHARGES).equals("")) { otherCharges=new
	 * BigDecimal(request.getParameter(OTHER_CHARGES)); }
	 *
	 * if (request.getParameter(GRN_VALUE) != null &&
	 * !request.getParameter(GRN_VALUE).equals("")) { grnValue= new
	 * BigDecimal(request.getParameter(GRN_VALUE));
	 * storeGrnM.setGrnValue(grnValue); } else{ storeGrnM.setGrnValue(null); }
	 *
	 * if (request.getParameter(TOTAL_AMOUNT) != null &&
	 * !request.getParameter(TOTAL_AMOUNT).equals("")) { totalAmount=new
	 * BigDecimal(request.getParameter(TOTAL_AMOUNT));
	 * storeGrnM.setGrnAmount(totalAmount); }
	 *
	 *
	 * String headerStored = "no";
	 *
	 * if(pageNo==1) { storeGrnM.setGrnNo(grnNo);
	 * storeGrnM.setDateReceivedSurplus(dateReceivedSurplus);
	 *
	 * if(request.getParameter(SOURCE_OF_SUPPLY).equals("p")) { StoreIndentM
	 * storeIndentM= new StoreIndentM(); storeIndentM.setId(indentId);
	 * storeGrnM.setIndent(storeIndentM);
	 *
	 * MasStoreSupplier masStoreSupplier2 = new MasStoreSupplier();
	 * masStoreSupplier2.setId(supplierId);
	 * storeGrnM.setSupplier(masStoreSupplier2); } else
	 * if(request.getParameter(SOURCE_OF_SUPPLY).equals("l")) { StorePoHeader
	 * storePoHeader= new StorePoHeader(); storePoHeader.setId(indentId);
	 * storeGrnM.setPo(storePoHeader);
	 *
	 * MasStoreSupplier masStoreSupplier2 = new MasStoreSupplier();
	 * masStoreSupplier2.setId(supplierId);
	 * storeGrnM.setSupplier(masStoreSupplier2); } else
	 * if(request.getParameter(SOURCE_OF_SUPPLY).equals("a")) { StoreIndentM
	 * storeIndentM= new StoreIndentM(); storeIndentM.setId(indentId);
	 * storeGrnM.setIndent(storeIndentM); MasStoreAirForceDepot
	 * masStoreAirForceDepot = new MasStoreAirForceDepot();
	 * masStoreAirForceDepot.setId(supplierId);
	 * storeGrnM.setUnit(masStoreAirForceDepot); } else
	 * if(request.getParameter(SOURCE_OF_SUPPLY).equals("o")) {
	 * MasStoreAirForceDepot masStoreAirForceDepot = new
	 * MasStoreAirForceDepot(); masStoreAirForceDepot.setId(supplierId);
	 * storeGrnM.setUnit(masStoreAirForceDepot); storeGrnM.setIndent(null);
	 * storeGrnM.setPo(null); } else
	 * if(request.getParameter(SOURCE_OF_SUPPLY).equals("w")) {
	 * storeGrnM.setIndent(null); storeGrnM.setPo(null); }
	 *
	 * MasEmployee masEmployee = new MasEmployee();
	 * masEmployee.setId(employeeId); storeGrnM.setEmployee(masEmployee);
	 *
	 * MasDepartment masDepartment = new MasDepartment();
	 * masDepartment.setId(deptId); storeGrnM.setDepartment(masDepartment);
	 *
	 * if(remarks !=""){ storeGrnM.setRemarks(remarks); }else{
	 * storeGrnM.setRemarks(null); } if(exciseDuty !=null){
	 * storeGrnM.setExciseDuty(exciseDuty); }else{
	 * storeGrnM.setExciseDuty(null); } storeGrnM.setFreightDuty(freightDuty);
	 * storeGrnM.setGrnDate(grnDate);
	 *
	 * storeGrnM.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(date));
	 * storeGrnM.setLastChgTime(time);
	 *
	 * if(atSoNo !=""){ storeGrnM.setAtSoNo(atSoNo); }else{
	 * storeGrnM.setAtSoNo(null); }
	 *
	 * storeGrnM.setHowReceived(howReceived);
	 * storeGrnM.setInsuranceCharge(insuranceCharge);
	 * storeGrnM.setInvoiceDate(invoiceDate); if(invoiceNo !=""){
	 * storeGrnM.setInvoiceNo(invoiceNo); }else{ storeGrnM.setInvoiceNo(null); }
	 * storeGrnM.setModeOfConveyance(modeOfConveyance);
	 * storeGrnM.setOctroi(octroi); storeGrnM.setOtherCharges(otherCharges);
	 * storeGrnM.setReceiveType(sourceOfSupply);
	 * //storeGrnM.setRoundOffValue(roundOffValue); storeGrnM.setRrNo(rrNo);
	 * storeGrnM.setStatus("o");
	 *
	 * MasHospital masHospital= new MasHospital();
	 * masHospital.setId(hospitalId); storeGrnM.setHospital(masHospital);
	 *
	 * storeGrnM.setLastChgBy("admin"); } else { headerStored="yes";
	 * infoMap.put("headerStored", headerStored); } int length = 0;
	 * List<StoreGrnT> storeGrnTlist = new ArrayList<StoreGrnT>();
	 *
	 * try { int srNo[] =
	 * JKTRequestUtils.getRequiredIntParameters(request,SR_NO); int
	 * itemIdArray[] =
	 * JKTRequestUtils.getRequiredIntParameters(request,ITEM_ID);
	 *
	 * String
	 * lotNoArr[]=JKTRequestUtils.getRequiredStringParameters(request,LOT_NO);
	 * String batchNoArr[] =
	 * JKTRequestUtils.getRequiredStringParameters(request,BATCH_NO);
	 *
	 *
	 * Vector manufacturerIdArray = box.getVector(MANUFACTURER_ID); Vector
	 * brandIdArray = box.getVector(BRAND_ID); Vector freeQtyTemp =
	 * box.getVector(FREE_QTY); Vector freeItemArr = box.getVector(FREE_ITEM);
	 * Vector manuDate = box.getVector(MANUFACTURING_DATE); Vector expdate =
	 * box.getVector(EXPIRY_DATE); Vector mdq = box.getVector("mdq"); Vector
	 * dispenseType = box.getVector("dipenseType"); Vector ratePerMdq =
	 * box.getVector("ratePerMdq");
	 *
	 *
	 * BigDecimal[] quantityReceivedArray = new BigDecimal[100]; BigDecimal[]
	 * taxArr = new BigDecimal[100]; BigDecimal[] unitRateArr = new
	 * BigDecimal[100]; BigDecimal[] discountArr = new BigDecimal[100];
	 * BigDecimal[] amountArr = new BigDecimal[100]; BigDecimal[] costPrice =
	 * new BigDecimal[100];
	 *
	 * String yy[] = JKTRequestUtils.getRequiredStringParameters(request,
	 * TAX_PERCENT); int yyLen = yy.length; for( int i = 0 ;i < yyLen ; i++){
	 * if(yy[i]!= null || yy[i]!=""){ BigDecimal val = new BigDecimal(yy[i]);
	 * taxArr[i] = val; } }
	 *
	 * String tt[] = JKTRequestUtils.getRequiredStringParameters(request,
	 * UNIT_RATE); int ttLen = tt.length; for( int i = 0 ;i < ttLen ; i++) {
	 * BigDecimal val = new BigDecimal(tt[i]); unitRateArr[i] = val; } String
	 * zz[] = JKTRequestUtils.getRequiredStringParameters(request,
	 * DISCOUNT_PERCENTAGE); int zzLen = zz.length; for( int i = 0 ;i < zzLen ;
	 * i++){ if(zz[i]!= null || zz[i] !=""){ BigDecimal val = new
	 * BigDecimal(zz[i]); discountArr[i] = val; } } String qq[] =
	 * JKTRequestUtils.getRequiredStringParameters(request, AMOUNT); int qqLen =
	 * qq.length; for( int i = 0 ;i < qqLen ; i++){ BigDecimal val = new
	 * BigDecimal(qq[i]); amountArr[i] = val; } String mm[] =
	 * JKTRequestUtils.getRequiredStringParameters(request, QUANTITY_RECEIVED);
	 * int mmLen = mm.length; for( int i = 0 ;i < mmLen ; i++){ BigDecimal val =
	 * new BigDecimal(mm[i]); quantityReceivedArray[i] = val; }
	 *
	 * String gg[] = JKTRequestUtils.getRequiredStringParameters(request,
	 * COST_PRICE); int ggLen = gg.length;
	 *
	 * for( int i = 0 ;i < ggLen ; i++){ BigDecimal val = new BigDecimal(gg[i]);
	 * costPrice[i] = val; }
	 *
	 * int mdq_value = 0; int free_qty = 0; Vector freeQty = new Vector(25);
	 * for( int i = 0 ;i < mdq.size(); i++) { if
	 * (!mdq.get(i).toString().equalsIgnoreCase("")) { int item_id =
	 * itemIdArray[i]; BigDecimal qty = new BigDecimal(mm[i]); BigDecimal amount
	 * = new BigDecimal(qq[i]); mdq_value =
	 * Integer.parseInt(mdq.get(i).toString()); if
	 * (freeQtyTemp.get(i).toString().equalsIgnoreCase("")) free_qty = 0; else
	 * free_qty = Integer.parseInt(freeQtyTemp.get(i).toString());
	 * Map<String,Object> paramMap = new HashMap<String,Object>();
	 * paramMap.put("itemId", item_id); paramMap.put("qty", qty);
	 * paramMap.put("mdq", mdq_value); paramMap.put("amount", amount);
	 * paramMap.put("freeQty", free_qty); map =
	 * storesHandlerService.getActualQtyAsPerAU(paramMap);
	 * quantityReceivedArray[i] = new
	 * BigDecimal(map.get("actualQuantity").toString()); costPrice[i] = new
	 * BigDecimal(map.get("costPrice").toString()); freeQty.add(i,
	 * map.get("freeQty").toString()); } else { quantityReceivedArray[i] = new
	 * BigDecimal(0); costPrice[i] = new BigDecimal(0); freeQty.add(i, 0); } }
	 *
	 * if(buttonFlag.equals("next")){ length = 10; }else{ length = noOfRows; }
	 *
	 *
	 * for(int i = 0 ; i<length ; i++) { //System.out.println("srNo " + srNo[i] +
	 * "itemid" + itemIdArray[i]+ "cost price " +costPrice[i]);
	 * if(itemIdArray[i]!=0) { StoreGrnT storeGrnTObj=new StoreGrnT();
	 * storeGrnTObj.setSerialNo(srNo[i]);
	 *
	 * try { storeGrnTObj.setFreeQty(new Integer(freeQty.get(i).toString())); }
	 * catch(Exception e) { storeGrnTObj.setFreeQty(new Integer(0)); }
	 *
	 *
	 * storeGrnTObj.setFreeItem(freeItemArr.get(i).toString()); MasStoreItem
	 * masItem = new MasStoreItem(); masItem.setId(itemIdArray[i]);
	 * storeGrnTObj.setItem(masItem);
	 *
	 * if(manufacturerIdArray.get(i).toString() != "") { MasManufacturer
	 * masManufacturer= new MasManufacturer();
	 * masManufacturer.setId(Integer.parseInt
	 * (manufacturerIdArray.get(i).toString()));
	 * storeGrnTObj.setManufacturer(masManufacturer); } else {
	 * storeGrnTObj.setManufacturer(null); }
	 *
	 * if(brandIdArray.get(i).toString() != "" ) { MasStoreBrand masStoreBrand =
	 * new MasStoreBrand();
	 * masStoreBrand.setId(Integer.parseInt(brandIdArray.get(i).toString()));
	 * storeGrnTObj.setBrand(masStoreBrand); } else {
	 * storeGrnTObj.setBrand(null); }
	 *
	 * storeGrnTObj.setReceivedQty(quantityReceivedArray[i]);
	 * storeGrnTObj.setFinalCostPrice(costPrice[i]);
	 * storeGrnTObj.setTax(taxArr[i]); storeGrnTObj.setDiscount(discountArr[i]);
	 * storeGrnTObj.setAmountValue(amountArr[i]);
	 *
	 * storeGrnTObj.setUnitRate(unitRateArr[i]);
	 *
	 * if(batchNoArr[i].equals("emptyString")) storeGrnTObj.setBatchNo(""); else
	 * storeGrnTObj.setBatchNo(batchNoArr[i]);
	 *
	 *
	 * if(lotNoArr[i].equals("emptyString1"))
	 * storeGrnTObj.setLotNo(brandIdArray.get(i).toString()+","+
	 * batchNoArr[i]+","+itemIdArray[i]); else
	 * storeGrnTObj.setLotNo(lotNoArr[i]);
	 *
	 * if(!manuDate.get(i).toString().equals("")){
	 * storeGrnTObj.setManufacturerDate(manuDate.get(i).toString()); } else{
	 * storeGrnTObj.setManufacturerDate(null); }
	 *
	 *
	 * if(!expdate.get(i).toString().equals("")) {
	 * storeGrnTObj.setExpiryDate(HMSUtil
	 * .convertStringTypeDateToDateType(expdate.get(i).toString())); } else {
	 * storeGrnTObj.setExpiryDate(null); }
	 *
	 * //System.out.println("costPrice[i] "+costPrice[i]);
	 *
	 *
	 * // add mdq, dispense type, rate per mdq
	 * storeGrnTObj.setDispType(dispenseType.get(i).toString()); try {
	 * storeGrnTObj.setMdqValue(new Integer(mdq.get(i).toString())); }
	 * catch(Exception e) { storeGrnTObj.setMdqValue(new Integer(0)); } try {
	 * storeGrnTObj.setRatePerMdq(new BigDecimal(ratePerMdq.get(i).toString()));
	 * } catch(Exception e) { storeGrnTObj.setRatePerMdq(new BigDecimal(0)); }
	 * storeGrnTlist.add(storeGrnTObj); }//end if } //end for loop } catch
	 * (Exception e) { e.printStackTrace(); }
	 *
	 * infoMap.put("pageNo",pageNo); infoMap.put("grnNo",grnNo);
	 * infoMap.put("grnId", grnId); //infoMap.put("addOrUpdate",addOrUpdate);
	 * infoMap.put("storeGrnM", storeGrnM); infoMap.put("storeIndentM2",
	 * storeIndentM2); infoMap.put("storePoHeader2", storePoHeader2);
	 * infoMap.put("storeItemBatchStock", storeItemBatchStock);
	 * infoMap.put("storeGrnTlist", storeGrnTlist); infoMap.put("indentId",
	 * indentId); infoMap.put("sourceOfSupply", sourceOfSupply);
	 * dataMap.put("deptId", deptId); dataMap.put("numberOfRecordsInLoanIn",
	 * box.getInt("numberOfRecordsInLoanIn")); boolean flag=false; try{
	 * flag=storesHandlerService.addGrns(infoMap, dataMap);
	 *
	 * }catch (Exception e) { e.printStackTrace(); } if(map.get("flag") !=
	 * null){ flag = (Boolean)map.get("flag"); }
	 *
	 * String messageTOBeVisibleToTheUser="";
	 *
	 *
	 *
	 * if(flag){ if(buttonFlag.equals("next")){ jsp = GRN_JSP; pageNo++;
	 * messageTOBeVisibleToTheUser = "CRV created Successfully"; map =
	 * storesHandlerService.showGrnJsp(box, dataMap); if(map.get("grnId") !=
	 * null){ grnId = (Integer)map.get("grnId"); } List<StoreGrnM> grnMList =
	 * storesHandlerService.getGrn(grnId); map.put("grnMList", grnMList);
	 *
	 * }else{ jsp = STORES_MESSAGE_JSP; pageNo++;
	 * messageTOBeVisibleToTheUser="CRV created Successfully";
	 * url="/hms/hms/stores?method=showGrnJsp"; } }else {
	 * messageTOBeVisibleToTheUser = "CRV not created"; }
	 *
	 * if (flag) { messageTOBeVisibleToTheUser = "CRV created Successfully"; map
	 * = storesHandlerService.showGrnJsp(box, dataMap); } else {
	 * messageTOBeVisibleToTheUser = "CRV not created"; map =
	 * storesHandlerService.showGrnJsp(box, dataMap); }
	 *
	 * jsp=GRN_JSP; jsp += ".jsp"; //url="/hms/hms/stores?method=showGrnJsp";
	 * //map.put("grnNo",grnNo); map.put("pageNo",pageNo);
	 * map.put("contentJsp",jsp); //map.put("url", url); //map.put("max",
	 * grnNo);
	 * map.put("messageTOBeVisibleToTheUser",messageTOBeVisibleToTheUser);
	 * return new ModelAndView("index", "map", map); }
	 */
	// For searching Grn on basis of GRN No

	// For modifying GRN
	/*
	 * public ModelAndView modifyGrn(HttpServletRequest request,
	 * HttpServletResponse response){ //System.out.println("inside controller of
	 * modify Grn"); Map<String, Object> dataMap = new HashMap<String,
	 * Object>(); Box box = HMSUtil.getBox(request); Map<String, Object> map =
	 * new HashMap<String, Object>(); Map<String, Object> map2 = new
	 * HashMap<String, Object>(); jsp = MODIFY_GRN_JSP; jsp += ".jsp"; int
	 * radio_str=0; if (request.getParameter("parent") != null) { radio_str
	 * =Integer.parseInt( request.getParameter("parent"));
	 * map=(Map)storesHandlerService.getGrnModifyMap(radio_str); }
	 * List<StoreGrnM> searchGrnList= new ArrayList<StoreGrnM>();
	 *
	 * map2=storesHandlerService.showGrnJsp(box, dataMap); searchGrnList=(List)
	 * map2.get("searchGrnList"); map.put("searchGrnList", searchGrnList);
	 * map.put("contentJsp",jsp); map.put("title", title);
	 * map.put("radio_str",radio_str); return new ModelAndView("index","map",
	 * map); }
	 */

	// For updating GRN
	/*
	 * public ModelAndView updateGrn(HttpServletRequest request,
	 * HttpServletResponse response) { Box box = HMSUtil.getBox(request);
	 * Map<String, Object> map = new HashMap<String, Object>(); Map<String,
	 * Object> infoMap = new HashMap<String, Object>(); Map<String, Object>
	 * dataMap = new HashMap<String, Object>(); StoreGrnM storeGrnM = new
	 * StoreGrnM(); StoreGrnT storeGrnT = new StoreGrnT();
	 * StoreItemLogTransaction storeItemLogTransaction = new
	 * StoreItemLogTransaction();
	 *
	 * String grnNo = "";
	 *
	 * String receiveType = ""; Date grnDate = new Date(); int grnId = 0; int
	 * unitId = 0; int poId = 0; String howReceived = ""; String challanNo = "";
	 * Date challanDate = new Date(); Date dateReceivedSurplus = new Date();
	 * String rrNo = ""; String modeOfConveyance = ""; int employeeId = 0;
	 * String invoiceNo = ""; Date invoiceDate = new Date(); BigDecimal
	 * invoiceAmount = null; BigDecimal freightDuty = null; BigDecimal
	 * exciseDuty = null; BigDecimal octroi = null; BigDecimal customDuty =
	 * null; BigDecimal insuranceCharge = null; BigDecimal otherCharges = null;
	 * BigDecimal grnValue = null; BigDecimal roundOffValue = null; BigDecimal
	 * grnAmount = null; int supplierId = 0; String encodedBy = ""; Date
	 * encodedDate = null; String lastChgBy = "A"; Date lastChgDate = null;
	 * String lastChgTime = ""; String atSoNo = ""; int departmentId = 0; int
	 * totalRecords = 0; String buttonFlag = ""; int noOfRows = 0; int pageNo =
	 * 1; String noDetailRecords = ""; try { if (request.getParameter("pageNo")
	 * != null) { pageNo = Integer.parseInt(request.getParameter("pageNo"));
	 *
	 * } if (request.getParameter(NO_OF_ROWS) != null) { noOfRows =
	 * Integer.parseInt(request.getParameter(NO_OF_ROWS));
	 * //System.out.println("noOfRows in update contro  " + noOfRows);
	 *
	 * } if (request.getParameter(NO_DETAIL_RECORDS) != null) { noDetailRecords
	 * = (request.getParameter(NO_DETAIL_RECORDS));
	 *
	 * } if (request.getParameter(GRN_ID) != null) { grnId =
	 * Integer.parseInt(request.getParameter(GRN_ID));
	 *
	 * } if (!request.getParameter(SUPPLIER_ID).equals("0")) { supplierId =
	 * Integer .parseInt(request.getParameter(SUPPLIER_ID));
	 * //System.out.println("supplierId " + supplierId);
	 *
	 * } if (request.getParameter("buttonFlag") != null) { buttonFlag =
	 * request.getParameter("buttonFlag"); } if (request.getParameter(GRN_NO) !=
	 * null) { grnNo = (request.getParameter(GRN_NO));
	 * //System.out.println("grnNo       2==" + grnNo); } if
	 * (request.getParameter("totalRecords") != null) { totalRecords =
	 * Integer.parseInt(request .getParameter("totalRecords"));
	 * //System.out.println("totalRecords       2==" + totalRecords); } if (pageNo
	 * != 1) { // grnId=storesHandlerService.getGrn(Integer.parseInt(grnNo)); }
	 *
	 * } catch (Exception e) {
	 * e.printStackTrace(); } try { String te = "";
	 *
	 * if (request.getParameter(GRN_DATE) != null) { te = (String)
	 * (request.getParameter(GRN_DATE)); //System.out.println("te  " + te);
	 *
	 * SimpleDateFormat formatterIn = new SimpleDateFormat( "dd/MM/yyyy");
	 * SimpleDateFormat formatterOut = new SimpleDateFormat( "yyyy-MM-dd");
	 * String date4MySQL = formatterOut.format(formatterIn
	 * .parse(request.getParameter(GRN_DATE))); grnDate =
	 * java.sql.Date.valueOf(date4MySQL); //System.out.println("grnDate       2=="
	 * + grnDate); } } catch (Exception e) { //System.out.println("" + e); }
	 *
	 * try { String techallan = ""; if (request.getParameter(CHALLAN_DATE) !=
	 * null) { techallan = (String) (request.getParameter(CHALLAN_DATE));
	 * //System.out.println("techallan " + techallan);
	 *
	 * SimpleDateFormat formatterIn = new SimpleDateFormat( "dd/MM/yyyy");
	 * SimpleDateFormat formatterOut = new SimpleDateFormat( "yyyy-MM-dd");
	 * String date4MySQL = formatterOut.format(formatterIn
	 * .parse(request.getParameter(CHALLAN_DATE))); challanDate =
	 * java.sql.Date.valueOf(date4MySQL);
	 * //System.out.println("challanDate       2==" + challanDate); } } catch
	 * (Exception e) { //System.out.println("222222222222222222             " +
	 * e); } try { String teinvoice = ""; if (request.getParameter(INVOICE_DATE)
	 * != null) { teinvoice = (String) (request.getParameter(INVOICE_DATE));
	 * //System.out.println("techallan " + teinvoice);
	 *
	 * SimpleDateFormat formatterIn = new SimpleDateFormat( "dd/MM/yyyy");
	 * SimpleDateFormat formatterOut = new SimpleDateFormat( "yyyy-MM-dd");
	 * String date4MySQL = formatterOut.format(formatterIn
	 * .parse(request.getParameter(INVOICE_DATE))); invoiceDate =
	 * java.sql.Date.valueOf(date4MySQL);
	 * //System.out.println("invoiceDate       2==" + invoiceDate);
	 *
	 * } } catch (Exception e) { //System.out.println("after catch " + e); }
	 *
	 * String headerStored = "no";
	 *
	 * if (pageNo == 1) { storeGrnM.setId(grnId); storeGrnM.setGrnNo(grnNo);
	 * storeGrnM.setChallanDate(challanDate); storeGrnM.setChallanNo(challanNo);
	 * storeGrnM.setCustomDuty(customDuty);
	 * storeGrnM.setDateReceivedSurplus(dateReceivedSurplus);
	 *
	 * MasStoreSupplier masStoreSupplier = new MasStoreSupplier();
	 * masStoreSupplier.setId(supplierId);
	 * storeGrnM.setSupplier(masStoreSupplier);
	 * storeItemLogTransaction.setSupplier(masStoreSupplier);
	 *
	 * storeGrnM.setExciseDuty(exciseDuty);
	 * storeGrnM.setFreightDuty(freightDuty); storeGrnM.setGrnAmount(grnAmount);
	 * storeGrnM.setGrnDate(grnDate); storeGrnM.setAtSoNo(atSoNo);
	 * storeGrnM.setGrnValue(grnValue); storeGrnM.setHowReceived(howReceived);
	 * storeGrnM.setInsuranceCharge(insuranceCharge);
	 * storeGrnM.setInvoiceAmount(invoiceAmount);
	 * storeGrnM.setInvoiceDate(invoiceDate); storeGrnM.setInvoiceNo(invoiceNo);
	 * storeGrnM.setModeOfConveyance(modeOfConveyance);
	 * storeGrnM.setOctroi(octroi); storeGrnM.setOtherCharges(otherCharges);
	 * storeGrnM.setReceiveType(receiveType);
	 * storeGrnM.setRoundOffValue(roundOffValue); storeGrnM.setRrNo(rrNo);
	 * storeGrnM.setStatus("y");
	 *
	 * } else {
	 *
	 * headerStored = "yes"; infoMap.put("headerStored", headerStored); } int
	 * length = 0; List<StoreGrnT> storeGrnTlist = new ArrayList<StoreGrnT>();
	 * List<StoreGrnT> storeGrnTlistAdd = new ArrayList<StoreGrnT>(); try {
	 *
	 * int srNo[] = JKTRequestUtils.getRequiredIntParameters(request, SR_NO);
	 * int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters( request,
	 * ITEM_ID); int quantityReceivedArray[] = JKTRequestUtils
	 * .getRequiredIntParameters(request, QUANTITY_RECEIVED); String
	 * batchNoArr[] = JKTRequestUtils.getRequiredStringParameters( request,
	 * BATCH_NO); // int brandIdArr[] = //
	 * JKTRequestUtils.getRequiredIntParameters(request,BRAND_ID); String
	 * freeItemArr[] = JKTRequestUtils.getRequiredStringParameters( request,
	 * FREE_ITEM); int freeQtyArr[] = JKTRequestUtils.getRequiredIntParameters(
	 * request, FREE_QTY); String expDateArr[] =
	 * JKTRequestUtils.getRequiredStringParameters( request, EXPIRY_DATE);
	 * BigDecimal[] taxArr = new BigDecimal[10]; BigDecimal[] unitRateArr = new
	 * BigDecimal[10]; BigDecimal[] discountArr = new BigDecimal[10];
	 * BigDecimal[] amountArr = new BigDecimal[10]; length = srNo.length;
	 *
	 * String yy[] = JKTRequestUtils.getRequiredStringParameters(request,
	 * TAX_PERCENT); int yyLen = yy.length; for (int i = 0; i < yyLen; i++) {
	 * BigDecimal val = new BigDecimal(yy[i]); taxArr[i] = val; } String tt[] =
	 * JKTRequestUtils.getRequiredStringParameters(request, UNIT_RATE); int
	 * ttLen = tt.length; for (int i = 0; i < ttLen; i++) { BigDecimal val = new
	 * BigDecimal(tt[i]); unitRateArr[i] = val; } String zz[] =
	 * JKTRequestUtils.getRequiredStringParameters(request,
	 * DISCOUNT_PERCENTAGE); int zzLen = zz.length; for (int i = 0; i < zzLen;
	 * i++) { BigDecimal val = new BigDecimal(zz[i]); discountArr[i] = val; }
	 * String qq[] = JKTRequestUtils.getRequiredStringParameters(request,
	 * AMOUNT); int qqLen = qq.length; for (int i = 0; i < qqLen; i++) {
	 * BigDecimal val = new BigDecimal(qq[i]); amountArr[i] = val; } if
	 * (noDetailRecords.equals("no")) { int idArray[] =
	 * JKTRequestUtils.getRequiredIntParameters( request, DETAIL_ID);
	 *
	 * int idArrayLength = idArray.length; for (int i = 0; i < length; i++) {
	 *
	 * if (idArrayLength > 0) {
	 *
	 * StoreGrnT storeGrnTObj = new StoreGrnT();
	 *
	 * storeGrnTObj.setId(idArray[i]); storeGrnTObj.setSerialNo(srNo[i]);
	 * storeGrnTObj.setBatchNo(batchNoArr[i]);
	 *
	 * storeGrnTObj.setDiscount(discountArr[i]); storeGrnTObj
	 * .setExpiryDate(HMSUtil .convertStringTypeDateToDateType(expDateArr[i]));
	 * storeGrnTObj.setFreeItem(freeItemArr[i]);
	 * storeGrnTObj.setFreeQty(freeQtyArr[i]); storeGrnTObj.setTax(taxArr[i]);
	 * storeGrnTObj.setUnitRate(unitRateArr[i]); MasStoreItem masStoreItem = new
	 * MasStoreItem(); masStoreItem.setId(itemIdArray[i]);
	 * storeGrnTObj.setItem(masStoreItem);
	 *
	 * StoreGrnM storeGrnM2 = new StoreGrnM(); storeGrnM2.setId(grnId);
	 * storeGrnTObj.setGrnMaster(storeGrnM2);
	 *
	 * storeGrnTlist.add(storeGrnTObj); } else { if (idArray[i] != 0) {
	 * StoreGrnT storeGrnTAdd = new StoreGrnT();
	 * storeGrnTAdd.setSerialNo(srNo[i]);
	 * storeGrnTAdd.setBatchNo(batchNoArr[i]); // storeGrnTAdd.setBrand(brand);
	 * storeGrnTAdd.setDiscount(discountArr[i]); storeGrnTAdd
	 * .setExpiryDate(HMSUtil .convertStringTypeDateToDateType(expDateArr[i]));
	 * storeGrnTAdd.setFreeItem(freeItemArr[i]);
	 * storeGrnTAdd.setFreeQty(freeQtyArr[i]); StoreGrnM storeGrnM2 = new
	 * StoreGrnM(); storeGrnM2.setId(grnId);
	 * storeGrnTAdd.setGrnMaster(storeGrnM2);
	 *
	 * MasStoreItem masStoreItem = new MasStoreItem();
	 * masStoreItem.setId(itemIdArray[i]); storeGrnTAdd.setItem(masStoreItem);
	 * storeGrnTAdd.setUnitRate(unitRateArr[i]);
	 * storeGrnTlistAdd.add(storeGrnTAdd); } } idArrayLength--;
	 *
	 * }
	 *
	 * } else { length = srNo.length; for (int i = 0; i < length; i++) {
	 * StoreGrnT storeGrnTAdd = new StoreGrnT();
	 * storeGrnTAdd.setSerialNo(srNo[i]);
	 * storeGrnTAdd.setBatchNo(batchNoArr[i]); // storeGrnTAdd.setBrand(brand);
	 * storeGrnTAdd.setDiscount(discountArr[i]);
	 * storeGrnTAdd.setExpiryDate(HMSUtil
	 * .convertStringTypeDateToDateType(expDateArr[i]));
	 * storeGrnTAdd.setFreeItem(freeItemArr[i]);
	 * storeGrnTAdd.setFreeQty(freeQtyArr[i]); StoreGrnM storeGrnM2 = new
	 * StoreGrnM(); storeGrnM2.setId(grnId);
	 * storeGrnTAdd.setGrnMaster(storeGrnM2);
	 *
	 * MasStoreItem masStoreItem = new MasStoreItem();
	 * masStoreItem.setId(itemIdArray[i]); storeGrnTAdd.setItem(masStoreItem);
	 * storeGrnTAdd.setUnitRate(unitRateArr[i]);
	 * storeGrnTlistAdd.add(storeGrnTAdd); }
	 *
	 * } } catch (Exception e) { //System.out.println("exception   " + e); }
	 * infoMap.put("pageNo", pageNo); infoMap.put("grnNo", grnNo);
	 * infoMap.put("grnId", grnId);
	 *
	 * infoMap.put("storeGrnM", storeGrnM); infoMap.put("storeGrnTlist",
	 * storeGrnTlist); infoMap.put("storeGrnTlistAdd", storeGrnTlistAdd);
	 * boolean flag = storesHandlerService.updateGrn(storeGrnM, storeGrnTlist);
	 * String messageTOBeVisibleToTheUser = ""; if (flag) { if
	 * (infoMap.get("grnId") != null) { grnId = (Integer) infoMap.get("grnId");
	 * // map = (Map<String, // Object>)storesHandlerService.grnModifyMap(grnId,
	 * pageNo); map.put("grnId", grnId); } storeGrnTlist = (List<StoreGrnT>)
	 * map.get("storeGrnTlist"); if (storeGrnTlist.size() == 0) {
	 * //System.out.println("storeGrnTlist.size() == 0"); noDetailRecords = "yes";
	 * } if ((storeGrnTlist.size() != 0) || (buttonFlag.equals("next"))) { jsp =
	 * MODIFY_GRN_JSP; } if (!(buttonFlag.equals("next"))) { jsp =
	 * STORES_MESSAGE_JSP; messageTOBeVisibleToTheUser =
	 * "CRV has been updated Successfully"; url =
	 * "/hms/hms/stores?method=showGrnJsp"; } pageNo++; } else { jsp =
	 * STORES_MESSAGE_JSP; messageTOBeVisibleToTheUser =
	 * "CRV has not been updated Successfully"; String url =
	 * "/hms/hms/stores?method=showGrnJsp"; } jsp += ".jsp"; Map<String, Object>
	 * purchaseMap = storesHandlerService.showGrnJsp(box, dataMap);
	 *
	 * map.put("grnId", grnId); map.put("purchaseMap", purchaseMap);
	 * map.put("pageNo", pageNo); map.put("grnNo", grnNo);
	 * map.put("noDetailRecords", noDetailRecords); map.put("url", url);
	 * map.put("contentJsp", jsp); map.put("messageTOBeVisibleToTheUser",
	 * messageTOBeVisibleToTheUser); return new ModelAndView("index", "map",
	 * map); }
	 */
	// ///////////////////// LOAN IN///////////////////////////////
	// for loanin jsp
	public ModelAndView showLoanInJsp(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

	
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);
		map = storesHandlerService.showLoanInJsp(dataMap);
		jsp = "challanEnty";
		jsp = jsp + ".jsp";
		title = "LoanIn";
		map.put("contentJsp", jsp);
		map.put("title", title);
		String previousPage = "no";
		map.put("previousPage", previousPage);
		return new ModelAndView("indexB", "map", map);
	}

	// for adding loanin
	public ModelAndView submitLoanIn(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> dataMap = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		box.put("deptId", session.getAttribute("deptId"));
		box.put("hospitalId", session.getAttribute("hospitalId"));
		box.put("userName", session.getAttribute("userName"));

		dataMap.put("deptId", session.getAttribute("deptId"));
		dataMap.put("hospitalId", session.getAttribute("hospitalId"));
		dataMap.put("userName", session.getAttribute("userName"));

		map = storesHandlerService.submitLoanIn(box);
		url = "/hms/hms/stores?method=showLoanInJsp";
		String msg = map.get("messageTOBeVisibleToTheUser").toString();
		//map = storesHandlerService.showGrnJsp(box, dataMap);
		map.put("messageTOBeVisibleToTheUser", msg);
		jsp = "printChallan";
		jsp = jsp + ".jsp";
		title = "LoanIn";
		map.put("contentJsp", jsp);
		map.put("url",url);
		map.put("title", title);
		String previousPage = "no";
		map.put("previousPage", previousPage);
		return new ModelAndView("indexB", "map", map);
	}

	// for Searching loanin on basis of loanin no
	public ModelAndView searchLoanin(HttpServletRequest request,
			HttpServletResponse response) throws IOException {
		
		HttpSession session = request.getSession();

		String fromDate = "";
		String toDate = "";
		String loanInNo = "";
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> tempMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> searchFieldMap = new HashMap<String, Object>();
		List<StoreLoaninM> searchLoanInList = new ArrayList<StoreLoaninM>();
		try {
			if (request.getParameter(FROM_DATE) != null) {
				fromDate = request.getParameter(FROM_DATE);

			}
			if (request.getParameter(TO_DATE) != null) {
				toDate = request.getParameter(TO_DATE);

			}
			if (request.getParameter(LOANIN_NO) != null) {
				loanInNo = request.getParameter(LOANIN_NO);

			}
		} catch (Exception e) {
		e.printStackTrace();
		}
		searchFieldMap.put("fromDate", fromDate);
		searchFieldMap.put("toDate", toDate);
		searchFieldMap.put("loanInNo", loanInNo);
		try {
			tempMap = storesHandlerService.showLoanInJsp(dataMap);
			if (tempMap.get("searchLoanInList") != null)
				searchLoanInList = (List) tempMap.get("searchLoanInList");
			map = storesHandlerService.searchLoanin(searchFieldMap);
			map.put("searchLoanInList", searchLoanInList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = SEARCH_LOANIN;
		jsp = jsp + ".jsp";
		title = "LOANIN";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}

	// for modifying loanin

	/*
	 *
	 * Map<String, Object> map = new HashMap<String, Object>(); Map<String,
	 * Object> purchaseMap = new HashMap<String, Object>(); jsp =
	 * MODIFY_LOANIN_JSP; jsp += ".jsp"; int radio_str = 0; if
	 * (request.getParameter("parent") != null) { radio_str =
	 * Integer.parseInt(request.getParameter("parent")); map = (Map<String,
	 * Object>)storesHandlerService.modifyLoanin(radio_str, 0); }
	 *
	 * purchaseMap = storesHandlerService.showLoanInJsp(); List<StoreLoaninM>
	 * loaninList = storesHandlerService.getloanList();
	 * map.put("purchaseMap", purchaseMap); map.put("loaninList", loaninList);
	 * map.put("contentJsp",jsp); map.put("title", title);
	 * map.put("radio_str",radio_str);
	 *
	 * return new ModelAndView("index","map", map); }
	 */
	// public ModelAndView modifyLoanin(HttpServletRequest request,
	// HttpServletResponse response){
	/*
	 * //System.out.println("inside controller of modifyLoanin"); Box box =
	 * HMSUtil.getBox(request); Map<String, Object> map = new HashMap<String,
	 * Object>(); Map<String, Object> map2 = new HashMap<String, Object>();
	 * Map<String, Object> dataMap = new HashMap<String, Object>(); jsp =
	 * MODIFY_LOANIN_JSP; jsp += ".jsp"; int radio_str=0; if
	 * (request.getParameter("parent") != null) { radio_str =Integer.parseInt(
	 * request.getParameter("parent"));
	 * map=(Map)storesHandlerService.getLoanInModifyMap(radio_str); }
	 * List<StoreLoaninM> searchLoanInList= new ArrayList<StoreLoaninM>();
	 *
	 * map2=storesHandlerService.showLoanInJsp(dataMap); searchLoanInList=(List)
	 * map2.get("searchLoanInList"); map.put("searchLoanInList",
	 * searchLoanInList); map.put("contentJsp",jsp); map.put("title", title);
	 * map.put("radio_str",radio_str); return new ModelAndView("index","map",
	 * map); }
	 */

	public ModelAndView modifyLoanin(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();
		
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> purchaseMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		jsp = MODIFY_LOANIN_JSP;
		jsp += ".jsp";
		int radio_str = 0;
		int deptId = 0;

		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}

		if (request.getParameter("parent") != null) {
			radio_str = Integer.parseInt(request.getParameter("parent"));
			map = (Map<String, Object>) storesHandlerService.modifyLoanin(
					radio_str, 0);
		}

		purchaseMap = storesHandlerService.showLoanInJsp(dataMap);
		List<StoreLoaninM> loaninList = storesHandlerService.getloanList();

		map.put("poId", radio_str);
		map.put("purchaseMap", purchaseMap);
		map.put("loaninList", loaninList);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("radio_str", radio_str);

		return new ModelAndView("indexB", "map", map);
	}
//loan in update
	public ModelAndView ShowListOFLoanInForUpdate(HttpServletRequest request,
			HttpServletResponse response){
		HttpSession session = request.getSession();
		Map<String , Object> map = new HashMap<String , Object>();
		map = storesHandlerService.ShowListOFLoanInForUpdate();
		jsp="searchScreenForLoanInUpdate.jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);

	}
	public ModelAndView modifyScreenForLoanin(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> purchaseMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();

		jsp = "modifyScreenForLoanIn.jsp";
		int radio_str = 0;
		int deptId = 0;

		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}

		if (request.getParameter("parent") != null) {
			radio_str = Integer.parseInt(request.getParameter("parent"));
			map = (Map<String, Object>) storesHandlerService.modifyLoanin(
					radio_str, 0);
		}

		purchaseMap = storesHandlerService.showLoanInJsp(dataMap);
		List<StoreLoaninM> loaninList = storesHandlerService.getloanList();

		map.put("poId", radio_str);
		map.put("purchaseMap", purchaseMap);
		map.put("loaninList", loaninList);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("radio_str", radio_str);

		return new ModelAndView("indexB", "map", map);
	}
public ModelAndView updateForLoanIn(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> dataMap = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		box.put("deptId", session.getAttribute("deptId"));
		box.put("hospitalId", session.getAttribute("hospitalId"));
		box.put("userName", session.getAttribute("userName"));

		dataMap.put("deptId", session.getAttribute("deptId"));
		dataMap.put("hospitalId", session.getAttribute("hospitalId"));
		dataMap.put("userName", session.getAttribute("userName"));

		map = storesHandlerService.updateForLoanIn(box);
		String msg = map.get("messageTOBeVisibleToTheUser").toString();
		map = storesHandlerService.modifyLoanin(box.getInt(LOANIN_ID), 0);
		map.put("messageTOBeVisibleToTheUser", msg);

		jsp = "modifyScreenForLoanIn.jsp";
		title = "LoanIn";
		map.put("contentJsp", jsp);
		map.put("title", title);
		String previousPage = "no";
		map.put("previousPage", previousPage);
		return new ModelAndView("indexB", "map", map);
	}

//end of loan in update
	// More Parameters of a PVMS/NIV Item that are Non-Mandatory Fields.

	public ModelAndView showMoreInfoLoanIn(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreLoaninT> loanInMoreInfoList = new ArrayList<StoreLoaninT>();
		map = storesHandlerService.getDetailsForLoanIn();
		int rowNo = 0;
		int loaninDetailId = 0;

		if (request.getParameter("rowNo") != null) {
			rowNo = Integer.parseInt(request.getParameter("rowNo"));
		}
		if (request.getParameter("detailId") != null) {
			loaninDetailId = Integer.parseInt(request.getParameter("detailId"));
			loanInMoreInfoList = storesHandlerService
					.getLoanInListForMoreInfo(loaninDetailId);
			map.put("loanInMoreInfoList", loanInMoreInfoList);
		}
		jsp = MORE_INFO_LOANIN_JSP;
		title = "Loan In";
		map.put("title", title);
		map.put("rowNo", rowNo);
		return new ModelAndView(jsp, "map", map);
	}

	// updating Loan In
	public ModelAndView updateLoanIn(HttpServletRequest request,
			HttpServletResponse response) throws ServletRequestBindingException {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		int supplierId = 0;
		String remarks = "";
		Date loanInDate = new Date();
		Date challanDate = new Date();
		int pageNo = 1;
		int noOfRows = 0;
		int poId = 0;
		String date = "";
		String time = "";
		String buttonFlag = "";
		int totalRecords = 0;
		int departmentId = 1;
		int employeeId = 0;
		int loanInId = 0;
		String loanInNo = "";
		String challanNo = "";
		String noDetailRecords = "";

		StoreLoaninM storeLoaninM = new StoreLoaninM();

		if (request.getParameter("buttonFlag") != null) {
			buttonFlag = request.getParameter("buttonFlag");
		}
		if (request.getParameter("loanInNo") != null) {
			loanInNo = request.getParameter("loanInNo");
		}
		if (request.getParameter("challanNo") != null) {
			challanNo = request.getParameter("challanNo");
		}
		if (request.getParameter("totalRecords") != null) {
			totalRecords = Integer.parseInt(request
					.getParameter("totalRecords"));
		}
		if (request.getParameter("NO_DETAIL_RECORDS") != null) {
			noDetailRecords = (request.getParameter("NO_DETAIL_RECORDS"));
		}
		if (request.getParameter(PO_ID) != null) {
			poId = Integer.parseInt(request.getParameter(PO_ID));

		}
		if (request.getParameter(LOANIN_ID) != null) {
			loanInId = Integer.parseInt(request.getParameter(LOANIN_ID));
		}
		if (request.getParameter(NO_OF_ROWS) != null) {
			noOfRows = Integer.parseInt(request.getParameter(NO_OF_ROWS));
		}

		if (request.getParameter("pageNo") != null) {
			pageNo = Integer.parseInt(request.getParameter("pageNo"));
		}

		if (request.getParameter(LOANIN_DATE) != null) {
			loanInDate = HMSUtil.dateFormatterDDMMYYYY(request
					.getParameter(LOANIN_DATE));
		}
		if (request.getParameter(CHALLAN_DATE) != null) {
			challanDate = HMSUtil.dateFormatterDDMMYYYY(request
					.getParameter(CHALLAN_DATE));
		}
		if (!request.getParameter(SUPPLIER_ID).equals("0")) {
			supplierId = Integer.parseInt(request.getParameter(SUPPLIER_ID));
		}
		if (!request.getParameter(EMPLOYEE_ID).equals("0")) {
			employeeId = Integer.parseInt(request.getParameter(EMPLOYEE_ID));
		}

		if (request.getParameter(REMARKS) != null) {
			remarks = request.getParameter(REMARKS);
		}

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");

		String headerStored = "no";
		if (pageNo == 1) {
			storeLoaninM.setId(loanInId);
			storeLoaninM.setLoaninNo(loanInNo);
			storeLoaninM.setLoaninDate(loanInDate);

			MasStoreSupplier supplier = new MasStoreSupplier();
			supplier.setId(supplierId);
			storeLoaninM.setSupplier(supplier);

			MasEmployee masEmployee = new MasEmployee();
			masEmployee.setId(employeeId);
			storeLoaninM.setEmployee(masEmployee);

			StorePoHeader storePoHeader = new StorePoHeader();
			storePoHeader.setId(poId);
			storeLoaninM.setPo(storePoHeader);

			storeLoaninM.setChallanDate(challanDate);
			storeLoaninM.setChallanNo(challanNo);
			// storeLoaninM.setRemarks(remarks);
			storeLoaninM.setStatus("y");

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(1);
			storePoHeader.setDepartment(masDepartment);

		} else {
			headerStored = "yes";
			infoMap.put("headerStored", headerStored);
		}
		int length = 0;

		BigDecimal[] taxArr = new BigDecimal[10];
		BigDecimal[] unitRateArr = new BigDecimal[10];
		BigDecimal[] discountArr = new BigDecimal[10];
		BigDecimal[] quantityArr = new BigDecimal[10];

		BigDecimal[] amountArr = new BigDecimal[10];

		List<StoreLoaninT> storeLoaninTlist = new ArrayList<StoreLoaninT>();
		List<StoreLoaninT> storeLoaninTlistAdd = new ArrayList<StoreLoaninT>();

		int idArray[] = JKTRequestUtils.getRequiredIntParameters(request,
				DETAIL_ID);
		int srNo[] = JKTRequestUtils.getRequiredIntParameters(request, SR_NO);
		int itemIdArr[] = JKTRequestUtils.getRequiredIntParameters(request,
				ITEM_ID);
		int manufacturerIdArr[] = JKTRequestUtils.getRequiredIntParameters(
				request, MANUFACTURER_ID);
		int brandIdArr[] = JKTRequestUtils.getRequiredIntParameters(request,
				BRAND_ID);

		int freeQtyArr[] = JKTRequestUtils.getRequiredIntParameters(request,
				FREE_QTY);
		String freeItemArr[] = JKTRequestUtils.getRequiredStringParameters(
				request, FREE_ITEM);
		length = srNo.length;

		String yy[] = JKTRequestUtils.getRequiredStringParameters(request,
				TAX_PERCENT);
		int yyLen = yy.length;
		for (int i = 0; i < yyLen; i++) {
			BigDecimal val = new BigDecimal(yy[i]);
			taxArr[i] = val;
		}
		String tt[] = JKTRequestUtils.getRequiredStringParameters(request,
				UNIT_RATE);
		int ttLen = tt.length;
		for (int i = 0; i < ttLen; i++) {
			BigDecimal val = new BigDecimal(tt[i]);
			unitRateArr[i] = val;
		}
		String zz[] = JKTRequestUtils.getRequiredStringParameters(request,
				DISCOUNT_PERCENTAGE);
		int zzLen = zz.length;
		for (int i = 0; i < zzLen; i++) {
			BigDecimal val = new BigDecimal(zz[i]);
			discountArr[i] = val;
		}

		String qq[] = JKTRequestUtils.getRequiredStringParameters(request,
				AMOUNT);
		int qqLen = qq.length;
		for (int i = 0; i < qqLen; i++) {
			BigDecimal val = new BigDecimal(qq[i]);
			amountArr[i] = val;
		}
		String mm[] = JKTRequestUtils.getRequiredStringParameters(request,
				QUANTITY_RECEIVED);
		int mmLen = yy.length;
		for (int i = 0; i < mmLen; i++) {
			BigDecimal val = new BigDecimal(mm[i]);
			quantityArr[i] = val;
		}

		int idArrayLength = idArray.length;
		for (int i = 0; i < length; i++) {

			if (idArrayLength > 0) {
				StoreLoaninT storeLoaninT = new StoreLoaninT();
				storeLoaninT.setId(idArray[i]);
				storeLoaninT.setSerialNo(srNo[i]);

				MasStoreItem masItem = new MasStoreItem();
				masItem.setId(itemIdArr[i]);
				storeLoaninT.setItem(masItem);

				storeLoaninT.setReceivedQty(quantityArr[i]);
				// storeLoaninT.setFreeQty(freeQtyArr[i]);
				storeLoaninT.setTax(taxArr[i]);

				storeLoaninT.setAmountValue(amountArr[i]);
				storeLoaninT.setUnitRate(unitRateArr[i]);
				storeLoaninT.setDiscount(discountArr[i]);
				// storeLoaninT.setFreeItem(freeItemArr[i]);

				StoreLoaninM sl = new StoreLoaninM();
				sl.setId(loanInId);
				storeLoaninT.setLoaninMaster(sl);

				if (manufacturerIdArr[i] != 0) {
					MasManufacturer masManufacturer = new MasManufacturer();
					masManufacturer.setId(manufacturerIdArr[i]);
					storeLoaninT.setManufacturer(masManufacturer);
				}

				storeLoaninTlist.add(storeLoaninT);
			}
			else
			{
				if (itemIdArr[i] != 0) {
					StoreLoaninT storeLoaninTAdd = new StoreLoaninT();
					storeLoaninTAdd.setId(idArray[i]);
					storeLoaninTAdd.setSerialNo(srNo[i]);

					MasStoreItem masItem = new MasStoreItem();
					masItem.setId(itemIdArr[i]);
					storeLoaninTAdd.setItem(masItem);

					storeLoaninTAdd.setReceivedQty(quantityArr[i]);
					// storeLoaninTAdd.setFreeQty(freeQtyArr[i]);
					storeLoaninTAdd.setTax(taxArr[i]);

					storeLoaninTAdd.setAmountValue(amountArr[i]);
					storeLoaninTAdd.setUnitRate(unitRateArr[i]);
					storeLoaninTAdd.setDiscount(discountArr[i]);
					// storeLoaninTAdd.setFreeItem(freeItemArr[i]);

					StoreLoaninM storeLoaninM1 = new StoreLoaninM();
					storeLoaninM1.setId(loanInId);
					storeLoaninTAdd.setLoaninMaster(storeLoaninM1);

					if (manufacturerIdArr[i] != 0) {
						MasManufacturer masManufacturer = new MasManufacturer();
						masManufacturer.setId(manufacturerIdArr[i]);
						storeLoaninTAdd.setManufacturer(masManufacturer);
					}

					storeLoaninTAdd.setReceivedQty(null);
					storeLoaninTAdd.setTax(null);

					storeLoaninTlistAdd.add(storeLoaninTAdd);
				}
			}
			idArrayLength--;

		}
		infoMap.put("pageNo", pageNo);
		infoMap.put("loanInNo", loanInNo);
		infoMap.put("loanInId", loanInId);

		infoMap.put("storeLoaninM", storeLoaninM);
		infoMap.put("storeLoaninTlist", storeLoaninTlist);
		infoMap.put("storeLoaninTlistAdd", storeLoaninTlistAdd);

		boolean flag = storesHandlerService.updateLoanIn(infoMap);

		String messageTOBeVisibleToTheUser = "";
		if (flag) {
			if (infoMap.get("loanInId") != null) {
				loanInId = (Integer) infoMap.get("loanInId");
				// map = (Map<String,
				// Object>)storesHandlerService.modifyLoanin(loanInId, pageNo);
				map.put("loanInId", loanInId);
			}
			storeLoaninTlist = (List<StoreLoaninT>) map.get("storeLoaninTlist");
			if (storeLoaninTlist.size() != 0) {
				jsp = MODIFY_LOANIN_JSP;
			} else {
				jsp = STORES_MESSAGE_JSP;
				messageTOBeVisibleToTheUser = "DATA has been updated Successfully";
				url = "/hms/hms/stores?method=showLoanInJsp";
			}
			pageNo++;
		} else {
			messageTOBeVisibleToTheUser = "DATA has not been updated Successfully";
			url = "/hms/hms/stores?method=showLoanInJsp";
		}

		jsp += ".jsp";
		Map<String, Object> purchaseMap = storesHandlerService
				.showLoanInJsp(dataMap);

		map.put("loanInId", loanInId);
		map.put("purchaseMap", purchaseMap);
		map.put("pageNo", pageNo);
		map.put("loanInNo", loanInNo);
		map.put("url", url);
		map.put("contentJsp", jsp);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("indexB", "map", map);
	}

	// -------------------------------------BOO
	// ENTRY----------------------------------------------------------

	// For Board Of officers Entry jsp
	public ModelAndView showBooJsp(HttpServletRequest request,
			HttpServletResponse response) {

		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		Map<String, Object> infoMap = new HashMap<String, Object>();
		infoMap.put("deptId", deptId);
		infoMap.put("hospitalId", hospitalId);
		infoMap.put("userName", userName);
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.showBooJsp(infoMap);
		jsp = BOO_JSP;
		jsp = jsp + ".jsp";
		title = "BOO ENTRY";
		map.put("contentJsp", jsp);
		map.put("title", title);
		String previousPage = "no";
		map.put("previousPage", previousPage);
		return new ModelAndView("indexB", "map", map);
	}

	// adding BOO
	public ModelAndView submitBoo(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		StoreBoo storeBoo = new StoreBoo();
		StoreBooMember storeBooMember = new StoreBooMember();

		String grnNo = "";
		int rows = 0;
		Date booDate = new Date();
		int booId = 0;
		int rankId = 0;
		int grnId = 0;
		int employeeId = 0;
		String hroNo = "";
		String booNo = "";
		Date hroDate = new Date();
		String encodedBy = "";
		Date encodedDate = null;
		Date lastChgDate = null;
		String lastChgTime = "";
		String remarks = "";
		String attendantName = "";
		int presidingOfficerNameId = 0;
		int presidingOfficerRank1Id = 0;
		int officerIcNameId = 0;
		int officerIcRank1Id = 0;
		String officerIcNo = "";
		String date = "";
		String time = "";

		int noOfRows = 0;
		int pageNo = 1;
		int deptId = 0;
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		try {
			if (request.getParameter("pageNo") != null) {
				pageNo = Integer.parseInt(request.getParameter("pageNo"));

			}
			if (request.getParameter(GRN_NO) != null) {
				grnNo = request.getParameter(GRN_NO);

			}
			if (request.getParameter(NO_OF_ROWS) != null) {
				noOfRows = Integer.parseInt(request.getParameter(NO_OF_ROWS));

			}
			if (request.getParameter(BOO_ID) != null) {
				booId = Integer.parseInt(request.getParameter(BOO_ID));

			}
			if (!request.getParameter(RANK_ID).equals("0")) {
				rankId = Integer.parseInt(request.getParameter(RANK_ID));

			}
			if (!request.getParameter(PRESIDING_OFFICER_RANK_ID).equals("0")) {
				presidingOfficerRank1Id = Integer.parseInt(request
						.getParameter(PRESIDING_OFFICER_RANK_ID));

			}
			if (!request.getParameter(OFFICER_IC_RANK_ID).equals("0")) {
				officerIcRank1Id = Integer.parseInt(request
						.getParameter(OFFICER_IC_RANK_ID));

			}

			if (request.getParameter(HRO_SL_NO) != null) {
				hroNo = request.getParameter(HRO_SL_NO);

			}
			if (request.getParameter(OFFICER_IC_NO) != null) {
				officerIcNo = request.getParameter(OFFICER_IC_NO);

			}
			if (!request.getParameter(EMPLOYEE_ID).equals("0")) {
				employeeId = Integer
						.parseInt(request.getParameter(EMPLOYEE_ID));

			}
			if (!request.getParameter(PRESIDING_OFFICER_NAME_ID).equals("0")) {
				presidingOfficerNameId = Integer.parseInt(request
						.getParameter(PRESIDING_OFFICER_NAME_ID));

			}

			if (!request.getParameter(OFFICER_IC_NAME_ID).equals("0")) {
				officerIcNameId = Integer.parseInt(request
						.getParameter(OFFICER_IC_NAME_ID));

			}

			if (request.getParameter(ATTENDANT_NAME) != null) {
				attendantName = request.getParameter(ATTENDANT_NAME);

			}
			if (request.getParameter(REMARKS) != null) {
				remarks = request.getParameter(REMARKS);

			}

			if (request.getParameter(BOO_NO) != null) {
				booNo = (request.getParameter(BOO_NO));
			}

			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			date = (String) utilMap.get("currentDate");
			time = (String) utilMap.get("currentTime");

		} catch (Exception e) {
			//
			e.printStackTrace();
		}
		try {
			String te = "";

			if (request.getParameter(BOO_DATE) != null) {
				te = (String) (request.getParameter(BOO_DATE));

				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(BOO_DATE)));
				booDate = java.sql.Date.valueOf(date4MySQL);
			}
		} catch (Exception e) {
e.printStackTrace();		}

		try {
			String techallan = "";
			if (request.getParameter(HRO_DATE) != null) {
				techallan = (String) (request.getParameter(HRO_DATE));

				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(HRO_DATE)));
				hroDate = java.sql.Date.valueOf(date4MySQL);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		String headerStored = "no";

		if (pageNo == 1) {
			storeBoo.setAttendentName(attendantName);
			storeBoo.setBooDate(booDate);
			storeBoo.setBooNo(booNo);
			storeBoo.setGrnNo(grnNo);
			storeBoo.setHroDate(hroDate);
			storeBoo.setHroSlNo(hroNo);
			storeBoo.setRemarks(remarks);
			storeBoo.setStatus("o");

			MasEmployee masEmployee = new MasEmployee();
			masEmployee.setId(employeeId);
			storeBoo.setCommand(masEmployee);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(1);
			storeBoo.setHospital(masHospital);

			MasEmployee masEmployee1 = new MasEmployee();
			masEmployee1.setId(presidingOfficerNameId);
			storeBoo.setPresidingOff(masEmployee1);

			MasEmployee masEmployee2 = new MasEmployee();
			masEmployee2.setId(officerIcNameId);
			storeBoo.setOfficerIc(masEmployee2);

			MasRank masRank = new MasRank();
			masRank.setId(rankId);
			storeBoo.setCommandRank(masRank);

			MasRank masRank1 = new MasRank();
			masRank1.setId(presidingOfficerRank1Id);
			storeBoo.setPresidingOffRank(masRank1);

			MasRank masRank2 = new MasRank();
			masRank2.setId(officerIcRank1Id);
			storeBoo.setOfficerIcRank(masRank2);
			storeBoo.setLastChgBy("admin");
			storeBoo.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(date));
			storeBoo.setLastChgTime(time);

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(deptId);
			storeBoo.setDepartment(masDepartment);

		} else {

			headerStored = "yes";
			infoMap.put("headerStored", headerStored);
		}

		int length = 0;
		List<StoreBooMember> storeBooMlist = new ArrayList<StoreBooMember>();

		try {
			int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
					SR_NO);
			int memNameArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, EMPLOYEE_ID);
			int memRankArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, RANK_ID);

			length = noOfRows;
			for (int i = 0; i < length; i++) {
				if (memNameArray[i] != 0) {

					StoreBooMember storeBooMObj = new StoreBooMember();
					storeBooMObj.setSrNo(srNo[i]);

					MasEmployee masEmployee = new MasEmployee();
					masEmployee.setId(memNameArray[i]);
					storeBooMObj.setMember(masEmployee);

					MasRank masRank = new MasRank();
					masRank.setId(memRankArray[i]);
					storeBooMObj.setMemberRank(masRank);

					storeBooMlist.add(storeBooMObj);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		infoMap.put("pageNo", pageNo);

		infoMap.put("booNo", booNo);
		infoMap.put("booId", booId);
		infoMap.put("storeBoo", storeBoo);
		infoMap.put("storeBooMlist", storeBooMlist);
		infoMap.put("deptId", deptId);
		boolean flag = false;
		try {
			flag = storesHandlerService.addBoo(infoMap);

		} catch (Exception e) {
			e.printStackTrace();
		}
		String messageTOBeVisibleToTheUser = "";

		if (flag) {

			pageNo++;
			messageTOBeVisibleToTheUser = "BOO Entry Completed Successfully";
		} else {
			messageTOBeVisibleToTheUser = "BOO Entry not done successfully";
		}
		jsp = "storesMessage";
		jsp += ".jsp";
		url = "/hms/hms/stores?method=showBooJsp";
		map.put("maxBooNo", booNo);
		map.put("pageNo", pageNo);
		map.put("contentJsp", jsp);
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("indexB", "map", map);

	}

	// searching BOO on basis of Boo No
	public ModelAndView searchBoo(HttpServletRequest request,
			HttpServletResponse response) {
		String fromDate = "";
		String toDate = "";
		String booNo = "";
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> tempMap = new HashMap<String, Object>();
		Map<String, Object> searchFieldMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		List<StoreBoo> searchBooList = new ArrayList<StoreBoo>();
		try {
			if (request.getParameter(FROM_DATE) != null) {
				fromDate = request.getParameter(FROM_DATE);

			}
			if (request.getParameter(TO_DATE) != null) {
				toDate = request.getParameter(TO_DATE);

			}
			if (request.getParameter(BOO_NO) != null) {
				booNo = request.getParameter(BOO_NO);

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		searchFieldMap.put("fromDate", fromDate);
		searchFieldMap.put("toDate", toDate);
		searchFieldMap.put("booNo", booNo);
		try {
			tempMap = storesHandlerService.showBooJsp(dataMap);
			if (tempMap.get("searchBooList") != null)
				searchBooList = (List) tempMap.get("searchBooList");
			map = storesHandlerService.searchBoo(searchFieldMap);
			map.put("searchBooList", searchBooList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = SEARCH_BOO_JSP;
		jsp = jsp + ".jsp";
		title = "Boo";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}

	// modifying BOO
	public ModelAndView modifyBoo(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> map2 = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		jsp = BOO_MODIFY;
		jsp += ".jsp";
		int radio_str = 0;
		if (request.getParameter("parent") != null) {
			radio_str = Integer.parseInt(request.getParameter("parent"));
			map = (Map) storesHandlerService.getBooModifyMap(radio_str);
		}
		List<StoreBoo> searchBooList = new ArrayList<StoreBoo>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<MasRank> rankList = new ArrayList<MasRank>();
		map2 = storesHandlerService.showBooJsp(dataMap);
		searchBooList = (List) map2.get("searchBooList");
		employeeList = (List) map2.get("employeeList");
		rankList = (List) map2.get("rankList");

		map.put("searchBooList", searchBooList);
		map.put("employeeList", employeeList);
		map.put("rankList", rankList);

		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("radio_str", radio_str);

		return new ModelAndView("indexB", "map", map);

	}

	// updating BOO
	public ModelAndView updateBoo(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		StoreBoo storeBoo = new StoreBoo();
		StoreBooMember storeBooMember = new StoreBooMember();
		Map infoMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();

		String grnNo = "";
		int rows = 0;
		Date booDate = new Date();
		int booId = 0;
		int rankId = 0;
		int grnId = 0;
		int employeeId = 0;
		String hroNo = "";
		String booNo = "";
		Date hroDate = new Date();
		String remarks = "";
		String attendantName = "";
		int pageNo = 0;
		int totalRecords = 0;
		String date = "";
		String time = "";
		try {
			if (request.getParameter("pageNo") != null) {
				pageNo = Integer.parseInt(request.getParameter("pageNo"));
			}
			if (request.getParameter("totalRecords") != null) {
				totalRecords = Integer.parseInt(request
						.getParameter("totalRecords"));
			}
			if (request.getParameter(BOO_ID) != null) {
				booId = Integer.parseInt(request.getParameter(BOO_ID));
			}

			if (request.getParameter(GRN_NO) != null) {
				grnNo = request.getParameter(GRN_NO);
			}

			if (request.getParameter(BOO_NO) != null) {
				booNo = (request.getParameter(BOO_NO));
			}
			int noOfRows=0;
			if (request.getParameter(NO_OF_ROWS) != null) {
				noOfRows = Integer.parseInt(request.getParameter(NO_OF_ROWS));

			}
			if (request.getParameter(EMPLOYEE_ID) != null) {
				employeeId = Integer
						.parseInt(request.getParameter(EMPLOYEE_ID));
			}
			if (request.getParameter(RANK_ID) != null) {
				rankId = Integer.parseInt(request.getParameter(RANK_ID));
			}
			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			date = (String) utilMap.get("currentDate");
			time = (String) utilMap.get("currentTime");

		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			String te = "";

			if (request.getParameter(BOO_DATE) != null) {
				te = (String) (request.getParameter(BOO_DATE));

				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(BOO_DATE)));
				booDate = java.sql.Date.valueOf(date4MySQL);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		try {
			String techallan = "";
			if (request.getParameter(HRO_DATE) != null) {
				techallan = (String) (request.getParameter(HRO_DATE));

				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(HRO_DATE)));
				hroDate = java.sql.Date.valueOf(date4MySQL);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		if (request.getParameter(NO_OF_ROWS) != null) {

			rows = Integer.parseInt(request.getParameter(NO_OF_ROWS));
		}

		String headerStored = "no";

		if (pageNo == 1) {
			try {
				storeBoo.setId(booId);

				storeBoo.setAttendentName(attendantName);
				storeBoo.setBooDate(booDate);
				storeBoo.setBooNo(booNo);
				storeBoo.setGrnNo(grnNo);
				storeBoo.setHroDate(hroDate);
				storeBoo.setHroSlNo(hroNo);
				storeBoo.setRemarks(remarks);
				storeBoo.setStatus("o");

				MasEmployee masEmployee = new MasEmployee();
				masEmployee.setId(employeeId);
				storeBoo.setCommand(masEmployee);

				MasRank masRank = new MasRank();
				masRank.setId(rankId);
				storeBoo.setCommandRank(masRank);

				MasHospital masHospital = new MasHospital();
				masHospital.setId(1);
				storeBoo.setHospital(masHospital);

				storeBoo.setLastChgBy("admin");
				storeBoo.setLastChgDate(HMSUtil
						.convertStringTypeDateToDateType(date));
				storeBoo.setLastChgTime(time);

			} catch (Exception e) {
				e.printStackTrace();
			}
		} else {

			headerStored = "yes";
			infoMap.put("headerStored", headerStored);
		}

		int length = 0;
		List<StoreBooMember> storeBooMlist = new ArrayList<StoreBooMember>();

		try {
			int idArray[] = JKTRequestUtils.getRequiredIntParameters(request,
					DETAIL_ID);
			int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
					SR_NO);
			int memNameArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, EMPLOYEE_ID);

			length = srNo.length;
			for (int i = 0; i < length; i++) {
				if (idArray[i] != 0) {
					StoreBooMember storeBooMObj = new StoreBooMember();
					storeBooMObj.setSrNo(srNo[i]);
					storeBooMObj.setId(idArray[i]);
					MasEmployee masEmployee = new MasEmployee();
					masEmployee.setId(memNameArray[i]);
					storeBooMObj.setMember(masEmployee);
					storeBooMlist.add(storeBooMObj);

				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		boolean flag = storesHandlerService.updateBoo(storeBoo, storeBooMlist);

		infoMap.put("pageNo", pageNo);
		infoMap.put("maxBooNo", booNo);
		infoMap.put("booId", booId);
		String messageTOBeVisibleToTheUser = "";

		if (flag) {
			if ((totalRecords > pageNo * 10)) {
				jsp = "modifyBoo";
			} else {
				jsp = "message";
				url = "/hms/hms/stores?method=showBooJsp";
				messageTOBeVisibleToTheUser = "Updated Successfully";
			}

			pageNo++;

		} else {
			messageTOBeVisibleToTheUser = "Not Updated";
			url = "/hms/hms/stores?method=showBooJsp";
		}

		jsp += ".jsp";

		Map map2 = new HashMap();
		map2 = (Map) storesHandlerService.showBooJsp(dataMap);
		map.put("searchBooList", (List) map2.get("searchBooList"));
		map.put("url", url);
		map.put("maxBooNo", booNo);
		map.put("booId", booId);
		map.put("pageNo", pageNo);
		map.put("contentJsp", jsp);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("indexB", "map", map);

	}



	// adjust loan in for adjusting loanin
	public ModelAndView adjustLoanIn(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();

		int poId = 0;
		if (request.getParameter(INDENT_ID) != null)
			poId = Integer.parseInt(request.getParameter(INDENT_ID));

		map = storesHandlerService.getLoanInList(poId);

		title = "adjust LoanIn";
		jsp = ADJUST_LOANIN_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("poId", poId);
		return new ModelAndView("indexB", "map", map);
	}

	// =========== showing loaninin in grid=======
	/*
	 * public ModelAndView showLoanIn(HttpServletRequest
	 * request,HttpServletResponse response) throws
	 * ServletRequestBindingException { //System.out.println("inside show Loanin
	 * "); String userName = ""; int deptId = 0; int hospitalId = 0;
	 *
	 * session = request.getSession(); if (session.getAttribute("userName") !=
	 * null) userName = (String) session.getAttribute("userName"); if
	 * (session.getAttribute("hospitalId") != null) hospitalId =
	 * Integer.parseInt("" + session.getAttribute("hospitalId")); if
	 * (session.getAttribute("deptId") != null) deptId = Integer.parseInt("" +
	 * session.getAttribute("deptId")); //
	 * --------------------------------------
	 * ------------------------------------------ Map<String, Object> map = new
	 * HashMap<String, Object>(); Map<String, Object> map2 = new HashMap<String,
	 * Object>(); List<StoreWorkOrderM> searchWorkOrderList = new
	 * ArrayList<StoreWorkOrderM>(); //List<MasStoreSection> sectionList = new
	 * ArrayList<MasStoreSection>(); int pageNo = 1;
	 * //System.out.println("This is wo Modify");
	 *
	 * int radio_str = 0; if (request.getParameter(INDENT_ID) != null) {
	 * radio_str = Integer.parseInt(request .getParameter(INDENT_ID)); map =
	 * (Map) storesHandlerService.getAdjustmentList(radio_str, pageNo);
	 * //System.out.println("map "+map.size()); }
	 *
	 * jsp="grid"; map.put("contentJsp", jsp); map.put("title", title);
	 * map.put("radio_str", radio_str);
	 *
	 * return new ModelAndView(jsp, "map", map); }
	 */

	public ModelAndView showLoanIn(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		String choice = "";
		// map=storesHandlerService.showGridJsp(box);
		jsp = "grid1";
		return new ModelAndView(jsp, "map", map);
	}

	// adjusting loanin in grn
	public ModelAndView submitAdjustLoan(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		StoreGrnM storeGrnM = new StoreGrnM();
		StorePoHeader storePoHeader = new StorePoHeader();

		String grnNo = "";
		Date loaninDate = new Date();
		int loaninId = 0;
		int unitId = 0;
		int indentId = 0;
		int poId = 0;
		String howReceived = "";
		String rrNo = "";
		int employeeId = 0;
		String loaninNo = "";
		Date challanDate = new Date();
		BigDecimal freightDuty = null;
		BigDecimal exciseDuty = null;
		BigDecimal octroi = null;
		BigDecimal customDuty = null;
		BigDecimal insuranceCharge = null;
		BigDecimal otherCharges = null;
		BigDecimal loaninValue = null;
		BigDecimal roundOffValue = null;
		BigDecimal grnAmount = null;
		BigDecimal totalAmount = null;
		int supplierId = 0;
		String encodedBy = "";
		Date encodedDate = null;
		String lastChgBy = "A";
		Date lastChgDate = null;
		String lastChgTime = "";
		String atSoNo = "";
		int departmentId = 0;
		String remarks = "";
		String date = "";
		String time = "";
		String choice = "";
		int noOfRows = 0;
		int pageNo = 1;
		String buttonFlag = "";
		String challanNo = "";
		int deptId = 0;
		String max = "";
		if (session.getAttribute("max") != null) {
			max = (String) (session.getAttribute("max"));
		}
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		try {
			if (request.getParameter("pageNo") != null) {
				pageNo = Integer.parseInt(request.getParameter("pageNo"));

			}
			/*
			 * if (request.getParameter("noOfRows") != null) { noOfRows =
			 * Integer.parseInt(request.getParameter("noOfRows"));
			 */
			if (request.getParameter(LOANIN_ID) != null) {
				loaninId = Integer.parseInt(request.getParameter(LOANIN_ID));

			}
			if (!request.getParameter(SUPPLIER_ID).equals("0")) {
				supplierId = Integer
						.parseInt(request.getParameter(SUPPLIER_ID));
			}

			if (!request.getParameter(EMPLOYEE_ID).equals("0")) {
				employeeId = Integer
						.parseInt(request.getParameter(EMPLOYEE_ID));
			}

			if (request.getParameter("buttonFlag") != null) {
				buttonFlag = request.getParameter("buttonFlag");
			}

			if (request.getParameter(INDENT_ID) != null) {
				poId = Integer.parseInt((request.getParameter(INDENT_ID)));
			}

			if (request.getParameter(LOANIN_NO) != null) {
				loaninNo = (request.getParameter(LOANIN_NO));
			}
			if (request.getParameter(GRN_NO) != null) {
				grnNo = (request.getParameter(GRN_NO));
			}

			if (request.getParameter(REMARKS) != null) {
				remarks = (request.getParameter(REMARKS));
			}
			if (request.getParameter(CHALLAN_NO) != null) {
				challanNo = request.getParameter(CHALLAN_NO);
			}

		} catch (Exception e) {
			e.printStackTrace();

		}
		try {
			String te = "";

			if (request.getParameter(LOANIN_DATE) != null) {
				te = (String) (request.getParameter(LOANIN_DATE));

				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(LOANIN_DATE)));
				loaninDate = java.sql.Date.valueOf(date4MySQL);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		try {
			String techallan = "";
			if (request.getParameter(CHALLAN_DATE) != null) {
				techallan = (String) (request.getParameter(CHALLAN_DATE));

				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(CHALLAN_DATE)));
				challanDate = java.sql.Date.valueOf(date4MySQL);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");
		if (request.getParameter(FREIGHT_DUTY) != null
				&& !request.getParameter(FREIGHT_DUTY).equals("")) {
			freightDuty = new BigDecimal(request.getParameter(FREIGHT_DUTY));
		}
		if (request.getParameter(EXCISE_DUTY) != null
				&& !request.getParameter(EXCISE_DUTY).equals("")) {
			exciseDuty = new BigDecimal(request.getParameter(EXCISE_DUTY));
		}

		if (request.getParameter(OCTROI) != null
				&& !request.getParameter(OCTROI).equals("")) {
			octroi = new BigDecimal(request.getParameter(OCTROI));
		}
		if (request.getParameter(CUSTOM_DUTY) != null
				&& !request.getParameter(CUSTOM_DUTY).equals("")) {
			customDuty = new BigDecimal(request.getParameter(CUSTOM_DUTY));
		}
		if (request.getParameter(INSURANCE_CHARGES) != null
				&& !request.getParameter(INSURANCE_CHARGES).equals("")) {
			insuranceCharge = new BigDecimal(request
					.getParameter(INSURANCE_CHARGES));
		}

		if (request.getParameter(OTHER_CHARGES) != null
				&& !request.getParameter(OTHER_CHARGES).equals("")) {
			otherCharges = new BigDecimal(request.getParameter(OTHER_CHARGES));
		}

		if (request.getParameter(LOANIN_VALUE) != null
				&& !request.getParameter(LOANIN_VALUE).equals("")) {
			loaninValue = new BigDecimal(request.getParameter(LOANIN_VALUE));
		}
		if (request.getParameter(TOTAL_AMOUNT) != null
				&& !request.getParameter(TOTAL_AMOUNT).equals("")) {
			totalAmount = new BigDecimal(request.getParameter(TOTAL_AMOUNT));
		}

		String headerStored = "no";

		if (pageNo == 1) {
			storeGrnM.setGrnNo(grnNo);
			storeGrnM.setGrnDate(loaninDate);
			storeGrnM.setChallanNo(challanNo);
			storeGrnM.setOctroi(octroi);
			storeGrnM.setInsuranceCharge(insuranceCharge);
			storeGrnM.setFreightDuty(freightDuty);
			storeGrnM.setExciseDuty(exciseDuty);
			storeGrnM.setOtherCharges(otherCharges);
			storeGrnM.setCustomDuty(customDuty);
			storeGrnM.setRemarks(remarks);
			storeGrnM.setChallanDate(null);
			storeGrnM.setChallanNo(null);
			storeGrnM.setInvoiceNo(null);
			storeGrnM.setChallanDate(challanDate);
			storeGrnM.setGrnValue(loaninValue);
			storeGrnM.setStatus("o");
			storeGrnM.setReceiveType("l");
			storeGrnM.setLastChgBy("admin");
			storeGrnM.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(date));
			storeGrnM.setLastChgTime(time);
			storeGrnM.setHowReceived("jkt");

			// StoreIndentM storeIndentM = new StoreIndentM();
			// storeIndentM.setId(new Integer(1));
			storeGrnM.setIndent(null);
			MasHospital masHospital = new MasHospital();
			masHospital.setId(1);
			storeGrnM.setHospital(masHospital);

			StorePoHeader storePoHeader1 = new StorePoHeader();
			storePoHeader1.setId(poId);
			storeGrnM.setPo(storePoHeader1);

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(deptId);
			storeGrnM.setDepartment(masDepartment);

			MasStoreSupplier masStoreSupplier = new MasStoreSupplier();
			masStoreSupplier.setId(supplierId);
			storeGrnM.setSupplier(masStoreSupplier);

			MasEmployee masEmployee = new MasEmployee();
			masEmployee.setId(employeeId);
			storeGrnM.setEmployee(masEmployee);

			storePoHeader.setStatus("c");

		} else {
			headerStored = "yes";
			infoMap.put("headerStored", headerStored);
		}
		int length = 0;
		List<StoreGrnT> storeGrnTlist = new ArrayList<StoreGrnT>();

		try {

			int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
					SR_NO);
			int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, ITEM_ID);
			int freeQty[] = JKTRequestUtils.getRequiredIntParameters(request,
					FREE_QTY);
			// int
			// manufacturerIdArray[]=JKTRequestUtils.getRequiredIntParameters(request,MANUFACTURER_ID);
			// int
			// brandIdArray[]=JKTRequestUtils.getRequiredIntParameters(request,BRAND_ID);
			String lotNoArr[] = JKTRequestUtils.getRequiredStringParameters(
					request, LOT_NO);
			String batchNoArr[] = JKTRequestUtils.getRequiredStringParameters(
					request, BATCH_NO);
			String freeItemArr[] = JKTRequestUtils.getRequiredStringParameters(
					request, FREE_ITEM);
			String manuDate[] = JKTRequestUtils.getRequiredStringParameters(
					request, MANUFACTURING_DATE);
			String expdate[] = JKTRequestUtils.getRequiredStringParameters(
					request, EXPIRY_DATE);

			BigDecimal[] quantityReceivedArray = new BigDecimal[10];
			BigDecimal[] taxArr = new BigDecimal[10];
			BigDecimal[] unitRateArr = new BigDecimal[10];
			BigDecimal[] discountArr = new BigDecimal[10];
			BigDecimal[] amountArr = new BigDecimal[10];

			String yy[] = JKTRequestUtils.getRequiredStringParameters(request,
					TAX_PERCENT);
			int yyLen = yy.length;
			for (int i = 0; i < yyLen; i++) {
				BigDecimal val = new BigDecimal(yy[i]);
				taxArr[i] = val;
			}
			String tt[] = JKTRequestUtils.getRequiredStringParameters(request,
					UNIT_RATE);
			int ttLen = tt.length;
			for (int i = 0; i < ttLen; i++) {
				BigDecimal val = new BigDecimal(tt[i]);
				unitRateArr[i] = val;
			}
			String zz[] = JKTRequestUtils.getRequiredStringParameters(request,
					DISCOUNT_PERCENTAGE);
			int zzLen = zz.length;
			for (int i = 0; i < zzLen; i++) {
				BigDecimal val = new BigDecimal(zz[i]);
				discountArr[i] = val;
			}
			String qq[] = JKTRequestUtils.getRequiredStringParameters(request,
					AMOUNT);
			int qqLen = qq.length;
			for (int i = 0; i < qqLen; i++) {
				BigDecimal val = new BigDecimal(qq[i]);
				amountArr[i] = val;
			}
			String mm[] = JKTRequestUtils.getRequiredStringParameters(request,
					QUANTITY_RECEIVED);
			int mmLen = mm.length;
			for (int i = 0; i < mmLen; i++) {
				BigDecimal val = new BigDecimal(mm[i]);
				quantityReceivedArray[i] = val;
			}

			length = srNo.length;

			for (int i = 0; i < length; i++) {
				if (itemIdArray[i] != 0) {
					StoreGrnT storeGrnTObj = new StoreGrnT();
					storeGrnTObj.setSerialNo(srNo[i]);
					storeGrnTObj.setFreeQty(freeQty[i]);
					storeGrnTObj.setFreeItem(freeItemArr[i]);
					MasStoreItem masItem = new MasStoreItem();
					masItem.setId(itemIdArray[i]);
					storeGrnTObj.setItem(masItem);

					// if(manufacturerIdArray[i] != 0){
					// MasManufacturer masManufacturer= new MasManufacturer();
					// masManufacturer.setId(1);
					// storeGrnTObj.setManufacturer(masManufacturer);
					// }
					// if(brandIdArray[i] != 0){
					// MasStoreBrand masStoreBrand= new MasStoreBrand();
					// masStoreBrand.setId(brandIdArray[i]);
					// storeGrnTObj.setBrand(masStoreBrand);
					// }

					storeGrnTObj.setReceivedQty(quantityReceivedArray[i]);
					storeGrnTObj.setTax(taxArr[i]);
					storeGrnTObj.setDiscount(null);
					storeGrnTObj.setAmountValue(amountArr[i]);
					storeGrnTObj.setUnitRate(unitRateArr[i]);
					storeGrnTObj.setBatchNo(batchNoArr[i]);
					storeGrnTObj.setLotNo(lotNoArr[i]);
					storeGrnTObj.setDiscount(discountArr[i]);
					storeGrnTObj.setExpiryDate(HMSUtil
							.convertStringTypeDateToDateType(expdate[i]));
					storeGrnTObj.setManufacturerDate(HMSUtil
							.convertStringTypeDateToDateType(manuDate[i]));

					storeGrnTlist.add(storeGrnTObj);
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		infoMap.put("pageNo", pageNo);
		infoMap.put("loaninNo", loaninNo);
		infoMap.put("loaninId", loaninId);
		boolean flag = false;
		try {
			flag = storesHandlerService.submitAdjustLoanIn(loaninId, storeGrnM,
					poId, storeGrnTlist, infoMap);
		} catch (Exception e) {
			e.printStackTrace();
		}
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}

		String messageTOBeVisibleToTheUser = "";

		if (flag) {
			if (buttonFlag.equals("next")) {
				jsp = ADJUST_LOAN_IN;
				pageNo++;
				messageTOBeVisibleToTheUser = "adjust has been done Successfully";
				map = storesHandlerService.showGrnJsp(box, dataMap);
				if (map.get("loaninId") != null) {
					loaninId = (Integer) map.get("loaninId");
				}
				// List<StoreGrnM> grnMList =
				// storesHandlerService.getGrn(grnId);
				// map.put("grnMList", grnMList);

			} else {
				jsp = STORES_MESSAGE_JSP;
				pageNo++;
				messageTOBeVisibleToTheUser = "adjust has been done Successfully";
			}
		} else {
			messageTOBeVisibleToTheUser = "adjust has not been done Successfully";
		}

		jsp = "message";
		jsp += ".jsp";
		map.put("max", max);
		map.put("grnNo", grnNo);
		map.put("pageNo", pageNo);
		map.put("contentJsp", jsp);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("indexB", "map", map);

	}


	// ------------------------------------- new grid
	// method---------------------------



	public ModelAndView getItemListForLoanInByAutocomplete(
			HttpServletRequest request, HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		String itemNameField = "";
		String autoHint = "";
		int poId = 0;
		int hospitalId = 0;
		int deptId = 0;
		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (request.getParameter("requiredField") != null) {
			itemNameField = (request.getParameter("requiredField"));
		}
		if (request.getParameter(itemNameField) != null) {
			autoHint = (request.getParameter(itemNameField));
		}
		if (request.getParameter("poId") != null) {
			poId = Integer.parseInt((request.getParameter("poId")));
		}
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		dataMap.put("autoHint", autoHint);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("poId", poId);
		dataMap.put("box", box);
		map = storesHandlerService.getItemListForLoanInByAutocomplete(dataMap);
		jsp = "resultForLoanInItem";
		return new ModelAndView(jsp, "map", map);
	}
	public void checkLoanInItemsForVendor(HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		int deptId = 0;
		HttpSession session = request.getSession();
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		box.put("deptId", deptId);
		map = storesHandlerService.getLoanInItemsForVendor(box);
		List<StoreLoaninT> loaninTList = new ArrayList<StoreLoaninT>();
		if (map.get("loaninTList") != null) {
			loaninTList = (List<StoreLoaninT>) map.get("loaninTList");
		}
		StringBuffer sb = new StringBuffer();

		if(loaninTList.size() > 0){
			sb.append("<item>");
			sb.append("<message>" + "Loanin is already generated for this item.Do you want to continue?" + "</message>");
			sb.append("</item>");
		}
		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void fillItemsForLoanIn(HttpServletRequest request,
			HttpServletResponse response) {

		session = request.getSession();
		int deptId = 0;
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		Box box = HMSUtil.getBox(request);
		int poId = 0;
		String itemNameField = "";
		String nomenclature = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (request.getParameter("requiredField") != null) {
			nomenclature = (request.getParameter("requiredField"));
		}
		poId = box.getInt("poId");
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<StorePoDetail> poList = new ArrayList<StorePoDetail>();
		dataMap.put("nomenclature", nomenclature);
		dataMap.put("deptId", deptId);
		dataMap.put("poId", poId);

		map = storesHandlerService.fillItemsForLoanIn(dataMap);
		if (map.get("itemList") != null) {
			itemList = (List) map.get("itemList");
		}
		if (map.get("brandList") != null) {
			brandList = (List) map.get("brandList");
		}
		if (map.get("poList") != null) {
			poList = (List) map.get("poList");
		}

		StringBuffer sb = new StringBuffer();
		try {
			for (MasStoreItem masStoreItem : itemList) {

				sb.append("<item>");
				sb.append("<id>" + masStoreItem.getId() + "</id>");
				sb.append("<pvms>" + masStoreItem.getPvmsNo() + "</pvms>");
				try {
					sb.append("<au>"
							+ masStoreItem.getItemConversion()
									.getPurchaseUnit().getUnitName() + "</au>");
				} catch (Exception e) {
					sb.append("<au>" + "-" + "</au>");
				}

				try {
					sb.append("<bg>"
							+ masStoreItem.getBrandedGeneric()+ "</bg>");
				} catch (Exception e) {
					sb.append("<bg>" + "-" + "</bg>");
				}


				try {
					sb.append("<formula>"
							+ masStoreItem.getItemConversion().getFormula()
							+ "</formula>");
				} catch (Exception e) {
					sb.append("<formula>" + "-" + "</formula>");
				}
				try {
					sb.append("<conversionFactor>"
							+ masStoreItem.getItemConversion()
									.getConversionFactor1()
							+ "</conversionFactor>");
				} catch (Exception e) {
					sb.append("<conversionFactor>" + "-"
							+ "</conversionFactor>");
				}

				try {
					sb.append("<dispType>"
							+ masStoreItem.getItemConversion()
									.getIntermediateUnit().getUnitName()
							+ "</dispType>");
				} catch (Exception e) {
					sb.append("<dispType>" + "-" + "</dispType>");
				}

				sb.append("<expiry>" + masStoreItem.getExpiry() + "</expiry>");
				sb.append("<brands>");
				for (MasStoreBrand brand : brandList) {
					sb.append("<brand>");
					sb.append("<brandId>" + brand.getId() + "</brandId>");
					sb.append("<brandName>" + brand.getBrandName()
							+ "</brandName>");
					sb.append("<manufacturerId>"
							+ brand.getManufacturer().getId()
							+ "</manufacturerId>");
					sb.append("<manufacturerName>"
							+ brand.getManufacturer().getManufacturerName()
							+ "</manufacturerName>");
					sb.append("</brand>");
				}
				sb.append("</brands>");
				sb.append("<pos>");
				for (StorePoDetail po : poList) {
					sb.append("<po>");
					sb.append("<poId>" + po.getId() + "</poId>");
					sb.append("<poDispType>" + po.getDispType()
							+ "</poDispType>");
					sb.append("<poMdqValue>" + po.getMdqValue()
							+ "</poMdqValue>");
					sb.append("<poRatePerMdq>" + po.getRatePerMdq()
							+ "</poRatePerMdq>");
					sb.append("<poRate>" + po.getUnitRate() + "</poRate>");

					if (po.getDiscountPercent() == null)
						sb.append("<poDiscount>" + "0" + "</poDiscount>");
					else
						sb.append("<poDiscount>" + po.getDiscountPercent()
								+ "</poDiscount>");

					if (po.getTaxPercent() == null)
						sb.append("<poTax>" + "0" + "</poTax>");
					else
						sb
								.append("<poTax>" + po.getTaxAmtPerMdq()
										+ "</poTax>");

					if (po.getFreeQuantity() == null)
						sb.append("<poFreeQty>" + "0" + "</poFreeQty>");
					else
						sb.append("<poFreeQty>" + po.getFreeQuantity()
								+ "</poFreeQty>");

					sb.append("<poFreeItem>" + po.getFreeItem()
							+ "</poFreeItem>");

					try {
						sb.append("<poBrandId>" + po.getBrand().getId()
								+ "</poBrandId>");
					} catch (Exception e) {
						sb.append("<poBrandId>" + "" + "</poBrandId>");
					}

					try {
						sb.append("<poManufacturerId>"
								+ po.getManufacturer().getId()
								+ "</poManufacturerId>");
					} catch (Exception e) {
						sb.append("<poManufacturerId>" + ""
								+ "</poManufacturerId>");
					}
					sb.append("</po>");
				}
				sb.append("</pos>");

				sb.append("</item>");
			}

			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}

		// return new ModelAndView(jsp, "map", map);
	}

	// ------ new grid method--------------------------------------------------



	public ModelAndView createAdjustment(HttpServletRequest request,
			HttpServletResponse response) {

		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		StoreAdjustmentM storeAdjustmentM = new StoreAdjustmentM();
		StoreAdjustmentT storeAdjustmentT = new StoreAdjustmentT();
		String grnNo = "";
		new Date();

		Date entryDate = new Date();
		String encodedBy = "";
		Date encodedDate = null;
		String lastChgBy = "A";
		Date lastChgDate = null;
		String lastChgTime = "";
		int departmentId = 0;
		String date = "";
		String time = "";
		int noOfRows = 0;
		int pageNo = 1;
		String buttonFlag = "";
		String toPlace = "";
		String desc1 = "";
		String desc2 = "";
		String desc3 = "";
		String entryNo = "";
		int entryId = 0;
		int deptId = 0;
		int hospitalId = 0;
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));

		try {
			if (request.getParameter("pageNo") != null) {
				pageNo = Integer.parseInt(request.getParameter("pageNo"));

			}
			if (request.getParameter(NO_OF_ROWS) != null) {
				noOfRows = Integer.parseInt(request.getParameter(NO_OF_ROWS));
			}
			if (request.getParameter(ENTRY_ID) != null) {
				entryId = Integer.parseInt(request.getParameter(ENTRY_ID));

			}
			if (request.getParameter(TO_PLACE) != null) {
				toPlace = (request.getParameter(TO_PLACE));
			}
			if (request.getParameter(DESC1) != null) {
				desc1 = (request.getParameter(DESC1));
			}
			if (request.getParameter(DESC2) != null) {
				desc2 = (request.getParameter(DESC2));
			}
			if (request.getParameter(DESC3) != null) {
				desc3 = (request.getParameter(DESC3));
			}

			if (request.getParameter(ENTRY_NO) != null) {
				entryNo = (request.getParameter(ENTRY_NO));

			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		try {
			String te = "";

			if (request.getParameter(ENTRY_DATE) != null) {
				te = (String) (request.getParameter(ENTRY_DATE));

				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(ENTRY_DATE)));
				entryDate = java.sql.Date.valueOf(date4MySQL);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");

		String[] copyIds = request.getParameterValues(RequestConstants.COPY_TO);
		String allCopyIds = "";
		if (request.getParameterValues(COPY_TO) != null)
			for (int i = 0; i < copyIds.length; i++) {
				if (i != copyIds.length - 1)
					allCopyIds += copyIds[i] + ",";
				else
					allCopyIds += copyIds[i];

			}

		String headerStored = "no";

		if (pageNo == 1) {

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(deptId);
			storeAdjustmentM.setDepartment(masDepartment);

			storeAdjustmentM.setLastChangedDate(HMSUtil
					.convertStringTypeDateToDateType(date));
			storeAdjustmentM.setLastChangedTime(time);
			storeAdjustmentM.setStatus("y");

			// MasHospital masHospital= new MasHospital();
			// masHospital.setId(1);
			// storeAdjustmentM.setHospital(masHospital);
			storeAdjustmentM.setAdjustmentNo(entryNo);
			storeAdjustmentM.setAdjustmentDate(entryDate);
			storeAdjustmentM.setLastChangedBy("admin");
			storeAdjustmentM.setAdjustmentNo(entryNo);
			storeAdjustmentM.setReason("Defective Drugs");

		} else {
			headerStored = "yes";
			infoMap.put("headerStored", headerStored);
		}
		int length = 0;
		List<StoreAdjustmentT> storeAdjustmentTlist = new ArrayList<StoreAdjustmentT>();

		try {
			int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
					SR_NO);
			int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, ITEM_ID);
			int brandIdArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, BRAND_ID);
			String remarks[] = JKTRequestUtils.getRequiredStringParameters(
					request, REMARKS);
			String expriyDateArray[] = JKTRequestUtils
					.getRequiredStringParameters(request, EXPIRY_DATE);
			int manuArray[] = JKTRequestUtils.getRequiredIntParameters(request,
					MANUFACTURER_ID);

			String disposal[] = JKTRequestUtils.getRequiredStringParameters(
					request, DISPOSAL);
			String authyDeclared[] = JKTRequestUtils
					.getRequiredStringParameters(request, AUTHY_UNDER_DECLARED);
			String batchNoArr[] = JKTRequestUtils.getRequiredStringParameters(
					request, BATCH_ID);

			BigDecimal[] quantityReceivedArray = new BigDecimal[100];
			String mm[] = JKTRequestUtils.getRequiredStringParameters(request,
					QUANTITY_RECEIVED);
			int mmLen = mm.length;
			for (int i = 0; i < mmLen; i++) {
				BigDecimal val = new BigDecimal(mm[i]);
				quantityReceivedArray[i] = val;
			}

			if (buttonFlag.equals("next")) {
				// if(buttonFlag != null){
				length = 10;
			} else {
				length = noOfRows;
			}

			for (int i = 0; i < length; i++) {
				if (itemIdArray[i] != 0) {

					StoreAdjustmentT storeAdjustmentTObj = new StoreAdjustmentT();

					storeAdjustmentTObj.setSlNo(srNo[i]);
					MasStoreItem masItem = new MasStoreItem();
					masItem.setId(itemIdArray[i]);
					storeAdjustmentTObj.setItem(masItem);

					storeAdjustmentTObj
							.setExpiryDate(HMSUtil
									.convertStringTypeDateToDateType(expriyDateArray[i]));

					storeAdjustmentTObj.setBatchNo(batchNoArr[i]);
					storeAdjustmentTObj.setAdjustQty(quantityReceivedArray[i]);

					MasStoreBrand masStoreBrand = new MasStoreBrand();
					masStoreBrand.setId(brandIdArray[i]);
					if (brandIdArray[i] != 0) {
						storeAdjustmentTObj.setBrand(masStoreBrand);
					} else {
						storeAdjustmentTObj.setBrand(null);
					}

					storeAdjustmentTlist.add(storeAdjustmentTObj);
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		infoMap.put("pageNo", pageNo);
		infoMap.put("entryNo", entryNo);
		infoMap.put("entryId", entryId);
		infoMap.put("storeAdjustmentM", storeAdjustmentM);
		infoMap.put("storeAdjustmentTlist", storeAdjustmentTlist);
		infoMap.put("deptId", deptId);
		infoMap.put("userName", userName);
		infoMap.put("hospitalId", hospitalId);

		boolean flag = false;
		try {
			flag = storesHandlerService.createAdjustment(infoMap);

		} catch (Exception e) {
			e.printStackTrace();
		}
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}

		String messageTOBeVisibleToTheUser = "";

		if (flag) {
			if (buttonFlag.equals("next")) {
				jsp = DEFECTIVE_DRUGS_JSP;
				pageNo++;
				messageTOBeVisibleToTheUser = "Defect Drug Entry has  been done Successfully";
				map = storesHandlerService.showDefectiveDrugJsp(dataMap);
				if (map.get("entryId") != null) {
					entryId = (Integer) map.get("entryId");
				}
				List<StoreDefectiveDrugM> defectMList = storesHandlerService
						.getDefectDrug(entryId);
				map.put("defectMList", defectMList);

			} else {
				jsp = STORES_MESSAGE_JSP;
				pageNo++;
				messageTOBeVisibleToTheUser = "Defect Drug Entry adjustment has been done Successfully";
			}
		} else {
			messageTOBeVisibleToTheUser = "Defect Drug Entry  adjustment has not been done Successfully";
		}

		jsp = "message";
		jsp += ".jsp";

		url = "/hms/hms/stores?method=showDefectiveDrugJsp";
		map.put("entryNo", entryNo);
		map.put("pageNo", pageNo);
		map.put("contentJsp", jsp);
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("indexB", "map", map);

	}


	public ModelAndView showBooReportJsp(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		title = "BOO REPORT";
		List<StoreBoo> booList = storesHandlerService.getBooList();
		jsp = BOO_REPORT;
		map.put("booList", booList);
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView printBooReport(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		byte[] bytes = null;

		String booNo = null;
		HttpSession session = request.getSession();
		requestParameters.put("Dept_ID", session.getAttribute("deptId"));
		try {
			if (request.getParameter(BOO_NO) != null
					&& !(request.getParameter(BOO_NO).equals(""))) {

				booNo = request.getParameter(BOO_NO);
				requestParameters.put("booNo", booNo);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		try {
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport("BOO_EntryPrint"), requestParameters,
					(Connection) connectionMap.get("con"));

		} catch (JRException e) {

			e.printStackTrace();
		}
		response.setContentType("application/pdf");
		response.setContentLength(bytes.length);
		ServletOutputStream ouputStream;
		try {
			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView printDefectiveDrugJsp(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		byte[] bytes = null;

		String entryNo = null;
		HttpSession session = request.getSession();
		requestParameters.put("DEPART", session.getAttribute("deptId"));
		try {
			if (request.getParameter(ENTRY_NO) != null
					&& !(request.getParameter(ENTRY_NO).equals(""))) {

				entryNo = request.getParameter(ENTRY_NO);
				requestParameters.put("entryNo", entryNo);

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		try {
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport("submission_defective_drugs"),
					requestParameters, (Connection) connectionMap.get("con"));

		} catch (JRException e) {

			e.printStackTrace();
		}
		response.setContentType("application/pdf");
		response.setContentLength(bytes.length);
		ServletOutputStream ouputStream;
		try {
			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return new ModelAndView("indexB", "map", map);
	}

	// ================== END OF ABHA METHOD================

	// ================== END OF ABHA METHOD================

	// ================== end of functi
	private JasperReport getCompiledReport(String fileName) throws JRException {

		File reportFile = new File(getServletContext().getRealPath(
				"/reports/" + fileName + ".jasper"));

		JasperReport jasperReport = (JasperReport) JRLoader
				.loadObject(reportFile.getPath());

		return jasperReport;
	}

	// =================================================================================
	// =================================================================================

	// *********************************************************************************************************************
	// ------------------------------------Start of Methods Written By
	// Vivek------------------------------------------
	// ****************************************************************************************************************

	public ModelAndView getSectionWiseList(HttpServletRequest request,
			HttpServletResponse response) {
		int sectionId = 0;
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);
		Box box = HMSUtil.getBox(request);
		if (request.getParameter("sectionId") != null) {
			sectionId = Integer.parseInt(""
					+ (request.getParameter("sectionId")));
		}
		map = storesHandlerService.showIndentJspDepot(dataMap);

		jsp = INDENT_TO_DEPOT_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("sectionId", sectionId);
		return new ModelAndView("indexB", "map", map);
	}

	public void fillItemsForIndentToSOC(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session------
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		BigDecimal stockIn = null;

		Box box = HMSUtil.getBox(request);
		String itemNameField = "";
		String pvmsNo = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (request.getParameter("pvmsNo") != null) {
			pvmsNo = (request.getParameter("pvmsNo"));
		}

		dataMap.put("pvmsNo", pvmsNo);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.fillItemsForIndentToSOC(dataMap);
		if (map.get("itemList") != null) {
			itemList = (List) map.get("itemList");
		}
		if (map.get("brandList") != null) {
			brandList = (List) map.get("brandList");
		}
		if (map.get("stockIn") != null) {
			stockIn = new BigDecimal("" + map.get("stockIn"));
		}
		StringBuffer sb = new StringBuffer();
		try {
			for (MasStoreItem masStoreItem : itemList) {
				sb.append("<item>");
				sb.append("<id>" + masStoreItem.getId() + "</id>");
				sb.append("<pvms>" + masStoreItem.getPvmsNo() + "</pvms>");
				sb.append("<au>"
						+ masStoreItem.getItemConversion().getPurchaseUnit()
								.getUnitName() + "</au>");
				sb.append("<nomenclature>" + masStoreItem.getNomenclature()
						+ "</nomenclature>");
				sb.append("<brands>");
				for (MasStoreBrand brand : brandList) {
					sb.append("<brand>");
					sb.append("<brandId>" + brand.getId() + "</brandId>");
					sb.append("<brandName>" + brand.getBrandName()
							+ "</brandName>");
					sb.append("<manufacturerId>"
							+ brand.getManufacturer().getId()
							+ "</manufacturerId>");
					sb.append("<manufacturerName>"
							+ brand.getManufacturer().getManufacturerName()
							+ "</manufacturerName>");
					sb.append("</brand>");
				}
				sb.append("</brands>");
				sb.append("<stockIn>" + stockIn + "</stockIn>");
				sb.append("</item>");
			}

			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}

		// return new ModelAndView(jsp, "map", map);
	}

	public void getManufacturerNameInAjax(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		int brandId = 0;
		String manufacturerName = "";
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (request.getParameter(BRAND_ID) != null) {
			brandId = Integer.parseInt("" + (request.getParameter(BRAND_ID)));
		}
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("brandId", brandId);
		map = storesHandlerService.getManufacturerNameInAjax(dataMap);
		if (map.get("manufacturerName") != null) {
			manufacturerName = ("" + map.get("manufacturerName"));
		}
		int mId = 1;
		if (map.get("mId") != null) {
			mId = Integer.parseInt(("" + map.get("mId")));
		}
		StringBuffer sb = new StringBuffer();
		try {
			sb.append("<item>");
			sb.append("<manufacturerName>" + manufacturerName
					+ "</manufacturerName>");
			sb.append("<mId>" + mId + "</mId>");
			sb.append("</item>");
			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}

		// return new ModelAndView(jsp, "map", map);
	}

	public void fillItemsForIssueToDepot(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		String pvmsNo = "";
		try {
			if (request.getParameter("requiredField") != null) {
				pvmsNo = URLDecoder.decode(request
						.getParameter("requiredField"), "UTF-8");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		dataMap.put("pvmsNo", pvmsNo);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.fillItemsForIssueToDepot(dataMap);
		if (map.get("itemList") != null) {
			itemList = (List) map.get("itemList");
		}
		StringBuffer sb = new StringBuffer();
		for (MasStoreItem masStoreItem : itemList) {
			sb.append("<item>");
			sb.append("<id>" + masStoreItem.getId() + "</id>");
			sb.append("<pvms>" + masStoreItem.getPvmsNo() + "</pvms>");
			sb.append("<au>"
					+ masStoreItem.getItemConversion().getPurchaseUnit()
							.getUnitName() + "</au>");
			sb.append("<name>" + masStoreItem.getNomenclature() + "</name>");
			sb.append("</item>");
		}

		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}

		// return new ModelAndView(jsp, "map", map);
	}

	// ----------------------------------------Final MMF For Projection To
	// DGAFMS--------------------------------------------------
	public ModelAndView printMmfIndent(HttpServletRequest request,
			HttpServletResponse response) throws JRException {
		HttpSession session = request.getSession();
		int indentId = 0;
		Map parameters = new HashMap();
		try {
			if (request.getParameter(INDENT_ID) != null
					&& !(request.getParameter(INDENT_ID).equals(""))) {
				indentId = Integer.parseInt(request.getParameter(INDENT_ID));
			}

			parameters = storesHandlerService.printMmfIndent(indentId);
			parameters.put("indentId", indentId);
			byte[] bytes = null;
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(MMF_INDET_PRINT), parameters,
					(Connection) parameters.get("conn"));

			response.setHeader("Content-Disposition", "attachment; filename="
					+ MMF_INDET_PRINT + ".pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;

			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (Exception e) {
			e.printStackTrace();
		}

		return new ModelAndView("indexB", "map", map);
	}

	public void fillItemsCommon(HttpServletRequest request,HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		String pvmsNo = "";
		int sec=0;
		try {
			if (request.getParameter("pvmsNo") != null) {
				pvmsNo = request.getParameter("pvmsNo");
			}
			if(request.getParameter("sec")!=null){
				sec=Integer.parseInt(request.getParameter("sec"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		dataMap.put("pvmsNo", pvmsNo);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("sec",sec);
		map = storesHandlerService.fillItemsCommon(dataMap);
		if (map.get("itemList") != null) {
			itemList = (List) map.get("itemList");
		}

		if (map.get("brandList") != null) {
			brandList = (List) map.get("brandList");
		}
		StringBuffer sb = new StringBuffer();
		for (MasStoreItem masStoreItem : itemList) {
			sb.append("<item>");
			sb.append("<id>" + masStoreItem.getId() + "</id>");
			sb.append("<pvms>" + masStoreItem.getPvmsNo() + "</pvms>");
			sb.append("<name>" + masStoreItem.getNomenclature() + "</name>");
			try {
				sb.append("<au>"
						+ masStoreItem.getItemConversion().getPurchaseUnit()
								.getUnitName() + "</au>");
			} catch (Exception e) {
				sb.append("<au>" + "-" + "</au>");
			}
		/*	try {
				sb.append("<au>"
						+ masStoreItem.getItemConversion().getPurchaseUnit()
								.getUnitName() + "</au>");
			} catch (Exception e) {
				sb.append("<au>" + "-" + "</au>");
			}
			try {
				sb.append("<dispType>"
						+ masStoreItem.getItemConversion()
								.getIntermediateUnit().getUnitName()
						+ "</dispType>");
			} catch (Exception e) {
				sb.append("<dispType>" + "-" + "</dispType>");
			}
			sb.append("<name>" + masStoreItem.getNomenclature() + "</name>");

			sb.append("<brands>");
			for (MasStoreBrand masStoreBrand : brandList) {
				sb.append("<brand>");
				sb.append("<brandId>" + masStoreBrand.getId() + "</brandId>");
				sb.append("<brandName>" + masStoreBrand.getBrandName()
						+ "</brandName>");
				sb.append("<manufacturerId>"
						+ masStoreBrand.getManufacturer().getId()
						+ "</manufacturerId>");
				sb.append("<manufacturerName>"
						+ masStoreBrand.getManufacturer().getManufacturerName()
						+ "</manufacturerName>");
				sb.append("</brand>");
			}
			sb.append("</brands>");*/

			sb.append("</item>");
		}
		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}
		// return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getItemListForMMFIndentModify(
			HttpServletRequest request, HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		String autoHint = "";
		int mmfForTheYear = 0;
		Map<String, Object> dataMap = new HashMap<String, Object>();
		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			if (request.getParameter("mmfForTheYear") != null) {
				mmfForTheYear = Integer.parseInt(""
						+ (request.getParameter("mmfForTheYear")));
			}
			List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
			dataMap.put("autoHint", autoHint);
			dataMap.put("deptId", deptId);
			dataMap.put("userName", userName);
			dataMap.put("hospitalId", hospitalId);
			dataMap.put("mmfForTheYear", mmfForTheYear);

			map = storesHandlerService.getItemListForMMFIndentModify(dataMap);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "result";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getItemListForMMFIndent(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		String autoHint = "";
		int mmfForTheYear = 2008;
		Map<String, Object> dataMap = new HashMap<String, Object>();
		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			if (request.getParameter("mmfForTheYear") != null) {
				mmfForTheYear = Integer.parseInt(""
						+ (request.getParameter("mmfForTheYear")));
			}

			List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
			dataMap.put("autoHint", autoHint);
			dataMap.put("deptId", deptId);
			dataMap.put("userName", userName);
			dataMap.put("hospitalId", hospitalId);
			dataMap.put("mmfForTheYear", mmfForTheYear);

			map = storesHandlerService.getItemListForMMFIndent(dataMap);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "result";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView checkYearExists(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		int mmfForTheYear = 0;

		try {

			if (request.getParameter(RequestConstants.MMF_FOR_THE_YEAR) != null) {
				mmfForTheYear = Integer.parseInt(request
						.getParameter(RequestConstants.MMF_FOR_THE_YEAR));
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		if (mmfForTheYear != 0) {
			dataMap.put("mmfForTheYear", mmfForTheYear);
			dataMap.put("deptId", deptId);
			map = storesHandlerService.checkYearExists(dataMap);
		}
		jsp = INDENT_JSP;
		jsp = jsp + ".jsp";
		title = "Indent";

		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showPrintIndentSocJsp(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> map = new HashMap<String, Object>();
		// map = storesHandlerService.showPrintIndentDepotJsp();
		jsp = PRINT_INDENT_SOC_JSP;
		jsp = jsp + ".jsp";
		title = "Indent";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView lockMMFIndent(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		int year = 0;
		Map<String, Object> map = new HashMap<String, Object>();
		String messageTOBeVisibleToTheUser = "Record Not Locked";
		if (request.getParameter(RequestConstants.MMF_FOR_THE_YEAR) != null) {
			year = Integer.parseInt(request
					.getParameter(RequestConstants.MMF_FOR_THE_YEAR));
		}
		map = storesHandlerService.lockMMFIndent(year);
		if (map.get("messageTOBeVisibleToTheUser") != null) {
			messageTOBeVisibleToTheUser = ""
					+ map.get("messageTOBeVisibleToTheUser");
		}
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		jsp = INDENT_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showLockMMFIndent(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.showLockMMFIndent();
		jsp = LOCK_MMF_INDENT_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings("unchecked")
	public ModelAndView showPrintIndentDepotJsp(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		try {
			map = storesHandlerService.showPrintIndentDepotJsp(dataMap);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = PRINT_INDENT_DEOPT_JSP;
		jsp = jsp + ".jsp";
		title = "Indent";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView importMMFIndent(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> map2 = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		int year = 0;
		String flag = "n";
		int indentId = 0;
		String messageTOBeVisibleToTheUser = "";
		List<StoreIndentM> searchIndentList = new ArrayList<StoreIndentM>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		try {
			if (request.getParameter(RequestConstants.MMF_FOR_THE_YEAR) != null) {
				year = Integer.parseInt(request
						.getParameter(RequestConstants.MMF_FOR_THE_YEAR));
			}
			dataMap.put("deptId", deptId);
			dataMap.put("hospitalId", hospitalId);
			dataMap.put("userName", userName);
			dataMap.put("year", year);
			map = storesHandlerService.importMMFIndent(dataMap);
			if (map.get("flag") != null) {
				flag = ("" + map.get("flag"));
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		if (map.get("messageTOBeVisibleToTheUser") != null) {
			messageTOBeVisibleToTheUser = ""
					+ map.get("messageTOBeVisibleToTheUser");

		}
		jsp = INDENT_JSP;
		jsp = jsp + ".jsp";
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showImportMMFIndentJsp(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();

		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.showImportMMFIndentJsp(dataMap);
		jsp = IMPORT_MMF_INDENT;
		jsp = jsp + ".jsp";
		title = "Import MMF Indent";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings("unchecked")
	public ModelAndView printIndentSoc(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		int indentId = 0;
		if (request.getParameter(INDENT_NO) != null
				&& !(request.getParameter(INDENT_NO).equals(""))) {
			indentId = Integer.parseInt(request.getParameter(INDENT_NO));
		}
		Map parameters = new HashMap();
		parameters = storesHandlerService.getIndentSocPrintMap(indentId);

		parameters.put("indentId", indentId);
		byte[] bytes = null;

		try {
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(INDENT_TO_SOC_JASPER), parameters,
					(Connection) parameters.get("conn"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setHeader("Content-Disposition", "attachment; filename="
				+ INDENT_TO_SOC_JASPER + ".pdf");
		response.setContentLength(bytes.length);
		ServletOutputStream ouputStream;
		try {
			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView printIndentDepotJsp(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		int indentId = 0;
		if ((request.getParameter(INDENT_ID) != null)
				&& !(request.getParameter(INDENT_ID).equals(""))) {
			indentId = Integer.parseInt(request.getParameter(INDENT_ID));
		}
		Map parameters = new HashMap();
		parameters = storesHandlerService.getIndentDepotPrintMap(indentId);
		try {
			parameters.put("indentId", indentId);
			map = storesHandlerService.getConnectionForReport();

			HMSUtil.generateReport(INDENT_TO_DEPOT_JASPER, map, (Connection)map.get("con"), response, getServletContext());

		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	/*
	 * This method is used for displaying MMF Indent Screen. In this we are
	 * making a call to data Service current year as Parameter. We get a list
	 * based on that. Here we are checking existence of current year MMF Indent.
	 * If MMF Indent is exists for Current Year ,we are displaying a message
	 * Otherwise are we will send the Data to Jsp with Current Year
	 */
	@SuppressWarnings("unused")
	public ModelAndView showIndentJsp(HttpServletRequest request,
			HttpServletResponse response) {
		// Local Variable Declaration
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		Map<String, Object> indentMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		String messageTOBeVisibleToTheUser = "";

		int masterRecordExist = 0;
		int noOfRecordsAlreadyStored = 0;
		int indentId = 0;
		boolean flag = false;
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		// Method Body
		List<StoreIndentM> searchPanelIndentList = new ArrayList<StoreIndentM>();
		try {

			indentMap = storesHandlerService
					.checkExistenceOfCuurentYearIndent(year);
			if (indentMap.get("noOfRecordsAlreadyStored") != null)
				noOfRecordsAlreadyStored = Integer.parseInt(""
						+ indentMap.get("noOfRecordsAlreadyStored"));
			if (indentMap.get("indentId") != null)
				indentId = Integer.parseInt("" + indentMap.get("indentId"));
			if (indentMap.get("searchPanelIndentList") != null)
				searchPanelIndentList = (List) (indentMap
						.get("searchPanelIndentList"));

			if (flag) {
				jsp = INDENT_JSP;
				messageTOBeVisibleToTheUser = "For this Year	MMF Indent is Already there.If you want to change it,go to Search";
			} else {
				jsp = INDENT_JSP;
			}

			if ((session.getAttribute("itemList") == null)
					|| (session.getAttribute("sectionList") == null)) {
				/*
				 * method commented by vikas to pass the department value which
				 * is hard coded in Ds method
				 */
				// map = storesHandlerService.showIndent();
				map = storesHandlerService.showIndent(deptId);
				if (map.get("sectionList") != null) {
					sectionList = (List) map.get("sectionList");
					session.setAttribute("sectionList", sectionList);

				}
			}
			jsp = jsp + ".jsp";
			title = "Indent";

			map.put("searchPanelIndentList", searchPanelIndentList);
			map.put("noOfRecordsAlreadyStored", noOfRecordsAlreadyStored);
			map.put("indentId", indentId);
			map.put("contentJsp", jsp);
			map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
			map.put("title", title);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView getItems(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		String autoHint = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (request.getParameter("requiredField") != null) {
			itemNameField = (request.getParameter("requiredField"));
		}
		if (request.getParameter(itemNameField) != null) {
			autoHint = (request.getParameter(itemNameField));
		}
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		dataMap.put("autoHint", autoHint);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.getItemListThroughAjax(dataMap);
		jsp = "result";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView showIndentJspAF(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> map = new HashMap<String, Object>();
		/*
		 * method commented by vikas to pass the department value which is hard
		 * coded in Ds method
		 */
		// map = storesHandlerService.showIndent();
		map = storesHandlerService.showIndent(deptId);
		jsp = "indentOAFU";
		jsp = jsp + ".jsp";
		title = "Indent";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showIndentJspSOC(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);
		String jsp = "";
		try {
			map = storesHandlerService.showIndentJspSOC(dataMap);
		} catch (Exception e) {
			e.printStackTrace();
		}

		jsp = INDENT_TO_SOC;
		jsp = jsp + ".jsp";
		title = "Indent";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings("unchecked")
	public ModelAndView modifyIndent(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> map2 = new HashMap<String, Object>();
		List<StoreIndentM> searchIndentList = new ArrayList<StoreIndentM>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		int pageNo = 1;
		jsp = INDENT_MODIFY;
		jsp += ".jsp";
		int radio_str = 0;
		if (request.getParameter(INDENT_IF_YEAR_EXISTS) != null) {
			radio_str = Integer.parseInt(request
					.getParameter(INDENT_IF_YEAR_EXISTS));
		}
		map = (Map) storesHandlerService.getIndentModifyMap(radio_str, pageNo);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("radio_str", radio_str);
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		itemList = storesHandlerService.getItemList();
		map.put("itemList", itemList);
		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView getHeader1(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String jsp = "";
		int radioVal = 1;

		if (request.getParameter(RADIO_PVMS) != null) {

			radioVal = Integer.parseInt(request.getParameter(RADIO_PVMS));

		}

		if (radioVal == 1) {
			jsp = "indent";
		} else if (radioVal == 2) {
			jsp = "indentOAF";
		} else if (radioVal == 3) {
			jsp = "indentBD";
		} else {
			jsp = "socIndent";
		}
		/*
		 * method commented by vikas to pass the department value which is hard
		 * coded in Ds method
		 */
		// map = storesHandlerService.showIndent();
		map = storesHandlerService.showIndent(deptId);
		jsp += ".jsp";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getHeader(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String jsp = "";
		int radioVal = 1;

		if (request.getParameter(RADIO_PVMS) != null) {

			radioVal = Integer.parseInt(request.getParameter(RADIO_PVMS));

		}

		if (radioVal == 1) {
			jsp = "pvmsByDgrc";
		} else if (radioVal == 2) {
			jsp = "indentByAf";
		} else if (radioVal == 3) {
			jsp = "indentByDepot";
		} else {
			jsp = "socIndent";
		}
		/*
		 * method commented by vikas to pass the department value which is hard
		 * coded in Ds method
		 */
		// map = storesHandlerService.showIndent();
		map = storesHandlerService.showIndent(deptId);
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings("unchecked")
	public ModelAndView searchIndent(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String fromDate = "";
		String toDate = "";
		String indentNo = "";
		int mmfYear = 0;
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> tempMap = new HashMap<String, Object>();
		Map<String, Object> searchFieldMap = new HashMap<String, Object>();
		List<StoreIndentM> searchIndentList = new ArrayList<StoreIndentM>();
		try {
			if (request.getParameter(MMF_FOR_THE_YEAR) != null) {
				mmfYear = Integer.parseInt(request
						.getParameter(MMF_FOR_THE_YEAR));

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		searchFieldMap.put("mmfYear", mmfYear);
		try {
			/*
			 * method commented by vikas to pass the value for department id
			 * which is hard coded in DS method
			 */
			// tempMap = storesHandlerService.showIndent();
			tempMap = storesHandlerService.showIndent(deptId);
			if (tempMap.get("searchIndentList") != null)
				searchIndentList = (List) tempMap.get("searchIndentList");
			map = storesHandlerService.searchIndent(searchFieldMap);
			map.put("searchIndentList", searchIndentList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = SEARCH_INDENT_JSP;
		jsp = jsp + ".jsp";
		title = "Indent";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings("unchecked")
	public ModelAndView searchIndentSOC(HttpServletRequest request,
			HttpServletResponse response) throws ServletRequestBindingException {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> map2 = new HashMap<String, Object>();
		List<StoreIndentM> searchIndentList = new ArrayList<StoreIndentM>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		int pageNo = 1;
		jsp = MODIFY_INDENT_TO_SOC;
		jsp += ".jsp";
		int radio_str = 0;
		if (request.getParameter(INDENT_NO_FOR_SEARCH) != null) {
			radio_str = Integer.parseInt(request
					.getParameter(INDENT_NO_FOR_SEARCH));
			map = (Map) storesHandlerService.getIndentModifyMapForSOC(
					radio_str, pageNo);
		}
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("radio_str", radio_str);

		return new ModelAndView("indexB", "map", map);

	}



	public ModelAndView previousIndent(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		int indentId = 0;
		int indentNo = 0;
		Map infoMap = new HashMap();
		String previousPage = "yes";
		int pageNo = 1;
		try {
			if (request.getParameter("pageNo") != null) {
				pageNo = Integer.parseInt(request.getParameter("pageNo"));
			}
			if (request.getParameter(INDENT_ID) != null) {
				indentId = Integer.parseInt(request.getParameter(INDENT_ID));
			}
			if (request.getParameter(INDENT_NO) != null) {
				indentNo = Integer.parseInt(request.getParameter(INDENT_NO));
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		map = (Map) storesHandlerService.getIndentMAndT(indentId);
		jsp = "indent";
		jsp += ".jsp";

		map.put("indentId", indentId);
		map.put("maxIndentNo", indentNo);
		map.put("pageNo", pageNo);
		map.put("contentJsp", jsp);
		map.put("previousPage", previousPage);
		return new ModelAndView("indexB", "map", map);
	}

	/*
	 * This method is used adding Header and Detail records to Indent. It is
	 * used for two operations(Next,Submit) based on the flag ie. buttonFlag
	 */
	public ModelAndView addNextOrSubmitIndent(HttpServletRequest request,
			HttpServletResponse response) {

		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Box box = HMSUtil.getBox(request);
		StoreIndentM storeIndentM = new StoreIndentM();
		@SuppressWarnings("unused")
		StoreIndentT storeIndentT = new StoreIndentT();
		String indentFrom = "";
		@SuppressWarnings("unused")
		Date indentDate = null;
		String indentTo = "";
		@SuppressWarnings("unused")
		int sectionId = 12;
		String nrs = "";
		int rows = 0;
		@SuppressWarnings("unused")
		String indentType = "p";
		String encodedBy = "";
		Date encodedDate = null;
		String lastChgBy = "";
		@SuppressWarnings("unused")
		Date lastChgDate = null;
		String lastChgTime = "";
		String indentOption = "";
		String patientDetails = "";
		String justificationNiv = "";
		String pacJustification = "";
		String pacForeignAdd = "";
		String authority = "";
		String buttonName = "";
		int indentId = 0;
		int serialNo = 0;
		int itemId = 1;
		int stockIn = 0;
		int qtyInDemand = 0;
		int qtyInMmf = 0;
		int qtyReceived = 0;
		int radioVal = 0;
		int noOfRows = 0;
		BigDecimal unitRate = null;
		String brandName = "";
		int manufactureId = 1;
		String marketedBy = "";
		BigDecimal totalCost = null;
		Date lastReceiptDate = null;
		BigDecimal lastReceiptQty = null;
		Map<String, Object> infoMap = new HashMap<String, Object>();
		boolean flag = false;
		int pageNo = 1;
		String url = "";
		int mmfForTheYear = 0;
		String indentNo = "";

		if (request.getParameter(MMF_FOR_THE_YEAR) != null) {
			mmfForTheYear = Integer.parseInt(request
					.getParameter(MMF_FOR_THE_YEAR));
		}
		try {
			if (request.getParameter("buttonName") != null) {
				buttonName = request.getParameter("buttonName");
			}
			if (request.getParameter(CHANGED_DATE) != null) {
				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(CHANGED_DATE)));
				lastChgDate = java.sql.Date.valueOf(date4MySQL);
			}
			if (request.getParameter(CHANGED_BY) != null) {
				lastChgBy = request.getParameter(CHANGED_BY);
			}
			if (request.getParameter(CHANGED_TIME) != null) {
				lastChgTime = request.getParameter(CHANGED_TIME);
			}

			if (request.getParameter(NO_OF_ROWS) != null) {
				noOfRows = Integer.parseInt(request.getParameter(NO_OF_ROWS));
			}
			if (request.getParameter("pageNo") != null) {
				pageNo = Integer.parseInt(request.getParameter("pageNo"));
			}
			if (request.getParameter(INDENT_ID) != null) {
				indentId = Integer.parseInt(request.getParameter(INDENT_ID));
			}
			if (request.getParameter(INDENT_NO) != null) {
				indentNo = (request.getParameter(INDENT_NO));
			}
			if (request.getParameter(RADIO_PVMS) != null) {

				radioVal = Integer.parseInt(request.getParameter(RADIO_PVMS));

			}
			if (radioVal == 1)
				indentType = "p";
			if (radioVal == 2)
				indentType = "a";
			if (radioVal == 3)
				indentType = "d";
			if (radioVal == 4) {
				indentType = "s";
				try {
					if (request.getParameter(DETAIL_OF_PATIENT) != null) {
						patientDetails = (request
								.getParameter(DETAIL_OF_PATIENT));
					}
					if (request.getParameter(AUTHORITY) != null) {
						authority = (request.getParameter(AUTHORITY));
					}
					if (request.getParameter(JUSTIFICATION) != null) {
						justificationNiv = (request.getParameter(JUSTIFICATION));
					}
					if (request.getParameter(GENERAL_DETAILS) != null) {
						pacJustification = (request
								.getParameter(GENERAL_DETAILS));
					}
					if (request.getParameter(ADDRESS_OF) != null) {
						pacForeignAdd = (request.getParameter(ADDRESS_OF));
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			if (request.getParameter(TYPE_OF_INDENT) != null) {
				indentOption = (request.getParameter(TYPE_OF_INDENT));
				if (Integer.parseInt(request.getParameter(TYPE_OF_INDENT)) == 1) {
					indentOption = "Monthly";
				} else {
					indentOption = "Yearly";
				}
			}

			if (pageNo != 1) {
				indentId = storesHandlerService.getIndentId((mmfForTheYear));
			}
			if (request.getParameter(INDENT_FROM) != null) {
				indentFrom = (request.getParameter(INDENT_FROM));
			}
			if (request.getParameter(INDENT_TO) != null) {
				indentTo = (request.getParameter(INDENT_TO));
			}

		} catch (Exception e) {

			e.printStackTrace();
		}
		try {
			String te = "";

			if (request.getParameter(INDENT_DATE) != null) {
				te = (String) (request.getParameter(INDENT_DATE));

				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(INDENT_DATE)));
				indentDate = java.sql.Date.valueOf(date4MySQL);
			}
		} catch (Exception e) {
e.printStackTrace();		}

		try {
			if (request.getParameter(NRS) != null) {
				nrs = (request.getParameter(NRS));
			}
		} catch (Exception e) {
			e.printStackTrace();		}

		if (request.getParameter(NO_OF_ROWS) != null) {

			rows = Integer.parseInt(request.getParameter(NO_OF_ROWS));
		}

		String headerStored = "no";

		if (pageNo == 1) {
			try {
				storeIndentM.setIndentNo("01/" + mmfForTheYear);
				storeIndentM.setIndentDate(indentDate);
				storeIndentM.setRequiredForm(indentFrom);
				MasStoreSection masStoreSection = new MasStoreSection();
				masStoreSection.setId(sectionId);

				storeIndentM.setNrs(nrs);
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				storeIndentM.setDepartment(masDepartment);
				storeIndentM.setIndentType(indentType);
				storeIndentM.setEncodedBy(encodedBy);
				storeIndentM.setEncodedDate(indentDate);
				storeIndentM.setLastChgBy(lastChgBy);
				storeIndentM.setLastChgDate(indentDate);
				storeIndentM.setLastChgTime(lastChgTime);
				storeIndentM.setStatus("o");
				storeIndentM.setIndentOption(indentOption);
				storeIndentM.setSuppliedBy(null);
				storeIndentM.setPatientDetails(patientDetails);
				storeIndentM.setJustificationNiv(justificationNiv);
				storeIndentM.setPacJustification(pacJustification);
				storeIndentM.setPacForeignAdd(pacForeignAdd);
				storeIndentM.setAuthority(authority);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				storeIndentM.setHospital(masHospital);
				storeIndentM.setMmfForTheYear(mmfForTheYear);
				storeIndentM.setIndentNo(indentNo);
				storeIndentM.setImported("n");

			} catch (Exception e) {
				e.printStackTrace();
			}
		} else {

			headerStored = "yes";
			infoMap.put("headerStored", headerStored);
		}

		int length = 0;
		List<StoreIndentT> storeIndentTlist = new ArrayList<StoreIndentT>(10);
		try {
			int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
					SR_NO);
			int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, ITEM_ID);
			int qtyInMmyArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, QTY_IN_MMF);

			if (buttonName.equals("next")) {
				// if(buttonFlag != null){
				length = 8;
			} else {
				length = noOfRows;
			}
			for (int i = 0; i < length; i++) {

				if (itemIdArray[i] != 0) {
					StoreIndentT storeIndentTObj = new StoreIndentT();
					storeIndentTObj.setSerialNo(srNo[i]);

					MasStoreItem masItem = new MasStoreItem();
					masItem.setId(itemIdArray[i]);
					storeIndentTObj.setItem(masItem);

					storeIndentTObj.setStockIn(null);

					BigDecimal bigDecimal = new BigDecimal(qtyInMmyArray[i]);
					storeIndentTObj.setQtyInMmf(bigDecimal);
					storeIndentTObj.setQtyInDemand(null);
					storeIndentTObj.setQtyReceived(null);

					storeIndentTObj.setSection(null);
					MasDepartment masDepartment = new MasDepartment();
					masDepartment.setId(deptId);

					storeIndentTObj.setUnitRate(unitRate);
					storeIndentTObj.setBrand(null);

					MasManufacturer manufacturer = new MasManufacturer();
					manufacturer.setId(manufactureId);
					storeIndentTObj.setManufacture(manufacturer);
					storeIndentTObj.setMarketedBy(marketedBy);
					storeIndentTObj.setTotalCost(totalCost);
					storeIndentTObj.setLastReceiptDate(lastReceiptDate);
					storeIndentTObj.setLastReceiptQty(lastReceiptQty);

					// storeIndentTObj.setIndent();

					storeIndentTlist.add(storeIndentTObj);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();		}
		infoMap.put("pageNo", pageNo);
		infoMap.put("indentId", indentId);
		infoMap.put("deptId", deptId);
		infoMap.put("userName", userName);
		infoMap.put("hospitalId", hospitalId);
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		try {
			flag = storesHandlerService.addNextOrSubmitIndentToMMF(
					storeIndentM, storeIndentTlist, infoMap);
			indentId = storesHandlerService.getIndentId(mmfForTheYear);

		} catch (Exception e) {
			e.printStackTrace();
		}
		String messageTOBeVisibleToTheUser = "";
		if (flag) {
			messageTOBeVisibleToTheUser = "MMf Indent  Records Added Successfully";
		} else {
			messageTOBeVisibleToTheUser = "MMf Indent  Records Not Added Successfully";
		}
		if (buttonName.equals("next")) {
			jsp = INDENT_JSP;
		} else {
			jsp = STORES_MESSAGE_JSP;
			url = "/hms/hms/stores?method=showIndentJsp";
		}
		pageNo = pageNo + 1;
		jsp += ".jsp";
		map.put("indentOption", indentOption);
		map.put("indentId", indentId);
		map.put("pageNo", pageNo);
		map.put("contentJsp", jsp);
		map.put("mmfForTheYear", mmfForTheYear);
		map.put("url", url);
		itemList = storesHandlerService.getItemList();
		map.put("itemList", itemList);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("indexB", "map", map);
	}

	/*
	 * This method is used adding Header and Detail records to Indent To Indent.
	 * It is used for two operations(Next,Submit) based on the flag ie.
	 * buttonFlag
	 */
	/*public ModelAndView updateNextOrSubmitIndentToDepot(
			HttpServletRequest request, HttpServletResponse response)
			throws java.text.ParseException {

		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
        Box box = HMSUtil.getBox(request);
		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		*//***********************************************************************
		 * Local Variable Declaration*
		 **********************************************************************//*
		StoreIndentM storeIndentM = new StoreIndentM();
		StoreIndentT storeIndentT = new StoreIndentT();
		List<StoreIndentT> storeIndentTListForUpdate = new ArrayList<StoreIndentT>();
		List<StoreIndentT> storeIndentTListForAdd = new ArrayList<StoreIndentT>();
		Map<String, Object> masterAndDetailMap = new HashMap<String, Object>();
		List<StoreIndentT> gridIndentTList = new ArrayList<StoreIndentT>();
		StoreIndentM storeIndentMObj = new StoreIndentM();
		Map map2 = new HashMap();
		String indentNo = "";
		String indentFrom = "";
		Date indentDate = null;
		String indentTo = "";
		int sectionId = 12;
		String nrs = "";
		int rows = 0;
		String indentType = "d";
		String encodedBy = "";
		Date encodedDate = null;
		String lastChgBy = "A";
		String lastChgTime = "";
		String indentOption = "";
		String patientDetails = "";
		String justificationNiv = "";
		String pacJustification = "";
		String pacForeignAdd = "";
		String authority = "";
		int indentId = 0;
		int serialNo = 0;
		int itemId = 1;
		int stockIn = 0;
		int qtyInDemand = 0;
		int qtyInMmf = 0;
		int qtyReceived = 0;
		int radioVal = 0;
		int totalRecords = 0;
		int mmfForTheYear = 0;
		int idArrayLength = 0;
		int length = 0;
		String messageTOBeVisibleToTheUser = "";
		// Grid related Variables
		int pageNo = 1;
		*//** Represents Page No *//*
		String buttonName = "";
		*//** Represents which button user clicked in JSP(Next/Submit) *//*
		String noDetailRecords = "no";
		*//** Represents *//*
		String headerStored = "no";
		String url = "";
		Date lastChgDate = new Date();
		int noOfRows = 0;
		int supplyDepot = 0;
		String address = "";
		// Method Body

		try {
			*//*******************************************************************
			 * Getting Header Information From JSP*
			 ******************************************************************//*

			if (request.getParameter("buttonName") != null) {
				buttonName = request.getParameter("buttonName");
			}
			if (request.getParameter(INDENT_ID) != null) {
				indentId = Integer.parseInt(request.getParameter(INDENT_ID));
			}
			if (request.getParameter("noDetailRecords") != null) {
				noDetailRecords = (request.getParameter("noDetailRecords"));
			}
			if (request.getParameter(CHANGED_DATE) != null) {
				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(CHANGED_DATE)));
				lastChgDate = java.sql.Date.valueOf(date4MySQL);
			}
			if (request.getParameter(CHANGED_BY) != null) {
				lastChgBy = request.getParameter(CHANGED_BY);
			}
			if (request.getParameter(CHANGED_TIME) != null) {
				lastChgTime = request.getParameter(CHANGED_TIME);
			}

			if (request.getParameter(NO_OF_ROWS) != null) {
				noOfRows = Integer.parseInt(request.getParameter(NO_OF_ROWS));
			}
			if (request.getParameter("pageNo") != null) {
				pageNo = Integer.parseInt(request.getParameter("pageNo"));
			}

			if (request.getParameter(INDENT_NO) != null) {
				indentNo = (request.getParameter(INDENT_NO));
			}
			if (request.getParameter(TYPE_OF_INDENT) != null) {
				indentOption = (request.getParameter(TYPE_OF_INDENT));
			}
			if (request.getParameter(INDENT_FROM) != null) {
				indentFrom = (request.getParameter(INDENT_FROM));
			}
			if (request.getParameter(SUPPLY_DEPOT) != null) {
				supplyDepot = Integer.parseInt((request
						.getParameter(SUPPLY_DEPOT)));
			}
			if (request.getParameter(INDENT_DATE) != null) {
				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(INDENT_DATE)));
				indentDate = java.sql.Date.valueOf(date4MySQL);
			}
			if (request.getParameter(NRS) != null) {
				nrs = (request.getParameter(NRS));
			}
			if (request.getParameter(SECTION_ID) != null) {
				sectionId = Integer.parseInt(""
						+ request.getParameter(SECTION_ID));
			}
			if (request.getParameter(AUTHORITY) != null) {
				authority = (request.getParameter(AUTHORITY));
			}
			if (request.getParameter(ADDRESS) != null) {
				address = (request.getParameter(ADDRESS));
			}

		} catch (Exception e) {

			e.printStackTrace();
		}
		if (pageNo == 1) {
			*//*******************************************************************
			 * Storing the form(JSP) data in Header object * This operation
			 * performed only when page no is 1 *
			 ******************************************************************//*
			try {
				storeIndentM.setId(indentId);
				storeIndentM.setIndentNo(indentNo);
				storeIndentM.setIndentDate(indentDate);
				storeIndentM.setRequiredForm(indentFrom);
				MasStoreAirForceDepot masStoreSupplier = new MasStoreAirForceDepot();
				masStoreSupplier.setId(supplyDepot);
				storeIndentM.setSuppliedBy(masStoreSupplier);
				MasStoreSection masStoreSection = new MasStoreSection();
				masStoreSection.setId(sectionId);
				storeIndentM.setSection(masStoreSection);
				storeIndentM.setNrs(nrs);
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				storeIndentM.setDepartment(masDepartment);
				storeIndentM.setIndentType(indentType);
				storeIndentM.setEncodedBy(encodedBy);
				storeIndentM.setEncodedDate(indentDate);
				storeIndentM.setLastChgBy(lastChgBy);
				storeIndentM.setLastChgDate(indentDate);
				storeIndentM.setLastChgTime(lastChgTime);
				storeIndentM.setStatus("o");
				storeIndentM.setIndentOption(indentOption);

				storeIndentM.setPatientDetails(patientDetails);
				storeIndentM.setJustificationNiv(justificationNiv);
				storeIndentM.setPacJustification(pacJustification);
				storeIndentM.setPacForeignAdd(pacForeignAdd);
				storeIndentM.setAuthority(authority);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				storeIndentM.setHospital(masHospital);
				storeIndentM.setMmfForTheYear(mmfForTheYear);
				storeIndentM.setIndentNo(indentNo);
				storeIndentM.setImported("n");
				storeIndentM.setPatientDetails(address);

			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		try {

			if (noDetailRecords.equals("no")) {
				*//***************************************************************
				 * Storing the form(JSP) data in Detail object *
				 **************************************************************//*

				int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
						SR_NO);
				int idArray[] = JKTRequestUtils.getRequiredIntParameters(
						request, DETAIL_ID);
				idArrayLength = idArray.length;

				int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(
						request, ITEM_ID);
				Vector qtyInHand = box.getVector(QTY_IN_HAND);
				int xxlength = qtyInHand.size();
				String qtyInMmfArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, QTY_IN_MMF);
				String qtyDemandArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, QTY_DEMAND_TEMP);
				BigDecimal[] qtyInHandArray = new BigDecimal[10];

				length = srNo.length;
				for (int i = 0; i < length; i++) {

					if (itemIdArray[i] != 0 && idArrayLength ==0 ) {
						StoreIndentT storeIndentTObj = new StoreIndentT();

						storeIndentTObj.setSerialNo(srNo[i]);

						MasStoreItem masItem = new MasStoreItem();
						masItem.setId(itemIdArray[i]);
						storeIndentTObj.setItem(masItem);

						storeIndentTObj.setStockIn(new BigDecimal(qtyInHand.get(i).toString()));

						BigDecimal bigDecimal = new BigDecimal(
								qtyInMmfArray[i]);
						storeIndentTObj.setQtyInMmf(bigDecimal);
						storeIndentTObj.setQtyReceived(null);
						storeIndentTObj.setQtyInDemand(new BigDecimal(
								qtyDemandArray[i]));

						storeIndentTObj.setSection(null);

						MasDepartment masDepartment = new MasDepartment();
						masDepartment.setId(deptId);
						StoreIndentM storeIndentM2 = new StoreIndentM();
						storeIndentM2.setId(indentId);
						storeIndentTObj.setIndent(storeIndentM2);
						BigDecimal unitRate = null;
						String brandName = "";
						int manufactureId = 1;
						String marketedBy = "";
						BigDecimal totalCost = null;
						Date lastReceiptDate = null;
						BigDecimal lastReceiptQty = null;
						storeIndentTObj.setUnitRate(unitRate);
						storeIndentTObj.setBrand(null);

						storeIndentTObj.setManufacture(null);
						storeIndentTObj.setMarketedBy(marketedBy);
						storeIndentTObj.setTotalCost(totalCost);
						storeIndentTObj.setLastReceiptDate(lastReceiptDate);
						storeIndentTObj.setLastReceiptQty(lastReceiptQty);
						storeIndentTListForAdd.add(storeIndentTObj);
					}
					if (idArrayLength > 0) {
						StoreIndentT storeIndentTObj = new StoreIndentT();
						storeIndentTObj.setId(idArray[i]);
						storeIndentTObj.setSerialNo(srNo[i]);
						MasStoreItem masItem = new MasStoreItem();
						masItem.setId(itemIdArray[i]);
						storeIndentTObj.setItem(masItem);
						storeIndentTObj.setStockIn(new BigDecimal(qtyInHand.get(i).toString()));

						BigDecimal bigDecimal = new BigDecimal(qtyInMmfArray[i]);
						storeIndentTObj.setQtyInMmf(bigDecimal);
						BigDecimal bigDecimal2 = new BigDecimal(
								qtyDemandArray[i]);
						storeIndentTObj.setQtyInDemand(bigDecimal2);
						storeIndentTObj.setQtyReceived(null);

						storeIndentTObj.setSection(null);
						MasDepartment masDepartment = new MasDepartment();
						masDepartment.setId(deptId);
						StoreIndentM storeIndentM2 = new StoreIndentM();
						storeIndentM2.setId(indentId);
						storeIndentTObj.setIndent(storeIndentM2);
						BigDecimal unitRate = null;
						String brandName = "";
						int manufactureId = 1;
						String marketedBy = "";
						BigDecimal totalCost = null;
						Date lastReceiptDate = null;
						BigDecimal lastReceiptQty = null;

						storeIndentTObj.setUnitRate(unitRate);
						storeIndentTObj.setBrand(null);

						storeIndentTObj.setManufacture(null);
						storeIndentTObj.setMarketedBy(marketedBy);
						storeIndentTObj.setTotalCost(totalCost);
						storeIndentTObj.setLastReceiptDate(lastReceiptDate);
						storeIndentTObj.setLastReceiptQty(lastReceiptQty);

						storeIndentTListForUpdate.add(storeIndentTObj);
						idArrayLength--;

					}
				}

			} else {
				int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
						SR_NO);
				int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(
						request, ITEM_ID);
				String qtyInMmyArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, QTY_IN_MMF);
				String qtyDemandArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, QTY_DEMAND_TEMP);
				length = srNo.length;
				Vector qtyInHand = box.getVector(QTY_IN_HAND);
				int xxlength = qtyInHand.size();

				for (int i = 0; i < length; i++) {
					if (itemIdArray[i] != 0) {
						StoreIndentT storeIndentTObj = new StoreIndentT();
						storeIndentTObj.setSerialNo(srNo[i]);
						MasStoreItem masItem = new MasStoreItem();
						masItem.setId(itemIdArray[i]);
						storeIndentTObj.setItem(masItem);

						storeIndentTObj.setStockIn(new BigDecimal(qtyInHand.get(i).toString()));

						BigDecimal bigDecimal = new BigDecimal(qtyInMmyArray[i]);
						storeIndentTObj.setQtyInMmf(bigDecimal);
						storeIndentTObj.setQtyReceived(null);
						storeIndentTObj.setQtyInDemand(new BigDecimal(
								qtyDemandArray[i]));

						storeIndentTObj.setSection(null);

						MasDepartment masDepartment = new MasDepartment();
						masDepartment.setId(deptId);
						StoreIndentM storeIndentM2 = new StoreIndentM();
						storeIndentM2.setId(indentId);
						storeIndentTObj.setIndent(storeIndentM2);
						BigDecimal unitRate = null;
						String brandName = "";
						int manufactureId = 1;
						String marketedBy = "";
						BigDecimal totalCost = null;
						Date lastReceiptDate = null;
						BigDecimal lastReceiptQty = null;

						storeIndentTObj.setUnitRate(unitRate);
						storeIndentTObj.setBrand(null);

						storeIndentTObj.setManufacture(null);
						storeIndentTObj.setMarketedBy(marketedBy);
						storeIndentTObj.setTotalCost(totalCost);
						storeIndentTObj.setLastReceiptDate(lastReceiptDate);
						storeIndentTObj.setLastReceiptQty(lastReceiptQty);
						storeIndentTListForAdd.add(storeIndentTObj);
					}
				}

			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		masterAndDetailMap.put("storeIndentTListForUpdate",
				storeIndentTListForUpdate);
		masterAndDetailMap
				.put("storeIndentTListForAdd", storeIndentTListForAdd);
		masterAndDetailMap.put("storeIndentM", storeIndentM);
		masterAndDetailMap.put("indentId", indentId);
		masterAndDetailMap.put("pageNo", pageNo);
		boolean flag = storesHandlerService
				.updateNextIndentToDepot(masterAndDetailMap);

		pageNo++;
		if (flag) {
			if (indentId != 0) {
				map = (Map) storesHandlerService.getIndentModifyMapForDepot(
						indentId, pageNo);
			}
			if (map.get("gridIndentTList") != null)
				gridIndentTList = (List<StoreIndentT>) map
						.get("gridIndentTList");

			if (gridIndentTList.size() == 0) {
				noDetailRecords = "yes";
			}
			if ((gridIndentTList.size() != 0) || (buttonName.equals("next"))) {
				jsp = MODIFY_INDENT_TO_DEPOT;
			}
			if ((buttonName.equals("submit"))) {
				jsp = STORES_MESSAGE_JSP;
				messageTOBeVisibleToTheUser = "Indent To Depot Records Updated Successfully";
				url = "/hms/hms/stores?method=showIndentJspDepot";
			}

		} else {
			jsp = STORES_MESSAGE_JSP;
			messageTOBeVisibleToTheUser = "Indent To Depot Records Not Updated ";
			map.put("messageType", "failure");
			url = "/hms/hms/stores?method=showIndentJspDepot";
		}

		jsp += ".jsp";
		map.put("url", url);
		map.put("maxIndentNo", indentNo);
		map.put("indentId", indentId);
		map.put("pageNo", pageNo);
		map.put("contentJsp", jsp);
		map.put("noDetailRecords", noDetailRecords);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);

		map.put("indentNo", indentNo);
		map.put(" indentFrom", indentFrom);
		map.put("indentDate", indentDate);
		map.put("supplyDepot", supplyDepot);
		map.put("sectionId", sectionId);
		map.put("indentOption", indentOption);
		map.put("nrs", nrs);
		map.put("authority", authority);
		map.put("address", address);

		return new ModelAndView("indexB", "map", map);
	}
*/


	public ModelAndView getItemListForIndentToSOC(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		String autoHint = "";
		int sectionId = 0;
		int indentId = 0;
		Map<String, Object> dataMap = new HashMap<String, Object>();
		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			if (request.getParameter("section") != null) {
				sectionId = Integer.parseInt(""
						+ (request.getParameter("section")));
			}
			if (request.getParameter("indentId") != null) {
				indentId = Integer.parseInt(""
						+ (request.getParameter("indentId")));
			}
			List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
			dataMap.put("autoHint", autoHint);
			dataMap.put("deptId", deptId);
			dataMap.put("userName", userName);
			dataMap.put("hospitalId", hospitalId);
			dataMap.put("sectionId", sectionId);
			dataMap.put("indentId", indentId);

			map = storesHandlerService.getItemListForIndentToSOC(dataMap);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "result";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView updateNextOrSubmitIndentToSOC(
			HttpServletRequest request, HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		StoreIndentM storeIndentM = new StoreIndentM();
		@SuppressWarnings("unused")
		StoreIndentT storeIndentT = new StoreIndentT();
		String indentFrom = "";
		@SuppressWarnings("unused")
		Date indentDate = null;
		int supplyDepot = 0;
		@SuppressWarnings("unused")
		int sectionId = 12;
		String nrs = "";
		int rows = 0;
		@SuppressWarnings("unused")
		String indentType = "s";
		int departmentId = 1;
		String encodedBy = "";
		Date encodedDate = null;
		String lastChgBy = "";
		@SuppressWarnings("unused")
		Date lastChgDate = null;
		String lastChgTime = "";
		String indentOption = "";
		String patientDetails = "";
		String justificationNiv = "";
		String pacJustification = "";
		String authority = "";
		String buttonName = "";
		int indentId = 0;
		int serialNo = 0;
		int itemId = 1;
		int stockIn = 0;
		int qtyInDemand = 0;
		int qtyInMmf = 0;
		int qtyReceived = 0;
		int radioVal = 0;
		int noOfRows = 0;
		BigDecimal unitRate = null;
		String brandName = "";
		int manufactureId = 1;
		String marketedBy = "";
		BigDecimal totalCost = null;
		Date lastReceiptDate = null;
		BigDecimal lastReceiptQty = null;
		Map<String, Object> infoMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		String successfullyAdded = "no";
		int pageNo = 1;
		String url = "";
		int mmfForTheYear = 0;
		String indentNo = "";
		String address = "";
		String pacSpecific = "";
		String clinicalTrailReq = "";
		String dateOfLastReciept = "";
		String justification = "";
		BigDecimal qty = null;
		BigDecimal cost = null;
		int duration = 0;
		String durationType = "";
		int days = 0;
		int dose = 0;
		String course = "";
		String clinicalTrail = "";
		String noDetailRecords = "no";
		// New fields
		String PvmsAlreadyPrescribed = "";
		int itemReqForDept = 0;
		String pvmsAlreadyPrescribed = "";
		int itemReqDept = 0;
		String pacEqpt = "";

		List<StoreIndentT> storeIndentTListForUpdate = new ArrayList<StoreIndentT>();
		List<StoreIndentT> storeIndentTListForAdd = new ArrayList<StoreIndentT>();
		Map<String, Object> masterAndDetailMap = new HashMap<String, Object>();
		List<StoreIndentT> gridIndentTList = new ArrayList<StoreIndentT>();
		String messageTOBeVisibleToTheUser = "";
		try {
			if (request.getParameter("buttonName") != null) {
				buttonName = request.getParameter("buttonName");
			}
			if (request.getParameter(INDENT_ID) != null) {
				indentId = Integer.parseInt(request.getParameter(INDENT_ID));
			}

			if (request.getParameter(CHANGED_DATE) != null) {
				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(CHANGED_DATE)));
				lastChgDate = java.sql.Date.valueOf(date4MySQL);
			}
			if (request.getParameter(CHANGED_BY) != null) {
				lastChgBy = request.getParameter(CHANGED_BY);
			}
			if (request.getParameter(CHANGED_TIME) != null) {
				lastChgTime = request.getParameter(CHANGED_TIME);
			}

			if (request.getParameter(NO_OF_ROWS) != null) {
				noOfRows = Integer.parseInt(request.getParameter(NO_OF_ROWS));
			}
			if (request.getParameter("pageNo") != null) {
				pageNo = Integer.parseInt(request.getParameter("pageNo"));
			}

			if (request.getParameter(INDENT_NO) != null) {
				indentNo = (request.getParameter(INDENT_NO));
			}
			if (request.getParameter(TYPE_OF_INDENT) != null) {
				indentOption = (request.getParameter(TYPE_OF_INDENT));
			}
			if (request.getParameter(INDENT_FROM) != null) {
				indentFrom = (request.getParameter(INDENT_FROM));
			}
			if (request.getParameter(SUPPLY_DEPOT) != null) {
				supplyDepot = Integer.parseInt(request
						.getParameter(SUPPLY_DEPOT));
			}
			if (request.getParameter(INDENT_DATE) != null) {
				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(INDENT_DATE)));
				indentDate = java.sql.Date.valueOf(date4MySQL);
			}
			if (request.getParameter(NRS) != null) {
				nrs = (request.getParameter(NRS));
			}
			if (request.getParameter(SECTION_ID) != null) {
				sectionId = Integer.parseInt(""
						+ request.getParameter(SECTION_ID));
			}

			if (request.getParameter(DEPARTMENT_ID_TEMP) != null) {
				itemReqDept = Integer.parseInt((request
						.getParameter(DEPARTMENT_ID_TEMP)));
			}
			if (request.getParameter(ADDRESS) != null) {
				address = (request.getParameter(ADDRESS));
			}

			if (request.getParameter(CLINICAL_TRAIL_REQ) != null) {
				clinicalTrailReq = ((request.getParameter(CLINICAL_TRAIL_REQ)));
			}
			if (request.getParameter(PVMS_ALREADY_PRESCRIBED) != null) {
				PvmsAlreadyPrescribed = (request
						.getParameter(PVMS_ALREADY_PRESCRIBED));
			}

			if (request.getParameter(JUSTIFICATION) != null) {
				justification = (request.getParameter(JUSTIFICATION));
			}
			if (request.getParameter(QTY) != null) {
				qty = new BigDecimal(request.getParameter(QTY));
			}
			if (request.getParameter(COST) != null) {
				cost = new BigDecimal(request.getParameter(COST));
			}
			if (request.getParameter(DURATION) != null) {
				duration = Integer.parseInt((request.getParameter(DURATION)));
			}
			if (request.getParameter(DURATION_TYPE) != null) {
				durationType = (request.getParameter(DURATION_TYPE));
			}
			if (request.getParameter(DAYS) != null) {
				days = Integer.parseInt((request.getParameter(DAYS)));
			}
			if (request.getParameter(COURSE) != null) {
				course = (request.getParameter(COURSE));
			}
			if (request.getParameter(DOSE) != null) {
				dose = Integer.parseInt((request.getParameter(DOSE)));
			}
			if (request.getParameter(PAC_SPECIFIC) != null) {
				pacSpecific = (request.getParameter(PAC_SPECIFIC));
			}
			if (request.getParameter(DETAIL_OF_PATIENT) != null) {
				patientDetails = (request.getParameter(DETAIL_OF_PATIENT));
			}
			if (request.getParameter(JUSTIFICATION_NIV) != null) {
				justificationNiv = (request.getParameter(JUSTIFICATION_NIV));
			}
			if (request.getParameter(PAC_JUSTIFICATION) != null) {
				pacJustification = (request.getParameter(PAC_JUSTIFICATION));
			}
			if (request.getParameter(PVMS_ALREADY_PRESCRIBED) != null) {
				pvmsAlreadyPrescribed = (request
						.getParameter(PVMS_ALREADY_PRESCRIBED));
			}
			if (request.getParameter(PAC) != null) {
				pacEqpt = (request.getParameter(PAC));
			}
			if (request.getParameter("noDetailRecords") != null) {
				noDetailRecords = (request.getParameter("noDetailRecords"));
			}

		} catch (Exception e) {

			e.printStackTrace();
		}
		if (pageNo == 1) {
			try {
				storeIndentM.setId(indentId);
				storeIndentM.setIndentNo(indentNo);
				storeIndentM.setIndentDate(indentDate);
				storeIndentM.setRequiredForm(indentFrom);
				storeIndentM.setNrs(nrs);
				storeIndentM.setIndentType(indentType);
				storeIndentM.setStatus("o");
				storeIndentM.setEncodedBy(encodedBy);
				storeIndentM.setEncodedDate(indentDate);
				storeIndentM.setLastChgBy(lastChgBy);
				storeIndentM.setLastChgDate(indentDate);
				storeIndentM.setLastChgTime(lastChgTime);
				storeIndentM.setIndentOption(indentOption);
				storeIndentM.setPatientDetails(patientDetails);
				storeIndentM.setJustificationNiv(justificationNiv);
				storeIndentM.setPacJustification(pacJustification);
				storeIndentM.setPacForeignAdd(null);
				storeIndentM.setAuthority(null);

				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				storeIndentM.setHospital(masHospital);

				storeIndentM.setMmfForTheYear(mmfForTheYear);
				storeIndentM.setImported("n");

				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				storeIndentM.setDepartment(masDepartment);

				MasStoreSection masStoreSection = new MasStoreSection();
				masStoreSection.setId(1);
				storeIndentM.setSection(masStoreSection);

				MasStoreAirForceDepot masStoreSupplier = new MasStoreAirForceDepot();
				masStoreSupplier.setId(1);
				storeIndentM.setSuppliedBy(masStoreSupplier);

				storeIndentM.setClinicalTrail(clinicalTrailReq);
				storeIndentM.setPvmsAlreadyPrescribed(pvmsAlreadyPrescribed);
				storeIndentM.setCost(cost);
				storeIndentM.setQty(qty);
				storeIndentM.setDose(dose);
				storeIndentM.setCourse(course);
				storeIndentM.setDuration(duration);
				storeIndentM.setDurationType(durationType);
				storeIndentM.setJustification(justification);
				storeIndentM.setPacSpecific(pacSpecific);
				storeIndentM.setPacEqpt(pacEqpt);

				MasDepartment masDepartment2 = new MasDepartment();
				masDepartment2.setId(itemReqDept);
				storeIndentM.setItemReqDept(masDepartment2);

			} catch (Exception e) {
				e.printStackTrace();
			}

		}
		try {
			if (noDetailRecords.equals("no")) {

				int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
						SR_NO);
				int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(
						request, ITEM_ID);
				int brandIdArray[] = JKTRequestUtils.getRequiredIntParameters(
						request, BRAND_ID);
				int detailIdArray[] = JKTRequestUtils.getRequiredIntParameters(
						request, DETAIL_ID);
				String marketedByArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, MARKETED_BY);

				String qtyInHandStringArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, QTY_IN_HAND);
				String StringUnitRateArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, UNIT_RATE);

				String StringTotalCostArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, TOTAL_COST);
				String StringQtyRecpArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, LAST_RECP_QTY);
				String StringQtyRecpDateArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, LAST_RECP_DATE);

				BigDecimal[] qtyInHandArray = new BigDecimal[10];
				BigDecimal[] unitRateArray = new BigDecimal[10];
				BigDecimal[] CostArray = new BigDecimal[10];
				BigDecimal[] QtyRecpArray = new BigDecimal[10];
				Date[] QtyRecpDateArray = new Date[10];

				int xxLegnt = itemIdArray.length;

				for (int i = 0; i < xxLegnt; i++) {
					BigDecimal val = new BigDecimal(qtyInHandStringArray[i]);
					qtyInHandArray[i] = val;
				}
				for (int i = 0; i < xxLegnt; i++) {
					BigDecimal val = new BigDecimal(StringUnitRateArray[i]);
					QtyRecpArray[i] = val;
				}
				for (int i = 0; i < xxLegnt; i++) {
					BigDecimal val = new BigDecimal(StringTotalCostArray[i]);
					CostArray[i] = val;
				}
				for (int i = 0; i < xxLegnt; i++) {
					if (!StringQtyRecpDateArray[i].equals("0")) {
						SimpleDateFormat formatterIn = new SimpleDateFormat(
								"dd/MM/yyyy");
						SimpleDateFormat formatterOut = new SimpleDateFormat(
								"yyyy-MM-dd");
						String date4MySQL = formatterOut.format(formatterIn
								.parse(StringQtyRecpDateArray[i]));
						indentDate = java.sql.Date.valueOf(date4MySQL);

						QtyRecpDateArray[i] = indentDate;
					}
				}
				for (int i = 0; i < xxLegnt; i++) {
					BigDecimal val = new BigDecimal(StringQtyRecpArray[i]);
					QtyRecpArray[i] = val;
				}
				for (int i = 0; i < xxLegnt; i++) {
					BigDecimal val = new BigDecimal(StringUnitRateArray[i]);
					unitRateArray[i] = val;
				}
				int length = srNo.length;
				int idArrayLength = itemIdArray.length;
				int detailIdArrayLength = detailIdArray.length;
				for (int i = 0; i < length; i++) {
					if (detailIdArrayLength > 0) {
						StoreIndentT storeIndentTObj = new StoreIndentT();
						try {
							storeIndentTObj.setId(detailIdArray[i]);
						} catch (Exception e) {

							e.printStackTrace();
						}
						storeIndentTObj.setSerialNo(srNo[i]);
						storeIndentTObj.setStockIn(qtyInHandArray[i]);
						storeIndentTObj.setQtyInMmf(null);
						storeIndentTObj.setQtyInDemand(null);
						storeIndentTObj.setQtyReceived(null);

						StoreIndentM indent = new StoreIndentM();
						indent.setId(indentId);
						storeIndentTObj.setIndent(indent);

						MasStoreItem masItem = new MasStoreItem();
						masItem.setId(itemIdArray[i]);
						storeIndentTObj.setItem(masItem);

						storeIndentTObj.setSection(null);
						storeIndentTObj.setUnitRate(unitRateArray[i]);
						storeIndentTObj.setMarketedBy(marketedByArray[i]);
						storeIndentTObj.setTotalCost(CostArray[i]);
						storeIndentTObj.setLastReceiptQty(QtyRecpArray[i]);
						storeIndentTObj.setLastReceiptDate(QtyRecpDateArray[i]);

						if ((brandIdArray[i] != 0)) {
							MasStoreBrand brand = new MasStoreBrand();
							brand.setId(brandIdArray[i]);
							storeIndentTObj.setBrand(brand);
						} else {
							storeIndentTObj.setBrand(null);
						}

						MasManufacturer manufacturer = new MasManufacturer();
						manufacturer.setId(manufactureId);
						storeIndentTObj.setManufacture(manufacturer);

						storeIndentTObj.setQtyReceived(null);

						storeIndentTListForUpdate.add(storeIndentTObj);

					} else {
						if (itemIdArray[i] != 0) {
							StoreIndentT storeIndentTObj = new StoreIndentT();

							storeIndentTObj.setSerialNo(srNo[i]);
							storeIndentTObj.setStockIn(qtyInHandArray[i]);
							storeIndentTObj.setQtyInMmf(null);
							storeIndentTObj.setQtyInDemand(null);
							storeIndentTObj.setQtyReceived(null);

							StoreIndentM indent = new StoreIndentM();
							indent.setId(indentId);
							storeIndentTObj.setIndent(indent);

							MasStoreItem masItem = new MasStoreItem();
							masItem.setId(itemIdArray[i]);
							storeIndentTObj.setItem(masItem);

							storeIndentTObj.setSection(null);
							storeIndentTObj.setUnitRate(unitRateArray[i]);
							storeIndentTObj.setMarketedBy(marketedByArray[i]);
							storeIndentTObj.setTotalCost(CostArray[i]);
							storeIndentTObj.setLastReceiptQty(QtyRecpArray[i]);
							storeIndentTObj
									.setLastReceiptDate(QtyRecpDateArray[i]);

							if ((brandIdArray[i] != 0)) {
								MasStoreBrand brand = new MasStoreBrand();
								brand.setId(brandIdArray[i]);
								storeIndentTObj.setBrand(brand);
							} else {
								storeIndentTObj.setBrand(null);
							}

							MasManufacturer manufacturer = new MasManufacturer();
							manufacturer.setId(manufactureId);
							storeIndentTObj.setManufacture(manufacturer);

							storeIndentTObj.setQtyReceived(null);

							storeIndentTListForAdd.add(storeIndentTObj);
						}

					}
					detailIdArrayLength--;
				}// End of detail for

			} else {
				int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
						SR_NO);
				int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(
						request, ITEM_ID);
				int brandIdArray[] = JKTRequestUtils.getRequiredIntParameters(
						request, BRAND_ID);
				String marketedByArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, MARKETED_BY);

				String qtyInHandStringArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, QTY_IN_HAND);
				String StringUnitRateArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, UNIT_RATE);

				String StringTotalCostArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, TOTAL_COST);
				String StringQtyRecpArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, LAST_RECP_QTY);
				String StringQtyRecpDateArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, LAST_RECP_DATE);

				BigDecimal[] qtyInHandArray = new BigDecimal[10];
				BigDecimal[] unitRateArray = new BigDecimal[10];
				BigDecimal[] CostArray = new BigDecimal[10];
				BigDecimal[] QtyRecpArray = new BigDecimal[10];
				Date[] QtyRecpDateArray = new Date[10];

				int xxLegnt = itemIdArray.length;

				for (int i = 0; i < xxLegnt; i++) {
					BigDecimal val = new BigDecimal(qtyInHandStringArray[i]);
					qtyInHandArray[i] = val;
				}
				for (int i = 0; i < xxLegnt; i++) {
					BigDecimal val = new BigDecimal(StringUnitRateArray[i]);
					QtyRecpArray[i] = val;
				}
				for (int i = 0; i < xxLegnt; i++) {
					BigDecimal val = new BigDecimal(StringTotalCostArray[i]);
					CostArray[i] = val;
				}
				for (int i = 0; i < xxLegnt; i++) {
					if (!StringQtyRecpDateArray[i].equals("0")) {
						SimpleDateFormat formatterIn = new SimpleDateFormat(
								"dd/MM/yyyy");
						SimpleDateFormat formatterOut = new SimpleDateFormat(
								"yyyy-MM-dd");
						String date4MySQL = formatterOut.format(formatterIn
								.parse(StringQtyRecpDateArray[i]));
						indentDate = java.sql.Date.valueOf(date4MySQL);

						QtyRecpDateArray[i] = indentDate;
					}
				}
				for (int i = 0; i < xxLegnt; i++) {
					BigDecimal val = new BigDecimal(StringQtyRecpArray[i]);
					QtyRecpArray[i] = val;
				}
				for (int i = 0; i < xxLegnt; i++) {
					BigDecimal val = new BigDecimal(StringUnitRateArray[i]);
					unitRateArray[i] = val;
				}
				int length = srNo.length;
				int idArrayLength = itemIdArray.length;
				for (int i = 0; i < length; i++) {
					StoreIndentT storeIndentTObj = new StoreIndentT();

					storeIndentTObj.setSerialNo(srNo[i]);
					storeIndentTObj.setStockIn(qtyInHandArray[i]);
					storeIndentTObj.setQtyInMmf(null);
					storeIndentTObj.setQtyInDemand(null);
					storeIndentTObj.setQtyReceived(null);

					StoreIndentM indent = new StoreIndentM();
					indent.setId(indentId);
					storeIndentTObj.setIndent(indent);

					MasStoreItem masItem = new MasStoreItem();
					masItem.setId(itemIdArray[i]);
					storeIndentTObj.setItem(masItem);

					storeIndentTObj.setSection(null);
					storeIndentTObj.setUnitRate(unitRateArray[i]);
					storeIndentTObj.setMarketedBy(marketedByArray[i]);
					storeIndentTObj.setTotalCost(CostArray[i]);
					storeIndentTObj.setLastReceiptQty(QtyRecpArray[i]);
					storeIndentTObj.setLastReceiptDate(QtyRecpDateArray[i]);

					if ((brandIdArray[i] != 0)) {
						MasStoreBrand brand = new MasStoreBrand();
						brand.setId(brandIdArray[i]);
						storeIndentTObj.setBrand(brand);
					} else {
						storeIndentTObj.setBrand(null);
					}

					MasManufacturer manufacturer = new MasManufacturer();
					manufacturer.setId(manufactureId);
					storeIndentTObj.setManufacture(manufacturer);

					storeIndentTObj.setQtyReceived(null);

					storeIndentTListForAdd.add(storeIndentTObj);
				}
			}

			masterAndDetailMap.put("storeIndentTListForUpdate",
					storeIndentTListForUpdate);
			masterAndDetailMap.put("storeIndentTListForAdd",
					storeIndentTListForAdd);
			masterAndDetailMap.put("storeIndentM", storeIndentM);
			masterAndDetailMap.put("indentId", indentId);
			masterAndDetailMap.put("pageNo", pageNo);
			boolean flag = storesHandlerService
					.updateNextIndentToSOC(masterAndDetailMap);

			pageNo++;
			if (flag) {
				if (indentId != 0) {
					map = (Map) storesHandlerService.getIndentModifyMapForSOC(
							indentId, pageNo);
				}
				if (map.get("gridIndentTList") != null)
					gridIndentTList = (List<StoreIndentT>) map
							.get("gridIndentTList");

				if (gridIndentTList.size() == 0) {
					noDetailRecords = "yes";
				}
				if ((gridIndentTList.size() != 0)
						|| (buttonName.equals("next"))) {
					jsp = MODIFY_INDENT_TO_SOC;
				}
				if ((buttonName.equals("submit"))) {
					jsp = STORES_MESSAGE_JSP;
					messageTOBeVisibleToTheUser = "Indent To soc Records Updated Successfully";
					url = "/hms/hms/stores?method=showIndentJspSOC";
				}

			} else {
				jsp = STORES_MESSAGE_JSP;
				messageTOBeVisibleToTheUser = "Indent To soc Records Not Updated ";
				map.put("messageType", "failure");
				url = "/hms/hms/stores?method=showIndentSOC";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		jsp += ".jsp";
		map.put("url", url);
		map.put("maxIndentNo", indentNo);
		map.put("indentId", indentId);
		map.put("pageNo", pageNo);
		map.put("contentJsp", jsp);
		map.put("noDetailRecords", noDetailRecords);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);

		map.put("indentNo", indentNo);
		map.put(" indentFrom", indentFrom);
		map.put("indentDate", indentDate);
		map.put("supplyDepot", supplyDepot);
		map.put("sectionId", sectionId);
		map.put("indentOption", indentOption);
		map.put("nrs", nrs);
		map.put("authority", authority);
		map.put("address", address);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView updateNextOrSubmitIndent(HttpServletRequest request,
			HttpServletResponse response) throws java.text.ParseException {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------

		// Local Variable Declaration
		StoreIndentM storeIndentM = new StoreIndentM();
		StoreIndentT storeIndentT = new StoreIndentT();
		List<StoreIndentT> storeIndentTListForUpdate = new ArrayList<StoreIndentT>();
		List<StoreIndentT> storeIndentTListForAdd = new ArrayList<StoreIndentT>();
		Map<String, Object> masterAndDetailMap = new HashMap<String, Object>();
		List<StoreIndentT> gridIndentTList = new ArrayList<StoreIndentT>();
		Map map2 = new HashMap();
		String indentNo = "";
		String indentFrom = "";
		Date indentDate = null;
		String indentTo = "";
		int sectionId = 12;
		String nrs = "";
		int rows = 0;
		String indentType = "p";
		int departmentId = 1;
		String encodedBy = "";
		Date encodedDate = null;
		String lastChgBy = "A";
		String lastChgDate = null;
		String lastChgTime = "";
		String indentOption = "";
		String patientDetails = "";
		String justificationNiv = "";
		String pacJustification = "";
		String pacForeignAdd = "";
		String authority = "";
		int indentId = 0;
		int serialNo = 0;
		int itemId = 1;
		int stockIn = 0;
		int qtyInDemand = 0;
		int qtyInMmf = 0;
		int qtyReceived = 0;
		int radioVal = 0;
		int masDepartmentId = 1;
		Map infoMap = new HashMap();
		int totalRecords = 0;
		int mmfForTheYear = 0;
		int idArrayLength = 0;
		int length = 0;
		String messageTOBeVisibleToTheUser = "";
		// Grid related Variables
		int pageNo = 1;
		/** Represents Page No */
		String buttonName = "";
		/** Represents which button user clicked in JSP(Next/Submit) */
		String noDetailRecords = "no";
		/** Represents */
		String headerStored = "no";
		String url = "";
		// Method Body
		try {
			if (request.getParameter("pageNo") != null) {
				pageNo = Integer.parseInt(request.getParameter("pageNo"));

			}
			if (request.getParameter(NO_DETAIL_RECORDS) != null) {
				noDetailRecords = (request.getParameter(NO_DETAIL_RECORDS));

			}
			if (request.getParameter("totalRecords") != null) {
				totalRecords = Integer.parseInt(request
						.getParameter("totalRecords"));

			}
			if (request.getParameter(INDENT_ID) != null) {
				indentId = Integer.parseInt(request.getParameter(INDENT_ID));
			}

			if (request.getParameter("buttonName") != null) {
				buttonName = request.getParameter("buttonName");
			}
			if (request.getParameter(CHANGED_DATE) != null) {
				lastChgDate = request.getParameter(CHANGED_DATE);
			}
			if (request.getParameter(CHANGED_BY) != null) {
				lastChgBy = request.getParameter(CHANGED_BY);
			}
			if (request.getParameter(CHANGED_TIME) != null) {
				lastChgTime = request.getParameter(CHANGED_TIME);
			}
			masterAndDetailMap.put("pageNo", pageNo);
			masterAndDetailMap.put("lastChgDate", lastChgDate);
			masterAndDetailMap.put("lastChgBy", lastChgBy);
			masterAndDetailMap.put("lastChgTime", lastChgTime);
			masterAndDetailMap.put("indentId", indentId);

		} catch (Exception e) {
			e.printStackTrace();		}

		if (pageNo == 1) {

		} else {

			headerStored = "yes";
			infoMap.put("headerStored", headerStored);
		}

		try {
			if (noDetailRecords.equals("no")) {
				int idArray[] = JKTRequestUtils.getRequiredIntParameters(
						request, DETAIL_ID);
				idArrayLength = idArray.length;
				int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
						SR_NO);
				int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(
						request, ITEM_ID);
				String qtyInMmyArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, QTY_IN_MMF);

				length = srNo.length;
				for (int i = 0; i < length; i++) {
					if (idArrayLength > 0) {
						StoreIndentT storeIndentTObj = new StoreIndentT();
						storeIndentTObj.setId(idArray[i]);
						storeIndentTObj.setSerialNo(srNo[i]);
						MasStoreItem masItem = new MasStoreItem();
						masItem.setId(itemIdArray[i]);
						storeIndentTObj.setItem(masItem);
						storeIndentTObj.setStockIn(null);

						// StringBuffer output_str = new StringBuffer();
						// StringTokenizer s = new
						// StringTokenizer(qtyInMmyArray[i].toString(),".");
						BigDecimal bigDecimal = new BigDecimal(qtyInMmyArray[i]);
						storeIndentTObj.setQtyInMmf(bigDecimal);
						storeIndentTObj.setQtyInDemand(null);
						storeIndentTObj.setQtyReceived(null);

						MasDepartment masDepartment = new MasDepartment();
						masDepartment.setId(masDepartmentId);
						StoreIndentM storeIndentM2 = new StoreIndentM();
						storeIndentM2.setId(indentId);
						storeIndentTObj.setIndent(storeIndentM2);
						BigDecimal unitRate = null;
						String brandName = "";
						String marketedBy = "";
						BigDecimal totalCost = null;
						Date lastReceiptDate = null;
						BigDecimal lastReceiptQty = null;

						storeIndentTObj.setUnitRate(unitRate);
						storeIndentTObj.setBrand(null);

						storeIndentTObj.setManufacture(null);
						storeIndentTObj.setMarketedBy(marketedBy);
						storeIndentTObj.setTotalCost(totalCost);
						storeIndentTObj.setLastReceiptDate(lastReceiptDate);
						storeIndentTObj.setLastReceiptQty(lastReceiptQty);

						storeIndentTListForUpdate.add(storeIndentTObj);
					} else {
						if (itemIdArray[i] != 0) {
							StoreIndentT storeIndentTObj = new StoreIndentT();

							storeIndentTObj.setSerialNo(srNo[i]);

							MasStoreItem masItem = new MasStoreItem();
							masItem.setId(itemIdArray[i]);
							storeIndentTObj.setItem(masItem);
							BigDecimal bigDecimal = new BigDecimal(
									qtyInMmyArray[i]);
							storeIndentTObj.setQtyInMmf(bigDecimal);
							storeIndentTObj.setQtyInDemand(null);
							storeIndentTObj.setQtyReceived(null);
							storeIndentTObj.setSection(null);

							MasDepartment masDepartment = new MasDepartment();
							masDepartment.setId(masDepartmentId);
							StoreIndentM storeIndentM2 = new StoreIndentM();
							storeIndentM2.setId(indentId);
							storeIndentTObj.setIndent(storeIndentM2);
							BigDecimal unitRate = null;
							String brandName = "";
							int manufactureId = 0;
							String marketedBy = "";
							BigDecimal totalCost = null;
							Date lastReceiptDate = null;
							BigDecimal lastReceiptQty = null;
							storeIndentTObj.setUnitRate(unitRate);
							storeIndentTObj.setBrand(null);

							storeIndentTObj.setManufacture(null);
							storeIndentTObj.setMarketedBy(marketedBy);
							storeIndentTObj.setTotalCost(totalCost);
							storeIndentTObj.setLastReceiptDate(lastReceiptDate);
							storeIndentTObj.setLastReceiptQty(lastReceiptQty);
							storeIndentTListForAdd.add(storeIndentTObj);
						}
					}
					idArrayLength--;
				}

			} else {
				int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
						SR_NO);
				int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(
						request, ITEM_ID);
				String qtyInMmyArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, QTY_IN_MMF);
				length = srNo.length;
				for (int i = 0; i < length; i++) {
					if (itemIdArray[i] != 0) {
						StoreIndentT storeIndentTObj = new StoreIndentT();
						storeIndentTObj.setSerialNo(srNo[i]);
						MasStoreItem masItem = new MasStoreItem();
						masItem.setId(itemIdArray[i]);
						storeIndentTObj.setItem(masItem);

						storeIndentTObj.setStockIn(null);
						BigDecimal bigDecimal = new BigDecimal(qtyInMmyArray[i]);
						storeIndentTObj.setQtyInMmf(bigDecimal);
						storeIndentTObj.setQtyInDemand(null);
						storeIndentTObj.setQtyReceived(null);
						storeIndentTObj.setSection(null);

						MasDepartment masDepartment = new MasDepartment();
						masDepartment.setId(masDepartmentId);
						StoreIndentM storeIndentM2 = new StoreIndentM();
						storeIndentM2.setId(indentId);
						storeIndentTObj.setIndent(storeIndentM2);
						BigDecimal unitRate = null;
						String brandName = "";
						int manufactureId = 0;
						String marketedBy = "";
						BigDecimal totalCost = null;
						Date lastReceiptDate = null;
						BigDecimal lastReceiptQty = null;

						storeIndentTObj.setUnitRate(unitRate);
						storeIndentTObj.setBrand(null);

						storeIndentTObj.setManufacture(null);
						storeIndentTObj.setMarketedBy(marketedBy);
						storeIndentTObj.setTotalCost(totalCost);
						storeIndentTObj.setLastReceiptDate(lastReceiptDate);
						storeIndentTObj.setLastReceiptQty(lastReceiptQty);
						storeIndentTListForAdd.add(storeIndentTObj);
					}
				}

			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		masterAndDetailMap.put("storeIndentTListForUpdate",	storeIndentTListForUpdate);
		masterAndDetailMap.put("storeIndentTListForAdd", storeIndentTListForAdd);
		boolean flag = storesHandlerService
				.updateNextIndent(masterAndDetailMap);

		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		if (session.getAttribute("itemList") != null) {
			itemList = (List<MasStoreItem>) session.getAttribute("itemList");
		}

		infoMap.put("pageNo", pageNo);
		infoMap.put("maxIndentNo", indentNo);
		infoMap.put("indentId", indentId);

		pageNo++;
		if (flag) {
			if (indentId != 0) {
				map = (Map) storesHandlerService.getIndentModifyMap(indentId,
						pageNo);

			}
			if (map.get("gridIndentTList") != null)
				gridIndentTList = (List<StoreIndentT>) map
						.get("gridIndentTList");

			if (gridIndentTList.size() == 0) {
				noDetailRecords = "yes";
			}
			if ((gridIndentTList.size() != 0) || (buttonName.equals("next"))) {
				jsp = INDENT_MODIFY;
			}
			if ((buttonName.equals("submit"))) {
				jsp = STORES_MESSAGE_JSP;
				messageTOBeVisibleToTheUser = "MMf Indent  Records Updated Successfully";
				url = "/hms/hms/stores?method=showIndentJsp";
			}

		} else {
			jsp = STORES_MESSAGE_JSP;
			messageTOBeVisibleToTheUser = "MMf Indent  Records Not Updated Successfully";
			url = "/hms/hms/stores?method=showIndentJsp";
		}
		itemList = storesHandlerService.getItemList();
		map.put("itemList", itemList);
		jsp += ".jsp";
		map.put("url", url);
		map.put("maxIndentNo", indentNo);
		map.put("indentId", indentId);
		map.put("pageNo", pageNo);
		map.put("contentJsp", jsp);
		map.put("noDetailRecords", noDetailRecords);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);

		return new ModelAndView("indexB", "map", map);
	}

	/*
	 * This method is used adding Header and Detail records to Indent To Depot.
	 * It is used for two operations(Next,Submit) based on the flag ie.
	 * buttonFlag
	 */
	public ModelAndView addNextOrSubmitIndentToDepot(
			HttpServletRequest request, HttpServletResponse response) {
		// ------ Retriving User Name,Hospital Id,Department Id from Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		StoreIndentM storeIndentM = new StoreIndentM();
		@SuppressWarnings("unused")
		StoreIndentT storeIndentT = new StoreIndentT();
		String indentFrom = "";
		@SuppressWarnings("unused")
		Date indentDate = null;
		int supplyDepot = 0;
		@SuppressWarnings("unused")
		int sectionId = 12;
		String nrs = "";
		int rows = 0;
		@SuppressWarnings("unused")
		String indentType = "d";
		int departmentId = 1;
		String encodedBy = "";
		Date encodedDate = null;
		String lastChgBy = "";
		@SuppressWarnings("unused")
		Date lastChgDate = null;
		String lastChgTime = "";
		String indentOption = "";
		String patientDetails = "";
		String justificationNiv = "";
		String pacJustification = "";
		String pacForeignAdd = "";
		String authority = "";
		String buttonName = "";
		String codehead="";
		String shelfLife="";
		int indentId = 0;
		int serialNo = 0;
		int itemId = 1;
		int stockIn = 0;
		int qtyInDemand = 0;
		int qtyInMmf = 0;
		int qtyReceived = 0;
		int radioVal = 0;
		int noOfRows = 0;
		String contactNo="";
		BigDecimal unitRate = null;
		String brandName = "";
		int manufactureId = 1;
		String marketedBy = "";
		BigDecimal totalCost = null;
		Date lastReceiptDate = null;
		BigDecimal lastReceiptQty = null;
		Map<String, Object> infoMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		String successfullyAdded = "no";
		int pageNo = 1;
		String url = "";
		int mmfForTheYear = 0;
		String indentNo = "";
		String address = "";
		String printUrl = "";
		try {
			if (request.getParameter("buttonName") != null) {
				buttonName = request.getParameter("buttonName");
			}
			if (request.getParameter(INDENT_ID) != null) {
				indentId = Integer.parseInt(request.getParameter(INDENT_ID));
			}

			if (request.getParameter(CHANGED_DATE) != null) {
				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(CHANGED_DATE)));
				lastChgDate = java.sql.Date.valueOf(date4MySQL);
			}
			if (request.getParameter(CHANGED_BY) != null) {
				lastChgBy = request.getParameter(CHANGED_BY);
			}
			if (request.getParameter(CHANGED_TIME) != null) {
				lastChgTime = request.getParameter(CHANGED_TIME);
			}

			if (request.getParameter(NO_OF_ROWS) != null) {
				noOfRows = Integer.parseInt(request.getParameter(NO_OF_ROWS));
			}
			if (request.getParameter("pageNo") != null) {
				pageNo = Integer.parseInt(request.getParameter("pageNo"));
			}

			if (request.getParameter(INDENT_NO) != null) {
				indentNo = (request.getParameter(INDENT_NO));
			}
			if (request.getParameter(TYPE_OF_INDENT) != null) {
				indentOption = (request.getParameter(TYPE_OF_INDENT));
			}
			if (request.getParameter(INDENT_FROM) != null) {
				indentFrom = (request.getParameter(INDENT_FROM));
			}
			if (request.getParameter(SUPPLY_DEPOT) != null) {
				supplyDepot = Integer.parseInt(request
						.getParameter(SUPPLY_DEPOT));
			}
			if (request.getParameter(INDENT_DATE) != null) {
				SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn.parse(request.getParameter(INDENT_DATE)));
				indentDate = java.sql.Date.valueOf(date4MySQL);
			}
			if (request.getParameter(NRS) != null) {
				nrs = (request.getParameter(NRS));
			}
			if (request.getParameter(SECTION_ID) != null) {
				sectionId = Integer.parseInt(""
						+ request.getParameter(SECTION_ID));
			}
			if (request.getParameter(AUTHORITY) != null) {
				authority = (request.getParameter(AUTHORITY));
			}
			if (request.getParameter(CONTACT_NUMBER) != null && !request.getParameter(CONTACT_NUMBER).equals("0")) {
				contactNo = request.getParameter(CONTACT_NUMBER);
			}
			if (request.getParameter(ADDRESS) != null) {
				address = (request.getParameter(ADDRESS));
			}
			if(request.getParameter(CODE_HEAD)!=null){
				codehead=request.getParameter(CODE_HEAD);
			}
			if(request.getParameter(SHELF_LIFE)!=null){
				shelfLife=request.getParameter(SHELF_LIFE);
			}


		} catch (Exception e) {

			e.printStackTrace();
		}
		String headerStored = "no";

		if (pageNo == 1) {
			try {
				storeIndentM.setIndentNo(indentNo);
				storeIndentM.setIndentDate(indentDate);
				storeIndentM.setRequiredForm(indentFrom);
				MasStoreAirForceDepot masStoreSupplier = new MasStoreAirForceDepot();
				masStoreSupplier.setId(supplyDepot);
				storeIndentM.setSuppliedBy(masStoreSupplier);
				if(sectionId!=0){
				MasStoreSection masStoreSection = new MasStoreSection();
				masStoreSection.setId(sectionId);
				storeIndentM.setSection(masStoreSection);
				}
				storeIndentM.setNrs(nrs);
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				storeIndentM.setDepartment(masDepartment);
				storeIndentM.setIndentType(indentType);
				storeIndentM.setEncodedBy(encodedBy);
				storeIndentM.setEncodedDate(indentDate);
				storeIndentM.setLastChgBy(lastChgBy);
				storeIndentM.setLastChgDate(indentDate);
				storeIndentM.setLastChgTime(lastChgTime);
				if(buttonName.equals("close")){
				storeIndentM.setStatus("o");
				}else{
					storeIndentM.setStatus("u");
				}
				storeIndentM.setIndentOption(indentOption);

				storeIndentM.setPatientDetails(patientDetails);
				storeIndentM.setJustificationNiv(justificationNiv);
				storeIndentM.setPacJustification(pacJustification);
				storeIndentM.setPacForeignAdd(pacForeignAdd);
				storeIndentM.setAuthority(authority);
				storeIndentM.setTellNo(contactNo);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				storeIndentM.setHospital(masHospital);
				storeIndentM.setMmfForTheYear(mmfForTheYear);
				storeIndentM.setIndentNo(indentNo);
				storeIndentM.setImported("n");
				storeIndentM.setPatientDetails(address);
				storeIndentM.setCodeHead(codehead);
				storeIndentM.setSelfLife(shelfLife);

			} catch (Exception e) {
				e.printStackTrace();
			}
		} else {
			headerStored = "yes";
			infoMap.put("headerStored", headerStored);
		}

		int length = 0;
		List<StoreIndentT> storeIndentTlist = new ArrayList<StoreIndentT>(10);
		try {
			int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
					SR_NO);
			int departmentArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, DEPARTMENT_ID_TEMP);
			int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, ITEM_ID);
			String qtyInHandStringArray[] = JKTRequestUtils.getRequiredStringParameters(request, QTY_IN_HAND);
			String qtyInMmfStringArray[] = JKTRequestUtils
					.getRequiredStringParameters(request, QTY_IN_MMF);
			String qtyDemandStringArray[] = JKTRequestUtils
					.getRequiredStringParameters(request, QTY_DEMAND);
			BigDecimal[] qtyInHandArray = new BigDecimal[10];
			BigDecimal[] qtyDemandArray = new BigDecimal[10];
			BigDecimal[] qtyInMmfArray = new BigDecimal[10];
			int xxLegnt = qtyInHandStringArray.length;

			for (int i = 0; i < xxLegnt; i++) {
				BigDecimal val = new BigDecimal(qtyInMmfStringArray[i]);

				qtyInMmfArray[i] = val;
			}
			for (int i = 0; i < xxLegnt; i++) {
				BigDecimal val = new BigDecimal(qtyDemandStringArray[i]);
				qtyDemandArray[i] = val;
			}
			for (int i = 0; i < xxLegnt; i++) {
				BigDecimal val = new BigDecimal(qtyInHandStringArray[i]);
				qtyInHandArray[i] = val;
			}

			if (buttonName.equals("next")) {
				length = 8;
			} else {
				length = noOfRows;
			}
			for (int i = 0; i < length; i++) {
				if (itemIdArray[i] != 0) {
					StoreIndentT storeIndentTObj = new StoreIndentT();
					storeIndentTObj.setSerialNo(srNo[i]);

					MasStoreItem masItem = new MasStoreItem();
					masItem.setId(itemIdArray[i]);
					storeIndentTObj.setItem(masItem);
					// storeIndentTObj.setStockIn(qtyInHandArray[i]);

					storeIndentTObj.setQtyInMmf(qtyInMmfArray[i]);
					storeIndentTObj.setQtyInDemand(qtyDemandArray[i]);
					storeIndentTObj.setQtyReceived(null);

					storeIndentTObj.setSection(null);
					storeIndentTObj.setStockIn(qtyInHandArray[i]);
					storeIndentTObj.setUnitRate(unitRate);
					storeIndentTObj.setBrand(null);
					MasManufacturer manufacturer = new MasManufacturer();
					manufacturer.setId(manufactureId);
					storeIndentTObj.setManufacture(manufacturer);
					storeIndentTObj.setMarketedBy(marketedBy);
					storeIndentTObj.setTotalCost(totalCost);
					storeIndentTObj.setLastReceiptDate(lastReceiptDate);
					storeIndentTObj.setLastReceiptQty(lastReceiptQty);
					storeIndentTlist.add(storeIndentTObj);
				}
			}

			// javed for auto indent

			// comment by javed khan

			/*if(request.getParameter("shelfLife")!=null && !request.getParameter("shelfLife").equals("")){
			for(int j=0; j<itemIdArray.length;j++){
				if (itemIdArray[j] != 0) {

				StoreIndentT storeIndentTObj = new StoreIndentT();
				storeIndentTObj.setSerialNo(srNo[j]);

				MasStoreItem masItem = new MasStoreItem();
				masItem.setId(itemIdArray[j]);
				storeIndentTObj.setItem(masItem);
				// storeIndentTObj.setStockIn(qtyInHandArray[i]);

				storeIndentTObj.setQtyInMmf(qtyInMmfArray[j]);
				storeIndentTObj.setQtyInDemand(qtyDemandArray[j]);
				storeIndentTObj.setQtyReceived(null);

				storeIndentTObj.setSection(null);
				storeIndentTObj.setStockIn(qtyInHandArray[j]);
				storeIndentTObj.setUnitRate(unitRate);
				storeIndentTObj.setBrand(null);
				MasManufacturer manufacturer = new MasManufacturer();
				manufacturer.setId(manufactureId);
				storeIndentTObj.setManufacture(manufacturer);
				storeIndentTObj.setMarketedBy(marketedBy);
				storeIndentTObj.setTotalCost(totalCost);
				storeIndentTObj.setLastReceiptDate(lastReceiptDate);
				storeIndentTObj.setLastReceiptQty(lastReceiptQty);
				storeIndentTlist.add(storeIndentTObj);
				}
			}
			}*/
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			dataMap.put("storeIndentM", storeIndentM);
			dataMap.put("storeIndentTlist", storeIndentTlist);
			dataMap.put("pageNo", pageNo);
			dataMap.put("indentId", indentId);
			dataMap.put("indentNo", indentNo);
			dataMap.put("deptId", deptId);
			dataMap.put("buttonName",buttonName);
			dataMap.put("hospitalId", hospitalId); // javed khan
			map = (Map) storesHandlerService
					.addNextOrSubmitIndentToDepot(dataMap);
			if (map.get("indentId") != null)
				indentId = Integer.parseInt("" + map.get("indentId"));

			if (map.get("successfullyAdded") != null)
				successfullyAdded = "" + map.get("successfullyAdded");
		} catch (Exception e) {
			e.printStackTrace();
		}
		String messageTOBeVisibleToTheUser = "";
		if (successfullyAdded.equals("yes")) {
			messageTOBeVisibleToTheUser = "Indent To Depot Records Added Successfully for indent no. "+indentNo+" .";
		} else {
			messageTOBeVisibleToTheUser = "Indent To Depot Records are Not Added";
			map.put("messageType", "failure");
		}


		String indentType1="";
		if(request.getParameter("indentType")!=null)
			indentType1=request.getParameter("indentType");


		if (buttonName.equals("next")) {
			if(indentType1.equals("old")){
				jsp = "modifyIndentDepot";
			}else{
			jsp = INDENT_TO_DEPOT_JSP;
			}
		} else {
			//jsp = STORES_MESSAGE_JSP;
			jsp="indentMessage";
			url = "/hms/hms/stores?method=showIndentJspDepot";
			printUrl = "/hms/hms/stores?method=printIndentTODepo&indentNo="+indentNo+"&deptId="+deptId;
		}
		pageNo = pageNo + 1;
		jsp += ".jsp";
		map.put("indentNo", indentNo);
		map.put(" indentFrom", indentFrom);
		map.put("indentDate", indentDate);
		map.put("supplyDepot", supplyDepot);
		map.put("sectionId", sectionId);
		map.put("indentOption", indentOption);
		map.put("nrs", nrs);
		map.put("codehead",codehead);
		map.put("authority", authority);
		map.put("address", address);
		map.put("indentOption", indentOption);
		map.put("pageNo", pageNo);
		map.put("contentJsp", jsp);
		map.put("contactNo",contactNo);
		map.put("url", url);
		map.put("printUrl", printUrl);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("indexB", "map", map);
	}



	public ModelAndView addNextOrSubmitIndentToDepotOld(
			HttpServletRequest request, HttpServletResponse response){
		// ------ Retriving User Name,Hospital Id,Department Id from Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		StoreIndentM storeIndentM = new StoreIndentM();
		@SuppressWarnings("unused")
		StoreIndentT storeIndentT = new StoreIndentT();
		String indentFrom = "";
		@SuppressWarnings("unused")
		Date indentDate = null;
		int supplyDepot = 0;
		@SuppressWarnings("unused")
		int sectionId = 12;
		String nrs = "";
		int rows = 0;
		@SuppressWarnings("unused")
		String indentType = "d";
		int departmentId = 1;
		String encodedBy = "";
		Date encodedDate = null;
		String lastChgBy = "";
		@SuppressWarnings("unused")
		Date lastChgDate = null;
		String lastChgTime = "";
		String indentOption = "";
		String patientDetails = "";
		String justificationNiv = "";
		String pacJustification = "";
		String pacForeignAdd = "";
		String authority = "";
		String buttonName = "";
		String codehead="";
		String shelfLife="";
		int indentId = 0;
		int serialNo = 0;
		int itemId = 1;
		int stockIn = 0;
		int qtyInDemand = 0;
		int qtyInMmf = 0;
		int qtyReceived = 0;
		int radioVal = 0;
		int noOfRows = 0;
		String contactNo="";
		BigDecimal unitRate = null;
		String brandName = "";
		int manufactureId = 1;
		String marketedBy = "";
		BigDecimal totalCost = null;
		Date lastReceiptDate = null;
		BigDecimal lastReceiptQty = null;
		Map<String, Object> infoMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		String successfullyAdded = "no";
		int pageNo = 1;
		String url = "";
		int mmfForTheYear = 0;
		String indentNo = "";
		String address = "";
		String printUrl = "";
		int gridLen=0;
		int indentLength = 0;
		try {
			if (request.getParameter("buttonName") != null) {
				buttonName = request.getParameter("buttonName");
			}
			if (request.getParameter(INDENT_ID) != null) {
				indentId = Integer.parseInt(request.getParameter(INDENT_ID));
			}

			if (request.getParameter(CHANGED_DATE) != null) {
				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(CHANGED_DATE)));
				lastChgDate = java.sql.Date.valueOf(date4MySQL);
			}
			if (request.getParameter(CHANGED_BY) != null) {
				lastChgBy = request.getParameter(CHANGED_BY);
			}
			if (request.getParameter(CHANGED_TIME) != null) {
				lastChgTime = request.getParameter(CHANGED_TIME);
			}

			if (request.getParameter(NO_OF_ROWS) != null) {
				noOfRows = Integer.parseInt(request.getParameter(NO_OF_ROWS));
			}
			if (request.getParameter("pageNo") != null) {
				pageNo = Integer.parseInt(request.getParameter("pageNo"));
			}

			if (request.getParameter(INDENT_NO) != null) {
				indentNo = (request.getParameter(INDENT_NO));
			}
			if (request.getParameter(TYPE_OF_INDENT) != null) {
				indentOption = (request.getParameter(TYPE_OF_INDENT));
			}
			if (request.getParameter(INDENT_FROM) != null) {
				indentFrom = (request.getParameter(INDENT_FROM));
			}
			if (request.getParameter(SUPPLY_DEPOT) != null) {
				supplyDepot = Integer.parseInt(request
						.getParameter(SUPPLY_DEPOT));
			}
			if (request.getParameter(INDENT_DATE) != null) {
				SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn.parse(request.getParameter(INDENT_DATE)));
				indentDate = java.sql.Date.valueOf(date4MySQL);
			}
			if (request.getParameter(NRS) != null) {
				nrs = (request.getParameter(NRS));
			}
			if (request.getParameter(SECTION_ID) != null) {
				sectionId = Integer.parseInt(""
						+ request.getParameter(SECTION_ID));
			}
			if (request.getParameter(AUTHORITY) != null) {
				authority = (request.getParameter(AUTHORITY));
			}
			if (request.getParameter(CONTACT_NUMBER) != null && !request.getParameter(CONTACT_NUMBER).equals("0")) {
				contactNo = request.getParameter(CONTACT_NUMBER);
			}
			if (request.getParameter(ADDRESS) != null) {
				address = (request.getParameter(ADDRESS));
			}
			if(request.getParameter(CODE_HEAD)!=null){
				codehead=request.getParameter(CODE_HEAD);
			}
			if(request.getParameter(SHELF_LIFE)!=null){
				shelfLife=request.getParameter(SHELF_LIFE);
			}

			if(request.getParameter("gridLen")!=null){
				gridLen=Integer.parseInt(request.getParameter("gridLen"));
			}


		} catch (Exception e) {

			e.printStackTrace();
		}
		String headerStored = "no";

		if (pageNo == 1) {
			try {
				storeIndentM.setIndentNo(indentNo);
				storeIndentM.setIndentDate(indentDate);
				storeIndentM.setRequiredForm(indentFrom);
				MasStoreAirForceDepot masStoreSupplier = new MasStoreAirForceDepot();
				masStoreSupplier.setId(supplyDepot);
				storeIndentM.setSuppliedBy(masStoreSupplier);
				if(sectionId!=0){
				MasStoreSection masStoreSection = new MasStoreSection();
				masStoreSection.setId(sectionId);
				storeIndentM.setSection(masStoreSection);
				}
				storeIndentM.setNrs(nrs);
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				storeIndentM.setDepartment(masDepartment);
				storeIndentM.setIndentType(indentType);
				storeIndentM.setEncodedBy(encodedBy);
				storeIndentM.setEncodedDate(indentDate);
				storeIndentM.setLastChgBy(lastChgBy);
				storeIndentM.setLastChgDate(indentDate);
				storeIndentM.setLastChgTime(lastChgTime);
				if(buttonName.equals("close")){
				storeIndentM.setStatus("o");
				}else{
					storeIndentM.setStatus("u");
				}
				storeIndentM.setIndentOption(indentOption);

				storeIndentM.setPatientDetails(patientDetails);
				storeIndentM.setJustificationNiv(justificationNiv);
				storeIndentM.setPacJustification(pacJustification);
				storeIndentM.setPacForeignAdd(pacForeignAdd);
				storeIndentM.setAuthority(authority);
				storeIndentM.setTellNo(contactNo);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				storeIndentM.setHospital(masHospital);
				storeIndentM.setMmfForTheYear(mmfForTheYear);
				storeIndentM.setIndentNo(indentNo);
				storeIndentM.setImported("n");
				storeIndentM.setPatientDetails(address);
				storeIndentM.setCodeHead(codehead);
				storeIndentM.setSelfLife(shelfLife);

			} catch (Exception e) {
				e.printStackTrace();
			}
		} else {
			headerStored = "yes";
			infoMap.put("headerStored", headerStored);
		}

		int length = 0;
		List<StoreIndentT> storeIndentTlist = new ArrayList<StoreIndentT>(10);
		try {
			int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
					SR_NO);
			int departmentArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, DEPARTMENT_ID_TEMP);
			int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, ITEM_ID);
			String qtyInHandStringArray[] = JKTRequestUtils
					.getRequiredStringParameters(request, QTY_IN_HAND);
			String qtyInMmfStringArray[] = JKTRequestUtils
					.getRequiredStringParameters(request, QTY_IN_MMF);
			String qtyDemandStringArray[] = JKTRequestUtils
					.getRequiredStringParameters(request, QTY_DEMAND);
			BigDecimal[] qtyInHandArray = new BigDecimal[gridLen-1];
			BigDecimal[] qtyDemandArray = new BigDecimal[gridLen-1];
			BigDecimal[] qtyInMmfArray = new BigDecimal[gridLen-1];
			int xxLegnt = qtyDemandStringArray.length;
			indentLength = itemIdArray.length;

			for (int i = 0; i < xxLegnt; i++) {
				BigDecimal val = new BigDecimal(qtyInMmfStringArray[i]);

				qtyInMmfArray[i] = val;
			}
			for (int i = 0; i < xxLegnt; i++) {
				BigDecimal val = new BigDecimal(qtyDemandStringArray[i]);
				qtyDemandArray[i] = val;
			}
			for (int i = 0; i < xxLegnt; i++) {
				BigDecimal val = new BigDecimal(qtyInHandStringArray[i]);
				qtyInHandArray[i] = val;
			}

			if (buttonName.equals("next")) {
				length = gridLen-1;
			} else {
				length = noOfRows;
			}
			for (int i = 0; i < length; i++) {
				if (itemIdArray[i] != 0) {
					StoreIndentT storeIndentTObj = new StoreIndentT();
					storeIndentTObj.setSerialNo(srNo[i]);

					MasStoreItem masItem = new MasStoreItem();
					masItem.setId(itemIdArray[i]);
					storeIndentTObj.setItem(masItem);
					// storeIndentTObj.setStockIn(qtyInHandArray[i]);

					storeIndentTObj.setQtyInMmf(qtyInMmfArray[i]);
					storeIndentTObj.setQtyInDemand(qtyDemandArray[i]);
					storeIndentTObj.setQtyReceived(null);

					storeIndentTObj.setSection(null);
					storeIndentTObj.setStockIn(qtyInHandArray[i]);
					storeIndentTObj.setUnitRate(unitRate);
					storeIndentTObj.setBrand(null);
					MasManufacturer manufacturer = new MasManufacturer();
					manufacturer.setId(manufactureId);
					storeIndentTObj.setManufacture(manufacturer);
					storeIndentTObj.setMarketedBy(marketedBy);
					storeIndentTObj.setTotalCost(totalCost);
					storeIndentTObj.setLastReceiptDate(lastReceiptDate);
					storeIndentTObj.setLastReceiptQty(lastReceiptQty);
					storeIndentTlist.add(storeIndentTObj);
				}
			}

			// javed for auto indent

			// comment by javed khan

			/*if(request.getParameter("shelfLife")!=null && !request.getParameter("shelfLife").equals("")){
			for(int j=0; j<itemIdArray.length;j++){
				if (itemIdArray[j] != 0) {

				StoreIndentT storeIndentTObj = new StoreIndentT();
				storeIndentTObj.setSerialNo(srNo[j]);

				MasStoreItem masItem = new MasStoreItem();
				masItem.setId(itemIdArray[j]);
				storeIndentTObj.setItem(masItem);
				// storeIndentTObj.setStockIn(qtyInHandArray[i]);

				storeIndentTObj.setQtyInMmf(qtyInMmfArray[j]);
				storeIndentTObj.setQtyInDemand(qtyDemandArray[j]);
				storeIndentTObj.setQtyReceived(null);

				storeIndentTObj.setSection(null);
				storeIndentTObj.setStockIn(qtyInHandArray[j]);
				storeIndentTObj.setUnitRate(unitRate);
				storeIndentTObj.setBrand(null);
				MasManufacturer manufacturer = new MasManufacturer();
				manufacturer.setId(manufactureId);
				storeIndentTObj.setManufacture(manufacturer);
				storeIndentTObj.setMarketedBy(marketedBy);
				storeIndentTObj.setTotalCost(totalCost);
				storeIndentTObj.setLastReceiptDate(lastReceiptDate);
				storeIndentTObj.setLastReceiptQty(lastReceiptQty);
				storeIndentTlist.add(storeIndentTObj);
				}
			}
			}*/
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			dataMap.put("storeIndentM", storeIndentM);
			dataMap.put("storeIndentTlist", storeIndentTlist);
			dataMap.put("pageNo", pageNo);
			dataMap.put("indentId", indentId);
			dataMap.put("indentNo", indentNo);
			dataMap.put("deptId", deptId);
			dataMap.put("buttonName",buttonName);

			dataMap.put("hospitalId", hospitalId); // javed khan
			map = (Map) storesHandlerService
					.addNextOrSubmitIndentToDepot(dataMap);
			if (map.get("indentId") != null)
				indentId = Integer.parseInt("" + map.get("indentId"));

			if (map.get("successfullyAdded") != null)
				successfullyAdded = "" + map.get("successfullyAdded");
		} catch (Exception e) {
			e.printStackTrace();
		}
		String messageTOBeVisibleToTheUser = "";
		if (successfullyAdded.equals("yes")) {
			messageTOBeVisibleToTheUser = "Indent To Depot Records Added Successfully";
		} else {
			messageTOBeVisibleToTheUser = "Indent To Depot Records are Not Added";
			map.put("messageType", "failure");
		}


		String indentType1="";
		if(request.getParameter("indentType")!=null)
			indentType1=request.getParameter("indentType");


		if (buttonName.equals("next")) {
			jsp = INDENT_TO_DEPOT_JSP;
			String jspFlag="auto";
			map.put("jspFlag", jspFlag);
			jsp = INDENT_TO_DEPOT_JSP;
		} else {
			//jsp = STORES_MESSAGE_JSP;
			jsp="indentMessage";
			url = "/hms/hms/stores?method=showIndentJspDepot";
			printUrl = "/hms/hms/stores?method=printIndentTODepo&indentNo="+indentNo+"&deptId="+deptId;
		}
		pageNo = pageNo + 1;
		jsp += ".jsp";
		map.put("indentNo", indentNo);
		map.put(" indentFrom", indentFrom);
		map.put("indentDate", indentDate);
		map.put("supplyDepot", supplyDepot);
		map.put("sectionId", sectionId);
		map.put("indentOption", indentOption);
		map.put("nrs", nrs);
		map.put("codehead",codehead);
		map.put("authority", authority);
		map.put("address", address);
		map.put("indentOption", indentOption);
		map.put("pageNo", pageNo);
		map.put("contentJsp", jsp);
		map.put("contactNo",contactNo);
		map.put("gridLen",gridLen);
		map.put("url", url);
		map.put("printUrl", printUrl);
		map.put("indentLength", indentLength);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("indexB", "map", map);
	}





















	public ModelAndView getBrandListForSOCModify(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		int itemId = 0;
		int brandId = 0;
		int manuId = 0;
		int detailId = 0;
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			if (request.getParameter("itemId") != null) {
				itemId = Integer.parseInt(request.getParameter("itemId"));
			}
			if (request.getParameter("brandId") != null) {
				brandId = Integer.parseInt(request.getParameter("brandId"));
			}
			if (request.getParameter("manuId") != null) {
				manuId = Integer.parseInt(request.getParameter("manuId"));
			}
			if (request.getParameter("detailId") != null) {
				detailId = Integer.parseInt(request.getParameter("detailId"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		map = (Map) storesHandlerService.getBrandListForSOC(itemId, detailId);
		jsp = "modifyWindow";
		map.put("contentJsp", jsp);
		map.put("brandId", brandId);
		map.put("manuId", manuId);
		return new ModelAndView(jsp, "map", map);
	}

	/*
	 * This method is used adding Header and Detail records to Indent To SOC. It
	 * is used for two operations(Next,Submit) based on the flag ie. buttonFlag
	 */

	public ModelAndView getBrandListForSOC(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		int itemId = 0;
		Map<String, Object> map = new HashMap<String, Object>();
		if (request.getParameter("itemId") != null) {
			itemId = Integer.parseInt(request.getParameter("itemId"));
		}
		map = (Map) storesHandlerService.getBrandListForSOC(itemId);
		jsp = "window";
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView addNextOrSubmitIndentToSOC(HttpServletRequest request,
			HttpServletResponse response) {

		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		StoreIndentM storeIndentM = new StoreIndentM();
		@SuppressWarnings("unused")
		StoreIndentT storeIndentT = new StoreIndentT();
		String indentFrom = "";
		@SuppressWarnings("unused")
		Date indentDate = null;
		int supplyDepot = 0;
		@SuppressWarnings("unused")
		int sectionId = 12;
		String nrs = "";
		int rows = 0;
		@SuppressWarnings("unused")
		String indentType = "s";
		String encodedBy = "";
		Date encodedDate = null;
		String lastChgBy = "";
		@SuppressWarnings("unused")
		Date lastChgDate = null;
		String lastChgTime = "";
		String indentOption = "";
		String patientDetails = "";
		String justificationNiv = "";
		String pacJustification = "";
		String authority = "";
		String buttonName = "";
		int indentId = 0;
		int serialNo = 0;
		int itemId = 1;
		int stockIn = 0;
		int qtyInDemand = 0;
		int qtyInMmf = 0;
		int qtyReceived = 0;
		int radioVal = 0;
		int noOfRows = 0;
		BigDecimal unitRate = null;
		String brandName = "";
		int manufactureId = 1;
		String marketedBy = "";
		BigDecimal totalCost = null;
		Date lastReceiptDate = null;
		BigDecimal lastReceiptQty = null;
		Map<String, Object> infoMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		String successfullyAdded = "no";
		int pageNo = 1;
		String url = "";
		int mmfForTheYear = 0;
		String indentNo = "";
		String address = "";
		String pacSpecific = "";
		String clinicalTrailReq = "";
		String dateOfLastReciept = "";
		String justification = "";
		BigDecimal qty = null;
		BigDecimal cost = null;
		int duration = 0;
		String durationType = "";
		int days = 0;
		int dose = 0;
		String course = "";
		String clinicalTrail = "";
		// New fields
		String PvmsAlreadyPrescribed = "";
		int itemReqForDept = 0;
		String pvmsAlreadyPrescribed = "";
		int itemReqDept = 0;
		String pacEqpt = "";

		try {
			if (request.getParameter("buttonName") != null) {
				buttonName = request.getParameter("buttonName");
			}
			if (request.getParameter(INDENT_ID) != null) {
				indentId = Integer.parseInt(request.getParameter(INDENT_ID));
			}

			if (request.getParameter(CHANGED_DATE) != null) {
				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(CHANGED_DATE)));
				lastChgDate = java.sql.Date.valueOf(date4MySQL);
			}
			if (request.getParameter(CHANGED_BY) != null) {
				lastChgBy = request.getParameter(CHANGED_BY);
			}
			if (request.getParameter(CHANGED_TIME) != null) {
				lastChgTime = request.getParameter(CHANGED_TIME);
			}

			if (request.getParameter(NO_OF_ROWS) != null) {
				noOfRows = Integer.parseInt(request.getParameter(NO_OF_ROWS));
			}
			if (request.getParameter("pageNo") != null) {
				pageNo = Integer.parseInt(request.getParameter("pageNo"));
			}

			if (request.getParameter(INDENT_NO) != null) {
				indentNo = (request.getParameter(INDENT_NO));
			}
			if (request.getParameter(TYPE_OF_INDENT) != null) {
				indentOption = (request.getParameter(TYPE_OF_INDENT));
			}
			if (request.getParameter(INDENT_FROM) != null) {
				indentFrom = (request.getParameter(INDENT_FROM));
			}
			if (request.getParameter(SUPPLY_DEPOT) != null) {
				supplyDepot = Integer.parseInt(request
						.getParameter(SUPPLY_DEPOT));
			}
			if (request.getParameter(INDENT_DATE) != null) {
				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(INDENT_DATE)));
				indentDate = java.sql.Date.valueOf(date4MySQL);
			}
			if (request.getParameter(NRS) != null) {
				nrs = (request.getParameter(NRS));
			}
			if (request.getParameter(SECTION_ID) != null) {
				sectionId = Integer.parseInt(""
						+ request.getParameter(SECTION_ID));
			}

			if (request.getParameter(DEPARTMENT_ID_TEMP) != null) {
				itemReqDept = Integer.parseInt((request
						.getParameter(DEPARTMENT_ID_TEMP)));
			}
			if (request.getParameter(ADDRESS) != null) {
				address = (request.getParameter(ADDRESS));
			}

			if (request.getParameter(CLINICAL_TRAIL_REQ) != null) {
				clinicalTrailReq = ((request.getParameter(CLINICAL_TRAIL_REQ)));
			}
			if (request.getParameter(PVMS_ALREADY_PRESCRIBED) != null) {
				PvmsAlreadyPrescribed = (request
						.getParameter(PVMS_ALREADY_PRESCRIBED));
			}

			if (request.getParameter(JUSTIFICATION) != null) {
				justification = (request.getParameter(JUSTIFICATION));
			}
			if (request.getParameter(QTY) != null) {
				qty = new BigDecimal(request.getParameter(QTY));
			}
			if (request.getParameter(COST) != null) {
				cost = new BigDecimal(request.getParameter(COST));
			}
			if (request.getParameter(DURATION) != null) {
				duration = Integer.parseInt((request.getParameter(DURATION)));
			}
			if (request.getParameter(DURATION_TYPE) != null) {
				durationType = (request.getParameter(DURATION_TYPE));
			}
			if (request.getParameter(DAYS) != null) {
				days = Integer.parseInt((request.getParameter(DAYS)));
			}
			if (request.getParameter(COURSE) != null) {
				course = (request.getParameter(COURSE));
			}
			if (request.getParameter(DOSE) != null) {
				dose = Integer.parseInt((request.getParameter(DOSE)));
			}
			if (request.getParameter(PAC_SPECIFIC) != null) {
				pacSpecific = (request.getParameter(PAC_SPECIFIC));
			}
			if (request.getParameter(DETAIL_OF_PATIENT) != null) {
				patientDetails = (request.getParameter(DETAIL_OF_PATIENT));
			}
			if (request.getParameter(JUSTIFICATION_NIV) != null) {
				justificationNiv = (request.getParameter(JUSTIFICATION_NIV));
			}
			if (request.getParameter(PAC_JUSTIFICATION) != null) {
				pacJustification = (request.getParameter(PAC_JUSTIFICATION));
			}
			if (request.getParameter(PVMS_ALREADY_PRESCRIBED) != null) {
				pvmsAlreadyPrescribed = (request
						.getParameter(PVMS_ALREADY_PRESCRIBED));
			}
			if (request.getParameter(PAC) != null) {
				pacEqpt = (request.getParameter(PAC));
			}

		} catch (Exception e) {

			e.printStackTrace();
		}
		String headerStored = "no";

		if (pageNo == 1) {
			try {
				storeIndentM.setIndentNo(indentNo);
				storeIndentM.setIndentDate(indentDate);
				storeIndentM.setRequiredForm(indentFrom);
				storeIndentM.setNrs(nrs);
				storeIndentM.setIndentType(indentType);
				storeIndentM.setStatus("o");
				storeIndentM.setEncodedBy(encodedBy);
				storeIndentM.setEncodedDate(indentDate);
				storeIndentM.setLastChgBy(lastChgBy);
				storeIndentM.setLastChgDate(indentDate);
				storeIndentM.setLastChgTime(lastChgTime);
				storeIndentM.setIndentOption(indentOption);
				storeIndentM.setPatientDetails(patientDetails);
				storeIndentM.setJustificationNiv(justificationNiv);
				storeIndentM.setPacJustification(pacJustification);
				storeIndentM.setPacForeignAdd(null);
				storeIndentM.setAuthority(null);

				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				storeIndentM.setHospital(masHospital);

				storeIndentM.setMmfForTheYear(mmfForTheYear);
				storeIndentM.setImported("n");

				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				storeIndentM.setDepartment(masDepartment);

				MasStoreSection masStoreSection = new MasStoreSection();
				masStoreSection.setId(deptId);
				storeIndentM.setSection(masStoreSection);

				MasStoreAirForceDepot masStoreSupplier = new MasStoreAirForceDepot();
				masStoreSupplier.setId(1);
				storeIndentM.setSuppliedBy(masStoreSupplier);

				storeIndentM.setClinicalTrail(clinicalTrailReq);
				storeIndentM.setPvmsAlreadyPrescribed(pvmsAlreadyPrescribed);
				storeIndentM.setCost(cost);
				storeIndentM.setQty(qty);
				storeIndentM.setDose(dose);
				storeIndentM.setDay(days);
				storeIndentM.setCourse(course);
				storeIndentM.setDuration(duration);
				storeIndentM.setDurationType(durationType);
				storeIndentM.setJustification(justification);
				storeIndentM.setPacSpecific(pacSpecific);
				storeIndentM.setPacEqpt(pacEqpt);
				MasDepartment masDepartment2 = new MasDepartment();
				masDepartment2.setId(itemReqDept);
				storeIndentM.setItemReqDept(masDepartment2);

			} catch (Exception e) {
				e.printStackTrace();
			}
		} else {
			headerStored = "yes";
			infoMap.put("headerStored", headerStored);
		}

		int length = 0;
		List<StoreIndentT> storeIndentTlist = new ArrayList<StoreIndentT>(10);
		try {
			int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
					SR_NO);
			int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, ITEM_ID);
			int brandIdArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, BRAND_ID);
			String marketedByArray[] = JKTRequestUtils
					.getRequiredStringParameters(request, MARKETED_BY);
			int manuArray[] = JKTRequestUtils.getRequiredIntParameters(request,
					MANUFACTURER_ID);
			String qtyInHandStringArray[] = JKTRequestUtils
					.getRequiredStringParameters(request, QTY_IN_HAND);
			String StringUnitRateArray[] = JKTRequestUtils
					.getRequiredStringParameters(request, UNIT_RATE);

			String StringTotalCostArray[] = JKTRequestUtils
					.getRequiredStringParameters(request, TOTAL_COST);
			String StringQtyRecpArray[] = JKTRequestUtils
					.getRequiredStringParameters(request, LAST_RECP_QTY);
			String StringQtyRecpDateArray[] = JKTRequestUtils
					.getRequiredStringParameters(request, LAST_RECP_DATE);

			BigDecimal[] qtyInHandArray = new BigDecimal[10];
			BigDecimal[] unitRateArray = new BigDecimal[10];
			BigDecimal[] CostArray = new BigDecimal[10];
			BigDecimal[] QtyRecpArray = new BigDecimal[10];
			Date[] QtyRecpDateArray = new Date[10];

			int xxLegnt = itemIdArray.length;

			for (int i = 0; i < xxLegnt; i++) {
				BigDecimal val = new BigDecimal(qtyInHandStringArray[i]);
				qtyInHandArray[i] = val;
			}
			for (int i = 0; i < xxLegnt; i++) {
				BigDecimal val = new BigDecimal(StringUnitRateArray[i]);
				QtyRecpArray[i] = val;
			}
			for (int i = 0; i < xxLegnt; i++) {
				BigDecimal val = new BigDecimal(StringTotalCostArray[i]);
				CostArray[i] = val;
			}
			for (int i = 0; i < xxLegnt; i++) {
				if (!StringQtyRecpDateArray[i].equals("0")) {
					SimpleDateFormat formatterIn = new SimpleDateFormat(
							"dd/MM/yyyy");
					SimpleDateFormat formatterOut = new SimpleDateFormat(
							"yyyy-MM-dd");
					String date4MySQL = formatterOut.format(formatterIn
							.parse(StringQtyRecpDateArray[i]));
					indentDate = java.sql.Date.valueOf(date4MySQL);

					QtyRecpDateArray[i] = indentDate;
				}
			}
			for (int i = 0; i < xxLegnt; i++) {
				BigDecimal val = new BigDecimal(StringQtyRecpArray[i]);
				QtyRecpArray[i] = val;
			}
			for (int i = 0; i < xxLegnt; i++) {
				BigDecimal val = new BigDecimal(StringUnitRateArray[i]);
				unitRateArray[i] = val;
			}


			if (buttonName.equals("next")) {
				length = 8;
			} else {
				length = noOfRows;
			}
			for (int i = 0; i < 8; i++) {

				if ((itemIdArray[i] != 0)) {
					StoreIndentT storeIndentTObj = new StoreIndentT();
					storeIndentTObj.setSerialNo(srNo[i]);
					storeIndentTObj.setStockIn(qtyInHandArray[i]);
					storeIndentTObj.setQtyInMmf(null);
					storeIndentTObj.setQtyInDemand(null);
					storeIndentTObj.setQtyReceived(null);

					MasStoreItem masItem = new MasStoreItem();
					masItem.setId(itemIdArray[i]);
					storeIndentTObj.setItem(masItem);

					storeIndentTObj.setSection(null);
					storeIndentTObj.setUnitRate(unitRateArray[i]);
					storeIndentTObj.setMarketedBy(marketedByArray[i]);
					storeIndentTObj.setTotalCost(CostArray[i]);
					storeIndentTObj.setLastReceiptQty(QtyRecpArray[i]);
					storeIndentTObj.setLastReceiptDate(QtyRecpDateArray[i]);

					if ((brandIdArray[i] != 0)) {
						MasStoreBrand brand = new MasStoreBrand();
						brand.setId(brandIdArray[i]);
						storeIndentTObj.setBrand(brand);
					} else {
						storeIndentTObj.setBrand(null);
					}

					MasManufacturer manufacturer = new MasManufacturer();
					if (manuArray[i] != 0) {
						manufacturer.setId(manufactureId);
						storeIndentTObj.setManufacture(manufacturer);
					} else {
						storeIndentTObj.setManufacture(null);
					}
					storeIndentTObj.setQtyReceived(null);

					storeIndentTlist.add(storeIndentTObj);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();		}
		try {
			dataMap.put("storeIndentM", storeIndentM);
			dataMap.put("storeIndentTlist", storeIndentTlist);
			dataMap.put("pageNo", pageNo);
			dataMap.put("indentId", indentId);
			dataMap.put("indentNo", indentNo);
			dataMap.put("deptId", deptId);
			map = (Map) storesHandlerService
					.addNextOrSubmitIndentToSOC(dataMap);
			if (map.get("indentId") != null)
				indentId = Integer.parseInt("" + map.get("indentId"));
			
			if (map.get("successfullyAdded") != null)
				successfullyAdded = "" + map.get("successfullyAdded");
		} catch (Exception e) {
			e.printStackTrace();		}
		String messageTOBeVisibleToTheUser = "";
		if (successfullyAdded.equals("yes")) {
			messageTOBeVisibleToTheUser = " Records Added Successfully";
		} else {
			messageTOBeVisibleToTheUser = " Records Not Added ";
			map.put("messageType", "failure");
		}
		if (buttonName.equals("next")) {
			jsp = INDENT_TO_SOC;
		} else {
			jsp = STORES_MESSAGE_JSP;
			url = "/hms/hms/stores?method=showIndentJspSOC";
		}
		pageNo = pageNo + 1;
		jsp += ".jsp";
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		itemList = storesHandlerService.getItemList();
		map.put("url", url);
		map.put("maxIndentNo", indentNo);
		map.put("patientDetails", patientDetails);
		map.put("itemReqDept", itemReqDept);
		map.put("pacEqpt", pacEqpt);
		map.put("pacJustification", pacJustification);
		map.put("dose", dose);
		map.put("days", days);
		map.put("course", course);
		map.put("duration", duration);
		map.put("durationType", durationType);
		map.put("PvmsAlreadyPrescribed", PvmsAlreadyPrescribed);
		map.put("justificationNiv", justificationNiv);
		map.put("clinicalTrailReq", clinicalTrailReq);

		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		map.put("itemList", itemList);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	public void fillItemsForIndentToDepot(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		String pvmsNo = "";
		List objectList = new ArrayList();
		try {
			if (request.getParameter("pvmsNo") != null) {
				pvmsNo = request.getParameter("pvmsNo");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		dataMap.put("pvmsNo", pvmsNo);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.fillItemsForIndentToDepot(dataMap);
		if (map.get("objectList") != null) {
			objectList = (List) map.get("objectList");
		}
		StringBuffer sb = new StringBuffer();
		try {
			for (Iterator iterator = objectList.iterator(); iterator.hasNext();) {
				Object[] object = (Object[]) iterator.next();
				sb.append("<item>");
				sb.append("<id>" + object[0] + "</id>");
				sb.append("<pvms>" + object[1] + "</pvms>");
				if ((object[6] == null) || (object[6].equals("")))
					sb.append("<oldPvms>" + 0 + "</oldPvms>");
				else
					sb.append("<oldPvms>" + object[6] + "</oldPvms>");
				sb.append("<au>" + object[8] + "</au>");
				if (object[4] == null)
					sb.append("<stock>" + 0 + "</stock>");
				else
					sb.append("<stock>" + new BigDecimal("" + object[4])
							+ "</stock>");
				if (object[5] == null)
					sb.append("<qtyInMMF>" + 0 + "</qtyInMMF>");
				else
					sb.append("<qtyInMMF>" + new BigDecimal("" + object[5])
							+ "</qtyInMMF>");

				if (object[9] == null)
					sb.append("<section>" + 0 + "</section>");
				else
					sb.append("<section>" + object[9] + "</section>");


				if(object[10] == null){
					sb.append("<demandVar>"+0+"</demandVar>");
				}else {
					int stcQty=0;
					int mmfQty=0;
					if(object[4]!=null){
					stcQty=((BigDecimal)object[4]).intValue();
					}
					if(object[5]!=null)
					{
					mmfQty=((BigDecimal)object[5]).intValue();
					}
					int mmfForIndent=0;
					if(object[10].toString().equalsIgnoreCase("SL")){
					 mmfForIndent=6*mmfQty;
					}else if(object[10].toString().equalsIgnoreCase("SLB")){
					 mmfForIndent=6*mmfQty;
					}else if(object[10].toString().equalsIgnoreCase("LL")){
					 mmfForIndent=9*mmfQty;
					}
					if(stcQty<mmfForIndent){
						int indenQty=mmfForIndent-stcQty;
						sb.append("<demandVar>"+indenQty+"</demandVar>");
					}else{
						sb.append("<demandVar>"+0+"</demandVar>");
					}
				}
				sb.append("</item>");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}

		// return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getItemListForIndentToDepot(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		String autoHint = "";
		int sectionId = 0;
		int indentId = 0;
		int sec=0;
		String sl="";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			if (request.getParameter("sectionId") != null) {
				sectionId = Integer.parseInt(""
						+ (request.getParameter("sectionId")));

			}
			if (request.getParameter("sec")!= null) {
				sec = Integer.parseInt(request.getParameter("sec"));

			}
			if(request.getParameter("sl")!=null){
				sl=request.getParameter("sl");
			}
			if (request.getParameter("indentId") != null) {
				indentId = Integer.parseInt(""
						+ (request.getParameter("indentId")));
			}
			List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
			dataMap.put("autoHint", autoHint);
			dataMap.put("deptId", deptId);
			dataMap.put("userName", userName);
			dataMap.put("hospitalId", hospitalId);
			dataMap.put("sectionId", sectionId);
			dataMap.put("indentId", indentId);
			dataMap.put("sec", sec);
			dataMap.put("sl",sl);

			map = storesHandlerService.getItemListForIndentToDepot(dataMap);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "result";
		return new ModelAndView(jsp, "map", map);
	}

	// ----------------- End of Indent-------------------------

	// -------------------------------Start of Issue To Dispensary
	// (CIV)-------------------------

	public ModelAndView adjustLoanOut(HttpServletRequest request,
			HttpServletResponse response) {
		// -- Retriving User Name,Hospital Id,Department Id from Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Box box = HMSUtil.getBox(request);
		Map map = new HashMap();
		Map dataMap = new HashMap();
		String messageTOBeVisibleToTheUser = "";
		int issueMId = 0;
		int toStoreId = 0;
		int requestBy = 0;
		int approvedBy = 0;
		int issuedBy = 0;
		String issueNo = "";
		String successfullyAdded = "n";
		String url = "";
		String messageType = "";

		if (request.getParameter(ISSUE_ID) != null) {
			issueMId = Integer.parseInt(request.getParameter(ISSUE_ID));
		}
		if (request.getParameter(DEPARTMENT_ID_TEMP) != null) {
			toStoreId = Integer.parseInt(request
					.getParameter(DEPARTMENT_ID_TEMP));
		}
		if (request.getParameter(REQUEST_BY) != null) {
			requestBy = Integer.parseInt(request.getParameter(REQUEST_BY));
		}
		if (request.getParameter(APPROVED_BY) != null
				&& !request.getParameter(APPROVED_BY).equals("")) {
			approvedBy = Integer.parseInt(request.getParameter(APPROVED_BY));
		}
		if (request.getParameter(ISSUED_BY) != null
				&& !request.getParameter(ISSUED_BY).equals("")) {
			issuedBy = Integer.parseInt(request.getParameter(ISSUED_BY));
		}
		if (request.getParameter(ISSUE_NO) != null) {
			issueNo = request.getParameter(ISSUE_NO);
		}
		jsp = "storesMessageForLoanOut";
		dataMap.put("requestBy", requestBy);
		dataMap.put("approvedBy", approvedBy);
		dataMap.put("issuedBy", issuedBy);
		dataMap.put("issueMId", issueMId);
		dataMap.put("toStoreId", toStoreId);
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("demandNo", box.get(RequestConstants.REQUEST_NO));
		map = storesHandlerService.adjustLoanOut(dataMap);
		if (map.get("successfullyAdded") != null) {
			successfullyAdded = ("" + map.get("successfullyAdded"));
		}
		if (successfullyAdded.equals("y")) {
			messageTOBeVisibleToTheUser = "Records Adjusted Successfully";
			messageType = "success";
			url = "stores?method=searchInternalIndentDetails";
		} else {
			messageTOBeVisibleToTheUser = "Records Not Adjusted ";
			messageType = "failure";
			url = "stores?method=searchInternalIndentDetails";
		}
		url = "stores?method=searchInternalIndentDetails";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		map.put("url", url);
		map.put("box", box);
		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings("unchecked")
	public ModelAndView deleteIssueCivItems(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Box box = HMSUtil.getBox(request);
		Map map = new HashMap();
		Map dataMap = new HashMap();
		box.put("deptId", deptId);
		int issueId = 0;
		jsp = RequestConstants.SHOW_DELETE_POPUP_FOR_ISSUE;
		map = storesHandlerService.deleteIssueCivItems(box);
		// jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	@SuppressWarnings("unchecked")
	public ModelAndView showDeleteIsuueCiv(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Box box = HMSUtil.getBox(request);
		Map map = new HashMap();
		Map dataMap = new HashMap();
		int issueId = 0;
		box.put("deptId", deptId);
		jsp = RequestConstants.SHOW_DELETE_POPUP_FOR_ISSUE;
		map = storesHandlerService.showDeleteIsuueCiv(box);
		// jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	@SuppressWarnings("unchecked")
	public ModelAndView openDeletePopupForIssueciv(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map map = new HashMap();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);
		map = storesHandlerService.openDeletePopupForIssueciv(dataMap);
		jsp = SHOW_DELETE_POPUP_FOR_ISSUE;

		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	/*
	 * Methods starting for CIV Issue changes by vikas
	 */

	@SuppressWarnings("unchecked")
	public ModelAndView searchInternalIndentDetails(HttpServletRequest request,
			HttpServletResponse response) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		int internalIndentId = 0;
		Box box = HMSUtil.getBox(request);
		String issueNo = "";
		Map<String, Object> map = null;
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> tempMap = new HashMap<String, Object>();
		Map<String, Object> pageMap = new HashMap<String, Object>();
		List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		// Header Information
		int approvedBy = 0;
		int requestedBy = 0;
		int issuedBy = 0;
		int issueId = 0;
		String refNo = "";
		int despenceryName = 0;
		String date = "";
		String time = "";
		String reqDate = "";
		String adjustLoanButtonToShow = null;
		String message = null;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");
		String messageTOBeVisibleToTheUser = "";
		String messageType = "failure";
		try {

			if (request.getParameter(RequestConstants.REQUEST_NO) != null) {
				internalIndentId = Integer.parseInt(request
						.getParameter(RequestConstants.REQUEST_NO));
			}
			if (request.getParameter(RequestConstants.REQUEST_DATE) != null) {
				reqDate = request.getParameter(RequestConstants.REQUEST_DATE);
			}
			if (request.getParameter(RequestConstants.ISSUE_NO) != null) {
				issueNo = (request.getParameter(RequestConstants.ISSUE_NO));
			}
			if (request.getParameter(RequestConstants.APPROVED_BY) != null && !request.getParameter(RequestConstants.APPROVED_BY).equals("")) {
				approvedBy = Integer.parseInt(""
						+ (request.getParameter(RequestConstants.APPROVED_BY)));
			}
			if (request.getParameter(RequestConstants.REQUEST_BY) != null && !request.getParameter(RequestConstants.REQUEST_BY).equals("")) {
				requestedBy = Integer.parseInt(""
						+ request.getParameter(RequestConstants.REQUEST_BY));
			}
			if (request.getParameter(RequestConstants.ISSUED_BY) != null && !request.getParameter(RequestConstants.ISSUED_BY).equals("")) {
				issuedBy = Integer.parseInt(""
						+ request.getParameter(RequestConstants.ISSUED_BY));
			}
			if (request.getParameter(RequestConstants.REFERENCE) != null) {
				refNo = (request.getParameter(RequestConstants.REFERENCE));
			}
			if (request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP) != null) {
				despenceryName = Integer
						.parseInt(""
								+ request
										.getParameter(RequestConstants.DEPARTMENT_ID_TEMP));
			}

			if (request.getParameter("issueId") != null) {
				issueId = Integer
						.parseInt("" + request.getParameter("issueId"));
			}

			dataMap.put("issueId", issueId);
			dataMap.put("internalIndentId", internalIndentId);
			box.put("requestNo", internalIndentId);
			dataMap.put("issueNo", box.getString("issueNo"));
			dataMap.put("approvedBy", approvedBy);
			dataMap.put("requestedBy", requestedBy);
			dataMap.put("issuedBy", issuedBy);
			dataMap.put("refNo", refNo);
			dataMap.put("despenceryName", despenceryName);
			dataMap.put("date", date);
			dataMap.put("time", time);
			dataMap.put("deptId", deptId);
			dataMap.put("userName", userName);
			dataMap.put("hospitalId", hospitalId);
			dataMap.put("reqDate", reqDate);
			tempMap = storesHandlerService.searchInternalIndentDetails(dataMap);
			if (tempMap.get("issueId") != null) {
				issueId = Integer.parseInt("" + tempMap.get("issueId"));
			}
			if (tempMap.get("storeInternalIndentMList") != null) {
				storeInternalIndentMList = (List<StoreInternalIndentM>) tempMap
						.get("storeInternalIndentMList");
			}
			if (tempMap.get("adjustLoanButtonToShow") != null) {
				adjustLoanButtonToShow = (String) tempMap
						.get("adjustLoanButtonToShow");
			}
			if (tempMap.get("message") != null && !tempMap.get("message").equals("")){
				message = (String) tempMap.get("message");

			}
			int pageNo = 1;
			pageMap.put("issueId", issueId);
			pageMap.put("pageNo", pageNo);
			pageMap.put("deptId", deptId);
			map = storesHandlerService.getIssueDetailPageByPage(pageMap);
			map.put("message", message);
			map.put("storeInternalIndentMList", storeInternalIndentMList);
			if (tempMap.get("messageTOBeVisibleToTheUser") != null)
				map.put("messageTOBeVisibleToTheUser", ""
						+ tempMap.get("messageTOBeVisibleToTheUser"));
			if (tempMap.get("messageType") != null)
				map.put("messageType", "" + tempMap.get("messageType"));

		} catch (Exception e) {
			e.printStackTrace();
		}

		if(message!= null){
		if(adjustLoanButtonToShow != null && adjustLoanButtonToShow.equals("true")){
			jsp = RequestConstants.ISSUED_TO_DISPENSARY_JSP;
		}else{
			jsp = RequestConstants.MODIFY_ISSUE_CIV;
		}
		}else{
			jsp = RequestConstants.ISSUED_TO_DISPENSARY_JSP;
		}

		jsp = jsp + ".jsp";
		map.put("adjustLoanButtonToShow", adjustLoanButtonToShow);
		map.put("contentJsp", jsp);
		box.put("issueId", issueId);
		map.put("box", box);
		map.put("internalIndentId", internalIndentId);
		map.put("max", issueNo);
		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings("unchecked")
	public ModelAndView addNextOrSubmitIssue(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		// Map map = new HashMap();
		Map pageMap = new HashMap();
		Box box = HMSUtil.getBox(request);
		int issueId = 0;
		int pageNo = 0;
		String buttonName = "";
		String messageTOBeVisibleToTheUser = "";
		if (request.getParameter(RequestConstants.ISSUE_ID) != null) {
			issueId = Integer.parseInt(request
					.getParameter(RequestConstants.ISSUE_ID));
		}

		if (request.getParameter("buttonName") != null) {
			buttonName = (request.getParameter("buttonName"));
		}
		if (buttonName.equals("next")) {
			if (request.getParameter(RequestConstants.PAGE_NO) != null) {
				pageNo = Integer.parseInt(request
						.getParameter(RequestConstants.PAGE_NO));
				
			}
			pageMap.put("issueId", issueId);
			pageMap.put("pageNo", pageNo + 1);
			pageMap.put("deptId", deptId);
			pageMap.put("userName", userName);
			pageMap.put("hospitalId", hospitalId);
			map = storesHandlerService.getIssueDetailPageByPage(pageMap);
			jsp = RequestConstants.ISSUED_TO_DISPENSARY_JSP;
			map.put("pageNo", pageNo + 1);
			
			/*
			 * if (map.get("issueTList") != null) { if (((List)
			 * map.get("issueTList")).size() == 0) { jsp = STORES_MESSAGE_JSP;
			 * messageTOBeVisibleToTheUser = "Issued Successfully";
			 * map.put("url", "stores?method=searchIssueCiv&issueUnit=" +
			 * issueId); map.put("messageTOBeVisibleToTheUser",
			 * messageTOBeVisibleToTheUser);
			 *
			 * }
			 *
			 * }
			 */
		} else if (buttonName.equals("goToPage")) {
			try {
				if (request.getParameter("ValueOfPage") != null) {
					pageNo = Integer.parseInt(request
							.getParameter("ValueOfPage"));
					
				}
			} catch (Exception e) {
				pageNo = 1;
			}
			pageMap.put("issueId", issueId);
			pageMap.put("pageNo", pageNo);
			pageMap.put("deptId", deptId);
			pageMap.put("userName", userName);
			pageMap.put("hospitalId", hospitalId);
			map = storesHandlerService.getIssueDetailPageByPage(pageMap);
			jsp = RequestConstants.ISSUED_TO_DISPENSARY_JSP;
			map.put("pageNo", pageNo);

			/*
			 * if (map.get("issueTList") != null) { if (((List)
			 * map.get("issueTList")).size() == 0) { jsp = STORES_MESSAGE_JSP;
			 * messageTOBeVisibleToTheUser = "Issued Successfully";
			 * map.put("url", "stores?method=searchIssueCiv&issueUnit=" +
			 * issueId); map.put("messageTOBeVisibleToTheUser",
			 * messageTOBeVisibleToTheUser);
			 *
			 * } }
			 */
		}
		/*
		 * else { jsp = STORES_MESSAGE_JSP; messageTOBeVisibleToTheUser =
		 * "Issued Successfully"; map.put("url",
		 * "stores?method=searchIssueCiv&issueUnit=" + issueId);
		 * map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		 *
		 * }
		 */

		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("indexB", "map", map);
	}


	public ModelAndView addBrandDetails(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		List<StoreIssueT> storeIssueTList = new ArrayList<StoreIssueT>();
		List costPriceList = new ArrayList();
		List batchNoList = new ArrayList();
		BigDecimal[] qtyIssuedArray = new BigDecimal[100];
		BigDecimal[] qtyRequestedArray = new BigDecimal[100];
		BigDecimal[] costPriceArray = new BigDecimal[100];
		Date[] expDateArray = new Date[100];
		Date expDate = new Date();
		StoreIssueM storeIssueM = new StoreIssueM();

		String requestType = "";
		String issueType = "";
		String docType = "";
		String issueNo = "";
		Date issueDate = new Date();
		int toStore = 0;
		int toDepot = 0;
		String requestNo = "";
		Date requestDate = new Date();
		int requestedBy = 0;
		int issuedBy = 0;
		int approvedBy = 0;
		StoreIssueM issueM = new StoreIssueM();
		int issueId = 0;
		int itemId = 0;
		int issuedItemId = 0;
		String docNo = "";
		Map dataMap = new HashMap();
		boolean flag = false;
		String messageTOBeVisibleToTheUser = "";
		String qtyInRequest = "";
		int detailId = 0;
		if (request.getParameter(RequestConstants.ISSUE_ID) != null) {
			issueId = Integer.parseInt((request
					.getParameter(RequestConstants.ISSUE_ID)));
		}
		if (request.getParameter(RequestConstants.ISSUE_NO) != null) {
			issueNo = ((request.getParameter(RequestConstants.ISSUE_NO)));
		}
		if (request.getParameter(RequestConstants.ITEM_ID) != null) {
			itemId = Integer.parseInt((request
					.getParameter(RequestConstants.ITEM_ID)));
		}
		if (request.getParameter(RequestConstants.ISSUE_ID) != null) {
			issuedItemId = Integer.parseInt((request
					.getParameter(RequestConstants.ISSUE_ID)));
		}
		if (request.getParameter(RequestConstants.QTY_IN_REQUEST) != null) {
			qtyInRequest = ((request
					.getParameter(RequestConstants.QTY_IN_REQUEST)));
		}
		if (request.getParameter(RequestConstants.DETAIL_ID) != null) {
			detailId = Integer.parseInt((request
					.getParameter(RequestConstants.DETAIL_ID)));
		}
		// issueId = (int) storesHandlerService.getIssueId(issueNo);
		if (issueId == 0) {
			try {
				if (request.getParameter(RequestConstants.REQUEST_TYPE) != null) {
					requestType = (request
							.getParameter(RequestConstants.REQUEST_TYPE));
				}
				if (request.getParameter(RequestConstants.ISSUE_TYPE) != null) {
					issueType = (request
							.getParameter(RequestConstants.ISSUE_TYPE));
				}

				if (request.getParameter(RequestConstants.DOC_TYPE) != null) {
					docType = (request.getParameter(RequestConstants.DOC_TYPE));
				}
				if (request.getParameter(RequestConstants.DOC_NO) != null) {
					docNo = (request.getParameter(RequestConstants.DOC_NO));
				}
				if (request.getParameter(RequestConstants.ISSUE_NO) != null) {
					issueNo = (request.getParameter(RequestConstants.ISSUE_NO));
				}
				if (request.getParameter(RequestConstants.ISSUE_DATE) != null) {

					SimpleDateFormat formatterIn = new SimpleDateFormat(
							"dd/MM/yyyy");
					SimpleDateFormat formatterOut = new SimpleDateFormat(
							"yyyy-MM-dd");
					String date4MySQL = formatterOut
							.format(formatterIn.parse(request
									.getParameter(RequestConstants.ISSUE_DATE)));
					issueDate = java.sql.Date.valueOf(date4MySQL);
				}
				if (request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP) != null) {
					toStore = Integer.parseInt(request
							.getParameter(RequestConstants.DEPARTMENT_ID_TEMP));
				}
				if (request.getParameter(RequestConstants.DEPARTMENT_INDENT_ID) != null) {
					toDepot = Integer
							.parseInt(request
									.getParameter(RequestConstants.DEPARTMENT_INDENT_ID));
				}
				if (request.getParameter(RequestConstants.REQUEST_NO) != null) {
					requestNo = (request
							.getParameter(RequestConstants.REQUEST_NO));
				}
				if (request.getParameter(RequestConstants.REQUEST_DATE) != null) {

					SimpleDateFormat formatterIn = new SimpleDateFormat(
							"dd/MM/yyyy");
					SimpleDateFormat formatterOut = new SimpleDateFormat(
							"yyyy-MM-dd");
					String date4MySQL = formatterOut
							.format(formatterIn
									.parse(request
											.getParameter(RequestConstants.REQUEST_DATE)));
					requestDate = java.sql.Date.valueOf(date4MySQL);
				}
				if (request.getParameter(RequestConstants.REQUEST_BY) != null) {
					requestedBy = Integer.parseInt(request
							.getParameter(RequestConstants.REQUEST_BY));
				}
				if (request.getParameter(RequestConstants.ISSUED_BY) != null) {
					issuedBy = Integer.parseInt(request
							.getParameter(RequestConstants.ISSUED_BY));
				}
				if (request.getParameter(RequestConstants.APPROVED_BY) != null) {
					approvedBy = Integer.parseInt(request
							.getParameter(RequestConstants.APPROVED_BY));
				}

				issueM.setIssueType(issueType);
				issueM.setIssueNo(issueNo);
				issueM.setIssueDate(issueDate);

				MasDepartment department = new MasDepartment();
				department.setId(deptId);
				issueM.setDepartment(department);

				StoreInternalIndentM storeInternalIndentM = new StoreInternalIndentM();
				storeInternalIndentM.setId(toDepot);
				issueM.setToDepot(storeInternalIndentM);

				MasDepartment department2 = new MasDepartment();
				department2.setId(toStore);
				issueM.setToStore(department2);

				MasStoreAirForceDepot airForceDepot = new MasStoreAirForceDepot();
				airForceDepot.setId(toDepot);
				issueM.setToUnit(airForceDepot);

				issueM.setRequestDate(requestDate);

				MasEmployee employee = new MasEmployee();
				employee.setId(requestedBy);
				issueM.setRequestBy(employee);

				MasEmployee employee2 = new MasEmployee();
				employee2.setId(approvedBy);
				issueM.setApprovedBy(employee2);

				MasEmployee employee3 = new MasEmployee();
				employee3.setId(issuedBy);
				issueM.setIssuedBy(employee3);
				issueM.setStatus("o");
				issueM.setDocNo(docNo);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		// end of if block
		else {
			// infoMap.put("issueId", issueId);
		}

		try {

			int itemIssuedIdArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, RequestConstants.BRAND_ID);
			String remarksArray[] = JKTRequestUtils
					.getRequiredStringParameters(request,
							RequestConstants.REMARKS);

			String batchNoArray[] = JKTRequestUtils
					.getRequiredStringParameters(request,
							RequestConstants.BATCH_NO);
			String qtyIssuedTempArray[] = JKTRequestUtils
					.getRequiredStringParameters(request,
							RequestConstants.QTY_ISSUED);
			String expDateTempArray[] = JKTRequestUtils
					.getRequiredStringParameters(request,
							RequestConstants.EXPIRY_DATE);
			String costpriceArray[] = JKTRequestUtils
					.getRequiredStringParameters(request,
							RequestConstants.COST_PRICE);

			int qtyIssuedTempArrayLength = qtyIssuedTempArray.length;
			for (int i = 0; i < qtyIssuedTempArrayLength; i++) {
				BigDecimal val = new BigDecimal(qtyIssuedTempArray[i]);
				qtyIssuedArray[i] = val;
			}

			int costPriceTempArrayLength = costpriceArray.length;

			for (int i = 0; i < costPriceTempArrayLength; i++) {
				if (!costpriceArray[i].equals("null")) {
					BigDecimal val = new BigDecimal("" + costpriceArray[i]);
					costPriceArray[i] = val;
					
				} else {
					BigDecimal val = new BigDecimal("0");
					costPriceArray[i] = val;
				}
			}

			int expDateTempArrayLength = expDateTempArray.length;
			for (int i = 0; i < expDateTempArrayLength; i++) {
				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(expDateTempArray[i]));
				expDate = java.sql.Date.valueOf(date4MySQL);
				expDateArray[i] = expDate;
			}

			for (int i = 0; i < itemIssuedIdArray.length; i++) {

				if (!qtyIssuedArray[i].equals(new BigDecimal("0"))) {
					StoreIssueT storeIssueT = new StoreIssueT();

					MasStoreItem masStoreItem = new MasStoreItem();
					masStoreItem.setId(itemId);
					storeIssueT.setItem(masStoreItem);

					BigDecimal bigDecimal = null;
					if (qtyInRequest.equals("New")) {
						bigDecimal = new BigDecimal("0");
					} else {
						bigDecimal = new BigDecimal(qtyInRequest);
					}
					storeIssueT.setQtyRequest(bigDecimal);

					storeIssueT.setCostPrice(costPriceArray[i]);

					MasStoreItem masStoreItem2 = new MasStoreItem();
					masStoreItem2.setId(itemId);
					storeIssueT.setItemIssued(masStoreItem2);

					storeIssueT.setBatchNo(batchNoArray[i]);
					storeIssueT.setQtyIssued(qtyIssuedArray[i]);
					if (remarksArray[i].equals("emptyString"))
						storeIssueT.setRemarks("");
					else
						storeIssueT.setRemarks(remarksArray[i]);
					storeIssueT.setExpiryDate(expDateArray[i]);
					StoreIssueM issueM2 = new StoreIssueM();
					issueM2.setId(issueId);
					storeIssueT.setIssueM(issueM2);

					MasStoreBrand storeBrand = new MasStoreBrand();
					storeBrand.setId(itemIssuedIdArray[i]);
					storeIssueT.setBrand(storeBrand);
					storeIssueT.setSrNo(1);
					storeIssueT.setItemOrder("3");

					storeIssueTList.add(storeIssueT);

				}
				costPriceList.add(costPriceArray[i]);
				batchNoList.add(batchNoArray[i]);
			}
			dataMap.put("batchNoList", batchNoList);
			dataMap.put("costPriceList", costPriceList);
			dataMap.put("storeIssueTList", storeIssueTList);
			dataMap.put("issueId", issueId);
			dataMap.put("itemId", itemId);
			dataMap.put("detailId", detailId);
			dataMap.put("itemIssuedIdArray", itemIssuedIdArray);
			dataMap.put("qtyIssuedTempArray", qtyIssuedTempArray);
			dataMap.put("deptId", deptId);
			dataMap.put("userName", userName);
			dataMap.put("hospitalId", hospitalId);
			dataMap.put("issueNo", issueNo);
			dataMap.put("qtyIssuedArray", qtyIssuedArray);
			flag = storesHandlerService.addBrandDetails(dataMap);

		} catch (Exception e) {
			e.printStackTrace();
		}
		if (flag) {
			messageTOBeVisibleToTheUser = "Records Added Succesfully";
		} else {
			messageTOBeVisibleToTheUser = "Records Not Added Succesfully";
		}
		jsp = RequestConstants.EXIT_WINDOW;
		// jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView updateNextOrSubmitIssueToCiv(
			HttpServletRequest request, HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map map = new HashMap();
		Map pageMap = new HashMap();
		Map dataMap = new HashMap();
		Box box = HMSUtil.getBox(request);
		int issueId = 0;
		int pageNo = 0;
		String buttonName = "next";
		String messageTOBeVisibleToTheUser = "";
		if (request.getParameter(RequestConstants.ISSUE_ID) != null) {
			issueId = Integer.parseInt(request
					.getParameter(RequestConstants.ISSUE_ID));
		}

		if (request.getParameter("buttonName") != null) {
			buttonName = (request.getParameter("buttonName"));
		}

		Users user = (Users) session.getAttribute("users");
		dataMap.put("users", user);
		Map<String, Object> newMap = commonMasterHandlerService
				.getUserButtonRights(dataMap);
		List<UserButtonRights> userRightsList = (List<UserButtonRights>) newMap
				.get("userRightsList");
		

		if (buttonName.equals("next")) {
			if (request.getParameter(RequestConstants.PAGE_NO) != null) {
				pageNo = Integer.parseInt(request
						.getParameter(RequestConstants.PAGE_NO));
			}
			String pvmsSearch = "";
			if (request.getParameter("pvmsSearch") != null) {
				pvmsSearch = request.getParameter("pvmsSearch").toString();

			}
			pageMap.put("issueId", issueId);
			pageMap.put("pageNo", pageNo + 1);
			pageMap.put("deptId", deptId);
			pageMap.put("userName", userName);
			pageMap.put("hospitalId", hospitalId);
			pageMap.put("pvmsSearch", pvmsSearch);
			map = storesHandlerService.getIssueDetailPageByPage(pageMap);
			map.put("stockList", map.get("stockList"));

			map.put("issueMStatus", map.get("issueMStatus").toString());
			box.put("departmentIdTemp", Integer.parseInt(""
					+ map.get("departmentIdTemp")));
			jsp = RequestConstants.MODIFY_ISSUE_CIV;
			map.put("pageNo", pageNo + 1);
			map.put("userRightsList", userRightsList);
			/*
			 * if (map.get("issueTList") != null) { if (((List)
			 * map.get("issueTList")).size() < 8) { List<MasStoreItem> itemList
			 * = new ArrayList<MasStoreItem>(); itemList = (List<MasStoreItem>)
			 * storesHandlerService.getItemList(); map.put("itemList",
			 * itemList); } }
			 */
		} else if (buttonName.equals("goToPage")) {
			if (request.getParameter("ValueOfPage") != null) {
				if (!request.getParameter("ValueOfPage").equals("")) {
					pageNo = Integer.parseInt(request
							.getParameter("ValueOfPage"));
				} else {
					pageNo = 1;
				}
				/*if (!request.getParameter("pvmsNo1").equals(""))
					pageMap.put("pvmsSearch", request.getParameter("pvmsNo1"));*/
			}
			pageMap.put("issueId", issueId);
			pageMap.put("pageNo", pageNo);
			pageMap.put("deptId", deptId);
			pageMap.put("userName", userName);
			pageMap.put("hospitalId", hospitalId);
			if (!box.getString("pvmsSearch").equals("")
					&& box.getString("pvmsSearch") != null) {
				pageMap.put("pvmsSearch", box.get("pvmsSearch"));
			}
			map = storesHandlerService.getIssueDetailPageByPage(pageMap);
			map.put("stockList", map.get("stockList"));
			map.put("issueMStatus", map.get("issueMStatus"));
			map.put("userRightsList", userRightsList);
			box.put("departmentIdTemp", Integer.parseInt(""+ map.get("departmentIdTemp")));
			jsp = RequestConstants.MODIFY_ISSUE_CIV;
			map.put("pageNo", pageNo);
		} else {
			jsp = STORES_MESSAGE_JSP;
			messageTOBeVisibleToTheUser = "Issued Successfully";
			map.put("url", "stores?method=showIssueDispensaryJsp");
			map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		}
		jsp = jsp + ".jsp";
		if (request.getParameter(RequestConstants.REQUEST_DATE) != null) {
			map.put(RequestConstants.REQUEST_DATE, request
					.getParameter(RequestConstants.REQUEST_DATE));

		}
		if (request.getParameter(RequestConstants.ISSUE_DATE) != null) {
			map.put(RequestConstants.ISSUE_DATE, request
					.getParameter(RequestConstants.ISSUE_DATE));
		}
		map.put("contentJsp", jsp);

		map.put("box", box);
		return new ModelAndView("indexB", "map", map);
	}

	/*
	 * Methods ending for CIV Issue changes by vikas
	 */

	public ModelAndView addNextOrSubmitIssueToCiv(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		int internalIndentId = 0;
		String max = "";
		int pageNo = 0;
		int listSize = 0;
		Box box = HMSUtil.getBox(request);
		if (request.getParameter(RequestConstants.REQUEST_NO) != null) {
			internalIndentId = Integer.parseInt(request
					.getParameter(RequestConstants.REQUEST_NO));
		}
		if (request.getParameter(RequestConstants.PAGE_NO) != null) {
			pageNo = Integer.parseInt(request
					.getParameter(RequestConstants.PAGE_NO));
		}
		if (request.getParameter(RequestConstants.ISSUE_NO) != null) {
			max = (request.getParameter(RequestConstants.ISSUE_NO));
		}
		try {
			// map =
			// storesHandlerService.searchInternalIndentDetails(internalIndentId);
		} catch (Exception e) {
			e.printStackTrace();		}
		jsp = RequestConstants.ISSUED_TO_DISPENSARY_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("internalIndentId", internalIndentId);
		map.put("max", max);
		map.put("pageNo", pageNo + 1);
		map.put("listSize", listSize);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showAdjustLoanOut(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		jsp = ADJUST_LOAN_OUT;
		jsp += ".jsp";
		int toStoreId = 0;
		int issueMId = 0;
		int requestBy = 0;
		int approvedBy = 0;
		int issuedBy = 0;
		int internalIndentId = 0;
		String issueNo = "";
		try {
			if (request.getParameter(DEPARTMENT_ID_TEMP) != null) {
				toStoreId = Integer.parseInt(request
						.getParameter(DEPARTMENT_ID_TEMP));
			}
			if (request.getParameter(REQUEST_BY) != null) {
				requestBy = Integer.parseInt(request.getParameter(REQUEST_BY));
			}
			if (request.getParameter(APPROVED_BY) != null
					&& !request.getParameter(APPROVED_BY).equals("")) {
				approvedBy = Integer
						.parseInt(request.getParameter(APPROVED_BY));
			}
			if (request.getParameter(ISSUED_BY) != null
					&& !request.getParameter(ISSUED_BY).equals("")) {
				issuedBy = Integer.parseInt(request.getParameter(ISSUED_BY));
			}

			if (request.getParameter("internalIndentId") != null) {
				internalIndentId = Integer.parseInt(request
						.getParameter("internalIndentId"));
			}
			dataMap.put("requestBy", requestBy);
			dataMap.put("approvedBy", approvedBy);
			dataMap.put("issuedBy", issuedBy);
			dataMap.put("toStoreId", toStoreId);
			dataMap.put("deptId", deptId);
			dataMap.put("userName", userName);
			dataMap.put("hospitalId", hospitalId);

			map = storesHandlerService.getAdjustLoanOutMap(dataMap);

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("contentJsp", jsp);
		map.put("toStoreId", toStoreId);
		map.put("requestBy", requestBy);
		map.put("approvedBy", approvedBy);
		map.put("issuedBy", Integer.parseInt(HMSUtil.restrictMetaChar(""+issuedBy)));
		map.put("internalIndentId", internalIndentId);
		map.put("box", box);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showPrintIssueToDispensary(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.showPrintIssueToDispensary();
		jsp = PRINT_ISSUE_TO_DISPENSARY;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView printIssueToOtherUnits(HttpServletRequest request,
			HttpServletResponse response) throws JRException {
		HttpSession session = request.getSession();
		int issue_m_id = 0;
		Map parameters = new HashMap();
		try {
			if (request.getParameter(ISSUE_ID) != null
					&& !(request.getParameter(ISSUE_ID).equals(""))) {
				issue_m_id = Integer.parseInt(request.getParameter(ISSUE_ID));
			}

			parameters = storesHandlerService.printIssueToOtherUnits(issue_m_id);
			parameters.put("issueId", issue_m_id);
			byte[] bytes = null;
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(ISSUE_OTHER_UNITS_REPORT), parameters,
					(Connection) parameters.get("conn"));

			response.setHeader("Content-Disposition", "attachment; filename="
					+ ISSUE_OTHER_UNITS_REPORT + ".pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;

			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView printIssueToDispensary(HttpServletRequest request,
			HttpServletResponse response) throws JRException {
		int issue_m_id = 0;
		Map parameters = new HashMap();
		try {
			if (request.getParameter(ISSUE_ID) != null
					&& !(request.getParameter(ISSUE_ID).equals(""))) {
				issue_m_id = Integer.parseInt(request.getParameter(ISSUE_ID));
			}
			HttpSession session = request.getSession();
			String hospitalName="";
			int hospitalId=0;
			
				if (session.getAttribute("hospitalId") != null) {
					hospitalId = (Integer) session.getAttribute("hospitalId");
					hospitalName = storesHandlerService.getHospitalName(hospitalId);
					parameters.put("HOSP_NAME", hospitalName);
					parameters.put("hospitalId", hospitalId);
				}
			
	            parameters = storesHandlerService.getIssuePrintMap(issue_m_id);
	            parameters.put("civNo", issue_m_id);
	        	String userHome = getServletContext().getRealPath("");	         
	            String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
	            parameters.put("path", imagePath);
	            parameters.put("HOSP_NAME", hospitalName);
	            parameters.put("SUBREPORT_DIR", getServletContext().getRealPath("/reports/"));
			byte[] bytes = null;


			//bytes = JasperRunManager.runReportToPdf(getCompiledReport(New_CIV2), parameters,(Connection) parameters.get("conn"));
			//response.setHeader("Content-Disposition", "attachment; filename="	+ New_CIV2 + ".pdf");
			bytes = JasperRunManager.runReportToPdf(getCompiledReport("Store_Issue_Detail"), parameters,(Connection) parameters.get("conn"));
			response.setHeader("Content-Disposition", "attachment; filename="+ "Store_Issue_Detail.jrxml" + ".pdf");

			/*bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(ISSUE_TO_DISPENSARY_JASSPER_NEW), parameters,
					(Connection) parameters.get("conn"));

			response.setHeader("Content-Disposition", "attachment; filename="
					+ ISSUE_TO_DISPENSARY_JASSPER_NEW + ".pdf");*/
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;

			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (Exception e) {
			e.printStackTrace();
		}

		// return new ModelAndView("index", "map", map);
		return null;
	}
	
	public ModelAndView printRCIssueReport(HttpServletRequest request,
			HttpServletResponse response) throws JRException {
		int issue_m_id = 0;
		Map parameters = new HashMap();
		try {
			if (request.getParameter(ISSUE_ID) != null
					&& !(request.getParameter(ISSUE_ID).equals(""))) {
				issue_m_id = Integer.parseInt(request.getParameter(ISSUE_ID));
			}
			HttpSession session = request.getSession();
			String hospitalName="";
			int hospitalId=0;
			
				if (session.getAttribute("hospitalId") != null) {
					hospitalId = (Integer) session.getAttribute("hospitalId");
					hospitalName = storesHandlerService.getHospitalName(hospitalId);
					parameters.put("HOSP_NAME", hospitalName);
					parameters.put("hospitalId", hospitalId);
				}
			
	            parameters = storesHandlerService.getIssuePrintMap(issue_m_id);
	            parameters.put("civNo", issue_m_id);
	        	String userHome = getServletContext().getRealPath("");	         
	            String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
	            parameters.put("path", imagePath);
	            parameters.put("HOSP_NAME", hospitalName);
	            parameters.put("SUBREPORT_DIR", getServletContext().getRealPath("/reports/"));
			byte[] bytes = null;


			//bytes = JasperRunManager.runReportToPdf(getCompiledReport(New_CIV2), parameters,(Connection) parameters.get("conn"));
			//response.setHeader("Content-Disposition", "attachment; filename="	+ New_CIV2 + ".pdf");
			bytes = JasperRunManager.runReportToPdf(getCompiledReport("RC_Issue_Detail"), parameters,(Connection) parameters.get("conn"));
			response.setHeader("Content-Disposition", "attachment; filename="+ "RC_Issue_Detail.jrxml" + ".pdf");

			/*bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(ISSUE_TO_DISPENSARY_JASSPER_NEW), parameters,
					(Connection) parameters.get("conn"));

			response.setHeader("Content-Disposition", "attachment; filename="
					+ ISSUE_TO_DISPENSARY_JASSPER_NEW + ".pdf");*/
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;

			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (Exception e) {
			e.printStackTrace();
		}

		// return new ModelAndView("index", "map", map);
		return null;
	}

	public ModelAndView printLoanOut(HttpServletRequest request,
			HttpServletResponse response) throws JRException {
		HttpSession session = request.getSession();
		int internalIndentId = 0;
		Map map = new HashMap();
		Map dataMap = new HashMap();
		Map newMap = new HashMap();
		Map parameterMap = new HashMap();
		try {

			if (request.getParameter("internalIndentId") != null) {
				internalIndentId = Integer.parseInt(request
						.getParameter("internalIndentId"));
			}
			dataMap.put("internalIndentId", internalIndentId);
			map = storesHandlerService.getLoanOutPrintMap(dataMap);
			parameterMap = storesHandlerService.getConnectionForReport();
			newMap.put("internalIndentId", internalIndentId);
			newMap.put("toStore", map.get("toStore"));
			newMap.put("Hosp_Name", map.get("Hosp_Name"));
			/*
			 * byte[] bytes = null; bytes =
			 * JasperRunManager.runReportToPdf(getCompiledReport
			 * ("loanOutReport"), newMap, (Connection) map.get("conn"));
			 *
			 *
			 * response.setHeader("Content-Disposition", "attachment; filename="
			 * + "loanOutReport" + ".pdf");
			 * response.setContentLength(bytes.length); ServletOutputStream
			 * ouputStream;
			 *
			 * ouputStream = response.getOutputStream();
			 * ouputStream.write(bytes, 0, bytes.length); ouputStream.flush();
			 * ouputStream.close();
			 */
		} catch (Exception e) {
			e.printStackTrace();
		}
		HMSUtil.generateReport("loanOutReport", newMap,
				(Connection) parameterMap.get("con"), response,
				getServletContext());
		// return new ModelAndView("index", "map", map);
		return null;
	}

	public ModelAndView printDispensaryToStoreJsp(HttpServletRequest request,
			HttpServletResponse response) throws JRException {
		    //HttpSession session = request.getSession();

		    Map<String, Object> requestParameters = new HashMap<String, Object>();
			JRDataSource ds = null;
			List itemList = null;

			HttpSession session = request.getSession();

			int hospitalId = 0;
			String hospitalName = "";
			int itemCategoryId = 0;
			String itemCode = null;
			String itemName = null;
			String deptName = null;
			String query = new String("");
			// requestParameters.put("DEPART", session.getAttribute("deptId"));
			try {
				
				String userHome = getServletContext().getRealPath("");	         
	            String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
	            requestParameters.put("path", imagePath);

				if (session.getAttribute("deptName") != null) {
					deptName = (String) session.getAttribute("deptName");
					requestParameters.put("department", deptName);
				}
				int deptId = 0;
	 		 	if (session.getAttribute("deptId") != null) {
	 				deptId = (Integer) session.getAttribute("deptId");
					requestParameters.put("deptId", deptId);
				}
	 			if (session.getAttribute("hospitalId") != null) {
					hospitalId = (Integer) session.getAttribute("hospitalId");
					hospitalName = storesHandlerService.getHospitalName(hospitalId);
					requestParameters.put("HOSP_NAME", hospitalName);
					requestParameters.put("hospitalId", hospitalId); // javed
				}
				if (request.getParameter(DEMAND_NO) != null
						&& !(request.getParameter(DEMAND_NO).equals(""))) {
					String demand_no = request.getParameter(DEMAND_NO);
					requestParameters.put("demand_no", demand_no);
				}
				if (request.getParameter("mrId") != null)
					{
					int mrId = Integer.parseInt(request.getParameter("mrId"));
					requestParameters.put("mrId", mrId);
				}
				Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
				HMSUtil.generateReport("department_indent_report",
						requestParameters, (Connection) connectionMap.get("con"),
						response, getServletContext());



		} catch (Exception e) {
			e.printStackTrace();
		}

		// return new ModelAndView("index", "map", map);
		return null;
	}
	public ModelAndView printDispensaryToStoreRJsp(HttpServletRequest request,
			HttpServletResponse response) throws JRException {
		    //HttpSession session = request.getSession();

		    Map<String, Object> requestParameters = new HashMap<String, Object>();
			JRDataSource ds = null;
			List itemList = null;

			HttpSession session = request.getSession();

			int hospitalId = 0;
			String hospitalName = "";
			int itemCategoryId = 0;
			String itemCode = null;
			String itemName = null;
			String deptName = null;
			String query = new String("");
			// requestParameters.put("DEPART", session.getAttribute("deptId"));
			try {

				if (session.getAttribute("deptName") != null) {
					deptName = (String) session.getAttribute("deptName");
					requestParameters.put("department", deptName);
				}
				String flags="";
				if (request.getParameter("flags") != null	&& !(request.getParameter("flags").equals(""))) {
					flags = request.getParameter("flags");
					
				}
				int deptId = 0;
	 		 	if (session.getAttribute("deptId") != null) {
	 				deptId = (Integer) session.getAttribute("deptId");
					requestParameters.put("deptId", deptId);
				}
	 			if (session.getAttribute("hospitalId") != null) {
					hospitalId = (Integer) session.getAttribute("hospitalId");
					hospitalName = storesHandlerService.getHospitalName(hospitalId);
					requestParameters.put("HOSP_NAME", hospitalName);
					requestParameters.put("hospitalId", hospitalId); // javed
				}
				if (request.getParameter(DEMAND_NO) != null)
				{
					int demand_no = Integer.parseInt(request.getParameter(DEMAND_NO));
					requestParameters.put("demand_no", demand_no);
				}
				String userHome = getServletContext().getRealPath("");	         
		        String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
		        requestParameters.put("path", imagePath);
				
				Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
				if(flags.equalsIgnoreCase("r")){
					HMSUtil.generateReport("department_indent_report_R",requestParameters, (Connection) connectionMap.get("con"),
							response, getServletContext());
				}if(flags.equalsIgnoreCase("wr")){
					
					HMSUtil.generateReport("department_indent_report_WR",requestParameters, (Connection) connectionMap.get("con"),
							response, getServletContext());
				}
						



		} catch (Exception e) {
			e.printStackTrace();
		}

		// return new ModelAndView("index", "map", map);
		return null;
	}

	public ModelAndView getItemListForIssueToDispensary(
			HttpServletRequest request, HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		String autoHint = "";
		int issueId = 0;
		try {
			Map<String, Object> dataMap = new HashMap<String, Object>();
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			if ((request.getParameter("issueId") != null)
					&& !(request.getParameter("issueId").equals(""))) {
				issueId = Integer.parseInt(request.getParameter("issueId"));
			}

			List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
			dataMap.put("autoHint", autoHint);
			dataMap.put("deptId", deptId);
			dataMap.put("userName", userName);
			dataMap.put("hospitalId", hospitalId);
			dataMap.put("issueId", issueId);
			map = storesHandlerService.getItemListForIssueToDispensary(dataMap);
			jsp = "result";
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getItemListForIssueToDispensaryOtherUnits(
			HttpServletRequest request, HttpServletResponse response) {
		//- Retriving User Name,Hospital Id,Department Id from Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		String autoHint = "";
		int issueId = 0;
		try {
			Map<String, Object> dataMap = new HashMap<String, Object>();
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			/*if ((request.getParameter("issueId") != null)
					|| (request.getParameter("issueId") != "")) {
				issueId = Integer.parseInt(request.getParameter("issueId"));
			}*/

			List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
			dataMap.put("autoHint", autoHint);
			dataMap.put("deptId", deptId);
			dataMap.put("userName", userName);
			dataMap.put("hospitalId", hospitalId);
			dataMap.put("issueId", issueId);
			dataMap.put("typeOfIssue", "OtherUnits");
			map = storesHandlerService.getItemListForIssueToDispensary(dataMap);
			jsp = "result";
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getHinNo(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		String autoHint = "";
		try {
			Map<String, Object> dataMap = new HashMap<String, Object>();

			if (request.getParameter(RequestConstants.PATIENT_NAME) != null) {
				autoHint = (request.getParameter(RequestConstants.PATIENT_NAME));
			}
			dataMap.put("autoHint", autoHint);
			dataMap.put("deptId", deptId);
			dataMap.put("userName", userName);
			dataMap.put("hospitalId", hospitalId);
			map = storesHandlerService.getHinNo(dataMap);
			jsp = "resultForHin";
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView(jsp, "map", map);
	}

	public void fillItemsForIssueToDispensary(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> dataMap = new HashMap<String, Object>();
		String pvmsNo = "";
		try {
			if (request.getParameter("pvmsNo") != null) {
				pvmsNo = request.getParameter("pvmsNo");
			}

			List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
			dataMap.put("pvmsNo", pvmsNo);
			dataMap.put("deptId", deptId);
			dataMap.put("userName", userName);
			dataMap.put("hospitalId", hospitalId);
			map = storesHandlerService.fillItemsForIssueToDispensary(dataMap);
			if (map.get("itemList") != null) {
				itemList = (List) map.get("itemList");
			}
			// javed khan
			List<StoreItemBatchStock> batchList = new ArrayList<StoreItemBatchStock>();
			if (map.get("batchList") != null) {
				batchList = (List) map.get("batchList");
			}
			BigDecimal stock = new BigDecimal(0);
			if (map.get("stock") != null) {
				stock = (BigDecimal) map.get("stock");
			}
			StringBuffer sb = new StringBuffer();
			for (MasStoreItem masStoreItem : itemList) {
				sb.append("<item>");
				sb.append("<nomen>" + masStoreItem.getNomenclature() + "</nomen>");
				sb.append("<id>" + masStoreItem.getId() + "</id>");
				sb.append("<pvms>" + masStoreItem.getPvmsNo() + "</pvms>");
				if (masStoreItem.getItemConversion() != null)
					sb.append("<au>"
							+ masStoreItem.getItemConversion()
									.getPurchaseUnit().getUnitName() + "</au>");
				else
					sb.append("<au>" + "NA" + "</au>");
				sb
						.append("<name>" + masStoreItem.getNomenclature()
								+ "</name>");
				sb.append("<BrandG>" + masStoreItem.getBrandedGeneric() + "</BrandG>");
				sb.append("<stock>" + stock + "</stock>");
				sb.append("<batches>");
				for (StoreItemBatchStock batch : batchList) {
					sb.append("<batch>");
					sb.append("<batchId>" + batch.getId() + "</batchId>");
					sb.append("<batchName>" + batch.getBatchNo()
							+ "</batchName>");
					sb.append("</batch>");
				}
				sb.append("</batches>");


				sb.append("</item>");
			}

			/*
			 * BigDecimal stock = new BigDecimal(0); try { String s =
			 * (String)map.get("stock"); stock = new BigDecimal(s); }
			 * catch(Exception e) { stock = new BigDecimal(0); }
			 */

			/*
			 * sb.append("<stock>"); sb.append("<stk>");
			 * sb.append(stock.doubleValue()); sb.append("</stk>");
			 * sb.append("</stock>");
			 */
			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");

			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
//  This method is commented by Vishal in Bangalore and add new method below for same come from Noida
	/*public void fillItemsForIssueToDispensaryByPvmsNo(
			HttpServletRequest request, HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> dataMap = new HashMap<String, Object>();
		String pvmsNo = "";
		try {
			if (request.getParameter("pvmsNo") != null) {
				pvmsNo = request.getParameter("pvmsNo");
			}

			List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
			dataMap.put("pvmsNo", pvmsNo);
			dataMap.put("deptId", deptId);
			dataMap.put("userName", userName);
			dataMap.put("hospitalId", hospitalId);
			map = storesHandlerService.fillItemsForIssueToDispensary(dataMap);
			if (map.get("itemList") != null) {
				itemList = (List) map.get("itemList");
			}
			for (MasStoreItem masStoreItem : itemList) {
			}
			StringBuffer sb = new StringBuffer();
			for (MasStoreItem masStoreItem : itemList) {
				sb.append("<item>");
				sb.append("<id>" + masStoreItem.getId() + "</id>");
				sb.append("<nomenclature>" + masStoreItem.getNomenclature()
						+ "</nomenclature>");
				sb.append("<pvms>" + masStoreItem.getPvmsNo() + "</pvms>");
				if (masStoreItem.getItemConversion() != null)
					sb.append("<au>"
							+ masStoreItem.getItemConversion()
									.getPurchaseUnit().getUnitName() + "</au>");
				else
					sb.append("<au>" + "NA" + "</au>");
				sb
						.append("<name>" + masStoreItem.getNomenclature()
								+ "</name>");
				sb.append("</item>");
			}

			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");

			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}*/
	//=============  Add this method in place of above one========
	public void fillItemsForIssueToDispensaryByPvmsNo(
			HttpServletRequest request, HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> dataMap = new HashMap<String, Object>();
		String pvmsNo = "";
		try {
			if (request.getParameter("pvmsNo") != null) {
				pvmsNo = request.getParameter("pvmsNo");
			}

			List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
			dataMap.put("pvmsNo", pvmsNo);
			dataMap.put("deptId", deptId);
			dataMap.put("userName", userName);
			dataMap.put("hospitalId", hospitalId);
			map = storesHandlerService.fillItemsForIssueToDispensary(dataMap);
			if (map.get("itemList") != null) {
				itemList = (List) map.get("itemList");
			}
			/*for (MasStoreItem masStoreItem : itemList) {
			}*/
			StringBuffer sb = new StringBuffer();
			String str = "";
			String str1 = "";
			for (MasStoreItem masStoreItem : itemList) {
				str =masStoreItem.getNomenclature();
				if(str.contains("&apos;") || str.contains("&amp;") || str.contains("&quot;") || str.contains("&gt;") || str.contains("&lt;") ){
					str1 =str;
				}else
				{
					str1= str.replaceAll("&", " &amp; ");
				}
				sb.append("<item>");
				sb.append("<id>" + masStoreItem.getId() + "</id>");
				sb.append("<nomenclature>" + str1
						+ "</nomenclature>");
				sb.append("<pvms>" + masStoreItem.getPvmsNo() + "</pvms>");
				if (masStoreItem.getItemConversion() != null)
					sb.append("<au>"
							+ masStoreItem.getItemConversion()
									.getPurchaseUnit().getUnitName() + "</au>");
				else
					sb.append("<au>" + "NA" + "</au>");
				sb
						.append("<name>" + str1
								+ "</name>");
				sb.append("</item>");
			}

			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");

			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}


	// -------------------------------End of Issue To Dispensary
	// (CIV)----------------------------------

	// ------------------Start of Issue To Dispensary In the form of
	// LOANOUT-----------------------
	public void checkHinExistence(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		String hinNo = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		String pvmsNo = "";
		try {
			if (request.getParameter("hinNo") != null) {
				hinNo = (request.getParameter("hinNo"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		List<Patient> patientList = new ArrayList<Patient>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		dataMap.put("hinNo", hinNo);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.checkHinExistence(dataMap);
		if (map.get("patientList") != null) {
			patientList = (List<Patient>) map.get("patientList");
		}
		StringBuffer sb = new StringBuffer();
		sb.append("<item>");
		if (patientList.size() > 0) {
			sb.append("<hinNo>" + "Yes" + "</hinNo>");
		} else {
			sb.append("<hinNo>" + "No" + "</hinNo>");
		}
		sb.append("</item>");

		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}

		// return new ModelAndView(jsp, "map", map);
	}

	public void fillItemsForIssueToLoanout(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> dataMap = new HashMap<String, Object>();
		String pvmsNo = "";
		try {
			if (request.getParameter("pvmsNo") != null) {
				pvmsNo = request.getParameter("pvmsNo");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		dataMap.put("pvmsNo", pvmsNo);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.fillItemsForIssueToDispensary(dataMap);
		if (map.get("itemList") != null) {
			itemList = (List) map.get("itemList");
		}
	/*	for (MasStoreItem masStoreItem : itemList) {
		}*/
		StringBuffer sb = new StringBuffer();
		for (MasStoreItem masStoreItem : itemList) {
			sb.append("<item>");
			sb.append("<id>" + masStoreItem.getId() + "</id>");
			sb.append("<pvms>" + masStoreItem.getPvmsNo() + "</pvms>");
			sb.append("<au>"
					+ masStoreItem.getItemConversion().getPurchaseUnit()
							.getUnitName() + "</au>");
			sb.append("<name>" + masStoreItem.getNomenclature() + "</name>");
			sb.append("</item>");
		}

		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public ModelAndView getItemListForLoanout(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		String autoHint = "";
		int issueId = 0;
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (request.getParameter("requiredField") != null) {
			itemNameField = (request.getParameter("requiredField"));
		}
		if (request.getParameter(itemNameField) != null) {
			autoHint = (request.getParameter(itemNameField));
		}
		if (request.getParameter("issueId") != null) {
			issueId = Integer.parseInt((request.getParameter("issueId")));
		}

		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		dataMap.put("autoHint", autoHint);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("issueId", issueId);
		map = storesHandlerService.getItemListForIssueToDispensary(dataMap);
		jsp = "result";
		return new ModelAndView(jsp, "map", map);
	}

	// This method returnd a jsp which contails item list
	// based on the MmfIndent select Condition
	public ModelAndView getItemListForLoanoutByAutocomplete(
			HttpServletRequest request, HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		String autoHint = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (request.getParameter("requiredField") != null) {
			itemNameField = (request.getParameter("requiredField"));
		}
		if (request.getParameter(itemNameField) != null) {
			autoHint = (request.getParameter(itemNameField));
		}
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		dataMap.put("autoHint", autoHint);
		map = storesHandlerService.getItemListForLoanoutByAutocomplete(dataMap);
		jsp = "result";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView deleteIssueLoanoutItems(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Box box = HMSUtil.getBox(request);
		Map map = new HashMap();
		Map dataMap = new HashMap();

		int issueId = 0;
		jsp = RequestConstants.SHOW_DELETE_POPUP_FOR_ISSUE_LOAN_OUT;
		box.put("deptId", deptId);
		map = storesHandlerService.deleteIssueLoanoutItems(box);
		// jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView showDeleteIsuueLoanout(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Box box = HMSUtil.getBox(request);
		Map map = new HashMap();
		Map dataMap = new HashMap();
		int issueId = 0;
		int departmentIdTemp = 0;
		if (request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP) != null) {
			departmentIdTemp = Integer.parseInt(request
					.getParameter(RequestConstants.DEPARTMENT_ID_TEMP));
		}
		jsp = RequestConstants.SHOW_DELETE_POPUP_FOR_ISSUE_LOAN_OUT;
		box.put("deptId", deptId);
		map = storesHandlerService.showDeleteIsuueLoanout(box);
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView openDeletePopupForIssueLoanOut(
			HttpServletRequest request, HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		int departmentIdTemp = 0;
		Map dataMap = new HashMap();

		jsp = SHOW_DELETE_POPUP_FOR_ISSUE_LOAN_OUT;
		dataMap.put("deptId", deptId);
		map = storesHandlerService.openDeletePopupForIssueLoanOut(dataMap);
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView addNextOrSubmitIssueForLoanOut(
			HttpServletRequest request, HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map map = new HashMap();
		Map dataMap = new HashMap();
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);

		Box box = HMSUtil.getBox(request);
		int issueId = 0;
		int pageNo = 0;
		String buttonName = "";
		String messageTOBeVisibleToTheUser = "";
		buttonName = "" + box.get("buttonName");

		// dataMap.put("pvmsSearch", pvmsSearch);

		if (request.getParameter(RequestConstants.ISSUE_ID) != null) {
			issueId = Integer.parseInt(request
					.getParameter(RequestConstants.ISSUE_ID));
		}

		if (buttonName.equals("next")) {
			if (request.getParameter(RequestConstants.PAGE_NO) != null) {
				pageNo = Integer.parseInt(request
						.getParameter(RequestConstants.PAGE_NO));
			}
			dataMap.put("issueId", issueId);
			dataMap.put("pageNo", pageNo + 1);
			dataMap.put("deptId", deptId);
			dataMap.put("userName", userName);
			dataMap.put("hospitalId", hospitalId);
			dataMap.put("issue_type", "l");
			// map = storesHandlerService.showIssueDispensaryManualJsp(dataMap);
			map = storesHandlerService.getIssueDetailPageByPage(dataMap);
			jsp = RequestConstants.ISSUED_TO_DISPENSARY_MANUAL_JSP;
			map.put("pageNo", pageNo + 1);

		} else if (buttonName.equals("goToPage")) {
			if (request.getParameter("ValueOfPage") != null) {
				if (!request.getParameter("ValueOfPage").equals("")) {
					pageNo = Integer.parseInt(request
							.getParameter("ValueOfPage"));
				} else {
					pageNo = 1;
				}

				if (!request.getParameter("pvmsNo1").equals(""))
					dataMap.put("pvmsSearch", request.getParameter("pvmsNo1"));
			}
			dataMap.put("issueId", issueId);
			dataMap.put("pageNo", pageNo);
			dataMap.put("deptId", deptId);
			dataMap.put("userName", userName);
			dataMap.put("hospitalId", hospitalId);
			dataMap.put("issue_type", "l");
			if (!box.getString("pvmsSearch").equals("")
					&& box.getString("pvmsSearch") != null) {
				dataMap.put("pvmsSearch", box.get("pvmsSearch"));
			}
			map = storesHandlerService.getIssueDetailPageByPage(dataMap);
			jsp = RequestConstants.ISSUED_TO_DISPENSARY_MANUAL_JSP;
			map.put("pageNo", pageNo);
		}

		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("box", box);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView searchIssueLoanout(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		int issueId = 0;
		if (request.getParameter(RequestConstants.ISSUE_UNIT_ID) != null) {
			issueId = Integer.parseInt(request.getParameter(ISSUE_UNIT_ID));
		}
		Map map = new HashMap();
		Box box = HMSUtil.getBox(request);
		box.put("issueId", issueId);
		box.put("deptId", deptId);
		if (issueId != 0)
			map = storesHandlerService.searchIssueLoanout(box);
		jsp = RequestConstants.ISSUED_TO_DISPENSARY_MANUAL_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	/*
	 * ----------------------starting of methods for loan out----------------
	 */
	public ModelAndView showIssueDispensaryManualJsp(
			HttpServletRequest request, HttpServletResponse response) {

		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map map = new HashMap();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.showIssueDispensaryManualJsp(dataMap);
		jsp = RequestConstants.ISSUED_TO_DISPENSARY_MANUAL_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView openItemBrandWindowJspForLoanOut(
			HttpServletRequest request, HttpServletResponse response)
			throws ParseException {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Box box = HMSUtil.getBox(request);
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map map = new HashMap();
		int itemId = 0;
		int rowVal = 0;
		int departmentId = 1;
		if (request.getParameter(RequestConstants.ITEM_ID) != null) {
			itemId = Integer.parseInt(request
					.getParameter(RequestConstants.ITEM_ID));
		}
		if (request.getParameter("rowVal") != null) {
			rowVal = Integer.parseInt(request.getParameter("rowVal"));
		}
		dataMap.put("itemId", itemId);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.getBrandMap(dataMap);
		map.put("rowVal", rowVal);
		jsp = RequestConstants.ITEM_BRAND_WINDOW_JSP_FOR_LOAN_OUT;
		return new ModelAndView(jsp, "map", map);
	}

	// javed khan
	public ModelAndView addBrandDetailsForLoanOut(HttpServletRequest request,
			HttpServletResponse response) throws java.text.ParseException {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		int count=0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if(request.getParameter("counter") != null)
		{
		count = Integer.parseInt(""+request.getParameter("counter"));
		}

		// --------------------------------------------------------------------------------
		Map map = new HashMap();
		Box box = HMSUtil.getBox(request);
		String messageTOBeVisibleToTheUser = "";
		box.put("hospitalId", hospitalId);
		box.put("deptId", deptId);
		box.put("count", count);
		map = storesHandlerService.addBrandDetailsForLoanOut(box);
		String successfullyAdded = "n";

		if (map.get("successfullyAdded") != null) {
			successfullyAdded = "" + map.get("successfullyAdded");
		}
		if (successfullyAdded.equals("y")) {
			messageTOBeVisibleToTheUser = "Loanout entry saved successfully.";
		} else {
			messageTOBeVisibleToTheUser = "Loanout not saved.";
		}
		//jsp = RequestConstants.EXIT_WINDOW;
		String url= "/hms/hms/stores?method=showIssueDispensaryManualJsp";
		jsp="message.jsp";
		map.put("contentJsp", jsp);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		map.put("url", url);
		return new ModelAndView("indexB", "map", map);
	}

	/*
	 * ----------------------end of methods for loan out----------------
	 */
	// ------------------End of Issue To Dispensary In the form of
	// LOANOUT-------------------------
	// ------------------Start of Issues To Other Units on
	// Surplus(CIV)-----------------------
	public ModelAndView deleteIssueToOtherUnits(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Box box = HMSUtil.getBox(request);
		Map map = new HashMap();
		Map dataMap = new HashMap();

		int issueId = 0;
		jsp = RequestConstants.SHOW_DELETE_POPUP_FOR_ISSUE_TO_OTHER_UNITS;
		box.put("deptId", deptId);
		map = storesHandlerService.deleteIssueToOtherUnitsItems(box);
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView showDeleteIsuueToOtherUnits(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Box box = HMSUtil.getBox(request);
		Map map = new HashMap();
		Map dataMap = new HashMap();
		int issueId = 0;
		int departmentIdTemp = 1;
		if (request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP) != null) {
			departmentIdTemp = Integer.parseInt(request
					.getParameter(RequestConstants.DEPARTMENT_ID_TEMP));
		}
		jsp = RequestConstants.SHOW_DELETE_POPUP_FOR_ISSUE_TO_OTHER_UNITS;
		box.put("deptId", deptId);
		map = storesHandlerService.showDeleteIsuueToOtherUnits(box);
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView openDeletePopupForIssueToOtherUnits(
			HttpServletRequest request, HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		int departmentIdTemp = 1;
		Map dataMap = new HashMap();
		if (request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP) != null) {
			departmentIdTemp = Integer.parseInt(request
					.getParameter(RequestConstants.DEPARTMENT_ID_TEMP));
		}
		jsp = SHOW_DELETE_POPUP_FOR_ISSUE_TO_OTHER_UNITS;
		dataMap.put("deptId", deptId);
		dataMap.put("departmentIdTemp", departmentIdTemp);
		map = storesHandlerService.openDeletePopupForIssueToOtherUnits(dataMap);
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView addNextOrSubmitIssueToOtherUnits(
			HttpServletRequest request, HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("userName", userName);
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		Map map = new HashMap();
		Map pageMap = new HashMap();
		Box box = HMSUtil.getBox(request);
		int issueId = 0;
		int pageNo = 0;
		String buttonName = "next";
		String messageTOBeVisibleToTheUser = "";
		buttonName = "" + box.get("buttonName");
		if (buttonName.equals("next")) {
			pageNo = Integer.parseInt("" + box.getInt("pageNo"));
			box.put("pageNo", pageNo + 1);
			map = storesHandlerService.searchIssueToOtherUnits(box);
			jsp = RequestConstants.ISSUED_TO_OTHER_UNITS_JSP;
			map.put("pageNo", pageNo + 1);
		} else if (buttonName.equals("goToPage")) {
			issueId = Integer.parseInt("" + box.getInt(ISSUE_ID));
			try {
				if (request.getParameter("ValueOfPage") != null)
					pageNo = Integer.parseInt(request
							.getParameter("ValueOfPage"));
			} catch (Exception e) {
				pageNo = 1;
			}

			box.put("issueId", issueId);
			box.put("pageNo", pageNo);
			box.put("deptId", deptId);
			box.put("userName", userName);
			box.put("hospitalId", hospitalId);
			map = storesHandlerService.searchIssueToOtherUnits(box);
			jsp = RequestConstants.ISSUED_TO_OTHER_UNITS_JSP;
			map.put("pageNo", pageNo);
		}
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView addBrandDetailsToOtherUnits(HttpServletRequest request,
			HttpServletResponse response) throws java.text.ParseException {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map map = new HashMap();
		Box box = HMSUtil.getBox(request);
		String messageTOBeVisibleToTheUser = "";
		session = request.getSession();
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		box.put("hospitalId", hospitalId);
		box.put("deptId", deptId);
		map = storesHandlerService.addBrandDetailsToOtherUnits(box);
		String successfullyAdded = "n";

		if (map.get("successfullyAdded") != null) {
			successfullyAdded = "" + map.get("successfullyAdded");
		}
		if (successfullyAdded.equals("y")) {
			messageTOBeVisibleToTheUser = "Records Added Succesfully";
		} else {
			messageTOBeVisibleToTheUser = "Records Not Added";
		}

		jsp = RequestConstants.EXIT_WINDOW;
		map.put("contentJsp", jsp);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView searchIssueToOtherUnits(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		int hospitalId = 0;
		int deptId = 0;
		String userName = "";
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		Map map = new HashMap();
		Box box = HMSUtil.getBox(request);
		box.put("hospitalId", hospitalId);
		box.put("deptId", deptId);
		map = storesHandlerService.searchIssueToOtherUnits(box);
		jsp = RequestConstants.ISSUED_TO_OTHER_UNITS_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showIssueToOtherUnitsJsp(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map map = new HashMap();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("userName", userName);
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);

		map = storesHandlerService.showIssueToOtherUnitsJsp(dataMap);
		jsp = RequestConstants.ISSUED_TO_OTHER_UNITS_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView openItemBrandWindowJspToOtherUnits(
			HttpServletRequest request, HttpServletResponse response)
			throws ParseException {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map map = new HashMap();
		int itemId = 0;
		int rowVal = 0;
		HttpSession session = request.getSession();
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		String qtyRequested="";
		String nomenclature ="";

		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------

		if (request.getParameter(RequestConstants.ITEM_ID) != null) {
			itemId = Integer.parseInt(request
					.getParameter(RequestConstants.ITEM_ID));
		}
		if (request.getParameter("rowVal") != null) {
			rowVal = Integer.parseInt(request.getParameter("rowVal"));
		}
		if (request.getParameter(RequestConstants.QTY_IN_REQUEST) != null) {
			qtyRequested = (request
					.getParameter(RequestConstants.QTY_IN_REQUEST));
		}
		if (request.getParameter("nomenclature") != null) {
			nomenclature = request.getParameter("nomenclature");
		}

		dataMap.put("deptId", deptId);
		dataMap.put("itemId", itemId);
		dataMap.put("nomenclature", nomenclature);
		dataMap.put("qtyRequested", qtyRequested);
		map = storesHandlerService.getBrandMap(dataMap);
		map.put("rowVal", rowVal);
		map.put("nomenclature", nomenclature);
		map.put("qtyRequested", qtyRequested);
		jsp = RequestConstants.ITEM_BRAND_WINDOW_JSP_TO_OTHER_UNITS;
		return new ModelAndView(jsp, "map", map);
	}

	// ------------------End of Issues To Other Units on Surplus
	// (CIV)-------------------------

	// ------------------Start of Issues To Other than Airforce Units
	// -----------------------
	public void fillIssueToOTAFUBasedOnLotNo(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> dataMap = new HashMap<String, Object>();
		String lotNo = "";
		try {
			if (request.getParameter("lotNo") != null) {
				lotNo = request.getParameter("lotNo");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		dataMap.put("lotNo", lotNo);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.fillIssueToOTAFUBasedOnLotNo(dataMap);
		if (map.get("itemList") != null) {
			itemList = (List) map.get("itemList");
		}
	/*	for (MasStoreItem masStoreItem : itemList) {
		}*/
		StringBuffer sb = new StringBuffer();
		for (MasStoreItem masStoreItem : itemList) {
			sb.append("<item>");
			sb.append("<id>" + masStoreItem.getId() + "</id>");
			sb.append("<pvms>" + masStoreItem.getPvmsNo() + "</pvms>");
			sb.append("<au>"
					+ masStoreItem.getItemConversion().getPurchaseUnit()
							.getUnitName() + "</au>");
			sb.append("<name>" + masStoreItem.getNomenclature() + "</name>");
			sb.append("</item>");
		}

		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void fillItemsForIssueToOTAFU(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> dataMap = new HashMap<String, Object>();
		String pvmsNo = "";
		try {
			if (request.getParameter("pvmsNo") != null) {
				pvmsNo = request.getParameter("pvmsNo");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		dataMap.put("pvmsNo", pvmsNo);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.fillItemsForIssueToDepot(dataMap);
		if (map.get("itemList") != null) {
			itemList = (List) map.get("itemList");
		}
/*		for (MasStoreItem masStoreItem : itemList) {
		}*/
		StringBuffer sb = new StringBuffer();
		for (MasStoreItem masStoreItem : itemList) {
			sb.append("<item>");
			sb.append("<id>" + masStoreItem.getId() + "</id>");
			sb.append("<pvms>" + masStoreItem.getPvmsNo() + "</pvms>");
			sb.append("<au>"
					+ masStoreItem.getItemConversion().getPurchaseUnit()
							.getUnitName() + "</au>");
			sb.append("<name>" + masStoreItem.getNomenclature() + "</name>");
			sb.append("</item>");
		}

		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}

		// return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getItemListForIssueToOTAFU(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		String autoHint = "";
		int issueId = 0;
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (request.getParameter("requiredField") != null) {
			itemNameField = (request.getParameter("requiredField"));
		}
		if (request.getParameter(itemNameField) != null) {
			autoHint = (request.getParameter(itemNameField));
		}
		if (request.getParameter("issueId") != null) {
			issueId = Integer.parseInt((request.getParameter("issueId")));
		}
		
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		dataMap.put("autoHint", autoHint);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("issueId", issueId);
		map = storesHandlerService.getItemListForIssueToOTAFU(dataMap);
		jsp = "result";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView deleteIssueToOTAFU(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map map = new HashMap();
		Map dataMap = new HashMap();
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------

		int issueId = 0;
		jsp = RequestConstants.SHOW_DELETE_POPUP_FOR_ISSUE_OTAFU;
		box.put("deptId", deptId);
		map = storesHandlerService.deleteIssueToOTAFU(box);
		map.put("contentJsp", jsp);
		map.put("departmentIdTemp", deptId);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView showDeleteIssueToOTAFU(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map map = new HashMap();
		Map dataMap = new HashMap();
		int issueId = 0;
		int departmentIdTemp = 0;
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		jsp = RequestConstants.SHOW_DELETE_POPUP_FOR_ISSUE_OTAFU;
		box.put("deptId", deptId);
		map = storesHandlerService.showDeleteIsuueToOTAFU(box);
		map.put("contentJsp", jsp);
		map.put("departmentIdTemp", departmentIdTemp);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView openDeletePopupForIssueToOTAFU(
			HttpServletRequest request, HttpServletResponse response) {
		int departmentIdTemp = 0;
		Map dataMap = new HashMap();
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		jsp = SHOW_DELETE_POPUP_FOR_ISSUE_OTAFU;
		dataMap.put("deptId", deptId);
		map = storesHandlerService.openDeletePopupForIssueToOTAFU(dataMap);
		map.put("contentJsp", jsp);
		map.put("departmentIdTemp", departmentIdTemp);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView addNextOrSubmitIssueToOTAFU(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("userName", userName);
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);

		Map map = new HashMap();
		Map pageMap = new HashMap();
		Box box = HMSUtil.getBox(request);
		box.put("deptId", deptId);
		int issueId = 0;
		int pageNo = 0;
		String buttonName = "next";
		String messageTOBeVisibleToTheUser = "";
		buttonName = "" + box.get("buttonName");
		if (buttonName.equals("next")) {
			pageNo = Integer.parseInt("" + box.getInt("pageNo"));
			box.put("pageNo", pageNo + 1);
			map = storesHandlerService.searchIssueToOTAFU(box);
			jsp = RequestConstants.ISSUED_TO_OTAFU_JSP;
			map.put("pageNo", pageNo + 1);
		} else if (buttonName.equals("goToPage")) {
			issueId = Integer.parseInt("" + box.getInt(ISSUE_ID));
			try {
				if (request.getParameter("ValueOfPage") != null)
					pageNo = Integer.parseInt(request
							.getParameter("ValueOfPage"));
			} catch (Exception e) {
				pageNo = 1;
			}

			box.put("issueId", issueId);
			box.put("pageNo", pageNo);
			box.put("deptId", deptId);
			box.put("userName", userName);
			box.put("hospitalId", hospitalId);
			map = storesHandlerService.searchIssueToOTAFU(box);
			jsp = RequestConstants.ISSUED_TO_OTAFU_JSP;
			map.put("pageNo", pageNo);
		}
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView addBrandDetailsIssueToOTAFU(HttpServletRequest request,
			HttpServletResponse response) throws java.text.ParseException {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map map = new HashMap();
		Box box = HMSUtil.getBox(request);
		String messageTOBeVisibleToTheUser = "";
		session = request.getSession();

		box.put("hospitalId", hospitalId);
		box.put("deptId", deptId);
		map = storesHandlerService.addBrandDetailsToOTAFU(box);
		String successfullyAdded = "n";

		if (map.get("successfullyAdded") != null) {
			successfullyAdded = "" + map.get("successfullyAdded");
		}
		if (successfullyAdded.equals("y")) {
			messageTOBeVisibleToTheUser = "Records Added Succesfully";
		} else {
			messageTOBeVisibleToTheUser = "Records Not Added";
		}
		jsp = RequestConstants.EXIT_WINDOW;
		map.put("contentJsp", jsp);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView searchIssueToOTAFU(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map map = new HashMap();
		Box box = HMSUtil.getBox(request);
		int deptId = 0;
		if (session.getAttribute("deptId") != null) {
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
			box.put("deptId", deptId);
		}

		map = storesHandlerService.searchIssueToOTAFU(box);
		jsp = RequestConstants.ISSUED_TO_OTAFU_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showIssueToOTAFUJsp(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map map = new HashMap();
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		dataMap.put("deptId", deptId);
		map = storesHandlerService.showIssueToOTAFUJsp(dataMap);
		jsp = RequestConstants.ISSUED_TO_OTAFU_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView openItemBrandWindowJspIssueToOTAFU(
			HttpServletRequest request, HttpServletResponse response)
			throws ParseException {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------

		Box box = HMSUtil.getBox(request);
		Map map = new HashMap();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		int itemId = 0;
		int rowVal = 0;
		if (request.getParameter(RequestConstants.ITEM_ID) != null) {
			itemId = Integer.parseInt(request
					.getParameter(RequestConstants.ITEM_ID));
		}

		dataMap.put("deptId", deptId);
		dataMap.put("itemId", itemId);
		map = storesHandlerService.getBrandMap(dataMap);
		if (request.getParameter("rowVal") != null) {
			rowVal = Integer.parseInt(request.getParameter("rowVal"));
		}
		map.put("rowVal", rowVal);
		jsp = RequestConstants.ITEM_BRAND_WINDOW_JSP_TO_OTAFU;
		return new ModelAndView(jsp, "map", map);
	}

	// ------------------End of Issues To Other than Airforce
	// Units-------------------------

	// -----------------------------------------Start Of Indent Soc Tracker
	// methods---------------------------------

	/*
	 * This is the method used to show Indent Soc Tracker Page
	 */
	public ModelAndView getItemListForSocTracker(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		int indentId = 0;
		try {
			if (request.getParameter(RequestConstants.INDENT_ID) != null) {
				indentId = Integer.parseInt(""
						+ request.getParameter(RequestConstants.INDENT_ID));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		dataMap.put("indentId", indentId);
		try {
			map = storesHandlerService.getItemListForSocTracker(dataMap);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = RequestConstants.AJAX_ITEM_LIST;
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);

	}

	/*
	 * This is the method used to show Indent Soc Tracker Page
	 */
	public ModelAndView getIndentListForSocTracker(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		int selectedDepartmentId = 1;
		try {
			if (request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP) != null) {
				selectedDepartmentId = Integer
						.parseInt(""
								+ request
										.getParameter(RequestConstants.DEPARTMENT_ID_TEMP));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);
		dataMap.put("selectedDepartmentId", selectedDepartmentId);
		try {
			map = storesHandlerService.getIndentListForSocTracker(dataMap);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = AJAX_INDENT_LIST;
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);

	}

	/*
	 * This is the method used to show Indent Soc Tracker Page
	 */
	public ModelAndView showIndentSocTracker(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			map = storesHandlerService.showIndentSocTracker();
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = INDENT_SOC_TRACKER;
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);

	}

	/*
	 * This is the method to get the map from store_indent_soc_tracker table
	 * based on the indentId,departmentId,nomenclature
	 */
	public ModelAndView getIndentSocTrackerDetails(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> idsMap = new HashMap<String, Object>();
		int indentId = 0;
		int toDepartmentId = 0;
		int itemId = 0;
		String nomenclature = "";

		if (request.getParameter(INDENT_ID) != null) {
			indentId = Integer.parseInt(request.getParameter(INDENT_ID));
		}
		if (request.getParameter(DEPARTMENT_ID) != null) {
			toDepartmentId = Integer.parseInt(request
					.getParameter(DEPARTMENT_ID));
		}
		if (request.getParameter(ITEM_ID) != null) {
			itemId = Integer.parseInt("" + (request.getParameter(ITEM_ID)));
		}
		idsMap.put("indentId", indentId);
		idsMap.put("toDepartmentId", toDepartmentId);
		idsMap.put("itemId", itemId);

		map = storesHandlerService.getIndentSocTracker(idsMap);
		jsp = INDENT_SOC_TRACLER_DETAILS;
		// jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView(jsp, "map", map);

	}

	/*
	 * This is the method used to add or update the Indent Soc Tracker details
	 */
	public ModelAndView addOrUpdateIndentSocTracker(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		StoreIndentSocTracker storeIndentSocTracker = new StoreIndentSocTracker();
		int indentId = 0;
		int departmentId = 1;
		int itemId = 0;
		String presentStatus = "";
		String remarks = "";
		String forwardToTc = "";
		String srNoAtAirhq = "";
		String forwardTcToAirhq = "";
		String forwardAirhqToDgafms = "";
		Date dateOfSoc = null;
		int indentSocTrackerId = 0;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String lastChgDate = (String) utilMap.get("currentDate");
		String lastChgTime = (String) utilMap.get("currentTime");
		String lastChgBy = "";
		String userName = "";
		int hospitalId = Integer.parseInt(""
				+ session.getAttribute("hospitalId"));
		String messageTOBeVisibleToTheUser = "";
		String buttonType = "";

		try {
			if (request.getParameter(NOMENCLATURE) != null) {
				itemId = Integer.parseInt(""
						+ (request.getParameter(NOMENCLATURE)));
			}
			if (request.getParameter("INDENT_SOC_TRACKER_ID") != null) {
				indentSocTrackerId = Integer.parseInt(request
						.getParameter("INDENT_SOC_TRACKER_ID"));
			}
			if (request.getParameter(INDENT_ID) != null) {
				indentId = Integer.parseInt(request.getParameter(INDENT_ID));
			}
			if (request.getParameter(DEPARTMENT_ID) != null) {
				departmentId = Integer.parseInt(request
						.getParameter(DEPARTMENT_ID));
			}
			if (request.getParameter(PRESENT_STATUS) != null) {
				presentStatus = (request.getParameter(PRESENT_STATUS));
			}
			if (request.getParameter(REMARKS) != null) {
				remarks = (request.getParameter(REMARKS));
			}
			if (request.getParameter(FORWARD_TO_TC) != null) {
				forwardToTc = (request.getParameter(FORWARD_TO_TC));
			}
			if (request.getParameter(SOC_SR_NO_AT_AIRHQ) != null) {
				srNoAtAirhq = (request.getParameter(SOC_SR_NO_AT_AIRHQ));
			}
			if (request.getParameter(FORWARD_TC_TO_AIRHQ) != null) {
				forwardTcToAirhq = (request.getParameter(FORWARD_TC_TO_AIRHQ));
			}
			if (request.getParameter(FORWARD_AIRHQ_TO_DGAFMS) != null) {
				forwardAirhqToDgafms = (request
						.getParameter(FORWARD_AIRHQ_TO_DGAFMS));
			}
			if ((request.getParameter(DATE_OF_SOC_FORWARD) != null)
					&& (!(request.getParameter(DATE_OF_SOC_FORWARD).equals("")))) {
				dateOfSoc = (HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(DATE_OF_SOC_FORWARD)));
			}
		} catch (Exception e) {
			e.printStackTrace();		}

		try {
			if (indentSocTrackerId != 0)
				storeIndentSocTracker.setId(indentSocTrackerId);
			MasDepartment department = new MasDepartment();
			department.setId(departmentId);
			storeIndentSocTracker.setDepartment(department);

			StoreIndentM storeIndentM = new StoreIndentM();
			storeIndentM.setId(indentId);
			storeIndentSocTracker.setIndent(storeIndentM);

			storeIndentSocTracker.setPresentStatus(presentStatus);
			storeIndentSocTracker.setRemarks(remarks);
			storeIndentSocTracker.setForwardToTc(forwardToTc);
			storeIndentSocTracker.setSrNoAtAirhq(srNoAtAirhq);
			storeIndentSocTracker.setForwardTcToAirhq(forwardTcToAirhq);
			storeIndentSocTracker.setForwardAirhqToDgafms(forwardAirhqToDgafms);
			storeIndentSocTracker.setDateOfSoc(dateOfSoc);

			MasStoreItem item = new MasStoreItem();
			item.setId(itemId);
			storeIndentSocTracker.setItem(item);
			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			storeIndentSocTracker.setHospital(masHospital);
			storeIndentSocTracker.setLastChgBy(userName);
			storeIndentSocTracker.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(lastChgDate));
			storeIndentSocTracker.setLastChgTime(lastChgTime);

		} catch (Exception e) {
			e.printStackTrace();
		}

		boolean flag = storesHandlerService.addOrUpdateIndentSocTracker(
				storeIndentSocTracker, indentSocTrackerId);

		jsp = RequestConstants.STORES_MESSAGE_JSP;
		jsp += ".jsp";

		if (flag) {
			messageTOBeVisibleToTheUser = "Added Successfully ";
			map.put("messageType", "success");
			map.put("contentJsp", jsp);
			map.put("url", "/hms/hms/stores?method=showIndentSocTracker");
			map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);

			return new ModelAndView("indexB", "map", map);
		} else {
			messageTOBeVisibleToTheUser = "Not Added";
			map.put("contentJsp", jsp);
			map.put("messageType", "failure");
			map.put("url", "/hms/hms/stores?method=showIndentSocTracker");
			map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);

			return new ModelAndView("indexB", "map", map);
		}

	}

	// -----------------------------------------End Of Indent Soc Tracker
	// methods---------------------------------

	// --------------------------------------------Vendor
	// Return-------------------------------------
	public ModelAndView getItemListForVendorReturn(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		String autoHint = "";
		int sectionId = 0;
		int indentId = 0;
		Map<String, Object> dataMap = new HashMap<String, Object>();
		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			if (request.getParameter("section") != null) {
				sectionId = Integer.parseInt(""
						+ (request.getParameter("section")));
			}
			if (request.getParameter("indentId") != null) {
				indentId = Integer.parseInt(""
						+ (request.getParameter("indentId")));
			}
			List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
			dataMap.put("autoHint", autoHint);
			dataMap.put("deptId", deptId);
			dataMap.put("userName", userName);
			dataMap.put("hospitalId", hospitalId);
			dataMap.put("sectionId", sectionId);
			dataMap.put("indentId", indentId);

			map = storesHandlerService.getItemListForVendorReturn(dataMap);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "resultForVendorReturn";
		return new ModelAndView(jsp, "map", map);
	}

	public void fillItemsForIndentToVendorReturn(HttpServletRequest request,
			HttpServletResponse response){
		Box box = HMSUtil.getBox(request);
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
        HttpSession session = request.getSession();
        
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		String brandName = "";
		List objectList = new ArrayList();
		try {
			if (request.getParameter("brandName") != null) {
				brandName = request.getParameter("brandName");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		dataMap.put("brandName", brandName);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.fillItemsForIndentToVendorReturn(dataMap);
		if (map.get("objectList") != null) {
			objectList = (List) map.get("objectList");
		}
		StringBuffer sb = new StringBuffer();
		try {
			for (Iterator iterator = objectList.iterator(); iterator.hasNext();) {
				Object[] object = (Object[]) iterator.next();

				sb.append("<item>");
				sb.append("<id>" + object[6] + "</id>");    // add javed
				sb.append("<pvms>" + object[0] + "</pvms>");
				sb.append("<name>" + object[1] + "</name>");
				sb.append("<au>" + object[2] + "</au>");
				sb.append("<batchno>" + object[3] + "</batchno>");
				sb.append("<expirydate>" + object[4] + "</expirydate>");
				sb.append("<BatchStockId>" + object[5] + "</BatchStockId>");
				sb.append("</item>");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}

		// return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView showVendorReturnJsp1(HttpServletRequest request,
			HttpServletResponse response) {
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Box box = HMSUtil.getBox(request);
		String returnNo = "";
		int storeFyDocumentNoId = 0;
		String buttonFlag = "";
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("deptId", deptId);
		if (request.getParameter("buttonFlag") != null) {
			buttonFlag = request.getParameter("buttonFlag");

			int pageNo = Integer.parseInt(request.getParameter("pageNo"));

			if (buttonFlag.equals("next")) {

				deptId = Integer.parseInt(request.getParameter("deptId"));
				if (request.getParameter("returnNo") != null) {
					returnNo = (String) request.getParameter("returnNo");
				}
				pageNo++;
				map.put("pageNo", pageNo);
				map.put("buttonFlag", buttonFlag);

			}
		}
		map = storesHandlerService.showVendorReturnJsp(map);

		jsp = VENDOR_RETURN_JSP;
		jsp += ".jsp";
		title = "Return From Dispensary";
		if (request.getParameter("storeFyDocumentNoId") != null) {
			storeFyDocumentNoId = Integer.parseInt(request.getParameter("storeFyDocumentNoId"));
			map.put("storeFyDocumentNoId", storeFyDocumentNoId);
		}
		map.put("returnNo", returnNo);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);

	}

	/*
	 * method to open the pop up screen after selecting the brand name and
	 * window will populate the grid with the data and user can issue the
	 * quantity there onn the screen.
	 */
	public ModelAndView showStockDetailsForVendorReturn(
			HttpServletRequest request, HttpServletResponse response) {
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String date = request.getParameter("date");
		String time = request.getParameter("time");
		int brandId = 0;
		int rowVal = 0;
		try {
			rowVal = Integer.parseInt(request.getParameter("rowVal"));
			String fromDateToDate = request.getParameter("fromDateToDate");
			brandId = Integer.parseInt(request.getParameter("brandId"));
		} catch (Exception e) {
			e.printStackTrace();
		}
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("deptId", deptId);
		map.put("brandId", brandId);
		map.put("rowVal", rowVal);
		map = storesHandlerService.showStockDetailsForVendorReturn(map);
		//
		jsp = STOCK_DETAILS_VENDOR_RETURN_JSP;
		// jsp += ".jsp";
		title = "Stock Details";
		map.put("deptId", deptId);
		map.put("date", date);
		map.put("time", time);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);

	}

	@SuppressWarnings("unchecked")
	public ModelAndView submitVendorReturnDetails(HttpServletRequest request,
			HttpServletResponse response) {
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		HttpSession session = request.getSession();
		
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> dataMap = new HashMap<String, Object>();
		List issQtyList = new ArrayList();
		List amountList = new ArrayList();
		List pvmsList = new ArrayList();
		List batchNumberList = new ArrayList();
		List brandNameList = new ArrayList();
		List expiryDateList = new ArrayList();
		List costPriceList = new ArrayList();
		List itemList = new ArrayList();
		List storeItemBatchStockIdList = new ArrayList();
		int vendorId = 0;
		int approvedById = 0;
		int returnById = 0;
		String remarks = "";
		String reason = "";
		String SONo = "";
		int itemId = 0;
		int storeGrnReturnMId = 0;
		String poNo="";
		try {
			// String itemId = request.getParameter("itemId");
			String returnNo = request.getParameter(RETURN_NO);
			String returnDate = request.getParameter(RETURN_DATE);
			String referenceNo = request.getParameter(REFERENCE_NO);
			SONo = request.getParameter("SONo");

			if (request.getParameter(VENDOR_NAME) != null) {
				vendorId = Integer.parseInt(request.getParameter(VENDOR_NAME));
			}
			
			if (request.getParameter("poNo") != null) {
				poNo = request.getParameter("poNo");
			}
			

			if (request.getParameter(APPROVED_BY) != null
					&& !(request.getParameter(APPROVED_BY).equals("0"))) {
				approvedById = Integer.parseInt(request
						.getParameter(APPROVED_BY));
			}
			if (request.getParameter("returnBy") != null) {
				returnById = Integer.parseInt(request.getParameter("returnBy"));
			}
			if (request.getParameter(REMARKS) != null) {
				remarks = request.getParameter(REMARKS);
			}
			if (request.getParameter(REASON) != null) {
				reason = request.getParameter(REASON);
			}
			if (request.getParameter("storeGrnReturnMId") != null) {
				storeGrnReturnMId = Integer.parseInt(""
						+ request.getParameter("storeGrnReturnMId"));
			}
			String date = "";
			String time = "";
			if (request.getParameter("returnDate") != null) {
				date = request.getParameter("returnDate");
			}
			if (request.getParameter("time") != null) {
				time = request.getParameter("time");
			}

			int counter = Integer.parseInt(request.getParameter("hdb"));
			for (int i = 1; i <= counter; i++) {
				String str = request.getParameter("issueQty" + i);
				if (str.length() > 0) {
					//issQtyList.add(request.getParameter("issueQty" + i));
					issQtyList.add(request.getParameter("issueQty" + i));
					pvmsList.add(itemId);
					batchNumberList.add(request.getParameter("batchNo" + i));
					brandNameList.add(request.getParameter("brandId" + i));
					expiryDateList.add(request.getParameter("expiryDate" + i));
					costPriceList.add(request.getParameter("costprice" + i));
					storeItemBatchStockIdList.add(request.getParameter("batchId" + i));
					itemList.add(request.getParameter("itemId" + i));
					amountList.add(request.getParameter("amount" + i));

				}
				
				dataMap.put("poNo", poNo);
				dataMap.put("hospitalId", hospitalId);
				dataMap.put("deptId", deptId);
				dataMap.put("returnNo", returnNo);
				dataMap.put("returnDate", returnDate);
				dataMap.put("referenceNo", referenceNo);
				dataMap.put("approvedById", approvedById);
				dataMap.put("returnById", returnById);
				dataMap.put("remarks", remarks);
				dataMap.put("reason", reason);

				dataMap.put("userName", userName);
				dataMap.put("pvmsList", pvmsList);
				dataMap.put("batchNumberList", batchNumberList);
				dataMap.put("brandNameList", brandNameList);
				dataMap.put("expiryDateList", expiryDateList);
				dataMap.put("issQtyList", issQtyList);
				dataMap.put("costPriceList", costPriceList);
				dataMap.put("amountList", amountList);
				dataMap.put("SONo", SONo);
				dataMap.put("itemList", itemList);
				dataMap.put("storeItemBatchStockIdList",
						storeItemBatchStockIdList);

				dataMap.put("vendorId", vendorId);
				System.out.println("vendorId="+vendorId);
				System.out.println("returnById="+returnById);
				dataMap.put("itemId", itemId);
				dataMap.put("userName", userName);
				dataMap.put("date", date);
				dataMap.put("time", time);
				dataMap.put("storeGrnReturnMId", storeGrnReturnMId);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		String successfullyAdded = "";
		map = storesHandlerService.submitVendorReturnDetails(dataMap);
		successfullyAdded = "" + map.get("succesfullyAdded");
		storeGrnReturnMId = Integer.parseInt("" + map.get("storeGrnReturnMId"));
		if (successfullyAdded.equals("true")) {
			message = "Stock  has been Updated Successfully !!";
		} else {
			message = "Error Ocurred Please Try Again!!";
		}
		jsp = "messageForStock.jsp";
		
		map.put("storeGrnReturnMId", storeGrnReturnMId);
		url = "/hms/hms/stores?method=showVendorReturnJsp";
		map.put("url", url);
		map.put("flag", "return");
		map.put("flagGrn", "vendorReturn");
		map.put("message", message);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showDeleteVendorReturn(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();

		String returnNo = request.getParameter("returnNo");
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("returnNo", returnNo);
		map = storesHandlerService.showDeleteVendorReturn(map);
		jsp = DELETE_VENDOR_RETURN_JSP;

		title = "Delete Return From Dispensary";

		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView deleteStockDetailsVendorReturn(
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		int returnTId = Integer.parseInt(request.getParameter("parent"));
		map.put("returnTId", returnTId);
		boolean successfullyDeleted = storesHandlerService
				.deleteStockDetailsVendorReturn(map);

		if (successfullyDeleted) {
			message = "Stock  has been Deleted Successfully !!";
		} else {
			message = "Error Ocurred Please Try Again!!";
		}
		jsp = STOCK_UPDATED_MESSAGE_JSP;
		map.put("message", message);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView searchVendorReturn(HttpServletRequest request,
			HttpServletResponse response) throws IOException {
		
		String fromDate = "";
		String toDate = "";
		int supplierId = 0;
		String includedJsp = "";
		int returnId = 0;
		String jsp = SEARCH_VENDOR_RETURN_JSP;
		jsp += ".jsp";
		int deptId = 0;
		String returnNo = "";
		int storeFyDocumentNoId = 0;
		HttpSession session = request.getSession();
		String buttonFlag = "";
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		int pageNo = 0;
		pageNo = Integer.parseInt(request.getParameter("pageNo"));
		pageNo++;
		if (request.getParameter("buttonFlag") != null) {
			buttonFlag = request.getParameter("buttonFlag");

			if (buttonFlag.equals("next")) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
				if (request.getParameter("returnNo") != null) {
					returnNo = (String) request.getParameter("returnNo");
				}
				map.put("pageNo", pageNo);
				map.put("deptId", deptId);
				map.put("buttonFlag", buttonFlag);
			}

		}
		infoMap = storesHandlerService.showVendorReturnJsp(map);

		Map<String, Object> searchFieldMap = new HashMap<String, Object>();
		try {
			if (request.getParameter(FROM_DATE) != null) {
				fromDate = request.getParameter(FROM_DATE);
			}
			if (request.getParameter(TO_DATE) != null) {
				toDate = request.getParameter(TO_DATE);
			}
			if (request.getParameter(VENDOR_RETURN_ID) != null) {
				returnId = Integer.parseInt(request
						.getParameter(VENDOR_RETURN_ID));

			}
		} catch (Exception e) {
			e.printStackTrace();		}

		searchFieldMap.put("fromDate", fromDate);
		searchFieldMap.put("toDate", toDate);
		searchFieldMap.put("returnId", returnId);
		searchFieldMap.put("pageNo", pageNo);

		if (searchFieldMap.size() != 0) {
			map = storesHandlerService.searchVendorReturn(searchFieldMap);
			includedJsp = "done";
		} else {
		}

		map.put("infoMap", infoMap);
		map.put("returnNo", returnNo);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("pageNo", pageNo);
		map.put("includedJsp", includedJsp);
		map.put("returnId", returnId);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView printVendorReturnJsp(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		int returnNo = 0;
		String period = null;
		BigDecimal[] amount = new BigDecimal[100];
		HttpSession session = request.getSession();
		requestParameters.put("DEPART", session.getAttribute("deptId"));
		try {
			if (request.getParameter(ISSUE_RETURN_ID) != null
					&& !(request.getParameter(ISSUE_RETURN_ID).equals(""))) {
				returnNo = Integer.parseInt(request
						.getParameter(ISSUE_RETURN_ID));
				requestParameters.put("RETURN_ID", returnNo);
			}
			String userHome = getServletContext().getRealPath("");	         
	        String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
	        requestParameters.put("path", imagePath);
			
			Map<String, Object> connectionMap = storesHandlerService
					.getConnectionForReport();
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport(VENDOR_RETURN_DOC_PRINT),
						requestParameters, (Connection) connectionMap
								.get("con"));
			} catch (JRException e) {
				e.printStackTrace();
			}
			
			response.setHeader("Content-Disposition", "attachment; filename="
					+ VENDOR_RETURN_DOC_PRINT + ".pdf");
			response.setContentLength(bytes.length);
			
			
			ServletOutputStream ouputStream;
			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showOPDPatientIssueFAC(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> patientMap = new HashMap<String, Object>();
		int hinId = 0;
		HttpSession session = request.getSession();
		String buttonFlag = "";
		String issueNo = "";
		String hinNo = "";
		dataMap.put("deptId", session.getAttribute("deptId"));
		dataMap.put("hospitalId", session.getAttribute("hospitalId"));
		// map=storesHandlerService.showOPDPatientIssue();

		map = storesHandlerService.showOPDPatientIssueFAC(dataMap);
		int prescriptionId = 0;
		if(request.getParameter("prescriptionId") != null){
			prescriptionId = Integer.parseInt(request.getParameter("prescriptionId"));
			patientMap = storesHandlerService.getPatientDetailsForPrescriptionFAC(prescriptionId);
			map.put("prescriptionId", prescriptionId);
			map.put("patientMap", patientMap);
		}
		if (request.getParameter("buttonFlag") != null) {
			buttonFlag = request.getParameter("buttonFlag");
			int pageNo = Integer.parseInt(request.getParameter("pageNo"));

			if (buttonFlag.equals("next")) {
				hinId = Integer.parseInt(request.getParameter("hinId"));
				hinNo = request.getParameter("hinNo");
				issueNo = request.getParameter("issueNo");
				String prescription = request
						.getParameter(RequestConstants.PRESCRIPTION_NO);
				int consultantId = Integer.parseInt(request
						.getParameter(RequestConstants.CONSULTING_DOCTOR));
				pageNo++;
				map.put("pageNo", pageNo);
				map.put("hinId", hinId);
				map.put("buttonFlag", buttonFlag);
				map.put("issueNo", issueNo);
				map.put("hinNo", hinNo);
				map.put("prescription", prescription);
				map.put("consultantId", consultantId);
			}
		}
		
		jsp = "opdPatientIssueFAC.jsp";
		title = "Ward Consumption";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}
	
	
	public ModelAndView showOPDPatientIssueCorporateFAC(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> patientMap = new HashMap<String, Object>();
		int hinId = 0;
		HttpSession session = request.getSession();
		String buttonFlag = "";
		String issueNo = "";
		String hinNo = "";
		dataMap.put("deptId", session.getAttribute("deptId"));
		dataMap.put("hospitalId", session.getAttribute("hospitalId"));
		// map=storesHandlerService.showOPDPatientIssue();

		map = storesHandlerService.showOPDPatientIssueFAC(dataMap);
		int prescriptionId = 0;
		if(request.getParameter("prescriptionId") != null){
			prescriptionId = Integer.parseInt(request.getParameter("prescriptionId"));
			patientMap = storesHandlerService.getPatientDetailsForPrescriptionFAC(prescriptionId);
			map.put("prescriptionId", prescriptionId);
			map.put("patientMap", patientMap);
		}
		if (request.getParameter("buttonFlag") != null) {
			buttonFlag = request.getParameter("buttonFlag");
			int pageNo = Integer.parseInt(request.getParameter("pageNo"));

			if (buttonFlag.equals("next")) {
				hinId = Integer.parseInt(request.getParameter("hinId"));
				hinNo = request.getParameter("hinNo");
				issueNo = request.getParameter("issueNo");
				String prescription = request
						.getParameter(RequestConstants.PRESCRIPTION_NO);
				int consultantId = Integer.parseInt(request
						.getParameter(RequestConstants.CONSULTING_DOCTOR));
				pageNo++;
				map.put("pageNo", pageNo);
				map.put("hinId", hinId);
				map.put("buttonFlag", buttonFlag);
				map.put("issueNo", issueNo);
				map.put("hinNo", hinNo);
				map.put("prescription", prescription);
				map.put("consultantId", consultantId);
			}
		}
		
		jsp = "opdPatientIssueCorporateFAC.jsp";
		title = "Ward Consumption";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}
	
	
	public ModelAndView showOPDPatientIssue(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> patientMap = new HashMap<String, Object>();
		int hinId = 0;
		HttpSession session = request.getSession();
		String buttonFlag = "";
		String issueNo = "";
		String hinNo = "";
		dataMap.put("deptId", session.getAttribute("deptId"));
		dataMap.put("hospitalId", session.getAttribute("hospitalId"));
		// map=storesHandlerService.showOPDPatientIssue();

		map = storesHandlerService.showOPDPatientIssue(dataMap);
		int prescriptionId = 0;
		/*if(request.getParameter("prescriptionId") != null){
			prescriptionId = Integer.parseInt(request.getParameter("prescriptionId"));
			patientMap = storesHandlerService.getPatientDetailsForPrescription(prescriptionId);
			map.put("prescriptionId", prescriptionId);
			map.put("patientMap", patientMap);
		}*/
		if(request.getParameter("hinId") != null){
			hinId = Integer.parseInt(request.getParameter("hinId"));
			/*patientMap = storesHandlerService.getPatientDetailsForPrescription(prescriptionId);*/
			patientMap = storesHandlerService.getPatientDetailsForPrescriptionByHin(hinId);
			map.put("hinId", hinId);
			map.put("patientMap", patientMap);
		}
		if (request.getParameter("buttonFlag") != null) {
			buttonFlag = request.getParameter("buttonFlag");
			int pageNo = Integer.parseInt(request.getParameter("pageNo"));

			if (buttonFlag.equals("next")) {
				hinId = Integer.parseInt(request.getParameter("hinId"));
				hinNo = request.getParameter("hinNo");
				issueNo = request.getParameter("issueNo");
				String prescription = request
						.getParameter(RequestConstants.PRESCRIPTION_NO);
				int consultantId = Integer.parseInt(request
						.getParameter(RequestConstants.CONSULTING_DOCTOR));
				pageNo++;
				map.put("pageNo", pageNo);
				map.put("hinId", hinId);
				map.put("buttonFlag", buttonFlag);
				map.put("issueNo", issueNo);
				map.put("hinNo", hinNo);
				map.put("prescription", prescription);
				map.put("consultantId", consultantId);
			}
		}
		jsp = OPD_PATIENT_ISSUE_JSP;
		jsp += ".jsp";
		title = "Ward Consumption";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}
	
	public ModelAndView showOPDPatientNIPIssue(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> patientMap = new HashMap<String, Object>();
		int hinId = 0;
		HttpSession session = request.getSession();
		String buttonFlag = "";
		String issueNo = "";
		String hinNo = "";
		dataMap.put("deptId", session.getAttribute("deptId"));
		dataMap.put("hospitalId", session.getAttribute("hospitalId"));
		// map=storesHandlerService.showOPDPatientIssue();

		/*map = storesHandlerService.showOPDPatientIssue(dataMap);*/
		int prescriptionId = 0;
		/*if(request.getParameter("prescriptionId") != null){
			prescriptionId = Integer.parseInt(request.getParameter("prescriptionId"));
			patientMap = storesHandlerService.getPatientDetailsForPrescription(prescriptionId);
			map.put("prescriptionId", prescriptionId);
			map.put("patientMap", patientMap);
		}*/
		if(request.getParameter("hinId") != null){
			hinId = Integer.parseInt(request.getParameter("hinId"));
			/*patientMap = storesHandlerService.getPatientDetailsForPrescription(prescriptionId);*/
			patientMap = storesHandlerService.getPatientDetailsForNIP(hinId);
			map.put("hinId", hinId);
			map.put("patientMap", patientMap);
		}
		if (request.getParameter("buttonFlag") != null) {
			buttonFlag = request.getParameter("buttonFlag");
			int pageNo = Integer.parseInt(request.getParameter("pageNo"));

			if (buttonFlag.equals("next")) {
				hinId = Integer.parseInt(request.getParameter("hinId"));
				hinNo = request.getParameter("hinNo");
				issueNo = request.getParameter("issueNo");
				String prescription = request
						.getParameter(RequestConstants.PRESCRIPTION_NO);
				int consultantId = Integer.parseInt(request
						.getParameter(RequestConstants.CONSULTING_DOCTOR));
				pageNo++;
				map.put("pageNo", pageNo);
				map.put("hinId", hinId);
				map.put("buttonFlag", buttonFlag);
				map.put("issueNo", issueNo);
				map.put("hinNo", hinNo);
				map.put("prescription", prescription);
				map.put("consultantId", consultantId);
			}
		}
		
		jsp = "opdPatientNIPApproval.jsp";
		title = "Ward Consumption";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}
	
	public ModelAndView showIPDPatientIssue(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> patientMap = new HashMap<String, Object>();
		int hinId = 0;
		HttpSession session = request.getSession();
		String buttonFlag = "";
		String issueNo = "";
		String hinNo = "";
		dataMap.put("deptId", session.getAttribute("deptId"));
		dataMap.put("hospitalId", session.getAttribute("hospitalId"));
		// map=storesHandlerService.showOPDPatientIssue();

		/*map = storesHandlerService.showOPDPatientIssue(dataMap);*/
		int wardId = 0;
		if(request.getParameter("wardId") != null){
			wardId = Integer.parseInt(request.getParameter("wardId"));
			/*patientMap = storesHandlerService.getPatientDetailsForPrescription(wardId);*/
			map.put("wardId", wardId);
			map.put("patientMap", patientMap);
		}
		if (request.getParameter("buttonFlag") != null) {
			buttonFlag = request.getParameter("buttonFlag");
			int pageNo = Integer.parseInt(request.getParameter("pageNo"));

			if (buttonFlag.equals("next")) {
				hinId = Integer.parseInt(request.getParameter("hinId"));
				hinNo = request.getParameter("hinNo");
				issueNo = request.getParameter("issueNo");
				String prescription = request
						.getParameter(RequestConstants.PRESCRIPTION_NO);
				int consultantId = Integer.parseInt(request
						.getParameter(RequestConstants.CONSULTING_DOCTOR));
				pageNo++;
				map.put("pageNo", pageNo);
				map.put("hinId", hinId);
				map.put("buttonFlag", buttonFlag);
				map.put("issueNo", issueNo);
				map.put("hinNo", hinNo);
				map.put("prescription", prescription);
				map.put("consultantId", consultantId);
			}
		}		
		jsp = "ipdPatientIssue.jsp";
		title = "Ward Consumption";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}
	
	public ModelAndView showIPDPatientIssuePartial(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> patientMap = new HashMap<String, Object>();
		int hinId = 0;
		HttpSession session = request.getSession();
		String buttonFlag = "";
		String issueNo = "";
		String hinNo = "";
		dataMap.put("deptId", session.getAttribute("deptId"));
		dataMap.put("hospitalId", session.getAttribute("hospitalId"));
		 //map=storesHandlerService.showOPDPatientIssue();

		map = storesHandlerService.showOPDPatientIssue(dataMap);
		int wardId = 0;
		if(request.getParameter("wardId") != null){
			wardId = Integer.parseInt(request.getParameter("wardId"));
			patientMap = storesHandlerService.getPatientDetailsForPrescriptionPartial(wardId);
			map.put("wardId", wardId);
			map.put("patientMap", patientMap);
		}
		if (request.getParameter("buttonFlag") != null) {
			buttonFlag = request.getParameter("buttonFlag");
			int pageNo = Integer.parseInt(request.getParameter("pageNo"));

			if (buttonFlag.equals("next")) {
				hinId = Integer.parseInt(request.getParameter("hinId"));
				hinNo = request.getParameter("hinNo");
				issueNo = request.getParameter("issueNo");
				String prescription = request
						.getParameter(RequestConstants.PRESCRIPTION_NO);
				int consultantId = Integer.parseInt(request
						.getParameter(RequestConstants.CONSULTING_DOCTOR));
				pageNo++;
				map.put("pageNo", pageNo);
				map.put("hinId", hinId);
				map.put("buttonFlag", buttonFlag);
				map.put("issueNo", issueNo);
				map.put("hinNo", hinNo);
				map.put("prescription", prescription);
				map.put("consultantId", consultantId);
			}
		}		
		jsp = "ipdPatientIssuePartial.jsp";
		title = "Ward Consumption";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}
	
	public ModelAndView showIPDPatientPartialIssue(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> patientMap = new HashMap<String, Object>();
		int hinId = 0;
		HttpSession session = request.getSession();
		String buttonFlag = "";
		String issueNo = "";
		String hinNo = "";
		dataMap.put("deptId", session.getAttribute("deptId"));
		dataMap.put("hospitalId", session.getAttribute("hospitalId"));
		// map=storesHandlerService.showOPDPatientIssue();

		map = storesHandlerService.showOPDPatientIssue(dataMap);
		int prescriptionId = 0;
		if(request.getParameter("prescriptionId") != null){
			prescriptionId = Integer.parseInt(request.getParameter("prescriptionId"));
			patientMap = storesHandlerService.getPatientDetailsForPartialPrescription(prescriptionId);
			map.put("prescriptionId", prescriptionId);
			map.put("patientMap", patientMap);
		}
		if (request.getParameter("buttonFlag") != null) {
			buttonFlag = request.getParameter("buttonFlag");
			int pageNo = Integer.parseInt(request.getParameter("pageNo"));

			if (buttonFlag.equals("next")) {
				hinId = Integer.parseInt(request.getParameter("hinId"));
				hinNo = request.getParameter("hinNo");
				issueNo = request.getParameter("issueNo");
				String prescription = request
						.getParameter(RequestConstants.PRESCRIPTION_NO);
				int consultantId = Integer.parseInt(request
						.getParameter(RequestConstants.CONSULTING_DOCTOR));
				pageNo++;
				map.put("pageNo", pageNo);
				map.put("hinId", hinId);
				map.put("buttonFlag", buttonFlag);
				map.put("issueNo", issueNo);
				map.put("hinNo", hinNo);
				map.put("prescription", prescription);
				map.put("consultantId", consultantId);
			}
		}		
		jsp = "ipdPartialPatientIssue.jsp";
		title = "Ward Consumption";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}
	
	/**
	 * Added by Priyanka
	 */
	public ModelAndView generateOpdPatientIssueReport(
			HttpServletRequest request, HttpServletResponse response) {
		int hinId = 0;
		HttpSession session = request.getSession();
		//List<Patient> hinNoList = new ArrayList<Patient>();
		//String buttonFlag = "";
		String issueNo = "";
	//	String service = "";
		//String patientName = "";
		//Date currDate = new Date();
		Map<String, Object> map = new HashMap<String, Object>();
		// map=storesHandlerService.showOPDPatientIssue();
		// map = storesHandlerService.getDBConnection();
		/*if (request.getParameter(RequestConstants.HIN_ID) != null
				&& !request.getParameter(RequestConstants.HIN_ID).equals("")) {
			hinId = Integer.parseInt(request
					.getParameter(RequestConstants.HIN_ID));
			map.put("hinId", hinId);
		}*/
		if (request.getParameter("issueNo") != null) {
			issueNo = request.getParameter("issueNo");
		}
		map.put("issueNo", issueNo);
		/*if (request.getParameter("serviceNo") != null) {
			service = request.getParameter("serviceNo");
			map.put("service", service);
		}*/
		int hospitalId=0;
		String hospitalName=null;
		if (session.getAttribute("hospitalId") != null) {
		hospitalId = (Integer) session.getAttribute("hospitalId");
			//hospitalName = storesHandlerService.getHospitalName(hospitalId1);

		}
		//map = storesHandlerService.getHinNoList(issueNo);
		int visitNo = 0;
		String serviceNo="";
		String hinNo="";
		//int hospitalId=0;
		map = storesHandlerService.getParaList(issueNo);

		if (map.get("serviceNo") != null)
			serviceNo = (String)map.get("serviceNo");

		//if (map.get("hospitalId") != null)
			//hospitalId = Integer.parseInt(map.get("hospitalId").toString());


		if (map.get("visitNo") != null)
			visitNo =  (Integer)(map.get("visitNo"));


		if (map.get("hinNo") != null)
			hinNo = (String)map.get("hinNo");

		/*Patient patient = null;
		if (hinNoList != null && hinNoList.size() > 0) {
			patient = (Patient) hinNoList.get(0);
			patientName = patient.getPFirstName() + " "
					+ patient.getPMiddleName() + " " + patient.getPLastName();
		}*/

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();

		map.put("visitNo", visitNo);
		map.put("serviceNo", serviceNo);
		map.put("hinNo", hinNo);
		map.put("hospitalId", hospitalId);
		map.put("HOS_NAME", hospitalName);
		map.put("SUBREPORT_DIR", getServletContext().getRealPath("/reports/"));
		//map.put("patientName", patientName);
		//map.put("serviceNo", service);
		map.put("issueNo", issueNo);
		map.put("deptId", session.getAttribute("deptId"));
		byte[] bytes = null;
		try {
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport("PatientPrescriptionFormatIssue"), map,
					(Connection) connectionMap.get("con"));
		} catch (JRException e) {
			e.printStackTrace();
		}
		response.setContentType("application/pdf");
		response.setContentLength(bytes.length);
		ServletOutputStream ouputStream;
		try {
			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		// return new ModelAndView("index", "map", map);
		return null;
	}

	public ModelAndView getHinForPatientIssue(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		String serviceNo = "";
		// int hinId=0;
		if (request.getParameter(SERVICE_NO) != null
				&& !(request.getParameter(SERVICE_NO).equals(""))) {
			serviceNo = request.getParameter(SERVICE_NO);
			detailsMap.put("serviceNo", serviceNo);
		}
		int pageNo = 0;
		if (request.getParameter("pageNo") != null) {
			pageNo = Integer.parseInt(request.getParameter("pageNo"));
		}

		// if( request.getParameter("hinId")!= null)
		// {
		// hinId=Integer.parseInt(request.getParameter("hinId"));
		// }

		map = storesHandlerService.getHinNoList(serviceNo);
		// map.put("hinNoList", hinNoList);
		// map.put("pageNo", pageNo);
		// map.put("hinId", hinId);

		jsp = POPULATE_HIN_FOR_PATIENT_ISSUE;
		return new ModelAndView(jsp, "map", map);

	}
	public ModelAndView showOPDPatientIssueGridFAC(HttpServletRequest request,HttpServletResponse response) {
		/*
		 * Department id for dispensary store is hardcoded which in future will
		 * come from login
		 */
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		int deptId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		String buttonFlag = "";
		String issueNo = "";
		int hinId = 0;
		String hinNo = "";
		String prescription = "";
		int consultantId = 0;
		String date="";
		String time="";
		String serviceNo="";
		int pageNo = Integer.parseInt(request.getParameter("pageNo"));
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");
		if (request.getParameter(RequestConstants.HIN_ID) != null && !request.getParameter(RequestConstants.HIN_ID).equals("")) {
			hinId = Integer.parseInt(request.getParameter(RequestConstants.HIN_ID));
		}
		int prescriptionId = 0;
		if(request.getParameter("prescriptionId") != null){
			prescriptionId = Integer.parseInt(request.getParameter("prescriptionId"));
			map.put("prescriptionId", prescriptionId);
		}
		if(request.getParameter("serviceNo")!=null){
			serviceNo =request.getParameter("serviceNo");
			map.put("serviceNo",serviceNo);
		}

		buttonFlag = request.getParameter("buttonFlag");
		if (!request.getParameter("buttonFlag").equals("")
				&& buttonFlag != null) {
			if (buttonFlag.equals("next")) {
				buttonFlag = request.getParameter("buttonFlag");
				issueNo = request.getParameter("issueNo");
				hinNo = request.getParameter(RequestConstants.HIN_NO);
				prescription = request.getParameter("prescription");
				consultantId = Integer.parseInt(request.getParameter("consultantId"));
				map.put("buttonFlag", buttonFlag);
				map.put("issueNo", issueNo);
				map.put("hinNo", hinNo);
				map.put("prescription", prescription);
				map.put("consultantId", consultantId);
			}
		}
		map.put("pageNo", pageNo);
		map.put("deptId", deptId);
		map.put("hinId", hinId);
		map.put("hospitalId",hospitalId);
		map = storesHandlerService.showOPDPatientIssueGridFAC(map);
		jsp = "opdPatientIssueGridFAC";
		title = "Patient Issue";
		map.put("date", date);
		map.put("time", time);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);

	}
	
	public ModelAndView submitOPDPatientStockDetailsFAC(HttpServletRequest request, HttpServletResponse response)
	{
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List issQtyList = new ArrayList();
		List amountList = new ArrayList();
		List pvmsList = new ArrayList();
		List batchNumberList = new ArrayList();
//		List<Character> nisSatusList = new ArrayList<Character>();
		List brandNameList = new ArrayList();
		List expiryDateList = new ArrayList();
		List costPriceList = new ArrayList();
		/*List lpItem=new ArrayList();
		List lpItemQty=new ArrayList();
		List lotOut=new ArrayList();
		List lotQty=new ArrayList()*/;
		List<Integer> itemIdList = new ArrayList<Integer>();
		List<Integer> frequencyList = new ArrayList<Integer>();
		List<String> dosageList = new ArrayList<String>();
		List<String> ctList = new ArrayList<String>();
		List<Integer> noOfDaysList = new ArrayList<Integer>();
		List<String> routeList = new ArrayList<String>();
		List<Integer> totalList = new ArrayList<Integer>();
		List<String> remarksList = new ArrayList<String>();
		
		List storeItemBatchStockIdList = new ArrayList();
		int deptId = Integer.parseInt(request.getParameter("deptId"));
		int hinId = Integer.parseInt(request.getParameter("hinId"));
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		//System.out.println("Visit:--->"+visitId);
		String serviceNo = request.getParameter("serviceNo");
		String visitNumber=request.getParameter("visitNumber");
		String hinNoS=request.getParameter("hinNoS");
		String serviceNoS=request.getParameter("serviceNoS");
		String specialty=request.getParameter("specialty");


		int empId = Integer.parseInt(request.getParameter("empId"));
		int userId = ((Users) session.getAttribute("users")).getId();
		String prescription = request.getParameter("prescription");
		String buttonFlag = request.getParameter("buttonFlag");
		String date = request.getParameter("date1");
		String time = request.getParameter("time1");

		int hospitalId = (Integer) session.getAttribute("hospitalId");
		String userName = (String) session.getAttribute("userName");
		int storeFyDocumentNoId = Integer.parseInt(request.getParameter("storeFyDocumentNoId"));
		String opdIssueno = request.getParameter("opdIssueno");


		int counter = Integer.parseInt(request.getParameter("counter"));
		int patientPrescriptionDtId = 0;
	/*	if(request.getParameter("patientPrescriptionDtId") != null && !(request.getParameter("patientPrescriptionDtId")).equals("")){
			patientPrescriptionDtId = Integer.parseInt(request.getParameter("patientPrescriptionDtId"));
		}*/
		int patientPrescriptionId = 0;
		if(request.getParameter("patientPrescriptionId") != null && !(request.getParameter("patientPrescriptionId")).equals("")){
			patientPrescriptionId = Integer.parseInt(request.getParameter("patientPrescriptionId"));
		}
		List<Integer> prescriptionDtIdList  = new ArrayList<Integer>();
		for (int i = 1; i <= counter; i++)
		{
			if(request.getParameter("itemId"+i)==null)
				  continue;
			
			if(request.getParameter("patientPrescriptionDtId" + i)!=null && !request.getParameter("patientPrescriptionDtId" + i).equals("")){
				prescriptionDtIdList.add(Integer.parseInt(request.getParameter("patientPrescriptionDtId" + i)));
			}
			
			int frequencyId = 0;
			if(request.getParameter("frequencyName" + i) != null && !request.getParameter("frequencyName" + i).equals("")){
				frequencyId = Integer.parseInt(request.getParameter("frequencyName" + i));
				frequencyList.add(frequencyId);
			}else {
				frequencyList.add(0);
			}
			if(request.getParameter("ct" + i) != null){
				ctList.add("y");
			}	else {
				ctList.add("n");
			}

			String route = "";
			if(request.getParameter("route" + i) != null && !request.getParameter("route" +i).equals("")){
				route = request.getParameter("route" + i);
				routeList.add(route);
			}	else {
				routeList.add("");
			}
			String dosage = "";
			if(request.getParameter("strength" + i) != null && !request.getParameter("strength" + i).equals("")){
				dosage = request.getParameter("strength" + i);

				dosageList.add(dosage);
			}else{
				dosageList.add("");
			}
			if(request.getParameter("noOfDays" + i) != null && !request.getParameter("noOfDays" + i).equals("")){
				int noOfdoges=1;
				if(dosage!=null && !dosage.equals("")){
					noOfdoges=Integer.parseInt(dosage.trim());
				}
				int noOfDays = Integer.parseInt(request.getParameter("noOfDays" + i));
				int total = noOfDays * frequencyId*noOfdoges;

				totalList.add(total);
				noOfDaysList.add(noOfDays);
			}else {
				noOfDaysList.add(0);
			}
			String remarks = "";
			if(request.getParameter("remarks" + i) != null && !request.getParameter("remarks" + i).equals("")){
				remarks = request.getParameter("remarks" + i);
				remarksList.add(remarks);
			}else {
				remarksList.add("");
			}

			
			
			int itemId = Integer.parseInt(request.getParameter("itemId"+i));
			itemIdList.add(itemId);
			batchNumberList.add(request.getParameter("batchNo" + i));
			/*if(request.getParameter("nis" + i)!=null){
				nisSatusList.add('y');
			}else{nisSatusList.add('n');}*/
			brandNameList.add(request.getParameter("brandId" + i));
			expiryDateList.add(request.getParameter("expiryDate" + i));
			costPriceList.add(request.getParameter("costPrice" + i));
			//if(request.getParameter("qtyIssued" + i)!=null && request.getParameter("qtyIssued" + i)!="")
			issQtyList.add(request.getParameter("qtyIssued" + i));
			//else
				//issQtyList.add(0);
			//if((request.getParameter("lp" + i)==null && request.getParameter("lotOut" + i)==null)|| deptId==24){
				//issQtyList.add(request.getParameter("qtyIssued" + i));
			// pvmsList.add(itemId);
			//}
			/*else if(request.getParameter("lp" + i)!=null){
				lpItem.add(request.getParameter("lp" +i));
				lpItemQty.add(request.getParameter("lpQty" +i));
			}
			else if(request.getParameter("lotOut" + i)!=null){
				lotOut.add(request.getParameter("lotOut" + i));
				lotQty.add(request.getParameter("lotQty" + i));
			}*/
		}
		/*map.put("lpItem",lpItem);
		map.put("lpItemQty",lpItemQty);
		map.put("lotOut",lotOut);
		map.put("lotQty",lotQty);*/
		map.put("deptId", deptId);
		map.put("hospitalId", hospitalId);
		map.put("date", date);
		map.put("time", time);
		//map.put("buttonFlag", buttonFlag);
		map.put("userName", userName);
		map.put("userId", userId);
		// map.put("pvmsList", pvmsList);
		map.put("prescriptionDtIdList", prescriptionDtIdList);
		map.put("frequencyList", frequencyList);
		map.put("ctList", ctList);
		map.put("dosageList", dosageList);
		map.put("routeList", routeList);
		map.put("remarksList", remarksList);
		map.put("totalList", totalList);
		map.put("noOfDaysList", noOfDaysList);
		map.put("itemIdList", itemIdList);
		map.put("batchNumberList", batchNumberList);
//		map.put("nisSatusList", nisSatusList);
		map.put("brandNameList", brandNameList);
		map.put("expiryDateList", expiryDateList);
		map.put("issQtyList", issQtyList);
		map.put("costPriceList", costPriceList);
		//map.put("amountList", amountList);
		//map.put("storeItemBatchStockIdList", storeItemBatchStockIdList);
		map.put("storeFyDocumentNoId", storeFyDocumentNoId);
		map.put("opdIssueno", opdIssueno);
		map.put("hinId", hinId);
		map.put("empId", empId);
		map.put("prescription", prescription);
		map.put("patientPrescriptionDtId", patientPrescriptionDtId);
		map.put("patientPrescriptionId", patientPrescriptionId);
		map.put("serviceNo", serviceNo);
		map.put("visitNumber",visitNumber);
		map.put("serviceNoS",serviceNoS);
		map.put("hinNoS",hinNoS);
		map.put("specialty", specialty);
		map.put("userId", userId);
		map.putAll(storesHandlerService.submitOPDPatientStockDetailsFAC(map));
		boolean successfullyAdded = (Boolean)map.get("flag");
		if (successfullyAdded) {
			 message = "Data saved Successfully !!";

		} else {
			message = "Data not saved.";
		}

		Date currentDate = new Date();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		Map<String, Object> mapForDs = new HashMap<String, Object>();
		mapForDs.put("deptId", deptId);
		mapForDs.put("currentDate", currentDate);
		mapForDs.put("hospitalId", hospitalId);
		/*detailsMap = opdHandlerService.getPrescriptionList(mapForDs);
		detailsMap=opdHandlerService.getPrescriptionDetails(mapForDs);*/
		String jsp = "opdPatientIssuePringFAC";
		jsp += ".jsp";
		map.put("deptId", deptId);
		map.put("visitId",visitId);
		map.put("hospitalId", hospitalId);
		map.put("userName", userName);
		map.put("detailsMap", detailsMap);
		map.put("message", message);
		map.put("contentJsp", jsp);
		map.put("url", "/hms/hms/opd?method=showPendingPrescriptionJspFAC");
    	return new ModelAndView("indexB", "map", map);
	}
	
	public ModelAndView showOPDPatientIssueGrid(HttpServletRequest request,HttpServletResponse response) {
		/*
		 * Department id for dispensary store is hardcoded which in future will
		 * come from login
		 */
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		int deptId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		String buttonFlag = "";
		String issueNo = "";
		int hinId = 0;
		String hinNo = "";
		String prescription = "";
		int consultantId = 0;
		String date="";
		String time="";
		String serviceNo="";
		int pageNo = Integer.parseInt(request.getParameter("pageNo"));
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");
		if (request.getParameter(RequestConstants.HIN_ID) != null && !request.getParameter(RequestConstants.HIN_ID).equals("")) {
			hinId = Integer.parseInt(request.getParameter(RequestConstants.HIN_ID));
		}
		int prescriptionId = 0;
		if(request.getParameter("prescriptionId") != null){
			prescriptionId = Integer.parseInt(request.getParameter("prescriptionId"));
			map.put("prescriptionId", prescriptionId);
		}
		if(request.getParameter("serviceNo")!=null){
			serviceNo =request.getParameter("serviceNo");
			map.put("serviceNo",serviceNo);
		}

		buttonFlag = request.getParameter("buttonFlag");
		if (!request.getParameter("buttonFlag").equals("")
				&& buttonFlag != null) {
			if (buttonFlag.equals("next")) {
				buttonFlag = request.getParameter("buttonFlag");
				issueNo = request.getParameter("issueNo");
				hinNo = request.getParameter(RequestConstants.HIN_NO);
				prescription = request.getParameter("prescription");
				consultantId = Integer.parseInt(request.getParameter("consultantId"));
				map.put("buttonFlag", buttonFlag);
				map.put("issueNo", issueNo);
				map.put("hinNo", hinNo);
				map.put("prescription", prescription);
				map.put("consultantId", consultantId);
			}
		}
		map.put("pageNo", pageNo);
		map.put("deptId", deptId);
		map.put("hinId", hinId);
		map.put("hospitalId",hospitalId);
		map = storesHandlerService.showOPDPatientIssueGrid(map);
		jsp = OPD_PATIENT_ISSUE_GRID;
		title = "Patient Issue";
		map.put("date", date);
		map.put("time", time);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);

	}
	
	public ModelAndView showOPDPatientIssueGridByHin(HttpServletRequest request,HttpServletResponse response) {
		/*
		 * Department id for dispensary store is hardcoded which in future will
		 * come from login
		 */
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		int deptId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		String buttonFlag = "";
		String issueNo = "";
		int hinId = 0;
		String hinNo = "";
		String prescription = "";
		int consultantId = 0;
		String date="";
		String time="";
		String serviceNo="";
		int pageNo = Integer.parseInt(request.getParameter("pageNo"));
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");
		if (request.getParameter(RequestConstants.HIN_ID) != null && !request.getParameter(RequestConstants.HIN_ID).equals("")) {
			hinId = Integer.parseInt(request.getParameter(RequestConstants.HIN_ID));
		}
		int prescriptionId = 0;
		if(request.getParameter("prescriptionId") != null){
			prescriptionId = Integer.parseInt(request.getParameter("prescriptionId"));
			map.put("prescriptionId", prescriptionId);
		}
		if(request.getParameter("serviceNo")!=null){
			serviceNo =request.getParameter("serviceNo");
			map.put("serviceNo",serviceNo);
		}

		buttonFlag = request.getParameter("buttonFlag");
		if (!request.getParameter("buttonFlag").equals("")
				&& buttonFlag != null) {
			if (buttonFlag.equals("next")) {
				buttonFlag = request.getParameter("buttonFlag");
				issueNo = request.getParameter("issueNo");
				hinNo = request.getParameter(RequestConstants.HIN_NO);
				prescription = request.getParameter("prescription");
				consultantId = Integer.parseInt(request.getParameter("consultantId"));
				map.put("buttonFlag", buttonFlag);
				map.put("issueNo", issueNo);
				map.put("hinNo", hinNo);
				map.put("prescription", prescription);
				map.put("consultantId", consultantId);
			}
		}
		map.put("pageNo", pageNo);
		map.put("deptId", deptId);
		map.put("hinId", hinId);
		map.put("hospitalId",hospitalId);
		map = storesHandlerService.showOPDPatientIssueGridByHin(map);
		jsp = OPD_PATIENT_ISSUE_GRID;
		title = "Patient Issue";
		map.put("date", date);
		map.put("time", time);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);

	}
	
	public ModelAndView showOPDPatientNIPApprovalGrid(HttpServletRequest request,HttpServletResponse response) {
		/*
		 * Department id for dispensary store is hardcoded which in future will
		 * come from login
		 */
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		int deptId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		String buttonFlag = "";
		String issueNo = "";
		int hinId = 0;
		String hinNo = "";
		String prescription = "";
		int consultantId = 0;
		String date="";
		String time="";
		String serviceNo="";
		int pageNo = Integer.parseInt(request.getParameter("pageNo"));
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");
		if (request.getParameter(RequestConstants.HIN_ID) != null && !request.getParameter(RequestConstants.HIN_ID).equals("")) {
			hinId = Integer.parseInt(request.getParameter(RequestConstants.HIN_ID));
		}
		int prescriptionId = 0;
		if(request.getParameter("prescriptionId") != null){
			prescriptionId = Integer.parseInt(request.getParameter("prescriptionId"));
			map.put("prescriptionId", prescriptionId);
		}
		if(request.getParameter("serviceNo")!=null){
			serviceNo =request.getParameter("serviceNo");
			map.put("serviceNo",serviceNo);
		}

		buttonFlag = request.getParameter("buttonFlag");
		if (!request.getParameter("buttonFlag").equals("")
				&& buttonFlag != null) {
			if (buttonFlag.equals("next")) {
				buttonFlag = request.getParameter("buttonFlag");
				issueNo = request.getParameter("issueNo");
				hinNo = request.getParameter(RequestConstants.HIN_NO);
				prescription = request.getParameter("prescription");
				consultantId = Integer.parseInt(request.getParameter("consultantId"));
				map.put("buttonFlag", buttonFlag);
				map.put("issueNo", issueNo);
				map.put("hinNo", hinNo);
				map.put("prescription", prescription);
				map.put("consultantId", consultantId);
			}
		}
		map.put("pageNo", pageNo);
		map.put("deptId", deptId);
		map.put("hinId", hinId);
		map.put("hospitalId",hospitalId);
		map = storesHandlerService.showOPDPatientNIPApprovalGrid(map);
		jsp = "opdPatientNIPApprovalGrid";
		title = "Patient Issue";
		map.put("date", date);
		map.put("time", time);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);

	}
	
	public ModelAndView showIPDPatientIssueGrid(HttpServletRequest request,HttpServletResponse response) {
		/*
		 * Department id for dispensary store is hardcoded which in future will
		 * come from login
		 */
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		int deptId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		String buttonFlag = "";
		String issueNo = "";
		int hinId = 0;
		String hinNo = "";
		String prescription = "";
		int consultantId = 0;
		String date="";
		String time="";
		String serviceNo="";
		int pageNo = Integer.parseInt(request.getParameter("pageNo"));
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");
		if (request.getParameter(RequestConstants.HIN_ID) != null && !request.getParameter(RequestConstants.HIN_ID).equals("")) {
			hinId = Integer.parseInt(request.getParameter(RequestConstants.HIN_ID));
		}
		int wardId = 0;
		if(request.getParameter("wardId") != null){
			wardId = Integer.parseInt(request.getParameter("wardId"));
			map.put("wardId", wardId);
		}
		if(request.getParameter("serviceNo")!=null){
			serviceNo =request.getParameter("serviceNo");
			map.put("serviceNo",serviceNo);
		}
		
		buttonFlag = request.getParameter("buttonFlag");
		if (!request.getParameter("buttonFlag").equals("")
				&& buttonFlag != null) {
			if (buttonFlag.equals("next")) {
				buttonFlag = request.getParameter("buttonFlag");
				issueNo = request.getParameter("issueNo");
				hinNo = request.getParameter(RequestConstants.HIN_NO);
				prescription = request.getParameter("prescription");
				consultantId = Integer.parseInt(request.getParameter("consultantId"));
				map.put("buttonFlag", buttonFlag);
				map.put("issueNo", issueNo);
				map.put("hinNo", hinNo);
				map.put("prescription", prescription);
				map.put("consultantId", consultantId);
			}
		}
		map.put("pageNo", pageNo);
		map.put("deptId", deptId);
		map.put("hinId", hinId);
		map.put("hospitalId",hospitalId);
		map = storesHandlerService.showOPDPatientIssueGrid(map);
		jsp = "ipdPatientIssueGrid";
		title = "Patient Issue";
		map.put("date", date);
		map.put("time", time);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
		
	}
	
	public ModelAndView showIPDPatientIssueGridPartial(HttpServletRequest request,HttpServletResponse response) {
		/*
		 * Department id for dispensary store is hardcoded which in future will
		 * come from login
		 */
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		int deptId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		String buttonFlag = "";
		String issueNo = "";
		int hinId = 0;
		String hinNo = "";
		String prescription = "";
		int consultantId = 0;
		String date="";
		String time="";
		String serviceNo="";
		int pageNo = Integer.parseInt(request.getParameter("pageNo"));
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");
		if (request.getParameter(RequestConstants.HIN_ID) != null && !request.getParameter(RequestConstants.HIN_ID).equals("")) {
			hinId = Integer.parseInt(request.getParameter(RequestConstants.HIN_ID));
		}
		int wardId = 0;
		if(request.getParameter("wardId") != null){
			wardId = Integer.parseInt(request.getParameter("wardId"));
			map.put("wardId", wardId);
		}
		if(request.getParameter("serviceNo")!=null){
			serviceNo =request.getParameter("serviceNo");
			map.put("serviceNo",serviceNo);
		}
		
		buttonFlag = request.getParameter("buttonFlag");
		if (!request.getParameter("buttonFlag").equals("")
				&& buttonFlag != null) {
			if (buttonFlag.equals("next")) {
				buttonFlag = request.getParameter("buttonFlag");
				issueNo = request.getParameter("issueNo");
				hinNo = request.getParameter(RequestConstants.HIN_NO);
				prescription = request.getParameter("prescription");
				consultantId = Integer.parseInt(request.getParameter("consultantId"));
				map.put("buttonFlag", buttonFlag);
				map.put("issueNo", issueNo);
				map.put("hinNo", hinNo);
				map.put("prescription", prescription);
				map.put("consultantId", consultantId);
			}
		}
		map.put("pageNo", pageNo);
		map.put("deptId", deptId);
		map.put("hinId", hinId);
		map.put("hospitalId",hospitalId);
		map = storesHandlerService.showOPDPatientIssueGridPartial(map);
		jsp = "ipdPatientIssueGridPartial";
		title = "Patient Issue";
		map.put("date", date);
		map.put("time", time);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
		
	}
	
	public ModelAndView showIPDPatientIssueGridPatientWise(HttpServletRequest request,HttpServletResponse response) {
		/*
		 * Department id for dispensary store is hardcoded which in future will
		 * come from login
		 */
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		int deptId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		String buttonFlag = "";
		String issueNo = "";
		int hinId = 0;
		String hinNo = "";
		String prescription = "";
		int consultantId = 0;
		String date="";
		String time="";
		String serviceNo="";
		
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");
		if (request.getParameter(RequestConstants.HIN_ID) != null && !request.getParameter(RequestConstants.HIN_ID).equals("")) {
			hinId = Integer.parseInt(request.getParameter(RequestConstants.HIN_ID));
		}
		int wardId = 0;
		if(request.getParameter("wardId") != null){
			wardId = Integer.parseInt(request.getParameter("wardId"));
			map.put("wardId", wardId);
		}
		int itemId = 0;
		if(request.getParameter("itemId") != null){
			itemId = Integer.parseInt(request.getParameter("itemId"));
			map.put("itemId", itemId);
		}
		if(request.getParameter("serviceNo")!=null){
			serviceNo =request.getParameter("serviceNo");
			map.put("serviceNo",serviceNo);
		}
		
		/*buttonFlag = request.getParameter("buttonFlag");
		if (!request.getParameter("buttonFlag").equals("")
				&& buttonFlag != null) {
			if (buttonFlag.equals("next")) {
				buttonFlag = request.getParameter("buttonFlag");
				issueNo = request.getParameter("issueNo");
				hinNo = request.getParameter(RequestConstants.HIN_NO);
				prescription = request.getParameter("prescription");
				consultantId = Integer.parseInt(request.getParameter("consultantId"));
				map.put("buttonFlag", buttonFlag);
				map.put("issueNo", issueNo);
				map.put("hinNo", hinNo);
				map.put("prescription", prescription);
				map.put("consultantId", consultantId);
			}
		}*/
		
		map.put("deptId", deptId);
		map.put("hinId", hinId);
		map.put("hospitalId",hospitalId);
		map = storesHandlerService.showIPDPatientIssueGridPatientWise(map);
		jsp = "ipdPatientIssueGridPatientWise";
		title = "Patient Issue";
		map.put("date", date);
		map.put("time", time);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
		
	}
	
	public ModelAndView showIPDPartialPatientIssueGrid(HttpServletRequest request,HttpServletResponse response) {
		/*
		 * Department id for dispensary store is hardcoded which in future will
		 * come from login
		 */
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		int deptId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		String buttonFlag = "";
		String issueNo = "";
		int hinId = 0;
		String hinNo = "";
		String prescription = "";
		int consultantId = 0;
		String date="";
		String time="";
		String serviceNo="";
		int pageNo = Integer.parseInt(request.getParameter("pageNo"));
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");
		if (request.getParameter(RequestConstants.HIN_ID) != null && !request.getParameter(RequestConstants.HIN_ID).equals("")) {
			hinId = Integer.parseInt(request.getParameter(RequestConstants.HIN_ID));
		}
		int prescriptionId = 0;
		if(request.getParameter("prescriptionId") != null){
			prescriptionId = Integer.parseInt(request.getParameter("prescriptionId"));
			map.put("prescriptionId", prescriptionId);
		}
		if(request.getParameter("serviceNo")!=null){
			serviceNo =request.getParameter("serviceNo");
			map.put("serviceNo",serviceNo);
		}
		
		buttonFlag = request.getParameter("buttonFlag");
		if (!request.getParameter("buttonFlag").equals("")
				&& buttonFlag != null) {
			if (buttonFlag.equals("next")) {
				buttonFlag = request.getParameter("buttonFlag");
				issueNo = request.getParameter("issueNo");
				hinNo = request.getParameter(RequestConstants.HIN_NO);
				prescription = request.getParameter("prescription");
				consultantId = Integer.parseInt(request.getParameter("consultantId"));
				map.put("buttonFlag", buttonFlag);
				map.put("issueNo", issueNo);
				map.put("hinNo", hinNo);
				map.put("prescription", prescription);
				map.put("consultantId", consultantId);
			}
		}
		map.put("pageNo", pageNo);
		map.put("deptId", deptId);
		map.put("hinId", hinId);
		map.put("hospitalId",hospitalId);
		map = storesHandlerService.showIPDPartialPatientIssueGrid(map);
		jsp = "ipdPartialPatientIssueGrid";
		title = "Patient Issue";
		map.put("date", date);
		map.put("time", time);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
		
	}
	
	

	public ModelAndView showOPDStockDetailsJsp(HttpServletRequest request,HttpServletResponse response)
	{
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		int deptId = Integer.parseInt(request.getParameter("deptId"));

		int rowVal = Integer.parseInt(request.getParameter("rowVal"));

		int itemId = Integer.parseInt(request.getParameter("itemId"));
		int qtyPrescription=0;
		if((request.getParameter("qtyPrescription")!=null) &&(!request.getParameter("qtyPrescription").equals("")))
		qtyPrescription = Integer.parseInt(request.getParameter("qtyPrescription"));
		String loanOut="";

		loanOut=request.getParameter("LoanOut");


		String serviceNo = box.getString("serviceNo");

		String buttonFlag = request.getParameter("buttonFlag");
		// int wardIssueNo=Integer.parseInt(request.getParameter("ipissueno"));
		// int
		// storeFyDocumentNoId=Integer.parseInt(request.getParameter("storeFyDocumentNoId"));
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("deptId", deptId);
		map.put("itemId", itemId);
		map.put("rowVal", rowVal);
		map.put("buttonFlag", buttonFlag);
		map.put("loanOut",loanOut);
		map = storesHandlerService.showOPDStockDetailsJsp(map);
		map.put("serviceNo", serviceNo);
		map.put("qtyPrescription",qtyPrescription);
		if(loanOut.equalsIgnoreCase("y") || deptId==24 ){
			jsp=OPD_PATIENT_STOCK_DETAILS_WITH_LOAN_OUT;
		}else{
			jsp = OPD_PATIENT_STOCK_DETAILS;
		}
		// jsp += ".jsp";
		title = "OPD Stock Details";
		// map.put("deptId", deptId);

		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}
//ashutosh bigin




	public ModelAndView submitDirectPatientIssue(HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		String changedTime = "";
		Date changedDate = null;
		String userName = "";

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		List issQtyList = new ArrayList();
		List amountList = new ArrayList();
		List pvmsList = new ArrayList();
		List batchNumberList = new ArrayList();
		List brandNameList = new ArrayList();
		List expiryDateList = new ArrayList();
		List costPriceList = new ArrayList();
		List lpItem=new ArrayList();
		List lpItemQty=new ArrayList();
		List lotOut=new ArrayList();
		List lotQty=new ArrayList();
		List<Integer> itemIdList = new ArrayList<Integer>();

		HttpSession session = request.getSession();
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");	

			changedDate=HMSUtil.dateFormatterDDMMYYYY((String)HMSUtil.getCurrentDateAndTime().get("currentDate"));

			changedTime=(String)HMSUtil.getCurrentDateAndTime().get("currentTime");
		
		
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		Map<String, Object> mapForDSPro = new HashMap<String, Object>();
	
		int hinId = Integer.parseInt(request.getParameter("hinIdP"));
		int departmentId = Integer.parseInt(request.getParameter("deptId"));
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		String DIAGNOSIS=request.getParameter("DIAGNOSIS");




		int hospitalId = Integer.parseInt(request.getParameter("hospitalId"));
		int empIdCurrnet = 0;
		empIdCurrnet = (Integer) session.getAttribute("userId");
		// details captured for opd patient details table
		int empId = 0;
		if (request.getParameter("empId") != null
				&& !request.getParameter("empId").equals("")) {
			empId = Integer.parseInt(request.getParameter("empId"));
		}
		//empIdCurrnet = (Integer) session.getAttribute("userId");

		int visitNo = 0;

		List<String> pvmsNoList = new ArrayList<String>();
		List<Integer> frequencyList = new ArrayList<Integer>();
		List<String> dosageList = new ArrayList<String>();
		List<String> remarksList = new ArrayList<String>();
		List<String> typeLeftRightList = new ArrayList<String>();
		List<String> instructionList = new ArrayList<String>();
		List<Integer> totalList = new ArrayList<Integer>();
		List<Integer> noOfDaysList = new ArrayList<Integer>();
		List<String> routeList = new ArrayList<String>();
		List<String> lpList=new 	ArrayList<String>();
		List<Integer> lpQty=new ArrayList<Integer>();
		List<String> loList=new ArrayList<String>();
		List<Integer> loQt=new ArrayList<Integer>();
		int hdb = 1;
		if (Integer.parseInt(request.getParameter("hdb")) != 1) {
			hdb = Integer.parseInt(request.getParameter("hdb"));
		}
		String[] pvmsArr = new String[hdb];
		String otherMedicine = "";
		List<String> otherMedicineList = new ArrayList<String>();
		List<String> ctList = new ArrayList<String>();
		String consultationDate = request.getParameter("consultationDate");
		String consultationTime = request.getParameter("consultationTime");
		String specialty=request.getParameter("specialty");

		//List injCategoryList = new ArrayList();
		int j = 1;
		for (int i = 0; i < hdb; i++) {
			String pvmsNo = "";
			if (request.getParameter("nomenclature" + j) != null && !request.getParameter("nomenclature" + j).equals("")) {

				String nomenclature = request.getParameter("nomenclature" + j);
				int index1 = nomenclature.lastIndexOf("[");
				int index2 = nomenclature.lastIndexOf("]");
				index1++;
				pvmsNo = nomenclature.substring(index1, index2);
				if (!pvmsNo.equals("")) {
					pvmsArr[i] = pvmsNo;
					otherMedicineList.add(null);
				}
			}else
			{
				if(request.getParameter("otherMedicine"+ j) != null && !request.getParameter("otherMedicine"+ j).equals("")){
					otherMedicine = request.getParameter("otherMedicine"+ j);
					otherMedicineList.add(otherMedicine);
				}
			}
			
			int frequencyId = 0;
			if(request.getParameter("frequencyName" + j) != null && !request.getParameter("frequencyName" + j).equals("")){
				frequencyId = Integer.parseInt(request.getParameter("frequencyName" + j));
				frequencyList.add(frequencyId);
			}else {
				frequencyList.add(0);
			}
			if(request.getParameter("ct" + j) != null){
				ctList.add("y");
			}	else {
				ctList.add("n");
			}

			String route = "";
			if(request.getParameter("route" + j) != null && !request.getParameter("route" + j).equals("")){
				route = request.getParameter("route" + j);
				routeList.add(route);
			}	else {
				routeList.add("");
			}
			String dosage = "";
			if(request.getParameter("strength" + j) != null && !request.getParameter("strength" + j).equals("")){
				dosage = request.getParameter("strength" + j);

				dosageList.add(dosage);
			}else{
				dosageList.add("");
			}
			if(request.getParameter("noOfDays" + j) != null && !request.getParameter("noOfDays" + j).equals("")){
				int noOfdoges=1;
				if(dosage!=null && !dosage.equals("")){
					noOfdoges=Integer.parseInt(dosage.trim());
				}
				int noOfDays = Integer.parseInt(request.getParameter("noOfDays" + j));
				int total = noOfDays * frequencyId*noOfdoges;

				totalList.add(total);
				noOfDaysList.add(noOfDays);
			}else {
				noOfDaysList.add(0);
			}
			if(request.getParameter("lotOut"+j)!=null && !request.getParameter("lotOut"+j).equals("")){
				String loStatus=request.getParameter("lotOut"+j);
				loList.add(loStatus);
			}else{
				String loStatus="notLo";
				loList.add(loStatus);
			}
			if(request.getParameter("lotQty"+j)!=null && !request.getParameter("lotQty"+j).equals("")){
				int loQty=Integer.parseInt(request.getParameter("lotQty"+j).trim());
				loQt.add(loQty);
			}else{
				int loQty=0;
				loQt.add(loQty);
			}
			if(request.getParameter("lp"+j)!=null && !request.getParameter("lp"+j).equals("")){
				String lpStatus=request.getParameter("lp"+j);
				lpList.add(lpStatus);
			}else{
				String lpStatus="notLp";
				lpList.add(lpStatus);
			}
			if(request.getParameter("lpQty"+j)!=null && !request.getParameter("lpQty"+j).equals("")){
				try{
					int lpQt=Integer.parseInt(request.getParameter("lpQty"+j).trim());
				lpQty.add(lpQt);
				}catch(Exception e){
					int lpQt=0;
					lpQty.add(lpQt);
				}
			}else{
				int lpQt=0;
				lpQty.add(lpQt);
			}

			String remarks = "";
			if(request.getParameter("remarks" + j) != null && !request.getParameter("remarks" + j).equals("")){
				remarks = request.getParameter("remarks" + j);
				remarksList.add(remarks);
			}else {
				remarksList.add("");
			}

			if(request.getParameter("brandId"+j)!=null && !request.getParameter("brandId"+j).equals("")){
			int brandId=Integer.parseInt(request.getParameter("brandId"+j));
			brandNameList.add(brandId);
			}else{
				brandNameList.add(null);
			}
			if(request.getParameter("batchNo"+j)!=null && !request.getParameter("batchNo"+j).equals("") && !request.getParameter("batchNo"+j).equals("0") ){
				String batchNo=request.getParameter("batchNo"+j);
				batchNumberList.add(batchNo);
				}else{
					batchNumberList.add(null);
				}
			if(request.getParameter("expiryDate"+j)!=null && !request.getParameter("expiryDate"+j).equals("")){
				String expiryDate=request.getParameter("expiryDate"+j);
				expiryDateList.add(expiryDate);
				}else{
					expiryDateList.add(null);
				}

			if(request.getParameter("qtyIssued"+j)!=null && !request.getParameter("qtyIssued"+j).equals("")){
				int qtyIssued=Integer.parseInt(request.getParameter("qtyIssued"+j));
				issQtyList.add(qtyIssued);
				}else{
					issQtyList.add(null);
				}



			if(!pvmsNo.equals("")){
				pvmsNoList.add(pvmsNo);
			}
			//	pvmsNoList.add(pvmsArr[i]);

			j++;
		}

		mapForDS.put("deptId",  (Integer)session.getAttribute("deptId"));
		mapForDS.put("pvmsNoList", pvmsNoList);
		mapForDS.put("frequencyList", frequencyList);
		mapForDS.put("ctList", ctList);
		mapForDS.put("dosageList", dosageList);
		mapForDS.put("typeLeftRightList", typeLeftRightList);
		mapForDS.put("instructionList", instructionList);
		mapForDS.put("routeList", routeList);
		mapForDS.put("lpList",lpList);
		mapForDS.put("lpQty",lpQty);
		mapForDS.put("loList",loList);
		mapForDS.put("loQt",loQt);

		mapForDS.put("totalList", totalList);
		mapForDS.put("noOfDaysList", noOfDaysList);
		mapForDS.put("hinId", hinId);
		mapForDS.put("departmentId", departmentId);
		mapForDS.put("hospitalId",hospitalId);
		mapForDS.put("remarksList", remarksList);
		mapForDS.put("visitId", visitId);
		mapForDS.put("hospitalId", hospitalId);
		mapForDS.put("userName", userName);
		mapForDS.put("visitId", visitId);
		mapForDS.put("consultationDate", consultationDate);
		mapForDS.put("consultationTime", consultationTime);
		mapForDS.put("otherMedicineList", otherMedicineList);
		mapForDS.put("empId",empId);
		mapForDS.put("DIAGNOSIS",DIAGNOSIS);
		mapForDS.put("specialty", specialty);
		mapForDS.put("userName",userName);
		mapForDS.put("changedDate",changedDate);
		mapForDS.put("changedTime",changedTime);
	
		

		//Map<String, Object> vedItem = storesHandlerService.getVEDItem(requestParameters);
		//map.put("vedItem", vedItem);
		
		map = storesHandlerService.submitDirectPatientIssue(mapForDS);
		
		List opdIssueNo = new ArrayList();

	
  		Date consultationDateToInsert = HMSUtil.convertStringTypeDateToDateType(consultationDate);
         String serviceNo=request.getParameter("serviceNoS");
         visitNo=Integer.parseInt(request.getParameter("visitNumber"));
         String hinNo=request.getParameter("hinNoS");

         String serviceNoS=request.getParameter("serviceNoS");
         String visitNumber=request.getParameter("visitNumber");
         String hinNoS=request.getParameter("hinNoS");



         //String serviceNo=request.getParameter("serviceNoS");
         String changeBy=request.getParameter("changeBy");

         
         
       
        map.put("deptId",deptId);
		map.put("hospitalId",hospitalId);
	    map.put("hinId",hinId);
		map.put("serviceNo",serviceNo);
		map.put("dateToInsert",consultationDateToInsert);
		map.put("empId",empId);
		map.put("userName",userName);
		map.put("time",consultationTime);
		map.put("itemIdList",pvmsNoList);
		map.put("batchNumberList",batchNumberList);

	    map.put("brandNameList",brandNameList);
	    map.put("expiryDateList",expiryDateList);
		map.put("issQtyList",issQtyList);
		map.put("userName", changeBy);
		boolean issue=false;
		
			
		
		// message = "before true Data saved successfully !!";
		if(map.get("succesfullyAdded").equals("true")){
			 message = "Data saved successfully !!";
			issue=storesHandlerService.submitOPDPatientStockDetailsDirect(map);
		}
		if (issue) {
			 message = "Data saved successfully !!";

		}else {
			message = "Data not saved";
		}
		title = "Direct Patient Issue";
		jsp = "opdPatientIssueDirect";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("serviceNoS",serviceNoS);
		map.put("visitNumber",visitNumber);
		map.put("hinNoS",hinNoS);
		map.put("message",message);

		return new ModelAndView("indexB", "map", map);
	}

//ashutosh end
	public ModelAndView submitOPDPatientStockDetails(HttpServletRequest request, HttpServletResponse response)
	{
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List issQtyList = new ArrayList();
		List amountList = new ArrayList();
		List pvmsList = new ArrayList();
		List batchNumberList = new ArrayList();

		List brandNameList = new ArrayList();
		List expiryDateList = new ArrayList();
		List costPriceList = new ArrayList();
	
		List<Integer> itemIdList = new ArrayList<Integer>();
		List<Integer> frequencyList = new ArrayList<Integer>();
		List<String> dosageList = new ArrayList<String>();
		List<String> ctList = new ArrayList<String>();
		List<Integer> noOfDaysList = new ArrayList<Integer>();
		List<String> routeList = new ArrayList<String>();
		List<Integer> totalList = new ArrayList<Integer>();
		List<String> remarksList = new ArrayList<String>();
		
		List storeItemBatchStockIdList = new ArrayList();
		int deptId = Integer.parseInt(request.getParameter("deptId"));
		int hinId = Integer.parseInt(request.getParameter("hinId"));
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		//System.out.println("Visit:--->"+visitId);
		String serviceNo = request.getParameter("serviceNo");
		String visitNumber=request.getParameter("visitNumber");
		String hinNoS=request.getParameter("hinNoS");
		String serviceNoS=request.getParameter("serviceNoS");
		String specialty=request.getParameter("specialty");


		int empId = Integer.parseInt(request.getParameter("empId"));
		String prescription = request.getParameter("prescription");
		String buttonFlag = request.getParameter("buttonFlag");
		String date = request.getParameter("date1");
		String time = request.getParameter("time1");

		int userId = ((Users) session.getAttribute("users")).getId();
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		String userName = (String) session.getAttribute("userName");
		int storeFyDocumentNoId = Integer.parseInt(request.getParameter("storeFyDocumentNoId"));
		String opdIssueno = request.getParameter("opdIssueno");


		int counter = Integer.parseInt(request.getParameter("counter"));
		int patientPrescriptionDtId = 0;

		int patientPrescriptionId = 0;
		if(request.getParameter("patientPrescriptionId") != null && !(request.getParameter("patientPrescriptionId")).equals("")){
			patientPrescriptionId = Integer.parseInt(request.getParameter("patientPrescriptionId"));
		}
		List<Integer> prescriptionDtIdList  = new ArrayList<Integer>();
		for (int i = 1; i <= counter; i++)
		{
			if(request.getParameter("patientPrescriptionDtId" + i)!=null && !request.getParameter("patientPrescriptionDtId" + i).equals("")){
				prescriptionDtIdList.add(Integer.parseInt(request.getParameter("patientPrescriptionDtId" + i)));
			}
			
			int frequencyId = 0;
			if(request.getParameter("frequencyName" + i) != null && !request.getParameter("frequencyName" + i).equals("")){
				frequencyId = Integer.parseInt(request.getParameter("frequencyName" + i));
				frequencyList.add(frequencyId);
			}else {
				frequencyList.add(0);
			}
			if(request.getParameter("ct" + i) != null){
				ctList.add("y");
			}	else {
				ctList.add("n");
			}

			String route = "";
			if(request.getParameter("route" + i) != null && !request.getParameter("route" +i).equals("")){
				route = request.getParameter("route" + i);
				routeList.add(route);
			}	else {
				routeList.add("");
			}
			String dosage = "";
			if(request.getParameter("strength" + i) != null && !request.getParameter("strength" + i).equals("")){
				dosage = request.getParameter("strength" + i);

				dosageList.add(dosage);
			}else{
				dosageList.add("");
			}
			if(request.getParameter("noOfDays" + i) != null && !request.getParameter("noOfDays" + i).equals("")){
				int noOfdoges=1;
				if(dosage!=null && !dosage.equals("")){
					noOfdoges=Integer.parseInt(dosage.trim());
				}
				int noOfDays = Integer.parseInt(request.getParameter("noOfDays" + i));
				int total = noOfDays * frequencyId*noOfdoges;

				totalList.add(total);
				noOfDaysList.add(noOfDays);
			}else {
				noOfDaysList.add(0);
			}
			String remarks = "";
			if(request.getParameter("remarks" + i) != null && !request.getParameter("remarks" + i).equals("")){
				remarks = request.getParameter("remarks" + i);
				remarksList.add(remarks);
			}else {
				remarksList.add("");
			}

			
			
			int itemId = Integer.parseInt(request.getParameter("itemId"+i));
			itemIdList.add(itemId);
			batchNumberList.add(request.getParameter("batchNo" + i));
		
			brandNameList.add(request.getParameter("brandId" + i));
			expiryDateList.add(request.getParameter("expiryDate" + i));
			costPriceList.add(request.getParameter("costPrice" + i));
			//if(request.getParameter("qtyIssued" + i)!=null && request.getParameter("qtyIssued" + i)!="")
			issQtyList.add(request.getParameter("qtyIssued" + i));
			
		}
	
		map.put("deptId", deptId);
		map.put("hospitalId", hospitalId);
		map.put("date", date);
		map.put("time", time);
		//map.put("buttonFlag", buttonFlag);
		map.put("userName", userName);
		map.put("userId", userId);
		// map.put("pvmsList", pvmsList);
		map.put("prescriptionDtIdList", prescriptionDtIdList);
		map.put("frequencyList", frequencyList);
		map.put("ctList", ctList);
		map.put("dosageList", dosageList);
		map.put("routeList", routeList);
		map.put("remarksList", remarksList);
		map.put("totalList", totalList);
		map.put("noOfDaysList", noOfDaysList);
		map.put("itemIdList", itemIdList);
		map.put("batchNumberList", batchNumberList);
//		map.put("nisSatusList", nisSatusList);
		map.put("brandNameList", brandNameList);
		map.put("expiryDateList", expiryDateList);
		map.put("issQtyList", issQtyList);
		map.put("costPriceList", costPriceList);
		//map.put("amountList", amountList);
		//map.put("storeItemBatchStockIdList", storeItemBatchStockIdList);
		map.put("storeFyDocumentNoId", storeFyDocumentNoId);
		map.put("opdIssueno", opdIssueno);
		map.put("hinId", hinId);
		map.put("empId", empId);
		map.put("prescription", prescription);
		map.put("patientPrescriptionDtId", patientPrescriptionDtId);
		map.put("patientPrescriptionId", patientPrescriptionId);
		map.put("serviceNo", serviceNo);
		map.put("visitNumber",visitNumber);
		map.put("serviceNoS",serviceNoS);
		map.put("hinNoS",hinNoS);
		map.put("specialty", specialty);
		map.putAll(storesHandlerService.submitOPDPatientStockDetails(map));
		boolean successfullyAdded = (Boolean)map.get("flag");
		if (successfullyAdded) {
			 message = "Data saved Successfully !!";

		} else {
			message = "Data not saved.";
		}

		Date currentDate = new Date();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		Map<String, Object> mapForDs = new HashMap<String, Object>();
		mapForDs.put("deptId", deptId);
		mapForDs.put("currentDate", currentDate);
		mapForDs.put("hospitalId", hospitalId);
		detailsMap = opdHandlerService.getPrescriptionList(mapForDs);
		detailsMap=opdHandlerService.getPrescriptionDetails(mapForDs);
		String jsp = "opdPatientIssuePring";
		jsp += ".jsp";
		map.put("deptId", deptId);
		map.put("visitId",visitId);
		map.put("hospitalId", hospitalId);
		map.put("userName", userName);
		map.put("detailsMap", detailsMap);
		map.put("message", message);
		map.put("contentJsp", jsp);
    	return new ModelAndView("indexB", "map", map);
	}
	
	public ModelAndView submitOPDPatientStockDetailsByHin(HttpServletRequest request, HttpServletResponse response)
	{
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List issQtyList = new ArrayList();
		List amountList = new ArrayList();
		List pvmsList = new ArrayList();
		List batchNumberList = new ArrayList();

		List brandNameList = new ArrayList();
		List expiryDateList = new ArrayList();
		List costPriceList = new ArrayList();

		List<Integer> itemIdList = new ArrayList<Integer>();
		List<Integer> frequencyList = new ArrayList<Integer>();
		List<String> dosageList = new ArrayList<String>();
		List<String> ctList = new ArrayList<String>();
		List<Integer> noOfDaysList = new ArrayList<Integer>();
		List<String> routeList = new ArrayList<String>();
		List<Integer> totalList = new ArrayList<Integer>();
		List<String> remarksList = new ArrayList<String>();
		
		List storeItemBatchStockIdList = new ArrayList();
		int deptId = Integer.parseInt(request.getParameter("deptId"));
		int hinId = Integer.parseInt(request.getParameter("hinId"));
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		//System.out.println("Visit:--->"+visitId);
		String serviceNo = request.getParameter("serviceNo");
		String visitNumber=request.getParameter("visitNumber");
		String hinNoS=request.getParameter("hinNoS");
		String serviceNoS=request.getParameter("serviceNoS");
		String specialty=request.getParameter("specialty");


		int empId = Integer.parseInt(request.getParameter("empId"));
		String prescription = request.getParameter("prescription");
		String buttonFlag = request.getParameter("buttonFlag");
		String date = request.getParameter("date1");
		String time = request.getParameter("time1");

		int hospitalId = (Integer) session.getAttribute("hospitalId");
		int userId = ((Users) session.getAttribute("users")).getId();
		int storeFyDocumentNoId = Integer.parseInt(request.getParameter("storeFyDocumentNoId"));
		String opdIssueno = request.getParameter("opdIssueno");


		int counter = Integer.parseInt(request.getParameter("counter"));
		System.out.println("counter"+counter);
		int patientPrescriptionDtId = 0;
	/*	if(request.getParameter("patientPrescriptionDtId") != null && !(request.getParameter("patientPrescriptionDtId")).equals("")){
			patientPrescriptionDtId = Integer.parseInt(request.getParameter("patientPrescriptionDtId"));
		}*/
		int patientPrescriptionId = 0;
		if(request.getParameter("patientPrescriptionId") != null && !(request.getParameter("patientPrescriptionId")).equals("")){
			patientPrescriptionId = Integer.parseInt(request.getParameter("patientPrescriptionId"));
		}
		List<Integer> prescriptionDtIdList  = new ArrayList<Integer>();
		for (int i = 1; i <= counter; i++)
		{
			if(request.getParameter("itemId"+i)==null)
			  continue;
			if(request.getParameter("patientPrescriptionDtId" + i)!=null && !request.getParameter("patientPrescriptionDtId" + i).equals("")){
				prescriptionDtIdList.add(Integer.parseInt(request.getParameter("patientPrescriptionDtId" + i)));
			}
			
			int frequencyId = 0;
			if(request.getParameter("frequencyName" + i) != null && !request.getParameter("frequencyName" + i).equals("")){
				frequencyId = Integer.parseInt(request.getParameter("frequencyName" + i));
				frequencyList.add(frequencyId);
			}else {
				frequencyList.add(0);
			}
			if(request.getParameter("ct" + i) != null){
				ctList.add("y");
			}	else {
				ctList.add("n");
			}

			String route = "";
			if(request.getParameter("route" + i) != null && !request.getParameter("route" +i).equals("")){
				route = request.getParameter("route" + i);
				routeList.add(route);
			}	else {
				routeList.add("");
			}
			String dosage = "";
			if(request.getParameter("strength" + i) != null && !request.getParameter("strength" + i).equals("")){
				dosage = request.getParameter("strength" + i);

				dosageList.add(dosage);
			}else{
				dosageList.add("");
			}
	
			String remarks = "";
			if(request.getParameter("remarks" + i) != null && !request.getParameter("remarks" + i).equals("")){
				remarks = request.getParameter("remarks" + i);
				remarksList.add(remarks);
			}else {
				remarksList.add("");
			}

			
			
			int itemId = Integer.parseInt(request.getParameter("itemId"+i));
			itemIdList.add(itemId);
			
			
			if(request.getParameter("batchNoValue" + i) != null && !request.getParameter("batchNoValue" + i).equals("") && !request.getParameter("batchNoValue" + i).equals("0")){
				batchNumberList.add(request.getParameter("batchNoValue" + i));
			}else {
				batchNumberList.add("");
			}
			
			if(request.getParameter("batchNo" + i) != null && !request.getParameter("batchNo" + i).equals("") && !request.getParameter("batchNo" + i).equals("0")){
				storeItemBatchStockIdList.add(request.getParameter("batchNo" + i));
				request.getParameter("value");
			}else {
				storeItemBatchStockIdList.add("");
				request.getParameter("value1");
			}
			
			
			brandNameList.add(request.getParameter("brandId" + i));
			expiryDateList.add(request.getParameter("expiryDate" + i));
			costPriceList.add(request.getParameter("costPrice" + i));
			//if(request.getParameter("qtyIssued" + i)!=null && request.getParameter("qtyIssued" + i)!="")
			issQtyList.add(request.getParameter("qtyIssued" + i));
		
		}
		if(request.getParameterValues("injDetailsId")!=null)
		{
			String[] injDetailsIdArray = request.getParameterValues("injDetailsId");
			map.put("injDetailsIdArray", injDetailsIdArray);
		}
		
		
		map.put("deptId", deptId);
		map.put("hospitalId", hospitalId);
		map.put("date", date);
		map.put("time", time);
		//map.put("buttonFlag", buttonFlag);
		map.put("userName", userName);
		map.put("userId", userId);
		// map.put("pvmsList", pvmsList);
		map.put("prescriptionDtIdList", prescriptionDtIdList);
		map.put("frequencyList", frequencyList);
		map.put("ctList", ctList);
		map.put("dosageList", dosageList);
		map.put("routeList", routeList);
		map.put("remarksList", remarksList);
		map.put("totalList", totalList);
		map.put("noOfDaysList", noOfDaysList);
		map.put("itemIdList", itemIdList);
		map.put("batchNumberList", batchNumberList);
		map.put("storeItemBatchStockIdList", storeItemBatchStockIdList);
//		map.put("nisSatusList", nisSatusList);
		map.put("brandNameList", brandNameList);
		map.put("expiryDateList", expiryDateList);
		map.put("issQtyList", issQtyList);
		map.put("costPriceList", costPriceList);
		//map.put("amountList", amountList);
		//map.put("storeItemBatchStockIdList", storeItemBatchStockIdList);
		map.put("storeFyDocumentNoId", storeFyDocumentNoId);
		map.put("opdIssueno", opdIssueno);
		map.put("hinId", hinId);
		map.put("empId", empId);
		map.put("prescription", prescription);
		map.put("patientPrescriptionDtId", patientPrescriptionDtId);
		map.put("patientPrescriptionId", patientPrescriptionId);
		map.put("serviceNo", serviceNo);
		map.put("visitNumber",visitNumber);
		map.put("serviceNoS",serviceNoS);
		map.put("hinNoS",hinNoS);
		map.put("specialty", specialty);
		synchronized(StoresController.class)
		{
			map.putAll(storesHandlerService.submitOPDPatientStockDetailsByHin(map));
		}
		
		boolean successfullyAdded = (Boolean)map.get("flag");
		boolean qtyFlag = (Boolean)map.get("qtyFlag");
		int divisionId = (Integer)map.get("divisionId");
		String fromDate =(String)map.get("fromDate");
		if (successfullyAdded) {
		 if(!map.get("message").toString().equals(""))
			{
				message = (String)map.get("message");
			}
			else
			{
				message = "Data saved Successfully !!";
			}
			 

		} else {
			
				message = "Data not saved.";
						
		}
		
		if(request.getParameter("facFlag")!=null && request.getParameter("facFlag").equals("FAC"))
		{
			map.put("url", "/hms/hms/opd?method=showPendingPrescriptionJspFAC&facStatus=y&divisionId="+divisionId+"&fromDate="+fromDate);
		}
		
		if(request.getParameter("facFlag")!=null && request.getParameter("facFlag").equals("CorporateFAC"))
		{
			map.put("url", "/hms/hms/opd?method=showPendingPrescriptionJspCorporateFAC&facStatus=y&divisionId="+divisionId+"&fromDate="+fromDate);
		}

		Date currentDate = new Date();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		Map<String, Object> mapForDs = new HashMap<String, Object>();
		mapForDs.put("deptId", deptId);
		mapForDs.put("currentDate", currentDate);
		mapForDs.put("hospitalId", hospitalId);
		/*detailsMap = opdHandlerService.getPrescriptionList(mapForDs);
		detailsMap=opdHandlerService.getPrescriptionDetails(mapForDs);*/
		// code for direct printing start
		
		boolean nipNISFlag = true;
		if(map.get("nipNISFlag")!=null){
			nipNISFlag=(Boolean)map.get("nipNISFlag");
			System.out.println("nipNISFlagin"+nipNISFlag);
		}
		boolean nisFlag = true;
		if(map.get("nisFlag")!=null){
			nisFlag=(Boolean)map.get("nisFlag");

		}
		boolean nipFlag = true;
		if(map.get("nipFlag")!=null){
			nipFlag=(Boolean)map.get("nipFlag");

		}
	/*	<input type="button" value="Print Prescription" class="buttonBig" onClick="checkTargetForYes();submitForm('message','<%=printUrl %>');checkTargetForNo();" />*/
		if(nipNISFlag)
		{
		if(nisFlag)
		{
			
			/*<input type="button" value="NIS" class="button" onClick="submitForm('message','<%=printNisUrl%>');" />*/
			
		}
		if(nipFlag)
		{
			
			/*<input type="button" value="NIP" class="button" onClick="submitForm('message','<%=printNipUrl%>');" />*/
			
		}
			
	        
		}

		// code for direct printing end
		String jsp = "opdPatientIssuePring";
		jsp += ".jsp";
		map.put("deptId", deptId);
		map.put("hinId",hinId);
		map.put("hospitalId", hospitalId);
		map.put("userName", userName);
		map.put("detailsMap", detailsMap);
		map.put("message", message);
		map.put("contentJsp", jsp);
    	return new ModelAndView("indexB", "map", map);
	}
	
	
	
	
	public ModelAndView submitOPDPatientNIPDetails(HttpServletRequest request, HttpServletResponse response)
	{
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		int userId = ((Users) session.getAttribute("users")).getId();
		box.put("userId", userId);
		

		map.putAll(storesHandlerService.submitOPDPatientNIPDetails(box));
		boolean successfullyAdded = (Boolean)map.get("flag");
		if (successfullyAdded) {
			 message = "Data saved Successfully !!";

		} else {
			message = "Data not saved.";
		}

		Date currentDate = new Date();
		
	
		String jsp = "opdPatientIssueNIPPring";
		jsp += ".jsp";		
		map.put("userName", userName);		
		map.put("message", message);
		map.put("contentJsp", jsp);
    	return new ModelAndView("indexB", "map", map);
	}
	
	public ModelAndView submitIPPartialPatientStockDetails(HttpServletRequest request, HttpServletResponse response)
	{
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List issQtyList = new ArrayList();
		List amountList = new ArrayList();
		List pvmsList = new ArrayList();
		List batchNumberList = new ArrayList();
		List brandNameList = new ArrayList();
		List expiryDateList = new ArrayList();
		List costPriceList = new ArrayList();
		List rc=new ArrayList();
		List rcQty=new ArrayList();
		List<Integer> itemIdList = new ArrayList<Integer>();
		List<Integer> frequencyList = new ArrayList<Integer>();
		List<String> dosageList = new ArrayList<String>();
		List<String> ctList = new ArrayList<String>();
		List<Integer> noOfDaysList = new ArrayList<Integer>();
		List<String> routeList = new ArrayList<String>();
		List<Integer> totalList = new ArrayList<Integer>();
		List<String> remarksList = new ArrayList<String>();
		Users users = (Users) session.getAttribute("users");
		List storeItemBatchStockIdList = new ArrayList();
		int deptId = Integer.parseInt(request.getParameter("deptId"));
		int hinId = Integer.parseInt(request.getParameter("hinId"));
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		String serviceNo = request.getParameter("serviceNo");
		String visitNumber=request.getParameter("visitNumber");
		String hinNoS=request.getParameter("hinNoS");
		String serviceNoS=request.getParameter("serviceNoS");
		String specialty=request.getParameter("specialty");
		
		
		int empId = Integer.parseInt(request.getParameter("empId"));
		String prescription = request.getParameter("prescription");
		String buttonFlag = request.getParameter("buttonFlag");
		String date = request.getParameter("date1");
		String time = request.getParameter("time1");
		
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		String userName = (String) session.getAttribute("userName");
		int storeFyDocumentNoId = Integer.parseInt(request.getParameter("storeFyDocumentNoId"));
		String opdIssueno = request.getParameter("opdIssueno");
		
		
		int counter = Integer.parseInt(request.getParameter("counter"));
		int patientPrescriptionDtId = 0;
		/*	if(request.getParameter("patientPrescriptionDtId") != null && !(request.getParameter("patientPrescriptionDtId")).equals("")){
			patientPrescriptionDtId = Integer.parseInt(request.getParameter("patientPrescriptionDtId"));
		}*/
		int patientPrescriptionId = 0;
		if(request.getParameter("patientPrescriptionId") != null && !(request.getParameter("patientPrescriptionId")).equals("")){
			patientPrescriptionId = Integer.parseInt(request.getParameter("patientPrescriptionId"));
		}
		List<Integer> prescriptionDtIdList  = new ArrayList<Integer>();
		for (int i = 1; i <= counter; i++)
		{
			if(request.getParameter("patientPrescriptionDtId" + i)!=null && !request.getParameter("patientPrescriptionDtId" + i).equals("")){
				prescriptionDtIdList.add(Integer.parseInt(request.getParameter("patientPrescriptionDtId" + i)));
			}
			
			int frequencyId = 0;
			if(request.getParameter("frequencyName" + i) != null && !request.getParameter("frequencyName" + i).equals("")){
				frequencyId = Integer.parseInt(request.getParameter("frequencyName" + i));
				frequencyList.add(frequencyId);
			}else {
				frequencyList.add(0);
			}
			if(request.getParameter("ct" + i) != null){
				ctList.add("y");
			}	else {
				ctList.add("n");
			}
			
			String route = "";
			if(request.getParameter("route" + i) != null && !request.getParameter("route" +i).equals("")){
				route = request.getParameter("route" + i);
				routeList.add(route);
			}	else {
				routeList.add("");
			}
			String dosage = "";
			if(request.getParameter("strength" + i) != null && !request.getParameter("strength" + i).equals("")){
				dosage = request.getParameter("strength" + i);
				
				dosageList.add(dosage);
			}else{
				dosageList.add("");
			}
			if(request.getParameter("noOfDays" + i) != null && !request.getParameter("noOfDays" + i).equals("")){
				int noOfdoges=1;
				if(dosage!=null && !dosage.equals("")){
					noOfdoges=Integer.parseInt(dosage.trim());
				}
				int noOfDays = Integer.parseInt(request.getParameter("noOfDays" + i));
				int total = noOfDays * frequencyId*noOfdoges;
				
				totalList.add(total);
				noOfDaysList.add(noOfDays);
			}else {
				noOfDaysList.add(0);
			}
			String remarks = "";
			if(request.getParameter("remarks" + i) != null && !request.getParameter("remarks" + i).equals("")){
				remarks = request.getParameter("remarks" + i);
				remarksList.add(remarks);
			}else {
				remarksList.add("");
			}
			
			
			
			int itemId = Integer.parseInt(request.getParameter("itemId"+i));
			itemIdList.add(itemId);
			batchNumberList.add(request.getParameter("batchNo" + i));
			brandNameList.add(request.getParameter("brandId" + i));
			expiryDateList.add(request.getParameter("expiryDate" + i));
			costPriceList.add(request.getParameter("costPrice" + i));
			rc.add(request.getParameter("rc" + i));
			rcQty.add(request.getParameter("rcQty" + i));
			//if(request.getParameter("qtyIssued" + i)!=null && request.getParameter("qtyIssued" + i)!="")
			issQtyList.add(request.getParameter("qtyIssued" + i));
		}
		map.put("userId", users.getId());
		map.put("deptId", deptId);
		map.put("rc", rc);
		map.put("rcQty", rcQty);
		map.put("hospitalId", hospitalId);
		map.put("date", date);
		map.put("time", time);
		map.put("userName", userName);
		map.put("prescriptionDtIdList", prescriptionDtIdList);
		map.put("frequencyList", frequencyList);
		map.put("ctList", ctList);
		map.put("dosageList", dosageList);
		map.put("routeList", routeList);
		map.put("remarksList", remarksList);
		map.put("totalList", totalList);
		map.put("noOfDaysList", noOfDaysList);
		map.put("itemIdList", itemIdList);
		map.put("batchNumberList", batchNumberList);
//		map.put("nisSatusList", nisSatusList);
		map.put("brandNameList", brandNameList);
		map.put("expiryDateList", expiryDateList);
		map.put("issQtyList", issQtyList);
		map.put("costPriceList", costPriceList);
		map.put("storeFyDocumentNoId", storeFyDocumentNoId);
		map.put("opdIssueno", opdIssueno);
		map.put("hinId", hinId);
		map.put("empId", empId);
		map.put("prescription", prescription);
		map.put("patientPrescriptionDtId", patientPrescriptionDtId);
		map.put("patientPrescriptionId", patientPrescriptionId);
		map.put("serviceNo", serviceNo);
		map.put("visitNumber",visitNumber);
		map.put("serviceNoS",serviceNoS);
		map.put("hinNoS",hinNoS);
		map.put("specialty", specialty);
		map.putAll(storesHandlerService.submitIPPartialPatientStockDetails(map));
		boolean successfullyAdded = (Boolean)map.get("flag");
		if (successfullyAdded) {
			message = "Data saved Successfully !!";
			
		} else {
			message = "Data not saved.";
		}
		
		Date currentDate = new Date();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		Map<String, Object> mapForDs = new HashMap<String, Object>();
		mapForDs.put("deptId", deptId);
		mapForDs.put("currentDate", currentDate);
		mapForDs.put("hospitalId", hospitalId);
		detailsMap = opdHandlerService.getPrescriptionList(mapForDs);
		detailsMap=opdHandlerService.getPrescriptionDetails(mapForDs);
		String jsp = "ipdPatientIssuePring";
		jsp += ".jsp";
		map.put("deptId", deptId);
		map.put("visitId",visitId);
		map.put("hospitalId", hospitalId);
		map.put("userName", userName);
		map.put("detailsMap", detailsMap);
		map.put("message", message);
		map.put("contentJsp", jsp);
		map.put("url", "/hms/hms/opd?method=showPartialPrescriptionForWardJsp");
		return new ModelAndView("indexB", "map", map);
	}
	
	public ModelAndView submitIPPatientStockDetails(HttpServletRequest request, HttpServletResponse response)
	{
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		box.put("hospitalId", hospitalId);
		int deptId =0;
		 
		 if(session.getAttribute("deptId") !=null)
		 deptId=(Integer)session.getAttribute("deptId");
		 box.put("deptId", deptId);
		 Users users = (Users) session.getAttribute("users");
		 box.put("userId", users.getId());
		 box.put("empId", users.getEmployee().getId());
		
		map.putAll(storesHandlerService.submitIPPatientStockDetails(box));
		boolean successfullyAdded = (Boolean)map.get("flag");
		if (successfullyAdded) {
			message = "Data saved Successfully !!";
			
		} else {
			message = "Data not saved.";
		}
		
		Date currentDate = new Date();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		Map<String, Object> mapForDs = new HashMap<String, Object>();
		/*mapForDs.put("deptId", deptId);
		mapForDs.put("currentDate", currentDate);
		mapForDs.put("hospitalId", hospitalId);*/
		detailsMap = opdHandlerService.getPrescriptionList(mapForDs);
		detailsMap=opdHandlerService.getPrescriptionDetails(mapForDs);
		String jsp = "ipdPatientIssuePring";
		jsp += ".jsp";
	/*	map.put("deptId", deptId);
		map.put("visitId",visitId);
		map.put("hospitalId", hospitalId);*/
		String url = "/hms/hms/opd?method=showPendingPrescriptionForWardJsp";
		map.put("url", url);
		map.put("userName", userName);
		map.put("detailsMap", detailsMap);
		map.put("message", message);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}
	
	public ModelAndView submitIPPatientStockDetailsPartial(HttpServletRequest request, HttpServletResponse response)
	{
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		box.put("hospitalId", hospitalId);
		int deptId =0;
		 
		 if(session.getAttribute("deptId") !=null)
		 deptId=(Integer)session.getAttribute("deptId");
		 box.put("deptId", deptId);
		 Users users = (Users) session.getAttribute("users");
		 box.put("userId", users.getId());
		 box.put("empId", users.getEmployee().getId());
		
		map.putAll(storesHandlerService.submitIPPatientStockDetailsPartial(box));
		boolean successfullyAdded = (Boolean)map.get("flag");
		if (successfullyAdded) {
			message = "Data saved Successfully !!";
			
		} else {
			message = "Data not saved.";
		}
		
		Date currentDate = new Date();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		Map<String, Object> mapForDs = new HashMap<String, Object>();
		/*mapForDs.put("deptId", deptId);
		mapForDs.put("currentDate", currentDate);
		mapForDs.put("hospitalId", hospitalId);*/
		detailsMap = opdHandlerService.getPrescriptionList(mapForDs);
		detailsMap=opdHandlerService.getPrescriptionDetails(mapForDs);
		String jsp = "ipdPatientIssuePring";
		jsp += ".jsp";
	/*	map.put("deptId", deptId);
		map.put("visitId",visitId);
		map.put("hospitalId", hospitalId);*/
		String url = "/hms/hms/opd?method=showPendingPrescriptionForWardJspPartial";
		map.put("url", url);
		map.put("userName", userName);
		map.put("detailsMap", detailsMap);
		map.put("message", message);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showModifyOPDPatientIssueJsp(
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		String search = "n";
		String OPDIssueNo = request.getParameter("OPDIssueNo");
		if (request.getParameter("search") != null)
			search = request.getParameter("search");
		int deptId = 0;
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		Map<String, Object> map = new HashMap<String, Object>();
		map.put("OPDIssueNo", OPDIssueNo);
		map.put("search", search);
		map.put("deptId", deptId);
		map = storesHandlerService.showModifyOPDPatientIssueJsp(map);

		jsp = MODIFY_OPD_PATIENT_ISSUE_STOCK_DETAILS;

		if (search.equals("y")) {
			jsp = jsp + ".jsp";
		}
		title = "Modify OPD Patient Issue";
		map.put("contentJsp", jsp);
		map.put("search", search);
		map.put("title", title);

		if (search.equals("n")) {
			return new ModelAndView(jsp, "map", map);
		} else {
			return new ModelAndView("indexB", "map", map);
		}
	}

	public ModelAndView deleteStockDetails(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		int opdIssueTId = Integer.parseInt(request.getParameter("parent"));
		map.put("opdIssueTId", opdIssueTId);
		boolean successfullyDeleted = storesHandlerService
				.deleteStockDetails(map);
		String search = request.getParameter("search");
		if (successfullyDeleted) {
			message = "Stock  has been Deleted Successfully !!";
		} else {
			message = "Error Ocurred Please Try Again!!";
		}

		jsp = STOCK_UPDATED_MESSAGE_JSP;

		if (search.equals("y")) {
			jsp = jsp + ".jsp";
		}
		map.put("message", message);
		map.put("contentJsp", jsp);
		map.put("search", search);
		map.put("title", title);
		if (search.equals("y")) {
			return new ModelAndView("indexB", "map", map);
		} else {
			return new ModelAndView(jsp, "map", map);
		}
	}

	public ModelAndView showRecordsForLotNo(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		String lotNo = request.getParameter("lotNo");
		int rowVal = Integer.parseInt(request.getParameter("rowVal"));
		int deptId = Integer.parseInt(request.getParameter("deptId"));
		map.put("lotNo", lotNo);
		map.put("rowVal", rowVal);
		map.put("deptId", deptId);
		map = storesHandlerService.showStockDetailsForLotNo(map);

		jsp = OPD_STOCK_DETAILS_FOR_LOT_NO;
		map.put("message", message);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView getItemListForOPD(HttpServletRequest request,
			HttpServletResponse response) {

		int deptId = 0;
		int hospitalId = 0;
		
		HttpSession session = request.getSession();
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt("" + session.getAttribute("hospitalId"));

		Users users = (Users) session.getAttribute("users");
        
		String itemNameField = "";
		String autoHint = "";

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			map.put("autoHint", autoHint);
			map.put("deptId", deptId);
			map.put("hospitalId",hospitalId);
			map.put("userId",users.getId());
			map.put("userName", userName);

			map = storesHandlerService.getItemListForOPD(map);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "responseForOPD";
		return new ModelAndView(jsp, "map", map);
	}

	public void fillItemsInGridForOPD(HttpServletRequest request,
			HttpServletResponse response) {

		Box box = HMSUtil.getBox(request);
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----

		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		int itemId = 0;

		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");

		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));

		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		// String itemNameField = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();

		List objectList = new ArrayList();
		List<StoreItemBatchStock> batchNoList = new ArrayList<StoreItemBatchStock>();
		try {
			if (request.getParameter("itemId") != null) {
				itemId = Integer.parseInt(request.getParameter("itemId"));

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		dataMap.put("itemId", itemId);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.fillItemsInGridForOPD(dataMap);
		if (map.get("itemList") != null) {
			objectList = (List) map.get("itemList");
		}
		List listOfItemsStock=new ArrayList();
		if (map.get("listOfItemsStock") != null) {
			listOfItemsStock = (List) map.get("listOfItemsStock");
		}

		if (map.get("batchNoList") != null) {
			batchNoList = (List) map.get("batchNoList");
		}

		StringBuffer sb = new StringBuffer();
		try {

			MasStoreItem masStoreItem = (MasStoreItem) objectList.get(0);
			String pvmsNo = masStoreItem.getPvmsNo();

			String strength=masStoreItem.getStrength();
				int id = masStoreItem.getId();
				float totalQty=0;

				Iterator itr= listOfItemsStock.iterator();

					while(itr.hasNext())
					{
						 Object[] pair = (Object[]) itr.next();
			         	 int item_Id=Integer.parseInt(pair[0].toString());
			         	 if(item_Id==id)
			         	 {
			         	   totalQty=Float.parseFloat(pair[1].toString());
			         	 }
					}

				sb.append("<item>");
				sb.append("<au>"
						+ masStoreItem.getItemConversion().getPurchaseUnit()
								.getUnitName() + "</au>");
				sb.append("<pvms>" + pvmsNo + "</pvms>");
				sb.append("<itemId>" + id + "</itemId>");
				sb.append("<strength>" + strength + "</strength>");
				sb.append("<totalQty>" + totalQty + "</totalQty>");
				sb.append("<batchs>");


					for(StoreItemBatchStock stock : batchNoList ){
						sb.append("<batch>");
						sb.append("<batchId>"+stock.getId()+"</batchId>");
						sb.append("<batchNumber>"+stock.getBatchNo()+"</batchNumber>");
						sb.append("</batch>");
					}

				sb.append("</batchs>");
			sb.append("</item>");

		} catch (Exception e) {
			e.printStackTrace();
		}
		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}

		// return new ModelAndView(jsp, "map", map);
	}

	//by ashutosh
	public void fillItemsInGridForOPDDir(HttpServletRequest request,
			HttpServletResponse response) {

		Box box = HMSUtil.getBox(request);
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----

		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		int itemId = 0;

		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");

		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));

		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		// String itemNameField = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();

		List objectList = new ArrayList();
		List<StoreItemBatchStock> batchNoList = new ArrayList<StoreItemBatchStock>();
		try {
			if (request.getParameter("itemId") != null) {
				itemId = Integer.parseInt(request.getParameter("itemId"));

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		dataMap.put("itemId", itemId);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.fillItemsInGridForOPDDir(dataMap);
		if (map.get("itemList") != null) {
			objectList = (List) map.get("itemList");
		}
		List listOfItemsStock=new ArrayList();
		if (map.get("listOfItemsStock") != null) {
			listOfItemsStock = (List) map.get("listOfItemsStock");
		}
		List listOfItemsStockInStores=new ArrayList();

		if (map.get("listOfItemsStockInStores") != null) {
			listOfItemsStockInStores = (List) map.get("listOfItemsStockInStores");
		}


		if (map.get("batchNoList") != null) {
			batchNoList = (List) map.get("batchNoList");
		}

		StringBuffer sb = new StringBuffer();
		try {

			MasStoreItem masStoreItem = (MasStoreItem) objectList.get(0);
			String pvmsNo = masStoreItem.getPvmsNo();

			String strength=(String) (masStoreItem.getStrength()!=null?masStoreItem.getStrength()!=null:"0");
				int id = masStoreItem.getId();
				float totalQty=0;
				float totalStockQty=0;

				Iterator itr= listOfItemsStock.iterator();

					while(itr.hasNext())
					{
						 Object[] pair = (Object[]) itr.next();
			         	 int item_Id=Integer.parseInt(pair[0].toString());
			         	 if(item_Id==id)
			         	 {
			         	   totalQty=Float.parseFloat(pair[1].toString());
			         	 }
					}


					Iterator itrs= listOfItemsStockInStores.iterator();

					while(itrs.hasNext())
					{
						 Object[] pair = (Object[]) itrs.next();
			         	 int item_Id=Integer.parseInt(pair[0].toString());
			         	 if(item_Id==id)
			         	 {
			         		totalStockQty=Float.parseFloat(pair[1].toString());
			         	 }
					}









				sb.append("<item>");
				sb.append("<au>"
						+ masStoreItem.getItemConversion().getPurchaseUnit()
								.getUnitName() + "</au>");
				sb.append("<pvms>" + pvmsNo + "</pvms>");
				sb.append("<itemId>" + id + "</itemId>");
				sb.append("<strength>" + strength + "</strength>");
				sb.append("<totalQty>" + totalQty + "</totalQty>");
				sb.append("<totalStockQty>" + totalStockQty + "</totalStockQty>");
				sb.append("<dangerousDrug>" +(masStoreItem.getDangerousDrug()!=null?masStoreItem.getDangerousDrug():"") + "</dangerousDrug>");
				sb.append("<batchs>");


					for(StoreItemBatchStock stock : batchNoList ){
						sb.append("<batch>");
						sb.append("<batchId>"+stock.getId()+"</batchId>");
						sb.append("<batchNumber>"+stock.getBatchNo()+"</batchNumber>");
						sb.append("</batch>");
					}

				sb.append("</batchs>");
			sb.append("</item>");

		} catch (Exception e) {
			e.printStackTrace();
		}
		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}

		// return new ModelAndView(jsp, "map", map);
	}



	//end by ashutosh








	public void fillItemsInGridForLotNo(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		String lotNo = "";
		List objectList = new ArrayList();
		try {
			if (request.getParameter("lotNo") != null) {
				lotNo = request.getParameter("lotNo");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		dataMap.put("lotNo", lotNo);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.fillItemsInGridForLotNo(dataMap);
		if (map.get("itemList") != null) {
			objectList = (List) map.get("itemList");
		}
		StringBuffer sb = new StringBuffer();
		try {

			StoreItemBatchStock stock = (StoreItemBatchStock) objectList.get(0);
			String pvmsNo = stock.getItem().getPvmsNo();

			String nomenclature = stock.getItem().getNomenclature();
			int itemId = stock.getItem().getId();

			sb.append("<item>");

			sb.append("<pvms>" + pvmsNo + "</pvms>");
			sb.append("<nomenclature>" + nomenclature + "</nomenclature>");
			sb.append("<itemId>" + itemId + "</itemId>");

			sb.append("</item>");

		} catch (Exception e) {
			e.printStackTrace();
		}
		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}

		// return new ModelAndView(jsp, "map", map);
	}

	//
	// *********************************************************************************************************************
	// ------------------------------------End of Methods Written By
	// Vikas------------------------------------------
	// ****************************************************************************************************************

	// ********************* Start Of Modules By Deepti Tevatia
	// ****************************

	// ------------------Return From Dispensary
	// Form----------------------------------

	public ModelAndView showReturnFromDispensaryJsp(HttpServletRequest request,
			HttpServletResponse response) {

		int deptId = 0;
		String returnNo = "";
		int storeFyDocumentNoId = 0;
		HttpSession session = request.getSession();
		String buttonFlag = "";
		Map<String, Object> map = new HashMap<String, Object>();

		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
			map.put("deptId", deptId);
		}
		int hospitalId=0;
		if (session.getAttribute("hospitalId") != null)
		{
			hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));
			map.put("hospitalId", hospitalId);
		}
		if (request.getParameter("buttonFlag") != null) {
			buttonFlag = request.getParameter("buttonFlag");
			int pageNo = Integer.parseInt(request.getParameter("pageNo"));
			if (buttonFlag.equals("next")) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
				if (request.getParameter("returnNo") != null) {
					returnNo = (String) request.getParameter("returnNo");
				}
				pageNo++;
				// map.put("returnNo", returnNo);
				map.put("pageNo", pageNo);
				map.put("deptId", deptId);
				map.put("buttonFlag", buttonFlag);
			}
		}
		map = storesHandlerService.showReturnFromDispensaryJsp(map);

		jsp = RETURN_FROM_DISPENSARY_JSP;
		jsp += ".jsp";
		title = "Return From Dispensary";
		if (request.getParameter("storeFyDocumentNoId") != null) {
			storeFyDocumentNoId = Integer.parseInt(request
					.getParameter("storeFyDocumentNoId"));
			map.put("storeFyDocumentNoId", storeFyDocumentNoId);
		}
		map.put("returnNo", returnNo);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);

	}

	/*
	 * method to open the pop up screen after selecting the brand name and
	 * window will populate the grid with the data and user can issue the
	 * quantity there onn the screen.
	 */
	/*
	 * public ModelAndView showStockDetailsForReturnDispensary(
	 * HttpServletRequest request, HttpServletResponse response) {
	 * //System.out.println
	 * ("StoresController.showStockDetailsForReturnDispensary()"); session =
	 * request.getSession(); int deptId =
	 * Integer.parseInt(request.getParameter("deptId")); String date =
	 * request.getParameter("date"); String time = request.getParameter("time");
	 * int rowVal = Integer.parseInt(request.getParameter("rowVal")); String
	 * fromDateToDate = request.getParameter("fromDateToDate"); int brandId =
	 * Integer.parseInt(request.getParameter("brandId"));
	 *
	 * Map<String, Object> map = new HashMap<String, Object>();
	 * map.put("deptId", deptId); map.put("brandId", brandId); map.put("rowVal",
	 * rowVal); map =
	 * storesHandlerService.showStockDetailsForReturnDispensary(map); // jsp =
	 * STOCK_DETAILS_RETURN_DISPENSARY_JSP; // jsp += ".jsp"; title = "Stock
	 * Details"; map.put("deptId", deptId); map.put("date", date);
	 * map.put("time", time); map.put("fromDateToDate", fromDateToDate);
	 * map.put("contentJsp", jsp); map.put("title", title); return new
	 * ModelAndView(jsp, "map", map); }
	 */
	public ModelAndView showStockDetailsForReturnDispensary(
			HttpServletRequest request, HttpServletResponse response) {
		
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String date = request.getParameter("date");
		String time = request.getParameter("time");
		int brandId = 0;
		int rowVal = 0;
		try {
			rowVal = Integer.parseInt(request.getParameter("rowVal"));
			String fromDateToDate = request.getParameter("fromDateToDate");
			brandId = Integer.parseInt(request.getParameter("brandId"));
		} catch (Exception e) {
			e.printStackTrace();
		}
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("deptId", deptId);
		map.put("brandId", brandId);
		map.put("rowVal", rowVal);
		map = storesHandlerService.showStockDetailsForReturnDispensary(map);
		//
		jsp = STOCK_DETAILS_RETURN_DISPENSARY_JSP;
		// jsp += ".jsp";
		title = "Stock Details";
		map.put("deptId", deptId);
		map.put("date", date);
		map.put("time", time);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

// javed khan
	@SuppressWarnings("unchecked")
	public ModelAndView submitReturnDispensaryDetails(
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		List pvmsList = new ArrayList();
		List nomaenclature=new ArrayList();
		List AccountUnit=new ArrayList();
		List batchNumberList = new ArrayList();
		List expiryDateList = new ArrayList();
		List issQtyList = new ArrayList();
		List amountList = new ArrayList();
		List brandNameList = new ArrayList();
		List costPriceList = new ArrayList();
		List storeItemBatchStockIdList = new ArrayList();
		List itemIdList = new ArrayList(); //javed
		List brandIdList = new ArrayList(); //javed
		String itemId = request.getParameter("itemId");
		String returnNo = request.getParameter(RETURN_NO);
		String returnDate = request.getParameter(RETURN_DATE);
		String referenceNo = request.getParameter(REFERENCE_NO);



		int fromDeptId = 0;
		int toDeptId = 0;
		int receivedById = 0;
		int returnById = 0;
		String remarks = "";
		String reason = "";
		if (request.getParameter(FROM_WARD) != null
				&& !request.getParameter(FROM_WARD).equals("0")) {
			fromDeptId = Integer.parseInt(request.getParameter(FROM_WARD));
		}
		if (request.getParameter(TO_WARD) != null
				&& !(request.getParameter(TO_WARD).equals("0"))) {
			toDeptId = Integer.parseInt(request.getParameter(TO_WARD));
		}
		if (request.getParameter(RECEIVED_BY_ID) != null
				&& !(request.getParameter(RECEIVED_BY_ID).equals("0"))) {
			receivedById = Integer.parseInt(request
					.getParameter(RECEIVED_BY_ID));
		}
		if (request.getParameter(RETURN_BY_ID) != null
				&& !(request.getParameter(RETURN_BY_ID).equals("0"))) {
			returnById = Integer.parseInt(request.getParameter(RETURN_BY_ID));
		}
		if (request.getParameter(REMARKS) != null) {
			remarks = request.getParameter(REMARKS);
		}
		if (request.getParameter(REASON) != null) {
			reason = request.getParameter(REASON);
		}
		String date = request.getParameter("date");
		String time = request.getParameter("time");
		// String fromDateToDate = request.getParameter("fromDateToDate");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		String userName = (String) session.getAttribute("userName");
		int storeFyDocumentNoId = Integer.parseInt(request.getParameter("storeFyDocumentNoId"));
		            // int wardIssueNo =
		           // Integer.parseInt(request.getParameter("ipissueno"));
		String item []=request.getParameterValues("itemId");
		String issueQty []=request.getParameterValues("issueQty");

		//String batchNo []=request.getParameterValues("batchNo"); //javed
		String stockId [] =request.getParameterValues(BATCH_ID);   // javed
		String expiryDate []=request.getParameterValues("expiryDate");
		String Nomenclature []=request.getParameterValues("Nomenclature");
	    String aU []=request.getParameterValues("aU");
	    String batchNo1 []=request.getParameterValues("batchNo");
	    

		int counter = Integer.parseInt(request.getParameter("counter"));
		// javed khan ***************
		String sr []=request.getParameterValues(SR_NO);
	//for (int i = 0; i < counter; i++) {
		for (int i = 1; i <= sr.length; i++) {
			
				itemIdList.add(request.getParameter("itemId" + i));

				//issQtyList.add(issueQty[i]);
				issQtyList.add(request.getParameter("issueQty" + i));				                                         

				
				//storeItemBatchStockIdList.add(stockId[i]);
				storeItemBatchStockIdList.add(request.getParameter(BATCH_ID + i));

				//pvmsList.add(pvmsNo[i]);
				pvmsList.add(request.getParameter("pvmsNo1" + i));			

				//nomaenclature.add(Nomenclature[i]);
				nomaenclature.add(request.getParameter("Nomenclature" + i));


			
		}
		dataMap.put("fromDeptId", fromDeptId);
		dataMap.put("toDeptId", toDeptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("date", date);
		dataMap.put("time", time);
		dataMap.put("returnNo", returnNo);
		dataMap.put("returnDate", returnDate);
		dataMap.put("referenceNo", referenceNo);
		dataMap.put("receivedById", receivedById);
		dataMap.put("returnById", returnById);
		dataMap.put("remarks", remarks);
		dataMap.put("reason", reason);
		dataMap.put("storeFyDocumentNoId",storeFyDocumentNoId);
		dataMap.put("userName", userName);


		dataMap.put("itemIdList", itemIdList);  // javed khan		
		dataMap.put("batchNumberList", batchNumberList);		
		dataMap.put("storeItemBatchStockIdList", storeItemBatchStockIdList);
		dataMap.put("pvmsList", pvmsList);	
		dataMap.put("nomaenclature", nomaenclature);	
		dataMap.put("issQtyList", issQtyList);
		int storeGrnInternalId=0;
		String successfullyAdded = "";
		map = storesHandlerService.submitReturnDispensaryDetails(dataMap);
		successfullyAdded = "" + map.get("succesfullyAdded");
		storeGrnInternalId = Integer.parseInt("" + map.get("storeGrnInternalId"));
		if (successfullyAdded.equals("true")) {
			message = "Data  saved Successfully .";
		} else {
			message = "Error Ocurred Please Try Again!!";
		}
		
		jsp = "messageForStock.jsp";

		url = "/hms/hms/stores?method=showReturnFromDispensaryJsp";
		map.put("url", url);
		map.put("flagGrn", "departmentReturn");
		map.put("flag", "return");
		map.put("message", message);
		
		
		map.put("storeGrnInternalId", storeGrnInternalId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView showDeleteReturnFromDispensary(
			HttpServletRequest request, HttpServletResponse response) {

		HttpSession session = request.getSession();

		String returnNo = request.getParameter("returnNo");

		Map<String, Object> map = new HashMap<String, Object>();
		map.put("returnNo", returnNo);
		map = storesHandlerService.showDeleteReturnFromDispensary(map);
		//

		jsp = DELETE_RETURN_DISPENSARY_JSP;

		title = "Delete Return From Dispensary";

		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView deleteStockDetailsReturnToDispensary(
			HttpServletRequest request, HttpServletResponse response) {
		session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		int returnTId = Integer.parseInt(request.getParameter("parent"));
		map.put("returnTId", returnTId);
		boolean successfullyDeleted = storesHandlerService
				.deleteStockDetailsReturnToDispensary(map);

		String messageTOBeVisibleToTheUser = "";
		if (successfullyDeleted) {
			messageTOBeVisibleToTheUser = "Stock  has been Deleted Successfully !!";
		} else {
			messageTOBeVisibleToTheUser = "Error Ocurred Please Try Again!!";
		}
		jsp = "message";

		url = "/hms/hms/stores?method=showReturnFromDispensaryJsp";
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	@SuppressWarnings("unchecked")
	public ModelAndView searchReturnToDispensary(HttpServletRequest request,
			HttpServletResponse response) throws IOException {

		String fromDate = "";
		String toDate = "";
		int supplierId = 0;
		String includedJsp = "";
		int returnId = 0;
		String jsp = SEARCH_RETURN_DISPENSARY_JSP;
		jsp += ".jsp";
		int deptId = 0;
		int hospitalId = 0;
		String returnNo = "";
		int storeFyDocumentNoId = 0;
		HttpSession session = request.getSession();
		String buttonFlag = "";
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		int pageNo = 0;
		pageNo = Integer.parseInt(request.getParameter("pageNo"));
		pageNo++;
		if (request.getParameter("buttonFlag") != null) {
			buttonFlag = request.getParameter("buttonFlag");

			if (buttonFlag.equals("next")) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
				if (request.getParameter("returnNo") != null) {
					returnNo = (String) request.getParameter("returnNo");
				}

				map.put("pageNo", pageNo);
				map.put("deptId", deptId);
				map.put("buttonFlag", buttonFlag);

			}
		}
		if (session.getAttribute("hospitalId") != null)
		{
			hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));
			}
		map.put("hospitalId", hospitalId);
		infoMap = storesHandlerService.showReturnFromDispensaryJsp(map);

		Map<String, Object> searchFieldMap = new HashMap<String, Object>();
		try {
			if (request.getParameter(FROM_DATE) != null) {
				fromDate = request.getParameter(FROM_DATE);
			}
			if (request.getParameter(TO_DATE) != null) {
				toDate = request.getParameter(TO_DATE);
			}
			if (request.getParameter(ISSUE_RETURN_ID) != null) {
				returnId = Integer.parseInt(request
						.getParameter(ISSUE_RETURN_ID));
			}
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
		} catch (Exception e) {
			e.printStackTrace();		}

		searchFieldMap.put("fromDate", fromDate);
		searchFieldMap.put("toDate", toDate);
		searchFieldMap.put("returnId", returnId);
		searchFieldMap.put("pageNo", pageNo);
		searchFieldMap.put("deptId", deptId);
		searchFieldMap.put("hospitalId", hospitalId);

		if (searchFieldMap.size() != 0) {
			map = storesHandlerService.searchReturnToDispensary(searchFieldMap);
			includedJsp = "done";
		} else {
		}
		map.put("infoMap", infoMap);
		map.put("returnNo", returnNo);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("pageNo", pageNo);
		map.put("includedJsp", includedJsp);
		map.put("returnId", returnId);
		return new ModelAndView("indexB", "map", map);
	}
	public ModelAndView getItemListForDepartmentReturn(
			HttpServletRequest request, HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		String autoHint = "";
		// int returnId = 0;
		Map<String, Object> dataMap = new HashMap<String, Object>();
		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			/*
			 * if (request.getParameter("returnId") != null) { returnId =
			 * Integer.parseInt(""+ (request.getParameter("returnId"))); }
			 */
			List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
			dataMap.put("autoHint", autoHint);
			dataMap.put("deptId", deptId);
			dataMap.put("userName", userName);
			dataMap.put("hospitalId", hospitalId);
			// dataMap.put("returnId",returnId);

			map = storesHandlerService.getItemListForDepartmentReturn(dataMap);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "resultForDepartmentReturn";
		return new ModelAndView(jsp, "map", map);
	}

	// ------------------New Grid for MMF Department
	// Form----------------------------------

	public ModelAndView showMmfDepartmentJsp(HttpServletRequest request,HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		int hospitalId = 0;

		Box box = HMSUtil.getBox(request);
		box.put("storeType", box.get("storeType"));
		box.put("docId", box.get("docId"));

		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}
		if (session.getAttribute("userName") != null) {
			userName = (String) session.getAttribute("userName");
		}
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
		}

		map = storesHandlerService.showMmfDepartment(deptId, hospitalId);
		//map = storesHandlerService.createAndImportMmfDepartmentData(box);
		 jsp = STORE_MMF_DEPARTMENT_JSP;

		 jsp = jsp + ".jsp";
			title = "MMF Entry";
			map.put("contentJsp", jsp);
			map.put("title", title);
			return new ModelAndView("indexB", "map", map);
		 /* comment by javed (22/03/2012)
		//jsp="mmfEntry";
		jsp = jsp + ".jsp";
		title = "MMF Entry";
		String previousPage = "no";

		map.put("previousPage", previousPage);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);*/
	}

	public ModelAndView createAndImportMmfDepartmentData(
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
		}
		box.put("hospitalId", hospitalId);
		box.put("storeType", box.get("storeType"));
		box.put("docId", box.get("docId"));
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.createAndImportMmfDepartmentData(box);
		jsp = STORE_MMF_DEPARTMENT_JSP;

		/*jsp = "mmfDepartmentAddition";*/
		/*jsp="storeMmfDepartment";*/
		jsp = jsp + ".jsp";
		title = "MMF Entry";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
		/*return new ModelAndView(jsp, "map", map);*/
	}

	public ModelAndView resetMmfDepartmentData(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		box.put("storeType", box.get("storeType"));
		box.put("docId", box.get("docId"));
		map = storesHandlerService.resetMmfDepartmentData(box);
		jsp = STORE_MMF_DEPARTMENT_JSP;
		jsp = jsp + ".jsp";
		title = "MMF Entry";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView getMmfDepartmentData(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		int monthForMMF=0;
		int hospitalId = 0 ;
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		box.put("hospitalId", hospitalId);
		box.put("docId", box.get("docId"));
		box.put(CHECKED_BY, box.get("checkedBy").toString());
		box.put(PREPARED_BY, box.get("preparedBy").toString());
		Map<String, Object> map = new HashMap<String, Object>();
		box.put("storeType", box.get("storeType"));
		map = storesHandlerService.getMmfDepartmentData(box);
		/*if(request.getParameter("monthForMMF") != null)
		{
			monthForMMF=Integer.parseInt(request.getParameter("monthForMMF"));
		}*/
		jsp = STORE_MMF_DEPARTMENT_JSP;
		jsp = jsp + ".jsp";
		title = "MMF Entry";
		map.put("title", title);
		map.put("contentJsp", jsp);
		map.put("month", monthForMMF);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView searchMmfDepartmentData(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		box.put("docId", box.get("docId"));
		Map<String, Object> map = new HashMap<String, Object>();
		int hospitalId = 0;
		box.put("storeType", box.get("storeType"));
		if (session.getAttribute("deptId") != null)
			box.put("deptId", session.getAttribute("deptId"));
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		box.put("hospitalId", hospitalId);
		map = storesHandlerService.searchMmfDepartmentData(box);
		jsp = STORE_MMF_DEPARTMENT_JSP;
		jsp = jsp + ".jsp";
		title = "MMF Entry";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}
	public ModelAndView showAddMmfDepartmentJsp(HttpServletRequest request,
			HttpServletResponse response) {
		int deptId = 0;
		int hospitalId = 0;
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		Users users = null;
		if (session.getAttribute("users") != null) {
			users = (Users) session.getAttribute("users");
		}
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		box.put("userName", userName);
		box.put("hospitalId", hospitalId);
		box.put("deptId", deptId);

		box.put(CHECKED_BY, box.get("checkedBy").toString());
		box.put(PREPARED_BY, box.get("preparedBy").toString());
		box.put("docId", box.get("docId"));
		box.put("storeType", box.get("storeType"));
		box.put("userId", users.getId());
		map = storesHandlerService.getItemDetails(box);
		jsp = MMF_DEPARTMENT_ADDITION_JSP;
		title = "Add MMF";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("mmfMasterId", box.get(MMF_DEPARTMENT_M_ID));
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView showAddMmfDepartmentJspForNextRecord(
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		box.put(CHECKED_BY, box.get("checkedBy").toString());
		box.put(PREPARED_BY, box.get("preparedBy").toString());
		box.put("storeType", box.get("storeType"));
		box.put("docId", box.get("docId"));
		int itemId = 0;
		if (request.getParameter("buttonName") != null) {
			Vector items = box.getVector("itemId");
			int max = items.size() - 1;
			itemId = Integer.valueOf(items.get(max).toString());
			box.put("itemId", itemId);
		} else {

			itemId = Integer.parseInt(box.getString("itemIdForNextRecord"));
			box.put("itemId", itemId);
		}

		map = storesHandlerService
				.getItemDetailsForMmfDepartmentJspForNextRecord(box);
		jsp = MMF_DEPARTMENT_ADDITION_JSP;

		title = "Add MMF";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("mmfMasterId", box.get(MMF_DEPARTMENT_M_ID));
		map.put("internalIndentId", box.get("internalIndentId"));
		map.put("hiddenFieldForRecords", "true");
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView doAddMmfItems(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();

		// add by javed khan
		int hospitalId= 0;
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));



		Box box = HMSUtil.getBox(request);
		box.put("storeType", box.get("storeType"));
		box.put("docId", box.get("docId"));
		box.put(CHECKED_BY, box.get("checkedBy").toString());
		box.put(PREPARED_BY, box.get("preparedBy").toString());
		box.put("hospitalId", hospitalId);// add by javed khan
		map = storesHandlerService.doAddMmfItems(box);
		jsp = MMF_DEPARTMENT_ADDITION_JSP;
		title = "Add MMF Items";
		map.put("hiddenFieldForRecords", box.get("hiddenFieldForRecords"));
		map.put("contentJsp", jsp);
		map.put("title", title);
		// map.put("mmfMasterId", box.get(MMF_DEPARTMENT_M_ID));
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView updateGridItemsInMmf(HttpServletRequest request,HttpServletResponse response) {
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		box.put("storeType", box.get("storeType"));
		box.put("docId", box.get("docId"));
		map = storesHandlerService.updateGridItemsInMmf(box);
		jsp = STORE_MMF_DEPARTMENT_JSP;
		jsp += ".jsp";
		title = "Store MMF";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}
	public ModelAndView getCurrentYearMmf(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		box.put("storeType", box.get("storeType"));
		box.put("storeType", box.get("storeType"));
		box.put("docId", box.get("docId"));
		int month=box.getInt(MONTH);
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.getCurrentYearMmf(box);
		jsp = STORE_MMF_DEPARTMENT_JSP;
		jsp = jsp + ".jsp";
		title = "MMF Entry";
		map.put("contentJsp", jsp);
		map.put("month", month);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView deleteGridItemsForMmf(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		box.put("storeType", box.get("storeType"));
		box.put("docId", box.get("docId"));
		map = storesHandlerService.deleteGridItemsForMmf(box);
		jsp = STORE_MMF_DEPARTMENT_JSP;
		jsp += ".jsp";
		title = "MMF Deletion ";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView printMmfEntryJsp(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		int docId = 0;
		String docNo = "";

		String period = null;

		HttpSession session = request.getSession();
		requestParameters.put("DEPART", session.getAttribute("deptId"));
		requestParameters.put("hospitalId", session.getAttribute("hospitalId"));
		try {
			// if(request.getParameter("testMmfNo") != null &&
			// !(request.getParameter("testMmfNo").equals(""))){
			// docNo = request.getParameter("testMmfNo");
			// docNo = storesHandlerService.getMmfNo(box.getInt("newDocId"));
			docNo = box.get("docId");

			requestParameters.put("DOC_NO", docNo);
			// }

			if (box.get("storeType").equals("e")) {
				requestParameters.put("storeType", box.get("storeType"));
				requestParameters.put("MMFStoreType", "Expendable");
			} else if (box.get("storeType").equals("h")) {
				requestParameters.put("storeType", box.get("storeType"));
				requestParameters.put("MMFStoreType", "ECHS");
			}
			requestParameters.put("HOSP_NAME", "HOSP_NAME");
		} catch (Exception e) {
			e.printStackTrace();
		}
		Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
HMSUtil.generateReport("mmf_entryForm", requestParameters,(Connection) connectionMap.get("con"), response,getServletContext());
//return new ModelAndView("indexB", "map", map);
return null;

		/*Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		byte[] bytes = null;

		try {
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(MMF_ENTRYFORM), requestParameters,
					(Connection) connectionMap.get("conn"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setHeader("Content-Disposition", "attachment; filename="
				+ MMF_ENTRYFORM + ".pdf");
		response.setContentLength(bytes.length);
		ServletOutputStream ouputStream;
		try {
			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

		return null;*/
	}

	/*
	 * Start of methods Methods for raising CIV
	 */
	// -----------------------New Grid for Department
	// Indent-------------------------------------------
	public ModelAndView showDepartmentIndentJsp(HttpServletRequest request,HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		int hospitalId=0;
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}
		if (session.getAttribute("hospitalId") != null)
		{
			hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));
		}
		map = storesHandlerService.showDepartmentIndent(deptId,hospitalId);
		jsp = STORE_DEPARTMENT_INDENT_JSP;
		jsp = jsp + ".jsp";
		title = "Indent To Department";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView getDepartmentIndentData(HttpServletRequest request,
			HttpServletResponse response)
	{
		HttpSession session = request.getSession();
		int hospitalId=0;
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		if (session.getAttribute("hospitalId") != null)
		{
			hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));
			box.put("hospitalId", hospitalId);
		}
		if (request.getParameter("pvmsNo") != null) {
			String pvmsNo = request.getParameter("pvmsNo");
			box.put("pvmsNo", pvmsNo);
		}
		int deptId = 0;
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}
		box.put("deptId", deptId);
		map = storesHandlerService.getDepartmentIndentData(box);

		if (map.get("storeInternalIndentMList") == null
				|| map.get("storeInternalIndentMList").equals("")) {
			map = storesHandlerService.showDepartmentIndent(deptId,hospitalId);
		} else {
			List<StoreInternalIndentM> indentM = (List) map
					.get("storeInternalIndentMList");
			if (indentM.size() == 0) {
				map = storesHandlerService.showDepartmentIndent(deptId,hospitalId);
			}
		}

		jsp = STORE_DEPARTMENT_INDENT_JSP;
		title = "Department Indent";

		jsp = jsp + ".jsp";
        map.put("deptId", deptId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView createAndImportDepartmentIndentData(
			HttpServletRequest request, HttpServletResponse response) {

		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.createAndImportDepartmentIndentData(box);
		jsp = STORE_DEPARTMENT_INDENT_JSP;
		jsp = jsp + ".jsp";
		title = "Indent To Department";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showAddDepartmentIndentJsp(HttpServletRequest request,
			HttpServletResponse response)
	{

				Map<String, Object> map = new HashMap<String, Object>();
		synchronized (this) {
			Box box = HMSUtil.getBox(request);
			HttpSession session = request.getSession();
			int deptId = Integer.valueOf(session.getAttribute("deptId").toString());

			int hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId")); // add by javed khan
			int storeDepartmentId = 0;
			if (request.getParameter("storeDepartmentId") != null
					&& !request.getParameter("storeDepartmentId").equals("")) {
				storeDepartmentId = Integer.parseInt(request
						.getParameter("storeDepartmentId"));
			}
			// page---"+ box.get("numOfRows"));
			box.put("deptId", deptId);
			box.put("hospitalId", hospitalId); // add by javed khan

			// map = storesHandlerService.getItemDetailsForDepartmentIndent(box);
			map = storesHandlerService.showAddDepartmentIndentJsp(box);
			jsp = DEPARTMENT_INDENT_ADDITION_JSP;
			title = "Add Department Indent";
			map.put("contentJsp", jsp);
			map.put("title", title);
			map.put("internalIndentId", box.get("internalIndentId"));
			map.put("storeDepartmentId", storeDepartmentId);
		}
		return new ModelAndView(jsp, "map", map);

	}
	public ModelAndView indentTrackingHistoryJsp(HttpServletRequest request, HttpServletResponse response)
	{
		Map<String, Object> map = new HashMap<String, Object>();
		synchronized (this) {
			Box box = HMSUtil.getBox(request);
			HttpSession session = request.getSession();
			int deptId = Integer.valueOf(session.getAttribute("deptId").toString());
			int hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId")); 
			int indentId = 0;
			if (request.getParameter("indentId") != null && !request.getParameter("indentId").equals("")) 
				indentId = Integer.parseInt(request.getParameter("indentId"));
			box.put("deptId", deptId);
			box.put("hospitalId", hospitalId); 
			map.put("indentId", indentId);
			map = storesHandlerService.indentTrackingHistoryJsp(map);
			jsp = "indentTrackingDetails";
			title = "Add Department Indent";
			map.put("contentJsp", jsp);
			map.put("title", title);
		}
		return new ModelAndView(jsp, "map", map);
		
	}
	public ModelAndView showWardPrescription(HttpServletRequest request, HttpServletResponse response)
	{
		Map<String, Object> map = new HashMap<String, Object>();
		synchronized (this) {
			Box box = HMSUtil.getBox(request);
			HttpSession session = request.getSession();
			int deptId = Integer.valueOf(session.getAttribute("deptId").toString());
			int hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId")); 
			box.put("deptId", deptId);
			box.put("hospitalId", hospitalId); 
			map = storesHandlerService.showWardPrescription(map);
			jsp = "wardPrescription.jsp";
			title = "Add Department Indent";
			map.put("contentJsp", jsp);
			map.put("title", title);
		}
		return new ModelAndView("index", "map", map);
		
	}

	public ModelAndView showAddDepartmentIndentJspForNextRecord(
			HttpServletRequest request, HttpServletResponse response) {
		int itemId = 0;
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		int deptId = Integer.valueOf(session.getAttribute("deptId").toString());
		box.put("deptId", deptId);

		if (request.getParameter("buttonName") != null) {
			Vector items = box.getVector("itemId");
			int max = items.size() - 1;
			itemId = Integer.valueOf(items.get(max).toString());
			box.put("itemId", itemId);
		} else {

			itemId = Integer.parseInt(box.getString("itemIdForNextRecord"));
			box.put("itemId", itemId);
		}

		map = storesHandlerService
				.getItemDetailsForDepartmentIndentForNextRecord(box);
		PagedArray pagedArray = (PagedArray) map.get("pagedArray");
		jsp = DEPARTMENT_INDENT_ADDITION_JSP;
		title = "Add Department Indent";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("pagedArray", pagedArray);
		map.put("internalIndentId", box.get("internalIndentId"));
		map.put("hiddenFieldForRecords", "true");
		return new ModelAndView(jsp, "map", map);

	}

	/*
	 * End of methods Methods for raising CIV
	 */


	public ModelAndView updateGridItemsInDepartmentIndent(
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		map = storesHandlerService.updateGridItemsInDepartmentIndent(box);
		jsp = STORE_DEPARTMENT_INDENT_JSP;
		jsp += ".jsp";
		title = "Update Department Indent";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}



	// ---------------------------------- Physical
	// Stock----------------------------------------

	@SuppressWarnings("unchecked")
	public ModelAndView searchPhysicalStock(HttpServletRequest request,
			HttpServletResponse response) throws ServletRequestBindingException {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();

		int departmentId = 0;

		if (request.getParameter(DEPARTMENT_ID) != null) {
			departmentId = Integer
					.parseInt(request.getParameter(DEPARTMENT_ID));
		}
		map = storesHandlerService.searchPhysicalStock(departmentId);

		jsp = "soDetailPhysicalStock";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("departmentId", departmentId);
		return new ModelAndView(jsp, "map", map);
	}




	/*
	 * public ModelAndView storeItemBatch(HttpServletRequest request,
	 * HttpServletResponse response) {
	 *
	 *
	 * session = request.getSession(); boolean successfully = false; Map<String,
	 * Object> map = new HashMap<String, Object>(); int adjustmentID =
	 * Integer.parseInt(request.getParameter("adjustmentID")); int brandId =
	 * Integer.parseInt(request.getParameter("brandId")); String batchNo =
	 * request.getParameter("batchNo"); BigDecimal costPrice = new
	 * BigDecimal(request.getParameter("costPrice")); BigDecimal surplusStock =
	 * new BigDecimal(request .getParameter("surplusStock")); BigDecimal
	 * deficient = new BigDecimal(request.getParameter("deficient"));
	 *
	 * //System.out.println(" id in "+ adjustmentID+ "===brand Id selected coming
	 * in controller for modification===="+ brandId); //System.out.println(" Batch
	 * number for Transaction table====" + batchNo + "===rate of the brand
	 * selected==========" + costPrice + "surplus=====" + surplusStock);
	 *
	 * map.put("adjustmentID", adjustmentID); map.put("brandId", brandId);
	 * map.put("batchNo", batchNo); map.put("costPrice", costPrice);
	 * map.put("surplusStock", surplusStock); map.put("deficient", deficient);
	 *
	 * successfully = storesHandlerService.storeItemBatch(map);
	 *
	 * if (successfully) {
	 *
	 * jsp = STORE_PHYSICAL_STOCK_JSP; } else { jsp = STORE_PHYSICAL_STOCK_JSP;
	 * } jsp += ".jsp"; map.put("message", message); map.put("contentJsp", jsp);
	 * map.put("title", title); return new ModelAndView("index", "map", map); }
	 */


	// ********************************END Of Modules By Deepti
	// Tevatia****************************

	// -----------------------------------------------------------------------------------------------------------------
	// -------------------------------------Start of Functions Written By
	// Mansi-------------------------------------------
	// -----------------------------------------------------------------------------------------------------------------

	// ---------------------------Store Balance ---------------------------



	@SuppressWarnings("unchecked")
	public ModelAndView searchBalance(HttpServletRequest request,
			HttpServletResponse response) {
		//String fromDate = "";
		//String toDate = "";
		String balanceNo = "";
		/*Date fromDate=new Date();
		Date toDate=new Date();*/
		Date fromDate=null;
		Date toDate=null;
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> tempMap = new HashMap<String, Object>();
		Map<String, Object> searchFieldMap = new HashMap<String, Object>();
		List<StoreBalanceM> searchStoreBalanceMList = new ArrayList<StoreBalanceM>();
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session -----------
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> dataMap = new HashMap<String, Object>();
		searchFieldMap.put("deptId", deptId);
		searchFieldMap.put("hospitalId", hospitalId);
		searchFieldMap.put("userName", userName);
		try {
			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));

			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
			}
			if (request.getParameter(SEARCH_BALANCE_NO) != null) {
				balanceNo = request.getParameter(SEARCH_BALANCE_NO);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		//searchFieldMap.put("fromDate", fromDate);
		//searchFieldMap.put("toDate", toDate);
		searchFieldMap.put("fromDate", request.getParameter(FROM_DATE));
		searchFieldMap.put("toDate", request.getParameter(TO_DATE));

		searchFieldMap.put("max", balanceNo);
		try {
			tempMap = storesHandlerService.showBalance(searchFieldMap);
			if (tempMap.get("searchStoreBalanceMList") != null)
				searchStoreBalanceMList = (List) tempMap
						.get("searchStoreBalanceMList");
			map = storesHandlerService.searchBalance(searchFieldMap);
			map.put("searchStoreBalanceMList", searchStoreBalanceMList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = SEARCH_BALANCE_JSP;
		jsp = jsp + ".jsp";
		title = "Search Balance";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView modifyBalance(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> map2 = new HashMap<String, Object>();
		List<MasEmployee> approvedByList = new ArrayList<MasEmployee>();
		List<StoreBalanceM> searchStoreBalanceList = new ArrayList<StoreBalanceM>();
		//--- Retriving User Name,Hospital Id,Department Id from Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);

		int pageNo = 1;
		jsp = BALANCE_MODIFY_JSP;
		jsp += ".jsp";
		int radio_str = 0;
		if (request.getParameter("ValueOfPage") != null) {
			pageNo = Integer.parseInt(request.getParameter("ValueOfPage"));
		}
		/*if (request.getParameter("tempRadioValue") != null) {
			radio_str = Integer
					.parseInt(request.getParameter("tempRadioValue"));*/
		if (request.getParameter("balanceId") != null) {
			radio_str = Integer
					.parseInt(request.getParameter("balanceId"));
			map = (Map) storesHandlerService.getBalance1ModifyMap(radio_str,
					pageNo, dataMap);

		}

		map2 = storesHandlerService.showBalance(dataMap);
		searchStoreBalanceList = (List) map2.get("searchStoreBalanceList");
		approvedByList = (List) map2.get("approvedByList");

		map.put("searchStoreBalanceList", searchStoreBalanceList);
		map.put("approvedByList", approvedByList);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("radio_str", radio_str);
		map.put("pageNo", pageNo);

		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView updateNextOrSubmitBalance(HttpServletRequest request,
			HttpServletResponse response) throws java.text.ParseException {
		// Local Variable Declaration
		Box box = HMSUtil.getBox(request);
		StoreBalanceM storeBalanceM = new StoreBalanceM();
		StoreBalanceT storeBalanceT = new StoreBalanceT();
		List<StoreBalanceT> storeIndentTListForUpdate = new ArrayList<StoreBalanceT>();
		List<StoreBalanceT> storeIndentTListForAdd = new ArrayList<StoreBalanceT>();
		Map<String, Object> masterAndDetailMap = new HashMap<String, Object>();
		List<StoreBalanceT> gridIndentTList = new ArrayList<StoreBalanceT>();
		StoreBalanceM storeBalanceMObj = new StoreBalanceM();
		Map map2 = new HashMap();

		String balanceNo = "";
		int approvedByEmployeeId = 0;
		String remarks = "";
		Date balanceDate = null;
		String nrs = "";

		int rows = 0;
		int balanceId = 0;
		Map infoMap = new HashMap();
		int totalRecords = 0;
		int idArrayLength = 0;
		int length = 0;
		Date[] expDateArray = new Date[100];
		Date expDate = null;
		String messageTOBeVisibleToTheUser = "";
		Map<String, Object> utilMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String lastChgDate = (String) utilMap.get("currentDate");
		String lastChgTime = (String) utilMap.get("currentTime");
		String lastChgBy = "";
		// Grid related Variables
		int pageNo = 1;
		/** Represents Page No */
		String buttonName = "";
		/** Represents which button user clicked in JSP(Next/Submit) */
		String noDetailRecords = "no";
		/** Represents */
		String headerStored = "no";
		String url = "";
		int noOfRows = 0;
		// Method Body
		HttpSession session = request.getSession();
		int deptId = 0;
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		int hospitalId = 0;
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));

		try {
			if (request.getParameter("buttonName") != null) {
				buttonName = request.getParameter("buttonName");
			}
			if (request.getParameter("totalRecords") != null) {
				totalRecords = Integer.parseInt(request
						.getParameter("totalRecords"));
			}
			if (request.getParameter("pageNo") != null) {
				pageNo = Integer.parseInt(request.getParameter("pageNo"));

			}

			if (request.getParameter(NO_DETAIL_RECORDS) != null) {
				noDetailRecords = (request.getParameter(NO_DETAIL_RECORDS));

			}
			if (request.getParameter(NO_OF_ROWS) != null) {
				noOfRows = Integer.parseInt(request.getParameter(NO_OF_ROWS));
			}
			if (request.getParameter(BALANCE_ID) != null) {
				balanceId = Integer.parseInt(request.getParameter(BALANCE_ID));
			}
			if (request.getParameter(BALANCE_NO) != null) {
				balanceNo = request.getParameter(BALANCE_NO);
			}
			if (request.getParameter(REMARKS) != null
					&& !(request.getParameter(REMARKS).equals(""))) {
				remarks = request.getParameter(REMARKS);
			}
			if (request.getParameter(APPROVED_BY_EMPLOYEE_ID_BALANCE) != null) {
				approvedByEmployeeId = Integer.parseInt(request
						.getParameter(APPROVED_BY_EMPLOYEE_ID_BALANCE));
			}
			if (request.getParameter(CHANGED_BY) != null
					&& !(request.getParameter(CHANGED_BY).equals(""))) {
				lastChgBy = request.getParameter(CHANGED_BY);
			}
			if (request.getParameter(CHANGED_DATE) != null
					&& !(request.getParameter(CHANGED_DATE).equals(""))) {
				lastChgDate = request.getParameter(CHANGED_DATE);
			}
			if (request.getParameter(CHANGED_TIME) != null
					&& !(request.getParameter(CHANGED_TIME).equals(""))) {
				lastChgTime = request.getParameter(CHANGED_TIME);
			}

			try {
				String te = "";

				if (request.getParameter(BALANCE_DATE) != null) {
					te = (String) (request.getParameter(BALANCE_DATE));
					SimpleDateFormat formatterIn = new SimpleDateFormat(
							"dd/MM/yyyy");
					SimpleDateFormat formatterOut = new SimpleDateFormat(
							"yyyy-MM-dd");
					String date4MySQL = formatterOut.format(formatterIn
							.parse(request.getParameter(BALANCE_DATE)));
					balanceDate = java.sql.Date.valueOf(date4MySQL);

				}
			} catch (Exception e) {
				e.printStackTrace();
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		if (pageNo == 1) {
			try {

				storeBalanceM.setId(balanceId);

				storeBalanceM.setBalanceNo(balanceNo);

				storeBalanceM.setBalanceDate(balanceDate);

				MasEmployee approvedBy = new MasEmployee();
				approvedBy.setId(approvedByEmployeeId);
				storeBalanceM.setApprovedBy(approvedBy);

				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				storeBalanceM.setDepartment(masDepartment);

				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				storeBalanceM.setHospital(masHospital);

				storeBalanceM.setRemarks(remarks);

				storeBalanceM.setLastChgBy(lastChgBy);

				storeBalanceM.setLastChgDate(HMSUtil
						.convertStringTypeDateToDateType(lastChgDate));

				storeBalanceM.setLastChgTime(lastChgTime);

				storeBalanceM.setStatus("o");

			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		BigDecimal[] qtyArray = new BigDecimal[10];
		BigDecimal[] unitRateAmountArray = new BigDecimal[10];
		BigDecimal[] totalAmountArray = new BigDecimal[10];
		try {
			if (noDetailRecords.equals("no")) {

				int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
						SR_NO);
				int idArray[] = null;
				if (request.getParameter(BALANCE_T_ID) != null) {
					idArray = JKTRequestUtils.getRequiredIntParameters(request,
							BALANCE_T_ID);
					idArrayLength = idArray.length;
				}

				int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(
						request, ITEM_ID);

				int brandIdArray[] = JKTRequestUtils.getRequiredIntParameters(
						request, BRAND_ID);
				String batchNoArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, BATCH_NO);

				Vector expriyDateArray = box.getVector(EXPIRY_DATE);
				/*
				 * String expriyDateArray[] = null; if
				 * (request.getParameter(EXPIRY_DATE) != null) { expriyDateArray
				 * = JKTRequestUtils .getRequiredStringParameters(request,
				 * EXPIRY_DATE); }
				 */
				String xx[] = JKTRequestUtils.getRequiredStringParameters(
						request, QTY_BALANCE);
				int xxLegnt = xx.length;
				for (int i = 0; i < xxLegnt; i++) {
					BigDecimal val = new BigDecimal(xx[i]);
					qtyArray[i] = val;
				}
				String yy[] = JKTRequestUtils.getRequiredStringParameters(
						request, UNIT_RATE_BALANCE);
				int yyLegnt = yy.length;
				for (int i = 0; i < yyLegnt; i++) {
					BigDecimal val = new BigDecimal(yy[i]);
					unitRateAmountArray[i] = val;
				}
				String zz[] = JKTRequestUtils.getRequiredStringParameters(request,
						AMOUNT);
				int zzLegnt = zz.length;
				for (int i = 0; i < zzLegnt; i++) {
					BigDecimal val = new BigDecimal(zz[i]);
					totalAmountArray[i] = val;
				}
				length = srNo.length;
				for (int i = 0; i < length; i++) {

					if (idArrayLength > 0) {
						StoreBalanceT storeBalanceTObj = new StoreBalanceT();

						storeBalanceTObj.setId(idArray[i]);

						storeBalanceTObj.setSrNo(srNo[i]);

						MasStoreItem masItem = new MasStoreItem();
						masItem.setId(itemIdArray[i]);
						storeBalanceTObj.setItem(masItem);

						MasStoreBrand masStoreBrand = new MasStoreBrand();
						masStoreBrand.setId(brandIdArray[i]);
						if (brandIdArray[i] != 0) {
							storeBalanceTObj.setBrand(masStoreBrand);
						} else {
							storeBalanceTObj.setBrand(null);
						}

						if (!batchNoArray[i].equals("emptyString")) {
							storeBalanceTObj.setBatchNo(batchNoArray[i]);
						} else {
							storeBalanceTObj.setBatchNo(null);
						}

						try {
							storeBalanceTObj
									.setExpiryDate(HMSUtil
											.convertStringTypeDateToDateType(expriyDateArray
													.get(i).toString()));
						} catch (Exception e) {
							storeBalanceTObj.setExpiryDate(null);
						}

						if (!qtyArray[i].equals("0")) {
							storeBalanceTObj.setQty(qtyArray[i]);
						}

						if (!unitRateAmountArray[i].equals("0")) {
							storeBalanceTObj
									.setUnitRate(unitRateAmountArray[i]);
						}
						if (!totalAmountArray[i].equals("0")) {
							storeBalanceTObj.setTotalAmount(totalAmountArray[i]);
						} else {
							storeBalanceTObj.setTotalAmount(null);
						}
						StoreBalanceM storeBalanceM2 = new StoreBalanceM();
						storeBalanceM2.setId(balanceId);
						storeBalanceTObj.setStoreBalanceM(storeBalanceM2);

						storeIndentTListForUpdate.add(storeBalanceTObj);
					} else {
						// /
						if (itemIdArray[i] != 0) {
							StoreBalanceT storeBalanceTObj = new StoreBalanceT();

							storeBalanceTObj.setSrNo(srNo[i]);

							MasStoreItem masItem = new MasStoreItem();
							masItem.setId(itemIdArray[i]);
							storeBalanceTObj.setItem(masItem);

							MasStoreBrand masStoreBrand = new MasStoreBrand();
							masStoreBrand.setId(brandIdArray[i]);
							if (brandIdArray[i] != 0) {
								storeBalanceTObj.setBrand(masStoreBrand);
							} else {
								storeBalanceTObj.setBrand(null);
							}
							if (!batchNoArray[i].equals("emptyString")) {
								storeBalanceTObj.setBatchNo(batchNoArray[i]);
							} else {
								storeBalanceTObj.setBatchNo(null);
							}
							try {
								storeBalanceTObj
										.setExpiryDate(HMSUtil
												.convertStringTypeDateToDateType(expriyDateArray
														.get(i).toString()));
							} catch (Exception e) {
								storeBalanceTObj.setExpiryDate(null);
							}

							if (!qtyArray[i].equals("0")) {
								storeBalanceTObj.setQty(qtyArray[i]);
							}

							if (!unitRateAmountArray[i].equals("0")) {
								storeBalanceTObj
										.setUnitRate(unitRateAmountArray[i]);
							}
							if (!totalAmountArray[i].equals("0")) {
								storeBalanceTObj.setTotalAmount(totalAmountArray[i]);
							} else {
								storeBalanceTObj.setTotalAmount(null);
							}
							StoreBalanceM storeBalanceM2 = new StoreBalanceM();
							storeBalanceM2.setId(balanceId);
							storeBalanceTObj.setStoreBalanceM(storeBalanceM2);

							storeIndentTListForAdd.add(storeBalanceTObj);
						}
					}
					idArrayLength--;
				}
			} else {
				int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
						SR_NO);
				int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(
						request, ITEM_ID);
				int brandIdArray[] = JKTRequestUtils.getRequiredIntParameters(
						request, BRAND_ID);
				String batchNoArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, BATCH_NO);
				Vector expriyDateArray = box.getVector(EXPIRY_DATE);
				String xx[] = JKTRequestUtils.getRequiredStringParameters(
						request, QTY_BALANCE);
				int xxLegnt = xx.length;
				for (int i = 0; i < xxLegnt; i++) {
					BigDecimal val = new BigDecimal(xx[i]);
					qtyArray[i] = val;
				}
				String yy[] = JKTRequestUtils.getRequiredStringParameters(
						request, UNIT_RATE_BALANCE);
				int yyLegnt = yy.length;
				for (int i = 0; i < yyLegnt; i++) {
					BigDecimal val = new BigDecimal(yy[i]);
					unitRateAmountArray[i] = val;
				}
				String zz[] = JKTRequestUtils.getRequiredStringParameters(request,
						AMOUNT);
				int zzLegnt = zz.length;
				for (int i = 0; i < zzLegnt; i++) {
					BigDecimal val = new BigDecimal(zz[i]);
					totalAmountArray[i] = val;
				}
				/*
				 * String expriyDateArray[] = JKTRequestUtils
				 * .getRequiredStringParameters(request, EXPIRY_DATE);
				 */
				length = srNo.length;
				for (int i = 0; i < length; i++) {

					if (itemIdArray[i] != 0) {
						StoreBalanceT storeBalanceTObj = new StoreBalanceT();
						storeBalanceTObj.setSrNo(srNo[i]);

						MasStoreItem masItem = new MasStoreItem();
						masItem.setId(itemIdArray[i]);
						storeBalanceTObj.setItem(masItem);

						MasStoreBrand masStoreBrand = new MasStoreBrand();
						masStoreBrand.setId(brandIdArray[i]);
						if (brandIdArray[i] != 0) {
							storeBalanceTObj.setBrand(masStoreBrand);
						} else {
							storeBalanceTObj.setBrand(null);
						}
						if (!batchNoArray[i].equals("emptyString")) {
							storeBalanceTObj.setBatchNo(batchNoArray[i]);
						} else {
							storeBalanceTObj.setBatchNo(null);
						}
						try {
							storeBalanceTObj
									.setExpiryDate(HMSUtil
											.convertStringTypeDateToDateType(expriyDateArray
													.get(i).toString()));
						} catch (Exception e) {
							storeBalanceTObj.setExpiryDate(null);
						}
						if (qtyArray[i] != null && !qtyArray[i].equals("0")) {
							storeBalanceTObj.setQty(qtyArray[i]);
						} else {
							storeBalanceTObj.setQty(new BigDecimal("0"));
						}
						if (unitRateAmountArray[i] != null
								&& !unitRateAmountArray[i].equals("0")) {
							storeBalanceTObj
									.setUnitRate(unitRateAmountArray[i]);
						} else {
							storeBalanceTObj.setUnitRate(new BigDecimal("0"));
						}
						if (!totalAmountArray[i].equals("0")) {
							storeBalanceTObj.setTotalAmount(totalAmountArray[i]);
						} else {
							storeBalanceTObj.setTotalAmount(new BigDecimal("0"));
						}
						StoreBalanceM storeBalanceM2 = new StoreBalanceM();
						storeBalanceM2.setId(balanceId);
						storeBalanceTObj.setStoreBalanceM(storeBalanceM2);

						storeIndentTListForAdd.add(storeBalanceTObj);
					}
				}

			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		masterAndDetailMap.put("storeIndentTListForUpdate",
				storeIndentTListForUpdate);
		masterAndDetailMap
				.put("storeIndentTListForAdd", storeIndentTListForAdd);
		masterAndDetailMap.put("storeBalanceM", storeBalanceM);
		masterAndDetailMap.put("balanceId", balanceId);
		masterAndDetailMap.put("pageNo", pageNo);

		boolean flag = storesHandlerService
				.updateNextBalance1(masterAndDetailMap);

		pageNo++;
		if (flag) {
			if (balanceId != 0) {
				map = (Map) storesHandlerService.getBalance1ModifyMap(
						balanceId, pageNo, dataMap);
			}
			if (map.get("gridIndentTList") != null)
				gridIndentTList = (List<StoreBalanceT>) map
						.get("gridIndentTList");

			if (gridIndentTList.size() == 0) {
				noDetailRecords = "yes";
			}
			if ((gridIndentTList.size() != 0) || (buttonName.equals("next"))) {
				// jsp = "nextModifyBalance";
				jsp = "modifyBalance";
			}
			if ((buttonName.equals("submit"))) {
				jsp = STORES_MESSAGE_OPE_JSP;
				messageTOBeVisibleToTheUser = "Balance Records Updated Successfully";
				url = "/hms/hms/stores?method=showBalanceJsp";
			}

		} else {
			jsp = STORES_MESSAGE_OPE_JSP;
			messageTOBeVisibleToTheUser = "Balance Records Not Updated Successfully";
			url = "/hms/hms/stores?method=showBalanceJsp";
		}

		jsp += ".jsp";
		map.put("deptId", deptId);
		map.put("url", url);
		map.put("max", balanceNo);
		map.put("balanceNo", balanceNo);
		map.put("approvedByEmployeeId", approvedByEmployeeId);
		map.put("balanceId", balanceId);
		map.put("pageNo", pageNo);
		map.put("contentJsp", jsp);
		map.put("noDetailRecords", noDetailRecords);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);

		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView getItemListForLoanoutByAutocompleteBalance(
			HttpServletRequest request, HttpServletResponse response) {
		try {
			String userName = "";
			int deptId = 0;
			int hospitalId = 0;

			HttpSession session = request.getSession();
			if (session.getAttribute("userName") != null)
				userName = (String) session.getAttribute("userName");
			if (session.getAttribute("hospitalId") != null)
				hospitalId = Integer.parseInt(""
						+ session.getAttribute("hospitalId"));
			if (session.getAttribute("deptId") != null)
				deptId = Integer.parseInt("" + session.getAttribute("deptId"));
			// --------------------------------------------------------------------------------
			String itemNameField = "";
			String autoHint = "";
			Map<String, Object> dataMap = new HashMap<String, Object>();
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			int balanceId = 0;
			if (request.getParameter("balanceId") != null) {
				balanceId = Integer.parseInt(request.getParameter("balanceId"));
			}
			if (request.getParameter("itemGroupId") != null
					&& !request.getParameter("itemGroupId").equals("")) {
				int groupId = Integer.parseInt(request.getParameter("itemGroupId"));
				dataMap.put("groupId", groupId);
			}
			if (request.getParameter("itemTypeId") != null
					&& !request.getParameter("itemTypeId").equals("")) {
				int itemTypeId = Integer.parseInt(request
						.getParameter("itemTypeId"));
				dataMap.put("itemTypeId", itemTypeId);
			}
			if (request.getParameter("sectionId") != null
					&& !request.getParameter("sectionId").equals("")) {
				int sectionId = Integer.parseInt(request.getParameter("sectionId"));
				dataMap.put("sectionId", sectionId);
			}
			if (request.getParameter("categoryId") != null
					&& !request.getParameter("categoryId").equals("")) {
				int categoryId = Integer.parseInt(request
						.getParameter("categoryId"));
				dataMap.put("categoryId", categoryId);
			}
			if (request.getParameter("classId") != null
					&& !request.getParameter("classId").equals("")) {
				int classId = Integer.parseInt(request.getParameter("classId"));
				dataMap.put("classId", classId);
			}
			if (request.getParameter("classCode") != null
					&& !request.getParameter("classCode").equals("")) {
				String classCode = request.getParameter("classCode");
				dataMap.put("classCode", classCode);
			}
			
			List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
			dataMap.put("autoHint", autoHint);
			dataMap.put("deptId", deptId);
			dataMap.put("hospitalId", hospitalId);
			dataMap.put("balanceId", balanceId);
			map = storesHandlerService
					.getItemListForLoanoutByAutocompleteBalance(dataMap);
			jsp = "result";
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView(jsp, "map", map);
	}
	
	public ModelAndView getMasterByAutocomplete(HttpServletRequest request, HttpServletResponse response){
		Map<String, Object> map=new HashMap<String, Object>();
		Map<String, Object> mapData=new HashMap<String, Object>();
		String brandNameTypeValue =  "";
		if(request.getParameter("BrandName")!=null)
			brandNameTypeValue = (String)request.getParameter("BrandName");
		if(request.getParameter("ManufacturerName")!=null)
			brandNameTypeValue = (String)request.getParameter("ManufacturerName");
		String masterName =  request.getParameter("masterName");
		mapData.put("masterName", masterName);
		mapData.put("brandNameTypeValue", brandNameTypeValue);
		map = storesHandlerService.getMasterByAutocomplete(mapData);
		map.put("masterName", masterName);
		jsp = "masterData";
		return new ModelAndView(jsp, "map", map);
	}
	public void jsonForMasterAdd(HttpServletRequest request, HttpServletResponse response){
		Map<String, Object> JSONROOT=new HashMap<String, Object>();
		Gson gson = new GsonBuilder().setPrettyPrinting().create();
		Map<String, Object> map=new HashMap<String, Object>();
		HttpSession session = request.getSession();
		response.setContentType("application/json");
		String s="Json Call";
		String entryName=request.getParameter("entryName");
		String masterName=request.getParameter("masterName");
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
			map.put("userName", userName);
			map.put("masterName", masterName);
			map.put("entryName", request.getParameter("entryName")+"");
		try {
			map=storesHandlerService.jsonForMasterAdd(map);
			JSONROOT.put("entryResponce", (String)map.get("entryResponce"));
			String jsonArray = gson.toJson(JSONROOT);
			response.getWriter().print(jsonArray);
		}catch(Exception e){
			e.printStackTrace();
		}
	}

	public void fillItemsForBalance(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		String pvmsNo = "";
		List objectList = new ArrayList();
		try {
			if (request.getParameter("pvmsNo") != null) {
				pvmsNo = request.getParameter("pvmsNo");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		dataMap.put("pvmsNo", pvmsNo);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.fillItemsForBalance(dataMap);
		if (map.get("objectList") != null) {
			objectList = (List) map.get("objectList");
		}
		StringBuffer sb = new StringBuffer();
		try {
			for (Iterator iterator = objectList.iterator(); iterator.hasNext();) {
				Object[] object = (Object[]) iterator.next();

				sb.append("<item>");
				sb.append("<id>" + object[0] + "</id>");
				sb.append("<pvms>" + object[1] + "</pvms>");
				sb.append("<au>" + object[3] + "</au>");

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public ModelAndView lastDemandNo(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreInternalIndentM> searchStoreInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		List<MasEmployee> approvedByList = new ArrayList<MasEmployee>();
		List<MasEmployee> requestedByList = new ArrayList<MasEmployee>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		int pageNo = 1;
		map = (Map) storesHandlerService.showLastDemandNo(pageNo);

		searchStoreInternalIndentMList = (List) map
				.get("searchStoreInternalIndentMList");
		departmentList = (List) map.get("departmentList");
		approvedByList = (List) map.get("approvedByList");
		requestedByList = (List) map.get("requestByList");
		sectionList = (List) map.get("sectionList");
		jsp = "lastDemandNo";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("searchStoreInternalIndentMList",
				searchStoreInternalIndentMList);
		map.put("sectionList", sectionList);
		map.put("approvedByList", approvedByList);
		map.put("requestByList", requestedByList);
		map.put("departmentList", departmentList);

		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView lastDocNo(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> map2 = new HashMap<String, Object>();
		List<StoreMmfDepartmentM> searchStoreMmfDepartmentMList = new ArrayList<StoreMmfDepartmentM>();
		List<MasEmployee> approvedByList = new ArrayList<MasEmployee>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();

		int pageNo = 1;
		map = (Map) storesHandlerService.showLastDocNo(pageNo);

		searchStoreMmfDepartmentMList = (List) map
				.get("searchStoreMmfDepartmentMList");
		departmentList = (List) map.get("departmentList");
		approvedByList = (List) map.get("approvedByList");
		jsp = "lastDocNo";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("searchStoreMmfDepartmentMList", searchStoreMmfDepartmentMList);
		map.put("approvedByList", approvedByList);
		map.put("departmentList", departmentList);

		return new ModelAndView("indexB", "map", map);

	}

	// -----------------------New Grid for
	// Ack-------------------------------------------

	public ModelAndView showAckJsp(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		int hospitalId=0;
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}
		if (session.getAttribute("hospitalId") != null)
		{
			hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));
		}
		map = storesHandlerService.showAckJsp(deptId,hospitalId);
		jsp = STORE_ACK_JSP;
		jsp = jsp + ".jsp";
		title = "Acknowledgment";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}
	
	public ModelAndView showAckJspForRC(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		int hospitalId=0;
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}
		if (session.getAttribute("hospitalId") != null)
		{
			hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));
		}
		map = storesHandlerService.showAckJspForRC(deptId,hospitalId);
		
		jsp = "rcAcknowledgment.jsp";
		title = "Acknowledgment";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView createGridIssueData(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		String issueNo = "";
		int hospitalId =0;
		int deptId =0;
		int userId = 0;
		if (request.getParameter(ISSUE_NO) != null
				&& !(request.getParameter(ISSUE_NO).equals(""))) {
			issueNo = request.getParameter(ISSUE_NO);
		}
		if(session.getAttribute("userId")!=null)
			userId = (Integer)session.getAttribute("userId");
		// add javed khan
		if (session.getAttribute("hospitalId") != null)
		{hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));	}
		if (session.getAttribute("deptId") != null)
		{deptId = Integer.parseInt(""+ session.getAttribute("deptId"));	}
		box.put("hospitalId", hospitalId);
		box.put("deptId", deptId);
		box.put("userId", userId);
		map = storesHandlerService.createGridIssueData(box);
		jsp = STORE_ACK_JSP;
		jsp = jsp + ".jsp";
		title = "Certificate to Ack";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}
	
	public ModelAndView createGridIssueDataForRC(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		String issueNo = "";
		int hospitalId =0;
		int deptId =0;
		int userId = 0;
		if (request.getParameter(ISSUE_NO) != null
				&& !(request.getParameter(ISSUE_NO).equals(""))) {
			issueNo = request.getParameter(ISSUE_NO);
		}
		if(session.getAttribute("userId")!=null)
			userId = (Integer)session.getAttribute("userId");
		// add javed khan
		if (session.getAttribute("hospitalId") != null)
		{hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));	}
		if (session.getAttribute("deptId") != null)
		{deptId = Integer.parseInt(""+ session.getAttribute("deptId"));	}
		box.put("hospitalId", hospitalId);
		box.put("deptId", deptId);
		box.put("userId", userId);
		map = storesHandlerService.createGridIssueData(box);
		
		jsp = "rcAcknowledgment.jsp";
		title = "Certificate to Ack";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView addAck(HttpServletRequest request,
            HttpServletResponse response) {
    Map<String, Object> map = new HashMap<String, Object>();
    Box box = HMSUtil.getBox(request);
    HttpSession session = (HttpSession)request.getSession();
    //map = storesHandlerService.doAddAckItems(box);
    int deptId = 0;
    int hospitalId=0;
    if (session.getAttribute("deptId") != null) {
            deptId = (Integer) session.getAttribute("deptId");
    }
    if (session.getAttribute("hospitalId") != null)
    {
            hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));
    }
    box.put("hospitalId", hospitalId);

    map = storesHandlerService.doAddAckItems(box);
    map = storesHandlerService.showAckJsp(deptId,hospitalId);
    jsp = STORE_ACK_JSP;
    jsp = jsp + ".jsp";
    title = "Add Ack";
    map.put("contentJsp", jsp);
    map.put("title", title);
    return new ModelAndView("indexB", "map", map);

}
	

	public ModelAndView addAckForRC(HttpServletRequest request,
            HttpServletResponse response) {
    Map<String, Object> map = new HashMap<String, Object>();
    Box box = HMSUtil.getBox(request);
    HttpSession session = (HttpSession)request.getSession();
    //map = storesHandlerService.doAddAckItems(box);
    int deptId = 0;
    int hospitalId=0;
    if (session.getAttribute("deptId") != null) {
            deptId = (Integer) session.getAttribute("deptId");
    }
    if (session.getAttribute("hospitalId") != null)
    {
            hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));
    }
    box.put("hospitalId", hospitalId);

    map = storesHandlerService.doAddAckItemsForRC(box);
    map = storesHandlerService.showAckJspForRC(deptId,hospitalId);
    
    jsp = "acknowledgmentRC.jsp";
    title = "Add Ack";
    map.put("contentJsp", jsp);
    map.put("title", title);
    return new ModelAndView("indexB", "map", map);

}

	public ModelAndView closeAckJsp(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		int hospitalId=0;
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}
		if (session.getAttribute("hospitalId") != null)
		{
			hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));
		}
		map = storesHandlerService.showAckJsp(deptId,hospitalId);
		jsp = "closeAck";
		jsp = jsp + ".jsp";
		title = "Acknowledgment";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	// ------------------------------------------------ AT/Supply Order Entry
	// ----------------------
	@SuppressWarnings("unchecked")
	public ModelAndView searchSupplyOrderEntry(HttpServletRequest request,
			HttpServletResponse response) throws ServletRequestBindingException {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();

		int indentId = 0;

		if (request.getParameter(INDENT_ID) != null
				&& !(request.getParameter(INDENT_ID).equals(""))) {
			indentId = Integer.parseInt(request.getParameter(INDENT_ID));
		}
		map = storesHandlerService.searchSupplyOrderEntry(indentId);

		jsp = "soDetail";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("indentId", indentId);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView showSupplyOrderEntry(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.showSupplyOrderEntryJsp();
		jsp = STORE_SUPPLIER_ORDER_ENTRY_JSP;
		jsp = jsp + ".jsp";
		title = "Supply Order Entry ";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings("deprecation")
	public ModelAndView addSupplyOrderEntry(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		String encodedBy = "";
		String changedBy = "";
		int indentId = 0;
		int length = 0;
		List<StoreSupplyOrderEntry> storeSupplyOrderEntrylist = new ArrayList<StoreSupplyOrderEntry>();
		try {
			int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
					SR_NO);
			int itemIdPVMSArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, ITEM_ID_PVMS_NO);
			int itemIdNomenclatureArray[] = JKTRequestUtils
					.getRequiredIntParameters(request, ITEM_ID_NOMENCLATURE);
			int uomIdAVArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, ITEM_ID_AV);

			int intendTIdmmf[] = JKTRequestUtils.getRequiredIntParameters(
					request, INDENT_T_ID_QTY_IN_MMF);
			int supplierIdVendorNameArray[] = JKTRequestUtils
					.getRequiredIntParameters(request, SUPPLIER_ID_VENDOR_NAME);
			String suppluOrderNo[] = JKTRequestUtils
					.getRequiredStringParameters(request, SUPPLY_ORDER_NO);

			if (request.getParameter(INDENT_ID_SUPPLY) != null) {
				indentId = Integer.parseInt(request
						.getParameter(INDENT_ID_SUPPLY));
			}
			if (request.getParameter(ENCODED_BY) != null) {
				encodedBy = (request.getParameter(ENCODED_BY));
			}
			if (request.getParameter(ENCODED_TIME) != null
					&& !(request.getParameter(ENCODED_TIME).equals(""))) {
				time = request.getParameter(ENCODED_TIME);
			}
			if (request.getParameter(ENCODED_DATE) != null
					&& !(request.getParameter(ENCODED_DATE).equals(""))) {
				date = request.getParameter(ENCODED_DATE);
			}
			if (request.getParameter(CHANGED_BY) != null
					&& !(request.getParameter(CHANGED_BY).equals(""))) {
				changedBy = request.getParameter(CHANGED_BY);
			}
			if (request.getParameter(CHANGED_DATE) != null
					&& !(request.getParameter(CHANGED_DATE).equals(""))) {
				date = request.getParameter(CHANGED_DATE);
			}

			if (request.getParameter(CHANGED_TIME) != null
					&& !(request.getParameter(CHANGED_TIME).equals(""))) {
				time = request.getParameter(CHANGED_TIME);
			}

			Date firstReceivedDate = new Date();

			if (request.getParameter(FIRST_REC_DATE) != null
					&& !(request.getParameter(FIRST_REC_DATE).equals(""))) {
				firstReceivedDate = HMSUtil.dateFormatterDDMMYYYY(request
						.getParameter(FIRST_REC_DATE));
			}

			BigDecimal[] rate = new BigDecimal[100];
			String xx[] = JKTRequestUtils.getRequiredStringParameters(request,
					RATE);
			int xxLegnt = xx.length;
			for (int i = 0; i < xxLegnt; i++) {

				BigDecimal val = new BigDecimal(xx[i]);
				rate[i] = val;
			}

			length = srNo.length;
			for (int i = 0; i < length; i++) {

				StoreSupplyOrderEntry storeSupplyOrderEntryObj = new StoreSupplyOrderEntry();

				StoreIndentM storeIndentM = new StoreIndentM();
				storeIndentM.setId(indentId);
				storeSupplyOrderEntryObj.setIndent(storeIndentM);

				storeSupplyOrderEntryObj.setSerialNo(srNo[i]);

				MasStoreItem masStoreItem = new MasStoreItem();

				masStoreItem.setId(itemIdPVMSArray[i]);
				storeSupplyOrderEntryObj.setItem(masStoreItem);

				masStoreItem.setId(itemIdNomenclatureArray[i]);
				storeSupplyOrderEntryObj.setItem(masStoreItem);

				MasStoreSupplier masStoreSupplier = new MasStoreSupplier();
				masStoreSupplier.setId(supplierIdVendorNameArray[i]);
				storeSupplyOrderEntryObj.setSupplier(masStoreSupplier);

				storeSupplyOrderEntryObj.setIndentType("y");
				storeSupplyOrderEntryObj.setSupplyOrderNo(suppluOrderNo[i]);
				storeSupplyOrderEntryObj.setSupplyOrderDate(firstReceivedDate);
				storeSupplyOrderEntryObj.setRate(rate[i]);

				storeSupplyOrderEntryObj.setLastChgBy(changedBy);
				storeSupplyOrderEntryObj.setLastChgDate(HMSUtil
						.convertStringTypeDateToDateType(date));
				storeSupplyOrderEntryObj.setLastChgTime(time);
				storeSupplyOrderEntrylist.add(storeSupplyOrderEntryObj);

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		boolean flag = false;

		flag = storesHandlerService.addStoreSupplyOrderEntry(indentId,
				storeSupplyOrderEntrylist);

		String message = "";
		if (flag) {
			message = "Record Added Successfully !!";
		} else {
			message = "Try Again!!!";
		}

		try {
			map = storesHandlerService.showSupplyOrderEntryJsp();

		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = STORE_SUPPLIER_ORDER_ENTRY_JSP;
		jsp += ".jsp";

		map.put("contentJsp", jsp);
		map.put("message", message);
		return new ModelAndView("indexB", "map", map);

	}

	@SuppressWarnings("deprecation")
	public ModelAndView updateSupplyOrderEntry(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		String encodedBy = "";
		String changedBy = "";
		int indentId = 0;
		int length = 0;
		int supplyOrderId = 0;
		List<StoreSupplyOrderEntry> storeSupplyOrderEntrylist = new ArrayList<StoreSupplyOrderEntry>();
		try {
			int supplyOrderIdArray[] = JKTRequestUtils
					.getRequiredIntParameters(request, SUPPLY_ORDER_ID);
			int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
					SR_NO);
			int itemIdPVMSArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, ITEM_ID_PVMS_NO);
			int itemIdNomenclatureArray[] = JKTRequestUtils
					.getRequiredIntParameters(request, ITEM_ID_NOMENCLATURE);
			int uomIdAVArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, ITEM_ID_AV);

			int intendTIdmmf[] = JKTRequestUtils.getRequiredIntParameters(
					request, INDENT_T_ID_QTY_IN_MMF);
			int supplierIdVendorNameArray[] = JKTRequestUtils
					.getRequiredIntParameters(request, SUPPLIER_ID_VENDOR_NAME);
			String suppluOrderNo[] = JKTRequestUtils
					.getRequiredStringParameters(request, SUPPLY_ORDER_NO);

			if (request.getParameter(SUPPLY_ORDER_ID).equals("0")) {
				supplyOrderId = Integer.parseInt(request
						.getParameter(SUPPLY_ORDER_ID));
			}

			if (request.getParameter(INDENT_ID_SUPPLY) != null) {
				indentId = Integer.parseInt(request
						.getParameter(INDENT_ID_SUPPLY));
			}
			if (request.getParameter(ENCODED_BY) != null) {
				encodedBy = (request.getParameter(ENCODED_BY));
			}
			if (request.getParameter(ENCODED_TIME) != null
					&& !(request.getParameter(ENCODED_TIME).equals(""))) {
				time = request.getParameter(ENCODED_TIME);
			}
			if (request.getParameter(ENCODED_DATE) != null
					&& !(request.getParameter(ENCODED_DATE).equals(""))) {
				date = request.getParameter(ENCODED_DATE);
			}
			if (request.getParameter(CHANGED_BY) != null
					&& !(request.getParameter(CHANGED_BY).equals(""))) {
				changedBy = request.getParameter(CHANGED_BY);
			}
			if (request.getParameter(CHANGED_DATE) != null
					&& !(request.getParameter(CHANGED_DATE).equals(""))) {
				date = request.getParameter(CHANGED_DATE);
			}

			if (request.getParameter(CHANGED_TIME) != null
					&& !(request.getParameter(CHANGED_TIME).equals(""))) {
				time = request.getParameter(CHANGED_TIME);
			}

			Date firstReceivedDate = new Date();
			if (request.getParameter(FIRST_REC_DATE) != null
					&& !(request.getParameter(FIRST_REC_DATE).equals(""))) {
				firstReceivedDate = HMSUtil.dateFormatterDDMMYYYY(request
						.getParameter(FIRST_REC_DATE));
			}

			BigDecimal[] rate = new BigDecimal[100];
			String xx[] = JKTRequestUtils.getRequiredStringParameters(request,
					RATE);
			int xxLegnt = xx.length;
			for (int i = 0; i < xxLegnt; i++) {

				BigDecimal val = new BigDecimal(xx[i]);
				rate[i] = val;
			}

			length = srNo.length;
			for (int i = 0; i < length; i++) {
				StoreSupplyOrderEntry storeSupplyOrderEntryObj = new StoreSupplyOrderEntry();

				storeSupplyOrderEntryObj.setId(supplyOrderIdArray[i]);

				storeSupplyOrderEntryObj.setIndentType("y");

				storeSupplyOrderEntryObj.setSerialNo(srNo[i]);

				MasStoreItem masStoreItem = new MasStoreItem();

				masStoreItem.setId(itemIdPVMSArray[i]);
				storeSupplyOrderEntryObj.setItem(masStoreItem);

				masStoreItem.setId(itemIdNomenclatureArray[i]);
				storeSupplyOrderEntryObj.setItem(masStoreItem);

				MasStoreSupplier masStoreSupplier = new MasStoreSupplier();
				masStoreSupplier.setId(supplierIdVendorNameArray[i]);
				storeSupplyOrderEntryObj.setSupplier(masStoreSupplier);

				storeSupplyOrderEntryObj.setSupplyOrderNo(suppluOrderNo[i]);
				storeSupplyOrderEntryObj.setSupplyOrderDate(firstReceivedDate);

				storeSupplyOrderEntryObj.setRate(rate[i]);

				storeSupplyOrderEntryObj.setLastChgBy(changedBy);
				storeSupplyOrderEntryObj.setLastChgDate(HMSUtil
						.convertStringTypeDateToDateType(date));
				storeSupplyOrderEntryObj.setLastChgTime(time);
				storeSupplyOrderEntrylist.add(storeSupplyOrderEntryObj);

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		boolean flag = false;

		flag = storesHandlerService.updateSupplyOrderEnter(indentId,
				storeSupplyOrderEntrylist);

		String message = "";
		if (flag) {
			message = "Record Updated Successfully !!";
		} else {
			message = "Try Again!!!";
		}

		try {
			map = storesHandlerService.showSupplyOrderEntryJsp();

		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = STORE_SUPPLIER_ORDER_ENTRY_JSP;
		jsp += ".jsp";

		map.put("contentJsp", jsp);
		map.put("message", message);
		return new ModelAndView("indexB", "map", map);
	}

	// -------------------------------------- New grid Supply Order
	// Entry------------------------

	public ModelAndView showSupplyOrderJsp(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		// map = storesHandlerService.showSupplyOrderEntry();
		jsp = "supplyOrder";
		jsp = jsp + ".jsp";
		title = "Supply Order Entry";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView closeSupplyOrderJsp(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		// map = storesHandlerService.showSupplyOrderEntry();
		jsp = "closeSupplyOrder";
		jsp = jsp + ".jsp";
		title = "Supply Order Entry";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView createGridSupplyOrderEntryData(
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		String indentNo = "";
		if (request.getParameter(INDENT_NO) != null
				&& !(request.getParameter(INDENT_NO).equals(""))) {
			indentNo = request.getParameter(INDENT_NO);
		}
		map = storesHandlerService.createGridSupplyOrderEntryData(box);
		jsp = "supplyOrder";
		jsp = jsp + ".jsp";
		title = "Certificate to Ack";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView getIndentNosForSupplyOrderEntry(
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.getIndentNosForSupplyOrderEntry(box);
		jsp = "supplyOrder";
		jsp = jsp + ".jsp";
		title = "Certificate to Ack";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView addSupplyOrder(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		map = storesHandlerService.getItemDetailsForSupplyOrderEntry(box);
		jsp = "closeSupplyOrder";
		jsp = jsp + ".jsp";
		title = "Add Supply Order";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView updateSupplyOrder(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		map = storesHandlerService.getItemDetailsForUpdateSupplyOrderEntry(box);
		jsp = "closeSupplyOrder";
		jsp = jsp + ".jsp";
		title = "Update Supply Order";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	// --------------------------------- Prints Stores By
	// mansi--------------------------------

	public ModelAndView printIndentSJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		String intentNo = null;
		HttpSession session = request.getSession();
		requestParameters.put("DEPT", session.getAttribute("deptId"));

		try {
			if (request.getParameter(INDENT_NO) != null
					&& !(request.getParameter(INDENT_NO).equals(""))) {
				intentNo = request.getParameter(INDENT_NO);
				requestParameters.put("INDENT_NO", intentNo);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		byte[] bytes = null;

		try {
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(DOCUMENT_PRINT_OF_DGAFMS),
					requestParameters, (Connection) connectionMap.get("con"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setHeader("Content-Disposition", "attachment; filename="
				+ DOCUMENT_PRINT_OF_DGAFMS + ".pdf");
		response.setContentLength(bytes.length);
		ServletOutputStream ouputStream;
		try {
			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView printReturnFromDispensaryJsp(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		String intentNo = null;
		HttpSession session = request.getSession();
		requestParameters.put("departmentId", session.getAttribute("deptId"));
		try {
			if (request.getParameter(RETURN_NO) != null
					&& !(request.getParameter(RETURN_NO).equals(""))) {
				intentNo = request.getParameter(RETURN_NO);
				requestParameters.put("return_no", intentNo);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		byte[] bytes = null;

		try {
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(RETURN_FROM_DISPENSARY),
					requestParameters, (Connection) connectionMap.get("con"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setHeader("Content-Disposition", "attachment; filename="
				+ RETURN_FROM_DISPENSARY + ".pdf");
		response.setContentLength(bytes.length);
		ServletOutputStream ouputStream;
		try {
			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView printOpeningBalanceJsp(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		String intentNo = null;
		HttpSession session = request.getSession();
		requestParameters.put("deptId", session.getAttribute("deptId"));
		int hospitalId = 0;
		String balanceNo ="";
		
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		requestParameters.put("hospitalId",hospitalId);
		
		try {
			if (request.getParameter("balanceNo") != null
					&& !(request.getParameter("balanceNo").equals(""))) {
				balanceNo = request.getParameter("balanceNo");
				requestParameters.put("openingBalanceNo", balanceNo);
			}
			
			String userHome = getServletContext().getRealPath("");	         
	        String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
	        requestParameters.put("path", imagePath);
			
		
		Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
				HMSUtil.generateReport("Opening_balanceEntry",
						requestParameters, (Connection) connectionMap.get("con"),
						response, getServletContext());



		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return null;
	}
	
	public ModelAndView printOpeningBalanceRegister(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		String intentNo = null;
		HttpSession session = request.getSession();
		requestParameters.put("deptId", session.getAttribute("deptId"));
		int hospitalId = 0;
		String balanceNo ="";
		
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		requestParameters.put("hospitalId",hospitalId);
		
		try {
		/*	if (request.getParameter("balanceNo") != null
					&& !(request.getParameter("balanceNo").equals(""))) {
				balanceNo = request.getParameter("balanceNo");
				requestParameters.put("openingBalanceNo", balanceNo);
			}*/
			
			Date fromDate = null;
			Date toDate = null;
			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				requestParameters.put("fromDate", fromDate);
				System.out.println("fromDate"+fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				requestParameters.put("toDate", toDate);
				System.out.println("toDate"+toDate);
			}
			
			String userHome = getServletContext().getRealPath("");	         
	        String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
	        requestParameters.put("path", imagePath);
			
		
		Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
				HMSUtil.generateReport("Opening_balance_register",
						requestParameters, (Connection) connectionMap.get("con"),
						response, getServletContext());



		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return null;
	}

	public ModelAndView printLocalPurchareOrderJsp(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		String poNO = null;
		HttpSession session = request.getSession();
		requestParameters.put("departmentId", session.getAttribute("deptId"));
		try {
			if (request.getParameter(INDENT_ID) != null
					&& !(request.getParameter(INDENT_ID).equals(""))) {
				poNO = request.getParameter(INDENT_ID);
				requestParameters.put("PO_No", poNO);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		byte[] bytes = null;

		try {
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(LOCAL_PURCHASE_ORDER), requestParameters,
					(Connection) connectionMap.get("con"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setHeader("Content-Disposition", "attachment; filename="
				+ LOCAL_PURCHASE_ORDER + ".pdf");
		response.setContentLength(bytes.length);
		ServletOutputStream ouputStream;
		try {
			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

		return new ModelAndView("indexB", "map", map);
	}

	// ------------ report LPO
	public ModelAndView generateCrvReport(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		String grnNo = "";
		String flag = null;
		int deptId = 0;
		byte[] bytes = null;

		HttpSession session = request.getSession();
		if (request.getParameter(GRN_NO) != null
				&& !(request.getParameter(GRN_NO).equals(""))) {
			grnNo = request.getParameter(GRN_NO);
		}
		if (request.getParameter("flag") != null
				&& !(request.getParameter("flag").equals(""))) {
			flag = request.getParameter("flag");
		}
		deptId = (Integer) session.getAttribute("deptId");
		box.put("deptId", deptId);

		box.put(GRN_NO, grnNo);
		// requestParameters=storesHandlerService.getLPOList(grnNo);
		requestParameters = storesHandlerService.getDBConnection();
		requestParameters.put("dept_id", deptId);
		requestParameters.put("grn_no", grnNo);
		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.getBudgetDetails(box);

		try {
			if (flag.equals("LPO")) {
				requestParameters.put("allocatedAmount", map
						.get("allocatedAmount"));
				requestParameters.put("spentAmount", map.get("spentAmount"));
				requestParameters
						.put("balanceAmount", map.get("balanceAmount"));
				requestParameters.put("grn_amount", map.get("grn_amount"));
				requestParameters.put("vat", map.get("vat"));
				requestParameters.put("disc", map.get("disc"));

				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("Local_Purchase_Order"),
						requestParameters, (Connection) connectionMap
								.get("con"));
			}
			if (flag.equals("crv")) {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("crv"), requestParameters,
						(Connection) connectionMap.get("con"));
			}
			if (flag.equals("pcrv")) {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("provisionalcrv"), requestParameters,
						(Connection) connectionMap.get("con"));
			}
			if (flag.equals("proformaB")) {
				requestParameters.put("allocatedAmount", map
						.get("allocatedAmount"));
				requestParameters.put("spentAmount", map.get("spentAmount"));
				requestParameters
						.put("balanceAmount", map.get("balanceAmount"));
				requestParameters.put("grn_amount", map.get("grn_amount"));
				requestParameters.put("vat", map.get("vat"));
				requestParameters.put("disc", map.get("disc"));

				requestParameters.put("SUBREPORT_DIR", getServletContext()
						.getRealPath("/reports/"));

				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("proforma"), requestParameters,
						(Connection) connectionMap.get("con"));
			}
			if (flag.equals("contingentBill")) {
				requestParameters.put("allocatedAmount", map
						.get("allocatedAmount"));
				requestParameters.put("spentAmount", map.get("spentAmount"));
				requestParameters
						.put("balanceAmount", map.get("balanceAmount"));
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("contingent_bill"),
						requestParameters, (Connection) connectionMap
								.get("con"));
			}
			if (flag.equals("barcode")) {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("barcode"), requestParameters,
						(Connection) connectionMap.get("con"));
			}

		} catch (JRException e) {

			e.printStackTrace();
		}
		response.setContentType("application/pdf");
		response.setContentLength(bytes.length);
		ServletOutputStream ouputStream;
		try {
			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView printExternalIssueJsp(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		int issueId = 0;
		String period = null;

		HttpSession session = request.getSession();
		requestParameters.put("DEPART", session.getAttribute("deptId"));
		try {
			if (request.getParameter(ISSUE_ID) != null
					&& !(request.getParameter(ISSUE_ID).equals(""))) {
				issueId = Integer.parseInt("" + request.getParameter(ISSUE_ID));
			}

			requestParameters.put("CRV_NO", issueId);
		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		byte[] bytes = null;

		try {
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(EXTERNAL_ISSUE), requestParameters,
					(Connection) connectionMap.get("con"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setHeader("Content-Disposition", "attachment; filename="
				+ EXTERNAL_ISSUE + ".pdf");
		response.setContentLength(bytes.length);
		ServletOutputStream ouputStream;
		try {
			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

		return new ModelAndView("indexB", "map", map);
	}

	// -----------------------------------------------------------------------------------------------------------------
	// -------------------------------------End of Functions Written By
	// Mansi-------------------------------------------
	// -----------------------------------------------------------------------------------------------------------------

	// -----------------------------------------------------------------------------------------------------------------
	// -------------------------------------Start of Functions Written By K.R.
	// Othivadivel------------------------------
	// -----------------------------------------------------------------------------------------------------------------

	public ModelAndView showMMFDepartmentWiseSplitup(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		map = storesHandlerService.showMMFDepartmentWiseSplitup(box);
		map.put("year", box.getInt("year"));
		map.put("pvmsno", box.getInt("pvmsno"));
		map.put("nomenclature", box.getString("nomenclature"));
		map.put("mmfQty", box.getInt("mmfQty"));
		jsp = "mmfDepartmentSplitUp";
		title = "MMF Qty Department Wise";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView generateReportForIndentSOC(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		int deptId = 0;
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		map = storesHandlerService.getConnectionForReport();
		map.put("INDENT_NO", box.getString(INDENT_ID));
		map.put("DEPT", new Integer(deptId));
		HMSUtil.generateReport("DocumentPrintOfDGAFMSSOC", map,
				(Connection) map.get("con"), response, getServletContext());
		jsp = "modifyIndentSOC";
		jsp = jsp + ".jsp";
		title = "Indent To DGAFMS in the form of SOC-Modify";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showAddSupplyOrderEntryJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		map = storesHandlerService.getItemsForSupplyOrderEntryJsp(box);
		jsp = "supplyOrderEntryAddition";
		title = "Add Supply Order Entry Items";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("indent_id", box.getInt("indent_id"));
		map.put("indent_type", box.getString("indent_type"));
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView doAddSupplyOrderEntryItems(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		map = storesHandlerService.doAddSupplyOrderEntryItems(box);
		jsp = "supplyOrderEntryAddition";
		title = "Add Supply Order Entry Items";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("indent_id", box.getInt("indent_id"));
		map.put("indent_type", box.getString("indent_type"));
		return new ModelAndView(jsp, "map", map);
	}

	// -----------------------------------------------------------------------------------------------------------------
	// -------------------------------------End of Functions Written By K.R.
	// Othivadivel------------------------------
	// -----------------------------------------------------------------------------------------------------------------

	// ------------------------------- start of methods written by
	// vikas-------------------------------

	public ModelAndView showStockDetails(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		title = "Stock Details";
		jsp = VIEW_COMPLETE_STOCK_DETAILS_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView getStockDetail(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int itemId = 0;
		int deptId = 0;
		HttpSession session = request.getSession();
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		Box box = HMSUtil.getBox(request);
		box.put("deptId", deptId);
		// String checkBoxValue=request.getParameter("nillStock");
		map = storesHandlerService.getStockDetails(box);
		jsp = VIEW_COMPLETE_STOCK_DETAILS_IN_GRID_JSP;
		// jsp = jsp+".jsp";
		title = "Stock Details";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView getStockDetailForNextRecord(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		int itemId = 0;
		Box box = HMSUtil.getBox(request);
		if (request.getParameter("buttonName") != null) {
			Vector items = box.getVector("itemId");
			int max = items.size() - 1;
			itemId = Integer.valueOf(items.get(max).toString());
			box.put("itemId", itemId);
		} else {

			itemId = Integer.parseInt(box.getString("itemIdForNextRecord"));
			box.put("itemId", itemId);
		}
		map = storesHandlerService.getStockDetailsForNextRecord(box);
		jsp = VIEW_COMPLETE_STOCK_DETAILS_IN_GRID_JSP;
		// jsp = jsp+".jsp";
		title = "Stock Details";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("hiddenFieldForRecords", "true");
		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView getItemListForCompleteStockNomenclatureByAutocomplete(
			HttpServletRequest request, HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		String autoHint = "";

		Map<String, Object> dataMap = new HashMap<String, Object>();
		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}

			List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
			dataMap.put("autoHint", autoHint);
			dataMap.put("deptId", deptId);
			dataMap.put("userName", userName);
			dataMap.put("hospitalId", hospitalId);

			map = storesHandlerService
					.getItemListForCompleteStockNomenclatureByAutocomplete(dataMap);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "result";
		return new ModelAndView(jsp, "map", map);
	}


	public ModelAndView showDefectiveItemReturnReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		title = "Defective Item Return";
		jsp = DEFECTIVE_ITEM_RETURN_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView generateDefectiveItemReturnReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Date fromDate = null;
		Date toDate = null;
		int hospitalId = 0;
		String hospitalName = "";

		HttpSession session = request.getSession();
		requestParameters.put("deptId", session.getAttribute("deptId"));
		try {
			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				requestParameters.put("FROM_DATE", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				requestParameters.put("TO_DATE", toDate);
			}
			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
				hospitalName = storesHandlerService.getHospitalName(hospitalId);
				requestParameters.put("HOSP_NAME", hospitalName);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		HMSUtil.generateReport(DEFECTIVE_ITEM_RETURN, requestParameters,
				(Connection) connectionMap.get("con"), response,
				getServletContext());
		return new ModelAndView("indexB", "map", map);
	}


	public ModelAndView showBrandReportJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.showBrandReportJsp();
		title = "Brand Report";
		jsp = BRAND_REPORT_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView generateBrandReport(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		int hospitalId = 0;
		String hospitalName = "";
		int brandId = 0;
		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		HttpSession session = request.getSession();
		try {
			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
				hospitalName = storesHandlerService.getHospitalName(hospitalId);
				requestParameters.put("HOSP_NAME", hospitalName);
			}
			if (request.getParameter(BRAND_NAME) != null
					&& !(request.getParameter(BRAND_NAME).equals(""))) {
				brandId = Integer.parseInt(request.getParameter(BRAND_NAME));

			}

			if (brandId == 0) {
				HMSUtil.generateReport("BrandMaster_All", requestParameters,
						(Connection) connectionMap.get("con"), response,
						getServletContext());
			} else {
				requestParameters.put("BRAND", brandId);
				HMSUtil.generateReport(BRAND_REPORT, requestParameters,
						(Connection) connectionMap.get("con"), response,
						getServletContext());
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return new ModelAndView("indexB", "map", map);
	}





	public ModelAndView showVendorTurnoverEnquiryReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.showVendorTurnoverEnquiryReportJsp();
		title = "Vendor Turnover Enquiry Report";
		jsp = VENDOR_TRURNOVER_ENQUIRY_REPORT_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView generateVendorTurnoverEnquiryReport(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Date fromDate = null;
		Date toDate = null;
		int hospitalId = 0;
		String hospitalName = "";
		int supplierId = 0;
		HttpSession session = request.getSession();
		requestParameters.put("DEPART", session.getAttribute("deptId"));
		try {
			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
				hospitalName = storesHandlerService.getHospitalName(hospitalId);
				requestParameters.put("HOSP_NAME", hospitalName);
			}
			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				requestParameters.put("FROM_DATE", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				requestParameters.put("TO_DATE", toDate);
			}
			if ((request.getParameter(SUPPLIER_ID)) != null
					&& !(request.getParameter(SUPPLIER_ID).equals(""))) {
				supplierId = Integer
						.parseInt(request.getParameter(SUPPLIER_ID));
				requestParameters.put("SUPPLIER", supplierId);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		HMSUtil.generateReport(VENDOR_TRURNOVER_ENQUIRY_REPORT,
				requestParameters, (Connection) connectionMap.get("con"),
				response, getServletContext());
		return new ModelAndView("indexB", "map", map);
	}

		public ModelAndView generateExternalIssueReport(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Date fromDate = null;
		Date toDate = null;
		int unitId = 0;
		HttpSession session = request.getSession();
		requestParameters.put("DEPART", session.getAttribute("deptId"));
		try {
			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				requestParameters.put("FROM_DATE", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				requestParameters.put("TO_DATE", toDate);
			}
			if ((request.getParameter(UNIT_ID)) != null
					&& !(request.getParameter(UNIT_ID).equals(""))) {
				unitId = Integer.parseInt(request.getParameter(UNIT_ID));
				requestParameters.put("UNIT", unitId);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		HMSUtil.generateReport(EXTERNAL_ISSUE_REPORT, requestParameters,
				(Connection) connectionMap.get("con"), response,
				getServletContext());
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showDMConsumDrugWiseReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.showDMConsumDrugWiseReportJsp();
		title = "D M Consum Drug Wise Report";
		jsp = D_M_DCONSUMDRUG_WISE_REPORT_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView generateDMConsumDrugWiseReportReport(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Date fromDate = null;
		Date toDate = null;
		int genericId = 0;
		int hospitalId = 0;
		String hospitalName = "";
		HttpSession session = request.getSession();
		requestParameters.put("DEPART", session.getAttribute("deptId"));
		try {

			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
				hospitalName = storesHandlerService.getHospitalName(hospitalId);
				requestParameters.put("HOSP_NAME", hospitalName);
			}

			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				requestParameters.put("fromDate", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				requestParameters.put("toDate", toDate);
			}
			if ((request.getParameter(ITEM_GENERIC_ID)) != null
					&& !(request.getParameter(ITEM_GENERIC_ID).equals(""))) {
				genericId = Integer.parseInt(request
						.getParameter(ITEM_GENERIC_ID));
				requestParameters.put("GENERIC", genericId);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		HMSUtil.generateReport("ControlledDangerousdrugissue", requestParameters,
				(Connection) connectionMap.get("con"), response,
				getServletContext());
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showFrequencyOfIndentReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		title = "Frequency Of Indent Report";
		jsp = FREQUENCY_OF_REPORT_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView generateFrequencyOfIndentReport(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Date fromDate = null;
		Date toDate = null;
		int genericId = 0;
		int hospitalId = 0;
		String hospitalName = "";
		HttpSession session = request.getSession();
		requestParameters.put("DEPART", session.getAttribute("deptId"));
		try {

			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
				hospitalName = storesHandlerService.getHospitalName(hospitalId);
				requestParameters.put("HOSP_NAME", hospitalName);
			}

			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				requestParameters.put("FROM_DATE", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				requestParameters.put("TO_DATE", toDate);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		HMSUtil.generateReport(FREQUENCY_OF_REPORT, requestParameters,
				(Connection) connectionMap.get("con"), response,
				getServletContext());
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showMmfDepartmentApprovalJsp(
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		int hospitalId = 0;
		session = request.getSession();
		Box box = HMSUtil.getBox(request);
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}
		box.put("deptId", deptId);
		if (session.getAttribute("userName") != null) {
			userName = (String) session.getAttribute("userName");
		}
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
		}

		jsp = STORE_MMF_DEPARTMENT_APPROVAL_JSP;
		jsp = jsp + ".jsp";
		title = "MMF Entry Approval";
		String previousPage = "no";
		map = storesHandlerService.showMmfDepartmentApproval(box);
		map.put("previousPage", previousPage);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView getCurrentYearMmfByItem(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);

		box.put("deptId", (Integer) session.getAttribute("deptId"));
		box.put("storeType", box.get("storeType"));
		box.put("docId", box.get("docId"));
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.getCurrentYearMmfByItem(box);
		jsp = STORE_MMF_DEPARTMENT_APPROVAL_JSP;
		jsp = jsp + ".jsp";
		title = "MMF Entry Approval";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView updateGridItemsInMmfDepartmentApproval(
			HttpServletRequest request, HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		box.put("userName", (String) session.getAttribute("userName"));
		box.put("storeType", box.get("storeType"));
		box.put("docId", box.get("docId"));
		map = storesHandlerService.updateGridItemsInMmfDepartmentApproval(box);
		jsp = STORE_MMF_DEPARTMENT_APPROVAL_JSP;
		jsp += ".jsp";
		title = "Store MMF Approval";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView getItemListForNomenclature(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----

		// --------------------------------------------------------------------------------
		String itemNameField = "";
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		String autoHint = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (request.getParameter("requiredField") != null) {
			itemNameField = (request.getParameter("requiredField"));
		}
		if (request.getParameter(itemNameField) != null) {
			autoHint = (request.getParameter(itemNameField));
		}
		box.put("autoHint", autoHint);

		dataMap.put("autoHint", autoHint);
		map = storesHandlerService.getItemListForNomenclature(box);
		jsp = "result";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getItemObject(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		box.put("deptId", (Integer) session.getAttribute("deptId"));
		box.put("storeType", box.get("storeType"));
		box.put("docId", box.get("docId"));
		map = storesHandlerService.getItemObject(box);
		jsp = STORE_MMF_DEPARTMENT_APPROVAL_JSP;
		jsp += ".jsp";
		title = "Store MMF Approval";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView getItemObjectFromPvms(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		box.put("deptId", (Integer) session.getAttribute("deptId"));
		box.put("storeType", box.get("storeType"));
		box.put("docId", box.get("docId"));
		map = storesHandlerService.getItemObjectFromPvms(box);
		jsp = STORE_MMF_DEPARTMENT_APPROVAL_JSP;
		jsp += ".jsp";
		title = "Store MMF Approval";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView printMmfApprovalEntryJsp(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);

		try {
			List<MasEmployee> masEmployeeList = new ArrayList<MasEmployee>();

			// if(request.getParameter("testMmfNo") != null &&
			// !(request.getParameter("testMmfNo").equals(""))){
			// docNo = request.getParameter("testMmfNo");
			// docNo = storesHandlerService.getMmfNo(box.getInt("newDocId"));
			if (box.getInt(MMF_DEPARTMENT_DATE) != 0) {
				requestParameters.put("mmfForTheYear", box
						.getInt(MMF_DEPARTMENT_DATE));
				if (box.getInt(MMF_DEPARTMENT_DATE) == 2008) {
					requestParameters.put("mmfForThePreviousYear", box
							.getInt(MMF_DEPARTMENT_DATE));
				} else {
					requestParameters.put("mmfForThePreviousYear", box
							.getInt(MMF_DEPARTMENT_DATE) - 1);
				}
			}
			if (request.getParameter("pvms_no") != null) {
				requestParameters.put("pvms_no", request
						.getParameter("pvms_no"));
			}
			if (box.get("storeType").equals("e")) {
				requestParameters.put("storeType", box.get("storeType"));
				requestParameters.put("MMFStoreType", "Expendable Store");
			} else if (box.get("storeType").equals("h")) {
				requestParameters.put("storeType", box.get("storeType"));
				requestParameters.put("MMFStoreType", "ECHS");
			}

			requestParameters.put("storeType", box.get("storeType"));
		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		byte[] bytes = null;

		try {
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(MMF_ENTRY_APPROVAL_FORM),
					requestParameters, (Connection) connectionMap.get("con"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setHeader("Content-Disposition", "attachment; filename="
				+ MMF_ENTRY_APPROVAL_FORM + ".pdf");
		response.setContentLength(bytes.length);
		ServletOutputStream ouputStream;
		try {
			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

		return null;
	}

	public ModelAndView printDepartmentWiseList(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);

		try {
			// if(request.getParameter("testMmfNo") != null &&
			// !(request.getParameter("testMmfNo").equals(""))){
			// docNo = request.getParameter("testMmfNo");
			// docNo = storesHandlerService.getMmfNo(box.getInt("newDocId"));
			if (box.getInt(MMF_DEPARTMENT_DATE) != 0) {
				requestParameters.put("mmfForTheYear", box
						.getInt(MMF_DEPARTMENT_DATE));
			}
			if (!"".equals(box.getString("department"))) {
				requestParameters.put("departmentId", box.getInt("department"));
			}

			if (box.get("storeType").equals("e")) {
				requestParameters.put("storeType", box.get("storeType"));
				requestParameters.put("MMFStoreType", "Expendable");
			} else if (box.get("storeType").equals("h")) {
				requestParameters.put("storeType", box.get("storeType"));
				requestParameters.put("MMFStoreType", "ECHS");
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		byte[] bytes = null;

		try {
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(MMF_ENTRY_APPROVAL_FORM_DEPARTMENT_WISE),
					requestParameters, (Connection) connectionMap.get("con"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setHeader("Content-Disposition", "attachment; filename="
				+ MMF_ENTRY_APPROVAL_FORM_DEPARTMENT_WISE + ".pdf");
		response.setContentLength(bytes.length);
		ServletOutputStream ouputStream;
		try {
			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

		return null;
	}

	public ModelAndView printReportForAllDepartments(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);

		try {
			// if(request.getParameter("testMmfNo") != null &&
			// !(request.getParameter("testMmfNo").equals(""))){
			// docNo = request.getParameter("testMmfNo");
			// docNo = storesHandlerService.getMmfNo(box.getInt("newDocId"));
			if (box.getInt(MMF_DEPARTMENT_DATE) != 0) {
				requestParameters.put("mmfForTheYear", box
						.getInt(MMF_DEPARTMENT_DATE));
			}

			if (box.get("storeType").equals("e")) {
				requestParameters.put("storeType", box.get("storeType"));
				requestParameters.put("MMFStoreType", "Expendable");
			} else if (box.get("storeType").equals("h")) {
				requestParameters.put("storeType", box.get("storeType"));
				requestParameters.put("MMFStoreType", "ECHS");
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		byte[] bytes = null;

		try {
			bytes = JasperRunManager
					.runReportToPdf(
							getCompiledReport(MMF_ENTRY_APPROVAL_FORM_FOR_ALL_DEPARTMENT),
							requestParameters, (Connection) connectionMap
									.get("con"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setHeader("Content-Disposition", "attachment; filename="
				+ MMF_ENTRY_APPROVAL_FORM_FOR_ALL_DEPARTMENT + ".pdf");
		response.setContentLength(bytes.length);
		ServletOutputStream ouputStream;
		try {
			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

		return null;
	}

	public ModelAndView modifyCRV(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> purchaseMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		jsp = MODIFY_GRN_JSP;
		jsp += ".jsp";
		int radio_str = 0;
		int deptId = 0;
		int searchPoId = 0;
		String items = "";

		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}

		if (session.getAttribute("searchPoId") != null) {
			searchPoId = (Integer) session.getAttribute("searchPoId");
		}

		if (request.getParameter("items") != null) {
			items = request.getParameter("items");
		}
		if (request.getParameter("parent") != null) {
			radio_str = Integer.parseInt(request.getParameter("parent"));
			map = (Map<String, Object>) storesHandlerService.modifyGrn(
					radio_str, 0, searchPoId, items);
		}
		purchaseMap = storesHandlerService.showGrnJsp(box, dataMap);
		List<StoreGrnM> grnList = storesHandlerService.getGrnList();

		map.put("purchaseMap", purchaseMap);
		map.put("grnList", grnList);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("radio_str", radio_str);

		return new ModelAndView("indexB", "map", map);
	}

	// ADD FOR CRV MODIFICATION SCREEN :::::::: BY KALYAN:::::::::::

	public ModelAndView getSoItemDetails(HttpServletRequest request,HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		String choice = "";
		int radio_str = 0;
		String pageType = "";
		if (request.getParameter("sos") != null) {
			choice = request.getParameter("sos");
		}
		if (request.getParameter("pageType") != null) {
			pageType = request.getParameter("pageType");
			box.put("pageType", pageType);
		}

		if (request.getParameter("po_id") != null) {
			radio_str = Integer.parseInt("" + request.getParameter("po_id"));
		}
		if (request.getParameter("addedItems") != null) {
			box.put("addedItems", request.getParameter("addedItems"));
		}

		if (choice.equalsIgnoreCase("l")) {
			box.put("po_id", radio_str);
			map = (Map) storesHandlerService.getSOItemDetails(box);
		}

		jsp = "soItemDetails";
		return new ModelAndView(jsp, "map", map);
	}
	public ModelAndView getSoExcelItemDetails(HttpServletRequest request,HttpServletResponse response)
	{
		Box box = HMSUtil.getBox(request);
		File fs[] = null;
		Map<String, Object> map = new HashMap<String, Object>();
		String choice = "";
		int radio_str = 0;
		String pageType = "";
		if (request.getParameter("sos") != null)
		{
			choice = request.getParameter("sos");
		}
		if (request.getParameter("pageType") != null)
		{
			pageType = request.getParameter("pageType");
			box.put("pageType", pageType);
		}
		if (request.getParameter("po_id") != null) {
			radio_str = Integer.parseInt("" + request.getParameter("po_id"));
		}
		if (request.getParameter("addedItems") != null)
		{
			box.put("addedItems", request.getParameter("addedItems"));
		}

		MultipartFormDataRequest mrequest = null;
		if (MultipartFormDataRequest.isMultipartFormData(request)) {
						try {
							mrequest = new MultipartFormDataRequest(request);
						} catch (UploadException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						java.util.Hashtable files = mrequest.getFiles();
						UploadFile file = (UploadFile) files.get(RequestConstants.UPLOAD_FILENAME);
						InputStream is=file.getInpuStream();

						/*		if(request.getParameter("file")!=null){
			  					String file=request.getParameter("file");
					}*/
		if (choice.equalsIgnoreCase("l")) {
			box.put("po_id", radio_str);
			map = (Map) storesHandlerService.getSOItemDetails(box);
		}
		}
		jsp = "soItemExcelDetails";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView extractXmlDocuments(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		MultipartFormDataRequest mrequest = null;
		String fileName = null;
		String message = null;
		String hin_no = "";
		String fileExtension = null;
		int hospitalId;
		HttpSession session = request.getSession();
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			box.put("hospitalId", hospitalId);
		}
		if (session.getAttribute(LOGIN_NAME) != null) {
			userName = (String) session.getAttribute(LOGIN_NAME);
			box.put("userName", userName);
		}
		File fil=null;
		String userName = "";
		Vector cellVectorHolder = new Vector();
		if (MultipartFormDataRequest.isMultipartFormData(request)) {
				try {
					mrequest = new MultipartFormDataRequest(request);
				} catch (UploadException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				java.util.Hashtable files = mrequest.getFiles();
				UploadFile file = (UploadFile) files.get(RequestConstants.UPLOAD_FILENAME);
				InputStream is=file.getInpuStream();
				try {
					POIFSFileSystem myFileSystem = new POIFSFileSystem(is);
					HSSFWorkbook myWorkBook = new HSSFWorkbook(myFileSystem);

                    HSSFSheet mySheet = myWorkBook.getSheetAt(0);

                    Iterator rowIter = mySheet.rowIterator();

                    while (rowIter.hasNext()) {
                            HSSFRow myRow = (HSSFRow) rowIter.next();
                            Iterator cellIter = myRow.cellIterator();
                            Vector cellStoreVector = new Vector();
                            while (cellIter.hasNext()) {
                                    HSSFCell myCell = (HSSFCell) cellIter.next();
                                    cellStoreVector.addElement(myCell);
                            }
                            cellVectorHolder.addElement(cellStoreVector);
                    }
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				Object[][] obj=new Object[cellVectorHolder.size()][14];
                for (int i = 0; i < cellVectorHolder.size(); i++) {
                        Vector cellStoreVector = (Vector) cellVectorHolder.elementAt(i);
                        for (int j = 0; j < cellStoreVector.size(); j++) {
                                HSSFCell myCell = (HSSFCell) cellStoreVector.elementAt(j);
                                String stringCellValue = myCell.toString();
                                obj[i][j]=stringCellValue;
                        }
                }
                map.put("obj", obj);
		}
		String jsp=null;
		jsp = "soItemExcelDetails";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}
public ModelAndView responseSOGridList(HttpServletRequest request,HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		String choice = "";
		int radio_str = 0;
		String items = "";
		String loanInStatus = "";
		int pageNo = 1;
		if (request.getParameter("sos") != null) {
			choice = request.getParameter("sos");
		}
		if (request.getParameter("items") != null) {
			items = request.getParameter("items");
		}
		if (request.getParameter("loanInStatus") != null) {
			loanInStatus = request.getParameter("loanInStatus");
		}
		if (choice.equalsIgnoreCase("l") && !items.equals("")){
			radio_str = Integer.parseInt(request.getParameter("po_id"));
			map = (Map) storesHandlerService.getAdjustmentList(radio_str,pageNo, items, loanInStatus);
		}
		map.put("choice", choice);
		jsp = "grid";
		return new ModelAndView(jsp, "map", map);
		// return null;
	}

	public ModelAndView modificationCRVdetail(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		String fromDate = "";
		String toDate = "";
		String grnNo = "";
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> tempMap = new HashMap<String, Object>();
		Map<String, Object> searchFieldMap = new HashMap<String, Object>();
		Integer deptId = 0;
		List<StoreGrnM> searchGrnList = new ArrayList<StoreGrnM>();
		HttpSession session = request.getSession();
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}
		try {
			if (request.getParameter(FROM_DATE) != null) {
				fromDate = request.getParameter(FROM_DATE);
			}
			if (request.getParameter(TO_DATE) != null) {
				toDate = request.getParameter(TO_DATE);

			}
			if (request.getParameter(GRN_NO) != null) {
				grnNo = request.getParameter(GRN_NO);
			}
		} catch (Exception e) {
			e.printStackTrace();		}
		searchFieldMap.put("fromDate", fromDate);
		searchFieldMap.put("toDate", toDate);
		searchFieldMap.put("grnNo", grnNo);
		searchFieldMap.put("deptId", deptId);
		try {
			// tempMap = storesHandlerService.showGrnJsp(box, dataMap);
			// if (tempMap.get("searchGrnList") != null)
			// searchGrnList = (List) tempMap.get("searchGrnList");

			map = storesHandlerService.searchGrn(searchFieldMap);
			map.put("searchGrnList", searchGrnList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		// jsp = SEARCH_GRN_JSP;
		jsp = "modificationCRVDetail";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView printReportForItemWise(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		int item_type = 0;

		try {

			if (box.getInt(MMF_DEPARTMENT_DATE) != 0) {
				requestParameters.put("mmfForTheYear", box
						.getInt(MMF_DEPARTMENT_DATE));
			}
			if (request.getParameter("itemType") != null) {
				item_type = Integer.parseInt(request.getParameter("itemType"));
				requestParameters.put("item_type", item_type);
			}
			if (box.get("storeType").equals("e")) {
				requestParameters.put("storeType", box.get("storeType"));
				requestParameters.put("MMFStoreType", "Expendable");
			} else if (box.get("storeType").equals("h")) {
				requestParameters.put("storeType", box.get("storeType"));
				requestParameters.put("MMFStoreType", "ECHS");
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		try {

			Map<String, Object> connectionMap = storesHandlerService
					.getConnectionForReport();
			if (box.get("format").equals("excel")) {

				Map<String, Object> map = new HashMap<String, Object>();
				map = storesHandlerService.getEcelSheetDataForMMf(box);
				if (map.get("flag") != null
						&& map.get("flag").toString()
								.equalsIgnoreCase("NoData")) {
					map.put("message", "No Data Found!....");
				} else {
					try {
						response.setContentType("application/vnd.ms-excel");
						response.setHeader("Content-Disposition",
								"attachment; filename="
										+ map.get("download_path").toString());
						File f = new File(map.get("download_path").toString());
						InputStream in = new FileInputStream(f);
						ServletOutputStream outs = response.getOutputStream();
						int bit = 256;
						int i = 0;
						while ((bit) >= 0) {
							bit = in.read();
							outs.write(bit);
						}
						outs.flush();
						outs.close();
						in.close();
						if (f.exists())
							f.delete();
					} catch (IOException ioe) {
						ioe.printStackTrace();
					}
				}
			} else {

				byte[] bytes = null;

				try {
					bytes = JasperRunManager.runReportToPdf(
							getCompiledReport("mmf_item_wise_report"),
							requestParameters, (Connection) connectionMap
									.get("con"));
				} catch (JRException e) {
					e.printStackTrace();
				}
				String fileName = "mmf_item_wise_report";
				response.setHeader("Content-Disposition",
						"attachment; filename=" + fileName + ".pdf");
				response.setContentLength(bytes.length);
				ServletOutputStream ouputStream;
				try {
					ouputStream = response.getOutputStream();
					ouputStream.write(bytes, 0, bytes.length);
					ouputStream.flush();
					ouputStream.close();
				} catch (IOException e) {
					e.printStackTrace();
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;
	}



	public ModelAndView showDispensaryComsumptionJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		int deptId = Integer.valueOf(session.getAttribute("deptId").toString());
		Box box = HMSUtil.getBox(request);
		box.put("deptId", deptId);
		int issue_no = 0;
		int page = 1;
		String pvms = "";
		String pageFlag = "";
		if (request.getParameter("issueNo") != null
				&& !request.getParameter("issueNo").equals("")) {
			issue_no = Integer.parseInt(request.getParameter("issueNo"));
		}
		if (request.getParameter("pageNo") != null
				&& !request.getParameter("pageNo").equals("")) {
			page = Integer.parseInt(request.getParameter("pageNo"));
		}
		if (request.getParameter("pvmsNoS") != null
				&& !request.getParameter("pvmsNoS").equals("")) {
			pvms = request.getParameter("pvmsNoS");
		}
		if (request.getParameter("page") != null
				&& !request.getParameter("page").equals("")) {
			pageFlag = request.getParameter("page");
		}
		if (pageFlag.equals("submit")) {
			int empId = Integer.parseInt(request.getParameter("empId"));
			box.put("empId", empId);
			String remarks = request.getParameter("remarks");
			box.put("remarks", remarks);
			String fromDate = request.getParameter("issue_date");
			box.put("fromDate", fromDate);
			String toDate = request.getParameter("issue_to_date");
			box.put("toDate", toDate);
			String prescription = request.getParameter("prescription");
			box.put("prescription", prescription);
		}
		box.put("pageNo", page);
		box.put("pvms", pvms);
		box.put(ISSUE_NO, issue_no);
		box.put("pageFlag", pageFlag);
		map = storesHandlerService.showDispensaryComsumptionJsp(box);
		jsp = DISPENSARY_CONSUMPTION_JSP;
		jsp += ".jsp";
		title = "Dispensary Consumption";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("pageNo", page);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showDispensaryConsumptionReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		int deptId = Integer.valueOf(session.getAttribute("deptId").toString());
		map = storesHandlerService.getDBConnection();
		map.put("deptId", deptId);
		map.put("issueId", box.getInt("issueId"));

		HMSUtil.generateReport("DispensaryConsumptionReport", map,
				(Connection) map.get("conn"), response, getServletContext());
		return null;
	}
	public ModelAndView submitDispensaryConsumptionStockDetails(HttpServletRequest request, HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List issQtyList = new ArrayList();
		List amountList = new ArrayList();
		List pvmsList 	= new ArrayList();
		List batchNumberList = new ArrayList();
		List brandNameList = new ArrayList();
		List expiryDateList = new ArrayList();
		List costPriceList = new ArrayList();
		List storeItemBatchStockIdList = new ArrayList();
		int deptId = Integer.parseInt(request.getParameter("deptId"));
		int itemId = Integer.parseInt(request.getParameter("itemId"));
		int empId  = Integer.parseInt(request.getParameter("empId"));
		String remarks = request.getParameter("remarks");
		int counter = Integer.parseInt(request.getParameter("counter"));
		String opdIssueno = request.getParameter("opdIssueno");
		int opdIssueMasterId = 0;
		try {
			opdIssueMasterId = Integer.parseInt(request.getParameter("opdIssueMasterId"));
		} catch (Exception e) {
			opdIssueMasterId = 0;
		}
		String prescription = request.getParameter("prescription");
		String date = request.getParameter("date");
		String fromDate = request.getParameter("fromDate");
		String toDate = request.getParameter("toDate");
		String time = request.getParameter("time");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		String userName = (String) session.getAttribute("userName");

		for (int i = 0; i < counter; i++) {
			String str = request.getParameter("issueQty" + i);
			if (str.length() > 0) {
				issQtyList.add(request.getParameter("issueQty" + i));
				batchNumberList.add(request.getParameter("batchNo" + i));
				brandNameList.add(request.getParameter("brandId" + i));
				expiryDateList.add(request.getParameter("expiryDate" + i));
				storeItemBatchStockIdList.add(request.getParameter("storeItemBatchStockId" + i));
				BigDecimal costPrice = new BigDecimal(0);
				BigDecimal qty = new BigDecimal(0);
				BigDecimal amt = new BigDecimal(0);
				try {
					costPrice = new BigDecimal(request.getParameter("costprice"+ i));
				} catch (Exception e) {
					costPrice = new BigDecimal(0);
				}
				try {
					qty = new BigDecimal(request.getParameter("issueQty" + i));
				} catch (Exception e) {
					qty = new BigDecimal(0);
				}
				try {
					amt = costPrice.multiply(qty);
				} catch (Exception e) {
					amt = new BigDecimal(0);
				}
				costPriceList.add(costPrice.toString());
				amountList.add(amt.toString());
			}
		}
		map.put("deptId", deptId);
		map.put("hospitalId", hospitalId);
		map.put("date", date);
		map.put("fromDate", fromDate);
		map.put("toDate", toDate);
		map.put("time", time);
		map.put("userName", userName);
		map.put("itemId", itemId);
		map.put("batchNumberList", batchNumberList);
		map.put("brandNameList", brandNameList);
		map.put("expiryDateList", expiryDateList);
		map.put("issQtyList", issQtyList);
		map.put("costPriceList", costPriceList);
		map.put("amountList", amountList);
		map.put("storeItemBatchStockIdList", storeItemBatchStockIdList);
		map.put("empId", empId);
		map.put("remarks", remarks);
		map.put("opdIssueno", opdIssueno);
		map.put("prescription", prescription);
		map.put("opdIssueMasterId", opdIssueMasterId);

		map = storesHandlerService.submitDispensaryConsumptionStockDetails(map);
		jsp = OPD_PATIENT_STOCK_DETAILS;
		title = "OPD Stock Details";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	public void findloanInItems(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreLoaninM> sLIList = new ArrayList<StoreLoaninM>();
		@SuppressWarnings("unused")
		List objectList = new ArrayList();
		String soId = null;
		if (request.getParameter("soId") != null) {
			soId = request.getParameter("soId");
		}
		dataMap.put("soId", soId);

		try {
			if (!soId.equals("") && soId != null) {
				map = storesHandlerService.findloanInItems(dataMap);
			}
			sLIList = (List) map.get("storeLoanInList");

			StringBuffer sb = new StringBuffer();
			sb.append("<item>");
			if (sLIList != null) {
				if (sLIList.size() > 0) {
					sb.append("<SLIStatus>" + "YES" + "</SLIStatus>");
				} else {
					sb.append("<SLIStatus>" + "NO" + "</SLIStatus>");
				}
			} else {
				sb.append("<SLIStatus>" + "NO" + "</SLIStatus>");
			}
			sb.append("</item>");
			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");

			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void findGrnLedgeraction(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreGrnM> sLIList = new ArrayList<StoreGrnM>();
		@SuppressWarnings("unused")
		List objectList = new ArrayList();
		String grnNo = null;
		HttpSession session = request.getSession();
		if (request.getParameter("grnNo") != null) {
			grnNo = request.getParameter("grnNo");
		}
		int deptId = Integer.valueOf(session.getAttribute("deptId").toString());
		dataMap.put("grnNo", grnNo);
		dataMap.put("deptId", deptId);

		try {
			if (!grnNo.equals("") && grnNo != null) {
				map = storesHandlerService.findGrnLedgeraction(dataMap);
			}
			sLIList = (List) map.get("storegrnMList");

			StringBuffer sb = new StringBuffer();
			sb.append("<item>");
			if (sLIList != null) {
				if (sLIList.size() > 0) {
					sb.append("<SLIStatus>" + "YES" + "</SLIStatus>");
				} else {
					sb.append("<SLIStatus>" + "NO" + "</SLIStatus>");
				}
			} else {
				sb.append("<SLIStatus>" + "NO" + "</SLIStatus>");
			}
			sb.append("</item>");
			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");

			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public ModelAndView pendingSupplierOrderReport(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> purchaseMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		int radio_str = 0;
		int deptId = 0;
		int searchPoId = 0;
		String items = "";

		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
			dataMap.put("deptId", deptId);
		}

		map = storesHandlerService.pendingSupplierOrderDetails(dataMap);

		jsp = PENDING_SUPPLIER_ORDER_JSP;
		jsp += ".jsp";

		// map.put("purchaseMap", purchaseMap);
		// map.put("grnList", grnList);
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showItemSearchJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.showItemSearchJsp(box);
		jsp = "itemNameSearch";
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView generatePendingSupplierOrderReport(
			HttpServletRequest request, HttpServletResponse response) {
		String fromDate = null;
		String toDate = null;
		Date fromDateDisp = null;
		Date toDateDisp = null;
		int deptId = 0;
		int itemId = 0;
		String patient = "";
		String query = "";
		int status = 0;
		String supplierId = "";
		String soNoFrom = "";
		String soNoTo = "";
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

		Map<String, Object> parameters = new HashMap<String, Object>();
		HttpSession session = request.getSession();

		try {

			if (session.getAttribute("deptId") != null)
				deptId = Integer.parseInt("" + session.getAttribute("deptId"));

			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = sdf.format(HMSUtil
						.convertStringTypeDateToDateType(request
								.getParameter(FROM_DATE)));
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = sdf.format(HMSUtil
						.convertStringTypeDateToDateType(request
								.getParameter(TO_DATE)));
			}

			if (fromDate != null && toDate != null) {
				query = query + " and a.po_date between '" + fromDate
						+ "' AND '" + toDate + "'";
			}

			if (deptId != 0) {
				parameters.put("deptId", deptId);
			}

			if (request.getParameter(ITEM_ID) != null
					&& !(request.getParameter(ITEM_ID).equals(""))) {
				itemId = Integer.parseInt(request.getParameter(ITEM_ID));
				query = query + " and b.item_id=" + itemId;
				parameters.put("itemId", itemId);
			}
			if (request.getParameter(TENDER_VENDOR_SUPPLIER_ID) != null
					&& !(request.getParameter(TENDER_VENDOR_SUPPLIER_ID)
							.equals(""))) {
				supplierId = request.getParameter(TENDER_VENDOR_SUPPLIER_ID);
				query = query + "and c.supplier_name = '" + supplierId + "'";
				parameters.put("supplierId", supplierId);
			}

			if (request.getParameter(SUPPLYNOFROM) != null
					&& !request.getParameter(SUPPLYNOFROM).equals("")) {
				soNoFrom = (String) request.getParameter(SUPPLYNOFROM);
			}
			if (request.getParameter(SUPPLYNOTO) != null
					&& !request.getParameter(SUPPLYNOTO).equals("")) {
				soNoTo = (String) request.getParameter(SUPPLYNOTO);
			}

			if (!soNoFrom.equals("") && !soNoTo.equals("")) {
				query = query
						+ "and a.po_id between (select po_id from store_po_header where po_number = '"
						+ soNoFrom
						+ "')"
						+ " and (select po_id from store_po_header where po_number = '"
						+ soNoTo + "')";
				;
			}

			// query = " where a.po_date between '"+ fromDate +"' AND '"
			// +toDate+"'";

			// filmDetailsMap =
			// labHandlerService.getTotalFilmUsed(departmentId);

		} catch (Exception e) {
			e.printStackTrace();
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		detailsMap = storesHandlerService.getConnectionForReport();

		parameters.put("query", query);
		// parameters.put("totalFilmUsed",totalFilmUsed);
		/*
		 * fromDateDisp
		 * =HMSUtil.convertStringTypeDateToDateType(request.getParameter
		 * (FROM_DATE)); toDateDisp
		 * =HMSUtil.convertStringTypeDateToDateType(request
		 * .getParameter(TO_DATE)); parameters.put("fromDate",fromDateDisp);
		 * parameters.put("toDate",toDateDisp);
		 */

		// parameters.put("SUBREPORT_DIR",
		// getServletContext().getRealPath("/reports/"));
		try {
			HMSUtil.generateReport("PendingSupplyOrder_ItemWise", parameters,
					(Connection) detailsMap.get("con"), response,
					getServletContext());
		} catch (Exception e) {

			e.printStackTrace();
		}

		return null;
	}

	public void fillItemsForLpo(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		String pvmsNo = "";
		try {
			if (request.getParameter("pvmsNo") != null) {
				pvmsNo = request.getParameter("pvmsNo");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		dataMap.put("pvmsNo", pvmsNo);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);

		map = storesHandlerService.fillItemsCommon(dataMap);
		if (map.get("itemList") != null) {
			itemList = (List) map.get("itemList");
		}

		if (map.get("brandList") != null) {
			brandList = (List) map.get("brandList");
		}
		StringBuffer sb = new StringBuffer();
		for (MasStoreItem masStoreItem : itemList) {
			sb.append("<item>");
			sb.append("<id>" + masStoreItem.getId() + "</id>");
			sb.append("<pvms>" + masStoreItem.getPvmsNo() + "</pvms>");

			try {
				sb.append("<au>"
						+ masStoreItem.getItemConversion().getPurchaseUnit()
								.getUnitName() + "</au>");
			} catch (Exception e) {
				sb.append("<au>" + "-" + "</au>");
			}
			try {
				sb.append("<bgId>"
						+masStoreItem.getBrandedGeneric()+ "</bgId>");
			} catch (Exception e) {
				sb.append("<bgId>" + "-" + "</bgId>");
			}
			try {
				sb.append("<formula>"
						+ masStoreItem.getItemConversion().getFormula()
						+ "</formula>");
			} catch (Exception e) {
				sb.append("<formula>" + "-" + "</formula>");
			}
			try {
				sb
						.append("<conversionFactor>"
								+ masStoreItem.getItemConversion()
										.getConversionFactor1()
								+ "</conversionFactor>");
			} catch (Exception e) {
				sb.append("<conversionFactor>" + "-" + "</conversionFactor>");
			}
			try {
				sb.append("<dispType>"
						+ masStoreItem.getItemConversion()
								.getIntermediateUnit().getUnitName()
						+ "</dispType>");
			} catch (Exception e) {
				sb.append("<dispType>" + "-" + "</dispType>");
			}
			sb.append("<name>" + masStoreItem.getNomenclature() + "</name>");

			sb.append("<brands>");
			for (MasStoreBrand masStoreBrand : brandList) {
				sb.append("<brand>");
				sb.append("<brandId>" + masStoreBrand.getId() + "</brandId>");
				sb.append("<brandName>" + masStoreBrand.getBrandName()
						+ "</brandName>");
				sb.append("</brand>");
			}
			sb.append("</brands>");

			sb.append("</item>");
		}
		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}
		// return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView showPvmsNomencaltureSearchJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.showPvmsNomencaltureSearchJsp(box);
		jsp = "itemNameSearch";
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
		// return null;
	}

	public ModelAndView showLoanOutStatusJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.showLoanOutStatusJsp(box);
		map.put("contentJsp", jsp);
		jsp = "showLoanOutStatusReport";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView generateLoanOutStatusReport(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		String fromDate = null;
		String toDate = null;
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		String query = "";
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

		if (box.get("Department") != null && box.getInt("Department") != 0) {
			query = query + "and im.to_store='" + box.getInt("Department")
					+ "'";
		}

		if (box.get(FROM_DATE) != null && !(box.get(FROM_DATE).equals(""))) {
			fromDate = sdf.format(HMSUtil.convertStringTypeDateToDateType(box
					.get(FROM_DATE)));
		}
		if (box.get(TO_DATE) != null && !(box.get(TO_DATE).equals(""))) {
			toDate = sdf.format(HMSUtil.convertStringTypeDateToDateType(box
					.get(TO_DATE)));
		}

		if (fromDate != null && toDate != null) {
			query = query + "and im.issue_date between '" + fromDate
					+ "' and '" + toDate + "'";
		}

		if (box.get("item") != null && !box.get("item").equals("")) {
			query = query + "and m.item_id = '" + box.getInt("item") + "'";
		}

		if (box.get("status") != null && !box.get("status").equals("")) {
			String status = box.getString("status");
			if (status.equalsIgnoreCase("p")) {
				query = query + "and (im.status ='o' or im.status = 'p')";
			} else {
				query = query + "and im.status ='o'";
			}
		}

		int deptId = Integer.valueOf(session.getAttribute("deptId").toString());
		map = storesHandlerService.getDBConnection();
		map.put("SUBREPORT_DIR", getServletContext().getRealPath("/reports/"));
		map.put("query", query);

		HMSUtil.generateReport("loan_out_status_report", map, (Connection) map
				.get("conn"), response, getServletContext());
		return null;
	}

	public ModelAndView showMMFDepartmentWiseItems(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.showLoanOutStatusJsp(box);
		map.put("contentJsp", jsp);
		jsp = "mmfDepartmentWiseItems";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);

	}

	public ModelAndView mmfDepartmentWiseItemReport(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		String fromDate = null;
		String toDate = null;
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		map = storesHandlerService.getDBConnection();
		if (box.get("Department") != null && box.getInt("Department") != 0) {
			map.put("departmentId", box.getInt("Department"));
		}

		if (box.get("mmfyear") != null && !box.get("mmfyear").equals("")) {
			map.put("mmfForTheYear", box.getInt("mmfyear"));
		}

		if (box.get("mmfstore") != null && !box.get("mmfstore").equals("")) {
			map.put("storeType", box.get("mmfstore"));

			if (box.get("mmfstore").equals("e")) {
				map.put("MMFStoreType", "Expendable Stores");
			} else {
				map.put("MMFStoreType", "ECHS");
			}
		}

		// int deptId =
		// Integer.valueOf(session.getAttribute("deptId").toString());

		// HMSUtil.generateReport("mmf_items_departmentwise", map,
		// (Connection)map.get("conn"), response, getServletContext());
		HMSUtil.generateReport("mmf_department_approval_departmentwise", map,
				(Connection) map.get("conn"), response, getServletContext());
		return null;
	}
	public ModelAndView showDepartmentWisePendingCIVReport(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);

		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.showLoanOutStatusJsp(box);
		map.put("contentJsp", jsp);
		jsp = "pending_civ";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);

	}
	public ModelAndView DepartmentWisePendingCIVReport(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		String fromDate = null;
		String toDate = null;
		int deptId=0;
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		map = storesHandlerService.getDBConnection();
		if (box.get("Department") != null && box.getInt("Department") != 0) {
			map.put("to_department", box.getInt("Department"));
		}
		map.put("from_department",deptId );
				HMSUtil.generateReport("Store_civ_open_report", map,
				(Connection) map.get("conn"), response, getServletContext());
		return null;
	}
	public ModelAndView showBINCardJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		// map = storesHandlerService.showBINCardJsp();
		title = "BIN Card Report";
		jsp = "binCard";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView getItemListForBINCardByAutocomplete(
			HttpServletRequest request, HttpServletResponse response) {
		int deptId = 0;
		int hospitalId=0;
		HttpSession session = request.getSession();
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// add hospital_id by javed khan
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		String itemNameField = "";
		String autoHint = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (request.getParameter("requiredField") != null) {
			itemNameField = (request.getParameter("requiredField"));
		}
		if (request.getParameter(itemNameField) != null) {
			autoHint = (request.getParameter(itemNameField));
		}
		List<StoreTenderT> itemList = new ArrayList<StoreTenderT>();
		dataMap.put("autoHint", autoHint);
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.getItemListForCompleteStockNomenclatureByAutocomplete(dataMap);
		jsp = "BINCard_Autocomplete";
		return new ModelAndView(jsp, "map", map);
	}
	public ModelAndView getItemListForBINCardByCommonNameAutocomplete(
			HttpServletRequest request, HttpServletResponse response) {

		int deptId = 0;
		HttpSession session = request.getSession();
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		String itemNameField = "";
		String autoHint = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (request.getParameter("requiredField") != null) {
			itemNameField = (request.getParameter("requiredField"));
		}
		if (request.getParameter(itemNameField) != null) {
			autoHint = (request.getParameter(itemNameField));
		}
		List<StoreTenderT> itemList = new ArrayList<StoreTenderT>();
		dataMap.put("autoHint", autoHint);
		dataMap.put("deptId", deptId);
		map = storesHandlerService
				.getItemListForCompleteStockCommonNameByAutocomplete(dataMap);
		jsp = "CommonName_AutoComplete";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView generateBINCardReport(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> datamap = new HashMap<String, Object>();
		String pvmsNo = "";
		String brand = "";
		int itemId = 0;
		int deptId = 0;
		int hospitalId=0;
		if (session.getAttribute("deptId") != null) {
			Integer temp = (Integer) session.getAttribute("deptId");
			deptId = temp.intValue();
		}
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));
		map = storesHandlerService.getConnectionForReport();
		pvmsNo = box.getString("pvmsNo");

		/*SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
		SimpleDateFormat formatterOut = new SimpleDateFormat("dd-mmm-yyyy");*/
		Date fromDate = null;
		Date toDate = null;
		String dt1 =  box.getString(FROM_DATE);
		String dt2 =  box.getString(TO_DATE);
		try {
			/*String date4MySQL = formatterOut.format(formatterIn.parse(dt1));
			fromDate = java.sql.Date.valueOf(date4MySQL);
			date4MySQL = formatterOut.format(formatterIn.parse(dt2));
			toDate = java.sql.Date.valueOf(date4MySQL);*/
			fromDate = HMSUtil.convertStringTypeDateToDateType(dt1);
			toDate = HMSUtil.convertStringTypeDateToDateType(dt2);
		} catch (Exception e) {
		}

		if (request.getParameter("pvmsNo") != null) {
			pvmsNo = request.getParameter("pvmsNo");
		}
		pvmsNo = box.getString("pvmsNo");

		/*box.put("fromDate", fromDate);
		box.put("toDate", toDate);*/
		box.put("deptId", deptId);
		box.put("hospitalId", hospitalId);

		datamap = storesHandlerService.getItemId(box);
		itemId = (Integer) datamap.get("itemId");

		map.put("fromDate", fromDate);
		map.put("toDate", toDate);
		map.put("itemId", itemId);
		map.put("deptId", deptId);
		map.put("hospitalId", hospitalId);
		HMSUtil.generateReport("BIN_Card", map, (Connection) map.get("con"),
				response, getServletContext());
		return null;
	}

	public ModelAndView showVendorJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		// map = storesHandlerService.showBINCardJsp();
		title = "VedorDetails";
		jsp = "vendorDetails";
		// jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView getvendorDetails(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		map = storesHandlerService.getVendorDetails(box);
		title = "VedorDetails";
		jsp = "vendorDetails";
		// jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView closeIssueCiv(HttpServletRequest request,
			HttpServletResponse response) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		int issueId = 0;
		if (request.getParameter(RequestConstants.ISSUE_UNIT_ID) != null) {
			issueId = Integer.parseInt(request
					.getParameter(RequestConstants.ISSUE_UNIT_ID));
		}
		// --------------------------------------------------------------------------------
		Map map = new HashMap();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);
		boolean status = false;

		status = storesHandlerService.closeIssueCiv(issueId);
		String message = "";
		if (status) {
			message = "CIV has been closed Successfully ";
		}

		map = storesHandlerService.showIssueDispensaryJsp(dataMap);

		jsp = RequestConstants.ISSUED_TO_DISPENSARY_JSP;
		jsp = jsp + ".jsp";
		map.put("message", message);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView getItemListForLoanoutByAutocompleteBalancePvms(
			HttpServletRequest request, HttpServletResponse response) {
		try {
			String userName = "";
			int deptId = 0;
			int hospitalId = 0;

			HttpSession session = request.getSession();
			if (session.getAttribute("userName") != null)
				userName = (String) session.getAttribute("userName");
			if (session.getAttribute("hospitalId") != null)
				hospitalId = Integer.parseInt(""
						+ session.getAttribute("hospitalId"));
			if (session.getAttribute("deptId") != null)
				deptId = Integer.parseInt("" + session.getAttribute("deptId"));
			// --------------------------------------------------------------------------------
			String itemNameField = "";
			String autoHint = "";
			Map<String, Object> dataMap = new HashMap<String, Object>();
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			int balanceId = 0;
			if (request.getParameter("balanceId") != null) {
				balanceId = Integer.parseInt(request.getParameter("balanceId"));
			}
			List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
			dataMap.put("autoHint", autoHint);
			dataMap.put("deptId", deptId);
			dataMap.put("balanceId", balanceId);
			map = storesHandlerService
					.getItemListForLoanoutByAutocompleteBalancePvms(dataMap);
			jsp = "result";
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView(jsp, "map", map);
	}

	public void fillItemsForIndentToPvsm(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session------
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		BigDecimal stockIn = null;

		Box box = HMSUtil.getBox(request);
		String itemNameField = "";
		String pvmsNo = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (request.getParameter("pvmsNo") != null) {
			pvmsNo = (request.getParameter("pvmsNo"));
		}

		dataMap.put("pvmsNo", pvmsNo);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.fillItemsForIndentToSOC(dataMap);
		if (map.get("itemList") != null) {
			itemList = (List) map.get("itemList");
		}
		if (map.get("brandList") != null) {
			brandList = (List) map.get("brandList");
		}
		if (map.get("stockIn") != null) {
			stockIn = new BigDecimal("" + map.get("stockIn"));
		}
		StringBuffer sb = new StringBuffer();
		try {
			for (MasStoreItem masStoreItem : itemList) {
				sb.append("<item>");
				sb.append("<id>" + masStoreItem.getId() + "</id>");
				sb.append("<pvms>" + pvmsNo + "</pvms>");
				sb.append("<nomenclature>" + masStoreItem.getNomenclature()
						+ "</nomenclature>");
				sb.append("<au>"
						+ masStoreItem.getItemConversion().getPurchaseUnit()
								.getUnitName() + "</au>");
				sb.append("<brands>");
				for (MasStoreBrand brand : brandList) {
					sb.append("<brand>");
					sb.append("<brandId>" + brand.getId() + "</brandId>");
					sb.append("<brandName>" + brand.getBrandName()
							+ "</brandName>");
					sb.append("<manufacturerId>"
							+ brand.getManufacturer().getId()
							+ "</manufacturerId>");
					sb.append("<manufacturerName>"
							+ brand.getManufacturer().getManufacturerName()
							+ "</manufacturerName>");
					sb.append("</brand>");
				}
				sb.append("</brands>");
				sb.append("<stockIn>" + stockIn + "</stockIn>");
				sb.append("</item>");
			}

			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}

		// return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView deleteOpeningBalanceItemJsp(HttpServletRequest request,
			HttpServletResponse response) {
		try {
			String userName = "";
			int deptId = 0;
			int hospitalId = 0;
			Box box = HMSUtil.getBox(request);
			session = request.getSession();
			if (session.getAttribute("userName") != null)
				userName = (String) session.getAttribute("userName");
			if (session.getAttribute("deptId") != null)
				deptId = Integer.parseInt("" + session.getAttribute("deptId"));
			// --------------------------------------------------------------------------------

			Map<String, Object> dataMap = new HashMap<String, Object>();
			List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
			map = storesHandlerService.deleteOpeningBalanceItems(box);
			jsp = "showBalance";
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = jsp + ".jsp";
		map.put("message", message);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView validateBalanceJsp(HttpServletRequest request,
			HttpServletResponse response) {
		String messageTOBeVisibleToTheUser = "";
		try {
			String userName = "";
			int deptId = 0;

			int hospitalId = 0;
			Box box = HMSUtil.getBox(request);
			session = request.getSession();
			if (session.getAttribute("userName") != null)
				userName = (String) session.getAttribute("userName");
			if (session.getAttribute("deptId") != null)
				deptId = Integer.parseInt("" + session.getAttribute("deptId"));
			// --------------------------------------------------------------------------------
			box.put("deptId", deptId);
			Map<String, Object> dataMap = new HashMap<String, Object>();
			List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
			map = storesHandlerService.validateOpeningBalanceItems(box);
			jsp = STORES_MESSAGE_JSP;
			messageTOBeVisibleToTheUser = "Balance Records Validated Successfully";
			url = "/hms/hms/stores?method=showBalanceJsp";
			map.put("url", url);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = jsp + ".jsp";
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		map.put("message", message);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	public void getPoList(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		List<StorePoHeader> poHeader = new ArrayList<StorePoHeader>();
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		int hospitalId=0;
		String netAmuont="0.0";
		HttpSession session = request.getSession();
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));

		box.put("deptId", deptId);
		int supplierId = 0;
		if (request.getParameter("supplerId") != null) {
			supplierId = Integer.parseInt(""
					+ request.getParameter("supplerId"));
		}
		box.put(SUPPLIER_ID, supplierId);
		box.put("hospitalId", hospitalId);

		map = storesHandlerService.getResponsePoList(box);
		poHeader = (List<StorePoHeader>) map.get("second_combo");
		if(map.get("netAmuont")!=null){
			netAmuont=map.get("netAmuont").toString();
		}
		StringBuffer sb = new StringBuffer();

		try {
			sb.append("<item>");
			sb.append("<po>");

			for (StorePoHeader storePo : poHeader) {
				sb.append("<pos>");
				sb.append("<poId>" + storePo.getId() + "</poId>");
				sb.append("<poNumber>" + storePo.getPoNumber() + "</poNumber>");
				sb.append("</pos>");
			}

			sb.append("</po>");
			sb.append("<amtForProB>"+netAmuont+"</amtForProB>");
			sb.append("</item>");

			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public ModelAndView deleteGridItemsIssueToDispensary(
			HttpServletRequest request, HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);

		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		Map dataMap = new HashMap();
		Map<String, Object> deletemap = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		int issueId = 0;
		if (request.getParameter("issueId") != null) {
			issueId = Integer.parseInt(request.getParameter("issueId"));
		}
		box.put("issueId", issueId);
		box.put("issueUnit", issueId);
		box.put("deptId", deptId);
		deletemap = storesHandlerService.deleteGridItemsIssueToDispensary(box);
		jsp = RequestConstants.MODIFY_ISSUE_CIV;

		map = storesHandlerService.searchIssueCiv(box);
		if (deletemap != null) {
			if (deletemap.get("message") != null
					&& !deletemap.get("message").equals("")) {
				map.put("message", deletemap.get("message"));
			}
		}
		Users user = (Users) session.getAttribute("users");
		dataMap.put("users", user);
		Map<String, Object> newMap = commonMasterHandlerService
				.getUserButtonRights(dataMap);
		List<UserButtonRights> userRightsList = (List<UserButtonRights>) newMap
				.get("userRightsList");
		map.put("userRightsList", userRightsList);
		jsp = jsp + ".jsp";
		// map = storesHandlerService.deleteGridItemsForDepartmentIndent(box);
		title = "Delete Department Indent";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showNewDepartmentMMFJsp(HttpServletRequest request,
			HttpServletResponse response) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		box.put("userName", userName);
		box.put("hospitalId", hospitalId);
		box.put("deptId", deptId);
		map = storesHandlerService.showNewDepartmentMMFJsp(box);
		map.put("contentJsp", jsp);
		map.put("box", box);
		jsp = "addNewDepartmentMMF";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView additionNewDepartmentMMF(HttpServletRequest request,
			HttpServletResponse response) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		box.put("userName", userName);
		box.put("hospitalId", hospitalId);
		box.put("deptId", deptId);
		// map = storesHandlerService.showNewDepartmentMMFJsp(box);
		map = storesHandlerService.doAddNewMmfItems(box);
		map.put("contentJsp", jsp);
		map.put("box", box);
		// jsp = "addNewDepartmentMMF";
		// return new ModelAndView(jsp, "map", map);
		return null;
	}

	public ModelAndView createAndImportTotalMmfDepartmentData(
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		box.put("deptId", (Integer) session.getAttribute("deptId"));
		box.put("storeType", box.get("storeType"));
		box.put("docId", box.get("docId"));
		Map<String, Object> datamap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		datamap = storesHandlerService
				.createAndImportTotalMmfDepartmentData(box);
		// jsp = STORE_MMF_DEPARTMENT_JSP;
		map = storesHandlerService.getCurrentYearMmfByItem(box);
		jsp = STORE_MMF_DEPARTMENT_APPROVAL_JSP;
		jsp = jsp + ".jsp";
		title = "MMF Entry Approval";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}
	public ModelAndView showItemAdjustmentScreen(HttpServletRequest request , HttpServletResponse response )
    {
    	Map<String , Object> map = new HashMap<String , Object>();
    	Box box = HMSUtil.getBox(request);
    	HttpSession session = request.getSession();
    	String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		map.put("box", box);
		map.put("userName", userName);
		map.put("deptId", deptId);
		map.put("hospitalId", hospitalId);
		//map = storesHandlerService.showItemAdjustmentScreen(map);
		jsp = "store_item_adjustment_screen.jsp";
		map.put("contentJsp", jsp);
    	return new ModelAndView("indexB","map" ,map);
    }
 public ModelAndView updateItemForAdjustment(HttpServletRequest request , HttpServletResponse response )
    {
    	Map<String , Object> map = new HashMap<String , Object>();
    	Box box = HMSUtil.getBox(request);
    	HttpSession session = request.getSession();
    	String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		boolean Successfull = false;

		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		map.put("box", box);
		map.put("userName", userName);
		map.put("deptId", deptId);
		map.put("hospitalId", hospitalId);
		Successfull = storesHandlerService.updateItemForAdjustment(map);
		map = storesHandlerService.showItemAdjustmentScreen(map);
		jsp = "store_item_adjustment_screen.jsp";
		map.put("contentJsp", jsp);
    	return new ModelAndView("indexB","map" ,map);
    }

public void fillItemsForAdjustmentByPvmsNo(
		HttpServletRequest request, HttpServletResponse response) {
	Box box = HMSUtil.getBox(request);
	// --------------- Retriving User Name,Hospital Id,Department Id from
	// Session-----
	String userName = "";
	int deptId = 0;
	int hospitalId = 0;

	HttpSession session = request.getSession();
	if (session.getAttribute("userName") != null)
		userName = (String) session.getAttribute("userName");
	if (session.getAttribute("hospitalId") != null)
		hospitalId = Integer.parseInt(""
				+ session.getAttribute("hospitalId"));
	if (session.getAttribute("deptId") != null)
		deptId = Integer.parseInt("" + session.getAttribute("deptId"));
	// --------------------------------------------------------------------------------
	Map<String, Object> dataMap = new HashMap<String, Object>();
	String pvmsNo = "";
	try {
		if (request.getParameter("pvmsNo") != null) {
			pvmsNo = request.getParameter("pvmsNo");
		}

		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<Object[]> objectList = new ArrayList<Object[]>();
		dataMap.put("pvmsNo", pvmsNo);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.fillItemsForAdjustment(dataMap);
		if (map.get("itemList") != null) {
			itemList = (List) map.get("itemList");
		}
		if (map.get("objectList") != null) {
			objectList = (List) map.get("objectList");
		}
		StringBuffer sb = new StringBuffer();
		for (MasStoreItem masStoreItem : itemList) {
			sb.append("<item>");
			sb.append("<id>" + masStoreItem.getId() + "</id>");
			sb.append("<nomenclature>" + masStoreItem.getNomenclature()
					+ "</nomenclature>");
			sb.append("<pvms>" + masStoreItem.getPvmsNo() + "</pvms>");
			if (masStoreItem.getItemConversion() != null)
				sb.append("<au>"
						+ masStoreItem.getItemConversion()
								.getPurchaseUnit().getUnitName() + "</au>");
			else
				sb.append("<au>" + "NA" + "</au>");
			sb
					.append("<name>" + masStoreItem.getNomenclature()
							+ "</name>");
			sb.append("<batchs>");
			if(objectList != null ){

				for(Object[] object : objectList ){
					sb.append("<batch>");
					sb.append("<batchId>"+object[0]+"</batchId>");
					sb.append("<batchNumber>"+object[2]+"</batchNumber>");
					sb.append("<expiry>"+HMSUtil.convertDateToStringWithoutTime((Date)object[3])+"</expiry>");
					sb.append("<closingStock>"+object[4]+"</closingStock>");
					sb.append("<brandId>"+object[5]+"</brandId>");
					sb.append("</batch>");
				}
			}
			sb.append("</batchs>");
			sb.append("</item>");
		}

		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");

		response.getWriter().write(
				"<?xml version='1.0' encoding='ISO-8859-1'?>");
		response.getWriter().write("<items>");
		response.getWriter().write(sb.toString());
		response.getWriter().write("</items>");
	} catch (Exception e) {
		e.printStackTrace();
	}
}


	public StoresHandlerService getStoresHandlerService() {
		return storesHandlerService;
	}

	public void setStoresHandlerService(
			StoresHandlerService storesHandlerService) {
		this.storesHandlerService = storesHandlerService;
	}

	public CommonMasterHandlerService getCommonMasterHandlerService() {
		return commonMasterHandlerService;
	}

	public void setOpdHandlerService(
			OPDHandlerService opdHandlerService) {
		this.opdHandlerService = opdHandlerService;
	}


	public OPDHandlerService getOpdHandlerService() {
		return opdHandlerService;
	}

	public void setCommonMasterHandlerService(
			CommonMasterHandlerService commonMasterHandlerService) {
		this.commonMasterHandlerService = commonMasterHandlerService;
	}

	public ModelAndView showPrintStockPositionIemWise(HttpServletRequest request , HttpServletResponse response ){
		Map<String, Object > map = new HashMap<String , Object >();
		jsp="stock_position_item_wise.jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView generateStockPositionReport(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> datamap = new HashMap<String, Object>();
		String pvmsNo = "";
		String brand = "";
		int itemId = 0;
		int hospitalId = 0;
		String hospitalName = "";
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			hospitalName = storesHandlerService.getHospitalName(hospitalId);
			requestParameters.put("HOSP_NAME", hospitalName);
		}
		map = storesHandlerService.getConnectionForReport();
		pvmsNo = box.getString("pvmsNo");

		if (request.getParameter("pvmsNo") != null) {
			pvmsNo = request.getParameter("pvmsNo");
		}
		pvmsNo = box.getString("pvmsNo");

		datamap = storesHandlerService.getMasItemId(box);
		itemId = (Integer) datamap.get("itemId");

		map.put("item_id", itemId);


		HMSUtil.generateReport("stock_position_item_wise", map, (Connection) map.get("con"),
				response, getServletContext());
		return null;
	}
	public ModelAndView showItemAdjustmentReportJsp(HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		title = "Report For Item Adjustment";
		jsp =  "itemAdjustedReportJsp.jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}
	public ModelAndView generateItemAdjustmentReport(HttpServletRequest request, HttpServletResponse response){
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Date fromDate = null;
		Date toDate = null;
		HttpSession session = request.getSession();
		requestParameters.put("department_id", session.getAttribute("deptId"));
		if (request.getParameter(FROM_DATE) != null
				&& !(request.getParameter(FROM_DATE).equals(""))) {
			fromDate = HMSUtil.convertStringTypeDateToDateType(request
					.getParameter(FROM_DATE));
			requestParameters.put("from_date", fromDate);
		}
		if (request.getParameter(TO_DATE) != null
				&& !(request.getParameter(TO_DATE).equals(""))) {
			toDate = HMSUtil.convertStringTypeDateToDateType(request
					.getParameter(TO_DATE));
			requestParameters.put("to_date", toDate);
		}
		Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
		HMSUtil.generateReport("item_adjustment_report",requestParameters, (Connection) connectionMap.get("con"),response, getServletContext());
		return null ;
	}
//------For Stock taking---

	public void onclickTotalItemWise(HttpServletRequest request, HttpServletResponse response){
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		List<BigDecimal[]> objectList = new ArrayList<BigDecimal[]>();
		int deptId=0;
		String pvmsNo = "";
		HttpSession session = request.getSession();
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		if (request.getParameter("pvms") != null	&& !(request.getParameter("pvms").equals(""))) {
			pvmsNo = request.getParameter("pvms");
		}
		box.put("deptId", deptId);
		box.put("pvmsNo", pvmsNo);

		map = storesHandlerService.getitem(box);
		map.put("box", box);

		if (map.get("objectList") != null) {
			objectList = (List<BigDecimal[]>) map.get("objectList");
		}

		StringBuffer sb = new StringBuffer();
		if(objectList != null ){
			Iterator it = objectList.iterator();
			while(it.hasNext()){

				BigDecimal object = (BigDecimal)it.next();
				sb.append("<item>");
				sb.append("<cmpStock>"+object.doubleValue()+"</cmpStock>");
				sb.append("</item>");

			}
		}

			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");

			try {
				response.getWriter().write("<?xml version='1.0' encoding='ISO-8859-1'?>");
				response.getWriter().write("<items>");
				response.getWriter().write(sb.toString());
				response.getWriter().write("</items>");
			} catch (Exception e) {
				e.printStackTrace();
			}
	}
	public ModelAndView showSearchDepartmentIndent(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		int hospitalId = 0;
		HttpSession session = request.getSession();
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// add hospitalId by javed khan

		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));

			//map = storesHandlerService.showSearchDepartmentIndent(deptId);
		map = storesHandlerService.showSearchDepartmentIndent(deptId, hospitalId);

		String jsp = "searchDepartmentIndent.jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB","map",map);
	}
	public ModelAndView showDemandIssueReportJsp(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session =request.getSession();
		int deptId = 0;
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		map = storesHandlerService.showDemandIssueReportJsp(deptId);
		String jsp = "demandIssueReport.jsp";
		String message="";
		map.put("contentJsp", jsp);
		map.put("message", message);
		return new ModelAndView("indexB","map",map);
	}
	public ModelAndView printDemandIssueReport(HttpServletRequest request,
			HttpServletResponse response){

		int deptId = 0;
		Map map = new HashMap();
		Map dataMap = new HashMap();
		Map parameterMap = new HashMap();
		String demandNo = "";
		HttpSession session =request.getSession();

		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (request.getParameter(DEMAND_NO) != null) {
			demandNo = request.getParameter(DEMAND_NO);
		}
		dataMap.put("demandno", demandNo);
		dataMap.put("deptId", deptId);
		boolean flag = storesHandlerService.checkDemandIssue(dataMap);
		if(flag){
		parameterMap = storesHandlerService.getConnectionForReport();

		HMSUtil.generateReport("demandIssueReport", dataMap,(Connection) parameterMap.get("con"), response,
				getServletContext());
		return null;
		}else{
			map = storesHandlerService.showDemandIssueReportJsp(deptId);
			String jsp = "demandIssueReport.jsp";
			String message="No Issues Against The Respective Demand";
			map.put("contentJsp", jsp);
			map.put("message", message);
			return new ModelAndView("indexB","map",map);

		}
	}
	public ModelAndView showSearchItemForMMF(HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session =request.getSession();
		int deptId = 0;
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		String jsp = "mmfDepartmentApprovalItemPopup";
		return new ModelAndView(jsp,"map",map);
	}

	public ModelAndView searchItemForMMFApproval(HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session =request.getSession();
		int deptId = 0;
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		Box box = HMSUtil.getBox(request);
		map = storesHandlerService.searchItemForMMFApproval(box);
		map.put("nomenclature", box.getString("nomenclature"));
		map.put("commonName", box.getString(COMMON_NAME));
		map.put("pvms", box.getString("pvms"));
		String jsp = "mmfDepartmentApprovalItemPopup";
		return new ModelAndView(jsp,"map",map);
	}
	public ModelAndView showLoanInItemsReportJsp(HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.getVendorList();

		String jsp = "loanInItemsReport.jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB","map",map);
	}
	public void printLoanInItemsReports(HttpServletRequest request, HttpServletResponse response) {
		Map map = new HashMap();
		Map dataMap = new HashMap();
		Map parameterMap = new HashMap();
		int vendorId = 0;
		Date fromDate = new Date();
		Date toDate = new Date();
		HttpSession session =request.getSession();
		Box box = HMSUtil.getBox(request);
		if(!(box.getString(FROM_DATE).equals(""))) {
			fromDate = HMSUtil.convertStringTypeDateToDateType(box.getString(FROM_DATE));
		}
		if (!(box.getString(TO_DATE).equals(""))) {
			toDate = HMSUtil.convertStringTypeDateToDateType(box.getString(TO_DATE));
		}
		String qryStr = "";
		if (box.getInt(VENDOR_ID) != 0) {
			vendorId = box.getInt(VENDOR_ID);
			qryStr = " and loaninm.supplier_id = "+vendorId;
		}
		dataMap.put("fromDate", fromDate);
		dataMap.put("toDate", toDate);
		dataMap.put("qryStr", qryStr);
		parameterMap = storesHandlerService.getConnectionForReport();

		HMSUtil.generateReport("loaninItems", dataMap,(Connection) parameterMap.get("con"), response,
				getServletContext());
	}
	public void getSOListForLoanIn(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box= HMSUtil.getBox(request);
		int supplierId = box.getInt("supplierId");
		int loanInId = box.getInt("loanInId");

		map = storesHandlerService.getLoanInTListForModify(loanInId);
		List<StoreLoaninT> storeLoanInTList = new ArrayList<StoreLoaninT>();
		if(map.get("storeLoanInTList") != null){
			storeLoanInTList = (List<StoreLoaninT>)map.get("storeLoanInTList") ;
		}
		StringBuffer sb = new StringBuffer();
		List<Object[]> objectList = new ArrayList<Object[]>();
		int deptId = 0;
		if(storeLoanInTList.size() > 0){
			Integer[] itemIdArr = new Integer[storeLoanInTList.size()];
			String[] qtyArr = new String[storeLoanInTList.size()];
			int i=0;
			for (StoreLoaninT storeLoaninT : storeLoanInTList) {
				int itemId = storeLoaninT.getItem().getId();
				itemIdArr[i]= itemId;
				qtyArr[i] = storeLoaninT.getReceivedQty().toString();
				deptId = storeLoaninT.getLoaninMaster().getDepartment().getId();
				i++;
			}
			dataMap.put("supplierId", supplierId);
			dataMap.put("itemIdArr", itemIdArr);
			dataMap.put("deptId", deptId);
			dataMap.put("qtyArr", qtyArr);


			map = storesHandlerService.getSOListForLoanIn(dataMap);

			if(map.get("objectList")!= null){
				objectList = (List<Object[]>)map.get("objectList");
			}
		}
		try {
			if(objectList.size() > 0){
				for (Object[] storePo : objectList) {
					sb.append("<item>");
					sb.append("<poId>" + storePo[1] + "</poId>");
					sb.append("<poNumber>" + storePo[0]+ "</poNumber>");
					sb.append("</item>");
				}
			}

			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
//----------Stores Reports By Dipali
	//--------Item Catalogue Master-----
	public ModelAndView showItemCatalogueJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.showItemCatalogueJsp();
		jsp = PVMS_NIV_MASTER_REPORT + ".jsp";
		title = "Item Catalogue";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	
	
	
	
	public ModelAndView showItemCatalogue(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		JRDataSource ds = null;
		List itemList = null;
		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		HttpSession session = request.getSession();

		int section = 0;
		int subSection = 0;
		int sectionList = 0;
		int subSectionList = 0;
		int selectedRadio = 0;
		int hospitalId = 0;
		String hospitalName = "";
		requestParameters.put("DEPART", session.getAttribute("deptId"));
		try {

			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
				hospitalName = storesHandlerService.getHospitalName(hospitalId);
				requestParameters.put("HOSP_NAME", hospitalName);
			}
			if (request.getParameter(SECTION_ID) != null && !(request.getParameter(SECTION_ID).equals(""))) {
				section = Integer.parseInt(request.getParameter(SECTION_ID));
			}
			if (request.getParameter(SECTION_ID_DEPENDENT_INDENT) != null &&
						!(request.getParameter(SECTION_ID_DEPENDENT_INDENT).equals(""))) {
				subSection = Integer.parseInt(request.getParameter(SECTION_ID_DEPENDENT_INDENT));
			}
			if (request.getParameter(SECTION_LIST) != null && !(request.getParameter(SECTION_LIST).equals(""))) {
				sectionList = Integer.parseInt(request.getParameter(SECTION_LIST));
			}
			if (request.getParameter(SUB_SECTION_LIST) != null	&& !(request.getParameter(SUB_SECTION_LIST).equals(""))) {
				subSectionList = Integer.parseInt(request.getParameter(SUB_SECTION_LIST));
			}
			if (request.getParameter(SELECTED_RADIO) != null && !(request.getParameter(SELECTED_RADIO).equals(""))) {
				selectedRadio = Integer.parseInt(request.getParameter(SELECTED_RADIO));
			}


			if ((sectionList == 0 || section == 0)&& (subSectionList == 0 || subSection == 0) && (selectedRadio != 0)) {
				if (selectedRadio == 1) {
					requestParameters.put("ITEM_TYPE", selectedRadio);
					requestParameters.put("hospital_Id", 0);
				} else if (selectedRadio == 2) {
					requestParameters.put("ITEM_TYPE", selectedRadio);
					requestParameters.put("hospital_Id", hospitalId);
				}
				HMSUtil.generateReport("Item_Catalogue_All", requestParameters,
						(Connection) connectionMap.get("con"), response,
						getServletContext());

			} else if ((sectionList != 0 || section != 0)
					&& (subSectionList == 0 || subSection == 0)) {
				requestParameters.put("SECTION", sectionList);
				if (selectedRadio == 1) {
					requestParameters.put("ITEM_TYPE", selectedRadio);
					requestParameters.put("hospital_Id", 0);
					
				} else if (selectedRadio == 2) {
					requestParameters.put("ITEM_TYPE", selectedRadio);
					requestParameters.put("hospital_Id", hospitalId);
				}
				HMSUtil.generateReport("Item_Catalogue_Section",
						requestParameters, (Connection) connectionMap.get("con"), response, getServletContext());

			} else if ((sectionList == 0 || section == 0) && (subSectionList != 0 || subSection != 0)) {

				requestParameters.put("ITEM_CATEGORY", subSectionList);
				if (selectedRadio == 1) {
					requestParameters.put("ITEM_TYPE", selectedRadio);
					requestParameters.put("hospital_Id", 0);
					
				} else if (selectedRadio == 2) {
					requestParameters.put("ITEM_TYPE", selectedRadio);
					requestParameters.put("hospital_Id", hospitalId);
				}
				HMSUtil.generateReport("Item_Catalogue_subSection",requestParameters, (Connection) connectionMap
								.get("con"), response, getServletContext());

			} else {

				requestParameters.put("SECTION", sectionList);
				requestParameters.put("ITEM_CATEGORY", subSectionList);

				if (selectedRadio == 1) {
					requestParameters.put("ITEM_TYPE", selectedRadio);
					requestParameters.put("hospital_Id", 0);
				} else if (selectedRadio == 2) {
					requestParameters.put("ITEM_TYPE", selectedRadio);
					requestParameters.put("hospital_Id", hospitalId);
				}
				HMSUtil.generateReport("Item_Catalogue", requestParameters,
						(Connection) connectionMap.get("con"), response,
						getServletContext());

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	//-----	Drugs list body system wise Report
	public ModelAndView showDrugListBodySystemWiseReportJsp(HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.showDrugListBodySystemWiseReportJsp();
		title = "Drug List Body System Wise Report";
		jsp = DRUG_LIST_BODY_SYSTEM_WISE_REPORT_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}
	public ModelAndView generateDrugListBodySystemWiseReport(HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		int hospitalId = 0;
		String hospitalName = "";
		int sectionId = 0;
		Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
		HttpSession session = request.getSession();
		requestParameters.put("DEPART", session.getAttribute("deptId"));
		try {
			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
				hospitalName = storesHandlerService.getHospitalName(hospitalId);
				requestParameters.put("HOSP_NAME", hospitalName);
			}
			if ((request.getParameter(SECTION_ID)) != null && !(request.getParameter(SECTION_ID).equals(""))) {
				sectionId = Integer.parseInt(request.getParameter(SECTION_ID));
			}
			if (sectionId != 0) {
				requestParameters.put("PharmaIndex", sectionId);
				HMSUtil.generateReport("DrugListBodySystemWise",requestParameters, (Connection) connectionMap
								.get("con"), response, getServletContext());
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;
	}
	//----Vendor List Report--
 //--Internal
 public ModelAndView showInternalIssueReportJsp(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.showInternalIssueReportJsp();
		title = "Internal Issue Report";
		jsp = INTERNAL_ISSUE_REPORT_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}
 public ModelAndView generateInternalIssueReport(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Date fromDate = null;
		Date toDate = null;
		int hospitalId = 0;
		int departmentId=0;
		String hospitalName = "";

		HttpSession session = request.getSession();
		requestParameters.put("DEPART", session.getAttribute("deptId"));
		try {
			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				requestParameters.put("FROM_DATE", fromDate);
			}
			if (request.getParameter(TO_DATE) != null && !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				requestParameters.put("TO_DATE", toDate);
			}
			if (request.getParameter(DEPARTMENT_ID) != null && !(request.getParameter(DEPARTMENT_ID).equals(""))) {
				departmentId = Integer.parseInt(request.getParameter(DEPARTMENT_ID));
				requestParameters.put("DEPART", departmentId);
			}
			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
				hospitalName = storesHandlerService.getHospitalName(hospitalId);
				requestParameters.put("HOSP_NAME", hospitalName);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		HMSUtil.generateReport(INTERNAL_ISSUE_REPORT, requestParameters,
				(Connection) connectionMap.get("con"), response,
				getServletContext());
		return new ModelAndView("indexB", "map", map);
	}
//---End of Stores Reports By Dipali

// --- Dinesh
public ModelAndView submitDispensaryForLp(HttpServletRequest request,HttpServletResponse response)
{
	String userName = "";
	int deptId = 0;
	int hospitalId = 0;
	String deptName = "";
	HttpSession session = request.getSession();
	if (session.getAttribute("userName") != null)
		userName = (String) session.getAttribute("userName");
	if (session.getAttribute("hospitalId") != null)
		hospitalId = Integer.parseInt(""
				+ session.getAttribute("hospitalId"));
	if (session.getAttribute("deptId") != null)
		deptId = Integer.parseInt("" + session.getAttribute("deptId"));

	if (session.getAttribute("deptName") != null)
		deptName = (String) session.getAttribute("deptName");
	Date currentDate = new Date();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> mapForDs = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		dataMap.put("deptId", session.getAttribute("deptId"));
		Box box= HMSUtil.getBox(request);
		if(session.getAttribute("deptId")!=null)
		box.put("deptId", (Integer)session.getAttribute("deptId"));
		if(session.getAttribute("hospitalId")!=null)
			box.put("hospitalId", (Integer)session.getAttribute("hospitalId"));
		boolean status=storesHandlerService.submitDispensaryForLp(box);
		map = storesHandlerService.showOPDPatientIssue(dataMap);
		mapForDs.put("deptId", deptId);
		mapForDs.put("currentDate", currentDate);
		mapForDs.put("hospitalId", hospitalId);
		detailsMap = opdHandlerService.getPrescriptionList(mapForDs);
		detailsMap=opdHandlerService.getPrescriptionDetails(mapForDs);
		String message="";
		if(status==true)
		{
			message="Successfully send for LP ";
		}else
		{
			message=" Can't be send Successfully FOR LP";
		}
		jsp = PENDING_PATIENT_PRESCRIPTION + ".jsp";
		title = "Sent for LP";
		map.put("detailsMap", detailsMap);
		map.put("deptId", deptId);
		map.put("hospitalId", hospitalId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message",message);
		return new ModelAndView("indexB", "map", map);
	}
   // Dinesh
public ModelAndView showDispensaryStockStatusReport(HttpServletRequest request,
		HttpServletResponse response)
  {
	Map<String, Object> map = new HashMap<String, Object>();
	// map = storesHandlerService.showBINCardJsp();
	title = "Stock Status Report";
	jsp = "stockStatusJsp";
	jsp = jsp + ".jsp";
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("indexB", "map", map);
}
   public ModelAndView getPrescriptionForPatientIssue(HttpServletRequest request,
		HttpServletResponse response)
   {
	   Map<String, Object> map = new HashMap<String, Object>();
	   Map<String, Object> detailsMap = new HashMap<String, Object>();
	   int deptId=0;
	   if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}

	   detailsMap.put("deptId", deptId);

	int prescriptionNo =0;
	// int hinId=0;
	if (request.getParameter(PRESCRIPTION_NO) != null
			&& !(request.getParameter(PRESCRIPTION_NO).equals(""))) {
		prescriptionNo =Integer.parseInt(request.getParameter(PRESCRIPTION_NO));
		//detailsMap.put("prescriptionNo", prescriptionNo);
	}
	detailsMap.put("prescriptionNo", prescriptionNo);

	map = storesHandlerService.getPrescriptionForPatientIssueList(detailsMap);
	map.put("deptId", deptId);
	jsp = POPULATE_PRESCRIPTION_FOR_PATIENT;
	return new ModelAndView(jsp, "map", map);

}
   public ModelAndView showDailyIssue(HttpServletRequest request,
			HttpServletResponse response){

			Map<String, Object> map = new HashMap<String, Object>();
			Map<String, Object> detailsMap = new HashMap<String, Object>();
	        String jsp = "dailyIssueReport";
	        map = storesHandlerService.getDepartmentList();
	        jsp += ".jsp";
	        title = "issueReport";
	        map.put("contentJsp", jsp);
	        map.put("title", title);
	        return new ModelAndView("index", "map", map);

	}



   public ModelAndView generateActualStockExcel(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int deptId = 0;
		String hospitalName = "";
		String deptName = "";
        String query="";
        HttpSession session = request.getSession();
		try {

			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
				requestParameters.put("hospitalId", hospitalId);
				hospitalName = storesHandlerService.getHospitalName(hospitalId);
				requestParameters.put("hospitalName", hospitalName);
				requestParameters.put("hospitalId", hospitalId);
			}

			if (session.getAttribute("deptId") != null) {
				deptId = (Integer) session.getAttribute("deptId");
				requestParameters.put("deptId", deptId);
			}

			if (session.getAttribute("deptName") != null) {
				deptName = session.getAttribute("deptName").toString();
				requestParameters.put("deptName", deptName);
			}
			if (request.getParameter("pvmsNiv") != null &&(!request.getParameter("pvmsNiv").equals("")))
			{
				/*query = query + "AND mas_store_item.pvms_no = '"
								+ request.getParameter("pvmsNiv").toUpperCase() + "' ";*/
				query = query + "AND mas_store_item.pvms_no =:pvms";
				requestParameters.put("pvms", request.getParameter("pvmsNiv").toUpperCase());
			}
			requestParameters.put("query", query);
		} catch (Exception e) {
			e.printStackTrace();
		}
		HSSFWorkbook wb = new HSSFWorkbook();
		

		try {
			if (box.getString("reportType").equals("summary")) {
				map = storesHandlerService.generateActualStockExcel(requestParameters);
				} else if (box.getString("reportType").equals("detail")) 
				{
				map = storesHandlerService.generateActualStockDetailsExcel(requestParameters);
				}
			if(map.get("wb") != null){
			wb = (HSSFWorkbook) map.get("wb");
			String file = "StockStatusExcel.xls";
			response.setContentType("application/vnd.ms-excel");
			response.setHeader("Content-disposition", "attachment; filename="+ file);
			wb.write(response.getOutputStream());
			}
		} catch (IOException ioe) {
			ioe.printStackTrace();

		}
		return null;
	}


   public ModelAndView generateActualStockSactionExcel(HttpServletRequest request,HttpServletResponse response)
   {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		int hospitalId = 0;
		int deptId = 0;
		Box box = HMSUtil.getBox(request);
		String hospitalName = "";
		String deptName = "";
		String query = "";
		HttpSession session = request.getSession();
		
		try {

			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
				hospitalName = storesHandlerService.getHospitalName(hospitalId);
				requestParameters.put("hospitalName", hospitalName);
			}

			if (session.getAttribute("deptId") != null) {
				deptId = (Integer) session.getAttribute("deptId");
				requestParameters.put("deptId", deptId);
			}

			if (session.getAttribute("deptName") != null) {
				deptName = session.getAttribute("deptName").toString();
				requestParameters.put("deptName", deptName);
			}
			// added by javed khan
			
			if ((request.getParameter("sectionId") != null && !request.getParameter("sectionId").equals(""))) {
				/*query =query +  "AND mas_store_section.section_id = '"
						+ request.getParameter("sectionId") + "' ";*/
				query =query + "AND mas_store_item.section_id = :section";
				requestParameters.put("section", request.getParameter("sectionId"));
			}

			if (request.getParameter("sectionId") != null &&(request.getParameter("pvmsNiv") != null && (!request.getParameter("pvmsNiv").equals("")))) {
				/*query = query + "AND mas_store_item.pvms_no = '"
						+ request.getParameter("pvmsNiv").toUpperCase() + "' ";*/
				query = query + " AND mas_store_item.pvms_no = :pvms";
				requestParameters.put("pvms", request.getParameter("pvmsNiv"));
			}
			if ((request.getParameter("sectionId").equals(""))
				&&(request.getParameter("pvmsNiv") != null && (!request.getParameter("pvmsNiv").equals(""))))
			{
				/*query =query +"and mas_store_item.pvms_no = '"
										+ request.getParameter("pvmsNiv") + "' ";*/
				query =query +" and mas_store_item.pvms_no = :pvms1";
				requestParameters.put("pvms", request.getParameter("pvmsNiv"));
			}
			requestParameters.put("query", query);
		}catch (Exception e)
		{
			e.printStackTrace();
		}

		HSSFWorkbook wb = new HSSFWorkbook();
		

		try {

			if (box.getString("reportType").equals("summary")) {
				map = storesHandlerService.generateActualStockSactionExcel(requestParameters);
			} else if (box.getString("reportType").equals("detail")) {
				map = storesHandlerService.generateActualStockSactionDetailsExcel(requestParameters);
			}

			if(map.get("wb") != null){
			wb = (HSSFWorkbook) map.get("wb");
			String file = "StockStatusExcel.xls";
			response.setContentType("application/vnd.ms-excel");
			response.setHeader("Content-disposition", "attachment; filename="
					+ file);
			wb.write(response.getOutputStream());
			}
		} catch (IOException ioe) {
			ioe.printStackTrace();

		}
		return null;
	}

    @SuppressWarnings("unchecked")
	public ModelAndView searchDailyIssueSummery(HttpServletRequest request,
			HttpServletResponse response)
    {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> mapForDs = new HashMap<String, Object>();
		List<StoreOpPatientIssueT> storeOpPatientIssueT=new ArrayList<StoreOpPatientIssueT>();
		Date fromDate = new Date();
		Date toDate = new Date();
		String pvmsNo = null;
		int hospitalId = 0;

		int deptId = 0;
		session = request.getSession();
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
		{
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		}
		Map<String, Object> dataMap = new HashMap<String, Object>();
		mapForDs.put("deptId", deptId);
		mapForDs.put("hospitalId", hospitalId);

		try {
			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.dateFormatterDDMMYYYY(request
						.getParameter(FROM_DATE));
				mapForDs.put("fromDate", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.dateFormatterDDMMYYYY(request
						.getParameter(TO_DATE));
				mapForDs.put("toDate", toDate);
			}
			if (request.getParameter("pvms") != null
					&& !(request.getParameter("pvms").equals(""))) {
				pvmsNo = (String)request.getParameter("pvms");

			}
			mapForDs.put("pvmsNo", pvmsNo);

		} catch (Exception e) {
			e.printStackTrace();
		}

		storeOpPatientIssueT = storesHandlerService.getDailyIssueSummery(mapForDs);

		jsp = "dailyIssueReport.jsp";
		map.put("storeOpPatientIssueTList", storeOpPatientIssueT);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}



    public ModelAndView showNextOPDPatientIssue(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> patientMap = new HashMap<String, Object>();
		List<PatientPrescriptionHeader> prescriptionList = new ArrayList<PatientPrescriptionHeader>();
		int hinId = 0;
		HttpSession session = request.getSession();
		String buttonFlag = "";
		String issueNo = "";
		String hinNo = "";
		dataMap.put("deptId", session.getAttribute("deptId"));
		// map=storesHandlerService.showOPDPatientIssue();

		map = storesHandlerService.showOPDPatientIssue(dataMap);
		int prescriptionId = 0;
		if(request.getParameter(PRESCRIPTION_NO) != null){
			prescriptionId = Integer.parseInt(request.getParameter(PRESCRIPTION_NO));
			patientMap = storesHandlerService.getPatientDetailsForNextPrescription(prescriptionId);
			if(patientMap.get("prescriptionList")!=null)
			{
				prescriptionList=(List<PatientPrescriptionHeader>)patientMap.get("prescriptionList");
				if(prescriptionList.size()>0)
				{
					prescriptionId=prescriptionList.get(0).getId();
					map.put("prescriptionId", prescriptionId);
				}
			}

			map.put("patientMap", patientMap);
		}
		if (request.getParameter("buttonFlag") != null) {
			buttonFlag = request.getParameter("buttonFlag");
			int pageNo = Integer.parseInt(request.getParameter("pageNo"));

			if (buttonFlag.equals("next")) {
				hinId = Integer.parseInt(request.getParameter("hinId"));
				hinNo = request.getParameter("hinNo");
				issueNo = request.getParameter("issueNo");
				String prescription = request
						.getParameter(RequestConstants.PRESCRIPTION_NO);
				int consultantId = Integer.parseInt(request
						.getParameter(RequestConstants.CONSULTING_DOCTOR));
				pageNo++;
				map.put("pageNo", pageNo);
				map.put("hinId", hinId);
				map.put("buttonFlag", buttonFlag);
				map.put("issueNo", issueNo);
				map.put("hinNo", hinNo);
				map.put("prescription", prescription);
				map.put("consultantId", consultantId);
			}
		}
		jsp = OPD_PATIENT_ISSUE_JSP;
		jsp += ".jsp";
		title = "Ward Consumption";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

    public void fillItemsInGridForDepartmentIndent(HttpServletRequest request,
			HttpServletResponse response)
    {

		Box box = HMSUtil.getBox(request);

		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		int itemId = 0;

		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");

		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));

		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		// String itemNameField = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		try {

			if (request.getParameter("itemId") != null) {
				itemId = Integer.parseInt(request.getParameter("itemId"));

			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		dataMap.put("itemId", itemId);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.fillItemsInGridForDepartmentIndent(dataMap);

        BigDecimal itemBatchStock = new BigDecimal(0);

		if (map.get("itemList") != null)
		{
			itemList = (List<MasStoreItem>) map.get("itemList");

		}
		itemBatchStock = (BigDecimal) map.get("stock");

		StringBuffer sb = new StringBuffer();
		try {

			for (MasStoreItem masStoreItem : itemList)
			{
				sb.append("<item>");
				sb.append("<id>" + masStoreItem.getId() + "</id>");
				sb.append("<pvms>" + masStoreItem.getPvmsNo() + "</pvms>");
				try {
					sb.append("<au>"
							+ masStoreItem.getItemConversion().getPurchaseUnit()
									.getUnitName() + "</au>");
				} catch (Exception e) {
					sb.append("<au>" + "-" + "</au>");
				}
				sb.append("<name>" + masStoreItem.getNomenclature() + "</name>");

				sb.append("<stock>" + itemBatchStock + "</stock>");
			}
			sb.append("</item>");

		} catch (Exception e) {
			e.printStackTrace();
		}
		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}

		// return new ModelAndView(jsp, "map", map);
	}
    public ModelAndView doAddInternalIndentItems(HttpServletRequest request,
			HttpServletResponse response) {

        HttpSession session = request.getSession();

        Map<String, Object> map = new HashMap<String, Object>();
        synchronized (this) {


            int deptId = Integer.valueOf(session.getAttribute("deptId").toString());
            int hospitalId = Integer.valueOf(session.getAttribute("hospitalId").toString()); // javed khan
            Box box = HMSUtil.getBox(request);
            box.put("deptId", deptId);
            box.put("hospitalId", hospitalId);
            int storeDepartmentId = 0;
            if (request.getParameter("storeDepartmentId") != null
                    && !request.getParameter("storeDepartmentId").equals("")) {
                storeDepartmentId = Integer.parseInt(request
                        .getParameter("storeDepartmentId"));
            }
            map = storesHandlerService.doAddInternalIndentItems(box);
            map.putAll(storesHandlerService.showAddDepartmentIndentJsp(box));
            jsp = DEPARTMENT_INDENT_ADDITION_JSP;
            map.put("hiddenFieldForRecords", box.get("hiddenFieldForRecords"));
            title = "Add Department Indent";
            map.put("storeDepartmentId", storeDepartmentId);
            map.put("contentJsp", jsp);
            map.put("title", title);
        }
        // map.put("internalIndentId", box.get("internalIndentId"));
        return new ModelAndView(jsp, "map", map);
        
    }
    
    public ModelAndView deleteGridItemsForDepartmentIndent(
			HttpServletRequest request, HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		map = storesHandlerService.deleteGridItemsForDepartmentIndent(box);
		jsp = STORE_DEPARTMENT_INDENT_JSP;
		jsp += ".jsp";
		title = "Delete Department Indent";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

    public synchronized void getDataForBarcode(HttpServletRequest request,HttpServletResponse response)
    {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String barCodeNo=request.getParameter("barCode");
		int item_Id=0;

		if(request.getParameter("itemId")!=null){
		item_Id=Integer.parseInt(request.getParameter("itemId"));
		}

		String itemNameField ="";
		Map<String, Object> map = new HashMap<String, Object>();
		String lotNo = "";
		List<StoreItemBatchStock> objectList = new ArrayList<StoreItemBatchStock>();

		box.put("deptId", deptId);
		box.put("userName", userName);
		box.put("hospitalId", hospitalId);
		box.put("barCodeNo", barCodeNo);
		box.put("itemId", item_Id);


		map = storesHandlerService.getDataForBarcode(box);
		if (map.get("storeItemBatchStockList") != null) {
			objectList = (List<StoreItemBatchStock>) map
					.get("storeItemBatchStockList");
		}

		StringBuffer sb = new StringBuffer();
		try {
			if (objectList != null && objectList.size() > 0) {
				if (objectList.get(0) != null) {
					StoreItemBatchStock stock = (StoreItemBatchStock) objectList
							.get(0);
					String pvmsNo = stock.getItem().getPvmsNo();

					String nomenclature = stock.getItem().getNomenclature();

					int itemId = stock.getItem().getId();
					int brandId=1;
					if(stock.getBrand()!=null){

                   try {
					brandId=stock.getBrand().getId();
				} catch (Exception e) {
					brandId=5008;
					e.printStackTrace();
				}
					}
                    BigDecimal costPrice=stock.getCostPrice();
					sb.append("<item>");

					sb.append("<pvms>" + pvmsNo + "</pvms>");
					sb.append("<nomenclature>" + nomenclature
							+ "</nomenclature>");
					sb.append("<itemId>" + itemId + "</itemId>");
					sb.append("<brandId>" + brandId + "</brandId>");
					try {
						sb.append("<costPrice>" + costPrice.toString() + "</costPrice>");
					} catch (Exception e1) {

						sb.append("<costPrice></costPrice>");
					}

					try {
						sb.append("<batchNo>" + stock.getBatchNo()
								+ "</batchNo>");
					} catch (Exception e) {
						sb.append("<batchNo></batchNo>");
					}
					try {
						sb.append("<expiryDate>"
								+ HMSUtil.convertDateToStringWithoutTime(stock
										.getExpiryDate()) + "</expiryDate>");
					} catch (Exception e) {
						sb.append("<expiryDate></expiryDate>");
					}
					try {
						sb.append("<availableStock>" + stock.getClosingStock()
								+ "</availableStock>");
					} catch (Exception e) {
						sb.append("<availableStock>0</availableStock>");
					}
					try {
						sb.append("<barCodeNo>" + stock.getBarcodeNo()
								+ "</barCodeNo>");
					} catch (Exception e) {
						sb.append("<barCodeNo></barCodeNo>");
					}
					try {
						sb
								.append("<au>"
										+ stock.getItem().getItemConversion()
												.getIssueUnit().getUnitName()
										+ "</au>");
					} catch (Exception e) {
						sb.append("<au></au>");
					}

					try {
						sb
								.append("<batchId>"
										+ stock.getId()
										+ "</batchId>");
					} catch (Exception e) {
						sb.append("<batchId></batchId>");
					}
					try {
						sb.append("<dom>"
								+ HMSUtil.convertDateToStringWithoutTime(stock
										.getManufactureDate()) + "</dom>");
					} catch (Exception e) {
						sb.append("<dom></dom>");
					}
					try {
						sb.append("<source>"
								+ map.get("source").toString() + "</source>");
					} catch (Exception e) {
						sb.append("<source>op</source>");
					}
					// add javed khan for mmf
					try {

						sb.append("<mmf>"
								+ map.get("mmf").toString() + "</mmf>");
					} catch (Exception e) {
						sb.append("<mmf>0</mmf>");
					}
					// add javed khan for BG comes from store_item_batch_stock
					try {
						if(stock.getBrandGeneric() != null){
						sb.append("<BG>"
								+ stock.getBrandGeneric() + "</BG>");
						}else{
							sb.append("<BG>G</BG>");
						}
					} catch (Exception e) {
						sb.append("<BG>G</BG>");
					}
					sb.append("</item>");

				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}
		// return new ModelAndView(jsp, "map", map);
	}
    
    public synchronized void getDataForBarcodeDispensary(HttpServletRequest request,HttpServletResponse response)
    {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String barCodeNo=request.getParameter("barCode");
		int item_Id=0;

		if(request.getParameter("itemId")!=null){
		item_Id=Integer.parseInt(request.getParameter("itemId"));
		}

		String itemNameField ="";
		Map<String, Object> map = new HashMap<String, Object>();
		String lotNo = "";
		List<StoreItemBatchStock> objectList = new ArrayList<StoreItemBatchStock>();

		box.put("deptId", deptId);
		box.put("userName", userName);
		box.put("hospitalId", hospitalId);
		box.put("barCodeNo", barCodeNo);
		box.put("itemId", item_Id);


		map = storesHandlerService.getDataForBarcodeDispensary(box);
		if (map.get("storeItemBatchStockList") != null) {
			objectList = (List<StoreItemBatchStock>) map
					.get("storeItemBatchStockList");
		}

		StringBuffer sb = new StringBuffer();
		try {
			if (objectList != null && objectList.size() > 0) {
				if (objectList.get(0) != null) {
					StoreItemBatchStock stock = (StoreItemBatchStock) objectList
							.get(0);
					String pvmsNo = stock.getItem().getPvmsNo();

					String nomenclature = stock.getItem().getNomenclature();

					int itemId = stock.getItem().getId();
					int brandId=1;
					if(stock.getBrand()!=null){

                   try {
					brandId=stock.getBrand().getId();
				} catch (Exception e) {
					brandId=5008;
					e.printStackTrace();
				}
					}
                    BigDecimal costPrice=stock.getCostPrice();
					sb.append("<item>");

					sb.append("<pvms>" + pvmsNo + "</pvms>");
					sb.append("<nomenclature>" + nomenclature
							+ "</nomenclature>");
					sb.append("<itemId>" + itemId + "</itemId>");
					sb.append("<brandId>" + brandId + "</brandId>");
					try {
						sb.append("<costPrice>" + costPrice.toString() + "</costPrice>");
					} catch (Exception e1) {

						sb.append("<costPrice></costPrice>");
					}

					try {
						sb.append("<batchNo>" + stock.getBatchNo()
								+ "</batchNo>");
					} catch (Exception e) {
						sb.append("<batchNo></batchNo>");
					}
					try {
						sb.append("<expiryDate>"
								+ HMSUtil.convertDateToStringWithoutTime(stock
										.getExpiryDate()) + "</expiryDate>");
					} catch (Exception e) {
						sb.append("<expiryDate></expiryDate>");
					}
					try {
						sb.append("<availableStock>" + stock.getClosingStock()
								+ "</availableStock>");
					} catch (Exception e) {
						sb.append("<availableStock>0</availableStock>");
					}
					try {
						sb.append("<barCodeNo>" + stock.getBarcodeNo()
								+ "</barCodeNo>");
					} catch (Exception e) {
						sb.append("<barCodeNo></barCodeNo>");
					}
					try {
						sb.append("<au>"
										+ stock.getItem().getItemConversion()
												.getIssueUnit().getUnitName()
										+ "</au>");
					} catch (Exception e) {
						sb.append("<au></au>");
					}

					try {
						sb.append("<batchId>"
										+ stock.getId()
										+ "</batchId>");
					} catch (Exception e) {
						sb.append("<batchId></batchId>");
					}
					try {
						sb.append("<dom>"
								+ HMSUtil.convertDateToStringWithoutTime(stock
										.getManufactureDate()) + "</dom>");
					} catch (Exception e) {
						sb.append("<dom></dom>");
					}
				/*	try {
						sb.append("<source>"
								+ map.get("source").toString() + "</source>");
					} catch (Exception e) {
						sb.append("<source>op</source>");
					}*/
					// add javed khan for mmf
				/*	try {

						sb.append("<mmf>"
								+ map.get("mmf").toString() + "</mmf>");
					} catch (Exception e) {
						sb.append("<mmf>0</mmf>");
					}*/
					// add javed khan for BG comes from store_item_batch_stock
					try {
						if(stock.getBrandGeneric() != null){
						sb.append("<BG>"
								+ stock.getBrandGeneric() + "</BG>");
						}else{
							sb.append("<BG>G</BG>");
						}
					} catch (Exception e) {
						sb.append("<BG>G</BG>");
					}
					sb.append("</item>");

				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}
		// return new ModelAndView(jsp, "map", map);
	}

  public ModelAndView showOPDPatientIssueWithoutBarCode(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> patientMap = new HashMap<String, Object>();
		int hinId = 0;
		HttpSession session = request.getSession();
		String buttonFlag = "";
		String issueNo = "";
		String hinNo = "";
		dataMap.put("deptId", session.getAttribute("deptId"));
		// map=storesHandlerService.showOPDPatientIssue();

		map = storesHandlerService.showOPDPatientIssue(dataMap);
		int prescriptionId = 0;
		if(request.getParameter("prescriptionId") != null){
			prescriptionId = Integer.parseInt(request.getParameter("prescriptionId"));
			patientMap = storesHandlerService.getPatientDetailsForPrescription(prescriptionId);
			map.put("prescriptionId", prescriptionId);
			map.put("patientMap", patientMap);
		}
		if (request.getParameter("buttonFlag") != null) {
			buttonFlag = request.getParameter("buttonFlag");
			int pageNo = Integer.parseInt(request.getParameter("pageNo"));

			if (buttonFlag.equals("next")) {
				hinId = Integer.parseInt(request.getParameter("hinId"));
				hinNo = request.getParameter("hinNo");
				issueNo = request.getParameter("issueNo");
				String prescription = request.getParameter(RequestConstants.PRESCRIPTION_NO);
				int consultantId = Integer.parseInt(request.getParameter(RequestConstants.CONSULTING_DOCTOR));
				pageNo++;
				map.put("pageNo", pageNo);
				map.put("hinId", hinId);
				map.put("buttonFlag", buttonFlag);
				map.put("issueNo", issueNo);
				map.put("hinNo", hinNo);
				map.put("prescription", prescription);
				map.put("consultantId", consultantId);
			}
		}
		jsp = OPD_PATIENT_ISSUE_JSP_BARCODE;
		jsp += ".jsp";
		title = "Ward Consumption";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}
    public ModelAndView showOPDPatientIssueGridWithoutBarCode(HttpServletRequest request,
			HttpServletResponse response) {
		/*
		 * Department id for dispensary store is hardcoded which in future will
		 * come from login
		 */
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		int deptId = (Integer) session.getAttribute("deptId");
		String buttonFlag = "";
		String issueNo = "";
		int hinId = 0;
		String hinNo = "";
		String prescription = "";
		int consultantId = 0;
		String date="";
		String time="";
		String serviceNo="";
		int pageNo = Integer.parseInt(request.getParameter("pageNo"));
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");
		if (request.getParameter(RequestConstants.HIN_ID) != null
				&& !request.getParameter(RequestConstants.HIN_ID).equals("")) {
			hinId = Integer.parseInt(request
					.getParameter(RequestConstants.HIN_ID));
		}
		if(request.getParameter("serviceNo")!=null){
			serviceNo=request.getParameter("serviceNo");

		}
		int prescriptionId = 0;
		if(request.getParameter("prescriptionId") != null){
			prescriptionId = Integer.parseInt(request.getParameter("prescriptionId"));
			map.put("prescriptionId", prescriptionId);
		}

		buttonFlag = request.getParameter("buttonFlag");
		if (!request.getParameter("buttonFlag").equals("")
				&& buttonFlag != null) {
			if (buttonFlag.equals("next")) {
				buttonFlag = request.getParameter("buttonFlag");
				issueNo = request.getParameter("issueNo");
				hinNo = request.getParameter(RequestConstants.HIN_NO);
				prescription = request.getParameter("prescription");
				consultantId = Integer.parseInt(request.getParameter("consultantId"));
				map.put("buttonFlag", buttonFlag);
				map.put("issueNo", issueNo);
				map.put("serviceNo",serviceNo);
				map.put("hinNo", hinNo);
				map.put("prescription", prescription);
				map.put("consultantId", consultantId);
			}
		}
		map.put("pageNo", pageNo);
		map.put("deptId", deptId);
		map.put("hinId", hinId);
		map.put("serviceNo",serviceNo);
		map = storesHandlerService.showOPDPatientIssueGrid(map);
		jsp = OPD_PATIENT_ISSUE_GRID_BARCODE;
		title = "Patient Issue";
		map.put("date", date);
		map.put("time", time);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}
    public ModelAndView submitOPDPatientStockDetailsWithBarCode(
			HttpServletRequest request, HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List issQtyList = new ArrayList();
		List amountList = new ArrayList();
		List pvmsList = new ArrayList();
		List batchNumberList = new ArrayList();
		List brandNameList = new ArrayList();
		List expiryDateList = new ArrayList();
		List costPriceList = new ArrayList();
		List storeItemBatchStockIdList = new ArrayList();
		List loanOutQtyList=new ArrayList();
		int deptId = Integer.parseInt(request.getParameter("deptId"));
		int itemId = Integer.parseInt(request.getParameter("itemId"));
		int hinId = Integer.parseInt(request.getParameter("hinId"));
		String serviceNo = request.getParameter("serviceNo");
		int empId = Integer.parseInt(request.getParameter("empId"));
		String prescriptionNo = request.getParameter("prescriptionNo");
		String buttonFlag = request.getParameter("buttonFlag");
		String date = request.getParameter("date");
		String time = request.getParameter("time");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		String userName = (String) session.getAttribute("userName");
		int storeFyDocumentNoId = Integer.parseInt(request
				.getParameter("storeFyDocumentNoId"));
		String opdIssueno = request.getParameter("opdIssueno");
		int counter = Integer.parseInt(request.getParameter("counter"));
		int patientPrescriptionDtId = 0;
		if(request.getParameter("patientPrescriptionDtId") != null && !(request.getParameter("patientPrescriptionDtId")).equals("")){
			patientPrescriptionDtId = Integer.parseInt(request.getParameter("patientPrescriptionDtId"));
		}
		int patientPrescriptionId = 0;
		if(request.getParameter("patientPrescriptionId") != null && !(request.getParameter("patientPrescriptionId")).equals("")){
			patientPrescriptionId = Integer.parseInt(request.getParameter("patientPrescriptionId"));
		}
		String issueType="";
		if(request.getParameter("issueType") != null && !(request.getParameter("issueType")).equals("")){
			issueType=request.getParameter("issueType");
		}


		for (int i = 0; i < counter; i++) {
			String str = request.getParameter("issueQty" + i);
			if (str.length() > 0) {
				// int qty=Integer.parseInt(request.getParameter("issueQty"+i));
				issQtyList.add(request.getParameter("issueQty" + i));
				// pvmsList.add(itemId);
				batchNumberList.add(request.getParameter("batchNo" + i));
				brandNameList.add(request.getParameter("brandId" + i));
				expiryDateList.add(request.getParameter("expiryDate" + i));
				costPriceList.add(request.getParameter("costprice" + i));
				storeItemBatchStockIdList.add(request
						.getParameter("storeItemBatchStockId" + i));
				amountList.add(request.getParameter("amount" + i));
				if(issueType.equalsIgnoreCase("loanOut")){
				 loanOutQtyList.add(request.getParameter("loanOutQty" + i));
				}
			}
		}
		map.put("deptId", deptId);
		map.put("hospitalId", hospitalId);
		map.put("date", date);
		map.put("time", time);
		map.put("buttonFlag", buttonFlag);
		map.put("userName", userName);
		map.put("issueType",issueType);
		map.put("loanOutQtyList", loanOutQtyList);
		// map.put("pvmsList", pvmsList);
		map.put("itemId", itemId);
		map.put("batchNumberList", batchNumberList);
		map.put("brandNameList", brandNameList);
		map.put("expiryDateList", expiryDateList);
		map.put("issQtyList", issQtyList);
		map.put("costPriceList", costPriceList);
		map.put("amountList", amountList);
		map.put("storeItemBatchStockIdList", storeItemBatchStockIdList);
		map.put("storeFyDocumentNoId", storeFyDocumentNoId);
		map.put("opdIssueno", opdIssueno);
		map.put("hinId", hinId);
		map.put("empId", empId);
		map.put("prescriptionNo", prescriptionNo);
		map.put("patientPrescriptionDtId", patientPrescriptionDtId);
		map.put("patientPrescriptionId", patientPrescriptionId);
		map.put("serviceNo", serviceNo);
		boolean successfullyAdded = storesHandlerService
				.submitOPDPatientStockDetailsWithBarCode(map);
		if (successfullyAdded) {
			// message = "Stock  has been Updated Successfully !!";
			message = "success";
		} else {
			message = "failure";
		}

		/*
		 * jsp = STOCK_UPDATED_MESSAGE_JSP;
		 *
		 * map.put("message", message); map.put("contentJsp", jsp);
		 * map.put("title", title); return new ModelAndView(jsp, "map", map);
		 */
		// return null;

		jsp = OPD_PATIENT_STOCK_DETAILS;
		map.put("message", message);
		// jsp += ".jsp";
		title = "OPD Stock Details";
		// map.put("deptId", deptId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}


    public ModelAndView showNextOPDPatientIssueWithoutBarCode(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> patientMap = new HashMap<String, Object>();
		List<PatientPrescriptionHeader> prescriptionList = new ArrayList<PatientPrescriptionHeader>();
		int hinId = 0;
		HttpSession session = request.getSession();
		String buttonFlag = "";
		String issueNo = "";
		String hinNo = "";
		dataMap.put("deptId", session.getAttribute("deptId"));
		// map=storesHandlerService.showOPDPatientIssue();

		map = storesHandlerService.showOPDPatientIssue(dataMap);
		int prescriptionId = 0;
		if(request.getParameter(PRESCRIPTION_NO) != null){
			prescriptionId = Integer.parseInt(request.getParameter(PRESCRIPTION_NO));
			patientMap = storesHandlerService.getPatientDetailsForNextPrescription(prescriptionId);
			if(patientMap.get("prescriptionList")!=null)
			{
				prescriptionList=(List<PatientPrescriptionHeader>)patientMap.get("prescriptionList");
				if(prescriptionList.size()>0)
				{
					prescriptionId=prescriptionList.get(0).getId();
					map.put("prescriptionId", prescriptionId);
				}
			}

			map.put("patientMap", patientMap);
		}
		if (request.getParameter("buttonFlag") != null) {
			buttonFlag = request.getParameter("buttonFlag");
			int pageNo = Integer.parseInt(request.getParameter("pageNo"));

			if (buttonFlag.equals("next")) {
				hinId = Integer.parseInt(request.getParameter("hinId"));
				hinNo = request.getParameter("hinNo");
				issueNo = request.getParameter("issueNo");
				String prescription = request
						.getParameter(RequestConstants.PRESCRIPTION_NO);
				int consultantId = Integer.parseInt(request
						.getParameter(RequestConstants.CONSULTING_DOCTOR));
				pageNo++;
				map.put("pageNo", pageNo);
				map.put("hinId", hinId);
				map.put("buttonFlag", buttonFlag);
				map.put("issueNo", issueNo);
				map.put("hinNo", hinNo);
				map.put("prescription", prescription);
				map.put("consultantId", consultantId);
			}
		}
		jsp = OPD_PATIENT_ISSUE_JSP_BARCODE;
		jsp += ".jsp";
		title = "Ward Consumption";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}
    public ModelAndView submitDispensaryForLpWithBarCode(HttpServletRequest request,HttpServletResponse response)
    {
    	String userName = "";
    	int deptId = 0;
    	int hospitalId = 0;
    	String deptName = "";
    	HttpSession session = request.getSession();
    	if (session.getAttribute("userName") != null)
    		userName = (String) session.getAttribute("userName");
    	if (session.getAttribute("hospitalId") != null)
    		hospitalId = Integer.parseInt(""
    				+ session.getAttribute("hospitalId"));
    	if (session.getAttribute("deptId") != null)
    		deptId = Integer.parseInt("" + session.getAttribute("deptId"));
    	if (session.getAttribute("deptName") != null)
    		deptName = (String) session.getAttribute("deptName");
    	Date currentDate = new Date();
    		Map<String, Object> map = new HashMap<String, Object>();
    		Map<String, Object> dataMap = new HashMap<String, Object>();
    		Map<String, Object> mapForDs = new HashMap<String, Object>();
    		Map<String, Object> detailsMap = new HashMap<String, Object>();
    		dataMap.put("deptId", session.getAttribute("deptId"));

    		Box box= HMSUtil.getBox(request);
    		if(session.getAttribute("deptId")!=null)
    		box.put("deptId", (Integer)session.getAttribute("deptId"));
    		if(session.getAttribute("hospitalId")!=null)
    		box.put("hospitalId", (Integer)session.getAttribute("hospitalId"));
    		boolean status=storesHandlerService.submitDispensaryForLp(box);
    		//map = storesHandlerService.showOPDPatientIssue(dataMap);
    		mapForDs.put("deptId", deptId);
    		mapForDs.put("currentDate", currentDate);
    		mapForDs.put("hospitalId", hospitalId);
    		detailsMap = opdHandlerService.getPrescriptionList(mapForDs);
    		detailsMap=opdHandlerService.getPrescriptionDetails(mapForDs);
    		String message="";
    		if(status==true)
    		{
    			message="Successfully send for LP ";
    		}else
    		{
    			message=" Can't be send Successfully FOR LP";
    		}
    		jsp = PENDING_PATIENT_PRESCRIPTION_BARCODE + ".jsp";
    		title = "Sent for LP";
    		map.put("detailsMap", detailsMap);
    		map.put("deptId", deptId);
    		map.put("hospitalId", hospitalId);
    		map.put("contentJsp", jsp);
    		map.put("title", title);
    		map.put("message",message);
    		return new ModelAndView("indexB", "map", map);
    	}
    //-End By Dinesh
//---------Dipali
    public ModelAndView showSearchIndentToDepo(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		int hospitalId = 0;
		HttpSession session = request.getSession();
		if (session.getAttribute("hospitalId")!= null)
			hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));

		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		map = storesHandlerService.showSearchIndentToDepo(deptId,hospitalId);
		String jsp = "str_searchIndentDepo.jsp";

		map.put("contentJsp", jsp);
		return new ModelAndView("indexB","map",map);
	}

    public ModelAndView showIndentJspDepot(HttpServletRequest request,HttpServletResponse response) {
		// --- Retriving User Name,Hospital Id,Department Id from Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.showIndentJspDepot(dataMap);
		//String Hos_name=storesHandlerService.getHospitalName(Integer.parseInt(""+ session.getAttribute("hospitalId")));
		//String Hos_address= storesHandlerService.getHospitalAddress(Integer.parseInt(""+ session.getAttribute("hospitalId")));
		
		String Hos_name="";
		String Hos_address="";
		if(map.get("Hos_name")!=null){
			Hos_name=(String)map.get("Hos_name");
		}
		if(map.get("Hos_address")!=null){
			Hos_address=(String)map.get("Hos_address");
		}
		String hosNameAdd="SMO"+" "+Hos_name+" "+Hos_address;
		jsp = INDENT_TO_DEPOT_JSP;
		jsp = jsp + ".jsp";
		title = "Indent";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("hosNameAdd", hosNameAdd); // javed khan
		return new ModelAndView("indexB", "map", map);
	}
    public ModelAndView searchIndentDepot(HttpServletRequest request,
			HttpServletResponse response) throws ServletRequestBindingException {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> map2 = new HashMap<String, Object>();
		List<StoreIndentM> searchIndentList = new ArrayList<StoreIndentM>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		int pageNo = 1;
		jsp = MODIFY_INDENT_TO_DEPOT;
		jsp += ".jsp";
		int radio_str = 0;
		if (request.getParameter(INDENT_NO_FOR_SEARCH) != null) {
			radio_str = Integer.parseInt(request
					.getParameter(INDENT_NO_FOR_SEARCH));
			map = (Map) storesHandlerService.getIndentModifyMapForDepot1(
					radio_str, pageNo , deptId, hospitalId);  // javed khan
		}
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("radio_str", radio_str);

		return new ModelAndView("indexB", "map", map);

	}
    public ModelAndView getIndentDepotDate(HttpServletRequest request,HttpServletResponse response) throws ServletRequestBindingException {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> map2 = new HashMap<String, Object>();
		List<StoreIndentM> searchIndentList = new ArrayList<StoreIndentM>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		int pageNo = 1;
		String indentType="";
		if(request.getParameter("indentType")!=null)
			indentType=request.getParameter("indentType");
	if(indentType.equals("exist")){
		jsp = "modiftExtIndentToDepo";
	}else{
		jsp = "modifyIndentToDepotOld";
	}
		jsp += ".jsp";
		int indentNo = 0;
		if (request.getParameter(INDENT_NO) != null) {
			indentNo = Integer.parseInt(request
					.getParameter(INDENT_NO));
			if(indentType.equals("exist")){
			map = (Map) storesHandlerService.getIndentModifyMapForDepot(
					indentNo, pageNo , deptId,hospitalId);
			}else{
				map = (Map) storesHandlerService.getIndentModifyMapForDepotOld(
						indentNo, pageNo , deptId,hospitalId);
			}
		}
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("indentNo", indentNo);

		return new ModelAndView("indexB", "map", map);

	}

    public ModelAndView deleteGridItemsForIndentDepo(
			HttpServletRequest request, HttpServletResponse response) {
    	int deptId = 0;
		int hospitalId = 0;
		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		int indentId=Integer.parseInt(request.getParameter(INDENT_ID));
		int pageNo=Integer.parseInt(request.getParameter("pageNo"));
		Box box = HMSUtil.getBox(request);
		String buttonName = "";
		String url = "";
		String messageTOBeVisibleToTheUser="";
		map = storesHandlerService.deleteGridItemsForIndentDepo(box);
		String indentType="";
		if(request.getParameter("indentType")!=null)
			indentType=request.getParameter("indentType");
		if (indentId != 0) {

			if(indentType.equals("exist")){
				map = (Map) storesHandlerService.getIndentModifyMapForDepot(
						indentId, pageNo , deptId,hospitalId);
				}else{
					map = (Map) storesHandlerService.getIndentModifyMapForDepotOld(
							indentId, pageNo , deptId,hospitalId);
				}


		}

	if(indentType.equals("exist")){
		jsp = "modiftExtIndentToDepo";
	}else if(indentType.equals("old")){
		jsp="modifyIndentToDepotOld";
	}else{
		jsp = MODIFY_INDENT_TO_DEPOT;
	}
		if ((buttonName.equals("submit"))) {
			messageTOBeVisibleToTheUser = "Items Deleted Successfully";
			url = "/hms/hms/stores?method=showSearchIndentToDepo";
		}

	 else {
		 if(indentType.equals("exist")){
				jsp = "modiftExtIndentToDepo";
			}else if(indentType.equals("old")){
				jsp="modifyIndentToDepotOld";
			}
			else{
				jsp = MODIFY_INDENT_TO_DEPOT;
			}
		messageTOBeVisibleToTheUser = "Items Not Deleted !!!! ";
		map.put("messageType", "failure");
		url = "/hms/hms/stores?method=showSearchIndentToDepo";
	}
		jsp += ".jsp";
		title = "Delete Indent to Depo";
		map.put("pageNo",pageNo);
		map.put("delete", "delete");
		map.put("url", url);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}
    public ModelAndView updateNextOrSubmitIndentToDepot(
			HttpServletRequest request, HttpServletResponse response)
			throws java.text.ParseException {

		//---- Retriving User Name,Hospital Id,Department Id from Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
        Box box = HMSUtil.getBox(request);
        HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		/***********************************************************************
		 * Local Variable Declaration*
		 **********************************************************************/
		StoreIndentM storeIndentM = new StoreIndentM();
		StoreIndentT storeIndentT = new StoreIndentT();
		List<StoreIndentT> storeIndentTListForUpdate = new ArrayList<StoreIndentT>();
		List<StoreIndentT> storeIndentTListForAdd = new ArrayList<StoreIndentT>();
		Map<String, Object> masterAndDetailMap = new HashMap<String, Object>();
		List<StoreIndentT> gridIndentTList = new ArrayList<StoreIndentT>();
		StoreIndentM storeIndentMObj = new StoreIndentM();
		Map map2 = new HashMap();
		String indentNo = "";
		String indentFrom = "";
		Date indentDate = null;
		String indentTo = "";
		int sectionId =0;
		String nrs = "";
		int rows = 0;
		String indentType = "d";
		String encodedBy = "";
		Date encodedDate = null;
		String lastChgBy = "A";
		String lastChgTime = "";
		String indentOption = "";
		String patientDetails = "";
		String justificationNiv = "";
		String pacJustification = "";
		String pacForeignAdd = "";
		String authority = "";
		String printUrl = "";
		int indentId = 0;
		int serialNo = 0;
		int itemId = 1;
		int stockIn = 0;
		int qtyInDemand = 0;
		int qtyInMmf = 0;
		int qtyReceived = 0;
		int radioVal = 0;
		int totalRecords = 0;
		int mmfForTheYear = 0;
		int idArrayLength = 0;
		int length = 0;
		String messageTOBeVisibleToTheUser = "";
		// Grid related Variables
		int pageNo = 1;
		String buttonName = "";
		/** Represents which button user clicked in JSP(Next/Submit) */
		String noDetailRecords = "no";
		String headerStored = "no";
		String url = "";
		Date lastChgDate = new Date();
		int noOfRows = 0;
		int supplyDepot = 0;
		String address = "";
		String contactNo="";
		String selfLife="";
		String codeHead="";
		// Method Body

		try {
			/*******************************************************************
			 * Getting Header Information From JSP*
			 ******************************************************************/
			if (request.getParameter(CONTACT_NUMBER) != null && !request.getParameter(CONTACT_NUMBER).equals("0")) {
				contactNo = request.getParameter(CONTACT_NUMBER);
			}
			if (request.getParameter("buttonName") != null) {
				buttonName = request.getParameter("buttonName");
			}
			if (request.getParameter(INDENT_ID) != null) {
				indentId = Integer.parseInt(request.getParameter(INDENT_ID));
			}
			if (request.getParameter("noDetailRecords") != null) {
				noDetailRecords = (request.getParameter("noDetailRecords"));
			}
			if (request.getParameter(CHANGED_DATE) != null) {
				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(CHANGED_DATE)));
				lastChgDate = java.sql.Date.valueOf(date4MySQL);
			}
			if (request.getParameter(CHANGED_BY) != null) {
				lastChgBy = request.getParameter(CHANGED_BY);
			}
			if (request.getParameter(CHANGED_TIME) != null) {
				lastChgTime = request.getParameter(CHANGED_TIME);
			}

			if (request.getParameter(NO_OF_ROWS) != null) {
				noOfRows = Integer.parseInt(request.getParameter(NO_OF_ROWS));
			}
			if (request.getParameter("pageNo") != null) {
				pageNo = Integer.parseInt(request.getParameter("pageNo"));
			}

			if (request.getParameter(INDENT_NO) != null) {
				indentNo = (request.getParameter(INDENT_NO));
			}
			if (request.getParameter(TYPE_OF_INDENT) != null) {
				indentOption = (request.getParameter(TYPE_OF_INDENT));
			}
			if (request.getParameter(INDENT_FROM) != null) {
				indentFrom = (request.getParameter(INDENT_FROM));
			}
			if (request.getParameter(SUPPLY_DEPOT) != null) {
				supplyDepot = Integer.parseInt((request
						.getParameter(SUPPLY_DEPOT)));
			}
			if (request.getParameter(INDENT_DATE) != null) {
				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(INDENT_DATE)));
				indentDate = java.sql.Date.valueOf(date4MySQL);
			}
			if (request.getParameter(NRS) != null) {
				nrs = (request.getParameter(NRS));
			}
			if (request.getParameter(SECTION_ID) != null) {
				sectionId = Integer.parseInt(""
						+ request.getParameter(SECTION_ID));
			}
			if (request.getParameter(AUTHORITY) != null) {
				authority = (""+request.getParameter(AUTHORITY));
			}
			if (request.getParameter(ADDRESS) != null) {
				address = (""+request.getParameter(ADDRESS));
			}
			if(request.getParameter(SHELF_LIFE)!=null){
				selfLife=(""+request.getParameter(SHELF_LIFE));
			}
			if(request.getParameter(CODE_HEAD)!=null){
				codeHead=(""+request.getParameter(CODE_HEAD));
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		if (pageNo == 1) {
			/*******************************************************************
			 * Storing the form(JSP) data in Header object * This operation
			 * performed only when page no is 1 *
			 ******************************************************************/
			try {
				storeIndentM.setId(indentId);
				storeIndentM.setIndentNo(indentNo);
				storeIndentM.setIndentDate(indentDate);
				storeIndentM.setRequiredForm(indentFrom);
				MasStoreAirForceDepot masStoreSupplier = new MasStoreAirForceDepot();
				masStoreSupplier.setId(supplyDepot);
				storeIndentM.setSuppliedBy(masStoreSupplier);


				if( sectionId!=0){
				MasStoreSection masStoreSection = new MasStoreSection();
				masStoreSection.setId(sectionId);
				storeIndentM.setSection(masStoreSection);
				}
				if(buttonName.equals("close")){
					storeIndentM.setStatus("o");
					}else{
						storeIndentM.setStatus("u");
					}

				storeIndentM.setNrs(nrs);
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				storeIndentM.setDepartment(masDepartment);
				storeIndentM.setIndentType(indentType);
				storeIndentM.setEncodedBy(encodedBy);
				storeIndentM.setEncodedDate(indentDate);
				storeIndentM.setLastChgBy(lastChgBy);
				storeIndentM.setLastChgDate(indentDate);
				storeIndentM.setTellNo(contactNo);
				storeIndentM.setLastChgTime(lastChgTime);

				storeIndentM.setIndentOption(indentOption);

				storeIndentM.setPatientDetails(patientDetails);
				storeIndentM.setJustificationNiv(justificationNiv);
				storeIndentM.setPacJustification(pacJustification);
				storeIndentM.setPacForeignAdd(pacForeignAdd);
				storeIndentM.setAuthority(authority);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				storeIndentM.setHospital(masHospital);
				storeIndentM.setMmfForTheYear(mmfForTheYear);
				storeIndentM.setIndentNo(indentNo);
				storeIndentM.setImported("n");
				storeIndentM.setPatientDetails(address);
				storeIndentM.setSelfLife(selfLife);
				storeIndentM.setCodeHead(codeHead);


			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		try {


			if (noDetailRecords.equals("no")) {
				/***************************************************************
				 * Storing the form(JSP) data in Detail object *
				 **************************************************************/
				int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
						SR_NO);
				int idArray[] = JKTRequestUtils.getRequiredIntParameters(
						request, DETAIL_ID);
				idArrayLength = idArray.length;

				int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(
						request, ITEM_ID);
				Vector qtyInHand = box.getVector(QTY_IN_HAND);
				int xxlength = qtyInHand.size();
				String qtyInMmfArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, QTY_IN_MMF);
				String qtyDemandArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, QTY_DEMAND);
				BigDecimal[] qtyInHandArray = new BigDecimal[10];
				length = srNo.length;
				for (int i = 0; i < length; i++) {

					if (itemIdArray[i] != 0 && idArrayLength ==0 ) {
						StoreIndentT storeIndentTObj = new StoreIndentT();

						storeIndentTObj.setSerialNo(srNo[i]);

						MasStoreItem masItem = new MasStoreItem();
						masItem.setId(itemIdArray[i]);
						storeIndentTObj.setItem(masItem);

						storeIndentTObj.setStockIn(new BigDecimal(qtyInHand.get(i).toString()));

						BigDecimal bigDecimal = new BigDecimal(
								qtyInMmfArray[i]);
						storeIndentTObj.setQtyInMmf(bigDecimal);
						storeIndentTObj.setQtyReceived(null);
						storeIndentTObj.setQtyInDemand(new BigDecimal(
								qtyDemandArray[i]));

						storeIndentTObj.setSection(null);

						MasDepartment masDepartment = new MasDepartment();
						masDepartment.setId(deptId);
						StoreIndentM storeIndentM2 = new StoreIndentM();
						storeIndentM2.setId(indentId);
						storeIndentTObj.setIndent(storeIndentM2);
						BigDecimal unitRate = null;
						String brandName = "";
						int manufactureId = 1;
						String marketedBy = "";
						BigDecimal totalCost = null;
						Date lastReceiptDate = null;
						BigDecimal lastReceiptQty = null;
						storeIndentTObj.setUnitRate(unitRate);
						storeIndentTObj.setBrand(null);

						storeIndentTObj.setManufacture(null);
						storeIndentTObj.setMarketedBy(marketedBy);
						storeIndentTObj.setTotalCost(totalCost);
						storeIndentTObj.setLastReceiptDate(lastReceiptDate);
						storeIndentTObj.setLastReceiptQty(lastReceiptQty);
						storeIndentTListForAdd.add(storeIndentTObj);
					}
					if (idArrayLength > 0) {
						StoreIndentT storeIndentTObj = new StoreIndentT();
						storeIndentTObj.setId(idArray[i]);
						storeIndentTObj.setSerialNo(srNo[i]);
						MasStoreItem masItem = new MasStoreItem();
						masItem.setId(itemIdArray[i]);
						storeIndentTObj.setItem(masItem);
						storeIndentTObj.setStockIn(new BigDecimal(qtyInHand.get(i).toString()));

						BigDecimal bigDecimal = new BigDecimal(qtyInMmfArray[i]);
						storeIndentTObj.setQtyInMmf(bigDecimal);
						BigDecimal bigDecimal2 = new BigDecimal(
								qtyDemandArray[i]);
						storeIndentTObj.setQtyInDemand(bigDecimal2);
						storeIndentTObj.setQtyReceived(null);

						storeIndentTObj.setSection(null);
						MasDepartment masDepartment = new MasDepartment();
						masDepartment.setId(deptId);
						StoreIndentM storeIndentM2 = new StoreIndentM();
						storeIndentM2.setId(indentId);
						storeIndentTObj.setIndent(storeIndentM2);
						BigDecimal unitRate = null;
						String brandName = "";
						int manufactureId = 1;
						String marketedBy = "";
						BigDecimal totalCost = null;
						Date lastReceiptDate = null;
						BigDecimal lastReceiptQty = null;

						storeIndentTObj.setUnitRate(unitRate);
						storeIndentTObj.setBrand(null);

						storeIndentTObj.setManufacture(null);
						storeIndentTObj.setMarketedBy(marketedBy);
						storeIndentTObj.setTotalCost(totalCost);
						storeIndentTObj.setLastReceiptDate(lastReceiptDate);
						storeIndentTObj.setLastReceiptQty(lastReceiptQty);

						storeIndentTListForUpdate.add(storeIndentTObj);
						idArrayLength--;

					}

				}

			} else {
				int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
						SR_NO);
				int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(
						request, ITEM_ID);
				String qtyInMmyArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, QTY_IN_MMF);
				String qtyDemandArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, QTY_DEMAND_TEMP);
				length = srNo.length;
				Vector qtyInHand = box.getVector(QTY_IN_HAND);
				int xxlength = qtyInHand.size();

				for (int i = 0; i < length; i++) {
					if (itemIdArray[i] != 0) {
						StoreIndentT storeIndentTObj = new StoreIndentT();
						storeIndentTObj.setSerialNo(srNo[i]);
						MasStoreItem masItem = new MasStoreItem();
						masItem.setId(itemIdArray[i]);
						storeIndentTObj.setItem(masItem);

						storeIndentTObj.setStockIn(new BigDecimal(qtyInHand.get(i).toString()));

						BigDecimal bigDecimal = new BigDecimal(qtyInMmyArray[i]);
						storeIndentTObj.setQtyInMmf(bigDecimal);
						storeIndentTObj.setQtyReceived(null);
						storeIndentTObj.setQtyInDemand(new BigDecimal(
								qtyDemandArray[i]));

						storeIndentTObj.setSection(null);

						MasDepartment masDepartment = new MasDepartment();
						masDepartment.setId(deptId);
						StoreIndentM storeIndentM2 = new StoreIndentM();
						storeIndentM2.setId(indentId);
						storeIndentTObj.setIndent(storeIndentM2);
						BigDecimal unitRate = null;
						String brandName = "";
						int manufactureId = 1;
						String marketedBy = "";
						BigDecimal totalCost = null;
						Date lastReceiptDate = null;
						BigDecimal lastReceiptQty = null;

						storeIndentTObj.setUnitRate(unitRate);
						storeIndentTObj.setBrand(null);

						storeIndentTObj.setManufacture(null);
						storeIndentTObj.setMarketedBy(marketedBy);
						storeIndentTObj.setTotalCost(totalCost);
						storeIndentTObj.setLastReceiptDate(lastReceiptDate);
						storeIndentTObj.setLastReceiptQty(lastReceiptQty);
						storeIndentTListForAdd.add(storeIndentTObj);
					}
				}


			}


		} catch (Exception e) {
			e.printStackTrace();
		}
		masterAndDetailMap.put("storeIndentTListForUpdate",
				storeIndentTListForUpdate);
		masterAndDetailMap
				.put("storeIndentTListForAdd", storeIndentTListForAdd);
		masterAndDetailMap.put("storeIndentM", storeIndentM);
		masterAndDetailMap.put("indentId", indentId);
		masterAndDetailMap.put("pageNo", pageNo);
		masterAndDetailMap.put("buttonName",buttonName);
		boolean flag = storesHandlerService
				.updateNextIndentToDepot(masterAndDetailMap);

		pageNo++;
		if (flag) {
			if (indentId != 0) {
				map = (Map) storesHandlerService.getIndentModifyMapForDepot(
						indentId, pageNo , deptId,hospitalId);
			}
			if (map.get("gridIndentTList") != null)
				gridIndentTList = (List<StoreIndentT>) map
						.get("gridIndentTList");

			if (gridIndentTList.size() == 0) {
				noDetailRecords = "yes";
			}
			if ((gridIndentTList.size() != 0) || (buttonName.equals("next"))) {
				jsp = MODIFY_INDENT_TO_DEPOT;
			}
			if ((buttonName.equals("submit"))) {
				//jsp = STORES_MESSAGE_JSP;
				jsp="indentMessage";
				messageTOBeVisibleToTheUser = "Indent To Depot Records Updated Successfullyfor Indent No "+indentNo;
				url = "/hms/hms/stores?method=showSearchIndentToDepo";
				printUrl = "/hms/hms/stores?method=printIndentTODepo&indentNo="+indentNo+"&deptId="+deptId;

			}
			if ((buttonName.equals("close"))) {
				//jsp = STORES_MESSAGE_JSP;
				jsp="indentMessage";
				messageTOBeVisibleToTheUser = "Indent To Depot Records Submitted Successfully for Indent No "+indentNo;
				url = "/hms/hms/stores?method=showSearchIndentToDepo";
				printUrl = "/hms/hms/stores?method=printIndentTODepo&indentNo="+indentNo+"&deptId="+deptId;

			}

		} else {
			//jsp = STORES_MESSAGE_JSP;
			jsp="indentMessage";
			messageTOBeVisibleToTheUser = "Indent To Depot Records Not Updated ";
			map.put("messageType", "failure");
			url = "/hms/hms/stores?method=showSearchIndentToDepo";
		}

		jsp += ".jsp";
		map.put("url", url);
		map.put("maxIndentNo", indentNo);
		map.put("indentId", indentId);
		map.put("pageNo", pageNo);
		map.put("contentJsp", jsp);
		map.put("noDetailRecords", noDetailRecords);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		map.put("printUrl",printUrl);

		map.put("indentNo", indentNo);
		map.put(" indentFrom", indentFrom);
		map.put("indentDate", indentDate);
		map.put("supplyDepot", supplyDepot);
		map.put("sectionId", sectionId);
		map.put("indentOption", indentOption);
		map.put("nrs", nrs);
		map.put("authority", authority);
		map.put("address", address);
		map.put("CodeHead", codeHead);
		map.put("contactNo",contactNo);


		return new ModelAndView("indexB", "map", map);
	}

    /*public ModelAndView getIssueList(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> dataMap = new HashMap<String, Object>();
		int toDeptId = 0;
		if ((request.getParameter("toDeptId") != null)
				&& (request.getParameter("toDeptId") != "")) {
			toDeptId = Integer.parseInt(request.getParameter("toDeptId"));
		}
		jsp = RequestConstants.ISSUE_LIST_IN_AJAX_RESPONSE;
		dataMap.put("toDeptId", toDeptId);

		map = storesHandlerService.getIssueList(dataMap);
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}*/

    @SuppressWarnings("unchecked")
    	 public ModelAndView searchIndentDetails(HttpServletRequest request,HttpServletResponse response) {
    	  Map<String,Object> map = new HashMap<String, Object>();
    	  HttpSession session = request.getSession();
    	  int internalIndentId = 0;
    	  Box box = HMSUtil.getBox(request);
    	  int hospitalId = 0;
    	  int deptId = 0;
    	  // add by javed khan
    	  if (session.getAttribute("hospitalId") != null){
  			hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));}
    	  if (session.getAttribute("deptId") != null){
    		  deptId = Integer.parseInt(""+ session.getAttribute("deptId"));}
    	  box.put("hospitalId", hospitalId);
    	  box.put("deptId", deptId);
    	  map = storesHandlerService.searchIndentDetailswithBatchId(box);
    	  if (request.getParameter(ISSUE_NO) != null) {
    	   map.put("max", request.getParameter(ISSUE_NO));
    	  }
    	  if (request.getParameter(REQUEST_BY ) != null) {
       	   map.put("Employee_id", request.getParameter(REQUEST_BY ));
       	  }
    	  if (request.getParameter(REQUEST_BY_NAME) != null) {
       	   map.put("Employee_name", request.getParameter(REQUEST_BY_NAME));
       	  }
    	  if (request.getParameter("departmentId") != null) {
    		  map.put("departmentId", request.getParameter("departmentId"));
    	  }
    	  if (request.getParameter("requestNo") != null) {
    		  map.put("requestNo", request.getParameter("requestNo"));
    	  }
    	  String userName = "";
    		
    		// comment by javed khan
    		//int hospitalId = 0;
    		int issuedBy=0;

    		if (session.getAttribute("userName") != null)
    			userName = (String) session.getAttribute("userName");
    		/*if (session.getAttribute("hospitalId") != null)
    			hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));*/
    		if (session.getAttribute("deptId") != null)
    			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
    		// ------------------------------------------------------------ Box box
    		// = HMSUtil.getBox(request);
    		Map<String,Object> mapDemand = new HashMap<String, Object>();
    		Map<String, Object> dataMap = new HashMap<String, Object>();
    		int dispenceryId = 0;
    		/*if ((request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP) != null)&& (!request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP).equals(""))) {
    			dispenceryId = Integer.parseInt(request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP));
    		}*/
    		if ((request.getParameter("departmentId") != null)&& (!request.getParameter("departmentId").equals(""))) {
    			dispenceryId = Integer.parseInt(request.getParameter("departmentId"));
    		}
    		if(request.getParameter(RequestConstants.ISSUED_BY)!=null && !request.getParameter(RequestConstants.ISSUED_BY).equals("")){
    			issuedBy=Integer.parseInt(request.getParameter(RequestConstants.ISSUED_BY));
    		}
    		jsp = RequestConstants.DEMAND_LIST_AJAX_JSP;
    		dataMap.put("dispenceryId", dispenceryId);
    		dataMap.put("deptId", deptId);
    		dataMap.put("hospitalId", hospitalId);
    		dataMap.put("userName", userName);
    		mapDemand = storesHandlerService.getDemandList(dataMap);
    		List<Object[]> storeInternalIndentMPOList = new ArrayList<Object[]>();
    		List<MasEmployee> employeeDeptByList = new ArrayList<MasEmployee>();
    		if(mapDemand.get("storeInternalIndentMList")!=null){
    			storeInternalIndentMPOList=(List<Object[]>)mapDemand.get("storeInternalIndentMList");
    		}
    		if(mapDemand.get("employeeDeptByList")!=null){
    			employeeDeptByList=(List<MasEmployee>)mapDemand.get("employeeDeptByList");
    		}
    		List<StoreIssueM> searchListForPopup = new ArrayList<StoreIssueM>();
    		if(mapDemand.get("searchListForPopup")!=null){
    			searchListForPopup=(List)mapDemand.get("searchListForPopup");
    		}
    		List<Object[]> storeInternalIndentPendingList = new ArrayList<Object[]>();
    		if(mapDemand.get("storeInternalIndentPendingList")!=null){
    			storeInternalIndentPendingList=(List)mapDemand.get("storeInternalIndentPendingList");
    		}
    		List<MasDepartment> departments=new ArrayList<MasDepartment>();
    		if(mapDemand.get("deptList")!=null){
    			departments = (List<MasDepartment>) mapDemand.get("deptList");
    		}
    		map.put("storeInternalIndentPendingList", storeInternalIndentPendingList);
    		map.put("searchListForPopup", searchListForPopup);
    		map.put("employeeDeptByList", employeeDeptByList);
    		map.put("deptList", departments);
    		map.put("issuedBy",Integer.parseInt(HMSUtil.restrictMetaChar(""+issuedBy)));
    	  /*jsp = RequestConstants.ISSUED_TO_DISPENSARY_JSP;*/
    	  jsp =  "issueToDispensaryGrid.jsp";
    	  map.put("contentJsp", jsp);
    	  map.put("storeInternalIndentMPOList",storeInternalIndentMPOList);
    	  map.put("internalIndentId", internalIndentId);
    	  return new ModelAndView("index", "map", map);
    	 }
    
    @SuppressWarnings("unchecked")
	 public ModelAndView searchIndentDetailsForWard(HttpServletRequest request,HttpServletResponse response) {
	  Map<String,Object> map = new HashMap<String, Object>();
	  HttpSession session = request.getSession();
	  int internalIndentId = 0;
	  Box box = HMSUtil.getBox(request);
	  int hospitalId = 0;
	  int deptId = 0;
	  // add by javed khan
	  if (session.getAttribute("hospitalId") != null){
			hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));}
	  if (session.getAttribute("deptId") != null){
		  deptId = Integer.parseInt(""+ session.getAttribute("deptId"));}
	  box.put("hospitalId", hospitalId);
	  box.put("deptId", deptId);
	  map = storesHandlerService.searchIndentDetails(box);
	  if (request.getParameter(ISSUE_NO) != null) {
	   map.put("max", request.getParameter(ISSUE_NO));
	  }
	  if (request.getParameter(REQUEST_BY ) != null) {
  	   map.put("Employee_id", request.getParameter(REQUEST_BY ));
  	  }
	  if (request.getParameter(REQUEST_BY_NAME) != null) {
  	   map.put("Employee_name", request.getParameter(REQUEST_BY_NAME));
  	  }
	  if (request.getParameter("departmentId") != null) {
		  map.put("departmentId", request.getParameter("departmentId"));
	  }
	  if (request.getParameter("requestNo") != null) {
		  map.put("requestNo", request.getParameter("requestNo"));
	  }
	  String userName = "";
		
		// comment by javed khan
		//int hospitalId = 0;
		int issuedBy=0;

		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		/*if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));*/
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// ------------------------------------------------------------ Box box
		// = HMSUtil.getBox(request);
		Map<String,Object> mapDemand = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		int dispenceryId = 0;
		/*if ((request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP) != null)&& (!request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP).equals(""))) {
			dispenceryId = Integer.parseInt(request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP));
		}*/
		if ((request.getParameter("departmentId") != null)&& (!request.getParameter("departmentId").equals(""))) {
			dispenceryId = Integer.parseInt(request.getParameter("departmentId"));
		}
		if(request.getParameter(RequestConstants.ISSUED_BY)!=null && !request.getParameter(RequestConstants.ISSUED_BY).equals("")){
			issuedBy=Integer.parseInt(request.getParameter(RequestConstants.ISSUED_BY));
		}
		jsp = RequestConstants.DEMAND_LIST_AJAX_JSP;
		dataMap.put("dispenceryId", dispenceryId);
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);
		mapDemand = storesHandlerService.getDemandList(dataMap);
		List<Object[]> storeInternalIndentMPOList = new ArrayList<Object[]>();
		List<MasEmployee> employeeDeptByList = new ArrayList<MasEmployee>();
		if(mapDemand.get("storeInternalIndentMList")!=null){
			storeInternalIndentMPOList=(List<Object[]>)mapDemand.get("storeInternalIndentMList");
		}
		if(mapDemand.get("employeeDeptByList")!=null){
			employeeDeptByList=(List<MasEmployee>)mapDemand.get("employeeDeptByList");
		}
		List<StoreIssueM> searchListForPopup = new ArrayList<StoreIssueM>();
		if(mapDemand.get("searchListForPopup")!=null){
			searchListForPopup=(List)mapDemand.get("searchListForPopup");
		}
		List<Object[]> storeInternalIndentPendingList = new ArrayList<Object[]>();
		if(mapDemand.get("storeInternalIndentPendingList")!=null){
			storeInternalIndentPendingList=(List)mapDemand.get("storeInternalIndentPendingList");
		}
		List<MasDepartment> departments=new ArrayList<MasDepartment>();
		if(mapDemand.get("deptList")!=null){
			departments = (List<MasDepartment>) mapDemand.get("deptList");
		}
		map.put("storeInternalIndentPendingList", storeInternalIndentPendingList);
		map.put("searchListForPopup", searchListForPopup);
		map.put("employeeDeptByList", employeeDeptByList);
		map.put("deptList", departments);
		map.put("issuedBy",Integer.parseInt(HMSUtil.restrictMetaChar(""+issuedBy)));
	  /*jsp = RequestConstants.ISSUED_TO_DISPENSARY_JSP;*/
	  jsp =  "issueToDispensaryGridForWard.jsp";
	  map.put("contentJsp", jsp);
	  map.put("storeInternalIndentMPOList",storeInternalIndentMPOList);
	  map.put("internalIndentId", internalIndentId);
	  return new ModelAndView("index", "map", map);
	 }
    
    @SuppressWarnings("unchecked")
	 public ModelAndView searchIndentDetailsPartial(HttpServletRequest request,HttpServletResponse response) {
	  Map<String,Object> map = new HashMap<String, Object>();
	  HttpSession session = request.getSession();
	  int internalIndentId = 0;
	  Box box = HMSUtil.getBox(request);
	  int hospitalId = 0;
	  int deptId = 0;
	  // add by javed khan
	  if (session.getAttribute("hospitalId") != null){
			hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));}
	  if (session.getAttribute("deptId") != null){
		  deptId = Integer.parseInt(""+ session.getAttribute("deptId"));}
	  box.put("hospitalId", hospitalId);
	  box.put("deptId", deptId);
	  map = storesHandlerService.searchIndentDetails(box);
	  if (request.getParameter(ISSUE_NO) != null) {
	   map.put("max", request.getParameter(ISSUE_NO));
	  }
	  if (request.getParameter(REQUEST_BY ) != null) {
  	   map.put("Employee_id", request.getParameter(REQUEST_BY ));
  	  }
	  if (request.getParameter(REQUEST_BY_NAME) != null) {
  	   map.put("Employee_name", request.getParameter(REQUEST_BY_NAME));
  	  }
	  if (request.getParameter("departmentId") != null) {
		  map.put("departmentId", request.getParameter("departmentId"));
	  }
	  if (request.getParameter("requestNo") != null) {
		  map.put("requestNo", request.getParameter("requestNo"));
	  }
	  String userName = "";
		
		// comment by javed khan
		//int hospitalId = 0;
		int issuedBy=0;

		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		/*if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));*/
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// ------------------------------------------------------------ Box box
		// = HMSUtil.getBox(request);
		Map<String,Object> mapDemand = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		int dispenceryId = 0;
		/*if ((request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP) != null)&& (!request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP).equals(""))) {
			dispenceryId = Integer.parseInt(request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP));
		}*/
		if ((request.getParameter("departmentId") != null)&& (!request.getParameter("departmentId").equals(""))) {
			dispenceryId = Integer.parseInt(request.getParameter("departmentId"));
		}
		if(request.getParameter(RequestConstants.ISSUED_BY)!=null && !request.getParameter(RequestConstants.ISSUED_BY).equals("")){
			issuedBy=Integer.parseInt(request.getParameter(RequestConstants.ISSUED_BY));
		}
		jsp = RequestConstants.DEMAND_LIST_AJAX_JSP;
		dataMap.put("dispenceryId", dispenceryId);
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);
		mapDemand = storesHandlerService.getDemandListPartial(dataMap);
		List<Object[]> storeInternalIndentMPOList = new ArrayList<Object[]>();
		List<MasEmployee> employeeDeptByList = new ArrayList<MasEmployee>();
		if(mapDemand.get("storeInternalIndentMList")!=null){
			storeInternalIndentMPOList=(List<Object[]>)mapDemand.get("storeInternalIndentMList");
		}
		if(mapDemand.get("employeeDeptByList")!=null){
			employeeDeptByList=(List<MasEmployee>)mapDemand.get("employeeDeptByList");
		}
		List<StoreIssueM> searchListForPopup = new ArrayList<StoreIssueM>();
		if(mapDemand.get("searchListForPopup")!=null){
			searchListForPopup=(List)mapDemand.get("searchListForPopup");
		}
		List<Object[]> storeInternalIndentPendingList = new ArrayList<Object[]>();
		if(mapDemand.get("storeInternalIndentPendingList")!=null){
			storeInternalIndentPendingList=(List)mapDemand.get("storeInternalIndentPendingList");
		}
		List<MasDepartment> departments=new ArrayList<MasDepartment>();
		if(mapDemand.get("deptList")!=null){
			departments = (List<MasDepartment>) mapDemand.get("deptList");
		}
		map.put("storeInternalIndentPendingList", storeInternalIndentPendingList);
		map.put("searchListForPopup", searchListForPopup);
		map.put("employeeDeptByList", employeeDeptByList);
		map.put("deptList", departments);
		map.put("issuedBy",Integer.parseInt(HMSUtil.restrictMetaChar(""+issuedBy)));
	  /*jsp = RequestConstants.ISSUED_TO_DISPENSARY_JSP;*/
	  jsp =  "issueToDispensaryGridPartial.jsp";
	  map.put("contentJsp", jsp);
	  map.put("storeInternalIndentMPOList",storeInternalIndentMPOList);
	  map.put("internalIndentId", internalIndentId);
	  return new ModelAndView("index", "map", map);
	 }

    
    @SuppressWarnings("unchecked")
	 public ModelAndView getRCRequestDetails(HttpServletRequest request,HttpServletResponse response) {
	  Map<String,Object> map = new HashMap<String, Object>();
	  HttpSession session = request.getSession();
	  int internalIndentId = 0;
	  int deptId =0;
	  Box box = HMSUtil.getBox(request);
	  int hospitalId = 0;
	  // add by javed khan
	  if (session.getAttribute("hospitalId") != null){
			hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));}
	  box.put("hospitalId", hospitalId);
	  if (session.getAttribute("deptId") != null){
		  deptId = Integer.parseInt(""+ session.getAttribute("deptId"));}
	  box.put("deptId", deptId);
	  map = storesHandlerService.getRCRequestDetails(box);
	  if (request.getParameter(ISSUE_NO) != null) {
	   map.put("max", request.getParameter(ISSUE_NO));
	  }
	  if (request.getParameter(REQUEST_BY ) != null) {
  	   map.put("Employee_id", request.getParameter(REQUEST_BY ));
  	  }
	  if (request.getParameter(REQUEST_BY_NAME) != null) {
  	   map.put("Employee_name", request.getParameter(REQUEST_BY_NAME));
  	  }
	  if (request.getParameter("departmentId") != null) {
		  map.put("departmentId", request.getParameter("departmentId"));
	  }
	  if (request.getParameter("requestNo") != null) {
		  map.put("requestNo", request.getParameter("requestNo"));
	  }
	  String userName = "";
		
		// comment by javed khan
		//int hospitalId = 0;
		int issuedBy=0;
		
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		/*if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));*/
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// ------------------------------------------------------------ Box box
		// = HMSUtil.getBox(request);
		Map<String,Object> mapDemand = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		int dispenceryId = 0;
		/*if ((request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP) != null)&& (!request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP).equals(""))) {
			dispenceryId = Integer.parseInt(request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP));
		}*/
		if ((request.getParameter("departmentId") != null)&& (!request.getParameter("departmentId").equals(""))) {
			dispenceryId = Integer.parseInt(request.getParameter("departmentId"));
		}
		if(request.getParameter(RequestConstants.ISSUED_BY)!=null && !request.getParameter(RequestConstants.ISSUED_BY).equals("")){
			issuedBy=Integer.parseInt(request.getParameter(RequestConstants.ISSUED_BY));
		}
		jsp = RequestConstants.DEMAND_LIST_AJAX_JSP;
		dataMap.put("dispenceryId", dispenceryId);
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);
		mapDemand = storesHandlerService.getDemandList(dataMap);
		List<Object[]> storeInternalIndentMPOList = new ArrayList<Object[]>();
		List<MasEmployee> employeeDeptByList = new ArrayList<MasEmployee>();
		if(mapDemand.get("storeInternalIndentMList")!=null){
			storeInternalIndentMPOList=(List<Object[]>)mapDemand.get("storeInternalIndentMList");
		}
		if(mapDemand.get("employeeDeptByList")!=null){
			employeeDeptByList=(List<MasEmployee>)mapDemand.get("employeeDeptByList");
		}
		List<StoreIssueM> searchListForPopup = new ArrayList<StoreIssueM>();
		if(mapDemand.get("searchListForPopup")!=null){
			searchListForPopup=(List)mapDemand.get("searchListForPopup");
		}
		List<Object[]> storeInternalIndentPendingList = new ArrayList<Object[]>();
		if(mapDemand.get("storeInternalIndentPendingList")!=null){
			storeInternalIndentPendingList=(List)mapDemand.get("storeInternalIndentPendingList");
		}
		List<MasDepartment> departments=new ArrayList<MasDepartment>();
		if(mapDemand.get("deptList")!=null){
			departments = (List<MasDepartment>) mapDemand.get("deptList");
		}
		map.put("storeInternalIndentPendingList", storeInternalIndentPendingList);
		map.put("searchListForPopup", searchListForPopup);
		map.put("employeeDeptByList", employeeDeptByList);
		map.put("deptList", departments);
		map.put("issuedBy",Integer.parseInt(HMSUtil.restrictMetaChar(""+issuedBy)));
	  
	  jsp = "issueToDipartment.jsp";
	  map.put("contentJsp", jsp);
	  map.put("storeInternalIndentMPOList",storeInternalIndentMPOList);
	  map.put("internalIndentId", internalIndentId);
	  return new ModelAndView("index", "map", map);
	 }


    //By Dipali
    public ModelAndView submitIssueForIndent(HttpServletRequest request,HttpServletResponse response)
    {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String,Object> dataMap = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		int hospitalId = (Integer)session.getAttribute(HOSPITAL_ID);
		int deptId = (Integer)session.getAttribute("deptId");
		int empId = (Integer)session.getAttribute("empId");
		int indentDtId =0;
		boolean b = false;
		String issuedBatchIdAndQty="";
		Set set = new  HashSet();
		List<StoreIssueT> childList=new ArrayList<StoreIssueT>();


		Map<String, Object> utilMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		utilMap = (Map<String, Object>)HMSUtil.getCurrentDateAndTime();
		String date = (String)utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");

		BigDecimal totalAmtAllItemsWithoutTax = new BigDecimal(0);
		BigDecimal totalSalesTaxAllItems = new BigDecimal(0);
		BigDecimal totalAmtAllItemsIncludingTax = new BigDecimal(0);
		BigDecimal totalPayableAmtAllItemsIncludingTax = new BigDecimal(0);
		BigDecimal amtInRs = new BigDecimal(0);
		BigDecimal roundAmtPs = new BigDecimal(0);
		BigDecimal zero = new BigDecimal("0");

		String[] array1 = request.getParameterValues("tt8");
		String[] totalQuantityIssued = request.getParameterValues("tt6");
		String[] totalQuantityRequested = request.getParameterValues(RequestConstants.QTY_IN_REQUEST);
		//String[] storeIndentTIdArray = request.getParameterValues("storeIndentTId");
		/* if (request.getParameter("indentDtId") != null) {
			 indentDtId= Integer.parseInt(request.getParameter("indentDtId").trim());
			 utilMap.put("indentDtId", indentDtId);
		 }
*/
		int indentInternalId=0;
		if(request.getParameter(REQUEST_NO) !=null && !request.getParameter(REQUEST_NO).equals("0")){
		indentInternalId=Integer.parseInt(request.getParameter(REQUEST_NO));
		}
		 StoreIssueM issueM = new StoreIssueM();
		 issueM.setIssueType("i");
		/* issueM.setIssueNo(request.getParameter(ISSUE_NO));*/
		 issueM.setIssueDate(HMSUtil.convertStringTypeDateToDateType(request.getParameter(ISSUE_DATE)));

		 MasDepartment department = new MasDepartment();
		 department.setId(deptId);
		 issueM.setDepartment(department);

		 MasDepartment department2 = new MasDepartment();
		 department2.setId(Integer.parseInt(request.getParameter("departmentId")));
		 issueM.setToStore(department2);

		// System.out.println("====>"+request.getParameter(REQUEST_NO));
		 StoreInternalIndentM internalIndentM = new StoreInternalIndentM();
		// internalIndentM.setId(15);
		 internalIndentM.setId(Integer.parseInt(request.getParameter(REQUEST_NO)));
		 issueM.setRequestNo(internalIndentM);

		 issueM.setRequestDate(HMSUtil.convertStringTypeDateToDateType(request.getParameter(REQUEST_DATE)));

		 MasEmployee employee = new MasEmployee();
		 employee.setId(Integer.parseInt(request.getParameter(REQUEST_BY)));
		 issueM.setRequestBy(employee);

		if(request.getParameter(APPROVED_BY)!=null){
			MasEmployee employee2 = new MasEmployee();
		 employee2.setId(Integer.parseInt(request.getParameter(APPROVED_BY)));
		 issueM.setApprovedBy(employee2);
		}

		 MasEmployee employee3 = new MasEmployee();
		 employee3.setId(empId);
		 issueM.setIssuedBy(employee3);
		 issueM.setStatus("p");

		 MasHospital hospital = new MasHospital();
		 hospital.setId(hospitalId);
		 issueM.setHospital(hospital);

		 issueM.setDocNo(request.getParameter(REQUEST_NO));
		 issueM.setLastChgBy(userName);
		 issueM.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(date));
		 issueM.setLastChgTime(time);
		 
		 utilMap.put("indentInternalId",indentInternalId);
		 utilMap.put("issueM", issueM);
			List issQtyList = new ArrayList();
			List amountList = new ArrayList();
			List pvmsList = new ArrayList();
			List batchNumberList = new ArrayList();
			List brandNameList = new ArrayList();
			List expiryDateList = new ArrayList();
			List reqQtyList = new ArrayList();
			//List costPriceList = new ArrayList();
			List<Integer> itemIdList = new ArrayList<Integer>();
			String[] arraySRNo = request.getParameterValues("SRNo");
			int SRNo = arraySRNo.length;
			System.out.println("SRNo="+SRNo);
			for (int i = 1; i <=SRNo; i++)
			{	
				String qtyIssued = request.getParameter("qtyIssued"+i);
				System.out.println("qtyIssued="+qtyIssued);
				if(qtyIssued!=""){ 
				int itemId = Integer.parseInt(request.getParameter("itemId"+i));
				itemIdList.add(itemId);
				
				issQtyList.add(request.getParameter("qtyIssued" + i));
				// pvmsList.add(itemId);
				batchNumberList.add(request.getParameter("batchNoValue" + i));
			   	brandNameList.add(request.getParameter("brandId" + i));
				expiryDateList.add(request.getParameter("expiryDate" + i));
				reqQtyList.add(request.getParameter(QTY_IN_REQUEST + i));
				StoreIssueT child = new StoreIssueT();
		    	child.setBatchNo(request.getParameter("batchNoValue" + i));
		    	try
		    	{
		    	child.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(request.getParameter("expiryDate" + i)));
		    	}catch (Exception e) {


				}

		    	if(request.getParameter("qtyIssued" + i) != null && !request.getParameter("qtyIssued" + i).equals("")){
		    	child.setQtyIssued(new BigDecimal(request.getParameter("qtyIssued" + i)));
		    	}else{
		    		child.setQtyIssued(null);
		    	}
		    	if(request.getParameter(QTY_IN_REQUEST  + i) != null && !request.getParameter(QTY_IN_REQUEST  + i).equals("")){
		    	child.setQtyRequest(new BigDecimal(request.getParameter(QTY_IN_REQUEST + i)));
		    	}else{
		    		child.setQtyRequest(null);
		    	}
		    	if(request.getParameter("batchId" + i) != null && !request.getParameter("batchId" + i).equals("")){
		    	StoreItemBatchStock batchStock = new StoreItemBatchStock();
		    	batchStock.setId(Integer.parseInt(request.getParameter("batchId" + i)));
		    	child.setBatchStock(batchStock);
		    	}else{
		    		child.setBatchStock(null);
		    	}
		        try {
		        	if(request.getParameter("brandId" + i) != null && !request.getParameter("brandId" + i).equals("")){
					MasStoreBrand masBrand = new MasStoreBrand();
					masBrand.setId(Integer.parseInt(request.getParameter("brandId" + i)));
					child.setBrand(masBrand);
		        	}else{child.setBrand(null);}

				} catch (Exception e) {
					// TODO Auto-generated catch block
					child.setBrand(null);
					e.printStackTrace();
				}

		    	//child.setIssueM(issueM);


		    	MasStoreItem masStoreItem = new MasStoreItem();
		    	masStoreItem.setId(itemId);
		    	
		    	child.setItem(masStoreItem);
		    	child.setItemIssued(masStoreItem);

		   	    child.setCostPrice(new BigDecimal(0.0));
//		    	    child.setRemarks(request.getParameter(RequestConstants.REMARKS_TEMP));
		    	child.setSrNo(Integer.parseInt(request.getParameter("SRNo")));
		    	child.setIssued("y");
		    	//child.setSalesTaxAmt(new BigDecimal(salesTax));
		    	//child.setAmtIncludingSalesTax(new BigDecimal(amtIncludingSalesTax));
//		    	    set.add(child);
		    	childList.add(child);
				}
			}



			// javed khan----this code for loanout QTY

			List<StoreIssueT> childList1=new ArrayList<StoreIssueT>();

			List issQtyListL = new ArrayList();
			List amountListL = new ArrayList();
			List pvmsListL = new ArrayList();
			List batchNumberListL = new ArrayList();
			List brandNameListL = new ArrayList();
			List expiryDateListL = new ArrayList();
			List reqQtyListL = new ArrayList();
			List issueMListL = new ArrayList();
			//List costPriceList = new ArrayList();
			List<Integer> itemIdListL = new ArrayList<Integer>();
			int counterL = Integer.parseInt(request.getParameter("counterL"));
			for (int j = 1; j <=counterL; j++)
			{
				int itemIdL = Integer.parseInt(request.getParameter("itemIdL"+j));
				itemIdListL.add(itemIdL);
				issQtyListL.add(request.getParameter("qtyIssuedL" + j));
				// pvmsList.add(itemId);
				batchNumberListL.add(request.getParameter("batchNoL" + j));
			   	brandNameListL.add(request.getParameter("brandIdL" + j));
				expiryDateListL.add(request.getParameter("expiryDateL" + j));
				reqQtyListL.add(request.getParameter("qtyIssuedL" + j));
				issueMListL.add(request.getParameter("ISSUE_M_L" + j));
				StoreIssueT child1 = new StoreIssueT();
		    	child1.setBatchNo(request.getParameter("batchNoL" + j));
		    	try
		    	{
		    	child1.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(request.getParameter("expiryDateL" + j)));
		    	}catch (Exception e) {


				}

		    	if(request.getParameter("qtyIssuedL" + j) != null && !request.getParameter("qtyIssuedL" + j).equals("")){
		    	child1.setQtyIssued(new BigDecimal(request.getParameter("qtyIssuedL" + j)));
		    	}else{
		    		child1.setQtyIssued(null);
		    	}
		    	if(request.getParameter("qtyIssuedL" + j) != null && !request.getParameter("qtyIssuedL" + j).equals("")){
		    		// comment by javed khan
		    	//child1.setQtyRequest(new BigDecimal(request.getParameter("qtyIssuedL" + j)));
		    		child1.setQtyRequest(new BigDecimal(0));
		    	}else{
		    		child1.setQtyRequest(null);
		    	}
		    	if(request.getParameter("batchIdL" + j) != null && !request.getParameter("batchIdL" + j).equals("")){
		    	StoreItemBatchStock batchStock = new StoreItemBatchStock();
		    	batchStock.setId(Integer.parseInt(request.getParameter("batchIdL" + j)));
		    	child1.setBatchStock(batchStock);
		    	}else{
		    		child1.setBatchStock(null);
		    	}
		        try {
		        	if(request.getParameter("brandIdL" + j) != null && !request.getParameter("brandIdL" + j).equals("")){
					MasStoreBrand masBrand = new MasStoreBrand();
					masBrand.setId(Integer.parseInt(request.getParameter("brandIdL" + j)));
					child1.setBrand(masBrand);
		        	}else{child1.setBrand(null);}

				} catch (Exception e) {
					// TODO Auto-generated catch block
					child1.setBrand(null);
					e.printStackTrace();
				}

		    	//child.setIssueM(issueM);


		    	MasStoreItem masStoreItem = new MasStoreItem();
		    	masStoreItem.setId(itemIdL);
		    	child1.setItem(masStoreItem);
		    	child1.setItemIssued(masStoreItem);

		   	    child1.setCostPrice(new BigDecimal(0.0));
//		    	    child.setRemarks(request.getParameter(RequestConstants.REMARKS_TEMP));
		    	child1.setSrNo(Integer.parseInt(request.getParameter("SRNo")));
		    	child1.setIssued("y");
		    	child1.setCivLoan("Loan");

		    	childList1.add(child1);
			}
			utilMap.put("childList1",childList1);
			utilMap.put("issueMListL",issueMListL);

			// end code for Loanout Qty


			utilMap.put("itemIdList", itemIdList);
			utilMap.put("issQtyList", issQtyList);
			utilMap.put("batchNumberList", batchNumberList);
			utilMap.put("expiryDateList", expiryDateList);
			utilMap.put("brandNameList", brandNameList);
			utilMap.put("reqQtyList", reqQtyList);
			utilMap.put("deptId", deptId);
			utilMap.put("childList",childList);
			utilMap.put("hospitalId", hospitalId); // add by javed khan

		map = storesHandlerService.insertIssueForIndentwithoutbarcode(utilMap, box);
		String msg = "";
		String messageTOBeVisibleToTheUser = "";
		if(map.get("b")!=null)
		{
			b = (Boolean)map.get("b");
		}
		if(b){
			msg = "Indent Has Been Issued Successfully.";
			 messageTOBeVisibleToTheUser = "Issued Successfully  ! Do you want to print?";
		}else{
			msg = "Try Again!";
			 messageTOBeVisibleToTheUser = "Some Error Occured  ! Try Again!";
		}
		/*map = storesHandlerService.showIssueDispensaryJsp(dataMap);
		jsp = RequestConstants.ISSUED_TO_DISPENSARY_JSP;*/
		String jsp = STORES_ISSUE_MESSAGE_JSP;
			
				map.put("messageTOBeVisibleToTheUser",
						messageTOBeVisibleToTheUser);
				int issueId=0;
				if (map.get("issueId") != null)
					issueId = Integer.parseInt("" + map.get("issueId"));
		jsp+= ".jsp" ;
		String title = "Invoice";
		map.put("issueId", issueId);
		map.put("deptId", deptId);
		map.put("msg", msg);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}
    
    //By Dipali
    public ModelAndView submitIssueForIndentForWard(HttpServletRequest request,HttpServletResponse response)
    {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String,Object> dataMap = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		int hospitalId = (Integer)session.getAttribute(HOSPITAL_ID);
		int deptId = (Integer)session.getAttribute("deptId");
		int empId = (Integer)session.getAttribute("empId");
		int userId = (Integer)session.getAttribute("userId");
		int indentDtId =0;
		boolean b = false;
		String issuedBatchIdAndQty="";
		Set set = new  HashSet();
		List<StoreIssueT> childList=new ArrayList<StoreIssueT>();


		Map<String, Object> utilMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		utilMap = (Map<String, Object>)HMSUtil.getCurrentDateAndTime();
		String date = (String)utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");

		BigDecimal totalAmtAllItemsWithoutTax = new BigDecimal(0);
		BigDecimal totalSalesTaxAllItems = new BigDecimal(0);
		BigDecimal totalAmtAllItemsIncludingTax = new BigDecimal(0);
		BigDecimal totalPayableAmtAllItemsIncludingTax = new BigDecimal(0);
		BigDecimal amtInRs = new BigDecimal(0);
		BigDecimal roundAmtPs = new BigDecimal(0);
		BigDecimal zero = new BigDecimal("0");

		String[] array1 = request.getParameterValues("tt8");
		String[] totalQuantityIssued = request.getParameterValues("tt6");
		String[] totalQuantityRequested = request.getParameterValues(RequestConstants.QTY_IN_REQUEST);
	
		int indentInternalId=0;
	
		 StoreIssueM issueM = new StoreIssueM();
		 issueM.setIssueType("i");
		/* issueM.setIssueNo(request.getParameter(ISSUE_NO));*/
		 issueM.setIssueDate(HMSUtil.convertStringTypeDateToDateType(request.getParameter(ISSUE_DATE)));

		 MasDepartment department = new MasDepartment();
		 department.setId(deptId);
		 issueM.setDepartment(department);

		 MasDepartment department2 = new MasDepartment();
		 department2.setId(Integer.parseInt(request.getParameter("departmentId")));
		 issueM.setToStore(department2);

		// System.out.println("====>"+request.getParameter(REQUEST_NO));
		 StoreInternalIndentM internalIndentM = new StoreInternalIndentM();
		// internalIndentM.setId(15);
		 internalIndentM.setId(Integer.parseInt(request.getParameter(REQUEST_NO)));
		 issueM.setRequestNo(internalIndentM);

		 issueM.setRequestDate(HMSUtil.convertStringTypeDateToDateType(request.getParameter(REQUEST_DATE)));

		 MasEmployee employee = new MasEmployee();
		 employee.setId(Integer.parseInt(request.getParameter(REQUEST_BY)));
		 issueM.setRequestBy(employee);

		if(request.getParameter(APPROVED_BY)!=null){
			MasEmployee employee2 = new MasEmployee();
		 employee2.setId(Integer.parseInt(request.getParameter(APPROVED_BY)));
		 issueM.setApprovedBy(employee2);
		}

		 MasEmployee employee3 = new MasEmployee();
		 employee3.setId(empId);
		 issueM.setIssuedBy(employee3);
		 issueM.setStatus("p");

		 MasHospital hospital = new MasHospital();
		 hospital.setId(hospitalId);
		 issueM.setHospital(hospital);

		 issueM.setDocNo(request.getParameter(REQUEST_NO));
		 issueM.setLastChgBy(userName);
		 issueM.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(date));
		 issueM.setLastChgTime(time);
		 
		 utilMap.put("indentInternalId",indentInternalId);
		 utilMap.put("issueM", issueM);
			List issQtyList = new ArrayList();
			
			
			List batchNumberList = new ArrayList();
		
			List<Integer> itemIdList = new ArrayList<Integer>();
			String[] arraySRNo = request.getParameterValues("SRNo");
			int SRNo = arraySRNo.length;
			
			for (int i = 1; i <=SRNo; i++)
			{	
				String qtyIssued = request.getParameter("qtyIssued"+i);
				
				
				int itemId = Integer.parseInt(request.getParameter("itemId"+i));
				itemIdList.add(itemId);
				
				issQtyList.add(request.getParameter("qtyIssued" + i));
				// pvmsList.add(itemId);
				batchNumberList.add(request.getParameter("batchNo" + i));
			   /*	brandNameList.add(request.getParameter("brandId" + i));*/
				/*expiryDateList.add(request.getParameter("expiryDate" + i));*/
				/*reqQtyList.add(request.getParameter(QTY_IN_REQUEST + i));*/
				StoreIssueT child = new StoreIssueT();
		    	child.setBatchNo(request.getParameter("batchNoValue" + i));
		    	try
		    	{
		    		if(!request.getParameter("expiryDate" + i).trim().equals(""))
		    				{
		    			child.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(request.getParameter("expiryDate" + i)));
		    				}
		    		else
		    		{
		    			child.setExpiryDate(null);
		    		}
		    	
		    	}catch (Exception e) {

                     e.printStackTrace();
				}
                System.out.println("request.getParameterqtyIssued + i)"+request.getParameter("qtyIssued" + i));
		    	if(request.getParameter("qtyIssued" + i) != null && !request.getParameter("qtyIssued" + i).equals("")){
		    	child.setQtyIssued(new BigDecimal(request.getParameter("qtyIssued" + i)));
		    	}else{
		    		child.setQtyIssued(new BigDecimal(0));
		    	}
		    	if(request.getParameter(QTY_IN_REQUEST  + i) != null && !request.getParameter(QTY_IN_REQUEST  + i).equals("")){
		    	child.setQtyRequest(new BigDecimal(request.getParameter(QTY_IN_REQUEST + i)));
		    	}else{
		    		child.setQtyRequest(null);
		    	}
		    	System.out.println("request.getParameter(batchNo+ i)"+request.getParameter("batchNo" + i));
		    	if(request.getParameter("batchNo" + i) != null && !request.getParameter("batchNo" + i).equals("") && !request.getParameter("batchNo" + i).equals("0")){
		    	StoreItemBatchStock batchStock = new StoreItemBatchStock();
		    	batchStock.setId(Integer.parseInt(request.getParameter("batchNo" + i)));
		    	child.setBatchStock(batchStock);
		    	}else{
		    		child.setBatchStock(null);
		    	}
		        try {
		        	if(request.getParameter("brandId" + i) != null && !request.getParameter("brandId" + i).equals("") && !request.getParameter("brandId" + i).equals("0")){
					MasStoreBrand masBrand = new MasStoreBrand();
					masBrand.setId(Integer.parseInt(request.getParameter("brandId" + i)));
					child.setBrand(masBrand);
		        	}else{child.setBrand(null);}

				} catch (Exception e) {
					// TODO Auto-generated catch block
					child.setBrand(null);
					e.printStackTrace();
				}

		    	//child.setIssueM(issueM);


		    	MasStoreItem masStoreItem = new MasStoreItem();
		    	masStoreItem.setId(itemId);
		    	
		    	child.setItem(masStoreItem);
		    	child.setItemIssued(masStoreItem);

		   	    child.setCostPrice(new BigDecimal(0.0));
//		    	    child.setRemarks(request.getParameter(RequestConstants.REMARKS_TEMP));
		    	child.setSrNo(Integer.parseInt(request.getParameter("SRNo")));
		    	child.setIssued("y");
		    	//child.setSalesTaxAmt(new BigDecimal(salesTax));
		    	//child.setAmtIncludingSalesTax(new BigDecimal(amtIncludingSalesTax));
//		    	    set.add(child);
		    	childList.add(child);
				
			}





			utilMap.put("itemIdList", itemIdList);
			utilMap.put("issQtyList", issQtyList);
			utilMap.put("batchNumberList", batchNumberList);
			/*utilMap.put("expiryDateList", expiryDateList);*/
			/*utilMap.put("brandNameList", brandNameList);*/
			/*utilMap.put("reqQtyList", reqQtyList);*/
			utilMap.put("deptId", deptId);
			utilMap.put("childList",childList);
			utilMap.put("hospitalId", hospitalId); // add by javed khan
			box.put("userId", userId);

		map = storesHandlerService.insertIssueForIndentwithoutbarcodeWP(utilMap, box);
		String msg = "";
		String messageTOBeVisibleToTheUser = "";
		if(map.get("b")!=null)
		{
			b = (Boolean)map.get("b");
		}
		if(b){
			msg = "Indent Has Been Issued Successfully.";
			 messageTOBeVisibleToTheUser = "Issued Successfully  ! Do you want to print?";
		}else{
			msg = "Try Again!";
			 messageTOBeVisibleToTheUser = "Some Error Occured  ! Try Again!";
		}
		/*map = storesHandlerService.showIssueDispensaryJsp(dataMap);
		jsp = RequestConstants.ISSUED_TO_DISPENSARY_JSP;*/
		String jsp = STORES_ISSUE_MESSAGE_JSP;
			
				map.put("messageTOBeVisibleToTheUser",
						messageTOBeVisibleToTheUser);
				int issueId=0;
				if (map.get("issueId") != null)
					issueId = Integer.parseInt("" + map.get("issueId"));
		jsp+= ".jsp" ;
		String title = "Invoice";
		map.put("issueId", issueId);
		map.put("deptId", deptId);
		map.put("msg", msg);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("url", "/hms/hms/stores?method=showIssueDispensaryJspForWard");
		return new ModelAndView("index", "map", map);
	}
    
    public ModelAndView submitIssueForIndentForRC(HttpServletRequest request,HttpServletResponse response)
    {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String,Object> dataMap = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		int hospitalId = (Integer)session.getAttribute(HOSPITAL_ID);
		int deptId = (Integer)session.getAttribute("deptId");
		int empId = (Integer)session.getAttribute("empId");
		int indentDtId =0;
		boolean b = false;
		String issuedBatchIdAndQty="";
		Set set = new  HashSet();
		List<StoreIssueT> childList=new ArrayList<StoreIssueT>();


		Map<String, Object> utilMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		utilMap = (Map<String, Object>)HMSUtil.getCurrentDateAndTime();
		String date = (String)utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");

		BigDecimal totalAmtAllItemsWithoutTax = new BigDecimal(0);
		BigDecimal totalSalesTaxAllItems = new BigDecimal(0);
		BigDecimal totalAmtAllItemsIncludingTax = new BigDecimal(0);
		BigDecimal totalPayableAmtAllItemsIncludingTax = new BigDecimal(0);
		BigDecimal amtInRs = new BigDecimal(0);
		BigDecimal roundAmtPs = new BigDecimal(0);
		BigDecimal zero = new BigDecimal("0");

		String[] array1 = request.getParameterValues("tt8");
		String[] totalQuantityIssued = request.getParameterValues("tt6");
		String[] totalQuantityRequested = request.getParameterValues(RequestConstants.QTY_IN_REQUEST);
		//String[] storeIndentTIdArray = request.getParameterValues("storeIndentTId");
		/* if (request.getParameter("indentDtId") != null) {
			 indentDtId= Integer.parseInt(request.getParameter("indentDtId").trim());
			 utilMap.put("indentDtId", indentDtId);
		 }
*/
		int indentInternalId=0;
		if(request.getParameter(REQUEST_NO) !=null && !request.getParameter(REQUEST_NO).equals("0")){
		indentInternalId=Integer.parseInt(request.getParameter(REQUEST_NO));
		}
		 StoreIssueM issueM = new StoreIssueM();
		 issueM.setIssueType("i");
		 /*issueM.setIssueNo(request.getParameter(ISSUE_NO));*/
		 
		 issueM.setIssueDate(HMSUtil.convertStringTypeDateToDateType(request.getParameter(ISSUE_DATE)));

		 MasDepartment department = new MasDepartment();
		 department.setId(deptId);
		 issueM.setDepartment(department);

		 MasDepartment department2 = new MasDepartment();
		 department2.setId(Integer.parseInt(request.getParameter("departmentId")));
		 issueM.setToStore(department2);

		// System.out.println("====>"+request.getParameter(REQUEST_NO));
		 RcRequestHeader requestHeader = new RcRequestHeader();
		// internalIndentM.setId(15);
		 requestHeader.setId(Integer.parseInt(request.getParameter(REQUEST_NO)));
		 issueM.setRequestHeader(requestHeader);

		 issueM.setRequestDate(HMSUtil.convertStringTypeDateToDateType(request.getParameter(REQUEST_DATE)));

		 MasEmployee employee = new MasEmployee();
		 employee.setId(Integer.parseInt(request.getParameter(REQUEST_BY)));
		 issueM.setRequestBy(employee);

		if(request.getParameter(APPROVED_BY)!=null){
			MasEmployee employee2 = new MasEmployee();
		 employee2.setId(Integer.parseInt(request.getParameter(APPROVED_BY)));
		 issueM.setApprovedBy(employee2);
		}

		 MasEmployee employee3 = new MasEmployee();
		 employee3.setId(empId);
		 issueM.setIssuedBy(employee3);
		 issueM.setStatus("p");

		 MasHospital hospital = new MasHospital();
		 hospital.setId(hospitalId);
		 issueM.setHospital(hospital);

		 issueM.setDocNo(request.getParameter(REQUEST_NO));
		 issueM.setLastChgBy(userName);
		 issueM.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(date));
		 issueM.setLastChgTime(time);
		 
		 utilMap.put("indentInternalId",indentInternalId);
		 utilMap.put("issueM", issueM);
			List issQtyList = new ArrayList();
			List amountList = new ArrayList();
			List pvmsList = new ArrayList();
			List batchNumberList = new ArrayList();
			List brandNameList = new ArrayList();
			List expiryDateList = new ArrayList();
			List reqQtyList = new ArrayList();
			//List costPriceList = new ArrayList();
			List<Integer> itemIdList = new ArrayList<Integer>();
			int counter = Integer.parseInt(request.getParameter("counter"));
			for (int i = 1; i <=counter; i++)
			{	
				String qtyIssued = request.getParameter("qtyIssued"+i);
				if(qtyIssued!=""){
				int itemId = Integer.parseInt(request.getParameter("itemId"+i));
				itemIdList.add(itemId);
				issQtyList.add(request.getParameter("qtyIssued" + i));
				// pvmsList.add(itemId);
				batchNumberList.add(request.getParameter("batchNo" + i));
			   	brandNameList.add(request.getParameter("brandId" + i));
				expiryDateList.add(request.getParameter("expiryDate" + i));
				reqQtyList.add(request.getParameter(QTY_IN_REQUEST + i));
				StoreIssueT child = new StoreIssueT();
		    	child.setBatchNo(request.getParameter("batchNo" + i));
		    	try
		    	{
		    	child.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(request.getParameter("expiryDate" + i)));
		    	}catch (Exception e) {


				}

		    	if(request.getParameter("qtyIssued" + i) != null && !request.getParameter("qtyIssued" + i).equals("")){
		    	child.setQtyIssued(new BigDecimal(request.getParameter("qtyIssued" + i)));
		    	}else{
		    		child.setQtyIssued(null);
		    	}
		    	if(request.getParameter(QTY_IN_REQUEST  + i) != null && !request.getParameter(QTY_IN_REQUEST  + i).equals("")){
		    	child.setQtyRequest(new BigDecimal(request.getParameter(QTY_IN_REQUEST + i)));
		    	}else{
		    		child.setQtyRequest(null);
		    	}
		    	if(request.getParameter("batchId" + i) != null && !request.getParameter("batchId" + i).equals("")){
		    	StoreItemBatchStock batchStock = new StoreItemBatchStock();
		    	batchStock.setId(Integer.parseInt(request.getParameter("batchId" + i)));
		    	child.setBatchStock(batchStock);
		    	}else{
		    		child.setBatchStock(null);
		    	}
		        try {
		        	if(request.getParameter("brandId" + i) != null && !request.getParameter("brandId" + i).equals("")){
					MasStoreBrand masBrand = new MasStoreBrand();
					masBrand.setId(Integer.parseInt(request.getParameter("brandId" + i)));
					child.setBrand(masBrand);
		        	}else{child.setBrand(null);}

				} catch (Exception e) {
					// TODO Auto-generated catch block
					child.setBrand(null);
					e.printStackTrace();
				}

		    	//child.setIssueM(issueM);


		    	MasStoreItem masStoreItem = new MasStoreItem();
		    	masStoreItem.setId(itemId);
		    	
		    	child.setItem(masStoreItem);
		    	child.setItemIssued(masStoreItem);

		   	    child.setCostPrice(new BigDecimal(0.0));
//		    	    child.setRemarks(request.getParameter(RequestConstants.REMARKS_TEMP));
		    	child.setSrNo(Integer.parseInt(request.getParameter("SRNo")));
		    	child.setIssued("y");
		    	//child.setSalesTaxAmt(new BigDecimal(salesTax));
		    	//child.setAmtIncludingSalesTax(new BigDecimal(amtIncludingSalesTax));
//		    	    set.add(child);
		    	childList.add(child);
				}
			}



			// javed khan----this code for loanout QTY

			List<StoreIssueT> childList1=new ArrayList<StoreIssueT>();

			List issQtyListL = new ArrayList();
			List amountListL = new ArrayList();
			List pvmsListL = new ArrayList();
			List batchNumberListL = new ArrayList();
			List brandNameListL = new ArrayList();
			List expiryDateListL = new ArrayList();
			List reqQtyListL = new ArrayList();
			List issueMListL = new ArrayList();
			//List costPriceList = new ArrayList();
			List<Integer> itemIdListL = new ArrayList<Integer>();
			int counterL = Integer.parseInt(request.getParameter("counterL"));
			for (int j = 1; j <=counterL; j++)
			{
				int itemIdL = Integer.parseInt(request.getParameter("itemIdL"+j));
				itemIdListL.add(itemIdL);
				issQtyListL.add(request.getParameter("qtyIssuedL" + j));
				// pvmsList.add(itemId);
				batchNumberListL.add(request.getParameter("batchNoL" + j));
			   	brandNameListL.add(request.getParameter("brandIdL" + j));
				expiryDateListL.add(request.getParameter("expiryDateL" + j));
				reqQtyListL.add(request.getParameter("qtyIssuedL" + j));
				issueMListL.add(request.getParameter("ISSUE_M_L" + j));
				StoreIssueT child1 = new StoreIssueT();
		    	child1.setBatchNo(request.getParameter("batchNoL" + j));
		    	try
		    	{
		    	child1.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(request.getParameter("expiryDateL" + j)));
		    	}catch (Exception e) {


				}

		    	if(request.getParameter("qtyIssuedL" + j) != null && !request.getParameter("qtyIssuedL" + j).equals("")){
		    	child1.setQtyIssued(new BigDecimal(request.getParameter("qtyIssuedL" + j)));
		    	}else{
		    		child1.setQtyIssued(null);
		    	}
		    	if(request.getParameter("qtyIssuedL" + j) != null && !request.getParameter("qtyIssuedL" + j).equals("")){
		    		// comment by javed khan
		    	//child1.setQtyRequest(new BigDecimal(request.getParameter("qtyIssuedL" + j)));
		    		child1.setQtyRequest(new BigDecimal(0));
		    	}else{
		    		child1.setQtyRequest(null);
		    	}
		    	if(request.getParameter("batchIdL" + j) != null && !request.getParameter("batchIdL" + j).equals("")){
		    	StoreItemBatchStock batchStock = new StoreItemBatchStock();
		    	batchStock.setId(Integer.parseInt(request.getParameter("batchIdL" + j)));
		    	child1.setBatchStock(batchStock);
		    	}else{
		    		child1.setBatchStock(null);
		    	}
		        try {
		        	if(request.getParameter("brandIdL" + j) != null && !request.getParameter("brandIdL" + j).equals("")){
					MasStoreBrand masBrand = new MasStoreBrand();
					masBrand.setId(Integer.parseInt(request.getParameter("brandIdL" + j)));
					child1.setBrand(masBrand);
		        	}else{child1.setBrand(null);}

				} catch (Exception e) {
					// TODO Auto-generated catch block
					child1.setBrand(null);
					e.printStackTrace();
				}

		    	//child.setIssueM(issueM);


		    	MasStoreItem masStoreItem = new MasStoreItem();
		    	masStoreItem.setId(itemIdL);
		    	child1.setItem(masStoreItem);
		    	child1.setItemIssued(masStoreItem);

		   	    child1.setCostPrice(new BigDecimal(0.0));
//		    	    child.setRemarks(request.getParameter(RequestConstants.REMARKS_TEMP));
		    	child1.setSrNo(Integer.parseInt(request.getParameter("SRNo")));
		    	child1.setIssued("y");
		    	child1.setCivLoan("Loan");

		    	childList1.add(child1);
			}
			utilMap.put("childList1",childList1);
			utilMap.put("issueMListL",issueMListL);

			// end code for Loanout Qty


			utilMap.put("itemIdList", itemIdList);
			utilMap.put("issQtyList", issQtyList);
			utilMap.put("batchNumberList", batchNumberList);
			utilMap.put("expiryDateList", expiryDateList);
			utilMap.put("brandNameList", brandNameList);
			utilMap.put("reqQtyList", reqQtyList);
			utilMap.put("deptId", deptId);
			utilMap.put("childList",childList);
			utilMap.put("hospitalId", hospitalId); // add by javed khan

		map = storesHandlerService.insertIssueForIndentwithoutbarcodeForRC(utilMap, box);
		String msg = "";
		if(map.get("b")!=null)
		{
			b = (Boolean)map.get("b");
		}
		if(b){
			msg = "RC Has Been Issued Successfully.";
		}else{
			msg = "Try Again!";
		}
		/*map = storesHandlerService.showIssueDispensaryJsp(dataMap);
		jsp = RequestConstants.ISSUED_TO_DISPENSARY_JSP;*/
		String jsp = STORES_ISSUE_MESSAGE_JSP;
			String messageTOBeVisibleToTheUser = "Issued Successfully  ! Do you want to print?";
				map.put("messageTOBeVisibleToTheUser",
						messageTOBeVisibleToTheUser);
				int issueId=0;
				if (map.get("issueId") != null)
					issueId = Integer.parseInt("" + map.get("issueId"));
		jsp+= ".jsp" ;
		String title = "Invoice";
		map.put("issueId", issueId);
		map.put("deptId", deptId);
		map.put("url", "/hms/hms/stores?method=showIssueDispensaryJspForRC");
		map.put("msg", msg);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("issueType", "RC");
		return new ModelAndView("index", "map", map);
	}

    public ModelAndView submitIssueForIndentwithoutbar(HttpServletRequest request,HttpServletResponse response)
    {
    	Map<String, Object> map = new HashMap<String, Object>();
    	Map<String,Object> dataMap = new HashMap<String, Object>();
    	HttpSession session = request.getSession();
    	int hospitalId = (Integer)session.getAttribute(HOSPITAL_ID);
    	int deptId = (Integer)session.getAttribute("deptId");
    	int indentDtId =0;
    	boolean b = false;
    	String issuedBatchIdAndQty="";
    	Set set = new  HashSet();
    	List<StoreIssueT> childList=new ArrayList<StoreIssueT>();

    	Map<String, Object> utilMap = new HashMap<String, Object>();
    	Box box = HMSUtil.getBox(request);
    	utilMap = (Map<String, Object>)HMSUtil.getCurrentDateAndTime();
    	String date = (String)utilMap.get("currentDate");
    	String time = (String) utilMap.get("currentTime");

    	BigDecimal totalAmtAllItemsWithoutTax = new BigDecimal(0);
    	BigDecimal totalSalesTaxAllItems = new BigDecimal(0);
    	BigDecimal totalAmtAllItemsIncludingTax = new BigDecimal(0);
    	BigDecimal totalPayableAmtAllItemsIncludingTax = new BigDecimal(0);
    	BigDecimal amtInRs = new BigDecimal(0);
    	BigDecimal roundAmtPs = new BigDecimal(0);
    	BigDecimal zero = new BigDecimal("0");

    	String[] array1 = request.getParameterValues("tt8");

    	String[] totalQuantityIssued = request.getParameterValues("tt6");
    	String[] totalQuantityRequested = request.getParameterValues(RequestConstants.QTY_IN_REQUEST);
    	//String[] storeIndentTIdArray = request.getParameterValues("storeIndentTId");
    	/* if (request.getParameter("indentDtId") != null) {
    	indentDtId= Integer.parseInt(request.getParameter("indentDtId").trim());
    	utilMap.put("indentDtId", indentDtId);
    	}
    	*/
    	StoreIssueM issueM = new StoreIssueM();
    	issueM.setIssueType("i");
    	issueM.setIssueNo(request.getParameter(ISSUE_NO));
    	issueM.setIssueDate(HMSUtil.convertStringTypeDateToDateType(request.getParameter(ISSUE_DATE)));

    	MasDepartment department = new MasDepartment();
    	department.setId(deptId);
    	issueM.setDepartment(department);

    	MasDepartment department2 = new MasDepartment();
    	department2.setId(Integer.parseInt(request.getParameter(DEPARTMENT_ID_TEMP)));
    	issueM.setToStore(department2);

    	StoreInternalIndentM internalIndentM = new StoreInternalIndentM();
    	internalIndentM.setId(Integer.parseInt(request.getParameter(REQUEST_NO)));
    	issueM.setRequestNo(internalIndentM);
    	try{
    	//issueM.setRequestDate(HMSUtil.dateFormatterddmmyy((String)request.getParameter(REQUEST_DATE)));
    		issueM.setRequestDate(HMSUtil.convertStringTypeDateToDateType((String)request.getParameter(REQUEST_DATE)));
    	}catch(Exception e){
    		issueM.setRequestDate(null);
    	}
    	MasEmployee employee = new MasEmployee();
    	employee.setId(Integer.parseInt(request.getParameter(REQUEST_BY)));
    	issueM.setRequestBy(employee);

    /*	MasEmployee employee2 = new MasEmployee();
    	employee2.setId(Integer.parseInt(request.getParameter(APPROVED_BY)));
    	issueM.setApprovedBy(employee2);*/

    	MasEmployee employee3 = new MasEmployee();
    	employee3.setId(Integer.parseInt(request.getParameter(ISSUED_BY)));
    	issueM.setIssuedBy(employee3);
    	issueM.setStatus("o");

    	MasHospital hospital = new MasHospital();
    	hospital.setId(hospitalId);
    	issueM.setHospital(hospital);

    	issueM.setDocNo(request.getParameter(REQUEST_NO));
    	issueM.setLastChgBy(userName);
    	issueM.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(date));
    	issueM.setLastChgTime(time);
    	utilMap.put("issueM", issueM);
    	int k=1;
    	int  totalQtyIssued = 0;
    	for(int i=0;i<array1.length;i++) {
    	int issuedQty=0;
    	int batchId=0;
    	int brandId=0;
    	BigDecimal totalQtyRequest=null;
    	if(!array1[i].trim().equals("blank")) {
    	if(!totalQuantityIssued[i].equals("")){
    	totalQtyIssued =Integer.parseInt(totalQuantityIssued[i]);
    	}
    	if(!totalQuantityRequested[i].equals(""))
    	{
    	totalQtyRequest=new BigDecimal(totalQuantityRequested[i]);
    	}
    	if (request.getParameter(RequestConstants.QTY_ISSUED+k) != null && !request.getParameter(RequestConstants.QTY_ISSUED+k).equals("")) {
    	issuedQty= Integer.parseInt(request.getParameter(RequestConstants.QTY_ISSUED+k).trim());
    	}
    	Integer storeIndentTId = 0;

    	String item[]=request.getParameterValues(RequestConstants.ITEM_ID);
    	String brand[]=request.getParameterValues("brandId");
    	String []subArray1 = array1[i].split(",");
    	MasStoreItem masStoreItem = new MasStoreItem();
    	masStoreItem.setId(Integer.parseInt(item[i]));
    	MasStoreItem isstedItem = new MasStoreItem();
    	isstedItem.setId(Integer.parseInt(item[i]));
    	if (request.getParameter(RequestConstants.BATCH_ID+i) != null && !request.getParameter(RequestConstants.BATCH_ID+i).equals("")) {
    	batchId= Integer.parseInt(request.getParameter(RequestConstants.BATCH_ID+i).trim());
    	}
    	/*if (request.getParameter(RequestConstants.BRAND_ID+i) != null) {
    	brandId= Integer.parseInt(request.getParameter(RequestConstants.BRAND_ID+i).trim());
    	}*/

    	
    	
    	issuedBatchIdAndQty=issuedBatchIdAndQty+"#"+batchId+"/"+issuedQty;
    	for(int j=0;j<subArray1.length;j++) {
    	String subArray2[] = subArray1[j].split("@");
    	String qty = subArray2[0].trim();
    	String batch = subArray2[1].trim();
    	String expiryDate=subArray2[2].trim();


    	int batchStockId = Integer.parseInt(subArray2[3].trim());
    	String cost=subArray2[4].trim();


    	StoreIssueT child = new StoreIssueT();
    	child.setBatchNo(batch);
    	child.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expiryDate));
    	child.setQtyIssued(new BigDecimal(qty));
    	child.setQtyRequest(totalQtyRequest);
    	StoreItemBatchStock batchStock = new StoreItemBatchStock();
    	batchStock.setId(batchStockId);
    	child.setBatchStock(batchStock);
    	
    	// comment for some time enable after some time
    	/*if(brand[i] != "")
    	{
    		brandId=Integer.parseInt(brand[i]);
    		MasStoreBrand masBrand = new MasStoreBrand();
        	masBrand.setId(brandId);
        	child.setBrand(masBrand);
    	}
        
*/
    	//child.setIssueM(issueM);
    	child.setItem(masStoreItem);
    	child.setItemIssued(isstedItem);
    	if(cost == null && !cost.equals("")){
   	    child.setCostPrice(new BigDecimal(cost));
    	}
//    	    child.setRemarks(request.getParameter(RequestConstants.REMARKS_TEMP));
    	child.setSrNo(Integer.parseInt(request.getParameter("SRNo")));
    	child.setIssued("y");
    	//child.setSalesTaxAmt(new BigDecimal(salesTax));
    	//child.setAmtIncludingSalesTax(new BigDecimal(amtIncludingSalesTax));
//    	    set.add(child);
    	childList.add(child);
    	}
    	}
    	totalQtyIssued = totalQtyIssued+issuedQty;


    	k = k+1;
    	}

    	utilMap.put("issuedBatchIdAndQty", issuedBatchIdAndQty);
    	utilMap.put("totalQtyIssued", totalQtyIssued);
    	utilMap.put("deptId", deptId);
    	utilMap.put("childList", childList);
    	utilMap.put("hospitalId", hospitalId);  // add by javed khan
//    	    issueM.setStoreIssueTs(set);

    	map = storesHandlerService.insertIssueForIndentwithoutbarcode(utilMap, box);
    	String msg = "";
    	if(map.get("b")!=null)
    	{
    	b = (Boolean)map.get("b");
    	}
    	if(b){
    	msg = "Indent Has Been Issued Successfully.";
    	}else{
    	msg = "Indent Has Not Been Issued Successfully.";
    	}
    	/*map = storesHandlerService.showIssueDispensaryJsp(dataMap);
    	jsp = RequestConstants.ISSUED_TO_DISPENSARY_JSP;*/
    	String jsp = STORES_ISSUE_MESSAGE_JSP;
    	String messageTOBeVisibleToTheUser = "Issued Successfully and Do you want to Print Report";
    	map.put("messageTOBeVisibleToTheUser",
    	messageTOBeVisibleToTheUser);
    	int issueId=0;
    	if (map.get("issueId") != null)
    	issueId = Integer.parseInt("" + map.get("issueId"));
    	jsp+= ".jsp" ;
    	String title = "Invoice";
    	map.put("url", "stores?method=showIssueDispWithoutBarCodeJsp");
    	map.put("issueId", issueId);
    	map.put("msg", msg);
    	map.put("contentJsp", jsp);
    	map.put("title", title);
    	return new ModelAndView("index", "map", map);
    	}


    public ModelAndView submitIssueToOtherUnit (HttpServletRequest request,HttpServletResponse response)
    {
    	Map<String, Object> map = new HashMap<String, Object>();
    	Map<String,Object> dataMap = new HashMap<String, Object>();
    	HttpSession session = request.getSession();
    	int hospitalId = (Integer)session.getAttribute(HOSPITAL_ID);
    	int deptId = (Integer)session.getAttribute("deptId");
    	int indentDtId =0;
    	boolean b = false;
    	String issuedBatchIdAndQty="";
    	Set set = new  HashSet();
    	List<StoreIssueT> childList=new ArrayList<StoreIssueT>();

    	Map<String, Object> utilMap = new HashMap<String, Object>();
    	Box box = HMSUtil.getBox(request);
    	utilMap = (Map<String, Object>)HMSUtil.getCurrentDateAndTime();
    	String date = (String)utilMap.get("currentDate");
    	String time = (String) utilMap.get("currentTime");

    	BigDecimal totalAmtAllItemsWithoutTax = new BigDecimal(0);
    	BigDecimal totalSalesTaxAllItems = new BigDecimal(0);
    	BigDecimal totalAmtAllItemsIncludingTax = new BigDecimal(0);
    	BigDecimal totalPayableAmtAllItemsIncludingTax = new BigDecimal(0);
    	BigDecimal amtInRs = new BigDecimal(0);
    	BigDecimal roundAmtPs = new BigDecimal(0);
    	BigDecimal zero = new BigDecimal("0");

    	String[] array1 = request.getParameterValues("tt8");
    	String[] totalQuantityIssued = request.getParameterValues("tt6");
    	String[] totalQuantityRequested = request.getParameterValues(RequestConstants.QTY_IN_REQUEST);
    	//String[] storeIndentTIdArray = request.getParameterValues("storeIndentTId");
    	/* if (request.getParameter("indentDtId") != null) {
    	indentDtId= Integer.parseInt(request.getParameter("indentDtId").trim());
    	utilMap.put("indentDtId", indentDtId);
    	}
    	*/
    	int counter = Integer.parseInt(request.getParameter("counter"));
    	StoreIssueM issueM = new StoreIssueM();
    	issueM.setIssueType("o");
    	issueM.setIssueNo(request.getParameter(ISSUE_NO));
    	issueM.setIssueDate(HMSUtil.convertStringTypeDateToDateType(request.getParameter(ISSUE_DATE)));
    	issueM.setDeclaredVide(request.getParameter(DECLARED_VIDE));
    	issueM.setAuthorityForIssue(request.getParameter(AUTHORITY_FOR_ISSUE));
    	issueM.setConsineesDemandNo(request.getParameter(COSIGNEESDEMANDNO));
    	issueM.setRemarks(request.getParameter(REMARKS));
    	MasDepartment department = new MasDepartment();
    	department.setId(deptId);
    	issueM.setDepartment(department);

    	// commented by Vinay
    	/*MasStoreAirForceDepot department2 = new MasStoreAirForceDepot();
    	department2.setId(Integer.parseInt(request.getParameter(DEPARTMENT_ID_TEMP)));
    	issueM.setToUnit(department2);*/
    	
    	// Issue to other smc/Hospital
    	MasHospital smc = new MasHospital();
    	smc.setId(Integer.parseInt(request.getParameter(DEPARTMENT_ID_TEMP)));
    	issueM.setToHospital(smc);



    	//StoreInternalIndentM internalIndentM = new StoreInternalIndentM();
    	//internalIndentM.setId(Integer.parseInt(request.getParameter(REQUEST_NO)));
    	//issueM.setRequestNo(internalIndentM);

    	issueM.setRequestDate(HMSUtil.convertStringTypeDateToDateType(request.getParameter(REQUEST_DATE)));

    	//MasEmployee employee = new MasEmployee();
    	//employee.setId(Integer.parseInt(request.getParameter(REQUEST_BY)));
    	//issueM.setRequestBy(employee);



    	//employee2.setId(Integer.parseInt(request.getParameter(APPROVED_BY)));
    	//issueM.setApprovedBy(employee2);

    	MasEmployee employee3 = new MasEmployee();
    	employee3.setId(Integer.parseInt(request.getParameter(ISSUED_BY)));
    	issueM.setIssuedBy(employee3);
    	issueM.setStatus("o");

    	MasHospital hospital = new MasHospital();
    	hospital.setId(hospitalId);
    	issueM.setHospital(hospital);


    	//issueM.setDocNo(request.getParameter(DOC_NO));
    	issueM.setLastChgBy(userName);
    	issueM.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(date));
    	issueM.setLastChgTime(time);

    	utilMap.put("issueM", issueM);
    	int k=1;
    	int  totalQtyIssued = 0;
    	counter =0;
    	if(request.getParameter("counter") != null)
    	{
    		counter = Integer.parseInt(request.getParameter("counter"));
    	}
    	
    	for(int i=0;i<counter;i++) {
    	
    	
    	int brandId=0;
    	BigDecimal totalQtyRequest=null;    	
    	
    /*	
    	if (request.getParameter(RequestConstants.QTY_ISSUED+k) != null && !request.getParameter(RequestConstants.QTY_ISSUED+k).equals("")) {
    	issuedQty= Integer.parseInt(request.getParameter(RequestConstants.QTY_ISSUED+k).trim());
    	}
    	*/
    	Integer storeIndentTId = 0;
    	String item[]=request.getParameterValues(RequestConstants.ITEM_ID);
    	String brand[]=request.getParameterValues(RequestConstants.BRAND_ID);
    	String batchId[]=request.getParameterValues(RequestConstants.BATCH_ID);
    	String SRNo[]=request.getParameterValues("SRNo");
    	
    	
    	StoreIssueT child = new StoreIssueT();
    	
    	
    	MasStoreItem masStoreItem = new MasStoreItem();
    	masStoreItem.setId(Integer.parseInt(item[i]));
    	child.setItem(masStoreItem);    	
    	
    	child.setItemIssued(masStoreItem);
    	
    	String batchNo="";
    	if (request.getParameter("lotNo"+k) != null) 
    	{
    		batchNo= request.getParameter("lotNo"+k);
    		child.setBatchNo(batchNo);
        }
    	
    	
    	/* if (request.getParameter(RequestConstants.BRAND_ID+i) != null) {
    	brandId= Integer.parseInt(request.getParameter(RequestConstants.BRAND_ID+i).trim());
    	}*/
    	
    	
    	String expiryDate="";
    	if (request.getParameter("expiryDate"+k) != null) 
    	{
    		expiryDate= request.getParameter("expiryDate"+k);
    		child.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expiryDate));
        }
    	
    	String issuedQty="0";
    	int nIssuedQty=0;
    	if (request.getParameter("qtyIssued"+k) != null) 
    	{
    		issuedQty=request.getParameter("qtyIssued"+k);
    		nIssuedQty = Integer.parseInt(issuedQty);
    		child.setQtyIssued(new BigDecimal(issuedQty));
    		child.setQtyRequest(new BigDecimal(issuedQty));
        }
    	    
    	
    	int batchStockId = Integer.parseInt(batchId[i]);
    	StoreItemBatchStock batchStock = new StoreItemBatchStock();
    	batchStock.setId(batchStockId);
    	child.setBatchStock(batchStock);

    	
    	//child.setCostPrice(new BigDecimal(costPrice));

    	
    	/*MasStoreBrand masBrand = new MasStoreBrand();
    	masBrand.setId(brandId);
    	child.setBrand(masBrand);*/

  
    	
    	

    	child.setSrNo(Integer.parseInt(SRNo[i]));
    	child.setIssued("y");
   
    	childList.add(child);
    	
    	
    	totalQtyIssued = totalQtyIssued+nIssuedQty;


    	k = k+1;
    	}
    	utilMap.put("issuedBatchIdAndQty", issuedBatchIdAndQty);
    	utilMap.put("totalQtyIssued", totalQtyIssued);
    	utilMap.put("deptId", deptId);
    	utilMap.put("childList", childList);
    	utilMap.put("issueNo", request.getParameter(ISSUE_NO));
    	utilMap.put("hospitalId", hospitalId); // add by javed khan
//    	    issueM.setStoreIssueTs(set);
    	map = storesHandlerService.insertIssueForOtherUnits(utilMap, box);
    	String msg = "";
    	if(map.get("b")!=null)
    	{
    	b = (Boolean)map.get("b");
    	}
    	if(b){
    	msg = "Indent Has Been Issued Successfully.";
    	}else{
    	msg = "Indent Has Not Been Issued Successfully.";
    	}
    	/*map = storesHandlerService.showIssueDispensaryJsp(dataMap);
    	jsp = RequestConstants.ISSUED_TO_DISPENSARY_JSP;*/
    	String messageTOBeVisibleToTheUser="";
    	String
    	jsp = STORES_ISSUE_MESSAGE_JSP;
    	if(b){
    	 messageTOBeVisibleToTheUser = "Issued Successfully .";
    	}
    	else
    	{
    		 messageTOBeVisibleToTheUser = "Some Problem Occured .";
    	}
    	map.put("messageTOBeVisibleToTheUser",
    	messageTOBeVisibleToTheUser);
    	int issueId=0;
    	if (map.get("issueId") != null)
    	issueId = Integer.parseInt("" + map.get("issueId"));
    	jsp+= ".jsp";
    	url="stores?method=showIssueToOtherUnitsJsp";
    	map.put("issueId", issueId);
    	map.put("issueType","otherUnit");
    	map.put("url", url);
    	map.put("msg", msg);
    	map.put("contentJsp", jsp);
    	map.put("title", title);
    	return new ModelAndView("index", "map", map);

    }
    public ModelAndView showIssueDispWithoutBarCodeJsp(HttpServletRequest request,HttpServletResponse response) {
        // --- Retriving User Name,Hospital Id,Department Id from Session-----
        String userName = "";
        int deptId = 0;
        int hospitalId = 0;
        HttpSession session = request.getSession();
        if (session.getAttribute("userName") != null)
            userName = (String) session.getAttribute("userName");
        if (session.getAttribute("hospitalId") != null)
            hospitalId = Integer.parseInt(""
                    + session.getAttribute("hospitalId"));
        if (session.getAttribute("deptId") != null)
            deptId = Integer.parseInt("" + session.getAttribute("deptId"));
        // --------------------------------------------------------------------------------
        Map map = new HashMap();
        Map<String, Object> dataMap = new HashMap<String, Object>();
        dataMap.put("deptId", deptId);
        dataMap.put("hospitalId", hospitalId);
        dataMap.put("userName", userName);
        map = storesHandlerService.showIssueDispensaryJsp(dataMap);
        String jsp = ISSUE_TO_DISP_BAR_JSP;
        jsp = jsp + ".jsp";
        map.put("contentJsp", jsp);
        return new ModelAndView("indexB", "map", map);
    }
  //--- DEFECTIVE DRUGS ENTRY---------------------------
	public ModelAndView showDefectiveDrugJsp(HttpServletRequest request,HttpServletResponse response) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();

		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("deptId", deptId);

		map = storesHandlerService.showDefectiveDrugJsp(dataMap);
		jsp = DEFECTIVE_DRUGS_JSP;
		jsp = jsp + ".jsp";
		title = "Defective Drugs Entry";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView getItemListForDefectiveDrugsByAutocomplete(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		String autoHint = "";
		String itemNameField = "";
		int hospitalId = 0;
		int deptId = 0;
		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		if (request.getParameter("requiredField") != null) {
			itemNameField = (request.getParameter("requiredField"));
		}
		if (request.getParameter(itemNameField) != null) {
			autoHint = (request.getParameter(itemNameField));
		}

		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		dataMap.put("autoHint", autoHint);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		// dataMap.put("box", box);
		map = storesHandlerService
				.getItemListForDefectiveDrugsByAutocomplete(dataMap);
		jsp = "result";
		return new ModelAndView(jsp, "map", map);
	}

	public void getExpiryDateInAjax(HttpServletRequest request,
			HttpServletResponse response) throws ParseException {

		
		HttpSession session = request.getSession();
		int deptId = 0;
		int batchId = 0;
		int batchNo = 0;
		int hospitalId = 0;
		Date expirydate = new Date();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (session.getAttribute("hospitalId") != null){
			hospitalId = (Integer)(session.getAttribute("hospitalId"));
		}
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (request.getParameter(BATCH_ID) != null) {
			batchNo =Integer.parseInt(request.getParameter(BATCH_ID));
		}
		int itemId = 0;
		if(request.getParameter("itemId") != null){
			itemId = Integer.parseInt(request.getParameter("itemId"));
		}
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("itemId", itemId);
		dataMap.put("deptId", deptId);
		dataMap.put("batchNo", batchNo);
		String date4MySQL1 = "";
		String date4MySQL2="";
		String brandName = "";
		int brandId = 0;
		int manufactureId = 0;
		String manufactureName = "";
		String source = "";
		BigDecimal closingStock=new BigDecimal(0.0);
		try {
			map = storesHandlerService.getExpiryDateInAjax(dataMap);
			SimpleDateFormat formatterIn = new SimpleDateFormat("yyyy-MM-dd");
			SimpleDateFormat formatterOut = new SimpleDateFormat("dd/MM/yyyy");
			
			if(map.get("expiryDate") !=null){
			date4MySQL1 = HMSUtil.convertDateToStringWithoutTime((Date)map.get("expiryDate"));
			
			}
			if(map.get("manufacturingDate") !=null){
				date4MySQL2 = formatterOut.format(formatterIn.parse(""+ map.get("manufacturingDate")));
			}
			if(map.get("brandName") !=null){
				brandName =(String)map.get("brandName");
			}
			if(map.get("manufactureName") !=null){
				manufactureName =(String)map.get("manufactureName");
			}
			if(map.get("brandId") !=null){
				brandId =(Integer)map.get("brandId");
			}
			if(map.get("manufactureId") !=null){
				manufactureId =(Integer)map.get("manufactureId");
			}
			if(map.get("source") != null){
				source = (String)map.get("source");
			}
			if(map.get("closingStock") != null){
				closingStock = (BigDecimal)map.get("closingStock");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		int mId = 1;
		if (map.get("mId") != null) {
			mId = Integer.parseInt(("" + map.get("mId")));
		}
		StringBuffer sb = new StringBuffer();
		try {
			sb.append("<item>");
			sb.append("<expiryDate>" + date4MySQL1 + "</expiryDate>");
			sb.append("<manufacturingDate>" + date4MySQL2 + "</manufacturingDate>");
			sb.append("<mId>" + mId + "</mId>");
			sb.append("<closingStock>" + closingStock + "</closingStock>");
			if(brandId != 0){
				sb.append("<brandId>" + brandId + "</brandId>");
			}else{
			sb.append("<brandId>" + "" + "</brandId>");
			}
			if(manufactureId != 0){
				sb.append("<manufactureId>" + manufactureId + "</manufactureId>");
			}else{
			sb.append("<manufactureId>" + "" + "</manufactureId>");
			}
			
			if(brandName != null){
			sb.append("<brandName>" + brandName + "</brandName>");
			}else{
			sb.append("<brandName>" + "" + "</brandName>");
			}
			if(manufactureName != null){
			sb.append("<manufactureName>" + manufactureName + "</manufactureName>");
			}else{
			sb.append("<manufactureName>" + "" + "</manufactureName>");	
			}
			if(source != null){
			 sb.append("<source>" + source + "</source>");	
			}else{
			 sb.append("<source>" + "" + "</source>");	
			}
			if( map.get("BG").equals("B") ){
				
				sb.append("<BG>"
						+ map.get("BG").toString() + "</BG>");
				}else{
					
					sb.append("<BG>G</BG>");
				}
			sb.append("</item>");
			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	public void fillItemsForDefectiveDrugs(HttpServletRequest request,
			HttpServletResponse response) {
		// ---- Retriving User Name,Hospital Id,Department Id from Session--

		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		int a_stock=0;
		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<StoreItemBatchStock> batchList = new ArrayList<StoreItemBatchStock>();

		Box box = HMSUtil.getBox(request);
		String itemNameField = "";
		String pvmsNo = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (request.getParameter("pvmsNo") != null) {
			pvmsNo = (request.getParameter("pvmsNo"));
		}
		dataMap.put("pvmsNo", pvmsNo);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.fillItemsForDefectiveDrugs(dataMap);

		if (map.get("itemList") != null) {
			itemList = (List) map.get("itemList");
		}
		if (map.get("brandList") != null) {
			brandList = (List) map.get("brandList");
		}
		if (map.get("batchList") != null) {
			batchList = (List) map.get("batchList");
		}
		//javed
		List<StoreItemBatchStock> batchListForTurnOver= new ArrayList<StoreItemBatchStock>();
		if (map.get("batchListForTurnOver") != null) {
			batchListForTurnOver = (List) map.get("batchListForTurnOver");
		}

		StringBuffer sb = new StringBuffer();
		try {
			for (MasStoreItem masStoreItem : itemList) {
				sb.append("<item>");
				sb.append("<nomen>" + masStoreItem.getNomenclature() + "</nomen>");
				sb.append("<id>" + masStoreItem.getId() + "</id>");
				sb.append("<pvms>" + masStoreItem.getPvmsNo() + "</pvms>");
				sb.append("<au>"
						+ masStoreItem.getItemConversion().getPurchaseUnit()
								.getUnitName() + "</au>");
				try
				{
				sb.append("<manu>"
						+ masStoreItem.getManufacturer().getManufacturerName() + "</manu>");
				}catch(Exception e)
				{
					sb.append("<manu>"+  "</manu>");
				}
				sb.append("<batchs>");
				for (StoreItemBatchStock batch : batchList) {
					sb.append("<batch>");
					try
					{
					sb.append("<batchId>" + batch.getId() + "</batchId>");
					sb.append("<batchName>" + batch.getBatchNo()
							+ "</batchName>");

					}catch(Exception e)
					{
						sb.append("<batchId>" +  "</batchId>");
						sb.append("<batchName>"	+ "</batchName>");
					}
					sb.append("</batch>");
				}
				sb.append("</batchs>");
				sb.append("<brands>");
				for (MasStoreBrand brand : brandList) {
					sb.append("<brand>");

					try
					{
					sb.append("<brandId>" + brand.getId() + "</brandId>");
					sb.append("<brandName>" + brand.getBrandName()
							+ "</brandName>");

					}catch(Exception e)

					{
						sb.append("<brandId>" +  "</brandId>");
						sb.append("<brandName>" +"</brandName>");
					}
					sb.append("</brand>");
				}
				sb.append("</brands>");
				// javed
				sb.append("<BG>");
				for (MasStoreItem masStoreItem1 : itemList) {
					sb.append("<brandG>");
					sb.append("<brandGId>" + masStoreItem1.getBrandedGeneric() + "</brandGId>");
					sb.append("<brandGName>" + masStoreItem1.getBrandedGeneric()
							+ "</brandGName>");
					sb.append("</brandG>");
				}
				sb.append("</BG>");
				// javed
				sb.append("<batchsForTurn>");
				for (StoreItemBatchStock batch : batchListForTurnOver) {
					sb.append("<batchForTurn>");
					sb.append("<batchIdForTurn>" + batch.getId() + "</batchIdForTurn>");
					sb.append("<batchNameForTurn>" + batch.getBatchNo()
							+ "</batchNameForTurn>");
					sb.append("</batchForTurn>");
				}
				sb.append("</batchsForTurn>");

				for (StoreItemBatchStock batch : batchListForTurnOver) {
					a_stock=a_stock+batch.getClosingStock().intValue();
					}
				sb.append("<stock>" + a_stock + "</stock>");

				sb.append("</item>");
			}

			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public void fillItemsForDrugDisposal(HttpServletRequest request,
			HttpServletResponse response) {
		// ---- Retriving User Name,Hospital Id,Department Id from Session--

		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		int a_stock=0;
		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<StoreItemBatchStock> batchList = new ArrayList<StoreItemBatchStock>();

		Box box = HMSUtil.getBox(request);
		String itemNameField = "";
		String pvmsNo = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (request.getParameter("pvmsNo") != null) {
			pvmsNo = (request.getParameter("pvmsNo"));
		}
		dataMap.put("pvmsNo", pvmsNo);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.fillItemsForDrugDisposal(dataMap);

		if (map.get("itemList") != null) {
			itemList = (List) map.get("itemList");
		}
		if (map.get("brandList") != null) {
			brandList = (List) map.get("brandList");
		}
		if (map.get("batchList") != null) {
			batchList = (List) map.get("batchList");
		}
		//javed
		List<StoreItemBatchStock> batchListForTurnOver= new ArrayList<StoreItemBatchStock>();
		if (map.get("batchListForTurnOver") != null) {
			batchListForTurnOver = (List) map.get("batchListForTurnOver");
		}

		StringBuffer sb = new StringBuffer();
		try {
			for (MasStoreItem masStoreItem : itemList) {
				sb.append("<item>");
				sb.append("<nomen>" + masStoreItem.getNomenclature() + "</nomen>");
				sb.append("<id>" + masStoreItem.getId() + "</id>");
				sb.append("<pvms>" + masStoreItem.getPvmsNo() + "</pvms>");
				sb.append("<au>"
						+ masStoreItem.getItemConversion().getPurchaseUnit()
								.getUnitName() + "</au>");
				try
				{
				sb.append("<manu>"
						+ masStoreItem.getManufacturer().getManufacturerName() + "</manu>");
				}catch(Exception e)
				{
					sb.append("<manu>"+  "</manu>");
				}
				sb.append("<batchs>");
				for (StoreItemBatchStock batch : batchList) {
					sb.append("<batch>");
					try
					{
					sb.append("<batchId>" + batch.getId() + "</batchId>");
					sb.append("<batchName>" + batch.getBatchNo()
							+ "</batchName>");

					}catch(Exception e)
					{
						sb.append("<batchId>" +  "</batchId>");
						sb.append("<batchName>"	+ "</batchName>");
					}
					sb.append("</batch>");
				}
				sb.append("</batchs>");
				sb.append("<brands>");
				for (MasStoreBrand brand : brandList) {
					sb.append("<brand>");

					try
					{
					sb.append("<brandId>" + brand.getId() + "</brandId>");
					sb.append("<brandName>" + brand.getBrandName()
							+ "</brandName>");

					}catch(Exception e)

					{
						sb.append("<brandId>" +  "</brandId>");
						sb.append("<brandName>" +"</brandName>");
					}
					sb.append("</brand>");
				}
				sb.append("</brands>");
				// javed
				sb.append("<BG>");
				for (MasStoreItem masStoreItem1 : itemList) {
					sb.append("<brandG>");
					sb.append("<brandGId>" + masStoreItem1.getBrandedGeneric() + "</brandGId>");
					sb.append("<brandGName>" + masStoreItem1.getBrandedGeneric()
							+ "</brandGName>");
					sb.append("</brandG>");
				}
				sb.append("</BG>");
				// javed
				sb.append("<batchsForTurn>");
				for (StoreItemBatchStock batch : batchListForTurnOver) {
					sb.append("<batchForTurn>");
					sb.append("<batchIdForTurn>" + batch.getId() + "</batchIdForTurn>");
					sb.append("<batchNameForTurn>" + batch.getBatchNo()
							+ "</batchNameForTurn>");
					sb.append("</batchForTurn>");
				}
				sb.append("</batchsForTurn>");

				for (StoreItemBatchStock batch : batchListForTurnOver) {
					a_stock=a_stock+batch.getClosingStock().intValue();
					}
				sb.append("<stock>" + a_stock + "</stock>");

				sb.append("</item>");
			}

			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public ModelAndView submitDefectiveDrug(HttpServletRequest request,HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		StoreDefectiveDrugM storeDefectiveDrugM = new StoreDefectiveDrugM();
		StoreDefectiveDrugT storeDefectiveDrugT = new StoreDefectiveDrugT();
		String grnNo = "";
		new Date();
		Date entryDate = new Date();
		Date docDate = new Date();
		Date encodedDate = null;
		Date lastChgDate = null;
		String date = "";
		String time = "";
		String encodedBy = "";
		String lastChgBy = "A";
		String lastChgTime = "";
		String buttonFlag = "";
		String reason = "";
		String desc1 = "";
		String desc2 = "";
		String desc3 = "";
		String entryNo = "";
		String userName="";
		String signalNo="";
		String disposalInstruction="";
		String remark="";
		int departmentId = 0;
		int authorised_byId=0;
		int enterd_byId=0;
		int noOfRows = 0;
		int pageNo = 1;
		int entryId = 0;
		int deptId = 0;
		int hospitalId=0;
		int authorisedId=0;
		int enteredId=0;
		String toPlace = "";

		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		try {
			if (request.getParameter("pageNo") != null) {
				pageNo = Integer.parseInt(request.getParameter("pageNo"));

			}
			if (request.getParameter(NO_OF_ROWS) != null) {
				noOfRows = Integer.parseInt(request.getParameter(NO_OF_ROWS));
			}
			if (request.getParameter(ENTRY_ID) != null) {
				entryId = Integer.parseInt(request.getParameter(ENTRY_ID));

			}
		/*if (request.getParameter(TO_PLACE) != null) {
				toPlace = (request.getParameter(TO_PLACE));
			}*/
			/*if (request.getParameter(DESC1) != null) {
				desc1 = (request.getParameter(DESC1));
			}
			if (request.getParameter(DESC2) != null) {
				desc2 = (request.getParameter(DESC2));
			}
			if (request.getParameter(DESC3) != null) {
				desc3 = (request.getParameter(DESC3));
			}*/

			if (request.getParameter(ENTRY_NO) != null) {
				entryNo = (request.getParameter(ENTRY_NO));
			}
			if (request.getParameter(REASON) != null) {
				reason = request.getParameter(REASON);
			}
			if (request.getParameter(SIGNAL_NO) != null) {
				signalNo = request.getParameter(SIGNAL_NO);
			}
			if (request.getParameter(DISPOSAL_INSTRUCTIONS) != null) {
				disposalInstruction = request.getParameter(DISPOSAL_INSTRUCTIONS);
			}
			if (request.getParameter(REMARKS) != null) {
				remark = request.getParameter(REMARKS);
			}
			if (request.getParameter(AUTHORISED_BY) != null) {
				authorised_byId = Integer.parseInt(request.getParameter(AUTHORISED_BY));
			}
			if (request.getParameter(ENTERD_BY) != null) {
				enterd_byId = Integer.parseInt(request.getParameter(ENTERD_BY));

			}



		} catch (Exception e) {
			e.printStackTrace();
		}

		try {
			String te = "";
			String te1 = "";

			SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
			//if (request.getParameter(ENTRY_DATE) != null) {
			if(request.getParameter(DOC_DATE)!=null && !request.getParameter(DOC_DATE).equals("")){
				
				te = (String) (request.getParameter(DOC_DATE));

				String date4MySQL = formatterOut.format(formatterIn.parse(request.getParameter(DOC_DATE)));
				entryDate = java.sql.Date.valueOf(date4MySQL);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");

		String[] copyIds = request.getParameterValues(RequestConstants.COPY_TO);
		String allCopyIds = "";
		if (request.getParameterValues(RequestConstants.COPY_TO) != null)
			for (int i = 0; i < copyIds.length; i++) {
				if (i != copyIds.length - 1)
					allCopyIds += copyIds[i] + ",";
				else
					allCopyIds += copyIds[i];

			}

		String headerStored = "no";

		if (pageNo == 1) {

			//storeDefectiveDrugM.setDesc1(desc1);
			//storeDefectiveDrugM.setDesc2(desc2);
			//storeDefectiveDrugM.setDesc3(desc3);
			storeDefectiveDrugM.setEntryDate(entryDate);
			storeDefectiveDrugM.setEntryNo(entryNo);
			storeDefectiveDrugM.setCopyTo(allCopyIds);
			storeDefectiveDrugM.setDocDate(entryDate);
//			storeDefectiveDrugM.setSignalNo(signalNo);
//			storeDefectiveDrugM.setDisposalInstructions(disposalInstruction);
			storeDefectiveDrugM.setRemarks(remark);

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(deptId);
			storeDefectiveDrugM.setDepartment(masDepartment);
			/*MasEmployee authorisedBy=new MasEmployee();
			authorisedBy.setId(authorised_byId);
			storeDefectiveDrugM.setAuthorisedBy(authorisedBy);*/

			MasEmployee enterdBy=new MasEmployee();
			enterdBy.setId(enterd_byId);
			storeDefectiveDrugM.setEnteredBy(enterdBy);

			storeDefectiveDrugM.setReason(reason);

			storeDefectiveDrugM.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(date));
			storeDefectiveDrugM.setLastChgTime(time);
			storeDefectiveDrugM.setStatus("y");

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			storeDefectiveDrugM.setHospital(masHospital);

			storeDefectiveDrugM.setLastChgBy(userName);
			//storeDefectiveDrugM.setToPlace(toPlace);

		} else {
			headerStored = "yes";
			infoMap.put("headerStored", headerStored);
		}
		int length = 0;
		List<StoreDefectiveDrugT> storeDefectiveDrugTlist = new ArrayList<StoreDefectiveDrugT>();

		try {
			/*	String remarks[] = JKTRequestUtils.getRequiredStringParameters(
					request, REMARKS);*/
			/*int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,SR_NO);
			int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(request, ITEM_ID);
			int brandIdArray[] = JKTRequestUtils.getRequiredIntParameters(request, BRAND_ID);

			String manufacturDateArray[] = JKTRequestUtils.getRequiredStringParameters(request, MANUFACTURING_DATE);

			String expriyDateArray[] = JKTRequestUtils.getRequiredStringParameters(request, EXPIRY_DATE);

			String disposal[] = JKTRequestUtils.getRequiredStringParameters(request, DISPOSAL);

			String disposalDateArray[] = JKTRequestUtils.getRequiredStringParameters(request, DISPOSAL_DATE_D);

			int manuArray[] = JKTRequestUtils.getRequiredIntParameters(request,MANUFACTURER_ID);

			String disposalInst[] = JKTRequestUtils.getRequiredStringParameters(request, DISPOSAL_INSTRUCTIONS);
			String authority[] = JKTRequestUtils.getRequiredStringParameters(request, AUTHORITY);
			int batchNoArr[] = JKTRequestUtils.getRequiredIntParameters(request, BATCH_ID);

			BigDecimal[] quantityReceivedArray = new BigDecimal[100];
			String mm[] = JKTRequestUtils.getRequiredStringParameters(request,QUANTITY_RECEIVED);
			int mmLen = mm.length;
			for (int i = 0; i < mmLen; i++) {
				BigDecimal val = new BigDecimal(mm[i]);

				quantityReceivedArray[i] = val;
			}
*/
			Vector srNo = box.getVector(SR_NO);
			Vector itemIdArray = box.getVector( ITEM_ID);
			Vector brandIdArray = box.getVector(BRAND_ID);

			Vector manufacturDateArray = box.getVector(MANUFACTURING_DATE);

			Vector expriyDateArray = box.getVector(EXPIRY_DATE);

			Vector disposal = box.getVector(DISPOSAL);

			Vector disposalDateArray = box.getVector(DISPOSAL_DATE_D);

			Vector manuArray = box.getVector(MANUFACTURER_ID);

			Vector disposalInst = box.getVector(DISPOSAL_INSTRUCTIONS);
			Vector authority =box.getVector(AUTHORITY);
			Vector batchNoArr =box.getVector(BATCH_ID);

			BigDecimal[] quantityReceivedArray = new BigDecimal[100];
			Vector mm = box.getVector(QUANTITY_RECEIVED);
			int mmLen = mm.size();
			for (int i = 0; i < mmLen; i++) {
				BigDecimal val = new BigDecimal(mm.get(i).toString());

				quantityReceivedArray[i] = val;
			}

			
			if (buttonFlag.equals("next")) {
				// if(buttonFlag != null){
				length = 10;
			} else {
				length = noOfRows;
			}
			for (int i = 0; i < length; i++) {
				if (Integer.parseInt(itemIdArray.get(i).toString()) != 0) {

					StoreDefectiveDrugT storeDefectiveDrugTObj = new StoreDefectiveDrugT();

					storeDefectiveDrugTObj.setSrNo(Integer.parseInt(srNo.get(i).toString()));
					MasStoreItem masItem = new MasStoreItem();
					masItem.setId(Integer.parseInt(itemIdArray.get(i).toString()));
					storeDefectiveDrugTObj.setItem(masItem);

					/*if (remarks[i].equals("emptyString2"))
						storeDefectiveDrugTObj.setRemarks("");
					else
						storeDefectiveDrugTObj.setRemarks(remarks[i]);
*/
					
					storeDefectiveDrugTObj.setAuthority(authority.get(i).toString());
					storeDefectiveDrugTObj.setDisposalInstructions(disposalInst.get(i).toString());
					storeDefectiveDrugTObj.setDisposal(disposal.get(i).toString());

					
					if (!expriyDateArray.get(i).equals("")) {
						storeDefectiveDrugTObj.setExpiryDate(HMSUtil
										.convertStringTypeDateToDateType(expriyDateArray.get(i).toString()));
					}
					if (!manufacturDateArray.get(i).equals("")) {
						storeDefectiveDrugTObj.setManufactureringDate(HMSUtil
										.convertStringTypeDateToDateType(manufacturDateArray.get(i).toString()));
					}

				
					if (!disposalDateArray.get(i).equals("")) {
						try{
							if(!disposalDateArray.get(i).equals("") && disposalDateArray.get(i)!=null)
							{
								storeDefectiveDrugTObj.setDateOfDisposal(HMSUtil
										.convertStringTypeDateToDateType(disposalDateArray.get(i).toString()));
							}else{
								storeDefectiveDrugTObj.setDateOfDisposal(null);
							}
						}catch(Exception e){
							storeDefectiveDrugTObj.setDateOfDisposal(null);
						}
					}


					StoreItemBatchStock batchStock = new StoreItemBatchStock();
					batchStock.setId(Integer.parseInt(batchNoArr.get(i).toString()));
					storeDefectiveDrugTObj.setBatchNo(batchStock);
					storeDefectiveDrugTObj.setDefectQty(quantityReceivedArray[i]);

					MasStoreBrand masStoreBrand = new MasStoreBrand();
					masStoreBrand.setId(Integer.parseInt(brandIdArray.get(i).toString()));
					if (Integer.parseInt(brandIdArray.get(i).toString()) != 0) {
						storeDefectiveDrugTObj.setBrand(masStoreBrand);
					} else {
						storeDefectiveDrugTObj.setBrand(null);
					}

					MasManufacturer masManufacturer = new MasManufacturer();
					masManufacturer.setId(Integer.parseInt(manuArray.get(i).toString()));
					if (Integer.parseInt(manuArray.get(i).toString()) != 0) {
						storeDefectiveDrugTObj
								.setManufacturedBy(masManufacturer);
					} else {
						storeDefectiveDrugTObj.setManufacturedBy(null);
					}

					storeDefectiveDrugTlist.add(storeDefectiveDrugTObj);
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		infoMap.put("pageNo", pageNo);
		infoMap.put("entryNo", entryNo);
		infoMap.put("entryId", entryId);
		infoMap.put("storeDefectiveDrugM", storeDefectiveDrugM);
		infoMap.put("storeDefectiveDrugTlist", storeDefectiveDrugTlist);
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);

		boolean flag = false;
		try {
			flag = storesHandlerService.addDefectiveDrugs(infoMap, dataMap);

		} catch (Exception e) {
			e.printStackTrace();
		}
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}

		String messageTOBeVisibleToTheUser = "";

		if (flag) {
			if (buttonFlag.equals("next")) {
				jsp = DEFECTIVE_DRUGS_JSP;
				pageNo++;
				messageTOBeVisibleToTheUser = "Defect drug entry saved successfully.";
				map = storesHandlerService.showDefectiveDrugJsp(dataMap);
				if (map.get("entryId") != null) {
					entryId = (Integer) map.get("entryId");
				}
				List<StoreDefectiveDrugM> defectMList = storesHandlerService
						.getDefectDrug(entryId);
				map.put("defectMList", defectMList);

			} else {
				jsp = STORES_MESSAGE_JSP;
				pageNo++;
				messageTOBeVisibleToTheUser = "Defect drug entry saved successfully.";
			}
		} else {
			messageTOBeVisibleToTheUser = "Defect drug entry not saved.";
		}

		jsp = "message";
		jsp += ".jsp";

		url = "/hms/hms/stores?method=showDefectiveDrugJsp";
		map.put("entryNo", entryNo);
		map.put("pageNo", pageNo);
		map.put("contentJsp", jsp);
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("indexB", "map", map);
	}
	public ModelAndView showGrnJsp(HttpServletRequest request,
			HttpServletResponse response) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		Users user = (Users) session.getAttribute("users");
		Box box = HMSUtil.getBox(request);

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);
		dataMap.put("users", user);
		Map<String, Object> newMap = commonMasterHandlerService.getUserButtonRights(dataMap);
		List<UserButtonRights> userRightsList = (List<UserButtonRights>) newMap.get("userRightsList");

		map = storesHandlerService.showGrnJsp(box, dataMap);
		jsp = "grn1";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("userRightsList", userRightsList);
		map.put("contentJsp", jsp);
		map.put("title", title);
		String previousPage = "no";
		map.put("previousPage", previousPage);
		return new ModelAndView("indexB", "map", map);
	}
	public ModelAndView showLPGrnJsp(HttpServletRequest request,HttpServletResponse response) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		Users user = (Users) session.getAttribute("users");
		Box box = HMSUtil.getBox(request);

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);
		dataMap.put("users", user);
		Map<String, Object> newMap = commonMasterHandlerService.getUserButtonRights(dataMap);
		List<UserButtonRights> userRightsList = (List<UserButtonRights>) newMap.get("userRightsList");
		map = storesHandlerService.showGrnJsp(box, dataMap);
		jsp = "crvLocalPurchase1";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("userRightsList", userRightsList);
		map.put("contentJsp", jsp);
		map.put("title", title);
		String previousPage = "no";
		map.put("previousPage", previousPage);
		return new ModelAndView("indexB", "map", map);

	}


	public ModelAndView showOtherUnitGrnJsp(HttpServletRequest request,
			HttpServletResponse response) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		Users user = (Users) session.getAttribute("users");
		Box box = HMSUtil.getBox(request);

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);
		dataMap.put("users", user);
		Map<String, Object> newMap = commonMasterHandlerService.getUserButtonRights(dataMap);
		List<UserButtonRights> userRightsList = (List<UserButtonRights>) newMap.get("userRightsList");

		map = storesHandlerService.showGrnJsp(box, dataMap);
		jsp = "crvOtherUnit1";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("userRightsList", userRightsList);
		map.put("contentJsp", jsp);
		map.put("title", title);
		String previousPage = "no";
		map.put("previousPage", previousPage);

		return new ModelAndView("indexB", "map", map);
	}


	public ModelAndView showOtherGovGrnJsp(HttpServletRequest request,
			HttpServletResponse response) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		Users user = (Users) session.getAttribute("users");
		Box box = HMSUtil.getBox(request);

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);
		dataMap.put("users", user);
		Map<String, Object> newMap = commonMasterHandlerService.getUserButtonRights(dataMap);
		List<UserButtonRights> userRightsList = (List<UserButtonRights>) newMap.get("userRightsList");

		map = storesHandlerService.showGrnJsp(box,dataMap);
		jsp = "crvOtherGovSource";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("userRightsList", userRightsList);
		map.put("contentJsp", jsp);
		map.put("title", title);
		String previousPage = "no";
		map.put("previousPage", previousPage);

		return new ModelAndView("indexB", "map", map);
	}






	// More Parameters of a PVMS/NIV Item that are Non-Mandatory Fields.
	public ModelAndView showInfoOfGrnJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreGrnT> storeGrnTMoreInfoList = new ArrayList<StoreGrnT>();
		map = storesHandlerService.getDetailsForMoreInfoGrn();
		int rowNo = 0;
		int storeGrnTId = 0;

		if (request.getParameter("rowNo") != null) {
			rowNo = Integer.parseInt(request.getParameter("rowNo"));
		}
		if (request.getParameter("detailId") != null) {
			storeGrnTId = Integer.parseInt(request.getParameter("detailId"));
			storeGrnTMoreInfoList = storesHandlerService.getStoreGrnTListForMoreInfo(storeGrnTId);
			map.put("storeGrnTMoreInfoList", storeGrnTMoreInfoList);
		}
		jsp = GRN1_JSP;
		title = "GRN";
		map.put("title", title);
		map.put("rowNo", rowNo);
		return new ModelAndView(jsp, "map", map);
	}

	// Method For indent and po list

	public ModelAndView responseForList(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		String choice = "";

		if (request.getParameter(SOURCE_OF_SUPPLY) != null) {
			choice = request.getParameter(SOURCE_OF_SUPPLY);
		}
		map = (Map<String, Object>) storesHandlerService.getIndentList(choice);
		jsp = RESPONSE_FOR_LIST;
		return new ModelAndView(jsp, "map", map);
	}
	// method for supplier list
	public ModelAndView responseForVendor(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		String vendor = "";

		if (request.getParameter(INDENT_ID) != null) {
			vendor = request.getParameter(INDENT_ID);
		}
		map = (Map<String, Object>) storesHandlerService.getVendorList(vendor);
		return new ModelAndView(jsp, "map", map);
	}

	// For adding Grn
	/*
	 * public ModelAndView submitGrn(HttpServletRequest request,
	 * HttpServletResponse response) { Box box = HMSUtil.getBox(request);
	 * session = request.getSession();
	 *
	 * Map<String, Object> map = new HashMap<String, Object>(); Map<String,
	 * Object> infoMap = new HashMap<String, Object>(); Map<String, Object>
	 * dataMap = new HashMap<String, Object>(); StoreGrnM storeGrnM=new
	 * StoreGrnM(); StoreItemBatchStock storeItemBatchStock= new
	 * StoreItemBatchStock(); StoreIndentM storeIndentM2 = new StoreIndentM();
	 * StorePoHeader storePoHeader2= new StorePoHeader();
	 *
	 * int deptId =0;
	 *
	 * if(session.getAttribute("deptId") !=null)
	 * deptId=Integer.parseInt(""+session.getAttribute("deptId"));
	 *
	 * int hospitalId = 0; if(session.getAttribute("hospitalId") !=null)
	 * hospitalId=Integer.parseInt(""+session.getAttribute("hospitalId"));
	 *
	 * //List addOrUpdate = new ArrayList(); String grnNo=""; int rows=0; String
	 * sourceOfSupply=""; Date grnDate =new Date(); int grnId=0; //int unitId=0;
	 * int indentId=0; int poId=0; String howReceived=""; Date
	 * dateReceivedSurplus=new Date(); String rrNo=""; String
	 * modeOfConveyance=""; int employeeId=0; String invoiceNo=""; Date
	 * invoiceDate=new Date(); BigDecimal invoiceAmount =null; BigDecimal
	 * freightDuty=null; BigDecimal exciseDuty=null; BigDecimal octroi=null;
	 * BigDecimal customDuty=null; BigDecimal insuranceCharge=null; BigDecimal
	 * otherCharges=null; BigDecimal grnValue=null; BigDecimal
	 * roundOffValue=null; BigDecimal grnAmount=null; BigDecimal totalAmount=
	 * null; int supplierId=0; String encodedBy=""; Date encodedDate = null;
	 * String lastChgBy="A"; Date lastChgDate = null; String lastChgTime="";
	 * String atSoNo=""; //int departmentId=0; String remarks=""; String date =
	 * ""; String time = ""; String choice=""; int noOfRows=0; int pageNo=1;
	 * String buttonFlag=""; try { if (request.getParameter("pageNo") != null)
	 * pageNo= Integer.parseInt(request.getParameter("pageNo")); if
	 * (request.getParameter("noOfRows") != null) noOfRows =
	 * Integer.parseInt(request.getParameter("noOfRows")); if
	 * (request.getParameter(GRN_ID) != null) grnId=
	 * Integer.parseInt(request.getParameter(GRN_ID));
	 *
	 * if (request.getParameter(SUPPLIER_ID) != null &&
	 * !request.getParameter(SUPPLIER_ID).equals("0")) supplierId =
	 * Integer.parseInt(request.getParameter(SUPPLIER_ID));
	 *
	 * if (request.getParameter(EMPLOYEE_ID) != null &&
	 * !request.getParameter(EMPLOYEE_ID).equals("0")) { employeeId =
	 * Integer.parseInt(request.getParameter(EMPLOYEE_ID)); }
	 * if(request.getParameter("buttonFlag") != null){ buttonFlag =
	 * request.getParameter("buttonFlag"); }
	 *
	 * if(request.getParameter(SOURCE_OF_SUPPLY).equals("p")) { if
	 * (request.getParameter(INDENT_ID) != null) {
	 * indentId=Integer.parseInt((request.getParameter(INDENT_ID))); } if
	 * (request.getParameter(SUPPLIER_ID) != null) {
	 * supplierId=Integer.parseInt((request.getParameter(SUPPLIER_ID))); } }
	 * else if(request.getParameter(SOURCE_OF_SUPPLY).equals("l")) { if
	 * (request.getParameter(INDENT_ID) != null) { indentId=Integer.parseInt(
	 * (request.getParameter(INDENT_ID))); }
	 *
	 * if (request.getParameter(SUPPLIER_ID) != null) {
	 * supplierId=Integer.parseInt( (request.getParameter(SUPPLIER_ID))); } }
	 * else if(request.getParameter(SOURCE_OF_SUPPLY).equals("a")) { if
	 * (request.getParameter(INDENT_ID) != null) {
	 * indentId=Integer.parseInt((request.getParameter(INDENT_ID))); } if
	 * (request.getParameter(SUPPLIER_ID) != null) {
	 * supplierId=Integer.parseInt((request.getParameter(SUPPLIER_ID))); } }
	 * else if (request.getParameter(SOURCE_OF_SUPPLY).equals("o")) { if
	 * (request.getParameter(SUPPLIER_ID) != null) {
	 * supplierId=Integer.parseInt((request.getParameter(SUPPLIER_ID))); } }
	 *
	 * if (request.getParameter(GRN_NO) != null) { grnNo=
	 * (request.getParameter(GRN_NO)); } if (request.getParameter(INVOICE_NO) !=
	 * null) { invoiceNo= (request.getParameter(INVOICE_NO)); } if
	 * (request.getParameter(REMARKS) != null) { remarks=
	 * request.getParameter(REMARKS); } if (request.getParameter(RR_NO) != null)
	 * { rrNo= request.getParameter(RR_NO); } if
	 * (request.getParameter(MODE_OF_CONVEYANCE) != null) { modeOfConveyance=
	 * request.getParameter(MODE_OF_CONVEYANCE); } if
	 * (request.getParameter(SUPPLY_ORDER_NO) != null) { atSoNo=
	 * request.getParameter(SUPPLY_ORDER_NO); } if
	 * (request.getParameter(HOW_RECEIVED) != null) { howReceived=
	 * request.getParameter(HOW_RECEIVED); } if
	 * (request.getParameter(SOURCE_OF_SUPPLY) != null) { sourceOfSupply=
	 * request.getParameter(SOURCE_OF_SUPPLY); } }catch (Exception e) {
	 * e.printStackTrace(); }
	 *
	 * try { String te=""; if (request.getParameter(GRN_DATE) != null) { te=
	 * (String)(request.getParameter(GRN_DATE));
	 *
	 * SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
	 * SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
	 * String
	 * date4MySQL=formatterOut.format(formatterIn.parse(request.getParameter
	 * (GRN_DATE))); grnDate = java.sql.Date.valueOf(date4MySQL); } } catch
	 * (Exception e) { e.printStackTrace(); }
	 *
	 * try { String teinvoice=""; if (request.getParameter(INVOICE_DATE) !=
	 * null) { teinvoice= (String)(request.getParameter(INVOICE_DATE));
	 * SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
	 * SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
	 * String
	 * date4MySQL=formatterOut.format(formatterIn.parse(request.getParameter
	 * (INVOICE_DATE))); invoiceDate = java.sql.Date.valueOf(date4MySQL); } }
	 * catch (Exception e) { e.printStackTrace(); }
	 *
	 *
	 * Map<String, Object> utilMap = new HashMap<String, Object>(); utilMap =
	 * (Map<String, Object>)HMSUtil.getCurrentDateAndTime(); date =
	 * (String)utilMap.get("currentDate"); time =
	 * (String)utilMap.get("currentTime");
	 *
	 *
	 * if (request.getParameter(INVOICE_AMOUNT) != null &&
	 * !request.getParameter(INVOICE_AMOUNT).equals("")) { invoiceAmount =new
	 * BigDecimal(request.getParameter(INVOICE_AMOUNT));
	 * storeGrnM.setInvoiceAmount(invoiceAmount); }
	 *
	 * if (request.getParameter(FREIGHT_DUTY) != null &&
	 * !request.getParameter(FREIGHT_DUTY).equals("")) { freightDuty= new
	 * BigDecimal(request.getParameter(FREIGHT_DUTY)); } if
	 * (request.getParameter(EXCISE_DUTY) != null &&
	 * !request.getParameter(EXCISE_DUTY).equals("")) { exciseDuty=new
	 * BigDecimal(request.getParameter(EXCISE_DUTY)); }
	 *
	 * if (request.getParameter(OCTROI) != null &&
	 * !request.getParameter(OCTROI).equals("")) { octroi=new
	 * BigDecimal(request.getParameter(OCTROI)); } if
	 * (request.getParameter(CUSTOM_DUTY) != null &&
	 * !request.getParameter(CUSTOM_DUTY).equals("")) { customDuty= new
	 * BigDecimal(request.getParameter(CUSTOM_DUTY));
	 * storeGrnM.setCustomDuty(customDuty); } if
	 * (request.getParameter(INSURANCE_CHARGES) != null &&
	 * !request.getParameter(INSURANCE_CHARGES).equals("")) {
	 * insuranceCharge=new BigDecimal(request.getParameter(INSURANCE_CHARGES));
	 * }
	 *
	 * if (request.getParameter(OTHER_CHARGES) != null &&
	 * !request.getParameter(OTHER_CHARGES).equals("")) { otherCharges=new
	 * BigDecimal(request.getParameter(OTHER_CHARGES)); }
	 *
	 * if (request.getParameter(GRN_VALUE) != null &&
	 * !request.getParameter(GRN_VALUE).equals("")) { grnValue= new
	 * BigDecimal(request.getParameter(GRN_VALUE));
	 * storeGrnM.setGrnValue(grnValue); } else{ storeGrnM.setGrnValue(null); }
	 *
	 * if (request.getParameter(TOTAL_AMOUNT) != null &&
	 * !request.getParameter(TOTAL_AMOUNT).equals("")) { totalAmount=new
	 * BigDecimal(request.getParameter(TOTAL_AMOUNT));
	 * storeGrnM.setGrnAmount(totalAmount); }
	 *
	 *
	 * String headerStored = "no";
	 *
	 * if(pageNo==1) { storeGrnM.setGrnNo(grnNo);
	 * storeGrnM.setDateReceivedSurplus(dateReceivedSurplus);
	 *
	 * if(request.getParameter(SOURCE_OF_SUPPLY).equals("p")) { StoreIndentM
	 * storeIndentM= new StoreIndentM(); storeIndentM.setId(indentId);
	 * storeGrnM.setIndent(storeIndentM);
	 *
	 * MasStoreSupplier masStoreSupplier2 = new MasStoreSupplier();
	 * masStoreSupplier2.setId(supplierId);
	 * storeGrnM.setSupplier(masStoreSupplier2); } else
	 * if(request.getParameter(SOURCE_OF_SUPPLY).equals("l")) { StorePoHeader
	 * storePoHeader= new StorePoHeader(); storePoHeader.setId(indentId);
	 * storeGrnM.setPo(storePoHeader);
	 *
	 * MasStoreSupplier masStoreSupplier2 = new MasStoreSupplier();
	 * masStoreSupplier2.setId(supplierId);
	 * storeGrnM.setSupplier(masStoreSupplier2); } else
	 * if(request.getParameter(SOURCE_OF_SUPPLY).equals("a")) { StoreIndentM
	 * storeIndentM= new StoreIndentM(); storeIndentM.setId(indentId);
	 * storeGrnM.setIndent(storeIndentM); MasStoreAirForceDepot
	 * masStoreAirForceDepot = new MasStoreAirForceDepot();
	 * masStoreAirForceDepot.setId(supplierId);
	 * storeGrnM.setUnit(masStoreAirForceDepot); } else
	 * if(request.getParameter(SOURCE_OF_SUPPLY).equals("o")) {
	 * MasStoreAirForceDepot masStoreAirForceDepot = new
	 * MasStoreAirForceDepot(); masStoreAirForceDepot.setId(supplierId);
	 * storeGrnM.setUnit(masStoreAirForceDepot); storeGrnM.setIndent(null);
	 * storeGrnM.setPo(null); } else
	 * if(request.getParameter(SOURCE_OF_SUPPLY).equals("w")) {
	 * storeGrnM.setIndent(null); storeGrnM.setPo(null); }
	 *
	 * MasEmployee masEmployee = new MasEmployee();
	 * masEmployee.setId(employeeId); storeGrnM.setEmployee(masEmployee);
	 *
	 * MasDepartment masDepartment = new MasDepartment();
	 * masDepartment.setId(deptId); storeGrnM.setDepartment(masDepartment);
	 *
	 * if(remarks !=""){ storeGrnM.setRemarks(remarks); }else{
	 * storeGrnM.setRemarks(null); } if(exciseDuty !=null){
	 * storeGrnM.setExciseDuty(exciseDuty); }else{
	 * storeGrnM.setExciseDuty(null); } storeGrnM.setFreightDuty(freightDuty);
	 * storeGrnM.setGrnDate(grnDate);
	 *
	 * storeGrnM.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(date));
	 * storeGrnM.setLastChgTime(time);
	 *
	 * if(atSoNo !=""){ storeGrnM.setAtSoNo(atSoNo); }else{
	 * storeGrnM.setAtSoNo(null); }
	 *
	 * storeGrnM.setHowReceived(howReceived);
	 * storeGrnM.setInsuranceCharge(insuranceCharge);
	 * storeGrnM.setInvoiceDate(invoiceDate); if(invoiceNo !=""){
	 * storeGrnM.setInvoiceNo(invoiceNo); }else{ storeGrnM.setInvoiceNo(null); }
	 * storeGrnM.setModeOfConveyance(modeOfConveyance);
	 * storeGrnM.setOctroi(octroi); storeGrnM.setOtherCharges(otherCharges);
	 * storeGrnM.setReceiveType(sourceOfSupply);
	 * //storeGrnM.setRoundOffValue(roundOffValue); storeGrnM.setRrNo(rrNo);
	 * storeGrnM.setStatus("o");
	 *
	 * MasHospital masHospital= new MasHospital();
	 * masHospital.setId(hospitalId); storeGrnM.setHospital(masHospital);
	 *
	 * storeGrnM.setLastChgBy("admin"); } else { headerStored="yes";
	 * infoMap.put("headerStored", headerStored); } int length = 0;
	 * List<StoreGrnT> storeGrnTlist = new ArrayList<StoreGrnT>();
	 *
	 * try { int srNo[] =
	 * JKTRequestUtils.getRequiredIntParameters(request,SR_NO); int
	 * itemIdArray[] =
	 * JKTRequestUtils.getRequiredIntParameters(request,ITEM_ID);
	 *
	 * String
	 * lotNoArr[]=JKTRequestUtils.getRequiredStringParameters(request,LOT_NO);
	 * String batchNoArr[] =
	 * JKTRequestUtils.getRequiredStringParameters(request,BATCH_NO);
	 *
	 *
	 * Vector manufacturerIdArray = box.getVector(MANUFACTURER_ID); Vector
	 * brandIdArray = box.getVector(BRAND_ID); Vector freeQtyTemp =
	 * box.getVector(FREE_QTY); Vector freeItemArr = box.getVector(FREE_ITEM);
	 * Vector manuDate = box.getVector(MANUFACTURING_DATE); Vector expdate =
	 * box.getVector(EXPIRY_DATE); Vector mdq = box.getVector("mdq"); Vector
	 * dispenseType = box.getVector("dipenseType"); Vector ratePerMdq =
	 * box.getVector("ratePerMdq");
	 *
	 *
	 * BigDecimal[] quantityReceivedArray = new BigDecimal[100]; BigDecimal[]
	 * taxArr = new BigDecimal[100]; BigDecimal[] unitRateArr = new
	 * BigDecimal[100]; BigDecimal[] discountArr = new BigDecimal[100];
	 * BigDecimal[] amountArr = new BigDecimal[100]; BigDecimal[] costPrice =
	 * new BigDecimal[100];
	 *
	 * String yy[] = JKTRequestUtils.getRequiredStringParameters(request,
	 * TAX_PERCENT); int yyLen = yy.length; for( int i = 0 ;i < yyLen ; i++){
	 * if(yy[i]!= null || yy[i]!=""){ BigDecimal val = new BigDecimal(yy[i]);
	 * taxArr[i] = val; } }
	 *
	 * String tt[] = JKTRequestUtils.getRequiredStringParameters(request,
	 * UNIT_RATE); int ttLen = tt.length; for( int i = 0 ;i < ttLen ; i++) {
	 * BigDecimal val = new BigDecimal(tt[i]); unitRateArr[i] = val; } String
	 * zz[] = JKTRequestUtils.getRequiredStringParameters(request,
	 * DISCOUNT_PERCENTAGE); int zzLen = zz.length; for( int i = 0 ;i < zzLen ;
	 * i++){ if(zz[i]!= null || zz[i] !=""){ BigDecimal val = new
	 * BigDecimal(zz[i]); discountArr[i] = val; } } String qq[] =
	 * JKTRequestUtils.getRequiredStringParameters(request, AMOUNT); int qqLen =
	 * qq.length; for( int i = 0 ;i < qqLen ; i++){ BigDecimal val = new
	 * BigDecimal(qq[i]); amountArr[i] = val; } String mm[] =
	 * JKTRequestUtils.getRequiredStringParameters(request, QUANTITY_RECEIVED);
	 * int mmLen = mm.length; for( int i = 0 ;i < mmLen ; i++){ BigDecimal val =
	 * new BigDecimal(mm[i]); quantityReceivedArray[i] = val; }
	 *
	 * String gg[] = JKTRequestUtils.getRequiredStringParameters(request,
	 * COST_PRICE); int ggLen = gg.length;
	 *
	 * for( int i = 0 ;i < ggLen ; i++){ BigDecimal val = new BigDecimal(gg[i]);
	 * costPrice[i] = val; }
	 *
	 * int mdq_value = 0; int free_qty = 0; Vector freeQty = new Vector(25);
	 * for( int i = 0 ;i < mdq.size(); i++) { if
	 * (!mdq.get(i).toString().equalsIgnoreCase("")) { int item_id =
	 * itemIdArray[i]; BigDecimal qty = new BigDecimal(mm[i]); BigDecimal amount
	 * = new BigDecimal(qq[i]); mdq_value =
	 * Integer.parseInt(mdq.get(i).toString()); if
	 * (freeQtyTemp.get(i).toString().equalsIgnoreCase("")) free_qty = 0; else
	 * free_qty = Integer.parseInt(freeQtyTemp.get(i).toString());
	 * Map<String,Object> paramMap = new HashMap<String,Object>();
	 * paramMap.put("itemId", item_id); paramMap.put("qty", qty);
	 * paramMap.put("mdq", mdq_value); paramMap.put("amount", amount);
	 * paramMap.put("freeQty", free_qty); map =
	 * storesHandlerService.getActualQtyAsPerAU(paramMap);
	 * quantityReceivedArray[i] = new
	 * BigDecimal(map.get("actualQuantity").toString()); costPrice[i] = new
	 * BigDecimal(map.get("costPrice").toString()); freeQty.add(i,
	 * map.get("freeQty").toString()); } else { quantityReceivedArray[i] = new
	 * BigDecimal(0); costPrice[i] = new BigDecimal(0); freeQty.add(i, 0); } }
	 *
	 * if(buttonFlag.equals("next")){ length = 10; }else{ length = noOfRows; }
	 *
	 *
	 * for(int i = 0 ; i<length ; i++) { //System.out.println("srNo " + srNo[i] +
	 * "itemid" + itemIdArray[i]+ "cost price " +costPrice[i]);
	 * if(itemIdArray[i]!=0) { StoreGrnT storeGrnTObj=new StoreGrnT();
	 * storeGrnTObj.setSerialNo(srNo[i]);
	 *
	 * try { storeGrnTObj.setFreeQty(new Integer(freeQty.get(i).toString())); }
	 * catch(Exception e) { storeGrnTObj.setFreeQty(new Integer(0)); }
	 *
	 *
	 * storeGrnTObj.setFreeItem(freeItemArr.get(i).toString()); MasStoreItem
	 * masItem = new MasStoreItem(); masItem.setId(itemIdArray[i]);
	 * storeGrnTObj.setItem(masItem);
	 *
	 * if(manufacturerIdArray.get(i).toString() != "") { MasManufacturer
	 * masManufacturer= new MasManufacturer();
	 * masManufacturer.setId(Integer.parseInt
	 * (manufacturerIdArray.get(i).toString()));
	 * storeGrnTObj.setManufacturer(masManufacturer); } else {
	 * storeGrnTObj.setManufacturer(null); }
	 *
	 * if(brandIdArray.get(i).toString() != "" ) { MasStoreBrand masStoreBrand =
	 * new MasStoreBrand();
	 * masStoreBrand.setId(Integer.parseInt(brandIdArray.get(i).toString()));
	 * storeGrnTObj.setBrand(masStoreBrand); } else {
	 * storeGrnTObj.setBrand(null); }
	 *
	 * storeGrnTObj.setReceivedQty(quantityReceivedArray[i]);
	 * storeGrnTObj.setFinalCostPrice(costPrice[i]);
	 * storeGrnTObj.setTax(taxArr[i]); storeGrnTObj.setDiscount(discountArr[i]);
	 * storeGrnTObj.setAmountValue(amountArr[i]);
	 *
	 * storeGrnTObj.setUnitRate(unitRateArr[i]);
	 *
	 * if(batchNoArr[i].equals("emptyString")) storeGrnTObj.setBatchNo(""); else
	 * storeGrnTObj.setBatchNo(batchNoArr[i]);
	 *
	 *
	 * if(lotNoArr[i].equals("emptyString1"))
	 * storeGrnTObj.setLotNo(brandIdArray.get(i).toString()+","+
	 * batchNoArr[i]+","+itemIdArray[i]); else
	 * storeGrnTObj.setLotNo(lotNoArr[i]);
	 *
	 * if(!manuDate.get(i).toString().equals("")){
	 * storeGrnTObj.setManufacturerDate(manuDate.get(i).toString()); } else{
	 * storeGrnTObj.setManufacturerDate(null); }
	 *
	 *
	 * if(!expdate.get(i).toString().equals("")) {
	 * storeGrnTObj.setExpiryDate(HMSUtil
	 * .convertStringTypeDateToDateType(expdate.get(i).toString())); } else {
	 * storeGrnTObj.setExpiryDate(null); }
	 *
	 * //System.out.println("costPrice[i] "+costPrice[i]);
	 *
	 *
	 * // add mdq, dispense type, rate per mdq
	 * storeGrnTObj.setDispType(dispenseType.get(i).toString()); try {
	 * storeGrnTObj.setMdqValue(new Integer(mdq.get(i).toString())); }
	 * catch(Exception e) { storeGrnTObj.setMdqValue(new Integer(0)); } try {
	 * storeGrnTObj.setRatePerMdq(new BigDecimal(ratePerMdq.get(i).toString()));
	 * } catch(Exception e) { storeGrnTObj.setRatePerMdq(new BigDecimal(0)); }
	 * storeGrnTlist.add(storeGrnTObj); }//end if } //end for loop } catch
	 * (Exception e) { e.printStackTrace(); }
	 *
	 * infoMap.put("pageNo",pageNo); infoMap.put("grnNo",grnNo);
	 * infoMap.put("grnId", grnId); //infoMap.put("addOrUpdate",addOrUpdate);
	 * infoMap.put("storeGrnM", storeGrnM); infoMap.put("storeIndentM2",
	 * storeIndentM2); infoMap.put("storePoHeader2", storePoHeader2);
	 * infoMap.put("storeItemBatchStock", storeItemBatchStock);
	 * infoMap.put("storeGrnTlist", storeGrnTlist); infoMap.put("indentId",
	 * indentId); infoMap.put("sourceOfSupply", sourceOfSupply);
	 * dataMap.put("deptId", deptId); dataMap.put("numberOfRecordsInLoanIn",
	 * box.getInt("numberOfRecordsInLoanIn")); boolean flag=false; try{
	 * flag=storesHandlerService.addGrns(infoMap, dataMap);
	 *
	 * }catch (Exception e) { e.printStackTrace(); } if(map.get("flag") !=
	 * null){ flag = (Boolean)map.get("flag"); }
	 *
	 * String messageTOBeVisibleToTheUser="";
	 *
	 *
	 *
	 * if(flag){ if(buttonFlag.equals("next")){ jsp = GRN_JSP; pageNo++;
	 * messageTOBeVisibleToTheUser = "CRV created Successfully"; map =
	 * storesHandlerService.showGrnJsp(box, dataMap); if(map.get("grnId") !=
	 * null){ grnId = (Integer)map.get("grnId"); } List<StoreGrnM> grnMList =
	 * storesHandlerService.getGrn(grnId); map.put("grnMList", grnMList);
	 *
	 * }else{ jsp = STORES_MESSAGE_JSP; pageNo++;
	 * messageTOBeVisibleToTheUser="CRV created Successfully";
	 * url="/hms/hms/stores?method=showGrnJsp"; } }else {
	 * messageTOBeVisibleToTheUser = "CRV not created"; }
	 *
	 * if (flag) { messageTOBeVisibleToTheUser = "CRV created Successfully"; map
	 * = storesHandlerService.showGrnJsp(box, dataMap); } else {
	 * messageTOBeVisibleToTheUser = "CRV not created"; map =
	 * storesHandlerService.showGrnJsp(box, dataMap); }
	 *
	 * jsp=GRN_JSP; jsp += ".jsp"; //url="/hms/hms/stores?method=showGrnJsp";
	 * //map.put("grnNo",grnNo); map.put("pageNo",pageNo);
	 * map.put("contentJsp",jsp); //map.put("url", url); //map.put("max",
	 * grnNo);
	 * map.put("messageTOBeVisibleToTheUser",messageTOBeVisibleToTheUser);
	 * return new ModelAndView("index", "map", map); }
	 */
	// For searching Grn on basis of GRN No
	public ModelAndView submitGrn(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> cHMap = new HashMap<String, Object>();
		List<StoreGrnM> storeGrnMList = new ArrayList<StoreGrnM>();

		HttpSession session = request.getSession();
		box.put("deptId", session.getAttribute("deptId"));
		box.put("hospitalId", session.getAttribute("hospitalId"));
		box.put("userName", session.getAttribute("userName"));

		dataMap.put("deptId", session.getAttribute("deptId"));
		dataMap.put("hospitalId", session.getAttribute("hospitalId"));
		dataMap.put("userName", session.getAttribute("userName"));

		String msg = "";
		cHMap = storesHandlerService.checkgrnNo(box);
		storeGrnMList = (List) cHMap.get("storeGrnMList");
		if (storeGrnMList.size() == 0) {
			map = storesHandlerService.submitGrn(box);
			msg = map.get("messageTOBeVisibleToTheUser").toString();
		} else {
			msg = cHMap.get("messageTOBeVisibleToTheUser").toString();
		}

		map = storesHandlerService.showGrnJsp(box, dataMap);
		map.put("messageTOBeVisibleToTheUser", msg);
		jsp = GRN_JSP;
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}


	/*
	 * Methods starting for CIV Issue changes by vikas
	 */
	@SuppressWarnings("unchecked")
	public ModelAndView showIssueDispensaryJsp(HttpServletRequest request,HttpServletResponse response) {
		// --- Retriving User Name,Hospital Id,Department Id from Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map map = new HashMap();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);

		map = storesHandlerService.showIssueDispensaryJsp(dataMap);
		String jsp = RequestConstants.ISSUED_TO_DISPENSARY_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}
	
	@SuppressWarnings("unchecked")
	public ModelAndView showIssueDispensaryJspForWard(HttpServletRequest request,HttpServletResponse response) {
		// --- Retriving User Name,Hospital Id,Department Id from Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map map = new HashMap();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);

	/*	map = storesHandlerService.showIssueDispensaryJsp(dataMap);*/
		String jsp = "issueToDispensaryForWard";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}
	
	
	@SuppressWarnings("unchecked")
	public ModelAndView showIssueDispensaryJspPartial(HttpServletRequest request,HttpServletResponse response) {
		// --- Retriving User Name,Hospital Id,Department Id from Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map map = new HashMap();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);

		/*map = storesHandlerService.showIssueDispensaryJspPartial(dataMap);*/
		String jsp = "issueToWardPartial";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}



	public ModelAndView showIssueUnit(HttpServletRequest request,HttpServletResponse response) {
		// --- Retriving User Name,Hospital Id,Department Id from Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map map = new HashMap();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);

		map = storesHandlerService.showIssueUnit(dataMap);
		String jsp = RequestConstants.ISSUED_TO_UNIT;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings("unchecked")
	public ModelAndView getDemandList(HttpServletRequest request,
			HttpServletResponse response) {
		//---- Retriving User Name,Hospital Id,Department Id from Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// ------------------------------------------------------------ Box box
		// = HMSUtil.getBox(request);
		Map map = new HashMap();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		int dispenceryId = 0;
		if ((request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP) != null)&& (!request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP).equals(""))) {
			dispenceryId = Integer.parseInt(request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP));
		}
		jsp = RequestConstants.DEMAND_LIST_AJAX_JSP;
		dataMap.put("dispenceryId", dispenceryId);
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);
		map = storesHandlerService.getDemandList(dataMap);
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}
	
	@SuppressWarnings("unchecked")
	public ModelAndView getDemandListForRC(HttpServletRequest request,
			HttpServletResponse response) {
		//---- Retriving User Name,Hospital Id,Department Id from Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// ------------------------------------------------------------ Box box
		// = HMSUtil.getBox(request);
		Map map = new HashMap();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		int dispenceryId = 0;
		if ((request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP) != null)&& (!request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP).equals(""))) {
			dispenceryId = Integer.parseInt(request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP));
		}
		jsp = RequestConstants.DEMAND_LIST_AJAX_JSP;
		dataMap.put("dispenceryId", dispenceryId);
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);
		map = storesHandlerService.getDemandListForRC(dataMap);
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}


	public ModelAndView getDemandListForWithoutBar(HttpServletRequest request,
			HttpServletResponse response) {
		//---- Retriving User Name,Hospital Id,Department Id from Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// ------------------------------------------------------------ Box box
		// = HMSUtil.getBox(request);
		Map map = new HashMap();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		int dispenceryId = 0;
		if ((request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP) != null)
				&& (!request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP).equals(""))) {
			dispenceryId = Integer.parseInt(request
					.getParameter(RequestConstants.DEPARTMENT_ID_TEMP));
		}
		jsp = RequestConstants.DEMAND_LIST_AJAX_WITH_BAR_JSP;
		dataMap.put("dispenceryId", dispenceryId);
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);
		map = storesHandlerService.getDemandList(dataMap);
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}


	@SuppressWarnings("unchecked")
	public ModelAndView searchIssueCiv(HttpServletRequest request,
			HttpServletResponse response) {

		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		Box box = HMSUtil.getBox(request);
		Map map = new HashMap();
		Map dataMap = new HashMap();
		int issueId = 0;
		/*if (request.getParameter(RequestConstants.ISSUE_UNIT_ID) != null) {
			issueId = Integer.parseInt(request
					.getParameter(RequestConstants.ISSUE_UNIT_ID));
		}*/
		if (request.getParameter("parent") != null) {
			issueId = Integer.parseInt(request
					.getParameter("parent"));
		}

		jsp = RequestConstants.MODIFY_ISSUE_CIV;
		dataMap.put("issueId", issueId);
		box.put("deptId", deptId);
		box.put("issueId", issueId);
		box.put("hospitalId", hospitalId);
		map = storesHandlerService.searchIssueCiv(box);
		Users user = (Users) session.getAttribute("users");
		dataMap.put("users", user);
		Map<String, Object> newMap = commonMasterHandlerService
				.getUserButtonRights(dataMap);
		List<UserButtonRights> userRightsList = (List<UserButtonRights>) newMap
				.get("userRightsList");

		map.put("userRightsList", userRightsList);
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}
	public ModelAndView openItemBrandWindowJsp(HttpServletRequest request,
			HttpServletResponse response) throws ParseException {
		// - Retriving User Name,Hospital Id,Department Id from Session-----
		Box box = HMSUtil.getBox(request);
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;


		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		// --------------------------------------------------------------------------------
		int itemId = 0;
		String qtyRequested = "";
		int rowVal = 0;
		int issuedItemId = 0;
		int issueId = 0;
		int detailId = 0;
		int toDept = 0;
		String issueNo = "";
		String nomenclature = "";
		String pvms = "";
		BigDecimal loanOutQty = null;
		BigDecimal issuedQty = null;
		session = request.getSession();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (request.getParameter(RequestConstants.ITEM_ID) != null) {
			itemId = Integer.parseInt(request
					.getParameter(RequestConstants.ITEM_ID));
		}
		if (request.getParameter(RequestConstants.QTY_IN_REQUEST) != null) {
			qtyRequested = (request
					.getParameter(RequestConstants.QTY_IN_REQUEST));
		}
		if (request.getParameter("issueNo") != null) {
			issueNo = (request.getParameter("issueNo"));
		}

		if (request.getParameter("rowVal") != null) {
			rowVal = Integer.parseInt(request.getParameter("rowVal"));
		}
		if (request.getParameter("issuedItemId") != null) {
			issuedItemId = Integer.parseInt(request
					.getParameter("issuedItemId"));
		}
		if (request.getParameter("issueId") != null) {
			issueId = Integer.parseInt(request.getParameter("issueId"));
		}
		if (request.getParameter("detailId") != null) {
			detailId = Integer.parseInt(request.getParameter("detailId"));
		}
		if (request.getParameter("nomenclature") != null) {
			nomenclature = request.getParameter("nomenclature");
		}
		if (request.getParameter("pvms") != null) {
			pvms = request.getParameter("pvms");
		}
		if (request.getParameter("loanOutQty") != null
				&& !request.getParameter("loanOutQty").equals("")) {
			loanOutQty = new BigDecimal(request.getParameter("loanOutQty"));

		}

		if (request.getParameter("departmentIdTemp") != null
				&& !request.getParameter("departmentIdTemp").equals("")) {
			toDept = Integer.parseInt(request.getParameter("departmentIdTemp"));
		}

		if (request.getParameter("issuedQty") != null
				&& !request.getParameter("issuedQty").equals("")) {
			try {
				issuedQty = new BigDecimal(request.getParameter("issuedQty"));
			} catch (Exception e) {
				issuedQty = new BigDecimal(0);
			}

		}

		dataMap.put("deptId", deptId);
		dataMap.put("itemId", issuedItemId);
		dataMap.put("issueNo", issueNo);
		dataMap.put("issuedQty", issuedQty);
		dataMap.put("issueMId", issueId);
		dataMap.put("toDept", toDept);

		map = storesHandlerService.getBrandMap(dataMap);
		map.put("qtyRequested", qtyRequested);
		map.put("itemId", itemId);
		map.put("issuedItemId", issuedItemId);
		map.put("rowVal", rowVal);
		map.put("issueId", issueId);
		map.put("detailId", detailId);
		map.put("issueNo", issueNo);
		map.put("nomenclature", nomenclature);
		map.put("pvms", pvms);
		map.put("loanOutQty", loanOutQty);
		box.put("departmentIdTemp", toDept);
		map.put("box", box);
		/***change by anand for after issue***/
		//if (issuedQty.doubleValue() > 0)
			//jsp = "itemIssuedBrandWindow";
		//else
			jsp = RequestConstants.ITEM_BRAND_WINDOW_JSP;
		return new ModelAndView(jsp, "map", map);
	}
	public ModelAndView showPhysicalStockJsp(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		int deptId = 0;
		int hospitalId=0;



		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
		}

		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}
		dataMap.put("hospitalId",hospitalId );
		dataMap.put("deptId",deptId );

		map = storesHandlerService.showPhysicalStock(dataMap);
		jsp = STORE_PHYSICAL_STOCK_JSP;
		jsp = jsp + ".jsp";
		title = "Physical Stock";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}
	public ModelAndView showStockTakingAddJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		int deptId = Integer.valueOf(session.getAttribute("deptId").toString());
		int hospitalId = Integer.valueOf(session.getAttribute("hospitalId").toString());
		box.put("deptId", deptId);
		box.put("hospitalId", hospitalId);
		map = storesHandlerService.getItemDetailsForStockTakingAdd(box);
		jsp = STOCK_TAKING_ADDITION_JSP;
		title = "Stock Taking Items Addition";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);

	}
	public ModelAndView doAddStockTakingItems(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId=(Integer)session.getAttribute("deptId");

		Box box = HMSUtil.getBox(request);
		box.put("deptId", deptId);
		map = storesHandlerService.doAddStockTakingItems(box);
		jsp = STOCK_TAKING_ADDITION_JSP;
		title = "Stock Taking Items Addition";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);

	}
	public ModelAndView showAdjustmentJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();

		int departmentId = 0;
		String physicalStockMDate = "";
		if (request.getParameter(DEPARTMENT_ID) != null
				&& !(request.getParameter(DEPARTMENT_ID).equals(""))) {
			departmentId = Integer.parseInt(request.getParameter(DEPARTMENT_ID));
		}
		if (!request.getParameter(PHYSICAL_STOCK_DATE).equals("0")
				&& !(request.getParameter(PHYSICAL_STOCK_DATE).equals(""))) {
			physicalStockMDate = request.getParameter(PHYSICAL_STOCK_DATE);
		}
		box.put("departmentId", departmentId);
		box.put("physicalStockMDate", physicalStockMDate);

		map = storesHandlerService.showAdjustment1(box);
		jsp = ADJUSTMENT_JSP;
		jsp = jsp + ".jsp";
		title = "Adjustment";
		map.put("departmentId", departmentId);
		map.put("physicalStockMDate", physicalStockMDate);
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}
	public ModelAndView addAdjustment(HttpServletRequest request,
			HttpServletResponse response) {
		StoreAdjustmentM storeAdjustmentM = new StoreAdjustmentM();
		StoreAdjustmentT storeAdjustmentT = new StoreAdjustmentT();
		int departmentId = 0;
		String adjustmentNo = "";
		Date[] expDateArray = new Date[100];
		Date expDate = null;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String lastChgDate = (String) utilMap.get("currentDate");
		String lastChgTime = (String) utilMap.get("currentTime");
		Date adjustmentDate = null;
		int adjutsmentId = 0;
		int physicalStockMId = 0;
		String approvedBy = "";
		String remarks = "";
		String reason = "";
		Map<String, Object> infoMap = new HashMap<String, Object>();
		String lastChgBy = "";
		boolean successfully = false;
		int hospitalId = 0;
		int deptId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		Box box = HMSUtil.getBox(request);
		box.put("hospitalId", hospitalId);
		boolean flag = false;
		try {
			flag = storesHandlerService.addAdjustment(box);
		} catch (Exception e) {
			e.printStackTrace();
		}
		String messageTOBeVisibleToTheUser = "";
		if (flag) {
			messageTOBeVisibleToTheUser = "Adjustment Records Added & Stock Updated Successfully";
		} else {
			messageTOBeVisibleToTheUser = "Records Not Added/Updated!... Try Again.....";
			map.put("messageType", "failure");
		}
		jsp = STORES_MESSAGE_JSP;
		url = "/hms/hms/stores?method=showPhysicalStockJsp";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);

		return new ModelAndView("index", "map", map);
	}
	public ModelAndView createGridForPhysicalStockData(
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		int hospitalId=0;
		int deptId=0;

		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		box.put("hospitalId", hospitalId);
		box.put("deptId", deptId);

		map = storesHandlerService.createGridForPhysicalStockData(box);
		jsp = STORE_PHYSICAL_STOCK_JSP;
		jsp = jsp + ".jsp";
		title = "Certificate to Physical Stock";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView updateGridItemsInPhysicalStock(
			HttpServletRequest request, HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		map = storesHandlerService.updateGridItemsInPhysicalStock(box);
		jsp = STORE_PHYSICAL_STOCK_JSP;
		jsp += ".jsp";
		title = "Certificate Physical Stock Taking Updation";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView getGridDataForPhysicalStock(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		String pvmsNo = null;
		Map<String, Object> map = new HashMap<String, Object>();
		int hospitalId=0;
		int deptId=0;
	/*	if (request.getParameter("flag") != null
				&& !request.getParameter("flag").equals("")) {
			box.put("pageno", "1");
		}
		if (request.getParameter("pvmsNo") != null
				&& request.getParameter("pvmsNo").length() > 0) {
			pvmsNo = request.getParameter("pvmsNo");
			box.put("pvmsNo", pvmsNo);
		}*/

		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		box.put("hospitalId", hospitalId);
		box.put("deptId", deptId);

		map = storesHandlerService.getGridDataForPhysicalStock(box);
		jsp = STORE_PHYSICAL_STOCK_JSP;
		jsp = jsp + ".jsp";
		title = "Certificate to Physical Stock";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}
		public ModelAndView showPhysicalStockReport(HttpServletRequest request,
			HttpServletResponse response) {
			HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		int hospitalId=0;
		String deptName = "";
		String hospitalName="";
		String hospitalAddress="";
		Date physicalStockDate = null;
		int deptId = 0;

		try {
			if (request.getParameter(PHYSICAL_STOCK_DATE) != null && !(request.getParameter(PHYSICAL_STOCK_DATE).equals(""))) {
				physicalStockDate = HMSUtil
						.convertStringTypeDateToDateType(request
								.getParameter(PHYSICAL_STOCK_DATE));
			}
			if (request.getParameter(DEPARTMENT_ID) != null	&& !(request.getParameter(DEPARTMENT_ID).equals(""))) {
				deptId = Integer.parseInt(request.getParameter(DEPARTMENT_ID));
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService.getDBConnection();
		hospitalId = (Integer) session.getAttribute("hospitalId");
		hospitalName = storesHandlerService.getHospitalName(hospitalId);
		hospitalAddress = storesHandlerService.getHospitalAddress(hospitalId);
		map.put("hospitalName", hospitalName);
		map.put("hospitalAddress", hospitalAddress);
		map.put("PHYSICAL_DATE", physicalStockDate);
		map.put("DEPART", deptId);
		map.put("hospitalId", hospitalId);

		if (session.getAttribute("deptName") != null) {
			deptName = (String) session.getAttribute("deptName");

			map.put("deptName", deptName);

		}
		byte[] bytes = null;
			try {
				HMSUtil.generateReport("Certificate_stock_taking_smc", map,
						(Connection) connectionMap.get("conn"), response,getServletContext());
			} catch (IllegalStateException e) {
				e.printStackTrace();
			}
		return null;
	}
	public ModelAndView showReceiptRegisterReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		title = "Receipt Register Report";
		jsp = RECEIPT_REGISTER_REPORT_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}
// Javed khan
	public ModelAndView generateReceiptRegisterReport(HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Date fromDate = null;
		Date toDate = null;
		int hospitalId = 0;
		int deptId = 0;
		String hospitalName = "";
		String deptName = "";
		String flag="";
		HttpSession session = request.getSession();
		requestParameters.put("DEPART", session.getAttribute("deptId"));
		try {
			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
				hospitalName = storesHandlerService.getHospitalName(hospitalId);
				requestParameters.put("HOSP_NAME", hospitalName);
				requestParameters.put("hospitalId", hospitalId);  // add hospital_id by javed khan
			}

			if (session.getAttribute("deptName") != null) {
				deptName = (String) session.getAttribute("deptName");
				requestParameters.put("DepartmentName", deptName);
			}
			if (request.getParameter(FROM_DATE) != null	&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request.getParameter(FROM_DATE));
				requestParameters.put("FROM_DATE", fromDate);
				requestParameters.put("fromDate", request.getParameter(FROM_DATE));
			}
			if (request.getParameter("flag") != null	&& !(request.getParameter("flag").equals(""))) {
				flag =(String) request.getParameter("flag");
			}
			if (request.getParameter(TO_DATE) != null && !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request.getParameter(TO_DATE));
				requestParameters.put("TO_DATE", toDate);
				requestParameters.put("toDate", request.getParameter(TO_DATE));
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("requestParameters",requestParameters);
		map.put("deptName", deptName);
		if(flag.equalsIgnoreCase("j")){
			Map<String, Object> recptRegister = storesHandlerService.getReceiptRegisterReport(requestParameters);
			map.put("recptRegister", recptRegister);
			String jsp="receiptRegisterReport.jsp";
			map.put("contentJsp", jsp);
		return new ModelAndView("indexB","map", map);
		}else{
			Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
			/*HMSUtil.generateReport(RECEIPT_REGISTER_REPORT, requestParameters,
					(Connection) connectionMap.get("con"), response,
					getServletContext());*/

			// javed
			HMSUtil.generateReport("receipt_register_new", requestParameters,
					(Connection) connectionMap.get("con"), response,
					getServletContext());
			return new ModelAndView("indexB", "map", map);
		}

	}
	//--Internal Issue Report
//----Vendor List Report--
public ModelAndView showVendorReportJsp(HttpServletRequest request,HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	map = storesHandlerService.showVendorReportJsp();
	title = "Vendor Report";
	jsp = VENDOR_REPORT_JSP;
	jsp = jsp + ".jsp";
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("indexB", "map", map);
}

public ModelAndView generateVendorReport(HttpServletRequest request,HttpServletResponse response) {
Map<String, Object> requestParameters = new HashMap<String, Object>();
int hospitalId = 0;
String hospitalName = "";
int vendorId = 0;
Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
HttpSession session = request.getSession();
try {

	if (session.getAttribute("hospitalId") != null) {
		hospitalId = (Integer) session.getAttribute("hospitalId");
		hospitalName = storesHandlerService.getHospitalName(hospitalId);
		requestParameters.put("HOSP_NAME", hospitalName);
	}

	if (request.getParameter(VENDOR_NAME) != null && !(request.getParameter(VENDOR_NAME).equals(""))) {
		vendorId = Integer.parseInt(request.getParameter(VENDOR_NAME));
	}

	if (vendorId == 0) {
		HMSUtil.generateReport("Vendor_List_All", requestParameters,(Connection) connectionMap.get("con"), response,
				getServletContext());
	} else {
		requestParameters.put("VENDOR_ID", vendorId);
		HMSUtil.generateReport("Vendor_List", requestParameters,(Connection) connectionMap.get("con"), response,
				getServletContext());
	}

} catch (Exception e) {
	e.printStackTrace();
}

return null;
}
//--------by Dipali (Stock Status Report)------
public ModelAndView showActualStockReportJsp(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	 map = storesHandlerService.showActualStockReportJsp();
	title = "Actual Stock Report";
	jsp = "actualStockReport";
	jsp = jsp + ".jsp";
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("indexB", "map", map);
}

public ModelAndView generateActualStockSactionReport(HttpServletRequest request,HttpServletResponse response) {
	Map<String, Object> requestParameters = new HashMap<String, Object>();
	Box box = HMSUtil.getBox(request);
	int hospitalId = 0;
	int deptId = 0;
	String hospitalName = "";
	String deptName = "";
	String query = "";
	String query1 = "";
	String flag="";
	HttpSession session = request.getSession();
	try {

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			requestParameters.put("hospitalId", hospitalId);
			hospitalName = storesHandlerService.getHospitalName(hospitalId);
			requestParameters.put("HOSP_NAME", hospitalName);
		}
 
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
			requestParameters.put("deptId", deptId);
		}

		if (session.getAttribute("deptName") != null) {
			deptName = session.getAttribute("deptName").toString();
			requestParameters.put("deptName", deptName);
		}
		
		int itemCategoryId=0;
		int groupId=0;
		int itemTypeId=0;
		int itemClassId=0;
		
		if (!request.getParameter(ITEM_CLASS_ID).equals("0")) {
			
			itemClassId = Integer.parseInt(request.getParameter(ITEM_CLASS_ID));
			query1 =query1 + " and mas_store_item.item_class_id = '"+ itemClassId + "' ";
			query =query + " and mas_store_item.item_class_id = :itemClassId";
			requestParameters.put("itemClassId", itemClassId);
		}
		if (!request.getParameter(ITEM_CATEGORY_ID).equals("0")) {
			
			itemCategoryId = Integer.parseInt(request.getParameter(ITEM_CATEGORY_ID));
			query1 =query1 + " and mas_store_item.item_category_id = '"+ itemCategoryId + "' ";
			query =query + " and mas_store_item.item_category_id = :itemCategoryId";
			requestParameters.put("itemCategoryId", itemCategoryId);
		}
		
		
		if (!request.getParameter(GROUP_ID).equals("0")) {
			
			groupId = Integer.parseInt(request.getParameter(GROUP_ID));
			query1 =query1 + " and mas_store_item.group_id = '"+ groupId + "' ";
			query =query + " and mas_store_item.group_id = :groupId";
			requestParameters.put("groupId", groupId);
		}
		if (!request.getParameter(ITEM_TYPE_ID).equals("0")) {
			
			itemTypeId = Integer.parseInt(request.getParameter(ITEM_TYPE_ID));
			query1 =query1 + " and mas_store_item.item_type_id = '"+ itemTypeId + "' ";
			query =query + " and mas_store_item.item_type_id = :itemTypeId";
			requestParameters.put("itemTypeId", itemTypeId);
			
		}
		
		
		
		if ((request.getParameter("sectionId") != null && (!request.getParameter("sectionId").equals("0")))) {
					
			int sectionId= Integer.parseInt(request.getParameter("sectionId"));			
			query1 =query1 + " and mas_store_item.section_id = '"+ sectionId + "' ";
			query =query + " and mas_store_item.section_id = :section";
			requestParameters.put("section", sectionId);

		}

		if (request.getParameter("sectionId") != null &&(request.getParameter("pvmsNiv") != null && (!request.getParameter("pvmsNiv").equals("")))) {
			query1 = query1 + " and mas_store_item.pvms_no = '"+ request.getParameter("pvmsNiv").toUpperCase() + "' ";
			query = query + " and mas_store_item.pvms_no = :pvms";
			requestParameters.put("pvms", request.getParameter("pvmsNiv"));
		}
		if ((request.getParameter("sectionId").equals("0"))
			&&(request.getParameter("pvmsNiv") != null && (!request.getParameter("pvmsNiv").equals(""))))
		{
			query1 =query1 + " and mas_store_item.pvms_no = '"+ request.getParameter("pvmsNiv") + "' ";
			query =query + " and mas_store_item.pvms_no = :pvms1";
			requestParameters.put("pvms", request.getParameter("pvmsNiv"));
									
		}
		
		if (request.getParameter("flag") != null &&(!request.getParameter("flag").equals(""))) {
			flag=request.getParameter("flag") ;
		}
	} catch (Exception e) {
		e.printStackTrace();
	}
	Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
	//javed khan
	requestParameters.put("QUERY", query);
	requestParameters.put("QUERY1", query1);
	String reportName = "";
	
	if(flag.equalsIgnoreCase("j")){
		requestParameters.put("QUERY", query);
		String report=(String)box.getString("reportType");
		requestParameters.put("report_Type",report);
		map = storesHandlerService.showActualStockReportJsp();
		Map<String, Object> actualStock = storesHandlerService.getActualStockSection(requestParameters);
		map.put("actualStock", actualStock);
		map.put("reportType", box.getString("reportType"));
		String jsp="actualStockReportJsp.jsp";
		map.put("contentJsp", jsp);
	return new ModelAndView("indexB","map", map);

	}else{
	if (box.getString("reportType").equals("summary")) {
		reportName = "Actual_stock_Register_sac_pvms";
	} else if (box.getString("reportType").equals("detail")) {
		reportName = "Stock_details_rep_batch_sac_smc";
	}

	HMSUtil.generateReport(reportName, requestParameters,
			(Connection) connectionMap.get("con"), response,
			getServletContext());

	return null;
	}
}








public ModelAndView getItemTypeGLList(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	int group = 0;
	Map<String, Object> dataMap = new HashMap<String, Object>();
	if (request.getParameter("group") != null) {
		group = Integer.parseInt(request.getParameter("group"));
	}
	dataMap.put("group", group);
	map = storesHandlerService.getItemTypeGLList(dataMap);

	jsp = "responseItemTypeGLStores";


	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView(jsp, "map", map);
}




public ModelAndView generateActualStockReport(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> requestParameters = new HashMap<String, Object>();
	Map map = new HashMap();
	Box box = HMSUtil.getBox(request);
	int hospitalId = 0;
	int deptId = 0;
	String hospitalName = "";
	String deptName = "";
	String query = "";
	HttpSession session = request.getSession();
	String query1="";
	String flag="";
	try {

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			hospitalName = storesHandlerService.getHospitalName(hospitalId);
			requestParameters.put("hospitalId",hospitalId); // javed khan
			requestParameters.put("HOSP_NAME", hospitalName);
		}

		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
			requestParameters.put("deptId", deptId);
		}

		if (session.getAttribute("deptName") != null) {
			deptName = session.getAttribute("deptName").toString();
			requestParameters.put("deptName", deptName);
		}
		if (request.getParameter("item_id") != null && !request.getParameter("item_id").equals("")) {
			query1 = query1 + "AND mas_store_item.item_id = '"
					+ request.getParameter("item_id") + "' ";
			query = query + "AND mas_store_item.item_id =:item";
			requestParameters.put("item", request.getParameter("item_id"));
		}
		if (request.getParameter("pvmsNiv") != null &&(!request.getParameter("pvmsNiv").equals(""))) {
			query1 = query1 + "AND mas_store_item.pvms_no = '"
							+ request.getParameter("pvmsNiv").toUpperCase() + "' ";
			
			query = query + "AND mas_store_item.pvms_no =:pvms";
			requestParameters.put("pvms", request.getParameter("pvmsNiv").toUpperCase());
		}
		if (request.getParameter("itemId") != null &&(!request.getParameter("itemId").equals(""))) {
			query1 = query1 + "AND mas_store_item.ITEM_ID = '"
							+ request.getParameter("itemId") + "' ";
			query = query + "AND mas_store_item.item_id =:item1";
			requestParameters.put("item1", request.getParameter("itemId"));
		}
		if (request.getParameter("flag") != null &&(!request.getParameter("flag").equals(""))) {
			flag=request.getParameter("flag") ;
		}
	


	} catch (Exception e)
	{
		e.printStackTrace();
	}

	Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
	requestParameters.put("QUERY", query);
	requestParameters.put("QUERY1", query1);
	String reportName = "";
	if(flag.equalsIgnoreCase("j")){
		String report=(String)box.getString("reportType");
		requestParameters.put("report_Type",report);
		map = storesHandlerService.showActualStockReportJsp();
		Map<String, Object> actualStock = storesHandlerService.getActualStock(requestParameters);
		map.put("actualStock", actualStock);
		map.put("reportType", box.getString("reportType"));
		String jsp="actualStockReport.jsp";
		title="Actual Stock Report";
		map.put("contentJsp", jsp);
		map.put("title", title);
	return new ModelAndView("indexB","map", map);

	}else{
	if (box.getString("reportType").equals("summary")) { 
		reportName = "Actual_stock_Register_smc";
	} else if (box.getString("reportType").equals("detail")) { 
		reportName = "Stock_details_rep_batch_sac_smc";
	}

	HMSUtil.generateReport(reportName, requestParameters,
			(Connection) connectionMap.get("con"), response,
			getServletContext());

	return null;
	}
}
public ModelAndView showBalanceJsp(HttpServletRequest request,
		HttpServletResponse response) {

	Map<String, Object> map = new HashMap<String, Object>();
	//---- Retriving User Name,Hospital Id,Department Id from Session-----
	String userName = "";
	int deptId = 0;
	int hospitalId = 0;

	HttpSession session = request.getSession();
	if (session.getAttribute("userName") != null)
		userName = (String) session.getAttribute("userName");
	if (session.getAttribute("hospitalId") != null)
		hospitalId = Integer.parseInt(""
				+ session.getAttribute("hospitalId"));
	if (session.getAttribute("deptId") != null)
		deptId = Integer.parseInt("" + session.getAttribute("deptId"));
	// --------------------------------------------------------------------------------
	Map<String, Object> dataMap = new HashMap<String, Object>();
	dataMap.put("deptId", deptId);
	dataMap.put("hospitalId", hospitalId);
	dataMap.put("userName", userName);
	map = storesHandlerService.showBalance(dataMap);
	jsp = "storeBalance";
	jsp = jsp + ".jsp";
	title = "Balance";
	map.put("contentJsp", jsp);
	map.put("title", title);

	return new ModelAndView("indexB", "map", map);

}

public ModelAndView enterRCReceivedJsp(HttpServletRequest request,
		HttpServletResponse response) {		

	Map<String, Object> map = new HashMap<String, Object>();
	//---- Retriving User Name,Hospital Id,Department Id from Session-----
	Box box = HMSUtil.getBox(request);
	String userName = "";
	int deptId = 0;
	int hospitalId = 0;
	List<Object[]> employeeList = new ArrayList<Object[]>();

	HttpSession session = request.getSession();
	if (session.getAttribute("userName") != null)
		userName = (String) session.getAttribute("userName");
	if (session.getAttribute("hospitalId") != null)
		hospitalId = Integer.parseInt(""
				+ session.getAttribute("hospitalId"));
	if (session.getAttribute("deptId") != null)
		deptId = Integer.parseInt("" + session.getAttribute("deptId"));
	// --------------------------------------------------------------------------------
	
	box.put("deptId", deptId);
	box.put("hospitalId", hospitalId);
	box.put("userName", userName);
	/*map = storesHandlerService.showBalance(dataMap);*/
	map = storesHandlerService.getItemRCList(box);
	employeeList = storesHandlerService.getEmployeeListForDepartment(box);
	jsp = "enterRCReceivedJsp";
	jsp +=".jsp";
	title = "Balance";
	map.put("contentJsp", jsp);
	map.put("title", title);
	map.put("employeeList", employeeList);

	return new ModelAndView("indexB", "map", map);

}

public ModelAndView showRCReceiveJsp(HttpServletRequest request,
		HttpServletResponse response) {
	
	Map<String, Object> map = new HashMap<String, Object>();
	//---- Retriving User Name,Hospital Id,Department Id from Session-----
	String userName = "";
	int deptId = 0;
	int hospitalId = 0;
	
	HttpSession session = request.getSession();
	if (session.getAttribute("userName") != null)
		userName = (String) session.getAttribute("userName");
	if (session.getAttribute("hospitalId") != null)
		hospitalId = Integer.parseInt(""
				+ session.getAttribute("hospitalId"));
	if (session.getAttribute("deptId") != null)
		deptId = Integer.parseInt("" + session.getAttribute("deptId"));
	// --------------------------------------------------------------------------------
	Map<String, Object> dataMap = new HashMap<String, Object>();
	dataMap.put("deptId", deptId);
	dataMap.put("hospitalId", hospitalId);
	dataMap.put("userName", userName);
	if(deptId==135)
	map = storesHandlerService.waitingForRateContract(dataMap);
	map.putAll(storesHandlerService.showBalance(dataMap));
	jsp = "rcReceive";
	jsp = jsp + ".jsp";
	title = "Balance";
	map.put("contentJsp", jsp);
	map.put("title", title);
	
	return new ModelAndView("indexB", "map", map);
	
}

public ModelAndView addNextOrSubmitBalance(HttpServletRequest request,
		HttpServletResponse response) {

	StoreBalanceM storeBalanceM = new StoreBalanceM();
	StoreBalanceT storeBalanceT = new StoreBalanceT();

	String balanceNo = "";
	int sectionId = 0;
	int pageNo = 1;
	int balanceId = 0;
	Date balanceDate = null;
	int approvedByEmployeeId = 0;
	String remarks = "";
	String buttonName = "";
	int itemId = 1;
	int stockIn = 0;
	int qtyInDemand = 0;
	int qtyInMmf = 0;
	int qtyReceived = 0;
	int radioVal = 0;
	int noOfRows = 0;

	Map<String, Object> utilMap = new HashMap<String, Object>();
	utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
	String lastChgDate = (String) utilMap.get("currentDate");
	String lastChgTime = (String) utilMap.get("currentTime");
	String lastChgBy = "";
	Map<String, Object> infoMap = new HashMap<String, Object>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	Map<String, Object> map = new HashMap<String, Object>();
	String successfullyAdded = "no";
	List expiryDateList = new ArrayList();
	Box box = HMSUtil.getBox(request);
	String url = "";
	int rows = 0;
	int deptId = 0;
	int hospitalId = 0;
	int userId = 0;
	session = request.getSession();
	if (session.getAttribute("hospitalId") != null)
		hospitalId = Integer.parseInt(""
				+ session.getAttribute("hospitalId"));

	if (session.getAttribute("deptId") != null)
		deptId = Integer.parseInt("" + session.getAttribute("deptId"));

	if (session.getAttribute("userId") != null)
		userId = Integer.parseInt("" + session.getAttribute("userId"));

	try {
		if (request.getParameter("buttonName") != null) {
			buttonName = request.getParameter("buttonName");
		}
		if (request.getParameter(BALANCE_ID) != null) {
			balanceId = Integer.parseInt(request.getParameter(BALANCE_ID));
		}

		if (request.getParameter(CHANGED_BY) != null
				&& !(request.getParameter(CHANGED_BY).equals(""))) {
			lastChgBy = request.getParameter(CHANGED_BY);
		}
		if (request.getParameter(CHANGED_DATE) != null
				&& !(request.getParameter(CHANGED_DATE).equals(""))) {
			lastChgDate = request.getParameter(CHANGED_DATE);
		}
		if (request.getParameter(CHANGED_TIME) != null
				&& !(request.getParameter(CHANGED_TIME).equals(""))) {
			lastChgTime = request.getParameter(CHANGED_TIME);
		}

		if (request.getParameter(NO_OF_ROWS) != null) {
			noOfRows = Integer.parseInt(request.getParameter(NO_OF_ROWS));
		}
		if (request.getParameter("pageNo") != null) {
			pageNo = Integer.parseInt(request.getParameter("pageNo"));
		}

		if (request.getParameter(BALANCE_NO) != null) {
			balanceNo = (request.getParameter(BALANCE_NO));
		}

		if (request.getParameter(BALANCE_DATE) != null) {
			SimpleDateFormat formatterIn = new SimpleDateFormat(
					"dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat(
					"yyyy-MM-dd");
			String date4MySQL = (request.getParameter(BALANCE_DATE));
			// balanceDate = java.sql.Date.valueOf(date4MySQL);
			balanceDate = HMSUtil
					.convertStringTypeDateToDateType(date4MySQL);
		}
		if (request.getParameter(REMARKS) != null
				&& !(request.getParameter(REMARKS).equals(""))) {
			remarks = request.getParameter(REMARKS);
		}

		if (session.getAttribute("users") != null) {
			Users users = (Users) session.getAttribute("users");
			approvedByEmployeeId = users.getEmployee().getId();
		}

		/*
		 * if (request.getParameter(APPROVED_BY_EMPLOYEE_ID_BALANCE) !=
		 * null) { approvedByEmployeeId = Integer.parseInt(request
		 * .getParameter(APPROVED_BY_EMPLOYEE_ID_BALANCE)); }
		 */

	} catch (Exception e) {

		e.printStackTrace();
	}
	String headerStored = "no";
	if (pageNo == 1) {
		try {

			// storeBalanceM.setBalanceNo(balanceNo);

			storeBalanceM.setBalanceDate(balanceDate);
			storeBalanceM.setBalanceNo(balanceNo);

			MasEmployee approvedBy = new MasEmployee();
			approvedBy.setId(approvedByEmployeeId);
			storeBalanceM.setApprovedBy(approvedBy);

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(deptId);
			storeBalanceM.setDepartment(masDepartment);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			storeBalanceM.setHospital(masHospital);

			storeBalanceM.setRemarks(remarks);
			storeBalanceM.setStatus("P");
			Users users = new Users();
			users.setId(userId);
		//	storeBalanceM.setLastChgBy(users);

			storeBalanceM.setLastChgBy(lastChgBy);

			storeBalanceM.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(lastChgDate));

			storeBalanceM.setLastChgTime(lastChgTime);

			storeBalanceM.setStatus("o");

		} catch (Exception e) {
			e.printStackTrace();
		}
	} else {
		headerStored = "yes";
		infoMap.put("headerStored", headerStored);
	}

	int length = 0;
	List<StoreBalanceT> storeBalanceTlist = new ArrayList<StoreBalanceT>(10);
	BigDecimal[] qtyArray = new BigDecimal[10];
	BigDecimal[] unitRateAmountArray = new BigDecimal[10];
	BigDecimal[] totalAmountArray = new BigDecimal[10];
	try {

		Vector mrp = box.getVector("mrp");

		Vector dispensingPrice = box.getVector("dispensingPrice");
		Vector expiryDate = box.getVector("expiryDate");
		Vector manufactureDate = box.getVector("manufactureDate");
		Vector amount = box.getVector("amountBalanceTemp");
		//int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,SR_NO);
		//int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(request, ITEM_ID);
		Vector itemIds = box.getVector("itemId");
		Vector batchNo = box.getVector("batch");
		Vector manufactureId = box.getVector("manufacturerId");
		Vector brandId = box.getVector("brandId");
		Vector qty = box.getVector("qtyBalance");
		Vector unitRate = box.getVector("unitRateBalance");
		
		// int brandIdArray[] = JKTRequestUtils.getRequiredIntParameters(
		// request, BRAND_ID);
		//String batchNoArray[] = JKTRequestUtils.getRequiredStringParameters(request, BATCH_NO);
		//String expriyDateArray[] = JKTRequestUtils.getRequiredStringParameters(request, EXPIRY_DATE);

		/*String xx[] = JKTRequestUtils.getRequiredStringParameters(request,
				QTY_BALANCE);
		int xxLegnt = xx.length;
		for (int i = 0; i < xxLegnt; i++) {
			BigDecimal val = new BigDecimal(xx[i]);
			qtyArray[i] = val;
		}*/
		/*String yy[] = JKTRequestUtils.getRequiredStringParameters(request,
				UNIT_RATE_BALANCE);
		int yyLegnt = yy.length;
		for (int i = 0; i < yyLegnt; i++) {
			BigDecimal val = new BigDecimal(yy[i]);
			unitRateAmountArray[i] = val;
		}*/

		/*if (buttonName.equals("next")) {
			length = 8;
		} else {
			length = noOfRows;
		}*/
		for (int i = 0; i < itemIds.size(); i++) {
			
			if (itemIds.get(i) != null && !itemIds.get(i).equals("")) {
				StoreBalanceT storeBalanceTObj = new StoreBalanceT();
			
				MasStoreItem masItem = new MasStoreItem();
				masItem.setId(Integer.parseInt(itemIds.get(i).toString()));
				storeBalanceTObj.setItem(masItem);

				/*if (!qtyArray[i].equals("0")) {
					storeBalanceTObj.setQty(qtyArray[i]);
				} else {
					storeBalanceTObj.setQty(null);
				}*/
				
				if (qty.get(i) != null && !qty.get(i).equals("")) {
					storeBalanceTObj.setQty(new BigDecimal(qty.get(i).toString()));
				} else {
					storeBalanceTObj.setQty(null);
				}
				
				if (unitRate.get(i) != null && !unitRate.get(i).equals("")) {
					storeBalanceTObj.setUnitRate(new BigDecimal(unitRate.get(i).toString()));
				} else {
					storeBalanceTObj.setUnitRate(null);
				}
				
				/*if (!unitRateAmountArray[i].equals("0")) {
					storeBalanceTObj.setUnitRate(unitRateAmountArray[i]);
				} else {
					storeBalanceTObj.setUnitRate(null);
				}*/
				if (expiryDate.get(i) != null && !expiryDate.get(i).equals("")) {
					storeBalanceTObj.setExpiryDate(HMSUtil
							.convertStringTypeDateToDateType(expiryDate
									.get(i).toString()));
				}else{
					storeBalanceTObj.setExpiryDate(null);
				}
				if (manufactureDate.get(i) != null
						&& !manufactureDate.get(i).equals("")) {
//					storeBalanceTObj
//							.setManufactureDate(HMSUtil
//									.convertStringTypeDateToDateType(manufactureDate
//											.get(i).toString()));
				}else{
					//storeBalanceTObj.setManufactureDate(null);
				}
				if (amount.get(i) != null && !amount.get(i).equals("")) {
					storeBalanceTObj.setTotalAmount(new BigDecimal(amount.get(i).toString()));
				}
				if (batchNo.get(i) != null && !batchNo.get(i).equals("")) {
					storeBalanceTObj.setBatchNo(batchNo.get(i).toString());
				}
				if (manufactureId.get(i) != null && !manufactureId.get(i).equals("")) {
					MasManufacturer masManufacturer = new MasManufacturer();
					masManufacturer.setId(Integer.parseInt(manufactureId.get(i).toString()));
					storeBalanceTObj.setManufacturer(masManufacturer);
				}
				if (brandId.get(i) != null && !brandId.get(i).equals("")) {
					storeBalanceTObj.setBrand(new MasStoreBrand(Integer.parseInt(brandId.get(i).toString())));
				}
				/*
				 * if (mrp.get(i) != null && !mrp.get(i).equals("")) {
				 * storeBalanceTObj.setMrp(new BigDecimal(mrp.get(i)
				 * .toString())); } if (dispensingPrice.get(i) != null &&
				 * !dispensingPrice.get(i).equals("")) {
				 * storeBalanceTObj.setDispencingPrice(new BigDecimal(
				 * dispensingPrice.get(i).toString())); }/*
				 * 
				 * /* storeBalanceTObj.setQty(qtyArray[i]);
				 * storeBalanceTObj.setUnitRate(unitRateAmountArray[i]);
				 */

				/*if (!batchNoArray[i].equals("emptyString")) {
					storeBalanceTObj.setBatchNo(batchNoArray[i]);
				} else {
					storeBalanceTObj.setBatchNo(null);
				}*/
				/*if (!expriyDateArray[i].equals("emptyString")) {
					storeBalanceTObj
							.setExpiryDate(HMSUtil
									.convertStringTypeDateToDateType(expriyDateArray[i]));
				} else {
					storeBalanceTObj.setExpiryDate(null);
				}*/

				storeBalanceTlist.add(storeBalanceTObj);

			}
		}

	} catch (Exception e) {
		e.printStackTrace();
	}
	try {
		dataMap.put("balanceDate", balanceDate);
		dataMap.put("deptId", deptId);
		dataMap.put("userId", userId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("storeBalanceM", storeBalanceM);
		dataMap.put("storeBalanceTList", storeBalanceTlist);
		dataMap.put("pageNo", pageNo);
		dataMap.put("balanceId", balanceId);
		dataMap.put("balanceNo", balanceNo);
		synchronized (this) {
			map = (Map) storesHandlerService.addNextOrSubmitBalance(
					dataMap, box);
		}
		if (map.get("balanceId") != null)
			balanceId = Integer.parseInt("" + map.get("balanceId"));

		if (map.get("successfullyAdded") != null)
			successfullyAdded = "" + map.get("successfullyAdded");
	} catch (Exception e) {
		e.printStackTrace();
	}
	String messageTOBeVisibleToTheUser = "";
	if (successfullyAdded.equals("yes")) {
		messageTOBeVisibleToTheUser = "Balance Records Added Successfully";
	} else {
		messageTOBeVisibleToTheUser = "Balance Records Not Added Successfully";
	}
	if (buttonName.equals("next")) {
		jsp = "storeBalance";
	} else {
		jsp = STORES_MESSAGE_OPE_JSP;
		url = "/hms/hms/stores?method=showBalanceJsp";
	}
	String balanceNoDisplay = "";
	if (map.get("balanceNoDisplay") != null) {
		balanceNoDisplay = (String) map.get("balanceNoDisplay");
	}
	pageNo = pageNo + 1;
	jsp += ".jsp";
	map.put("balanceNo", balanceNo);
	map.put("deptId", deptId);
	map.put("balanceDate", balanceDate);
	map.put("approvedByEmployeeId", approvedByEmployeeId);
	map.put("remarks", remarks);
	map.put("pageNo", pageNo);
	map.put("contentJsp", jsp);
	map.put("url", url);
	map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
	return new ModelAndView("index", "map", map);
}

//  For RC Receive
public ModelAndView rcReceive(HttpServletRequest request,
		HttpServletResponse response) {
	
	StoreBalanceM storeBalanceM = new StoreBalanceM();
	StoreBalanceT storeBalanceT = new StoreBalanceT();
	
	String balanceNo = "";
	int sectionId = 0;
	int pageNo = 1;
	int balanceId = 0;
	Date balanceDate = null;
	int approvedByEmployeeId = 0;
	String remarks = "";
	String buttonName = "";
	int itemId = 1;
	int stockIn = 0;
	int qtyInDemand = 0;
	int qtyInMmf = 0;
	int qtyReceived = 0;
	int radioVal = 0;
	int noOfRows = 0;
	
	Map<String, Object> utilMap = new HashMap<String, Object>();
	utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
	String lastChgDate = (String) utilMap.get("currentDate");
	String lastChgTime = (String) utilMap.get("currentTime");
	String lastChgBy = "";
	Map<String, Object> infoMap = new HashMap<String, Object>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	Map<String, Object> map = new HashMap<String, Object>();
	String successfullyAdded = "no";
	List expiryDateList = new ArrayList();
	Box box = HMSUtil.getBox(request);
	String url = "";
	int rows = 0;
	int deptId = 0;
	int hospitalId = 0;
	int userId = 0;
	session = request.getSession();
	if (session.getAttribute("hospitalId") != null)
		hospitalId = Integer.parseInt(""
				+ session.getAttribute("hospitalId"));
	
	if (session.getAttribute("deptId") != null)
		deptId = Integer.parseInt("" + session.getAttribute("deptId"));
	
	if (session.getAttribute("userId") != null)
		userId = Integer.parseInt("" + session.getAttribute("userId"));
	
	try {
		if (request.getParameter("buttonName") != null) {
			buttonName = request.getParameter("buttonName");
		}
		if (request.getParameter(BALANCE_ID) != null) {
			balanceId = Integer.parseInt(request.getParameter(BALANCE_ID));
		}
		
		if (request.getParameter(CHANGED_BY) != null
				&& !(request.getParameter(CHANGED_BY).equals(""))) {
			lastChgBy = request.getParameter(CHANGED_BY);
		}
		if (request.getParameter(CHANGED_DATE) != null
				&& !(request.getParameter(CHANGED_DATE).equals(""))) {
			lastChgDate = request.getParameter(CHANGED_DATE);
		}
		if (request.getParameter(CHANGED_TIME) != null
				&& !(request.getParameter(CHANGED_TIME).equals(""))) {
			lastChgTime = request.getParameter(CHANGED_TIME);
		}
		
		if (request.getParameter(NO_OF_ROWS) != null) {
			noOfRows = Integer.parseInt(request.getParameter(NO_OF_ROWS));
		}
		if (request.getParameter("pageNo") != null) {
			pageNo = Integer.parseInt(request.getParameter("pageNo"));
		}
		
		if (request.getParameter(BALANCE_NO) != null) {
			balanceNo = (request.getParameter(BALANCE_NO));
		}
		
		if (request.getParameter(BALANCE_DATE) != null) {
			SimpleDateFormat formatterIn = new SimpleDateFormat(
					"dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat(
					"yyyy-MM-dd");
			String date4MySQL = (request.getParameter(BALANCE_DATE));
			// balanceDate = java.sql.Date.valueOf(date4MySQL);
			balanceDate = HMSUtil
					.convertStringTypeDateToDateType(date4MySQL);
		}
		if (request.getParameter(REMARKS) != null
				&& !(request.getParameter(REMARKS).equals(""))) {
			remarks = request.getParameter(REMARKS);
		}
		
		if (session.getAttribute("users") != null) {
			Users users = (Users) session.getAttribute("users");
			approvedByEmployeeId = users.getEmployee().getId();
		}
	} catch (Exception e) {
		
		e.printStackTrace();
	}
	String headerStored = "no";
	if (pageNo == 1) {
		try {
			
			// storeBalanceM.setBalanceNo(balanceNo);
			
			storeBalanceM.setBalanceDate(balanceDate);
			storeBalanceM.setBalanceNo(balanceNo);
			
			MasEmployee approvedBy = new MasEmployee();
			approvedBy.setId(approvedByEmployeeId);
			storeBalanceM.setApprovedBy(approvedBy);
			
			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(deptId);
			storeBalanceM.setDepartment(masDepartment);
			
			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			storeBalanceM.setHospital(masHospital);
			
			storeBalanceM.setRemarks(remarks);
			storeBalanceM.setStatus("P");
			Users users = new Users();
			users.setId(userId);
			//	storeBalanceM.setLastChgBy(users);
			
			storeBalanceM.setLastChgBy(lastChgBy);
			
			storeBalanceM.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(lastChgDate));
			
			storeBalanceM.setLastChgTime(lastChgTime);
			
			storeBalanceM.setStatus("o");
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	} else {
		headerStored = "yes";
		infoMap.put("headerStored", headerStored);
	}
	
	int length = 0;
	List<StoreBalanceT> storeBalanceTlist = new ArrayList<StoreBalanceT>(10);
	BigDecimal[] qtyArray = new BigDecimal[10];
	BigDecimal[] unitRateAmountArray = new BigDecimal[10];
	BigDecimal[] totalAmountArray = new BigDecimal[10];
	try {
		
		Vector mrp = box.getVector("mrp");
		
		Vector dispensingPrice = box.getVector("dispensingPrice");
		Vector expiryDate = box.getVector("expiryDate");
		Vector manufactureDate = box.getVector("manufactureDate");
		Vector amount = box.getVector("amountBalanceTemp");
		//int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,SR_NO);
		//int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(request, ITEM_ID);
		Vector itemIds = box.getVector("itemId");
		Vector batchNo = box.getVector("batch");
		Vector manufactureId = box.getVector("manufacturerId");
		Vector brandId = box.getVector("brandId");
		Vector qty = box.getVector("qtyBalance");
		Vector unitRate = box.getVector("unitRateBalance");
		for (int i = 0; i < itemIds.size(); i++) {
			
			if (itemIds.get(i) != null && !itemIds.get(i).equals("")) {
				StoreBalanceT storeBalanceTObj = new StoreBalanceT();
				
				MasStoreItem masItem = new MasStoreItem();
				masItem.setId(Integer.parseInt(itemIds.get(i).toString()));
				storeBalanceTObj.setItem(masItem);
				
				if (qty.get(i) != null && !qty.get(i).equals("")) {
					storeBalanceTObj.setQty(new BigDecimal(qty.get(i).toString()));
				} else {
					storeBalanceTObj.setQty(null);
				}
				
				if (unitRate.get(i) != null && !unitRate.get(i).equals("")) {
					storeBalanceTObj.setUnitRate(new BigDecimal(unitRate.get(i).toString()));
				} else {
					storeBalanceTObj.setUnitRate(null);
				}
				if (expiryDate.get(i) != null && !expiryDate.get(i).equals("")) {
					storeBalanceTObj.setExpiryDate(HMSUtil
							.convertStringTypeDateToDateType(expiryDate
									.get(i).toString()));
				}else{
					storeBalanceTObj.setExpiryDate(null);
				}
				if (manufactureDate.get(i) != null
						&& !manufactureDate.get(i).equals("")) {
//					storeBalanceTObj
//							.setManufactureDate(HMSUtil
//									.convertStringTypeDateToDateType(manufactureDate
//											.get(i).toString()));
				}else{
					//storeBalanceTObj.setManufactureDate(null);
				}
				if (amount.get(i) != null && !amount.get(i).equals("")) {
					storeBalanceTObj.setTotalAmount(new BigDecimal(amount.get(i).toString()));
				}
				if (batchNo.get(i) != null && !batchNo.get(i).equals("")) {
					storeBalanceTObj.setBatchNo(batchNo.get(i).toString());
				}
				if (manufactureId.get(i) != null && !manufactureId.get(i).equals("")) {
					MasManufacturer masManufacturer = new MasManufacturer();
					masManufacturer.setId(Integer.parseInt(manufactureId.get(i).toString()));
					storeBalanceTObj.setManufacturer(masManufacturer);
				}
				if (brandId.get(i) != null && !brandId.get(i).equals("")) {
					storeBalanceTObj.setBrand(new MasStoreBrand(Integer.parseInt(brandId.get(i).toString())));
				}
				storeBalanceTlist.add(storeBalanceTObj);
				
			}
		}
		
	} catch (Exception e) {
		e.printStackTrace();
	}
	try {
		dataMap.put("balanceDate", balanceDate);
		dataMap.put("deptId", deptId);
		dataMap.put("userId", userId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("storeBalanceM", storeBalanceM);
		dataMap.put("storeBalanceTList", storeBalanceTlist);
		dataMap.put("pageNo", pageNo);
		dataMap.put("balanceId", balanceId);
		dataMap.put("balanceNo", balanceNo);
		synchronized (this) {
			map = (Map) storesHandlerService.rcReceive(dataMap, box);
		}
		if (map.get("balanceId") != null)
			balanceId = Integer.parseInt("" + map.get("balanceId"));
		
		if (map.get("successfullyAdded") != null)
			successfullyAdded = "" + map.get("successfullyAdded");
	} catch (Exception e) {
		e.printStackTrace();
	}
	String messageTOBeVisibleToTheUser = "";
	if (successfullyAdded.equals("yes")) {
		messageTOBeVisibleToTheUser = "Balance Records Added Successfully";
	} else {
		messageTOBeVisibleToTheUser = "Balance Records Not Added Successfully";
	}
	if (buttonName.equals("next")) {
		jsp = "storeBalance";
	} else {
		jsp = STORES_MESSAGE_JSP;
		url = "/hms/hms/stores?method=showBalanceJsp";
	}
	String balanceNoDisplay = "";
	if (map.get("balanceNoDisplay") != null) {
		balanceNoDisplay = (String) map.get("balanceNoDisplay");
	}
	pageNo = pageNo + 1;
	jsp += ".jsp";
	map.put("balanceNo", balanceNo);
	map.put("balanceDate", balanceDate);
	map.put("approvedByEmployeeId", approvedByEmployeeId);
	map.put("remarks", remarks);
	map.put("pageNo", pageNo);
	map.put("contentJsp", jsp);
	map.put("url", url);
	map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
	return new ModelAndView("index", "map", map);
}

public ModelAndView printIndentTODepo(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> detailsMap = new HashMap<String, Object>();
	Map<String, Object> parameters = new HashMap<String, Object>();
	String query = "";
String indentNo="";
int deptId = 0;
int hospitalId = 0;  // javed khan
	try {
		if (request.getParameter("indentNo") != null
				&& (!request.getParameter("indentNo").equals(""))) {
			indentNo=request.getParameter("indentNo") ;
		}
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));  // javed khan



	} catch (Exception e) {
		e.printStackTrace();
	}
	detailsMap = storesHandlerService.getConnectionForReport();
	parameters.put("INDENT_NO", indentNo);
	parameters.put("DEPART", deptId);
	parameters.put("hospitalId", hospitalId);  // javed khan
	try {
		/*byte[] bytes = null;
		try {
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport("Indent_To_Depot"),
					parameters, (Connection) detailsMap.get("con"));

		} catch (JRException e) {

			e.printStackTrace();
		}
		response.setHeader("Content-Disposition", "inline; filename="
				+ "dgInvestigationRequired" + ".pdf");
		response.setContentType("application/pdf");
		response.setContentLength(bytes.length);
		ServletOutputStream ouputStream;
		try {
			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}*/
		String reportName = "New_Indent_To_Depot";
		HMSUtil.generateReport(reportName, parameters,
				(Connection) detailsMap.get("con"), response,
				getServletContext());

		return null;
	} catch (IllegalStateException e) {
		e.printStackTrace();
	}

	return null;
}
public ModelAndView getGrnNoListForAutoComplete(HttpServletRequest request,
		HttpServletResponse response) {
	String itemNameField = "";
	Box box = HMSUtil.getBox(request);

	String autoHint = "";
	Map<String, Object> dataMap = new HashMap<String, Object>();
	if (request.getParameter("requiredField") != null) {
		itemNameField = (request.getParameter("requiredField"));
	}
	if (request.getParameter(itemNameField) != null) {
		autoHint = (request.getParameter(itemNameField));
	}
	box.put("autoHint", autoHint);
	box.put("type", "grid");

	dataMap.put("autoHint", autoHint);
	map = storesHandlerService.getGrnNoListForAutoComplete(box);
	jsp = "grnNoList";
	return new ModelAndView(jsp, "map", map);

}

public ModelAndView getGrnNoListForAutoCompleteForReports(
		HttpServletRequest request, HttpServletResponse response) {
	String itemNameField = "";
	Box box = HMSUtil.getBox(request);

	String autoHint = "";
	int deptId = 0;
	Map<String, Object> dataMap = new HashMap<String, Object>();
	if (request.getParameter("requiredField") != null) {
		itemNameField = (request.getParameter("requiredField"));
	}
	if (request.getParameter(itemNameField) != null) {
		autoHint = (request.getParameter(itemNameField));
	}
	if (session.getAttribute("deptId") != null) {
		deptId = (Integer) session.getAttribute("deptId");
	}
	box.put("autoHint", autoHint);
	box.put("deptId", deptId);

	box.put("type", "reports");
	dataMap.put("autoHint", autoHint);
	map = storesHandlerService.getGrnNoListForAutoComplete(box);
	jsp = "grnNoList";
	return new ModelAndView(jsp, "map", map);

}

public ModelAndView searchGrn(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> dataMap = new HashMap<String, Object>();
	Box box = HMSUtil.getBox(request);
	String fromDate = "";
	String toDate = "";
	String grnNo = "";
	Integer deptId = 0;
	Integer hospitalId=0;
	String supplyType="";
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> tempMap = new HashMap<String, Object>();
	Map<String, Object> searchFieldMap = new HashMap<String, Object>();
	List<StoreGrnM> searchGrnList = new ArrayList<StoreGrnM>();
	HttpSession session = request.getSession();
	if (session.getAttribute("deptId") != null) {
		deptId = (Integer) session.getAttribute("deptId");
	}
	if(session.getAttribute("hospitalId")!=null){
		hospitalId=(Integer) session.getAttribute("hospitalId");
	}
	try {
		if (request.getParameter(FROM_DATE) != null) {
			fromDate = request.getParameter(FROM_DATE);

		}
		if (request.getParameter(TO_DATE) != null) {
			toDate = request.getParameter(TO_DATE);

		}
		if (request.getParameter(GRN_NO) != null) {
			grnNo = request.getParameter(GRN_NO);

		}
		if(request.getParameter("supplyType") != null){
			supplyType=request.getParameter("supplyType");
		}

	} catch (Exception e) {
		e.printStackTrace();
	}
	searchFieldMap.put("fromDate", fromDate);
	searchFieldMap.put("toDate", toDate);
	searchFieldMap.put("grnNo", grnNo);
	searchFieldMap.put("deptId", deptId);
	searchFieldMap.put("hospitalId",hospitalId);
	searchFieldMap.put("supplyType",supplyType);
	try {
		// tempMap = storesHandlerService.showGrnJsp(box, dataMap);
		// if (tempMap.get("searchGrnList") != null)
		// searchGrnList = (List) tempMap.get("searchGrnList");

		map = storesHandlerService.searchGrn(searchFieldMap);
		map.put("searchGrnList", searchGrnList);
	} catch (Exception e) {
		e.printStackTrace();
	}
	jsp = SEARCH_GRN_JSP;
	jsp = jsp + ".jsp";
	title = "GRN";
	map.put("contentJsp", jsp);
	map.put("title", title);

	return new ModelAndView("indexB", "map", map);
}

// For modifying GRN
/*
 * public ModelAndView modifyGrn(HttpServletRequest request,
 * HttpServletResponse response){ //System.out.println("inside controller of
 * modify Grn"); Map<String, Object> dataMap = new HashMap<String,
 * Object>(); Box box = HMSUtil.getBox(request); Map<String, Object> map =
 * new HashMap<String, Object>(); Map<String, Object> map2 = new
 * HashMap<String, Object>(); jsp = MODIFY_GRN_JSP; jsp += ".jsp"; int
 * radio_str=0; if (request.getParameter("parent") != null) { radio_str
 * =Integer.parseInt( request.getParameter("parent"));
 * map=(Map)storesHandlerService.getGrnModifyMap(radio_str); }
 * List<StoreGrnM> searchGrnList= new ArrayList<StoreGrnM>();
 *
 * map2=storesHandlerService.showGrnJsp(box, dataMap); searchGrnList=(List)
 * map2.get("searchGrnList"); map.put("searchGrnList", searchGrnList);
 * map.put("contentJsp",jsp); map.put("title", title);
 * map.put("radio_str",radio_str); return new ModelAndView("index","map",
 * map); }
 */
public ModelAndView updateCrv(HttpServletRequest request,
		HttpServletResponse response) {

	Box box = HMSUtil.getBox(request);
	Map<String, Object> dataMap = new HashMap<String, Object>();
	Map<String, Object> messMap = new HashMap<String, Object>();
	Map<String, Object> searchFieldMap = new HashMap<String, Object>();
	Map<String, Object> tempMap = new HashMap<String, Object>();
	List<StoreGrnM> searchGrnList = new ArrayList<StoreGrnM>();
	String fromDate = "";
	String toDate = "";
	String grnNo = "";
	HttpSession session = request.getSession();
	box.put("deptId", session.getAttribute("deptId"));
	box.put("hospitalId", session.getAttribute("hospitalId"));
	box.put("userName", session.getAttribute("userName"));
	dataMap.put("deptId", session.getAttribute("deptId"));
	dataMap.put("hospitalId", session.getAttribute("hospitalId"));
	dataMap.put("userName", session.getAttribute("userName"));
	try {
		/*
		 * if (request.getParameter(FROM_DATE) != null) { fromDate =
		 * request.getParameter(FROM_DATE); } if
		 * (request.getParameter(TO_DATE) != null) { toDate =
		 * request.getParameter(TO_DATE); }
		 *//*
			 * if (request.getParameter(GRN_NO) != null) { grnNo =
			 * request.getParameter(GRN_NO); }
			 */
	} catch (Exception e) {
	e.printStackTrace();
	}
	searchFieldMap.put("fromDate", fromDate);
	searchFieldMap.put("toDate", toDate);
	searchFieldMap.put("grnNo", grnNo);
	searchFieldMap.put("deptId", session.getAttribute("deptId"));

	boolean status = false;
	status = storesHandlerService.checkCrvStatus(box);
	if (!status) {
		messMap = storesHandlerService.updateCrv(box);
	} else {
		messMap.put("conFlag", true);
	}
	try {
		// tempMap = storesHandlerService.showGrnJsp(box, dataMap);

		// if (tempMap.get("searchGrnList") != null)
		// searchGrnList = (List) tempMap.get("searchGrnList");

		map = storesHandlerService.searchGrn(searchFieldMap);
		map.put("searchGrnList", searchGrnList);
	} catch (Exception e) {
		e.printStackTrace();
	}
	// String msg = map.get("messageTOBeVisibleToTheUser").toString();
	boolean flag = (Boolean) messMap.get("conFlag");
	// dataMap = storesHandlerService.showGrnJsp(box, dataMap);
	// map.put("messageTOBeVisibleToTheUser", msg);

	// boolean flag = false;
	String messageTOBeVisibleToTheUser = "";
	if (flag) {
		jsp = "modificationCRVDetail";
		// jsp = STORES_MESSAGE_JSP;
		messageTOBeVisibleToTheUser = "CRV has been updated Successfully";
		url = "/hms/hms/stores?method=showGrnJsp";
		map.put("messageType", "success");
	} else {
		jsp = "modificationCRVDetail";
		// jsp = STORES_MESSAGE_JSP;
		messageTOBeVisibleToTheUser = "CRV has not been updated Successfully";
		String url = "/hms/hms/stores?method=showGrnJsp";
		map.put("messageType", "failure");
	}

	map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
	jsp += ".jsp";
	map.put("contentJsp", jsp);
	map.put("dataMap", dataMap);
	return new ModelAndView("indexB", "map", map);
}
public ModelAndView modifyGrn(HttpServletRequest request,
		HttpServletResponse response) {

	HttpSession session = request.getSession();
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> purchaseMap = new HashMap<String, Object>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	Box box = HMSUtil.getBox(request);
	String jsp = "";
	jsp = MODIFY_GRN_JSP;
	jsp += ".jsp";
	int radio_str = 0;
	int deptId = 0;
	int searchPoId = 0;
	String items = "";

	if (session.getAttribute("deptId") != null) {
		deptId = (Integer) session.getAttribute("deptId");
	}
	if (request.getParameter("searchPoId") != null) {
		searchPoId = Integer.parseInt(""
				+ request.getParameter("searchPoId"));
	}

	if (request.getParameter("items") != null) {
		items = request.getParameter("items");
	}
	if (request.getParameter("parent") != null) {
		radio_str = Integer.parseInt(request.getParameter("parent"));

	}
	// javed khan
	map = (Map<String, Object>) storesHandlerService.modifyGrn(
			radio_str, 0, searchPoId, items);
	// purchaseMap = storesHandlerService.showGrnJsp(box, dataMap);
	// List<StoreGrnM> grnList = storesHandlerService.getGrnList();

	map.put("purchaseMap", purchaseMap);
	// map.put("grnList", grnList);
	map.put("contentJsp", jsp);
	map.put("title", title);
	map.put("radio_str", radio_str);

	return new ModelAndView("indexB", "map", map);
}
//barcode----
public ModelAndView showBarcodeJsp(HttpServletRequest request,
		HttpServletResponse response) {
	int grnId = 0;
	Map<String, Object> map = new HashMap<String, Object>();
	grnId = Integer.parseInt(request.getParameter(GRN_ID));
	map = (Map) storesHandlerService.getBarcodeList(grnId);
	jsp = BARCODE_JSP;
	jsp = jsp + ".jsp";
	title = "Barcode Label Generation";
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("indexB", "map", map);
}

// report grn
public ModelAndView showGrnReportJsp(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	HttpSession session = request.getSession();
	title = "GRN REPORT";
	int deptId = 0;
	if (session.getAttribute("deptId") != null)
		deptId = Integer.parseInt("" + session.getAttribute("deptId"));

	List<StoreGrnM> crvNumberList = storesHandlerService
			.getCrvNumberList(deptId);
	jsp = GRN_REPORT;
	jsp = jsp + ".jsp";
	map.put("crvNumberList", crvNumberList);
	map.put("contentJsp", jsp);
	map.put("title", title);

	return new ModelAndView("indexB", "map", map);
}

public ModelAndView generateGrnReport(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> requestParameters = new HashMap<String, Object>();
	int grnId = 0;
	if (request.getParameter(GRN_ID) != null
			&& !(request.getParameter(GRN_ID).equals(""))) {
		grnId = Integer.parseInt(request.getParameter(GRN_ID));
	}

	requestParameters = storesHandlerService.getGrnPrintMap(grnId);

	requestParameters.put("grnId", grnId);
	byte[] bytes = null;

	try {

		bytes = JasperRunManager.runReportToPdf(getCompiledReport(CRV),
				requestParameters, (Connection) requestParameters
						.get("conn"));
	} catch (JRException e) {
		e.printStackTrace();
	}

	response.setHeader("Content-Disposition", "attachment; filename=" + CRV
			+ ".pdf");
	response.setContentLength(bytes.length);
	ServletOutputStream ouputStream;
	try {
		ouputStream = response.getOutputStream();
		ouputStream.write(bytes, 0, bytes.length);
		ouputStream.flush();
		ouputStream.close();
	} catch (IOException e) {
		e.printStackTrace();
	}

	return new ModelAndView("indexB", "map", map);
}

// contingent bill report
public ModelAndView generateContingentBillReport(
		HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> requestParameters = new HashMap<String, Object>();
	int grnId = 0;

	if (request.getParameter(GRN_ID) != null
			&& !(request.getParameter(GRN_ID).equals(""))) {
		grnId = Integer.parseInt(request.getParameter(GRN_ID));
	}

	requestParameters = storesHandlerService
			.getContingentBillPrintMap(grnId);
	requestParameters.put("grnId", grnId);

	byte[] bytes = null;

	try {

		bytes = JasperRunManager.runReportToPdf(
				getCompiledReport(CONTINGENT_BILL), requestParameters,
				(Connection) requestParameters.get("conn"));
	} catch (JRException e) {
		e.printStackTrace();
	}
	response.setHeader("Content-Disposition", "attachment; filename="
			+ CONTINGENT_BILL + ".pdf");
	response.setContentLength(bytes.length);
	ServletOutputStream ouputStream;
	try {
		ouputStream = response.getOutputStream();
		ouputStream.write(bytes, 0, bytes.length);
		ouputStream.flush();
		ouputStream.close();
	} catch (IOException e) {
		e.printStackTrace();
	}

	return new ModelAndView("indexB", "map", map);
}

// performa report

public ModelAndView generateProformaReport(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> requestParameters = new HashMap<String, Object>();
	int grnId = 0;

	if (request.getParameter(GRN_ID) != null
			&& !(request.getParameter(GRN_ID).equals(""))) {
		grnId = Integer.parseInt(request.getParameter(GRN_ID));
	}

	requestParameters = storesHandlerService.getProformaPrintMap(grnId);
	requestParameters.put("grnId", grnId);

	byte[] bytes = null;

	try {

		bytes = JasperRunManager.runReportToPdf(
				getCompiledReport(PROFORMA), requestParameters,
				(Connection) requestParameters.get("conn"));
	} catch (JRException e) {
		e.printStackTrace();
	}
	response.setHeader("Content-Disposition", "attachment; filename="
			+ PROFORMA + ".pdf");
	response.setContentLength(bytes.length);
	ServletOutputStream ouputStream;
	try {
		ouputStream = response.getOutputStream();
		ouputStream.write(bytes, 0, bytes.length);
		ouputStream.flush();
		ouputStream.close();
	} catch (IOException e) {
		e.printStackTrace();
	}

	return new ModelAndView("indexB", "map", map);
}
public ModelAndView responseGridList(HttpServletRequest request,HttpServletResponse response)
{
	Box box = HMSUtil.getBox(request);
	Map<String, Object> map = new HashMap<String, Object>();
	String choice = "";
	int radio_str = 0;
	String items = "";
	int pageNo = 1;
	String loanInStatus = "";
	if (request.getParameter("sos") != null) {
		choice = request.getParameter("sos");
	}
	if (request.getParameter("items") != null) {
		items = request.getParameter("items");
	}
	if (request.getParameter("loanInStatus") != null)
	{
		loanInStatus = request.getParameter("loanInStatus");
	}
	//if (choice.equalsIgnoreCase("l") && !items.equals("")) {
		radio_str = Integer.parseInt(request.getParameter(INDENT_ID));
		map = (Map)storesHandlerService.getAdjustmentList(radio_str,pageNo, items, loanInStatus);
		/*}
	else if ((choice.equalsIgnoreCase("P") && !items.equals("")) || (choice.equalsIgnoreCase("A") && !items.equals(""))) {
		radio_str = Integer.parseInt(request.getParameter(INDENT_ID));
		map = (Map) storesHandlerService.getAdjustmentList(radio_str,
				pageNo, items, loanInStatus);*/
		jsp = "gridForGrnJspForIndent";
	return new ModelAndView(jsp, "map", map);
}


public ModelAndView responseGridForList(HttpServletRequest request,HttpServletResponse response) {
	Box box = HMSUtil.getBox(request);
	Map<String, Object> map = new HashMap<String, Object>();
	String choice = "";
	int radio_str = 0;
	String items = "";
	int pageNo = 1;
	String loanInStatus = "";
	if (request.getParameter("sos") != null) {
		choice = request.getParameter("sos");
	}
	/*
	if (request.getParameter("items") != null) {
		items = request.getParameter("items");
	}
	if (request.getParameter("loanInStatus") != null)
	{
		loanInStatus = request.getParameter("loanInStatus");
	}
	//if (choice.equalsIgnoreCase("l") && !items.equals("")) {
		radio_str = Integer.parseInt(request.getParameter(INDENT_ID));
		map = (Map)storesHandlerService.getAdjustmentList(radio_str,pageNo, items, loanInStatus);		*/
		/*}
	else if ((choice.equalsIgnoreCase("P") && !items.equals("")) || (choice.equalsIgnoreCase("A") && !items.equals(""))) {
		radio_str = Integer.parseInt(request.getParameter(INDENT_ID));
		map = (Map) storesHandlerService.getAdjustmentList(radio_str,
				pageNo, items, loanInStatus);*/
		jsp = "emptyGrid";
	return new ModelAndView(jsp, "map", map);
}


public ModelAndView responseExcelImp(HttpServletRequest request,HttpServletResponse response) {
	Box box = HMSUtil.getBox(request);
	Map<String, Object> map = new HashMap<String, Object>();
	String choice = "";
	int radio_str = 0;
	String items = "";
	int pageNo = 1;
	String loanInStatus = "";
	if (request.getParameter("sos") != null) {
		choice = request.getParameter("sos");
	}
	/*
	if (request.getParameter("items") != null) {
		items = request.getParameter("items");
	}
	if (request.getParameter("loanInStatus") != null)
	{
		loanInStatus = request.getParameter("loanInStatus");
	}
	//if (choice.equalsIgnoreCase("l") && !items.equals("")) {
		radio_str = Integer.parseInt(request.getParameter(INDENT_ID));
		map = (Map)storesHandlerService.getAdjustmentList(radio_str,pageNo, items, loanInStatus);		*/
		/*}
	else if ((choice.equalsIgnoreCase("P") && !items.equals("")) || (choice.equalsIgnoreCase("A") && !items.equals(""))) {
		radio_str = Integer.parseInt(request.getParameter(INDENT_ID));
		map = (Map) storesHandlerService.getAdjustmentList(radio_str,
				pageNo, items, loanInStatus);*/
		jsp = "resposeExelList";
	return new ModelAndView(jsp, "map", map);
}


public ModelAndView responseClearDiv(HttpServletRequest request,HttpServletResponse response) {
	Box box = HMSUtil.getBox(request);
	Map<String, Object> map = new HashMap<String, Object>();
	String choice = "";
	int radio_str = 0;
	String items = "";
	int pageNo = 1;
	String loanInStatus = "";
	jsp = "clearDiv";
	return new ModelAndView(jsp, "map", map);
}


public ModelAndView responseGridLoanInList(HttpServletRequest request,
		HttpServletResponse response) {
	Box box = HMSUtil.getBox(request);
	Map<String, Object> map = new HashMap<String, Object>();
	String choice = "";
	int radio_str = 0;
	String items = "";
	String loanInStatus = "";
	int pageNo = 1;
	if (request.getParameter("sos") != null) {
		choice = request.getParameter("sos");
	}

	if (request.getParameter("loanInStatus") != null) {
		loanInStatus = request.getParameter("loanInStatus");
	}
	if (choice.equalsIgnoreCase("l")) {
		radio_str = Integer.parseInt(request.getParameter("po_id"));
		map = (Map) storesHandlerService.getAdjustmentList(radio_str,
				pageNo, items, loanInStatus);
	}
	jsp = "grid";
	return new ModelAndView(jsp, "map", map);
}


public ModelAndView responseATSODate(HttpServletRequest request,
		HttpServletResponse response) {
	Box box = HMSUtil.getBox(request);
	Map<String, Object> map = new HashMap<String, Object>();
	String choice = "";
	int radio_str = 0;
	int pageNo = 1;
	if (request.getParameter(SOURCE_OF_SUPPLY) != null) {
		choice = request.getParameter(SOURCE_OF_SUPPLY);
	}
	if (choice.equalsIgnoreCase("l")) {
		radio_str = Integer.parseInt(request.getParameter(INDENT_ID));
		map = (Map) storesHandlerService.getATSODate(radio_str);
	}

	jsp = "responseATSODate";
	return new ModelAndView(jsp, "map", map);
}

public ModelAndView responseIndentList(HttpServletRequest request,HttpServletResponse response)
{
	HttpSession session = request.getSession();
	Box box = HMSUtil.getBox(request);
	Map<String, Object> map = new HashMap<String, Object>();
	String choice = "";
	int hospitalId=0;

	if (session.getAttribute("hospitalId") != null)
		hospitalId = Integer.parseInt(""
				+ session.getAttribute("hospitalId"));

	box.put("hospitalId", hospitalId);
	map = storesHandlerService.getResponseIndentList(box);
	if (box.getString(SOURCE_OF_SUPPLY).equalsIgnoreCase("A")) {
	jsp = "reposeIndentListAFMSD";
	}
	else if(box.getString(SOURCE_OF_SUPPLY).equalsIgnoreCase("L")){
		jsp = "responseIndentListLP";
	}
	return new ModelAndView(jsp, "map", map);
}

public ModelAndView responseProformaList(HttpServletRequest request,HttpServletResponse response)
{
	Box box = HMSUtil.getBox(request);
	Map<String, Object> map = new HashMap<String, Object>();
	String choice = "";
	int hospitalId=0;
	HttpSession session = request.getSession();
	if (session.getAttribute("hospitalId") != null)
		hospitalId = Integer.parseInt(""
				+ session.getAttribute("hospitalId"));

	box.put("hospitalId", hospitalId);
	map = storesHandlerService.getResponseProformaList(box);
	if (box.getString(SOURCE_OF_SUPPLY).equalsIgnoreCase("A")) {
	jsp = "reposeIndentListAFMSD";
	}
	else if(box.getString(SOURCE_OF_SUPPLY).equalsIgnoreCase("L")){
		jsp = "responseProformaList";
	}
	return new ModelAndView(jsp, "map", map);
}









public ModelAndView responsePoList(HttpServletRequest request,
		HttpServletResponse response) {
	Box box = HMSUtil.getBox(request);
	Map<String, Object> map = new HashMap<String, Object>();
	map = storesHandlerService.getResponsePoList(box);
	// jsp = "responseForPoList";
	jsp = "gridForLoanIn";
	return new ModelAndView(jsp, "map", map);
}

public ModelAndView responseGridForLoanInList(HttpServletRequest request,
		HttpServletResponse response) {
	Box box = HMSUtil.getBox(request);
	Map<String, Object> map = new HashMap<String, Object>();
	// map=storesHandlerService.showGridLoanInJsp(box);
	jsp = "gridForLoanIn";
	return new ModelAndView(jsp, "map", map);
}

// ------------------------------------- new grid
// method---------------------------

public ModelAndView getItemListForGrnByAutocomplete(HttpServletRequest request, HttpServletResponse response)
{
	Box box = HMSUtil.getBox(request);
	String sos = box.getString("sourceOfSupply").trim();
	String itemNameField = "";
	String autoHint = "";
	int indentId = 0;
	int hospitalId = 0;
	int deptId = 0;
	HttpSession session = request.getSession();
	if (session.getAttribute("userName") != null)
		userName = (String) session.getAttribute("userName");
	if (session.getAttribute("hospitalId") != null)
		hospitalId = Integer.parseInt(""
				+ session.getAttribute("hospitalId"));
	if (session.getAttribute("deptId") != null)
		deptId = Integer.parseInt("" + session.getAttribute("deptId"));

	Map<String, Object> dataMap = new HashMap<String, Object>();
	if (request.getParameter("requiredField") != null) {
		itemNameField = (request.getParameter("requiredField"));
	}
	if (request.getParameter(itemNameField) != null) {
		autoHint = (request.getParameter(itemNameField));
	}
	if (sos.equalsIgnoreCase("p") || (sos.equalsIgnoreCase("l")) || (sos.equalsIgnoreCase("a"))) {
		/*if (request.getParameter("indentId") != null || !(request.getParameter("indentId").equals(""))) {
			indentId = Integer.parseInt((request.getParameter("indentId")));
		}*/
	}
	List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
	dataMap.put("autoHint", autoHint);
	dataMap.put("deptId", deptId);
	dataMap.put("userName", userName);
	dataMap.put("hospitalId", hospitalId);
	dataMap.put("indentId", indentId);
	dataMap.put("box", box);
	map = storesHandlerService.getItemListForGrnByAutocomplete(dataMap);
	jsp = "result";
	return new ModelAndView(jsp, "map", map);
}
public void fillItemsForGrn(HttpServletRequest request,
		HttpServletResponse response) {
	HttpSession session = request.getSession();
	int deptId = 0;
	int hospitalId = 0;
	List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
	if (session.getAttribute("deptId") != null)
		deptId = Integer.parseInt("" + session.getAttribute("deptId"));
	
	if (session.getAttribute("hospitalId") != null)
		hospitalId = Integer.parseInt(""
				+ session.getAttribute("hospitalId"));
	
	
	Box box = HMSUtil.getBox(request);
	int poId = box.getInt("poId");
	String itemNameField = "";
	String nomenclature = "";
	Map<String, Object> dataMap = new HashMap<String, Object>();
	if (request.getParameter("requiredField") != null) {
		nomenclature = (request.getParameter("requiredField"));
	}
	List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
	List<StorePoDetail> poList = new ArrayList<StorePoDetail>();
	dataMap.put("nomenclature", nomenclature);
	dataMap.put("deptId", deptId);
	dataMap.put("poId", poId);
	dataMap.put("hospitalId",hospitalId);
	map = storesHandlerService.fillItemsForGrn(dataMap);
	if (map.get("itemList") != null) {
		itemList = (List) map.get("itemList");
	}
	if (map.get("brandList") != null) {
		brandList = (List) map.get("brandList");
	}
	if (map.get("poDetailList") != null) {
		poList = (List) map.get("poDetailList");
	}

	System.out.println("itemlist="+itemList.size());
	StringBuffer sb = new StringBuffer();
	try {
		for (MasStoreItem masStoreItem : itemList) {

			sb.append("<item>");
			sb.append("<id>" + masStoreItem.getId() + "</id>");
			sb.append("<pvms>" + masStoreItem.getPvmsNo() + "</pvms>");
			try {
				sb.append("<au>"
						+ masStoreItem.getItemConversion()
								.getPurchaseUnit().getUnitName() + "</au>");
			} catch (Exception e) {
				sb.append("<au>" + "-" + "</au>");
			}

			try {
				sb.append("<bgItem>"
						+ masStoreItem.getBrandedGeneric()+ "</bgItem>");
			} catch (Exception e) {
				sb.append("<bgItem>" + "-" + "</bgItem>");
			}


			try {
				sb.append("<formula>"
						+ masStoreItem.getItemConversion().getFormula()
						+ "</formula>");
			} catch (Exception e) {
				sb.append("<formula>" + "-" + "</formula>");
			}
			try {
				sb.append("<conversionFactor>"
						+ masStoreItem.getItemConversion()
								.getConversionFactor1()
						+ "</conversionFactor>");
			} catch (Exception e) {
				sb.append("<conversionFactor>" + "-"
						+ "</conversionFactor>");
			}
			try {
				sb.append("<dispType>"
						+ masStoreItem.getItemConversion()
								.getIntermediateUnit().getUnitName()
						+ "</dispType>");
			} catch (Exception e) {
				sb.append("<dispType>" + "-" + "</dispType>");
			}
			try {
				sb.append("<idBranGen>"
						+ masStoreItem.getBrandedGeneric()
						+ "</idBranGen>");
			} catch (Exception e) {
				sb.append("<idBranGen>" + "-" + "</idBranGen>");
			}



			sb.append("<expiry>" + masStoreItem.getExpiry() + "</expiry>");
			sb.append("<brands>");
			for (MasStoreBrand brand : brandList) {
				sb.append("<brand>");
				sb.append("<brandId>" + brand.getId() + "</brandId>");
				sb.append("<brandName>" + brand.getBrandName()
						+ "</brandName>");
				sb.append("<manufacturerId>"
						+ brand.getManufacturer().getId()
						+ "</manufacturerId>");
				sb.append("<manufacturerName>"
						+ brand.getManufacturer().getManufacturerName()
						+ "</manufacturerName>");
				sb.append("</brand>");
			}
			sb.append("</brands>");
			sb.append("<pos>");
			for (StorePoDetail po : poList) {
				sb.append("<po>");
				sb.append("<poId>" + po.getId() + "</poId>");
				sb.append("<poDispType>" + po.getDispType()
						+ "</poDispType>");
				sb.append("<poMdqValue>" + po.getMdqValue()
						+ "</poMdqValue>");
				sb.append("<poRatePerMdq>" + po.getRatePerMdq()
						+ "</poRatePerMdq>");
				sb.append("<poFreeItem>" + po.getFreeItem()
						+ "</poFreeItem>");

				if (po.getUnitRate() != null)
					sb.append("<poRate>" + po.getUnitRate() + "</poRate>");
				else
					sb.append("<poRate>" + "</poRate>");

				if (po.getDiscountPercent() != null)
					sb.append("<poDiscount>" + po.getDiscountPercent()
							+ "</poDiscount>");
				else
					sb.append("<poDiscount>" + "0" + "</poDiscount>");

				if (po.getTaxPercent() != null)
					sb
							.append("<poTax>" + po.getTaxAmtPerMdq()
									+ "</poTax>");
				else
					sb.append("<poTax>" + "0" + "</poTax>");

				if (po.getFreeQuantity() != null)
					sb.append("<poFreeQty>" + po.getFreeQuantity()
							+ "</poFreeQty>");
				else
					sb.append("<poFreeQty>" + "0" + "</poFreeQty>");

				try {
					sb.append("<poBrandId>" + po.getBrand().getId()
							+ "</poBrandId>");
				} catch (Exception e) {
					sb.append("<poBrandId>" + "" + "</poBrandId>");
				}

				try {
					sb.append("<poManufacturerId>"
							+ po.getManufacturer().getId()
							+ "</poManufacturerId>");
				} catch (Exception e) {
					sb.append("<poManufacturerId>" + ""
							+ "</poManufacturerId>");
				}
				sb.append("</po>");
			}
			sb.append("</pos>");

			sb.append("</item>");
		}

		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
	} catch (Exception e) {
		e.printStackTrace();
	}
	try {
		response.getWriter().write(
				"<?xml version='1.0' encoding='ISO-8859-1'?>");
		response.getWriter().write("<items>");
		response.getWriter().write(sb.toString());
		response.getWriter().write("</items>");
	} catch (Exception e) {
		e.printStackTrace();
	}

	// return new ModelAndView(jsp, "map", map);
}

public ModelAndView showRCReceiveWaitingJsp(HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	/*map = referralHandlerService.showTherapyTypeJsp();*/
	
	jsp="rc_waitingList.jsp";	
	map.put("contentJsp", jsp);
	return new ModelAndView("index","map",map);
}

public ModelAndView getReceiveRCWaitingList(HttpServletRequest request,
		HttpServletResponse response)
{
	System.out.println("Hi=========================");
	Map<String, Object> map = new HashMap<String, Object>();
	HttpSession session = request.getSession();
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	int deptId = (Integer) session.getAttribute("deptId");
	List<RcHeader> ipdRcHeaderList = new ArrayList<RcHeader>();
	Box box = HMSUtil.getBox(request);
    box.put("deptId", deptId);
	box.put("hospitalId", hospitalId);

	String ExamType = "MedExam";
	box.put("ExamType", ExamType);
    
	map = storesHandlerService.getReceiveRCWaitingList(box);

	if (map.get("ipdRcHeaderList") != null) {
		ipdRcHeaderList = (ArrayList) map.get("ipdRcHeaderList");
	}

	int totalRecords = 0;
	if (map.get("totalRecords") != null) {
		totalRecords = (Integer) map.get("totalRecords");
	}

	try {
		PrintWriter pw = response.getWriter();

		pw.write("[");
		int counter = 1;
		int i = 0;
		String referredFrom = "";
		String status = "";

		for (RcHeader list : ipdRcHeaderList) {
			/*Patient list = new Patient();*/
			
			if(list.getStatus().equalsIgnoreCase("P"))
			{
				status = "Pending";
			}
			else
			{
				status = "Complete";
				
			}

		
			if (counter != ipdRcHeaderList.size()) {			
			

				pw.write("{\"id\": \""
						+ list.getId()
						+ "\",\"vendorName\": \""
						+ (list.getSupplier() != null ? list.getSupplier().getSupplierName():"")							
						+ "\",\"departmentName\": \""
						+ (list.getDepartment() != null ? list.getDepartment().getDepartmentName():"")			
						+ "\",\"fromDate\": \""
						+ (list.getFromDate() != null ? HMSUtil.convertDateToStringTypeDateOnly(list.getFromDate()):"")			
						+ "\",\"toDate\": \""
						+ (list.getToDate() != null ? HMSUtil.convertDateToStringTypeDateOnly(list.getToDate()):"")
						+ "\",\"rcDate\": \""
						+ (list.getRcDate() != null ? HMSUtil.convertDateToStringTypeDateOnly(list.getRcDate()):"")
						+ "\",\"status\": \""
						+ status	
						+ "\",\"rcNo\": \""
						+ list.getRcNo()	
						+ "\",\"totalRecords\":\"" + totalRecords + "\"},");

			} else {
				
						pw.write("{\"id\": \""
								+ list.getId()
								+ "\",\"vendorName\": \""
								+ (list.getSupplier() != null ? list.getSupplier().getSupplierName():"")							
								+ "\",\"departmentName\": \""
								+ (list.getDepartment() != null ? list.getDepartment().getDepartmentName():"")			
								+ "\",\"fromDate\": \""
								+ (list.getFromDate() != null ? HMSUtil.convertDateToStringTypeDateOnly(list.getFromDate()):"")	
								+ "\",\"toDate\": \""
								+ (list.getToDate() != null ? HMSUtil.convertDateToStringTypeDateOnly(list.getToDate()):"")
								+ "\",\"rcDate\": \""
						        + (list.getRcDate() != null ? HMSUtil.convertDateToStringTypeDateOnly(list.getRcDate()):"")
								+ "\",\"status\": \""
								+ status	
								+ "\",\"rcNo\": \""
								+ list.getRcNo()	
								+ "\",\"totalRecords\":\"" + totalRecords + "\"}");
			}

			counter++;
			i++;
		}

		pw.write("]");
		

	}

	catch (Exception e) {
		ipdRcHeaderList.clear();

		e.printStackTrace();
	}
	ipdRcHeaderList.clear();
	return null;

}

public void fillItemsForGrn1(HttpServletRequest request,
		HttpServletResponse response) {
	HttpSession session = request.getSession();
	int deptId = 0;
	List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
	if (session.getAttribute("deptId") != null)
		deptId = Integer.parseInt("" + session.getAttribute("deptId"));
	Box box = HMSUtil.getBox(request);
	int poId = box.getInt("poId");
	String itemNameField = "";
	String nomenclature = "";
	Map<String, Object> dataMap = new HashMap<String, Object>();
	if (request.getParameter("requiredField") != null) {
		nomenclature = (request.getParameter("requiredField"));
	}
	List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
	List<StorePoDetail> poList = new ArrayList<StorePoDetail>();
	dataMap.put("nomenclature", nomenclature);
	dataMap.put("deptId", deptId);
	dataMap.put("poId", poId);
	map = storesHandlerService.fillItemsForGrn(dataMap);
	if (map.get("itemList") != null) {
		itemList = (List) map.get("itemList");
	}
	if (map.get("brandList") != null) {
		brandList = (List) map.get("brandList");
	}
	if (map.get("poDetailList") != null) {
		poList = (List) map.get("poDetailList");
	}

	StringBuffer sb = new StringBuffer();
	try {
		for (MasStoreItem masStoreItem : itemList) {

			sb.append("<item>");
			sb.append("<id>" + masStoreItem.getId() + "</id>");
			sb.append("<pvms>" + masStoreItem.getPvmsNo() + "</pvms>");
			sb.append("<itemName>"+masStoreItem.getNomenclature()+"</itemName>");
			try {
				sb.append("<au>"
						+ masStoreItem.getItemConversion()
								.getPurchaseUnit().getUnitName() + "</au>");
			} catch (Exception e) {
				sb.append("<au>" + "-" + "</au>");
			}

			try {
				sb.append("<bg>"
						+ masStoreItem.getBrandedGeneric()+ "</bg>");
			} catch (Exception e) {
				sb.append("<bg>" + "-" + "</bg>");
			}


			try {
				sb.append("<formula>"
						+ masStoreItem.getItemConversion().getFormula()
						+ "</formula>");
			} catch (Exception e) {
				sb.append("<formula>" + "-" + "</formula>");
			}
			try {
				sb.append("<conversionFactor>"
						+ masStoreItem.getItemConversion()
								.getConversionFactor1()
						+ "</conversionFactor>");
			} catch (Exception e) {
				sb.append("<conversionFactor>" + "-"
						+ "</conversionFactor>");
			}
			try {
				sb.append("<dispType>"
						+ masStoreItem.getItemConversion()
								.getIntermediateUnit().getUnitName()
						+ "</dispType>");
			} catch (Exception e) {
				sb.append("<dispType>" + "-" + "</dispType>");
			}
			try {
				sb.append("<idBranGen>"
						+ masStoreItem.getBrandedGeneric()
						+ "</idBranGen>");
			} catch (Exception e) {
				sb.append("<idBranGen>" + "-" + "</idBranGen>");
			}



			sb.append("<expiry>" + masStoreItem.getExpiry() + "</expiry>");
			sb.append("<brands>");
			for (MasStoreBrand brand : brandList) {
				sb.append("<brand>");
				sb.append("<brandId>" + brand.getId() + "</brandId>");
				sb.append("<brandName>" + brand.getBrandName()
						+ "</brandName>");
				sb.append("<manufacturerId>"
						+ brand.getManufacturer().getId()
						+ "</manufacturerId>");
				sb.append("<manufacturerName>"
						+ brand.getManufacturer().getManufacturerName()
						+ "</manufacturerName>");
				sb.append("</brand>");
			}
			sb.append("</brands>");
			sb.append("<pos>");
			for (StorePoDetail po : poList) {
				sb.append("<po>");
				sb.append("<poId>" + po.getId() + "</poId>");
				sb.append("<poDispType>" + po.getDispType()
						+ "</poDispType>");
				sb.append("<poMdqValue>" + po.getMdqValue()
						+ "</poMdqValue>");
				sb.append("<poRatePerMdq>" + po.getRatePerMdq()
						+ "</poRatePerMdq>");
				sb.append("<poFreeItem>" + po.getFreeItem()
						+ "</poFreeItem>");

				if (po.getUnitRate() != null)
					sb.append("<poRate>" + po.getUnitRate() + "</poRate>");
				else
					sb.append("<poRate>" + "</poRate>");

				if (po.getDiscountPercent() != null)
					sb.append("<poDiscount>" + po.getDiscountPercent()
							+ "</poDiscount>");
				else
					sb.append("<poDiscount>" + "0" + "</poDiscount>");

				if (po.getTaxPercent() != null)
					sb
							.append("<poTax>" + po.getTaxAmtPerMdq()
									+ "</poTax>");
				else
					sb.append("<poTax>" + "0" + "</poTax>");

				if (po.getFreeQuantity() != null)
					sb.append("<poFreeQty>" + po.getFreeQuantity()
							+ "</poFreeQty>");
				else
					sb.append("<poFreeQty>" + "0" + "</poFreeQty>");

				try {
					sb.append("<poBrandId>" + po.getBrand().getId()
							+ "</poBrandId>");
				} catch (Exception e) {
					sb.append("<poBrandId>" + "" + "</poBrandId>");
				}

				try {
					sb.append("<poManufacturerId>"
							+ po.getManufacturer().getId()
							+ "</poManufacturerId>");
				} catch (Exception e) {
					sb.append("<poManufacturerId>" + ""
							+ "</poManufacturerId>");
				}
				sb.append("</po>");
			}
			sb.append("</pos>");

			sb.append("</item>");
		}

		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
	} catch (Exception e) {
		e.printStackTrace();
	}
	try {
		response.getWriter().write(
				"<?xml version='1.0' encoding='ISO-8859-1'?>");
		response.getWriter().write("<items>");
		response.getWriter().write(sb.toString());
		response.getWriter().write("</items>");
	} catch (Exception e) {
		e.printStackTrace();
	}

	// return new ModelAndView(jsp, "map", map);
}




//For searching defective drug on basis of entry No
	public ModelAndView searchDefectiveDrug(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> dataMap = new HashMap<String, Object>();
	Box box = HMSUtil.getBox(request);
	String fromDate = "";
	String toDate = "";
	String entryNo = "";
	int hospitalId = 0;
	int deptId=0;

	HttpSession session = request.getSession();
	if (session.getAttribute("userName") != null)
		userName = (String) session.getAttribute("userName");
	if (session.getAttribute("hospitalId") != null)
		hospitalId = Integer.parseInt(""
				+ session.getAttribute("hospitalId"));
	if (session.getAttribute("deptId") != null)
		deptId = Integer.parseInt("" + session.getAttribute("deptId"));
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> tempMap = new HashMap<String, Object>();
	Map<String, Object> searchFieldMap = new HashMap<String, Object>();
	List<StoreDefectiveDrugM> searchDrugList = new ArrayList<StoreDefectiveDrugM>();
	try {
		if (request.getParameter(FROM_DATE) != null) {
			fromDate = request.getParameter(FROM_DATE);

		}
		if (request.getParameter(TO_DATE) != null) {
			toDate = request.getParameter(TO_DATE);

		}
		if (request.getParameter(ENTRY_NO) != null) {
			entryNo = request.getParameter(ENTRY_NO);

		}
	} catch (Exception e) {
		e.printStackTrace();
	}
	searchFieldMap.put("fromDate", fromDate);
	searchFieldMap.put("toDate", toDate);
	searchFieldMap.put("entryNo", entryNo);
	searchFieldMap.put("hospitalId", hospitalId);
	dataMap.put("hospitalId", hospitalId);
	dataMap.put("deptId", deptId);
	try {
		tempMap = storesHandlerService.showDefectiveDrugJsp(dataMap);
		if (tempMap.get("searchDrugList") != null)
			searchDrugList = (List) tempMap.get("searchDrugList");
		map = storesHandlerService.searchDefectiveDrug(searchFieldMap);
		map.put("searchDrugList", searchDrugList);
	} catch (Exception e) {
		e.printStackTrace();
	}
	jsp = SEARCH_DEFECTIVE_DRUG;
	jsp = jsp + ".jsp";
	title = "DEFECTIVE DRUGS";
	map.put("contentJsp", jsp);
	map.put("title", title);

	return new ModelAndView("indexB", "map", map);
}





public ModelAndView searchProformaBEntry(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		String fromDate = "";
		String toDate = "";
		String entryNo = "";
		int hospitalId = 0;
		int deptId=0;
		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> tempMap = new HashMap<String, Object>();
		Map<String, Object> searchFieldMap = new HashMap<String, Object>();
		List<StoreProformaHeader> storeProformaList = new ArrayList<StoreProformaHeader>();
		List<StoreProformaHeader> storeProformaList1 = new ArrayList<StoreProformaHeader>();

		try {
			if (request.getParameter("fromDate") != null) {
				fromDate = request.getParameter("fromDate");

			}
			if (request.getParameter("toDate") != null) {
				toDate = request.getParameter("toDate");

			}
			if (request.getParameter(ENTRY_NO) != null) {
				entryNo = request.getParameter(ENTRY_NO);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		dataMap.put("fromDate", fromDate);
		dataMap.put("toDate", toDate);
		dataMap.put("entryNo", entryNo);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("deptId", deptId);
		try {
			tempMap = storesHandlerService.showProformaBSearchJsp(dataMap);
			if (tempMap.get("storeProformaList") != null)
				storeProformaList = (List) tempMap.get("storeProformaList");
			map.put("storeProformaList", storeProformaList);
			if(tempMap.get("storeProformaList1")!=null){
				storeProformaList1=(List)tempMap.get("storeProformaList1");
			    map.put("storeProformaList1",storeProformaList1);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "searchProformaNo";
		jsp = jsp + ".jsp";
		title = "DEFECTIVE DRUGS";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}


















// Modification of a defective drugs on the basis of a particular search
public ModelAndView modifyDefectiveDrug(HttpServletRequest request,
		HttpServletResponse response) {
	HttpSession session = request.getSession();
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> purchaseMap = new HashMap<String, Object>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	Box box = HMSUtil.getBox(request);
	jsp = MODIFY_DEFECTIVE_DRUG;
	jsp += ".jsp";
	int radio_str = 0;
	int deptId = 0;
	int entryId=0;

	if (session.getAttribute("deptId") != null) {
		deptId = (Integer) session.getAttribute("deptId");
	}

	/*if (request.getParameter("parent") != null) {
		radio_str = Integer.parseInt(request.getParameter("parent"));

	}*/
	if(request.getParameter(ENTRY_ID) != null){
		entryId=Integer.parseInt(request.getParameter(ENTRY_ID));
		map = (Map<String, Object>) storesHandlerService
		.getDefectiveDrugModifyMap(entryId, 0);
	}
	purchaseMap = storesHandlerService.showDefectiveDrugJsp(dataMap);
	List<StoreDefectiveDrugM> defectiveList = storesHandlerService
			.getDefectiveList();

	map.put("purchaseMap", purchaseMap);
	map.put("defectiveList", defectiveList);
	map.put("contentJsp", jsp);
	map.put("title", title);
//	map.put("radio_str", radio_str);
	map.put("entryId", entryId);

	return new ModelAndView("indexB", "map", map);
}
//defective drug report

public ModelAndView showDefectiveDrugReportJsp(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	title = "DEFECTIVE DRUG REPORT";
	List<StoreDefectiveDrugM> defectiveDrugsList = storesHandlerService
			.getDefectiveDrugsList();
	jsp = DEFECTIVE_DRUG_REPORT;
	map.put("defectiveDrugsList", defectiveDrugsList);
	map.put("contentJsp", jsp);
	map.put("title", title);

	return new ModelAndView(jsp, "map", map);
}
//Dinesh
public ModelAndView getItemListForIndent(HttpServletRequest request,
		HttpServletResponse response) {
	int deptId = 0;
	int hospitalId = 0;
	HttpSession session = request.getSession();

	String itemNameField = "";
	Box box = HMSUtil.getBox(request);
	int internalIndentId = 0;
	int storeDepartmentId = 0;

	String autoHint = "";
	Map<String, Object> dataMap = new HashMap<String, Object>();
	if (request.getParameter("requiredField") != null) {
		itemNameField = (request.getParameter("requiredField"));
	}

	if (request.getParameter("internalIndentId") != null
			&& !request.getParameter("internalIndentId").equals("")) {
		internalIndentId = Integer.parseInt(request
				.getParameter("internalIndentId"));
	}
	if (request.getParameter(itemNameField) != null) {
		autoHint = (request.getParameter(itemNameField));
	}
	/*if (request.getParameter("storeDepartmentId") != null
			&& !request.getParameter("storeDepartmentId").equals("")) {
		storeDepartmentId = Integer.parseInt(request
				.getParameter("storeDepartmentId"));
		box.put("storeDepartmentId", storeDepartmentId);
	}*/

	if (session.getAttribute("deptId") != null) {
		deptId = (Integer) session.getAttribute("deptId");
		box.put("deptId", deptId);
	}
	if (session.getAttribute("hospitalId") != null)
		hospitalId = Integer.parseInt(""
				+ session.getAttribute("hospitalId"));
	box.put("autoHint", autoHint);
	box.put("internalIndentId", internalIndentId);
	box.put("hospitalId", hospitalId);

	dataMap.put("autoHint", autoHint);
	map = storesHandlerService.getItemListForIndent(box);

	jsp = "resultIndent";
	return new ModelAndView(jsp, "map", map);
}
public void getOtherItemsForIndent(HttpServletRequest request,
		HttpServletResponse response) {
	Box box = HMSUtil.getBox(request);
	BigDecimal itemBatchStock = new BigDecimal(0);
	int hospitalId=0;
	HttpSession session = request.getSession();
	if (session.getAttribute("hospitalId") != null)
		hospitalId = Integer.parseInt(""
				+ session.getAttribute("hospitalId"));
	box.put("hospitalId", hospitalId);
	map = storesHandlerService.getOtherItemsForIndent(box);
	List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();

	itemList = (List<MasStoreItem>) map.get("itemList");
	if(map.get("stock")!=null){
	itemBatchStock = (BigDecimal) map.get("stock");
	}
	
	StringBuffer sb = new StringBuffer();
	for (MasStoreItem masStoreItem : itemList) {
		sb.append("<item>");
		sb.append("<id>" + masStoreItem.getId() + "</id>");
		sb.append("<pvms>" + masStoreItem.getPvmsNo() + "</pvms>");
		try {
			sb.append("<au>"
					+ masStoreItem.getItemConversion().getPurchaseUnit()
							.getUnitName() + "</au>");
		} catch (Exception e) {
			sb.append("<au>" + "-" + "</au>");
		}
		sb.append("<name>" + masStoreItem.getNomenclature() + "</name>");
        
		sb.append("<stock>" + itemBatchStock + "</stock>");
		sb.append("</item>");
	}


	response.setContentType("text/xml");
	response.setHeader("Cache-Control", "no-cache");
	try {
		response.getWriter().write(
				"<?xml version='1.0' encoding='ISO-8859-1'?>");
		response.getWriter().write("<items>");
		response.getWriter().write(sb.toString());
		response.getWriter().write("</items>");
	} catch (Exception e) {
		e.printStackTrace();
	}
	// return new ModelAndView(jsp, "map", map);
}


public void getDataForIssueBarcode(HttpServletRequest request,
		HttpServletResponse response) {

	// --------------- Retriving User Name,Hospital Id,Department Id from
	// Session-----
	String userName = "";
	int deptId = 0;
	int hospitalId = 0;
	Box box = HMSUtil.getBox(request);
	HttpSession session = request.getSession();
	if (session.getAttribute("userName") != null)
		userName = (String) session.getAttribute("userName");
	if (session.getAttribute("hospitalId") != null)
		hospitalId = Integer.parseInt(""
				+ session.getAttribute("hospitalId"));
	if (session.getAttribute("deptId") != null)
		deptId = Integer.parseInt("" + session.getAttribute("deptId"));
	// --------------------------------------------------------------------------------
	String itemNameField = "";
	Map<String, Object> map = new HashMap<String, Object>();
	String lotNo = "";
	List<StoreItemBatchStock> objectList = new ArrayList<StoreItemBatchStock>();

	box.put("deptId", deptId);
	box.put("userName", userName);
	box.put("hospitalId", hospitalId);

	map = storesHandlerService.getDataForIssueBarcode(box);
	if (map.get("storeItemBatchStockList") != null) {
		objectList = (List<StoreItemBatchStock>) map
				.get("storeItemBatchStockList");
	}
	StringBuffer sb = new StringBuffer();
	try {
		if (objectList != null && objectList.size() > 0) {
			if (objectList.get(0) != null) {
				StoreItemBatchStock stock = (StoreItemBatchStock) objectList
						.get(0);
				String pvmsNo = stock.getItem().getPvmsNo();

				String nomenclature = stock.getItem().getNomenclature();
				int itemId = stock.getItem().getId();
				sb.append("<item>");

				sb.append("<pvms>" + pvmsNo + "</pvms>");
				/*sb.append("<nomenclature>" + nomenclature
						+ "</nomenclature>");*/
				sb.append("<itemId>" + itemId + "</itemId>");

				try {
					sb.append("<batchNo>" + stock.getBatchNo()
							+ "</batchNo>");
				} catch (Exception e) {
					sb.append("<batchNo></batchNo>");
				}
				try {
					sb.append("<expiryDate>"
							+ HMSUtil.convertDateToStringWithoutTime(stock
									.getExpiryDate()) + "</expiryDate>");
				} catch (Exception e) {
					sb.append("<expiryDate></expiryDate>");
				}
				try {
					sb.append("<availableStock>" + stock.getClosingStock()
							+ "</availableStock>");
				} catch (Exception e) {
					sb.append("<availableStock>0</availableStock>");
				}
				/*try {
					sb.append("<barCodeNo>" + stock.getBarcodeNo()
							+ "</barCodeNo>");
				} catch (Exception e) {
					sb.append("<barCodeNo></barCodeNo>");
				}*/
				try {
					sb
							.append("<au>"
									+ stock.getItem().getItemConversion()
											.getIssueUnit().getUnitName()
									+ "</au>");
				} catch (Exception e) {
					sb.append("<au></au>");
				}

				sb.append("</item>");

			}
		}
	} catch (Exception e) {
		e.printStackTrace();
	}

	response.setContentType("text/xml");
	response.setHeader("Cache-Control", "no-cache");
	try {
		response.getWriter().write(
				"<?xml version='1.0' encoding='ISO-8859-1'?>");
		response.getWriter().write("<items>");
		response.getWriter().write(sb.toString());
		response.getWriter().write("</items>");
	} catch (Exception e) {
		e.printStackTrace();
	}

	// return new ModelAndView(jsp, "map", map);
}

public ModelAndView printPatientIssue(HttpServletRequest request,
		HttpServletResponse response) {

	HttpSession session = request.getSession();
	Map<String, Object> map = new HashMap<String, Object>();
	int deptId = 0;
	int hospitalId=0;
	if (session.getAttribute("deptId") != null) {
		deptId = (Integer) session.getAttribute("deptId");
	}
	if (session.getAttribute("hospitalId") != null) {
		hospitalId = (Integer) session.getAttribute("hospitalId");
	}

	List<StoreOpPatientIssueM> storeOpPatientIssueM = storesHandlerService
			.printPatientIssue(deptId,hospitalId);

	jsp = "patientIssueReport";
	jsp += ".jsp";

	map.put("storeOpPatientIssueM", storeOpPatientIssueM);
	map.put("contentJsp", jsp);
	map.put("title", title);

	return new ModelAndView("indexB", "map", map);
}

public ModelAndView generateDailyIssueSummeryReport(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> requestParameters = new HashMap<String, Object>();
	Box box = HMSUtil.getBox(request);
	int hospitalId = 0;
	int deptId = 0;
	String hospitalName = "";
	String deptName = "";
	String depart="";
	String query = "";
	String fromDate="";
	String toDate="";
	String pvms="";
	HttpSession session = request.getSession();
	query="";
	String date="";
	String nomen="";
	try {

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			hospitalName = storesHandlerService.getHospitalName(hospitalId);
			requestParameters.put("hospitalId", hospitalId);   // add javed khan
			requestParameters.put("HOSP_NAME", hospitalName);
		}

		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
			requestParameters.put("deptId", deptId);
		}
		if (request.getParameter(FROM_DATE) != null) {
			fromDate = request.getParameter(FROM_DATE);
			requestParameters.put("fromDate", fromDate);
			requestParameters.put("FROM_DATE",HMSUtil.convertStringTypeDateToDateType(fromDate));

		}
		if (request.getParameter(TO_DATE) != null) {
			toDate = request.getParameter(TO_DATE);
			requestParameters.put("toDate", toDate);
			requestParameters.put("TO_DATE",HMSUtil.convertStringTypeDateToDateType( toDate));

		}
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		date = (String) utilMap.get("currentDate");
		//time = (String) utilMap.get("currentTime");
		//date="28/03/2011";
        requestParameters.put("curr_date", date);
		if (session.getAttribute("deptName") != null) {
			deptName = session.getAttribute("deptName").toString();
			requestParameters.put("deptName", deptName);
		}
		/*if (request.getParameter("item_id") != null &&(request.getParameter("item_id") != null)) {
			query = query + "AND mas_store_item.item_id = '"
					+ request.getParameter("item_id") + "' ";
		}*/

		if (request.getParameter("department") != null &&(!request.getParameter("department").equals(""))) {

			depart= request.getParameter("department");
			requestParameters.put("depart", Integer.parseInt(depart));
		}

		if (request.getParameter("pvmsNiv") != null &&(!request.getParameter("pvmsNiv").equals(""))) {
			/*query = query + "AND mas_store_item.pvms_no = '"+ request.getParameter("pvmsNiv") + "' ";*/
			pvms= request.getParameter("pvmsNiv");
			requestParameters.put("pvms", pvms);
		}

		if (request.getParameter("nomenclature") != null &&(!request.getParameter("nomenclature").equals(""))) {
			nomen =request.getParameter("nomenclature") ;
			String nomenclature[]=nomen.split("\\[");

			requestParameters.put("nomen", nomenclature[0]);
		}
	} catch (Exception e) {
		e.printStackTrace();
	}
	String flag = (String)request.getParameter("flag");
	if(flag.equalsIgnoreCase("j")){
		requestParameters.put("reportType", box.getString("reportType"));
		Map<String, Object> dailyIssueItem = storesHandlerService.getDailyIssueItem(requestParameters);
		map.put("dailyIssueItem", dailyIssueItem);
		map.put("depart", depart);
		map.put("reportType", box.getString("reportType"));
		String jsp="dailyIssueReport.jsp";
		map.put("contentJsp", jsp);
	return new ModelAndView("indexB","map", map);

	}else{
	Map<String, Object> connectionMap = storesHandlerService
			.getConnectionForReport();
	requestParameters.put("query", query);
	String reportName = "";
	/*if (box.getString("reportType").equals("summary")) {
		reportName = "daily_issue_summery";
	} else if (box.getString("reportType").equals("detail")) {*/
	if(depart.equals("0"))
		reportName = "daily_issue_details_summery";
	else
		reportName = "Internal_Issue_Report_smc";
	//}

	HMSUtil.generateReport(reportName, requestParameters,
			(Connection) connectionMap.get("con"), response,
			getServletContext());

	return null;
	}
}


//----Update Defective Drug by Ritu----
public ModelAndView updateDefectiveDrug(HttpServletRequest request,HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	Box box = HMSUtil.getBox(request);

	int hospitalId = 0;
	int deptId = 0;
	HttpSession session = request.getSession();
	if (session.getAttribute("userName") != null){
		userName = (String) session.getAttribute("userName");
		box.put("userName", session.getAttribute("userName"));
	}
	if (session.getAttribute("hospitalId") != null)
		hospitalId = Integer.parseInt(""
				+ session.getAttribute("hospitalId"));
	if (session.getAttribute("deptId") != null)
		deptId = Integer.parseInt("" + session.getAttribute("deptId"));

	Map<String, Object> dataMap = new HashMap<String, Object>();

	dataMap.put("userName", userName);
	dataMap.put("hospitalId", hospitalId);
	dataMap.put("deptId", deptId);
	boolean flag = false;
	String messageTOBeVisibleToTheUser = "";
	try{
		flag=storesHandlerService.updateDefective(box);
	}catch (Exception e) {
		e.printStackTrace();
	}
	if (!flag) {
		messageTOBeVisibleToTheUser = "Defective Drug Entry Updated Successfully !!";

	} else {
		messageTOBeVisibleToTheUser = "Defective Drug Entry Not Updated Successfully";
	}
	url = "/hms/hms/stores?method=showDefectiveDrugJsp";
	map = storesHandlerService.showDefectiveDrugJsp(dataMap);
	map.put("messageType", "success");
	jsp = DEFECTIVE_DRUGS_JSP+".jsp";
	map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
	map.put("contentJsp", jsp);
	return new ModelAndView("indexB", "map", map);
}
public ModelAndView showDispensaryReceiveItemJsp(HttpServletRequest request,
		HttpServletResponse response) {
	HttpSession session = request.getSession();

	Map<String, Object> map = new HashMap<String, Object>();
	String jsp = "";
	String title = "";
	String deptName=" ";
	if (session.getAttribute("deptName") != null) {
		deptName = (String) session.getAttribute("deptName");
		map.put("department", deptName);
	}

	jsp += "receiveItemReport";
	jsp += ".jsp";
	title = "receiveItemReport";
	map.put("contentJsp", jsp);
	map.put("title", title);
	map.put("department", deptName);

	return new ModelAndView("index", "map", map);
}
public ModelAndView printDispensaryReceiveItemReport(
		HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> detailsMap = new HashMap<String, Object>();
	Map<String, Object> parameters = new HashMap<String, Object>();
	Integer deptID=0;
	HttpSession session = request.getSession();
    String fromDate="";
    String toDate="";
    int hospitalId=0;
    String hospitalName="";
    Box box = HMSUtil.getBox(request);
    if (session.getAttribute("hospitalId") != null) {
		hospitalId = (Integer) session.getAttribute("hospitalId");
		hospitalName = storesHandlerService.getHospitalName(hospitalId);
		parameters.put("HOSP_NAME", hospitalName);
	}
    fromDate=box.getString(FROM_DATE);
    toDate= box.getString(TO_DATE);

	if((Integer)session.getAttribute("deptId")!=0 )
	{
	 deptID=	(Integer) session.getAttribute("deptId");
	}

	Map<String, Object> connectionMap = storesHandlerService
	.getConnectionForReport();

    parameters.put("from_date", fromDate);
	parameters.put("to_date", toDate);
	parameters.put("deptId", deptID);
	parameters.put("hospitalId", hospitalId); // add javed khan
	String flag = (String)request.getParameter("flag");
		if(flag.equalsIgnoreCase("j")){
	 Map<String, Object> recieveItem = storesHandlerService.getRecieveItem(parameters);
		map.put("recieveItem", recieveItem);
		String jsp="receiveItemJspReport.jsp";
		map.put("parameters",parameters);
		map.put("contentJsp", jsp);
	return new ModelAndView("indexB","map", map);
 }else{
	String reportName = "AcknoedgementReport";

	HMSUtil.generateReport(reportName, parameters,
			(Connection) connectionMap.get("con"), response,
			getServletContext());

	return null;
 }
}

public ModelAndView showStockStatusReportJsp(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	title = "Actual Stock Report";
	jsp = "stockStatusReport";
	jsp = jsp + ".jsp";
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("indexB", "map", map);
}
public ModelAndView showSupplyOrderPrint(HttpServletRequest request,
		HttpServletResponse response) {
	Box box = HMSUtil.getBox(request);
	jsp = "supplierOrderList";
	jsp += ".jsp";
	title = "Supply Order";
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("index", "map", map);
}
public ModelAndView generateSupplyOrderPrint(HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> parameters = new HashMap<String, Object>();
	HttpSession session = request.getSession();
	String poNo="";
	String query = "";
	String hospitalName="";
	int hospitalId=0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId = (Integer) session.getAttribute("hospitalId");
		hospitalName = storesHandlerService.getHospitalName(hospitalId);
		parameters.put("HOSP_NAME", hospitalName);
	}
	try {
		if (request.getParameter("soNo") != null
				&& !(request.getParameter("soNo").equals(""))) {
			poNo = request.getParameter("soNo");
		}

	} catch (Exception e) {
		e.printStackTrace();
	}
	Map<String, Object> detailsMap = new HashMap<String, Object>();
	detailsMap = storesHandlerService.getConnectionForReport();
	parameters.put("poNo", poNo);
	HMSUtil.generateReport("supplyOrderList", parameters,(Connection) detailsMap.get("con"), response,
			getServletContext());

	return null;

}

public ModelAndView printDispensaryReceiveItemReportExcel(
		HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> detailsMap = new HashMap<String, Object>();
	Map<String, Object> parameters = new HashMap<String, Object>();
	Integer deptID=0;
	HttpSession session = request.getSession();
    String fromDate="";
    String toDate="";
    int hospitalId=0;
    String hospitalName="";
    Box box = HMSUtil.getBox(request);
    try
    {
    if (session.getAttribute("hospitalId") != null) {
		hospitalId = (Integer) session.getAttribute("hospitalId");
		hospitalName = storesHandlerService.getHospitalName(hospitalId);
		parameters.put("hospitalName", hospitalName);

	}
    fromDate=box.getString(FROM_DATE);
    toDate= box.getString(TO_DATE);

	if((Integer)session.getAttribute("deptId")!=0 )
	{
	 deptID=	(Integer) session.getAttribute("deptId");
	}

    } catch (Exception e)
     {
	     e.printStackTrace();
     }
    parameters.put("from_date", fromDate);
	parameters.put("to_date", toDate);
	parameters.put("deptId", deptID);
	parameters.put("hospitalId", hospitalId); // add javed khna

    HSSFWorkbook wb = new HSSFWorkbook();
	

	try {

			map = storesHandlerService.printDispensaryReceiveItemReportExcel(parameters);

		if(map.get("wb") != null){
		wb = (HSSFWorkbook) map.get("wb");
		String file = "ReceiveItemDetails.xls";
		response.setContentType("application/vnd.ms-excel");
		response.setHeader("Content-disposition", "attachment; filename="
				+ file);
		wb.write(response.getOutputStream());
		}
	} catch (IOException ioe) {
		ioe.printStackTrace();

	}
	return null;
  }


//by ashutosh

public ModelAndView setDepartment(HttpServletRequest request,HttpServletResponse response) {
	// --------------- Retriving User Name,Hospital Id,Department Id from
	// Session-----
	String userName = "";
	int deptId = 0;
	int hospitalId = 0;

	HttpSession session = request.getSession();
	if (session.getAttribute("userName") != null)
		userName = (String) session.getAttribute("userName");
	if (session.getAttribute("hospitalId") != null)
		hospitalId = Integer.parseInt(""
				+ session.getAttribute("hospitalId"));
	if (session.getAttribute("deptId") != null)
		deptId = Integer.parseInt("" + session.getAttribute("deptId"));
	// --------------------------------------------------------------------------------

	String indent_id = "";
	try {
		Map<String, Object> dataMap = new HashMap<String, Object>();

		if (request.getParameter("indent_id") != null) {
			indent_id = (request.getParameter("indent_id"));
		}
		dataMap.put("indent_id",indent_id);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.getRequestedBy(dataMap);
		jsp = "RequestedByName";
	} catch (Exception e) {
		e.printStackTrace();
	}
	return new ModelAndView(jsp, "map", map);
}
public ModelAndView setDepartmentWithoutbarcode(HttpServletRequest request,HttpServletResponse response) {
	// --------------- Retriving User Name,Hospital Id,Department Id from
	// Session-----
	String userName = "";
	int deptId = 0;
	int hospitalId = 0;

	HttpSession session = request.getSession();
	if (session.getAttribute("userName") != null)
		userName = (String) session.getAttribute("userName");
	if (session.getAttribute("hospitalId") != null)
		hospitalId = Integer.parseInt(""
				+ session.getAttribute("hospitalId"));
	if (session.getAttribute("deptId") != null)
		deptId = Integer.parseInt("" + session.getAttribute("deptId"));
	// --------------------------------------------------------------------------------

	String indent_id = "";
	try {
		Map<String, Object> dataMap = new HashMap<String, Object>();

		if (request.getParameter("indent_id") != null) {
			indent_id = (request.getParameter("indent_id"));
		}
		dataMap.put("indent_id",indent_id);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.getRequestedBy(dataMap);
		jsp = "RequestedByNameWithoutBarcode";
	} catch (Exception e) {
		e.printStackTrace();
	}
	return new ModelAndView(jsp, "map", map);
}



public ModelAndView showSurPlusJsp(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	map = storesHandlerService.showItemCatalogueJsp();
	jsp = SUR_PLUS_REOPRT + ".jsp";
	title = "Item Catalogue";
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("indexB", "map", map);
}




public ModelAndView showStoreMedicineReceiptJsp(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	map = storesHandlerService.showItemCatalogueJsp();
	jsp = STORE_MEDICINE_RECEIPT + ".jsp";
	title = "Item Catalogue";
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("indexB", "map", map);
}

public ModelAndView showStoreIssueDetailsJsp(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	HttpSession session = request.getSession();
	int departmentId = 0;
	if(session.getAttribute("deptId")!=null){
		departmentId = (Integer)session.getAttribute("deptId");
	}
	Box box = HMSUtil.getBox(request);
	box.put("departmentId", departmentId);
	map = storesHandlerService.showItemCatalogueJsp(box);
	jsp = STORE_ISSUE_DETAILS + ".jsp";
	title = "Item Catalogue";
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("indexB", "map", map);
}


public ModelAndView showItemSurplus(HttpServletRequest request,HttpServletResponse response) {
	Map<String, Object> requestParameters = new HashMap<String, Object>();
	JRDataSource ds = null;
	List itemList = null;
	Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
	HttpSession session = request.getSession();
	int section = 0;
	int subSection = 0;
	int sectionList = 0;
	int subSectionList = 0;
	int selectedRadio = 0;
	int hospitalId = 0;
	String pvmsNiv="";
	String nomenclature="";
	String hospitalName = "";
	String query = "";
	requestParameters.put("DEPART", session.getAttribute("deptId"));
	try {
		if (session.getAttribute("hospitalId") != null) 
		{
			hospitalId = (Integer) session.getAttribute("hospitalId");
			hospitalName = storesHandlerService.getHospitalName(hospitalId);
			requestParameters.put("HOSP_NAME", hospitalName);
			requestParameters.put("hospitalId", hospitalId);
		}
		if(session.getAttribute("hospitalId")!=null){
			requestParameters.put("MmfDeptId",(Integer)session.getAttribute("deptId"));
			requestParameters.put("BatchDeptId",(Integer)session.getAttribute("deptId"));
			requestParameters.put("MmfHospId",(Integer)session.getAttribute("hospitalId"));
			requestParameters.put("BatchHospId",(Integer)session.getAttribute("hospitalId"));	
		}
		
		/*if (request.getParameter(SECTION_ID) != null && !(request.getParameter(SECTION_ID).equals(""))) {
			section = Integer.parseInt(request.getParameter(SECTION_ID));
		}
		if (request.getParameter(SECTION_ID_DEPENDENT_INDENT) != null &&
					!(request.getParameter(SECTION_ID_DEPENDENT_INDENT).equals(""))) {
			subSection = Integer.parseInt(request.getParameter(SECTION_ID_DEPENDENT_INDENT));
		}
		if (request.getParameter(SECTION_LIST) != null && !(request.getParameter(SECTION_LIST).equals(""))) {
			sectionList = Integer.parseInt(request.getParameter(SECTION_LIST));
		}
		if (request.getParameter(SUB_SECTION_LIST) != null	&& !(request.getParameter(SUB_SECTION_LIST).equals(""))) {
			subSectionList = Integer.parseInt(request.getParameter(SUB_SECTION_LIST));
		}
		if (request.getParameter(SELECTED_RADIO) != null && !(request.getParameter(SELECTED_RADIO).equals(""))) {
			selectedRadio = Integer.parseInt(request.getParameter(SELECTED_RADIO));
		}*/

		/*if ((sectionList == 0 || section == 0)&& (subSectionList == 0 || subSection == 0) && (selectedRadio != 0)) {
			if (selectedRadio == 1) {
				requestParameters.put("ITEM_TYPE", selectedRadio);
			} else if (selectedRadio == 2) {
				requestParameters.put("ITEM_TYPE", selectedRadio);
			}*/
			/*HMSUtil.generateReport("Stores_Surplus_Report_Niv_no", requestParameters,
					(Connection) connectionMap.get("con"), response,
					getServletContext());*/
		/*
		} else if ((sectionList != 0 || section != 0)
				&& (subSectionList == 0 || subSection == 0)) {
			requestParameters.put("SECTION", sectionList);
			if (selectedRadio == 1) {
				requestParameters.put("ITEM_TYPE", selectedRadio);
			} else if (selectedRadio == 2) {
				requestParameters.put("ITEM_TYPE", selectedRadio);
			}
			HMSUtil.generateReport("Stores_Surplus_Report_Niv_no",
					requestParameters, (Connection) connectionMap.get("con"), response, getServletContext());

		}else if ((sectionList == 0 || section == 0) && (subSectionList != 0 || subSection != 0)) {

			requestParameters.put("ITEM_CATEGORY", subSectionList);
			if (selectedRadio == 1) {
				requestParameters.put("ITEM_TYPE", selectedRadio);
			} else if (selectedRadio == 2) {
				requestParameters.put("ITEM_TYPE", selectedRadio);
			}
			HMSUtil.generateReport("Item_Catalogue_subSection",requestParameters, (Connection) connectionMap.get("con"), response, getServletContext());
		} else {
			requestParameters.put("SECTION", sectionList);
			requestParameters.put("ITEM_CATEGORY", subSectionList);
			if (selectedRadio == 1) {
				requestParameters.put("ITEM_TYPE", selectedRadio);
			} else if (selectedRadio == 2) {
				requestParameters.put("ITEM_TYPE", selectedRadio);
			}*/


		/*if(flag.equalsIgnoreCase("j")){
			Map<String, Object> surplusItem = storesHandlerService.getSurplusItem(requestParameters);
			map.put("surplusItem", surplusItem);
			String jsp="receiptRegisterReport.jsp";
			map.put("contentJsp", jsp);
		return new ModelAndView("indexB","map", map);
		}*/
		/**
		 * Added By Ritu 
		 * Date 13-03-2013
		 */
		String lifeSpan = "";
		lifeSpan = request.getParameter("lifeSpan");
		requestParameters.put("lifeSpan",lifeSpan);
		String qry = "";
		if(!lifeSpan.equals("")){
			query += " and msi.self_life='"+lifeSpan+"' ";
		}
		/**
		 * End
		 */
		
		String flag = (String)request.getParameter("flag");
		if (request.getParameter(PVMS_NIV) != null && !(request.getParameter(PVMS_NIV).equals("")))
		{
			pvmsNiv = request.getParameter(PVMS_NIV);
			
			query = query + "AND msi.pvms_no = '"
			+ request.getParameter("pvmsNiv").toUpperCase() + "' ";
			requestParameters.put("Pvms_no", pvmsNiv);
			if(flag.equalsIgnoreCase("j")){
			Map<String, Object> surplusItem = storesHandlerService.getSurplusItem(requestParameters);
			map.put("surplusItem", surplusItem);
			String jsp="surplusJspReport.jsp";
			map.put("contentJsp", jsp);
		return new ModelAndView("indexB","map", map);
		}else{
			requestParameters.put("QUERY", query);
			HMSUtil.generateReport("surplus", requestParameters,
					(Connection) connectionMap.get("con"), response,
					getServletContext());
			return null;
		}
		}else{
			nomenclature = request.getParameter(NOMENCLATURE1);
			item_name=request.getParameter(ITEMNAME);
			requestParameters.put("item_name", item_name);
			if(item_name!=null && !item_name.equals(""))
				{
				query = query + "AND msi.ITEM_ID = '"
			+ request.getParameter("item_name")+ "' ";
				}
			if(flag.equalsIgnoreCase("j"))
			{
				Map<String, Object> surplusItem = storesHandlerService.getSurplusItem(requestParameters);
				map.put("surplusItem", surplusItem);
				String jsp="surplusJspReport.jsp";
				map.put("contentJsp", jsp);
			return new ModelAndView("indexB","map", map);
			}else{
			/*HMSUtil.generateReport("Stores_Surplus_Report_Nomanclature", requestParameters,
					(Connection) connectionMap.get("con"), response,
					getServletContext());*/
				requestParameters.put("QUERY", query);
				HMSUtil.generateReport("surplus", requestParameters,
						(Connection) connectionMap.get("con"), response,
						getServletContext());
			return null;
			}
}


	} catch (Exception e) {
		e.printStackTrace();
	}
	return null;
}

public ModelAndView showIssueDetails(HttpServletRequest request,HttpServletResponse response) {

	Map<String, Object> requestParameters = new HashMap<String, Object>();
	JRDataSource ds = null;
	List itemList = null;
	Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
	HttpSession session = request.getSession();
	int section = 0;
	int subSection = 0;
	int sectionList = 0;
	int subSectionList = 0;
	int selectedRadio = 0;
	int hospitalId = 0;
	String pvmsNiv="";
	String nomenclature="";
	String hospitalName = "";
	int civNo=0;
	requestParameters.put("DEPART", session.getAttribute("deptId"));
	try {
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			hospitalName = storesHandlerService.getHospitalName(hospitalId);
			requestParameters.put("HOSP_NAME", hospitalName);
		}
		
		String userHome = getServletContext().getRealPath("");	         
        String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
        requestParameters.put("path", imagePath);
		/*if (request.getParameter(SECTION_ID) != null && !(request.getParameter(SECTION_ID).equals(""))) {
			section = Integer.parseInt(request.getParameter(SECTION_ID));
		}
		if (request.getParameter(SECTION_ID_DEPENDENT_INDENT) != null &&
					!(request.getParameter(SECTION_ID_DEPENDENT_INDENT).equals(""))) {
			subSection = Integer.parseInt(request.getParameter(SECTION_ID_DEPENDENT_INDENT));
		}
		if (request.getParameter(SECTION_LIST) != null && !(request.getParameter(SECTION_LIST).equals(""))) {
			sectionList = Integer.parseInt(request.getParameter(SECTION_LIST));
		}
		if (request.getParameter(SUB_SECTION_LIST) != null	&& !(request.getParameter(SUB_SECTION_LIST).equals(""))) {
			subSectionList = Integer.parseInt(request.getParameter(SUB_SECTION_LIST));
		}
		if (request.getParameter(SELECTED_RADIO) != null && !(request.getParameter(SELECTED_RADIO).equals(""))) {
			selectedRadio = Integer.parseInt(request.getParameter(SELECTED_RADIO));
		}*/

		/*if ((sectionList == 0 || section == 0)&& (subSectionList == 0 || subSection == 0) && (selectedRadio != 0)) {
			if (selectedRadio == 1) {
				requestParameters.put("ITEM_TYPE", selectedRadio);
			} else if (selectedRadio == 2) {
				requestParameters.put("ITEM_TYPE", selectedRadio);
			}*/
			/*HMSUtil.generateReport("Stores_Surplus_Report_Niv_no", requestParameters,
					(Connection) connectionMap.get("con"), response,
					getServletContext());*/
		/*
		} else if ((sectionList != 0 || section != 0)
				&& (subSectionList == 0 || subSection == 0)) {
			requestParameters.put("SECTION", sectionList);
			if (selectedRadio == 1) {
				requestParameters.put("ITEM_TYPE", selectedRadio);
			} else if (selectedRadio == 2) {
				requestParameters.put("ITEM_TYPE", selectedRadio);
			}
			HMSUtil.generateReport("Stores_Surplus_Report_Niv_no",
					requestParameters, (Connection) connectionMap.get("con"), response, getServletContext());

		}else if ((sectionList == 0 || section == 0) && (subSectionList != 0 || subSection != 0)) {

			requestParameters.put("ITEM_CATEGORY", subSectionList);
			if (selectedRadio == 1) {
				requestParameters.put("ITEM_TYPE", selectedRadio);
			} else if (selectedRadio == 2) {
				requestParameters.put("ITEM_TYPE", selectedRadio);
			}
			HMSUtil.generateReport("Item_Catalogue_subSection",requestParameters, (Connection) connectionMap.get("con"), response, getServletContext());
		} else {
			requestParameters.put("SECTION", sectionList);
			requestParameters.put("ITEM_CATEGORY", subSectionList);
			if (selectedRadio == 1) {
				requestParameters.put("ITEM_TYPE", selectedRadio);
			} else if (selectedRadio == 2) {
				requestParameters.put("ITEM_TYPE", selectedRadio);
			}*/
		if (request.getParameter("civNo") != null && !(request.getParameter("civNo").equals("0"))) {
			
		
			civNo = Integer.parseInt(request.getParameter("civNo"));
			System.out.println(civNo+"-----------");
			requestParameters.put("civNo", civNo);
			HMSUtil.generateReport("Store_Issue_Detail", requestParameters,
					(Connection) connectionMap.get("con"), response,
					getServletContext());
		}
	} catch (Exception e) {
		e.printStackTrace();
	}
	return null;
}

public ModelAndView showStoreMedicineReceipt(HttpServletRequest request,HttpServletResponse response) {

	Map<String, Object> requestParameters = new HashMap<String, Object>();
	JRDataSource ds = null;
	List itemList = null;
	Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
	HttpSession session = request.getSession();
	int section = 0;
	int subSection = 0;
	int sectionList = 0;
	int subSectionList = 0;
	int selectedRadio = 0;
	int hospitalId = 0;
	String pvmsNiv="";
	String nomenclature="";
	String hospitalName = "";
	String crvNo="";
	requestParameters.put("DEPART", session.getAttribute("deptId"));
	try {
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			hospitalName = storesHandlerService.getHospitalName(hospitalId);
			requestParameters.put("HOSP_NAME", hospitalName);
		}
		/*if (request.getParameter(SECTION_ID) != null && !(request.getParameter(SECTION_ID).equals(""))) {
			section = Integer.parseInt(request.getParameter(SECTION_ID));
		}
		if (request.getParameter(SECTION_ID_DEPENDENT_INDENT) != null &&
					!(request.getParameter(SECTION_ID_DEPENDENT_INDENT).equals(""))) {
			subSection = Integer.parseInt(request.getParameter(SECTION_ID_DEPENDENT_INDENT));
		}
		if (request.getParameter(SECTION_LIST) != null && !(request.getParameter(SECTION_LIST).equals(""))) {
			sectionList = Integer.parseInt(request.getParameter(SECTION_LIST));
		}
		if (request.getParameter(SUB_SECTION_LIST) != null	&& !(request.getParameter(SUB_SECTION_LIST).equals(""))) {
			subSectionList = Integer.parseInt(request.getParameter(SUB_SECTION_LIST));
		}
		if (request.getParameter(SELECTED_RADIO) != null && !(request.getParameter(SELECTED_RADIO).equals(""))) {
			selectedRadio = Integer.parseInt(request.getParameter(SELECTED_RADIO));
		}*/

		/*if ((sectionList == 0 || section == 0)&& (subSectionList == 0 || subSection == 0) && (selectedRadio != 0)) {
			if (selectedRadio == 1) {
				requestParameters.put("ITEM_TYPE", selectedRadio);
			} else if (selectedRadio == 2) {
				requestParameters.put("ITEM_TYPE", selectedRadio);
			}*/
			/*HMSUtil.generateReport("Stores_Surplus_Report_Niv_no", requestParameters,
					(Connection) connectionMap.get("con"), response,
					getServletContext());*/
		/*
		} else if ((sectionList != 0 || section != 0)
				&& (subSectionList == 0 || subSection == 0)) {
			requestParameters.put("SECTION", sectionList);
			if (selectedRadio == 1) {
				requestParameters.put("ITEM_TYPE", selectedRadio);
			} else if (selectedRadio == 2) {
				requestParameters.put("ITEM_TYPE", selectedRadio);
			}
			HMSUtil.generateReport("Stores_Surplus_Report_Niv_no",
					requestParameters, (Connection) connectionMap.get("con"), response, getServletContext());

		}else if ((sectionList == 0 || section == 0) && (subSectionList != 0 || subSection != 0)) {

			requestParameters.put("ITEM_CATEGORY", subSectionList);
			if (selectedRadio == 1) {
				requestParameters.put("ITEM_TYPE", selectedRadio);
			} else if (selectedRadio == 2) {
				requestParameters.put("ITEM_TYPE", selectedRadio);
			}
			HMSUtil.generateReport("Item_Catalogue_subSection",requestParameters, (Connection) connectionMap.get("con"), response, getServletContext());
		} else {
			requestParameters.put("SECTION", sectionList);
			requestParameters.put("ITEM_CATEGORY", subSectionList);
			if (selectedRadio == 1) {
				requestParameters.put("ITEM_TYPE", selectedRadio);
			} else if (selectedRadio == 2) {
				requestParameters.put("ITEM_TYPE", selectedRadio);
			}*/
		if (request.getParameter(CRV_NO) != null && !(request.getParameter(CRV_NO).equals(""))) {
			crvNo = request.getParameter(CRV_NO);
			requestParameters.put("crvNo",crvNo);
			HMSUtil.generateReport("Store_Medicine_Receipt", requestParameters,
					(Connection) connectionMap.get("con"), response,
					getServletContext());
		}
	} catch (Exception e) {
		e.printStackTrace();
	}
	return null;
}




public ModelAndView showBatchWiseStock(HttpServletRequest request,HttpServletResponse response) {
	Map<String, Object> requestParameters = new HashMap<String, Object>();
	JRDataSource ds = null;
	List itemList = null;
	Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
	HttpSession session = request.getSession();
	int section = 0;
	int subSection = 0;
	int sectionList = 0;
	int subSectionList = 0;
	int selectedRadio = 0;
	int hospitalId = 0;
	String pvmsNiv="";
	String nomenclature="";
	String hospitalName = "";
	requestParameters.put("DEPART", session.getAttribute("deptId"));
	try {
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			hospitalName = storesHandlerService.getHospitalName(hospitalId);
			requestParameters.put("HOSP_NAME", hospitalName);
		}

			nomenclature = request.getParameter(NOMENCLATURE1);
			item_name=request.getParameter(ITEMNAME);
			requestParameters.put("item_name", item_name);
			HMSUtil.generateReport("MedicineMaster", requestParameters,
					(Connection) connectionMap.get("con"), response,
					getServletContext());

	} catch (Exception e) {
		e.printStackTrace();
	}
	return null;
}




public ModelAndView showBatchWiseJsp(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	map = storesHandlerService.showItemCatalogueJsp();
	jsp = BATCH_WISE_STOCK+ ".jsp";
	title = "Item Catalogue";
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("indexB", "map", map);
}

@SuppressWarnings("unchecked")
public ModelAndView searchIndentDetailsWithoutBar(HttpServletRequest request,HttpServletResponse response) {
 Map<String,Object> map = new HashMap<String, Object>();
 int internalIndentId = 0;
 int hospitalId = 0;
 HttpSession session = request.getSession();
 Box box = HMSUtil.getBox(request);
	if (session.getAttribute("hospitalId") != null){
		hospitalId = Integer.parseInt(""
				+ session.getAttribute("hospitalId"));}
	box.put("hospitalId", hospitalId);
 map = storesHandlerService.searchIndentDetails(box);
 if (request.getParameter(ISSUE_NO) != null) {
  map.put("max", request.getParameter(ISSUE_NO));
 }

 if (request.getParameter("approvedBy") != null) {
	  map.put("approvedBy", request.getParameter("approvedBy"));
 }
 if (request.getParameter("issuedBy") != null) {
	  map.put("issuedBy", Integer.parseInt(HMSUtil.restrictMetaChar(""+request.getParameter("issuedBy"))));
}
if (request.getParameter(ISSUE_NO) != null) {
	   map.put("max", request.getParameter(ISSUE_NO));
	  }
	  if (request.getParameter(REQUEST_BY ) != null) {
  	   map.put("Employee_id", request.getParameter(REQUEST_BY ));
  	  }
	  if (request.getParameter(REQUEST_BY_NAME) != null) {
  	   map.put("Employee_name", request.getParameter(REQUEST_BY_NAME));
  	  }
	  if(request.getParameter("IndentDate")!=null){
		  map.put("Demand_Date", request.getParameter("IndentDate"));
		}
		if(request.getParameter("departmentIdTemp")!=null){
			  map.put("depart", request.getParameter("departmentIdTemp"));
			}
String userName = "";
	int deptId = 0;
	if (session.getAttribute("userName") != null)
		userName = (String) session.getAttribute("userName");
	if (session.getAttribute("hospitalId") != null)
		hospitalId = Integer.parseInt(""
				+ session.getAttribute("hospitalId"));
	if (session.getAttribute("deptId") != null)
		deptId = Integer.parseInt("" + session.getAttribute("deptId"));
	// ------------------------------------------------------------ Box box
	// = HMSUtil.getBox(request);
	Map<String,Object> mapDemand = new HashMap<String, Object>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	int dispenceryId = 0;
	if ((request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP) != null)
			&& (!request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP).equals(""))) {
		dispenceryId = Integer.parseInt(request
				.getParameter(RequestConstants.DEPARTMENT_ID_TEMP));
	}
	jsp = RequestConstants.DEMAND_LIST_AJAX_WITH_BAR_JSP;
	dataMap.put("dispenceryId", dispenceryId);
	dataMap.put("deptId", deptId);
	dataMap.put("hospitalId", hospitalId);
	dataMap.put("userName", userName);
	mapDemand = storesHandlerService.getDemandList(dataMap);
	List<Object[]> storeInternalIndentMPOList = new ArrayList<Object[]>();
	List<MasEmployee> employeeDeptByList = new ArrayList<MasEmployee>();
	if(mapDemand.get("storeInternalIndentMList")!=null){
		storeInternalIndentMPOList=(List<Object[]>)mapDemand.get("storeInternalIndentMList");
	}
	if(mapDemand.get("employeeDeptByList")!=null){
		employeeDeptByList=(List<MasEmployee>)mapDemand.get("employeeDeptByList");
	}
	List<StoreIssueM> searchListForPopup = new ArrayList<StoreIssueM>();
	if(mapDemand.get("searchListForPopup")!=null){
		searchListForPopup=(List)mapDemand.get("searchListForPopup");
	}
	List<Object[]> storeInternalIndentPendingList = new ArrayList<Object[]>();
	if(mapDemand.get("storeInternalIndentPendingList")!=null){
		storeInternalIndentPendingList=(List)mapDemand.get("storeInternalIndentPendingList");
	}
	map.put("storeInternalIndentPendingList", storeInternalIndentPendingList);
	map.put("searchListForPopup", searchListForPopup);
	map.put("employeeDeptByList", employeeDeptByList);
 jsp = RequestConstants.ISSUE_TO_DISP_BAR_JSP;
 jsp = jsp + ".jsp";
 map.put("contentJsp", jsp);
 map.put("storeInternalIndentMPOList",storeInternalIndentMPOList);
 map.put("internalIndentId", internalIndentId);
 return new ModelAndView("index", "map", map);
}


public ModelAndView generateBarcode(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	map = storesHandlerService.showItemCatalogueJsp();
	jsp = BARCODE_GENERATE+ ".jsp";
	title = "Item Catalogue";
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("indexB", "map", map);
}

public ModelAndView getBarcodeNumber(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	String hinNo = "";
	String serviceNo="";
	if (request.getParameter(HIN_NO) != null) {
		hinNo = request.getParameter(HIN_NO);
	}
	if(request.getParameter(SERVICE_NO)!=null){
		serviceNo=request.getParameter(SERVICE_NO);
	}
	String patientName = "";
	patientName = storesHandlerService.getBarCodeNumber(hinNo,serviceNo);

	String jsp = "populateBarcodenoupdate";
	map.put("name", patientName);
	return new ModelAndView(jsp, "map", map);
}

public ModelAndView getHinNoForUpdateAdt(HttpServletRequest request,HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> detailsMap = new HashMap<String, Object>();
	String serviceNo = "";
	String hinNo = "";
	String flag = "";
	int hospitalId=0;
	if (request.getParameter(SERVICE_NO) != null
			&& !(request.getParameter(SERVICE_NO).equals(""))) {
		serviceNo = request.getParameter(SERVICE_NO);
		detailsMap.put("serviceNo", serviceNo);
	}
	if (request.getParameter(HIN_NO) != null
			&& !(request.getParameter(HIN_NO).equals(""))) {
		hinNo = request.getParameter(HIN_NO);
		detailsMap.put("hinNo", hinNo);
	}
	if (request.getParameter("flag") != null
			&& !(request.getParameter("flag").equals(""))) {
		flag = request.getParameter("flag");
		map.put("flag", flag);
	}
	HttpSession session = request.getSession();
	if (session.getAttribute("hospitalId") != null)
		hospitalId = Integer.parseInt(""
				+ session.getAttribute("hospitalId"));
	List<Object> hinNoList = new ArrayList<Object>();
	hinNoList = storesHandlerService.getBatchNoList(serviceNo,hospitalId);
	map.put("hinNoList", hinNoList);
	String jsp = "populateBatchnoupdate";
	return new ModelAndView(jsp, "map", map);

}
public ModelAndView showDemandIssueReciptVoucherJsp(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	map = storesHandlerService.showItemCatalogueJsp();
	jsp = DEMAND_ISSUE_RECEIPT_VOUCHER+ ".jsp";
	title = "Item Catalogue";
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("indexB", "map", map);
}
public ModelAndView showDemanIssueReceiptVoucher(HttpServletRequest request,HttpServletResponse response) {
	Map<String, Object> requestParameters = new HashMap<String, Object>();
	JRDataSource ds = null;
	List itemList = null;
	Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
	HttpSession session = request.getSession();
	int section = 0;
	int subSection = 0;
	int sectionList = 0;
	int subSectionList = 0;
	int selectedRadio = 0;
	int hospitalId = 0;
	String pvmsNiv="";
	String nomenclature="";
	String hospitalName = "";
	requestParameters.put("DEPART", session.getAttribute("deptId"));
	try {
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			hospitalName = storesHandlerService.getHospitalName(hospitalId);
			requestParameters.put("HOSP_NAME", hospitalName);
		}

			nomenclature = request.getParameter(NOMENCLATURE1);
			item_name=request.getParameter(ITEMNAME);
			requestParameters.put("item_name", item_name);
			HMSUtil.generateReport("Demand_Issue_and_Receipt_Voucher", requestParameters,(Connection) connectionMap.get("con"), response,getServletContext());
	} catch (Exception e) {
		e.printStackTrace();
	}
	return null;
}
public ModelAndView showModifiedProformaJsp(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	map = storesHandlerService.showItemCatalogueJsp();
	jsp = MODIFIED_PROFORMA+ ".jsp";
	title = "Item Catalogue";
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("indexB", "map", map);
}
public ModelAndView showModifiedProforma(HttpServletRequest request,HttpServletResponse response) {
	Map<String, Object> requestParameters = new HashMap<String, Object>();
	JRDataSource ds = null;
	List itemList = null;
	Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
	HttpSession session = request.getSession();
	int section = 0;
	int subSection = 0;
	int sectionList = 0;
	int subSectionList = 0;
	int selectedRadio = 0;
	int hospitalId = 0;
	String pvmsNiv="";
	String nomenclature="";
	String hospitalName = "";
	requestParameters.put("DEPART", session.getAttribute("deptId"));
	try {
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			hospitalName = storesHandlerService.getHospitalName(hospitalId);
			requestParameters.put("HOSP_NAME", hospitalName);
		}
			nomenclature = request.getParameter(NOMENCLATURE1);
			item_name=request.getParameter(ITEMNAME);
			requestParameters.put("item_name", item_name);
			HMSUtil.generateReport("PROFORMALP", requestParameters,(Connection) connectionMap.get("con"), response,getServletContext());
	} catch (Exception e)
	{
		e.printStackTrace();
	}
	return null;
}
public ModelAndView showBarcodeNumber(HttpServletRequest request,HttpServletResponse response) {
	Map<String, Object> requestParameters = new HashMap<String, Object>();
	JRDataSource ds = null;
	List itemList = null;
	Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
	HttpSession session = request.getSession();
	int section = 0;
	int subSection = 0;
	int sectionList = 0;
	int subSectionList = 0;
	int selectedRadio = 0;
	int hospitalId = 0;
	String pvmsNiv="";
	String nomenclature="";
	String hospitalName = "";
	String BarCodeNumber="";
	requestParameters.put("DEPART", session.getAttribute("deptId"));
	try {
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			hospitalName = storesHandlerService.getHospitalName(hospitalId);
			requestParameters.put("HOSP_NAME", hospitalName);
		}

		BarCodeNumber=request.getParameter(PATIENT_NAME);
			requestParameters.put("BarCodeNumber", BarCodeNumber);
			HMSUtil.generateReport("BarCodeGeneration", requestParameters,(Connection) connectionMap.get("con"), response,getServletContext());
	} catch (Exception e)
	{
		e.printStackTrace();
	}
	return null;
}
public ModelAndView showInterIssueDateWiseReportJsp(HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	map = storesHandlerService.showItemCatalogueJsp();
	jsp = INTERNAL_ISSUE_REPORT_SHOW + ".jsp";
	title = "INTERNAL ISSUE";
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("indexB", "map", map);
}

public ModelAndView showInternalIssueReport(HttpServletRequest request,HttpServletResponse response) {


	Map<String, Object> requestParameters = new HashMap<String, Object>();
	JRDataSource ds = null;
	List itemList = null;
	Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
	HttpSession session = request.getSession();
	int section = 0;
	int subSection = 0;
	int sectionList = 0;
	int subSectionList = 0;
	int selectedRadio = 0;
	int hospitalId = 0;
	String pvmsNiv="";
	String nomenclature="";
	String hospitalName = "";
	String deptName="";
	Date fromDate;
	Date toDate;
	requestParameters.put("DEPART", session.getAttribute("deptId"));
	try {
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			hospitalName = storesHandlerService.getHospitalName(hospitalId);
			requestParameters.put("HOSP_NAME", hospitalName);
		}

		if (session.getAttribute("deptName") != null) {
			deptName = (String) session.getAttribute("DEPARTMENT_ID");
			requestParameters.put("DepartmentName", deptName);
		}
		if (request.getParameter(FROM_DATE) != null	&& !(request.getParameter(FROM_DATE).equals(""))) {
			fromDate = HMSUtil.convertStringTypeDateToDateType(request.getParameter(FROM_DATE));
			requestParameters.put("FROM_DATE", fromDate);
		}
		if (request.getParameter(TO_DATE) != null && !(request.getParameter(TO_DATE).equals(""))) {
			toDate = HMSUtil.convertStringTypeDateToDateType(request.getParameter(TO_DATE));
			requestParameters.put("TO_DATE", toDate);
		}

			HMSUtil.generateReport("Internal_Issue_Report", requestParameters,(Connection) connectionMap.get("con"), response,getServletContext());
	} catch (Exception e)
	{
		e.printStackTrace();
	}
	return null;
}

public ModelAndView submitGrnwithprint(HttpServletRequest request,
		HttpServletResponse response) {
	Box box = HMSUtil.getBox(request);
	Map<String, Object> dataMap = new HashMap<String, Object>();
	Map<String, Object> cHMap = new HashMap<String, Object>();
	List<StoreGrnM> storeGrnMList = new ArrayList<StoreGrnM>();

	HttpSession session = request.getSession();
	box.put("deptId", session.getAttribute("deptId"));
	box.put("hospitalId", session.getAttribute("hospitalId"));
	box.put("userName", session.getAttribute("userName"));

	dataMap.put("deptId", session.getAttribute("deptId"));
	dataMap.put("hospitalId", session.getAttribute("hospitalId"));
	dataMap.put("userName", session.getAttribute("userName"));

	String msg = "";
	String printUrl = "";
	String url = "";
	String grnNo="";
	int hospitalId = 0;
	grnNo=request.getParameter("grnNo");
	hospitalId = (Integer) session.getAttribute("hospitalId");
	cHMap = storesHandlerService.checkgrnNo(box);
	storeGrnMList = (List) cHMap.get("storeGrnMList");
	if (storeGrnMList.size() == 0) {
		map = storesHandlerService.submitGrn(box);
		msg = map.get("messageTOBeVisibleToTheUser").toString();
	} else {
		msg = cHMap.get("messageTOBeVisibleToTheUser").toString();
	}
		map = storesHandlerService.showGrnJsp(box, dataMap);
		map.put("messageTOBeVisibleToTheUser", msg);
		jsp = CRV_JSP;
		jsp += ".jsp";
			String checkJsp=request.getParameter("checkJsp");

		if(checkJsp.equalsIgnoreCase("grn")){
		url = "/hms/hms/stores?method=showGrnJsp";
		}else if(checkJsp.equalsIgnoreCase("crvLocalPurchase")){
			url = "/hms/hms/stores?method=showLPGrnJsp";
		}else if(checkJsp.equalsIgnoreCase("crvOtherUnit")){
			url = "/hms/hms/stores?method=showOtherUnitGrnJsp";
		}else if(checkJsp.equalsIgnoreCase("crvOtherGovSource")){
			url = "/hms/hms/stores?method=showOtherUnitGrnJsp";
		}
		//printUrl = "/hms/hms/stores?method=printIndentTODepo&indentNo="+indentNo+"&deptId="+deptId;
		if(map.get("supplierId")!=null){
			printUrl = "/hms/hms/stores?method=printGrn1&grnNo="+grnNo+"&deptId="+hospitalId;
		}else{
			printUrl = "/hms/hms/stores?method=printGrn&grnNo="+grnNo+"&deptId="+hospitalId;
		}
		map.put("contentJsp", jsp);
		map.put("grnNo", grnNo);
		map.put("printUrl", printUrl);
		map.put("url", url);
		// javed
		map.put("sup_id", box.getInt(SUPPLIER_ID));
		map.put("chkJsp", request.getParameter("checkJsp"));

		return new ModelAndView("indexB", "map", map);
}

public void printGrn(HttpServletRequest request,
		HttpServletResponse response){


	Map<String, Object> requestParameters = new HashMap<String, Object>();
	JRDataSource ds = null;
	List itemList = null;
	Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
	HttpSession session = request.getSession();
	int hospitalId = 0;
	String hospitalName = "";
	String hospitalAdd = "";
	String grnNo="";
	String consignerName ="";
	requestParameters.put("DEPART", session.getAttribute("deptId"));
	requestParameters.put("hospitalId", session.getAttribute("hospitalId"));
	try {
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			hospitalName = storesHandlerService.getHospitalName(hospitalId);
			hospitalAdd = storesHandlerService.getHospitalAddress(hospitalId);
			if(request.getParameter("supId") != null){
			int sup_Id=Integer.parseInt(request.getParameter("supId"));
			String jsp=request.getParameter("chkJsp");
			consignerName=storesHandlerService.consignerName(sup_Id,jsp);

			}
			requestParameters.put("HOSP_NAME", hospitalName);
			requestParameters.put("CON_NAME", consignerName);
			requestParameters.put("HOSP_ADD", hospitalAdd);

		}
		if (request.getParameter("grnNo") != null) {
			grnNo=request.getParameter("grnNo");
			requestParameters.put("grnNo", grnNo);
		}
		String per[]= grnNo.split("/");
		String period= "20"+per[1];
		requestParameters.put("period", period);
		//HMSUtil.generateReport("crv1", requestParameters,(Connection) connectionMap.get("con"), response,getServletContext());
		// javed khan
		//HMSUtil.generateReport("New_CRV", requestParameters,(Connection) connectionMap.get("con"), response,getServletContext());
		HMSUtil.generateReport("New_CRV2", requestParameters,(Connection) connectionMap.get("con"), response,getServletContext());
		} catch (Exception e)
	{
		e.printStackTrace();
	}

}
public void printGrn1(HttpServletRequest request,
		HttpServletResponse response){
	Map<String, Object> requestParameters = new HashMap<String, Object>();
	JRDataSource ds = null;
	List itemList = null;
	Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
	HttpSession session = request.getSession();
	int hospitalId = 0;
	String hospitalName = "";
	String grnNo="";
	requestParameters.put("DEPART", session.getAttribute("deptId"));
	requestParameters.put("hospitalId", session.getAttribute("hospitalId"));
	try {
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			hospitalName = storesHandlerService.getHospitalName(hospitalId);
			requestParameters.put("HOSP_NAME", hospitalName);
		}
		if (request.getParameter("grnNo") != null) {
			grnNo=request.getParameter("grnNo");
			requestParameters.put("grnNo", grnNo);
		}

			HMSUtil.generateReport("crv2", requestParameters,(Connection) connectionMap.get("con"), response,getServletContext());
		} catch (Exception e)
	{
		e.printStackTrace();
	}

}

//--End By Ashutosh----


public ModelAndView showLpIssueJsp(
		HttpServletRequest request, HttpServletResponse response) {
	String userName = "";
	int deptId = 0;
	int hospitalId = 0;
	String deptName = "";
	HttpSession session = request.getSession();
	if (session.getAttribute("userName") != null)
		userName = (String) session.getAttribute("userName");
	if (session.getAttribute("hospitalId") != null)
		hospitalId = Integer.parseInt(""
				+ session.getAttribute("hospitalId"));
	if (session.getAttribute("deptId") != null)
		deptId = Integer.parseInt("" + session.getAttribute("deptId"));

	if (session.getAttribute("deptName") != null)
		deptName = (String) session.getAttribute("deptName");
	Date currentDate = new Date();
	Map<String, Object> detailsMap = new HashMap<String, Object>();
	// Map<String, Object> dataMap = new HashMap<String, Object>();
	// Map<String, Object> patientMap = new HashMap<String, Object>();
	Map<String, Object> mapForDs = new HashMap<String, Object>();
	mapForDs.put("deptId", deptId);
	mapForDs.put("currentDate", currentDate);
	mapForDs.put("hospitalId", hospitalId);
	detailsMap = storesHandlerService.getLpPrescriptionList(mapForDs);
	detailsMap = storesHandlerService.getLpPrescriptionDetails(mapForDs);
	// dataMap.put("deptId", deptId);
	// dataMap.put("hospitalId", hospitalId);
	// dataMap.put("userName", userName);
	// dataMap.put("deptName", deptName);
	String jsp = "lpIssue";
	jsp += ".jsp";

	map.put("deptId", deptId);
	map.put("hospitalId", hospitalId);
	map.put("userName", userName);
	map.put("deptName", deptName);
	map.put("detailsMap", detailsMap);
	// map.put("patientMap", patientMap);
	map.put("contentJsp", jsp);
	return new ModelAndView("indexB", "map", map);
}

	public void checkCurrentBatchStock(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		String message = "";

		String[] array1 = request.getParameterValues("tt8");
    	List batchIdList = new ArrayList();
    	List issueQtyList = new ArrayList();

    	int k=1;
    	int  totalQtyIssued = 0;
    	for(int i=0;i<array1.length;i++) {
	    	BigDecimal totalQtyRequest=null;
	    	if(!array1[i].trim().equals("blank")) {

		    	String []subArray1 = array1[i].split(",");
		    	for(int j=0;j<subArray1.length;j++) {
			    	String subArray2[] = subArray1[j].split("@");
			    	String qty = subArray2[0].trim();
			   // 	String batch = subArray2[1].trim();
			    //	String expiryDate=subArray2[2].trim();
			    	int batchId = Integer.parseInt(subArray2[3].trim());

			    	batchIdList.add(batchId);
			    	issueQtyList.add(qty);

		    	}
	    	}
    	}
    	dataMap.put("batchIdList", batchIdList);
    	dataMap.put("issueQtyList", issueQtyList);

		StringBuffer sb = new StringBuffer();
		map = storesHandlerService.checkCurrentBatchStock(dataMap);
		if (map.get("message") != null) {
			message = (String) map.get("message");
		}
		try {
			sb.append("<item>");
			if (map.get("message") != null) {
				sb.append("<message>" + message + "</message>");
			} else {
				sb.append("<message>" + " " + "</message>");
			}
			sb.append("</item>");

			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
public ModelAndView showAbcReportJsp(HttpServletRequest request,HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	 map = storesHandlerService.showActualStockReportJsp();
	 title = "ABC Report";
		jsp = ABC_REPORT;
		jsp = jsp + ".jsp";
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("indexB", "map", map);
	}

public ModelAndView showExternalIssueReportJsp(HttpServletRequest request,HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	map = storesHandlerService.showInternalIssueReportJsp();
	title = "External Issue Report";
	jsp = EXTERNAL_ISSUE_REPORT_JSP;
	jsp = jsp + ".jsp";
	map.put("contentJsp", jsp);
	map.put("title", title);

	return new ModelAndView("indexB", "map", map);
	}
public ModelAndView showExternalIssueReport(HttpServletRequest request,HttpServletResponse response) {
	Map<String, Object> requestParameters = new HashMap<String, Object>();
	JRDataSource ds = null;
	List itemList = null;
	Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
	HttpSession session = request.getSession();
	int section = 0;
	int subSection = 0;
	int sectionList = 0;
	int subSectionList = 0;
	int selectedRadio = 0;
	int hospitalId = 0;
	String pvmsNiv="";
	String nomenclature="";
	String hospitalName = "";
	String deptName="";
	Date fromDate;
	Date toDate;
	requestParameters.put("DEPART", session.getAttribute("deptId"));
	try {
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			hospitalName = storesHandlerService.getHospitalName(hospitalId);
			requestParameters.put("HOSP_NAME", hospitalName);
		}
/*
		if (session.getAttribute("deptName") != null) {
			deptName = (String) session.getAttribute("DEPARTMENT_ID");
			requestParameters.put("DepartmentName", deptName);
		}*/
		if (request.getParameter(FROM_DATE) != null	&& !(request.getParameter(FROM_DATE).equals(""))) {
			fromDate = HMSUtil.convertStringTypeDateToDateType(request.getParameter(FROM_DATE));
			requestParameters.put("fromDate", fromDate);
		}
		if (request.getParameter(TO_DATE) != null && !(request.getParameter(TO_DATE).equals(""))) {
			toDate = HMSUtil.convertStringTypeDateToDateType(request.getParameter(TO_DATE));
			requestParameters.put("toDate", toDate);
		}

			HMSUtil.generateReport("External_Issue_Report", requestParameters,(Connection) connectionMap.get("con"), response,getServletContext());
	} catch (Exception e)
	{
		e.printStackTrace();
	}
	return null;
}

	public ModelAndView updateIssueToOtherUnit(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);

		int hospitalId = 0;
		int deptId = 0;
		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null){
			userName = (String) session.getAttribute("userName");
			box.put("userName", session.getAttribute("userName"));
		}
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		Map<String, Object> dataMap = new HashMap<String, Object>();

		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("deptId", deptId);
		boolean flag = false;
		String messageTOBeVisibleToTheUser = "";
		try{
			flag=storesHandlerService.updateIssueToOtherUnit(box);
		}catch (Exception e) {
			e.printStackTrace();
		}
		if (flag) {
			messageTOBeVisibleToTheUser = "Issue to Other Unit Details Updated Successfully !!";

		} else {
			messageTOBeVisibleToTheUser = "Issue to Other Unit Details Not Updated Successfully";
		}
    	String
    	jsp = STORES_ISSUE_MESSAGE_JSP;

    	map.put("messageTOBeVisibleToTheUser",messageTOBeVisibleToTheUser);
    	int issueId=0;
    	if (map.get("issueId") != null)
    	issueId = Integer.parseInt("" + map.get("issueId"));
    	jsp+= ".jsp";
    	url="stores?method=showIssueToOtherUnitsJsp";
    	map.put("issueId", issueId);
    	map.put("issueType","otherUnit");
    	map.put("url", url);
    	map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
}
// Dinesh
	public ModelAndView showPatientInfoJsp(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();

		Map<String, Object> map = new HashMap<String, Object>();
		String jsp = "";
		String title = "";
		String deptName=" ";
		if (session.getAttribute("deptName") != null) {
			deptName = (String) session.getAttribute("deptName");
			map.put("department", deptName);
		}

		jsp += "patientInfoReportJsp";
		jsp += ".jsp";
		title = "receiveItemReport";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("department", deptName);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView printpatientInfoReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		Map<String, Object> parameters = new HashMap<String, Object>();
		Integer deptID=0;
		HttpSession session = request.getSession();
	    String fromDate="";
	    String toDate="";
	    int hospitalId=0;
	    String hospitalName="";
	    Box box = HMSUtil.getBox(request);
	    if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			hospitalName = storesHandlerService.getHospitalName(hospitalId);
			parameters.put("HOS_NAME", hospitalName);
		}
	    fromDate=box.getString(FROM_DATE);
	    toDate= box.getString(TO_DATE);

		if((Integer)session.getAttribute("deptId")!=0 )
		{
		 deptID=	(Integer) session.getAttribute("deptId");
		}

		Map<String, Object> connectionMap = storesHandlerService
		.getConnectionForReport();

	    parameters.put("from_date", fromDate);
		parameters.put("to_date", toDate);
		parameters.put("deptId", deptID);

		String reportName = "patient_info";

		HMSUtil.generateReport(reportName, parameters,
				(Connection) connectionMap.get("con"), response,
				getServletContext());

		return null;
	}
	public ModelAndView showStockDetailJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		box.put("docId", box.get("docId"));
		String jsp = "";
		jsp = "stockDetailJsp" + ".jsp";
		map = storesHandlerService.reportPvms(box);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}
	public ModelAndView showMedicenMasterJsp(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		int deptId=0;
		if((Integer)session.getAttribute("deptId")!=0 )
		{
			deptId=	(Integer) session.getAttribute("deptId");
		}
		int hospitalId = 0;
		if (session.getAttribute("hospitalId") != null)
		{
		hospitalId = (Integer) session.getAttribute("hospitalId");
		}

		box.put("docId", box.get("docId"));
		box.put("deptId", deptId);
		box.put("hospitalId",hospitalId);
		String jsp = "";
		jsp = "MedicenMasterJsp" + ".jsp";
		map = storesHandlerService.reportMasterMedcine(box);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}
	public ModelAndView searchMedicenMasterJsp(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box= HMSUtil.getBox(request);
		box.put("docId", box.get("docId"));
		HttpSession session = request.getSession();
		int hospitalId=0;

			if (session.getAttribute("hospitalId") != null){
				hospitalId = (Integer) session.getAttribute("hospitalId");
			}
		box.put("hospitalId",hospitalId);
		String jsp = "";
		jsp = "MedicenMasterJsp" + ".jsp";
		map = storesHandlerService.reportMasterMedcine(box);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showStockStatusJsp(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		box.put("docId", box.get("docId"));
		String jsp = "";
		jsp = "stockDetailJsp" + ".jsp";
		map = storesHandlerService.reportStockStatus(box);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showStockBatchJsp(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		box.put("docId", box.get("docId"));
		String jsp = "";
		jsp = "stockDetailJsp" + ".jsp";
		map = storesHandlerService.reportStockBatch(box);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}
	public ModelAndView showStockReceiptJsp(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		box.put("docId", box.get("docId"));
		String jsp = "";
		jsp = "stockDetailJsp" + ".jsp";
		map = storesHandlerService.reportStockReceipt(box);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}
	public ModelAndView showStockIssueJsp(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		box.put("docId", box.get("docId"));
		String jsp = "";
		jsp = "stockDetailJsp" + ".jsp";
		map = storesHandlerService.reportStockIssue(box);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}
	public ModelAndView showStockSurplusJsp(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		box.put("docId", box.get("docId"));
		String jsp = "";
		jsp = "stockDetailJsp" + ".jsp";
		map = storesHandlerService.reportStockSurplus(box);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}
	public ModelAndView showStockDeficientJsp(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		box.put("docId", box.get("docId"));
		String jsp = "";
		jsp = "stockDetailJsp" + ".jsp";
		map = storesHandlerService.reportStockDeficient(box);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}
	public ModelAndView showStockABCJsp(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		box.put("docId", box.get("docId"));
		String jsp = "";
		jsp = "stockDetailJsp" + ".jsp";
		map = storesHandlerService.reportStockABC(box);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}
	public ModelAndView showStockVDEJsp(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		box.put("docId", box.get("docId"));
		String jsp = "";
		jsp = "stockDetailJsp" + ".jsp";
		map = storesHandlerService.reportStockVDU(box);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}




	public ModelAndView generateExcelForDepot(HttpServletRequest request,HttpServletResponse response)
	   {
			Map<String, Object> requestParameters = new HashMap<String, Object>();
			int hospitalId = 0;
			int deptId = 0;
			Box box = HMSUtil.getBox(request);
			String hospitalName = "";
			String deptName = "";
			String query = "";
			String po_id="";

			HttpSession session = request.getSession();
			try {

				if (session.getAttribute("hospitalId") != null) {
					hospitalId = (Integer) session.getAttribute("hospitalId");
					hospitalName = storesHandlerService.getHospitalName(hospitalId);
					requestParameters.put("hospitalName", hospitalName);
					requestParameters.put("hospitalId", hospitalId);  // add javed khan
				}

				if (session.getAttribute("deptId") != null) {
					deptId = (Integer) session.getAttribute("deptId");
					requestParameters.put("deptId", deptId);
				}

				if (session.getAttribute("deptName") != null) {
					deptName = session.getAttribute("deptName").toString();
					requestParameters.put("deptName", deptName);
				}
			/*	if ((request.getParameter("sectionId") != null && (!request.getParameter("sectionId").equals("")))) {
					query =query +  "AND mas_store_section.section_id = '"
							+ request.getParameter("sectionId") + "' ";
				}

				if (request.getParameter("sectionId") != null &&(request.getParameter("pvmsNiv") != null && (!request.getParameter("pvmsNiv").equals("")))) {
					query = query + "AND mas_store_item.pvms_no = '"
							+ request.getParameter("pvmsNiv") + "' ";
				}*/
				if(request.getParameter("exl_po")!=null ){

					po_id=request.getParameter("exl_po");
				}

			/*	if ((request.getParameter("sectionId").equals(""))
					&&(request.getParameter("pvmsNiv") != null && (!request.getParameter("pvmsNiv").equals(""))))
				{
					query =query +"and mas_store_item.pvms_no = '"
											+ request.getParameter("pvmsNiv") + "' ";
				}*/
				requestParameters.put("query", query);
				requestParameters.put("po_id", po_id);
			}catch (Exception e)
			{
				e.printStackTrace();
			}

			HSSFWorkbook wb = new HSSFWorkbook();
			

			try {

					map = storesHandlerService.generateExcelForDepot(requestParameters);

				if(map.get("wb") != null){
				wb = (HSSFWorkbook) map.get("wb");
				String file = "ExcelForDepot.xls";
				response.setContentType("application/vnd.ms-excel");
				response.setHeader("Content-disposition", "attachment; filename="+ file);
				wb.write(response.getOutputStream());
				}
				}catch (IOException ioe) {
					ioe.printStackTrace();
			}
			return null;
		}

	public ModelAndView generateExcelForDepot1(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		int hospitalId = 0;
		int deptId = 0;
		Box box = HMSUtil.getBox(request);
		String hospitalName = "";
		String deptName = "";
		String indentNo="";
		HttpSession session = request.getSession();
		try {

			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
				hospitalName = storesHandlerService.getHospitalName(hospitalId);
				requestParameters.put("hospitalName", hospitalName);
				requestParameters.put("hospitalId", hospitalId);
			}

			if (session.getAttribute("deptId") != null) {
				deptId = (Integer) session.getAttribute("deptId");
				requestParameters.put("deptId", deptId);
			}

			if (session.getAttribute("deptName") != null) {
				deptName = session.getAttribute("deptName").toString();
				requestParameters.put("deptName", deptName);
			}

			if(request.getParameter("indentNo")!=null ){

				indentNo=request.getParameter("indentNo");
			}

			requestParameters.put("indentNo", indentNo);
		} catch (Exception e) {
			e.printStackTrace();
		}


			map = storesHandlerService.generateExcelForDepot(requestParameters);
		if (map.get("flag") != null
				&& map.get("flag").toString().equalsIgnoreCase("NoData")) {
			map.put("message", "No Data Found!....");
		} else {

			try {

				response.setContentType("application/vnd.ms-excel");
				response.setHeader("Content-Disposition",
						"attachment; filename="
								+

								map.get("download_path").toString());
				File f = new File(map.get("download_path").toString());
				InputStream in = new FileInputStream(f);
				ServletOutputStream outs = response.getOutputStream();
				int bit = 256;
				int i = 0;
				while ((bit) >= 0) {
					bit = in.read();
					outs.write(bit);
				}
				outs.flush();
				outs.close();
				in.close();
				if (f.exists())
					f.delete();
			} catch (IOException ioe) {
				ioe.printStackTrace();
			}
		}
		return null;
	}


	public ModelAndView getLPItemDetails(HttpServletRequest request,HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		String choice = "";
		int radio_str = 0;
		int hospitalId=0;
		String pageType = "";
		int noOfRows=0;
		String soNo="";
		HttpSession session = request.getSession();
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));
		box.put("hospitalId",hospitalId);
		if (request.getParameter("sos") != null) {
			choice = request.getParameter("sos");
		}
		if (request.getParameter("pageType") != null) {
			pageType = request.getParameter("pageType");
			box.put("pageType", pageType);
		}
		if (request.getParameter("po_id") != null) {
			radio_str = Integer.parseInt("" + request.getParameter("po_id"));
		}
		if (request.getParameter("addedItems") != null) {
			box.put("addedItems", request.getParameter("addedItems"));
		}
		if(request.getParameter("soVenderId")!=null){
			box.put("VenderId",request.getParameter("soVenderId"));
		}
		if(request.getParameter("noOfRows")!=null)
		{
			noOfRows=Integer.parseInt(request.getParameter("noOfRows"));
		}
        if(request.getParameter("soNo")!= null)
        {
        	soNo = request.getParameter("soNo");
        }
		map = (Map) storesHandlerService.getLPItemDetails(box);
		
		map.put("noOfRows",noOfRows);
		map.put("soNo", soNo);
		jsp = "lpItemDetails";
		return new ModelAndView(jsp, "map", map);
	}



	public ModelAndView getLPItemDetailsValidate(HttpServletRequest request,HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		String choice = "";
		int radio_str = 0;
		int hospitalId=0;
		String pageType = "";
		int noOfRows=0;
		String soNo="";
		HttpSession session = request.getSession();
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));
		box.put("hospitalId",hospitalId);
		if (request.getParameter("sos") != null) {
			choice = request.getParameter("sos");
		}
		if (request.getParameter("pageType") != null) {
			pageType = request.getParameter("pageType");
			box.put("pageType", pageType);
		}
		if (request.getParameter("po_id") != null) {
			radio_str = Integer.parseInt("" + request.getParameter("po_id"));
		}
		if (request.getParameter("addedItems") != null) {
			box.put("addedItems", request.getParameter("addedItems"));
		}
		if(request.getParameter("soVenderId")!=null){
			box.put("VenderId",request.getParameter("soVenderId"));
		}
		if(request.getParameter("soNo")!=null){
			soNo = request.getParameter("soNo");
		}
		
		map = (Map) storesHandlerService.getLPItemDetailsValidate(box);
		jsp = "validateItems";
		map.put("soNo", soNo);
		return new ModelAndView(jsp, "map", map);
	}





















	public ModelAndView getLPItemProBDetails(HttpServletRequest request,HttpServletResponse response)
	{
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		String choice = "";
		int radio_str = 0;
		String pageType = "";
		if (request.getParameter("sos") != null) {
			choice = request.getParameter("sos");
		}
		if (request.getParameter("pageType") != null) {
			pageType = request.getParameter("pageType");
			box.put("pageType", pageType);
		}
		if (request.getParameter("po_id") != null) {
			radio_str = Integer.parseInt("" + request.getParameter("po_id"));
		}
		if (request.getParameter("addedItems") != null) {
			box.put("addedItems", request.getParameter("addedItems"));
		}
		if(request.getParameter("soVenderId")!=null){
			box.put("VenderId",request.getParameter("soVenderId"));
		}
		//map = (Map) storesHandlerService.getLPItemDetails(box);
		map = (Map) storesHandlerService.getLPItemProBDetails(box);
		jsp = "lpItemProBDetails";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView showProformaBEntryJsp(HttpServletRequest request,HttpServletResponse response) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();

		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("deptId", deptId);
//		map = storesHandlerService.showDefectiveDrugJsp(dataMap);
		map = storesHandlerService.showProformaBEntryJsp(dataMap);
		jsp = Proforma_B_Entry_Form;
		jsp = jsp + ".jsp";
		title = "Proforma B Entry";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showProformaBEntryFormJsp(HttpServletRequest request,HttpServletResponse response) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();

		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("deptId", deptId);
		map = storesHandlerService.showDefectiveDrugJsp(dataMap);
		jsp = Proforma_B_Entry;
		jsp = jsp + ".jsp";
		title = "Proforma B Entry";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}






	public void fillItemsForProformaBEntry(HttpServletRequest request,
			HttpServletResponse response) {
		// ---- Retriving User Name,Hospital Id,Department Id from Session--
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<StoreItemBatchStock> batchList = new ArrayList<StoreItemBatchStock>();

		Box box = HMSUtil.getBox(request);
		String itemNameField = "";
		String pvmsNo = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (request.getParameter("pvmsNo") != null) {
			pvmsNo = (request.getParameter("pvmsNo"));
		}
		dataMap.put("pvmsNo", pvmsNo);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.fillItemsForDefectiveDrugs(dataMap);
		if (map.get("itemList") != null) {
			itemList = (List) map.get("itemList");
		}
		if (map.get("brandList") != null) {
			brandList = (List) map.get("brandList");
		}
		if (map.get("batchList") != null) {
			batchList = (List) map.get("batchList");
		}
		StringBuffer sb = new StringBuffer();
		try {
			for (MasStoreItem masStoreItem : itemList) {
				sb.append("<item>");
				sb.append("<id>" + masStoreItem.getId() + "</id>");
				sb.append("<pvms>" + masStoreItem.getPvmsNo() + "</pvms>");
				sb.append("<au>"
						+ masStoreItem.getItemConversion().getPurchaseUnit()
								.getUnitName() + "</au>");

				sb.append("</item>");
			}

			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");

		} catch (Exception e) {
			e.printStackTrace();
		}
	}


	public ModelAndView submitProformaBEntry(HttpServletRequest request,HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();

		StoreProformaHeader storeProformaHeader = new StoreProformaHeader();
		//StoreProformaDetail storeProformaDetail = new StoreProformaDetail();
		String grnNo = "";
		java.util.Date date1=new java.util.Date();
		Date entryDate = new Date();
		Date docDate = new Date();
		Date encodedDate = null;
		Date lastChgDate = null;
		String date = "";
		String time = "";
		String encodedBy = "";
		String lastChgBy = "A";
		String lastChgTime = "";
		String buttonFlag = "";
		String reason = "";
		String desc1 = "";
		String desc2 = "";
		String desc3 = "";
		String entryNo = "";
		String userName="";
		int departmentId = 0;
		int authorised_byId=0;
		int enterd_byId=0;
		int noOfRows = 0;
		int pageNo = 1;
		int entryId = 0;
		int deptId = 0;
		int hospitalId=0;
		int authorisedId=0;
		int enteredId=0;
		String toPlace = "";
		String proformaSINo="";
		String proformaDate=null;
		String InoiceNo="";
		String InvoiceDate=null;
		String InvoiceAmt="0.0";
		String proframaFrom="";
		String proformaTo="";
		String status="";      

		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		String preId[]=null;
		int crvId[]=new int[400];

		try {
			if (request.getParameter("pageNo") != null) {
				pageNo = Integer.parseInt(request.getParameter("pageNo"));

			}
			if (request.getParameter("rowLenghtName") != null) {
				noOfRows = Integer.parseInt(request.getParameter("rowLenghtName"));
			}
			if (request.getParameter(ENTRY_ID) != null) {
				entryId = Integer.parseInt(request.getParameter(ENTRY_ID));

			}
			if(request.getParameter("proformaSINo")!=null){
				proformaSINo=request.getParameter("proformaSINo");
			}
			if(request.getParameter("proformaDate")!=null){
				proformaDate=request.getParameter("proformaDate");
			}

			if(request.getParameter("invoiceNo")!=null){
				InoiceNo=request.getParameter("invoiceNo");
				
			}
			if(request.getParameter("invoiceDate")!=null){
				InvoiceDate=request.getParameter("invoiceDate");
			}



			if(request.getParameter("totalInvoiceAmount")!=null){
				InvoiceAmt=request.getParameter("totalInvoiceAmount");
			}

			if(request.getParameter(CHANGED_DATE)!=null){
				date=request.getParameter(CHANGED_DATE);
			}
			if(request.getParameter(time)!=null){
				time=request.getParameter(time);
			}
			if(request.getParameter("status")!=null){
				status=request.getParameter("status");
			}
			if(request.getParameter("crvDateFrom1")!=null){
				proframaFrom=request.getParameter("crvDateFrom1");
			}
			if(request.getParameter("crvDateTo1")!=null){
				proformaTo=request.getParameter("crvDateTo1");
				
			}
		/*if (request.getParameter(TO_PLACE) != null) {
				toPlace = (request.getParameter(TO_PLACE));
			}*/
			/*if (request.getParameter(DESC1) != null) {
				desc1 = (request.getParameter(DESC1));
			}
			if (request.getParameter(DESC2) != null) {
				desc2 = (request.getParameter(DESC2));
			}
			if (request.getParameter(DESC3) != null) {
				desc3 = (request.getParameter(DESC3));
			}

			if (request.getParameter(ENTRY_NO) != null) {
				entryNo = (request.getParameter(ENTRY_NO));
			}
			if (request.getParameter(REASON) != null) {
				reason = request.getParameter(REASON);
			}
			if (request.getParameter(AUTHORISED_BY) != null) {
				authorised_byId = Integer.parseInt(request.getParameter(AUTHORISED_BY));
			}
			if (request.getParameter(ENTERD_BY) != null) {
				enterd_byId = Integer.parseInt(request.getParameter(ENTERD_BY));

			}*/
			
		} catch (Exception e) {
			e.printStackTrace();
		}

		String headerStored = "no";

		if (pageNo == 1) {

			//storeDefectiveDrugM.setDesc1(desc1);
			//storeDefectiveDrugM.setDesc2(desc2);
			//storeDefectiveDrugM.setDesc3(desc3);

			storeProformaHeader.setProformaNo(proformaSINo);
			storeProformaHeader.setProformaDate(HMSUtil.convertStringTypeDateToDateType(proformaDate));
			storeProformaHeader.setChangeDate(HMSUtil.convertStringTypeDateToDateType(date));
			storeProformaHeader.setInvoiceNo(InoiceNo);
			storeProformaHeader.setInvoiceDate(HMSUtil.convertStringTypeDateToDateType(InvoiceDate));
			storeProformaHeader.setProformaDateFrom(HMSUtil.convertStringTypeDateToDateType(proframaFrom));
			storeProformaHeader.setProformaDateTo(HMSUtil.convertStringTypeDateToDateType(proformaTo));
			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map) HMSUtil.getCurrentDateAndTime();
	         String date11 = (String) utilMap.get("currentDate");
	         storeProformaHeader.setProformaLastUpdate(HMSUtil
						.convertStringTypeDateToDateType(date11));        
		
				BigDecimal totAmt=new BigDecimal(0);
				BigDecimal halftotAmt=new BigDecimal(0);
				BigDecimal roundAmt=new BigDecimal(0);
				BigDecimal totalAmount=new BigDecimal(InvoiceAmt);
				
				//totAmt=new BigDecimal(infoMap.get("totalAmount").toString());
				halftotAmt=new BigDecimal(Math.round(totalAmount.doubleValue()));
				roundAmt=halftotAmt.subtract(totalAmount);

				storeProformaHeader.setInvoiceAmount(halftotAmt);
				storeProformaHeader.setRoundOff(roundAmt);
			
				
			storeProformaHeader.setStatus(status);
			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(deptId);
			MasHospital masHospital=new MasHospital();
			masHospital.setId(hospitalId);
			storeProformaHeader.setDepartment(masDepartment);
			storeProformaHeader.setHospital(masHospital);

		} else {
			headerStored = "yes";
			infoMap.put("headerStored", headerStored);
		}
		int length = 0;
		List<StoreProformaDetail> storeProformaDetaillist = new ArrayList<StoreProformaDetail>();
		try {
			int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,SR_NO);

			int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(request, ITEM_ID);
			System.out.println("ItemId-------************-->"+itemIdArray.length);
			String au[]=JKTRequestUtils.getRequiredStringParameters(request, "accu1");
			String cat[] = null;
			
			/*if(JKTRequestUtils.getRequiredStringParameters(request,"category").length>0){
				cat=JKTRequestUtils.getRequiredStringParameters(request,"category");	
			}*/
			
			String IndentNo[]=JKTRequestUtils.getRequiredStringParameters(request,"IndentNo");
			

			/*String disposal[] = JKTRequestUtils.getRequiredStringParameters(
					request, DISPOSAL);
			String authyDeclared[] = JKTRequestUtils
					.getRequiredStringParameters(request, AUTHY_UNDER_DECLARED);*/


			BigDecimal[] quantityArray = new BigDecimal[400];
			BigDecimal[] rateArray=new BigDecimal[400];
			BigDecimal[] disArray=new BigDecimal[400];
			BigDecimal[] taxArray=new BigDecimal[400];


			String mm[] = JKTRequestUtils.getRequiredStringParameters(request,"qty");
			String nn[]=JKTRequestUtils.getRequiredStringParameters(request,"rate");
			String dis[]=JKTRequestUtils.getRequiredStringParameters(request,"dis");
			String tax[]=JKTRequestUtils.getRequiredStringParameters(request,"tax");
			preId=JKTRequestUtils.getRequiredStringParameters(request,"PricriptionDetailId");
			String crvTemp[]=JKTRequestUtils.getRequiredStringParameters(request,"crvData");
			for(int i=0;i<crvTemp.length;i++)
			{
				if(crvTemp[i]!=null && !crvTemp[i].equals(" ")){
					crvId[i]=Integer.parseInt(crvTemp[i].trim());
				}
			}
			int mmLen = mm.length;
			int nnLen=nn.length;
			int disLen=dis.length;
			int taxLen=tax.length;

			for (int i = 0; i < nnLen; i++) {
				if(nn[i]!=null && !nn[i].equals(" ")){
				BigDecimal val = new BigDecimal(nn[i].trim());
				rateArray[i] = val;
				}
			}

			for (int i = 0; i < mmLen; i++) {
				if(mm[i]!=null && !mm[i].equals(" ")){
				BigDecimal val = new BigDecimal(mm[i].trim());
				quantityArray[i] = val;
			}
				}
			for(int i=0;i<disLen;i++){
				if(dis[i]!=null && !dis[i].equals(" ")){
					BigDecimal val = new BigDecimal(dis[i].trim());
					disArray[i] = val;
				}
			}


			for(int i=0;i<taxLen;i++){
				if(tax[i]!=null && !tax[i].equals(" ")){
					BigDecimal val = new BigDecimal(tax[i].trim());
					taxArray[i] = val;
				}
			}

			if (buttonFlag.equals("next")) {
				// if(buttonFlag != null){
				length = 10;
			} else {
				length = noOfRows;
			}

			for (int i = 0; i < length; i++) {
				if (itemIdArray[i] != 0) {

					StoreProformaDetail storeProformaDetailObj = new StoreProformaDetail();


					MasStoreItem masItem = new MasStoreItem();
					masItem.setId(itemIdArray[i]);					
					storeProformaDetailObj.setItem(masItem);
					if(IndentNo[i]!=null){
						
					storeProformaDetailObj.setIndentNo(IndentNo[i]);
					}else{
						
						storeProformaDetailObj.setIndentNo(null);
					}
					storeProformaDetailObj.setAU(au[i]);
					//if(cat[i]!=null)
					//storeProformaDetailObj.setCategory(cat[i]);
					if(request.getParameter("category"+i+1) != null)
						storeProformaDetailObj.setCategory(request.getParameter("category"+i+1));
						
					storeProformaDetailObj.setQty(quantityArray[i]);
					storeProformaDetailObj.setRate(rateArray[i]);
					storeProformaDetailObj.setPrescriptionId(preId[i]);
					storeProformaDetailObj.setCrvId(crvId[i]);
					storeProformaDetailObj.setDiscount(disArray[i]);
					storeProformaDetailObj.setTax(taxArray[i]);
					storeProformaDetailObj.setPo(storeProformaHeader); // javed



					/*if (remarks[i].equals("emptyString2"))
						storeDefectiveDrugTObj.setRemarks("");
					else
						storeDefectiveDrugTObj.setRemarks(remarks[i]);
*/
					/*storeDefectiveDrugTObj
							.setAuthyUnderDeclared(authyDeclared[i]);

					if (disposal[i].equals("emptyString1"))
						storeDefectiveDrugTObj.setDisposal("");
					else
						storeDefectiveDrugTObj.setDisposal(disposal[i]);

					if (expriyDateArray[i].equals("abc")) {
						storeDefectiveDrugTObj.setExpiryDate(null);
					} else {
						storeDefectiveDrugTObj
								.setExpiryDate(HMSUtil
										.convertStringTypeDateToDateType(expriyDateArray[i]));
					}

					StoreItemBatchStock batchStock = new StoreItemBatchStock();
					batchStock.setId(batchNoArr[i]);
					storeDefectiveDrugTObj.setBatchNo(batchStock);
					storeDefectiveDrugTObj
							.setDefectQty(quantityReceivedArray[i]);

					MasStoreBrand masStoreBrand = new MasStoreBrand();
					masStoreBrand.setId(brandIdArray[i]);
					if (brandIdArray[i] != 0) {
						storeDefectiveDrugTObj.setBrand(masStoreBrand);
					} else {
						storeDefectiveDrugTObj.setBrand(null);
					}

					MasManufacturer masManufacturer = new MasManufacturer();
					masManufacturer.setId(manuArray[i]);
					if (manuArray[i] != 0) {
						storeDefectiveDrugTObj
								.setManufacturedBy(masManufacturer);
					} else {
						storeDefectiveDrugTObj.setManufacturedBy(null);
					}*/

					storeProformaDetaillist.add(storeProformaDetailObj);
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		infoMap.put("pageNo", pageNo);
		infoMap.put("entryNo", entryNo);
		infoMap.put("entryId", entryId);
		infoMap.put("storeProformaHeader",storeProformaHeader);
		infoMap.put("storeProformaDetaillist", storeProformaDetaillist);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("preId",preId);
		dataMap.put("crvId",crvId);
		dataMap.put("hospitalId",hospitalId);

		boolean flag = false;
		try {
			flag = storesHandlerService.addProformaBEntry(infoMap, dataMap);

		} catch (Exception e) {
			e.printStackTrace();
		}
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}

		String messageTOBeVisibleToTheUser = "";

		if (flag) {
			if (buttonFlag.equals("next")) {
				jsp = DEFECTIVE_DRUGS_JSP;
				pageNo++;
				messageTOBeVisibleToTheUser = "Proforma B Entry has  been done Successfully";
				map = storesHandlerService.showDefectiveDrugJsp(dataMap);
				if (map.get("entryId") != null) {
					entryId = (Integer) map.get("entryId");
				}
				List<StoreDefectiveDrugM> defectMList = storesHandlerService.getDefectDrug(entryId);
				map.put("defectMList", defectMList);

			} else { System.out.println("Else Part in ProformaBEntry");
				jsp = STORES_MESSAGE_JSP;
				pageNo++;
				messageTOBeVisibleToTheUser = "Proforma B Entry saved successfully.";
			}
		} else {
			messageTOBeVisibleToTheUser = "Proforma B Entry not saved successfully.";
		}

		jsp = "message";
		jsp += ".jsp";

		url = "/hms/hms/stores?method=showProformaBEntryJsp";
	String printUrl ="/hms/hms/stores?method=generateProformaBReport&proformaNo="+proformaSINo; // javed
		map.put("printUrl", printUrl); // javed
		map.put("proformaNo", proformaSINo);// javed
		map.put("entryNo", entryNo);
		map.put("pageNo", pageNo);
		map.put("contentJsp", jsp);
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("indexB", "map", map);
	}
	/*public ModelAndView reportPvms(HttpServletRequest request,
			HttpServletResponse response) {
		session = request.getSession();
		Box box = HMSUtil.getBox(request);
		box.put("docId", box.get("docId"));
		Map<String, Object> map = new HashMap<String, Object>();
		box.put("storeType", box.get("storeType"));
		if (session.getAttribute("deptId") != null)
			box.put("deptId", session.getAttribute("deptId"));
	    map = storesHandlerService.reportPvms(box);
		jsp = STORE_MMF_DEPARTMENT_JSP;
		jsp = jsp + ".jsp";
		title = "MMF Entry";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}*/

	// javed khan
	public ModelAndView localPurchaseRegisterReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		int hospitalId=0;
		if (session.getAttribute("hospitalId") != null){
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
			}
		List<MasStoreSupplier>  supplierList = storesHandlerService.getSupplierName(hospitalId);
		title = "Local Purchase Register Report";
		jsp = "localPurchaseRegister";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("supplierList", supplierList);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}

	// Javed khan
	public ModelAndView generateLocalPurchaseRegisterReport(HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Date fromDate = null;
		Date toDate = null;
		int hospitalId = 0;
		int deptId = 0;
		String hospitalName = "";
		String deptName = "";
		String flag="";
		String pvms="";
		String vendor="";
		String fromCrv="";
		String toCrv="";
		String item_name="";
		HttpSession session = request.getSession();
		requestParameters.put("DEPART", session.getAttribute("deptId"));
		try {
			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
				hospitalName = storesHandlerService.getHospitalName(hospitalId);
				requestParameters.put("HOSP_NAME", hospitalName);
				requestParameters.put("hospitalId", hospitalId);
			}

			if (session.getAttribute("deptName") != null) {
				deptName = (String) session.getAttribute("deptName");
				requestParameters.put("DepartmentName", deptName);
			}
			if (request.getParameter(FROM_DATE) != null	&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request.getParameter(FROM_DATE));
				requestParameters.put("FROM_DATE", fromDate);
				requestParameters.put("fromDate", request.getParameter(FROM_DATE));
			}
			if (request.getParameter("flag") != null	&& !(request.getParameter("flag").equals(""))) {
				flag =(String) request.getParameter("flag");
			}
			if (request.getParameter(TO_DATE) != null && !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request.getParameter(TO_DATE));
				requestParameters.put("TO_DATE", toDate);
				requestParameters.put("toDate", request.getParameter(TO_DATE));
			}
			if (request.getParameter("pvms") != null ) {
				pvms= (String)request.getParameter("pvms");

				requestParameters.put("pvms", pvms);
			}
			if (request.getParameter(SUPPLIER_ID) != null &&  !request.getParameter(SUPPLIER_ID).equals("")) {
				 vendor= (String)request.getParameter(SUPPLIER_ID);

				requestParameters.put("vendor", vendor);
			}

			if (request.getParameter("fromCrv") != null &&  !request.getParameter("fromCrv").equals("")) {
				fromCrv= (String)request.getParameter("fromCrv");

				requestParameters.put("fromCrv", fromCrv);
			}
			if (request.getParameter("toCrv") != null &&  !request.getParameter("toCrv").equals("")) {
				toCrv= (String)request.getParameter("toCrv");

				requestParameters.put("toCrv", toCrv);
			}
			if (request.getParameter("nameItem") != null &&  !request.getParameter("nameItem").equals("")) {
				item_name= (String)request.getParameter("nameItem");
				String item[]=item_name.split("\\[");

				requestParameters.put("nameItem", item[0]);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("requestParameters",requestParameters);

		map.put("deptName", deptName);
		//if(flag.equalsIgnoreCase("j")){
			Map<String, Object> localPurcahageRegister = storesHandlerService.getLocalRegisterReport(requestParameters);
			List<MasStoreSupplier>  supplierList = storesHandlerService.getSupplierName(hospitalId);
			map.put("supplierList", supplierList);
			map.put("localPurcahageRegister", localPurcahageRegister);
			String jsp="localPurchaseRegisterJspReport.jsp";
			map.put("contentJsp", jsp);
		return new ModelAndView("indexB","map", map);
		//}

	}

	// javed khan
	public ModelAndView defectiveDrugsReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		title = "Defective Drugs Register Report";
		jsp = "DefectiveDrugsRegister";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}

	// Javed khan
	public ModelAndView generateDefectiveDrugsReport(HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Date fromDate = null;
		Date toDate = null;
		int hospitalId = 0;
		int deptId = 0;
		String hospitalName = "";
		String deptName = "";
		String flag="";
		HttpSession session = request.getSession();
		requestParameters.put("DEPART", session.getAttribute("deptId"));
		try {
			String qry="";
			if(request.getParameter("cmdId")!=null && !request.getParameter("cmdId").equals("") && !request.getParameter("cmdId").equals("0") && request.getParameter("hospitalId")!=null && request.getParameter("hospitalId").equals("0") && request.getParameter("hospitalId").equals("")){
				
				qry += "  and mh.command_id="+Integer.parseInt(request.getParameter("cmdId"));
				hospitalName = storesHandlerService.getHospitalName(hospitalId);
				requestParameters.put("HOSP_NAME", hospitalName);
			}else{
				if(request.getParameter("hospitalId")!=null && !request.getParameter("hospitalId").equals("") && !request.getParameter("hospitalId").equals("0")){
					hospitalId = Integer.parseInt(request.getParameter("hospitalId"));
				}else{
					hospitalId = (Integer)session.getAttribute("hospitalId");
				}
				qry += "  and mas_medical_examination_report.hospital_id="+hospitalId;
				hospitalName = storesHandlerService.getHospitalName(hospitalId);
				requestParameters.put("HOSP_NAME", hospitalName);
			}
		
			if (session.getAttribute("deptName") != null) {
				deptName = (String) session.getAttribute("deptName");
				requestParameters.put("DepartmentName", deptName);
			}
			if (request.getParameter(FROM_DATE) != null	&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request.getParameter(FROM_DATE));
				requestParameters.put("FROM_DATE", fromDate);
				requestParameters.put("fromDate", request.getParameter(FROM_DATE));
			}
			if (request.getParameter("flag") != null	&& !(request.getParameter("flag").equals(""))) {
				flag =(String) request.getParameter("flag");
			}
			if (request.getParameter(TO_DATE) != null && !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request.getParameter(TO_DATE));
				requestParameters.put("TO_DATE", toDate);
				requestParameters.put("toDate", request.getParameter(TO_DATE));
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("requestParameters",requestParameters);

		map.put("deptName", deptName);
		//if(flag.equalsIgnoreCase("j")){
			Map<String, Object> defectiveDrugsItem = storesHandlerService.getDefectiveDrugsItem(requestParameters);
			map.put("defectiveDrugsItem", defectiveDrugsItem);
			String jsp="defectiveDrugsRegisterJspReport.jsp";
			map.put("contentJsp", jsp);
		return new ModelAndView("indexB","map", map);
		//}

	}
	

	//By Mansi on 20 March 2013
	public ModelAndView showDefectiveDrugRpt(HttpServletRequest request,
			HttpServletResponse response) {
		Date fromDate = null;
		Date toDate = null;
		int hospitalId = 0;
		HttpSession session = request.getSession();
		Box box = null;
		if(session.getAttribute("box")!=null){
			box = (Box)session.getAttribute("box");
		}else{
			box = HMSUtil.getBox(request);
		}
		
		
		if (!box.getString(FROM_DATE).equals("")) {
			fromDate = HMSUtil.convertStringTypeDateToDateType(box.getString(FROM_DATE));
		}
		
		if (!box.getString(TO_DATE).equals("")) {
			toDate = HMSUtil.convertStringTypeDateToDateType(box.getString(TO_DATE));
		}
		String qry = "";

		if(request.getParameter("cmdId")!=null && !request.getParameter("cmdId").equals("") && !request.getParameter("cmdId").equals("0") && request.getParameter("hospitalId")!=null && request.getParameter("hospitalId").equals("0") && request.getParameter("hospitalId").equals("")){
			
			qry += "  and mh.command_id="+Integer.parseInt(request.getParameter("cmdId"));
		}else{
			if(request.getParameter("hospitalId")!=null && !request.getParameter("hospitalId").equals("") && !request.getParameter("hospitalId").equals("0")){
				hospitalId = Integer.parseInt(request.getParameter("hospitalId"));
			}else{
				hospitalId = (Integer)session.getAttribute("hospitalId");
			}
			qry += "  and STORE_DEFECTIVE_DRUG_M.hospital_id="+hospitalId;
		}
		
		

		Map<String, Object> detailsMap = new HashMap<String, Object>();
		detailsMap = storesHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("fromDate", fromDate);
		parameters.put("toDate", toDate);
		parameters.put("qry", qry);
		parameters.put("hospitalId", hospitalId);
		HMSUtil.generateReport("defective_drug_rpt", parameters,
				(Connection) detailsMap.get("con"), response,
				getServletContext());
		return null;
	}

	public ModelAndView showPeformaBRpt(HttpServletRequest request,
			HttpServletResponse response) {
		Date fromDate = null;
		Date toDate = null;
		int hospitalId = 0;
		HttpSession session = request.getSession();
		Box box = null;
		if(session.getAttribute("box")!=null){
			box = (Box)session.getAttribute("box");
		}else{
			box = HMSUtil.getBox(request);
		}
		
		
		if (!box.getString(FROM_DATE).equals("")) {
			fromDate = HMSUtil.convertStringTypeDateToDateType(box.getString(FROM_DATE));
		}
		
		if (!box.getString(TO_DATE).equals("")) {
			toDate = HMSUtil.convertStringTypeDateToDateType(box.getString(TO_DATE));
		}
		String qry = "";

		if(request.getParameter("cmdId")!=null && !request.getParameter("cmdId").equals("") && !request.getParameter("cmdId").equals("0") && request.getParameter("hospitalId")!=null && request.getParameter("hospitalId").equals("0") && request.getParameter("hospitalId").equals("")){
			
			qry += "  and h.command_id="+Integer.parseInt(request.getParameter("cmdId"));
		}else{
			if(request.getParameter("hospitalId")!=null && !request.getParameter("hospitalId").equals("") && !request.getParameter("hospitalId").equals("0")){
				hospitalId = Integer.parseInt(request.getParameter("hospitalId"));
			}else{
				hospitalId = (Integer)session.getAttribute("hospitalId");
			}
			qry += "  and p.hospital_id="+hospitalId;
		}
		
		

		Map<String, Object> detailsMap = new HashMap<String, Object>();
		detailsMap = storesHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("fromDate", fromDate);
		parameters.put("toDate", toDate);
		parameters.put("qry", qry);
		parameters.put("hospitalId", hospitalId);
		HMSUtil.generateReport("proforma_b", parameters,
				(Connection) detailsMap.get("con"), response,
				getServletContext());
		return null;
	}
	
	public ModelAndView showProformaABCRpt(HttpServletRequest request,
			HttpServletResponse response) {
		Date fromDate = null;
		Date toDate = null;
		int hospitalId = 0;
		HttpSession session = request.getSession();
		Box box = null;
		if(session.getAttribute("box")!=null){
			box = (Box)session.getAttribute("box");
		}else{
			box = HMSUtil.getBox(request);
		}
		
		
		if (!box.getString(FROM_DATE).equals("")) {
			fromDate = HMSUtil.convertStringTypeDateToDateType(box.getString(FROM_DATE));
		}
		
		if (!box.getString(TO_DATE).equals("")) {
			toDate = HMSUtil.convertStringTypeDateToDateType(box.getString(TO_DATE));
		}
		String qry = "";

		if(request.getParameter("cmdId")!=null && !request.getParameter("cmdId").equals("") && !request.getParameter("cmdId").equals("0") && request.getParameter("hospitalId")!=null && request.getParameter("hospitalId").equals("0") && request.getParameter("hospitalId").equals("")){
			
			qry += "  and h.command_id="+Integer.parseInt(request.getParameter("cmdId"));
		}else{
			if(request.getParameter("hospitalId")!=null && !request.getParameter("hospitalId").equals("") && !request.getParameter("hospitalId").equals("0")){
				hospitalId = Integer.parseInt(request.getParameter("hospitalId"));
			}else{
				hospitalId = (Integer)session.getAttribute("hospitalId");
			}
			qry += "  and p.hospital_id="+hospitalId;
		}
		
		

		Map<String, Object> detailsMap = new HashMap<String, Object>();
		detailsMap = storesHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("fromDate", fromDate);
		parameters.put("toDate", toDate);
		parameters.put("qry", qry);
		parameters.put("hospitalId", hospitalId);
		HMSUtil.generateReport("proforma_abc", parameters,
				(Connection) detailsMap.get("con"), response,
				getServletContext());
		return null;
	}
	
	public ModelAndView showDefectiveDrugPendingRpt(HttpServletRequest request,
			HttpServletResponse response) {
		Date fromDate = null;
		Date toDate = null;
		int hospitalId = 0;
		HttpSession session = request.getSession();
		Box box = null;
		if(session.getAttribute("box")!=null){
			box = (Box)session.getAttribute("box");
		}else{
			box = HMSUtil.getBox(request);
		}
		
		
		if (!box.getString(FROM_DATE).equals("")) {
			fromDate = HMSUtil.convertStringTypeDateToDateType(box.getString(FROM_DATE));
		}
		
		if (!box.getString(TO_DATE).equals("")) {
			toDate = HMSUtil.convertStringTypeDateToDateType(box.getString(TO_DATE));
		}
		String qry = "";

		if(request.getParameter("cmdId")!=null && !request.getParameter("cmdId").equals("") && !request.getParameter("cmdId").equals("0") && request.getParameter("hospitalId")!=null && request.getParameter("hospitalId").equals("0") && request.getParameter("hospitalId").equals("")){
			
			qry += "  and h.command_id="+Integer.parseInt(request.getParameter("cmdId"));
		}else{
			if(request.getParameter("hospitalId")!=null && !request.getParameter("hospitalId").equals("") && !request.getParameter("hospitalId").equals("0")){
				hospitalId = Integer.parseInt(request.getParameter("hospitalId"));
			}else{
				hospitalId = (Integer)session.getAttribute("hospitalId");
			}
			qry += "  and m.hospital_id="+hospitalId;
		}
		
		

		Map<String, Object> detailsMap = new HashMap<String, Object>();
		detailsMap = storesHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("fromDate", fromDate);
		parameters.put("toDate", toDate);
		parameters.put("qry", qry);
		parameters.put("hospitalId", hospitalId);
		HMSUtil.generateReport("defective_drug_monitoring", parameters,
				(Connection) detailsMap.get("con"), response,
				getServletContext());
		return null;
	}
	// javed khan
	public ModelAndView fsnAnalysisReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		title = "FSN Analysis Report";
		jsp = "FSNAnalysisReport";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}

	//javed khan

	public ModelAndView printfsnAnalysisJspReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		Date fromDate = null;
		Date toDate = null;
		String fsnType="";
		int month1=0;
		String from_date="";
		String to_date="";
		int hospitalId=0;
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		Calendar calendar=Calendar.getInstance();
		SimpleDateFormat formatter= new SimpleDateFormat("dd/MM/yyyy");
        String fsnToDate = formatter.format(calendar.getTime());
		// for fast moving item
		Calendar calendar1=Calendar.getInstance();
		calendar1.add(Calendar.DAY_OF_YEAR, -30);
		SimpleDateFormat formatter1= new SimpleDateFormat("dd/MM/yyyy");
		String fFromDate = formatter1.format(calendar1.getTime());

		// for slow moving item
		Calendar calendar2=Calendar.getInstance();
		calendar2.add(Calendar.DAY_OF_YEAR, -60);
		SimpleDateFormat formatter2= new SimpleDateFormat("dd/MM/yyyy");
		String sFromDate  = formatter2.format(calendar2.getTime());

		// for non moving item
		Calendar calendar3=Calendar.getInstance();
		calendar3.add(Calendar.DAY_OF_YEAR, -90);
		SimpleDateFormat formatter3= new SimpleDateFormat("dd/MM/yyyy");
		String nFromDate  = formatter3.format(calendar3.getTime());

		String month=String.valueOf((calendar.get(Calendar.MONTH))+1);
		String date=String.valueOf(calendar.get(Calendar.DATE));
		int year=calendar.get(calendar.YEAR);
		if(month.length()<2){
			month="0"+month;
		}
		if(date.length()<2){
			date="0"+date;
		}

		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
			requestParameters.put("deptId", deptId);
		}


		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			requestParameters.put("hospitalId", hospitalId);
		}

		/*if (request.getParameter("fsnType") != null	&& !(request.getParameter("fsnType").equals(""))) {
			fsnType =(String) request.getParameter("fsnType");
			requestParameters.put("fsnType", fsnType);
		} commente and added by Dipali*/
		if (request.getParameter("fsnTypeValue") != null	&& !(request.getParameter("fsnTypeValue").equals(""))) {
			fsnType =(String) request.getParameter("fsnTypeValue");
			requestParameters.put("fsnType", fsnType);
		}

		if (request.getParameter("lastMonth") != null && !(request.getParameter("lastMonth").equals(""))) {
			String lastMonth=request.getParameter("lastMonth");
			month1=Integer.parseInt(lastMonth);
			//requestParameters.put("TO_DATE", toDate);
		}
		Map<String, Object> connectionMap = storesHandlerService
		.getConnectionForReport();
		if(fsnType.equals("f")){
			requestParameters.put("fFromDate", fFromDate);
			requestParameters.put("deptId", deptId);
			requestParameters.put("hospitalId", hospitalId);
			HMSUtil.generateReport("fsn_fast_moving", requestParameters,(Connection) connectionMap.get("con"), response, getServletContext());
		}
		else if(fsnType.equals("s")){
			requestParameters.put("sFromDate", sFromDate);
			requestParameters.put("deptId", deptId);
			requestParameters.put("hospitalId", hospitalId);
			HMSUtil.generateReport("fsn_slow_moving", requestParameters,(Connection) connectionMap.get("con"), response, getServletContext());
		}else if(fsnType.equals("n")){
			requestParameters.put("deptId", deptId);
			requestParameters.put("hospitalId", hospitalId);
			HMSUtil.generateReport("fsn_non_moving", requestParameters,(Connection) connectionMap.get("con"), response, getServletContext());
		}
		
		/*Map<String, Object> fsnItem = storesHandlerService.getFSNItem(requestParameters);
		map.put("fsnItem", fsnItem);
		map.put("fsnType",fsnType);
		String flag=(String)request.getParameter("flag");*/
		return null;
	}

	
	public ModelAndView fsnAnalysisJspReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		Date fromDate = null;
		Date toDate = null;
		String fsnType="";
		int month1=0;
		String from_date="";
		String to_date="";
		int hospitalId=0;
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		HttpSession session = request.getSession();

		Calendar calendar=Calendar.getInstance();
		SimpleDateFormat formatter= new SimpleDateFormat("dd/MM/yyyy");

			  String fsnToDate = formatter.format(calendar.getTime());

		// for fast moving item
		Calendar calendar1=Calendar.getInstance();
		calendar1.add(Calendar.DAY_OF_YEAR, -30);
		SimpleDateFormat formatter1= new SimpleDateFormat("dd/MM/yyyy");
		String fFromDate = formatter1.format(calendar1.getTime());

		// for slow moving item
		Calendar calendar2=Calendar.getInstance();
		calendar2.add(Calendar.DAY_OF_YEAR, -60);
		SimpleDateFormat formatter2= new SimpleDateFormat("dd/MM/yyyy");
		String sFromDate  = formatter2.format(calendar2.getTime());

		// for non moving item
		Calendar calendar3=Calendar.getInstance();
		calendar3.add(Calendar.DAY_OF_YEAR, -90);
		SimpleDateFormat formatter3= new SimpleDateFormat("dd/MM/yyyy");
		String nFromDate  = formatter3.format(calendar3.getTime());

		String month=String.valueOf((calendar.get(Calendar.MONTH))+1);
		String date=String.valueOf(calendar.get(Calendar.DATE));
		int year=calendar.get(calendar.YEAR);
		if(month.length()<2){
			month="0"+month;
		}
		if(date.length()<2){
			date="0"+date;
		}

		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
			requestParameters.put("deptId", deptId);
		}


		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			requestParameters.put("hospitalId", hospitalId);
		}

		if (request.getParameter("fsnType") != null	&& !(request.getParameter("fsnType").equals(""))) {
			fsnType =(String) request.getParameter("fsnType");
			requestParameters.put("fsnType", fsnType);
		}
		/*if (request.getParameter(FROM_DATE) != null	&& !(request.getParameter(FROM_DATE).equals(""))) {
			fromDate = HMSUtil.convertStringTypeDateToDateType(request.getParameter(FROM_DATE));
			requestParameters.put("FROM_DATE", fromDate);
			requestParameters.put("fromDate", request.getParameter(FROM_DATE));
		}

		if (request.getParameter(TO_DATE) != null && !(request.getParameter(TO_DATE).equals(""))) {
			toDate = HMSUtil.convertStringTypeDateToDateType(request.getParameter(TO_DATE));
			requestParameters.put("TO_DATE", toDate);
			requestParameters.put("toDate", request.getParameter(TO_DATE));
		}*/

		if (request.getParameter("lastMonth") != null && !(request.getParameter("lastMonth").equals(""))) {
			String lastMonth=request.getParameter("lastMonth");
			month1=Integer.parseInt(lastMonth);
			//requestParameters.put("TO_DATE", toDate);
		}
		/*f(month1<Integer.parseInt(month)){
			int from_month=Integer.parseInt(month)-month1;
			int to_month=Integer.parseInt(month)-1;
			from_date="01"+"/"+from_month+"/"+year;
			to_date="01"+"/"+to_month+"/"+year;
			requestParameters.put("from_date", from_date);
			requestParameters.put("to_date", to_date);
			Map<String, Object> fsnItem = storesHandlerService.getFSNItem(requestParameters);
			map.put("fsnItem", fsnItem);
			map.put("fsnType",fsnType);
		}
		else if(month1>=Integer.parseInt(month)){
				int negtive_month=Integer.parseInt(month)-month1;
				if(Integer.parseInt(month)!=1){
					int to_month=Integer.parseInt(month)-1;
					from_date="01"+"/"+(12+negtive_month)+"/"+(year-1);
					to_date="01"+"/"+to_month+"/"+year;
				}else{
					int to_month=12;
					from_date="01"+"/"+(12+negtive_month)+"/"+(year-1);
					to_date="01"+"/"+to_month+"/"+(year-1);
				}
			requestParameters.put("from_date", from_date);
			requestParameters.put("to_date", to_date);
			Map<String, Object> fsnItem = storesHandlerService.getFSNItem(requestParameters);
			map.put("fsnItem", fsnItem);
			map.put("fsnType",fsnType);

		}*/
		requestParameters.put("fsnToDate", fsnToDate);
		requestParameters.put("fFromDate", fFromDate);
		requestParameters.put("sFromDate", sFromDate);
		requestParameters.put("nFromDate", nFromDate);
		Map<String, Object> fsnItem = storesHandlerService.getFSNItem(requestParameters);
		map.put("fsnItem", fsnItem);
		map.put("fsnType",fsnType);
			String flag=(String)request.getParameter("flag");
		if(flag.equalsIgnoreCase("j")){
		title = "FSN Analysis Jsp Report";
		jsp = "FSNAnalysisReport";
		jsp = jsp + ".jsp";
		map.put("flag", flag);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);

	}else{
		title = "FSN Analysis Jsp Report";
		jsp = "FSNAnalysisReportExcel";
		//jsp = jsp + ".jsp";
		map.put("flag", flag);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}


	}

	// javed khan
	public ModelAndView vedAnalysisReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
			requestParameters.put("deptId", deptId);
		}
		//Map<String, Object> vedItem = storesHandlerService.getVEDItem(requestParameters);
		//map.put("vedItem", vedItem);
		title = "VED Analysis Report";
		jsp = "VEDAnalysisReport";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}

	// javed khan
	public ModelAndView vedAnalysisJspReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		String vedType="";
		int hospitalId = 0;  // add javed khan
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
			requestParameters.put("deptId", deptId);
		}

		 // add javed khan

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			requestParameters.put("hospitalId", hospitalId);
		}
		vedType = request.getParameter("vedType");
		requestParameters.put("vedType", vedType);
		Map<String, Object> vedItem = storesHandlerService.getVEDItem(requestParameters);
		String flag=(String)request.getParameter("flag");
		if(flag.equalsIgnoreCase("j")){
		map.put("vedItem", vedItem);
		title = "VED Analysis Report";
		jsp = "VEDAnalysisReport";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
		}else
		{
			map.put("vedItem", vedItem);
			title = "VED Analysis Report";
			jsp = "VEDAnalysisReportExcel";
			//jsp = jsp + ".jsp";
			map.put("contentJsp", jsp);
			map.put("title", title);
			return new ModelAndView(jsp, "map", map);
		}
	}
	// javed khan
	public ModelAndView turnOverRegister(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		title = "Turn Over Register";
		jsp = "turnOverRegister";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView getTurnOverData(HttpServletRequest request,
			HttpServletResponse response) throws ParseException {

		HttpSession session = request.getSession();
		int deptId = 0;
		int batchId = 0;
		int itemId=0;
		int hospitalId=0;
		String batchNo = "";
		String manufacturer="";
		Date expirydate = new Date();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List objectList2 = new ArrayList();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (request.getParameter(BATCH_ID) != null) {
			batchNo = ("" + (request.getParameter(BATCH_ID)));

		}
		if (request.getParameter(ITEM_ID) != null) {
			itemId = Integer.parseInt("" + (request.getParameter(ITEM_ID)));
		}
		// add javed khan
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt("" + session.getAttribute("hospitalId"));

		dataMap.put("deptId", deptId);
		dataMap.put("batchNo", batchNo);
		dataMap.put("itemId", itemId);
		dataMap.put("hospitalId", hospitalId);
		String date4MySQL1 = "";
		String date4MySQL2="";
		Object[] ob=null;
		try {
			map = storesHandlerService.getTurnOverDataInAjax(dataMap);
			SimpleDateFormat formatterIn = new SimpleDateFormat("yyyy-MM-dd");
			SimpleDateFormat formatterOut = new SimpleDateFormat("dd/MM/yyyy");
			if(map.get("expiryDate") !=null){
			date4MySQL1 = formatterOut.format(formatterIn.parse(""+ map.get("expiryDate")));
			}
			if(map.get("manufacturingDate") !=null){
				date4MySQL2 = formatterOut.format(formatterIn.parse(""+ map.get("manufacturingDate")));
				}

			if(map.get("manufacturer") !=null){
				manufacturer =""+ map.get("manufacturer");
				}

			if(map.get("objectList2") !=null){
				 objectList2=(List)map.get("objectList2");
				 ob=(Object[])objectList2.get(0);
				}

		} catch (Exception e) {
			e.printStackTrace();
		}
		int mId = 1;
		if (map.get("mId") != null) {
			mId = Integer.parseInt(("" + map.get("mId")));
		}
		StringBuffer sb = new StringBuffer();
		try {
			sb.append("<item>");
			sb.append("<expiryDate>" + date4MySQL1 + "</expiryDate>");
			sb.append("<manufacturingDate>" + date4MySQL2 + "</manufacturingDate>");
			sb.append("<mId>" + mId + "</mId>");
			sb.append("<manufacturer>" + manufacturer + "</manufacturer>");
			sb.append("<values>");
			for(int i=0; i<objectList2.size() ; i++){
				ob=(Object[])objectList2.get(i);
			  sb.append("<value>");
				sb.append("<dt>" + ob[0] + "</dt>");
				sb.append("<docNo>" + ob [1]+ "</docNo>");
				sb.append("<recQty>" + ob[2] + "</recQty>");
				sb.append("<issuedQty>" + ob[3] + "</issuedQty>");
				sb.append("<closQty>" + ob[4] + "</closQty>");
				sb.append("</value>");
			}
			sb.append("</values>");
			sb.append("</item>");
			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");

		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
		response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}
		title = "Res Turn Over Register";
		jsp = "responceTurnOverRegister";
		title = "Title";


		return new ModelAndView(jsp, "map", map);
	}

	// javed khan
	public ModelAndView drugsStockPosition(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		title = "FSN Analysis Report";
		jsp = "drugsStockPositionInSMC";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView generateDrugsStockPosition(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> datamap = new HashMap<String, Object>();
		String pvmsNo = "";
		String brand = "";
		int itemId = 0;
		int hospitalId = 0;
		String hospitalName = "";
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			hospitalName = storesHandlerService.getHospitalName(hospitalId);
			requestParameters.put("HOSP_NAME", hospitalName);
		}
		map = storesHandlerService.getConnectionForReport();
		pvmsNo = box.getString("pvmsNo");

		if (request.getParameter("pvmsNo") != null) {
			pvmsNo = request.getParameter("pvmsNo");
		}
		pvmsNo = box.getString("pvmsNo");

		datamap = storesHandlerService.getMasItemId(box);
		itemId = (Integer) datamap.get("itemId");
		map.put("item_id", itemId);
		datamap.put("hospitalId", hospitalId); // add hospitalId by javed khan

		Map<String, Object> drugStockItem = storesHandlerService.getdrugStock(datamap);
		map.put("drugStockItem", drugStockItem);
		title = "Drugs Stock Position In SMC Jsp Report";
		jsp = "drugsStockPositionInSMC";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	// javed khan
	public ModelAndView surplusMedicalStore(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		title = "Surplus Medical Store Register";
		jsp = "surplusMedicalStoreRegister";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}

	//javed khan

	public ModelAndView generateSurplusMedicalStoreRegister(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> datamap = new HashMap<String, Object>();
		String FROM_DATE1 = "";
		String TO_DATE1 = "";
		String brand = "";
		int itemId = 0;
		int hospitalId = 0;
		String hospitalName = "";
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			hospitalName = storesHandlerService.getHospitalName(hospitalId);
			requestParameters.put("HOSP_NAME", hospitalName);
			datamap.put("hospitalId",hospitalId); // add javed khan
		}
		map = storesHandlerService.getConnectionForReport();


		if (request.getParameter(FROM_DATE) != null) {
			FROM_DATE1 = request.getParameter(FROM_DATE);
			datamap.put("FROM_DATE1",FROM_DATE1);
		}
		if (request.getParameter(TO_DATE) != null) {
			TO_DATE1 = request.getParameter(TO_DATE);
			datamap.put("TO_DATE1",TO_DATE1);
		}

		//datamap = storesHandlerService.getMasItemId(box);
		//itemId = (Integer) datamap.get("itemId");
		//map.put("item_id", itemId);

		Map<String, Object> surplusMedicalStoreItem = storesHandlerService.getSurplusMedicalStoreItem(datamap);
		map.put("surplusMedicalStoreItem", surplusMedicalStoreItem);
		title = "Surplus Medical Store Register";
		jsp = "surplusMedicalStoreRegister";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	// javed khan

	public ModelAndView drugCostEntry(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		map = storesHandlerService.getAU();

		title = "Drug Cost Entry";
		jsp = "drugCostEntry";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}

	//javed khan
	public ModelAndView submitDrugCost(HttpServletRequest request,HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		StoreDrugCost storeDrugCost = new StoreDrugCost();

		new Date();

		Date lastChgDate = null;
		String date = "";
		String time = "";
		String lastChgBy = "A";
		String lastChgTime = "";
		String buttonFlag = "";
		String reason = "";
		String userName="";

		String remark="";
		int departmentId = 0;
		int deptId = 0;
		int hospitalId=0;
		int item_id=0;
		int brand_id=0;
		float cost=0.0f;
		int manufacture_Id=0;
		String packSize="";
		String mrpPerPack="";
		String BG="";

		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		try {


			if (request.getParameter(ITEM_ID) != null) {
				item_id =Integer.parseInt(request.getParameter(ITEM_ID));
			}
			/*if (request.getParameter(BRAND_ID) != null) {
				brand_id =Integer.parseInt(request.getParameter(BRAND_ID));
			}*/
			if (request.getParameter(MANUFACTURER_ID) != null) {
				manufacture_Id = Integer.parseInt(request.getParameter(MANUFACTURER_ID));
			}

			if (request.getParameter("cost") != null) {
				cost = Float.parseFloat(request.getParameter("cost"));
			}

			if (request.getParameter("brand") != null) {
				brand_id = Integer.parseInt(request.getParameter("brand"));
			}
			if (request.getParameter("pack") != null) {
				packSize = (String)request.getParameter("pack");
			}
			if (request.getParameter("BG") != null) {
				BG = (String)request.getParameter("BG");
			}
			/*if (request.getParameter("mrpPerPack") != null) {
				mrpPerPack = (String)request.getParameter("mrpPerPack");
			}*/



		} catch (Exception e) {
			e.printStackTrace();
		}

		try {
			String te = "";
			String te1 = "";

			SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");

		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");


			if(manufacture_Id==0){
			storeDrugCost.setManufacturer(null);
			}else{
				MasManufacturer masManufacturer= new MasManufacturer();
				masManufacturer.setId(manufacture_Id);
				storeDrugCost.setManufacturer(masManufacturer);
			}

			MasStoreItem masItem= new MasStoreItem();
			masItem.setId(item_id);
			storeDrugCost.setItem(masItem);

			// add javed khan
			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			storeDrugCost.setHospital(masHospital);

			storeDrugCost.setDrugCost(cost);
			storeDrugCost.setStatus("y");
			if(brand_id==0){
			storeDrugCost.setBrand(null);
			}else{
				MasStoreBrand masStoreBrand= new MasStoreBrand();
				masStoreBrand.setId(brand_id);
				storeDrugCost.setBrand(masStoreBrand);
			}

			storeDrugCost.setPackSize(packSize);
			/*storeDrugCost.setMrpPerPack(mrpPerPack);*/
			storeDrugCost.setBG(BG);
			storeDrugCost.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(date));
			storeDrugCost.setLastChgTime(time);
			storeDrugCost.setLastChgBy(userName);

		infoMap.put("storeDrugCost", storeDrugCost);

		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("item_id", item_id);
		dataMap.put("brand_id", brand_id);
		dataMap.put("hospitalId", hospitalId); // add javed khan

		boolean flag = false;
		try {
			flag = storesHandlerService.addDrugCost(infoMap, dataMap);

		} catch (Exception e) {
			e.printStackTrace();
		}
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}

		String messageTOBeVisibleToTheUser = "";

		if (flag) {

				jsp = STORES_MESSAGE_JSP;

				messageTOBeVisibleToTheUser = "Data Saved Successfully";

		} else {
			messageTOBeVisibleToTheUser = "Data  not saved";
		}

		jsp = "messageForDrugCost";
		jsp += ".jsp";

		url = "/hms/hms/stores?method=drugCostEntry";

		map.put("contentJsp", jsp);
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("indexB", "map", map);
	}

	//For searching  drug cost
	public ModelAndView searchDrugCost(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		String fromDate = "";
		String toDate = "";
		String entryNo = "";
		String item_name="";
		String pvms="";
		int Mid=0;
		int hospitalId=0; // add javed khan
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> tempMap = new HashMap<String, Object>();
		Map<String, Object> searchFieldMap = new HashMap<String, Object>();
		List<StoreDefectiveDrugM> searchDrugList = new ArrayList<StoreDefectiveDrugM>();
		try {
			 // add javed khan
			if (session.getAttribute("hospitalId") != null)
				hospitalId = Integer.parseInt(""
						+ session.getAttribute("hospitalId"));

			if (request.getParameter("nameItem2") != null) {
				item_name = request.getParameter("nameItem2");
				String item[]=item_name.split("\\[");
				//item_name.substring("[", "]");

			}
			if (request.getParameter(ITEM_CODE) != null) {
				pvms = request.getParameter(ITEM_CODE);

			}
			if (request.getParameter(ENTRY_NO) != null) {
				entryNo = request.getParameter(ENTRY_NO);

			}
			if (request.getParameter("manu") != null) {
				Mid = Integer.parseInt(""+request.getParameter("manu"));

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		searchFieldMap.put("item_name", item_name);
		searchFieldMap.put("pvms", pvms);
		searchFieldMap.put("toDate", toDate);
		searchFieldMap.put("entryNo", entryNo);
		searchFieldMap.put("Mid",Mid);
		searchFieldMap.put("hospitalId",hospitalId);
		try {
			//tempMap = storesHandlerService.showDefectiveDrugJsp(dataMap);
			if (tempMap.get("searchDrugList") != null)
				searchDrugList = (List) tempMap.get("searchDrugList");
			//map = storesHandlerService.searchDefectiveDrug(searchFieldMap);
			map = storesHandlerService.searchDrugCost(searchFieldMap);
			map.put("searchDrugList", searchDrugList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "searchDrugCost";
		jsp = jsp + ".jsp";
		title = "DEFECTIVE DRUGS";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}



	public ModelAndView showLPGrnForExlJsp(HttpServletRequest request,HttpServletResponse response) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		String fileName = null;
		String hin_no = "";
		String fileExtension = null;
		MultipartFormDataRequest mrequest = null;
		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		Users user = (Users) session.getAttribute("users");
		Box box = HMSUtil.getBox(request);

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);
		dataMap.put("users", user);
		Map<String, Object> newMap = commonMasterHandlerService.getUserButtonRights(dataMap);
		List<UserButtonRights> userRightsList = (List<UserButtonRights>) newMap.get("userRightsList");
		map = storesHandlerService.showGrnJsp(box, dataMap);
		File fil=null;
		Vector cellVectorHolder = new Vector();
		if (MultipartFormDataRequest.isMultipartFormData(request)) {
				try {
					mrequest = new MultipartFormDataRequest(request);
				} catch (UploadException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				java.util.Hashtable files = mrequest.getFiles();
				UploadFile file = (UploadFile) files.get(RequestConstants.UPLOAD_FILENAME);
				String filePath=mrequest.getParameter(RequestConstants.UPLOAD_FILENAME);
				InputStream is=file.getInpuStream();

				try {
					POIFSFileSystem myFileSystem = new POIFSFileSystem(is);
					HSSFWorkbook myWorkBook = new HSSFWorkbook(myFileSystem);

                    HSSFSheet mySheet = myWorkBook.getSheetAt(0);

                    Iterator rowIter = mySheet.rowIterator();

                    while (rowIter.hasNext()) {
                            HSSFRow myRow = (HSSFRow) rowIter.next();
                            Iterator cellIter = myRow.cellIterator();
                            Vector cellStoreVector = new Vector();
                            while (cellIter.hasNext()) {
                                    HSSFCell myCell = (HSSFCell) cellIter.next();
                                    cellStoreVector.addElement(myCell);
                            }
                            cellVectorHolder.addElement(cellStoreVector);
                    }
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				Object[][] obj=new Object[cellVectorHolder.size()][20];
                for (int i = 0; i < cellVectorHolder.size(); i++) {
                        Vector cellStoreVector = (Vector) cellVectorHolder.elementAt(i);
                        for (int j = 0; j < cellStoreVector.size(); j++) {
                                HSSFCell myCell = (HSSFCell) cellStoreVector.elementAt(j);
                                String stringCellValue = myCell.toString();
                               if(j==1 && i>=7){
                            	  String item_id=storesHandlerService.getPVMS(stringCellValue);
                            	   stringCellValue=stringCellValue+"_"+item_id;
                               }
                               if(j==5 && i>=7){
                            	   String item_brand_id=storesHandlerService.getBrand(stringCellValue);
                            	   stringCellValue=stringCellValue+"_"+item_brand_id;
                               }
                               if(j==6 && i>=7){
                            	   String item_manu_id=storesHandlerService.getManu(stringCellValue);
                            	   stringCellValue=stringCellValue+"_"+item_manu_id;
                               }
                                obj[i][j]=stringCellValue;
                        }
                }
                String supplierNo=obj[3][1].toString();
                String supplierId=storesHandlerService.getSupplierId(supplierNo);
                String abc[]=supplierId.split("-");
                supplierId=abc[0];
                String poId=abc[1];
                Map Pre=new HashMap();
                Map preQty=new HashMap();
                List lis=new ArrayList();
                lis=storesHandlerService.getPreId(supplierNo);
                Pre=(Map)lis.get(0);
                preQty=(Map)lis.get(1);
                map.put("obj", obj);
                map.put("supplierId",supplierId);
                map.put("Pre",Pre);
                map.put("poId",poId);
                map.put("preQty",preQty);
		}

		jsp = "crvLocalPurchaseForExcel";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("userRightsList", userRightsList);
		map.put("contentJsp", jsp);
		map.put("title", title);
		String previousPage = "no";
		map.put("previousPage", previousPage);

		return new ModelAndView("indexB", "map", map);
	}



	public ModelAndView showChallanExlJsp(HttpServletRequest request,HttpServletResponse response) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		String fileName = null;
		String hin_no = "";
		String fileExtension = null;
		MultipartFormDataRequest mrequest = null;
		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		Users user = (Users) session.getAttribute("users");
		Box box = HMSUtil.getBox(request);

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);
		dataMap.put("users", user);
		Map<String, Object> newMap = commonMasterHandlerService.getUserButtonRights(dataMap);
		List<UserButtonRights> userRightsList = (List<UserButtonRights>) newMap.get("userRightsList");
		map = storesHandlerService.showGrnJsp(box, dataMap);
		File fil=null;
		Vector cellVectorHolder = new Vector();
		if (MultipartFormDataRequest.isMultipartFormData(request)) {
				try {
					mrequest = new MultipartFormDataRequest(request);
				} catch (UploadException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				java.util.Hashtable files = mrequest.getFiles();
				UploadFile file = (UploadFile) files.get(RequestConstants.UPLOAD_FILENAME);
				String filePath=mrequest.getParameter(RequestConstants.UPLOAD_FILENAME);
				InputStream is=file.getInpuStream();

				try {
					POIFSFileSystem myFileSystem = new POIFSFileSystem(is);
					HSSFWorkbook myWorkBook = new HSSFWorkbook(myFileSystem);

                    HSSFSheet mySheet = myWorkBook.getSheetAt(0);
                    Iterator rowIter = mySheet.rowIterator();
                    int i=1;
                    while (rowIter.hasNext()) {
                            HSSFRow myRow = (HSSFRow) rowIter.next();
                            Iterator cellIter = myRow.cellIterator();
                            Vector cellStoreVector = new Vector();
                            while (cellIter.hasNext()) {
                                    HSSFCell myCell = (HSSFCell) cellIter.next();
                                    cellStoreVector.addElement(myCell);
                            }
                            cellVectorHolder.addElement(cellStoreVector);
                    }
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				Object[][] obj=new Object[cellVectorHolder.size()][24];
                for (int i = 0; i < cellVectorHolder.size(); i++) {
                        Vector cellStoreVector = (Vector) cellVectorHolder.elementAt(i);
                        for (int j = 0; j < cellStoreVector.size(); j++) {
                                HSSFCell myCell = (HSSFCell) cellStoreVector.elementAt(j);
                                String stringCellValue = myCell.toString();
                               if(j==1 && i>=7){
                            	  String item_id=storesHandlerService.getPVMS(stringCellValue);
                            	   stringCellValue=stringCellValue+"_"+item_id;
                               }
                               if(j==5 && i>=7){
                            	   String item_brand_id=storesHandlerService.getBrand(stringCellValue);
                            	   stringCellValue=stringCellValue+"_"+item_brand_id;
                               }
                               if(j==6 && i>=7){
                            	   String item_manu_id=storesHandlerService.getManu(stringCellValue);
                            	   stringCellValue=stringCellValue+"_"+item_manu_id;
                               }
                                obj[i][j]=stringCellValue;
                        }
                }
                String supplierNo=obj[3][1].toString();
                String supplierId=storesHandlerService.getSupplierId(supplierNo);
                String abc[]=supplierId.split("-");
                supplierId=abc[0];
                String poId=abc[1];
                String netAmuont="0.0";
                Map Pre=new HashMap();
                List lis=new ArrayList();
                Map preQty=new HashMap();
                lis=storesHandlerService.getPreId(supplierNo);
                netAmuont=storesHandlerService.getSupplierPenAmt(Integer.parseInt(supplierId),hospitalId);
                Pre=(Map)lis.get(0);
                preQty=(Map)lis.get(1);
                map.put("obj", obj);
                map.put("supplierId",supplierId);
                map.put("Pre",Pre);
                map.put("poId",poId);
                map.put("netAmuont",netAmuont);
                map.put("preQty",preQty);
		}

		jsp = "challanForExcel";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("userRightsList", userRightsList);
		map.put("contentJsp", jsp);
		map.put("title", title);
		String previousPage = "no";
		map.put("previousPage", previousPage);

		return new ModelAndView("indexB", "map", map);
	}







	public ModelAndView showLPImportGrnJsp(HttpServletRequest request,HttpServletResponse response) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		Users user = (Users) session.getAttribute("users");
		Box box = HMSUtil.getBox(request);


		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);
		dataMap.put("users", user);
		Map<String, Object> newMap = commonMasterHandlerService.getUserButtonRights(dataMap);
		List<UserButtonRights> userRightsList = (List<UserButtonRights>) newMap.get("userRightsList");
		map = storesHandlerService.showGrnJsp(box, dataMap);

		jsp = "crvLocalPurchaseImport";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("userRightsList", userRightsList);
		map.put("contentJsp", jsp);
		map.put("title", title);
		String previousPage = "no";
		map.put("previousPage", previousPage);

		return new ModelAndView("indexB", "map", map);

	}


	public void getExpiryDateForReturnDispensary(HttpServletRequest request,
			HttpServletResponse response) throws ParseException {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		int deptId = 0;
		int batchId = 0;
		int counter=0;
		String batchNo = "";

		Date expirydate = new Date();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (request.getParameter("counter") != null) {
			counter = Integer.parseInt(request.getParameter("counter"));
		}
		if (request.getParameter(BATCH_ID) != null) {
			batchId = Integer.parseInt(request.getParameter(BATCH_ID));
		}
		
		dataMap.put("deptId", deptId);		
		dataMap.put("batchId", batchId);
		String date4MySQL1 = "NA";
		String date4MySQL2="NA";
		String brand="NA";
		String stock="";
		try {
			map = storesHandlerService.getExpiryDateForReturnDispensary(dataMap);
			SimpleDateFormat formatterIn = new SimpleDateFormat("yyyy-MM-dd");
			SimpleDateFormat formatterOut = new SimpleDateFormat("dd/MM/yyyy");
			
			if(map.get("expiryDate") !=null){
			date4MySQL1 = formatterOut.format(formatterIn.parse(""+ map.get("expiryDate")));
			}
			if(map.get("brandName") !=null){
				brand = ""+ map.get("brandName");
				}
			if(map.get("stock") !=null){
				stock = ""+ map.get("stock");
				}
			if(map.get("manufacturingDate") !=null && !map.get("manufacturingDate").equals("")){
				date4MySQL2 = formatterOut.format(formatterIn.parse(""+ map.get("manufacturingDate")));
				}
			
			/*System.out.println("expiryDateCCCC--"+date4MySQL1);
			System.out.println("manufacturingDateCCCC--"+date4MySQL2);
			System.out.println("manufacturingDateCCCC--"+map.get("manufacturingDate"));
			System.out.println("brandId--"+map.get("brandId"));*/
			

		} catch (Exception e) {
			e.printStackTrace();
		}
		StringBuffer sb = new StringBuffer();
		try {
			sb.append("<item>");
			sb.append("<expiryDate>" + date4MySQL1 + "</expiryDate>");
			sb.append("<manuDate>" + date4MySQL2 + "</manuDate>");
			if(map.get("brandId") !=null){
				sb.append("<brand>" + brand + "</brand>");
			}else{
				sb.append("<brand>"+"</brand>");
			}
			if(map.get("stock") !=null){
				sb.append("<stock>" + stock + "</stock>");
			}else{
				sb.append("<stock>"+"</stock>");
			}
			sb.append("</item>");
			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public ModelAndView createAndSaveMmfDepartmentData(
			HttpServletRequest request, HttpServletResponse response) {
		String pvms="";
		int item_id=0;
		int pre_mmf=0;
		int mmf=0;
		int cur_mmf=0;
		String remark="";
		String msg="";
		if (request.getParameter(ITEM_CODE) != null
				&& !request.getParameter(ITEM_CODE).equals("0")) {
			pvms = request.getParameter(ITEM_CODE);
		}
		if (request.getParameter(ITEM_ID) != null
				&& !(request.getParameter(ITEM_ID).equals("0"))) {
			item_id = Integer.parseInt(request.getParameter(ITEM_ID));
		}
		if (request.getParameter("preQtymmf") != null
				&& !(request.getParameter("preQtymmf").equals("0"))) {
			pre_mmf = Integer.parseInt(request.getParameter("preQtymmf"));
		}

		if (request.getParameter("qtymmf") != null
				&& !(request.getParameter("qtymmf").equals("0"))) {
			mmf = Integer.parseInt(request.getParameter("qtymmf"));
		}
		if (request.getParameter("currQtymmf") != null
				&& !(request.getParameter("currQtymmf").equals("0"))) {
			 cur_mmf = Integer.parseInt(request.getParameter("currQtymmf"));
		}
		if (request.getParameter("remark") != null) {
			remark = request.getParameter("remark");
		}
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		box.put("storeType", box.get("storeType"));
		box.put("docId", box.get("docId"));
		Map<String, Object> map = new HashMap<String, Object>();
		//map = storesHandlerService.createAndImportMmfDepartmentData(box);
		map = storesHandlerService.createAndSaveMmfDepartmentData(box);

		if((Boolean)map.get("update")){
			msg="MMF successfully insert";
		}
		else{
			msg="MMF not insert";
		}

		jsp = "messageForStock";
		/*jsp = "mmfDepartmentAddition";*/
		/*jsp="storeMmfDepartment";*/
		//jsp = jsp + ".jsp";
		title = "MMF Entry";
		url = "/hms/hms/stores?method=showMmfDepartmentJsp";
		map.put("message", msg);
		map.put("url", url);
		map.put("flag", "return");
		map.put("contentJsp", jsp);
		map.put("title", title);
		//return new ModelAndView("indexB", "map", map);
		return new ModelAndView(jsp, "map", map);
	}

	// javed
	public ModelAndView pendingForIndent(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		int hospitalId = 0;
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
			requestParameters.put("deptId", deptId);

		}

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			requestParameters.put("hospitalId", hospitalId);

		}
		//Map<String, Object> vedItem = storesHandlerService.getVEDItem(requestParameters);
		//map.put("vedItem", vedItem);
		//map = storesHandlerService.showSearchIndentToDepo(deptId);

		map = storesHandlerService.showSearchIndentToDepo1(requestParameters);

		title = "Pending For Indent";
		jsp = "pendingForIndent";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView getPendingForIndentData(HttpServletRequest request,
			HttpServletResponse response) throws ParseException {
		HttpSession session = request.getSession();
		int deptId = 0;
		int hospitalId = 0;
		int batchId = 0;
		String lifeType = "";
		String manufacturer="";
		int section = 0;
		Date expirydate = new Date();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List objectList1 = new ArrayList();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");

		}
		if (request.getParameter(BATCH_ID) != null) {
			lifeType = ("" + (request.getParameter(BATCH_ID)));
		}
		// add javed khan
		if (request.getParameter("sectionId") != null) {
			section  = Integer.parseInt(("" + (request.getParameter("sectionId"))));
		}
		dataMap.put("deptId", deptId);
		dataMap.put("lifeType", lifeType);
		dataMap.put("section", section); // add javed khan
		dataMap.put("hospitalId", hospitalId); // add javed khan
		String date4MySQL1 = "";
		String date4MySQL2="";
		Object[] ob=null;
		try {
			map = storesHandlerService.getPendingForIndentData(dataMap);
			SimpleDateFormat formatterIn = new SimpleDateFormat("yyyy-MM-dd");
			SimpleDateFormat formatterOut = new SimpleDateFormat("dd/MM/yyyy");
			/*if(map.get("expiryDate") !=null){
			date4MySQL1 = formatterOut.format(formatterIn.parse(""+ map.get("expiryDate")));
			}
			if(map.get("manufacturingDate") !=null){
				date4MySQL2 = formatterOut.format(formatterIn.parse(""+ map.get("manufacturingDate")));
				}
			if(map.get("manufacturer") !=null){
				manufacturer =""+ map.get("manufacturer");
				}*/

			if(map.get("objectList1") !=null){
				 objectList1=(List)map.get("objectList1");
				// ob=(Object[])objectList1.get(0);
				}

		} catch (Exception e) {
			e.printStackTrace();
		}
		int mId = 1;
		if (map.get("mId") != null) {
			mId = Integer.parseInt(("" + map.get("mId")));
		}
		StringBuffer sb = new StringBuffer();
	//	try {
			/*sb.append("<item>");
			sb.append("<expiryDate>" + date4MySQL1 + "</expiryDate>");
			sb.append("<manufacturingDate>" + date4MySQL2 + "</manufacturingDate>");
			sb.append("<mId>" + mId + "</mId>");
			sb.append("<manufacturer>" + manufacturer + "</manufacturer>");*/

		//	for(int i=0; i<objectList1.size() ; i++){
			//	ob=(Object[])objectList1.get(i);
		//		sb.append("<item>");
		//		sb.append("<mmfForYear>" + ob[0] + "</mmfForYear>");
			//	sb.append("<nomen>" + ob [1]+ "</nomen>");
			//	sb.append("<pvms>" + ob[2] + "</pvms>");
			//	sb.append("<id>" + ob[6] + "</id>");
			//	sb.append("<mmfQty>" + ob[3] + "</mmfQty>");
			//	sb.append("<closQty>" + ob[4] + "</closQty>");
			//	sb.append("<AU>" + ob[5] + "</AU>");
			//	sb.append("<section>" + ob[7] + "</section>");
			//	sb.append("</item>");

			//}

			//response.setContentType("text/xml");
			//response.setHeader("Cache-Control", "no-cache");

		//} catch (Exception e) {
			//e.printStackTrace();
		//}
		/*	try {
		response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}*/
		title = "Res Turn Over Register";
		// javed 28 march

		//jsp = "responcePendingForIndent";
		jsp = "pendingForIndent";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		// javed 28 march
		title = "Title";
		map.put("lifeType", lifeType);
		map.put("section", section);


		//return new ModelAndView(jsp, "map", map);
		return new ModelAndView("indexB", "map", map);// javed 28 march
	}

	// javed
	public ModelAndView createIndent(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		int hospitalId=0;
		String lifeType="";
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
			requestParameters.put("deptId", deptId);
		}

		// add javed khan
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			requestParameters.put("hospitalId", hospitalId);

		}
		if (request.getParameter("flag") != null) {
			lifeType = request.getParameter("flag");
			requestParameters.put("lifeType", lifeType);
		}
		String sectionId="";
		if (request.getParameter("sectionId") != null) {
			sectionId = request.getParameter("sectionId");
			requestParameters.put("section", sectionId);
		}

		Box box = HMSUtil.getBox(request);
		Vector itemId = box.getVector("item_id");
		Vector req = box.getVector("require");
		List indentList=new ArrayList();
		for(int i=1;i<=itemId.size();i++){
			try{
				String s[] = new String[12];
				 if(request.getParameter("require"+i).equals("y")){
					 //for(int j=0;j<8;j++){
					 s[0]=request.getParameter("pvms"+i);
					 s[1]=request.getParameter("nomen"+i);
					 s[2]=request.getParameter("au"+i);
					 s[3]=request.getParameter("lifeType"+i);
					 s[4]=request.getParameter("mmf"+i);
					 s[5]=request.getParameter("stock"+i);
					 s[6]=request.getParameter("demand"+i);
					 s[7]=request.getParameter("itemId"+i);
					 s[8]=request.getParameter("sect"+i);



				 }
				 indentList.add(s);
				// }
			}catch(Exception e)
			{
				e.printStackTrace();

			}
		}
		map = storesHandlerService.getPendingForIndentData(requestParameters);
		//javed khan
		String Hos_name=storesHandlerService.getHospitalName(Integer.parseInt(""+ session.getAttribute("hospitalId")));
		String Hos_address= storesHandlerService.getHospitalAddress(Integer.parseInt(""+ session.getAttribute("hospitalId")));
		String hosNameAdd="SMO"+" "+Hos_name+" "+Hos_address;
		// javed khan
		title = "Pending For Indent";
		jsp = "createAutoIndent";
		jsp = jsp + ".jsp";
		map.put("indentList", indentList);
		map.put("hosNameAdd", hosNameAdd); // javed khan
		map.put("lifeType", lifeType);
		map.put("section", sectionId);  // add javed khan
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}

	public void fillItemsForMMF(HttpServletRequest request,
			HttpServletResponse response) {
		// ---- Retriving User Name,Hospital Id,Department Id from Session--

		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<StoreItemBatchStock> batchList = new ArrayList<StoreItemBatchStock>();

		Box box = HMSUtil.getBox(request);
		String itemNameField = "";
		String pvmsNo = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (request.getParameter("pvmsNo") != null) {
			pvmsNo = (request.getParameter("pvmsNo"));
		}
		dataMap.put("pvmsNo", pvmsNo);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.fillItemsForDefectiveDrugs(dataMap);

		if (map.get("itemList") != null) {
			itemList = (List) map.get("itemList");
		}
		if (map.get("brandList") != null) {
			brandList = (List) map.get("brandList");
		}
		if (map.get("batchList") != null) {
			batchList = (List) map.get("batchList");
		}
		//javed
		List<StoreItemBatchStock> batchListForTurnOver= new ArrayList<StoreItemBatchStock>();
		if (map.get("batchListForTurnOver") != null) {
			batchListForTurnOver = (List) map.get("batchListForTurnOver");
		}

		StringBuffer sb = new StringBuffer();
		try {
			for (MasStoreItem masStoreItem : itemList) {
				sb.append("<item>");
				sb.append("<nomen>" + masStoreItem.getNomenclature() + "</nomen>"); // add javed khan
				sb.append("<id>" + masStoreItem.getId() + "</id>");
				sb.append("<pvms>" + masStoreItem.getPvmsNo() + "</pvms>");
				sb.append("<au>"
						+ masStoreItem.getItemConversion().getPurchaseUnit()
								.getUnitName() + "</au>");

				sb.append("</item>");
			}

			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// javed
	public ModelAndView pendingForLoanout(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		int hospitalId = 0;
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
			requestParameters.put("deptId", deptId);

		}
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			requestParameters.put("hospitalId", hospitalId);

		}
		//Map<String, Object> vedItem = storesHandlerService.getVEDItem(requestParameters);
		//map.put("vedItem", vedItem);
		map = storesHandlerService.showLoanout(deptId ,hospitalId);

		title = "Pending For Loanout";
		jsp = "pendingForLoanout";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}




	//issue report

	public ModelAndView printPricriptionIssueDirectPrintClientSide(HttpServletRequest request,HttpServletResponse response)
	{
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		String query = "";
		int visitId = 0;
		String number = "";
		String serviceNo="";
	    String hinNo="";
	    int inpatientId = 0;
	    int hospitalId=0;
	    int deptId = 0;
	    String subQuery = "";
	    JasperPrint jp = new JasperPrint();
		try {
			if (request.getParameter("visitId") != null && (!request.getParameter("visitId").equals("")))
			{
				visitId=Integer.parseInt(request.getParameter("visitId")) ;			
				subQuery ="visit_id="+visitId;
			}
			if (request.getParameter("number") != null && (!request.getParameter("number").equals("")))
			{
				number=request.getParameter("number");			
				
			}
			if (request.getParameter("inpatientId") != null && (!request.getParameter("inpatientId").equals("")))
			{
				inpatientId=Integer.parseInt(request.getParameter("inpatientId"));			
				subQuery ="inpatient_id="+inpatientId;
			}
			map.put("visitId", visitId);
			map.put("visitId", visitId);
			map.put("number", number);
			if (request.getParameter("serviceNo") != null && (!request.getParameter("serviceNo").equals("")))
			{
				serviceNo=request.getParameter("serviceNo") ;			
				map.put("serviceNo", serviceNo);
			}
			if (request.getParameter("hinNo") != null && (!request.getParameter("hinNo").equals("")))
			{
				hinNo=request.getParameter("hinNo") ;				
				map.put("hinNo", hinNo);
			}
			if (request.getParameter("hospitalId") != null && (!request.getParameter("hospitalId").equals("")))
			{
				hospitalId=Integer.parseInt(request.getParameter("hospitalId"));
				map.put("hospitalId", hospitalId);
			}

			HttpSession session = request.getSession();
		if (session.getAttribute("deptId") != null)
				deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		} catch (Exception e) {
			e.printStackTrace();
		}
		/*detailsMap = storesHandlerService.getConnectionForReport();		*/
		String userHome = getServletContext().getRealPath("");	         
        String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
        map.put("path", imagePath);
        map.put("SUBREPORT_DIR", getServletContext().getRealPath("/reports/"));
		try {
			
				
				Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();	
				map.put("Report_Path", request.getContextPath()+"/photo/"+"PatientPrescriptionFormatIssue"+hinNo+""+".pdf");
		 HMSUtil.generateReportForDirectPrintPatient("PatientPrescriptionFormatIssue", map,
						(Connection) connectionMap.get("con"), response,
						getServletContext(),  getServletContext().getRealPath("/photo/"),hinNo);

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		
		
		return new ModelAndView("printPrescriptionReport", "map", map);
	}

	

	public ModelAndView printPricriptionIssue(HttpServletRequest request,HttpServletResponse response)
	{
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		Map<String, Object> parameters = new HashMap<String, Object>();
		String query = "";
		int hinId = 0;
		String number = "";
		String serviceNo="";
	    String hinNo="";
	    int inpatientId = 0;
	    int hospitalId=0;
	    int deptId = 0;
	    String subQuery = "";
	    JasperPrint jp = new JasperPrint();
		try {
			if (request.getParameter("hinId") != null && (!request.getParameter("hinId").equals("")))
			{
				hinId=Integer.parseInt(request.getParameter("hinId")) ;			
				
			}
			if (request.getParameter("number") != null && (!request.getParameter("number").equals("")))
			{
				number=request.getParameter("number");			
				
			}
			if (request.getParameter("inpatientId") != null && (!request.getParameter("inpatientId").equals("")))
			{
				inpatientId=Integer.parseInt(request.getParameter("inpatientId"));			
				subQuery ="inpatient_id="+inpatientId;
			}
			parameters.put("hinId", hinId);
			parameters.put("number", number);
			if (request.getParameter("serviceNo") != null && (!request.getParameter("serviceNo").equals("")))
			{
				serviceNo=request.getParameter("serviceNo") ;			
				parameters.put("serviceNo", serviceNo);
			}
			if (request.getParameter("hinNo") != null && (!request.getParameter("hinNo").equals("")))
			{
				hinNo=request.getParameter("hinNo") ;				
				parameters.put("hinNo", hinNo);
			}
			if (request.getParameter("hospitalId") != null && (!request.getParameter("hospitalId").equals("")))
			{
				hospitalId=Integer.parseInt(request.getParameter("hospitalId"));
				parameters.put("hospitalId", hospitalId);
			}

			HttpSession session = request.getSession();
		if (session.getAttribute("deptId") != null)
				deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		} catch (Exception e) {
			e.printStackTrace();
		}
		/*detailsMap = storesHandlerService.getConnectionForReport();		*/
		String userHome = getServletContext().getRealPath("");	         
        String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
        parameters.put("path", imagePath);
		parameters.put("SUBREPORT_DIR", getServletContext().getRealPath("/reports/"));
		try {
			
		int printCount = storesHandlerService.getPrintCount("PresPrintCount", number);
				if(printCount==0)
				{
					System.out.println("before block");
					Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();	
					parameters.put("Report_Path", request.getContextPath()+"/photo/"+"PatientPrescriptionFormatIssue"+hinNo+""+".pdf");
			 HMSUtil.generateReport("PatientPrescriptionFormatIssue", parameters,
							(Connection) connectionMap.get("con"), response,
							getServletContext());
				}
		
		 else
		 {
				
				Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();	
				parameters.put("Report_Path", request.getContextPath()+"/photo/"+"PatientPrescriptionFormatIssue"+hinNo+""+".pdf");
		 HMSUtil.generateReport("PatientPrescriptionFormatIssueDublicate", parameters,
						(Connection) connectionMap.get("con"), response,
						getServletContext());
		 }
				storesHandlerService.updatePrintCount("PresPrintCount", number);

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		
		
		return null;
	}
	
	public ModelAndView printPricriptionIssueDublicate(HttpServletRequest request,HttpServletResponse response)
	{
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		Map<String, Object> parameters = new HashMap<String, Object>();
		String query = "";
		int visitId = 0;
		String number = "";
		String serviceNo="";
	    String hinNo="";
	    int inpatientId = 0;
	    int hospitalId=0;
	    int deptId = 0;
	    String subQuery = "";
	    JasperPrint jp = new JasperPrint();
		try {
			if (request.getParameter("visitId") != null && (!request.getParameter("visitId").equals("")))
			{
				visitId=Integer.parseInt(request.getParameter("visitId")) ;			
				subQuery ="visit_id="+visitId;
			}
			if (request.getParameter("number") != null && (!request.getParameter("number").equals("")))
			{
				number=request.getParameter("number");			
				
			}
			if (request.getParameter("inpatientId") != null && (!request.getParameter("inpatientId").equals("")))
			{
				inpatientId=Integer.parseInt(request.getParameter("inpatientId"));			
				subQuery ="inpatient_id="+inpatientId;
			}
			parameters.put("visitId", visitId);
			parameters.put("visitId", visitId);
			parameters.put("number", number);
			if (request.getParameter("serviceNo") != null && (!request.getParameter("serviceNo").equals("")))
			{
				serviceNo=request.getParameter("serviceNo") ;			
				parameters.put("serviceNo", serviceNo);
			}
			if (request.getParameter("hinNo") != null && (!request.getParameter("hinNo").equals("")))
			{
				hinNo=request.getParameter("hinNo") ;				
				parameters.put("hinNo", hinNo);
			}
			if (request.getParameter("hospitalId") != null && (!request.getParameter("hospitalId").equals("")))
			{
				hospitalId=Integer.parseInt(request.getParameter("hospitalId"));
				parameters.put("hospitalId", hospitalId);
			}

			HttpSession session = request.getSession();
		if (session.getAttribute("deptId") != null)
				deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		} catch (Exception e) {
			e.printStackTrace();
		}
		/*detailsMap = storesHandlerService.getConnectionForReport();		*/
		String userHome = getServletContext().getRealPath("");	         
        String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
        parameters.put("path", imagePath);
		parameters.put("SUBREPORT_DIR", getServletContext().getRealPath("/reports/"));
		try {
			
				
				Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();	
				parameters.put("Report_Path", request.getContextPath()+"/photo/"+"PatientPrescriptionFormatIssue"+hinNo+""+".pdf");
		 HMSUtil.generateReport("PatientPrescriptionFormatIssueDublicate", parameters,
						(Connection) connectionMap.get("con"), response,
						getServletContext());

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		
		
		return null;
	}
	public ModelAndView printNIS(HttpServletRequest request,HttpServletResponse response)
	{
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		Map<String, Object> parameters = new HashMap<String, Object>();
		String query = "";
		String number = "";
	    int hospitalId=0;
	    int deptId = 0;
		try {
			
			if (request.getParameter("number") != null && (!request.getParameter("number").equals("")))
			{
				number=request.getParameter("number");			
				
			}
		
			parameters.put("number", number);
			
			if (request.getParameter("hospitalId") != null && (!request.getParameter("hospitalId").equals("")))
			{
				hospitalId=Integer.parseInt(request.getParameter("hospitalId"));
				parameters.put("hospitalId", hospitalId);
			}

			HttpSession session = request.getSession();
		if (session.getAttribute("deptId") != null)
				deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		} catch (Exception e) {
			e.printStackTrace();
		}
		detailsMap = storesHandlerService.getConnectionForReport();		
		String userHome = getServletContext().getRealPath("");	         
        String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
        parameters.put("path", imagePath);
		parameters.put("SUBREPORT_DIR", getServletContext().getRealPath("/reports/"));
		try {	
			Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();	
		HMSUtil.generateReport("nis_slip_reportt", parameters,
				(Connection) connectionMap.get("con"), response,
				getServletContext());
		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		
		
		return null;
	}
	public ModelAndView printNIP(HttpServletRequest request,HttpServletResponse response)
	{
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		Map<String, Object> parameters = new HashMap<String, Object>();
		String query = "";
		String number = "";
	    int hospitalId=0;
	    int deptId = 0;
		try {
			
			if (request.getParameter("number") != null && (!request.getParameter("number").equals("")))
			{
				number=request.getParameter("number");			
				
			}
			String userHome = getServletContext().getRealPath("");	         
            String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
            parameters.put("path", imagePath);
			parameters.put("number", number);
			
			if (request.getParameter("hospitalId") != null && (!request.getParameter("hospitalId").equals("")))
			{
				hospitalId=Integer.parseInt(request.getParameter("hospitalId"));
				parameters.put("hospitalId", hospitalId);
			}

			HttpSession session = request.getSession();
		if (session.getAttribute("deptId") != null)
				deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		} catch (Exception e) {
			e.printStackTrace();
		}
		detailsMap = storesHandlerService.getConnectionForReport();		
		
		parameters.put("SUBREPORT_DIR", getServletContext().getRealPath("/reports/"));
		try {
			
			Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();	
			HMSUtil.generateReport("nip_slip_report", parameters,
					(Connection) connectionMap.get("con"), response,
					getServletContext());
			
			

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		
		
		return null;
	}
	
	public ModelAndView printPharmacyReportDirectClientSide(HttpServletRequest request,HttpServletResponse response)
	{
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		Map<String, Object> parameters = new HashMap<String, Object>();
		String query = "";
		int visitNo = 0;
		int inpatientId = 0;
		String serviceNo="";
	    String hinNo="";
	    String number="";
	    int hospitalId=0;
	    int deptId = 0;
	    String jsp = "";
		try {
			if (request.getParameter("visitId") != null && (!request.getParameter("visitId").equals("")))
			{
				visitNo=Integer.parseInt(request.getParameter("visitId")) ;	
			}
			if (request.getParameter("number") != null && (!request.getParameter("number").equals("")))
			{
				number=request.getParameter("number");			
				
			}
			
			parameters.put("visitId", visitNo);
			parameters.put("number", number);
			String userHome = getServletContext().getRealPath("");	         
            String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
            parameters.put("path", imagePath);
		
		if(request.getParameter("flag") != null && request.getParameter("flag").equals("nip_slip_report"))
		{
			Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();	
			parameters.put("Report_Path", request.getContextPath()+"/photo/"+"nip_slip_report"+hinNo+""+".pdf");
			HMSUtil.generateReportForDirectPrintPatient("nip_slip_report", parameters,
					(Connection) connectionMap.get("con"), response,
					getServletContext(),  getServletContext().getRealPath("/photo/"),hinNo);
			jsp = "printNIPReport";
		}
		else
		{
			Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();	
			parameters.put("Report_Path", request.getContextPath()+"/photo/"+"nis_slip_reportt"+hinNo+""+".pdf");
			HMSUtil.generateReportForDirectPrintPatient("nis_slip_reportt", parameters,
					(Connection) connectionMap.get("con"), response,
					getServletContext(),  getServletContext().getRealPath("/photo/"),hinNo);
			jsp = "printNISReport";
		}
				
		}
	
		 catch (Exception e) {
			 e.printStackTrace();
			 }		
		return new ModelAndView(jsp, "map", parameters);
	}
	
	public ModelAndView printPharmacyReport(HttpServletRequest request,HttpServletResponse response)
	{
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		Map<String, Object> parameters = new HashMap<String, Object>();
		String query = "";
		int hinId = 0;
		int inpatientId = 0;
		String serviceNo="";
	    String hinNo="";
	    String number="";
	    int hospitalId=0;
	    int deptId = 0;
	    String jsp = "";
		try {
			if (request.getParameter("hinId") != null && (!request.getParameter("hinId").equals("")))
			{
				hinId=Integer.parseInt(request.getParameter("hinId")) ;	
			}
			if (request.getParameter("number") != null && (!request.getParameter("number").equals("")))
			{
				number=request.getParameter("number");			
				
			}
			
			parameters.put("hinId", hinId);
			parameters.put("number", number);
			String userHome = getServletContext().getRealPath("");	         
            String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
            parameters.put("path", imagePath);
		
		if(request.getParameter("flag") != null && request.getParameter("flag").equals("nip_slip_report"))
		{
			int printCount = storesHandlerService.getPrintCount("NipPrintCount", number);
			if(printCount==0)
			{
			Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();	
			parameters.put("Report_Path", request.getContextPath()+"/photo/"+"nip_slip_report"+hinNo+""+".pdf");
			HMSUtil.generateReport("nip_slip_report", parameters,
					(Connection) connectionMap.get("con"), response,
					getServletContext());
		
			}
			else
			{
				Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();	
				parameters.put("Report_Path", request.getContextPath()+"/photo/"+"nip_slip_report"+hinNo+""+".pdf");
				HMSUtil.generateReport("nip_slip_report_dublicate", parameters,
						(Connection) connectionMap.get("con"), response,
						getServletContext());
				
			}
			storesHandlerService.updatePrintCount("NipPrintCount", number);
		}
		else
		{
			int printCount = storesHandlerService.getPrintCount("NisPrintCount", number);
			if(printCount==0)
			{
			Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();	
			parameters.put("Report_Path", request.getContextPath()+"/photo/"+"nis_slip_reportt"+hinNo+""+".pdf");
			HMSUtil.generateReport("nis_slip_reportt", parameters,
					(Connection) connectionMap.get("con"), response,
					getServletContext());
		
			}
			else
			{
				Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();	
				parameters.put("Report_Path", request.getContextPath()+"/photo/"+"nis_slip_reportt"+hinNo+""+".pdf");
				HMSUtil.generateReport("nis_slip_reportt_dublicate", parameters,
						(Connection) connectionMap.get("con"), response,
						getServletContext());
			}
			storesHandlerService.updatePrintCount("NisPrintCount", number);
		}
				
		}
	
		 catch (Exception e) {
			 e.printStackTrace();
			 }		
		return null;
	}
	
	public ModelAndView printPharmacyReportDublicate(HttpServletRequest request,HttpServletResponse response)
	{
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		Map<String, Object> parameters = new HashMap<String, Object>();
		String query = "";
		int visitNo = 0;
		int inpatientId = 0;
		String serviceNo="";
	    String hinNo="";
	    String number="";
	    int hospitalId=0;
	    int deptId = 0;
	    String jsp = "";
		try {
			if (request.getParameter("visitId") != null && (!request.getParameter("visitId").equals("")))
			{
				visitNo=Integer.parseInt(request.getParameter("visitId")) ;	
			}
			if (request.getParameter("number") != null && (!request.getParameter("number").equals("")))
			{
				number=request.getParameter("number");			
				
			}
			
			parameters.put("visitId", visitNo);
			parameters.put("number", number);
			String userHome = getServletContext().getRealPath("");	         
            String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
            parameters.put("path", imagePath);
		
		if(request.getParameter("flag") != null && request.getParameter("flag").equals("nip_slip_report"))
		{
			Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();	
			parameters.put("Report_Path", request.getContextPath()+"/photo/"+"nip_slip_report"+hinNo+""+".pdf");
			HMSUtil.generateReport("nip_slip_report_dublicate", parameters,
					(Connection) connectionMap.get("con"), response,
					getServletContext());
			jsp = "printNIPReport";
		}
		else
		{
			Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();	
			parameters.put("Report_Path", request.getContextPath()+"/photo/"+"nis_slip_reportt"+hinNo+""+".pdf");
			HMSUtil.generateReport("nis_slip_reportt_dublicate", parameters,
					(Connection) connectionMap.get("con"), response,
					getServletContext());
			jsp = "printNISReport";
		}
				
		}
	
		 catch (Exception e) {
			 e.printStackTrace();
			 }		
		return null;
	}

	// javed khan
	public ModelAndView showPrescriptionDetailsReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
	int precriptionId=0;
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
			requestParameters.put("deptId", deptId);

		}
		if (request.getParameter("precriptionId") != null) {
			precriptionId= Integer.parseInt(request.getParameter("precriptionId"));

		}

		map = storesHandlerService.showPrescriptionDetails(precriptionId);

		title = "Prescription Details";
		jsp = "responcePrescriptionDetail";
		//jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		//return new ModelAndView("indexB", "map", map);
		return new ModelAndView(jsp, "map", map);
	}
	public ModelAndView showOPDPatientLoanOutIssueGrid(HttpServletRequest request,HttpServletResponse response) {
		/*
		 * Department id for dispensary store is hardcoded which in future will
		 * come from login
		 */
		Map<String, Object> map = new HashMap<String, Object>();
		session = request.getSession();
		int deptId = (Integer) session.getAttribute("deptId");
		String buttonFlag = "";
		String issueNo = "";
		int hinId = 0;
		String hinNo = "";
		String prescription = "";
		int consultantId = 0;
		String date="";
		String time="";
		String serviceNo="";
		int pageNo = Integer.parseInt(request.getParameter("pageNo"));
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");
		if (request.getParameter(RequestConstants.HIN_ID) != null && !request.getParameter(RequestConstants.HIN_ID).equals("")) {
			hinId = Integer.parseInt(request.getParameter(RequestConstants.HIN_ID));
		}
		int prescriptionId = 0;
		if(request.getParameter("prescriptionId") != null){
			prescriptionId = Integer.parseInt(request.getParameter("prescriptionId"));
			map.put("prescriptionId", prescriptionId);
		}
		if(request.getParameter("serviceNo")!=null){
			serviceNo =request.getParameter("serviceNo");
			map.put("serviceNo",serviceNo);
		}

		buttonFlag = request.getParameter("buttonFlag");
		if (!request.getParameter("buttonFlag").equals("")
				&& buttonFlag != null) {
			if (buttonFlag.equals("next")) {
				buttonFlag = request.getParameter("buttonFlag");
				issueNo = request.getParameter("issueNo");
				hinNo = request.getParameter(RequestConstants.HIN_NO);
				prescription = request.getParameter("prescription");
				consultantId = Integer.parseInt(request.getParameter("consultantId"));
				map.put("buttonFlag", buttonFlag);
				map.put("issueNo", issueNo);
				map.put("hinNo", hinNo);
				map.put("prescription", prescription);
				map.put("consultantId", consultantId);
			}
		}
		map.put("pageNo", pageNo);
		map.put("deptId", deptId);
		map.put("hinId", hinId);
		map = storesHandlerService.showOPDPatientLoanOutIssueGrid(map);
		jsp = OPD_PATIENT_ISSUE_GRID;
		title = "Patient Issue";
		map.put("date", date);
		map.put("time", time);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView generateProformaBReport(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Map<String, Object> result=new HashMap<String, Object>();
		String pro ="";

		if (request.getParameter("proformaNo") != null
				&& !(request.getParameter("proformaNo").equals(""))) {
			pro = request.getParameter("proformaNo");
		}

		//requestParameters = storesHandlerService.getProformaPrintMap(grnId);
		//requestParameters.put("grnId", grnId);

		int hospitalId = 0;
		int deptId = 0;
		HttpSession session = request.getSession();
		if (session.getAttribute("hospitalId") != null)
					hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));

		// result=storesHandlerService.getResultValue(pro);
		 result=storesHandlerService.getResultValue(pro,hospitalId);

		 BigDecimal AmtBudget1= new BigDecimal ((result.get("BudgetAmt")!=null && !result.get("BudgetAmt").equals(""))?result.get("BudgetAmt").toString():"0");
		 BigDecimal BalanceAmt1= new BigDecimal ((result.get("BalanceAmt")!=null && !result.get("BalanceAmt").equals(""))?result.get("BalanceAmt").toString():"0");
		 BigDecimal SpentAmt1= new BigDecimal ((result.get("SpentAmt")!=null && !result.get("SpentAmt").equals(""))?result.get("SpentAmt").toString():"0");
		 int TotalResAmt=0;
		 try
		 {
			 double temDouble=Double.parseDouble(result.get("TotalResAmt").toString());
			 TotalResAmt=(int)temDouble;
		 }catch(Exception e){

		 }

		 double nivItem=new Double(result.get("nivItem").toString());
		 double pvmsItem=new Double(result.get("pvmsItem").toString());
		 double BrandItem=new Double(result.get("BrandItem").toString());
		 double genericItem=new Double(result.get("genericItem").toString());
		 double amtValueBrand=new Double(result.get("amtValueBrand").toString());
		 double disValueBrand=new Double(result.get("disValueBrand").toString());
		 double amtValueGen=new Double(result.get("amtValueGen").toString());
		 double disValueGen=new Double(result.get("disValueGen").toString());
		 //--------------code commented by anamika------------------
		 double oncologyItem=new Double(result.get("oncologyItem").toString());
		 double amtValueOncology =0.0;
		 if(!result.get("amtValueOncology").equals("")){
		  amtValueOncology=new Double(result.get("amtValueOncology").toString());
		 }
		 double disValueoncology =0.0;
		 if(!result.get("disValueoncology").equals("")){
		  disValueoncology=new Double(result.get("disValueoncology").toString());
		 }
		 double surgicalItem = 0.0;
		 if(!result.get("surgicalItem").equals("")){
		  surgicalItem=new Double(result.get("surgicalItem").toString());
		 }
		 double amtValueSurgical= 0.0;
		 if(!result.get("amtValueSurgical").equals("")){
		  amtValueSurgical=new Double(result.get("amtValueSurgical").toString());
		 }
		 double disValueSurgical= 0.0;
		 if(!result.get("disValueSurgical").equals("")){
		  disValueSurgical=new Double(result.get("disValueSurgical").toString());
		 }
		 double labItem = 0.0;
		 if(!result.get("disValueSurgical").equals("")){
		  labItem=new Double(result.get("labItem").toString());
		 }
		 double amtValueLab = 0.0;
		 if(!result.get("amtValueLab").equals("")){
		  amtValueLab=new Double(result.get("amtValueLab").toString());
		 }
		 double disValueLab = 0.0;
		 if(!result.get("disValueLab").equals("")){
		  disValueLab=new Double(result.get("disValueLab").toString());
		 }
		 double xrayItem = 0.0;
		 if(!result.get("xrayItem").equals("")){
		  xrayItem=new Double(result.get("xrayItem").toString());
		 }
		 double amtValueXray = 0.0;
		 if(!result.get("amtValueXray").equals("")){
		  amtValueXray=new Double(result.get("amtValueXray").toString());
		 }
		 double disValueXray = 0.0;
		 if(!result.get("disValueXray").equals("")){
		  disValueXray=new Double(result.get("disValueXray").toString());
		 }
		 double textileItem = 0.0;
		 if(!result.get("textileItem").equals("")){
		  textileItem=new Double(result.get("textileItem").toString());
		 }
		 double amtValueTextile = 0.0;
		 if(!result.get("amtValueTextile").equals("")){
		  amtValueTextile=new Double(result.get("amtValueTextile").toString());
		 }
		 double disValueTextile = 0.0;
		 if(!result.get("disValueTextile").equals("")){
		  disValueTextile=new Double(result.get("disValueTextile").toString());
		 }
		 double rubberItem = 0.0;
		 if(!result.get("rubberItem").equals("")){
		  rubberItem=new Double(result.get("rubberItem").toString());
		 }
		 double amtValueRubber = 0.0;
		 if(!result.get("amtValueRubber").equals(""))
		  amtValueRubber=new Double(result.get("amtValueRubber").toString());
		 double disValueRubber=0.0;
		 if(!result.get("disValueRubber").equals(""))
		  disValueRubber=new Double(result.get("disValueRubber").toString());
		 double fluidsItem=0.0;
		 if(!result.get("fluidsItem").equals(""))
		  fluidsItem=new Double(result.get("fluidsItem").toString());
		 double amtValuefluidsItem=0.0;
		 if(!result.get("amtValuefluidsItem").equals(""))
		  amtValuefluidsItem=new Double(result.get("amtValuefluidsItem").toString());
		 
		 double disValuefluidsItem=0.0;
		 if(!result.get("disValuefluidsItem").equals(""))
		  disValuefluidsItem=new Double(result.get("disValuefluidsItem").toString());
		 
		 double generalMaterialItem=0.0;
		 if(!result.get("generalMaterialItem").equals(""))
		   generalMaterialItem=new Double(result.get("generalMaterialItem").toString());
		 double amtValueGeneralMaterialItem=0.0;
		 if(!result.get("amtValueGeneralMaterialItem").equals(""))
		  amtValueGeneralMaterialItem=new Double(result.get("amtValueGeneralMaterialItem").toString());
		 double disValueGeneralMaterialItem=0.0;
		 if(!result.get("disValueGeneralMaterialItem").equals(""))
		  disValueGeneralMaterialItem=new Double(result.get("disValueGeneralMaterialItem").toString());
		 


		requestParameters=storesHandlerService.getConnectionForReport();
		byte[] bytes = null;
		/*try {

			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport("PROFORMA_B_LP"), requestParameters,
					(Connection) requestParameters.get("conn"));
		} catch (JRException e) {
			e.printStackTrace();
		}
		response.setContentType("application/pdf");
		response.setContentLength(bytes.length);
		ServletOutputStream ouputStream;
		try {
			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

		return new ModelAndView("indexB", "map", map);*/
		HMSUtil hcd=new HMSUtil();
		String amotInWord=hcd.convert(TotalResAmt);

		String reportName = "PROFORMA_B_LP";
		requestParameters.put("proNo",pro);
		requestParameters.put("nivItem",nivItem);
		requestParameters.put("pvmsItem",pvmsItem);
		requestParameters.put("BrandItem",BrandItem);
		requestParameters.put("genericItem",genericItem);
		requestParameters.put("amtValueBrand",amtValueBrand);
		requestParameters.put("disValueBrand",disValueBrand);
		requestParameters.put("amtValueGen",amtValueGen);
		requestParameters.put("disValueGen",disValueGen);
		requestParameters.put("AmtBudget1",AmtBudget1);
		requestParameters.put("BalanceAmt1",BalanceAmt1);
		requestParameters.put("SpentAmt1",SpentAmt1);
		requestParameters.put("amotInWord",amotInWord);
		requestParameters.put("hospitalId",hospitalId);
		
		requestParameters.put("oncologyItem",oncologyItem);
		requestParameters.put("amtValueOncology",amtValueOncology);
		requestParameters.put("disValueoncology",disValueoncology);
		
		requestParameters.put("surgicalItem",surgicalItem);
		requestParameters.put("amtValueSurgical",amtValueSurgical);
		requestParameters.put("disValueSurgical",disValueSurgical);
		
		requestParameters.put("labItem",labItem);
		requestParameters.put("amtValueLab",amtValueLab);
		requestParameters.put("disValueLab",disValueLab);
		
		requestParameters.put("xrayItem",xrayItem);
		requestParameters.put("amtValueXray",amtValueXray);
		requestParameters.put("disValueXray",disValueXray);
		
		requestParameters.put("textileItem",textileItem);
		requestParameters.put("amtValueTextile",amtValueTextile);
		requestParameters.put("disValueTextile",disValueTextile);
		
		requestParameters.put("rubberItem",rubberItem);
		requestParameters.put("amtValueRubber",amtValueRubber);
		requestParameters.put("disValueRubber",disValueRubber);
		
		requestParameters.put("fluidsItem",fluidsItem);
		requestParameters.put("amtValuefluidsItem",amtValuefluidsItem);
		requestParameters.put("disValuefluidsItem",disValuefluidsItem);
		
		requestParameters.put("generalMaterialItem",generalMaterialItem);
		requestParameters.put("amtValueGeneralMaterialItem",amtValueGeneralMaterialItem);
		requestParameters.put("disValueGeneralMaterialItem",disValueGeneralMaterialItem);


		//javed khan
		  requestParameters.put("SUBREPORT_DIR", getServletContext().getRealPath("/reports/"));


		HMSUtil.generateReport(reportName, requestParameters,
				(Connection) requestParameters.get("con"), response,
				getServletContext());

		return null;
	}

	// javed khan turn over
	public ModelAndView getItemListForTurnOverByAutocomplete(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		String autoHint = "";
		String itemNameField = "";
		int hospitalId = 0;
		int deptId = 0;
		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		if (request.getParameter("requiredField") != null) {
			itemNameField = (request.getParameter("requiredField"));
		}
		if (request.getParameter(itemNameField) != null) {
			autoHint = (request.getParameter(itemNameField));
		}

		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		dataMap.put("autoHint", autoHint);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		// dataMap.put("box", box);
		map = storesHandlerService
				.getItemListForTurnOverByAutocomplete(dataMap);
		jsp = "result";
		return new ModelAndView(jsp, "map", map);
	}

	// javed khan for otherDepartmentIndent to dispensary


	public ModelAndView showSearchDepartmentIndentToDispesary(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		int hospitalId = 0;
		HttpSession session = request.getSession();
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		// add hospitalId by javed khan

		//map = storesHandlerService.showSearchDepartmentIndent(deptId);
		map = storesHandlerService.showSearchDepartmentIndent(deptId, hospitalId);
		String jsp = "searchDepartmentIndentToDispensary.jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB","map",map);
	}

	// javed khan for otherDepartmentIndent to dispensary

	public ModelAndView showDepartmentIndentToDisensaryJsp(HttpServletRequest request,HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		int hospitalId=0;
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}
		if (session.getAttribute("hospitalId") != null)
		{
			hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));
		}
		map = storesHandlerService.showDepartmentIndent(deptId,hospitalId);
		jsp = "otherDepartmentIndent";
		jsp = jsp + ".jsp";
		title = "Indent To Department";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}
 // javed
	public ModelAndView getUnit(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
	String type="";
	String date="";
	String issue="";
	int hospitalId=0;
		Map<String, Object> requestParameters = new HashMap<String, Object>();

		// add by javed khan
		HttpSession session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			requestParameters.put("hospitalId", hospitalId);

		}

		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
			requestParameters.put("deptId", deptId);

		}
		if (request.getParameter("type") != null) {
			type = (String)request.getParameter("type");
			requestParameters.put("type",type);

		}
		if (request.getParameter("issue") != null) {
			issue = (String)request.getParameter("issue");
			requestParameters.put("issue",issue);

		}
		if (request.getParameter("date") != null) {
			date = (String)request.getParameter("date");
			requestParameters.put("date",date);

		}
		map = storesHandlerService.getUnit(requestParameters);
		title = "UNIT";
		jsp = "responceForUnit";
		jsp = jsp + ".jsp";
		map.put("issue",issue);
		map.put("date",date);
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
		//return new ModelAndView(jsp, "map", map);
	}


	// javed for search CIV
	public ModelAndView getDepartmentIssueData(HttpServletRequest request,
			HttpServletResponse response)
	{
		HttpSession session = request.getSession();
		int hospitalId=0;
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		Map datamap = new HashMap();
		if (session.getAttribute("hospitalId") != null)
		{
			hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));
			box.put("hospitalId", hospitalId);
		}

		//if (request.getParameter("pvmsNo") != null) {
			//String pvmsNo = request.getParameter("pvmsNo");
			//box.put("pvmsNo", pvmsNo);
		//}
		int deptId = 0;
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
			box.put("deptId", deptId);
		}
		int issueNo=0;
		if(request.getParameter(DEMAND_NO)!=null){

			issueNo=Integer.parseInt((""+request.getParameter(DEMAND_NO)));
		}
		String todate="";
if(request.getParameter("toDate")!=null){

	todate = request.getParameter("toDate");
		}
String fromDate="";
if(request.getParameter("fromDate")!=null){

	fromDate=request.getParameter("fromDate");
}
		datamap.put("issueNo",issueNo);
		datamap.put("fromDate",fromDate);
		datamap.put("todate",todate);
		datamap.put("deptId", deptId);
		datamap.put("hospitalId", hospitalId);
		map = storesHandlerService.getDepartmentIssueData(datamap);

		//if (map.get("storeInternalIndentMList") == null
				//|| map.get("storeInternalIndentMList").equals("")) {
			//map = storesHandlerService.showDepartmentIndent(deptId,hospitalId);
		//} else {
			//List<StoreInternalIndentM> indentM = (List) map
					//.get("storeInternalIndentMList");
			//if (indentM.size() == 0) {
				//map = storesHandlerService.showDepartmentIndent(deptId,hospitalId);
			//}
		//}

		jsp = "searchCIV";
		jsp = jsp + ".jsp";
		title = "CIV";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView showPendingDefectiveItemsJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		int deptId = Integer
				.parseInt(session.getAttribute("deptId").toString());

		int hospitalId = Integer
		.parseInt(session.getAttribute("hospitalId").toString());

		boolean show = false;
		if (request.getParameter("showAll") != null) {
			if (request.getParameter("showAll").equals("true")) {
				show = true;
			}
		}

		box.put("show", show);
		box.put("deptId", deptId);
		box.put("hospitalId", hospitalId);
		map = storesHandlerService.showPendingDefectiveItemsJsp(box);
		jsp = "pendingDefectiveDrugListJsp";
		jsp = jsp + ".jsp";
		title = "Pending Defective Items";
		map.put("contentJsp", jsp);
		map.put("show", show);
		map.put("title", title);
		map.put("tender_no", box.get(TENDER_NO));
		return new ModelAndView("indexB", "map", map);
	}


	public ModelAndView submitFollowDetails(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		String messageTOBeVisibleToTheUser="";
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		int deptId = Integer.parseInt(session.getAttribute("deptId").toString());
		int hospitalId = Integer.parseInt(session.getAttribute("hospitalId").toString());
		box.put("deptId", deptId);
		map = storesHandlerService.submitPendingDefectiveItemsJsp(box);
		messageTOBeVisibleToTheUser = "Defective Drug Entry Not Updated Successfully";


		dataMap.put("hospitalId", hospitalId);
		dataMap.put("deptId", deptId);

		url = "/hms/hms/stores?method=showDefectiveDrugJsp";
		map = storesHandlerService.showDefectiveDrugJsp(dataMap);
		map.put("messageType", "success");
		jsp = DEFECTIVE_DRUGS_JSP+".jsp";
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);

	}


	/*********************************** Method Written For Direct Proscription By Tirath ************************/

	public ModelAndView showDirectPriscriptionJsp(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> patientMap = new HashMap<String, Object>();
		int hinId = 0;
		HttpSession session = request.getSession();
		String buttonFlag = "";
		String issueNo = "";
		String hinNo = "";
		dataMap.put("deptId", session.getAttribute("deptId"));
		dataMap.put("hospitalId",session.getAttribute("hospitalId"));
		 map=storesHandlerService.showDirectPriscriptionJsp(dataMap);

		jsp = "patientDirectPriscriptionJsp";
		jsp += ".jsp";
		title = "Ward Consumption";
		map.put("contentJsp", jsp);
		map.put("deptId", session.getAttribute("deptId"));
		map.put("hospitalId",session.getAttribute("hospitalId"));
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}
	/*********************************** Method Written For Indent Tracking ************************/
	
	public ModelAndView showIndentHistoryJsp(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> patientMap = new HashMap<String, Object>();
		int hinId = 0;
		HttpSession session = request.getSession();
		map.put("deptId", session.getAttribute("deptId"));
		map.put("hospitalId",session.getAttribute("hospitalId"));
		map.put("fromDate", request.getParameter("fromDate"));
		map.put("toDate", request.getParameter("toDate"));
		map.putAll(storesHandlerService.showIndentHistoryJsp(map));
		jsp = "indentHistory";
		jsp += ".jsp";
		title = "Ward Consumption";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}
	/*********************************** Method Written For Waiting Rate Co ************************/
	
	public ModelAndView waitingForRateContractJsp(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> patientMap = new HashMap<String, Object>();
		int hinId = 0;
		HttpSession session = request.getSession();
		map.put("deptId", session.getAttribute("deptId"));
		map.put("hospitalId",session.getAttribute("hospitalId"));
		map.put("fromDate", request.getParameter("fromDate"));
		map.put("toDate", request.getParameter("toDate"));
		map.putAll(storesHandlerService.waitingForRateContract(map));
		jsp = "waitingForRateContract";
		jsp += ".jsp";
		title = "Ward Consumption";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}
	public ModelAndView rcToVendor(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> patientMap = new HashMap<String, Object>();
		int hinId = 0;
		HttpSession session = request.getSession();
		map.put("deptId", session.getAttribute("deptId"));
		map.put("hospitalId",session.getAttribute("hospitalId"));
		map.put("fromDate", request.getParameter("fromDate"));
		map.put("toDate", request.getParameter("toDate"));
		map.putAll(storesHandlerService.rcToVendor(map));
		jsp = "rcToVendor";
		jsp += ".jsp";
		title = "Ward Consumption";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	
	public ModelAndView rcListSubmitUntilReceive(HttpServletRequest request,HttpServletResponse response) {
		Map<String,Object> map = new HashMap<String,Object>();
		List<RcHeader> rcList = new ArrayList<RcHeader>();
		
		Box box = HMSUtil.getBox(request);	
		
		String unitType="";
		
		HttpSession session = request.getSession();
		int hospitalId = 0;
		if (session.getAttribute("hospitalId") != null) {
			hospitalId =  (Integer)session.getAttribute("hospitalId");
			box.put("hospitalId", hospitalId);
		}
		
		int deptId = 0;
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
			box.put("deptId", deptId);
		}
		
		map = storesHandlerService.rcListSubmitUntilReceive(box);
		
	
		if(map.get("rcList")!= null)
		{
			rcList = (List<RcHeader>) map.get("rcList");
		}
	
		int totalRecords = 0;
		if(map.get("totalRecords")!= null)
		{
			totalRecords = (Integer) map.get("totalRecords");
		}
		
		try
		{
			PrintWriter pw = response.getWriter();	
			
			pw.write("[");
			int counter=1;
			
			for(RcHeader list : rcList)
			{
				
				
			    if(counter != rcList.size())
			    {
			    	
			    		pw.write("{\"Id\": \""+list.getId()+"\",\"FromDate\": \""+(list.getFromDate() != null?HMSUtil.changeDateToddMMyyyy(list.getFromDate()):"")+"\",\"ToDate\": \""+(list.getToDate() != null?HMSUtil.changeDateToddMMyyyy(list.getToDate()):"")+"\",\"RequestDate\": \""+(list.getRcDate() != null?HMSUtil.changeDateToddMMyyyy(list.getRcDate()):"")+"\",\"RequestNo\": \""+(list.getRcNo()!=null?list.getRcNo():"")+"\",\"Vendor\": \""+(list.getSupplier()!=null?list.getSupplier().getSupplierName():"")+"\",\"ToDepartment\": \""+"\",\"RequestedBy\":\""+(list.getLastChgBy() != null?list.getLastChgBy().getFirstName():"")+"\",\"ApprovedBy\": \""+"\",\"totalRecords\":\""+totalRecords+"\"},");
			    	
			    }
			    else
			    {		    	
			    	pw.write("{\"Id\": \""+list.getId()+"\",\"FromDate\": \""+(list.getFromDate() != null?HMSUtil.changeDateToddMMyyyy(list.getFromDate()):"")+"\",\"ToDate\": \""+(list.getToDate() != null?HMSUtil.changeDateToddMMyyyy(list.getToDate()):"")+"\",\"RequestDate\": \""+(list.getRcDate() != null?HMSUtil.changeDateToddMMyyyy(list.getRcDate()):"")+"\",\"RequestNo\": \""+(list.getRcNo()!=null?list.getRcNo():"")+"\",\"Vendor\": \""+(list.getSupplier()!=null?list.getSupplier().getSupplierName():"")+"\",\"ToDepartment\": \""+"\",\"RequestedBy\":\""+(list.getLastChgBy() != null?list.getLastChgBy().getFirstName():"")+"\",\"ApprovedBy\": \""+"\",\"totalRecords\":\""+totalRecords+"\"}");
			    	
			    }
			
			    counter++;		
			}
			
			
			pw.write("]");
			
			
		}
		
		catch(Exception e)
		{
			rcList.clear();
			e.printStackTrace();
		}	
		rcList.clear();
		return null;		
		

	}

	public ModelAndView getPatientDetailsForPatientDirectPriscription(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session------
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		List<Visit> patientDetailsList = new ArrayList<Visit>();
		BigDecimal stockIn = null;

		Box box = HMSUtil.getBox(request);
		String itemNameField = "";
		int hinId=0;
		String patientName="";
		String patientRelationName="";

		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (request.getParameter("hinId") != null && !request.getParameter("hinId").equals("")) {
			hinId = Integer.parseInt(request.getParameter("hinId"));
		}

		dataMap.put("hinId", hinId);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.getPatientDetailsForPatientDirectPriscription(dataMap);
		if (map.get("patientDetailsList1") != null) {
			patientDetailsList = (List) map.get("patientDetailsList1");
		}

		jsp = "patientDirectPriscriptionResponseJsp";



		 return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getHinNoForDirectPriscription(HttpServletRequest request,HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		String autoHint = "";
		try {
			String serviceNo = "";


			Map<String, Object> dataMap = new HashMap<String, Object>();
			if (request.getParameter("serviceNo") != null) {
				serviceNo = (request.getParameter("serviceNo"));
			}

			dataMap.put("serviceNo", serviceNo);
			dataMap.put("deptId", deptId);
			dataMap.put("userName", userName);
			dataMap.put("hospitalId", hospitalId);
			map = storesHandlerService.getHinNoList(serviceNo);
			jsp = "hinResponseForDirectPriscription";
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView showGrnJspForAFMSD(HttpServletRequest request,
			HttpServletResponse response) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		int indentId=0;
		String flag="true";

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		Users user = (Users) session.getAttribute("users");
		Box box = HMSUtil.getBox(request);

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);
		dataMap.put("users", user);
		Map<String, Object> newMap = commonMasterHandlerService.getUserButtonRights(dataMap);
		List<UserButtonRights> userRightsList = (List<UserButtonRights>) newMap.get("userRightsList");

		map = storesHandlerService.showGrnJspForAFMSD(box, dataMap);
		jsp = "grnForAFMSD";
		jsp = jsp + ".jsp";
		title = "GRN";

		map.put("indentId", box.getInt(INDENT_ID));
		map.put("sourceOfSupply", box.get(SOURCE_OF_SUPPLY));
		map.put("grnDate", box.get(GRN_DATE));
		map.put("supplierId", box.getInt(SUPPLIER_ID));
		map.put("receivedDate", box.get(RECEIVED_DATE));
		map.put("invoiceNo", box.get(INVOICE_NO));
		map.put("invoiceDate", box.get(INVOICE_DATE));
		map.put("checkedById", box.getInt(EMPLOYEE_ID));
		map.put("flag", flag);


		map.put("userRightsList", userRightsList);
		map.put("contentJsp", jsp);
		map.put("title", title);
		String previousPage = "no";
		map.put("previousPage", previousPage);

		return new ModelAndView("indexB", "map", map);
	}


	// javed khan for auto indent

	public ModelAndView submitAutoIndentToDepot(
			HttpServletRequest request, HttpServletResponse response) {
		// ------ Retriving User Name,Hospital Id,Department Id from Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		StoreIndentM storeIndentM = new StoreIndentM();
		@SuppressWarnings("unused")
		StoreIndentT storeIndentT = new StoreIndentT();
		String indentFrom = "";
		@SuppressWarnings("unused")
		Date indentDate = null;
		int supplyDepot = 0;
		@SuppressWarnings("unused")
		int sectionId = 12;
		String nrs = "";
		int rows = 0;
		@SuppressWarnings("unused")
		String indentType = "d";
		int departmentId = 1;
		String encodedBy = "";
		Date encodedDate = null;
		String lastChgBy = "";
		@SuppressWarnings("unused")
		Date lastChgDate = null;
		String lastChgTime = "";
		String indentOption = "";
		String patientDetails = "";
		String justificationNiv = "";
		String pacJustification = "";
		String pacForeignAdd = "";
		String authority = "";
		String buttonName = "";
		String codehead="";
		String shelfLife="";
		int indentId = 0;
		int serialNo = 0;
		int itemId = 1;
		int stockIn = 0;
		int qtyInDemand = 0;
		int qtyInMmf = 0;
		int qtyReceived = 0;
		int radioVal = 0;
		int noOfRows = 0;
		String contactNo="";
		BigDecimal unitRate = null;
		String brandName = "";
		int manufactureId = 1;
		String marketedBy = "";
		BigDecimal totalCost = null;
		Date lastReceiptDate = null;
		BigDecimal lastReceiptQty = null;
		Map<String, Object> infoMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		String successfullyAdded = "no";
		int pageNo = 1;
		String url = "";
		int mmfForTheYear = 0;
		String indentNo = "";
		String address = "";
		String printUrl = "";
		try {
			if (request.getParameter("buttonName") != null) {
				buttonName = request.getParameter("buttonName");
			}
			if (request.getParameter(INDENT_ID) != null) {
				indentId = Integer.parseInt(request.getParameter(INDENT_ID));
			}

			if (request.getParameter(CHANGED_DATE) != null) {
				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(CHANGED_DATE)));
				lastChgDate = java.sql.Date.valueOf(date4MySQL);
			}
			if (request.getParameter(CHANGED_BY) != null) {
				lastChgBy = request.getParameter(CHANGED_BY);
			}
			if (request.getParameter(CHANGED_TIME) != null) {
				lastChgTime = request.getParameter(CHANGED_TIME);
			}

			if (request.getParameter(NO_OF_ROWS) != null) {
				noOfRows = Integer.parseInt(request.getParameter(NO_OF_ROWS));
			}
			if (request.getParameter("pageNo") != null) {
				pageNo = Integer.parseInt(request.getParameter("pageNo"));
			}

			if (request.getParameter(INDENT_NO) != null) {
				indentNo = (request.getParameter(INDENT_NO));
			}
			if (request.getParameter(TYPE_OF_INDENT) != null) {
				indentOption = (request.getParameter(TYPE_OF_INDENT));
			}
			if (request.getParameter(INDENT_FROM) != null) {
				indentFrom = (request.getParameter(INDENT_FROM));
			}
			if (request.getParameter(SUPPLY_DEPOT) != null) {
				supplyDepot = Integer.parseInt(request
						.getParameter(SUPPLY_DEPOT));
			}
			if (request.getParameter(INDENT_DATE) != null) {
				SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn.parse(request.getParameter(INDENT_DATE)));
				indentDate = java.sql.Date.valueOf(date4MySQL);
			}
			if (request.getParameter(NRS) != null) {
				nrs = (request.getParameter(NRS));
			}
			if (request.getParameter(SECTION_ID) != null) {
				sectionId = Integer.parseInt(""
						+ request.getParameter(SECTION_ID));
			}
			if (request.getParameter(AUTHORITY) != null) {
				authority = (request.getParameter(AUTHORITY));
			}
			if (request.getParameter(CONTACT_NUMBER) != null && !request.getParameter(CONTACT_NUMBER).equals("0")) {
				contactNo = request.getParameter(CONTACT_NUMBER);
			}
			if (request.getParameter(ADDRESS) != null) {
				address = (request.getParameter(ADDRESS));
			}
			if(request.getParameter(CODE_HEAD)!=null){
				codehead=request.getParameter(CODE_HEAD);
			}
			if(request.getParameter(SHELF_LIFE)!=null){
				shelfLife=request.getParameter(SHELF_LIFE);
			}


		} catch (Exception e) {

			e.printStackTrace();
		}
		String headerStored = "no";

		if (pageNo == 1) {
			try {
				storeIndentM.setIndentNo(indentNo);
				storeIndentM.setIndentDate(indentDate);
				storeIndentM.setRequiredForm(indentFrom);
				MasStoreAirForceDepot masStoreSupplier = new MasStoreAirForceDepot();
				masStoreSupplier.setId(supplyDepot);
				storeIndentM.setSuppliedBy(masStoreSupplier);
				if(sectionId!=0){
				MasStoreSection masStoreSection = new MasStoreSection();
				masStoreSection.setId(sectionId);
				storeIndentM.setSection(masStoreSection);
				}
				storeIndentM.setNrs(nrs);
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				storeIndentM.setDepartment(masDepartment);
				storeIndentM.setIndentType(indentType);
				storeIndentM.setEncodedBy(encodedBy);
				storeIndentM.setEncodedDate(indentDate);
				storeIndentM.setLastChgBy(lastChgBy);
				storeIndentM.setLastChgDate(indentDate);
				storeIndentM.setLastChgTime(lastChgTime);
				//storeIndentM.setStatus("o");
				if(buttonName.equals("close")){
					storeIndentM.setStatus("o");
					}else{
						storeIndentM.setStatus("u");
					}
				storeIndentM.setIndentOption(indentOption);

				storeIndentM.setPatientDetails(patientDetails);
				storeIndentM.setJustificationNiv(justificationNiv);
				storeIndentM.setPacJustification(pacJustification);
				storeIndentM.setPacForeignAdd(pacForeignAdd);
				storeIndentM.setAuthority(authority);
				storeIndentM.setTellNo(contactNo);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				storeIndentM.setHospital(masHospital);
				storeIndentM.setMmfForTheYear(mmfForTheYear);
				storeIndentM.setIndentNo(indentNo);
				storeIndentM.setImported("n");
				storeIndentM.setPatientDetails(address);
				storeIndentM.setCodeHead(codehead);
				storeIndentM.setSelfLife(shelfLife);

			} catch (Exception e) {
				e.printStackTrace();
			}
		} else {
			headerStored = "yes";
			infoMap.put("headerStored", headerStored);
		}

		int length = 0;
		int indentLength = 0;
		int itemIdArray1[] = null;
		try {
		 itemIdArray1 = JKTRequestUtils.getRequiredIntParameters(
				request, ITEM_ID);
		}catch (Exception e) {
			e.printStackTrace();
		}
		List<StoreIndentT> storeIndentTlist = new ArrayList<StoreIndentT>(itemIdArray1.length);
		try {
			int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
					SR_NO);
			int departmentArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, DEPARTMENT_ID_TEMP);
			int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, ITEM_ID);
			String qtyInHandStringArray[] = JKTRequestUtils
					.getRequiredStringParameters(request, QTY_IN_HAND);
			String qtyInMmfStringArray[] = JKTRequestUtils
					.getRequiredStringParameters(request, QTY_IN_MMF);
			String qtyDemandStringArray[] = JKTRequestUtils
					.getRequiredStringParameters(request, QTY_DEMAND);
			BigDecimal[] qtyInHandArray = new BigDecimal[itemIdArray1.length];
			BigDecimal[] qtyDemandArray = new BigDecimal[itemIdArray1.length];
			BigDecimal[] qtyInMmfArray = new BigDecimal[itemIdArray1.length];
			//int xxLegnt = qtyInHandStringArray.length;
			int xxLegnt=itemIdArray.length;
			indentLength = itemIdArray.length; // add by javed khan for merging
			for (int i = 0; i < xxLegnt; i++) {
				BigDecimal val = new BigDecimal(qtyInMmfStringArray[i]);
				qtyInMmfArray[i] = val;
			}
			for (int i = 0; i < xxLegnt; i++) {
				BigDecimal val = new BigDecimal(qtyDemandStringArray[i]);
				qtyDemandArray[i] = val;
			}
			for (int i = 0; i < xxLegnt; i++) {
				BigDecimal val = new BigDecimal(qtyInHandStringArray[i]);
				qtyInHandArray[i] = val;
			}

			if (buttonName.equals("next")) {
				length = 8;
			} else {
				length = noOfRows;
			}
			/*for (int i = 0; i < length; i++) {

				if (itemIdArray[i] != 0) {
					StoreIndentT storeIndentTObj = new StoreIndentT();
					storeIndentTObj.setSerialNo(srNo[i]);

					MasStoreItem masItem = new MasStoreItem();
					masItem.setId(itemIdArray[i]);
					storeIndentTObj.setItem(masItem);
					// storeIndentTObj.setStockIn(qtyInHandArray[i]);

					storeIndentTObj.setQtyInMmf(qtyInMmfArray[i]);
					storeIndentTObj.setQtyInDemand(qtyDemandArray[i]);
					storeIndentTObj.setQtyReceived(null);

					storeIndentTObj.setSection(null);
					storeIndentTObj.setStockIn(qtyInHandArray[i]);
					storeIndentTObj.setUnitRate(unitRate);
					storeIndentTObj.setBrand(null);
					MasManufacturer manufacturer = new MasManufacturer();
					manufacturer.setId(manufactureId);
					storeIndentTObj.setManufacture(manufacturer);
					storeIndentTObj.setMarketedBy(marketedBy);
					storeIndentTObj.setTotalCost(totalCost);
					storeIndentTObj.setLastReceiptDate(lastReceiptDate);
					storeIndentTObj.setLastReceiptQty(lastReceiptQty);
					storeIndentTlist.add(storeIndentTObj);
				}
			}
*/
			// javed for auto indent
			//if(request.getParameter("shelfLife")!=null && !request.getParameter("shelfLife").equals("")){
			for(int j=0; j<itemIdArray.length;j++){
				if (itemIdArray[j] != 0) {

				StoreIndentT storeIndentTObj = new StoreIndentT();
				storeIndentTObj.setSerialNo(srNo[j]);

				MasStoreItem masItem = new MasStoreItem();
				masItem.setId(itemIdArray[j]);
				storeIndentTObj.setItem(masItem);
				// storeIndentTObj.setStockIn(qtyInHandArray[i]);

				storeIndentTObj.setQtyInMmf(qtyInMmfArray[j]);
				storeIndentTObj.setQtyInDemand(qtyDemandArray[j]);
				storeIndentTObj.setQtyReceived(null);

				storeIndentTObj.setSection(null);
				storeIndentTObj.setStockIn(qtyInHandArray[j]);
				storeIndentTObj.setUnitRate(unitRate);
				storeIndentTObj.setBrand(null);
				MasManufacturer manufacturer = new MasManufacturer();
				manufacturer.setId(manufactureId);
				storeIndentTObj.setManufacture(manufacturer);
				storeIndentTObj.setMarketedBy(marketedBy);
				storeIndentTObj.setTotalCost(totalCost);
				storeIndentTObj.setLastReceiptDate(lastReceiptDate);
				storeIndentTObj.setLastReceiptQty(lastReceiptQty);
				storeIndentTlist.add(storeIndentTObj);
				}
			}
			//}
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			dataMap.put("storeIndentM", storeIndentM);
			dataMap.put("storeIndentTlist", storeIndentTlist);
			dataMap.put("pageNo", pageNo);
			dataMap.put("indentId", indentId);
			dataMap.put("indentNo", indentNo);
			dataMap.put("deptId", deptId);
			dataMap.put("hospitalId", hospitalId );
			map = (Map) storesHandlerService
					.addNextOrSubmitIndentToDepot(dataMap);
			if (map.get("indentId") != null)
				indentId = Integer.parseInt("" + map.get("indentId"));

			if (map.get("successfullyAdded") != null)
				successfullyAdded = "" + map.get("successfullyAdded");
		} catch (Exception e) {
			e.printStackTrace();
		}
		String messageTOBeVisibleToTheUser = "";
		if (successfullyAdded.equals("yes")) {
			messageTOBeVisibleToTheUser = "Indent To Depot Records Added Successfully";
		} else {
			messageTOBeVisibleToTheUser = "Indent To Depot Records are Not Added";
			map.put("messageType", "failure");
		}
		if (buttonName.equals("next")) {
			jsp = INDENT_TO_DEPOT_JSP;
			String jspFlag="auto";
			map.put("jspFlag", jspFlag);
		} else {
			//jsp = STORES_MESSAGE_JSP;
			jsp="indentMessage";
			url = "/hms/hms/stores?method=showIndentJspDepot";
			printUrl = "/hms/hms/stores?method=printIndentTODepo&indentNo="+indentNo+"&deptId="+deptId;
		}
		pageNo = pageNo + 1;
		jsp += ".jsp";
		map.put("indentNo", indentNo);
		map.put(" indentFrom", indentFrom);
		map.put("indentDate", indentDate);
		map.put("supplyDepot", supplyDepot);
		map.put("sectionId", sectionId);
		map.put("indentOption", indentOption);
		map.put("nrs", nrs);
		map.put("codehead",codehead);
		map.put("authority", authority);
		map.put("address", address);
		map.put("indentOption", indentOption);
		map.put("pageNo", pageNo);
		map.put("contentJsp", jsp);
		map.put("contactNo",contactNo);
		map.put("url", url);
		map.put("printUrl", printUrl);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		map.put("indentLength", indentLength); // add by javed khan for merging
		return new ModelAndView("indexB", "map", map);
	}

	// add javed khan for remove duplicacy of IndentNo

	
	public ModelAndView submitRCWaitingList(
			HttpServletRequest request, HttpServletResponse response) {
		
		Map<String, Object> map = new HashMap<String, Object>();
		boolean succesfullyAdded =false;
		String rcNo = "";
//		Map<String, Object> datamap = new HashMap<String, Object>();
		Box box =HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		int deptId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		box.put("hospitalId", hospitalId);
		box.put("deptId", deptId);
		Users users = (Users)session.getAttribute("users");
		box.put("userId", users.getId());
		box.put("userName", users.getUserName());
		box.put("empId", users.getEmployee().getId());		
		map.put("deptId", deptId);
		map.put("hospitalId",hospitalId);
		map.put("fromDate", request.getParameter("fromDate"));
		map.put("toDate", request.getParameter("toDate"));			
				
		try {			
			map = storesHandlerService.submitRCWaitingList(box);
			/*map.putAll(storesHandlerService.waitingForRateContract(map));*/
			if(map.get("succesfullyAdded")!=null){
				succesfullyAdded=(Boolean)map.get("succesfullyAdded");
			}
			if(map.get("rcNo")!=null){
				rcNo=(String)map.get("rcNo");
			}
			if (succesfullyAdded) {
				message = "RC Submitted Successfully With RC Number "+rcNo;
				
			} else {
				message = "Error Occured !! Try Again !!";
				
			}
			jsp = "messageJsp";
			jsp += ".jsp";
			title = "Ward Consumption";
			map.put("message", message);
			map.put("contentJsp", jsp);
			map.put("title", title);
			map.put("printUrl", "/hms/hms/stores?method=printForRateContractJsp");
			map.put("backUrl", "/hms/hms/stores?method=waitingForRateContractJsp");
		} catch (RuntimeException e) {

			e.printStackTrace();
		}
		return new ModelAndView("index", "map", map);
	}
	
	public ModelAndView responseForIndentNoList(HttpServletRequest request,
			HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String choice = "";
			String indentNo="";
			/*if (request.getParameter(SOURCE_OF_SUPPLY) != null) {
			choice = request.getParameter(SOURCE_OF_SUPPLY);
			}*/

			if (request.getParameter("indentNo") != null) {
				indentNo = request.getParameter("indentNo");
			}
			dataMap.put("choice",choice);
			dataMap.put("indentNo",indentNo);
			map = (Map<String, Object>) storesHandlerService.getIndentNo(dataMap);
			jsp = "responseForIndentNo";
			return new ModelAndView(jsp, "map", map);
			}

	// javed khan for modify civ
	public ModelAndView civModifyJsp(HttpServletRequest request,HttpServletResponse response) {

		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> purchaseMap = new HashMap<String, Object>();
		jsp = "updateCiv";
		jsp += ".jsp";
		int radio_str = 0;
		int deptId = 0;
		int pageNo = 1;
		String buttonFlag = null;
String id="";
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}

		if (request.getParameter("buttonFlag") != null) {
			buttonFlag = request.getParameter("buttonFlag");
		}
		if (request.getParameter("pageNo") != null) {
			pageNo = Integer.parseInt(request.getParameter("pageNo"));
		}

		if (request.getParameter("ValueOfPage") != null) {
			pageNo = Integer.parseInt(request.getParameter("ValueOfPage"));
		}
		if (request.getParameter("parent") != null) {
			radio_str = Integer.parseInt(request.getParameter("parent"));
			/*map = (Map<String, Object>) purchaseOrderHandlerService
					.poModifyMap(radio_str, pageNo, buttonFlag);*/
		}
		int poDetailId=0;
		//poDetailId = Integer.parseInt(request.getParameter(PO_DETAIL_ID));
		/*map = (Map<String, Object>) purchaseOrderHandlerService.poModifyMap(poDetailId, pageNo, buttonFlag);
		purchaseMap = purchaseOrderHandlerService.showPurchaseOrderJsp(deptId);
		List<StorePoHeader> poNumberList = purchaseOrderHandlerService.getPoNumberList(deptId);*/

		map.put("purchaseMap", purchaseMap);
		map.put("pageNo", pageNo);
		//map.put("poNumberList", poNumberList);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("radio_str", radio_str);

		return new ModelAndView("index", "map", map);
	}



	public ModelAndView showChallenJsp(HttpServletRequest request,
			HttpServletResponse response) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		Users user = (Users) session.getAttribute("users");
		Box box = HMSUtil.getBox(request);

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);
		dataMap.put("users", user);
		Map<String, Object> newMap = commonMasterHandlerService.getUserButtonRights(dataMap);
		List<UserButtonRights> userRightsList = (List<UserButtonRights>) newMap.get("userRightsList");

		map = storesHandlerService.showGrnJsp(box, dataMap);
		jsp = "challanEntryJsp";
		jsp = jsp + ".jsp";
		title = "Challan Entry";
		map.put("userRightsList", userRightsList);
		map.put("contentJsp", jsp);
		map.put("title", title);
		String previousPage = "no";
		map.put("previousPage", previousPage);
		return new ModelAndView("indexB", "map", map);
	}


	public ModelAndView showSampleTestingEntryJsp(HttpServletRequest request,HttpServletResponse response) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();

		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("deptId", deptId);

		map = storesHandlerService.showSampleTestingEntryJsp(dataMap);
		jsp = "sampleTestingEntry";
		jsp = jsp + ".jsp";
		title = "Defective Drugs Entry";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}

	public ModelAndView responseGridForChallnEntry(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.getResponsePoList(box);
		// jsp = "responseForPoList";
		jsp = "gridForLoanIn";
		return new ModelAndView(jsp, "map", map);
	}


	/*************************   For Submit Sample Testing Entry		***************************/
	// By Tirath at 02-04-2012

	public ModelAndView submitSampleTestingEntry(HttpServletRequest request,HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		StoreSampleTestingEntry storeSampleTestingEntry = new StoreSampleTestingEntry();
		StoreSampleTestingDetail storeSampleTestingDetail = new StoreSampleTestingDetail();
		String grnNo = "";
		new Date();
		Date entryDate = new Date();
		Date docDate = new Date();
		Date encodedDate = null;
		Date lastChgDate = null;
		String date = "";
		String time = "";
		String encodedBy = "";
		String lastChgBy = "A";
		String lastChgTime = "";
		String buttonFlag = "";
		String patientDetails = "";
		String patientReaction = "";
		String desc2 = "";
		String desc3 = "";
		String entryNo = "";
		String userName="";
		String defectType="";
		String disposalInstruction="";
		String remark="";
		int departmentId = 0;
		int authorised_byId=0;
		int enterd_byId=0;
		int noOfRows = 0;
		int pageNo = 1;
		int entryId = 0;
		int deptId = 0;
		int hospitalId=0;
		int authorisedId=0;
		int enteredId=0;
		String toPlace = "";

		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		try {
			if (request.getParameter("pageNo") != null) {
				pageNo = Integer.parseInt(request.getParameter("pageNo"));

			}
			if (request.getParameter(NO_OF_ROWS) != null) {
				noOfRows = Integer.parseInt(request.getParameter(NO_OF_ROWS));
			}
			if (request.getParameter(ENTRY_ID) != null) {
				entryId = Integer.parseInt(request.getParameter(ENTRY_ID));

			}

			if (request.getParameter(ENTRY_NO) != null) {
				entryNo = (request.getParameter(ENTRY_NO));
			}
			if (request.getParameter("PatientDetails") != null) {
				patientDetails = request.getParameter("PatientDetails");
			}

			if (request.getParameter("PatientReaction") != null) {
				patientReaction = request.getParameter("PatientReaction");
			}


			if (request.getParameter("defectType") != null) {
				defectType = request.getParameter("defectType");
			}


		} catch (Exception e) {
			e.printStackTrace();
		}

		try {
			String te = "";
			String te1 = "";

			SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
			if (request.getParameter(ENTRY_DATE) != null) {
				te = (String) (request.getParameter(ENTRY_DATE));

				String date4MySQL = formatterOut.format(formatterIn.parse(request.getParameter(ENTRY_DATE)));
				entryDate = java.sql.Date.valueOf(date4MySQL);

				String date4MySQL1 = formatterOut.format(formatterIn.parse(request.getParameter(DOC_DATE)));
				docDate = java.sql.Date.valueOf(date4MySQL1);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");

		String[] copyIds = request.getParameterValues(RequestConstants.COPY_TO);
		String allCopyIds = "";
		if (request.getParameterValues(RequestConstants.COPY_TO) != null)
			for (int i = 0; i < copyIds.length; i++) {
				if (i != copyIds.length - 1)
					allCopyIds += copyIds[i] + ",";
				else
					allCopyIds += copyIds[i];

			}

		String headerStored = "no";

		if (pageNo == 1) {


			storeSampleTestingEntry.setDefectiveDate(entryDate);
			storeSampleTestingEntry.setDefectNo(entryNo);
			storeSampleTestingEntry.setDefectType(defectType);
			storeSampleTestingEntry.setPatientDetails(patientDetails);
			storeSampleTestingEntry.setPatientReaction(patientReaction);
			storeSampleTestingEntry.setSampleSentOn(docDate);


			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(deptId);
			storeSampleTestingEntry.setDepartment(masDepartment);



			storeSampleTestingEntry.setStatus("y");

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			storeSampleTestingEntry.setHospital(masHospital);



		} else {
			headerStored = "yes";
			infoMap.put("headerStored", headerStored);
		}
		int length = 0;
		List<StoreSampleTestingDetail>StoreSampleTestingDetaillist = new ArrayList<StoreSampleTestingDetail>();

		try {
			int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
					SR_NO);
			int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, ITEM_ID);
			int brandIdArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, BRAND_ID);
		/*	String remarks[] = JKTRequestUtils.getRequiredStringParameters(
					request, REMARKS);*/

			String manufacturDateArray[] = JKTRequestUtils
			.getRequiredStringParameters(request, MANUFACTURING_DATE);

			String expriyDateArray[] = JKTRequestUtils
					.getRequiredStringParameters(request, EXPIRY_DATE);

			/*String disposal[] = JKTRequestUtils.getRequiredStringParameters(
			request, DISPOSAL);

			String disposalDateArray[] = JKTRequestUtils
			.getRequiredStringParameters(request, DISPOSAL_DATE_D);*/

			int manuArray[] = JKTRequestUtils.getRequiredIntParameters(request,
					MANUFACTURER_ID);

			/*String disposal[] = JKTRequestUtils.getRequiredStringParameters(
					request, DISPOSAL);
			String authyDeclared[] = JKTRequestUtils
					.getRequiredStringParameters(request, AUTHY_UNDER_DECLARED);*/
			int batchNoArr[] = JKTRequestUtils.getRequiredIntParameters(
					request, BATCH_ID);

			String sourceOfSupply[] = JKTRequestUtils.getRequiredStringParameters(request,
					SOURCE_OF_SUPPLY);

			BigDecimal[] quantityReceivedArray = new BigDecimal[100];
			String mm[] = JKTRequestUtils.getRequiredStringParameters(request,
					QUANTITY_RECEIVED);
			int mmLen = mm.length;
			for (int i = 0; i < mmLen; i++) {
				BigDecimal val = new BigDecimal(mm[i]);

				quantityReceivedArray[i] = val;
			}

			if (buttonFlag.equals("next")) {
				// if(buttonFlag != null){
				length = 10;
			} else {
				length = noOfRows;
			}

			for (int i = 0; i < length; i++) {
				if (itemIdArray[i] != 0) {

					StoreSampleTestingDetail StoreSampleTestingDetailObj = new StoreSampleTestingDetail();

					StoreSampleTestingDetailObj.setSrNo(srNo[i]);
					MasStoreItem masItem = new MasStoreItem();
					masItem.setId(itemIdArray[i]);
					StoreSampleTestingDetailObj.setItem(masItem);

					/*if (remarks[i].equals("emptyString2"))
						storeDefectiveDrugTObj.setRemarks("");
					else
						storeDefectiveDrugTObj.setRemarks(remarks[i]);
*/
					/*storeDefectiveDrugTObj
							.setAuthyUnderDeclared(authyDeclared[i]);

					if (disposal[i].equals("emptyString1"))
						storeDefectiveDrugTObj.setDisposal("");
					else
						storeDefectiveDrugTObj.setDisposal(disposal[i]);*/

					if (expriyDateArray[i].equals("abc")) {
						StoreSampleTestingDetailObj.setExpiryDate(null);
					} else {

						StoreSampleTestingDetailObj
								.setExpiryDate(HMSUtil
										.convertStringTypeDateToDateType(expriyDateArray[i]));
					}
					if (manufacturDateArray[i].equals("abc")) {
						StoreSampleTestingDetailObj.setManufactureringDate(null);
					} else {
						StoreSampleTestingDetailObj
								.setManufactureringDate(HMSUtil
										.convertStringTypeDateToDateType(manufacturDateArray[i]));
					}









					StoreItemBatchStock batchStock = new StoreItemBatchStock();
					batchStock.setId(batchNoArr[i]);
					StoreSampleTestingDetailObj.setBatchNo(batchStock);
					StoreSampleTestingDetailObj
							.setDefectQty(quantityReceivedArray[i]);
					StoreSampleTestingDetailObj.setSourceOfSupply(sourceOfSupply[i]);
					MasStoreBrand masStoreBrand = new MasStoreBrand();
					masStoreBrand.setId(brandIdArray[i]);
					if (brandIdArray[i] != 0) {
						StoreSampleTestingDetailObj.setBrand(masStoreBrand);
					} else {
						StoreSampleTestingDetailObj.setBrand(null);
					}

					MasManufacturer masManufacturer = new MasManufacturer();
					masManufacturer.setId(manuArray[i]);
					if (manuArray[i] != 0) {
						StoreSampleTestingDetailObj
								.setManufacturedBy(masManufacturer);
					} else {
						StoreSampleTestingDetailObj.setManufacturedBy(null);
					}


					StoreSampleTestingDetaillist.add(StoreSampleTestingDetailObj);
				}



			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		infoMap.put("pageNo", pageNo);
		infoMap.put("entryNo", entryNo);
		infoMap.put("entryId", entryId);
		infoMap.put("storeSampleTestingEntry", storeSampleTestingEntry);
		infoMap.put("StoreSampleTestingDetaillist", StoreSampleTestingDetaillist);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);

		boolean flag = false;
		try {
			flag = storesHandlerService.submitSampleTestingEntry(infoMap, dataMap);

		} catch (Exception e) {
			e.printStackTrace();
		}
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}

		String messageTOBeVisibleToTheUser = "";

		if (flag) {
			if (buttonFlag.equals("next")) {
				jsp = "sampleTestingEntry";
				pageNo++;
				messageTOBeVisibleToTheUser = "Sample testing  entry saved successfully.";
				map = storesHandlerService.showDefectiveDrugJsp(dataMap);
				if (map.get("entryId") != null) {
					entryId = (Integer) map.get("entryId");
				}
				List<StoreDefectiveDrugM> defectMList = storesHandlerService
						.getDefectDrug(entryId);
				map.put("defectMList", defectMList);

			} else {
				jsp = STORES_MESSAGE_JSP;
				pageNo++;
				messageTOBeVisibleToTheUser = "Sample testing  entry saved successfully";
			}
		} else {
			messageTOBeVisibleToTheUser = "Sample testing  entry not saved.";
		}

		jsp = "message";
		jsp += ".jsp";

		url = "/hms/hms/stores?method=showSampleTestingEntryJsp";
		map.put("entryNo", entryNo);
		map.put("pageNo", pageNo);
		map.put("contentJsp", jsp);
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("indexB", "map", map);
	}



	public ModelAndView submitFollowDetailsForSampleEntry(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		String messageTOBeVisibleToTheUser="";
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		int deptId = Integer.parseInt(session.getAttribute("deptId").toString());
		int hospitalId = Integer.parseInt(session.getAttribute("deptId").toString());
		box.put("deptId", deptId);
		map = storesHandlerService.submitFollowDetailsForSampleEntry(box);
		messageTOBeVisibleToTheUser = "Defective Drug Entry Not Updated Successfully";

		dataMap.put("hospitalId", hospitalId);
		dataMap.put("deptId", deptId);

		url = "/hms/hms/stores?method=showSampleTestingEntryJsp";
		map = storesHandlerService.showSampleTestingEntryJsp(dataMap);
		map.put("messageType", "success");
		jsp = "sampleTestingEntry"+".jsp";
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);

	}


	//For searching defective drug on basis of entry No
	public ModelAndView searchSampleTestingEntry(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		String fromDate = "";
		String toDate = "";
		String entryNo = "";
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> tempMap = new HashMap<String, Object>();
		Map<String, Object> searchFieldMap = new HashMap<String, Object>();

		List<StoreSampleTestingEntry> searchDrugList = new ArrayList<StoreSampleTestingEntry>();

		int hospitalId=0;
		int deptId=0;
		HttpSession session = request.getSession();
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));

		try {
			if (request.getParameter(FROM_DATE) != null) {
				fromDate = request.getParameter(FROM_DATE);

			}
			if (request.getParameter(TO_DATE) != null) {
				toDate = request.getParameter(TO_DATE);

			}
			if (request.getParameter(ENTRY_NO) != null) {
				entryNo = request.getParameter(ENTRY_NO);

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		searchFieldMap.put("fromDate", fromDate);
		searchFieldMap.put("toDate", toDate);
		searchFieldMap.put("entryNo", entryNo);
		searchFieldMap.put("hospitalId", hospitalId);
		searchFieldMap.put("deptId", deptId);


		try {
			tempMap = storesHandlerService.searchSampleTestingEntry(searchFieldMap);
			if (tempMap.get("searchDrugList") != null)
				searchDrugList = (List) tempMap.get("searchDrugList");
			map = storesHandlerService.searchSampleTestingEntry(searchFieldMap);
			map.put("searchDrugList", searchDrugList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "searchSampleTestingEntryJsp";
		jsp = jsp + ".jsp";
		title = "DEFECTIVE DRUGS";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}


	public ModelAndView modifySampleTestEntry(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> purchaseMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		//jsp = MODIFY_DEFECTIVE_DRUG;
		jsp="modifySampleTestingEntryJsp";
		jsp += ".jsp";
		int radio_str = 0;
		int deptId = 0;
		int entryId=0;

		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}

		/*if (request.getParameter("parent") != null) {
			radio_str = Integer.parseInt(request.getParameter("parent"));

		}*/
		if(request.getParameter(ENTRY_ID) != null){
			entryId=Integer.parseInt(request.getParameter(ENTRY_ID));
			map = (Map<String, Object>) storesHandlerService
			.getSampleTestEntryModifyMap(entryId, 0);
		}
		purchaseMap = storesHandlerService.showSampleTestingEntryJsp(dataMap);
		List<StoreSampleTestingEntry> defectiveList = storesHandlerService.getSampleTestingEntry();

		map.put("purchaseMap", purchaseMap);
		map.put("defectiveList", defectiveList);
		map.put("contentJsp", jsp);
		map.put("title", title);
//		map.put("radio_str", radio_str);
		map.put("entryId", entryId);

		return new ModelAndView("indexB", "map", map);
	}


	//----Update Defective Drug by Ritu----
	public ModelAndView updateSampleTestingEntry(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);

		int hospitalId = 0;
		int deptId = 0;
		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null){
			userName = (String) session.getAttribute("userName");
			box.put("userName", session.getAttribute("userName"));
		}
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		Map<String, Object> dataMap = new HashMap<String, Object>();

		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("deptId", deptId);
		boolean flag = false;
		String messageTOBeVisibleToTheUser = "";
		try{
			flag=storesHandlerService.updateSampleTestingEntry(box);
		}catch (Exception e) {
			e.printStackTrace();
		}
		if (!flag) {
			messageTOBeVisibleToTheUser = "Sample Testing Entry Updated Successfully !!";

		} else {
			messageTOBeVisibleToTheUser = "Sample Testing Entry Not Updated Successfully";
		}
		url = "/hms/hms/stores?method=showSampleTestingEntryJsp";
		map = storesHandlerService.showSampleTestingEntryJsp(dataMap);
		map.put("messageType", "success");
		jsp = "sampleTestingEntry"+".jsp";
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}


	// javed khan
	  public ModelAndView submitUpdateIssueForIndent(HttpServletRequest request,HttpServletResponse response)
	    {
			Map<String, Object> map = new HashMap<String, Object>();
			Map<String,Object> dataMap = new HashMap<String, Object>();
			HttpSession session = request.getSession();
			int hospitalId = (Integer)session.getAttribute(HOSPITAL_ID);
			int deptId = (Integer)session.getAttribute("deptId");
			int indentDtId =0;
			boolean b = false;
			String issuedBatchIdAndQty="";
			Set set = new  HashSet();
			List<StoreIssueT> childList=new ArrayList<StoreIssueT>();


			Map<String, Object> utilMap = new HashMap<String, Object>();
			Box box = HMSUtil.getBox(request);
			utilMap = (Map<String, Object>)HMSUtil.getCurrentDateAndTime();
			String date = (String)utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");

			BigDecimal totalAmtAllItemsWithoutTax = new BigDecimal(0);
			BigDecimal totalSalesTaxAllItems = new BigDecimal(0);
			BigDecimal totalAmtAllItemsIncludingTax = new BigDecimal(0);
			BigDecimal totalPayableAmtAllItemsIncludingTax = new BigDecimal(0);
			BigDecimal amtInRs = new BigDecimal(0);
			BigDecimal roundAmtPs = new BigDecimal(0);
			BigDecimal zero = new BigDecimal("0");

			String[] array1 = request.getParameterValues("tt8");
			String[] totalQuantityIssued = request.getParameterValues("tt6");
			String[] totalQuantityRequested = request.getParameterValues(RequestConstants.QTY_IN_REQUEST);
			//String[] storeIndentTIdArray = request.getParameterValues("storeIndentTId");
			/* if (request.getParameter("indentDtId") != null) {
				 indentDtId= Integer.parseInt(request.getParameter("indentDtId").trim());
				 utilMap.put("indentDtId", indentDtId);
			 }
	*/
			int indentInternalId=0;
			if(request.getParameter(REQUEST_NO) !=null && !request.getParameter(REQUEST_NO).equals("0")){
			indentInternalId=Integer.parseInt(request.getParameter(REQUEST_NO));
			}
			 StoreIssueM issueM = new StoreIssueM();
			 issueM.setIssueType("i");
			 issueM.setIssueNo(request.getParameter(ISSUE_NO));
			 issueM.setIssueDate(HMSUtil.convertStringTypeDateToDateType(request.getParameter(ISSUE_DATE)));

			 MasDepartment department = new MasDepartment();
			 department.setId(deptId);
			 issueM.setDepartment(department);

			 MasDepartment department2 = new MasDepartment();
			 department2.setId(Integer.parseInt(request.getParameter(DEPARTMENT_ID_TEMP)));
			 issueM.setToStore(department2);

			 StoreInternalIndentM internalIndentM = new StoreInternalIndentM();
			// internalIndentM.setId(15);
			  internalIndentM.setId(Integer.parseInt(request.getParameter(REQUEST_NO)));
			 issueM.setRequestNo(internalIndentM);

			 issueM.setRequestDate(HMSUtil.convertStringTypeDateToDateType(request.getParameter(REQUEST_DATE)));

			 MasEmployee employee = new MasEmployee();
			 employee.setId(Integer.parseInt(request.getParameter(REQUEST_BY)));
			 issueM.setRequestBy(employee);

			if(request.getParameter(APPROVED_BY)!=null){
				MasEmployee employee2 = new MasEmployee();
			 employee2.setId(Integer.parseInt(request.getParameter(APPROVED_BY)));
			 issueM.setApprovedBy(employee2);
			}

			 MasEmployee employee3 = new MasEmployee();
			 employee3.setId(Integer.parseInt(request.getParameter(ISSUED_BY)));
			 issueM.setIssuedBy(employee3);
			 issueM.setStatus("p");

			 MasHospital hospital = new MasHospital();
			 hospital.setId(hospitalId);
			 issueM.setHospital(hospital);

			 issueM.setDocNo(request.getParameter(REQUEST_NO));
			 issueM.setLastChgBy(userName);
			 issueM.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(date));
			 issueM.setLastChgTime(time);
			 utilMap.put("indentInternalId",indentInternalId);
			 utilMap.put("issueM", issueM);
			 utilMap.put("IssueMid", request.getParameter(ISSUE_NO));// javed
				List issQtyList = new ArrayList();
				List amountList = new ArrayList();
				List pvmsList = new ArrayList();
				List batchNumberList = new ArrayList();
				List brandNameList = new ArrayList();
				List expiryDateList = new ArrayList();
				List reqQtyList = new ArrayList();
				List batchIdList = new ArrayList();
				//List costPriceList = new ArrayList();
				List<Integer> itemIdList = new ArrayList<Integer>();
				int counter = Integer.parseInt(request.getParameter("counter"));
				// change by javed khan
				String[] arraySr = request.getParameterValues(RequestConstants.SR_NO);
				//for (int i = 1; i <counter; i++)
				for (int i = 1; i <=arraySr.length; i++)
				{
					int itemId = Integer.parseInt(request.getParameter("itemId"+i));
					itemIdList.add(itemId);
					issQtyList.add(request.getParameter("qtyIssued" + i));
					// pvmsList.add(itemId);
					batchNumberList.add(request.getParameter("batchNo" + i));
				   	brandNameList.add(request.getParameter("brandId" + i));
					expiryDateList.add(request.getParameter("expiryDate" + i));
					reqQtyList.add(request.getParameter(QTY_IN_REQUEST + i));
					StoreIssueT child = new StoreIssueT();
			    	child.setBatchNo(request.getParameter("batchNo" + i));
			    	try
			    	{
			    	child.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(request.getParameter("expiryDate" + i)));
			    	}catch (Exception e) {


					}

			    	if(request.getParameter("qtyIssued" + i) != null && !request.getParameter("qtyIssued" + i).equals("")){
			    	child.setQtyIssued(new BigDecimal(request.getParameter("qtyIssued" + i)));
			    	}else{
			    		child.setQtyIssued(null);
			    	}
			    	if(request.getParameter(QTY_IN_REQUEST  + i) != null && !request.getParameter(QTY_IN_REQUEST  + i).equals("")){
			    	child.setQtyRequest(new BigDecimal(request.getParameter(QTY_IN_REQUEST + i)));
			    	}else{
			    		child.setQtyRequest(null);
			    	}
			    	if(request.getParameter("batchId" + i) != null && !request.getParameter("batchId" + i).equals("")){
			    		batchIdList.add(request.getParameter("batchId" + i)); // javed khan
			    	StoreItemBatchStock batchStock = new StoreItemBatchStock();
			    	batchStock.setId(Integer.parseInt(request.getParameter("batchId" + i)));
			    	child.setBatchStock(batchStock);
			    	}else{
			    		child.setBatchStock(null);
			    	}
			        try {
			        	if(request.getParameter("brandId" + i) != null && !request.getParameter("brandId" + i).equals("")){
						MasStoreBrand masBrand = new MasStoreBrand();
						masBrand.setId(Integer.parseInt(request.getParameter("brandId" + i)));
						child.setBrand(masBrand);
			        	}else{child.setBrand(null);}

					} catch (Exception e) {
						// TODO Auto-generated catch block
						child.setBrand(null);
						e.printStackTrace();
					}

			    	//child.setIssueM(issueM);


			    	MasStoreItem masStoreItem = new MasStoreItem();
			    	masStoreItem.setId(itemId);
			    	child.setItem(masStoreItem);
			    	child.setItemIssued(masStoreItem);

			   	    child.setCostPrice(new BigDecimal(0.0));
//			    	    child.setRemarks(request.getParameter(RequestConstants.REMARKS_TEMP));
			    	child.setSrNo(Integer.parseInt(request.getParameter("SRNo")));
			    	child.setIssued("y");
			    	//child.setSalesTaxAmt(new BigDecimal(salesTax));
			    	//child.setAmtIncludingSalesTax(new BigDecimal(amtIncludingSalesTax));
//			    	    set.add(child);
			    	childList.add(child);
				}
				utilMap.put("batchIdList", batchIdList); // javed khan
				utilMap.put("itemIdList", itemIdList);
				utilMap.put("issQtyList", issQtyList);
				utilMap.put("batchNumberList", batchNumberList);
				utilMap.put("expiryDateList", expiryDateList);
				utilMap.put("brandNameList", brandNameList);
				utilMap.put("reqQtyList", reqQtyList);
				utilMap.put("deptId", deptId);
				utilMap.put("childList",childList);

			map = storesHandlerService.insertIssueForIndentupdate(utilMap, box);
			String msg = "";
			if(map.get("b")!=null)
			{
				b = (Boolean)map.get("b");
			}
			if(b){
				msg = "Indent Has Been Issued Successfully.";
			}else{
				msg = "Indent Has Not Been Issued Successfully.";
			}
			/*map = storesHandlerService.showIssueDispensaryJsp(dataMap);
			jsp = RequestConstants.ISSUED_TO_DISPENSARY_JSP;*/
			String jsp = STORES_ISSUE_MESSAGE_JSP;
				String messageTOBeVisibleToTheUser = "Issued Successfully  ! Do you want to print?";
					map.put("messageTOBeVisibleToTheUser",
							messageTOBeVisibleToTheUser);
					int issueId=0;
					if (map.get("issueId") != null)
						issueId = Integer.parseInt("" + map.get("issueId"));
			jsp+= ".jsp" ;
			String title = "Invoice";
			map.put("issueId", issueId);
			map.put("msg", msg);
			map.put("contentJsp", jsp);
			map.put("title", title);
			return new ModelAndView("index", "map", map);
		}

	public ModelAndView getMMFItem(HttpServletRequest request,HttpServletResponse response) {
		HttpSession session = request.getSession();
		int deptId = 0;
		int batchId = 0;
		int hospitalId=0;
		String lifeType = "";
		String manufacturer="";
		Date expirydate = new Date();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List objectList1 = new ArrayList();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt("" + session.getAttribute("hospitalId"));
		if (request.getParameter(BATCH_ID) != null) {
			lifeType = ("" + (request.getParameter(BATCH_ID)));
		}
		dataMap.put("deptId", deptId);
		dataMap.put("lifeType", lifeType);
		dataMap.put("hospitalId", hospitalId);
		String date4MySQL1 = "";
		String date4MySQL2="";
		Object[] ob=null;
		try {
			map = storesHandlerService.getMMFItem(dataMap);
			SimpleDateFormat formatterIn = new SimpleDateFormat("yyyy-MM-dd");
			SimpleDateFormat formatterOut = new SimpleDateFormat("dd/MM/yyyy");


			if(map.get("objectList1") !=null){
				 objectList1=(List)map.get("objectList1");

				}

		} catch (Exception e) {
			e.printStackTrace();
		}
		int mId = 1;
		if (map.get("mId") != null) {
			mId = Integer.parseInt(("" + map.get("mId")));
		}

		StringBuffer sb = new StringBuffer();

		title = "Res Turn Over Register";
		// javed 28 march
		int noOfRows=0;
		if(request.getParameter("noOfRows")!=null)
				{
					noOfRows=Integer.parseInt(request.getParameter("noOfRows"));
				}
		String soNo = "";
		if(request.getParameter("soNo") != null)
		{
			soNo = request.getParameter("soNo");
		}
		map.put("noOfRows",noOfRows);
		map.put("soNo",soNo);
		//jsp = "responcePendingForIndent";
		jsp = "MMFItemForLocalPurchaseJsp";
		//jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		// javed 28 march
		title = "Title";
		map.put("lifeType", lifeType);



		return new ModelAndView(jsp, "map", map);
	}

	// javed khan

	public ModelAndView dailyIssueSummryReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		map = storesHandlerService.dailyIssueSummryReport();

		title = "Daily Issue Summry";
		jsp = "dailyIssueSummry";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}
	// Javed khan
	
	public ModelAndView dailyIssueSummryReportPatientWise(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		map = storesHandlerService.dailyIssueSummryReport();

		title = "Daily Issue Summry";
		jsp = "dailyIssueSummryPatientWise";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}
	
	public ModelAndView openingBalanceRegister(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		title = "Opening Balance Register";
		jsp = "openingBalanceRegister";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}
	
	public ModelAndView dailyIssueSummryReportDayWise(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		map = storesHandlerService.dailyIssueSummryReport();

		title = "Daily Issue Summry";
		jsp = "dailyIssueSummryDayWise";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("indexB", "map", map);
	}
	
	public ModelAndView generateDailyIssueSummryPatientWise(HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();

		int hospitalId = 0;
		int deptId = 0;
		String hospitalName = "";
		String deptName = "";
		String flag="";
		int departmentId=0;
		int divisionId=0;
		String optionRadio="";
		String query="";
		String reportName="";
		int zonalId=0;
		HttpSession session = request.getSession();
		requestParameters.put("deptId", ""+session.getAttribute("deptId"));
		try {
			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
				requestParameters.put("hospitalId", hospitalId);
				hospitalName = storesHandlerService.getHospitalName(hospitalId);
				requestParameters.put("hospitalName", hospitalName);
			}						
			
			Date fromDate = null;
			Date toDate = null;
			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				requestParameters.put("fromDate", fromDate);
				System.out.println("fromDate"+fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				requestParameters.put("toDate", toDate);
				System.out.println("toDate"+toDate);
			}
			
			if (request.getParameter("pharmacistId") != null
					&& !(request.getParameter("pharmacistId").equals("0"))) {
				query = query + "AND pph.issued_by = "+request.getParameter("pharmacistId")+" ";
			}
			if (request.getParameter("optionRadio") != null	&& !(request.getParameter("optionRadio").equals(""))) {
				optionRadio =(String) request.getParameter("optionRadio");
				 if(optionRadio.equals("z"))
				{
					 requestParameters.put("reportFor", "Zonal");
				if (request.getParameter("zonalId") != null	&& !(request.getParameter("zonalId").equals("0"))) {
					zonalId =Integer.parseInt(request.getParameter("zonalId"));
					query = query + "AND pph.zonal_id= "+ request.getParameter("zonalId") + " ";
					
					System.out.println("query"+query);
				}
				else
				{
					query = query + "AND pph.zonal_id is not null ";
				}
				
				}
			else if(optionRadio.equals("f"))
					{
				requestParameters.put("reportFor", "FAC");
						if (request.getParameter("divisionId") != null	&& !(request.getParameter("divisionId").equals("0"))) {
							divisionId =Integer.parseInt(request.getParameter("divisionId"));
							query = query + "AND pph.division_id= "+ request.getParameter("divisionId") + " AND pph.zonal_id is null ";
							
							System.out.println("query"+query);
						}
						else
						{
							query = query + "AND pph.division_id is not null AND pph.zonal_id is null";
						}
						
					}
			else if(optionRadio.equals("o"))
			{
				requestParameters.put("reportFor", "OPD");
			if (request.getParameter("departmentId") != null	&& !(request.getParameter("departmentId").equals("0"))) {
				departmentId =Integer.parseInt(request.getParameter("departmentId"));
				query = query + "AND pph.department_id= "+ request.getParameter("departmentId") + " AND pph.division_id is null AND pph.zonal_id is null ";
				
				System.out.println("query"+query);
			}
			else
			{
				query = query + "AND pph.department_id is not null AND pph.division_id is null AND pph.zonal_id is null";
			}
			
			}
			else 
			{
				requestParameters.put("reportFor", "All");
		
			}
			
			}
			else 
			{
				requestParameters.put("reportFor", "All");
		
			}
		
		
			String userHome = getServletContext().getRealPath("");	         
	        String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
	        requestParameters.put("path", imagePath);
			requestParameters.put("query", query);
			requestParameters.put("SUBREPORT_DIR", getServletContext().getRealPath("/reports/"));
		} catch (Exception e) {
			e.printStackTrace();
		}

		
			Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
			HMSUtil.generateReport("patient_daily_issue_summary", requestParameters,
					(Connection) connectionMap.get("con"), response,
					getServletContext());
			return new ModelAndView("indexB", "map", map);
		

	}
	
	public ModelAndView generateDailyIssueSummryDayWise(HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();

		int hospitalId = 0;
		int deptId = 0;
		String hospitalName = "";
		String deptName = "";
		String flag="";
		int departmentId=0;
		int divisionId=0;
		String optionRadio="";
		String query="";
		String reportName="";
		int zonalId=0;
		HttpSession session = request.getSession();
		requestParameters.put("deptId", ""+session.getAttribute("deptId"));
		try {
			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
				requestParameters.put("hospitalId", hospitalId);
				hospitalName = storesHandlerService.getHospitalName(hospitalId);
				requestParameters.put("hospitalName", hospitalName);
			}						
			
			Date fromDate = null;
			
			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				requestParameters.put("fromDate", fromDate);
				System.out.println("fromDate"+fromDate);
			}
			
			if (request.getParameter("divisionId") != null	&& !(request.getParameter("divisionId").equals("0"))) {
				divisionId =Integer.parseInt(request.getParameter("divisionId"));	
				requestParameters.put("divisionId", divisionId);
				
			}
		
		
			String userHome = getServletContext().getRealPath("");	         
	        String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
	        requestParameters.put("path", imagePath);
			requestParameters.put("query", query);
			requestParameters.put("SUBREPORT_DIR", getServletContext().getRealPath("/reports/"));
		} catch (Exception e) {
			e.printStackTrace();
		}

		
			Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
			HMSUtil.generateReport("daily_issue_summary_day_wise", requestParameters,
					(Connection) connectionMap.get("con"), response,
					getServletContext());
			return new ModelAndView("indexB", "map", map);
		

	}
	
	
		public ModelAndView generateDailyIssueSummry(HttpServletRequest request, HttpServletResponse response) {
			Map<String, Object> requestParameters = new HashMap<String, Object>();
	
			int hospitalId = 0;
			int deptId = 0;
			String hospitalName = "";
			String deptName = "";
			String flag="";
			int departmentId=0;
			int divisionId=0;
			String optionRadio="";
			String query1="";
			String reportName="";
			int zonalId=0;
			HttpSession session = request.getSession();
			requestParameters.put("deptId", ""+session.getAttribute("deptId"));
			try {
				if (session.getAttribute("hospitalId") != null) {
					hospitalId = (Integer) session.getAttribute("hospitalId");
					requestParameters.put("hospitalId", hospitalId);
					hospitalName = storesHandlerService.getHospitalName(hospitalId);
					requestParameters.put("hospitalName", hospitalName);
				}

				if (session.getAttribute("deptName") != null) {
					deptName = (String) session.getAttribute("deptName");
					requestParameters.put("DepartmentName", deptName);
				}
				Date fromDate = null;
				Date toDate = null;
				if (request.getParameter(FROM_DATE) != null
						&& !(request.getParameter(FROM_DATE).equals(""))) {
					fromDate = HMSUtil.convertStringTypeDateToDateType(request
							.getParameter(FROM_DATE));
					requestParameters.put("fromDate", fromDate);
				}
				if (request.getParameter(TO_DATE) != null
						&& !(request.getParameter(TO_DATE).equals(""))) {
					toDate = HMSUtil.convertStringTypeDateToDateType(request
							.getParameter(TO_DATE));
					requestParameters.put("toDate", toDate);
				}
				if (request.getParameter("optionRadio") != null	&& !(request.getParameter("optionRadio").equals(""))) {
					optionRadio =(String) request.getParameter("optionRadio");
				if(optionRadio.equals("f"))
				{
					if (request.getParameter("divisionId") != null	&& !(request.getParameter("divisionId").equals("0"))) {
						divisionId =Integer.parseInt(request.getParameter("divisionId"));
						query1 = query1 + "AND d.division_id= '"+ request.getParameter("divisionId") + "' ";
					}
					reportName="issue_register_fac";
				}
				else if(optionRadio.equals("o"))
				{
				if (request.getParameter("departmentId") != null	&& !(request.getParameter("departmentId").equals("0"))) {
					departmentId =Integer.parseInt(request.getParameter("departmentId"));
					query1 = query1 + "AND dep.department_id= '"+ request.getParameter("departmentId") + "' ";
				}
				reportName="issue_register_opd";
				}
				else if(optionRadio.equals("z"))
				{
				if (request.getParameter("zonalId") != null	&& !(request.getParameter("zonalId").equals("0"))) {
					zonalId =Integer.parseInt(request.getParameter("zonalId"));
					query1 = query1 + "AND z.zonal_id= '"+ request.getParameter("zonalId") + "' ";
				}
				reportName="issue_register_zonal";
				}
				else if(optionRadio.equals("a"))
				{
				reportName="issue_register_all";
				}
				}
				else{
					reportName="issue_register";
				}
				String userHome = getServletContext().getRealPath("");	         
		        String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
		        requestParameters.put("path", imagePath);
				requestParameters.put("query1", query1);
				requestParameters.put("SUBREPORT_DIR", getServletContext().getRealPath("/reports/"));
			} catch (Exception e) {
				e.printStackTrace();
			}

			
				Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
				HMSUtil.generateReport(reportName, requestParameters,
						(Connection) connectionMap.get("con"), response,
						getServletContext());
				return new ModelAndView("indexB", "map", map);
			

		}
	/*// Javed khan
	public ModelAndView generateDailyIssueSummry(HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Date fromDate = null;
		Date toDate = null;
		int hospitalId = 0;
		int deptId = 0;
		String hospitalName = "";
		String deptName = "";
		String flag="";
		HttpSession session = request.getSession();
		requestParameters.put("deptId", ""+session.getAttribute("deptId"));
		try {
			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
				requestParameters.put("hospitalId", hospitalId);
				hospitalName = storesHandlerService.getHospitalName(hospitalId);
				requestParameters.put("HOSP_NAME", hospitalName);
			}

			if (session.getAttribute("deptName") != null) {
				deptName = (String) session.getAttribute("deptName");
				requestParameters.put("DepartmentName", deptName);
			}
			if (request.getParameter(FROM_DATE) != null	&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request.getParameter(FROM_DATE));
				//requestParameters.put("FROM_DATE", fromDate);
				requestParameters.put("FROM_DATE", request.getParameter(FROM_DATE));
			}
			if (request.getParameter("flag") != null	&& !(request.getParameter("flag").equals(""))) {
				flag =(String) request.getParameter("flag");
			}
			if (request.getParameter(TO_DATE) != null && !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request.getParameter(TO_DATE));
				//requestParameters.put("TO_DATE", toDate);
				requestParameters.put("TO_DATE", request.getParameter(TO_DATE));
			}
			requestParameters.put("SUBREPORT_DIR", getServletContext().getRealPath("/reports/"));
		} catch (Exception e) {
			e.printStackTrace();
		}





		map.put("requestParameters",requestParameters);

		map.put("deptName", deptName);
		if(flag.equalsIgnoreCase("j")){
			Map<String, Object> recptRegister = storesHandlerService.getReceiptRegisterReport(requestParameters);
			map.put("recptRegister", recptRegister);
			String jsp="receiptRegisterReport.jsp";
			map.put("contentJsp", jsp);
		return new ModelAndView("indexB","map", map);
		}else{
			Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
			HMSUtil.generateReport("dailyissueList", requestParameters,
					(Connection) connectionMap.get("con"), response,
					getServletContext());
			return new ModelAndView("indexB", "map", map);
		//}

	}*/

	// javde khan for LoanOut search
	public ModelAndView searchIssueLoanout1(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		int issueId = 0;
		if (request.getParameter(RequestConstants.ISSUE_UNIT_ID) != null) {
			issueId = Integer.parseInt(request.getParameter(ISSUE_UNIT_ID));
		}
		Map map = new HashMap();
		Box box = HMSUtil.getBox(request);
		box.put("issueId", issueId);
		box.put("deptId", deptId);
		if (issueId != 0)
			map = storesHandlerService.searchIssueLoanout(box);
		jsp = "searchIssueLoanOut";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}


	
	public ModelAndView ExportExcelForPerformaB(HttpServletRequest request,
			HttpServletResponse response) {
        int hospitalId=0;
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		String pro ="";
		try {

			if (request.getParameter("proformaNo") != null
					&& !(request.getParameter("proformaNo").equals(""))) {
				pro = request.getParameter("proformaNo");

			}

			map.put("tender_id", new Integer(box.getInt(TENDER_NO)));
			map.put("group_id", new Integer(box
					.getInt(TENDER_SUPPLIER_GROUP_ID)));
		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		box.put("pro", pro);
		box.put("hospitalId",hospitalId);

			map = storesHandlerService.ExportExcelForPerformaB(box);
		if (map.get("flag") != null
				&& map.get("flag").toString().equalsIgnoreCase("NoData")) {
			map.put("message", "No Data Found!....");
		} else {

			try {

				response.setContentType("application/vnd.ms-excel");
				response.setHeader("Content-Disposition",
						"attachment; filename="
								+ map.get("download_path").toString());
				File f = new File(map.get("download_path").toString());
				InputStream in = new FileInputStream(f);
				ServletOutputStream outs = response.getOutputStream();
				int bit = 256;
				int i = 0;
				while ((bit) >= 0) {
					bit = in.read();
					outs.write(bit);
				}
				outs.flush();
				outs.close();
				in.close();
				if (f.exists())
					f.delete();
			} catch (IOException ioe) {
				ioe.printStackTrace();
			}
		}
		return null;
	}



	public ModelAndView showMedicineReturnJsp(HttpServletRequest request,HttpServletResponse response) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();

		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("deptId", deptId);

		map = storesHandlerService.showMedicineReturnJsp(dataMap);
		jsp = "medicineReturnJsp";
		jsp = jsp + ".jsp";
		title = "Defective Drugs Entry";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("indexB", "map", map);
	}






	public ModelAndView submitMedicineReturn(HttpServletRequest request,HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		StoreMedicineReturnM storeMedicineReturnM = new StoreMedicineReturnM();

		String grnNo = "";
		new Date();


		String date = "";
		String time = "";
		String returnNo="";
		Date returnDate = new Date();
		String serviceNo = "";
		String rank="";
		String patientName = "";
		String relation = "";
		String mo="";

		int departmentId = 0;
		int authorised_byId=0;
		int enterd_byId=0;
		int noOfRows = 0;
		int pageNo = 1;
		int entryId = 0;
		int deptId = 0;
		int hospitalId=0;
		int authorisedId=0;
		int enteredId=0;
		String toPlace = "";

		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		try {
			if (request.getParameter("pageNo") != null) {
				pageNo = Integer.parseInt(request.getParameter("pageNo"));

			}
			if (request.getParameter(NO_OF_ROWS) != null) {
				noOfRows = Integer.parseInt(request.getParameter(NO_OF_ROWS));
			}
			if (request.getParameter(ENTRY_ID) != null) {
				entryId = Integer.parseInt(request.getParameter(ENTRY_ID));

			}


			if (request.getParameter("returnNo") != null) {
				returnNo = (request.getParameter("returnNo"));
			}
			if (request.getParameter("serviceNo") != null) {
				serviceNo = request.getParameter("serviceNo");
			}
			if (request.getParameter("rank") != null) {
				rank = request.getParameter("rank");
			}
			if (request.getParameter("relation") != null) {
				relation = request.getParameter("relation");
			}
			if (request.getParameter("patientName") != null) {
				patientName = request.getParameter("patientName");
			}

			if (request.getParameter("mo") != null) {
				mo = request.getParameter("mo");
			}




		} catch (Exception e) {
			e.printStackTrace();
		}

		try {
			String te = "";
			String te1 = "";

			SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
			if (request.getParameter("returnDate") != null) {
				te = (String) (request.getParameter("returnDate"));

				String date4MySQL = formatterOut.format(formatterIn.parse(request.getParameter("returnDate")));
				returnDate = java.sql.Date.valueOf(date4MySQL);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");







			storeMedicineReturnM.setReturnNo(returnNo);
			storeMedicineReturnM.setReturnDate(returnDate);
			storeMedicineReturnM.setServiceNo(serviceNo);
			storeMedicineReturnM.setPatientName(patientName);
			storeMedicineReturnM.setRank(rank);
			storeMedicineReturnM.setMo(mo);
			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(deptId);
			storeMedicineReturnM.setDepartment(masDepartment);
			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			storeMedicineReturnM.setHospitalId(masHospital);
			storeMedicineReturnM.setStatus("y");






		int length = 0;
		List<StoreMedicineReturnT> StoreMedicineReturnTList = new ArrayList<StoreMedicineReturnT>();
		StoreDefectiveDrugT storeDefectiveDrugTObj = new StoreDefectiveDrugT();
		try {
			int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
					SR_NO);
			int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, ITEM_ID);
			int brandIdArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, BRAND_ID);
		/*	String remarks[] = JKTRequestUtils.getRequiredStringParameters(
					request, REMARKS);*/

			String manufacturDateArray[] = JKTRequestUtils
			.getRequiredStringParameters(request, MANUFACTURING_DATE);

			String expriyDateArray[] = JKTRequestUtils
					.getRequiredStringParameters(request, EXPIRY_DATE);

			String disposal[] = JKTRequestUtils.getRequiredStringParameters(
			request, "remarks");



			int manuArray[] = JKTRequestUtils.getRequiredIntParameters(request,
					MANUFACTURER_ID);

			/*String disposal[] = JKTRequestUtils.getRequiredStringParameters(
					request, DISPOSAL);
			String authyDeclared[] = JKTRequestUtils
					.getRequiredStringParameters(request, AUTHY_UNDER_DECLARED);*/
			String batchNoArr[] = JKTRequestUtils.getRequiredStringParameters(
					request, BATCH_ID);

			BigDecimal[] quantityReceivedArray = new BigDecimal[100];
			String mm[] = JKTRequestUtils.getRequiredStringParameters(request,
					QUANTITY_RECEIVED);
			int mmLen = mm.length;
			for (int i = 0; i < mmLen; i++) {
				BigDecimal val = new BigDecimal(mm[i]);

				quantityReceivedArray[i] = val;
			}



			for (int i = 0; i < srNo.length; i++) {
				if (itemIdArray[i] != 0) {
					StoreMedicineReturnT storeMedicineReturnT = new StoreMedicineReturnT();


				try{
					storeMedicineReturnT.setSrNo(srNo[i]);
				}catch(Exception e)
				{

				}

				try
				{
					MasStoreItem masItem = new MasStoreItem();
					masItem.setId(itemIdArray[i]);
					storeMedicineReturnT.setItem(masItem);
				}catch(Exception e)
					{

					}



					try
					{
						storeMedicineReturnT
								.setExpiryDate(HMSUtil
										.convertStringTypeDateToDateType(expriyDateArray[i]));
					}
					catch(Exception e)
					{

					}



						try
						{
						storeMedicineReturnT
								.setManufactureingDate(HMSUtil
										.convertStringTypeDateToDateType(manufacturDateArray[i]));
						}
						catch(Exception e)
						{

						}

					/*try
					{
						storeMedicineReturnT.setRemarks(disposal[i].toString());
					}catch(Exception e)
					{
						storeMedicineReturnT.setRemarks("");
					}*/







				try{
					storeMedicineReturnT.setBatchNo(batchNoArr[i]);


				}catch(Exception e)
					{

					}

				try
				{
					MasStoreBrand masStoreBrand = new MasStoreBrand();
					masStoreBrand.setId(brandIdArray[i]);
					storeMedicineReturnT.setBrand(masStoreBrand);

				}catch(Exception e)
				{
					storeMedicineReturnT.setBrand(null);
				}

				try
				{
					MasManufacturer masManufacturer = new MasManufacturer();
					masManufacturer.setId(manuArray[i]);
					if (manuArray[i] != 0) {
						storeMedicineReturnT
								.setManufacturedBy(masManufacturer);
					} else {
						storeMedicineReturnT.setManufacturedBy(null);
					}
				}catch(Exception e)
				{

				}
				try
				{
					storeMedicineReturnT
					.setReturnQty(quantityReceivedArray[i]);
				}catch(Exception e)
				{

				}

				StoreMedicineReturnTList.add(storeMedicineReturnT);
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		}


		infoMap.put("returnNo", returnNo);
		infoMap.put("entryId", entryId);
		infoMap.put("storeMedicineReturnM", storeMedicineReturnM);
		infoMap.put("StoreMedicineReturnTList", StoreMedicineReturnTList);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("deptId", deptId);

		boolean flag = false;
		try {
			flag = storesHandlerService.submitMedicineReturn(infoMap, dataMap);

		} catch (Exception e) {
			e.printStackTrace();
		}
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}

		String messageTOBeVisibleToTheUser = "";
		if(flag)
		{

			jsp = "medicineReturnJsp";
				pageNo++;
				messageTOBeVisibleToTheUser = "Medicine Entry has been done Successfully";



				map = storesHandlerService.showMedicineReturnJsp(dataMap);

		} else {
			messageTOBeVisibleToTheUser = "Medicine Entry has not been done Successfully";
		}

		jsp = "message";
		jsp += ".jsp";

		url = "/hms/hms/stores?method=showMedicineReturnJsp";

		map.put("pageNo", pageNo);
		map.put("contentJsp", jsp);
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("indexB", "map", map);
	}


	 public ModelAndView showIssueDepaAndUnit(HttpServletRequest request,HttpServletResponse response) {
	        // --- Retriving User Name,Hospital Id,Department Id from Session-----
	        String userName = "";
	        int deptId = 0;
	        int hospitalId = 0;
	        HttpSession session = request.getSession();
	        if (session.getAttribute("userName") != null)
	            userName = (String) session.getAttribute("userName");
	        if (session.getAttribute("hospitalId") != null)
	            hospitalId = Integer.parseInt(""
	                    + session.getAttribute("hospitalId"));
	        if (session.getAttribute("deptId") != null)
	            deptId = Integer.parseInt("" + session.getAttribute("deptId"));
	        // --------------------------------------------------------------------------------
	        Map map = new HashMap();
	        Map<String, Object> dataMap = new HashMap<String, Object>();
	        dataMap.put("deptId", deptId);
	        dataMap.put("hospitalId", hospitalId);
	        dataMap.put("userName", userName);
	        map = storesHandlerService.showIssueDispensaryJsp(dataMap);
	        String jsp = "departmentAndUnitIssue";
	        jsp = jsp + ".jsp";
	        map.put("contentJsp", jsp);
	        return new ModelAndView("indexB", "map", map);
	    }

	  public ModelAndView submitIssueForIndentToUnit(HttpServletRequest request,HttpServletResponse response)
	    {
	    	Map<String, Object> map = new HashMap<String, Object>();
	    	Map<String,Object> dataMap = new HashMap<String, Object>();
	    	HttpSession session = request.getSession();
	    	int hospitalId = (Integer)session.getAttribute(HOSPITAL_ID);
	    	int deptId = (Integer)session.getAttribute("deptId");
	    	int indentDtId =0;
	    	boolean b = false;
	    	String issuedBatchIdAndQty="";
	    	Set set = new  HashSet();
	    	List<StoreIssueT> childList=new ArrayList<StoreIssueT>();

	    	Map<String, Object> utilMap = new HashMap<String, Object>();
	    	Box box = HMSUtil.getBox(request);
	    	utilMap = (Map<String, Object>)HMSUtil.getCurrentDateAndTime();
	    	String date = (String)utilMap.get("currentDate");
	    	String time = (String) utilMap.get("currentTime");

	    	BigDecimal totalAmtAllItemsWithoutTax = new BigDecimal(0);
	    	BigDecimal totalSalesTaxAllItems = new BigDecimal(0);
	    	BigDecimal totalAmtAllItemsIncludingTax = new BigDecimal(0);
	    	BigDecimal totalPayableAmtAllItemsIncludingTax = new BigDecimal(0);
	    	BigDecimal amtInRs = new BigDecimal(0);
	    	BigDecimal roundAmtPs = new BigDecimal(0);
	    	BigDecimal zero = new BigDecimal("0");

	    	String[] array1 = request.getParameterValues("tt8");
	    	String[] totalQuantityIssued = request.getParameterValues("tt6");
	    	String[] totalQuantityRequested = request.getParameterValues(RequestConstants.QTY_IN_REQUEST);
	    	//String[] storeIndentTIdArray = request.getParameterValues("storeIndentTId");
	    	/* if (request.getParameter("indentDtId") != null) {
	    	indentDtId= Integer.parseInt(request.getParameter("indentDtId").trim());
	    	utilMap.put("indentDtId", indentDtId);
	    	}
	    	*/
	    	StoreIssueM issueM = new StoreIssueM();
	    	issueM.setIssueType("i");
	    	issueM.setIssueNo(request.getParameter(ISSUE_NO));
	    	issueM.setIssueDate(HMSUtil.convertStringTypeDateToDateType(request.getParameter(ISSUE_DATE)));

	    	MasDepartment department = new MasDepartment();
	    	department.setId(deptId);
	    	issueM.setDepartment(department);

	    	MasUnit department2 = new MasUnit();
	    	department2.setId(Integer.parseInt(request.getParameter(DEPARTMENT_ID_TEMP)));
	    	issueM.setOtafu(department2);

	    	/*StoreInternalIndentM internalIndentM = new StoreInternalIndentM();
	    	internalIndentM.setId(Integer.parseInt(""+request.getParameter(REQUEST_NO)));
	    	issueM.setRequestNo(internalIndentM);*/
	    	try{
	    	//issueM.setRequestDate(HMSUtil.dateFormatterddmmyy((String)request.getParameter(REQUEST_DATE)));
	    		issueM.setRequestDate(HMSUtil.convertStringTypeDateToDateType((String)request.getParameter(REQUEST_DATE)));
	    	}catch(Exception e){
	    		issueM.setRequestDate(null);
	    	}
	    	/*MasEmployee employee = new MasEmployee();
	    	employee.setId(Integer.parseInt(request.getParameter(REQUEST_BY)));
	    	issueM.setRequestBy(employee);

	    	MasEmployee employee2 = new MasEmployee();
	    	employee2.setId(Integer.parseInt(request.getParameter(APPROVED_BY)));
	    	issueM.setApprovedBy(employee2);*/

	    	MasEmployee employee3 = new MasEmployee();
	    	employee3.setId(Integer.parseInt(request.getParameter(ISSUED_BY)));
	    	issueM.setIssuedBy(employee3);
	    	issueM.setStatus("o");

	    	MasHospital hospital = new MasHospital();
	    	hospital.setId(hospitalId);
	    	issueM.setHospital(hospital);

	    	issueM.setDocNo(request.getParameter(REQUEST_NO));
	    	issueM.setLastChgBy(userName);
	    	issueM.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(date));
	    	issueM.setLastChgTime(time);
	    	utilMap.put("issueM", issueM);
	    	int k=1;
	    	int  totalQtyIssued = 0;
	    	//for(int i=0;i<array1.length;i++) {
	    	for(int i=0;i<array1.length;i++) {
	    	int issuedQty=0;
	    	int batchId=0;
	    	int brandId=0;
	    	BigDecimal totalQtyRequest=null;
	    	if(!array1[i].trim().equals("blank")) {
	    	if(!totalQuantityIssued[i].equals("")){
	    	totalQtyIssued =Integer.parseInt(totalQuantityIssued[i]);
	    	}
	    	/*if(!totalQuantityRequested[i].equals(""))
	    	{
	    	totalQtyRequest=new BigDecimal(totalQuantityRequested[i]);
	    	}*/
	    	if(!(request.getParameter(RequestConstants.QTY_IN_REQUEST+(i+1))).equals(""))
	    	{
	    	totalQtyRequest=new BigDecimal(request.getParameter(RequestConstants.QTY_IN_REQUEST+(i+1)));
	    	}


	    	if (request.getParameter(RequestConstants.QTY_ISSUED+k) != null && !request.getParameter(RequestConstants.QTY_ISSUED+k).equals("")) {
	    	issuedQty= Integer.parseInt(request.getParameter(RequestConstants.QTY_ISSUED+k).trim());
	    	}
	    	Integer storeIndentTId = 0;

	    	String item[]=request.getParameterValues(RequestConstants.ITEM_ID);
	    	String brand[]=request.getParameterValues("brandId");
	    	String []subArray1 = array1[i].split(",");
	    	MasStoreItem masStoreItem = new MasStoreItem();
	    	//masStoreItem.setId(Integer.parseInt(item[i]));
	        masStoreItem.setId(Integer.parseInt(request.getParameter(RequestConstants.ITEM_ID+(i+1))));
	    	MasStoreItem isstedItem = new MasStoreItem();
	    	//isstedItem.setId(Integer.parseInt(item[i]));
	    	isstedItem.setId(Integer.parseInt(request.getParameter(RequestConstants.ITEM_ID+(i+1))));
	    	if (request.getParameter(RequestConstants.BATCH_ID+i) != null) {
	    	batchId= Integer.parseInt(request.getParameter(RequestConstants.BATCH_ID+i).trim());
	    	}
	    	/*if (request.getParameter(RequestConstants.BRAND_ID+i) != null) {
	    	brandId= Integer.parseInt(request.getParameter(RequestConstants.BRAND_ID+i).trim());
	    	}*/

	    	/*brandId=Integer.parseInt(brand[i]);
	    	*/

	    	brandId=Integer.parseInt(request.getParameter("brandId"+(i+1)));

	    	issuedBatchIdAndQty=issuedBatchIdAndQty+"#"+batchId+"/"+issuedQty;
	    	for(int j=0;j<subArray1.length;j++) {
	    	String subArray2[] = subArray1[j].split("@");
	    	String qty = subArray2[0].trim();
	    	String batch = subArray2[1].trim();
	    	String expiryDate=subArray2[2].trim();

	    	int batchStockId = Integer.parseInt(subArray2[3].trim());
	    	String cost=subArray2[4].trim();

	    	StoreIssueT child = new StoreIssueT();
	    	child.setBatchNo(batch);
	    	child.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expiryDate));
	    	child.setQtyIssued(new BigDecimal(qty));
	    	child.setQtyRequest(totalQtyRequest);
	    	StoreItemBatchStock batchStock = new StoreItemBatchStock();
	    	batchStock.setId(batchStockId);
	    	child.setBatchStock(batchStock);
	        MasStoreBrand masBrand = new MasStoreBrand();
	    	masBrand.setId(brandId);
	    	child.setBrand(masBrand);

	    	//child.setIssueM(issueM);
	    	child.setItem(masStoreItem);
	    	child.setItemIssued(isstedItem);
	    	if(cost == null && !cost.equals("")){
	   	    child.setCostPrice(new BigDecimal(cost));
	    	}
//	    	    child.setRemarks(request.getParameter(RequestConstants.REMARKS_TEMP));
	    	child.setSrNo(Integer.parseInt(request.getParameter("SRNo")));
	    	child.setIssued("y");
	    	//child.setSalesTaxAmt(new BigDecimal(salesTax));
	    	//child.setAmtIncludingSalesTax(new BigDecimal(amtIncludingSalesTax));
//	    	    set.add(child);
	    	childList.add(child);
	    	}
	    	}
	    	totalQtyIssued = totalQtyIssued+issuedQty;


	    	k = k+1;
	    	}
	    	utilMap.put("issuedBatchIdAndQty", issuedBatchIdAndQty);
	    	utilMap.put("totalQtyIssued", totalQtyIssued);
	    	utilMap.put("deptId", deptId);
	    	utilMap.put("childList", childList);
//	    	    issueM.setStoreIssueTs(set);

	    	map = storesHandlerService.insertIssueForIndentToUnit(utilMap, box);
	    	String msg = "";
	    	if(map.get("b")!=null)
	    	{
	    	b = (Boolean)map.get("b");
	    	}
	    	if(b){
	    	msg = "Indent Has Been Issued Successfully.";
	    	}else{
	    	msg = "Indent Has Not Been Issued Successfully.";
	    	}
	    	/*map = storesHandlerService.showIssueDispensaryJsp(dataMap);
	    	jsp = RequestConstants.ISSUED_TO_DISPENSARY_JSP;*/
	    	String jsp = STORES_ISSUE_MESSAGE_JSP;
	    	String messageTOBeVisibleToTheUser = "Issued Successfully  ! Do you want to print?";
	    	map.put("messageTOBeVisibleToTheUser",
	    	messageTOBeVisibleToTheUser);
	    	int issueId=0;
	    	if (map.get("issueId") != null)
	    	issueId = Integer.parseInt("" + map.get("issueId"));
	    	jsp+= ".jsp" ;
	    	String title = "Invoice";
	    	map.put("url", "stores?method=showIssueDispWithoutBarCodeJsp");
	    	map.put("issueId", issueId);
	    	map.put("msg", msg);
	    	map.put("contentJsp", jsp);
	    	map.put("title", title);
	    	map.put("issueType", "DispToUnit");
	    	return new ModelAndView("index", "map", map);
	    	}


	  // add javed for print issue to units from dispensary
	  public ModelAndView printIssueDispToUnits(HttpServletRequest request,
				HttpServletResponse response) throws JRException {
			int issue_m_id = 0;
			Map parameters = new HashMap();
			try {
				if (request.getParameter(ISSUE_ID) != null
						&& !(request.getParameter(ISSUE_ID).equals(""))) {
					issue_m_id = Integer.parseInt(request.getParameter(ISSUE_ID));
				}
				HttpSession session= request.getSession();
				int hospitalId = (Integer)session.getAttribute(HOSPITAL_ID);

				parameters = storesHandlerService.printIssueDispToUnits(issue_m_id);
				parameters.put("issueId", issue_m_id);
				parameters.put("hospitalId", hospitalId);
				byte[] bytes = null;
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("issueDispToUnits"), parameters,
						(Connection) parameters.get("conn"));

				response.setHeader("Content-Disposition", "attachment; filename="
						+ "issueDispToUnits" + ".pdf");
				response.setContentLength(bytes.length);
				ServletOutputStream ouputStream;

				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

			return new ModelAndView("indexB", "map", map);
		}
	  
	// add  for print issue to First Aid from dispensary
		  public ModelAndView printIssueDispToFirstAid(HttpServletRequest request,
					HttpServletResponse response) throws JRException {
				int issue_m_id = 0;
				Map parameters = new HashMap();
				try {
					if (request.getParameter(ISSUE_ID) != null
							&& !(request.getParameter(ISSUE_ID).equals(""))) {
						issue_m_id = Integer.parseInt(request.getParameter(ISSUE_ID));
					}
					HttpSession session= request.getSession();
					int hospitalId = (Integer)session.getAttribute(HOSPITAL_ID);

					parameters = storesHandlerService.printIssueDispToUnits(issue_m_id);
					parameters.put("issueId", issue_m_id);
					parameters.put("hospitalId", hospitalId);
					byte[] bytes = null;
					bytes = JasperRunManager.runReportToPdf(
							getCompiledReport("issueDispToFirstAid"), parameters,
							(Connection) parameters.get("conn"));

					response.setHeader("Content-Disposition", "attachment; filename="
							+ "issueDispToFirstAid" + ".pdf");
					response.setContentLength(bytes.length);
					ServletOutputStream ouputStream;

					ouputStream = response.getOutputStream();
					ouputStream.write(bytes, 0, bytes.length);
					ouputStream.flush();
					ouputStream.close();
				} catch (IOException e) {
					e.printStackTrace();
				}

				return new ModelAndView("indexB", "map", map);
			}

	  // add javed for print Percentage fullfillment of Indent

	  public ModelAndView fullfillmentOfIndent(
				HttpServletRequest request, HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			title = "Percentage fullfillment Of Indent";
			jsp = "fulfillmentIndent";
			jsp = jsp + ".jsp";
			map.put("contentJsp", jsp);
			map.put("title", title);

			return new ModelAndView("indexB", "map", map);
		}


	  // add javed for print Percentage fullfillment of Indent

	  public ModelAndView generatefullfillmentOfIndent(HttpServletRequest request, HttpServletResponse response) {
			Map<String, Object> requestParameters = new HashMap<String, Object>();
			Date fromDate = null;
			Date toDate = null;
			int hospitalId = 0;
			int deptId = 0;
			String hospitalName = "";
			String deptName = "";
			String flag="";
			HttpSession session = request.getSession();
			requestParameters.put("DEPART", session.getAttribute("deptId"));
			try {
				if (session.getAttribute("hospitalId") != null) {
					hospitalId = (Integer) session.getAttribute("hospitalId");
					hospitalName = storesHandlerService.getHospitalName(hospitalId);
					requestParameters.put("HOSP_NAME", hospitalName);
					requestParameters.put("hospitalId", hospitalId);
				}

				if (session.getAttribute("deptName") != null) {
					deptName = (String) session.getAttribute("deptName");
					requestParameters.put("DepartmentName", deptName);
				}
				if (request.getParameter(FROM_DATE) != null	&& !(request.getParameter(FROM_DATE).equals(""))) {
					fromDate = HMSUtil.convertStringTypeDateToDateType(request.getParameter(FROM_DATE));
					requestParameters.put("FROM_DATE", fromDate);
					requestParameters.put("fromDate", request.getParameter(FROM_DATE));
				}
				if (request.getParameter("flag") != null	&& !(request.getParameter("flag").equals(""))) {
					flag =(String) request.getParameter("flag");
				}
				if (request.getParameter(TO_DATE) != null && !(request.getParameter(TO_DATE).equals(""))) {
					toDate = HMSUtil.convertStringTypeDateToDateType(request.getParameter(TO_DATE));
					requestParameters.put("TO_DATE", toDate);
					requestParameters.put("toDate", request.getParameter(TO_DATE));
				}

			} catch (Exception e) {
				e.printStackTrace();
			}





			map.put("requestParameters",requestParameters);

			map.put("deptName", deptName);
			requestParameters.put("SUBREPORT_DIR", getServletContext().getRealPath("/reports/"));
				Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
				HMSUtil.generateReport("PercentageFullfilOfindent", requestParameters,
						(Connection) connectionMap.get("con"), response,
						getServletContext());
				return new ModelAndView("indexB", "map", map);


		}

	//------Method written by Kiran

	  public ModelAndView showDepartmentAllocation(HttpServletRequest request, HttpServletResponse response) {

			Map<String, Object> map = new HashMap<String, Object>();
			Map<String, Object> dataMap = new HashMap<String, Object>();
			HttpSession session = request.getSession();
			String jsp = "";
			int hospitalId=0;
			int deptId=0;
			hospitalId=(Integer)session.getAttribute("hospitalId");
			deptId=(Integer)session.getAttribute("deptId");

			dataMap.put("hospitalId",hospitalId);
			dataMap.put("deptId",deptId);
			 map=storesHandlerService.getSMCAndDept(dataMap);
			jsp = "departmentAllocation.jsp";
			map.put("contentJsp", jsp);
			return new ModelAndView("index","map",map);
		}


	  public ModelAndView getDepartmentForDepartmentAllocation(HttpServletRequest request, HttpServletResponse response)
	  {

			Map<String, Object> map = new HashMap<String, Object>();
			Map<String, Object> dataMap = new HashMap<String, Object>();
			HttpSession session = request.getSession();

			String jsp = "";
			int hospitalId=0;
			int deptId=0;
			if(request.getParameter("hospitalId")!=null)
			{
			hospitalId=Integer.parseInt(request.getParameter("hospitalId"));
			}


			dataMap.put("hospitalId",hospitalId);

			 map=storesHandlerService.getAssignedDepartmentt(dataMap);
			jsp = "departmentAllocationResponseJsp";

			return new ModelAndView("departmentAllocationResponseJsp","map",map);
		}


	  public ModelAndView AssignDepartmentForStoreFyDocument(HttpServletRequest request, HttpServletResponse response)
	  {

			Map<String, Object> map = new HashMap<String, Object>();
			Map<String, Object> dataMap = new HashMap<String, Object>();
			HttpSession session = request.getSession();
			String[] compIdArrayString ={"0"};
			String jsp = "";
			int hospitalId=0;
			int deptId=0;
			if(request.getParameter("hospitalId")!=null)
			{
			hospitalId=Integer.parseInt(request.getParameter("hospitalId"));
			}

			if(request.getParameterValues("assignDept")!=null)
			{
				compIdArrayString =(String[]) request.getParameterValues("assignDept");
			}

			dataMap.put("hospitalId",hospitalId);
			dataMap.put("compIdArrayString",compIdArrayString);

			boolean status=storesHandlerService.AssignDepartmentForStoreFyDocument(dataMap);
			 map=storesHandlerService.getSMCAndDept(dataMap);
				jsp = "departmentAllocation.jsp";
				map.put("contentJsp", jsp);

				return new ModelAndView("index","map",map);
		}
	  //  add by javed khan for Proforma B Approval

	  public ModelAndView showProformaApprovalJsp(HttpServletRequest request,
				HttpServletResponse response) {
		  HttpSession session = request.getSession();

			Map<String, Object> dataMap = new HashMap<String, Object>();
			String jsp = "";
			String title = "";
			String deptName=" ";
			int hospitalId=0;
			int deptId=0;
			if (session.getAttribute("deptName") != null) {
				deptName = (String) session.getAttribute("deptName");
				map.put("department", deptName);
			}
			hospitalId=(Integer)session.getAttribute("hospitalId");
			deptId=(Integer)session.getAttribute("deptId");

			dataMap.put("hospitalId",hospitalId);
			dataMap.put("deptId",deptId);

			map=storesHandlerService.showProformaBApproval(dataMap);
			jsp += "proformaBApproval";
			jsp += ".jsp";
			title = "Proforma B Approval";
			map.put("contentJsp", jsp);
			map.put("title", title);
			map.put("department", deptName);

			return new ModelAndView("index", "map", map);
		}


	  //add by javed khan for Proforma B Approval

	  public ModelAndView getPendingProformaForApproval(HttpServletRequest request,
				HttpServletResponse response) throws ParseException {
		  HttpSession session = request.getSession();
			int deptId = 0;
			int hospitalId = 0;
			int batchId = 0;
			int unitId=0;
			List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
			List objectList1 = new ArrayList();
			Map<String, Object> map = new HashMap<String, Object>();
			Map<String, Object> dataMap = new HashMap<String, Object>();
			if (session.getAttribute("deptId") != null)
				deptId = Integer.parseInt("" + session.getAttribute("deptId"));
			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");

			}
			if (request.getParameter("unit") != null &&  !request.getParameter("unit").equals("0")) {
				unitId =Integer.parseInt(("" + (request.getParameter("unit"))));
			}

			dataMap.put("deptId", deptId);
			dataMap.put("unitId", unitId);
			dataMap.put("hospitalId", hospitalId);
			try {
				map=storesHandlerService.getPendingProformaForApproval(dataMap);

			} catch (Exception e) {
				e.printStackTrace();
			}

			title = "Pending Proforma B For Approval";
			jsp = "ResponsePendingProformaForApproval";
			jsp = jsp + ".jsp";
			map.put("contentJsp", jsp);
			title = "Title";
			return new ModelAndView("indexB", "map", map);
		}

//add by javed khan for Proforma B Approval

	  public ModelAndView proformaBApproved(HttpServletRequest request,
				HttpServletResponse response) throws ParseException {
		  HttpSession session = request.getSession();
			int deptId = 0;
			int hospitalId = 0;
			int batchId = 0;
			int unitId=0;
			int performaId=0;
			String approval="";
			String remarks="";
			List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
			List objectList1 = new ArrayList();
			Map<String, Object> map = new HashMap<String, Object>();
			Map<String, Object> dataMap = new HashMap<String, Object>();
			if (session.getAttribute("deptId") != null)
				deptId = Integer.parseInt("" + session.getAttribute("deptId"));
			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");

			}
			if (request.getParameter("hId") != null &&  !request.getParameter("hId").equals("0")) {
				unitId =Integer.parseInt(("" + (request.getParameter("hId"))));
			}
			if (request.getParameter("pId") != null &&  !request.getParameter("pId").equals("")) {
				performaId =Integer.parseInt(("" + (request.getParameter("pId"))));
			}
			if (request.getParameter("approval") != null &&  !request.getParameter("approval").equals("")) {
				approval = request.getParameter("approval");
			}
			if (request.getParameter("remarks") != null &&  !request.getParameter("remarks").equals("")) {
				remarks =request.getParameter("remarks");
			}

			dataMap.put("deptId", deptId);
			dataMap.put("unitId", unitId);
			dataMap.put("hospitalId", hospitalId);
			dataMap.put("performaId", performaId);
			dataMap.put("approval", approval);
			dataMap.put("remarks", remarks);

			try {
				map=storesHandlerService.proformaBApproved(dataMap);
				String url = "/hms/hms/stores?method=showProformaApprovalJsp";
				map.put("url", url);
				if(approval.equals("y")){
					map.put("message","Proforma B Approval saved successfully.");
				}else{
					map.put("message","Proforma B Approval saved successfully.");
				}

			} catch (Exception e) {
				e.printStackTrace();
				map.put("message","Proforma B Approval not saved.");

			}

			title = "Pending Proforma B For Approval";
			jsp = "message";
			jsp = jsp + ".jsp";
			map.put("contentJsp", jsp);
			title = "Title";
			return new ModelAndView("indexB", "map", map);
		}

	//add by javed khan for Proforma B Approval

	  public ModelAndView showProformaBeforApproval(HttpServletRequest request,
				HttpServletResponse response)
		{

					Map<String, Object> map = new HashMap<String, Object>();
			synchronized (this) {
				Box box = HMSUtil.getBox(request);
				HttpSession session = request.getSession();
				int deptId = Integer.valueOf(session.getAttribute("deptId").toString());

				int hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId")); // add by javed khan
				int storeDepartmentId = 0;
				int profromaId = 0;
				/*if (request.getParameter("storeDepartmentId") != null
						&& !request.getParameter("storeDepartmentId").equals("")) {
					storeDepartmentId = Integer.parseInt(request
							.getParameter("storeDepartmentId"));
				}*/

				if (request.getParameter("pId") != null
						&& !request.getParameter("pId").equals("")) {
					profromaId = Integer.parseInt(request
							.getParameter("pId"));
				}


				box.put("deptId", deptId);
				box.put("hospitalId", hospitalId); // add by javed khan
				box.put("profromaId", profromaId);

				map = storesHandlerService.showProformaBeforApproval(box);
				//jsp = DEPARTMENT_INDENT_ADDITION_JSP;
				jsp = "showProformaBeforApproval";
				title = "show Proforma_B Befor Approval";
				map.put("contentJsp", jsp);
				map.put("title", title);
				map.put("internalIndentId", box.get("internalIndentId"));
				map.put("storeDepartmentId", storeDepartmentId);
			}
			return new ModelAndView(jsp, "map", map);

		}


	  public ModelAndView newSearchIndent(HttpServletRequest request,
				HttpServletResponse response) {
			// --------------- Retriving User Name,Hospital Id,Department Id from
			// Session-----
			String userName = "";
			int deptId = 0;
			int hospitalId = 0;
			int indentId = 0;

			HttpSession session = request.getSession();
			if (session.getAttribute("userName") != null)
				userName = (String) session.getAttribute("userName");
			if (session.getAttribute("hospitalId") != null)
				hospitalId = Integer.parseInt(""
						+ session.getAttribute("hospitalId"));
			if (session.getAttribute("deptId") != null)
				deptId = Integer.parseInt("" + session.getAttribute("deptId"));
			// --------------------------------------------------------------------------------
			String fromDate = "";
			String toDate = "";
			String indentNo = "";

			int mmfYear = 0;
			Map<String, Object> map = new HashMap<String, Object>();
			Map<String, Object> tempMap = new HashMap<String, Object>();
			Map<String, Object> searchFieldMap = new HashMap<String, Object>();
			List<StoreIndentM> searchIndentList = new ArrayList<StoreIndentM>();
			try {
				/*if (request.getParameter(MMF_FOR_THE_YEAR) != null) {
					mmfYear = Integer.parseInt(request
							.getParameter(MMF_FOR_THE_YEAR));

				}*/
				if (request.getParameter(RequestConstants.INDENT_NO_FOR_SEARCH) != null) {
					indentId = Integer.parseInt(request
							.getParameter(RequestConstants.INDENT_NO_FOR_SEARCH));
					if (request.getParameter(FROM_DATE) != null  &&  !request.getParameter(FROM_DATE).equals("")) {
						 fromDate = request.getParameter(FROM_DATE);
						 searchFieldMap.put("fromDate", fromDate);
						}
						if (request.getParameter(TO_DATE) != null && !request.getParameter(TO_DATE).equals("")) {
							toDate = request.getParameter(TO_DATE);
							searchFieldMap.put("toDate", toDate);
						}


				}
			} catch (Exception e) {
				e.printStackTrace();
			}

			//searchFieldMap.put("mmfYear", mmfYear);
			searchFieldMap.put("indentId", indentId);
			searchFieldMap.put("hospitalId", hospitalId);
			searchFieldMap.put("deptId", deptId);
			searchFieldMap.put("userName", userName);
			try {

				// tempMap = storesHandlerService.showIndent();
				//tempMap = storesHandlerService.showIndent(deptId);
				//if (tempMap.get("searchIndentList") != null)
					//searchIndentList = (List) tempMap.get("searchIndentList");
				map = storesHandlerService.newSearchIndent(searchFieldMap);
				//map.put("searchIndentList", searchIndentList);
			} catch (Exception e) {
				e.printStackTrace();
			}
			//jsp = SEARCH_INDENT_JSP;
			jsp = "newSearchIndent";
			jsp = jsp + ".jsp";
			title = "Indent";
			map.put("contentJsp", jsp);
			map.put("title", title);

			return new ModelAndView("indexB", "map", map);
		}


	  // add by javed khan

	  public ModelAndView getDepartmentExistingIndentData(HttpServletRequest request,
				HttpServletResponse response)
		{
		  HttpSession session = request.getSession();
			int hospitalId=0;
			Box box = HMSUtil.getBox(request);
			Map<String, Object> map = new HashMap<String, Object>();
			if (session.getAttribute("hospitalId") != null)
			{
				hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));
				box.put("hospitalId", hospitalId);
			}

			if (request.getParameter("pvmsNo") != null) {
				String pvmsNo = request.getParameter("pvmsNo");
				box.put("pvmsNo", pvmsNo);
			}
			int deptId = 0;
			if (session.getAttribute("deptId") != null) {
				deptId = (Integer) session.getAttribute("deptId");
				box.put("deptId", deptId);
			}

			map = storesHandlerService.getDepartmentExistingIndentData(box);

			if (map.get("storeInternalIndentMList") == null
					|| map.get("storeInternalIndentMList").equals("")) {
				map = storesHandlerService.showDepartmentIndent(deptId,hospitalId);
			} else {
				List<StoreInternalIndentM> indentM = (List) map
						.get("storeInternalIndentMList");
				if (indentM.size() == 0) {
					map = storesHandlerService.showDepartmentIndent(deptId,hospitalId);
				}
			}

			jsp = STORE_DEPARTMENT_INDENT_JSP;
			title = "Department Indent";

			jsp = jsp + ".jsp";
	        map.put("deptId", deptId);
			map.put("contentJsp", jsp);
			map.put("title", title);
			return new ModelAndView("indexB", "map", map);
		}


	  // add by javed khan
	  public ModelAndView doAddInternalIndentsubmit(HttpServletRequest request,
				HttpServletResponse response) {

           HttpSession session = request.getSession();
	    	Map<String, Object> map = new HashMap<String, Object>();
	    	int indentId=0;
			synchronized (this) {


				int deptId = Integer.valueOf(session.getAttribute("deptId").toString());
				int hospitalId = Integer.valueOf(session.getAttribute("hospitalId").toString()); // javed khan
				Box box = HMSUtil.getBox(request);
				box.put("deptId", deptId);
				box.put("hospitalId", hospitalId);
				int storeDepartmentId = 0;
				if (request.getParameter("storeDepartmentId") != null && !request.getParameter("storeDepartmentId").equals("")) {
					storeDepartmentId = Integer.parseInt(request.getParameter("storeDepartmentId"));
				}
				if (request.getParameter("internalIndentId") != null && !request.getParameter("internalIndentId").equals("")) {

					 indentId = Integer.parseInt(request.getParameter("internalIndentId"));

					}
				String DemandNo=box.get(DEMAND_NO);
				 box.put("indentId", indentId);
				map = storesHandlerService.doAddInternalIndentsubmit(box);
				//map.putAll(storesHandlerService.showAddDepartmentIndentJsp(box));

				String printUrl = "/hms/hms/stores?method=printDispensaryToStoreJsp&demandNo="+DemandNo;
				String url ="/hms/hms/stores?method=showSearchDepartmentIndent";
				map.put("printUrl", printUrl);
				map.put("url", url);
				//jsp = DEPARTMENT_INDENT_ADDITION_JSP;
				jsp="dispensaryIndentMessage.jsp";
				//jsp="departmentIndent.jsp";
				map.put("hiddenFieldForRecords", box.get("hiddenFieldForRecords"));
				title = "Add Department Indent";
				map.put("storeDepartmentId", storeDepartmentId);
				map.put("contentJsp", jsp);
				map.put("title", title);
			}
			// map.put("internalIndentId", box.get("internalIndentId"));

			return new ModelAndView("indexB", "map", map);

		}

	  // indent search in dispensary

		public ModelAndView getDepartmentIndentSearchData(HttpServletRequest request,
				HttpServletResponse response)
		{
			HttpSession session = request.getSession();
			int hospitalId=0;
			Box box = HMSUtil.getBox(request);
			Map<String, Object> map = new HashMap<String, Object>();
			String fromDate="";
			String toDate="";
			if (session.getAttribute("hospitalId") != null)
			{
				hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));
				box.put("hospitalId", hospitalId);
			}

			if (request.getParameter("pvmsNo") != null) {
				String pvmsNo = request.getParameter("pvmsNo");
				box.put("pvmsNo", pvmsNo);
			}
			if (request.getParameter(FROM_DATE) != null  &&  !request.getParameter(FROM_DATE).equals("")) {
			 fromDate = request.getParameter(FROM_DATE);
				box.put("fromDate", fromDate);
			}
			if (request.getParameter(TO_DATE) != null && !request.getParameter(TO_DATE).equals("")) {
				toDate = request.getParameter(TO_DATE);
				box.put("toDate", toDate);
			}
			int deptId = 0;
			if (session.getAttribute("deptId") != null) {
				deptId = (Integer) session.getAttribute("deptId");
				box.put("deptId", deptId);
			}

			/*map = storesHandlerService.getDepartmentIndentData(box);

			if (map.get("storeInternalIndentMList") == null
					|| map.get("storeInternalIndentMList").equals("")) {
				map = storesHandlerService.showDepartmentIndent(deptId,hospitalId);
			} else {
				List<StoreInternalIndentM> indentM = (List) map
						.get("storeInternalIndentMList");
				if (indentM.size() == 0) {
					map = storesHandlerService.showDepartmentIndent(deptId,hospitalId);
				}
			}*/

			map = storesHandlerService.getDepartmentIndentSearchData(box);

			//jsp = STORE_DEPARTMENT_INDENT_JSP;
			jsp = "searchIndentDispensary";
			title = "Department Indent";

			jsp = jsp + ".jsp";
	        map.put("deptId", deptId);
			map.put("contentJsp", jsp);
			map.put("title", title);
			return new ModelAndView("indexB", "map", map);
		}


		public ModelAndView doAddIndentsubmit(HttpServletRequest request,
					HttpServletResponse response) {


		    	Map<String, Object> map = new HashMap<String, Object>();
		    	int indentId=0;
				synchronized (this) {


					int deptId = Integer.valueOf(session.getAttribute("deptId").toString());
					int hospitalId = Integer.valueOf(session.getAttribute("hospitalId").toString()); // javed khan
					Box box = HMSUtil.getBox(request);
					box.put("deptId", deptId);
					box.put("hospitalId", hospitalId);
					int storeDepartmentId = 0;
					if (request.getParameter("storeDepartmentId") != null
							&& !request.getParameter("storeDepartmentId").equals("")) {
						storeDepartmentId = Integer.parseInt(request
								.getParameter("storeDepartmentId"));
					}
					if (request.getParameter("indentId") != null 	&& !request.getParameter("indentId").equals("")) {

						 indentId = Integer.parseInt(request.getParameter("indentId"));

						}
					String DemandNo=box.get(DEMAND_NO);
					 box.put("indentId", indentId);
					map = storesHandlerService.doAddIndentsubmit(box);
					//map.putAll(storesHandlerService.showAddDepartmentIndentJsp(box));

					String printUrl = "/hms/hms/stores?method=printDispensaryToStoreJsp&demandNo="+DemandNo;
					String url ="/hms/hms/stores?method=showSearchDepartmentIndent";
					map.put("printUrl", printUrl);
					map.put("url", url);
					//jsp = DEPARTMENT_INDENT_ADDITION_JSP;
					jsp="dispensaryIndentMessage.jsp";
					//jsp="departmentIndent.jsp";
					map.put("hiddenFieldForRecords", box.get("hiddenFieldForRecords"));
					title = "Add Department Indent";
					map.put("storeDepartmentId", storeDepartmentId);
					map.put("contentJsp", jsp);
					map.put("title", title);
				}
				// map.put("internalIndentId", box.get("internalIndentId"));

				return new ModelAndView("indexB", "map", map);

			}


		public ModelAndView showLPGrnForProformaJsp(HttpServletRequest request,HttpServletResponse response) {
			String userName = "";
			int deptId = 0;
			int hospitalId = 0;
			int proformaId=0;
			String fileName = null;
			String hin_no = "";
			String fileExtension = null;
			MultipartFormDataRequest mrequest = null;
			if(request.getParameter("proformaNo")!=null){
			proformaId=Integer.parseInt(request.getParameter("proformaNo"));
			}
			HttpSession session = request.getSession();
			if (session.getAttribute("userName") != null)
				userName = (String) session.getAttribute("userName");
			if (session.getAttribute("hospitalId") != null)
				hospitalId = Integer.parseInt(""
						+ session.getAttribute("hospitalId"));
			if (session.getAttribute("deptId") != null)
				deptId = Integer.parseInt("" + session.getAttribute("deptId"));

			Users user = (Users) session.getAttribute("users");
			Box box = HMSUtil.getBox(request);


// add by javed khan for enerable date on 01/10/2013
			String enterGrnDate="";
			String enterReceivedDate="";
			if(!box.get("grnDate").equals("") && box.get("grnDate") != null){
				enterGrnDate=(String)box.get("grnDate");
			}
			if(!box.get("receivedDate").equals("") && box.get("receivedDate") != null){
				enterReceivedDate=(String)box.get("receivedDate");
			}

			Map<String, Object> map = new HashMap<String, Object>();
			Map<String, Object> dataMap = new HashMap<String, Object>();
			dataMap.put("deptId", deptId);
			dataMap.put("hospitalId", hospitalId);
			dataMap.put("userName", userName);
			dataMap.put("users", user);
			dataMap.put("proformaId",proformaId);
			Map<String, Object> newMap = commonMasterHandlerService.getUserButtonRights(dataMap);
			List<UserButtonRights> userRightsList = (List<UserButtonRights>) newMap.get("userRightsList");
			//map = storesHandlerService.showGrnJsp(box, dataMap);
			map = storesHandlerService.showGrnProJsp(box, dataMap);

			jsp = "crvAfterProforma";
			jsp = jsp + ".jsp";
			title = "GRN";
			map.put("userRightsList", userRightsList);
			map.put("contentJsp", jsp);
			map.put("title", title);
			String previousPage = "no";
			map.put("previousPage", previousPage);
			map.put("proformaId",proformaId);
			
			// add by javed khan for enerable date on 01/10/2013
			map.put("enterGrnDate", enterGrnDate);
			map.put("enterReceivedDate",enterReceivedDate);

			return new ModelAndView("indexB", "map", map);
		}
		// for adding crv After Proforma
		public ModelAndView submitCrvAftPro(HttpServletRequest request,
				HttpServletResponse response) {
			Box box = HMSUtil.getBox(request);
			Map<String, Object> dataMap = new HashMap<String, Object>();
			HttpSession session = request.getSession();
			box.put("deptId", session.getAttribute("deptId"));
			box.put("hospitalId", session.getAttribute("hospitalId"));
			box.put("userName", session.getAttribute("userName"));
			String msg = "";
			String printUrl = "";
			String url = "";
			String grnNo="";
			int hospitalId = 0;
			grnNo=request.getParameter("grnNo");
			hospitalId = (Integer) session.getAttribute("hospitalId");
			dataMap.put("deptId", session.getAttribute("deptId"));
			dataMap.put("hospitalId", session.getAttribute("hospitalId"));
			dataMap.put("userName", session.getAttribute("userName"));
			map = storesHandlerService.submitCrvAftProDeatail(box);
			url = "/hms/hms/stores?method=showLPGrnJsp";
			msg = map.get("messageTOBeVisibleToTheUser").toString();
			//map = storesHandlerService.showGrnJsp(box, dataMap);
			map.put("messageTOBeVisibleToTheUser", msg);

			if(map.get("supplierId")!=null){
				printUrl = "/hms/hms/stores?method=printGrn1&grnNo="+grnNo+"&deptId="+hospitalId;
			}else{
				printUrl = "/hms/hms/stores?method=printGrn&grnNo="+grnNo+"&deptId="+hospitalId;
			}
			map.put("contentJsp", jsp);
			map.put("grnNo", grnNo);
			map.put("printUrl", printUrl);
			map.put("url", url);
			// javed
			map.put("sup_id", box.getInt(SUPPLIER_ID));
			map.put("chkJsp", request.getParameter("checkJsp"));
			jsp = "pringCrvAftPro";
			jsp = jsp + ".jsp";
			title = "LoanIn";
			map.put("contentJsp", jsp);
			map.put("url",url);
			map.put("title", title);
			String previousPage = "no";
			map.put("previousPage", previousPage);
			return new ModelAndView("indexB", "map", map);
		}

		public void getStockQtyInAjax(HttpServletRequest request,
				HttpServletResponse response) {
			// --------------- Retriving User Name,Hospital Id,Department Id from
			// Session-----
			String userName = "";
			int deptId = 0;
			int hospitalId = 0;
			int batchId=0;
			int itemId=0;
			BigDecimal qty=new BigDecimal(0);
			List<StoreItemBatchStock> stockList = new ArrayList<StoreItemBatchStock>();
			HttpSession session = request.getSession();
			if (session.getAttribute("userName") != null)
				userName = (String) session.getAttribute("userName");
			if (session.getAttribute("hospitalId") != null)
				hospitalId = Integer.parseInt(""
						+ session.getAttribute("hospitalId"));
			if (session.getAttribute("deptId") != null)
				deptId = Integer.parseInt("" + session.getAttribute("deptId"));
			// --------------------------------------------------------------------------------
			int brandId = 0;
			String manufacturerName = "";
			List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
			Map<String, Object> dataMap = new HashMap<String, Object>();
			if (request.getParameter("batchId") != null) {
				batchId = Integer.parseInt("" + (request.getParameter("batchId")));
			}

			if (request.getParameter("itemId") != null) {
				itemId = Integer.parseInt("" + (request.getParameter("itemId")));
			}

			if (request.getParameter("qty") != null && !request.getParameter("qty").equals("")) {
				qty = new BigDecimal(request.getParameter("qty"));
			}
			dataMap.put("deptId", deptId);
			dataMap.put("userName", userName);
			dataMap.put("hospitalId", hospitalId);
			dataMap.put("batchId", batchId);
			dataMap.put("itemId", itemId);
			map = storesHandlerService.getStockQtyInAjax(dataMap);
			if (map.get("stockList") != null) {
				stockList = (List) map.get("stockList");
			}

			if(stockList.size()>0)
			{

			}


			StringBuffer sb = new StringBuffer();
			try {

				if(stockList.size()>0)
				{
					StoreItemBatchStock stock=(StoreItemBatchStock)stockList.get(0);
				sb.append("<item>");
				sb.append("<stock>" + stock.getClosingStock()+ "</stock>");
				sb.append("<qty>" + qty + "</qty>");
				sb.append("</item>");

				}
				response.setContentType("text/xml");
				response.setHeader("Cache-Control", "no-cache");
			} catch (Exception e) {
				e.printStackTrace();
			}
			try {
				response.getWriter().write(
						"<?xml version='1.0' encoding='ISO-8859-1'?>");
				response.getWriter().write("<items>");
				response.getWriter().write(sb.toString());
				response.getWriter().write("</items>");
			} catch (Exception e) {
				e.printStackTrace();
			}

			// return new ModelAndView(jsp, "map", map);
		}

		public void updateApprovedData(HttpServletRequest request,HttpServletResponse response) {
			Box box = HMSUtil.getBox(request);
			// --------------- Retriving User Name,Hospital Id,Department Id from
			// Session-----
			String userName = "";
			int deptId = 0;
			int hospitalId = 0;
			String proformaNo="";
			HttpSession session = request.getSession();
			if (session.getAttribute("userName") != null)
				userName = (String) session.getAttribute("userName");
			if (session.getAttribute("hospitalId") != null)
				hospitalId = Integer.parseInt(""
						+ session.getAttribute("hospitalId"));
			if (session.getAttribute("deptId") != null)
				deptId = Integer.parseInt("" + session.getAttribute("deptId"));
			// --------------------------------------------------------------------------------
			String itemNameField = "";
			Map<String, Object> dataMap = new HashMap<String, Object>();
			List<MasStoreItem> itemList=new ArrayList<MasStoreItem>();
			List brandList=new ArrayList();

			try {
				if(request.getParameter("proformaNo")!=null){
					proformaNo=request.getParameter("proformaNo");
				}
			} catch (Exception e) {
				e.printStackTrace();
			}

			dataMap.put("deptId", deptId);
			dataMap.put("userName", userName);
			dataMap.put("hospitalId", hospitalId);
			dataMap.put("proformaNo",proformaNo);

			map =  storesHandlerService.updateArrovalPro(dataMap);


			String mes="";
			if(map.get("mes")!=null){
				mes=map.get("mes").toString();
			}

			StringBuffer sb = new StringBuffer();
			for (int i=0;i<1;i++) {
				sb.append("<item>");
				sb.append("<id>" + mes + "</id>");
				sb.append("</item>");
			}
			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");
			try {
				response.getWriter().write(
						"<?xml version='1.0' encoding='ISO-8859-1'?>");
				response.getWriter().write("<items>");
				response.getWriter().write(sb.toString());
				response.getWriter().write("</items>");
			} catch (Exception e) {
				e.printStackTrace();
			}
			// return new ModelAndView(jsp, "map", map);
		}



		public ModelAndView showProformaApprovalAccountJsp(HttpServletRequest request,
				HttpServletResponse response) {
			HttpSession session = request.getSession();
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String jsp = "";
			String title = "";
			String deptName=" ";
			int hospitalId=0;
			int deptId=0;
			if (session.getAttribute("deptName") != null) {
				deptName = (String) session.getAttribute("deptName");
				map.put("department", deptName);
			}
			hospitalId=(Integer)session.getAttribute("hospitalId");
			deptId=(Integer)session.getAttribute("deptId");

			dataMap.put("hospitalId",hospitalId);
			dataMap.put("deptId",deptId);

			//map=storesHandlerService.showProformaBApproval(dataMap);
			map=storesHandlerService.showProformaBAccountApproval(dataMap);
			jsp += "proformaBApprovalAccount";
			jsp += ".jsp";
			title = "Proforma B Approval";
			map.put("contentJsp", jsp);
			map.put("title", title);
			map.put("department", deptName);

			return new ModelAndView("index", "map", map);
		}

		  public ModelAndView getPendingProformaForApprovalAccont(HttpServletRequest request,
					HttpServletResponse response) throws ParseException {
			  HttpSession session = request.getSession();
				int deptId = 0;
				int hospitalId = 0;
				int batchId = 0;
				int unitId=0;
				List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
				List objectList1 = new ArrayList();
				Map<String, Object> map = new HashMap<String, Object>();
				Map<String, Object> dataMap = new HashMap<String, Object>();
				if (session.getAttribute("deptId") != null)
					deptId = Integer.parseInt("" + session.getAttribute("deptId"));
				if (session.getAttribute("hospitalId") != null) {
					hospitalId = (Integer) session.getAttribute("hospitalId");

				}
				if (request.getParameter("unit") != null &&  !request.getParameter("unit").equals("0")) {
					unitId =Integer.parseInt(("" + (request.getParameter("unit"))));
				}

				dataMap.put("deptId", deptId);
				dataMap.put("unitId", unitId);
				dataMap.put("hospitalId", hospitalId);
				try {
					//map=storesHandlerService.getPendingProformaForApproval(dataMap);
					map=storesHandlerService.getPendingProformaForApprovalAccount(dataMap);

				} catch (Exception e) {
					e.printStackTrace();
				}

				title = "Pending Proforma B For Approval";
				jsp = "ResponsePendingProformaForApprovalAccount";
				jsp = jsp + ".jsp";
				map.put("contentJsp", jsp);
				title = "Title";
				return new ModelAndView("indexB", "map", map);
			}


		  public ModelAndView searchProformaBEntryTrack(HttpServletRequest request,HttpServletResponse response) {
				Map<String, Object> dataMap = new HashMap<String, Object>();
				Box box = HMSUtil.getBox(request);
				String fromDate = "";
				String toDate = "";
				String entryNo = "";
				int hospitalId = 0;
				int deptId=0;
				HttpSession session = request.getSession();
				if (session.getAttribute("userName") != null)
					userName = (String) session.getAttribute("userName");
				if (session.getAttribute("hospitalId") != null)
					hospitalId = Integer.parseInt(""
							+ session.getAttribute("hospitalId"));
				if (session.getAttribute("deptId") != null)
					deptId = Integer.parseInt("" + session.getAttribute("deptId"));
				Map<String, Object> map = new HashMap<String, Object>();
				Map<String, Object> tempMap = new HashMap<String, Object>();
				Map<String, Object> searchFieldMap = new HashMap<String, Object>();
				List<StoreProformaHeader> storeProformaList = new ArrayList<StoreProformaHeader>();
				List<StoreProformaHeader> storeProformaList1 = new ArrayList<StoreProformaHeader>();

				try {
					if (request.getParameter("fromDate") != null) {
						fromDate = request.getParameter("fromDate");

					}
					if (request.getParameter("toDate") != null) {
						toDate = request.getParameter("toDate");

					}
					if (request.getParameter(ENTRY_NO) != null) {
						entryNo = request.getParameter(ENTRY_NO);
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
				dataMap.put("fromDate", fromDate);
				dataMap.put("toDate", toDate);
				dataMap.put("entryNo", entryNo);
				dataMap.put("hospitalId", hospitalId);
				dataMap.put("hospitalId", hospitalId);
				dataMap.put("deptId", deptId);
				try {
					tempMap = storesHandlerService.showProformaBSearchJsp(dataMap);
					if (tempMap.get("storeProformaList") != null)
						storeProformaList = (List) tempMap.get("storeProformaList");
					map.put("storeProformaList", storeProformaList);
					if(tempMap.get("storeProformaList1")!=null){
						storeProformaList1=(List)tempMap.get("storeProformaList1");
					    map.put("storeProformaList1",storeProformaList1);
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
				jsp = "searchProformaNoTrack";
				jsp = jsp + ".jsp";
				title = "DEFECTIVE DRUGS";
				map.put("contentJsp", jsp);
				map.put("title", title);

				return new ModelAndView("indexB", "map", map);
			}
		  
		  
		  public void viewHelp(HttpServletRequest request,HttpServletResponse response) {

				Box box = HMSUtil.getBox(request);
				String filename = null;
				String fileExtension = null;
				MultipartFormDataRequest mrequest = null;

				if (MultipartFormDataRequest.isMultipartFormData(request)) {
					try {
						mrequest = new MultipartFormDataRequest(request);
					} catch (UploadException e) {
						e.printStackTrace();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}

				Map<String, Object> uploadFileMap = new HashMap<String, Object>();

			//	String uploadURL = getServletContext().getRealPath("/upload/");
				String userHome = getServletContext().getRealPath("");
				String fileSeparator = System.getProperty("file.separator");
				String uploadURL = userHome
						+ fileSeparator
						+ "help"
						+ fileSeparator;
						
				
				// String whiteList = "*.zip";
				// String whiteList = "*.jpg";

				// Long fileSizeLimit = 2097152l;

				/*
				 * List fileUploadedList = null; fileUploadedList =
				 * HMSUtil.uploadFile(mrequest,uploadURL, whiteList,
				 * box.getString("filename"));
				 * Boolean fileUploaded=false; if(fileUploadedList != null &&
				 * fileUploadedList.size()!=0) { fileUploaded = (Boolean)
				 * fileUploadedList.get(0); }
				 */
				
				try {
					
					response.setContentType("application/pdf");
					
					response.setHeader("Content-Disposition", "attachment;filename="
							+ java.net.URLEncoder.encode("Dispensary.pdf")
							+ "");

					// response.setContentType("image/"+fileExtension);
					// response.setHeader("Content-Disposition", "attachment;
					// filename="+filename+"."+fileExtension);

					File f = new File(uploadURL + "/Dispensary.pdf");
					InputStream in = new FileInputStream(f);
					response.getOutputStream().flush();
					ServletOutputStream outs = response.getOutputStream();

					long length = f.length();

					if (length > Integer.MAX_VALUE) {
						// File is too large
					}

					// Create the byte array to hold the data
					byte[] bytes = new byte[(int) length];

					int offset = 0;
					int numRead = 0;
					while (offset < bytes.length
							&& (numRead = in.read(bytes, offset, bytes.length - offset)) >= 0) {
						offset += numRead;
					}

					if (offset < bytes.length) {
					}
					outs.write(bytes);
					in.close();

				} catch (IOException ioe) {
					ioe.printStackTrace();
				}

			
			}
		  
		  
		  
		  public void showDispansaryHelp(HttpServletRequest request,HttpServletResponse response) {

				Box box = HMSUtil.getBox(request);
				String filename = null;
				String fileExtension = null;
				MultipartFormDataRequest mrequest = null;

				if (MultipartFormDataRequest.isMultipartFormData(request)) {
					try {
						mrequest = new MultipartFormDataRequest(request);
					} catch (UploadException e) {
						e.printStackTrace();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}

				Map<String, Object> uploadFileMap = new HashMap<String, Object>();

			//	String uploadURL = getServletContext().getRealPath("/upload/");
				String userHome = getServletContext().getRealPath("");
				String fileSeparator = System.getProperty("file.separator");
				String uploadURL = userHome
						+ fileSeparator
						+ "help"
						+ fileSeparator;
						
				
				// String whiteList = "*.zip";
				// String whiteList = "*.jpg";

				// Long fileSizeLimit = 2097152l;

				/*
				 * List fileUploadedList = null; fileUploadedList =
				 * HMSUtil.uploadFile(mrequest,uploadURL, whiteList,
				 * box.getString("filename"));
				 * Boolean fileUploaded=false; if(fileUploadedList != null &&
				 * fileUploadedList.size()!=0) { fileUploaded = (Boolean)
				 * fileUploadedList.get(0); }
				 */
				
				try {
					
					response.setContentType("application/pdf");
					
					response.setHeader("Content-Disposition", "attachment;filename="
							+ java.net.URLEncoder.encode("Dispensary.pdf")
							+ "");

					// response.setContentType("image/"+fileExtension);
					// response.setHeader("Content-Disposition", "attachment;
					// filename="+filename+"."+fileExtension);

					File f = new File(uploadURL + "/Dispensary.pdf");
					InputStream in = new FileInputStream(f);
					response.getOutputStream().flush();
					ServletOutputStream outs = response.getOutputStream();

					long length = f.length();

					if (length > Integer.MAX_VALUE) {
						// File is too large
					}

					// Create the byte array to hold the data
					byte[] bytes = new byte[(int) length];

					int offset = 0;
					int numRead = 0;
					while (offset < bytes.length
							&& (numRead = in.read(bytes, offset, bytes.length - offset)) >= 0) {
						offset += numRead;
					}

					if (offset < bytes.length) {
					}
					outs.write(bytes);
					in.close();

				} catch (IOException ioe) {
					ioe.printStackTrace();
				}

			
			}
		  
		  
		  
		  public void updateNivItems(HttpServletRequest request,HttpServletResponse response) {
				Box box = HMSUtil.getBox(request);
				// --------------- Retriving User Name,Hospital Id,Department Id from
				// Session-----
				String userName = "";
				int deptId = 0;
				int hospitalId = 0;
				int itemId=0;
				String NivNo="";
				String rowVal="";
				HttpSession session = request.getSession();
				if (session.getAttribute("userName") != null)
					userName = (String) session.getAttribute("userName");
				if (session.getAttribute("hospitalId") != null)
					hospitalId = Integer.parseInt(""
							+ session.getAttribute("hospitalId"));
				if (session.getAttribute("deptId") != null)
					deptId = Integer.parseInt("" + session.getAttribute("deptId"));
				// --------------------------------------------------------------------------------
				String itemNameField = "";
				Map<String, Object> dataMap = new HashMap<String, Object>();
				List<MasStoreItem> itemList=new ArrayList<MasStoreItem>();
				List brandList=new ArrayList();
				Date changedDate = null;	
				String changedTime = "";
				changedDate=HMSUtil.dateFormatterDDMMYYYY((String)HMSUtil.getCurrentDateAndTime().get("currentDate"));
				changedTime=(String)HMSUtil.getCurrentDateAndTime().get("currentTime");
				MasStoreItem masStoreItem=new MasStoreItem();

				try {
					if(request.getParameter("itemId")!=null){
						itemId=Integer.parseInt(request.getParameter("itemId"));
					}
					if(request.getParameter("NivNo")!=null){
						NivNo=request.getParameter("NivNo");
					}
					if(request.getParameter("rowVal")!=null){
						rowVal=request.getParameter("rowVal");
					}
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
				dataMap.put("deptId", deptId);
				dataMap.put("userName", userName);
				dataMap.put("hospitalId", hospitalId);
				dataMap.put("itemId",itemId);
				dataMap.put("NivNo", NivNo);
				dataMap.put("userName",userName);
				dataMap.put("changedDate",changedDate);
				dataMap.put("changedTime",changedTime);

				map =  storesHandlerService.validateNivMaster(dataMap);
				


				String mes="";
				if(map.get("mes")!=null){
					mes=map.get("mes").toString();
				}
				if(map.get("NivNo")!=null){
					NivNo=map.get("NivNo").toString();
				}

				StringBuffer sb = new StringBuffer();
				for (int i=0;i<1;i++) {
					sb.append("<item>");
					sb.append("<id>" + mes + "</id>");
					sb.append("<pvms>" + NivNo + "</pvms>");
					sb.append("<rowVal>" + rowVal + "</rowVal>");
					sb.append("</item>");
				}
				response.setContentType("text/xml");
				response.setHeader("Cache-Control", "no-cache");
				try {
					response.getWriter().write(
							"<?xml version='1.0' encoding='ISO-8859-1'?>");
					response.getWriter().write("<items>");
					response.getWriter().write(sb.toString());
					response.getWriter().write("</items>");
				} catch (Exception e) {
					e.printStackTrace();
				}
				// return new ModelAndView(jsp, "map", map);
			}

		  
//------By Kiran
		  
		  
		  public ModelAndView generateABCAnalysisReport(HttpServletRequest request,
					HttpServletResponse response) {
				Map<String, Object> parameters = new HashMap<String, Object>();
				Map<String, Object> requestParameters = new HashMap<String, Object>();
				List<StoreSetup> classList = new ArrayList<StoreSetup>();
				
				int hospitalId = 0;
				String HospName = "";
				int deptId = 0;
				String fromDate="";
				String toDate="";
				HttpSession session = request.getSession();
				if (session.getAttribute("deptId") != null) {
				
					deptId = (Integer) session.getAttribute("deptId");
				}
				if (request.getParameter("fromDate") != null) {
					fromDate = request.getParameter("fromDate");
				}
				if (request.getParameter("toDate") != null) {
					toDate = request.getParameter("toDate");
				}
				
				requestParameters.put(HOSPITAL_ID, session.getAttribute("hospitalId"));

			

				if (session.getAttribute("hospitalId") != null) {
					hospitalId = (Integer) session.getAttribute("hospitalId");
					HospName = storesHandlerService.getHospitalName(hospitalId);
					requestParameters.put("HospName", HospName);
				}
				
//-----By Kiran				

		String abc1= storesHandlerService.generateABCAnalysisReport(deptId,fromDate,toDate);
				
				
			
				Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
				
				if(abc1.equals("true")){
				HMSUtil.generateReport("ABC", requestParameters,
						(Connection) connectionMap.get("con"), response,
						getServletContext());
				}
				return null;

			}
		  
/***************** By Ujjwal 
 * 
 * 	  
 */
		  public ModelAndView getPVMS(HttpServletRequest request,
					HttpServletResponse response) {
			  Map<String, Object> parameters = new HashMap<String, Object>();
				Map<String, Object> requestParameters = new HashMap<String, Object>();
				List<StoreSetup> classList = new ArrayList<StoreSetup>();
				
				int hospitalId = 0;
				String HospName = "";
				int deptId = 0;
				String fromDate="";
				String toDate="";
				HttpSession session = request.getSession();
				if (session.getAttribute("deptId") != null) {
				
					deptId = (Integer) session.getAttribute("deptId");
				}
				if (session.getAttribute("hospitalId") != null) {
					
					hospitalId = (Integer) session.getAttribute("hospitalId");
				}
				String nomenclature="";
				if(request.getParameter("nomenclature")!=null){
					nomenclature=request.getParameter("nomenclature");
				}
				String pVMS="";
				pVMS= storesHandlerService.getPVMS(deptId,nomenclature,hospitalId);		
				map.put("pVMS", pVMS);
				jsp = "responseForPVMS";
				//jsp = jsp + ".jsp";
				title = "DEFECTIVE DRUGS";
				map.put("contentJsp", jsp);
				map.put("title", title);

				return new ModelAndView(jsp, "map", map);	  
		  }
		  public void fillBatchForIssueToPatient(HttpServletRequest request,
					HttpServletResponse response) {
				Box box = HMSUtil.getBox(request);
				// --------------- Retriving User Name,Hospital Id,Department Id from
				// Session-----
				String userName = "";
				int deptId = 0;
				int hospitalId = 0;

				HttpSession session = request.getSession();
				if (session.getAttribute("userName") != null)
					userName = (String) session.getAttribute("userName");
				if (session.getAttribute("hospitalId") != null)
					hospitalId = Integer.parseInt(""
							+ session.getAttribute("hospitalId"));
				if (session.getAttribute("deptId") != null)
					deptId = Integer.parseInt("" + session.getAttribute("deptId"));
				// --------------------------------------------------------------------------------
				Map<String, Object> dataMap = new HashMap<String, Object>();
				int  itemId=0;
				try {
					if (request.getParameter("pvmsNo") != null) {
						itemId = Integer.parseInt(request.getParameter("pvmsNo"));
					}

					List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
					dataMap.put("itemId", itemId);
					dataMap.put("deptId", deptId);
					dataMap.put("userName", userName);
					dataMap.put("hospitalId", hospitalId);
					//map = storesHandlerService.fillItemsForIssueToDispensary(dataMap);
					
					
					
					
					
					map = storesHandlerService.fillBatchForIssueToPatient(dataMap);
					
					
					
					
					if (map.get("itemList") != null) {
						itemList = (List) map.get("itemList");
					}
					// javed khan
					List<StoreItemBatchStock> batchList = new ArrayList<StoreItemBatchStock>();
					if (map.get("batchList") != null) {
						batchList = (List) map.get("batchList");
					}
					
					BigDecimal stock = new BigDecimal(0);
					if (map.get("stock") != null) {
						stock = (BigDecimal) map.get("stock");
					}

					StringBuffer sb = new StringBuffer();
				
						sb.append("<item>");
	
						sb.append("<batches>");
						for (StoreItemBatchStock batch : batchList) {
							sb.append("<batch>");
							sb.append("<batchId>" + batch.getBatchNo() + "</batchId>");
							sb.append("<batchName>" + batch.getBatchNo()
									+ "</batchName>");
							sb.append("</batch>");
						}
						sb.append("</batches>");


						sb.append("</item>");
				

					/*
					 * BigDecimal stock = new BigDecimal(0); try { String s =
					 * (String)map.get("stock"); stock = new BigDecimal(s); }
					 * catch(Exception e) { stock = new BigDecimal(0); }
					 */

					/*
					 * sb.append("<stock>"); sb.append("<stk>");
					 * sb.append(stock.doubleValue()); sb.append("</stk>");
					 * sb.append("</stock>");
					 */
					response.setContentType("text/xml");
					response.setHeader("Cache-Control", "no-cache");

					response.getWriter().write(
							"<?xml version='1.0' encoding='ISO-8859-1'?>");
					response.getWriter().write("<items>");
					response.getWriter().write(sb.toString());
					response.getWriter().write("</items>");
				} catch (Exception e) {
					e.printStackTrace();
				}
			}	  
		  
			public ModelAndView printDefectiveDrugListPending(HttpServletRequest request,
					HttpServletResponse response) {
				Map parameters = new HashMap();
				
				int hospitalId = 0;
				HttpSession session = request.getSession();
				if(session.getAttribute("hospitalId") !=null)
					 hospitalId=Integer.parseInt(""+session.getAttribute("hospitalId"));
				String hospName="";
				hospName=storesHandlerService.getHospitalName(hospitalId);
				parameters.put("hospName", hospName);
				map = storesHandlerService.getConnectionForReport();
				HMSUtil.generateReport("defective_drug", map, (Connection)map.get("con"), response, getServletContext());
				return null;
			}
			public void viewNivItemList(HttpServletRequest request, HttpServletResponse response) {
				Box box = HMSUtil.getBox(request);
				String filename = null;
				String fileExtension = null;
				MultipartFormDataRequest mrequest = null;

				if (MultipartFormDataRequest.isMultipartFormData(request)) {
					try {
						mrequest = new MultipartFormDataRequest(request);
					} catch (UploadException e) {
						e.printStackTrace();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}

				Map<String, Object> uploadFileMap = new HashMap<String, Object>();

			//	String uploadURL = getServletContext().getRealPath("/upload/");
				String userHome = getServletContext().getRealPath("");
				String fileSeparator = System.getProperty("file.separator");
				/*String uploadURL = userHome.substring(0, userHome
						.lastIndexOf(fileSeparator))
						+ fileSeparator
						+ "/stores/"
						+ fileSeparator
						;*/
				String uploadURL = userHome
				+ fileSeparator
				+ "stores"
				+ fileSeparator;
				// String whiteList = "*.zip";
				// String whiteList = "*.jpg";

				// Long fileSizeLimit = 2097152l;

				/*
				 * List fileUploadedList = null; fileUploadedList =
				 * HMSUtil.uploadFile(mrequest,uploadURL, whiteList,
				 * box.getString("filename"));
				 * Boolean fileUploaded=false; if(fileUploadedList != null &&
				 * fileUploadedList.size()!=0) { fileUploaded = (Boolean)
				 * fileUploadedList.get(0); }
				 */
		try {
					
					response.setContentType("application/xls");
					
					response.setHeader("Content-Disposition", "attachment;filename="
							+ java.net.URLEncoder.encode("NIV_Master.xls")
							+ "");

					// response.setContentType("image/"+fileExtension);
					// response.setHeader("Content-Disposition", "attachment;
					// filename="+filename+"."+fileExtension);

					
					File f = new File(uploadURL + "/NIV_Master.xls");
					InputStream in = new FileInputStream(f);
					response.getOutputStream().flush();
					ServletOutputStream outs = response.getOutputStream();

					long length = f.length();

					if (length > Integer.MAX_VALUE) {
						// File is too large
					}

					// Create the byte array to hold the data
					byte[] bytes = new byte[(int) length];

					int offset = 0;
					int numRead = 0;
					while (offset < bytes.length
							&& (numRead = in.read(bytes, offset, bytes.length - offset)) >= 0) {
						offset += numRead;
					}

					if (offset < bytes.length) {
					}
					outs.write(bytes);
					HSSFWorkbook wb = new HSSFWorkbook();
					HSSFCellStyle lockedCellStyle = wb.createCellStyle();
					lockedCellStyle.setLocked(true);
					in.close();

				} catch (IOException ioe) {
					ioe.printStackTrace();
				}

			
			}	  
		  
			public synchronized ModelAndView importNivOpeningBalance(HttpServletRequest request,
					HttpServletResponse response) {
				Box box = HMSUtil.getBox(request);
				Map<String, Object> map = new HashMap<String, Object>();
				Map<String, Object> timeMap = new HashMap<String, Object>();
				MultipartFormDataRequest mrequest = null;
				String userName="";
				String flag1="import";
				//int groupId=0;
				
				if (MultipartFormDataRequest.isMultipartFormData(request)) {
					try {
						mrequest =(MultipartFormDataRequest) new MultipartFormDataRequest(request);
					} catch (UploadException e) {
						e.printStackTrace();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}

				Map<String, Object> uploadFileMap = new HashMap<String, Object>();
				Map<String, Object> utilMap = new HashMap<String, Object>();
				int deptId = 0;
				if(request.getParameter("deptId") != null){
					deptId = Integer.parseInt(request.getParameter("deptId"));
				}
				//int deptId=(Integer)session.getAttribute("deptId");
				//int hospitalId=(Integer)session.getAttribute("hospitalId");
				
				int hospitalId = 0;
				if(request.getParameter("hospitalId") != null){
					hospitalId = Integer.parseInt(request.getParameter("hospitalId"));
				}
				
				HttpSession session = request.getSession();
				if (session.getAttribute("userName") != null)
					userName = (String) session.getAttribute("userName");
				String uploadURL = getServletContext().getRealPath("/stores/");
				String fileName=box.getString("filename");
				String whiteList = "*.xls";
				List fileUploadedList = null;
				
				//List<Integer> itemIdList = new ArrayList<Integer>();
				List<String> nivNoList = new ArrayList<String>();
				List<String> nomenclatureList = new ArrayList<String>();
				List<Integer> auList = new ArrayList<Integer>();
				List<String> batch1 = new ArrayList<String>();
				List<String> batch2 = new ArrayList<String>();
				List<String> batch3 = new ArrayList<String>();
				List<String> batch4 = new ArrayList<String>();
				List<String> batch5 = new ArrayList<String>();
				List<String> batch6 = new ArrayList<String>();
				List<String> batch7 = new ArrayList<String>();
				List<String> batch8 = new ArrayList<String>();
				List<String> batch9 = new ArrayList<String>();
				List<String> batch10 = new ArrayList<String>();
				List<String> expiryDate1 = new ArrayList<String>();
				List<String> expiryDate2 = new ArrayList<String>();
				List<String> expiryDate3 = new ArrayList<String>();
				List<String> expiryDate4 = new ArrayList<String>();
				List<String> expiryDate5 = new ArrayList<String>();
				List<String> expiryDate6 = new ArrayList<String>();
				List<String> expiryDate7 = new ArrayList<String>();
				List<String> expiryDate8 = new ArrayList<String>();
				List<String> expiryDate9 = new ArrayList<String>();
				List<String> expiryDate10 = new ArrayList<String>();
				List<BigDecimal> qty1 = new ArrayList<BigDecimal>();
				List<BigDecimal> qty2 = new ArrayList<BigDecimal>();
				List<BigDecimal> qty3 = new ArrayList<BigDecimal>();
				List<BigDecimal> qty4 = new ArrayList<BigDecimal>();
				List<BigDecimal> qty5 = new ArrayList<BigDecimal>();
				List<BigDecimal> qty6 = new ArrayList<BigDecimal>();
				List<BigDecimal> qty7 = new ArrayList<BigDecimal>();
				List<BigDecimal> qty8 = new ArrayList<BigDecimal>();
				List<BigDecimal> qty9 = new ArrayList<BigDecimal>();
				List<BigDecimal> qty10 = new ArrayList<BigDecimal>();
				
				List<String> remarksList = new ArrayList<String>();
				box.put("uploadURL", uploadURL);
				box.put("filename", box.getString("filename"));
				
				try {
						
					fileUploadedList = HMSUtil.uploadFile(mrequest, uploadURL, whiteList,
							box.getString("filename"));
					Boolean fileUploaded = false;
					if (fileUploadedList != null && fileUploadedList.size() != 0) {
						fileUploaded = (Boolean) fileUploadedList.get(0);
					}
					jxl.WorkbookSettings ws = null;
					jxl.Workbook workbook = null;
					jxl.Sheet s = null;
					Cell rowData[] = null;
					int rowCount = '0';
					int columnCount = '0';
					DateCell dc = null;
					int totalSheet = 0;
			 
					try {
						ws = new WorkbookSettings();
						ws.setLocale(new Locale("en", "EN"));
						workbook = jxl.Workbook.getWorkbook((new FileInputStream(box.getString("uploadURL") + "/"+ box.getString("filename"))), ws);
			 
						totalSheet = workbook.getNumberOfSheets();
						
			 
						//Getting Default Sheet i.e. 0
						s = workbook.getSheet(0);
			 
						//Reading Individual Cell
						//Total Total No Of Rows in Sheet, will return you no of rows that are occupied with some data
						rowCount = s.getRows();
						//Total Total No Of Columns in Sheet
						
						columnCount = s.getColumns();
			 int itemId=0;
			 String pvmsNO="";
			 String nomenclature="";
			 String au = "";
			 int auId = 0;
			 
						
						for (int i = 1; i < rowCount; i++) {
							//Get Individual Row
							rowData = s.getRow(i);
							if (rowData[0].getContents().length() != 0) { // the first date column must not null
								for (int j = 0; j < columnCount; j++) {
									switch (j) {
									
									case 0:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											nivNoList.add(rowData[j].getContents());
										}
										else
										{
											nivNoList.add("");
										}
										}
										catch(Exception e)
										{
											nivNoList.add("");
										}
										break;
									case 1:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
										nomenclatureList.add(rowData[j].getContents());
										}
										else
										{
											nomenclatureList.add("");
										}
										}
										catch(Exception e)
										{
											nomenclatureList.add("");
										}
										break;
										
										
									case 2:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											au = (String)rowData[j].getContents();
											auId =Integer.parseInt(au.substring(0, au.lastIndexOf("-")));
										auList.add(auId);
										}
										else
										{
											auList.add(0);
										}
										}catch(Exception e)
											{
											auList.add(0);
											}
										break;
									case 3:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										batch1.add(rowData[j].getContents());
										
										}
										else
										{
											batch1.add("");
										}
										}catch(Exception e)
											{
											batch1.add("");
											}
										break;
									case 4:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										expiryDate1.add(rowData[j].getContents());
										
										}
										else
										{
											expiryDate1.add("");
										}
										}catch(Exception e)
											{
											expiryDate1.add("");
											}
										break;
									case 5:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										qty1.add(new BigDecimal(rowData[j].getContents()));
										
										}
										else
										{
											qty1.add(new BigDecimal(0));
										}
										}catch(Exception e)
											{
											qty1.add(new BigDecimal(0));
											}
										break;
									case 6:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										batch2.add(rowData[j].getContents());
										
										}
										else
										{
											batch2.add("");
										}
										}catch(Exception e)
											{
											batch2.add("");
											}
										break;
									case 7:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										expiryDate2.add(rowData[j].getContents());
										
										}
										else
										{
											expiryDate2.add("");
										}
										}catch(Exception e)
											{
											expiryDate2.add("");
											}
										break;	
									case 8:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										qty2.add(new BigDecimal(rowData[j].getContents()));
										
										}
										else
										{
											qty2.add(new BigDecimal(0));
										}
										}catch(Exception e)
											{
											qty2.add(new BigDecimal(0));
											}
										break;
									case 9:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										batch3.add(rowData[j].getContents());
										
										}
										else
										{
											batch3.add("");
										}
										}catch(Exception e)
											{
											batch3.add("");
											}
										break;
									
									case 10:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										expiryDate3.add(rowData[j].getContents());
										
										}
										else
										{
											expiryDate3.add("");
										}
										}catch(Exception e)
											{
											expiryDate3.add("");
											}
										break;
									case 11:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										qty3.add(new BigDecimal(rowData[j].getContents()));
										
										}
										else
										{
											qty3.add(new BigDecimal(0));
										}
										}catch(Exception e)
											{
											qty3.add(new BigDecimal(0));
											}
										break;
										
									case 12:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										batch4.add(rowData[j].getContents());
										
										}
										else
										{
											batch4.add("");
										}
										}catch(Exception e)
											{
											batch4.add("");
											}
										break;
									case 13:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										expiryDate4.add(rowData[j].getContents());
										
										}
										else
										{
											expiryDate4.add("");
										}
										}catch(Exception e)
											{
											expiryDate4.add("");
											}
										break;
									case 14:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										qty4.add(new BigDecimal(rowData[j].getContents()));
										
										}
										else
										{
											qty4.add(new BigDecimal(0));
										}
										}catch(Exception e)
											{
											qty4.add(new BigDecimal(0));
											}
										break;
									case 15:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										batch5.add(rowData[j].getContents());
										
										}
										else
										{
											batch5.add("");
										}
										}catch(Exception e)
											{
											batch5.add("");
											}
										break;
									case 16:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										expiryDate5.add(rowData[j].getContents());
										
										}
										else
										{
											expiryDate5.add("");
										}
										}catch(Exception e)
											{
											expiryDate5.add("");
											}
										break;
									case 17:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										qty5.add(new BigDecimal(rowData[j].getContents()));
										
										}
										else
										{
											qty5.add(new BigDecimal(0));
										}
										}catch(Exception e)
											{
											qty5.add(new BigDecimal(0));
											}
										break;
									case 18:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										batch6.add(rowData[j].getContents());
										
										}
										else
										{
											batch6.add("");
										}
										}catch(Exception e)
											{
											batch6.add("");
											}
										break;

									case 19:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										expiryDate6.add(rowData[j].getContents());
										
										}
										else
										{
											expiryDate6.add("");
										}
										}catch(Exception e)
											{
											expiryDate6.add("");
											}
										break;
									case 20:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										qty6.add(new BigDecimal(rowData[j].getContents()));
										
										}
										else
										{
											qty6.add(new BigDecimal(0));
										}
										}catch(Exception e)
											{
											qty6.add(new BigDecimal(0));
											}
										break;
									case 21:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										batch7.add(rowData[j].getContents());
										
										}
										else
										{
											batch7.add("");
										}
										}catch(Exception e)
											{
											batch7.add("");
											}
										break;
									case 22:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										expiryDate7.add(rowData[j].getContents());
										
										}
										else
										{
											expiryDate7.add("");
										}
										}catch(Exception e)
											{
											expiryDate7.add("");
											}
										break;
									case 23:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										qty7.add(new BigDecimal(rowData[j].getContents()));
										
										}
										else
										{
											qty7.add(new BigDecimal(0));
										}
										}catch(Exception e)
											{
											qty7.add(new BigDecimal(0));
											}
										break;
									case 24:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										batch8.add(rowData[j].getContents());
										
										}
										else
										{
											batch8.add("");
										}
										}catch(Exception e)
											{
											batch8.add("");
											}
										break;
									case 25:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										expiryDate8.add(rowData[j].getContents());
										
										}
										else
										{
											expiryDate8.add("");
										}
										}catch(Exception e)
											{
											expiryDate8.add("");
											}
										break;

									case 26:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										qty8.add(new BigDecimal(rowData[j].getContents()));
										
										}
										else
										{
											qty8.add(new BigDecimal(0));
										}
										}catch(Exception e)
											{
											qty8.add(new BigDecimal(0));
											}
										break;
									case 27:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										batch9.add(rowData[j].getContents());
										
										}
										else
										{
											batch9.add("");
										}
										}catch(Exception e)
											{
											batch9.add("");
											}
										break;
									case 28:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										expiryDate9.add(rowData[j].getContents());
										
										}
										else
										{
											expiryDate9.add("");
										}
										}catch(Exception e)
											{
											expiryDate9.add("");
											}
										break;

										
									case 29:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										qty9.add(new BigDecimal(rowData[j].getContents()));
										
										}
										else
										{
											qty9.add(new BigDecimal(0));
										}
										}catch(Exception e)
											{
											qty9.add(new BigDecimal(0));
											}
										break;
									case 30:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										batch10.add(rowData[j].getContents());
										
										}
										else
										{
											batch10.add("");
										}
										}catch(Exception e)
											{
											batch10.add("");
											}
										break;
									
									case 31:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										expiryDate10.add(rowData[j].getContents());
										
										}
										else
										{
											expiryDate10.add("");
										}
										}catch(Exception e)
											{
											expiryDate10.add("");
											}
										break;
								
									case 32:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										qty10.add(new BigDecimal(rowData[j].getContents()));
										
										}
										else
										{
											qty10.add(new BigDecimal(0));
										}
										}catch(Exception e)
											{
											qty10.add(new BigDecimal(0));
											}
										break;
									
									}
								}
							}
						}
						workbook.close();
						//session.setAttribute("itemIdList", itemIdList);
						
						//utilMap.put("itemIdList",itemIdList);
						utilMap.put("nivNoList",nivNoList);
						utilMap.put("nomenclatureList",nomenclatureList);
						utilMap.put("auList",auList);
						
						utilMap.put("batch1",batch1);
						utilMap.put("batch2",batch2);
						utilMap.put("batch3",batch3);
						utilMap.put("batch4",batch4);
						utilMap.put("batch5",batch5);
						utilMap.put("batch6",batch6);
						utilMap.put("batch7",batch7);
						utilMap.put("batch8",batch8);
						utilMap.put("batch9",batch9);
						utilMap.put("batch10",batch10);
						utilMap.put("expiryDate1",expiryDate1);
						utilMap.put("expiryDate2",expiryDate2);
						utilMap.put("expiryDate3",expiryDate3);
						utilMap.put("expiryDate4",expiryDate4);
						utilMap.put("expiryDate5",expiryDate5);
						utilMap.put("expiryDate6",expiryDate6);
						utilMap.put("expiryDate7",expiryDate7);
						utilMap.put("expiryDate8",expiryDate8);
						utilMap.put("expiryDate9",expiryDate9);
						utilMap.put("expiryDate10",expiryDate10);
						utilMap.put("qty1",qty1);
						utilMap.put("qty2",qty2);
						utilMap.put("qty3",qty3);
						utilMap.put("qty4",qty4);
						utilMap.put("qty5",qty5);
						utilMap.put("qty6",qty6);
						utilMap.put("qty7",qty7);
						utilMap.put("qty8",qty8);
						utilMap.put("qty9",qty9);
						utilMap.put("qty10",qty10);
						utilMap.put("deptId",deptId);
						utilMap.put("hospitalId",hospitalId);
						utilMap.put("userName",userName);
						//box.put("itemIdList", itemIdList);
						box.put("deptId", deptId);
						box.put("hospitalId", hospitalId);
						box.put("numOfRows", 15);
						box.put("pageCount", 10);
						box.put("currPage", 1);
						
						timeMap=storesHandlerService.importNivMaster(utilMap);
						List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
						if(timeMap.get("departmentList") != null){
							departmentList = (List)timeMap.get("departmentList");
						}
						
						String time=(String)timeMap.get("time");
						// added by javed khan on 22-10-2013 
						String msg = "";
						if(timeMap .get("msg") != null){
							msg =(String)timeMap.get("msg");
						}
						map.put("msg", msg);
						// added by javed khan on 22-10-2013 
						map.put("departmentList", departmentList);
						box.put("time", time);
					} catch (IOException e) {
						e.printStackTrace();

					}
					
					}
					catch(Exception ioe)
					{
					ioe.printStackTrace();
					} 
					//map = pharmacyMasterHandlerService.showItemJsp(deptId,hospitalId);
					
					jsp = "storeBalance";
					jsp += ".jsp";
					//title = "Tender Proposal";
					map.put("contentJsp", jsp);
					map.put("flag1", flag1);
					
					map.put("groupId", box.getInt("groupId"));
					map.put("subGroupId", box.getInt("subGroupId"));
					map.put("title", title);
					return new ModelAndView("indexB", "map", map);

					}
			
			public ModelAndView createPvmsItemExcelList(HttpServletRequest request,
					HttpServletResponse response) {
				Box box = HMSUtil.getBox(request);
				Map<String, Object> map = new HashMap<String, Object>();
				box.put("download_path", getServletContext().getRealPath("/stores/"));
				map = storesHandlerService.createPvmsItemExcelList(box);
				if (map.get("flag") != null
						&& map.get("flag").toString().equalsIgnoreCase("NoData")) {
					map.put("message", "No Data Found!....");
				} else {
					try {
						String file=map.get("download_path").toString();
						String finalFileName="";
						int fileNameLength=file.length();
						for(int i=0;i<fileNameLength;i++)
						{
							if(file.charAt(i)!=' ')
							{
								finalFileName+=file.charAt(i);
							}
						}
						response.setContentType("application/zip");
						response.setHeader("Content-Disposition",
								"attachment; filename="
										+ finalFileName);
						File f = new File(map.get("download_path").toString());
						InputStream in = new FileInputStream(f);
						ServletOutputStream outs = response.getOutputStream();
						int bit = 2048;
						int i = 0;
						while ((bit) >= 0) {
							bit = in.read();
							outs.write(bit);
						}
					//	while(true)
						//{
							//bit = in.read();
							//if(bit!=-1)
							//{
							
							//outs.write(bit);
							//}
							//else
							//{
								//break;
							//}
							//}
						outs.flush();
						outs.close();
						in.close();
						if (f.exists())
							f.delete();
					} catch (IOException ioe) {
						ioe.printStackTrace();
					}
				}

				jsp = "storeBalance";
				jsp += ".jsp";
				title = "Export CD";
				map.put("contentJsp", jsp);
				map.put("title", title);
				return new ModelAndView("indexB", "map", map);
			}
			
						

			public synchronized ModelAndView importPVMSOpeningBalance(HttpServletRequest request,
					HttpServletResponse response) {
				HttpSession session = request.getSession();
				Box box = HMSUtil.getBox(request);
				Map<String, Object> map = new HashMap<String, Object>();
				Map<String, Object> timeMap = new HashMap<String, Object>();
				MultipartFormDataRequest mrequest = null;
				String userName="";
				String flag1="import";
				boolean succesfullyAdded = false;
				String msg = "";
				//int groupId=0;
				
				if (MultipartFormDataRequest.isMultipartFormData(request)) {
					try {
						mrequest =(MultipartFormDataRequest) new MultipartFormDataRequest(request);
					} catch (UploadException e) {
						e.printStackTrace();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}

				Map<String, Object> uploadFileMap = new HashMap<String, Object>();
				Map<String, Object> utilMap = new HashMap<String, Object>();
				int deptId = 35;
				/*if(request.getParameter("deptId") != null){
					deptId = Integer.parseInt(request.getParameter("deptId"));
				}
				*/
				int hospitalId = 1;
				/*if(request.getParameter("hospitalId") != null){
					hospitalId = Integer.parseInt(request.getParameter("hospitalId"));
				}*/
				//int deptId=(Integer)session.getAttribute("deptId");
				//int hospitalId=(Integer)session.getAttribute("hospitalId");
				
				System.out.println("hospitalId="+hospitalId);
				if (session.getAttribute("userName") != null)
					userName = (String) session.getAttribute("userName");
				String uploadURL = getServletContext().getRealPath("/stores/");
				String fileName=box.getString("filename");
				String whiteList = "*.xls";
				List fileUploadedList = null;
				
				List<Integer> itemIdList = new ArrayList<Integer>();
				List<String> pvmsNoList = new ArrayList<String>();
				List<String> nomenclatureList = new ArrayList<String>();
				List<Integer> auList = new ArrayList<Integer>();
				List<String> batch1 = new ArrayList<String>();
				List<String> batch2 = new ArrayList<String>();
				List<String> batch3 = new ArrayList<String>();
				List<String> batch4 = new ArrayList<String>();
				List<String> batch5 = new ArrayList<String>();
				List<String> batch6 = new ArrayList<String>();
				List<String> batch7 = new ArrayList<String>();
				List<String> batch8 = new ArrayList<String>();
				List<String> batch9 = new ArrayList<String>();
				List<String> batch10 = new ArrayList<String>();
				List<String> expiryDate1 = new ArrayList<String>();
				List<String> expiryDate2 = new ArrayList<String>();
				List<String> expiryDate3 = new ArrayList<String>();
				List<String> expiryDate4 = new ArrayList<String>();
				List<String> expiryDate5 = new ArrayList<String>();
				List<String> expiryDate6 = new ArrayList<String>();
				List<String> expiryDate7 = new ArrayList<String>();
				List<String> expiryDate8 = new ArrayList<String>();
				List<String> expiryDate9 = new ArrayList<String>();
				List<String> expiryDate10 = new ArrayList<String>();
				List<BigDecimal> qty1 = new ArrayList<BigDecimal>();
				List<BigDecimal> qty2 = new ArrayList<BigDecimal>();
				List<BigDecimal> qty3 = new ArrayList<BigDecimal>();
				List<BigDecimal> qty4 = new ArrayList<BigDecimal>();
				List<BigDecimal> qty5 = new ArrayList<BigDecimal>();
				List<BigDecimal> qty6 = new ArrayList<BigDecimal>();
				List<BigDecimal> qty7 = new ArrayList<BigDecimal>();
				List<BigDecimal> qty8 = new ArrayList<BigDecimal>();
				List<BigDecimal> qty9 = new ArrayList<BigDecimal>();
				List<BigDecimal> qty10 = new ArrayList<BigDecimal>();
				
				List<String> remarksList = new ArrayList<String>();
				box.put("uploadURL", uploadURL);
				box.put("filename", box.getString("filename"));
			
				try {
						
					fileUploadedList = HMSUtil.uploadFile(mrequest, uploadURL, whiteList,
							box.getString("filename"));
					Boolean fileUploaded = false;
					if (fileUploadedList != null && fileUploadedList.size() != 0) {
						fileUploaded = (Boolean) fileUploadedList.get(0);
					}
					jxl.WorkbookSettings ws = null;
					jxl.Workbook workbook = null;
					jxl.Sheet s = null;
					Cell rowData[] = null;
					int rowCount = '0';
					int columnCount = '0';
					DateCell dc = null;
					int totalSheet = 0;
			 
					try {
						ws = new WorkbookSettings();
						ws.setLocale(new Locale("en", "EN"));
						workbook = jxl.Workbook.getWorkbook((new FileInputStream(box.getString("uploadURL") + "/"+ box.getString("filename"))), ws);
			 
						totalSheet = workbook.getNumberOfSheets();
						
			 
						//Getting Default Sheet i.e. 0
						s = workbook.getSheet(0);
			 
						//Reading Individual Cell
						//Total Total No Of Rows in Sheet, will return you no of rows that are occupied with some data
						rowCount = s.getRows();
						//Total Total No Of Columns in Sheet
						
						columnCount = s.getColumns();
			 int itemId=0;
			 String pvmsNO="";
			 String nomenclature="";
			 int au = 0;
			 int auId = 0;
			 
						
						for (int i = 1; i < rowCount; i++) {
							//Get Individual Row
							rowData = s.getRow(i);
							if (rowData[0].getContents().length() != 0) { // the first date column must not null
							
								for (int j = 0; j < columnCount; j++) {
									switch (j) {
									
									case 0:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
												if(!rowData[j].getContents().toString().equals("")){
													itemIdList.add(Integer.parseInt(rowData[j].getContents().toString()));
												}else{
													itemIdList.add(0);
												}
										}
										else
										{
											itemIdList.add(0);
										}
										}
										catch(Exception e)
										{
											e.printStackTrace();
											itemIdList.add(0);
										}
										break;
									
									case 1:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
												pvmsNoList.add(rowData[j].getContents());
										}
										else
										{
											pvmsNoList.add("");
										}
										}
										catch(Exception e)
										{
											pvmsNoList.add("");
										}
										break;
									case 2:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
										nomenclatureList.add(rowData[j].getContents());
										}
										else
										{
											nomenclatureList.add("");
										}
										}
										catch(Exception e)
										{
											nomenclatureList.add("");
										}
										break;
										
										
									case 3:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											au = Integer.parseInt(rowData[j].getContents().toString());
											//auId =Integer.parseInt(au.substring(0, au.lastIndexOf("-")));
										auList.add(au);
										}
										else
										{
											auList.add(0);
										}
										}catch(Exception e)
											{
											auList.add(0);
											}
										break;
									case 4:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										batch1.add(rowData[j].getContents());
										
										}
										else
										{
											batch1.add("");
										}
										}catch(Exception e)
											{
											batch1.add("");
											}
										break;
									case 5:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{										
											
										 String date1=rowData[j].getContents().substring(0, 2).concat("/").concat(rowData[j].getContents().substring(3, 5)).concat("/").concat(rowData[j].getContents().substring(6, 10));							
																				
										 expiryDate1.add(date1);
										
										}
										else
										{
											
											expiryDate1.add("");
										}
										}catch(Exception e)
											{
											expiryDate1.add("");
											}
										break;
									case 6:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										qty1.add(new BigDecimal(rowData[j].getContents()));
										
										}
										else
										{
											qty1.add(new BigDecimal(0));
										}
										}catch(Exception e)
											{
											qty1.add(new BigDecimal(0));
											}
										break;
									case 7:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										batch2.add(rowData[j].getContents());
										
										}
										else
										{
											batch2.add("");
										}
										}catch(Exception e)
											{
											batch2.add("");
											}
										break;
									case 8:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
												String date2=rowData[j].getContents().substring(0, 2).concat("/").concat(rowData[j].getContents().substring(3, 5)).concat("/").concat(rowData[j].getContents().substring(6, 10));							
												
												expiryDate2.add(date2);
										
										}
										else
										{
											expiryDate2.add("");
										}
										}catch(Exception e)
											{
											expiryDate2.add("");
											}
										break;	
									case 9:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										qty2.add(new BigDecimal(rowData[j].getContents()));
										
										}
										else
										{
											qty2.add(new BigDecimal(0));
										}
										}catch(Exception e)
											{
											qty2.add(new BigDecimal(0));
											}
										break;
									case 10:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										batch3.add(rowData[j].getContents());
										
										}
										else
										{
											batch3.add("");
										}
										}catch(Exception e)
											{
											batch3.add("");
											}
										break;
									
									case 11:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
												String date3=rowData[j].getContents().substring(0, 2).concat("/").concat(rowData[j].getContents().substring(3, 5)).concat("/").concat(rowData[j].getContents().substring(6, 10));							
												
												expiryDate3.add(date3);
										
										}
										else
										{
											expiryDate3.add("");
										}
										}catch(Exception e)
											{
											expiryDate3.add("");
											}
										break;
									case 12:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										qty3.add(new BigDecimal(rowData[j].getContents()));
										
										}
										else
										{
											qty3.add(new BigDecimal(0));
										}
										}catch(Exception e)
											{
											qty3.add(new BigDecimal(0));
											}
										break;
										
									case 13:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										batch4.add(rowData[j].getContents());
										
										}
										else
										{
											batch4.add("");
										}
										}catch(Exception e)
											{
											batch4.add("");
											}
										break;
									case 14:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
												String date4=rowData[j].getContents().substring(0, 2).concat("/").concat(rowData[j].getContents().substring(3, 5)).concat("/").concat(rowData[j].getContents().substring(6, 10));							
												
												expiryDate4.add(date4);
										
										}
										else
										{
											expiryDate4.add("");
										}
										}catch(Exception e)
											{
											expiryDate4.add("");
											}
										break;
									case 15:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										qty4.add(new BigDecimal(rowData[j].getContents()));
										
										}
										else
										{
											qty4.add(new BigDecimal(0));
										}
										}catch(Exception e)
											{
											qty4.add(new BigDecimal(0));
											}
										break;
									case 16:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										batch5.add(rowData[j].getContents());
										
										}
										else
										{
											batch5.add("");
										}
										}catch(Exception e)
											{
											batch5.add("");
											}
										break;
									case 17:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
												String date5=rowData[j].getContents().substring(0, 2).concat("/").concat(rowData[j].getContents().substring(3, 5)).concat("/").concat(rowData[j].getContents().substring(6, 10));							
												
												expiryDate5.add(date5);
										
										}
										else
										{
											expiryDate5.add("");
										}
										}catch(Exception e)
											{
											expiryDate5.add("");
											}
										break;
									case 18:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										qty5.add(new BigDecimal(rowData[j].getContents()));
										
										}
										else
										{
											qty5.add(new BigDecimal(0));
										}
										}catch(Exception e)
											{
											qty5.add(new BigDecimal(0));
											}
										break;
									case 19:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										batch6.add(rowData[j].getContents());
										
										}
										else
										{
											batch6.add("");
										}
										}catch(Exception e)
											{
											batch6.add("");
											}
										break;

									case 20:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
												String date6=rowData[j].getContents().substring(0, 2).concat("/").concat(rowData[j].getContents().substring(3, 5)).concat("/").concat(rowData[j].getContents().substring(6, 10));							
												
												expiryDate6.add(date6);
										
										}
										else
										{
											expiryDate6.add("");
										}
										}catch(Exception e)
											{
											expiryDate6.add("");
											}
										break;
									case 21:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										qty6.add(new BigDecimal(rowData[j].getContents()));
										
										}
										else
										{
											qty6.add(new BigDecimal(0));
										}
										}catch(Exception e)
											{
											qty6.add(new BigDecimal(0));
											}
										break;
									case 22:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										batch7.add(rowData[j].getContents());
										
										}
										else
										{
											batch7.add("");
										}
										}catch(Exception e)
											{
											batch7.add("");
											}
										break;
									case 23:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
												String date7=rowData[j].getContents().substring(0, 2).concat("/").concat(rowData[j].getContents().substring(3, 5)).concat("/").concat(rowData[j].getContents().substring(6, 10));							
												
												expiryDate7.add(date7);
										
										}
										else
										{
											expiryDate7.add("");
										}
										}catch(Exception e)
											{
											expiryDate7.add("");
											}
										break;
									case 24:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										qty7.add(new BigDecimal(rowData[j].getContents()));
										
										}
										else
										{
											qty7.add(new BigDecimal(0));
										}
										}catch(Exception e)
											{
											qty7.add(new BigDecimal(0));
											}
										break;
									case 25:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										batch8.add(rowData[j].getContents());
										
										}
										else
										{
											batch8.add("");
										}
										}catch(Exception e)
											{
											batch8.add("");
											}
										break;
									case 26:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
												String date8=rowData[j].getContents().substring(0, 2).concat("/").concat(rowData[j].getContents().substring(3, 5)).concat("/").concat(rowData[j].getContents().substring(6, 10));							
												
												expiryDate8.add(date8);
										
										}
										else
										{
											expiryDate8.add("");
										}
										}catch(Exception e)
											{
											expiryDate8.add("");
											}
										break;

									case 27:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										qty8.add(new BigDecimal(rowData[j].getContents()));
										
										}
										else
										{
											qty8.add(new BigDecimal(0));
										}
										}catch(Exception e)
											{
											qty8.add(new BigDecimal(0));
											}
										break;
									case 28:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										batch9.add(rowData[j].getContents());
										
										}
										else
										{
											batch9.add("");
										}
										}catch(Exception e)
											{
											batch9.add("");
											}
										break;
									case 29:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
												String date9=rowData[j].getContents().substring(0, 2).concat("/").concat(rowData[j].getContents().substring(3, 5)).concat("/").concat(rowData[j].getContents().substring(6, 10));							
												
												expiryDate9.add(date9);
										
										}
										else
										{
											expiryDate9.add("");
										}
										}catch(Exception e)
											{
											expiryDate9.add("");
											}
										break;

										
									case 30:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										qty9.add(new BigDecimal(rowData[j].getContents()));
										
										}
										else
										{
											qty9.add(new BigDecimal(0));
										}
										}catch(Exception e)
											{
											qty9.add(new BigDecimal(0));
											}
										break;
									case 31:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										batch10.add(rowData[j].getContents());
										
										}
										else
										{
											batch10.add("");
										}
										}catch(Exception e)
											{
											batch10.add("");
											}
										break;
									
									case 32:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
												String date10=rowData[j].getContents().substring(0, 2).concat("/").concat(rowData[j].getContents().substring(3, 5)).concat("/").concat(rowData[j].getContents().substring(6, 10));							
												
												expiryDate10.add(date10);
										
										}
										else
										{
											expiryDate10.add("");
										}
										}catch(Exception e)
											{
											expiryDate10.add("");
											}
										break;
								
									case 33:
										try
										{
											if(rowData[j].getContents().length() != 0)
										{
											
										qty10.add(new BigDecimal(rowData[j].getContents()));
										
										}
										else
										{
											qty10.add(new BigDecimal(0));
										}
										}catch(Exception e)
											{
											qty10.add(new BigDecimal(0));
											}
										break;
									
									}
								}
							}
						}
						workbook.close();
						//session.setAttribute("itemIdList", itemIdList);
						
						utilMap.put("itemIdList",itemIdList);
						utilMap.put("pvmsNoList",pvmsNoList);
						utilMap.put("nomenclatureList",nomenclatureList);
						utilMap.put("auList",auList);
						
						utilMap.put("batch1",batch1);
						utilMap.put("batch2",batch2);
						utilMap.put("batch3",batch3);
						utilMap.put("batch4",batch4);
						utilMap.put("batch5",batch5);
						utilMap.put("batch6",batch6);
						utilMap.put("batch7",batch7);
						utilMap.put("batch8",batch8);
						utilMap.put("batch9",batch9);
						utilMap.put("batch10",batch10);
						utilMap.put("expiryDate1",expiryDate1);
						utilMap.put("expiryDate2",expiryDate2);
						utilMap.put("expiryDate3",expiryDate3);
						utilMap.put("expiryDate4",expiryDate4);
						utilMap.put("expiryDate5",expiryDate5);
						utilMap.put("expiryDate6",expiryDate6);
						utilMap.put("expiryDate7",expiryDate7);
						utilMap.put("expiryDate8",expiryDate8);
						utilMap.put("expiryDate9",expiryDate9);
						utilMap.put("expiryDate10",expiryDate10);
						utilMap.put("qty1",qty1);
						utilMap.put("qty2",qty2);
						utilMap.put("qty3",qty3);
						utilMap.put("qty4",qty4);
						utilMap.put("qty5",qty5);
						utilMap.put("qty6",qty6);
						utilMap.put("qty7",qty7);
						utilMap.put("qty8",qty8);
						utilMap.put("qty9",qty9);
						utilMap.put("qty10",qty10);
						utilMap.put("deptId",deptId);
						utilMap.put("hospitalId",hospitalId);
						utilMap.put("userName",userName);
						//box.put("itemIdList", itemIdList);
						box.put("deptId", deptId);
						box.put("hospitalId", hospitalId);
						box.put("numOfRows", 15);
						box.put("pageCount", 10);
						box.put("currPage", 1);
						
						timeMap=storesHandlerService.importPvmsMaster(utilMap);
						String time=(String)timeMap.get("time");
						List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
						if(timeMap.get("departmentList") != null){
							departmentList = (List)timeMap.get("departmentList");
						}
						box.put("time", time);
						if(timeMap .get("msg") != null){
							msg =(String)timeMap.get("msg");
						}
						/*if (succesfullyAdded) {
							msg = "Record Added Successfully !!";
						} else {
							msg = "Try Again !";

						}*/
						map.put("msg", msg);
						map.put("departmentList", departmentList);
						
					} catch (IOException e) {
						e.printStackTrace();

					}
					
					}
					catch(Exception ioe)
					{
					ioe.printStackTrace();
					} 
					//map = pharmacyMasterHandlerService.showItemJsp(deptId,hospitalId);
					
					jsp = "storeBalance";
					jsp += ".jsp";
					//title = "Tender Proposal";
					map.put("contentJsp", jsp);
					map.put("flag1", flag1);
					
					map.put("groupId", box.getInt("groupId"));
					map.put("subGroupId", box.getInt("subGroupId"));
					map.put("title", title);
					return new ModelAndView("indexB", "map", map);

		}  
		public void checkGrnNo(HttpServletRequest request,HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			Box box = HMSUtil.getBox(request);
			int deptId = 0;
			HttpSession session = request.getSession();
			if (session.getAttribute("deptId") != null)
				deptId = Integer.parseInt("" + session.getAttribute("deptId"));
			int hospitalId=0;
			if (session.getAttribute("hospitalId") != null)
				hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));
			box.put("deptId", deptId);
			box.put("hospitalId", hospitalId);
			map = storesHandlerService.checkgrnNo(box);
			List<StoreGrnM> storeGrnMList = new ArrayList<StoreGrnM>();
			if (map.get("storeGrnMList") != null) {
				storeGrnMList = (List<StoreGrnM>) map.get("storeGrnMList");
			}
			StringBuffer sb = new StringBuffer();

			if(storeGrnMList.size() > 0){
				sb.append("<item>");
				sb.append("<message>" + "CRV/RV No. already exists. " + "</message>");
				sb.append("</item>");
			}
			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");
			try {
				response.getWriter().write(
						"<?xml version='1.0' encoding='ISO-8859-1'?>");
				response.getWriter().write("<items>");
				response.getWriter().write(sb.toString());
				response.getWriter().write("</items>");
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		
		
		//---Stores Help
		
		public void showStoresHelp(HttpServletRequest request,HttpServletResponse response) {

				
				String userHome = getServletContext().getRealPath("");
				String fileSeparator = System.getProperty("file.separator");
				String uploadURL = userHome
						+ fileSeparator
						+ "help"
						+ fileSeparator;
						
			
				
				try {
					
					response.setContentType("application/pdf");
					
					response.setHeader("Content-Disposition", "attachment;filename="
							+ java.net.URLEncoder.encode("Medical Stores.pdf")
							+ "");

					File f = new File(uploadURL + "/Medical Stores.pdf");
					InputStream in = new FileInputStream(f);
					response.getOutputStream().flush();
					ServletOutputStream outs = response.getOutputStream();

					long length = f.length();

					if (length > Integer.MAX_VALUE) {
						// File is too large
					}

					// Create the byte array to hold the data
					byte[] bytes = new byte[(int) length];

					int offset = 0;
					int numRead = 0;
					while (offset < bytes.length
							&& (numRead = in.read(bytes, offset, bytes.length - offset)) >= 0) {
						offset += numRead;
					}

					if (offset < bytes.length) {
					}
					outs.write(bytes);
					in.close();

				} catch (IOException ioe) {
					ioe.printStackTrace();
				}

			
			}
		
		/**
		 * Update MMF Entry
		 * Added By Ritu
		 * Date 21-02-0213
		 */
		public ModelAndView updateMmfDepartmentEntry(HttpServletRequest request,HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			Box box = HMSUtil.getBox(request);
			int deptId = 0;
			HttpSession session = request.getSession();
			if (session.getAttribute("deptId") != null)
				deptId = Integer.parseInt("" + session.getAttribute("deptId"));
			int hospitalId=0;
			if (session.getAttribute("hospitalId") != null)
				hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));
			box.put("deptId", deptId);
			box.put("hospitalId", hospitalId);
			map = storesHandlerService.updateMmfDepartmentEntry(box);
			boolean succesfullyUpdated = false;
			succesfullyUpdated = (Boolean)map.get("succesfullyUpdated");
			String message = "";
			if(succesfullyUpdated){
				message = "MMF Entry updated successfully.";
			}else{
				message = "Some Problem Occured.";
			}
			map = storesHandlerService.showMmfDepartment(deptId, hospitalId);
			map.put("message", message);
			jsp = "mmfDepartment";
			jsp += ".jsp";
			
			map.put("contentJsp", jsp);
			return new ModelAndView("indexB", "map", map);
		}
		public ModelAndView showUpdateBatchNoJsp(HttpServletRequest request,HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			HttpSession session = request.getSession();
			jsp = "updateBatchNo";
			jsp += ".jsp";
			
			map.put("contentJsp", jsp);
			return new ModelAndView("indexB", "map", map);
		}
		
		public ModelAndView getItemDetailsToUpdate(HttpServletRequest request,HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			Box box = HMSUtil.getBox(request);
			int deptId = 0;
			HttpSession session = request.getSession();
			if (session.getAttribute("deptId") != null)
				deptId = Integer.parseInt("" + session.getAttribute("deptId"));
			int hospitalId=0;
			if (session.getAttribute("hospitalId") != null)
				hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));
			box.put("deptId", deptId);
			box.put("hospitalId", hospitalId);
			
			map = storesHandlerService.getItemDetailsToUpdate(box);
			jsp = "updateBatchNo";
			jsp += ".jsp";
			
			map.put("contentJsp", jsp);
			return new ModelAndView("indexB", "map", map);
		}
		
		public ModelAndView updateBatchAndExpiryDate(HttpServletRequest request,HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			Box box = HMSUtil.getBox(request);
			int deptId = 0;
			HttpSession session = request.getSession();
			if (session.getAttribute("deptId") != null)
				deptId = Integer.parseInt("" + session.getAttribute("deptId"));
			int hospitalId=0;
			if (session.getAttribute("hospitalId") != null)
				hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));
			box.put("deptId", deptId);
			box.put("hospitalId", hospitalId);
			
			map = storesHandlerService.updateBatchAndExpiryDate(box);
			boolean succesfullyUpdated = false;
			succesfullyUpdated = (Boolean)map.get("succesfullyUpdated");
			String message = "";
			if(succesfullyUpdated){
				message = "Batch No./Expiry Date updated successfully.";
			}else{
				message = "Some Problem Occured.";
			}
			map = storesHandlerService.getItemDetailsToUpdate(box);
			map.put("message", message);
			jsp = "updateBatchNo";
			jsp += ".jsp";
			
			map.put("contentJsp", jsp);
			return new ModelAndView("indexB", "map", map);
		}
		public ModelAndView getItemBatch(HttpServletRequest request, HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			Box box = HMSUtil.getBox(request);
			int deptId = 0;
			int hospitalId = 0;
			HttpSession session = request.getSession();
			if (session.getAttribute("deptId") != null)
				deptId = Integer.parseInt("" + session.getAttribute("deptId"));
			box.put("deptId", deptId);
			if (session.getAttribute(HOSPITAL_ID) != null) {
				hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
				box.put("hospitalId", hospitalId);
			}
			map = storesHandlerService.getItemBatch(box);
			map.put("flag", box.getString("flag"));
			String jsp ="responseForUpdateBatchNo";
			return new ModelAndView(jsp,"map",map);
		}
		
		public ModelAndView generateExcelForMmf(HttpServletRequest request, HttpServletResponse response){

			Map<String, Object> requestParameters = new HashMap<String, Object>();
			HttpSession session = request.getSession();
			int hospitalId = 0;
			int deptId = 0;
			Box box = HMSUtil.getBox(request);
			String hospitalName = "";
			String deptName = "";
			String query = "";
			String po_id="";
			List<MasStoreSupplier> supplierList=null;

			session = request.getSession();
			try {

				if (session.getAttribute("hospitalId") != null) {
					hospitalId = (Integer) session.getAttribute("hospitalId");
					hospitalName = storesHandlerService.getHospitalName(hospitalId);
					box.put("hospitalName", hospitalName);
					box.put("hospitalId",hospitalId);
				}

				if (session.getAttribute("deptId") != null) {
					deptId = (Integer) session.getAttribute("deptId");
					box.put("deptId", deptId);
				}

				if (session.getAttribute("deptName") != null) {
					deptName = session.getAttribute("deptName").toString();
					box.put("deptName", deptName);
				}
		
				
			}catch (Exception e)
			{
				e.printStackTrace();
			}

			HSSFWorkbook wb = new HSSFWorkbook();
			

			try {

					map = storesHandlerService.generateExcelForMmf(box);
			
				if(map.get("wb") != null){
					
				wb = (HSSFWorkbook) map.get("wb");
				DateFormat dateFormat = new SimpleDateFormat("MM-dd-yyyy HH:mm:ss");
				Date date = new Date();

				String strDateFormat = "hh:mm:ss a";
				SimpleDateFormat sdf = new SimpleDateFormat(strDateFormat);
				String jk=sdf.format(date);
				String preDate=dateFormat.format(date);
				String xyz[]=preDate.split(" ");
				String abc[]=jk.split(":");
				String abcd=abc[0]+"-"+abc[1]+"-"+abc[2];
				String rgv[]=abc[2].split(" ");
				abc[2]=rgv[0]+rgv[1];
				preDate=xyz[0]+"-"+abc[0]+"."+abc[1]+"."+abc[2];
				String file = "MMFExcel.xls";
				response.setContentType("application/vnd.ms-excel");
				response.setHeader("Content-disposition", "attachment; filename="+ file);
				wb.write(response.getOutputStream());
				}
				}catch (IOException ioe) {
					ioe.printStackTrace();
			}
			return null;
		
		}
		public void getPvmsID (HttpServletRequest request,HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			List<Integer> pvmsList = new ArrayList<Integer>();
			String pvmsNo = "";

			try {
				if (request.getParameter("pvmsNo") != null) {
					pvmsNo = request.getParameter("pvmsNo");
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			map = storesHandlerService.getPvmsID(pvmsNo);
			if(map.get("pvmsList")!=null){
				pvmsList = (List<Integer>)map.get("pvmsList");
			}
			StringBuffer sb = new StringBuffer();
			try {
				
				sb.append("<items>");
				if(pvmsList.size()>0)
				{
					sb.append("<item>");
					sb.append("<pvmsId>" + (Integer)pvmsList.get(0) + "</pvmsId>");
					sb.append("</item>");
					
				}
				sb.append("</items>");
				response.setContentType("text/xml");
				response.setHeader("Cache-Control", "no-cache");
			} catch (Exception e) {
				e.printStackTrace();
			}
			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");
			try {
				response.getWriter().write(
						"<?xml version='1.0' encoding='ISO-8859-1'?>");
				response.getWriter().write("<chargeCodes>");
				response.getWriter().write(sb.toString());
				response.getWriter().write("</chargeCodes>");

			} catch (Exception e) {
				e.printStackTrace();
			}

			
		}
		
		
		public ModelAndView showDrugExpiryList(HttpServletRequest request, HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			HttpSession session = request.getSession();
			int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			
			//map = storesHandlerService.showDrugExpiryList(hospitalId);
			String jsp = "";
			
			jsp = "drugExpiryList.jsp";
			map.put("contentJsp", jsp);
			
			return new ModelAndView("index","map",map);
		}
		
		public ModelAndView getDrugExpiryList(HttpServletRequest request,HttpServletResponse response)		
		{
			
			Map<String,Object> map = new HashMap<String,Object>();
			HttpSession session = request.getSession();
			int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			int deptId = (Integer) session.getAttribute("deptId");
			
			List<StoreItemBatchStock> stockList = new ArrayList<StoreItemBatchStock>();		
			Box box = HMSUtil.getBox(request);
			box.put("hospitalId", hospitalId);
			box.put("deptId", deptId);
		
			
		
			map = storesHandlerService.getDrugExpiryList(box);	
			
			if(map.get("stockList")!= null)
			{
				stockList =(List<StoreItemBatchStock>)map.get("stockList");
			}
			
			
			int totalRecords = 0;
			if(map.get("totalRecords")!= null)
			{
				totalRecords = (Integer) map.get("totalRecords");
			}
			
			try
			{
				PrintWriter pw = response.getWriter();	
				
				pw.write("[");
				int counter=1;
				int i=0;
				System.out.println("stockList="+stockList);
				for(StoreItemBatchStock list : stockList)
				{
					
					
				    if(counter != stockList.size())
				    {
				    	
				    	
				    		pw.write("{\"Id\": \""+list.getId()+"\",\"ExpiryDate\": \""+(list.getExpiryDate() != null?HMSUtil.changeDateToddMMyyyy(list.getExpiryDate()):"")+"\",\"Pvms\": \""+(list.getItem()!=null?list.getItem().getPvmsNo():"")+"\",\"Nonenclature\": \""+(list.getItem()!=null?list.getItem().getNomenclature():"")+"\",\"AU\": \""+(list.getItem().getItemConversion()!=null?list.getItem().getItemConversion().getItemUnitName():"")+"\",\"Batch\": \""+(list.getBatchNo()!=null?list.getBatchNo():"")+"\",\"ClosingStock\": \""+(list.getClosingStock()!=null?list.getClosingStock():"")+"\",\"totalRecords\":\""+totalRecords+"\"},");
				    	
				    }
				    else
				    {		    	
				    	
				    	pw.write("{\"Id\": \""+list.getId()+"\",\"ExpiryDate\": \""+(list.getExpiryDate() != null?HMSUtil.changeDateToddMMyyyy(list.getExpiryDate()):"")+"\",\"Pvms\": \""+(list.getItem()!=null?list.getItem().getPvmsNo():"")+"\",\"Nonenclature\": \""+(list.getItem()!=null?list.getItem().getNomenclature():"")+"\",\"AU\": \""+(list.getItem().getItemConversion()!=null?list.getItem().getItemConversion().getItemUnitName():"")+"\",\"Batch\": \""+(list.getBatchNo()!=null?list.getBatchNo():"")+"\",\"ClosingStock\": \""+(list.getClosingStock()!=null?list.getClosingStock():"")+"\",\"totalRecords\":\""+totalRecords+"\"}");
				    	
				    	
				    }
				
				    counter++;	
				    i++;
				}
				
				
				pw.write("]");
				
				
			}
			
			catch(Exception e)
			{
				stockList.clear();
				
				e.printStackTrace();
			}	
			stockList.clear();
			
			return null;		
			

		}
		
		
	public ModelAndView generateDrugExpiryListReport(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String,Object> map = new HashMap<String,Object>();
		HttpSession session = request.getSession();
		String deptName="";
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);		
		int deptId = (Integer) session.getAttribute("deptId");		
		List<StoreItemBatchStock> stockList = new ArrayList<StoreItemBatchStock>();		
		Box box = HMSUtil.getBox(request);
		box.put("hospitalId", hospitalId);
		String hospitalName = storesHandlerService.getHospitalName(hospitalId);
		box.put("hospitalName", hospitalName);		
		box.put("deptId", deptId);		
		if (session.getAttribute("deptName") != null) {
			deptName = session.getAttribute("deptName").toString();
			box.put("deptName", deptName);
		}
		
		String userHome = getServletContext().getRealPath("");	         
        String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
        map.put("path", imagePath);
        
        int expiryPeriod = box.getInt("ddlExpiryPeriod");
		String pvmsNo = box.getString("pvmsNiv");
		String nomenclature = box.getString("nomenclature");
		String nomen[] = nomenclature.split("\\[");
		Calendar cal = Calendar.getInstance();
		String query1 = "";
		String query="";
		/*SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");*/
		Date currentDate = new Date();
//		String currentDate = sdf.format(date);
        
    	Date fromDate = null;
		Date toDate = null;
		if (request.getParameter(FROM_DATE) != null
				&& !(request.getParameter(FROM_DATE).equals(""))) {
			fromDate = HMSUtil.convertStringTypeDateToDateType(request
					.getParameter(FROM_DATE));
			map.put("fromDate", fromDate);
			System.out.println("fromDate"+fromDate);
		
		}
		if (request.getParameter(TO_DATE) != null
				&& !(request.getParameter(TO_DATE).equals(""))) {
			toDate = HMSUtil.convertStringTypeDateToDateType(request
					.getParameter(TO_DATE));
			map.put("toDate", toDate);
			
		
		}
		
		
		  
		if (!nomen[0].equals("")) {
			query1 = query1 + "AND b.nomenclature = '"
					+ nomen[0] + "' ";
		//	query1 = query1 + "AND mas_store_item.nomenclature =:nomen[0]";
			map.put("nomen[0]", nomen[0]);
		}
		if (request.getParameter("pvmsNiv") != null &&(!request.getParameter("pvmsNiv").equals(""))) {
			query1 = query1 + "AND b.pvms_no = '"
							+ request.getParameter("pvmsNiv").toUpperCase() + "' ";
			
		
			map.put("pvms", request.getParameter("pvmsNiv").toUpperCase());
		}
		
	/*	if(expiryPeriod==0)
		{
			  System.out.println("expiryPeriod="+expiryPeriod);
			  
			   cal.add(Calendar.DATE,0);
			   date = cal.getTime(); 
			   String date_1 = sdf.format(date);
			   System.out.println("date="+date);
			   
			  query=query+"a.expiry_date < '"+date_1+"' and "; 
			   //cr= cr.add(Restrictions.le("ExpiryDate", date));
			
		}
		
		else if(expiryPeriod==29)
		{
			  System.out.println("expiryPeriod="+expiryPeriod);
			  
			  cal.add(Calendar.DATE,30);
			 
			   date = cal.getTime(); 
			   Date today = new Date();
			   String date_1 = sdf.format(today);
			   String date_2 = sdf.format(date);
			   query=query+"a.expiry_date between '"+date_1+"' and '"+date_2+ "' and ";  
			   
			  // cr= cr.add(Restrictions.le("ExpiryDate", date));
			  // cr= cr.add(Restrictions.between("ExpiryDate", today, date));
			
		}
		else if(expiryPeriod != 0)
		   {  
			   
			   System.out.println("expiryPeriod="+expiryPeriod);
				  
			   cal.add(Calendar.DATE, +expiryPeriod);
			   date = cal.getTime(); 
			   String date_1 = sdf.format(date);
			   System.out.println("date="+date);
			   
			  query=query+"a.expiry_date > '"+date_1+"' and "; 
			  // cr= cr.add(Restrictions.ge("ExpiryDate", date));
			   
		   }*/
		


			  
		
			
				
		System.out.println("query="+query);
	
		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		map.put("deptName", deptName);
		map.put("hospitalId", hospitalId);
		map.put("hospitalName", hospitalName);
		map.put("query", query);
		map.put("deptId", deptId);
		map.put("expiryPeriod", expiryPeriod);
		map.put("currentDate", currentDate);
	/*	map.put("pvmsNo", pvmsNo);
		map.put("nomen", nomenclature);*/
		map.put("query1", query1);
		HMSUtil.generateReport("Drug_ExpiryList_Report", map,
				(Connection) connectionMap.get("con"), response,
				getServletContext());
		return null;

	}
		
		// javed
		public ModelAndView getFirstAid(
				HttpServletRequest request, HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			int deptId = 0;
		String type="";
		String date="";
		String issue="";
		int hospitalId=0;
			Map<String, Object> requestParameters = new HashMap<String, Object>();

			// add by javed khan
			HttpSession session = request.getSession();

			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
				requestParameters.put("hospitalId", hospitalId);

			}

			if (session.getAttribute("deptId") != null) {
				deptId = (Integer) session.getAttribute("deptId");
				requestParameters.put("deptId", deptId);

			}
			if (request.getParameter("type") != null) {
				type = (String)request.getParameter("type");
				requestParameters.put("type",type);

			}
			if (request.getParameter("issue") != null) {
				issue = (String)request.getParameter("issue");
				requestParameters.put("issue",issue);

			}
			if (request.getParameter("date") != null) {
				date = (String)request.getParameter("date");
				requestParameters.put("date",date);

			}
			map = storesHandlerService.getUnit(requestParameters);
			title = "Issue to First Aid";
			jsp = "responceForFirstAid";
			jsp = jsp + ".jsp";
			map.put("issue",issue);
			map.put("date",date);
			map.put("contentJsp", jsp);
			map.put("title", title);

			return new ModelAndView("indexB", "map", map);
			//return new ModelAndView(jsp, "map", map);
		}
		
		 public ModelAndView submitIssueForFirstAid(HttpServletRequest request,HttpServletResponse response)
		    {
		    	Map<String, Object> map = new HashMap<String, Object>();
		    	Map<String,Object> dataMap = new HashMap<String, Object>();
		    	HttpSession session = request.getSession();
		    	int hospitalId = (Integer)session.getAttribute(HOSPITAL_ID);
		    	int deptId = (Integer)session.getAttribute("deptId");
		    	int indentDtId =0;
		    	boolean b = false;
		    	String issuedBatchIdAndQty="";
		    	Set set = new  HashSet();
		    	List<StoreIssueT> childList=new ArrayList<StoreIssueT>();

		    	Map<String, Object> utilMap = new HashMap<String, Object>();
		    	Box box = HMSUtil.getBox(request);
		    	utilMap = (Map<String, Object>)HMSUtil.getCurrentDateAndTime();
		    	String date = (String)utilMap.get("currentDate");
		    	String time = (String) utilMap.get("currentTime");

		    	BigDecimal totalAmtAllItemsWithoutTax = new BigDecimal(0);
		    	BigDecimal totalSalesTaxAllItems = new BigDecimal(0);
		    	BigDecimal totalAmtAllItemsIncludingTax = new BigDecimal(0);
		    	BigDecimal totalPayableAmtAllItemsIncludingTax = new BigDecimal(0);
		    	BigDecimal amtInRs = new BigDecimal(0);
		    	BigDecimal roundAmtPs = new BigDecimal(0);
		    	BigDecimal zero = new BigDecimal("0");

		    	String[] array1 = request.getParameterValues("tt8");
		    	String[] totalQuantityIssued = request.getParameterValues("tt6");
		    	String[] totalQuantityRequested = request.getParameterValues(RequestConstants.QTY_IN_REQUEST);
		    	//String[] storeIndentTIdArray = request.getParameterValues("storeIndentTId");
		    	/* if (request.getParameter("indentDtId") != null) {
		    	indentDtId= Integer.parseInt(request.getParameter("indentDtId").trim());
		    	utilMap.put("indentDtId", indentDtId);
		    	}
		    	*/
		    	StoreIssueM issueM = new StoreIssueM();
		    	issueM.setIssueType("i");
		    	issueM.setIssueNo(request.getParameter(ISSUE_NO));
		    	issueM.setIssueDate(HMSUtil.convertStringTypeDateToDateType(request.getParameter(ISSUE_DATE)));

		    	MasDepartment department = new MasDepartment();
		    	department.setId(deptId);
		    	issueM.setDepartment(department);

		    	MasDepartment department2 = new MasDepartment();
		    	department2.setId(Integer.parseInt(request.getParameter("firstAidDeptId")));
		    	issueM.setToStore(department2);
		    	
		    	issueM.setSectionName(request.getParameter("firstAidSectionName"));
		    	
		    	
		    	

		    	/*StoreInternalIndentM internalIndentM = new StoreInternalIndentM();
		    	internalIndentM.setId(Integer.parseInt(""+request.getParameter(REQUEST_NO)));
		    	issueM.setRequestNo(internalIndentM);*/
		    	try{
		    	//issueM.setRequestDate(HMSUtil.dateFormatterddmmyy((String)request.getParameter(REQUEST_DATE)));
		    		issueM.setRequestDate(HMSUtil.convertStringTypeDateToDateType((String)request.getParameter(REQUEST_DATE)));
		    	}catch(Exception e){
		    		issueM.setRequestDate(null);
		    	}
		    	/*MasEmployee employee = new MasEmployee();
		    	employee.setId(Integer.parseInt(request.getParameter(REQUEST_BY)));
		    	issueM.setRequestBy(employee);

		    	MasEmployee employee2 = new MasEmployee();
		    	employee2.setId(Integer.parseInt(request.getParameter(APPROVED_BY)));
		    	issueM.setApprovedBy(employee2);*/

		    	MasEmployee employee3 = new MasEmployee();
		    	employee3.setId(Integer.parseInt(request.getParameter(ISSUED_BY)));
		    	issueM.setIssuedBy(employee3);
		    	issueM.setStatus("o");

		    	MasHospital hospital = new MasHospital();
		    	hospital.setId(hospitalId);
		    	issueM.setHospital(hospital);

		    	issueM.setDocNo(request.getParameter(REQUEST_NO));
		    	issueM.setLastChgBy(userName);
		    	issueM.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(date));
		    	issueM.setLastChgTime(time);
		    	utilMap.put("issueM", issueM);
		    	int k=1;
		    	int  totalQtyIssued = 0;
		    	//for(int i=0;i<array1.length;i++) {
		    	for(int i=0;i<array1.length;i++) {
		    	int issuedQty=0;
		    	int batchId=0;
		    	int brandId=0;
		    	BigDecimal totalQtyRequest=null;
		    	if(!array1[i].trim().equals("blank")) {
		    	if(!totalQuantityIssued[i].equals("")){
		    	totalQtyIssued =Integer.parseInt(totalQuantityIssued[i]);
		    	}
		    	/*if(!totalQuantityRequested[i].equals(""))
		    	{
		    	totalQtyRequest=new BigDecimal(totalQuantityRequested[i]);
		    	}*/
		    	if(!(request.getParameter(RequestConstants.QTY_IN_REQUEST+(i+1))).equals(""))
		    	{
		    	totalQtyRequest=new BigDecimal(request.getParameter(RequestConstants.QTY_IN_REQUEST+(i+1)));
		    	}


		    	if (request.getParameter(RequestConstants.QTY_ISSUED+k) != null && !request.getParameter(RequestConstants.QTY_ISSUED+k).equals("")) {
		    	issuedQty= Integer.parseInt(request.getParameter(RequestConstants.QTY_ISSUED+k).trim());
		    	}
		    	Integer storeIndentTId = 0;

		    	String item[]=request.getParameterValues(RequestConstants.ITEM_ID);
		    	String brand[]=request.getParameterValues("brandId");
		    	String []subArray1 = array1[i].split(",");
		    	MasStoreItem masStoreItem = new MasStoreItem();
		    	//masStoreItem.setId(Integer.parseInt(item[i]));
		        masStoreItem.setId(Integer.parseInt(request.getParameter(RequestConstants.ITEM_ID+(i+1))));
		    	MasStoreItem isstedItem = new MasStoreItem();
		    	//isstedItem.setId(Integer.parseInt(item[i]));
		    	isstedItem.setId(Integer.parseInt(request.getParameter(RequestConstants.ITEM_ID+(i+1))));
		    	if (request.getParameter(RequestConstants.BATCH_ID+i) != null) {
		    	batchId= Integer.parseInt(request.getParameter(RequestConstants.BATCH_ID+i).trim());
		    	}
		    	/*if (request.getParameter(RequestConstants.BRAND_ID+i) != null) {
		    	brandId= Integer.parseInt(request.getParameter(RequestConstants.BRAND_ID+i).trim());
		    	}*/

		    	/*brandId=Integer.parseInt(brand[i]);
		    	*/

		    	brandId=Integer.parseInt(request.getParameter("brandId"+(i+1)));

		    	issuedBatchIdAndQty=issuedBatchIdAndQty+"#"+batchId+"/"+issuedQty;
		    	for(int j=0;j<subArray1.length;j++) {
		    	String subArray2[] = subArray1[j].split("@");
		    	String qty = subArray2[0].trim();
		    	String batch = subArray2[1].trim();
		    	String expiryDate=subArray2[2].trim();

		    	int batchStockId = Integer.parseInt(subArray2[3].trim());
		    	String cost=subArray2[4].trim();

		    	StoreIssueT child = new StoreIssueT();
		    	child.setBatchNo(batch);
		    	child.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expiryDate));
		    	child.setQtyIssued(new BigDecimal(qty));
		    	child.setQtyRequest(totalQtyRequest);
		    	StoreItemBatchStock batchStock = new StoreItemBatchStock();
		    	batchStock.setId(batchStockId);
		    	child.setBatchStock(batchStock);
		        MasStoreBrand masBrand = new MasStoreBrand();
		    	masBrand.setId(brandId);
		    	child.setBrand(masBrand);

		    	//child.setIssueM(issueM);
		    	child.setItem(masStoreItem);
		    	child.setItemIssued(isstedItem);
		    	if(cost == null && !cost.equals("")){
		   	    child.setCostPrice(new BigDecimal(cost));
		    	}
//		    	    child.setRemarks(request.getParameter(RequestConstants.REMARKS_TEMP));
		    	child.setSrNo(Integer.parseInt(request.getParameter("SRNo")));
		    	child.setIssued("y");
		    	//child.setSalesTaxAmt(new BigDecimal(salesTax));
		    	//child.setAmtIncludingSalesTax(new BigDecimal(amtIncludingSalesTax));
//		    	    set.add(child);
		    	childList.add(child);
		    	}
		    	}
		    	totalQtyIssued = totalQtyIssued+issuedQty;


		    	k = k+1;
		    	}
		    	utilMap.put("issuedBatchIdAndQty", issuedBatchIdAndQty);
		    	utilMap.put("totalQtyIssued", totalQtyIssued);
		    	utilMap.put("deptId", deptId);
		    	utilMap.put("childList", childList);
//		    	    issueM.setStoreIssueTs(set);

		    	map = storesHandlerService.insertIssueForIndentToUnit(utilMap, box);
		    	String msg = "";
		    	if(map.get("b")!=null)
		    	{
		    	b = (Boolean)map.get("b");
		    	}
		    	if(b){
		    	msg = "Indent Has Been Issued Successfully.";
		    	}else{
		    	msg = "Indent Has Not Been Issued Successfully.";
		    	}
		    	/*map = storesHandlerService.showIssueDispensaryJsp(dataMap);
		    	jsp = RequestConstants.ISSUED_TO_DISPENSARY_JSP;*/
		    	String jsp = STORES_ISSUE_MESSAGE_JSP;
		    	String messageTOBeVisibleToTheUser = "Issued Successfully  ! Do you want to print?";
		    	map.put("messageTOBeVisibleToTheUser",
		    	messageTOBeVisibleToTheUser);
		    	int issueId=0;
		    	if (map.get("issueId") != null)
		    	issueId = Integer.parseInt("" + map.get("issueId"));
		    	jsp+= ".jsp" ;
		    	String title = "Invoice";
		    	map.put("url", "stores?method=showIssueDispWithoutBarCodeJsp");
		    	map.put("issueId", issueId);
		    	map.put("msg", msg);
		    	map.put("contentJsp", jsp);
		    	map.put("title", title);
		    	map.put("issueType", "DispToFirstAid");
		    	return new ModelAndView("index", "map", map);
		    	}
		 
		 public ModelAndView getItemTypeList(HttpServletRequest request,
					HttpServletResponse response) {
				Map<String, Object> map = new HashMap<String, Object>();
				Box box = HMSUtil.getBox(request);
				int group = 0;
				if (request.getParameter("group") != null) {
					group = Integer.parseInt(request.getParameter("group"));
				}
				box.put("group", group);
				map = storesHandlerService.getItemTypeList(box);
				jsp = "responseItemTypeSearch";
				map.put("contentJsp", jsp);
				map.put("title", title);
				return new ModelAndView(jsp, "map", map);
			}
		 
		 public ModelAndView getSectionList(HttpServletRequest request,
					HttpServletResponse response) {
				Map<String, Object> map = new HashMap<String, Object>();
				int itemType = 0;
				try {
					Box box = HMSUtil.getBox(request);
					if (request.getParameter("itemType") != null) {
						itemType = Integer.parseInt(request.getParameter("itemType"));
					}
					box.put("itemType", itemType);
					map = storesHandlerService.getSectionList(box);
					jsp = "responseForSectionSearch";
				} catch (Exception e) {
					e.printStackTrace();
				}
				map.put("contentJsp", jsp);
				return new ModelAndView(jsp, "map", map);
			}
		 
		 public ModelAndView getCategoryList(HttpServletRequest request,
					HttpServletResponse response) {
				Map<String, Object> map = new HashMap<String, Object>();
				int section = 0;
				try {
					Box box = HMSUtil.getBox(request);
					if (request.getParameter("section") != null) {
						section = Integer.parseInt(request.getParameter("section"));
					}
					box.put("section", section);
					map = storesHandlerService.getCategoryList(box);
					jsp = "responseForCategorySearch";
				} catch (Exception e) {
					e.printStackTrace();
				}
				map.put("contentJsp", jsp);
				return new ModelAndView(jsp, "map", map);
			}
		 
		 
		 public ModelAndView showMPRScreen(HttpServletRequest request,HttpServletResponse response) {
				session = request.getSession();
				Map<String, Object> map = new HashMap<String, Object>();
				Map<String, Object> dataMap = new HashMap<String, Object>();
				List<Object[]> financialYearList = new ArrayList<Object[]>();	
				
				int deptId = 0;
				int hospitalId=0;
				if (session.getAttribute("deptId") != null) {
					deptId = (Integer) session.getAttribute("deptId");
				}

				if (session.getAttribute("hospitalId") != null) {
					hospitalId = (Integer) session.getAttribute("hospitalId");
				}
				//map = purchaseOrderHandlerService.showPurchaseOrderJsp(deptId);   comment By Tirath For hospitalId

				dataMap.put("hospitalId", hospitalId);
				dataMap.put("deptId",deptId);

				financialYearList = storesHandlerService.getFinancialYearList();
				
				map = storesHandlerService.showMPRScreen(dataMap);
				List<StoreMaterialPurchaseReqM> MPRNumberList = storesHandlerService.getMPRNumberList(deptId,hospitalId);
				System.out.println("MPRNumberList"+ MPRNumberList.size());
				jsp = "createMPR";
				jsp = jsp + ".jsp";
				title = "Material Purchase Request";
				map.put("contentJsp", jsp);
				map.put("title", title);
				String previousPage = "no";
				map.put("MPRNumberList", MPRNumberList);
				map.put("previousPage", previousPage);
				map.put("financialYearList", financialYearList);
				return new ModelAndView("index", "map", map);
			}
		 
		 public  ModelAndView showNIS(HttpServletRequest request, HttpServletResponse response){
			 	Map<String, Object> map=new HashMap<String, Object>();
			 	Map<String, Object> dataMap=new HashMap<String, Object>();
			 	session = request.getSession();
			 	String flag = null;
			 	int deptId = 0;
			 	int hospitalId = 0;
				if (session.getAttribute("deptId") != null) {deptId = (Integer) session.getAttribute("deptId");}
				if (session.getAttribute("hospitalId") != null) {hospitalId = (Integer) session.getAttribute("hospitalId");}
			 	Box box = (Box)HMSUtil.getBox(request);
			 	box.put("hospitalId", hospitalId);
			 	box.put("deptId", deptId);
			 	if(request.getParameter("employeeId")!=null){
			 		dataMap.put("box", box);
			 	}else{
			 		dataMap.put("box", null);
			 	}
			 	map = storesHandlerService.showNIS(dataMap);
			 	jsp = "nis";
				jsp = jsp + ".jsp";
				title = "Generate NIS";
				map.put("contentJsp", jsp);
				map.put("title", title);
				map.put("flag", flag);
				return new ModelAndView("index", "map", map);
		 }
		 
		 public ModelAndView saveMPR(HttpServletRequest request, HttpServletResponse response)
		 {
			 	Map<String, Object> map = new HashMap<String, Object>();
			 	Map<String, Object> datamap = new HashMap<String, Object>();
				Map<String, Object> dataMap = new HashMap<String, Object>();
				int deptId = 0;
				int hospitalId=0;
				Box box = HMSUtil.getBox(request);	
				HttpSession session = request.getSession();
				
				
				if (session.getAttribute("deptId") != null) {
					deptId = (Integer) session.getAttribute("deptId");
					box.put("deptId", deptId);
				}
				
				if (session.getAttribute("hospitalId") != null) {
					hospitalId = (Integer) session.getAttribute("hospitalId");
					box.put("hospitalId", hospitalId);
				}
				
				dataMap.put("hospitalId", hospitalId);
				dataMap.put("deptId",deptId);


				map = storesHandlerService.showMPRScreen(dataMap);
		 	
			 	
			 	datamap = storesHandlerService.saveMPR(box);
			 	
			 	if(datamap.get("bSuccessfullyAdded")!= null)
			 	{
			 		map.put("bSuccessfullyAdded", datamap.get("bSuccessfullyAdded"));
			 		map.put("message", datamap.get("message"));
			 		map.put("mprHeaderId", datamap.get("mprHeaderId"));
			 		map.put("flag", "MPR");
			 	} 	
			 	
			 		
			 	jsp = "storeMessage_New"; 		
			 	
				jsp = jsp + ".jsp";
				title = "Material Purchase Request";
			 	
			 	
			 	map.put("contentJsp", jsp);
			 	map.put("title", title);	
			 	return new ModelAndView("index", "map", map);
		 }
		 
		 
		 public ModelAndView showMPRList(HttpServletRequest request,HttpServletResponse response)
		 {
		 	List<Object[]> mprPriorityList = new ArrayList<Object[]>();
		 	List<Object[]> financialYearList = new ArrayList<Object[]>();	
		 					
		 	mprPriorityList = storesHandlerService.getMPRPriorityList();		
		 	financialYearList = storesHandlerService.getFinancialYearList();	
		 	
		 	jsp = "mprList";
		 	jsp += ".jsp";
		 	title = "Material Purchase Request List";	
		 	
		 	map.put("contentJsp", jsp);
		 	map.put("title", title);
		 	map.put("mprPriorityList", mprPriorityList);
		 	map.put("financialYearList", financialYearList);	
		 	return new ModelAndView("index", "map", map);
		 }
		 
		 
		 public ModelAndView getListOfMPR(HttpServletRequest request,HttpServletResponse response)
			
		 {
		 	
		 	Map<String,Object> map = new HashMap<String,Object>();
		 	List<StoreMaterialPurchaseReqM> mprHeaderList = new ArrayList<StoreMaterialPurchaseReqM>();
		 	
		 	Box box = HMSUtil.getBox(request);	
		 	
		 	String unitType="";
		 	
		 	HttpSession session = request.getSession();
		 	int locationId = 0;
		 	if (session.getAttribute("locationId") != null) {
		 		locationId =  (Integer)session.getAttribute("locationId");
		 	}
		 	
		 	map = storesHandlerService.getListOfMPR(box);
		 	
		 	if(map.get("mprHeaderList")!= null)
		 	{
		 		mprHeaderList = (List<StoreMaterialPurchaseReqM>) map.get("mprHeaderList");
		 	}
		 	System.out.println("in controller mprHeaderList="+mprHeaderList.size());
		 	int totalRecords = 0;
		 	if(map.get("totalRecords")!= null)
		 	{
		 		totalRecords = (Integer) map.get("totalRecords");
		 	}
		 	
		 	try
		 	{
		 		PrintWriter pw = response.getWriter();	
		 		
		 		pw.write("[");
		 		int counter=1;
		 		
		 		for(StoreMaterialPurchaseReqM list : mprHeaderList)
		 		{
		 			
		 			
		 		    if(counter != mprHeaderList.size())
		 		    {
		 		    	
		 		    		pw.write("{\"Id\": \""+list.getId()+"\",\"Date\": \""+(list.getMprDate() != null?HMSUtil.changeDateToddMMyyyy(list.getMprDate()):"")+"\",\"MPRNo\": \""+(list.getMprNo()!=null?list.getMprNo():"")+"\",\"Priority\": \""+(list.getMprPriority()!=null?list.getMprPriority().getPrName():"")+"\",\"ProjectName\": \""+(list.getProject()!=null?list.getProject():"")+"\",\"Qty\": \""+(list.getHashTableQty()!=null?list.getHashTableQty():"")+"\",\"Value\": \""+(list.getHashTableValue()!=null?list.getHashTableValue():"")+"\",\"PreparedBy\":\""+(list.getPreparedBy() != null?list.getPreparedBy().getEmployee().getFirstName():"")+"\",\"ApprovedBy\": \""+(list.getPreparedBy() != null?list.getPreparedBy().getEmployee().getFirstName():"")+"\",\"Status\":\""+(list.getStatus()!=null?list.getStatus():"")+"\",\"Year\":\""+(list.getFinancial()!=null?list.getFinancial().getFinancialYear():"")+"\",\"totalRecords\":\""+totalRecords+"\"},");
		 		    	
		 		    }
		 		    else
		 		    {		    	
		 		    	pw.write("{\"Id\": \""+list.getId()+"\",\"Date\": \""+(list.getMprDate() != null?HMSUtil.changeDateToddMMyyyy(list.getMprDate()):"")+"\",\"MPRNo\": \""+(list.getMprNo()!=null?list.getMprNo():"")+"\",\"Priority\": \""+(list.getMprPriority()!=null?list.getMprPriority().getPrName():"")+"\",\"ProjectName\": \""+(list.getProject()!=null?list.getProject():"")+"\",\"Qty\": \""+(list.getHashTableQty()!=null?list.getHashTableQty():"")+"\",\"Value\": \""+(list.getHashTableValue()!=null?list.getHashTableValue():"")+"\",\"PreparedBy\":\""+(list.getPreparedBy() != null?list.getPreparedBy().getEmployee().getFirstName():"")+"\",\"ApprovedBy\": \""+(list.getPreparedBy() != null?list.getPreparedBy().getEmployee().getFirstName():"")+"\",\"Status\":\""+(list.getStatus()!=null?list.getStatus():"")+"\",\"Year\":\""+(list.getFinancial()!=null?list.getFinancial().getFinancialYear():"")+"\",\"totalRecords\":\""+totalRecords+"\"}");
		 		    	
		 		    }
		 		
		 		    counter++;		
		 		}
		 		
		 		
		 		pw.write("]");
		 		
		 		
		 	}
		 	
		 	catch(Exception e)
		 	{
		 		mprHeaderList.clear();
		 		e.printStackTrace();
		 	}	
		 	mprHeaderList.clear();
		 	return null;		
		 	

		 }
		 
		 
		 public ModelAndView ViewUpdateMPRDetails(HttpServletRequest request, HttpServletResponse response)
		 {
		 	Map<String,Object>map = new HashMap<String,Object>();
		 	Map<String,Object>map1 = new HashMap<String,Object>();
		 	Map<String,Object>dataMap = new HashMap<String,Object>();
		 	List<StoreMaterialPurchaseReqT> mprDetails = new ArrayList<StoreMaterialPurchaseReqT>();
		 	List<StoreMaterialPurchaseReqM> mprHeader = new ArrayList<StoreMaterialPurchaseReqM>();
		 	List<Object[]> mprPriorityList = new ArrayList<Object[]>();
		 	List<Object[]> financialYearList = new ArrayList<Object[]>();	
		 					
		 	
		 	
		 	HttpSession session = request.getSession();
		 	
		 	
		 	int deptId = 0;
			int hospitalId=0;
			if (session.getAttribute("deptId") != null) {
				deptId = (Integer) session.getAttribute("deptId");
			}

			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
			}
			//map = purchaseOrderHandlerService.showPurchaseOrderJsp(deptId);   comment By Tirath For hospitalId

			dataMap.put("hospitalId", hospitalId);
			dataMap.put("deptId",deptId);
			
			
		 	
		 	Box box = HMSUtil.getBox(request);	
		 	int mprId = 0;
		 	if(box.getInt("mprId") != 0)
		 	{
		 		mprId = box.getInt("mprId");
		 	}

		 	
		 	map = storesHandlerService.getMPRDetails(mprId);
			map1 = storesHandlerService.showMPRScreen(dataMap);
		 	if(map.get("mprDetails")!=null)
		 	{
		 		mprDetails = (List<StoreMaterialPurchaseReqT>) map.get("mprDetails");
		 	}
		 	if(map.get("projectionHeader")!=null)
		 	{
		 		mprHeader = (List<StoreMaterialPurchaseReqM>) map.get("mprHeader");
		 	}
		 	
		 	mprPriorityList = storesHandlerService.getMPRPriorityList();		
		 	financialYearList = storesHandlerService.getFinancialYearList();
		 	
		 		
		 	jsp = "viewUpdateMPRDetails";
		 	
		 	jsp += ".jsp";
		 	title = "View And Update Material Purchase Details";
		 	
		 	
		 	
		 	map.put("mprPriorityList", mprPriorityList);
		 	map.put("financialYearList", financialYearList);
		 	
		 	
		 	if(mprHeader.size()>0)
		 	{
		 		map.put("mprHeader", mprHeader);
		 	}
		 	if(mprDetails.size()>0)
		 	{
		 		map.put("mprDetails", mprDetails);
		 	}
		 	map.put("contentJsp", jsp);
		 	map.put("title", title);
		 	map.put("map1", map1);
		 	return new ModelAndView("index", "map", map);
		 }
		 
		 
		 public ModelAndView updateSavedMPR(HttpServletRequest request, HttpServletResponse response)
		 {
		 	Map<String,Object>map = new HashMap<String,Object>();
		 	Map<String,Object>datamap = new HashMap<String,Object>();
		 	Map<String,Object>dataMap1 = new HashMap<String,Object>();
		 	
		 	List<StoreMaterialPurchaseReqT> mprDetails = new ArrayList<StoreMaterialPurchaseReqT>();
		 	List<StoreMaterialPurchaseReqM> mprHeader = new ArrayList<StoreMaterialPurchaseReqM>();
		 	List<Object[]> mprPriorityList = new ArrayList<Object[]>();
		 	List<Object[]> financialYearList = new ArrayList<Object[]>();
		 	int deptId = 0;
			int hospitalId=0;
			HttpSession session = request.getSession();
			if (session.getAttribute("deptId") != null) {
				deptId = (Integer) session.getAttribute("deptId");
			}

			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
			}
		 	
		 	dataMap1.put("hospitalId", hospitalId);
			dataMap1.put("deptId",deptId);
			
			
		  	
		 	
			map = storesHandlerService.showMPRScreen(dataMap1);
		 	

		 
		 	Box box = HMSUtil.getBox(request);	
		 	int mprHeaderId = 0;
		 	if(box.getInt("mprHeaderId") != 0)
		 	{
		 		mprHeaderId = box.getInt("mprHeaderId");
		 	}

		 	datamap = storesHandlerService.updateSavedMPR(box);
		 	if(datamap.get("bSuccessfullyAdded")!= null)
		 	{
		 		map.put("bSuccessfullyAdded", datamap.get("bSuccessfullyAdded"));
		 		map.put("message", datamap.get("message"));
		 	}
		 	map = storesHandlerService.getMPRDetails(mprHeaderId);
		 	if(map.get("mprDetails")!=null)
		 	{
		 		mprDetails = (List<StoreMaterialPurchaseReqT>) map.get("mprDetails");
		 	}
		 	if(map.get("projectionHeader")!=null)
		 	{
		 		mprHeader = (List<StoreMaterialPurchaseReqM>) map.get("mprHeader");
		 	}		 	
		 	
		 	mprPriorityList = storesHandlerService.getMPRPriorityList();		
		 	financialYearList = storesHandlerService.getFinancialYearList();	
		 	
		 		
		 	jsp = "viewUpdateMPRDetails";		 	
		 	jsp += ".jsp";
		 	title = "View And Update Material Purchase Details";
		 	
		 	
		 	map.put("bSuccessfullyAdded", datamap.get("bSuccessfullyAdded"));
		 	map.put("message", datamap.get("message"));
		 	map.put("financialYearList", financialYearList);
		 	map.put("mprPriorityList", mprPriorityList);
		 	
		 	if(mprHeader.size()>0)
		 	{
		 		map.put("mprHeader", mprHeader);
		 	}
		 	if(mprDetails.size()>0)
		 	{
		 		map.put("mprDetails", mprDetails);
		 	}
		 	map.put("contentJsp", jsp);
		 	map.put("title", title);
		 	return new ModelAndView("index", "map", map);
		 }
		 
		 
		 public ModelAndView DeleteFromDatabase_AddRemoveGrid(HttpServletRequest request, HttpServletResponse response)
		 {
		 	Map<String,Object> datamap = new HashMap<String,Object>();
		 	Box box = HMSUtil.getBox(request);	
		 	boolean bSuccessfullyDelete = false;
		 	datamap = storesHandlerService.DeleteFromDatabase_AddRemoveGrid(box);
		 	
		 	if(datamap.get("bSuccessfullyDelete")!= null)
		 	{
		 		bSuccessfullyDelete = (Boolean) datamap.get("bSuccessfullyDelete");
		 	}
		 	
		 	try
		 	{
		 		PrintWriter pw = response.getWriter();	
		 		if(bSuccessfullyDelete)
		 		pw.write("success~~"+bSuccessfullyDelete);
		 		else
		 			pw.write("failure~~"+bSuccessfullyDelete);
		 			
		 		
		 	}
		 	
		 	catch(Exception e)
		 	{		
		 		e.printStackTrace();
		 	}
		 	return null;
		 }
		 
		 public ModelAndView DeleteFromDatabase_AddRemoveGridRC(HttpServletRequest request, HttpServletResponse response)
		 {
		 	Map<String,Object> datamap = new HashMap<String,Object>();
		 	Box box = HMSUtil.getBox(request);	
		 	boolean bSuccessfullyDelete = false;
		 	datamap = storesHandlerService.DeleteFromDatabase_AddRemoveGridRC(box);
		 	
		 	if(datamap.get("bSuccessfullyDelete")!= null)
		 	{
		 		bSuccessfullyDelete = (Boolean) datamap.get("bSuccessfullyDelete");
		 	}
		 	
		 	try
		 	{
		 		PrintWriter pw = response.getWriter();	
		 		if(bSuccessfullyDelete)
		 		pw.write("success~~"+bSuccessfullyDelete);
		 		else
		 			pw.write("failure~~"+bSuccessfullyDelete);
		 			
		 		
		 	}
		 	
		 	catch(Exception e)
		 	{		
		 		e.printStackTrace();
		 	}
		 	return null;
		 }
		 
		 public ModelAndView showVendorReturnJsp2(HttpServletRequest request,
					HttpServletResponse response) {
				// Session-----
				String userName = "";
				int deptId = 0;
				int hospitalId = 0;

				HttpSession session = request.getSession();
				if (session.getAttribute("userName") != null)
					userName = (String) session.getAttribute("userName");
				if (session.getAttribute("hospitalId") != null)
					hospitalId = Integer.parseInt(""
							+ session.getAttribute("hospitalId"));
				if (session.getAttribute("deptId") != null)
					deptId = Integer.parseInt("" + session.getAttribute("deptId"));
				// --------------------------------------------------------------------------------
				Box box = HMSUtil.getBox(request);
				String returnNo = "";
				int storeFyDocumentNoId = 0;
				String buttonFlag = "";
				Map<String, Object> map = new HashMap<String, Object>();
				map.put("deptId", deptId);
				if (request.getParameter("buttonFlag") != null) {
					buttonFlag = request.getParameter("buttonFlag");

					int pageNo = Integer.parseInt(request.getParameter("pageNo"));

					if (buttonFlag.equals("next")) {

						deptId = Integer.parseInt(request.getParameter("deptId"));
						if (request.getParameter("returnNo") != null) {
							returnNo = (String) request.getParameter("returnNo");
						}
						pageNo++;
						map.put("pageNo", pageNo);
						map.put("buttonFlag", buttonFlag);

					}
				}
				map = storesHandlerService.showVendorReturnJsp(map);

				jsp = VENDOR_RETURN_JSP;
				jsp += ".jsp";
				title = "Return From Dispensary";
				if (request.getParameter("storeFyDocumentNoId") != null) {
					storeFyDocumentNoId = Integer.parseInt(request.getParameter("storeFyDocumentNoId"));
					map.put("storeFyDocumentNoId", storeFyDocumentNoId);
				}
				map.put("returnNo", returnNo);
				map.put("contentJsp", jsp);
				map.put("title", title);
				return new ModelAndView("indexB", "map", map);

			}
		 
		 public ModelAndView showVendorReturnJsp(HttpServletRequest request,
					HttpServletResponse response) {

				int deptId = 0;
				String returnNo = "";
				int storeFyDocumentNoId = 0;
				HttpSession session = request.getSession();
				String buttonFlag = "";
				Map<String, Object> map = new HashMap<String, Object>();

				if (session.getAttribute("deptId") != null) {
					deptId = (Integer) session.getAttribute("deptId");
					map.put("deptId", deptId);
				}
				int hospitalId=0;
				if (session.getAttribute("hospitalId") != null)
				{
					hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));
					map.put("hospitalId", hospitalId);
				}
				if (request.getParameter("buttonFlag") != null) {
					buttonFlag = request.getParameter("buttonFlag");
					int pageNo = Integer.parseInt(request.getParameter("pageNo"));
					if (buttonFlag.equals("next")) {
						deptId = Integer.parseInt(request.getParameter("deptId"));
						if (request.getParameter("returnNo") != null) {
							returnNo = (String) request.getParameter("returnNo");
						}
						pageNo++;
						// map.put("returnNo", returnNo);
						map.put("pageNo", pageNo);
						map.put("deptId", deptId);
						map.put("buttonFlag", buttonFlag);
					}
				}
				map = storesHandlerService.showVendorReturnJsp(map);

				jsp = "returnFromStorestoVendor";
				jsp += ".jsp";
				title = "Return From Stores to Vendor";
				if (request.getParameter("storeFyDocumentNoId") != null) {
					storeFyDocumentNoId = Integer.parseInt(request
							.getParameter("storeFyDocumentNoId"));
					map.put("storeFyDocumentNoId", storeFyDocumentNoId);
				}
				//System.out.println("returnNo="+map.get("returnNo"));
				map.put("returnNo", map.get("returnNo"));
				map.put("contentJsp", jsp);
				map.put("title", title);
				return new ModelAndView("indexB", "map", map);

			}


public ModelAndView showVendorReturnRptJsp(HttpServletRequest request,HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	map = storesHandlerService.showVendorReturnRptJsp();
	jsp = "vendorReturnRpt.jsp";
	title = "Item Catalogue";
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("indexB", "map", map);
}


public ModelAndView printDepartmentReturnJsp(HttpServletRequest request,
		HttpServletResponse response) {

	Map<String, Object> requestParameters = new HashMap<String, Object>();
	int returnNo = 0;
	String period = null;
	BigDecimal[] amount = new BigDecimal[100];
	HttpSession session = request.getSession();
	requestParameters.put("DEPART", session.getAttribute("deptId"));
	try {
		if (request.getParameter(ISSUE_RETURN_ID) != null
				&& !(request.getParameter(ISSUE_RETURN_ID).equals(""))) {
			returnNo = Integer.parseInt(request
					.getParameter(ISSUE_RETURN_ID));
			requestParameters.put("RETURN_ID", returnNo);
		}
		String userHome = getServletContext().getRealPath("");	         
        String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
        requestParameters.put("path", imagePath);
        
        
		
	
	Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
			HMSUtil.generateReport("departmentReturn",
					requestParameters, (Connection) connectionMap.get("con"),
					response, getServletContext());

	} catch (Exception e) {
		e.printStackTrace();
	}
	return new ModelAndView("indexB", "map", map);
}		 

public ModelAndView showNisDetailsJsp(HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	HttpSession session = request.getSession();
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	String jsp = "";
	jsp = "nisDetails.jsp";
	map.put("contentJsp", jsp);
	
	return new ModelAndView("index","map",map);
}
public ModelAndView generateNisDetailsReport(
		HttpServletRequest request, HttpServletResponse response) {

	Map<String,Object> map = new HashMap<String,Object>();
	HttpSession session = request.getSession();
	String deptName="";
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);		
	int deptId = (Integer) session.getAttribute("deptId");		
	List<StoreItemBatchStock> stockList = new ArrayList<StoreItemBatchStock>();		
	Box box = HMSUtil.getBox(request);
	box.put("hospitalId", hospitalId);
	String hospitalName = storesHandlerService.getHospitalName(hospitalId);
	box.put("hospitalName", hospitalName);		
	box.put("deptId", deptId);		
	if (session.getAttribute("deptName") != null) {
		deptName = session.getAttribute("deptName").toString();
		box.put("deptName", deptName);
	}
	
	String userHome = getServletContext().getRealPath("");	         
    String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
    map.put("path", imagePath);

	String pvmsNo = box.getString("pvmsNiv");
	String nomenclature = box.getString("nomenclature");
	String nomen[] = nomenclature.split("\\[");
	Calendar cal = Calendar.getInstance();
	String query1 = "";
	String query="";
	Date fromDate = null;
	Date toDate = null;
	if (request.getParameter(FROM_DATE) != null
			&& !(request.getParameter(FROM_DATE).equals(""))) {
		fromDate = HMSUtil.convertStringTypeDateToDateType(request
				.getParameter(FROM_DATE));
		map.put("fromDate", fromDate);
	}
	if (request.getParameter(TO_DATE) != null
			&& !(request.getParameter(TO_DATE).equals(""))) {
		toDate = HMSUtil.convertStringTypeDateToDateType(request
				.getParameter(TO_DATE));
		map.put("toDate", toDate);
	}
	
	if (!nomen[0].equals("")) {
		query1 = query1 + "AND item.nomenclature = '"
				+ nomen[0] + "' ";
	
		map.put("nomen[0]", nomen[0]);
	}
	if (request.getParameter("pvmsNiv") != null &&(!request.getParameter("pvmsNiv").equals(""))) {
		query1 = query1 + "AND item.pvms_no = '"
						+ request.getParameter("pvmsNiv").toUpperCase() + "' ";
		
	
		map.put("pvms", request.getParameter("pvmsNiv").toUpperCase());
	}
	Map<String, Object> connectionMap = storesHandlerService
			.getConnectionForReport();
	map.put("hospitalName", hospitalName);
	map.put("fromDate", fromDate);
	map.put("toDate", toDate);
	map.put("query1", query1);
	HMSUtil.generateReport("nis_medicine", map,
			(Connection) connectionMap.get("con"), response,
			getServletContext());
	return null;

}

public ModelAndView showVendorReturnRegJsp(HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	HttpSession session = request.getSession();
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	map = storesHandlerService.showVendorReturnRegJsp(hospitalId);
	String jsp = "";
	jsp = "vendorReturnReg.jsp";
	map.put("contentJsp", jsp);
	
	return new ModelAndView("index","map",map);
}
public ModelAndView generateVendorReturnRegReport(
		HttpServletRequest request, HttpServletResponse response) {

	Map<String,Object> map = new HashMap<String,Object>();
	HttpSession session = request.getSession();
	String deptName="";
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);		
	Box box = HMSUtil.getBox(request);
	box.put("hospitalId", hospitalId);
	String hospitalName = storesHandlerService.getHospitalName(hospitalId);
	box.put("hospitalName", hospitalName);		
		
	if (session.getAttribute("deptName") != null) {
		deptName = session.getAttribute("deptName").toString();
		box.put("deptName", deptName);
	}
	
	String userHome = getServletContext().getRealPath("");	         
    String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
    map.put("path", imagePath);
    int supplierId=0;
	
	Calendar cal = Calendar.getInstance();
	String query1 = "";
	String query="";
	Date fromDate = null;
	Date toDate = null;
	if (request.getParameter(FROM_DATE) != null
			&& !(request.getParameter(FROM_DATE).equals(""))) {
		fromDate = HMSUtil.convertStringTypeDateToDateType(request
				.getParameter(FROM_DATE));
		map.put("fromDate", fromDate);
	}
	if (request.getParameter(TO_DATE) != null
			&& !(request.getParameter(TO_DATE).equals(""))) {
		toDate = HMSUtil.convertStringTypeDateToDateType(request
				.getParameter(TO_DATE));
		map.put("toDate", toDate);
	}
	if (request.getParameter("supplierId") != null
			&& !(request.getParameter("supplierId").equals("0"))) {
		supplierId = Integer.parseInt(request.getParameter("supplierId"));
		query1 = query1 + "AND mas_store_supplier.supplier_id ="+supplierId ;
	
		map.put("supplierId", supplierId);
		
	}
	
	Map<String, Object> connectionMap = storesHandlerService
			.getConnectionForReport();
	map.put("hospitalName", hospitalName);
	map.put("fromDate", fromDate);
	map.put("toDate", toDate);
	map.put("query1", query1);
	HMSUtil.generateReport("VendorReturnDocPrintReg", map,
			(Connection) connectionMap.get("con"), response,
			getServletContext());
	return null;

}


public ModelAndView showDepartmentReturnRegJsp(HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	HttpSession session = request.getSession();
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	map = storesHandlerService.showDepartmentReturnRegJsp(hospitalId);
	String jsp = "";
	jsp = "departmentReturnReg.jsp";
	map.put("contentJsp", jsp);
	
	return new ModelAndView("index","map",map);
}
public ModelAndView generateDepartmentReturnRegReport(
		HttpServletRequest request, HttpServletResponse response) {

	Map<String,Object> map = new HashMap<String,Object>();
	HttpSession session = request.getSession();
	String deptName="";
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);		
	Box box = HMSUtil.getBox(request);
	box.put("hospitalId", hospitalId);
	String hospitalName = storesHandlerService.getHospitalName(hospitalId);
	box.put("hospitalName", hospitalName);		
		
	if (session.getAttribute("deptName") != null) {
		deptName = session.getAttribute("deptName").toString();
		box.put("deptName", deptName);
	}
	
	String userHome = getServletContext().getRealPath("");	         
    String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
    map.put("path", imagePath);
    int departmentId=0;
	
	Calendar cal = Calendar.getInstance();
	String query1 = "";
	String query="";
	Date fromDate = null;
	Date toDate = null;
	if (request.getParameter(FROM_DATE) != null
			&& !(request.getParameter(FROM_DATE).equals(""))) {
		fromDate = HMSUtil.convertStringTypeDateToDateType(request
				.getParameter(FROM_DATE));
		map.put("fromDate", fromDate);
	}
	if (request.getParameter(TO_DATE) != null
			&& !(request.getParameter(TO_DATE).equals(""))) {
		toDate = HMSUtil.convertStringTypeDateToDateType(request
				.getParameter(TO_DATE));
		map.put("toDate", toDate);
	}
	if (request.getParameter("departmentId") != null
			&& !(request.getParameter("departmentId").equals("0"))) {
		departmentId = Integer.parseInt(request.getParameter("departmentId"));
		query1 = query1 + "AND d.department_id ="+departmentId ;
	
		map.put("departmentId", departmentId);
		
	}
	
	Map<String, Object> connectionMap = storesHandlerService
			.getConnectionForReport();
	map.put("hospitalName", hospitalName);
	map.put("fromDate", fromDate);
	map.put("toDate", toDate);
	map.put("query1", query1);
	HMSUtil.generateReport("departmentReturnReg", map,
			(Connection) connectionMap.get("con"), response,
			getServletContext());
	return null;

}


public ModelAndView printForRateContractJsp(HttpServletRequest request,HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	Map<String, Object> patientMap = new HashMap<String, Object>();
	int hinId = 0;
	HttpSession session = request.getSession();
	String deptName="";
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);		
	Box box = HMSUtil.getBox(request);
	box.put("hospitalId", hospitalId);
	String hospitalName = storesHandlerService.getHospitalName(hospitalId);
	box.put("hospitalName", hospitalName);		
		
	/*if (session.getAttribute("deptName") != null) {
		deptName = session.getAttribute("deptName").toString();
		box.put("deptName", deptName);
	}*/
	
	String userHome = getServletContext().getRealPath("");	         
    String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
    map.put("path", imagePath);
    int departmentId=0;
	
	Calendar cal = Calendar.getInstance();
	
	int id = 0;
	/*if (request.getParameter("fromDate") != null
			&& !(request.getParameter("fromDate").equals(""))) {
		fromDate = HMSUtil.convertStringTypeDateToDateType(request
				.getParameter("fromDate"));
		map.put("fromDate", fromDate);
	}*/
	if (request.getParameter("id") != null
			&& !(request.getParameter("id").equals(""))) {
		id = Integer.parseInt(request.getParameter("id"));
		
	}
	System.out.println("rcID"+id);
/*	if (request.getParameter("toDate") != null
			&& !(request.getParameter("toDate").equals(""))) {
		toDate = HMSUtil.convertStringTypeDateToDateType(request
				.getParameter("toDate"));
		map.put("toDate", toDate);
	}*/
	/*if (request.getParameter("departmentId") != null
			&& !(request.getParameter("departmentId").equals("0"))) {
		departmentId = Integer.parseInt(request.getParameter("departmentId"));
		query1 = query1 + "AND d.department_id ="+departmentId ;
	
		map.put("departmentId", departmentId);
		
	}*/
	
	Map<String, Object> connectionMap = storesHandlerService
			.getConnectionForReport();
	map.put("hospitalName", hospitalName);
	map.put("rc_id", id);
	/*map.put("fromDate", fromDate);
	map.put("toDate", toDate);*/
	//map.put("query1", query1);
	HMSUtil.generateReport("rc", map,
			(Connection) connectionMap.get("con"), response,
			getServletContext());
	return null;
}
public ModelAndView showRCPrintJsp(HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	HttpSession session = request.getSession();
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	
	map = storesHandlerService.showRCPrintJsp(hospitalId);
	String jsp = "";
	jsp = "rcReport.jsp";
	map.put("contentJsp", jsp);
	
	return new ModelAndView("index","map",map);
}

public ModelAndView rcPrintJsp(HttpServletRequest request,HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	Map<String, Object> patientMap = new HashMap<String, Object>();
	int hinId = 0;
	HttpSession session = request.getSession();
	String deptName="";
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);		
	Box box = HMSUtil.getBox(request);
	box.put("hospitalId", hospitalId);
	String hospitalName = storesHandlerService.getHospitalName(hospitalId);
	box.put("hospitalName", hospitalName);		
		
		
	
    int departmentId=0;
    String pvmsNo = box.getString("pvmsNiv");
	String nomenclature = box.getString("nomenclature");
	String nomen[] = nomenclature.split("\\[");
	
	Calendar cal = Calendar.getInstance();
	String query1 = "";
	Date fromDate = null;
	Date toDate = null;
	if (request.getParameter("fromDate") != null
			&& !(request.getParameter("fromDate").equals(""))) {
		fromDate = HMSUtil.convertStringTypeDateToDateType(request
				.getParameter("fromDate"));
		map.put("fromDate", fromDate);
	}
	if (request.getParameter("toDate") != null
			&& !(request.getParameter("toDate").equals(""))) {
		toDate = HMSUtil.convertStringTypeDateToDateType(request
				.getParameter("toDate"));
		map.put("toDate", toDate);
	}
	if (request.getParameter("departmentId") != null
			&& !(request.getParameter("departmentId").equals("0"))) {
		departmentId = Integer.parseInt(request.getParameter("departmentId"));
		query1 = query1 + "AND d.department_id ="+departmentId ;
	
		map.put("departmentId", departmentId);
		
	}
	if (!nomen[0].equals("")) {
		query1 = query1 + "AND mas_store_item.nomenclature = '"
				+ nomen[0] + "' ";
	
		map.put("nomen[0]", nomen[0]);
	}
	if (request.getParameter("pvmsNiv") != null &&(!request.getParameter("pvmsNiv").equals(""))) {
		query1 = query1 + "AND mas_store_item.pvms_no = '"
						+ request.getParameter("pvmsNiv").toUpperCase() + "' ";
		
	
		map.put("pvms", request.getParameter("pvmsNiv").toUpperCase());
	}
	Map<String, Object> connectionMap = storesHandlerService
			.getConnectionForReport();
	map.put("hospitalName", hospitalName);
	map.put("fromDate", fromDate);
	map.put("toDate", toDate);
	map.put("query1", query1);
	
	String userHome = getServletContext().getRealPath("");	         
    String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
    map.put("path", imagePath);
    
	HMSUtil.generateReport("rateContract", map,
			(Connection) connectionMap.get("con"), response,
			getServletContext());
	return null;
}


public ModelAndView generateMrp(HttpServletRequest request,HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	Map<String, Object> patientMap = new HashMap<String, Object>();
	int hinId = 0;
	HttpSession session = request.getSession();
	String deptName="";
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);		
	Box box = HMSUtil.getBox(request);
	box.put("hospitalId", hospitalId);
	String hospitalName = storesHandlerService.getHospitalName(hospitalId);
	box.put("hospitalName", hospitalName);		
		
	
	
	String userHome = getServletContext().getRealPath("");	         
    String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
    map.put("path", imagePath);
    int departmentId=0;
	
	Calendar cal = Calendar.getInstance();
	String query1 = "";
	String query="";
	int mrpId=0;
	Date toDate = null;
	if (request.getParameter("mrpId") != null
			&& !(request.getParameter("mrpId").equals("0"))) {
		mrpId = Integer.parseInt(request
				.getParameter("mrpId"));
		map.put("mrpId", mrpId);
	}
		Map<String, Object> connectionMap = storesHandlerService
			.getConnectionForReport();
	map.put("hospitalName", hospitalName);
	
	map.put("SUBREPORT_DIR", getServletContext().getRealPath("/reports/"));
	HMSUtil.generateReport("MATERIAL_PURCHASE", map,
			(Connection) connectionMap.get("con"), response,
			getServletContext());
	return null;
}

public ModelAndView createRequestForQuotation(HttpServletRequest request,HttpServletResponse response) {
	session = request.getSession();
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	List<Object[]> financialYearList = new ArrayList<Object[]>();	
	
	int deptId = 0;
	int hospitalId=0;
	if (session.getAttribute("deptId") != null) {
		deptId = (Integer) session.getAttribute("deptId");
	}

	if (session.getAttribute("hospitalId") != null) {
		hospitalId = (Integer) session.getAttribute("hospitalId");
	}
	//map = purchaseOrderHandlerService.showPurchaseOrderJsp(deptId);   comment By Tirath For hospitalId

	dataMap.put("hospitalId", hospitalId);
	dataMap.put("deptId",deptId);

	financialYearList = storesHandlerService.getFinancialYearList();
	
	map = storesHandlerService.showRequestForQuotationJsp(dataMap);
	//List<StoreMaterialPurchaseReqM>MPRNumberList = storesHandlerService.getMPRNumberList(deptId,hospitalId);
	jsp = "createRequestForQuotation";
	jsp = jsp + ".jsp";
	title = "RequestForQuotation";
	map.put("contentJsp", jsp);
	map.put("title", title);
	String previousPage = "no";
	//map.put("MPRNumberList", MPRNumberList);
	map.put("previousPage", previousPage);
	map.put("financialYearList", financialYearList);
	return new ModelAndView("index", "map", map);
}

public ModelAndView getMPRListListbasedonYear(HttpServletRequest request,
		HttpServletResponse response) {
	HttpSession session = request.getSession();
	Map<String, Object> map = new HashMap<String, Object>();
	//Map<String, Object> userMap = new HashMap<String, Object>();
//	List<MasEmployee> docList =  new ArrayList<MasEmployee>();
	Box box = HMSUtil.getBox(request);
	int hospitalId = 0;
	if (session.getAttribute(HOSPITAL_ID) != null) {
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		
	}
	box.put("hospitalId", hospitalId);
	map = storesHandlerService.getMPRListListbasedonYear(box);
	
     jsp = "responseforMPRList";
//}
	map.put("jsp", jsp);
	map.put("title", title);
	return new ModelAndView(jsp, "map", map);
	
}

public ModelAndView getMPRDetailsforQuotation(HttpServletRequest request,HttpServletResponse response)
{

	Map<String, Object> map = new HashMap<String, Object>();
	HttpSession session = request.getSession();
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	int deptId = (Integer) session.getAttribute("deptId");
	
	List<StoreMaterialPurchaseReqT> mprList = new ArrayList<StoreMaterialPurchaseReqT>();
	Box box = HMSUtil.getBox(request);

	box.put("hospitalId", hospitalId);
	box.put("deptId", deptId);


	map = storesHandlerService.getMPRDetailsforQuotation(box);

	if (map.get("mprList") != null) {
		mprList = (List<StoreMaterialPurchaseReqT>) map.get("mprList");
	}

	int totalRecords = 0;
	if (map.get("totalRecords") != null) {
		totalRecords = (Integer) map.get("totalRecords");
	}

	try {
		PrintWriter pw = response.getWriter();

		pw.write("[");
		int counter = 1;
		int i = 0;

		for (StoreMaterialPurchaseReqT list : mprList) {
			
			String deliverySchedule=list.getHeader().getDeliverySchedule() != null ? list.getHeader().getDeliverySchedule(): "";
			deliverySchedule = deliverySchedule.replace("\r", "$");
			deliverySchedule = deliverySchedule.replace("\n", "^");

			if (counter != mprList.size()) {
				
               
				pw.write("{\"Id\": \""
						+ list.getId()
						+ "\",\"DeliveryDate\": \""
						+ (list.getDeliveryDate() != null ? HMSUtil
								.changeDateToddMMyyyy(list.getDeliveryDate())
								: "")
						+ "\",\"MatCode\": \""
						+ (list.getItem() != null ? list.getItem().getPvmsNo() : "")
						+ "\",\"Item\": \""
						+ (list.getItem() != null ? list.getItem().getNomenclature() : "")
						+ "\",\"AU\": \""
						+ (list.getItem().getItemConversion() != null ? list.getItem().getItemConversion().getItemUnitName() : "")
						+ "\",\"QtyReq\": \""
						+ (list.getQtyRequired() != null ? list.getQtyRequired() : "")
						+ "\",\"Delivery\": \""
						+ (list.getHeader().getDeliverySchedule() != null ? deliverySchedule: "")
						+ "\",\"MPRSources\": \""
						+ (list.getSources() != null ? list.getSources().replace("\n", "@").replace("\r", "^").replace("\t", "~"): "")
						+  "\"},");

			} else {
				pw.write("{\"Id\": \""
						+ list.getId()
						+ "\",\"DeliveryDate\": \""
						+ (list.getDeliveryDate() != null ? HMSUtil
								.changeDateToddMMyyyy(list.getDeliveryDate())
								: "")
						+ "\",\"MatCode\": \""
						+ (list.getItem() != null ? list.getItem().getPvmsNo() : "")
						+ "\",\"Item\": \""
						+ (list.getItem() != null ? list.getItem().getNomenclature() : "")
						+ "\",\"AU\": \""
						+ (list.getItem().getItemConversion() != null ? list.getItem().getItemConversion().getItemUnitName() : "")
						+ "\",\"QtyReq\": \""
						+ (list.getQtyRequired() != null ? list.getQtyRequired() : "")
						+ "\",\"Delivery\": \""
						+ (list.getHeader().getDeliverySchedule() != null ? deliverySchedule: "")
						+ "\",\"MPRSources\": \""
						+ (list.getSources() != null ? list.getSources().replace("\n", "@").replace("\r", "^").replace("\t", "~"): "")
						+  "\"}");

			}

			counter++;
			i++;
		}

		pw.write("]");

	}

	catch (Exception e) {
		mprList.clear();

		e.printStackTrace();
	}
	mprList.clear();
	return null;

}

public ModelAndView saveEnquiryforQuotation(HttpServletRequest request, HttpServletResponse response)
{
	 	Map<String, Object> map = new HashMap<String, Object>();
	 	Map<String, Object> dataMap = new HashMap<String, Object>();
	 	Map<String, Object> datamap = new HashMap<String, Object>();
		
		List<Object[]> financialYearList = new ArrayList<Object[]>();	
		int deptId = 0;
		int hospitalId=0;
		Box box = HMSUtil.getBox(request);	
		HttpSession session = request.getSession();
		
		
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
			box.put("deptId", deptId);
		}
		
	/*	if (request.getParameter("supplier") != null) {
			String supplier_array[] = request.getParameterValues("supplier");
			box.put("supplier_array", supplier_array);
		}*/
		
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			box.put("hospitalId", hospitalId);
		}
		
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("deptId",deptId);


		financialYearList = storesHandlerService.getFinancialYearList();
		
		map = storesHandlerService.showRequestForQuotationJsp(dataMap);		
		jsp = "createRequestForQuotation";
	
	 	
	 	datamap = storesHandlerService.saveEnquiryforQuotation(box);
	 	if(datamap.get("bSuccessfullyAdded")!= null)
	 	{
	 		map.put("bSuccessfullyAdded", datamap.get("bSuccessfullyAdded"));
	 		map.put("message", datamap.get("message"));
	 		map.put("quotationHeaderId", datamap.get("quotationHeaderId"));
	 		map.put("flag", "QUOT");
	 	} 		 	
	 		
	 	jsp = "storeMessage_New";	 	
	 	
		jsp = jsp + ".jsp";
		title = "Request For Quotation";
	 	
	 	
	 	map.put("contentJsp", jsp);
	 	map.put("title", title);	
	 	return new ModelAndView("index", "map", map);
}

public ModelAndView showQuotationList(HttpServletRequest request,HttpServletResponse response)
{	
	List<Object[]> financialYearList = new ArrayList<Object[]>();
	List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	int hospitalId=0;
	HttpSession session=request.getSession();
	if (session.getAttribute("hospitalId") != null) {
		hospitalId = (Integer) session.getAttribute("hospitalId");
	}	

	dataMap.put("hospitalId", hospitalId);					
			
	financialYearList = storesHandlerService.getFinancialYearList();	
	map = storesHandlerService.showRequestForQuotationJsp(dataMap);
	
	supplierList= (List<MasStoreSupplier>)map.get("supplierList");
	
	
	jsp = "quotationList";
	jsp += ".jsp";
	title = "Quotation/Enquiry List";	
	
	map.put("contentJsp", jsp);
	map.put("title", title);
	
	map.put("financialYearList", financialYearList);
	map.put("supplierList", supplierList);
	return new ModelAndView("index", "map", map);
}


public ModelAndView getListOfEnquiry(HttpServletRequest request,HttpServletResponse response)
	
{
	
	Map<String,Object> map = new HashMap<String,Object>();
	List<StoreQuotationRequestM> enquiryList = new ArrayList<StoreQuotationRequestM>();
	
	Box box = HMSUtil.getBox(request);	
	
	String unitType="";
	
	HttpSession session = request.getSession();
	
	
	map = storesHandlerService.getListOfEnquiry(box);
	
	if(map.get("enquiryList")!= null)
	{
		enquiryList = (List<StoreQuotationRequestM>) map.get("enquiryList");
	}
	System.out.println("in controller enquiryList="+enquiryList.size());
	int totalRecords = 0;
	if(map.get("totalRecords")!= null)
	{
		totalRecords = (Integer) map.get("totalRecords");
	}
	
	try
	{
		PrintWriter pw = response.getWriter();	
		
		pw.write("[");
		int counter=1;
		
		for(StoreQuotationRequestM list : enquiryList)
		{
			
			
		    if(counter != enquiryList.size())
		    {
		    	
		    		pw.write("{\"Id\": \""+list.getId()+"\",\"QuotationDate\": \""+(list.getRequestDate() != null?HMSUtil.changeDateToddMMyyyy(list.getRequestDate()):"")+"\",\"DueDate\": \""+(list.getDueDate() != null?HMSUtil.changeDateToddMMyyyy(list.getDueDate()):"")+"\",\"QuotationNo\": \""+(list.getRequestNo()!=null?list.getRequestNo():"")+"\",\"MPRNo\": \""+(list.getMprHeader()!=null?list.getMprHeader().getMprNo():"")+"\",\"vendorName\": \""+(list.getSupplier()!=null?list.getSupplier().getSupplierName():"")+"\",\"PreparedBy\":\""+(list.getPreparedBy() != null?list.getPreparedBy().getEmployee().getFirstName():"")+"\",\"ApprovedBy\": \""+(list.getPreparedBy() != null?list.getPreparedBy().getEmployee().getFirstName():"")+"\",\"Status\":\""+(list.getStatus()!=null?list.getStatus():"")+"\",\"Year\":\""+(list.getYear()!=null?list.getYear().getFinancialYear():"")+"\",\"totalRecords\":\""+totalRecords+"\"},");
		    	
		    }
		    else
		    {		    	
		    	pw.write("{\"Id\": \""+list.getId()+"\",\"QuotationDate\": \""+(list.getRequestDate() != null?HMSUtil.changeDateToddMMyyyy(list.getRequestDate()):"")+"\",\"DueDate\": \""+(list.getDueDate() != null?HMSUtil.changeDateToddMMyyyy(list.getDueDate()):"")+"\",\"QuotationNo\": \""+(list.getRequestNo()!=null?list.getRequestNo():"")+"\",\"MPRNo\": \""+(list.getMprHeader()!=null?list.getMprHeader().getMprNo():"")+"\",\"vendorName\": \""+(list.getSupplier()!=null?list.getSupplier().getSupplierName():"")+"\",\"PreparedBy\":\""+(list.getPreparedBy() != null?list.getPreparedBy().getEmployee().getFirstName():"")+"\",\"ApprovedBy\": \""+(list.getPreparedBy() != null?list.getPreparedBy().getEmployee().getFirstName():"")+"\",\"Status\":\""+(list.getStatus()!=null?list.getStatus():"")+"\",\"Year\":\""+(list.getYear()!=null?list.getYear().getFinancialYear():"")+"\",\"totalRecords\":\""+totalRecords+"\"}");
		    	
		    }
		
		    counter++;		
		}
		
		
		pw.write("]");
		
		
	}
	
	catch(Exception e)
	{
		enquiryList.clear();
		e.printStackTrace();
	}	
	enquiryList.clear();
	return null;		
	

}


public ModelAndView ViewUpdateVendorQuotation(HttpServletRequest request, HttpServletResponse response)
{
	Map<String,Object>map = new HashMap<String,Object>();
	List<StoreQuotationRequestM> quotationHeader = new ArrayList<StoreQuotationRequestM>();
	List<StoreQuotationRequestT> quotationDetails = new ArrayList<StoreQuotationRequestT>();
	List<Object[]> mprPriorityList = new ArrayList<Object[]>();
	List<Object[]> financialYearList = new ArrayList<Object[]>();	
					
	
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
	}
	
	Box box = HMSUtil.getBox(request);	
	int headerId = 0;
	if(box.getInt("headerId") != 0)
	{
		headerId = box.getInt("headerId");
	}
	
	map = storesHandlerService.getVendorQuotationDetails(headerId);
	if(map.get("quotationDetails")!=null)
	{
		quotationDetails = (List<StoreQuotationRequestT>) map.get("quotationDetails");
	}
	if(map.get("quotationHeader")!=null)
	{
		quotationHeader = (List<StoreQuotationRequestM>) map.get("quotationHeader");
	}
	
	mprPriorityList = storesHandlerService.getMPRPriorityList();		
	financialYearList = storesHandlerService.getFinancialYearList();
	
		if(quotationHeader.get(0).getStatus().equals("u"))
		{
			jsp = "createRequestForQuotationSaved";
		}
		else
		{
			jsp = "viewUpdateQuotationDetails";
		}
	
	
	jsp += ".jsp";
	title = "View And Update Vendor Quotation Details";
	
	
	
	map.put("mprPriorityList", mprPriorityList);
	map.put("financialYearList", financialYearList);
	
	
	if(quotationHeader.size()>0)
	{
		map.put("quotationHeader", quotationHeader);
	}
	if(quotationDetails.size()>0)
	{
		map.put("quotationDetails", quotationDetails);
	}
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("index", "map", map);
}

public ModelAndView generatevendorQuotationReport(HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> requestParameters = new HashMap<String, Object>();

	int hospitalId = 0;
	String hospitalName = "";
	String qry="";
	int headerId=0;
	HttpSession session = request.getSession();
	try {
	if (request.getParameter("headerId") != null
			&& !(request.getParameter("headerId").equals(""))) {
		headerId = Integer.parseInt(request.getParameter("headerId"));
	}
	if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			hospitalName = storesHandlerService.getHospitalName(hospitalId);
			requestParameters.put("HOSP_NAME", hospitalName);
			requestParameters.put("hospitalId", hospitalId);
		}
	 	requestParameters.put("masterId", headerId);
    	String userHome = getServletContext().getRealPath("");	         
        String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
        requestParameters.put("path", imagePath);
        requestParameters.put("HOSP_NAME", hospitalName);
        requestParameters.put("SUBREPORT_DIR", getServletContext().getRealPath("/reports/"));
	} catch (Exception e) {
	e.printStackTrace();
}


	Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
	HMSUtil.generateReport("RequestForQuotaion", requestParameters,
			(Connection) connectionMap.get("con"), response,
			getServletContext());
	return new ModelAndView("indexB", "map", map);



}

public ModelAndView generatevendorQuotationReportHAL(HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> requestParameters = new HashMap<String, Object>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	Map<String, Object> mapRequest = new HashMap<String, Object>();

	int hospitalId = 0;
	String hospitalName = "";
	String qry="";
	int headerId=0;
	HttpSession session = request.getSession();
	try {
	if (request.getParameter("headerId") != null
			&& !(request.getParameter("headerId").equals(""))) {
		headerId = Integer.parseInt(request.getParameter("headerId"));
	}
	if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			hospitalName = storesHandlerService.getHospitalName(hospitalId);
			requestParameters.put("HOSP_NAME", hospitalName);
			requestParameters.put("hospitalId", hospitalId);
		}
	 	requestParameters.put("masterId", headerId);
	 	
	 	dataMap = storesHandlerService.getVendorName(requestParameters);
	 	
	 	if(dataMap.get("VendorList") !=null)
	 	{
	 		requestParameters.put("supplier_name", (String)dataMap.get("VendorList"));
	 	}
	 	
	 	System.out.println("ven="+(String)dataMap.get("VendorList"));
	 	
	 		 
	 	
    	String userHome = getServletContext().getRealPath("");	         
        String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
        requestParameters.put("path", imagePath);
        requestParameters.put("HOSP_NAME", hospitalName);
        requestParameters.put("SUBREPORT_DIR", getServletContext().getRealPath("/reports/"));
	} catch (Exception e) {
	e.printStackTrace();
}


	Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
	HMSUtil.generateReport("RequestForQuotaionhal", requestParameters,
			(Connection) connectionMap.get("con"), response,
			getServletContext());
	return new ModelAndView("indexB", "map", map);



}

public ModelAndView showPurchaseOrderJsp(HttpServletRequest request,HttpServletResponse response) {
	session = request.getSession();
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	List<Object[]> financialYearList = new ArrayList<Object[]>();	
	
	int deptId = 0;
	int hospitalId=0;
	if (session.getAttribute("deptId") != null) {
		deptId = (Integer) session.getAttribute("deptId");
	}

	if (session.getAttribute("hospitalId") != null) {
		hospitalId = (Integer) session.getAttribute("hospitalId");
	}
	//map = purchaseOrderHandlerService.showPurchaseOrderJsp(deptId);   comment By Tirath For hospitalId

	dataMap.put("hospitalId", hospitalId);
	dataMap.put("deptId",deptId);

	financialYearList = storesHandlerService.getFinancialYearList();
	
	map = storesHandlerService.showRequestForQuotationJsp(dataMap);
	//List<StoreMaterialPurchaseReqM>MPRNumberList = storesHandlerService.getMPRNumberList(deptId,hospitalId);
	jsp = "createPurchaseOrderJsp";
	jsp = jsp + ".jsp";
	title = "Create Purchase Order";
	map.put("contentJsp", jsp);
	map.put("title", title);
	String previousPage = "no";	
	map.put("financialYearList", financialYearList);
	return new ModelAndView("index", "map", map);
}

public ModelAndView getEnquiryListbasedonYear(HttpServletRequest request,
		HttpServletResponse response) {
	HttpSession session = request.getSession();
	Map<String, Object> map = new HashMap<String, Object>();
	//Map<String, Object> userMap = new HashMap<String, Object>();
//	List<MasEmployee> docList =  new ArrayList<MasEmployee>();
	Box box = HMSUtil.getBox(request);
	int hospitalId = 0;
	if (session.getAttribute(HOSPITAL_ID) != null) {
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		
	}
	box.put("hospitalId", hospitalId);
	map = storesHandlerService.getEnquiryListListbasedonYear(box);
	
     jsp = "responseforQuotationList";
//}
	map.put("jsp", jsp);
	map.put("title", title);
	return new ModelAndView(jsp, "map", map);
	
}

public ModelAndView getVendorDetailsforPO(HttpServletRequest request,HttpServletResponse response)
{

	Map<String, Object> map = new HashMap<String, Object>();
	HttpSession session = request.getSession();
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	int deptId = (Integer) session.getAttribute("deptId");
	
	List<Object[]> quotationList = new ArrayList<Object[]>();
	Box box = HMSUtil.getBox(request);

	box.put("hospitalId", hospitalId);
	box.put("deptId", deptId);


	map = storesHandlerService.getVendorDetailsforPO(box);

	if (map.get("quotationList") != null) {
		quotationList = (List<Object[]>) map.get("quotationList");
	}

	int totalRecords = 0;
	if (map.get("totalRecords") != null) {
		totalRecords = (Integer) map.get("totalRecords");
	}

	try {
		PrintWriter pw = response.getWriter();

		pw.write("[");
		int counter = 1;
		int i = 0;

		for (Object[] list : quotationList) {

			if (counter != quotationList.size()) {
				

				pw.write("{\"Id\": \""
						+ list[0]
						+ "\",\"VendorName\": \""
						+ (list[1] != null ? list[1] : "")
						+ "\",\"VendorId\": \""
						+ (list[0] != null ? list[0] : "0")
						+ "\",\"Add1\": \""
						+ (list[2] != null ? list[2] : "")
						+ "\",\"Add2\": \""
						+ (list[3] != null ? list[3] : "")	
						
						+  "\"},");

			} else {
				pw.write("{\"Id\": \""
						+ list[0]
						+ "\",\"VendorName\": \""
						+ (list[1] != null ? list[1] : "")
						+ "\",\"VendorId\": \""
						+ (list[0] != null ? list[0] : "0")
						+ "\",\"Add1\": \""
						+ (list[2] != null ? list[2] : "")
						+ "\",\"Add2\": \""
						+ (list[3] != null ? list[3] : "")						
						+  "\"}");
			}

			counter++;
			i++;
		}

		pw.write("]");

	}

	catch (Exception e) {
		quotationList.clear();

		e.printStackTrace();
	}
	quotationList.clear();
	return null;

}

public ModelAndView savePO(HttpServletRequest request, HttpServletResponse response)
{
	 	Map<String, Object> map = new HashMap<String, Object>();
	 	Map<String, Object> dataMap = new HashMap<String, Object>();
	 	Map<String, Object> datamap = new HashMap<String, Object>();
		
		List<Object[]> financialYearList = new ArrayList<Object[]>();	
		int deptId = 0;
		int hospitalId=0;
		Box box = HMSUtil.getBox(request);	
		HttpSession session = request.getSession();
		
		
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
			box.put("deptId", deptId);
		}
		
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			box.put("hospitalId", hospitalId);
		}
		
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("deptId",deptId);


		financialYearList = storesHandlerService.getFinancialYearList();
		
		//map = storesHandlerService.showRequestForQuotationJsp(dataMap);		
		jsp = "createRequestForQuotation";
	
	 	
	 	datamap = storesHandlerService.savePO(box);
	 	if(datamap.get("bSuccessfullyAdded")!= null)
	 	{
	 		map.put("bSuccessfullyAdded", datamap.get("bSuccessfullyAdded"));
	 		map.put("message", datamap.get("message"));
	 		map.put("poId", datamap.get("Id"));
	 		map.put("flag", "PO");
	 	} 	
	 	
	 		
	 	jsp = "storeMessage_New";
		jsp = jsp + ".jsp";
		title = "Request For Quotation";
	 	
	 	
	 	map.put("contentJsp", jsp);
	 	map.put("title", title);	
	 	return new ModelAndView("index", "map", map);
}

public ModelAndView listofPurchaseOrder(HttpServletRequest request,HttpServletResponse response)
{	
	List<Object[]> financialYearList = new ArrayList<Object[]>();
	List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	int hospitalId=0;
	HttpSession session=request.getSession();
	if (session.getAttribute("hospitalId") != null) {
		hospitalId = (Integer) session.getAttribute("hospitalId");
	}	

	dataMap.put("hospitalId", hospitalId);					
			
	financialYearList = storesHandlerService.getFinancialYearList();	
	map = storesHandlerService.showRequestForQuotationJsp(dataMap);
	
	supplierList= (List<MasStoreSupplier>)map.get("supplierList");
	
	
	jsp = "purchaseOrderList";
	jsp += ".jsp";
	title = "Purchase Order List";	
	
	map.put("contentJsp", jsp);
	map.put("title", title);
	
	map.put("financialYearList", financialYearList);
	map.put("supplierList", supplierList);
	return new ModelAndView("index", "map", map);
}


public ModelAndView getListOfPurchaseOrder(HttpServletRequest request,HttpServletResponse response)
	
{
	
	Map<String,Object> map = new HashMap<String,Object>();
	List<StorePoHeader> poHeaderList = new ArrayList<StorePoHeader>();
	
	Box box = HMSUtil.getBox(request);	
	
	String unitType="";
	
	HttpSession session = request.getSession();
	
	
	map = storesHandlerService.getListOfPO(box);
	
	if(map.get("poHeaderList")!= null)
	{
		poHeaderList = (List<StorePoHeader>) map.get("poHeaderList");
	}
	System.out.println("in controller enquiryList="+poHeaderList.size());
	int totalRecords = 0;
	if(map.get("totalRecords")!= null)
	{
		totalRecords = (Integer) map.get("totalRecords");
	}
	
	try
	{
		PrintWriter pw = response.getWriter();	
		
		pw.write("[");
		int counter=1;
		
		for(StorePoHeader list : poHeaderList)
		{
			
			
		    if(counter != poHeaderList.size())
		    {
		    	
		    		pw.write("{\"Id\": \""+list.getId()+"\",\"PODate\": \""+(list.getPoDate() != null?HMSUtil.changeDateToddMMyyyy(list.getPoDate()):"")+"\",\"DeliveryDate\": \""+(list.getDeliveryDate() != null?HMSUtil.changeDateToddMMyyyy(list.getDeliveryDate()):"")+"\",\"PONo\": \""+(list.getPoNumber()!=null?list.getPoNumber():"")+"\",\"Year\": \""+(list.getFinancialYear()!=null?list.getFinancialYear().getFinancialYear():"")+"\",\"vendorName\": \""+(list.getSupplier()!=null?list.getSupplier().getSupplierName():"")+"\",\"PreparedBy\":\""+(list.getLastChgBy() != null?list.getLastChgBy().getEmployee().getFirstName():"")+"\",\"ApprovedBy\": \""+(list.getLastChgBy() != null?list.getLastChgBy().getEmployee().getFirstName():"")+"\",\"Status\":\""+(list.getStatus()!=null?list.getStatus():"")+"\",\"QNo\":\""+(list.getQuotation()!=null?list.getQuotation().getRequestNo():"")+"\",\"RefNo\":\""+(list.getReference()!=null?list.getReference():"")+"\",\"totalRecords\":\""+totalRecords+"\"},");
		    	
		    }
		    else
		    {		    	
		    	pw.write("{\"Id\": \""+list.getId()+"\",\"PODate\": \""+(list.getPoDate() != null?HMSUtil.changeDateToddMMyyyy(list.getPoDate()):"")+"\",\"DeliveryDate\": \""+(list.getDeliveryDate() != null?HMSUtil.changeDateToddMMyyyy(list.getDeliveryDate()):"")+"\",\"PONo\": \""+(list.getPoNumber()!=null?list.getPoNumber():"")+"\",\"Year\": \""+(list.getFinancialYear()!=null?list.getFinancialYear().getFinancialYear():"")+"\",\"vendorName\": \""+(list.getSupplier()!=null?list.getSupplier().getSupplierName():"")+"\",\"PreparedBy\":\""+(list.getLastChgBy() != null?list.getLastChgBy().getEmployee().getFirstName():"")+"\",\"ApprovedBy\": \""+(list.getLastChgBy() != null?list.getLastChgBy().getEmployee().getFirstName():"")+"\",\"Status\":\""+(list.getStatus()!=null?list.getStatus():"")+"\",\"QNo\":\""+(list.getQuotation()!=null?list.getQuotation().getRequestNo():"")+"\",\"RefNo\":\""+(list.getReference()!=null?list.getReference():"")+"\",\"totalRecords\":\""+totalRecords+"\"}");
		    	
		    }
		
		    counter++;		
		}
		
		
		pw.write("]");
		
		
	}
	
	catch(Exception e)
	{
		poHeaderList.clear();
		e.printStackTrace();
	}	
	poHeaderList.clear();
	return null;		
	

}

public ModelAndView ViewUpdatePODetails(HttpServletRequest request, HttpServletResponse response)
{
	Map<String,Object>map = new HashMap<String,Object>();
	List<StorePoHeader> poHeader = new ArrayList<StorePoHeader>();
	List<StorePoDetail> poDetails = new ArrayList<StorePoDetail>();
	List<Object[]> mprPriorityList = new ArrayList<Object[]>();
	List<Object[]> financialYearList = new ArrayList<Object[]>();	
					
	
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
		map.put("hospitalId", hospitalId);
	}
	
	Box box = HMSUtil.getBox(request);	
	int headerId = 0;
	if(box.getInt("headerId") != 0)
	{
		headerId = box.getInt("headerId");
	}
	
	map.putAll(storesHandlerService.getPODetails(headerId));
	if(map.get("poDetails")!=null)
	{
		poDetails = (List<StorePoDetail>) map.get("poDetails");
	}
	if(map.get("poHeader")!=null)
	{
		poHeader = (List<StorePoHeader>) map.get("poHeader");
	}
	
	mprPriorityList = storesHandlerService.getMPRPriorityList();		
	financialYearList = storesHandlerService.getFinancialYearList();
	map.putAll(storesHandlerService.showRequestForQuotationJsp(map));
	
		
	jsp = "viewUpdatePODetails";
	
	if(poHeader.get(0).getStatus().equals("u"))
	{
		jsp = "createPurchaseOrderJspSaved";
	}
	else
	{
		jsp = "viewUpdatePODetails";
	}
	
	
	jsp += ".jsp";
	title = "View And Update Purchase Order Details";
	
	
	
	map.put("mprPriorityList", mprPriorityList);
	map.put("financialYearList", financialYearList);
	
	
	if(poHeader.size()>0)
	{
		map.put("poHeader", poHeader);
	}
	if(poHeader.size()>0)
	{
		map.put("poHeader", poHeader);
	}
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("index", "map", map);
}

public ModelAndView generatePo(HttpServletRequest request,HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	Map<String, Object> patientMap = new HashMap<String, Object>();
	int hinId = 0;
	HttpSession session = request.getSession();
	String deptName="";
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);		
	Box box = HMSUtil.getBox(request);
	box.put("hospitalId", hospitalId);
	String hospitalName = storesHandlerService.getHospitalName(hospitalId);
	box.put("hospitalName", hospitalName);		
		
	
	
	String userHome = getServletContext().getRealPath("");	         
    String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
    map.put("path", imagePath);
    int departmentId=0;
	
	Calendar cal = Calendar.getInstance();
	String query1 = "";
	String query="";
	int poId=0;
	Date toDate = null;
	if (request.getParameter("poId") != null
			&& !(request.getParameter("poId").equals("0"))) {
		poId = Integer.parseInt(request
				.getParameter("poId"));
		map.put("poId", poId);
	}
		Map<String, Object> connectionMap = storesHandlerService
			.getConnectionForReport();
	map.put("hospitalName", hospitalName);
	
	map.put("SUBREPORT_DIR", getServletContext().getRealPath(
			"/reports/"));
	HMSUtil.generateReport("PurchaseOrder", map,
			(Connection) connectionMap.get("con"), response,
			getServletContext());
	return null;
}

public ModelAndView generateHALPo(HttpServletRequest request,HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	Map<String, Object> patientMap = new HashMap<String, Object>();
	int hinId = 0;
	HttpSession session = request.getSession();
	String deptName="";
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);		
	Box box = HMSUtil.getBox(request);
	box.put("hospitalId", hospitalId);
	String hospitalName = storesHandlerService.getHospitalName(hospitalId);
	box.put("hospitalName", hospitalName);		
		
	
	
	String userHome = getServletContext().getRealPath("");	         
    String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
    map.put("path", imagePath);
    int departmentId=0;
	
	Calendar cal = Calendar.getInstance();
	String query1 = "";
	String query="";
	int poId=0;
	Date toDate = null;
	if (request.getParameter("poId") != null
			&& !(request.getParameter("poId").equals("0"))) {
		poId = Integer.parseInt(request
				.getParameter("poId"));
		map.put("poId", poId);
	}
		Map<String, Object> connectionMap = storesHandlerService
			.getConnectionForReport();
	map.put("hospitalName", hospitalName);
	
	map.put("SUBREPORT_DIR", getServletContext().getRealPath(
			"/reports/"));
	HMSUtil.generateReport("PurchaseOrder_hal", map,
			(Connection) connectionMap.get("con"), response,
			getServletContext());
	return null;
}



public ModelAndView showChallanEntryJsp(HttpServletRequest request,HttpServletResponse response) {
	session = request.getSession();
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	List<Object[]> financialYearList = new ArrayList<Object[]>();	
	List<Object[]> employeeList = new ArrayList<Object[]>();
	
	int deptId = 0;
	int hospitalId=0;
	Box box = HMSUtil.getBox(request);
	if (session.getAttribute("deptId") != null) {
		deptId = (Integer) session.getAttribute("deptId");
	}

	if (session.getAttribute("hospitalId") != null) {
		hospitalId = (Integer) session.getAttribute("hospitalId");
	}
	//map = purchaseOrderHandlerService.showPurchaseOrderJsp(deptId);   comment By Tirath For hospitalId

	dataMap.put("hospitalId", hospitalId);
	dataMap.put("deptId",deptId);
	box.put("deptId",deptId);

	financialYearList = storesHandlerService.getFinancialYearList();
	employeeList = storesHandlerService.getEmployeeListForDepartment(box);
	
	//map = storesHandlerService.showRequestForQuotationJsp(dataMap);
	//List<StoreMaterialPurchaseReqM>MPRNumberList = storesHandlerService.getMPRNumberList(deptId,hospitalId);
	jsp = "createChallanEntryJsp";
	jsp = jsp + ".jsp";
	title = "Create Challan Order";
	map.put("contentJsp", jsp);
	map.put("title", title);
	String previousPage = "no";	
	map.put("financialYearList", financialYearList);
	map.put("employeeList", employeeList);
	return new ModelAndView("index", "map", map);
}

public ModelAndView getPOListbasedonYear(HttpServletRequest request,
		HttpServletResponse response) {
	HttpSession session = request.getSession();
	Map<String, Object> map = new HashMap<String, Object>();
	//Map<String, Object> userMap = new HashMap<String, Object>();
//	List<MasEmployee> docList =  new ArrayList<MasEmployee>();
	Box box = HMSUtil.getBox(request);
	int hospitalId = 0;
	if (session.getAttribute(HOSPITAL_ID) != null) {
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		
	}
	box.put("hospitalId", hospitalId);
	map = storesHandlerService.getPOListbasedonYear(box);
	
	
     jsp = "responseforPO";
//}
	map.put("jsp", jsp);
	map.put("title", title);
	return new ModelAndView(jsp, "map", map);
	
}

public ModelAndView getPODetailsforChallanEntry(HttpServletRequest request,HttpServletResponse response)
{

	Map<String, Object> map = new HashMap<String, Object>();
	HttpSession session = request.getSession();
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	int deptId = (Integer) session.getAttribute("deptId");
	
	List<StorePoDetail> poList = new ArrayList<StorePoDetail>();
	Box box = HMSUtil.getBox(request);

	box.put("hospitalId", hospitalId);
	box.put("deptId", deptId);


	map = storesHandlerService.getPODetailsforChallanEntry(box);

	if (map.get("poList") != null) {
		poList = (List<StorePoDetail>) map.get("poList");
	}

	int totalRecords = 0;
	if (map.get("totalRecords") != null) {
		totalRecords = (Integer) map.get("totalRecords");
	}

	try {
		PrintWriter pw = response.getWriter();

		pw.write("[");
		int counter = 1;
		int i = 0;

		for (StorePoDetail list : poList) {

			if (counter != poList.size()) {
				

				pw.write("{\"Id\": \""
						+ list.getId()
						+ "\",\"VendorName\": \""
						+ (list.getPo().getSupplier() != null ? list.getPo().getSupplier().getSupplierName() : "")
						+ "\",\"VendorId\": \""
						+ (list.getPo().getSupplier() != null ? list.getPo().getSupplier().getId() : "")
						+ "\",\"PODate\": \""
						+ (list.getPo().getPoDate()!= null ? HMSUtil.changeDateToddMMyyyy(list.getPo().getPoDate()) : "")
						+ "\",\"DeliveryDate\": \""
						+ (list.getPo().getDeliveryDate()!= null ? HMSUtil.changeDateToddMMyyyy(list.getPo().getDeliveryDate()) : "")
						+ "\",\"MatCode\": \""
						+ (list.getItem() != null ? list.getItem().getPvmsNo() : "")
						+ "\",\"Item\": \""
						+ (list.getItem() != null ? list.getItem().getNomenclature() : "")
						+ "\",\"ItemId\": \""
						+ (list.getItem() != null ? list.getItem().getId() : "0")
						+ "\",\"AU\": \""
						+ (list.getItem().getItemConversion() != null ? list.getItem().getItemConversion().getItemUnitName() : "")
						+ "\",\"BrandName\": \""
						+ (list.getBrand() != null ? list.getBrand().getBrandName() : "")
						+ "\",\"ManName\": \""
						+ (list.getManufacturer() != null ? list.getManufacturer().getManufacturerName() : "")
						+ "\",\"POQty\": \""
						+ (list.getQuantityOrdered() != null ? list.getQuantityOrdered() : "")
						+ "\",\"UnitRate\": \""
						+ (list.getUnitRate() != null ? list.getUnitRate() : "")
						+ "\",\"ChemicalComposition\": \""
						+ (list.getChemicalComposition() != null ? list.getChemicalComposition() : "")
						+ "\"},");

			} else {
				pw.write("{\"Id\": \""
						+ list.getId()
						+ "\",\"VendorName\": \""
						+ (list.getPo().getSupplier() != null ? list.getPo().getSupplier().getSupplierName() : "")
						+ "\",\"VendorId\": \""
						+ (list.getPo().getSupplier() != null ? list.getPo().getSupplier().getId() : "")
						+ "\",\"PODate\": \""
						+ (list.getPo().getPoDate()!= null ? HMSUtil.changeDateToddMMyyyy(list.getPo().getPoDate()) : "")
						+ "\",\"DeliveryDate\": \""
						+ (list.getPo().getDeliveryDate()!= null ? HMSUtil.changeDateToddMMyyyy(list.getPo().getDeliveryDate()) : "")
						+ "\",\"MatCode\": \""
						+ (list.getItem() != null ? list.getItem().getPvmsNo() : "")
						+ "\",\"Item\": \""
						+ (list.getItem() != null ? list.getItem().getNomenclature() : "")
						+ "\",\"ItemId\": \""
						+ (list.getItem() != null ? list.getItem().getId() : "0")
						+ "\",\"AU\": \""
						+ (list.getItem().getItemConversion() != null ? list.getItem().getItemConversion().getItemUnitName() : "")
						+ "\",\"BrandName\": \""
						+ (list.getBrand() != null ? list.getBrand().getBrandName() : "")
						+ "\",\"ManName\": \""
						+ (list.getManufacturer() != null ? list.getManufacturer().getManufacturerName() : "")
						+ "\",\"POQty\": \""
						+ (list.getQuantityOrdered() != null ? list.getQuantityOrdered() : "")
						+ "\",\"UnitRate\": \""
						+ (list.getUnitRate() != null ? list.getUnitRate() : "")
						+ "\",\"ChemicalComposition\": \""
						+ (list.getChemicalComposition() != null ? list.getChemicalComposition() : "")
						+ "\"}");
			}

			counter++;
			i++;
		}

		pw.write("]");

	}

	catch (Exception e) {
		poList.clear();

		e.printStackTrace();
	}
	poList.clear();
	return null;

}

public ModelAndView getIndentDetailsforChallanEntry(HttpServletRequest request,HttpServletResponse response)
{

	Map<String, Object> map = new HashMap<String, Object>();
	HttpSession session = request.getSession();
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	int deptId = (Integer) session.getAttribute("deptId");
	
	List<StoreIndentT> indentList = new ArrayList<StoreIndentT>();
	Box box = HMSUtil.getBox(request);

	box.put("hospitalId", hospitalId);
	box.put("deptId", deptId);


	map = storesHandlerService.getIndentDetailsforChallanEntry(box);

	if (map.get("indentList") != null) {
		indentList = (List<StoreIndentT>) map.get("indentList");
	}

	int totalRecords = 0;
	if (map.get("totalRecords") != null) {
		totalRecords = (Integer) map.get("totalRecords");
	}

	try {
		PrintWriter pw = response.getWriter();

		pw.write("[");
		int counter = 1;
		int i = 0;

		for (StoreIndentT list : indentList) {

			if (counter != indentList.size()) {
				

				pw.write("{\"Id\": \""
						+ list.getPoDetail().getId()
						+ "\",\"VendorName\": \""
						+ (list.getIndent().getPo().getSupplier() != null ? list.getIndent().getPo().getSupplier().getSupplierName() : "")
						+ "\",\"VendorId\": \""
						+ (list.getIndent().getPo().getSupplier() != null ? list.getIndent().getPo().getSupplier().getId() : "")
						+ "\",\"PODate\": \""
						+ (list.getIndent().getPo().getPoDate()!= null ? HMSUtil.changeDateToddMMyyyy(list.getIndent().getPo().getPoDate()) : "")
						+ "\",\"DeliveryDate\": \""
						+ (list.getIndent().getPo().getDeliveryDate()!= null ? HMSUtil.changeDateToddMMyyyy(list.getIndent().getPo().getDeliveryDate()) : "")
						+ "\",\"MatCode\": \""
						+ (list.getItem() != null ? list.getItem().getPvmsNo() : "")
						+ "\",\"Item\": \""
						+ (list.getItem() != null ? list.getItem().getNomenclature() : "")
						+ "\",\"ItemId\": \""
						+ (list.getItem() != null ? list.getItem().getId() : "0")
						+ "\",\"AU\": \""
						+ (list.getItem().getItemConversion() != null ? list.getItem().getItemConversion().getItemUnitName() : "")
						+ "\",\"BrandName\": \""
						+ (list.getBrand() != null ? list.getBrand().getBrandName() : "")
						+ "\",\"ManName\": \""
						+ (list.getManufacturer() != null ? list.getManufacturer().getManufacturerName() : "")
						+ "\",\"POQty\": \""
						+ (list.getPoDetail().getQuantityOrdered() != null ? list.getPoDetail().getQuantityOrdered() : "")
						+ "\",\"QtyReq\": \""
						+ (list.getQtyInDemand() != null ? list.getQtyInDemand() : "")
						+ "\",\"UnitRate\": \""
						+ (list.getUnitRate() != null ? list.getUnitRate() : "")
						+ "\",\"ChemicalComposition\": \""
						+ (list.getPoDetail().getChemicalComposition() != null ? list.getPoDetail().getChemicalComposition() : "")
						+ "\"},");

			} else {
				pw.write("{\"Id\": \""
						+ list.getPoDetail().getId()
						+ "\",\"VendorName\": \""
						+ (list.getIndent().getPo().getSupplier() != null ? list.getIndent().getPo().getSupplier().getSupplierName() : "")
						+ "\",\"VendorId\": \""
						+ (list.getIndent().getPo().getSupplier() != null ? list.getIndent().getPo().getSupplier().getId() : "")
						+ "\",\"PODate\": \""
						+ (list.getIndent().getPo().getPoDate()!= null ? HMSUtil.changeDateToddMMyyyy(list.getIndent().getPo().getPoDate()) : "")
						+ "\",\"DeliveryDate\": \""
						+ (list.getIndent().getPo().getDeliveryDate()!= null ? HMSUtil.changeDateToddMMyyyy(list.getIndent().getPo().getDeliveryDate()) : "")
						+ "\",\"MatCode\": \""
						+ (list.getItem() != null ? list.getItem().getPvmsNo() : "")
						+ "\",\"Item\": \""
						+ (list.getItem() != null ? list.getItem().getNomenclature() : "")
						+ "\",\"ItemId\": \""
						+ (list.getItem() != null ? list.getItem().getId() : "0")
						+ "\",\"AU\": \""
						+ (list.getItem().getItemConversion() != null ? list.getItem().getItemConversion().getItemUnitName() : "")
						+ "\",\"BrandName\": \""
						+ (list.getBrand() != null ? list.getBrand().getBrandName() : "")
						+ "\",\"ManName\": \""
						+ (list.getManufacturer() != null ? list.getManufacturer().getManufacturerName() : "")
						+ "\",\"POQty\": \""
						+ (list.getPoDetail().getQuantityOrdered() != null ? list.getPoDetail().getQuantityOrdered() : "")
						+ "\",\"QtyReq\": \""
						+ (list.getQtyInDemand() != null ? list.getQtyInDemand() : "")
						+ "\",\"UnitRate\": \""
						+ (list.getUnitRate() != null ? list.getUnitRate() : "")
						+ "\",\"ChemicalComposition\": \""
						+ (list.getPoDetail().getChemicalComposition() != null ? list.getPoDetail().getChemicalComposition() : "")
						+ "\"}");
			}

			counter++;
			i++;
		}

		pw.write("]");

	}

	catch (Exception e) {
		indentList.clear();

		e.printStackTrace();
	}
	indentList.clear();
	return null;

}


public ModelAndView submitRREntry(HttpServletRequest request, HttpServletResponse response)
{
	 	Map<String, Object> map = new HashMap<String, Object>();
	 	Map<String, Object> dataMap = new HashMap<String, Object>();
	 	Map<String, Object> datamap = new HashMap<String, Object>();
		
		
		int deptId = 0;
		int hospitalId=0;
		Box box = HMSUtil.getBox(request);	
		HttpSession session = request.getSession();
		
		
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
			box.put("deptId", deptId);
		}
		
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			box.put("hospitalId", hospitalId);
		}
		
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("deptId",deptId);


		
	
	 	
	 	datamap = storesHandlerService.submitRREntry(box);
	 	if(datamap.get("bSuccessfullyAdded")!= null)
	 	{
	 		map.put("bSuccessfullyAdded", datamap.get("bSuccessfullyAdded"));
	 		map.put("message", datamap.get("message"));
	 		map.put("RRId", datamap.get("Id"));
	 		map.put("flag", "RR");
	 	} 	
	 	
	 		
	 	jsp = "storeMessage_New";
		jsp = jsp + ".jsp";
		title = "Receive Report Entry";
	 	
	 	
	 	map.put("contentJsp", jsp);
	 	map.put("title", title);	
	 	return new ModelAndView("index", "map", map);
}
public ModelAndView generateReceivingReport(HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> requestParameters = new HashMap<String, Object>();

	int hospitalId = 0;
	String hospitalName = "";
	String qry="";
	int grnId=0;
	HttpSession session = request.getSession();
	try {
	if (request.getParameter("grnId") != null
			&& !(request.getParameter("grnId").equals(""))) {
		grnId = Integer.parseInt(request.getParameter("grnId"));
	}
	if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			hospitalName = storesHandlerService.getHospitalName(hospitalId);
			requestParameters.put("HOSP_NAME", hospitalName);
			requestParameters.put("hospitalId", hospitalId);
		}
	System.out.println("grnId="+grnId);
	 	requestParameters.put("grnId", grnId);
    	String userHome = getServletContext().getRealPath("");	         
        String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
        requestParameters.put("path", imagePath);
        requestParameters.put("HOSP_NAME", hospitalName);
        requestParameters.put("SUBREPORT_DIR", getServletContext().getRealPath("/reports/"));
	} catch (Exception e) {
	e.printStackTrace();
}





	Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
	HMSUtil.generateReport("ReceivingReport", requestParameters,
			(Connection) connectionMap.get("con"), response,
			getServletContext());
	return new ModelAndView("indexB", "map", map);



}

public ModelAndView generateRCReport(HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> requestParameters = new HashMap<String, Object>();

	int hospitalId = 0;
	String hospitalName = "";
	String qry="";
	int header_id=0;
	HttpSession session = request.getSession();
	try {
	if (request.getParameter("requestHeaderId") != null
			&& !(request.getParameter("requestHeaderId").equals(""))) {
		header_id = Integer.parseInt(request.getParameter("requestHeaderId"));
	}

	
    	String userHome = getServletContext().getRealPath("");	         
        String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
        requestParameters.put("path", imagePath);
        requestParameters.put("header_id", header_id);
        
        requestParameters.put("SUBREPORT_DIR", getServletContext().getRealPath("/reports/"));
	} catch (Exception e) {
	e.printStackTrace();
}


	Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
	HMSUtil.generateReport("Rate_contract_request", requestParameters,
			(Connection) connectionMap.get("con"), response,
			getServletContext());
	return new ModelAndView("indexB", "map", map);



}

public ModelAndView GetMPRAndPODetailsOfItem(HttpServletRequest request,HttpServletResponse response)
{

	Map<String, Object> map = new HashMap<String, Object>();
	HttpSession session = request.getSession();
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	int deptId = (Integer) session.getAttribute("deptId");
	
	List<StorePoDetail> poList = new ArrayList<StorePoDetail>();
	Box box = HMSUtil.getBox(request);

	box.put("hospitalId", hospitalId);
	box.put("deptId", deptId);


	map = storesHandlerService.GetMPRAndPODetailsOfItem(box);

	if (map.get("poList") != null) {
		poList = (List<StorePoDetail>) map.get("poList");
	}

	int totalRecords = 0;
	if (map.get("totalRecords") != null) {
		totalRecords = (Integer) map.get("totalRecords");
	}

	try {
		PrintWriter pw = response.getWriter();

		pw.write("[");
		int counter = 1;
		int i = 0;

		for (StorePoDetail list : poList) {}

		pw.write("]");

	}catch(Exception e)
	{
		
	}
	return null;
}

public ModelAndView submitRCEntry(HttpServletRequest request, HttpServletResponse response)
{
	 	Map<String, Object> map = new HashMap<String, Object>();
	 	Map<String, Object> dataMap = new HashMap<String, Object>();
	 	Map<String, Object> datamap = new HashMap<String, Object>();
		
		
		int deptId = 0;
		int hospitalId=0;
		Box box = HMSUtil.getBox(request);	
		HttpSession session = request.getSession();
		
		
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
			box.put("deptId", deptId);
		}
		
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			box.put("hospitalId", hospitalId);
		}
		
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("deptId",deptId);


		
	
	 	
	 	datamap = storesHandlerService.submitRCEntry(box);
	 	if((boolean)datamap.get("successfullyAdded"))
	 	{
	 		
	 		
	 		 message = "Received Entry saved successfully and Refernce Number is: "
                     + datamap.get("rcNo");
	 		
	 	} 
	 	else
	 	{
	 		 message = "Try Again";
	 	}
	 	
	 	jsp = "messageJsp";
		jsp += ".jsp";
		title = "Received RC Entry";
		map.put("message", message);
		map.put("contentJsp", jsp);
		map.put("id", datamap.get("Id"));
		map.put("title", title);
		map.put("printUrl", "/hms/hms/stores?method=generateReceivingReport&grnId="+datamap.get("grnId"));
		map.put("backUrl", "/hms/hms/stores?method=showRCReceiveWaitingJsp");	 	
	 	return new ModelAndView("index", "map", map);
}



	

public ModelAndView showRCReportJsp(HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	HttpSession session = request.getSession();
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	
	map = storesHandlerService.showRCReportJsp(hospitalId);
	String jsp = "";
	jsp = "rcRpt.jsp";
	map.put("contentJsp", jsp);
	
	return new ModelAndView("index","map",map);
}



public ModelAndView printRCJsp(HttpServletRequest request,HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	Map<String, Object> patientMap = new HashMap<String, Object>();
	int hinId = 0;
	HttpSession session = request.getSession();
	String deptName="";
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);		
	Box box = HMSUtil.getBox(request);
	box.put("hospitalId", hospitalId);
	String hospitalName = storesHandlerService.getHospitalName(hospitalId);
	box.put("hospitalName", hospitalName);		
		
	
    int rc_id=0;
   
	if (request.getParameter("rc_id") != null
			&& !(request.getParameter("rc_id").equals("0"))) {
		rc_id = Integer.parseInt(request.getParameter("rc_id"));
		
	
		
	}

	Map<String, Object> connectionMap = storesHandlerService
			.getConnectionForReport();
	map.put("hospitalName", hospitalName);
	map.put("rc_id", rc_id);

	
	String userHome = getServletContext().getRealPath("");	         
    String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
    map.put("path", imagePath);
    
	HMSUtil.generateReport("rc", map,
			(Connection) connectionMap.get("con"), response,
			getServletContext());
	return null;
}



public ModelAndView showRCReportForPharmacyJsp(HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	HttpSession session = request.getSession();
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	int deptId = (Integer) session.getAttribute("deptId");
	
	map = storesHandlerService.showRCReportJsp(hospitalId, deptId);
	String jsp = "";
	jsp = "rcRptForPharmacy.jsp";
	map.put("contentJsp", jsp);
	
	return new ModelAndView("index","map",map);
}

public ModelAndView showIssueMedicineReportJsp(HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	HttpSession session = request.getSession();
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	int deptId = (Integer) session.getAttribute("deptId");
	
	map = storesHandlerService.showIssueMedicineReportJsp();
	String jsp = "";
	jsp = "showIssueMedicineReport.jsp";
	map.put("contentJsp", jsp);
	
	return new ModelAndView("index","map",map);
}

public ModelAndView generateIssueMedicineReport(HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> requestParameters = new HashMap<String, Object>();
	int hospitalId = 0;
	String hospitalName = "";
	String qry="";
	int departmentId=0;
	int fromDepartment=0;
	Date fromDate = null;
	Date toDate = null;
	String query = "";
	HttpSession session = request.getSession();
	try {
		if (request.getParameter("departmentId") != null
				&& !(request.getParameter("departmentId").equals("0"))) {			
			departmentId = Integer.parseInt(request.getParameter("departmentId"));
		}
		
		if (session.getAttribute("deptId") != null
				&& !(session.getAttribute("deptId").equals("0"))) {			
			fromDepartment = Integer.parseInt(session.getAttribute("deptId").toString());
		}
	
	if (request.getParameter("fromDate") != null
			&& !(request.getParameter("fromDate").equals(""))) {			
		fromDate = HMSUtil.dateFormatterDDMMYYYY(request.getParameter("fromDate"));
	}
	if (request.getParameter("toDate") != null
			&& !(request.getParameter("toDate").equals(""))) {			
		toDate = HMSUtil.dateFormatterDDMMYYYY(request.getParameter("toDate"));
	}
	
	if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			hospitalName = storesHandlerService.getHospitalName(hospitalId);
			requestParameters.put("HOSP_NAME", hospitalName);
			requestParameters.put("hospitalId", hospitalId);
		}
	
	 	requestParameters.put("fromDate", fromDate);
	 	requestParameters.put("toDate", toDate);
	 	requestParameters.put("deptId", departmentId);
    	String userHome = getServletContext().getRealPath("");	         
        String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
        requestParameters.put("path", imagePath);
        requestParameters.put("HOSP_NAME", hospitalName);
        requestParameters.put("SUBREPORT_DIR", getServletContext().getRealPath("/reports/"));
    	if(departmentId!=0)
    	{
    		System.out.println("departmentId"+departmentId);
    		System.out.println("fromDepartment"+fromDepartment);
    		query = query +" im.department_id = " +fromDepartment +"AND im.to_store = " +departmentId+" AND ";
    	}
    	System.out.println("query" +query);
    	System.out.println("query" +fromDate);
    	System.out.println("query" +toDate);
    	requestParameters.put("query", query);
	} catch (Exception e) {
	e.printStackTrace();
}
	Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
/*	if(departmentId!=0)
	{
		HMSUtil.generateReport("wardWiseWardPharmacyIssueMedicineReport", requestParameters,
				(Connection) connectionMap.get("con"), response,
				getServletContext());
	}*/
	
		HMSUtil.generateReport("datewisewardPharmacyIssueMedicineReport", requestParameters,
				(Connection) connectionMap.get("con"), response,
				getServletContext());
	
	
	return new ModelAndView("indexB", "map", map);
}

public ModelAndView getRRList(HttpServletRequest request,HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	int rc_id = 0;
	
	try {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		

		if (request.getParameter("rc_id") != null	&& !request.getParameter("rc_id").equals("0")) {
			rc_id = Integer.parseInt(request.getParameter("rc_id"));
		}
		
	
		dataMap.put("rc_id", rc_id);
	

		map = storesHandlerService.getRRList(dataMap);
		
		jsp = "responseRRList";
	} catch (Exception e) {
		e.printStackTrace();
	}
	return new ModelAndView(jsp, "map", map);
}




public ModelAndView showRCReportForStoresJsp(HttpServletRequest request, HttpServletResponse response) {
	
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	List<Object[]> financialYearList = new ArrayList<Object[]>();	

	financialYearList = storesHandlerService.getFinancialYearList();
	System.out.println("financialYearList------"+financialYearList.size());
	jsp = "PORpt";
	jsp = jsp + ".jsp";
	
	map.put("contentJsp", jsp);
	map.put("title", title);

	map.put("financialYearList", financialYearList);
	return new ModelAndView("index", "map", map);


}

public ModelAndView getPOYear(HttpServletRequest request,
		HttpServletResponse response) {
	HttpSession session = request.getSession();
	Map<String, Object> map = new HashMap<String, Object>();

	Box box = HMSUtil.getBox(request);
	int hospitalId = 0;
	if (session.getAttribute(HOSPITAL_ID) != null) {
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		
	}
	box.put("hospitalId", hospitalId);
	map = storesHandlerService.getPOYear(box);
	
	
     jsp = "responseforPOYear";
//}
	map.put("jsp", jsp);
	map.put("title", title);
	return new ModelAndView(jsp, "map", map);
	
}

public ModelAndView getPOList(HttpServletRequest request,HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	int poNo = 0;
	
	try {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		

		if (request.getParameter("poNo") != null	&& !request.getParameter("poNo").equals("0")) {
			poNo = Integer.parseInt(request.getParameter("poNo"));
		}
		
	
		dataMap.put("poNo", poNo);
	

		map = storesHandlerService.getPOList(dataMap);
		
		jsp = "responseRRList";
	} catch (Exception e) {
		e.printStackTrace();
	}
	return new ModelAndView(jsp, "map", map);
}

public ModelAndView getQuotationDetailsforPO(HttpServletRequest request,HttpServletResponse response)
{

	Map<String, Object> map = new HashMap<String, Object>();
	HttpSession session = request.getSession();
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	int deptId = (Integer) session.getAttribute("deptId");
	
	List<StoreQuotationRequestT> quotationList = new ArrayList<StoreQuotationRequestT>();
	Box box = HMSUtil.getBox(request);

	box.put("hospitalId", hospitalId);
	box.put("deptId", deptId);


	map = storesHandlerService.getQuotationDetailsforPO(box);

	
	
     jsp = "responseforPOTable";
//}
	map.put("jsp", jsp);
	map.put("title", title);
	return new ModelAndView(jsp, "map", map);

}

public ModelAndView getQuotationDetailsforPOSaved(HttpServletRequest request,HttpServletResponse response)
{

	Map<String, Object> map = new HashMap<String, Object>();
	HttpSession session = request.getSession();
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	int deptId = (Integer) session.getAttribute("deptId");
	
	List<StoreQuotationRequestT> quotationList = new ArrayList<StoreQuotationRequestT>();
	Box box = HMSUtil.getBox(request);

	box.put("hospitalId", hospitalId);
	box.put("deptId", deptId);
	
	int headerId = 0;
	if(box.getInt("headerId") != 0)
	{
		headerId = box.getInt("headerId");
	}
	
	
	map = storesHandlerService.getQuotationDetailsforPO(box);
	map.putAll(storesHandlerService.getPODetails(headerId));

	
	
     jsp = "responseforPOTableSaved";
//}
	map.put("jsp", jsp);
	map.put("title", title);
	return new ModelAndView(jsp, "map", map);

}

public ModelAndView createIndentForSupplier(HttpServletRequest request,HttpServletResponse response) {
	session = request.getSession();
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	List<Object[]> financialYearList = new ArrayList<Object[]>();	
	List<Object[]> employeeList = new ArrayList<Object[]>();
	
	int deptId = 0;
	int hospitalId=0;
	Box box = HMSUtil.getBox(request);
	if (session.getAttribute("deptId") != null) {
		deptId = (Integer) session.getAttribute("deptId");
	}

	if (session.getAttribute("hospitalId") != null) {
		hospitalId = (Integer) session.getAttribute("hospitalId");
	}
	//map = purchaseOrderHandlerService.showPurchaseOrderJsp(deptId);   comment By Tirath For hospitalId

	dataMap.put("hospitalId", hospitalId);
	dataMap.put("deptId",deptId);
	box.put("deptId",deptId);

	financialYearList = storesHandlerService.getFinancialYearList();
	employeeList = storesHandlerService.getEmployeeListForDepartment(box);
	
	//map = storesHandlerService.showRequestForQuotationJsp(dataMap);
	//List<StoreMaterialPurchaseReqM>MPRNumberList = storesHandlerService.getMPRNumberList(deptId,hospitalId);
	jsp = "createIndentforSupplier";
	jsp = jsp + ".jsp";
	title = "Create Indent";
	map.put("contentJsp", jsp);
	map.put("title", title);
	String previousPage = "no";	
	map.put("financialYearList", financialYearList);
	map.put("employeeList", employeeList);
	return new ModelAndView("index", "map", map);
}


public ModelAndView getPODetailsforIndentForm(HttpServletRequest request,HttpServletResponse response)
{

	Map<String, Object> map = new HashMap<String, Object>();
	HttpSession session = request.getSession();
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	int deptId = (Integer) session.getAttribute("deptId");
	
	List<StorePoDetail> poList = new ArrayList<StorePoDetail>();
	Box box = HMSUtil.getBox(request);

	box.put("hospitalId", hospitalId);
	box.put("deptId", deptId);


	map = storesHandlerService.getPODetailsforChallanEntry(box);

	if (map.get("poList") != null) {
		poList = (List<StorePoDetail>) map.get("poList");
	}

	int totalRecords = 0;
	if (map.get("totalRecords") != null) {
		totalRecords = (Integer) map.get("totalRecords");
	}

	try {
		PrintWriter pw = response.getWriter();

		pw.write("[");
		int counter = 1;
		int i = 0;

		for (StorePoDetail list : poList) {

			if (counter != poList.size()) {
				

				pw.write("{\"Id\": \""
						+ list.getId()
						+ "\",\"VendorName\": \""
						+ (list.getPo().getSupplier() != null ? list.getPo().getSupplier().getSupplierName() : "")
						+ "\",\"Stockist\": \""
						+ (list.getPo().getStockist() != null ? list.getPo().getStockist().getSupplierName() : "")
						+ "\",\"VendorId\": \""
						+ (list.getPo().getSupplier() != null ? list.getPo().getSupplier().getId() : "")
						+ "\",\"PODate\": \""
						+ (list.getPo().getPoDate()!= null ? HMSUtil.changeDateToddMMyyyy(list.getPo().getPoDate()) : "")						
						+ "\",\"MatCode\": \""
						+ (list.getItem() != null ? list.getItem().getPvmsNo() : "")
						+ "\",\"Item\": \""
						+ (list.getItem() != null ? list.getItem().getNomenclature() : "")
						+ "\",\"ItemId\": \""
						+ (list.getItem() != null ? list.getItem().getId() : "0")
						+ "\",\"AU\": \""
						+ (list.getItem().getItemConversion() != null ? list.getItem().getItemConversion().getItemUnitName() : "")
						+ "\",\"BrandName\": \""
						+ (list.getBrand() != null ? list.getBrand().getBrandName() : "")
						+ "\",\"ManName\": \""
						+ (list.getManufacturer() != null ? list.getManufacturer().getManufacturerName() : "")
						+ "\",\"OrderedQty\": \""
						+ (list.getQuantityOrdered() != null ? list.getQuantityOrdered() : 0.0)
						+ "\",\"SuppliedQty\": \""
						+ (list.getQuantityReceived() != null ? list.getQuantityReceived() : 0.0)
						+ "\",\"AcceptedQty\": \""
						+ (list.getAcceptedQty() != null ? list.getAcceptedQty() : 0.0)
						+ "\",\"RejectedQty\": \""
						+ (list.getRejectedQty() != null ? list.getRejectedQty() : 0.0)
						+ "\",\"UnitRate\": \""
						+ (list.getUnitRate() != null ? list.getUnitRate() : 0.0)
						+ "\"},");

			} else {
				pw.write("{\"Id\": \""
						+ list.getId()
						+ "\",\"VendorName\": \""
						+ (list.getPo().getSupplier() != null ? list.getPo().getSupplier().getSupplierName() : "")
						+ "\",\"Stockist\": \""
						+ (list.getPo().getStockist() != null ? list.getPo().getStockist().getSupplierName() : "")
						+ "\",\"VendorId\": \""
						+ (list.getPo().getSupplier() != null ? list.getPo().getSupplier().getId() : "")
						+ "\",\"PODate\": \""
						+ (list.getPo().getPoDate()!= null ? HMSUtil.changeDateToddMMyyyy(list.getPo().getPoDate()) : "")						
						+ "\",\"MatCode\": \""
						+ (list.getItem() != null ? list.getItem().getPvmsNo() : "")
						+ "\",\"Item\": \""
						+ (list.getItem() != null ? list.getItem().getNomenclature() : "")
						+ "\",\"ItemId\": \""
						+ (list.getItem() != null ? list.getItem().getId() : "0")
						+ "\",\"AU\": \""
						+ (list.getItem().getItemConversion() != null ? list.getItem().getItemConversion().getItemUnitName() : "")
						+ "\",\"BrandName\": \""
						+ (list.getBrand() != null ? list.getBrand().getBrandName() : "")
						+ "\",\"ManName\": \""
						+ (list.getManufacturer() != null ? list.getManufacturer().getManufacturerName() : "")
						+ "\",\"OrderedQty\": \""
						+ (list.getQuantityOrdered() != null ? list.getQuantityOrdered() : 0.0)
						+ "\",\"SuppliedQty\": \""
						+ (list.getQuantityReceived() != null ? list.getQuantityReceived() : 0.0)
						+ "\",\"AcceptedQty\": \""
						+ (list.getAcceptedQty() != null ? list.getAcceptedQty() : 0.0)
						+ "\",\"RejectedQty\": \""
						+ (list.getRejectedQty() != null ? list.getRejectedQty() : 0.0)
						+ "\",\"UnitRate\": \""
						+ (list.getUnitRate() != null ? list.getUnitRate() : 0.0)
						+ "\"}");
			}

			counter++;
			i++;
		}

		pw.write("]");

	}

	catch (Exception e) {
		poList.clear();

		e.printStackTrace();
	}
	poList.clear();
	return null;

}

public ModelAndView submitIndentForSupplier(HttpServletRequest request, HttpServletResponse response)
{
	 	Map<String, Object> map = new HashMap<String, Object>();
	 	Map<String, Object> dataMap = new HashMap<String, Object>();
	 	Map<String, Object> datamap = new HashMap<String, Object>();
		
		
		int deptId = 0;
		int hospitalId=0;
		Box box = HMSUtil.getBox(request);	
		HttpSession session = request.getSession();
		
		
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
			box.put("deptId", deptId);
		}
		
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			box.put("hospitalId", hospitalId);
		}
		
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("deptId",deptId);


		
	
	 	
	 	datamap = storesHandlerService.submitIndentForSupplier(box);
	 	if(datamap.get("bSuccessfullyAdded")!= null)
	 	{
	 		map.put("bSuccessfullyAdded", datamap.get("bSuccessfullyAdded"));
	 		map.put("message", datamap.get("message"));
	 		map.put("IndentId", datamap.get("Id"));
	 		map.put("flag", "POIndent");
	 	} 	
	 	
	 		
	 	jsp = "storeMessage_New";
		jsp = jsp + ".jsp";
		title = "Receive Report Entry";
	 	
	 	
	 	map.put("contentJsp", jsp);
	 	map.put("title", title);	
	 	return new ModelAndView("index", "map", map);
}


public ModelAndView showSupplierIndentList(HttpServletRequest request,HttpServletResponse response)
{	
	List<Object[]> financialYearList = new ArrayList<Object[]>();
	List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	int hospitalId=0;
	HttpSession session=request.getSession();
	if (session.getAttribute("hospitalId") != null) {
		hospitalId = (Integer) session.getAttribute("hospitalId");
	}	

	dataMap.put("hospitalId", hospitalId);					
			
	financialYearList = storesHandlerService.getFinancialYearList();	
	map = storesHandlerService.showRequestForQuotationJsp(dataMap);
	
	supplierList= (List<MasStoreSupplier>)map.get("supplierList");
	
	
	jsp = "supplierIndentList";
	jsp += ".jsp";
	title = "Supplier Indent List";	
	
	map.put("contentJsp", jsp);
	map.put("title", title);
	
	map.put("financialYearList", financialYearList);
	map.put("supplierList", supplierList);
	return new ModelAndView("index", "map", map);
}


public ModelAndView getListOfSupplierIndent(HttpServletRequest request,HttpServletResponse response)
	
{
	
	Map<String,Object> map = new HashMap<String,Object>();
	List<StoreIndentM> indentList = new ArrayList<StoreIndentM>();
	
	Box box = HMSUtil.getBox(request);	
	
	String unitType="";
	
	HttpSession session = request.getSession();
	
	
	map = storesHandlerService.getListOfSupplierIndent(box);
	
	if(map.get("indentList")!= null)
	{
		indentList = (List<StoreIndentM>) map.get("indentList");
	}
	
	int totalRecords = 0;
	if(map.get("totalRecords")!= null)
	{
		totalRecords = (Integer) map.get("totalRecords");
	}
	
	try
	{
		PrintWriter pw = response.getWriter();	
		
		pw.write("[");
		int counter=1;
		
		for(StoreIndentM list : indentList)
		{
			
			
		    if(counter != indentList.size())
		    {
		    	
		    		pw.write("{\"Id\": \""+list.getId()+"\",\"IndentDate\": \""+(list.getIndentDate() != null?HMSUtil.changeDateToddMMyyyy(list.getIndentDate()):"")+"\",\"IndentNo\": \""+(list.getIndentNo() != null?list.getIndentNo():"")+"\",\"PONo\": \""+(list.getPo()!=null?list.getPo().getPoNumber():"")+"\",\"Vendor\": \""+(list.getPo()!=null?list.getPo().getSupplier().getSupplierName():"")+"\",\"PreparedBy\":\""+(list.getLastChgBy() != null?list.getLastChgBy().getEmployee().getFirstName():"")+"\",\"Status\":\""+(list.getIndentReceivedStatus()!=null?list.getIndentReceivedStatus():"")+"\",\"totalRecords\":\""+totalRecords+"\"},");
		    	
		    }
		    else
		    {		    	
		    	pw.write("{\"Id\": \""+list.getId()+"\",\"IndentDate\": \""+(list.getIndentDate() != null?HMSUtil.changeDateToddMMyyyy(list.getIndentDate()):"")+"\",\"IndentNo\": \""+(list.getIndentNo() != null?list.getIndentNo():"")+"\",\"PONo\": \""+(list.getPo()!=null?list.getPo().getPoNumber():"")+"\",\"Vendor\": \""+(list.getPo()!=null?list.getPo().getSupplier().getSupplierName():"")+"\",\"PreparedBy\":\""+(list.getLastChgBy() != null?list.getLastChgBy().getEmployee().getFirstName():"")+"\",\"Status\":\""+(list.getIndentReceivedStatus()!=null?list.getIndentReceivedStatus():"")+"\",\"totalRecords\":\""+totalRecords+"\"}");
		    	
		    }
		
		    counter++;		
		}
		
		
		pw.write("]");
		
		
	}
	
	catch(Exception e)
	{
		indentList.clear();
		e.printStackTrace();
	}	
	indentList.clear();
	return null;		
	

}

public ModelAndView ViewUpdateIndentDetails(HttpServletRequest request, HttpServletResponse response)
{
	Map<String,Object>map = new HashMap<String,Object>();
	List<StoreIndentM> indentHeader = new ArrayList<StoreIndentM>();
	List<StoreIndentT> indentDetails = new ArrayList<StoreIndentT>();
	List<Object[]> mprPriorityList = new ArrayList<Object[]>();
	List<Object[]> financialYearList = new ArrayList<Object[]>();	
					
	
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
	}
	
	Box box = HMSUtil.getBox(request);	
	int headerId = 0;
	if(box.getInt("headerId") != 0)
	{
		headerId = box.getInt("headerId");
	}
	
	map = storesHandlerService.getSupplierIndentDetails(headerId);
	if(map.get("indentDetails")!=null)
	{
		indentDetails = (List<StoreIndentT>) map.get("indentDetails");
	}
	if(map.get("indentHeader")!=null)
	{
		indentHeader = (List<StoreIndentM>) map.get("indentHeader");
	}
	
	mprPriorityList = storesHandlerService.getMPRPriorityList();		
	financialYearList = storesHandlerService.getFinancialYearList();
	
		
	jsp = "viewUpdateIndentDetails";
	
	jsp += ".jsp";
	title = "View And Update Purchase Order Details";
	
	
	
	map.put("mprPriorityList", mprPriorityList);
	map.put("financialYearList", financialYearList);
	
	
	if(indentHeader.size()>0)
	{
		map.put("indentHeader", indentHeader);
	}
	if(indentDetails.size()>0)
	{
		map.put("indentDetails", indentDetails);
	}
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("index", "map", map);
}
public ModelAndView generateIndentFormReport(HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> requestParameters = new HashMap<String, Object>();

	int hospitalId = 0;
	String hospitalName = "";
	String qry="";
	int indentId=0;
	int deptId=0;
	String  flag="";
	HttpSession session = request.getSession();
	try {
	if (request.getParameter("poHeaderId") != null
			&& !(request.getParameter("poHeaderId").equals("0"))) {
		indentId = Integer.parseInt(request.getParameter("poHeaderId"));
	}

	if (session.getAttribute("deptId") != null)
		deptId = Integer.parseInt("" + session.getAttribute("deptId"));
	// --------------------------------------------------------------------------------
	

	BigDecimal stockIn = null;

	String itemNameField = "";
	String pvmsNo = "";
	Map<String, Object> dataMap = new HashMap<String, Object>();
	if (request.getParameter("itemCode") != null) {
		pvmsNo = (request.getParameter("itemCode"));
	}
	if (request.getParameter("flag") != null) {
		flag = (request.getParameter("flag"));
	}

	dataMap.put("pvmsNo", pvmsNo);
	dataMap.put("deptId", deptId);
	map = storesHandlerService.fillItemsForIndent(dataMap);
	
	
	if (map.get("stockIn") != null) {
		stockIn = new BigDecimal("" + map.get("stockIn"));
	}
	if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			hospitalName = storesHandlerService.getHospitalName(hospitalId);
			requestParameters.put("hospitalId", hospitalId);
		}
	 	requestParameters.put("indentId", indentId);
	 	requestParameters.put("stockIn", stockIn);
    	String userHome = getServletContext().getRealPath("");	         
        String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
        requestParameters.put("path", imagePath);
        requestParameters.put("HOSP_NAME", hospitalName);
        requestParameters.put("SUBREPORT_DIR", getServletContext().getRealPath("/reports/"));
        
	} catch (Exception e) {
	e.printStackTrace();
	}
	Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
	if(flag.equalsIgnoreCase("si")){
		HMSUtil.generateReport("supplier_Indent_form", requestParameters,
				(Connection) connectionMap.get("con"), response,
				getServletContext());
			
	}else{
	HMSUtil.generateReport("Indent_form", requestParameters,
			(Connection) connectionMap.get("con"), response,
			getServletContext());
	}
	return new ModelAndView("indexB", "map", map);
}

public ModelAndView showWaitingListofRRInspection(HttpServletRequest request,HttpServletResponse response)
{	
	List<Object[]> financialYearList = new ArrayList<Object[]>();
	List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	int hospitalId=0;
	HttpSession session=request.getSession();
	if (session.getAttribute("hospitalId") != null) {
		hospitalId = (Integer) session.getAttribute("hospitalId");
	}	

	dataMap.put("hospitalId", hospitalId);					
			
	financialYearList = storesHandlerService.getFinancialYearList();	
	//map = storesHandlerService.showRequestForQuotationJsp(dataMap);
	
	//supplierList= (List<MasStoreSupplier>)map.get("supplierList");
	
	
	jsp = "awaitingRRInspectionList";
	jsp += ".jsp";
	title = "Awaiting List of RR Inspection";	
	
	map.put("contentJsp", jsp);
	map.put("title", title);	
	
	return new ModelAndView("index", "map", map);
}


public ModelAndView getListOfRRInspectionList(HttpServletRequest request,HttpServletResponse response)
	
{
	
	Map<String,Object> map = new HashMap<String,Object>();
	List<StoreGrnM> grnList = new ArrayList<StoreGrnM>();
	
	Box box = HMSUtil.getBox(request);	
	
	String unitType="";
	
	HttpSession session = request.getSession();
	
	
	map = storesHandlerService.getRRListForInspection(box);
	
	if(map.get("grnList")!= null)
	{
		grnList = (List<StoreGrnM>) map.get("grnList");
	}
	
	int totalRecords = 0;
	if(map.get("totalRecords")!= null)
	{
		totalRecords = (Integer) map.get("totalRecords");
	}
	
	try
	{
		PrintWriter pw = response.getWriter();	
		
		pw.write("[");
		int counter=1;
		
		for(StoreGrnM list : grnList)
		{
			
			
		    if(counter != grnList.size())
		    {
		    	
		    		pw.write("{\"Id\": \""+list.getId()+"\",\"RRDate\": \""+(list.getGrnDate() != null?HMSUtil.changeDateToddMMyyyy(list.getGrnDate()):"")+"\",\"RRNo\": \""+(list.getChallanNo() != null?list.getChallanNo():"")+"\",\"PONo\": \""+(list.getPo()!=null?list.getPo().getPoNumber():"")+"\",\"Vendor\": \""+(list.getPo()!=null?list.getPo().getSupplier().getSupplierName():"")+"\",\"PreparedBy\":\""+(list.getEnteredBy() != null?list.getEnteredBy().getEmployee().getFirstName():"")+"\",\"InspectedBy\":\""+(list.getInspectedBy() != null?list.getInspectedBy().getEmployee().getFirstName():"")+"\",\"InspectedDate\": \""+(list.getInspectedDate() != null?HMSUtil.changeDateToddMMyyyy(list.getInspectedDate()):"")+"\",\"Invoice\":\""+(list.getInvoiceNo()!=null?list.getInvoiceNo():"")+"\",\"totalRecords\":\""+totalRecords+"\"},");
		    	
		    }
		    else
		    {		    	
		    	pw.write("{\"Id\": \""+list.getId()+"\",\"RRDate\": \""+(list.getGrnDate() != null?HMSUtil.changeDateToddMMyyyy(list.getGrnDate()):"")+"\",\"RRNo\": \""+(list.getChallanNo() != null?list.getChallanNo():"")+"\",\"PONo\": \""+(list.getPo()!=null?list.getPo().getPoNumber():"")+"\",\"Vendor\": \""+(list.getPo()!=null?list.getPo().getSupplier().getSupplierName():"")+"\",\"PreparedBy\":\""+(list.getEnteredBy() != null?list.getEnteredBy().getEmployee().getFirstName():"")+"\",\"InspectedBy\":\""+(list.getInspectedBy() != null?list.getInspectedBy().getEmployee().getFirstName():"")+"\",\"InspectedDate\": \""+(list.getInspectedDate() != null?HMSUtil.changeDateToddMMyyyy(list.getInspectedDate()):"")+"\",\"Invoice\":\""+(list.getInvoiceNo()!=null?list.getInvoiceNo():"")+"\",\"totalRecords\":\""+totalRecords+"\"}");
		    	
		    }
		
		    counter++;		
		}
		
		
		pw.write("]");
		
		
	}
	
	catch(Exception e)
	{
		grnList.clear();
		e.printStackTrace();
	}	
	grnList.clear();
	return null;		
	

}



public ModelAndView ViewRRforInspection(HttpServletRequest request, HttpServletResponse response)
{
	Map<String,Object>map = new HashMap<String,Object>();
	List<StoreGrnM> grnHeader = new ArrayList<StoreGrnM>();
	List<StoreGrnT> grnDetails = new ArrayList<StoreGrnT>();
	List<Object[]> mprPriorityList = new ArrayList<Object[]>();
	List<Object[]> financialYearList = new ArrayList<Object[]>();	
						
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
	}
	
	Box box = HMSUtil.getBox(request);	
	int headerId = 0;
	if(box.getInt("headerId") != 0)
	{
		headerId = box.getInt("headerId");
	}
	
	map = storesHandlerService.getRRDetailsforInspection(headerId);
	if(map.get("grnDetails")!=null)
	{
		grnDetails = (List<StoreGrnT>) map.get("grnDetails");
	}
	if(map.get("grnHeader")!=null)
	{
		grnHeader = (List<StoreGrnM>) map.get("grnHeader");
	}
	
	mprPriorityList = storesHandlerService.getMPRPriorityList();		
	financialYearList = storesHandlerService.getFinancialYearList();
	
		
	jsp = "viewUpdateRRDetailsForInspection";
	
	jsp += ".jsp";
	title = "Inspection Of RR";
	
	
	
	map.put("mprPriorityList", mprPriorityList);
	map.put("financialYearList", financialYearList);
	
	
	if(grnHeader.size()>0)
	{
		map.put("grnHeader", grnHeader);
	}
	if(grnDetails.size()>0)
	{
		map.put("grnDetails", grnDetails);
	}
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("index", "map", map);
}

public ModelAndView submitRRInspectionDetails(HttpServletRequest request, HttpServletResponse response)
{
	 	Map<String, Object> map = new HashMap<String, Object>();
	 	Map<String, Object> datamap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		int deptId = 0;
		int hospitalId=0;
		Box box = HMSUtil.getBox(request);		
		HttpSession session = request.getSession();
		if (session.getAttribute("hospitalId") != null) {
			hospitalId =  (Integer)session.getAttribute("hospitalId");
		}
		box.put("hospitalId", hospitalId);
	 	datamap = storesHandlerService.submitRRInspectionDetails(box);
	 	
	 	if(datamap.get("bSuccessfullyAdded")!= null)
	 	{
	 		map.put("bSuccessfullyAdded", datamap.get("bSuccessfullyAdded"));
	 		map.put("message", datamap.get("message"));
	 		map.put("grnHeaderId", datamap.get("grnHeaderId"));
	 		map.put("flag", "RRInspection");
	 		map.put("DiscrepancyFlag", datamap.get("DiscrepancyFlag"));
	 	} 	 	
	 		
	 	jsp = "storeMessage_New";	 	
		jsp = jsp + ".jsp";
		title = "RR Inspection";	 	
	 	
	 	map.put("contentJsp", jsp);
	 	map.put("title", title);	
	 	return new ModelAndView("index", "map", map);
}

public ModelAndView showAwaitingofRRApproval(HttpServletRequest request,HttpServletResponse response)
{	
	List<Object[]> financialYearList = new ArrayList<Object[]>();
	List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	int hospitalId=0;
	HttpSession session=request.getSession();
	if (session.getAttribute("hospitalId") != null) {
		hospitalId = (Integer) session.getAttribute("hospitalId");
	}	

	dataMap.put("hospitalId", hospitalId);					
			
	financialYearList = storesHandlerService.getFinancialYearList();	
	//map = storesHandlerService.showRequestForQuotationJsp(dataMap);
	
	//supplierList= (List<MasStoreSupplier>)map.get("supplierList");
	
	
	jsp = "awaitingRRApprovalList";
	jsp += ".jsp";
	title = "Awaiting List of RR Approval";	
	
	map.put("contentJsp", jsp);
	map.put("title", title);	
	
	return new ModelAndView("index", "map", map);
}

public ModelAndView ViewRRforApproval(HttpServletRequest request, HttpServletResponse response)
{
	Map<String,Object>map = new HashMap<String,Object>();
	List<StoreGrnM> grnHeader = new ArrayList<StoreGrnM>();
	List<StoreGrnT> grnDetails = new ArrayList<StoreGrnT>();
	List<Object[]> mprPriorityList = new ArrayList<Object[]>();
	List<Object[]> financialYearList = new ArrayList<Object[]>();	
						
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
	}
	
	Box box = HMSUtil.getBox(request);	
	int headerId = 0;
	if(box.getInt("headerId") != 0)
	{
		headerId = box.getInt("headerId");
	}
	
	map = storesHandlerService.getRRDetailsforInspection(headerId);
	if(map.get("grnDetails")!=null)
	{
		grnDetails = (List<StoreGrnT>) map.get("grnDetails");
	}
	if(map.get("grnHeader")!=null)
	{
		grnHeader = (List<StoreGrnM>) map.get("grnHeader");
	}
	
	mprPriorityList = storesHandlerService.getMPRPriorityList();		
	financialYearList = storesHandlerService.getFinancialYearList();
	
		
	jsp = "viewUpdateRRDetailsForApproval";
	
	jsp += ".jsp";
	title = "Inspection Of RR";
	
	
	
	map.put("mprPriorityList", mprPriorityList);
	map.put("financialYearList", financialYearList);
	
	
	if(grnHeader.size()>0)
	{
		map.put("grnHeader", grnHeader);
	}
	if(grnDetails.size()>0)
	{
		map.put("grnDetails", grnDetails);
	}
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("index", "map", map);
}

public ModelAndView submitRRApprovalDetails(HttpServletRequest request, HttpServletResponse response)
{
	 	Map<String, Object> map = new HashMap<String, Object>();
	 	Map<String, Object> datamap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		int deptId = 0;
		int hospitalId=0;
		Box box = HMSUtil.getBox(request);		
		HttpSession session = request.getSession();
		if (session.getAttribute("hospitalId") != null) {
			hospitalId =  (Integer)session.getAttribute("hospitalId");
		}
		box.put("hospitalId", hospitalId);
	 	datamap = storesHandlerService.submitRRApprovalDetails(box);
	 	
	 	if(datamap.get("bSuccessfullyAdded")!= null)
	 	{
	 		map.put("bSuccessfullyAdded", datamap.get("bSuccessfullyAdded"));
	 		map.put("message", datamap.get("message"));
	 		map.put("grnHeaderId", datamap.get("grnHeaderId"));
	 		map.put("flag", "RRApproval");
	 	} 	 	
	 		
	 	jsp = "storeMessage_New";	 	
		jsp = jsp + ".jsp";
		title = "RR Inspection";	 	
	 	
	 	map.put("contentJsp", jsp);
	 	map.put("title", title);	
	 	return new ModelAndView("index", "map", map);
}

public ModelAndView getSupplierIndentListbasedonPO(HttpServletRequest request,
		HttpServletResponse response) {
	HttpSession session = request.getSession();
	Map<String, Object> map = new HashMap<String, Object>();

	Box box = HMSUtil.getBox(request);
	int hospitalId = 0;
	if (session.getAttribute(HOSPITAL_ID) != null) {
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		
	}
	box.put("hospitalId", hospitalId);
	map = storesHandlerService.getSupplierIndentListbasedonPO(box);
	
	
     jsp = "responseforSupplierIndent";
//}
	map.put("jsp", jsp);
	map.put("title", title);
	return new ModelAndView(jsp, "map", map);
	
}


public ModelAndView showUnusedMedicineScreen(HttpServletRequest request,HttpServletResponse response) {
	session = request.getSession();
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	List<Object[]> financialYearList = new ArrayList<Object[]>();	
	
	int deptId = 0;
	int hospitalId=0;
	if (session.getAttribute("deptId") != null) {
		deptId = (Integer) session.getAttribute("deptId");
	}

	if (session.getAttribute("hospitalId") != null) {
		hospitalId = (Integer) session.getAttribute("hospitalId");
	}
		jsp = "showUnusedMedicine";
	jsp = jsp + ".jsp";
	title = "Add Unused Medicine";
	map.put("contentJsp", jsp);
	map.put("title", title);
		
	return new ModelAndView("index", "map", map);
}

@SuppressWarnings("unchecked")
public void fillItemsForUnsedMedicine(HttpServletRequest request,
		HttpServletResponse response) {

	int deptId = 0;
	int hospitalId = 0;
	String userName = "";
	HttpSession session = request.getSession();
	if (session.getAttribute("userName") != null)
		userName = (String) session.getAttribute("userName");
	if (session.getAttribute("hospitalId") != null)
		hospitalId = Integer.parseInt(""
				+ session.getAttribute("hospitalId"));
	if (session.getAttribute("deptId") != null)
		deptId = Integer.parseInt("" + session.getAttribute("deptId"));

	Map<String, Object> dataMap = new HashMap<String, Object>();
	List<StoreItemBatchStock> itemList = new ArrayList<StoreItemBatchStock>();
	Box box = HMSUtil.getBox(request);

	  box.put("hospitalId", hospitalId);
	  box.put("deptId", deptId);
	map = storesHandlerService.fillItemsForUnsedMedicine(box);
	if (map.get("itemList") != null) {
		itemList = (List) map.get("itemList");
	}
	StringBuffer sb = new StringBuffer();
	try {
		for (StoreItemBatchStock list : itemList) {
			sb.append("<item>");
			sb.append("<id>" + list.getId() + "</id>");
			sb.append("<pvms>" + list.getItem().getPvmsNo() + "</pvms>");			
			sb.append("<nomen>" + list.getItem().getNomenclature() + "</nomen>");
			sb.append("</item>");
		}
		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
	} catch (Exception e) {
		e.printStackTrace();
	}
	response.setContentType("text/xml");
	response.setHeader("Cache-Control", "no-cache");
	try {
		response.getWriter().write(
				"<?xml version='1.0' encoding='ISO-8859-1'?>");
		response.getWriter().write("<items>");
		response.getWriter().write(sb.toString());
		response.getWriter().write("</items>");

	} catch (Exception e) {
		e.printStackTrace();
	}

}

@SuppressWarnings("unchecked")
public void getItemDetailsFromStock(HttpServletRequest request,
		HttpServletResponse response) {

	int deptId = 0;
	int hospitalId = 0;
	String userName = "";
	HttpSession session = request.getSession();
	if (session.getAttribute("userName") != null)
		userName = (String) session.getAttribute("userName");
	if (session.getAttribute("hospitalId") != null)
		hospitalId = Integer.parseInt(""
				+ session.getAttribute("hospitalId"));
	if (session.getAttribute("deptId") != null)
		deptId = Integer.parseInt("" + session.getAttribute("deptId"));

	Map<String, Object> dataMap = new HashMap<String, Object>();
	List<StoreItemBatchStock> itemList = new ArrayList<StoreItemBatchStock>();
	Box box = HMSUtil.getBox(request);
    box.put("flag", "ItemId");
	
	map = storesHandlerService.fillItemsForUnsedMedicine(box);
	if (map.get("itemList") != null) {
		itemList = (List) map.get("itemList");
	}
	StringBuffer sb = new StringBuffer();
	try {
		for (StoreItemBatchStock list : itemList) {
			sb.append("<item>");
			sb.append("<id>" + list.getId() + "</id>");
			sb.append("<batchNo>" + (list.getBatchNo()!=null?list.getBatchNo():"") + "</batchNo>");
			sb.append("<expiryDate>" + (list.getExpiryDate()!=null?HMSUtil.changeDateToddMMyyyy(list.getExpiryDate()):"") + "</expiryDate>");			
			sb.append("<manuDate>" + (list.getManufactureDate()!=null?HMSUtil.changeDateToddMMyyyy(list.getManufactureDate()):"") + "</manuDate>");
			sb.append("<brand>" + (list.getBrand()!=null?list.getBrand().getBrandName():"") + "</brand>");
			sb.append("<manu>" + (list.getManufacturer()!=null?list.getManufacturer().getManufacturerName():"") + "</manu>");
			sb.append("<rate>" + (list.getCostPrice()!=null?list.getCostPrice().doubleValue():"0.0") + "</rate>");
			sb.append("</item>");
		}
		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
	} catch (Exception e) {
		e.printStackTrace();
	}
	response.setContentType("text/xml");
	response.setHeader("Cache-Control", "no-cache");
	try {
		response.getWriter().write(
				"<?xml version='1.0' encoding='ISO-8859-1'?>");
		response.getWriter().write("<items>");
		response.getWriter().write(sb.toString());
		response.getWriter().write("</items>");

	} catch (Exception e) {
		e.printStackTrace();
	}

}


public ModelAndView addStockofReturnedMedicine(HttpServletRequest request, HttpServletResponse response)
{
	 	Map<String, Object> map = new HashMap<String, Object>();
	 	Map<String, Object> dataMap = new HashMap<String, Object>();
	 	Map<String, Object> datamap = new HashMap<String, Object>();		
		
		int deptId = 0;
		int hospitalId=0;
		Box box = HMSUtil.getBox(request);	
		HttpSession session = request.getSession();
		
		
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
			box.put("deptId", deptId);
		}
		
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			box.put("hospitalId", hospitalId);
		}
		
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("deptId",deptId);		
	
	 	
	 	datamap = storesHandlerService.addStockofReturnedMedicine(box);
	 	if(datamap.get("bSuccessfullyAdded")!= null)
	 	{
	 		map.put("bSuccessfullyAdded", datamap.get("bSuccessfullyAdded"));
	 		map.put("message", datamap.get("message"));
	 		map.put("ReturnedMedicineId", datamap.get("Id"));
	 		map.put("flag", "ReturnedMedicine");
	 	} 	
	 	
	 		
	 	jsp = "storeMessage_New";
		jsp = jsp + ".jsp";
		title = "Receive Report Entry";
	 	
	 	
	 	map.put("contentJsp", jsp);
	 	map.put("title", title);	
	 	return new ModelAndView("index", "map", map);
}


public ModelAndView showUnusedMedicineList(HttpServletRequest request,HttpServletResponse response)
{	
	List<Object[]> financialYearList = new ArrayList<Object[]>();
	List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	int hospitalId=0;
	HttpSession session=request.getSession();
	if (session.getAttribute("hospitalId") != null) {
		hospitalId = (Integer) session.getAttribute("hospitalId");
	}	

	dataMap.put("hospitalId", hospitalId);					
			
	financialYearList = storesHandlerService.getFinancialYearList();	
	//map = storesHandlerService.showRequestForQuotationJsp(dataMap);
	
	//supplierList= (List<MasStoreSupplier>)map.get("supplierList");
	
	
	jsp = "headerListofUnusedMedicine";
	jsp += ".jsp";
	title = "Awaiting List of RR Inspection";	
	
	map.put("contentJsp", jsp);
	map.put("title", title);	
	
	return new ModelAndView("index", "map", map);
}


public ModelAndView getListOfUnusedMedicine(HttpServletRequest request,HttpServletResponse response)
	
{
	
	Map<String,Object> map = new HashMap<String,Object>();
	List<StoreGrnM> grnList = new ArrayList<StoreGrnM>();
	
	Box box = HMSUtil.getBox(request);	
	
	String unitType="";
	
	HttpSession session = request.getSession();
	
	
	
	map = storesHandlerService.getListOfUnusedMedicine(box);
	
	if(map.get("grnList")!= null)
	{
		grnList = (List<StoreGrnM>) map.get("grnList");
	}
	
	int totalRecords = 0;
	if(map.get("totalRecords")!= null)
	{
		totalRecords = (Integer) map.get("totalRecords");
	}
	
	try
	{
		PrintWriter pw = response.getWriter();	
		
		pw.write("[");
		int counter=1;
		
		for(StoreGrnM list : grnList)
		{
			
			
		    if(counter != grnList.size())
		    {
		    	
		    		pw.write("{\"Id\": \""+list.getId()+"\",\"Date\": \""+(list.getGrnDate() != null?HMSUtil.changeDateToddMMyyyy(list.getGrnDate()):"")+"\",\"GRNNo\": \""+(list.getGrnNo() != null?list.getGrnNo():"")+"\",\"PONo\": \""+(list.getPo()!=null?list.getPo().getPoNumber():"")+"\",\"Vendor\": \""+(list.getPo()!=null?list.getPo().getSupplier().getSupplierName():"")+"\",\"PreparedBy\":\""+(list.getEnteredBy() != null?list.getEnteredBy().getEmployee().getFirstName():"")+"\",\"ReceivedBy\":\""+(list.getEnteredBy() != null?list.getEnteredBy().getEmployee().getFirstName():"")+"\",\"TotalAmt\":\""+(list.getInvoiceAmount()!=null?list.getInvoiceAmount():"")+"\",\"totalRecords\":\""+totalRecords+"\"},");
		    	
		    }
		    else
		    {		    	
		    	 pw.write("{\"Id\": \""+list.getId()+"\",\"Date\": \""+(list.getGrnDate() != null?HMSUtil.changeDateToddMMyyyy(list.getGrnDate()):"")+"\",\"GRNNo\": \""+(list.getGrnNo() != null?list.getGrnNo():"")+"\",\"PONo\": \""+(list.getPo()!=null?list.getPo().getPoNumber():"")+"\",\"Vendor\": \""+(list.getPo()!=null?list.getPo().getSupplier().getSupplierName():"")+"\",\"PreparedBy\":\""+(list.getEnteredBy() != null?list.getEnteredBy().getEmployee().getFirstName():"")+"\",\"ReceivedBy\":\""+(list.getEnteredBy() != null?list.getEnteredBy().getEmployee().getFirstName():"")+"\",\"TotalAmt\":\""+(list.getInvoiceAmount()!=null?list.getInvoiceAmount():"")+"\",\"totalRecords\":\""+totalRecords+"\"}");
		    	
		    }
		
		    counter++;		
		}
		
		
		pw.write("]");
		
		
	}
	
	catch(Exception e)
	{
		grnList.clear();
		e.printStackTrace();
	}	
	grnList.clear();
	return null;		
	

}



public ModelAndView ViewUnusedMedicine(HttpServletRequest request, HttpServletResponse response)
{
	Map<String,Object>map = new HashMap<String,Object>();
	List<StoreGrnM> grnHeader = new ArrayList<StoreGrnM>();
	List<StoreGrnT> grnDetails = new ArrayList<StoreGrnT>();
	List<Object[]> mprPriorityList = new ArrayList<Object[]>();
	List<Object[]> financialYearList = new ArrayList<Object[]>();	
						
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
	}
	
	Box box = HMSUtil.getBox(request);	
	int headerId = 0;
	if(box.getInt("headerId") != 0)
	{
		headerId = box.getInt("headerId");
	}
	
	map = storesHandlerService.getRRDetailsforInspection(headerId);
	if(map.get("grnDetails")!=null)
	{
		grnDetails = (List<StoreGrnT>) map.get("grnDetails");
	}
	if(map.get("grnHeader")!=null)
	{
		grnHeader = (List<StoreGrnM>) map.get("grnHeader");
	}
	
	mprPriorityList = storesHandlerService.getMPRPriorityList();		
	financialYearList = storesHandlerService.getFinancialYearList();
	
		
	jsp = "viewUpdateUnusedMedicine";
	
	jsp += ".jsp";
	title = "Inspection Of RR";
	
	
	
	map.put("mprPriorityList", mprPriorityList);
	map.put("financialYearList", financialYearList);
	
	
	if(grnHeader.size()>0)
	{
		map.put("grnHeader", grnHeader);
	}
	if(grnDetails.size()>0)
	{
		map.put("grnDetails", grnDetails);
	}
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("index", "map", map);
}

public ModelAndView printReturnedMedicineListReport(HttpServletRequest request,HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	Map<String, Object> patientMap = new HashMap<String, Object>();
	int hinId = 0;
	HttpSession session = request.getSession();
	String deptName="";
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);		
	Box box = HMSUtil.getBox(request);
	box.put("hospitalId", hospitalId);
	String hospitalName = storesHandlerService.getHospitalName(hospitalId);
	box.put("hospitalName", hospitalName);		
		
	
    int grnHeaderId=0;
   
	if (request.getParameter("grnHeaderId") != null) {
		grnHeaderId = Integer.parseInt(request.getParameter("grnHeaderId"));
		
			
	}
	System.out.println("grnHeaderId="+grnHeaderId);
	Map<String, Object> connectionMap = storesHandlerService
			.getConnectionForReport();
	map.put("hospitalName", hospitalName);
	map.put("grnHeaderId", grnHeaderId);

	
	String userHome = getServletContext().getRealPath("");	         
    String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
    map.put("path", imagePath);
    
	HMSUtil.generateReport("Returned_medicine_list", map,
			(Connection) connectionMap.get("con"), response,
			getServletContext());
	return null;
}

public ModelAndView printDiscrepancyNoteReport(HttpServletRequest request,HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	Map<String, Object> patientMap = new HashMap<String, Object>();
	int hinId = 0;
	HttpSession session = request.getSession();
	String deptName="";
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);		
	Box box = HMSUtil.getBox(request);
	box.put("hospitalId", hospitalId);
	String hospitalName = storesHandlerService.getHospitalName(hospitalId);
	box.put("hospitalName", hospitalName);		
		
	
    int GrnID=0;
   
	if (request.getParameter("GrnID") != null) {
		GrnID = Integer.parseInt(request.getParameter("GrnID"));
		
			
	}
System.out.println("GrnID="+GrnID);
	Map<String, Object> connectionMap = storesHandlerService
			.getConnectionForReport();
	map.put("hospitalName", hospitalName);
	map.put("GrnID", GrnID);

	
	String userHome = getServletContext().getRealPath("");	         
    String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
    map.put("path", imagePath);
    
	HMSUtil.generateReport("Inspection_memo", map,
			(Connection) connectionMap.get("con"), response,
			getServletContext());
	return null;
}



public ModelAndView showMRScreen(HttpServletRequest request,HttpServletResponse response) {
	session = request.getSession();
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	List<MasDepartment> deptList = new ArrayList<MasDepartment>();	
	
	int deptId = 0;
	int hospitalId=0;
	if (session.getAttribute("deptId") != null) {
		deptId = (Integer) session.getAttribute("deptId");
	}

	if (session.getAttribute("hospitalId") != null) {
		hospitalId = (Integer) session.getAttribute("hospitalId");
	}
	

	dataMap = storesHandlerService.getDepartmentList();
	if(dataMap.get("deptList") != null)
	{
		deptList = (List<MasDepartment>)dataMap.get("deptList");
	}
	
	
	jsp = "createMR";
	jsp = jsp + ".jsp";
	title = "Material Request";
	map.put("contentJsp", jsp);
	map.put("title", title);
	String previousPage = "no";
	map.put("deptList", deptList);	
	return new ModelAndView("index", "map", map);
}

public ModelAndView showMRScreenForMIssue(HttpServletRequest request,HttpServletResponse response) {
	session = request.getSession();
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	List<MasDepartment> deptList = new ArrayList<MasDepartment>();	
	
	int deptId = 0;
	int hospitalId=0;
	if (session.getAttribute("deptId") != null) {
		deptId = (Integer) session.getAttribute("deptId");
	}

	if (session.getAttribute("hospitalId") != null) {
		hospitalId = (Integer) session.getAttribute("hospitalId");
	}
	

	dataMap = storesHandlerService.getDepartmentList();
	if(dataMap.get("deptList") != null)
	{
		deptList = (List<MasDepartment>)dataMap.get("deptList");
	}
	
	
	map.put("deptId",deptId);
	map.put("hospitalId",hospitalId);
	map = storesHandlerService.showOPDPatientIssueGridForMIssue(map);
	
	
	
	jsp = "createMRForMIssue";
	jsp = jsp + ".jsp";
	title = "Material Request";
	map.put("contentJsp", jsp);
	map.put("title", title);
	String previousPage = "no";
	map.put("deptList", deptList);	
	return new ModelAndView("index", "map", map);
}

public ModelAndView showRCScreen(HttpServletRequest request,HttpServletResponse response) {
	session = request.getSession();
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	List<MasDepartment> deptList = new ArrayList<MasDepartment>();	
	
	int deptId = 0;
	int hospitalId=0;
	if (session.getAttribute("deptId") != null) {
		deptId = (Integer) session.getAttribute("deptId");
	}

	if (session.getAttribute("hospitalId") != null) {
		hospitalId = (Integer) session.getAttribute("hospitalId");
	}
	

	/*dataMap = storesHandlerService.getDepartmentList();*/
	if(dataMap.get("deptList") != null)
	{
		deptList = (List<MasDepartment>)dataMap.get("deptList");
	}
	
	
	jsp = "createRC";
	jsp = jsp + ".jsp";
	title = "Material Request";
	map.put("contentJsp", jsp);
	map.put("title", title);
	String previousPage = "no";
	map.put("deptList", deptList);	
	return new ModelAndView("index", "map", map);
}


@SuppressWarnings("unchecked")
public synchronized void getStockDetailsforMR(HttpServletRequest request,
		HttpServletResponse response) {

	int deptId = 0;
	int hospitalId = 0;
	String userName = "";
	HttpSession session = request.getSession();
	if (session.getAttribute("userName") != null)
		userName = (String) session.getAttribute("userName");
	if (session.getAttribute("hospitalId") != null)
		hospitalId = Integer.parseInt(""
				+ session.getAttribute("hospitalId"));
	if (session.getAttribute("deptId") != null)
		deptId = Integer.parseInt("" + session.getAttribute("deptId"));

	Map<String, Object> dataMap = new HashMap<String, Object>();
	List<StoreItemBatchStock> itemList = new ArrayList<StoreItemBatchStock>();
	Box box = HMSUtil.getBox(request);
	
	box.put("deptId", deptId);
	box.put("hospitalId", hospitalId);

	double stockA = 0.0;
	double stockW = 0.0;
	double stockC = 0.0;
	double stockS = 0.0;
    dataMap = storesHandlerService.getStockDetailsforMR(box);
	if (dataMap.get("stockA") != null) {
		stockA = (Double) dataMap.get("stockA");
	}
	if (dataMap.get("stockW") != null) {
		stockW = (Double) dataMap.get("stockW");
	}
	if (dataMap.get("stockC") != null) {
		stockC = (Double) dataMap.get("stockC");
	}
	if (dataMap.get("stockS") != null) {
		stockS = (Double) dataMap.get("stockS");
	}
	StringBuffer sb = new StringBuffer();
	try {
		
			sb.append("<item>");
			sb.append("<stockA>" + stockA + "</stockA>");
			sb.append("<stockW>" + stockW + "</stockW>");
			sb.append("<stockC>" + stockC + "</stockC>");
			sb.append("<stockS>" + stockS + "</stockS>");
			
			sb.append("</item>");
		
		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
	} catch (Exception e) {
		e.printStackTrace();
	}
	response.setContentType("text/xml");
	response.setHeader("Cache-Control", "no-cache");
	try {
		response.getWriter().write(
				"<?xml version='1.0' encoding='ISO-8859-1'?>");
		response.getWriter().write("<items>");
		response.getWriter().write(sb.toString());
		response.getWriter().write("</items>");

	} catch (Exception e) {
		e.printStackTrace();
	}

}

public ModelAndView saveMR(HttpServletRequest request, HttpServletResponse response)
{
	 	Map<String, Object> map = new HashMap<String, Object>();
	 	Map<String, Object> datamap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		int deptId = 0;
		int hospitalId=0;
		Box box = HMSUtil.getBox(request);	
		HttpSession session = request.getSession();
		
		
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
			box.put("deptId", deptId);
		}
		
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			box.put("hospitalId", hospitalId);
		}
		
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("deptId",deptId);

	 	
	 	datamap = storesHandlerService.saveMR(box);
	 	
	 	if(datamap.get("bSuccessfullyAdded")!= null)
	 	{
	 		map.put("bSuccessfullyAdded", datamap.get("bSuccessfullyAdded"));
	 		map.put("message", datamap.get("message"));
	 		map.put("mrHeaderId", datamap.get("mrHeaderId"));
	 		map.put("flag", "MR");
	 	} 	
	 	
	 		
	 	jsp = "storeMessage_New"; 		
	 	
		jsp = jsp + ".jsp";
		title = "Material Request";
	 	
	 	
	 	map.put("contentJsp", jsp);
	 	map.put("title", title);	
	 	return new ModelAndView("index", "map", map);
}

public ModelAndView saveMRMIssue(HttpServletRequest request, HttpServletResponse response)
{
	 	Map<String, Object> map = new HashMap<String, Object>();
	 	Map<String, Object> datamap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		int deptId = 0;
		int hospitalId=0;
		Box box = HMSUtil.getBox(request);	
		HttpSession session = request.getSession();
		
		
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
			box.put("deptId", deptId);
		}
		
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			box.put("hospitalId", hospitalId);
		}
		
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("deptId",deptId);

	 	
	 	datamap = storesHandlerService.saveMRMIssue(box);
	 	
	 	if(datamap.get("bSuccessfullyAdded")!= null)
	 	{
	 		map.put("bSuccessfullyAdded", datamap.get("bSuccessfullyAdded"));
	 		map.put("message", datamap.get("message"));
	 		map.put("mrHeaderId", datamap.get("mrHeaderId"));
	 		map.put("flag", "Ward");
	 	} 	
	 	
	 	return saveMRMIssueRedirect(request, response, map);	
	 	/*jsp = "storeMessage_New"; 		
	 	
		jsp = jsp + ".jsp";
		title = "Material Request";
	 	
	 	
	 	map.put("contentJsp", jsp);
	 	map.put("title", title);	
	 	return new ModelAndView("index", "map", map);*/
}

public ModelAndView saveMRMIssueRedirect(HttpServletRequest request, HttpServletResponse response, Map<String, Object> map)
{
	 
	 	
	 		
	 	jsp = "storeMessage_New"; 		
	 	
		jsp = jsp + ".jsp";
		title = "Material Request";
	 	
	 	
	 	map.put("contentJsp", jsp);
	 	map.put("title", title);	
	 	return new ModelAndView("index", "map", map);
}

public ModelAndView saveRC(HttpServletRequest request, HttpServletResponse response)
{
	 	Map<String, Object> map = new HashMap<String, Object>();
	 	Map<String, Object> datamap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		int deptId = 0;
		int hospitalId=0;
		Box box = HMSUtil.getBox(request);	
		HttpSession session = request.getSession();
		
		
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
			box.put("deptId", deptId);
		}
		
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			box.put("hospitalId", hospitalId);
		}
		
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("deptId",deptId);

	 	
	 	datamap = storesHandlerService.saveRC(box);
	 	
	 	if(datamap.get("bSuccessfullyAdded")!= null)
	 	{
	 		map.put("bSuccessfullyAdded", datamap.get("bSuccessfullyAdded"));
	 		map.put("requestHeaderId", datamap.get("requestHeaderId"));
	 		map.put("message", datamap.get("message"));
	 		map.put("requestHeaderId", datamap.get("requestHeaderId"));
	 		map.put("flag", "RC");
	 	} 	
	 	
	 		
	 	jsp = "storeMessage_New"; 		
	 	
		jsp = jsp + ".jsp";
		title = "Rate Contract Request";
	 	
	 	
	 	map.put("contentJsp", jsp);
	 	map.put("title", title);	
	 	return new ModelAndView("index", "map", map);
}


public ModelAndView showMRList(HttpServletRequest request,HttpServletResponse response)
{
	

	jsp = "mrList";
	jsp += ".jsp";
	title = "Material Request List";	
	
	map.put("contentJsp", jsp);
	map.put("title", title);
		
	return new ModelAndView("index", "map", map);
}

public ModelAndView showMRListWard(HttpServletRequest request,HttpServletResponse response)
{
	

	jsp = "mrListWard";
	jsp += ".jsp";
	title = "Material Request List";	
	
	map.put("contentJsp", jsp);
	map.put("title", title);
		
	return new ModelAndView("index", "map", map);
}




public ModelAndView getListOfMR(HttpServletRequest request,HttpServletResponse response)
	
{
	
	Map<String,Object> map = new HashMap<String,Object>();
	List<StoreInternalIndentM> mrHeaderList = new ArrayList<StoreInternalIndentM>();
	
	Box box = HMSUtil.getBox(request);	
	
	String unitType="";
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
		box.put("hospitalId", hospitalId);
	}
	
	int deptId = 0;
	if (session.getAttribute("deptId") != null) {
		deptId = (Integer) session.getAttribute("deptId");
		box.put("deptId", deptId);
	}
	
	
	map = storesHandlerService.getListOfMR(box);
	
	if(map.get("mrHeaderList")!= null)
	{
		mrHeaderList = (List<StoreInternalIndentM>) map.get("mrHeaderList");
	}
	System.out.println("in controller mrHeaderList="+mrHeaderList.size());
	int totalRecords = 0;
	if(map.get("totalRecords")!= null)
	{
		totalRecords = (Integer) map.get("totalRecords");
	}
	
	try
	{
		PrintWriter pw = response.getWriter();	
		
		pw.write("[");
		int counter=1;
		
		for(StoreInternalIndentM list : mrHeaderList)
		{
			
			
		    if(counter != mrHeaderList.size())
		    {
		    	
		    		pw.write("{\"Id\": \""+list.getId()+"\",\"MRDate\": \""+(list.getDemandDate() != null?HMSUtil.changeDateToddMMyyyy(list.getDemandDate()):"")+"\",\"MRNo\": \""+(list.getDemandNo()!=null?list.getDemandNo():"")+"\",\"ToDepartment\": \""+(list.getToStore()!=null?list.getToStore().getDepartmentName():"")+"\",\"FromDepartment\": \""+(list.getDepartment()!=null?list.getDepartment().getDepartmentName():"")+"\",\"PreparedBy\":\""+(list.getCreatedBy() != null?list.getCreatedBy().getEmployee().getFirstName():"")+"\",\"ApprovedBy\": \""+(list.getApprovedBy() != null?list.getApprovedBy().getFirstName():"")+"\",\"Status\":\""+(list.getStatus()!=null?list.getStatus():"")+"\",\"totalRecords\":\""+totalRecords+"\"},");
		    	
		    }
		    else
		    {		    	
		    	pw.write("{\"Id\": \""+list.getId()+"\",\"MRDate\": \""+(list.getDemandDate() != null?HMSUtil.changeDateToddMMyyyy(list.getDemandDate()):"")+"\",\"MRNo\": \""+(list.getDemandNo()!=null?list.getDemandNo():"")+"\",\"ToDepartment\": \""+(list.getToStore()!=null?list.getToStore().getDepartmentName():"")+"\",\"FromDepartment\": \""+(list.getDepartment()!=null?list.getDepartment().getDepartmentName():"")+"\",\"PreparedBy\":\""+(list.getCreatedBy() != null?list.getCreatedBy().getEmployee().getFirstName():"")+"\",\"ApprovedBy\": \""+(list.getApprovedBy() != null?list.getApprovedBy().getFirstName():"")+"\",\"Status\":\""+(list.getStatus()!=null?list.getStatus():"")+"\",\"totalRecords\":\""+totalRecords+"\"}");
		    	
		    }
		
		    counter++;		
		}
		
		
		pw.write("]");
		
		
	}
	
	catch(Exception e)
	{
		mrHeaderList.clear();
		e.printStackTrace();
	}	
	mrHeaderList.clear();
	return null;		
	

}


public ModelAndView getListOfMRWard(HttpServletRequest request,HttpServletResponse response)
	
{
	
	Map<String,Object> map = new HashMap<String,Object>();
	List<StoreInternalIndentM> mrHeaderList = new ArrayList<StoreInternalIndentM>();
	
	Box box = HMSUtil.getBox(request);	
	
	String unitType="";
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
		box.put("hospitalId", hospitalId);
	}
	
	int deptId = 0;
	if (session.getAttribute("deptId") != null) {
		deptId = (Integer) session.getAttribute("deptId");
		box.put("deptId", deptId);
	}
	
	
	map = storesHandlerService.getListOfMRWard(box);
	
	if(map.get("mrHeaderList")!= null)
	{
		mrHeaderList = (List<StoreInternalIndentM>) map.get("mrHeaderList");
	}
	System.out.println("in controller mrHeaderList="+mrHeaderList.size());
	int totalRecords = 0;
	if(map.get("totalRecords")!= null)
	{
		totalRecords = (Integer) map.get("totalRecords");
	}
	
	try
	{
		PrintWriter pw = response.getWriter();	
		
		pw.write("[");
		int counter=1;
		
		for(StoreInternalIndentM list : mrHeaderList)
		{
			
			
		    if(counter != mrHeaderList.size())
		    {
		    	
		    		pw.write("{\"Id\": \""+list.getId()+"\",\"MRDate\": \""+(list.getDemandDate() != null?HMSUtil.changeDateToddMMyyyy(list.getDemandDate()):"")+"\",\"MRNo\": \""+(list.getDemandNo()!=null?list.getDemandNo():"")+"\",\"ToDepartment\": \""+(list.getToStore()!=null?list.getToStore().getDepartmentName():"")+"\",\"FromDepartment\": \""+(list.getDepartment()!=null?list.getDepartment().getDepartmentName():"")+"\",\"PreparedBy\":\""+(list.getCreatedBy() != null?list.getCreatedBy().getEmployee().getFirstName():"")+"\",\"ApprovedBy\": \""+(list.getApprovedBy() != null?list.getApprovedBy().getFirstName():"")+"\",\"Status\":\""+(list.getStatus()!=null?list.getStatus():"")+"\",\"totalRecords\":\""+totalRecords+"\"},");
		    	
		    }
		    else
		    {		    	
		    	pw.write("{\"Id\": \""+list.getId()+"\",\"MRDate\": \""+(list.getDemandDate() != null?HMSUtil.changeDateToddMMyyyy(list.getDemandDate()):"")+"\",\"MRNo\": \""+(list.getDemandNo()!=null?list.getDemandNo():"")+"\",\"ToDepartment\": \""+(list.getToStore()!=null?list.getToStore().getDepartmentName():"")+"\",\"FromDepartment\": \""+(list.getDepartment()!=null?list.getDepartment().getDepartmentName():"")+"\",\"PreparedBy\":\""+(list.getCreatedBy() != null?list.getCreatedBy().getEmployee().getFirstName():"")+"\",\"ApprovedBy\": \""+(list.getApprovedBy() != null?list.getApprovedBy().getFirstName():"")+"\",\"Status\":\""+(list.getStatus()!=null?list.getStatus():"")+"\",\"totalRecords\":\""+totalRecords+"\"}");
		    	
		    }
		
		    counter++;		
		}
		
		
		pw.write("]");
		
		
	}
	
	catch(Exception e)
	{
		mrHeaderList.clear();
		e.printStackTrace();
	}	
	mrHeaderList.clear();
	return null;		
	

}




public ModelAndView showRCList(HttpServletRequest request,HttpServletResponse response)
{
	

	jsp = "rcList";
	jsp += ".jsp";
	title = "RC Request List";	
	
	map.put("contentJsp", jsp);
	map.put("title", title);
		
	return new ModelAndView("index", "map", map);
}

public ModelAndView showRCListCDS(HttpServletRequest request,HttpServletResponse response)
{
	

	jsp = "rcListCDS";
	jsp += ".jsp";
	title = "RC Request List";	
	
	map.put("contentJsp", jsp);
	map.put("title", title);
		
	return new ModelAndView("index", "map", map);
}

public ModelAndView showRcListSubmitUntilReceive(HttpServletRequest request,HttpServletResponse response)
{
	

	jsp = "rcListSubmitUntilReceive";
	jsp += ".jsp";
	title = "RC List";	
	
	map.put("contentJsp", jsp);
	map.put("title", title);
		
	return new ModelAndView("index", "map", map);
}

public ModelAndView showIssueDispensaryJspForRC(HttpServletRequest request,HttpServletResponse response)
{
	

	jsp = "issueRC";
	jsp += ".jsp";
	title = "RC Request List";	
	
	map.put("contentJsp", jsp);
	map.put("title", title);
		
	return new ModelAndView("index", "map", map);
}



public ModelAndView getListOfRC(HttpServletRequest request,HttpServletResponse response)
	
{
	
	Map<String,Object> map = new HashMap<String,Object>();
	List<RcRequestHeader> requestHeaderList = new ArrayList<RcRequestHeader>();
	
	Box box = HMSUtil.getBox(request);	
	
	String unitType="";
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
		box.put("hospitalId", hospitalId);
	}
	
	int deptId = 0;
	if (session.getAttribute("deptId") != null) {
		deptId = (Integer) session.getAttribute("deptId");
		box.put("deptId", deptId);
	}
	
	
	map = storesHandlerService.getListOfRC(box);
	
	if(map.get("requestHeaderList")!= null)
	{
		requestHeaderList = (List<RcRequestHeader>) map.get("requestHeaderList");
	}
	System.out.println("in controller requestHeaderList="+requestHeaderList.size());
	int totalRecords = 0;
	if(map.get("totalRecords")!= null)
	{
		totalRecords = (Integer) map.get("totalRecords");
	}
	
	try
	{
		PrintWriter pw = response.getWriter();	
		
		pw.write("[");
		int counter=1;
		
		for(RcRequestHeader list : requestHeaderList)
		{
			
			
		    if(counter != requestHeaderList.size())
		    {
		    	
		    		pw.write("{\"Id\": \""+list.getId()+"\",\"RequestDate\": \""+(list.getRequestDate() != null?HMSUtil.changeDateToddMMyyyy(list.getRequestDate()):"")+"\",\"RequestNo\": \""+(list.getRequestNo()!=null?list.getRequestNo():"")+"\",\"FromDepartment\": \""+(list.getDepartment()!=null?list.getDepartment().getDepartmentName():"")+"\",\"ToDepartment\": \""+(list.getToDepartment()!=null?list.getToDepartment().getDepartmentName():"")+"\",\"RequestedBy\":\""+(list.getReqestedBy() != null?list.getReqestedBy().getEmployee().getFirstName():"")+"\",\"ApprovedBy\": \""+(list.getApprovedBy() != null?list.getApprovedBy().getFirstName():"")+"\",\"Status\":\""+(list.getStatus()!=null?list.getStatus():"")+"\",\"totalRecords\":\""+totalRecords+"\"},");
		    	
		    }
		    else
		    {		    	
		    	pw.write("{\"Id\": \""+list.getId()+"\",\"RequestDate\": \""+(list.getRequestDate() != null?HMSUtil.changeDateToddMMyyyy(list.getRequestDate()):"")+"\",\"RequestNo\": \""+(list.getRequestNo()!=null?list.getRequestNo():"")+"\",\"FromDepartment\": \""+(list.getDepartment()!=null?list.getDepartment().getDepartmentName():"")+"\",\"ToDepartment\": \""+(list.getToDepartment()!=null?list.getToDepartment().getDepartmentName():"")+"\",\"RequestedBy\":\""+(list.getReqestedBy() != null?list.getReqestedBy().getEmployee().getFirstName():"")+"\",\"ApprovedBy\": \""+(list.getApprovedBy() != null?list.getApprovedBy().getFirstName():"")+"\",\"Status\":\""+(list.getStatus()!=null?list.getStatus():"")+"\",\"totalRecords\":\""+totalRecords+"\"}");
		    	
		    }
		
		    counter++;		
		}
		
		
		pw.write("]");
		
		
	}
	
	catch(Exception e)
	{
		requestHeaderList.clear();
		e.printStackTrace();
	}	
	requestHeaderList.clear();
	return null;		
	

}

public ModelAndView getListOfRCCDS(HttpServletRequest request,HttpServletResponse response)

{
	
	Map<String,Object> map = new HashMap<String,Object>();
	List<RcRequestHeader> requestHeaderList = new ArrayList<RcRequestHeader>();
	
	Box box = HMSUtil.getBox(request);	
	
	String unitType="";
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
		box.put("hospitalId", hospitalId);
	}
	
	int deptId = 0;
	if (session.getAttribute("deptId") != null) {
		deptId = (Integer) session.getAttribute("deptId");
		box.put("deptId", deptId);
	}
	
	
	map = storesHandlerService.getListOfRCCDS(box);
	
	if(map.get("requestHeaderList")!= null)
	{
		requestHeaderList = (List<RcRequestHeader>) map.get("requestHeaderList");
	}
	System.out.println("in controller requestHeaderList="+requestHeaderList.size());
	int totalRecords = 0;
	if(map.get("totalRecords")!= null)
	{
		totalRecords = (Integer) map.get("totalRecords");
	}
	
	try
	{
		PrintWriter pw = response.getWriter();	
		
		pw.write("[");
		int counter=1;
		
		for(RcRequestHeader list : requestHeaderList)
		{
			
			
		    if(counter != requestHeaderList.size())
		    {
		    	
		    		pw.write("{\"Id\": \""+list.getId()+"\",\"RequestDate\": \""+(list.getRequestDate() != null?HMSUtil.changeDateToddMMyyyy(list.getRequestDate()):"")+"\",\"RequestNo\": \""+(list.getRequestNo()!=null?list.getRequestNo():"")+"\",\"FromDepartment\": \""+(list.getDepartment()!=null?list.getDepartment().getDepartmentName():"")+"\",\"ToDepartment\": \""+(list.getToDepartment()!=null?list.getToDepartment().getDepartmentName():"")+"\",\"RequestedBy\":\""+(list.getReqestedBy() != null?list.getReqestedBy().getEmployee().getFirstName():"")+"\",\"ApprovedBy\": \""+(list.getApprovedBy() != null?list.getApprovedBy().getFirstName():"")+"\",\"Status\":\""+(list.getStatus()!=null?list.getStatus():"")+"\",\"totalRecords\":\""+totalRecords+"\"},");
		    	
		    }
		    else
		    {		    	
		    	pw.write("{\"Id\": \""+list.getId()+"\",\"RequestDate\": \""+(list.getRequestDate() != null?HMSUtil.changeDateToddMMyyyy(list.getRequestDate()):"")+"\",\"RequestNo\": \""+(list.getRequestNo()!=null?list.getRequestNo():"")+"\",\"FromDepartment\": \""+(list.getDepartment()!=null?list.getDepartment().getDepartmentName():"")+"\",\"ToDepartment\": \""+(list.getToDepartment()!=null?list.getToDepartment().getDepartmentName():"")+"\",\"RequestedBy\":\""+(list.getReqestedBy() != null?list.getReqestedBy().getEmployee().getFirstName():"")+"\",\"ApprovedBy\": \""+(list.getApprovedBy() != null?list.getApprovedBy().getFirstName():"")+"\",\"Status\":\""+(list.getStatus()!=null?list.getStatus():"")+"\",\"totalRecords\":\""+totalRecords+"\"}");
		    	
		    }
		
		    counter++;		
		}
		
		
		pw.write("]");
		
		
	}
	
	catch(Exception e)
	{
		requestHeaderList.clear();
		e.printStackTrace();
	}	
	requestHeaderList.clear();
	return null;		
	

}
public ModelAndView getListOfReceiveRC(HttpServletRequest request,HttpServletResponse response)

{
	
	Map<String,Object> map = new HashMap<String,Object>();
	List<RcRequestHeader> requestHeaderList = new ArrayList<RcRequestHeader>();
	
	Box box = HMSUtil.getBox(request);	
	
	String unitType="";
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
		box.put("hospitalId", hospitalId);
	}
	
	int deptId = 0;
	if (session.getAttribute("deptId") != null) {
		deptId = (Integer) session.getAttribute("deptId");
		box.put("deptId", deptId);
	}
	
	
	map = storesHandlerService.getListOfReceiveRC(box);
	
	if(map.get("requestHeaderList")!= null)
	{
		requestHeaderList = (List<RcRequestHeader>) map.get("requestHeaderList");
	}
	System.out.println("in controller requestHeaderList="+requestHeaderList.size());
	int totalRecords = 0;
	if(map.get("totalRecords")!= null)
	{
		totalRecords = (Integer) map.get("totalRecords");
	}
	
	try
	{
		PrintWriter pw = response.getWriter();	
		
		pw.write("[");
		int counter=1;
		
		for(RcRequestHeader list : requestHeaderList)
		{
			
			
		    if(counter != requestHeaderList.size())
		    {
		    	
		    		pw.write("{\"Id\": \""+list.getId()+"\",\"RequestDate\": \""+(list.getRequestDate() != null?HMSUtil.changeDateToddMMyyyy(list.getRequestDate()):"")+"\",\"RequestNo\": \""+(list.getRequestNo()!=null?list.getRequestNo():"")+"\",\"FromDepartment\": \""+(list.getDepartment()!=null?list.getDepartment().getDepartmentName():"")+"\",\"ToDepartment\": \""+(list.getToDepartment()!=null?list.getToDepartment().getDepartmentName():"")+"\",\"RequestedBy\":\""+(list.getReqestedBy() != null?list.getReqestedBy().getEmployee().getFirstName():"")+"\",\"ApprovedBy\": \""+(list.getApprovedBy() != null?list.getApprovedBy().getFirstName():"")+"\",\"Status\":\""+(list.getStatus()!=null?list.getStatus():"")+"\",\"totalRecords\":\""+totalRecords+"\"},");
		    	
		    }
		    else
		    {		    	
		    	pw.write("{\"Id\": \""+list.getId()+"\",\"RequestDate\": \""+(list.getRequestDate() != null?HMSUtil.changeDateToddMMyyyy(list.getRequestDate()):"")+"\",\"RequestNo\": \""+(list.getRequestNo()!=null?list.getRequestNo():"")+"\",\"FromDepartment\": \""+(list.getDepartment()!=null?list.getDepartment().getDepartmentName():"")+"\",\"ToDepartment\": \""+(list.getToDepartment()!=null?list.getToDepartment().getDepartmentName():"")+"\",\"RequestedBy\":\""+(list.getReqestedBy() != null?list.getReqestedBy().getEmployee().getFirstName():"")+"\",\"ApprovedBy\": \""+(list.getApprovedBy() != null?list.getApprovedBy().getFirstName():"")+"\",\"Status\":\""+(list.getStatus()!=null?list.getStatus():"")+"\",\"totalRecords\":\""+totalRecords+"\"}");
		    	
		    }
		
		    counter++;		
		}
		
		
		pw.write("]");
		
		
	}
	
	catch(Exception e)
	{
		requestHeaderList.clear();
		e.printStackTrace();
	}	
	requestHeaderList.clear();
	return null;		
	

}

public ModelAndView getListOfReceiveMR(HttpServletRequest request,HttpServletResponse response)

{
	
	Map<String,Object> map = new HashMap<String,Object>();
	List<StoreInternalIndentM> indentMList = new ArrayList<StoreInternalIndentM>();
	
	Box box = HMSUtil.getBox(request);	
	
	String unitType="";
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
		box.put("hospitalId", hospitalId);
	}
	
	int deptId = 0;
	if (session.getAttribute("deptId") != null) {
		deptId = (Integer) session.getAttribute("deptId");
		box.put("deptId", deptId);
	}
	
	
	map = storesHandlerService.getListOfReceiveMR(box);
	
	if(map.get("indentMList")!= null)
	{
		indentMList = (List<StoreInternalIndentM>) map.get("indentMList");
	}
	System.out.println("in controller indentMList="+indentMList.size());
	int totalRecords = 0;
	if(map.get("totalRecords")!= null)
	{
		totalRecords = (Integer) map.get("totalRecords");
	}
	
	try
	{
		PrintWriter pw = response.getWriter();	
		
		pw.write("[");
		int counter=1;
		
		for(StoreInternalIndentM list : indentMList)
		{
			
			
		    if(counter != indentMList.size())
		    {
		    	
		    		pw.write("{\"Id\": \""+list.getId()+"\",\"DemandDate\": \""+(list.getDemandDate() != null?HMSUtil.changeDateToddMMyyyy(list.getDemandDate()):"")+"\",\"DemandNo\": \""+(list.getDemandNo()!=null?list.getDemandNo():"")+"\",\"FromDepartmentId\": \""+(list.getDepartment()!=null?list.getDepartment().getId():"")+"\",\"FromDepartment\": \""+(list.getDepartment()!=null?list.getDepartment().getDepartmentName():"")+"\",\"ToDepartment\": \""+(list.getToStore()!=null?list.getToStore().getDepartmentName():"")+"\",\"RequestedBy\":\""+(list.getRequestedBy() != null?list.getRequestedBy().getFirstName():"")+"\",\"ApprovedBy\": \""+(list.getApprovedBy() != null?list.getApprovedBy().getFirstName():"")+"\",\"Status\":\""+(list.getStatus()!=null?list.getStatus():"")+"\",\"ApprovedDate\": \""+(list.getApprovalDate() != null?HMSUtil.changeDateToddMMyyyy(list.getApprovalDate()):"")+"\",\"totalRecords\":\""+totalRecords+"\"},");
		    	
		    }
		    else
		    {		    	
		    	pw.write("{\"Id\": \""+list.getId()+"\",\"DemandDate\": \""+(list.getDemandDate() != null?HMSUtil.changeDateToddMMyyyy(list.getDemandDate()):"")+"\",\"DemandNo\": \""+(list.getDemandNo()!=null?list.getDemandNo():"")+"\",\"FromDepartmentId\": \""+(list.getDepartment()!=null?list.getDepartment().getId():"")+"\",\"FromDepartment\": \""+(list.getDepartment()!=null?list.getDepartment().getDepartmentName():"")+"\",\"ToDepartment\": \""+(list.getToStore()!=null?list.getToStore().getDepartmentName():"")+"\",\"RequestedBy\":\""+(list.getRequestedBy() != null?list.getRequestedBy().getFirstName():"")+"\",\"ApprovedBy\": \""+(list.getApprovedBy() != null?list.getApprovedBy().getFirstName():"")+"\",\"Status\":\""+(list.getStatus()!=null?list.getStatus():"")+"\",\"ApprovedDate\": \""+(list.getApprovalDate() != null?HMSUtil.changeDateToddMMyyyy(list.getApprovalDate()):"")+"\",\"totalRecords\":\""+totalRecords+"\"}");
		    	
		    }
		
		    counter++;		
		}
		
		
		pw.write("]");
		
		
	}
	
	catch(Exception e)
	{
		indentMList.clear();
		e.printStackTrace();
	}	
	indentMList.clear();
	return null;		
	

}

public ModelAndView getListOfReceiveMRForWard(HttpServletRequest request,HttpServletResponse response)

{
	
	Map<String,Object> map = new HashMap<String,Object>();
	List<StoreInternalIndentM> indentMList = new ArrayList<StoreInternalIndentM>();
	
	Box box = HMSUtil.getBox(request);	
	
	String unitType="";
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
		box.put("hospitalId", hospitalId);
	}
	
	int deptId = 0;
	if (session.getAttribute("deptId") != null) {
		deptId = (Integer) session.getAttribute("deptId");
		box.put("deptId", deptId);
	}
	
	
	map = storesHandlerService.getListOfReceiveMRForWard(box);
	
	if(map.get("indentMList")!= null)
	{
		indentMList = (List<StoreInternalIndentM>) map.get("indentMList");
	}
	System.out.println("in controller indentMList="+indentMList.size());
	int totalRecords = 0;
	if(map.get("totalRecords")!= null)
	{
		totalRecords = (Integer) map.get("totalRecords");
	}
	
	try
	{
		PrintWriter pw = response.getWriter();	
		
		pw.write("[");
		int counter=1;
		
		for(StoreInternalIndentM list : indentMList)
		{
			
			
		    if(counter != indentMList.size())
		    {
		    	
		    		pw.write("{\"Id\": \""+list.getId()+"\",\"DemandDate\": \""+(list.getDemandDate() != null?HMSUtil.changeDateToddMMyyyy(list.getDemandDate()):"")+"\",\"DemandNo\": \""+(list.getDemandNo()!=null?list.getDemandNo():"")+"\",\"FromDepartmentId\": \""+(list.getDepartment()!=null?list.getDepartment().getId():"")+"\",\"FromDepartment\": \""+(list.getDepartment()!=null?list.getDepartment().getDepartmentName():"")+"\",\"ToDepartment\": \""+(list.getToStore()!=null?list.getToStore().getDepartmentName():"")+"\",\"RequestedBy\":\""+(list.getRequestedBy() != null?list.getRequestedBy().getFirstName():"")+"\",\"ApprovedBy\": \""+(list.getApprovedBy() != null?list.getApprovedBy().getFirstName():"")+"\",\"Status\":\""+(list.getStatus()!=null?list.getStatus():"")+"\",\"ApprovedDate\": \""+(list.getApprovalDate() != null?HMSUtil.changeDateToddMMyyyy(list.getApprovalDate()):"")+"\",\"totalRecords\":\""+totalRecords+"\"},");
		    	
		    }
		    else
		    {		    	
		    	pw.write("{\"Id\": \""+list.getId()+"\",\"DemandDate\": \""+(list.getDemandDate() != null?HMSUtil.changeDateToddMMyyyy(list.getDemandDate()):"")+"\",\"DemandNo\": \""+(list.getDemandNo()!=null?list.getDemandNo():"")+"\",\"FromDepartmentId\": \""+(list.getDepartment()!=null?list.getDepartment().getId():"")+"\",\"FromDepartment\": \""+(list.getDepartment()!=null?list.getDepartment().getDepartmentName():"")+"\",\"ToDepartment\": \""+(list.getToStore()!=null?list.getToStore().getDepartmentName():"")+"\",\"RequestedBy\":\""+(list.getRequestedBy() != null?list.getRequestedBy().getFirstName():"")+"\",\"ApprovedBy\": \""+(list.getApprovedBy() != null?list.getApprovedBy().getFirstName():"")+"\",\"Status\":\""+(list.getStatus()!=null?list.getStatus():"")+"\",\"ApprovedDate\": \""+(list.getApprovalDate() != null?HMSUtil.changeDateToddMMyyyy(list.getApprovalDate()):"")+"\",\"totalRecords\":\""+totalRecords+"\"}");
		    	
		    }
		
		    counter++;		
		}
		
		
		pw.write("]");
		
		
	}
	
	catch(Exception e)
	{
		indentMList.clear();
		e.printStackTrace();
	}	
	indentMList.clear();
	return null;		
	

}

public ModelAndView getListOfReceiveMRPartial(HttpServletRequest request,HttpServletResponse response)

{
	
	Map<String,Object> map = new HashMap<String,Object>();
	List<StoreInternalIndentM> indentMList = new ArrayList<StoreInternalIndentM>();
	
	Box box = HMSUtil.getBox(request);	
	
	String unitType="";
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
		box.put("hospitalId", hospitalId);
	}
	
	int deptId = 0;
	if (session.getAttribute("deptId") != null) {
		deptId = (Integer) session.getAttribute("deptId");
		box.put("deptId", deptId);
	}
	
	
	map = storesHandlerService.getListOfReceiveMRPartial(box);
	
	if(map.get("indentMList")!= null)
	{
		indentMList = (List<StoreInternalIndentM>) map.get("indentMList");
	}
	System.out.println("in controller indentMList="+indentMList.size());
	int totalRecords = 0;
	if(map.get("totalRecords")!= null)
	{
		totalRecords = (Integer) map.get("totalRecords");
	}
	
	try
	{
		PrintWriter pw = response.getWriter();	
		
		pw.write("[");
		int counter=1;
		
		for(StoreInternalIndentM list : indentMList)
		{
			
			
		    if(counter != indentMList.size())
		    {
		    	
		    		pw.write("{\"Id\": \""+list.getId()+"\",\"DemandDate\": \""+(list.getDemandDate() != null?HMSUtil.changeDateToddMMyyyy(list.getDemandDate()):"")+"\",\"DemandNo\": \""+(list.getDemandNo()!=null?list.getDemandNo():"")+"\",\"FromDepartmentId\": \""+(list.getDepartment()!=null?list.getDepartment().getId():"")+"\",\"FromDepartment\": \""+(list.getDepartment()!=null?list.getDepartment().getDepartmentName():"")+"\",\"ToDepartment\": \""+(list.getToStore()!=null?list.getToStore().getDepartmentName():"")+"\",\"RequestedBy\":\""+(list.getRequestedBy() != null?list.getRequestedBy().getFirstName():"")+"\",\"ApprovedBy\": \""+(list.getApprovedBy() != null?list.getApprovedBy().getFirstName():"")+"\",\"Status\":\""+(list.getStatus()!=null?list.getStatus():"")+"\",\"ApprovedDate\": \""+(list.getApprovalDate() != null?HMSUtil.changeDateToddMMyyyy(list.getApprovalDate()):"")+"\",\"totalRecords\":\""+totalRecords+"\"},");
		    	
		    }
		    else
		    {		    	
		    	pw.write("{\"Id\": \""+list.getId()+"\",\"DemandDate\": \""+(list.getDemandDate() != null?HMSUtil.changeDateToddMMyyyy(list.getDemandDate()):"")+"\",\"DemandNo\": \""+(list.getDemandNo()!=null?list.getDemandNo():"")+"\",\"FromDepartmentId\": \""+(list.getDepartment()!=null?list.getDepartment().getId():"")+"\",\"FromDepartment\": \""+(list.getDepartment()!=null?list.getDepartment().getDepartmentName():"")+"\",\"ToDepartment\": \""+(list.getToStore()!=null?list.getToStore().getDepartmentName():"")+"\",\"RequestedBy\":\""+(list.getRequestedBy() != null?list.getRequestedBy().getFirstName():"")+"\",\"ApprovedBy\": \""+(list.getApprovedBy() != null?list.getApprovedBy().getFirstName():"")+"\",\"Status\":\""+(list.getStatus()!=null?list.getStatus():"")+"\",\"ApprovedDate\": \""+(list.getApprovalDate() != null?HMSUtil.changeDateToddMMyyyy(list.getApprovalDate()):"")+"\",\"totalRecords\":\""+totalRecords+"\"}");
		    	
		    }
		
		    counter++;		
		}
		
		
		pw.write("]");
		
		
	}
	
	catch(Exception e)
	{
		indentMList.clear();
		e.printStackTrace();
	}	
	indentMList.clear();
	return null;		
	

}



public ModelAndView ViewUpdateMRDetails(HttpServletRequest request, HttpServletResponse response)
{
	Map<String,Object>map = new HashMap<String,Object>();
	List<StoreInternalIndentT> mrDetails = new ArrayList<StoreInternalIndentT>();
	List<StoreInternalIndentM> mrHeader = new ArrayList<StoreInternalIndentM>();					
	
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
	}
	
	Box box = HMSUtil.getBox(request);	
	int mrId = 0;
	if(box.getInt("mrId") != 0)
	{
		mrId = box.getInt("mrId");
	}

	
	map = storesHandlerService.getMRDetails(mrId);
	if(map.get("mrDetails")!=null)
	{
		mrDetails = (List<StoreInternalIndentT>) map.get("mrDetails");
	}
	if(map.get("mrHeader")!=null)
	{
		mrHeader = (List<StoreInternalIndentM>) map.get("mrHeader");
	}
	
	
		
	jsp = "viewUpdateMRDetails";
	
	jsp += ".jsp";
	title = "View And Update Material Request Details";
	
	
	if(mrHeader.size()>0)
	{
		map.put("mrHeader", mrHeader);
	}
	if(mrDetails.size()>0)
	{
		map.put("mrDetails", mrDetails);
	}
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("index", "map", map);
}


public ModelAndView ViewUpdateMRDetailsWard(HttpServletRequest request, HttpServletResponse response)
{
	Map<String,Object>map = new HashMap<String,Object>();
	List<StoreInternalIndentT> mrDetails = new ArrayList<StoreInternalIndentT>();
	List<StoreInternalIndentM> mrHeader = new ArrayList<StoreInternalIndentM>();					
	
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
	}
	
	Box box = HMSUtil.getBox(request);	
	int mrId = 0;
	if(box.getInt("mrId") != 0)
	{
		mrId = box.getInt("mrId");
	}

	
	map = storesHandlerService.getMRDetails(mrId);
	if(map.get("mrDetails")!=null)
	{
		mrDetails = (List<StoreInternalIndentT>) map.get("mrDetails");
	}
	if(map.get("mrHeader")!=null)
	{
		mrHeader = (List<StoreInternalIndentM>) map.get("mrHeader");
	}
	
	
		
	jsp = "viewUpdateMRDetailsWard";
	
	jsp += ".jsp";
	title = "View And Update Material Request Details";
	
	
	if(mrHeader.size()>0)
	{
		map.put("mrHeader", mrHeader);
	}
	if(mrDetails.size()>0)
	{
		map.put("mrDetails", mrDetails);
	}
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("index", "map", map);
}

public ModelAndView ViewUpdateRCDetailsCDS(HttpServletRequest request, HttpServletResponse response)
{
	Map<String,Object>map = new HashMap<String,Object>();
	List<RcRequestDetails> requestDetails = new ArrayList<RcRequestDetails>();
	List<RcRequestHeader> requestHeader = new ArrayList<RcRequestHeader>();					
	
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
	}
	
	Box box = HMSUtil.getBox(request);	
	int requestHeaderId = 0;
	if(box.getInt("requestHeaderId") != 0)
	{
		requestHeaderId = box.getInt("requestHeaderId");
	}

	
	map = storesHandlerService.getRCDetails(requestHeaderId);
	if(map.get("mrDetails")!=null)
	{
		requestDetails = (List<RcRequestDetails>) map.get("requestDetails");
	}
	if(map.get("mrHeader")!=null)
	{
		requestHeader = (List<RcRequestHeader>) map.get("requestHeader");
	}
	
	
		
	jsp = "viewUpdateRCDetailsCDS";
	
	jsp += ".jsp";
	title = "View And Update Material Request Details";
	
	
	if(requestHeader.size()>0)
	{
		map.put("requestHeader", requestHeader);
	}
	if(requestDetails.size()>0)
	{
		map.put("requestDetails", requestDetails);
	}
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("index", "map", map);
}

public ModelAndView viewUpdateRCSubmitUntilReceive(HttpServletRequest request, HttpServletResponse response)
{
	Map<String,Object> map = new HashMap<String,Object>();
				
	
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
	}
	
	Box box = HMSUtil.getBox(request);	
	int requestHeaderId = 0;
	box.put("hospitalId", hospitalId);
	if(box.getInt("requestHeaderId") != 0)
	{
		requestHeaderId = box.getInt("requestHeaderId");
	}

	
	map = storesHandlerService.viewUpdateRCSubmitUntilReceive(box);

	
		
	jsp = "viewUpdateRCSubmitUntilReceive";
	
	jsp += ".jsp";
	title = "View And Update RC Details";
	
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("index", "map", map);
}



public ModelAndView ViewUpdateRCDetails(HttpServletRequest request, HttpServletResponse response)
{
	Map<String,Object>map = new HashMap<String,Object>();
	List<RcRequestDetails> requestDetails = new ArrayList<RcRequestDetails>();
	List<RcRequestHeader> requestHeader = new ArrayList<RcRequestHeader>();					
	
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
	}
	
	Box box = HMSUtil.getBox(request);	
	int requestHeaderId = 0;
	if(box.getInt("requestHeaderId") != 0)
	{
		requestHeaderId = box.getInt("requestHeaderId");
	}

	
	map = storesHandlerService.getRCDetails(requestHeaderId);
	if(map.get("mrDetails")!=null)
	{
		requestDetails = (List<RcRequestDetails>) map.get("requestDetails");
	}
	if(map.get("mrHeader")!=null)
	{
		requestHeader = (List<RcRequestHeader>) map.get("requestHeader");
	}
	
	
		
	jsp = "viewUpdateRCDetails";
	
	jsp += ".jsp";
	title = "View And Update Material Request Details";
	
	
	if(requestHeader.size()>0)
	{
		map.put("requestHeader", requestHeader);
	}
	if(requestDetails.size()>0)
	{
		map.put("requestDetails", requestDetails);
	}
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("index", "map", map);
}



public ModelAndView updateSavedRC(HttpServletRequest request, HttpServletResponse response)
{
	Map<String,Object>map = new HashMap<String,Object>();
	Map<String,Object>datamap = new HashMap<String,Object>();
	
	List<RcRequestDetails> requestDetails = new ArrayList<RcRequestDetails>();
	List<RcRequestHeader> requestHeader = new ArrayList<RcRequestHeader>();	
	
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
	}
	
	int deptId = 0;
	if (session.getAttribute("deptId") != null) {
		deptId =  (Integer)session.getAttribute("deptId");
	}
	
	
	Box box = HMSUtil.getBox(request);	
	int requestHeaderId = 0;
	if(box.getInt("requestHeaderId") != 0)
	{
		requestHeaderId = box.getInt("requestHeaderId");
	}
	System.out.println("requestHeaderId"+requestHeaderId);
	
	map.put("requestHeaderId", requestHeaderId);
	box.put("deptId", deptId);

	datamap = storesHandlerService.updateSavedRC(box);
	if(datamap.get("bSuccessfullyAdded")!= null)
	{
		map.put("bSuccessfullyAdded", datamap.get("bSuccessfullyAdded"));
		map.put("message", datamap.get("message"));
	}
	System.out.println("requestHeaderId"+requestHeaderId);
	map = storesHandlerService.getRCDetails(requestHeaderId);
	if(map.get("requestDetails")!=null)
	{
		requestDetails = (List<RcRequestDetails>) map.get("requestDetails");
	}
	if(map.get("requestHeader")!=null)
	{
		requestHeader = (List<RcRequestHeader>) map.get("requestHeader");
	}		 	
		
		
	jsp = "viewUpdateRCDetails";		 	
	jsp += ".jsp";
	title = "View And Update Rate Contract Request Details";
	
	
	map.put("bSuccessfullyAdded", datamap.get("bSuccessfullyAdded"));
	map.put("message", datamap.get("message"));
		
	if(requestHeader.size()>0)
	{
		map.put("requestHeader", requestHeader);
	}
	if(requestDetails.size()>0)
	{
		map.put("requestDetails", requestDetails);
	}
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("index", "map", map);
}

public ModelAndView updateSavedRCCDS(HttpServletRequest request, HttpServletResponse response)
{
	Map<String,Object>map = new HashMap<String,Object>();
	Map<String,Object>datamap = new HashMap<String,Object>();
	
	List<RcRequestDetails> requestDetails = new ArrayList<RcRequestDetails>();
	List<RcRequestHeader> requestHeader = new ArrayList<RcRequestHeader>();	
	
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
	}
	
	int deptId = 0;
	if (session.getAttribute("deptId") != null) {
		deptId =  (Integer)session.getAttribute("deptId");
	}
	
	
	Box box = HMSUtil.getBox(request);	
	int requestHeaderId = 0;
	if(box.getInt("requestHeaderId") != 0)
	{
		requestHeaderId = box.getInt("requestHeaderId");
	}
	System.out.println("requestHeaderId"+requestHeaderId);
	
	map.put("requestHeaderId", requestHeaderId);
	box.put("deptId", deptId);

	datamap = storesHandlerService.updateSavedRCCDS(box);
	if(datamap.get("bSuccessfullyAdded")!= null)
	{
		map.put("bSuccessfullyAdded", datamap.get("bSuccessfullyAdded"));
		map.put("message", datamap.get("message"));
	}
	System.out.println("requestHeaderId"+requestHeaderId);
	map = storesHandlerService.getRCDetails(requestHeaderId);
	if(map.get("requestDetails")!=null)
	{
		requestDetails = (List<RcRequestDetails>) map.get("requestDetails");
	}
	if(map.get("requestHeader")!=null)
	{
		requestHeader = (List<RcRequestHeader>) map.get("requestHeader");
	}		 	
		
		
	jsp = "viewUpdateRCDetailsCDS";		 	
	jsp += ".jsp";
	title = "View And Update Rate Contract Request Details";
	
	
	map.put("bSuccessfullyAdded", datamap.get("bSuccessfullyAdded"));
	map.put("message", datamap.get("message"));
		
	if(requestHeader.size()>0)
	{
		map.put("requestHeader", requestHeader);
	}
	if(requestDetails.size()>0)
	{
		map.put("requestDetails", requestDetails);
	}
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("index", "map", map);
}


public ModelAndView rcListToVendorSubmitUntilReceive(HttpServletRequest request, HttpServletResponse response)
{
	Map<String,Object>map = new HashMap<String,Object>();
	Map<String,Object>datamap = new HashMap<String,Object>();
	
	List<RcDetails> rcDetails = new ArrayList<RcDetails>();
	List<RcHeader> rcHeader = new ArrayList<RcHeader>();	
	
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
	}
	
	int deptId = 0;
	if (session.getAttribute("deptId") != null) {
		deptId =  (Integer)session.getAttribute("deptId");
	}
	
	
	Box box = HMSUtil.getBox(request);	
	int requestHeaderId = 0;
	if(box.getInt("requestHeaderId") != 0)
	{
		requestHeaderId = box.getInt("requestHeaderId");
	}
	System.out.println("requestHeaderId"+requestHeaderId);
	
	map.put("requestHeaderId", requestHeaderId);
	box.put("deptId", deptId);

	datamap = storesHandlerService.rcListToVendorSubmitUntilReceive(box);
	if(datamap.get("bSuccessfullyAdded")!= null)
	{
		map.put("bSuccessfullyAdded", datamap.get("bSuccessfullyAdded"));
		map.put("message", datamap.get("message"));
	}
	System.out.println("requestHeaderId"+requestHeaderId);
	map = storesHandlerService.getRCDetailsSubmitUntilReceive(requestHeaderId);
	if(map.get("requestDetails")!=null)
	{
		rcDetails = (List<RcDetails>) map.get("requestDetails");
	}
	if(map.get("requestHeader")!=null)
	{
		rcHeader = (List<RcHeader>) map.get("requestHeader");
	}		 	
		
		
	jsp = "messageJsp";		 	
	jsp += ".jsp";
	title = "View And Update RC Details";
	
	
	map.put("bSuccessfullyAdded", datamap.get("bSuccessfullyAdded"));
	map.put("message", datamap.get("message"));
		
	if(rcHeader.size()>0)
	{
		map.put("rcHeader", rcHeader);
	}
	if(rcDetails.size()>0)
	{
		map.put("rcDetails", rcDetails);
	}
	map.put("contentJsp", jsp);
	map.put("title", title);
	map.put("id", requestHeaderId);
	map.put("printUrl", "/hms/hms/stores?method=printForRateContractJsp");
	map.put("backUrl", "/hms/hms/stores?method=showRcListSubmitUntilReceive");
	return new ModelAndView("index", "map", map);
}

public ModelAndView updateSavedMR(HttpServletRequest request, HttpServletResponse response)
{
	Map<String,Object>map = new HashMap<String,Object>();
	Map<String,Object>datamap = new HashMap<String,Object>();
	
	List<StoreInternalIndentT> mrDetails = new ArrayList<StoreInternalIndentT>();
	List<StoreInternalIndentM> mrHeader = new ArrayList<StoreInternalIndentM>();	
	
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
	}
	
	int deptId = 0;
	if (session.getAttribute("deptId") != null) {
		deptId =  (Integer)session.getAttribute("deptId");
	}
	
	
	Box box = HMSUtil.getBox(request);	
	int mrHeaderId = 0;
	if(box.getInt("mrHeaderId") != 0)
	{
		mrHeaderId = box.getInt("mrHeaderId");
	}
	box.put("deptId", deptId);

	datamap = storesHandlerService.updateSavedMR(box);
	if(datamap.get("bSuccessfullyAdded")!= null)
	{
		map.put("bSuccessfullyAdded", datamap.get("bSuccessfullyAdded"));
		map.put("message", datamap.get("message"));
	}
	map = storesHandlerService.getMRDetails(mrHeaderId);
	if(map.get("mrDetails")!=null)
	{
		mrDetails = (List<StoreInternalIndentT>) map.get("mrDetails");
	}
	if(map.get("mrHeader")!=null)
	{
		mrHeader = (List<StoreInternalIndentM>) map.get("mrHeader");
	}		 	
		
		
	jsp = "viewUpdateMRDetails";		 	
	jsp += ".jsp";
	title = "View And Update Material Request Details";
	
	
	map.put("bSuccessfullyAdded", datamap.get("bSuccessfullyAdded"));
	map.put("message", datamap.get("message"));
		
	if(mrHeader.size()>0)
	{
		map.put("mrHeader", mrHeader);
	}
	if(mrDetails.size()>0)
	{
		map.put("mrDetails", mrDetails);
	}
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("index", "map", map);
}



public ModelAndView updateSavedMRWard(HttpServletRequest request, HttpServletResponse response)
{
	Map<String,Object>map = new HashMap<String,Object>();
	Map<String,Object>datamap = new HashMap<String,Object>();
	
	List<StoreInternalIndentT> mrDetails = new ArrayList<StoreInternalIndentT>();
	List<StoreInternalIndentM> mrHeader = new ArrayList<StoreInternalIndentM>();	
	
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
	}
	
	int deptId = 0;
	if (session.getAttribute("deptId") != null) {
		deptId =  (Integer)session.getAttribute("deptId");
	}
	
	
	Box box = HMSUtil.getBox(request);	
	int mrHeaderId = 0;
	if(box.getInt("mrHeaderId") != 0)
	{
		mrHeaderId = box.getInt("mrHeaderId");
	}
	box.put("deptId", deptId);

	datamap = storesHandlerService.updateSavedMRWard(box);
	if(datamap.get("bSuccessfullyAdded")!= null)
	{
		map.put("bSuccessfullyAdded", datamap.get("bSuccessfullyAdded"));
		map.put("message", datamap.get("message"));
	}
	map = storesHandlerService.getMRDetails(mrHeaderId);
	if(map.get("mrDetails")!=null)
	{
		mrDetails = (List<StoreInternalIndentT>) map.get("mrDetails");
	}
	if(map.get("mrHeader")!=null)
	{
		mrHeader = (List<StoreInternalIndentM>) map.get("mrHeader");
	}		 	
		
		
	jsp = "viewUpdateMRDetailsWard";		 	
	jsp += ".jsp";
	title = "View And Update Material Request Details";
	
	
	map.put("bSuccessfullyAdded", datamap.get("bSuccessfullyAdded"));
	map.put("message", datamap.get("message"));
		
	if(mrHeader.size()>0)
	{
		map.put("mrHeader", mrHeader);
	}
	if(mrDetails.size()>0)
	{
		map.put("mrDetails", mrDetails);
	}
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("index", "map", map);
}

public ModelAndView showMRApprovalList(HttpServletRequest request,HttpServletResponse response)
{
	

	jsp = "mrApprovalList";
	jsp += ".jsp";
	title = "Pending List of MR Approval";	
	
	map.put("contentJsp", jsp);
	map.put("title", title);
		
	return new ModelAndView("index", "map", map);
}

public ModelAndView showRCApprovalList(HttpServletRequest request,HttpServletResponse response)
{
	

	jsp = "rcApprovalList";
	jsp += ".jsp";
	title = "Pending List of RC Approval";	
	
	map.put("contentJsp", jsp);
	map.put("title", title);
		
	return new ModelAndView("index", "map", map);
}


public ModelAndView showRCListSend(HttpServletRequest request,HttpServletResponse response)
{
	

	jsp = "rcListSend";
	jsp += ".jsp";
	title = "Pending List of RC Approval";	
	
	map.put("contentJsp", jsp);
	map.put("title", title);
		
	return new ModelAndView("index", "map", map);
}


public ModelAndView approveMRDetails(HttpServletRequest request, HttpServletResponse response)
{
	Map<String,Object>map = new HashMap<String,Object>();
	List<StoreInternalIndentT> mrDetails = new ArrayList<StoreInternalIndentT>();
	List<StoreInternalIndentM> mrHeader = new ArrayList<StoreInternalIndentM>();					
	
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
	}
	
	Box box = HMSUtil.getBox(request);	
	int mrId = 0;
	if(box.getInt("mrId") != 0)
	{
		mrId = box.getInt("mrId");
	}

	
	map = storesHandlerService.getMRDetails(mrId);
	if(map.get("mrDetails")!=null)
	{
		mrDetails = (List<StoreInternalIndentT>) map.get("mrDetails");
	}
	if(map.get("mrHeader")!=null)
	{
		mrHeader = (List<StoreInternalIndentM>) map.get("mrHeader");
	}
	
	
		
	jsp = "approveMRDetails";
	
	jsp += ".jsp";
	title = "Approval of Material Request Details";
	
	
	if(mrHeader.size()>0)
	{
		map.put("mrHeader", mrHeader);
	}
	if(mrDetails.size()>0)
	{
		map.put("mrDetails", mrDetails);
	}
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("index", "map", map);
}

public ModelAndView approveRCDetails(HttpServletRequest request, HttpServletResponse response)
{
	Map<String,Object>map = new HashMap<String,Object>();
	List<RcRequestDetails> requestDetails = new ArrayList<RcRequestDetails>();
	List<RcRequestHeader> requestHeader = new ArrayList<RcRequestHeader>();					
	
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
	}
	
	Box box = HMSUtil.getBox(request);	
	int requestHeaderId = 0;
	if(box.getInt("requestHeaderId") != 0)
	{
		requestHeaderId = box.getInt("requestHeaderId");
	}

	
	map = storesHandlerService.getRCDetails(requestHeaderId);
	if(map.get("mrDetails")!=null)
	{
		requestDetails = (List<RcRequestDetails>) map.get("requestDetails");
	}
	if(map.get("mrHeader")!=null)
	{
		requestHeader = (List<RcRequestHeader>) map.get("requestHeader");
	}
	
	
		
	jsp = "approveRCDetails";
	
	jsp += ".jsp";
	title = "Approval of Rate Contract Request Details";
	
	
	if(requestHeader.size()>0)
	{
		map.put("requestHeader", requestHeader);
	}
	if(requestDetails.size()>0)
	{
		map.put("requestDetails", requestDetails);
	}
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("index", "map", map);
}

public ModelAndView sendRC(HttpServletRequest request, HttpServletResponse response)
{
	Map<String,Object>map = new HashMap<String,Object>();
	List<RcRequestDetails> requestDetails = new ArrayList<RcRequestDetails>();
	List<RcRequestHeader> requestHeader = new ArrayList<RcRequestHeader>();					
	
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
	}
	
	Box box = HMSUtil.getBox(request);	
	int requestHeaderId = 0;
	if(box.getInt("requestHeaderId") != 0)
	{
		requestHeaderId = box.getInt("requestHeaderId");
	}

	
	map = storesHandlerService.getRCDetails(requestHeaderId);
	if(map.get("mrDetails")!=null)
	{
		requestDetails = (List<RcRequestDetails>) map.get("requestDetails");
	}
	if(map.get("mrHeader")!=null)
	{
		requestHeader = (List<RcRequestHeader>) map.get("requestHeader");
	}
	
	
		
	jsp = "sendRC";
	
	jsp += ".jsp";
	title = "Approval of Rate Contract Request Details";
	
	
	if(requestHeader.size()>0)
	{
		map.put("requestHeader", requestHeader);
	}
	if(requestDetails.size()>0)
	{
		map.put("requestDetails", requestDetails);
	}
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("index", "map", map);
}


public ModelAndView submitApprovalDetailsofMR(HttpServletRequest request, HttpServletResponse response)
{
	Map<String,Object>map = new HashMap<String,Object>();
	Map<String,Object>datamap = new HashMap<String,Object>();
	
	List<StoreInternalIndentT> mrDetails = new ArrayList<StoreInternalIndentT>();
	List<StoreInternalIndentM> mrHeader = new ArrayList<StoreInternalIndentM>();	
	
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
	}
	
	int deptId = 0;
	if (session.getAttribute("deptId") != null) {
		deptId =  (Integer)session.getAttribute("deptId");
	}
	
	
	Box box = HMSUtil.getBox(request);	
	int mrHeaderId = 0;
	if(box.getInt("mrHeaderId") != 0)
	{
		mrHeaderId = box.getInt("mrHeaderId");
	}
	box.put("deptId", deptId);

	datamap = storesHandlerService.submitApprovalDetailsofMR(box);
	if(datamap.get("bSuccessfullyAdded")!= null)
	{
		map.put("bSuccessfullyAdded", datamap.get("bSuccessfullyAdded"));
		map.put("message", datamap.get("message"));
	}
	map = storesHandlerService.getMRDetails(mrHeaderId);
	if(map.get("mrDetails")!=null)
	{
		mrDetails = (List<StoreInternalIndentT>) map.get("mrDetails");
	}
	if(map.get("mrHeader")!=null)
	{
		mrHeader = (List<StoreInternalIndentM>) map.get("mrHeader");
	}		 	
		
		
	jsp = "approveMRDetails";		 	
	jsp += ".jsp";
	title = "";
	
	
	map.put("bSuccessfullyAdded", datamap.get("bSuccessfullyAdded"));
	map.put("message", datamap.get("message"));
		
	if(mrHeader.size()>0)
	{
		map.put("mrHeader", mrHeader);
	}
	if(mrDetails.size()>0)
	{
		map.put("mrDetails", mrDetails);
	}
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("index", "map", map);
}



public ModelAndView submitApprovalDetailsofRC(HttpServletRequest request, HttpServletResponse response)
{
	Map<String,Object>map = new HashMap<String,Object>();
	Map<String,Object>datamap = new HashMap<String,Object>();
	
	List<StoreInternalIndentT> mrDetails = new ArrayList<StoreInternalIndentT>();
	List<StoreInternalIndentM> mrHeader = new ArrayList<StoreInternalIndentM>();	
	
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
	}
	System.out.println("hospitalId1"+hospitalId);
	
	int deptId = 0;
	if (session.getAttribute("deptId") != null) {
		deptId =  (Integer)session.getAttribute("deptId");
	}
	
	
	Box box = HMSUtil.getBox(request);	
	int mrHeaderId = 0;
	if(box.getInt("mrHeaderId") != 0)
	{
		mrHeaderId = box.getInt("mrHeaderId");
	}
	box.put("deptId", deptId);
	box.put("hospitalId", hospitalId);

	datamap = storesHandlerService.submitApprovalDetailsofRC(box);
	if(datamap.get("bSuccessfullyAdded")!= null)
	{
		map.put("bSuccessfullyAdded", datamap.get("bSuccessfullyAdded"));
		map.put("message", datamap.get("message"));
	}
	map = storesHandlerService.getRCDetails(mrHeaderId);
	if(map.get("mrDetails")!=null)
	{
		mrDetails = (List<StoreInternalIndentT>) map.get("mrDetails");
	}
	if(map.get("mrHeader")!=null)
	{
		mrHeader = (List<StoreInternalIndentM>) map.get("mrHeader");
	}		 	
		
		
	jsp = "approveRCDetails";		 	
	jsp += ".jsp";
	title = "";
	
	
	map.put("bSuccessfullyAdded", datamap.get("bSuccessfullyAdded"));
	map.put("message", datamap.get("message"));
		
	if(mrHeader.size()>0)
	{
		map.put("mrHeader", mrHeader);
	}
	if(mrDetails.size()>0)
	{
		map.put("mrDetails", mrDetails);
	}
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("index", "map", map);
}

public ModelAndView submitSendRC(HttpServletRequest request, HttpServletResponse response)
{
	Map<String,Object>map = new HashMap<String,Object>();
	Map<String,Object>datamap = new HashMap<String,Object>();
	
	List<StoreInternalIndentT> mrDetails = new ArrayList<StoreInternalIndentT>();
	List<StoreInternalIndentM> mrHeader = new ArrayList<StoreInternalIndentM>();	
	
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
	}
	
	int deptId = 0;
	if (session.getAttribute("deptId") != null) {
		deptId =  (Integer)session.getAttribute("deptId");
	}
	int userId = 0;
	if (session.getAttribute("userId") != null) {
		userId =  (Integer)session.getAttribute("userId");
	}
	
	
	Box box = HMSUtil.getBox(request);	
	int mrHeaderId = 0;
	if(box.getInt("mrHeaderId") != 0)
	{
		mrHeaderId = box.getInt("mrHeaderId");
	}
	box.put("deptId", deptId);
	box.put("hospitalId", hospitalId);
	box.put("userId", userId);
	box.put("approvalStatus", "t");

	datamap = storesHandlerService.submitApprovalDetailsofRC(box);
	if(datamap.get("bSuccessfullyAdded")!= null)
	{
		map.put("bSuccessfullyAdded", datamap.get("bSuccessfullyAdded"));
		map.put("message", datamap.get("message"));
	}
	map = storesHandlerService.getRCDetails(mrHeaderId);
	if(map.get("mrDetails")!=null)
	{
		mrDetails = (List<StoreInternalIndentT>) map.get("mrDetails");
	}
	if(map.get("mrHeader")!=null)
	{
		mrHeader = (List<StoreInternalIndentM>) map.get("mrHeader");
	}		 	
		
		
	jsp = "sendRC";		 	
	jsp += ".jsp";
	title = "";
	
	
	map.put("bSuccessfullyAdded", datamap.get("bSuccessfullyAdded"));
	map.put("message", datamap.get("message"));
		
	if(mrHeader.size()>0)
	{
		map.put("mrHeader", mrHeader);
	}
	if(mrDetails.size()>0)
	{
		map.put("mrDetails", mrDetails);
	}
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("index", "map", map);
}


public ModelAndView showPendingListofExpiredDrugs(HttpServletRequest request,HttpServletResponse response)
{
	List<MasDepartment> deptList = new ArrayList<MasDepartment>();	
	Map<String,Object> dataMap = new HashMap<String,Object>();
					
	
	dataMap = storesHandlerService.getDepartmentList();
	if(dataMap.get("deptList") != null)
	{
		deptList = (List<MasDepartment>)dataMap.get("deptList");
	}
	
	jsp = "pendingListOfDrugCommittee";
	jsp += ".jsp";
	title = "Pending List of Receiving the Expired Drugs";	
	
	map.put("contentJsp", jsp);
	map.put("title", title);
	map.put("deptList", deptList);
	
	return new ModelAndView("index", "map", map);
}


public ModelAndView getListOfPendingForReceivingExpiredDrugs(HttpServletRequest request,HttpServletResponse response)
	
{
	
	Map<String,Object> map = new HashMap<String,Object>();
	List<StoreInternalReturnM> rerturnHeaderList = new ArrayList<StoreInternalReturnM>();
	
	Box box = HMSUtil.getBox(request);	
	
	String unitType="";
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
	}
	
	int deptId = 0;
	if (session.getAttribute("deptId") != null) {
		deptId =  (Integer)session.getAttribute("deptId");
	}
	
	box.put("hospitalId", hospitalId);
	box.put("deptId", deptId);
	
	map = storesHandlerService.getListOfPendingForReceivingExpiredDrugs(box);
	
	if(map.get("rerturnHeaderList")!= null)
	{
		rerturnHeaderList = (List<StoreInternalReturnM>) map.get("rerturnHeaderList");
	}
	System.out.println("in controller StoreInternalReturnM="+rerturnHeaderList.size());
	int totalRecords = 0;
	if(map.get("totalRecords")!= null)
	{
		totalRecords = (Integer) map.get("totalRecords");
	}
	
	try
	{
		PrintWriter pw = response.getWriter();	
		
		pw.write("[");
		int counter=1;
		
		for(StoreInternalReturnM list : rerturnHeaderList)
		{
			
			
		    if(counter != rerturnHeaderList.size())
		    {
		    	
		    		pw.write("{\"Id\": \""+list.getId()+"\",\"Date\": \""+(list.getReturnDate() != null?HMSUtil.changeDateToddMMyyyy(list.getReturnDate()):"")+"\",\"ReturnNo\": \""+(list.getReturnNo()!=null?list.getReturnNo():"")+"\",\"Department\": \""+(list.getFromDepartment()!=null?list.getFromDepartment().getDepartmentName():"")+"\",\"ReturnBy\": \""+(list.getReturnBy()!=null?list.getReturnBy().getFirstName():"")+"\",\"Reason\": \""+(list.getReason()!=null?list.getReason():"")+"\",\"totalRecords\":\""+totalRecords+"\"},");
		    	
		    }
		    else
		    {		    	
		    	pw.write("{\"Id\": \""+list.getId()+"\",\"Date\": \""+(list.getReturnDate() != null?HMSUtil.changeDateToddMMyyyy(list.getReturnDate()):"")+"\",\"ReturnNo\": \""+(list.getReturnNo()!=null?list.getReturnNo():"")+"\",\"Department\": \""+(list.getFromDepartment()!=null?list.getFromDepartment().getDepartmentName():"")+"\",\"ReturnBy\": \""+(list.getReturnBy()!=null?list.getReturnBy().getFirstName():"")+"\",\"Reason\": \""+(list.getReason()!=null?list.getReason():"")+"\",\"totalRecords\":\""+totalRecords+"\"}");
		    	
		    }
		
		    counter++;		
		}
		
		
		pw.write("]");
		
		
	}
	
	catch(Exception e)
	{
		rerturnHeaderList.clear();
		e.printStackTrace();
	}	
	rerturnHeaderList.clear();
	return null;		
	

}

public ModelAndView receivingExpiredDrugs(HttpServletRequest request, HttpServletResponse response)
{
	Map<String,Object>map = new HashMap<String,Object>();
	List<StoreInternalReturnM> returnHeader = new ArrayList<StoreInternalReturnM>();
	List<StoreInternalReturnT> returnDetails = new ArrayList<StoreInternalReturnT>();					
	
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
	}
	
	Box box = HMSUtil.getBox(request);	
	int returnHeaderId = 0;
	if(box.getInt("returnId") != 0)
	{
		returnHeaderId = box.getInt("returnId");
	}

	
	map = storesHandlerService.getReturnDetailsofExpiredDrugs(returnHeaderId);
	if(map.get("returnDetails")!=null)
	{
		returnDetails = (List<StoreInternalReturnT>) map.get("returnDetails");
	}
	if(map.get("returnHeader")!=null)
	{
		returnHeader = (List<StoreInternalReturnM>) map.get("returnHeader");
	}
	
	
		
	jsp = "receivingReturnDetailsofExpiredDrugs";
	
	jsp += ".jsp";
	title = "Receiving the Return of the Expired Drugs";
	
	
	if(returnHeader.size()>0)
	{
		map.put("returnHeader", returnHeader);
	}
	if(returnDetails.size()>0)
	{
		map.put("returnDetails", returnDetails);
	}
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("index", "map", map);
}


public ModelAndView saveStockofReturnDrugs(HttpServletRequest request, HttpServletResponse response)
{
	Map<String,Object>map = new HashMap<String,Object>();
	Map<String,Object>datamap = new HashMap<String,Object>();
	
	List<StoreInternalReturnM> returnHeader = new ArrayList<StoreInternalReturnM>();
	List<StoreInternalReturnT> returnDetails = new ArrayList<StoreInternalReturnT>();		
	
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
	}
	
	int deptId = 0;
	if (session.getAttribute("deptId") != null) {
		deptId =  (Integer)session.getAttribute("deptId");
	}
	
	
	Box box = HMSUtil.getBox(request);	
	int returnHeaderId = 0;
	if(box.getInt("returnId") != 0)
	{
		returnHeaderId = box.getInt("returnId");
	}
	box.put("deptId", deptId);
	box.put("hospitalId", hospitalId);

	datamap = storesHandlerService.saveStockofReturnDrugs(box);
	if(datamap.get("bSuccessfullyAdded")!= null)
	{
		map.put("bSuccessfullyAdded", datamap.get("bSuccessfullyAdded"));
		map.put("message", datamap.get("message"));
	}
	map = storesHandlerService.getReturnDetailsofExpiredDrugs(returnHeaderId);
	if(map.get("returnDetails")!=null)
	{
		returnDetails = (List<StoreInternalReturnT>) map.get("returnDetails");
	}
	if(map.get("returnHeader")!=null)
	{
		returnHeader = (List<StoreInternalReturnM>) map.get("returnHeader");
	}	 	
		
		
jsp = "receivingReturnDetailsofExpiredDrugs";
	
	jsp += ".jsp";
	title = "Receiving the Return of the Expired Drugs";
	
	
	map.put("bSuccessfullyAdded", datamap.get("bSuccessfullyAdded"));
	map.put("message", datamap.get("message"));
	if(returnHeader.size()>0)
	{
		map.put("returnHeader", returnHeader);
	}
	if(returnDetails.size()>0)
	{
		map.put("returnDetails", returnDetails);
	}
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("index", "map", map);
}


public ModelAndView showlistofExpiredDrugs(HttpServletRequest request,HttpServletResponse response)
{	
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	List<MasDepartment> deptList = new ArrayList<MasDepartment>();	
	HttpSession session = request.getSession();
	
	int deptId = 0;
	int hospitalId=0;
	if (session.getAttribute("deptId") != null) {
		deptId = (Integer) session.getAttribute("deptId");
	}

	if (session.getAttribute("hospitalId") != null) {
		hospitalId = (Integer) session.getAttribute("hospitalId");
	}
	

	dataMap = storesHandlerService.getDepartmentList();
	if(dataMap.get("deptList") != null)
	{
		deptList = (List<MasDepartment>)dataMap.get("deptList");
	}
	
	jsp = "receivedExpiredDrugs";
	jsp += ".jsp";
	title = "Received Expired Drugs for Disposal";	
	
	map.put("contentJsp", jsp);
	map.put("title", title);
	map.put("deptList",deptList);
		
	return new ModelAndView("index", "map", map);
}


public ModelAndView getListofReceivedExpiredDrugs(HttpServletRequest request,HttpServletResponse response)
	
{
	
	Map<String,Object> map = new HashMap<String,Object>();
	List<StoreInternalReturnT> returnList = new ArrayList<StoreInternalReturnT>();		
	
	Box box = HMSUtil.getBox(request);	
	
	String unitType="";
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
		box.put("hospitalId", hospitalId);
	}
	
	int deptId = 0;
	if (session.getAttribute("deptId") != null) {
		deptId = (Integer) session.getAttribute("deptId");
		box.put("deptId", deptId);
	}
	
	
	map = storesHandlerService.getListofReceivedExpiredDrugs(box);
	
	if(map.get("returnList")!= null)
	{
		returnList = (List<StoreInternalReturnT>) map.get("returnList");
	}
	System.out.println("in controller returnList="+returnList.size());
	int totalRecords = 0;
	if(map.get("totalRecords")!= null)
	{
		totalRecords = (Integer) map.get("totalRecords");
	}
	
	try
	{
		PrintWriter pw = response.getWriter();	
		
		pw.write("[");
		int counter=1;
		
		for(StoreInternalReturnT list : returnList)
		{
			
			
		    if(counter != returnList.size())
		    {
		    	
		    	pw.write("{\"Id\": \""+list.getId()+"\",\"ReceivedDate\": \""+(list.getReturnMain().getReceivedDate() != null?HMSUtil.changeDateToddMMyyyy(list.getReturnMain().getReceivedDate()):"")+"\",\"ExpiredDate\": \""+(list.getExpiryDate() != null?list.getExpiryDate():"")+"\",\"ReceivedQty\": \""+(list.getReceivedQty() != null?list.getReceivedQty():"")+"\",\"MatCode\": \""+(list.getItem()!=null?list.getItem().getPvmsNo():"")+"\",\"FromDepartment\": \""+(list.getReturnMain().getFromDepartment()!=null?list.getReturnMain().getFromDepartment().getDepartmentName():"")+"\",\"ReceivedBy\":\""+(list.getReturnMain().getReceivedBy() != null?list.getReturnMain().getReceivedBy().getFirstName():"")+"\",\"Item\": \""+(list.getItem() != null?list.getItem().getNomenclature():"")+"\",\"BatchNo\":\""+(list.getBatchNo()!=null?list.getBatchNo():"")+"\",\"Brand\":\""+(list.getBrand()!=null?list.getBrand().getBrandName():"")+"\",\"totalRecords\":\""+totalRecords+"\"},");
		    	
		    }
		    else
		    {		    	
		    	pw.write("{\"Id\": \""+list.getId()+"\",\"ReceivedDate\": \""+(list.getReturnMain().getReceivedDate() != null?HMSUtil.changeDateToddMMyyyy(list.getReturnMain().getReceivedDate()):"")+"\",\"ExpiredDate\": \""+(list.getExpiryDate() != null?list.getExpiryDate():"")+"\",\"ReceivedQty\": \""+(list.getReceivedQty() != null?list.getReceivedQty():"")+"\",\"MatCode\": \""+(list.getItem()!=null?list.getItem().getPvmsNo():"")+"\",\"FromDepartment\": \""+(list.getReturnMain().getFromDepartment()!=null?list.getReturnMain().getFromDepartment().getDepartmentName():"")+"\",\"ReceivedBy\":\""+(list.getReturnMain().getReceivedBy() != null?list.getReturnMain().getReceivedBy().getFirstName():"")+"\",\"Item\": \""+(list.getItem() != null?list.getItem().getNomenclature():"")+"\",\"BatchNo\":\""+(list.getBatchNo()!=null?list.getBatchNo():"")+"\",\"Brand\":\""+(list.getBrand()!=null?list.getBrand().getBrandName():"")+"\",\"totalRecords\":\""+totalRecords+"\"}");
		    	
		    }
		
		    counter++;		
		}
		
		
		pw.write("]");
		
		
	}
	
	catch(Exception e)
	{
		returnList.clear();
		e.printStackTrace();
	}	
	returnList.clear();
	return null;		
	

}



public ModelAndView showPendingListofActionofDrugDisposal(HttpServletRequest request,HttpServletResponse response)
{	
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	List<MasDepartment> deptList = new ArrayList<MasDepartment>();	
	HttpSession session = request.getSession();
	
	int deptId = 0;
	int hospitalId=0;
	if (session.getAttribute("deptId") != null) {
		deptId = (Integer) session.getAttribute("deptId");
	}

	if (session.getAttribute("hospitalId") != null) {
		hospitalId = (Integer) session.getAttribute("hospitalId");
	}
	

	dataMap = storesHandlerService.getDepartmentList();
	if(dataMap.get("deptList") != null)
	{
		deptList = (List<MasDepartment>)dataMap.get("deptList");
	}
	
	jsp = "pendingForDisposalorReplacement";
	jsp += ".jsp";
	title = "List of Expired Drugs for Disposal or Replacement";	
	
	map.put("contentJsp", jsp);
	map.put("title", title);
	map.put("deptList",deptList);
		
	return new ModelAndView("index", "map", map);
}


public ModelAndView getPendingListofActionofDrugDisposal(HttpServletRequest request,HttpServletResponse response)
	
{
	
	Map<String,Object> map = new HashMap<String,Object>();
	List<StoreInternalReturnT> returnList = new ArrayList<StoreInternalReturnT>();		
	
	Box box = HMSUtil.getBox(request);	
	
	String unitType="";
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
		box.put("hospitalId", hospitalId);
	}
	
	int deptId = 0;
	if (session.getAttribute("deptId") != null) {
		deptId = (Integer) session.getAttribute("deptId");
		box.put("deptId", deptId);
	}
	
	
	map = storesHandlerService.getPendingListofActionofDrugDisposal(box);
	
	if(map.get("returnList")!= null)
	{
		returnList = (List<StoreInternalReturnT>) map.get("returnList");
	}
	System.out.println("in controller returnList="+returnList.size());
	int totalRecords = 0;
	if(map.get("totalRecords")!= null)
	{
		totalRecords = (Integer) map.get("totalRecords");
	}
	
	try
	{
		PrintWriter pw = response.getWriter();	
		
		pw.write("[");
		int counter=1;
		
		for(StoreInternalReturnT list : returnList)
		{
			
			
		    if(counter != returnList.size())
		    {
		    	
		    	pw.write("{\"Id\": \""+list.getId()+"\",\"ReceivedDate\": \""+(list.getReturnMain().getReceivedDate() != null?HMSUtil.changeDateToddMMyyyy(list.getReturnMain().getReceivedDate()):"")+"\",\"ExpiredDate\": \""+(list.getExpiryDate() != null?list.getExpiryDate():"")+"\",\"ReceivedQty\": \""+(list.getReceivedQty() != null?list.getReceivedQty():"")+"\",\"MatCode\": \""+(list.getItem()!=null?list.getItem().getPvmsNo():"")+"\",\"FromDepartment\": \""+(list.getReturnMain().getFromDepartment()!=null?list.getReturnMain().getFromDepartment().getDepartmentName():"")+"\",\"ReceivedBy\":\""+(list.getReturnMain().getReceivedBy() != null?list.getReturnMain().getReceivedBy().getFirstName():"")+"\",\"Item\": \""+(list.getItem() != null?list.getItem().getNomenclature():"")+"\",\"BatchNo\":\""+(list.getBatchNo()!=null?list.getBatchNo():"")+"\",\"Brand\":\""+(list.getBrand()!=null?list.getBrand().getBrandName():"")+"\",\"totalRecords\":\""+totalRecords+"\"},");
		    	
		    }
		    else
		    {		    	
		    	pw.write("{\"Id\": \""+list.getId()+"\",\"ReceivedDate\": \""+(list.getReturnMain().getReceivedDate() != null?HMSUtil.changeDateToddMMyyyy(list.getReturnMain().getReceivedDate()):"")+"\",\"ExpiredDate\": \""+(list.getExpiryDate() != null?list.getExpiryDate():"")+"\",\"ReceivedQty\": \""+(list.getReceivedQty() != null?list.getReceivedQty():"")+"\",\"MatCode\": \""+(list.getItem()!=null?list.getItem().getPvmsNo():"")+"\",\"FromDepartment\": \""+(list.getReturnMain().getFromDepartment()!=null?list.getReturnMain().getFromDepartment().getDepartmentName():"")+"\",\"ReceivedBy\":\""+(list.getReturnMain().getReceivedBy() != null?list.getReturnMain().getReceivedBy().getFirstName():"")+"\",\"Item\": \""+(list.getItem() != null?list.getItem().getNomenclature():"")+"\",\"BatchNo\":\""+(list.getBatchNo()!=null?list.getBatchNo():"")+"\",\"Brand\":\""+(list.getBrand()!=null?list.getBrand().getBrandName():"")+"\",\"totalRecords\":\""+totalRecords+"\"}");
		    	
		    }
		
		    counter++;		
		}
		
		
		pw.write("]");
		
		
	}
	
	catch(Exception e)
	{
		returnList.clear();
		e.printStackTrace();
	}	
	returnList.clear();
	return null;		
	

}


public ModelAndView submitActionDetailsofDrugsDisposal(HttpServletRequest request, HttpServletResponse response)
{
	Map<String,Object>map = new HashMap<String,Object>();
	Map<String,Object>datamap = new HashMap<String,Object>();
	
	List<StoreInternalReturnM> returnHeader = new ArrayList<StoreInternalReturnM>();
	List<StoreInternalReturnT> returnDetails = new ArrayList<StoreInternalReturnT>();		
	
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
	}
	
	int deptId = 0;
	if (session.getAttribute("deptId") != null) {
		deptId =  (Integer)session.getAttribute("deptId");
	}
	
	
	Box box = HMSUtil.getBox(request);	
	
	box.put("deptId", deptId);
	box.put("hospitalId", hospitalId);

	datamap = storesHandlerService.submitActionDetailsofDrugsDisposal(box);
	if(datamap.get("bSuccessfullyAdded")!= null)
 	{
 		map.put("bSuccessfullyAdded", datamap.get("bSuccessfullyAdded"));
 		map.put("message", datamap.get("message")); 		
 		map.put("flag", "Disposal");
 		map.put("DisposalNo", datamap.get("DisposalNo"));
 	} 	
 	
 		
 	jsp = "storeMessage_New"; 		
 	
	jsp = jsp + ".jsp";
	title = "Drug Disposal Committe";
 	
 	
 	map.put("contentJsp", jsp);
 	map.put("title", title);	
 	return new ModelAndView("index", "map", map);
}

public ModelAndView showPhysicalStock(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	HttpSession session = request.getSession();
	Box box  = HMSUtil.getBox(request);
	int locationId = 0;
	if (session.getAttribute("hospitalId") != null) {
		locationId = (Integer) session.getAttribute("hospitalId");
	}
	int userId = 0;
	if (session.getAttribute("userId") != null) {
		userId = (Integer) session.getAttribute("userId");
	}
	int departmentId = 0;
	if (session.getAttribute("deptId") != null) {
		departmentId = (Integer) session.getAttribute("deptId");
	}
	box.put("departmentId", departmentId);
	box.put("locationId", locationId);
	box.put("userId", userId);
	map = storesHandlerService.showPhysicalStockJsp(box);
	jsp = "physicalStock_new";
	jsp += ".jsp";
	map.put("contentJsp", jsp);
	return new ModelAndView("index", "map", map);
}
public ModelAndView submitPhysicalStockTaking(HttpServletRequest request,HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	String message = "";
	HttpSession session = request.getSession();
	Box box  = HMSUtil.getBox(request);
	int locationId = 0;
	if (session.getAttribute("hospitalId") != null) {
		locationId = (Integer) session.getAttribute("hospitalId");
	}
	int userId = 0;
	if (session.getAttribute("userId") != null) {
		userId = (Integer) session.getAttribute("userId");
	}
	int departmentId = 0;
	if (session.getAttribute("deptId") != null) {
		departmentId = (Integer) session.getAttribute("deptId");
	}
	box.put("departmentId", departmentId);
	box.put("locationId", locationId);
	box.put("userId", userId);
	String flag = "";
	if(request.getParameter("flag")!= null){
		flag = request.getParameter("flag");
	}
	map = storesHandlerService.submitPhysicalStockTaking(box);
	int stockTakingMId = 0;
	 boolean saved = (Boolean)map.get("saved");
	 if(map.get("stockTakingMId")!=null){
		 stockTakingMId= (Integer)map.get("stockTakingMId");
	 }
	if(saved){
		
		message =  "Physical Stock Taking  Successfully.Do you want to print?";
		
	}else{
		message = "Try Again.";
	}
	map = storesHandlerService.showPhysicalStockJsp(box);
	jsp = "physicalStock_new.jsp";
	map.put("contentJsp", jsp);
	map.put("message",message);
	map.put("stockTakingMId",stockTakingMId);
	map.put("saved",saved);
	return new ModelAndView("index","map",map);
}

public ModelAndView printStockAdjustmentRpt(HttpServletRequest request,
		HttpServletResponse response) {

	Map<String, Object> requestParameters = new HashMap<String, Object>();
	HttpSession session = request.getSession();
	
	int stockTakingMId = 0;
	int hospitalId = 0;
	String hospitalName = "";
	try {

		int departmentId = 0;
		if(session.getAttribute("deptId")!=null){
			departmentId = (Integer)session.getAttribute("deptId");
		}
		
		
		requestParameters.put("departmentId", departmentId);
		if (session.getAttribute("hospitalId") != null) 
		{
			hospitalId = (Integer) session.getAttribute("hospitalId");
			hospitalName = storesHandlerService.getHospitalName(hospitalId);
			requestParameters.put("hospitalName", hospitalName);
			requestParameters.put("locationId", hospitalId);
		}
		if (request.getParameter("stockTakingMId") != null
				&& !(request.getParameter("stockTakingMId").equals("0"))) {
			stockTakingMId = Integer.parseInt(request.getParameter("stockTakingMId"));
			requestParameters.put("stockTakingMId", stockTakingMId);
		}
		String userHome = getServletContext().getRealPath("");	         
        String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
        requestParameters.put("path", imagePath);

		Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
		
		HMSUtil.generateReport("stockTakingReportsId", requestParameters,(Connection) connectionMap.get("con"), response,	getServletContext());
		

	} catch (Exception e) {
		e.printStackTrace();
	}
	return null;
}


public ModelAndView generateDrugDisposalActionReport(HttpServletRequest request,
		HttpServletResponse response) {

	Map<String, Object> requestParameters = new HashMap<String, Object>();
	HttpSession session = request.getSession();
	
	String DisposalNo="";
	int hospitalId = 0;
	String hospitalName = "";
	try {

		int departmentId = 0;
		if(session.getAttribute("deptId")!=null){
			departmentId = (Integer)session.getAttribute("deptId");
		}
		
		
		requestParameters.put("departmentId", departmentId);
		if (session.getAttribute("hospitalId") != null) 
		{
			hospitalId = (Integer) session.getAttribute("hospitalId");
			hospitalName = storesHandlerService.getHospitalName(hospitalId);
			requestParameters.put("hospitalName", hospitalName);
			requestParameters.put("hospitalId", hospitalId);
		}
		if (request.getParameter("DisposalNo") != null) {
			DisposalNo = request.getParameter("DisposalNo");
			requestParameters.put("DisposalNo", DisposalNo);
		}
		String userHome = getServletContext().getRealPath("");	         
        String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
        requestParameters.put("path", imagePath);

        Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
		
		HMSUtil.generateReport("Drug_disposal_report", requestParameters,(Connection) connectionMap.get("con"), response,	getServletContext());
		

	} catch (Exception e) {
		e.printStackTrace();
	}
	return null;
}


public ModelAndView pendingListforApprovalofStockTacking(HttpServletRequest request,HttpServletResponse response)
{	
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	List<MasDepartment> deptList = new ArrayList<MasDepartment>();	
	HttpSession session = request.getSession();
	
	int deptId = 0;
	int hospitalId=0;
	if (session.getAttribute("deptId") != null) {
		deptId = (Integer) session.getAttribute("deptId");
	}

	if (session.getAttribute("hospitalId") != null) {
		hospitalId = (Integer) session.getAttribute("hospitalId");
	}	

		
	jsp = "pendingForApprovalofStockTacking";
	jsp += ".jsp";
	title = "Pending For Approval of Stock Taking";	
	
	map.put("contentJsp", jsp);
	map.put("title", title);
	map.put("deptList",deptList);
		
	return new ModelAndView("index", "map", map);
}


public ModelAndView getPendingListforApprovalofStockTacking(HttpServletRequest request,HttpServletResponse response)
	
{
	
	Map<String,Object> map = new HashMap<String,Object>();
	List<StoreStockTakingM> stockTakingList = new ArrayList<StoreStockTakingM>();		
	
	Box box = HMSUtil.getBox(request);	
	
	String unitType="";
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
		box.put("hospitalId", hospitalId);
	}
	
	int deptId = 0;
	if (session.getAttribute("deptId") != null) {
		deptId = (Integer) session.getAttribute("deptId");
		box.put("deptId", deptId);
	}
	
	
	map = storesHandlerService.getPendingListforApprovalofStockTacking(box);
	
	if(map.get("stockTakingList")!= null)
	{
		stockTakingList = (List<StoreStockTakingM>) map.get("stockTakingList");
	}
	System.out.println("in controller stockTakingList="+stockTakingList.size());
	int totalRecords = 0;
	if(map.get("totalRecords")!= null)
	{
		totalRecords = (Integer) map.get("totalRecords");
	}
	
	try
	{
		PrintWriter pw = response.getWriter();	
		
		pw.write("[");
		int counter=1;
		
		for(StoreStockTakingM list : stockTakingList)
		{
			
			String remarks=list.getReason() != null ? list.getReason(): "";
			remarks = remarks.replace("\r", "$");
			remarks = remarks.replace("\n", "^");
			
		    if(counter != stockTakingList.size())
		    {
		    	
		    	pw.write("{\"Id\": \""+list.getId()+"\",\"Date\": \""+(list.getPhysicalDate() != null?HMSUtil.changeDateToddMMyyyy(list.getPhysicalDate()):"")+"\",\"No\": \""+(list.getStockTakingNo() != null?list.getStockTakingNo():"")+"\",\"FromDepartment\": \""+(list.getDepartment()!=null?list.getDepartment().getDepartmentName():"")+"\",\"SubmittedBy\":\""+(list.getLastChangedBy() != null?list.getLastChangedBy().getEmployee().getFirstName():"")+"\",\"Reason\": \""+remarks.trim()+"\",\"totalRecords\":\""+totalRecords+"\"},");
		    	
		    	
		    }
		    else
		    {		    	
		    	pw.write("{\"Id\": \""+list.getId()+"\",\"Date\": \""+(list.getPhysicalDate() != null?HMSUtil.changeDateToddMMyyyy(list.getPhysicalDate()):"")+"\",\"No\": \""+(list.getStockTakingNo() != null?list.getStockTakingNo():"")+"\",\"FromDepartment\": \""+(list.getDepartment()!=null?list.getDepartment().getDepartmentName():"")+"\",\"SubmittedBy\":\""+(list.getLastChangedBy() != null?list.getLastChangedBy().getEmployee().getFirstName():"")+"\",\"Reason\": \""+remarks.trim()+"\",\"totalRecords\":\""+totalRecords+"\"}");
		    
		    	
		    }
		
		    counter++;		
		}
		
		
		pw.write("]");
		
		
	}
	
	catch(Exception e)
	{
		stockTakingList.clear();
		e.printStackTrace();
	}	
	stockTakingList.clear();
	return null;		
	

}




public ModelAndView viewUpdateStockingDetails(HttpServletRequest request, HttpServletResponse response)
{
	Map<String,Object>map = new HashMap<String,Object>();
	List<StoreStockTakingM> stockTakingHeader = new ArrayList<StoreStockTakingM>();		
	List<StoreStockTakingT> stockTakingDetail = new ArrayList<StoreStockTakingT>();
					
	
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
	}
	
	Box box = HMSUtil.getBox(request);	
	int stockTakingHeaderId = 0;
	if(box.getInt("stockHeaderId") != 0)
	{
		stockTakingHeaderId = box.getInt("stockHeaderId");
	}
	
	map = storesHandlerService.getStockTakingDetails(stockTakingHeaderId);
	if(map.get("stockTakingDetail")!=null)
	{
		stockTakingDetail = (List<StoreStockTakingT>) map.get("stockTakingDetail");
	}
	if(map.get("stockTakingHeader")!=null)
	{
		stockTakingHeader = (List<StoreStockTakingM>) map.get("stockTakingHeader");
	}
	
			
	jsp = "viewUpdateStockTaking";
	
	jsp += ".jsp";
	title = "Stock Taking Details";
	
	
	
	if(stockTakingHeader.size()>0)
	{
		map.put("stockTakingHeader",stockTakingHeader);
	}
	if(stockTakingDetail.size()>0)
	{
		map.put("stockTakingDetail", stockTakingDetail);
	}
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("index", "map", map);
}

public ModelAndView updateStockTaking(HttpServletRequest request, HttpServletResponse response)
{
	Map<String,Object>map = new HashMap<String,Object>();
	Map<String,Object>datamap = new HashMap<String,Object>();
	
	List<StoreStockTakingM> stockTakingHeader = new ArrayList<StoreStockTakingM>();		
	List<StoreStockTakingT> stockTakingDetail = new ArrayList<StoreStockTakingT>();
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
	}
	
	int deptId = 0;
	if (session.getAttribute("deptId") != null) {
		deptId =  (Integer)session.getAttribute("deptId");
	}
	
	
	Box box = HMSUtil.getBox(request);	
	int stockHeaderId = 0;
	if(box.getInt("stockHeaderId") != 0)
	{
		stockHeaderId = box.getInt("stockHeaderId");
	}
	box.put("deptId", deptId);

	datamap = storesHandlerService.updateStockTaking(box);
	if(datamap.get("bSuccessfullyAdded")!= null)
	{
		map.put("bSuccessfullyAdded", datamap.get("bSuccessfullyAdded"));
		map.put("message", datamap.get("message"));
	}
	map = storesHandlerService.getStockTakingDetails(stockHeaderId);
	if(map.get("stockTakingDetail")!=null)
	{
		stockTakingDetail = (List<StoreStockTakingT>) map.get("stockTakingDetail");
	}
	if(map.get("stockTakingHeader")!=null)
	{
		stockTakingHeader = (List<StoreStockTakingM>) map.get("stockTakingHeader");
	}
	
			
	jsp = "viewUpdateStockTaking";
	
	jsp += ".jsp";
	title = "Stock Taking Details";
	
	
	
	if(stockTakingHeader.size()>0)
	{
		map.put("stockTakingHeader",stockTakingHeader);
	}
	if(stockTakingDetail.size()>0)
	{
		map.put("stockTakingDetail", stockTakingDetail);
	}
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("index", "map", map);
}

public ModelAndView showNipDetailsJsp(HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	HttpSession session = request.getSession();
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	String jsp = "";
	jsp = "nipDetails.jsp";
	map.put("contentJsp", jsp);
	
	return new ModelAndView("index","map",map);
}

public ModelAndView showLabRequestWardWise(HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	HttpSession session = request.getSession();
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	Box box = HMSUtil.getBox(request);
	map = storesHandlerService.showLabRequestWardWise(hospitalId);
	String jsp = "";
	jsp = "labRequestWardWise.jsp";
	map.put("contentJsp", jsp);
	
	return new ModelAndView("index","map",map);
}


public ModelAndView generateNipDetailsReport(
		HttpServletRequest request, HttpServletResponse response) {

	Map<String,Object> map = new HashMap<String,Object>();
	HttpSession session = request.getSession();
	String deptName="";
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);		
	int deptId = (Integer) session.getAttribute("deptId");		
	List<StoreItemBatchStock> stockList = new ArrayList<StoreItemBatchStock>();		
	Box box = HMSUtil.getBox(request);
	box.put("hospitalId", hospitalId);
	String hospitalName = storesHandlerService.getHospitalName(hospitalId);
	box.put("hospitalName", hospitalName);		
	box.put("deptId", deptId);		
	if (session.getAttribute("deptName") != null) {
		deptName = session.getAttribute("deptName").toString();
		box.put("deptName", deptName);
	}
	
	String userHome = getServletContext().getRealPath("");	         
    String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
    map.put("path", imagePath);

	String pvmsNo = box.getString("pvmsNiv");
	String nomenclature = box.getString("nomenclature");
	String nomen[] = nomenclature.split("\\[");
	Calendar cal = Calendar.getInstance();
	String query1 = "";
	String query="";
	Date fromDate = null;
	Date toDate = null;
	if (request.getParameter(FROM_DATE) != null
			&& !(request.getParameter(FROM_DATE).equals(""))) {
		fromDate = HMSUtil.convertStringTypeDateToDateType(request
				.getParameter(FROM_DATE));
		map.put("fromDate", fromDate);
	}
	if (request.getParameter(TO_DATE) != null
			&& !(request.getParameter(TO_DATE).equals(""))) {
		toDate = HMSUtil.convertStringTypeDateToDateType(request
				.getParameter(TO_DATE));
		map.put("toDate", toDate);
	}
	
	if (!nomen[0].equals("")) {
		query1 = query1 + "AND item.nomenclature = '"
				+ nomen[0] + "' ";
	
		map.put("nomen[0]", nomen[0]);
	}
	if (request.getParameter("pvmsNiv") != null &&(!request.getParameter("pvmsNiv").equals(""))) {
		query1 = query1 + "AND item.pvms_no = '"
						+ request.getParameter("pvmsNiv").toUpperCase() + "' ";
		
	
		map.put("pvms", request.getParameter("pvmsNiv").toUpperCase());
	}
	Map<String, Object> connectionMap = storesHandlerService
			.getConnectionForReport();
	map.put("hospitalName", hospitalName);
	map.put("fromDate", fromDate);
	map.put("toDate", toDate);
	map.put("query1", query1);
	HMSUtil.generateReport("nip_medicine_register", map,
			(Connection) connectionMap.get("con"), response,
			getServletContext());
	return null;

}



public ModelAndView generateLabRequestWardWiseReport(
		HttpServletRequest request, HttpServletResponse response) {

	Map<String,Object> map = new HashMap<String,Object>();
	HttpSession session = request.getSession();
	String deptName="";
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);		
	int deptId = (Integer) session.getAttribute("deptId");		
	List<StoreItemBatchStock> stockList = new ArrayList<StoreItemBatchStock>();		
	Box box = HMSUtil.getBox(request);
	box.put("hospitalId", hospitalId);
	String hospitalName = storesHandlerService.getHospitalName(hospitalId);
	box.put("hospitalName", hospitalName);		
	box.put("deptId", deptId);		
	if (session.getAttribute("deptName") != null) {
		deptName = session.getAttribute("deptName").toString();
		box.put("deptName", deptName);
	}
	
	String userHome = getServletContext().getRealPath("");	         
    String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
    map.put("path", imagePath);

	String pvmsNo = box.getString("pvmsNiv");
	String nomenclature = box.getString("nomenclature");
	String nomen[] = nomenclature.split("\\[");
	Calendar cal = Calendar.getInstance();
	String query1 = "";
	String query="";
	Date fromDate = null;
	Date toDate = null;
	if (request.getParameter(FROM_DATE) != null
			&& !(request.getParameter(FROM_DATE).equals(""))) {
		fromDate = HMSUtil.convertStringTypeDateToDateType(request
				.getParameter(FROM_DATE));
		map.put("fromDate", fromDate);
	}
	if (request.getParameter(TO_DATE) != null
			&& !(request.getParameter(TO_DATE).equals(""))) {
		toDate = HMSUtil.convertStringTypeDateToDateType(request
				.getParameter(TO_DATE));
		map.put("toDate", toDate);
	}
	int departmentId = 0;
	if (request.getParameter("departmentId") != null
			&& !(request.getParameter("departmentId").equals(""))) {
		departmentId = Integer.parseInt(request
				.getParameter("departmentId"));
		map.put("departmentId", departmentId);
	}
	
	
	
	Map<String, Object> connectionMap = storesHandlerService
			.getConnectionForReport();
	map.put("hospitalName", hospitalName);
	map.put("fromDate", fromDate);
	map.put("toDate", toDate);
	map.put("query1", query1);
	HMSUtil.generateReport("lab_request_ward_Report", map,
			(Connection) connectionMap.get("con"), response,
			getServletContext());
	return null;

}
public ModelAndView listofStockTacking(HttpServletRequest request,HttpServletResponse response)
{	
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	List<MasDepartment> deptList = new ArrayList<MasDepartment>();	
	HttpSession session = request.getSession();
	
	int deptId = 0;
	int hospitalId=0;
	if (session.getAttribute("deptId") != null) {
		deptId = (Integer) session.getAttribute("deptId");
	}

	if (session.getAttribute("hospitalId") != null) {
		hospitalId = (Integer) session.getAttribute("hospitalId");
	}	

		
	jsp = "listofStockTacking";
	jsp += ".jsp";
	title = "List of Stock Taking";	
	
	map.put("contentJsp", jsp);
	map.put("title", title);
	map.put("deptList",deptList);
		
	return new ModelAndView("index", "map", map);
}


public ModelAndView getListofStockTacking(HttpServletRequest request,HttpServletResponse response)
	
{
	
	Map<String,Object> map = new HashMap<String,Object>();
	List<StoreStockTakingM> stockTakingList = new ArrayList<StoreStockTakingM>();		
	
	Box box = HMSUtil.getBox(request);	
	
	String unitType="";
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
		box.put("hospitalId", hospitalId);
	}
	
	int deptId = 0;
	if (session.getAttribute("deptId") != null) {
		deptId = (Integer) session.getAttribute("deptId");
		box.put("deptId", deptId);
	}
	
	String flag = "HISTORY";
	
    box.put("flag", flag);
	
	
	
	map = storesHandlerService.getPendingListforApprovalofStockTacking(box);
	
	if(map.get("stockTakingList")!= null)
	{
		stockTakingList = (List<StoreStockTakingM>) map.get("stockTakingList");
	}
	System.out.println("in controller stockTakingList="+stockTakingList.size());
	int totalRecords = 0;
	if(map.get("totalRecords")!= null)
	{
		totalRecords = (Integer) map.get("totalRecords");
	}
	
	try
	{
		PrintWriter pw = response.getWriter();	
		
		pw.write("[");
		int counter=1;
		
		for(StoreStockTakingM list : stockTakingList)
		{
			
			String remarks=list.getReason() != null ? list.getReason(): "";
			remarks = remarks.trim().replace("\r", "$");
			remarks = remarks.replace("\n", "^");
		    if(counter != stockTakingList.size())
		    {
		    	
		    	pw.write("{\"Id\": \""+list.getId()+"\",\"Date\": \""+(list.getPhysicalDate() != null?HMSUtil.changeDateToddMMyyyy(list.getPhysicalDate()):"")+"\",\"No\": \""+(list.getStockTakingNo() != null?list.getStockTakingNo():"")+"\",\"FromDepartment\": \""+(list.getDepartment()!=null?list.getDepartment().getDepartmentName():"")+"\",\"SubmittedBy\":\""+(list.getLastChangedBy() != null?list.getLastChangedBy().getEmployee().getFirstName():"")+"\",\"ApprovedBy\":\""+(list.getApprovedBy() != null?list.getApprovedBy().getEmployee().getFirstName():"Not Approved")+"\",\"Reason\": \""+remarks+"\",\"totalRecords\":\""+totalRecords+"\"},");
		    
		    	
		    }
		    else
		    {		    	
		    	pw.write("{\"Id\": \""+list.getId()+"\",\"Date\": \""+(list.getPhysicalDate() != null?HMSUtil.changeDateToddMMyyyy(list.getPhysicalDate()):"")+"\",\"No\": \""+(list.getStockTakingNo() != null?list.getStockTakingNo():"")+"\",\"FromDepartment\": \""+(list.getDepartment()!=null?list.getDepartment().getDepartmentName():"")+"\",\"SubmittedBy\":\""+(list.getLastChangedBy() != null?list.getLastChangedBy().getEmployee().getFirstName():"")+"\",\"ApprovedBy\":\""+(list.getApprovedBy() != null?list.getApprovedBy().getEmployee().getFirstName():"Not Approved")+"\",\"Reason\": \""+remarks+"\",\"totalRecords\":\""+totalRecords+"\"}");
		    	
		    	
		    }
		
		    counter++;		
		}
		
		
		pw.write("]");
		
		
	}
	
	catch(Exception e)
	{
		stockTakingList.clear();
		e.printStackTrace();
	}	
	stockTakingList.clear();
	return null;		
	

}

public ModelAndView viewStockingDetails(HttpServletRequest request, HttpServletResponse response)
{
	Map<String,Object>map = new HashMap<String,Object>();
	List<StoreStockTakingM> stockTakingHeader = new ArrayList<StoreStockTakingM>();		
	List<StoreStockTakingT> stockTakingDetail = new ArrayList<StoreStockTakingT>();
					
	
	
	HttpSession session = request.getSession();
	int hospitalId = 0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId =  (Integer)session.getAttribute("hospitalId");
	}
	
	Box box = HMSUtil.getBox(request);	
	int stockTakingHeaderId = 0;
	if(box.getInt("stockHeaderId") != 0)
	{
		stockTakingHeaderId = box.getInt("stockHeaderId");
	}
	
	map = storesHandlerService.getStockTakingDetails(stockTakingHeaderId);
	if(map.get("stockTakingDetail")!=null)
	{
		stockTakingDetail = (List<StoreStockTakingT>) map.get("stockTakingDetail");
	}
	if(map.get("stockTakingHeader")!=null)
	{
		stockTakingHeader = (List<StoreStockTakingM>) map.get("stockTakingHeader");
	}
	
			
	jsp = "viewStockTaking";
	
	jsp += ".jsp";
	title = "Stock Taking Details";
	
	
	
	if(stockTakingHeader.size()>0)
	{
		map.put("stockTakingHeader",stockTakingHeader);
	}
	if(stockTakingDetail.size()>0)
	{
		map.put("stockTakingDetail", stockTakingDetail);
	}
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("index", "map", map);
}

@SuppressWarnings("unused")
public ModelAndView getVendorList(HttpServletRequest request,
		HttpServletResponse response) {

	HttpSession session = request.getSession();
	String itemNameField = "";
	String autoHint = "";

	Map<String, Object> map = new HashMap<String, Object>();
	try {
		if (request.getParameter("requiredField") != null) {
			itemNameField = (request.getParameter("requiredField"));
		}
		if (request.getParameter(itemNameField) != null) {
			autoHint = (request.getParameter(itemNameField));
		}

		map.put("autoHint", autoHint);
		map = storesHandlerService.getVendorList(map);
	} catch (Exception e) {
		e.printStackTrace();
	}
	jsp = "opd_responseForAutoCompleteVendor";
	return new ModelAndView(jsp, "map", map);
}

public synchronized void getDataForBarBatchStockId(HttpServletRequest request,HttpServletResponse response)
{
	String userName = "";
	int deptId = 0;
	int hospitalId = 0;
	Box box = HMSUtil.getBox(request);
	HttpSession session = request.getSession();
	if (session.getAttribute("userName") != null)
		userName = (String) session.getAttribute("userName");
	if (session.getAttribute("hospitalId") != null)
		hospitalId = Integer.parseInt(""
				+ session.getAttribute("hospitalId"));
	if (session.getAttribute("deptId") != null)
		deptId = Integer.parseInt("" + session.getAttribute("deptId"));
	// --------------------------------------------------------------------------------
	int stockId=box.getInt("stockId");
	int item_Id=0;

	if(request.getParameter("itemId")!=null){
	item_Id=Integer.parseInt(request.getParameter("itemId"));
	}

	String itemNameField ="";
	Map<String, Object> map = new HashMap<String, Object>();
	String lotNo = "";
	List<StoreItemBatchStock> objectList = new ArrayList<StoreItemBatchStock>();

	box.put("deptId", deptId);
	box.put("userName", userName);
	box.put("hospitalId", hospitalId);
	box.put("stockId", stockId);
	box.put("itemId", item_Id);


	map = storesHandlerService.getDataForBarBatchStockId(box);
	if (map.get("storeItemBatchStockList") != null) {
		objectList = (List<StoreItemBatchStock>) map
				.get("storeItemBatchStockList");
	}

	StringBuffer sb = new StringBuffer();
	try {
		if (objectList != null && objectList.size() > 0) {
			if (objectList.get(0) != null) {
				StoreItemBatchStock stock = (StoreItemBatchStock) objectList
						.get(0);
				String pvmsNo = stock.getItem().getPvmsNo();

				String nomenclature = stock.getItem().getNomenclature();

				int itemId = stock.getItem().getId();
				int brandId=1;
				if(stock.getBrand()!=null){

               try {
				brandId=stock.getBrand().getId();
			} catch (Exception e) {
				brandId=5008;
				e.printStackTrace();
			}
				}
                BigDecimal costPrice=stock.getCostPrice();
				sb.append("<item>");

				sb.append("<pvms>" + pvmsNo + "</pvms>");
				sb.append("<nomenclature>" + nomenclature
						+ "</nomenclature>");
				sb.append("<itemId>" + itemId + "</itemId>");
				sb.append("<brandId>" + brandId + "</brandId>");
				try {
					sb.append("<costPrice>" + costPrice.toString() + "</costPrice>");
				} catch (Exception e1) {

					sb.append("<costPrice></costPrice>");
				}

				try {
					/*sb.append("<batchNo>" + stock.getBatchNo()
							+ "</batchNo>");*/
					sb.append("<batchNo></batchNo>");
				} catch (Exception e) {
					sb.append("<batchNo></batchNo>");
				}
				try {
					sb.append("<expiryDate>"
							+ HMSUtil.convertDateToStringWithoutTime(stock
									.getExpiryDate()) + "</expiryDate>");
				} catch (Exception e) {
					sb.append("<expiryDate>NA</expiryDate>");
				}
				try {
					sb.append("<availableStock>" + stock.getClosingStock()
							+ "</availableStock>");
				} catch (Exception e) {
					sb.append("<availableStock>0</availableStock>");
				}
				try {
					sb.append("<barCodeNo>" + stock.getBarcodeNo()
							+ "</barCodeNo>");
				} catch (Exception e) {
					sb.append("<barCodeNo></barCodeNo>");
				}
				try {
					sb
							.append("<au>"
									+ stock.getItem().getItemConversion()
											.getIssueUnit().getUnitName()
									+ "</au>");
				} catch (Exception e) {
					sb.append("<au></au>");
				}

				try {
					sb
							.append("<batchId>"
									+ stock.getId()
									+ "</batchId>");
				} catch (Exception e) {
					sb.append("<batchId></batchId>");
				}
				try {
					sb.append("<dom>"
							+ HMSUtil.convertDateToStringWithoutTime(stock
									.getManufactureDate()) + "</dom>");
				} catch (Exception e) {
					sb.append("<dom>NA</dom>");
				}
				
				

					sb.append("<mmf>-</mmf>");
					sb.append("<source>-</source>");
				
				// add javed khan for BG comes from store_item_batch_stock
				try {
					if(stock.getBrandGeneric() != null){
					sb.append("<BG>"
							+ stock.getBrandGeneric() + "</BG>");
					}else{
						sb.append("<BG>G</BG>");
					}
				} catch (Exception e) {
					sb.append("<BG>G</BG>");
				}
				sb.append("</item>");

			}
		}
	} catch (Exception e) {
		e.printStackTrace();
	}

	response.setContentType("text/xml");
	response.setHeader("Cache-Control", "no-cache");
	try {
		response.getWriter().write(
				"<?xml version='1.0' encoding='ISO-8859-1'?>");
		response.getWriter().write("<items>");
		response.getWriter().write(sb.toString());
		response.getWriter().write("</items>");
	} catch (Exception e) {
		e.printStackTrace();
	}
	// return new ModelAndView(jsp, "map", map);
}


public void fillBatchforStockId(HttpServletRequest request,
		HttpServletResponse response) {
	Box box = HMSUtil.getBox(request);
	// --------------- Retriving User Name,Hospital Id,Department Id from
	// Session-----
	String userName = "";
	int deptId = 0;
	int hospitalId = 0;

	HttpSession session = request.getSession();
	if (session.getAttribute("userName") != null)
		userName = (String) session.getAttribute("userName");
	if (session.getAttribute("hospitalId") != null)
		hospitalId = Integer.parseInt(""
				+ session.getAttribute("hospitalId"));
	if (session.getAttribute("deptId") != null)
		deptId = Integer.parseInt("" + session.getAttribute("deptId"));
	// --------------------------------------------------------------------------------
	Map<String, Object> dataMap = new HashMap<String, Object>();
	int  itemId=0;
	try {
		if (request.getParameter("pvmsNo") != null) {
			itemId = Integer.parseInt(request.getParameter("pvmsNo"));
		}

		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		dataMap.put("itemId", itemId);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		//map = storesHandlerService.fillItemsForIssueToDispensary(dataMap);
		
		
		
		
		
		map = storesHandlerService.fillBatchForIssueToPatient(dataMap);
		
		
		
		
		if (map.get("itemList") != null) {
			itemList = (List) map.get("itemList");
		}
		// javed khan
		List<StoreItemBatchStock> batchList = new ArrayList<StoreItemBatchStock>();
		if (map.get("batchList") != null) {
			batchList = (List) map.get("batchList");
		}
		
		BigDecimal stock = new BigDecimal(0);
		if (map.get("stock") != null) {
			stock = (BigDecimal) map.get("stock");
		}

		StringBuffer sb = new StringBuffer();
	
			sb.append("<item>");

			sb.append("<batches>");
			for (StoreItemBatchStock batch : batchList) {
				sb.append("<batch>");
				sb.append("<batchId>" + batch.getId() + "</batchId>");
				Encoder encoder = Base64.getEncoder();
				String encodedString = encoder.encodeToString(batch.getBatchNo().toString().getBytes());
				sb.append("<batchName>" + encodedString
						+ "</batchName>");
				sb.append("</batch>");
			}
			sb.append("</batches>");


			sb.append("</item>");
	

		/*
		 * BigDecimal stock = new BigDecimal(0); try { String s =
		 * (String)map.get("stock"); stock = new BigDecimal(s); }
		 * catch(Exception e) { stock = new BigDecimal(0); }
		 */

		/*
		 * sb.append("<stock>"); sb.append("<stk>");
		 * sb.append(stock.doubleValue()); sb.append("</stk>");
		 * sb.append("</stock>");
		 */
		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");

		response.getWriter().write(
				"<?xml version='1.0' encoding='ISO-8859-1'?>");
		response.getWriter().write("<items>");
		response.getWriter().write(sb.toString());
		response.getWriter().write("</items>");
	} catch (Exception e) {
		e.printStackTrace();
	}
}	


public ModelAndView showVendorQuotationRegisterJsp(HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	HttpSession session = request.getSession();
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	String jsp = "";
	jsp = "quotationRegister.jsp";
	map.put("contentJsp", jsp);
	
	return new ModelAndView("index","map",map);
}


public ModelAndView generateQuotationRegister(
		HttpServletRequest request, HttpServletResponse response) {

	Map<String,Object> map = new HashMap<String,Object>();
	HttpSession session = request.getSession();
	String deptName="";
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);		
	int deptId = (Integer) session.getAttribute("deptId");		
	List<StoreItemBatchStock> stockList = new ArrayList<StoreItemBatchStock>();		
	Box box = HMSUtil.getBox(request);
	box.put("hospitalId", hospitalId);
	String hospitalName = storesHandlerService.getHospitalName(hospitalId);
	box.put("hospitalName", hospitalName);		
	box.put("deptId", deptId);		
	if (session.getAttribute("deptName") != null) {
		deptName = session.getAttribute("deptName").toString();
		box.put("deptName", deptName);
	}
	
	String userHome = getServletContext().getRealPath("");	         
    String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
    map.put("path", imagePath);

	String quotationNo = box.getString("quotationNo");
	   map.put("quotationNo",quotationNo);
	
	Map<String, Object> connectionMap = storesHandlerService
			.getConnectionForReport();
	map.put("hospitalName", hospitalName);
	
	HMSUtil.generateReport("VendorQuotationDetails", map,
			(Connection) connectionMap.get("con"), response,
			getServletContext());
	return null;

}





public ModelAndView showActualStockReportForNDepartmentJsp(HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	HttpSession session = request.getSession();
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	
	//map = storesHandlerService.showDrugExpiryList(hospitalId);
	String jsp = "";
	
	jsp = "stockStatusListForNDepartment.jsp";
	map.put("contentJsp", jsp);
	
	return new ModelAndView("index","map",map);
}

public ModelAndView getStockDetailsForDepartment(HttpServletRequest request,HttpServletResponse response)		
{
	
	Map<String,Object> map = new HashMap<String,Object>();
	HttpSession session = request.getSession();
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	int deptId = (Integer) session.getAttribute("deptId");
	
	List<Object[]> stockList = new ArrayList<Object[]>();		
	Box box = HMSUtil.getBox(request);
	box.put("hospitalId", hospitalId);
	box.put("deptId", deptId);

	

	map = storesHandlerService.getStockDetailsForDepartment(box);	
	
	if(map.get("stockList")!= null)
	{
		stockList =(List<Object[]>)map.get("stockList");
	}
	
	
	int totalRecords = 0;
	if(map.get("totalRecords")!= null)
	{
		totalRecords = (Integer) map.get("totalRecords");
	}
	
	try
	{
		PrintWriter pw = response.getWriter();	
		
		pw.write("[");
		int counter=1;
		int i=0;
		System.out.println("stockList="+stockList);
		for(Object[] list : stockList)
		{
			
			
		    if(counter != stockList.size())
		    {
		    	
		    	
		    		pw.write("{\"AU\": \""+(list[67]!=null?list[67]:"")+"\",\"MatCode\": \""+list[5]+"\",\"Nomen\": \""+list[6]+"\",\"Stores\": \""+(list[1]!=null?list[1]:"0")+"\",\"CD\": \""+(list[2]!=null?list[2]:"0")+"\",\"WP\": \""+(list[3]!=null?list[3]:"0")+"\",\"totalRecords\":\""+totalRecords+"\"},");
		    	
		    }
		    else
		    {		    	
		    	
		    	pw.write("{\"AU\": \""+(list[67]!=null?list[67]:"")+"\",\"MatCode\": \""+list[5]+"\",\"Nomen\": \""+list[6]+"\",\"Stores\": \""+(list[1]!=null?list[1]:"0")+"\",\"CD\": \""+(list[2]!=null?list[2]:"0")+"\",\"WP\": \""+(list[3]!=null?list[3]:"0")+"\",\"totalRecords\":\""+totalRecords+"\"}");
		    	
		    	
		    }
		
		    counter++;	
		    i++;
		}
		
		
		pw.write("]");
		
		
	}
	
	catch(Exception e)
	{
		stockList.clear();
		
		e.printStackTrace();
	}	
	stockList.clear();
	
	return null;		
	

}


public ModelAndView showUnusedMedicineRegister(
		HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();

	title = "Unused Medicine Register";
	jsp = "UnusedMedicineRegister";
	jsp = jsp + ".jsp";
	map.put("contentJsp", jsp);
	map.put("title", title);

	return new ModelAndView("indexB", "map", map);
}


public ModelAndView printUnusedMedicineRegister(HttpServletRequest request,
		HttpServletResponse response) {

	Map<String, Object> requestParameters = new HashMap<String, Object>();
	String intentNo = null;
	HttpSession session = request.getSession();
	requestParameters.put("deptId", session.getAttribute("deptId"));
	int hospitalId = 0;
	String balanceNo ="";
	
	if (session.getAttribute("hospitalId") != null)
		hospitalId = Integer.parseInt(""
				+ session.getAttribute("hospitalId"));
	requestParameters.put("hospitalId",hospitalId);
	
	try {
	/*	if (request.getParameter("balanceNo") != null
				&& !(request.getParameter("balanceNo").equals(""))) {
			balanceNo = request.getParameter("balanceNo");
			requestParameters.put("openingBalanceNo", balanceNo);
		}*/
		
		Date fromDate = null;
		Date toDate = null;
		if (request.getParameter(FROM_DATE) != null
				&& !(request.getParameter(FROM_DATE).equals(""))) {
			fromDate = HMSUtil.convertStringTypeDateToDateType(request
					.getParameter(FROM_DATE));
			requestParameters.put("fromDate", fromDate);
			System.out.println("fromDate"+fromDate);
		}
		if (request.getParameter(TO_DATE) != null
				&& !(request.getParameter(TO_DATE).equals(""))) {
			toDate = HMSUtil.convertStringTypeDateToDateType(request
					.getParameter(TO_DATE));
			requestParameters.put("toDate", toDate);
			System.out.println("toDate"+toDate);
		}
		
		String userHome = getServletContext().getRealPath("");	         
        String imagePath = userHome+"/jsp/images/logonew-hal.jpg";
        requestParameters.put("path", imagePath);
		
	
	Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
			HMSUtil.generateReport("unused_medicine_register",
					requestParameters, (Connection) connectionMap.get("con"),
					response, getServletContext());



	} catch (Exception e) {
		e.printStackTrace();
	}
	
	return null;
}


public ModelAndView showMedicineIssueAndReceiveDetailsJsp(HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	HttpSession session = request.getSession();
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	
	//map = storesHandlerService.showDrugExpiryList(hospitalId);
	String jsp = "";
	
	jsp = "medicineIssueandReceiveDetails.jsp";
	map.put("contentJsp", jsp);
	
	return new ModelAndView("index","map",map);
}

public ModelAndView getMedicineIssueAndReceiveDetails(HttpServletRequest request,HttpServletResponse response)		
{
	
	Map<String,Object> map = new HashMap<String,Object>();
	HttpSession session = request.getSession();
	int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
	int deptId = (Integer) session.getAttribute("deptId");
	
	List<StoreIssueT> issueList = new ArrayList<StoreIssueT>();	
	Box box = HMSUtil.getBox(request);
	box.put("hospitalId", hospitalId);
	box.put("deptId", deptId);

	

	map = storesHandlerService.getMedicineIssueAndReceiveDetails(box);	
	
	if(map.get("issueList")!= null)
	{
		issueList =(List<StoreIssueT>)map.get("issueList");
	}
	
	
	int totalRecords = 0;
	if(map.get("totalRecords")!= null)
	{
		totalRecords = (Integer) map.get("totalRecords");
	}
	
	try
	{
		PrintWriter pw = response.getWriter();	
		
		pw.write("[");
		int counter=1;
		int i=0;
		System.out.println("issueList="+issueList.size());
		for(StoreIssueT list : issueList)
		{
			
			
		    if(counter != issueList.size())
		    {
		    	
		    	System.out.println("nomen="+list.getItem().getNomenclature());
		    		pw.write("{\"MatCode\": \""+(list.getItem()!=null?list.getItem().getPvmsNo():"")+"\",\"Nomen\": \""+(list.getItem()!=null?list.getItem().getNomenclature():"")+"\",\"ToDept\": \""+(list.getIssueM().getToStore()!=null?list.getIssueM().getToStore().getDepartmentName():"0")+"\",\"ReqQty\": \""+(list.getQtyRequest()!=null?list.getQtyRequest():0)+"\",\"IssuedQty\": \""+(list.getQtyIssued()!=null?list.getQtyIssued():0)+"\",\"IssueNo\": \""+(list.getIssueM()!=null?list.getIssueM().getIssueNo():"")+"\",\"IssueDate\": \""+(list.getIssueM().getIssueDate()!=null?list.getIssueM().getIssueDate():"")+"\",\"totalRecords\":\""+totalRecords+"\"},");
		    	
		    }
		    else
		    {		    	
		    	
		    	pw.write("{\"MatCode\": \""+(list.getItem()!=null?list.getItem().getPvmsNo():"")+"\",\"Nomen\": \""+(list.getItem()!=null?list.getItem().getNomenclature():"")+"\",\"ToDept\": \""+(list.getIssueM().getToStore()!=null?list.getIssueM().getToStore().getDepartmentName():"0")+"\",\"ReqQty\": \""+(list.getQtyRequest()!=null?list.getQtyRequest():0)+"\",\"IssuedQty\": \""+(list.getQtyIssued()!=null?list.getQtyIssued():0)+"\",\"IssueNo\": \""+(list.getIssueM()!=null?list.getIssueM().getIssueNo():"")+"\",\"IssueDate\": \""+(list.getIssueM().getIssueDate()!=null?list.getIssueM().getIssueDate():"")+"\",\"totalRecords\":\""+totalRecords+"\"}");
		    	
		    	
		    }
		
		    counter++;	
		    i++;
		}
		
		
		pw.write("]");
		
		
	}
	
	catch(Exception e)
	{
		issueList.clear();
		
		e.printStackTrace();
	}	
	issueList.clear();
	
	return null;		
	

}






}
