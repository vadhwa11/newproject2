
package jkt.hms.opd.dataservice;

import static jkt.hms.util.RequestConstants.*;
import it.businesslogic.ireport.gui.event.TemplateChangedEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.net.URL;
import java.nio.ByteBuffer;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.TimeUnit;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import javassist.runtime.Desc;
import jkt.hms.masters.business.*;
import jkt.hms.pacs.controller.PacsPatient;
import jkt.hms.util.Box;
import jkt.hms.util.HMSUtil;
import jkt.hms.util.ImmunizationUtil;
import jkt.hms.util.RequestConstants;
import jkt.hms.util.StringComparator;
import oracle.jdbc.OracleCallableStatement;
import oracle.jdbc.OracleResultSet;
import oracle.jdbc.OracleTypes;

import org.apache.taglibs.standard.extra.spath.ASCII_CharStream;
import org.hibernate.Criteria;
import org.hibernate.FetchMode;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.Transaction;
import org.hibernate.classic.Session;
import org.hibernate.criterion.CriteriaSpecification;
import org.hibernate.criterion.Criterion;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projection;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.springframework.dao.DataAccessException;
import org.springframework.orm.hibernate3.HibernateTemplate;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;

import ca.uhn.hl7v2.model.v26.segment.UAC;

import com.lowagie.text.pdf.RadioCheckField;

public class OPDDataServiceImpl extends HibernateDaoSupport implements
		OPDDataService {
	//  For Pacs JDBC Connection
	public static Connection getPacsConnection(){
		Connection con=null;
		Properties prop = new Properties();
		URL resourcePath = Thread.currentThread().getContextClassLoader()
				.getResource("jdbc.properties");
		try{
			prop.load(new FileInputStream(new File(resourcePath.getFile())));
			Class.forName((String)prop.get("pacs.database.driver"));
			con=DriverManager.getConnection((String)prop.get("pacs.database.url"), (String)prop.get("pacs.database.user"), (String)prop.get("pacs.database.password"));
		}catch(Exception e){e.printStackTrace();}
		return con;
	}
	// ------------------------------------------methods written by
	// Vikas---------------------------------
	@SuppressWarnings( { "unused", "unchecked" })
	public Map<String, Object> getWaitingPatientList(Map mapForDS) {
		Session session = (Session) getSession();
		List<Visit> patientList = new ArrayList<Visit>();
		List<MasEmployee> doctorList = new ArrayList<MasEmployee>();
	//	List<MasUnit> unitList = new ArrayList<MasUnit>();
		//List<MasRelation> relationList = new ArrayList<MasRelation>();
		//List<MasRank> sessionList = new ArrayList<MasRank>();
		List<MasSession> sessionList = new ArrayList<MasSession>();
		/*List<Integer> referredVisitIdList = new ArrayList<Integer>();*/ //commented unused code by Babita Dangwal on 21-09-2017
		Map<String, Object> map = new HashMap<String, Object>();
		String deptName = "";
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		//Date date=HMSUtil.convertStringTypeDateToDateType(currentDate);
		Date date = new Date();
		String category = "Doctor"; 
	//	int unitId  = 0;
		//int relationId = 0;
		//int rankId = 0;
	
		String reportingDept[] = {"OPD","FollowUp"};
		
		
		int deptId = 0;
		int sessionId =0;
		int hospitalId=0;
		String serviceNo ="";
		String flag="";
		//int searchFlag=0;
		int tokenNo=0;
		String patientName="";
		//String uhid="";   //commented by Babita Dangwal on 21-09-2017
		//int opd_DepartmentId=0;  //commented by Babita Dangwal on 21-09-2017
		String visitDate=null;
		
		if (mapForDS.get(SESSION_ID) != null) {
				sessionId = (Integer) mapForDS.get(SESSION_ID);
				
			}
		/*if(mapForDS.get("searchFlag")!=null){
			searchFlag=(Integer)mapForDS.get("searchFlag");
		}
		if((Boolean)mapForDS.get("forOPClinnic")==null){
			if(mapForDS.get("opd_Department")!=null){
				opd_DepartmentId =(Integer) mapForDS.get("opd_Department");
			}
		}*/  //commented unused code by Babita Dangwal on 21-09-2017
		
	/*	if(mapForDS.get("uhid")!=null){
			uhid =(String) mapForDS.get("uhid");
		}*/
		if(mapForDS.get("flag")!=null){
			flag =(String) mapForDS.get("flag");
		}
		
		if (mapForDS.get("deptId") != null) {
			deptId = (Integer) mapForDS.get("deptId");
		}
		
		if (mapForDS.get("hospitalId") != null) {
			hospitalId = (Integer) mapForDS.get("hospitalId");
		}
		if (mapForDS.get("visitDate") != null) {
			visitDate =  (String)mapForDS.get("visitDate");
		}
		
		
		String currentTime =   HMSUtil.getCurrentTimeWithoutSecond().get("currentTime")!=null?HMSUtil.getCurrentTimeWithoutSecond().get("currentTime").toString():"";
		//System.out.println("gg "+flag +" empId"+mapForDS.get("empId")+"deptId"+deptId+"hospitalId"+hospitalId+"reportingDept"+reportingDept);
		try {
			/*if(mapForDS.get("rankId") != null){
				rankId = (Integer)mapForDS.get("rankId");
			}*/
		/*	if(mapForDS.get("unitId") != null){
				unitId = (Integer)mapForDS.get("unitId");
			}*/
			/*if(mapForDS.get("relationId") != null){
				relationId = (Integer)mapForDS.get("relationId");
			}*/
			if(mapForDS.get("serviceNo") != null){
				serviceNo = (String)mapForDS.get("serviceNo");
			}
			
			if(mapForDS.get(PATIENT_NAME) != null){
				patientName = (String)mapForDS.get(PATIENT_NAME);
			}
			
			if (mapForDS.get("empId") != null && (Integer) mapForDS.get("empId") > 0) {
				int empId = (Integer) mapForDS.get("empId");
				
				Criteria crit = session.createCriteria(Visit.class)
						//.add(Restrictions.eq("VisitDate", date));
						//.add(Restrictions.eq("VisitStatus", "w"))
						.add(Restrictions.eq("Doctor.Id", empId))
						.add(Restrictions.eq("Department.Id", deptId))
						.createAlias("Hospital", "h").add(Restrictions.eq("h.Id", hospitalId))
						.createAlias("Session", "ses")
						.add(Restrictions.in("ReportingFor", reportingDept))
			
						
						;
				if(visitDate!=null)
					date = HMSUtil.convertStringTypeDateToDateType(visitDate);
				
				if(flag.equalsIgnoreCase("rc")){
					//crit.add(Restrictions.eq("VisitStatus", "c"));
					//crit.add(Restrictions.and(Restrictions.or(Restrictions.eq("TokenNo", 0).ignoreCase(), Restrictions.eq("VisitDate", date).ignoreCase()), Restrictions.eq("VisitStatus", "c")));
					//crit.add(Restrictions.and(Restrictions.eq("VisitStatus", "c"), Restrictions.or(Restrictions.eq("VisitDate", date), Restrictions.eq("TokenNo", 0))));
					crit.add(Restrictions.or(Restrictions.and(Restrictions.eq("VisitStatus", "c"), Restrictions.eq("VisitDate", date)), Restrictions.and(Restrictions.eq("TokenNo", 0), Restrictions.eq("AddEditDate", date))));
					
				}else{
					//crit.add(Restrictions.eq("VisitStatus", "w").ignoreCase());
					//crit.add(Restrictions.or(Restrictions.and(Restrictions.eq("VisitStatus", "w").ignoreCase(),Restrictions.eq("VisitDate", date)),Restrictions.eq("VisitStatus", "r").ignoreCase()));
					crit.add(Restrictions.or(Restrictions.eq("VisitStatus", "w").ignoreCase(),Restrictions.eq("VisitStatus", "r").ignoreCase())).add(Restrictions.eq("VisitDate", new Date()));
					
					/*.add(Restrictions.le("ses.FromTime", currentTime))
					.add(Restrictions.ge("ses.ToTime", currentTime));*/
				}
						//.addOrder(Order.asc("TokenNo"))
				/*if(rankId != 0){
					crit = crit.createAlias("Hin", "hin").createAlias("Hin.Rank", "rank").add(Restrictions.eq("rank.Id", rankId));
				}
				if(relationId != 0){
					crit = crit.createAlias("Hin", "hin").createAlias("Hin.Relation", "relation").add(Restrictions.eq("relation.Id", relationId));
				}*/
			/*	if(unitId != 0){
					crit = crit.createAlias("Hin", "hin").createAlias("Hin.Unit", "unit").add(Restrictions.eq("unit.Id", unitId));
				}*/
				//System.out.println("serviceNo="+serviceNo);
				if(!serviceNo.equals("")){
					crit = crit.createAlias("Hin", "hin").add(Restrictions.eq("hin.ServiceNo", serviceNo));
				}
				if(!patientName.equals("")){
					crit = crit.createAlias("Hin", "hin").add(Restrictions.like("hin.PFirstName", patientName
							+ "%"));
				}
				
				if(sessionId!=0){
					crit.add(Restrictions.eq("Session.Id", sessionId));
				}
				patientList = crit. addOrder(Order.desc("VisitDate")).addOrder(Order.asc("VisitTime")).list();
				map.put("empId", empId);
				if(patientList.size() >0)
				{
					String  dentalDepartmentCode = null;
					try
					{
						dentalDepartmentCode = HMSUtil.getValuesFromPropertiesFile("adt.properties", "departmentCodeForDental");
					}
					catch(Exception e)
					{
						e.printStackTrace();
					}
					
					map.put("dentalCode", dentalDepartmentCode);
					
	/*				//fetching referred case
					for(Visit visit:patientList){
						referredVisitIdList.add(visit.getId());
					}
					
					List<OpdPatientDetails >opdPatientDetailsList = session.createCriteria(OpdPatientDetails.class)
							.createAlias("ReferralVisit", "ReferralVisit")
							.add(Restrictions.in("ReferralVisit.Id", referredVisitIdList)).list();
					
					referredVisitIdList.clear();
					
					for(OpdPatientDetails opd:opdPatientDetailsList){
						referredVisitIdList.add(opd.getReferralVisit().getId());
					}
					
					//end
					*/ ////commented unused code(now use RefereeOpdPatientdetailsId of visit instead of it) by Babita Dangwal on 21-09-2017
				}
				
				
			}
			
			/*doctorList=session.createCriteria(MasEmployee.class).add(Restrictions.eq("Status", "y"))
			.createAlias("Hospital", "h").add(Restrictions.eq("h.Id", hospitalId)).list();*/
			//unitList = session.createCriteria(MasUnit.class).add(Restrictions.eq("Status", "y")).list();
			//rankList = session.createCriteria(MasRank.class).add(Restrictions.eq("Status", "y")).list();
			//relationList = session.createCriteria(MasRelation.class).add(Restrictions.eq("Status", "y")).list();
			sessionList = session.createCriteria(MasSession.class).add(Restrictions.eq("Status", "y")).list();
			String empCategoryCodeForDoctor = "";
			
			try {
				
				empCategoryCodeForDoctor = HMSUtil.getValuesFromPropertiesFile("adt.properties", "empCategoryCodeForDoctor");
					
			} catch (Exception e) {
				e.printStackTrace();
			}
			   doctorList = session.createCriteria(MasEmployeeDepartment.class)
					   .createAlias("Employee", "emp")	
					   .createAlias("emp.EmpCategory", "ec")	
					 .add(Restrictions.eq("Status","y").ignoreCase())  
					  .add(Restrictions.eq("Department.Id",deptId))
					// .add(Restrictions.eq("emp.Hospital.Id",hospitalId))
									
					.add(Restrictions.eq("ec.EmpCategoryCode", empCategoryCodeForDoctor))
					.addOrder(Order.asc("emp.FirstName"))
					//.add(Restrictions.in("Id", empList))
					.list();
		/*	doctorList = session.createCriteria(MasEmployee.class).createAlias(
					"EmpCategory", "empCategory").createAlias("Department",
					"dept").add(
					Restrictions.eq("empCategory.EmpCategoryName", category))
					.add(Restrictions.eq("dept.Id", deptId)).list();
           */
/*			Map<String, Object> deptMap = getDepartmentNameFromId(deptId);
			if (deptMap.get("") != null) {
				deptName = (String) deptMap.get("deptName");
			}*/  //commented unused code(we can get dept name from session) by Babita Dangwal on 21-09-2017

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientList", patientList);
		//map.put("unitList", unitList);
		//map.put("rankList", rankList);
		//map.put("relationList", relationList);
	//	map.put("doctorList", doctorList);
		map.put("deptName", deptName);
		map.put("doctorList", doctorList);
		//map.put("referredVisitIdList", referredVisitIdList); //commented unused code by Babita Dangwal on 21-09-2017
		map.put("sessionList", sessionList);
		
		
		
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> searchWaitingPatientList(Map mapForDS) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Patient> patientList = new ArrayList<Patient>();
		List<MasEmployee> doctorList = new ArrayList<MasEmployee>();


		String serviceNo = "";
		String hinNo = "";
		String employeeName = "";
		String serviceTypeName = "";
		String patientFName = "";
		String patientMName = "";
		String patientLName = "";
		Date currentDate = null;
		int deptId = 0; 
		int hospitalId = 0; 
		Session session = (Session) getSession();
		hospitalId = (Integer) mapForDS.get("hospitalId");
		if (mapForDS.get("deptId") != null) {
			deptId = (Integer) mapForDS.get("deptId");
		}
		if (mapForDS.get("serviceNo") != null) {
			serviceNo = (String) mapForDS.get("serviceNo");
		}
		if (mapForDS.get("hinNo") != null) {
			hinNo = (String) mapForDS.get("hinNo");
		}
		if (mapForDS.get("serviceTypeName") != null) {
			serviceTypeName = (String) mapForDS.get("serviceTypeName");
		}
		if (mapForDS.get("patientFName") != null) {
			patientFName = (String) mapForDS.get("patientFName");
		}
		if (mapForDS.get("patientMName") != null) {
			patientMName = (String) mapForDS.get("patientMName");
		}
		if (mapForDS.get("patientLName") != null) {
			patientLName = (String) mapForDS.get("patientLName");
		}
		if (mapForDS.get("currentDate") != null) {
			currentDate = (Date) mapForDS.get("currentDate");
		}
		SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
		Date vdate=new Date(sdf.format(currentDate));
		Criteria crit = session.createCriteria(Visit.class)
				.createAlias("Hin", "hin").add(
						Restrictions.eq("VisitDate", currentDate));
		if (hinNo.equals("")) {
			if (!serviceTypeName.equals("")) {
				crit = crit.createAlias("hin.ServiceType", "masService").add(
						Restrictions.eq("masService.ServiceTypeName",
								serviceTypeName));
			}
			if (!serviceNo.equals("")) {
				crit = crit.add(Restrictions.eq("hin.ServiceNo", serviceNo.trim()));
			}
			
			if (!patientFName.equals("")) {
				crit = crit.add(Restrictions.like("hin.PFirstName",patientFName.trim()).ignoreCase()); 
					}
			if (!patientMName.equals("")) {
				crit = crit.add(Restrictions.like("hin.PMiddleName",patientMName.trim()).ignoreCase()); 
			}
			if (!patientLName.equals("")) {
				crit = crit.add(Restrictions.like("hin.PLastName", patientLName.trim()).ignoreCase()); 
			}
		} else {
			crit = crit.add(Restrictions.eq("hin.HinNo", hinNo.trim()));
		}
		patientList = crit.list();
		
		String category = "Doctor";
		/*doctorList = session.createCriteria(MasEmployee.class).createAlias(
				"EmpCategory", "empCategory").createAlias("Department",
				"dept").add(
				Restrictions.eq("empCategory.EmpCategoryName", category))
				.add(Restrictions.eq("dept.Id", deptId)).list();
*/
		doctorList = session.createCriteria(MasEmployee.class).add(Restrictions.eq("Status", "y"))
		.createAlias("Hospital", "h").add(Restrictions.eq("h.Id", hospitalId)).list();
		map.put("doctorList", doctorList);
		map.put("patientList", patientList);

		return map;
	}

	
	@Override
	public Map<String, Object> doPatientRelease(Map<String, Object> dataMap) {
		
		Map<String,Object> map = new HashMap<String,Object>();
		Session	 session=(Session)getSession();
		Transaction tx=session.beginTransaction();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		List<Visit> patientList = new ArrayList<Visit>();
		
		boolean flag= false;
		
		int visitId=0;
		int hospitalId=0;
		int deptId =0;
		
		Criteria crt=null;
		
		visitId = (Integer)dataMap.get("visitId");
		hospitalId = (Integer)dataMap.get("hospitalId");
		deptId = (Integer)dataMap.get("deptId");
		
		/*Criteria cr = session.createCriteria(Visit.class)
				.add(Restrictions.eq("VisitStatus", "w").ignoreCase())
				.add(Restrictions.eq("VisitDate", new Date()))
				.createAlias("Department", "dept").add(Restrictions.eq("dept.Id", deptId))
				.createAlias("Hospital", "hospital").add(Restrictions.eq("hospital.Id", hospitalId));*/
		
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		
		Visit visit = new Visit();
		visit = (Visit)hbt.get(Visit.class, visitId);
		String currentTime= HMSUtil.currentTime();
		if(visit != null)
		{			
	    		    
	    	//visit.setOpVisitTime(currentTime);
	    	visit.setVisitTime(currentTime);
			hbt.update(visit);
			hbt.refresh(visit);
			tx.commit();
			flag= true;
		}
		
	/*	QueueManagment queue=new QueueManagment();
		crt=session.createCriteria(QueueManagment.class)
				.createAlias("Visit", "visit")
				.createAlias("Hospital", "hosp")
				.add(Restrictions.eq("hosp.Id", hospitalId))
				.add(Restrictions.eq("visit.Id", visitId));
		
		if(crt.list() !=null && crt.list().get(0) !=null){
			queue=(QueueManagment) crt.list().get(0);
			queue.setOpVisitTime(currentTime);
			hbt.update(queue);
			hbt.refresh(queue);
			tx.commit();
			flag= true;
		}*/
						
		map.put("flag", flag);
		return map;
	}
	
	@SuppressWarnings("unchecked")
	public Map<String, Object> getPatientDetails(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List<Visit> patientLastVisitList = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<OpdPatientDetails> opdDetailListForFollowUp = new ArrayList<OpdPatientDetails>();
		List<OpdPatientHistory> opdHistoryDetailsListForFollowUp = new ArrayList<OpdPatientHistory>();
		List<OpdOphthalmologyDetails> opdPDetailsListForEyeDeptFollowUp = new ArrayList<OpdOphthalmologyDetails>();
		List<PatientInvestigationHeader>patientInvestigationHeaderListForFollowUp = new ArrayList<PatientInvestigationHeader>();
		List<PatientPrescriptionHeader> patientPrescriptionHeaderList = new ArrayList<PatientPrescriptionHeader>();
		List<DischargeIcdCode> dischargeIcdCodeList = new ArrayList<DischargeIcdCode>();
		//List<Visit> currentDayVisit = new ArrayList<Visit>();
		List<OpdPatientDetails> admittedVisit = new ArrayList<OpdPatientDetails>();
		//List<Integer> visitIdList = new ArrayList<Integer>();
		//boolean patientAdmitted = false;
		List<MasItemClass> masItemClassList = new ArrayList<MasItemClass>();
		List<MasItemClass> masItemClassList1 = new ArrayList<MasItemClass>();
		
		List<OpdPatientDetails> opdPatientDetailsList = new ArrayList<OpdPatientDetails>();
		List<MasEmployeeDependent> med = null;
		OpdPatientDetails opdPatientDetails =null;
		List<MasBloodGroup> bloodGroupList = null;
		try {
		//rem
			opdPatientDetailsList = session.createCriteria(OpdPatientDetails.class)
					.createAlias("ReferralVisit", "ReferralVisit")
					.add(Restrictions.eq("ReferralVisit.Id", visitId)).list();
			//"visit",CriteriaSpecification.LEFT_JOIN)
			
			if(opdPatientDetailsList.size()>0)
			{
				opdPatientDetails = opdPatientDetailsList.get(0);
			}
        //end			
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();
			
			//checking patient is admitted
			int hinId =0;
			if(patientDataList.size() > 0)
			{
			  hinId = patientDataList.get(0).getHin().getId();
			  int employeeId = 0;
					  //if(patientDataList.get(0).getHin()!=null && !patientDataList.get(0).getHin().getRelation().getNewRelationName().equalsIgnoreCase("self"))
			  if(!patientDataList.get(0).getHin().getRelation().getNewRelationName().equalsIgnoreCase("self"))
					  {
						  employeeId = patientDataList.get(0).getHin().getEmployee().getId();
						  med = session.createCriteria(MasEmployeeDependent.class).add(Restrictions.eq("Employee.Id",employeeId ))
								  .add(Restrictions.eq("Status","y" ).ignoreCase())
								  .list(); 
					  }
			
			if(patientDataList.get(0).getDepartment().getDepartmentCode().equalsIgnoreCase(HMSUtil.getProperties("adt.properties", "departmentCodeForEye")))
			{
					opdPDetailsListForEyeDeptFollowUp = session.createCriteria(OpdOphthalmologyDetails.class).createAlias("Visit", "v")
					.createAlias("v.Hin", "hin").add(Restrictions.eq("hin.Id", hinId))
					.addOrder(Order.desc("id")).setMaxResults(1)
					.list();}
			
		/*	currentDayVisit = session.createCriteria(Visit.class).add(Restrictions.eq("VisitDate", new Date()))
					.add(Restrictions.ne("Id", visitId))
					.add(Restrictions.eq("Hin.Id", hinId)).list();
			
				if(currentDayVisit.size() > 0)
				{
					for(Visit visit : currentDayVisit)
					{
						visitIdList.add(visit.getId());
					}
					*/ //commented unused code(below query can give required result) by Babita Dangwal on 21-09-2017
					admittedVisit = session.createCriteria(OpdPatientDetails.class)
							.createAlias("Visit", "v").add(Restrictions.eq("v.VisitDate", new Date()))
									.add(Restrictions.eq("v.Hin.Id", hinId))
							  		.add(Restrictions.eq("AdmissionAdvised", "y"))
							      //  .add(Restrictions.in("Visit.Id", visitIdList))
							        .list();

					
				//}
			
		//if(patientDataList.size() > 0 && patientDataList.get(0).getReportingFor().equals("FollowUp")){
			//if(patientDataList.size() > 0){
				 String department =  patientDataList.get(0).getFollowUpDepartment();
				
				 patientLastVisitList = session.createCriteria(Visit.class).add(Restrictions.eq("Hin.Id", hinId))
				 						//	.add(Restrictions.or(Restrictions.eq("ReportingFor",department), Restrictions.eq("FollowUpDepartment", department)))
						 .add(Restrictions.eq("Department.Id",patientDataList.get(0).getDepartment().getId()))
				 							.add(Restrictions.eq("VisitStatus", "C")).add(Restrictions.ne("Id",visitId)).setMaxResults(1).addOrder(Order.desc("Id")).list();
			//fetch last visit of any Department
				 opdPatientDetailsList = session.createCriteria(OpdPatientDetails.class)
						 .createAlias("Visit", "v").add(Restrictions.eq("v.Hin.Id", hinId))
						 .add(Restrictions.eq("v.VisitStatus", "C"))
						 .setMaxResults(1).addOrder(Order.desc("id")).list();
				 
		
			//end	 
				 if(patientLastVisitList.size()>0){
				 int lastVisitId = patientLastVisitList.get(0).getId();
			

				 
				opdDetailListForFollowUp = session.createCriteria(OpdPatientDetails.class).createAlias("Visit", "visit")
					.add(Restrictions.eq("visit.Id", lastVisitId)).list();
			
		
				opdHistoryDetailsListForFollowUp = session.createCriteria(OpdPatientHistory.class).createAlias("OpdPatientDetails", "details")
						.createAlias("details.Visit", "visit").add(Restrictions.eq("visit.Id", lastVisitId)).list();
				if(patientDataList.get(0).getDepartment().getDepartmentCode().equals(HMSUtil.getProperties("adt.properties", "departmentCodeForPhychiatrist")) || patientDataList.get(0).getDepartment().getDepartmentCode().equals(HMSUtil.getProperties("adt.properties", "departmentCodeForSurgery")) || patientDataList.get(0).getDepartment().getDepartmentCode().equals(HMSUtil.getProperties("adt.properties", "departmentCodeForGM")) || patientDataList.get(0).getDepartment().getDepartmentCode().equals(HMSUtil.getProperties("adt.properties", "departmentCodeForDental")) || patientDataList.get(0).getDepartment().getDepartmentCode().equals(HMSUtil.getProperties("adt.properties", "departmentCodeForDermo")))
				{
				dischargeIcdCodeList = session.createCriteria(DischargeIcdCode.class).createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", lastVisitId)).list();
				}
				 if(department != null){
		
				patientInvestigationHeaderListForFollowUp = session.createCriteria(PatientInvestigationHeader.class).createAlias("Visit", "visit")
									.add(Restrictions.eq("visit.Id", lastVisitId)).list();
				patientPrescriptionHeaderList = session.createCriteria(PatientPrescriptionHeader.class).createAlias("Visit", "visit")
													.add(Restrictions.eq("visit.Id", lastVisitId)).list();
				
				
				}
			}
			String []ItemClassIdForTopInDropDown =  HMSUtil.getProperties("adt.properties","ItemClassIdForTopInDropDown").trim().split(",");
			masItemClassList= session.createCriteria(MasItemClass.class).
					add(Restrictions.eq("Status", "y").ignoreCase())
					.add(Restrictions.eq("Section.Id", 18))
					 .addOrder(Order.asc("ItemClassName")) .list(); 
			for(MasItemClass ms:masItemClassList){
			  for(int i=0;i <ItemClassIdForTopInDropDown.length;i++)
			  {
				  if(Integer.parseInt(ItemClassIdForTopInDropDown[i])==ms.getId())
					  masItemClassList1.add(ms);
			  }
			  if(masItemClassList1.size()==ItemClassIdForTopInDropDown.length)
				  break;
			}
			
			masItemClassList.removeAll(masItemClassList1);
			masItemClassList.addAll(0, masItemClassList1);	
			
			bloodGroupList = session.createCriteria(MasBloodGroup.class).add(
					Restrictions.eq("Status", "y")).list();
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		
		
		map.put("dischargeIcdCodeList", dischargeIcdCodeList);
		map.put("patientDataList", patientDataList);
		map.put("opdDetailListForFollowUp", opdDetailListForFollowUp);
		map.put("opdHistoryDetailsListForFollowUp", opdHistoryDetailsListForFollowUp);
		map.put("patientInvestigationHeaderListForFollowUp", patientInvestigationHeaderListForFollowUp);
		map.put("patientPrescriptionHeaderList", patientPrescriptionHeaderList);
		map.put("opdPatientDetails", opdPatientDetails);
		map.put("admittedVisit", admittedVisit);
		map.put("masItemClassList", masItemClassList);
		map.put("med", med);
		map.put("opdPDetailsListForEyeDeptFollowUp", opdPDetailsListForEyeDeptFollowUp);
		map.put("bloodGroupList",bloodGroupList);
		map.put("LastVisitPatientDetails",opdPatientDetailsList);
		
	
		
		return map;
	}
	public Map<String , Object> getOpdOphthalmology(int VisitId){
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<OpdOphthalmology> opdOphthalmologyList = null ;
		try{
		map = getPatientDetails(VisitId);
		opdOphthalmologyList = session.createCriteria(OpdOphthalmology.class).createAlias("Visit","v")
								.add(Restrictions.eq("v.Id", VisitId)).list();
		map.put("opdOphthalmologyList", opdOphthalmologyList);
		
		}catch(HibernateException e){
			e.printStackTrace();
		}
		return map;
		
	}
	public Map<String , Object> getOpdOphthalmologyFollowUp(int VisitId){
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<OpdOphFollowUp> opdOphFollowUpList = null ;
		try{
		map = getPatientDetails(VisitId);
		opdOphFollowUpList = session.createCriteria(OpdOphFollowUp.class).createAlias("Visit","v")
								.add(Restrictions.eq("v.Id", VisitId)).list();
		map.put("opdOphFollowUpList", opdOphFollowUpList);
		
		}catch(HibernateException e){
			e.printStackTrace();
		}
		return map;
		
	}

	public Map<String, Object> getPatientDetailsForPrescribtion(int visitNo,
			String HinNo) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List<PatientPrescriptionDetails> patientPreList = new ArrayList<PatientPrescriptionDetails>();
		List<PatientPrescriptionHeader> patientHeaList = new ArrayList<PatientPrescriptionHeader>();
		List<Patient> patientList = new ArrayList<Patient>();
		List<PatientInvestigationDetails> pInvList = new ArrayList<PatientInvestigationDetails>();
		Map<String, Object> map = new HashMap<String, Object>();

		try {

			// patientList=session.createQuery("select v from Visit as v where   v.VisitDate="+date
			// ).list();
			// v.VisitDate="+date ).list();
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("VisitNo", visitNo))
					.createAlias("Hin", "p").add(
							Restrictions.eq("p.HinNo", HinNo)).list();
			int visitId = 0;
			if (patientDataList.size() > 0) {
				visitId = (Integer) patientDataList.get(0).getId();
			}
			patientList = session.createCriteria(Patient.class).add(
					Restrictions.eq("HinNo", HinNo)).list();
			int hin_id = 0;
			if (patientList.size() > 0) {
				hin_id = (Integer) patientList.get(0).getId();
			}

			patientPreList = session.createCriteria(
					PatientPrescriptionDetails.class).createAlias(
					"Prescription", "p").add(
					Restrictions.eq("p.Visit.Id", visitId)).add(
					Restrictions.eq("p.Hin.Id", hin_id)).list();

			pInvList = session
					.createCriteria(PatientInvestigationDetails.class)
					.createAlias("InvestigationHeader", "i").add(
							Restrictions.eq("i.Visit.Id", visitId)).add(
							Restrictions.eq("i.Hin.Id", hin_id)).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		map.put("patientPreList", patientPreList);
		map.put("pInvList", pInvList);

		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getICDList(Map map) {
		List<MasIcd> itemList = new ArrayList<MasIcd>();
		Session session = (Session) getSession();
		try {
			String str ="%" +(String)map.get("autoHint") + "%";
			/*String query = "from MasIcd as icd where upper (icd.IcdName) like upper('" + str
					+ "')";*/
			/*
			 * Change HQL to Named HQL
			 * Code By Mukesh
			 * Date 15 Aug 2012
			 */
			String query = "from MasIcd as icd where upper (icd.IcdName) like upper(:str) order by icd.IcdName";
			Query q = session.createQuery(query);
			q.setParameter("str",str);
			/*q.setFirstResult(0);
			q.setMaxResults(10);*/
			itemList = q.list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getOPDDetails(Map mapForDS) {
		Session session = (Session) getSession();
		List<OpdTemplate> templateList = new ArrayList<OpdTemplate>();
		List<MasDepartment> deptList = new ArrayList<MasDepartment>();
		List<MasStoreItemConversion> itemConversionList = new ArrayList<MasStoreItemConversion>();
		List<MasStoreItemConversion> itemConversionList1 = new ArrayList<MasStoreItemConversion>();
		//List<MasTherapyType> therapyTypeList = new ArrayList<MasTherapyType>();
		//List<MasMedicalExaminationReportOnEntry> medicalList = new ArrayList<MasMedicalExaminationReportOnEntry>();
		//List<Visit> listOfPreviousVisit3 = new ArrayList<Visit>();
		//List<Visit> listOfPreviousVisit2 = new ArrayList<Visit>();
		//List<Visit> listOfPreviousVisit1 = new ArrayList<Visit>();
		//List<MasDisposal> disposalTypeList = null;
		//List<PatientFamilyHistory> patientFamilyHistoryList=new ArrayList<PatientFamilyHistory>(); 
		//List <OpdPatientDetails> opdPatientDetailsList =new ArrayList<OpdPatientDetails>();
		List<MasDepartment> wardDepartment = new ArrayList<MasDepartment>();
		//List<OpdPatientDetails> listOfOpd3 = new ArrayList<OpdPatientDetails>();
		//List<OpdPatientDetails> listOfOpd2 = new ArrayList<OpdPatientDetails>();
		//List<OpdPatientDetails> listOfOpd1 = new ArrayList<OpdPatientDetails>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();
		List<MasImpanneledHospital> masImpanneledHospitalList = new ArrayList<MasImpanneledHospital>();
		
		HibernateTemplate hbt = getHibernateTemplate();
		int deptId = (Integer) mapForDS.get("deptId");
		//int visitNo = (Integer) mapForDS.get("visitNo");
		int hinId = (Integer) mapForDS.get("hinId");
		int hospitalId = (Integer) mapForDS.get("hospitalId");
		int visitIdd = (Integer) mapForDS.get("visitId");
		int docId = (Integer) mapForDS.get("docId");
		try {
		/*	List<String> departmentTypeCode = new ArrayList<String>();
			departmentTypeCode.add("PHYSIO");
			departmentTypeCode.add("Dental1");
			departmentTypeCode.add("Medicare");
			departmentTypeCode.add("FWC");
			departmentTypeCode.add("REC");
			departmentTypeCode.add("MHH");*/
			
			String currentYearVisitCountSql="select count(*) from dbo.visit where  YEAR(visit_date) =Year(SYSDATETIME ()) and hin_id=?";
			
			SQLQuery sqlQry = session.createSQLQuery(currentYearVisitCountSql);
			if(hinId!=0){
				sqlQry.setParameter(0, hinId);
			}
		
			String wardDepartmentTypeCode = null;
			String departmentTypeCode = null;

			Properties properties = new Properties();
			URL resourcePath = Thread.currentThread().getContextClassLoader()
					.getResource("adt.properties");

			try {
				properties.load(resourcePath.openStream());
				wardDepartmentTypeCode = properties.getProperty("departmentTypeCodeForWard");
				departmentTypeCode = properties.getProperty("departmentTypeCodeForOpd");
				
			} catch (Exception e) {
				e.printStackTrace();
			}
			
			String deptTypeCode[] = {departmentTypeCode,wardDepartmentTypeCode};
			
			/*wardDepartment=session.createCriteria(MasInstituteDepartment.class).add(Restrictions.eq("Institute.Id", hospitalId))
					.createAlias("Department","dep")
					.add(Restrictions.eq("dep.DepartmentType.Id",depWard)).add(Restrictions.or(Restrictions.eq("dep.PaywardCheck","n").ignoreCase(), Restrictions.isNull("dep.PaywardCheck")))
					.setProjection(Projections.projectionList().add(Projections.groupProperty("Department")))
					.list();*/
			
			wardDepartment=session.createCriteria(MasDepartment.class)
					.add(Restrictions.eq("Status","y").ignoreCase())
					.createAlias("DepartmentType", "dt")
					.add(Restrictions.eq("dt.DepartmentTypeCode",wardDepartmentTypeCode))
					.addOrder(Order.asc("DepartmentName"))
					.list();
			
			List<Object> currentYearVisitCountList = new ArrayList<Object>();
			//currentYearVisitCountList=session.createSQLQuery(currentYearVisitCountSql).list();
			currentYearVisitCountList = sqlQry.list();
			int visitCount=0;
			if(currentYearVisitCountList.size()>0){
				visitCount=Integer.parseInt(""+currentYearVisitCountList.get(0));
			}
			map.put("visitCount", visitCount);
		
			/*disposalTypeList = 
				 session.createCriteria(MasDisposal.class).add(
							Restrictions.eq("Status", "y"))
					.addOrder(Order.asc("DisposalName")).list();*/  //commented unused code by Babita Dangwal on 21-09-2017
				//hbt.find("from MasDisposal mdt where mdt.Status='y' order by mdt.DisposalName asc");
			
			deptList = session.createCriteria(MasDepartment.class).add(
					 Restrictions.eq("Status", "y"))
					.createAlias("DepartmentType", "dt")
					.add(Restrictions.in("dt.DepartmentTypeCode", deptTypeCode))
				    .addOrder(Order.asc("DepartmentName")).list();
				


		
			templateList = session.createCriteria(OpdTemplate.class)
					.createAlias("Department", "dept").add(Restrictions.eq("dept.Id", deptId))
					.createAlias("Hospital", "hosp").add(Restrictions.eq("hosp.Id", hospitalId))
					.createAlias("Doctor", "doctor").add(Restrictions.eq("doctor.Id", docId))
					.add(Restrictions.eq("Status", "y")).list();
			frequencyList = session.createCriteria(MasFrequency.class).add(
					Restrictions.eq("Status", "y")).addOrder(Order.asc("OrderNo")).list();
			//therapyTypeList = session.createCriteria(MasTherapyType.class).add(
				//	Restrictions.eq("Status", "y")).list();
			
			/*medicalList = session.createCriteria(MasMedicalExaminationReportOnEntry.class).add(
					Restrictions.eq("Visit.Id",visitIdd )).list();*/ //commented unused code by Babita Dangwal on 21-09-2017
			
		/*	patientFamilyHistoryList= session.createCriteria(PatientFamilyHistory.class).add(
					Restrictions.eq("Status", "y")).addOrder(Order.asc("PatientHistoryName")).list();*/ //commented unused code by Babita Dangwal on 21-09-2017
			
					itemConversionList = session.createCriteria(MasStoreItemConversion.class).add(Restrictions.eq("Status", "y")).addOrder(Order.asc("ItemUnitName")).list();
					
					String []ItemConversionIdForTopInDropDown = properties.getProperty("ItemConversionIdForTopInDropDown").trim().split(",");
					for(MasStoreItemConversion IC:itemConversionList){
						  for(int i=0;i <ItemConversionIdForTopInDropDown.length;i++)
						  {
							  if(Integer.parseInt(ItemConversionIdForTopInDropDown[i])==IC.getId())
								  itemConversionList1.add(IC);
						  }
						  if(itemConversionList1.size()==ItemConversionIdForTopInDropDown.length)
							  break;
						}
					itemConversionList.removeAll(itemConversionList1);
					itemConversionList.addAll(0, itemConversionList1);

			masImpanneledHospitalList = session.createCriteria(MasImpanneledHospital.class)
							.add(Restrictions.eq("Status", "Y").ignoreCase())
							.list();
			
			/*List<MasAnesthesia> anesthesiaList = new ArrayList<MasAnesthesia>();
			anesthesiaList = session.createCriteria(MasAnesthesia.class).add(
					Restrictions.eq("Status", "y")).list();
			map.put("anesthesiaList", anesthesiaList);*/ //commented unused code by Babita Dangwal on 21-09-2017
			
			
			
					
			/*		opdPatientDetailsList=session.createCriteria(OpdPatientDetails.class)
					.createAlias("Visit", "v")
					.add(Restrictions.eq("v.VisitStatus","C").ignoreCase())
					.add(Restrictions.eq("v.Hin.Id",hinId))
					.addOrder(Order.desc("v.Id"))
					.setMaxResults(1)
					//.add(Restrictions.eq("dt.DepartmentTypeCode",wardDepartmentTypeCode))
					//.addOrder(Order.asc("DepartmentName"))
					.list();*/
			
			
			/*visitNo = visitNo - 1;
			int j = 1;
			for (int i = visitNo; i > 0; i--) {

				if (j == 1) {
					listOfPreviousVisit3 = session.createCriteria(Visit.class)
							.createAlias("Hin", "hin").add(
									Restrictions.eq("hin.Id", hinId)).add(
									Restrictions.eq("VisitNo", visitNo)).list();
					Visit visit = new Visit();
					int visitId = 0;
					if (listOfPreviousVisit3 != null
							&& listOfPreviousVisit3.size() > 0) {
						visit = (Visit) listOfPreviousVisit3.get(0);
						visitId = visit.getId();
					}
					//System.out.println("j:::" + j + "::visitNo::" + visitNo+ "::visitId::" + visitId);
					listOfOpd3 = (List<OpdPatientDetails>) session
							.createCriteria(OpdPatientDetails.class)
							.createAlias("Visit", "visit").add(
									Restrictions.eq("visit.Id", visitId))
							.list();
					visitNo = visitNo - 1;
					if (listOfOpd3.size() > 0) {
						map.put("listOfOpd3", listOfOpd3);
					}
				}
				if (j == 2) {
					listOfPreviousVisit2 = session.createCriteria(Visit.class)
							.createAlias("Hin", "hin").add(
									Restrictions.eq("hin.Id", hinId)).add(
									Restrictions.eq("VisitNo", visitNo)).list();
					Visit visit = new Visit();
					int visitId = 0;
					if (listOfPreviousVisit2 != null
							&& listOfPreviousVisit2.size() > 0) {
						visit = (Visit) listOfPreviousVisit2.get(0);
						visitId = visit.getId();
					}
					//System.out.println("j:::" + j + "::visitNo::" + visitNo+ "::visitId::" + visitId);
					listOfOpd2 = (List<OpdPatientDetails>) session
							.createCriteria(OpdPatientDetails.class)
							.createAlias("Visit", "visit").add(
									Restrictions.eq("visit.Id", visitId))
							.list();
					visitNo = visitNo - 1;
					if (listOfOpd2.size() > 0) {
						map.put("listOfOpd2", listOfOpd2);
					}
				}
				if (j == 3) {
					listOfPreviousVisit1 = session.createCriteria(Visit.class)
							.createAlias("Hin", "hin").add(
									Restrictions.eq("hin.Id", hinId)).add(
									Restrictions.eq("VisitNo", visitNo)).list();
					Visit visit = new Visit();
					int visitId = 0;
					if (listOfPreviousVisit1 != null
							&& listOfPreviousVisit1.size() > 0) {
						visit = (Visit) listOfPreviousVisit1.get(0);
						visitId = visit.getId();
					}
					//System.out.println("j:::" + j + "::visitNo::" + visitNo+ "::visitId::" + visitId);
					listOfOpd1 = (List<OpdPatientDetails>) session
							.createCriteria(OpdPatientDetails.class)
							.createAlias("Visit", "visit").add(
									Restrictions.eq("visit.Id", visitId))
							.list();
					visitNo = visitNo - 1;
					if (listOfOpd1.size() > 0) {
						map.put("listOfOpd1", listOfOpd1);
					}
					break;
				}

				j++;
			}*/

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		
		map.put("masImpanneledHospitalList", masImpanneledHospitalList);
		//map.put("medicalList", medicalList); //commented unused code by Babita Dangwal on 21-09-2017
		map.put("deptList", deptList);
		map.put("templateList", templateList); 
		map.put("frequencyList", frequencyList);	
		map.put("itemConversionList", itemConversionList);
		//map.put("therapyTypeList", therapyTypeList);
		//map.put("wardDepartment", disposalTypeList);
		//map.put("patientFamilyHistoryList", patientFamilyHistoryList);
		map.put("wardDepartment", wardDepartment);
		//map.put("opdPatientDetailsList", opdPatientDetailsList); //commented unused code by Babita Dangwal on 21-09-2017
		
		return map;

	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getOPDDetailsForOpdUpdate(Map mapForDS) {
		Session session = (Session) getSession();
		List<OpdTemplate> templateList = new ArrayList<OpdTemplate>();
		List<MasDepartment> deptList = new ArrayList<MasDepartment>();
		//List<Visit> listOfPreviousVisit3 = new ArrayList<Visit>();
		//List<Visit> listOfPreviousVisit2 = new ArrayList<Visit>();
		//List<Visit> listOfPreviousVisit1 = new ArrayList<Visit>();

		//List<Visit> listOfOpd3 = new ArrayList<Visit>();
		//List<Visit> listOfOpd2 = new ArrayList<Visit>();
		//List<Visit> listOfOpd1 = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();
		
		map = getOPDDetails(mapForDS);
		
		List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();
		int deptId = (Integer) mapForDS.get("deptId");
		int visitId1 = (Integer) mapForDS.get("visitNo");
		int visitNo = 1;
		int hinId = (Integer) mapForDS.get("hinId");
		try {
			List<String> departmentTypeCode = new ArrayList<String>();
			

			deptList = session.createCriteria(MasDepartment.class).createAlias(
					"DepartmentType", "deptType").list();
			templateList = session.createCriteria(OpdTemplate.class)
					.createAlias("Department", "dept").add(
							Restrictions.eq("dept.Id", deptId)).list();
			frequencyList = session.createCriteria(MasFrequency.class).addOrder(Order.asc("OrderNo")).list();
			/*List<Visit> visitList = new ArrayList<Visit>();
			visitList = session.createCriteria(Visit.class).createAlias("Hin",
					"hin").add(Restrictions.eq("hin.Id", hinId)).add(
					Restrictions.eq("VisitNo", visitId1)).list();
            if(visitList!=null && visitList.size()>0)
            {
			visitNo = visitList.get(0).getVisitNo();
			int j = 1;
			for (int i = visitNo; i > 0; i--) {

				if (j == 1) {
					listOfPreviousVisit3 = session.createCriteria(Visit.class)
							.createAlias("Hin", "hin").add(
									Restrictions.eq("hin.Id", hinId)).add(
									Restrictions.eq("VisitNo", visitNo)).list();
					//System.out.println("listOfPreviousVisit3 "+ listOfPreviousVisit3.size());
					Visit visit = new Visit();
					int visitId = 0;
					if (listOfPreviousVisit3 != null
							&& listOfPreviousVisit3.size() > 0) {
						visit = (Visit) listOfPreviousVisit3.get(0);
						visitId = visit.getId();
					}

					listOfOpd3 = session
							.createCriteria(OpdPatientDetails.class)
							.createAlias("Visit", "visit").add(
									Restrictions.eq("visit.Id", visitId))
							.list();
					//System.out.println("listOfOpd3 " + listOfOpd3.size());
					visitNo = visitNo - 1;
					if (listOfOpd3.size() > 0) {
						map.put("listOfOpd3", listOfOpd3);
					}
				}
				if (j == 2) {
					listOfPreviousVisit2 = session.createCriteria(Visit.class)
							.createAlias("Hin", "hin").add(
									Restrictions.eq("hin.Id", hinId)).add(
									Restrictions.eq("VisitNo", visitNo)).list();
					Visit visit = new Visit();
					int visitId = 0;
					if (listOfPreviousVisit2 != null
							&& listOfPreviousVisit2.size() > 0) {
						visit = (Visit) listOfPreviousVisit2.get(0);
						visitId = visit.getId();
					}
					listOfOpd2 = session
							.createCriteria(OpdPatientDetails.class)
							.createAlias("Visit", "visit").add(
									Restrictions.eq("visit.Id", visitId))
							.list();
					visitNo = visitNo - 1;
					if (listOfOpd2.size() > 0) {
						map.put("listOfOpd2", listOfOpd2);
					}
				}
				if (j == 3) {
					listOfPreviousVisit1 = session.createCriteria(Visit.class)
							.createAlias("Hin", "hin").add(
									Restrictions.eq("hin.Id", hinId)).add(
									Restrictions.eq("VisitNo", visitNo)).list();
					Visit visit = new Visit();
					int visitId = 0;
					if (listOfPreviousVisit1 != null
							&& listOfPreviousVisit1.size() > 0) {
						visit = (Visit) listOfPreviousVisit1.get(0);
						visitId = visit.getId();
					}
					listOfOpd1 = session
							.createCriteria(OpdPatientDetails.class)
							.createAlias("Visit", "visit").add(
									Restrictions.eq("visit.Id", visitId))
							.list();
					visitNo = visitNo - 1;
					if (listOfOpd1.size() > 0) {
						map.put("listOfOpd1", listOfOpd1);
					}
					break;
				}
				j++;
			}
            }*/
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		map.put("deptList", deptList);
		map.put("templateList", templateList);
		map.put("frequencyList", frequencyList);
		return map;

	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> showOPDTreatmentRecords(Map<String, Object> mapForDS) {
		Session session = (Session) getSession();
		List<OpdTemplateTreatment> treatmentTemplateList = new ArrayList<OpdTemplateTreatment>();
		List<MasStoreItemConversion> itemConversionList = new ArrayList<MasStoreItemConversion>();	
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();
		List<Integer> itemIdList = new ArrayList<Integer>();
		List<Object[]> stockList = new ArrayList<Object[]>();

		List<Integer> currentPrescriptionIdList = new ArrayList();
		int hospitalId = (Integer)mapForDS.get("hospitalId");
		//int hinId = (Integer)mapForDS.get("hinId");
		int templateId = (Integer)mapForDS.get("templateId");
		try {

			// patientList=session.createQuery("select v from Visit as v where
			// v.VisitDate="+date ).list();
			treatmentTemplateList = session.createCriteria(
					OpdTemplateTreatment.class).createAlias("Template","template")
					.createAlias("Item", "item")
					.add(Restrictions.eq("item.Status", "y").ignoreCase())
					.add(Restrictions.eq("template.Id", templateId))
					.list();
			Date expiryDate = HMSUtil.getExpiryDateYYYYMMDD();
			int	phrDeptID = Integer.parseInt(HMSUtil.getProperties("adt.properties","departmentIdForPharmacy"));
			
			frequencyList = session.createCriteria(MasFrequency.class).add(
					Restrictions.eq("Status", "y")).addOrder(Order.asc("OrderNo")).list();
		
			mapForDS.put("hospitalId",hospitalId);
			mapForDS.put("repeatPendingPres", "y");
			map = getCurrentPrescriptionList(mapForDS);
			if(map.get("currentPrescriptionIdList")!=null)
				currentPrescriptionIdList = (List<Integer>) map.get("currentPrescriptionIdList");
			
			if(treatmentTemplateList.size() > 0){
				for(OpdTemplateTreatment treatment : treatmentTemplateList){
					itemIdList.add(treatment.getItem().getId());
				}
				
				/*Integer[] deptIds = new Integer[2]; 
				deptIds[0] = 35;
				deptIds[1] = 24;*/
				stockList = session.createCriteria(StoreItemBatchStock.class).add(Restrictions.in("Item.Id", itemIdList)).add(Restrictions.eq("Hospital.Id", hospitalId)).add(Restrictions.eq("Department.Id",phrDeptID )).add(Restrictions.gt("ExpiryDate", expiryDate))
				.setProjection(Projections.projectionList().add(Projections.sum("ClosingStock")).add(Projections.property("Item.Id")).add(Projections.groupProperty("Item.Id"))).list();
			
				itemConversionList = session.createCriteria(MasStoreItemConversion.class).add(Restrictions.eq("Status", "y")).addOrder(Order.asc("ItemUnitName")).list();
				
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("treatmentTemplateList", treatmentTemplateList);
		map.put("frequencyList", frequencyList);
		map.put("stockList", stockList);
		map.put("currentPrescriptionIdList", currentPrescriptionIdList);
		map.put("itemConversionList", itemConversionList);
		
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getItemListForAutoComplete(Map mapForDS) {
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreItem> itemList1 = new ArrayList<MasStoreItem>();
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		try {
			int hospitalId =(Integer)mapForDS.get("hospitalId");
			int deptId =(Integer)mapForDS.get("deptId");
			String screen =(String)mapForDS.get("screen");
			String str =  "%" + mapForDS.get("autoHint") + "%";
			int DrugSectionId =0;
		
			//String query = "from MasStoreItem as mst where upper(mst.Nomenclature) like upper('"
					//+ str + "')";
			/*itemList=getHibernateTemplate().find("from MasStoreItem as item where upper(item.Nomenclature) like upper('"+str+"') and item.Status='y'  and item.ItemType.Id='2' and item.Hospital.Id='"+hospitalId+"'");
			itemList1=getHibernateTemplate().find("from MasStoreItem as item where upper(item.Nomenclature) like upper('"+str+"') and item.Status='y' and item.ItemType.Id='1'");
			itemList.addAll(itemList1);
			map.put("itemList", itemList);
			*/
			
			/*
			 * Code By Mukesh
			 * Named Query
			 * Date 15 Aug 2012
			 */
/*			Query itemQry = session.createQuery("from MasStoreItem as item where upper(item.Nomenclature) like upper(:str) and item.Status='y'  and item.ItemType.Id='2' and item.Hospital.Id='"+hospitalId+"' and TypeOfItem='E' ");
			
			itemQry.setString("str",str);
			//itemList = itemQry.list();
			
			Query item1Qry = session.createQuery("from MasStoreItem as item where upper(item.Nomenclature) like upper(:str) and item.Status='y' and item.ItemType.Id='1' and TypeOfItem='E' ");
			item1Qry.setString("str",str);
			itemList1 = item1Qry.list();
			
			itemList.addAll(itemList1);
			map.put("itemList", itemList);
			//Query q = session.createQuery(query);
			//q.setFirstResult(0);
			//q.setMaxResults(10);
			//itemList = q.list();
*/			
			
		
			Properties properties = new Properties();
			URL resourcePath = Thread.currentThread()
					 .getContextClassLoader()
					 .getResource("adt.properties");
			
			try {
				properties.load(resourcePath.openStream());
				DrugSectionId = Integer.parseInt(properties.getProperty("SectionIdForDrugs"));
				
			} catch (Exception e) {
				e.printStackTrace();
			}
			String matClassificationCode = HMSUtil.getProperties("adt.properties", "ItemClassificationCodeMAT");
			
			Criteria cr = session.createCriteria(MasStoreItem.class)
					  .createAlias("ItemClassification", "ic").add(Restrictions.eq("ic.Classification", matClassificationCode))
					   .add(Restrictions.eq("Section.Id", DrugSectionId))
					   .add(Restrictions.eq("Status", "y"))
					   .add(Restrictions.like("Nomenclature", str))					   
					   .addOrder(Order.asc("Nomenclature"));													
					
			
			if(screen.equals("ward"))
			{
				cr = cr.add(Restrictions.or(Restrictions.eq("PrescribedFrom", "o").ignoreCase(),Restrictions.eq("PrescribedFrom", "h").ignoreCase()));
			}
			else
			{
				cr = cr.add(Restrictions.eq("PrescribedFrom", "o").ignoreCase());
			}
			itemList =cr.list();
	/*		List<Integer> ItemIdlist = new ArrayList<Integer>();
			ItemIdlist.add(0);
			List<StoreItemBatchStock> batchStoreList = Collections.emptyList();
			
			for(MasStoreItem msi: itemList)
			{
				ItemIdlist.add(msi.getId());
			}
			
			batchStoreList = session.createCriteria(StoreItemBatchStock.class)
					         .add(Restrictions.in("Item.Id", ItemIdlist)).list();
			Date expiryDate = HMSUtil.getExpiryDateYYYYMMDD();
			System.out.println(expiryDate);
			for(MasStoreItem msi :itemList)
			{
				for( StoreItemBatchStock batchStore:batchStoreList){
					if(msi.getId() == batchStore.getItem().getId())
					{
						System.out.println(batchStore.getExpiryDate() +" = " +expiryDate.compareTo(batchStore.getExpiryDate()));
						if(expiryDate.compareTo(batchStore.getExpiryDate()) >0)
							itemList.remove(msi.getId());
						
						break;
					}
				}
			}
			*/
			map.put("itemList", itemList);
			
		} catch (Exception e) {

			e.printStackTrace();
		}
		return map;
	}

	
	
	
	@SuppressWarnings("unchecked")
	public int getItemIdFromPVMS(String nomenclature,String pvmsNo,int hospitalId) {
		List<MasStoreItem> itemIdList = new ArrayList<MasStoreItem>();
		List<MasStoreItem> itemIdList1 = new ArrayList<MasStoreItem>();
		Session session = (Session) getSession();
		int itemId = 0;
		try {
			itemIdList = session.createCriteria(MasStoreItem.class)
			//.add(Restrictions.eq("PvmsNo", pvmsNo))
			.add(Restrictions.eq("ItemType.Id", 2)).add(Restrictions.eq("Status", "y"))
							.add(Restrictions.eq("Nomenclature", nomenclature)).add(Restrictions.eq("Hospital.Id", hospitalId))
								.list();
			itemIdList1 = session.createCriteria(MasStoreItem.class)
			//.add(Restrictions.eq("PvmsNo", pvmsNo))
			.add(Restrictions.eq("ItemType.Id", 1))
					.add(Restrictions.eq("Nomenclature", nomenclature)).add(Restrictions.eq("Status", "y"))
								.list();
			itemIdList.addAll(itemIdList1);
			
			MasStoreItem masStoreItem = itemIdList.get(0);
			itemId = masStoreItem.getId();
		} catch (Exception e) {

			e.printStackTrace();
		}

		return itemId;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> showOPDInvestigationRecords(int investigationTemplateId) {
		Session session = (Session) getSession();
		List<OpdTemplateInvestigation> investigationTemplateList = new ArrayList<OpdTemplateInvestigation>();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			// patientList=session.createQuery("select v from Visit as v where
			// v.VisitDate="+date ).list();
			investigationTemplateList = session.createCriteria(
					OpdTemplateInvestigation.class).createAlias("Template","template")
					.createAlias("MasChargeCode", "mcc")
					.add(Restrictions.eq("template.Id", investigationTemplateId))
					.add(Restrictions.eq("mcc.Status", "y").ignoreCase())
					.list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("investigationTemplateList", investigationTemplateList);
		return map;
	}

	public Map<String, Object> showOPDTemplateRecords(
			Map<String, Object> mapForDS) {
		Session session = (Session) getSession();
		List<OpdTemplateInvestigation> investigationTemplateList = new ArrayList<OpdTemplateInvestigation>();
		List<Integer> toShowIdList = new ArrayList<Integer>();

		Map<String, Object> map = new HashMap<String, Object>();
		if (mapForDS.get("toShowIdList") != null) {
			toShowIdList = (List) mapForDS.get("toShowIdList");
		}
		for (Integer i : toShowIdList) {
			//System.out.println("id :" + i);
		}
		try {
			if (toShowIdList.size() > 0) {
				investigationTemplateList = session.createCriteria(
						OpdTemplateInvestigation.class)
						// .createAlias("Template","template")
						.add(Restrictions.in("Template.Id", toShowIdList))
						.list();
			}

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("investigationTemplateList", investigationTemplateList);

		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getInvestigationListForAutoComplete(Map mapForDS) {
		List<MasChargeCode> chargeList = new ArrayList<MasChargeCode>();
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		try {
			// int deptId=(Integer)mapForDS.get("deptId");

			String str = "%" + mapForDS.get("autoHint") + "%";
			//String chargeType = "DIAG";
			String labradiologyCheck=(String)mapForDS.get("labradiologyCheck");
			//chargeList=getHibernateTemplate().find("select mcc from jkt.hms.masters.business.DgMasInvestigation as dmi join dmi.ChargeCode as mcc join mcc.ChargeType as ct where ct.ChargeTypeCode='"+chargeType+"' and  upper(mcc.ChargeCodeName) like upper('"+str+"') ");
			//String query = "from MasIcd as icd where upper (icd.IcdName) like upper(:str)";
			/*String query = "select mcc from jkt.hms.masters.business.DgMasInvestigation as dmi join dmi.ChargeCode as mcc join mcc.ChargeType as ct where ct.ChargeTypeCode='"+chargeType+"' and  upper(mcc.ChargeCodeName) like upper(:str) ";
			Query q = session.createQuery(query);
			q.setParameter("str",str);
			*/
			Criteria crit = session						
					.createCriteria(DgMasInvestigation.class)
					.createAlias("ChargeCode", "chargeCode")
					.createAlias("chargeCode.Department", "dept")
					.add(Restrictions.like("chargeCode.ChargeCodeName", str).ignoreCase())
					.add(Restrictions.eq("Status", "y").ignoreCase())
					.add(Restrictions.eq("chargeCode.Status", "y").ignoreCase());
					
			
			if(labradiologyCheck!=null &&  !labradiologyCheck.equalsIgnoreCase("") && labradiologyCheck.equalsIgnoreCase("Lab"))
			{
				crit.add(Restrictions.eq("dept.DepartmentCode", "Lab".toLowerCase()).ignoreCase());
			}
			else if(labradiologyCheck!=null &&  !labradiologyCheck.equalsIgnoreCase("") && labradiologyCheck.equalsIgnoreCase("Radio"))
			{
				crit.add(Restrictions.or(Restrictions.eq("dept.DepartmentCode", "Radio".toLowerCase()).ignoreCase(), Restrictions.eq("dept.DepartmentCode", "CT".toLowerCase()).ignoreCase()));
			}
			else if(labradiologyCheck!=null &&  !labradiologyCheck.equalsIgnoreCase(""))
			{
				Criterion rest1 = Restrictions.or(Restrictions.eq("dept.DepartmentCode", "Radio").ignoreCase(),
						Restrictions.eq("dept.DepartmentCode", "CT".toLowerCase()).ignoreCase());
				
				crit.add(Restrictions.or(rest1,Restrictions.eq("dept.DepartmentCode", "Lab".toLowerCase()).ignoreCase()));

			}
			crit.setProjection(Projections.projectionList().add(Projections.groupProperty("ChargeCode")));
			chargeList = crit.list();
	
		
	} catch (Exception e) {
		e.printStackTrace();
	}
	map.put("chargeList", chargeList);
	return map;
	}

	public Map<String, Object> getInvestigationListForAutoCompleteSurgery(
			Map mapForDS) {
		List<MasChargeCode> chargeList = new ArrayList<MasChargeCode>();
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		int deptId = 0;
		if (mapForDS.get("deptId") != null) {
			deptId = (Integer) mapForDS.get("deptId");
		}
		try {
			// int deptId=(Integer)mapForDS.get("deptId");

			String str = "%" + mapForDS.get("autoHint") + "%";
			// String chargeType = "DIAG";
			// changed
			List objectList = new ArrayList();
			objectList.add("Surg");
			objectList.add("Surg2");
			Criteria crit = session.createCriteria(MasChargeCode.class)
					.createAlias("ChargeType", "charge").add(
							Restrictions
									.in("charge.ChargeTypeCode", objectList))
					.add(Restrictions.like("ChargeCodeName", str));
			if (deptId != 0) {
				crit = crit.add(Restrictions.eq("Department.Id", deptId)).addOrder(Order.asc("ChargeCodeName"));
			}
			// crit.setFirstResult(0);
			// crit.setMaxResults(10);
			chargeList = crit.list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("chargeList", chargeList);
		return map;
	}

	public Map<String, Object> getSurListForAutoComplete(Map<String,Object> mapForDS) {
		List<MasChargeCode> chargeList = new ArrayList<MasChargeCode>();
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		try {
			// int deptId=(Integer)mapForDS.get("deptId");
			List objectList = new ArrayList();
			objectList.add("Surg");
			objectList.add("Surg2");
			String str = "%" + mapForDS.get("autoHint") + "%";
			String chargeType = "SUR";
			// changed
			// String chargeType= "SURG";
			Criteria crit = session.createCriteria(MasChargeCode.class)
					.createAlias("ChargeType", "charge").add(
							Restrictions
									.in("charge.ChargeTypeCode", objectList))
					.add(Restrictions.like("ChargeCodeName", str));

			crit.setFirstResult(0);
			crit.setMaxResults(10);
			chargeList = crit.list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("chargeList", chargeList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getChargeCodeValue(String chargeCodeName) {
		List<MasChargeCode> chargeCodeList = new ArrayList<MasChargeCode>();
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		try {
			chargeCodeList = session.createCriteria(MasChargeCode.class).add(
					Restrictions.eq("ChargeCodeName", chargeCodeName)).list();

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("chargeCodeList", chargeCodeList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public synchronized Map<String, Object> submitOPDPatientDetails(Map mapForDS) {
		Session session = (Session) getSession();
		boolean succesfullyAdded = false;
		Map<String, Object> returnMap = new HashMap<String, Object>();
		String orderSeqNo =null;
		List<Integer> itemIdList = (List<Integer>) mapForDS.get("itemIdList");
		List<Integer> classificationList = (List<Integer>) mapForDS.get("classificationList");
		List<Integer> frequencyList = (List) mapForDS.get("frequencyList");
		List<String> otherMedicineList = (List) mapForDS.get("otherMedicineList");
	//	List<String> nomenclatureList =  (List) mapForDS.get("nomenclatureList");
		List<Integer> itemConversionList = (List) mapForDS.get("itemConversionList");
		List<Integer> itemClassList = (List) mapForDS.get("itemClassList");
		List<String> itemDispensaryList = (List) mapForDS.get("itemDispensaryList");
		List<BigDecimal> uomQtyList =(List) mapForDS.get("uomQtyList");
		List<String> ctList = (List) mapForDS.get("ctList");
		//List<String> injCategoryList = (List) mapForDS.get("injCategoryList");
		List<String> dosageList = (List) mapForDS.get("dosageList");
		//List<String> typeLeftRightList = (List) mapForDS.get("typeLeftRightList");
		//List<String> instructionList = (List) mapForDS.get("instructionList");
		List<String> routeList = new ArrayList<String>();
		routeList= (List) mapForDS.get("routeList");
		List<Integer> totalList = (List) mapForDS.get("totalList");
		List<Integer> noOfDaysList = (List) mapForDS.get("noOfDaysList");
		List<String> remarksList = (List) mapForDS.get("remarksList");
		List<String> chargeCodeIdList = (List) mapForDS.get("chargeCodeIdList");
		List<String> investigationDateList = (List) mapForDS.get("investigationDate");
		
		String currentDepartmentCode =null;
		Box box  = (Box) mapForDS.get("box");
	
	//	List<Integer> quantityList = (List) mapForDS.get("quantityList");
		//List<String> referToMhList = new ArrayList<String>();
		/*if((List)mapForDS.get("referToMhList") != null){
			referToMhList = (List)mapForDS.get("referToMhList");
		}*/
		//List<String> clinicalList = (List) mapForDS.get("clinicalList");
		String[] diagnosisIdAray = (String[]) mapForDS.get("diagnosisIdAray");
		int hinId = (Integer) mapForDS.get("hinId");
		int departmentId = (Integer) mapForDS.get("departmentId");
		int visitId = (Integer) mapForDS.get("visitId");
		int hospitalId = (Integer) mapForDS.get("hospitalId");
		String height = (String) mapForDS.get("height");
		String whr = (String) mapForDS.get("whr");
		String weight = (String) mapForDS.get("weight");
		String pulse = (String) mapForDS.get("pulse");
		String disposal = (String) mapForDS.get("disposal");
		String days = (String) mapForDS.get("days");
		String disposalDays = "";
		MasDepartment masdepartment = new MasDepartment();
		masdepartment.setId(departmentId);
		if(mapForDS.get("disposalDays") != null){
			disposalDays = (String) mapForDS.get("disposalDays");
		}
		
		boolean dublicateVisit = false;
		String departmentCodeForEye = HMSUtil.getProperties("adt.properties", "departmentCodeForEye");
		int size = 0; 
			List<OpdPatientDetails> opdPatientDetailsList=	session.createCriteria(OpdPatientDetails.class)
				.createAlias("Visit", "Visit")
				.add(Restrictions.eq("Visit.Id", visitId)).list();
		
		if( opdPatientDetailsList.size()>0 && opdPatientDetailsList.get(0).getVisit().getVisitStatus().equalsIgnoreCase("c"))
		{
			dublicateVisit = true;
		}
		//System.out.println("dublicateVisit"+dublicateVisit);
		returnMap.put("dublicateVisit", dublicateVisit);
		
		//if(size==0)
		if(!dublicateVisit)
	
		{
			String departmentCodeForPhychiatrist = HMSUtil.getProperties("adt.properties", "departmentCodeForPhychiatrist");
			String dentalDepartmentCode = HMSUtil.getProperties("adt.properties", "departmentCodeForDental");
			
		//String remaks = (String) mapForDS.get("remaks");
		int empId = (Integer) mapForDS.get("empId");
		int empIdCurrnet= (Integer) mapForDS.get("empIdCurrnet");
		int userId = (Integer) mapForDS.get("userId");
		Users user = new Users();
		user.setId(userId);
		
	
	//	departmentId=117;
		int deptId = (Integer) mapForDS.get("deptId");

		String bp = (String) mapForDS.get("bp");
		String userName = (String) mapForDS.get("userName");
		String temperature = (String) mapForDS.get("temperature");
		String afmsDescription = (String) mapForDS.get("afmsDescription");
		//String referredDept = (String) mapForDS.get("referredDept");
		String consultationTime = (String) mapForDS.get("consultationTime");
		String consultationDate = (String) mapForDS.get("consultationDate");
		Date consultationDateToInsert = HMSUtil
				.convertStringTypeDateToDateType(consultationDate);
		String initialDiagnosis = (String) mapForDS.get("initialDiagnosis");
		int systemDiagnosisId = 0;
		if(mapForDS.get("systemDiagnosisId") != null){
			systemDiagnosisId = (Integer)mapForDS.get("systemDiagnosisId");
		}

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentTimeWithoutSecond();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);

		String plan = (String) mapForDS.get("plan");
		String nextVisitDate = (String) mapForDS.get("nextVisitDate");
		String onExamination = (String) mapForDS.get("onExamination");

		String presentComplain = (String) mapForDS.get("presentComplain");
		String presentAdvice = (String) mapForDS.get("presentAdvice");//fayaz added
		String presentIllness = (String) mapForDS.get("presentIllness");
		String pastHistory = (String) mapForDS.get("pastHistory");
		String personalHistory = (String) mapForDS.get("personalHistory");
		String otherDetails = (String) mapForDS.get("otherDetails");
		String familyHistory  = (String) mapForDS.get("familyHistory");
	
		//String otherFamilyHistorty = "";
		/*if(mapForDS.get("otherFamilyHistorty")!= null){
			otherFamilyHistorty = (String)mapForDS.get("otherFamilyHistorty");
		}*/
		String allergies = "";
		if(mapForDS.get("allergies")!= null){
			allergies = (String)mapForDS.get("allergies");
		}
		String reviewAt = "";
		if(mapForDS.get("reviewAt")!= null){
			reviewAt = (String)mapForDS.get("reviewAt");
		}
		String referredDoctars = (String) mapForDS.get("referredDoctars");
		String riskFactor = (String) mapForDS.get("riskFactor");
		String bmi = (String) mapForDS.get("bmi");
		String idealWeight = (String) mapForDS.get("idealWeight");
		String pastMedicalHistory = (String) mapForDS.get("pastMedicalHistory");
		Date nextVisitDateToInsert = HMSUtil
				.convertStringTypeDateToDateType(nextVisitDate);
		//List<Integer> itemIdList = new ArrayList<Integer>();

		String clinicalNotes1 = (String) mapForDS.get("clinicalNotes1");
		String returnfromHospital = (String) mapForDS.get("returnfromHospital");
		String referedToMH = (String) mapForDS.get("referedToMH");
		String hospName = (String) mapForDS.get("hospName");
		String doa = (String) mapForDS.get("doa");
		String dod = (String) mapForDS.get("dod");
		String gpe_examination = (String) mapForDS.get("gpe_examination");
		String rr =  (String)mapForDS.get("rr");
		String systamicExam="";
		if(mapForDS.get("systamicExam")!=null){
			systamicExam = (String) mapForDS.get("systamicExam");
		}
		String mhString = "";
		if(mapForDS.get("mh")!=null){
			mhString = (String) mapForDS.get("mh");
		}
		String mhDepartment = "";
		if(mapForDS.get("mhDepartment")!=null){
			mhDepartment = (String) mapForDS.get("mhDepartment");
		}
		String mhReferredFor = "";
		if(mapForDS.get("mhReferredFor")!=null){
			mhReferredFor = (String) mapForDS.get("mhReferredFor");
		}
		String adviceOnDischarge = (String) mapForDS.get("adviceOnDischarge");
		String pastDiagnosis  = (String) mapForDS.get("pastDiagnosis");
		String pastdisposal = (String) mapForDS.get("pastdisposal");
		int threpytypeId = (Integer) mapForDS.get("threpytypeId");
		String DaysPhy = (String) mapForDS.get("DaysPhy");
		String DurationPhy = (String) mapForDS.get("DurationPhy");
		int priority = 0;
		if(mapForDS.get("priority") != null){
		 priority = (Integer)mapForDS.get("priority");
		}
		int physioRequisitionHeaderId = 0;
		Integer procedureHeaderId = 0;
		if(mapForDS.get("physioRequisitionHeaderId")!=null){
			physioRequisitionHeaderId = (Integer)mapForDS.get("physioRequisitionHeaderId");
		}
		if(mapForDS.get("procedureHeaderId")!=null){
			procedureHeaderId = (Integer)mapForDS.get("procedureHeaderId");
		}
		
		Transaction tx = null;

		try {
			tx = session.beginTransaction();
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			if(!box.getString("bloodGroupId").isEmpty() && (box.getInt("patientEmpId")!=0 || box.getInt("dependentId")!=0)){
				if(box.getInt("patientEmpId")!=0){
				MasEmployee updateEmploye = (MasEmployee)hbt.load(MasEmployee.class,box.getInt("patientEmpId"));
						updateEmploye.setBloodGroup(new MasBloodGroup(box.getInt("bloodGroupId")));hbt.update(updateEmploye);}
				else
				{
					MasEmployeeDependent updateDependent = (MasEmployeeDependent)hbt.load(MasEmployeeDependent.class,box.getInt("dependentId"));
					updateDependent.setBloodGroup(new MasBloodGroup(box.getInt("bloodGroupId")));hbt.update(updateDependent);}
			}
			
			OpdPatientDetails opdPatientDetails =null;
			if(opdPatientDetailsList.size() >0)
				 opdPatientDetails = (OpdPatientDetails) hbt.load(OpdPatientDetails.class, opdPatientDetailsList.get(0).getId()); 
			else
			 opdPatientDetails = new OpdPatientDetails();
			Visit visitsave = new Visit();
			visitsave=(Visit) hbt.load(Visit.class, visitId);
			visitsave.setWorkingDiagnosis(initialDiagnosis);
			visitsave.setDisposalName(disposal);
			visitsave.setDisposalDays(days);
			if(priority != 0){
				visitsave.setPriority(priority);
			}
			visitsave.setAddEditDate(consultationDateToInsert);
			visitsave.setPrescriptionCounter(1);
			hbt.update(visitsave);
			
			
			Visit visitObj = new Visit();
			visitObj.setId(visitId);
						//visitObj.setDiagnosisString(initialDiagnosis);
			//hbt.update(visitObj);
			opdPatientDetails.setVisit(visitObj);
			
			MasHospital masHospitalObj = new MasHospital();
			masHospitalObj.setId(hospitalId);
			Patient patientObj = new Patient();
			MasEmployee masEmployee = new MasEmployee();
			
			if (empId != 0) {
				 masEmployee = new MasEmployee();
				masEmployee.setId(empId);
				opdPatientDetails.setEmployee(masEmployee);
			}
			opdPatientDetails.setHospital(masHospitalObj);
			opdPatientDetails.setHeight(height);
			opdPatientDetails.setWhr(whr);
			opdPatientDetails.setDisposal(disposal);
			opdPatientDetails.setDays(days);
			opdPatientDetails.setDisposalDays(disposalDays);
			opdPatientDetails.setVweight(weight);
			opdPatientDetails.setPulse(pulse);
			opdPatientDetails.setBp(bp);
			if (temperature!=null) {
				opdPatientDetails.setTemperature(temperature);
			}
			
			if(!box.getString("pr").isEmpty())
			opdPatientDetails.setPr(box.getInt("pr"));
			opdPatientDetails.setBst(box.getString("bst"));
			opdPatientDetails.setSp(box.getString("sp"));
			opdPatientDetails.setBreast(box.getString("breast"));
			opdPatientDetails.setSpine(box.getString("spine"));
			
			opdPatientDetails.setAfmsDesc(afmsDescription);
			opdPatientDetails.setConsultationTime(consultationTime);
			opdPatientDetails.setConsultationDate(consultationDateToInsert);
			opdPatientDetails.setPlan(plan);
			opdPatientDetails.setInitialDiagnosis(initialDiagnosis);
			
			if(systemDiagnosisId != 0){
			MasSystemDiagnosis systemDiagnosis = new MasSystemDiagnosis();
			systemDiagnosis.setId(systemDiagnosisId);
			opdPatientDetails.setSystemDiagnosis(systemDiagnosis);
			}
			opdPatientDetails.setOpdDate(date);
			opdPatientDetails.setOpdTime(time);
			opdPatientDetails.setNextVisitDate(nextVisitDateToInsert);
			//opdPatientDetails.setReferredDept(referredDept);
			
			opdPatientDetails.setReferedDoctars(referredDoctars);
			opdPatientDetails.setOnExamination(onExamination);
			opdPatientDetails.setReturnfromHospital(returnfromHospital);
			opdPatientDetails.setMhRun(referedToMH);
			if(referedToMH.equals("y")){
				opdPatientDetails.setMh(mhString);
				opdPatientDetails.setMhDepartment(mhDepartment);
				opdPatientDetails.setMhReferredFor(mhReferredFor);
			}
			opdPatientDetails.setHospName(hospName);
			opdPatientDetails.setDoa(doa);
			opdPatientDetails.setDod(dod);
			opdPatientDetails.setGpe_examination(gpe_examination);
			opdPatientDetails.setRr(rr);
			opdPatientDetails.setSystamicExam(systamicExam);
			opdPatientDetails.setBmi(bmi);
			opdPatientDetails.setIdealWeight(idealWeight);
			opdPatientDetails.setAdviceOnDischarge(adviceOnDischarge);
			opdPatientDetails.setPastDiagnosis(pastDiagnosis);
			opdPatientDetails.setPastdisposal(pastdisposal);
			opdPatientDetails.setDaysPhy(DaysPhy);
			opdPatientDetails.setDurationPhy(DurationPhy);
			opdPatientDetails.setCaseNotes(clinicalNotes1);
			
			//temporary work to save other treatment
			//opdPatientDetails.setAdviceOnDischarge((String)mapForDS.get("otherTreatment"));
			
			
			/*if (mapForDS.get("admissionAdvised") != null) {
				String admissionAdvised = (String) mapForDS
						.get("admissionAdvised");
				opdPatientDetails.setAdmissionAdvised(admissionAdvised);
			}
			if (mapForDS.get("admissionWard") != null) {
	
				Integer admissionWard = (Integer) mapForDS.get("admissionWard");
				opdPatientDetails.setAdmissionWard(new MasDepartment(admissionWard));
		
				}
			if (mapForDS.get("admissionDate") != null) {
			
				Date admissionDate = (Date) mapForDS.get("admissionDate");
				opdPatientDetails.setAdmissionDate(admissionDate);
			}
			*/
		
			
			
			if(threpytypeId!=0)
			{
				
			MasTherapyType thy=new MasTherapyType();
			thy.setId(threpytypeId);
			opdPatientDetails.setTherapyType(thy);
			}
			//---------commented by anamika---------//
			/*String delimiter = ",";
			String[] temp;
			temp = referredDept.split(delimiter);
			Boolean flag=false;
			for(int i =0; i < temp.length ; i++)
			{
				if(temp[i].equalsIgnoreCase("87"))
				{
					flag=true;
					
				}
			}
			if(flag)
			{
				opdPatientDetails.setPhyStatus("w");
			}else
			{
				opdPatientDetails.setPhyStatus("c");
			}*/
		//	
			
		
			
			int referral = 0;
			int referredByDoctorId = 0;
			int referredDepartmentId = 0;
			int referredHospitalId = 0;
			int referralPriority=0;
				if ( mapForDS.get("referral") !=null && ((Integer) mapForDS.get("referral")) != 0) {
						if(mapForDS.get("referral")!=null)
						{
							try
							{
								referral = (Integer)mapForDS.get("referral");
							}
							catch(NumberFormatException e)
							{
								e.printStackTrace();
							}
						}
						
						if(referral==1)
						{
							
							 patientObj = (Patient)hbt.load(Patient.class, hinId);
							patientObj.setPaymentStatus(null);
								hbt.update(patientObj);
								
							
						

							String referTo = null;
							String patientAdvise = null;
							String referralNote = null;
						
							
							if (mapForDS.get("referTo") != null) {
								referTo = (String) mapForDS.get("referTo");
								opdPatientDetails.setReferredType(referTo);
								opdPatientDetails.setReferredStatus("y");
							}
					
							if (mapForDS.get("patientAdvise") != null) {
								patientAdvise = (String) mapForDS.get("patientAdvise");
								opdPatientDetails.setPatientAdvise(patientAdvise);
							}

							
							Date referralDate = (Date) mapForDS.get("referralDate");
							opdPatientDetails.setReferredDate(referralDate);
							
							if (mapForDS.get("referralNote") != null) {
								
								referralNote = (String) mapForDS.get("referralNote");
								
								opdPatientDetails.setReferralNotes(referralNote.trim());
							}
							

							/*if (((Integer) mapForDS.get("referdepartment")) != 0) {
								referredDepartmentId = (Integer) mapForDS.get("referdepartment");
								MasDepartment referedDepartment = new MasDepartment();
								referedDepartment.setId(referredDepartmentId);
								opdPatientDetails.setReferredDeptInt(referedDepartment);
								
								if (((Integer) mapForDS.get("refereddoctor")) != 0) {
									referredByDoctorId = (Integer) mapForDS.get("refereddoctor");
									MasEmployee emp = new MasEmployee();
									emp.setId(referredByDoctorId);
									opdPatientDetails.setReferredDoctorInt(emp);
								}
								
								
								
							}*/
							if(mapForDS.get("referralPriority") != null){
								referralPriority = (Integer)mapForDS.get("referralPriority");
								opdPatientDetails.setReferralPriority(referralPriority);
							}
							if (mapForDS.get("referImpannelhospital") != null) {
								referredHospitalId = (Integer) mapForDS.get("referImpannelhospital");
								MasImpanneledHospital msih = new MasImpanneledHospital();
								msih.setId(referredHospitalId);
								
								opdPatientDetails.setImpanneledHospital(msih);
								Date referalTillDate = (Date) mapForDS.get("referalTillDate");
								opdPatientDetails.setReferTillDate(referalTillDate);
								
								opdPatientDetails.setEmpanelStatus("WR");
							
								opdPatientDetails.setReferralTreatmentType((String)mapForDS.get("referral_treatment_type"));
								opdPatientDetails.setReferredFor((String)mapForDS.get("referredFor"));
								
								if(mapForDS.get("referdays")!=null)
								{
									opdPatientDetails.setReferralDays((Integer) mapForDS.get("referdays"));
								}
								
								
							}
							
				
							
							
						}
					
				}
				else if (mapForDS.get("admissionAdvised") != null) {
					
					
					String admissionAdvised = (String) mapForDS
							.get("admissionAdvised");
					opdPatientDetails.setAdmissionAdvised(admissionAdvised);
					
					if(admissionAdvised.equals("y"))
					{
						String dispoasal = HMSUtil.getValuesFromPropertiesFile("adt.properties", "disposalForAdmitted".trim());
						opdPatientDetails.setDisposal(dispoasal);
						if (mapForDS.get("admissionWard") != null) {
						Integer admissionWard = (Integer) mapForDS.get("admissionWard");
						opdPatientDetails.setAdmissionWard(new MasDepartment(admissionWard));
						}
						
						if (mapForDS.get("admissionDate") != null) {
							Date admissionDate = (Date) mapForDS.get("admissionDate");
							opdPatientDetails.setAdmissionDate(admissionDate);
						}
						opdPatientDetails.setAdmissionNotes(box.getString("admissionNote"));
					}
					
					//save Minior OT
					//else if(admissionAdvised.equals("n"))
					//{
						//int proscedurehiddenValue = (Integer)mapForDS.get("procCount");
						//String [] surgeryradioArray = (String[]) mapForDS.get("surgeryradioArray");
                         List<Integer> procedureId = (List<Integer>) mapForDS.get("procedureId");
                         List<String> surgeryType = (List<String>) mapForDS.get("surgeryType");
                     	OpdSurgeryHeader opdSurgeryHeader = null;
                     	List<OpdSurgeryDetail> opdSurgeryDetailList = null;
                    	int miniorotsize = 0;
                    
                         if(procedureId!=null && procedureId.size()>0)
							{
                        	 opdSurgeryDetailList =new ArrayList<OpdSurgeryDetail>(); 
								 
									 opdSurgeryHeader = new OpdSurgeryHeader();	
							
								//List<TransactionSequence> sequenceNoList = new ArrayList<TransactionSequence>();
								
								opdSurgeryHeader.setHin(new Patient(hinId));
								opdSurgeryHeader.setEmployee(new MasEmployee(empId));
								opdSurgeryHeader.setPrescribedDepartment(masdepartment);
								
								opdSurgeryHeader.setHospital(masHospitalObj);
								opdSurgeryHeader.setRequisitionDate(new Date());
								opdSurgeryHeader.setRequisitionTime(consultationTime);
								opdSurgeryHeader.setPatientStatus("Out Patient");/*doubt*/
								opdSurgeryHeader.setVisit(visitObj);
					   
							
								//opdSurgeryHeader.setPacStatus(box.getString("pacstatus"+l));
								//opdSurgeryHeader.setBookingStatus(box.getString("pacstatus"+l));
								/*opdSurgeryHeader.setBillingStatus("Pending");
								opdSurgeryHeader.setBillingStatus("n");*/
								//opdSurgeryHeader.setPacStatus("completed");
								//opdSurgeryHeader.setBookingStatus("completed");
								opdSurgeryHeader.setStatus("n");

								mapForDS.put("tableObjectName", "OpdSurgeryHeader");			
								mapForDS.put("isHospitalWise", "y");
								mapForDS.put("hospitalId", masHospitalObj.getId());
								mapForDS.put("isYearly", "n");			
								mapForDS.put("isMonthly", "n");
								mapForDS.put("isPrefix", "n");
								/*mapForDS.put("transactionPrefixProperty", "transactionPrefixForIPD");*/
								int orderNo = Integer.parseInt(HMSUtil.generateTransactionSequence(mapForDS, session, hbt));
					                
					                opdSurgeryHeader.setOrderNo(orderNo);
					              //  hbt.saveOrUpdate(opdSurgeryHeader);
					                hbt.save(opdSurgeryHeader);
							}
						for (int l = 0; l <procedureId.size(); l++) {
							//if( procedureId!=null &&  !procedureId[l].equals(""))
				
							
					     if(surgeryType.get(l).equalsIgnoreCase("major"))
					     {
								//List<OpdSurgeryHeader> opdSurgeryHeaderList= new ArrayList<OpdSurgeryHeader>();
					    	    
				                OpdSurgeryDetail opdSurgeryDetail = new OpdSurgeryDetail();
								MasChargeCode masChargeCode = new MasChargeCode();
								masChargeCode.setId(procedureId.get(l));
								opdSurgeryDetail.setChargeCode(masChargeCode);
								opdSurgeryDetail.setOpdSurgery(opdSurgeryHeader);
								opdSurgeryDetail.setAnestheisaPacStatus("n");
								opdSurgeryDetail.setSurgeryStatus("n");
								opdSurgeryDetail.setDepartment(masdepartment);
								//opdSurgeryDetail.setdepart
								//opdSurgeryDetail.setTentativeDate(HMSUtil.dateFormatterDDMMYYYY(box.getString("tentativeDate"+l)));
								//opdSurgeryDetail.setRemarks(box.getString("procRemarks"+i));
								hbt.save(opdSurgeryDetail);
								
						}		
					     else  if(surgeryType.get(l).equalsIgnoreCase("minor"))
					     {
					    	    OpdSurgeryDetail opdSurgeryDetail = new OpdSurgeryDetail();
								MasChargeCode masChargeCode = new MasChargeCode();
								masChargeCode.setId(procedureId.get(l));
								opdSurgeryDetail.setChargeCode(masChargeCode);
								opdSurgeryDetail.setOpdSurgery(opdSurgeryHeader);
								opdSurgeryDetail.setAnestheisaPacStatus("y");
								opdSurgeryDetail.setSurgeryStatus("n");
								opdSurgeryDetail.setDepartment(masdepartment);
								hbt.save(opdSurgeryDetail);
								opdSurgeryDetailList.add(opdSurgeryDetail);
					     }
								
						}
						
						//Minor Ot
					
                       if(opdSurgeryDetailList!=null && opdSurgeryDetailList.size() >0)
                       {
                    	   miniorotsize ++;
                    	   Date surgeryDate = HMSUtil
   						.convertStringTypeDateToDateType( box.getString("tentativeDate").toString());
                    	   String startTime = box.getString("startTime");
                    	   String endTime = box.getString("endTime");
                    		int deptIdOt =  box.getInt("otDepartment");
                    		
                    	    List<OtPreAnesthesiaDetail> otPreDtList = new ArrayList<OtPreAnesthesiaDetail>(); 
                    	    OtPreAnesthesiaHd  preHd = new OtPreAnesthesiaHd();
                    	    OtPreAnesthesiaDetail preDt = null;
                    	    
                    	    preHd.setVisit(visitObj);
                    	    preHd.setHin(new Patient(hinId));
                    	    preHd.setFitForSurgery("y");
                    	    preHd.setStatus("y");
                    	    preHd.setHospital(masHospitalObj);
                    	    hbt.save(preHd);
						for(OpdSurgeryDetail psd:opdSurgeryDetailList)
	                       {
								preDt = new OtPreAnesthesiaDetail();
								preDt.setAnesthesiaHd(preHd);
								preDt.setOpdSurgeryDetail(psd);
								preDt.setStatus("y");
							    hbt.save(preDt);
							    otPreDtList.add(preDt);
	                       }
						
						OtBooking otbooking = new OtBooking();
						OtBookingDt otbookingDt = null;
						otbooking.setSurgeryDate(surgeryDate);
						otbooking.setSurgeryEndTime(endTime);
						otbooking.setSurgeryStartTime(startTime);
						otbooking.setSurgeryStatus("n");
						otbooking.setDepartment(new MasDepartment(deptIdOt));
						otbooking.setOtPreAnesthesiaStatus("y");
						otbooking.setBookedBy(new MasEmployee(empId));
						otbooking.setHin(new Patient(hinId));
						MasOt masot=new MasOt();
						masot.setId(box.getInt("otId"));
						otbooking.setOt(masot);
						
						MasBed masbed=new MasBed(); 
						masbed.setId(box.getInt("tableId"));
						otbooking.setBed(masbed);
						otbooking.setHospital(masHospitalObj);
						otbooking.setVisit(visitObj);
						otbooking.setLastChgdBy(user);
					    hbt.save(otbooking);
					    
						for( OtPreAnesthesiaDetail otpreDt :otPreDtList)
						{
							otbookingDt = new OtBookingDt();
							otbookingDt.setOtBookingHd(otbooking);
							otbookingDt.setOtPreAnesthesiaDetail(otpreDt);
							otbookingDt.setStatus("n");
							hbt.save(otbookingDt);
						}
						
						
						
                       }
                       if(miniorotsize==procedureId.size() && opdSurgeryHeader!=null)
                       {
                       opdSurgeryHeader.setStatus("y");
			    	    hbt.update(opdSurgeryHeader);
                       }
						
					//}
					
					
				}

			opdPatientDetails.setPhyStatus("c");
			MasDepartment masDepartment1 = new MasDepartment();
			masDepartment1.setId(departmentId);
			
			opdPatientDetails.setDepartment(masDepartment1);
			
			//saving dental opd details
			
		/*	String  dentalDepartmentCode = null;
			try
			{
				dentalDepartmentCode = HMSUtil.getValuesFromPropertiesFile("adt.properties", "departmentCodeForDental");
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}*/
			
			
			if(dentalDepartmentCode.equalsIgnoreCase(visitsave.getDepartment().getDepartmentCode()))
					{
				
			
				opdPatientDetails.setDSince1(box.getString("since").concat(box.getString("sinceUnit")));
				opdPatientDetails.setDRemarks1(box.getString("sinceRemarks"));
				opdPatientDetails.setDAssociatedComplaint(box.getString("associatedComplaint"));
				opdPatientDetails.setDSince2(box.getString("associatedSince").concat(box.getString("associatedSince")));
				opdPatientDetails.setDRemarks2(box.getString("associatedRemarks"));
				opdPatientDetails.setNoOfTeeth(box.getInt(TOTAL_NO_OF_TEETH));
				opdPatientDetails.setNoOfDefectiveTeeth(box.getInt(DEFECTIVE_TEETH));
				opdPatientDetails.setNoOfDentalPoints(box.getInt("dentalPoints"));
				opdPatientDetails.setMissingTeeth(box.getInt("missingTeeth"));
				opdPatientDetails.setUnSaveableTeeth(box.getInt("unsaveableTeeth"));
				opdPatientDetails.setConditionOfGums(box.getString("conditionOfGums"));
				opdPatientDetails.setDTreatment(box.getString("dentalTreatment"));
				opdPatientDetails.setDDtc(box.getString("dtc"));
				opdPatientDetails.setDTreatmentRemark(box.getString("treatmentRemarks"));
				opdPatientDetails.setAnesthesiaRemark(box.getString("anesthesiaRemark"));
				opdPatientDetails.setTeethExtracted(box.getInt("teethExtracted"));
				opdPatientDetails.setTeethConservesWithRt(box.getInt("teethConservesWithRt"));
				opdPatientDetails.setTeethConservesWithoutRt(box.getInt("teethConservesWithOutRt"));
				opdPatientDetails.setDenturesFittedNew(box.getInt("denturesFittedNew"));
				opdPatientDetails.setDenturesFittedRemodels(box.getInt("denturesFittedRemodels"));
				opdPatientDetails.setDenturesFittedRepairs(box.getInt("denturesFittedRepairs"));
				opdPatientDetails.setSpecialisedTreatment(box.getString("specialisedTreatment"));
				opdPatientDetails.setConsultationDate(HMSUtil.convertStringTypeDateToDateType(currentDate));
				opdPatientDetails.setConsultationTime(time);
				opdPatientDetails.setOpdDate(HMSUtil.convertStringTypeDateToDateType(currentDate));
				opdPatientDetails.setOpdTime(time);
				opdPatientDetails.setTotalMissingTeeth(box.getString("MissTeeth"));
				opdPatientDetails.setTotalUnsaveableTeeth(box.getString("UnserTeeth"));
				opdPatientDetails.setDentalValue(box.getString("dentalValue"));
				opdPatientDetails.setDisposal(disposal);
				opdPatientDetails.setDays(days);
				opdPatientDetails.setTreatableTooth(box.getString("treatableTooth"));
				if(box.getInt("anesthesiaId") != 0){
					MasAnesthesia masAnesthesia = new MasAnesthesia();
					masAnesthesia.setId(box.getInt("anesthesiaId"));
					opdPatientDetails.setAnesthesia(masAnesthesia);
				}
				
				if(!box.getString("teethRemarks").equals("")){
					opdPatientDetails.setMissingTeethRemark(box.getString("teethRemarks"));
				}
				
				
				//---------------------code for Missing Teeth------------------------------//
				String mur8 = "";
				String mur7 = "";
				String mur6 = "";
				String mur5 = "";
				String mur4 = "";
				String mur3 = "";
				String mur2 = "";
				String mur1 = "";
				String mul8 = "";
				String mul7 = "";
				String mul6 = "";
				String mul5 = "";
				String mul4 = "";
				String mul3 = "";
				String mul2 = "";
				String mul1 = "";
				String mlr8 = "";
				String mlr7 = "";
				String mlr6 = "";
				String mlr5 = "";
				String mlr4 = "";
				String mlr3 = "";
				String mlr2 = "";
				String mlr1 = "";
				String mll8 = "";
				String mll7 = "";
				String mll6 = "";
				String mll5 = "";
				String mll4 = "";
				String mll3= "";
				String mll2 = "";
				String mll1 = "";
				String uur8 = "";
				String uur7 = "";
				String uur6 = "";
				String uur5 = "";
				String uur4 = "";
				String uur3 = "";
				String uur2 = "";
				String uur1 = "";
				String uul8 = "";
				String uul7 = "";
				String uul6 = "";
				String uul5 = "";
				String uul4 = "";
				String uul3 = "";
				String uul2 = "";
				String uul1 = "";
				String ulr8 = "";
				String ulr7 = "";
				String ulr6 = "";
				String ulr5 = "";
				String ulr4 = "";
				String ulr3 = "";
				String ulr2 = "";
				String ulr1 = "";
				String ull8 = "";
				String ull7 = "";
				String ull6 = "";
				String ull5 = "";
				String ull4 = "";
				String ull3 = "";
				String ull2 = "";
				String ull1 = "";
				if (!box.getString(MUR_8).equals("")) {
					mur8 = box.getString(MUR_8);
				} else {
					mur8 = "N";
				}
				if (!box.getString(MUR_7).equals("")) {
					mur7 = box.getString(MUR_7);
				} else {
					mur7 = "N";
				}
				if (!box.getString(MUR_6).equals("")) {
					mur6 = box.getString(MUR_6);
				} else {
					mur6 = "N";
				}
				if (!box.getString(MUR_5).equals("")) {
					mur5 = box.getString(MUR_5);
				} else {
					mur5 = "N";
				}
				if (!box.getString(MUR_4).equals("")) {
					mur4 = box.getString(MUR_4);
				} else {
					mur4 = "N";
				}
				if (!box.getString(MUR_3).equals("")) {
					mur3 = box.getString(MUR_3);
				} else {
					mur3 = "N";
				}
				if (!box.getString(MUR_2).equals("")) {
					mur2 = box.getString(MUR_2);
				} else {
					mur2 = "N";
				}
				if (!box.getString(MUR_1).equals("")) {
					mur1 = box.getString(MUR_1);
				} else {
					mur1 = "N";
				}
				if (!box.getString(MUL_8).equals("")) {
					mul8 = box.getString(MUL_8);
				} else {
					mul8 = "N";
				}
				if (!box.getString(MUL_7).equals("")) {
					mul7 = box.getString(MUL_7);
				} else {
					mul7 = "N";
				}
				if (!box.getString(MUL_6).equals("")) {
					mul6 = box.getString(MUL_6);
				} else {
					mul6 = "N";
				}
				if (!box.getString(MUL_5).equals("")) {
					mul5 = box.getString(MUL_5);
				} else {
					mul5 = "N";
				}
				if (!box.getString(MUL_4).equals("")) {
					mul4 = box.getString(MUL_4);
				} else {
					mul4 = "N";
				}
				if (!box.getString(MUL_3).equals("")) {
					mul3 = box.getString(MUL_3);
				} else {
					mul3 = "N";
				}
				if (!box.getString(MUL_2).equals("")) {
					mul2 = box.getString(MUL_2);
				} else {
					mul2 = "N";
				}
				if (!box.getString(MUL_1).equals("")) {
					mul1 = box.getString(MUL_1);
				} else {
					mul1 = "N";
				}
				if (!box.getString(MLR_8).equals("")) {
					mlr8 = box.getString(MLR_8);
				} else {
					mlr8 = "N";
				}
				if (!box.getString(MLR_7).equals("")) {
					mlr7 = box.getString(MLR_7);
				} else {
					mlr7 = "N";
				}
				if (!box.getString(MLR_6).equals("")) {
					mlr6 = box.getString(MLR_6);
				} else {
					mlr6 = "N";
				}
				if (!box.getString(MLR_5).equals("")) {
					mlr5 = box.getString(MLR_5);
				} else {
					mlr5 = "N";
				}
				if (!box.getString(MLR_4).equals("")) {
					mlr4 = box.getString(MLR_4);
				} else {
					mlr4 = "N";
				}
				if (!box.getString(MLR_3).equals("")) {
					mlr3= box.getString(MLR_3);
				} else {
					mlr3 = "N";
				}
				if (!box.getString(MLR_2).equals("")) {
					mlr2 = box.getString(MLR_2);
				} else {
					mlr2 = "N";
				}
				if (!box.getString(MLR_1).equals("")) {
					mlr1 = box.getString(MLR_1);
				} else {
					mlr1 = "N";
				}
				if (!box.getString(MLL_8).equals("")) {
					mll8 = box.getString(MLL_8);
				} else {
					mll8 = "N";
				}
				if (!box.getString(MLL_7).equals("")) {
					mll7 = box.getString(MLL_7);
				} else {
					mll7 = "N";
				}
				if (!box.getString(MLL_6).equals("")) {
					mll6 = box.getString(MLL_6);
				} else {
					mll6 = "N";
				}
				if (!box.getString(MLL_5).equals("")) {
					mll5 = box.getString(MLL_5);
				} else {
					mll5 = "N";
				}
				if (!box.getString(MLL_4).equals("")) {
					mll4 = box.getString(MLL_4);
				} else {
					mll4 = "N";
				}
				if (!box.getString(MLL_3).equals("")) {
					mll3 = box.getString(MLL_3);
				} else {
					mll3 = "N";
				}
				if (!box.getString(MLL_2).equals("")) {
					mll2 = box.getString(MLL_2);
				} else {
					mll2 = "N";
				}
				if (!box.getString(MLL_1).equals("")) {
					mll1 = box.getString(MLL_1);
				} else {
					mll1 = "N";
				}
				if (!box.getString(UUR_8).equals("")) {
					uur8 = box.getString(UUR_8);
				} else {
					uur8 = "N";
				}
				if (!box.getString(UUR_7).equals("")) {
					uur7 = box.getString(UUR_7);
				} else {
					uur7 = "N";
				}
				if (!box.getString(UUR_6).equals("")) {
					uur6 = box.getString(UUR_6);
				} else {
					uur6 = "N";
				}
				if (!box.getString(UUR_5).equals("")) {
					uur5 = box.getString(UUR_5);
				} else {
					uur5 = "N";
				}
				if (!box.getString(UUR_4).equals("")) {
					uur4 = box.getString(UUR_4);
				} else {
					uur4 = "N";
				}
				/*if (!box.getString(UUR_3).equals("")) {
					uur3 = box.getString(UUR_3);
				} else {
					uur3 = "N";
				}
				if (!box.getString(UUR_2).equals("")) {
					uur2 = box.getString(UUR_2);
				} else {
					uur2 = "N";
				}
				if (!box.getString(UUR_1).equals("")) {
					uur1 = box.getString(UUR_1);
				} else {
					uur1 = "N";
				}*/
		/*		if (!box.getString(UUL_8).equals("")) {
					uul8 = box.getString(UUL_8);
				} else {
					uul8 = "N";
				}
				if (!box.getString(UUL_7).equals("")) {
					uul7 = box.getString(UUL_7);
				} else {
					uul7 = "N";
				}
				if (!box.getString(UUL_6).equals("")) {
					uul6 = box.getString(UUL_6);
				} else {
					uul6 = "N";
				}*/
				if (!box.getString(UUL_5).equals("")) {
					uul5 = box.getString(UUL_5);
				} else {
					uul5 = "N";
				}
				if (!box.getString(UUL_4).equals("")) {
					uul4 = box.getString(UUL_4);
				} else {
					uul4 = "N";
				}
				if (!box.getString(UUL_3).equals("")) {
					uul3 = box.getString(UUL_3);
				} else {
					uul3 = "N";
				}
				if (!box.getString(UUL_2).equals("")) {
					uul2 = box.getString(UUL_2);
				} else {
					uul2 = "N";
				}
				if (!box.getString(UUL_1).equals("")) {
					uul1 = box.getString(UUL_1);
				} else {
					uul1 = "N";
				}
				if (!box.getString(ULR_8).equals("")) {
					ulr8 = box.getString(ULR_8);
				} else {
					ulr8 = "N";
				}
				if (!box.getString(ULR_7).equals("")) {
					ulr7 = box.getString(ULR_7);
				} else {
					ulr7 = "N";
				}
				if (!box.getString(ULR_6).equals("")) {
					ulr6 = box.getString(ULR_6);
				} else {
					ulr6 = "N";
				}
				if (!box.getString(ULR_5).equals("")) {
					ulr5 = box.getString(ULR_5);
				} else {
					ulr5 = "N";
				}
				if (!box.getString(ULR_4).equals("")) {
					ulr4 = box.getString(ULR_4);
				} else {
					ulr4 = "N";
				}
				/*if (!box.getString(ULR_3).equals("")) {
					ulr3 = box.getString(ULR_3);
				} else {
					ulr3 = "N";
				}
				if (!box.getString(ULR_2).equals("")) {
					ulr2 = box.getString(ULR_2);
				} else {
					ulr2 = "N";
				}
				if (!box.getString(ULR_1).equals("")) {
					ulr1 = box.getString(ULR_1);
				} else {
					ulr1 = "N";
				}*/
			/*	if (!box.getString(ULL_8).equals("")) {
					ull8 = box.getString(ULL_8);
				} else {
					ull8 = "N";
				}
				if (!box.getString(ULL_7).equals("")) {
					ull7 = box.getString(ULL_7);
				} else {
					ull7 = "N";
				}
				if (!box.getString(ULL_6).equals("")) {
					ull6 = box.getString(ULL_6);
				} else {
					ull6 = "N";
				}*/
				if (!box.getString(ULL_5).equals("")) {
					ull5 = box.getString(ULL_5);
				} else {
					ull5 = "N";
				}
				if (!box.getString(ULL_4).equals("")) {
					ull4 = box.getString(ULL_4);
				} else {
					ull4 = "N";
				}
				if (!box.getString(ULL_3).equals("")) {
					ull3 = box.getString(ULL_3);
				} else {
					ull3 = "N";
				}
				if (!box.getString(ULL_2).equals("")) {
					ull2 = box.getString(ULL_2);
				} else {
					ull2 = "N";
				}
				if (!box.getString(ULL_1).equals("")) {
					ull1 = box.getString(ULL_1);
				} else {
					ull1 = "N";
				}
				String sur8 = "";
				String sur7 = "";
				String sur6 = "";
				String sur5 = "";
				String sur4 = "";
				String sur3 = "";
				String sur2 = "";
				String sur1 = "";
				String sul8 = "";
				String sul7 = "";
				String sul6 = "";
				String sul5 = "";
				String sul4 = "";
				String sul3 = "";
				String sul2 = "";
				String sul1 = "";
				String slr8 = "";
				String slr7 = "";
				String slr6 = "";
				String slr5 = "";
				String slr4 = "";
				String slr3 = "";
				String slr2 = "";
				String slr1 = "";
				String sll8 = "";
				String sll7 = "";
				String sll6 = "";

				String sll5 = "";
				String sll4 = "";
				String sll3 = "";
				String sll2 = "";
				String sll1 = "";
				sur8 = mur8 + "" + uur8;
				sur7 = mur7 + "" + uur7;
				sur6 = mur6 + "" + uur6;
				sur5 = mur5 + "" + uur5;
				sur4 = mur4 + "" + uur4;
				sur3 = mur3 + "" + uur3;
				sur2 = mur2 + "" + uur2;
				sur1 = mur1 + "" + uur1;
				sul8 = mul8 + "" + uul8;
				sul7 = mul7 + "" + uul7;
				sul6 = mul6 + "" + uul6;
				sul5 = mul5 + "" + uul5;
				sul4 = mul4 + "" + uul4;
				sul3 = mul3 + "" + uul3;
				sul2 = mul2 + "" + uul2;
				sul1 = mul1 + "" + uul1;
				slr8 = mlr8 + "" + ulr8;
				slr7 = mlr7 + "" + ulr7;
				slr6 = mlr6 + "" + ulr6;
				slr5 = mlr5 + "" + ulr5;
				slr4 = mlr4 + "" + ulr4;
				slr3 = mlr3 + "" + ulr3;
				slr2 = mlr2 + "" + ulr2;
				slr1 = mlr1 + "" + ulr1;
				sll8 = mll8 + "" + ull8;
				sll7 = mll7 + "" + ull7;
				sll6 = mll6 + "" + ull6;
				sll5 = mll5 + "" + ull5;
				sll4 = mll4 + "" + ull4;
				sll3 = mll3 + "" + ull3;
				sll2 = mll2 + "" + ull2;
				sll1 = mll1 + "" + ull1;
				
	
				opdPatientDetails.setUR1(sur1);
				opdPatientDetails.setUR2(sur2);
				opdPatientDetails.setUR3(sur3);
				opdPatientDetails.setUR4(sur4);
				opdPatientDetails.setUR5(sur5);
				opdPatientDetails.setUR6(sur6);
				opdPatientDetails.setUR7(sur7);
				opdPatientDetails.setUR8(sur8);

				opdPatientDetails.setUL1(sul1);
				opdPatientDetails.setUL2(sul2);
				opdPatientDetails.setUL3(sul3);
				opdPatientDetails.setUL4(sul4);
				opdPatientDetails.setUL5(sul5);
				opdPatientDetails.setUL6(sul6);
				opdPatientDetails.setUL7(sul7);
				opdPatientDetails.setUL8(sul8);

				opdPatientDetails.setLR1(slr1);
				opdPatientDetails.setLR2(slr2);
				opdPatientDetails.setLR3(slr3);
				opdPatientDetails.setLR4(slr4);
				opdPatientDetails.setLR5(slr5);
				opdPatientDetails.setLR6(slr6);
				opdPatientDetails.setLR7(slr7);
				opdPatientDetails.setLR8(slr8);

				opdPatientDetails.setLL1(sll1);
				opdPatientDetails.setLL2(sll2);
				opdPatientDetails.setLL3(sll3);
				opdPatientDetails.setLL4(sll4);
				opdPatientDetails.setLL5(sll5);
				opdPatientDetails.setLL6(sll6);
				opdPatientDetails.setLL7(sll7);
				opdPatientDetails.setLL8(sll8);
			}
			//code for pregnancy
			if(box.getString("pregnancy")!=null && box.getString("pregnancy").equalsIgnoreCase("y") )
			{
				
				opdPatientDetails.setPregnancy("y");
				opdPatientDetails.setLmpDate(HMSUtil.convertStringTypeDateToDateType(box.getString("lmp_date")));
				opdPatientDetails.setEddDate(HMSUtil.convertStringTypeDateToDateType(box.getString("edd")));
				opdPatientDetails.setCurrentEdd(HMSUtil.convertStringTypeDateToDateType(box.getString("currentEdd")));
				opdPatientDetails.setOperationPeriodToday(box.getString("operation_period_today"));
				
			}
			
			if(opdPatientDetailsList.size() >0)
				hbt.update(opdPatientDetails);
			else
			hbt.save(opdPatientDetails);
			
			
			int opdPatientDetailsId=0;
			opdPatientDetailsId=opdPatientDetails.getId();
	
			returnMap.put("opdPatientDetailsId", opdPatientDetailsId);
			
			//create multiple visit for internal referral
			if(referral==1 && mapForDS.get("referTo") != null && (mapForDS.get("referTo").equals("Internal") || mapForDS.get("referTo").equals("Both")))
			{
				Visit referralVisit = null;
				int hiddenValueRefer = box.getInt("hiddenValueRefer");
				
				OpdPatientDetails opdPDetails = (OpdPatientDetails)hbt.load(OpdPatientDetails.class, opdPatientDetailsId);
				 Patient patient = (Patient)session.load(Patient.class, hinId);
					opdPDetails.setReferredStatus("r");
					hbt.update(opdPDetails);	
					
				 for(int i=1;i<=hiddenValueRefer;i++){
					 if(box.getInt("refereddept"+i)!=0 && box.getInt("refereddoctor"+i)!=0 ){
				 	referralVisit =new Visit();
				    referralVisit.setReportingFor("OPD");						
				    referralVisit.setDepartment(new MasDepartment(box.getInt("refereddept"+i)));
					referralVisit.setDoctor( new MasEmployee(box.getInt("refereddoctor"+i)));
					referralVisit.setSession(new MasSession(1));
					referralVisit.setTokenNo(0);
					referralVisit.setVisitStatus("r");
						
					referralVisit.setHospital(masHospitalObj);
					referralVisit.setAddEditBy(user);
						/*referralVisit.setAge(age);*/
					referralVisit.setVisitDate(consultationDateToInsert);
					referralVisit.setVisitTime(consultationTime);
					referralVisit.setAddEditDate(consultationDateToInsert);
					referralVisit.setAddEditTime(consultationTime);
					referralVisit.setVisitTime(consultationTime);						
					referralVisit.setStatus("y"); 
					referralVisit.setAppointmentType("D");
					referralVisit.setPriority(referralPriority);					
					referralVisit.setHin(patient);		
					    
						int currentVisitNo = patient.getCurrentVisitNo()+1;
						patient.setCurrentVisitNo(currentVisitNo);
						referralVisit.setVisitNo(currentVisitNo);
						
						referralVisit.setTokenStatus("n");
						referralVisit.setRefereeOpdPatientdetailsId(opdPatientDetails);
						hbt.saveOrUpdate(patient);
						hbt.save(referralVisit);
				 }	}	
						
					
				
			}
			
			
		//ophthal details
			
			if(visitsave.getDepartment().getDepartmentCode().equalsIgnoreCase(departmentCodeForEye))
					{
				
			OpdOphthalmologyDetails opdOphthalDetails =  null;
			
			if(box.get("opdOphthalId")!=null && box.getInt("opdOphthalId")!=0)
				opdOphthalDetails = (OpdOphthalmologyDetails)hbt.load(OpdOphthalmologyDetails.class, box.getInt("opdOphthalId"));
			else
				opdOphthalDetails = new OpdOphthalmologyDetails();
				
		
		      mapForDS.put("opdOphthalDetails", opdOphthalDetails);
		      opdOphthalDetails= getOpdOphthalObjectToSave(mapForDS);
		
			//opdOphthalDetails.setVisit(new Visit(visitId));
			opdOphthalDetails.setConsultationDate( HMSUtil
			.convertStringTypeDateToDateType(consultationDate));
			/*opdOphthalDetails.setOpdDate( HMSUtil
					.convertStringTypeDateToDateType(consultationDate));*/
			opdOphthalDetails.setConsultationTime(consultationTime);
			
			if(opdOphthalDetails.getId()!=null)
			{
				opdOphthalDetails.setOpdPatientDetails(opdPatientDetails);
				hbt.update(opdOphthalDetails);
			}
			else
			{
				opdOphthalDetails.setOpdPatientDetails(opdPatientDetails);
				opdOphthalDetails.setVisit(new Visit(visitId));
				hbt.save(opdOphthalDetails);
				
			}
			
			
					}
			//end
			
			//OBG Details
			
			String departmentCodeForOBG = HMSUtil.getProperties("adt.properties", "departmentCodeForOBG");
			if(visitsave.getDepartment().getDepartmentCode().equalsIgnoreCase(departmentCodeForOBG))
					{
				ObgDetails obgDt = new ObgDetails();
				obgDt.setObstreticHistory(box.getString("obg_history"));
				if(box.get("obstetric_score_g")!=null && !box.get("obstetric_score_g").isEmpty())
				obgDt.setObstreticScoreG(box.getInt("obstetric_score_g"));
				if(box.get("obstetric_score_p")!=null && !box.get("obstetric_score_p").isEmpty())
					obgDt.setObstreticScoreP(box.getInt("obstetric_score_p"));
				if(box.get("obstetric_score_a")!=null && !box.get("obstetric_score_a").isEmpty())
					obgDt.setObstreticScoreA(box.getInt("obstetric_score_a"));
				if(box.get("obstetric_score_l")!=null && !box.get("obstetric_score_l").isEmpty())
					obgDt.setObstreticScoreL(box.getInt("obstetric_score_l"));
				obgDt.setConception(box.getString("conception"));
				
				obgDt.setMarriedLife(box.getString("total_marriage_year"));
				obgDt.setConsanGuinity(box.getString("consan"));
				obgDt.setBooked(box.getString("booked"));
				obgDt.setImmunised(box.getString("immunised"));
				obgDt.setTrimisters(box.getString("trimisters"));
				obgDt.setGc(box.getString("gyngc"));
				obgDt.setPa(box.getString("gynPa"));
				obgDt.setPe(box.getString("gynPe"));
				obgDt.setFhr(box.getString("gynFhr"));
				if(box.get("tt")!=null && !box.get("tt").isEmpty())
				obgDt.setTt(box.getInt("tt"));
				
				obgDt.setPresentation(box.getString("gynPresentation"));
				obgDt.setPv(box.getString("gynPv"));
				
				if(!box.getString("gyntt").isEmpty())
				obgDt.setTt(box.getInt("gyntt"));
				
				
				obgDt.setSpecify(box.getString("specify"));
				if(box.get("menarche_age")!=null && !box.get("menarche_age").isEmpty())
				obgDt.setAgeOfMenarche(box.getInt("menarche_age"));
				obgDt.setCycles(box.getString("cycles"));
				obgDt.setCycleText(box.getString("cycle_text"));
				if(box.get("range")!=null && !box.get("range").isEmpty())
				obgDt.setRangeValue(box.getString("range"));
				obgDt.setRangeInterval(box.getString("range_interval"));
				if(box.get("flow")!=null && !box.get("flow").isEmpty())
				obgDt.setFlow(box.getString("flow"));
				
				if(!box.get("mestrual_pause").isEmpty())
					obgDt.setMenstrualPause(box.getString("mestrual_pause"));
				if(!box.get("obg_remarks").isEmpty())
					obgDt.setObgRemarks(box.getString("obg_remarks"));
				if(!box.get("gyn_sterilisation").isEmpty())
					obgDt.setSterilisation(box.getString("gyn_sterilisation"));
				if(!box.get("Pap_smear").isEmpty())
					obgDt.setPapSmear(box.getString("Pap_smear"));
				
				
				
				
				obgDt.setRespiratorySystem(box.getString("respiratory_system"));
				obgDt.setBreadthAddedSounds(box.getString("breath_sound"));
				obgDt.setS1(box.getString("s1"));
				obgDt.setS2(box.getString("s2"));
				obgDt.setMurmurs(box.getString("murmurs"));
				obgDt.setClinicalHsirory(box.getString("clinical_history"));
				obgDt.setPersonalHistory(box.getString("personal_history"));
				obgDt.setSurgicalHistory(box.getString("surgery_history"));
				if(box.get("uterus_height")!=null && !box.get("uterus_height").isEmpty())
				obgDt.setHeightOfUterus(box.getString("uterus_height"));
				obgDt.setLowerPole(box.getString("lower_pole"));
				obgDt.setLowerGrip(box.getString("lateral_grip"));
				if(box.get("heart_rate_regular")!=null && !box.get("heart_rate_regular").isEmpty())
				obgDt.setHeartRateRegular(box.getInt("heart_rate_regular"));
				if(box.get("heart_rate_regular")!=null && !box.get("heart_rate_regular").isEmpty())
				obgDt.setHeartRateAbsent(box.getInt("heart_rate_regular"));
				if(box.get("cervix_dilatation")!=null && !box.get("cervix_dilatation").isEmpty())
				obgDt.setDilatationOfCervix(box.getInt("cervix_dilatation"));
				if(box.get("cervix_effacement")!=null && !box.get("cervix_effacement").isEmpty())
				obgDt.setEffacementOfCervix(box.getString("cervix_effacement"));
				obgDt.setMembrane(box.getString("membrane"));
				obgDt.setLiquor(box.getString("liquor"));
				obgDt.setConsistencyOfCervix(box.getString("cervix_consistency"));
				obgDt.setPositionOfCervix(box.getString("cervix_position"));
				if(box.get("cervix_length")!=null && !box.get("cervix_length").isEmpty())
				obgDt.setLengthOfCervix(box.getInt("cervix_length"));
				if(box.get("station")!=null && !box.get("station").isEmpty())
				 obgDt.setStationOfPresentingPart(box.getInt("station"));
				obgDt.setHead(box.getString("head"));
				obgDt.setPelvis(box.getString("pelvis"));
				obgDt.setHopi(box.getString("hopi"));
				obgDt.setOtherComplaints(box.getString("other_complaint"));
				obgDt.setPalpation(box.getString("obg_palpation"));
				
				//Gynology
				
				//obgDt.setDysmenorrhea(box.getString("dysmenorrhea"));
				if(!box.getString("last_menstrual").isEmpty())
				obgDt.setLastMenstrual(HMSUtil.convertStringTypeDateToDateType(box.getString("last_menstrual")));
				obgDt.setMenstrualPattern1(box.getString("menstrual_pattern1"));
				obgDt.setMenstrualPattern2(box.getString("menstrual_pattern2"));
				obgDt.setGynObstetricHistory(box.getString("gyn_obstetric_history"));
				obgDt.setGynAbdomenInspection(box.getString("gyn_abdomen_inspection"));
				obgDt.setGynPalpation(box.getString("gyn_palpation"));
				obgDt.setGynLocalExamination(box.getString("gyn_local_examination"));
				obgDt.setGynBimanualExamination(box.getString("gyn_bimanual_examination"));
				obgDt.setGynPerSpeculum(box.getString("gyn_per_speculum"));
				if(box.get("gyn_menarche_age")!=null && !box.get("gyn_menarche_age").isEmpty())
					 obgDt.setGynAgeOfMenarche(box.getInt("gyn_menarche_age"));
				
				if(box.get("gyn_flow")!=null && !box.get("gyn_flow").isEmpty())
					 obgDt.setGynFlow(box.getString("gyn_flow"));
				
				
				/*obgDt.setInspectionAbdomen(box.getString("inspection_abdomen"));
				obgDt.setInspectionUmbilicus(box.getString("inspection_umbilicus"));
				obgDt.setInspectionHernia(box.getString("inspection_hernia"));
				obgDt.setInspectionScar(box.getString("inspection_scar"));
				obgDt.setMassPalpable(box.getString("mass_palpable"));
				obgDt.setMassSize(box.getString("mass_size"));
				obgDt.setMassShape(box.getString("mass_shape"));
				obgDt.setMassPosition(box.getString("mass_position"));
				obgDt.setMassConsistency(box.getString("mass_consistency"));
				obgDt.setMassTemp(box.getString("mass_temp"));
				obgDt.setAsicitis(box.getString("asicitis"));
				obgDt.setExternalGenitalia(box.getString("external_genitalia"));
				obgDt.setExternalGenitaliaOther(box.getString("external_genitalia_other"));
				obgDt.setSpeculumVagina(box.getString("speculum_vagina"));
				obgDt.setSpeculumDischarge(box.getString("speculum_discharge"));
				obgDt.setSpeculumCervix(box.getString("speculum_cervix"));
				obgDt.setSpeculumDecent(box.getString("speculum_decent"));
				obgDt.setUterusSize(box.getString("uterus_size"));
				obgDt.setUterusForness(box.getString("uterus_forness"));
				obgDt.setUterusCervicalMovement(box.getString("uterus_cervical_movement"));*/
				
				
				obgDt.setOpdPatientDetails(opdPatientDetails);
				hbt.save(obgDt);
			
					}
			//end
			
			
			DentalTreatmentHeader dentalTreatmentHeader = new DentalTreatmentHeader();
		
		  if(box.getInt("dentalCount") != 0){
			   patientObj = new Patient();
			patientObj.setId(box.getInt("hinId"));
			dentalTreatmentHeader.setHin(patientObj);
		
			
			masHospitalObj.setId(box.getInt("hospitalId"));
			dentalTreatmentHeader.setHospital(masHospitalObj);
			
			
			if(box.getInt("visitId")!=0){
				Visit visitObj1 = new Visit();
				visitObj1.setId(visitId);
				dentalTreatmentHeader.setVisit(visitObj1);
			}
			if(box.getInt("deptId")!=0){
				MasDepartment madDept =  new MasDepartment();
				madDept.setId(departmentId);
				dentalTreatmentHeader.setDepartment(madDept);
			}
			dentalTreatmentHeader.setTreatmentDate(HMSUtil.convertStringTypeDateToDateType(currentDate));
			dentalTreatmentHeader.setTreatmentTime(consultationTime);
			dentalTreatmentHeader.setOpdPatientDetail(opdPatientDetails);
			dentalTreatmentHeader.setStatus("y");
			hbt.save(dentalTreatmentHeader);
			for (int j = 1; j <= box.getInt("dentalCount"); j++) {
				if(!box.getString("teeth"+j).equals("")){
					DentalTreatmentDetail dentalTreatmentDetail = new DentalTreatmentDetail();
					if(!box.getString("teeth"+j).equals("")){
						dentalTreatmentDetail.setTeeth(box.getString("teeth"+j));
					}
					if(!box.getString("dentalTreatment"+j).equals("")){
						dentalTreatmentDetail.setTreatment(box.getString("dentalTreatment"+j));
					}
					if(!box.getString("dtc"+j).equals("")){
						dentalTreatmentDetail.setDtc(box.getString("dtc"+j));
					}
					if(!box.getString("remarks"+j).equals("")){
						dentalTreatmentDetail.setRemark(box.getString("remarks"+j));
					}
					dentalTreatmentDetail.setDentalTreatmentHeader(dentalTreatmentHeader);
					hbt.save(dentalTreatmentDetail);
				}
			}
		}
			
			
//end
	
			
		  Visit visitObjToUpdate = (Visit) hbt.get(Visit.class, visitId);
		//prodcure advice
			
			/*Persisting treatment*/
		  List<String>  treatmentProcedureNameList=(List<String>)mapForDS.get("nursingprocedure");
		if(treatmentProcedureNameList.size()>0)	
			{
			List<Integer> parkNuringIds = (List<Integer>)  mapForDS.get("parkNuringIds");
			List<String>  nursingTypeList=(List<String>)mapForDS.get("nursingTypeList");
			List<Integer> treatmentFrequencyList=(List<Integer>)mapForDS.get("nursingfrequency");
			List<Integer> treatmentNoOfDaysList=(List<Integer>)mapForDS.get("nursingdays");
			List<String>  treatmentRemarkList=(List<String>)mapForDS.get("nursingremarks");
	
			ProcedureHeader procedureHeaderForProcedure=null;
			ProcedureHeader procedureHeaderForPhysiotherapy=null;
		String NursingTypeCodeForProcedure = HMSUtil.getProperties("adt.properties", "NursingTypeCodeForProcedure");
		String NursingTypeCodeForPhysiotherapy = HMSUtil.getProperties("adt.properties", "NursingTypeCodeForPhysiotherapy");
		/*	if(procedureHeaderId!=null && !procedureHeaderId.equals(0)){
				procedureHeader = (ProcedureHeader) hbt.load(ProcedureHeader.class, procedureHeaderId);
			}else{
				procedureHeader = new ProcedureHeader();
			}	
	*/
			
			for(String nt:nursingTypeList){
				if(nt!=null)
				{
					if(nt.equalsIgnoreCase(NursingTypeCodeForProcedure) && procedureHeaderForProcedure==null)
						
					{
						procedureHeaderForProcedure = new ProcedureHeader();
						procedureHeaderForProcedure.setHin(new Patient(hinId));
						procedureHeaderForProcedure.setHospital(new MasHospital(hospitalId));
						procedureHeaderForProcedure.setLastChgBy(user);
						procedureHeaderForProcedure.setLastChgDate(new Date());
						procedureHeaderForProcedure.setLastChgTime(consultationTime);
						procedureHeaderForProcedure.setRequisitionDate(new Date());
						procedureHeaderForProcedure.setOpdPatientDetails(opdPatientDetails);
						procedureHeaderForProcedure.setVisit(visitObj);
						procedureHeaderForProcedure.setStatus("n");
						procedureHeaderForProcedure.setProcedureType(nt);
					}
					else if(nt.equalsIgnoreCase(NursingTypeCodeForPhysiotherapy) && procedureHeaderForPhysiotherapy==null)
						
					{   procedureHeaderForPhysiotherapy = new ProcedureHeader();
						procedureHeaderForPhysiotherapy.setHin(new Patient(hinId));
						procedureHeaderForPhysiotherapy.setHospital(new MasHospital(hospitalId));
						procedureHeaderForPhysiotherapy.setLastChgBy(user);
						procedureHeaderForPhysiotherapy.setLastChgDate(new Date());
						procedureHeaderForPhysiotherapy.setLastChgTime(consultationTime);
						procedureHeaderForPhysiotherapy.setRequisitionDate(new Date());
						procedureHeaderForPhysiotherapy.setOpdPatientDetails(opdPatientDetails);
						procedureHeaderForPhysiotherapy.setVisit(visitObj);
						procedureHeaderForPhysiotherapy.setStatus("n");
						procedureHeaderForPhysiotherapy.setProcedureType(nt);
					}
						
				}
			}
		
			
			
			
		/*	if(visitObjToUpdate!=null && visitObjToUpdate.getVisitStatus().equalsIgnoreCase("p")
					&& procedureHeaderId!=null && !procedureHeaderId.equals(0)){
				hbt.update(procedureHeader);
			}else{
				hbt.save(procedureHeader);
			}*/
			if(procedureHeaderForProcedure!=null)
				hbt.save(procedureHeaderForProcedure);
			
			if(procedureHeaderForPhysiotherapy!=null)
				hbt.save(procedureHeaderForPhysiotherapy);
			
			//opdPatientData.put("ProcedureHeader", procedureHeader);
			int index=0;
			for(String strId:treatmentProcedureNameList)
			{
				/*int frequencyCount = 0;
				if(treatmentFrequencyList!=null && treatmentFrequencyList.size()>index)
					
				{
					MasFrequency fr= new MasFrequency();
					fr.setId(treatmentFrequencyList.get(index));
					frequencyCount = fr.getFrequencyCount().intValue();
					
				}
				*/
				
				ProcedureDetails procedureDetails=new ProcedureDetails();
			/*	Integer procedureDetailsId=parkNuringIds.get(index);
				if(procedureDetailsId!=null && !procedureDetailsId.equals(0)){
					procedureDetails = (ProcedureDetails) hbt.load(ProcedureDetails.class, procedureDetailsId);
				}else{
					procedureDetails = new ProcedureDetails();
				}*/
				procedureDetails = new ProcedureDetails();
				
				Integer nursingId=Integer.parseInt(strId);
				MasNursingCare care=(MasNursingCare)session.load(MasNursingCare.class,nursingId);
				procedureDetails.setNursingCare(care);
				if(nursingTypeList.get(index).equalsIgnoreCase(NursingTypeCodeForPhysiotherapy))
    				procedureDetails.setProcedureHeader(procedureHeaderForPhysiotherapy);
				else if(nursingTypeList.get(index).equalsIgnoreCase(NursingTypeCodeForProcedure))
    				procedureDetails.setProcedureHeader(procedureHeaderForProcedure);
				
				procedureDetails.setStatus("n");
				
				// Add by Vinay
				if(treatmentFrequencyList!=null && treatmentFrequencyList.size()>index)
				
				{
					MasFrequency fr= new MasFrequency();
					fr.setId(treatmentFrequencyList.get(index));
					
					procedureDetails.setFrequency(fr);
				}
				
				if(treatmentNoOfDaysList!=null && treatmentNoOfDaysList.size()>index)
					
				{
					procedureDetails.setNoOfDays(treatmentNoOfDaysList.get(index));
				}
				
				procedureDetails.setFinalProcedureStatus("n");
				procedureDetails.setRemarks("");
				procedureDetails.setAppointmentDate(new Date());
				if(treatmentRemarkList!=null && treatmentRemarkList.size()>index)
				procedureDetails.setRemarks(treatmentRemarkList.get(index));
				
			/*	if(visitObjToUpdate!=null && visitObjToUpdate.getVisitStatus().equalsIgnoreCase("p")
						&& procedureDetailsId!=null && !procedureDetailsId.equals(0)){
					hbt.update(procedureDetails);
				}else{
					hbt.save(procedureDetails);
				}*/
				hbt.save(procedureDetails);
				index++;
				
			}
		/*	if(procedureHeaderId!=0){
				procedureHeader = (ProcedureHeader)hbt.load(ProcedureHeader.class, procedureHeaderId);
				procedureHeader.setOpdPatientDetails(opdPatientDetails);
				procedureHeader.setLastChgTime(consultationTime);
				hbt.update(procedureHeader);
				
			}*/
		  
			
			
		}
		//therapy scheduling
		 List<String>  therapyNameList=(List<String>)mapForDS.get("therapyNameList");
			if(therapyNameList.size()>0)	
				{
				List<Integer> therapyIds = (List<Integer>)  mapForDS.get("therapyIds");
				List<String>  therapyRemarkList=(List<String>)mapForDS.get("therapyRemarkList");
				List<String>  therapyAppointmentStatusList=(List<String>)mapForDS.get("therapyAppointmentStatusList");
				List<String>  therapyAppointmentDateList=(List<String>)mapForDS.get("therapyAppointmentDateList");
				List<String>  therapyAppointmentTimeList=(List<String>)mapForDS.get("therapyAppointmentTimeList");
				List<String>  teethTreatmentList=(List<String>)mapForDS.get("teethTreatmentList");
				
				
			//	String appointmentDate =(String)mapForDS.get("appointmentDate");
				//String appointmentTime =(String)mapForDS.get("appointmentTime"); 
				if(visitsave.getDepartment().getDepartmentCode().equalsIgnoreCase(departmentCodeForPhychiatrist) || visitsave.getDepartment().getDepartmentCode().equalsIgnoreCase(dentalDepartmentCode))
				{
					String headerStatus="";
					TherapyHeader therapyHeader=null;
					therapyHeader = new TherapyHeader();
			
					therapyHeader.setHin(new Patient(hinId));
					therapyHeader.setHospital(new MasHospital(hospitalId));
					therapyHeader.setLastChgBy(user);
					therapyHeader.setLastChgDate(new Date());
					therapyHeader.setLastChgTime(consultationTime);
					therapyHeader.setRequisitionDate(new Date());
					therapyHeader.setOpdPatientDetails(opdPatientDetails);
					therapyHeader.setVisit(visitObj);
					therapyHeader.setStatus("n");
					therapyHeader.setProcedureDate(HMSUtil.convertStringTypeDateToDateType(consultationDate));
					therapyHeader.setProcedureTime(consultationTime);
					
					/*if(visitObjToUpdate!=null && visitObjToUpdate.getVisitStatus().equalsIgnoreCase("p")
							&& procedureHeaderId!=null && !procedureHeaderId.equals(0)){
						hbt.update(therapyHeader);
					}else{*/
						hbt.save(therapyHeader);
					//}
					int index=0;
					for(String strId:therapyNameList)
					{
						for(int j=1;j<=2;j++)
						{
						TherapyDetails therapyDetails=new TherapyDetails();
						//Integer procedureDetailsId=therapyIds.get(index);
			
						Integer nursingId=Integer.parseInt(strId);
						MasNursingCare care=(MasNursingCare)session.load(MasNursingCare.class,nursingId);
						therapyDetails.setProcedure(care);
						therapyDetails.setProcedureHeader(therapyHeader);
						
						if(j==1 &&(therapyAppointmentStatusList.get(index).equalsIgnoreCase("c") ||therapyAppointmentStatusList.get(index).equalsIgnoreCase("na") ))
						{
							if(therapyRemarkList!=null && therapyRemarkList.size()>index){
								  therapyDetails.setTherapyRemarks(therapyRemarkList.get(index));
						}	therapyDetails.setTeethRequiredTreatment(teethTreatmentList.get(index));
							therapyDetails.setAppointmentDate(HMSUtil.convertStringTypeDateToDateType(consultationDate));
							therapyDetails.setAppointmentTime(consultationTime);
							therapyDetails.setProcedureDate(HMSUtil.convertStringTypeDateToDateType(consultationDate));
							therapyDetails.setProcedureTime(consultationTime);
							therapyDetails.setStatus("y");
							if(therapyAppointmentStatusList.get(index).equalsIgnoreCase("c")){
							therapyDetails.setFinalProcedureStatus("y");
							if(!headerStatus.equalsIgnoreCase("n") )
								headerStatus ="y";
							}
							else
								therapyDetails.setFinalProcedureStatus("n");
							
							hbt.save(therapyDetails);
							
						}
						else if(j==2 && (therapyAppointmentStatusList.get(index).equalsIgnoreCase("na") ||therapyAppointmentStatusList.get(index).equalsIgnoreCase("a")))
						{
							
							therapyDetails.setStatus("n");
							therapyDetails.setFinalProcedureStatus("n");
							therapyDetails.setAppointmentDate(HMSUtil.convertStringTypeDateToDateType(therapyAppointmentDateList.get(index)));
							therapyDetails.setAppointmentTime(therapyAppointmentTimeList.get(index));
							therapyDetails.setTeethRequiredTreatment(teethTreatmentList.get(index));
							
							headerStatus ="n";
							hbt.save(therapyDetails);
						}
			
						}
						   index++;
					}
					
					if(therapyHeader!=null && headerStatus!=null){
						
						therapyHeader.setStatus(headerStatus);
						hbt.update(therapyHeader);
					}
				/*	if(procedureHeaderId!=0){
						therapyHeader = (TherapyHeader)hbt.load(TherapyHeader.class, procedureHeaderId);
						therapyHeader.setOpdPatientDetails(opdPatientDetails);
						therapyHeader.setLastChgTime(consultationTime);
						hbt.update(therapyHeader);
						
					}*/
				}//if for phychiatrist n dental procedure 
		
				
				
			}
		
		//end therapy
		
		
			
			
			
			// --------------- values to be Opd Patient
			// History--------------------

			OpdPatientHistory opdPatientHistory = new OpdPatientHistory();

			MasDepartment md = new MasDepartment();
			md.setId(departmentId);
			opdPatientHistory.setDepartment(md);

			MasHospital mh = new MasHospital();
			mh.setId(hospitalId);
			opdPatientHistory.setHospital(mh);

			Patient p = new Patient();
			p.setId(hinId);
			opdPatientHistory.setHin(p);

			/*
			 * Visit visit = new Visit(); visit.setId(visitId);
			 */
			opdPatientHistory.setVisitInpatientId(visitId);

			opdPatientHistory.setLastChgTime(time);
			opdPatientHistory.setLastChgBy("admin");

			opdPatientHistory.setStatus("y");
			opdPatientHistory.setLastChgDate(date);

			opdPatientHistory.setPersonalPastHistory(pastHistory);
			opdPatientHistory.setPersonalPresentHistory(personalHistory);
			opdPatientHistory.setPersonalOtherDetails(otherDetails);
			//-----commented by anamika-------------
			//opdPatientHistory.setFamilyPastHistory(familyHistory);
			opdPatientHistory.setRiskFactor(riskFactor);
			opdPatientHistory.setPastMedicalHistory(pastMedicalHistory);
			opdPatientHistory.setPresentComplain(presentComplain);
			
			opdPatientHistory.setFamilyPresentHistory(familyHistory);
			opdPatientHistory.setPresentAdvice(presentAdvice);//fayaz added
			opdPatientHistory.setPresentIllness(presentIllness);

			opdPatientHistory.setIpOpPacStatus("OP");

			opdPatientHistory.setOpdPatientDetails(opdPatientDetails);

			hbt.save(opdPatientHistory);
			
	/*		if(familyHistoryArray!=null && familyHistoryArray.length > 0) {
				for (int i = 0; i < familyHistoryArray.length; i++) {
					List<MasMedicalExamFamilyHis> existingFamilyHis = new ArrayList<MasMedicalExamFamilyHis>();
					existingFamilyHis = session.createCriteria(MasMedicalExamFamilyHis.class).createAlias("Hin", "h").add(Restrictions.eq("h.Id", hinId)).createAlias("PatientFamilyHistory", "pfh").add(Restrictions.eq("pfh.Id", Integer.parseInt(""+familyHistoryArray[i]))).list();
					if(existingFamilyHis.size() == 0){
						MasMedicalExamFamilyHis masExamFamilyHis = new MasMedicalExamFamilyHis();
						Patient patientObj = new Patient();
						patientObj.setId(hinId);
						masExamFamilyHis.setHin(patientObj);
						PatientFamilyHistory familyHistory = new PatientFamilyHistory();
						familyHistory.setId(Integer.parseInt(""+familyHistoryArray[i]));
						masExamFamilyHis.setPatientFamilyHistory(familyHistory);
						hbt.save(masExamFamilyHis);
					}
				}
			}*/
			
	
	
			
			//------------update Patient Table for other Family History-------------------//
			
			Patient ptObj = (Patient)hbt.load(Patient.class, hinId);
		//	ptObj.setOtherFamilyHistory(otherFamilyHistorty);
			ptObj.setDrugAllergies(allergies);
			hbt.update(ptObj);
			
			//-----------------------------------------------------------------------

			// --------------- values to be updated in visit table to change
			// it's status--------------------

			//Visit visitObjToUpdate = (Visit) hbt.load(Visit.class, visitId);
			visitObjToUpdate.setVisitStatus("C");
			/* Original  token no and Doctor set at the time of visit creation */
			/*if(visitObjToUpdate.getDoctor()!=null){
				String tokenAndDoctor="";
				tokenAndDoctor=""+visitObjToUpdate.getTokenNo();
				tokenAndDoctor=tokenAndDoctor+"#"+visitObjToUpdate.getDoctor().getId();
				visitObjToUpdate.setTokenDoctor(tokenAndDoctor);
			}*/
			/* If Other Doctor will attend to patient then update doctor id in visit table  */
			if(empIdCurrnet>0){
				MasEmployee doctor=new MasEmployee();
				doctor.setId(empIdCurrnet);
				visitObjToUpdate.setDoctor(doctor);
			}
			hbt.update(visitObjToUpdate);

			// -----------------------------------------------------------------------------------

			// --------------values to be entered in discharge table for
			// diagnosis----------------------
			String query = "";
			//String notifiableICDCode="";
			List<MasIcd> objectList = new ArrayList();
			String icd_string=null;
			if (diagnosisIdAray != null) {
				for (int i = 0; i < diagnosisIdAray.length; i++) {
					//notifiableICDCode=diagnosisIdAray[i];
					
				/*	if(notifiableICDCode.equals("A51") || notifiableICDCode.equals("A52") || notifiableICDCode.equals("A53") || notifiableICDCode.equals("A54") || notifiableICDCode.equals("A55") || notifiableICDCode.equals("A56") || notifiableICDCode.equals("A57") || notifiableICDCode.equals("A58") || notifiableICDCode.equals("A59") || notifiableICDCode.equals("A60") || notifiableICDCode.equals("A63") || notifiableICDCode.equals("A64") || notifiableICDCode.equals("B01") || notifiableICDCode.equals("B05") || notifiableICDCode.equals("B06") || notifiableICDCode.equals("B15") || notifiableICDCode.equals("B16") || notifiableICDCode.equals("B17") || notifiableICDCode.equals("B18") || notifiableICDCode.equals("B19") || notifiableICDCode.equals("B35") || notifiableICDCode.equals("B36") || notifiableICDCode.equals("B86") || notifiableICDCode.equals("B50") || notifiableICDCode.equals("B51") || notifiableICDCode.equals("B52") || notifiableICDCode.equals("B53") || notifiableICDCode.equals("B53.0") || notifiableICDCode.equals("B20") || notifiableICDCode.equals("B21") || notifiableICDCode.equals("B22") || notifiableICDCode.equals("B23") || notifiableICDCode.equals("B24") || notifiableICDCode.equals("J00") || notifiableICDCode.equals("J01") || notifiableICDCode.equals("J02.9") || notifiableICDCode.equals("J03") || notifiableICDCode.equals("J04") || notifiableICDCode.equals("J05") || notifiableICDCode.equals("J06") || notifiableICDCode.equals("L01") || notifiableICDCode.equals("L02") || notifiableICDCode.equals("R75") || notifiableICDCode.equals("Z71.7") || notifiableICDCode.equals("S00") || notifiableICDCode.equals("S01") || notifiableICDCode.equals("S02") || notifiableICDCode.equals("S03") || notifiableICDCode.equals("S04") || notifiableICDCode.equals("S05") || notifiableICDCode.equals("S06") || notifiableICDCode.equals("S07") || notifiableICDCode.equals("S09.9"))
					{
						//opdPatientDetails.setNotifiableStatus("y");
					}*/					
					DischargeIcdCode dischargeIcdCode = new DischargeIcdCode();
					 patientObj = new Patient();
					patientObj.setId(hinId);
					dischargeIcdCode.setHin(patientObj);
					MasIcd masIcd = new MasIcd();
					//
					// masIcd.setId(Integer.parseInt(diagnosisIdAray[i]));
					// chnaget to Line Below

					if (diagnosisIdAray[i] != null) {
						if (!diagnosisIdAray[i].equals("0")) {
							query = "select icd_id from mas_icd where icd_code='"
									+ diagnosisIdAray[i] + "'";
							/*objectList = (List) session.createSQLQuery(query)
									.list();*/
							/*	masIcd.setId(Integer.parseInt(""
							+ objectList.get(0)));*/
							objectList = session.createCriteria(MasIcd.class).add(Restrictions.eq("IcdCode", diagnosisIdAray[i])).list();
							masIcd.setId(objectList.get(0).getId());
							dischargeIcdCode.setIcd(masIcd);
							dischargeIcdCode
									.setAddEditDate(consultationDateToInsert);
							dischargeIcdCode.setAddEditTime(consultationTime);
							dischargeIcdCode.setStatus("y");
							dischargeIcdCode.setDiagnosisStatus("p");
							Visit visit = new Visit();
							visit.setId(visitId);
							dischargeIcdCode.setVisit(visit);
							dischargeIcdCode.setOpdPatientDetails(opdPatientDetails);
							hbt.save(dischargeIcdCode);
							
							icd_string = icd_string!=null?icd_string+","+objectList.get(0).getIcdName():objectList.get(0).getIcdName()+"";
							
						}
					}
				}
				
				if(icd_string!=null)
				{
					opdPatientDetails.setIcd(icd_string);
					hbt.update(opdPatientDetails);
				}
				
					
			}
			
			PatientPrescriptionHeader patientPrescriptionHeader = new PatientPrescriptionHeader();
			int item_class_id = 0;
			String nipStatus=null;
			if(itemIdList.size() > 0){
				Patient patient = new Patient();
				patient.setId(hinId);
				patientPrescriptionHeader.setNipStatus("n");
				patientPrescriptionHeader.setHin(patient);
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(departmentId);
				patientPrescriptionHeader.setDepartment(masDepartment);
				Visit visit = new Visit();
				visit.setId(visitId);
				patientPrescriptionHeader.setVisit(visit);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				patientPrescriptionHeader.setHospital(masHospital);
				patientPrescriptionHeader.setStatus("p");
				patientPrescriptionHeader
						.setPrescriptionDate(consultationDateToInsert);
				patientPrescriptionHeader.setPrescriptionTime(consultationTime);
				/**
				 * Code By Ritu 
				 * Created Foreign key relation for emp id in Database
				 */
				MasEmployee employee = new MasEmployee();
				employee.setId(empId);
				patientPrescriptionHeader.setEmp(employee);
				
				/**
				 * End of code by Ritu
				 */
				/*int prescriptionNo=getTransactionSequenceNoForPrescriptionNo(mapForDS);*/
	        	Map<String, Object> adMap = new HashMap<String, Object>();
			      adMap.put("tableObjectName", "PATIENT_PRESCRIPTION_HEADER");            
		            adMap.put("isHospitalWise", "y");
		            adMap.put("hospitalId", hospitalId);
		            adMap.put("isYearly", "n");            
		            adMap.put("isMonthly", "n");
		            adMap.put("isPrefix", "n");
		
		        int prescriptionNo = Integer.parseInt(HMSUtil.generateTransactionSequence(adMap, session, hbt));
				patientPrescriptionHeader.setPrescriptionNo(prescriptionNo);
				patientPrescriptionHeader.setOpdPatientDetails(opdPatientDetails);
				
				/*
				 * This block is use for Check Injection in Prescription List
				 */
				//----------------commented by anamika for itemId================
				String sqlItemId="";
			//	List<Integer> itemList = new ArrayList<Integer>();
				for (int i = 0; i < itemIdList.size(); i++) {
					/*String pvmsNo = (String) itemIdList.get(i);
					String nomenclature = (String) nomenclatureList.get(i);
					int itemId = getItemIdFromPVMS(nomenclature,pvmsNo,hospitalId);*/
					int itemId = (Integer)itemIdList.get(i);;
					if(i==0){
						sqlItemId=""+itemId;
					}else{
						sqlItemId +=" , "+itemId;
					}
				//	itemIdList.add(itemId);
				}
				List<MasStoreItem> masItemList=new ArrayList<MasStoreItem>();
				Properties properties = new Properties();
				URL resourcePath = Thread.currentThread().getContextClassLoader()
						.getResource("adt.properties");
				
				try {
					properties.load(resourcePath.openStream());
					String item_class_code = properties.getProperty("item_class_id");
					item_class_id=Integer.parseInt(item_class_code);
				} catch (Exception e) {
					e.printStackTrace();
				}
				if(!sqlItemId.equals(""))
					masItemList=hbt.find("select item from jkt.hms.masters.business.MasStoreItem as item join item.ItemCategory as ic where item.Id in ("+sqlItemId+") and ic.Id="+item_class_id+" and item.IssueFrom='i'");
				
				if(masItemList.size()>0){
					patientPrescriptionHeader.setInjectionStatus("p");
				}else{
					patientPrescriptionHeader.setInjectionStatus("n");
				}
				/*
				 * End Of Code This block is use for Check Injection in Prescription List
				 */
				patientPrescriptionHeader.setOtherTreatment((String)mapForDS.get("otherTreatment"));
				
		            int ItemClassificationIdForNIP = 0;
					ItemClassificationIdForNIP = Integer.parseInt(HMSUtil.getValuesFromPropertiesFile("adt.properties", "ItemClassificationId"));
		
	
					for(int iCId :classificationList)
					{
						if(iCId==ItemClassificationIdForNIP)
						{
							patientPrescriptionHeader.setNipStatus("y");
							nipStatus ="y";
							break;
						}
					}
				
				hbt.save(patientPrescriptionHeader);
			}/** else part added by Ritu for other treatment details **/
	/*		else if(itemIdList.size() == 0 && mapForDS.get("otherTreatment")!=null && !(mapForDS.get("otherTreatment")).equals("")){

				Patient patient = new Patient();
				patient.setId(hinId);
				patientPrescriptionHeader.setHin(patient);
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(departmentId);
				patientPrescriptionHeader.setDepartment(masDepartment);
				Visit visit = new Visit();
				visit.setId(visitId);
				patientPrescriptionHeader.setVisit(visit);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				patientPrescriptionHeader.setHospital(masHospital);
				patientPrescriptionHeader.setStatus("p");
				patientPrescriptionHeader
						.setPrescriptionDate(consultationDateToInsert);
				patientPrescriptionHeader.setPrescriptionTime(consultationTime);
				
				MasEmployee employee = new MasEmployee();
				employee.setId(empId);
				patientPrescriptionHeader.setEmp(employee);
				//int prescriptionNo=getTransactionSequenceNoForPrescriptionNo(mapForDS);
				Map<String, Object> adMap = new HashMap<String, Object>();
			      adMap.put("tableObjectName", "PATIENT_PRESCRIPTION_HEADER");            
		            adMap.put("isHospitalWise", "y");
		            adMap.put("hospitalId", 1);
		            adMap.put("isYearly", "n");            
		            adMap.put("isMonthly", "n");
		            adMap.put("isPrefix", "n");
		
		        int prescriptionNo = Integer.parseInt(HMSUtil.generateTransactionSequence(adMap, session, hbt));
				
			

				patientPrescriptionHeader.setPrescriptionNo(prescriptionNo);
				patientPrescriptionHeader.setOpdPatientDetails(opdPatientDetails);
		
				patientPrescriptionHeader.setInjectionStatus("n");
				patientPrescriptionHeader.setOtherTreatment((String)mapForDS.get("otherTreatment"));
				
				hbt.save(patientPrescriptionHeader);
			
				
			}*/
            
            
			List<PatientPrescriptionDetails> previousApprovedNipDetails = null;
			if (itemIdList.size() > 0 ) {
				for (int i = 0; i < itemIdList.size(); i++) {
					if(itemIdList.get(i) !=0){
					//List<MasStoreItem> itemCodeList = new ArrayList<MasStoreItem>();
						
					if(nipStatus!=null && nipStatus.equals("y") && classificationList.get(i)==2){
						Calendar cal = GregorianCalendar.getInstance();
						cal.add( Calendar.DAY_OF_YEAR, - Integer.parseInt(HMSUtil.getProperties("adt.properties", "ValidatedDaysForNipAprroval")));
						Date nipValidatedDate = cal.getTime();
						
						previousApprovedNipDetails = session.createCriteria(PatientPrescriptionDetails.class).createAlias("Prescription", "hd")
								.add(Restrictions.eq("hd.Hin.Id", hinId)).add(Restrictions.eq("Item.Id", itemIdList.get(i)))
								.add(Restrictions.eq("hd.NipStatus","A").ignoreCase()).add(Restrictions.ge("hd.PrescriptionDate",nipValidatedDate))
								.list();
						
						if(previousApprovedNipDetails.size()>0)
						{
							nipStatus ="A";
							patientPrescriptionHeader.setNipStatus("A");
							patientPrescriptionHeader.setNipApprovedBy(previousApprovedNipDetails.get(0).getPrescription().getNipApprovedBy());
							hbt.saveOrUpdate(patientPrescriptionHeader);
						}
					    		
						}
					PatientPrescriptionDetails patientPrescriptionDetails = new PatientPrescriptionDetails();
					if(itemIdList.get(i) != null){
						MasStoreItem masStoreItem = new MasStoreItem();
						masStoreItem.setId(itemIdList.get(i));
					patientPrescriptionDetails.setItem(masStoreItem);
					}
					if (frequencyList.get(i) != null && !frequencyList.get(i).equals("")) {
						MasFrequency masFrequency = new MasFrequency();
						masFrequency.setId(frequencyList.get(i));
						patientPrescriptionDetails.setFrequency(masFrequency);
						}
						if (dosageList.get(i) != null && !dosageList.get(i).equals("") && !dosageList.get(i).equals("0")) {
							patientPrescriptionDetails.setDosage(dosageList.get(i));
						}else{
							patientPrescriptionDetails.setDosage("0");
						}
						if (remarksList.get(i) != null && !remarksList.get(i).equals("")) {
							patientPrescriptionDetails.setRemarks(remarksList.get(i));
						}
						//patientPrescriptionDetails.setType(typeLeftRightList.get(i));
						if (noOfDaysList.get(i) != null && !noOfDaysList.get(i).equals("")) {
							patientPrescriptionDetails.setNoOfDays(noOfDaysList.get(i));
						}
						if (routeList.get(i) != null && !routeList.get(i).equals("")) {
							patientPrescriptionDetails.setRoute(routeList.get(i));
						}
						/*if (totalList.get(i) != null && !totalList.get(i).equals("")) {
							patientPrescriptionDetails.setTotal(Math.round(totalList.get(i).floatValue()));
						}*/
						if (totalList.get(i) != null && !totalList.get(i).equals("") && totalList.get(i) != 0) {
							patientPrescriptionDetails.setTotal(totalList.get(i));
						}else{
							patientPrescriptionDetails.setTotal(1);
						}
						patientPrescriptionDetails.setGivenQty(0);
					
					
					//patientPrescriptionDetails.setType(typeLeftRightList.get(i));
					
					//patientPrescriptionDetails.setInstruction(instructionList.get(i));
					
					
					patientPrescriptionDetails.setPrescription(patientPrescriptionHeader);
				
					patientPrescriptionDetails.setDetailStatus("a");
					
					
			/*		List<MasStoreItem> storeItemList=new ArrayList<MasStoreItem>();
					storeItemList=hbt.find("select item from jkt.hms.masters.business.MasStoreItem as item join item.ItemCategory as ic where item.Id="+itemIdList.get(i)+" and ic.Id="+item_category_id);
					if(storeItemList.size() > 0){
						patientPrescriptionDetails.setInjectionStatus("p");
					}else{
						patientPrescriptionDetails.setInjectionStatus("n");
					}
					if(ctList.get(i).equals("y")){
						patientPrescriptionDetails.setCt("yes");
					}else{
						patientPrescriptionDetails.setCt("no");
					}
					*/
					List<MasStoreItem> storeItemList=new ArrayList<MasStoreItem>();
					Properties properties = new Properties();
					URL resourcePath = Thread.currentThread().getContextClassLoader().getResource("adt.properties");
					try {
						properties.load(resourcePath.openStream());
						String item_class_code = properties.getProperty("item_class_id");
						item_class_id=Integer.parseInt(item_class_code);
					} catch (Exception e) {
						e.printStackTrace();
					}
					storeItemList=hbt.find("select item from jkt.hms.masters.business.MasStoreItem as item join item.ItemClass as ic where item.Id="+itemIdList.get(i)+" and ic.Id="+item_class_id+" and item.IssueFrom='i'");
					if(storeItemList.size() > 0){
						patientPrescriptionDetails.setInjectionStatus("p");
					}else{
						patientPrescriptionDetails.setInjectionStatus("n");
					}
					
			/*		if(visitObjToUpdate!=null && visitObjToUpdate.getVisitStatus().equalsIgnoreCase("p") && parkPrescriptionIds!=null && !parkPrescriptionIds.get(i).equals(0)){
						hbt.update(patientPrescriptionDetails);
					}else{
						hbt.save(patientPrescriptionDetails);
					}*/
					
					hbt.save(patientPrescriptionDetails);
						//opdPatientListObject.add(patientPrescriptionDetails);
						//prevent insulin for nursing station and available in pharmacy only in readonly mod
					if(!checkForInsulinInjection(itemIdList.get(i))){
							if(storeItemList.size()>0){
								
								
								if(session.createCriteria(MasStoreItem.class).add(Restrictions.eq("Id", itemIdList.get(i))).add(Restrictions.eq("IssueFrom", "I")).list().size()>0){
										
								
								List<InjAppointmentHeader> injectionRegisterList=new ArrayList<InjAppointmentHeader>();
								injectionRegisterList=hbt.find("select inj from jkt.hms.masters.business.InjAppointmentHeader as inj join inj.Visit as visit where visit.Id="+visitId);
								
								InjAppointmentHeader injectionAppointment = new InjAppointmentHeader();
								
								 
								if(injectionRegisterList.size()>0){
									for (InjAppointmentHeader injectionRegisterTemp : injectionRegisterList) {
										injectionAppointment.setId(injectionRegisterTemp.getId());
									}
								}else{
									Patient patientInj = new Patient();
									patientInj.setId(hinId);
									injectionAppointment.setHin(patientInj);
									Visit visitInj = new Visit();
									visitInj.setId(visitId);
									injectionAppointment.setVisit(visitInj);
									MasHospital masHospitalInj = new MasHospital();
									masHospitalInj.setId(hospitalId);
									injectionAppointment.setHospital(masHospitalInj);
									
									injectionAppointment.setStatus("p");
									injectionAppointment.setLastChgTime(time);
									injectionAppointment.setLastChgBy(user);
									injectionAppointment.setLastChgDate(date);
									injectionAppointment.setAppointmentDate(date);
									injectionAppointment.setPrescription(patientPrescriptionHeader);
									hbt.save(injectionAppointment);
									
								}
											InjAppointmentDetails injAppointmentDetails = new InjAppointmentDetails();
											//injAppointmentDetails.setAppointmentTime(time);
											injAppointmentDetails.setInjAppointmentDate(new Date());
											injAppointmentDetails.setDose(String.valueOf(dosageList.get(i)));
											
											MasFrequency frequency = new MasFrequency();
											frequency.setId(frequencyList.get(i));
											injAppointmentDetails.setFrequency(frequency);
											
											/*if(routeOfAdministration!=null)
											injAppointmentDetails.setRoute(routeOfAdministration.getRouteName());
											*/
											 
											MasStoreItem item = new MasStoreItem();
											item.setId(itemIdList.get(i));
											
											
											
												injAppointmentDetails.setItem(item);
												injAppointmentDetails.setInjAppointmentHeader(injectionAppointment);
												injAppointmentDetails.setNoOfDays(noOfDaysList.get(i));
												injAppointmentDetails.setPatientPrescriptionDetails(patientPrescriptionDetails);
												injAppointmentDetails.setStatus("p");
												injAppointmentDetails.setFinalStatus("n");
												hbt.save(injAppointmentDetails);
								
							  }
							}
					}
					//end injectionappointment
					
			
					
					/**
					 * This Code is use for Injection Appointment
					 * Code By Ritu Sahu
					 * Date 07 Nov 2011
					 */
					
			/*		if(storeItemList.size()>0){
						List<InjAppointmentHeader> injectionRegisterList=new ArrayList<InjAppointmentHeader>();
						injectionRegisterList=hbt.find("select inj from jkt.hms.masters.business.InjAppointmentHeader as inj join inj.Visit as visit where visit.Id="+visitId);
						InjAppointmentHeader injectionAppointment = new InjAppointmentHeader();
						
						  if(injectionRegisterList.size()>0) means , Data is already available In InjectionRegister table  
						 
						if(injectionRegisterList.size()>0){
							for (InjAppointmentHeader injectionRegisterTemp : injectionRegisterList) {
								injectionAppointment.setId(injectionRegisterTemp.getId());
							}
						}else{
							injectionAppointment.setAppointmentDate(new Date());
							Patient patientInj = new Patient();
							patientInj.setId(hinId);
							injectionAppointment.setHin(patientInj);
							Visit visitInj = new Visit();
							visitInj.setId(visitId);
							injectionAppointment.setVisit(visitInj);
							MasHospital masHospitalInj = new MasHospital();
							masHospitalInj.setId(hospitalId);
							injectionAppointment.setHospital(masHospitalInj);
							
							injectionAppointment.setStatus("p");
							injectionAppointment.setLastChgTime(time);
							Users user = new Users();
							user.setId(userId);
							injectionAppointment.setLastChgBy(user);
							injectionAppointment.setLastChgDate(date);
							injectionAppointment.setPrescription(patientPrescriptionHeader);
							hbt.save(injectionAppointment);
						}
						int freqCount=0;
						if(frequencyList.get(i) > 10){
							freqCount = 1;  if frequency is greater than 10 then only one entry will go in Injection Appointment table
						}else{
							freqCount = frequencyList.get(i);
						}
						if(freqCount > 0){	
							for (int j = 1; j <= freqCount; j++) {
								InjAppointmentDetails injAppointmentDetails = new InjAppointmentDetails();
								injAppointmentDetails.setAppointmentTime(time);
								injAppointmentDetails.setDose(dosageList.get(i));
								MasFrequency frequency = new MasFrequency();
								frequency.setId(frequencyList.get(i));
								injAppointmentDetails.setFrequency(frequency);
								injAppointmentDetails.setRoute(routeList.get(i));
								MasStoreItem item = new MasStoreItem();
								item.setId(itemIdList.get(i));
								injAppointmentDetails.setItem(item);
								injAppointmentDetails.setInjAppointmentHeader(injectionAppointment);
								injAppointmentDetails.setNoOfDays(noOfDaysList.get(i));
								injAppointmentDetails.setPatientPrescriptionDetails(patientPrescriptionDetails);
								injAppointmentDetails.setStatus("p");
								hbt.save(injAppointmentDetails);
							}
						}
					}*/
					/**
					 * END Of COde
					 * This Code is use for Injection
					 * Code By Ritu Sahu
					 * Date 07 Nov 2011
					 */
				}
				}
			}
/*			//-------------code by anamika for detention-----------------------//
			if(disposal.equalsIgnoreCase("Detained")){
			PatientDetentionRegister patientDetentionRegister =new PatientDetentionRegister();
			Patient patient =  new Patient();
			patient.setId(hinId);
			patientDetentionRegister.setHin(patient);
			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			
			patientDetentionRegister.setHospital(masHospital);
			
			MasEmployee medicalOfficer =new MasEmployee();
			
			medicalOfficer.setId(empIdCurrnet);
			patientDetentionRegister.setMedicalOfficer(medicalOfficer);
			
			Visit visit=new Visit();
			visit.setId(visitId);
			patientDetentionRegister.setVisit(visit);
			
			patientDetentionRegister.setDetainedFrom(date);
			patientDetentionRegister.setDetentionRegisterDate(date);
			patientDetentionRegister.setDetainedTo(date);
			patientDetentionRegister.setFromTime(time);
			patientDetentionRegister.setToTime(time);
			//patientDetentionRegister.setTreatment(box.getString("treatment"));
			patientDetentionRegister.setRequisitionDate(date);
			Users user = new Users();
			user.setId(userId);
			patientDetentionRegister.setLastChgBy(user);
			patientDetentionRegister.setLastChgDate(date);
			patientDetentionRegister.setLastChgTime(time);
			patientDetentionRegister.setStatus("p");
			patientDetentionRegister.setReviewAt(reviewAt);
			
			hbt.save(patientDetentionRegister);
		}*/
			//-------------------------------------------------
			if(otherMedicineList != null && otherMedicineList.size() > 0){
				String sqlItemId="";
				int itemId = 0;
				/*PatientPrescriptionHeader patientPrescriptionHeader = new PatientPrescriptionHeader();
				Patient patient = new Patient();
				patient.setId(hinId);
				patientPrescriptionHeader.setHin(patient);
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(departmentId);
				patientPrescriptionHeader.setDepartment(masDepartment);
				Visit visit = new Visit();
				visit.setId(visitId);
				patientPrescriptionHeader.setVisit(visit);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				patientPrescriptionHeader.setHospital(masHospital);
				patientPrescriptionHeader.setStatus("p");
				patientPrescriptionHeader
						.setPrescriptionDate(consultationDateToInsert);
				patientPrescriptionHeader.setPrescriptionTime(consultationTime);
				*//**
				 * Code By Ritu 
				 * Created Foreign key relation for emp id in Database
				 *//*
				MasEmployee employee = new MasEmployee();
				employee.setId(empId);
				patientPrescriptionHeader.setEmp(employee);
				
				*//**
				 * End of code by Ritu
				 *//*
				int prescriptionNo=getTransactionSequenceNoForPrescriptionNo(mapForDS);
				patientPrescriptionHeader.setPrescriptionNo(prescriptionNo);
		
				for(int i = 0; i < injCategoryList.size(); i++){
					if(injCategoryList.get(i).equals("y")){
						patientPrescriptionHeader.setInjectionStatus("p");
						break;
					}else{
						patientPrescriptionHeader.setInjectionStatus("n");
					}
				}
				
				 * End Of Code This block is use for Check Injection in Prescription List
				 
				
				hbt.save(patientPrescriptionHeader);*/

				//List<MasStoreItem> itemCodeList = new ArrayList<MasStoreItem>();
				String otherItem = "";
				if(otherMedicineList.size() >0){
					
					if(patientPrescriptionHeader.getId()==null)
					{
						Patient patient = new Patient();
						patient.setId(hinId);
						patientPrescriptionHeader.setHin(patient);
						MasDepartment masDepartment = new MasDepartment();
						masDepartment.setId(departmentId);
						patientPrescriptionHeader.setDepartment(masDepartment);
						Visit visit = new Visit();
						visit.setId(visitId);
						patientPrescriptionHeader.setVisit(visit);
						MasHospital masHospital = new MasHospital();
						masHospital.setId(hospitalId);
						patientPrescriptionHeader.setHospital(masHospital);
						patientPrescriptionHeader.setStatus("p");
						patientPrescriptionHeader
								.setPrescriptionDate(consultationDateToInsert);
						patientPrescriptionHeader.setPrescriptionTime(consultationTime);
						
						MasEmployee employee = new MasEmployee();
						employee.setId(empId);
						patientPrescriptionHeader.setEmp(employee);
						//int prescriptionNo=getTransactionSequenceNoForPrescriptionNo(mapForDS);
						Map<String, Object> adMap = new HashMap<String, Object>();
					      adMap.put("tableObjectName", "PATIENT_PRESCRIPTION_HEADER");            
				            adMap.put("isHospitalWise", "y");
				            adMap.put("hospitalId", 1);
				            adMap.put("isYearly", "n");            
				            adMap.put("isMonthly", "n");
				            adMap.put("isPrefix", "n");
				
				        int prescriptionNo = Integer.parseInt(HMSUtil.generateTransactionSequence(adMap, session, hbt));
						
					

						patientPrescriptionHeader.setPrescriptionNo(prescriptionNo);
						patientPrescriptionHeader.setOpdPatientDetails(opdPatientDetails);
				
						patientPrescriptionHeader.setInjectionStatus("n");
						patientPrescriptionHeader.setOtherTreatment((String)mapForDS.get("otherTreatment"));
						patientPrescriptionHeader.setNipStatus("y");
						patientPrescriptionHeader.setNipApprovedBy(null);
						hbt.save(patientPrescriptionHeader);
					}
					else{
					patientPrescriptionHeader.setNipStatus("y");
					patientPrescriptionHeader.setNipApprovedBy(null);
					hbt.update(patientPrescriptionHeader);}
					String nipCode = null;
					int itemClassificationId = 0;
					int groupId = 0;
					int sectionId = 0;
					int itemTypeId= 0;
					try
					{
						nipCode = HMSUtil.getProperties("adt.properties", "ItemClassificationCodeNIP");
						itemClassificationId = Integer.parseInt(HMSUtil.getProperties("adt.properties", "ItemClassificationId"));
						groupId = Integer.parseInt(HMSUtil.getProperties("adt.properties", "ItemGroupId"));
						sectionId = Integer.parseInt(HMSUtil.getProperties("adt.properties", "SectionIdForDrugs"));
						itemTypeId = Integer.parseInt(HMSUtil.getProperties("adt.properties", "ItemTypeId"));
					}
					catch(Exception e)
					{
						e.printStackTrace();
					}
					//int totalNip = session.createCriteria(MasStoreItem.class).createAlias("ItemClassification", "ic").add(Restrictions.eq("ic.Classification", nipCode)).add(Restrictions.eq("Hospital.Id", hospitalId)).list().size();
					
					String nipLastPVMS = ((MasStoreItem)(session.createCriteria(MasStoreItem.class).createAlias("ItemClassification", "ic").add(Restrictions.eq("ic.Classification", nipCode)).add(Restrictions.eq("Hospital.Id", hospitalId)).addOrder(Order.desc("Id")).setMaxResults(1).list().get(0))).getPvmsNo();
					int totalNip= Integer.parseInt(nipLastPVMS.replaceAll("[^0-9]", ""));
							
						int k=0;
				for(int i = itemIdList.size(); i <otherMedicineList.size()+itemIdList.size(); i++){
					MasStoreItem masItem = new MasStoreItem();
					if(otherMedicineList.get(k) != null && !otherMedicineList.get(k).equals("")){
						otherItem =(String)otherMedicineList.get(k);
						masItem.setNomenclature(otherMedicineList.get(k));
						MasStoreSection masStoreSection = new MasStoreSection();
						masStoreSection.setId(sectionId);
						masItem.setSection(masStoreSection);
						masItem.setStatus("y");
						masItem.setBrandedGeneric("B");
						
						if (itemConversionList.get(i) != null && !itemConversionList.get(i).equals("")) {
							MasStoreItemConversion masStoreItemConversion = new MasStoreItemConversion();
							masStoreItemConversion.setId(itemConversionList.get(i));
							masItem.setItemConversion(masStoreItemConversion);
							}
						
						if (itemClassList.get(i) != null && !itemClassList.get(i).equals("")) {
							 MasItemClass masItemClass = new MasItemClass();
							 masItemClass.setId(itemClassList.get(i));
							masItem.setItemClass(masItemClass);
							}
						
						if (itemDispensaryList.get(i) != null && !itemDispensaryList.get(i).equals("")) {
							masItem.setDispUnit(itemDispensaryList.get(i));
							}
						
						if (uomQtyList .get(i) != null && !uomQtyList .get(i).equals("")) {
							masItem.setADispQty(uomQtyList .get(i));
							}
					
						totalNip++;
						masItem.setPvmsNo(nipCode+totalNip);
						
						MasItemType masItemType = new MasItemType();
						masItemType.setId(itemTypeId);
						masItem.setItemType(masItemType);
						MasHospital masHospital = new MasHospital();
						masHospital.setId(hospitalId);
						masItem.setHospital(masHospital);
						masItem.setHighValueDrug("n");
						MasItemClassification Mic = new MasItemClassification();
						Mic.setId(itemClassificationId);
						masItem.setItemClassification(Mic);
						MasStoreGroup msgrp = new MasStoreGroup();
						msgrp.setId(groupId);
						masItem.setGroup(msgrp);
						masItem.setLastChgBy(user);
						masItem.setLastChgDate(date);
						masItem.setLastChgTime(time);
						
						/*itemCodeList =session.createCriteria(MasStoreItem.class).add(Restrictions.like("PvmsNo", "NIV%")).add(Restrictions.eq("Hospital.Id", hospitalId))
						.addOrder(Order.desc("Id")).setMaxResults(1).list();
						String itemNo = "";
						if(itemCodeList.size()>0){
							MasStoreItem masStoreItem =itemCodeList.get(0);
							String itemCode = masStoreItem.getPvmsNo();
							StringTokenizer str = new StringTokenizer(itemCode, "/");
							String itemNivCode = "";
							while (str.hasMoreTokens()) {

								itemNivCode = str.nextToken();

							}
							int itemNiv =Integer.parseInt(itemNivCode)+1;
							itemNo = "NIV/"+itemNiv;
						}else{
							itemNo = "NIV/011"; 
						}*/
						//masItem.setPvmsNo("temp");
						
						hbt.save(masItem);
						// code starts for sending for approval in case of new nip prescribed by Atul
						patientPrescriptionHeader.setNipStatus("y");
						patientPrescriptionHeader.setNipApprovedBy(null);
						hbt.update(patientPrescriptionHeader);
						//code ends for sending for approval in case of new nip prescribed

				
					PatientPrescriptionDetails patientPrescriptionDetails = new PatientPrescriptionDetails();
					if(masItem.getId() != null){
						MasStoreItem masStoreItem = new MasStoreItem();
						masStoreItem.setId(masItem.getId());
					patientPrescriptionDetails.setItem(masStoreItem);
					}
					if (frequencyList.get(i) != null && !frequencyList.get(i).equals("")) {
					MasFrequency masFrequency = new MasFrequency();
					masFrequency.setId(frequencyList.get(i));
					patientPrescriptionDetails.setFrequency(masFrequency);
					}
					if (dosageList.get(i) != null && !dosageList.get(i).equals("")) {
						patientPrescriptionDetails.setDosage(dosageList.get(i));
					}
					if (remarksList.get(i) != null && !remarksList.get(i).equals("")) {
					patientPrescriptionDetails.setRemarks(remarksList.get(i));
					}
					//patientPrescriptionDetails.setType(typeLeftRightList.get(i));
					if (noOfDaysList.get(i) != null && !noOfDaysList.get(i).equals("")) {
						patientPrescriptionDetails.setNoOfDays(noOfDaysList.get(i));
					}
					if (routeList.get(i) != null && !routeList.get(i).equals("")) {
						patientPrescriptionDetails.setRoute(routeList.get(i));
					}
					
					//patientPrescriptionDetails.setInstruction(instructionList.get(i));
					if (totalList.get(i) != null && !totalList.get(i).equals("")) {
						patientPrescriptionDetails.setTotal(totalList.get(i));
					}
					patientPrescriptionDetails.setPrescription(patientPrescriptionHeader);
					patientPrescriptionDetails.setGivenQty(0);
					patientPrescriptionDetails.setDetailStatus("a");
					List<MasStoreItem> storeItemList=new ArrayList<MasStoreItem>();
					patientPrescriptionDetails.setInjectionStatus("n");
					
					if(ctList.get(i).equals("y")){
						patientPrescriptionDetails.setCt("yes");
					}else{
						patientPrescriptionDetails.setCt("no");
					}
					
					
					hbt.save(patientPrescriptionDetails);
					
					/**
					 * This Code is use for Injection Appointment
					 * Code By Ritu Sahu
					 * Date 07 Nov 2011
					 */
					
					if(storeItemList.size()>0){
						List<InjAppointmentHeader> injectionRegisterList=new ArrayList<InjAppointmentHeader>();
						injectionRegisterList=hbt.find("select inj from jkt.hms.masters.business.InjAppointmentHeader as inj join inj.Visit as visit where visit.Id="+visitId);
						InjAppointmentHeader injectionAppointment = new InjAppointmentHeader();
						
						 /* if(injectionRegisterList.size()>0) means , Data is already available In InjectionRegister table  */
						 
						if(injectionRegisterList.size()>0){
							for (InjAppointmentHeader injectionRegisterTemp : injectionRegisterList) {
								injectionAppointment.setId(injectionRegisterTemp.getId());
							}
						}else{
							injectionAppointment.setAppointmentDate(new Date());
							Patient patientInj = new Patient();
							patientInj.setId(hinId);
							injectionAppointment.setHin(patientInj);
							Visit visitInj = new Visit();
							visitInj.setId(visitId);
							injectionAppointment.setVisit(visitInj);
							MasHospital masHospitalInj = new MasHospital();
							masHospitalInj.setId(hospitalId);
							injectionAppointment.setHospital(masHospitalInj);
							
							injectionAppointment.setStatus("p");
							injectionAppointment.setLastChgTime(time);
						/*	Users user = new Users();
							user.setId(userId);*/
							injectionAppointment.setLastChgBy(user);
							injectionAppointment.setLastChgDate(date);
							injectionAppointment.setPrescription(patientPrescriptionHeader);
							hbt.save(injectionAppointment);
						}
						int freqCount=0;
						if(frequencyList.get(i) > 10){
							freqCount = 1; /* if frequency is greater than 10 then only one entry will go in Injection Appointment table*/
						}else{
							freqCount = frequencyList.get(i);
						}
						if(freqCount > 0){	
							for (int j = 1; j <= freqCount; j++) {
								InjAppointmentDetails injAppointmentDetails = new InjAppointmentDetails();
								injAppointmentDetails.setAppointmentTime(time);
								injAppointmentDetails.setDose(dosageList.get(i));
								MasFrequency frequency = new MasFrequency();
								frequency.setId(frequencyList.get(i));
								injAppointmentDetails.setFrequency(frequency);
								injAppointmentDetails.setRoute(routeList.get(i));
								MasStoreItem item = new MasStoreItem();
								item.setId(itemIdList.get(i));
								injAppointmentDetails.setItem(item);
								injAppointmentDetails.setInjAppointmentHeader(injectionAppointment);
								injAppointmentDetails.setNoOfDays(noOfDaysList.get(i));
								injAppointmentDetails.setPatientPrescriptionDetails(patientPrescriptionDetails);
								injAppointmentDetails.setStatus("p");
								hbt.save(injAppointmentDetails);
							}
						}
					}
					}
					/**
					 * END Of COde
					 * This Code is use for Injection
					 * Code By Ritu Sahu
					 * Date 07 Nov 2011
					 */
					k++;
					
				}
			}
			}
			
			
			// by Tirath for time without second
			Map<String, Object> utilMap1 = new HashMap<String, Object>();
			utilMap1 = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			
			String time1 = (String) utilMap1.get("currentTimeWithoutSc");
			
			//investigation
			
			if (chargeCodeIdList.size() > 0) {
				List<Patient> patientList = null;  
				String patientTypeNameForHAL = null;
				String patientTypeNameForOther = null;
				String dgOrderBillingStatus = null;
				
		
					 patientTypeNameForHAL =  HMSUtil.getProperties("adt.properties", "patientTypeNameForHAL");
					 patientTypeNameForOther = HMSUtil.getProperties("adt.properties", "patientTypeNameForOther");
				
				Criteria crit = session.createCriteria(Patient.class).add(
						Restrictions.eq("Id", hinId));
				patientList = crit.list();
							
				
				if(patientList.size()!=0)
				{
					if(patientList.get(0).getPatientType().getPatientTypeName().equals(patientTypeNameForHAL))
					{
						dgOrderBillingStatus ="y";
					}
					else if(patientList.get(0).getPatientType().getPatientTypeName().equals(patientTypeNameForOther))
					{
						if(patientList.get(0).getBillable().equals("y"))
						    dgOrderBillingStatus ="n";
						else if(patientList.get(0).getBillable().equals("n"))
							dgOrderBillingStatus ="y";
					}
				}

				  Map<String, Object> adMap = new HashMap<String, Object>();
			      adMap.put("tableObjectName", "DgOrderhd");            
		            adMap.put("isHospitalWise", "y");
		            adMap.put("hospitalId", hospitalId);
		            adMap.put("isYearly", "n");            
		            adMap.put("isMonthly", "n");
		            adMap.put("isPrefix", "n");
				//List<String> headerinvestigationDateList =  (List) mapForDS.get("investigationDate");
				;
				List<String> insertedDateList =  new ArrayList<>();
				for(String investigtionDate: investigationDateList)
				{
				if(!insertedDateList.contains(investigtionDate))	{
					insertedDateList.add(investigtionDate);
				
					DgOrderhd dgOrderhd = new DgOrderhd();
					dgOrderhd.setOrderDate(HMSUtil.convertStringTypeDateToDateType(investigtionDate));
					dgOrderhd.setOrderTime(time1);
					masHospitalObj.setId(hospitalId);
					dgOrderhd.setHospital(masHospitalObj);
					patientObj.setId(hinId);
					dgOrderhd.setHin(patientObj);
					masdepartment.setId(departmentId);
					dgOrderhd.setDepartment(masdepartment);
					if (empId != 0) {
						masEmployee.setId(empId);
						dgOrderhd.setPrescribedBy(masEmployee);
					}
				
					dgOrderhd.setBillingStatus(dgOrderBillingStatus);
					dgOrderhd.setPatientType("OP");
					dgOrderhd.setTestType("Regular");
					dgOrderhd.setCreatedby(userName);
					dgOrderhd.setCreatedon(consultationDateToInsert);
			       orderSeqNo = HMSUtil.generateTransactionSequence(adMap, session, hbt);
					    dgOrderhd.setOrderNo(orderSeqNo);
						dgOrderhd.setVisit(visitObj);
					dgOrderhd.setClinicalNote(clinicalNotes1);
					dgOrderhd.setOrderStatus("P");
					dgOrderhd.setLabOrderStatus("P");
					dgOrderhd.setLastChgBy(user);
					dgOrderhd.setLastChgDate(consultationDateToInsert);
					dgOrderhd.setLastChgTime(consultationTime);
					//dgOrderhd.setInvestigationRequestionNo(patientInvestigationHeader);
					if(mapForDS.get("otherInvestigation")!=null)
					dgOrderhd.setOtherInvestigation(mapForDS.get("otherInvestigation").toString().trim());
			
					hbt.save(dgOrderhd);
				
					for (int i = 0; i < chargeCodeIdList.size(); i++) {

						if(investigtionDate.equals(investigationDateList.get(i))){
							
						
						
						MasChargeCode masChargeCode = new MasChargeCode();
						masChargeCode.setId(Integer.parseInt(chargeCodeIdList.get(i)));
						
											DgOrderdt dgOrderdt = new DgOrderdt();
											dgOrderdt.setOrderhd(dgOrderhd);
											masChargeCode.setId(Integer.parseInt(chargeCodeIdList.get(i)));
											dgOrderdt.setChargeCode(masChargeCode);
											//dgOrderdt.setOrderQty(quantityList.get(i));
											dgOrderdt.setBillingStatus(dgOrderBillingStatus);
											dgOrderdt.setCreatedby(userName);
											//dgOrderdt.setCreatedon(consultationDateToInsert);
											dgOrderdt.setCreatedon(HMSUtil.convertStringTypeDateToDateType(investigtionDate));
											dgOrderdt.setLastChgBy(user);
											dgOrderdt.setLastChgDate(consultationDateToInsert);
											dgOrderdt.setLastChgTime(consultationTime);
											dgOrderdt.setMsgSent("n");
											// method written for taking out the values of mascharge
											// code and subcharge
											Map masChargeMap = getMasChargeCodeFromChargeId(Integer
													.parseInt(chargeCodeIdList.get(i)));
											MasChargeCode masChargeCodeObj = (MasChargeCode) masChargeMap
											.get("masChargeCode");
											int mainChargeId = masChargeCodeObj.getMainChargecode()
											.getId();
											int subChargeId = masChargeCodeObj.getSubChargecode()
											.getId();
											if (masChargeCodeObj.getMainChargecode()
													.getMainChargecodeCode().equalsIgnoreCase("Lab")) {
												dgOrderdt.setOrderStatus("P");
											} else {
												dgOrderdt.setOrderStatus("P");
											}
											MasMainChargecode masMainChargecode = new MasMainChargecode();
											masMainChargecode.setId(mainChargeId);
											dgOrderdt.setMainChargecode(masMainChargecode);
											MasSubChargecode masSubChargecode = new MasSubChargecode();
											masSubChargecode.setId(subChargeId);
											dgOrderdt.setSubChargeid(masSubChargecode);
										
											List<DgMasInvestigation> invList = new ArrayList<DgMasInvestigation>();
											invList = session.createCriteria(DgMasInvestigation.class).add(Restrictions.eq("ChargeCode.Id", Integer.parseInt(chargeCodeIdList.get(i)))).list();
											int invId=0;
											for(DgMasInvestigation list: invList)
											{
												invId = list.getId();
											}
											dgOrderdt.setInvestigation(new DgMasInvestigation(invId));
											//dgOrderdt.setInvestigationToMH(referToMhList.get(i));
											dgOrderdt.setInvestigationToMh("n");
											//dgOrderdt.setReferToMh(referToMhList.get(i));
											dgOrderdt.setReferToMh("n");
											hbt.save(dgOrderdt);
						}//end date comparision
					}//inner dt loop
				//	headerinvestigationDateList.removeAll(Arrays.asList(investigtionDate));
				}
				}//outer loop for hd
				
			}
			
/*			
			if (chargeCodeIdList.size() > 0) {
				MasDepartment masDepartment = new MasDepartment();
				MasHospital masHospital = new MasHospital();
				Patient patient = new Patient();
				MasEmployee masEmployee2 = new MasEmployee();

				PatientInvestigationHeader patientInvestigationHeader = new PatientInvestigationHeader();

				patient.setId(hinId);
				patientInvestigationHeader.setHin(patient);

				masDepartment.setId(departmentId);
				patientInvestigationHeader.setDepartment(masDepartment);
				Visit visit = new Visit();
				visit.setId(visitId);
				patientInvestigationHeader.setVisit(visit);
				
				masHospital.setId(hospitalId);
				patientInvestigationHeader.setHospital(masHospital);
				patientInvestigationHeader.setStatus("p");
				patientInvestigationHeader
						.setInvestigationDate(consultationDateToInsert);
				patientInvestigationHeader.setInvestigationTime(consultationTime);
				patientInvestigationHeader.setClinicalNotes(clinicalNotes1);
				patientInvestigationHeader.setOpdPatientDetails(opdPatientDetails);
				hbt.save(patientInvestigationHeader);

				
				
				List<Patient> patientList = new ArrayList<Patient>();   
				String patientTypeNameForHAL = null;
				String patientTypeNameForOther = null;
				String dgOrderBillingStatus ="";
				
				Properties properties = new Properties();
				URL resourcePath = Thread.currentThread().getContextClassLoader()
						.getResource("adt.properties");
				try {
					properties.load(resourcePath.openStream());
					
					 patientTypeNameForHAL = properties.getProperty("patientTypeNameForHAL");;
					 patientTypeNameForOther = properties.getProperty("patientTypeNameForOther");;
				} catch (Exception e) {
					e.printStackTrace();
				}
				
				
				Criteria crit = session.createCriteria(Patient.class).add(
						Restrictions.eq("Id", hinId));
				patientList = crit.list();
							
				
				if(patientList.size()!=0)
				{
					if(patientList.get(0).getPatientType().getPatientTypeName().equals(patientTypeNameForHAL))
					{
						dgOrderBillingStatus ="y";
					}
					else if(patientList.get(0).getPatientType().getPatientTypeName().equals(patientTypeNameForOther))
					{
						if(patientList.get(0).getBillable().equals("y"))
						    dgOrderBillingStatus ="n";
						else if(patientList.get(0).getBillable().equals("n"))
							dgOrderBillingStatus ="y";
					}
				}
	
				//end code
				
				DgOrderhd dgOrderhd = new DgOrderhd();
				dgOrderhd.setOrderDate(consultationDateToInsert);
				dgOrderhd.setOrderTime(time1);
				masHospital.setId(hospitalId);
				dgOrderhd.setHospital(masHospital);
				patient.setId(hinId);
				dgOrderhd.setHin(patient);
				masDepartment.setId(departmentId);
				dgOrderhd.setDepartment(masDepartment);
				if (empId != 0) {
					masEmployee2.setId(empId);
					dgOrderhd.setPrescribedBy(masEmployee2);
				}
			
				dgOrderhd.setBillingStatus(dgOrderBillingStatus);
				dgOrderhd.setPatientType("OP");
				dgOrderhd.setTestType("Regular");
				dgOrderhd.setCreatedby(userName);
				dgOrderhd.setCreatedon(consultationDateToInsert);

				//orderSeqNo = generateOrderNumber();
			
				  Map<String, Object> adMap = new HashMap<String, Object>();
			      adMap.put("tableObjectName", "DgOrderhd");            
		            adMap.put("isHospitalWise", "y");
		            adMap.put("hospitalId", hospitalId);
		            adMap.put("isYearly", "n");            
		            adMap.put("isMonthly", "n");
		            adMap.put("isPrefix", "n");
		
		            orderSeqNo = HMSUtil.generateTransactionSequence(adMap, session, hbt);
				    
				
				dgOrderhd.setOrderNo(orderSeqNo);
				if (visitId != 0) {
					visit = new Visit();
					visit.setId(visitId);
					dgOrderhd.setVisit(visit);
				}
				dgOrderhd.setClinicalNote(clinicalNotes1);
				dgOrderhd.setOrderStatus("P");
				dgOrderhd.setLabOrderStatus("P");
				
				dgOrderhd.setLastChgBy(user);
				dgOrderhd.setLastChgDate(consultationDateToInsert);
				dgOrderhd.setLastChgTime(consultationTime);
				dgOrderhd.setInvestigationRequestionNo(patientInvestigationHeader);
				if(mapForDS.get("otherInvestigation")!=null)
				dgOrderhd.setOtherInvestigation(mapForDS.get("otherInvestigation").toString().trim());
		
				hbt.save(dgOrderhd);
			
				for (int i = 0; i < chargeCodeIdList.size(); i++) {
					PatientInvestigationDetails patientInvestigationDetails = new PatientInvestigationDetails();
					patientInvestigationDetails
					.setInvestigationHeader(patientInvestigationHeader);
					MasChargeCode masChargeCode = new MasChargeCode();
					//System.out.println("Integer.parseInt(chargeCodeIdList.get(i))--"+Integer.parseInt(chargeCodeIdList.get(i)));
					masChargeCode.setId(Integer.parseInt(chargeCodeIdList.get(i)));
					//System.out.println("Integer.parseInt(chargeCodeIdList.get(i))--");
					patientInvestigationDetails.setChargeCode(masChargeCode);
					//patientInvestigationDetails.setQuantity(quantityList.get(i));
					//patientInvestigationDetails.setReferToMh(referToMhList.get(i));

					//patientInvestigationDetails.setClinicalNotes(clinicalList.get(i));
					hbt.save(patientInvestigationDetails);

					DgOrderdt dgOrderdt = new DgOrderdt();
					dgOrderdt.setOrderhd(dgOrderhd);
					masChargeCode.setId(Integer.parseInt(chargeCodeIdList.get(i)));
					dgOrderdt.setChargeCode(masChargeCode);
					//dgOrderdt.setOrderQty(quantityList.get(i));
					dgOrderdt.setBillingStatus(dgOrderBillingStatus);
					dgOrderdt.setCreatedby(userName);
					dgOrderdt.setCreatedon(consultationDateToInsert);
					dgOrderdt.setLastChgBy(user);
					dgOrderdt.setLastChgDate(consultationDateToInsert);
					dgOrderdt.setLastChgTime(consultationTime);
					dgOrderdt.setMsgSent("n");
					// method written for taking out the values of mascharge
					// code and subcharge
					Map masChargeMap = getMasChargeCodeFromChargeId(Integer
							.parseInt(chargeCodeIdList.get(i)));
					MasChargeCode masChargeCodeObj = (MasChargeCode) masChargeMap
					.get("masChargeCode");
					int mainChargeId = masChargeCodeObj.getMainChargecode()
					.getId();
					int subChargeId = masChargeCodeObj.getSubChargecode()
					.getId();
					if (masChargeCodeObj.getMainChargecode()
							.getMainChargecodeCode().equalsIgnoreCase("Lab")) {
						dgOrderdt.setOrderStatus("P");
					} else {
						dgOrderdt.setOrderStatus("P");
					}
					MasMainChargecode masMainChargecode = new MasMainChargecode();
					masMainChargecode.setId(mainChargeId);
					dgOrderdt.setMainChargecode(masMainChargecode);
					MasSubChargecode masSubChargecode = new MasSubChargecode();
					masSubChargecode.setId(subChargeId);
					dgOrderdt.setSubChargeid(masSubChargecode);
					// Added By Vinay 
					List<DgMasInvestigation> invList = new ArrayList<DgMasInvestigation>();
					invList = session.createCriteria(DgMasInvestigation.class).add(Restrictions.eq("ChargeCode.Id", Integer.parseInt(chargeCodeIdList.get(i)))).list();
					int invId=0;
					for(DgMasInvestigation list: invList)
					{
						invId = list.getId();
					}
					dgOrderdt.setInvestigation(new DgMasInvestigation(invId));
					//dgOrderdt.setInvestigationToMH(referToMhList.get(i));
					dgOrderdt.setInvestigationToMh("n");
					//dgOrderdt.setReferToMh(referToMhList.get(i));
					dgOrderdt.setReferToMh("n");
					hbt.saveOrUpdate(dgOrderdt);
				}

			
				// for Lab Order Booking////////////
			}
			*/
			
			
			/*else if (chargeCodeIdList.size() == 0 && mapForDS.get("otherInvestigation")!=null && !(mapForDS.get("otherInvestigation")).equals("")) {
				MasDepartment masDepartment = new MasDepartment();
				MasHospital masHospital = new MasHospital();
				Patient patient = new Patient();
				MasEmployee masEmployee2 = new MasEmployee();

				PatientInvestigationHeader patientInvestigationHeader = new PatientInvestigationHeader();

				patient.setId(hinId);
				patientInvestigationHeader.setHin(patient);

				masDepartment.setId(departmentId);
				patientInvestigationHeader.setDepartment(masDepartment);
				Visit visit = new Visit();
				visit.setId(visitId);
				patientInvestigationHeader.setVisit(visit);
				
				masHospital.setId(hospitalId);
				patientInvestigationHeader.setHospital(masHospital);
				patientInvestigationHeader.setStatus("p");
				patientInvestigationHeader
						.setInvestigationDate(consultationDateToInsert);
				patientInvestigationHeader.setInvestigationTime(consultationTime);
				patientInvestigationHeader.setClinicalNotes(clinicalNotes1);
				patientInvestigationHeader.setOpdPatientDetails(opdPatientDetails);
				hbt.save(patientInvestigationHeader);

				DgOrderhd dgOrderhd = new DgOrderhd();
				dgOrderhd.setOrderDate(consultationDateToInsert);
				dgOrderhd.setOrderTime(time1);
				masHospital.setId(hospitalId);
				dgOrderhd.setHospital(masHospital);
				patient.setId(hinId);
				dgOrderhd.setHin(patient);
				masDepartment.setId(departmentId);
				dgOrderhd.setDepartment(masDepartment);
				if (empId != 0) {
					masEmployee2.setId(empId);
					dgOrderhd.setPrescribedBy(masEmployee2);
				}
				dgOrderhd.setPatientType("OP");
				dgOrderhd.setTestType("Regular");
				dgOrderhd.setCreatedby(userName);
				dgOrderhd.setCreatedon(consultationDateToInsert);

				//orderSeqNo = generateOrderNumber();
				dgOrderhd.setOrderNo(orderSeqNo);
				if (visitId != 0) {
					visit = new Visit();
					visit.setId(visitId);
					dgOrderhd.setVisit(visit);
				}
				dgOrderhd.setClinicalNote(clinicalNotes1);
				dgOrderhd.setOrderStatus("P");
				dgOrderhd.setLabOrderStatus("P");
				dgOrderhd.setLastChgBy(user);
				dgOrderhd.setLastChgDate(consultationDateToInsert);
				dgOrderhd.setLastChgTime(consultationTime);
				dgOrderhd.setInvestigationRequestionNo(patientInvestigationHeader);
				dgOrderhd.setOtherInvestigation((String)mapForDS.get("otherInvestigation"));
				hbt.save(dgOrderhd);
				
			}
			*/
			if(physioRequisitionHeaderId!=0){
				PhysioRequisitionHeader requisitionHeader = (PhysioRequisitionHeader)hbt.load(PhysioRequisitionHeader.class, physioRequisitionHeaderId);
				requisitionHeader.setOpdPatientDetails(opdPatientDetails);
				requisitionHeader.setReqTime(consultationTime);
				requisitionHeader.setLastChgTime(consultationTime);
				hbt.update(requisitionHeader);
				
			}
		/*	if(procedureHeaderId!=0){
				procedureHeader = (ProcedureHeader)hbt.load(ProcedureHeader.class, procedureHeaderId);
				procedureHeader.setOpdPatientDetails(opdPatientDetails);
				procedureHeader.setLastChgTime(consultationTime);
				hbt.update(procedureHeader);
				
			}*/
			
			
			//code answer of psychology questionnaire 
			if(visitsave.getDepartment().getDepartmentCode().equalsIgnoreCase(departmentCodeForPhychiatrist))
			{
				List<OpdQaTransation > questionnaireTransactionList = session.createCriteria(OpdQaTransation.class)
										.add(Restrictions.eq("Visit.Id", visitsave.getId())).list();
				for( OpdQaTransation qaT: questionnaireTransactionList)
				{
					qaT.setOpdPatientDetails(opdPatientDetails);
					hbt.update(qaT);
				}
				
			}
			currentDepartmentCode = visitsave.getDepartment().getDepartmentCode();
			// }
			succesfullyAdded = true;
			tx.commit();
		} catch (Exception e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();

		} finally {
			// --------Session Closing----------
		//	session.close();
		}
		
	}	
		
		returnMap.put("currentDepartmentCode", currentDepartmentCode);
		returnMap.put("succesfullyAdded", succesfullyAdded);
		returnMap.put("orderSeqNo", orderSeqNo);
		return returnMap;
	}
	
	boolean checkForInsulinInjection(int itemId){
		
		boolean insulinStatus=false;
		Session session = null;
		session = (Session) getSession();
		MasStoreItem masStoreItem=null;
		masStoreItem=(MasStoreItem) session.load(MasStoreItem.class,itemId);
		if(null !=masStoreItem ){
			if(null !=masStoreItem.getInsulinInjection() && masStoreItem.getInsulinInjection().equalsIgnoreCase("y")){
				insulinStatus=true;
			}
		}
		
		return insulinStatus;
	}
	
	public Map<String, Object> submitProPatientTreatmentDetails(Map mapForDSPro) {
		Session session = (Session) getSession();
		Map<String, Object> returnMap = new HashMap<String, Object>();
		String orderSeqNo = "";
		boolean successfullyAdded = false;
		List <PatientPrescriptionDetails> proData=new ArrayList<PatientPrescriptionDetails>();
	  /*  List pvmsNoList = (List) mapForDS.get("pvmsNoList");
		List<Integer> frequencyList = (List) mapForDS.get("frequencyList");
		List<String> dosageList = (List) mapForDS.get("dosageList");
		List<String> typeLeftRightList = (List) mapForDS.get("typeLeftRightList");
		List<String> instructionList = (List) mapForDS.get("instructionList");
		List<Integer> totalList = (List) mapForDS.get("totalList");
		List<Integer> noOfDaysList = (List) mapForDS.get("noOfDaysList");
		List<String> remarksList = (List) mapForDS.get("remarksList");
		List<String> chargeCodeIdList = (List) mapForDS.get("chargeCodeIdList");
		List<Integer> quantityList = (List) mapForDS.get("quantityList");
		//List<String> clinicalList = (List) mapForDS.get("clinicalList");
		String[] diagnosisIdAray = (String[]) mapForDS.get("diagnosisIdAray");*/
		int visitId = (Integer) mapForDSPro.get("visitId");
		String userSrNo = (String)mapForDSPro.get("userSrNo");
		String query="SELECT ppd FROM PatientPrescriptionDetails ppd join ppd.Prescription pph where pph.Visit='"+visitId+"'";
		 proData=session.createQuery(query).list();
		Iterator itr=proData.iterator();
        int i=0;
    	try {
		while(itr.hasNext()){
			PatientPrescriptionDetails patientPrescriptionDetails=(PatientPrescriptionDetails)itr.next();
	
			Connection conn = null;
			Properties properties = new Properties();
			URL resourcePathHIC=Thread.currentThread().getContextClassLoader().getResource("hicDetails.properties");
			
				properties.load(resourcePathHIC.openStream());
			
			String hicDB = properties.getProperty("hicDB");
			String hicUser = properties.getProperty("hicUser");
			String hicPwd = properties.getProperty("hicPwd");
			String hicDbConfigure =  properties.getProperty("hicDbConfigure");
			
			if(hicDbConfigure.equals("yes")) {
				Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
				conn = DriverManager.getConnection(hicDB, hicUser, hicPwd);

				String procSql = "{ call SMC_HIC_INSERT_TREATMENT(?,?,?,?,?)}";
				CallableStatement csstmt = conn.prepareCall(procSql);
				csstmt.setString(1, patientPrescriptionDetails.getItem().getNomenclature());
				csstmt.setString(2, patientPrescriptionDetails.getDosage());
				csstmt.setString(3, (patientPrescriptionDetails.getInstruction()!= null ? patientPrescriptionDetails.getInstruction() : ""));
				csstmt.setString(4, (patientPrescriptionDetails.getRemarks()!= null ? patientPrescriptionDetails.getRemarks():"" ));
				csstmt.setInt(5, Integer.parseInt(userSrNo));
				csstmt.execute();
				csstmt.close();

				successfullyAdded = true;
			}
		}
       }catch (Exception e) {
			e.printStackTrace();
		} finally {
			// --------Session Closing----------
		//	session.close();
		}
		
		returnMap.put("succesfullyAdded", successfullyAdded);
		return returnMap;
	}

	







	/*public Map<String, Object> submitProPatientDetails(Map mapForDSPro) {
		Session session = (Session) getSession();
		Map<String, Object> returnMap = new HashMap<String, Object>();
		String orderSeqNo = "";
		boolean successfullyAdded = false;
		List <PatientPrescriptionDetails> proData=new ArrayList<PatientPrescriptionDetails>();
	    List pvmsNoList = (List) mapForDS.get("pvmsNoList");
		List<Integer> frequencyList = (List) mapForDS.get("frequencyList");
		List<String> dosageList = (List) mapForDS.get("dosageList");
		List<String> typeLeftRightList = (List) mapForDS.get("typeLeftRightList");
		List<String> instructionList = (List) mapForDS.get("instructionList");
		List<Integer> totalList = (List) mapForDS.get("totalList");
		List<Integer> noOfDaysList = (List) mapForDS.get("noOfDaysList");
		List<String> remarksList = (List) mapForDS.get("remarksList");
		List<String> chargeCodeIdList = (List) mapForDS.get("chargeCodeIdList");
		List<Integer> quantityList = (List) mapForDS.get("quantityList");
		//List<String> clinicalList = (List) mapForDS.get("clinicalList");
		String[] diagnosisIdAray = (String[]) mapForDS.get("diagnosisIdAray");
		int visitId = (Integer) mapForDSPro.get("visitId");
		String query="SELECT ppd FROM PatientPrescriptionDetails ppd join ppd.Prescription pph where pph.Visit='"+visitId+"'";
		System.out.println("thois is our query"+query);
		 proData=session.createQuery(query).list();
		System.out.println(proData.size());
		Iterator itr=proData.iterator();
        int i=0;
    	try {
		while(itr.hasNext()){
			PatientPrescriptionDetails patientPrescriptionDetails=(PatientPrescriptionDetails)itr.next();
		   System.out.println("ashutos singh successfullyexecuted");
	
			Connection conn = null;
			Properties properties = new Properties();
			URL resourcePathHIC=Thread.currentThread().getContextClassLoader().getResource("hicDetails.properties");
			
				properties.load(resourcePathHIC.openStream());
			
			String hicDB = properties.getProperty("hicDB");
			String hicUser = properties.getProperty("hicUser");
			String hicPwd = properties.getProperty("hicPwd");
			
				Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
				conn = DriverManager.getConnection(hicDB, hicUser, hicPwd);
				
		String procSql = "{ call INSERTTREATMENTDETAILS(?,?,?,?,?,?,?)}";
		CallableStatement csstmt = conn.prepareCall(procSql);
		csstmt.setInt(1, patientPrescriptionDetails.getId())	;
		csstmt.setInt(2,patientPrescriptionDetails.getPrescription().getId())	;
		csstmt.setString(3, patientPrescriptionDetails.getItem().getNomenclature());
		csstmt.setString(4, patientPrescriptionDetails.getDosage());
		csstmt.setString(5, (patientPrescriptionDetails.getInstruction()!= null ? patientPrescriptionDetails.getInstruction() : ""));
		csstmt.setString(6, (patientPrescriptionDetails.getRemarks()!= null ? patientPrescriptionDetails.getRemarks():"" ));
		csstmt.registerOutParameter(7,OracleTypes.CURSOR);
		csstmt.execute();
		csstmt.close();
		
		successfullyAdded = true;
		   System.out.println("after ashutos singh successfullyexecuted");
		}
       }catch (Exception e) {
			e.printStackTrace();
		} finally {
			// --------Session Closing----------
			session.close();
		}
		
		returnMap.put("succesfullyAdded", successfullyAdded);
		return returnMap;
	}*/

	public Map<String, Object> submitProPatientSicknessDetails(Map mapForDSPro) {
		//System.out.println("in sickness");
		Session session = (Session) getSession();
		Map<String, Object> returnMap = new HashMap<String, Object>();
		String orderSeqNo = "";
		boolean successfullyAdded = false;
		List <PatientPrescriptionDetails> proData=new ArrayList<PatientPrescriptionDetails>();
	  /*  List pvmsNoList = (List) mapForDS.get("pvmsNoList");
		List<Integer> frequencyList = (List) mapForDS.get("frequencyList");
		List<String> dosageList = (List) mapForDS.get("dosageList");
		List<String> typeLeftRightList = (List) mapForDS.get("typeLeftRightList");
		List<String> instructionList = (List) mapForDS.get("instructionList");
		List<Integer> totalList = (List) mapForDS.get("totalList");
		List<Integer> noOfDaysList = (List) mapForDS.get("noOfDaysList");
		List<String> remarksList = (List) mapForDS.get("remarksList");
		List<String> chargeCodeIdList = (List) mapForDS.get("chargeCodeIdList");
		List<Integer> quantityList = (List) mapForDS.get("quantityList");
		//List<String> clinicalList = (List) mapForDS.get("clinicalList");
		String[] diagnosisIdAray = (String[]) mapForDS.get("diagnosisIdAray");*/
		int visitId = (Integer) mapForDSPro.get("visitId");
		String[] diagnosisIdAray = (String[]) mapForDSPro.get("diagnosisIdAray");
		String disposal=mapForDSPro.get("disposal").toString();
		String queryDignosis = "";
		List objectList = new ArrayList();
		String diagnosisIdString=",";
		String diagnosisIdString1=null;
		String diagnosisNameString=",";
		String diagnosisNameString1=null;
		if(diagnosisIdAray !=null && diagnosisIdAray.length>0)
		{
		for (int i = 0; i < diagnosisIdAray.length; i++) {
			diagnosisIdString1= diagnosisIdAray[i].toString();
			diagnosisIdString+=diagnosisIdString1+"/";
			
			queryDignosis="select ICD_NAME from mas_icd where icd_code='"+ diagnosisIdAray[i].toString() + "'";
			objectList = (List) session.createSQLQuery(queryDignosis).list();
			if(objectList!=null){
				diagnosisNameString1= objectList.get(0).toString();
			   diagnosisNameString +=diagnosisNameString1+" /";
			}
		}
		}
	
		Date consultationDate=HMSUtil.convertStringTypeDateToDateType((String)mapForDSPro.get("consultationDate"));
		String query="SELECT vis,pph,pat,doc from Visit vis left join vis.PatientPrescriptionHeaders pph  left join vis.Hin pat left join vis.Doctor doc where vis.Id='"+visitId+"'";
		//String query="SELECT ppd FROM PatientPrescriptionDetails ppd join ppd.Prescription pph where pph.Visit='"+visitId+"'";
		//System.out.println("this is our query for sick reporting"+query);
		proData=session.createQuery(query).list();
		
		Iterator itr=proData.iterator();
		 String userSrNo = (String)mapForDSPro.get("userSrNo");
        int i=0;
    	try {
		while(itr.hasNext()){
			//System.out.println("this is in registration-------------------->>>>>>>>>>>");
			 Object[] tuple = (Object[]) itr.next();
			 Visit vis=(Visit)tuple[0];
			 PatientPrescriptionHeader pph=(PatientPrescriptionHeader)tuple[1];
			// DischargeIcdCode dic=(DischargeIcdCode)tuple[2];
			 Patient pat=(Patient)tuple[2];
			 MasEmployee doc=(MasEmployee)tuple[3];
			//System.out.println("ashutos singh successfullyexecuted");
			 Connection conn = null;
			 Properties properties = new Properties();
			 URL resourcePathHIC=Thread.currentThread().getContextClassLoader().getResource("hicDetails.properties");
			
				properties.load(resourcePathHIC.openStream());
			
			String hicDB = properties.getProperty("hicDB");
			String hicUser = properties.getProperty("hicUser");
			String hicPwd = properties.getProperty("hicPwd");
			String hicDbConfigure =  properties.getProperty("hicDbConfigure");
			if(hicDbConfigure.equals("yes")) {
				Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
				conn = DriverManager.getConnection(hicDB, hicUser, hicPwd);
				//csstmt.setString(5, (patientPrescriptionDetails.getInstruction()!= null ? patientPrescriptionDetails.getInstruction() : ""));
				SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
				String date_form=sdf.format(consultationDate);
				String procSql = "{ call SMC_HIC_INSERT_SMCSICKNESS(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
				CallableStatement csstmt = conn.prepareCall(procSql);
				csstmt.setString(1,date_form)	;
				csstmt.setInt(2,0);
				csstmt.setString(3,date_form);
				csstmt.setString(4,date_form);
				csstmt.setString(5,(disposal!= null ? disposal: ""));
				csstmt.setString(6,(diagnosisNameString.substring(1)!= null ? diagnosisNameString.substring(1): ""));
				csstmt.setString(7,date_form );
				csstmt.setInt(8,Integer.parseInt(userSrNo));
				csstmt.setString(9,(diagnosisIdString.substring(1)!= null ? diagnosisIdString.substring(1) : ""));
				csstmt.setString(10,(vis.getHospital()!= null ? vis.getHospital().getHospitalName() : ""));
				csstmt.setString(11,"");//HOSPITAL CATO NOT IN SMC
				csstmt.setString(12,(pat.getServiceNo()!= null ? pat.getServiceNo() : ""));
				csstmt.setString(13,(pat.getUnit()!= null ?pat.getUnit().getUnitName() : ""));
				csstmt.setString(14,(doc.getFirstName()!= null ? doc.getFirstName(): ""));
				csstmt.setString(15,(doc.getRank()!= null ? doc.getRank().getRankName() : ""));
				csstmt.setString(16,(doc.getUnit()!= null ? doc.getUnit().getUnitName() : ""));
				csstmt.setString(17,(doc.getDesignation()!= null ? doc.getDesignation() : ""));
				csstmt.setString(18,"");
				csstmt.setString(19,"");
				csstmt.registerOutParameter(20,OracleTypes.CURSOR);
				csstmt.execute();
				csstmt.close();
				successfullyAdded = true;
			}
		//System.out.println("after ashutos singh successfullyexecuted");
		}
       }catch (Exception e) {
			e.printStackTrace();
		}finally {
			// --------Session Closing----------
			//session.close();
		}
		returnMap.put("succesfullyAdded", successfullyAdded);
		return returnMap;
	}
public Map<String, Object> submitProPatientRegistrationDetails(Map mapForDSPro) {
		Session session = (Session) getSession();
		Map<String, Object> returnMap = new HashMap<String, Object>();
		String orderSeqNo = "";
		boolean successfullyAdded = false;
		List <PatientPrescriptionDetails> proData=new ArrayList<PatientPrescriptionDetails>();
	  /*  List pvmsNoList = (List) mapForDS.get("pvmsNoList");
		List<Integer> frequencyList = (List) mapForDS.get("frequencyList");
		List<String> dosageList = (List) mapForDS.get("dosageList");
		List<String> typeLeftRightList = (List) mapForDS.get("typeLeftRightList");
		List<String> instructionList = (List) mapForDS.get("instructionList");
		List<Integer> totalList = (List) mapForDS.get("totalList");
		List<Integer> noOfDaysList = (List) mapForDS.get("noOfDaysList");
		List<String> remarksList = (List) mapForDS.get("remarksList");
		List<String> chargeCodeIdList = (List) mapForDS.get("chargeCodeIdList");
		List<Integer> quantityList = (List) mapForDS.get("quantityList");
		//List<String> clinicalList = (List) mapForDS.get("clinicalList");
		String[] diagnosisIdAray = (String[]) mapForDS.get("diagnosisIdAray");*/
		int visitId = (Integer) mapForDSPro.get("visitId");
		String query="SELECT vi,pt FROM Visit vi join vi.Hin pt where vi.id='"+visitId+"'";
		 proData=session.createQuery(query).list();
		Iterator itr=proData.iterator();
        int i=0;
    	try {
		while(itr.hasNext()){
			 Object[] tuple = (Object[]) itr.next();

			 Visit vis=(Visit)tuple[0];
			 Patient pat=(Patient)tuple[1];
	
			 Connection conn = null;
			 Properties properties = new Properties();
			 URL resourcePathHIC=Thread.currentThread().getContextClassLoader().getResource("hicDetails.properties");
			
			 properties.load(resourcePathHIC.openStream());
			 
			 String hicDB = properties.getProperty("hicDB");
			 String hicUser = properties.getProperty("hicUser");
			 String hicPwd = properties.getProperty("hicPwd");
			 String hicDbConfigure =  properties.getProperty("hicDbConfigure");
			 if(hicDbConfigure.equals("yes")) {
				 Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
				 conn = DriverManager.getConnection(hicDB, hicUser, hicPwd);
				 String procSql = "{ call INSERTSMCREGISTRATIONDETAILS(?,?,?,?,?,?,?,?,?)}";
				 CallableStatement csstmt = conn.prepareCall(procSql);
				 csstmt.setString(1, pat.getServiceNo())	;
				 csstmt.setString(2,pat.getSection().getSectionName());
				 csstmt.setInt(3,7);
				 csstmt.setInt(4,7);
				 //		csstmt.setInt(5,vis.getReportingFor().getId());
				 csstmt.registerOutParameter(6,OracleTypes.NUMBER);
				 csstmt.setString(7,"conneted");
				 csstmt.setInt(8,1);
				 csstmt.registerOutParameter(9,OracleTypes.CURSOR);
				 csstmt.execute();
				 csstmt.close();		
				 successfullyAdded = true;
			 }
		}
       }catch (Exception e) {
			e.printStackTrace();
		} finally {
			// --------Session Closing----------
		//	session.close();
		}
		
		returnMap.put("succesfullyAdded", successfullyAdded);
		return returnMap;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> submitOPDPatientDetailsChange(Map mapForDS) {
		Session session = (Session) getSession();
		boolean succesfullyAdded = false;
		Map<String, Object> returnMap = new HashMap<String, Object>();
		String orderSeqNo = (String) mapForDS.get("orderSeqNo");
		List nomenclatureList = (List) mapForDS.get("nomenclatureList");
		List pvmsNoList = (List) mapForDS.get("pvmsNoList");
		List<Integer> frequencyList = (List) mapForDS.get("frequencyList");
		List<String> dosageList = (List) mapForDS.get("dosageList");
		List<String> remarksList = (List) mapForDS.get("remarksList");
		List<String> typeLeftRightList = (List) mapForDS
				.get("typeLeftRightList");
		List<String> instructionList = (List) mapForDS.get("instructionList");
		List<Integer> totalList = (List) mapForDS.get("totalList");
		List<Integer> noOfDaysList = (List) mapForDS.get("noOfDaysList");

		List<String> chargeCodeIdList = (List) mapForDS.get("chargeCodeIdList");
		List<Integer> quantityList = (List) mapForDS.get("quantityList");
		List<String> clinicalList = (List) mapForDS.get("clinicalList");
		String[] diagnosisIdAray = (String[]) mapForDS.get("diagnosisIdAray");
		int hinId = (Integer) mapForDS.get("hinId");
		int departmentId = (Integer) mapForDS.get("departmentId");
		int visitId = (Integer) mapForDS.get("visitId");
		int hospitalId = (Integer) mapForDS.get("hospitalId");
		// int height=(Integer)mapForDS.get("height");
		// int weight=(Integer)mapForDS.get("weight");
		// int pulse=(Integer)mapForDS.get("pulse");
		// String disposal=(String)mapForDS.get("disposal");

		int empId = (Integer) mapForDS.get("empId");
		int userId = (Integer) mapForDS.get("userId");
		
		Users user = new Users();
		user.setId(userId);

		// String bp=(String)mapForDS.get("bp");
		String userName = (String) mapForDS.get("userName");
		// String temperature=(String)mapForDS.get("temperature");
		String afmsDescription = (String) mapForDS.get("afmsDescription");
		// String referredDept=(String)mapForDS.get("referredDept");
		String consultationTime = (String) mapForDS.get("consultationTime");
		String consultationDate = (String) mapForDS.get("consultationDate");
		Date consultationDateToInsert = HMSUtil
				.convertStringTypeDateToDateType(consultationDate);
		// String initialDiagnosis=(String)mapForDS.get("initialDiagnosis");

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);

		String plan = (String) mapForDS.get("plan");
		String nextVisitDate = (String) mapForDS.get("nextVisitDate");
		String onExamination = (String) mapForDS.get("onExamination");

		String deleteInv = (String) mapForDS.get("deleteInv");
		String deleteDrug = (String) mapForDS.get("deleteDrug");
		String statusMsg = "";

		// //System.out.println(":::::::"+deleteInv+":::::::::::::"+deleteDrug);
		// String presentComplain=(String)mapForDS.get("presentComplain");
		// String presentIllness=(String)mapForDS.get("presentIllness");
		// String pastHistory=(String)mapForDS.get("pastHistory");
		// String personalHistory=(String)mapForDS.get("personalHistory");
		// String otherDetails=(String)mapForDS.get("otherDetails");
		// String familyHistory=(String)mapForDS.get("familyHistory");
		// String referredDoctars=(String) mapForDS.get("referredDoctars");
		Date nextVisitDateToInsert = HMSUtil
				.convertStringTypeDateToDateType(nextVisitDate);
		List<Integer> itemIdList = new ArrayList<Integer>();

		Transaction tx = null;

		try {
			tx = session.beginTransaction();
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			if (deleteInv.equals("on") && deleteInv != null) {
				List<PatientInvestigationHeader> pInvList = new ArrayList<PatientInvestigationHeader>();
				pInvList = session.createCriteria(
						PatientInvestigationHeader.class).add(
						Restrictions.eq("Visit.Id", visitId)).add(
						Restrictions.eq("Hin.Id", hinId)).list();

				boolean checkpoint = false;
				if (pInvList.size() > 0) {
					for (PatientInvestigationHeader paInv : pInvList) {
						int pHId = 0;
						pHId = paInv.getId();
						List<DgOrderhd> dgOrHdList = new ArrayList<DgOrderhd>();

						dgOrHdList = session.createCriteria(DgOrderhd.class)
								.add(
										Restrictions.eq(
												"InvestigationRequestionNo.Id",
												pHId)).list();

						for (DgOrderhd dgH : dgOrHdList) {
							List<DgSampleCollectionHeader> dgSHdList = new ArrayList<DgSampleCollectionHeader>();

							dgSHdList = session.createCriteria(
									DgSampleCollectionHeader.class).add(
									Restrictions.eq("Order.Id", dgH.getId()))
									.list();

							for (DgSampleCollectionHeader dgsam : dgSHdList) {
								if (dgsam.getOrderStatus()
										.equalsIgnoreCase("P")) {
									checkpoint = true;
								} else {
									checkpoint = false;
									break;
								}
							}

							if (checkpoint) {
								for (DgSampleCollectionHeader dgsam : dgSHdList) {
									String hq01 = "delete from jkt.hms.masters.business.DgSampleCollectionDetails as a where a.SampleCollectionHeader.Id='"
											+ dgsam.getId() + "'";
									Query query01 = session.createQuery(hq01);
									int row01 = query01.executeUpdate();
								}

								String hq02 = "delete from jkt.hms.masters.business.DgSampleCollectionHeader as a where a.Order.Id='"
										+ dgH.getId() + "'";
								Query query02 = session.createQuery(hq02);
								int row02 = query02.executeUpdate();

								String hq0 = "delete from jkt.hms.masters.business.DgOrderdt as a where a.Orderhd.Id='"
										+ dgH.getId() + "'";
								Query query0 = session.createQuery(hq0);
								int row0 = query0.executeUpdate();
							}
						}

						if (checkpoint) {
							String hq = "delete from jkt.hms.masters.business.DgOrderhd as a where a.InvestigationRequestionNo.Id='"
									+ pHId + "'";
							Query query = session.createQuery(hq);
							int row = query.executeUpdate();

							String hql = "delete from jkt.hms.masters.business.PatientInvestigationDetails as a where a.InvestigationHeader.Id='"
									+ pHId + "'";
							Query query1 = session.createQuery(hql);
							int row1 = query1.executeUpdate();

							String hq2 = "delete from jkt.hms.masters.business.PatientInvestigationHeader as a where a.Id='"
									+ pHId + "'";
							Query query2 = session.createQuery(hq2);
							int row2 = query2.executeUpdate();

							if (row == 0) {
								//System.out.println("Doesn't deleted any row!");
							} else {
								//System.out.println("Deleted	Row: " + row);
							}
						}

						if (!checkpoint) {
							statusMsg = "Samples are  collected you can not delete \n";
							break;
						}
					}
				}
			}

			if (deleteDrug.equals("on") && deleteDrug != null) {
				List<PatientPrescriptionHeader> pDrugList = new ArrayList<PatientPrescriptionHeader>();
				pDrugList = session.createCriteria(
						PatientPrescriptionHeader.class).add(
						Restrictions.eq("Visit.Id", visitId)).add(
						Restrictions.eq("Hin.Id", hinId)).list();
				int pDId = 0;
				if (pDrugList.size() > 0) {
					for (PatientPrescriptionHeader preHeader : pDrugList) {
						pDId = pDrugList.get(0).getId();

						Query deleteQuery = session
								.createQuery("delete from PatientPrescriptionDetails "
										+ "where Prescription.Id="
										+ preHeader.getId());
						int row = deleteQuery.executeUpdate();

						Query deleteQuery1 = session
								.createQuery("delete from PatientPrescriptionHeader "
										+ "where Id=" + preHeader.getId());
						int row1 = deleteQuery1.executeUpdate();

						if (row == 0) {
							//System.out.println("Doesn't deleted any row!");
						} else {
							//System.out.println("Deleted	Row: " + row);
						}
					}
				}
			}

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();
			
			Visit visitObj = new Visit();
			visitObj.setId(visitId);
			opdPatientDetails.setVisit(visitObj);
			if (empId != 0) {
				MasEmployee masEmployee = new MasEmployee();
				masEmployee.setId(empId);
				opdPatientDetails.setEmployee(masEmployee);
			}
			MasHospital masHospitalObj = new MasHospital();
			masHospitalObj.setId(hospitalId);
			opdPatientDetails.setHospital(masHospitalObj);
			// opdPatientDetails.setHeight(height);
			// opdPatientDetails.setDisposal(disposal);
			// opdPatientDetails.setWeight(weight);
			// opdPatientDetails.setPulse(pulse);
			// opdPatientDetails.setBp(bp);
			// if(!temperature.equals("")){
			// opdPatientDetails.setTemperature(Float.parseFloat(temperature));
			// }
			opdPatientDetails.setAfmsDesc(afmsDescription);
			opdPatientDetails.setConsultationTime(consultationTime);
			opdPatientDetails.setConsultationDate(consultationDateToInsert);
			opdPatientDetails.setPlan(plan);
			// opdPatientDetails.setInitialDiagnosis(initialDiagnosis);
			opdPatientDetails.setOpdDate(date);
			opdPatientDetails.setOpdTime(time);
			opdPatientDetails.setNextVisitDate(nextVisitDateToInsert);
			// opdPatientDetails.setReferredDept(referredDept);
			// opdPatientDetails.setReferedDoctars(referredDoctars);
			opdPatientDetails.setOnExamination(onExamination);
			hbt.save(opdPatientDetails);

			// --------------- values to be Opd Patient
			// History--------------------

			OpdPatientHistory opdPatientHistory = new OpdPatientHistory();

			MasDepartment md = new MasDepartment();
			md.setId(departmentId);
			opdPatientHistory.setDepartment(md);

			MasHospital mh = new MasHospital();
			mh.setId(hospitalId);
			opdPatientHistory.setHospital(mh);

			Patient p = new Patient();
			p.setId(hinId);
			opdPatientHistory.setHin(p);

			/*
			 * Visit visit = new Visit(); visit.setId(visitId);
			 */
			opdPatientHistory.setVisitInpatientId(visitId);

			opdPatientHistory.setLastChgTime(time);
			opdPatientHistory.setLastChgBy("admin");

			opdPatientHistory.setStatus("y");
			opdPatientHistory.setLastChgDate(date);

			// opdPatientHistory.setPersonalPastHistory(pastHistory);
			// opdPatientHistory.setPersonalPresentHistory(personalHistory);
			// opdPatientHistory.setPersonalOtherDetails(otherDetails);

			// opdPatientHistory.setFamilyPresentHistory(familyHistory);
			// opdPatientHistory.setPresentComplain(presentComplain);
			// opdPatientHistory.setPresentIllness(presentIllness);

			opdPatientHistory.setIpOpPacStatus("OP");

			opdPatientHistory.setOpdPatientDetails(opdPatientDetails);

			hbt.save(opdPatientHistory);

			// --------------- values to be updated in visit table to change
			// it's status--------------------

			Visit visitObjToUpdate = (Visit) hbt.load(Visit.class, visitId);
			visitObjToUpdate.setVisitStatus("C");
			hbt.update(visitObjToUpdate);

			// -----------------------------------------------------------------------------------

			// --------------values to be entered in discharge table for
			// diagnosis----------------------
			String query = "";
			List objectList = new ArrayList();
			if (diagnosisIdAray != null) {
				for (int i = 0; i < diagnosisIdAray.length; i++) {
					DischargeIcdCode dischargeIcdCode = new DischargeIcdCode();
					Patient patientObj = new Patient();
					patientObj.setId(hinId);
					dischargeIcdCode.setHin(patientObj);
					MasIcd masIcd = new MasIcd();
					//
					// masIcd.setId(Integer.parseInt(diagnosisIdAray[i]));
					// chnaget to Line Below

					if (diagnosisIdAray[i] != null) {
						if (!diagnosisIdAray[i].equals("0")) {
							query = "select icd_id from mas_icd where icd_code='"
									+ diagnosisIdAray[i] + "'";
							objectList = (List) session.createSQLQuery(query)
									.list();
							masIcd.setId(Integer.parseInt(""
									+ objectList.get(0)));
							dischargeIcdCode.setIcd(masIcd);
							dischargeIcdCode
									.setAddEditDate(consultationDateToInsert);
							dischargeIcdCode.setAddEditTime(consultationTime);
							dischargeIcdCode.setStatus("y");
							dischargeIcdCode.setDiagnosisStatus("p");
							Visit visit = new Visit();
							visit.setId(visitId);

							dischargeIcdCode.setVisit(visit);

							hbt.save(dischargeIcdCode);
						}
					}
				}
			}
			if (pvmsNoList.size() > 0) {
				PatientPrescriptionHeader patientPrescriptionHeader = new PatientPrescriptionHeader();
				Patient patient = new Patient();
				patient.setId(hinId);
				patientPrescriptionHeader.setHin(patient);
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(departmentId);
				patientPrescriptionHeader.setDepartment(masDepartment);
				Visit visit = new Visit();
				visit.setId(visitId);
				patientPrescriptionHeader.setVisit(visit);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				patientPrescriptionHeader.setHospital(masHospital);
				patientPrescriptionHeader.setStatus("p");
				patientPrescriptionHeader
						.setPrescriptionDate(consultationDateToInsert);
				patientPrescriptionHeader.setPrescriptionTime(consultationTime);
				hbt.save(patientPrescriptionHeader);

				for (int i = 0; i < pvmsNoList.size(); i++) {
					String pvmsNo = (String) pvmsNoList.get(i);
					String nomenclature = (String) nomenclatureList.get(i);
					int itemId = getItemIdFromPVMS(nomenclature,pvmsNo,hospitalId);
					itemIdList.add(itemId);
				}
				for (int i = 0; i < itemIdList.size(); i++) {
					PatientPrescriptionDetails patientPrescriptionDetails = new PatientPrescriptionDetails();
					MasStoreItem masStoreItem = new MasStoreItem();
					masStoreItem.setId(itemIdList.get(i));
					patientPrescriptionDetails.setItem(masStoreItem);
					MasFrequency masFrequency = new MasFrequency();
					masFrequency.setId(frequencyList.get(i));
					patientPrescriptionDetails.setFrequency(masFrequency);
					patientPrescriptionDetails.setDosage(dosageList.get(i));
					patientPrescriptionDetails.setRemarks(remarksList.get(i));
					patientPrescriptionDetails.setType(typeLeftRightList.get(i));
					patientPrescriptionDetails.setNoOfDays(noOfDaysList.get(i));
					patientPrescriptionDetails.setInstruction(instructionList
							.get(i));
					patientPrescriptionDetails
							.setPrescription(patientPrescriptionHeader);
					patientPrescriptionDetails.setTotal(totalList.get(i));
					hbt.save(patientPrescriptionDetails);
				}
			}
			Map<String, Object> utilMap1 = new HashMap<String, Object>();
			utilMap1 = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			
			String time1 = (String) utilMap1.get("currentTimeWithoutSc");
			
			if (chargeCodeIdList.size() > 0) {
				MasDepartment masDepartment = new MasDepartment();
				MasHospital masHospital = new MasHospital();
				Patient patient = new Patient();
				MasEmployee masEmployee2 = new MasEmployee();

				PatientInvestigationHeader patientInvestigationHeader = new PatientInvestigationHeader();

				patient.setId(hinId);
				patientInvestigationHeader.setHin(patient);

				masDepartment.setId(departmentId);
				patientInvestigationHeader.setDepartment(masDepartment);
				Visit visit = new Visit();
				visit.setId(visitId);
				patientInvestigationHeader.setVisit(visit);

				masHospital.setId(hospitalId);
				patientInvestigationHeader.setHospital(masHospital);
				patientInvestigationHeader.setStatus("p");
				patientInvestigationHeader
						.setInvestigationDate(consultationDateToInsert);
				patientInvestigationHeader
						.setInvestigationTime(consultationTime);
				hbt.save(patientInvestigationHeader);

				DgOrderhd dgOrderhd = new DgOrderhd();
				dgOrderhd.setOrderDate(consultationDateToInsert);
				dgOrderhd.setOrderTime(time1);
				masHospital.setId(hospitalId);
				dgOrderhd.setHospital(masHospital);
				patient.setId(hinId);
				dgOrderhd.setHin(patient);
				masDepartment.setId(departmentId);
				dgOrderhd.setDepartment(masDepartment);
				if (empId != 0) {
					masEmployee2.setId(empId);
					dgOrderhd.setPrescribedBy(masEmployee2);
				}

				dgOrderhd.setPatientType("OP");
				dgOrderhd.setTestType("Regular");
				dgOrderhd.setCreatedby(userName);
				dgOrderhd.setCreatedon(consultationDateToInsert);

				//orderSeqNo = generateOrderNumber(); By Tirath
				dgOrderhd.setOrderNo(orderSeqNo);
				if (visitId != 0) {
					visit = new Visit();
					visit.setId(visitId);
					dgOrderhd.setVisit(visit);
				}
				dgOrderhd.setOrderStatus("C");
				dgOrderhd.setLabOrderStatus("LC");
				dgOrderhd.setLastChgBy(user);
				dgOrderhd.setLastChgDate(consultationDateToInsert);
				dgOrderhd.setLastChgTime(consultationTime);
				dgOrderhd
						.setInvestigationRequestionNo(patientInvestigationHeader);
				hbt.save(dgOrderhd);

				for (int i = 0; i < chargeCodeIdList.size(); i++) {
					PatientInvestigationDetails patientInvestigationDetails = new PatientInvestigationDetails();
					patientInvestigationDetails
							.setInvestigationHeader(patientInvestigationHeader);
					MasChargeCode masChargeCode = new MasChargeCode();
					masChargeCode.setId(Integer.parseInt(chargeCodeIdList
							.get(i)));
					patientInvestigationDetails.setChargeCode(masChargeCode);
					patientInvestigationDetails
							.setQuantity(quantityList.get(i));
					patientInvestigationDetails.setClinicalNotes(clinicalList
							.get(i));
					hbt.save(patientInvestigationDetails);

					DgOrderdt dgOrderdt = new DgOrderdt();
					dgOrderdt.setOrderhd(dgOrderhd);
					masChargeCode.setId(Integer.parseInt(chargeCodeIdList
							.get(i)));
					dgOrderdt.setChargeCode(masChargeCode);
					dgOrderdt.setOrderQty(quantityList.get(i));

					dgOrderdt.setCreatedby(userName);
					dgOrderdt.setCreatedon(consultationDateToInsert);
					dgOrderdt.setLastChgBy(user);
					dgOrderdt.setLastChgDate(consultationDateToInsert);
					dgOrderdt.setLastChgTime(consultationTime);
					// method written for taking out the values of mascharge
					// code and subcharge
					Map masChargeMap = getMasChargeCodeFromChargeId(Integer
							.parseInt(chargeCodeIdList.get(i)));
					MasChargeCode masChargeCodeObj = (MasChargeCode) masChargeMap
							.get("masChargeCode");
					int mainChargeId = masChargeCodeObj.getMainChargecode()
							.getId();
					int subChargeId = masChargeCodeObj.getSubChargecode()
							.getId();
					if (masChargeCodeObj.getMainChargecode()
							.getMainChargecodeCode().equalsIgnoreCase("Lab")) {
						dgOrderdt.setOrderStatus("C");
					} else {
						dgOrderdt.setOrderStatus("P");
					}

					MasMainChargecode masMainChargecode = new MasMainChargecode();
					masMainChargecode.setId(mainChargeId);
					dgOrderdt.setMainChargecode(masMainChargecode);
					MasSubChargecode masSubChargecode = new MasSubChargecode();
					masSubChargecode.setId(subChargeId);
					dgOrderdt.setSubChargeid(masSubChargecode);
					dgOrderdt.setInvestigation(new DgMasInvestigation(Integer
							.parseInt(chargeCodeIdList.get(i))));
					hbt.save(dgOrderdt);
				}

				// ///////////// save Sample collection details for Radiology
				// test////////////////////

				String dateCollection = (String) utilMap.get("currentDate");
				String timeCollection = (String) utilMap.get("currentTime");

				DgSampleCollectionHeader dgSampleCollectionHeader = new DgSampleCollectionHeader();
				List<MasChargeCode> chargeCodeList = new ArrayList<MasChargeCode>();
				boolean goneInLoop = false;

				for (int j = 0; j < chargeCodeIdList.size() && !goneInLoop; j++) {
					int chargeCodeId = Integer.parseInt(""
							+ chargeCodeIdList.get(j));
					chargeCodeList = session
							.createCriteria(MasChargeCode.class).add(
									Restrictions.eq("Id", chargeCodeId))
							.createAlias("MainChargecode", "mcc").createAlias(
									"mcc.Department", "dept").createAlias(
									"dept.DepartmentType", "dt").add(
									Restrictions.eq("dt.DepartmentTypeCode",
											"RADIO")).list();
					if (chargeCodeList.size() > 0) {
						for (MasChargeCode chargeCode : chargeCodeList) {
							try {
								int inpatientId = 0;
								if (visitId != 0) {
									Visit visit1 = new Visit();
									visit1.setId(visitId);
									dgSampleCollectionHeader.setVisit(visit1);
									dgSampleCollectionHeader
											.setPatientType("OP");
								}

								if (hinId != 0) {
									Patient patient1 = new Patient();
									patient1.setId(hinId);
									dgSampleCollectionHeader.setHin(patient1);
								}
								if (hospitalId != 0) {
									MasHospital hospital = new MasHospital();
									hospital.setId(hospitalId);
									dgSampleCollectionHeader
											.setHospital(hospital);
								}

								if (departmentId != 0) {
									MasDepartment masDepartment1 = new MasDepartment();
									masDepartment1.setId(chargeCode
											.getMainChargecode()
											.getDepartment().getId());
									dgSampleCollectionHeader
											.setDepartment(masDepartment1);
								}

								if (departmentId != 0) {
									MasDepartment orderByDepartment = new MasDepartment();
									orderByDepartment.setId(departmentId);
									dgSampleCollectionHeader
											.setOrderByDepartment(orderByDepartment);
								}

								dgSampleCollectionHeader.setOrder(dgOrderhd);

								// if (departmentId != 0) {
								// DgCollectionCenter dgCollectionCenter = new
								// DgCollectionCenter();
								// dgCollectionCenter.setId(departmentId);
								// dgSampleCollectionHeader.setCollectionCenter(dgCollectionCenter);
								// }

								dgSampleCollectionHeader.setOrderStatus("P");
								dgSampleCollectionHeader.setLastChgBy(userName);
								dgSampleCollectionHeader
										.setLastChgDate(HMSUtil
												.convertStringTypeDateToDateType(dateCollection));
								dgSampleCollectionHeader.setLastChgTime(time);
								dgSampleCollectionHeader
										.setDiagnosisDate(HMSUtil
												.convertStringTypeDateToDateType(dateCollection));
								dgSampleCollectionHeader.setDiagnosisTime(time);
								hbt.save(dgSampleCollectionHeader);

							} catch (DataAccessException e) {
								e.printStackTrace();
							}
							try {

								for (int i = 0; i < chargeCodeIdList.size(); i++) {
									int chargeId = 0;
									if (chargeCodeIdList.get(i) != null
											&& !chargeCodeIdList.get(i).equals(
													"")) {
										chargeId = Integer
												.parseInt((String) chargeCodeIdList
														.get(i));
										MasChargeCode maschrgCode = (MasChargeCode) session
												.createCriteria(
														MasChargeCode.class)
												.add(
														Restrictions.eq("Id",
																chargeId))
												.list().get(0);
										if (maschrgCode.getMainChargecode()
												.getMainChargecodeCode()
												.equalsIgnoreCase("RADIO")) {
											MasChargeCode masChargeCode1 = new MasChargeCode();
											MasSubChargecode masSubChargecode1 = new MasSubChargecode();

											DgSampleCollectionDetails dgSampleCollectionDetails = new DgSampleCollectionDetails();
											dgSampleCollectionDetails
													.setSampleCollectionHeader(dgSampleCollectionHeader);

											dgSampleCollectionDetails
													.setCollected("y");

											masChargeCode1
													.setId(Integer
															.parseInt((String) chargeCodeIdList
																	.get(i)));
											dgSampleCollectionDetails
													.setChargeCode(masChargeCode1);

											MasMainChargecode masMainChargecode1 = new MasMainChargecode();
											masMainChargecode1
													.setId(maschrgCode
															.getMainChargecode()
															.getId());
											dgSampleCollectionDetails
													.setMaincharge(masMainChargecode1);

											dgSampleCollectionDetails
													.setSubcharge(maschrgCode
															.getSubChargecode());

											MasEmployee masEmployee1 = new MasEmployee();
											masEmployee1.setId(userId);
											dgSampleCollectionDetails
													.setCollectedBy(masEmployee1);

											dgSampleCollectionDetails
													.setDiagNo(generateDiagNumber(maschrgCode
															.getSubChargecode()
															.getId()));

											dgSampleCollectionDetails
													.setInvestigation(new DgMasInvestigation(
															chargeId));
											dgSampleCollectionDetails
													.setLastChgBy(userName);
											dgSampleCollectionDetails
													.setLastChgDate(HMSUtil
															.convertStringTypeDateToDateType(dateCollection));
											dgSampleCollectionDetails
													.setLastChgTime(time);
											dgSampleCollectionDetails
													.setRejected("n");
											dgSampleCollectionDetails
													.setSampleCollDatetime(new Date());
											dgSampleCollectionDetails
													.setOrderStatus("P");
											try {
												hbt
														.save(dgSampleCollectionDetails);
											} catch (RuntimeException e) {
												e.printStackTrace();
											}
										}
									}
								}
							} catch (NumberFormatException e) {
								e.printStackTrace();
							}
						}
						goneInLoop = true;
					}
				}
				// ///////////////////////////End Save details For Radio Order
				// Booking///////////////////////////

				// ////////////////////////// Save details order booking for lab
				// /////////////////////
				dgSampleCollectionHeader = new DgSampleCollectionHeader();
				chargeCodeList = new ArrayList<MasChargeCode>();
				goneInLoop = false;
				for (int j = 0; j < chargeCodeIdList.size() && !goneInLoop; j++) {
					int chargeCodeId = Integer.parseInt(""
							+ chargeCodeIdList.get(j));
					chargeCodeList = session
							.createCriteria(MasChargeCode.class).add(
									Restrictions.eq("Id", chargeCodeId))
							.createAlias("MainChargecode", "mcc").createAlias(
									"mcc.Department", "dept").createAlias(
									"dept.DepartmentType", "dt").add(
									Restrictions.eq("dt.DepartmentTypeCode",
											"DIAG")).list();

					if (chargeCodeList.size() > 0) {
						for (MasChargeCode chargeCode : chargeCodeList) {
							try {
								int inpatientId = 0;
								if (visitId != 0) {
									Visit visit1 = new Visit();
									visit1.setId(visitId);
									dgSampleCollectionHeader.setVisit(visit1);
									dgSampleCollectionHeader
											.setPatientType("OP");
								}
								if (hinId != 0) {
									Patient patient1 = new Patient();
									patient1.setId(hinId);
									dgSampleCollectionHeader.setHin(patient1);
								}
								if (hospitalId != 0) {
									MasHospital hospital = new MasHospital();
									hospital.setId(hospitalId);
									dgSampleCollectionHeader
											.setHospital(hospital);
								}
								if (departmentId != 0) {
									MasDepartment masDepartment1 = new MasDepartment();
									masDepartment1.setId(chargeCode
											.getMainChargecode()
											.getDepartment().getId());
									dgSampleCollectionHeader
											.setDepartment(masDepartment1);
								}
								if (departmentId != 0) {
									MasDepartment orderByDepartment = new MasDepartment();
									orderByDepartment.setId(departmentId);
									dgSampleCollectionHeader
											.setOrderByDepartment(orderByDepartment);
								}
								dgSampleCollectionHeader.setOrder(dgOrderhd);
								// DgCollectionCenter dgCollectionCenter = new
								// DgCollectionCenter();
								// dgCollectionCenter.setId(departmentId);
								// dgSampleCollectionHeader.setCollectionCenter(dgCollectionCenter);
								dgSampleCollectionHeader.setOrderStatus("P");
								dgSampleCollectionHeader.setLastChgBy(userName);
								dgSampleCollectionHeader
										.setLastChgDate(HMSUtil
												.convertStringTypeDateToDateType(dateCollection));
								dgSampleCollectionHeader.setLastChgTime(time);
								dgSampleCollectionHeader
										.setDiagnosisDate(HMSUtil
												.convertStringTypeDateToDateType(dateCollection));
								dgSampleCollectionHeader.setDiagnosisTime(time);
								hbt.save(dgSampleCollectionHeader);
							} catch (DataAccessException e) {
								e.printStackTrace();
							}
							try {
								for (int i = 0; i < chargeCodeIdList.size(); i++) {
									int chargeId = 0;
									if (chargeCodeIdList.get(i) != null
											&& !chargeCodeIdList.get(i).equals(
													"")) {
										chargeId = Integer
												.parseInt((String) chargeCodeIdList
														.get(i));
										MasChargeCode maschrgCode = (MasChargeCode) session
												.createCriteria(
														MasChargeCode.class)
												.add(
														Restrictions.eq("Id",
																chargeId))
												.list().get(0);
										if (maschrgCode.getMainChargecode()
												.getMainChargecodeCode()
												.equalsIgnoreCase("Lab")) {
											DgSampleCollectionDetails dgSampleCollectionDetails = new DgSampleCollectionDetails();
											dgSampleCollectionDetails
													.setSampleCollectionHeader(dgSampleCollectionHeader);
											dgSampleCollectionDetails
													.setCollected("y");
											dgSampleCollectionDetails
													.setChargeCode(maschrgCode);
											MasMainChargecode masMainChargecode1 = new MasMainChargecode();
											masMainChargecode1
													.setId(maschrgCode
															.getMainChargecode()
															.getId());
											dgSampleCollectionDetails
													.setMaincharge(masMainChargecode1);
											dgSampleCollectionDetails
													.setSubcharge(maschrgCode
															.getSubChargecode());
											MasEmployee masEmployee1 = new MasEmployee();
											masEmployee1.setId(userId);
											dgSampleCollectionDetails
													.setCollectedBy(masEmployee1);
											dgSampleCollectionDetails
													.setDiagNo(generateDiagNumber(maschrgCode
															.getSubChargecode()
															.getId()));
											dgSampleCollectionDetails
													.setInvestigation(new DgMasInvestigation(
															chargeId));
											dgSampleCollectionDetails
													.setLastChgBy(userName);
											dgSampleCollectionDetails
													.setLastChgDate(HMSUtil
															.convertStringTypeDateToDateType(dateCollection));
											dgSampleCollectionDetails
													.setLastChgTime(time);
											dgSampleCollectionDetails
													.setRejected("n");
											dgSampleCollectionDetails
													.setSampleCollDatetime(new Date());
											dgSampleCollectionDetails
													.setOrderStatus("P");
											try {
												hbt
														.save(dgSampleCollectionDetails);
											} catch (RuntimeException e) {
												e.printStackTrace();
											}
										}
									}
								}
							} catch (NumberFormatException e) {
								e.printStackTrace();
							}
						}
						goneInLoop = true;
					}
				}

				// /////////////////////// End Saving sampleCollection Details
				// for Lab Order Booking////////////
			}
			// }
			succesfullyAdded = true;
			tx.commit();
		} catch (Exception e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();

		} finally {
			// --------Session Closing----------
			session.close();
		}
		returnMap.put("succesfullyAdded", succesfullyAdded);
		returnMap.put("orderSeqNo", orderSeqNo);
		returnMap.put("statusMsg", statusMsg);
		return returnMap;
	}

	@SuppressWarnings("unchecked")
	public int getTransactionSequenceNoForOrderNo() {
		Session session = (Session) getSession();
		List<TransactionSequence> orderNoList = new ArrayList<TransactionSequence>();
		String tableName = "DgOrderhd";

		try {

			Criteria crit = session.createCriteria(TransactionSequence.class)
					.add(Restrictions.eq("Tablename", tableName));
			orderNoList = crit.list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		TransactionSequence transactionSequence = orderNoList.get(0);
		int orderNo = transactionSequence.getTransactionSequenceNumber();

		return orderNo;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getMasChargeCodeFromChargeId(int chargeId) {
		Session session = (Session) getSession();
		List<MasChargeCode> masChargeList = new ArrayList<MasChargeCode>();
		Map<String, Object> map = new HashMap<String, Object>();
		try {

			Criteria crit = session.createCriteria(MasChargeCode.class).add(
					Restrictions.eq("Id", chargeId));
			masChargeList = crit.list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		MasChargeCode masChargeCode = masChargeList.get(0);

		map.put("masChargeCode", masChargeCode);

		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getPreviousPatientVisit(Map mapForDS) {
		Session session = (Session) getSession();
		List<OpdPatientHistory> patientPreviousVisitList = new ArrayList<OpdPatientHistory>();
		//List<OpdPatientHistory> patientPreviousVisitList1 = new ArrayList<OpdPatientHistory>();
		List<Object[]> patientPreviousVisitHISList = new ArrayList<Object[]>();
		List<Object> visitInfoList = new ArrayList<Object>();
		List<Object> patientInvestigationList = new ArrayList<Object>();
		List<Object> tempList=null;
		List<String> tempList1 = null;
		/*for (Iterator iterator = patientInvestigationList.iterator(); iterator
				.hasNext();) {
			Object object = (Object) iterator.next();
			
		}*/
		List<Integer> maxVisitIdList = new ArrayList<Integer>();
		List<Integer> minVisitIdList = new ArrayList<Integer>();
		Map<String, Object> map = new HashMap<String, Object>();

		//int deptId = (Integer) mapForDS.get("deptId");
		int hinId = (Integer) mapForDS.get("hinId");
		int visitNo = 0;
		if(mapForDS.get("visitNo")!=null)
			visitNo = (Integer) mapForDS.get("visitNo");
		String reportingFor = "";
		if(mapForDS.get("reportingFor") != null){
			reportingFor = (String)mapForDS.get("reportingFor");
		}
		
		String hinNo="";
		hinNo =(String) mapForDS.get("hinNo");
		
		Properties properties = new Properties();
		URL resourcePath = Thread.currentThread().getContextClassLoader()
				.getResource("adt.properties");
		try {
			properties.load(resourcePath.openStream());
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		/*Map connMap = HMSUtil.getConnectionForReportForHIS();
		Connection conn = (Connection) connMap.get("conn");
		Statement st = null;
		ResultSet rs = null;
		Statement st1 = null;
		ResultSet rs1 = null;
		try{
			st = conn.createStatement();
			st1 = conn.createStatement();
		}
		catch(Exception e){
			e.printStackTrace();
		}*/
		
		
		String OTHER_DB = properties.getProperty("OTHER_DB");
		//int visitId = (Integer) mapForDS.get("visitId");
		String his = "his";
		
		//String serviceNo = (String) mapForDS.get("serviceNo");
		try {
			
			if(!reportingFor.equals("")&& reportingFor.equalsIgnoreCase("FamilyWC"))
			{
			Criteria crit = session.createCriteria(Visit.class).
			add(Restrictions.eq("ReportingFor", "FamilyWC")).
			createAlias(
					"Hin", "hin").add(Restrictions.eq("hin.Id", hinId)).add(
					Restrictions.eq("VisitStatus", "C")).addOrder(
					Order.desc("Id"));
			patientPreviousVisitList = crit.list();
			
			if(visitNo!=0){
			Criteria critMaxVisitId = session.createCriteria(Visit.class).
			add(Restrictions.eq("ReportingFor", "FamilyWC")).
					createAlias("Hin", "hin").add(
							Restrictions.eq("hin.Id", hinId)).add(
							Restrictions.lt("VisitNo", visitNo)).add(
							Restrictions.eq("VisitStatus", "C")).setProjection(
							Projections.max("Id")).addOrder(
							Order.desc("Id"));
			maxVisitIdList = critMaxVisitId.list();

			Criteria critMinVisitId = session.createCriteria(Visit.class).
			add(Restrictions.eq("ReportingFor", "FamilyWC")).
					createAlias("Hin", "hin").add(
							Restrictions.eq("hin.Id", hinId)).add(
							Restrictions.lt("VisitNo", visitNo)).add(
							Restrictions.eq("VisitStatus", "C")).setProjection(
							Projections.min("Id")).addOrder(
							Order.desc("Id"));
			minVisitIdList = critMinVisitId.list();
			}
			}else
			{
			
				
				
			/*	String qry="select mv.visit_id,mv.visit_no,mv.token_no,mv.hin_id,mv.visit_date,mp.service_no," +
						" concat(mp.p_first_name,concat(mp.p_middle_name,mp.p_last_name))as patientName," +
						" concat(mme.first_name,concat(mme.middle_name,mme.last_name))as doctor_name,mopd.disposal,mp.hin_no,0 as no_of_days,mopd.initial_diagnosis,mv.hospital_id,mhosp.hospital_name,'mednet' as db_flag from visit mv" +
						" left outer join patient mp on mv.hin_id=mp.hin_id" +
						" left outer join mas_employee mme on mv.doctor_id=mme.employee_id" +
						" left outer join opd_patient_details mopd on mopd.visit_id=mv.visit_id " +
						" left outer join mas_hospital mhosp on mhosp.hospital_id=mv.hospital_id " +
						" where mp.hin_no='"+hinNo +"'"+
						" and lower(mv.visit_status)!='w'" + 
						" order by visit_id desc";
				
				String qry = "select visit_id,visit_no,token_no,hin_id,visit_date,service_no,patientName, doctor_name, disposal,hin_no,no_of_days,initial_diagnosis,hospital_id,hospital_name,db_flag from "+
						" (select Distinct v.visit_id,v.visit_no,v.token_no,v.hin_id,v.visit_date,p.service_no, concat(p.p_first_name,concat(p.p_middle_name,p.p_last_name))as patientName, " +
						" concat(me.first_name,concat(me.middle_name,me.last_name))as doctor_name,opd.disposal,p.hin_no,NVL(opd.no_of_days,0) as no_of_days,opd.initial_diagnosis,v.hospital_id,hosp.hospital_name,'his' as db_flag from visit v " +
						" left outer join patient p on v.hin_id=p.hin_id" +
						" left outer join mas_employee me on v.doctor_id=me.employee_id" +
						" left outer join opd_patient_details opd on opd.visit_id=v.visit_id " +
						" left outer join mas_hospital hosp on hosp.hospital_id=v.hospital_id " +
						" where p.hin_no='"+hinNo +"'"+
						" and lower(v.visit_status)!='w' and v.visit_status='C') order by visit_id desc"; 
				
				try{
					
					if(conn != null)
					{
						rs = st.executeQuery(qry);
						int count = rs.getRow();
						int n = rs.getMetaData().getColumnCount();
						
						while(rs.next()){
							tempList = new ArrayList<Object>();
							for(int i=1; i<=n; i++){
								tempList.add(rs.getString(i));
							}
						}
						if(tempList != null)
						{
							patientPreviousVisitHISList.add(tempList.toArray());
							tempList.clear();
						}
							
					}
					
				}
				catch(SQLException e){
					e.printStackTrace();
				}

				String qry1 = "SELECT department_id, view_proct_info, visit_id,db_flag FROM " +
						"(SELECT visit.department_id AS department_id, opd_patient_details.view_proct_info AS view_proct_info, visit.visit_id AS visit_id,'his' as db_flag FROM visit " +
						" JOIN opd_patient_details ON visit.visit_id = opd_patient_details.visit_id LEFT OUTER JOIN patient ON visit.hin_id =patient.hin_id " +
						" WHERE hin_no ='"+hinNo +"' and visit.visit_status='C')" +
						" ORDER BY visit_id DESC";
				
				
				try{
					if(conn != null)
					{
						rs1 = st1.executeQuery(qry1);
						int n = rs1.getMetaData().getColumnCount();
						while(rs1.next()){
							tempList1 = new ArrayList<String>();
							for(int i=1; i<=n; i++){
								tempList1.add(rs1.getString(i));
							}
							visitInfoList.add(tempList1);
						}
					}
					
				}
				catch(SQLException e){
					e.printStackTrace();
				}
				
				
				
				//patientPreviousVisitHISList = (List) session.createSQLQuery(qry).list();
					System.out.println("patientPreviousVisitHISList="+patientPreviousVisitHISList.size());
				
				*/
				
			/*		Criteria crit = session.createCriteria(Visit.class).createAlias(
				"Hin", "hin").add(Restrictions.eq("hin.Id", hinId)).add(
				Restrictions.eq("VisitStatus", "C")).addOrder(
				Order.desc("Id"));
		patientPreviousVisitList = crit.list();*/
		
	
		Criteria crit = session.createCriteria(OpdPatientHistory.class).
				createAlias("OpdPatientDetails", "opd").createAlias("opd.Visit", "v").
				createAlias("v.Hin", "h").
				add(Restrictions.eq("h.Id", hinId))
				.add(Restrictions.or(Restrictions.eq("v.VisitStatus", "C"), Restrictions.eq("v.VisitStatus", "F")))
				.addOrder(Order.desc("v.Id"));
				patientPreviousVisitList = crit.list();
					
				if(visitNo!=0){
				Criteria critMaxVisitId = session.createCriteria(Visit.class)
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).add(
								Restrictions.lt("VisitNo", visitNo))
								.add(Restrictions.or(Restrictions.eq("VisitStatus", "C"), Restrictions.eq("VisitStatus", "F")))
								.setProjection(Projections.max("Id"))
								/*.addOrder(Order.desc("Id"))*/;
				maxVisitIdList = critMaxVisitId.list();
				Criteria critMinVisitId = session.createCriteria(Visit.class)
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).add(
								Restrictions.lt("VisitNo", visitNo)).add(Restrictions.or(Restrictions.eq("VisitStatus", "C"), Restrictions.eq("VisitStatus", "F"))).setProjection(
								Projections.min("Id"))
								/*.addOrder(Order.desc("Id"))*/;
				minVisitIdList = critMinVisitId.list();
				}
			}
			Query qry =session.createQuery("select pih,visit,hin from jkt.hms.masters.business.PatientInvestigationHeader as pih join pih.Hin as hin join pih.Visit as visit where hin.Id=:hinId");
			if(hinId!=0){
				qry.setParameter("hinId", hinId);
			}
			patientInvestigationList = qry.list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		
	
		map.put("patientPreviousVisitList", patientPreviousVisitList);
		map.put("maxVisitIdList", maxVisitIdList);
		map.put("minVisitIdList", minVisitIdList);
		map.put("patientInvestigationList", patientInvestigationList);
	//	map.put("patientPreviousVisitHISList", patientPreviousVisitHISList);
		map.put("visitInfoList", visitInfoList);
		
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> viewPreviousVisit(Map mapForDS) {
		Session session = (Session) getSession(); 
		List<OpdPatientDetails> patientVisitDataList = new ArrayList<OpdPatientDetails>();
		List<OpdPatientHistory> opdPatientHistoryList = new ArrayList<OpdPatientHistory>();
		List<DischargeIcdCode> patientDiagnosisList = new ArrayList<DischargeIcdCode>();
		List<PatientPrescriptionHeader> patientPrescHList = new ArrayList<PatientPrescriptionHeader>();
		List<PatientPrescriptionDetails> patientPrescDList = new ArrayList<PatientPrescriptionDetails>();
		List<PatientInvestigationHeader> patientInvesHList = new ArrayList<PatientInvestigationHeader>();
		List<PatientInvestigationDetails> patientInvesDList = new ArrayList<PatientInvestigationDetails>();
		Map<String, Object> map = new HashMap<String, Object>();

		List deptList = new ArrayList<String>();
		@SuppressWarnings("unused")
		int visitId = (Integer) mapForDS.get("visitId");

		try {

			Criteria crit = session.createCriteria(OpdPatientDetails.class)
					.createAlias("Visit", "visit").add(
							Restrictions.eq("visit.Id", visitId));
			patientVisitDataList = crit.list();

			patientDiagnosisList = session.createCriteria(
					DischargeIcdCode.class).createAlias("Visit", "visit").add(
					Restrictions.eq("visit.Id", visitId)).list();

			opdPatientHistoryList = session.createCriteria(
					OpdPatientHistory.class).add(
					Restrictions.eq("VisitInpatientId", visitId)).list();

			patientPrescHList = session.createCriteria(
					PatientPrescriptionHeader.class).createAlias("Visit",
					"visit").add(Restrictions.eq("visit.Id", visitId)).list();

			if (patientPrescHList.size() > 0) {
				PatientPrescriptionHeader patientPrescriptionHeader = patientPrescHList
						.get(0);
				int presHId = patientPrescriptionHeader.getId();
				patientPrescDList = session.createCriteria(
						PatientPrescriptionDetails.class).createAlias(
						"Prescription", "hId").add(
						Restrictions.eq("hId.Id", presHId)).list();
			}
			patientInvesHList = session.createCriteria(
					PatientInvestigationHeader.class).createAlias("Visit",
					"visit").add(Restrictions.eq("visit.Id", visitId)).list();
			if (patientInvesHList.size() > 0) {
				PatientInvestigationHeader patientInvestigationHeader = patientInvesHList
						.get(0);
				int invesHId = patientInvestigationHeader.getId();
				patientInvesDList = session.createCriteria(
						PatientInvestigationDetails.class).createAlias(
						"InvestigationHeader", "invesHId").add(
						Restrictions.eq("invesHId.Id", invesHId)).list();
			}

			// ----------list of referred department taken out from opd patient
			// details table--------
			if (patientVisitDataList.size() > 0) {
				OpdPatientDetails opdPatientDetails = (OpdPatientDetails) patientVisitDataList
						.get(0);
				String referredDept = opdPatientDetails.getReferredDept();
				if (referredDept != null && !referredDept.equals("")) {
					String[] dept = referredDept.split(",");
					for (int i = 0; i < dept.length; i++) {
						int deptId = Integer.parseInt(dept[i]);
						String deptName = "";
						Map<String, Object> deptMap = getDepartmentNameFromId(deptId);
						if (deptMap.get("deptName") != null) {
							deptName = (String) deptMap.get("deptName");
						}
						deptList.add(deptName);
					}
				}
			}
			// -------------------------------End of code for referred
			// depatment---------------------
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("deptList", deptList);
		map.put("patientVisitDataList", patientVisitDataList);
		map.put("patientDiagnosisList", patientDiagnosisList);
		map.put("patientPrescDList", patientPrescDList);
		map.put("patientInvesDList", patientInvesDList);
		map.put("opdPatientHistoryList", opdPatientHistoryList);
		return map;
	}

	@Override
	public Map<String, Object> uploadAndViewDocuments(Map<String, Object> generalMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		
		
		List<UploadDocuments> uploadDocuments = new ArrayList<UploadDocuments>();
		Session session = (Session)getSession();
		int hinId = 0;
		int visitId =0;
		int inpatientId=0;
		int referralHeaderId=0;
		int userId = 0;
		String flag="n";
		String message="";
		String uploadFrom ="NA";
		boolean fileuploaded=false;
		
		if(generalMap.get("hinId")!= null){
			hinId =(Integer) generalMap.get("hinId");
		}
		if(generalMap.get("visitId")!= null){
			visitId =(Integer) generalMap.get("visitId");
		}
		if(generalMap.get("inpatientId")!= null){
			inpatientId =(Integer) generalMap.get("inpatientId");
		}
		
		if(generalMap.get("referralHeaderId")!= null){
			referralHeaderId =(Integer) generalMap.get("referralHeaderId");
		}
		
		if(generalMap.get("flag")!= null){
			flag =(String) generalMap.get("flag");
		}
		if(generalMap.get("uploadFrom")!= null){
			uploadFrom =(String) generalMap.get("uploadFrom");
		}
		
		
		if(generalMap.get(USER_ID)!= null){
		 userId =(Integer) generalMap.get(USER_ID);
		}
		
		
		String filename = "";
		if(generalMap.get("filename")!= null){
			filename =(String) generalMap.get("filename");
		}
		String uploadURL = "";
		if(generalMap.get("uploadURL")!= null){
			uploadURL =(String) generalMap.get("uploadURL");
		}
		String comments = "";
		if(generalMap.get("comments")!= null){
			comments =(String) generalMap.get("comments");
		}
		
		
		if(flag.equalsIgnoreCase("y"))
		{
			
			String fileExtension=null;
			 File file=null;
			 try { 
					HibernateTemplate hbt=getHibernateTemplate();
					hbt.setFlushModeName("FLUSH_EAGER");
					hbt.setCheckWriteOperations(false);
					//System.out.println(uploadURL+" -- "+filename);
					 file=new File(uploadURL + "/" + filename);
		    	//	 System.out.println("path>>"+file.getPath());
		    		
		    	     FileInputStream is = new FileInputStream(file);
		    	     long length = file.length();
		    	     ByteBuffer byteBuff=null;
		    	   //  int modLength=length/
		    	     if (length > Integer.MAX_VALUE) {
		            // File is too large
		    	     }
		    	     // Create the byte array to hold the data
		    	     byte[] bytes = new byte[(int)length];
		    	     int offset = 0;
		    	     int numRead = 0;
		    	     while (offset < bytes.length
		    	    		 && (numRead=is.read(bytes, offset, bytes.length-offset)) >= 0) {
		    	    	 offset += numRead;
		    	    	
		    	     }
		    
		    	     if (offset < bytes.length) {
		    	    	 throw new IOException("Could not completely read file "+file.getName());
		    	         
		    	     }
		    	     is.close();     
		    	
		    	     
		    	     UploadDocuments document = new UploadDocuments();
		    	     document.setPatientDocument(bytes);
		    	     int indexNo = filename.lastIndexOf("."); 
		    	     String actualfileName = filename.substring(0, indexNo);
		    	     fileExtension = filename.substring(indexNo+1);
		    	     document.setFileName(actualfileName);
		    	     document.setFileExtension(fileExtension);
		    	     Date d= new Date();
		    	     document.setUploadDate(d);
		    	     
		    	     if(uploadFrom.equalsIgnoreCase("OPD") && visitId !=0)
		    	     {
		    	    	 Visit visit = new Visit();
		    	    	 visit.setId(visitId);
		    	    	 document.setVisit(visit);
		    	     }
		    	     if(uploadFrom.equalsIgnoreCase("IP") && inpatientId !=0)
		    	     {
		    	    	 Inpatient ip = new Inpatient();
		    	    	 ip.setId(inpatientId);
		    	    	 document.setInpatient(ip);
		    	     }
		
		    	     if(uploadFrom.equalsIgnoreCase("Referral") && referralHeaderId !=0)
		    	     {
		    	    	 ReferralPatientHeader rh = new ReferralPatientHeader();
		    	    	 rh.setId(referralHeaderId);
		    	    	 document.setReferralHeader(rh);
		    	     }
		    	     if(userId !=0)
		    	     {
		    	    	 Users user = new Users();
		    	    	 user.setId(userId);
		    	    	 document.setLastChgBy(user);
		    	     }
		    	     Patient hinNo= new Patient();
		    	     hinNo.setId(hinId);
		    	     document.setHin(hinNo);
		    	    
		    	     document.setDescription(comments);
		    	     hbt.save(document);
		    	     hbt.flush();
		    	     hbt.refresh(document);	
		    	     message="File uploaded Sucessfully";
		    	     fileuploaded=true;
		    
		    }
			catch (Exception e) {
		    	e.printStackTrace();
		      System.err.println("Error: " + e.getMessage());
		      message="File is not uploaded Sucessfully, some error is occurred";
		      e.printStackTrace();
		    }
			
		}		
		
		
	    Criteria cr = session.createCriteria(UploadDocuments.class).createAlias("Hin", "hin").add(Restrictions.eq("hin.Id", hinId));
	    if(referralHeaderId!=0)
	    {
	    	cr.add(Restrictions.eq("ReferralHeader.Id", referralHeaderId));
	    }
	    uploadDocuments = cr.list();
		map.put("visitId", visitId);
		map.put("inpatientId", inpatientId);
		map.put("referralHeaderId", referralHeaderId);
		map.put("uploadDocuments", uploadDocuments);
		map.put("message", message);
		map.put("fileuploaded", fileuploaded);
		return map;
	}

	public Map<String, Object> viewPreAnesthesiaDetails(Map mapForDS) {//pacs details
		Session session = (Session) getSession();
		Criteria crit = null;
		List<OpdSurgeryDetail> opdDtList = new ArrayList<OpdSurgeryDetail>();
		List<OtPreAnesthesiaHd> otPreAnesthesiaDetailsList = new ArrayList<OtPreAnesthesiaHd>();
		List<OtPreAnesthesiaDetail > otPreAnesthesiaSurgeryList = new ArrayList<OtPreAnesthesiaDetail>();
		List<OtPreOpDrugsEntry> otPreOPDrugsList = new ArrayList<OtPreOpDrugsEntry>();
		//List<OpdPatientHistory> opdPatientHistoryList = new ArrayList<OpdPatientHistory>();
		List<OtPreAnesthesiaHd>OtPreAnesthesiaDetailsList=new ArrayList<OtPreAnesthesiaHd>();

	   // List<PatientFamilyHistory>  medicalHistoryTemplate = new ArrayList<PatientFamilyHistory>();
	    List<PatientMedicalHistory>  PatientMedicalHistory = new ArrayList<PatientMedicalHistory>();
		Map<String, Object> map = new HashMap<String, Object>();
		  int hospitalId = (Integer)mapForDS.get(HOSPITAL_ID);
		    int visitId = (Integer)mapForDS.get("visitId");
		    int chargeCodeId = (Integer)mapForDS.get("chargeCodeId");
		    int preAnethesiaHdId =0;
		    if(mapForDS.get("preAnethesiaHdId")!=null)
		     preAnethesiaHdId = (Integer)mapForDS.get("preAnethesiaHdId");
	   // int docId = (Integer)mapForDS.get("docId");
	//	int preAnesthesiaDetailId = 0;
		 List<PreAnesthesiaConsultDoctorDt> requestList = new ArrayList<PreAnesthesiaConsultDoctorDt>();
		String icd="";
		//String anesthesia ="";
		try {
			
			
			crit = session.createCriteria(OpdSurgeryDetail.class)
					.createAlias("OpdSurgery", "osh")
					.add(Restrictions.eq("osh.Visit.Id", visitId))
					.add(Restrictions.ne("AnestheisaPacStatus", "n"));
				crit.add(Restrictions.eq("ChargeCode.Id", chargeCodeId));
					
					
					
			opdDtList 		= crit.list();
					
			if(opdDtList.size()>0 || preAnethesiaHdId!=0)
			{
				
		
			
		/*	
			otPreAnesthesiaDetailsList = session.createCriteria(
					OtPreAnesthesiaDetails.class).add(
					Restrictions.eq("Id", preAnesthesiaDetailId)).list();*/
			
			crit = session.createCriteria(
					OtPreAnesthesiaHd.class);
					//.createAlias("OpdSurgeryHeader", "OpdSurgeryHeader")
			if(preAnethesiaHdId!=0)
				crit.add(Restrictions.eq("Id", preAnethesiaHdId));
			else 
			crit.add(Restrictions.eq("Id", opdDtList.get(0).getAnestheisaPac().getAnesthesiaHd().getId()));
			       
			otPreAnesthesiaDetailsList = crit.list();
			if(otPreAnesthesiaDetailsList.size() > 0)
			{
				
				otPreAnesthesiaSurgeryList = session.createCriteria(
						OtPreAnesthesiaDetail.class)
						//.createAlias("OpdSurgeryHeader", "OpdSurgeryHeader")
						.add(Restrictions.eq("AnesthesiaHd.Id", otPreAnesthesiaDetailsList.get(0).getId()))
						.list();
						
				OtPreAnesthesiaHd otPreAnesthesiaDetails = (OtPreAnesthesiaHd) otPreAnesthesiaDetailsList
								.get(0);
			//int otPreAnesthesiaDetailId = otPreAnesthesiaDetails.getId();
			/*otPreOPDrugsList = session.createCriteria(OtPreOpDrugsEntry.class)
					.createAlias("PreAnesthsiaDetails", "preAnesthsiaDetails")
					.add(
							Restrictions.eq("preAnesthsiaDetails.Id",
									otPreAnesthesiaDetailId)).list();*/

			int hinId = otPreAnesthesiaDetails.getHin().getId();
			//String patientStatus = otPreAnesthesiaDetails.getPatientStatus();
	/*		if (patientStatus!=null &&  patientStatus.equals("Out Patient")) {
				int visitId = otPreAnesthesiaDetails.getVisit().getId();
				opdPatientHistoryList = session.createCriteria(
						OpdPatientHistory.class).createAlias("Hin", "hin").add(
						Restrictions.eq("hin.Id", hinId)).add(
						Restrictions.eq("VisitInpatientId", visitId)).list();
			} else {*/
				//int inpatientId = otPreAnesthesiaDetails.getInpatient().getId();
				/*opdPatientHistoryList = session.createCriteria(
						OpdPatientHistory.class).createAlias("Hin", "hin").add(
						Restrictions.eq("hin.Id", hinId)).add(
						Restrictions.eq("VisitInpatientId", inpatientId))
						.list();*/
			//}
		
				List<DischargeIcdCode>icdList=new ArrayList<DischargeIcdCode>();
				icdList=session.createCriteria(DischargeIcdCode.class).add(Restrictions.eq("Hin.Id", hinId)).list();
				
				Set<MasIcd> uniqueIcdList=new HashSet <MasIcd>();
				for(DischargeIcdCode icd2:icdList){
					MasIcd masIcd = icd2.getIcd();
					if(icd2.getIcd()!=null){
						uniqueIcdList.add(masIcd);
					}
				}
				for(MasIcd icd2:uniqueIcdList){
					icd=icd+"\n"+icd2.getIcdName();
				}
			

			OtPreAnesthesiaDetailsList=session.createCriteria(OtPreAnesthesiaHd .class).add(Restrictions.eq("Hin.Id", otPreAnesthesiaDetails.getHin().getId())).list();
		/*	for(OtPreAnesthesiaHd OtPreAnesthesiaDetails:OtPreAnesthesiaDetailsList){
				anesthesia=anesthesia+","+OtPreAnesthesiaDetails.getAnashteicDetails();
			}*/
			
			   
		    if(otPreAnesthesiaSurgeryList.size()>0){
		    	List<OtPreAnesthesiaDetail> pacDt = session.createCriteria(OtPreAnesthesiaDetail.class).add(Restrictions.eq("Id", otPreAnesthesiaSurgeryList.get(0).getId())).list();
			    map.put("pacDt", pacDt);
				//procedureDetails.clear();
			}
		    
		   requestList = session.createCriteria(PreAnesthesiaConsultDoctorDt.class)
					   .createAlias("ConsultDoctorIdHd", "hd")
					   	   .createAlias("hd.OtPreAnesthesiaHd", "pacHd")
					    .createAlias("hd.Hospital", "hospital")
					   .add(Restrictions.eq("hospital.Id",hospitalId))
					   .add(Restrictions.eq("pacHd.Visit.Id",visitId))
					 //  .add(Restrictions.or(Restrictions.isNull("DoctorAdvice"), Restrictions.eq("DoctorAdvice","")))
					   .addOrder(Order.desc("ConsultDate"))
					   //.addOrder(Order.desc("ConsultTime"))
					   //.setMaxResults(1)
					.list();

		    	/*	PreAnesthesiaConsultDoctorDt consultDt = new PreAnesthesiaConsultDoctorDt();
					 consultDt = (PreAnesthesiaConsultDoctorDt) hbt.load(
							   PreAnesthesiaConsultDoctorDt.class, consultDtId);*/
		   
		  /*      String tempCode = HMSUtil.getValuesFromPropertiesFile("adt.properties", "templateCodeForComplaintHistory");
				medicalHistoryTemplate =  session.createCriteria(PatientFamilyHistory.class).add(
						Restrictions.eq("Status", "y")).add(
								Restrictions.eq("TemplateCode", tempCode)).list();
				*/
		   PatientMedicalHistory =  session.createCriteria(PatientMedicalHistory.class)
					  .add(Restrictions.eq("Hin.Id", hinId)) 
					.list();
				
			}
   }	
			// //System.out.println("size of opdPatientHistoryList=============="+opdPatientHistoryList.size());
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		// //System.out.println("t opdPatientHistoryList asize----"+opdPatientHistoryList.size());
		map.put("otPreAnesthesiaDetailsList", otPreAnesthesiaDetailsList);
	//	map.put("otPreOPDrugsList", otPreOPDrugsList);
		//map.put("opdPatientHistoryList", opdPatientHistoryList);//no
		//map.put("anesthesia",anesthesia);//no
		map.put("icd", icd);
		map.put("otPreAnesthesiaSurgeryList", otPreAnesthesiaSurgeryList);
		map.put("requestList", requestList); 
		/*map.put("medicalHistoryTemplate", medicalHistoryTemplate);*/
		map.put("PatientMedicalHistory", PatientMedicalHistory);
		
		
		
	

		return map;
	}

	
	@SuppressWarnings("unused")
	public Map<String, Object> getDepartmentNameFromId(int deptId) {
		Map<String, Object> returnMap = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<MasDepartment> deptList = new ArrayList<MasDepartment>();
		String deptName = null;
		String deptCode = null;
		try {

			Criteria crit = session.createCriteria(MasDepartment.class).add(
					Restrictions.eq("Id", deptId));
			deptList = crit.list();
			MasDepartment masDepartment = deptList.get(0);
			deptName = masDepartment.getDepartmentName();
			deptCode = masDepartment.getDepartmentCode();
			returnMap.put("deptName", deptName);
			returnMap.put("deptCode", deptCode);
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return returnMap;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> showPatientPrevoiusPrescription(Map mapForDS) {

		Session session = (Session) getSession();
		List<Visit> patientVisitList = new ArrayList<Visit>();
		List<PatientPrescriptionHeader> patientPrescriptionHeaderList = new ArrayList<PatientPrescriptionHeader>();
		List<PatientPrescriptionDetails> patientPrescriptionList = new ArrayList<PatientPrescriptionDetails>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();

		@SuppressWarnings("unused")
		int visitNo = (Integer) mapForDS.get("visitNo");
		int hinId = (Integer) mapForDS.get("hinId");

		try {
			int visitNoForPrescription = visitNo - 1;
			Criteria crit = session.createCriteria(Visit.class).createAlias(
					"Hin", "hin").add(Restrictions.eq("hin.Id", hinId)).add(
					Restrictions.eq("VisitNo", visitNoForPrescription));
			patientVisitList = crit.list();
			if (patientVisitList.size() > 0) {
				Visit visit = patientVisitList.get(0);
				int visitId = visit.getId();

				patientPrescriptionHeaderList = session.createCriteria(
						PatientPrescriptionHeader.class).createAlias("Visit",
						"visit").add(Restrictions.eq("visit.Id", visitId))
						.list();
				if (patientPrescriptionHeaderList.size() > 0) {
					PatientPrescriptionHeader patientPrescriptionHeader = (PatientPrescriptionHeader) patientPrescriptionHeaderList
							.get(0);

					int prescriptionId = patientPrescriptionHeader.getId();
					patientPrescriptionList = session.createCriteria(
							PatientPrescriptionDetails.class).createAlias(
							"Prescription", "prescription").add(
							Restrictions.eq("prescription.Id", prescriptionId))
							.list();
				}
			}
			frequencyList = session.createCriteria(MasFrequency.class).add(
					Restrictions.eq("Status", "y")).addOrder(Order.asc("OrderNo")).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientPrescriptionList", patientPrescriptionList);
		map.put("frequencyList", frequencyList);

		return map;
	}

	public Map<String, Object> showPatientPrevoiusInvestigation(Map mapForDS) {

		Session session = (Session) getSession();
		List<Visit> patientVisitList = new ArrayList<Visit>();
		List<PatientInvestigationHeader> patientInvestigationHeaderList = new ArrayList<PatientInvestigationHeader>();
		List<PatientInvestigationDetails> patientInvestigationList = new ArrayList<PatientInvestigationDetails>();
		Map<String, Object> map = new HashMap<String, Object>();

		int visitNo = (Integer) mapForDS.get("visitNo");
		int hinId = (Integer) mapForDS.get("hinId");
        //System.out.println("visitNo----"+visitNo);
        //int investigation_header_id=0;
		try {
			int visitNoForInvestigation = visitNo - 1;
			Criteria crit = session.createCriteria(Visit.class).createAlias(
					"Hin", "hin").add(Restrictions.eq("hin.Id", hinId)).add(
					Restrictions.eq("VisitNo", visitNoForInvestigation));
			patientVisitList = crit.list();
			//System.out.println("visitNoForInvestigation----"+visitNoForInvestigation);
			//System.out.println("anuj patientVisitList---"+patientVisitList.size());
			if (patientVisitList.size() > 0) {
				Visit visit = patientVisitList.get(0);
				int visitId = visit.getId();
				//System.out.println("anuj visitId---"+visitId);
				patientInvestigationHeaderList = session.createCriteria(
						PatientInvestigationHeader.class).createAlias("Visit",
						"visit").add(Restrictions.eq("visit.Id", visitId))
						.list();
				//System.out.println("anuj patientInvestigationHeaderList---"+patientInvestigationHeaderList.size());
				if (patientInvestigationHeaderList.size() > 0) {
					PatientInvestigationHeader patientInvestigationHeader = (PatientInvestigationHeader) patientInvestigationHeaderList
							.get(0);
					
					
					int investigationId = patientInvestigationHeader.getId();
					patientInvestigationList = session.createCriteria(
							PatientInvestigationDetails.class).createAlias(
							"InvestigationHeader", "investigation").add(
							Restrictions
									.eq("investigation.Id", investigationId))
							.list();
					//System.out.println("anuj investigationId---"+investigationId);
				}
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		//System.out.println("anuj patientInvestigationList---"+patientInvestigationList.size());
		map.put("patientInvestigationList", patientInvestigationList);
		return map;
	}
	//=================code by anamika=============
	@Override
	public Map<String, Object> showInvestigationResult(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<DgResultEntryDetail> resultEntryDetailList = new ArrayList<DgResultEntryDetail>();
		Session session = (Session)getSession();
		resultEntryDetailList =session.createCriteria(DgResultEntryDetail.class).createAlias("ChargeCode", "chargeCode")
								.add(Restrictions.eq("chargeCode.Id", box.getInt("chargeCodeId"))).createAlias("SampleCollectionDetails", "sampleDetail")
										.createAlias("sampleDetail.SampleCollectionHeader", "sampleHeader").createAlias("sampleHeader.Order", "order")
										.add(Restrictions.eq("order.OrderNo", box.getString("orderNo"))).list();
		map.put("resultEntryDetailList", resultEntryDetailList);
		return map;
	}
	

	@SuppressWarnings("unchecked")
	public Map<String, Object> searchPatientDetails(Map mapForDS) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Inpatient> patientList = new ArrayList<Inpatient>();

		String serviceNo = "";
		String hinNo = "";

		String patientFName = "";
		String patientMName = "";
		String patientLName = "";
		String servFName = "";
		String servMName = "";
		String servLName = "";

		Session session = (Session) getSession();

		if (mapForDS.get("serviceNo") != null) {

			serviceNo = (String) mapForDS.get("serviceNo");
			//System.out.println("service number====" + serviceNo);
		}
		if (mapForDS.get("hinNo") != null) {

			hinNo = (String) mapForDS.get("hinNo");
			//System.out.println("HIN number====" + hinNo);
		}

		if (mapForDS.get("patientFName") != null) {
			patientFName = (String) mapForDS.get("patientFName");
		}
		if (mapForDS.get("patientMName") != null) {
			patientMName = (String) mapForDS.get("patientMName");
		}
		if (mapForDS.get("patientLName") != null) {
			patientLName = (String) mapForDS.get("patientLName");
		}

		if (mapForDS.get("servFName") != null) {
			servFName = (String) mapForDS.get("servFName");
		}
		if (mapForDS.get("servMName") != null) {
			servMName = (String) mapForDS.get("servMName");
		}
		if (mapForDS.get("servLName") != null) {
			servLName = (String) mapForDS.get("servLName");
		}

		String patientStatus = "A";
		// Criteria crit =
		// session.createCriteria(Patient.class).add(Restrictions.not(Expression.eq("PatientStatus",
		// patientStatus)));
		Criteria crit = session.createCriteria(Inpatient.class).add(
				Restrictions.eq("AdStatus", patientStatus)).createAlias("Hin",
				"p");
		if (hinNo != null && !hinNo.equals("")) {
			//System.out.println("HIN number in if block====" + hinNo);
			crit = crit.add(Restrictions.eq("p.HinNo", hinNo));
		} else {
			if (!serviceNo.equals("")) {
				//System.out.println("service number in else block===="	+ serviceNo);
				crit = crit.add(Restrictions.eq("p.ServiceNo", serviceNo));
			}

			if (!patientFName.equals("")) {
				crit = crit.add(Restrictions.like("p.PFirstName", patientFName
						+ "%"));
			}
			if (!patientMName.equals("")) {
				crit = crit.add(Restrictions.like("p.PMiddleName", patientMName
						+ "%"));
			}
			if (!patientLName.equals("")) {
				crit = crit.add(Restrictions.like("p.PLastName", patientLName
						+ "%"));
			}

			if (!servFName.equals("")) {
				crit = crit.add(Restrictions.like("p.SFirstName", servFName
						+ "%"));
			}
			if (!servMName.equals("")) {
				crit = crit.add(Restrictions.like("p.SMiddleName", servMName
						+ "%"));
			}
			if (!servLName.equals("")) {
				crit = crit.add(Restrictions.like("p.SLastName", servLName
						+ "%"));
			}

		}
		patientList = crit.list();
		map.put("patientList", patientList);
		return map;

	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> showSurgeryRequisitionJsp(Map mapForDS) {
		Session session = (Session) getSession();
		List<Visit> patientDetailList = new ArrayList<Visit>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<TransactionSequence> sequenceNoList = new ArrayList<TransactionSequence>();
		List<MasEmployee> empList = new ArrayList<MasEmployee>();
		Map<String, Object> map = new HashMap<String, Object>();
		String empCategory = "Doctor";

		List<String> departmentTypeCode = new ArrayList<String>();
		departmentTypeCode.add("Sur");
		departmentTypeCode.add("SpltOPD");
		departmentTypeCode.add("OPD1");
		String transactionSequenceName = "Surgery Requisition No";
		int visitId = (Integer) mapForDS.get("visitId");
		int empId = (Integer) mapForDS.get("empId");
		int orderNo = 0;
		String empName = "";
		try {

			Criteria crit = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId));
			patientDetailList = crit.list();

			empList = session.createCriteria(MasEmployee.class).add(
					Restrictions.eq("Id", empId)).list();
			departmentList = session.createCriteria(MasDepartment.class)
					.createAlias("DepartmentType", "deptType").add(
							Restrictions.in("deptType.DepartmentTypeCode",
									departmentTypeCode)).list();
			employeeList = session.createCriteria(MasEmployee.class)
					.createAlias("EmpCategory", "empType").add(
							Restrictions.eq("empType.EmpCategoryName",
									empCategory)).list();
			sequenceNoList = session.createCriteria(TransactionSequence.class)
					.add(
							Restrictions.eq("TransactionSequenceName",
									transactionSequenceName)).list();
			TransactionSequence transactionSequence = sequenceNoList.get(0);
			int sequenceNo = transactionSequence.getTransactionSequenceNumber();
			orderNo = sequenceNo + 1;

			MasEmployee emp = empList.get(0);
			if (emp.getFirstName() != null) {
				empName = emp.getFirstName();
			}
			if (emp.getMiddleName() != null) {
				empName = empName + " " + emp.getMiddleName();
			}
			if (emp.getLastName() != null) {
				empName = empName + " " + emp.getLastName();
			}

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("empName", empName);
		map.put("patientDetailList", patientDetailList);
		map.put("departmentList", departmentList);
		map.put("employeeList", employeeList);
		map.put("orderNo", orderNo);
		return map;
	}

	public Map<String, Object> showAjaxResponseForSurgeryRequisitionJsp(
			Map mapForDS) {
		Session session = (Session) getSession();

		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();

		Map<String, Object> map = new HashMap<String, Object>();
		String empCategory = "Doctor";

		int departmentId = (Integer) mapForDS.get("departmentId");
		try {
			employeeList = session.createCriteria(MasEmployee.class)
					.createAlias("EmpCategory", "empType").createAlias(
							"Department", "dept").add(
							Restrictions.eq("dept.Id", departmentId)).add(
							Restrictions.eq("empType.EmpCategoryName",
									empCategory)).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}

		map.put("departmentId", departmentId);
		map.put("employeeList", employeeList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> showSurgeryRequisitionJspForHin(Map mapForDS) {
		Session session = (Session) getSession();
		Map<String, Object> hmsutil = new HashMap<String, Object>();
		List<Patient> patientDetailList = new ArrayList<Patient>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<TransactionSequence> sequenceNoList = new ArrayList<TransactionSequence>();
		List<MasEmployee> empList = new ArrayList<MasEmployee>();
		List<MasEmployee> doctorList = new ArrayList<MasEmployee>();
		List<Visit> visitList = new ArrayList<Visit>();
		int orderNo = 0;
		String transactionSequenceName = "Surgery Requisition No";
		hmsutil = HMSUtil.getCurrentTimeWithoutSecond();
		String currentDate = (String) hmsutil.get("currentDate");
		Date currentdate = HMSUtil.convertStringTypeDateToDateType(currentDate);
		List<OpdSurgeryHeader> opdsurgeryheader = new ArrayList<OpdSurgeryHeader>();
		try {
			opdsurgeryheader = session.createCriteria(OpdSurgeryHeader.class)
					.add(Restrictions.eq("RequisitionDate", currentdate))
					.list();
			sequenceNoList = session.createCriteria(TransactionSequence.class)
					.add(
							Restrictions.eq("TransactionSequenceName",
									transactionSequenceName)).list();
			TransactionSequence transactionSequence = sequenceNoList.get(0);
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (opdsurgeryheader.size() == 0) {

				transactionSequence.setTransactionSequenceNumber(0);
				hbt.update(transactionSequence);

			} else {
				transactionSequence
						.setTransactionSequenceNumber(opdsurgeryheader.size());
				hbt.update(transactionSequence);

			}
		} catch (HibernateException e) {
			e.printStackTrace();

		}

		Map<String, Object> map = new HashMap<String, Object>();

		List<String> departmentTypeCode = new ArrayList<String>();
		departmentTypeCode.add("Sur");
		departmentTypeCode.add("SpltOPD");
		departmentTypeCode.add("OPD1");
		String hinNo = (String) mapForDS.get("hinNo");
		int empId = (Integer) mapForDS.get("empId");
		String empName = "";
		try {

			Criteria crit = session.createCriteria(Patient.class).add(
					Restrictions.eq("HinNo", hinNo));
			patientDetailList = crit.list();
			empList = session.createCriteria(MasEmployee.class).add(
					Restrictions.eq("Id", empId)).add(
					Restrictions.eq("Status", "y")).list();
			departmentList = session.createCriteria(MasDepartment.class)
					.createAlias("DepartmentType", "deptType").add(
							Restrictions.in("deptType.DepartmentTypeCode",
									departmentTypeCode)).add(
							Restrictions.eq("Status", "y")).list();
			sequenceNoList = session.createCriteria(TransactionSequence.class)
					.add(
							Restrictions.eq("TransactionSequenceName",
									transactionSequenceName)).list();
			doctorList = session.createCriteria(MasEmployee.class).createAlias(
					"EmpCategory", "empCat").add(
					Restrictions.eq("empCat.EmpCategoryCode", "01")).add(
					Restrictions.eq("Status", "y")).list();

			visitList = session.createCriteria(Visit.class).createAlias("Hin",
					"p").add(Restrictions.eq("p.HinNo", hinNo)).addOrder(
					Order.desc("Id")).list();

			if (opdsurgeryheader.size() == 0) {
				sequenceNoList = session.createCriteria(
						TransactionSequence.class).add(
						Restrictions.eq("TransactionSequenceName",
								transactionSequenceName)).list();
				TransactionSequence transactionSequence = sequenceNoList.get(0);
				transactionSequence.setTransactionSequenceNumber(0);
				org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
				hbt.update(transactionSequence);

			}

			TransactionSequence transactionSequence = sequenceNoList.get(0);
			int sequenceNo = transactionSequence.getTransactionSequenceNumber();
			orderNo = sequenceNo + 1;
			MasEmployee masEmployee = (MasEmployee) empList.get(0);

			if (masEmployee.getFirstName() != null) {
				empName = masEmployee.getFirstName();
			}
			if (masEmployee.getMiddleName() != null) {
				empName = empName + " " + masEmployee.getMiddleName();
			}
			if (masEmployee.getLastName() != null) {
				empName = empName + " " + masEmployee.getLastName();
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("empName", empName);
		map.put("patientDetailList", patientDetailList);
		map.put("departmentList", departmentList);
		map.put("orderNo", orderNo);
		map.put("doctorList", doctorList);
		map.put("visitList", visitList);

		return map;
	}

	public Map<String, Object> getEmployeeIdFromUserName(String userName) {
		Session session = (Session) getSession();
		String employeeName = "";
		int employeeId = 0;
		List<Users> userList = new ArrayList<Users>();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			userList = session.createCriteria(Users.class).add(
					Restrictions.eq("LoginName", userName)).list();
			Users users = userList.get(0);
			employeeId = users.getEmployee().getId();
			if (users.getEmployee() != null) {

				if (users.getEmployee().getFirstName() != null) {
					employeeName = users.getEmployee().getFirstName();
				}
				if (users.getEmployee().getMiddleName() != null) {
					employeeName = "" + users.getEmployee().getMiddleName();
				}
				if (users.getEmployee().getLastName() != null) {
					employeeName = "" + users.getEmployee().getLastName();
				}
			}

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("employeeName", employeeName);
		map.put("employeeId", employeeId);

		return map;
	}

	@SuppressWarnings("unchecked")
	/*public Map<String, Object> submitSurgeryRequisitionDetails(Map mapForDS) {

		boolean succesfullyAdded = false;
		Map<String, Object> returnMap = new HashMap<String, Object>();
		List<TransactionSequence> sequenceNoList = new ArrayList<TransactionSequence>();
		List chargeCodeList = (List) mapForDS.get("chargeCodeList");
		int surgicalDepartmentId = (Integer) mapForDS.get("deptId");
		int prescribedDepartmentId = (Integer) mapForDS.get("prescribedDepartmentId");
		int visitId = (Integer) mapForDS.get("visitId");
		int hinId = (Integer) mapForDS.get("hinId");
		String userName = (String) mapForDS.get("userName");
		String requisitionDate = (String) mapForDS.get("requisitionDate");
		String requisitionTime = (String) mapForDS.get("requisitionTime");
		String patientStatus = "Out Patient";
		String pacRequird = (String) mapForDS.get("pacRequird");
		String transactionSequenceName = "Surgery Requisition No";
		Session session = (Session) getSession();
		Transaction tx = null;
		int orderNo = 0;

		try {
			tx = session.beginTransaction();
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			sequenceNoList = session.createCriteria(TransactionSequence.class)
					.add(
							Restrictions.eq("TransactionSequenceName",
									transactionSequenceName)).list();
			TransactionSequence transactionSequence = (TransactionSequence) sequenceNoList
					.get(0);
			orderNo = transactionSequence.getTransactionSequenceNumber();
			orderNo = orderNo + 1;
			int id = transactionSequence.getId();

			TransactionSequence transactionSequence2 = (TransactionSequence) hbt
					.load(TransactionSequence.class, id);
			transactionSequence2.setTransactionSequenceNumber(orderNo);
			hbt.update(transactionSequence2);

			OpdSurgeryHeader opdSurgeryHeader = new OpdSurgeryHeader();
			opdSurgeryHeader.setOrderNo(orderNo);
			Patient patient = new Patient();
			patient.setId(hinId);
			opdSurgeryHeader.setHin(patient);
			Visit visit = new Visit();
			visit.setId(visitId);
			opdSurgeryHeader.setVisit(visit);
			if (surgicalDepartmentId != 0) {
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(surgicalDepartmentId);
				opdSurgeryHeader.setSurgicalDept(masDepartment);
			}
			MasDepartment masDepartmentObj = new MasDepartment();
			masDepartmentObj.setId(prescribedDepartmentId);
			opdSurgeryHeader.setPrescribedDepartment(masDepartmentObj);

			Date date = HMSUtil
					.convertStringTypeDateToDateType(requisitionDate);
			opdSurgeryHeader.setRequisitionDate(date);
			opdSurgeryHeader.setRequisitionTime(requisitionTime);
			opdSurgeryHeader.setPatientStatus(patientStatus);

			if(pacRequird !=null && pacRequird.equalsIgnoreCase("y")){
				opdSurgeryHeader.setPacStatus("pending");
				}else {
				opdSurgeryHeader.setPacStatus("Cleared");
				}
			opdSurgeryHeader.setBookingStatus("pending");
			
			 * method created for getting employee id and name from username.
			 * "getEmployeeIdFromUserName(userName)"
			 
			Map<String, Object> map = getEmployeeIdFromUserName(userName);
			int employeeId = (Integer) map.get("employeeId");
			MasEmployee masEmployee = new MasEmployee();
			masEmployee.setId(employeeId);
			opdSurgeryHeader.setEmployee(masEmployee);

			hbt.save(opdSurgeryHeader);

			int chargeCodeId = 0;
			for (int i = 0; i < chargeCodeList.size(); i++) {
				chargeCodeId = (Integer) chargeCodeList.get(i);

				OpdSurgeryDetail opdSurgeryDetail = new OpdSurgeryDetail();
				opdSurgeryDetail.setOpdSurgery(opdSurgeryHeader);
				MasChargeCode masChargeCode = new MasChargeCode();
				masChargeCode.setId(chargeCodeId);
				opdSurgeryDetail.setChargeCode(masChargeCode);
				hbt.save(opdSurgeryDetail);
			}

			succesfullyAdded = true;
			tx.commit();
		} catch (Exception e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();

		} finally {
			// --------Session Closing----------
			session.close();
		}
		returnMap.put("addResult", succesfullyAdded);
		returnMap.put("orderNo", orderNo);
		return returnMap;
	}*/
    public Map<String, Object> submitSurgeryRequisitionDetails(Map mapForDS) {

		boolean succesfullyAdded = false;
		Map<String, Object> returnMap = new HashMap<String, Object>();
		List<TransactionSequence> sequenceNoList = new ArrayList<TransactionSequence>();
		List chargeCodeList = (List) mapForDS.get("chargeCodeList");
		int surgicalDepartmentId = (Integer) mapForDS.get("deptId");
		int prescribedDepartmentId = (Integer) mapForDS.get("prescribedDepartmentId");
		int visitId = (Integer) mapForDS.get("visitId");
		int hinId = (Integer) mapForDS.get("hinId");
		String userName = (String) mapForDS.get("userName");
		String requisitionDate = (String) mapForDS.get("requisitionDate");
		String requisitionTime = (String) mapForDS.get("requisitionTime");
		String patientStatus = "Out Patient";
		String pacRequird = (String) mapForDS.get("pacRequird");
		String transactionSequenceName = "Surgery Requisition No";
		Session session = (Session) getSession();
		Transaction tx = null;
		int orderNo = 0;

		try {
			tx = session.beginTransaction();
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			sequenceNoList = session.createCriteria(TransactionSequence.class)
					.add(
							Restrictions.eq("TransactionSequenceName",
									transactionSequenceName)).list();
			TransactionSequence transactionSequence = (TransactionSequence) sequenceNoList
					.get(0);
			orderNo = transactionSequence.getTransactionSequenceNumber();
			orderNo = orderNo + 1;
			int id = transactionSequence.getId();

			TransactionSequence transactionSequence2 = (TransactionSequence) hbt
					.load(TransactionSequence.class, id);
			transactionSequence2.setTransactionSequenceNumber(orderNo);
			hbt.update(transactionSequence2);

			OpdSurgeryHeader opdSurgeryHeader = new OpdSurgeryHeader();
			opdSurgeryHeader.setOrderNo(orderNo);
			Patient patient = new Patient();
			patient.setId(hinId);
			opdSurgeryHeader.setHin(patient);
			Visit visit = new Visit();
			visit.setId(visitId);
			opdSurgeryHeader.setVisit(visit);
			if (surgicalDepartmentId != 0) {
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(surgicalDepartmentId);
				opdSurgeryHeader.setSurgicalDept(masDepartment);
			}
			MasDepartment masDepartmentObj = new MasDepartment();
			masDepartmentObj.setId(prescribedDepartmentId);
			opdSurgeryHeader.setPrescribedDepartment(masDepartmentObj);

			Date date = HMSUtil
					.convertStringTypeDateToDateType(requisitionDate);
			opdSurgeryHeader.setRequisitionDate(date);
			opdSurgeryHeader.setRequisitionTime(requisitionTime);
			opdSurgeryHeader.setPatientStatus(patientStatus);

			if(pacRequird !=null && pacRequird.equalsIgnoreCase("y")){
				opdSurgeryHeader.setPacStatus("pending");
				}else {
				opdSurgeryHeader.setPacStatus("Cleared");
				}
			opdSurgeryHeader.setBookingStatus("pending");
			/*
			 * method created for getting employee id and name from username.
			 * "getEmployeeIdFromUserName(userName)"
			 */
			Map<String, Object> map = getEmployeeIdFromUserName(userName);
			int employeeId = (Integer) map.get("employeeId");
			MasEmployee masEmployee = new MasEmployee();
			masEmployee.setId(employeeId);
			opdSurgeryHeader.setEmployee(masEmployee);

			hbt.save(opdSurgeryHeader);

			int chargeCodeId = 0;
			for (int i = 0; i < chargeCodeList.size(); i++) {
				chargeCodeId = (Integer) chargeCodeList.get(i);

				OpdSurgeryDetail opdSurgeryDetail = new OpdSurgeryDetail();
				opdSurgeryDetail.setOpdSurgery(opdSurgeryHeader);
				MasChargeCode masChargeCode = new MasChargeCode();
				masChargeCode.setId(chargeCodeId);
				opdSurgeryDetail.setChargeCode(masChargeCode);
				hbt.save(opdSurgeryDetail);
			}

			succesfullyAdded = true;
			tx.commit();
		} catch (Exception e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();

		} 
		returnMap.put("addResult", succesfullyAdded);
		returnMap.put("orderNo", orderNo);
		return returnMap;
	}
	@SuppressWarnings("unchecked")
	/*public boolean submitSurgeryRequisitionDetailsForInpatient(Map mapForDS) {

		boolean succesfullyAdded = false;
		List chargeCodeList = (List) mapForDS.get("chargeCodeList");
		List<Inpatient> inpatientList = new ArrayList<Inpatient>();
		List<Visit> visitList = new ArrayList<Visit>();
		List<TransactionSequence> sequenceNoList = new ArrayList<TransactionSequence>();
		int surgicalDepartmentId = (Integer) mapForDS.get("deptId");
		int prescribedDepartmentId = (Integer) mapForDS
				.get("prescribedDepartmentId");

		int hinId = (Integer) mapForDS.get("hinId");
		String userName = (String) mapForDS.get("userName");
		String requisitionDate = (String) mapForDS.get("requisitionDate");
		String requisitionTime = (String) mapForDS.get("requisitionTime");
		int docId = (Integer) mapForDS.get("docId");
		String pStatus = (String) mapForDS.get("pStatus");
		Users user = (Users) mapForDS.get("user");

		Session session = (Session) getSession();
		Transaction tx = null;

		try {
			tx = session.beginTransaction();
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			String adStatus = "A";
			String patientStatus = "InPatient";
			String pacStatus = "Pending";
			String transactionSequenceName = "Surgery Requisition No";
			Inpatient inpatient = new Inpatient();
			Visit visit = new Visit();
			int inpatientId = 0;
			int visitId = 0;
			if (pStatus.equals("In Patient")) {
				inpatientList = session.createCriteria(Inpatient.class)
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).add(
								Restrictions.eq("AdStatus", adStatus)).list();
				inpatient = (Inpatient) inpatientList.get(0);
				inpatientId = inpatient.getId();
			} else if (pStatus.equals("Out Patient")) {
				visitList = session.createCriteria(Visit.class).createAlias(
						"Hin", "hin").add(Restrictions.eq("hin.Id", hinId))
						.addOrder(Order.desc("Id")).list();
				visit = (Visit) visitList.get(0);
				visitId = visit.getId();
			}

			sequenceNoList = session.createCriteria(TransactionSequence.class)
					.add(
							Restrictions.eq("TransactionSequenceName",
									transactionSequenceName)).list();
			TransactionSequence transactionSequence = (TransactionSequence) sequenceNoList
					.get(0);
			int orderNo = transactionSequence.getTransactionSequenceNumber();
			orderNo = orderNo + 1;
			int id = transactionSequence.getId();

			TransactionSequence transactionSequence2 = (TransactionSequence) hbt
					.load(TransactionSequence.class, id);
			transactionSequence2.setTransactionSequenceNumber(orderNo);
			hbt.update(transactionSequence2);

			OpdSurgeryHeader opdSurgeryHeader = new OpdSurgeryHeader();

			opdSurgeryHeader.setOrderNo(orderNo);
			Patient patient = new Patient();
			patient.setId(hinId);
			opdSurgeryHeader.setHin(patient);

			if (pStatus.equals("In Patient")) {
				Inpatient inpatient2 = new Inpatient();
				inpatient2.setId(inpatientId);
				opdSurgeryHeader.setInpatient(inpatient2);
			} else if (pStatus.equals("Out Patient")) {
				Visit visit2 = new Visit();
				visit2.setId(visitId);
				opdSurgeryHeader.setVisit(visit2);
			}

			//System.out.println(":::::::::" + surgicalDepartmentId);
			if (surgicalDepartmentId != 0) {
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(surgicalDepartmentId);
				opdSurgeryHeader.setSurgicalDept(masDepartment);
			}

			if (prescribedDepartmentId != 0) {
				MasDepartment masDepartmentObj = new MasDepartment();
				masDepartmentObj.setId(prescribedDepartmentId);
				opdSurgeryHeader.setPrescribedDepartment(masDepartmentObj);
			}

			//System.out.println(":::::::::" + prescribedDepartmentId);

			Date date = HMSUtil
					.convertStringTypeDateToDateType(requisitionDate);
			opdSurgeryHeader.setRequisitionDate(date);
			opdSurgeryHeader.setRequisitionTime(requisitionTime);

			opdSurgeryHeader.setPatientStatus(pStatus);
			opdSurgeryHeader.setPacStatus(pacStatus);
			opdSurgeryHeader.setBookingStatus("pending");
			
			 * method created for getting employee id and name from username.
			 * "getEmployeeIdFromUserName(userName)"
			 
			// //System.out.println(":::::::::"+userName);
			// Map<String,Object>map= getEmployeeIdFromUserName(userName);
			// int employeeId=(Integer)map.get("employeeId");
			int employeeId = user.getEmployee().getId();
			MasEmployee masEmployee = new MasEmployee();
			masEmployee.setId(employeeId);
			opdSurgeryHeader.setEmployee(masEmployee);

			hbt.save(opdSurgeryHeader);
			hbt.refresh(opdSurgeryHeader);

			int chargeCodeId = 0;
			for (int i = 0; i < chargeCodeList.size(); i++) {
				chargeCodeId = (Integer) chargeCodeList.get(i);

				OpdSurgeryDetail opdSurgeryDetail = new OpdSurgeryDetail();
				opdSurgeryDetail.setOpdSurgery(opdSurgeryHeader);
				MasChargeCode masChargeCode = new MasChargeCode();
				masChargeCode.setId(chargeCodeId);
				opdSurgeryDetail.setChargeCode(masChargeCode);
				if (docId != 0) {
					opdSurgeryDetail.setSurgeon(new MasEmployee(docId));
				}
				hbt.save(opdSurgeryDetail);
		
			}

			succesfullyAdded = true;
			tx.commit();
		} catch (Exception e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();

		}

		finally {
			// --------Session Closing----------
			session.close();
		}

		return succesfullyAdded;
	}*/
public boolean submitSurgeryRequisitionDetailsForInpatient(Map mapForDS) {

		boolean succesfullyAdded = false;
		List chargeCodeList = (List) mapForDS.get("chargeCodeList");
		List<Inpatient> inpatientList = new ArrayList<Inpatient>();
		List<Visit> visitList = new ArrayList<Visit>();
		List<TransactionSequence> sequenceNoList = new ArrayList<TransactionSequence>();
		int surgicalDepartmentId = (Integer) mapForDS.get("deptId");
		int prescribedDepartmentId = (Integer) mapForDS.get("prescribedDepartmentId");

		int hinId = (Integer) mapForDS.get("hinId");
		String requisitionDate = (String) mapForDS.get("requisitionDate");
		String requisitionTime = (String) mapForDS.get("requisitionTime");
		int docId = (Integer) mapForDS.get("docId");
		String pStatus = (String) mapForDS.get("pStatus");
		String pacRequird = (String) mapForDS.get("pacRequird");
		Users user = (Users) mapForDS.get("user");

		Session session = (Session) getSession();
		Transaction tx = null;

		try {
			tx = session.beginTransaction();
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			String adStatus = "A";
			String transactionSequenceName = "Surgery Requisition No";
			Inpatient inpatient = new Inpatient();
			Visit visit = new Visit();
			int inpatientId = 0;
			int visitId = 0;
			if (pStatus.equals("In Patient")) {
				inpatientList = session.createCriteria(Inpatient.class)
						.createAlias("Hin", "hin").add(	Restrictions.eq("hin.Id", hinId)).add(
								Restrictions.eq("AdStatus", adStatus)).list();
				inpatient = (Inpatient) inpatientList.get(0);
				inpatientId = inpatient.getId();
			} else if (pStatus.equals("Out Patient")) {
				visitList = session.createCriteria(Visit.class).createAlias(
						"Hin", "hin").add(Restrictions.eq("hin.Id", hinId)).addOrder(Order.desc("Id")).list();
				visit = (Visit) visitList.get(0);
				visitId = visit.getId();
			}

			sequenceNoList = session.createCriteria(TransactionSequence.class)
					.add(Restrictions.eq("TransactionSequenceName",	transactionSequenceName)).list();
			TransactionSequence transactionSequence = (TransactionSequence) sequenceNoList.get(0);
			int orderNo = transactionSequence.getTransactionSequenceNumber();
			orderNo = orderNo + 1;
			int id = transactionSequence.getId();

			TransactionSequence transactionSequence2 = (TransactionSequence) hbt
					.load(TransactionSequence.class, id);
			transactionSequence2.setTransactionSequenceNumber(orderNo);
			hbt.update(transactionSequence2);

			OpdSurgeryHeader opdSurgeryHeader = new OpdSurgeryHeader();

			opdSurgeryHeader.setOrderNo(orderNo);
			Patient patient = new Patient();
			patient.setId(hinId);
			opdSurgeryHeader.setHin(patient);

			if (pStatus.equals("In Patient")) {
				Inpatient inpatient2 = new Inpatient();
				inpatient2.setId(inpatientId);
				opdSurgeryHeader.setInpatient(inpatient2);
			} else if (pStatus.equals("Out Patient")) {
				Visit visit2 = new Visit();
				visit2.setId(visitId);
				opdSurgeryHeader.setVisit(visit2);
			}
			if (surgicalDepartmentId != 0) {
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(surgicalDepartmentId);
				opdSurgeryHeader.setSurgicalDept(masDepartment);
			}

			if (prescribedDepartmentId != 0) {
				MasDepartment masDepartmentObj = new MasDepartment();
				masDepartmentObj.setId(prescribedDepartmentId);
				opdSurgeryHeader.setPrescribedDepartment(masDepartmentObj);
			}

			Date date = HMSUtil.convertStringTypeDateToDateType(requisitionDate);
			opdSurgeryHeader.setRequisitionDate(date);
			opdSurgeryHeader.setRequisitionTime(requisitionTime);

			opdSurgeryHeader.setPatientStatus(pStatus);

			if(pacRequird !=null && pacRequird.equalsIgnoreCase("y")){
			opdSurgeryHeader.setPacStatus("pending");
			}else{
			opdSurgeryHeader.setPacStatus("Cleared");
			}
			opdSurgeryHeader.setBookingStatus("pending");
			/*
			 * method created for getting employee id and name from username.
			 * "getEmployeeIdFromUserName(userName)"
			 */
			// Map<String,Object>map= getEmployeeIdFromUserName(userName);
			// int employeeId=(Integer)map.get("employeeId");
			int employeeId=0;
			if( user.getEmployee()!=null){
			 employeeId = user.getEmployee().getId();
			}
			MasEmployee masEmployee = new MasEmployee();
			masEmployee.setId(employeeId);
			opdSurgeryHeader.setEmployee(masEmployee);

			hbt.save(opdSurgeryHeader);
			hbt.refresh(opdSurgeryHeader);

			int chargeCodeId = 0;
			for (int i = 0; i < chargeCodeList.size(); i++) {
				chargeCodeId = (Integer) chargeCodeList.get(i);

				OpdSurgeryDetail opdSurgeryDetail = new OpdSurgeryDetail();
				opdSurgeryDetail.setOpdSurgery(opdSurgeryHeader);
				MasChargeCode masChargeCode = new MasChargeCode();
				masChargeCode.setId(chargeCodeId);
				opdSurgeryDetail.setChargeCode(masChargeCode);
				if (docId != 0) {
					opdSurgeryDetail.setSurgeon(new MasEmployee(docId));
				}
				hbt.save(opdSurgeryDetail);

			}
			succesfullyAdded = true;
			tx.commit();
		} catch (Exception e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();

		}
		return succesfullyAdded;
	}
	// -----------------------------------------End of methods by
	// Vikas---------------------------------

	/**
	 * --------------------------------------------Methods For OPD Ophthamology
	 * By Ritu-------------------------
	 * 
	 */

	public Map<String, Object> submitOphthalmologyDetails(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		int hospitalId = 0;
		String userName = "";

		userName = box.getString("userName");

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");

		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);

		OpdOphthalmology opdOphthalmology = new OpdOphthalmology();

		try {

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
            int opdOphthalmologyId = 0;
            opdOphthalmologyId = box.getInt("opdOphthalmologyId");
            if(opdOphthalmologyId != 0)
            	opdOphthalmology.setId(opdOphthalmologyId);
			int visitId = box.getInt(VISIT_ID);
			Visit visit = new Visit();
			visit.setId(visitId);
			opdOphthalmology.setVisit(visit);

			int hinId = box.getInt(HIN_ID);
			Patient patient = new Patient();
			patient.setId(hinId);
			opdOphthalmology.setHin(patient);

			hospitalId = box.getInt("hospitalId");
			MasHospital hospital = new MasHospital();
			hospital.setId(hospitalId);
			opdOphthalmology.setHospital(hospital);

			opdOphthalmology
					.setDecreasedVision(box.getString(DECREASED_VISION));
			opdOphthalmology.setRedness(box.getString(REDNESS));
			opdOphthalmology.setDischarge(box.getString(DISCHARGE));
			opdOphthalmology.setPain(box.getString(PAIN));
			opdOphthalmology.setFloaterTraumaEpiphora(box
					.getString(FLOATER_TRAUMA_EPIPHORA));

			if (box.getString(READING) != null) {
				opdOphthalmology.setReading(box.getString(READING));
			}
			if (box.getString(DRIVING) != null) {
				opdOphthalmology.setDriving(box.getString(DRIVING));
			}
			if (box.getString(COOKING) != null) {
				opdOphthalmology.setCooking(box.getString(COOKING));
			}
			if (box.getString(PERSONAL_HYGIENE) != null) {
				opdOphthalmology.setPersonalHygiene(box
						.getString(PERSONAL_HYGIENE));
			}
			if (box.getString(AMBULATORY) != null) {
				opdOphthalmology.setAmbulatry(box.getString(AMBULATORY));
			}
			if (box.getString(CAD) != null) {
				opdOphthalmology.setCad(box.getString(CAD));
			}

			if (box.getString(DM) != null) {
				opdOphthalmology.setDm(box.getString(DM));
			}
			if (box.getString(HTN) != null) {
				opdOphthalmology.setHtn(box.getString(HTN));
			}
			if (box.getString(BA) != null) {
				opdOphthalmology.setBa(box.getString(BA));
			}
			if (box.getString(AUTOIMMUNE) != null) {
				opdOphthalmology.setAutoimmune(box.getString(AUTOIMMUNE));
			}
			if (box.getString(AMBULATORY) != null) {
				opdOphthalmology.setAmbulatry(box.getString(AMBULATORY));
			}
			if (box.getString(OTHERS) != null) {
				opdOphthalmology.setOthers(box.getString(OTHERS));
			}

			opdOphthalmology.setDistanceRe(box.getString(DISTANCE_RE));
			opdOphthalmology.setDistanceLe(box.getString(DISTANCE_LE));
			opdOphthalmology.setDistancePh(box.getString(DISTANCE_PH));
			opdOphthalmology.setNearRe(box.getString(NEAR_RE));
			opdOphthalmology.setNearLe(box.getString(NEAR_LE));
			opdOphthalmology.setNearPh(box.getString(NEAR_PH));
			opdOphthalmology.setRefractionRe(box.getString(REFRACTION_RE));
			opdOphthalmology.setRefractionLe(box.getString(REFRACTION_LE));
			opdOphthalmology.setRefractionPh(box.getString(REFRACTION_PH));
			opdOphthalmology.setAcceptanceDistanceRe(box
					.getString(ACCEPTANCE_DISTANCE_RE));
			opdOphthalmology.setAcceptanceDistanceLe(box
					.getString(ACCEPTANCE_DISTANCE_LE));
			opdOphthalmology.setAcceptanceDistancePh(box
					.getString(ACCEPTANCE_DISTANCE_PH));
			opdOphthalmology.setAcceptanceNearRe(box
					.getString(ACCEPTANCE_NEAR_RE));
			opdOphthalmology.setAcceptanceNearLe(box
					.getString(ACCEPTANCE_NEAR_LE));
			opdOphthalmology.setAcceptanceNearPh(box
					.getString(ACCEPTANCE_NEAR_PH));
			opdOphthalmology.setConvergence(box.getString(CONVERGENCE));
			opdOphthalmology.setColorVision(box.getString(COLOR_VISION));
			opdOphthalmology.setOcularMovement(box.getString(OCULAR_MOVEMENTS));
			opdOphthalmology.setLids(box.getString(LIDS));
			opdOphthalmology.setConjunctiva(box.getString(CONJUNCTIVA));
			opdOphthalmology.setCorneaAcRe(box.getString(CORNEA_AC_RE));
			opdOphthalmology.setCorneaAcLe(box.getString(CORNEA_AC_LE));

			opdOphthalmology
					.setAntChamberDepthLe(box.getString(ANT_CHAMBER_LE));
			opdOphthalmology
					.setAntChamberDepthRe(box.getString(ANT_CHAMBER_RE));
			opdOphthalmology.setCellsFlareLe(box.getString(CELLS_FLARE_LE));
			opdOphthalmology.setCellsFlareRe(box.getString(CELLS_FLARE_RE));
			opdOphthalmology.setPxfNviLe(box.getString(PXF_NVI_LE));
			opdOphthalmology.setPxfNviRe(box.getString(PXF_NVI_RE));

			if (box.getString(DIRECT) != null) {
				opdOphthalmology.setPupilReactionDirect(box.getString(DIRECT));
			}
			if (box.getString(CONSENSNAL) != null) {
				opdOphthalmology.setPupilReactionConsensnal(box
						.getString(CONSENSNAL));
			}
			if (box.getString(RAPD) != null) {
				opdOphthalmology.setPupilReactionRapd(box.getString(RAPD));
			}

			opdOphthalmology.setGonioscopyRe(box.getString(GONIOSCOPY_RE));
			opdOphthalmology.setGonioscopyLe(box.getString(GONIOSCOPY_LE));
			opdOphthalmology.setIopRe(box.getString(IOP_RE));
			opdOphthalmology.setIopLe(box.getString(IOP_LE));
			opdOphthalmology.setDilationRe(box.getString(DILATION_RE));
			opdOphthalmology.setDilationLe(box.getString(DILATION_LE));
			opdOphthalmology.setLensRe(box.getString(LENS_RE));
			opdOphthalmology.setLensLe(box.getString(LENS_LE));
			opdOphthalmology.setFundusRe(box.getString(FUNDUS_RE));
			opdOphthalmology.setFundusLe(box.getString(FUNDUS_LE));

			opdOphthalmology.setLastChgBy(userName);
			opdOphthalmology.setLastChgDate(date);
			opdOphthalmology.setLastChgTime(time);

			hbt.saveOrUpdate(opdOphthalmology);
			saved = true;

		} catch (Exception e) {
			saved = false;
			e.printStackTrace();
		}
		map.put("saved", saved);

		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getPatientOphthalmologyDetails(
			Map<String, Object> parameterMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdOphthalmology> ophthalmologyList = new ArrayList<OpdOphthalmology>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();

		try {
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}
			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				ophthalmologyList = session.createCriteria(
						OpdOphthalmology.class).createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", visitId)).list();
				map.put("ophthalmologyList", ophthalmologyList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getFrequencyList() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();
		List<MasAnesthesia> anesthesiaList = new ArrayList<MasAnesthesia>();
		Session session = (Session) getSession();

		try {
			frequencyList = session.createCriteria(MasFrequency.class).add(
					Restrictions.eq("Status", "y")).addOrder(Order.asc("OrderNo")).list();
			anesthesiaList = session.createCriteria(MasAnesthesia.class).add(
					Restrictions.eq("Status", "y")).list();
			map.put("frequencyList", frequencyList);
			map.put("anesthesiaList", anesthesiaList);
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> submitOphthalmologyDiagnosis(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		String userName = "";

		userName = box.getString("userName");

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");

		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);

		OpdOphDiagnosisHeader diagnosisHeader = new OpdOphDiagnosisHeader();

		try {
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			Patient patient = new Patient();
			patient.setId(box.getInt(HIN_ID));
			diagnosisHeader.setHin(patient);

			Visit visit = new Visit();
			visit.setId(box.getInt(VISIT_ID));
			diagnosisHeader.setVisit(visit);

			if (box.getInt(ANESTHESIA_ID) != 0) {
				MasAnesthesia anesthesia = new MasAnesthesia();
				anesthesia.setId(box.getInt(ANESTHESIA_ID));
				diagnosisHeader.setAnesthesia(anesthesia);
			}

			MasHospital hospital = new MasHospital();
			hospital.setId(box.getInt("hospitalId"));
			diagnosisHeader.setHospital(hospital);

			diagnosisHeader.setOcular(box.getString(OCULAR));
			diagnosisHeader.setSystemic(box.getString(SYSTEMIC));
			diagnosisHeader.setPlan(box.getString(PLAN));
			diagnosisHeader.setRightEyeSurgery(box.getString(RIGHT_EYE));
			diagnosisHeader.setLeftEyeSurgery(box.getString(LEFT_EYE));

			if (box.getString(NEXT_REVIEW_DATE) != null
					&& !box.getString(NEXT_REVIEW_DATE).equals("")) {
				diagnosisHeader.setNextReviewDate(HMSUtil
						.convertStringTypeDateToDateType(box
								.getString(NEXT_REVIEW_DATE)));
			}

			diagnosisHeader.setLastChgBy(userName);
			diagnosisHeader.setLastChgDate(date);
			diagnosisHeader.setLastChgTime(time);

			hbt.save(diagnosisHeader);

			Vector medicine = box.getVector(MEDICINE);
			Vector uom = box.getVector(UOM);
			Vector frequency = box.getVector(FREQUENCY);
			Vector eye = box.getVector(EYE);

			for (int i = 0; i < medicine.size(); i++) {
				OpdOphDiagnosisDetails diagnosisDetails = new OpdOphDiagnosisDetails();
				if (medicine.get(i) != null && !medicine.get(i).equals("")) {
					MasFrequency masFrequency = new MasFrequency();
					masFrequency.setId(Integer.valueOf(frequency.get(i)
							.toString()));

					diagnosisDetails.setMedicine(medicine.get(i).toString());
					diagnosisDetails.setDrugType(uom.get(i).toString());
					diagnosisDetails.setEye(eye.get(i).toString());
					diagnosisDetails.setFrequency(masFrequency);
					diagnosisDetails.setOphDiagnosisHeader(diagnosisHeader);
					diagnosisDetails.setLastChgBy(userName);
					diagnosisDetails.setLastChgDate(date);
					diagnosisDetails.setLastChgTime(time);
					hbt.save(diagnosisDetails);
				}
			}
			saved = true;
		} catch (DataAccessException e) {
			saved = false;
			e.printStackTrace();
		}
		map.put("saved", saved);

		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getOphthalmologyDiagnosisDetails(
			Map<String, Object> parameterMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdOphDiagnosisHeader> ophDiagnosisList = new ArrayList<OpdOphDiagnosisHeader>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();

		try {
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}
			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				ophDiagnosisList = session.createCriteria(
						OpdOphDiagnosisHeader.class).createAlias("Visit",
						"visit").add(Restrictions.eq("visit.Id", visitId))
						.list();
				map.put("ophDiagnosisList", ophDiagnosisList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> submitOphthalmologyRetinal(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		String userName = "";

		userName = box.getString("userName");

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");

		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);

		OpdOphRetinalHeader retinalHeader = new OpdOphRetinalHeader();

		try {
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			Patient patient = new Patient();
			patient.setId(box.getInt(HIN_ID));
			retinalHeader.setHin(patient);

			Visit visit = new Visit();
			visit.setId(box.getInt(VISIT_ID));
			retinalHeader.setVisit(visit);

			MasHospital hospital = new MasHospital();
			hospital.setId(box.getInt("hospitalId"));
			retinalHeader.setHospital(hospital);

			retinalHeader.setRightEye(box.getString(RIGHT_EYE));
			retinalHeader.setLeftEye(box.getString(LEFT_EYE));
			retinalHeader.setRetinalLaserDate(date);

			retinalHeader.setLastChgBy(userName);
			retinalHeader.setLastChgDate(date);
			retinalHeader.setLastChgTime(time);

			hbt.save(retinalHeader);

			Vector eye = box.getVector(EYE);
			Vector power = box.getVector(POWER);
			Vector duration = box.getVector(DURATION);
			Vector noOfSpots = box.getVector(NO_OF_SPOTS);
			Vector laserType = box.getVector(LASER_TYPE);
			Vector doctorName = box.getVector(DOCTOR_NAME);
			Vector sign = box.getVector(SIGN);

			for (int i = 0; i < power.size(); i++) {
				OpdOphRetinalDetails retinalDetails = new OpdOphRetinalDetails();
				if (power.get(i) != null && !power.get(i).equals("")) {

					retinalDetails.setOphRetinalHeader(retinalHeader);
					retinalDetails.setEye(eye.get(i).toString());
					retinalDetails.setPower(power.get(i).toString());
					retinalDetails.setDuration(duration.get(i).toString());
					retinalDetails.setNoOfSpots(noOfSpots.get(i).toString());
					retinalDetails.setLaserType(laserType.get(i).toString());
					retinalDetails.setDoctorName(doctorName.get(i).toString());
					retinalDetails.setSign(sign.get(i).toString());
					retinalDetails.setLastChgBy(userName);
					retinalDetails.setLastChgDate(date);
					retinalDetails.setLastChgTime(time);

					hbt.save(retinalDetails);
				}
			}
			saved = true;
		} catch (DataAccessException e) {
			saved = false;
			e.printStackTrace();
		}
		map.put("saved", saved);

		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getOphthalmologyRetinalDetails(
			Map<String, Object> parameterMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdOphRetinalHeader> ophRetinalList = new ArrayList<OpdOphRetinalHeader>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();

		try {
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}
			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				ophRetinalList = session.createCriteria(
						OpdOphRetinalHeader.class)
						.createAlias("Visit", "visit").add(
								Restrictions.eq("visit.Id", visitId)).list();
				map.put("ophRetinalList", ophRetinalList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public Map<String, Object> submitOphthalmologyFollowUp(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		int hospitalId = 0;
		String userName = "";

		userName = box.getString("userName");

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");

		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);

		OpdOphFollowUp ophFollowUp = new OpdOphFollowUp();

		try {

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			int opdOphFollowUpId = 0 ;
			opdOphFollowUpId = box.getInt("opdOphFollowUpId");
			if(opdOphFollowUpId !=0)
				ophFollowUp.setId(opdOphFollowUpId);

			int visitId = box.getInt(VISIT_ID);
			Visit visit = new Visit();
			visit.setId(visitId);
			ophFollowUp.setVisit(visit);

			int hinId = box.getInt(HIN_ID);
			Patient patient = new Patient();
			patient.setId(hinId);
			ophFollowUp.setHin(patient);

			hospitalId = box.getInt("hospitalId");
			MasHospital hospital = new MasHospital();
			hospital.setId(hospitalId);
			ophFollowUp.setHospital(hospital);

			ophFollowUp.setAntSegmentRe(box.getString(ANT_SEGMENT_RE));
			ophFollowUp.setAntSegmentLe(box.getString(ANT_SEGMENT_LE));
			ophFollowUp.setIop(box.getString(IOP));
			ophFollowUp.setFundusRe(box.getString(FUNDUS_RE));
			ophFollowUp.setFundusLe(box.getString(FUNDUS_LE));
			ophFollowUp.setAdv(box.getString(ADV));
			ophFollowUp.setFollowUpDate(date);
			ophFollowUp.setLastChgBy(userName);
			ophFollowUp.setLastChgDate(date);
			ophFollowUp.setLastChgTime(time);

			hbt.saveOrUpdate(ophFollowUp);
			saved = true;
		} catch (Exception e) {
			saved = false;
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getOphthalmologyFollowUpDetails(
			Map<String, Object> parameterMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdOphFollowUp> ophFollowUpList = new ArrayList<OpdOphFollowUp>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();

		try {
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}
			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				ophFollowUpList = session.createCriteria(OpdOphFollowUp.class)
						.createAlias("Visit", "visit").add(
								Restrictions.eq("visit.Id", visitId)).list();
				map.put("ophFollowUpList", ophFollowUpList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	/**
	 * -------------------------------------------- End of methods by
	 * Ritu-------------------------
	 */

	/**
	 * --------------------------------------------Start of Methods For By
	 * Mansi-------------------------
	 * 
	 */
	// ................................... Patient Allergic Drugs
	// ............................

	@SuppressWarnings("unchecked")
	public Map<String, Object> getItemList(Map<String, Object> map) {
		List<PatientAllergicDrugsHd> searchPatientAllergicDrugsHdList = new ArrayList<PatientAllergicDrugsHd>();
		List<PatientAllergicDrugsDt> searchPatientAllergicDrugsDtList = new ArrayList<PatientAllergicDrugsDt>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Session session = (Session) getSession();
		try {
			String str = "%" + map.get("autoHint") + "%";
			String query = "";
			int visitId = 0;

			if (map.get("visitId") != null) {
				visitId = (Integer) map.get("visitId");
			}

			searchPatientAllergicDrugsHdList = session.createCriteria(
					PatientAllergicDrugsHd.class).createAlias("Visit", "visit")
					.add(Restrictions.eq("visit.Id", visitId)).list();

			if (searchPatientAllergicDrugsHdList.size() > 0) {
				PatientAllergicDrugsHd patientAllergicDrugsHd = (PatientAllergicDrugsHd) searchPatientAllergicDrugsHdList
						.get(0);
				int id = patientAllergicDrugsHd.getId();
				searchPatientAllergicDrugsDtList = session.createCriteria(
						PatientAllergicDrugsDt.class).createAlias(
						"PatientAllergicDrugsHd", "patientAllergicDrugsHd")
						.add(Restrictions.eq("patientAllergicDrugsHd.Id", id))
						.list();
				if (searchPatientAllergicDrugsDtList.size() > 0) {
					query = "SELECT DISTINCT(sib.Nomenclature),sib.PvmsNo,sib.Id FROM MasStoreItem as sib where sib.Id NOT IN (select dt.Item.Id from PatientAllergicDrugsDt as dt) and sib.Department.Id='24' and sib.Nomenclature like '"
							+ str + "'";
				} else {
					query = "SELECT DISTINCT(sib.Nomenclature),sib.PvmsNo from MasStoreItem as sib where sib.Department.Id='24' and sib.Nomenclature like '"
							+ str + "'";
				}

			} else {
				query = "SELECT DISTINCT(sib.Nomenclature),sib.PvmsNo from MasStoreItem as sib where sib.Department.Id='24' and sib.Nomenclature like '"
						+ str + "'";
			}
			Query q = session.createQuery(query);
			q.setFirstResult(0);
			q.setMaxResults(10);
			itemList = q.list();
			Iterator itr = itemList.iterator();
			while (itr.hasNext()) {
				Object[] pair = (Object[]) itr.next();
				@SuppressWarnings("unused")
				String nomenclature = (String) pair[0];

			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> fillItemsInGrid(Map<String, Object> map) {

		Session session = (Session) getSession();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		try {
			String str = "" + map.get("pvmsNo");
			Criteria c = session.createCriteria(MasStoreItem.class).add(
					Restrictions.eq("PvmsNo", str));
			itemList = c.list();
			map.put("itemList", itemList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> addPatientAllergicDrugs(
			Map<String, Object> infoMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		PatientAllergicDrugsHd patientAllergicDrugshd = new PatientAllergicDrugsHd();
		List itemList = new ArrayList();
		int itemIdFromRequest = 0;
		int patientAllergicDrugshdId = 0;
		List specialInstructionList = new ArrayList();
		boolean success = false;
		int userId = 0;
		int visitId = 0;
		int hospitalId = 0;
		if (infoMap.get("patientAllergicDrugshd") != null) {
			patientAllergicDrugshd = (PatientAllergicDrugsHd) infoMap
					.get("patientAllergicDrugshd");
		}

		if (infoMap.get("userId") != null) {
			userId = (Integer) infoMap.get("userId");
		}
		if (infoMap.get("patientAllergicDrugshdId") != null) {

			itemIdFromRequest = (Integer) infoMap
					.get("patientAllergicDrugshdId");

		}
		if (infoMap.get("specialInstruction") != null) {
			specialInstructionList = (List) infoMap.get("specialInstruction");
		}
		if (infoMap.get("visitId") != null) {
			visitId = (Integer) infoMap.get("visitId");
		}
		if (infoMap.get("hospitalId") != null) {
			hospitalId = (Integer) infoMap.get("hospitalId");
		}
		String referredDept = (String) infoMap.get("referredDept").toString();

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");

		List<PatientAllergicDrugsHd> searchPatientAllergicDrugsHdList = new ArrayList<PatientAllergicDrugsHd>();
		searchPatientAllergicDrugsHdList = test(visitId);
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			if (searchPatientAllergicDrugsHdList.size() == 0) {

				if (infoMap.get("headerStored") != null) {
					if (!infoMap.get("headerStored").equals("yes")) {
						hbt.save(patientAllergicDrugshd);
						patientAllergicDrugshdId = patientAllergicDrugshd
								.getId();
						map.put("patientAllergicDrugshdId",
								patientAllergicDrugshdId);

					}
				}
			} else {
				int headerId = 0;
				for (PatientAllergicDrugsHd patientAllergicDrugsHd2 : searchPatientAllergicDrugsHdList) {
					headerId = patientAllergicDrugsHd2.getId();
					patientAllergicDrugshd.setId(headerId);
				}

			}

			if (infoMap.get("itemList") != null) {
				itemList = (List) infoMap.get("itemList");
				if (itemList.size() > 0) {
					for (int i = 0; i < itemList.size(); i++) {
						PatientAllergicDrugsDt patientAllergicDrugsdt = new PatientAllergicDrugsDt();
						MasStoreItem masStoreItem = new MasStoreItem();
						if (itemList.get(i) != null) {
							int itemId = Integer.parseInt("" + itemList.get(i));
							masStoreItem.setId(itemId);
							patientAllergicDrugsdt.setItem(masStoreItem);

							patientAllergicDrugsdt
									.setSpecialInstruction(specialInstructionList
											.get(i).toString());
							patientAllergicDrugsdt.setLastChgBy(userId);
							patientAllergicDrugsdt.setLastChgDate(HMSUtil
									.convertStringTypeDateToDateType(date));
							patientAllergicDrugsdt.setLastChgTime(time);
							patientAllergicDrugsdt.setStatus("y");
							if (infoMap.get("headerStored").equals("yes")) {

								PatientAllergicDrugsHd patientAllergicDrugsHd = new PatientAllergicDrugsHd();
								patientAllergicDrugsHd.setId(itemIdFromRequest);
								patientAllergicDrugsdt
										.setPatientAllergicDrugsHd(patientAllergicDrugsHd);

							} else {
								patientAllergicDrugsdt
										.setPatientAllergicDrugsHd(patientAllergicDrugshd);
							}
						}
						hbt.save(patientAllergicDrugsdt);

						Visit visitObjToUpdate = (Visit) hbt.load(Visit.class,
								visitId);
						visitObjToUpdate.setVisitStatus("w");
						hbt.update(visitObjToUpdate);

						OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

						opdPatientDetails.setReferredDept(referredDept);

						MasHospital masHospital = (MasHospital) hbt.load(
								MasHospital.class, hospitalId);
						opdPatientDetails.setHospital(masHospital);

						opdPatientDetails.setVisit(visitObjToUpdate);
						hbt.save(opdPatientDetails);

					}
				}
			}
			success = true;
			map.put("success", success);
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return map;

	}

	@SuppressWarnings("unchecked")
	private List<PatientAllergicDrugsHd> test(int visitId) {
		Session session = (Session) getSession();
		List<PatientAllergicDrugsHd> searchPatientAllergicDrugsHdList = new ArrayList<PatientAllergicDrugsHd>();
		try {
			searchPatientAllergicDrugsHdList = session.createCriteria(
					PatientAllergicDrugsHd.class).createAlias("Visit", "visit")
					.add(Restrictions.eq("visit.Id", visitId)).list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return searchPatientAllergicDrugsHdList;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getItem() {
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();

		Session session = (Session) getSession();
		try {
			List lst = new ArrayList();
			lst.add("LABORATORY");
			lst.add("RADIOLOGY");
			itemList = session.createCriteria(MasStoreItem.class).add(
					Restrictions.eq("Status", "y")).list();

			if (itemList.size() > 0) {
				detailsMap.put("itemList", itemList);
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return detailsMap;
	}
	//======================code by anamika============================
	
	@SuppressWarnings("unchecked")
	@Override
	public Map<String, Object> showAllergyDetailsJsp(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		patientDataList = session.createCriteria(Visit.class).add(Restrictions.eq("Id", box.getInt("visitId"))).list();
	
		List<AllergyDetail> allergyDetailsList = new ArrayList<AllergyDetail>();
		allergyDetailsList = session.createCriteria(AllergyDetail.class).createAlias("Hin", "hin").add(Restrictions.eq("hin.Id", box.getInt("hinId"))).list();
		
		List<MasAllergyType> allergyTypeList = new ArrayList<MasAllergyType>();
		allergyTypeList = session.createCriteria(MasAllergyType.class).add(Restrictions.eq("Status", "y")).list();
		
		map.put("allergyTypeList", allergyTypeList);
		map.put("allergyDetailsList", allergyDetailsList);
		map.put("patientDataList", patientDataList);
		return map;
	}
	@Override
	public Map<String, Object> getAllergyTypeListForAutoComplete(Map<String, Object> generalMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasAllergyType> allergyTypeList = new ArrayList<MasAllergyType>();
		Session session = (Session) getSession();
		try {
			String str =  generalMap.get("autoHint") + "%";
			String query = "from MasAllergyType  as mat where upper(AllergyTypeName) like upper('"
					+ str + "')";
			
			Query q = session.createQuery(query);
			q.setFirstResult(0);
			q.setMaxResults(10);
			allergyTypeList = q.list();
			
		} catch (Exception e) {

			e.printStackTrace();
		}
		map.put("allergyTypeList", allergyTypeList);
		return map;
	}


	@Override
	public Map<String, Object> getAllergyId(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasAllergyType> allergyTypeList = new ArrayList<MasAllergyType>();
		String allergyTypeCode =  box.getString("allergyTypeCode");
		Session session = (Session)getSession();
		allergyTypeList = session.createCriteria(MasAllergyType.class).add(Restrictions.eq("AllergyTypeCode", allergyTypeCode))
		  				.list();
		map.put("allergyTypeList", allergyTypeList);
		return map;
	}

	@SuppressWarnings("unchecked")
	@Override
	public Map<String, Object> saveAllergyDetails(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

		boolean flag = false;
		Transaction tx = null;
		Session session = (Session)getSession();
		try {
			tx = session.beginTransaction();
			int allergyCount = box.getInt("allergyCount");
		
			for (int j = 1; j <= allergyCount; j++) {
				int allergyDetailsId = box.getInt("allergyDetailsId"+j);
				if(allergyDetailsId==0 && !box.getString("allergyName"+j).equals("")){
					AllergyDetail allergyDetail = new AllergyDetail();
					
					//MasAllergyType masAllergyType = new MasAllergyType();
					
					//masAllergyType.setId(box.getInt("allergyId"+j));
					//allergyDetail.setAllergyType(masAllergyType);
					allergyDetail.setAllergyName(box.getString("allergyName"+j));
					allergyDetail.setDescription(box.getString("description"+j));
					allergyDetail.setRemarks(box.getString("remarks"+j));
					allergyDetail.setSeverity(box.getString("severity"+j));
					allergyDetail.setSince(box.getString("since"+j));
					Patient patient =  new Patient();
					patient.setId(box.getInt("hinId"));
					allergyDetail.setHin(patient);
				
					MasHospital masHospital = new MasHospital();
					masHospital.setId(box.getInt("hospitalId"));
					allergyDetail.setHospital(masHospital);
				
					allergyDetail.setStatus("y");
				
					Users user = new Users();
					user.setId(box.getInt("userId"));
					allergyDetail.setLastChgBy(user);
				
					MasEmployee medicalOfficer =new MasEmployee();
					medicalOfficer.setId(box.getInt("doctorId"));
					allergyDetail.setMedicalOfficer(medicalOfficer);		
				
					allergyDetail.setStatus("y");
					allergyDetail.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(box.getString(LAST_CHANGED_DATE)));
					allergyDetail.setLastChgTime(box.getString(LAST_CHANGED_TIME));
					hbt.save(allergyDetail);
					
				}
			}
			
			flag = true;
			tx.commit();
		} catch (DataAccessException e) {
			if(tx!= null){
				tx.rollback();
			}
			e.printStackTrace();
		}
		List<MasAllergyType> allergyTypeList = new ArrayList<MasAllergyType>();
		allergyTypeList = session.createCriteria(MasAllergyType.class).add(Restrictions.eq("Status", "y")).list();
		map.put("allergyTypeList", allergyTypeList);
		map.put("flag", flag);
		return map;
	}

	
	
	//==============================================

	@SuppressWarnings("unchecked")
	public Map<String, Object> getPatientAllergicDrugs(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<PatientAllergicDrugsHd> searchPatientAllergicDrugsHdList = new ArrayList<PatientAllergicDrugsHd>();
		List<PatientAllergicDrugsDt> searchPatientAllergicDrugsDtList = new ArrayList<PatientAllergicDrugsDt>();
		searchPatientAllergicDrugsHdList = session.createCriteria(
				PatientAllergicDrugsHd.class).createAlias("Visit", "visit")
				.add(Restrictions.eq("visit.Id", visitId)).list();
		if (searchPatientAllergicDrugsHdList.size() > 0) {
			PatientAllergicDrugsHd patientAllergicDrugsHd = (PatientAllergicDrugsHd) searchPatientAllergicDrugsHdList
					.get(0);
			int id = patientAllergicDrugsHd.getId();
			searchPatientAllergicDrugsDtList = session.createCriteria(
					PatientAllergicDrugsDt.class).createAlias(
					"PatientAllergicDrugsHd", "patientAllergicDrugsHd").add(
					Restrictions.eq("patientAllergicDrugsHd.Id", id)).list();
			map.put("searchPatientAllergicDrugsHdList",
					searchPatientAllergicDrugsHdList);
			map.put("searchPatientAllergicDrugsDtList",
					searchPatientAllergicDrugsDtList);
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();
		} else {
			try {
				patientDataList = session.createCriteria(Visit.class).add(
						Restrictions.eq("Id", visitId)).list();

			} catch (HibernateException e) {
				e.printStackTrace();
			}
		}
		map.put("patientDataList", patientDataList);

		return map;
	}

	// ................................... Patient
	// History............................

	@SuppressWarnings("unchecked")
	public Map<String, Object> getOpdTemplateDepartmentWise(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}

		map.put("patientDataList", patientDataList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getPatientHistory(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List<OpdPatientHistory> patientHistoryList = new ArrayList<OpdPatientHistory>();
		Map<String, Object> map = new HashMap<String, Object>();
		patientHistoryList = session.createCriteria(OpdPatientHistory.class)
				.add(Restrictions.eq("VisitInpatientId", visitId)).list();

		if (patientHistoryList.size() > 0) {
			map.put("patientHistoryList", patientHistoryList);
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();

		} else {
			try {
				patientDataList = session.createCriteria(Visit.class).add(
						Restrictions.eq("Id", visitId)).list();

			} catch (HibernateException e) {
				e.printStackTrace();
			}
		}
		map.put("patientDataList", patientDataList);
		return map;
	}

	public boolean addPatientHistory(Map<String, Object> infoMap) {
		OpdPatientHistory patientHistory = new OpdPatientHistory();
		boolean successfullyAdded = false;
		int visitId = 0;
		int hospitalId = 0;
		if (infoMap.get("patientHistory") != null) {
			patientHistory = (OpdPatientHistory) infoMap.get("patientHistory");
		}
		if (infoMap.get("visitId") != null) {
			visitId = (Integer) infoMap.get("visitId");
		}
		if (infoMap.get("hospitalId") != null) {
			hospitalId = (Integer) infoMap.get("hospitalId");
		}
		String referredDept = (String) infoMap.get("referredDept").toString();

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			hbt.save(patientHistory);

			Visit visitObjToUpdate = (Visit) hbt.load(Visit.class, visitId);
			visitObjToUpdate.setVisitStatus("w");
			hbt.update(visitObjToUpdate);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

			opdPatientDetails.setReferredDept(referredDept);

			MasHospital masHospital = (MasHospital) hbt.load(MasHospital.class,
					hospitalId);
			opdPatientDetails.setHospital(masHospital);

			opdPatientDetails.setVisit(visitObjToUpdate);
			hbt.save(opdPatientDetails);

			successfullyAdded = true;
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return successfullyAdded;

	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> viewPatientHistory(
			Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;
		int max = 0;
		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		List<OpdPatientHistory> patientHistoryList = new ArrayList<OpdPatientHistory>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {
			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}

			if (flag.equals("prev")) {

				visitNoForView = visitNo - 1;

			}

			else if (flag.equals("next")) {

				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}

			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0 && visitList != null) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				patientHistoryList = session.createCriteria(
						OpdPatientHistory.class).add(
						Restrictions.eq("VisitInpatientId", visitId)).list();
				map.put("patientHistoryList", patientHistoryList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	// ................................Pediatric Vaccination Plan
	// .............................

	@SuppressWarnings("unchecked")
	public Map<String, Object> getPediatricVaccinationPlanJsp(int visitId) {
		Session session = (Session) getSession();
	
		Map<String, Object> map = new HashMap<String, Object>();
/*
 * 	List<Visit> patientDataList = new ArrayList<Visit>();
		List<OpdVaccinMst> opdVaccinMstList = new ArrayList<OpdVaccinMst>();
		List<OpdVaccinationPlan> opdVaccinationPlanList = new ArrayList<OpdVaccinationPlan>();
		try {
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();
			opdVaccinMstList = getHibernateTemplate()
					.find(
							"from jkt.hms.masters.business.OpdVaccinMst as mi where mi.Status = 'y'");
			opdVaccinationPlanList = session.createCriteria(
					OpdVaccinationPlan.class).createAlias("Visit", "visit")
					.add(Restrictions.eq("visit.Id", visitId)).list();
			if (opdVaccinationPlanList.size() > 0) {
				map.put("opdVaccinationPlanList", opdVaccinationPlanList);
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		map.put("opdVaccinMstList", opdVaccinMstList);*/
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> addPediatricVaccinationPlan(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
	/*	boolean saved = false;
		int hinId = 0;
		int visitId = 0;
		String vacinationType = "";
		String dob = "";
		int userId = 0;
		int departmentId = 0;
		int hospitalId = 0;
		try {

			visitId = box.getInt(VISIT_ID);
			hinId = box.getInt(HIN_ID);
			vacinationType = box.getString(VACCINE_TYPE);
			dob = box.getString(DATE_OF_BIRTH);
			userId = box.getInt("userId");
			departmentId = box.getInt("departmentId");
			hospitalId = box.getInt("hospitalId");
			String referredDept = (String) box.get("referredDept").toString();
			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");
			Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
			Patient patient = new Patient();
			patient.setId(hinId);

			Visit visit = new Visit();
			visit.setId(visitId);

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			Vector vanniceId = box.getVector(VACCINE_ID);
			Vector vaccinDate = box.getVector(VACCINE_DATE);
			Vector vaccinCompleteDate = box.getVector(COMPLETION_DATE);
			Vector remarks = box.getVector(REMARKS);

			for (int i = 0; i < vanniceId.size(); i++) {

				OpdVaccinationPlan vaccinationPlanObj = new OpdVaccinationPlan();
				if (vanniceId.get(i) != null && !vanniceId.get(i).equals("")) {
					OpdVaccinMst vaccin = new OpdVaccinMst();
					if (vanniceId.get(i) != null
							&& !vanniceId.get(i).equals("")) {
						vaccin.setId(Integer.parseInt(vanniceId.get(i)
								.toString()));
						vaccinationPlanObj.setVaccin(vaccin);
					}
					if (remarks.get(i) != null && !remarks.get(i).equals("")) {
						vaccinationPlanObj.setRemarks((String) remarks.get(i));
					}

					if (vaccinDate.get(i) != null
							&& !vaccinDate.get(i).equals("")) {
						vaccinationPlanObj
								.setVaccinDate(HMSUtil
										.convertStringTypeDateToDateType((String) vaccinDate
												.get(i)));
					}

					if (vaccinCompleteDate.get(i) != null
							&& !vaccinCompleteDate.get(i).equals("")) {
						vaccinationPlanObj
								.setVaccinCompleteDate(HMSUtil
										.convertStringTypeDateToDateType((String) vaccinCompleteDate
												.get(i)));
					}
					vaccinationPlanObj.setDepartment(masDepartment);
					vaccinationPlanObj.setHospital(masHospital);
					vaccinationPlanObj.setHin(patient);
					vaccinationPlanObj.setVisit(visit);
					vaccinationPlanObj.setDob(HMSUtil
							.convertStringTypeDateToDateType(dob));

					vaccinationPlanObj.setVacinationType(vacinationType);
					vaccinationPlanObj.setStatus("y");
					vaccinationPlanObj.setLastChgDate(date);
					vaccinationPlanObj.setLastChgTime(time);
					vaccinationPlanObj.setLastChgBy(userId);

					hbt.save(vaccinationPlanObj);

					Visit visitObjToUpdate = (Visit) hbt.load(Visit.class,
							visitId);
					visitObjToUpdate.setVisitStatus("C");
					hbt.update(visitObjToUpdate);

					OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

					opdPatientDetails.setReferredDept(referredDept);

					MasHospital masHospitalob = (MasHospital) hbt.load(
							MasHospital.class, hospitalId);
					opdPatientDetails.setHospital(masHospitalob);

					opdPatientDetails.setVisit(visitObjToUpdate);
					hbt.save(opdPatientDetails);

				}
			}

			saved = true;
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		map.put("saved", saved);*/
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> updatePediatricVaccinationPlan(Box box) {

		Map<String, Object> map = new HashMap<String, Object>();
/*		boolean saved = false;
		int hinId = 0;
		int visitId = 0;
		String vacinationType = "";
		String dob = "";
		int userId = 0;
		int departmentId = 0;
		int hospitalId = 0;
		try {

			visitId = box.getInt(VISIT_ID);
			hinId = box.getInt(HIN_ID);
			vacinationType = box.getString(VACCINE_TYPE);
			dob = box.getString(DATE_OF_BIRTH);
			userId = box.getInt("userId");
			departmentId = box.getInt("departmentId");
			hospitalId = box.getInt("hospitalId");
			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");
			Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
			Patient patient = new Patient();
			patient.setId(hinId);

			Visit visit = new Visit();
			visit.setId(visitId);

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			Vector vacinationId = box.getVector(VACCINATION_ID);
			Vector vanniceId = box.getVector(VACCINE_ID);
			Vector vaccinDate = box.getVector(VACCINE_DATE);
			Vector vaccinCompleteDate = box.getVector(COMPLETION_DATE);
			Vector remarks = box.getVector(REMARKS);
			for (int i = 0; i < vacinationId.size(); i++) {

				OpdVaccinationPlan vaccinationPlanObj = new OpdVaccinationPlan();
				if (vacinationId.get(i) != null
						&& !vacinationId.get(i).equals("")) {
					int vId = Integer.parseInt(vacinationId.get(i).toString());
					vaccinationPlanObj = (OpdVaccinationPlan) getHibernateTemplate()
							.load(OpdVaccinationPlan.class, vId);
					if (vanniceId.get(i) != null
							&& !vanniceId.get(i).equals("")) {
						OpdVaccinMst vaccin = new OpdVaccinMst();
						if (vanniceId.get(i) != null
								&& !vanniceId.get(i).equals("")) {
							vaccin.setId(Integer.parseInt(vanniceId.get(i)
									.toString()));
							vaccinationPlanObj.setVaccin(vaccin);
						}
						if (remarks.get(i) != null
								&& !remarks.get(i).equals("")) {
							vaccinationPlanObj.setRemarks((String) remarks
									.get(i));
						}

						if (vaccinDate.get(i) != null
								&& !vaccinDate.get(i).equals("")) {
							vaccinationPlanObj
									.setVaccinDate(HMSUtil
											.convertStringTypeDateToDateType((String) vaccinDate
													.get(i)));
						}

						if (vaccinCompleteDate.get(i) != null
								&& !vaccinCompleteDate.get(i).equals("")) {
							vaccinationPlanObj
									.setVaccinCompleteDate(HMSUtil
											.convertStringTypeDateToDateType((String) vaccinCompleteDate
													.get(i)));
						}
						vaccinationPlanObj.setDepartment(masDepartment);
						vaccinationPlanObj.setHospital(masHospital);
						vaccinationPlanObj.setHin(patient);
						vaccinationPlanObj.setVisit(visit);
						vaccinationPlanObj.setDob(HMSUtil
								.convertStringTypeDateToDateType(dob));

						vaccinationPlanObj.setVacinationType(vacinationType);
						vaccinationPlanObj.setStatus("y");
						vaccinationPlanObj.setLastChgDate(date);
						vaccinationPlanObj.setLastChgTime(time);
						vaccinationPlanObj.setLastChgBy(userId);

						hbt.update(vaccinationPlanObj);
					}
				}
			}

			saved = true;
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		map.put("saved", saved);*/
		return map;

	}

	// ................................... Pediatric Case Sheet
	// ............................

	@SuppressWarnings("unchecked")
	public Map<String, Object> getPediatricCaseSheet(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<OpdVaccinationPlan> opdVaccinationPlanList = new ArrayList<OpdVaccinationPlan>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<OpdCaseSheet> opdCaseSheetList = null;

		try {
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();
			opdVaccinationPlanList = session.createCriteria(
					OpdVaccinationPlan.class).createAlias("Visit", "visit")
					.add(Restrictions.eq("visit.Id", visitId)).list();
			if (opdVaccinationPlanList.size() > 0) {
				map.put("opdVaccinationPlanList", opdVaccinationPlanList);
			}
			employeeList = getHibernateTemplate()
					.find(
							"from jkt.hms.masters.business.MasEmployee as emp where emp.Status='y' and emp.EmpCategory.Id='1'");
			opdCaseSheetList = session.createCriteria(OpdCaseSheet.class).createAlias("Visit","v")
            					.add(Restrictions.eq("v.Id", visitId)).list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		map.put("employeeList", employeeList);
		map.put("opdCaseSheetList", opdCaseSheetList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> addPediatricCaseSheet(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		int hinId = 0;
		int visitId = 0;
		int opdCaseSheetId = 0;
		String dob = "";
		int userId = 0;
		int departmentId = 0;
		int hospitalId = 0;
		int referedBy = 0;
		Float heightInCmChild;
		Float heightInCmFather;
		Float heightInCmMother;
		String age = "";
		String clinicalNote = "";
		Float rdPercentile;
		String remarks = "";
		Float thPercentile;
		int ht = 0;
		int wt = 0;
		int hc = 0;
		Float bmi;
		Float ofc;
		Float rr;
		try {
			opdCaseSheetId=box.getInt("opdCaseSheetId");
			visitId = box.getInt(VISIT_ID);
			hinId = box.getInt(HIN_ID);
			dob = box.getString(DATE_OF_BIRTH);
			userId = box.getInt("userId");
			departmentId = box.getInt("departmentId");
			hospitalId = box.getInt("hospitalId");
			heightInCmChild = box.getFloat(HEIGHT_IN_CM_CHILD);
			heightInCmFather = box.getFloat(HEIGHT_IN_CM_FATHER);
			heightInCmMother = box.getFloat(HEIGHT_IN_CM_MOTHER);
			age = box.getString(AGE);
			clinicalNote = box.getString(CLINICAL_NOTE);
			rdPercentile = box.getFloat(RD_PERCENDTILE);
			referedBy = box.getInt(EMPLOYEE_ID);
			remarks = box.getString(REMARKS_TEMP);
			thPercentile = box.getFloat(TH_PERCENDTILE);
			wt = box.getInt("kgS");
			ht = box.getInt("htcS");
			hc = box.getInt(HIV);
			bmi = box.getFloat("bmiS");
			ofc = box.getFloat(OFC);
			rr = box.getFloat(RR);
			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");
			Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
			Patient patient = new Patient();
			patient.setId(hinId);

			Visit visit = new Visit();
			visit.setId(visitId);

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);

			MasEmployee masEmployee = new MasEmployee();
			masEmployee.setId(referedBy);

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			OpdCaseSheet caseSheetObj = new OpdCaseSheet();
			if(opdCaseSheetId!=0)
			caseSheetObj.setId(opdCaseSheetId);	
			caseSheetObj.setDepartment(masDepartment);
			caseSheetObj.setHin(patient);
			caseSheetObj.setVisit(visit);
			caseSheetObj.setHospital(masHospital);
			caseSheetObj.setHeightInCmChild(heightInCmChild);
			caseSheetObj.setHeightInCmFather(heightInCmFather);
			caseSheetObj.setHeightInCmMother(heightInCmMother);
			caseSheetObj.setAge(age);
			caseSheetObj.setClinicalNote(clinicalNote);
			caseSheetObj.setRdPercentile(rdPercentile);
			caseSheetObj.setRemarks(remarks);
			caseSheetObj.setThPercentile(thPercentile);
			caseSheetObj.setStatus("y");
			caseSheetObj.setLastChgDate(date);
			caseSheetObj.setLastChgTime(time);
			caseSheetObj.setLastChgBy(userId);

			if (dob != null && !dob.equals("")) {
				caseSheetObj.setDob(HMSUtil
						.convertStringTypeDateToDateType(dob));
			} else {
				caseSheetObj.setDob(null);
			}
			if (referedBy != 0) {
				caseSheetObj.setReferedBy(masEmployee);
			} else {
				caseSheetObj.setReferedBy(null);
			}
			caseSheetObj.setHc(hc);
			caseSheetObj.setBmi(bmi);
			caseSheetObj.setHt(ht);
			caseSheetObj.setWt(wt);

			caseSheetObj.setOfc(ofc);
			caseSheetObj.setRr(rr);

			hbt.saveOrUpdate(caseSheetObj);

			Visit visitObjToUpdate = (Visit) hbt.load(Visit.class, visitId);
			visitObjToUpdate.setVisitStatus("C");
			hbt.update(visitObjToUpdate);

			/*
			 * OpdPatientDetails opdPatientDetails = new OpdPatientDetails();
			 * 
			 * opdPatientDetails.setReferredDept(referredDept);
			 * 
			 * MasHospital masHospitalob =
			 * (MasHospital)hbt.load(MasHospital.class, hospitalId);
			 * opdPatientDetails.setHospital(masHospitalob);
			 * 
			 * opdPatientDetails.setVisit(visitObjToUpdate);
			 * hbt.save(opdPatientDetails);
			 */

			saved = true;
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> updatePediatricCaseSheet(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		int hinId = 0;
		int visitId = 0;
		int pediatricCaseSheetId = 0;
		String dob = "";
		int userId = 0;
		int departmentId = 0;
		int hospitalId = 0;
		int referedBy = 0;
		Float heightInCmChild;
		Float heightInCmFather;
		Float heightInCmMother;
		String age = "";
		String clinicalNote = "";
		Float rdPercentile;
		String remarks = "";
		Float thPercentile;
		int ht = 0;
		int wt = 0;
		int hc = 0;
		Float bmi;
		Float ofc;
		Float rr;
		try {
			visitId = box.getInt(VISIT_ID);
			pediatricCaseSheetId = box.getInt(PEDIATRIC_CASE_SHEET_ID);
			hinId = box.getInt(HIN_ID);
			dob = box.getString(DATE_OF_BIRTH);
			userId = box.getInt("userId");
			departmentId = box.getInt("departmentId");
			hospitalId = box.getInt("hospitalId");
			heightInCmChild = box.getFloat(HEIGHT_IN_CM_CHILD);
			heightInCmFather = box.getFloat(HEIGHT_IN_CM_FATHER);
			heightInCmMother = box.getFloat(HEIGHT_IN_CM_MOTHER);
			age = box.getString(AGE);
			clinicalNote = box.getString(CLINICAL_NOTE);
			rdPercentile = box.getFloat(RD_PERCENDTILE);
			referedBy = box.getInt(EMPLOYEE_ID);
			remarks = box.getString(REMARKS_TEMP);
			thPercentile = box.getFloat(TH_PERCENDTILE);
			wt = box.getInt(WEIGHT);
			ht = box.getInt(HEIGHT);
			hc = box.getInt(HIV);
			bmi = box.getFloat("bmiS");
			ofc = box.getFloat(OFC);
			rr = box.getFloat(RR);
			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");
			Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
			Patient patient = new Patient();
			patient.setId(hinId);

			Visit visit = new Visit();
			visit.setId(visitId);

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);

			MasEmployee masEmployee = new MasEmployee();
			masEmployee.setId(referedBy);

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			OpdCaseSheet caseSheetObj = (OpdCaseSheet) hbt.load(
					OpdCaseSheet.class, pediatricCaseSheetId);
			caseSheetObj.setDepartment(masDepartment);
			caseSheetObj.setHin(patient);
			caseSheetObj.setVisit(visit);
			caseSheetObj.setHospital(masHospital);
			caseSheetObj.setHeightInCmChild(heightInCmChild);
			caseSheetObj.setHeightInCmFather(heightInCmFather);
			caseSheetObj.setHeightInCmMother(heightInCmMother);
			caseSheetObj.setAge(age);
			caseSheetObj.setClinicalNote(clinicalNote);
			caseSheetObj.setRdPercentile(rdPercentile);
			caseSheetObj.setRemarks(remarks);
			caseSheetObj.setThPercentile(thPercentile);
			caseSheetObj.setStatus("y");
			caseSheetObj.setLastChgDate(date);
			caseSheetObj.setLastChgTime(time);
			caseSheetObj.setLastChgBy(userId);

			if (dob != null && !dob.equals("")) {
				caseSheetObj.setDob(HMSUtil
						.convertStringTypeDateToDateType(dob));
			} else {
				caseSheetObj.setDob(null);
			}
			if (referedBy != 0) {
				caseSheetObj.setReferedBy(masEmployee);
			} else {
				caseSheetObj.setReferedBy(null);
			}
			caseSheetObj.setHc(hc);
			caseSheetObj.setBmi(bmi);
			caseSheetObj.setHt(ht);
			caseSheetObj.setWt(wt);

			caseSheetObj.setOfc(ofc);
			caseSheetObj.setRr(rr);

			hbt.update(caseSheetObj);
			hbt.refresh(caseSheetObj);
			Visit visitObjToUpdate = (Visit) hbt.load(Visit.class, visitId);
			visitObjToUpdate.setVisitStatus("C");
			hbt.update(visitObjToUpdate);

			/*
			 * OpdPatientDetails opdPatientDetails = new OpdPatientDetails();
			 * 
			 * opdPatientDetails.setReferredDept(referredDept);
			 * 
			 * MasHospital masHospitalob =
			 * (MasHospital)hbt.load(MasHospital.class, hospitalId);
			 * opdPatientDetails.setHospital(masHospitalob);
			 * 
			 * opdPatientDetails.setVisit(visitObjToUpdate);
			 * hbt.save(opdPatientDetails);
			 */

			saved = true;
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> searchPediatricForUpdate(int visitId) {

		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<OpdCaseSheet> opdCaseSheetList = new ArrayList<OpdCaseSheet>();
		List<OpdVaccinationPlan> opdVaccinationPlanList = new ArrayList<OpdVaccinationPlan>();
		Map<String, Object> map = new HashMap<String, Object>();

		try {
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();

			opdCaseSheetList = session.createCriteria(OpdCaseSheet.class).add(
					Restrictions.eq("Visit.Id", visitId)).list();
			employeeList = getHibernateTemplate()
					.find(
							"from jkt.hms.masters.business.MasEmployee as emp where emp.Status='y' and emp.EmpCategory.Id='1'");

			opdVaccinationPlanList = session.createCriteria(
					OpdVaccinationPlan.class).createAlias("Visit", "visit")
					.add(Restrictions.eq("visit.Id", visitId)).list();
			if (opdVaccinationPlanList.size() > 0) {
				map.put("opdVaccinationPlanList", opdVaccinationPlanList);
			}

			
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("employeeList", employeeList);
		map.put("patientDataList", patientDataList);
		map.put("opdCaseSheetList", opdCaseSheetList);

		return map;
	}
	@SuppressWarnings("unchecked")
	public Map<String, Object> searchOPHTForUpdateJsp(int visitId) {

		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List<OpdOphthalmology> opdophList = new ArrayList<OpdOphthalmology>();

		Map<String, Object> map = new HashMap<String, Object>();

		try {
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();

			opdophList = session.createCriteria(OpdOphthalmology.class).add(
					Restrictions.eq("Visit.Id", visitId)).list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		map.put("opdophList", opdophList);

		return map;
	}


	@SuppressWarnings("unchecked")
	public Map<String, Object> viewPediatricCaseSheet(
			Map<String, Object> parameterMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdCaseSheet> opdCaseSheetList = new ArrayList<OpdCaseSheet>();
		List<OpdVaccinationPlan> opdVaccinationPlanList = new ArrayList<OpdVaccinationPlan>();
		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();

		try {

			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}
			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				opdCaseSheetList = session.createCriteria(OpdCaseSheet.class)
						.createAlias("Visit", "visit").add(
								Restrictions.eq("visit.Id", visitId)).list();
				opdVaccinationPlanList = session.createCriteria(
						OpdVaccinationPlan.class).createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", visitId)).list();
				if (opdVaccinationPlanList.size() > 0) {
					map.put("opdVaccinationPlanList", opdVaccinationPlanList);
				}

				map.put("opdCaseSheetList", opdCaseSheetList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	// ................................... OBG .............................

	@SuppressWarnings("unchecked")
	public Map<String, Object> showOBGJsp(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List<OpdObg> opdObgList = new ArrayList<OpdObg>();
		List<MasOccupation> masOccupationList = new ArrayList<MasOccupation>();
		List<MasReligion> masReligionList = new ArrayList<MasReligion>();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();

			opdObgList = session.createCriteria(OpdObg.class).createAlias(
					"Visit", "visit").add(Restrictions.eq("visit.Id", visitId))
					.list();
			if (opdObgList.size() > 0) {
				map.put("opdObgList", opdObgList);
			}
			masOccupationList = getHibernateTemplate()
					.find(
							"from jkt.hms.masters.business.MasOccupation as mm where mm.Status = 'y'");
			masReligionList = getHibernateTemplate()
					.find(
							"from jkt.hms.masters.business.MasReligion as mm where mm.Status = 'y'");
			if (masOccupationList.size() > 0) {
				map.put("masOccupationList", masOccupationList);
			}
			if (masReligionList.size() > 0) {
				map.put("masReligionList", masReligionList);
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> addOBGOne(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;

		// Part One
		int hinId = 0;
		int visitId = 0;
		int userId = 0;
		int departmentId = 0;
		int hospitalId = 0;
		String educationHusband = "";
		String educationWife = "";
		int occpationHusband = 0;
		int occpationWife = 0;
		int religionHusband = 0;
		int religionWife = 0;
		String accommodationType = "";
		String privacy = "";
		String infertilityPrimaryYrs = "";
		String infertilitySecondaryYrs = "";

		String hypomenorroheaYrs = "";
		String hypomenorrohea = "";
		String oligomenorrhoeaYrs = "";
		String oligomenorrhoea = "";
		String galactorrhoeaYrs = "";
		String galactorrhoea = "";
		String hirsutismYrs = "";
		String leucorrhoea = "";
		String backaches = "";
		String pruritisValue = "";

		String dysmenorrhoea = "";
		String menarcheYrs = "";
		String pastMC = "";
		String presentMC = "";
		String lmp = "";
		String pmpOne = "";

		String pmpTwo = "";
		String diagnosticScopy = "";
		String tubalSurgery = "";
		String exploratoryLap = "";
		String operativeScopy = "";

		// Part Two
		String diabetesPersonal = "";
		String diabetesFamily = "";
		String hypertensionPersonal = "";
		String hypertensionFamily = "";
		String tuberculosisPersonal = "";
		String tuberculosisFamily = "";
		String pulmonaryPersonal = "";
		String pulmonaryFamily = "";
		String abdominalPersonal = "";
		String abdominalFamily = "";
		String thyroidPersonal = "";
		String thyroidFamily = "";
		String othersPersonal = "";
		String othersFamily = "";
		String normalDelivery = "";
		String ectopic = "";
		String prematureDelivery = "";
		int abortion = 0;
		String dyspareunia = "";
		String awareness = "";
		String tryingToConceiveFor = "";
		String frequencyOfIC = "";
		int generalApperanceHeight = 0;
		int generalApperanceWidth = 0;
		String secondarySexualCharacters = "";
		String neckLymphGlands = "";
		String thyroid = "";
		String cvs = "";
		String bp = "";
		String rs = "";
		String cns = "";
		int pulse = 0;

		// Part Three
		String hairDistribution = "";
		String breastDevelopment = "";
		String galaactorrhoeaEndoriceStatus = "";
		String obesity = "";
		String pigmentationAbodominalStriae = "";
		String acne = "";
		String othersEndoriceStatus = "";
		String psClitoris = "";
		String psMajopra = "";
		String psMinora = "";
		String pvClitoris = "";
		String pvMajopra = "";
		String pvMinora = "";
		String hemoglobin = "";
		String pelvisEndosocopyUterus = "";
		String bloodGroupHusband = "";
		String bloodGroupWife = "";
		String bloodSugarHusband = "";
		String bloodSugarWife = "";
		String vdrlHusband = "";
		String vdrlWife = "";
		String urineAnalysis = "";
		String hivHusband = "";
		String hivWife = "";
		String HbsAgHusband = "";
		String HbsAgWife = "";

		// part Four

		String secretory = "";
		String dating = "";
		String proliferative = "";
		int dayOfCycle = 0;
		String dateobg = "";
		String overiesLeftEndosocopy = "";
		String tubesLeftEndosocopy = "";
		String overiesRightEndoscopy = "";
		String tubesRightEndosocopy = "";
		String pelvisEndosocopy = "";
		String uterusHysterosaliagography = "";
		String cornualOpening = "";
		String endometrical = "";
		String tubesLeft = "";
		String tubesRight = "";
		String uterus = "";
		String dhesWife = "";
		String dhesHusband = "";
		String tThreeWife = "";
		String tFourHusband = "";
		String tThreeHusband = "";
		String tFourWife = "";
		String TSHHusband = "";
		String TSHWife = "";
		String sProlactinWife = "";
		String sProlactinHusband = "";
		String FSHWife = "";
		String FSHHusband = "";
		String LHWife = "";
		String LHHusband = "";
		String sTestosteroneWife = "";
		String sTestosteroneHusband = "";
		String tlc = "";
		String dlc = "";
		String esr = "";
		String specification = "";
		String referredDept = (String) box.get("referredDept").toString();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {

			visitId = box.getInt("visitId");
			hinId = box.getInt("hinId");
			accommodationType = box.getString(ACCOMMODATION_TYPE);
			educationHusband = box.getString(EDUCATION_HUSBAND);
			educationWife = box.getString(EDUCATION_WIFE);
			privacy = box.getString(PRIVACY);
			infertilityPrimaryYrs = box.getString(INFERTILITY_PRIMARY_YRS);
			infertilitySecondaryYrs = box.getString(INFERTILITY_SECONDARY_YRS);
			hypomenorroheaYrs = box.getString(HYPOMENRROHEA_YRS);
			hypomenorrohea = box.getString(HYPOMENRROHEA);
			oligomenorrhoeaYrs = box.getString(OLIGOMEORRHOEA_YRS);
			oligomenorrhoea = box.getString(OLIGOMEORRHOEA);
			galactorrhoeaYrs = box.getString(GALACTORRHOEA_YRS);
			galactorrhoea = box.getString(GALACTORRHOEA);
			hirsutismYrs = box.getString(HIRSUTISM_YRS);
			leucorrhoea = box.getString(LEUCORRHOEA);
			backaches = box.getString(BACKACHES);
			pruritisValue = box.getString(PRURITIS_VALUE);
			dysmenorrhoea = box.getString(DYSMENORRHOEA);
			menarcheYrs = box.getString(MENARCHE_YRS);
			pastMC = box.getString(PAST_MC);
			presentMC = box.getString(PRESENT_MC);
			lmp = box.getString(LMP);
			pmpOne = box.getString(PMP_ONE);
			pmpTwo = box.getString(PMP_TWO);
			diagnosticScopy = box.getString(DIAGNOSTIC_SCOPY);
			tubalSurgery = box.getString(TUBAL_SURFERY);
			exploratoryLap = box.getString(EXPLORATORY_LAP);
			operativeScopy = box.getString(OPERATIVE_SCOPY);
			diabetesPersonal = box.getString(DIABETES_PERSONAL);
			diabetesFamily = box.getString(DIABETES_FAMILY);
			hypertensionPersonal = box.getString(HYPERTENSION_PERSONAL);
			;
			hypertensionFamily = box.getString(HYPERTENSION_FAMILY);
			tuberculosisPersonal = box.getString(TUBERCULOSIS_PERSONAL);
			tuberculosisFamily = box.getString(TUBERCULOSIS_FAMILY);
			pulmonaryPersonal = box.getString(PULMONARY_PERSONAL);
			pulmonaryFamily = box.getString(PULMONARY_FAMILY);
			abdominalPersonal = box.getString(ABDOMINAL_PERSONAL);
			abdominalFamily = box.getString(ABDOMINAL_FAMILY);
			thyroidPersonal = box.getString(THYROID_PERSONAL);
			thyroidFamily = box.getString(THYROID_FAMILY);
			othersPersonal = box.getString(OTHERS_PERSONAL);
			othersFamily = box.getString(OTHERS_FAMILY);
			normalDelivery = box.getString(NORMAL_DELIVERY);
			ectopic = box.getString(ECTOPIC);
			prematureDelivery = box.getString(prematureDelivery);
			abortion = box.getInt(ABORTION);
			dyspareunia = box.getString(DYSPAREUNIA);
			awareness = box.getString(AWARENESS);
			tryingToConceiveFor = box.getString(TRYING_TO_CONCERIVE_FOR);
			frequencyOfIC = box.getString(FREQUENCY_OF_IC);
			generalApperanceHeight = box.getInt(GENERNAL_APPERANCE_HEIGHT);
			generalApperanceWidth = box.getInt(GENERNAL_APPERANCE_WIDTH);
			secondarySexualCharacters = box
					.getString(SECONDARY_SEXUAL_CHARACTERS);
			neckLymphGlands = box.getString(NECK_LYMPH_GLANDS);
			thyroid = box.getString(THYROID);
			cvs = box.getString(CVS);
			bp = box.getString(B_P);
			rs = box.getString(RS);
			cns = box.getString(CNS);
			pulse = box.getInt(PULSE);

			// Part Three
			hairDistribution = box.getString(HAIR_DISTRIBUTION);
			breastDevelopment = box.getString(BREAST_DEDVELOPMENT);
			galaactorrhoeaEndoriceStatus = box
					.getString(GALACTORRHOEA_ENDORICE_STATUS);
			obesity = box.getString(OBESITY);
			pigmentationAbodominalStriae = box
					.getString(PIGMENTATION_ABODOMINAL_STRIAE);
			acne = box.getString(ACNE);
			othersEndoriceStatus = box.getString(OTHERS_ENDORICE_STATUS);
			psClitoris = box.getString(P_S_CLITORIS);
			psMajopra = box.getString(P_S_MAJOPRA);
			psMinora = box.getString(P_S_MINORA);
			pvClitoris = box.getString(P_V_CLITORIS);
			pvMajopra = box.getString(P_V_MAJOPRA);
			pvMinora = box.getString(P_V_MINORA);
			hemoglobin = box.getString(HEMOGLOBIN);
			pelvisEndosocopyUterus = box.getString(PELVIS_ENDOSCOPY_UTERUS);
			bloodGroupHusband = box.getString(BLOOD_GROUP_HUSBAND);
			bloodGroupWife = box.getString(BLOOD_GROUP_WIFE);
			bloodSugarHusband = box.getString(BLOOD_SUGAR_HUSBAND);
			bloodSugarWife = box.getString(BLOOD_SUGAR_WIFE);
			vdrlHusband = box.getString(VDRL_HUSBAND);
			vdrlWife = box.getString(VDRL_WIFE);
			urineAnalysis = box.getString(URINE_ANALYSIS);
			specification = box.getString(SPECIFICATION);
			hivHusband = box.getString(HIV_HUSBAND);
			hivWife = box.getString(HIV_WIFE);
			HbsAgHusband = box.getString(HBSAG_HUSBAND);
			HbsAgWife = box.getString(HBSAG_WIFE);

			// part Four

			secretory = box.getString(SECRETORY);
			dating = box.getString(DATING);
			proliferative = box.getString(PROLIFERATIVE);
			dayOfCycle = box.getInt(DAYS_OF_CYCLE);
			dateobg = box.getString(DATE_OBG);
			overiesLeftEndosocopy = box.getString(OVERIES_LEFT_ENDOSCOPY);
			tubesLeftEndosocopy = box.getString(TUBES_LEFT_ENDOSCOPY);
			overiesRightEndoscopy = box.getString(OVERIES_RIGHT_ENDOSCOPY);
			tubesRightEndosocopy = box.getString(TUBES_RIGHT_ENDOSCOPY);
			pelvisEndosocopy = box.getString(PELVIS_ENDOSCOPY);
			uterusHysterosaliagography = box
					.getString(UTERUS_HYSTEROSALIAGOGRAPHY);
			cornualOpening = box.getString(CORNUAL_OPENING);
			endometrical = box.getString(ENDOMETRICAL);
			tubesLeft = box.getString(TUBES_LEFT);
			tubesRight = box.getString(TUBES_RIGHT);
			uterus = box.getString(UTERUS);
			dhesWife = box.getString(DHES_WIFE);
			dhesHusband = box.getString(DHES_HUSBAND);
			tThreeWife = box.getString(T_THREE_WIFE);
			tFourHusband = box.getString(T_FOUR_HUSBAND);
			tThreeHusband = box.getString(T_THREE_HUSBAND);
			tFourWife = box.getString(T_FOUR_WIFE);
			TSHHusband = box.getString(TSH_HUSBAND);
			TSHWife = box.getString(TSH_WIFE);
			sProlactinWife = box.getString(S_PROLACTIN_WIFE);
			sProlactinHusband = box.getString(S_PROLACTIN_WIFE);
			FSHWife = box.getString(FSHWife);
			FSHHusband = box.getString(FSH_HUSBAND);
			LHWife = box.getString(LH_WIFE);
			LHHusband = box.getString(LH_HUSBAND);
			sTestosteroneWife = box.getString(S_TESTOSTERONE_WIFE);
			sTestosteroneHusband = box.getString(S_TESTOSTERONE_HUSBAND);
			tlc = box.getString(TLC);
			dlc = box.getString(DLC);
			esr = box.getString(ESR);
			userId = box.getInt("userId");
			departmentId = box.getInt("departmentId");
			hospitalId = box.getInt("hospitalId");

			occpationHusband = box.getInt(OCCUPATION_HUSBAND);
			occpationWife = box.getInt(OCCUPATION_WIFE);
			religionHusband = box.getInt(RELIGION_HUSBAND);
			religionWife = box.getInt(RELIGION_WIFE);

			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");
			Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
			Patient patient = new Patient();
			patient.setId(hinId);

			Visit visit = new Visit();
			visit.setId(visitId);
           
			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);

			MasOccupation masOccupationHusband = new MasOccupation();
			masOccupationHusband.setId(occpationHusband);

			MasOccupation masOccupationWife = new MasOccupation();
			masOccupationWife.setId(occpationWife);

			MasReligion masReligionHusband = new MasReligion();
			masReligionHusband.setId(religionHusband);

			MasReligion masReligionWife = new MasReligion();
			masReligionWife.setId(religionWife);

			OpdObg opdObg = new OpdObg();
			// part 1

			if (box.getInt("departmentId") != 0) {
				opdObg.setDepartment(masDepartment);
			}
			if (box.getInt(HIN_ID) != 0) {
				opdObg.setHin(patient);
			}
			if (box.getInt(VISIT_ID) != 0) {
				opdObg.setVisit(visit);
			}

			if (box.getInt(OCCUPATION_HUSBAND) != 0) {
				opdObg.setOccupationHusband(masOccupationHusband);
			}
			if (box.getInt(OCCUPATION_WIFE) != 0) {
				opdObg.setOccupationWife(masOccupationWife);
			}
			if (box.getInt(RELIGION_HUSBAND) != 0) {
				opdObg.setReligionHusband(masReligionHusband);
			}
			if (box.getInt(RELIGION_WIFE) != 0) {
				opdObg.setReligionWife(masReligionWife);

			}
			if (box.getInt(HOSPITAL_ID) != 0) {
				opdObg.setHospital(masHospital);
			}

			opdObg.setEducationHusband(educationHusband);
			opdObg.setEducationWife(educationWife);
			opdObg.setTypeOfAccommodation(accommodationType);
			opdObg.setInfertilityPrimaryYrs(infertilityPrimaryYrs);
			opdObg.setInfertilitySecondaryYrs(infertilitySecondaryYrs);
			opdObg.setHypomenorroheaYrs(hypomenorroheaYrs);
			opdObg.setHypomenorrohea(hypomenorrohea);
			opdObg.setOligomenorrhoea(oligomenorrhoea);
			opdObg.setOligomenorrhoeaYrs(oligomenorrhoeaYrs);
			opdObg.setPrivacy(privacy);
			opdObg.setGalactorrhoea(galactorrhoea);
			opdObg.setGalactorrhoeaYrs(galactorrhoeaYrs);
			opdObg.setHirsutismYrs(hirsutismYrs);
			opdObg.setLeucorrhoea(leucorrhoea);
			opdObg.setBackaches(backaches);
			opdObg.setPruritisValue(pruritisValue);
			opdObg.setDysmenorrhoea(dysmenorrhoea);
			opdObg.setMenarcheYrs(menarcheYrs);
			opdObg.setPastMc(pastMC);
			opdObg.setPresentMc(presentMC);
			opdObg.setLmp(lmp);
			opdObg.setPmpOne(pmpOne);
			opdObg.setPmpTwo(pmpTwo);
			opdObg.setDiagnosticScopy(diagnosticScopy);
			opdObg.setTubalSurgery(tubalSurgery);
			opdObg.setExploratoryLaparotomy(exploratoryLap);
			opdObg.setOperativeScopy(operativeScopy);
			opdObg.setStatus("y");
			opdObg.setLastChgDate(date);
			opdObg.setLastChgTime(time);
			opdObg.setLastChgBy(userId);
			// part 2
			opdObg.setDiabetesPersonal(diabetesPersonal);
			opdObg.setDiabetesFamily(diabetesFamily);
			opdObg.setHypertensionPersonal(hypertensionPersonal);
			opdObg.setHypertensionFamily(hypertensionFamily);
			opdObg.setTuberculosisPersonal(tuberculosisPersonal);
			opdObg.setTuberculosisFamily(tuberculosisFamily);
			opdObg.setPulmonaryFamily(pulmonaryFamily);
			opdObg.setPulmonaryPersonal(pulmonaryPersonal);
			opdObg.setAbdominalFamily(abdominalFamily);
			opdObg.setAbdominalPersonal(abdominalPersonal);
			opdObg.setThyroidFamily(thyroidFamily);
			opdObg.setThyroidPersonal(thyroidPersonal);
			opdObg.setOthersFamily(othersFamily);
			opdObg.setOthersPersonal(othersPersonal);
			opdObg.setNormalDelivery(normalDelivery);
			opdObg.setPrematureDeliveryBabyAlive(prematureDelivery);
			opdObg.setEctopic(ectopic);
			opdObg.setAAbortion(abortion);
			opdObg.setDyspareunia(dyspareunia);
			opdObg.setAwarenessOfFertilePeriod(awareness);
			opdObg.setTryingToConceiveFor(tryingToConceiveFor);
			opdObg.setFrequencyOfIc(frequencyOfIC);
			opdObg.setGeneralAppearanceHeight(generalApperanceHeight);
			opdObg.setGeneralAppearanceWeight(generalApperanceWidth);
			opdObg.setSecondarySexualCharacters(secondarySexualCharacters);
			opdObg.setNeckLymphGlands(neckLymphGlands);
			opdObg.setThyroid(thyroid);
			opdObg.setCVS(cvs);
			opdObg.setBP(bp);
			opdObg.setPulse(pulse);
			opdObg.setRs(rs);
			opdObg.setCns(cns);

			// part 3
			opdObg.setHairDistribution(hairDistribution);
			opdObg.setBreastDevelopment(breastDevelopment);
			opdObg.setObesity(obesity);
			opdObg.setPigmentationAbdominalStriae(pigmentationAbodominalStriae);
			opdObg.setAcne(acne);
			opdObg.setOthers(othersEndoriceStatus);
			opdObg.setPSClitoris(psClitoris);
			opdObg.setPSLabiaMajopra(psMajopra);
			opdObg.setPSLabiaMinora(psMinora);
			opdObg.setPVClitoris(pvClitoris);
			opdObg.setPVLabiaMajopra(pvMajopra);
			opdObg.setPVLabiaMinora(pvMinora);
			opdObg.setHemoglobin(hemoglobin);
			opdObg.setTlc(tlc);
			opdObg.setDlc(dlc);
			opdObg.setEsr(esr);
			opdObg.setBloodGroupHusband(bloodGroupHusband);
			opdObg.setBloodGroupWife(bloodGroupWife);
			opdObg.setBloodSugarHusband(bloodSugarHusband);
			opdObg.setBloodSugarWife(bloodSugarWife);
			opdObg.setVdrlHusband(vdrlHusband);
			opdObg.setVdrlWife(vdrlWife);
			opdObg.setUrineAnalysis(urineAnalysis);
			opdObg.setSpecification(specification);
			opdObg.setHivHusband(hivHusband);
			opdObg.setHivWife(hivWife);
			opdObg.setHbsagHusband(HbsAgHusband);
			opdObg.setHbsagWife(HbsAgWife);

			// ---- part four
			opdObg.setTFourHusband(tFourHusband);
			opdObg.setTFourWife(tFourWife);
			opdObg.setTThreeHusband(tThreeHusband);
			opdObg.setTThreeWife(tThreeWife);
			opdObg.setTshHusband(TSHHusband);
			opdObg.setTshWife(TSHWife);
			opdObg.setSProlactinHusband(sProlactinHusband);
			opdObg.setSProlactinWife(sProlactinWife);
			opdObg.setDhesHusband(dhesHusband);
			opdObg.setDhesWife(dhesWife);
			opdObg.setTubesL(tubesLeftEndosocopy);
			opdObg.setTubesR(tubesRightEndosocopy);
			opdObg.setTubesLeft(tubesLeft);
			opdObg.setTubesRight(tubesRight);
			opdObg.setOvariesL(overiesLeftEndosocopy);
			opdObg.setOvariesR(overiesRightEndoscopy);
			opdObg.setUterus(uterus);
			opdObg.setUterusHysterosaliagography(uterusHysterosaliagography);
			opdObg.setEndometricalCavity(endometrical);
			opdObg.setCornualOpenings(cornualOpening);
			opdObg.setDating(dating);
			opdObg.setDaysOfCycle(dayOfCycle);
			opdObg.setSecretory(secretory);
			opdObg.setProliferative(proliferative);

			opdObg.setFshHusband(FSHHusband);
			opdObg.setFshWife(FSHWife);

			opdObg.setLhHusband(LHHusband);
			opdObg.setLhWife(LHWife);

			opdObg.setSTestosteroneHusband(sTestosteroneHusband);
			opdObg.setSTestosteroneWife(sTestosteroneWife);

			if (!box.getString(DATE_OBG).equals("")) {
				opdObg.setObgDate(HMSUtil.convertStringTypeDateToDateType(box
						.getString(DATE_OBG)));
			}

			opdObg.setPelvisEndosocopy(pelvisEndosocopy);
			opdObg.setPelvisEndosocopyUterus(pelvisEndosocopyUterus);

			opdObg
					.setEndocrineStatusGalactorrhoea(galaactorrhoeaEndoriceStatus);
			opdObg.setStatus("y");
			opdObg.setLastChgDate(date);
			opdObg.setLastChgTime(time);
			opdObg.setLastChgBy(userId);
			hbt.save(opdObg);
			saved = true;
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		try {
			Visit visitStatus = (Visit) getHibernateTemplate().load(
					Visit.class, visitId);
			visitStatus.setVisitStatus("C");
			hbt.update(visitStatus);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

			opdPatientDetails.setReferredDept(referredDept);

			MasHospital masHospitalob = (MasHospital) hbt.load(
					MasHospital.class, hospitalId);
			opdPatientDetails.setHospital(masHospitalob);

			opdPatientDetails.setVisit(visitStatus);
			hbt.save(opdPatientDetails);

			saved = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;
	}

	public Map<String, Object> updateOBG(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		int hinId = 0;
		int visitId = 0;
		int userId = 0;
		int departmentId = 0;
		int occpationHusband = 0;
		int occpationWife = 0;
		int religionHusband = 0;
		int religionWife = 0;
		int hospitalId = 0;
		int obgId = 0;
		visitId = box.getInt(VISIT_ID);
		hinId = box.getInt(HIN_ID);
		obgId = box.getInt(OBG_ID);
		userId = box.getInt("userId");
		departmentId = box.getInt("departmentId");
		occpationHusband = box.getInt(OCCUPATION_HUSBAND);
		occpationWife = box.getInt(OCCUPATION_WIFE);
		religionHusband = box.getInt(RELIGION_HUSBAND);
		religionWife = box.getInt(RELIGION_WIFE);

		hospitalId = box.getInt("hospitalId");

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
		Patient patient = new Patient();
		patient.setId(hinId);

		Visit visit = new Visit();
		visit.setId(visitId);

		MasHospital masHospital = new MasHospital();
		masHospital.setId(hospitalId);

		MasOccupation masOccupationHusband = new MasOccupation();
		masOccupationHusband.setId(occpationHusband);

		MasOccupation masOccupationWife = new MasOccupation();
		masOccupationWife.setId(occpationWife);

		MasReligion masReligionHusband = new MasReligion();
		masReligionHusband.setId(religionHusband);

		MasReligion masReligionWife = new MasReligion();
		masReligionWife.setId(religionWife);

		OpdObg opdObg = (OpdObg) getHibernateTemplate()
				.get(OpdObg.class, obgId);
		if (box.getInt(OBG_ID) != 0) {
			opdObg.setId(box.getInt(OBG_ID));
		}
		if (box.getInt("departmentId") != 0) {
			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);
			opdObg.setDepartment(masDepartment);
		}
		if (box.getInt(HIN_ID) != 0) {
			opdObg.setHin(patient);
		}
		if (box.getInt(VISIT_ID) != 0) {
			opdObg.setVisit(visit);
		}

		if (box.getInt(OCCUPATION_HUSBAND) != 0) {
			opdObg.setOccupationHusband(masOccupationHusband);
		}
		if (box.getInt(OCCUPATION_WIFE) != 0) {
			opdObg.setOccupationWife(masOccupationWife);
		}
		if (box.getInt(RELIGION_HUSBAND) != 0) {
			opdObg.setReligionHusband(masReligionHusband);
		}
		if (box.getInt(RELIGION_WIFE) != 0) {
			opdObg.setReligionWife(masReligionWife);

		}
		if (box.getInt(HOSPITAL_ID) != 0) {
			opdObg.setHospital(masHospital);
		}

		if (!box.getString(EDUCATION_HUSBAND).equals("")) {
			opdObg.setEducationHusband(box.getString(EDUCATION_HUSBAND));
		}
		if (!box.getString(EDUCATION_WIFE).equals("")) {
			opdObg.setEducationWife(box.getString(EDUCATION_WIFE));
		}
		if (!box.getString(ACCOMMODATION_TYPE).equals("")) {
			opdObg.setTypeOfAccommodation(box.getString(ACCOMMODATION_TYPE));
		}
		if (!box.getString(OPERATIVE_SCOPY).equals("")) {
			opdObg.setOperativeScopy(box.getString(OPERATIVE_SCOPY));
		}
		if (!box.getString(EXPLORATORY_LAP).equals("")) {
			opdObg.setExploratoryLaparotomy(box.getString(EXPLORATORY_LAP));
		}
		if (!box.getString(TUBAL_SURFERY).equals("")) {
			opdObg.setTubalSurgery(box.getString(TUBAL_SURFERY));
		}
		if (!box.getString(DIAGNOSTIC_SCOPY).equals("")) {
			opdObg.setDiagnosticScopy(box.getString(DIAGNOSTIC_SCOPY));
		}
		if (!box.getString(PMP_TWO).equals("")) {
			opdObg.setPmpTwo(box.getString(PMP_TWO));
		}
		if (!box.getString(PMP_ONE).equals("")) {
			opdObg.setPmpOne(box.getString(PMP_ONE));
		}
		if (!box.getString(LMP).equals("")) {
			opdObg.setLmp(box.getString(LMP));
		}
		if (!box.getString(PRESENT_MC).equals("")) {
			opdObg.setPresentMc(box.getString(PRESENT_MC));
		}
		if (!box.getString(PAST_MC).equals("")) {
			opdObg.setPastMc(box.getString(PAST_MC));
		}
		if (!box.getString(MENARCHE_YRS).equals("")) {
			opdObg.setMenarcheYrs(box.getString(MENARCHE_YRS));
		}
		if (!box.getString(DYSMENORRHOEA).equals("")) {
			opdObg.setDysmenorrhoea(box.getString(DYSMENORRHOEA));
		}
		if (!box.getString(PRURITIS_VALUE).equals("")) {
			opdObg.setPruritisValue(box.getString(PRURITIS_VALUE));
		}
		if (!box.getString(BACKACHES).equals("")) {
			opdObg.setBackaches(box.getString(BACKACHES));
		}
		if (!box.getString(LEUCORRHOEA).equals("")) {
			opdObg.setLeucorrhoea(box.getString(LEUCORRHOEA));
		}
		if (!box.getString(HIRSUTISM_YRS).equals("")) {
			opdObg.setHirsutismYrs(box.getString(HIRSUTISM_YRS));
		}
		if (!box.getString(GALACTORRHOEA_YRS).equals("")) {
			opdObg.setGalactorrhoeaYrs(box.getString(GALACTORRHOEA_YRS));
		}
		if (!box.getString(GALACTORRHOEA).equals("")) {
			opdObg.setGalactorrhoea(box.getString(GALACTORRHOEA));
		}
		if (!box.getString(PRIVACY).equals("")) {
			opdObg.setPrivacy(box.getString(PRIVACY));
		}
		if (!box.getString(OLIGOMEORRHOEA_YRS).equals("")) {
			opdObg.setOligomenorrhoeaYrs(box.getString(OLIGOMEORRHOEA_YRS));
		}
		if (!box.getString(OLIGOMEORRHOEA).equals("")) {
			opdObg.setOligomenorrhoea(box.getString(OLIGOMEORRHOEA));
		}
		if (!box.getString(HYPOMENRROHEA).equals("")) {
			opdObg.setHypomenorrohea(box.getString(HYPOMENRROHEA));
		}
		if (!box.getString(HYPOMENRROHEA_YRS).equals("")) {
			opdObg.setHypomenorroheaYrs(box.getString(HYPOMENRROHEA_YRS));
		}
		if (!box.getString(INFERTILITY_SECONDARY_YRS).equals("")) {
			opdObg.setInfertilitySecondaryYrs(box
					.getString(INFERTILITY_SECONDARY_YRS));
		}
		if (!box.getString(INFERTILITY_PRIMARY_YRS).equals("")) {
			opdObg.setInfertilityPrimaryYrs(box
					.getString(INFERTILITY_PRIMARY_YRS));
		}

		// part 2
		if (!box.getString(DIABETES_PERSONAL).equals("")) {
			opdObg.setDiabetesPersonal(box.getString(DIABETES_PERSONAL));
		}
		if (!box.getString(DIABETES_FAMILY).equals("")) {
			opdObg.setDiabetesFamily(box.getString(DIABETES_FAMILY));
		}
		if (!box.getString(CNS).equals("")) {
			opdObg.setCns(box.getString(CNS));
		}
		if (!box.getString(RS).equals("")) {
			opdObg.setRs(box.getString(RS));
		}
		if (box.getInt(PULSE) != 0) {
			opdObg.setPulse(box.getInt(PULSE));
		}
		if (!box.getString(B_P).equals("")) {
			opdObg.setBP(box.getString(B_P));
		}
		if (!box.getString(CVS).equals("")) {
			opdObg.setCVS(box.getString(CVS));
		}
		if (!box.getString(THYROID).equals("")) {
			opdObg.setThyroid(box.getString(THYROID));
		}
		if (!box.getString(NECK_LYMPH_GLANDS).equals("")) {
			opdObg.setNeckLymphGlands(box.getString(NECK_LYMPH_GLANDS));
		}
		if (!box.getString(SECONDARY_SEXUAL_CHARACTERS).equals("")) {
			opdObg.setSecondarySexualCharacters(box
					.getString(SECONDARY_SEXUAL_CHARACTERS));
		}
		if (box.getInt(GENERNAL_APPERANCE_WIDTH) != 0) {
			opdObg.setGeneralAppearanceWeight(box
					.getInt(GENERNAL_APPERANCE_WIDTH));
		}
		if (box.getInt(GENERNAL_APPERANCE_HEIGHT) != 0) {
			opdObg.setGeneralAppearanceHeight(box
					.getInt(GENERNAL_APPERANCE_HEIGHT));
		}
		if (!box.getString(FREQUENCY_OF_IC).equals("")) {
			opdObg.setFrequencyOfIc(box.getString(FREQUENCY_OF_IC));
		}
		if (!box.getString(TRYING_TO_CONCERIVE_FOR).equals("")) {
			opdObg.setTryingToConceiveFor(box
					.getString(TRYING_TO_CONCERIVE_FOR));
		}
		if (!box.getString(AWARENESS).equals("")) {
			opdObg.setAwarenessOfFertilePeriod(box.getString(AWARENESS));
		}
		if (!box.getString(DYSPAREUNIA).equals("")) {
			opdObg.setDyspareunia(box.getString(DYSPAREUNIA));
		}
		if (box.getInt(ABORTION) != 0) {
			opdObg.setAAbortion(box.getInt(ABORTION));
		}
		if (!box.getString(ECTOPIC).equals("")) {
			opdObg.setEctopic(box.getString(ECTOPIC));
		}
		if (!box.getString(PREMATURE_DELIVERY).equals("")) {
			opdObg.setPrematureDeliveryBabyAlive(box
					.getString(PREMATURE_DELIVERY));
		}
		if (!box.getString(NORMAL_DELIVERY).equals("")) {
			opdObg.setNormalDelivery(box.getString(NORMAL_DELIVERY));
		}
		if (!box.getString(OTHERS_PERSONAL).equals("")) {
			opdObg.setOthersPersonal(box.getString(OTHERS_PERSONAL));
		}
		if (!box.getString(OTHERS_FAMILY).equals("")) {
			opdObg.setOthersFamily(box.getString(OTHERS_FAMILY));
		}
		if (!box.getString(THYROID_PERSONAL).equals("")) {
			opdObg.setThyroidPersonal(box.getString(THYROID_PERSONAL));
		}
		if (!box.getString(THYROID_FAMILY).equals("")) {
			opdObg.setThyroidFamily(box.getString(THYROID_FAMILY));
		}
		if (!box.getString(ABDOMINAL_PERSONAL).equals("")) {
			opdObg.setAbdominalPersonal(box.getString(ABDOMINAL_PERSONAL));
		}
		if (!box.getString(ABDOMINAL_FAMILY).equals("")) {
			opdObg.setAbdominalFamily(box.getString(ABDOMINAL_FAMILY));
		}
		if (!box.getString(PULMONARY_PERSONAL).equals("")) {
			opdObg.setPulmonaryPersonal(box.getString(PULMONARY_PERSONAL));
		}
		if (!box.getString(PULMONARY_FAMILY).equals("")) {
			opdObg.setPulmonaryFamily(box.getString(PULMONARY_FAMILY));
		}
		if (!box.getString(TUBERCULOSIS_FAMILY).equals("")) {
			opdObg.setTuberculosisFamily(box.getString(TUBERCULOSIS_FAMILY));
		}
		if (!box.getString(TUBERCULOSIS_PERSONAL).equals("")) {
			opdObg
					.setTuberculosisPersonal(box
							.getString(TUBERCULOSIS_PERSONAL));
		}
		if (!box.getString(HYPERTENSION_FAMILY).equals("")) {
			opdObg.setHypertensionFamily(box.getString(HYPERTENSION_FAMILY));
		}
		if (!box.getString(HYPERTENSION_PERSONAL).equals("")) {
			opdObg
					.setHypertensionPersonal(box
							.getString(HYPERTENSION_PERSONAL));
		}
		// part 3
		if (!box.getString(HBSAG_WIFE).equals("")) {
			opdObg.setHbsagWife(box.getString(HBSAG_WIFE));
		}
		if (!box.getString(HBSAG_HUSBAND).equals("")) {
			opdObg.setHbsagHusband(box.getString(HBSAG_HUSBAND));
		}
		if (!box.getString(HIV_WIFE).equals("")) {
			opdObg.setHivWife(box.getString(HIV_WIFE));
		}
		if (!box.getString(HIV_HUSBAND).equals("")) {
			opdObg.setHivHusband(box.getString(HIV_HUSBAND));
		}
		if (!box.getString(URINE_ANALYSIS).equals("")) {
			opdObg.setUrineAnalysis(box.getString(URINE_ANALYSIS));
		}
		if (!box.getString(SPECIFICATION).equals("")) {
			opdObg.setSpecification(box.getString(SPECIFICATION));
		}

		if (!box.getString(VDRL_WIFE).equals("")) {
			opdObg.setVdrlWife(box.getString(VDRL_WIFE));
		}
		if (!box.getString(VDRL_HUSBAND).equals("")) {
			opdObg.setVdrlHusband(box.getString(VDRL_HUSBAND));
		}
		if (!box.getString(BLOOD_SUGAR_WIFE).equals("")) {
			opdObg.setBloodSugarWife(box.getString(BLOOD_SUGAR_WIFE));
		}
		if (!box.getString(BLOOD_SUGAR_HUSBAND).equals("")) {
			opdObg.setBloodSugarHusband(box.getString(BLOOD_SUGAR_HUSBAND));
		}
		if (!box.getString(BLOOD_GROUP_WIFE).equals("")) {
			opdObg.setBloodGroupWife(box.getString(BLOOD_GROUP_WIFE));
		}
		if (!box.getString(BLOOD_GROUP_HUSBAND).equals("")) {
			opdObg.setBloodGroupHusband(box.getString(BLOOD_GROUP_HUSBAND));
		}
		if (!box.getString(ESR).equals("")) {
			opdObg.setEsr(box.getString(ESR));
		}
		if (!box.getString(DLC).equals("")) {
			opdObg.setDlc(box.getString(DLC));
		}
		if (!box.getString(TLC).equals("")) {
			opdObg.setTlc(box.getString(TLC));
		}
		if (!box.getString(HEMOGLOBIN).equals("")) {
			opdObg.setHemoglobin(box.getString(HEMOGLOBIN));
		}
		if (!box.getString(P_V_MINORA).equals("")) {
			opdObg.setPVLabiaMinora(box.getString(P_V_MINORA));
		}
		if (!box.getString(P_V_MAJOPRA).equals("")) {
			opdObg.setPVLabiaMajopra(box.getString(P_V_MAJOPRA));
		}
		if (!box.getString(P_V_CLITORIS).equals("")) {
			opdObg.setPVClitoris(box.getString(P_V_CLITORIS));
		}
		if (!box.getString(P_S_MINORA).equals("")) {
			opdObg.setPSLabiaMinora(box.getString(P_S_MINORA));
		}
		if (!box.getString(P_S_MAJOPRA).equals("")) {
			opdObg.setPSLabiaMajopra(box.getString(P_S_MAJOPRA));
		}
		if (!box.getString(P_S_CLITORIS).equals("")) {
			opdObg.setPSClitoris(box.getString(P_S_CLITORIS));
		}
		if (!box.getString(OTHERS_ENDORICE_STATUS).equals("")) {
			opdObg.setOthers(box.getString(OTHERS_ENDORICE_STATUS));
		}
		if (!box.getString(ACNE).equals("")) {
			opdObg.setAcne(box.getString(ACNE));
		}
		if (!box.getString(PIGMENTATION_ABODOMINAL_STRIAE).equals("")) {
			opdObg.setPigmentationAbdominalStriae(box
					.getString(PIGMENTATION_ABODOMINAL_STRIAE));
		}
		if (!box.getString(OBESITY).equals("")) {
			opdObg.setObesity(box.getString(OBESITY));
		}
		if (!box.getString(BREAST_DEDVELOPMENT).equals("")) {
			opdObg.setBreastDevelopment(box.getString(BREAST_DEDVELOPMENT));
		}
		if (!box.getString(HAIR_DISTRIBUTION).equals("")) {
			opdObg.setHairDistribution(box.getString(HAIR_DISTRIBUTION));
		}

		// ---- part four
		if (!box.getString(PROLIFERATIVE).equals("")) {
			opdObg.setProliferative(box.getString(PROLIFERATIVE));
		}
		if (!box.getString(SECRETORY).equals("")) {
			opdObg.setSecretory(box.getString(SECRETORY));
		}
		if (box.getInt(DAYS_OF_CYCLE) != 0) {
			opdObg.setDaysOfCycle(box.getInt(DAYS_OF_CYCLE));
		}

		if (!box.getString(DATING).equals("")) {
			opdObg.setDating(box.getString(DATING));
		}
		if (!box.getString(CORNUAL_OPENING).equals("")) {
			opdObg.setCornualOpenings(box.getString(CORNUAL_OPENING));
		}

		if (!box.getString(ENDOMETRICAL).equals("")) {
			opdObg.setEndometricalCavity(box.getString(ENDOMETRICAL));
		}

		if (!box.getString(UTERUS_HYSTEROSALIAGOGRAPHY).equals("")) {
			opdObg.setUterusHysterosaliagography(box
					.getString(UTERUS_HYSTEROSALIAGOGRAPHY));
		}

		if (!box.getString(UTERUS).equals("")) {
			opdObg.setUterus(box.getString(UTERUS));
		}

		if (!box.getString(OVERIES_RIGHT_ENDOSCOPY).equals("")) {
			opdObg.setOvariesR(box.getString(OVERIES_RIGHT_ENDOSCOPY));
		}

		if (!box.getString(OVERIES_LEFT_ENDOSCOPY).equals("")) {
			opdObg.setOvariesL(box.getString(OVERIES_LEFT_ENDOSCOPY));
		}

		if (!box.getString(TUBES_RIGHT).equals("")) {
			opdObg.setTubesRight(box.getString(TUBES_RIGHT));
		}

		if (!box.getString(TUBES_LEFT).equals("")) {
			opdObg.setTubesLeft(box.getString(TUBES_LEFT));
		}

		if (!box.getString(TUBES_RIGHT_ENDOSCOPY).equals("")) {
			opdObg.setTubesR(box.getString(TUBES_RIGHT_ENDOSCOPY));
		}

		if (!box.getString(TUBES_LEFT_ENDOSCOPY).equals("")) {
			opdObg.setTubesL(box.getString(TUBES_LEFT_ENDOSCOPY));
		}
		if (!box.getString(T_FOUR_HUSBAND).equals("")) {
			opdObg.setTFourHusband(box.getString(T_FOUR_HUSBAND));
		}

		if (!box.getString(T_FOUR_WIFE).equals("")) {
			opdObg.setTFourWife(box.getString(T_FOUR_WIFE));
		}

		if (!box.getString(T_THREE_HUSBAND).equals("")) {
			opdObg.setTThreeHusband(box.getString(T_THREE_HUSBAND));
		}

		if (!box.getString(DHES_WIFE).equals("")) {
			opdObg.setTThreeWife(box.getString(DHES_WIFE));
		}

		if (!box.getString(DHES_WIFE).equals("")) {
			opdObg.setDhesWife(box.getString(DHES_WIFE));
		}

		if (!box.getString(DHES_HUSBAND).equals("")) {
			opdObg.setDhesHusband(box.getString(DHES_HUSBAND));
		}

		if (!box.getString(S_PROLACTIN_WIFE).equals("")) {
			opdObg.setSProlactinWife(box.getString(S_PROLACTIN_WIFE));
		}

		if (!box.getString(S_PROLACTIN_HUSBAND).equals("")) {
			opdObg.setSProlactinHusband(box.getString(S_PROLACTIN_HUSBAND));
		}

		if (!box.getString(TSH_WIFE).equals("")) {
			opdObg.setTshWife(box.getString(TSH_WIFE));
		}

		if (!box.getString(TSH_HUSBAND).equals("")) {
			opdObg.setTshHusband(box.getString(TSH_HUSBAND));
		}

		if (!box.getString(FSH_HUSBAND).equals("")) {
			opdObg.setFshHusband(box.getString(FSH_HUSBAND));
		}

		if (!box.getString(FSH_WIFE).equals("")) {
			opdObg.setFshWife(box.getString(FSH_WIFE));
		}
		if (!box.getString(LH_HUSBAND).equals("")) {
			opdObg.setLhHusband(box.getString(LH_HUSBAND));
		}

		if (!box.getString(LH_WIFE).equals("")) {
			opdObg.setLhWife(box.getString(LH_WIFE));
		}

		if (!box.getString(S_TESTOSTERONE_HUSBAND).equals("")) {
			opdObg.setSTestosteroneHusband(box
					.getString(S_TESTOSTERONE_HUSBAND));
		}

		if (!box.getString(S_TESTOSTERONE_WIFE).equals("")) {
			opdObg.setSTestosteroneWife(box.getString(S_TESTOSTERONE_WIFE));
		}

		if (!box.getString(DATE_OBG).equals("")) {
			opdObg.setObgDate(HMSUtil.convertStringTypeDateToDateType(box
					.getString(DATE_OBG)));
		}

		if (!box.getString(PELVIS_ENDOSCOPY).equals("")) {
			opdObg.setPelvisEndosocopy(box.getString(PELVIS_ENDOSCOPY));
		}
		if (!box.getString(PELVIS_ENDOSCOPY_UTERUS).equals("")) {
			opdObg.setPelvisEndosocopyUterus(box
					.getString(PELVIS_ENDOSCOPY_UTERUS));
		}

		if (!box.getString(GALACTORRHOEA_ENDORICE_STATUS).equals("")) {
			opdObg.setEndocrineStatusGalactorrhoea(box
					.getString(GALACTORRHOEA_ENDORICE_STATUS));
		}
		opdObg.setStatus("y");
		opdObg.setLastChgDate(date);
		opdObg.setLastChgTime(time);
		opdObg.setLastChgBy(userId);
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {
			hbt.saveOrUpdate(opdObg);
			saved = true;
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		try {
			Visit visitStatus = (Visit) getHibernateTemplate().load(
					Visit.class, visitId);
			visitStatus.setVisitStatus("C");
			hbt.update(visitStatus);
			saved = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;

	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> addOrUpdateOBGJsp(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		int hinId = 0;
		int visitId = 0;
		int userId = 0;
		int departmentId = 0;
		int hospitalId = 0;
		int obgId = 0;
		int occpationHusband = 0;
		int occpationWife = 0;
		int religionHusband = 0;
		int religionWife = 0;
		String referredDept = (String) box.get("referredDept").toString();
		visitId = box.getInt(VISIT_ID);
		hinId = box.getInt(HIN_ID);
		obgId = box.getInt(OBG_ID);
		userId = box.getInt("userId");
		departmentId = box.getInt("departmentId");
		occpationHusband = box.getInt(OCCUPATION_HUSBAND);
		occpationWife = box.getInt(OCCUPATION_WIFE);
		religionHusband = box.getInt(RELIGION_HUSBAND);
		religionWife = box.getInt(RELIGION_WIFE);
		hospitalId = box.getInt("hospitalId");

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
		Patient patient = new Patient();
		patient.setId(hinId);

		Visit visit = new Visit();
		visit.setId(visitId);

		MasHospital masHospital = new MasHospital();
		masHospital.setId(hospitalId);

		MasOccupation masOccupationHusband = new MasOccupation();
		masOccupationHusband.setId(occpationHusband);

		MasOccupation masOccupationWife = new MasOccupation();
		masOccupationWife.setId(occpationWife);

		MasReligion masReligionHusband = new MasReligion();
		masReligionHusband.setId(religionHusband);

		MasReligion masReligionWife = new MasReligion();
		masReligionWife.setId(religionWife);

		OpdObg opdObg = (OpdObg) getHibernateTemplate()
				.get(OpdObg.class, obgId);
		if (box.getInt(OBG_ID) != 0) {
			opdObg.setId(box.getInt(OBG_ID));
		}
		if (box.getInt("departmentId") != 0) {
			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);
			opdObg.setDepartment(masDepartment);
		}
		if (box.getInt(HIN_ID) != 0) {
			opdObg.setHin(patient);
		}
		if (box.getInt(VISIT_ID) != 0) {
			opdObg.setVisit(visit);
		}
		if (box.getInt(OCCUPATION_HUSBAND) != 0) {
			opdObg.setOccupationHusband(masOccupationHusband);
		}
		if (box.getInt(OCCUPATION_WIFE) != 0) {
			opdObg.setOccupationWife(masOccupationWife);
		}
		if (box.getInt(RELIGION_HUSBAND) != 0) {
			opdObg.setReligionHusband(masReligionHusband);
		}
		if (box.getInt(RELIGION_WIFE) != 0) {
			opdObg.setReligionWife(masReligionWife);

		}
		if (box.getInt(HOSPITAL_ID) != 0) {
			opdObg.setHospital(masHospital);
		}

		if (!box.getString(EDUCATION_HUSBAND).equals("")) {
			opdObg.setEducationHusband(box.getString(EDUCATION_HUSBAND));
		}
		if (!box.getString(EDUCATION_WIFE).equals("")) {
			opdObg.setEducationWife(box.getString(EDUCATION_WIFE));
		}
		if (!box.getString(ACCOMMODATION_TYPE).equals("")) {
			opdObg.setTypeOfAccommodation(box.getString(ACCOMMODATION_TYPE));
		}
		if (!box.getString(OPERATIVE_SCOPY).equals("")) {
			opdObg.setOperativeScopy(box.getString(OPERATIVE_SCOPY));
		}
		if (!box.getString(EXPLORATORY_LAP).equals("")) {
			opdObg.setExploratoryLaparotomy(box.getString(EXPLORATORY_LAP));
		}
		if (!box.getString(TUBAL_SURFERY).equals("")) {
			opdObg.setTubalSurgery(box.getString(TUBAL_SURFERY));
		}
		if (!box.getString(DIAGNOSTIC_SCOPY).equals("")) {
			opdObg.setDiagnosticScopy(box.getString(DIAGNOSTIC_SCOPY));
		}
		if (!box.getString(PMP_TWO).equals("")) {
			opdObg.setPmpTwo(box.getString(PMP_TWO));
		}
		if (!box.getString(PMP_ONE).equals("")) {
			opdObg.setPmpOne(box.getString(PMP_ONE));
		}
		if (!box.getString(LMP).equals("")) {
			opdObg.setLmp(box.getString(LMP));
		}
		if (!box.getString(PRESENT_MC).equals("")) {
			opdObg.setPresentMc(box.getString(PRESENT_MC));
		}
		if (!box.getString(PAST_MC).equals("")) {
			opdObg.setPastMc(box.getString(PAST_MC));
		}
		if (!box.getString(MENARCHE_YRS).equals("")) {
			opdObg.setMenarcheYrs(box.getString(MENARCHE_YRS));
		}
		if (!box.getString(DYSMENORRHOEA).equals("")) {
			opdObg.setDysmenorrhoea(box.getString(DYSMENORRHOEA));
		}
		if (!box.getString(PRURITIS_VALUE).equals("")) {
			opdObg.setPruritisValue(box.getString(PRURITIS_VALUE));
		}
		if (!box.getString(BACKACHES).equals("")) {
			opdObg.setBackaches(box.getString(BACKACHES));
		}
		if (!box.getString(LEUCORRHOEA).equals("")) {
			opdObg.setLeucorrhoea(box.getString(LEUCORRHOEA));
		}
		if (!box.getString(HIRSUTISM_YRS).equals("")) {
			opdObg.setHirsutismYrs(box.getString(HIRSUTISM_YRS));
		}
		if (!box.getString(GALACTORRHOEA_YRS).equals("")) {
			opdObg.setGalactorrhoeaYrs(box.getString(GALACTORRHOEA_YRS));
		}
		if (!box.getString(GALACTORRHOEA).equals("")) {
			opdObg.setGalactorrhoea(box.getString(GALACTORRHOEA));
		}
		if (!box.getString(PRIVACY).equals("")) {
			opdObg.setPrivacy(box.getString(PRIVACY));
		}
		if (!box.getString(OLIGOMEORRHOEA_YRS).equals("")) {
			opdObg.setOligomenorrhoeaYrs(box.getString(OLIGOMEORRHOEA_YRS));
		}
		if (!box.getString(OLIGOMEORRHOEA).equals("")) {
			opdObg.setOligomenorrhoea(box.getString(OLIGOMEORRHOEA));
		}
		if (!box.getString(HYPOMENRROHEA).equals("")) {
			opdObg.setHypomenorrohea(box.getString(HYPOMENRROHEA));
		}
		if (!box.getString(HYPOMENRROHEA_YRS).equals("")) {
			opdObg.setHypomenorroheaYrs(box.getString(HYPOMENRROHEA_YRS));
		}
		if (!box.getString(INFERTILITY_SECONDARY_YRS).equals("")) {
			opdObg.setInfertilitySecondaryYrs(box
					.getString(INFERTILITY_SECONDARY_YRS));
		}
		if (!box.getString(INFERTILITY_PRIMARY_YRS).equals("")) {
			opdObg.setInfertilityPrimaryYrs(box
					.getString(INFERTILITY_PRIMARY_YRS));
		}

		// part 2
		if (!box.getString(DIABETES_PERSONAL).equals("")) {
			opdObg.setDiabetesPersonal(box.getString(DIABETES_PERSONAL));
		}
		if (!box.getString(DIABETES_FAMILY).equals("")) {
			opdObg.setDiabetesFamily(box.getString(DIABETES_FAMILY));
		}
		if (!box.getString(CNS).equals("")) {
			opdObg.setCns(box.getString(CNS));
		}
		if (!box.getString(RS).equals("")) {
			opdObg.setRs(box.getString(RS));
		}
		if (box.getInt(PULSE) != 0) {
			opdObg.setPulse(box.getInt(PULSE));
		}
		if (!box.getString(B_P).equals("")) {
			opdObg.setBP(box.getString(B_P));
		}
		if (!box.getString(CVS).equals("")) {
			opdObg.setCVS(box.getString(CVS));
		}
		if (!box.getString(THYROID).equals("")) {
			opdObg.setThyroid(box.getString(THYROID));
		}
		if (!box.getString(NECK_LYMPH_GLANDS).equals("")) {
			opdObg.setNeckLymphGlands(box.getString(NECK_LYMPH_GLANDS));
		}
		if (!box.getString(SECONDARY_SEXUAL_CHARACTERS).equals("")) {
			opdObg.setSecondarySexualCharacters(box
					.getString(SECONDARY_SEXUAL_CHARACTERS));
		}
		if (box.getInt(GENERNAL_APPERANCE_WIDTH) != 0) {
			opdObg.setGeneralAppearanceWeight(box
					.getInt(GENERNAL_APPERANCE_WIDTH));
		}
		if (box.getInt(GENERNAL_APPERANCE_HEIGHT) != 0) {
			opdObg.setGeneralAppearanceHeight(box
					.getInt(GENERNAL_APPERANCE_HEIGHT));
		}
		if (!box.getString(FREQUENCY_OF_IC).equals("")) {
			opdObg.setFrequencyOfIc(box.getString(FREQUENCY_OF_IC));
		}
		if (!box.getString(TRYING_TO_CONCERIVE_FOR).equals("")) {
			opdObg.setTryingToConceiveFor(box
					.getString(TRYING_TO_CONCERIVE_FOR));
		}
		if (!box.getString(AWARENESS).equals("")) {
			opdObg.setAwarenessOfFertilePeriod(box.getString(AWARENESS));
		}
		if (!box.getString(DYSPAREUNIA).equals("")) {
			opdObg.setDyspareunia(box.getString(DYSPAREUNIA));
		}
		if (box.getInt(ABORTION) != 0) {
			opdObg.setAAbortion(box.getInt(ABORTION));
		}
		if (!box.getString(ECTOPIC).equals("")) {
			opdObg.setEctopic(box.getString(ECTOPIC));
		}
		if (!box.getString(PREMATURE_DELIVERY).equals("")) {
			opdObg.setPrematureDeliveryBabyAlive(box
					.getString(PREMATURE_DELIVERY));
		}
		if (!box.getString(NORMAL_DELIVERY).equals("")) {
			opdObg.setNormalDelivery(box.getString(NORMAL_DELIVERY));
		}
		if (!box.getString(OTHERS_PERSONAL).equals("")) {
			opdObg.setOthersPersonal(box.getString(OTHERS_PERSONAL));
		}
		if (!box.getString(OTHERS_FAMILY).equals("")) {
			opdObg.setOthersFamily(box.getString(OTHERS_FAMILY));
		}
		if (!box.getString(THYROID_PERSONAL).equals("")) {
			opdObg.setThyroidPersonal(box.getString(THYROID_PERSONAL));
		}
		if (!box.getString(THYROID_FAMILY).equals("")) {
			opdObg.setThyroidFamily(box.getString(THYROID_FAMILY));
		}
		if (!box.getString(ABDOMINAL_PERSONAL).equals("")) {
			opdObg.setAbdominalPersonal(box.getString(ABDOMINAL_PERSONAL));
		}
		if (!box.getString(ABDOMINAL_FAMILY).equals("")) {
			opdObg.setAbdominalFamily(box.getString(ABDOMINAL_FAMILY));
		}
		if (!box.getString(PULMONARY_PERSONAL).equals("")) {
			opdObg.setPulmonaryPersonal(box.getString(PULMONARY_PERSONAL));
		}
		if (!box.getString(PULMONARY_FAMILY).equals("")) {
			opdObg.setPulmonaryFamily(box.getString(PULMONARY_FAMILY));
		}
		if (!box.getString(TUBERCULOSIS_FAMILY).equals("")) {
			opdObg.setTuberculosisFamily(box.getString(TUBERCULOSIS_FAMILY));
		}
		if (!box.getString(TUBERCULOSIS_PERSONAL).equals("")) {
			opdObg
					.setTuberculosisPersonal(box
							.getString(TUBERCULOSIS_PERSONAL));
		}
		if (!box.getString(HYPERTENSION_FAMILY).equals("")) {
			opdObg.setHypertensionFamily(box.getString(HYPERTENSION_FAMILY));
		}
		if (!box.getString(HYPERTENSION_PERSONAL).equals("")) {
			opdObg
					.setHypertensionPersonal(box
							.getString(HYPERTENSION_PERSONAL));
		}
		// part 3
		if (!box.getString(HBSAG_WIFE).equals("")) {
			opdObg.setHbsagWife(box.getString(HBSAG_WIFE));
		}
		if (!box.getString(HBSAG_HUSBAND).equals("")) {
			opdObg.setHbsagHusband(box.getString(HBSAG_HUSBAND));
		}
		if (!box.getString(HIV_WIFE).equals("")) {
			opdObg.setHivWife(box.getString(HIV_WIFE));
		}
		if (!box.getString(HIV_HUSBAND).equals("")) {
			opdObg.setHivHusband(box.getString(HIV_HUSBAND));
		}
		if (!box.getString(URINE_ANALYSIS).equals("")) {
			opdObg.setUrineAnalysis(box.getString(URINE_ANALYSIS));
		}
		if (!box.getString(SPECIFICATION).equals("")) {
			opdObg.setSpecification(box.getString(SPECIFICATION));
		}
		if (!box.getString(VDRL_WIFE).equals("")) {
			opdObg.setVdrlWife(box.getString(VDRL_WIFE));
		}
		if (!box.getString(VDRL_HUSBAND).equals("")) {
			opdObg.setVdrlHusband(box.getString(VDRL_HUSBAND));
		}
		if (!box.getString(BLOOD_SUGAR_WIFE).equals("")) {
			opdObg.setBloodSugarWife(box.getString(BLOOD_SUGAR_WIFE));
		}
		if (!box.getString(BLOOD_SUGAR_HUSBAND).equals("")) {
			opdObg.setBloodSugarHusband(box.getString(BLOOD_SUGAR_HUSBAND));
		}
		if (!box.getString(BLOOD_GROUP_WIFE).equals("")) {
			opdObg.setBloodGroupWife(box.getString(BLOOD_GROUP_WIFE));
		}
		if (!box.getString(BLOOD_GROUP_HUSBAND).equals("")) {
			opdObg.setBloodGroupHusband(box.getString(BLOOD_GROUP_HUSBAND));
		}
		if (!box.getString(ESR).equals("")) {
			opdObg.setEsr(box.getString(ESR));
		}
		if (!box.getString(DLC).equals("")) {
			opdObg.setDlc(box.getString(DLC));
		}
		if (!box.getString(TLC).equals("")) {
			opdObg.setTlc(box.getString(TLC));
		}
		if (!box.getString(HEMOGLOBIN).equals("")) {
			opdObg.setHemoglobin(box.getString(HEMOGLOBIN));
		}
		if (!box.getString(P_V_MINORA).equals("")) {
			opdObg.setPVLabiaMinora(box.getString(P_V_MINORA));
		}
		if (!box.getString(P_V_MAJOPRA).equals("")) {
			opdObg.setPVLabiaMajopra(box.getString(P_V_MAJOPRA));
		}
		if (!box.getString(P_V_CLITORIS).equals("")) {
			opdObg.setPVClitoris(box.getString(P_V_CLITORIS));
		}
		if (!box.getString(P_S_MINORA).equals("")) {
			opdObg.setPSLabiaMinora(box.getString(P_S_MINORA));
		}
		if (!box.getString(P_S_MAJOPRA).equals("")) {
			opdObg.setPSLabiaMajopra(box.getString(P_S_MAJOPRA));
		}
		if (!box.getString(P_S_CLITORIS).equals("")) {
			opdObg.setPSClitoris(box.getString(P_S_CLITORIS));
		}
		if (!box.getString(OTHERS_ENDORICE_STATUS).equals("")) {
			opdObg.setOthers(box.getString(OTHERS_ENDORICE_STATUS));
		}
		if (!box.getString(ACNE).equals("")) {
			opdObg.setAcne(box.getString(ACNE));
		}
		if (!box.getString(PIGMENTATION_ABODOMINAL_STRIAE).equals("")) {
			opdObg.setPigmentationAbdominalStriae(box
					.getString(PIGMENTATION_ABODOMINAL_STRIAE));
		}
		if (!box.getString(OBESITY).equals("")) {
			opdObg.setObesity(box.getString(OBESITY));
		}
		if (!box.getString(BREAST_DEDVELOPMENT).equals("")) {
			opdObg.setBreastDevelopment(box.getString(BREAST_DEDVELOPMENT));
		}
		if (!box.getString(HAIR_DISTRIBUTION).equals("")) {
			opdObg.setHairDistribution(box.getString(HAIR_DISTRIBUTION));
		}

		// ---- part four
		if (!box.getString(PROLIFERATIVE).equals("")) {
			opdObg.setProliferative(box.getString(PROLIFERATIVE));
		}
		if (!box.getString(SECRETORY).equals("")) {
			opdObg.setSecretory(box.getString(SECRETORY));
		}
		if (box.getInt(DAYS_OF_CYCLE) != 0) {
			opdObg.setDaysOfCycle(box.getInt(DAYS_OF_CYCLE));
		}

		if (!box.getString(DATING).equals("")) {
			opdObg.setDating(box.getString(DATING));
		}
		if (!box.getString(CORNUAL_OPENING).equals("")) {
			opdObg.setCornualOpenings(box.getString(CORNUAL_OPENING));
		}

		if (!box.getString(ENDOMETRICAL).equals("")) {
			opdObg.setEndometricalCavity(box.getString(ENDOMETRICAL));
		}

		if (!box.getString(UTERUS_HYSTEROSALIAGOGRAPHY).equals("")) {
			opdObg.setUterusHysterosaliagography(box
					.getString(UTERUS_HYSTEROSALIAGOGRAPHY));
		}

		if (!box.getString(UTERUS).equals("")) {
			opdObg.setUterus(box.getString(UTERUS));
		}

		if (!box.getString(OVERIES_RIGHT_ENDOSCOPY).equals("")) {
			opdObg.setOvariesR(box.getString(OVERIES_RIGHT_ENDOSCOPY));
		}

		if (!box.getString(OVERIES_LEFT_ENDOSCOPY).equals("")) {
			opdObg.setOvariesL(box.getString(OVERIES_LEFT_ENDOSCOPY));
		}

		if (!box.getString(TUBES_RIGHT).equals("")) {
			opdObg.setTubesRight(box.getString(TUBES_RIGHT));
		}

		if (!box.getString(TUBES_LEFT).equals("")) {
			opdObg.setTubesLeft(box.getString(TUBES_LEFT));
		}

		if (!box.getString(TUBES_RIGHT_ENDOSCOPY).equals("")) {
			opdObg.setTubesR(box.getString(TUBES_RIGHT_ENDOSCOPY));
		}

		if (!box.getString(TUBES_LEFT_ENDOSCOPY).equals("")) {
			opdObg.setTubesL(box.getString(TUBES_LEFT_ENDOSCOPY));
		}
		if (!box.getString(T_FOUR_HUSBAND).equals("")) {
			opdObg.setTFourHusband(box.getString(T_FOUR_HUSBAND));
		}

		if (!box.getString(T_FOUR_WIFE).equals("")) {
			opdObg.setTFourWife(box.getString(T_FOUR_WIFE));
		}

		if (!box.getString(T_THREE_HUSBAND).equals("")) {
			opdObg.setTThreeHusband(box.getString(T_THREE_HUSBAND));
		}

		if (!box.getString(DHES_WIFE).equals("")) {
			opdObg.setTThreeWife(box.getString(DHES_WIFE));
		}

		if (!box.getString(DHES_WIFE).equals("")) {
			opdObg.setDhesWife(box.getString(DHES_WIFE));
		}

		if (!box.getString(DHES_HUSBAND).equals("")) {
			opdObg.setDhesHusband(box.getString(DHES_HUSBAND));
		}

		if (!box.getString(S_PROLACTIN_WIFE).equals("")) {
			opdObg.setSProlactinWife(box.getString(S_PROLACTIN_WIFE));
		}

		if (!box.getString(S_PROLACTIN_HUSBAND).equals("")) {
			opdObg.setSProlactinHusband(box.getString(S_PROLACTIN_HUSBAND));
		}

		if (!box.getString(TSH_WIFE).equals("")) {
			opdObg.setTshWife(box.getString(TSH_WIFE));
		}

		if (!box.getString(TSH_HUSBAND).equals("")) {
			opdObg.setTshHusband(box.getString(TSH_HUSBAND));
		}

		if (!box.getString(FSH_HUSBAND).equals("")) {
			opdObg.setFshHusband(box.getString(FSH_HUSBAND));
		}

		if (!box.getString(FSH_WIFE).equals("")) {
			opdObg.setFshWife(box.getString(FSH_WIFE));
		}
		if (!box.getString(LH_HUSBAND).equals("")) {
			opdObg.setLhHusband(box.getString(LH_HUSBAND));
		}

		if (!box.getString(LH_WIFE).equals("")) {
			opdObg.setLhWife(box.getString(LH_WIFE));
		}

		if (!box.getString(S_TESTOSTERONE_HUSBAND).equals("")) {
			opdObg.setSTestosteroneHusband(box
					.getString(S_TESTOSTERONE_HUSBAND));
		}

		if (!box.getString(S_TESTOSTERONE_WIFE).equals("")) {
			opdObg.setSTestosteroneWife(box.getString(S_TESTOSTERONE_WIFE));
		}

		if (!box.getString(DATE_OBG).equals("")) {
			opdObg.setObgDate(HMSUtil.convertStringTypeDateToDateType(box
					.getString(DATE_OBG)));
		}

		if (!box.getString(PELVIS_ENDOSCOPY).equals("")) {
			opdObg.setPelvisEndosocopy(box.getString(PELVIS_ENDOSCOPY));
		}
		if (!box.getString(PELVIS_ENDOSCOPY_UTERUS).equals("")) {
			opdObg.setPelvisEndosocopyUterus(box
					.getString(PELVIS_ENDOSCOPY_UTERUS));
		}

		if (!box.getString(GALACTORRHOEA_ENDORICE_STATUS).equals("")) {
			opdObg.setEndocrineStatusGalactorrhoea(box
					.getString(GALACTORRHOEA_ENDORICE_STATUS));
		}
		opdObg.setStatus("y");
		opdObg.setLastChgDate(date);
		opdObg.setLastChgTime(time);
		opdObg.setLastChgBy(userId);

		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {
			hbt.saveOrUpdate(opdObg);
			saved = true;
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		try {
			Visit visitStatus = (Visit) getHibernateTemplate().load(
					Visit.class, visitId);
			visitStatus.setVisitStatus("C");
			hbt.update(visitStatus);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

			opdPatientDetails.setReferredDept(referredDept);

			MasHospital masHospitalob = (MasHospital) hbt.load(
					MasHospital.class, hospitalId);
			opdPatientDetails.setHospital(masHospitalob);

			opdPatientDetails.setVisit(visitStatus);
			hbt.save(opdPatientDetails);
			saved = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;

	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> showENTJsp(int visitId) {

		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();

		try {
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);

		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> searchENTForUpdateJsp(int visitId) {

		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List<OpdEnt> opdEntList = new ArrayList<OpdEnt>();

		Map<String, Object> map = new HashMap<String, Object>();

		try {
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();

			opdEntList = session.createCriteria(OpdEnt.class).add(
					Restrictions.eq("Visit.Id", visitId)).list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		map.put("opdEntList", opdEntList);

		return map;
	}

	public Map<String, Object> addEnt(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;

		int hinId = 0;
		int visitId = 0;
		int userId = 0;
		int departmentId = 0;
		int hospitalId = 0;
		String otorrhora = "";
		String hearingLoss = "";
		String otalgia = "";
		String sneezing = "";
		String epistaxis = "";
		String facialPain = "";
		String odynophagia = "";
		String hoarseness = "";
		String othersEnt = "";
		String dysphagia = "";
		String rhinorrhoea = "";

		String tftLeAbc = "";

		String tftReAbc = "";
		String tftLeWeber = "";
		String tftReWeber = "";
		String tftLeTenTwoFour = "";
		String tftReTenTwoFour = "";
		String tftLeFiveOneTwo = "";
		String tftReFiveOneTwo = "";
		String tftLeTwoFiveSix = "";
		String tftReTwoFiveSix = "";
		int ffhLeCv = 0;
		int ffhReCv = 0;
		int ffhLeFw = 0;
		int ffhReFw = 0;
		int ptaLeAbGap = 0;
		int ptaReAbGap = 0;
		int ptaLeBc = 0;
		int ptaReBc = 0;
		int ptaReAc = 0;
		int ptaLeAc = 0;
		String impedenceAudiometryEarRe = "";
		String impedenceAudiometryEarLe = "";
		String postRhinoscopyRe = "";
		String postRhinoscopyLe = "";
		String oralCavity = "";
		String oroPharynx = "";
		String idlThroat = "";
		String antRhinoscopyRe = "";
		String antRhinoscopyLe = "";
		String externalNasalFrameworkRe = "";
		String externalNasalFrameworkLe = "";
		String noCerebellarSign = "";
		String noSpontaneousRe = "";
		String noSpontaneousLe = "";
		String rombergRe = "";
		String rombergLe = "";
		String fistualtestRe = "";
		String fistualtestLe = "";
		String generalExamination = "";
		String prePostRe = "";
		String prePostLe = "";
		String eacRe = "";
		String eacLe = "";
		String tmRe = "";
		String tmLe = "";
		String surgery = "";
		String postOp = "";
		String advice = "";
		String neck = "";
		String nasalObstructions = "";
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		String referredDept = (String) box.get("referredDept").toString();
		try {

			visitId = box.getInt("visitId");
			hinId = box.getInt("hinId");
			userId = box.getInt("userId");
			departmentId = box.getInt("departmentId");
			hospitalId = box.getInt("hospitalId");

			otorrhora = box.getString(OTORRHOEA);
			sneezing = box.getString(SNEEZING);
			epistaxis = box.getString(EPISTAXIS);
			facialPain = box.getString(FACIAL_PAIN);
			odynophagia = box.getString(ODYNOPHAGIA);
			hoarseness = box.getString(HOARSENESS);
			othersEnt = box.getString(OTHERS_ENT);
			dysphagia = box.getString(DYSPHAGIA);
			rhinorrhoea = box.getString(RHINORRHOEA);
			hearingLoss = box.getString(HEARING_LOSS);
			otalgia = box.getString(OTALGIA);
			tftReAbc = box.getString(ABC_RE);
			tftLeAbc = box.getString(ABC_LE);
			tftLeWeber = box.getString(TFT_LE_WEDER);
			tftReWeber = box.getString(TFT_RE_WEDER);
			tftLeTenTwoFour = box.getString(TFT_LE_TEN_TWO_FOUR);
			tftReTenTwoFour = box.getString(TFT_RE_TEN_TWO_FOUR);
			tftLeFiveOneTwo = box.getString(TFT_LE_FIVE_ONE_TWO);
			tftReFiveOneTwo = box.getString(TFT_RE_FIVE_ONE_TWO);
			tftLeTwoFiveSix = box.getString(TFT_LE_TWO_FIVE_SIX);
			tftReTwoFiveSix = box.getString(TFT_RE_TWO_FIVE_SIX);
			ffhLeCv = box.getInt(FFH_CV_LE);
			ffhReCv = box.getInt(FFH_CV_RE);
			ffhLeFw = box.getInt(FFH_FW_LE);
			ffhReFw = box.getInt(FFH_FW_RE);
			ptaLeAbGap = box.getInt(PTA_AB_GAP_LE);
			ptaReAbGap = box.getInt(PTA_AB_GAP_RE);
			ptaLeBc = box.getInt(PTA_BC_LE);
			ptaReBc = box.getInt(PTA_BC_RE);
			ptaReAc = box.getInt(PTA_AC_RE);
			ptaLeAc = box.getInt(PTA_AC_LE);
			impedenceAudiometryEarRe = box.getString(IMPLEDANCE_AUDIOMEETRY_RE);
			impedenceAudiometryEarLe = box.getString(IMPLEDANCE_AUDIOMEETRY_LE);
			postRhinoscopyRe = box.getString(POST_RHINOSCOPY_RE);
			postRhinoscopyLe = box.getString(POST_RHINOSCOPY_LE);
			oralCavity = box.getString(ORAL_CAVITY);
			oroPharynx = box.getString(ORAL_PHATYNX);
			idlThroat = box.getString(IDL);
			antRhinoscopyRe = box.getString(ANT_RHINOSCOPY_RE);
			antRhinoscopyLe = box.getString(ANT_RHINOSCOPY_LE);
			externalNasalFrameworkRe = box
					.getString(EXTERNAL_NASAL_FRAMEWORK_RE);
			externalNasalFrameworkLe = box
					.getString(EXTERNAL_NASAL_FRAMEWORK_LE);
			noCerebellarSign = box.getString(NO_CEREBELLAR);
			noSpontaneousRe = box.getString(NO_SPONTSNEOUS_RE);
			noSpontaneousLe = box.getString(NO_SPONTSNEOUS_LE);
			rombergRe = box.getString(ROMBERG_RE);
			rombergLe = box.getString(ROMBERG_LE);
			fistualtestLe = box.getString(FISTULA_LE);
			fistualtestRe = box.getString(FISTULA_RE);
			generalExamination = box.getString(GENERAL_EXAMINATION);
			prePostRe = box.getString(PRE_POST_RE);
			prePostLe = box.getString(PRE_POST_LE);
			eacRe = box.getString(EAC_RE);
			eacLe = box.getString(EAC_LE);
			tmRe = box.getString(TM_RE);
			tmLe = box.getString(TM_LE);
			surgery = box.getString(SURGERY);
			postOp = box.getString(POST_OP);
			advice = box.getString(ADVICE);
			neck = box.getString(NECK);
			nasalObstructions = box.getString(NASAL_OBSTRUCTIONS);
			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");
			Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
			Patient patient = new Patient();
			patient.setId(hinId);

			Visit visit = new Visit();
			visit.setId(visitId);

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);

			OpdEnt opdEnt = new OpdEnt();

			opdEnt.setDepartment(masDepartment);
			opdEnt.setHin(patient);
			opdEnt.setVisit(visit);
			opdEnt.setHospital(masHospital);

			opdEnt.setAdvice(advice);
			opdEnt.setNeck(neck);
			opdEnt.setDysphagia(dysphagia);
			opdEnt.setEpistaxis(epistaxis);
			opdEnt.setFacialPain(facialPain);
			opdEnt.setHearingLoss(hearingLoss);
			opdEnt.setHoarseness(hoarseness);
			opdEnt.setNasalObstructions(nasalObstructions);
			opdEnt.setOdynophagia(odynophagia);
			opdEnt.setOtalgia(otalgia);
			opdEnt.setPostOp(postOp);
			opdEnt.setOtorrhora(otorrhora);
			opdEnt.setOthersEnt(othersEnt);
			opdEnt.setRhinorrhoea(rhinorrhoea);
			opdEnt.setSneezing(sneezing);
			opdEnt.setSurgery(surgery);
			opdEnt.setAntRhinoscopyLe(antRhinoscopyLe);
			opdEnt.setAntRhinoscopyRe(antRhinoscopyRe);
			opdEnt.setEacLe(eacLe);
			opdEnt.setEacRe(eacRe);
			opdEnt.setExternalNasalFrameworkLe(externalNasalFrameworkLe);
			opdEnt.setExternalNasalFrameworkRe(externalNasalFrameworkRe);
			opdEnt.setFfhLeCv(ffhLeCv);
			opdEnt.setFfhLeFw(ffhLeFw);
			opdEnt.setFfhReFw(ffhReFw);
			opdEnt.setFfhReCv(ffhReCv);
			opdEnt.setFistualtestLe(fistualtestLe);
			opdEnt.setFistualtestRe(fistualtestRe);
			opdEnt.setGeneralExamination(generalExamination);
			opdEnt.setIdlThroat(idlThroat);
			opdEnt.setImpedenceAudiometryEarLe(impedenceAudiometryEarLe);
			opdEnt.setImpedenceAudiometryEarRe(impedenceAudiometryEarRe);
			opdEnt.setNoCerebellarSign(noCerebellarSign);
			opdEnt.setNoSpontaneousLe(noSpontaneousLe);
			opdEnt.setNoSpontaneousRe(noSpontaneousRe);
			opdEnt.setOralCavity(oralCavity);
			opdEnt.setOroPharynx(oroPharynx);
			opdEnt.setPostOp(postOp);
			opdEnt.setPostRhinoscopyLe(postRhinoscopyLe);
			opdEnt.setPostRhinoscopyRe(postRhinoscopyRe);
			opdEnt.setPrePostLe(prePostLe);
			opdEnt.setPrePostRe(prePostRe);
			opdEnt.setPtaLeAbGap(ptaLeAbGap);
			opdEnt.setPtaLeAc(ptaLeAc);
			opdEnt.setPtaReAc(ptaReAc);
			opdEnt.setPtaLeBc(ptaLeBc);
			opdEnt.setPtaReAbGap(ptaReAbGap);
			opdEnt.setPtaReBc(ptaReBc);
			opdEnt.setRhinorrhoea(rhinorrhoea);
			opdEnt.setRombergLe(rombergLe);
			opdEnt.setRombergRe(rombergRe);
			opdEnt.setTftLeAbc(tftLeAbc);
			opdEnt.setTftLeFiveOneTwo(tftLeFiveOneTwo);
			opdEnt.setTftLeTenTwoFour(tftLeTenTwoFour);
			opdEnt.setTftLeTwoFiveSex(tftLeTwoFiveSix);
			opdEnt.setTftLeWeber(tftLeWeber);
			opdEnt.setTftReAbc(tftReAbc);
			opdEnt.setTftReFiveOneTwo(tftReFiveOneTwo);
			opdEnt.setTftReTenTwoFour(tftReTenTwoFour);
			opdEnt.setTftReTwoFiveSex(tftReTwoFiveSix);
			opdEnt.setTftReWeber(tftReWeber);
			opdEnt.setTmLe(tmLe);
			opdEnt.setTmRe(tmRe);

			opdEnt.setStatus("y");
			opdEnt.setLastChgDate(date);
			opdEnt.setLastChgTime(time);
			opdEnt.setLastChgBy(userId);

			hbt.save(opdEnt);

			Visit visitStatus = (Visit) getHibernateTemplate().load(
					Visit.class, visitId);
			visitStatus.setVisitStatus("C");
			hbt.update(visitStatus);

			/*
			 * OpdPatientDetails opdPatientDetails = new OpdPatientDetails();
			 * 
			 * opdPatientDetails.setReferredDept(referredDept);
			 * 
			 * MasHospital masHospitalob =
			 * (MasHospital)hbt.load(MasHospital.class, hospitalId);
			 * opdPatientDetails.setHospital(masHospitalob);
			 * 
			 * opdPatientDetails.setVisit(visitStatus);
			 * hbt.save(opdPatientDetails);
			 */

			saved = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> updateEnt(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;

		int entId = 0;
		int hinId = 0;
		int visitId = 0;
		int userId = 0;
		int departmentId = 0;
		int hospitalId = 0;
		String otorrhora = "";
		String hearingLoss = "";
		String otalgia = "";
		String sneezing = "";
		String epistaxis = "";
		String facialPain = "";
		String odynophagia = "";
		String hoarseness = "";
		String othersEnt = "";
		String dysphagia = "";
		String rhinorrhoea = "";

		String tftLeAbc = "";

		String tftReAbc = "";
		String tftLeWeber = "";
		String tftReWeber = "";
		String tftLeTenTwoFour = "";
		String tftReTenTwoFour = "";
		String tftLeFiveOneTwo = "";
		String tftReFiveOneTwo = "";
		String tftLeTwoFiveSix = "";
		String tftReTwoFiveSix = "";
		int ffhLeCv = 0;
		int ffhReCv = 0;
		int ffhLeFw = 0;
		int ffhReFw = 0;
		int ptaLeAbGap = 0;
		int ptaReAbGap = 0;
		int ptaLeBc = 0;
		int ptaReBc = 0;
		int ptaReAc = 0;
		int ptaLeAc = 0;
		String impedenceAudiometryEarRe = "";
		String impedenceAudiometryEarLe = "";
		String postRhinoscopyRe = "";
		String postRhinoscopyLe = "";
		String oralCavity = "";
		String oroPharynx = "";
		String idlThroat = "";
		String antRhinoscopyRe = "";
		String antRhinoscopyLe = "";
		String externalNasalFrameworkRe = "";
		String externalNasalFrameworkLe = "";
		String noCerebellarSign = "";
		String noSpontaneousRe = "";
		String noSpontaneousLe = "";
		String rombergRe = "";
		String rombergLe = "";
		String fistualtestRe = "";
		String fistualtestLe = "";
		String generalExamination = "";
		String prePostRe = "";
		String prePostLe = "";
		String eacRe = "";
		String eacLe = "";
		String tmRe = "";
		String tmLe = "";
		String surgery = "";
		String postOp = "";
		String advice = "";
		String neck = "";
		String nasalObstructions = "";
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

		try {

			visitId = box.getInt("visitId");

			entId = box.getInt(ENT_ID);
			hinId = box.getInt("hinId");
			userId = box.getInt("userId");
			departmentId = box.getInt("departmentId");
			hospitalId = box.getInt("hospitalId");

			otorrhora = box.getString(OTORRHOEA);
			sneezing = box.getString(SNEEZING);
			epistaxis = box.getString(EPISTAXIS);
			facialPain = box.getString(FACIAL_PAIN);
			odynophagia = box.getString(ODYNOPHAGIA);
			hoarseness = box.getString(HOARSENESS);
			othersEnt = box.getString(OTHERS_ENT);
			dysphagia = box.getString(DYSPHAGIA);
			rhinorrhoea = box.getString(RHINORRHOEA);
			hearingLoss = box.getString(HEARING_LOSS);
			otalgia = box.getString(OTALGIA);
			tftReAbc = box.getString(ABC_RE);
			tftLeAbc = box.getString(ABC_LE);
			tftLeWeber = box.getString(TFT_LE_WEDER);
			tftReWeber = box.getString(TFT_RE_WEDER);
			tftLeTenTwoFour = box.getString(TFT_LE_TEN_TWO_FOUR);
			tftReTenTwoFour = box.getString(TFT_RE_TEN_TWO_FOUR);
			tftLeFiveOneTwo = box.getString(TFT_LE_FIVE_ONE_TWO);
			tftReFiveOneTwo = box.getString(TFT_RE_FIVE_ONE_TWO);
			tftLeTwoFiveSix = box.getString(TFT_LE_TWO_FIVE_SIX);
			tftReTwoFiveSix = box.getString(TFT_RE_TWO_FIVE_SIX);
			ffhLeCv = box.getInt(FFH_CV_LE);
			ffhReCv = box.getInt(FFH_CV_RE);
			ffhLeFw = box.getInt(FFH_FW_LE);
			ffhReFw = box.getInt(FFH_FW_RE);
			ptaLeAbGap = box.getInt(PTA_AB_GAP_LE);
			ptaReAbGap = box.getInt(PTA_AB_GAP_RE);
			ptaLeBc = box.getInt(PTA_BC_LE);
			ptaReBc = box.getInt(PTA_BC_RE);
			ptaReAc = box.getInt(PTA_AC_RE);
			ptaLeAc = box.getInt(PTA_AC_LE);
			impedenceAudiometryEarRe = box.getString(IMPLEDANCE_AUDIOMEETRY_RE);
			impedenceAudiometryEarLe = box.getString(IMPLEDANCE_AUDIOMEETRY_LE);
			postRhinoscopyRe = box.getString(POST_RHINOSCOPY_RE);
			postRhinoscopyLe = box.getString(POST_RHINOSCOPY_LE);
			oralCavity = box.getString(ORAL_CAVITY);
			oroPharynx = box.getString(ORAL_PHATYNX);
			idlThroat = box.getString(IDL);
			antRhinoscopyRe = box.getString(ANT_RHINOSCOPY_RE);
			antRhinoscopyLe = box.getString(ANT_RHINOSCOPY_LE);
			externalNasalFrameworkRe = box
					.getString(EXTERNAL_NASAL_FRAMEWORK_RE);
			externalNasalFrameworkLe = box
					.getString(EXTERNAL_NASAL_FRAMEWORK_LE);
			noCerebellarSign = box.getString(NO_CEREBELLAR);
			noSpontaneousRe = box.getString(NO_SPONTSNEOUS_RE);
			noSpontaneousLe = box.getString(NO_SPONTSNEOUS_LE);
			rombergRe = box.getString(ROMBERG_RE);
			rombergLe = box.getString(ROMBERG_LE);
			fistualtestLe = box.getString(FISTULA_LE);
			fistualtestRe = box.getString(FISTULA_RE);
			generalExamination = box.getString(GENERAL_EXAMINATION);
			prePostRe = box.getString(PRE_POST_RE);
			prePostLe = box.getString(PRE_POST_LE);
			eacRe = box.getString(EAC_RE);
			eacLe = box.getString(EAC_LE);
			tmRe = box.getString(TM_RE);
			tmLe = box.getString(TM_LE);
			surgery = box.getString(SURGERY);
			postOp = box.getString(POST_OP);
			advice = box.getString(ADVICE);
			neck = box.getString(NECK);
			nasalObstructions = box.getString(NASAL_OBSTRUCTIONS);
			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");
			Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);

			Patient patient = new Patient();
			patient.setId(hinId);

			Visit visit = new Visit();
			visit.setId(visitId);

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);

			OpdEnt opdEnt = (OpdEnt) hbt.load(OpdEnt.class, entId);

			opdEnt.setDepartment(masDepartment);
			opdEnt.setHin(patient);
			opdEnt.setVisit(visit);
			opdEnt.setHospital(masHospital);

			opdEnt.setAdvice(advice);
			opdEnt.setNeck(neck);
			opdEnt.setDysphagia(dysphagia);
			opdEnt.setEpistaxis(epistaxis);
			opdEnt.setFacialPain(facialPain);
			opdEnt.setHearingLoss(hearingLoss);
			opdEnt.setHoarseness(hoarseness);
			opdEnt.setNasalObstructions(nasalObstructions);
			opdEnt.setOdynophagia(odynophagia);
			opdEnt.setOtalgia(otalgia);
			opdEnt.setPostOp(postOp);
			opdEnt.setOtorrhora(otorrhora);
			opdEnt.setOthersEnt(othersEnt);
			opdEnt.setRhinorrhoea(rhinorrhoea);
			opdEnt.setSneezing(sneezing);
			opdEnt.setSurgery(surgery);
			opdEnt.setAntRhinoscopyLe(antRhinoscopyLe);
			opdEnt.setAntRhinoscopyRe(antRhinoscopyRe);
			opdEnt.setEacLe(eacLe);
			opdEnt.setEacRe(eacRe);
			opdEnt.setExternalNasalFrameworkLe(externalNasalFrameworkLe);
			opdEnt.setExternalNasalFrameworkRe(externalNasalFrameworkRe);
			opdEnt.setFfhLeCv(ffhLeCv);
			opdEnt.setFfhLeFw(ffhLeFw);
			opdEnt.setFfhReFw(ffhReFw);
			opdEnt.setFfhReCv(ffhReCv);
			opdEnt.setFistualtestLe(fistualtestLe);
			opdEnt.setFistualtestRe(fistualtestRe);
			opdEnt.setGeneralExamination(generalExamination);
			opdEnt.setIdlThroat(idlThroat);
			opdEnt.setImpedenceAudiometryEarLe(impedenceAudiometryEarLe);
			opdEnt.setImpedenceAudiometryEarRe(impedenceAudiometryEarRe);
			opdEnt.setNoCerebellarSign(noCerebellarSign);
			opdEnt.setNoSpontaneousLe(noSpontaneousLe);
			opdEnt.setNoSpontaneousRe(noSpontaneousRe);
			opdEnt.setOralCavity(oralCavity);
			opdEnt.setOroPharynx(oroPharynx);
			opdEnt.setPostOp(postOp);
			opdEnt.setPostRhinoscopyLe(postRhinoscopyLe);
			opdEnt.setPostRhinoscopyRe(postRhinoscopyRe);
			opdEnt.setPrePostLe(prePostLe);
			opdEnt.setPrePostRe(prePostRe);
			opdEnt.setPtaLeAbGap(ptaLeAbGap);
			opdEnt.setPtaLeAc(ptaLeAc);
			opdEnt.setPtaReAc(ptaReAc);
			opdEnt.setPtaLeBc(ptaLeBc);
			opdEnt.setPtaReAbGap(ptaReAbGap);
			opdEnt.setPtaReBc(ptaReBc);
			opdEnt.setRhinorrhoea(rhinorrhoea);
			opdEnt.setRombergLe(rombergLe);
			opdEnt.setRombergRe(rombergRe);
			opdEnt.setTftLeAbc(tftLeAbc);
			opdEnt.setTftLeFiveOneTwo(tftLeFiveOneTwo);
			opdEnt.setTftLeTenTwoFour(tftLeTenTwoFour);
			opdEnt.setTftLeTwoFiveSex(tftLeTwoFiveSix);
			opdEnt.setTftLeWeber(tftLeWeber);
			opdEnt.setTftReAbc(tftReAbc);
			opdEnt.setTftReFiveOneTwo(tftReFiveOneTwo);
			opdEnt.setTftReTenTwoFour(tftReTenTwoFour);
			opdEnt.setTftReTwoFiveSex(tftReTwoFiveSix);
			opdEnt.setTftReWeber(tftReWeber);
			opdEnt.setTmLe(tmLe);
			opdEnt.setTmRe(tmRe);

			opdEnt.setStatus("y");
			opdEnt.setLastChgDate(date);
			opdEnt.setLastChgTime(time);
			opdEnt.setLastChgBy(userId);

			hbt.update(opdEnt);
			hbt.refresh(opdEnt);

			/*
			 * Visit
			 * visitStatus=(Visit)getHibernateTemplate().load(Visit.class,visitId
			 * ); visitStatus.setVisitStatus("C"); hbt.update(visitStatus);
			 */

			/*
			 * OpdPatientDetails opdPatientDetails = new OpdPatientDetails();
			 * 
			 * opdPatientDetails.setReferredDept(referredDept);
			 * 
			 * MasHospital masHospitalob =
			 * (MasHospital)hbt.load(MasHospital.class, hospitalId);
			 * opdPatientDetails.setHospital(masHospitalob);
			 * 
			 * opdPatientDetails.setVisit(visitStatus);
			 * hbt.save(opdPatientDetails);
			 */

			saved = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> viewEnt(Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdEnt> entList = new ArrayList<OpdEnt>();
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {

			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				entList = session.createCriteria(OpdEnt.class).createAlias(
						"Visit", "visit").add(
						Restrictions.eq("visit.Id", visitId)).list();
				map.put("entList", entList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> viewOBGONE(Map<String, Object> parameterMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdObg> obgList = new ArrayList<OpdObg>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();

		try {
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}
			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				obgList = session.createCriteria(OpdObg.class).createAlias(
						"Visit", "visit").add(
						Restrictions.eq("visit.Id", visitId)).list();
				map.put("obgList", obgList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> viewOBGTWO(Map<String, Object> parameterMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdObg> obgList = new ArrayList<OpdObg>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();

		try {
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}
			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				obgList = session.createCriteria(OpdObg.class).createAlias(
						"Visit", "visit").add(
						Restrictions.eq("visit.Id", visitId)).list();
				map.put("obgList", obgList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> viewOBGTHREE(Map<String, Object> parameterMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdObg> obgList = new ArrayList<OpdObg>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();

		try {
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}
			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				obgList = session.createCriteria(OpdObg.class).createAlias(
						"Visit", "visit").add(
						Restrictions.eq("visit.Id", visitId)).list();
				map.put("obgList", obgList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> viewOBGFOUR(Map<String, Object> parameterMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdObg> obgList = new ArrayList<OpdObg>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();

		try {
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}
			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				obgList = session.createCriteria(OpdObg.class).createAlias(
						"Visit", "visit").add(
						Restrictions.eq("visit.Id", visitId)).list();
				map.put("obgList", obgList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	// ......................................Report...................................

	@SuppressWarnings("unchecked")
	public List<Object> getHinNoList(String serviceNo) {
		Session session = (Session) getSession();
		List<Object> patientList = new ArrayList<Object>();

		try {

			patientList = session.createCriteria(Patient.class).add(
					Restrictions.eq("ServiceNo", serviceNo)).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return patientList;
	}

	@SuppressWarnings("unchecked")
	public List<Object> getVisitNoList(Map<String, Object> detailsMap) {
		@SuppressWarnings("unchecked")
		Session session = (Session) getSession();
		String serviceNo = "";
		String hinNo = "";
		if (detailsMap.get("serviceNo") != null) {
			serviceNo = (String) detailsMap.get("serviceNo");
		}
		if (detailsMap.get("hinNo") != null) {
			hinNo = (String) detailsMap.get("hinNo");
		}
		List<Object> vistList = new ArrayList<Object>();

		try {
			if (!serviceNo.equals("")) {
				Criteria crit = session.createCriteria(Visit.class)
						.createAlias("Hin", "p").add(
								Restrictions.eq("p.ServiceNo", serviceNo))
						.addOrder(Order.desc("VisitNo"));
				vistList = crit.list();
				// vistList =
				// getHibernateTemplate().find("from Visit v join v.Hin as p where p.ServiceNo = '"+serviceNo+"'");
			}
			if (!hinNo.equals("")) {
				Criteria crit = session.createCriteria(Visit.class)
						.createAlias("Hin", "p").add(
								Restrictions.eq("p.HinNo", hinNo)).addOrder(
								Order.desc("VisitNo"));
				vistList = crit.list();
				// vistList =
				// getHibernateTemplate().find("from Visit v join v.Hin as p where p.HinNo = '"+hinNo+"'");
			}

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return vistList;

	}

	@SuppressWarnings("deprecation")
	public Map<String, Object> getConnectionForReport() {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		Connection con = session.connection();
		map.put("conn", con);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> showDailyDepartmentWiseReportJsp() {

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasDepartment> searchMasDepartmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> searchMasEmployeeList = new ArrayList<MasEmployee>();
		try {
			searchMasDepartmentList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasDepartment");
			searchMasEmployeeList = getHibernateTemplate()
					.find(
							"from jkt.hms.masters.business.MasEmployee as emp where emp.EmpCategory.Id='1'");

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("searchMasDepartmentList", searchMasDepartmentList);
		map.put("searchMasEmployeeList", searchMasEmployeeList);
		return map;

	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> showDailyOPDInvestigationsReportJsp() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasDepartment> searchMasDepartmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> searchMasEmployeeList = new ArrayList<MasEmployee>();
		try {
			searchMasDepartmentList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasDepartment");
			searchMasEmployeeList = getHibernateTemplate()
					.find(
							"from jkt.hms.masters.business.MasEmployee");

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("searchMasDepartmentList", searchMasDepartmentList);
		map.put("searchMasEmployeeList", searchMasEmployeeList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> showDailyOPDPrescriptionsReportJsp() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasDepartment> searchMasDepartmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> searchMasEmployeeList = new ArrayList<MasEmployee>();
		try {
			searchMasDepartmentList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasDepartment");
			searchMasEmployeeList = getHibernateTemplate()
					.find(
							"from jkt.hms.masters.business.MasEmployee");

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("searchMasDepartmentList", searchMasDepartmentList);
		map.put("searchMasEmployeeList", searchMasEmployeeList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> showDailyOPDRankCategoryReportJsp() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasDepartment> searchMasDepartmentList = new ArrayList<MasDepartment>();
		List<MasRankCategory> searchMasRankList = new ArrayList<MasRankCategory>();
		try {
			searchMasDepartmentList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasDepartment");
			searchMasRankList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasRankCategory ");

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("searchMasDepartmentList", searchMasDepartmentList);
		map.put("searchMasRankList", searchMasRankList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> viewPatientAllergicDrug(
			Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<PatientAllergicDrugsHd> searchPatientAllergicDrugsHdList = new ArrayList<PatientAllergicDrugsHd>();
		List<PatientAllergicDrugsDt> searchPatientAllergicDrugsDtList = new ArrayList<PatientAllergicDrugsDt>();
		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				searchPatientAllergicDrugsHdList = session.createCriteria(
						PatientAllergicDrugsHd.class).createAlias("Visit",
						"visit").add(Restrictions.eq("visit.Id", visitId))
						.list();
				if (searchPatientAllergicDrugsHdList.size() > 0) {
					PatientAllergicDrugsHd patientAllergicDrugsHd = (PatientAllergicDrugsHd) searchPatientAllergicDrugsHdList
							.get(0);
					int id = patientAllergicDrugsHd.getId();
					searchPatientAllergicDrugsDtList = session.createCriteria(
							PatientAllergicDrugsDt.class).createAlias(
							"PatientAllergicDrugsHd", "patientAllergicDrugsHd")
							.add(
									Restrictions.eq(
											"patientAllergicDrugsHd.Id", id))
							.list();
				}
				map.put("searchPatientAllergicDrugsHdList",
						searchPatientAllergicDrugsHdList);
				map.put("searchPatientAllergicDrugsDtList",
						searchPatientAllergicDrugsDtList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	// ---------------------------------- Cardiology Department Details
	// ------------------------------------

	public boolean addCardiologyDepartmentDetails(Map<String, Object> infoMap) {
		OpdCardiologyDepartmentDetails cardiologyDepartmentDetails = new OpdCardiologyDepartmentDetails();
		Map<String, Object> returnMap = new HashMap<String, Object>();
		boolean successfullyAdded = false;
		Session session = (Session) getSession();
		int visitId = 0;
		int hospitalId = 0;
		String referredDoctars = (String) infoMap.get("referredDoctars");
		String[] diagnosisIdAray = (String[])infoMap.get("diagnosisIdAray");
		String consultationTime = (String) infoMap.get("consultationTime");
		String consultationDate = (String) infoMap.get("consultationDate");
		String initialDiagnosis = (String) infoMap.get("initialDiagnosis");
		
		int hinId = (Integer) infoMap.get("hinId");
		Date consultationDateToInsert = HMSUtil.convertStringTypeDateToDateType(consultationDate);
		
		if (infoMap.get("cardiologyDepartmentDetails") != null) {
			cardiologyDepartmentDetails = (OpdCardiologyDepartmentDetails) infoMap.get("cardiologyDepartmentDetails");
		}
		if (infoMap.get("visitId") != null) {
			visitId = (Integer) infoMap.get("visitId");
		}
		if (infoMap.get("hospitalId") != null) {
			hospitalId = (Integer) infoMap.get("hospitalId");
		}
		
		String referredDept = (String) infoMap.get("referredDept").toString();
//		Transaction tx = null;
		
		try {
				
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			hbt.save(cardiologyDepartmentDetails);
			
//			tx = session.beginTransaction();
				
			String query = "";
			List objectList = new ArrayList();
			if (diagnosisIdAray != null) {
			for (int i = 0; i < diagnosisIdAray.length; i++) {
						DischargeIcdCode dischargeIcdCode = new DischargeIcdCode();
						Patient patientObj = new Patient();
						patientObj.setId(hinId);
						dischargeIcdCode.setHin(patientObj);
						MasIcd masIcd = new MasIcd();
						//
						// masIcd.setId(Integer.parseInt(diagnosisIdAray[i]));
						// chnaget to Line Below

						if (diagnosisIdAray[i] != null) {
							if (!diagnosisIdAray[i].equals("0")) {
								query = "select icd_id from mas_icd where icd_code='"
										+ diagnosisIdAray[i] + "'";
								objectList = (List) session.createSQLQuery(query)
										.list();
								masIcd.setId(Integer.parseInt(""
										+ objectList.get(0)));
								dischargeIcdCode.setIcd(masIcd);
								dischargeIcdCode
										.setAddEditDate(consultationDateToInsert);
								dischargeIcdCode.setAddEditTime(consultationTime);
								dischargeIcdCode.setStatus("y");
								dischargeIcdCode.setDiagnosisStatus("p");
								Visit visit = new Visit();
								visit.setId(visitId);

								dischargeIcdCode.setVisit(visit);

								hbt.save(dischargeIcdCode);
							}
						}
					}
				}
			
			Visit visitObjToUpdate = (Visit) hbt.load(Visit.class, visitId);
			visitObjToUpdate.setVisitStatus("C");
			hbt.update(visitObjToUpdate);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

			opdPatientDetails.setReferredDept(referredDept);
			
			opdPatientDetails.setReferedDoctars(referredDoctars);
			
			opdPatientDetails.setInitialDiagnosis(initialDiagnosis);
			
			MasHospital masHospital = (MasHospital) hbt.load(MasHospital.class,hospitalId);
			opdPatientDetails.setHospital(masHospital);

			opdPatientDetails.setVisit(visitObjToUpdate);
			hbt.save(opdPatientDetails);
			// --------------values to be entered in discharge table for
			// diagnosis----------------------
			
			
		successfullyAdded = true;
	//	tx.commit();
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
	
	 	//returnMap.put("successfullyAdded", successfullyAdded);
		return successfullyAdded;

	}

	public boolean updateCardiologyDepartmentDetails(Map<String, Object> infoMap) {
		boolean successfullyAdded = false;
		int cardiologyId = 0;
		int userId = 0;
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

		String date = "";
		String time = "";
		String tmtReport = "";
		String echoCardiology = "";
		String holter = "";
		String cardiacCathetizationData = "";
		String remarks = "";
		Session session = (Session) getSession();
		
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");
		int visitId=0;
		int hinId = (Integer) infoMap.get("hinId");
		if (infoMap.get("visitId") != null) {
			visitId = (Integer) infoMap.get("visitId");
		}
		
		if (infoMap.get("cardiacCathetizationData") != null) {
			cardiacCathetizationData = (String) infoMap
					.get("cardiacCathetizationData");
		}
		if (infoMap.get("remarks") != null) {
			remarks = (String) infoMap.get("remarks");
		}
		if (infoMap.get("holter") != null) {
			holter = (String) infoMap.get("holter");
		}
		if (infoMap.get("echoCardiology") != null) {
			echoCardiology = (String) infoMap.get("echoCardiology");
		}
		if (infoMap.get("tmtReport") != null) {
			tmtReport = (String) infoMap.get("tmtReport");
		}
		if (infoMap.get("cardiologyId") != null) {
			cardiologyId = (Integer) infoMap.get("cardiologyId");
		}
		if (infoMap.get("userId") != null) {
			userId = (Integer) infoMap.get("userId");
		}
		
	//	String referredDoctars = (String) infoMap.get("referredDoctars");
		String[] diagnosisIdAray = (String[])infoMap.get("diagnosisIdAray");
		String consultationTime = (String) infoMap.get("consultationTime");
		String consultationDate = (String) infoMap.get("consultationDate");
		String initialDiagnosis = (String) infoMap.get("initialDiagnosis");
		Date consultationDateToInsert = HMSUtil.convertStringTypeDateToDateType(consultationDate);
	

		int opdPatientDetailsId = 0;
		if (infoMap.get("opdPatientDetailsId") != null) {
			opdPatientDetailsId = (Integer) infoMap.get("opdPatientDetailsId");
		}
		
		String query = "";
		List objectList = new ArrayList();
		try {
			OpdCardiologyDepartmentDetails cardiologyDepartmentDetails = (OpdCardiologyDepartmentDetails) hbt
					.load(OpdCardiologyDepartmentDetails.class, cardiologyId);

			cardiologyDepartmentDetails.setLastChgTime(time);
			cardiologyDepartmentDetails.setLastChgBy(userId);
			cardiologyDepartmentDetails.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(date));

			cardiologyDepartmentDetails
					.setCardiacCathetizationData(cardiacCathetizationData);
			cardiologyDepartmentDetails.setEchoCardiology(echoCardiology);
			cardiologyDepartmentDetails.setHolter(holter);
			cardiologyDepartmentDetails.setRemarks(remarks);
			cardiologyDepartmentDetails.setTmtReport(tmtReport);

			hbt.update(cardiologyDepartmentDetails);
			hbt.refresh(cardiologyDepartmentDetails);
			
			OpdPatientDetails opdPatientDetails = (OpdPatientDetails) hbt.load(OpdPatientDetails.class, opdPatientDetailsId);
			opdPatientDetails.setInitialDiagnosis(initialDiagnosis);
			hbt.saveOrUpdate(opdPatientDetails);
			
			List<DischargeIcdCode> dischargeIcdCodeOldList = new ArrayList<DischargeIcdCode>();
			dischargeIcdCodeOldList = (List<DischargeIcdCode>) session.createCriteria(DischargeIcdCode.class).add(Restrictions.eq("Hin.Id", hinId)).add(Restrictions.eq("Visit.Id", visitId)).list();
			for (DischargeIcdCode dischargeIcdCode : dischargeIcdCodeOldList) {
				session.delete(dischargeIcdCode);
			}
			if (diagnosisIdAray != null) {
				for (int i = 0; i < diagnosisIdAray.length; i++) {
					if (diagnosisIdAray[i] != null) {
						if (!diagnosisIdAray[i].equals("0")) {
							MasIcd masIcd = new MasIcd();
							query = "select icd_id from mas_icd where icd_code='"
									+ diagnosisIdAray[i] + "'";
							objectList = (List) session.createSQLQuery(query)
									.list();
							masIcd.setId(Integer.parseInt(""
									+ objectList.get(0)));

							DischargeIcdCode dischargeIcdCode = new DischargeIcdCode();
							dischargeIcdCode.setIcd(masIcd);
							Patient patientObj = new Patient();
							patientObj.setId(hinId);
							dischargeIcdCode.setHin(patientObj);
							dischargeIcdCode
									.setAddEditDate(consultationDateToInsert);
							dischargeIcdCode.setAddEditTime(consultationTime);
							dischargeIcdCode.setStatus("y");
							dischargeIcdCode.setDiagnosisStatus("p");
							Visit visit = new Visit();
							visit.setId(visitId);

							dischargeIcdCode.setVisit(visit);

							hbt.save(dischargeIcdCode);
						}
					}
				}
			}
			
			

			successfullyAdded = true;
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return successfullyAdded;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getCardiologyDepartmentDetails(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List<OpdCardiologyDepartmentDetails> opdCardiologyDepartmentDetailsList = new ArrayList<OpdCardiologyDepartmentDetails>();
		List<MasDepartment> deptList = new ArrayList<MasDepartment>();
		List<DischargeIcdCode> dischargeIcdCodeList = new ArrayList<DischargeIcdCode>();
		Map<String, Object> map = new HashMap<String, Object>();
	/*	int visitNo = 0;
		int hinId = 0;

		List<Visit> visitNoList = new ArrayList<Visit>();

		List<OpdPatientDetails> opdPatientDetailsList = new ArrayList<OpdPatientDetails>();
		
		List<MasEmployee> doctarsList = new ArrayList<MasEmployee>();
	*/
		
		try {
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();
			opdCardiologyDepartmentDetailsList = session.createCriteria(
					OpdCardiologyDepartmentDetails.class).createAlias("Visit",
					"visit").add(Restrictions.eq("visit.Id", visitId)).list();
			map.put("opdCardiologyDepartmentDetailsList",
					opdCardiologyDepartmentDetailsList);
			/*			
			if (map.get("visitNo") != null) {
				visitNo = (Integer) map.get("visitNo");
				//System.out.println("visitNo" + visitNo);
			}
			if (map.get("hinId") != null) {
				hinId = (Integer) map.get("hinId");
				//System.out.println("hinId" + hinId);
			}
	
			
			
		visitNoList = (List<Visit>) session.createCriteria(Visit.class)
			.add(Restrictions.eq("Id", visitNo))
			.createAlias("Hin", "h")
			.add(Restrictions.eq("h.Id", hinId)).list();

	//System.out.println("visitNoList" + visitNoList.size());

	Visit visit = new Visit();
	if (visitNoList != null && visitNoList.size() > 0) {
		visit = visitNoList.get(0);
	}
	map.put("visit", visit);
		*/	
			
			dischargeIcdCodeList = (List<DischargeIcdCode>) session
			.createCriteria(DischargeIcdCode.class).createAlias(
					"Visit", "v").add(
					Restrictions.eq("v.Id", visitId)).list();
			//System.out.println("dischargeIcdCodeList"	+ dischargeIcdCodeList.size());
			if (dischargeIcdCodeList != null && dischargeIcdCodeList.size() > 0)
				map.put("dischargeIcdCodeList", dischargeIcdCodeList);
	
			
			
			List<String> departmentTypeCode = new ArrayList<String>();
			departmentTypeCode.add("CR");
			departmentTypeCode.add("OPD1");
			departmentTypeCode.add("SpltOPD");

			deptList = session.createCriteria(MasDepartment.class).createAlias(
					"DepartmentType", "deptType").add(
					Restrictions.eq("Status", "y")).add(
					Restrictions.in("deptType.DepartmentTypeCode",
							departmentTypeCode)).list();

			
			List<OpdPatientDetails> opdPatientDetailsList = new ArrayList<OpdPatientDetails>();
			opdPatientDetailsList = (List<OpdPatientDetails>) session.createCriteria(OpdPatientDetails.class).createAlias("Visit", "visit").add(Restrictions.eq("visit.Id", visitId)).list();
			if (opdPatientDetailsList != null && opdPatientDetailsList.size() > 0) {
				map.put("opdPatientDetailsList", opdPatientDetailsList);
			}
			
			
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		map.put("deptList", deptList);
		return map;
	}
	public Map<String, Object> viewCardiologyDepartmentDetails(
			Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdCardiologyDepartmentDetails> opdCardiologyDepartmentDetailsList = new ArrayList<OpdCardiologyDepartmentDetails>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {
			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				opdCardiologyDepartmentDetailsList = session.createCriteria(
						OpdCardiologyDepartmentDetails.class).createAlias(
						"Visit", "visit").add(
						Restrictions.eq("visit.Id", visitId)).list();
				map.put("opdCardiologyDepartmentDetailsList",
						opdCardiologyDepartmentDetailsList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}


	// -------------------------------- Gastro-Enterology
	// Endoscopy----------------------------

	public boolean addGastroEnterologyEndoscopy(Map<String, Object> infoMap) {
		OpdGastroEnterologyEndoscopy gastroEnterologyEndoscopy = new OpdGastroEnterologyEndoscopy();
		boolean successfullyAdded = false;
		int visitId = 0;
		int hospitalId = 0;
		if (infoMap.get("gastroEnterologyEndoscopy") != null) {
			gastroEnterologyEndoscopy = (OpdGastroEnterologyEndoscopy) infoMap
					.get("gastroEnterologyEndoscopy");
		}
		if (infoMap.get("visitId") != null) {
			visitId = (Integer) infoMap.get("visitId");
		}
		if (infoMap.get("hospitalId") != null) {
			hospitalId = (Integer) infoMap.get("hospitalId");
		}
		String referredDept = (String) infoMap.get("referredDept").toString();

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			hbt.saveOrUpdate(gastroEnterologyEndoscopy);

			Visit visitObjToUpdate = (Visit) hbt.load(Visit.class, visitId);
			visitObjToUpdate.setVisitStatus("C");
			hbt.update(visitObjToUpdate);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

			opdPatientDetails.setReferredDept(referredDept);

			MasHospital masHospital = (MasHospital) hbt.load(MasHospital.class,
					hospitalId);
			opdPatientDetails.setHospital(masHospital);

			opdPatientDetails.setVisit(visitObjToUpdate);
			hbt.save(opdPatientDetails);

//--------------values to be entered in discharge table for diagnosis---------------
			String query = "";
			Session session = (Session) getSession();
			String[] diagnosisIdAray = (String[]) infoMap.get("diagnosisIdAray");
			List objectList = new ArrayList();
			session.createSQLQuery("delete * from discharge_icd_code where hin_id='"+visitObjToUpdate.getHin().getId()+"' and visit_id='"+visitId+"'");
			if (diagnosisIdAray != null) {
				for (int i = 0; i < diagnosisIdAray.length; i++) {
					DischargeIcdCode dischargeIcdCode = new DischargeIcdCode();
					Patient patientObj = new Patient();
					patientObj.setId(visitObjToUpdate.getHin().getId());
					dischargeIcdCode.setHin(patientObj);
					MasIcd masIcd = new MasIcd();
					//
					// masIcd.setId(Integer.parseInt(diagnosisIdAray[i]));
					// chnaget to Line Below

					if (diagnosisIdAray[i] != null) {
						if (!diagnosisIdAray[i].equals("0")) {
							query = "select icd_id from mas_icd where icd_code='"
									+ diagnosisIdAray[i] + "'";
							objectList = (List) session.createSQLQuery(query)
									.list();
							masIcd.setId(Integer.parseInt(""
									+ objectList.get(0)));
							dischargeIcdCode.setIcd(masIcd);
						//	dischargeIcdCode.setAddEditDate(consultationDateToInsert);
						//	dischargeIcdCode.setAddEditTime(consultationTime);
							dischargeIcdCode.setStatus("y");
							dischargeIcdCode.setDiagnosisStatus("p");
							Visit visit = new Visit();
							visit.setId(visitId);

							dischargeIcdCode.setVisit(visit);

							hbt.save(dischargeIcdCode);
						}
					}
				}
			}
			//-----------------
			successfullyAdded = true;
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return successfullyAdded;

	}

	public Map<String, Object> getGastroEnterologyEndoscopy(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<Integer> gastroEnterologyEndoscopyList = new ArrayList<Integer>();
		List<OpdGastroEnterologyEndoscopy> opdGastroEnterologyEndoscopyList = null ; 
		List<DischargeIcdCode> dischargeIcdCodeList = null;
		OpdGastroEnterologyEndoscopy opdGastroEnterologyEndoscopy = null ; 
		Map<String, Object> map = new HashMap<String, Object>();
		int maxNo = 0;
		String repNo = "";
		try {
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();
			employeeList = getHibernateTemplate()
					.find(
							"from jkt.hms.masters.business.MasEmployee as emp where emp.Status='y' and emp.EmpCategory.Id='1'");
			gastroEnterologyEndoscopyList = getHibernateTemplate()
					.find(
							"select max(odee.Id) from jkt.hms.masters.business.OpdGastroEnterologyEndoscopy as odee");
			opdGastroEnterologyEndoscopyList = session.createCriteria(OpdGastroEnterologyEndoscopy.class)
			                                  .createAlias("Visit", "v")
											  .add(Restrictions.eq("v.Id", visitId)).list();
			dischargeIcdCodeList=session.createCriteria(DischargeIcdCode.class)
									.createAlias("Visit","v" ).add(Restrictions.eq("v.Id",visitId)).list();
			if(opdGastroEnterologyEndoscopyList==null || opdGastroEnterologyEndoscopyList.size()==0 ){
			if (gastroEnterologyEndoscopyList.get(0) != null) {
				maxNo = gastroEnterologyEndoscopyList.get(0);
				repNo = String.valueOf(maxNo + 1);
			} else {
				repNo = String.valueOf(1);
			}}else{
				opdGastroEnterologyEndoscopy = (OpdGastroEnterologyEndoscopy)opdGastroEnterologyEndoscopyList.get(0);
				repNo = opdGastroEnterologyEndoscopy.getReportNo();
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("reportNo", repNo);
		map.put("employeeList", employeeList);
		map.put("patientDataList", patientDataList);
		map.put("opdGastroEnterologyEndoscopy", opdGastroEnterologyEndoscopy);
		map.put("dischargeIcdCodeList",dischargeIcdCodeList);
		return map;
	}

	public Map<String, Object> viewGastroEnterologyEndoscopy(Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int hinId = 0;
		int visitNo = 0;
		int max = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdGastroEnterologyEndoscopy> opdGastroEnterologyEndoscopyList = new ArrayList<OpdGastroEnterologyEndoscopy>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {
			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0 && visitList != null) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				opdGastroEnterologyEndoscopyList = session.createCriteria(
						OpdGastroEnterologyEndoscopy.class).createAlias(
						"Visit", "visit").add(
						Restrictions.eq("visit.Id", visitId)).list();
				map.put("opdGastroEnterologyEndoscopyList",
						opdGastroEnterologyEndoscopyList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	// -------------------------------- Gastro-Enterology
	// Colonoscopy----------------------------

	public boolean addGastroEnterologyColonoscopy(Map<String, Object> infoMap) {
		OpdGastroEnterologyColonoscopy gastroEnterologyColonoscopy = new OpdGastroEnterologyColonoscopy();
		boolean successfullyAdded = false;
		int visitId = 0;
		int hospitalId = 0;
		if (infoMap.get("gastroEnterologyColonoscopy") != null) {
			gastroEnterologyColonoscopy = (OpdGastroEnterologyColonoscopy) infoMap
					.get("gastroEnterologyColonoscopy");
		}
		if (infoMap.get("visitId") != null) {
			visitId = (Integer) infoMap.get("visitId");
		}
		if (infoMap.get("hospitalId") != null) {
			hospitalId = (Integer) infoMap.get("hospitalId");
		}
		String referredDept = (String) infoMap.get("referredDept").toString();

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			hbt.saveOrUpdate(gastroEnterologyColonoscopy);

			Visit visitObjToUpdate = (Visit) hbt.load(Visit.class, visitId);
			visitObjToUpdate.setVisitStatus("C");
			hbt.update(visitObjToUpdate);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

			opdPatientDetails.setReferredDept(referredDept);

			MasHospital masHospital = (MasHospital) hbt.load(MasHospital.class,
					hospitalId);
			opdPatientDetails.setHospital(masHospital);

			opdPatientDetails.setVisit(visitObjToUpdate);
			hbt.save(opdPatientDetails);

			successfullyAdded = true;
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return successfullyAdded;

	}

	public Map<String, Object> getGastroEnterologyColonoscopy(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<Integer> gastroEnterologyColonoscopyList = new ArrayList<Integer>();
		List<OpdGastroEnterologyColonoscopy> opdGastroEnterologyColonoscopyList = null ;
		OpdGastroEnterologyColonoscopy opdGastroEnterologyColonoscopy = null ;
		Map<String, Object> map = new HashMap<String, Object>();
		int maxNo = 0;
		String repNo = "";
		try {
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();
			employeeList = getHibernateTemplate()
					.find(
							"from jkt.hms.masters.business.MasEmployee as emp where emp.Status='y' and emp.EmpCategory.Id='1'");
			gastroEnterologyColonoscopyList = getHibernateTemplate()
					.find(
							"select max(odee.Id) from jkt.hms.masters.business.OpdGastroEnterologyColonoscopy as odee");
			opdGastroEnterologyColonoscopyList = session.createCriteria(OpdGastroEnterologyColonoscopy.class)
												 .createAlias("Visit", "v").add(Restrictions.eq("v.Id",visitId )).list();
			
			if(opdGastroEnterologyColonoscopyList==null || opdGastroEnterologyColonoscopyList.size()==0){
			if (gastroEnterologyColonoscopyList.get(0) != null) {
				maxNo = gastroEnterologyColonoscopyList.get(0);
				repNo = String.valueOf(maxNo + 1);
			} else {
				repNo = String.valueOf(1);
			}}else{
				opdGastroEnterologyColonoscopy = (OpdGastroEnterologyColonoscopy)opdGastroEnterologyColonoscopyList.get(0);
				repNo = opdGastroEnterologyColonoscopy.getReportNo();
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("reportNo", repNo);
		map.put("employeeList", employeeList);
		map.put("patientDataList", patientDataList);
		map.put("opdGastroEnterologyColonoscopy",opdGastroEnterologyColonoscopy);
		return map;
	}

	public Map<String, Object> viewGastroEnterologyColonoscopy(
			Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdGastroEnterologyColonoscopy> opdGastroEnterologyColonoscopyList = new ArrayList<OpdGastroEnterologyColonoscopy>();
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {
			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				opdGastroEnterologyColonoscopyList = session.createCriteria(
						OpdGastroEnterologyColonoscopy.class).createAlias(
						"Visit", "visit").add(
						Restrictions.eq("visit.Id", visitId)).list();
				map.put("opdGastroEnterologyColonoscopyList",
						opdGastroEnterologyColonoscopyList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	public boolean addAntenatalCard(Map<String, Object> infoMap) {
		OpdAntenatalCard antenatalCard = new OpdAntenatalCard();
		boolean successfullyAdded = false;
		int visitId = 0;
		int hospitalId = 0;
		if (infoMap.get("antenatalCard") != null) {
			antenatalCard = (OpdAntenatalCard) infoMap.get("antenatalCard");
		}
		if (infoMap.get("visitId") != null) {
			visitId = (Integer) infoMap.get("visitId");
		}
		if (infoMap.get("hospitalId") != null) {
			hospitalId = (Integer) infoMap.get("hospitalId");
		}
		String referredDept = (String) infoMap.get("referredDept").toString();

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			hbt.save(antenatalCard);

			/*
			 * Visit visitObjToUpdate = (Visit)hbt.load(Visit.class, visitId);
			 * visitObjToUpdate.setVisitStatus("C");
			 * hbt.update(visitObjToUpdate);
			 */

			/*
			 * OpdPatientDetails opdPatientDetails = new OpdPatientDetails();
			 * 
			 * 
			 * opdPatientDetails.setReferredDept(referredDept);
			 * 
			 * MasHospital masHospital =
			 * (MasHospital)hbt.load(MasHospital.class, hospitalId);
			 * opdPatientDetails.setHospital(masHospital);
			 * 
			 * 
			 * opdPatientDetails.setVisit(visitObjToUpdate);
			 * hbt.save(opdPatientDetails);
			 */

			successfullyAdded = true;
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return successfullyAdded;

	}

	public Map<String, Object> getAntenatalCard(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List opdAntenatalCardList = new ArrayList();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();

			opdAntenatalCardList = session
					.createQuery(
							"select emp, max(emp.Id) from OpdAntenatalCard as emp where emp.Status='y' group by emp.Id")
					.list();
			if (opdAntenatalCardList.size() > 0) {
				Iterator iterator = opdAntenatalCardList.iterator();
				while (iterator.hasNext()) {
					Object[] pair = (Object[]) iterator.next();
					OpdAntenatalCard opdAntenatalCard = (OpdAntenatalCard) pair[0];
					int max = (Integer) pair[1];
					map.put("opdAntenatalCardList", opdAntenatalCardList);
				}

			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		return map;
	}

	public Map<String, Object> viewAntenatalCard(
			Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdAntenatalCard> opdAntenatalCardList = new ArrayList<OpdAntenatalCard>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {
			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				opdAntenatalCardList = session.createCriteria(
						OpdAntenatalCard.class).createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", visitId)).list();
				map.put("opdAntenatalCardList", opdAntenatalCardList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> updateAntenatalCard(Box box) {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		/*
		 * int hinId = 0; int visitId = 0; int userId=0; int departmentId=0; int
		 * hospitalId = 0;
		 */
		try {

			/*
			 * visitId = box.getInt(VISIT_ID); hinId = box.getInt(HIN_ID);
			 * userId = box.getInt("userId"); departmentId =
			 * box.getInt("departmentId"); hospitalId =
			 * box.getInt("hospitalId");
			 */
			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");
			Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
			/*
			 * Patient patient = new Patient(); patient.setId(hinId);
			 * 
			 * 
			 * Visit visit = new Visit(); visit.setId(visitId);
			 * 
			 * MasDepartment masDepartment = new MasDepartment();
			 * masDepartment.setId(departmentId);
			 * 
			 * MasHospital masHospital = new MasHospital();
			 * masHospital.setId(hospitalId);
			 */

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			Vector id = box.getVector(ANTENATAL_CARD_ID);
			Vector fhsFmEdit = box.getVector(FHS_FM_EDIT);
			Vector urineEdit = box.getVector(URINE_EDIT);
			Vector hbGmsEdit = box.getVector(HB_GMS_EDIT);
			for (int i = 0; i < id.size(); i++) {

				OpdAntenatalCard antenatalCardObj = new OpdAntenatalCard();
				if (id.get(i) != null && !id.get(i).equals("")) {
					int aId = Integer.parseInt(id.get(i).toString());
					antenatalCardObj = (OpdAntenatalCard) getHibernateTemplate()
							.load(OpdAntenatalCard.class, aId);

					if (fhsFmEdit.get(i) != null
							&& !fhsFmEdit.get(i).equals("")) {
						antenatalCardObj.setFhsFm((String) fhsFmEdit.get(i));
					}
					if (urineEdit.get(i) != null
							&& !urineEdit.get(i).equals("")) {
						antenatalCardObj.setUrine((String) urineEdit.get(i));
					}
					if (hbGmsEdit.get(i) != null
							&& !hbGmsEdit.get(i).equals("")) {
						antenatalCardObj.setHbGms((String) hbGmsEdit.get(i));
					}

					/*
					 * antenatalCardObj.setDepartment(masDepartment);
					 * antenatalCardObj.setHospital(masHospital);
					 * antenatalCardObj.setHin(patient);
					 * antenatalCardObj.setVisit(visit);
					 * antenatalCardObj.setLastChgBy(userId);
					 */
					antenatalCardObj.setStatus("y");
					antenatalCardObj.setLastChgDate(date);
					antenatalCardObj.setLastChgTime(time);

					hbt.update(antenatalCardObj);

				}
			}

			saved = true;
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;

	}

	public Map<String, Object> getAntenatalCardEdit(int aId, int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List<OpdAntenatalCard> opdAntenatalCardList = new ArrayList<OpdAntenatalCard>();
		Map<String, Object> map = new HashMap<String, Object>();
		try {

			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();
			opdAntenatalCardList = session.createCriteria(
					OpdAntenatalCard.class).add(Restrictions.eq("Id", aId))
					.list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		map.put("opdAntenatalCardList", opdAntenatalCardList);
		return map;
	}

	public Map<String, Object> getGravidagramHTN(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		return map;
	}

	public boolean addGravidagramHTN(Map<String, Object> infoMap) {
		OpdGravidagramHtn gravidagramHtn = new OpdGravidagramHtn();
		boolean successfullyAdded = false;
		int visitId = 0;
		int hospitalId = 0;
		if (infoMap.get("gravidagramHtn") != null) {
			gravidagramHtn = (OpdGravidagramHtn) infoMap.get("gravidagramHtn");
		}
		if (infoMap.get("visitId") != null) {
			visitId = (Integer) infoMap.get("visitId");
		}
		if (infoMap.get("hospitalId") != null) {
			hospitalId = (Integer) infoMap.get("hospitalId");
		}
		String referredDept = (String) infoMap.get("referredDept").toString();

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			hbt.save(gravidagramHtn);

			Visit visitObjToUpdate = (Visit) hbt.load(Visit.class, visitId);
			visitObjToUpdate.setVisitStatus("C");
			hbt.update(visitObjToUpdate);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

			opdPatientDetails.setReferredDept(referredDept);

			MasHospital masHospital = (MasHospital) hbt.load(MasHospital.class,
					hospitalId);
			opdPatientDetails.setHospital(masHospital);

			opdPatientDetails.setVisit(visitObjToUpdate);
			hbt.save(opdPatientDetails);

			successfullyAdded = true;
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return successfullyAdded;

	}

	public Map<String, Object> viewGravidagramHTN(
			Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdGravidagramHtn> opdGravidagramHtnList = new ArrayList<OpdGravidagramHtn>();
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {
			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				opdGravidagramHtnList = session.createCriteria(
						OpdGravidagramHtn.class).createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", visitId)).list();
				map.put("opdGravidagramHtnList", opdGravidagramHtnList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	public Map<String, Object> getGravidagramGestationalDiabitiesOne(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		return map;
	}

	public boolean addGravidagramGestationalDiabitiesOne(
			Map<String, Object> infoMap) {
		OpdGravidagramGestationalDiabitiesOne gravidagramGestationalDiabitiesOne = new OpdGravidagramGestationalDiabitiesOne();
		boolean successfullyAdded = false;
		int visitId = 0;
		int hospitalId = 0;
		if (infoMap.get("gravidagramGestationalDiabitiesOne") != null) {
			gravidagramGestationalDiabitiesOne = (OpdGravidagramGestationalDiabitiesOne) infoMap
					.get("gravidagramGestationalDiabitiesOne");
		}
		if (infoMap.get("visitId") != null) {
			visitId = (Integer) infoMap.get("visitId");
		}
		if (infoMap.get("hospitalId") != null) {
			hospitalId = (Integer) infoMap.get("hospitalId");
		}
		String referredDept = (String) infoMap.get("referredDept").toString();

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			hbt.save(gravidagramGestationalDiabitiesOne);

			Visit visitObjToUpdate = (Visit) hbt.load(Visit.class, visitId);
			visitObjToUpdate.setVisitStatus("C");
			hbt.update(visitObjToUpdate);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

			opdPatientDetails.setReferredDept(referredDept);

			MasHospital masHospital = (MasHospital) hbt.load(MasHospital.class,
					hospitalId);
			opdPatientDetails.setHospital(masHospital);

			opdPatientDetails.setVisit(visitObjToUpdate);
			hbt.save(opdPatientDetails);

			successfullyAdded = true;
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return successfullyAdded;

	}

	public Map<String, Object> viewGravidagramGestationalDiabitiesOne(
			Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdGravidagramGestationalDiabitiesOne> opdGravidagramGestationalDiabitiesOneList = new ArrayList<OpdGravidagramGestationalDiabitiesOne>();
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {
			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				opdGravidagramGestationalDiabitiesOneList = session
						.createCriteria(
								OpdGravidagramGestationalDiabitiesOne.class)
						.createAlias("Visit", "visit").add(
								Restrictions.eq("visit.Id", visitId)).list();
				map.put("opdGravidagramGestationalDiabitiesOneList",
						opdGravidagramGestationalDiabitiesOneList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	public Map<String, Object> getGravidagramGestationalDiabitiesTwo(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		return map;
	}

	public boolean addGravidagramGestationalDiabitiesTwo(
			Map<String, Object> infoMap) {
		OpdGravidagramGestationalDiabitiesTwo gravidagramGestationalDiabitiesTwo = new OpdGravidagramGestationalDiabitiesTwo();
		boolean successfullyAdded = false;
		int visitId = 0;
		int hospitalId = 0;
		if (infoMap.get("gravidagramGestationalDiabitiesTwo") != null) {
			gravidagramGestationalDiabitiesTwo = (OpdGravidagramGestationalDiabitiesTwo) infoMap
					.get("gravidagramGestationalDiabitiesTwo");
		}
		if (infoMap.get("visitId") != null) {
			visitId = (Integer) infoMap.get("visitId");
		}
		if (infoMap.get("hospitalId") != null) {
			hospitalId = (Integer) infoMap.get("hospitalId");
		}
		String referredDept = (String) infoMap.get("referredDept").toString();

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			hbt.save(gravidagramGestationalDiabitiesTwo);

			Visit visitObjToUpdate = (Visit) hbt.load(Visit.class, visitId);
			visitObjToUpdate.setVisitStatus("C");
			hbt.update(visitObjToUpdate);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

			opdPatientDetails.setReferredDept(referredDept);

			MasHospital masHospital = (MasHospital) hbt.load(MasHospital.class,
					hospitalId);
			opdPatientDetails.setHospital(masHospital);

			opdPatientDetails.setVisit(visitObjToUpdate);
			hbt.save(opdPatientDetails);

			successfullyAdded = true;
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return successfullyAdded;

	}

	public Map<String, Object> viewGravidagramGestationalDiabitiesTwo(
			Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdGravidagramGestationalDiabitiesTwo> opdGravidagramGestationalDiabitiesTwoList = new ArrayList<OpdGravidagramGestationalDiabitiesTwo>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {
			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				opdGravidagramGestationalDiabitiesTwoList = session
						.createCriteria(
								OpdGravidagramGestationalDiabitiesTwo.class)
						.createAlias("Visit", "visit").add(
								Restrictions.eq("visit.Id", visitId)).list();
				map.put("opdGravidagramGestationalDiabitiesTwoList",
						opdGravidagramGestationalDiabitiesTwoList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	// ------------------------Mehod For Generate to Order
	// Number-----------------
	public String generateOrderNumber(int hospitalId) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<TransactionSequence> orderSeqNoList = new ArrayList<TransactionSequence>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = "";

		Session session = (Session) getSession();
		String orderSeqNo = "";
		date = (String) utilMap.get("currentDate");
		String currentyear = "";
		String currentYear = date.substring(date.lastIndexOf("/") + 1);
		String lastOrderNo = "";
		String lastOrderYear = "";
		int seqNo = 1;
		List<DgOrderhd> orderNoList = new ArrayList<DgOrderhd>();
       /*
		orderNoList = session.createCriteria(DgOrderhd.class).list();
		for (DgOrderhd dgOrderhd : orderNoList) {
			lastOrderNo = dgOrderhd.getOrderNo();
		}
		System.out.println("lastOrderNo i ----"+lastOrderNo);
		StringTokenizer str = new StringTokenizer(lastOrderNo, "/");
		while (str.hasMoreTokens()) {

			lastOrderYear = str.nextToken();

		}
		System.out.println("lastOrderYear i ----"+lastOrderYear);
		*/
		try {
			orderSeqNoList = session.createCriteria(TransactionSequence.class)
					.add(Restrictions.eq("TransactionPrefix", "ON")).add(Restrictions.eq("Hospital.Id", hospitalId)).list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

		if (orderSeqNoList.size() > 0) {
		//	for (TransactionSequence transactionSequence : orderSeqNoList) {
				TransactionSequence obj = (TransactionSequence) orderSeqNoList
						.get(0);
				int id = obj.getId();
				String seqNoStr=obj.getTransactionSequenceNumber().toString();
				lastOrderYear=obj.getMonth().toString();
				if (currentYear.equals(lastOrderYear)) {
					
					seqNo = Integer.parseInt(seqNoStr);
				} else {
					seqNo = 0;
					lastOrderYear=currentYear;
				}
				seqNo=seqNo+1;

				TransactionSequence transactionSequenceObj = (TransactionSequence) hbt
				.load(TransactionSequence.class, id);
		        
				orderSeqNo = orderSeqNo.concat(String.valueOf(seqNo));
				//orderSeqNo = orderSeqNo.concat("/").concat(String.valueOf(lastOrderYear));
				transactionSequenceObj.setTransactionSequenceNumber(Integer.parseInt(orderSeqNo));
				transactionSequenceObj.setMonth(Integer.parseInt(lastOrderYear));
				hbt.update(transactionSequenceObj);
		       hbt.refresh(transactionSequenceObj);
		       
		//	}
		} else if (orderSeqNoList.size() == 0) {
			TransactionSequence tsObj = new TransactionSequence();
			tsObj.setStatus("y");
			tsObj.setTablename("DgOrderhd");
			tsObj.setTransactionPrefix("ON");
			tsObj.setTransactionSequenceName("Order No");
			orderSeqNo = orderSeqNo.concat(String.valueOf(seqNo));
			//orderSeqNo = orderSeqNo.concat("/").concat(String.valueOf(currentYear));
			lastOrderYear=currentYear;
			tsObj.setTransactionSequenceNumber(Integer.parseInt(orderSeqNo));
			tsObj.setMonth(Integer.parseInt(currentYear));
			MasHospital hospital = new MasHospital();
			hospital.setId(hospitalId);
			tsObj.setHospital(hospital);
			hbt.save(tsObj);
		}
		orderSeqNo = orderSeqNo.concat("/").concat(String.valueOf(lastOrderYear));
		
		return orderSeqNo;
	}

	public Map<String, Object> addOncosurgeryCaseSheet(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;

		int hinId = 0;
		int visitId = 0;
		int departmentId = 0;
		int hospitalId = 0;
		String cityScan = "";
		String others = "";
		String biopsyNo = "";
		String fancNo = "";
		String clinicalDiagnosis = "";
		String tumour = "";
		String lx = "";
		String mets = "";
		String operationFindingsOthers = "";
		String operationDateProcedure = "";
		String hpe = "";

		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		String referredDept = (String) box.get("referredDept").toString();
		try {

			visitId = box.getInt("visitId");
			hinId = box.getInt("hinId");
			departmentId = box.getInt("departmentId");
			hospitalId = box.getInt("hospitalId");

			cityScan = box.getString(CITY_SCAN);
			others = box.getString(OTHERS);
			biopsyNo = box.getString(BIOSPSY_NO);
			fancNo = box.getString(FANC_NO);
			clinicalDiagnosis = box.getString(CLINICAL_DIAGNOSIS);
			tumour = box.getString(TUMOUR);
			lx = box.getString(LX);
			mets = box.getString(METS);
			operationFindingsOthers = box.getString(OPERATION_FINDINGS_OTHERS);
			operationDateProcedure = box.getString(OPERATION_DATE_PROCEDURE);
			hpe = box.getString(HPE);

			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");
			String userName = "";
			userName = box.getString("userName");
			Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
			Patient patient = new Patient();
			patient.setId(hinId);

			Visit visit = new Visit();
			visit.setId(visitId);

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);

			OpdOncosurgeryCaseSheet opdOncosurgeryCaseSheet = new OpdOncosurgeryCaseSheet();

			opdOncosurgeryCaseSheet.setDepartment(masDepartment);
			opdOncosurgeryCaseSheet.setHin(patient);
			opdOncosurgeryCaseSheet.setVisit(visit);
			opdOncosurgeryCaseSheet.setHospital(masHospital);

			opdOncosurgeryCaseSheet.setBiopsyNo(biopsyNo);
			opdOncosurgeryCaseSheet.setCityScan(cityScan);
			opdOncosurgeryCaseSheet.setClinicalDiagnosis(clinicalDiagnosis);
			opdOncosurgeryCaseSheet.setFancNo(fancNo);
			opdOncosurgeryCaseSheet.setHpe(hpe);
			opdOncosurgeryCaseSheet.setLx(lx);
			opdOncosurgeryCaseSheet
					.setOperationDateProcedure(operationDateProcedure);
			opdOncosurgeryCaseSheet.setMets(mets);
			opdOncosurgeryCaseSheet
					.setOperationFindingsOthers(operationFindingsOthers);
			opdOncosurgeryCaseSheet.setOthers(others);
			opdOncosurgeryCaseSheet.setTumour(tumour);

			opdOncosurgeryCaseSheet.setStatus("y");
			opdOncosurgeryCaseSheet.setLastChgDate(date);
			opdOncosurgeryCaseSheet.setLastChgTime(time);
			opdOncosurgeryCaseSheet.setLastChgBy(userName);

			hbt.save(opdOncosurgeryCaseSheet);
			saved = true;
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		try {
			Visit visitStatus = (Visit) getHibernateTemplate().load(
					Visit.class, visitId);
			visitStatus.setVisitStatus("C");
			hbt.update(visitStatus);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

			opdPatientDetails.setReferredDept(referredDept);

			MasHospital masHospitalob = (MasHospital) hbt.load(
					MasHospital.class, hospitalId);
			opdPatientDetails.setHospital(masHospitalob);

			opdPatientDetails.setVisit(visitStatus);
			hbt.save(opdPatientDetails);
			saved = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;
	}

	public Map<String, Object> showOncosurgeryCaseSheetJsp(int visitId) {

		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();

		try {
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);

		return map;
	}

	public Map<String, Object> viewOncosurgeryCaseSheet(
			Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdOncosurgeryCaseSheet> oncosurgeryCaseSheetList = new ArrayList<OpdOncosurgeryCaseSheet>();
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {

			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				oncosurgeryCaseSheetList = session.createCriteria(
						OpdOncosurgeryCaseSheet.class).createAlias("Visit",
						"visit").add(Restrictions.eq("visit.Id", visitId))
						.list();
				map.put("oncosurgeryCaseSheetList", oncosurgeryCaseSheetList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	/*----------------------------------------Urology Case Sheet----------------------------------------------*/

	public Map<String, Object> addUrologyCaseSheet(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;

		int hinId = 0;
		int visitId = 0;
		int departmentId = 0;
		int hospitalId = 0;
		String symptomme = "";
		String haeTotal = "";
		String haeTeriminal = "";
		String haeInitial = "";
		String haeClots = "";
		String uretericLeft = "";
		String uretericRight = "";
		String hypogastricPain = "";
		String bonePain = "";
		String dysuriaPain = "";
		String perinalRectal = "";

		String lFrequency = "";
		String lHesitanvy = "";
		String lNocturia = "";
		String lStraining = "";
		String lUrgency = "";
		String lSenseComEva = "";
		String lUrgeIncon = "";
		String lIntermittency = "";
		String lDribbling = "";
		String calculariaCheck = "";
		String calcularia = "";

		String chyluriaCheck = "";
		String chyluria = "";
		String erectileDysfunctionCheck = "";
		String erectileDysfunction = "";
		String haemospermia = "";
		String prematureEjaculation = "";
		String retrogradeEjaculation = "";
		String anejaculationEjaculation = "";

		String stressIncontinence = "";
		String urgeIncontinence = "";
		String totalIncontinence = "";
		String overflowIncontinence = "";
		String acuteUrinaryCheck = "";
		String acuteUrinary = "";

		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		String referredDept = (String) box.get("referredDept").toString();
		try {

			visitId = box.getInt("visitId");
			hinId = box.getInt("hinId");
			departmentId = box.getInt("departmentId");
			hospitalId = box.getInt("hospitalId");

			symptomme = box.getString(SYMPTOMME);
			haeTotal = box.getString(HAE_TOTAL);
			haeTeriminal = box.getString(HAE_TERIMINAL);
			haeInitial = box.getString(HAE_INITIAL);
			haeClots = box.getString(HAE_CLOTS);
			uretericLeft = box.getString(URETERIC_LEFT);
			uretericRight = box.getString(URETERIC_RIGHT);
			hypogastricPain = box.getString(HYPOGASTRIC_PAIN);
			bonePain = box.getString(BONE_PAIN);
			dysuriaPain = box.getString(DYSURIA_PAIN);
			perinalRectal = box.getString(PERINAL_RECTAL);

			lFrequency = box.getString(L_FREQUENCY);
			lHesitanvy = box.getString(L_HESITANVY);
			lNocturia = box.getString(L_NOCTURIA);
			lStraining = box.getString(L_STRAINING);
			lUrgency = box.getString(L_URGENCY);
			lSenseComEva = box.getString(L_SENSE_COM_EVA);
			lUrgeIncon = box.getString(L_URGE_INCON);
			lIntermittency = box.getString(L_INTERMITTENCY);
			lDribbling = box.getString(L_DRIBBLING);
			calculariaCheck = box.getString(CALCULARIA_CHECK);
			calcularia = box.getString(CALCULARIA);

			chyluriaCheck = box.getString(CHYLURIA_CHECK);
			chyluria = box.getString(CHYLURIA);
			erectileDysfunctionCheck = box
					.getString(ERECTILE_DYSFUNCTION_CHECK);
			erectileDysfunction = box.getString(ERECTILE_DYSFUNCTION);
			haemospermia = box.getString(HAEMOSPERMIA);
			prematureEjaculation = box.getString(PREMATUREEJACULATION);
			retrogradeEjaculation = box.getString(RETROGRADE_EJACULATION);
			anejaculationEjaculation = box.getString(ANEJACULATION_EJACULATION);

			stressIncontinence = box.getString(STRESS_INCONTINENCE);
			urgeIncontinence = box.getString(URGE_INCONTINENCE);
			totalIncontinence = box.getString(TOTAL_INCONTINENCE);
			overflowIncontinence = box.getString(OVERFLOW_INCONTINENCE);
			acuteUrinaryCheck = box.getString(ACUTE_URINARY_CHECK);
			acuteUrinary = box.getString(ACUTE_URINARY);

			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");
			String userName = "";
			userName = box.getString("userName");
			Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
			Patient patient = new Patient();
			patient.setId(hinId);

			Visit visit = new Visit();
			visit.setId(visitId);

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);

			OpdUrology opdUrology = new OpdUrology();

			opdUrology.setDepartment(masDepartment);
			opdUrology.setHin(patient);
			opdUrology.setVisit(visit);
			opdUrology.setHospital(masHospital);

			opdUrology.setAcuteUrinary(acuteUrinary);
			opdUrology.setAcuteUrinaryCheck(acuteUrinaryCheck);
			opdUrology.setAnejaculationEjaculation(anejaculationEjaculation);
			opdUrology.setBonePain(bonePain);
			opdUrology.setCalcularia(calcularia);
			opdUrology.setCalculariaCheck(calculariaCheck);
			opdUrology.setChyluria(chyluria);
			opdUrology.setChyluriaCheck(chyluriaCheck);
			opdUrology.setDysuriaPain(dysuriaPain);
			opdUrology.setErectileDysfunction(erectileDysfunction);
			opdUrology.setErectileDysfunctionCheck(erectileDysfunctionCheck);
			opdUrology.setHaeClots(haeClots);
			opdUrology.setHaeInitial(haeInitial);
			opdUrology.setHaemospermia(haemospermia);
			opdUrology.setHaeTeriminal(haeTeriminal);
			opdUrology.setHaeTotal(haeTotal);
			opdUrology.setHypogastricPain(hypogastricPain);
			opdUrology.setLDribbling(lDribbling);
			opdUrology.setLFrequency(lFrequency);
			opdUrology.setLHesitanvy(lHesitanvy);
			opdUrology.setLIntermittency(lIntermittency);
			opdUrology.setLNocturia(lNocturia);
			opdUrology.setLSenseComEva(lSenseComEva);
			opdUrology.setLStraining(lStraining);
			opdUrology.setLUrgeIncon(lUrgeIncon);
			opdUrology.setLUrgency(lUrgency);
			opdUrology.setOverflowIncontinence(overflowIncontinence);
			opdUrology.setPerinalRectal(perinalRectal);
			opdUrology.setPrematureejaculation(prematureEjaculation);
			opdUrology.setRetrogradeEjaculation(retrogradeEjaculation);
			opdUrology.setStressIncontinence(stressIncontinence);
			opdUrology.setSymptomme(symptomme);
			opdUrology.setTotalIncontinence(totalIncontinence);
			opdUrology.setUretericLeft(uretericLeft);
			opdUrology.setUretericRight(uretericRight);
			opdUrology.setUrgeIncontinence(urgeIncontinence);
			opdUrology.setStatus("y");
			opdUrology.setLastChgDate(date);
			opdUrology.setLastChgTime(time);
			opdUrology.setLastChgBy(userName);

			hbt.save(opdUrology);

			map.put("haeTotal",haeTotal);
			map.put("haeTeriminal",haeTeriminal);
			map.put("haeInitial",haeInitial);
			map.put("haeClots",haeClots);
			
			map.put("symptomme",symptomme);
			
			map.put("uretericLeft",uretericLeft);
			map.put("uretericRight",uretericRight);

			map.put("hypogastricPain",hypogastricPain);
			map.put("bonePain",bonePain);
			map.put("dysuriaPain",dysuriaPain);
			map.put("perinalRectal",perinalRectal);

			map.put("lFrequency",lFrequency);
			map.put("lHesitanvy",lHesitanvy);
			map.put("lNocturia",lNocturia);
			map.put("lStraining",lStraining);
			map.put("lUrgency",lUrgency);
			map.put("lSenseComEva",lSenseComEva);
			map.put("lUrgeIncon",lUrgeIncon);
			map.put("lIntermittency",lIntermittency);
			map.put("lDribbling",lDribbling);
			
			map.put("calcularia",calcularia);
			map.put("calculariaCheck",calculariaCheck);
			map.put("chyluriaCheck",chyluriaCheck);
			map.put("chyluria",chyluria);
			map.put("erectileDysfunctionCheck",erectileDysfunctionCheck);
			map.put("erectileDysfunction",erectileDysfunction);
			map.put("haemospermia",haemospermia);
			map.put("prematureEjaculation",prematureEjaculation);
			map.put("retrogradeEjaculation",retrogradeEjaculation);
			map.put("anejaculationEjaculation",anejaculationEjaculation);

			map.put("stressIncontinence",stressIncontinence);
			map.put("urgeIncontinence",urgeIncontinence);
			map.put("totalIncontinence",totalIncontinence);
			map.put("overflowIncontinence",overflowIncontinence);
			map.put("acuteUrinaryCheck",acuteUrinaryCheck);
			map.put("acuteUrinary",acuteUrinary);
			saved = true;
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		try {
			Visit visitStatus = (Visit) getHibernateTemplate().load(
					Visit.class, visitId);
			visitStatus.setVisitStatus("C");
			hbt.update(visitStatus);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

			opdPatientDetails.setReferredDept(referredDept);

			MasHospital masHospitalob = (MasHospital) hbt.load(
					MasHospital.class, hospitalId);
			opdPatientDetails.setHospital(masHospitalob);

			opdPatientDetails.setVisit(visitStatus);
			hbt.save(opdPatientDetails);
			saved = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;
	}

	public Map<String, Object> updateUrologyCaseSheet(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;

		int hinId = 0;
		int urologyId = 0;
		int visitId = 0;
		int departmentId = 0;
		int hospitalId = 0;
		String symptomme = "";
		String haeTotal = "";
		String haeTeriminal = "";
		String haeInitial = "";
		String haeClots = "";
		String uretericLeft = "";
		String uretericRight = "";
		String hypogastricPain = "";
		String bonePain = "";
		String dysuriaPain = "";
		String perinalRectal = "";

		String lFrequency = "";
		String lHesitanvy = "";
		String lNocturia = "";
		String lStraining = "";
		String lUrgency = "";
		String lSenseComEva = "";
		String lUrgeIncon = "";
		String lIntermittency = "";
		String lDribbling = "";
		String calculariaCheck = "";
		String calcularia = "";

		String chyluriaCheck = "";
		String chyluria = "";
		String erectileDysfunctionCheck = "";
		String erectileDysfunction = "";
		String haemospermia = "";
		String prematureEjaculation = "";
		String retrogradeEjaculation = "";
		String anejaculationEjaculation = "";

		String stressIncontinence = "";
		String urgeIncontinence = "";
		String totalIncontinence = "";
		String overflowIncontinence = "";
		String acuteUrinaryCheck = "";
		String acuteUrinary = "";

		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {

			visitId = box.getInt("visitId");
			urologyId = box.getInt("urologyId");

			hinId = box.getInt("hinId");
			departmentId = box.getInt("departmentId");
			hospitalId = box.getInt("hospitalId");

			symptomme = box.getString(SYMPTOMME);
			haeTotal = box.getString(HAE_TOTAL);
			haeTeriminal = box.getString(HAE_TERIMINAL);
			haeInitial = box.getString(HAE_INITIAL);
			haeClots = box.getString(HAE_CLOTS);
			uretericLeft = box.getString(URETERIC_LEFT);
			uretericRight = box.getString(URETERIC_RIGHT);
			hypogastricPain = box.getString(HYPOGASTRIC_PAIN);
			bonePain = box.getString(BONE_PAIN);
			dysuriaPain = box.getString(DYSURIA_PAIN);
			perinalRectal = box.getString(PERINAL_RECTAL);

			lFrequency = box.getString(L_FREQUENCY);
			lHesitanvy = box.getString(L_HESITANVY);
			lNocturia = box.getString(L_NOCTURIA);
			lStraining = box.getString(L_STRAINING);
			lUrgency = box.getString(L_URGENCY);
			lSenseComEva = box.getString(L_SENSE_COM_EVA);
			lUrgeIncon = box.getString(L_URGE_INCON);
			lIntermittency = box.getString(L_INTERMITTENCY);
			lDribbling = box.getString(L_DRIBBLING);
			calculariaCheck = box.getString(CALCULARIA_CHECK);
			calcularia = box.getString(CALCULARIA);

			chyluriaCheck = box.getString(CHYLURIA_CHECK);
			chyluria = box.getString(CHYLURIA);
			erectileDysfunctionCheck = box
					.getString(ERECTILE_DYSFUNCTION_CHECK);
			erectileDysfunction = box.getString(ERECTILE_DYSFUNCTION);
			haemospermia = box.getString(HAEMOSPERMIA);
			prematureEjaculation = box.getString(PREMATUREEJACULATION);
			retrogradeEjaculation = box.getString(RETROGRADE_EJACULATION);
			anejaculationEjaculation = box.getString(ANEJACULATION_EJACULATION);

			stressIncontinence = box.getString(STRESS_INCONTINENCE);
			urgeIncontinence = box.getString(URGE_INCONTINENCE);
			totalIncontinence = box.getString(TOTAL_INCONTINENCE);
			overflowIncontinence = box.getString(OVERFLOW_INCONTINENCE);
			acuteUrinaryCheck = box.getString(ACUTE_URINARY_CHECK);
			acuteUrinary = box.getString(ACUTE_URINARY);

			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");
			String userName = "";
			userName = box.getString("userName");
			Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
			Patient patient = new Patient();
			patient.setId(hinId);

			Visit visit = new Visit();
			visit.setId(visitId);

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);

			OpdUrology opdUrology = (OpdUrology) hbt.load(OpdUrology.class,
					urologyId);

			opdUrology.setDepartment(masDepartment);
			opdUrology.setHin(patient);
			opdUrology.setVisit(visit);
			opdUrology.setHospital(masHospital);

			opdUrology.setAcuteUrinary(acuteUrinary);
			opdUrology.setAcuteUrinaryCheck(acuteUrinaryCheck);
			opdUrology.setAnejaculationEjaculation(anejaculationEjaculation);
			opdUrology.setBonePain(bonePain);
			opdUrology.setCalcularia(calcularia);
			opdUrology.setCalculariaCheck(calculariaCheck);
			opdUrology.setChyluria(chyluria);
			opdUrology.setChyluriaCheck(chyluriaCheck);
			opdUrology.setDysuriaPain(dysuriaPain);
			opdUrology.setErectileDysfunction(erectileDysfunction);
			opdUrology.setErectileDysfunctionCheck(erectileDysfunctionCheck);
			opdUrology.setHaeClots(haeClots);
			opdUrology.setHaeInitial(haeInitial);
			opdUrology.setHaemospermia(haemospermia);
			opdUrology.setHaeTeriminal(haeTeriminal);
			opdUrology.setHaeTotal(haeTotal);
			opdUrology.setHypogastricPain(hypogastricPain);
			opdUrology.setLDribbling(lDribbling);
			opdUrology.setLFrequency(lFrequency);
			opdUrology.setLHesitanvy(lHesitanvy);
			opdUrology.setLIntermittency(lIntermittency);
			opdUrology.setLNocturia(lNocturia);
			opdUrology.setLSenseComEva(lSenseComEva);
			opdUrology.setLStraining(lStraining);
			opdUrology.setLUrgeIncon(lUrgeIncon);
			opdUrology.setLUrgency(lUrgency);
			opdUrology.setOverflowIncontinence(overflowIncontinence);
			opdUrology.setPerinalRectal(perinalRectal);
			opdUrology.setPrematureejaculation(prematureEjaculation);
			opdUrology.setRetrogradeEjaculation(retrogradeEjaculation);
			opdUrology.setStressIncontinence(stressIncontinence);
			opdUrology.setSymptomme(symptomme);
			opdUrology.setTotalIncontinence(totalIncontinence);
			opdUrology.setUretericLeft(uretericLeft);
			opdUrology.setUretericRight(uretericRight);
			opdUrology.setUrgeIncontinence(urgeIncontinence);
			opdUrology.setStatus("y");
			opdUrology.setLastChgDate(date);
			opdUrology.setLastChgTime(time);
			opdUrology.setLastChgBy(userName);

			hbt.update(opdUrology);
			hbt.refresh(opdUrology);
			saved = true;
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> showUrologyCaseSheetJsp(int visitId) {

		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<OpdUrology> oncosurgeryCaseSheetList = new ArrayList<OpdUrology>();
		try {
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();
			oncosurgeryCaseSheetList = session.createCriteria(OpdUrology.class)
					.createAlias("Visit", "visit").add(
							Restrictions.eq("visit.Id", visitId)).list();
			map.put("oncosurgeryCaseSheetList", oncosurgeryCaseSheetList);

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		return map;
	}

	public Map<String, Object> viewUrologyCaseSheet(
			Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdUrology> oncosurgeryCaseSheetList = new ArrayList<OpdUrology>();
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {

			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				oncosurgeryCaseSheetList = session.createCriteria(
						OpdUrology.class).createAlias("Visit", "visit").add(
						Restrictions.eq("visit.Id", visitId)).list();
				map.put("oncosurgeryCaseSheetList", oncosurgeryCaseSheetList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public Map<String, Object> addOncosurgery(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;

		int hinId = 0;
		int visitId = 0;
		int departmentId = 0;
		int hospitalId = 0;
		String medicalOnco = "";
		String surgeryOnco = "";
		String stageA = "";
		String stageB = "";
		String stageM = "";
		String stageN = "";
		String stageT = "";
		String remarks = "";
		String rt = "";
		String stageNor = "";
		int opdOncologyId=0;

		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		String referredDept = (String) box.get("referredDept").toString();
		try {

			visitId = box.getInt("visitId");
			hinId = box.getInt("hinId");
			departmentId = box.getInt("departmentId");
			hospitalId = box.getInt("hospitalId");
			opdOncologyId = box.getInt("opdOncologyId");
			medicalOnco = box.getString(MEDICAL);
			surgeryOnco = box.getString(SURGERY);
			remarks = box.getString(REMARKS);
			rt = box.getString(RT);
			stageNor = box.getString(STAGE_NOR);
			stageA = box.getString(STAGE_A);
			stageB = box.getString(STAGE_B);
			stageN = box.getString(STAGE_N);
			stageT = box.getString(STAGE_T);
			stageM = box.getString(STAGE_M);

			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");
			String userName = "";
			userName = box.getString("userName");
			Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
			Patient patient = new Patient();
			patient.setId(hinId);

			Visit visit = new Visit();
			visit.setId(visitId);

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);

			OpdOncology opdOncosurgery = new OpdOncology();
            if(opdOncologyId!=0){
            	opdOncosurgery.setId(opdOncologyId);
            }
			opdOncosurgery.setDepartment(masDepartment);
			opdOncosurgery.setHin(patient);
			opdOncosurgery.setVisit(visit);
			opdOncosurgery.setHospital(masHospital);

			opdOncosurgery.setMedicalOnco(medicalOnco);
			opdOncosurgery.setRemarks(remarks);
			opdOncosurgery.setRt(rt);
			opdOncosurgery.setStageA(stageA);
			opdOncosurgery.setStageB(stageB);
			opdOncosurgery.setStageM(stageM);
			opdOncosurgery.setStageN(stageN);
			opdOncosurgery.setStageT(stageT);
			opdOncosurgery.setSurgeryOnco(surgeryOnco);
			opdOncosurgery.setStageNor(stageNor);
			opdOncosurgery.setOpdDate(date);
			opdOncosurgery.setOpdTime(time);
			opdOncosurgery.setStatus("y");
			opdOncosurgery.setLastChgDate(date);
			opdOncosurgery.setLastChgTime(time);
			opdOncosurgery.setLastChgBy(userName);

			hbt.saveOrUpdate(opdOncosurgery);
			saved = true;
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		try {
			Visit visitStatus = (Visit) getHibernateTemplate().load(
					Visit.class, visitId);
			visitStatus.setVisitStatus("C");
			hbt.update(visitStatus);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

			opdPatientDetails.setReferredDept(referredDept);

			MasHospital masHospitalob = (MasHospital) hbt.load(
					MasHospital.class, hospitalId);
			opdPatientDetails.setHospital(masHospitalob);

			opdPatientDetails.setVisit(visitStatus);
			hbt.save(opdPatientDetails);
			saved = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;
	}

	public Map<String, Object> showOncosurgeryJsp(int visitId) {

		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List<OpdOncology> opdOncologyList = null;
		Map<String, Object> map = new HashMap<String, Object>();

		try {
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();
			opdOncologyList = session.createCriteria(OpdOncology.class)
			.createAlias("Visit","V").add(Restrictions.eq("V.Id",visitId)).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		map.put("opdOncologyList", opdOncologyList);

		return map;
	}

	public Map<String, Object> viewOncosurgery(Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdOncology> oncosurgeryList = new ArrayList<OpdOncology>();
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {

			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				oncosurgeryList = session.createCriteria(OpdOncology.class)
						.createAlias("Visit", "visit").add(
								Restrictions.eq("visit.Id", visitId)).list();
				map.put("oncosurgeryList", oncosurgeryList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public Map<String, Object> viewVistPreNext1(Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<OpdPatientDetails> patientVisitDataList = new ArrayList<OpdPatientDetails>();
		List<DischargeIcdCode> patientDiagnosisList = new ArrayList<DischargeIcdCode>();
		List<PatientPrescriptionHeader> patientPrescHList = new ArrayList<PatientPrescriptionHeader>();
		List<PatientPrescriptionDetails> patientPrescDList = new ArrayList<PatientPrescriptionDetails>();
		List<PatientInvestigationHeader> patientInvesHList = new ArrayList<PatientInvestigationHeader>();
		List<PatientInvestigationDetails> patientInvesDList = new ArrayList<PatientInvestigationDetails>();
		List deptList = new ArrayList<String>();
		@SuppressWarnings("unused")
		// int visitId=(Integer)parameterMap.get("visitId");
		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {

			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				map = getPatientDetails(visitId);

				try {

					Criteria crit = session.createCriteria(
							OpdPatientDetails.class).createAlias("Visit",
							"visit").add(Restrictions.eq("visit.Id", visitId));
					patientVisitDataList = crit.list();
					patientDiagnosisList = session.createCriteria(
							DischargeIcdCode.class).createAlias("Visit",
							"visit").add(Restrictions.eq("visit.Id", visitId))
							.list();
					patientPrescHList = session.createCriteria(
							PatientPrescriptionHeader.class).createAlias(
							"Visit", "visit").add(
							Restrictions.eq("visit.Id", visitId)).list();
					if (patientPrescHList.size() > 0) {
						PatientPrescriptionHeader patientPrescriptionHeader = patientPrescHList
								.get(0);
						int presHId = patientPrescriptionHeader.getId();
						patientPrescDList = session.createCriteria(
								PatientPrescriptionDetails.class).createAlias(
								"Prescription", "hId").add(
								Restrictions.eq("hId.Id", presHId)).list();
					}
					patientInvesHList = session.createCriteria(
							PatientInvestigationHeader.class).createAlias(
							"Visit", "visit").add(
							Restrictions.eq("visit.Id", visitId)).list();
					if (patientInvesHList.size() > 0) {
						PatientInvestigationHeader patientInvestigationHeader = patientInvesHList
								.get(0);
						int invesHId = patientInvestigationHeader.getId();
						patientInvesDList = session.createCriteria(
								PatientInvestigationDetails.class).createAlias(
								"InvestigationHeader", "invesHId").add(
								Restrictions.eq("invesHId.Id", invesHId))
								.list();
					}

					// ----------list of referred department taken out from opd
					// patient details table--------

					OpdPatientDetails opdPatientDetails = (OpdPatientDetails) patientVisitDataList
							.get(0);
					String referredDept = opdPatientDetails.getReferredDept();
					if (!referredDept.equals("") && referredDept != null) {
						String[] dept = referredDept.split(",");
						for (int i = 0; i < dept.length; i++) {
							int deptId = Integer.parseInt(dept[i]);
							String deptName = "";
							Map<String, Object> deptMap = getDepartmentNameFromId(deptId);
							if (deptMap.get("deptName") != null) {
								deptName = (String) deptMap.get("deptName");
							}
							deptList.add(deptName);
						}
					}
					// -------------------------------End of code for referred
					// depatment---------------------
				} catch (HibernateException e) {
					e.printStackTrace();
				}
				map.put("deptList", deptList);
				map.put("patientVisitDataList", patientVisitDataList);
				map.put("patientDiagnosisList", patientDiagnosisList);
				map.put("patientPrescDList", patientPrescDList);
				map.put("patientInvesDList", patientInvesDList);
				map.put("map", map);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public Map<String, Object> viewVistPreNext(Map<String, Object> mapForDS) {
		Session session = (Session) getSession();
		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdPatientDetails> patientVisitDataList = new ArrayList<OpdPatientDetails>();
		List<DischargeIcdCode> patientDiagnosisList = new ArrayList<DischargeIcdCode>();
		List<PatientPrescriptionHeader> patientPrescHList = new ArrayList<PatientPrescriptionHeader>();
		List<PatientPrescriptionDetails> patientPrescDList = new ArrayList<PatientPrescriptionDetails>();
		List<PatientInvestigationHeader> patientInvesHList = new ArrayList<PatientInvestigationHeader>();
		List<PatientInvestigationDetails> patientInvesDList = new ArrayList<PatientInvestigationDetails>();
		Map<String, Object> map = new HashMap<String, Object>();

		List deptList = new ArrayList<String>();
		@SuppressWarnings("unused")
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		if (mapForDS.get("visitNo") != null) {
			visitNo = (Integer) mapForDS.get("visitNo");
		}
		if (mapForDS.get("hinId") != null) {
			hinId = (Integer) mapForDS.get("hinId");
		}
		if (mapForDS.get("flag") != null) {
			flag = (String) mapForDS.get("flag");
		}

		try {
			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = (Integer) mapForDS.get("visitId");
				// int visitId = visit.getId();
				// map = getPatientDetails(visitId);
				Criteria crit = session.createCriteria(OpdPatientDetails.class)
						.createAlias("Visit", "visit").add(
								Restrictions.eq("visit.Id", visitId));
				patientVisitDataList = crit.list();
				patientDiagnosisList = session.createCriteria(
						DischargeIcdCode.class).createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", visitId)).list();
				patientPrescHList = session.createCriteria(
						PatientPrescriptionHeader.class).createAlias("Visit",
						"visit").add(Restrictions.eq("visit.Id", visitId))
						.list();
				if (patientPrescHList.size() > 0) {
					PatientPrescriptionHeader patientPrescriptionHeader = patientPrescHList
							.get(0);
					int presHId = patientPrescriptionHeader.getId();
					patientPrescDList = session.createCriteria(
							PatientPrescriptionDetails.class).createAlias(
							"Prescription", "hId").add(
							Restrictions.eq("hId.Id", presHId)).list();
				}
				patientInvesHList = session.createCriteria(
						PatientInvestigationHeader.class).createAlias("Visit",
						"visit").add(Restrictions.eq("visit.Id", visitId))
						.list();
				if (patientInvesHList.size() > 0) {
					PatientInvestigationHeader patientInvestigationHeader = patientInvesHList
							.get(0);
					int invesHId = patientInvestigationHeader.getId();
					patientInvesDList = session.createCriteria(
							PatientInvestigationDetails.class).createAlias(
							"InvestigationHeader", "invesHId").add(
							Restrictions.eq("invesHId.Id", invesHId)).list();
				}

				// ----------list of referred department taken out from opd
				// patient details table--------

				OpdPatientDetails opdPatientDetails = (OpdPatientDetails) patientVisitDataList
						.get(0);
				String referredDept = opdPatientDetails.getReferredDept();
				if (!referredDept.equals("") && referredDept != null) {
					String[] dept = referredDept.split(",");
					for (int i = 0; i < dept.length; i++) {
						int deptId = Integer.parseInt(dept[i]);
						String deptName = "";
						Map<String, Object> deptMap = getDepartmentNameFromId(deptId);
						if (deptMap.get("deptName") != null) {
							deptName = (String) deptMap.get("deptName");
						}
						deptList.add(deptName);
					}
				}
			}
		}// -------------------------------End of code for referred
			// depatment---------------------
		catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("deptList", deptList);
		map.put("patientVisitDataList", patientVisitDataList);
		map.put("patientDiagnosisList", patientDiagnosisList);
		map.put("patientPrescDList", patientPrescDList);
		map.put("patientInvesDList", patientInvesDList);

		return map;
	}

	public Map<String, Object> showPatientPreviousHinNumber(
			Map<String, Object> mapForDS) {
		Session session = (Session) getSession();
		List<Visit> patientPreviousVisitList = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();

		String hinNo = (String) mapForDS.get("hinNo");
		// int visitNo=(Integer)mapForDS.get("visitNo");
		try {

			Criteria crit = session.createCriteria(Visit.class).createAlias(
					"Hin", "hin").add(Restrictions.eq("hin.HinNo", hinNo))
					.addOrder(Order.desc("VisitNo")).add(
							Restrictions.eq("VisitStatus", "C"));
			patientPreviousVisitList = crit.list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientPreviousVisitList", patientPreviousVisitList);

		return map;
	}

	public Map<String, Object> viewPreviousNextVisit(
			Map<String, Object> mapForDS) {
		Session session = (Session) getSession();
		List<Visit> visitList = new ArrayList<Visit>();
		int visitId = (Integer) mapForDS.get("visitId");
		int hinId = (Integer) mapForDS.get("hinId");

		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;

		String flag = "";
		if (mapForDS.get("flag") != null) {
			flag = (String) mapForDS.get("flag");
		}

		visitMaxIdList = session.createQuery(
				"select MAX(Id) from Visit where Status='y' and VisitStatus='C' and Hin.Id='"
						+ hinId + "'").list();

		if (visitMaxIdList.size() > 0) {
			max = (Integer) visitMaxIdList.get(0);
			mapForDS.put("max", max);
		}
		if (flag.equals("prev")) {
			Criteria crit = session.createCriteria(Visit.class).createAlias(
					"Hin", "p").add(Restrictions.eq("p.Id", hinId)).add(
					Restrictions.eq("VisitStatus", "C")).addOrder(
					Order.asc("Id"));
			visitList = crit.list();
		}
		if (flag.equals("next")) {
			Criteria crit = session.createCriteria(Visit.class).createAlias(
					"Hin", "p").add(Restrictions.eq("p.Id", hinId)).add(
					Restrictions.eq("VisitStatus", "C")).addOrder(
					Order.desc("Id"));
			visitList = crit.list();
		}

		mapForDS.put("visitList", visitList);

		return mapForDS;

	}

	public boolean addOpdTemplateDepartmentWise(Map<String, Object> infoMap) {
		OpdTemplateDepartmentWise opdTemplateDepartmentWise = new OpdTemplateDepartmentWise();
		boolean successfullyAdded = false;
		int visitId = 0;
		int hospitalId = 0;
		if (infoMap.get("opdTemplateDepartmentWise") != null) {
			opdTemplateDepartmentWise = (OpdTemplateDepartmentWise) infoMap
					.get("opdTemplateDepartmentWise");
		}

		if (infoMap.get("visitId") != null) {
			visitId = (Integer) infoMap.get("visitId");
		}
		//System.out.println("visitId--- in ds--->" + visitId);
		if (infoMap.get("hospitalId") != null) {
			hospitalId = (Integer) infoMap.get("hospitalId");
		}
		String referredDept = (String) infoMap.get("referredDept").toString();

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			hbt.save(opdTemplateDepartmentWise);

			Visit visitObjToUpdate = (Visit) hbt.load(Visit.class, visitId);
			visitObjToUpdate.setVisitStatus("w");
			hbt.update(visitObjToUpdate);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

			opdPatientDetails.setReferredDept(referredDept);

			MasHospital masHospital = (MasHospital) hbt.load(MasHospital.class,
					hospitalId);
			opdPatientDetails.setHospital(masHospital);

			opdPatientDetails.setVisit(visitObjToUpdate);
			hbt.save(opdPatientDetails);

			successfullyAdded = true;
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return successfullyAdded;

	}

	public Map<String, Object> viewOpdTemplateDepartmentWise(
			Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;
		int max = 0;
		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		List<OpdTemplateDepartmentWise> opdTemplateDepartmentWiseList = new ArrayList<OpdTemplateDepartmentWise>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {
			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}

			if (flag.equals("prev")) {

				visitNoForView = visitNo - 1;

			}

			else if (flag.equals("next")) {

				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}

			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0 && visitList != null) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				opdTemplateDepartmentWiseList = session.createCriteria(
						OpdTemplateDepartmentWise.class).createAlias("Visit",
						"v").add(Restrictions.eq("v.Id", visitId)).list();
				map.put("opdTemplateDepartmentWiseList",
						opdTemplateDepartmentWiseList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	public Map<String, Object> viewOpdTemplateDepartmentWisePreNext(
			Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;
		int max = 0;
		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		List<OpdTemplateDepartmentWise> opdTemplateDepartmentWiseList = new ArrayList<OpdTemplateDepartmentWise>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {
			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}

			if (flag.equals("prev")) {

				visitNoForView = visitNo - 1;

			}

			else if (flag.equals("next")) {

				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}

			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0 && visitList != null) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				opdTemplateDepartmentWiseList = session.createCriteria(
						OpdTemplateDepartmentWise.class).createAlias("Visit",
						"v").add(Restrictions.eq("v.Id", visitId)).list();
				map.put("opdTemplateDepartmentWiseList",
						opdTemplateDepartmentWiseList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	/**
	 * --------------------------------------------End of Methods For By
	 * Mansi-------------------------
	 * 
	 */

	/** start of methods by abha **/

	public Map<String, Object> viewGynaecology(Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdGynaecology> opdGynaecologyist = new ArrayList<OpdGynaecology>();
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {
			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin").add(
								Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				detailsMap = getPatientDetails(visitId);
				opdGynaecologyist = session
						.createCriteria(OpdGynaecology.class).createAlias(
								"Visit", "visit").add(
								Restrictions.eq("visit.Id", visitId)).list();
				map.put("opdGynaecologyist", opdGynaecologyist);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	public boolean submitComplaints(Map<String, Object> map) {
		OpdGynaecology opdGynaecology = new OpdGynaecology();
		List<OpdGynaecology> opdGynaeList = new ArrayList<OpdGynaecology>();
		int visitId = 0;
		int hinId = 0;
		int deptId = 0;
		int hospitalId = 0;
		int gynaeId = 0;
		float primaryInfertility = 0;
		float secondaryInfertility = 0;
		float hypomenorrhoea = 0;
		float oligomenorrhoea = 0;
		float hisrsutism = 0;
		float galactorrhoea = 0;
		String backache = "";
		String pruritisVulvae = "";
		String dysmenorrhoea = "";
		String leucorrhoea = "";
		String userName = "";
		Date date = null;
		String time = "";
		visitId = (Integer) map.get("visitId");
		hinId = (Integer) map.get("hinId");
		deptId = (Integer) map.get("deptId");
		hospitalId = (Integer) map.get("hospitalId");
		primaryInfertility = (Float) map.get("primaryInfertility");
		secondaryInfertility = (Float) map.get("secondaryInfertility");
		hypomenorrhoea = (Float) map.get("hypomenorrhoea");
		oligomenorrhoea = (Float) map.get("oligomenorrhoea");
		hisrsutism = (Float) map.get("hisrsutism");
		galactorrhoea = (Float) map.get("galactorrhoea");
		backache = (String) map.get("backache");
		pruritisVulvae = (String) map.get("pruritisVulvae");
		dysmenorrhoea = (String) map.get("dysmenorrhoea");
		leucorrhoea = (String) map.get("leucorrhoea");
		userName = (String) map.get("userName");
		date = (Date) map.get("date");
		time = (String) map.get("time");
		Session session;
		session = (Session) getSession();
		Criteria c = session.createCriteria(OpdGynaecology.class).add(
				Restrictions.eq("Visit.Id", visitId));
		opdGynaeList = c.list();
		boolean successfullyAdded = false;
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (opdGynaeList.size() > 0) {
				for (OpdGynaecology opd : opdGynaeList) {
					gynaeId = opd.getId();
				}
				OpdGynaecology opdGynaecology1 = (OpdGynaecology) getHibernateTemplate()
						.load(OpdGynaecology.class, gynaeId);
				opdGynaecology1.setPrimaryInfertility(primaryInfertility);
				opdGynaecology1.setSecondaryInfertility(secondaryInfertility);
				opdGynaecology1.setHypomenorrhoea(hypomenorrhoea);
				opdGynaecology1.setOligomenorrhoea(oligomenorrhoea);
				opdGynaecology1.setGalactorrhoea(galactorrhoea);
				opdGynaecology1.setHisrsutism(hisrsutism);
				opdGynaecology1.setLeucorrhoea(leucorrhoea);
				opdGynaecology1.setPruritisVulvae(pruritisVulvae);
				opdGynaecology1.setBackache(backache);
				opdGynaecology1.setDysmenorrhoea(dysmenorrhoea);
				opdGynaecology1.setLastChgBy(userName);
				opdGynaecology1.setLastChgDate(date);
				opdGynaecology1.setLastChgTime(time);
				hbt.update(opdGynaecology1);
				hbt.refresh(opdGynaecology1);
			} else {

				opdGynaecology.setPrimaryInfertility(primaryInfertility);
				opdGynaecology.setSecondaryInfertility(secondaryInfertility);
				opdGynaecology.setHypomenorrhoea(hypomenorrhoea);
				opdGynaecology.setOligomenorrhoea(oligomenorrhoea);
				opdGynaecology.setGalactorrhoea(galactorrhoea);
				opdGynaecology.setHisrsutism(hisrsutism);
				opdGynaecology.setLeucorrhoea(leucorrhoea);
				opdGynaecology.setPruritisVulvae(pruritisVulvae);
				opdGynaecology.setBackache(backache);
				opdGynaecology.setDysmenorrhoea(dysmenorrhoea);
				opdGynaecology.setLastChgBy(userName);
				opdGynaecology.setLastChgDate(date);
				opdGynaecology.setLastChgTime(time);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				opdGynaecology.setHospital(masHospital);

				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				opdGynaecology.setDepartment(masDepartment);

				if (visitId != 0) {
					Visit visit = new Visit();
					visit.setId(visitId);
					opdGynaecology.setVisit(visit);
				}
				if (hinId != 0) {
					Patient patient = new Patient();
					patient.setId(hinId);
					opdGynaecology.setHin(patient);
				}
				hbt.save(opdGynaecology);
			}
			successfullyAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;
	}

	public boolean submitSystemicExamination(Map<String, Object> map) {
		OpdGynaecology opdGynaecology = new OpdGynaecology();
		List<OpdGynaecology> opdGynaeList = new ArrayList<OpdGynaecology>();
		int visitId = 0;
		int hinId = 0;
		int deptId = 0;
		int hospitalId = 0;
		int gynaeId = 0;
		String otherSystems = "";
		String gynaecologicalExamination = "";
		String userName = "";
		Date date = null;
		String time = "";
		visitId = (Integer) map.get("visitId");
		hinId = (Integer) map.get("hinId");
		deptId = (Integer) map.get("deptId");
		hospitalId = (Integer) map.get("hospitalId");
		otherSystems = (String) map.get("otherSystems");
		gynaecologicalExamination = (String) map
				.get("gynaecologicalExamination");
		userName = (String) map.get("userName");
		date = (Date) map.get("date");
		time = (String) map.get("time");

		Session session;
		session = (Session) getSession();
		Criteria c = session.createCriteria(OpdGynaecology.class).add(
				Restrictions.eq("Visit.Id", visitId));
		opdGynaeList = c.list();
		boolean successfullyAdded = false;
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (opdGynaeList.size() > 0) {
				for (OpdGynaecology opd : opdGynaeList) {
					gynaeId = opd.getId();
				}
				OpdGynaecology opdGynaecology1 = (OpdGynaecology) getHibernateTemplate()
						.load(OpdGynaecology.class, gynaeId);
				opdGynaecology1.setOtherSystems(otherSystems);
				opdGynaecology1
						.setGynaecologicalExamination(gynaecologicalExamination);
				opdGynaecology1.setLastChgBy(userName);
				opdGynaecology1.setLastChgDate(date);
				opdGynaecology1.setLastChgTime(time);
				hbt.update(opdGynaecology1);
				hbt.refresh(opdGynaecology1);
			} else {

				opdGynaecology.setOtherSystems(otherSystems);
				opdGynaecology
						.setGynaecologicalExamination(gynaecologicalExamination);
				opdGynaecology.setLastChgBy(userName);
				opdGynaecology.setLastChgDate(date);
				opdGynaecology.setLastChgTime(time);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				opdGynaecology.setHospital(masHospital);

				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				opdGynaecology.setDepartment(masDepartment);

				if (visitId != 0) {
					Visit visit = new Visit();
					visit.setId(visitId);
					opdGynaecology.setVisit(visit);
				}
				if (hinId != 0) {
					Patient patient = new Patient();
					patient.setId(hinId);
					opdGynaecology.setHin(patient);
				}
				hbt.save(opdGynaecology);
			}
			successfullyAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;
	}

	public boolean submitGeneralExaminaton(Map<String, Object> map) {
		OpdGynaecology opdGynaecology = new OpdGynaecology();
		List<OpdGynaecology> opdGynaeList = new ArrayList<OpdGynaecology>();
		int visitId = 0;
		int hinId = 0;
		int deptId = 0;
		int hospitalId = 0;
		int gynaeId = 0;
		float height = 0;
		float weight = 0;
		String obesity = "";
		String acne = "";
		String hairDistribution = "";
		String breastDevelopment = "";
		String galactorrhoea = "";
		String pigmentation = "";
		String others = "";
		String userName = "";
		Date date = null;
		String time = "";
		visitId = (Integer) map.get("visitId");
		hinId = (Integer) map.get("hinId");
		deptId = (Integer) map.get("deptId");
		hospitalId = (Integer) map.get("hospitalId");
		height = (Float) map.get("height");
		weight = (Float) map.get("weight");
		obesity = (String) map.get("obesity");
		acne = (String) map.get("acne");
		hairDistribution = (String) map.get("hairDistribution");
		pigmentation = (String) map.get("pigmentation");
		galactorrhoea = (String) map.get("galactorrhoea");
		breastDevelopment = (String) map.get("breastDevelopment");
		others = (String) map.get("others");
		userName = (String) map.get("userName");
		date = (Date) map.get("date");
		time = (String) map.get("time");

		Session session;
		session = (Session) getSession();
		Criteria c = session.createCriteria(OpdGynaecology.class).add(
				Restrictions.eq("Visit.Id", visitId));
		opdGynaeList = c.list();
		boolean successfullyAdded = false;
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (opdGynaeList.size() > 0) {
				for (OpdGynaecology opd : opdGynaeList) {
					gynaeId = opd.getId();
				}
				OpdGynaecology opdGynaecology1 = (OpdGynaecology) getHibernateTemplate()
						.load(OpdGynaecology.class, gynaeId);
				opdGynaecology1.setHeight(height);
				opdGynaecology1.setWeight(weight);
				opdGynaecology1.setObesity(obesity);
				opdGynaecology1.setAcne(acne);
				opdGynaecology1.setHairDistribution(hairDistribution);
				opdGynaecology1.setBreastDevelopment(breastDevelopment);
				opdGynaecology1.setGalactorrhoeaText(galactorrhoea);
				opdGynaecology1.setPigmentation(pigmentation);
				opdGynaecology1.setOthers(others);
				opdGynaecology1.setLastChgBy(userName);
				opdGynaecology1.setLastChgDate(date);
				opdGynaecology1.setLastChgTime(time);

				hbt.update(opdGynaecology1);
				hbt.refresh(opdGynaecology1);
			} else {

				opdGynaecology.setHeight(height);
				opdGynaecology.setWeight(weight);
				opdGynaecology.setObesity(obesity);
				opdGynaecology.setAcne(acne);
				opdGynaecology.setHairDistribution(hairDistribution);
				opdGynaecology.setBreastDevelopment(breastDevelopment);
				opdGynaecology.setGalactorrhoeaText(galactorrhoea);
				opdGynaecology.setPigmentation(pigmentation);
				opdGynaecology.setOthers(others);
				opdGynaecology.setLastChgBy(userName);
				opdGynaecology.setLastChgDate(date);
				opdGynaecology.setLastChgTime(time);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				opdGynaecology.setHospital(masHospital);

				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				opdGynaecology.setDepartment(masDepartment);

				if (visitId != 0) {
					Visit visit = new Visit();
					visit.setId(visitId);
					opdGynaecology.setVisit(visit);
				}
				if (hinId != 0) {
					Patient patient = new Patient();
					patient.setId(hinId);
					opdGynaecology.setHin(patient);
				}
				hbt.save(opdGynaecology);
			}
			successfullyAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;
	}

	public boolean submitMedicalSurgicalHistory(Map<String, Object> map) {
		OpdGynaecology opdGynaecology = new OpdGynaecology();
		List<OpdGynaecology> opdGynaeList = new ArrayList<OpdGynaecology>();
		int visitId = 0;
		int hinId = 0;
		int deptId = 0;
		int hospitalId = 0;
		int gynaeId = 0;
		String pastMedicalHistory = "";
		String pastSurgicalHistory = "";
		String familyHistory = "";
		String userName = "";
		Date date = null;
		String time = "";
		visitId = (Integer) map.get("visitId");
		hinId = (Integer) map.get("hinId");
		deptId = (Integer) map.get("deptId");
		hospitalId = (Integer) map.get("hospitalId");

		pastMedicalHistory = (String) map.get("pastMedicalHistory");
		pastSurgicalHistory = (String) map.get("pastSurgicalHistory");
		familyHistory = (String) map.get("familyHistory");

		userName = (String) map.get("userName");
		date = (Date) map.get("date");
		time = (String) map.get("time");

		Session session;
		session = (Session) getSession();
		Criteria c = session.createCriteria(OpdGynaecology.class).add(
				Restrictions.eq("Visit.Id", visitId));
		opdGynaeList = c.list();
		boolean successfullyAdded = false;
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (opdGynaeList.size() > 0) {
				for (OpdGynaecology opd : opdGynaeList) {
					gynaeId = opd.getId();
				}
				OpdGynaecology opdGynaecology1 = (OpdGynaecology) getHibernateTemplate()
						.load(OpdGynaecology.class, gynaeId);
				opdGynaecology1.setPastMedicalHistory(pastMedicalHistory);
				opdGynaecology1.setPastSurgicalHistory(pastSurgicalHistory);
				opdGynaecology1.setFamilyHistory(familyHistory);
				opdGynaecology1.setLastChgBy(userName);
				opdGynaecology1.setLastChgDate(date);
				opdGynaecology1.setLastChgTime(time);

				hbt.update(opdGynaecology1);
				hbt.refresh(opdGynaecology1);
			} else {

				opdGynaecology.setPastMedicalHistory(pastMedicalHistory);
				opdGynaecology.setPastSurgicalHistory(pastSurgicalHistory);
				opdGynaecology.setFamilyHistory(familyHistory);
				opdGynaecology.setLastChgBy(userName);
				opdGynaecology.setLastChgDate(date);
				opdGynaecology.setLastChgTime(time);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				opdGynaecology.setHospital(masHospital);

				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				opdGynaecology.setDepartment(masDepartment);

				if (visitId != 0) {
					Visit visit = new Visit();
					visit.setId(visitId);
					opdGynaecology.setVisit(visit);
				}
				if (hinId != 0) {
					Patient patient = new Patient();
					patient.setId(hinId);
					opdGynaecology.setHin(patient);
				}
				hbt.save(opdGynaecology);
			}
			successfullyAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;
	}

	public boolean submitSocioEconomicHistory(Map<String, Object> map) {
		OpdGynaecology opdGynaecology = new OpdGynaecology();
		List<OpdGynaecology> opdGynaeList = new ArrayList<OpdGynaecology>();
		// int visitId=0;
		int hinId = 0;
		int deptId = 0;
		int hospitalId = 0;
		int gynaeId = 0;
		int inpatientId = 0;
		float menarchy = 0;
		String pastMc = "";
		String presentMc = "";
		String lmp = "";
		String pmp1 = "";
		String pmp2 = "";
		String obstetricHistory = "";
		String dyspareunia = "";
		String fertilePeriod = "";
		String conceive = "";
		String coitusPrWk = "";
		String userName = "";
		Date date = null;
		String time = "";
		// visitId =(Integer)map.get("visitId");
		inpatientId = (Integer) map.get("inpatientId");
		hinId = (Integer) map.get("hinId");
		deptId = (Integer) map.get("deptId");
		hospitalId = (Integer) map.get("hospitalId");
		menarchy = (Float) map.get("menarchy");
		pastMc = (String) map.get("pastMc");
		presentMc = (String) map.get("presentMc");
		lmp = (String) map.get("lmp");
		pmp1 = (String) map.get("pmp1");
		pmp2 = (String) map.get("pmp2");
		obstetricHistory = (String) map.get("obstetricHistory");
		dyspareunia = (String) map.get("dyspareunia");
		fertilePeriod = (String) map.get("fertilePeriod");
		conceive = (String) map.get("conceive");
		coitusPrWk = (String) map.get("coitusPrWk");
		userName = (String) map.get("userName");
		date = (Date) map.get("date");
		time = (String) map.get("time");
		Session session;
		session = (Session) getSession();
		/*
		 * Criteria c =
		 * session.createCriteria(OpdGynaecology.class).add(Restrictions
		 * .eq("Visit.Id", visitId));
		 */
		Criteria c = session.createCriteria(OpdGynaecology.class).add(
				Restrictions.eq("Inpatient.Id", inpatientId));
		opdGynaeList = c.list();
		boolean successfullyAdded = false;
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (opdGynaeList.size() > 0) {
				for (OpdGynaecology opd : opdGynaeList) {
					gynaeId = opd.getId();
				}
				OpdGynaecology opdGynaecology1 = (OpdGynaecology) getHibernateTemplate()
						.load(OpdGynaecology.class, gynaeId);
				opdGynaecology1.setMenarchy(menarchy);
				opdGynaecology1.setPastMc(pastMc);
				opdGynaecology1.setPresentMc(presentMc);
				opdGynaecology1.setLmp(lmp);
				opdGynaecology1.setPmp1(pmp1);
				opdGynaecology1.setPmp2(pmp2);
				opdGynaecology1.setObstetricHistory(obstetricHistory);
				opdGynaecology1.setDyspareunia(dyspareunia);
				opdGynaecology1.setAwarenessFertilePeriod(fertilePeriod);
				opdGynaecology1.setFrequencyCoitusWk(coitusPrWk);
				opdGynaecology1.setConceive(conceive);
				opdGynaecology1.setLastChgBy(userName);
				opdGynaecology1.setLastChgDate(date);
				opdGynaecology1.setLastChgTime(time);
				hbt.update(opdGynaecology1);
				hbt.refresh(opdGynaecology1);
			} else {
				opdGynaecology.setMenarchy(menarchy);
				opdGynaecology.setPastMc(pastMc);
				opdGynaecology.setPresentMc(presentMc);
				opdGynaecology.setLmp(lmp);
				opdGynaecology.setPmp1(pmp1);
				opdGynaecology.setPmp2(pmp2);
				opdGynaecology.setObstetricHistory(obstetricHistory);
				opdGynaecology.setDyspareunia(dyspareunia);
				opdGynaecology.setAwarenessFertilePeriod(fertilePeriod);
				opdGynaecology.setFrequencyCoitusWk(coitusPrWk);
				opdGynaecology.setConceive(conceive);
				opdGynaecology.setLastChgBy(userName);
				opdGynaecology.setLastChgDate(date);
				opdGynaecology.setLastChgTime(time);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				opdGynaecology.setHospital(masHospital);

				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				opdGynaecology.setDepartment(masDepartment);

				/*
				 * if(visitId !=0){ Visit visit = new Visit();
				 * visit.setId(visitId); opdGynaecology.setVisit(visit); }
				 */
				if (inpatientId != 0) {
					Inpatient inpatient = new Inpatient();
					inpatient.setId(inpatientId);
					opdGynaecology.setInpatient(inpatient);
				}
				if (hinId != 0) {
					Patient patient = new Patient();
					patient.setId(hinId);
					opdGynaecology.setHin(patient);
				}
				hbt.save(opdGynaecology);
			}
			successfullyAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;
	}

	public boolean submitAllDetailsLabourRoom(Map<String, Object> map) {
		OpdGynaecology opdGynaecology = new OpdGynaecology();
		List<OpdGynaecology> opdGynaeList = new ArrayList<OpdGynaecology>();
		// int visitId=0;
		int hinId = 0;
		int deptId = 0;
		int hospitalId = 0;
		int gynaeId = 0;
		int inpatientId = 0;
		float menarchy = 0;
		String pastMc = "";
		String presentMc = "";
		String lmp = "";
		String pmp1 = "";
		String pmp2 = "";
		String obstetricHistory = "";
		String dyspareunia = "";
		String fertilePeriod = "";
		String conceive = "";
		String coitusPrWk = "";
		String userName = "";
		Date date = null;
		String time = "";
		/* Complaints Details */
		float primaryInfertility = 0;
		float secondaryInfertility = 0;
		float hypomenorrhoea = 0;
		float oligomenorrhoea = 0;
		float hisrsutism = 0;
		float galactorrhoea = 0;
		String backache = "";
		String pruritisVulvae = "";
		String dysmenorrhoea = "";
		String leucorrhoea = "";
		hinId = (Integer) map.get("hinId");
		deptId = (Integer) map.get("deptId");
		hospitalId = (Integer) map.get("hospitalId");
		primaryInfertility = (Float) map.get("primaryInfertility");
		secondaryInfertility = (Float) map.get("secondaryInfertility");
		hypomenorrhoea = (Float) map.get("hypomenorrhoea");
		oligomenorrhoea = (Float) map.get("oligomenorrhoea");
		hisrsutism = (Float) map.get("hisrsutism");
		galactorrhoea = (Float) map.get("galactorrhoea");
		backache = (String) map.get("backache");
		pruritisVulvae = (String) map.get("pruritisVulvae");
		dysmenorrhoea = (String) map.get("dysmenorrhoea");
		leucorrhoea = (String) map.get("leucorrhoea");
		/* Complaints Details End */

		/* Medical/Surgical History Details */
		String pastMedicalHistory = "";
		String pastSurgicalHistory = "";
		String familyHistory = "";

		pastMedicalHistory = (String) map.get("pastMedicalHistory");
		pastSurgicalHistory = (String) map.get("pastSurgicalHistory");
		familyHistory = (String) map.get("familyHistory");
		/* Medical/Surgical History Details End */

		/* General Examination Details */
		float height = 0;
		float weight = 0;
		String obesity = "";
		String acne = "";
		String hairDistribution = "";
		String breastDevelopment = "";
		String galactorrhoeaText = "";
		String pigmentation = "";
		String others = "";

		height = (Float) map.get("height");
		weight = (Float) map.get("weight");
		obesity = (String) map.get("obesity");
		acne = (String) map.get("acne");
		hairDistribution = (String) map.get("hairDistribution");
		pigmentation = (String) map.get("pigmentation");
		galactorrhoeaText = (String) map.get("galactorrhoeaText");
		breastDevelopment = (String) map.get("breastDevelopment");
		others = (String) map.get("others");
		/* General Examination Details End */

		/* Systemic Examination Details */
		String otherSystems = "";
		String gynaecologicalExamination = "";
		otherSystems = (String) map.get("otherSystems");
		gynaecologicalExamination = (String) map
				.get("gynaecologicalExamination");
		/* Systemic Examination Details End */

		// visitId =(Integer)map.get("visitId");
		inpatientId = (Integer) map.get("inpatientId");
		hinId = (Integer) map.get("hinId");
		deptId = (Integer) map.get("deptId");
		hospitalId = (Integer) map.get("hospitalId");
		menarchy = (Float) map.get("menarchy");
		pastMc = (String) map.get("pastMc");
		presentMc = (String) map.get("presentMc");
		lmp = (String) map.get("lmp");
		pmp1 = (String) map.get("pmp1");
		pmp2 = (String) map.get("pmp2");
		obstetricHistory = (String) map.get("obstetricHistory");
		dyspareunia = (String) map.get("dyspareunia");
		fertilePeriod = (String) map.get("fertilePeriod");
		conceive = (String) map.get("conceive");
		coitusPrWk = (String) map.get("coitusPrWk");
		userName = (String) map.get("userName");
		date = (Date) map.get("date");
		time = (String) map.get("time");
		Session session;
		session = (Session) getSession();
		/*
		 * Criteria c =
		 * session.createCriteria(OpdGynaecology.class).add(Restrictions
		 * .eq("Visit.Id", visitId));
		 */
		Criteria c = session.createCriteria(OpdGynaecology.class).add(
				Restrictions.eq("Inpatient.Id", inpatientId));
		opdGynaeList = c.list();
		boolean successfullyAdded = false;
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (opdGynaeList.size() > 0) {
				for (OpdGynaecology opd : opdGynaeList) {
					gynaeId = opd.getId();
				}
				OpdGynaecology opdGynaecology1 = (OpdGynaecology) getHibernateTemplate()
						.load(OpdGynaecology.class, gynaeId);
				opdGynaecology1.setMenarchy(menarchy);
				opdGynaecology1.setPastMc(pastMc);
				opdGynaecology1.setPresentMc(presentMc);
				opdGynaecology1.setLmp(lmp);
				opdGynaecology1.setPmp1(pmp1);
				opdGynaecology1.setPmp2(pmp2);
				opdGynaecology1.setObstetricHistory(obstetricHistory);
				opdGynaecology1.setDyspareunia(dyspareunia);
				opdGynaecology1.setAwarenessFertilePeriod(fertilePeriod);
				opdGynaecology1.setFrequencyCoitusWk(coitusPrWk);
				opdGynaecology1.setConceive(conceive);

				opdGynaecology1.setPrimaryInfertility(primaryInfertility);
				opdGynaecology1.setSecondaryInfertility(secondaryInfertility);
				opdGynaecology1.setHypomenorrhoea(hypomenorrhoea);
				opdGynaecology1.setOligomenorrhoea(oligomenorrhoea);
				opdGynaecology1.setGalactorrhoea(galactorrhoea);
				opdGynaecology1.setHisrsutism(hisrsutism);
				opdGynaecology1.setLeucorrhoea(leucorrhoea);
				opdGynaecology1.setPruritisVulvae(pruritisVulvae);
				opdGynaecology1.setBackache(backache);
				opdGynaecology1.setDysmenorrhoea(dysmenorrhoea);

				opdGynaecology1.setPastMedicalHistory(pastMedicalHistory);
				opdGynaecology1.setPastSurgicalHistory(pastSurgicalHistory);
				opdGynaecology1.setFamilyHistory(familyHistory);

				opdGynaecology1.setHeight(height);
				opdGynaecology1.setWeight(weight);
				opdGynaecology1.setObesity(obesity);
				opdGynaecology1.setAcne(acne);
				opdGynaecology1.setHairDistribution(hairDistribution);
				opdGynaecology1.setBreastDevelopment(breastDevelopment);
				opdGynaecology1.setGalactorrhoeaText(galactorrhoeaText);
				opdGynaecology1.setPigmentation(pigmentation);
				opdGynaecology1.setOthers(others);

				opdGynaecology1.setOtherSystems(otherSystems);
				opdGynaecology1
						.setGynaecologicalExamination(gynaecologicalExamination);

				opdGynaecology1.setLastChgBy(userName);
				opdGynaecology1.setLastChgDate(date);
				opdGynaecology1.setLastChgTime(time);
				hbt.update(opdGynaecology1);
				hbt.refresh(opdGynaecology1);
			} else {
				opdGynaecology.setMenarchy(menarchy);
				opdGynaecology.setPastMc(pastMc);
				opdGynaecology.setPresentMc(presentMc);
				opdGynaecology.setLmp(lmp);
				opdGynaecology.setPmp1(pmp1);
				opdGynaecology.setPmp2(pmp2);
				opdGynaecology.setObstetricHistory(obstetricHistory);
				opdGynaecology.setDyspareunia(dyspareunia);
				opdGynaecology.setAwarenessFertilePeriod(fertilePeriod);
				opdGynaecology.setFrequencyCoitusWk(coitusPrWk);
				opdGynaecology.setConceive(conceive);

				opdGynaecology.setPrimaryInfertility(primaryInfertility);
				opdGynaecology.setSecondaryInfertility(secondaryInfertility);
				opdGynaecology.setHypomenorrhoea(hypomenorrhoea);
				opdGynaecology.setOligomenorrhoea(oligomenorrhoea);
				opdGynaecology.setGalactorrhoea(galactorrhoea);
				opdGynaecology.setHisrsutism(hisrsutism);
				opdGynaecology.setLeucorrhoea(leucorrhoea);
				opdGynaecology.setPruritisVulvae(pruritisVulvae);
				opdGynaecology.setBackache(backache);
				opdGynaecology.setDysmenorrhoea(dysmenorrhoea);

				opdGynaecology.setPastMedicalHistory(pastMedicalHistory);
				opdGynaecology.setPastSurgicalHistory(pastSurgicalHistory);
				opdGynaecology.setFamilyHistory(familyHistory);

				opdGynaecology.setHeight(height);
				opdGynaecology.setWeight(weight);
				opdGynaecology.setObesity(obesity);
				opdGynaecology.setAcne(acne);
				opdGynaecology.setHairDistribution(hairDistribution);
				opdGynaecology.setBreastDevelopment(breastDevelopment);
				opdGynaecology.setGalactorrhoeaText(galactorrhoeaText);
				opdGynaecology.setPigmentation(pigmentation);
				opdGynaecology.setOthers(others);

				opdGynaecology.setOtherSystems(otherSystems);
				opdGynaecology
						.setGynaecologicalExamination(gynaecologicalExamination);

				opdGynaecology.setLastChgBy(userName);
				opdGynaecology.setLastChgDate(date);
				opdGynaecology.setLastChgTime(time);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				opdGynaecology.setHospital(masHospital);

				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				opdGynaecology.setDepartment(masDepartment);

				/*
				 * if(visitId !=0){ Visit visit = new Visit();
				 * visit.setId(visitId); opdGynaecology.setVisit(visit); }
				 */
				if (inpatientId != 0) {
					Inpatient inpatient = new Inpatient();
					inpatient.setId(inpatientId);
					opdGynaecology.setInpatient(inpatient);
				}
				if (hinId != 0) {
					Patient patient = new Patient();
					patient.setId(hinId);
					opdGynaecology.setHin(patient);
				}
				hbt.save(opdGynaecology);
			}
			successfullyAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;
	}

	public Map<String, Object> showUploadingDocumentsJsp(int visitId, int inpatientId,Map<String, Object> mapForDS){
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List<Inpatient> inpatientList=new ArrayList<Inpatient>();
		Map<String, Object> map = new HashMap<String, Object>();
		String reportingFor = "";
		if(mapForDS.get("reportingFor") != null){
			reportingFor = (String)mapForDS.get("reportingFor");
		}
		try {
			
			if(visitId!=0){
				if(!reportingFor.equals("") && reportingFor.equalsIgnoreCase("FamilyWC"))
				{
					patientDataList = session.createCriteria(Visit.class).
					add(Restrictions.eq("ReportingFor", "FamilyWC")).
					add(Restrictions.eq("Id", visitId)).list();
				}else{
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();
				}

			}else if(inpatientId!=0){
				inpatientList = session.createCriteria(Inpatient.class).add(
						Restrictions.eq("Id", inpatientId)).list();

			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		map.put("inpatientList", inpatientList);
		return map;
	}
	
	public Map<String, Object> getPsychiatristQaHeading(Map<String, Object> mapForDS){
		Session session = (Session) getSession();
		List<OpdQaMaster> questionnaireDataList = null;
		List<OpdQaTransation > questionnaireTransactionList1 = null;
		List<List<OpdQaTransation>>questionnaireTransactionList = null;
		List<MasQuestionHeading > quesHeadingList = null;
		List<Inpatient> inpatientList=new ArrayList<Inpatient>();
		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		int deptId = 0;
		String reportingFor = "";
		Box box = (Box) mapForDS.get("box");
		Criteria crit =null;
		/*if(mapForDS.get("reportingFor") != null){
			reportingFor = (String)mapForDS.get("reportingFor");
		}*/
		try {
			String departmentCodeForPhychiatrist = HMSUtil.getProperties("adt.properties", "departmentCodeForPhychiatrist");
			
			visitId =  box.getInt("visitId");
			deptId = box.getInt(DEPARTMENT_ID);
			
		
			
			if(visitId!=0){
				questionnaireDataList = session.createCriteria(OpdQaMaster.class)
					//.createAlias("Department", "dept")
					//.add(Restrictions.eq("dept.Id", deptId))
				//	.add(Restrictions.eq("dept.DepartmentCode", departmentCodeForPhychiatrist))
				.list();

				questionnaireTransactionList1 = session.createCriteria(OpdQaTransation.class)
				.createAlias("Department", "dept")
				.createAlias("Question", "qaMas")
					.createAlias("qaMas.QuestionHeading", "qaHeading")
				.add(Restrictions.eq("dept.Id", deptId))
				.add(Restrictions.eq("Visit.Id", visitId))
				.list();
				
				
				List<Integer> savedHeadingId = session.createCriteria(OpdQaTransation.class)    
						.createAlias("Question", "qaMas")
							.createAlias("qaMas.QuestionHeading", "qaHeading")
						.add(Restrictions.eq("Visit.Id", visitId))  
	                    .setProjection(Projections.projectionList()
	                            .add(Projections.groupProperty("qaHeading.Id"))
	                                     
	                    ).list();
				
				
				if(questionnaireTransactionList1.size() >0)
				{
					questionnaireTransactionList = new ArrayList<List<OpdQaTransation>>();
				List<OpdQaTransation> opQAList =  null;
				for(int i : savedHeadingId)
				{
					opQAList =  new ArrayList<OpdQaTransation>();
					for( OpdQaTransation qaTrans:questionnaireTransactionList1)
					{
						 if(qaTrans.getQuestion().getQuestionHeading().getId()==i)
							 opQAList.add(qaTrans);
					}
					questionnaireTransactionList.add(opQAList);
				 }
				}
				  crit=  session.createCriteria(MasQuestionHeading.class)
				          .add(Restrictions.eq("Status", "y"));
				  if(savedHeadingId.size()>0)
					  crit.add(Restrictions.not(Restrictions.in("Id", savedHeadingId)));
					quesHeadingList = crit.list();
			
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("questionnaireList", questionnaireDataList);
		map.put("questionnaireTransactionList", questionnaireTransactionList);
		map.put("quesHeadingList", quesHeadingList);
		return map;
	}
	
	public Map<String, Object> getPsychiatristQuestionnaire(Map<String, Object> mapForDS){
		Session session = (Session) getSession();
		List<OpdQaMaster> questionnaireDataList = null;
		List<MasQaOptionValue> optionValueList = null;
		List<OpdQaTransation > questionnaireTransactionList = null;
		List<MasQuestionHeading > quesHeadingList = null;
		
		
		//List<Inpatient> inpatientList=new ArrayList<Inpatient>();
		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		int deptId = 0;
		String reportingFor = "";
		Box box = (Box) mapForDS.get("box");
		int headingId = 0;
		
		/*if(mapForDS.get("reportingFor") != null){
			reportingFor = (String)mapForDS.get("reportingFor");
		}*/
		try {
			String departmentCodeForPhychiatrist = HMSUtil.getProperties("adt.properties", "departmentCodeForPhychiatrist");
			
			visitId =  box.getInt("visitId");
			deptId = box.getInt(DEPARTMENT_ID);
			if(box.get("headingId")!=null)
				headingId = box.getInt("headingId");
		
			
			if(visitId!=0){
				questionnaireDataList = session.createCriteria(OpdQaMaster.class)
						.add(Restrictions.eq("QuestionHeading.Id", headingId))
							.add(Restrictions.eq("Status", "y"))
					//.createAlias("Department", "dept")
					//.add(Restrictions.eq("dept.Id", deptId))
				//	.add(Restrictions.eq("dept.DepartmentCode", departmentCodeForPhychiatrist))
				.list();
				
				
				optionValueList =  session.createCriteria(MasQaOptionValue.class)
						.add(Restrictions.eq("Status", "y"))
						.add(Restrictions.in("Question", questionnaireDataList)).list();
				System.out.println("optionValueList"+optionValueList.size());
				
			
				questionnaireTransactionList = session.createCriteria(OpdQaTransation.class)
				.createAlias("Department", "dept")
				.add(Restrictions.eq("dept.Id", deptId))
				.add(Restrictions.eq("Visit.Id", visitId)).list();

				quesHeadingList =  session.createCriteria(MasQuestionHeading.class)
				.add(Restrictions.eq("Status", "y"))
					.list();
				
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("questionnaireList", questionnaireDataList);
		map.put("optionValueList", optionValueList);
		map.put("questionnaireTransactionList", questionnaireTransactionList);
		map.put("quesHeadingList", quesHeadingList);
		return map;
	}

	public Map<String, Object> submitPsychiatristQuestionnaire(Map<String, Object> mapForDS) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		/*List<UploadDocuments> uploadDocumentsList = new ArrayList<UploadDocuments>();*/
		List<OpdQaTransation > questionnaireTransactionList = new ArrayList<OpdQaTransation>();
		Box box = (Box)mapForDS.get("box");
		int hospitalId = box.getInt(HOSPITAL_ID);
		int userId = box.getInt(USER_ID);
		int visitId = 0;
		int deptId = 0;
		boolean dataSaved =false;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		   List<Integer> qaMasIdList = new ArrayList<Integer>();
		    List<Integer> answerList = new ArrayList<Integer>();
		    Transaction tx=session.beginTransaction();
		    
		    Visit visit = new Visit();
			MasDepartment masDept = new MasDepartment();
			MasQaOptionValue masOption = new MasQaOptionValue();
		try {
			visitId =  box.getInt("visitId");
			deptId = box.getInt(DEPARTMENT_ID);
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			
			 hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
        
			   qaMasIdList =(List<Integer>) mapForDS.get("qaMasIdList");
			   answerList =(List<Integer>) mapForDS.get("answerList");
			   
				/*questionnaireTransactionList = session.createCriteria(OpdQaTransation.class)
						.createAlias("Department", "dept")
						.add(Restrictions.eq("dept.Id", deptId))
						.add(Restrictions.eq("Visit.Id", visitId)).list();*/
				int j=0;
				   for(int i:qaMasIdList)
				   {
					 
					   boolean idFound = false;
					   OpdQaTransation qaT = null;
					   visit.setId(visitId);
					   masDept.setId(deptId);
					   
					/*   for(OpdQaTransation aqT: questionnaireTransactionList)
					   {
						   if(aqT.getQuestion().getId() == i)
						   {
							   idFound =true;
							   i= aqT.getId();
							   break;
						   }
						     
					   }
					   
					     if(idFound)
					    	 qaT = (OpdQaTransation) hbt.load(OpdQaTransation.class, i);
					     else*/
					        qaT = new OpdQaTransation();
					     
					   OpdQaMaster qaMAs = new OpdQaMaster();
					   qaMAs.setId(qaMasIdList.get(j));
					   
					   qaT.setQuestion(qaMAs);
					   masOption.setId(answerList.get(j));
					  qaT.setAnswerOption(masOption);
					   qaT.setVisit(visit);
					   qaT.setDepartment(masDept);
						 hbt.saveOrUpdate(qaT);
					  
					   j++;
				   }
				
			    tx.commit();
			   if(j>0)
			    dataSaved =true;
			   session.clear();
            }
		catch (Exception e) {
			e.printStackTrace();
		}
		
		map.put("dataSaved",dataSaved);
		return map;

	}
	
	public Map<String, Object> submitUploadDocuments(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<UploadDocuments> uploadDocumentsList = new ArrayList<UploadDocuments>();
		String fileName = null;
		String fileExtension = null;
		String patientName = box.getString("patientName");
		String age = box.getString("age");
		String sex = box.getString("sex");
		String hinNo = box.getString("hinNo");
		String address = box.getString("address");
		String hin_no = box.getString("hin_no");

		int hinId = box.getInt("hinId");
		int inpatientId = box.getInt("inpatientId");
		int hospitalId = box.getInt("hospitalId");
		int userId = box.getInt(USER_ID);

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
		
		int uploadCount = box.getInt("uploadCount");
		String uploadURL = box.getString("uploadURL");
		String fileSeparator = box.getString("fileSeparator");
		try {
			HibernateTemplate hbt = getHibernateTemplate();
			 hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
           /* List uploadDocumentList = session.createCriteria(UploadDocuments.class).add(Restrictions.eq("FileName", hin_no)).list();
            if(uploadDocumentList.size()==0)
            {
            	UploadDocuments uploadDocuments = new UploadDocuments();
				//String dataInput = new String(bytes);
				//uploadDocuments.setPatientDocument(bytes);
				//uploadDocuments.setPatientDocument(is.toString());
				uploadDocuments.setPatientName(patientName);
				uploadDocuments.setSex(sex);
				uploadDocuments.setAge(age);
				if (address != null)
				uploadDocuments.setAddress(address);
				uploadDocuments.setFileExtension(fileExtension);
				uploadDocuments.setFileName(hin_no);

				if (hinId != 0) {
					Patient patient = new Patient();
					patient.setId(hinId);
					uploadDocuments.setHin(patient);
				}
				if (inpatientId != 0) {
					Inpatient inpatient = new Inpatient();
					inpatient.setId(inpatientId);
					uploadDocuments.setInpatient(inpatient);
				}
				uploadDocuments.setUploadDate(date);
				uploadDocuments.setLastChgDate(date);
				uploadDocuments.setLastChgTime(time);
				uploadDocuments.setLastChgBy(userName);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				uploadDocuments.setHospital(masHospital);
				hbt.save(uploadDocuments);
            }*/
			// hbt.setFetchSize(16*1024*1024);
			if(uploadCount>0){
				for (int i = 1; i <= uploadCount; i++) {
					UploadDocuments uploadDocuments = new UploadDocuments();
					File file=null;
					file = new File(uploadURL+fileSeparator+hin_no +fileSeparator+box.getString("filename"+i));

					File f = new File(uploadURL);
					try {
						if (f.exists()) {
							f.delete();
							f.mkdir();
							FileInputStream is = new FileInputStream(file);
							long length = file.length();
							
							if (length > Integer.MAX_VALUE) {
								// File is too large
							}
							// Create the byte array to hold the data
							byte[] bytes = new byte[(int)length];
							int offset = 0;
							int numRead = 0;
							while (offset < bytes.length
									&& (numRead=is.read(bytes, offset, bytes.length-offset)) >= 0) {
								offset += numRead;
							}

							if (offset < bytes.length) {
								throw new IOException("Could not completely read file "+file.getName());
							}
						
							uploadDocuments.setPatientDocument(bytes);
							is.close();
						} else {
							f.mkdir();
							FileInputStream is = new FileInputStream(file);
							long length = file.length();
							//ByteBuffer byteBuff=null;
							//  int modLength=length/
							if (length > Integer.MAX_VALUE) {
								// File is too large
							}
							// Create the byte array to hold the data
							byte[] bytes = new byte[(int)length];
							int offset = 0;
							int numRead = 0;
							while (offset < bytes.length
									&& (numRead=is.read(bytes, offset, bytes.length-offset)) >= 0) {
								offset += numRead;
							}

							if (offset < bytes.length) {
								throw new IOException("Could not completely read file "+file.getName());
							}
							is.close();
							
							uploadDocuments.setPatientDocument(bytes);
						}
						
						//fileExtension=strToken.nextToken();

					} catch (Exception e) {
						e.printStackTrace();
					}
					
					StringTokenizer strToken = new StringTokenizer(box
							.getString("filename" + i), ".");

					fileName = strToken.nextToken();
					fileExtension = strToken.nextToken();
					
					uploadDocuments.setPatientName(patientName);
					uploadDocuments.setSex(sex);
					uploadDocuments.setAge(age);
					if (address != null)
						uploadDocuments.setAddress(address);
					uploadDocuments.setFileExtension(fileExtension);
					uploadDocuments.setFileName(fileName);

					if (hinId != 0) {
						Patient patient = new Patient();
						patient.setId(hinId);
						uploadDocuments.setHin(patient);
					}
					if (box.getInt("visitId") != 0) {
						Visit visit= new Visit();
						visit.setId(box.getInt("visitId"));
						uploadDocuments.setVisit(visit);
					}
					if (inpatientId != 0) {
						Inpatient inpatient = new Inpatient();
						inpatient.setId(inpatientId);
						uploadDocuments.setInpatient(inpatient);
					}
					
					if (userId != 0) {
						Users user = new Users();
						user.setId(userId);
						uploadDocuments.setLastChgBy(user);
					}
					
					uploadDocuments.setDescription(box.getString("description"
							+ i));
					uploadDocuments.setUploadDate(date);
					uploadDocuments.setLastChgDate(date);
					uploadDocuments.setLastChgTime(time);
				
					MasHospital masHospital = new MasHospital();
					masHospital.setId(hospitalId);
					uploadDocuments.setHospital(masHospital);
					hbt.save(uploadDocuments);

					//file.delete();
				}// end of 'IF'

			}// end of 'for' loop
		    map.put("dataSaved", true);
            }// end of 'try' loop
		catch (Exception e) {
			//System.out.println("File not Saved....................");
			System.err.println("Error: " + e.getMessage());
			e.printStackTrace();
			map.put("dataSaved", false);
		}
		
		return map;

	}

	public Map<String, Object> viewPatientDetails(Map<String, Object> map) {
		Session session = (Session) getSession();

		Map<String, Object> returnMap = new HashMap<String, Object>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<Patient> patientList = new ArrayList<Patient>();
		List<Inpatient> inpatientList = new ArrayList<Inpatient>();
		List<Visit> visitList = new ArrayList<Visit>();

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		int visitId = 0;
		if(map.get("visitId")!=null){
			visitId = (Integer)map.get("visitId");
		}
		String inputField = (String) map.get("inputField");
		String flag = (String) map.get("flag");
		String flag1 = (String) map.get("flag1");
		String message = null;
		String destUploadURL = "";
		if(map.get("destUploadURL")!=null && !map.get("destUploadURL").equals(""))
		{
			destUploadURL=(String)map.get("destUploadURL");
		}
		Criteria criteria = null;
		
		if (flag.equals("upload") && !flag1.equals("viewDocuments")) {
			patientList = session.createCriteria(Patient.class).add(
					Restrictions.eq("Status", "y")).add(
					Restrictions.eq("HinNo", inputField)).list();

			if (patientList.size() == 0) {
				inpatientList = session.createCriteria(Inpatient.class).add(
					//	Restrictions.eq("Status", "y")).add(
						Restrictions.eq("AdNo", inputField)).list();
			}

			if (visitList.size() == 0 && inpatientList.size() == 0
					&& patientList.size() == 0) {
				message = "No record Found !!";
			}
			map.put("message", message);
			map.put("patientList", patientList);
			map.put("inpatientList", inpatientList);

		} else if (flag.equals("view") || flag1.equals("viewDocuments")) {
			String uploadURL = (String) map.get("uploadURL");
			patientList = session.createCriteria(UploadDocuments.class)
					.createAlias("Hin", "p").add(
							Restrictions.eq("p.HinNo", inputField)).add(Restrictions.isNull("Inpatient")).list();
			if (patientList.size() == 0) {
				inpatientList = session.createCriteria(UploadDocuments.class)
						.createAlias("Inpatient", "ip").add(
								Restrictions.eq("ip.AdNo", inputField)).list();
			}

			if (inpatientList.size() == 0 && patientList.size() == 0) {
				message = "No record Found !!";
			}
		
			map.put("message", message);
			if(patientList.size() > 0){
			map.put("patientList", patientList);
			}
			if(inpatientList.size() > 0){
			map.put("inpatientList", inpatientList);
			}
			/**
			 * Commented By Ritu as it is not required for view documents
			 */
			/*String[] files = null;
			if (patientList.size() > 0) {
				files = new String[patientList.size()];
				Iterator iterator = patientList.iterator();
				int counter = 0;
				while (iterator.hasNext()) {
					UploadDocuments uploadDocuments = (UploadDocuments) iterator
							.next();
					files[counter] = uploadDocuments.getFileName() + "."
							+ uploadDocuments.getFileExtension();
					// //System.out.println("filename="+files[counter]);
					try {
						FileOutputStream is = new FileOutputStream(destUploadURL
								+ uploadDocuments.getFileName() + "."
								+ uploadDocuments.getFileExtension());
						is.write(out);
						is.flush(); 
						is.close();
						HMSUtil.copyCompletlyFolder(new File(uploadURL),new File(destUploadURL));
						
					
					} catch (Exception e) {
						e.printStackTrace();
					}
					counter++;
				}

			}
			if (inpatientList.size() > 0) {
				files = new String[inpatientList.size()];
				Iterator iterator = inpatientList.iterator();
				int counter = 0;
				while (iterator.hasNext()) {
					UploadDocuments uploadDocuments = (UploadDocuments) iterator
							.next();
					files[counter] = uploadDocuments.getFileName() + "."
							+ uploadDocuments.getFileExtension();
					try {
						FileOutputStream is = new FileOutputStream(uploadURL
								 + files[counter]);
						

						is.write(uploadDocuments.getPatientDocument());
						is.flush();
						is.close();
						File srcFile=new File(uploadURL+uploadDocuments.getFileName() + "."
								+ uploadDocuments.getFileExtension());
						File destFile = new File(destUploadURL
								+ uploadDocuments.getFileName() + "."
								+ uploadDocuments.getFileExtension());
						
						HMSUtil.copyfile(srcFile , destFile);
					} catch (FileNotFoundException e) {
						e.printStackTrace();
					} catch (IOException e) {
						e.printStackTrace();
					}
					counter++;
				}
			}*/

		}

		/*
		 * //System.out.println("IN DATA SERVICE
		 * patientList="+patientList.size()); //System.out.println("IN DATA
		 * SERVICE inpatientList="+inpatientList.size());
		 */
		return map;

	}

	public Map<String, Object> checkItem(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (dataMap.get("visitId") != null) {
			visitId = Integer.parseInt("" + dataMap.get("visitId"));
		}
		String pvmsNo = "";
		if (dataMap.get("pvmsNo") != null) {
			pvmsNo = "" + dataMap.get("pvmsNo");
		}

		Properties properties = new Properties();
		URL resourcePath = Thread.currentThread().getContextClassLoader()
				.getResource("adt.properties");
		try {
			properties.load(resourcePath.openStream());
		} catch (Exception e) {
			e.printStackTrace();
		}
		Session session = (Session) getSession();
		List<PatientAllergicDrugsDt> patientAllergicDrugsDtList = new ArrayList<PatientAllergicDrugsDt>();
		patientAllergicDrugsDtList = (List<PatientAllergicDrugsDt>) session
				.createCriteria(PatientAllergicDrugsDt.class).createAlias(
						"PatientAllergicDrugsHd", "pHd").createAlias(
						"pHd.Visit", "v").add(Restrictions.eq("v.Id", visitId))
				.createAlias("Item", "it").add(
						Restrictions.eq("it.PvmsNo", pvmsNo)).list();
		map.put("patientAllergicDrugsDtList", patientAllergicDrugsDtList);
		return map;
	}

	/**
	 * 
	 * start of methods of opdUpdateDetails BY Shailesh
	 * 
	 */
	@SuppressWarnings("unchecked")
	public List<Patient> getPatientNameForUpadteOpdDetails(
			Map<String, Object> map) {
		List<Patient> patientList = new ArrayList<Patient>();
		String serviceNo = "";
		Session session = (Session) getSession();
		try {
			if (map.get("serviceNo") != null) {
				serviceNo = (String) map.get("serviceNo");

			}
			patientList = session.createCriteria(Patient.class).add(
					Restrictions.eq("ServiceNo", serviceNo)).add(
					Restrictions.eq("PatientStatus", "Out Patient")).list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientList", patientList);
		return patientList;
	}

	@SuppressWarnings("unchecked")
	public List<Visit> getVisitNo(int hinId) {
		Session session = (Session) getSession();
		List<Visit> visitNoList = new ArrayList<Visit>();
		@SuppressWarnings("unused")
		Visit visit = new Visit();
		visitNoList = session.createCriteria(Visit.class).createAlias("Hin",
				"p").add(Restrictions.eq("p.Id", hinId)).addOrder(
				Order.desc("VisitNo")).add(Restrictions.eq("VisitStatus", "C"))
				.list();

		return visitNoList;
	}

public Map<String, Object> getPatientOpdDetails(Map<String, Object> dataMap) {
	
		int visitNo=0;
		int hinId = 0;
		String Nodatafound="yes";
		int current_visitNo=0;
		Map<String, Object> map = new HashMap<String, Object>();
		List<Visit> visitNoList = new ArrayList<Visit>();
		List<Visit> visitNoList1 = new ArrayList<Visit>();
		List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();
		List<DischargeIcdCode> dischargeIcdCodeList = new ArrayList<DischargeIcdCode>();
		List<OpdPatientDetails> opdPatientDetailsList = new ArrayList<OpdPatientDetails>();
		List<OpdTemplate> templateList = new ArrayList<OpdTemplate>();
		PatientPrescriptionHeader patientPrescriptionHeader = new PatientPrescriptionHeader();
		PatientInvestigationHeader patientInvestigationHeader = new PatientInvestigationHeader();
		List<PatientInvestigationHeader> patientInvestigationHeaderList = new ArrayList<PatientInvestigationHeader>();
		List<DgSampleCollectionDetails> dgSampleCollectionDetailsList = new ArrayList<DgSampleCollectionDetails>();

		List<PatientPrescriptionHeader> patientPrescriptionHeaderList = new ArrayList<PatientPrescriptionHeader>();
		List<MasDepartment> deptList = new ArrayList<MasDepartment>();
		List<DgOrderhd> dgOrderhdList = new ArrayList<DgOrderhd>();
		DgOrderhd dgOrderhd = new DgOrderhd();
		List<OpdPatientHistory> opdPatientHistoryList = new ArrayList<OpdPatientHistory>();
		Session session = (Session) getSession();
		List<MasEmployee> doctarsList = new ArrayList<MasEmployee>();
		List<MasDisposal> disposalTypeList =new ArrayList<MasDisposal>();
		try {
			if (dataMap.get("visitNo") != null) {
				visitNo = (Integer) dataMap.get("visitNo");
			}
			if (dataMap.get("current_visitNo") != null) {
				current_visitNo = (Integer) dataMap.get("current_visitNo");
			}
			
			
			if (dataMap.get("hinId") != null) {
				hinId = (Integer) dataMap.get("hinId");
			}
			disposalTypeList = session.createCriteria(MasDisposal.class).add(Restrictions.eq("Status", "y")).list();
			visitNoList = (List<Visit>) session.createCriteria(Visit.class)
					.add(Restrictions.eq("VisitNo", visitNo))
					.createAlias("Hin", "h")
					.add(Restrictions.eq("h.Id", hinId)).list();


			Visit visit = new Visit();
			if (visitNoList != null && visitNoList.size() > 0) {
				visit = visitNoList.get(0);
			
			map.put("visit", visit);
			
			opdPatientDetailsList = (List<OpdPatientDetails>) session
					.createCriteria(OpdPatientDetails.class).createAlias(
							"Visit", "visit").add(
							Restrictions.eq("visit.Id", visit.getId())).list();

		//	System.out.println("opdPatientDetailsList opdPatientDetailsList.get(0).getReferredDept()"+ opdPatientDetailsList.get(0).getReferredDept());
			map.put("opdPatientDetailsList", opdPatientDetailsList);

			String referedDoctarsArray[];
			if (opdPatientDetailsList != null && opdPatientDetailsList.size() > 0) {
		
               if(opdPatientDetailsList.get(0).getReferredDept()!=null)
               {
				if (opdPatientDetailsList.get(0).getReferredDept()
						.contains(",")) {
					referedDoctarsArray = opdPatientDetailsList.get(0)
							.getReferredDept().split(",");

				} else {
					referedDoctarsArray = new String[1];
					referedDoctarsArray[0] = opdPatientDetailsList.get(0)
							.getReferredDept();
				}

				for (String reffredDoctars : referedDoctarsArray) {
					if (!reffredDoctars.equals("") && !reffredDoctars.equals("0")) {
						//System.out.println("reffredDoctars--12987 opd ds->"+reffredDoctars);
						MasDepartment masDepartment = (MasDepartment) session
								.load(MasDepartment.class, Integer
										.parseInt(reffredDoctars));

						doctarsList.addAll(masDepartment.getMasEmployees());
					}

				}
               }
				map.put("doctarsList", doctarsList);
			}

			opdPatientHistoryList = (List<OpdPatientHistory>) session
					.createCriteria(OpdPatientHistory.class)
					.add(Restrictions.eq("VisitInpatientId", visit.getId()))
					.add(Restrictions.eq("Hin.Id",hinId))
					.list();
			if (opdPatientHistoryList != null
					&& opdPatientHistoryList.size() > 0)
				map.put("opdPatientHistoryList", opdPatientHistoryList);

			dischargeIcdCodeList = (List<DischargeIcdCode>) session
					.createCriteria(DischargeIcdCode.class).createAlias(
							"Visit", "v").add(
							Restrictions.eq("v.Id", visit.getId()))
					.createAlias("Hin", "p").add(
							Restrictions.eq("p.Id", visit.getHin().getId()))
					.list();
			//System.out.println("dischargeIcdCodeList"	+ dischargeIcdCodeList.size());
			if (dischargeIcdCodeList != null && dischargeIcdCodeList.size() > 0)
				map.put("dischargeIcdCodeList", dischargeIcdCodeList);

			patientPrescriptionHeaderList = (List<PatientPrescriptionHeader>) session
					.createCriteria(PatientPrescriptionHeader.class)
					.createAlias("Visit", "v").add(
							Restrictions.eq("v.Id", visit.getId()))
					.createAlias("Hin", "p").add(
							Restrictions.eq("p.Id", visit.getHin().getId()))
					.list();
			if (patientPrescriptionHeaderList != null
					&& patientPrescriptionHeaderList.size() > 0) {
				patientPrescriptionHeader = patientPrescriptionHeaderList
						.get(0);
				map.put("patientPrescriptionHeader", patientPrescriptionHeader);
			
			}

			patientInvestigationHeaderList = (List<PatientInvestigationHeader>) session
					.createCriteria(PatientInvestigationHeader.class)
					.createAlias("Visit", "v").add(
							Restrictions.eq("v.Id", visit.getId()))
					.createAlias("Hin", "p").add(
							Restrictions.eq("p.Id", visit.getHin().getId()))
					.list();
			dgSampleCollectionDetailsList = (List<DgSampleCollectionDetails>) session
					.createCriteria(DgSampleCollectionDetails.class)
					.createAlias("SampleCollectionHeader", "sampleCollHeader")
					.createAlias("sampleCollHeader.Visit", "v").add(
							Restrictions.eq("v.Id", visit.getId()))
					.createAlias("sampleCollHeader.Hin", "p").add(
							Restrictions.eq("OrderStatus", "P")).add(
							Restrictions.eq("p.Id", visit.getHin().getId()))
					.list();
			if (dgSampleCollectionDetailsList.size() > 0) {
				map.put("dgSampleCollectionDetailsList",
						dgSampleCollectionDetailsList);
			}
			if (patientInvestigationHeaderList != null
					&& patientInvestigationHeaderList.size() > 0) {
				patientInvestigationHeader = patientInvestigationHeaderList
						.get(0);
				map.put("patientInvestigationHeader",
						patientInvestigationHeader);
			}

			dgOrderhdList = (List<DgOrderhd>) session.createCriteria(
					DgOrderhd.class).createAlias("Visit", "v").add(
					Restrictions.eq("v.Id", visit.getId())).createAlias("Hin",
					"p").add(Restrictions.eq("p.Id", visit.getHin().getId()))
					.list();
			
			if (dgOrderhdList != null && dgOrderhdList.size() > 0) {
				dgOrderhd = dgOrderhdList.get(0);
				map.put("dgOrderhd", dgOrderhd);
			}
			List<String> departmentTypeCode = new ArrayList<String>();
			
			deptList = session.createCriteria(MasDepartment.class).list();

			map.put("deptList", deptList);
			int deptId = 0;
			if (dataMap.get("deptId") != null) {
				deptId = (Integer) dataMap.get("deptId");
			}
			templateList = session.createCriteria(OpdTemplate.class)
					.createAlias("Department", "dept").add(
							Restrictions.eq("dept.Id", deptId)).list();
			map.put("templateList", templateList);
			frequencyList = session.createCriteria(MasFrequency.class).addOrder(Order.asc("OrderNo")).list();
			map.put("frequencyList", frequencyList);
			}else 
			{
				visitNoList1 = (List<Visit>) session.createCriteria(Visit.class)
				.add(Restrictions.eq("VisitNo", current_visitNo))
				.createAlias("Hin", "h")
				.add(Restrictions.eq("h.Id", hinId)).list();


		        Visit visit1 = new Visit();
		if (visitNoList1 != null && visitNoList1.size() > 0) {
			visit1 = visitNoList1.get(0);
		
		     map.put("visit", visit1);
	      	}
		        Nodatafound="no";
				
			}
			map.put("Nodatafound", Nodatafound);
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("disposalTypeList", disposalTypeList);
		return map;
	
	}

	@SuppressWarnings("unchecked")
	public boolean finalUpdateOpdPatientDetails(Map<String,Object> mapForDS) {
		Session session = (Session) getSession();
		boolean succesfullyUpdated = false;
		String orderSeqNo=(String)mapForDS.get("orderSeqNo");
		List pvmsNoList = (List) mapForDS.get("pvmsNoList");
		List<Integer> frequencyList = (List) mapForDS.get("frequencyList");
		List<String> nomenclatureList = (List) mapForDS.get("nomenclatureList");
		List<String> dosageList = (List) mapForDS.get("dosageList");
		List<String> typeLeftRightList = (List) mapForDS
				.get("typeLeftRightList");
		List<Integer> totalList = (List) mapForDS.get("totalList");
		List<Integer> noOfDaysList = (List) mapForDS.get("noOfDaysList");

		List<String> chargeCodeIdList = (List) mapForDS.get("chargeCodeIdList");
		List<Integer> quantityList = (List) mapForDS.get("quantityList");
		List<String> clinicalList = (List) mapForDS.get("clinicalList");
		String[] diagnosisIdAray = (String[]) mapForDS.get("diagnosisIdAray");
		String[] dgSampleCollectionDetailsIdArray = (String[]) mapForDS
				.get("dgSampleCollectionDetailsIdArray");
		String[] dgSampleCollectionHeaderIdArray = (String[]) mapForDS
				.get("dgSampleCollectionHeaderIdArray");
		StringComparator stringComparator = new StringComparator();
		Arrays.sort(dgSampleCollectionDetailsIdArray, stringComparator);
		List<String> remarksList = (List) mapForDS.get("remarksList");
		String remarks="";
		if (mapForDS.get("remaks") != null) {
			remarks = (String) mapForDS.get("remaks");
		}
		
	
		
		int hinId = (Integer) mapForDS.get("hinId");
		int departmentId = (Integer) mapForDS.get("departmentId");
		int visitId = (Integer) mapForDS.get("visitId");
		int hospitalId = (Integer) mapForDS.get("hospitalId");
		String height = (String) mapForDS.get("height");
		String weight = (String) mapForDS.get("weight");
		String pulse = (String) mapForDS.get("pulse");
		int opdPatientDetailsId = 0;
		int opdPatientHistoryId = 0;
		int patientInvestigationHeaderId = 0;
		int patientPrescriptionHeaderId = 0;

		int userId = (Integer) mapForDS.get("userId");
		int empId = (Integer) mapForDS.get("empId");
		Users user = new Users();
		user.setId(empId);
		
		String bp = (String) mapForDS.get("bp");
		String userName = (String) mapForDS.get("userName");
		String temperature = (String) mapForDS.get("temperature");
		String afmsDescription = (String) mapForDS.get("afmsDescription");
		String referredDept = (String) mapForDS.get("referredDept");
		String consultationTime = (String) mapForDS.get("consultationTime");
		String consultationDate = (String) mapForDS.get("consultationDate");
		Date consultationDateToInsert = HMSUtil
				.convertStringTypeDateToDateType(consultationDate);
		String initialDiagnosis = (String) mapForDS.get("initialDiagnosis");

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);

		String plan = (String) mapForDS.get("plan");
		String nextVisitDate = (String) mapForDS.get("nextVisitDate");
		String onExamination = (String) mapForDS.get("onExamination");

		String presentComplain = (String) mapForDS.get("presentComplain");
		String presentIllness = (String) mapForDS.get("presentIllness");
		String pastHistory = (String) mapForDS.get("pastHistory");
		String personalHistory = (String) mapForDS.get("personalHistory");
		String familyHistory = (String) mapForDS.get("familyHistory");
		String otherDetails = (String) mapForDS.get("otherDetails");

		Date nextVisitDateToInsert = HMSUtil
				.convertStringTypeDateToDateType(nextVisitDate);
		List<Integer> itemIdList = new ArrayList<Integer>();
		String query = "";
		List objectList = new ArrayList();

		Transaction tx = null;

		try {
			tx = session.beginTransaction();
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (mapForDS.get("opdPatientDetailsId") != null) {
				opdPatientDetailsId = (Integer) mapForDS
						.get("opdPatientDetailsId");
				//System.out.println("opdPatientDetails id in data"	+ opdPatientDetailsId);
			}
			if (mapForDS.get("opdPatientHistoryId") != null) {
				opdPatientHistoryId = (Integer) mapForDS
						.get("opdPatientHistoryId");
			}
			if (mapForDS.get("patientPrescriptionHeaderId") != null) {
				patientPrescriptionHeaderId = (Integer) mapForDS
						.get("patientPrescriptionHeaderId");
			}
			if (mapForDS.get("patientInvestigationHeaderId") != null) {
				patientInvestigationHeaderId = (Integer) mapForDS
						.get("patientInvestigationHeaderId");

			}
			OpdPatientDetails opdPatientDetails = (OpdPatientDetails) hbt.load(
					OpdPatientDetails.class, opdPatientDetailsId);

			Visit visitObj = new Visit();
			//System.out.println("visitId " + visitId);
			visitObj.setId(visitId);

			opdPatientDetails.setVisit(visitObj);
			if (empId != 0) {
				MasEmployee masEmployee = new MasEmployee();
				masEmployee.setId(empId);
				opdPatientDetails.setEmployee(masEmployee);
			}
			MasHospital masHospitalObj = new MasHospital();
			masHospitalObj.setId(hospitalId);
			opdPatientDetails.setHospital(masHospitalObj);
			// setting id
			opdPatientDetails.setId(opdPatientDetailsId);
			opdPatientDetails.setHeight(height);
			opdPatientDetails.setVweight(weight);
			opdPatientDetails.setPulse(pulse);
			opdPatientDetails.setBp(bp);
			if (!temperature.equals("")) {
				opdPatientDetails.setTemperature(temperature);
			}
			opdPatientDetails.setAfmsDesc(afmsDescription);
			opdPatientDetails.setReferedDoctars((String) mapForDS
					.get("referredDoctars"));
			opdPatientDetails.setConsultationTime(consultationTime);
			opdPatientDetails.setConsultationDate(consultationDateToInsert);
			opdPatientDetails.setPlan(plan);
			opdPatientDetails.setInitialDiagnosis(initialDiagnosis);
			opdPatientDetails.setOpdDate(date);
			opdPatientDetails.setOpdTime(time);
			opdPatientDetails.setNextVisitDate(nextVisitDateToInsert);
			opdPatientDetails.setReferredDept(referredDept);
			opdPatientDetails.setOnExamination(onExamination);
			hbt.saveOrUpdate(opdPatientDetails);

			// --------------- values to be Opd Patient
			// History--------------------
			OpdPatientHistory patientHistory = (OpdPatientHistory) session
					.load(OpdPatientHistory.class, opdPatientHistoryId);

			MasDepartment md = new MasDepartment();
			md.setId(departmentId);
			patientHistory.setDepartment(md);

			MasHospital mh = new MasHospital();
			mh.setId(hospitalId);
			patientHistory.setHospital(mh);

			Patient p = new Patient();
			p.setId(hinId);
			patientHistory.setHin(p);

			/*
			 * Visit visit = new Visit(); visit.setId(visitId);
			 */
			patientHistory.setVisitInpatientId(visitId);

			patientHistory.setLastChgTime(time);
			patientHistory.setLastChgBy("admin");

			patientHistory.setStatus("y");
			patientHistory.setLastChgDate(date);
			// setting id
			patientHistory.setId(opdPatientHistoryId);
			patientHistory.setPersonalPastHistory(pastHistory);
			patientHistory.setPersonalPresentHistory(personalHistory);

			patientHistory.setFamilyPastHistory(familyHistory);
			patientHistory.setPresentComplain(presentComplain);
			patientHistory.setPresentIllness(presentIllness);
			patientHistory.setPersonalOtherDetails(otherDetails);

			patientHistory.setIpOpPacStatus("OP");

			hbt.saveOrUpdate(patientHistory);

			// --------------- values to be updated in visit table to change
			// it's status--------------------

			Visit visitObjToUpdate = (Visit) hbt.load(Visit.class, visitId);
			visitObjToUpdate.setVisitStatus("C");
			hbt.saveOrUpdate(visitObjToUpdate);

			// -----------------------------------------------------------------------------------

			// --------------values to be entered in discharge table for
			// diagnosis----------------------

			List<DischargeIcdCode> dischargeIcdCodeOldList = new ArrayList<DischargeIcdCode>();
			dischargeIcdCodeOldList = (List<DischargeIcdCode>) session
					.createCriteria(DischargeIcdCode.class).add(
							Restrictions.eq("Hin.Id", hinId)).add(
							Restrictions.eq("Visit.Id", visitId)).list();
			for (DischargeIcdCode dischargeIcdCode : dischargeIcdCodeOldList) {
				session.delete(dischargeIcdCode);
			}
			if (diagnosisIdAray != null) {
				for (int i = 0; i < diagnosisIdAray.length; i++) {
					if (diagnosisIdAray[i] != null) {
						if (!diagnosisIdAray[i].equals("0")) {
							MasIcd masIcd = new MasIcd();
							query = "select icd_id from mas_icd where icd_code='"
									+ diagnosisIdAray[i] + "'";
							objectList = (List) session.createSQLQuery(query)
									.list();
							masIcd.setId(Integer.parseInt(""
									+ objectList.get(0)));

							DischargeIcdCode dischargeIcdCode = new DischargeIcdCode();
							dischargeIcdCode.setIcd(masIcd);
							Patient patientObj = new Patient();
							patientObj.setId(hinId);
							dischargeIcdCode.setHin(patientObj);
							dischargeIcdCode
									.setAddEditDate(consultationDateToInsert);
							dischargeIcdCode.setAddEditTime(consultationTime);
							dischargeIcdCode.setStatus("y");
							dischargeIcdCode.setDiagnosisStatus("p");
							Visit visit = new Visit();
							visit.setId(visitId);

							dischargeIcdCode.setVisit(visit);

							hbt.save(dischargeIcdCode);
						}
					}
				}
			}
			PatientPrescriptionHeader patientPrescriptionHeader;
			if (pvmsNoList.size() > 0) {
				if (mapForDS.get("patientPrescriptionHeaderId") != null) {
					patientPrescriptionHeader = (PatientPrescriptionHeader) session
							.load(PatientPrescriptionHeader.class,
									patientPrescriptionHeaderId);

					patientPrescriptionHeader.setRemarks(remarks);
					Patient patient = new Patient();
					patient.setId(hinId);
					patientPrescriptionHeader.setHin(patient);
					// setting id
					patientPrescriptionHeader
							.setId(patientPrescriptionHeaderId);
					MasDepartment masDepartment = new MasDepartment();
					masDepartment.setId(departmentId);
					patientPrescriptionHeader.setDepartment(masDepartment);
					Visit visit = new Visit();
					visit.setId(visitId);
					patientPrescriptionHeader.setVisit(visit);
					MasHospital masHospital = new MasHospital();
					masHospital.setId(hospitalId);
					patientPrescriptionHeader.setHospital(masHospital);
					patientPrescriptionHeader.setStatus("p");
					patientPrescriptionHeader
							.setPrescriptionDate(consultationDateToInsert);
					patientPrescriptionHeader
							.setPrescriptionTime(consultationTime);
					hbt.update(patientPrescriptionHeader);
					hbt.refresh(patientPrescriptionHeader);
				} else {
					patientPrescriptionHeader = new PatientPrescriptionHeader();
					patientPrescriptionHeader.setRemarks(remarks);
					Patient patient = new Patient();
					patient.setId(hinId);
					patientPrescriptionHeader.setHin(patient);

					MasDepartment masDepartment = new MasDepartment();
					masDepartment.setId(departmentId);
					patientPrescriptionHeader.setDepartment(masDepartment);
					Visit visit = new Visit();
					visit.setId(visitId);
					patientPrescriptionHeader.setVisit(visit);
					MasHospital masHospital = new MasHospital();
					masHospital.setId(hospitalId);
					patientPrescriptionHeader.setHospital(masHospital);
					patientPrescriptionHeader.setStatus("p");
					patientPrescriptionHeader
							.setPrescriptionDate(consultationDateToInsert);
					patientPrescriptionHeader
							.setPrescriptionTime(consultationTime);
					hbt.save(patientPrescriptionHeader);
					hbt.refresh(patientPrescriptionHeader);
				}

				List<PatientPrescriptionDetails> patientPrescriptionDetailsList = session
						.createCriteria(PatientPrescriptionDetails.class).add(
								Restrictions.eq("Prescription.Id",
										patientPrescriptionHeaderId)).list();
				if (patientPrescriptionDetailsList != null
						&& patientPrescriptionDetailsList.size() > 0) {
					for (PatientPrescriptionDetails patientPrescriptionDetails1 : patientPrescriptionDetailsList) {
						session.delete(patientPrescriptionDetails1);
					}
				}
				for (int i = 0; i < pvmsNoList.size(); i++) {
					String pvmsNo = (String) pvmsNoList.get(i);
					String nomenclature = (String) nomenclatureList.get(i);
					int itemId = getItemIdFromPVMS(nomenclature, pvmsNo,hospitalId);
					itemIdList.add(itemId);
				}
				for (int i = 0; i < itemIdList.size(); i++) {
					PatientPrescriptionDetails patientPrescriptionDetails = new PatientPrescriptionDetails();
					MasStoreItem masStoreItem = new MasStoreItem();
					masStoreItem.setId(itemIdList.get(i));
					// setting id
					patientPrescriptionDetails.setItem(masStoreItem);
					MasFrequency masFrequency = new MasFrequency();
					masFrequency.setId(frequencyList.get(i));
					patientPrescriptionDetails.setFrequency(masFrequency);
					patientPrescriptionDetails.setDosage(dosageList.get(i));
					patientPrescriptionDetails
							.setType(typeLeftRightList.get(i));
					patientPrescriptionDetails.setNoOfDays(noOfDaysList.get(i));
					patientPrescriptionDetails
							.setPrescription(patientPrescriptionHeader);
					patientPrescriptionDetails.setTotal(totalList.get(i));
					patientPrescriptionDetails.setRemarks(remarksList.get(i));
					hbt.save(patientPrescriptionDetails);
				}
			}
			boolean allLabTestCancelled = true;
			for (String dgSampleCollectionHeaderId : dgSampleCollectionHeaderIdArray) {
				if (dgSampleCollectionHeaderId != null
						&& !dgSampleCollectionHeaderId.equals("")) {
					List<DgSampleCollectionHeader> dgSampleCollectionHeaderList = new ArrayList<DgSampleCollectionHeader>();
					Set<DgSampleCollectionDetails> dgSampleCollectionDetailSet = new HashSet<DgSampleCollectionDetails>();

					Criteria crit = session.createCriteria(
							DgSampleCollectionHeader.class).add(
							Restrictions.eq("Id", Integer
									.parseInt(dgSampleCollectionHeaderId)));

					dgSampleCollectionHeaderList = crit.list();
					if (dgSampleCollectionHeaderList.size() > 0) {
						DgSampleCollectionHeader dgSampleCollectionHeader = dgSampleCollectionHeaderList
								.get(0);
						dgSampleCollectionDetailSet = dgSampleCollectionHeader
								.getDgSampleCollectionDetails();
						List<String> orderStatusList = new ArrayList<String>();
						allLabTestCancelled = true;
						for (DgSampleCollectionDetails dgSampleCollectionDetails : dgSampleCollectionDetailSet) {
							int found = Arrays.binarySearch(
									dgSampleCollectionDetailsIdArray,
									dgSampleCollectionDetails.getId()
											.toString(), stringComparator);
							if (found >= 0) {
								dgSampleCollectionDetails.setOrderStatus("X");
								hbt.update(dgSampleCollectionDetails);
								hbt.refresh(dgSampleCollectionDetails);
							}
							if (!dgSampleCollectionDetails.getOrderStatus()
									.equalsIgnoreCase("X")) {
								allLabTestCancelled = false;
							}
							if (dgSampleCollectionDetails.getMaincharge()
									.getMainChargecodeCode().equalsIgnoreCase(
											"Lab")) {
								orderStatusList.add(dgSampleCollectionDetails
										.getOrderStatus());
							}
						}
						if (allLabTestCancelled) {
							dgSampleCollectionHeader.setOrderStatus("X");
							hbt.update(dgSampleCollectionHeader);
							hbt.refresh(dgSampleCollectionHeader);
						}
						if (!orderStatusList.contains("P")) {
							if (orderStatusList.contains("A")
									|| orderStatusList.contains("E")) {
								dgSampleCollectionHeader.setOrderStatus("A");
								hbt.update(dgSampleCollectionHeader);
								hbt.refresh(dgSampleCollectionHeader);
							}
						}
					}
					// tx.commit();
					// }catch (Exception e) {
					// if (tx != null) tx.rollback();
					// e.printStackTrace();
					// }
				}
			}

			PatientInvestigationHeader patientInvestigationHeader = null;
			if (chargeCodeIdList.size() > 0) {
				MasHospital masHospital = new MasHospital();
				Patient patient = new Patient();
				MasEmployee masEmployee2 = new MasEmployee();
				MasDepartment masDepartment = new MasDepartment();
				if (mapForDS.get("patientInvestigationHeaderId") != null) {
					patientInvestigationHeader = (PatientInvestigationHeader) session
							.load(PatientInvestigationHeader.class,
									patientInvestigationHeaderId);
					patient.setId(hinId);
					patientInvestigationHeader.setHin(patient);

					masDepartment.setId(departmentId);
					patientInvestigationHeader.setDepartment(masDepartment);

					Visit visit = new Visit();
					visit.setId(visitId);
					patientInvestigationHeader.setVisit(visit);
					// setting id
					masHospital.setId(hospitalId);
					patientInvestigationHeader
							.setId(patientInvestigationHeaderId);
					patientInvestigationHeader.setHospital(masHospital);
					patientInvestigationHeader.setStatus("p");
					patientInvestigationHeader
							.setInvestigationDate(consultationDateToInsert);
					patientInvestigationHeader
							.setInvestigationTime(consultationTime);
					hbt.update(patientInvestigationHeader);

					Query deleteQuery = session
							.createQuery("delete from PatientInvestigationDetails "
									+ "where InvestigationHeader.Id="
									+ patientInvestigationHeaderId);
					int row = deleteQuery.executeUpdate();
					if (row == 0) {
						//System.out.println("Doesn't deleted any row!");
					} else {
						//System.out.println("Deleted	Row: " + row);
					}
				} else {
					patientInvestigationHeader = new PatientInvestigationHeader();
					patient.setId(hinId);
					patientInvestigationHeader.setHin(patient);

					masDepartment.setId(departmentId);
					patientInvestigationHeader.setDepartment(masDepartment);

					Visit visit = new Visit();
					visit.setId(visitId);
					patientInvestigationHeader.setVisit(visit);
					// setting id
					masHospital.setId(hospitalId);

					patientInvestigationHeader.setHospital(masHospital);
					patientInvestigationHeader.setStatus("p");
					patientInvestigationHeader
							.setInvestigationDate(consultationDateToInsert);
					patientInvestigationHeader
							.setInvestigationTime(consultationTime);
					hbt.save(patientInvestigationHeader);
				}
			}
			// ///////////////////////////////////////////////////////
			// By Tirath
			
			Map<String, Object> utilMap1 = new HashMap<String, Object>();
			utilMap1 = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			
			String time1 = (String) utilMap1.get("currentTimeWithoutSc");
			if (chargeCodeIdList.size() > 0) {
				MasDepartment masDepartment = new MasDepartment();
				MasHospital masHospital = new MasHospital();
				Patient patient = new Patient();
				MasEmployee masEmployee2 = new MasEmployee();
				//String orderSeqNo = "";
				// PatientInvestigationHeader patientInvestigationHeader= new
				// PatientInvestigationHeader();

				// patient.setId(hinId);
				// patientInvestigationHeader.setHin(patient);

				// masDepartment.setId(departmentId);
				// patientInvestigationHeader.setDepartment(masDepartment);
				// Visit visit= new Visit();
				// visit.setId(visitId);
				// patientInvestigationHeader.setVisit(visit);

				// masHospital.setId(hospitalId);
				// patientInvestigationHeader.setHospital(masHospital);
				// patientInvestigationHeader.setStatus("p");
				// patientInvestigationHeader.setInvestigationDate(consultationDateToInsert);
				// patientInvestigationHeader.setInvestigationTime(consultationTime);
				// hbt.save(patientInvestigationHeader);

				DgOrderhd dgOrderhd = new DgOrderhd();
				dgOrderhd.setOrderDate(consultationDateToInsert);
				dgOrderhd.setOrderTime(time1);
				masHospital.setId(hospitalId);
				dgOrderhd.setHospital(masHospital);
				patient.setId(hinId);
				dgOrderhd.setHin(patient);
				masDepartment.setId(departmentId);
				dgOrderhd.setDepartment(masDepartment);
				masEmployee2.setId(empId);
				dgOrderhd.setPrescribedBy(masEmployee2);
				dgOrderhd.setPatientType("OP");
				dgOrderhd.setTestType("Regular");
				dgOrderhd.setCreatedby(userName);
				dgOrderhd.setCreatedon(consultationDateToInsert);

				//orderSeqNo = generateOrderNumber(); By Tirath
				dgOrderhd.setOrderNo(orderSeqNo);
				if (visitId != 0) {
					Visit visit = new Visit();
					visit.setId(visitId);
					dgOrderhd.setVisit(visit);
				}
				dgOrderhd.setOrderStatus("C");
				dgOrderhd.setClinicalNote(clinicalList.get(0));
				dgOrderhd.setLabOrderStatus("LC");
				dgOrderhd.setLastChgBy(user);
				dgOrderhd.setLastChgDate(consultationDateToInsert);
				dgOrderhd.setLastChgTime(consultationTime);
				dgOrderhd
						.setInvestigationRequestionNo(patientInvestigationHeader);
				hbt.save(dgOrderhd);
				hbt.refresh(dgOrderhd);

				for (int i = 0; i < chargeCodeIdList.size(); i++) {
					PatientInvestigationDetails patientInvestigationDetails = new PatientInvestigationDetails();
					patientInvestigationDetails
							.setInvestigationHeader(patientInvestigationHeader);
					MasChargeCode masChargeCode = new MasChargeCode();
					masChargeCode.setId(Integer.parseInt(chargeCodeIdList
							.get(i)));
					patientInvestigationDetails.setChargeCode(masChargeCode);
					// patientInvestigationDetails.setQuantity(quantityList.get(i));
					patientInvestigationDetails.setClinicalNotes(clinicalList
							.get(i));
					hbt.save(patientInvestigationDetails);

					DgOrderdt dgOrderdt = new DgOrderdt();
					dgOrderdt.setOrderhd(dgOrderhd);
					masChargeCode.setId(Integer.parseInt(chargeCodeIdList
							.get(i)));
					dgOrderdt.setChargeCode(masChargeCode);
					// dgOrderdt.setOrderQty(quantityList.get(i));

					dgOrderdt.setCreatedby(userName);
					dgOrderdt.setCreatedon(consultationDateToInsert);
					dgOrderdt.setLastChgBy(user);
					dgOrderdt.setLastChgDate(consultationDateToInsert);
					dgOrderdt.setLastChgTime(consultationTime);
					// method written for taking out the values of mascharge
					// code and subcharge
					Map masChargeMap = getMasChargeCodeFromChargeId(Integer
							.parseInt(chargeCodeIdList.get(i)));
					MasChargeCode masChargeCodeObj = (MasChargeCode) masChargeMap
							.get("masChargeCode");
					int mainChargeId = masChargeCodeObj.getMainChargecode()
							.getId();
					int subChargeId = masChargeCodeObj.getSubChargecode()
							.getId();
					if (masChargeCodeObj.getMainChargecode()
							.getMainChargecodeCode().equalsIgnoreCase("Lab")) {
						dgOrderdt.setOrderStatus("C");
					} else {
						dgOrderdt.setOrderStatus("P");
					}

					MasMainChargecode masMainChargecode = new MasMainChargecode();
					masMainChargecode.setId(mainChargeId);
					dgOrderdt.setMainChargecode(masMainChargecode);
					MasSubChargecode masSubChargecode = new MasSubChargecode();
					masSubChargecode.setId(subChargeId);
					dgOrderdt.setSubChargeid(masSubChargecode);
					dgOrderdt.setInvestigation(new DgMasInvestigation(Integer
							.parseInt(chargeCodeIdList.get(i))));
					hbt.save(dgOrderdt);
				}

				// ///////////// save Sample collection details for Radiology
				// test////////////////////

				String dateCollection = (String) utilMap.get("currentDate");
				String timeCollection = (String) utilMap.get("currentTime");

				DgSampleCollectionHeader dgSampleCollectionHeader = new DgSampleCollectionHeader();
				List<MasChargeCode> chargeCodeList = new ArrayList<MasChargeCode>();
				boolean goneInLoop = false;

				for (int j = 0; j < chargeCodeIdList.size() && !goneInLoop; j++) {
					int chargeCodeId = Integer.parseInt(""
							+ chargeCodeIdList.get(j));
					chargeCodeList = session
							.createCriteria(MasChargeCode.class).add(
									Restrictions.eq("Id", chargeCodeId))
							.createAlias("MainChargecode", "mcc").createAlias(
									"mcc.Department", "dept").createAlias(
									"dept.DepartmentType", "dt").add(
									Restrictions.eq("dt.DepartmentTypeCode",
											"RADIO")).list();
					if (chargeCodeList.size() > 0) {
						for (MasChargeCode chargeCode : chargeCodeList) {
							try {
								int inpatientId = 0;
								if (visitId != 0) {
									Visit visit1 = new Visit();
									visit1.setId(visitId);
									dgSampleCollectionHeader.setVisit(visit1);
									dgSampleCollectionHeader
											.setPatientType("OP");
								}

								if (hinId != 0) {
									Patient patient1 = new Patient();
									patient1.setId(hinId);
									dgSampleCollectionHeader.setHin(patient1);
								}
								if (hospitalId != 0) {
									MasHospital hospital = new MasHospital();
									hospital.setId(hospitalId);
									dgSampleCollectionHeader
											.setHospital(hospital);
								}

								if (departmentId != 0) {
									MasDepartment masDepartment1 = new MasDepartment();
									masDepartment1.setId(chargeCode
											.getMainChargecode()
											.getDepartment().getId());
									dgSampleCollectionHeader
											.setDepartment(masDepartment1);
								}

								if (departmentId != 0) {
									MasDepartment orderByDepartment = new MasDepartment();
									orderByDepartment.setId(departmentId);
									dgSampleCollectionHeader
											.setOrderByDepartment(orderByDepartment);
								}

								dgSampleCollectionHeader.setOrder(dgOrderhd);

								// if (departmentId != 0) {
								// DgCollectionCenter dgCollectionCenter = new
								// DgCollectionCenter();
								// dgCollectionCenter.setId(departmentId);
								// dgSampleCollectionHeader.setCollectionCenter(dgCollectionCenter);
								// }

								dgSampleCollectionHeader.setOrderStatus("P");
								dgSampleCollectionHeader.setLastChgBy(userName);
								dgSampleCollectionHeader
										.setLastChgDate(HMSUtil
												.convertStringTypeDateToDateType(dateCollection));
								dgSampleCollectionHeader.setLastChgTime(time);
								dgSampleCollectionHeader
										.setDiagnosisDate(HMSUtil
												.convertStringTypeDateToDateType(dateCollection));
								dgSampleCollectionHeader.setDiagnosisTime(time);
								hbt.save(dgSampleCollectionHeader);

							} catch (DataAccessException e) {
								e.printStackTrace();
							}
							try {

								for (int i = 0; i < chargeCodeIdList.size(); i++) {
									int chargeId = 0;
									if (chargeCodeIdList.get(i) != null
											&& !chargeCodeIdList.get(i).equals(
													"")) {
										chargeId = Integer
												.parseInt((String) chargeCodeIdList
														.get(i));
										MasChargeCode maschrgCode = (MasChargeCode) session
												.createCriteria(
														MasChargeCode.class)
												.add(
														Restrictions.eq("Id",
																chargeId))
												.list().get(0);
										if (maschrgCode.getMainChargecode()
												.getMainChargecodeCode()
												.equalsIgnoreCase("RADIO")) {
											MasChargeCode masChargeCode1 = new MasChargeCode();
											MasSubChargecode masSubChargecode1 = new MasSubChargecode();

											DgSampleCollectionDetails dgSampleCollectionDetails = new DgSampleCollectionDetails();
											dgSampleCollectionDetails
													.setSampleCollectionHeader(dgSampleCollectionHeader);

											dgSampleCollectionDetails
													.setCollected("y");

											masChargeCode1
													.setId(Integer
															.parseInt((String) chargeCodeIdList
																	.get(i)));
											dgSampleCollectionDetails
													.setChargeCode(masChargeCode1);

											MasMainChargecode masMainChargecode1 = new MasMainChargecode();
											masMainChargecode1
													.setId(maschrgCode
															.getMainChargecode()
															.getId());
											dgSampleCollectionDetails
													.setMaincharge(masMainChargecode1);

											dgSampleCollectionDetails
													.setSubcharge(maschrgCode
															.getSubChargecode());

											MasEmployee masEmployee1 = new MasEmployee();
											masEmployee1.setId(userId);
											dgSampleCollectionDetails
													.setCollectedBy(masEmployee1);

											dgSampleCollectionDetails
													.setDiagNo(generateDiagNumber(maschrgCode
															.getSubChargecode()
															.getId()));

											dgSampleCollectionDetails
													.setInvestigation(new DgMasInvestigation(
															chargeId));
											dgSampleCollectionDetails
													.setLastChgBy(userName);
											dgSampleCollectionDetails
													.setLastChgDate(HMSUtil
															.convertStringTypeDateToDateType(dateCollection));
											dgSampleCollectionDetails
													.setLastChgTime(time);
											dgSampleCollectionDetails
													.setRejected("n");
											dgSampleCollectionDetails
													.setSampleCollDatetime(new Date());
											dgSampleCollectionDetails
													.setOrderStatus("P");
											try {
												hbt
														.save(dgSampleCollectionDetails);
											} catch (RuntimeException e) {
												e.printStackTrace();
											}
										}
									}
								}
							} catch (NumberFormatException e) {
								e.printStackTrace();
							}
						}
						goneInLoop = true;
					}
				}
				// ///////////////////////////End Save details For Radio Order
				// Booking///////////////////////////

				// ////////////////////////// Save details order booking for lab
				// /////////////////////
				dgSampleCollectionHeader = new DgSampleCollectionHeader();
				chargeCodeList = new ArrayList<MasChargeCode>();
				goneInLoop = false;
				for (int j = 0; j < chargeCodeIdList.size() && !goneInLoop; j++) {
					int chargeCodeId = Integer.parseInt(""
							+ chargeCodeIdList.get(j));
					chargeCodeList = session
							.createCriteria(MasChargeCode.class).add(
									Restrictions.eq("Id", chargeCodeId))
							.createAlias("MainChargecode", "mcc").createAlias(
									"mcc.Department", "dept").createAlias(
									"dept.DepartmentType", "dt").add(
									Restrictions.eq("dt.DepartmentTypeCode",
											"DIAG")).list();

					if (chargeCodeList.size() > 0) {
						for (MasChargeCode chargeCode : chargeCodeList) {
							try {
								int inpatientId = 0;
								if (visitId != 0) {
									Visit visit1 = new Visit();
									visit1.setId(visitId);
									dgSampleCollectionHeader.setVisit(visit1);
									dgSampleCollectionHeader
											.setPatientType("OP");
								}
								if (hinId != 0) {
									Patient patient1 = new Patient();
									patient1.setId(hinId);
									dgSampleCollectionHeader.setHin(patient1);
								}
								if (hospitalId != 0) {
									MasHospital hospital = new MasHospital();
									hospital.setId(hospitalId);
									dgSampleCollectionHeader
											.setHospital(hospital);
								}
								if (departmentId != 0) {
									MasDepartment masDepartment1 = new MasDepartment();
									masDepartment1.setId(chargeCode
											.getMainChargecode()
											.getDepartment().getId());
									dgSampleCollectionHeader
											.setDepartment(masDepartment1);
								}
								if (departmentId != 0) {
									MasDepartment orderByDepartment = new MasDepartment();
									orderByDepartment.setId(departmentId);
									dgSampleCollectionHeader
											.setOrderByDepartment(orderByDepartment);
								}
								dgSampleCollectionHeader.setOrder(dgOrderhd);
								// DgCollectionCenter dgCollectionCenter = new
								// DgCollectionCenter();
								// dgCollectionCenter.setId(departmentId);
								// dgSampleCollectionHeader.setCollectionCenter(dgCollectionCenter);
								dgSampleCollectionHeader.setOrderStatus("P");
								dgSampleCollectionHeader.setLastChgBy(userName);
								dgSampleCollectionHeader
										.setLastChgDate(HMSUtil
												.convertStringTypeDateToDateType(dateCollection));
								dgSampleCollectionHeader.setLastChgTime(time);
								dgSampleCollectionHeader
										.setDiagnosisDate(HMSUtil
												.convertStringTypeDateToDateType(dateCollection));
								dgSampleCollectionHeader.setDiagnosisTime(time);
								hbt.save(dgSampleCollectionHeader);
							} catch (DataAccessException e) {
								e.printStackTrace();
							}
							try {
								for (int i = 0; i < chargeCodeIdList.size(); i++) {
									int chargeId = 0;
									if (chargeCodeIdList.get(i) != null
											&& !chargeCodeIdList.get(i).equals(
													"")) {
										chargeId = Integer
												.parseInt((String) chargeCodeIdList
														.get(i));
										MasChargeCode maschrgCode = (MasChargeCode) session
												.createCriteria(
														MasChargeCode.class)
												.add(
														Restrictions.eq("Id",
																chargeId))
												.list().get(0);
										if (maschrgCode.getMainChargecode()
												.getMainChargecodeCode()
												.equalsIgnoreCase("Lab")) {
											DgSampleCollectionDetails dgSampleCollectionDetails = new DgSampleCollectionDetails();
											dgSampleCollectionDetails
													.setSampleCollectionHeader(dgSampleCollectionHeader);
											dgSampleCollectionDetails
													.setCollected("y");
											dgSampleCollectionDetails
													.setChargeCode(maschrgCode);
											MasMainChargecode masMainChargecode1 = new MasMainChargecode();
											masMainChargecode1
													.setId(maschrgCode
															.getMainChargecode()
															.getId());
											dgSampleCollectionDetails
													.setMaincharge(masMainChargecode1);
											dgSampleCollectionDetails
													.setSubcharge(maschrgCode
															.getSubChargecode());
											MasEmployee masEmployee1 = new MasEmployee();
											masEmployee1.setId(userId);
											dgSampleCollectionDetails
													.setCollectedBy(masEmployee1);
											dgSampleCollectionDetails
													.setDiagNo(generateDiagNumber(maschrgCode
															.getSubChargecode()
															.getId()));
											dgSampleCollectionDetails
													.setInvestigation(new DgMasInvestigation(
															chargeId));
											dgSampleCollectionDetails
													.setLastChgBy(userName);
											dgSampleCollectionDetails
													.setLastChgDate(HMSUtil
															.convertStringTypeDateToDateType(dateCollection));
											dgSampleCollectionDetails
													.setLastChgTime(time);
											dgSampleCollectionDetails
													.setRejected("n");
											dgSampleCollectionDetails
													.setSampleCollDatetime(new Date());
											dgSampleCollectionDetails
													.setOrderStatus("P");
											try {
												hbt
														.save(dgSampleCollectionDetails);
											} catch (RuntimeException e) {
												e.printStackTrace();
											}
										}
									}
								}
							} catch (NumberFormatException e) {
								e.printStackTrace();
							}
						}
						goneInLoop = true;
					}
				}

				// /////////////////////// End Saving sampleCollection Details
				// for Lab Order Booking////////////
			}
			// ///////////////////////////////////////////////////////

			/*
			 * List<DgOrderhd>dgOrderhdList=new ArrayList<DgOrderhd>();
			 * dgOrderhdList
			 * =session.createCriteria(DgOrderhd.class).add(Restrictions
			 * .eq("InvestigationRequestionNo.Id",
			 * patientInvestigationHeaderId)) .add(Restrictions.eq("Visit.Id",
			 * visitId)).add(Restrictions.eq("Hin.Id", hinId)).list(); int
			 * dgOrderhdId=0; dfg DgOrderhd dgOrderhd = new DgOrderhd();
			 * if(dgOrderhdList!=null&&dgOrderhdList.size()>0){
			 * dgOrderhdId=dgOrderhdList.get(0).getId();
			 * dgOrderhd.setId(dgOrderhdId); for(DgOrderdt
			 * DgOrderdt:dgOrderhdList.get(0).getDgOrderdts()){
			 * session.delete(DgOrderdt); } }
			 * 
			 * dgOrderhd.setOrderDate(consultationDateToInsert);
			 * dgOrderhd.setOrderTime(consultationTime);
			 * masHospital.setId(hospitalId);
			 * dgOrderhd.setHospital(masHospital); patient.setId(hinId);
			 * dgOrderhd.setHin(patient); masDepartment.setId(departmentId);
			 * dgOrderhd.setDepartment(masDepartment);
			 * masEmployee2.setId(empId);
			 * dgOrderhd.setPrescribedBy(masEmployee2);
			 * dgOrderhd.setPatientType("OP"); dgOrderhd.setTestType("Regular");
			 * dgOrderhd.setCreatedby(userName);
			 * dgOrderhd.setCreatedon(consultationDateToInsert);
			 * 
			 * String orderSeqNo = generateOrderNumber();
			 * dgOrderhd.setOrderNo(orderSeqNo);
			 * 
			 * dgOrderhd.setOrderStatus("P"); dgOrderhd.setLastChgBy(empId);
			 * dgOrderhd.setLastChgDate(consultationDateToInsert);
			 * dgOrderhd.setLastChgTime(consultationTime); dgOrderhd
			 * .setInvestigationRequestionNo(patientInvestigationHeader);
			 * hbt.saveOrUpdate(dgOrderhd);
			 * 
			 * 
			 * List<PatientInvestigationDetails>patientInvestigationDetailsList=new
			 * ArrayList<PatientInvestigationDetails>();
			 * patientInvestigationDetailsList
			 * =session.createCriteria(PatientInvestigationDetails
			 * .class).add(Restrictions.eq("InvestigationHeader.Id",
			 * patientInvestigationHeaderId)) .list();
			 * 
			 * 
			 * 
			 * if(patientInvestigationDetailsList!=null&&
			 * patientInvestigationDetailsList.size()>0){
			 * for(PatientInvestigationDetails
			 * patientInvestigationDetails:patientInvestigationDetailsList){
			 * session.delete(patientInvestigationDetails); } } for (int i = 0;
			 * i < chargeCodeIdList.size(); i++) { PatientInvestigationDetails
			 * patientInvestigationDetails = new PatientInvestigationDetails();
			 * patientInvestigationDetails
			 * .setInvestigationHeader(patientInvestigationHeader);
			 * MasChargeCode masChargeCode = new MasChargeCode();
			 * masChargeCode.setId(Integer.parseInt(chargeCodeIdList .get(i)));
			 * patientInvestigationDetails.setChargeCode(masChargeCode);
			 * patientInvestigationDetails .setQuantity(quantityList.get(i));
			 * patientInvestigationDetails.setClinicalNotes(clinicalList
			 * .get(i)); hbt.save(patientInvestigationDetails);
			 * 
			 * DgOrderdt dgOrderdt = new DgOrderdt();
			 * dgOrderdt.setOrderhd(dgOrderhd);
			 * masChargeCode.setId(Integer.parseInt(chargeCodeIdList .get(i)));
			 * dgOrderdt.setChargeCode(masChargeCode);
			 * dgOrderdt.setOrderQty(quantityList.get(i));
			 * dgOrderdt.setOrderStatus("P"); dgOrderdt.setCreatedby(userName);
			 * dgOrderdt.setCreatedon(consultationDateToInsert);
			 * dgOrderdt.setLastChgBy(empId);
			 * dgOrderdt.setLastChgDate(consultationDateToInsert);
			 * dgOrderdt.setLastChgTime(consultationTime); // method written for
			 * taking out the values of mascharge // code and subcharge Map
			 * masChargeMap = getMasChargeCodeFromChargeId(Integer
			 * .parseInt(chargeCodeIdList.get(i))); MasChargeCode
			 * masChargeCodeObj = (MasChargeCode) masChargeMap
			 * .get("masChargeCode"); int mainChargeId =
			 * masChargeCodeObj.getMainChargecode() .getId(); int subChargeId =
			 * masChargeCodeObj.getSubChargecode() .getId(); MasMainChargecode
			 * masMainChargecode = new MasMainChargecode();
			 * masMainChargecode.setId(mainChargeId);
			 * dgOrderdt.setMainChargecode(masMainChargecode); MasSubChargecode
			 * masSubChargecode = new MasSubChargecode();
			 * masSubChargecode.setId(subChargeId);
			 * dgOrderdt.setSubChargeid(masSubChargecode); hbt.save(dgOrderdt);
			 */

			// }
			// }
			succesfullyUpdated = true;
			tx.commit();
		} catch (Exception e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();

		} finally {
			// --------Session Closing----------
			session.close();
		}

		return succesfullyUpdated;
	}
	@SuppressWarnings("unchecked")
	public Map<String, Object> updateOpdOpht(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;

		int OpdOpthId = 0;
		int hinId = 0;
		int visitId = 0;
		int userId = 0;
		int departmentId = 0;
		int hospitalId = 0;
		
		
		
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

		try {

			visitId = box.getInt("visitId");

			OpdOpthId = box.getInt("opdOphtId");
			hinId = box.getInt("hinId");
			userId = box.getInt("userId");
			departmentId = box.getInt("departmentId");
			hospitalId = box.getInt("hospitalId");

	
			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");
			Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
			String userName = (String) utilMap.get("userName");
			Patient patient = new Patient();
			patient.setId(hinId);

			Visit visit = new Visit();
			visit.setId(visitId);

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);

			OpdOphthalmology opdOphthalmology = (OpdOphthalmology) hbt.load(OpdOphthalmology.class, OpdOpthId);

			
			opdOphthalmology.setHin(patient);
			opdOphthalmology.setVisit(visit);
			opdOphthalmology.setHospital(masHospital);

			opdOphthalmology.setDecreasedVision(box.getString(DECREASED_VISION));
			opdOphthalmology.setRedness(box.getString(REDNESS));
			opdOphthalmology.setDischarge(box.getString(DISCHARGE));
			opdOphthalmology.setPain(box.getString(PAIN));
			opdOphthalmology.setFloaterTraumaEpiphora(box
					.getString(FLOATER_TRAUMA_EPIPHORA));

			if (box.getString(READING) != null) {
				opdOphthalmology.setReading(box.getString(READING));
			}
			if (box.getString(DRIVING) != null) {
				opdOphthalmology.setDriving(box.getString(DRIVING));
			}
			if (box.getString(COOKING) != null) {
				opdOphthalmology.setCooking(box.getString(COOKING));
			}
			if (box.getString(PERSONAL_HYGIENE) != null) {
				opdOphthalmology.setPersonalHygiene(box
						.getString(PERSONAL_HYGIENE));
			}
			if (box.getString(AMBULATORY) != null) {
				opdOphthalmology.setAmbulatry(box.getString(AMBULATORY));
			}
			if (box.getString(CAD) != null) {
				opdOphthalmology.setCad(box.getString(CAD));
			}

			if (box.getString(DM) != null) {
				opdOphthalmology.setDm(box.getString(DM));
			}
			if (box.getString(HTN) != null) {
				opdOphthalmology.setHtn(box.getString(HTN));
			}
			if (box.getString(BA) != null) {
				opdOphthalmology.setBa(box.getString(BA));
			}
			if (box.getString(AUTOIMMUNE) != null) {
				opdOphthalmology.setAutoimmune(box.getString(AUTOIMMUNE));
			}
			if (box.getString(AMBULATORY) != null) {
				opdOphthalmology.setAmbulatry(box.getString(AMBULATORY));
			}
			if (box.getString(OTHERS) != null) {
				opdOphthalmology.setOthers(box.getString(OTHERS));
			}

			opdOphthalmology.setDistanceRe(box.getString(DISTANCE_RE));
			opdOphthalmology.setDistanceLe(box.getString(DISTANCE_LE));
			opdOphthalmology.setDistancePh(box.getString(DISTANCE_PH));
			opdOphthalmology.setNearRe(box.getString(NEAR_RE));
			opdOphthalmology.setNearLe(box.getString(NEAR_LE));
			opdOphthalmology.setNearPh(box.getString(NEAR_PH));
			opdOphthalmology.setRefractionRe(box.getString(REFRACTION_RE));
			opdOphthalmology.setRefractionLe(box.getString(REFRACTION_LE));
			opdOphthalmology.setRefractionPh(box.getString(REFRACTION_PH));
			opdOphthalmology.setAcceptanceDistanceRe(box
					.getString(ACCEPTANCE_DISTANCE_RE));
			opdOphthalmology.setAcceptanceDistanceLe(box
					.getString(ACCEPTANCE_DISTANCE_LE));
			opdOphthalmology.setAcceptanceDistancePh(box
					.getString(ACCEPTANCE_DISTANCE_PH));
			opdOphthalmology.setAcceptanceNearRe(box
					.getString(ACCEPTANCE_NEAR_RE));
			opdOphthalmology.setAcceptanceNearLe(box
					.getString(ACCEPTANCE_NEAR_LE));
			opdOphthalmology.setAcceptanceNearPh(box
					.getString(ACCEPTANCE_NEAR_PH));
			opdOphthalmology.setConvergence(box.getString(CONVERGENCE));
			opdOphthalmology.setColorVision(box.getString(COLOR_VISION));
			opdOphthalmology.setOcularMovement(box.getString(OCULAR_MOVEMENTS));
			opdOphthalmology.setLids(box.getString(LIDS));
			opdOphthalmology.setConjunctiva(box.getString(CONJUNCTIVA));
			opdOphthalmology.setCorneaAcRe(box.getString(CORNEA_AC_RE));
			opdOphthalmology.setCorneaAcLe(box.getString(CORNEA_AC_LE));

			opdOphthalmology
					.setAntChamberDepthLe(box.getString(ANT_CHAMBER_LE));
			opdOphthalmology
					.setAntChamberDepthRe(box.getString(ANT_CHAMBER_RE));
			opdOphthalmology.setCellsFlareLe(box.getString(CELLS_FLARE_LE));
			opdOphthalmology.setCellsFlareRe(box.getString(CELLS_FLARE_RE));
			opdOphthalmology.setPxfNviLe(box.getString(PXF_NVI_LE));
			opdOphthalmology.setPxfNviRe(box.getString(PXF_NVI_RE));

			if (box.getString(DIRECT) != null) {
				opdOphthalmology.setPupilReactionDirect(box.getString(DIRECT));
			}
			if (box.getString(CONSENSNAL) != null) {
				opdOphthalmology.setPupilReactionConsensnal(box
						.getString(CONSENSNAL));
			}
			if (box.getString(RAPD) != null) {
				opdOphthalmology.setPupilReactionRapd(box.getString(RAPD));
			}

			opdOphthalmology.setGonioscopyRe(box.getString(GONIOSCOPY_RE));
			opdOphthalmology.setGonioscopyLe(box.getString(GONIOSCOPY_LE));
			opdOphthalmology.setIopRe(box.getString(IOP_RE));
			opdOphthalmology.setIopLe(box.getString(IOP_LE));
			opdOphthalmology.setDilationRe(box.getString(DILATION_RE));
			opdOphthalmology.setDilationLe(box.getString(DILATION_LE));
			opdOphthalmology.setLensRe(box.getString(LENS_RE));
			opdOphthalmology.setLensLe(box.getString(LENS_LE));
			opdOphthalmology.setFundusRe(box.getString(FUNDUS_RE));
			opdOphthalmology.setFundusLe(box.getString(FUNDUS_LE));

			opdOphthalmology.setLastChgBy(userName);
			opdOphthalmology.setLastChgDate(date);
			opdOphthalmology.setLastChgTime(time);
			

			hbt.update(opdOphthalmology);
			hbt.refresh(opdOphthalmology);


			saved = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;
	}

	public Map<String, Object> responseForDoctarsList(Map mapForDS) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasEmployee> allEmployeeList = new ArrayList<MasEmployee>();
		Session session = (Session) getSession();
		String departmentArray[];
		String departmentArray1[] = new String[10];
		departmentArray = (String[]) mapForDS.get("departmentArray");
		for (int i = 0; i < departmentArray.length; i++) {
			if (i == 0) {
				departmentArray1 = departmentArray[i].split(",");
				break;
			}
		}

		try {
			for (String a : departmentArray1) {
				List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
				employeeList = session.createCriteria(MasEmployee.class).add(
						Restrictions.eq("Department.Id", Integer.parseInt(a)))
						.list();
				allEmployeeList.addAll(employeeList);
				//System.out.println("size of the list" + allEmployeeList.size());
			}
			map.put("allEmployeeList", allEmployeeList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public Map<String, Object> getListForPrescriptionTemplate() {
		// TODO Auto-generated method stub
		return null;
	}

	public Map<String, Object> showOpdFrequencyJsp() {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			List<MasFrequency> masFrequencyList = new ArrayList<MasFrequency>();
			masFrequencyList = session.createCriteria(MasFrequency.class).add(
					Restrictions.eq("Status", "y")).addOrder(Order.asc("OrderNo")).list();
			map.put("masFrequencyList", masFrequencyList);
			List<OpdInstructionTreatment> opdInstructionTreatmentList = new ArrayList<OpdInstructionTreatment>();
			opdInstructionTreatmentList = session.createCriteria(
					OpdInstructionTreatment.class).add(
					Restrictions.eq("Status", "y")).list();
			map.put("opdInstructionTreatmentList", opdInstructionTreatmentList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public boolean addPrescriptionTemplate(Map mapForDS) {
		Session session = (Session) getSession();
		boolean flag = false;
		String templateName = "";
		Transaction tx = null;
		
		int hospitalId = (Integer)mapForDS.get("hospitalId");
		int deptId = (Integer)mapForDS.get("departmentId");
		int docId = (Integer)mapForDS.get("docId");
		try {
			tx = session.beginTransaction();
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
        hbt.setCheckWriteOperations(false);
		List pvmsNoList = new ArrayList();
		List frequencyList = new ArrayList();
		List dosageList = new ArrayList();
		List totalList = new ArrayList();
		List typeLeftRightList = new ArrayList();
		List noOfDaysList = new ArrayList();
		//List<Integer> instuctionList = new ArrayList<Integer>();
		List<String> instuctionList = new ArrayList<String>();

		Map<String, Object> map = new HashMap<String, Object>();
		List<OpdTemplate> opdTemplateList = new ArrayList<OpdTemplate>();
		
		List<OpdTemplate> existingOpdTemplateList = new ArrayList<OpdTemplate>();
		
		
		if(mapForDS.get("templateName") != null){
			templateName =(String)mapForDS.get("templateName");
		}
		//System.out.println("templateName==="+templateName);
		existingOpdTemplateList = session.createCriteria(OpdTemplate.class)
				.createAlias("Hospital", "hospital").add(Restrictions.eq("hospital.Id", hospitalId))
				.createAlias("Department", "dept").add(Restrictions.eq("dept.Id", deptId))
				.createAlias("Doctor", "doctor").add(Restrictions.eq("doctor.Id", docId))
				.add(Restrictions.eq("TemplateName", templateName).ignoreCase()).list();
	//	System.out.println("existingOpdTemplateList==="+existingOpdTemplateList.size());
		if(existingOpdTemplateList.size()>0){			
			flag= false;
		}else{

			OpdTemplate opdTemplate = (OpdTemplate) mapForDS.get("opdTemplate");

			hbt.save(opdTemplate);
			
			Criteria c = session.createCriteria(OpdTemplate.class).addOrder(
					Order.desc("Id"));

			opdTemplateList = c.list();
			pvmsNoList = (List) mapForDS.get("pvmsNoList");
			frequencyList = (List) mapForDS.get("frequencyList");
			dosageList = (List) mapForDS.get("dosageList");
			totalList = (List) mapForDS.get("totalList");
			typeLeftRightList = (List) mapForDS.get("typeLeftRightList");
			noOfDaysList = (List) mapForDS.get("noOfDaysList");
			instuctionList = (List) mapForDS.get("instuctionList");
			int departmentId = opdTemplate.getDepartment().getId();
			String lastChgBy = (String) mapForDS.get("changedBy");
			String currentTime = (String) mapForDS.get("currentTime");
			Date currentDate = (Date) mapForDS.get("currentDate");
		

			MasStoreItem masStoreItem = new MasStoreItem();
			for (int i = 0; i < pvmsNoList.size(); i++) {
				OpdTemplateTreatment opdTemplateTreatment = new OpdTemplateTreatment();
				opdTemplateTreatment.setDepartment(new MasDepartment(
						departmentId));
				opdTemplateTreatment.setTemplate(new OpdTemplate(
						opdTemplateList.get(0).getId()));
		
				masStoreItem = (MasStoreItem) session.createCriteria(
						MasStoreItem.class).add(
						Restrictions.eq("PvmsNo", (String) pvmsNoList.get(i)))
						.list().get(0);
				
				opdTemplateTreatment.setItem(new MasStoreItem(masStoreItem
						.getId()));
				opdTemplateTreatment.setDosage((String) dosageList.get(i));
			/*	if (instuctionList.get(i) != 0) {
					opdTemplateTreatment.setOpdInstructionTreatment(new OpdInstructionTreatment((Integer) instuctionList.get(i)));
				}
               */
				if (instuctionList.get(i) != "") {
					opdTemplateTreatment.setInstruction(instuctionList.get(i));
				}
               
				
				opdTemplateTreatment.setNoofdays((Integer) noOfDaysList.get(i));
				opdTemplateTreatment.setTotal((Integer) totalList.get(i));
				opdTemplateTreatment.setFrequency(new MasFrequency(
						(Integer) frequencyList.get(i)));
				opdTemplateTreatment.setLastChgBy(lastChgBy);
				opdTemplateTreatment.setLastChgDate(currentDate);
				opdTemplateTreatment.setLastChgTime(currentTime);
				opdTemplateTreatment.setStatus("y");
				hbt.save(opdTemplateTreatment);
				hbt.refresh(opdTemplateTreatment);

				    flag = true;
					
			}
			tx.commit();
		}// close else
			}catch (Exception e) {
			if (tx != null)
				tx.rollback();
				e.printStackTrace();
				e.getMessage();
				e.getCause();

			} finally {
				// --------Session Closing----------
				session.close();
			}




		return flag;
	}
	
	
	
	
	public boolean addInvestigationTemplate(Map mapForDS) {
		Session session = (Session) getSession();
		boolean flag = false;
		String templateName = "";
		Transaction tx = null;
		String msg = "";
		
		int hospitalId = (Integer)mapForDS.get("hospitalId");
		int deptId = (Integer)mapForDS.get("departmentId");
		int docId = (Integer)mapForDS.get("docId");
		try {
		tx = session.beginTransaction();
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();

		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		List<Integer> chargeCodeCodeList = new ArrayList<Integer>();
		//List qtyList = new ArrayList();
		List clinicalList = new ArrayList();
		List<OpdTemplate> existingOpdTemplateList = new ArrayList<OpdTemplate>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<OpdTemplate> opdTemplateList = new ArrayList<OpdTemplate>();
		if(mapForDS.get("templateName") != null){
			templateName =(String)mapForDS.get("templateName");
		}
	//	System.out.println("templateName==="+templateName);
		existingOpdTemplateList = session.createCriteria(OpdTemplate.class)
				.createAlias("Hospital", "hospital").add(Restrictions.eq("hospital.Id", hospitalId))
				.createAlias("Department", "dept").add(Restrictions.eq("dept.Id", deptId))
				.createAlias("Doctor", "doctor").add(Restrictions.eq("doctor.Id", docId))
				.add(Restrictions.eq("TemplateName", templateName).ignoreCase()).list();
		//System.out.println("existingOpdTemplateList==="+existingOpdTemplateList.size());
		if(existingOpdTemplateList.size()>0){
			msg = "Record already exist";
			flag= false;
		}else{
		OpdTemplate opdTemplate = (OpdTemplate) mapForDS.get("opdTemplate");
			hbt.save(opdTemplate);
			Criteria c = session.createCriteria(OpdTemplate.class).addOrder(
					Order.desc("Id"));

			opdTemplateList = c.list();
			chargeCodeCodeList = (List<Integer>) mapForDS.get("chargeCodeCodeList");
			//qtyList = (List) mapForDS.get("qtyList");
			clinicalList = (List) mapForDS.get("clinicalList");

			int departmentId = opdTemplate.getDepartment().getId();
			String lastChgBy = (String) mapForDS.get("changedBy");
			String currentTime = (String) mapForDS.get("currentTime");
			Date currentDate = (Date) mapForDS.get("currentDate");
			MasChargeCode masChargeCode = new MasChargeCode();
			for (int i = 0; i < chargeCodeCodeList.size(); i++) {
				OpdTemplateInvestigation opdTemplateInvestigation = new OpdTemplateInvestigation();
				opdTemplateInvestigation.setDepartment(new MasDepartment(
						departmentId));
				opdTemplateInvestigation.setTemplate(new OpdTemplate(
						opdTemplateList.get(0).getId()));
			/*	masChargeCode = (MasChargeCode) session.createCriteria(
						MasChargeCode.class).add(
						Restrictions.eq("ChargeCodeCode",
								(String) chargeCodeCodeList.get(i))).list()
						.get(0);*/
				
				opdTemplateInvestigation.setChargeCode(new MasChargeCode(
						chargeCodeCodeList.get(i)));
				//opdTemplateInvestigation.setTemplateInvestigationQty((Integer) qtyList.get(i));
				//opdTemplateInvestigation.setClinicalNotes((String) clinicalList.get(i));
				opdTemplateInvestigation.setLastChgBy(lastChgBy);
				opdTemplateInvestigation.setLastChgDate(currentDate);
				opdTemplateInvestigation.setLastChgTime(currentTime);
				opdTemplateInvestigation.setStatus("y");
				hbt.save(opdTemplateInvestigation);
				
			}
			flag=true;
			tx.commit();
		}
		} catch (Exception e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();

		} 
		return flag;
	}

	public Map<String, Object> getListForTreatment(Map<String, Object> mapForDs) {
		Session session = (Session) getSession();
		int deptId = 0;
		int hospitalId=0;
int docId =0;
		if (mapForDs.get("deptId") != null) {
			deptId = (Integer) mapForDs.get("deptId");
		}
		if (mapForDs.get("hospitalId") != null) {
			hospitalId = (Integer) mapForDs.get("hospitalId");
		}
		
		if (mapForDs.get("docId") != null) {
			docId = (Integer) mapForDs.get("docId");
		}

		List<OpdTemplate> templateList = new ArrayList<OpdTemplate>();

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			templateList = session.createCriteria(OpdTemplate.class)
					.createAlias("Department", "dept").add(Restrictions.eq("dept.Id", deptId))
					.createAlias("Hospital", "hosp").add(Restrictions.eq("hosp.Id", hospitalId))
					.createAlias("Doctor", "doctor").add(Restrictions.eq("doctor.Id", docId))
					.add(Restrictions.eq("Status", "y")).list();
			map.put("templateList", templateList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public String generateDiagNumber(int subChargeId) {

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		List<DiagParam> diagParamList = new ArrayList<DiagParam>();
		Session session = (Session) getSession();
		String diagSeqNo = "";
		String date = "";
		String subChargeCode = "";
		String prefix = "";
		date = (String) utilMap.get("currentDate");
		String criteria = "";
		String currentMonth = date.substring(date.indexOf("/") + 1, date
				.lastIndexOf("/"));
		String currentYear = date.substring(date.lastIndexOf("/") + 1);
		List<DgSampleCollectionHeader> sampleCollList = new ArrayList<DgSampleCollectionHeader>();
		try {

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			diagParamList = session.createCriteria(DiagParam.class)
					.createAlias("SubCharge", "charge").add(
							Restrictions.eq("charge.Id", subChargeId)).add(
							Restrictions.eq("Status", "y")).list();
			if (diagParamList.size() > 0) {
				DiagParam diagParam = (DiagParam) diagParamList.get(0);
				criteria = diagParam.getCriteria();
				if (criteria.equals("c")) {
					int seqNo = diagParam.getSeqNo();
					DiagParam diagParamobj = (DiagParam) hbt.load(
							DiagParam.class, diagParam.getId());
					diagParamobj.setSeqNo((seqNo + 1));
					hbt.update(diagParamobj);
					// subChargeCode =
					// diagParam.getSubCharge().getSubChargecodeCode();
					prefix = diagParam.getPrefix();

					diagSeqNo = diagSeqNo.concat(String.valueOf(seqNo + 1));
					diagSeqNo = diagSeqNo.concat("/").concat(prefix);
					// diagSeqNo =
					// diagSeqNo.concat("/").concat(serviceStatusCode);
					diagSeqNo = diagSeqNo.concat("/").concat(currentMonth);
					diagSeqNo = diagSeqNo.concat("/").concat(currentYear);
				}
				if (criteria.equals("m")) {
					int seqNo = diagParam.getSeqNo();
					Date now = new Date();
					Calendar today = Calendar.getInstance();
					// today.setTime(now);

					boolean mnthchnged = false;
					if ((mnthchnged == false)
							&& (today.get(Calendar.DATE) == 1) && seqNo != 1) {
						seqNo = 0;
						mnthchnged = true;
					} else {
						seqNo = diagParam.getSeqNo();
					}
					if ((mnthchnged == true) && (today.get(Calendar.DATE) != 1)) {
						mnthchnged = false;
					}
					DiagParam diagParamobj = (DiagParam) hbt.load(
							DiagParam.class, diagParam.getId());
					diagParamobj.setSeqNo((seqNo + 1));
					hbt.update(diagParamobj);

					// subChargeCode =
					// diagParam.getSubCharge().getSubChargecodeCode();
					prefix = diagParam.getPrefix();

					diagSeqNo = diagSeqNo.concat(String.valueOf(seqNo + 1));
					diagSeqNo = diagSeqNo.concat("/").concat(prefix);
					diagSeqNo = diagSeqNo.concat("/").concat(currentMonth);
					diagSeqNo = diagSeqNo.concat("/").concat(currentYear);
				}
				if (criteria.equals("y")) {
					int seqNo = diagParam.getSeqNo();
					Calendar today = Calendar.getInstance();
					boolean yrChangd = false;
					if ((yrChangd == false)
							&& (today.MONTH == Calendar.JANUARY)
							&& (today.DAY_OF_MONTH == 1) && seqNo != 1) {
						seqNo = 0;
						yrChangd = true;
					} else {
						seqNo = diagParam.getSeqNo();
					}
					if ((yrChangd == false) && (today.DAY_OF_MONTH != 1)) {
						yrChangd = false;
					}

					DiagParam diagParamobj = (DiagParam) hbt.load(
							DiagParam.class, diagParam.getId());
					diagParamobj.setSeqNo((seqNo + 1));
					hbt.update(diagParamobj);
					// subChargeCode =
					// diagParam.getSubCharge().getSubChargecodeCode();
					prefix = diagParam.getPrefix();

					diagSeqNo = diagSeqNo.concat(String.valueOf(seqNo + 1));
					diagSeqNo = diagSeqNo.concat("/").concat(prefix);
					diagSeqNo = diagSeqNo.concat("/").concat(currentMonth);
					diagSeqNo = diagSeqNo.concat("/").concat(currentYear);
				}
			} else if (diagParamList.size() == 0) {
			}

		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return diagSeqNo;
	}

	/**
	 * -------------------------Start of methods for OPD Details Update By
	 * Naresh----------------------------
	 */

	public Map<String, Object> showOrderBookingForInvestigationJsp(
			Map<String, Object> mapForDs) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<Visit> visitList = new ArrayList<Visit>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		// List<Integer> maxVisitIdList = new ArrayList<Integer>();
		List<Visit> visitIdList = new ArrayList<Visit>();
		List<DischargeIcdCode> icdList = new ArrayList<DischargeIcdCode>();
		List<OpdTemplate> templateList = new ArrayList<OpdTemplate>();
		List orderNo = new ArrayList();
		// int maxVisitId = 0;
		int doctorId = 0;
		int visitId = 0;
		if (mapForDs.get("visitId") != null) {
			visitId = (Integer) mapForDs.get("visitId");
		}

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			visitList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();
			employeeList = session.createCriteria(MasEmployee.class).add(
					Restrictions.eq("Status", "y")).list();

			Visit visit = new Visit();
			visit = visitList.get(0);

			int hinId = visit.getHin().getId();
			try {
				// maxVisitIdList =
				// hbt.find("select max(v.Id) from jkt.hms.masters.business." +
				// "Visit v join v.Hin as p where p.Id = "+ hinId);

			} catch (DataAccessException e) {
				e.printStackTrace();
			}

			// maxVisitId = maxVisitIdList.get(0);
			try {
				// visitIdList = session.createCriteria(Visit.class)
				// .add(Restrictions.eq("Id", maxVisitId))
				// .list();
				// Visit lastVisit = new Visit();
				// lastVisit=(Visit)visitIdList.get(0);
				if(visit.getDoctor()!=null){
				doctorId = visit.getDoctor().getId();
				}

			} catch (DataAccessException e) {
				e.printStackTrace();
			}
			icdList = session.createCriteria(DischargeIcdCode.class)
					.createAlias("Visit", "v").add(
							Restrictions.eq("v.Id", visitId)).list();

			templateList = session.createCriteria(OpdTemplate.class)
					.createAlias("Department", "dept").createAlias(
							"dept.DepartmentType", "deptType").add(
							Restrictions.eq("deptType.DepartmentTypeCode",
									"DIAG")).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("doctorId", doctorId);
		map.put("icdList", icdList);
		map.put("orderNo", orderNo);
		map.put("visitList", visitList);
		map.put("employeeList", employeeList);
		map.put("templateList", templateList);
		return map;
	}

	public String getOrderSeqForDisplay(String string) {
		List<Integer> orderSeqNoList = new ArrayList<Integer>();
		List<DgOrderhd> seqNoList = new ArrayList<DgOrderhd>();
		String orderSeqNo = "";
		String lastSeqNo = "";
		String lastSeqYear = "";

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");

		String currentYear = date.substring(date.lastIndexOf("/") + 1);
		Session session = (Session) getSession();
		try {
			seqNoList = session.createCriteria(DgOrderhd.class).list();
			if (seqNoList.size() > 0) {
				for (DgOrderhd dgOrderhd : seqNoList) {
					lastSeqNo = dgOrderhd.getOrderNo();
				}
				StringTokenizer str = new StringTokenizer(lastSeqNo, "/");
				while (str.hasMoreTokens()) {
					lastSeqYear = str.nextToken();
				}
			} else {
				lastSeqYear = currentYear;
			}

			// session.createCriteria(TransactionSequence.class)
			// .setProjection(Projections.groupProperty(""))
			// .list();

			orderSeqNoList = session.createCriteria(TransactionSequence.class)
					.add(Restrictions.eq("TransactionPrefix", "ON"))
					.setProjection(
							Projections.projectionList().add(
									Projections
											.max("TransactionSequenceNumber")))
					.list();
			if (orderSeqNoList.size() > 0) {
				for (Integer maxOrderNo : orderSeqNoList) {
					if (currentYear.equals(lastSeqYear)) {
						orderSeqNo = String.valueOf(maxOrderNo + 1);
					} else {
						orderSeqNo = String.valueOf(1);
					}
				}
			} else {
				orderSeqNo = String.valueOf(1);
			}
			orderSeqNo = orderSeqNo.concat("/").concat(
					String.valueOf(lastSeqYear));
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return orderSeqNo;
	}

	public Map<String, Object> getMainAndSubCharge() {
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		List<MasMainChargecode> mainChargeCodeList = new ArrayList<MasMainChargecode>();
		List<MasSubChargecode> subChargeCodeList = new ArrayList<MasSubChargecode>();
		List<MasChargeCode> chargeCodeList = new ArrayList<MasChargeCode>();

		Session session = (Session) getSession();
		try {
			List lst = new ArrayList();
			lst.add("DIAG");
			lst.add("RADIO");
			mainChargeCodeList = session
					.createCriteria(MasMainChargecode.class).add(
							Restrictions.eq("Status", "y")).createAlias(
							"Department", "dept").createAlias(
							"dept.DepartmentType", "dt").add(
							Restrictions.in("dt.DepartmentTypeCode", lst))
					.list();
			subChargeCodeList = session.createCriteria(MasSubChargecode.class)
					.add(Restrictions.eq("Status", "y")).list();
			chargeCodeList = session.createCriteria(MasChargeCode.class).add(
					Restrictions.eq("Status", "y")).list();

			if (mainChargeCodeList.size() > 0) {
				detailsMap.put("mainChargeCodeList", mainChargeCodeList);
			}
			if (subChargeCodeList.size() > 0) {
				detailsMap.put("subChargeCodeList", subChargeCodeList);
			}
			if (chargeCodeList.size() > 0) {
				detailsMap.put("chargeCodeList", chargeCodeList);
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return detailsMap;
	}

	public Map<String, Object> submitSampleCollection(
			Map<String, Object> parameterMap) {

		// ----------Saving Data in DgSampleCollection's Table where MainCharge
		// is LAB-----------------------------
		List chargeList = new ArrayList();
		List subChargeList = new ArrayList();
		Box box = null;
		int departmentId = 0;
		int hospitalId = 0;
		int userId = 0;
		String orderSeqNo = "";
		String createdBy = "";
		String userName = "";
		int dgOrderhdIdAftersave = 0;

		if (parameterMap.get("box") != null) {
			box = (Box) parameterMap.get("box");
		}
		if (parameterMap.get("dgOrderhdIdAftersave") != null) {
			dgOrderhdIdAftersave = (Integer) parameterMap
					.get("dgOrderhdIdAftersave");
		}

		chargeList = (List) parameterMap.get("chargeList");

		if (parameterMap.get("subChargeList") != null) {
			subChargeList = (List) parameterMap.get("subChargeList");
		}
		if (parameterMap.get("hospitalId") != null) {
			hospitalId = (Integer) parameterMap.get("hospitalId");
		}
		if (parameterMap.get("departmentId") != null) {
			departmentId = (Integer) parameterMap.get("departmentId");
		}
		if (parameterMap.get("userName") != null) {
			userName = (String) parameterMap.get("userName");
		}
		Map<String, Object> utilMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();

		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");

		Transaction tx = null;
		Session session = (Session) getSession();

		tx = session.beginTransaction();
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

		Vector charge_code_Id = box.getVector(CHARGE_CODE_ID);
		DgSampleCollectionHeader dgSampleCollectionHeader = new DgSampleCollectionHeader();
		List<MasChargeCode> chargeCodeList = new ArrayList<MasChargeCode>();
		boolean goneInLoop = false;
		try {
			tx = session.beginTransaction();
			// //////////
			for (int j = 0; j < chargeList.size() && !goneInLoop; j++) {
				int chargeCodeId = Integer.parseInt("" + chargeList.get(j));
				chargeCodeList = session.createCriteria(MasChargeCode.class)
						.add(Restrictions.eq("Id", chargeCodeId)).createAlias(
								"MainChargecode", "mcc").createAlias(
								"mcc.Department", "dept").createAlias(
								"dept.DepartmentType", "dt").add(
								Restrictions
										.eq("dt.DepartmentTypeCode", "DIAG"))
						.list();

				if (chargeCodeList.size() > 0) {
					for (MasChargeCode chargeCode : chargeCodeList) {
						try {
							int inpatientId = 0;
							int visitId = 0;
							if (box.getInt(INPATIENT_ID) != 0) {
								inpatientId = box.getInt(INPATIENT_ID);
								Inpatient inpatient = new Inpatient();
								inpatient.setId(inpatientId);
								dgSampleCollectionHeader
										.setInpatient(inpatient);
								dgSampleCollectionHeader.setPatientType("IP");
							} else if (box.getString(VISIT_ID) != null
									&& !box.getString(VISIT_ID).equals("")) {
								visitId = box.getInt(VISIT_ID);
								Visit visit = new Visit();
								visit.setId(visitId);
								dgSampleCollectionHeader.setVisit(visit);
								dgSampleCollectionHeader.setPatientType("OP");
							}
							int hinId = box.getInt(HIN_ID);

							int collectionCenterId = box
									.getInt(COLLECTION_CENTER_ID);
							if (hinId != 0) {
								Patient patient = new Patient();
								patient.setId(hinId);
								dgSampleCollectionHeader.setHin(patient);
							}
							if (hospitalId != 0) {
								MasHospital hospital = new MasHospital();
								hospital.setId(hospitalId);
								dgSampleCollectionHeader.setHospital(hospital);
							}

							if (departmentId != 0) {
								MasDepartment masDepartment = new MasDepartment();
								masDepartment.setId(chargeCode
										.getMainChargecode().getDepartment()
										.getId());
								dgSampleCollectionHeader
										.setDepartment(masDepartment);
							}

							if (departmentId != 0) {
								MasDepartment orderByDepartment = new MasDepartment();
								orderByDepartment.setId(departmentId);
								dgSampleCollectionHeader
										.setOrderByDepartment(orderByDepartment);
							}
							if (dgOrderhdIdAftersave != 0) {
								DgOrderhd dgOrderhd = new DgOrderhd();
								dgOrderhd.setId(dgOrderhdIdAftersave);
								dgSampleCollectionHeader.setOrder(dgOrderhd);
							}

							if (collectionCenterId != 0) {
								DgCollectionCenter dgCollectionCenter = new DgCollectionCenter();
								dgCollectionCenter.setId(collectionCenterId);
								dgSampleCollectionHeader
										.setCollectionCenter(dgCollectionCenter);
							}

							dgSampleCollectionHeader.setOrderStatus("P");
							dgSampleCollectionHeader.setLastChgBy(userName);
							dgSampleCollectionHeader.setLastChgDate(HMSUtil
									.convertStringTypeDateToDateType(date));
							dgSampleCollectionHeader.setLastChgTime(time);
							dgSampleCollectionHeader.setDiagnosisDate(HMSUtil
									.convertStringTypeDateToDateType(date));
							dgSampleCollectionHeader.setDiagnosisTime(time);
							hbt.save(dgSampleCollectionHeader);

						} catch (DataAccessException e) {
							e.printStackTrace();
						}
						try {

							int collectedBy = box.getInt(EMPLOYEE_ID);
							for (int i = 0; i < chargeList.size(); i++) {
								int chargeId = 0;
								if (chargeList.get(i) != null
										&& !chargeList.get(i).equals("")) {
									chargeId = Integer
											.parseInt((String) chargeList
													.get(i));
									MasChargeCode maschrgCode = (MasChargeCode) session
											.createCriteria(MasChargeCode.class)
											.add(
													Restrictions.eq("Id",
															chargeId)).list()
											.get(0);
									if (maschrgCode.getMainChargecode()
											.getMainChargecodeCode()
											.equalsIgnoreCase("Lab")) {
										MasChargeCode masChargeCode = new MasChargeCode();
										MasSubChargecode masSubChargecode = new MasSubChargecode();

										DgSampleCollectionDetails dgSampleCollectionDetails = new DgSampleCollectionDetails();
										dgSampleCollectionDetails
												.setSampleCollectionHeader(dgSampleCollectionHeader);

										dgSampleCollectionDetails
												.setCollected("y");

										masChargeCode.setId(Integer
												.parseInt((String) chargeList
														.get(i)));
										dgSampleCollectionDetails
												.setChargeCode(masChargeCode);

										MasMainChargecode masMainChargecode = new MasMainChargecode();
										masMainChargecode.setId(maschrgCode
												.getMainChargecode().getId());
										dgSampleCollectionDetails
												.setMaincharge(masMainChargecode);

										if (subChargeList.get(i) != null
												&& !subChargeList.get(i)
														.equals("")) {
											masSubChargecode
													.setId(Integer
															.parseInt((String) subChargeList
																	.get(i)));
											dgSampleCollectionDetails
													.setSubcharge(masSubChargecode);
										}
										MasEmployee masEmployee = new MasEmployee();
										masEmployee.setId(collectedBy);
										dgSampleCollectionDetails
												.setCollectedBy(masEmployee);

										dgSampleCollectionDetails
												.setDiagNo(generateDiagNumber(Integer
														.parseInt((String) subChargeList
																.get(i))));

										dgSampleCollectionDetails
												.setInvestigation(new DgMasInvestigation(
														chargeId));
										dgSampleCollectionDetails
												.setLastChgBy(userName);
										dgSampleCollectionDetails
												.setLastChgDate(HMSUtil
														.convertStringTypeDateToDateType(date));
										dgSampleCollectionDetails
												.setLastChgTime(time);
										dgSampleCollectionDetails
												.setRejected("n");
										dgSampleCollectionDetails
												.setSampleCollDatetime(new Date());
										dgSampleCollectionDetails
												.setOrderStatus("P");
										try {
											hbt.save(dgSampleCollectionDetails);
										} catch (RuntimeException e) {
											e.printStackTrace();
										}
									}
								}
							}
						} catch (NumberFormatException e) {
							e.printStackTrace();
						}
					}
					goneInLoop = true;
				}
			}
			// //////////
			tx.commit();
		} catch (Exception e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();
		}

		return map;
	}

	public Map<String, Object> submitOrderBookingForInvestigation(
			Map<String, Object> infoMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		DgOrderhd dgOrderhd = new DgOrderhd();
		List chargeList = new ArrayList();
		List subChargeList = new ArrayList();
		List mainChargeList = new ArrayList();
		List qtyList = new ArrayList();
		boolean success = false;
		Box box = null;
		int chargeMainIdFromRequest = 0;
		int dgOrderhdId = 0;
		int departmentId = 0;
		int hospitalId = 0;
		int userId = 0;
		String orderSeqNo = "";
		String createdBy = "";
		String userName = "";
		if (infoMap.get("hospitalId") != null) {
			hospitalId = (Integer) infoMap.get("hospitalId");
		}
		if (infoMap.get("departmentId") != null) {
			departmentId = (Integer) infoMap.get("departmentId");
		}
		if (infoMap.get("userName") != null) {
			userName = (String) infoMap.get("userName");
		}
		if (infoMap.get("dgOrderhd") != null) {
			dgOrderhd = (DgOrderhd) infoMap.get("dgOrderhd");
		}
		if (infoMap.get("qtyList") != null) {
			qtyList = (List) infoMap.get("qtyList");
		}
		if (infoMap.get("mainChargeList") != null) {
			mainChargeList = (List) infoMap.get("mainChargeList");
		}
		if (infoMap.get("subChargeList") != null) {
			subChargeList = (List) infoMap.get("subChargeList");
		}
		if (infoMap.get("userId") != null) {
			userId = (Integer) infoMap.get("userId");
		}
		if (infoMap.get("chargeMainIdFromRequest") != null) {
			chargeMainIdFromRequest = (Integer) infoMap
					.get("chargeMainIdFromRequest");
		}
		if (infoMap.get("departmentId") != null) {
			departmentId = (Integer) infoMap.get("departmentId");
		}
		if (infoMap.get("createdBy") != null) {
			createdBy = (String) infoMap.get("createdBy");
		}
		if (infoMap.get("placedBy") != null) {
			createdBy = (String) infoMap.get("placedBy");
		}
		if (infoMap.get("orderSeqNo") != null) {
			orderSeqNo = (String) infoMap.get("orderSeqNo");
		}
		if (infoMap.get("box") != null) {
			box = (Box) infoMap.get("box");
		}
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		Session session = (Session) getSession();
		Users user = new Users();
		user.setId(userId);
		Transaction tx = null;

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			tx = session.beginTransaction();
			if (infoMap.get("dgOrderhd") != null) {
				dgOrderhd = (DgOrderhd) infoMap.get("dgOrderhd");
				hbt.save(dgOrderhd);
				dgOrderhdId = dgOrderhd.getId();
				map.put("dgOrderhdId", dgOrderhdId);
			} else {

				DgOrderhd dgOrderhdObj = new DgOrderhd();
				dgOrderhdObj = (DgOrderhd) hbt.load(DgOrderhd.class,
						chargeMainIdFromRequest);
				hbt.update(dgOrderhdObj);
			}
			int mainChargeId = 0;
			if (infoMap.get("chargeList") != null) {
				chargeList = (List) infoMap.get("chargeList");
				if (chargeList.size() > 0) {
					for (int i = 0; i < chargeList.size(); i++) {

						DgOrderdt dgOrderdt = new DgOrderdt();
						MasChargeCode masChargeCode = new MasChargeCode();
						MasSubChargecode masSubChargecode = new MasSubChargecode();
						MasMainChargecode masMainChargecode = new MasMainChargecode();

						try {
							if (chargeList.get(i) != null
									&& !chargeList.get(i).equals("")) {
								int chargeId = Integer.parseInt(chargeList.get(
										i).toString());
								MasChargeCode maschrgCode = (MasChargeCode) session
										.createCriteria(MasChargeCode.class)
										.add(Restrictions.eq("Id", chargeId))
										.list().get(0);
								if (maschrgCode.getMainChargecode()
										.getMainChargecodeCode()
										.equalsIgnoreCase("Lab")) {
									dgOrderdt.setOrderStatus("C");
								} else {
									dgOrderdt.setOrderStatus("P");
								}
								dgOrderdt.setChargeCode(maschrgCode);

								// masChargeCode.setId(chargeId);
								// dgOrderdt.setChargeCode(masChargeCode);

								dgOrderdt
										.setInvestigation(new DgMasInvestigation(
												chargeId));

								if (mainChargeList.get(i) != null
										&& !mainChargeList.get(i).equals("")) {
									mainChargeId = Integer
											.parseInt(mainChargeList.get(i)
													.toString());
									masMainChargecode.setId(mainChargeId);
									dgOrderdt
											.setMainChargecode(masMainChargecode);
								}

								if (subChargeList.get(i) != null
										&& !subChargeList.get(i).equals("")) {
									int subChargeId = Integer
											.parseInt(subChargeList.get(i)
													.toString());
									masSubChargecode.setId(subChargeId);
									dgOrderdt.setSubChargeid(masSubChargecode);
								}
								// if (qtyList.get(i) != null &&
								// !qtyList.get(i).equals("")) {
								// int qty = Integer.parseInt(""+
								// qtyList.get(i));
								// dgOrderdt.setOrderQty(qty);
								dgOrderdt.setCreatedby(createdBy);
								dgOrderdt.setCreatedon(HMSUtil
										.convertStringTypeDateToDateType(date));
								dgOrderdt.setLastChgBy(user);
								dgOrderdt.setLastChgDate(HMSUtil
										.convertStringTypeDateToDateType(date));
								dgOrderdt.setLastChgTime(time);
								// dgOrderdt.setOrderStatus("P");
								if (infoMap.get("dgOrderhd") != null) {
									dgOrderdt.setOrderhd(dgOrderhd);

								} else {
									DgOrderhd dgOrderheader = new DgOrderhd();
									dgOrderheader
											.setId(chargeMainIdFromRequest);
									dgOrderdt.setOrderhd(dgOrderheader);
								}
								// }
								hbt.save(dgOrderdt);

							}

						} catch (RuntimeException e) {
							e.printStackTrace();
						}

					}
				}
			}
			// ----------Saving Data in DgSampleCollection's Table where
			// MainCharge is RADIOLOGY-----------------------------
			Vector charge_code_Id = box.getVector(CHARGE_CODE_ID);
			DgSampleCollectionHeader dgSampleCollectionHeader = new DgSampleCollectionHeader();
			List<MasChargeCode> chargeCodeList = new ArrayList<MasChargeCode>();
			boolean goneInLoop = false;

			for (int j = 0; j < chargeList.size() && !goneInLoop; j++) {
				int chargeCodeId = Integer.parseInt("" + chargeList.get(j));
				chargeCodeList = session.createCriteria(MasChargeCode.class)
						.add(Restrictions.eq("Id", chargeCodeId)).createAlias(
								"MainChargecode", "mcc").createAlias(
								"mcc.Department", "dept").createAlias(
								"dept.DepartmentType", "dt").add(
								Restrictions.eq("dt.DepartmentTypeCode",
										"RADIO")).list();

				if (chargeCodeList.size() > 0) {
					for (MasChargeCode chargeCode : chargeCodeList) {
						try {
							int inpatientId = 0;
							int visitId = 0;
							if (box.getInt(INPATIENT_ID) != 0) {
								inpatientId = box.getInt(INPATIENT_ID);
								Inpatient inpatient = new Inpatient();
								inpatient.setId(inpatientId);
								dgSampleCollectionHeader
										.setInpatient(inpatient);
								dgSampleCollectionHeader.setPatientType("IP");
							} else if (box.getString(VISIT_ID) != null
									&& !box.getString(VISIT_ID).equals("")) {
								visitId = box.getInt(VISIT_ID);
								Visit visit = new Visit();
								visit.setId(visitId);
								dgSampleCollectionHeader.setVisit(visit);
								dgSampleCollectionHeader.setPatientType("OP");
							}
							int hinId = box.getInt(HIN_ID);

							int collectionCenterId = box
									.getInt(COLLECTION_CENTER_ID);
							if (hinId != 0) {
								Patient patient = new Patient();
								patient.setId(hinId);
								dgSampleCollectionHeader.setHin(patient);
							}
							if (hospitalId != 0) {
								MasHospital hospital = new MasHospital();
								hospital.setId(hospitalId);
								dgSampleCollectionHeader.setHospital(hospital);
							}

							if (departmentId != 0) {
								MasDepartment masDepartment = new MasDepartment();
								masDepartment.setId(chargeCode
										.getMainChargecode().getDepartment()
										.getId());
								dgSampleCollectionHeader
										.setDepartment(masDepartment);
							}

							if (departmentId != 0) {
								MasDepartment orderByDepartment = new MasDepartment();
								orderByDepartment.setId(departmentId);
								dgSampleCollectionHeader
										.setOrderByDepartment(orderByDepartment);
							}

							dgSampleCollectionHeader.setOrder(dgOrderhd);

							if (collectionCenterId != 0) {
								DgCollectionCenter dgCollectionCenter = new DgCollectionCenter();
								dgCollectionCenter.setId(collectionCenterId);
								dgSampleCollectionHeader
										.setCollectionCenter(dgCollectionCenter);
							}

							dgSampleCollectionHeader.setOrderStatus("P");
							dgSampleCollectionHeader.setLastChgBy(userName);
							dgSampleCollectionHeader.setLastChgDate(HMSUtil
									.convertStringTypeDateToDateType(date));
							dgSampleCollectionHeader.setLastChgTime(time);
							dgSampleCollectionHeader.setDiagnosisDate(HMSUtil
									.convertStringTypeDateToDateType(date));
							dgSampleCollectionHeader.setDiagnosisTime(time);
							hbt.save(dgSampleCollectionHeader);

						} catch (DataAccessException e) {
							e.printStackTrace();
						}
						try {

							int collectedBy = box.getInt(EMPLOYEE_ID);
							for (int i = 0; i < chargeList.size(); i++) {
								int chargeId = 0;
								if (chargeList.get(i) != null
										&& !chargeList.get(i).equals("")) {
									chargeId = Integer
											.parseInt((String) chargeList
													.get(i));
									MasChargeCode maschrgCode = (MasChargeCode) session
											.createCriteria(MasChargeCode.class)
											.add(
													Restrictions.eq("Id",
															chargeId)).list()
											.get(0);
									if (maschrgCode.getMainChargecode()
											.getMainChargecodeCode()
											.equalsIgnoreCase("RADIO")) {
										MasChargeCode masChargeCode = new MasChargeCode();
										MasSubChargecode masSubChargecode = new MasSubChargecode();

										DgSampleCollectionDetails dgSampleCollectionDetails = new DgSampleCollectionDetails();
										dgSampleCollectionDetails
												.setSampleCollectionHeader(dgSampleCollectionHeader);

										dgSampleCollectionDetails
												.setCollected("y");

										masChargeCode.setId(Integer
												.parseInt((String) chargeList
														.get(i)));
										dgSampleCollectionDetails
												.setChargeCode(masChargeCode);

										MasMainChargecode masMainChargecode = new MasMainChargecode();
										masMainChargecode.setId(maschrgCode
												.getMainChargecode().getId());
										dgSampleCollectionDetails
												.setMaincharge(masMainChargecode);

										if (subChargeList.get(i) != null
												&& !subChargeList.get(i)
														.equals("")) {
											masSubChargecode
													.setId(Integer
															.parseInt((String) subChargeList
																	.get(i)));
											dgSampleCollectionDetails
													.setSubcharge(masSubChargecode);
										}
										MasEmployee masEmployee = new MasEmployee();
										masEmployee.setId(collectedBy);
										dgSampleCollectionDetails
												.setCollectedBy(masEmployee);

										dgSampleCollectionDetails
												.setDiagNo(generateDiagNumber(Integer
														.parseInt((String) subChargeList
																.get(i))));

										dgSampleCollectionDetails
												.setInvestigation(new DgMasInvestigation(
														chargeId));
										dgSampleCollectionDetails
												.setLastChgBy(userName);
										dgSampleCollectionDetails
												.setLastChgDate(HMSUtil
														.convertStringTypeDateToDateType(date));
										dgSampleCollectionDetails
												.setLastChgTime(time);
										dgSampleCollectionDetails
												.setRejected("n");
										dgSampleCollectionDetails
												.setSampleCollDatetime(new Date());
										dgSampleCollectionDetails
												.setOrderStatus("P");
										try {
											hbt.save(dgSampleCollectionDetails);
										} catch (RuntimeException e) {
											e.printStackTrace();
										}
									}
								}
							}
						} catch (NumberFormatException e) {
							e.printStackTrace();
						}
					}
					goneInLoop = true;
				}
			}

			success = true;
			map.put("success", success);
			tx.commit();
		} catch (Exception e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();
		}
		map.put("orderSeqNo", orderSeqNo);
		return map;
	}

	public Map<String, Object> getDetailsForVisit() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasRank> rankList = new ArrayList<MasRank>();
		List<MasServiceType> serviceTypeList = new ArrayList<MasServiceType>();
		List<MasUnit> unitList = new ArrayList<MasUnit>();

		Session session = (Session) getSession();

		try {
			rankList = session
					.createQuery(
							"select rank from MasRank as rank where rank.Status='y'  order by rank.RankName ")
					.list();
			serviceTypeList = session.createCriteria(MasServiceType.class).add(
					Restrictions.eq("Status", "y")).list();
			unitList = session.createQuery(
					"select dist from MasUnit as dist order by dist.UnitName ")
					.list();

			map.put("rankList", rankList);
			map.put("serviceTypeList", serviceTypeList);
			map.put("unitList", unitList);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return map;
	}

	public Map<String, Object> getPatientDetails(Map<String, Object> mapForDs) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Patient> patientList = new ArrayList<Patient>();
		List<PhysiotherapyVisitDetails> physiotherapyVisitDetailsList = new ArrayList<PhysiotherapyVisitDetails>();
		List<Integer> physiotherapyVisitNoList = new ArrayList<Integer>();

		String serviceNo = "";
		String hinNo = "";
		int serviceTypeId = 0;
		int rankId = 0;
		int unitId = 0;
		int physiotherapyVisitNo = 0;
		String serPersonFName = "";
		String serPersonMName = "";
		String serPersonLName = "";
		String patientFName = "";
		String patientMName = "";
		String patientLName = "";
		Date appointmentDate = null;
		Date currentDate = new Date();
		int hinId = 0;
		Session session = (Session) getSession();

		if (mapForDs.get("serviceNo") != null) {
			serviceNo = (String) mapForDs.get("serviceNo");
		}
		if (mapForDs.get("hinNo") != null) {
			hinNo = (String) mapForDs.get("hinNo");
		}
		if (mapForDs.get("serviceTypeId") != null) {
			serviceTypeId = (Integer) mapForDs.get("serviceTypeId");
		}
		if (mapForDs.get("rankId") != null) {
			rankId = (Integer) mapForDs.get("rankId");
		}
		if (mapForDs.get("unitId") != null) {
			unitId = (Integer) mapForDs.get("unitId");
		}
		if (mapForDs.get("serPersonFName") != null) {
			serPersonFName = (String) mapForDs.get("serPersonFName");
		}
		if (mapForDs.get("serPersonMName") != null) {
			serPersonMName = (String) mapForDs.get("serPersonMName");
		}
		if (mapForDs.get("serPersonLName") != null) {
			serPersonLName = (String) mapForDs.get("serPersonLName");
		}
		if (mapForDs.get("patientFName") != null) {
			patientFName = (String) mapForDs.get("patientFName");
		}
		if (mapForDs.get("patientMName") != null) {
			patientMName = (String) mapForDs.get("patientMName");
		}
		if (mapForDs.get("patientLName") != null) {
			patientLName = (String) mapForDs.get("patientLName");
		}
		if (mapForDs.get("hinId") != null) {
			hinId = (Integer) mapForDs.get("hinId");
		}
		if (mapForDs.get("appointmentDate") != null) {
			appointmentDate = (Date) mapForDs.get("appointmentDate");
		}
		
		if (hinId == 0) {
			Criteria crit = session.createCriteria(Patient.class).add(
					Restrictions.eq("PatientStatus", "Out Patient"));
			if (!serviceNo.equals("")) {
				crit = crit.add(Restrictions.eq("ServiceNo", serviceNo));
			}
			if (!hinNo.equals("")) {
				crit = crit.add(Restrictions.eq("HinNo", hinNo));
			}
			
			if (!patientFName.equals("")) {
				
				crit = crit.add(Restrictions.like("PFirstName", patientFName
						+ "%"));
			}
			if (!patientMName.equals("")) {
				crit = crit.add(Restrictions.like("PMiddleName", patientMName
						+ "%"));
			}
			if (!patientLName.equals("")) {
				crit = crit.add(Restrictions.like("PLastName", patientLName
						+ "%"));
			}
			if (!serPersonFName.equals("")) {
				crit = crit.add(Restrictions.like("SFirstName", serPersonFName
						+ "%"));
			}
			if (!serPersonMName.equals("")) {
				crit = crit.add(Restrictions.like("SMiddleName", serPersonMName
						+ "%"));
			}
			if (!serPersonLName.equals("")) {
				crit = crit.add(Restrictions.like("SLastName", serPersonLName
						+ "%"));
			}
			if (serviceTypeId != 0) {
				crit = crit.createAlias("ServiceType", "st").add(
						Restrictions.eq("st.Id", serviceTypeId));
			}
			if (rankId != 0) {
				crit = crit.createAlias("Rank", "rank").add(
						Restrictions.eq("rank.Id", rankId));
			}
			if (unitId != 0) {
				crit = crit.createAlias("Unit", "unit").add(
						Restrictions.eq("unit.Id", unitId));
			}
			if (appointmentDate != null) {
				crit = crit.createAlias("AppPatientAppointments", "ap").add(
						Restrictions.eq("ap.AppointmentDate", appointmentDate))
						.add(Restrictions.eq("ap.AppointmentStatus", "y"));

			}
			patientList = crit.list();
		} else if (hinId != 0) {
			Criteria critPhysioTherapy = session.createCriteria(
					PhysiotherapyVisitDetails.class).add(
					Restrictions.and(Restrictions.le("TreatmentStartDate",
							currentDate), Restrictions.ge("TreatmentEndDate",
							currentDate)))
					.add(Restrictions.eq("Hin.Id", hinId));
			physiotherapyVisitDetailsList = critPhysioTherapy.list();

			physiotherapyVisitNoList = session.createCriteria(
					PhysiotherapyVisitDetails.class)
			// .add(Restrictions.eq("Hin.Id", hinId))
					.setProjection(
							Projections.projectionList().add(
									Projections.rowCount())).list();
			if (physiotherapyVisitNoList.get(0) != null) {
				physiotherapyVisitNo = physiotherapyVisitNoList.get(0);
			}
			if (physiotherapyVisitDetailsList.size() == 0) {
				Criteria crit = session.createCriteria(Patient.class).add(
						Restrictions.eq("PatientStatus", "Out Patient"));
				crit = crit.add(Restrictions.idEq(hinId));
				patientList = crit.list();
			}
		}
		map.put("patientList", patientList);
		map.put("physiotherapyVisitNo", physiotherapyVisitNo);
		map.put("physiotherapyVisitDetailsList", physiotherapyVisitDetailsList);
		return map;
	}

	public int getTokenNoForDepartment(int departmentId) {
		List<Integer> tokenNoList = new ArrayList<Integer>();
		int tokenNo = 0;
		Date date = new Date();
		Session session = (Session) getSession();
		tokenNoList = session.createCriteria(PhysiotherapyVisitDetails.class,
				"v").add(Restrictions.eq("v.PhysiotherapyVisitDate", date))
				.setProjection(
						Projections.projectionList().add(
								Projections.max("TokenNo"))).list();
		if (tokenNoList.get(0) != null) {
			tokenNo = tokenNoList.get(0);
		}

		return tokenNo;
	}

	public Map<String, Object> getTreatmentList(Map<String, Object> mapForDs) {
		List<MasPhysiotherapyTreatment> treatmentList = new ArrayList<MasPhysiotherapyTreatment>();
		Session session = (Session) getSession();
		try {
			String str = "%" + mapForDs.get("autoHint") + "%";
			String query = "from MasPhysiotherapyTreatment as treatment where treatment.TreatmentName like '"
					+ str + "'";
			Query q = session.createQuery(query);
			treatmentList = q.list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		mapForDs.put("treatmentList", treatmentList);
		return mapForDs;
	}

	public Map<String, Object> savePhysiotherapyVisitDetails(
			Map<String, Object> mapForDs) {
		List<String> treatmentList = new ArrayList<String>();
		PhysiotherapyVisitDetails physiotherapyVisitDetails = new PhysiotherapyVisitDetails();
		boolean successfullyAdded = false;
		Date startDate = new Date();
		Date currentDate = new Date();
		Map<String, Object> returnMap = new HashMap<String, Object>();
		if (mapForDs.get("physiotherapyVisitDetails") != null) {
			physiotherapyVisitDetails = (PhysiotherapyVisitDetails) mapForDs
					.get("physiotherapyVisitDetails");
		}
		if (mapForDs.get("treatmentList") != null) {
			treatmentList = (List<String>) mapForDs.get("treatmentList");
		}
		if (mapForDs.get("startDate") != null) {
			startDate = (Date) mapForDs.get("startDate");
		}
		if (mapForDs.get("currentDate") != null) {
			currentDate = (Date) mapForDs.get("currentDate");
		}

		Session session = (Session) getSession();
		Transaction tx = null;
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		tx = session.beginTransaction();
		try {
			hbt.save(physiotherapyVisitDetails);
			hbt.refresh(physiotherapyVisitDetails);

			for (String treatmentId : treatmentList) {
				PhysiotherapyTreatmentDetails physiotherapyTreatmentDetails = new PhysiotherapyTreatmentDetails();
				physiotherapyTreatmentDetails
						.setPhysiotherapyVisit(physiotherapyVisitDetails);

				MasPhysiotherapyTreatment masPhysiotherapyTreatment = new MasPhysiotherapyTreatment();
				masPhysiotherapyTreatment.setId(Integer.parseInt(treatmentId));
				physiotherapyTreatmentDetails
						.setTreartment(masPhysiotherapyTreatment);
				hbt.save(physiotherapyTreatmentDetails);
				hbt.refresh(physiotherapyTreatmentDetails);
			}
			if (startDate.compareTo(currentDate) == 0) {
				PhysiotherapyAttendanceDetails physiotherapyAttendanceDetails = new PhysiotherapyAttendanceDetails();
				physiotherapyAttendanceDetails.setAttendanceDate(currentDate);
				physiotherapyAttendanceDetails.setAttendanceStatus("P");
				physiotherapyAttendanceDetails
						.setPhysiotherapyVisit(physiotherapyVisitDetails);
				hbt.save(physiotherapyAttendanceDetails);
				hbt.refresh(physiotherapyAttendanceDetails);
			}
			tx.commit();
			successfullyAdded = true;
		} catch (Exception e) {
			tx.rollback();
			e.printStackTrace();
		}
		returnMap.put("successfullyAdded", successfullyAdded);
		return returnMap;
	}

	public Map<String, Object> updatePhysiotherapyVisitDetails(
			Map<String, Object> mapForDs) {
		List<String> treatmentList = new ArrayList<String>();
		PhysiotherapyVisitDetails physiotherapyVisitDetails = new PhysiotherapyVisitDetails();
		boolean successfullyAdded = false;
		Date startDate = new Date();
		Date endDate = new Date();
		Date currentDate = new Date();
		Integer physiotherapyVisitDetailsId = 0;
		int tokenNo = 0;
		int userId = 0;
		String attendedStatus = "";
		Date addEditDate = new Date();
		String addEditTime = new String();

		Map<String, Object> returnMap = new HashMap<String, Object>();
		if (mapForDs.get("physiotherapyVisitDetailsId") != null) {
			physiotherapyVisitDetailsId = (Integer) mapForDs
					.get("physiotherapyVisitDetailsId");
		}
		if (mapForDs.get("startDate") != null) {
			startDate = (Date) mapForDs.get("startDate");
		}
		if (mapForDs.get("endDate") != null) {
			endDate = (Date) mapForDs.get("endDate");
		}
		if (mapForDs.get("currentDate") != null) {
			currentDate = (Date) mapForDs.get("currentDate");
		}
		if (mapForDs.get("tokenNo") != null) {
			tokenNo = (Integer) mapForDs.get("tokenNo");
		}
		if (mapForDs.get("attendedStatus") != null) {
			attendedStatus = (String) mapForDs.get("attendedStatus");
		}
		if (mapForDs.get("userId") != null) {
			userId = (Integer) mapForDs.get("userId");
		}
		if (mapForDs.get("addEditDate") != null) {
			addEditDate = (Date) mapForDs.get("addEditDate");
		}
		if (mapForDs.get("addEditTime") != null) {
			addEditTime = (String) mapForDs.get("addEditTime");
		}

		Session session = (Session) getSession();
		Transaction tx = null;
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		tx = session.beginTransaction();
		try {
			physiotherapyVisitDetails = (PhysiotherapyVisitDetails) hbt.load(
					PhysiotherapyVisitDetails.class,
					physiotherapyVisitDetailsId);

			physiotherapyVisitDetails.setTreatmentStartDate(startDate);
			physiotherapyVisitDetails.setTreatmentEndDate(endDate);
			physiotherapyVisitDetails.setTreatmentEndDate(endDate);
			physiotherapyVisitDetails.setTokenNo(tokenNo);

			Users users = new Users();
			users.setId(userId);
			physiotherapyVisitDetails.setLastChgBy(users);
			physiotherapyVisitDetails.setLastChgDate(addEditDate);
			physiotherapyVisitDetails.setLastChgTime(addEditTime);

			PhysiotherapyAttendanceDetails physiotherapyAttendanceDetails = new PhysiotherapyAttendanceDetails();
			physiotherapyAttendanceDetails.setAttendanceDate(currentDate);
			if (attendedStatus.equalsIgnoreCase("P")) {
				physiotherapyAttendanceDetails
						.setAttendanceStatus(attendedStatus);
			} else {
				physiotherapyAttendanceDetails.setAttendanceStatus("A");
			}

			physiotherapyAttendanceDetails
					.setPhysiotherapyVisit(physiotherapyVisitDetails);
			hbt.save(physiotherapyAttendanceDetails);
			hbt.refresh(physiotherapyAttendanceDetails);

			tx.commit();
			successfullyAdded = true;
		} catch (Exception e) {
			tx.rollback();
			e.printStackTrace();
		}
		returnMap.put("successfullyAdded", successfullyAdded);
		return returnMap;
	}

	public Map<String, Object> getVisitDetails() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		Session session = (Session) getSession();

		List<String> departmentTypeCode = new ArrayList<String>();
		departmentTypeCode.add("CR");
		departmentTypeCode.add("OPD1");
		departmentTypeCode.add("SpltOPD");

		departmentList = session.createCriteria(MasDepartment.class).add(
				Restrictions.eq("Status", "y")).createAlias("DepartmentType",
				"deptType").add(
				Restrictions.in("deptType.DepartmentTypeCode",
						departmentTypeCode)).list();

		employeeList = session.createCriteria(MasEmployee.class).add(
				Restrictions.eq("Status", "y")).createAlias("EmpCategory",
				"empCat").add(Restrictions.eq("empCat.EmpCategoryCode", "01"))
				.list();

		map.put("departmentList", departmentList);
		map.put("employeeList", employeeList);
		return map;

	}

	public Map<String, Object> showPhysiotherapyAttendanceRegisterJsp(
			Map<String, Object> mapForDs) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasServiceType> serviceTypeList = new ArrayList<MasServiceType>();
		List<MasServiceStatus> serviceStatusList = new ArrayList<MasServiceStatus>();

		Session session = (Session) getSession();

		serviceTypeList = session.createCriteria(MasServiceType.class).add(
				Restrictions.eq("Status", "y")).list();

		serviceStatusList = session.createCriteria(MasServiceStatus.class).add(
				Restrictions.eq("Status", "y")).list();

		map.put("serviceTypeList", serviceTypeList);
		map.put("serviceStatusList", serviceStatusList);
		return map;
	}

	public Map<String, Object> showDetailsForLabourRoom(
			Map<String, Object> mapForDs) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Inpatient> inpatientDetailsList = new ArrayList<Inpatient>();
		List<OpdGynaecology> opdGynaecologyList = new ArrayList<OpdGynaecology>();

		String adNo = "";
		Integer inpatientId = 0;
		if (mapForDs.get("adNo") != null) {
			adNo = (String) mapForDs.get("adNo");
		}
		Session session = (Session) getSession();

		inpatientDetailsList = session.createCriteria(Inpatient.class).add(
				Restrictions.eq("AdNo", adNo)).list();

		opdGynaecologyList = session.createCriteria(OpdGynaecology.class)
				.createAlias("Inpatient", "inpt").add(
						Restrictions.eq("inpt.AdNo", adNo)).list();

		map.put("inpatientDetailsList", inpatientDetailsList);
		map.put("opdGynaecologyList", opdGynaecologyList);

		return map;
	}
	public Map<String, Object> showItemSearchJsp(Box box) {

		List<MasStoreItem> masItemList  = new ArrayList<MasStoreItem>();
		Map<String ,Object> map= new HashMap<String, Object>();
		try 
		{
			Session session = (Session)getSession();

			if(!box.get("nomenclature").equals("")){
				String str = box.get("nomenclature");
				if (str!=null && str.length()>0)
				{
					str = "%"+ str.replace(" ", "%")+ "%";
					org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
					hbt.setFlushModeName("FLUSH_EAGER");
					hbt.setCheckWriteOperations(false);
					String query=	"from MasStoreItem as item  where upper(item.Nomenclature) like upper('"+str+"') and item.Status='y'" ;
					Query q=session.createQuery(query);
					masItemList=q.list();
				}
			} else if(!box.get("commonName").equals("")){
				String str = box.get("commonName");
				if (str!=null && str.length()>0)
				{
					str = "%"+ str.replace(" ", "%")+ "%";
					org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
					hbt.setFlushModeName("FLUSH_EAGER");
					hbt.setCheckWriteOperations(false);
					//masIcdList = session.createCriteria(MasIcd.class).add(Restrictions.like("IcdName", str)).list();
					String query=	"from MasStoreItem as item  where item.CommonName like upper('"+str+"') and item.Status='y'" ;
					Query q=session.createQuery(query);
					masItemList=q.list();
				}
			}else {
				 masItemList = session.createCriteria(MasStoreItem.class).add(Restrictions.like("PvmsNo", box.get("pvmsNo")).ignoreCase())
				.add(Restrictions.eq("Status", "y")).list();
			}
			map.put("masItemList", masItemList);
		} 
		catch (Exception e)
		{
			e.printStackTrace();
		}
		return map;

	}
	
	/*
	 * code for pending patient prescription list
	 */
	
	public Map<String, Object> getPrescriptionList(Map<String, Object> mapForDs) 
	{
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		List<PatientPrescriptionHeader> prescriptionList = new ArrayList<PatientPrescriptionHeader>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> employeeList=new ArrayList<MasEmployee>();
		
		Date currentDate = new Date();

		Session session = (Session) getSession();
		Criteria crit = null;
        int hospitalId=0;
		int deptId = 0;
		if (mapForDs.get("deptId") != null)
			deptId = Integer.parseInt("" + mapForDs.get("deptId"));
		if (mapForDs.get("hospitalId") != null)
			hospitalId = Integer.parseInt("" + mapForDs.get("hospitalId"));
        //System.out.println("hospitalId =========>"+hospitalId);
		if (mapForDs.get("currentDate") != null)
			currentDate =(Date) mapForDs.get("currentDate");

		try {
			crit = session.createCriteria(PatientPrescriptionHeader.class).createAlias(
					"Department", "dept").add(Restrictions.eq("dept.Id", deptId)).add(Restrictions.ne("Status", "c"))
					.add(Restrictions.eq("PrescriptionDate",currentDate)).add(Restrictions.eq("Hospital.Id",hospitalId))
					.add(Restrictions.isNotNull("Visit"));
			prescriptionList = crit.list();

			departmentList = session.createCriteria(MasDepartment.class).add(Restrictions.eq("Status", "y")).addOrder(Order.asc("DepartmentName")).list();
		    employeeList=session.createCriteria(MasEmployee.class).add(Restrictions.eq("EmpCategory.Id",1)).
		    add(Restrictions.eq("Hospital.Id",hospitalId)).add(Restrictions.eq("Status","y")).addOrder(Order.asc("FirstName")).list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("prescriptionList", prescriptionList);
		map.put("departmentList", departmentList);
		map.put("employeeList",employeeList);
		return map;
	}
	
	public Map<String, Object> getPrescriptionListFAC(Map<String, Object> mapForDs) 
	{
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		List<PatientPrescriptionHeader> prescriptionList = new ArrayList<PatientPrescriptionHeader>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> employeeList=new ArrayList<MasEmployee>();
		
		Date currentDate = new Date();

		Session session = (Session) getSession();
		Criteria crit = null;
        int hospitalId=0;
		int deptId = 0;
		if (mapForDs.get("deptId") != null)
			deptId = Integer.parseInt("" + mapForDs.get("deptId"));
		if (mapForDs.get("hospitalId") != null)
			hospitalId = Integer.parseInt("" + mapForDs.get("hospitalId"));
        //System.out.println("hospitalId =========>"+hospitalId);
		if (mapForDs.get("currentDate") != null)
			currentDate =(Date) mapForDs.get("currentDate");

		try {
			crit = session.createCriteria(PatientPrescriptionHeader.class).createAlias(
					"Department", "dept").add(Restrictions.eq("dept.Id", deptId)).add(Restrictions.ne("Status", "c"))
					.add(Restrictions.eq("PrescriptionDate",currentDate)).add(Restrictions.eq("Hospital.Id",hospitalId))
					.add(Restrictions.isNotNull("Visit"));
			prescriptionList = crit.list();

			departmentList = session.createCriteria(MasDepartment.class).add(Restrictions.eq("Status", "y")).addOrder(Order.asc("DepartmentName")).list();
		    employeeList=session.createCriteria(MasEmployee.class).add(Restrictions.eq("EmpCategory.Id",1)).
		    add(Restrictions.eq("Hospital.Id",hospitalId)).add(Restrictions.eq("Status","y")).addOrder(Order.asc("FirstName")).list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("prescriptionList", prescriptionList);
		map.put("departmentList", departmentList);
		map.put("employeeList",employeeList);
		return map;
	}

	public Map<String, Object> getPrescriptionDetailsFAC(Map<String, Object> mapForDs)
	{
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		List<PatientPrescriptionHeader> prescriptionList = new ArrayList<PatientPrescriptionHeader>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> employeeList=new ArrayList<MasEmployee>();
		List<Object[]> divisionList=new ArrayList<Object[]>();
		List<StoreOpPatientIssueM>  storeOpPatientIssueMList=new ArrayList<StoreOpPatientIssueM>();
		Date fromDate = new Date();
		Date toDate = new Date();
		String facStatus = (String)mapForDs.get("facStatus");
		Session session = (Session) getSession();
		Box box = (Box)mapForDs.get("box");
		int duration = Integer.parseInt(HMSUtil.getProperties("adt.properties", "prescriptionDurationForFAC"));
		int divisionIdForCorporateOffice = Integer.parseInt(HMSUtil.getProperties("adt.properties", "divisionIdForCorporateOffice"));
		Calendar cal = GregorianCalendar.getInstance();
		cal.add( Calendar.DAY_OF_YEAR, -duration);
		Date minimumDate = cal.getTime();
		
		Criteria crit = null;
		int deptId = 0;
		String employeeNo="";
		if(mapForDs.get("employeeNo") != null){
			employeeNo = (String)mapForDs.get("employeeNo");
		}
		if (mapForDs.get("deptId") != null)
			deptId = Integer.parseInt("" + mapForDs.get("deptId"));

		
		if (mapForDs.get("toDate") != null) {
			toDate = (Date) mapForDs.get("toDate");
		}
		int divisionId = 0;
		if (mapForDs.get("divisionId") != null)
			divisionId = Integer.parseInt(""+mapForDs.get("divisionId"));
		int hospitalId=0;
		if(mapForDs.get("hospitalId") != null)
			hospitalId=Integer.parseInt(""+mapForDs.get("hospitalId"));
		  crit = session.createCriteria(PatientPrescriptionHeader.class).add(
	   				Restrictions.eq("Status", "p"))
	   				.add(Restrictions.isNotNull("Visit"))
	   				.add(Restrictions.ne("Division.Id", divisionIdForCorporateOffice))
	   				//.add(Restrictions.ge("PrescriptionDate", minimumDate))
	   				.add(Restrictions.or(Restrictions.and(Restrictions.ge("PrescriptionDate", minimumDate), Restrictions.lt("PrescriptionDate", new Date())), Restrictions.and(Restrictions.eq("PrescriptionDate", new Date()), Restrictions.lt("PrescriptionTime", "09:01"))))
	   				.add(Restrictions.eq("Hospital.Id", hospitalId))
		            .add(Restrictions.isNotNull("Division"));
		  if(employeeNo!=""){
			  crit = crit.createAlias("Hin", "h").add(Restrictions.eq("h.ServiceNo", employeeNo));
		  }
		   if(deptId !=0)
	        {    
			  crit = crit.createAlias("Department", "dept").add(Restrictions.eq("dept.Id", deptId));
	        }
		    if(divisionId !=0)
	        {
			  crit = crit.add(Restrictions.eq("Division.Id", divisionId));
	        }
		   
		    if (mapForDs.get("fromDate") != null) {
				fromDate = (Date) mapForDs.get("fromDate");
				 crit = crit.add(Restrictions.eq("PrescriptionDate", fromDate));
			}
		   if(facStatus!=null && facStatus!=""){
			  crit = crit.add(Restrictions.eq("FacStatus", facStatus));
		  }else{
			  crit = crit.add(Restrictions.or(Restrictions.isNull("FacStatus"), Restrictions.eq("FacStatus", "n")));
		  }
   /*     if((deptId !=0)&&(medicalOfficerId !=0))
        {
        	 //System.out.println("deptId !=0 and medicalOfficerId !=0");	
             crit = session.createCriteria(PatientPrescriptionHeader.class).add(
   				Restrictions.eq("Status", "p")).createAlias(
   				"Department", "dept").add(
   				Restrictions.eq("dept.Id", deptId)).add(Restrictions.eq("Emp.Id", medicalOfficerId)).add(Restrictions.isNotNull("Visit"))
   				.add(Restrictions.between("PrescriptionDate",
   							fromDate, toDate));
        }
        else if(deptId !=0)
        {    
          // System.out.println("deptId !=0");	
          crit = session.createCriteria(PatientPrescriptionHeader.class).add(
				Restrictions.eq("Status", "p")).createAlias(
				"Department", "dept").add(
				Restrictions.eq("dept.Id", deptId)).add(Restrictions.isNotNull("Visit"))
				.add(Restrictions.between("PrescriptionDate",
								fromDate, toDate));
        }else if(medicalOfficerId !=0)
        {
        	
        System.out.println("medicalOfficerId !=0"+medicalOfficerId);	
            crit = session.createCriteria(PatientPrescriptionHeader.class).add(
  				Restrictions.eq("Status", "p")).add(Restrictions.eq("Emp.Id", medicalOfficerId)).add(Restrictions.isNotNull("Visit"))
  				.add(Restrictions.between("PrescriptionDate",
  								fromDate, toDate)).add(Restrictions.eq("Hospital.Id", hospitalId));
        	
        }else
        {
        	//System.out.println("from date and to date");	
            crit = session.createCriteria(PatientPrescriptionHeader.class).add(
  				Restrictions.eq("Status", "p")).add(Restrictions.between("PrescriptionDate",
  								fromDate, toDate)).add(Restrictions.isNotNull("Visit")).add(Restrictions.eq("Hospital.Id", hospitalId));
        	
        }
        	*/
		prescriptionList = crit.addOrder(Order.desc("PrescriptionNo")).list();
		divisionList = session.createSQLQuery("select md.division_id,md.division_name from mas_division md where md.division_id in (select distinct pph.division_id from patient_prescription_header pph where pph.status='p' and pph.division_id is not null and pph.prescription_date>'"+HMSUtil.convertDateToStringFormat(minimumDate, "yyyy-MM-dd")+"')").list();
		map.put("divisionList", divisionList);
		map.put("prescriptionList", prescriptionList);
		departmentList = session.createCriteria(MasDepartment.class).createAlias("DepartmentType", "depType").add(Restrictions.eq("depType.DepartmentTypeCode", "OPD")).add(Restrictions.eq("Status", "y")).addOrder(Order.asc("DepartmentName")).list();
		map.put("departmentList", departmentList);
		List<Integer> empId =getEmployeeIdDepartmentTypeWise(session, "OPD");
		if(empId.size()>0)
		{
		employeeList = session.createCriteria(MasEmployee.class, "emp")
				.add(Restrictions.in("emp.Id", empId))
				.add(Restrictions.eq("emp.Status", "y")).addOrder(Order.asc("emp.FirstName")).list();
		}
		
		map.put("employeeList",employeeList);
		return map;
	}
	
	public Map<String, Object> showPendingPrescriptionJspCorporateFAC(Map<String, Object> mapForDs)
	{
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		List<PatientPrescriptionHeader> prescriptionList = new ArrayList<PatientPrescriptionHeader>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> employeeList=new ArrayList<MasEmployee>();
		List<Object[]> divisionList=new ArrayList<Object[]>();
		List<StoreOpPatientIssueM>  storeOpPatientIssueMList=new ArrayList<StoreOpPatientIssueM>();
		Date fromDate = new Date();
		Date toDate = new Date();
		String facStatus = (String)mapForDs.get("facStatus");
		Session session = (Session) getSession();
		Box box = (Box)mapForDs.get("box");
		int duration = Integer.parseInt(HMSUtil.getProperties("adt.properties", "prescriptionDurationForCorporateFAC"));
		int divisionIdForCorporateOffice = Integer.parseInt(HMSUtil.getProperties("adt.properties", "divisionIdForCorporateOffice"));
		Calendar cal = GregorianCalendar.getInstance();
		cal.add( Calendar.DAY_OF_YEAR, -duration);
		Date minimumDate = cal.getTime();
		
		Criteria crit = null;
		int deptId = 0;
		String employeeNo="";
		if(mapForDs.get("employeeNo") != null){
			employeeNo = (String)mapForDs.get("employeeNo");
		}
		if (mapForDs.get("deptId") != null)
			deptId = Integer.parseInt("" + mapForDs.get("deptId"));

		
		if (mapForDs.get("toDate") != null) {
			toDate = (Date) mapForDs.get("toDate");
		}
		int divisionId = 0;
		if (mapForDs.get("divisionId") != null)
			divisionId = Integer.parseInt(""+mapForDs.get("divisionId"));
		int hospitalId=0;
		if(mapForDs.get("hospitalId") != null)
			hospitalId=Integer.parseInt(""+mapForDs.get("hospitalId"));
		  crit = session.createCriteria(PatientPrescriptionHeader.class).add(
	   				Restrictions.eq("Status", "p"))
	   				.add(Restrictions.isNotNull("Visit"))
	   				.add(Restrictions.eq("Division.Id", divisionIdForCorporateOffice))
	   				//.add(Restrictions.ge("PrescriptionDate", minimumDate))
	   				.add(Restrictions.ge("PrescriptionDate", minimumDate))
	   				.add(Restrictions.eq("Hospital.Id", hospitalId))
		            .add(Restrictions.isNotNull("Division"));
		  if(employeeNo!=""){
			  crit = crit.createAlias("Hin", "h").add(Restrictions.eq("h.ServiceNo", employeeNo));
		  }
		   if(deptId !=0)
	        {    
			  crit = crit.createAlias("Department", "dept").add(Restrictions.eq("dept.Id", deptId));
	        }
		    if(divisionId !=0)
	        {
			  crit = crit.add(Restrictions.eq("Division.Id", divisionId));
	        }
		   
		  /*  if (mapForDs.get("fromDate") != null) {
				fromDate = (Date) mapForDs.get("fromDate");
				 crit = crit.add(Restrictions.eq("PrescriptionDate", fromDate));
			}*/
		 /*  if(facStatus!=null && facStatus!=""){
			  crit = crit.add(Restrictions.eq("FacStatus", facStatus));
		  }else{
			  crit = crit.add(Restrictions.or(Restrictions.isNull("FacStatus"), Restrictions.eq("FacStatus", "n")));
		  }*/
   /*     if((deptId !=0)&&(medicalOfficerId !=0))
        {
        	 //System.out.println("deptId !=0 and medicalOfficerId !=0");	
             crit = session.createCriteria(PatientPrescriptionHeader.class).add(
   				Restrictions.eq("Status", "p")).createAlias(
   				"Department", "dept").add(
   				Restrictions.eq("dept.Id", deptId)).add(Restrictions.eq("Emp.Id", medicalOfficerId)).add(Restrictions.isNotNull("Visit"))
   				.add(Restrictions.between("PrescriptionDate",
   							fromDate, toDate));
        }
        else if(deptId !=0)
        {    
          // System.out.println("deptId !=0");	
          crit = session.createCriteria(PatientPrescriptionHeader.class).add(
				Restrictions.eq("Status", "p")).createAlias(
				"Department", "dept").add(
				Restrictions.eq("dept.Id", deptId)).add(Restrictions.isNotNull("Visit"))
				.add(Restrictions.between("PrescriptionDate",
								fromDate, toDate));
        }else if(medicalOfficerId !=0)
        {
        	
        System.out.println("medicalOfficerId !=0"+medicalOfficerId);	
            crit = session.createCriteria(PatientPrescriptionHeader.class).add(
  				Restrictions.eq("Status", "p")).add(Restrictions.eq("Emp.Id", medicalOfficerId)).add(Restrictions.isNotNull("Visit"))
  				.add(Restrictions.between("PrescriptionDate",
  								fromDate, toDate)).add(Restrictions.eq("Hospital.Id", hospitalId));
        	
        }else
        {
        	//System.out.println("from date and to date");	
            crit = session.createCriteria(PatientPrescriptionHeader.class).add(
  				Restrictions.eq("Status", "p")).add(Restrictions.between("PrescriptionDate",
  								fromDate, toDate)).add(Restrictions.isNotNull("Visit")).add(Restrictions.eq("Hospital.Id", hospitalId));
        	
        }
        	*/
		prescriptionList = crit.addOrder(Order.desc("PrescriptionNo")).list();
		divisionList = session.createSQLQuery("select md.division_id,md.division_name from mas_division md where md.division_id in (select distinct pph.division_id from patient_prescription_header pph where pph.status='p' and pph.division_id is not null and pph.prescription_date>'"+HMSUtil.convertDateToStringFormat(minimumDate, "yyyy-MM-dd")+"')").list();
		map.put("divisionList", divisionList);
		map.put("prescriptionList", prescriptionList);
		departmentList = session.createCriteria(MasDepartment.class).createAlias("DepartmentType", "depType").add(Restrictions.eq("depType.DepartmentTypeCode", "OPD")).add(Restrictions.eq("Status", "y")).addOrder(Order.asc("DepartmentName")).list();
		map.put("departmentList", departmentList);
		List<Integer> empId =getEmployeeIdDepartmentTypeWise(session, "OPD");
		if(empId.size()>0)
		{
		employeeList = session.createCriteria(MasEmployee.class, "emp")
				.add(Restrictions.in("emp.Id", empId))
				.add(Restrictions.eq("emp.Status", "y")).addOrder(Order.asc("emp.FirstName")).list();
		}
		
		map.put("employeeList",employeeList);
		return map;
	}
	
	public Map<String, Object> getPrescriptionDetails(Map<String, Object> mapForDs)
	{
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		List<PatientPrescriptionHeader> prescriptionDublicateList = new ArrayList<PatientPrescriptionHeader>();
		List<PatientPrescriptionHeader> alreadyIssuedDublicateList = new ArrayList<PatientPrescriptionHeader>();
	
		
	/*	List<MasDepartment> departmentList = new ArrayList<MasDepartment>();*/
		/*List<MasEmployee> employeeList=new ArrayList<MasEmployee>();*/
		/*List<Object[]> divisionList=new ArrayList<Object[]>();*/
		/*List<StoreOpPatientIssueM>  storeOpPatientIssueMList=new ArrayList<StoreOpPatientIssueM>();*/
		/*Date fromDate = new Date();
		Date toDate = new Date();*/
		String facStatus = (String)mapForDs.get("facStatus");
		Session session = (Session) getSession();
		Box box = (Box)mapForDs.get("box");
		
		int duration = Integer.parseInt(HMSUtil.getProperties("adt.properties", "prescriptionDurationForDispensary"));
		
		Calendar cal = GregorianCalendar.getInstance();
		cal.add( Calendar.DAY_OF_YEAR, -duration);
		Date minimumDate = cal.getTime();
		
		Criteria crit = null;
		Criteria issuedcrit = null;
		int deptId = 0;
		String employeeNo="";
		String byAdmin="";
		String issuedJspFlag = "false";
		if(mapForDs.get("byAdmin") != null){
			byAdmin = (String)mapForDs.get("byAdmin");
		}
		if(mapForDs.get("employeeNo") != null){
			employeeNo = (String)mapForDs.get("employeeNo");
		}
		if (mapForDs.get("deptId") != null)
			deptId = Integer.parseInt("" + mapForDs.get("deptId"));

	/*	if (mapForDs.get("fromDate") != null) {
			fromDate = (Date) mapForDs.get("fromDate");
		}
		if (mapForDs.get("toDate") != null) {
			toDate = (Date) mapForDs.get("toDate");
		}*/
		int medicalOfficerId = 0;
		if (mapForDs.get("medicalOfficerId") != null)
			medicalOfficerId = Integer.parseInt(""+mapForDs.get("medicalOfficerId"));
		int hospitalId=0;
		if(mapForDs.get("hospitalId") != null)
			hospitalId=Integer.parseInt(""+mapForDs.get("hospitalId"));
		  crit = session.createCriteria(PatientPrescriptionHeader.class)
				    .add(Restrictions.eq("Status", "P").ignoreCase())				  
	   				.add(Restrictions.isNotNull("Visit"))
	   				.add(Restrictions.isNull("Division"))	   				
	   				/*.add(Restrictions.between("PrescriptionDate", fromDate, toDate))*/
	   				.add(Restrictions.ge("PrescriptionDate", minimumDate))	   				
	   				.add(Restrictions.eq("Hospital.Id", hospitalId));
		  
		  if(byAdmin!="" && byAdmin.equalsIgnoreCase("n")){
			 
			  crit = crit.createAlias("Visit", "v").add(Restrictions.or(Restrictions.eq("v.VisitByAdmin", "n").ignoreCase(), Restrictions.isNull("v.VisitByAdmin")));
			  crit = crit.createAlias("Hin", "h").add(Restrictions.eq("h.ServiceNo", employeeNo));
		  }
		  else
		  {
			  
			  crit = crit.createAlias("Visit", "v").add(Restrictions.eq("v.VisitByAdmin", "y").ignoreCase());
		  }
		 /* if(employeeNo!=""){
			  crit = crit.createAlias("Hin", "h").add(Restrictions.eq("h.ServiceNo", employeeNo));
		  }*/
	
		   prescriptionDublicateList = crit.addOrder(Order.desc("PrescriptionNo")).list();
		   if(byAdmin!="" && byAdmin.equalsIgnoreCase("n")){
			   if(prescriptionDublicateList.size()==0)
			   {
				   issuedcrit = session.createCriteria(PatientPrescriptionHeader.class)				  
						    /*.add(Restrictions.and(Restrictions.eq("Status", "P").ignoreCase(), Restrictions.eq("NipStatus", "A").ignoreCase()))*/
						    .add(Restrictions.eq("Status", "I").ignoreCase())
						    /*.add(Restrictions.and(Restrictions.eq("NipStatus", "n").ignoreCase(), Restrictions.eq("NipStatus", "A").ignoreCase()))*/
			   				.add(Restrictions.isNotNull("Visit"))
			   				.add(Restrictions.isNull("Division"))
			   				/*.add(Restrictions.between("PrescriptionDate", fromDate, toDate))*/
			   				/*.add(Restrictions.eq("PrescriptionDate", new Date()))	*/   				
			   				.add(Restrictions.eq("Hospital.Id", hospitalId))
			   				.createAlias("Visit", "v").add(Restrictions.or(Restrictions.eq("v.VisitByAdmin", "n").ignoreCase(), Restrictions.isNull("v.VisitByAdmin")))
			   				.createAlias("Hin", "h").add(Restrictions.eq("h.ServiceNo", employeeNo))
			   				.addOrder(Order.desc("IssuedDate"));
				   alreadyIssuedDublicateList = issuedcrit.list();
			   	   issuedJspFlag="true";			
			   }
			   
		   }
		Set<PatientPrescriptionHeader> prescriptionSet = new TreeSet<PatientPrescriptionHeader>(prescriptionDublicateList);
		List<PatientPrescriptionHeader> prescriptionList = new ArrayList<PatientPrescriptionHeader>(prescriptionSet);
		
		Set<PatientPrescriptionHeader> alreadyIssuedSet = new TreeSet<PatientPrescriptionHeader>(alreadyIssuedDublicateList);
		List<PatientPrescriptionHeader> alreadyIssuedList = new ArrayList<PatientPrescriptionHeader>(alreadyIssuedSet);
		
		/*divisionList = session.createSQLQuery("select md.division_id,md.division_name from mas_division md where md.division_id in (select distinct pph.division_id from patient_prescription_header pph where pph.status='p' and pph.fac_status='y' and pph.prescription_date='"+HMSUtil.convertDateToStringFormat(new Date(), "yyyy-MM-dd")+"')").list();
		map.put("divisionList", divisionList);*/
		map.put("prescriptionList", prescriptionList);
		/*departmentList = session.createCriteria(MasDepartment.class).createAlias("DepartmentType", "depType").add(Restrictions.eq("depType.DepartmentTypeCode", "OPD")).add(Restrictions.eq("Status", "y")).addOrder(Order.asc("DepartmentName")).list();
		map.put("departmentList", departmentList);*/
		/*List<Integer> empId =getEmployeeIdDepartmentTypeWise(session, "OPD");
		if(empId.size()>0)
		{
		employeeList = session.createCriteria(MasEmployee.class, "emp")
				.add(Restrictions.in("emp.Id", empId))
				.add(Restrictions.eq("emp.Status", "y")).addOrder(Order.asc("emp.FirstName")).list();
		}
		map.put("employeeList",employeeList);*/
		map.put("alreadyIssuedList",alreadyIssuedList);
		map.put("issuedJspFlag", issuedJspFlag);
		
		return map;
	}
	
	public Map<String, Object> getNIPPrescriptionDetails(Map<String, Object> mapForDs)
	{
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		List<PatientPrescriptionHeader> prescriptionDublicateList = new ArrayList<PatientPrescriptionHeader>();
		
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> employeeList=new ArrayList<MasEmployee>();
		List<Object[]> divisionList=new ArrayList<Object[]>();
		List<StoreOpPatientIssueM>  storeOpPatientIssueMList=new ArrayList<StoreOpPatientIssueM>();
		Date fromDate = new Date();
		Date toDate = new Date();
		String facStatus = (String)mapForDs.get("facStatus");
		Session session = (Session) getSession();
		Box box = (Box)mapForDs.get("box");
		Criteria crit = null;
		int deptId = 0;
		String employeeNo="";
		if(mapForDs.get("employeeNo") != null){
			employeeNo = (String)mapForDs.get("employeeNo");
		}
		if (mapForDs.get("deptId") != null)
			deptId = Integer.parseInt("" + mapForDs.get("deptId"));

		if (mapForDs.get("fromDate") != null) {
			fromDate = (Date) mapForDs.get("fromDate");
		}
		if (mapForDs.get("toDate") != null) {
			toDate = (Date) mapForDs.get("toDate");
		}
		

int duration = Integer.parseInt(HMSUtil.getProperties("adt.properties", "prescriptionDurationForNIP"));
		Calendar cal = GregorianCalendar.getInstance();
		cal.add( Calendar.DAY_OF_YEAR, -duration);
		Date minimumDate = cal.getTime();
		
		int medicalOfficerId = 0;
		if (mapForDs.get("medicalOfficerId") != null)
			medicalOfficerId = Integer.parseInt(""+mapForDs.get("medicalOfficerId"));
		int hospitalId=0;
		if(mapForDs.get("hospitalId") != null)
			hospitalId=Integer.parseInt(""+mapForDs.get("hospitalId"));
		  crit = session.createCriteria(PatientPrescriptionHeader.class)
				    .add(Restrictions.and(Restrictions.eq("Status", "p").ignoreCase(), Restrictions.or(Restrictions.eq("NipStatus", "A").ignoreCase(), Restrictions.eq("NipStatus", "y").ignoreCase())))
	   				.add(Restrictions.isNotNull("Visit"))
	   				.add(Restrictions.ge("PrescriptionDate", minimumDate))
	   				.add(Restrictions.eq("Hospital.Id", hospitalId));	   							
		  if(employeeNo!=""){
			  crit = crit.createAlias("Hin", "h").add(Restrictions.eq("h.ServiceNo", employeeNo));
		  }
		   if(deptId !=0)
	        {    
			  crit = crit.createAlias("Department", "dept").add(Restrictions.eq("dept.Id", deptId));
	        }
		    if(medicalOfficerId !=0)
	        {
			  crit = crit.add(Restrictions.eq("Emp.Id", medicalOfficerId));
	        }
		   if(facStatus!=null && facStatus!=""){
			  crit = crit.add(Restrictions.eq("FacStatus", facStatus));
		  }else{
			  crit = crit.add(Restrictions.or(Restrictions.isNull("FacStatus"), Restrictions.eq("FacStatus", "n")));
		  }
   /*     if((deptId !=0)&&(medicalOfficerId !=0))
        {
        	 //System.out.println("deptId !=0 and medicalOfficerId !=0");	
             crit = session.createCriteria(PatientPrescriptionHeader.class).add(
   				Restrictions.eq("Status", "p")).createAlias(
   				"Department", "dept").add(
   				Restrictions.eq("dept.Id", deptId)).add(Restrictions.eq("Emp.Id", medicalOfficerId)).add(Restrictions.isNotNull("Visit"))
   				.add(Restrictions.between("PrescriptionDate",
   							fromDate, toDate));
        }
        else if(deptId !=0)
        {    
          // System.out.println("deptId !=0");	
          crit = session.createCriteria(PatientPrescriptionHeader.class).add(
				Restrictions.eq("Status", "p")).createAlias(
				"Department", "dept").add(
				Restrictions.eq("dept.Id", deptId)).add(Restrictions.isNotNull("Visit"))
				.add(Restrictions.between("PrescriptionDate",
								fromDate, toDate));
        }else if(medicalOfficerId !=0)
        {
        	
        System.out.println("medicalOfficerId !=0"+medicalOfficerId);	
            crit = session.createCriteria(PatientPrescriptionHeader.class).add(
  				Restrictions.eq("Status", "p")).add(Restrictions.eq("Emp.Id", medicalOfficerId)).add(Restrictions.isNotNull("Visit"))
  				.add(Restrictions.between("PrescriptionDate",
  								fromDate, toDate)).add(Restrictions.eq("Hospital.Id", hospitalId));
        	
        }else
        {
        	//System.out.println("from date and to date");	
            crit = session.createCriteria(PatientPrescriptionHeader.class).add(
  				Restrictions.eq("Status", "p")).add(Restrictions.between("PrescriptionDate",
  								fromDate, toDate)).add(Restrictions.isNotNull("Visit")).add(Restrictions.eq("Hospital.Id", hospitalId));
        	
        }
        	*/
		  /* prescriptionList = crit.setProjection(Projections.projectionList()
				   .add(Projections.property("Id"))
				   .add(Projections.groupProperty("Hin.Id"))).list();
		   System.out.println("prescriptionList"+prescriptionList.size());*/
		   prescriptionDublicateList = crit.addOrder(Order.desc("PrescriptionNo")).list();
		Set<PatientPrescriptionHeader> prescriptionSet = new TreeSet<PatientPrescriptionHeader>(prescriptionDublicateList);
		List<PatientPrescriptionHeader> prescriptionList = new ArrayList<PatientPrescriptionHeader>(prescriptionSet);
		
		divisionList = session.createSQLQuery("select md.division_id,md.division_name from mas_division md where md.division_id in (select distinct pph.division_id from patient_prescription_header pph where pph.status='p' and pph.fac_status='y' and pph.prescription_date='"+HMSUtil.convertDateToStringFormat(new Date(), "yyyy-MM-dd")+"')").list();
		map.put("divisionList", divisionList);
		map.put("prescriptionList", prescriptionList);
		departmentList = session.createCriteria(MasDepartment.class).createAlias("DepartmentType", "depType").add(Restrictions.eq("depType.DepartmentTypeCode", "OPD")).add(Restrictions.eq("Status", "y")).addOrder(Order.asc("DepartmentName")).list();
		map.put("departmentList", departmentList);
		employeeList = session.createCriteria(MasEmployee.class, "emp").add(Restrictions.in("emp.Id", getEmployeeIdDepartmentTypeWise(session, "OPD")))
				.add(Restrictions.eq("emp.Status", "y")).addOrder(Order.asc("emp.FirstName")).list();
		map.put("employeeList",employeeList);
		return map;
	}
	
//  For Employee Department wise
	public List<Integer> getEmployeeIdDepartmentWise(Session session, int department){
		List<Integer> empId = (List<Integer>)session.createCriteria(MasEmployeeDepartment.class, "med")
				.createAlias("med.Employee", "emp").add(Restrictions.eq("med.Department.Id", department))
				.add(Restrictions.eq("med.Status", "y")).setProjection(Projections.property("emp.Id")).list();
		return empId;
	}
//  For Employee Department Type wise
	public List<Integer> getEmployeeIdDepartmentTypeWise(Session session, String departmentTypeCode){
		List<Integer> empId = (List<Integer>)session.createCriteria(MasEmployeeDepartment.class, "med").createAlias("med.Department", "dep")
				.createAlias("dep.DepartmentType", "depType").add(Restrictions.eq("depType.DepartmentTypeCode", departmentTypeCode))
				.add(Restrictions.eq("med.Status", "y")).setProjection(Projections.property("med.Employee.Id")).list();
		return empId;
	}
	
	public Map<String, Object> getPrescriptionDetailsForWard(Map<String, Object> mapForDs)
	{
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		/*List<PatientPrescriptionHeader> prescriptionList = new ArrayList<PatientPrescriptionHeader>();*/
		
		
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> employeeList=new ArrayList<MasEmployee>();
		List<StoreOpPatientIssueM>  storeOpPatientIssueMList=new ArrayList<StoreOpPatientIssueM>();
		int duration = Integer.parseInt(HMSUtil.getProperties("adt.properties", "prescriptionDurationForIPD"));
		Calendar cal = GregorianCalendar.getInstance();
		cal.add( Calendar.DAY_OF_YEAR, -duration);
		Date minimumDate = cal.getTime();
		
		/*Date fromDate = new Date();
		Date toDate = new Date();*/
		Date fromDate = null;
		Date toDate = null;
		Session session = (Session) getSession();
		Box box = (Box)mapForDs.get("box");
		Criteria crit = null;
		int deptId = 0;
		int reqDepId = 0;
		int docId = 0;
		String employeeNo="";
		String departmentTypeCode = null;
		Properties properties = new Properties();
		URL resourcePath = Thread.currentThread().getContextClassLoader().getResource("adt.properties");
		try {
			properties.load(resourcePath.openStream());
			departmentTypeCode = properties.getProperty("departmentTypeCodeForWard");
		} catch (Exception e) {
			e.printStackTrace();
		}
		/*if(box.get("employeeNo") != null)
			employeeNo = (String)box.getString("employeeNo");
		if (mapForDs.get("departmentId") != null)
			deptId = Integer.parseInt("" + mapForDs.get("departmentId"));
		if (box.get("fromDate") != null && box.get("fromDate") != "")
			fromDate = HMSUtil.convertStringTypeDateToDateType(box.getString("fromDate"));
		if (box.get("toDate") != null && box.get("toDate") != "")
			toDate = HMSUtil.convertStringTypeDateToDateType(box.getString("toDate"));
		if (box.getInt("departmentId") != 0)
			reqDepId = box.getInt("departmentId");
		if (box.getInt("medicalOfficer") != 0 )
			docId = box.getInt("medicalOfficer");
		int medicalOfficerId = 0;
		if (mapForDs.get("medicalOfficerId") != null)
			medicalOfficerId = Integer.parseInt(""+mapForDs.get("medicalOfficerId"));*/
		int hospitalId=0;
		if(mapForDs.get("hospitalId") != null)
			hospitalId=Integer.parseInt(""+mapForDs.get("hospitalId"));
		  crit = session.createCriteria(PatientPrescriptionHeader.class)
				    .add(Restrictions.eq("Status", "p").ignoreCase())
	   				.add(Restrictions.isNotNull("Inpatient"))
	   				.add(Restrictions.eq("Hospital.Id", hospitalId))
	   				.add(Restrictions.ge("PrescriptionDate", minimumDate))
	   				.createAlias("Department", "dept")
	   				.createAlias("dept.DepartmentType", "dt")
	   				.add(Restrictions.eq("dt.DepartmentTypeCode", departmentTypeCode))	   				
	   				.setProjection((Projections.projectionList()
	   						.add(Projections.property("dept.Id"))
	   		   			    .add(Projections.property("dept.DepartmentName"))
	   						.add(Projections.groupProperty("dept.Id"))
	   					    .add(Projections.groupProperty("dept.DepartmentName"))));
	   				/*.add(Restrictions.between("PrescriptionDate",fromDate, toDate))*/;
		/*  if(fromDate!=null && toDate!=null)
		  {
			  crit = crit.add(Restrictions.between("PrescriptionDate",fromDate, toDate));
		  }
		  if(employeeNo!=""){crit = crit.createAlias("Hin", "h").add(Restrictions.eq("h.ServiceNo", employeeNo));}
		  if(reqDepId !=0){
			  crit = crit.createAlias("Inpatient", "in")
					  .createAlias("in.Department", "dept").add(Restrictions.eq("dept.Id", reqDepId));}
		  if(reqDepId !=0){crit = crit.createAlias("Department", "dept").add(Restrictions.eq("dept.Id", reqDepId));}
		  if(docId !=0){crit = crit.add(Restrictions.eq("Emp.Id", docId));}*/
	   				
	   				List<Object[]> prescriptionList = crit.list();
	   			
		departmentList = session.createCriteria(MasDepartment.class).createAlias("DepartmentType", "depType").add(Restrictions.eq("depType.DepartmentTypeCode", departmentTypeCode)).add(Restrictions.eq("Status", "y"))
				.add(Restrictions.eq("Hospital.Id", hospitalId)).addOrder(Order.asc("DepartmentName")).list();
		List<Integer> empId =getEmployeeIdDepartmentTypeWise(session, "WARD");
		if(empId.size()>0)
		{
			employeeList = session.createCriteria(MasEmployee.class)
					.add(Restrictions.in("Id", empId))
					.add(Restrictions.eq("Status","y")).addOrder(Order.asc("FirstName")).list();
		}
		
		
		
		map.put("prescriptionList", prescriptionList);
		map.put("departmentList", departmentList);
		map.put("employeeList",employeeList);
		return map;
	}
	
	public Map<String, Object> getPartialPrescriptionDetailsForWard(Map<String, Object> mapForDs)
	{
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		List<PatientPrescriptionDetails> prescriptionListDetails = new ArrayList<PatientPrescriptionDetails>();
		List<PatientPrescriptionHeader> prescriptionList = new ArrayList<PatientPrescriptionHeader>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> employeeList=new ArrayList<MasEmployee>();
		List<StoreOpPatientIssueM>  storeOpPatientIssueMList=new ArrayList<StoreOpPatientIssueM>();
		
		/*Date fromDate = new Date();
		Date toDate = new Date();*/
		Date fromDate =null;
		Date toDate = null;
		Session session = (Session) getSession();
		Box box = (Box)mapForDs.get("box");
		Criteria crit = null;
		int deptId = 0;
		int reqDepId = 0;
		int docId = 0;
		String employeeNo="";
		String departmentTypeCode = null;
		Properties properties = new Properties();
		URL resourcePath = Thread.currentThread().getContextClassLoader().getResource("adt.properties");
		try {
			properties.load(resourcePath.openStream());
			departmentTypeCode = properties.getProperty("departmentTypeCodeForWard");
		} catch (Exception e) {
			e.printStackTrace();
		}
		if(box.get("employeeNo") != null)
			employeeNo = (String)box.getString("employeeNo");
		if (mapForDs.get("departmentId") != null)
			deptId = Integer.parseInt("" + mapForDs.get("departmentId"));
		if (box.get("fromDate") != null && box.get("fromDate") != "")
			fromDate = HMSUtil.convertStringTypeDateToDateType(box.getString("fromDate"));
		if (box.get("toDate") != null && box.get("toDate") != "")
			toDate = HMSUtil.convertStringTypeDateToDateType(box.getString("toDate"));
		if (box.getInt("departmentId") != 0)
			reqDepId = box.getInt("departmentId");
		if (box.getInt("medicalOfficer") != 0 )
			docId = box.getInt("medicalOfficer");
		int medicalOfficerId = 0;
		if (mapForDs.get("medicalOfficerId") != null)
			medicalOfficerId = Integer.parseInt(""+mapForDs.get("medicalOfficerId"));
		int hospitalId=0;
		if(mapForDs.get("hospitalId") != null)
			hospitalId=Integer.parseInt(""+mapForDs.get("hospitalId"));
		  crit = session.createCriteria(PatientPrescriptionDetails.class)
				    .createAlias("Prescription", "hd")				    
	   				.add(Restrictions.isNotNull("hd.Inpatient")).add(Restrictions.eq("hd.Hospital.Id", hospitalId))	   				
	   				/*.add(Restrictions.or(Restrictions.ltProperty("QtyIssued", "Total"), Restrictions.isNull("QtyIssued")))*/
	   				.add(Restrictions.ltProperty("QtyIssued", "Total"))
	   				/*.add(Restrictions.between("PrescriptionDate", fromDate, toDate))*/;
		  if(fromDate!=null && toDate!=null)
		  {
			  crit = crit.add(Restrictions.between("hd.PrescriptionDate",fromDate, toDate));
		  }
		  if(employeeNo!=""){crit = crit.createAlias("hd.Hin", "h").add(Restrictions.eq("h.ServiceNo", employeeNo));}
		  if(reqDepId !=0){
			  crit = crit.createAlias("hd.Inpatient", "in")
					  .createAlias("in.Department", "dept").add(Restrictions.eq("dept.Id", reqDepId));}
		  if(docId !=0){crit = crit.add(Restrictions.eq("hd.Emp.Id", docId));}
		  prescriptionListDetails = crit.addOrder(Order.desc("hd.PrescriptionNo")).list();
		departmentList = session.createCriteria(MasDepartment.class).createAlias("DepartmentType", "depType").add(Restrictions.eq("depType.DepartmentTypeCode", departmentTypeCode)).add(Restrictions.eq("Status", "y"))
				.add(Restrictions.eq("Hospital.Id", hospitalId)).addOrder(Order.asc("DepartmentName")).list();
		employeeList = session.createCriteria(MasEmployee.class).add(Restrictions.in("Id", getEmployeeIdDepartmentTypeWise(session, "WARD"))).add(Restrictions.eq("Status","y")).addOrder(Order.asc("FirstName")).list();
		Integer[] headerIdList = new Integer[prescriptionListDetails.size()];
		for(int i = 0; i<prescriptionListDetails.size(); i++)		
		{
			
			headerIdList[i] = prescriptionListDetails.get(i).getPrescription().getId();
		}		
		if(prescriptionListDetails.size()>0)
		{
			prescriptionList = session.createCriteria(PatientPrescriptionHeader.class).add(Restrictions.in("Id", headerIdList)).list();	
		}
		
		map.put("prescriptionList", prescriptionList);
		map.put("prescriptionListDetails", prescriptionListDetails);
		map.put("departmentList", departmentList);
		map.put("employeeList",employeeList);
		return map;
	}
	
	public Map<String, Object> getPrescriptionDetailsForWardPartial(Map<String, Object> mapForDs)
	{
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		/*List<PatientPrescriptionHeader> prescriptionList = new ArrayList<PatientPrescriptionHeader>();*/
		
		
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> employeeList=new ArrayList<MasEmployee>();
		List<StoreOpPatientIssueM>  storeOpPatientIssueMList=new ArrayList<StoreOpPatientIssueM>();
		/*Date fromDate = new Date();
		Date toDate = new Date();*/
		Date fromDate = null;
		Date toDate = null;
		Session session = (Session) getSession();
		Box box = (Box)mapForDs.get("box");
		Criteria crit = null;
		int deptId = 0;
		int reqDepId = 0;
		int docId = 0;
		String employeeNo="";
		String departmentTypeCode = null;
		Properties properties = new Properties();
		URL resourcePath = Thread.currentThread().getContextClassLoader().getResource("adt.properties");
		try {
			properties.load(resourcePath.openStream());
			departmentTypeCode = properties.getProperty("departmentTypeCodeForWard");
		} catch (Exception e) {
			e.printStackTrace();
		}
		/*if(box.get("employeeNo") != null)
			employeeNo = (String)box.getString("employeeNo");
		if (mapForDs.get("departmentId") != null)
			deptId = Integer.parseInt("" + mapForDs.get("departmentId"));
		if (box.get("fromDate") != null && box.get("fromDate") != "")
			fromDate = HMSUtil.convertStringTypeDateToDateType(box.getString("fromDate"));
		if (box.get("toDate") != null && box.get("toDate") != "")
			toDate = HMSUtil.convertStringTypeDateToDateType(box.getString("toDate"));
		if (box.getInt("departmentId") != 0)
			reqDepId = box.getInt("departmentId");
		if (box.getInt("medicalOfficer") != 0 )
			docId = box.getInt("medicalOfficer");
		int medicalOfficerId = 0;
		if (mapForDs.get("medicalOfficerId") != null)
			medicalOfficerId = Integer.parseInt(""+mapForDs.get("medicalOfficerId"));*/
		int hospitalId=0;
		if(mapForDs.get("hospitalId") != null)
			hospitalId=Integer.parseInt(""+mapForDs.get("hospitalId"));
		  crit = session.createCriteria(PatientPrescriptionDetails.class)
		            .createAlias("Prescription", "h")		  
				    .add(Restrictions.eq("h.Status", "i").ignoreCase())
	   				.add(Restrictions.isNotNull("h.Inpatient"))
	   				.add(Restrictions.eq("h.Hospital.Id", hospitalId))
	   				.createAlias("h.Department", "dept")
	   				.createAlias("dept.DepartmentType", "dt")
	   				.add(Restrictions.eq("dt.DepartmentTypeCode", departmentTypeCode))	   				
	   				.setProjection((Projections.projectionList()	   						
	   						.add(Projections.property("dept.Id"))
	   		   			    .add(Projections.property("dept.DepartmentName"))
	   		   			    .add(Projections.property("Item.Id"))
	   		   			    .add(Projections.property("h.DispensaryIssueNo"))
	   		   			    .add(Projections.groupProperty("dept.Id"))
	   		   			    .add(Projections.groupProperty("dept.DepartmentName"))
	   		   			    .add(Projections.groupProperty("h.DispensaryIssueNo"))
	   		   			    .add(Projections.groupProperty("Item.Id"))));
		  
		 
		  
		
	   				List itemList = new ArrayList();
	   				List issueNoList = new ArrayList();
	   				
	   				List<Object[]> prescriptionList = crit.list();
	   				Map<Integer, String> prescriptionListMap = new HashMap<Integer, String>();
	   				for(Object[] arr: prescriptionList)
	   				{
	   					itemList.add(arr[2]);
	   					issueNoList.add(arr[3]);
	   				}
	   			
	   				if(issueNoList.size()>0)
	   				{
	   					List<Object[]> dmiL = session.createCriteria(DepartmentMedicineIssue.class)
	   			   			 .add(Restrictions.in("DispensaryIssueNo", issueNoList))
	   			   			 .addOrder(Order.asc("Id"))
	   			   			 .setProjection((Projections.projectionList()	   	
	   			   					.add(Projections.property("Item.Id"))
	   		   		   			    .add(Projections.property("QtyRequired"))   		   			    
	   		   		   			    .add(Projections.sum("QtyIssued"))
	   		   		   			    .add(Projections.groupProperty("Item.Id"))
	   		   		   			    .add(Projections.groupProperty("QtyRequired"))
	   		   		   			    .add(Projections.groupProperty("Id")))).list();
	   					
	   					for(Object[] pre: prescriptionList)
		   				{
		   					for(Object[] dmi: dmiL)
			   				{
		   						
		   						
			   					if(dmi[0]==pre[2])
			   					{
			   						if(dmi[1]==dmi[2])
				   					{
			   							prescriptionList.remove(pre);
				   					}
			   					}
			   				}
		   				}
	   				}
	   	
	   				
	   			
	   	
	   	
	   	
	   				
	   				
	   	
	   				
	   			
	   				
	   				
	   				
	   				
	   	
	   			  
	   			
		departmentList = session.createCriteria(MasDepartment.class).createAlias("DepartmentType", "depType").add(Restrictions.eq("depType.DepartmentTypeCode", departmentTypeCode)).add(Restrictions.eq("Status", "y"))
				.add(Restrictions.eq("Hospital.Id", hospitalId)).addOrder(Order.asc("DepartmentName")).list();
		List<Integer> empId= getEmployeeIdDepartmentTypeWise(session, "WARD");
		
		if(empId.size()>0)
		{
			employeeList = session.createCriteria(MasEmployee.class)
					.add(Restrictions.in("Id", empId))
					.add(Restrictions.eq("Status","y")).addOrder(Order.asc("FirstName")).list();
		}
		
		
		
		for(Object[] pre: prescriptionList)
			{
			prescriptionListMap.put((Integer)pre[0], (String)pre[1]);
			}
		
		
		
		map.put("prescriptionList", prescriptionList);
		map.put("prescriptionListMap", prescriptionListMap);
		map.put("departmentList", departmentList);
		map.put("employeeList",employeeList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getPrescriptionDetailList(Map<String,Object> dataMap) {
		List<PatientPrescriptionDetails> presList = new ArrayList<PatientPrescriptionDetails>();
		List<MasEmployee> empList = new ArrayList<MasEmployee>();
		Session session = (Session) getSession();
		int prescriptionId = 0;
		if (dataMap.get("prescriptionId") != null) {
			prescriptionId = (Integer)dataMap.get("prescriptionId");
		}
		String status ="c";
		presList = session.createCriteria(PatientPrescriptionDetails.class).createAlias("Prescription", "presc")
				.add(Restrictions.eq("presc.Id", prescriptionId)).add(Restrictions.ne("DetailStatus",status)).list();
		if (presList != null && presList.size() > 0) {
			dataMap.put("presList", presList);
		}
		
		return dataMap;

	}
	
	@SuppressWarnings("unchecked")
	public Map<String, Object> submitPendingPrescriptionDetails(Box box,
			Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		Session session = (Session) getSession();
		if (dataMap.get("box") != null) {
			box = (Box) dataMap.get("box");
		}
	
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			Vector itemId = box.getVector(RequestConstants.ITEM_ID);
			Vector patientDetailId = box.getVector("patientDetailId");
			Vector patientHeaderId = box.getVector("patientHeaderId");
			Vector select = box.getVector(RequestConstants.SELECT);
			Vector changedBy = box.getVector(RequestConstants.CHANGED_BY);
			Vector currentTime = box.getVector(RequestConstants.CHANGED_TIME);
			Vector deptId = box.getVector("deptId");
			Vector hospitalId = box.getVector("hospitalId");

			for (int i = 0; i < select.size(); i++) {
				PendingPrescriptionDetail pendingPresDetail = new PendingPrescriptionDetail();
				if (select.get(i) != null && !select.get(i).equals("")) {
					
					if (select != null && !select.equals("")) {
						pendingPresDetail.setStatus("p");
					}
					
					
					MasStoreItem masStoreItem = new MasStoreItem();
					masStoreItem.setId(Integer.parseInt((String)itemId.get(i)));
					pendingPresDetail.setItem(masStoreItem);
					
					PatientPrescriptionHeader patientHeader = new PatientPrescriptionHeader();
					patientHeader.setId(Integer.parseInt((String)patientHeaderId.get(i)));
					pendingPresDetail.setPrescription(patientHeader);
					
					PatientPrescriptionDetails patientDetails = new PatientPrescriptionDetails();
					patientDetails.setId(Integer.parseInt((String)patientDetailId.get(i)));
					pendingPresDetail.setPatientPrescriptionDetails(patientDetails);
					
					MasDepartment masDepartment = new MasDepartment();
					masDepartment.setId(Integer.parseInt((String) deptId.get(i)));
					pendingPresDetail.setDept(masDepartment);

					MasHospital masHospital = new MasHospital();
					masHospital.setId(Integer.parseInt((String) hospitalId.get(i)));
					pendingPresDetail.setHospital(masHospital);

					pendingPresDetail.setLastChgBy((String) changedBy.get(i));
					pendingPresDetail.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(box.get(RequestConstants.CHANGED_DATE)));
					pendingPresDetail.setLastChgTime((String) currentTime.get(i));
					hbt.save(pendingPresDetail);
					
					int detailId = Integer.parseInt(patientDetailId.get(i).toString());
					PatientPrescriptionDetails patientPrescDetails = (PatientPrescriptionDetails) getHibernateTemplate().load(
							PatientPrescriptionDetails.class, detailId);
					patientPrescDetails.setDetailStatus("c");
					hbt.update(patientPrescDetails);
					hbt.refresh(patientPrescDetails);

					int patHeaderId = Integer.parseInt(patientHeaderId.get(i).toString());
					List<PatientPrescriptionDetails> tempList = new ArrayList<PatientPrescriptionDetails>();
					tempList = session.createCriteria(PatientPrescriptionDetails.class)
							.createAlias("Prescription", "pres").add(
									Restrictions.eq("pres.Id", patHeaderId)).add(Restrictions.ne("DetailStatus", "c")).list();
					

					String headerOrderStaus = "";
					for (PatientPrescriptionDetails object : tempList) {
						if (object.getDetailStatus().equals("c")) {
							headerOrderStaus = "p";
							break;
						} else {
							headerOrderStaus = "c";
						}

						PatientPrescriptionHeader header = (PatientPrescriptionHeader) getHibernateTemplate().load(
								PatientPrescriptionHeader.class, patHeaderId);
						
						header.setStatus(headerOrderStaus);
						hbt.saveOrUpdate(header);
					}

					
					
				}
			}

			saved = true;
			tx.commit();
		} catch (Exception e) {
			if (tx != null)
				tx.rollback();
			//System.out.println("Error ocurred!! please try again");
			e.printStackTrace();

		}
		map.put("saved", saved);
		return map;
	}
	public List<PatientPrescriptionHeader> getPresVisitNo(String hinNo) {
		Session session = (Session) getSession();
		List<PatientPrescriptionHeader> visitList = new ArrayList<PatientPrescriptionHeader>();
		//List<PatientPrescriptionHeader> patientPrescriptionHeaderList = new ArrayList<PatientPrescriptionHeader>();
		@SuppressWarnings("unused")
		Visit visit = new Visit();
		  visitList = session.createCriteria(PatientPrescriptionHeader.class).createAlias("Visit", "visit").
  				createAlias("Hin", "hin").add(Restrictions.eq("hin.HinNo", hinNo))
  						.addOrder(Order.desc("visit.VisitDate")).list();
	return visitList;
	}
	public List<PatientPrescriptionHeader> getPresVisitNoForNIC(String hinNo) {
		Session session = (Session) getSession();
		List<PatientPrescriptionHeader> visitList = new ArrayList<PatientPrescriptionHeader>();
		//List<PatientPrescriptionHeader> patientPrescriptionHeaderList = new ArrayList<PatientPrescriptionHeader>();
		@SuppressWarnings("unused")
		Visit visit = new Visit();
		//visitList = session.createCriteria(Visit.class).createAlias("Hin",
		//"p").add(Restrictions.eq("p.HinNo", hinNo)).addOrder(Order.desc("VisitNo")).list();
		String[] status = {"l","c"};
		visitList = session.createCriteria(PatientPrescriptionHeader.class).createAlias("Visit", "visit").
				createAlias("Hin", "hin").add(Restrictions.eq("hin.HinNo", hinNo)).add(Restrictions.in("Status", status))
				.add(Restrictions.isNull("FacStatus")).addOrder(Order.desc("visit.VisitDate")).list();
		return visitList;
	}

	@Override
	public List<DgOrderhd> getInvestigationVisitNo(String hinNo) {
		Session session = (Session) getSession();
		List<DgOrderhd> visitList = new ArrayList<DgOrderhd>();
		//List<PatientPrescriptionHeader> patientPrescriptionHeaderList = new ArrayList<PatientPrescriptionHeader>();
		@SuppressWarnings("unused")
		Visit visit = new Visit();
		//visitList = session.createCriteria(Visit.class).createAlias("Hin",
				//"p").add(Restrictions.eq("p.HinNo", hinNo)).addOrder(Order.desc("VisitNo")).list();

	    visitList = session.createCriteria(DgOrderhd.class).createAlias("Visit", "visit").
        				createAlias("Hin", "hin").add(Restrictions.eq("hin.HinNo", hinNo))
        						.addOrder(Order.desc("visit.VisitNo")).list();
		return visitList;
	}

	
	public int getTransactionSequenceNoForPrescriptionNo(Map mapForDS) {
		Session session = (Session) getSession();

		int userId = (Integer) mapForDS.get("userId");
		String userName = (String) mapForDS.get("userName");
		List<TransactionSequence> orderNoList = new ArrayList<TransactionSequence>();
		String tableName = "PATIENT_PRESCRIPTION_HEADER";
		int currentYearInt=-1;
		int orderNo=0;
		int oldYear=-1;
		 Map<String, Object> utilMap = new HashMap<String, Object>();
         utilMap = (Map) HMSUtil.getCurrentDateAndTime();
         String date = (String) utilMap.get("currentDate");

         String currentYear = date.substring(date.lastIndexOf("/") + 1);
         currentYearInt=Integer.parseInt(currentYear);
         String currentMonth = date.substring(date.indexOf("/") + 1, date
                         .lastIndexOf("/"));
     	TransactionSequence tranSeq=new TransactionSequence();
		tranSeq.setTransactionSequenceName("PrescriptionNo");
		tranSeq.setTransactionPrefix("PRNO");
		tranSeq.setTablename(tableName);
		tranSeq.setCreatedby(userName);
		tranSeq.setStatus("y");
		//MasServiceType masserType=new MasServiceType();
		tranSeq.setServiceType(null);
		tranSeq.setMonth(currentYearInt);
		//Transaction tx = null;
		int hospitalId = (Integer)mapForDS.get("hospitalId");
		try {
				//	tx = session.beginTransaction();
					org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
					hbt.setFlushModeName("FLUSH_EAGER");
					hbt.setCheckWriteOperations(false);
         
		try {

			Criteria crit = session.createCriteria(TransactionSequence.class).add(Restrictions.eq("Hospital.Id", hospitalId))
					.add(Restrictions.eq("Tablename", tableName));
			orderNoList = crit.list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		if(orderNoList!=null && orderNoList.size()>0)
		{
		 TransactionSequence transactionSequence = orderNoList.get(0);
		 orderNo = transactionSequence.getTransactionSequenceNumber();
		 oldYear=transactionSequence.getMonth(); 
		 if(currentYearInt>oldYear)
		 {
			    orderNo=1;
			    transactionSequence.setMonth(currentYearInt);
			    transactionSequence.setCreatedby(userName);
			    transactionSequence.setTransactionSequenceNumber(orderNo+1);
				hbt.update(transactionSequence);
		 }else
		 {      
			    orderNo=orderNo+1;
			    transactionSequence.setCreatedby(userName);
			    transactionSequence.setTransactionSequenceNumber(orderNo);
			    hbt.update(transactionSequence);
		 }
		}else
		{
			MasHospital hospital = new MasHospital();
			hospital.setId(hospitalId);
			tranSeq.setHospital(hospital);
			tranSeq.setTransactionSequenceNumber(orderNo);
			hbt.save(tranSeq);
		}
	//	tx.commit();
		} catch (Exception e) {
			//if (tx != null)
			//	tx.rollback();
			e.printStackTrace();

		} finally {
			// --------Session Closing----------
			
		}
		return orderNo;
		
	}

	@Override
	public Map<String, Object> showTreatmentPopUp(Map<String,Object> map1) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String generic_name = "%" + map1.get("autoHint") + "%";
    		List<Drugdetails> drugDetailList = new ArrayList<Drugdetails>();
			
			Criteria cri = session.createCriteria(Drugdetails.class)
			.add(Restrictions.like("Genericname", generic_name).ignoreCase());
			drugDetailList=cri.list();
			
			map.put("drugDetailList", drugDetailList);
			} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}
	

	@Override
	public Map<String, Object> showPopUpFamilyHistory(Map<String, Object> dataMap) {
		
		String tempCode = "";
		Map<String, Object> map = new HashMap<String, Object>();
		//List<OpdTemplateTreatment> templateFamilyList = new ArrayList<OpdTemplateTreatment>();
		List<PatientFamilyHistory> patientTemplateHistoryList=new ArrayList<PatientFamilyHistory>(); 
		tempCode = dataMap.get("tempCode").toString();
		int deptId= (Integer)dataMap.get("deptId");
		Session session = (Session) getSession();
		String complaintHistoryCode = (String)dataMap.get("complaintHistoryCode");
		
		String tempCodeFamilyHistory = HMSUtil.getProperties("adt.properties", "templateCodeForFamilyHistory");
		String tempCodeComplaintHistory = HMSUtil.getProperties("adt.properties", "templateCodeForComplaintHistory");
		
 
		Criteria c = session.createCriteria(PatientFamilyHistory.class).add(
				Restrictions.eq("Status", "y"))
					.add(Restrictions.eq("TemplateCode", tempCode));
					
		if(complaintHistoryCode!=null)
		{
			c.add(Restrictions.eq("DepartmentId.Id", deptId));
		}
		 if(tempCodeFamilyHistory.equalsIgnoreCase(tempCode))
			 c.addOrder(Order.asc("PatientHistoryName"));
			 else if(tempCodeComplaintHistory.equalsIgnoreCase(tempCode))
				 c.addOrder(Order.asc("PatientPresentComplaintName"));
		 
		patientTemplateHistoryList = c.list();
		
		/*templateFamilyList=session.createCriteria(OpdTemplateTreatment.class).createAlias("Template", "temp")
									//.add(Restrictions.eq("temp.TemplateType", "C"))
									.add(Restrictions.eq("Status", "y"))
									.addOrder(Order.asc("Id"))
									.list();*/
		map.put("patientTemplateHistoryList", patientTemplateHistoryList);
		return map;
	}

	
	public Map<String, Object> showPatientPreviousVisitForHospitality(
			Map<String, Object> mapForDS) {
		Session session = (Session) getSession();
		
		List<Inpatient> dischargeList = new ArrayList<Inpatient>();
		List<Object> dischargeList1 = new ArrayList<Object>();
		List<String> tempList = null;
		Map<String, Object> map = new HashMap<String, Object>();

		@SuppressWarnings("unused")
		int deptId = (Integer) mapForDS.get("deptId");
		int hinId = (Integer) mapForDS.get("hinId");
		int visitNo = (Integer) mapForDS.get("visitNo");
		
		String hinNo="";
		if(mapForDS.get("hinNo")!=null){
		hinNo =(String) mapForDS.get("hinNo");
		}
		String str ="";
		String str1 = "";
/*		Map connMap = HMSUtil.getConnectionForReportForHIS();
		Connection conn = (Connection) connMap.get("conn");
		Statement st = null;
		ResultSet rs = null;
		try{
			st = conn.createStatement();
		}
		catch(Exception e){
			e.printStackTrace();
		}*/
		try {
			
			
			Criteria crit = session.createCriteria(Inpatient.class)
			.createAlias("Hin", "hin")			
			.add(Restrictions.eq("hin.HinNo", hinNo)).addOrder(Order.desc("Id"));
			dischargeList=crit.list();
			
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		
		
		/*str1 = "select disc.hin_id AS hin_id, disc.ad_no AS ad_no, mh.hospital_name AS hospital_name, ip.date_of_addmission AS date_of_addmission, " +
				" disc.date_of_discharge AS date_of_discharge, disc.working_diagnosis, md.disposal_name, 'HMS' AS other_database, disc.inpatient_id as inpatient_id, " +
				" p.service_no AS service_no, disc.hospital_id as hospital_id from discharge disc " +
				" left outer join Patient p on disc.hin_id = p.hin_id left outer join inpatient ip on disc.inpatient_id = ip.inpatient_id " +
				" left outer join mas_hospital mh ON disc.hospital_id = mh.hospital_id left outer join mas_disposal md on disc.disposal_id = md.disposal_id " +
				" where p.hin_no='"+hinNo +"' order by date_of_discharge desc";
		
		
		try{
			if(conn != null)
			{
			rs = st.executeQuery(str1);
			int count = rs.getRow();
			int n = rs.getMetaData().getColumnCount();
			while(rs.next()){
				tempList = new ArrayList<String>();
				for(int i=1; i<=n; i++){
					tempList.add(rs.getString(i));
				}
				dischargeList1.add(tempList);
			}
			}
		}
		catch(SQLException e){
			e.printStackTrace();
		}*/
		
		
		
		map.put("dischargeList", dischargeList);
		map.put("dischargeList1", dischargeList1);
		return map;
	}

	

	@Override
	public Map<String, Object> showTreatment(Map<String, Object> map1) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			
			//String generic_name+"%"=  (String) map1.get("autoHint");
			String generic_name =  (String) map1.get("autoHint");

			List<Drugdetails> drugDetailList = new ArrayList<Drugdetails>();
			Criteria cri = session.createCriteria(Drugdetails.class)
			.add(Restrictions.eq("Genericname", generic_name).ignoreCase());
			drugDetailList=cri.list();
			map.put("drugDetailList", drugDetailList);
			} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}
    


	@Override
	public Map<String, Object> showSymptomPopUp(Map<String, Object> map1) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String generic_name = "%" + map1.get("autoHint") + "%";
    		List<Symptom> MedicinenetList = new ArrayList<Symptom>();
			Criteria cri = session.createCriteria(Symptom.class)
			.add(Restrictions.like("ComplaintDescription", generic_name).ignoreCase());
			MedicinenetList=cri.list();
			map.put("MedicinenetList", MedicinenetList);
			} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}


	@Override
	public Map<String, Object> showDiagnosisPopUp(Map<String, Object> map1) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<OpdMasSymptom> symptomList = new ArrayList<OpdMasSymptom>();
		try {
			/*String generic_name = "%" + map1.get("autoHint") + "%";
    		List<Diagnosispro> DiagnosisproList = new ArrayList<Diagnosispro>();
			System.out.println("generic_name  --"+generic_name); 
			Criteria cri = session.createCriteria(Diagnosispro.class)
			.add(Restrictions.like("Name", generic_name).ignoreCase());
			DiagnosisproList=cri.list();
			System.out.println("DiagnosisproList 2--"+DiagnosisproList.size());
			map.put("DiagnosisproList", DiagnosisproList);
			
			  */
			String str = "%" + map1.get("autoHint") + "%";
			
			String	query = "from OpdMasSymptom as oms where upper(SymptomName) like upper( :str )";
	
			Query q = session.createQuery(query);
			q.setParameter("str",str);
			q.setFirstResult(0);
			q.setMaxResults(20);
			symptomList = q.list();
			
			map.put("symptomList", symptomList);
		
			
			} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	

	@Override
	public Map<String, Object> showSymptom(Map<String, Object> map1) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			
			//String generic_name+"%"=  (String) map1.get("autoHint");
			String generic_name =  (String) map1.get("autoHint");
			List<Symptom> symptomList =session.createCriteria(Symptom.class)
			.add(Restrictions.eq("ComplaintDescription", generic_name).ignoreCase()).list();
			if(symptomList.size()>0)
			{
				map.put("symptomList", symptomList);
				Symptom symptom=symptomList.get(0);
				int symptomId=symptom.getId();
			List<SymptomCause>	symptomCauseList=session.createCriteria(SymptomCause.class)
			.add(Restrictions.eq("Symptom.Id",symptomId)).list();
			map.put("symptomCauseList", symptomCauseList);
			List<SymptomMedication>	symptomMedicationList=session.createCriteria(SymptomMedication.class)
			.add(Restrictions.eq("Symptom.Id",symptomId)).list();
			map.put("symptomMedicationList", symptomMedicationList);
			List<SymptomRelatedName> symptomRelatedNameList=session.createCriteria(SymptomRelatedName.class)
			.add(Restrictions.eq("Symptom.Id",symptomId)).list();
			map.put("symptomRelatedNameList", symptomRelatedNameList);
			List<SymptomDesc>	symptomDescList=session.createCriteria(SymptomDesc.class)
			.add(Restrictions.eq("Symptom.Id",symptomId)).list();
			map.put("symptomDescList", symptomDescList);
			List<SymptomSubComplains> symptomSubComplainsList=session.createCriteria(SymptomSubComplains.class)
			.add(Restrictions.eq("Symptom.Id",symptomId)).list();
			map.put("symptomSubComplainsList", symptomSubComplainsList);
			
			}
			
			} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	

	@Override
	public Map<String, Object> showDiagnosis(Map<String, Object> map1) {
		
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			
			//String generic_name+"%"=  (String) map1.get("autoHint");
			String generic_name =  "%" +(String) map1.get("autoHint")+ "%";

			List<Diagnosispro> DiagnosisproList = new ArrayList<Diagnosispro>();
			
			Criteria cri = session.createCriteria(Diagnosispro.class)
			.add(Restrictions.eq("Name", generic_name).ignoreCase());
			DiagnosisproList=cri.list();
			
			map.put("DiagnosisproList", DiagnosisproList);
			} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
		}

	@Override
	public Map<String, Object> getPreviousMedicalBoardDetails(
			Map<String, Object> mapForDS) {
		Map<String, Object> map = new HashMap<String, Object>();
		
		String serviceNo = (String) mapForDS.get("serviceNo");
		Connection con = null;
		Properties properties = new Properties();
		URL resourcePathHIC = Thread.currentThread().getContextClassLoader().getResource("hicDetails.properties");
		try {
			properties.load(resourcePathHIC.openStream());
		} catch (Exception e) {
			e.printStackTrace();
		}
		String hicDB = properties.getProperty("hicDB");
		String hicUser = properties.getProperty("hicUser");
		String hicPwd = properties.getProperty("hicPwd");
		String hicDbConfigure =  properties.getProperty("hicDbConfigure");
		if(hicDbConfigure.equals("yes")) {

			try {
				Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
				con = DriverManager.getConnection(hicDB, hicUser, hicPwd);

				OracleCallableStatement oraCallStmt   = null;
				OracleResultSet medBoardResultSet = null;
				oraCallStmt = (OracleCallableStatement) con.prepareCall(
						"{call GetForm15info(?,?)}"
				);
				oraCallStmt.setString(1, serviceNo);
				oraCallStmt.registerOutParameter(2, OracleTypes.CURSOR);
				oraCallStmt.execute();

				medBoardResultSet = (OracleResultSet) oraCallStmt.getCursor(2);

				map.put("medBoardResultSet", medBoardResultSet);
				//  oraCallStmt.close();
			} catch (InstantiationException e) {
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				e.printStackTrace();
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		
		/**
		 * End
		 */

	return map;
	}
	public Map<String, Object> showPopupTokenJsp(Map<String, Object> mapForDS) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = null;
		session = (Session) getSession();
		String roomNo = null;
		try{
			//List<Object[]> minTokenList = new ArrayList<Object[]>();
			//List<Visit> visitTokenList = new ArrayList<Visit>();
			//List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();
			List<Visit> tokenList = new ArrayList<Visit>();
			
			int deptId = 0;
			if(mapForDS.get("deptId")!=null){
				deptId = (Integer) mapForDS.get("deptId");
			}
			int hospitalId = 0;
			if(mapForDS.get("hospitalId")!=null){
				hospitalId = (Integer) mapForDS.get("hospitalId");
			}
			int empId = 0;
			if(mapForDS.get("empId")!=null){
				empId = (Integer) mapForDS.get("empId");
			}
			Date currentDate = new Date();
			//String reportingDept[] = {"OPD","FollowUp"};
			/*List<Integer> tokenDisplayList = new ArrayList<Integer>();
			tokenDisplayList = session.createCriteria(TokenDisplay.class).setProjection(Projections.property("VisitId")).list();*/
			/*minTokenList = session.createCriteria(Visit.class).add(Restrictions.eq("VisitStatus", "w"))
			.add(Restrictions.eq("Doctor.Id", empId))
			.add(Restrictions.eq("Hospital.Id", hospitalId))
			.add(Restrictions.eq("VisitDate", currentDate))
			.add(Restrictions.in("ReportingFor", reportingDept))
			//.add(Restrictions.eq("TokenStatus", "n"))
			.setProjection(Projections.projectionList().add(Projections.min("TokenNo")).add(Projections.groupProperty("Doctor.Id"))).list();
			if(minTokenList!=null && minTokenList.size()>0 && minTokenList.get(0)!=null){
				Integer[] token = new Integer[minTokenList.size()];
				int i=0;
				for (Object[] v : minTokenList) {
					token[i] = (Integer)v[0];
					i++;
				}*/
					
				//System.out.println("repo "+reportingDept);
				tokenList = 		 session.createCriteria(Visit.class).add(
						Restrictions.eq("VisitDate", currentDate))
						.add(Restrictions.eq("VisitStatus", "w"))
						.add(Restrictions.eq("Doctor.Id", empId))
						.add(Restrictions.eq("Department.Id", deptId))
						.createAlias("Hospital", "h").add(Restrictions.eq("h.Id", hospitalId)).list();
						//.add(Restrictions.in("ReportingFor", reportingDept)).list();
						;
			
				
				
				List<MasRoom> roomNoList = session.createCriteria(MasRoom.class)
						            .add(Restrictions.eq("Department.Id", deptId))
						            .setMaxResults(1)
						            .list();
				
				if(roomNoList.size() >0)
				{
					roomNo = roomNoList.get(0).getRoomCode();
					
				}
						
				
			//}
						
			
			/*if(deptId==81){
				visitTokenList = session.createCriteria(Visit.class).add(Restrictions.eq("TokenStatus", "y"))
			//	.add(Restrictions.eq("Department.Id", deptId))
				.add(Restrictions.eq("VisitDate", currentDate))
				.add(Restrictions.isNotNull("TokenNo")).list();
			}
			else
			{
			}*/
			//.add(Restrictions.eq("Department.Id", deptId))
			//----------------change By anamika------------
		/*	visitTokenList = session.createCriteria(Visit.class)
			.createAlias("Hin", "hin").createAlias("hin.Relation", "relation").createAlias("hin.Rank", "sRank")
			.createAlias("Doctor", "doctor")
			.createAlias("doctor.Rank", "docRank")
			.add(Restrictions.eq("VisitStatus", "w"))
			.add(Restrictions.eq("Hospital.Id", hospitalId))
			.add(Restrictions.eq("VisitDate", currentDate))
			.add(Restrictions.isNotNull("TokenDoctor")).add(Restrictions.in("ReportingFor", reportingDept))
			.setMaxResults(1).addOrder(Order.asc("TokenNo")).setProjection(Projections.projectionList()
					.add(Projections.groupProperty("doctor.Id"))
					.add(Projections.groupProperty("doctor.FirstName"))
					.add(Projections.groupProperty("doctor.MiddleName"))
					.add(Projections.groupProperty("doctor.LastName"))
					.add(Projections.groupProperty("hin.SFirstName"))
					.add(Projections.groupProperty("hin.SMiddleName"))
					.add(Projections.groupProperty("hin.SLastName"))
					.add(Projections.groupProperty("relation.RelationName"))
					.add(Projections.groupProperty("sRank.RankName"))
					.add(Projections.groupProperty("docRank.RankName"))
					.add(Projections.groupProperty("RoomNo"))
					.add(Projections.groupProperty("TokenNo"))
			)
			.list();*/
			//---------------------------
			
			
			/*
			List<MasDepartment> masDepartmentList = new ArrayList<MasDepartment>();
			masDepartmentList = session.createCriteria(MasDepartment.class).add(Restrictions.idEq(deptId)).list();
			String deptName="";
			if(masDepartmentList.size()>0){
				for (MasDepartment masDepartment : masDepartmentList) {
					deptName=masDepartment.getDepartmentName();
				}
			}
			map.put("masDepartmentList", masDepartmentList);
			map.put("deptId", deptId);
			map.put("deptName", deptName);
			 */
			map.put("tokenList", tokenList);
			map.put("roomNo", roomNo);
		
		}catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	

	@Override
	public Map<String, Object> updateVistToken(Map<String, Object> mapForToken) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = null;
		session = (Session) getSession();
		
		Transaction tx = null;
		try{
			
			int visitId = 0;
			int empId= 0;
			int hospitalId = 0;
			int token = 0;
			if(mapForToken.get("visitId")!=null){
				visitId = (Integer) mapForToken.get("visitId");
			}
			if(mapForToken.get("empId")!=null){
				empId = (Integer) mapForToken.get("empId");
			}
			if(mapForToken.get("hospitalId")!=null){
				hospitalId = (Integer) mapForToken.get("hospitalId");
			}
			if(mapForToken.get("token")!=null){
				token = (Integer) mapForToken.get("token");
			}
			tx = session.beginTransaction();
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			/*List<Visit> visitTokenList = new ArrayList<Visit>();
			Date currentDate = new Date();
			visitTokenList = session.createCriteria(Visit.class).add(Restrictions.eq("Doctor.Id", empId))
			.add(Restrictions.eq("VisitDate", currentDate)).list();
			//System.out.println(empId+"<--empId--visitTokenList-update token no-->"+visitTokenList.size());
			if(visitTokenList.size()>0){
				for (Visit visit2 : visitTokenList) {
					Visit visit3 = (Visit)hbt.load(Visit.class, visit2.getId());
					//System.out.println(visit3.getDoctor().getId()+"<--Doctor id--visit3.getId()--->"+visit3.getId());
					visit3.setDisplayToken(null);
					hbt.update(visit3);
					hbt.refresh(visit3);
				}
			}*/
			Visit visit = (Visit)hbt.load(Visit.class, visitId);
			visit.setTokenStatus("y");
			hbt.update(visit);
			hbt.refresh(visit);
			//----------change by anamika-----------------
			/*List<TokenDisplay>tokenDisplayList = new ArrayList<TokenDisplay>();
			tokenDisplayList = session.createCriteria(TokenDisplay.class)
					.add(Restrictions.eq("EmployeeId", empId)).add(Restrictions.eq("HospitalId", hospitalId))
					.add(Restrictions.eq("VisitDate", currentDate)).list();
			List<Visit> tokenList = new ArrayList<Visit>();
			tokenList = session.createCriteria(Visit.class).add(Restrictions.eq("Doctor.Id", empId))
			.add(Restrictions.eq("VisitDate", currentDate)).add(Restrictions.eq("TokenNo", token+1)).list();
			System.out.println("tokenList=="+tokenList.size());
			if(tokenList.size()>0){
			Visit visitForToken = tokenList.get(0);
			int visitIdForToken = visitForToken.getId();
			
			if(tokenDisplayList.size()>0){
			TokenDisplay tokenDisplay = tokenDisplayList.get(0);
			 tokenDisplay=(TokenDisplay)hbt.load(TokenDisplay.class,tokenDisplay.getId());
			 tokenDisplay.setVisitId(visitIdForToken);
						 hbt.update(tokenDisplay);
						}else{
							TokenDisplay tokenDisp = new TokenDisplay();
							tokenDisp.setEmployeeId(empId);
							tokenDisp.setHospitalId(hospitalId);
							tokenDisp.setVisitDate(currentDate);
							tokenDisp.setVisitId(visitIdForToken);
							hbt.save(tokenDisp);
							
						}
					}*/
						//System.out.println("data-update token no--");
			
			tx.commit();
		}catch (Exception e) {
			e.printStackTrace();
			if(tx!=null)
				tx.rollback();
		}
		return map;
	}
	// Dinesh 
	public Map<String, Object> submitDifferentialDiagnosis(String arr[])
	{
		Map<String, Object> map = new HashMap<String, Object>();
		List<Object[]> symptomDiseaseMappingList = new ArrayList<Object[]>();
		
		Session session = null;
		session = (Session) getSession();
		try
	
		{   org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		    hbt.setFlushModeName("FLUSH_EAGER");
		    hbt.setCheckWriteOperations(false);

			int cnt=0;
			String sqlId="";
			
			for(String a1:arr)
			{
			//	dignosisIdList.add(Integer.parseInt(a1));
				if(cnt==0){
						sqlId=a1;
				}else{
					sqlId=sqlId+","+a1;
				}
				++cnt;
			}
			//System.out.println("sqlId===="+sqlId);
			int countValue=0;
			if(arr.length>1){
				countValue=1;
			}
			/*symptomDiseaseMappingList =session.createCriteria(OpdSymptomDiseaseMapping.class).createAlias("Symptom", "symp")
			.add(Restrictions.in("symp.Id", dignosisIdList))
			.setProjection(
					Projections.distinct(Projections.projectionList()
							.add(Projections.property("symp.Id")))).list();*/
			//String str = "SELECT distinct(dd.Id),dd.DifferentialDiseaseName from jkt.hms.masters.business.OpdSymptomDiseaseMapping as osd join osd.Symptom as symp join osd.DifferentialDisease as dd where symp.Id  in ("+sqlId+")";
			String strQuery = "select DIFFERENTIAL_DISEASE_ID,DIFFERENTIAL_DISEASE_NAME from OPD_DIFFERENTIAL_DISEASE " +
					" where  DIFFERENTIAL_DISEASE_ID in (select distinct DIFFERENTIAL_DISEASE_ID " +
					" from OPD_SYMPTOM_DISEASE_MAPPING where SYMPTOM_ID in("+sqlId+")  " +
					" group by DIFFERENTIAL_DISEASE_ID HAVING count(DIFFERENTIAL_DISEASE_ID)>"+countValue+")";
 	
//			symptomDiseaseMappingList = getHibernateTemplate().find(strQuery);
			symptomDiseaseMappingList  = session.createSQLQuery(strQuery).list();
		map.put("symptomDiseaseMappingList", symptomDiseaseMappingList);	
			
		}catch(HibernateException he)
		{
			he.printStackTrace();
		}
		return map;
	}
	public Map<String, Object> showDiseaseFeatures(Box box) {
		Map<String,Object> map = new HashMap<String, Object>();
		List<OpdDifferentialDisease> differentialDiseaseList = new ArrayList<OpdDifferentialDisease>();
		Session session = (Session)getSession();
		differentialDiseaseList = session.createCriteria(OpdDifferentialDisease.class)
									.add(Restrictions.idEq(box.getInt("diffentialDisease"))).list();
		map.put("differentialDiseaseList", differentialDiseaseList);
		return map;
	}
	
	//==================code by anamika========================
	@Override
	public Map<String, Object> showPhysiotherapyListJsp(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasTherapyType> therapyTypeList  = new ArrayList<MasTherapyType>();
		List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();
		Session session = (Session)getSession();
		therapyTypeList = session.createCriteria(MasTherapyType.class).add(Restrictions.eq("Status", "y")).list();
		frequencyList = session.createCriteria(MasFrequency.class).add(Restrictions.eq("Status", "y")).addOrder(Order.asc("OrderNo")).list();
		map.put("therapyTypeList", therapyTypeList);
		map.put("frequencyList", frequencyList);
		return map;
	}
	@Override
	public Map<String, Object> getTheraphyId(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasTherapyType> therapyTypeList  = new ArrayList<MasTherapyType>();
		String therapyId=  box.getString("therapyId");
		Session session = (Session)getSession();
		therapyTypeList = session.createCriteria(MasTherapyType.class).add(Restrictions.eq("TherapyTypeCode", therapyId))
		  				.list();
		map.put("therapyTypeList", therapyTypeList);
		return map;
	}

	@Override
	public Map<String, Object> savePhysiotherapyDetails(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

		boolean flag = false;
		Transaction tx = null;
		Session session = (Session)getSession();
		try {
			tx = session.beginTransaction();
			int therapyCount = box.getInt("therapyCount");
			
			PhysioRequisitionHeader physioRequisitionHeader = new PhysioRequisitionHeader();
				Patient patient =  new Patient();
				patient.setId(box.getInt("hinId"));
				physioRequisitionHeader.setHin(patient);
				
				MasHospital masHospital = new MasHospital();
				masHospital.setId(box.getInt("hospitalId"));
				physioRequisitionHeader.setHospital(masHospital);
				
				physioRequisitionHeader.setStatus("p");
			
				Users user = new Users();
				user.setId(box.getInt("userId"));
				physioRequisitionHeader.setLastChgBy(user);
				
				MasEmployee medicalOfficer =new MasEmployee();
				medicalOfficer.setId(box.getInt("doctorId"));
				physioRequisitionHeader.setMedicalOfficer(medicalOfficer);
				if(box.getInt("visitId")!=0){
					Visit visit=new Visit();
					visit.setId(box.getInt("visitId"));
					physioRequisitionHeader.setVisit(visit);
					physioRequisitionHeader.setFlag("OPD");
					physioRequisitionHeader.setPatientType("OP");
				}
				if(box.getInt("inpatientId")!=0){
					Inpatient inpatient=new Inpatient();
					inpatient.setId(box.getInt("inpatientId"));
					physioRequisitionHeader.setInpatient(inpatient);
					physioRequisitionHeader.setFlag("IPD");
					physioRequisitionHeader.setPatientType("IP");
					
				}
				physioRequisitionHeader.setReqDate(HMSUtil.convertStringTypeDateToDateType(box.getString(LAST_CHANGED_DATE)));
				physioRequisitionHeader.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(box.getString(LAST_CHANGED_DATE)));
				physioRequisitionHeader.setLastChgTime(box.getString(LAST_CHANGED_TIME));
				physioRequisitionHeader.setReqTime(box.getString(LAST_CHANGED_TIME));
				hbt.save(physioRequisitionHeader);
			
			for (int j = 1; j <= therapyCount; j++) {
					PhysioRequisitionDetail physioRequisitionDetail = new PhysioRequisitionDetail();
					MasTherapyType masTherapyType = new MasTherapyType();
					masTherapyType.setId(box.getInt("therapyId"+j));
					physioRequisitionDetail.setTharaphy(masTherapyType);
					physioRequisitionDetail.setPhysioRequisitionHeader(physioRequisitionHeader);
					MasFrequency masFrequency = new MasFrequency();
					masFrequency.setId(box.getInt("frequency"+j));
					physioRequisitionDetail.setFrequency(masFrequency);
					physioRequisitionDetail.setRemark(box.getString("remarks"+j));
					physioRequisitionDetail.setDuration(box.getString("duration"+j));
					physioRequisitionDetail.setNoOfDays(box.getInt("noOfDays"+j));
					
					hbt.save(physioRequisitionDetail);
			}
			map.put("physioRequisitionHeaderId", physioRequisitionHeader.getId());
			flag = true;
			tx.commit();
		} catch (DataAccessException e) {
			if(tx!= null){
				tx.rollback();
			}
			e.printStackTrace();
		}
		map.put("flag", flag);
		return map;
	}

	
	@Override
	public Map<String, Object> getTherapyTypeListForAutoComplete(Map<String, Object> generalMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasTherapyType> therapyTypeList = new ArrayList<MasTherapyType>();
		Session session = (Session) getSession();
		try {
			String str =  "%"+generalMap.get("autoHint") + "%";
			String query = "from MasTherapyType as mtt where upper(TherapyTypeName) like upper(:str)";
			Query q = session.createQuery(query);
			q.setParameter("str",str);
			//q.setFirstResult(0);
			//q.setMaxResults(10);
			therapyTypeList = q.list();
			
		} catch (Exception e) {

			e.printStackTrace();
		}
		map.put("therapyTypeList", therapyTypeList);
		return map;
	}



	@Override
	public Map<String, Object> getDetailsForProcList(Map<String, Object> mapDetail) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasEmployee> doctorList = new ArrayList<MasEmployee>();
		List<MasNursingCare> procedureList = new ArrayList<MasNursingCare>();
		List<Object> visitProcedureList = new ArrayList<Object>();
		Session session = (Session)getSession();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

        int hospitalId=0;
		if (mapDetail.get("hospitalId") != null){
			hospitalId = Integer.parseInt("" + mapDetail.get("hospitalId"));
		}
		int visitId=0;
		if (mapDetail.get("visitId") != null){
			visitId = Integer.parseInt("" + mapDetail.get("visitId"));
		}
		int procDtId=0;
		if (mapDetail.get("procDtId") != null){
			procDtId = Integer.parseInt("" + mapDetail.get("procDtId"));
		}
		Properties properties = new Properties();
		URL resourcePath = Thread.currentThread().getContextClassLoader()
				.getResource("adt.properties");
		try {
			properties.load(resourcePath.openStream());
		} catch (Exception e) {
			e.printStackTrace();
		}
		if(procDtId>0){
			ProcedureDetails procedureDetails=(ProcedureDetails)hbt.load(ProcedureDetails.class, procDtId);
			if(procedureDetails.getStatus().equalsIgnoreCase("p")){
				hbt.delete(procedureDetails);
				hbt.refresh(procedureDetails);
			}
		}
		String empCategoryCodeForDoctor = properties.getProperty("empCategoryCodeForDoctor");
		doctorList = session.createCriteria(MasEmployee.class).add(Restrictions.eq("Status", "y")).createAlias("Hospital", "h")
						.add(Restrictions.eq("h.Id", hospitalId)).createAlias("EmpCategory", "ec")
						.add(Restrictions.eq("ec.EmpCategoryCode", empCategoryCodeForDoctor)).addOrder(Order.asc("FirstName")).list();
		procedureList = session.createCriteria(MasNursingCare.class).add(Restrictions.eq("Status", "y")).add(Restrictions.eq("NursingType", "p").ignoreCase()).list();
		Query qry=session.createQuery("select ph,pd from jkt.hms.masters.business.ProcedureDetails as pd join pd.ProcedureHeader as ph join ph.Visit as visit where visit.Id=:visitId");
		if(visitId!=0)
		{
			qry.setParameter("visitId", visitId);
		}
		visitProcedureList = qry.list();
		
		map.put("doctorList", doctorList);
		map.put("visitProcedureList", visitProcedureList);
		map.put("procedureList", procedureList);
		
		return map;
	
	}
	@Override
	public Map<String, Object> saveProcedureDetails(Box box) {
		Map<String, Object> map =new HashMap<String, Object>();
		
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

		boolean flag = false;
		Transaction tx = null;
		Session session = (Session)getSession();
		try {
			tx = session.beginTransaction();
			int procCount = box.getInt("procCount");
			int visitProcedureId=0;
			//int hinId=0;
			visitProcedureId = box.getInt("visitProcedureId");
			int procHdId = box.getInt("procHdId");
			ProcedureHeader procedureHeader = new ProcedureHeader();
			if(visitProcedureId>0){
				procedureHeader.setId(visitProcedureId);
			}else{
				try {
					Patient patient =  new Patient();
					patient.setId(box.getInt("hinId"));
					procedureHeader.setHin(patient);
					MasHospital masHospital = new MasHospital();
					masHospital.setId(box.getInt("hospitalId"));
					procedureHeader.setHospital(masHospital);
					procedureHeader.setStatus("p");
					Users user = new Users();
					user.setId(box.getInt("userId"));
					procedureHeader.setLastChgBy(user);
					
					MasEmployee medicalOfficer =new MasEmployee();
					medicalOfficer.setId(box.getInt("doctorId"));
					procedureHeader.setMedicalOfficer(medicalOfficer);
					if(box.getInt("visitId")!=0){
						Visit visit=new Visit();
						visit.setId(box.getInt("visitId"));
						procedureHeader.setVisit(visit);
					}
					if(box.getInt("inpatientId")!=0){
						Inpatient inpatient=new Inpatient();
						inpatient.setId(box.getInt("inpatientId"));
						procedureHeader.setInpatient(inpatient);
					}
					procedureHeader.setRequisitionDate(HMSUtil.convertStringTypeDateToDateType(box.getString(LAST_CHANGED_DATE)));
					procedureHeader.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(box.getString(LAST_CHANGED_DATE)));
					procedureHeader.setLastChgTime(box.getString(LAST_CHANGED_TIME));
					hbt.save(procedureHeader);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			
			for (int j = 1; j <= procCount; j++) {
				//if(box.getInt("procedureId"+j)>0){
					
					
					ProcedureDetails procedureDetails = new ProcedureDetails();
					if(box.getInt("procedureId"+j) != 0){
						MasNursingCare nursingCare = new MasNursingCare();
						nursingCare.setId(box.getInt("procedureId"+j));
						procedureDetails.setNursingCare(nursingCare);
					}else{
						procedureDetails.setProcedureName(box.getString("procedureName"+j));
					}
					procedureDetails.setProcedureHeader(procedureHeader);
					procedureDetails.setRemarks(box.getString("remarks"+j));
					procedureDetails.setStatus("p");
					hbt.save(procedureDetails);
				//}
			}
			map.put("procedureHeaderId", procedureHeader.getId());
			flag = true;
			tx.commit();
		} catch (DataAccessException e) {
			if(tx!= null){
				tx.rollback();
			}
			e.printStackTrace();
		}
		map.put("flag", flag);
	
		return map;
	}


	@Override
	public Map<String, Object> getDetentionDetailsList(Map<String, Object> map) {
		Map<String, Object> mapDetail =new HashMap<String, Object>();
		
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		//int hospitalId = 0;
		int visitId = 0;
		int hinId=0;
		if(map.get("visitId")!=null){
			visitId=(Integer)map.get("visitId");
		}
		if(map.get("hinId")!=null){
			hinId=(Integer)map.get("hinId");
		}
		List<PatientDetentionRegister> patientDetentionRegisterList=new ArrayList<PatientDetentionRegister>();
		try{
			patientDetentionRegisterList=hbt.find("from jkt.hms.masters.business.PatientDetentionRegister as pdr where pdr.Visit.Id="+visitId);
		}catch (Exception e) {
			e.printStackTrace();
		}
		mapDetail.put("patientDetentionRegisterList", patientDetentionRegisterList);
		return mapDetail;
	}

	@Override
	public Map<String, Object> saveDetentionDetails(Box box) {
		Map<String, Object> map =new HashMap<String, Object>();
		
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

		boolean flag = false;
		try {
			//PatientDetentionRegister patientDetentionRegister = (PatientDetentionRegister)hbt.load(PatientDetentionRegister.class,box.getInt("detentionId"));
			PatientDetentionRegister patientDetentionRegister =new PatientDetentionRegister();
			
			Patient patient =  new Patient();
			patient.setId(box.getInt("hinId"));
			patientDetentionRegister.setHin(patient);
			MasHospital masHospital = new MasHospital();
			masHospital.setId(box.getInt("hospitalId"));
			//System.out.println("box.getInt(hospitalId)--->"+box.getInt("hospitalId"));
			patientDetentionRegister.setHospital(masHospital);
			
			MasEmployee medicalOfficer =new MasEmployee();
			//System.out.println("box.getInt(doctorId)--"+box.getInt("doctorId"));
			medicalOfficer.setId(box.getInt("doctorId"));
			patientDetentionRegister.setMedicalOfficer(medicalOfficer);
			
			Visit visit=new Visit();
			visit.setId(box.getInt("visitId"));
			patientDetentionRegister.setVisit(visit);
			
			patientDetentionRegister.setDetainedFrom(HMSUtil.convertStringTypeDateToDateType(box.getString("detentionFromDate")));
			patientDetentionRegister.setDetentionRegisterDate(HMSUtil.convertStringTypeDateToDateType(box.getString("detentionFromDate")));
			patientDetentionRegister.setDetainedTo(HMSUtil.convertStringTypeDateToDateType(box.getString("detentionToDate")));
			patientDetentionRegister.setFromTime(box.getString("fromTime"));
			patientDetentionRegister.setToTime(box.getString("toTime"));
			patientDetentionRegister.setTreatment(box.getString("treatment"));
			patientDetentionRegister.setRequisitionDate(HMSUtil.convertStringTypeDateToDateType(box.getString(LAST_CHANGED_DATE)));
			Users user = new Users();
			user.setId(box.getInt("userId"));
			patientDetentionRegister.setLastChgBy(user);
			patientDetentionRegister.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(box.getString(LAST_CHANGED_DATE)));
			patientDetentionRegister.setLastChgTime(box.getString(LAST_CHANGED_TIME));
			patientDetentionRegister.setStatus("p");
			if(box.getString("reviewAt")!= null){
			patientDetentionRegister.setReviewAt(box.getString("reviewAt"));
			}
			hbt.save(patientDetentionRegister);
			flag = true;
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		map.put("flag", flag);
		return map;
	}

	// Dinesh
	@Override
	public Map<String, Object> showSymptomSubPopUp(Map<String, Object> map1)
	{
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String generic_name = "%" + map1.get("autoHint") + "%";
    		List<SymptomSubComplains> symptomSubComplainsList = session.createCriteria(SymptomSubComplains.class)
			.add(Restrictions.like("SubSymptomName", generic_name).ignoreCase()).list();
			
			//System.out.println("symptomSubComplainsList ===>"+symptomSubComplainsList.size());
			
			map.put("symptomSubComplainsList", symptomSubComplainsList);
			} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}
	@Override
	public Map<String, Object> showSymptomSub(Map<String, Object> map1) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			
			//String generic_name+"%"=  (String) map1.get("autoHint");
			String generic_name =  (String) map1.get("autoHint");
			List<SymptomSubComplains> symptomSubComplainsList=session.createCriteria(SymptomSubComplains.class)
			.add(Restrictions.eq("SubSymptomName",generic_name)).list();
			
			
			if(symptomSubComplainsList.size()>0)
			{
				SymptomSubComplains symptomSubComplains=symptomSubComplainsList.get(0);
			List<Symptom> symptomList =session.createCriteria(Symptom.class)
			.add(Restrictions.eq("Id", symptomSubComplains.getSymptom().getId())).list();
			if(symptomList.size()>0)
			{	
			map.put("symptomList", symptomList);
				Symptom symptom=symptomList.get(0);
				int symptomId=symptom.getId();
			List<SymptomCause>	symptomCauseList=session.createCriteria(SymptomCause.class)
			.add(Restrictions.eq("Symptom.Id",symptomId)).list();
			map.put("symptomCauseList", symptomCauseList);
			List<SymptomMedication>	symptomMedicationList=session.createCriteria(SymptomMedication.class)
			.add(Restrictions.eq("Symptom.Id",symptomId)).list();
			map.put("symptomMedicationList", symptomMedicationList);
			List<SymptomRelatedName> symptomRelatedNameList=session.createCriteria(SymptomRelatedName.class)
			.add(Restrictions.eq("Symptom.Id",symptomId)).list();
			map.put("symptomRelatedNameList", symptomRelatedNameList);
			List<SymptomDesc>	symptomDescList=session.createCriteria(SymptomDesc.class)
			.add(Restrictions.eq("Symptom.Id",symptomId)).list();
			map.put("symptomDescList", symptomDescList);
			}
			map.put("symptomSubComplainsList", symptomSubComplainsList);
			
			}
			
			} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}
	@Override
	public Map<String, Object> showHospitalizedDischargeSummaryReport(
			Map<String, Object> mapDetail) {

		//List<MasHospital> hospitalList = new ArrayList<MasHospital>();
		List<Patient> patientList = new ArrayList<Patient>();
		List<Inpatient> inpatientList = new ArrayList<Inpatient>();
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		boolean dischargeSummaryReportDetailsExist = false;
		String casetype = "";
		String adNo = "";
		String hinNo = "";
		String serviceNo = "";
		int dischargeId=0;
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if(mapDetail.get("dischargeId")!=null){
				
				dischargeId= (Integer) mapDetail.get("dischargeId");
			}
			/*
			  int hospital_id = (Integer) mapDetail.get(HOSPITAL_ID);
			  hospitalList = session.createCriteria(MasHospital.class).add(
					Restrictions.eq("Id", hospital_id)).list();*/
			
			List<Discharge> dischargeList=new ArrayList<Discharge>(); 
			dischargeList=session.createCriteria(Discharge.class).add(Restrictions.idEq(dischargeId)).list();
			if(dischargeList.size()>0){
				for (Discharge discharge : dischargeList) {
					if(discharge.getHin()!=null){
						serviceNo=discharge.getHin().getServiceNo();
						hinNo=discharge.getHin().getHinNo();
					}
					adNo=discharge.getAdNo();
					
				}
			}
			/*
			 * Following two parameters (hinNo, adNo) are used in the sql query
			 * which build in JASPER report Rest of the parameter values in the
			 * "parameter" map are used in Report Form
			 */
			/*System.out.println("hinNo-->"+hinNo);
			System.out.println("adNo-->"+adNo);
			System.out.println("serviceNo-->"+serviceNo);*/
			map.put("hinNo", hinNo);
			map.put("adNo", adNo);
			patientList = session.createCriteria(Patient.class).add(
					Restrictions.eq("ServiceNo", serviceNo)).list();
			
			inpatientList = session.createCriteria(Inpatient.class)
					.createAlias("Hin", "p").add(
							Restrictions.eq("p.ServiceNo", serviceNo)).add(
							Restrictions.eq("AdNo", adNo)).list();
			if (inpatientList.size() > 0) {
				for (Patient patient : patientList) {
					Set<DischargeSummary> dischargeSummarySet = (Set) patient
							.getDischargeSummaries();
					for (DischargeSummary dischargeSummary : dischargeSummarySet) {
						dischargeSummaryReportDetailsExist = true;
						casetype = dischargeSummary.getItemCode()
								.getCategoryName();
						try {
							if (dischargeSummary.getItemCode().getItemCode()
									.getItemCode().equalsIgnoreCase("BWHT"))
								map.put("bodyWeight", dischargeSummary
										.getItemReply());
						} catch (Exception e) {
							map.put("bodyWeight", "-");
						}
						try {
							if (dischargeSummary.getItemCode().getItemCode()
									.getItemCode().equalsIgnoreCase("ANTH"))
								map.put("anthropometry", dischargeSummary
										.getItemReply());
						} catch (Exception e) {
							map.put("anthropometry", "-");
						}
						try {
							if (dischargeSummary.getItemCode().getItemCode()
									.getItemCode().equalsIgnoreCase("OFC"))
								map.put("ofc", dischargeSummary.getItemReply());
						} catch (Exception e) {
							map.put("ofc", "-");
						}

						try {
							if (dischargeSummary.getItemCode().getItemCode()
									.getItemCode().equalsIgnoreCase("WGHT"))
								map.put("weight", dischargeSummary
										.getItemReply());
						} catch (Exception e) {
							map.put("weight", "-");
						}
						try {
							if (dischargeSummary.getItemCode().getItemCode()
									.getItemCode().equalsIgnoreCase("HGHT"))
								map.put("height", dischargeSummary
										.getItemReply());
						} catch (Exception e) {
							map.put("height", "-");
						}
					}
					String patientName = "";
					patientName = patient.getPFirstName();
					if( patient.getPMiddleName()!= null)
						patientName += " "+ patient.getPMiddleName();
					if( patient.getPLastName()!= null)
						patientName += " "+ patient.getPLastName();
					map.put("patientName", patientName);
					map.put("serviceNo", patient.getServiceNo());

					if (patient.getRank() != null) {
						map.put("rank", patient.getRank().getRankName());
					} else {
						map.put("rank", "-");
					}

					if (patient.getRelation() != null) {
						map.put("relation", patient.getRelation()
								.getRelationName());
					} else {
						map.put("relation", "-");
					}
					if (patient.getSex() != null) {
						map.put("sex", patient.getSex()
								.getAdministrativeSexName());
					} else {
						map.put("sex", "-");
					}
					String servicePersonName = "";
					servicePersonName = patient.getSFirstName();
					if( patient.getSMiddleName()!= null)
						servicePersonName += " "+ patient.getSMiddleName();
					if( patient.getSLastName()!= null)
						servicePersonName += " "+ patient.getSLastName();
					
					map.put("servicePersonName", servicePersonName);
					if (patient.getUnit() != null) {
						map.put("unit", patient.getUnit().getUnitName());
					} else {
						map.put("unit", "-");
					}
					if (patient.getBloodGroup() != null) {
						map.put("bloodGroup", patient.getBloodGroup()
								.getBloodGroupName());
					} else {
						map.put("bloodGroup", "-");
					}
					if (patient.getAddress() != null) {
						map.put("address", patient.getAddress());
					} else {
						map.put("address", "-");
					}

				}
				SimpleDateFormat formatOut1 = new SimpleDateFormat("dd-MM-yyyy");
				SimpleDateFormat formatIn1 = new SimpleDateFormat("yyyy-MM-dd");
				for (Inpatient inpatient : inpatientList) {
					try {
						if (inpatient.getDateOfAddmission() != null)
							map.put("doa", formatOut1.format(formatIn1
									.parse(inpatient.getDateOfAddmission()
											.toString())));
						else
							map.put("doa", "-");
					} catch (ParseException e2) {
						e2.printStackTrace();
					}

					try {
						if (inpatient.getDischargeDate() != null)
							map.put("dod", formatOut1.format(formatIn1
									.parse(inpatient.getDischargeDate()
											.toString())));
						// map.put("dod",
						// inpatient.getDischargeDate().toString());
						else
							map.put("dod", "-");

					} catch (ParseException e2) {
						e2.printStackTrace();
					}

					map.put("age", inpatient.getAge());
				}
			}
			} 
		catch (HibernateException e) {
			e.printStackTrace();
		}
		Connection con = session.connection();
		map.put("conn", con);
		map.put("dischargeSummaryReportDetailsExist", Boolean
				.valueOf(dischargeSummaryReportDetailsExist));
		map.put("casetype", casetype);
		return map;
	
	}
	@Override
	public Map<String, Object> showPatientPrevoiusPrescriptionRepeat(
			Map<String, Object> mapForDS) {
		Session session = (Session) getSession();
		List<Visit> patientVisitList = new ArrayList<Visit>();
		List<PatientPrescriptionHeader> patientPrescriptionHeaderList = new ArrayList<PatientPrescriptionHeader>();
		List<PatientPrescriptionDetails> patientPrescriptionList = new ArrayList<PatientPrescriptionDetails>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();

		@SuppressWarnings("unused")
		int visitId = (Integer) mapForDS.get("visitId");
/*		int hinId = (Integer) mapForDS.get("hinId");*/

		try {
			if (visitId > 0) {
				/*patientPrescriptionHeaderList = session.createCriteria(
						PatientPrescriptionHeader.class).createAlias("Visit",
						"visit").add(Restrictions.eq("visit.Id", visitId))
						.list();
				if (patientPrescriptionHeaderList.size() > 0) {
					PatientPrescriptionHeader patientPrescriptionHeader = (PatientPrescriptionHeader) patientPrescriptionHeaderList
							.get(0);

					int prescriptionId = patientPrescriptionHeader.getId();
					patientPrescriptionList = session.createCriteria(
							PatientPrescriptionDetails.class).createAlias(
							"Prescription", "prescription").add(
							Restrictions.eq("prescription.Id", prescriptionId))
							.list();
				}*/
				patientPrescriptionList=getHibernateTemplate().find("select ppd from  jkt.hms.masters.business.PatientPrescriptionDetails ppd join ppd.Prescription pph where pph.Visit.Id="+visitId);
			}
			frequencyList = session.createCriteria(MasFrequency.class).add(
					Restrictions.eq("Status", "y")).addOrder(Order.asc("OrderNo")).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientPrescriptionList", patientPrescriptionList);
		map.put("frequencyList", frequencyList);

		return map;
	}

	@Override
	public Map<String, Object> showPatientPrevoiusInvestigationNew(
			Map<String, Object> mapForDS) {

		Session session = (Session) getSession();
		List<Visit> patientVisitList = new ArrayList<Visit>();
		List<PatientInvestigationHeader> patientInvestigationHeaderList = new ArrayList<PatientInvestigationHeader>();
		List<PatientInvestigationDetails> patientInvestigationList = new ArrayList<PatientInvestigationDetails>();
		Map<String, Object> map = new HashMap<String, Object>();

		@SuppressWarnings("unused")
		int visitNo = (Integer) mapForDS.get("visitNo");
		int hinId = (Integer) mapForDS.get("hinId");
		int investigation_header_id=0;
		if(mapForDS.get("investigation_header_id")!=null){
			investigation_header_id = (Integer) mapForDS.get("investigation_header_id");
		}
		List<Object> resultList = new ArrayList<Object>();
		try {
			if (investigation_header_id > 0) {
				patientInvestigationHeaderList = session.createCriteria(
						PatientInvestigationHeader.class).add(Restrictions.idEq(investigation_header_id))
						.list();
				patientInvestigationList=getHibernateTemplate().find("select pid from jkt.hms.masters.business.PatientInvestigationDetails as pid join pid.InvestigationHeader as pih  where pih.Id="+investigation_header_id);
				resultList	=getHibernateTemplate().find("select dreh,dsch,visit from DgResultEntryHeader as dreh join dreh.SampleCollectionHeader as dsch join dsch.Order ord join ord.Visit as visit join dsch.Hin  as hin where visit.VisitNo='"+visitNo+"' and hin.Id="+hinId);
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("resultList", resultList);
		map.put("patientInvestigationList", patientInvestigationList);
		map.put("patientInvestigationHeaderList", patientInvestigationHeaderList);
		return map;
	
	}

	public Map<String, Object> getHospitalParameterDetails(int hospitalId) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasHospital> hospitalList = new ArrayList<MasHospital>();
		try {
			hospitalList = session.createCriteria(MasHospital.class).add(
					Restrictions.eq("Id", hospitalId)).list();
			map.put("hospitalList", hospitalList);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}	
	@Override
	public Map<String, Object> getListForDisease(Map<String, Object> dataMap) {
			Map<String, Object> map = new HashMap<String, Object>();
			List<MasIcd> itemList = new ArrayList<MasIcd>();
			Session session = (Session) getSession();
			
			try {
				String str = (String) dataMap.get("autoHint") + "%";
				
				Criteria c = session.createCriteria(MasIcd.class)
						.add(Restrictions.like("IcdName", str))
						.add(Restrictions.eq("Status","y"));

				c.setFirstResult(0);
				c.setMaxResults(10);
				itemList = c.list();

			} catch (Exception e) {
				e.printStackTrace();
			}
			map.put("itemList", itemList);
			/*map.put("objectList", objectList);*/
			return map;

		}

	public Map<String, Object> getDiseaseId(String diseaseWise) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasIcd> itemList = new ArrayList<MasIcd>();
		int icd_id2=0;
		Session session = (Session) getSession();
		try{
			itemList= session.createCriteria(MasIcd.class).add(Restrictions.like("IcdName",diseaseWise)).list();
			
			if(itemList.size()>0){
			 MasIcd masIcd = new MasIcd() ;
			 masIcd=itemList.get(0);
			 icd_id2=masIcd.getId();
			 map.put("icd_id2",icd_id2);	
			}
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@Override
	public Map<String, Object> showDiseaseWisePatient(
			Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Object> patientList=new ArrayList<Object>();
		List<Object> icdList=new ArrayList<Object>();
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Session session = (Session) getSession();
		String icdNameForSearch="";
		int icdIdForSearch=0;
		String icdName1="";
		String icdName2="";
		int hospitalId=0;
		String toDate="";
		String fromDate="";
		int summary=0;
		if (dataMap.get("icdNameForSearch") != null){
			icdNameForSearch =(String)dataMap.get("icdNameForSearch");
			
		}
		if (dataMap.get("icdName1") != null){
			icdName1 =(String)dataMap.get("icdName1");
		}
		if (dataMap.get("icdName2") != null){
			icdName2 =(String)dataMap.get("icdName2");
		}
		if (dataMap.get("hospitalId") != null){
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("toDate") != null){
			toDate =(String)dataMap.get("toDate");
		}
		if (dataMap.get("fromDate") != null){
			fromDate =(String)dataMap.get("fromDate");
		}
		if (dataMap.get("summary") != null){
			summary = Integer.parseInt("" + dataMap.get("summary"));
		}
		try
		{
			String sql="";
			if(icdNameForSearch!=""){
				icdIdForSearch=Integer.parseInt(icdNameForSearch);
				sql=" and icd.Id="+icdIdForSearch;
				/*List<MasIcd> masIcdList=new ArrayList<MasIcd>();
				masIcdList=hbt.find("from jkt.hms.masters.business.MasIcd as icd where icd.IcdName="+icdNameForSearch+"");
				if(masIcdList.size()>0){
					int icdId=0;
					for (MasIcd masIcd : masIcdList) {
						icdId=masIcd.getId();
					}
					
				}*/
			}else{
				if(icdName1=="" && icdName2!=""){
					sql=" and icd.IcdName like '%"+icdName2+"%' ";
				}else if(icdName1!="" && icdName2==""){
					sql=" and icd.IcdName like '%"+icdName1+"%' ";			
				}else if(icdName1!="" && icdName2!=""){
					sql=" and icd.IcdName between '"+icdName1+"' and '"+icdName2+ "' ";
				}
			}
			SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
			//summary==1 Summary
			if(summary==1){
				icdList=hbt.find("select icd.Id,icd.IcdName from jkt.hms.masters.business.DischargeIcdCode  as dic join dic.Icd as icd join dic.Hin as hin join hin.Hospital as hosp join dic.Visit as visit where hosp.Id="+hospitalId +" and dic.AddEditDate between '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(fromDate))+"' and  '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(toDate))+"'  "+sql +" group by icd.Id,icd.IcdName order by icd.IcdName");
				patientList=hbt.find("select icd.Id,icd.IcdName,hin.Id,hin.PFirstName,hin.PMiddleName,hin.PLastName from jkt.hms.masters.business.DischargeIcdCode  as dic join dic.Icd as icd join dic.Hin as hin join hin.Hospital as hosp join dic.Visit as visit where hosp.Id="+hospitalId +" and dic.AddEditDate between '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(fromDate))+"' and  '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(toDate))+"'  "+sql +" group by icd.Id,icd.IcdName,icd.Id,icd.IcdName,hin.Id,hin.PFirstName,hin.PMiddleName,hin.PLastName order by icd.Id");
			}else if (summary==2) {
				//icdList=hbt.find("select count(icd.Id),icd.IcdName,icd.Id from jkt.hms.masters.business.DischargeIcdCode  as dic join dic.Icd as icd join dic.Hin as hin join hin.Hospital as hosp join dic.Visit as visit where hosp.Id="+hospitalId +" and dic.AddEditDate between '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(fromDate))+"' and  '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(toDate))+"'  "+sql+" group by icd.Id,icd.IcdName order by icd.IcdName");
				String sqlStr2="";
				sqlStr2="select count(masicd1.icd_id) as count_icd, masicd1.icd_name as icd_name, masicd1.icd_id as icd_id "+ 
				" from discharge_icd_code discharge inner join mas_icd masicd1 on discharge.icd_id=masicd1.icd_id "+ 
				" inner join patient patient on discharge.hin_id=patient.hin_id "+ 
				" inner join mas_hospital hospital on patient.hospital_id=hospital.hospital_id "+ 
				" inner join visit visit on discharge.visit_id=visit.visit_id "+
				" where hospital.hospital_id="+hospitalId+" and discharge.add_edit_date between '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(fromDate))+"' and  '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(toDate))+"'  "+sql +"  group by masicd1.icd_id , masicd1.icd_name order by count_icd desc";
				icdList=session.createSQLQuery(sqlStr2).list();
			}else if (summary==3) {
				icdList=hbt.find("select icd.Id,icd.IcdName from jkt.hms.masters.business.DischargeIcdCode  as dic join dic.Icd as icd join dic.Hin as hin join hin.Hospital as hosp join dic.Visit as visit where hosp.Id="+hospitalId +" and dic.AddEditDate between '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(fromDate))+"' and  '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(toDate))+"'  "+sql +" group by icd.Id,icd.IcdName order by icd.IcdName");
				patientList=hbt.find("select icd.Id,icd.IcdName,hin.Id,hin.PFirstName,hin.PMiddleName,hin.PLastName from jkt.hms.masters.business.DischargeIcdCode  as dic join dic.Icd as icd join dic.Hin as hin join hin.Hospital as hosp join dic.Visit as visit where hosp.Id="+hospitalId +" and dic.AddEditDate between '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(fromDate))+"' and  '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(toDate))+"'  "+sql +" order by icd.Id");
			}
			map.put("icdList", icdList);
			map.put("patientList", patientList);
		}catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}
	
	public Map<String, Object> exportDiseaseWisePatient(
			Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Object> patientList=new ArrayList<Object>();
		List<Object> icdList=new ArrayList<Object>();
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		
		String icdName1="";
		String icdName2="";
		int hospitalId=0;
		String toDate="";
		String fromDate="";
		int summary=0;
		if (dataMap.get("icdName1") != null){
			icdName1 =(String)dataMap.get("icdName1");
		}
		if (dataMap.get("icdName2") != null){
			icdName2 =(String)dataMap.get("icdName2");
		}
		if (dataMap.get("hospitalId") != null){
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("toDate") != null){
			toDate =(String)dataMap.get("toDate");
		}
		if (dataMap.get("fromDate") != null){
			fromDate =(String)dataMap.get("fromDate");
		}
		if (dataMap.get("summary") != null){
			summary = Integer.parseInt("" + dataMap.get("summary"));
		}
		try
		{
			String sql="";
				if(icdName1=="" && icdName2!=""){
					sql=" and icd.IcdName like '%"+icdName2+"%' ";
				}else if(icdName1!="" && icdName2==""){
					sql=" and icd.IcdName like '%"+icdName1+"%' ";			
				}else if(icdName1!="" && icdName2!=""){
					sql=" and icd.IcdName between '"+icdName1+"' and '"+icdName2+ "' ";
				}
			SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
			//summary==1 Summary
			if(summary==1){
				icdList=hbt.find("select icd.Id,icd.IcdName from jkt.hms.masters.business.DischargeIcdCode  as dic join dic.Icd as icd join dic.Hin as hin join hin.Hospital as hosp join dic.Visit as visit where hosp.Id="+hospitalId +" and dic.AddEditDate between '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(fromDate))+"' and  '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(toDate))+"'  "+sql +" group by icd.Id,icd.IcdName order by icd.IcdName");
				patientList=hbt.find("select icd.Id,icd.IcdName,hin.Id,hin.PFirstName,hin.PMiddleName,hin.PLastName from jkt.hms.masters.business.DischargeIcdCode  as dic join dic.Icd as icd join dic.Hin as hin join hin.Hospital as hosp join dic.Visit as visit where hosp.Id="+hospitalId +" and dic.AddEditDate between '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(fromDate))+"' and  '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(toDate))+"'  "+sql +" group by icd.Id,icd.IcdName,icd.Id,icd.IcdName,hin.Id,hin.PFirstName,hin.PMiddleName,hin.PLastName order by icd.Id");
			}else if (summary==2) {
				icdList=hbt.find("select count(icd.Id),icd.IcdName,icd.Id from jkt.hms.masters.business.DischargeIcdCode  as dic join dic.Icd as icd join dic.Hin as hin join hin.Hospital as hosp join dic.Visit as visit where hosp.Id="+hospitalId +" and dic.AddEditDate between '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(fromDate))+"' and  '"+sdf.format(HMSUtil.convertStringTypeDateToDateType(toDate))+"'  "+sql+" group by icd.Id,icd.IcdName order by icd.IcdName");
			}
			map.put("icdList", icdList);
			map.put("patientList", patientList);
		}catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}
	public static void main(String[] args) {
		SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
		try {
			//System.out.println("date0000--"+);
			Date date =HMSUtil.convertStringTypeDateToDateType("10/10/2010");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	@Override
	public Map<String, Object> calculateIdealWeight(Map<String, Object> dataMap) {
		Map<String,Object> map = new HashMap<String, Object>();
		List<MasIdealWeight> idealWeightList = new ArrayList<MasIdealWeight>();
		Session session = (Session)getSession();
		float height =0;
		String age = "";
		int genderId = 0;
		if(dataMap.get("height") != null){
			height = (Float)(dataMap.get("height"));
		}
		if(dataMap.get("genderId") != null){
			genderId = (Integer)(dataMap.get("genderId"));
		}
		if(dataMap.get("age") != null){
			age = (String)(dataMap.get("age"));
		}
		String ageString = "";
		ageString = age.substring(1, 3);
		
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		idealWeightList = hbt.find("from MasIdealWeight as miw where miw.Gender.Id="+genderId+" and miw.Height="+height+" and miw.FromAge<="+ageString+" and miw.ToAge>="+ageString);
			/*idealWeightList =session.createCriteria(MasIdealWeight.class).add(Restrictions.eq("Gender.Id", genderId))
							.add(Restrictions.eq("Height", height)).add(Restrictions.le("FromAge", ageString)).add(Restrictions.ge("ToAge", ageString)).list();*/
			map.put("idealWeightList", idealWeightList);
		
		return map;
	}

	@Override
	public Map<String, Object> getPatientDetailsFordirectVisitEntry(
			String serviceNo) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<Object[]> hinNoList = new ArrayList<Object[]>();
		try {
			if (!serviceNo.equals("")) {
				/*hinNoList = session.createCriteria(Patient.class).add(
						Restrictions.eq("ServiceNo", serviceNo)).add(Restrictions.eq("PatientStatus", "Out Patient")).list();*/
				hinNoList = session.createCriteria(Patient.class).createAlias("Relation", "rel").add(Restrictions.eq("ServiceNo", serviceNo)).add(Restrictions.eq("PatientStatus","Out Patient"))
				.setProjection(Projections.distinct(Projections.projectionList().add(Projections.property("Id")).add(Projections.property("HinNo")).add(Projections.property("PFirstName")).add(Projections.property("PMiddleName")).add(Projections.property("PLastName"))
						.add(Projections.property("rel.RelationName")))).list();
			}
			map.put("hinNoList", hinNoList);
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return map;
	}

	@Override
	public Map<String, Object> getPatientData(Box box) {
		Map<String, Object>map = new HashMap<String, Object>();
		List<Patient> patientList = new ArrayList<Patient>();
		List<Object[]> patientPresriptionDetailList = new ArrayList<Object[]>();
		Properties properties = new Properties();
		URL resourcePath = Thread.currentThread().getContextClassLoader()
				.getResource("adt.properties");
		try {
			properties.load(resourcePath.openStream());
		} catch (Exception e) {
			e.printStackTrace();
		}
		String empCategoryCodeForDoctor = properties.getProperty("empCategoryCodeForDoctor");
		
	
		Session session = (Session)getSession();
		patientList = session.createCriteria(Patient.class).add(Restrictions.idEq(box.getInt("hinId"))).list();
		patientPresriptionDetailList = session.createCriteria(PatientPrescriptionDetails.class).add(Restrictions.eq("Ct", "yes"))
										.createAlias("Prescription", "prs").createAlias("prs.Hin", "hin").add(Restrictions.eq("hin.Id", box.getInt("hinId")))
										.createAlias("prs.Visit", "visit").createAlias("visit.Doctor", "doctor").createAlias("doctor.Rank", "dRank")
										.createAlias("hin.Rank", "rank").createAlias("Item", "item")
										.createAlias("Frequency", "frq")
										.setProjection(Projections.distinct(Projections.projectionList()
												.add(Projections.property("hin.Id"))
												.add(Projections.property("item.Nomenclature"))
												.add(Projections.property("doctor.FirstName"))
												.add(Projections.property("doctor.MiddleName"))
												.add(Projections.property("doctor.LastName"))
												.add(Projections.property("Dosage"))
												.add(Projections.property("NoOfDays"))
												.add(Projections.property("frq.FrequencyName"))
												.add(Projections.property("doctor.Id"))
												.add(Projections.property("item.Id"))
												.add(Projections.property("rank.RankName"))
												.add(Projections.property("dRank.RankName"))
												.add(Projections.property("prs.Remarks"))
												.add(Projections.property("frq.Id"))
										)).list();
		map.put("patientList", patientList);
		map.put("patientPresriptionDetailList", patientPresriptionDetailList);
		return map;
	}

	@Override
	public Map<String, Object> showCtJsp(Box box) {
		Map<String, Object>map = new HashMap<String, Object>();
		return map;
	}


	@Override
	public Map<String, Object> saveCtDetails(Box box) {
		Map<String, Object>map = new HashMap<String, Object>();
		Transaction tx = null;
		boolean flag = false;
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Session session = (Session)getSession();
		map.put("userName", box.getString("userName"));
		map.put("userId", box.getInt("userId"));
		map.put("hospitalId", box.getInt("hospitalId"));
		try {
			tx = session.beginTransaction();
			int ctCount = box.getInt("ctCount");
			PatientPrescriptionHeader patientPrescriptionHeader = new PatientPrescriptionHeader();
			Patient patient = new Patient();
			patient.setId(box.getInt("hinId"));
			patientPrescriptionHeader.setHin(patient);
			MasDepartment masDepartment= new MasDepartment();
			masDepartment.setId(box.getInt("departmentId"));
			patientPrescriptionHeader.setDepartment(masDepartment);
			MasHospital masHospital = new MasHospital();
			masHospital.setId(box.getInt("hospitalId"));
			patientPrescriptionHeader.setHospital(masHospital);
			patientPrescriptionHeader.setStatus("p");
			patientPrescriptionHeader.setPrescriptionDate(HMSUtil.convertStringTypeDateToDateType(box.getString(LAST_CHANGED_DATE)));
			patientPrescriptionHeader.setPrescriptionTime(box.getString(LAST_CHANGED_TIME));
			int prescriptionNo=getTransactionSequenceNoForPrescriptionNo(map);
			patientPrescriptionHeader.setPrescriptionNo(prescriptionNo);
			MasEmployee masEmployee = new MasEmployee();
			masEmployee.setId(box.getInt("doctorId"));
			patientPrescriptionHeader.setEmp(masEmployee);
			patientPrescriptionHeader.setRemarks(box.getString("remarks"));
			hbt.save(patientPrescriptionHeader);
			for (int j = 1; j <= ctCount; j++) {
				PatientPrescriptionDetails patientPrescriptionDetails = new PatientPrescriptionDetails();
				 if(!box.getString("ctCheck"+j).equals("")){
					 if(box.getInt("itemId"+j) != 0){
						 MasStoreItem masItem = new MasStoreItem();
						 masItem.setId(box.getInt("itemId"+j));
						 patientPrescriptionDetails.setItem(masItem);
					 }
					 if(!box.getString("dosage"+j).equals("")){
						 patientPrescriptionDetails.setDosage(box.getString("dosage"+j));
					 }
					 int frequencyId = 0;
					 if(box.getInt("frequencyId"+j) != 0){
						MasFrequency masFrequency = new MasFrequency();
						 frequencyId = box.getInt("frequencyId"+j);
						 masFrequency.setId(box.getInt("frequencyId"+j));
						 patientPrescriptionDetails.setFrequency(masFrequency);
					 }
					 if(box.getInt("noofDays"+j) != 0){
						 int noOfDays = box.getInt("noofDays"+j);
					    patientPrescriptionDetails.setNoOfDays(box.getInt("noofDays"+j));
					    int total = noOfDays * frequencyId;
						patientPrescriptionDetails.setTotal(total);
					 }
					 int qty = 0;
					 if(box.getInt("quantity"+j) != 0){
						 patientPrescriptionDetails.setQtyIssued(box.getInt("quantity"+j));
					 }
					 patientPrescriptionDetails.setPrescription(patientPrescriptionHeader);
					 hbt.save(patientPrescriptionDetails);
				 }
				
			}
			
			flag = true;
			tx.commit();
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		map.put("flag", flag);
		return map;
	}

    @Override
	 public boolean getAuthorizationForHighValueMedicine(Map<String, Object> dataMap) {
		Map<String, Object>map = new HashMap<String, Object>();
		
		List<MasEmployee>doctorList = new ArrayList<MasEmployee>();
		List<PatientPrescriptionHeader> patientPrescriptionHeaderList = new ArrayList<PatientPrescriptionHeader>();
		Session session = (Session)getSession();
		Boolean highValueFlag = false;
		String pvmsNo ="";
		int hospitalId = 0;
		int docId = 0;
		int hinId = 0;
		
		//get date for checking 3 month old prescription	
		int HVForJrDoct = Integer.parseInt(HMSUtil.getProperties("adt.properties", "HighValueMedicineForJuniorDoctor"));
		Calendar cal = Calendar.getInstance(); 
		cal.add(Calendar.MONTH, -HVForJrDoct);
		
		if(dataMap.get("hospitalId") != null){
			hospitalId = (Integer)dataMap.get("hospitalId");
		}
		if(dataMap.get("pvmsNo") != null){
			pvmsNo = (String)dataMap.get("pvmsNo");
		}

		if(dataMap.get("docId") != null){
			docId = (Integer)dataMap.get("docId");
		}
		
		if(dataMap.get("hinId") != null){
			hinId = (Integer)dataMap.get("hinId");
		}
		

		     doctorList = session.createCriteria(MasEmployee.class).add(Restrictions.eq("AuthorizedForHighValueMedicine", "y"))
				.add(Restrictions.eq("Id", docId))
				.list();
		 	
		      if(doctorList.size()>0)
				{
					highValueFlag = true;
				}
		      else if(doctorList.size()==0)//doctor is not authorized for high value medicine
				{
		    	//checking medicine has given in last 3 months 
		   	        patientPrescriptionHeaderList = 	 session.createCriteria(
									PatientPrescriptionDetails.class)
									.createAlias("Prescription", "p")
									 .createAlias("Item","item" )
									 .add(Restrictions.eq("item.PvmsNo", pvmsNo))
									 .add(Restrictions.ge("p.PrescriptionDate", cal.getTime()))
									.add(Restrictions.eq("p.Hin.Id", hinId)).list();
		   	        if(patientPrescriptionHeaderList.size()>0)
		   	        	highValueFlag = true;
		   	        else
		   	        	highValueFlag = false;
		   	        
				}
	
		//System.out.println(cal.getTime()+" doc" +hospitalId +" "+ pvmsNo +" "+" "+ docId +doctorList.size() +" d "+patientPrescriptionHeaderList.size());
		
		return highValueFlag;

	}

    
    
	@Override
	public Map<String, Object> getTodayOtherPrescription(Map<String, Object> dataMap) {
		List<Visit>visitList=new ArrayList<Visit>();
		List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();
		List<PatientPrescriptionDetails>ppdList=new ArrayList<PatientPrescriptionDetails>();
		Map<String, Object> map=new HashMap<String, Object>();
		List<Integer> currentPrescriptionIdList = new ArrayList<>();
		List<Integer> currentNIPPrescriptionIdList = new ArrayList<>();
		List<Object[]> stockList = new ArrayList<Object[]>();
		Session session=(Session)getSession();
		int currentMedicationDays= 0;
		int hinId= (Integer)dataMap.get("hinId");
		int hospitalId= (Integer)dataMap.get("hospitalId");
		try
		{
			currentMedicationDays = Integer.parseInt(HMSUtil.getProperties("adt.properties", "currentMedicationDays"));
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		Date date = new Date();
		Calendar c = Calendar.getInstance();
		c.setTime(date); 
		c.add(Calendar.DATE, -currentMedicationDays); 
		
			ppdList=session.createCriteria(PatientPrescriptionDetails.class).createAlias("Prescription", "Prescription")
					.add(Restrictions.eq("Prescription.Hin.Id",hinId))
					.createAlias("Item", "item")
					.add(Restrictions.eq("item.Status", "y").ignoreCase())
					.add(Restrictions.between("Prescription.PrescriptionDate",c.getTime(),date))
					.addOrder(Order.desc("Id")).list();
			
					if(ppdList.size()==0)
					{
						List<PatientPrescriptionHeader>pphList =session.createCriteria(PatientPrescriptionHeader.class)
								.add(Restrictions.eq("Hin.Id",hinId))
								.setMaxResults(1).addOrder(Order.desc("Id")).list();
					
						if(pphList.size()>0){
						ppdList=session.createCriteria(PatientPrescriptionDetails.class).createAlias("Prescription", "Prescription")
								.add(Restrictions.eq("Prescription.Id",pphList.get(0).getId()))
								.createAlias("Item", "item")
								.add(Restrictions.eq("item.Status", "y").ignoreCase())
								.addOrder(Order.asc("Id")).list();}
					}
					frequencyList = session.createCriteria(MasFrequency.class).add(
							Restrictions.eq("Status", "y")).addOrder(Order.asc("OrderNo")).list();	
					
					dataMap.put("hospitalId",(Integer)dataMap.get("hospitalId"));
					map = getCurrentPrescriptionList(dataMap);
								if(map.get("currentPrescriptionIdList")!=null)
									currentPrescriptionIdList = (List<Integer>) map.get("currentPrescriptionIdList");		
				
								currentNIPPrescriptionIdList = session.createCriteria(PatientPrescriptionDetails.class).createAlias("Prescription", "Prescription")
								.createAlias("Item", "item").createAlias("Item.ItemClassification", "cf")	
								.add(Restrictions.eq("item.Status", "y").ignoreCase())
								.add(Restrictions.eq("Prescription.Hin.Id",hinId))
								.add(Restrictions.between("Prescription.PrescriptionDate",c.getTime(),date))
								.add(Restrictions.eq("cf.Classification",HMSUtil.getProperties("adt.properties", "ItemClassificationCodeNIP")))
								.setProjection(Projections.projectionList().add(Projections.groupProperty("Id")))
								.list();
					
			Date expiryDate = HMSUtil.getExpiryDateYYYYMMDD();
			List<Integer> itemIdList = new ArrayList<Integer>();
			itemIdList.add(0);
			int	phrDeptID = Integer.parseInt(HMSUtil.getProperties("adt.properties","departmentIdForPharmacy"));
			for(PatientPrescriptionDetails treatment : ppdList){
				itemIdList.add(treatment.getItem().getId());
			}			
			stockList = session.createCriteria(StoreItemBatchStock.class).add(Restrictions.in("Item.Id", itemIdList)).add(Restrictions.eq("Hospital.Id", hospitalId)).add(Restrictions.eq("Department.Id",phrDeptID )).add(Restrictions.gt("ExpiryDate", expiryDate))
					.setProjection(Projections.projectionList().add(Projections.sum("ClosingStock")).add(Projections.property("Item.Id")).add(Projections.groupProperty("Item.Id"))).list();
System.out.println("currentPrescriptionIdList ="+currentPrescriptionIdList.toString());
			map.put("currentPrescriptionIdList",currentPrescriptionIdList);
			map.put("currentNIPPrescriptionIdList",currentNIPPrescriptionIdList);
    		map.put("ppdList",ppdList);
    		map.put("frequencyList", frequencyList);
    		map.put("stockList", stockList);	
		  //  System.out.println(visitId +" hinid: "+hinId+ " size: "+visitList.size()+ " size: "+visitIdList.size() +" size: "+ppdList.size());
		return map;
	}
	
	@Override
	public Map<String, Object> getTodayOtherPrescriptionForIPD(int hinId) {
		List<Visit>visitList=new ArrayList<Visit>();
		List<PatientPrescriptionDetails>ppdList=new ArrayList<PatientPrescriptionDetails>();
		Map<String, Object> map=new HashMap<String, Object>();
		Session session=(Session)getSession();
		//Date date =  new Date();
		int currentMedicationDays= 0;
		try
		{
			currentMedicationDays = Integer.parseInt(HMSUtil.getProperties("adt.properties", "currentMedicationDays"));
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		Date date = new Date();
		Calendar c = Calendar.getInstance();
		c.setTime(date); 
		c.add(Calendar.DATE, -currentMedicationDays); 
		
			ppdList=session.createCriteria(PatientPrescriptionDetails.class).createAlias("Prescription", "Prescription")
					.add(Restrictions.eq("Prescription.Hin.Id",hinId))
					.add(Restrictions.between("Prescription.PrescriptionDate",c.getTime(),date)).list();
					if(ppdList.size()==0)
					{
						ppdList=session.createCriteria(PatientPrescriptionDetails.class).createAlias("Prescription", "Prescription")
								.add(Restrictions.eq("Prescription.Hin.Id",hinId))
								.setMaxResults(1).addOrder(Order.desc("Id")).list();
					}
					
    		map.put("ppdList",ppdList);
		  
		return map;
	}
	
	
	@Override
	public Map<String, Object> stopCurrentMedication(Map<String,Object> mapForDS) {
	Box box = null;
	List<Visit>visitList=new ArrayList<Visit>();
	List<PatientPrescriptionDetails>ppdList=new ArrayList<PatientPrescriptionDetails>();
	Session session=(Session)getSession();
	Map<String,Object>map=new HashMap<String,Object>();
	int hinId =0;
	int hiddenValue =0;
	int docId = 0;
	
	Transaction tx = null;
   boolean submitted = false;
  
	if(mapForDS.get("box")!=null)
	{
	  box = (Box)mapForDS.get("box");
	 if(box.get("hinId")!=null)
	   hinId = box.getInt("hinId");
	 
	 if(box.get("hiddenValue")!=null)
	   hiddenValue = box.getInt("hiddenValue");
	 if(mapForDS.get("docId")!=null)
		 docId = (Integer) mapForDS.get("docId");
	 
     try {
			tx = session.beginTransaction();
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
 if(hiddenValue>0)
 {		
	 	MasEmployee emp = new MasEmployee();
	 	emp.setId(docId);
	 for(int j=1; j<=hiddenValue; j++)
			{
			     if(box.get("stop"+j)!=null & !box.get("stop"+j).trim().equals(""))
				   {
				/*	IpdMedicineIssueHeader ipdMedicineIssueHeader = new IpdMedicineIssueHeader(); 
					ipdMedicineIssueHeader = (IpdMedicineIssueHeader)session.createCriteria(IpdMedicineIssueHeader.class)
							.add(Restrictions.eq("PatientPrescriptionDetails.Id", box.getInt("stop"+i+j))).list().get(0);
					ipdMedicineIssueHeader.setStatus("s");
					hbt.update(ipdMedicineIssueHeader);
					hbt.flush();*/
					
					List<PatientPrescriptionDetails> ppDtList = null; 
					PatientPrescriptionDetails ppDt = null;
					ppDtList = session.createCriteria(PatientPrescriptionDetails.class)
							.createAlias("Prescription", "phd")
							.add(Restrictions.eq("Id", box.getInt("stop"+j))).add(Restrictions.eq("phd.Hin.Id", hinId))  .list();
					if(ppDtList.size() >0)
					{
						ppDt = ppDtList.get(0);
					
					ppDt.setItemStopStatus("y");
					ppDt.setItemStopDate(new Date());
					ppDt.setItemStopBy(emp);
					hbt.update(ppDt);
					//hbt.flush();
					}
				}
			}
 }	
			submitted = true;
	        tx.commit();
		} catch (Exception e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();

		} finally {
			// --------Session Closing----------
		//	session.close();
		}
		 
	}
	  //  System.out.println(visitId +" hinid: "+hinId+ " size: "+visitList.size()+ " size: "+visitIdList.size() +" size: "+ppdList.size());
	map.put("submitted", submitted);
	
	return map;
}
	public int getItemId1(String itemName) {
		
		int itemId = 0;
		Session session = (Session) getSession();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		String item1[] = itemName.split("\\[");
		if(item1.length>1 &&  item1[1]!=null){
			String item11[] = item1[1].split("]");
			String item111 = item11[0];
			itemList = session.createCriteria(MasStoreItem.class)
					.add(Restrictions.eq("PvmsNo", item111)).list();
			for (MasStoreItem masStoreItem : itemList) {
				itemId = masStoreItem.getId();
			}
		}
		//System.out.println("itemId----"+itemId);
		return itemId;
	}
	

	public String getItemName(int itemCode) {
		//System.out.println("itemCode------>>"+itemCode);
		String itemName ="";
		Session session = (Session) getSession();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		
		itemList = session.createCriteria(MasStoreItem.class)
				.add(Restrictions.eq("Id", itemCode)).list();

		for (MasStoreItem masStoreItem : itemList) {
			itemName = masStoreItem.getNomenclature();
		}

		return itemName;
	}
	@Override
	public Map<String, Object> checkForAlreadyIssuedPrescription(String itemCode, int hinId,int hospitalId) {
		Session session=(Session)getSession();
		int itemId=0;
		boolean matched=false;
		String val="";
		itemId=getItemId1(itemCode);
		
		String itemName="";
		itemName=getItemName(itemId);
		
		Map<String, Object> map = new HashMap<String, Object>();
		List<Integer> currentPrescriptionIdList =  new ArrayList<>();
		map.put("hinId",hinId );
		map.put("hospitalId", hospitalId);
		map.put("repeatPendingPres", "y");
		map = getCurrentPrescriptionList(map);
		if(map.get("currentPrescriptionIdList")!=null)
			currentPrescriptionIdList = (List<Integer>) map.get("currentPrescriptionIdList");
		
		
		
		if(currentPrescriptionIdList.contains(itemId))
			matched=true;
	/*	//System.out.println(""+itemName);
		List<Visit>visitList=new ArrayList<Visit>();
		visitList=session.createCriteria(Visit.class).add(Restrictions.eq("Id", visitId)).add(Restrictions.eq("Hospital.Id", hospitalId)) .list();
		int hinId=0;
		for(Visit visit:visitList){
			hinId=visit.getHin().getId();
		}
		//List<OpdPatientAllergyT>allergyTList=new ArrayList<OpdPatientAllergyT>();
		List<PatientPrescriptionDetails> prescriptionDetail=new ArrayList<PatientPrescriptionDetails>();
		Map<String,Object>map=new HashMap<String,Object>();
		prescriptionDetail=session.createCriteria(PatientPrescriptionDetails.class)
				.createAlias("Prescription", "Prescription")
				.createAlias("Prescription.Visit", "Visit").
				createAlias("Prescription.Hospital", "Hospital")
				.add(Restrictions.eq("Prescription.Hin.Id", hinId))
				.add(Restrictions.eq("Prescription.PrescriptionDate", new Date()))
				.add(Restrictions.eq("Item.Id", itemId))
				.add(Restrictions.eq("Hospital.Id", hospitalId))
				.list();
		
		allergyTList=session.createCriteria(OpdPatientAllergyT.class).createAlias("OpdPatientAllergy","OpdPatientAllergy").add(Restrictions.eq("OpdPatientAllergy.Hin.Id", hinId))
				//.add(Restrictions.eq("OpdPatientAllergy.Hin.Id", hinId))
				.list();
	
		
		
		//System.out.println("Duplicate itemId  "+itemId);
		//System.out.println("Duplicate hinId  "+hinId);
		//System.out.println("Duplicate prescriptionDetail  "+prescriptionDetail.size());
		if(prescriptionDetail.size()>0){
					matched=true;
		}
		else
		{
			
			
			prescriptionDetail =session.createCriteria(PatientPrescriptionDetails.class)
					.createAlias("Prescription", "Prescription")
					.createAlias("Prescription.Visit", "Visit").
					createAlias("Prescription.Hospital", "Hospital")
					.add(Restrictions.eq("Prescription.Hin.Id", hinId))
					//.add(Restrictions.eq("Prescription.PrescriptionDate", new Date()))
					.add(Restrictions.eq("Item.Id", itemId))
					//.add(Restrictions.ne("ItemStopStatus", "y"))
					.add(Restrictions.or(Restrictions.isNull("ItemStopStatus"), Restrictions.ne("ItemStopStatus", "y")))
					.add(Restrictions.eq("Hospital.Id", hospitalId))
					.addOrder(Order.desc("Prescription.Visit.Id"))
					.list();
	
			if(prescriptionDetail.size() >0)
			{
			int totalPrescribedDays = 0;
			Date prescribedDate = null;
			Date curentDate = new Date();
			int subtractDateDays = 0;
			String categoryCode = "";
			for( PatientPrescriptionDetails pDt:prescriptionDetail)
			{
				if(pDt.getItem().getItemCategory()!=null)
				categoryCode = pDt.getItem().getItemCategory().getItemCategoryCode();
				totalPrescribedDays = pDt.getNoOfDays();
				prescribedDate = pDt.getPrescription().getPrescriptionDate();
				break;
				
			}
			//System.out.println(curentDate.getTime()  +" "+ prescribedDate.getTime());
		//	subtractDateDays = curentDate - prescribedDate; 
			 int diffInDays = (int) ((curentDate.getTime() - prescribedDate.getTime()) / (1000 * 60 * 60 * 24));
			
			 if(diffInDays >= totalPrescribedDays)
			 {
				 matched=false;
			 }
			 else
				 matched=true;
			 
			if(matched){
				String  categoryCodeForDiabetes = "";
				try
				{
					categoryCodeForDiabetes = HMSUtil.getValuesFromPropertiesFile("adt.properties", "categoryCodeForDaibetes");
				}
				catch(Exception e)
				{
					e.printStackTrace();
				}
				
				 if(categoryCode!=null && categoryCodeForDiabetes.equalsIgnoreCase(categoryCode)){
					 String dt = prescribedDate.toString(); 
					 SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
					 Calendar c = Calendar.getInstance();
					 try {
						c.setTime(sdf.parse(dt));
					} catch (ParseException e) {
						e.printStackTrace();
					}
					 c.add(Calendar.DATE, totalPrescribedDays-7);  
					
					 dt = sdf.format(c.getTime()); 
					
					 if(curentDate.compareTo(c.getTime()) >0)
						  matched=false;
					 
					
				 }
			
			}
			
			}
				
			
		//}
		//System.out.println("allergyTList.size()-------->>>>"+prescriptionDetails.getItem().get);
		map.put("prescriptionDetail", prescriptionDetail);*/
		map.put("matched",matched);
		return map;
	}  
	
	
	@Override
	public Map<String, Object> displayAU(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		//List<MasStoreItem>itemMasterList = new ArrayList<MasStoreItem>();
		List<MasStoreItem>itemMasterListA = new ArrayList<MasStoreItem>();
		List<MasStoreItem>itemMasterListB = new ArrayList<MasStoreItem>();
		boolean disQty = false;
		//List<Object[]>itemBatchStockList = new ArrayList<Object[]>();
		String pvmsNo ="";
		int hospitalId = 0;
		if(dataMap.get("hospitalId") != null){
			hospitalId = (Integer)dataMap.get("hospitalId");
		}
		if(dataMap.get("pvmsNo") != null){
			pvmsNo = (String)dataMap.get("pvmsNo");
		}
		Session session = (Session)getSession();
		itemMasterListA = session.createCriteria(MasStoreItem.class).add(Restrictions.eq("PvmsNo", pvmsNo))						
							.list();
		
		Properties properties = new Properties();
		URL resourcePath = Thread.currentThread().getContextClassLoader()
				.getResource("adt.properties");
		String[] ItemClassCodeForLiquid = null;
		try {
			properties.load(resourcePath.openStream());
			//String [] wardDepartmentTypeCode = (String []) properties.get("a");
			ItemClassCodeForLiquid = properties.getProperty("ItemClassCodeForLiquidForm").trim().split(",");
			//departmentTypeCode = properties.getProperty("departmentTypeCodeForOpd");
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	
		
		itemMasterListB = session.createCriteria(MasStoreItem.class)
				            .createAlias("ItemClass", "IC")
				            .add(Restrictions.eq("PvmsNo", pvmsNo))	
							.add(Restrictions.in("IC.ItemClassCode", ItemClassCodeForLiquid))	
							.list();
		
	
		if(itemMasterListB.size() >0)
		{
			BigDecimal disQ = itemMasterListB.get(0).getADispQty();
			//if(
			if(disQ==null || disQ.compareTo(BigDecimal.ZERO) == 0)
				disQty =true;
		
		}

		
/*		int item_type_id=0;
		for(MasStoreItem listA: itemMasterListA)
		{
			item_type_id = listA.getItemType().getId();
		}
		
		if(item_type_id == 1)
		{
			itemMasterList = session.createCriteria(MasStoreItem.class).add(Restrictions.eq("PvmsNo", pvmsNo))
						.add(Restrictions.eq("Hospital.Id", 0))
						.list();
		}
		
		if(item_type_id == 2)// for NIV 
		{
			itemMasterList = session.createCriteria(MasStoreItem.class).add(Restrictions.eq("PvmsNo", pvmsNo))
						.add(Restrictions.eq("Hospital.Id", hospitalId))
						.list();
		}
		int itemId = 0;
		if(itemMasterList.size()>0){
			MasStoreItem storeItem = itemMasterList.get(0);
			itemId = storeItem.getId();
		}
		System.out.println("itemId==="+itemId);
		String str = "select sum(inp.closing_stock) from store_item_batch_stock inp  where item_id = "
			+ itemId + " and hospital_id = "+hospitalId+" and department_id in(35,24)";*/
		

		int itemId = 0;
		if(itemMasterListA.size()>0){
			MasStoreItem storeItem = itemMasterListA.get(0);
			itemId = storeItem.getId();
			
			
			
		}
		int  phrDeptID = 0; 
		int  addDays = 0;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		Date expiryDate = HMSUtil.getExpiryDateYYYYMMDD();
		
		try {
			properties.load(resourcePath.openStream());
			phrDeptID = Integer.parseInt(properties.getProperty("departmentIdForPharmacy"));
			addDays = Integer.parseInt(properties.getProperty("AddDaysInExpiryDate"));
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		
	/*	String str = "select sum(inp.closing_stock) from store_item_batch_stock inp  where item_id = "
				+ itemId + " and hospital_id = "+hospitalId+" and department_id =" + phrDeptID +
				" and expiry_date > =  DATEADD(day,"+ addDays +", "+currentDate+")";
				//" and expiry_date > = "+"2017-10-01";
		*/
		BigDecimal sum =  (BigDecimal)session.createCriteria(StoreItemBatchStock.class)
				            .add(Restrictions.eq("Item.Id", itemId))
				            .add(Restrictions.eq("Hospital.Id", hospitalId))
				            .add(Restrictions.eq("Department.Id", phrDeptID))
				            .add(Restrictions.gt("ExpiryDate", expiryDate))
				            .setProjection(Projections.sum("ClosingStock"))
         				         .uniqueResult();
		
		//BigDecimal sum = (BigDecimal)cr.uniqueResult();
		//List<BigDecimal> itemBatchStockList = session.createSQLQuery(str).list();
		//System.out.println("itemBatchStockList==="+itemBatchStockList.size());
	/*	if(itemBatchStockList != null){
		for (int i=0;i<itemBatchStockList.size();i++) {
			BigDecimal closingstock = itemBatchStockList.get(0);
			map.put("closingstock", closingstock);
			System.out.println("closingstock===="+closingstock);
		 }
		}*/
	//	System.out.println("closingstock===="+sum);
		if(sum!=null)
		map.put("closingstock", sum);
		
		map.put("disQty", disQty);
		map.put("itemMasterList", itemMasterListA);
		
		
		return map;
	}
	
	@Override
	public Map<String, Object> getBedStatus(int deptId, int hospitalId) {
		Session session=(Session)getSession();
		List<MasBed>bedList=new ArrayList<MasBed>();
		Map<String,Object>map=new HashMap<String,Object>();
		bedList=session.createCriteria(MasBed.class)
				.add(Restrictions.eq("Department.Id",deptId))
				.add(Restrictions.eq("Hospital.Id",hospitalId))
				.add(Restrictions.eq("Status","y"))
				.list();
		//System.out.println("bedList.size()  ----  >>>>"+bedList.size());
		map.put("bedList",bedList);
		return map;
	}
	
	
	
	public Map<String, Object>checkMappedCharge(Map<String, Object> map){
		List<MasChargeCode> masChargeCodes = new ArrayList<MasChargeCode>();
		Session session = (Session) getSession();
		String chargeName =(String)map.get("chargeName");
		List chargeTypeList=new ArrayList();
		chargeTypeList.add(10);
		chargeTypeList.add(11);
		masChargeCodes = session.createCriteria(MasChargeCode.class).add(Restrictions.in("ChargeType.Id",chargeTypeList))
				.add(Restrictions.like("ChargeCodeName", chargeName).ignoreCase())
				.list();
		if(masChargeCodes.size()>0){
			map.put("chargecodeId", masChargeCodes.get(0).getId());
		}
		map.put("count", masChargeCodes.size());
		return map;
	}
	
	
	@Override
	public Map<String, Object> getHospitalDepartment(Map<String, Object> dataMap) {
		int hospitalId=(Integer)dataMap.get("hospitalId");
		Session session = (Session) getSession();
	/*	System.out.println("hospitalId===="+hospitalId);
	
		//List<MasInstituteDepartment>list=session.createCriteria(MasInstituteDepartment.class)
		List<MasDepartment>list=session.createCriteria(MasDepartment.class)
				.createAlias("Hospital", "h")
				.add(Restrictions.eq("h.Id", hospitalId))
				.add(Restrictions.eq("Status", 'y').ignoreCase())
				.addOrder(Order.asc("DepartmentName")).list();
		dataMap.put("departmentList", list);*/
		
		

		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		String departmentTypeCode = null;

		Properties properties = new Properties();
		URL resourcePath = Thread.currentThread().getContextClassLoader()
				.getResource("adt.properties");

		try {
			properties.load(resourcePath.openStream());
			departmentTypeCode = properties.getProperty("departmentTypeCodeForOpd");
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		

		try {

	/*		departmentList=session.createCriteria(MasDepartment.class)
					.add(Restrictions.eq("Status","y").ignoreCase())
					.createAlias("DepartmentType", "dt")
					.createAlias("Hospital", "h")
					.add(Restrictions.eq("dt.DepartmentTypeCode",departmentTypeCode))
					.add(Restrictions.eq("h.Id",hospitalId))
					.addOrder(Order.asc("DepartmentName"))
					.list();*/
			
			departmentList=session.createCriteria(MasDepartment.class)
					.add(Restrictions.eq("Status","y").ignoreCase())
					.createAlias("DepartmentType", "dt")
					.add(Restrictions.eq("dt.DepartmentTypeCode",departmentTypeCode))
					.addOrder(Order.asc("DepartmentName"))
					.list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		dataMap.put("departmentList", departmentList);
		
	
		return dataMap;
	}
	
	@Override
	public Map<String, Object> getHospitalWards(Map<String, Object> dataMap) {
		int hospitalId=(Integer)dataMap.get("hospitalId");
		Session session = (Session) getSession();
	/*	System.out.println("hospitalId===="+hospitalId);
	
		//List<MasInstituteDepartment>list=session.createCriteria(MasInstituteDepartment.class)
		List<MasDepartment>list=session.createCriteria(MasDepartment.class)
				.createAlias("Hospital", "h")
				.add(Restrictions.eq("h.Id", hospitalId))
				.add(Restrictions.eq("Status", 'y').ignoreCase())
				.addOrder(Order.asc("DepartmentName")).list();
		dataMap.put("departmentList", list);*/
		
		

		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		String departmentTypeCode = null;

		Properties properties = new Properties();
		URL resourcePath = Thread.currentThread().getContextClassLoader()
				.getResource("adt.properties");

		try {
			properties.load(resourcePath.openStream());
			departmentTypeCode = properties.getProperty("departmentTypeCodeForWard");
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		

		try {

	/*		departmentList=session.createCriteria(MasDepartment.class)
					.add(Restrictions.eq("Status","y").ignoreCase())
					.createAlias("DepartmentType", "dt")
					.createAlias("Hospital", "h")
					.add(Restrictions.eq("dt.DepartmentTypeCode",departmentTypeCode))
					.add(Restrictions.eq("h.Id",hospitalId))
					.addOrder(Order.asc("DepartmentName"))
					.list();*/
			
			departmentList=session.createCriteria(MasDepartment.class)
					.add(Restrictions.eq("Status","y").ignoreCase())
					.createAlias("DepartmentType", "dt")					
					.add(Restrictions.eq("dt.DepartmentTypeCode",departmentTypeCode))
					.createAlias("Hospital", "hos")
					.add(Restrictions.eq("hos.Id",hospitalId))
					.addOrder(Order.asc("DepartmentName"))
					.list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		dataMap.put("departmentList", departmentList);
		
	
		return dataMap;
	}
	
	@Override
	public Map<String, Object> getOPNursingCareWaitingList(Map<String, Object> map) {
		Integer hospitalId=(Integer)map.get("hospitalId");
		int deptId=(Integer)map.get("deptId");
		Date FromDateId=(Date)map.get("FromDateId");
		Date ToDateId=(Date)map.get("ToDateId");
		List<PatientPrescriptionHeader> pendingInjectionList = new ArrayList<PatientPrescriptionHeader>();
		List<InjAppointmentHeader> InjectionList = new ArrayList<InjAppointmentHeader>();
		
		Session session = (Session)getSession();
		Criteria crit = null;
		Criteria critApp = null;
		
		List<ProcedureDetails> procedureDetails = new ArrayList<ProcedureDetails>();
		crit = session.createCriteria(ProcedureDetails.class)
				.createAlias("ProcedureHeader", "ph")
				.createAlias("ph.Hospital", "h")
				.add(Restrictions.eq("h.Id",hospitalId))
				.add(Restrictions.eq("Status", 'n').ignoreCase())
				.add(Restrictions.eq("ph.ProcedureType", HMSUtil.getProperties("adt.properties", "NursingTypeCodeForProcedure")));
		if(FromDateId!=null && ToDateId!=null){
			crit  = crit.add(Restrictions.between("AppointmentDate", FromDateId, ToDateId));
		}else{
			crit  = crit.add(Restrictions.eq("AppointmentDate", (new Date())));
		}
		
		 procedureDetails = crit.list();
		
		List<Integer> visitList = new ArrayList<Integer>(new HashSet());
		for(ProcedureDetails listA: procedureDetails)
		{
			visitList.add(listA.getProcedureHeader().getVisit().getId());
		}
		procedureDetails.clear();
		critApp = session.createCriteria(InjAppointmentDetails.class)
				.createAlias("InjAppointmentHeader", "injAph")
				.createAlias("injAph.Hospital", "h")
				.add(Restrictions.eq("Status", "p").ignoreCase())
				.add(Restrictions.eq("h.Id", hospitalId))
				/*.add(Restrictions.or(Restrictions.in("injAph.Visit.Id", visitList), Restrictions.eq("injAph.AppointmentDate",new Date())))*/
				//.add(Restrictions.eq("injAph.AppointmentDate",new Date()))
				//.add(Restrictions.eq("InjAppointmentDate",new Date()))
				.setProjection(Projections.groupProperty("InjAppointmentHeader"));
	/*	if(FromDateId!=null && ToDateId!=null){
			critApp  = critApp.add(Restrictions.between("injAph.AppointmentDate", FromDateId, ToDateId));
		}else{
			critApp  = critApp.add(Restrictions.eq("injAph.AppointmentDate", (new Date())));
		}
		*/
		
		if(FromDateId!=null && ToDateId!=null){
			critApp  = critApp.add(Restrictions.between("InjAppointmentDate", FromDateId, ToDateId));
		}else{
			critApp  = critApp.add(Restrictions.eq("InjAppointmentDate", (new Date())));
		}
		
		InjectionList = critApp.list();		
		for(InjAppointmentHeader listB: InjectionList)
		{
			visitList.add(listB.getVisit().getId());
		}
		List<Visit>pendingNursingList = new ArrayList<Visit>();		
		if(visitList.size()>0){
			pendingNursingList = session.createCriteria(Visit.class).add(Restrictions.in("Id", visitList)).list();
			procedureDetails.clear();
		}
		map.put("pendingNursingList", pendingNursingList);
		return map;
	}
	
	
	
	@Override
	public Map<String, Object> getDrugAndProcedureDetails(Map<String, Object> map) {
		try{
			String hinNo=(String)map.get("hinNo");
			Integer injAppId=(Integer)map.get("injAppId");
			Integer departmentId=(Integer)map.get("departmentId");
			Integer hospitalId=(Integer)map.get("hospitalId");
			int visitId=(Integer)map.get("visitId");
			String strDate=(String)map.get("opdDate");
			SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
			Date date=sdf.parse(strDate);
			Date today = new Date();
			
			Session session = (Session) getSession();
			List<PatientPrescriptionHeader> injectionList = new ArrayList<PatientPrescriptionHeader>();
			List<InjAppointmentDetails> injectionAppList = new ArrayList<InjAppointmentDetails>();
			if(injAppId!=null && injAppId!=0){
				injectionAppList=session.createCriteria(InjAppointmentDetails.class)
											.createAlias("InjAppointmentHeader","injAPNTHDR")
											.add(Restrictions.eq("injAPNTHDR.Id", injAppId))
											//.add(Restrictions.eq("injAPNTHDR.AppointmentDate", date))
											/*.add(Restrictions.eq("Status", "y").ignoreCase())*/
											/*.setProjection(Projections.distinct(Projections.property("Item.Id")))*/
											
											.list();  
			}
			
			/*String query="select d.status,d.inj_appointment_header_id,i.nomenclature,mf.frequency_name,ppd.item_id,roa.route_name,"
					+ " ppd.dosage,ppd.no_of_days,i.insulin_injection,ppd.frequency_id,ppd.total,d.inj_appointment_details_id,d.appointment_time from inj_appointment_details d "+
		" left outer join  inj_appointment_header h on h.inj_appointment_header_id=d.inj_appointment_header_id "+
		" left outer join patient_prescription_details ppd on ppd.id=d.prescription_details_id "+
		" left outer join mas_store_item i on i.item_id=ppd.item_id "+
		" left outer join mas_frequency mf on mf.frequency_id=ppd.frequency_id "+
		" left outer join route_of_administration roa on roa.route_id=ppd.route_id "+
		"  where h.visit_id="+visitId+" and h.appointment_date='"+today+"' and d.status='p' ";*/
			
		List<InjAppointmentDetails>injappList=session.createCriteria(InjAppointmentDetails.class).createAlias("InjAppointmentHeader", "injHeader")
				   .add(Restrictions.eq("injHeader.Visit.Id", visitId))
				   /*.add(Restrictions.eq("Status","p").ignoreCase())*/
				   /*.add(Restrictions.eq("InjAppointmentDate", date))*/
				   .list();
		
		
				
	/*			Object[] selectedCode = {"TAB","Cap"};
				List<PatientPrescriptionDetails>ppdList=session.createCriteria(PatientPrescriptionDetails.class)
										.createAlias("Prescription","pph").createAlias("pph.Visit","visit")
										.add(Restrictions.eq("visit.Id",visitId))
										.createAlias("Item","item")
										.createAlias("item.ItemCategory","cat")
										.createAlias("item.ItemClass","class")
										//.add(Restrictions.eq("cat.ItemCategoryCode", "DRG"))
										.add(Restrictions.in("class.ItemClassCode",selectedCode))
										.list();
				map.put("ppdList", ppdList);*/
				List<Visit> visitList = new ArrayList<Visit>();
				visitList= session.createCriteria(Visit.class).add(Restrictions.eq("Id", visitId)).list();
			
			List<Object[]>aList=new ArrayList<Object[]>();
			//aList=session.createSQLQuery(query).list();
			
			Map<String,Object> mapProce = getDetailsForProcWaitList(hospitalId,visitId,HMSUtil.getProperties("adt.properties", "NursingTypeCodeForProcedure"));
			map.put("pendingProcList", (List<ProcedureHeader>)mapProce.get("pendingProcList"));
			map.put("injectionAppList", injectionAppList);
			map.put("aList",injappList);
			map.put("visitList",visitList);
			
		}catch(Exception e){
			e.printStackTrace();
		}
		return map;
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public Map<String, Object> getDetailsForProcWaitList(int hospitalId, int visitId, String procedureType) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasEmployee> doctorList = new ArrayList<MasEmployee>();
		List<MasNursingCare> procedureList = new ArrayList<MasNursingCare>();
		Session session = (Session)getSession();
		
		Properties properties = new Properties();
		URL resourcePath = Thread.currentThread().getContextClassLoader()
				.getResource("adt.properties");
		try {
			properties.load(resourcePath.openStream());
		} catch (Exception e) {
			e.printStackTrace();
		}
		String empCategoryCodeForDoctor = properties.getProperty("empCategoryCodeForDoctor");
		doctorList = session.createCriteria(MasEmployee.class).add(Restrictions.eq("Status", "y")).createAlias("Hospital", "h")
						.add(Restrictions.eq("h.Id", hospitalId)).createAlias("EmpCategory", "ec")
						.add(Restrictions.eq("ec.EmpCategoryCode", empCategoryCodeForDoctor))
						.addOrder(Order.asc("FirstName")).list();
		procedureList = session.createCriteria(MasNursingCare.class)
						.add(Restrictions.eq("Status", "y"))
						/*.add(Restrictions.eq("NursingType", "p").ignoreCase())*/
						.addOrder(Order.asc("NursingName")).list();
		
		List<ProcedureHeader> pendingProcList = new ArrayList<ProcedureHeader>();
		Date fromDate = new Date();
		Date toDate =  new Date();
		
		pendingProcList = session.createCriteria(ProcedureDetails.class)
						.createAlias("ProcedureHeader", "ph")
						.createAlias("ph.Hospital", "h")
						.createAlias("ph.Visit", "v")
						.add(Restrictions.eq("v.Id", visitId))
						.add(Restrictions.eq("ph.ProcedureType", procedureType))
						.add(Restrictions.eq("h.Id", hospitalId))
						/*.add(Restrictions.between("ph.RequisitionDate", fromDate, toDate))*/.list();
		
		map.put("doctorList", doctorList);
		map.put("procedureList", procedureList);		
		map.put("pendingProcList", pendingProcList);
		return map;
	}
	
	public Map<String, Object> getItemBatch(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreItemBatchStock> batchList = new ArrayList<StoreItemBatchStock>();
		int deptId = box.getInt("deptId");
		int itemId =  box.getInt("itemId");
		int appDtId=box.getInt("appDtId");
		int hospitalId = box.getInt("hospitalId");
		int appointmentHeaderId = box.getInt("appointmentHeaderId");
		List<OpdVaccinationPlan> opdVaccinationPlanList = null;
		Session session = (Session)getSession();
		
		List<InjAppointmentDetails>injAppointmentDetails=session.createCriteria(InjAppointmentDetails.class).createAlias("InjAppointmentHeader","header")
						.add(Restrictions.eq("Item.Id",itemId))
						.add(Restrictions.eq("header.Id",appointmentHeaderId))
						.addOrder(Order.asc("Id")).list();

		//String blockStatus [] = {"Temporary Block","Parmanent Block"};
		//expiry_date < =  DATEADD(day,"+ addDays +", "+currentDate+")";
		int addDays = Integer.parseInt(HMSUtil.getValuesFromPropertiesFile("adt.properties", "AddDaysInExpiryDate".trim()));
		Date date = new Date();
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		cal.add(Calendar.DATE, addDays); 
		 
		date = cal.getTime();
		int opNursingDepId =Integer.parseInt(HMSUtil.getValuesFromPropertiesFile("adt.properties", "departmentIdForOPNursing".trim()));
		batchList = session.createCriteria(StoreItemBatchStock.class).createAlias("Item", "item")
						.add(Restrictions.eq("item.Id", itemId))
		  				.createAlias("Department", "dept")
		  				//.add(Restrictions.ge("ExpiryDate", date))
		  				.add(Restrictions.ge("ExpiryDate", HMSUtil.getExpiryDateYYYYMMDD()))
		  				.add(Restrictions.eq("dept.Id", deptId))
		  				.add(Restrictions.eq("Hospital.Id", box.getInt("hospitalId")))
		  				//.add(Restrictions.or( Restrictions.eq("dept.Id", deptId), Restrictions.eq("Hospital.Id", box.getInt("hospitalId"))))
		  				//.add(Restrictions.or(Restrictions.not(Restrictions.in("BlockStatus", blockStatus)), Restrictions.isNull("BlockStatus")))
		  				.list();
	
		if(injAppointmentDetails.size()>0 && injAppointmentDetails.get(0).getInjAppointmentHeader().getVisit()!=null)
		{
		opdVaccinationPlanList = session.createCriteria(
				OpdVaccinationPlan.class).createAlias("Visit", "visit")
				.add(Restrictions.eq("visit.Id", injAppointmentDetails.get(0).getInjAppointmentHeader().getVisit().getId()))
				.add(Restrictions.eq("Vaccin.Id",injAppointmentDetails.get(0).getVaccinId()))
				.list();
		
		}
		map.put("batchList", batchList);
		map.put("injAppointmentDetails", injAppointmentDetails);
		map.put("opdVaccinationPlanList", opdVaccinationPlanList);
		//System.out.println("dept"+deptId +pharmacyDepId+" "+appointmentHeaderId) ;
		return map;
	}
	
	@Override
	public Map<String,Object> submitNursingCare(Box box){
		Map<String,Object> datamap = new HashMap<String,Object>();
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		Transaction tx = null;
		hbt.setCheckWriteOperations(false);
		boolean flag=false;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		
		int  hospitalId = box.getInt("hospitalId");
		int  departmentId = box.getInt("departmentId");
		int visitId = box.getInt("visitId");
		int patientPrescriptionId = box.getInt("prescriptionId");
		
		int Id= box.getInt("Id");		
		String remarks = box.getString("remarks");
		String batchNo=box.getString("batchNo").split(":")[0];
		int adm=box.getInt("adm");
		int issueStock=box.getInt("issueStock");
		String procedure=box.get("procedure");
		String immunizationInj = box.getString("immunizationInj"); // added by amit das on 19-09-2016
		String frequencyCode = null; // added by amit das on 19-09-2016
		
	
		InjAppointmentDetails injAppointmentDetails = (InjAppointmentDetails) hbt.get(InjAppointmentDetails.class, Id);
		
		int noOfDays = 0;
		
		if(injAppointmentDetails.getNoOfDays()!=null)
			noOfDays = injAppointmentDetails.getNoOfDays();
			
		int nFrequencyCode =0;
		// int frequencyId= injAppointmentDetails.getFrequency().getId(); // commented by amit das on 19-09-2016
		int nursingId= injAppointmentDetails.getPatientPrescriptionDetails().getId();
		
		patientPrescriptionId = injAppointmentDetails.getPatientPrescriptionDetails().getId();
		visitId = injAppointmentDetails.getInjAppointmentHeader().getVisit().getId();
		
		if(injAppointmentDetails.getFrequency()!=null)
			frequencyCode = injAppointmentDetails.getFrequency().getFrequencyCode();
		
		
		if(frequencyCode!=null && frequencyCode.length()>0)
		{
		  nFrequencyCode =  Integer.parseInt(frequencyCode);
		}
		
		int nTotalProcedure = nFrequencyCode * noOfDays;
		
		int injAppointmentHeaderId = injAppointmentDetails.getInjAppointmentHeader().getId();
		
		List<InjAppointmentDetails> listA = new ArrayList<InjAppointmentDetails>();
		List<InjAppointmentDetails> listB = new ArrayList<InjAppointmentDetails>();
		
		Session session = (Session)getSession();
		/*
		 procedure updates for copper t 
		*/
		Criteria cr=session.createCriteria(InjAppointmentDetails.class).createAlias("InjAppointmentHeader", "header")
				.createAlias("PatientPrescriptionDetails", "nr")
				.add(Restrictions.eq("header.Id", injAppointmentHeaderId))
				.add(Restrictions.eq("nr.Id", nursingId));
				//.add(Restrictions.isNull("ExceptionalPrescription"));
		listA = cr.list();
		
		Criteria crExce =session.createCriteria(InjAppointmentDetails.class).createAlias("InjAppointmentHeader", "header")
				.createAlias("PatientPrescriptionDetails", "nr")
				.add(Restrictions.eq("header.Id", injAppointmentHeaderId))
				.add(Restrictions.eq("nr.Id", nursingId))
				.add(Restrictions.eq("Status","p").ignoreCase())
					.add(Restrictions.eq("InjAppointmentDate", new Date()));
					
			/*	.add(Restrictions.and(Restrictions.eq("InjAppointmentDate", new Date()),
						Restrictions.le("ExceptionalPrescription","y").ignoreCase()));*/
		listB = crExce.list();
		List<StoreItemBatchStock>storeItemBatch=session.createCriteria(StoreItemBatchStock.class).add(Restrictions.eq("BatchNo",batchNo)).add(Restrictions.eq("Item.Id", injAppointmentDetails.getItem().getId())).list();

		
		StoreItemBatchStock stock=null; 
	
		
		if(storeItemBatch.size()>0){
			stock=storeItemBatch.get(0);
			stock.setClosingStock(stock.getClosingStock().subtract(new BigDecimal(issueStock)));
		}
		
	try
	{
		tx = session.beginTransaction();
		if(listA!=null && listA.size()>0){
			if(listA.size() != nTotalProcedure)
			{	
				InjAppointmentDetails newDetailsId = new InjAppointmentDetails();
				newDetailsId.setPatientPrescriptionDetails(injAppointmentDetails.getPatientPrescriptionDetails());
				newDetailsId.setInjAppointmentHeader(injAppointmentDetails.getInjAppointmentHeader());
				newDetailsId.setItem(injAppointmentDetails.getItem());
				newDetailsId.setDose(injAppointmentDetails.getDose());
				newDetailsId.setFrequency(injAppointmentDetails.getFrequency());
				newDetailsId.setStatus("p");
				newDetailsId.setNoOfDays(injAppointmentDetails.getNoOfDays());
				newDetailsId.setFinalStatus("n");
				
				if(box.getString("AppointmentFlag").equalsIgnoreCase("y"))
				{
					newDetailsId.setNextAppointmentDate(HMSUtil.convertStringTypeDateToDateType(box.getString("AppointmentDate")));
					newDetailsId.setInjAppointmentDate(HMSUtil.convertStringTypeDateToDateType(box.getString("AppointmentDate")));
				}
				else
				{
					newDetailsId.setInjAppointmentDate(injAppointmentDetails.getInjAppointmentDate());
				}
				if(stock!=null){
						hbt.saveOrUpdate(stock);
						hbt.save(newDetailsId);
						hbt.refresh(newDetailsId);
				}
				
			}
			else
			{
			
				// update all injectiondetail row with final status
				for(InjAppointmentDetails dt: listA)
				{
		
					InjAppointmentDetails dt1 = new InjAppointmentDetails();
					//dt1 =hbt.get(InjAppointmentDetails.class, dt.getId());
					dt1 =(InjAppointmentDetails) hbt.get(InjAppointmentDetails.class, dt.getId());
					if(dt1 != null)
					{
						dt1.setFinalStatus("y");
						hbt.update(dt1);
						hbt.refresh(dt1);
					}
					
					
				}
			}
				
			try{
					if(injAppointmentDetails != null)
					{
						injAppointmentDetails.setInjAppointmentDate(new Date());
						injAppointmentDetails.setAppointmentTime(time);
						injAppointmentDetails.setNursingRemark(remarks);
						injAppointmentDetails.setStatus("y");
						injAppointmentDetails.setIssueStock(issueStock);
						if(adm!=1){
							injAppointmentDetails.setBatchNo(batchNo);
							injAppointmentDetails.setIssueStock(1);
							injAppointmentDetails.setAdministrator("n");
						}else{
							injAppointmentDetails.setAdministrator("y");
						}
						
						if(adm!=1 && stock!=null){
							hbt.saveOrUpdate(stock);
							hbt.save(injAppointmentDetails);
							hbt.refresh(injAppointmentDetails);
						}else{
							hbt.save(injAppointmentDetails);
							hbt.refresh(injAppointmentDetails);
						}
						flag=true;
					}
			 }catch(Exception e)
			 {
				 System.out.println("Error in Save Nursing Care OPD="+e);
			 }
			
			int itemId = 0;
			Date expiryDate =null;
			
			if(stock!=null && listA !=null)
			{
				itemId = stock.getItem().getId();
				expiryDate = stock.getExpiryDate();
			
			}
			
			
			
			
			MasHospital hospitalObj = new MasHospital();
			hospitalObj.setId(hospitalId);
			
			MasDepartment departmentObj = new MasDepartment();
			departmentObj.setId(departmentId);
			
			PatientPrescriptionDetails pdt = new PatientPrescriptionDetails();
			pdt.setId(patientPrescriptionId);
			
		
			StoreOpPatientIssueM storeOpPatientIssueM = new StoreOpPatientIssueM();
			storeOpPatientIssueM.setDepartment(departmentObj);
			
			Map<String, Object> adMap = new HashMap<String, Object>();
		      adMap.put("tableObjectName", "StoreOpPatientIssueM");            
	            adMap.put("isHospitalWise", "y");
	            adMap.put("hospitalId", hospitalId);
	            adMap.put("isYearly", "y");            
	            adMap.put("isMonthly", "n");
	            adMap.put("isPrefix", "n");
			 //adtHandlerService.generateAdNumber(adMap);
			
			//String issueNo = generateTransactionSequence(adMap, session);
	            String issueNo = HMSUtil.generateTransactionSequence(adMap, session, hbt);
			storeOpPatientIssueM.setHospital(hospitalObj);
			storeOpPatientIssueM.setIssueDate(new Date());
			storeOpPatientIssueM.setIssueNo(issueNo);
			storeOpPatientIssueM.setStatus("y");
			storeOpPatientIssueM.setIssueType("I");
			storeOpPatientIssueM.setTypeOfIssue("P");
			
			
			hbt.save(storeOpPatientIssueM);
			
			StoreOpPatientIssueT storeOpPatientIssueT = new StoreOpPatientIssueT();
			//int itemId=Integer.parseInt(""+itemIdList.get(i));
			storeOpPatientIssueT.setOpIssue(storeOpPatientIssueM);
			MasStoreItem masStoreItem = new MasStoreItem();
			masStoreItem.setId(itemId);
			storeOpPatientIssueT.setItemIdIssue(masStoreItem);
			storeOpPatientIssueT.setItemIdRequire(masStoreItem);
			storeOpPatientIssueT.setItem(masStoreItem);
			storeOpPatientIssueT.setBatchNo(batchNo);
			storeOpPatientIssueT.setQtyIssued(new BigDecimal(issueStock));
			storeOpPatientIssueT.setExpiryDate(expiryDate);
	
			Visit visit = new Visit();
			visit.setId(visitId);
			storeOpPatientIssueT.setVisit(visit);
//			storeOpPatientIssueT.setNisStatus("n");
//			storeOpPatientIssueT.setNisQty(new BigDecimal(0.00));
			storeOpPatientIssueT.setPrescription(pdt);
			hbt.save(storeOpPatientIssueT);
		}
	
	/*	if(listB!=null && listB.size()>0){
				try{
						if(injAppointmentDetails != null)
						{
							injAppointmentDetails.setInjAppointmentDate(new Date());
							injAppointmentDetails.setAppointmentTime(time);
							injAppointmentDetails.setNursingRemark(remarks);
							injAppointmentDetails.setStatus("y");
							injAppointmentDetails.setIssueStock(issueStock);
							injAppointmentDetails.setFinalStatus("n");
							if(adm!=1){
								injAppointmentDetails.setBatchNo(batchNo);
								injAppointmentDetails.setIssueStock(1);
								injAppointmentDetails.setAdministrator("n");
							}else{
								injAppointmentDetails.setAdministrator("y");
							}
							if(adm!=1 && stock!=null){
								hbt.saveOrUpdate(stock);
								hbt.save(injAppointmentDetails);
								hbt.refresh(injAppointmentDetails);
							}else{
								hbt.save(injAppointmentDetails);
								hbt.refresh(injAppointmentDetails);
							}
							flag=true;
						}
				 }catch(Exception e)
				 {
					 System.out.println("Error in Save Nursing Care OPD="+e);
				 }
				
		}	*/	
		
		
		//update header status to y
		List<InjAppointmentDetails> listC = new ArrayList<InjAppointmentDetails>();
		listC = session.createCriteria(InjAppointmentDetails.class).createAlias("InjAppointmentHeader", "header").add(Restrictions.eq("header.Id", injAppointmentHeaderId))
				.add(Restrictions.eq("FinalStatus", "y")).list();
		
		if(listA!=null && listC!=null && (listA.size() ==listC.size()))
		{
			InjAppointmentHeader ah = (InjAppointmentHeader) hbt.load(InjAppointmentHeader.class, injAppointmentHeaderId);
			ah.setStatus("y");
			hbt.saveOrUpdate(ah);
			hbt.refresh(ah);
		}
		

		if(immunizationInj!=null && immunizationInj.equalsIgnoreCase("Y") && box.get("vaccinPlanId")!=null){
			injAppointmentDetails.setFinalStatus("y");
			hbt.update(injAppointmentDetails);
			int vaccinationPlanId = 0 ;
			
			vaccinationPlanId = box.getInt("vaccinPlanId");
			OpdVaccinationPlan vaccinationPlan = (OpdVaccinationPlan)hbt.load(OpdVaccinationPlan.class,vaccinationPlanId);
			
		/*	Patient hin = null;
			MasHospital masHospital	= (MasHospital)session.get(MasHospital.class, box.getInt("hospitalId"));
			
			OpdVaccinMst vaccinMst = new OpdVaccinMst();
			vaccinMst.setId(box.getInt("vaccinId"));
			vaccinationPlan.setVaccin(vaccinMst);*/
/*			
			if(box.getInt("hinId")!=0){
				hin = (Patient)session.get(Patient.class, box.getInt("hinId"));
				vaccinationPlan.setHin(hin);
			}
			vaccinationPlan.setHospital(masHospital);
			vaccinationPlan.setLastChgDate(new Date());
			vaccinationPlan.setLastChgTime(time);
*/			vaccinationPlan.setVaccinCompleteDate(new Date());
            vaccinationPlan.setStatus("y");
	/*		Users users = new Users();
			users.setId(box.getInt("userId"));
			vaccinationPlan.setLastChgBy(users);*/
			//hbt.save(vaccinationPlan);
            hbt.update(vaccinationPlan);
			
			vaccinationPlanId=vaccinationPlan.getId();						
			
/*			if(hin!=null && hin.getMember()!=null){
			int memberId2=0;
			List<PhMemberSurvey>PhMemberSurveyList=new ArrayList<PhMemberSurvey>();
			PhMemberSurveyList=session.createCriteria(PhMemberSurvey.class).add(Restrictions.eq("Id", hin.getMember().getId())).list();
			int subcentreId=0;
			for(PhMemberSurvey PhMemberSurvey:PhMemberSurveyList){
				if(PhMemberSurvey.getHospital()!=null){
				subcentreId=PhMemberSurvey.getHospital().getId();
				memberId2=PhMemberSurvey.getMemberId();
			  } 
			}
			List<OpdVaccinationPlan>OpdVaccinationPlanList=new ArrayList<OpdVaccinationPlan>();
			OpdVaccinationPlanList=session.createCriteria(OpdVaccinationPlan.class).add(Restrictions.eq("Id", vaccinationPlanId)).list();
			for(OpdVaccinationPlan opdVaccinationPlan :OpdVaccinationPlanList){
			if(subcentreId!=0){

			MasHospital mh=new MasHospital();
			mh.setId(subcentreId);
			//opdVaccinationPlan.setSubCentre(mh);
			
			//opdVaccinationPlan.setMember(memberId2);
			hbt.update(opdVaccinationPlan);
		    }
		  }
		  }*/
		}
		tx.commit();
	}
	
	catch (Exception e) {
		tx.rollback();
		e.printStackTrace();
	}
		
	
		
		 datamap.put("flag", flag);
		 return datamap;
	}
	
	
	@SuppressWarnings("unchecked")
	@Override
	public Map<String, Object> getPendingInjectionList(Box box,Date FromDate,Date ToDate,int hospitalId) {
		Map<String,Object>map=new HashMap<String,Object>();	
		/*Integer hospitalId=box.getInt("hospitalId");*/
		int deptId=box.getInt("deptId");
		Date FromDateId=HMSUtil.convertStringTypeDateToDateType(box.get("FromDateId"));
		Date ToDateId=HMSUtil.convertStringTypeDateToDateType(box.get("ToDateId"));
		List<PatientPrescriptionHeader> pendingInjectionList = new ArrayList<PatientPrescriptionHeader>();
		List<InjAppointmentHeader> pendingInjectionAppList = new ArrayList<InjAppointmentHeader>();
		Session session = (Session)getSession();
		Criteria crit = null;
		Criteria critApp = null;
		/*if(FromDateId==new Date()){
			critApp = session.createCriteria(InjAppointmentHeader.class).add(Restrictions.eq("Status", "p").ignoreCase()).
					createAlias("Hospital", "h").add(Restrictions.eq("h.Id", hospitalId)).add(Restrictions.eq("AppointmentDate",new Date()));
		}else{*/

		critApp = session.createCriteria(InjAppointmentDetails.class)
				.createAlias("InjAppointmentHeader", "injAph")
				.createAlias("injAph.Hospital", "h")
				.add(Restrictions.eq("injAph.Status", "p").ignoreCase())
				.add(Restrictions.eq("h.Id", hospitalId))
				.setProjection(Projections.groupProperty("InjAppointmentHeader"));
		
	/*		critApp = session.createCriteria(InjAppointmentHeader.class).add(Restrictions.eq("Status", "p").ignoreCase()).
					createAlias("Hospital", "h").add(Restrictions.eq("h.Id", hospitalId));*/
			if(FromDateId!=null && ToDateId!=null){
				critApp  = critApp.add(Restrictions.between("injAph.AppointmentDate", FromDate, ToDate));
			}else{
				critApp  = critApp.add(Restrictions.eq("injAph.AppointmentDate", (new Date())));
			}
		//}
		pendingInjectionAppList = critApp.list();
		
		map.put("pendingInjectionAppList", pendingInjectionAppList);
		return map;
}
	
	
	@Override
	public Map<String, Object> saveNursingCare(Box box) {
		
		Map<String,Object> datamap = new HashMap<String,Object>();
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		boolean flag=false;
		Session session = (Session)getSession();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		
		int Id= box.getInt("Id");		
		String remarks = box.getString("remarks");
		String batch = box.getString("batch");
		
		ProcedureDetails procedureDetails = (ProcedureDetails) hbt.load(ProcedureDetails.class, Id);
		int noOfDays = procedureDetails.getNoOfDays();
		int nFrequencyCode =0;
		int frequencyId= procedureDetails.getFrequency().getId();
		int nursingId= procedureDetails.getNursingCare().getId();
		String frequencyCode = procedureDetails.getFrequency().getFrequencyCode() ;
	
		if(frequencyCode.length()>0)
		{
		  nFrequencyCode =  Integer.parseInt(frequencyCode);
		}
		
		int nTotalProcedure = nFrequencyCode * noOfDays;
		
		int procedureHeaderId = procedureDetails.getProcedureHeader().getId();
		int nursingcareId= procedureDetails.getNursingCare().getId();
		List<ProcedureDetails> listA = new ArrayList<ProcedureDetails>();
		
		Criteria cr = null;
		cr = session.createCriteria(ProcedureDetails.class).createAlias("ProcedureHeader", "header").add(Restrictions.eq("header.Id", procedureHeaderId));
		cr.createAlias("NursingCare", "nr").add(Restrictions.eq("nr.Id", nursingId));
		listA = cr.list();
		
	/*	List<MasProcedureItemMapping> listItemMappings=session.createCriteria(MasProcedureItemMapping.class).createAlias("Procedure","prc").add(Restrictions.eq("prc.Id",nursingcareId)).list();
		if(listItemMappings.size()>0){
			MasProcedureItemMapping mpc=(MasProcedureItemMapping)listItemMappings.get(0);
			List<StoreItemBatchStock>storeItemBatch=session.createCriteria(StoreItemBatchStock.class)
					//.add(Restrictions.eq("BatchNo",batch))
					.add(Restrictions.eq("Item.Id", mpc.getItem().getId())).list();
			StoreItemBatchStock stock=null;
			if(storeItemBatch.size()>0){
				stock=storeItemBatch.get(0);
				stock.setClosingStock(stock.getClosingStock().subtract(new BigDecimal(1)));
				hbt.update(stock);
			}
		}*/
		
		if(listA.size() != nTotalProcedure)
		{
			ProcedureDetails newDetailsId = new ProcedureDetails();
			newDetailsId.setProcedureHeader(procedureDetails.getProcedureHeader());
			newDetailsId.setNursingCare(procedureDetails.getNursingCare());
			newDetailsId.setFrequency(procedureDetails.getFrequency());
			newDetailsId.setStatus("n");
			newDetailsId.setNoOfDays(procedureDetails.getNoOfDays());
			newDetailsId.setFinalProcedureStatus("n");
			newDetailsId.setRemarks(procedureDetails.getRemarks());
			if(box.getString("AppointmentFlag").equalsIgnoreCase("y"))
			{
				newDetailsId.setNextAppointmentDate(HMSUtil.convertStringTypeDateToDateType(box.getString("AppointmentDate")));
				newDetailsId.setAppointmentDate(HMSUtil.convertStringTypeDateToDateType(box.getString("AppointmentDate")));
				
			}
			else
			{
				newDetailsId.setAppointmentDate(procedureDetails.getAppointmentDate());
			}
			hbt.save(newDetailsId);
			hbt.refresh(newDetailsId);
		}
		else
		{
			// update all procedure detail row with final status
			for(ProcedureDetails dt: listA)
			{
				ProcedureDetails dt1 = new ProcedureDetails();
				dt1 =(ProcedureDetails) hbt.get(ProcedureDetails.class, dt.getId());
				if(dt1 != null)
				{
					dt1.setFinalProcedureStatus("y");
					hbt.update(dt1);
					hbt.refresh(dt1);
				}
			}
		}
			
		List<ProcedureDetails> listB = new ArrayList<ProcedureDetails>();
		List<ProcedureDetails> listC = new ArrayList<ProcedureDetails>();
		listB = session.createCriteria(ProcedureDetails.class).createAlias("ProcedureHeader", "header").add(Restrictions.eq("header.Id", procedureHeaderId))
				.add(Restrictions.eq("FinalProcedureStatus", "y")).list();
		
		if(listA!=null && listB!=null && (listA.size() ==listB.size()))
		{
			ProcedureHeader ph = (ProcedureHeader) hbt.load(ProcedureHeader.class, procedureHeaderId);
			ph.setStatus("y");
			hbt.update(ph);
		}
		
		listA = cr.list();
		
		 try{
		if(procedureDetails != null)
		{
			procedureDetails.setStatus("y");
			procedureDetails.setProcedureDate(new Date());
			procedureDetails.setProcedureTime(time);
			procedureDetails.setNursingRemark(remarks);
			hbt.update(procedureDetails);
			hbt.refresh(procedureDetails);
			flag=true;
		}
		 }catch(Exception e)
		 {
			 System.out.println("Error in Save Nursing Care OPD="+e);
		 }
		
		 datamap.put("flag", flag);
		 return datamap;
	}

	@Override
	public Map<String, Object> getProcedureDetailsForPopUp(Box box) {
		List<ProcedureDetails> procedureDetails = new ArrayList<ProcedureDetails>();
		Map<String,Object> datamap = new HashMap<String,Object>();
		
		Session	 session=(Session)getSession();
		Transaction tx=session.beginTransaction();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		
		Criteria cr = null;
		int procedureDetailsId= box.getInt("procedureDetailsId");
		int frequencyId= box.getInt("frequencyId");
		int procedureHeaderId = box.getInt("procedureHeaderId");
		int nursingId= box.getInt("nursingId");
	/*	List<MasProcedureItemMapping> mappings=session.createCriteria(MasProcedureItemMapping.class)
				.add(Restrictions.eq("Procedure.Id", nursingId)).list();
		if(mappings!=null && mappings.size()>0){
			box.put("itemId", mappings.get(0).getItem().getId());
		}*/
		List<StoreItemBatchStock> batchList =(List<StoreItemBatchStock>) getItemBatch(box).get("batchList");
		
		cr= session.createCriteria(ProcedureDetails.class).createAlias("ProcedureHeader", "header").add(Restrictions.eq("header.Id", procedureHeaderId));
		cr.createAlias("NursingCare", "nr").add(Restrictions.eq("nr.Id", nursingId)).addOrder(Order.asc("Id"));
		procedureDetails = cr.list();	
		datamap.put("batchList", batchList);
		datamap.put("procedureDetails",procedureDetails);
		return datamap;		
	
	}

	
	@Override
	public Map<String, Object> checkDuplicateForOtherMedicine(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem>itemMasterList = new ArrayList<MasStoreItem>();
		int hospitalId = 0;
		if(dataMap.get("hospitalId") != null){
			hospitalId = (Integer)dataMap.get("hospitalId");
		}
		String nomenclature ="";
		if(dataMap.get("pvmsNo") != null){
			nomenclature = (String)dataMap.get("pvmsNo");
		}
		Session session = (Session)getSession();
		itemMasterList = session.createCriteria(MasStoreItem.class).add(Restrictions.eq("Nomenclature", nomenclature))
								.add(Restrictions.eq("Hospital.Id", hospitalId)).list();
		//int itemId = 0;
		//if(itemMasterList.size()>0){
			//MasStoreItem storeItem = itemMasterList.get(0);
			//itemId = storeItem.getId();
		//}
		
		
		
		map.put("itemMasterList", itemMasterList);
		return map;
	}

	@Override
	public Map<String, Object> autoCompleteForDiagnosis(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		//List<MasSystemDiagnosis> systemDiagnosisList = new ArrayList<MasSystemDiagnosis>();
		List<MasIcd> systemDiagnosisList = new ArrayList<MasIcd>();
		try {
			String diagnosisName = "%" + dataMap.get("autoHint") + "%";
		//	String diagnosisName = dataMap.get("autoHint") + "%";
    		systemDiagnosisList  = session.createCriteria(MasSystemDiagnosis.class)
			.add(Restrictions.like("SystemDiagnosisName", diagnosisName).ignoreCase()).list();
			/*systemDiagnosisList  = session.createCriteria(MasIcd.class)
			.add(Restrictions.like("IcdName", diagnosisName).ignoreCase()).list();*/
			
			map.put("systemDiagnosisList", systemDiagnosisList);
			} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@Override
	public Map<String, Object> getvisitDetails(Map<String, Object> mapfordata) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Visit> visitList = new ArrayList<Visit>();
		List<PatientPrescriptionHeader> patientPrescriptionHeaderList = new ArrayList<PatientPrescriptionHeader>();

	    Criteria crit = null;
	    String serviceNo = null;
        if(mapfordata.get("serviceNo") !=null){
        	serviceNo = (String)mapfordata.get("serviceNo");
        }
        Session session = (Session)getSession();
        patientPrescriptionHeaderList = session.createCriteria(PatientPrescriptionHeader.class).createAlias("Hin", "hin").add(Restrictions.eq("hin.ServiceNo", serviceNo)).add(Restrictions.eq("Status","p")).list();
	    visitList = session.createCriteria(Visit.class).createAlias("Hin", "hin").add(Restrictions.eq("hin.ServiceNo", serviceNo)).list();
        map.put("patientPrescriptionHeaderList", patientPrescriptionHeaderList);
        map.put("visitList", visitList);	
		return map;
	}

	@Override
	public Map<String, Object> showOPDInvestigationRecordsForOpd(
			String investigationTemplateId,int hinId) {
		Session session = (Session) getSession();
		//List<OpdTemplateInvestigation> investigationTemplateList = new ArrayList<OpdTemplateInvestigation>();
		List<MasChargeCode> masChargeCodeList = new ArrayList<MasChargeCode>();
		List<DgOrderdt> dgOderDtList = new ArrayList<DgOrderdt>();
		
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			// patientList=session.createQuery("select v from Visit as v where
			// v.VisitDate="+date ).list();
			int[] invArray = null;
			/*
			investigationTemplateList = session.createCriteria(
					OpdTemplateInvestigation.class).createAlias("Template",
					"template").add(
					Restrictions.in("template.Id", invArray)).list();
			*/
			//investigationTemplateList =getHibernateTemplate().find("select oti from jkt.hms.masters.business.OpdTemplateInvestigation oti join oti.Template as templet where templet.Id in("+investigationId+")");
			if(!investigationTemplateId.equals("")){
			masChargeCodeList =getHibernateTemplate().find("select cc from jkt.hms.masters.business.OpdTemplateInvestigation oti join oti.Template as templet join oti.ChargeCode as cc where templet.Id in("+investigationTemplateId+") order by oti.Id");
			
			Criteria crit =session.createCriteria(DgOrderdt.class)
					.createAlias("Orderhd", "hd")
					//.createAlias("hd.Visit", "Visit").
					.createAlias("hd.Hospital", "Hospital")
					.add(Restrictions.eq("hd.Hin.Id", hinId))
					.add(Restrictions.eq("hd.OrderDate",new Date()));
					
					
		dgOderDtList = crit.list();
	   	List<Integer> currentPrescriptionIdList = new ArrayList<Integer>();	
	   	
		for(DgOrderdt dt: dgOderDtList){
			currentPrescriptionIdList.add(dt.getChargeCode().getId());
		}
		
			Set<MasChargeCode> masChargeCodeSet = new HashSet<MasChargeCode>();
			masChargeCodeSet.addAll(masChargeCodeList);
			//System.out.println("masChargeCodeSet.size()-->"+masChargeCodeSet.size());
			map.put("masChargeCodeSet", masChargeCodeSet);
			map.put("currentPrescriptionIdList", currentPrescriptionIdList);
			
			
		 }
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		return map;
	}

	@Override
	public Map<String, Object> showSearchForWaitingPatientListJsp(
			Map<String, Object> mapForDS) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Map<String, Object> showRelatedMedicineNames(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session)getSession();
		String medicineName= box.getString("otherDrug");
		int hospitalId = box.getInt("hospitalId");
		List<MasStoreItem> pvmsList = new ArrayList<MasStoreItem>();
		List<MasStoreItem> nivList = new ArrayList<MasStoreItem>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		int itemTypeId =0;
		int sectionId = 0;
		try
		{
	
		
			itemTypeId = Integer.parseInt(HMSUtil.getProperties("adt.properties", "ItemTypeId"));
			//sectionId = Integer.parseInt(HMSUtil.getProperties("adt.properites", "SectionIdForDrugs"));
			sectionId =  Integer.parseInt(HMSUtil.getProperties("adt.properties", "SectionIdForDrugs"));
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
	/*	pvmsList = session.createCriteria(MasStoreItem.class)
				.createAlias("ItemType", "itemType").add(Restrictions.eq("itemType.Id", 1))
				.add(Restrictions.like("Nomenclature", "%"+medicineName+"%").ignoreCase())
				.list();*/
		String nipCode = HMSUtil.getProperties("adt.properties", "ItemClassificationCodeNIP");
		nivList = session.createCriteria(MasStoreItem.class)
				.createAlias("ItemType", "itemType").add(Restrictions.eq("itemType.Id", itemTypeId))
				.add(Restrictions.eq("Section.Id", sectionId))
				.add(Restrictions.like("Nomenclature", "%"+medicineName+"%").ignoreCase())
				 .createAlias("ItemClassification", "ic").add(Restrictions.eq("ic.Classification", nipCode))
				.add(Restrictions.eq("Hospital.Id", hospitalId))
				.list();
		//itemList.addAll(pvmsList);
	
		itemList.addAll(nivList);
		map.put("itemList", itemList);
		return map;
	}
	
	@SuppressWarnings("deprecation")
	public Map<String, Object> getConnectionForReportForHIS() {
		Map<String, Object> map = new HashMap<String, Object>();
   	    Connection conn=null;
		try {
			conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE", "his", "his");
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			System.out.println("Error in connecting="+e);
		}

		
		
		map.put("conn", conn);
		return map;
	}

	@Override
	public Map<String, Object> showPatientDirectPrescription(Map<String, Object> mapData) {
		List<MasFrequency> frequencies = new ArrayList<MasFrequency>();
		Session session = (Session)getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasEmployee> masEmployees = new ArrayList<MasEmployee>();
		List<Patient> patientList = new ArrayList<Patient>();
		List<MasZonal> masZonal = new ArrayList<MasZonal>();
		String employeeNo = "";
		if(mapData!=null && mapData.get("employeeNo")!=null){
			employeeNo = (String)mapData.get("employeeNo");
		}
		masEmployees = session.createCriteria(MasEmployee.class, "emp").add(Restrictions.eq("emp.ServiceNo", employeeNo)).list();
		frequencies = session.createCriteria(MasFrequency.class).list();
		masZonal = session.createCriteria(MasZonal.class).add(Restrictions.eq("Status", "y").ignoreCase()).list();
		
		if(masEmployees.size() >0){
		patientList = session.createCriteria(Patient.class).createAlias("Relation", "r")
				   .add(Restrictions.eq("Employee.Id",masEmployees.get(0).getId()))
				   .add(Restrictions.eq("r.RelationName", HMSUtil.getProperties("adt.properties","selfRelationName")).ignoreCase())
				.list();
		if(patientList.size()>0)
		map.put("hinId", patientList.get(0).getId());
		}
		if(employeeNo!="" && masEmployees.size()==0)
			map.put("msg", "Try Again!");
		map.put("frequencyList", frequencies);
		map.put("masEmployees", masEmployees);
		map.put("masZonal", masZonal);
		return map;
	}
	
	@Override
	public Map<String, Object> showPatientDirectPrescriptionResponse(Map<String, Object> mapData) {
		List<MasFrequency> frequencies = new ArrayList<MasFrequency>();
		Session session = (Session)getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<OpdTemplate> templateList = new ArrayList<OpdTemplate>();
		/*List<MasEmployee> masEmployees = new ArrayList<MasEmployee>();*/
		List<MasZonal> masZonal = new ArrayList<MasZonal>();
		List<Patient> patientList = new ArrayList<Patient>();
		List<MasEmployee> empList = new ArrayList<MasEmployee>();
		MasEmployee emp = new MasEmployee();
		Patient patient = new Patient();
		List<MasEmployeeDependent> depList = new ArrayList<MasEmployeeDependent>();
		List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();
		Box box = (Box) mapData.get("box");
		int relationId = 0;
		int hinId = 0;
		if(box.get("relationId")!= null)
		{
			relationId = box.getInt("relationId");
		}
		int hospitalId = 0;
		if(box.get("hospitalId")!= null)
		{
			hospitalId = box.getInt("hospitalId");
		}
		String serviceNoId = "";
		if(box.get("serviceNo")!= null)
		{
			serviceNoId = box.get("serviceNo");
		}
		
		int deptId = (Integer)mapData.get("deptId");
		int docId =(Integer)mapData.get("docId");
		
	
		
		String employeeNo = "";
		if(mapData!=null && mapData.get("employeeNo")!=null){
			employeeNo = (String)mapData.get("employeeNo");
		}
		/*masEmployees = session.createCriteria(MasEmployee.class, "emp").add(Restrictions.eq("emp.ServiceNo", employeeNo)).list();*/
		

		patientList = session.createCriteria(Patient.class)
				.createAlias("Relation", "rel")
				.add(Restrictions.eq("rel.Id", relationId))
				.add(Restrictions.eq("Hospital.Id", hospitalId))
				.add(Restrictions.eq("ServiceNo", serviceNoId)).list();
		
		
		

		templateList = session.createCriteria(OpdTemplate.class)
							.createAlias("Department", "dept").add(Restrictions.eq("dept.Id", deptId))
							.createAlias("Hospital", "hosp").add(Restrictions.eq("hosp.Id", hospitalId))
							.createAlias("Doctor", "doctor").add(Restrictions.eq("doctor.Id", docId))
							.add(Restrictions.eq("Status", "y")).list();
		
		if(patientList.size()==0)
		{
			
			 depList = session.createCriteria(MasEmployeeDependent.class)
					.createAlias("Relation", "rel")
					.createAlias("Employee", "emp")
					.add(Restrictions.eq("Status", "y").ignoreCase())
					.add(Restrictions.eq("Hospital.Id", hospitalId))
					.add(Restrictions.eq("rel.Id", relationId))
					.add(Restrictions.eq("emp.ServiceNo", serviceNoId)).list();
			 if(depList.size()>0)
			 {
				 
			 patient.setPFirstName(depList.get(0).getEmployeeDependentFName());
			 patient.setPMiddleName(depList.get(0).getEmployeeDependentMName());
			 patient.setPLastName(depList.get(0).getEmployeeDependentLName());
			 patient.setSex(depList.get(0).getGender());
			 patient.setDateOfBirth(depList.get(0).getDateOfBirth());
			 patient.setContactNo(depList.get(0).getContactNo());
			 patient.setAddress(depList.get(0).getAddress());
			 patient.setRelation(depList.get(0).getRelation());
			 patient.setEmployee(depList.get(0).getEmployee());
			 patient.setServiceNo(depList.get(0).getEmployee().getServiceNo());
			patient.setAge(HMSUtil.calculateAge(depList.get(0).getDateOfBirth()));
			map.put("employeeId", depList.get(0).getEmployee().getId());
			map.put("dependentId", depList.get(0).getId());
			 }
			 else
			 {
		
				 empList = session.createCriteria(MasEmployee.class).add(Restrictions.eq("ServiceNo", serviceNoId)).list();
				 if(empList.size()>0)
				 {
				 patient.setPFirstName(empList.get(0).getFirstName());
				 patient.setPMiddleName(empList.get(0).getMiddleName());
				 patient.setPLastName(empList.get(0).getLastName());
				 patient.setSex(empList.get(0).getGender());
				 patient.setDateOfBirth(empList.get(0).getDateOfBirth());
				 patient.setContactNo(empList.get(0).getTelNoEmergency());
				 patient.setAddress(empList.get(0).getLocalAddress());
				 patient.setEmployee(empList.get(0));
				 patient.setServiceNo(empList.get(0).getServiceNo());
				 //code start for getting self relation object 
				 
				    String selfRelationName="";
					MasRelation masR = new MasRelation();
					Properties propadt = new Properties();
					URL resourcePathadt = Thread.currentThread().getContextClassLoader()
					.getResource("adt.properties");

					try {
						propadt.load(resourcePathadt.openStream());	
						
						selfRelationName=propadt.getProperty("selfRelationName");
						List<MasRelation> mr = session.createCriteria(MasRelation.class)
								.add(Restrictions.eq("NewRelationName", selfRelationName).ignoreCase())
								.add(Restrictions.eq("Status", "y").ignoreCase()).list();
						masR = mr.get(0);
					} catch (Exception e) {
						e.printStackTrace();
					}
					//code end for getting self relation object 	
					
				 patient.setRelation(masR);
				 patient.setEmployee(empList.get(0));
				 patient.setAge(HMSUtil.calculateAge(empList.get(0).getDateOfBirth()));
			 }
				 map.put("employeeId", empList.get(0).getId());
			 }
			  patientList.add(patient);
		    }
		else
		{
			map.put("patientId", patientList.get(0).getId());
			map.put("employeeId", patientList.get(0).getEmployee().getId());
			
			
			int relationIDForSelf = Integer.parseInt(HMSUtil.getProperties("adt.properties", "relationIDForSelf"));
			if(relationIDForSelf!=relationId){
			 depList = session.createCriteria(MasEmployeeDependent.class)
						.createAlias("Relation", "rel")
						.createAlias("Employee", "emp")
						.add(Restrictions.eq("Status", "y").ignoreCase())
						.add(Restrictions.eq("Hospital.Id", hospitalId))
						.add(Restrictions.eq("rel.Id", relationId))
						.add(Restrictions.eq("emp.ServiceNo", serviceNoId)).list();
			 if(depList.size()>0)
				 map.put("dependentId", depList.get(0).getId());}
				 
		}
		   
			map.put("relationId", relationId);
			

			int totalVisit =0;
		if(patientList.size()>0 && patientList.get(0).getId()!=null)
		{
		 if(patientList.get(0).getVisits()!=null) //
		 {
			 totalVisit = patientList.get(0).getVisits().size();
		 }
		}
		
		
		
		
		frequencies = session.createCriteria(MasFrequency.class).list();
		masZonal = session.createCriteria(MasZonal.class).add(Restrictions.eq("Status", "y").ignoreCase()).list();
		
		/*if(masEmployees.size() >0)
		System.out.println("dd "+masEmployees.get(0).getId() +" service "+employeeNo);*/
		
		
		/*if(employeeNo!="" && masEmployees.size()==0)
			map.put("msg", "Try Again!");*/
		map.put("frequencyList", frequencies);
		map.put("patientList", patientList);
		   map.put("totalVisit", totalVisit);
		   map.put("templateList", templateList);
		/*map.put("masEmployees", masEmployees);*/
		map.put("masZonal", masZonal);
		return map;
	}

	@Override
	public Map<String, Object> saveDirectPrescription(Map<String, Object> dataMap) {
		Session session  = (Session)getSession();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Box box = (Box)dataMap.get("box");
		Integer hospitalId = (Integer)dataMap.get("hospitalId");
		Integer devisionId = (Integer)dataMap.get("divisionId");
		Integer userId = (Integer)dataMap.get("userId");
		Integer deptId = (Integer)dataMap.get("deptId");
		Integer empId = (Integer)dataMap.get("empId");
		int relationId = box.getInt("reltnId");
		Integer hdb = (Integer)box.getInt("hdb");
		int zonalId = (Integer)box.getInt("masZonal");
		int patientEmployeeId = (Integer)box.getInt("employeeId");
		int patientId = (Integer)box.getInt("patientId");
		int dependentId = (Integer)box.getInt("dependentId");
		Vector diagnosisId = (Vector)box.getVector("diagnosisId");
		Date currentDate = new Date();
		Users users = null;
		MasHospital masHospital = new MasHospital(hospitalId);
		MasDepartment masDepartment = new MasDepartment(deptId);
		String currentTime = (String)HMSUtil.getCurrentTimeWithoutSecond().get("currentTime");
		Patient patient = new Patient();
		MasEmployee masEmployee = null;
		String msg = "";
		String injectionStatus = "n";
		List<String> chargeCodeIdList = (List) dataMap.get("chargeCodeIdList");
		Visit visit = new Visit();
		int hinId = box.getInt("hinId");
		
		String selfName =null;
		int totalVisit = box.getInt("totalVisit");
		List<Visit> lastVistList =  null;
		int currentotalVisit=0;
				if(hinId!=0)
				{
					 
					lastVistList = session.createCriteria(Visit.class).add(Restrictions.eq("Hin.Id", hinId)).addOrder(Order.desc("Id")) .list();
					
					currentotalVisit = lastVistList.size();
				}
		 
		 
		if(currentotalVisit==totalVisit)
		{
			 selfName = HMSUtil.getValuesFromPropertiesFile("adt.properties", "selfRelationName");
			  /*List<Patient> patientList = (List<Patient>)session.createCriteria(Patient.class, "p").createAlias("Relation", "r").add(Restrictions.eq("p.Employee.Id", patientEmployeeId)).add(Restrictions.eq("r.Id", relationId)).list();*/
			  masEmployee = (MasEmployee)hbt.get(MasEmployee.class, patientEmployeeId);
			
		Transaction tx = session.beginTransaction();
		/*System.out.println("patientEmployeeId"+patientEmployeeId);
		System.out.println("relationId"+relationId);
		System.out.println("patientId"+patientId);
		System.out.println("dependentId"+dependentId);*/
		try{
			users = (Users)hbt.get(Users.class, userId);
			  if(patientId!=0)
			  {
				  patient = (Patient)session.get(Patient.class, patientId);
				  if(patient.getCurrentVisitNo()==null)
				  {
					  patient.setCurrentVisitNo(1);
				  }
				  else
				  {
					  patient.setCurrentVisitNo(patient.getCurrentVisitNo()+1);
				  }
				  
			  }
			  else if(dependentId!=0) // If Dependent Not Patient 
			  {
				  MasEmployeeDependent med = (MasEmployeeDependent)session.get(MasEmployeeDependent.class, dependentId);
					patient.setServiceNo(masEmployee.getServiceNo());
					/*List<MasRelation> masRelations = session.createCriteria(MasRelation.class, "mr").add(Restrictions.eq("mr.RelationName", HMSUtil.getProperties("adt.properties", "selfRelationName"))).list();*/
					List<MasPatientType> masPatientTypes = session.createCriteria(MasPatientType.class, "pt").add(Restrictions.eq("pt.PatientTypeName", HMSUtil.getProperties("adt.properties", "patientTypeNameForHAL"))).list();
					if(masPatientTypes.size()>0){
						/*System.out.println("masPatientTypes.get(0).getPatientTypeCode()"+masPatientTypes.get(0).getPatientTypeCode());
						System.out.println("masEmployee.getServiceNo())"+masEmployee.getServiceNo());
						System.out.println("med.getRelation().getNewRelationCode()"+med.getRelation().getNewRelationCode());*/
						String hidNo =masPatientTypes.get(0).getPatientTypeCode().concat(masEmployee.getServiceNo()).concat(med.getRelation().getNewRelationCode()); 
						List<Patient> patientList =session.createCriteria(Patient.class).add(Restrictions.eq("HinNo", hidNo)).list();
						int size= patientList.size();
						if(size==0)
						patient.setHinNo(hidNo);
						else
						{
							dataMap.put("msg", "Patient Prescription has already been submitted.If Do you want to print then click on Print Prescription Button");
							if(patientList.size()>0 && patientList.get(0).getVisits()!=null)
							{		
								dataMap.put("visitId", ((Visit)(patientList.get(0).getVisits().toArray()[0])).getId());
								dataMap.put("hinNo", patientList.get(0).getHinNo());
							}
							return dataMap;
						}
						patient.setRelation(med.getRelation());
					}
					patient.setPFirstName(med.getEmployeeDependentFName()!=null?med.getEmployeeDependentFName():"");
					patient.setPMiddleName(med.getEmployeeDependentMName()!=null?med.getEmployeeDependentMName():"");
					patient.setPLastName(med.getEmployeeDependentLName()!=null?med.getEmployeeDependentLName():"");
					patient.setSFirstName(masEmployee.getFirstName()!=null?masEmployee.getFirstName():"");
					patient.setSMiddleName(masEmployee.getMiddleName()!=null?masEmployee.getMiddleName():"");
					patient.setSLastName(masEmployee.getLastName()!=null?masEmployee.getLastName():"");
					patient.setDateOfBirth(med.getDateOfBirth());
					patient.setCurrentVisitNo(1);
					patient.setAddEditBy(users);
					patient.setAddEditDate(currentDate);
					patient.setAddEditTime((String)HMSUtil.getCurrentTimeWithoutSecond().get("currentTime"));
					patient.setStatus("y");
					patient.setPatientStatus("Out Patient");
					patient.setRegDate(currentDate);
					patient.setRegTime((String)HMSUtil.getCurrentTimeWithoutSecond().get("currentTime"));
					patient.setAge(HMSUtil.calculateAge(med.getDateOfBirth()));
					patient.setSrDob(masEmployee.getDateOfBirth());
					patient.setSex(med.getGender());
					patient.setHospital(new MasHospital(hospitalId));
					if(masPatientTypes.size()>0)
						patient.setPatientType(masPatientTypes.get(0));
					patient.setRank(masEmployee.getRank());
					patient.setSrSex(masEmployee.getGender());
					patient.setBillable("n");
					patient.setBloodGroup(med.getBloodGroup());
					patient.setEmployee(masEmployee);
					hbt.save(patient);
					
					
			  }
			  else{// If Employee Not Patient 
								
				patient.setServiceNo(masEmployee.getServiceNo());
				List<MasRelation> masRelations = session.createCriteria(MasRelation.class, "mr").add(Restrictions.eq("mr.RelationName", HMSUtil.getProperties("adt.properties", "selfRelationName"))).list();
				List<MasPatientType> masPatientTypes = session.createCriteria(MasPatientType.class, "pt").add(Restrictions.eq("pt.PatientTypeName", HMSUtil.getProperties("adt.properties", "patientTypeNameForHAL"))).list();
				if(masRelations.size()>0 && masPatientTypes.size()>0){
					String hidNo =masPatientTypes.get(0).getPatientTypeCode().concat(masEmployee.getServiceNo()).concat(masRelations.get(0).getNewRelationCode());
					List<Patient> patientList =session.createCriteria(Patient.class).add(Restrictions.eq("HinNo", hidNo)).list();
					int size= patientList.size();
					
					if(size==0)
					patient.setHinNo(hidNo);
					else
					{
					/*	dataMap.put("msg", "alreadyprecribed");
						lastVistList = session.createCriteria(Visit.class).add(Restrictions.eq("Hin.ServiceNo", masEmployee.getServiceNo())).addOrder(Order.desc("Id")) .list();
						if(lastVistList.size()>0)
						{visit = lastVistList.get(0);
							dataMap.put("visitId", visit.getId());
							dataMap.put("hinNo", visit.getHin().getHinNo());
						}
						return dataMap;*/
						

						dataMap.put("msg", "Patient Prescription has already been submitted.If Do you want to print then click on Print Prescription Button");
						if(patientList.size()>0 && patientList.get(0).getVisits()!=null)
						{		
							dataMap.put("visitId", ((Visit)(patientList.get(0).getVisits().toArray()[0])).getId());
							dataMap.put("hinNo", patientList.get(0).getHinNo());
						}
						return dataMap;
						
						
					}
					//patient.setHinNo(masPatientTypes.get(0).getPatientTypeCode().concat(masEmployee.getServiceNo()).concat(masRelations.get(0).getNewRelationCode()));
					patient.setRelation(masRelations.get(0));
				}
				patient.setPFirstName(masEmployee.getFirstName()!=null?masEmployee.getFirstName():"");
				patient.setPMiddleName(masEmployee.getMiddleName()!=null?masEmployee.getMiddleName():"");
				patient.setPLastName(masEmployee.getLastName()!=null?masEmployee.getLastName():"");
				patient.setSFirstName(masEmployee.getFirstName()!=null?masEmployee.getFirstName():"");
				patient.setSMiddleName(masEmployee.getMiddleName()!=null?masEmployee.getMiddleName():"");
				patient.setSLastName(masEmployee.getLastName()!=null?masEmployee.getLastName():"");
				patient.setDateOfBirth(masEmployee.getDateOfBirth());
				patient.setCurrentVisitNo(1);
				patient.setAddEditBy(users);
				patient.setAddEditDate(currentDate);
				patient.setAddEditTime((String)HMSUtil.getCurrentTimeWithoutSecond().get("currentTime"));
				patient.setStatus("y");
				patient.setPatientStatus("Out Patient");
				patient.setRegDate(currentDate);
				patient.setRegTime((String)HMSUtil.getCurrentTimeWithoutSecond().get("currentTime"));
				patient.setAge(HMSUtil.calculateAge(masEmployee.getDateOfBirth()));
				patient.setSrDob(masEmployee.getDateOfBirth());
				patient.setSex(masEmployee.getGender());
				patient.setHospital(new MasHospital(hospitalId));
				if(masPatientTypes.size()>0)
					patient.setPatientType(masPatientTypes.get(0));
				patient.setRank(masEmployee.getRank());
				patient.setSrSex(masEmployee.getGender());
				patient.setBillable("n");
				patient.setBloodGroup(masEmployee.getBloodGroup());
				patient.setEmployee(masEmployee);
				hbt.save(patient);
				
				
			}
			// Visit Start
			  hinId = patient.getId();
			visit.setHin(patient);
			visit.setHospital(masHospital);
			visit.setStatus("y");
			visit.setAddEditBy(users);
			visit.setAddEditDate(currentDate);
			visit.setAddEditTime(currentTime);
			visit.setVisitNo(patient.getCurrentVisitNo()+1);
			visit.setVisitDate(currentDate);
			visit.setVisitTime(currentTime);
			visit.setAppointmentType("D");
			visit.setVisitStatus("F");
			visit.setReportingFor("OPD");
			visit.setPriority(3);
			MasSession massession =new MasSession();
			massession.setId(1);
			visit.setSession(massession);
			visit.setIntDoctor(users.getEmployee());
			visit.setDoctor(users.getEmployee());
			visit.setDepartment(masDepartment);
			//visit.setDivision(new MasDivision(devisionId));
			visit.setDivision(masEmployee.getDivision());
			visit.setWorkingDiagnosis(box.getString("initialDiagnosis"));
			hbt.save(visit);
			// Patient Update
			patient.setCurrentVisitNo(patient.getCurrentVisitNo());
			if(box.get("allergies")!= null){
				patient.setDrugAllergies(box.getString("allergies"));
			}
			hbt.update(patient);
			// Visit End
			// OPD Prescription Start
			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();
			opdPatientDetails.setConsultationDate(currentDate);
			opdPatientDetails.setConsultationTime(currentTime);
			opdPatientDetails.setOpdDate(currentDate);
			opdPatientDetails.setOpdTime(currentTime);
			opdPatientDetails.setPhyStatus("c");
			opdPatientDetails.setMhRun("n");
			opdPatientDetails.setHospital(masHospital);
			opdPatientDetails.setVisit(visit);
			opdPatientDetails.setEmployee(users.getEmployee());
			opdPatientDetails.setInitialDiagnosis(box.getString("initialDiagnosis"));
			opdPatientDetails.setDepartment(masDepartment);   
			hbt.save(opdPatientDetails);
			OpdPatientHistory opdPatientHistory = new OpdPatientHistory();
			opdPatientHistory.setVisitInpatientId(patient.getId());
			opdPatientHistory.setLastChgBy(users.getUserName());
			opdPatientHistory.setLastChgDate(currentDate);
			opdPatientHistory.setLastChgTime(currentTime);
			opdPatientHistory.setStatus("y");
			opdPatientHistory.setIpOpPacStatus("OP");
			opdPatientHistory.setPresentComplain(box.getString("presentComplain"));
			opdPatientHistory.setPresentAdvice("Review SOS");
			opdPatientHistory.setHospital(masHospital);
			opdPatientHistory.setOpdPatientDetails(opdPatientDetails);
			opdPatientHistory.setDepartment(masDepartment);
			opdPatientHistory.setHin(patient);
			hbt.save(opdPatientHistory);
			String icd_string =null;
			if(diagnosisId.size()>0){
				for(Object diagnosis1:diagnosisId){
				List<MasIcd> icds =(List<MasIcd>)session.createCriteria(MasIcd.class, "m").add(Restrictions.eq("m.IcdCode", diagnosis1)).add(Restrictions.eq("m.Status", "y")).list();
				//Integer diagnosis =Integer.parseInt((String)diagnosis1);
				MasIcd masIcd =  icds.get(0);
				DischargeIcdCode dischargeIcdCode = new DischargeIcdCode();
				dischargeIcdCode.setIcd(masIcd);
				dischargeIcdCode.setAddEditDate(currentDate);
				dischargeIcdCode.setAddEditTime(currentTime);
				dischargeIcdCode.setStatus("y");
				dischargeIcdCode.setDiagnosisStatus("p");
				dischargeIcdCode.setVisit(visit);
				dischargeIcdCode.setOpdPatientDetails(opdPatientDetails);
				hbt.save(dischargeIcdCode);
				icd_string = icd_string!=null?icd_string+","+masIcd.getIcdName():masIcd.getIcdName()+"";
				}
				if(icd_string!=null)
				{
					opdPatientDetails.setIcd(icd_string);
					hbt.update(opdPatientDetails);
				}
			}
			// PatientPrescriptionHeader Start
			List<Integer> classificationList = (List<Integer>) dataMap.get("classificationList");
			PatientPrescriptionHeader patientPrescriptionHeader = null;
			String nipStatus=null;
			   int ItemClassificationIdForNIP = 0;
	
			for(int i=1;i<=hdb;i++){
				int item = box.getInt("itemId"+i);
				
				if(item!=0){
			ItemClassificationIdForNIP = Integer.parseInt(HMSUtil.getValuesFromPropertiesFile("adt.properties", "ItemClassificationId"));
			patientPrescriptionHeader = new PatientPrescriptionHeader();
			patientPrescriptionHeader.setPrescriptionDate(currentDate);
			patientPrescriptionHeader.setPrescriptionTime(currentTime);
			int PrescriptionNo=0;
			dataMap.put("tableObjectName", "PatientPrescriptionHeader");			
			dataMap.put("isHospitalWise", "y");
			dataMap.put("hospitalId", hospitalId);
			dataMap.put("isYearly", "n");			
			dataMap.put("isMonthly", "n");
			dataMap.put("isPrefix", "n");
			/*mapForDS.put("transactionPrefixProperty", "transactionPrefixForIPD");*/
			PrescriptionNo = Integer.parseInt(HMSUtil.generateTransactionSequence(dataMap, session, hbt));
			//patientPrescriptionHeader.setPrescriptionNo(getTransactionSequenceNoForPrescriptionNo(dataMap));
			 patientPrescriptionHeader.setPrescriptionNo(PrescriptionNo);
			//patientPrescriptionHeader.setInjectionStatus(injectionStatus);
			patientPrescriptionHeader.setEmp(users.getEmployee());
			patientPrescriptionHeader.setHospital(masHospital);
			patientPrescriptionHeader.setDepartment(masDepartment);
			patientPrescriptionHeader.setVisit(visit);
			patientPrescriptionHeader.setHin(patient);
			patientPrescriptionHeader.setStatus("p");
			patientPrescriptionHeader.setFacStatus("y");
			patientPrescriptionHeader.setOtherTreatment(box.getString("otherTreatment"));
			patientPrescriptionHeader.setOpdPatientDetails(opdPatientDetails);
			patientPrescriptionHeader.setDivision(masEmployee.getDivision());
			if(zonalId !=0)
			{
				MasZonal zonalobj= new MasZonal();
				zonalobj.setId(zonalId);
				patientPrescriptionHeader.setZonal(zonalobj);
			}
			patientPrescriptionHeader.setNipStatus("n");
			
			for(int iCId :classificationList)
			{
				if(iCId==ItemClassificationIdForNIP)
				{
					patientPrescriptionHeader.setNipStatus("y");
					nipStatus ="y";
					break;
				}
			}
			
			hbt.save(patientPrescriptionHeader);
			break;
				}
			}
			List<PatientPrescriptionDetails> previousApprovedNipDetails = null;
			for(int i=1;i<=hdb;i++){
				//String item = (String)box.getString("nomenclature"+i);
				int item = box.getInt("itemId"+i);
				
				if(item!=0){
					//int itemId = Integer.parseInt((String)item.substring(item.indexOf('(')+1, item.indexOf(')')));
					if(nipStatus!=null && nipStatus.equalsIgnoreCase("y") && classificationList.get(i-1)==2){
						
						Calendar cal = GregorianCalendar.getInstance();
						cal.add( Calendar.DAY_OF_YEAR, - Integer.parseInt(HMSUtil.getProperties("adt.properties", "ValidatedDaysForNipAprroval")));
						Date nipValidatedDate = cal.getTime();
						
						previousApprovedNipDetails = session.createCriteria(PatientPrescriptionDetails.class).createAlias("Prescription", "hd")
								.add(Restrictions.eq("hd.Hin.Id", hinId)).add(Restrictions.eq("Item.Id", item))
								.add(Restrictions.eq("hd.NipStatus","A").ignoreCase()).add(Restrictions.ge("hd.PrescriptionDate",nipValidatedDate))
								.list();
						if(previousApprovedNipDetails.size()>0)
						{
							nipStatus ="A";
							patientPrescriptionHeader.setNipStatus("A");
							patientPrescriptionHeader.setNipApprovedBy(previousApprovedNipDetails.get(0).getPrescription().getNipApprovedBy());
							hbt.saveOrUpdate(patientPrescriptionHeader);
						}
					 	
						}
					
					int itemId  = box.getInt("itemId"+i);
					int dosage = box.getInt("dosage"+i);
					int frequency = box.getInt("frequency"+i);
					int noOfDays = box.getInt("noOfDays"+i);
					String remarks = box.getString("remarks"+i);
					String route = box.getString("route"+i);
					int total = box.getInt("total"+i);
					String otherMedicine = box.getString("otherMedicine"+i);
					
					
					
					MasFrequency masFrequency = (MasFrequency)hbt.get(MasFrequency.class, frequency);
					MasStoreItem masStoreItem = (MasStoreItem)hbt.get(MasStoreItem.class, itemId);
					if(masStoreItem.getItemClass().getItemClassCode().equals("CL3")){injectionStatus = "y";}
					PatientPrescriptionDetails patientPrescriptionDetails = new PatientPrescriptionDetails();
					patientPrescriptionDetails.setDosage(dosage+"");
					patientPrescriptionDetails.setNoOfDays(noOfDays);
					patientPrescriptionDetails.setTotal(total);
					patientPrescriptionDetails.setDetailStatus("a");
					patientPrescriptionDetails.setRoute(route);
					patientPrescriptionDetails.setGivenQty(noOfDays);
					patientPrescriptionDetails.setInjectionStatus(injectionStatus);
					patientPrescriptionDetails.setFrequency(masFrequency);
					patientPrescriptionDetails.setItem(masStoreItem);
					patientPrescriptionDetails.setRemarks(remarks);
					patientPrescriptionDetails.setPrescription(patientPrescriptionHeader);
					hbt.save(patientPrescriptionDetails);
				}
			}
			if(patientPrescriptionHeader!=null){
			patientPrescriptionHeader.setInjectionStatus(injectionStatus);
			hbt.update(patientPrescriptionHeader);}
			// PatientPrescriptionHeader End
			// PatientPrescriptionDetails Start
			// PatientPrescriptionDetails End
			// OPD Prescription End
			String dgOrderBillingStatus =null;
			
			if(chargeCodeIdList.size()>0)
			{
			
			
				String patientTypeNameForHAL = null;
				String patientTypeNameForOther = null;
				try {
					 patientTypeNameForHAL = HMSUtil.getValuesFromPropertiesFile ("adt.properties","patientTypeNameForHAL");
					 patientTypeNameForOther = HMSUtil.getValuesFromPropertiesFile("adt.properties","patientTypeNameForOther");
				} catch (Exception e) {
					e.printStackTrace();
				}
				if(patient.getPatientType().getPatientTypeName().equals(patientTypeNameForHAL))
				{
					dgOrderBillingStatus ="y";
				}
				else if(patient.getPatientType().getPatientTypeName().equals(patientTypeNameForOther))
				{
					if(patient.getBillable().equals("y"))
					    dgOrderBillingStatus ="n";
					else if(patient.getBillable().equals("n"))
						dgOrderBillingStatus ="y";
				}
			
			 String orderNo = null;
			
				dataMap.put("tableObjectName", "DgOrderhd");			
				dataMap.put("isHospitalWise", "y");
				dataMap.put("hospitalId", hospitalId);
				dataMap.put("isYearly", "n");			
				dataMap.put("isMonthly", "n");
				dataMap.put("isPrefix", "n");
				/*mapForDS.put("transactionPrefixProperty", "transactionPrefixForIPD");*/
				 orderNo = HMSUtil.generateTransactionSequence(dataMap, session, hbt);
				 
				 
				 

		    DgOrderhd dgOrderhd = new DgOrderhd();
			dgOrderhd.setOrderDate(currentDate);
			dgOrderhd.setOrderTime(currentTime);
			masHospital.setId(hospitalId);
			dgOrderhd.setHospital(masHospital);
			patient.setId(hinId);
			dgOrderhd.setHin(patient);
			//masDepartment.setId(departmentId);
			dgOrderhd.setDepartment(masDepartment);
			//if (empId != 0) {
				//masEmployee2.setId(empId);
				dgOrderhd.setPrescribedBy(users.getEmployee());
			//}
		
			dgOrderhd.setBillingStatus(dgOrderBillingStatus);
			dgOrderhd.setPatientType("OP");
			dgOrderhd.setTestType("Regular");
			dgOrderhd.setCreatedby(users.getLoginName());
			dgOrderhd.setCreatedon(currentDate);

			//orderSeqNo = generateOrderNumber();
			dgOrderhd.setOrderNo(orderNo);
				dgOrderhd.setVisit(visit);
			
			//dgOrderhd.setClinicalNote(clinicalNotes1);
			dgOrderhd.setOrderStatus("P");
			dgOrderhd.setLabOrderStatus("P");
			
			dgOrderhd.setLastChgBy(users);
			dgOrderhd.setLastChgDate(currentDate);
			dgOrderhd.setLastChgTime(currentTime);
			//dgOrderhd.setInvestigationRequestionNo(patientInvestigationHeader);
			//dgOrderhd.setOtherInvestigation((String)mapForDS.get("otherInvestigation"));
			hbt.save(dgOrderhd);
			MasChargeCode masChargeCode = new MasChargeCode();
			for (int i = 0; i < chargeCodeIdList.size(); i++) {
				DgOrderdt dgOrderdt = new DgOrderdt();
				dgOrderdt.setOrderhd(dgOrderhd);
				masChargeCode.setId(Integer.parseInt(chargeCodeIdList.get(i)));
				dgOrderdt.setChargeCode(masChargeCode);
				//dgOrderdt.setOrderQty(quantityList.get(i));
				dgOrderdt.setBillingStatus(dgOrderBillingStatus);
				dgOrderdt.setCreatedby(users.getLoginName());
				dgOrderdt.setCreatedon(currentDate);
				dgOrderdt.setLastChgBy(users);
				dgOrderdt.setLastChgDate(currentDate);
				dgOrderdt.setLastChgTime(currentTime);
				dgOrderdt.setMsgSent("n");
				// method written for taking out the values of mascharge
				// code and subcharge
				Map masChargeMap = getMasChargeCodeFromChargeId(Integer
						.parseInt(chargeCodeIdList.get(i)));
				MasChargeCode masChargeCodeObj = (MasChargeCode) masChargeMap
				.get("masChargeCode");
				int mainChargeId = masChargeCodeObj.getMainChargecode()
				.getId();
				int subChargeId = masChargeCodeObj.getSubChargecode()
				.getId();
				if (masChargeCodeObj.getMainChargecode()
						.getMainChargecodeCode().equalsIgnoreCase("Lab")) {
					dgOrderdt.setOrderStatus("P");
				} else {
					dgOrderdt.setOrderStatus("P");
				}
				MasMainChargecode masMainChargecode = new MasMainChargecode();
				masMainChargecode.setId(mainChargeId);
				dgOrderdt.setMainChargecode(masMainChargecode);
				MasSubChargecode masSubChargecode = new MasSubChargecode();
				masSubChargecode.setId(subChargeId);
				dgOrderdt.setSubChargeid(masSubChargecode);
				// Added By Vinay 
				List<DgMasInvestigation> invList = new ArrayList<DgMasInvestigation>();
				invList = session.createCriteria(DgMasInvestigation.class).add(Restrictions.eq("ChargeCode.Id", Integer.parseInt(chargeCodeIdList.get(i)))).list();
				int invId=0;
				for(DgMasInvestigation list: invList)
				{
					invId = list.getId();
				}
				dgOrderdt.setInvestigation(new DgMasInvestigation(invId));
				//dgOrderdt.setInvestigationToMH(referToMhList.get(i));
				dgOrderdt.setInvestigationToMh("n");
				//dgOrderdt.setReferToMh(referToMhList.get(i));
				dgOrderdt.setReferToMh("n");
				hbt.saveOrUpdate(dgOrderdt);
			 }

			}
			
			msg = "Patient Prescription submit Successfully.If Do you want to print then click on Print Prescription Button ";
			tx.commit();
		}catch(Exception e){
			msg = "Try Again!";
			e.printStackTrace();
			tx.rollback();
		}
		
		}
		else
		{
			if(lastVistList!=null && lastVistList.size()>0)
			visit = lastVistList.get(0);
			msg = "Patient Prescription has already been submitted.If Do you want to print then click on Print Prescription Button";
		}
		dataMap.put("msg", msg);
		dataMap.put("visitId", visit.getId());
		dataMap.put("hinNo", visit.getHin().getHinNo());
		//dataMap.put("msg", msg);
		
		return dataMap;
	}	

	
	public int getPatient(String hinNo) {
		Session session = (Session) getSession();
		int hinId = 0;
		List<Patient> list = session.createCriteria(Patient.class).add(Restrictions.eq("Status", "y")).add(	Restrictions.eq("HinNo", hinNo)).list();
		if (list != null && list.size() > 0) {
			Patient obj = (Patient) list.get(0);
			hinId = obj.getId();
		}
		return hinId;
	}
	
	@Override
	public List<Visit> getPresVisitNoForOPD(String hinNo) {
		Session session = (Session) getSession();
		List<Visit> visitList = new ArrayList<Visit>();
		//List<PatientPrescriptionHeader> patientPrescriptionHeaderList = new ArrayList<PatientPrescriptionHeader>();
		@SuppressWarnings("unused")
		Visit visit = new Visit();
		//visitList = session.createCriteria(Visit.class).createAlias("Hin",
				//"p").add(Restrictions.eq("p.HinNo", hinNo)).addOrder(Order.desc("VisitNo")).list();

	    visitList = session.createCriteria(Visit.class).
        				createAlias("Hin", "hin").add(Restrictions.eq("hin.HinNo", hinNo)).add(Restrictions.eq("VisitStatus", "C").ignoreCase())
        						.addOrder(Order.desc("VisitNo")).list();
		return visitList;
	}

	@Override
	public Map<String, Object> getVisitForPatient(String hinNo,int visitId) {
		Session session = (Session) getSession();
		Map<String, Object> dataMap = new HashMap<String, Object>();
	int hinId = 0;
	int deptId = 0;
	List<Patient> list = session.createCriteria(Patient.class).add(Restrictions.eq("Status", "y")).add(	Restrictions.eq("HinNo", hinNo)).list();
	if (list != null && list.size() > 0) {
		Patient obj = (Patient) list.get(0);
		hinId = obj.getId();
	}
	List<OpdPatientDetails> opdPatientDetailsList = session.createCriteria(OpdPatientDetails.class)
			.createAlias("Visit", "Visit")
			.add(Restrictions.eq("Visit.Id", visitId)).list();
	if (opdPatientDetailsList != null && opdPatientDetailsList.size() > 0) {
		OpdPatientDetails obj2 = (OpdPatientDetails) opdPatientDetailsList.get(0);
		deptId = obj2.getDepartment().getId();
		
	}
	dataMap.put("hinId", hinId);
	dataMap.put("deptId", deptId);
	return dataMap;
	}
	
	
	public Map<String, Object> getRecallOpdPatientDetails(Map<String, Object> mapForDS) {
		
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List<Visit> patientLastVisitList = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<OpdPatientDetails> opdDetailListForFollowUp = new ArrayList<OpdPatientDetails>();
		List<OpdPatientHistory> opdHistoryDetailsListForFollowUp = new ArrayList<OpdPatientHistory>();
		List<DgOrderhd>patientInvestigationHeaderListForFollowUp = new ArrayList<DgOrderhd>();
		List<OpdPatientDetails> opdPDetailsListForEyeDeptFollowUp = null;
		List<PatientPrescriptionHeader> patientPrescriptionHeaderList = new ArrayList<PatientPrescriptionHeader>();
		List<PatientPrescriptionHeader> issuedPatientPrescriptionHeaderList = new ArrayList<PatientPrescriptionHeader>();
		List<DischargeIcdCode> dischargeIcdCodeList = new ArrayList<DischargeIcdCode>();
		List<Visit> currentDayVisit = new ArrayList<Visit>();
		List<OpdPatientDetails> admittedVisit = new ArrayList<OpdPatientDetails>();
		List<Integer> visitIdList = new ArrayList<Integer>();
		List<ProcedureDetails>procedureDetails= new ArrayList<ProcedureDetails>();
		List<InjAppointmentDetails>injAppDetails= new ArrayList<InjAppointmentDetails>();
		List<OpdSurgeryDetail> OpdSurgeryDetailList= new ArrayList<OpdSurgeryDetail>();
		List<MasItemClass> masItemClassList = new ArrayList<MasItemClass>();
		List<MasItemClass> masItemClassList1 = new ArrayList<MasItemClass>();
		List<MasEmployeeDependent> med = null; 
		Date currentDate = new Date();
		//boolean patientAdmitted = false;
		int visitId=0;
		
		List<OpdPatientDetails> opdPatientDetailsList = new ArrayList<OpdPatientDetails>();
		List<DentalTreatmentHeader> dentalProcedureList = new ArrayList<DentalTreatmentHeader>();
		OpdPatientDetails opdPatientDetails =null;
		OpdPatientDetails opdReferralPatientDetails =null;
		List<TherapyDetails> therapyList =null;
		List<OpdPatientDetails> curentVisitOpdDetailList =null; 
		List<ObgDetails> obgDetailsList = null; 
		boolean readableOPDScreen =false;
		List<MasBloodGroup> bloodGroupList = null;
		try {
			
			visitId = Integer.parseInt(mapForDS.get("visitId").toString());
	/*		opdPatientDetailsList = session.createCriteria(OpdPatientDetails.class)
					.createAlias("ReferralVisit", "ReferralVisit")
					.add(Restrictions.eq("ReferralVisit.Id", visitId)).list();*/
		
			
			opdPatientDetailsList = session.createCriteria(OpdPatientDetails.class)
					.createAlias("Visit", "v")
					.add(Restrictions.eq("v.Id", visitId)).list();
			//"visit",CriteriaSpecification.LEFT_JOIN)
			
			if(opdPatientDetailsList.size()>0)
			{
				opdPatientDetails = opdPatientDetailsList.get(0);
				mapForDS.put("hinId",opdPatientDetailsList.get(0).getVisit().getHin().getId());
				map = getOPDDetails(mapForDS);
				if(opdPatientDetailsList.get(0).getAdmissionAdvised()!=null && opdPatientDetailsList.get(0).getAdmissionAdvised().equals("y")) 
					readableOPDScreen = true;
				else if(opdPatientDetailsList.get(0).getReferredStatus()!=null && (opdPatientDetailsList.get(0).getReferredStatus().equalsIgnoreCase("y") || opdPatientDetailsList.get(0).getReferredStatus().equalsIgnoreCase("r")))
					readableOPDScreen  = true;
			}
			
			opdPatientDetailsList = session.createCriteria(OpdPatientDetails.class)
					.createAlias("ReferralVisit", "ReferralVisit")
					.add(Restrictions.eq("ReferralVisit.Id", visitId)).list();
			
			if(opdPatientDetailsList.size()>0)
			{
				opdReferralPatientDetails = opdPatientDetailsList.get(0);
			}
        //end			
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();
			
			//checking patient is admitted
			int hinId =0;
			if(patientDataList.size() > 0)
			  hinId = patientDataList.get(0).getHin().getId();
			
			currentDayVisit = session.createCriteria(Visit.class)
					.add(Restrictions.eq("VisitDate",currentDate))
								.add(Restrictions.ne("Id", visitId))
								.add(Restrictions.eq("Hin.Id", hinId)).list();
			
			
				if(currentDayVisit.size() > 0)
				{
					for(Visit visit : currentDayVisit)
					{
						visitIdList.add(visit.getId());
					}
					
					admittedVisit = session.createCriteria(OpdPatientDetails.class)
							  		.add(Restrictions.eq("AdmissionAdvised", "y"))
							        .add(Restrictions.in("Visit.Id", visitIdList))
							        .list();
					
					
				/*	if(admittedVisit.size() > 0)
					{
						patientAdmitted = true;
					}*/
				}
	
		/*if(patientDataList.size() > 0 && patientDataList.get(0).getReportingFor().equals("FollowUp")){*/
				if(patientDataList.size() > 0){
			
			
			 int employeeId = 0;
								  if(patientDataList.get(0).getHin()!=null && !patientDataList.get(0).getHin().getRelation().getNewRelationName().equalsIgnoreCase("self"))
								  {
									  employeeId = patientDataList.get(0).getHin().getEmployee().getId();
									  med = session.createCriteria(MasEmployeeDependent.class)
											  .add(Restrictions.eq("Employee.Id",employeeId ))
											  .add(Restrictions.eq("Status","y" ).ignoreCase())
											  .list();
								  }

								  masItemClassList= session.createCriteria(MasItemClass.class).
											add(Restrictions.eq("Status", "y").ignoreCase())
											.add(Restrictions.eq("Section.Id", 18))
											 .addOrder(Order.asc("ItemClassName")) .list(); 
			
								  String []ItemClassIdForTopInDropDown =  HMSUtil.getProperties("adt.properties","ItemClassIdForTopInDropDown").trim().split(",");
									for(MasItemClass ms:masItemClassList){
									  for(int i=0;i <ItemClassIdForTopInDropDown.length;i++)
									  {
										  if(Integer.parseInt(ItemClassIdForTopInDropDown[i])==ms.getId())
											  masItemClassList1.add(ms);
									  }
									  if(masItemClassList1.size()==ItemClassIdForTopInDropDown.length)
										  break;
									}
									
									masItemClassList.removeAll(masItemClassList1);
									masItemClassList.addAll(0, masItemClassList1);	
								  
				 String department =  patientDataList.get(0).getFollowUpDepartment();
				// if(department != null){
				 patientLastVisitList = session.createCriteria(Visit.class).add(Restrictions.eq("Hin.Id", hinId))
				 						//	.add(Restrictions.or(Restrictions.eq("ReportingFor",department), Restrictions.eq("FollowUpDepartment", department)))
						 //.add(Restrictions.eq("VisitDate", new Date()))
							//.add(Restrictions.eq("VisitStatus", "w"))
							/*.add(Restrictions.eq("Doctor.Id", empId))
							.add(Restrictions.eq("Department.Id", deptId))
							.createAlias("Hospital", "h").add(Restrictions.eq("h.Id", hospitalId))*/
				 							.add(Restrictions.eq("VisitStatus", "C")).add(Restrictions.eq("Id",visitId)).setMaxResults(1).addOrder(Order.desc("Id")).list();
				 if(patientLastVisitList.size()>0){
				 int lastVisitId = patientLastVisitList.get(0).getId();
			
				opdDetailListForFollowUp = session.createCriteria(OpdPatientDetails.class).createAlias("Visit", "visit")
					.add(Restrictions.eq("visit.Id", lastVisitId)).list();
				
				curentVisitOpdDetailList = session.createCriteria(OpdPatientDetails.class).createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", lastVisitId)).list();
				
				if(curentVisitOpdDetailList.size() >0){
				obgDetailsList = session.createCriteria(ObgDetails.class).createAlias("OpdPatientDetails", "opd")
						.add(Restrictions.eq("opd.id", curentVisitOpdDetailList.get(0).getId())).list();}
			/*	else if(opdDetailListForFollowUp.size()>0)
				{
					obgDetailsList = session.createCriteria(ObgDetails.class).createAlias("OpdPatientDetails", "opd")
							.add(Restrictions.eq("opd.Id", opdDetailListForFollowUp.get(0).getId())).list();
				}
				*/
				//System.out.println("opdDetailListForFollowUp "+opdDetailListForFollowUp.get(0).getId());
				//System.out.println("opdPatientDetailsList "+opdPatientDetailsList.get(0).getId());
			//System.out.println("opdDetailListForFollowUp "+opdDetailListForFollowUp.get(0).getId());
				opdHistoryDetailsListForFollowUp = session.createCriteria(OpdPatientHistory.class).createAlias("OpdPatientDetails", "details")
								.createAlias("details.Visit", "visit").add(Restrictions.eq("visit.Id", lastVisitId)).list();
		
				
				patientInvestigationHeaderListForFollowUp = session.createCriteria(DgOrderhd.class).createAlias("Visit", "visit")
									.add(Restrictions.eq("visit.Id", lastVisitId)).list();
				patientPrescriptionHeaderList = session.createCriteria(PatientPrescriptionHeader.class).createAlias("Visit", "visit")
													.add(Restrictions.eq("visit.Id", lastVisitId)).add(Restrictions.eq("Status", "p").ignoreCase()).list();
				
				issuedPatientPrescriptionHeaderList =session.createCriteria(PatientPrescriptionHeader.class).createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", lastVisitId)).add(Restrictions.eq("Status", "I").ignoreCase()).list();
				
	/*	//check treatment has vaccine
				
				int i=0;
				for(PatientPrescriptionHeader phd: patientPrescriptionHeaderList){
					  int id= ((PatientPrescriptionDetails)(phd.getPatientPrescriptionDetails().toArray()[0])).getItem().getId();
					List<OpdVaccinMst> vaccineList =session.createCriteria(OpdVaccinMst.class).add(Restrictions.eq("MasStoreItem.Id",id)).list();
					if(vaccineList.size()>0)
					{
						patientPrescriptionHeaderList.remove(i);
					}
					i++;
				}*/
				
				if(patientPrescriptionHeaderList.size() > 0 )
				{
					int prescriptionId = patientPrescriptionHeaderList.get(0).getId() ;
					
					injAppDetails  = session.createCriteria(InjAppointmentDetails.class).createAlias("InjAppointmentHeader", "injHd")
							.add(Restrictions.eq("injHd.Prescription.Id", prescriptionId))
							.addOrder(Order.asc("InjAppointmentDate"))
							//.add(Restrictions.eq("visit.Id", lastVisitId))
							//.add(Restrictions.eq("visit.Id", lastVisitId))
							.list();
					
				}
				
				OpdSurgeryDetailList  = session.createCriteria(OpdSurgeryDetail.class).createAlias("OpdSurgery", "osh")
				.add(Restrictions.eq("osh.Visit.Id", visitId))
				//.add(Restrictions.eq("visit.Id", lastVisitId))
				//.add(Restrictions.eq("visit.Id", lastVisitId))
				.list();
				
				dischargeIcdCodeList = session.createCriteria(DischargeIcdCode.class).createAlias("Visit", "visit")
											.add(Restrictions.eq("visit.Id", lastVisitId)).list();

		
				procedureDetails = session.createCriteria(ProcedureDetails.class)
						.createAlias("ProcedureHeader", "ph")
						.add(Restrictions.eq("ph.Hin.Id", hinId))
						.add(Restrictions.eq("ph.Visit.Id", visitId))
						.addOrder(Order.asc("Id"))
						.list();
				
				Set<Integer> uniquNursingCareList = new HashSet<Integer>();
				Set<Integer> uniqueprocdureList = new HashSet<Integer>();
				
				for(ProcedureDetails pd:procedureDetails){
					
					if(uniquNursingCareList.add(pd.getNursingCare().getId()))
					{
						uniqueprocdureList.add(pd.getId());
					}
					
					
					procedureDetails = session.createCriteria(ProcedureDetails.class)
							.createAlias("ProcedureHeader", "ph")
							.add(Restrictions.in("Id", uniqueprocdureList))
							.addOrder(Order.asc("Id"))
							.list();
					
				}
				
				List<OtBooking> otbooking = new ArrayList<OtBooking>();
				otbooking = session.createCriteria(OtBooking.class).add(
										Restrictions.eq("Visit.Id", visitId))
								
										.list();
				map.put("otbooking", otbooking);
				
				
				therapyList = session.createCriteria(TherapyDetails.class)
						 .createAlias("ProcedureHeader", "td")
						 .createAlias("td.Visit", "v")
						.add(Restrictions.eq("v.Id", visitId))
						//.add(Restrictions.eq("Status", "y"))
						
						//.add(Restrictions.or(Restrictions.and(Restrictions.eq("Status", "y"),Restrictions.eq("FinalProcedureStatus", "y")) , Restrictions.and(Restrictions.eq("Status", "n"),Restrictions.eq("FinalProcedureStatus", "n"))))
						.list();
				
				}
				
				 opdPDetailsListForEyeDeptFollowUp = session.createCriteria(OpdOphthalmologyDetails.class).createAlias("Visit", "v")
							.createAlias("v.Hin", "hin").add(Restrictions.eq("hin.Id", hinId))
							.addOrder(Order.desc("id"))
							.list();
				 	
				 
				 dentalProcedureList = session.createCriteria(DentalTreatmentHeader.class).createAlias("Visit", "v")
							//.createAlias("v.Hin", "hin").add(Restrictions.eq("hin.Id", hinId))
						 .add(Restrictions.eq("v.Id", visitId))
							.list();
				 
				 bloodGroupList = session.createCriteria(MasBloodGroup.class).add(
							Restrictions.eq("Status", "y")).list();
		}
		
		
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		
		map.put("dischargeIcdCodeList", dischargeIcdCodeList);
		map.put("patientDataList", patientDataList);
		map.put("opdDetailListForFollowUp", opdDetailListForFollowUp);
		map.put("opdHistoryDetailsListForFollowUp", opdHistoryDetailsListForFollowUp);
		map.put("patientInvestigationHeaderListForFollowUp", patientInvestigationHeaderListForFollowUp);
		map.put("patientPrescriptionHeaderList", patientPrescriptionHeaderList);
		map.put("opdPatientDetails", opdPatientDetails);
		map.put("admittedVisit", admittedVisit);
		map.put("procedureDetails", procedureDetails);
		map.put("injAppDetails", injAppDetails);
		map.put("OpdSurgeryDetailList", OpdSurgeryDetailList);
		map.put("med", med);
		map.put("masItemClassList", masItemClassList);
		map.put("opdReferralPatientDetails", opdReferralPatientDetails);
		map.put("therapyList", therapyList);
		map.put("opdPDetailsListForEyeDeptFollowUp", opdPDetailsListForEyeDeptFollowUp);
		map.put("opdPatientDetailsList", opdPatientDetailsList);
		map.put("obgDetailsList", obgDetailsList);
		map.put("readableOPDScreen", readableOPDScreen);
		map.put("dentalProcedureList", dentalProcedureList);
		map.put("issuedPatientPrescriptionHeaderList", issuedPatientPrescriptionHeaderList);
		map.put("bloodGroupList", bloodGroupList);
		
		
		
		
		return map;
		
		
	}
	public synchronized Map<String, Object> updateRecallOpdPatientDetails(Map<String, Object> mapForDS) {

		Session session = (Session) getSession();
		boolean succesfullyAdded = false;
		Map<String, Object> returnMap = new HashMap<String, Object>();
		String orderSeqNo ="";
		List<Integer> itemIdList = (List<Integer>) mapForDS.get("itemIdList");
		List<Integer> itemConversionList = (List) mapForDS.get("itemConversionList");
		List<Integer> frequencyList = (List) mapForDS.get("frequencyList");
		List<String> otherMedicineList = (List) mapForDS.get("otherMedicineList");
		List<String> nomenclatureList =  (List) mapForDS.get("nomenclatureList");
		List<Integer> classificationList = (List<Integer>) mapForDS.get("classificationList");
		List<Integer> itemClassList = (List) mapForDS.get("itemClassList");
		List<String> itemDispensaryList = (List) mapForDS.get("itemDispensaryList");
		List<BigDecimal> uomQtyList =(List) mapForDS.get("uomQtyList");
		List<String> ctList = (List) mapForDS.get("ctList");
		List<Integer> prescriptionIdList = (List) mapForDS.get("prescriptionIdList");
		List<String> injectionFlagList = (List) mapForDS.get("injflagList ");
		
		String currentDepartmentCode =null;

		//List<String> injCategoryList = (List) mapForDS.get("injCategoryList");
		List<String> dosageList = (List) mapForDS.get("dosageList");
		//List<String> typeLeftRightList = (List) mapForDS.get("typeLeftRightList");
		//List<String> instructionList = (List) mapForDS.get("instructionList");
		List<String> routeList = new ArrayList<String>();
		routeList= (List) mapForDS.get("routeList");
		List<Integer> totalList = (List) mapForDS.get("totalList");
		List<Integer> noOfDaysList = (List) mapForDS.get("noOfDaysList");
		List<String> remarksList = (List) mapForDS.get("remarksList");
		List<String> chargeCodeIdList = (List) mapForDS.get("chargeCodeIdList");
		List<String> investigationDateList = (List) mapForDS.get("investigationDate");
		List<Integer> dgorderDtList = (List) mapForDS.get("dgorderDtList");
		
		
		Box box  = (Box) mapForDS.get("box");
		
		Integer opdpatientDetailId = box.getInt("opdpatientDetailId");
		
		
	//	List<Integer> quantityList = (List) mapForDS.get("quantityList");
		//List<String> referToMhList = new ArrayList<String>();
		/*if((List)mapForDS.get("referToMhList") != null){
			referToMhList = (List)mapForDS.get("referToMhList");
		}*/
		//List<String> clinicalList = (List) mapForDS.get("clinicalList");
		String[] diagnosisIdAray = (String[]) mapForDS.get("diagnosisIdAray");
		int hinId = (Integer) mapForDS.get("hinId");
		int departmentId = (Integer) mapForDS.get("departmentId");
		int visitId = (Integer) mapForDS.get("visitId");
		int hospitalId = (Integer) mapForDS.get("hospitalId");
		String height = (String) mapForDS.get("height");
		String whr = (String) mapForDS.get("whr");
		String weight = (String) mapForDS.get("weight");
		String pulse = (String) mapForDS.get("pulse");
		String disposal = (String) mapForDS.get("disposal");
		String days = (String) mapForDS.get("days");
		String disposalDays = "";
		if(mapForDS.get("disposalDays") != null){
			disposalDays = (String) mapForDS.get("disposalDays");
		}
		
		boolean dublicateVisit = false;

/*		int size = 0; 
			size =	session.createCriteria(OpdPatientDetails.class)
				.createAlias("Visit", "Visit")
				.add(Restrictions.eq("id", opdpatientDetailId))
				.add(Restrictions.eq("Visit.Id", visitId)).list().size();*/
		List<Visit> visitList =  session.createCriteria(Visit.class)
				.add(Restrictions.eq("Id", visitId))
				.list();
	/*	if(size>0)
		{
			dublicateVisit = true;
		}*/
		String departmentCodeForPhychiatrist = HMSUtil.getProperties("adt.properties", "departmentCodeForPhychiatrist");
		String dentalDepartmentCode = HMSUtil.getProperties("adt.properties", "departmentCodeForDental");
	
		
	//	if(size>0)
		int precriptionCount = box.getInt("precriptionCount");
		if(visitList.size()>0 && precriptionCount == visitList.get(0).getPrescriptionCounter())
		{
			MasDepartment masDepartment1 = new MasDepartment();
			masDepartment1.setId(departmentId);
		//String remaks = (String) mapForDS.get("remaks");
		int empId = (Integer) mapForDS.get("empId");
		int empIdCurrnet= (Integer) mapForDS.get("empIdCurrnet");
		int userId = (Integer) mapForDS.get("userId");
		Users user = new Users();
		user.setId(userId);
		
	
	//	departmentId=117;
		int deptId = (Integer) mapForDS.get("deptId");

		String bp = (String) mapForDS.get("bp");
		String userName = (String) mapForDS.get("userName");
		String temperature = (String) mapForDS.get("temperature");
		String afmsDescription = (String) mapForDS.get("afmsDescription");
		//String referredDept = (String) mapForDS.get("referredDept");
		String consultationTime = (String) mapForDS.get("consultationTime");
		String consultationDate = (String) mapForDS.get("consultationDate");
		Date consultationDateToInsert = HMSUtil
				.convertStringTypeDateToDateType(consultationDate);
		String initialDiagnosis = (String) mapForDS.get("initialDiagnosis");
		int systemDiagnosisId = 0;
		if(mapForDS.get("systemDiagnosisId") != null){
			systemDiagnosisId = (Integer)mapForDS.get("systemDiagnosisId");
		}

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentTimeWithoutSecond();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);

		String plan = (String) mapForDS.get("plan");
		String nextVisitDate = (String) mapForDS.get("nextVisitDate");
		String onExamination = (String) mapForDS.get("onExamination");

		String presentComplain = (String) mapForDS.get("presentComplain");
		String presentAdvice = (String) mapForDS.get("presentAdvice");//fayaz added
		String presentIllness = (String) mapForDS.get("presentIllness");
		String pastHistory = (String) mapForDS.get("pastHistory");
		String personalHistory = (String) mapForDS.get("personalHistory");
		String otherDetails = (String) mapForDS.get("otherDetails");
		String familyHistory  = (String) mapForDS.get("familyHistory");
	
		//String otherFamilyHistorty = "";
		/*if(mapForDS.get("otherFamilyHistorty")!= null){
			otherFamilyHistorty = (String)mapForDS.get("otherFamilyHistorty");
		}*/
		String allergies = "";
		if(mapForDS.get("allergies")!= null){
			allergies = (String)mapForDS.get("allergies");
		}
		String reviewAt = "";
		if(mapForDS.get("reviewAt")!= null){
			reviewAt = (String)mapForDS.get("reviewAt");
		}
		String referredDoctars = (String) mapForDS.get("referredDoctars");
		String riskFactor = (String) mapForDS.get("riskFactor");
		String bmi = (String) mapForDS.get("bmi");
		String idealWeight = (String) mapForDS.get("idealWeight");
		String pastMedicalHistory = (String) mapForDS.get("pastMedicalHistory");
		Date nextVisitDateToInsert = HMSUtil
				.convertStringTypeDateToDateType(nextVisitDate);
		//List<Integer> itemIdList = new ArrayList<Integer>();

		String clinicalNotes1 = (String) mapForDS.get("clinicalNotes1");
		String returnfromHospital = (String) mapForDS.get("returnfromHospital");
		String referedToMH = (String) mapForDS.get("referedToMH");
		String hospName = (String) mapForDS.get("hospName");
		String doa = (String) mapForDS.get("doa");
		String dod = (String) mapForDS.get("dod");
		String gpe_examination = (String) mapForDS.get("gpe_examination");
		String rr =  (String)mapForDS.get("rr");
		String systamicExam="";
		if(mapForDS.get("systamicExam")!=null){
			systamicExam = (String) mapForDS.get("systamicExam");
		}
		String mhString = "";
		if(mapForDS.get("mh")!=null){
			mhString = (String) mapForDS.get("mh");
		}
		String mhDepartment = "";
		if(mapForDS.get("mhDepartment")!=null){
			mhDepartment = (String) mapForDS.get("mhDepartment");
		}
		String mhReferredFor = "";
		if(mapForDS.get("mhReferredFor")!=null){
			mhReferredFor = (String) mapForDS.get("mhReferredFor");
		}
		String adviceOnDischarge = (String) mapForDS.get("adviceOnDischarge");
		String pastDiagnosis  = (String) mapForDS.get("pastDiagnosis");
		String pastdisposal = (String) mapForDS.get("pastdisposal");
		int threpytypeId = (Integer) mapForDS.get("threpytypeId");
		String DaysPhy = (String) mapForDS.get("DaysPhy");
		String DurationPhy = (String) mapForDS.get("DurationPhy");
		int priority = 0;
		if(mapForDS.get("priority") != null){
		 priority = (Integer)mapForDS.get("priority");
		}
		//int physioRequisitionHeaderId = 0;
		int procedureHeaderId = 0;
		int physioHeaderId = 0;
		/*if(mapForDS.get("physioRequisitionHeaderId")!=null){
			physioRequisitionHeaderId = (Integer)mapForDS.get("physioRequisitionHeaderId");
		}*/
		if(mapForDS.get("physioHeaderId")!=null){
			procedureHeaderId = (Integer)mapForDS.get("procedureHeaderId");
		}
		
		if(mapForDS.get("physioHeaderId")!=null){
			physioHeaderId = (Integer)mapForDS.get("physioHeaderId");
		}
		
		Transaction tx = null;

		try {
			tx = session.beginTransaction();
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if(!box.getString("bloodGroupId").isEmpty() && (box.getInt("patientEmpId")!=0 || box.getInt("dependentId")!=0)){
				if(box.getInt("patientEmpId")!=0){
				MasEmployee updateEmploye = (MasEmployee)hbt.load(MasEmployee.class,box.getInt("patientEmpId"));
						updateEmploye.setBloodGroup(new MasBloodGroup(box.getInt("bloodGroupId")));hbt.update(updateEmploye);}
				else
				{
					MasEmployeeDependent updateDependent = (MasEmployeeDependent)hbt.load(MasEmployeeDependent.class,box.getInt("dependentId"));
					updateDependent.setBloodGroup(new MasBloodGroup(box.getInt("bloodGroupId")));hbt.update(updateDependent);}
			}
			
			OpdPatientDetails opdPatientDetails=(OpdPatientDetails)hbt.load(OpdPatientDetails.class, opdpatientDetailId);
			Visit visitsave = new Visit();
			visitsave=(Visit) hbt.load(Visit.class, visitId);
			visitsave.setWorkingDiagnosis(initialDiagnosis);
			visitsave.setDisposalName(disposal);
			visitsave.setDisposalDays(days);
			if(priority != 0){
				visitsave.setPriority(priority);
			}
			visitsave.setPrescriptionCounter(precriptionCount+1);
			hbt.update(visitsave);
			
			
			Visit visitObj = new Visit();
			visitObj.setId(visitId);
						//visitObj.setDiagnosisString(initialDiagnosis);
			//hbt.update(visitObj);
			opdPatientDetails.setVisit(visitObj);
			
			MasHospital masHospitalObj = new MasHospital();
			masHospitalObj.setId(hospitalId);
			Patient patientObj = new Patient();
			MasEmployee masEmployee = new MasEmployee();
			
			if (empId != 0) {
				//MasEmployee masEmployee = new MasEmployee();
				masEmployee.setId(empId);
				opdPatientDetails.setEmployee(masEmployee);
			}
		
			opdPatientDetails.setHospital(masHospitalObj);
			opdPatientDetails.setHeight(height);
			opdPatientDetails.setWhr(whr);
			opdPatientDetails.setDisposal(disposal);
			opdPatientDetails.setDays(days);
			opdPatientDetails.setDisposalDays(disposalDays);
			opdPatientDetails.setVweight(weight);
			opdPatientDetails.setPulse(pulse);
			opdPatientDetails.setBp(bp);
			if (temperature!=null) {
				opdPatientDetails.setTemperature(temperature);
			}
			
			if(!box.getString("pr").isEmpty())
				opdPatientDetails.setPr(box.getInt("pr"));
			opdPatientDetails.setBst(box.getString("bst"));
			opdPatientDetails.setSp(box.getString("sp"));
			opdPatientDetails.setBreast(box.getString("breast"));
			opdPatientDetails.setSpine(box.getString("spine"));
			
			opdPatientDetails.setAfmsDesc(afmsDescription);
			opdPatientDetails.setConsultationTime(consultationTime);
			opdPatientDetails.setConsultationDate(consultationDateToInsert);
			opdPatientDetails.setPlan(plan);
			opdPatientDetails.setInitialDiagnosis(initialDiagnosis);
			//System.out.println("systemDiagnosisId===in ds=="+systemDiagnosisId);
			if(systemDiagnosisId != 0){
			MasSystemDiagnosis systemDiagnosis = new MasSystemDiagnosis();
			systemDiagnosis.setId(systemDiagnosisId);
			opdPatientDetails.setSystemDiagnosis(systemDiagnosis);
			}
			opdPatientDetails.setOpdDate(date);
			opdPatientDetails.setOpdTime(time);
			opdPatientDetails.setNextVisitDate(nextVisitDateToInsert);
			//opdPatientDetails.setReferredDept(referredDept);
			//System.out.println("referredDept---"+referredDept);
			opdPatientDetails.setReferedDoctars(referredDoctars);
			opdPatientDetails.setOnExamination(onExamination);
			opdPatientDetails.setReturnfromHospital(returnfromHospital);
			opdPatientDetails.setMhRun(referedToMH);
			if(referedToMH.equals("y")){
				opdPatientDetails.setMh(mhString);
				opdPatientDetails.setMhDepartment(mhDepartment);
				opdPatientDetails.setMhReferredFor(mhReferredFor);
			}
			opdPatientDetails.setHospName(hospName);
			opdPatientDetails.setDoa(doa);
			opdPatientDetails.setDod(dod);
			opdPatientDetails.setGpe_examination(gpe_examination);
			opdPatientDetails.setRr(rr);
			opdPatientDetails.setSystamicExam(systamicExam);
			opdPatientDetails.setBmi(bmi);
			opdPatientDetails.setIdealWeight(idealWeight);
			opdPatientDetails.setAdviceOnDischarge(adviceOnDischarge);
			opdPatientDetails.setPastDiagnosis(pastDiagnosis);
			opdPatientDetails.setPastdisposal(pastdisposal);
			opdPatientDetails.setDaysPhy(DaysPhy);
			opdPatientDetails.setDurationPhy(DurationPhy);
			opdPatientDetails.setCaseNotes(clinicalNotes1);
			
			//opdPatientDetails.setAdviceOnDischarge((String)mapForDS.get("otherTreatment"));
			/*if (mapForDS.get("admissionAdvised") != null) {
				System.out.println("here1");
				String admissionAdvised = (String) mapForDS
						.get("admissionAdvised");
				opdPatientDetails.setAdmissionAdvised(admissionAdvised);
			}
			if (mapForDS.get("admissionWard") != null) {
				System.out.println("here2");
				Integer admissionWard = (Integer) mapForDS.get("admissionWard");
				opdPatientDetails.setAdmissionWard(new MasDepartment(admissionWard));
		
				}
			if (mapForDS.get("admissionDate") != null) {
				System.out.println("here3");
				Date admissionDate = (Date) mapForDS.get("admissionDate");
				opdPatientDetails.setAdmissionDate(admissionDate);
			}
			*/
			//System.out.println(mapForDS.get("admissionDate")+" "+mapForDS.get("admissionWard") +" data "+mapForDS.get("admissionAdvised") );
			
			//System.out.println("threpytypeId---1"+threpytypeId);
			if(threpytypeId!=0)
			{
				//System.out.println("threpytypeId---"+threpytypeId);
			MasTherapyType thy=new MasTherapyType();
			thy.setId(threpytypeId);
			opdPatientDetails.setTherapyType(thy);
			}
			//---------commented by anamika---------//
			/*String delimiter = ",";
			String[] temp;
			temp = referredDept.split(delimiter);
			Boolean flag=false;
			for(int i =0; i < temp.length ; i++)
			{
				if(temp[i].equalsIgnoreCase("87"))
				{
					flag=true;
					
				}
			}
			if(flag)
			{
				opdPatientDetails.setPhyStatus("w");
			}else
			{
				opdPatientDetails.setPhyStatus("c");
			}*/
		//	
			
		
			
			int referral = 0;
			int referredByDoctorId = 0;
			int referredDepartmentId = 0;
			int referredHospitalId = 0;
			int referralPriority=0;
				//System.out.println(mapForDS.get("referral"));
				if ( mapForDS.get("referral") !=null && ((Integer) mapForDS.get("referral")) != 0) {
						if(mapForDS.get("referral")!=null)
						{
							try
							{
								referral = (Integer)mapForDS.get("referral");
							}
							catch(NumberFormatException e)
							{
								e.printStackTrace();
							}
						}
						
						if(referral==1)
						{
							
							 patientObj = (Patient)hbt.load(Patient.class, hinId);
							patientObj.setPaymentStatus(null);
								hbt.update(patientObj);
								
							
							

							String referTo = null;
							String patientAdvise = null;
							String referralNote = null;
					
							
							if (mapForDS.get("referTo") != null) {
								referTo = (String) mapForDS.get("referTo");
								opdPatientDetails.setReferredType(referTo);
								opdPatientDetails.setReferredStatus("y");
							}
					
							if (mapForDS.get("patientAdvise") != null) {
								patientAdvise = (String) mapForDS.get("patientAdvise");
								opdPatientDetails.setPatientAdvise(patientAdvise);
							}

							
							Date referralDate = (Date) mapForDS.get("referralDate");
							opdPatientDetails.setReferredDate(referralDate);
							
							if (mapForDS.get("referralNote") != null) {
								
								referralNote = (String) mapForDS.get("referralNote");
								
								opdPatientDetails.setReferralNotes(referralNote.trim());
							}
							

						/*	if (((Integer) mapForDS.get("referdepartment")) != 0) {
								referredDepartmentId = (Integer) mapForDS.get("referdepartment");
								MasDepartment referedDepartment = new MasDepartment();
								referedDepartment.setId(referredDepartmentId);
								opdPatientDetails.setReferredDeptInt(referedDepartment);
								
								if (((Integer) mapForDS.get("refereddoctor")) != 0) {
									referredByDoctorId = (Integer) mapForDS.get("refereddoctor");
									MasEmployee emp = new MasEmployee();
									emp.setId(referredByDoctorId);
									opdPatientDetails.setReferredDoctorInt(emp);
								}
								
								if(mapForDS.get("referralPriority") != null){
									referralPriority = (Integer)mapForDS.get("referralPriority");
									opdPatientDetails.setReferralPriority(referralPriority);
								}
								
							}*/
							if(mapForDS.get("referralPriority") != null){
								referralPriority = (Integer)mapForDS.get("referralPriority");
								opdPatientDetails.setReferralPriority(referralPriority);
							}
							if (mapForDS.get("referImpannelhospital") != null) {
								referredHospitalId = (Integer) mapForDS.get("referImpannelhospital");
								MasImpanneledHospital msih = new MasImpanneledHospital();
								msih.setId(referredHospitalId);
								
								opdPatientDetails.setImpanneledHospital(msih);
								Date referalTillDate = (Date) mapForDS.get("referalTillDate");
							
								opdPatientDetails.setReferTillDate(referalTillDate);
								
								opdPatientDetails.setEmpanelStatus("WR");
							
								opdPatientDetails.setReferralTreatmentType((String)mapForDS.get("referral_treatment_type"));
								opdPatientDetails.setReferredFor((String)mapForDS.get("referredFor"));
								if(mapForDS.get("referdays")!=null)
								{
									opdPatientDetails.setReferralDays((Integer) mapForDS.get("referdays"));
								}
								
								
							}
							
				
							
							
						}
					
				}
				else if (mapForDS.get("admissionAdvised") != null && mapForDS
						.get("admissionAdvised").toString().equalsIgnoreCase("y")) {
					
					
					/*String admissionAdvised = (String) mapForDS
							.get("admissionAdvised");*/
					opdPatientDetails.setAdmissionAdvised((String) mapForDS
							.get("admissionAdvised"));
					
					/*if(admissionAdvised.equals("y"))
					{*/
						String dispoasal = HMSUtil.getValuesFromPropertiesFile("adt.properties", "disposalForAdmitted".trim());
						opdPatientDetails.setDisposal(dispoasal);
						if (mapForDS.get("admissionWard") != null) {
						Integer admissionWard = (Integer) mapForDS.get("admissionWard");
						opdPatientDetails.setAdmissionWard(new MasDepartment(admissionWard));
						}
						
						if (mapForDS.get("admissionDate") != null) {
							Date admissionDate = (Date) mapForDS.get("admissionDate");
							opdPatientDetails.setAdmissionDate(admissionDate);
						}
						opdPatientDetails.setAdmissionNotes(box.getString("admissionNote"));
					//}
				}
				else//update referral
				{
					OpdPatientDetails opdPatientDetails1=(OpdPatientDetails)hbt.get(OpdPatientDetails.class, opdpatientDetailId);
				
					if(opdPatientDetails1.getReferredType()!=null)
					{
						opdPatientDetails.setReferralNotes(box.getString("referralNote"));
						if(opdPatientDetails1.getReferredType().equalsIgnoreCase("Empanel") || opdPatientDetails1.getReferredType().equalsIgnoreCase("Both")){
							
							if (box.getInt("referhospital") != 0) {
								referredHospitalId = box.getInt("referhospital");
								MasImpanneledHospital msih = new MasImpanneledHospital();
								msih.setId(referredHospitalId);
								opdPatientDetails.setImpanneledHospital(msih);
								opdPatientDetails.setReferralTreatmentType(box.getString("referral_treatment_type"));
								opdPatientDetails.setReferredFor(box.getString("referredFor"));
						}
					}
				}}
		//Save surgery details
				
				 List<Integer> procedureId = (List<Integer>) mapForDS.get("procedureId");
                 List<String> surgeryType = (List<String>) mapForDS.get("surgeryType");
             	OpdSurgeryHeader opdSurgeryHeader = null;
             	List<OpdSurgeryDetail> opdSurgeryDetailList = null;
            	int miniorotsize = 0;
            	int opdSurgeryHeaderId = 0;
            	 //System.out.println(box.get("opdSurgeryHeaderId") +"== opdSurgeryHeaderId");
                 if(procedureId!=null && procedureId.size()>0)
					{
                	 opdSurgeryDetailList =new ArrayList<OpdSurgeryDetail>(); 
                	
							 if(box.get("opdSurgeryHeaderId")!=null && box.getInt("opdSurgeryHeaderId")!=0)
								 opdSurgeryHeader = (OpdSurgeryHeader) hbt.load(OpdSurgeryHeader.class, box.getInt("opdSurgeryHeaderId"));
							 else
								 opdSurgeryHeader = new OpdSurgeryHeader();	
					
						//List<TransactionSequence> sequenceNoList = new ArrayList<TransactionSequence>();
						
						opdSurgeryHeader.setHin(new Patient(hinId));
						opdSurgeryHeader.setEmployee(new MasEmployee(empId));
						opdSurgeryHeader.setPrescribedDepartment(new MasDepartment(departmentId));
						
						opdSurgeryHeader.setHospital(masHospitalObj);
						opdSurgeryHeader.setRequisitionDate(new Date());
						opdSurgeryHeader.setRequisitionTime(consultationTime);
						opdSurgeryHeader.setPatientStatus("Out Patient");/*doubt*/
						opdSurgeryHeader.setVisit(visitObj);
			   
					
						//opdSurgeryHeader.setPacStatus(box.getString("pacstatus"+l));
						//opdSurgeryHeader.setBookingStatus(box.getString("pacstatus"+l));
						/*opdSurgeryHeader.setBillingStatus("Pending");
						opdSurgeryHeader.setBillingStatus("n");*/
						//opdSurgeryHeader.setPacStatus("completed");
						//opdSurgeryHeader.setBookingStatus("completed");
						opdSurgeryHeader.setStatus("n");

						mapForDS.put("tableObjectName", "OpdSurgeryHeader");			
						mapForDS.put("isHospitalWise", "y");
						mapForDS.put("hospitalId", masHospitalObj.getId());
						mapForDS.put("isYearly", "n");			
						mapForDS.put("isMonthly", "n");
						mapForDS.put("isPrefix", "n");
						/*mapForDS.put("transactionPrefixProperty", "transactionPrefixForIPD");*/
						int orderNo = Integer.parseInt(HMSUtil.generateTransactionSequence(mapForDS, session, hbt));
			                
			                opdSurgeryHeader.setOrderNo(orderNo);
			              //  hbt.saveOrUpdate(opdSurgeryHeader);
			                hbt.save(opdSurgeryHeader);
					}
				for (int l = 0; l <procedureId.size(); l++) {
					//if( procedureId!=null &&  !procedureId[l].equals(""))
		
					
			     if(surgeryType.get(l).equalsIgnoreCase("major"))
			     {
						//List<OpdSurgeryHeader> opdSurgeryHeaderList= new ArrayList<OpdSurgeryHeader>();
			    	    
		                OpdSurgeryDetail opdSurgeryDetail = new OpdSurgeryDetail();
						MasChargeCode masChargeCode = new MasChargeCode();
						masChargeCode.setId(procedureId.get(l));
						opdSurgeryDetail.setChargeCode(masChargeCode);
						opdSurgeryDetail.setOpdSurgery(opdSurgeryHeader);
						opdSurgeryDetail.setAnestheisaPacStatus("n");
						opdSurgeryDetail.setSurgeryStatus("n");
						opdSurgeryDetail.setDepartment(masDepartment1);
						//opdSurgeryDetail.setdepart
						//opdSurgeryDetail.setTentativeDate(HMSUtil.dateFormatterDDMMYYYY(box.getString("tentativeDate"+l)));
						//opdSurgeryDetail.setRemarks(box.getString("procRemarks"+i));
						hbt.save(opdSurgeryDetail);
						
				}		
			     else  if(surgeryType.get(l).equalsIgnoreCase("minor"))
			     {
			    	    OpdSurgeryDetail opdSurgeryDetail = new OpdSurgeryDetail();
						MasChargeCode masChargeCode = new MasChargeCode();
						masChargeCode.setId(procedureId.get(l));
						opdSurgeryDetail.setChargeCode(masChargeCode);
						opdSurgeryDetail.setOpdSurgery(opdSurgeryHeader);
						opdSurgeryDetail.setAnestheisaPacStatus("y");
						opdSurgeryDetail.setSurgeryStatus("n");
						opdSurgeryDetail.setDepartment(masDepartment1);
						hbt.save(opdSurgeryDetail);
						opdSurgeryDetailList.add(opdSurgeryDetail);
			     }
						
				}
				
				//Save Minor Ot
			
               if(opdSurgeryDetailList!=null && opdSurgeryDetailList.size() >0)
               {
            	   miniorotsize ++;
            	   Date surgeryDate = HMSUtil
					.convertStringTypeDateToDateType( box.getString("tentativeDate").toString());
            	   String startTime = box.getString("startTime");
            	   String endTime = box.getString("endTime");
            		int deptIdOt =  box.getInt("otDepartment");
            		
            	    List<OtPreAnesthesiaDetail> otPreDtList = new ArrayList<OtPreAnesthesiaDetail>(); 
            	    OtPreAnesthesiaHd  preHd = new OtPreAnesthesiaHd();
            	    OtPreAnesthesiaDetail preDt = null;
            	    
            	    preHd.setVisit(visitObj);
            	    preHd.setHin(new Patient(hinId));
            	    preHd.setFitForSurgery("y");
            	    preHd.setStatus("y");
            	    preHd.setHospital(masHospitalObj);
            	    hbt.save(preHd);
				for(OpdSurgeryDetail psd:opdSurgeryDetailList)
                   {
						preDt = new OtPreAnesthesiaDetail();
						preDt.setAnesthesiaHd(preHd);
						preDt.setOpdSurgeryDetail(psd);
						preDt.setStatus("y");
					    hbt.save(preDt);
					    otPreDtList.add(preDt);
                   }
				
				OtBooking otbooking = new OtBooking();
				OtBookingDt otbookingDt = null;
				otbooking.setSurgeryDate(surgeryDate);
				otbooking.setSurgeryEndTime(endTime);
				otbooking.setSurgeryStartTime(startTime);
				otbooking.setSurgeryStatus("n");
				otbooking.setDepartment(new MasDepartment(deptIdOt));
				otbooking.setOtPreAnesthesiaStatus("y");
				otbooking.setBookedBy(new MasEmployee(empId));
				otbooking.setHin(new Patient(hinId));
				MasOt masot=new MasOt();
				masot.setId(box.getInt("otId"));
				otbooking.setOt(masot);
				
				MasBed masbed=new MasBed(); 
				masbed.setId(box.getInt("tableId"));
				otbooking.setBed(masbed);
				otbooking.setHospital(masHospitalObj);
				otbooking.setVisit(visitObj);
				otbooking.setLastChgdBy(user);
			    hbt.save(otbooking);
			    
				for( OtPreAnesthesiaDetail otpreDt :otPreDtList)
				{
					otbookingDt = new OtBookingDt();
					otbookingDt.setOtBookingHd(otbooking);
					otbookingDt.setOtPreAnesthesiaDetail(otpreDt);
					otbookingDt.setStatus("n");
					hbt.save(otbookingDt);
				}
				
				
				
               }
               if(miniorotsize==procedureId.size() && opdSurgeryHeader!=null)
               {
               opdSurgeryHeader.setStatus("y");
	    	    hbt.update(opdSurgeryHeader);
               }
				
				//end minor ot
               
			opdPatientDetails.setPhyStatus("c");
			opdPatientDetails.setDepartment(masDepartment1);
			
			//saving dental opd details
			
	
			if(dentalDepartmentCode.equalsIgnoreCase(visitsave.getDepartment().getDepartmentCode()))
					{
			opdPatientDetails.setDSince1(box.getString("since").concat(box.getString("sinceUnit")));
			opdPatientDetails.setDRemarks1(box.getString("sinceRemarks"));
			opdPatientDetails.setDAssociatedComplaint(box.getString("associatedComplaint"));
			opdPatientDetails.setDSince2(box.getString("associatedSince").concat(box.getString("associatedSince")));
			opdPatientDetails.setDRemarks2(box.getString("associatedRemarks"));
			opdPatientDetails.setNoOfTeeth(box.getInt(TOTAL_NO_OF_TEETH));
			opdPatientDetails.setNoOfDefectiveTeeth(box.getInt(DEFECTIVE_TEETH));
			opdPatientDetails.setNoOfDentalPoints(box.getInt("dentalPoints"));
			opdPatientDetails.setMissingTeeth(box.getInt("missingTeeth"));
			opdPatientDetails.setUnSaveableTeeth(box.getInt("unsaveableTeeth"));
			opdPatientDetails.setConditionOfGums(box.getString("conditionOfGums"));
			opdPatientDetails.setDTreatment(box.getString("dentalTreatment"));
			opdPatientDetails.setDDtc(box.getString("dtc"));
			opdPatientDetails.setDTreatmentRemark(box.getString("treatmentRemarks"));
			opdPatientDetails.setAnesthesiaRemark(box.getString("anesthesiaRemark"));
			opdPatientDetails.setTeethExtracted(box.getInt("teethExtracted"));
			opdPatientDetails.setTeethConservesWithRt(box.getInt("teethConservesWithRt"));
			opdPatientDetails.setTeethConservesWithoutRt(box.getInt("teethConservesWithOutRt"));
			opdPatientDetails.setDenturesFittedNew(box.getInt("denturesFittedNew"));
			opdPatientDetails.setDenturesFittedRemodels(box.getInt("denturesFittedRemodels"));
			opdPatientDetails.setDenturesFittedRepairs(box.getInt("denturesFittedRepairs"));
			opdPatientDetails.setSpecialisedTreatment(box.getString("specialisedTreatment"));
			opdPatientDetails.setConsultationDate(HMSUtil.convertStringTypeDateToDateType(currentDate));
			opdPatientDetails.setConsultationTime(time);
			opdPatientDetails.setOpdDate(HMSUtil.convertStringTypeDateToDateType(currentDate));
			opdPatientDetails.setOpdTime(time);
			opdPatientDetails.setTotalMissingTeeth(box.getString("MissTeeth"));
			opdPatientDetails.setTotalUnsaveableTeeth(box.getString("UnserTeeth"));
			opdPatientDetails.setDentalValue(box.getString("dentalValue"));
			opdPatientDetails.setDisposal(disposal);
			opdPatientDetails.setDays(days);
			opdPatientDetails.setTreatableTooth(box.getString("treatableTooth"));
			if(box.getInt("anesthesiaId") != 0){
				MasAnesthesia masAnesthesia = new MasAnesthesia();
				masAnesthesia.setId(box.getInt("anesthesiaId"));
				opdPatientDetails.setAnesthesia(masAnesthesia);
			}
			
			if(!box.getString("teethRemarks").equals("")){
				opdPatientDetails.setMissingTeethRemark(box.getString("teethRemarks"));
			}
			
			
			//---------------------code for Missing Teeth------------------------------//
			String mur8 = "";
			String mur7 = "";
			String mur6 = "";
			String mur5 = "";
			String mur4 = "";
			String mur3 = "";
			String mur2 = "";
			String mur1 = "";
			String mul8 = "";
			String mul7 = "";
			String mul6 = "";
			String mul5 = "";
			String mul4 = "";
			String mul3 = "";
			String mul2 = "";
			String mul1 = "";
			String mlr8 = "";
			String mlr7 = "";
			String mlr6 = "";
			String mlr5 = "";
			String mlr4 = "";
			String mlr3 = "";
			String mlr2 = "";
			String mlr1 = "";
			String mll8 = "";
			String mll7 = "";
			String mll6 = "";
			String mll5 = "";
			String mll4 = "";
			String mll3= "";
			String mll2 = "";
			String mll1 = "";
			String uur8 = "";
			String uur7 = "";
			String uur6 = "";
			String uur5 = "";
			String uur4 = "";
			String uur3 = "";
			String uur2 = "";
			String uur1 = "";
			String uul8 = "";
			String uul7 = "";
			String uul6 = "";
			String uul5 = "";
			String uul4 = "";
			String uul3 = "";
			String uul2 = "";
			String uul1 = "";
			String ulr8 = "";
			String ulr7 = "";
			String ulr6 = "";
			String ulr5 = "";
			String ulr4 = "";
			String ulr3 = "";
			String ulr2 = "";
			String ulr1 = "";
			String ull8 = "";
			String ull7 = "";
			String ull6 = "";
			String ull5 = "";
			String ull4 = "";
			String ull3 = "";
			String ull2 = "";
			String ull1 = "";
			if (!box.getString(MUR_8).equals("")) {
				mur8 = box.getString(MUR_8);
			} else {
				mur8 = "N";
			}
			if (!box.getString(MUR_7).equals("")) {
				mur7 = box.getString(MUR_7);
			} else {
				mur7 = "N";
			}
			if (!box.getString(MUR_6).equals("")) {
				mur6 = box.getString(MUR_6);
			} else {
				mur6 = "N";
			}
			if (!box.getString(MUR_5).equals("")) {
				mur5 = box.getString(MUR_5);
			} else {
				mur5 = "N";
			}
			if (!box.getString(MUR_4).equals("")) {
				mur4 = box.getString(MUR_4);
			} else {
				mur4 = "N";
			}
			if (!box.getString(MUR_3).equals("")) {
				mur3 = box.getString(MUR_3);
			} else {
				mur3 = "N";
			}
			if (!box.getString(MUR_2).equals("")) {
				mur2 = box.getString(MUR_2);
			} else {
				mur2 = "N";
			}
			if (!box.getString(MUR_1).equals("")) {
				mur1 = box.getString(MUR_1);
			} else {
				mur1 = "N";
			}
			if (!box.getString(MUL_8).equals("")) {
				mul8 = box.getString(MUL_8);
			} else {
				mul8 = "N";
			}
			if (!box.getString(MUL_7).equals("")) {
				mul7 = box.getString(MUL_7);
			} else {
				mul7 = "N";
			}
			if (!box.getString(MUL_6).equals("")) {
				mul6 = box.getString(MUL_6);
			} else {
				mul6 = "N";
			}
			if (!box.getString(MUL_5).equals("")) {
				mul5 = box.getString(MUL_5);
			} else {
				mul5 = "N";
			}
			if (!box.getString(MUL_4).equals("")) {
				mul4 = box.getString(MUL_4);
			} else {
				mul4 = "N";
			}
			if (!box.getString(MUL_3).equals("")) {
				mul3 = box.getString(MUL_3);
			} else {
				mul3 = "N";
			}
			if (!box.getString(MUL_2).equals("")) {
				mul2 = box.getString(MUL_2);
			} else {
				mul2 = "N";
			}
			if (!box.getString(MUL_1).equals("")) {
				mul1 = box.getString(MUL_1);
			} else {
				mul1 = "N";
			}
			if (!box.getString(MLR_8).equals("")) {
				mlr8 = box.getString(MLR_8);
			} else {
				mlr8 = "N";
			}
			if (!box.getString(MLR_7).equals("")) {
				mlr7 = box.getString(MLR_7);
			} else {
				mlr7 = "N";
			}
			if (!box.getString(MLR_6).equals("")) {
				mlr6 = box.getString(MLR_6);
			} else {
				mlr6 = "N";
			}
			if (!box.getString(MLR_5).equals("")) {
				mlr5 = box.getString(MLR_5);
			} else {
				mlr5 = "N";
			}
			if (!box.getString(MLR_4).equals("")) {
				mlr4 = box.getString(MLR_4);
			} else {
				mlr4 = "N";
			}
			if (!box.getString(MLR_3).equals("")) {
				mlr3= box.getString(MLR_3);
			} else {
				mlr3 = "N";
			}
			if (!box.getString(MLR_2).equals("")) {
				mlr2 = box.getString(MLR_2);
			} else {
				mlr2 = "N";
			}
			if (!box.getString(MLR_1).equals("")) {
				mlr1 = box.getString(MLR_1);
			} else {
				mlr1 = "N";
			}
			if (!box.getString(MLL_8).equals("")) {
				mll8 = box.getString(MLL_8);
			} else {
				mll8 = "N";
			}
			if (!box.getString(MLL_7).equals("")) {
				mll7 = box.getString(MLL_7);
			} else {
				mll7 = "N";
			}
			if (!box.getString(MLL_6).equals("")) {
				mll6 = box.getString(MLL_6);
			} else {
				mll6 = "N";
			}
			if (!box.getString(MLL_5).equals("")) {
				mll5 = box.getString(MLL_5);
			} else {
				mll5 = "N";
			}
			if (!box.getString(MLL_4).equals("")) {
				mll4 = box.getString(MLL_4);
			} else {
				mll4 = "N";
			}
			if (!box.getString(MLL_3).equals("")) {
				mll3 = box.getString(MLL_3);
			} else {
				mll3 = "N";
			}
			if (!box.getString(MLL_2).equals("")) {
				mll2 = box.getString(MLL_2);
			} else {
				mll2 = "N";
			}
			if (!box.getString(MLL_1).equals("")) {
				mll1 = box.getString(MLL_1);
			} else {
				mll1 = "N";
			}
			if (!box.getString(UUR_8).equals("")) {
				uur8 = box.getString(UUR_8);
			} else {
				uur8 = "N";
			}
			if (!box.getString(UUR_7).equals("")) {
				uur7 = box.getString(UUR_7);
			} else {
				uur7 = "N";
			}
			if (!box.getString(UUR_6).equals("")) {
				uur6 = box.getString(UUR_6);
			} else {
				uur6 = "N";
			}
			if (!box.getString(UUR_5).equals("")) {
				uur5 = box.getString(UUR_5);
			} else {
				uur5 = "N";
			}
			if (!box.getString(UUR_4).equals("")) {
				uur4 = box.getString(UUR_4);
			} else {
				uur4 = "N";
			}
			/*if (!box.getString(UUR_3).equals("")) {
				uur3 = box.getString(UUR_3);
			} else {
				uur3 = "N";
			}
			if (!box.getString(UUR_2).equals("")) {
				uur2 = box.getString(UUR_2);
			} else {
				uur2 = "N";
			}
			if (!box.getString(UUR_1).equals("")) {
				uur1 = box.getString(UUR_1);
			} else {
				uur1 = "N";
			}*/
		/*	if (!box.getString(UUL_8).equals("")) {
				uul8 = box.getString(UUL_8);
			} else {
				uul8 = "N";
			}
			if (!box.getString(UUL_7).equals("")) {
				uul7 = box.getString(UUL_7);
			} else {
				uul7 = "N";
			}
			if (!box.getString(UUL_6).equals("")) {
				uul6 = box.getString(UUL_6);
			} else {
				uul6 = "N";
			}*/
			if (!box.getString(UUL_5).equals("")) {
				uul5 = box.getString(UUL_5);
			} else {
				uul5 = "N";
			}
			if (!box.getString(UUL_4).equals("")) {
				uul4 = box.getString(UUL_4);
			} else {
				uul4 = "N";
			}
			if (!box.getString(UUL_3).equals("")) {
				uul3 = box.getString(UUL_3);
			} else {
				uul3 = "N";
			}
			if (!box.getString(UUL_2).equals("")) {
				uul2 = box.getString(UUL_2);
			} else {
				uul2 = "N";
			}
			if (!box.getString(UUL_1).equals("")) {
				uul1 = box.getString(UUL_1);
			} else {
				uul1 = "N";
			}
			if (!box.getString(ULR_8).equals("")) {
				ulr8 = box.getString(ULR_8);
			} else {
				ulr8 = "N";
			}
			if (!box.getString(ULR_7).equals("")) {
				ulr7 = box.getString(ULR_7);
			} else {
				ulr7 = "N";
			}
			if (!box.getString(ULR_6).equals("")) {
				ulr6 = box.getString(ULR_6);
			} else {
				ulr6 = "N";
			}
			if (!box.getString(ULR_5).equals("")) {
				ulr5 = box.getString(ULR_5);
			} else {
				ulr5 = "N";
			}
			if (!box.getString(ULR_4).equals("")) {
				ulr4 = box.getString(ULR_4);
			} else {
				ulr4 = "N";
			}
		/*	if (!box.getString(ULR_3).equals("")) {
				ulr3 = box.getString(ULR_3);
			} else {
				ulr3 = "N";
			}
			if (!box.getString(ULR_2).equals("")) {
				ulr2 = box.getString(ULR_2);
			} else {
				ulr2 = "N";
			}
			if (!box.getString(ULR_1).equals("")) {
				ulr1 = box.getString(ULR_1);
			} else {
				ulr1 = "N";
			}*/
		/*	if (!box.getString(ULL_8).equals("")) {
				ull8 = box.getString(ULL_8);
			} else {
				ull8 = "N";
			}
			if (!box.getString(ULL_7).equals("")) {
				ull7 = box.getString(ULL_7);
			} else {
				ull7 = "N";
			}
			if (!box.getString(ULL_6).equals("")) {
				ull6 = box.getString(ULL_6);
			} else {
				ull6 = "N";
			}*/
			if (!box.getString(ULL_5).equals("")) {
				ull5 = box.getString(ULL_5);
			} else {
				ull5 = "N";
			}
			if (!box.getString(ULL_4).equals("")) {
				ull4 = box.getString(ULL_4);
			} else {
				ull4 = "N";
			}
			if (!box.getString(ULL_3).equals("")) {
				ull3 = box.getString(ULL_3);
			} else {
				ull3 = "N";
			}
			if (!box.getString(ULL_2).equals("")) {
				ull2 = box.getString(ULL_2);
			} else {
				ull2 = "N";
			}
			if (!box.getString(ULL_1).equals("")) {
				ull1 = box.getString(ULL_1);
			} else {
				ull1 = "N";
			}
			String sur8 = "";
			String sur7 = "";
			String sur6 = "";
			String sur5 = "";
			String sur4 = "";
			String sur3 = "";
			String sur2 = "";
			String sur1 = "";
			String sul8 = "";
			String sul7 = "";
			String sul6 = "";
			String sul5 = "";
			String sul4 = "";
			String sul3 = "";
			String sul2 = "";
			String sul1 = "";
			String slr8 = "";
			String slr7 = "";
			String slr6 = "";
			String slr5 = "";
			String slr4 = "";
			String slr3 = "";
			String slr2 = "";
			String slr1 = "";
			String sll8 = "";
			String sll7 = "";
			String sll6 = "";

			String sll5 = "";
			String sll4 = "";
			String sll3 = "";
			String sll2 = "";
			String sll1 = "";
			sur8 = mur8 + "" + uur8;
			sur7 = mur7 + "" + uur7;
			sur6 = mur6 + "" + uur6;
			sur5 = mur5 + "" + uur5;
			sur4 = mur4 + "" + uur4;
			sur3 = mur3 + "" + uur3;
			sur2 = mur2 + "" + uur2;
			sur1 = mur1 + "" + uur1;
			sul8 = mul8 + "" + uul8;
			sul7 = mul7 + "" + uul7;
			sul6 = mul6 + "" + uul6;
			sul5 = mul5 + "" + uul5;
			sul4 = mul4 + "" + uul4;
			sul3 = mul3 + "" + uul3;
			sul2 = mul2 + "" + uul2;
			sul1 = mul1 + "" + uul1;
			slr8 = mlr8 + "" + ulr8;
			slr7 = mlr7 + "" + ulr7;
			slr6 = mlr6 + "" + ulr6;
			slr5 = mlr5 + "" + ulr5;
			slr4 = mlr4 + "" + ulr4;
			slr3 = mlr3 + "" + ulr3;
			slr2 = mlr2 + "" + ulr2;
			slr1 = mlr1 + "" + ulr1;
			sll8 = mll8 + "" + ull8;
			sll7 = mll7 + "" + ull7;
			sll6 = mll6 + "" + ull6;
			sll5 = mll5 + "" + ull5;
			sll4 = mll4 + "" + ull4;
			sll3 = mll3 + "" + ull3;
			sll2 = mll2 + "" + ull2;
			sll1 = mll1 + "" + ull1;
			

			opdPatientDetails.setUR1(sur1);
			opdPatientDetails.setUR2(sur2);
			opdPatientDetails.setUR3(sur3);
			opdPatientDetails.setUR4(sur4);
			opdPatientDetails.setUR5(sur5);
			opdPatientDetails.setUR6(sur6);
			opdPatientDetails.setUR7(sur7);
			opdPatientDetails.setUR8(sur8);

			opdPatientDetails.setUL1(sul1);
			opdPatientDetails.setUL2(sul2);
			opdPatientDetails.setUL3(sul3);
			opdPatientDetails.setUL4(sul4);
			opdPatientDetails.setUL5(sul5);
			opdPatientDetails.setUL6(sul6);
			opdPatientDetails.setUL7(sul7);
			opdPatientDetails.setUL8(sul8);

			opdPatientDetails.setLR1(slr1);
			opdPatientDetails.setLR2(slr2);
			opdPatientDetails.setLR3(slr3);
			opdPatientDetails.setLR4(slr4);
			opdPatientDetails.setLR5(slr5);
			opdPatientDetails.setLR6(slr6);
			opdPatientDetails.setLR7(slr7);
			opdPatientDetails.setLR8(slr8);

			opdPatientDetails.setLL1(sll1);
			opdPatientDetails.setLL2(sll2);
			opdPatientDetails.setLL3(sll3);
			opdPatientDetails.setLL4(sll4);
			opdPatientDetails.setLL5(sll5);
			opdPatientDetails.setLL6(sll6);
			opdPatientDetails.setLL7(sll7);
			opdPatientDetails.setLL8(sll8);
		}
		
			
			//code for pregnancy
			if(box.getString("pregnancy")!=null && box.getString("pregnancy").equalsIgnoreCase("y") )
			{
				
				opdPatientDetails.setPregnancy("y");
				opdPatientDetails.setLmpDate(HMSUtil.convertStringTypeDateToDateType(box.getString("lmp_date")));
				opdPatientDetails.setEddDate(HMSUtil.convertStringTypeDateToDateType(box.getString("edd")));
				opdPatientDetails.setCurrentEdd(HMSUtil.convertStringTypeDateToDateType(box.getString("currentEdd")));
				opdPatientDetails.setOperationPeriodToday(box.getString("operation_period_today"));
			}
			
			//hbt.save(opdPatientDetails);
			hbt.update(opdPatientDetails);
	
			int opdPatientDetailsId=0;
			opdPatientDetailsId=opdPatientDetails.getId();
	
			returnMap.put("opdPatientDetailsId", opdPatientDetailsId);
			//create visit for internal referral
			
			if(referral==1 && mapForDS.get("referTo") != null && (mapForDS.get("referTo").equals("Internal") || mapForDS.get("referTo").equals("Both")))
			{
				Visit referralVisit = null;
				int hiddenValueRefer = box.getInt("hiddenValueRefer");
				
				OpdPatientDetails opdPDetails = (OpdPatientDetails)hbt.load(OpdPatientDetails.class, opdPatientDetailsId);
				 Patient patient = (Patient)session.load(Patient.class, hinId);
					opdPDetails.setReferredStatus("r");
					hbt.update(opdPDetails);	
					
				 for(int i=1;i<=hiddenValueRefer;i++){
					 if(box.getInt("refereddept"+i)!=0 && box.getInt("refereddoctor"+i)!=0 ){
				 	referralVisit =new Visit();
				    referralVisit.setReportingFor("OPD");						
				    referralVisit.setDepartment(new MasDepartment(box.getInt("refereddept"+i)));
					referralVisit.setDoctor( new MasEmployee(box.getInt("refereddoctor"+i)));
					referralVisit.setSession(new MasSession(1));
					referralVisit.setTokenNo(0);
					referralVisit.setVisitStatus("r");
						
					referralVisit.setHospital(masHospitalObj);
					referralVisit.setAddEditBy(user);
						/*referralVisit.setAge(age);*/
					referralVisit.setVisitDate(consultationDateToInsert);
					referralVisit.setVisitTime(consultationTime);
					referralVisit.setAddEditDate(consultationDateToInsert);
					referralVisit.setAddEditTime(consultationTime);
					referralVisit.setVisitTime(consultationTime);						
					referralVisit.setStatus("y"); 
					referralVisit.setAppointmentType("D");
					referralVisit.setPriority(referralPriority);					
					referralVisit.setHin(patient);		
					    
						int currentVisitNo = patient.getCurrentVisitNo()+1;
						patient.setCurrentVisitNo(currentVisitNo);
						referralVisit.setVisitNo(currentVisitNo);
						
						referralVisit.setTokenStatus("n");
						referralVisit.setRefereeOpdPatientdetailsId(opdPatientDetails);
						hbt.saveOrUpdate(patient);
						hbt.save(referralVisit);
				 }	}	
						
					
				
			}
			
			
			
	/*		if(referral==1 && mapForDS.get("referTo") != null && mapForDS.get("referTo").equals("Internal"))
			{
				Visit referralVisit = new Visit();
				OpdPatientDetails opdPDetails = (OpdPatientDetails)hbt.load(OpdPatientDetails.class, opdPatientDetailsId);
				
				 Patient patient = (Patient)session.load(Patient.class, hinId);
				
				            referralVisit.setReportingFor("OPD");						
							referralVisit.setDepartment(opdPatientDetails.getReferredDeptInt());
							referralVisit.setDoctor( new MasEmployee(referredByDoctorId));
							referralVisit.setSession(new MasSession(1));
							referralVisit.setTokenNo(0);
							referralVisit.setVisitStatus("r");
						
						referralVisit.setHospital(masHospitalObj);
						referralVisit.setAddEditBy(user);
						referralVisit.setAge(age);
						referralVisit.setVisitDate(consultationDateToInsert);
						referralVisit.setVisitTime(consultationTime);
						referralVisit.setAddEditDate(consultationDateToInsert);
						referralVisit.setAddEditTime(consultationTime);
						referralVisit.setVisitTime(consultationTime);						
						referralVisit.setStatus("y"); 
						referralVisit.setAppointmentType("D");
						referralVisit.setPriority(referralPriority);					
						referralVisit.setHin(patient);		
					    
						int currentVisitNo = patient.getCurrentVisitNo()+1;
						patient.setCurrentVisitNo(currentVisitNo);
						referralVisit.setVisitNo(currentVisitNo);
						
						referralVisit.setTokenStatus("n");
						
						hbt.saveOrUpdate(patient);
						hbt.save(referralVisit);
						opdPDetails.setReferredStatus("r");
						opdPDetails.setReferralVisit(referralVisit);
						hbt.update(opdPDetails);	
				
			}*/
			
			//ophthal details	
			String departmentCodeForEye = HMSUtil.getProperties("adt.properties", "departmentCodeForEye");
			if(visitsave.getDepartment().getDepartmentCode().equalsIgnoreCase(departmentCodeForEye))
					{
			
				
				OpdOphthalmologyDetails opdOphthalDetails =  null;
				
				if(box.get("opdOphthalId")!=null && box.getInt("opdOphthalId")!=0){
					opdOphthalDetails = (OpdOphthalmologyDetails)hbt.load(OpdOphthalmologyDetails.class, box.getInt("opdOphthalId"));
				
			
					mapForDS.put("opdOphthalDetails", opdOphthalDetails);
				      opdOphthalDetails= getOpdOphthalObjectToSave(mapForDS);
				
				//opdOphthalDetails.setVisit(new Visit(visitId));
				opdOphthalDetails.setConsultationDate( HMSUtil
				.convertStringTypeDateToDateType(consultationDate));
				/*opdOphthalDetails.setOpdDate( HMSUtil
						.convertStringTypeDateToDateType(consultationDate));*/
				opdOphthalDetails.setConsultationTime(consultationTime);
					hbt.update(opdOphthalDetails);
				
				
				  }
			   }
			//end
			
			
			//OBG Details
			
			String departmentCodeForOBG = HMSUtil.getProperties("adt.properties", "departmentCodeForOBG");
			if(visitsave.getDepartment().getDepartmentCode().equalsIgnoreCase(departmentCodeForOBG))
					{
				if(opdPatientDetails.getObgDetails()!=null)
				{
				int obgId =((ObgDetails)(opdPatientDetails.getObgDetails().toArray()[0])).getId();
				ObgDetails obgDt = (ObgDetails)hbt.load(ObgDetails.class, obgId);
				obgDt.setObstreticHistory(box.getString("obg_history"));
				if(box.get("obstetric_score_g")!=null && !box.get("obstetric_score_g").isEmpty())
				obgDt.setObstreticScoreG(box.getInt("obstetric_score_g"));
				if(box.get("obstetric_score_p")!=null && !box.get("obstetric_score_p").isEmpty())
					obgDt.setObstreticScoreP(box.getInt("obstetric_score_p"));
				if(box.get("obstetric_score_a")!=null && !box.get("obstetric_score_a").isEmpty())
					obgDt.setObstreticScoreA(box.getInt("obstetric_score_a"));
				if(box.get("obstetric_score_l")!=null && !box.get("obstetric_score_l").isEmpty())
					obgDt.setObstreticScoreL(box.getInt("obstetric_score_l"));
				obgDt.setConception(box.getString("conception"));
				obgDt.setMarriedLife(box.getString("total_marriage_year"));
				obgDt.setConsanGuinity(box.getString("consan"));
				obgDt.setBooked(box.getString("booked"));
				obgDt.setImmunised(box.getString("immunised"));
				obgDt.setTrimisters(box.getString("trimisters"));
				obgDt.setGc(box.getString("gyngc"));
				obgDt.setPa(box.getString("gynPa"));
				obgDt.setPe(box.getString("gynPe"));
				obgDt.setFhr(box.getString("gynFhr"));
				if(box.get("tt")!=null && !box.get("tt").isEmpty())
					obgDt.setTt(box.getInt("tt")); 
				obgDt.setPresentation(box.getString("gynPresentation"));
				obgDt.setPv(box.getString("gynPv"));
				if(!box.getString("gyntt").isEmpty())
				obgDt.setTt(box.getInt("gyntt"));
				obgDt.setSpecify(box.getString("specify"));
				if(box.get("menarche_age")!=null && !box.get("").isEmpty())
				obgDt.setAgeOfMenarche(box.getInt("menarche_age"));
				obgDt.setCycles(box.getString("cycles"));
				obgDt.setCycleText(box.getString("cycle_text"));
				if(box.get("range")!=null && !box.get("range").isEmpty())
				obgDt.setRangeValue(box.getString("range"));
				obgDt.setRangeInterval(box.getString("range_interval"));
				if(box.get("flow")!=null && !box.get("flow").isEmpty())
				obgDt.setFlow(box.getString("flow"));
				
				if(!box.get("mestrual_pause").isEmpty())
					obgDt.setMenstrualPause(box.getString("mestrual_pause"));
				if(!box.get("obg_remarks").isEmpty())
					obgDt.setObgRemarks(box.getString("obg_remarks"));
				if(!box.get("gyn_sterilisation").isEmpty())
					obgDt.setSterilisation(box.getString("gyn_sterilisation"));
				if(!box.get("Pap_smear").isEmpty())
					obgDt.setPapSmear(box.getString("Pap_smear"));
				
				obgDt.setRespiratorySystem(box.getString("respiratory_system"));
				obgDt.setBreadthAddedSounds(box.getString("breath_sound"));
				obgDt.setS1(box.getString("s1"));
				obgDt.setS2(box.getString("s2"));
				obgDt.setMurmurs(box.getString("murmurs"));
				obgDt.setClinicalHsirory(box.getString("clinical_history"));
				obgDt.setPersonalHistory(box.getString("personal_history"));
				obgDt.setSurgicalHistory(box.getString("surgery_history"));
			
				if(box.get("uterus_height")!=null && !box.get("uterus_height").isEmpty())
				obgDt.setHeightOfUterus(box.getString("uterus_height"));
				obgDt.setLowerPole(box.getString("lower_pole"));
				obgDt.setLowerGrip(box.getString("lateral_grip"));
				if(box.get("heart_rate_regular")!=null && !box.get("heart_rate_regular").isEmpty())
				obgDt.setHeartRateRegular(box.getInt("heart_rate_regular"));
				if(box.get("heart_rate_regular")!=null && !box.get("heart_rate_regular").isEmpty())
				obgDt.setHeartRateAbsent(box.getInt("heart_rate_regular"));
				if(box.get("cervix_dilatation")!=null && !box.get("cervix_dilatation").isEmpty())
				obgDt.setDilatationOfCervix(box.getInt("cervix_dilatation"));
				if(box.get("cervix_effacement")!=null && !box.get("cervix_effacement").isEmpty())
				obgDt.setEffacementOfCervix(box.getString("cervix_effacement"));
				obgDt.setMembrane(box.getString("membrane"));
				obgDt.setLiquor(box.getString("liquor"));
				obgDt.setConsistencyOfCervix(box.getString("cervix_consistency"));
				obgDt.setPositionOfCervix(box.getString("cervix_position"));
				if(box.get("cervix_length")!=null && !box.get("cervix_length").isEmpty())
				obgDt.setLengthOfCervix(box.getInt("cervix_length"));
				if(box.get("station")!=null && !box.get("station").isEmpty())
				 obgDt.setStationOfPresentingPart(box.getInt("station"));
				obgDt.setHead(box.getString("head"));
				obgDt.setPelvis(box.getString("pelvis"));
				obgDt.setHopi(box.getString("hopi"));
				obgDt.setOtherComplaints(box.getString("other_complaint"));
				obgDt.setOpdPatientDetails(opdPatientDetails);
				obgDt.setPalpation(box.getString("obg_palpation"));
//Gynology
				
				obgDt.setDysmenorrhea(box.getString("dysmenorrhea"));
				if(!box.getString("last_menstrual").isEmpty())
				obgDt.setLastMenstrual(HMSUtil.convertStringTypeDateToDateType(box.getString("last_menstrual")));
				obgDt.setMenstrualPattern1(box.getString("menstrual_pattern1"));
				obgDt.setMenstrualPattern2(box.getString("menstrual_pattern2"));
				obgDt.setGynObstetricHistory(box.getString("gyn_obstetric_history"));
				obgDt.setGynAbdomenInspection(box.getString("gyn_abdomen_inspection"));
				obgDt.setGynPalpation(box.getString("gyn_palpation"));
				obgDt.setGynLocalExamination(box.getString("gyn_local_examination"));
				obgDt.setGynBimanualExamination(box.getString("gyn_bimanual_examination"));
				obgDt.setGynPerSpeculum(box.getString("gyn_per_speculum"));
				
				if(box.get("gyn_menarche_age")!=null && !box.get("gyn_menarche_age").isEmpty())
					 obgDt.setGynAgeOfMenarche(box.getInt("gyn_menarche_age"));
				
				if(box.get("gyn_flow")!=null && !box.get("gyn_flow").isEmpty())
					 obgDt.setGynFlow(box.getString("gyn_flow"));
			
				
				/*obgDt.setInspectionAbdomen(box.getString("inspection_abdomen"));
				obgDt.setInspectionUmbilicus(box.getString("inspection_umbilicus"));
				obgDt.setInspectionHernia(box.getString("inspection_hernia"));
				obgDt.setInspectionScar(box.getString("inspection_scar"));
				obgDt.setMassPalpable(box.getString("mass_palpable"));
				obgDt.setMassSize(box.getString("mass_size"));
				obgDt.setMassShape(box.getString("mass_shape"));
				obgDt.setMassPosition(box.getString("mass_position"));
				obgDt.setMassConsistency(box.getString("mass_consistency"));
				obgDt.setMassTemp(box.getString("mass_temp"));
				obgDt.setAsicitis(box.getString("asicitis"));
				obgDt.setExternalGenitalia(box.getString("external_genitalia"));
				obgDt.setExternalGenitaliaOther(box.getString("external_genitalia_other"));
				obgDt.setSpeculumVagina(box.getString("speculum_vagina"));
				obgDt.setSpeculumDischarge(box.getString("speculum_discharge"));
				obgDt.setSpeculumCervix(box.getString("speculum_cervix"));
				obgDt.setSpeculumDecent(box.getString("speculum_decent"));
				obgDt.setUterusSize(box.getString("uterus_size"));
				obgDt.setUterusForness(box.getString("uterus_forness"));
				obgDt.setUterusCervicalMovement(box.getString("uterus_cervical_movement"));*/
				
				hbt.update(obgDt);
				}
					}
			//end
			
			
			DentalTreatmentHeader dentalTreatmentHeader = new DentalTreatmentHeader();
			//System.out.println("dentalCount======"+box.getInt("dentalCount"));
		  if(box.getInt("dentalCount") != 0){
			   patientObj = new Patient();
			patientObj.setId(box.getInt("hinId"));
			dentalTreatmentHeader.setHin(patientObj);
		
			
			masHospitalObj.setId(box.getInt("hospitalId"));
			dentalTreatmentHeader.setHospital(masHospitalObj);
			
			
			if(box.getInt("visitId")!=0){
				Visit visitObj1 = new Visit();
				visitObj1.setId(visitId);
				dentalTreatmentHeader.setVisit(visitObj1);
			}
			if(box.getInt("deptId")!=0){
				MasDepartment madDept =  new MasDepartment();
				madDept.setId(departmentId);
				dentalTreatmentHeader.setDepartment(madDept);
			}
			dentalTreatmentHeader.setTreatmentDate(HMSUtil.convertStringTypeDateToDateType(currentDate));
			dentalTreatmentHeader.setTreatmentTime(consultationTime);
			dentalTreatmentHeader.setOpdPatientDetail(opdPatientDetails);
			dentalTreatmentHeader.setStatus("y");
			hbt.save(dentalTreatmentHeader);
			for (int j = 1; j <= box.getInt("dentalCount"); j++) {
				if(!box.getString("teeth"+j).equals("")){
					DentalTreatmentDetail dentalTreatmentDetail = new DentalTreatmentDetail();
					if(!box.getString("teeth"+j).equals("")){
						dentalTreatmentDetail.setTeeth(box.getString("teeth"+j));
					}
					if(!box.getString("dentalTreatment"+j).equals("")){
						dentalTreatmentDetail.setTreatment(box.getString("dentalTreatment"+j));
					}
					if(!box.getString("dtc"+j).equals("")){
						dentalTreatmentDetail.setDtc(box.getString("dtc"+j));
					}
					if(!box.getString("remarks"+j).equals("")){
						dentalTreatmentDetail.setRemark(box.getString("remarks"+j));
					}
					dentalTreatmentDetail.setDentalTreatmentHeader(dentalTreatmentHeader);
					hbt.save(dentalTreatmentDetail);
				}
			}
		}
			
			
//end
	
			
			
		//prodcure advice
			
			/*Persisting treatment*/
			Visit visitObjToUpdate = (Visit) hbt.get(Visit.class, visitId);
			List<Integer> parkNuringIds = (List<Integer>)  mapForDS.get("parkNuringIds");
			
			
			List<String>  treatmentProcedureNameList=(List<String>)mapForDS.get("nursingprocedure");
			
			if(treatmentProcedureNameList.size() >0)
			{
			
			List<Integer> treatmentFrequencyList=(List<Integer>)mapForDS.get("nursingfrequency");
			List<Integer> treatmentNoOfDaysList=(List<Integer>)mapForDS.get("nursingdays");
			List<String>  treatmentRemarkList=(List<String>)mapForDS.get("nursingremarks");
			List<String>  nursingTypeList=(List<String>)mapForDS.get("nursingTypeList");
			
			
			//ProcedureHeader procedureHeader=null;
			
			ProcedureHeader procedureHeaderForProcedure=null;
			ProcedureHeader procedureHeaderForPhysiotherapy=null;
		String NursingTypeCodeForProcedure = HMSUtil.getProperties("adt.properties", "NursingTypeCodeForProcedure");
		String NursingTypeCodeForPhysiotherapy = HMSUtil.getProperties("adt.properties", "NursingTypeCodeForPhysiotherapy");
		
	/*		if(procedureHeaderId!=null && !procedureHeaderId.equals(0)){
				procedureHeader = (ProcedureHeader) hbt.load(ProcedureHeader.class, procedureHeaderId);
			}else{
				procedureHeader = new ProcedureHeader();
			}	
	
			procedureHeader.setHin(new Patient(hinId));
			procedureHeader.setHospital(new MasHospital(hospitalId));
			procedureHeader.setLastChgBy(user);
			procedureHeader.setLastChgDate(new Date());
			procedureHeader.setLastChgTime(consultationTime);
			procedureHeader.setRequisitionDate(new Date());
			procedureHeader.setOpdPatientDetails(opdPatientDetails);
			procedureHeader.setVisit(visitObj);
			procedureHeader.setStatus("n");*/
			
	
		for(String nt:nursingTypeList){
			if(nt!=null)
			{
				if(nt.equalsIgnoreCase(NursingTypeCodeForProcedure) && procedureHeaderForProcedure==null)
					
				{
					if( procedureHeaderId!=0){
						procedureHeaderForProcedure = (ProcedureHeader) hbt.load(ProcedureHeader.class, procedureHeaderId);
					}else{
						procedureHeaderForProcedure = new ProcedureHeader();
					}	
					procedureHeaderForProcedure.setHin(new Patient(hinId));
					procedureHeaderForProcedure.setHospital(new MasHospital(hospitalId));
					procedureHeaderForProcedure.setLastChgBy(user);
					procedureHeaderForProcedure.setLastChgDate(new Date());
					procedureHeaderForProcedure.setLastChgTime(consultationTime);
					procedureHeaderForProcedure.setRequisitionDate(new Date());
					procedureHeaderForProcedure.setOpdPatientDetails(opdPatientDetails);
					procedureHeaderForProcedure.setVisit(visitObj);
					procedureHeaderForProcedure.setStatus("n");
					procedureHeaderForProcedure.setProcedureType(nt);
				}
				else if(nt.equalsIgnoreCase(NursingTypeCodeForPhysiotherapy) && procedureHeaderForPhysiotherapy==null)
				{   
					if(physioHeaderId!=0){
						procedureHeaderForPhysiotherapy = (ProcedureHeader) hbt.load(ProcedureHeader.class, physioHeaderId);
					}else{
						procedureHeaderForPhysiotherapy = new ProcedureHeader();
					}	
					//procedureHeaderForPhysiotherapy = new ProcedureHeader();
					procedureHeaderForPhysiotherapy.setHin(new Patient(hinId));
					procedureHeaderForPhysiotherapy.setHospital(new MasHospital(hospitalId));
					procedureHeaderForPhysiotherapy.setLastChgBy(user);
					procedureHeaderForPhysiotherapy.setLastChgDate(new Date());
					procedureHeaderForPhysiotherapy.setLastChgTime(consultationTime);
					procedureHeaderForPhysiotherapy.setRequisitionDate(new Date());
					procedureHeaderForPhysiotherapy.setOpdPatientDetails(opdPatientDetails);
					procedureHeaderForPhysiotherapy.setVisit(visitObj);
					procedureHeaderForPhysiotherapy.setStatus("n");
					procedureHeaderForPhysiotherapy.setProcedureType(nt);
				}
					
			}
		}
			
			
			if(procedureHeaderForProcedure!=null)
			{
				
				if(procedureHeaderId!=0){
					hbt.update(procedureHeaderForProcedure);
				}else{
					hbt.save(procedureHeaderForProcedure);
				}
				
			}
			
			if(procedureHeaderForPhysiotherapy!=null)
			{
				
				if(physioHeaderId!=0){
					hbt.update(procedureHeaderForPhysiotherapy);
				}else{
					hbt.save(procedureHeaderForPhysiotherapy);
				}
				
				
			}
			//opdPatientData.put("ProcedureHeader", procedureHeader);
			List<Integer> completedProcDtIdList = new ArrayList<Integer>();
			List<Integer> completedNurIdList = new ArrayList<Integer>();
			
			if(procedureHeaderId!=0 || physioHeaderId!=0)
			{
			
				 List<ProcedureDetails> completedProcList = session.createCriteria(ProcedureDetails.class)
						.createAlias("ProcedureHeader", "phd")
						.add(Restrictions.eq("Status", "y").ignoreCase())
	                  .add(Restrictions.or(Restrictions.eq("phd.Id", procedureHeaderId), Restrictions.eq("phd.Id", physioHeaderId)) )
	                  .list();
				 
	         for(ProcedureDetails dgdt : completedProcList)   
	         {
	        	 completedProcDtIdList.add(dgdt.getId());
	        	 completedNurIdList.add(dgdt.getNursingCare().getId());
	         }
			}
			
			
			
			int index=0;
			List<Integer> totaldgDtIdList = completedProcDtIdList;
			for(String strId:treatmentProcedureNameList)
			{
				/*int frequencyCount = 0;
				if(treatmentFrequencyList!=null && treatmentFrequencyList.size()>index)
					
				{
					MasFrequency fr= new MasFrequency();
					fr.setId(treatmentFrequencyList.get(index));
					frequencyCount = fr.getFrequencyCount().intValue();
					
				}
				*/
				Integer procedureDetailsId=parkNuringIds.get(index);
				if(!completedProcDtIdList.contains(procedureDetailsId))
				{
				
					ProcedureDetails procedureDetails=null;
				
				if(procedureDetailsId!=null && !procedureDetailsId.equals(0)){
					procedureDetails = (ProcedureDetails) hbt.load(ProcedureDetails.class, procedureDetailsId);
				}else{
					procedureDetails = new ProcedureDetails();
				}

					
				Integer nursingId=Integer.parseInt(strId);
				MasNursingCare care=(MasNursingCare)session.load(MasNursingCare.class,nursingId);
				procedureDetails.setNursingCare(care);
				//procedureDetails.setProcedureHeader(procedureHeader);
				if(nursingTypeList.get(index).equalsIgnoreCase(NursingTypeCodeForPhysiotherapy))
    				procedureDetails.setProcedureHeader(procedureHeaderForPhysiotherapy);
				else if(nursingTypeList.get(index).equalsIgnoreCase(NursingTypeCodeForProcedure))
    				procedureDetails.setProcedureHeader(procedureHeaderForProcedure);
				procedureDetails.setStatus("n");
				
				// Add by Vinay
				if(treatmentFrequencyList!=null && treatmentFrequencyList.size()>index)
				{
					MasFrequency fr= new MasFrequency();
					fr.setId(treatmentFrequencyList.get(index));
					procedureDetails.setFrequency(fr);
				}
				
				if(treatmentNoOfDaysList!=null && treatmentNoOfDaysList.size()>index)
				{
					procedureDetails.setNoOfDays(treatmentNoOfDaysList.get(index));
				}
				
				procedureDetails.setFinalProcedureStatus("n");
				procedureDetails.setRemarks("");
				procedureDetails.setAppointmentDate(new Date());
				if(treatmentRemarkList!=null && treatmentRemarkList.size()>index)
				procedureDetails.setRemarks(treatmentRemarkList.get(index));
				
				if(procedureDetailsId!=null && !procedureDetailsId.equals(0)){
					hbt.update(procedureDetails);
					//System.out.println("index update"+index +" procedureDetails"+procedureDetails.getProcedureHeader().getProcedureType() +" ssf"+treatmentNoOfDaysList.get(index));
				}else{
					hbt.save(procedureDetails);
				}
				
				
				
				
				totaldgDtIdList.add(procedureDetails.getId());
			  } 
				index++;
			}//end for
			
			totaldgDtIdList.add(0);
			completedNurIdList.add(0);
			
			//System.out.println("completedNurIdList "+completedNurIdList);
			List<ProcedureDetails> deleteproDtList = session.createCriteria(ProcedureDetails.class)
					//.add( Restrictions.not( Restrictions.in("Id", icdIdList)))
					.createAlias("NursingCare", "nur")
					.add(Restrictions.eq("ProcedureHeader.Id", procedureHeaderId ))
					//.add(Restrictions.not(Restrictions.in("Id", totaldgDtIdList)))
					//.add(Restrictions.not(Restrictions.in("nur.Id", completedNurIdList)))
					.add(Restrictions.and(Restrictions.not(Restrictions.in("nur.Id", completedNurIdList)), Restrictions.not(Restrictions.in("Id", totaldgDtIdList))))
					//.add(Restrictions.not(Restrictions.in("NursingCare.Id", completedNurIdList)))
					
					.list(); 
			//System.out.println("size "+icdIdList.size() +" opdpatientDetailId"+opdpatientDetailId );
			//System.out.println("deleteDisCodeIdList "+deleteDisCodeIdList.size());		   
		if(deleteproDtList.size() >0)
			{
				hbt.deleteAll(deleteproDtList);
			}
			
			}
	/*		if(procedureHeaderId!=0){
				procedureHeader = (ProcedureHeader)hbt.load(ProcedureHeader.class, procedureHeaderId);
				procedureHeader.setOpdPatientDetails(opdPatientDetails);
				procedureHeader.setLastChgTime(consultationTime);
				hbt.update(procedureHeader);
				
			}*/
		/*	//therapy scheduling
			 List<String>  therapyNameList=(List<String>)mapForDS.get("therapyNameList");
			 if(visitsave.getDepartment().getDepartmentCode().equalsIgnoreCase(departmentCodeForPhychiatrist) || visitsave.getDepartment().getDepartmentCode().equalsIgnoreCase(dentalDepartmentCode))
					{int therapyHeaderId=0;
					if(mapForDS.get("therapyHeaderId")!=null)
						therapyHeaderId =(Integer)mapForDS.get("therapyHeaderId");
					String appointmentDate =(String)mapForDS.get("appointmentDate");
					String appointmentTime =(String)mapForDS.get("appointmentTime"); 
					if(therapyNameList.size()>0)	
					{
					List<Integer> therapyIds = (List<Integer>)  mapForDS.get("therapyIds");
					List<String>  therapyRemarkList=(List<String>)mapForDS.get("therapyRemarkList");
						TherapyHeader therapyHeader=null;
						if(therapyHeaderId!=0)
							therapyHeader = (TherapyHeader) hbt.load(TherapyHeader.class, (Integer)mapForDS.get("therapyHeaderId"));
						else{
						    therapyHeader = new TherapyHeader();
						therapyHeader.setHin(new Patient(hinId));
						therapyHeader.setHospital(new MasHospital(hospitalId));
						therapyHeader.setLastChgBy(user);
						therapyHeader.setLastChgDate(new Date());
						therapyHeader.setLastChgTime(consultationTime);
						therapyHeader.setRequisitionDate(new Date());
						therapyHeader.setOpdPatientDetails(opdPatientDetails);
						therapyHeader.setVisit(visitObj);
						therapyHeader.setStatus("n");
						}
						therapyHeader.setProcedureDate(HMSUtil.convertStringTypeDateToDateType(appointmentDate));
						therapyHeader.setProcedureTime(appointmentTime);
						if(therapyHeaderId!=0){
							hbt.update(therapyHeader);
						}else{
							hbt.save(therapyHeader);
						}
						int index=0;
					
						for(String strId:therapyNameList)
						{
							for(int j=1;j<=2;j++)
							{
							TherapyDetails therapyDetails=new TherapyDetails();
							Integer procedureDetailsId=therapyIds.get(index);
				
							Integer nursingId=Integer.parseInt(strId);
							MasNursingCare care=(MasNursingCare)session.load(MasNursingCare.class,nursingId);
							therapyDetails.setProcedure(care);
							therapyDetails.setProcedureHeader(therapyHeader);
							
							if(j==1)
							{
								if(therapyRemarkList!=null && therapyRemarkList.size()>index)
									  therapyDetails.setTherapyRemarks(therapyRemarkList.get(index));
								therapyDetails.setAppointmentDate(HMSUtil.convertStringTypeDateToDateType(consultationDate));
								therapyDetails.setAppointmentTime(consultationTime);
								therapyDetails.setProcedureDate(HMSUtil.convertStringTypeDateToDateType(consultationDate));
								therapyDetails.setProcedureTime(consultationTime);
								therapyDetails.setStatus("y");
								
								
							}
							else
							{
								therapyDetails.setAppointmentDate(HMSUtil.convertStringTypeDateToDateType(appointmentDate));
								therapyDetails.setAppointmentTime(appointmentDate);
								therapyDetails.setStatus("n");
								
							}
				
							therapyDetails.setFinalProcedureStatus("n");
							hbt.save(therapyDetails);
							
						  
						
							}
							   index++;
						}
						if(procedureHeaderId!=0){
							therapyHeader = (TherapyHeader)hbt.load(TherapyHeader.class, procedureHeaderId);
							therapyHeader.setOpdPatientDetails(opdPatientDetails);
							therapyHeader.setLastChgTime(consultationTime);
							hbt.update(therapyHeader);
							
						}
					}//if for phychiatrist n dental procedure 
					else if(therapyHeaderId!=0)
					{
						TherapyHeader therapyHeader = (TherapyHeader) hbt.load(TherapyHeader.class, (Integer)mapForDS.get("therapyHeaderId"));
						
						therapyHeader.setProcedureDate(HMSUtil.convertStringTypeDateToDateType(appointmentDate));
						therapyHeader.setProcedureTime(appointmentDate);
						hbt.update(therapyHeader);
						
						List <TherapyDetails> thrDtList = session.createCriteria(TherapyDetails.class).createAlias("ProcedureHeader", "ThrHd")
								.add(Restrictions.eq("ThrHd.Id", therapyHeaderId)).list();
						for( TherapyDetails trDt:thrDtList){
							trDt.setProcedureDate(HMSUtil.convertStringTypeDateToDateType(appointmentDate));
							trDt.setProcedureTime(appointmentDate);
							trDt.setAppointmentDate(HMSUtil.convertStringTypeDateToDateType(appointmentDate));
							trDt.setAppointmentTime(appointmentDate);
							hbt.update(trDt);
						}
								
								  
					}
					
				}
			
			//end therapy
*/			
			
			//therapy scheduling
			 List<String>  therapyNameList=(List<String>)mapForDS.get("therapyNameList");
				if(therapyNameList.size()>0)	
					{
					List<Integer> therapyIds = (List<Integer>)  mapForDS.get("therapyIds");
					List<String>  therapyRemarkList=(List<String>)mapForDS.get("therapyRemarkList");
					List<String>  therapyAppointmentStatusList=(List<String>)mapForDS.get("therapyAppointmentStatusList");
					List<String>  therapyAppointmentDateList=(List<String>)mapForDS.get("therapyAppointmentDateList");
					List<String>  therapyAppointmentTimeList=(List<String>)mapForDS.get("therapyAppointmentTimeList");
					List<String>  teethTreatmentList=(List<String>)mapForDS.get("teethTreatmentList");
					int therapyHeaderId=0;
					if(mapForDS.get("therapyHeaderId")!=null)
						therapyHeaderId =(Integer)mapForDS.get("therapyHeaderId");
					
					//String appointmentDate =(String)mapForDS.get("appointmentDate");
					//String appointmentTime =(String)mapForDS.get("appointmentTime"); 
					if(visitsave.getDepartment().getDepartmentCode().equalsIgnoreCase(departmentCodeForPhychiatrist) || visitsave.getDepartment().getDepartmentCode().equalsIgnoreCase(dentalDepartmentCode))
					{
						String headerStatus = box.getString("therapyHeaderStatus");
						TherapyHeader therapyHeader=null;
						List<Integer> dbTherapyDtIDList = new ArrayList<Integer>();
						List<Integer> completedNurIdList = new ArrayList<Integer>();
						if(therapyHeaderId!=0)
							therapyHeader = (TherapyHeader) hbt.load(TherapyHeader.class, (Integer)mapForDS.get("therapyHeaderId"));
						else{
						    therapyHeader = new TherapyHeader();
						therapyHeader.setHin(new Patient(hinId));
						therapyHeader.setHospital(new MasHospital(hospitalId));
						therapyHeader.setLastChgBy(user);
						therapyHeader.setLastChgDate(new Date());
						therapyHeader.setLastChgTime(consultationTime);
						therapyHeader.setRequisitionDate(new Date());
						therapyHeader.setOpdPatientDetails(opdPatientDetails);
						therapyHeader.setVisit(visitObj);
						therapyHeader.setStatus("y");
						}
						therapyHeader.setProcedureDate(HMSUtil.convertStringTypeDateToDateType(consultationDate));
						therapyHeader.setProcedureTime(consultationTime);
						
						if(therapyHeaderId!=0){
							hbt.update(therapyHeader);
						}else{
							hbt.save(therapyHeader);
						}
						int index=0;
						TherapyDetails therapyDetails =null;
						for(String strId:therapyNameList)
						{
							
							int procedureDetailsId=therapyIds.get(index);
						
							if(procedureDetailsId!=0)
							{
								 therapyDetails = (TherapyDetails)hbt.load(TherapyDetails.class, procedureDetailsId);
								 therapyDetails.setTeethRequiredTreatment(teethTreatmentList.get(index));
								  hbt.update(therapyDetails);
									  index++;
									  dbTherapyDtIDList.add(procedureDetailsId);
									  completedNurIdList.add(Integer.parseInt(strId));
									continue;
								
							}
							
							for(int j=1;j<=2;j++)
							{
							//TherapyDetails therapyDetails=null;
							
							//int therapyDetailsId=therapyIds.get(index);
						/*	if(therapyDetailsId!=0)
							therapyDetails = (TherapyDetails) hbt.load(TherapyDetails.class,therapyDetailsId);
							else*/
							 therapyDetails=new TherapyDetails();
				
							Integer nursingId=Integer.parseInt(strId);
							MasNursingCare care=(MasNursingCare)session.load(MasNursingCare.class,nursingId);
							therapyDetails.setProcedure(care);
							therapyDetails.setProcedureHeader(therapyHeader);
							
							if(j==1 &&(therapyAppointmentStatusList.get(index).equalsIgnoreCase("c") ||therapyAppointmentStatusList.get(index).equalsIgnoreCase("na") ))
							{
								if(therapyRemarkList!=null && therapyRemarkList.size()>index){
									  therapyDetails.setTherapyRemarks(therapyRemarkList.get(index));
								}therapyDetails.setTeethRequiredTreatment(teethTreatmentList.get(index));
								therapyDetails.setAppointmentDate(HMSUtil.convertStringTypeDateToDateType(consultationDate));
								therapyDetails.setAppointmentTime(consultationTime);
								therapyDetails.setProcedureDate(HMSUtil.convertStringTypeDateToDateType(consultationDate));
								therapyDetails.setProcedureTime(consultationTime);
								therapyDetails.setStatus("y");
								if(therapyAppointmentStatusList.get(index).equalsIgnoreCase("c"))
								{
								therapyDetails.setFinalProcedureStatus("y");
								if(headerStatus!=null &&!headerStatus.equalsIgnoreCase("n") )
								headerStatus ="y";
								}
								else
									therapyDetails.setFinalProcedureStatus("n");
										hbt.save(therapyDetails);
							}
							else if(j==2 && (therapyAppointmentStatusList.get(index).equalsIgnoreCase("na") ||therapyAppointmentStatusList.get(index).equalsIgnoreCase("a")))
							{
								therapyDetails.setStatus("n");
								therapyDetails.setFinalProcedureStatus("n");
								therapyDetails.setAppointmentDate(HMSUtil.convertStringTypeDateToDateType(therapyAppointmentDateList.get(index)));
								therapyDetails.setAppointmentTime(therapyAppointmentTimeList.get(index));
								therapyDetails.setTeethRequiredTreatment(teethTreatmentList.get(index));
								hbt.save(therapyDetails);
								headerStatus ="n";
							}
						
							dbTherapyDtIDList.add(therapyDetails.getId());
							if(therapyDetails.getProcedure()!=null)
							completedNurIdList.add(therapyDetails.getProcedure().getId());
							}
							   index++;
						}
						
						if(therapyHeader!=null){
							
							therapyHeader.setStatus(headerStatus);
							hbt.update(therapyHeader);
						}
					/*	if(procedureHeaderId!=0){
							therapyHeader = (TherapyHeader)hbt.load(TherapyHeader.class, procedureHeaderId);
							therapyHeader.setOpdPatientDetails(opdPatientDetails);
							therapyHeader.setLastChgTime(consultationTime);
							hbt.update(therapyHeader);
							
						}*/
					
				//delete therapy details and therapy header
						
					
				List<TherapyDetails> toBedeleteTherapyList = session.createCriteria(TherapyDetails.class).createAlias("ProcedureHeader", "th").add(Restrictions.eq("th.Id",therapyHeaderId))
						.createAlias("Procedure", "nur").add(Restrictions.not(Restrictions.in("Id",dbTherapyDtIDList))).add(Restrictions.not(Restrictions.in("nur.Id",completedNurIdList))).list();
				//.add(Restrictions.or(Restrictions.not(Restrictions.in("Id",dbTherapyDtIDList)),Restrictions.not(Restrictions.in("Id",completedNurIdList)))). list();	
				
				hbt.deleteAll(toBedeleteTherapyList);
					
					/*List<TherapyHeader> toBedeleteHeader = session.createCriteria(TherapyHeader.class).createAlias("TherapyDetails", "th")
															.add(Restrictions.eq("th.ProcedureHeader.Id",therapyHeaderId)).list();*/
						    
					toBedeleteTherapyList = session.createCriteria(TherapyDetails.class).add(Restrictions.eq("ProcedureHeader.Id",therapyHeaderId)).list();
				    if(toBedeleteTherapyList.size()==0)
				    {
				    	List<TherapyHeader> toBedeleteHeader = session.createCriteria(TherapyHeader.class).add(Restrictions.eq("Id",therapyHeaderId)).list();
						hbt.deleteAll(toBedeleteHeader);
				    }
				/*	
					
					
					List<InjAppointmentDetails> deleteInjectionDetailsList = session.createCriteria(InjAppointmentDetails.class)
							.add(Restrictions.in("PatientPrescriptionDetails.Id", injPrescriptionDetailsIdList))
							.list();
					if(deleteInjectionDetailsList.size()>0)
					{
						List<Integer> injDeleteHeaderIdList = new ArrayList<Integer>();
						for(InjAppointmentDetails inj:deleteInjectionDetailsList)
						{
							injDeleteHeaderIdList.add(inj.getInjAppointmentHeader().getId());
						}
							List<PatientPrescriptionDetails> deleteInjectionHeaderList = session.createCriteria(InjAppointmentHeader.class)
									.add(Restrictions.in("Id", injDeleteHeaderIdList))
									.list(); 
								hbt.deleteAll(deleteInjectionDetailsList);
								hbt.deleteAll(deleteInjectionHeaderList);
					}*/
					
					
			}//end if for phychiatrist n dental procedure 
			
					
				
					
					
				}
			
			//end therapy
			
			
			// --------------- values to be Opd Patient
			// History--------------------

			OpdPatientHistory opdPatientHistory = new OpdPatientHistory();
			if(opdpatientDetailId!=null && !opdpatientDetailId.equals(0)){
				List<OpdPatientHistory> opdPatientHistories=new ArrayList<OpdPatientHistory>();
				opdPatientHistories=session.createCriteria(OpdPatientHistory.class).add(Restrictions.eq("OpdPatientDetails", opdPatientDetails)).list();
				if(opdPatientHistories.size()>0){
					opdPatientHistory=opdPatientHistories.get(0);
				}
				
			}
			MasDepartment md = new MasDepartment();
			md.setId(departmentId);
			opdPatientHistory.setDepartment(md);

			MasHospital mh = new MasHospital();
			mh.setId(hospitalId);
			opdPatientHistory.setHospital(mh);

			Patient p = new Patient();
			p.setId(hinId);
			opdPatientHistory.setHin(p);

			/*
			 * Visit visit = new Visit(); visit.setId(visitId);
			 */
			opdPatientHistory.setVisitInpatientId(visitId);

			opdPatientHistory.setLastChgTime(time);
			opdPatientHistory.setLastChgBy("admin");

			opdPatientHistory.setStatus("y");
			opdPatientHistory.setLastChgDate(date);

			opdPatientHistory.setPersonalPastHistory(pastHistory);
			opdPatientHistory.setPersonalPresentHistory(personalHistory);
			opdPatientHistory.setPersonalOtherDetails(otherDetails);
			//-----commented by anamika-------------
			//opdPatientHistory.setFamilyPastHistory(familyHistory);
			opdPatientHistory.setRiskFactor(riskFactor);
			opdPatientHistory.setPastMedicalHistory(pastMedicalHistory);
			opdPatientHistory.setPresentComplain(presentComplain);
			
			opdPatientHistory.setFamilyPresentHistory(familyHistory);
			opdPatientHistory.setPresentAdvice(presentAdvice);//fayaz added
			opdPatientHistory.setPresentIllness(presentIllness);

			opdPatientHistory.setIpOpPacStatus("OP");

			opdPatientHistory.setOpdPatientDetails(opdPatientDetails);

			
			if(opdpatientDetailId!=null && !opdpatientDetailId.equals(0)){
				hbt.update(opdPatientHistory);
			}else{
				hbt.save(opdPatientHistory);
			}
			
			
	/*		if(familyHistoryArray!=null && familyHistoryArray.length > 0) {
				for (int i = 0; i < familyHistoryArray.length; i++) {
					List<MasMedicalExamFamilyHis> existingFamilyHis = new ArrayList<MasMedicalExamFamilyHis>();
					existingFamilyHis = session.createCriteria(MasMedicalExamFamilyHis.class).createAlias("Hin", "h").add(Restrictions.eq("h.Id", hinId)).createAlias("PatientFamilyHistory", "pfh").add(Restrictions.eq("pfh.Id", Integer.parseInt(""+familyHistoryArray[i]))).list();
					if(existingFamilyHis.size() == 0){
						MasMedicalExamFamilyHis masExamFamilyHis = new MasMedicalExamFamilyHis();
						Patient patientObj = new Patient();
						patientObj.setId(hinId);
						masExamFamilyHis.setHin(patientObj);
						PatientFamilyHistory familyHistory = new PatientFamilyHistory();
						familyHistory.setId(Integer.parseInt(""+familyHistoryArray[i]));
						masExamFamilyHis.setPatientFamilyHistory(familyHistory);
						hbt.save(masExamFamilyHis);
					}
				}
			}*/
			
	
	
			
			//------------update Patient Table for other Family History-------------------//
			
			Patient ptObj = (Patient)hbt.load(Patient.class, hinId);
		//	ptObj.setOtherFamilyHistory(otherFamilyHistorty);
			ptObj.setDrugAllergies(allergies);
			hbt.update(ptObj);
			
			//-----------------------------------------------------------------------

			// --------------- values to be updated in visit table to change
			// it's status--------------------

			//Visit visitObjToUpdate = (Visit) hbt.load(Visit.class, visitId);
			visitObjToUpdate.setVisitStatus("C");
			/* Original  token no and Doctor set at the time of visit creation */
			/*if(visitObjToUpdate.getDoctor()!=null){
				String tokenAndDoctor="";
				tokenAndDoctor=""+visitObjToUpdate.getTokenNo();
				tokenAndDoctor=tokenAndDoctor+"#"+visitObjToUpdate.getDoctor().getId();
				visitObjToUpdate.setTokenDoctor(tokenAndDoctor);
			}*/
			/* If Other Doctor will attend to patient then update doctor id in visit table  */
			if(empIdCurrnet>0){
				MasEmployee doctor=new MasEmployee();
				doctor.setId(empIdCurrnet);
				visitObjToUpdate.setDoctor(doctor);
			}
			hbt.update(visitObjToUpdate);

			// -----------------------------------------------------------------------------------

			// --------------values to be entered in discharge table for
			// diagnosis----------------------
			String query = "";
			//String notifiableICDCode="";
			List<MasIcd> objectList = new ArrayList();
			if (diagnosisIdAray != null) {
				
				int dischargeCodeId = 0;
				String icd_string=null;
				List<Integer>icdIdList =  new ArrayList<Integer> ();
				for (int i = 0; i < diagnosisIdAray.length; i++) {
					dischargeCodeId = 0;
					//System.out.println(diagnosisIdAray[i].contains("@@"));
					if(diagnosisIdAray[i].contains("@@"))
					{
					 String[] BothId=diagnosisIdAray[i].split("@@");
					 dischargeCodeId = Integer.parseInt(BothId[0]);
					 diagnosisIdAray[i] = BothId[1];
					 //System.out.println("BothId[0]"+BothId[0]+"BothId[1]"+BothId[1]) ;
					 //System.out.println(diagnosisIdAray[i]);
					}
					
					//System.out.println("dischargeCodeId = "+dischargeCodeId +diagnosisIdAray[i]);
					
					//if(dischargeCodeId==0)
					//{
				/*	notifiableICDCode=diagnosisIdAray[i];
					
					if(notifiableICDCode.equals("A51") || notifiableICDCode.equals("A52") || notifiableICDCode.equals("A53") || notifiableICDCode.equals("A54") || notifiableICDCode.equals("A55") || notifiableICDCode.equals("A56") || notifiableICDCode.equals("A57") || notifiableICDCode.equals("A58") || notifiableICDCode.equals("A59") || notifiableICDCode.equals("A60") || notifiableICDCode.equals("A63") || notifiableICDCode.equals("A64") || notifiableICDCode.equals("B01") || notifiableICDCode.equals("B05") || notifiableICDCode.equals("B06") || notifiableICDCode.equals("B15") || notifiableICDCode.equals("B16") || notifiableICDCode.equals("B17") || notifiableICDCode.equals("B18") || notifiableICDCode.equals("B19") || notifiableICDCode.equals("B35") || notifiableICDCode.equals("B36") || notifiableICDCode.equals("B86") || notifiableICDCode.equals("B50") || notifiableICDCode.equals("B51") || notifiableICDCode.equals("B52") || notifiableICDCode.equals("B53") || notifiableICDCode.equals("B53.0") || notifiableICDCode.equals("B20") || notifiableICDCode.equals("B21") || notifiableICDCode.equals("B22") || notifiableICDCode.equals("B23") || notifiableICDCode.equals("B24") || notifiableICDCode.equals("J00") || notifiableICDCode.equals("J01") || notifiableICDCode.equals("J02.9") || notifiableICDCode.equals("J03") || notifiableICDCode.equals("J04") || notifiableICDCode.equals("J05") || notifiableICDCode.equals("J06") || notifiableICDCode.equals("L01") || notifiableICDCode.equals("L02") || notifiableICDCode.equals("R75") || notifiableICDCode.equals("Z71.7") || notifiableICDCode.equals("S00") || notifiableICDCode.equals("S01") || notifiableICDCode.equals("S02") || notifiableICDCode.equals("S03") || notifiableICDCode.equals("S04") || notifiableICDCode.equals("S05") || notifiableICDCode.equals("S06") || notifiableICDCode.equals("S07") || notifiableICDCode.equals("S09.9"))
					{
						//opdPatientDetails.setNotifiableStatus("y");
					}*/		
					DischargeIcdCode dischargeIcdCode =null;
										dischargeIcdCode = new DischargeIcdCode();	
					 patientObj = new Patient();
					patientObj.setId(hinId);
					dischargeIcdCode.setHin(patientObj);
					MasIcd masIcd = new MasIcd();
					//
					// masIcd.setId(Integer.parseInt(diagnosisIdAray[i]));
					// chnaget to Line Below
					//System.out.println(diagnosisIdAray[i]);
					if (diagnosisIdAray[i] != null) {
						if (!diagnosisIdAray[i].equals("0")) {
						/*	query = "select icd_id from mas_icd where icd_code='"
									+ diagnosisIdAray[i] + "'";
							objectList = (List) session.createSQLQuery(query)
									.list();*/
							
							objectList = session.createCriteria(MasIcd.class).add(Restrictions.eq("IcdCode", diagnosisIdAray[i])).list();
							masIcd.setId(objectList.get(0).getId());
							
							icd_string = icd_string!=null?icd_string+","+objectList.get(0).getIcdName():objectList.get(0).getIcdName()+"";
							//icdIdList.add(i,Integer.parseInt( objectList.get(0).toString()));
							icdIdList.add(i, objectList.get(0).getId());
				           // System.out.println(icdIdList.get(i) +"dis ");
							/*masIcd.setId(Integer.parseInt(""
									+ objectList.get(0)));*/
							if(dischargeCodeId==0)
							{
				            masIcd.setId(icdIdList.get(i));
							dischargeIcdCode.setIcd(masIcd);
							dischargeIcdCode
									.setAddEditDate(consultationDateToInsert);
							dischargeIcdCode.setAddEditTime(consultationTime);
							dischargeIcdCode.setStatus("y");
							dischargeIcdCode.setDiagnosisStatus("p");
							Visit visit = new Visit();
							visit.setId(visitId);
							dischargeIcdCode.setVisit(visit);
							dischargeIcdCode.setOpdPatientDetails(opdPatientDetails);
							
								hbt.save(dischargeIcdCode);	
							}
						}
						
					}
					
				  //}
					
					
				}
				
		
				List<DischargeIcdCode> deleteDisCodeIdList = session.createCriteria(DischargeIcdCode.class)
						//.add( Restrictions.not( Restrictions.in("Id", icdIdList)))
						.add(Restrictions.not(Restrictions.in("Icd.Id", icdIdList)))
						.add(Restrictions.eq("OpdPatientDetails.id", opdpatientDetailId))
						.list(); 
				//System.out.println("size "+icdIdList.size() +" opdpatientDetailId"+opdpatientDetailId );
				//System.out.println("deleteDisCodeIdList "+deleteDisCodeIdList.size());		   
			if(deleteDisCodeIdList.size() >0)
				{
					hbt.deleteAll(deleteDisCodeIdList);
				}
			
			if(icd_string!=null)
			{
				opdPatientDetails.setIcd(icd_string);
				hbt.update(opdPatientDetails);
			}
				
			}
	int pHeaderId = 0;
	List<Integer> prescriptionIdDBList = new ArrayList<Integer>();
			if(box.get("pHeaderId")!=null)
				pHeaderId = box.getInt("pHeaderId");
if( itemIdList.size() > 0 || otherMedicineList.size() > 0)
			{
	        
	        PatientPrescriptionHeader patientPrescriptionHeader = null;
	        List<Integer> issuesPrescriptionIdList = new ArrayList<Integer>();
	        List<Integer> issuesInjectDtIdList =null;
	        List<PatientPrescriptionDetails> issuedPrescriptionList = null;
	        List<InjAppointmentDetails> issuedInjectionList = null;
	        
	        
	        
	        
		
			
			
			if(pHeaderId!=0 ){
				patientPrescriptionHeader =(PatientPrescriptionHeader)hbt.load(PatientPrescriptionHeader.class, pHeaderId);
				
				
				issuedPrescriptionList = session.createCriteria(PatientPrescriptionDetails.class)
											.createAlias("Prescription", "pht")
											.add(Restrictions.eq("pht.Status", "I").ignoreCase())
												//.add(Restrictions.or(Restrictions.eq("pht.Status","I"), Restrictions.ne("InjectionStatus", "n")))
						                  .add(Restrictions.eq("pht.Id", pHeaderId)).list();
						         for(PatientPrescriptionDetails pdt : issuedPrescriptionList)   
						         {
						        	 issuesPrescriptionIdList.add(pdt.getId());
						         }
						    
						        // System.out.println("issuesPrescriptionIdList");
						         
			 issuesInjectDtIdList = new ArrayList<Integer>();			         
						         issuedInjectionList  = session.createCriteria(InjAppointmentDetails.class).createAlias("InjAppointmentHeader", "injHd")
											.add(Restrictions.eq("injHd.Prescription.Id", pHeaderId))
											.add(Restrictions.eq("Status", "y"))
											.addOrder(Order.asc("InjAppointmentDate"))
											//.add(Restrictions.eq("visit.Id", lastVisitId))
											//.add(Restrictions.eq("visit.Id", lastVisitId))
											.list();
						         
						         for(InjAppointmentDetails injdt : issuedInjectionList)   
						         {
						        	 issuesInjectDtIdList.add(injdt.getPatientPrescriptionDetails().getId());
						         }         
						         issuesPrescriptionIdList.addAll(issuesInjectDtIdList);
						         
						         
						     //System.out.println("issuesPrescriptionIdList" +issuesPrescriptionIdList.size());
						     //System.out.println("issuesInjectDtIdList" +issuesInjectDtIdList.size()); 
						         
			}else{
				
				patientPrescriptionHeader = new PatientPrescriptionHeader();
				patientPrescriptionHeader.setStatus("p");
				patientPrescriptionHeader.setNipStatus("n");
			}
			
			int item_class_id = 0;
			String nipStatus=null;
			if(itemIdList.size() > 0 || otherMedicineList.size() > 0){
				Patient patient = new Patient();
				patient.setId(hinId);
				patientPrescriptionHeader.setHin(patient);
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(departmentId);
				patientPrescriptionHeader.setDepartment(masDepartment);
				Visit visit = new Visit();
				visit.setId(visitId);
				patientPrescriptionHeader.setVisit(visit);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				patientPrescriptionHeader.setHospital(masHospital);
				//patientPrescriptionHeader.setStatus("p");
				patientPrescriptionHeader
						.setPrescriptionDate(consultationDateToInsert);
				patientPrescriptionHeader.setPrescriptionTime(consultationTime);
				/**
				 * Code By Ritu 
				 * Created Foreign key relation for emp id in Database
				 */
				MasEmployee employee = new MasEmployee();
				employee.setId(empId);
				patientPrescriptionHeader.setEmp(employee);
				
				/**
				 * End of code by Ritu
				 */
				if(pHeaderId==0 )
				{
				int prescriptionNo=getTransactionSequenceNoForPrescriptionNo(mapForDS);
				patientPrescriptionHeader.setPrescriptionNo(prescriptionNo);
				}
				patientPrescriptionHeader.setOpdPatientDetails(opdPatientDetails);
				
				/*
				 * This block is use for Check Injection in Prescription List
				 */
				//----------------commented by anamika for itemId================
				String sqlItemId="";
			//	List<Integer> itemList = new ArrayList<Integer>();
				for (int i = 0; i < itemIdList.size(); i++) {
					
					/*String pvmsNo = (String) itemIdList.get(i);
					String nomenclature = (String) nomenclatureList.get(i);
					int itemId = getItemIdFromPVMS(nomenclature,pvmsNo,hospitalId);*/
					int itemId = (Integer)itemIdList.get(i);;
					if(i==0){
						sqlItemId=""+itemId;
					}else{
						sqlItemId +=" , "+itemId;
					}
				//	itemIdList.add(itemId);
				}
				List<MasStoreItem> masItemList=new ArrayList<MasStoreItem>();
				Properties properties = new Properties();
				URL resourcePath = Thread.currentThread().getContextClassLoader()
						.getResource("adt.properties");
				
				try {
					properties.load(resourcePath.openStream());
					String item_class_code = properties.getProperty("item_class_id");// injection class code
					item_class_id=Integer.parseInt(item_class_code);
				} catch (Exception e) {
					e.printStackTrace();
				}
				if(!sqlItemId.equals(""))
					masItemList=hbt.find("select item from jkt.hms.masters.business.MasStoreItem as item join item.ItemCategory as ic where item.Id in ("+sqlItemId+") and ic.Id="+item_class_id+"and item.IssueFrom='i'");
				
				if(masItemList.size()>0){
					patientPrescriptionHeader.setInjectionStatus("p");
				}else{
					patientPrescriptionHeader.setInjectionStatus("n");
				}
				/*
				 * End Of Code This block is use for Check Injection in Prescription List
				 */
				patientPrescriptionHeader.setOtherTreatment((String)mapForDS.get("otherTreatment"));
				  int ItemClassificationIdForNIP = 0;
				  ItemClassificationIdForNIP = Integer.parseInt(HMSUtil.getValuesFromPropertiesFile("adt.properties", "ItemClassificationId"));
				  
				  for(int iCId :classificationList)
					{
					  
						if(iCId==ItemClassificationIdForNIP)
						{
							patientPrescriptionHeader.setNipStatus("y");
							nipStatus ="y";
							break;
						}
					}
				
				hbt.saveOrUpdate(patientPrescriptionHeader);
				hbt.flush();
			}/** else part added by Ritu for other treatment details **/
		/*	else if(itemIdList.size() == 0 && mapForDS.get("otherTreatment")!=null && !(mapForDS.get("otherTreatment")).equals("")){

				Patient patient = new Patient();
				patient.setId(hinId);
				patientPrescriptionHeader.setHin(patient);
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(departmentId);
				patientPrescriptionHeader.setDepartment(masDepartment);
				Visit visit = new Visit();
				visit.setId(visitId);
				patientPrescriptionHeader.setVisit(visit);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				patientPrescriptionHeader.setHospital(masHospital);
				patientPrescriptionHeader.setStatus("p");
				patientPrescriptionHeader
						.setPrescriptionDate(consultationDateToInsert);
				patientPrescriptionHeader.setPrescriptionTime(consultationTime);
				
				MasEmployee employee = new MasEmployee();
				employee.setId(empId);
				patientPrescriptionHeader.setEmp(employee);
				//int prescriptionNo=getTransactionSequenceNoForPrescriptionNo(mapForDS);
				Map<String, Object> adMap = new HashMap<String, Object>();
			      adMap.put("tableObjectName", "PATIENT_PRESCRIPTION_HEADER");            
		            adMap.put("isHospitalWise", "y");
		            adMap.put("hospitalId", 1);
		            adMap.put("isYearly", "n");            
		            adMap.put("isMonthly", "n");
		            adMap.put("isPrefix", "n");
		
		        int prescriptionNo = Integer.parseInt(HMSUtil.generateTransactionSequence(adMap, session, hbt));
				
			

				patientPrescriptionHeader.setPrescriptionNo(prescriptionNo);
				patientPrescriptionHeader.setOpdPatientDetails(opdPatientDetails);
		
				patientPrescriptionHeader.setInjectionStatus("n");
				patientPrescriptionHeader.setOtherTreatment((String)mapForDS.get("otherTreatment"));
				
				  hbt.saveOrUpdate(patientPrescriptionHeader);
			
				
			}*/
			
	
			if (itemIdList.size() > 0 ) {
				 
			
				int prescriptionId=0;
				prescriptionIdDBList.addAll(issuesPrescriptionIdList);
				List<PatientPrescriptionDetails> previousApprovedNipDetails = null;
				for (int i = 0; i < itemIdList.size(); i++) {
					if(prescriptionIdList.get(i) != null && issuesPrescriptionIdList.contains(prescriptionIdList.get(i)))
							continue;
					else if(injectionFlagList!=null && injectionFlagList.get(i)!="" && injectionFlagList.get(i).equalsIgnoreCase("n"))
						continue;
					
					
					if(itemIdList.get(i) !=0 ){
						
						if(nipStatus!=null && nipStatus.equalsIgnoreCase("y") && classificationList.get(i)==2){
							
						Calendar cal = GregorianCalendar.getInstance();
						cal.add( Calendar.DAY_OF_YEAR, - Integer.parseInt(HMSUtil.getProperties("adt.properties", "ValidatedDaysForNipAprroval")));
						Date nipValidatedDate = cal.getTime();
						
						previousApprovedNipDetails = session.createCriteria(PatientPrescriptionDetails.class).createAlias("Prescription", "hd")
								.add(Restrictions.eq("hd.Hin.Id", hinId)).add(Restrictions.eq("Item.Id", itemIdList.get(i)))
								.add(Restrictions.eq("hd.NipStatus","A").ignoreCase()).add(Restrictions.ge("hd.PrescriptionDate",nipValidatedDate))
								.list();
						
						if(previousApprovedNipDetails.size()>0)
						{
							nipStatus ="A";
							patientPrescriptionHeader.setNipStatus("A");
							patientPrescriptionHeader.setNipApprovedBy(previousApprovedNipDetails.get(0).getPrescription().getNipApprovedBy());
							hbt.saveOrUpdate(patientPrescriptionHeader);
						}
					    		
						}
				
						
						
						
					List<MasStoreItem> itemCodeList = new ArrayList<MasStoreItem>();
					prescriptionId =0;
		
					PatientPrescriptionDetails patientPrescriptionDetails =null;
					
					
					
					if (prescriptionIdList.get(i)!=0) {
						patientPrescriptionDetails	= (PatientPrescriptionDetails)hbt.load(PatientPrescriptionDetails.class, prescriptionIdList.get(i));
					}else{
						patientPrescriptionDetails	= new PatientPrescriptionDetails();
					}
					
					
					if(itemIdList.get(i) != null){
						MasStoreItem masStoreItem = new MasStoreItem();
						masStoreItem.setId(itemIdList.get(i));
					patientPrescriptionDetails.setItem(masStoreItem);
					}
					
					if (frequencyList.get(i) != null && !frequencyList.get(i).equals("")) {
						MasFrequency masFrequency = new MasFrequency();
						masFrequency.setId(frequencyList.get(i));
						patientPrescriptionDetails.setFrequency(masFrequency);
						}
						if (dosageList.get(i) != null && !dosageList.get(i).equals("") && !dosageList.get(i).equals("0")) {
							patientPrescriptionDetails.setDosage(dosageList.get(i));
						}else{
							patientPrescriptionDetails.setDosage("0");
						}
						if (remarksList.get(i) != null && !remarksList.get(i).equals("")) {
							patientPrescriptionDetails.setRemarks(remarksList.get(i));
						}
						//patientPrescriptionDetails.setType(typeLeftRightList.get(i));
						if (noOfDaysList.get(i) != null && !noOfDaysList.get(i).equals("")) {
							patientPrescriptionDetails.setNoOfDays(noOfDaysList.get(i));
						}
						if (routeList.get(i) != null && !routeList.get(i).equals("")) {
							patientPrescriptionDetails.setRoute(routeList.get(i));
						}
						/*if (totalList.get(i) != null && !totalList.get(i).equals("")) {
							patientPrescriptionDetails.setTotal(Math.round(totalList.get(i).floatValue()));
						}*/
						//System.out.println("total data layer "+"i "+i+ " "+totalList.get(i));
						if (totalList.get(i) != null && !totalList.get(i).equals("") && totalList.get(i) != 0) {
							patientPrescriptionDetails.setTotal(totalList.get(i));
						}else{
							patientPrescriptionDetails.setTotal(1);
						}
						patientPrescriptionDetails.setGivenQty(0);
					
					//System.out.println("typeLeftRightList.get(i)------>>>"+typeLeftRightList.get(i));
					//patientPrescriptionDetails.setType(typeLeftRightList.get(i));
					
					//patientPrescriptionDetails.setInstruction(instructionList.get(i));
					
					
					patientPrescriptionDetails.setPrescription(patientPrescriptionHeader);
				
					patientPrescriptionDetails.setDetailStatus("a");
					
					
			/*		List<MasStoreItem> storeItemList=new ArrayList<MasStoreItem>();
					storeItemList=hbt.find("select item from jkt.hms.masters.business.MasStoreItem as item join item.ItemCategory as ic where item.Id="+itemIdList.get(i)+" and ic.Id="+item_category_id);
					if(storeItemList.size() > 0){
						patientPrescriptionDetails.setInjectionStatus("p");
					}else{
						patientPrescriptionDetails.setInjectionStatus("n");
					}
					if(ctList.get(i).equals("y")){
						patientPrescriptionDetails.setCt("yes");
					}else{
						patientPrescriptionDetails.setCt("no");
					}
					*/
					List<MasStoreItem> storeItemList=new ArrayList<MasStoreItem>();
					Properties properties = new Properties();
					URL resourcePath = Thread.currentThread().getContextClassLoader().getResource("adt.properties");
					try {
						properties.load(resourcePath.openStream());
						String item_class_code = properties.getProperty("item_class_id");
						item_class_id=Integer.parseInt(item_class_code);
					} catch (Exception e) {
						e.printStackTrace();
					}
					storeItemList=hbt.find("select item from jkt.hms.masters.business.MasStoreItem as item join item.ItemClass as ic where item.Id="+itemIdList.get(i)+" and ic.Id="+item_class_id+"and item.IssueFrom='i'");
					if(storeItemList.size() > 0){
						patientPrescriptionDetails.setInjectionStatus("p");
					}else{
						patientPrescriptionDetails.setInjectionStatus("n");
					}
					
			/*		if(visitObjToUpdate!=null && visitObjToUpdate.getVisitStatus().equalsIgnoreCase("p") && parkPrescriptionIds!=null && !parkPrescriptionIds.get(i).equals(0)){
						hbt.update(patientPrescriptionDetails);
					}else{
						hbt.save(patientPrescriptionDetails);
					}*/
					
					 hbt.saveOrUpdate(patientPrescriptionDetails);
					 
					 prescriptionIdDBList.add(patientPrescriptionDetails.getId());
					 
						//opdPatientListObject.add(patientPrescriptionDetails);
						//prevent insulin for nursing station and available in pharmacy only in readonly mod
					if(!checkForInsulinInjection(itemIdList.get(i))){
							if(storeItemList.size()>0){
								if(session.createCriteria(MasStoreItem.class).add(Restrictions.eq("Id", itemIdList.get(i))).add(Restrictions.eq("IssueFrom", "I").ignoreCase()).list().size()>0){
									
								List<InjAppointmentHeader> injectionRegisterList=new ArrayList<InjAppointmentHeader>();
								injectionRegisterList=hbt.find("select inj from jkt.hms.masters.business.InjAppointmentHeader as inj join inj.Visit as visit where visit.Id="+visitId);
								
								InjAppointmentHeader injectionAppointment = new InjAppointmentHeader();
								
								 
								if(injectionRegisterList.size()>0){
									for (InjAppointmentHeader injectionRegisterTemp : injectionRegisterList) {
										injectionAppointment.setId(injectionRegisterTemp.getId());
									}
								}else{
									Patient patientInj = new Patient();
									patientInj.setId(hinId);
									injectionAppointment.setHin(patientInj);
									Visit visitInj = new Visit();
									visitInj.setId(visitId);
									injectionAppointment.setVisit(visitInj);
									MasHospital masHospitalInj = new MasHospital();
									masHospitalInj.setId(hospitalId);
									injectionAppointment.setHospital(masHospitalInj);
									
									injectionAppointment.setStatus("p");
									injectionAppointment.setLastChgTime(time);
									injectionAppointment.setLastChgBy(user);
									injectionAppointment.setLastChgDate(date);
									injectionAppointment.setAppointmentDate(date);
									injectionAppointment.setPrescription(patientPrescriptionHeader);
									 hbt.save(injectionAppointment);
									
								}
											InjAppointmentDetails injAppointmentDetails = new InjAppointmentDetails();
											//injAppointmentDetails.setAppointmentTime(time);
											injAppointmentDetails.setInjAppointmentDate(new Date());
											injAppointmentDetails.setDose(String.valueOf(dosageList.get(i)));
											
											MasFrequency frequency = new MasFrequency();
											frequency.setId(frequencyList.get(i));
											injAppointmentDetails.setFrequency(frequency);
											
											/*if(routeOfAdministration!=null)
											injAppointmentDetails.setRoute(routeOfAdministration.getRouteName());
											*/
											 
											MasStoreItem item = new MasStoreItem();
											item.setId(itemIdList.get(i));
											
											
											
												injAppointmentDetails.setItem(item);
												injAppointmentDetails.setInjAppointmentHeader(injectionAppointment);
												injAppointmentDetails.setNoOfDays(noOfDaysList.get(i));
												injAppointmentDetails.setPatientPrescriptionDetails(patientPrescriptionDetails);
												injAppointmentDetails.setStatus("p");
												injAppointmentDetails.setFinalStatus("n");
												 hbt.save(injAppointmentDetails);
								
							  }
							}
					}
					//end injectionappointment
					
			
					
					/**
					 * This Code is use for Injection Appointment
					 * Code By Ritu Sahu
					 * Date 07 Nov 2011
					 */
					
			/*		if(storeItemList.size()>0){
						List<InjAppointmentHeader> injectionRegisterList=new ArrayList<InjAppointmentHeader>();
						injectionRegisterList=hbt.find("select inj from jkt.hms.masters.business.InjAppointmentHeader as inj join inj.Visit as visit where visit.Id="+visitId);
						InjAppointmentHeader injectionAppointment = new InjAppointmentHeader();
						
						  if(injectionRegisterList.size()>0) means , Data is already available In InjectionRegister table  
						 
						if(injectionRegisterList.size()>0){
							for (InjAppointmentHeader injectionRegisterTemp : injectionRegisterList) {
								injectionAppointment.setId(injectionRegisterTemp.getId());
							}
						}else{
							injectionAppointment.setAppointmentDate(new Date());
							Patient patientInj = new Patient();
							patientInj.setId(hinId);
							injectionAppointment.setHin(patientInj);
							Visit visitInj = new Visit();
							visitInj.setId(visitId);
							injectionAppointment.setVisit(visitInj);
							MasHospital masHospitalInj = new MasHospital();
							masHospitalInj.setId(hospitalId);
							injectionAppointment.setHospital(masHospitalInj);
							
							injectionAppointment.setStatus("p");
							injectionAppointment.setLastChgTime(time);
							Users user = new Users();
							user.setId(userId);
							injectionAppointment.setLastChgBy(user);
							injectionAppointment.setLastChgDate(date);
							injectionAppointment.setPrescription(patientPrescriptionHeader);
							hbt.save(injectionAppointment);
						}
						int freqCount=0;
						if(frequencyList.get(i) > 10){
							freqCount = 1;  if frequency is greater than 10 then only one entry will go in Injection Appointment table
						}else{
							freqCount = frequencyList.get(i);
						}
						if(freqCount > 0){	
							for (int j = 1; j <= freqCount; j++) {
								InjAppointmentDetails injAppointmentDetails = new InjAppointmentDetails();
								injAppointmentDetails.setAppointmentTime(time);
								injAppointmentDetails.setDose(dosageList.get(i));
								MasFrequency frequency = new MasFrequency();
								frequency.setId(frequencyList.get(i));
								injAppointmentDetails.setFrequency(frequency);
								injAppointmentDetails.setRoute(routeList.get(i));
								MasStoreItem item = new MasStoreItem();
								item.setId(itemIdList.get(i));
								injAppointmentDetails.setItem(item);
								injAppointmentDetails.setInjAppointmentHeader(injectionAppointment);
								injAppointmentDetails.setNoOfDays(noOfDaysList.get(i));
								injAppointmentDetails.setPatientPrescriptionDetails(patientPrescriptionDetails);
								injAppointmentDetails.setStatus("p");
								hbt.save(injAppointmentDetails);
							}
						}
					}*/
					/**
					 * END Of COde
					 * This Code is use for Injection
					 * Code By Ritu Sahu
					 * Date 07 Nov 2011
					 */
				}
				
				}//end for loop
				

			}
		
/*			//-------------code by anamika for detention-----------------------//
			if(disposal.equalsIgnoreCase("Detained")){
			PatientDetentionRegister patientDetentionRegister =new PatientDetentionRegister();
			Patient patient =  new Patient();
			patient.setId(hinId);
			patientDetentionRegister.setHin(patient);
			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			//System.out.println("box.getInt(hospitalId)--->"+box.getInt("hospitalId"));
			patientDetentionRegister.setHospital(masHospital);
			
			MasEmployee medicalOfficer =new MasEmployee();
			//System.out.println("box.getInt(doctorId)--"+box.getInt("doctorId"));
			medicalOfficer.setId(empIdCurrnet);
			patientDetentionRegister.setMedicalOfficer(medicalOfficer);
			
			Visit visit=new Visit();
			visit.setId(visitId);
			patientDetentionRegister.setVisit(visit);
			
			patientDetentionRegister.setDetainedFrom(date);
			patientDetentionRegister.setDetentionRegisterDate(date);
			patientDetentionRegister.setDetainedTo(date);
			patientDetentionRegister.setFromTime(time);
			patientDetentionRegister.setToTime(time);
			//patientDetentionRegister.setTreatment(box.getString("treatment"));
			patientDetentionRegister.setRequisitionDate(date);
			Users user = new Users();
			user.setId(userId);
			patientDetentionRegister.setLastChgBy(user);
			patientDetentionRegister.setLastChgDate(date);
			patientDetentionRegister.setLastChgTime(time);
			patientDetentionRegister.setStatus("p");
			patientDetentionRegister.setReviewAt(reviewAt);
			
			 hbt.save(patientDetentionRegister);
		}*/
			//-------------------------------------------------
			if(otherMedicineList != null && otherMedicineList.size() > 0){
				String sqlItemId="";
				int itemId = 0;
				/*PatientPrescriptionHeader patientPrescriptionHeader = new PatientPrescriptionHeader();
				Patient patient = new Patient();
				patient.setId(hinId);
				patientPrescriptionHeader.setHin(patient);
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(departmentId);
				patientPrescriptionHeader.setDepartment(masDepartment);
				Visit visit = new Visit();
				visit.setId(visitId);
				patientPrescriptionHeader.setVisit(visit);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				patientPrescriptionHeader.setHospital(masHospital);
				patientPrescriptionHeader.setStatus("p");
				patientPrescriptionHeader
						.setPrescriptionDate(consultationDateToInsert);
				patientPrescriptionHeader.setPrescriptionTime(consultationTime);
				*//**
				 * Code By Ritu 
				 * Created Foreign key relation for emp id in Database
				 *//*
				MasEmployee employee = new MasEmployee();
				employee.setId(empId);
				patientPrescriptionHeader.setEmp(employee);
				
				*//**
				 * End of code by Ritu
				 *//*
				int prescriptionNo=getTransactionSequenceNoForPrescriptionNo(mapForDS);
				patientPrescriptionHeader.setPrescriptionNo(prescriptionNo);
		
				for(int i = 0; i < injCategoryList.size(); i++){
					if(injCategoryList.get(i).equals("y")){
						patientPrescriptionHeader.setInjectionStatus("p");
						break;
					}else{
						patientPrescriptionHeader.setInjectionStatus("n");
					}
				}
				
				 * End Of Code This block is use for Check Injection in Prescription List
				 
				
				hbt.save(patientPrescriptionHeader);*/

				//List<MasStoreItem> itemCodeList = new ArrayList<MasStoreItem>();
				String otherItem = "";
				if(otherMedicineList.size() >0){
					patientPrescriptionHeader.setNipStatus("y");
					patientPrescriptionHeader.setNipApprovedBy(null);
					hbt.saveOrUpdate(patientPrescriptionHeader);
					String nipCode = null;
					int itemClassificationId = 0;
					int groupId = 0;
					int sectionId = 0;
					int itemTypeId= 0;
					try
					{
						nipCode = HMSUtil.getProperties("adt.properties", "ItemClassificationCodeNIP");
						itemClassificationId = Integer.parseInt(HMSUtil.getProperties("adt.properties", "ItemClassificationId"));
						groupId = Integer.parseInt(HMSUtil.getProperties("adt.properties", "ItemGroupId"));
						sectionId = Integer.parseInt(HMSUtil.getProperties("adt.properties", "SectionIdForDrugs"));
						itemTypeId = Integer.parseInt(HMSUtil.getProperties("adt.properties", "ItemTypeId"));
					}
					catch(Exception e)
					{
						e.printStackTrace();
					}
					//int totalNip = session.createCriteria(MasStoreItem.class).createAlias("ItemClassification", "ic").add(Restrictions.eq("ic.Classification", nipCode)).add(Restrictions.eq("Hospital.Id", hospitalId)).list().size();
					String nipLastPVMS = ((MasStoreItem)(session.createCriteria(MasStoreItem.class).createAlias("ItemClassification", "ic").add(Restrictions.eq("ic.Classification", nipCode)).add(Restrictions.eq("Hospital.Id", hospitalId)).addOrder(Order.desc("Id")).setMaxResults(1).list().get(0))).getPvmsNo();
					int totalNip= Integer.parseInt(nipLastPVMS.replaceAll("[^0-9]", ""));
					
					int k=0;
					//for(int i = 0; i < otherMedicineList.size(); i++){
					for(int i = itemIdList.size(); i <otherMedicineList.size()+itemIdList.size(); i++){
					MasStoreItem masItem = new MasStoreItem();
					if(otherMedicineList.get(k) != null && !otherMedicineList.get(k).equals("")){
						otherItem =(String)otherMedicineList.get(k);
						masItem.setNomenclature(otherMedicineList.get(k));
						MasStoreSection masStoreSection = new MasStoreSection();
						masStoreSection.setId(sectionId);
						masItem.setSection(masStoreSection);
						masItem.setStatus("y");
						masItem.setBrandedGeneric("B");
						
						if (itemConversionList.get(i) != null && !itemConversionList.get(i).equals("0")) {
							MasStoreItemConversion masStoreItemConversion = new MasStoreItemConversion();
							masStoreItemConversion.setId(itemConversionList.get(i));
							masItem.setItemConversion(masStoreItemConversion);
							}
						
						if (itemClassList.get(i) != null && !itemClassList.get(i).equals("0")) {
							 MasItemClass masItemClass = new MasItemClass();
							 masItemClass.setId(itemClassList.get(i));
							masItem.setItemClass(masItemClass);
							}
						
						if (itemDispensaryList.get(i) != null && !itemDispensaryList.get(i).equals("")) {
							masItem.setDispUnit(itemDispensaryList.get(i));
							}

						if (uomQtyList .get(i) != null && !uomQtyList .get(i).equals("")) {
							masItem.setADispQty(uomQtyList .get(i));
							}
						totalNip++;
						masItem.setPvmsNo(nipCode+totalNip);
						
						MasItemType masItemType = new MasItemType();
						masItemType.setId(itemTypeId);
						masItem.setItemType(masItemType);
						MasHospital masHospital = new MasHospital();
						masHospital.setId(hospitalId);
						masItem.setHospital(masHospital);
						masItem.setHighValueDrug("n");
						MasItemClassification Mic = new MasItemClassification();
						Mic.setId(itemClassificationId);
						masItem.setItemClassification(Mic);
						MasStoreGroup msgrp = new MasStoreGroup();
						msgrp.setId(groupId);
						masItem.setGroup(msgrp);
						masItem.setLastChgBy(user);
						masItem.setLastChgDate(date);
						masItem.setLastChgTime(time);
						
						/*itemCodeList =session.createCriteria(MasStoreItem.class).add(Restrictions.like("PvmsNo", "NIV%")).add(Restrictions.eq("Hospital.Id", hospitalId))
						.addOrder(Order.desc("Id")).setMaxResults(1).list();
						String itemNo = "";
						if(itemCodeList.size()>0){
							MasStoreItem masStoreItem =itemCodeList.get(0);
							String itemCode = masStoreItem.getPvmsNo();
							StringTokenizer str = new StringTokenizer(itemCode, "/");
							String itemNivCode = "";
							while (str.hasMoreTokens()) {

								itemNivCode = str.nextToken();

							}
							int itemNiv =Integer.parseInt(itemNivCode)+1;
							itemNo = "NIV/"+itemNiv;
						}else{
							itemNo = "NIV/011"; 
						}*/
						//masItem.setPvmsNo("temp");
						
						hbt.save(masItem);
						

				
					PatientPrescriptionDetails patientPrescriptionDetails = new PatientPrescriptionDetails();
					if(masItem.getId() != null){
						MasStoreItem masStoreItem = new MasStoreItem();
						masStoreItem.setId(masItem.getId());
					patientPrescriptionDetails.setItem(masStoreItem);
					}
					if (frequencyList.get(i) != null && !frequencyList.get(i).equals("")) {
					MasFrequency masFrequency = new MasFrequency();
					masFrequency.setId(frequencyList.get(i));
					patientPrescriptionDetails.setFrequency(masFrequency);
					}
					if (dosageList.get(i) != null && !dosageList.get(i).equals("")) {
						patientPrescriptionDetails.setDosage(dosageList.get(i));
					}
					if (remarksList.get(i) != null && !remarksList.get(i).equals("")) {
					patientPrescriptionDetails.setRemarks(remarksList.get(i));
					}
					//patientPrescriptionDetails.setType(typeLeftRightList.get(i));
					if (noOfDaysList.get(i) != null && !noOfDaysList.get(i).equals("")) {
						patientPrescriptionDetails.setNoOfDays(noOfDaysList.get(i));
					}
					if (routeList.get(i) != null && !routeList.get(i).equals("")) {
						patientPrescriptionDetails.setRoute(routeList.get(i));
					}
					
					//patientPrescriptionDetails.setInstruction(instructionList.get(i));
					if (totalList.get(i) != null && !totalList.get(i).equals("")) {
						patientPrescriptionDetails.setTotal(totalList.get(i));
					}
					patientPrescriptionDetails.setPrescription(patientPrescriptionHeader);
					patientPrescriptionDetails.setGivenQty(0);
					patientPrescriptionDetails.setDetailStatus("a");
					List<MasStoreItem> storeItemList=new ArrayList<MasStoreItem>();
					/*if(injCategoryList.equals("y")){
						patientPrescriptionDetails.setInjectionStatus("p");
					}else{
						patientPrescriptionDetails.setInjectionStatus("n");
					}*/
					
					if(ctList.get(i).equals("y")){
						patientPrescriptionDetails.setCt("yes");
					}else{
						patientPrescriptionDetails.setCt("no");
					}
					
					patientPrescriptionDetails.setInjectionStatus("n");
					hbt.save(patientPrescriptionDetails);
					prescriptionIdDBList.add(patientPrescriptionDetails.getId());
					/**
					 * This Code is use for Injection Appointment
					 * Code By Ritu Sahu
					 * Date 07 Nov 2011
					 */
					
					if(storeItemList.size()>0){
						List<InjAppointmentHeader> injectionRegisterList=new ArrayList<InjAppointmentHeader>();
						injectionRegisterList=hbt.find("select inj from jkt.hms.masters.business.InjAppointmentHeader as inj join inj.Visit as visit where visit.Id="+visitId);
						InjAppointmentHeader injectionAppointment = new InjAppointmentHeader();
						
						 /* if(injectionRegisterList.size()>0) means , Data is already available In InjectionRegister table  */
						 
						if(injectionRegisterList.size()>0){
							for (InjAppointmentHeader injectionRegisterTemp : injectionRegisterList) {
								injectionAppointment.setId(injectionRegisterTemp.getId());
							}
						}else{
							injectionAppointment.setAppointmentDate(new Date());
							Patient patientInj = new Patient();
							patientInj.setId(hinId);
							injectionAppointment.setHin(patientInj);
							Visit visitInj = new Visit();
							visitInj.setId(visitId);
							injectionAppointment.setVisit(visitInj);
							MasHospital masHospitalInj = new MasHospital();
							masHospitalInj.setId(hospitalId);
							injectionAppointment.setHospital(masHospitalInj);
							
							injectionAppointment.setStatus("p");
							injectionAppointment.setLastChgTime(time);
						/*	Users user = new Users();
							user.setId(userId);*/
							injectionAppointment.setLastChgBy(user);
							injectionAppointment.setLastChgDate(date);
							injectionAppointment.setPrescription(patientPrescriptionHeader);
							hbt.save(injectionAppointment);
						}
						int freqCount=0;
						if(frequencyList.get(i) > 10){
							freqCount = 1; /* if frequency is greater than 10 then only one entry will go in Injection Appointment table*/
						}else{
							freqCount = frequencyList.get(i);
						}
						if(freqCount > 0){	
							for (int j = 1; j <= freqCount; j++) {
								InjAppointmentDetails injAppointmentDetails = new InjAppointmentDetails();
								injAppointmentDetails.setAppointmentTime(time);
								injAppointmentDetails.setDose(dosageList.get(i));
								MasFrequency frequency = new MasFrequency();
								frequency.setId(frequencyList.get(i));
								injAppointmentDetails.setFrequency(frequency);
								injAppointmentDetails.setRoute(routeList.get(i));
								MasStoreItem item = new MasStoreItem();
								item.setId(itemIdList.get(i));
								injAppointmentDetails.setItem(item);
								injAppointmentDetails.setInjAppointmentHeader(injectionAppointment);
								injAppointmentDetails.setNoOfDays(noOfDaysList.get(i));
								injAppointmentDetails.setPatientPrescriptionDetails(patientPrescriptionDetails);
								injAppointmentDetails.setStatus("p");
								hbt.save(injAppointmentDetails);
							}
						}
					}
		
					}
					/**
					 * END Of COde
					 * This Code is use for Injection
					 * Code By Ritu Sahu
					 * Date 07 Nov 2011
					 */
					k++;
				}
			}
			}
			
		
			
			}

//remove deleted prescription

if(pHeaderId!=0)
{
	prescriptionIdDBList.add(0);
List<PatientPrescriptionDetails> deleteDisCodeIdList = session.createCriteria(PatientPrescriptionDetails.class)
		//.add( Restrictions.not( Restrictions.in("Id", icdIdList)))
		.add(Restrictions.not(Restrictions.in("Id", prescriptionIdDBList)))
		.add(Restrictions.eq("Prescription.Id", pHeaderId))
		.list(); 

	//System.out.println("size "+icdIdList.size() +" opdpatientDetailId"+opdpatientDetailId );
	//System.out.println("deleteDisCodeIdList "+deleteDisCodeIdList.size());		   
	if(deleteDisCodeIdList.size() >0)
		{
		List<Integer> injPrescriptionDetailsIdList = new ArrayList<Integer>();
		for(PatientPrescriptionDetails pd:deleteDisCodeIdList){
			injPrescriptionDetailsIdList.add(pd.getId());
			
		}
		List<InjAppointmentDetails> deleteInjectionDetailsList = session.createCriteria(InjAppointmentDetails.class)
				.add(Restrictions.in("PatientPrescriptionDetails.Id", injPrescriptionDetailsIdList))
				.list();
		if(deleteInjectionDetailsList.size()>0)
		{
			List<Integer> injDeleteHeaderIdList = new ArrayList<Integer>();
			for(InjAppointmentDetails inj:deleteInjectionDetailsList)
			{
				injDeleteHeaderIdList.add(inj.getInjAppointmentHeader().getId());
			}
				List<PatientPrescriptionDetails> deleteInjectionHeaderList = session.createCriteria(InjAppointmentHeader.class)
						.add(Restrictions.in("Id", injDeleteHeaderIdList))
						.list(); 
					hbt.deleteAll(deleteInjectionDetailsList);
					hbt.deleteAll(deleteInjectionHeaderList);
		}
	
			hbt.deleteAll(deleteDisCodeIdList);
		}
	
	deleteDisCodeIdList = session.createCriteria(PatientPrescriptionDetails.class)
			//.add( Restrictions.not( Restrictions.in("Id", icdIdList)))
			.add(Restrictions.eq("Prescription.Id", pHeaderId))
			.list(); 
	
	if(deleteDisCodeIdList.size()==0)
	{
		List<PatientPrescriptionHeader> deletePPHDtList = new ArrayList<PatientPrescriptionHeader>();
		deletePPHDtList = session.createCriteria(PatientPrescriptionHeader.class)
				.add(Restrictions.eq("Id", pHeaderId))
				.list(); 
		
		hbt.deleteAll(deletePPHDtList);
	}
//change nip status to n if there is no nip item left in details
	String nipCode = HMSUtil.getProperties("adt.properties", "ItemClassificationCodeNIP");
	int total = session.createCriteria(PatientPrescriptionDetails.class)
			.createAlias("Item","i")
			.createAlias("i.ItemClassification","cf")
			.add(Restrictions.eq("cf.Classification", nipCode))
			.add(Restrictions.eq("Prescription.Id", pHeaderId))
			.list().size(); 
	
/*	total = session.createCriteria(PatientPrescriptionDetails.class)
			.createAlias("Item.ItemClassification","cf")
			.add(Restrictions.eq("cf.Classification", nipCode))
			.add(Restrictions.eq("Prescription.Id", pHeaderId))
			.list().size(); */
	if(total==0)
	{
		PatientPrescriptionHeader patientPrescriptionHeader =(PatientPrescriptionHeader)hbt.get(PatientPrescriptionHeader.class, pHeaderId);
		if(patientPrescriptionHeader!=null){patientPrescriptionHeader.setNipStatus("n");
		hbt.update(patientPrescriptionHeader);}
	}
}
			
			// by Tirath for time without second
			Map<String, Object> utilMap1 = new HashMap<String, Object>();
			utilMap1 = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			
			String time1 = (String) utilMap1.get("currentTimeWithoutSc");
			
			//investigation
			
			if (chargeCodeIdList.size() > 0) {
				List<Patient> patientList = null;  
				String patientTypeNameForHAL = null;
				String patientTypeNameForOther = null;
				String dgOrderBillingStatus = null;
				List<Integer> totaldgDtIdList = new ArrayList<Integer>();
				List<Integer> totalDbHdIdList = new ArrayList<Integer>();
				//List<Integer> dbDgheaderIdList = new ArrayList<Integer>();
				List<Integer> dbDgheaderList = null;
		
					 patientTypeNameForHAL =  HMSUtil.getProperties("adt.properties", "patientTypeNameForHAL");
					 patientTypeNameForOther = HMSUtil.getProperties("adt.properties", "patientTypeNameForOther");
				
					 dbDgheaderList = session.createCriteria(DgOrderhd.class).add(
								Restrictions.eq("Createdon", consultationDateToInsert)).createAlias("Visit", "v").add(Restrictions.eq("v.Id",visitId))
								.setProjection(Projections.projectionList().add(Projections.groupProperty("Id")))
								.list();
					 
				Criteria crit = session.createCriteria(Patient.class).add(
						Restrictions.eq("Id", hinId));
				patientList = crit.list();
							
				
				if(patientList.size()!=0)
				{
					if(patientList.get(0).getPatientType().getPatientTypeName().equals(patientTypeNameForHAL))
					{
						dgOrderBillingStatus ="y";
					}
					else if(patientList.get(0).getPatientType().getPatientTypeName().equals(patientTypeNameForOther))
					{
						if(patientList.get(0).getBillable().equals("y"))
						    dgOrderBillingStatus ="n";
						else if(patientList.get(0).getBillable().equals("n"))
							dgOrderBillingStatus ="y";
					}
				}

				  Map<String, Object> adMap = new HashMap<String, Object>();
			      adMap.put("tableObjectName", "DgOrderhd");            
		            adMap.put("isHospitalWise", "y");
		            adMap.put("hospitalId", hospitalId);
		            adMap.put("isYearly", "n");            
		            adMap.put("isMonthly", "n");
		            adMap.put("isPrefix", "n");
				//List<String> headerinvestigationDateList =  (List) mapForDS.get("investigationDate");
				;
				List<String> insertedDateList =  new ArrayList<>();
				List <DgOrderhd> dgOrderList = null;
				 boolean updateHeaderStatus=false;
				for(String investigtionDate: investigationDateList)
				{
				if(!insertedDateList.contains(investigtionDate))	{
					insertedDateList.add(investigtionDate);
					//System.out.println("headerinvestigationDateList "+headerinvestigationDateList +" investigationDateList="+investigationDateList);
					
					dgOrderList = session.createCriteria(DgOrderhd.class).add(Restrictions.eq("OrderDate",HMSUtil.convertStringTypeDateToDateType(investigtionDate)))
							.createAlias("Visit", "v").add(Restrictions.eq("v.Id",visitId)).list();
					DgOrderhd dgOrderhd = null;
			
					if(dgOrderList.size()>0){
						 dgOrderhd = dgOrderList.get(0);
						 totalDbHdIdList.add(dgOrderhd.getId());	 
					}
					else{
						 dgOrderhd = new DgOrderhd();
							dgOrderhd.setBillingStatus(dgOrderBillingStatus);
							dgOrderhd.setPatientType("OP");
							dgOrderhd.setTestType("Regular");
							dgOrderhd.setCreatedby(userName);
							dgOrderhd.setCreatedon(consultationDateToInsert);
					       orderSeqNo = HMSUtil.generateTransactionSequence(adMap, session, hbt);
							    dgOrderhd.setOrderNo(orderSeqNo);
								dgOrderhd.setVisit(visitObj);
							dgOrderhd.setClinicalNote(clinicalNotes1);
							dgOrderhd.setOrderStatus("P");
							dgOrderhd.setLabOrderStatus("P");
							dgOrderhd.setLastChgBy(user);
							dgOrderhd.setLastChgDate(consultationDateToInsert);
							dgOrderhd.setLastChgTime(consultationTime);
							dgOrderhd.setOrderDate(HMSUtil.convertStringTypeDateToDateType(investigtionDate));
							masHospitalObj.setId(hospitalId);
							dgOrderhd.setHospital(masHospitalObj);
							dgOrderhd.setOrderTime(time1);
							
							patientObj.setId(hinId);
							dgOrderhd.setHin(patientObj);
							masDepartment1.setId(departmentId);
							dgOrderhd.setDepartment(masDepartment1);
							if (empId != 0) {
								masEmployee.setId(empId);
								dgOrderhd.setPrescribedBy(masEmployee);
							}
						
						
							//dgOrderhd.setInvestigationRequestionNo(patientInvestigationHeader);
							if(mapForDS.get("otherInvestigation")!=null)
							dgOrderhd.setOtherInvestigation(mapForDS.get("otherInvestigation").toString().trim());
					
							hbt.save(dgOrderhd);
					}
					
					
					
					
				    updateHeaderStatus=false;
					for (int i = 0; i < chargeCodeIdList.size(); i++) {
						
						if(investigtionDate.equals(investigationDateList.get(i))){
						
						MasChargeCode masChargeCode = new MasChargeCode();
						masChargeCode.setId(Integer.parseInt(chargeCodeIdList.get(i)));
						
						
						DgOrderdt dgOrderdt = null;
						Map masChargeMap = getMasChargeCodeFromChargeId(Integer
								.parseInt(chargeCodeIdList.get(i)));
						MasChargeCode masChargeCodeObj = (MasChargeCode) masChargeMap
						.get("masChargeCode");
						int mainChargeId = masChargeCodeObj.getMainChargecode()
						.getId();
						int subChargeId = masChargeCodeObj.getSubChargecode()
						.getId();
						if(dgorderDtList.get(i)!=0)
						{
							dgOrderdt = (DgOrderdt) hbt.load(DgOrderdt.class, dgorderDtList.get(i));
						}
						else
						{
							if(!updateHeaderStatus){
							dgOrderhd.setOrderStatus("p");
							hbt.update(dgOrderhd);}
							dgOrderdt = new DgOrderdt();
							dgOrderdt.setMsgSent("n");
						
							if (masChargeCodeObj.getMainChargecode()
									.getMainChargecodeCode().equalsIgnoreCase("Lab")) {
								dgOrderdt.setOrderStatus("P");
							} else {
								dgOrderdt.setOrderStatus("P");
							}
						}
											dgOrderdt.setOrderhd(dgOrderhd);
											masChargeCode.setId(Integer.parseInt(chargeCodeIdList.get(i)));
											dgOrderdt.setChargeCode(masChargeCode);
											//dgOrderdt.setOrderQty(quantityList.get(i));
											dgOrderdt.setBillingStatus(dgOrderBillingStatus);
											dgOrderdt.setCreatedby(userName);
											//dgOrderdt.setCreatedon(consultationDateToInsert);
											dgOrderdt.setCreatedon(HMSUtil.convertStringTypeDateToDateType(investigtionDate));
											
											dgOrderdt.setLastChgBy(user);
											dgOrderdt.setLastChgDate(consultationDateToInsert);
											dgOrderdt.setLastChgTime(consultationTime);
											
											// method written for taking out the values of mascharge
											// code and subcharge
									
											MasMainChargecode masMainChargecode = new MasMainChargecode();
											masMainChargecode.setId(mainChargeId);
											dgOrderdt.setMainChargecode(masMainChargecode);
											MasSubChargecode masSubChargecode = new MasSubChargecode();
											masSubChargecode.setId(subChargeId);
											dgOrderdt.setSubChargeid(masSubChargecode);
										
											List<DgMasInvestigation> invList = new ArrayList<DgMasInvestigation>();
											invList = session.createCriteria(DgMasInvestigation.class).add(Restrictions.eq("ChargeCode.Id", Integer.parseInt(chargeCodeIdList.get(i)))).list();
											int invId=0;
											for(DgMasInvestigation list: invList)
											{
												invId = list.getId();
											}
											dgOrderdt.setInvestigation(new DgMasInvestigation(invId));
											//dgOrderdt.setInvestigationToMH(referToMhList.get(i));
											dgOrderdt.setInvestigationToMh("n");
											//dgOrderdt.setReferToMh(referToMhList.get(i));
											dgOrderdt.setReferToMh("n");
											hbt.saveOrUpdate(dgOrderdt);
											
											totaldgDtIdList.add(dgOrderdt.getId());
						}//end date comparision
					}//inner dt loop
				//	headerinvestigationDateList.removeAll(Arrays.asList(investigtionDate));
				}
				}//outer loop for hd
				
				//totalDbHdIdList
			
				totaldgDtIdList.add(0);
				dbDgheaderList.add(0);
				List<DgOrderdt> deleteDgOrderDtList = session.createCriteria(DgOrderdt.class)
						//.add( Restrictions.not( Restrictions.in("Id", icdIdList)))
						.add(Restrictions.not(Restrictions.in("Id", totaldgDtIdList)))
						.add(Restrictions.in("Orderhd.Id",  dbDgheaderList))
						.list(); 
				//System.out.println("size "+icdIdList.size() +" opdpatientDetailId"+opdpatientDetailId );
				//System.out.println("deleteDisCodeIdList "+deleteDisCodeIdList.size());		   
				if(deleteDgOrderDtList.size() >0)
					{
						hbt.deleteAll(deleteDgOrderDtList);
					}
				
				if(dbDgheaderList.size()!=totalDbHdIdList.size())
				{
					
				List<Integer> deleteHdIdList = new ArrayList<>();
					List<DgOrderhd> deletedgHeaderList =null;
					for(int i:dbDgheaderList)
					{
						if(!totalDbHdIdList.contains(i))
						{
							deleteHdIdList.add(i);
					}
				}
			
					if(deleteHdIdList.size() >0){
					   deletedgHeaderList = session.createCriteria(DgOrderhd.class)
							.add(Restrictions.in("Id",  deleteHdIdList))
							.list();
					   
					   hbt.deleteAll(deletedgHeaderList);
					} 
			}
				
			}			else
					{
				
				 List<Integer> dbDgheaderList = null;
				 dbDgheaderList = session.createCriteria(DgOrderhd.class).add(
							Restrictions.eq("Createdon", consultationDateToInsert)).createAlias("Visit", "v").add(Restrictions.eq("v.Id",visitId))
							.setProjection(Projections.projectionList().add(Projections.groupProperty("Id")))
							.list();
				 
						if(dbDgheaderList.size()>0)
						{
							int dgOrderHdId =  box.getInt("dgOrderHdId");
							List<Integer> deleteInvestigation = new ArrayList <Integer>();
							 List<DgOrderdt> deletedgorderDtList = session.createCriteria(DgOrderdt.class)
									.createAlias("Orderhd", "hd")
									//.add(Restrictions.ne("OrderStatus", "p").ignoreCase())
				                  .add(Restrictions.in("hd.Id", dbDgheaderList)).list();
				       
							 List<DgOrderhd> deletedgorderHdList = session.createCriteria(DgOrderhd.class)
										//.add(Restrictions.ne("OrderStatus", "p").ignoreCase())
					                  .add(Restrictions.in("Id", dbDgheaderList)).list();
							 
				         if(deletedgorderDtList.size() >0)
				        	 hbt.deleteAll(deletedgorderDtList);
				         if(deletedgorderHdList.size() >0)
				        	 hbt.deleteAll(deletedgorderHdList);
				         
					
						}
					}
			
			
		/*	
			if (chargeCodeIdList.size() > 0) {
				
				int dgOrderHdId = 0;
			
				 List<Integer> sampleCollectedInvestigationIdList = new ArrayList<Integer>();
		
				if(box.get("dgOrderHdId")!=null && box.getInt("dgOrderHdId")!=0)
				{
					dgOrderHdId =  box.getInt("dgOrderHdId");
					 List<DgOrderdt> sampleCollectedInvestigationList = session.createCriteria(DgOrderdt.class)
							.createAlias("Orderhd", "hd")
							.add(Restrictions.ne("OrderStatus", "p").ignoreCase())
		                  .add(Restrictions.eq("hd.Id", dgOrderHdId)).list();
		         for(DgOrderdt dgdt : sampleCollectedInvestigationList)   
		         {
		        	 sampleCollectedInvestigationIdList.add(dgdt.getId());
		         }
				}
			   
				
			    
			    
			    
			    
				MasDepartment masDepartment = new MasDepartment();
				MasHospital masHospital = new MasHospital();
				Patient patient = new Patient();
				MasEmployee masEmployee2 = new MasEmployee();
				Visit visit = new Visit();
				
				PatientInvestigationHeader patientInvestigationHeader = new PatientInvestigationHeader();

				
				patientInvestigationHeader.setHin(patient);

				masDepartment.setId(departmentId);
				patientInvestigationHeader.setDepartment(masDepartment);
			
				visit.setId(visitId);
				patientInvestigationHeader.setVisit(visit);
				
				masHospital.setId(hospitalId);
				patientInvestigationHeader.setHospital(masHospital);
				patientInvestigationHeader.setStatus("p");
				patientInvestigationHeader
						.setInvestigationDate(consultationDateToInsert);
				patientInvestigationHeader.setInvestigationTime(consultationTime);
				patientInvestigationHeader.setClinicalNotes(clinicalNotes1);
				patientInvestigationHeader.setOpdPatientDetails(opdPatientDetails);
				hbt.save(patientInvestigationHeader);

				
				
				List<Patient> patientList = new ArrayList<Patient>();   
				String patientTypeNameForHAL = null;
				String patientTypeNameForOther = null;
				String dgOrderBillingStatus ="";
				
				Properties properties = new Properties();
				URL resourcePath = Thread.currentThread().getContextClassLoader()
						.getResource("adt.properties");
				try {
					properties.load(resourcePath.openStream());
					
					 patientTypeNameForHAL = properties.getProperty("patientTypeNameForHAL");;
					 patientTypeNameForOther = properties.getProperty("patientTypeNameForOther");;
				} catch (Exception e) {
					e.printStackTrace();
				}
				
				
				Criteria crit = session.createCriteria(Patient.class).add(
						Restrictions.eq("Id", hinId));
				patientList = crit.list();
							
				
				if(patientList.size()!=0)
				{
					if(patientList.get(0).getPatientType().getPatientTypeName().equals(patientTypeNameForHAL))
					{
						dgOrderBillingStatus ="y";
					}
					else if(patientList.get(0).getPatientType().getPatientTypeName().equals(patientTypeNameForOther))
					{
						if(patientList.get(0).getBillable().equals("y"))
						    dgOrderBillingStatus ="n";
						else if(patientList.get(0).getBillable().equals("n"))
							dgOrderBillingStatus ="y";
					}
				}
	
				//end code
				
			
				
				DgOrderhd dgOrderhd = null;
				
				if(dgOrderHdId!=0)
					dgOrderhd = (DgOrderhd)hbt.load(DgOrderhd.class,dgOrderHdId);
				else
					dgOrderhd = new DgOrderhd();
				
				dgOrderhd.setOrderDate(consultationDateToInsert);
				dgOrderhd.setOrderTime(time1);
				masHospital.setId(hospitalId);
				dgOrderhd.setHospital(masHospital);
				patient.setId(hinId);
				dgOrderhd.setHin(patient);
				masDepartment.setId(departmentId);
				dgOrderhd.setDepartment(masDepartment);
				if (empId != 0) {
					masEmployee2.setId(empId);
					dgOrderhd.setPrescribedBy(masEmployee2);
				}
			
				dgOrderhd.setBillingStatus(dgOrderBillingStatus);
				dgOrderhd.setPatientType("OP");
				dgOrderhd.setTestType("Regular");
				dgOrderhd.setCreatedby(userName);
				dgOrderhd.setCreatedon(consultationDateToInsert);

				//orderSeqNo = generateOrderNumber();
				if(dgOrderHdId==0)
				{
				  Map<String, Object> adMap = new HashMap<String, Object>();
			      adMap.put("tableObjectName", "DgOrderhd");            
		            adMap.put("isHospitalWise", "y");
		            adMap.put("hospitalId", hospitalId);
		            adMap.put("isYearly", "n");            
		            adMap.put("isMonthly", "n");
		            adMap.put("isPrefix", "n");
		
		            orderSeqNo = HMSUtil.generateTransactionSequence(adMap, session, hbt);
				   dgOrderhd.setOrderNo(orderSeqNo);
				}
				
				
				if (visitId != 0) {
					visit = new Visit();
					visit.setId(visitId);
					dgOrderhd.setVisit(visit);
				}
				dgOrderhd.setClinicalNote(clinicalNotes1);
				dgOrderhd.setOrderStatus("P");
				dgOrderhd.setLabOrderStatus("P");
				
				dgOrderhd.setLastChgBy(user);
				dgOrderhd.setLastChgDate(consultationDateToInsert);
				dgOrderhd.setLastChgTime(consultationTime);
				// dgOrderhd.setInvestigationRequestionNo(patientInvestigationHeader);
				//dgOrderhd.setOtherInvestigation((String)mapForDS.get("otherInvestigation"));
				if(mapForDS.get("otherInvestigation")!=null)
					dgOrderhd.setOtherInvestigation(mapForDS.get("otherInvestigation").toString().trim());
				 hbt.saveOrUpdate(dgOrderhd);
				//System.out.println("chargeCodeIdList.size()--"+chargeCodeIdList.size());
				 
				 List<Integer> totaldgDtIdList = sampleCollectedInvestigationIdList;
				 
				for (int i = 0; i < chargeCodeIdList.size(); i++) {
					
					//System.out.println("sampleCollectedInvestigationIdList "+sampleCollectedInvestigationIdList.size() +"dgorderDtList "+dgorderDtList.size());
					
					if(!sampleCollectedInvestigationIdList.contains(dgorderDtList.get(i)))
					{
						PatientInvestigationDetails patientInvestigationDetails = new PatientInvestigationDetails();
					patientInvestigationDetails
					.setInvestigationHeader(patientInvestigationHeader); 
					MasChargeCode masChargeCode = new MasChargeCode();
					//System.out.println("Integer.parseInt(chargeCodeIdList.get(i))--"+Integer.parseInt(chargeCodeIdList.get(i)));
					masChargeCode.setId(Integer.parseInt(chargeCodeIdList.get(i)));
					//System.out.println("Integer.parseInt(chargeCodeIdList.get(i))--");
					// patientInvestigationDetails.setChargeCode(masChargeCode);
					//patientInvestigationDetails.setQuantity(quantityList.get(i));
					//patientInvestigationDetails.setReferToMh(referToMhList.get(i));

					//patientInvestigationDetails.setClinicalNotes(clinicalList.get(i));
					// hbt.save(patientInvestigationDetails);

					DgOrderdt dgOrderdt = null;
					int a = dgorderDtList.get(i);
					//System.out.println("a "+dgorderDtList.get(i));
					if(dgorderDtList.get(i)!=0)
					{
						dgOrderdt = (DgOrderdt) hbt.load(DgOrderdt.class, dgorderDtList.get(i));
					}
					else
					{
						dgOrderdt = new DgOrderdt();
						dgOrderdt.setMsgSent("n");
					}
					
					System.out.println(dgOrderhd.getId() +" "+dgorderDtList.get(i));
					dgOrderdt.setOrderhd(dgOrderhd);
					masChargeCode.setId(Integer.parseInt(chargeCodeIdList.get(i)));
					dgOrderdt.setChargeCode(masChargeCode);
					//dgOrderdt.setOrderQty(quantityList.get(i));
					dgOrderdt.setBillingStatus(dgOrderBillingStatus);
					dgOrderdt.setCreatedby(userName);
					dgOrderdt.setCreatedon(consultationDateToInsert);
					dgOrderdt.setLastChgBy(user);
					dgOrderdt.setLastChgDate(consultationDateToInsert);
					dgOrderdt.setLastChgTime(consultationTime);
			
					// method written for taking out the values of mascharge
					// code and subcharge
					Map masChargeMap = getMasChargeCodeFromChargeId(Integer
							.parseInt(chargeCodeIdList.get(i)));
					MasChargeCode masChargeCodeObj = (MasChargeCode) masChargeMap
					.get("masChargeCode");
					int mainChargeId = masChargeCodeObj.getMainChargecode()
					.getId();
					int subChargeId = masChargeCodeObj.getSubChargecode()
					.getId();
					if (masChargeCodeObj.getMainChargecode()
							.getMainChargecodeCode().equalsIgnoreCase("Lab")) {
						dgOrderdt.setOrderStatus("P");
					} else {
						dgOrderdt.setOrderStatus("P");
					}
					MasMainChargecode masMainChargecode = new MasMainChargecode();
					masMainChargecode.setId(mainChargeId);
					dgOrderdt.setMainChargecode(masMainChargecode);
					MasSubChargecode masSubChargecode = new MasSubChargecode();
					masSubChargecode.setId(subChargeId);
					dgOrderdt.setSubChargeid(masSubChargecode);
					// Added By Vinay 
					List<DgMasInvestigation> invList = new ArrayList<DgMasInvestigation>();
					invList = session.createCriteria(DgMasInvestigation.class).add(Restrictions.eq("ChargeCode.Id", Integer.parseInt(chargeCodeIdList.get(i)))).list();
					int invId=0;
					for(DgMasInvestigation list: invList)
					{
						invId = list.getId();
					}
					dgOrderdt.setInvestigation(new DgMasInvestigation(invId));
					//dgOrderdt.setInvestigationToMH(referToMhList.get(i));
					dgOrderdt.setInvestigationToMh("n");
					//dgOrderdt.setReferToMh(referToMhList.get(i));
					dgOrderdt.setReferToMh("n");
					hbt.saveOrUpdate(dgOrderdt);
					 
					 totaldgDtIdList.add(dgOrderdt.getId());
					 
				 } 
					 
				}
				totaldgDtIdList.add(0);
				List<DgOrderdt> deleteDgOrderDtList = session.createCriteria(DgOrderdt.class)
						//.add( Restrictions.not( Restrictions.in("Id", icdIdList)))
						.add(Restrictions.not(Restrictions.in("Id", totaldgDtIdList)))
						.add(Restrictions.eq("Orderhd.Id", dgOrderHdId))
						.list(); 
				//System.out.println("size "+icdIdList.size() +" opdpatientDetailId"+opdpatientDetailId );
				//System.out.println("deleteDisCodeIdList "+deleteDisCodeIdList.size());		   
			if(deleteDgOrderDtList.size() >0)
				{
					hbt.deleteAll(deleteDgOrderDtList);
				}
			

			
				// for Lab Order Booking////////////
			}
			
			else
			{
				if(box.get("dgOrderHdId")!=null && box.getInt("dgOrderHdId")!=0)
				{
					int dgOrderHdId =  box.getInt("dgOrderHdId");
					List<Integer> deleteInvestigation = new ArrayList <Integer>();
					 List<DgOrderdt> deletedgorderDtList = session.createCriteria(DgOrderdt.class)
							.createAlias("Orderhd", "hd")
							//.add(Restrictions.ne("OrderStatus", "p").ignoreCase())
		                  .add(Restrictions.eq("hd.Id", dgOrderHdId)).list();
		       
					 List<DgOrderhd> deletedgorderHdList = session.createCriteria(DgOrderhd.class)
								//.add(Restrictions.ne("OrderStatus", "p").ignoreCase())
			                  .add(Restrictions.eq("Id", dgOrderHdId)).list();
					 
		         if(deletedgorderDtList.size() >0)
		        	 hbt.deleteAll(deletedgorderDtList);
		         if(deletedgorderHdList.size() >0)
		        	 hbt.deleteAll(deletedgorderHdList);
		         
			
				}
			}*/
			
			/*else if (chargeCodeIdList.size() == 0 && mapForDS.get("otherInvestigation")!=null && !(mapForDS.get("otherInvestigation")).equals("")) {
				MasDepartment masDepartment = new MasDepartment();
				MasHospital masHospital = new MasHospital();
				Patient patient = new Patient();
				MasEmployee masEmployee2 = new MasEmployee();

				PatientInvestigationHeader patientInvestigationHeader = new PatientInvestigationHeader();

				patient.setId(hinId);
				patientInvestigationHeader.setHin(patient);

				masDepartment.setId(departmentId);
				patientInvestigationHeader.setDepartment(masDepartment);
				Visit visit = new Visit();
				visit.setId(visitId);
				patientInvestigationHeader.setVisit(visit);
				
				masHospital.setId(hospitalId);
				patientInvestigationHeader.setHospital(masHospital);
				patientInvestigationHeader.setStatus("p");
				patientInvestigationHeader
						.setInvestigationDate(consultationDateToInsert);
				patientInvestigationHeader.setInvestigationTime(consultationTime);
				patientInvestigationHeader.setClinicalNotes(clinicalNotes1);
				patientInvestigationHeader.setOpdPatientDetails(opdPatientDetails);
				hbt.save(patientInvestigationHeader);

				DgOrderhd dgOrderhd = new DgOrderhd();
				dgOrderhd.setOrderDate(consultationDateToInsert);
				dgOrderhd.setOrderTime(time1);
				masHospital.setId(hospitalId);
				dgOrderhd.setHospital(masHospital);
				patient.setId(hinId);
				dgOrderhd.setHin(patient);
				masDepartment.setId(departmentId);
				dgOrderhd.setDepartment(masDepartment);
				if (empId != 0) {
					masEmployee2.setId(empId);
					dgOrderhd.setPrescribedBy(masEmployee2);
				}
				dgOrderhd.setPatientType("OP");
				dgOrderhd.setTestType("Regular");
				dgOrderhd.setCreatedby(userName);
				dgOrderhd.setCreatedon(consultationDateToInsert);

				//orderSeqNo = generateOrderNumber();
				dgOrderhd.setOrderNo(orderSeqNo);
				if (visitId != 0) {
					visit = new Visit();
					visit.setId(visitId);
					dgOrderhd.setVisit(visit);
				}
				dgOrderhd.setClinicalNote(clinicalNotes1);
				dgOrderhd.setOrderStatus("P");
				dgOrderhd.setLabOrderStatus("P");
				dgOrderhd.setLastChgBy(user);
				dgOrderhd.setLastChgDate(consultationDateToInsert);
				dgOrderhd.setLastChgTime(consultationTime);
				dgOrderhd.setInvestigationRequestionNo(patientInvestigationHeader);
				dgOrderhd.setOtherInvestigation((String)mapForDS.get("otherInvestigation"));
				hbt.save(dgOrderhd);
				
			}*/
			
			/*if(physioRequisitionHeaderId!=0){
				PhysioRequisitionHeader requisitionHeader = (PhysioRequisitionHeader)hbt.load(PhysioRequisitionHeader.class, physioRequisitionHeaderId);
				requisitionHeader.setOpdPatientDetails(opdPatientDetails);
				requisitionHeader.setReqTime(consultationTime);
				requisitionHeader.setLastChgTime(consultationTime);
				hbt.update(requisitionHeader);
				
			}*/
			
			//code answer of psychology questionnaire 
			 departmentCodeForPhychiatrist = HMSUtil.getProperties("adt.properties", "departmentCodeForPhychiatrist");
			if(visitsave.getDepartment().getDepartmentCode().equalsIgnoreCase(departmentCodeForPhychiatrist))
			{
				List<OpdQaTransation > questionnaireTransactionList = session.createCriteria(OpdQaTransation.class)
										.add(Restrictions.eq("Visit.Id", visitsave.getId())).list();
				for( OpdQaTransation qaT: questionnaireTransactionList)
				{
					qaT.setOpdPatientDetails(opdPatientDetails);
					hbt.update(qaT);
				}
				
			}
			
			
			currentDepartmentCode = visitsave.getDepartment().getDepartmentCode();
			
			visitsave.setPrescriptionCounter(precriptionCount+1);
			hbt.update(visitsave);
			
			// }
			succesfullyAdded = true;
			tx.commit(); 
		} catch (Exception e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();

		} finally {
			// --------Session Closing----------
		//	session.close();
		}
		
	}	
		else
			dublicateVisit= true;
			
			returnMap.put("dublicateVisit", dublicateVisit);
		returnMap.put("succesfullyAdded", succesfullyAdded);
		returnMap.put("orderSeqNo", orderSeqNo);
		returnMap.put("currentDepartmentCode", currentDepartmentCode);
		
		return returnMap;
		
	}


	@Override
	public List<PatientPrescriptionHeader> getPresVisitNoForIssueNo(String hinId) {
		Session session = (Session) getSession();
		List<PatientPrescriptionHeader> visitList = new ArrayList<PatientPrescriptionHeader>();
		
		
		String[] status = {"l","c"};
		visitList = session.createCriteria(PatientPrescriptionHeader.class).createAlias("Visit", "visit").
				createAlias("Hin", "hin").add(Restrictions.eq("hin.Id", Integer.parseInt(hinId)))
				.add(Restrictions.eq("Status", "I"))
				.add(Restrictions.isNull("Inpatient"))
				.add(Restrictions.isNotNull("DispensaryIssueNo"))
				//.add(Restrictions.isNull("FacStatus"))
				.addOrder(Order.desc("visit.VisitDate")).list();
		return visitList;
	}
	
	@Override
	public Map<String, Object> getOPDPACSCommunication(Map<String, Object> dataMap) {
		Map<String, Object> map =new HashMap<String, Object>();
		List<MasEmployeeDepartment> empDepartmentList = new ArrayList<MasEmployeeDepartment>();
		List<RadiologyCommunication> rcList = new ArrayList<RadiologyCommunication>();
	
		
		Session session = (Session) getSession();
		int patientId = 0;
		int opdDocId=0;
		String opdRemarks = null;
		if(dataMap.get("patientId")!=null){
			 patientId=(Integer)dataMap.get("patientId");
		 } 
	
		 if(dataMap.get("opdDocId")!=null){
			
			 opdDocId=(Integer)dataMap.get("opdDocId");
		 }
		 
		 
		 if(dataMap.get("opdRemarks")!=null){
			 opdRemarks=(String)dataMap.get("opdRemarks");
		 }
	
		 String query = "select p.pk,p.pat_id,p.pat_name, p.pat_sex,p.created_time,s.study_desc from  patient p  inner join study s on p.pk = s.patient_fk where p.pk = "+patientId;
			try{
				Connection con=getPacsConnection(); 
				Statement stmt=con.createStatement();  
				ResultSet rs=stmt.executeQuery(query);  
				while(rs.next()) {
					 
					String patientsId=rs.getString("pk");
					String appId=rs.getString("pat_id");
					String pName=rs.getString("pat_name").replace("^^^^", "#");
					String[] patientDetail=pName.split("#");
					String patientName=patientDetail[0]; 
					String patientSex=rs.getString("pat_sex");
					Date date=rs.getDate("created_time");
					String patientsType=rs.getString("study_desc");
					
					map.put("patientsReg", appId);
					map.put("patientsName", patientName);
					map.put("patientsSex", patientSex);
					
					map.put("patientsType", patientsType); 
					map.put("patientsId", patientsId); 
				}
				con.close();  
				String radioDeptCode = HMSUtil.getProperties("adt.properties", "RadioDeparmentCode");
				String empCategoryCodeForDoctor =HMSUtil.getProperties("adt.properties", "empCategoryCodeForDoctor");
				empDepartmentList = session.createCriteria(MasEmployeeDepartment.class)
						   .createAlias("Employee", "emp")	
						   .createAlias("emp.EmpCategory", "ec")
						   .createAlias("Department", "dept")	
						  .add(Restrictions.eq("dept.DepartmentCode",radioDeptCode))
						// .add(Restrictions.eq("emp.Hospital.Id",hospitalId))
						.add(Restrictions.eq("ec.EmpCategoryCode", empCategoryCodeForDoctor))
						//.add(Restrictions.in("Id", empList))
						.list();

				rcList = session.createCriteria(RadiologyCommunication.class)
						   .add(Restrictions.eq("FromDoctor.Id",opdDocId))
						    .add(Restrictions.eq("PatientId",patientId))
						.list();
				
			
			
			}catch (Exception e){
				e.printStackTrace();
			}
			map.put("empDepartmentList", empDepartmentList);
			map.put("rcList", rcList);
		return map;
	}
	public Map<String, Object> sendMessageToRadiology(Map<String, Object> dataMap) {
		Map<String,Object> map = new HashMap<String,Object>();
		boolean succesfullyAdded = false;
		Session	 session=(Session)getSession();
		Transaction tx=session.beginTransaction();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Map<String, Object> utilMap = new HashMap<String, Object>();
	 	utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		Date currenDate = HMSUtil
				.convertStringTypeDateToDateType(utilMap.get("currentDate").toString());
	 	String currentTime = (String) utilMap.get("currentTime");
		int patientId = 0;
		int opdDocId=0;
		int radioDocId =0;
		String opdRemarks = null;
		if(dataMap.get("patientId")!=null){
			 patientId=(Integer)dataMap.get("patientId");
		 } 
	
		 if(dataMap.get("opdDocId")!=null){
			
			 opdDocId=(Integer)dataMap.get("opdDocId");
		 }
		 if(dataMap.get("radioDocId")!=null){
				
			 radioDocId=(Integer)dataMap.get("radioDocId");
		 }	
		 if(dataMap.get("opdRemarks")!=null){
			 opdRemarks=(String)dataMap.get("opdRemarks");
		 }
		try
		{
		  RadiologyCommunication rc = new RadiologyCommunication();
		  rc.setFlag("n");
		  rc.setPatientId(patientId);
		 MasEmployee me1 = new MasEmployee();
		me1.setId(opdDocId);
		 rc.setFromDoctor(me1);
		 MasEmployee me2 = new MasEmployee();
		 me2.setId(radioDocId);
		  rc.setToRadioDoctor(me2);
		  rc.setOpdDoctorRemarks(opdRemarks);
		  rc.setOpdRemarksDate(currenDate);
		  rc.setOpdRemarksTime(currentTime);
		  
		  
		  hbt.save(rc);
		  tx.commit();
		  succesfullyAdded = true;
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		map.put("succesfullyAdded", succesfullyAdded);
		return map;
	}
	
	
	
	@Override
	public Map<String, Object> getRadiologyMessageList(Map<String, Object> dataMap) {
		Map<String, Object> map =new HashMap<String, Object>();
		List<MasEmployeeDepartment> empDepartmentList = new ArrayList<MasEmployeeDepartment>();
		List<RadiologyCommunication> rcList = new ArrayList<RadiologyCommunication>();
	
		
		Session session = (Session) getSession();
		int patientId = 0;
		int opdDocId=0;
		String opdRemarks = null;
		if(dataMap.get("patientId")!=null){
			 patientId=(Integer)dataMap.get("patientId");
		 } 
	
		 if(dataMap.get("opdDocId")!=null){
			
			 opdDocId=(Integer)dataMap.get("opdDocId");
		 }
		 
		 
		 if(dataMap.get("opdRemarks")!=null){
			 opdRemarks=(String)dataMap.get("opdRemarks");
		 }
	
		 String query = "select p.pk,p.pat_id,p.pat_name, p.pat_sex,p.created_time,s.study_desc from  patient p  inner join study s on p.pk = s.patient_fk where p.pk = "+patientId;
			try{
				Connection con=getPacsConnection(); 
				Statement stmt=con.createStatement();  
				ResultSet rs=stmt.executeQuery(query);  
				while(rs.next()) {
					 
					String patientsId=rs.getString("pk");
					String appId=rs.getString("pat_id");
					String pName=rs.getString("pat_name").replace("^^^^", "#");
					String[] patientDetail=pName.split("#");
					String patientName=patientDetail[0]; 
					String patientSex=rs.getString("pat_sex");
					Date date=rs.getDate("created_time");
					String patientsType=rs.getString("study_desc");
					
					map.put("patientsReg", appId);
					map.put("patientsName", patientName);
					map.put("patientsSex", patientSex);
					
					map.put("patientsType", patientsType); 
					map.put("patientsId", patientsId); 
				}
				con.close();  
				String radioDeptCode = HMSUtil.getProperties("adt.properties", "RadioDeparmentCode");
				String empCategoryCodeForDoctor =HMSUtil.getProperties("adt.properties", "empCategoryCodeForDoctor");
				empDepartmentList = session.createCriteria(MasEmployeeDepartment.class)
						   .createAlias("Employee", "emp")	
						   .createAlias("emp.EmpCategory", "ec")
						   .createAlias("Department", "dept")	
						  .add(Restrictions.eq("dept.DepartmentCode",radioDeptCode))
						// .add(Restrictions.eq("emp.Hospital.Id",hospitalId))
						.add(Restrictions.eq("ec.EmpCategoryCode", empCategoryCodeForDoctor))
						//.add(Restrictions.in("Id", empList))
						.list();

				rcList = session.createCriteria(RadiologyCommunication.class)
						   .add(Restrictions.eq("FromDoctor.Id",opdDocId))
						    .add(Restrictions.eq("PatientId",patientId))
						.list();
				
			
			
			}catch (Exception e){
				e.printStackTrace();
			}
			map.put("empDepartmentList", empDepartmentList);
			map.put("rcList", rcList);
		return map;
	}
	public Map<String, Object> submitRadioResponse(Map<String, Object> dataMap) {
		Map<String,Object> map = new HashMap<String,Object>();
		boolean succesfullyAdded = false;
		Session	 session=(Session)getSession();
		Transaction tx=session.beginTransaction();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Map<String, Object> utilMap = new HashMap<String, Object>();
	 	utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		Date currenDate = HMSUtil
				.convertStringTypeDateToDateType(utilMap.get("currentDate").toString());
	 	String currentTime = (String) utilMap.get("currentTime");
		//int patientId = 0;
		//int opdDocId=0;
		int radioDocId =0;
		int radioCommId = 0;
		String response = null;
/*		if(dataMap.get("patientId")!=null){
			 patientId=(Integer)dataMap.get("patientId");
		 } */
	
	/*	 if(dataMap.get("opdDocId")!=null){
			
			 opdDocId=(Integer)dataMap.get("opdDocId");
		 }*/
		 if(dataMap.get("radioCommId")!=null){
				
			 radioCommId=(Integer)dataMap.get("radioCommId");
		 }	
		 if(dataMap.get("radioDocId")!=null){
				
			 radioDocId=(Integer)dataMap.get("radioDocId");
		 }	
		// System.out.println("radioDocId="+radioDocId +" d"+dataMap.get("radioDocId"));
		// System.out.println("opdDocId="+opdDocId );
		 if(dataMap.get("response")!=null){
			 response=(String)dataMap.get("response");
		 }
		 if(dataMap.get("response")!=null){
			 response=(String)dataMap.get("response");
		 }
		try
		{
			if(radioCommId!=0)
			{
		  RadiologyCommunication rc = (RadiologyCommunication) hbt.load(RadiologyCommunication.class, radioCommId);
		  rc.setFlag("y");
	 
		  rc.setRadioDoctorRemarks(response);
		  rc.setOpdRemarksDate(currenDate);
		  rc.setOpdRemarksTime(currentTime);
		  
		  
		  hbt.update(rc);
		  tx.commit();
		  succesfullyAdded = true;
			}
		  
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		map.put("succesfullyAdded", succesfullyAdded);
		return map;
	}
	
	@Override
	public List<PacsPatient> getAllPacsPatients(Map<String, Object> map) {
		List<PacsPatient> patients=new ArrayList<PacsPatient>();
		Connection con=getPacsConnection();
		String appUrl=getApplicationWebViewerURL();
		String studyUrl=getApplicationStudyWebViewerURL();
		int startPageIndex=0;
		int recordsPerPage=0;
		String qr="";
		String pacsRights="";
		String shortType="desc";
		if(map.get("startPageIndex")!=null){
			startPageIndex=(Integer)map.get("startPageIndex");
		}
		if(map.get("recordsPerPage")!=null){
			recordsPerPage=(Integer)map.get("recordsPerPage");
		}
		if(map.get("query")!=null){
			qr=(String)map.get("query");
		} 
		if(map.get("shortType")!=null){
			shortType=(String)map.get("shortType");
		} 
		if(map.get("pacsRights")!=null){
			pacsRights=(String)map.get("pacsRights");
		} 
		 
		if(shortType.equals("null")){	shortType="desc";		}
		
		String searchImg="<img src='../jsp/pacs/images/search.png' title='Open Image Selection' />";
		String viewer="<img src='../jsp/pacs/images/viewer.png' title='Open Study In Web Viewer' onclick='cngRowColor(this)' />";
		String studyviewer="<img src='../jsp/pacs/images/studyviewer.png' title='Open All Study In Web Viewer' onclick='cngRowColor(this)' />";
		
		String query = "select p.pk,p.pat_id,p.pat_name, p.pat_sex,p.created_time,p.report_status,p.history_status,p.last_cng_by,s.study_iuid,s.study_desc,s.mods_in_study from  patient p  inner join study s on p.pk = s.patient_fk where p.pk in (select patient_fk from study)  "+qr+" order by p.created_time "+shortType;
		//System.out.println(query);
		//String query = "select  pk,pat_id, pat_name, pat_sex, created_time::timestamp::date from  patient where pk in (select patient_fk from study) "+qr+" order by created_time::timestamp::date desc offset "+startPageIndex+" limit "+recordsPerPage;
		 
		try{
		Statement stmt=con.createStatement();  
		ResultSet rs=stmt.executeQuery(query);  
		while(rs.next()) {
			PacsPatient pacsPatient=new PacsPatient();
			String pName=rs.getString("pat_name").replace("^^^^", "#");
			String[] patientDetail=pName.split("#");
			String patientName=patientDetail[0].replaceAll("[^a-zA-Z0-9]", " ");
			String appId=rs.getString("pat_id");
			String studyId=rs.getString("study_iuid");
			String patientSex=rs.getString("pat_sex");
			String investigation="";
			String reportstatus=rs.getString("report_status");
			String historystatus=rs.getString("history_status");
			String doctorName=rs.getString("last_cng_by");
			if(rs.getString("study_desc")!=null){investigation=rs.getString("study_desc");} 
			int patientId=rs.getInt("pk");
			Timestamp date = rs.getTimestamp("created_time");
			if(pacsRights.equals("d")){	pacsPatient.setPatientId("<lable style='cursor: pointer;' title='Delete Study' ondblclick='DeleteStudy("+patientId+")'>"+appId+"</lable>");}
			else{pacsPatient.setPatientId(appId);}
			if(pacsRights.equals("y") || pacsRights.equals("d")){	pacsPatient.setPatientName("<lable style='cursor: pointer;' title='Study Add to Academics' ondblclick='AddToAcademicsStudy("+patientId+")'>"+patientName+"</lable>");}
			else{pacsPatient.setPatientName(patientName);} 
			pacsPatient.setGender(patientSex); 
			pacsPatient.setStudyurl("<a href='"+appUrl+appId+"'>"+studyviewer+"</a>");
			pacsPatient.setWebViewer("<a href='"+studyUrl+studyId+"'>"+viewer+"</a>");
			pacsPatient.setImg(searchImg);
			pacsPatient.setCreateDate(date); 
			pacsPatient.setInvestigation(investigation);
			pacsPatient.setMessage("<img src='../jsp/pacs/images/msg1.png' width='20px' height='20'style='cursor: pointer;' title='Radiology-OPD communication' onclick='openPopupForPatientPacsCommunication("+patientId+")'/>");
			pacsPatient.setModality(rs.getString("mods_in_study"));
			if(doctorName==null){pacsPatient.setReportedBy("");}
			else{pacsPatient.setReportedBy(doctorName);}
			
			
			
			if(historystatus.equals("n")){
				pacsPatient.setHistory("<img src='../jsp/pacs/images/historyred.png' style='cursor: pointer;' title='Open History' onclick='openPopupForPatientPacsHistory("+patientId+")'/>");
				//pacsPatient.setHistory("<img src='../jsp/pacs/images/historygreen.png' style='cursor: pointer;' title='Radiology-OPD communication' onclick='openPopupForPatientPacsCommunication("+patientId+")'/>");
			}else{
				pacsPatient.setHistory("<img src='../jsp/pacs/images/historygreen.png' style='cursor: pointer;' title='Open History' onclick='openPopupForPatientPacsHistory("+patientId+")'/>");
				//pacsPatient.setHistory("<img src='../jsp/pacs/images/historygreen.png' style='cursor: pointer;' title='Radiology-OPD communication' onclick='openPopupForPatientPacsCommunication("+patientId+")'/>");
			}
			if(reportstatus.equals("0")){
				pacsPatient.setReports("<img src='../jsp/pacs/images/reportred.png' style='cursor: pointer;' title='Open Report' onclick='openPopupForPatientPacsReport("+patientId+")'/>");
				pacsPatient.setReportstatus("UNREPORTED");
			}
			else if(reportstatus.equals("1")){
				pacsPatient.setReports("<img src='../jsp/pacs/images/report.png' style='cursor: pointer;' title='Open Report' onclick='openPopupForPatientPacsReport("+patientId+")'/>");
				pacsPatient.setReportstatus("DRAFTED");  
			}
			else if(reportstatus.equals("2")){
				pacsPatient.setReports("<img src='../jsp/pacs/images/reportgreen.png' style='cursor: pointer;' title='Open Report' onclick='openPopupForPatientPacsReport("+patientId+")'/>");
				pacsPatient.setReportstatus("REVIEWED");  
			}
			else if(reportstatus.equals("3")){
				pacsPatient.setReports("<img src='../jsp/pacs/images/reportblue.png' style='cursor: pointer;' title='Open Report' onclick='openPopupForPatientPacsReport("+patientId+")'/>");
				pacsPatient.setReportstatus("SIGN OFF");  
			}
			patients.add(pacsPatient);
		}
			con.close(); 
			  
		}catch (Exception e){
			e.printStackTrace();
		}
		return patients;
	}

	// For Application Connector
	public static String getApplicationStudyWebViewerURL(){
		String studyURL="";
		Properties prop = new Properties();
		URL resourcePath = Thread.currentThread().getContextClassLoader()
				.getResource("jdbc.properties");
		try{
			prop.load(new FileInputStream(new File(resourcePath.getFile())));
			studyURL=prop.get("pacs.application.connection")+"/weasis-pacs-connector/viewer?studyUID=";
		}catch(Exception e){e.printStackTrace();}
		return studyURL;
	}
	// For Application Connector
		public static String getApplicationWebViewerURL(){
			String appURL="";
			Properties prop = new Properties();
			URL resourcePath = Thread.currentThread().getContextClassLoader()
					.getResource("jdbc.properties");
			try{
				prop.load(new FileInputStream(new File(resourcePath.getFile())));
				appURL=prop.get("pacs.application.connection")+"/weasis-pacs-connector/viewer?patientID=";
			}catch(Exception e){e.printStackTrace();}
			return appURL;
	}
		
		@Override
		public int getPacsPatientsCount(Map<String, Object> map) {
			int count=0;
			String qr="";
			if(map.get("query")!=null){
				qr=(String)map.get("query");
			}
			try 
			{
				Statement stmt = getPacsConnection().createStatement();
				ResultSet rs = stmt.executeQuery("select count(distinct pat_id) AS COUNT from  patient where pk in (select patient_fk from study) "+qr);		
				while (rs.next()) 
				{
					count=rs.getInt("COUNT");
				}
			} 
			catch (SQLException e) 
			{
				System.err.println(e.getMessage());
			}
			return count;
		}
		
		public Map<String, Object> showProcedureCalenderDoctorWise(Map<String, Object> mapForDS) {
			 Session session = (Session) getSession();
			    Map<String, Object> map = new HashMap<String, Object>();
			    List<TherapyDetails> bookList = new ArrayList<TherapyDetails>();
			    //List<OtMasUnitDay> otMasUnitDayList=new ArrayList<OtMasUnitDay>();
			    List<MasOt> masOtList = new ArrayList<MasOt>();
			    int hospitalId=(Integer)mapForDS.get(HOSPITAL_ID);
			    int deptId=(Integer)mapForDS.get(DEPARTMENT_ID);
			    //int empId=(Integer)mapForDS.get("empId");
			    int month=(Integer)mapForDS.get("month");
			    int year=(Integer)mapForDS.get("year");
			    int ot=(Integer)mapForDS.get(OT_ID);
			    Calendar calendar=Calendar.getInstance();
			    calendar.set(Calendar.DAY_OF_MONTH, 1); 
			    calendar.set(Calendar.MONTH, month); 
			    calendar.set(Calendar.YEAR, year);
			    String sessionDepartmentCode = null;
			/*    if(mapForDS.get("sessionDepartmentCode")!=null)
			    sessionDepartmentCode = (String)mapForDS.get("sessionDepartmentCode");*/
			    
			    List<MasOtDistribution> distributionList  = new ArrayList<MasOtDistribution>();
			    distributionList = session.createCriteria(MasOtDistribution.class)
						.add(Restrictions.eq("Hospital.Id", hospitalId))
						.list();
			    
			    Set<String> workingDays=new HashSet<String>();
				for (MasOtDistribution day : distributionList) {
					workingDays.add(day.getDays());
				}
		
				Date fromDate=calendar.getTime();
				
				Date toDate=null;
				while (month==calendar.get(Calendar.MONTH)) {
					toDate=calendar.getTime();
					calendar.add(Calendar.DAY_OF_MONTH, 1);
				}
			
				
				Criteria crit = session.createCriteria(TherapyDetails.class)
						.createAlias("ProcedureHeader", "hd").createAlias("hd.Visit", "v")
						.add(Restrictions.between("AppointmentDate",fromDate,toDate))
					.createAlias("v.Department", "dept")
					.add(Restrictions.eq("dept.Id",deptId));
				
		/*		if(sessionDepartmentCode!=null)
				{
					crit.createAlias("ProcedureHeader", "hd").createAlias("hd.Visit", "v")
					.createAlias("v.Department", "dept")
					.add(Restrictions.eq("dept.DepartmentCode",sessionDepartmentCode));
					
				}*/
					
				bookList =  crit.list();
				
		
			    map.put("bookList", bookList);
			    map.put("workingDays", workingDays);
			    map.put("masOtList", masOtList);
		
			return map;
		}
		
		public Map<String, Object> getPreviousTherapy(Map<String, Object> mapForDs) {
			 Session session = (Session) getSession();
		    Map<String, Object> map = new HashMap<String, Object>();
		    int hinId = (Integer) mapForDs.get("hinId");
		    int deptId = (Integer) mapForDs.get("deptId");
			//int hospitalId = (Integer) mapForDs.get("hospitalId");
			   List<TherapyHeader> therapyList  =null;
			try
			{
				
		/*		List<Integer> li = session.createCriteria(TherapyDetails.class)
						.createAlias("ProcedureHeader", "hd").createAlias("hd.Visit", "v")
						.createAlias("v.Department", "dept")
						.add(Restrictions.eq("dept.Id",deptId))
						.add(Restrictions.eq("hd.Hin.Id", 2238))
						.setProjection(Projections.projectionList().add(Projections.groupProperty("Procedure")))
							.list();
			
				if(li.size()>0)
				{
					therapyList = session.createCriteria(TherapyDetails.class)
					.createAlias("ProcedureHeader", "hd").createAlias("hd.Visit", "v")
					.createAlias("v.Department", "dept")
					.add(Restrictions.eq("dept.Id",deptId))
					.add(Restrictions.eq("hd.Hin.Id", 2238))
					.setProjection(Projections.projectionList().add(Projections.groupProperty("Procedure")))
						.list();
				}*/
				
				therapyList = session.createCriteria(TherapyHeader.class)
						      .createAlias("Visit", "v")
						      .createAlias("v.Department", "dept")
						       .add(Restrictions.eq("dept.Id",deptId))
							   .add(Restrictions.eq("Hin.Id", hinId))
							     .list();
			
			}
			catch(Exception e){
			e.printStackTrace();}
			map.put("therapyList", therapyList);
		    return map;
			
		}

		@Override
		public Map<String, Object> getTherapyWaitingList(Map<String, Object> map) {
			Integer hospitalId=(Integer)map.get("hospitalId");
			int deptId=(Integer)map.get("deptId");
			Date FromDateId=(Date)map.get("FromDateId");
			Date ToDateId=(Date)map.get("ToDateId");
			Session session = (Session)getSession();
			Criteria crit = null;
			Criteria critApp = null;
			List<MasDepartment> masDeptList = new ArrayList<MasDepartment>();
			masDeptList = session.createCriteria(MasDepartment.class)
					  .add(Restrictions.eq("Id", deptId)).list();
			
			List<TherapyDetails> therapyDetails = new ArrayList<TherapyDetails>();
			crit = session.createCriteria(TherapyDetails.class)
					.createAlias("ProcedureHeader", "ph")
					.createAlias("Procedure", "nr")
					.createAlias("ph.Hospital", "h")
						.createAlias("ph.Visit", "v")
					.createAlias("v.Department", "dept")
					.add(Restrictions.eq("dept.Id",deptId))
					.add(Restrictions.eq("h.Id",hospitalId))
					.add(Restrictions.eq("nr.NursingType","t"))
					.add(Restrictions.eq("Status", 'n').ignoreCase())
					.add(Restrictions.eq("ph.Status", 'n').ignoreCase());
		/*	if(FromDateId!=null && ToDateId!=null){
				crit  = crit.add(Restrictions.between("AppointmentDate", FromDateId, ToDateId));
			}
			*/
			
			if(FromDateId!=null){
				crit  = crit.add(Restrictions.eq("AppointmentDate", FromDateId));
			}
			else{
				crit  = crit.add(Restrictions.eq("AppointmentDate", new Date()));}
			
			
			therapyDetails = crit.list();
			List<Integer> visitList = new ArrayList<Integer>(new HashSet());
			for(TherapyDetails listA: therapyDetails)
			{
				visitList.add(listA.getProcedureHeader().getVisit().getId());
			}
			therapyDetails.clear();
			List<Visit>pendingNursingList = new ArrayList<Visit>();		
			if(visitList.size()>0){
				pendingNursingList = session.createCriteria(Visit.class).add(Restrictions.in("Id", visitList)).list();
				therapyDetails.clear();
			}

			if(masDeptList.size() >0)
				map.put("departmentCode", masDeptList.get(0).getDepartmentCode());
			
			map.put("pendingNursingList", pendingNursingList);
			return map;
		}
		@Override
		public Map<String, Object> getDentalProcedureWaitingList(Map<String, Object> map) {
			Integer hospitalId=(Integer)map.get("hospitalId");
			int deptId=(Integer)map.get("deptId");
			Date FromDateId=(Date)map.get("FromDateId");
			Date ToDateId=(Date)map.get("ToDateId");
			Session session = (Session)getSession();
			Criteria crit = null;
			Criteria critApp = null;
			List<MasDepartment> masDeptList = new ArrayList<MasDepartment>();
			masDeptList = session.createCriteria(MasDepartment.class)
					  .add(Restrictions.eq("Id", deptId)).list();
		
			List<TherapyDetails> therapyDetails = new ArrayList<TherapyDetails>();
			crit = session.createCriteria(TherapyDetails.class)
					.createAlias("ProcedureHeader", "ph")
					.createAlias("Procedure", "nr")
					.createAlias("ph.Hospital", "h")
					.createAlias("ph.Visit", "v")
					.createAlias("v.Department", "dept")
					.add(Restrictions.eq("dept.Id",deptId))
					.add(Restrictions.eq("h.Id",hospitalId))
					.add(Restrictions.eq("nr.NursingType","d"))
					.add(Restrictions.eq("ph.Status", 'n').ignoreCase());
	/*		if(FromDateId!=null && ToDateId!=null){
				crit  = crit.add(Restrictions.between("AppointmentDate", FromDateId, ToDateId));
			}
			*/
			
			if(FromDateId!=null){
				crit  = crit.add(Restrictions.eq("AppointmentDate", FromDateId));
			}
			else{
				crit  = crit.add(Restrictions.eq("AppointmentDate", new Date()));}
			therapyDetails = crit.list();
			List<Integer> visitList = new ArrayList<Integer>(new HashSet());
			for(TherapyDetails listA: therapyDetails)
			{
				visitList.add(listA.getProcedureHeader().getVisit().getId());
			}
			therapyDetails.clear();
			List<Visit>pendingNursingList = new ArrayList<Visit>();		
			if(visitList.size()>0){
				pendingNursingList = session.createCriteria(Visit.class).add(Restrictions.in("Id", visitList)).list();
				therapyDetails.clear();
			}
	
			if(masDeptList.size() >0)
				map.put("departmentCode", masDeptList.get(0).getDepartmentCode());
			map.put("pendingNursingList", pendingNursingList);
			return map;
		}
		@Override
		public Map<String, Object> getTherapyDetailsList(Map<String, Object> map) {
			String hinNo=(String)map.get("hinNo");
			Integer injAppId=(Integer)map.get("injAppId");
			Integer departmentId=(Integer)map.get("departmentId");
			Integer hospitalId=(Integer)map.get("hospitalId");
			int visitId=(Integer)map.get("visitId");
			Session session = (Session) getSession();
			List<Visit> visitList = new ArrayList<Visit>();
			visitList= session.createCriteria(Visit.class).add(Restrictions.eq("Id", visitId)).list();
			
			List<TherapyDetails> pendingTherapyList = new ArrayList<TherapyDetails>();
			pendingTherapyList = session.createCriteria(TherapyDetails.class)
							.createAlias("ProcedureHeader", "ph")
							.createAlias("ph.Hospital", "h")
							.createAlias("ph.Visit", "v")
							.add(Restrictions.eq("v.Id", visitId))
							.add(Restrictions.eq("h.Id", hospitalId))
							//.add(Restrictions.eq("Status", "n"))
							/*.add(Restrictions.between("ph.RequisitionDate", fromDate, toDate))*/.list();
			
			//map.put("doctorList", doctorList);
		//	map.put("procedureList", procedureList);	
			map.put("visitList",visitList);
			map.put("pendingProcList", pendingTherapyList);
			
			return map;
		}	

		@Override
		public Map<String, Object> saveTherapyDetails(Map<String, Object> map) {
			
			Map<String,Object> datamap = new HashMap<String,Object>();
			Transaction tx= null;
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			String flag="n";
			Session session = (Session)getSession();
			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");
			Box box = (Box)map.get("box");
			int Id= box.getInt("therapyDtId");		
			String remarks = box.getString("therapyRemarks");
			String nextAppoint = box.getString("nextAppointment");
			String nextAppointTime = box.getString("nextAppointTime");
		
			try
			{
				tx=session.beginTransaction();
				if(session.createCriteria(TherapyDetails.class).add(Restrictions.eq("Id", Id)).add(Restrictions.eq("Status", "n")).list().size()>0)
				{
			TherapyDetails procedureDetails = (TherapyDetails) hbt.load(TherapyDetails.class, Id);
			procedureDetails.setTherapyRemarks(remarks);
			procedureDetails.setProcedureDate(HMSUtil.convertStringTypeDateToDateType(currentDate));
			procedureDetails.setProcedureTime(time);
			procedureDetails.setStatus("y");
			procedureDetails.setFinalProcedureStatus("n");
			
			hbt.update(procedureDetails);
				
			if(nextAppoint!=null && !nextAppoint.isEmpty())
			{
				
				TherapyDetails newDetailsId = new TherapyDetails();
				newDetailsId.setProcedureHeader(procedureDetails.getProcedureHeader());
				newDetailsId.setProcedure(procedureDetails.getProcedure());
				newDetailsId.setStatus("n");
				newDetailsId.setFinalProcedureStatus("n");
				newDetailsId.setOpdRemarks(procedureDetails.getOpdRemarks());
				newDetailsId.setAppointmentDate(HMSUtil.convertStringTypeDateToDateType(nextAppoint));
				newDetailsId.setAppointmentTime(nextAppointTime);
				hbt.save(newDetailsId);
			}
			else
			{
				
				List<TherapyDetails> listA = new ArrayList<TherapyDetails>();
				
				Criteria cr = null;
				cr = session.createCriteria(TherapyDetails.class).createAlias("ProcedureHeader", "header").add(Restrictions.eq("header.Id", procedureDetails.getProcedureHeader().getId()));
				cr.createAlias("Procedure", "nr").add(Restrictions.eq("nr.Id", procedureDetails.getProcedure().getId()));
				listA = cr.list();
				
				for(TherapyDetails dt: listA)
				{
					TherapyDetails dt1 = new TherapyDetails();
					dt1 =(TherapyDetails) hbt.get(TherapyDetails.class, dt.getId());
					if(dt1 != null)
					{
						dt1.setFinalProcedureStatus("y");
						hbt.update(dt1);
						hbt.refresh(dt1);
					}
				}
				
				if(session.createCriteria(TherapyDetails.class).createAlias("ProcedureHeader", "header").add(Restrictions.eq("header.Id", procedureDetails.getProcedureHeader().getId()))
				.add(Restrictions.eq("FinalProcedureStatus", "n")).list().size()==0)
				{
					TherapyHeader therapyHeader = (TherapyHeader) hbt.load(TherapyHeader.class, procedureDetails.getProcedureHeader().getId());
					therapyHeader.setStatus("y");
					hbt.save(therapyHeader);
				}
				
			}
			
	
			flag = "y";
			 tx.commit();
				}
				else
					flag = "d";
			}
			
			catch(Exception e)
			{
				e.printStackTrace();
				tx.rollback();
			}
			 datamap.put("flag", flag);
			 return datamap;
			
		}

		public Map<String, Object> getPreviousTherapyDetails(Map<String, Object> map) {
			
			int procedureId=(Integer)map.get("procedureId");
			int therapuHdId=(Integer)map.get("therapuHdId");
			Integer hospitalId=(Integer)map.get("hospitalId");
			Session session = (Session) getSession();		
		
			List<TherapyDetails> previousTherapyList = new ArrayList<TherapyDetails>();
			Criteria crit = session.createCriteria(TherapyDetails.class)
							.createAlias("ProcedureHeader", "ph")
							.createAlias("Procedure", "proc")
							.createAlias("ph.Hospital", "h")
					.add(Restrictions.eq("ph.Id", therapuHdId))
					.add(Restrictions.eq("h.Id", hospitalId))
							.add(Restrictions.eq("h.Id", hospitalId));
							/*.add(Restrictions.between("ph.RequisitionDate", fromDate, toDate))*/
			if(procedureId!=0)
				crit.add(Restrictions.eq("proc.Id", procedureId));
			previousTherapyList = crit.list();
			map.put("previousTherapyList", previousTherapyList);
			
			return map;
		}	
		@Override
		public Map<String, Object> checkForAlreadyPrescibedInvestigation(Map<String, Object> dataMap) {
			Map<String,Object>map=new HashMap<String,Object>();
			Session session=(Session)getSession();
			int chargeCode=0;
			int hinId=0;
			int hospitalId=0;
			String investigationDate= (String)dataMap.get("investigationDate");
			chargeCode=(Integer)dataMap.get("chargeCode");
			hinId=(Integer)dataMap.get("hinId");
			hospitalId=(Integer)dataMap.get("hospitalId");
			//itemName=getItemName(itemId);
			//System.out.println(""+itemName);
						
			List<DgOrderdt> dgOderDtList= null;
		
			boolean matched=false;
			Criteria crit =session.createCriteria(DgOrderdt.class)
						.createAlias("Orderhd", "hd")
					//	.createAlias("hd.Visit", "Visit")
						.createAlias("hd.Hospital", "Hospital")
						.add(Restrictions.eq("hd.Hin.Id", hinId))
						//.add(Restrictions.eq("hd.OrderDate", new Date()))
					     .add(Restrictions.eq("ChargeCode.Id", chargeCode))
						.add(Restrictions.eq("Hospital.Id", hospitalId));
						
						if(investigationDate!=null && !investigationDate.isEmpty())
							crit.add(Restrictions.eq("hd.OrderDate", HMSUtil.convertStringTypeDateToDateType(investigationDate)));
						
			dgOderDtList = crit.list();
				if(dgOderDtList.size() >0)
					matched=true;
				
			map.put("matched",matched);
			return map;
		}  
		
		@Override
		public Map<String, Object> showVaccineDetailJsp(Map<String, Object> dataMap) {
			
			Map<String, Object> map = new HashMap<String, Object>();
			Session session = (Session)getSession();
			List<OpdVaccinationPlan>vaccinationPlanList = new ArrayList<OpdVaccinationPlan>();
			//List<OpdVaccinMst> vaccineList = new ArrayList<OpdVaccinMst>();
			List<MasVaccineItem> vaccineList = new ArrayList<MasVaccineItem>();
			List<Patient>patientList=new ArrayList<Patient>();
			List<RouteOfAdministration> routeOfAdministrationList = null;
			Box box =  (Box)dataMap.get("box");
			List<MasFrequency> frequencyList = null;
			int hinId=box.getInt("hinId");
			
			vaccinationPlanList = session.createCriteria(OpdVaccinationPlan.class)
					.add(Restrictions.eq("Hin.Id",hinId)).list();
			patientList=session.createCriteria(Patient.class).add(Restrictions.eq("Id",hinId)).list();
			vaccineList =session.createCriteria(MasVaccineItem.class).add(Restrictions.eq("Status","y").ignoreCase()).addOrder(Order.asc("OrderNo")).list();
			map.put("vaccinationPlanList", vaccinationPlanList);
			map.put("patientList",patientList);
			map.put("vaccineList",vaccineList);
			return map;
			//map.put("prescribedVaccinList",prescribedVaccinList);
			
/*			Integer visitId=box.getInt("visitId");
			Integer hospitalId=box.getInt("hospitalId");
			Visit visit=null;
			if(visitId!=0){
			      visit=(Visit)session.load(Visit.class, visitId);
			}
			Integer inpatientId=0;
			if(box.getInt("inpatientId")!=0){
				inpatientId=box.getInt("inpatientId");
			}
			Inpatient inpatient=null;
			if(inpatientId!=0){
			 inpatient=(Inpatient)session.load(Inpatient.class,inpatientId);
			}
			
			
			
			//immunizationList = session.createCriteria(PhMemberSurvey.class).add(Restrictions.idEq(box.getInt("memberSurveyId"))).list();
			List<PhMemberSurvey>surveyList=new ArrayList<PhMemberSurvey>();
			if(visitId!=0 && visit!=null){
			surveyList=session.createCriteria(PhMemberSurvey.class).add(Restrictions.eq("UhidNo", visit.getHin().getHinNo())).list();
			}else if(inpatientId!=0 && inpatient!=null){
				surveyList=session.createCriteria(PhMemberSurvey.class).add(Restrictions.eq("UhidNo", inpatient.getHin().getHinNo())).list();	
			}
			System.out.println("surveyList.size() ----- >>"+surveyList.size());
			int memberId=0;
			for(PhMemberSurvey PhMemberSurvey:surveyList){
				memberId=PhMemberSurvey.getMemberId();
			}
			System.out.println("memberId ----- >>"+memberId);
			if(visitId!=0 && visit!=null){
				hinId=visit.getHin().getId();
			vaccinationPlanList = session.createCriteria(OpdVaccinationPlan.class)
					.add(Restrictions.or(Restrictions.eq("Hin.Id",visit.getHin().getId()),
					Restrictions.eq("Member",visit.getHin().getMember()!=null?visit.getHin().getMember().getMemberId():0)))
					.list(); //changed by govind 6-12-2016
				vaccinationPlanList = session.createCriteria(OpdVaccinationPlan.class)
						.add(Restrictions.eq("Hin.Id",hinId))
						.list();
			}else if(inpatientId!=0 && inpatient!=null){
				hinId=inpatient.getHin().getId();
				vaccinationPlanList = session.createCriteria(OpdVaccinationPlan.class)
						.add(Restrictions.eq("Hin.Id",inpatient.getHin().getId()))
						.add(Restrictions.or(Restrictions.eq("Hin.Id",inpatient.getHin().getId()),Restrictions.eq("Member",inpatient.getHin().getMember()!=null?inpatient.getHin().getMember().getId():0)))
						.list();
			}
			
			System.out.println("vaccinationPlanList ----- >>"+vaccinationPlanList.size());
			
			//changed by govind 3-12-2016
			vaccineList = session.createCriteria(OpdVaccinMst.class)
					.add(Restrictions.eq("Status", "y").ignoreCase())
					//.add(Restrictions.isNotNull("SrNo"))
					//.addOrder(Order.asc("MasStoreItem.Id"))
					//.addOrder(Order.asc("SrNo")) 
					//.addOrder(Order.asc("VaccinName")) //govind code
					//.addOrder(Order.asc("Dose"))
					//.addOrder(Order.asc("VaccinCode"))
					//.addOrder(Order.asc("cast(VaccinCode as int)"))
					.addOrder(new org.hibernate.criterion.Order("VaccinCode", true) {
	        @Override
	        public String toSqlString(Criteria criteria, CriteriaQuery criteriaQuery) throws HibernateException {
	            return "cast(VaccinCode as int)";
	        }
	    })
					.list();
			
			//vaccineList = session.createQuery("from OpdVaccinMst order by cast(VaccinCode as integer) asc").list();
			
			
			System.out.println("vaccineList ----- >>"+vaccineList.size());
			//changed by govind 3-12-2016 end
			
			patientList=session.createCriteria(Patient.class).add(Restrictions.eq("Id",hinId)).list();
			System.out.println("fhh"+patientList.size());
			
			vaccineList =session.createCriteria(OpdVaccinMst.class).add(Restrictions.eq("Gender.Id",patientList.get(0).getSex().getId())).list();
					//session.createQuery("from OpdVaccinMst order by VaccinCode asc").list();
			//added by govind 5-12-2016
			System.out.println("dd"+vaccineList.size());
			Date dob=new Date();
			if(patientList.size()>0){
			for(Patient patient:patientList){
				if(patient!=null){
					if(patient.getDateOfBirth()!=null)
						dob=patient.getDateOfBirth();
				}
			}
			}
		int minDays=0,maxDays=0,doseCount=0;
		long diff;
		int calDay=1,vacId=0;
		String vaccinName="";
		Date toDate=new Date(),schedDate=new Date(),tempVacDate=new Date();
		String vaccineDate = "";
		String vaccineToDate="";
		Calendar cal = new GregorianCalendar();
		Calendar cal2 = new GregorianCalendar();
		List<ImmunizationUtil> immunizationList=new ArrayList<ImmunizationUtil>();
		Map<Integer,String> schedDateList=new HashMap<Integer,String>();
		Map<Integer,String> toDateList=new HashMap<Integer,String>();
		Map<Integer,String> complDateList=new HashMap<Integer,String>();
		Boolean dateNull=false;
			System.out.println("control dob "+dob);
			if(vaccineList.size()>0){			
			for(OpdVaccinMst mst:vaccineList){
				vaccinName=mst.getVaccinName();
				//System.out.println("vaccinName "+vaccinName);
				cal.setTime(dob);
				cal2.setTime(dob);
				
				doseCount=mst.getDose();
				minDays=mst.getVaccinDuration();
				maxDays=mst.getVaccinToDays(); 
				
				//System.out.println("vaccinName "+mst.getVaccinName()+" id "+mst.getId());
				//System.out.println(" min "+minDays+" max "+maxDays);
				//if(doseCount==1){
					//System.out.println("(doseCount==1)");
					
					//System.out.println("vaccineDate "+vaccineDate+" vaccineToDate "+vaccineToDate);	
					
				//}else{
				int pCount=0;
				if(vaccinationPlanList.size()>0){ 
					for(OpdVaccinationPlan vaccPlan : vaccinationPlanList){
						pCount++;
						//System.out.println("pCount "+pCount);
						//System.out.println("vaccPlan id "+vaccPlan.getVaccin().getId()+" mst id "+mst.getId());
						//System.out.println("(vaccPlan.getVaccin().getId().equals(mst.getId())) "+(vaccPlan.getVaccin().getId().equals(mst.getId())));
						if(vaccPlan.getVaccin().getId().equals(mst.getId())){
							//schedDate=vaccPlan.getVaccinDate();	
							//tempVacDate=vaccPlan.getVaccinCompleteDate();
							if(vaccPlan.getVaccinDate()!=null){
								schedDate=vaccPlan.getVaccinDate();
							}
							if(vaccPlan.getVaccinCompleteDate()!=null){
								tempVacDate=vaccPlan.getVaccinCompleteDate();
							}
							if(vaccPlan.getVaccinDate()!=null){
							cal.setTime(vaccPlan.getVaccinDate());
							}
							if(vaccPlan.getVaccinToDate()!=null){
							cal2.setTime(vaccPlan.getVaccinToDate());
							}
							vaccineDate = HMSUtil.convertDateToStringWithoutTime(cal.getTime());
							vaccineToDate = HMSUtil.convertDateToStringWithoutTime(cal2.getTime());	
							
							schedDateList.put(mst.getId(), vaccineDate);
							toDateList.put(mst.getId(), vaccineToDate);
							
							dateNull=true;
							vacId=mst.getId();
							break;
						}
					}
				}
				
				//System.out.println("final dateNull--"+dateNull); 
				
				if(dateNull){
					//System.out.println("dateNull true"); 
				if(getMstSecondList(vaccinName,doseCount,hinId).size()>0){
					System.out.println("id "+mst.getId()+"VaccinName "+mst.getVaccinName());
					cal.setTime(dob);
					cal2.setTime(dob);
					OpdVaccinMst mp=getMstSecondList(vaccinName,doseCount,hinId).get(0);
					System.out.println("vaccineDate 1 "+HMSUtil.convertDateToStringWithoutTime(cal.getTime()));
					System.out.println("vaccineToDate 1 "+HMSUtil.convertDateToStringWithoutTime(cal2.getTime()));
					System.out.println("tempVacDate "+tempVacDate+" schedDate "+schedDate);
					diff = tempVacDate.getTime()-schedDate.getTime();
					diff=TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS);
					calDay=Integer.parseInt(Long.toString(diff));
					System.out.println("calculation Day "+calDay); 
					minDays=mp.getVaccinDuration();
					maxDays=mp.getVaccinToDays();
					minDays=minDays+calDay;
					maxDays=maxDays+calDay;
					System.out.println(" min "+minDays+" max "+maxDays);				
						cal.add(Calendar.DAY_OF_MONTH, minDays);
						cal2.add(Calendar.DAY_OF_MONTH, maxDays);

					vaccineDate = HMSUtil.convertDateToStringWithoutTime(cal.getTime());
					vaccineToDate = HMSUtil.convertDateToStringWithoutTime(cal2.getTime());	
					

					System.out.println("vaccineDate 2 "+HMSUtil.convertDateToStringWithoutTime(cal.getTime()));
					System.out.println("vaccineToDate 2 "+HMSUtil.convertDateToStringWithoutTime(cal2.getTime()));
					
					schedDateList.put(mp.getId(), vaccineDate);
					toDateList.put(mp.getId(), vaccineToDate);
					}
				}else{
					//System.out.println("dateNull false "+" id "+mst.getId()); 
					//System.out.println("(schedDateList.get(mst.getId())!=null) "+(schedDateList.get(mst.getId())!=null));
					if(schedDateList.get(mst.getId())!=null && toDateList.get(mst.getId())!=null){
						
					}else{
						cal.add(Calendar.DAY_OF_MONTH, minDays);
						cal2.add(Calendar.DAY_OF_MONTH, maxDays);
						vaccineDate = HMSUtil.convertDateToStringWithoutTime(cal.getTime());
						vaccineToDate = HMSUtil.convertDateToStringWithoutTime(cal2.getTime());
						schedDateList.put(mst.getId(), vaccineDate);
						toDateList.put(mst.getId(), vaccineToDate);		
					}						
				}
				
				if(schedDateList.get(mst.getId())!=null){
				}else{				schedDateList.put(mst.getId(), vaccineDate);
				}
				if(toDateList.get(mst.getId())!=null){
				}else{
				toDateList.put(mst.getId(), vaccineToDate);
				}
			// }
				ImmunizationUtil imm=new ImmunizationUtil();
				imm.setId(mst.getId());
				imm.setMinDays(mst.getVaccinDuration());
				imm.setMaxDays(mst.getVaccinToDays());
				imm.setName(mst.getVaccinName());
				imm.setScheDate(schedDateList.get(mst.getId()));
				imm.setVaccinToDate(toDateList.get(mst.getId()));
				immunizationList.add(imm);
				
				dateNull=false;
				//System.out.println("\n==========================================================\n");
			}
			
		}
			for(ImmunizationUtil imn:immunizationList){
				System.out.println("id "+imn.getId()+" vacName "+imn.getName());
				System.out.println("MinDay "+imn.getMinDays()+" maxDay "+imn.getMaxDays());
				System.out.println("ScedulDate "+imn.getScheDate()+" maxDay "+imn.getVaccinToDate());
			}
			
	    //added by govind 5-12-2016 end
			
			// added by amit das on 19-09-2016
			List<Integer> prescribedVaccinList  = session.createCriteria(InjAppointmentDetails.class).createAlias("InjAppointmentHeader", "i")
								 .createAlias("i.Hin", "h").add(Restrictions.eq("h.Id",hinId)).setProjection(Projections.property("VaccinId")).list();
			
			// added by amit das on 19-10-2016
			routeOfAdministrationList =   session.createCriteria(RouteOfAdministration.class).add(Restrictions.eq("Status", "y").ignoreCase()).list();
			
			// added by amit das on 19-10-2016
			//frequencyList =   session.createCriteria(MasFrequency.class).add(Restrictions.eq("Status", "y").ignoreCase()).list();
					
			
			
			map.put("vaccineList", vaccineList);
			if(visit!=null && visit.getHin()!=null && visitId!=0  ){
			map.put("patient", visit.getHin());
			}else if(inpatient!=null && inpatient.getHin()!=null && inpatientId!=0 ){
			map.put("patient", inpatient.getHin());	
			}
		
			
			map.put("vaccinationPlanList", vaccinationPlanList);
			map.put("patientList",patientList);
			map.put("prescribedVaccinList",prescribedVaccinList); // added by amit das on 19-09-2016
			map.put("routeOfAdministrationList",routeOfAdministrationList); // added by amit das on 19-10-2016
			//map.put("frequencyList",frequencyList); // added by amit das on 19-10-2016
			
			map.put("immunizationList",immunizationList);//added by govind 6-12-2016
			return map;*/
		}
		
		public List<OpdVaccinMst> getMstSecondList(String vacName,int dose,int hinId){
			
			Session session = (Session)getSession();
			dose++;
			List<OpdVaccinMst> vacList=new ArrayList<OpdVaccinMst>();
			List<OpdVaccinationPlan> planList=new ArrayList<OpdVaccinationPlan>();
			vacList=session.createCriteria(OpdVaccinMst.class)
					.add(Restrictions.eq("VaccinName",vacName))
					.add(Restrictions.eq("Dose",dose))
					.addOrder(Order.asc("Dose"))
					.list();
			if(vacList.size()>0){
			OpdVaccinMst ms=vacList.get(0);
			planList=session.createCriteria(OpdVaccinationPlan.class)
					.add(Restrictions.eq("Hin.Id",hinId))
					.add(Restrictions.eq("Vaccin.Id",ms.getId()))
					.add(Restrictions.isNull("VaccinCompleteDate"))
					.list();
			
			//System.out.println("planList "+planList.size());
			if(planList.size()>0){
				vacList=new ArrayList<OpdVaccinMst>();
			}
			}
			
			//System.out.println("vacList "+vacList.size());
			return vacList;
		}


		@SuppressWarnings("unchecked")
		@Override
		public Map<String, Object> submitVaccineDetail( Map<String, Object>mapForDs) {
			 Box box = (Box)mapForDs.get("box");
			Map<String, Object> map = new HashMap<String, Object>();
			List<OpdVaccinationPlan> vaccinationPlanList = new ArrayList<OpdVaccinationPlan>();
		//	List<PhMemberSurvey> immunizationList = new ArrayList<PhMemberSurvey>();
			List<OpdVaccinMst> vaccineList = new ArrayList<OpdVaccinMst>();
			List<OpdVaccinationPlan> existingVaccinationPlanList = new ArrayList<OpdVaccinationPlan>();
			List<Patient> patientList = new ArrayList<Patient>();
			List<InjAppointmentHeader> injectionRegisterList = new ArrayList<InjAppointmentHeader>();
			List<PatientPrescriptionDetails> patientPrescriptionDetailsList = null;
			List<InjAppointmentDetails> injAppointmentDetailsList = null;

			int count = 0;
			boolean flag = false;
			if (box.getInt("count") != 0) {
				count = (Integer) box.getInt("count");
			}
			int memberServeyId = 0;
		/*	if (box.getInt("memberServeyId") != 0) {
				memberServeyId = (Integer) box.getInt("memberServeyId");
			}*/
			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String date = (String) utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			// hbt.setCheckWriteOperations(false);
			Session session = hbt.getSessionFactory().getCurrentSession();
			Transaction tx = session.beginTransaction();
			String message = "";
			int vaccinationPlanId = 0;
		/*	
			int route = 0;   // added by amit das on 20-10-2016
			RouteOfAdministration routeOfAdministration = null;   // added by amit das on 20-10-2016
*/			//Integer pHeaderId = box.getInt("pHeaderId");
			int visitId = box.getInt("visitId");
			
			try
			{
				MasHospital masHospital = new MasHospital();
				masHospital.setId(box.getInt("hospitalId"));
				Patient hin = new Patient();
				hin.setId(box.getInt("hinId"));
				Visit visitInj = new Visit();
				Users users = new Users();
				users.setId(box.getInt("userId"));
				MasDepartment masDept = new MasDepartment();
				masDept.setId(box.getInt("departmentId"));
				visitInj.setId(visitId);
			for (int i = 1; i <= count; i++) {
				
				if (box.getString("checkItem" + i)!=null &&box.getString("checkItem" + i).equals("Y")) {

				if (box.getString("completionDate" + i) != null
													&& !box.getString("completionDate" + i).equals(
															"")) {
												
												OpdVaccinationPlan vaccinationPlan = new OpdVaccinationPlan();
				vaccinationPlan.setStatus("y");
												if (box.getString("completionDate" + i) != null
														&& !box.getString("completionDate" + i)
																.equals("")) {
													vaccinationPlan.setVaccinDate(HMSUtil
															.convertStringTypeDateToDateType(box
																	.getString("completionDate" + i)));
												}
												if (box.getInt("vaccineId" + i) != 0) {
													MasVaccineItem masVaccine = new MasVaccineItem();
													masVaccine.setId(box.getInt("vaccineId" + i));
													vaccinationPlan.setVaccin(masVaccine);
												}
												if (box.getString("remarks" + i) != null
														&& !box.getString("remarks" + i).equals("")) {
													vaccinationPlan.setRemarks(box
															.getString("remarks" + i));
												}
												if (box.getInt("hinId") != 0) {
													vaccinationPlan.setHin(hin);
												}

				vaccinationPlan.setHospital(masHospital);
												vaccinationPlan.setLastChgDate(HMSUtil
														.convertStringTypeDateToDateType(date));
												vaccinationPlan.setLastChgTime(time);
												vaccinationPlan.setLastChgBy(users);
												vaccinationPlan.setDepartment(masDept);
												vaccinationPlan.setVisit(visitInj);
												if(!box.getString("vaccine_source" + i).isEmpty())
												vaccinationPlan.setVaccineSource(box.getString("vaccine_source" + i));
												hbt.save(vaccinationPlan);

												vaccinationPlanId = vaccinationPlan.getId();

				}
				}}
			tx.commit();flag=true;
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
		/*	if (flag) {
				message = "Record Saved Successfully";
			} else {
				message = "Records Not Added/Updated!... Try Again.....";

			}
			map.put("message", message);*/
			return map;
			
			// Integer departmentId = box.getInt("departmentId");

			/*try {
				InjAppointmentHeader injectionAppointment = new InjAppointmentHeader();
				
				List<Patient> patientList2 = new ArrayList<Patient>();
				patientList2 = session.createCriteria(Patient.class)
						.add(Restrictions.eq("Id", box.getInt("hinId"))).list();
				int memberId = 0;
				String uhId = "";
				for (Patient pt : patientList2) {
					if (pt.getMember() != null) {
						memberId = pt.getMember().getId();
					}
					if (pt.getHinNo() != null) {
						uhId = pt.getHinNo();
					}
				}

				PatientPrescriptionHeader patientPrescriptionHeader = new PatientPrescriptionHeader();
				List<Integer> itemIdList = new ArrayList<Integer>();
				Visit visitObjToUpdate = (Visit) hbt.get(Visit.class, visitId);
				List<PatientPrescriptionHeader> patientPrescriptionHeaderList = session
						.createCriteria(PatientPrescriptionHeader.class)
						.createAlias("Hin", "h").createAlias("Visit", "v")
						.add(Restrictions.eq("h.Id", patientList2.get(0).getId()))
						.add(Restrictions.eq("v.Id", visitId)).list();

				if (patientPrescriptionHeaderList.size() > 0) {
					patientPrescriptionHeader = patientPrescriptionHeaderList
							.get(0);
					pHeaderId = patientPrescriptionHeader.getId();
				} else {
					patientPrescriptionHeader = new PatientPrescriptionHeader();
				}
				
				String prescriptionNo = "";
				 prescriptionNo=opdDataService
						.generatePrecriptionNo(patientList2.get(0).getId());
				 prescriptionNo=generatePrecriptionNo(patientList2.get(0).getId());
				 
				MasDepartment masDepartment = new MasDepartment();

				injectionRegisterList = hbt
						.find("select inj from jkt.hms.masters.business.InjAppointmentHeader as inj join inj.Visit as visit where visit.Id="
								+ visitId);

				if (injectionRegisterList != null
						&& injectionRegisterList.size() > 0) {
					for (InjAppointmentHeader injectionRegisterTemp : injectionRegisterList) {
						injectionAppointment = injectionRegisterTemp;
					}

					SQLQuery query = session
							.createSQLQuery("delete from inj_appointment_details where inj_appointment_header_id = "
									+ injectionAppointment.getId());
					query.executeUpdate();
				}

				SQLQuery query = session
						.createSQLQuery("delete from patient_prescription_details where prescription_id = "
								+ pHeaderId);
				query.executeUpdate();

				session.flush();

				for (int i = 1; i <= count; i++) {
					if (memberServeyId != 0) {
						existingVaccinationPlanList = session
								.createCriteria(OpdVaccinationPlan.class)
								.add(Restrictions.eq("Member.Id", memberServeyId))
								.add(Restrictions.eq("Vaccin.Id",
										box.getInt("vaccineId" + i)))
								.add(Restrictions.eq("Hospital.Id",
										box.getInt("hospitalId"))).list();
					} else {
						existingVaccinationPlanList = session
								.createCriteria(OpdVaccinationPlan.class)
								.add(Restrictions.eq("Hin.Id", box.getInt("hinId")))
								.add(Restrictions.eq("Vaccin.Id",
										box.getInt("vaccineId" + i)))
								.add(Restrictions.eq("Hospital.Id",
										box.getInt("hospitalId"))).list();
					}
					//if (existingVaccinationPlanList.size() > 0) {
						
						 * if(box.getString("vaccineDate"+i)!=null &&
						 * !box.getString("vaccineDate"+i).equals("")){
						 * OpdVaccinationPlan vaccinationPlan = new
						 * OpdVaccinationPlan();
						 * vaccinationPlan.setVaccinDate(HMSUtil
						 * .convertStringTypeDateToDateType
						 * (box.getString("vaccineDate"+i)));
						 * if(box.getString("completionDate"+i)!=null &&
						 * !box.getString("completionDate"+i).equals("")){
						 * vaccinationPlan.setVaccinCompleteDate(HMSUtil.
						 * convertStringTypeDateToDateType
						 * (box.getString("completionDate"+i))); }
						 * if(box.getInt("vaccineId"+i) != 0){ OpdVaccinMst
						 * vaccinMst = new OpdVaccinMst();
						 * vaccinMst.setId(box.getInt("vaccineId"+i));
						 * vaccinationPlan.setVaccin(vaccinMst); }
						 * if(box.getString("remarks"+i)!=null &&
						 * !box.getString("remarks"+i).equals("")){
						 * vaccinationPlan.setRemarks(box.getString("remarks"+i)); }
						 * if(memberServeyId != 0){ PhMemberSurvey memberSurvey =
						 * new PhMemberSurvey(); memberSurvey.setId(memberServeyId);
						 * vaccinationPlan.setMember(memberSurvey); } MasHospital
						 * masHospital = new MasHospital();
						 * masHospital.setId(box.getInt("hospitalId"));
						 * vaccinationPlan.setHospital(masHospital);
						 * vaccinationPlan.
						 * setLastChgDate(HMSUtil.convertStringTypeDateToDateType
						 * (date)); vaccinationPlan.setLastChgTime(time); Users
						 * users = new Users(); users.setId(box.getInt("userId"));
						 * vaccinationPlan.setLastChgBy(users);
						 * hbt.save(vaccinationPlan); }
						 
					//} 
					//else {
					if (existingVaccinationPlanList.size() == 0) {
						// added by amit das on 15-09-2016
						
						if (box.getString("vaccineItemPvmsNo" + i) != null
								&& !box.getString("vaccineItemPvmsNo" + i).equals(
										"")) {
						System.out.println("i= "+i + " checkitem= "+box.getString("checkItem" + i));
						if (box.getString("checkItem" + i).equals("Y")) {
							String pvmsNo = box.getString("vaccineItemPvmsNo" + i);
							if (box.getString("completionDate" + i) != null
									&& !box.getString("completionDate" + i).equals(
											"")) {
								System.out.println(" completionDate not null");
								
								OpdVaccinationPlan vaccinationPlan = new OpdVaccinationPlan();

								vaccinationPlan.setVaccinCompleteDate(HMSUtil
										.convertStringTypeDateToDateType(box
												.getString("completionDate" + i)));
								vaccinationPlan.setStatus("n");
								if (box.getString("completionDate" + i) != null
										&& !box.getString("completionDate" + i)
												.equals("")) {
									vaccinationPlan.setVaccinDate(HMSUtil
											.convertStringTypeDateToDateType(box
													.getString("completionDate" + i)));
								}
								if (box.getInt("vaccineId" + i) != 0) {
									OpdVaccinMst vaccinMst = new OpdVaccinMst();
									vaccinMst.setId(box.getInt("vaccineId" + i));
									vaccinationPlan.setVaccin(vaccinMst);
								}
								if (box.getString("remarks" + i) != null
										&& !box.getString("remarks" + i).equals("")) {
									vaccinationPlan.setRemarks(box
											.getString("remarks" + i));
								}
								if (box.getInt("hinId") != 0) {
									Patient hin = new Patient();
									hin.setId(box.getInt("hinId"));
									vaccinationPlan.setHin(hin);
								}
								//added by govind 6-12-2016
								if (box.getString("vaccineToDate" + i) != null
										&& !box.getString("vaccineToDate" + i)
												.equals("")) {
									vaccinationPlan.setVaccinToDate(HMSUtil
											.convertStringTypeDateToDateType(box
													.getString("vaccineToDate" + i)));
								}//added by govind 6-12-2016 end 
								
								vaccinationPlan.setHospital(masHospital);
								vaccinationPlan.setLastChgDate(HMSUtil
										.convertStringTypeDateToDateType(date));
								vaccinationPlan.setLastChgTime(time);
								Users users = new Users();
								users.setId(box.getInt("userId"));
								vaccinationPlan.setLastChgBy(users);
								
								Visit visitInj = new Visit();
								visitInj.setId(visitId);
								vaccinationPlan.setVisit(visitInj);
								System.out.println("jhj"+vaccinationPlan.getVisit().getId() +" dd "+visitId);
								hbt.save(vaccinationPlan);

								vaccinationPlanId = vaccinationPlan.getId();

								long memberId2 = 0;
								List<PhMemberSurvey> PhMemberSurveyList = new ArrayList<PhMemberSurvey>();
								PhMemberSurveyList = session
										.createCriteria(PhMemberSurvey.class)
										.add(Restrictions.eq("Id", memberId))
										.list();
								int subcentreId = 0;
								for (PhMemberSurvey PhMemberSurvey : PhMemberSurveyList) {
									if (PhMemberSurvey.getHospital() != null) {
										subcentreId = PhMemberSurvey.getHospital()
												.getId();
										memberId2 = PhMemberSurvey.getMemberId();

									}
								}
								List<OpdVaccinationPlan> OpdVaccinationPlanList = new ArrayList<OpdVaccinationPlan>();
								OpdVaccinationPlanList = session
										.createCriteria(OpdVaccinationPlan.class)
										.add(Restrictions.eq("Id",
												vaccinationPlanId)).list();
								for (OpdVaccinationPlan opdVaccinationPlan : OpdVaccinationPlanList) {
									if (subcentreId != 0) {

										MasHospital mh = new MasHospital();
										mh.setId(subcentreId);
										opdVaccinationPlan.setSubCentre(mh);

										opdVaccinationPlan.setMember(memberId2);
										hbt.update(opdVaccinationPlan);
									}
								}
							
							
							//if (box.getString("checkItem" + i).equals("Y")) {
								
							if (box.getInt("route" + i) != 0) {
								route = box.getInt("route" + i);
								routeOfAdministration = new RouteOfAdministration(route);
							}
							
							
							patientPrescriptionHeader.setHin(patientList2.get(0));
							
							 * masDepartment.setId(departmentId);
							 * patientPrescriptionHeader
							 * .setDepartment(masDepartment);
							 
							//patientPrescriptionHeader
								//	.setPrescriptionNo(prescriptionNo);
							patientPrescriptionHeader.setVisit(visitObjToUpdate);
							patientPrescriptionHeader.setHospital(masHospital);
							patientPrescriptionHeader.setStatus("p");
							patientPrescriptionHeader.setNipStatus("n");
							patientPrescriptionHeader
									.setPrescriptionDate(new Date());
							// patientPrescriptionHeader.setPrescriptionTime(consultationTime);
							// patientPrescriptionHeader.setDispencingDate(date);
							// patientPrescriptionHeader.setOpdPatientDetail(opdPatientDetails);

							if (pHeaderId != 0) {
								hbt.update(patientPrescriptionHeader);
							} else {
								hbt.save(patientPrescriptionHeader);
							}

							
							 * List<MasStoreItem> itemIdListNew = new
							 * ArrayList<MasStoreItem>(); itemIdListNew =
							 * opdDataService.getItemIdFromPVMS(pvmsNo); for (int k
							 * = 0; k < itemIdListNew.size(); k++) {
							 * itemIdList.add(itemIdListNew.get(k).getId()); }
							 

							int item_class_id = 0;
							List<MasFrequency> masFrequencies = null;
							MasFrequency masFrequency = null;
							MasStoreItem masStoreItem = null;

							
							
							masFrequencies = session.createCriteria(MasFrequency.class).add(Restrictions.eq("FrequencyName", "OD").ignoreCase()).list();
							if(masFrequencies!=null && masFrequencies.size()>0)
								masFrequency = masFrequencies.get(0);
							// if(itemIdList!=null && itemIdList.size()>0) {

							// for (int m = 0; m < itemIdList.size(); m++) {
							PatientPrescriptionDetails patientPrescriptionDetails = new PatientPrescriptionDetails();

							// if (itemIdList != null && itemIdList.size() > 0 &&
							// itemIdList.get(m) != 0)

							masStoreItem = (MasStoreItem) session.load(
									MasStoreItem.class,
									box.getInt("vaccineItemId" + i));

							patientPrescriptionDetails.setItem(masStoreItem);
							patientPrescriptionDetails.setNoOfDays(1);
							
							patientPrescriptionDetails.setFrequency(masFrequency);
							patientPrescriptionDetails.setType("OP");
							patientPrescriptionDetails.setNursingStatus("n");
							patientPrescriptionDetails
									.setPrescription(patientPrescriptionHeader);
							patientPrescriptionDetails.setInjectionStatus("p");
							patientPrescriptionDetails.setDosage("1");  // 1 is set because it is vaccin given to a child
							if(routeOfAdministration!=null)
								patientPrescriptionDetails.setRoute("");

							hbt.save(patientPrescriptionDetails);

							injectionAppointment.setHospital(masHospital);
							injectionAppointment.setStatus("p");
							injectionAppointment.setLastChgTime(time);
							injectionAppointment.setLastChgDate(new Date());
							injectionAppointment.setAppointmentDate(new Date());
							injectionAppointment
									.setPrescription(patientPrescriptionHeader);
							if (injectionRegisterList.size() > 0) {
								hbt.update(injectionAppointment);
							} else {
								Patient patientInj = new Patient();
								patientInj.setId(patientList2.get(0).getId());
								injectionAppointment.setHin(patientInj);
								//Visit visitInj = new Visit();
								visitInj.setId(visitId);
								injectionAppointment.setVisit(visitInj);
								hbt.save(injectionAppointment);
								
								
							}

							System.out.println("vaccinId "+box.getInt("vaccineId" + i));
							
							InjAppointmentDetails injAppointmentDetails = new InjAppointmentDetails();
							//injAppointmentDetails.setInjAppointmentDate(new Date());
							injAppointmentDetails.setInjAppointmentDate(HMSUtil
									.convertStringTypeDateToDateType(box
											.getString("completionDate" + i)));
							injAppointmentDetails.setDose("1");   // 1 is set because it is vaccin given to a child
							injAppointmentDetails.setItem(masStoreItem);
							injAppointmentDetails
									.setInjAppointmentHeader(injectionAppointment);
							injAppointmentDetails.setPatientPrescriptionDetails(patientPrescriptionDetails);
									
							injAppointmentDetails.setNoOfDays(1); // 1 is set because it is vaccin given to a child
							injAppointmentDetails.setFrequency(masFrequency);
							injAppointmentDetails.setStatus("p");
							injAppointmentDetails.setFinalStatus("n");
							injAppointmentDetails.setImmunizationInj("Y");
							injAppointmentDetails.setVaccinId(box
									.getInt("vaccineId" + i));
							
							//injAppointmentDetails.setRoute(routeOfAdministration.getRouteName());
							
							hbt.save(injAppointmentDetails);  
							vaccinationPlan.setInjAppointDt(injAppointmentDetails);
							hbt.update(vaccinationPlan);
						//}
							// }
							// }
						}
						}else if (box.getString("checkItem" + i).equals("N")) {
							
							if (box.getString("completionDate" + i) != null
									&& !box.getString("completionDate" + i).equals("")) {
							OpdVaccinationPlan vaccinationPlan = new OpdVaccinationPlan();

							vaccinationPlan.setVaccinCompleteDate(HMSUtil
									.convertStringTypeDateToDateType(box
											.getString("completionDate" + i)));

							if (box.getString("vaccineDate" + i) != null
									&& !box.getString("vaccineDate" + i).equals("")) {
								vaccinationPlan.setVaccinDate(HMSUtil
										.convertStringTypeDateToDateType(box
												.getString("vaccineDate" + i)));
							}
							if (box.getInt("vaccineId" + i) != 0) {
								OpdVaccinMst vaccinMst = new OpdVaccinMst();
								vaccinMst.setId(box.getInt("vaccineId" + i));
								vaccinationPlan.setVaccin(vaccinMst);
							}
							if (box.getString("remarks" + i) != null
									&& !box.getString("remarks" + i).equals("")) {
								vaccinationPlan.setRemarks(box.getString("remarks"
										+ i));
							}
							
							 * if (memberServeyId != 0) { PhMemberSurvey
							 * memberSurvey = new PhMemberSurvey();
							 * memberSurvey.setId(memberServeyId);
							 * vaccinationPlan.setMember(memberSurvey); }
							 
							if (box.getInt("hinId") != 0) {
								Patient hin = new Patient();
								hin.setId(box.getInt("hinId"));
								vaccinationPlan.setHin(hin);
							}
							//added by govind 6-12-2016
							if (box.getString("vaccineToDate" + i) != null
									&& !box.getString("vaccineToDate" + i)
											.equals("")) {
								vaccinationPlan.setVaccinToDate(HMSUtil
										.convertStringTypeDateToDateType(box
												.getString("vaccineToDate" + i)));
							}//added by govind 6-12-2016 end 
							vaccinationPlan.setHospital(masHospital);
							vaccinationPlan.setLastChgDate(HMSUtil
									.convertStringTypeDateToDateType(date));
							vaccinationPlan.setLastChgTime(time);
							Users users = new Users();
							users.setId(box.getInt("userId"));
							vaccinationPlan.setLastChgBy(users);
							// vaccinationPlan.setMember(member);
							
							hbt.save(vaccinationPlan);

							
							 * Added By Ujjwal to save sub center in tab
							 
							vaccinationPlanId = vaccinationPlan.getId();

							long memberId2 = 0;
							List<PhMemberSurvey> PhMemberSurveyList = new ArrayList<PhMemberSurvey>();
							PhMemberSurveyList = session
									.createCriteria(PhMemberSurvey.class)
									.add(Restrictions.eq("Id", memberId)).list();
							int subcentreId = 0;
							for (PhMemberSurvey PhMemberSurvey : PhMemberSurveyList) {
								if (PhMemberSurvey.getHospital() != null) {
									subcentreId = PhMemberSurvey.getHospital()
											.getId();
									memberId2 = PhMemberSurvey.getMemberId();

								}
							}
							List<OpdVaccinationPlan> OpdVaccinationPlanList = new ArrayList<OpdVaccinationPlan>();
							OpdVaccinationPlanList = session
									.createCriteria(OpdVaccinationPlan.class)
									.add(Restrictions.eq("Id", vaccinationPlanId))
									.list();
							for (OpdVaccinationPlan opdVaccinationPlan : OpdVaccinationPlanList) {
								if (subcentreId != 0) {

									MasHospital mh = new MasHospital();
									mh.setId(subcentreId);
									opdVaccinationPlan.setSubCentre(mh);

									opdVaccinationPlan.setMember(memberId2);
									hbt.update(opdVaccinationPlan);

								}

							}
						}
						}

					}
				}

				flag = true;

				
				 * if (map.get("flag") != null) { flag = (Boolean) map.get("flag");
				 * }
				 

				if (flag) {
					message = "Record Saved Successfully";
				} else {
					message = "Records Not Added/Updated!... Try Again.....";

				}

			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			if (memberServeyId != 0) {
				vaccinationPlanList = session
						.createCriteria(OpdVaccinationPlan.class)
						.add(Restrictions.eq("Member.Id", memberServeyId)).list();
				immunizationList = session.createCriteria(PhMemberSurvey.class)
						.add(Restrictions.idEq(memberServeyId)).list();
				System.out.println("immunizationList==" + immunizationList.size());
			} else if (box.getInt("hinId") != 0) {
				vaccinationPlanList = session
						.createCriteria(OpdVaccinationPlan.class)
						.add(Restrictions.eq("Hin.Id", box.getInt("hinId"))).list();
				patientList = session.createCriteria(Patient.class)
						.add(Restrictions.idEq(box.getInt("hinId"))).list();
			}
			vaccineList = session.createCriteria(OpdVaccinMst.class)
					.add(Restrictions.eq("Status", "y")).list();

			tx.commit();
			map.put("vaccineList", vaccineList);
		//	map.put("immunizationList", immunizationList);
			map.put("patientList", patientList);
			map.put("message", message);
			map.put("vaccinationPlanList", vaccinationPlanList);
			map.put("pHeaderId", pHeaderId);return map;*/
			
		}

		public String generatePrecriptionNo(int hinId) {
			org.hibernate.Session session = getSession();
			List<PatientPrescriptionDetails> patientPrescriptionDetailsList = new ArrayList<PatientPrescriptionDetails>();
			List<Object> objectList = new ArrayList<Object>();
			String prescriptionNo = "1";
			String qry = "";
			try {
				objectList = (List<Object>) session
						.createSQLQuery(
								"select max(prescription_id)+1  from patient_prescription_header h,patient p where p.hin_id=h.hin_id and p.hin_id="
										+ hinId + " ").list();
				
				if(objectList.size()>0)
				{
					for (Object object : objectList) {
				
					if (object != null) {

						/*
						 * prescriptionNo = Integer.toString((((Double) object)
						 * .intValue()));
						 */
						prescriptionNo = Integer.toString((((Integer) object)
								.intValue()));

					}

				}
			}

				// "+prescriptionNo);
			} catch (Exception e) {
				e.printStackTrace();
			}
			return prescriptionNo;
		}
		

		
		public Map<String, Object> submitOBGPatientDetails(Map mapForDS) {
			Session session = (Session) getSession();
			boolean succesfullyAdded = false;
			boolean dublicateVisit = false;
			Map<String, Object> returnMap = new HashMap<String, Object>();
			
			Box box  = (Box) mapForDS.get("box");
			int hinId = (Integer) mapForDS.get("hinId");
			int departmentId = (Integer) mapForDS.get("departmentId");
			int visitId = (Integer) mapForDS.get("visitId");
			int hospitalId = (Integer) mapForDS.get("hospitalId");

			int size = 0; 
				size =	session.createCriteria(OpdPatientDetails.class)
					.createAlias("Visit", "Visit")
					.add(Restrictions.eq("Visit.Id", visitId)).list().size();
			if(size>0)
			{
				dublicateVisit = true;
			}
			returnMap.put("dublicateVisit", dublicateVisit);
			if(size==0)
			{
				Transaction tx=null;
			  try
				{
				  
				  
				tx = session.beginTransaction();
				org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
				
				OpdPatientDetails opdPatientDetails = new OpdPatientDetails();
				Visit visitsave = new Visit();
				visitsave=(Visit) hbt.load(Visit.class, visitId);
				opdPatientDetails.setVisit(visitsave);
				
				hbt.save(opdPatientDetails);
				
				succesfullyAdded = true;
				tx.commit();
			    } catch (Exception e) {
				if (tx != null)
					tx.rollback();
				    e.printStackTrace();

			}
			
		
		}
		returnMap.put("succesfullyAdded", succesfullyAdded);

		return returnMap;
	 }
		
		@SuppressWarnings("unchecked")
		public Map<String, Object> showEmpergencyOPDJsp(Map mapForDS) {
			Session session = (Session) getSession();
			Map<String, Object> map = new HashMap<String, Object>();
			List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();
			try {
				frequencyList = session.createCriteria(MasFrequency.class).add(
						Restrictions.eq("Status", "y")).addOrder(Order.asc("OrderNo")).list();
				
			} catch (HibernateException e) {
				e.printStackTrace();
			}
			map.put("frequencyList", frequencyList);

			return map;
		}
		
		@SuppressWarnings("unchecked")
		public Map<String, Object> getServiceNoDetailsForRegHAL(Box box) {
			Map<String, Object> map = new HashMap<String, Object>();
			String serviceNo = box.getString("serviceNo");
			List<MasEmployee> srEmployeeList = new ArrayList<MasEmployee>();
			List<MasRelation> masRelationList = new ArrayList<MasRelation>();
			List<Patient> dependentList = new ArrayList<Patient>();
			List<MasAdministrativeSex> sexList =null;
			org.hibernate.Session session = getSession();
			int hospitalId = box.getInt("hospitalId");
			/*dependentList = session.createCriteria(Patient.class).add(Restrictions.eq("ServiceNo", serviceNo))
			.createAlias("ServiceType", "st").add(Restrictions.eq("st.Id", serviceTypeId)).add(Restrictions.eq("Status", "y")).list();*/
//			List<MasEmployeeDependent> dependentList = new ArrayList<MasEmployeeDependent>();
			/*dependentList = session.createCriteria(MasEmployeeDependent.class).createAlias("Employee", "emp")
								.add(Restrictions.eq("emp.ServiceNo", serviceNo))
								.createAlias("emp.ServiceType", "st").add(Restrictions.eq("st.Id", serviceTypeId)).add(Restrictions.eq("Status", "y")).list();*/
			srEmployeeList = session.createCriteria(MasEmployee.class)
					.add(Restrictions.eq("ServiceNo", serviceNo))
					.add(Restrictions.eq("Hospital.Id", hospitalId))
					.add(Restrictions.eq("Status", "y").ignoreCase()).list();
			masRelationList = session.createCriteria(MasRelation.class).add(
					Restrictions.eq("Status", 'y').ignoreCase()).list();
			
			sexList = session.createCriteria(MasAdministrativeSex.class).add(
					Restrictions.eq("Status", "y")).list();
			
			
			map.put("masRelationList",masRelationList);
			map.put("srEmployeeListGrid",srEmployeeList);
			map.put("sexList",sexList);
			return map;
		}

		public Map<String, Object> showPatientDetailsEmergencyOPD(Map<String, Object> mapData) {
			Map<String, Object> map =new HashMap<String, Object>();
			org.hibernate.Session session = getSession();
			List<Patient> patientList = new ArrayList<Patient>();
			List<MasEmployee> empList = new ArrayList<MasEmployee>();
			MasEmployee emp = new MasEmployee();
			Patient patient = new Patient();
			List<MasEmployeeDependent> depList = new ArrayList<MasEmployeeDependent>();
			List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();
			List<MasStoreItemConversion> itemConversionList = new ArrayList<MasStoreItemConversion>();
			List<MasItemClass> masItemClassList = new ArrayList<MasItemClass>();
			List<MasDepartment> wardDepartment = new ArrayList<MasDepartment>();
			List<MasDepartment> deptList = new ArrayList<MasDepartment>();
			List<MasImpanneledHospital> masImpanneledHospitalList = new ArrayList<MasImpanneledHospital>();
			List<OpdTemplate> templateList = new ArrayList<OpdTemplate>();
			Box box = (Box) mapData.get("box");
			int relationId = box.getInt("relationId");
			int hospitalId = box.getInt("hospitalId");
			String serviceNoId = box.get("serviceNo");
			String otherPatient = null;
			if(box.getString("otherPatient")!=null)
			{
			   otherPatient = box.getString("otherPatient");
			}
			if(otherPatient!=null && otherPatient.equalsIgnoreCase("y"))
			{
				 
				 patient.setPFirstName(box.getString(P_FIRST_NAME));
				 patient.setPMiddleName(box.getString(P_MIDDLE_NAME));
				 patient.setPLastName(box.getString(P_LAST_NAME));
				 MasAdministrativeSex gender = new MasAdministrativeSex();
				 gender.setId(box.getInt(GENDER));
				 patient.setSex(gender);
				 patient.setDateOfBirth(HMSUtil.convertStringTypeDateToDateType(box.getString(DOB)));
				 
				
				 patient.setAge(HMSUtil.calculateAge(patient.getDateOfBirth()));
				 /*patient.setContactNo(depList.get(0).getContactNo());
				 patient.setAddress(depList.get(0).getAddress());
				 patient.setRelation(depList.get(0).getRelation());*/
				  patientList.add(patient);
			}
			else
			{
			patientList = session.createCriteria(Patient.class)
					.createAlias("Relation", "rel")
					.add(Restrictions.eq("rel.Id", relationId))
					.add(Restrictions.eq("Hospital.Id", hospitalId))
					.add(Restrictions.eq("ServiceNo", serviceNoId)).list();
			
			if(patientList.size()==0)
			{
				
				 depList = session.createCriteria(MasEmployeeDependent.class)
						.createAlias("Relation", "rel")
						.createAlias("Employee", "emp")
						.add(Restrictions.eq("Status", "y").ignoreCase())
						.add(Restrictions.eq("Hospital.Id", hospitalId))
						.add(Restrictions.eq("rel.Id", relationId))
						.add(Restrictions.eq("emp.ServiceNo", serviceNoId)).list();
				 if(depList.size()>0)
				 {
					 
				 patient.setPFirstName(depList.get(0).getEmployeeDependentFName());
				 patient.setPMiddleName(depList.get(0).getEmployeeDependentMName());
				 patient.setPLastName(depList.get(0).getEmployeeDependentLName());
				 patient.setSex(depList.get(0).getGender());
				 patient.setDateOfBirth(depList.get(0).getDateOfBirth());
				 patient.setContactNo(depList.get(0).getContactNo());
				 patient.setAddress(depList.get(0).getAddress());
				 patient.setRelation(depList.get(0).getRelation());
				 patient.setEmployee(depList.get(0).getEmployee());
				patient.setAge(HMSUtil.calculateAge(depList.get(0).getDateOfBirth()));
				patient.setBloodGroup(depList.get(0).getBloodGroup());
				
				 }
				 else
				 {
			
					 empList = session.createCriteria(MasEmployee.class).add(Restrictions.eq("ServiceNo", serviceNoId)).list();
					 patient.setPFirstName(empList.get(0).getFirstName());
					 patient.setPMiddleName(empList.get(0).getMiddleName());
					 patient.setPLastName(empList.get(0).getLastName());
					 patient.setSex(empList.get(0).getGender());
					 patient.setDateOfBirth(empList.get(0).getDateOfBirth());
					 patient.setContactNo(empList.get(0).getTelNoEmergency());
					 patient.setAddress(empList.get(0).getLocalAddress());
					 //code start for getting self relation object 
					 
					    String selfRelationName="";
						MasRelation masR = new MasRelation();
						Properties propadt = new Properties();
						URL resourcePathadt = Thread.currentThread().getContextClassLoader()
						.getResource("adt.properties");

						try {
							propadt.load(resourcePathadt.openStream());	
							
							selfRelationName=propadt.getProperty("selfRelationName");
							List<MasRelation> mr = session.createCriteria(MasRelation.class)
									.add(Restrictions.eq("NewRelationName", selfRelationName).ignoreCase())
									.add(Restrictions.eq("Status", "y").ignoreCase()).list();
							masR = mr.get(0);
						} catch (Exception e) {
							e.printStackTrace();
						}
						//code end for getting self relation object 	
						
					 patient.setRelation(masR);
					 patient.setEmployee(empList.get(0));
					 patient.setAge(HMSUtil.calculateAge(empList.get(0).getDateOfBirth()));
					 patient.setBloodGroup(empList.get(0).getBloodGroup());
				 }
				  patientList.add(patient);
			    }
			   
				map.put("relationId", relationId);
				map.put("employeeId", patientList.get(0).getEmployee().getId());

			}
			frequencyList = session.createCriteria(MasFrequency.class).add(
					Restrictions.eq("Status", "y")).addOrder(Order.asc("OrderNo")).list();
			itemConversionList = session.createCriteria(MasStoreItemConversion.class).add(Restrictions.eq("Status", "y")).addOrder(Order.asc("ItemUnitName")).list();
			 masItemClassList= session.createCriteria(MasItemClass.class).
														add(Restrictions.eq("Status", "y").ignoreCase())
														.add(Restrictions.eq("Section.Id", 18))
														 .addOrder(Order.asc("ItemClassName")) .list(); 
			 
			 String wardDepartmentTypeCode = HMSUtil.getProperties("adt.properties", "departmentTypeCodeForWard") ;
				wardDepartment=session.createCriteria(MasDepartment.class)
						.add(Restrictions.eq("Status","y").ignoreCase())
						.createAlias("DepartmentType", "dt")
						.add(Restrictions.eq("dt.DepartmentTypeCode",wardDepartmentTypeCode))
						.addOrder(Order.asc("DepartmentName"))
						.list();
			/*List<Visit> maxVisitList = new ArrayList<Visit>();
			maxVisitList = session.createCriteria(Visit.class).createAlias("Hin", "hin").add(Restrictions.eq("hin.Id", relationId)).add(Restrictions.eq("VisitStatus", "w")).list();*/
			
			
			int totalVisit =0;
			if(patientList.size()>0 && patientList.get(0).getId()!=null)
			{
			 if(patientList.get(0).getVisits()!=null) //
			 {
				 totalVisit = patientList.get(0).getVisits().size();
			 }
			}
			
			templateList = session.createCriteria(OpdTemplate.class)
					.createAlias("Department", "dept").add(Restrictions.eq("dept.Id", box.getInt("deparmentId")))
					.createAlias("Hospital", "hosp").add(Restrictions.eq("hosp.Id", hospitalId))
					.createAlias("Doctor", "doctor").add(Restrictions.eq("doctor.Id", box.getInt("docId")))
					.add(Restrictions.eq("Status", "y")).list();
			
						
			String deptTypeCode = HMSUtil.getProperties("adt.properties", "departmentTypeCodeForOpd") ;
			
			deptList = session.createCriteria(MasDepartment.class).add(
					 Restrictions.eq("Status", "y"))
					.createAlias("DepartmentType", "dt")
					.add(Restrictions.eq("dt.DepartmentTypeCode", deptTypeCode))
				    .addOrder(Order.asc("DepartmentName")).list();
			
			masImpanneledHospitalList = session.createCriteria(MasImpanneledHospital.class)
					.add(Restrictions.eq("Status", "Y").ignoreCase())
					.list();
			
			map.put("totalVisit", totalVisit);
			map.put("patientList", patientList);
			map.put("otherPatient", box.getString("otherPatient"));
			map.put("frequencyList", frequencyList);
			/*map.put("maxVisitList", maxVisitList);*/
			map.put("masItemClassList", masItemClassList);
			map.put("itemConversionList", itemConversionList);
			map.put("wardDepartment", wardDepartment);
			map.put("templateList", templateList);
			map.put("deptList", deptList);
			map.put("masImpanneledHospitalList", masImpanneledHospitalList);
			
			return map;
		}
		
		@Override
		public Map<String, Object> saveEmergencyOPD(Map<String, Object> dataMap) {
			Session session  = (Session)getSession();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			Box box = (Box)dataMap.get("box");
			String msg = "";
			int hinId = box.getInt("hinId");
			int totalVisit = box.getInt("totalVisit");
			List<Visit> lastVistList =  null;
			String a=box.get("totalVisit");
			String patientStatus = "";
			String admissionAdvised = (String) dataMap
					.get("admissionAdvised");
			int currentotalVisit=0;
					if(hinId!=0)
					{
						 
						lastVistList = session.createCriteria(Visit.class).add(Restrictions.eq("Hin.Id", hinId)).addOrder(Order.desc("Id")) .list();
						currentotalVisit = lastVistList.size();
						if(lastVistList.size()>0 && admissionAdvised.equals("y"))
						{
							patientStatus = lastVistList.get(0).getHin().getPatientStatus();  
						}
					}
		if(!patientStatus.trim().equalsIgnoreCase("In Patient"))
	      {			
    if(box.get("totalVisit")!=null && box.get("totalVisit")!="" &&currentotalVisit==totalVisit)
		   {
			Integer hospitalId = (Integer)dataMap.get("hospitalId");
			Integer devisionId = (Integer)dataMap.get("divisionId");
			Integer userId = (Integer)dataMap.get("userId");
			Integer deptId = (Integer)dataMap.get("deptId");
			Integer empId = (Integer)dataMap.get("empId");
			String hinNo = (String)box.getString("hinNo");
			Integer hdb = (Integer)box.getInt("hdb");
			int zonalId = (Integer)box.getInt("masZonal");
			int relationId =box.getInt("relationId");
			Integer patientEmployeeId = (Integer)box.getInt("employeeId");
			Vector diagnosisId = (Vector)box.getVector("diagnosisId");
			String otherPatient = box.getString("otherPatient");
			Date currentDate = new Date();
			Users users = null;
			MasHospital masHospital = new MasHospital(hospitalId);
			MasDepartment masDepartment = new MasDepartment(deptId);
			String currentTime = (String)HMSUtil.getCurrentTimeWithoutSecond().get("currentTime");

			List<Integer> itemIdList = (List<Integer>) dataMap.get("itemIdList");
			List<Integer> classificationList = (List<Integer>) dataMap.get("classificationList");
			List<Integer> frequencyList = (List) dataMap.get("frequencyList");
			List<String> otherMedicineList = (List) dataMap.get("otherMedicineList");
		//	List<String> nomenclatureList =  (List) dataMap.get("nomenclatureList");
			List<Integer> itemConversionList = (List) dataMap.get("itemConversionList");
			List<Integer> itemClassList = (List) dataMap.get("itemClassList");
			List<String> itemDispensaryList = (List) dataMap.get("itemDispensaryList");
			List<BigDecimal> uomQtyList =(List) dataMap.get("uomQtyList");
			List<String> ctList = (List) dataMap.get("ctList");
			//List<String> injCategoryList = (List) dataMap.get("injCategoryList");
			List<String> dosageList = (List) dataMap.get("dosageList");
			//List<String> typeLeftRightList = (List) dataMap.get("typeLeftRightList");
			//List<String> instructionList = (List) dataMap.get("instructionList");
			List<String> routeList = new ArrayList<String>();
			routeList= (List) dataMap.get("routeList");
			List<Integer> totalList = (List) dataMap.get("totalList");
			List<Integer> noOfDaysList = (List) dataMap.get("noOfDaysList");
			List<String> remarksList = (List) dataMap.get("remarksList");
			List<String> investigationDateList = (List) dataMap.get("investigationDate");
			
			
			Patient patient = null;
			MasEmployee masEmployee = null;
			String injectionStatus = "n";
			List<String> chargeCodeIdList = (List) dataMap.get("chargeCodeIdList");
			Visit visit = new Visit();
		
			
			String selfName =null;

			  selfName = HMSUtil.getValuesFromPropertiesFile("adt.properties", "selfRelationName");
			  List<Patient> patientList = (List<Patient>)session.createCriteria(Patient.class, "p").createAlias("Relation", "r").add(Restrictions.eq("p.Employee.Id", patientEmployeeId)).add(Restrictions.eq("r.Id", relationId)).list();
			
			Transaction tx = session.beginTransaction();
			try{
				MasAdministrativeSex gender = new MasAdministrativeSex();
				users = (Users)hbt.get(Users.class, userId);
				if(patientList.size()>0){// If Employee Already Patient Registration
					hinId = patientList.get(0).getId();
					patient = (Patient)hbt.get(Patient.class, hinId);
					masEmployee = (MasEmployee)hbt.get(MasEmployee.class, patientEmployeeId);
					patient.setBloodGroup(masEmployee.getBloodGroup());
				}
				
				else if(otherPatient!=null && otherPatient.equalsIgnoreCase("y"))
				{
					patient = new Patient();
					//masEmployee = (MasEmployee)hbt.get(MasEmployee.class, patientEmployeeId);
					//patient.setServiceNo(masEmployee.getServiceNo());
					List<MasRelation> masRelations = session.createCriteria(MasRelation.class, "mr").add(Restrictions.eq("mr.RelationName", HMSUtil.getProperties("adt.properties", "selfRelationName"))).list();
					List<MasPatientType> masPatientTypes = session.createCriteria(MasPatientType.class, "pt").add(Restrictions.eq("pt.PatientTypeName", HMSUtil.getProperties("adt.properties", "patientTypeNameForOther"))).list();
					if(masRelations.size()>0 && masPatientTypes.size()>0){
						String no =null; 
						List<Patient> otherPatientList =  session.createCriteria(Patient.class).add(Restrictions.eq("PatientType.Id",masPatientTypes.get(0).getId())).addOrder(Order.desc("Id")).setMaxResults(1).list();
						if(otherPatientList.size() > 0)
						{
							
							int n= Integer.parseInt(otherPatientList.get(0).getHinNo().substring(2,otherPatientList.get(0).getHinNo().length()));
							
							n=n+1;
							if(n<=9)
								no="0"+n;
							else
								no =n+"";
						}
						else
						{
							no="01";
						}
						//System.out.println(masPatientTypes.get(0).getPatientTypeCode() +" mas "+masPatientTypes.get(0).getId() +" no"+no);
						patient.setHinNo(masPatientTypes.get(0).getPatientTypeCode().concat(no));
						patient.setRelation(masRelations.get(0));
					}
					patient.setPFirstName((box.getString("pFirstName")));
					if(box.get("pMiddleName")!=null)
					patient.setPMiddleName((box.getString("pMiddleName")));
					if(box.get("pLastName")!=null)
					patient.setPLastName((box.getString("pLastName")));
					
					//patient.saveEmergencyOPDsetSFirstName(masEmployee.getFirstName());
					//patient.setSMiddleName(masEmployee.getMiddleName());
					//patient.setSLastName(masEmployee.getLastName());
					patient.setDateOfBirth(HMSUtil.convertStringTypeDateToDateType((box.getString(DOB))));
					patient.setCurrentVisitNo(0);
					patient.setAddEditBy(users);
					patient.setAddEditDate(currentDate);
					patient.setAddEditTime((String)HMSUtil.getCurrentTimeWithoutSecond().get("currentTime"));
					patient.setStatus("y");
					patient.setPatientStatus("Out Patient");
					patient.setRegDate(currentDate);
					patient.setRegTime((String)HMSUtil.getCurrentTimeWithoutSecond().get("currentTime"));
					patient.setAge(HMSUtil.calculateAge(HMSUtil.convertStringTypeDateToDateType((box.getString(DOB)))));
					//patient.setSrDob(masEmployee.getDateOfBirth());
					
					gender.setId((box.getInt(GENDER)));
					patient.setSex(gender);
					patient.setHospital(new MasHospital(hospitalId));
					if(masPatientTypes.size()>0)
						patient.setPatientType(masPatientTypes.get(0));
					//patient.setRank(masEmployee.getRank());
					//patient.setSrSex(masEmployee.getGender());
					patient.setBillable("y");
					patient.setDrugAllergies(box.getString("allergies"));
					//patient.setEmployee(masEmployee);
					hbt.save(patient);
					hinId = patient.getId();
				}
				else{
					patient = new Patient();
					patient.setDrugAllergies(box.getString("allergies"));
					masEmployee = (MasEmployee)hbt.get(MasEmployee.class, patientEmployeeId);
					patient.setServiceNo(masEmployee.getServiceNo());
					List<MasRelation> masRelations = session.createCriteria(MasRelation.class, "mr").add(Restrictions.eq("mr.Id", relationId)).list();
					List<MasPatientType> masPatientTypes = session.createCriteria(MasPatientType.class, "pt").add(Restrictions.eq("pt.PatientTypeName", HMSUtil.getProperties("adt.properties", "patientTypeNameForHAL"))).list();
					
					
					if(masRelations.size()>0 && masRelations.get(0).getRelationName().equalsIgnoreCase(HMSUtil.getProperties("adt.properties", "selfRelationName"))){
						patient.setPFirstName(masEmployee.getFirstName());
						patient.setPMiddleName(masEmployee.getMiddleName());
						patient.setPLastName(masEmployee.getLastName());
						patient.setBloodGroup(masEmployee.getBloodGroup());
						patient.setDateOfBirth(masEmployee.getDateOfBirth());
					}
					else
					{
						Set<MasEmployeeDependent> dependentSet = masEmployee.getMasEmployeeDependents();
						for(MasEmployeeDependent med:dependentSet)
						{
							if(med.getRelation().getId()== relationId)
							{
								patient.setPFirstName(med.getEmployeeDependentFName());
								patient.setPMiddleName(med.getEmployeeDependentMName());
								patient.setPLastName(med.getEmployeeDependentLName());
								patient.setBloodGroup(med.getBloodGroup()); 
								patient.setDateOfBirth(med.getDateOfBirth());
								break;
							}
						}
						
					}
					
					patient.setHinNo(masPatientTypes.get(0).getPatientTypeCode().concat(masEmployee.getServiceNo()).concat(masRelations.get(0).getRelationCode()));
					patient.setRelation(masRelations.get(0));
					
					patient.setSFirstName(masEmployee.getFirstName());
					patient.setSMiddleName(masEmployee.getMiddleName());
					patient.setSLastName(masEmployee.getLastName());
					
					patient.setCurrentVisitNo(0);
					patient.setAddEditBy(users);
					patient.setAddEditDate(currentDate);
					patient.setAddEditTime((String)HMSUtil.getCurrentTimeWithoutSecond().get("currentTime"));
					patient.setStatus("y");
					patient.setPatientStatus("Out Patient");
					patient.setRegDate(currentDate);
					patient.setRegTime((String)HMSUtil.getCurrentTimeWithoutSecond().get("currentTime"));
					patient.setAge(HMSUtil.calculateAge(masEmployee.getDateOfBirth()));
					patient.setSrDob(masEmployee.getDateOfBirth());
					patient.setSex(masEmployee.getGender());
					patient.setHospital(new MasHospital(hospitalId));
					if(masPatientTypes.size()>0)
						patient.setPatientType(masPatientTypes.get(0));
					patient.setRank(masEmployee.getRank());
					patient.setSrSex(masEmployee.getGender());
					patient.setBillable("n");
					patient.setEmployee(masEmployee);
					hbt.save(patient);
					
					hinId = patient.getId();
				}
				// Visit Start
				visit.setHin(patient);
				visit.setHospital(masHospital);
				visit.setStatus("y");
				visit.setAddEditBy(users);
				visit.setAddEditDate(currentDate);
				visit.setAddEditTime(currentTime);
				visit.setVisitNo(patient.getCurrentVisitNo()+1);
				visit.setVisitDate(currentDate);
				visit.setVisitTime(currentTime);
				visit.setAppointmentType("D");
				visit.setVisitStatus("C");
				visit.setReportingFor("OPD");
				visit.setVisitByAdmin("y");
				visit.setPriority(3);
				MasSession massession =new MasSession();
				massession.setId(1);
				visit.setSession(massession);
				visit.setDoctor(users.getEmployee());
				visit.setIntDoctor(users.getEmployee());
				visit.setDepartment(masDepartment);
				visit.setDivision(new MasDivision(devisionId));
				visit.setEmergencyVisit("y");
				visit.setPrescriptionCounter(1);
				visit.setWorkingDiagnosis(box.getString("initialDiagnosis"));
				hbt.save(visit);
				// Patient Update
				patient.setCurrentVisitNo(patient.getCurrentVisitNo());
				hbt.update(patient);
				// Visit End
				// OPD Prescription Start
				OpdPatientDetails opdPatientDetails = new OpdPatientDetails();
				
				
				
				opdPatientDetails.setAdmissionAdvised(admissionAdvised);
				
				if(admissionAdvised.equals("y"))
				{
					String dispoasal = HMSUtil.getValuesFromPropertiesFile("adt.properties", "disposalForAdmitted".trim());
					opdPatientDetails.setDisposal(dispoasal);
					if (dataMap.get("admissionWard") != null) {
					Integer admissionWard = (Integer) dataMap.get("admissionWard");
					opdPatientDetails.setAdmissionWard(new MasDepartment(admissionWard));
					}
					
					if (dataMap.get("admissionDate") != null) {
						Date admissionDate = (Date) dataMap.get("admissionDate");
						opdPatientDetails.setAdmissionDate(admissionDate);
					}
					opdPatientDetails.setAdmissionNotes(box.getString("admissionNote"));
					opdPatientDetails.setDepartment(masDepartment);
				}
				
				
				opdPatientDetails.setConsultationDate(currentDate);
				opdPatientDetails.setConsultationTime(currentTime);
				opdPatientDetails.setOpdDate(currentDate);
				opdPatientDetails.setOpdTime(currentTime);
				opdPatientDetails.setPhyStatus("c");
				opdPatientDetails.setMhRun("n");
				opdPatientDetails.setHospital(masHospital);
				opdPatientDetails.setVisit(visit);
				opdPatientDetails.setEmployee(users.getEmployee());
				opdPatientDetails.setInitialDiagnosis(box.getString("initialDiagnosis"));
				opdPatientDetails.setDepartment(masDepartment);
				hbt.save(opdPatientDetails);
				
				OpdPatientHistory opdPatientHistory = new OpdPatientHistory();
				opdPatientHistory.setVisitInpatientId(patient.getId());
				opdPatientHistory.setLastChgBy(users.getUserName());
				opdPatientHistory.setLastChgDate(currentDate);
				opdPatientHistory.setLastChgTime(currentTime);
				opdPatientHistory.setStatus("y");
				opdPatientHistory.setIpOpPacStatus("OP");
				opdPatientHistory.setPresentComplain(box.getString("presentComplain"));
				opdPatientHistory.setPresentAdvice("Review SOS");
				opdPatientHistory.setHospital(masHospital);
				opdPatientHistory.setOpdPatientDetails(opdPatientDetails);
				opdPatientHistory.setDepartment(masDepartment);
				opdPatientHistory.setHin(patient);
				opdPatientDetails.setCaseNotes(box.getString("clinicalNotes"));
				hbt.save(opdPatientHistory);

				String icd_string=null;
				if(diagnosisId.size()>0){
					for(Object diagnosis1:diagnosisId){
					List<MasIcd> icds =(List<MasIcd>)session.createCriteria(MasIcd.class, "m").add(Restrictions.eq("m.IcdCode", diagnosis1)).add(Restrictions.eq("m.Status", "y")).list();
					//Integer diagnosis =Integer.parseInt((String)diagnosis1);
					MasIcd masIcd =  icds.get(0);
					DischargeIcdCode dischargeIcdCode = new DischargeIcdCode();
					dischargeIcdCode.setIcd(masIcd);
					dischargeIcdCode.setAddEditDate(currentDate);
					dischargeIcdCode.setAddEditTime(currentTime);
					dischargeIcdCode.setStatus("y");
					dischargeIcdCode.setDiagnosisStatus("p");
					dischargeIcdCode.setVisit(visit);
					dischargeIcdCode.setOpdPatientDetails(opdPatientDetails);
					hbt.save(dischargeIcdCode);
					icd_string = icd_string!=null?icd_string+","+icds.get(0).getIcdName():icds.get(0).getIcdName()+"";
					}
				}

				if(icd_string!=null)
								{
									opdPatientDetails.setIcd(icd_string);
									hbt.update(opdPatientDetails);
								}
				
			
/*				// PatientPrescriptionHeader Start
				
				
				patientPrescriptionHeader.setPrescriptionDate(currentDate);
				patientPrescriptionHeader.setPrescriptionTime(currentTime);
				int PrescriptionNo=0;
				dataMap.put("tableObjectName", "PatientPrescriptionHeader");			
				dataMap.put("isHospitalWise", "y");
				dataMap.put("hospitalId", hospitalId);
				dataMap.put("isYearly", "n");			
				dataMap.put("isMonthly", "n");
				dataMap.put("isPrefix", "n");
				mapForDS.put("transactionPrefixProperty", "transactionPrefixForIPD");
				PrescriptionNo = Integer.parseInt(HMSUtil.generateTransactionSequence(dataMap, session, hbt));
				//patientPrescriptionHeader.setPrescriptionNo(getTransactionSequenceNoForPrescriptionNo(dataMap));
				 patientPrescriptionHeader.setPrescriptionNo(PrescriptionNo);
				//patientPrescriptionHeader.setInjectionStatus(injectionStatus);
				patientPrescriptionHeader.setEmp(users.getEmployee());
				patientPrescriptionHeader.setHospital(masHospital);
				patientPrescriptionHeader.setDepartment(masDepartment);
				patientPrescriptionHeader.setVisit(visit);
				patientPrescriptionHeader.setHin(patient);
				patientPrescriptionHeader.setStatus("p");
				patientPrescriptionHeader.setFacStatus("y");
				patientPrescriptionHeader.setOpdPatientDetails(opdPatientDetails);
				//patientPrescriptionHeader.setDivision(new MasDivision(masEmployee.getDivision().getId()));
				if(zonalId !=0)
				{
					MasZonal zonalobj= new MasZonal();
					zonalobj.setId(zonalId);
					patientPrescriptionHeader.setZonal(zonalobj);
				}
				patientPrescriptionHeader.setNipStatus("n");
				hbt.save(patientPrescriptionHeader);
				for(int i=1;i<=hdb;i++){
					//String item = (String)box.getString("nomenclature"+i);
					String item = box.get("itemId"+i);
					
					if(item!=null && item!=""){
						//int itemId = Integer.parseInt((String)item.substring(item.indexOf('(')+1, item.indexOf(')')));
					
						int itemId  = box.getInt("itemId"+i);
						int dosage = box.getInt("dosage"+i);
						int frequency = box.getInt("frequency"+i);
						int noOfDays = box.getInt("noOfDays"+i);
						String remarks = box.getString("remarks"+i);
						String route = box.getString("route"+i);
						String otherMedicine = box.getString("otherMedicine"+i);
						MasFrequency masFrequency = (MasFrequency)hbt.get(MasFrequency.class, frequency);
						MasStoreItem masStoreItem = (MasStoreItem)hbt.get(MasStoreItem.class, itemId);
						if(masStoreItem.getItemClass().getItemClassCode().equals("CL3")){injectionStatus = "y";}
						PatientPrescriptionDetails patientPrescriptionDetails = new PatientPrescriptionDetails();
						patientPrescriptionDetails.setDosage(dosage+"");
						patientPrescriptionDetails.setNoOfDays(noOfDays);
						patientPrescriptionDetails.setTotal(masFrequency.getFeq().intValue()*dosage*noOfDays);
						patientPrescriptionDetails.setDetailStatus("a");
						patientPrescriptionDetails.setRoute(route);
						patientPrescriptionDetails.setGivenQty(noOfDays);
						patientPrescriptionDetails.setInjectionStatus(injectionStatus);
						patientPrescriptionDetails.setFrequency(masFrequency);
						patientPrescriptionDetails.setItem(masStoreItem);
						patientPrescriptionDetails.setPrescription(patientPrescriptionHeader);
						hbt.save(patientPrescriptionDetails);
					}
				}
				patientPrescriptionHeader.setInjectionStatus(injectionStatus);
				hbt.update(patientPrescriptionHeader);
				// PatientPrescriptionHeader End
				// PatientPrescriptionDetails Start
				// PatientPrescriptionDetails End
				// OPD Prescription End
*/				


				PatientPrescriptionHeader patientPrescriptionHeader = new PatientPrescriptionHeader();
						int item_class_id = 0;
						if(itemIdList.size() > 0){
							
							patient.setId(hinId);
							patientPrescriptionHeader.setNipStatus("n");
							patientPrescriptionHeader.setHin(patient);
							
						
							patientPrescriptionHeader.setDepartment(masDepartment);
						
							
							patientPrescriptionHeader.setVisit(visit);
			
							masHospital.setId(hospitalId);
							patientPrescriptionHeader.setHospital(masHospital);
							patientPrescriptionHeader.setStatus("p");
							patientPrescriptionHeader
									.setPrescriptionDate(currentDate);
							patientPrescriptionHeader.setPrescriptionTime(currentTime);
							/**
							 * Code By Ritu 
							 * Created Foreign key relation for emp id in Database
							 */MasEmployee employee = new MasEmployee();
							employee.setId(empId);
							patientPrescriptionHeader.setEmp(employee);
							
							/**
							 * End of code by Ritu
							 */
							/*int prescriptionNo=getTransactionSequenceNoForPrescriptionNo(mapForDS);*/
				        	Map<String, Object> adMap = new HashMap<String, Object>();
						      adMap.put("tableObjectName", "PATIENT_PRESCRIPTION_HEADER");            
					            adMap.put("isHospitalWise", "y");
					            adMap.put("hospitalId", hospitalId);
					            adMap.put("isYearly", "n");            
					            adMap.put("isMonthly", "n");
					            adMap.put("isPrefix", "n");
					
					        int prescriptionNo = Integer.parseInt(HMSUtil.generateTransactionSequence(adMap, session, hbt));
							patientPrescriptionHeader.setPrescriptionNo(prescriptionNo);
							patientPrescriptionHeader.setOpdPatientDetails(opdPatientDetails);
							
							/*
							 * This block is use for Check Injection in Prescription List
							 */
							//----------------commented by anamika for itemId================
							String sqlItemId="";
						//	List<Integer> itemList = new ArrayList<Integer>();
							for (int i = 0; i < itemIdList.size(); i++) {
								/*String pvmsNo = (String) itemIdList.get(i);
								String nomenclature = (String) nomenclatureList.get(i);
								int itemId = getItemIdFromPVMS(nomenclature,pvmsNo,hospitalId);*/
								int itemId = (Integer)itemIdList.get(i);;
								if(i==0){
									sqlItemId=""+itemId;
								}else{
									sqlItemId +=" , "+itemId;
								}
							//	itemIdList.add(itemId);
							}
							List<MasStoreItem> masItemList=new ArrayList<MasStoreItem>();
							Properties properties = new Properties();
							URL resourcePath = Thread.currentThread().getContextClassLoader()
									.getResource("adt.properties");
							
							try {
								properties.load(resourcePath.openStream());
								String item_class_code = properties.getProperty("item_class_id");
								item_class_id=Integer.parseInt(item_class_code);
							} catch (Exception e) {
								e.printStackTrace();
							}
							if(!sqlItemId.equals(""))
								masItemList=hbt.find("select item from jkt.hms.masters.business.MasStoreItem as item join item.ItemCategory as ic where item.Id in ("+sqlItemId+") and ic.Id="+item_class_id+" and item.IssueFrom='i'");
							
							if(masItemList.size()>0){
								patientPrescriptionHeader.setInjectionStatus("p");
							}else{
								patientPrescriptionHeader.setInjectionStatus("n");
							}
							/*
							 * End Of Code This block is use for Check Injection in Prescription List
							 */
							patientPrescriptionHeader.setOtherTreatment((String)dataMap.get("otherTreatment"));
							
					            int ItemClassificationIdForNIP = 0;
								ItemClassificationIdForNIP = Integer.parseInt(HMSUtil.getValuesFromPropertiesFile("adt.properties", "ItemClassificationId"));
					
				
								for(int iCId :classificationList)
								{
									if(iCId==ItemClassificationIdForNIP)
									{
										patientPrescriptionHeader.setNipStatus("y");
										break;
									}
								}
							
							hbt.save(patientPrescriptionHeader);
						}/** else part added by Ritu for other treatment details **/
				/*		else if(itemIdList.size() == 0 && mapForDS.get("otherTreatment")!=null && !(mapForDS.get("otherTreatment")).equals("")){

							Patient patient = new Patient();
							patient.setId(hinId);
							patientPrescriptionHeader.setHin(patient);
							MasDepartment masDepartment = new MasDepartment();
							masDepartment.setId(departmentId);
							patientPrescriptionHeader.setDepartment(masDepartment);
							Visit visit = new Visit();
							visit.setId(visitId);
							patientPrescriptionHeader.setVisit(visit);
							MasHospital masHospital = new MasHospital();
							masHospital.setId(hospitalId);
							patientPrescriptionHeader.setHospital(masHospital);
							patientPrescriptionHeader.setStatus("p");
							patientPrescriptionHeader
									.setPrescriptionDate(consultationDateToInsert);
							patientPrescriptionHeader.setPrescriptionTime(consultationTime);
							
							MasEmployee employee = new MasEmployee();
							employee.setId(empId);
							patientPrescriptionHeader.setEmp(employee);
							//int prescriptionNo=getTransactionSequenceNoForPrescriptionNo(mapForDS);
							Map<String, Object> adMap = new HashMap<String, Object>();
						      adMap.put("tableObjectName", "PATIENT_PRESCRIPTION_HEADER");            
					            adMap.put("isHospitalWise", "y");
					            adMap.put("hospitalId", 1);
					            adMap.put("isYearly", "n");            
					            adMap.put("isMonthly", "n");
					            adMap.put("isPrefix", "n");
					
					        int prescriptionNo = Integer.parseInt(HMSUtil.generateTransactionSequence(adMap, session, hbt));
							
						

							patientPrescriptionHeader.setPrescriptionNo(prescriptionNo);
							patientPrescriptionHeader.setOpdPatientDetails(opdPatientDetails);
					
							patientPrescriptionHeader.setInjectionStatus("n");
							patientPrescriptionHeader.setOtherTreatment((String)mapForDS.get("otherTreatment"));
							
							hbt.save(patientPrescriptionHeader);
						
							
						}*/
						if (itemIdList.size() > 0 ) {
							for (int i = 0; i < itemIdList.size(); i++) {
								if(itemIdList.get(i) !=0){
								List<MasStoreItem> itemCodeList = new ArrayList<MasStoreItem>();
								PatientPrescriptionDetails patientPrescriptionDetails = new PatientPrescriptionDetails();
								if(itemIdList.get(i) != null){
									MasStoreItem masStoreItem = new MasStoreItem();
									masStoreItem.setId(itemIdList.get(i));
								patientPrescriptionDetails.setItem(masStoreItem);
								}
								if (frequencyList.get(i) != null && !frequencyList.get(i).equals("")) {
									MasFrequency masFrequency = new MasFrequency();
									masFrequency.setId(frequencyList.get(i));
									patientPrescriptionDetails.setFrequency(masFrequency);
									}
									if (dosageList.get(i) != null && !dosageList.get(i).equals("") && !dosageList.get(i).equals("0")) {
										patientPrescriptionDetails.setDosage(dosageList.get(i));
									}else{
										patientPrescriptionDetails.setDosage("0");
									}
									if (remarksList.get(i) != null && !remarksList.get(i).equals("")) {
										patientPrescriptionDetails.setRemarks(remarksList.get(i));
									}
									//patientPrescriptionDetails.setType(typeLeftRightList.get(i));
									if (noOfDaysList.get(i) != null && !noOfDaysList.get(i).equals("")) {
										patientPrescriptionDetails.setNoOfDays(noOfDaysList.get(i));
									}
									if (routeList.get(i) != null && !routeList.get(i).equals("")) {
										patientPrescriptionDetails.setRoute(routeList.get(i));
									}
									/*if (totalList.get(i) != null && !totalList.get(i).equals("")) {
										patientPrescriptionDetails.setTotal(Math.round(totalList.get(i).floatValue()));
									}*/
									if (totalList.get(i) != null && !totalList.get(i).equals("") && totalList.get(i) != 0) {
										patientPrescriptionDetails.setTotal(totalList.get(i));
									}else{
										patientPrescriptionDetails.setTotal(1);
									}
									patientPrescriptionDetails.setGivenQty(0);
								
								
								//patientPrescriptionDetails.setType(typeLeftRightList.get(i));
								
								//patientPrescriptionDetails.setInstruction(instructionList.get(i));
								
								
								patientPrescriptionDetails.setPrescription(patientPrescriptionHeader);
							
								patientPrescriptionDetails.setDetailStatus("a");
								
								
						/*		List<MasStoreItem> storeItemList=new ArrayList<MasStoreItem>();
								storeItemList=hbt.find("select item from jkt.hms.masters.business.MasStoreItem as item join item.ItemCategory as ic where item.Id="+itemIdList.get(i)+" and ic.Id="+item_category_id);
								if(storeItemList.size() > 0){
									patientPrescriptionDetails.setInjectionStatus("p");
								}else{
									patientPrescriptionDetails.setInjectionStatus("n");
								}
								if(ctList.get(i).equals("y")){
									patientPrescriptionDetails.setCt("yes");
								}else{
									patientPrescriptionDetails.setCt("no");
								}
								*/
								List<MasStoreItem> storeItemList=new ArrayList<MasStoreItem>();
								Properties properties = new Properties();
								URL resourcePath = Thread.currentThread().getContextClassLoader().getResource("adt.properties");
								try {
									properties.load(resourcePath.openStream());
									String item_class_code = properties.getProperty("item_class_id");
									item_class_id=Integer.parseInt(item_class_code);
								} catch (Exception e) {
									e.printStackTrace();
								}
								storeItemList=hbt.find("select item from jkt.hms.masters.business.MasStoreItem as item join item.ItemClass as ic where item.Id="+itemIdList.get(i)+" and ic.Id="+item_class_id+" and item.IssueFrom='i'");
								if(storeItemList.size() > 0){
									patientPrescriptionDetails.setInjectionStatus("p");
								}else{
									patientPrescriptionDetails.setInjectionStatus("n");
								}
								
						/*		if(visitObjToUpdate!=null && visitObjToUpdate.getVisitStatus().equalsIgnoreCase("p") && parkPrescriptionIds!=null && !parkPrescriptionIds.get(i).equals(0)){
									hbt.update(patientPrescriptionDetails);
								}else{
									hbt.save(patientPrescriptionDetails);
								}*/
								
								hbt.save(patientPrescriptionDetails);
									//opdPatientListObject.add(patientPrescriptionDetails);
									//prevent insulin for nursing station and available in pharmacy only in readonly mod
								if(!checkForInsulinInjection(itemIdList.get(i))){
										if(storeItemList.size()>0){
											
											
											if(session.createCriteria(MasStoreItem.class).add(Restrictions.eq("Id", itemIdList.get(i))).add(Restrictions.eq("IssueFrom", "I")).list().size()>0){
													
											
											List<InjAppointmentHeader> injectionRegisterList=new ArrayList<InjAppointmentHeader>();
											injectionRegisterList=hbt.find("select inj from jkt.hms.masters.business.InjAppointmentHeader as inj join inj.Visit as visit where visit.Id="+visit.getId());
											
											InjAppointmentHeader injectionAppointment = new InjAppointmentHeader();
											
											 
											if(injectionRegisterList.size()>0){
												for (InjAppointmentHeader injectionRegisterTemp : injectionRegisterList) {
													injectionAppointment.setId(injectionRegisterTemp.getId());
												}
											}else{
												Patient patientInj = new Patient();
												patientInj.setId(hinId);
												injectionAppointment.setHin(patientInj);
										/*		Visit visitInj = new Visit();
												visitInj.setId(visitId);*/
												injectionAppointment.setVisit(visit);
												MasHospital masHospitalInj = new MasHospital();
												masHospitalInj.setId(hospitalId);
												injectionAppointment.setHospital(masHospitalInj);
												
												injectionAppointment.setStatus("p");
												injectionAppointment.setLastChgTime(currentTime);
												injectionAppointment.setLastChgBy(users);
												injectionAppointment.setLastChgDate(currentDate);
												injectionAppointment.setAppointmentDate(currentDate);
												injectionAppointment.setPrescription(patientPrescriptionHeader);
												hbt.save(injectionAppointment);
												
											}
														InjAppointmentDetails injAppointmentDetails = new InjAppointmentDetails();
														//injAppointmentDetails.setAppointmentTime(time);
														injAppointmentDetails.setInjAppointmentDate(new Date());
														injAppointmentDetails.setDose(String.valueOf(dosageList.get(i)));
														
														MasFrequency frequency = new MasFrequency();
														frequency.setId(frequencyList.get(i));
														injAppointmentDetails.setFrequency(frequency);
														
														/*if(routeOfAdministration!=null)
														injAppointmentDetails.setRoute(routeOfAdministration.getRouteName());
														*/
														 
														MasStoreItem item = new MasStoreItem();
														item.setId(itemIdList.get(i));
														
														
														
															injAppointmentDetails.setItem(item);
															injAppointmentDetails.setInjAppointmentHeader(injectionAppointment);
															injAppointmentDetails.setNoOfDays(noOfDaysList.get(i));
															injAppointmentDetails.setPatientPrescriptionDetails(patientPrescriptionDetails);
															injAppointmentDetails.setStatus("p");
															injAppointmentDetails.setFinalStatus("n");
															hbt.save(injAppointmentDetails);
											
										  }
										}
								}
								//end injectionappointment
								
						
								
								/**
								 * This Code is use for Injection Appointment
								 * Code By Ritu Sahu
								 * Date 07 Nov 2011
								 */
								
						/*		if(storeItemList.size()>0){
									List<InjAppointmentHeader> injectionRegisterList=new ArrayList<InjAppointmentHeader>();
									injectionRegisterList=hbt.find("select inj from jkt.hms.masters.business.InjAppointmentHeader as inj join inj.Visit as visit where visit.Id="+visitId);
									InjAppointmentHeader injectionAppointment = new InjAppointmentHeader();
									
									  if(injectionRegisterList.size()>0) means , Data is already available In InjectionRegister table  
									 
									if(injectionRegisterList.size()>0){
										for (InjAppointmentHeader injectionRegisterTemp : injectionRegisterList) {
											injectionAppointment.setId(injectionRegisterTemp.getId());
										}
									}else{
										injectionAppointment.setAppointmentDate(new Date());
										Patient patientInj = new Patient();
										patientInj.setId(hinId);
										injectionAppointment.setHin(patientInj);
										Visit visitInj = new Visit();
										visitInj.setId(visitId);
										injectionAppointment.setVisit(visitInj);
										MasHospital masHospitalInj = new MasHospital();
										masHospitalInj.setId(hospitalId);
										injectionAppointment.setHospital(masHospitalInj);
										
										injectionAppointment.setStatus("p");
										injectionAppointment.setLastChgTime(time);
										Users user = new Users();
										user.setId(userId);
										injectionAppointment.setLastChgBy(user);
										injectionAppointment.setLastChgDate(date);
										injectionAppointment.setPrescription(patientPrescriptionHeader);
										hbt.save(injectionAppointment);
									}
									int freqCount=0;
									if(frequencyList.get(i) > 10){
										freqCount = 1;  if frequency is greater than 10 then only one entry will go in Injection Appointment table
									}else{
										freqCount = frequencyList.get(i);
									}
									if(freqCount > 0){	
										for (int j = 1; j <= freqCount; j++) {
											InjAppointmentDetails injAppointmentDetails = new InjAppointmentDetails();
											injAppointmentDetails.setAppointmentTime(time);
											injAppointmentDetails.setDose(dosageList.get(i));
											MasFrequency frequency = new MasFrequency();
											frequency.setId(frequencyList.get(i));
											injAppointmentDetails.setFrequency(frequency);
											injAppointmentDetails.setRoute(routeList.get(i));
											MasStoreItem item = new MasStoreItem();
											item.setId(itemIdList.get(i));
											injAppointmentDetails.setItem(item);
											injAppointmentDetails.setInjAppointmentHeader(injectionAppointment);
											injAppointmentDetails.setNoOfDays(noOfDaysList.get(i));
											injAppointmentDetails.setPatientPrescriptionDetails(patientPrescriptionDetails);
											injAppointmentDetails.setStatus("p");
											hbt.save(injAppointmentDetails);
										}
									}
								}*/
								/**
								 * END Of COde
								 * This Code is use for Injection
								 * Code By Ritu Sahu
								 * Date 07 Nov 2011
								 */
							}
							}
						}
				
						//-------------------------------------------------
						if(otherMedicineList != null && otherMedicineList.size() > 0){
							String sqlItemId="";
							int itemId = 0;
							/*PatientPrescriptionHeader patientPrescriptionHeader = new PatientPrescriptionHeader();
							Patient patient = new Patient();
							patient.setId(hinId);
							patientPrescriptionHeader.setHin(patient);
							MasDepartment masDepartment = new MasDepartment();
							masDepartment.setId(departmentId);
							patientPrescriptionHeader.setDepartment(masDepartment);
							Visit visit = new Visit();
							visit.setId(visitId);
							patientPrescriptionHeader.setVisit(visit);
							MasHospital masHospital = new MasHospital();
							masHospital.setId(hospitalId);
							patientPrescriptionHeader.setHospital(masHospital);
							patientPrescriptionHeader.setStatus("p");
							patientPrescriptionHeader
									.setPrescriptionDate(consultationDateToInsert);
							patientPrescriptionHeader.setPrescriptionTime(consultationTime);
							*//**
							 * Code By Ritu 
							 * Created Foreign key relation for emp id in Database
							 *//*
							MasEmployee employee = new MasEmployee();
							employee.setId(empId);
							patientPrescriptionHeader.setEmp(employee);
							
							*//**
							 * End of code by Ritu
							 *//*
							int prescriptionNo=getTransactionSequenceNoForPrescriptionNo(mapForDS);
							patientPrescriptionHeader.setPrescriptionNo(prescriptionNo);
					
							for(int i = 0; i < injCategoryList.size(); i++){
								if(injCategoryList.get(i).equals("y")){
									patientPrescriptionHeader.setInjectionStatus("p");
									break;
								}else{
									patientPrescriptionHeader.setInjectionStatus("n");
								}
							}
							
							 * End Of Code This block is use for Check Injection in Prescription List
							 
							
							hbt.save(patientPrescriptionHeader);*/

							//List<MasStoreItem> itemCodeList = new ArrayList<MasStoreItem>();
							String otherItem = "";
							if(otherMedicineList.size() >0){
								
								if(patientPrescriptionHeader.getId()==null)
								{
								/*	Patient patient = new Patient();
									patient.setId(hinId);*/
									patientPrescriptionHeader.setHin(patient);
								/*	MasDepartment masDepartment = new MasDepartment();
									masDepartment.setId(departmentId);*/
									patientPrescriptionHeader.setDepartment(masDepartment);
									/*Visit visit = new Visit();
									visit.setId(visitId);*/
									patientPrescriptionHeader.setVisit(visit);
									/*MasHospital masHospital = new MasHospital();
									masHospital.setId(hospitalId);*/
									patientPrescriptionHeader.setHospital(masHospital);
									patientPrescriptionHeader.setStatus("p");
									patientPrescriptionHeader
											.setPrescriptionDate(currentDate);
									patientPrescriptionHeader.setPrescriptionTime(currentTime);
									
									MasEmployee employee = new MasEmployee();
									employee.setId(empId);
									patientPrescriptionHeader.setEmp(employee);
									//int prescriptionNo=getTransactionSequenceNoForPrescriptionNo(mapForDS);
									Map<String, Object> adMap = new HashMap<String, Object>();
								      adMap.put("tableObjectName", "PATIENT_PRESCRIPTION_HEADER");            
							            adMap.put("isHospitalWise", "y");
							            adMap.put("hospitalId", 1);
							            adMap.put("isYearly", "n");            
							            adMap.put("isMonthly", "n");
							            adMap.put("isPrefix", "n");
							
							        int prescriptionNo = Integer.parseInt(HMSUtil.generateTransactionSequence(adMap, session, hbt));
									
								

									patientPrescriptionHeader.setPrescriptionNo(prescriptionNo);
									patientPrescriptionHeader.setOpdPatientDetails(opdPatientDetails);
							
									patientPrescriptionHeader.setInjectionStatus("n");
									patientPrescriptionHeader.setOtherTreatment((String)dataMap.get("otherTreatment"));
									hbt.save(patientPrescriptionHeader);
								}
								patientPrescriptionHeader.setNipStatus("y");
								hbt.update(patientPrescriptionHeader);
								String nipCode = null;
								int itemClassificationId = 0;
								int groupId = 0;
								int sectionId = 0;
								int itemTypeId= 0;
								try
								{
									nipCode = HMSUtil.getProperties("adt.properties", "ItemClassificationCodeNIP");
									itemClassificationId = Integer.parseInt(HMSUtil.getProperties("adt.properties", "ItemClassificationId"));
									groupId = Integer.parseInt(HMSUtil.getProperties("adt.properties", "ItemGroupId"));
									sectionId = Integer.parseInt(HMSUtil.getProperties("adt.properties", "SectionIdForDrugs"));
									itemTypeId = Integer.parseInt(HMSUtil.getProperties("adt.properties", "ItemTypeId"));
								}
								catch(Exception e)
								{
									e.printStackTrace();
								}
								int totalNip = session.createCriteria(MasStoreItem.class).createAlias("ItemClassification", "ic").add(Restrictions.eq("ic.Classification", nipCode)).add(Restrictions.eq("Hospital.Id", hospitalId)).list().size();
								
									int k=0;
							for(int i = itemIdList.size(); i <otherMedicineList.size()+itemIdList.size(); i++){
								MasStoreItem masItem = new MasStoreItem();
								if(otherMedicineList.get(k) != null && !otherMedicineList.get(k).equals("")){
									otherItem =(String)otherMedicineList.get(k);
									masItem.setNomenclature(otherMedicineList.get(k));
									MasStoreSection masStoreSection = new MasStoreSection();
									masStoreSection.setId(sectionId);
									masItem.setSection(masStoreSection);
									masItem.setStatus("y");
									masItem.setBrandedGeneric("B");
									
									if (itemConversionList.get(i) != null && !itemConversionList.get(i).equals("")) {
										MasStoreItemConversion masStoreItemConversion = new MasStoreItemConversion();
										masStoreItemConversion.setId(itemConversionList.get(i));
										masItem.setItemConversion(masStoreItemConversion);
										}
									
									if (itemClassList.get(i) != null && !itemClassList.get(i).equals("")) {
										 MasItemClass masItemClass = new MasItemClass();
										 masItemClass.setId(itemClassList.get(i));
										masItem.setItemClass(masItemClass);
										}
									
									if (itemDispensaryList.get(i) != null && !itemDispensaryList.get(i).equals("")) {
										masItem.setDispUnit(itemDispensaryList.get(i));
										}


									if (uomQtyList .get(i) != null && !uomQtyList .get(i).equals("")) {
										masItem.setADispQty(uomQtyList .get(i));
									}
									totalNip++;
									masItem.setPvmsNo(nipCode+totalNip);
									
									MasItemType masItemType = new MasItemType();
									masItemType.setId(itemTypeId);
									masItem.setItemType(masItemType);
								/*	MasHospital masHospital = new MasHospital();
									masHospital.setId(hospitalId);*/
									masItem.setHospital(masHospital);
									masItem.setHighValueDrug("n");
									MasItemClassification Mic = new MasItemClassification();
									Mic.setId(itemClassificationId);
									masItem.setItemClassification(Mic);
									MasStoreGroup msgrp = new MasStoreGroup();
									msgrp.setId(groupId);
									masItem.setGroup(msgrp);
									//masItem.setLastChgBy(userName);
									masItem.setLastChgDate(currentDate);
									masItem.setLastChgTime(currentTime);
									
									/*itemCodeList =session.createCriteria(MasStoreItem.class).add(Restrictions.like("PvmsNo", "NIV%")).add(Restrictions.eq("Hospital.Id", hospitalId))
									.addOrder(Order.desc("Id")).setMaxResults(1).list();
									String itemNo = "";
									if(itemCodeList.size()>0){
										MasStoreItem masStoreItem =itemCodeList.get(0);
										String itemCode = masStoreItem.getPvmsNo();
										StringTokenizer str = new StringTokenizer(itemCode, "/");
										String itemNivCode = "";
										while (str.hasMoreTokens()) {

											itemNivCode = str.nextToken();

										}
										int itemNiv =Integer.parseInt(itemNivCode)+1;
										itemNo = "NIV/"+itemNiv;
									}else{
										itemNo = "NIV/011"; 
									}*/
									//masItem.setPvmsNo("temp");
									
									hbt.save(masItem);
									

							
								PatientPrescriptionDetails patientPrescriptionDetails = new PatientPrescriptionDetails();
								if(masItem.getId() != null){
									MasStoreItem masStoreItem = new MasStoreItem();
									masStoreItem.setId(masItem.getId());
								patientPrescriptionDetails.setItem(masStoreItem);
								}
								if (frequencyList.get(i) != null && !frequencyList.get(i).equals("")) {
								MasFrequency masFrequency = new MasFrequency();
								masFrequency.setId(frequencyList.get(i));
								patientPrescriptionDetails.setFrequency(masFrequency);
								}
								if (dosageList.get(i) != null && !dosageList.get(i).equals("")) {
									patientPrescriptionDetails.setDosage(dosageList.get(i));
								}
								if (remarksList.get(i) != null && !remarksList.get(i).equals("")) {
								patientPrescriptionDetails.setRemarks(remarksList.get(i));
								}
								//patientPrescriptionDetails.setType(typeLeftRightList.get(i));
								if (noOfDaysList.get(i) != null && !noOfDaysList.get(i).equals("")) {
									patientPrescriptionDetails.setNoOfDays(noOfDaysList.get(i));
								}
								if (routeList.get(i) != null && !routeList.get(i).equals("")) {
									patientPrescriptionDetails.setRoute(routeList.get(i));
								}
								
								//patientPrescriptionDetails.setInstruction(instructionList.get(i));
								if (totalList.get(i) != null && !totalList.get(i).equals("")) {
									patientPrescriptionDetails.setTotal(totalList.get(i));
								}
								patientPrescriptionDetails.setPrescription(patientPrescriptionHeader);
								patientPrescriptionDetails.setGivenQty(0);
								patientPrescriptionDetails.setDetailStatus("a");
								List<MasStoreItem> storeItemList=new ArrayList<MasStoreItem>();
								patientPrescriptionDetails.setInjectionStatus("n");
								
								if(ctList.get(i).equals("y")){
									patientPrescriptionDetails.setCt("yes");
								}else{
									patientPrescriptionDetails.setCt("no");
								}
								
								
								hbt.save(patientPrescriptionDetails);
								
								/**
								 * This Code is use for Injection Appointment
								 * Code By Ritu Sahu
								 * Date 07 Nov 2011
								 */
								
								if(storeItemList.size()>0){
									List<InjAppointmentHeader> injectionRegisterList=new ArrayList<InjAppointmentHeader>();
									injectionRegisterList=hbt.find("select inj from jkt.hms.masters.business.InjAppointmentHeader as inj join inj.Visit as visit where visit.Id="+visit.getId());
									InjAppointmentHeader injectionAppointment = new InjAppointmentHeader();
									
									 /* if(injectionRegisterList.size()>0) means , Data is already available In InjectionRegister table  */
									 
									if(injectionRegisterList.size()>0){
										for (InjAppointmentHeader injectionRegisterTemp : injectionRegisterList) {
											injectionAppointment.setId(injectionRegisterTemp.getId());
										}
									}else{
										injectionAppointment.setAppointmentDate(new Date());
										Patient patientInj = new Patient();
										patientInj.setId(hinId);
										injectionAppointment.setHin(patientInj);
										/*Visit visitInj = new Visit();
										visitInj.setId(visitId);*/
										injectionAppointment.setVisit(visit);
										MasHospital masHospitalInj = new MasHospital();
										masHospitalInj.setId(hospitalId);
										injectionAppointment.setHospital(masHospitalInj);
										
										injectionAppointment.setStatus("p");
										injectionAppointment.setLastChgTime(currentTime);
									/*	Users user = new Users();
										user.setId(userId);*/
										injectionAppointment.setLastChgBy(users);
										injectionAppointment.setLastChgDate(currentDate);
										injectionAppointment.setPrescription(patientPrescriptionHeader);
										hbt.save(injectionAppointment);
									}
									int freqCount=0;
									if(frequencyList.get(i) > 10){
										freqCount = 1; /* if frequency is greater than 10 then only one entry will go in Injection Appointment table*/
									}else{
										freqCount = frequencyList.get(i);
									}
									if(freqCount > 0){	
										for (int j = 1; j <= freqCount; j++) {
											InjAppointmentDetails injAppointmentDetails = new InjAppointmentDetails();
											injAppointmentDetails.setAppointmentTime(currentTime);
											injAppointmentDetails.setDose(dosageList.get(i));
											MasFrequency frequency = new MasFrequency();
											frequency.setId(frequencyList.get(i));
											injAppointmentDetails.setFrequency(frequency);
											injAppointmentDetails.setRoute(routeList.get(i));
											MasStoreItem item = new MasStoreItem();
											item.setId(itemIdList.get(i));
											injAppointmentDetails.setItem(item);
											injAppointmentDetails.setInjAppointmentHeader(injectionAppointment);
											injAppointmentDetails.setNoOfDays(noOfDaysList.get(i));
											injAppointmentDetails.setPatientPrescriptionDetails(patientPrescriptionDetails);
											injAppointmentDetails.setStatus("p");
											hbt.save(injAppointmentDetails);
										}
									}
								}
								}
								/**
								 * END Of COde
								 * This Code is use for Injection
								 * Code By Ritu Sahu
								 * Date 07 Nov 2011
								 */
								k++;
								
							}
						}
						}
						
				
				String dgOrderBillingStatus =null;
				
				if(chargeCodeIdList.size()>0)
				{
					String patientTypeNameForHAL = null;
					String patientTypeNameForOther = null;
			
						 patientTypeNameForHAL =  HMSUtil.getProperties("adt.properties", "patientTypeNameForHAL");
						 patientTypeNameForOther = HMSUtil.getProperties("adt.properties", "patientTypeNameForOther");
					
					Criteria crit = session.createCriteria(Patient.class).add(
							Restrictions.eq("Id", hinId));
					patientList = crit.list();
								
					if(patientList.size()==0)
					{
						patientList = session.createCriteria(Patient.class).add(
								Restrictions.eq("Id", hinId)).list();
					}
					
				if(patientList.size()>0)
				{	
						if(patientList.get(0).getPatientType().getPatientTypeName().equals(patientTypeNameForHAL))
						{
							dgOrderBillingStatus ="y";
						}
						else if(patientList.get(0).getPatientType().getPatientTypeName().equals(patientTypeNameForOther))
						{
							if(patientList.get(0).getBillable().equals("y"))
							    dgOrderBillingStatus ="n";
							else if(patientList.get(0).getBillable().equals("n"))
								dgOrderBillingStatus ="y";
						}
					}

					  Map<String, Object> adMap = new HashMap<String, Object>();
				      adMap.put("tableObjectName", "DgOrderhd");            
			            adMap.put("isHospitalWise", "y");
			            adMap.put("hospitalId", hospitalId);
			            adMap.put("isYearly", "n");            
			            adMap.put("isMonthly", "n");
			            adMap.put("isPrefix", "n");
					//List<String> headerinvestigationDateList =  (List) mapForDS.get("investigationDate");
					;
					List<String> insertedDateList =  new ArrayList<>();
					for(String investigtionDate: investigationDateList)
					{
					if(!insertedDateList.contains(investigtionDate))	{
						insertedDateList.add(investigtionDate);
					
						DgOrderhd dgOrderhd = new DgOrderhd();
						dgOrderhd.setOrderDate(HMSUtil.convertStringTypeDateToDateType(investigtionDate));
						dgOrderhd.setOrderTime(currentTime);
						
						dgOrderhd.setHospital(masHospital);
						dgOrderhd.setHin(patient);
						dgOrderhd.setDepartment(masDepartment);
						dgOrderhd.setPrescribedBy(users.getEmployee());
					
						dgOrderhd.setBillingStatus(dgOrderBillingStatus);
						dgOrderhd.setPatientType("OP");
						dgOrderhd.setTestType("Regular");
						dgOrderhd.setCreatedby((String)dataMap.get("userName"));
						dgOrderhd.setCreatedon(currentDate);
					
						/*mapForDS.put("transactionPrefixProperty", "transactionPrefixForIPD");*/
						String orderSeqNo = HMSUtil.generateTransactionSequence(adMap, session, hbt);
						    dgOrderhd.setOrderNo(orderSeqNo);
							dgOrderhd.setVisit(visit);
							//dgOrderhd.setClinicalNote(clinicalNotes1);
						dgOrderhd.setOrderStatus("P");
						dgOrderhd.setLabOrderStatus("P");
						dgOrderhd.setLastChgBy(users);
						dgOrderhd.setLastChgDate(currentDate);
						dgOrderhd.setLastChgTime(currentTime);
						//dgOrderhd.setInvestigationRequestionNo(patientInvestigationHeader);
						/*if(mapForDS.get("otherInvestigation")!=null)
						dgOrderhd.setOtherInvestigation(mapForDS.get("otherInvestigation").toString().trim());*/
				
						hbt.save(dgOrderhd);
					
						for (int i = 0; i < chargeCodeIdList.size(); i++) {

							if(investigtionDate.equals(investigationDateList.get(i))){
								
							
							
							MasChargeCode masChargeCode = new MasChargeCode();
							masChargeCode.setId(Integer.parseInt(chargeCodeIdList.get(i)));
							
												DgOrderdt dgOrderdt = new DgOrderdt();
												dgOrderdt.setOrderhd(dgOrderhd);
												masChargeCode.setId(Integer.parseInt(chargeCodeIdList.get(i)));
												dgOrderdt.setChargeCode(masChargeCode);
												//dgOrderdt.setOrderQty(quantityList.get(i));
												dgOrderdt.setBillingStatus(dgOrderBillingStatus);
												dgOrderdt.setCreatedby((String)dataMap.get("userName"));
												//dgOrderdt.setCreatedon(currentDate);
												dgOrderdt.setCreatedon(HMSUtil.convertStringTypeDateToDateType(investigtionDate));
												dgOrderdt.setLastChgBy(users);
												dgOrderdt.setLastChgDate(currentDate);
												dgOrderdt.setLastChgTime(currentTime);
												dgOrderdt.setMsgSent("n");
												// method written for taking out the values of mascharge
												// code and subcharge
												Map masChargeMap = getMasChargeCodeFromChargeId(Integer
														.parseInt(chargeCodeIdList.get(i)));
												MasChargeCode masChargeCodeObj = (MasChargeCode) masChargeMap
												.get("masChargeCode");
												int mainChargeId = masChargeCodeObj.getMainChargecode()
												.getId();
												int subChargeId = masChargeCodeObj.getSubChargecode()
												.getId();
												if (masChargeCodeObj.getMainChargecode()
														.getMainChargecodeCode().equalsIgnoreCase("Lab")) {
													dgOrderdt.setOrderStatus("P");
												} else {
													dgOrderdt.setOrderStatus("P");
												}
												MasMainChargecode masMainChargecode = new MasMainChargecode();
												masMainChargecode.setId(mainChargeId);
												dgOrderdt.setMainChargecode(masMainChargecode);
												MasSubChargecode masSubChargecode = new MasSubChargecode();
												masSubChargecode.setId(subChargeId);
												dgOrderdt.setSubChargeid(masSubChargecode);
											
												List<DgMasInvestigation> invList = new ArrayList<DgMasInvestigation>();
												invList = session.createCriteria(DgMasInvestigation.class).add(Restrictions.eq("ChargeCode.Id", Integer.parseInt(chargeCodeIdList.get(i)))).list();
												int invId=0;
												for(DgMasInvestigation list: invList)
												{
													invId = list.getId();
												}
												dgOrderdt.setInvestigation(new DgMasInvestigation(invId));
												//dgOrderdt.setInvestigationToMH(referToMhList.get(i));
												dgOrderdt.setInvestigationToMh("n");
												//dgOrderdt.setReferToMh(referToMhList.get(i));
												dgOrderdt.setReferToMh("n");
												hbt.save(dgOrderdt);
							}//end date comparision
						}//inner dt loop
					//	headerinvestigationDateList.removeAll(Arrays.asList(investigtionDate));
					}
					}//outer loop for hd
					
				
					
				
				}
				
				
				
				// referral code
				
				int referral = 0;
				int referredByDoctorId = 0;
				int referredDepartmentId = 0;
				int referredHospitalId = 0;
				int referralPriority=0;
					if ( dataMap.get("referral") !=null && ((Integer) dataMap.get("referral")) != 0) {
							if(dataMap.get("referral")!=null)
							{
								try
								{
									referral = (Integer)dataMap.get("referral");
								}
								catch(NumberFormatException e)
								{
									e.printStackTrace();
								}
							}
							
							if(referral==1)
							{
								
								 Patient patientObj = (Patient)hbt.load(Patient.class, hinId);
								patientObj.setPaymentStatus(null);
									hbt.update(patientObj);
									
								
							

								String referTo = null;
								String patientAdvise = null;
								String referralNote = null;
							
								
								if (dataMap.get("referTo") != null) {
									referTo = (String) dataMap.get("referTo");
									opdPatientDetails.setReferredType(referTo);
									opdPatientDetails.setReferredStatus("y");
								}
						
								if (dataMap.get("patientAdvise") != null) {
									patientAdvise = (String) dataMap.get("patientAdvise");
									opdPatientDetails.setPatientAdvise(patientAdvise);
								}

								
								Date referralDate = (Date) dataMap.get("referralDate");
								opdPatientDetails.setReferredDate(referralDate);
								
								if (dataMap.get("referralNote") != null) {
									
									referralNote = (String) dataMap.get("referralNote");
									
									opdPatientDetails.setReferralNotes(referralNote.trim());
								}
								

							
								if(dataMap.get("referralPriority") != null){
									referralPriority = (Integer)dataMap.get("referralPriority");
									opdPatientDetails.setReferralPriority(referralPriority);
								}
								if (dataMap.get("referImpannelhospital") != null) {
									referredHospitalId = (Integer) dataMap.get("referImpannelhospital");
									MasImpanneledHospital msih = new MasImpanneledHospital();
									msih.setId(referredHospitalId);
									
									opdPatientDetails.setImpanneledHospital(msih);
									Date referalTillDate = (Date) dataMap.get("referalTillDate");
									opdPatientDetails.setReferTillDate(referalTillDate);
									
									opdPatientDetails.setEmpanelStatus("WR");
								
									opdPatientDetails.setReferralTreatmentType((String)dataMap.get("referral_treatment_type"));
									opdPatientDetails.setReferredFor((String)dataMap.get("referredFor"));
									
									if(dataMap.get("referdays")!=null)
									{
										opdPatientDetails.setReferralDays((Integer) dataMap.get("referdays"));
									}
									
									
								}
								
					
								
								
							}
						
					}
					
					hbt.update(opdPatientDetails);	
					//create multiple visit for internal referral
					if(referral==1 && dataMap.get("referTo") != null && (dataMap.get("referTo").equals("Internal") || dataMap.get("referTo").equals("Both")))
					{
						Visit referralVisit = null;
						int hiddenValueRefer = box.getInt("hiddenValueRefer");
						
						opdPatientDetails.setReferredStatus("r");
							hbt.update(opdPatientDetails);	
							
						 for(int i=1;i<=hiddenValueRefer;i++){
							 if(box.getInt("refereddept"+i)!=0 && box.getInt("refereddoctor"+i)!=0 ){
						 	referralVisit =new Visit();
						    referralVisit.setReportingFor("OPD");						
						    referralVisit.setDepartment(new MasDepartment(box.getInt("refereddept"+i)));
						    referralVisit.setIntDoctor( new MasEmployee(box.getInt("refereddoctor"+i)));
							referralVisit.setDoctor( new MasEmployee(box.getInt("refereddoctor"+i)));
							referralVisit.setSession(new MasSession(1));
							referralVisit.setTokenNo(0);
							referralVisit.setVisitStatus("r");
								
							referralVisit.setHospital(masHospital);
							referralVisit.setAddEditBy(users);
								/*referralVisit.setAge(age);*/
							referralVisit.setVisitDate(currentDate);
							referralVisit.setVisitTime(currentTime);
							referralVisit.setAddEditDate(currentDate);
							referralVisit.setAddEditTime(currentTime);
							referralVisit.setVisitTime(currentTime);						
							referralVisit.setStatus("y"); 
							referralVisit.setAppointmentType("D");
							referralVisit.setPriority(referralPriority);					
							referralVisit.setHin(patient);		
							    
								int currentVisitNo = patient.getCurrentVisitNo()+1;
								patient.setCurrentVisitNo(currentVisitNo);
								referralVisit.setVisitNo(currentVisitNo);
								
								referralVisit.setTokenStatus("n");
								referralVisit.setRefereeOpdPatientdetailsId(opdPatientDetails);
								hbt.saveOrUpdate(patient);
								hbt.save(referralVisit);
						 }	}	
								
							
						
					}
				
				tx.commit();
				msg = "Successfully submitted.";
			}catch(Exception e){
				msg = "Try Again!";
				e.printStackTrace();
				tx.rollback();
			}
			
		}
		else
			msg = "Patient record has already been submitted.";
		}
		else
		{
			 msg = "<font color='red'>Patient is Already Admitted</font>";
		}
			dataMap.put("message", msg);
			return dataMap;
		}	
		
		public Map<String, Object> getWaitingEmergencyPatientList(Map<String, Object> mapForDS) {
			Session session = (Session) getSession();
			List<Visit> patientList = new ArrayList<Visit>();
			int hospitalId=0;
			String serviceNo ="";
			String patientName="";
			//List<MasEmployee> doctorList = new ArrayList<MasEmployee>();
		//	List<MasUnit> unitList = new ArrayList<MasUnit>();
			//List<MasRelation> relationList = new ArrayList<MasRelation>();
			//List<MasRank> rankList = new ArrayList<MasRank>();
			Map<String, Object> map = new HashMap<String, Object>();
			//String deptName = "";
			//Map<String, Object> utilMap = new HashMap<String, Object>();
			//utilMap = (Map) HMSUtil.getCurrentDateAndTime();
			//String currentDate = (String) utilMap.get("currentDate");
			//Date date=HMSUtil.convertStringTypeDateToDateType(currentDate);
			//Date date = new Date();
			//String category = "Doctor";
		//	int unitId  = 0;
			//int relationId = 0;
			//int rankId = 0;
		
			//String reportingDept[] = {"OPD","FollowUp"};
			//int deptId = 0;
			/*int hospitalId=0;
		
			String flag="";
			int searchFlag=0;
			int tokenNo=0;
			String patientName="";
			String uhid="";
			int opd_DepartmentId=0;*/
		/*	if(mapForDS.get("searchFlag")!=null){
				searchFlag=(Integer)mapForDS.get("searchFlag");
			}
			if((Boolean)mapForDS.get("forOPClinnic")==null){
				if(mapForDS.get("opd_Department")!=null){
					opd_DepartmentId =(Integer) mapForDS.get("opd_Department");
				}
			}
			if(mapForDS.get("uhid")!=null){
				uhid =(String) mapForDS.get("uhid");
			}
			if(mapForDS.get("flag")!=null){
				flag =(String) mapForDS.get("flag");
			}
			
			if (mapForDS.get("deptId") != null) {
				deptId = (Integer) mapForDS.get("deptId");
			}*/
			if (mapForDS.get("hospitalId") != null) {
				hospitalId = (Integer) mapForDS.get("hospitalId");
			}
			String currentTime =   HMSUtil.getCurrentTimeWithoutSecond().get("currentTime")!=null?HMSUtil.getCurrentTimeWithoutSecond().get("currentTime").toString():"";
			//System.out.println("gg "+flag +" empId"+mapForDS.get("empId")+"deptId"+deptId+"hospitalId"+hospitalId+"reportingDept"+reportingDept);
			try {
				/*if(mapForDS.get("rankId") != null){
					rankId = (Integer)mapForDS.get("rankId");
				}*/
			/*	if(mapForDS.get("unitId") != null){
					unitId = (Integer)mapForDS.get("unitId");
				}*/
				/*if(mapForDS.get("relationId") != null){
					relationId = (Integer)mapForDS.get("relationId");
				}*/
				if(mapForDS.get("serviceNo") != null){
					serviceNo = (String)mapForDS.get("serviceNo");
				}
				
				if(mapForDS.get(PATIENT_NAME) != null){
					patientName = (String)mapForDS.get(PATIENT_NAME);
				}
				
				if (mapForDS.get("empId") != null && (Integer) mapForDS.get("empId") > 0) {
					int empId = (Integer) mapForDS.get("empId");
					
					Criteria crit = session.createCriteria(Visit.class).add(
							Restrictions.eq("VisitDate", new Date()))
							//.add(Restrictions.eq("VisitStatus", "w"))
							//.add(Restrictions.eq("Doctor.Id", empId))
							//.add(Restrictions.eq("Department.Id", deptId))
							.createAlias("Hospital", "h").add(Restrictions.eq("h.Id", hospitalId))
							//.createAlias("Session", "ses")
							//.add(Restrictions.in("ReportingFor", reportingDept))
							//.add(Restrictions.le("ses.FromTime", currentTime))
							//.add(Restrictions.ge("ses.ToTime", currentTime))
							.add(Restrictions.eq("EmergencyVisit", "y").ignoreCase())
							;
					
				
							//.addOrder(Order.asc("TokenNo"))
					/*if(rankId != 0){
						crit = crit.createAlias("Hin", "hin").createAlias("Hin.Rank", "rank").add(Restrictions.eq("rank.Id", rankId));
					}
					if(relationId != 0){
						crit = crit.createAlias("Hin", "hin").createAlias("Hin.Relation", "relation").add(Restrictions.eq("relation.Id", relationId));
					}*/
				/*	if(unitId != 0){
						crit = crit.createAlias("Hin", "hin").createAlias("Hin.Unit", "unit").add(Restrictions.eq("unit.Id", unitId));
					}*/
					if(!serviceNo.equals("")){
						crit = crit.createAlias("Hin", "hin").add(Restrictions.eq("hin.ServiceNo", serviceNo));
					}
					if(!patientName.equals("")){
						crit = crit.createAlias("Hin", "hin").add(Restrictions.like("hin.PFirstName", patientName
								+ "%"));
					}
					patientList = crit.addOrder(Order.asc("VisitTime")).list();
					map.put("empId", empId);
					if(patientList.size() >0)
					{
						String  dentalDepartmentCode = null;
						try
						{
							dentalDepartmentCode = HMSUtil.getValuesFromPropertiesFile("adt.properties", "departmentCodeForDental");
						}
						catch(Exception e)
						{
							e.printStackTrace();
						}
						
						map.put("dentalCode", dentalDepartmentCode);
						
					}
					
					
				}
				
				/*doctorList=session.createCriteria(MasEmployee.class).add(Restrictions.eq("Status", "y"))
				.createAlias("Hospital", "h").add(Restrictions.eq("h.Id", hospitalId)).list();*/
				//unitList = session.createCriteria(MasUnit.class).add(Restrictions.eq("Status", "y")).list();
				
				  
			/*	doctorList = session.createCriteria(MasEmployee.class).createAlias(
						"EmpCategory", "empCategory").createAlias("Department",
						"dept").add(
						Restrictions.eq("empCategory.EmpCategoryName", category))
						.add(Restrictions.eq("dept.Id", deptId)).list();
	           */
			
				
				
				
				

			} catch (HibernateException e) {
				e.printStackTrace();
			}
			map.put("patientList", patientList);
			//map.put("unitList", unitList);
			//map.put("rankList", rankList);
			//map.put("relationList", relationList);
		//	map.put("doctorList", doctorList);
			//map.put("deptName", deptName);
			//map.put("doctorList", doctorList);
			
			return map;
		}

		public Map<String, Object> getEmergencyRecall(Map<String, Object> mapForDS) {
			
			Session session = (Session) getSession();
			List<Visit> patientDataList = new ArrayList<Visit>();
			List<Visit> patientLastVisitList = new ArrayList<Visit>();
			Map<String, Object> map = new HashMap<String, Object>();
			List<OpdPatientDetails> opdDetailListForFollowUp = new ArrayList<OpdPatientDetails>();
			List<OpdPatientHistory> opdHistoryDetailsListForFollowUp = new ArrayList<OpdPatientHistory>();
			List<DgOrderhd>patientInvestigationHeaderListForFollowUp = new ArrayList<DgOrderhd>();
			List<OpdPatientDetails> opdPDetailsListForEyeDeptFollowUp = null;
			List<PatientPrescriptionHeader> patientPrescriptionHeaderList = new ArrayList<PatientPrescriptionHeader>();
			List<DischargeIcdCode> dischargeIcdCodeList = new ArrayList<DischargeIcdCode>();
			List<Visit> currentDayVisit = new ArrayList<Visit>();
			List<OpdPatientDetails> admittedVisit = new ArrayList<OpdPatientDetails>();
			List<Integer> visitIdList = new ArrayList<Integer>();
			List<ProcedureDetails>procedureDetails= new ArrayList<ProcedureDetails>();
			List<InjAppointmentDetails>injAppDetails= new ArrayList<InjAppointmentDetails>();
			List<OpdSurgeryDetail> OpdSurgeryDetailList= new ArrayList<OpdSurgeryDetail>();
			List<MasItemClass> masItemClassList = new ArrayList<MasItemClass>();
			List<MasEmployeeDependent> med = null; 
			Date currentDate = new Date();
			//boolean patientAdmitted = false;
			int visitId=0;
			
			List<OpdPatientDetails> opdPatientDetailsList = new ArrayList<OpdPatientDetails>();
			OpdPatientDetails opdPatientDetails =null;
			OpdPatientDetails opdReferralPatientDetails =null;
			List<TherapyDetails> therapyList =null;
			List<OpdPatientDetails> curentVisitOpdDetailList =null; 
			List<ObgDetails> obgDetailsList = null; 
			try {
				
				
				
				visitId = Integer.parseInt(mapForDS.get("visitId").toString());
		/*		opdPatientDetailsList = session.createCriteria(OpdPatientDetails.class)
						.createAlias("ReferralVisit", "ReferralVisit")
						.add(Restrictions.eq("ReferralVisit.Id", visitId)).list();*/
				//commented by Babita Dangwal
				//added by Babita Dangwal
				
				
				opdPatientDetailsList = session.createCriteria(OpdPatientDetails.class)
						.createAlias("Visit", "v")
						.add(Restrictions.eq("v.Id", visitId)).list();
				//"visit",CriteriaSpecification.LEFT_JOIN)
				
				if(opdPatientDetailsList.size()>0)
				{
					opdPatientDetails = opdPatientDetailsList.get(0);
					mapForDS.put("hinId",opdPatientDetailsList.get(0).getVisit().getHin().getId());
					map = getOPDDetails(mapForDS);
				}
				
				opdPatientDetailsList = session.createCriteria(OpdPatientDetails.class)
						.createAlias("ReferralVisit", "ReferralVisit")
						.add(Restrictions.eq("ReferralVisit.Id", visitId)).list();
				
				if(opdPatientDetailsList.size()>0)
				{
					opdReferralPatientDetails = opdPatientDetailsList.get(0);
				}
	        //end			
				patientDataList = session.createCriteria(Visit.class).add(
						Restrictions.eq("Id", visitId)).list();
				
				//checking patient is admitted
				int hinId =0;
				if(patientDataList.size() > 0)
				  hinId = patientDataList.get(0).getHin().getId();
				
				currentDayVisit = session.createCriteria(Visit.class).add(Restrictions.eq("VisitDate",currentDate))
									.add(Restrictions.ne("Id", visitId))
									.add(Restrictions.eq("Hin.Id", hinId)).list();
				
				
					if(currentDayVisit.size() > 0)
					{
						for(Visit visit : currentDayVisit)
						{
							visitIdList.add(visit.getId());
						}
						
						admittedVisit = session.createCriteria(OpdPatientDetails.class)
								  		.add(Restrictions.eq("AdmissionAdvised", "y"))
								        .add(Restrictions.in("Visit.Id", visitIdList))
								        .list();
					/*	if(admittedVisit.size() > 0)
						{
							patientAdmitted = true;
						}*/
					}
				
			if(patientDataList.size() > 0 /*&& patientDataList.get(0).getReportingFor().equals("FollowUp")*/){
				
				
				 int employeeId = 0;
									  if(patientDataList.get(0).getHin()!=null && !patientDataList.get(0).getHin().getRelation().getNewRelationName().equalsIgnoreCase("self"))
									  {
										  employeeId = patientDataList.get(0).getHin().getEmployee().getId();
										  med = session.createCriteria(MasEmployeeDependent.class).add(Restrictions.eq("Employee.Id",employeeId ))
												  .add(Restrictions.eq("Status","y" ).ignoreCase())
												  .list();
									  }

									  masItemClassList= session.createCriteria(MasItemClass.class).
												add(Restrictions.eq("Status", "y").ignoreCase())
												.add(Restrictions.eq("Section.Id", 18))
												 .addOrder(Order.asc("ItemClassName")) .list(); 
				
					 String department =  patientDataList.get(0).getFollowUpDepartment();
					// if(department != null){
					 patientLastVisitList = session.createCriteria(Visit.class).add(Restrictions.eq("Hin.Id", hinId))
					 						//	.add(Restrictions.or(Restrictions.eq("ReportingFor",department), Restrictions.eq("FollowUpDepartment", department)))
							 .add(Restrictions.eq("VisitDate", new Date()))
								//.add(Restrictions.eq("VisitStatus", "w"))
								/*.add(Restrictions.eq("Doctor.Id", empId))
								.add(Restrictions.eq("Department.Id", deptId))
								.createAlias("Hospital", "h").add(Restrictions.eq("h.Id", hospitalId))*/
					 							.add(Restrictions.eq("VisitStatus", "C")).add(Restrictions.eq("Id",visitId)).setMaxResults(1).addOrder(Order.desc("Id")).list();
					 if(patientLastVisitList.size()>0){
					 int lastVisitId = patientLastVisitList.get(0).getId();
				
					opdDetailListForFollowUp = session.createCriteria(OpdPatientDetails.class).createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", lastVisitId)).list();
					
					curentVisitOpdDetailList = session.createCriteria(OpdPatientDetails.class).createAlias("Visit", "visit")
							.add(Restrictions.eq("visit.Id", visitId)).list();
					
					if(curentVisitOpdDetailList.size() >0){
					obgDetailsList = session.createCriteria(ObgDetails.class).createAlias("OpdPatientDetails", "opd")
							.add(Restrictions.eq("opd.id", curentVisitOpdDetailList.get(0).getId())).list();}
				/*	else if(opdDetailListForFollowUp.size()>0)
					{
						obgDetailsList = session.createCriteria(ObgDetails.class).createAlias("OpdPatientDetails", "opd")
								.add(Restrictions.eq("opd.Id", opdDetailListForFollowUp.get(0).getId())).list();
					}
					*/
					//System.out.println("opdDetailListForFollowUp "+opdDetailListForFollowUp.get(0).getId());
					//System.out.println("opdPatientDetailsList "+opdPatientDetailsList.get(0).getId());
				//System.out.println("opdDetailListForFollowUp "+opdDetailListForFollowUp.get(0).getId());
					opdHistoryDetailsListForFollowUp = session.createCriteria(OpdPatientHistory.class).createAlias("OpdPatientDetails", "details")
									.createAlias("details.Visit", "visit").add(Restrictions.eq("visit.Id", lastVisitId)).list();
			
					
					patientInvestigationHeaderListForFollowUp = session.createCriteria(DgOrderhd.class).createAlias("Visit", "visit")
										.add(Restrictions.eq("visit.Id", lastVisitId)).list();
					patientPrescriptionHeaderList = session.createCriteria(PatientPrescriptionHeader.class).createAlias("Visit", "visit")
														.add(Restrictions.eq("visit.Id", lastVisitId)).list();
					
					if(patientPrescriptionHeaderList.size() > 0 )
					{
						int prescriptionId = patientPrescriptionHeaderList.get(0).getId() ;
						
						injAppDetails  = session.createCriteria(InjAppointmentDetails.class).createAlias("InjAppointmentHeader", "injHd")
								.add(Restrictions.eq("injHd.Prescription.Id", prescriptionId))
								.addOrder(Order.asc("InjAppointmentDate"))
								//.add(Restrictions.eq("visit.Id", lastVisitId))
								//.add(Restrictions.eq("visit.Id", lastVisitId))
								.list();
						
					}
					
					OpdSurgeryDetailList  = session.createCriteria(OpdSurgeryDetail.class).createAlias("OpdSurgery", "osh")
					.add(Restrictions.eq("osh.Visit.Id", visitId))
					//.add(Restrictions.eq("visit.Id", lastVisitId))
					//.add(Restrictions.eq("visit.Id", lastVisitId))
					.list();
					
					dischargeIcdCodeList = session.createCriteria(DischargeIcdCode.class).createAlias("Visit", "visit")
												.add(Restrictions.eq("visit.Id", lastVisitId)).list();

			
					procedureDetails = session.createCriteria(ProcedureDetails.class)
							.createAlias("ProcedureHeader", "ph")
							.add(Restrictions.eq("ph.Hin.Id", hinId))
							.add(Restrictions.eq("ph.Visit.Id", visitId))
							.addOrder(Order.asc("Id"))
							.list();
					
					Set<Integer> uniquNursingCareList = new HashSet<Integer>();
					Set<Integer> uniqueprocdureList = new HashSet<Integer>();
					
					for(ProcedureDetails pd:procedureDetails){
						
						if(uniquNursingCareList.add(pd.getNursingCare().getId()))
						{
							uniqueprocdureList.add(pd.getId());
						}
						
						
						procedureDetails = session.createCriteria(ProcedureDetails.class)
								.createAlias("ProcedureHeader", "ph")
								 .add(Restrictions.in("Id", uniqueprocdureList))
								.addOrder(Order.asc("Id"))
								.list();
						
					}
					
					
					List<OtBooking> otbooking = new ArrayList<OtBooking>();
					otbooking = session.createCriteria(OtBooking.class).add(
											Restrictions.eq("Visit.Id", visitId))
									
											.list();
					map.put("otbooking", otbooking);
					
					
					therapyList = session.createCriteria(TherapyDetails.class)
							 .createAlias("ProcedureHeader", "td")
							 .createAlias("td.Visit", "v")
							.add(Restrictions.eq("v.Id", visitId))
							.list();
					
					
					
					}
					 
					 opdPDetailsListForEyeDeptFollowUp = session.createCriteria(OpdPatientDetails.class).createAlias("Visit", "v")
								.createAlias("v.Hin", "hin").add(Restrictions.eq("hin.Id", hinId))
								.add(Restrictions.isNotNull("DistRSph")).addOrder(Order.desc("id"))
								.list();
			
			}
			
			
			} catch (HibernateException e) {
				e.printStackTrace();
			}

			
			map.put("dischargeIcdCodeList", dischargeIcdCodeList);
			map.put("patientDataList", patientDataList);
			map.put("opdDetailListForFollowUp", opdDetailListForFollowUp);
			map.put("opdHistoryDetailsListForFollowUp", opdHistoryDetailsListForFollowUp);
			map.put("patientInvestigationHeaderListForFollowUp", patientInvestigationHeaderListForFollowUp);
			map.put("patientPrescriptionHeaderList", patientPrescriptionHeaderList);
			map.put("opdPatientDetails", opdPatientDetails);
			map.put("admittedVisit", admittedVisit);
			map.put("procedureDetails", procedureDetails);
			map.put("injAppDetails", injAppDetails);
			map.put("OpdSurgeryDetailList", OpdSurgeryDetailList);
			map.put("med", med);
			map.put("masItemClassList", masItemClassList);
			map.put("opdReferralPatientDetails", opdReferralPatientDetails);
			map.put("therapyList", therapyList);
			map.put("opdPDetailsListForEyeDeptFollowUp", opdPDetailsListForEyeDeptFollowUp);
			map.put("opdPatientDetailsList", opdPatientDetailsList);
			map.put("obgDetailsList", obgDetailsList);
			
			return map;
			
			
		}
		
		
		@Override
		public Map<String, Object> getPhysiotherapyNursingCareWaitingList(Map<String, Object> map) {
			Integer hospitalId=(Integer)map.get("hospitalId");
			int deptId=(Integer)map.get("deptId");
			Date FromDateId=(Date)map.get("FromDateId");
			Date ToDateId=(Date)map.get("ToDateId");
			String serviceNo =(String)map.get("serviceNo");
			List<PatientPrescriptionHeader> pendingInjectionList = new ArrayList<PatientPrescriptionHeader>();
			//List<InjAppointmentHeader> InjectionList = new ArrayList<InjAppointmentHeader>();
			
			Session session = (Session)getSession();
			Criteria crit = null;
			Criteria critApp = null;
			
			List<ProcedureDetails> procedureDetails = new ArrayList<ProcedureDetails>();
			crit = session.createCriteria(ProcedureDetails.class)
					.createAlias("ProcedureHeader", "ph")
					.createAlias("ph.Hospital", "h")
					.add(Restrictions.eq("h.Id",hospitalId))
					.add(Restrictions.eq("Status", 'n').ignoreCase())
					.add(Restrictions.eq("ph.ProcedureType", HMSUtil.getProperties("adt.properties", "NursingTypeCodeForPhysiotherapy")));
			if(FromDateId!=null && ToDateId!=null){
				crit  = crit.add(Restrictions.between("AppointmentDate", FromDateId, ToDateId));
			}else{
				crit  = crit.add(Restrictions.eq("AppointmentDate", (new Date())));
			}
			if(serviceNo!=null &&!serviceNo.isEmpty())
			{
				crit=crit.createAlias("ph.Hin", "hin")
				.add(Restrictions.eq("hin.ServiceNo",serviceNo));
			}
			 procedureDetails = crit.list();
			
			List<Integer> visitList = new ArrayList<Integer>(new HashSet());
			for(ProcedureDetails listA: procedureDetails)
			{
				visitList.add(listA.getProcedureHeader().getVisit().getId());
			}

			List<Visit>pendingNursingList = new ArrayList<Visit>();		
			if(visitList.size()>0){
				pendingNursingList = session.createCriteria(Visit.class).add(Restrictions.in("Id", visitList)).list();
				procedureDetails.clear();
			}
			map.put("pendingNursingList", pendingNursingList);
			return map;
		}
		
		
		@Override
		public Map<String, Object> getPhysiotherapyDetails(Map<String, Object> map) {
			try{
				String hinNo=(String)map.get("hinNo");
				Integer injAppId=(Integer)map.get("injAppId");
				Integer departmentId=(Integer)map.get("departmentId");
				Integer hospitalId=(Integer)map.get("hospitalId");
				int visitId=(Integer)map.get("visitId");
				
				
				
				String strDate=(String)map.get("opdDate");
				SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
				Date date=sdf.parse(strDate);
				Date today = new Date();
				
				Session session = (Session) getSession();
				//List<PatientPrescriptionHeader> injectionList = new ArrayList<PatientPrescriptionHeader>();
				//List<InjAppointmentDetails> injectionAppList = new ArrayList<InjAppointmentDetails>();
			/*	if(injAppId!=null && injAppId!=0){
					injectionAppList=session.createCriteria(InjAppointmentDetails.class)
												.createAlias("InjAppointmentHeader","injAPNTHDR")
												.add(Restrictions.eq("injAPNTHDR.Id", injAppId))
												//.add(Restrictions.eq("injAPNTHDR.AppointmentDate", date))
												.add(Restrictions.eq("Status", "y").ignoreCase())
												.setProjection(Projections.distinct(Projections.property("Item.Id")))
												
												.list();  
				}*/
				
				/*String query="select d.status,d.inj_appointment_header_id,i.nomenclature,mf.frequency_name,ppd.item_id,roa.route_name,"
						+ " ppd.dosage,ppd.no_of_days,i.insulin_injection,ppd.frequency_id,ppd.total,d.inj_appointment_details_id,d.appointment_time from inj_appointment_details d "+
			" left outer join  inj_appointment_header h on h.inj_appointment_header_id=d.inj_appointment_header_id "+
			" left outer join patient_prescription_details ppd on ppd.id=d.prescription_details_id "+
			" left outer join mas_store_item i on i.item_id=ppd.item_id "+
			" left outer join mas_frequency mf on mf.frequency_id=ppd.frequency_id "+
			" left outer join route_of_administration roa on roa.route_id=ppd.route_id "+
			"  where h.visit_id="+visitId+" and h.appointment_date='"+today+"' and d.status='p' ";*/
				
	/*		List<InjAppointmentDetails>injappList=session.createCriteria(InjAppointmentDetails.class).createAlias("InjAppointmentHeader", "injHeader")
					   .add(Restrictions.eq("injHeader.Visit.Id", visitId))
					   .add(Restrictions.eq("Status","p").ignoreCase())
					   .add(Restrictions.eq("InjAppointmentDate", date))
					   .list();*/
			
			
					
		/*			Object[] selectedCode = {"TAB","Cap"};
					List<PatientPrescriptionDetails>ppdList=session.createCriteria(PatientPrescriptionDetails.class)
											.createAlias("Prescription","pph").createAlias("pph.Visit","visit")
											.add(Restrictions.eq("visit.Id",visitId))
											.createAlias("Item","item")
											.createAlias("item.ItemCategory","cat")
											.createAlias("item.ItemClass","class")
											//.add(Restrictions.eq("cat.ItemCategoryCode", "DRG"))
											.add(Restrictions.in("class.ItemClassCode",selectedCode))
											.list();
					map.put("ppdList", ppdList);*/
					List<Visit> visitList = new ArrayList<Visit>();
					visitList= session.createCriteria(Visit.class).add(Restrictions.eq("Id", visitId)).list();
				
				List<Object[]>aList=new ArrayList<Object[]>();
				//aList=session.createSQLQuery(query).list();
				
				Map<String,Object> mapProce = getDetailsForProcWaitList(hospitalId,visitId,HMSUtil.getProperties("adt.properties", "NursingTypeCodeForPhysiotherapy"));
				map.put("pendingProcList", (List<ProcedureHeader>)mapProce.get("pendingProcList"));
				//map.put("injectionAppList", injectionAppList);
				//map.put("aList",injappList);
				map.put("visitList",visitList);
				
			}catch(Exception e){
				e.printStackTrace();
			}
			return map;
		}
		public Map<String, Object> getOphthalmolgoyWaitngList(Map mapForDS) {
			Session session = (Session) getSession();
			List<Visit> patientList = new ArrayList<Visit>();
			
			Map<String, Object> map = new HashMap<String, Object>();
			String deptName = "";
			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String departmentCodeForEye = HMSUtil.getProperties("adt.properties", "departmentCodeForEye");
			Date date = new Date();

			int hospitalId=0;
			String serviceNo = null;

			String patientName=null;
		
			if (mapForDS.get("hospitalId") != null) {
				hospitalId = (Integer) mapForDS.get("hospitalId");
			}
			
			String currentTime =   HMSUtil.getCurrentTimeWithoutSecond().get("currentTime")!=null?HMSUtil.getCurrentTimeWithoutSecond().get("currentTime").toString():"";
			try {
	
				if(mapForDS.get(SERVICE_NO) != null){
					serviceNo = (String)mapForDS.get(SERVICE_NO);
				}
				
				if(mapForDS.get(PATIENT_NAME) != null){
					patientName = (String)mapForDS.get(PATIENT_NAME);
				}
					Criteria crit = session.createCriteria(Visit.class).add(
							Restrictions.eq("VisitDate", date))
							//.add(Restrictions.or(Restrictions.eq("VisitStatus", "w").ignoreCase(), Restrictions.eq("VisitStatus", "c").ignoreCase()))
							.createAlias("Department", "dept")
							.add(Restrictions.eq("dept.DepartmentCode", departmentCodeForEye))
							.createAlias("Hospital", "h").add(Restrictions.eq("h.Id", hospitalId))
							//.createAlias("Hin", "hin")
							;
					
					if(serviceNo!=null || patientName!=null ){
						crit=crit.createAlias("Hin", "hin");
						if(serviceNo!=null)
						crit = crit.add(Restrictions.eq("hin.ServiceNo", serviceNo));
						 if(patientName!=null)
							crit = crit.add(Restrictions.like("hin.PFirstName", patientName+ "%"));
					}
				
					patientList = crit.addOrder(Order.asc("VisitTime")).list();
					

			} catch (HibernateException e) {
				e.printStackTrace();
			}
			map.put("patientList", patientList);
			map.put("deptName", deptName);
			
			return map;
		}
		
		public Map<String, Object> showOphthalParameters(Map mapForDS) {
			Session session = (Session) getSession();
			List<Visit> patientList = null;
			List<Visit> currentDayVisit = null;
			List<Visit> patientLastVisitList = null;
			List<OpdOphthalmologyDetails> opdOphthalmologyDetails = null;
			List<MasEmployeeDependent> med = null;
			int visitId = 0;
			int hinId=0;
			Map<String, Object> map = new HashMap<String, Object>();
			String deptName = "";
			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String departmentCodeForEye = HMSUtil.getProperties("adt.properties", "departmentCodeForEye");
			Date date = new Date();

			int hospitalId=0;
			String serviceNo ="";

			String patientName="";
		
			if (mapForDS.get("hospitalId") != null) {
				hospitalId = (Integer) mapForDS.get("hospitalId");
			}
			if (mapForDS.get("visitId") != null) {
				visitId = (Integer) mapForDS.get("visitId");
			}
			String currentTime =   HMSUtil.getCurrentTimeWithoutSecond().get("currentTime")!=null?HMSUtil.getCurrentTimeWithoutSecond().get("currentTime").toString():"";
			try {
				currentDayVisit = session.createCriteria(Visit.class).add(Restrictions.eq("VisitDate", new Date()))
						.add(Restrictions.eq("Id", visitId))
						.list();
			
				if(currentDayVisit.size() > 0)
						{	   
						
					opdOphthalmologyDetails = session.createCriteria(OpdOphthalmologyDetails.class).createAlias("Visit", "visit")
						     .add(Restrictions.eq("visit.Id", visitId)).list();
					
					     if(opdOphthalmologyDetails.size()==0)
					       {
					          patientLastVisitList = session.createCriteria(Visit.class).add(Restrictions.eq("Hin.Id", currentDayVisit.get(0).getHin().getId()))
									 .add(Restrictions.eq("Department.Id",currentDayVisit.get(0).getDepartment().getId()))
							 							.add(Restrictions.ne("Id",visitId)).setMaxResults(1).addOrder(Order.desc("Id")).list();
							 // System.out.println("patientLastVisitList "+patientLastVisitList.size() +"hiid= "+currentDayVisit.get(0).getDepartment().getId() );
							  if(patientLastVisitList.size()>0){
							  int lastVisitId = patientLastVisitList.get(0).getId();
						
							  opdOphthalmologyDetails = session.createCriteria(OpdOphthalmologyDetails.class).createAlias("Visit", "visit")
								.add(Restrictions.eq("visit.Id", lastVisitId)).list();
							   //System.out.println("czzc "+opdOphthalmologyDetails.size() +"s d "+lastVisitId +" sff "+opdOphthalmologyDetails.get(0).getId());
							 }
					       }
							  med = session.createCriteria(MasEmployeeDependent.class).add(Restrictions.eq("Employee.Id",currentDayVisit.get(0).getHin().getEmployee().getId() ))
									  .list();
						}
			} catch (HibernateException e) {
				e.printStackTrace();
			}
			map.put("patientDataList", currentDayVisit);
			map.put("opdOphthalmologyDetails", opdOphthalmologyDetails);
			map.put("med", med);
			
			
			map.put("deptName", deptName);
			
			return map;
		}
		
		public Map<String, Object> submitOphthalParameters(Map mapForDS) {
			Session session = (Session) getSession();
			Map<String, Object> map = new HashMap<String, Object>();
			boolean succesfullyAdded = false;
			Box box = (Box)mapForDS.get("box");
			String consultationTime =  box.getString("consultationTime");
			String consultationDate = box.getString("consultationDate");
		
		
			Transaction tx = null;
			int hospitalId= 0;
            int visitId=0;		
            int hinId=0;
            List<OpdOphthalmologyDetails> opdOphthalmologyDetailsList = null;
            OpdOphthalmologyDetails opdOphthalDetails = null;
            
            if (mapForDS.get("hospitalId") != null) {
				hospitalId = (Integer) mapForDS.get("hospitalId");
			}
            if (box.get("visitId") != null) {
            	visitId = (Integer) box.getInt("visitId");
			}
            

			try {
					tx = session.beginTransaction();
					org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
					hbt.setFlushModeName("FLUSH_EAGER");
					hbt.setCheckWriteOperations(false);
					
					
					
					opdOphthalmologyDetailsList = session.createCriteria(OpdOphthalmologyDetails.class)
					.createAlias("Visit", "v")
					.add(Restrictions.eq("v.Id", visitId)).list();
					
				  
					if(opdOphthalmologyDetailsList.size() >0)
						opdOphthalDetails = (OpdOphthalmologyDetails)hbt.load(OpdOphthalmologyDetails.class, opdOphthalmologyDetailsList.get(0).getId());
					else
						opdOphthalDetails = new OpdOphthalmologyDetails();
					
					
					  mapForDS.put("opdOphthalDetails", opdOphthalDetails);
				      opdOphthalDetails= getOpdOphthalObjectToSave(mapForDS);
				      
				      
					//opdOphthalDetails.setVisit(new Visit(visitId));
					opdOphthalDetails.setConsultationDate( HMSUtil
					.convertStringTypeDateToDateType(consultationDate));
					/*opdOphthalDetails.setOpdDate( HMSUtil
							.convertStringTypeDateToDateType(consultationDate));*/
					opdOphthalDetails.setConsultationTime(consultationTime);
					
					if(opdOphthalmologyDetailsList.size() >0)
						hbt.update(opdOphthalDetails);
					else
					{
						opdOphthalDetails.setVisit(new Visit(visitId));
						hbt.save(opdOphthalDetails);
						
					}
					
					succesfullyAdded = true;
					tx.commit();
				} catch (Exception e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();

		}
			
		
			map.put("succesfullyAdded", succesfullyAdded);
			return map;
		}




		@SuppressWarnings("unchecked")
		public Map<String, Object> getContradictedItemList(Map<String, Object> map) {

			Session session = (Session) getSession();
			int itemId = 0;
			String returnString =null;
			List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
			try {
				String str = "" + map.get("pvmsNo");
				Criteria c = session.createCriteria(MasStoreItem.class).add(
						Restrictions.eq("PvmsNo", str));
				
				
				itemList = c.list();
				
				if(itemList.size()>0)
					itemId = itemList.get(0).getId();
				
				String [] a= map.get("itemIdArray").toString().trim().split(",");
				List<Integer> itemIdList = new ArrayList<Integer>();
				//System.out.println("a="+a +" ar="+map.get("itemIdArray") +" itemId="+itemId + "PvmsNo"+str);
				for(String b:a)
				{
					if(!b.isEmpty())
						itemIdList.add(Integer.parseInt(b));
				}
				if(itemIdList.size()>0){
					
				List<SimsMimsContradiction> contraList = session.createCriteria(SimsMimsContradiction.class)
						.add(Restrictions.or(Restrictions.and(Restrictions.eq("Item.Id", itemId), Restrictions.in("ContraItem.Id", itemIdList)),
						Restrictions.and(Restrictions.eq("ContraItem.Id", itemId), Restrictions.in("Item.Id", itemIdList)))).list();
						
						//.add(Restrictions.eq("Item.Id", itemId))
						//.add(Restrictions.in("ContraItem.Id", itemIdList))
				
				if(contraList.size()>0)
				{
					int count =1;
				   returnString =""+itemList.get(0).getNomenclature() +" is contradicted with the following prescribed drug(s)\n";
				   for(SimsMimsContradiction sim: contraList){
					   if(sim.getItem().getId()!=itemId)
					   {
						   returnString+= "- "+sim.getItem().getNomenclature()+ " ("+sim.getIntraction()+")\n";
					   }
					   else
					   {
						   returnString+= "- "+sim.getContraItem().getNomenclature()+ " ("+sim.getIntraction()+")\n";
					   }
						   
						   
				   }
				}
				
			}	
			} catch (Exception e) {
				e.printStackTrace();
			}
			map.put("returnString", returnString);
			return map;
		}
		@SuppressWarnings("unchecked")
		public Map<String, Object> getFACWaitingList(Map mapForDS) {
			Map<String, Object> map = new HashMap<String, Object>();
			List<PatientPrescriptionHeader> pphList = new ArrayList<PatientPrescriptionHeader>();
			List<DgOrderhd>patientInvestigationHeaderListForFollowUp = new ArrayList<DgOrderhd>();
			List<Visit> patientList = new ArrayList<Visit>();
			Session session = (Session) getSession();
			int divisionId = (Integer)mapForDS.get("divisionId");
			int empId = (Integer)mapForDS.get("empId");
		
			
			String  userName = (String)mapForDS.get("userName");

			try {
				Criteria cr = session.createCriteria(PatientPrescriptionHeader.class)
						.createAlias("Hin", "patient")
						/*.add(Restrictions.isNotNull("Division"))*/
						/*.add(Restrictions.eq("Division.Id", divisionId))*/
						.add(Restrictions.eq("Status", "p").ignoreCase());
				
				
				
				if(userName.equalsIgnoreCase("020202"))
				{
					cr=cr.add(Restrictions.isNotNull("Division"));
				}
				else
				{
					cr=cr.add(Restrictions.eq("Emp.Id", empId));
				}
				if(mapForDS.get("employeeNo")!=null && !mapForDS.get("employeeNo").toString().trim().equals(""))
				{
					cr=cr.add(Restrictions.eq("patient.ServiceNo", mapForDS.get("employeeNo").toString().trim()));
				}
				pphList = cr.list();	
				List<Integer> visitIdList =  new ArrayList<Integer>();
				for(PatientPrescriptionHeader pph:pphList){
					patientList.add(pph.getVisit());
					visitIdList.add(pph.getVisit().getId());
				}
				visitIdList.add(0);
				 cr = session.createCriteria(DgOrderhd.class).createAlias("Visit", "visit").add(Restrictions.eq("OrderDate",new Date()))
						.add(Restrictions.eq("visit.VisitStatus", "f").ignoreCase()).add(Restrictions.not(Restrictions.in("visit.Id", visitIdList)));
				 
				 if(userName.equalsIgnoreCase("020202"))
					{
						
					}
					else
					{
						cr=cr.add(Restrictions.eq("PrescribedBy.Id", empId));
					}
				 
				 
				 if(mapForDS.get("employeeNo")!=null && !mapForDS.get("employeeNo").toString().trim().equals(""))
					{
						cr=cr.createAlias("Hin","patient").add(Restrictions.eq("patient.ServiceNo", mapForDS.get("employeeNo").toString().trim()));
					}
				 
				
				 patientInvestigationHeaderListForFollowUp = cr.list();
				
				for(DgOrderhd dgHd:patientInvestigationHeaderListForFollowUp){
					patientList.add(dgHd.getVisit());
				}
				
				
				map.put("patientList", patientList);
				//map.put("anesthesiaList", aupdatenesthesiaList);
			} catch (HibernateException e) {
				e.printStackTrace();
			}

			return map;
		}
		
		public Map<String, Object> getFacUpdateScreen(Map mapForDS) {
			Map<String, Object> map = new HashMap<String, Object>();
			List<PatientPrescriptionHeader> pphList = new ArrayList<PatientPrescriptionHeader>();
			List<Visit> patientList = new ArrayList<Visit>();
			List<MasItemClass> masItemClassList = new ArrayList<MasItemClass>();
			List<MasStoreItemConversion> itemConversionList = new ArrayList<MasStoreItemConversion>();
			List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();
			List<DgOrderhd>patientInvestigationHeaderListForFollowUp = new ArrayList<DgOrderhd>();
			Patient patient = null;
			List<MasZonal> masZonalList = new ArrayList<MasZonal>();
			Session session = (Session) getSession();
			int visitId =0;
	/*		if(mapForDS.get("pphId")!=null && !mapForDS.get("pphId").toString().isEmpty())
				pphId = (Integer)mapForDS.get("pphId");*/
			if(mapForDS.get("visitId")!=null && !mapForDS.get("visitId").toString().isEmpty())
				visitId = (Integer)mapForDS.get("visitId");
		
			try {
				
				pphList = session.createCriteria(PatientPrescriptionHeader.class)
						  .add(Restrictions.eq("Visit.Id", visitId))
						  .add(Restrictions.isNotNull("Division"))
						  //.add(Restrictions.eq("Status", "p").ignoreCase())
						  .list();
				
				if(pphList.size()>0 && pphList.get(0).getStatus().equalsIgnoreCase("p"))
					patient =  pphList.get(0).getHin();
					
				
					
				patientInvestigationHeaderListForFollowUp = session.createCriteria(DgOrderhd.class).createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", visitId)).list();
			
				if(patientInvestigationHeaderListForFollowUp.size()>0){
					if(pphList.size()==0 && patient==null)
					patient = patientInvestigationHeaderListForFollowUp.get(0).getHin();
					
				}
				
				  masItemClassList= session.createCriteria(MasItemClass.class).
							add(Restrictions.eq("Status", "y").ignoreCase())
							.add(Restrictions.eq("Section.Id", 18))
							 .addOrder(Order.asc("ItemClassName")) .list(); 

			itemConversionList = session.createCriteria(MasStoreItemConversion.class).add(Restrictions.eq("Status", "y")).addOrder(Order.asc("ItemUnitName")).list();

			frequencyList = session.createCriteria(MasFrequency.class).add(
								Restrictions.eq("Status", "y")).addOrder(Order.asc("OrderNo")).list();
				
			masZonalList = session.createCriteria(MasZonal.class).add(Restrictions.eq("Status", "y").ignoreCase()).list();
				map.put("pphList", pphList);
				map.put("masItemClassList", masItemClassList);
				map.put("itemConversionList", itemConversionList);
				map.put("frequencyList", frequencyList);
				map.put("patientInvestigationHeaderListForFollowUp", patientInvestigationHeaderListForFollowUp);
				map.put("masZonalList", masZonalList);
				
				
				map.put("patient", patient);
				
				
			} catch (HibernateException e) {
				e.printStackTrace();
			}

			return map;
		}
		
		public Map<String, Object> updateFAC(Map mapForDS) {
			Map<String, Object> map = new HashMap<String, Object>();
			Session session = (Session) getSession();
			boolean saved = false;
		
			Box box = (Box)mapForDS.get("box");
			int hospitalId = 1;
			int hinId = box.getInt("hinId");
			int visitId = box.getInt("visitId");
			int pHeaderId = 0;
			pHeaderId = box.getInt("pHeaderId");
			int OpdPatientDetailId = box.getInt("OpdPatientDetailId");
			int zonalId = box.getInt("zonalId");

			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String consultationTime = (String) utilMap.get("currentTime");
			Date consultationDateToInsert = HMSUtil
					.convertStringTypeDateToDateType(currentDate);
			//Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
			Patient patient = new Patient();
			patient.setId(hinId);

			Visit visit = new Visit();
			visit.setId(visitId);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);

			MasEmployee masEmployee = new MasEmployee();
			masEmployee.setId((Integer)mapForDS.get("empId"));
			
			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId((Integer)mapForDS.get("deptId"));
			
			Users user =null;
			if( mapForDS.get("user")!=null)
				user = (Users) mapForDS.get("user");
			
			List<Integer> prescriptionIdDBList = new ArrayList<Integer>();
			List<Integer> itemIdList = (List<Integer>) mapForDS.get("itemIdList");
				List<Integer> itemConversionList = (List) mapForDS.get("itemConversionList");
				List<Integer> frequencyList = (List) mapForDS.get("frequencyList");
				List<String> otherMedicineList = (List) mapForDS.get("otherMedicineList");
				List<String> nomenclatureList =  (List) mapForDS.get("nomenclatureList");
				List<Integer> classificationList = (List<Integer>) mapForDS.get("classificationList");
				List<Integer> itemClassList = (List) mapForDS.get("itemClassList");
				List<String> itemDispensaryList = (List) mapForDS.get("itemDispensaryList");
				List<String> ctList = (List) mapForDS.get("ctList");
				List<String> dosageList = (List) mapForDS.get("dosageList");
				//List<String> typeLeftRightList = (List) mapForDS.get("typeLeftRightList");
				//List<String> instructionList = (List) mapForDS.get("instructionList");
				List<String> routeList = new ArrayList<String>();
				routeList= (List) mapForDS.get("routeList");
				List<Integer> totalList = (List) mapForDS.get("totalList");
				List<Integer> noOfDaysList = (List) mapForDS.get("noOfDaysList");
				List<String> remarksList = (List) mapForDS.get("remarksList");
				List<Integer> prescriptionIdList = (List) mapForDS.get("prescriptionIdList");
				List<String> injectionFlagList = (List) mapForDS.get("injflagList ");
				List<Integer> issuesPrescriptionIdList = new ArrayList<Integer>();
				   
				  String otherTreatment = box.getString("otherTreatment");
				   
			   List<String> chargeCodeIdList = (List) mapForDS.get("chargeCodeIdList");
			   List<Integer> dgorderDtList = (List) mapForDS.get("dgorderDtList");
		   
			   Map<String, Object> adMap = new HashMap<String, Object>();
			   int divisionId =  box.getInt("divisionId");
			Transaction tx = null;
			try {
				tx = session.beginTransaction();
				org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
			
				if (itemIdList.size() > 0 ) {
				PatientPrescriptionHeader patientPrescriptionHeader =null;
				if(pHeaderId!=0){
				 patientPrescriptionHeader = (PatientPrescriptionHeader)hbt.load(PatientPrescriptionHeader.class, pHeaderId);
				patientPrescriptionHeader.setOtherTreatment(otherTreatment);
				if(zonalId !=0)
				{
					MasZonal zonalobj= new MasZonal();
					zonalobj.setId(zonalId);
					patientPrescriptionHeader.setZonal(zonalobj);
				}
				patientPrescriptionHeader.setPrescriptionDate(consultationDateToInsert);
				patientPrescriptionHeader.setPrescriptionTime(consultationTime);
				hbt.update(patientPrescriptionHeader);}
				
				else
				{
				
							patientPrescriptionHeader = new PatientPrescriptionHeader();
					patientPrescriptionHeader.setPrescriptionDate(consultationDateToInsert);
					patientPrescriptionHeader.setPrescriptionTime(consultationTime);
					int PrescriptionNo=0;
					adMap.put("tableObjectName", "PatientPrescriptionHeader");			
					adMap.put("isHospitalWise", "y");
					adMap.put("hospitalId", hospitalId);
					adMap.put("isYearly", "n");			
					adMap.put("isMonthly", "n");
					adMap.put("isPrefix", "n");
					/*mapForDS.put("transactionPrefixProperty", "transactionPrefixForIPD");*/
					try {
						PrescriptionNo = Integer.parseInt(HMSUtil.generateTransactionSequence(adMap, session, hbt));
					} catch (NumberFormatException e) {
				
						e.printStackTrace();
					} catch (Exception e) {
				
						e.printStackTrace();
					}
					//patientPrescriptionHeader.setPrescriptionNo(getTransactionSequenceNoForPrescriptionNo(dataMap));
					 patientPrescriptionHeader.setPrescriptionNo(PrescriptionNo);
					//patientPrescriptionHeader.setInjectionStatus(injectionStatus);
					patientPrescriptionHeader.setEmp(masEmployee);
					patientPrescriptionHeader.setHospital(masHospital);
					patientPrescriptionHeader.setDepartment(masDepartment);
					patientPrescriptionHeader.setVisit(visit);
					patientPrescriptionHeader.setHin(patient);
					patientPrescriptionHeader.setStatus("p");
					patientPrescriptionHeader.setFacStatus("y");
					patientPrescriptionHeader.setOtherTreatment(box.getString("otherTreatment"));
					patientPrescriptionHeader.setOpdPatientDetails(new OpdPatientDetails(OpdPatientDetailId));
					patientPrescriptionHeader.setDivision(new MasDivision(divisionId));
					if(zonalId !=0)
					{
						MasZonal zonalobj= new MasZonal();
						zonalobj.setId(zonalId);
						patientPrescriptionHeader.setZonal(zonalobj);
					}
					patientPrescriptionHeader.setNipStatus("n");
					patientPrescriptionHeader.setInjectionStatus("n");
					hbt.save(patientPrescriptionHeader);
				}
				
				
			
				
			
				
					
					int prescriptionId=0;
					prescriptionIdDBList.addAll(issuesPrescriptionIdList);
					
					
					for (int i = 0; i < itemIdList.size(); i++) {
				
					
						if(prescriptionIdList.get(i) != null && issuesPrescriptionIdList.contains(prescriptionIdList.get(i)))
								continue;
						else if(injectionFlagList!=null && injectionFlagList.get(i)!="" && injectionFlagList.get(i).equalsIgnoreCase("n"))
							continue;
						
						
						if(itemIdList.get(i) !=0 ){
							
						List<MasStoreItem> itemCodeList = new ArrayList<MasStoreItem>();
						prescriptionId =0;
			
						PatientPrescriptionDetails patientPrescriptionDetails =null;
						
						
						
						if (prescriptionIdList.get(i)!=0) {
							patientPrescriptionDetails	= (PatientPrescriptionDetails)hbt.load(PatientPrescriptionDetails.class, prescriptionIdList.get(i));
						}else{
							patientPrescriptionDetails	= new PatientPrescriptionDetails();
						}
						
						
						if(itemIdList.get(i) != null){
							MasStoreItem masStoreItem = new MasStoreItem();
							masStoreItem.setId(itemIdList.get(i));
						patientPrescriptionDetails.setItem(masStoreItem);
						}
					
						if (frequencyList.get(i) != null && !frequencyList.get(i).equals("")) {
							MasFrequency masFrequency = new MasFrequency();
							masFrequency.setId(frequencyList.get(i));
							patientPrescriptionDetails.setFrequency(masFrequency);
							}
							if (dosageList.get(i) != null && !dosageList.get(i).equals("") && !dosageList.get(i).equals("0")) {
								patientPrescriptionDetails.setDosage(dosageList.get(i));
							}else{
								patientPrescriptionDetails.setDosage("0");
							}
							if (remarksList.get(i) != null && !remarksList.get(i).equals("")) {
								patientPrescriptionDetails.setRemarks(remarksList.get(i));
							}
							//patientPrescriptionDetails.setType(typeLeftRightList.get(i));
							if (noOfDaysList.get(i) != null && !noOfDaysList.get(i).equals("")) {
								patientPrescriptionDetails.setNoOfDays(noOfDaysList.get(i));
							}
							if (routeList.get(i) != null && !routeList.get(i).equals("")) {
								patientPrescriptionDetails.setRoute(routeList.get(i));
							}
							/*if (totalList.get(i) != null && !totalList.get(i).equals("")) {
								patientPrescriptionDetails.setTotal(Math.round(totalList.get(i).floatValue()));
							}*/
							//System.out.println("total data layer "+"i "+i+ " "+totalList.get(i));
							if (totalList.get(i) != null && !totalList.get(i).equals("") && totalList.get(i) != 0) {
								patientPrescriptionDetails.setTotal(totalList.get(i));
							}else{
								patientPrescriptionDetails.setTotal(1);
							}
							patientPrescriptionDetails.setGivenQty(0);
						
						
						patientPrescriptionDetails.setPrescription(patientPrescriptionHeader);
					
						patientPrescriptionDetails.setDetailStatus("a");
						
						
	
						List<MasStoreItem> storeItemList=new ArrayList<MasStoreItem>();
						Properties properties = new Properties();
						URL resourcePath = Thread.currentThread().getContextClassLoader().getResource("adt.properties");
						int item_class_id=0;
						try {
							properties.load(resourcePath.openStream());
							String item_class_code = properties.getProperty("item_class_id");
							 item_class_id=Integer.parseInt(item_class_code);
						} catch (Exception e) {
							e.printStackTrace();
						}
						storeItemList=hbt.find("select item from jkt.hms.masters.business.MasStoreItem as item join item.ItemClass as ic where item.Id="+itemIdList.get(i)+" and ic.Id="+item_class_id);
						if(storeItemList.size() > 0){
							patientPrescriptionDetails.setInjectionStatus("p");
						}else{
							patientPrescriptionDetails.setInjectionStatus("n");
						}
						
			
						 hbt.saveOrUpdate(patientPrescriptionDetails);
						 
						 prescriptionIdDBList.add(patientPrescriptionDetails.getId());
						 
				
				
			
					}
					
						
					}//end for loop
					

				}
				
				//patientPrescriptionHeader.setInjectionStatus(injectionStatus);
				//remove deleted prescription

				if(pHeaderId!=0)
				{
					prescriptionIdDBList.add(0);
				List<PatientPrescriptionDetails> deleteDisCodeIdList = session.createCriteria(PatientPrescriptionDetails.class)
						//.add( Restrictions.not( Restrictions.in("Id", icdIdList)))
						.add(Restrictions.not(Restrictions.in("Id", prescriptionIdDBList)))
						.add(Restrictions.eq("Prescription.Id", pHeaderId))
						.list(); 

					//System.out.println("size "+icdIdList.size() +" opdpatientDetailId"+opdpatientDetailId );
					//System.out.println("deleteDisCodeIdList "+deleteDisCodeIdList.size());		   
					if(deleteDisCodeIdList.size() >0)
						{
							hbt.deleteAll(deleteDisCodeIdList);
						}
					
					deleteDisCodeIdList = session.createCriteria(PatientPrescriptionDetails.class)
							//.add( Restrictions.not( Restrictions.in("Id", icdIdList)))
							.add(Restrictions.eq("Prescription.Id", pHeaderId))
							.list(); 
					
					if(deleteDisCodeIdList.size()==0)
					{
						
						List<PatientPrescriptionHeader> deletePPHDtList = session.createCriteria(PatientPrescriptionHeader.class)
								.add(Restrictions.eq("Id", pHeaderId))
								.list(); 
						
						hbt.deleteAll(deletePPHDtList);
					}

				}
				
				//investigation
				
				if (chargeCodeIdList.size() > 0) {
					
					int dgOrderHdId = 0;
				
					 List<Integer> sampleCollectedInvestigationIdList = new ArrayList<Integer>();
			
					if(box.get("dgOrderHdId")!=null && box.getInt("dgOrderHdId")!=0)
					{
						dgOrderHdId =  box.getInt("dgOrderHdId");
						 List<DgOrderdt> sampleCollectedInvestigationList = session.createCriteria(DgOrderdt.class)
								.createAlias("Orderhd", "hd")
								.add(Restrictions.ne("OrderStatus", "p").ignoreCase())
			                  .add(Restrictions.eq("hd.Id", dgOrderHdId)).list();
			         for(DgOrderdt dgdt : sampleCollectedInvestigationList)   
			         {
			        	 sampleCollectedInvestigationIdList.add(dgdt.getId());
			         }
					}
				   
		
					
					
					List<Patient> patientList = new ArrayList<Patient>();   
					String patientTypeNameForHAL = null;
					String patientTypeNameForOther = null;
					String dgOrderBillingStatus ="";
					
					Properties properties = new Properties();
					URL resourcePath = Thread.currentThread().getContextClassLoader()
							.getResource("adt.properties");
					try {
						properties.load(resourcePath.openStream());
						
						 patientTypeNameForHAL = properties.getProperty("patientTypeNameForHAL");;
						 patientTypeNameForOther = properties.getProperty("patientTypeNameForOther");;
					} catch (Exception e) {
						e.printStackTrace();
					}
					
					
					Criteria crit = session.createCriteria(Patient.class).add(
							Restrictions.eq("Id", hinId));
					patientList = crit.list();
								
					
					if(patientList.size()!=0)
					{
						if(patientList.get(0).getPatientType().getPatientTypeName().equals(patientTypeNameForHAL))
						{
							dgOrderBillingStatus ="y";
						}
						else if(patientList.get(0).getPatientType().getPatientTypeName().equals(patientTypeNameForOther))
						{
							if(patientList.get(0).getBillable().equals("y"))
							    dgOrderBillingStatus ="n";
							else if(patientList.get(0).getBillable().equals("n"))
								dgOrderBillingStatus ="y";
						}
					}
		
					//end code
					
					DgOrderhd dgOrderhd = null;
					
					if(dgOrderHdId!=0)
						dgOrderhd = (DgOrderhd)hbt.load(DgOrderhd.class,dgOrderHdId);
					else
						dgOrderhd = new DgOrderhd();
					dgOrderhd.setOtherInvestigation(box.getString("otherInvestigation"));
					dgOrderhd.setOrderDate(consultationDateToInsert);
					dgOrderhd.setOrderTime(consultationTime);
					masHospital.setId(hospitalId);
					dgOrderhd.setHospital(masHospital);
					patient.setId(hinId);
					dgOrderhd.setHin(patient);
					dgOrderhd.setDepartment(masDepartment);
					dgOrderhd.setPrescribedBy(masEmployee);
					dgOrderhd.setBillingStatus(dgOrderBillingStatus);
					dgOrderhd.setPatientType("OP");
					dgOrderhd.setTestType("Regular");
					//dgOrderhd.setCreatedby(userName);
					dgOrderhd.setCreatedon(consultationDateToInsert);

					//orderSeqNo = generateOrderNumber();
					if(dgOrderHdId==0)
					{
					
				      adMap.put("tableObjectName", "DgOrderhd");            
			            adMap.put("isHospitalWise", "y");
			            adMap.put("hospitalId", hospitalId);
			            adMap.put("isYearly", "n");            
			            adMap.put("isMonthly", "n");
			            adMap.put("isPrefix", "n");
			
			            String orderSeqNo=null;
						try {
							orderSeqNo = HMSUtil.generateTransactionSequence(adMap, session, hbt);
						} catch (Exception e) {
							e.printStackTrace();
						}
					   dgOrderhd.setOrderNo(orderSeqNo);
					}
					
					
					if (visitId != 0) {
						visit = new Visit();
						visit.setId(visitId);
						dgOrderhd.setVisit(visit);
					}
					
					dgOrderhd.setOrderStatus("P");
					dgOrderhd.setLabOrderStatus("P");
					
					dgOrderhd.setLastChgBy(user);
					dgOrderhd.setLastChgDate(consultationDateToInsert);
					dgOrderhd.setLastChgTime(consultationTime);
					// dgOrderhd.setInvestigationRequestionNo(patientInvestigationHeader);
					//dgOrderhd.setOtherInvestigation((String)mapForDS.get("otherInvestigation"));
					if(mapForDS.get("otherInvestigation")!=null)
						dgOrderhd.setOtherInvestigation(mapForDS.get("otherInvestigation").toString().trim());
					 hbt.saveOrUpdate(dgOrderhd);
					//System.out.println("chargeCodeIdList.size()--"+chargeCodeIdList.size());
					 
					 List<Integer> totaldgDtIdList = sampleCollectedInvestigationIdList;
					 
					for (int i = 0; i < chargeCodeIdList.size(); i++) {
						
						//System.out.println("sampleCollectedInvestigationIdList "+sampleCollectedInvestigationIdList.size() +"dgorderDtList "+dgorderDtList.size());
						
						if(!sampleCollectedInvestigationIdList.contains(dgorderDtList.get(i)))
						{
							/*PatientInvestigationDetails patientInvestigationDetails = new PatientInvestigationDetails();
						patientInvestigationDetails
						.setInvestigationHeader(patientInvestigationHeader); */
						MasChargeCode masChargeCode = new MasChargeCode();
						//System.out.println("Integer.parseInt(chargeCodeIdList.get(i))--"+Integer.parseInt(chargeCodeIdList.get(i)));
						masChargeCode.setId(Integer.parseInt(chargeCodeIdList.get(i)));
						//System.out.println("Integer.parseInt(chargeCodeIdList.get(i))--");
						// patientInvestigationDetails.setChargeCode(masChargeCode);
						//patientInvestigationDetails.setQuantity(quantityList.get(i));
						//patientInvestigationDetails.setReferToMh(referToMhList.get(i));

						//patientInvestigationDetails.setClinicalNotes(clinicalList.get(i));
						// hbt.save(patientInvestigationDetails);

						DgOrderdt dgOrderdt = null;
						int a = dgorderDtList.get(i);
						//System.out.println("a "+dgorderDtList.get(i));
						if(dgorderDtList.get(i)!=0)
						{
							dgOrderdt = (DgOrderdt) hbt.load(DgOrderdt.class, dgorderDtList.get(i));
						}
						else
						{
							dgOrderdt = new DgOrderdt();
							dgOrderdt.setMsgSent("n");
						}
						
						
						dgOrderdt.setOrderhd(dgOrderhd);
						masChargeCode.setId(Integer.parseInt(chargeCodeIdList.get(i)));
						dgOrderdt.setChargeCode(masChargeCode);
						//dgOrderdt.setOrderQty(quantityList.get(i));
						dgOrderdt.setBillingStatus(dgOrderBillingStatus);
					//	dgOrderdt.setCreatedby(userName);
						dgOrderdt.setCreatedon(consultationDateToInsert);
						dgOrderdt.setLastChgBy(user);
						dgOrderdt.setLastChgDate(consultationDateToInsert);
						dgOrderdt.setLastChgTime(consultationTime);
				
						// method written for taking out the values of mascharge
						// code and subcharge
						Map masChargeMap = getMasChargeCodeFromChargeId(Integer
								.parseInt(chargeCodeIdList.get(i)));
						MasChargeCode masChargeCodeObj = (MasChargeCode) masChargeMap
						.get("masChargeCode");
						int mainChargeId = masChargeCodeObj.getMainChargecode()
						.getId();
						int subChargeId = masChargeCodeObj.getSubChargecode()
						.getId();
						if (masChargeCodeObj.getMainChargecode()
								.getMainChargecodeCode().equalsIgnoreCase("Lab")) {
							dgOrderdt.setOrderStatus("P");
						} else {
							dgOrderdt.setOrderStatus("P");
						}
						MasMainChargecode masMainChargecode = new MasMainChargecode();
						masMainChargecode.setId(mainChargeId);
						dgOrderdt.setMainChargecode(masMainChargecode);
						MasSubChargecode masSubChargecode = new MasSubChargecode();
						masSubChargecode.setId(subChargeId);
						dgOrderdt.setSubChargeid(masSubChargecode);
						// Added By Vinay 
						List<DgMasInvestigation> invList = new ArrayList<DgMasInvestigation>();
						invList = session.createCriteria(DgMasInvestigation.class).add(Restrictions.eq("ChargeCode.Id", Integer.parseInt(chargeCodeIdList.get(i)))).list();
						int invId=0;
						for(DgMasInvestigation list: invList)
						{
							invId = list.getId();
						}
						dgOrderdt.setInvestigation(new DgMasInvestigation(invId));
						//dgOrderdt.setInvestigationToMH(referToMhList.get(i));
						dgOrderdt.setInvestigationToMh("n");
						//dgOrderdt.setReferToMh(referToMhList.get(i));
						dgOrderdt.setReferToMh("n");
						hbt.saveOrUpdate(dgOrderdt);
						 
						 totaldgDtIdList.add(dgOrderdt.getId());
						 
					 } 
						 
					}
					totaldgDtIdList.add(0);
					List<DgOrderdt> deleteDgOrderDtList = session.createCriteria(DgOrderdt.class)
							//.add( Restrictions.not( Restrictions.in("Id", icdIdList)))
							.add(Restrictions.not(Restrictions.in("Id", totaldgDtIdList)))
							.add(Restrictions.eq("Orderhd.Id", dgOrderHdId))
							.list(); 
					//System.out.println("size "+icdIdList.size() +" opdpatientDetailId"+opdpatientDetailId );
					//System.out.println("deleteDisCodeIdList "+deleteDisCodeIdList.size());		   
				if(deleteDgOrderDtList.size() >0)
					{
						hbt.deleteAll(deleteDgOrderDtList);
					}
				

				
					// for Lab Order Booking////////////
				}
				
				else
				{
					if(box.get("dgOrderHdId")!=null && box.getInt("dgOrderHdId")!=0)
					{
						int dgOrderHdId =  box.getInt("dgOrderHdId");
						List<Integer> deleteInvestigation = new ArrayList <Integer>();
						 List<DgOrderdt> deletedgorderDtList = session.createCriteria(DgOrderdt.class)
								.createAlias("Orderhd", "hd")
								//.add(Restrictions.ne("OrderStatus", "p").ignoreCase())
			                  .add(Restrictions.eq("hd.Id", dgOrderHdId)).list();
			       
						 List<DgOrderhd> deletedgorderHdList = session.createCriteria(DgOrderhd.class)
									//.add(Restrictions.ne("OrderStatus", "p").ignoreCase())
				                  .add(Restrictions.eq("Id", dgOrderHdId)).list();
						 
			         if(deletedgorderDtList.size() >0)
			        	 hbt.deleteAll(deletedgorderDtList);
			         if(deletedgorderHdList.size() >0)
			        	 hbt.deleteAll(deletedgorderHdList);
			         
				
					}
				}
				
				
				
				
				tx.commit();
				saved = true;
			} catch (DataAccessException e) {
				e.printStackTrace();
			}
		/*	try {
				Visit visitStatus = (Visit) getHibernateTemplate().load(
						Visit.class, visitId);
				visitStatus.setVisitStatus("C");
				hbt.update(visitStatus);
				saved = true;
			} catch (Exception e) {
				e.printStackTrace();
			}*/
			map.put("saved", saved);
			return map;

		}

		@Override
		public Map<String, Object> showCIMSPopUp(Map<String,Object> map1) {
			Session session = (Session) getSession();
			Map<String, Object> map = new HashMap<String, Object>();
			try {
				String name = "%" + map1.get("autoHint") + "%";
	    		List<Cims> drugDetailList = new ArrayList<Cims>();
				
				Criteria cri = session.createCriteria(Cims.class)
						.createAlias("ItemId", "item")
				.add(Restrictions.like("item.Nomenclature", name).ignoreCase());
				
				drugDetailList=cri.list();
				map.put("drugDetailList", drugDetailList);
				} catch (Exception e) {
				e.printStackTrace();
			}
			return map;
		}
		
		@Override
		public Map<String, Object> getCIMSDetails(Map<String,Object> map1) {
			Session session = (Session) getSession();
			
			Map<String, Object> map = new HashMap<String, Object>();
			try {
				int cimsId =0;
				if(map1.get("cimsId")!=null)
				 cimsId= (Integer)map1.get("cimsId");
				
	    		List<Cims> drugDetailList = new ArrayList<Cims>();
				
	    		drugDetailList = session.createCriteria(Cims.class)
				.add(Restrictions.eq("Id", cimsId)).list();
	    		
				
				map.put("drugDetailList", drugDetailList);
				} catch (Exception e) {
				e.printStackTrace();
			}
			return map;
		}
		
		@SuppressWarnings("unchecked")
		public Map<String, Object> getNipItemListForAutoComplete(Map mapForDS) {
			List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
			List<MasStoreItem> itemList1 = new ArrayList<MasStoreItem>();
			Map<String, Object> map = new HashMap<String, Object>();
			Session session = (Session) getSession();
			try {
				int hospitalId =(Integer)mapForDS.get("hospitalId");
				int deptId =(Integer)mapForDS.get("deptId");
				String str =  "%" + mapForDS.get("autoHint") + "%";
				int DrugSectionId =0;
			
			
			
				Properties properties = new Properties();
				URL resourcePath = Thread.currentThread()
						 .getContextClassLoader()
						 .getResource("adt.properties");
				
				try {
					properties.load(resourcePath.openStream());
					DrugSectionId = Integer.parseInt(properties.getProperty("SectionIdForDrugs"));
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				String nipCode = HMSUtil.getProperties("adt.properties", "ItemClassificationCodeNIP");
				itemList = session.createCriteria(MasStoreItem.class)
						.createAlias("ItemClassification", "ic").add(Restrictions.eq("ic.Classification", nipCode))
						   .add(Restrictions.eq("Section.Id", DrugSectionId))
						   .add(Restrictions.eq("Status", "y"))
						   .add(Restrictions.like("Nomenclature", str))
														
						.list();
				
	
				map.put("itemList", itemList);
				
			} catch (Exception e) {

				e.printStackTrace();
			}
			return map;
		}

		public Map<String, Object> getPreviousSurgery(Map<String, Object> mapForDs) {
			 Session session = (Session) getSession();
		    Map<String, Object> map = new HashMap<String, Object>();
		    int hinId = (Integer) mapForDs.get("hinId");
		    int deptId = (Integer) mapForDs.get("deptId");
		    String allSurgeryType ="n";
		    if(mapForDs.get("allSurgeryType")!=null)
		    allSurgeryType = (String) mapForDs.get("allSurgeryType");
			//int hospitalId = (Integer) mapForDs.get("hospitalId");
			   List<OtBookingDt> previousSurgeryList  =null;
			try
			{
		
				String minSurgerySubCh = HMSUtil.getProperties("adt.properties", "subChargeCodeForMinorSurgery");
			/*	Criterion crit = session.createCriteria(OtBookingDt.class)
						      .createAlias("OtBookingHd", "hd")
						       .createAlias("hd.Hin", "h")
						        .createAlias("OtPreAnesthesiaDetail", "preDt")
						         .createAlias("preDt.OpdSurgeryDetail", "surDt")
						          .createAlias("surDt.ChargeCode", "cd")
						          .createAlias("cd.SubChargecode", "subCh")
						           .add(Restrictions.eq("subCh.SubChargecodeCode", minSurgerySubCh))
						          //.add(Restrictions.eq("cd.SubChargecode.SubChargecodeCode", "MinorSur"))
							   .add(Restrictions.eq("h.Id", hinId))*/
							   
		   		Criteria crit = session.createCriteria(OtBookingDt.class)
					      .createAlias("OtBookingHd", "hd")
					       .createAlias("hd.Hin", "h")
					        .createAlias("OtPreAnesthesiaDetail", "preDt")
					         .createAlias("preDt.OpdSurgeryDetail", "surDt")
					          .createAlias("surDt.ChargeCode", "cd")
					          .createAlias("cd.SubChargecode", "subCh")
					           .add(Restrictions.eq("h.Id", hinId));
				
							if(!allSurgeryType.equalsIgnoreCase("y"))
								crit.add(Restrictions.eq("subCh.SubChargecodeCode", minSurgerySubCh));
								
				previousSurgeryList = crit.list();
			}
			catch(Exception e){
			e.printStackTrace();}
			map.put("previousSurgeryList", previousSurgeryList);
		    return map;
			
		}
		
		public Map<String, Object>  getCurrentPrescriptionList(Map<String, Object> mapForDs) {
			 Session session = (Session) getSession();
		    Map<String, Object> map = new HashMap<String, Object>();
		    int hinId = (Integer) mapForDs.get("hinId");
		  //  int deptId = (Integer) mapForDs.get("deptId");
		
		    int hospitalId = (Integer) mapForDs.get("hospitalId");
		    String repeatPendingPres = null;
		    String bufferMedicine = null;
		    
		    	if(mapForDs.get("bufferMedicine")!=null)	
		         bufferMedicine=(String) mapForDs.get("bufferMedicine");
		     
			    	if(mapForDs.get("repeatPendingPres")!=null)	
			    		repeatPendingPres=(String) mapForDs.get("repeatPendingPres");
			int currentMedicationDays= 0;
			int daysForRepeatPendingMedicine= 0;
			try
			{
				currentMedicationDays = Integer.parseInt(HMSUtil.getProperties("adt.properties", "currentMedicationDays"));
				daysForRepeatPendingMedicine = Integer.parseInt(HMSUtil.getProperties("adt.properties", "daysForRepeatPendingMedicine"));
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
			Date date = new Date();
			Calendar c = Calendar.getInstance();
			c.setTime(date); 
			c.add(Calendar.DATE, -currentMedicationDays); 
			
				List<PatientPrescriptionDetails> ppdList = session.createCriteria(PatientPrescriptionDetails.class)
						.createAlias("Prescription", "Prescription")
						.createAlias("Item", "item").add(Restrictions.eq("item.Status", "y").ignoreCase())
						.createAlias("Prescription.Hospital", "Hospital")
						.add(Restrictions.eq("Prescription.Hin.Id",hinId))
						.add(Restrictions.eq("Hospital.Id", hospitalId))
						.add(Restrictions.or(Restrictions.isNull("ItemStopStatus"), Restrictions.ne("ItemStopStatus", "y")))
						.add(Restrictions.between("Prescription.PrescriptionDate",c.getTime(),date)).addOrder(Order.desc("Prescription.PrescriptionDate")).
						
						list();

				List<PatientPrescriptionDetails> currentPrescriptionList = new ArrayList<>();
				List<Integer> currentPrescriptionIdList = new ArrayList<>();
				
	    boolean matched = false;
			if(ppdList.size() >0)
			{
			int totalPrescribedDays = 0;
			Date prescribedDate = null;
		
		
			c.setTime(date);
		if(bufferMedicine!=null && bufferMedicine.equalsIgnoreCase("y"))
		{
			int bufferDayForMedicine= 0;
			bufferDayForMedicine = Integer.parseInt(HMSUtil.getProperties("adt.properties", "bufferDayForMedicine"));
			c.add(Calendar.DATE, bufferDayForMedicine);
		}
	
			 
			Date curentDate = c.getTime();
			int subtractDateDays = 0;
			String categoryCode = "";
			//System.out.println("current date"+" bufferMedicine="+bufferMedicine+"repeatPendingPres="+repeatPendingPres);
			//System.out.println("current date"+curentDate);
			for( PatientPrescriptionDetails pDt:ppdList)
			{
				     matched =false;
				
					totalPrescribedDays = pDt.getNoOfDays();
					prescribedDate = pDt.getPrescription().getPrescriptionDate();
					 SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
					 
					 //allow repeadt if medicine is not issued for mentioned days
					if(repeatPendingPres!=null && repeatPendingPres.equalsIgnoreCase("y") && pDt.getPrescription().getStatus().equalsIgnoreCase("p"))
					{
						 try {
								c.setTime(sdf.parse(prescribedDate.toString()));
							} catch (ParseException e) {
								e.printStackTrace();
							}
						 
						 c.add(Calendar.DATE, daysForRepeatPendingMedicine);  
						 if(curentDate.compareTo(c.getTime()) >=0)
							 continue;
					}
					//end
				if(pDt.getItem().getItemCategory()!=null)
				categoryCode = pDt.getItem().getItemCategory().getItemCategoryCode();
			
				 int diffInDays = (int) ((curentDate.getTime() - prescribedDate.getTime()) / (1000 * 60 * 60 * 24));
				 if(diffInDays >= totalPrescribedDays)
				 { matched=false;}
				 else
					 matched=true;
				 
				if(matched){
					String  categoryCodeForDiabetes = "";
					try
					{
						categoryCodeForDiabetes = HMSUtil.getValuesFromPropertiesFile("adt.properties", "categoryCodeForDaibetes");
					}
					catch(Exception e)
					{
						e.printStackTrace();
					}
					
					 if(categoryCode!=null && categoryCodeForDiabetes.equalsIgnoreCase(categoryCode)){
						 String dt = prescribedDate.toString(); 
						  c = Calendar.getInstance();
						 try {
							c.setTime(sdf.parse(dt));
						} catch (ParseException e) {
							e.printStackTrace();
						}
						 c.add(Calendar.DATE, totalPrescribedDays-7);  
						
						 dt = sdf.format(c.getTime()); 
						
						 if(curentDate.compareTo(c.getTime()) >0)
							  matched=false;
					 }
				}
				 
				if(matched){
					currentPrescriptionList.add(pDt);
					currentPrescriptionIdList.add(pDt.getItem().getId());
				     System.out.println("matched="+pDt.getItem().getNomenclature() +" pdt."+pDt.getNoOfDays() +" diffInDays="+diffInDays);
				}
			}
		  }
			map.put("currentPrescriptionList", currentPrescriptionList);
			map.put("currentPrescriptionIdList", currentPrescriptionIdList);
			
		    return map;
		}
		public Map<String, Object> getPrescriptionTemplateList(Map<String, Object> mapForDs) {
			Session session = (Session) getSession();
			Map<String, Object> map = new HashMap<String, Object>();
			int deptId = (Integer)mapForDs.get("deptId");
			int docId =(Integer)mapForDs.get("docId");
			int hospitalId =(Integer)mapForDs.get("hospitalId");
			String templateType = null;
			
			List<OpdTemplate> templateList = new ArrayList<OpdTemplate>();
			try {
				templateType = (String)mapForDs.get("templateType");
				if(templateType!=null){
				templateList = session.createCriteria(OpdTemplate.class)
						.createAlias("Department", "dept").add(Restrictions.eq("dept.Id", deptId))
						.createAlias("Hospital", "hosp").add(Restrictions.eq("hosp.Id", hospitalId))
						.createAlias("Doctor", "doctor").add(Restrictions.eq("doctor.Id", docId))
						.add(Restrictions.eq("TemplateType", templateType))
						.add(Restrictions.eq("Status", "y")).list();
				
				}
				List<MasFrequency> masFrequencyList = new ArrayList<MasFrequency>();
				masFrequencyList = session.createCriteria(MasFrequency.class).add(
						Restrictions.eq("Status", "y")).addOrder(Order.asc("OrderNo")).list();
				map.put("masFrequencyList", masFrequencyList);
			
			} catch (Exception e) {
				e.printStackTrace();
			}
			map.put("templateList", templateList);
			return map;
		}
		
		public Map<String, Object> getTreatmentListByTemplateId(Map<String, Object> mapForDs) {
			Session session = (Session) getSession();
			Map<String, Object> map = new HashMap<String, Object>();
			int deptId = (Integer)mapForDs.get("deptId");
			int docId =(Integer)mapForDs.get("docId");
			int templateId =(Integer)mapForDs.get("templateId");
			String templateType = (String)mapForDs.get("templateType");; 
		
			List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();
			try {
			if(templateType!=null && templateType.equalsIgnoreCase("P")){
				List<OpdTemplateTreatment> treatmentTemplateList = new ArrayList<OpdTemplateTreatment>();
				treatmentTemplateList = session.createCriteria(
						OpdTemplateTreatment.class).createAlias("Template",
						"template").add(Restrictions.eq("template.Id", templateId))
						.list();
				    frequencyList = session.createCriteria(MasFrequency.class).add(
						Restrictions.eq("Status", "y")).addOrder(Order.asc("OrderNo")).list();
				    map.put("treatmentTemplateList", treatmentTemplateList);
					map.put("frequencyList", frequencyList);}
			
			else if(templateType!=null && templateType.equalsIgnoreCase("I")){
				List<OpdTemplateInvestigation> investigationTemplateList = new ArrayList<OpdTemplateInvestigation>();
				investigationTemplateList = session.createCriteria(
						OpdTemplateInvestigation.class).createAlias("Template",
						"template").add(Restrictions.eq("template.Id", templateId))
						.list();
				 map.put("investigationTemplateList", investigationTemplateList);
				
			}
			} catch (Exception e) {
				e.printStackTrace();
			}
			
			
			return map;
		}
		
		public boolean submitUpdatedTemplate(Map<String, Object> mapForDs) {
			Session session = (Session) getSession();
			boolean flag = false;
			String templateName = "";
			String pojoPropertyCode = "";
			Transaction tx = null;
			
			int hospitalId = (Integer)mapForDs.get("hospitalId");
			int deptId = (Integer)mapForDs.get("deptId");
			int docId = (Integer)mapForDs.get("docId");
			int templateId = (Integer)mapForDs.get("templateId");
			try {
				tx = session.beginTransaction();
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
	        hbt.setCheckWriteOperations(false);
			//List pvmsNoList = new ArrayList();
			List frequencyList = new ArrayList();
			List dosageList = new ArrayList();
			List totalList = new ArrayList();
			//List typeLeftRightList = new ArrayList();
			List noOfDaysList = new ArrayList();
			List<Integer> opdTemplateTreatmentIdList = new ArrayList<Integer>();
			List<Integer> itemIdList = new ArrayList<Integer>();
			
			//List<Integer> instuctionList = new ArrayList<Integer>();
			List<String> instuctionList = new ArrayList<String>();

			Map<String, Object> map = new HashMap<String, Object>();
			List<OpdTemplate> opdTemplateList = new ArrayList<OpdTemplate>();
			
			List<OpdTemplate> existingOpdTemplateList = new ArrayList<OpdTemplate>();
			List<Integer> templateTreatmentIdDBList = new ArrayList<Integer>();
			
			if(mapForDs.get("templateName") != null){
				templateName =(String)mapForDs.get("templateName");
			}
			if(mapForDs.get("pojoPropertyCode") != null){
				pojoPropertyCode =(String)mapForDs.get("pojoPropertyCode");
			}
			
			//System.out.println("templateName==="+templateName);
			existingOpdTemplateList = session.createCriteria(OpdTemplate.class)
					.createAlias("Hospital", "hospital").add(Restrictions.eq("hospital.Id", hospitalId))
					.createAlias("Department", "dept").add(Restrictions.eq("dept.Id", deptId))
					.createAlias("Doctor", "doctor").add(Restrictions.eq("doctor.Id", docId))
					.add(Restrictions.eq("TemplateName", templateName).ignoreCase())
					.add(Restrictions.ne("Id", (Integer)mapForDs.get("templateId")))
					.list();
	
			if(existingOpdTemplateList.size()>0){			
				flag= false;
			}else{
				String lastChgBy = (String) mapForDs.get("changedBy");
				String currentTime = (String) mapForDs.get("currentTime");
				Date currentDate = (Date) mapForDs.get("currentDate");
				
				OpdTemplate opdTemplate = (OpdTemplate) hbt.load(OpdTemplate.class, (Integer)mapForDs.get("templateId")) ;
				
				opdTemplate.setTemplateCode(pojoPropertyCode);
				opdTemplate.setTemplateName(templateName);
				opdTemplate.setLastChgBy(lastChgBy);
				opdTemplate.setLastChgDate(currentDate);
				opdTemplate.setLastChgTime(currentTime);
				hbt.update(opdTemplate);
			
				frequencyList = (List) mapForDs.get("frequencyList");
				dosageList = (List) mapForDs.get("dosageList");
				totalList = (List) mapForDs.get("totalList");
				//typeLeftRightList = (List) mapForDs.get("typeLeftRightList");
				noOfDaysList = (List) mapForDs.get("noOfDaysList");
				instuctionList = (List) mapForDs.get("instuctionList");
				//int departmentId = opdTemplate.getDepartment().getId();
				
				opdTemplateTreatmentIdList =(List) mapForDs.get("opdTemplateTreatmentIdList");
				itemIdList =(List) mapForDs.get("itemIdList");
				
				MasStoreItem masStoreItem = new MasStoreItem();
				for (int i = 0; i < itemIdList.size(); i++) {
					OpdTemplateTreatment opdTemplateTreatment = null;
					if(opdTemplateTreatmentIdList.get(i)!=0){
						opdTemplateTreatment = (OpdTemplateTreatment)hbt.load(OpdTemplateTreatment.class, opdTemplateTreatmentIdList.get(i));
					}
					else
					{
						 opdTemplateTreatment = new OpdTemplateTreatment();
						 opdTemplateTreatment.setTemplate(new OpdTemplate(
									templateId));
					}
					opdTemplateTreatment.setDepartment(new MasDepartment(
							deptId));
					/*opdTemplateTreatment.setTemplate(new OpdTemplate(
							opdTemplateList.get(0).getId()));*/
					masStoreItem = (MasStoreItem) session.createCriteria(
							MasStoreItem.class).add(
							Restrictions.eq("Id",  itemIdList.get(i)))
							.list().get(0);
					opdTemplateTreatment.setItem(new MasStoreItem(masStoreItem
							.getId()));
					opdTemplateTreatment.setDosage((String) dosageList.get(i));
				/*	if (instuctionList.get(i) != 0) {
						opdTemplateTreatment.setOpdInstructionTreatment(new OpdInstructionTreatment((Integer) instuctionList.get(i)));
					}
	               */
					//if (instuctionList.get(i) != "") {
						opdTemplateTreatment.setInstruction(instuctionList.get(i));
					//}
	               
					
					opdTemplateTreatment.setNoofdays((Integer) noOfDaysList.get(i));
					opdTemplateTreatment.setTotal((Integer) totalList.get(i));
					opdTemplateTreatment.setFrequency(new MasFrequency(
							(Integer) frequencyList.get(i)));
					opdTemplateTreatment.setLastChgBy(lastChgBy);
					opdTemplateTreatment.setLastChgDate(currentDate);
					opdTemplateTreatment.setLastChgTime(currentTime);
					opdTemplateTreatment.setStatus("y");
				
					hbt.saveOrUpdate(opdTemplateTreatment);
						//hbt.refresh(opdTemplateTreatment);
					
					templateTreatmentIdDBList.add(opdTemplateTreatment.getId());
					    
						
				}
				//remove deleted prescription
				if(templateTreatmentIdDBList.size()>0)
				{
					List <OpdTemplateTreatment> deletedTratmentList = session.createCriteria(OpdTemplateTreatment.class)
							.add(Restrictions.not(Restrictions.in("Id", templateTreatmentIdDBList)))
							.add(Restrictions.eq("Template.Id", templateId))
							.list();
							
					if(deletedTratmentList.size()>0)
						hbt.deleteAll(deletedTratmentList);
				
				}
				
					flag = true;
				tx.commit();
				} //close else
				}catch (Exception e) {
				if (tx != null)
					tx.rollback();
					e.printStackTrace();
					e.getMessage();
					e.getCause();

				} finally {
					// --------Session Closing----------
					session.close();
				}

			
			
			return flag;
		}
		
		public boolean deleteOpdTemplate(Map<String, Object> mapForDs) {
			Session session = (Session) getSession();
			boolean flag = false;
			List<OpdTemplate> opdTemplateList = new ArrayList<OpdTemplate>();
			List<OpdTemplateTreatment> opdTemplateTreatmentList = new ArrayList<OpdTemplateTreatment>();
			Transaction tx = null;
			String templateType = null;
			if (mapForDs.get("templateType") != null) {
				templateType  = (String)mapForDs.get("templateType");
			}
			int hospitalId = (Integer)mapForDs.get("hospitalId");
			int templateId = (Integer)mapForDs.get("templateId");
			try {
				tx = session.beginTransaction();
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
	        hbt.setCheckWriteOperations(false);
	
	        opdTemplateList = session.createCriteria(OpdTemplate.class)
					.createAlias("Hospital", "hospital").add(Restrictions.eq("hospital.Id", hospitalId))
					.add(Restrictions.eq("Id", (Integer)mapForDs.get("templateId")))
					.list();
	
				//remove deleted prescription
				if(opdTemplateList.size()>0)
				{
					if(templateType.equalsIgnoreCase("P")){
					 opdTemplateTreatmentList = session.createCriteria(OpdTemplateTreatment.class)
							 .createAlias("Template", "template")
							.add(Restrictions.eq("template.Id", templateId))
							.list();
						if(opdTemplateTreatmentList.size()>0)
							hbt.deleteAll(opdTemplateTreatmentList);
					}
					else if(templateType.equalsIgnoreCase("I")){
						List opdTemplateInvestigation = session.createCriteria(OpdTemplateInvestigation.class)
								 .createAlias("Template", "template")
								.add(Restrictions.eq("template.Id", templateId))
								.list();
							if(opdTemplateTreatmentList.size()>0)
								hbt.deleteAll(opdTemplateInvestigation);
						}
				
					
					hbt.deleteAll(opdTemplateList);
				
				}
				
					flag = true;
				tx.commit();
				
				}catch (Exception e) {
				if (tx != null)
					tx.rollback();
					e.printStackTrace();
					e.getMessage();
					e.getCause();

				} finally {
					// --------Session Closing----------
					session.close();
				}

			
			
			return flag;
		}
		
public OpdOphthalmologyDetails getOpdOphthalObjectToSave(Map<String, Object> mapForDs) {
			
			OpdOphthalmologyDetails opdOphthalDetails =(OpdOphthalmologyDetails) mapForDs.get("opdOphthalDetails");
			Box box = (Box) mapForDs.get("box");
			if(box.get("dist_r_sph")!=null && !box.get("dist_r_sph").isEmpty())
				opdOphthalDetails.setDistRSph(box.getString("dist_r_sph"));

			if(box.get("dist_r_cyl")!=null && !box.get("dist_r_cyl").isEmpty())
				opdOphthalDetails.setDistRCyl(box.getString("dist_r_cyl"));

			if(box.get("dist_r_axix")!=null && !box.get("dist_r_axix").isEmpty())
				opdOphthalDetails.setDistRAxis(box.getString("dist_r_axix"));

			if(box.get("dist_l_sph")!=null && !box.get("dist_l_sph").isEmpty())
				opdOphthalDetails.setDistLSph(box.getString("dist_l_sph"));

			if(box.get("dist_l_cyl")!=null && !box.get("dist_l_cyl").isEmpty())
				opdOphthalDetails.setDistLCyl(box.getString("dist_l_cyl"));

			if(box.get("dist_l_axix")!=null && !box.get("dist_l_axix").isEmpty())
				opdOphthalDetails.setDistLAxis(box.getString("dist_l_axix"));
			
			if(box.get("near_r_sph")!=null && !box.get("near_r_sph").isEmpty())
				opdOphthalDetails.setNearRSph(box.getString("near_r_sph"));

			if(box.get("near_r_cyl")!=null && !box.get("near_r_cyl").isEmpty())
				opdOphthalDetails.setNearRCyl(box.getString("near_r_cyl"));

			if(box.get("near_r_axix")!=null && !box.get("near_r_axix").isEmpty())
				opdOphthalDetails.setNearRAxis(box.getString("near_r_axix"));

			if(box.get("near_l_sph")!=null && !box.get("near_l_sph").isEmpty())
				opdOphthalDetails.setNearLSph(box.getString("near_l_sph"));

			if(box.get("near_l_cyl")!=null && !box.get("near_l_cyl").isEmpty())
				opdOphthalDetails.setNearLCyl(box.getString("near_l_cyl"));

			if(box.get("near_l_axix")!=null && !box.get("near_l_axix").isEmpty())
				opdOphthalDetails.setNearLAxis(box.getString("near_l_axix"));
			
			if(box.get("eye_ipd")!=null && !box.get("eye_ipd").isEmpty())
				opdOphthalDetails.setEyeIpd(box.getInt("eye_ipd"));
			
			if(box.get("eye_use")!=null)
				opdOphthalDetails.setEyeUse(box.getString("eye_use"));
					
			if(box.get("lensType")!=null)
				opdOphthalDetails.setLensType(box.getString("lensType"));
			//vision
			if(box.get("dist_r_uncorrected")!=null)
				opdOphthalDetails.setDistRUncorrected(box.getString("dist_r_uncorrected"));
			
			if(box.get("dist_l_uncorrected")!=null)
				opdOphthalDetails.setDistLUncorrected(box.getString("dist_l_uncorrected"));
			
			if(box.get("dist_r_pinhole")!=null)
				opdOphthalDetails.setDistRPinhole(box.getString("dist_r_pinhole"));
			
			if(box.get("dist_l_pinhole")!=null )
				opdOphthalDetails.setDistLPinhole(box.getString("dist_l_pinhole"));
			
			if(box.get("dist_r_best_corrected")!=null)
				opdOphthalDetails.setDistRBestCorrected(box.getString("dist_r_best_corrected"));
			
			if(box.get("dist_l_best_corrected")!=null)
				opdOphthalDetails.setDistLBestCorrected(box.getString("dist_l_best_corrected"));
			
			if(box.get("near_r_uncorrected")!=null)
				opdOphthalDetails.setNearRUncorrected(box.getString("near_r_uncorrected"));
			
			if(box.get("near_l_uncorrected")!=null)
				opdOphthalDetails.setNearLUncorrected(box.getString("near_l_uncorrected"));
			
			if(box.get("near_r_pinhole")!=null)
				opdOphthalDetails.setNearRPinhole(box.getString("near_r_pinhole"));
			
			if(box.get("near_l_pinhole")!=null)
				opdOphthalDetails.setNearLPinhole(box.getString("near_l_pinhole"));
			
			if(box.get("near_r_best_corrected")!=null)
				opdOphthalDetails.setNearRBestCorrected(box.getString("near_r_best_corrected"));
			
			if(box.get("near_l_best_corrected")!=null)
				opdOphthalDetails.setNearLBestCorrected(box.getString("near_l_best_corrected"));
			
			if(box.get("vision_ipd")!=null)
				opdOphthalDetails.setVisionIpd(box.getString("vision_ipd"));
			
			if(box.get("vision_fundus")!=null)
				opdOphthalDetails.setVisionFundus(box.getString("vision_fundus"));
			
			//vision Retinoscopy
			if(box.get("retinoscopy_re")!=null)
				opdOphthalDetails.setRetinoscopyReH(box.getString("retinoscopy_re_h"));
			
			if(box.get("retinoscopy_le")!=null)
				opdOphthalDetails.setRetinoscopyLeH(box.getString("retinoscopy_le_h"));
			
			if(box.get("retinoscopy_re_axis")!=null)
				opdOphthalDetails.setRetinoscopyReAxis(box.getString("retinoscopy_re_axis"));
			
			if(box.get("retinoscopy_le_axis")!=null)
				opdOphthalDetails.setRetinoscopyLeAxis(box.getString("retinoscopy_le_axis"));
			
			//vision next section
			if(box.get("re_keratometry")!=null)
				opdOphthalDetails.setReKeratometry(box.getString("re_keratometry"));
			
			if(box.get("le_keratometry")!=null)
				opdOphthalDetails.setLeKeratometry(box.getString("le_keratometry"));
			
			if(box.get("re_pachymetry")!=null)
				opdOphthalDetails.setRePachymetry(box.getString("re_pachymetry"));
			
			if(box.get("le_pachymetry")!=null)
				opdOphthalDetails.setLePachymetry(box.getString("le_pachymetry"));
			
			if(box.get("re_Non_contact_tonometry")!=null)
				opdOphthalDetails.setReNonContactTonometry(box.getString("re_Non_contact_tonometry"));
			
			if(box.get("le_Non_contact_tonometry")!=null)
				opdOphthalDetails.setLeNonContactTonometry(box.getString("le_Non_contact_tonometry"));
			
			if(box.get("le_field_vn")!=null)
				opdOphthalDetails.setLeFieldVn(box.getString("le_field_vn"));

			if(box.get("re_field_vn")!=null)
				opdOphthalDetails.setReFieldVn(box.getString("re_field_vn"));
			
			//Anterior Segment
			
			if(box.get("re_eyebrow")!=null)
				opdOphthalDetails.setReEyebrow(box.getString("re_eyebrow"));
			
			if(box.get("le_eyebrow")!=null)
				opdOphthalDetails.setLeEyebrow(box.getString("le_eyebrow"));
			
			if(box.get("re_eyelid")!=null)
				opdOphthalDetails.setReEyelid(box.getString("re_eyelid"));
			
			if(box.get("le_eyelid")!=null)
				opdOphthalDetails.setLeEyelid(box.getString("le_eyelid"));
			
			if(box.get("re_cornea")!=null)
				opdOphthalDetails.setReCornea(box.getString("re_cornea"));
			
			if(box.get("le_cornea")!=null)
				opdOphthalDetails.setLeCornea(box.getString("le_cornea"));
			
			if(box.get("re_conjunction")!=null)
				opdOphthalDetails.setReConjunction(box.getString("re_conjunction"));
			
			if(box.get("le_conjunction")!=null)
				opdOphthalDetails.setLeConjunction(box.getString("le_conjunction"));
			
			if(box.get("re_fornix")!=null)
				opdOphthalDetails.setReFornix(box.getString("re_fornix"));

			if(box.get("le_fornix")!=null)
				opdOphthalDetails.setLeFornix(box.getString("le_fornix"));
			
			if(box.get("re_limbus")!=null)
				opdOphthalDetails.setReLimbus(box.getString("re_limbus"));
			
			if(box.get("le_limbus")!=null)
				opdOphthalDetails.setLeLimbus(box.getString("le_limbus"));
			
			if(box.get("re_sclera")!=null)
				opdOphthalDetails.setReSclera(box.getString("re_sclera"));
			
			if(box.get("le_sclera")!=null)
				opdOphthalDetails.setLeSclera(box.getString("le_sclera"));
			
			if(box.get("re_anterior_chamber")!=null)
				opdOphthalDetails.setReAnteriorChamber(box.getString("re_anterior_chamber"));
			
			if(box.get("le_anterior_chamber")!=null)
				opdOphthalDetails.setLeAnteriorChamber(box.getString("le_anterior_chamber"));
			
			if(box.get("re_iris")!=null)
				opdOphthalDetails.setReIris(box.getString("re_iris"));

			if(box.get("le_iris")!=null)
				opdOphthalDetails.setLeIris(box.getString("le_iris"));
			
			if(box.get("re_pupils")!=null)
				opdOphthalDetails.setRePupils(box.getString("re_pupils"));
			
			if(box.get("le_pupils")!=null)
				opdOphthalDetails.setLePupils(box.getString("le_pupils"));
			
			if(box.get("re_Lens")!=null)
				opdOphthalDetails.setReLens(box.getString("re_Lens"));
			
			if(box.get("le_Lens")!=null)
				opdOphthalDetails.setLeLens(box.getString("le_Lens"));
			
			if(box.get("re_anterior")!=null)
				opdOphthalDetails.setReAnterior(box.getString("re_anterior"));
			
			if(box.get("le_anterior")!=null)
				opdOphthalDetails.setLeAnterior(box.getString("le_anterior"));
			
			if(box.get("re_vitreous")!=null)
				opdOphthalDetails.setReVitreousAnterior(box.getString("re_vitreous"));
			
			if(box.get("le_vitreous")!=null)
				opdOphthalDetails.setLeVitreousAnterior(box.getString("le_vitreous"));
			
			//Posterior Segment
			if(box.get("re_optic_disc")!=null)
				opdOphthalDetails.setReOpticDisc(box.getString("re_optic_disc"));
			
			if(box.get("le_optic_disc")!=null)
				opdOphthalDetails.setLeOpticDisc(box.getString("le_optic_disc"));

			if(box.get("re_fovea")!=null)
				opdOphthalDetails.setReFovea(box.getString("re_fovea"));
			
			if(box.get("le_fovea")!=null)
				opdOphthalDetails.setLeFovea(box.getString("le_fovea"));
			
			if(box.get("re_vitreous_posterior")!=null)
				opdOphthalDetails.setReVitreousPosterior(box.getString("re_vitreous_posterior"));
			
			if(box.get("le_vitreous_posterior")!=null)
				opdOphthalDetails.setLeVitreousPosterior(box.getString("le_vitreous_posterior"));
			
			if(box.get("re_blood_vessels")!=null)
				opdOphthalDetails.setReBloodVessels(box.getString("re_blood_vessels"));
			
			if(box.get("le_blood_vessels")!=null)
				opdOphthalDetails.setLeBloodVessels(box.getString("le_blood_vessels"));
			
			if(box.get("re_colour_vision")!=null)
				opdOphthalDetails.setReColourVision(box.getString("re_colour_vision"));
			
			if(box.get("le_colour_vision")!=null)
				opdOphthalDetails.setLeColourVision(box.getString("le_colour_vision"));
			
			opdOphthalDetails.setRetinoscopyReV(box.getString("retinoscopy_re_v"));
			opdOphthalDetails.setRetinoscopyLeV(box.getString("retinoscopy_le_v"));
			opdOphthalDetails.setIolRe(box.getString("iol_re"));
			opdOphthalDetails.setIolLe(box.getString("iol_le"));
			
			opdOphthalDetails.setRetinaRe(box.getString("retina_re"));
			opdOphthalDetails.setRetinaLe(box.getString("retina_le"));
			
			
			return opdOphthalDetails;
		}
//commented by Babita Dangwal bcz referred list has been marged with normal opd
	/*	public Map<String, Object> getWaitingReferralPatientList(Map mapForDS) {
			Session session = (Session) getSession();
			List<Visit> patientList = new ArrayList<Visit>();
			List<MasEmployee> doctorList = new ArrayList<MasEmployee>();
		//	List<MasUnit> unitList = new ArrayList<MasUnit>();
			//List<MasRelation> relationList = new ArrayList<MasRelation>();
			//List<MasRank> sessionList = new ArrayList<MasRank>();
			List<MasSession> sessionList = new ArrayList<MasSession>();
			List<Integer> referredVisitIdList = new ArrayList<Integer>();
			Map<String, Object> map = new HashMap<String, Object>();
			String deptName = "";
			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			//Date date=HMSUtil.convertStringTypeDateToDateType(currentDate);
			Date date = new Date();
			String category = "Doctor";
		//	int unitId  = 0;
			//int relationId = 0;
			//int rankId = 0;
		
			String reportingDept[] = {"OPD","FollowUp"};
			int deptId = 0;
			int sessionId =0;
			int hospitalId=0;
			String serviceNo ="";
			String flag="";
			int searchFlag=0;
			int tokenNo=0;
			String patientName="";
			String uhid="";
			int opd_DepartmentId=0;
			if(mapForDS.get("searchFlag")!=null){
				searchFlag=(Integer)mapForDS.get("searchFlag");
			}
			if((Boolean)mapForDS.get("forOPClinnic")==null){
				if(mapForDS.get("opd_Department")!=null){
					opd_DepartmentId =(Integer) mapForDS.get("opd_Department");
				}
			}
			if(mapForDS.get("uhid")!=null){
				uhid =(String) mapForDS.get("uhid");
			}
			if(mapForDS.get("flag")!=null){
				flag =(String) mapForDS.get("flag");
			}
			
			if (mapForDS.get("deptId") != null) {
				deptId = (Integer) mapForDS.get("deptId");
			}
			if (mapForDS.get(SESSION_ID) != null) {
				sessionId = (Integer) mapForDS.get(SESSION_ID);
				
			}
			if (mapForDS.get("hospitalId") != null) {
				hospitalId = (Integer) mapForDS.get("hospitalId");
			}
			
			
			String currentTime =   HMSUtil.getCurrentTimeWithoutSecond().get("currentTime")!=null?HMSUtil.getCurrentTimeWithoutSecond().get("currentTime").toString():"";
			//System.out.println("gg "+flag +" empId"+mapForDS.get("empId")+"deptId"+deptId+"hospitalId"+hospitalId+"reportingDept"+reportingDept);
			try {
				if(mapForDS.get("rankId") != null){
					rankId = (Integer)mapForDS.get("rankId");
				}
				if(mapForDS.get("unitId") != null){
					unitId = (Integer)mapForDS.get("unitId");
				}
				if(mapForDS.get("relationId") != null){
					relationId = (Integer)mapForDS.get("relationId");
				}
				if(mapForDS.get("serviceNo") != null){
					serviceNo = (String)mapForDS.get("serviceNo");
				}
				
				if(mapForDS.get(PATIENT_NAME) != null){
					patientName = (String)mapForDS.get(PATIENT_NAME);
				}
				
				if (mapForDS.get("empId") != null && (Integer) mapForDS.get("empId") > 0) {
					int empId = (Integer) mapForDS.get("empId");
					
					Criteria crit = session.createCriteria(Visit.class)
							.add(Restrictions.eq("Doctor.Id", empId))
							.add(Restrictions.eq("Department.Id", deptId))
							.createAlias("Hospital", "h").add(Restrictions.eq("h.Id", hospitalId))
							.createAlias("Session", "ses")
							.add(Restrictions.in("ReportingFor", reportingDept))
					           .add(Restrictions.eq("VisitStatus", "r").ignoreCase());
							
							;
					if(!serviceNo.equals("")){
						crit = crit.createAlias("Hin", "hin").add(Restrictions.eq("hin.ServiceNo", serviceNo));
					}
					if(!patientName.equals("")){
						crit = crit.createAlias("Hin", "hin").add(Restrictions.like("hin.PFirstName", patientName
								+ "%"));
					}
					
			
					patientList = crit.addOrder(Order.asc("VisitTime")).list();
					map.put("empId", empId);
					if(patientList.size() >0)
					{
						String  dentalDepartmentCode = null;
						try
						{
							dentalDepartmentCode = HMSUtil.getValuesFromPropertiesFile("adt.properties", "departmentCodeForDental");
						}
						catch(Exception e)
						{
							e.printStackTrace();
						}
						
						map.put("dentalCode", dentalDepartmentCode);
						map.put("opdType", "r");
			
					}
					
					
				}
		
				
				
				
		
			} catch (HibernateException e) {
				e.printStackTrace();
			}
			System.out.println("showReferredPatientWaitingListJsp"+patientList.size());
			map.put("patientList", patientList);
		
			return map;
		}*/


		public boolean submitUpdatedInvestigationTemplate(Map<String, Object> mapForDs) {
			Session session = (Session) getSession();
			boolean flag = false;
			String templateName = "";
			String pojoPropertyCode = "";
			Transaction tx = null;
			
			int hospitalId = (Integer)mapForDs.get("hospitalId");
			int deptId = (Integer)mapForDs.get("deptId");
			int docId = (Integer)mapForDs.get("docId");
			int templateId = (Integer)mapForDs.get("templateId");
			try {
				tx = session.beginTransaction();
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
	        hbt.setCheckWriteOperations(false);
			//List pvmsNoList = new ArrayList();
			List<Integer> chargeCodeCodeList = new ArrayList<Integer>();
			
			
			//List<Integer> instuctionList = new ArrayList<Integer>();
			List<String> instuctionList = new ArrayList<String>();

			Map<String, Object> map = new HashMap<String, Object>();
			List<OpdTemplate> opdTemplateList = new ArrayList<OpdTemplate>();
			List<Integer> templateInvesIdDBList = new ArrayList<Integer>();
			List<OpdTemplate> existingOpdTemplateList = new ArrayList<OpdTemplate>();
			
			
			if(mapForDs.get("templateName") != null){
				templateName =(String)mapForDs.get("templateName");
			}
			if(mapForDs.get("pojoPropertyCode") != null){
				pojoPropertyCode =(String)mapForDs.get("pojoPropertyCode");
			}
			
			//System.out.println("templateName==="+templateName);
			existingOpdTemplateList = session.createCriteria(OpdTemplate.class)
					.createAlias("Hospital", "hospital").add(Restrictions.eq("hospital.Id", hospitalId))
					.createAlias("Department", "dept").add(Restrictions.eq("dept.Id", deptId))
					.createAlias("Doctor", "doctor").add(Restrictions.eq("doctor.Id", docId))
					.add(Restrictions.eq("TemplateName", templateName).ignoreCase())
					.add(Restrictions.ne("Id", templateId))
					.list();
	
			if(existingOpdTemplateList.size()>0){			
				flag= false;
			}else{
				String lastChgBy = (String) mapForDs.get("changedBy");
				String currentTime = (String) mapForDs.get("currentTime");
				Date currentDate = (Date) mapForDs.get("currentDate");
				
				OpdTemplate opdTemplate = (OpdTemplate) hbt.load(OpdTemplate.class, templateId) ;
				
				opdTemplate.setTemplateCode(pojoPropertyCode);
				opdTemplate.setTemplateName(templateName);
				opdTemplate.setLastChgBy(lastChgBy);
				opdTemplate.setLastChgDate(currentDate);
				opdTemplate.setLastChgTime(currentTime);
				hbt.update(opdTemplate);
			
			
				//int departmentId = opdTemplate.getDepartment().getId();
				
				List<Integer> opdTemplateInvestIdList =(List<Integer>) mapForDs.get("opdTemplateInvestIdList");
				chargeCodeCodeList = (List<Integer>) mapForDs.get("chargeCodeCodeList");
				
				//MasStoreItem masStoreItem = new MasStoreItem();
				for (int i = 0; i < chargeCodeCodeList.size(); i++) {
					if(opdTemplateInvestIdList.get(i)==0){
					OpdTemplateInvestigation opdTemplateInvestigation = new OpdTemplateInvestigation();
					opdTemplateInvestigation.setDepartment(new MasDepartment(
							deptId));
					opdTemplateInvestigation.setTemplate(new OpdTemplate(
							templateId));
					/*MasChargeCode masChargeCode = (MasChargeCode) session.createCriteria(
							MasChargeCode.class).add(
							Restrictions.eq("ChargeCodeCode",
									(String) chargeCodeCodeList.get(i))).list()
							.get(0);*/
					
					opdTemplateInvestigation.setChargeCode(new MasChargeCode(chargeCodeCodeList.get(i)));
							
					//opdTemplateInvestigation.setTemplateInvestigationQty((Integer) qtyList.get(i));
					//opdTemplateInvestigation.setClinicalNotes((String) clinicalList.get(i));
					opdTemplateInvestigation.setLastChgBy(lastChgBy);
					opdTemplateInvestigation.setLastChgDate(currentDate);
					opdTemplateInvestigation.setLastChgTime(currentTime);
					opdTemplateInvestigation.setStatus("y");
					hbt.save(opdTemplateInvestigation);
					opdTemplateInvestIdList.add(opdTemplateInvestigation.getId());
					}
						
				}
				//remove deleted prescription
				if(opdTemplateInvestIdList.size()>0)
				{
					List <OpdTemplateInvestigation> deletedInvesList = session.createCriteria(OpdTemplateInvestigation.class)
							.add(Restrictions.not(Restrictions.in("Id", opdTemplateInvestIdList)))
							.add(Restrictions.eq("Template.Id", templateId))
							.list();
							
					if(deletedInvesList.size()>0)
						hbt.deleteAll(deletedInvesList);
				
				}
				
					flag = true;
				tx.commit();
				} //close else
				}catch (Exception e) {
				if (tx != null)
					tx.rollback();
					e.printStackTrace();
					e.getMessage();
					e.getCause();

				} finally {
					// --------Session Closing----------
					session.close();
				}

			
			
			return flag;
		}
		
		@Override
		public Map<String, Object> doVisitRelease(Map<String, Object> dataMap) {
			
			Map<String,Object> map = new HashMap<String,Object>();
			Session	 session=(Session)getSession();
			Transaction tx=session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			List<Visit> patientList = new ArrayList<Visit>();
			
			boolean flag= false;
			
			int visitId=0;
			
			Criteria crt=null;
			
			visitId = (Integer)dataMap.get("visitId");
		
			
			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");
			
			Visit visit = new Visit();
			visit = (Visit)hbt.get(Visit.class, visitId);
			String currentTime= HMSUtil.currentTime();
			if(visit != null)
			{			
		    	visit.setVisitStatus("X");
				hbt.update(visit);
				hbt.refresh(visit);
				tx.commit();
				flag= true;
			}
			
		
							
			map.put("flag", flag);
			return map;
		}
	
		 @SuppressWarnings("unchecked")
	        public Map<String, Object> getPreviousDentalXray(Map mapForDS) {
	            Session session = (Session) getSession();
	            
	            List<Object[]> patientPreviousVisitDentalList = new ArrayList<Object[]>();
	            
	            List<Object> tempList=null;
	        
	            
	            Map<String, Object> map = new HashMap<String, Object>();

	            //int deptId = (Integer) mapForDS.get("deptId");
	            
	            String hinNo="";
	            hinNo =(String) mapForDS.get("hinNo");
	            
	            Properties properties = new Properties();
	            URL resourcePath = Thread.currentThread().getContextClassLoader()
	                    .getResource("adt.properties");
	            try {
	                properties.load(resourcePath.openStream());
	            } catch (Exception e) {
	                e.printStackTrace();
	            }
	            
	            Map connMap = HMSUtil.getConnectionForReportForPG();
	            Connection conn = (Connection) connMap.get("conn");
	            //System.out.println("PGConn="+conn);
	            Statement st = null;
	            ResultSet rs = null;
	            Statement st1 = null;
	            ResultSet rs1 = null;
	            try{
	                st = conn.createStatement();
	                st1 = conn.createStatement();
	            }
	            catch(Exception e){
	                e.printStackTrace();
	            }
	            
	       
	                    
	            String qry="select img.img_filename,pat.pat_firstname,pat.pat_lastname,pat.pat_lastname,pat.pat_chartno,pat.pat_gender" +
	                            " from e2_img img" +
	                            " left outer join e2_pat pat on img.pat_id=pat.pat_id" +                            
	                            " where pat.pat_chartno='"+hinNo +"'";
	            //System.out.println("qry="+qry);
	                    
	                    
	                    
	                    try{
	                        
	                        if(conn != null)
	                        {
	                            rs = st.executeQuery(qry);
	                            int count = rs.getRow();
	                            int n = rs.getMetaData().getColumnCount();
	                            
	                            while(rs.next()){
	                                tempList = new ArrayList<Object>();
	                                for(int i=1; i<=n; i++){
	                                    tempList.add(rs.getString(i));
	                                }
	                                patientPreviousVisitDentalList.add(tempList.toArray());
	                            }
	                            
	                            
	                                
	                        }
	                        
	                    }
	                    catch(SQLException e){
	                        e.printStackTrace();
	                    }
	            
	                    map.put("patientPreviousVisitDentalList", patientPreviousVisitDentalList);
	           
	            
	            return map;
	        }
		 @SuppressWarnings("unchecked")
			public Map<String, Object> getAvailableDoctorList(Map mapForDS) {
			
				Session session = (Session) getSession();
				Map<String, Object> map = new HashMap<String, Object>();
				List<MasEmployee> doctorList = new ArrayList<MasEmployee>();
				List<MasEmployee> doctorList1 = new ArrayList<MasEmployee>();
				List<MasSession> sessionList = new ArrayList<MasSession>();
				List<MasEmployeeDepartment> empDeptList = new ArrayList<MasEmployeeDepartment>();
				List empList= new ArrayList();
				
				Box box = (Box)mapForDS.get("box");
						int hospitalId = box.getInt("hospitalId");
				String empCategoryCodeForDoctor = "";
				Properties properties = new Properties();
				URL resourcePath = Thread.currentThread().getContextClassLoader()
						.getResource("adt.properties");
				try {
					properties.load(resourcePath.openStream());
					empCategoryCodeForDoctor = properties.getProperty("empCategoryCodeForDoctor");
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		     
				int departmentId = box.getInt(DEPARTMENT_ID);
				
				try {
			
					empDeptList=session.createCriteria(MasEmployeeDepartment.class)
							.createAlias("Department", "dept")
							.add(Restrictions.eq("dept.Id",departmentId))
							.add(Restrictions.eq("Status","y").ignoreCase())
							.list();
					
					for(MasEmployeeDepartment empDept :empDeptList)
					{ 
						empList.add(empDept.getEmployee().getId());
					}
					if(empDeptList.size() >0)
					{
					   doctorList = session.createCriteria(MasEmployee.class)
							 .add(Restrictions.eq("Status","y").ignoreCase())  
							 .add(Restrictions.eq("Hospital.Id",hospitalId))
							.createAlias("EmpCategory", "ec")					
							.add(Restrictions.eq("ec.EmpCategoryCode", empCategoryCodeForDoctor))
							.add(Restrictions.in("Id", empList))
							.list();
					
					   sessionList = session.createCriteria(MasSession.class)
							   .add(Restrictions.eq("Hospital.Id",hospitalId))
							   .add(Restrictions.eq("Status","y").ignoreCase()).list();
					  
					   Date dt = new Date();
					   int hours = dt.getHours();
					
					   int sessionId=0;
					   List<Integer> sessionIds = new ArrayList<Integer>();
					   sessionIds.add(0);
					   if(hours<=12)
						   sessionIds.add(Integer.parseInt(HMSUtil.getProperties("adt.properties", "sessionIdForMrng")));
					   else 
						   sessionIds.add(Integer.parseInt(HMSUtil.getProperties("adt.properties", "sessionIdForEvng")));
					   
					   
					   List<Integer> a = new ArrayList<Integer>();
					   for(MasEmployee emp : doctorList)
					   {
						   String tokenNo=getTokenNoForDepartment(emp.getId(),sessionIds,departmentId,1);
						   if(tokenNo.matches("\\d+"))
							   doctorList1.add(emp);
						   
					   }
					   
					}
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				map.put("doctorList", doctorList1);
				map.put("sessionList", sessionList);
				return map;
			}
			

		 public String getTokenNoForDepartment(int doctorId,  List<Integer> sessionIds, int deptId, int hospitalId) {
		        List<Integer> tokenNoList = new ArrayList<Integer>();
		        List<AppPatientAppointments> appPAList = new ArrayList<AppPatientAppointments>();
		        List<DoctorRoaster> docRoasterList = new ArrayList<DoctorRoaster>();
	             Criteria crit = null;
	             /*String tokenNoDisplayflag =null;
	        
	             if(request.getAttribute("tokenNoDisplayflag")!=null && request.getAttribute("tokenNoDisplayflag").equals("n"))
	            	 tokenNoDisplayflag ="n";*/
		        int tokenNo = 0;
		        boolean flag = false;
		        String tokenMsg ="";
		        int cancelledCount = 0;
		       // HttpSession ses = request.getSession();
			/*	int hospitalId = 0;
				if (ses.getAttribute(HOSPITAL_ID) != null) {
					hospitalId = (Integer) ses.getAttribute(HOSPITAL_ID);
				}*/
		        
		        Session session = (Session) getSession();
		        // tokenNoList = getHibernateTemplate().find("select max(v.TokenNo) from
		        // Visit v join v.Department as dept where dept.Id="+departmentId+"	and
		        // v.VisitDate="+date);
		        Date today = new Date();
		        String dateString = HMSUtil.convertDateToStringFormat(today, "yyyy-MM-dd");
	            Date date= null;
				try {
					date = new SimpleDateFormat("yyyy-MM-dd").parse(dateString);
				} catch (ParseException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}     
		        
		        
		    
		       
			
		       
		       // System.out.println(doctorId+""+sessionId+""+deptId+""+date);
		        
		        try {
		        	//String sessionIds[] = {HMSUtil.getProperties("adt.properties", "sessionIdForMrng"),HMSUtil.getProperties("adt.properties", "sessionIdForEvng")};
		        //	int mrngSesId = Integer.parseInt(HMSUtil.getProperties("adt.properties", "sessionIdForMrng"));
		        	//int evngSesId = Integer.parseInt(HMSUtil.getProperties("adt.properties", "sessionIdForEvng"));
		        	
		        	docRoasterList =session.createCriteria(DoctorRoaster.class)
			        /*.add(Restrictions.eq("v.VisitDate", dateString))*/
					.add(Restrictions.eq("RoasterDate", date))
					.add(Restrictions.eq("Doctor.Id", doctorId))
					//.add(Restrictions.eq("Hospital.Id", hospitalId))
			        .createAlias("Department", "dept").add(Restrictions.eq("dept.Id", deptId)).list();
		     
		        	if(docRoasterList.size()>0)
		        	{
		        		docRoasterList.clear();
		        		crit =session.createCriteria(DoctorRoaster.class)
		        		        /*.add(Restrictions.eq("v.VisitDate", dateString))*/
		        				.add(Restrictions.eq("RoasterDate", date))
		        				.add(Restrictions.eq("Doctor.Id", doctorId))
		        				//.add(Restrictions.eq("Hospital.Id", hospitalId))
		        		        .createAlias("Department", "dept").add(Restrictions.eq("dept.Id", deptId))
		        		        .add(Restrictions.or(Restrictions.like("RoasterValue", "y%"), Restrictions.like("RoasterValue", "%y")));
		        		
		      /*  		if(sessionId==mrngSesId)
			        		crit.add(Restrictions.like("RoasterValue", "y%"));
			        	else if(sessionId==evngSesId)
			        		crit.add(Restrictions.like("RoasterValue", "%y"));*/
			        	docRoasterList =crit.list();
			        	if(docRoasterList.size()>0)
			        	{
			        		
					tokenNoList = session.createCriteria(Visit.class, "v")
					        /*.add(Restrictions.eq("v.VisitDate", dateString))*/
							.add(Restrictions.eq("v.VisitDate", date))
							.add(Restrictions.eq("v.Hospital.Id", hospitalId))
					        .createAlias("Department", "dept").add(Restrictions.eq("dept.Id", deptId))
					        .createAlias("Doctor", "doctor").add(Restrictions.eq("doctor.Id", doctorId))
					        .createAlias("Session", "session").add(Restrictions.in("session.Id",sessionIds))
					        .setProjection(Projections.projectionList().add(Projections.max("TokenNo"))).list();
					 if (tokenNoList.get(0) != null) {
						 tokenNo = tokenNoList.get(0);
					}
					 else{
						 tokenNo = 0;
					 }
					 do{
						 tokenNo++;
						 // checking whether same token no is already book for the online appointment
						 appPAList = session.createCriteria(AppPatientAppointments.class)
							        .add(Restrictions.eq("AppointmentDate", date))	
	                                .add(Restrictions.eq("Hospital.Id", hospitalId))				        
							        .createAlias("Department", "dept").add(Restrictions.eq("dept.Id", deptId))
							        .createAlias("Employee", "doctor").add(Restrictions.eq("doctor.Id", doctorId))
							        .createAlias("AppSession", "session").add(Restrictions.in("session.Id", sessionIds))
							        .add(Restrictions.eq("QueuePriority", tokenNo)).list();
						 if(appPAList.size()==0)
						 {
							 flag = false;
						 }
						 else
						 {
							 flag = true;
						 }
						 
				      }while(flag);
					 
					 List<AppSetup> setupList=new ArrayList<AppSetup>();				 	
					 String dayName = new SimpleDateFormat("EEEE", Locale.ENGLISH).format(date.getTime());
					 //System.out.println(new SimpleDateFormat("EEEE", Locale.ENGLISH).format(date.getTime()));
					 // getting total no of available token for a doctor 
					 setupList=session.createCriteria(AppSetup.class)
							    .add(Restrictions.eq("Hospital.Id", hospitalId)) 
							    .add(Restrictions.eq("Dept.Id", deptId))
							    .add(Restrictions.eq("Days", dayName))
								.add(Restrictions.eq("Doctor.Id", doctorId))
								.add(Restrictions.in("Session.Id", sessionIds))
								.list();
					 // getting total no of cancelled tokens for a perticular date
					 cancelledCount = (Integer)session.createCriteria(AppPatientAppointments.class)
							    .add(Restrictions.eq("Hospital.Id", hospitalId))
						        .add(Restrictions.eq("AppointmentDate", date))
						        .add(Restrictions.eq("AppointmentStatus", "c").ignoreCase())
						        .createAlias("Department", "dept").add(Restrictions.eq("dept.Id", deptId))
						        .createAlias("Employee", "doctor").add(Restrictions.eq("doctor.Id", doctorId))
						        .createAlias("AppSession", "session").add(Restrictions.in("session.Id", sessionIds))
						        .setProjection(Projections.rowCount()).uniqueResult();
					 //System.out.println("cancelledCount"+cancelledCount);
					if(setupList.size()>0)
					{
						if(tokenNo > (setupList.get(0).getTotalToken()+cancelledCount))
						{
							tokenNo = 0;
							//if(tokenNoDisplayflag!=null && tokenNoDisplayflag.equalsIgnoreCase("n"))
								//tokenMsg = String.valueOf(tokenNo);
							//else
							   tokenMsg="Token Full";
						}
						else{
								tokenMsg = String.valueOf(tokenNo);
							
						}
					}
					else
					{
						tokenMsg ="No Appointment Setup";
					} 
			        	}
			        	else
			        		tokenMsg ="Doctor is on leave";
								
		        	}
		        	else
		        		tokenMsg ="Doctor Roaster is not updated";
		        	
					
				} catch (HibernateException e) {
					
					e.printStackTrace();
					//session.close();
				}	        
		        
		        return tokenMsg;
		 }
			@SuppressWarnings("unchecked")
			public Map<String, Object> getPreviousOBGVisit(Map<String, Object>  mapForDS) {
				Session session = (Session) getSession();
				Map<String, Object> map = new HashMap<String, Object>();
				List<OpdPatientDetails> patientPreviousDetails = new ArrayList<OpdPatientDetails>();
				int hinId = (Integer) mapForDS.get("hinId");
				int visitNo = 0;
				if(mapForDS.get("visitNo")!=null)
					visitNo = (Integer) mapForDS.get("visitNo");
				int visitId = 0;
				if(mapForDS.get("visitId")!=null)
					visitId = (Integer) mapForDS.get("visitId");
				String departmentCodeForOBG = HMSUtil.getProperties("adt.properties", "departmentCodeForOBG");
				
					
					patientPreviousDetails = session.createCriteria(OpdPatientDetails.class).createAlias("Visit", "v").createAlias("Visit.Hin", "hin").createAlias("Visit.Department", "dept")
						.add(Restrictions.ne("v.Id", visitId))
						.add(Restrictions.eq("hin.Id", hinId))
						.add(Restrictions.eq("v.VisitStatus", "C")).add(Restrictions.eq("dept.DepartmentCode", departmentCodeForOBG)).setMaxResults(15).addOrder(Order.desc("id")).list();
							
				
				//System.out.println("visitId="+hinId +" visitId="+ visitId +" departmentCodeForOBG="+departmentCodeForOBG +" dd"+patientPreviousDetails.size());
				map.put("patientPreviousDetails", patientPreviousDetails);
				
				
				return map;
			}
		@SuppressWarnings("unchecked")
		public Map<String, Object> getPatientVaccineDetails(Map  mapForDS) {
			Session session = (Session) getSession();
			Map<String, Object> map = new HashMap<String, Object>();
			List<Visit> visitDetailList = null;
			Patient patientDetails = null;
			List<OpdVaccinationPlan>vaccinationPlanList = new ArrayList<OpdVaccinationPlan>();
			List<MasVaccineItem> vaccineList = new ArrayList<MasVaccineItem>();
		
			int hinId = 0;
			int visitId = 0;
			if(mapForDS.get("visitId")!=null)
				visitId = (Integer) mapForDS.get("visitId");
			int departmentId = 0;
			if(mapForDS.get("departmentId")!=null)
				departmentId = (Integer) mapForDS.get("departmentId");
			
			
			visitDetailList =session.createCriteria(Visit.class)
					.add(Restrictions.eq("Id", visitId))
					.add(Restrictions.eq("Department.Id", departmentId))
					.add(Restrictions.ne("VisitStatus", "C"))
					.list();
			if(visitDetailList.size()>0)
			{
				patientDetails =visitDetailList.get(0).getHin();
				hinId=visitDetailList.get(0).getHin().getId();
			}
			vaccinationPlanList = session.createCriteria(OpdVaccinationPlan.class)
							.add(Restrictions.eq("Hin.Id",hinId)).list();
					vaccineList =session.createCriteria(MasVaccineItem.class).add(Restrictions.eq("Status","y").ignoreCase()).addOrder(Order.asc("OrderNo")).list();
					
			
			map.put("nipDetils", "y");
			map = getOPDScreenCommonDetails(map);
			map.put("patientDetails", patientDetails);
			map.put("vaccinationPlanList", vaccinationPlanList);
			map.put("vaccineList",vaccineList);
			return map;
		}
		
		 
		public Map<String, Object> getOPDScreenCommonDetails(Map<String, Object> map) {
			Session session = (Session) getSession();
			String nipDetils =null;
			if(map.get("nipDetils")!=null)
				nipDetils = (String)map.get("nipDetils");
			
			List<MasStoreItemConversion> itemConversionList = new ArrayList<MasStoreItemConversion>();
			List<MasStoreItemConversion> itemConversionList1 = new ArrayList<MasStoreItemConversion>();
			List<MasItemClass> masItemClassList = new ArrayList<MasItemClass>();
			List<MasItemClass> masItemClassList1 = new ArrayList<MasItemClass>();
			List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();
			
			if(nipDetils!=null && nipDetils.equalsIgnoreCase("y")){
			itemConversionList = session.createCriteria(MasStoreItemConversion.class).add(Restrictions.eq("Status", "y")).addOrder(Order.asc("ItemUnitName")).list();
			
			String []ItemConversionIdForTopInDropDown = HMSUtil.getProperties("adt.properties","ItemConversionIdForTopInDropDown").trim().split(",");
			for(MasStoreItemConversion IC:itemConversionList){
				  for(int i=0;i <ItemConversionIdForTopInDropDown.length;i++)
				  {
					  if(Integer.parseInt(ItemConversionIdForTopInDropDown[i])==IC.getId())
						  itemConversionList1.add(IC);
				  }
				  if(itemConversionList1.size()==ItemConversionIdForTopInDropDown.length)
					  break;
				}
			itemConversionList.removeAll(itemConversionList1);
			itemConversionList.addAll(0, itemConversionList1);
			
			
			String []ItemClassIdForTopInDropDown =  HMSUtil.getProperties("adt.properties","ItemClassIdForTopInDropDown").trim().split(",");
			masItemClassList= session.createCriteria(MasItemClass.class).
					add(Restrictions.eq("Status", "y").ignoreCase())
					.add(Restrictions.eq("Section.Id", 18))
					 .addOrder(Order.asc("ItemClassName")) .list(); 
			for(MasItemClass ms:masItemClassList){
			  for(int i=0;i <ItemClassIdForTopInDropDown.length;i++)
			  {
				  if(Integer.parseInt(ItemClassIdForTopInDropDown[i])==ms.getId())
					  masItemClassList1.add(ms);
			  }
			  if(masItemClassList1.size()==ItemClassIdForTopInDropDown.length)
				  break;
			}
			
			masItemClassList.removeAll(masItemClassList1);
			masItemClassList.addAll(0, masItemClassList1);
			
		}

			frequencyList = session.createCriteria(MasFrequency.class).add(
							Restrictions.eq("Status", "y")).addOrder(Order.asc("OrderNo")).list();
			
			
			map.put("itemConversionList", itemConversionList);
			map.put("masItemClassList", masItemClassList);
			map.put("frequencyList", frequencyList);
			
			
			return map;
			
		}
		
		public Map<String, Object> submitOPDVaccineDetails(Map mapForDS) {
			
			Map<String, Object> map = new HashMap<String, Object>();
			Session session = (Session) getSession();
			List<Integer> itemIdList = (List<Integer>) mapForDS.get("itemIdList");
			List<Integer> classificationList = (List<Integer>) mapForDS.get("classificationList");
			List<Integer> frequencyList = (List) mapForDS.get("frequencyList");
			List<String> otherMedicineList = (List) mapForDS.get("otherMedicineList");
		
			List<Integer> itemConversionList = (List) mapForDS.get("itemConversionList");
			List<Integer> itemClassList = (List) mapForDS.get("itemClassList");
			List<String> itemDispensaryList = (List) mapForDS.get("itemDispensaryList");
			List<BigDecimal> uomQtyList =(List) mapForDS.get("uomQtyList");
			List<String> ctList = (List) mapForDS.get("ctList");
			List<String> dosageList = (List) mapForDS.get("dosageList");
			List<Integer> totalList = (List) mapForDS.get("totalList");
			List<Integer> noOfDaysList = (List) mapForDS.get("noOfDaysList");
			List<String> remarksList = (List) mapForDS.get("remarksList");
			List<String> chargeCodeIdList = (List) mapForDS.get("chargeCodeIdList");
			List<String> investigationDateList = (List) mapForDS.get("investigationDate");
			
			boolean dublicateVisit = false;	
			boolean succesfullyAdded = false;	
			int count = 0;
			Box box = null;
			if(mapForDS.get("box")!=null)
			box = (Box)mapForDS.get("box");
			if (box.getInt("count") != 0) {
				count = (Integer) box.getInt("count");
			}
			int hinId = 0;
			int departmentId = box.getInt("departmentId");
			int visitId = box.getInt("visitId");
			int hospitalId = box.getInt("hospitalId");
			int userId = box.getInt("userId");
			int empId = box.getInt("empId");
			int priority = 0;
			int precriptionCount  = 0;
			
			if(mapForDS.get("priority") != null){
			 priority = (Integer)mapForDS.get("priority");
			}
			Date consultationDateToInsert = HMSUtil
					.convertStringTypeDateToDateType(box.getString("consultationDate"));
			String consultationTime = box.getString("consultationTime");
			
			List<OpdVaccinationPlan> vaccinationPlanList = new ArrayList<OpdVaccinationPlan>();
			//	List<PhMemberSurvey> immunizationList = new ArrayList<PhMemberSurvey>();
				List<OpdVaccinMst> vaccineList = new ArrayList<OpdVaccinMst>();
				List<OpdVaccinationPlan> existingVaccinationPlanList = new ArrayList<OpdVaccinationPlan>();
				List<Patient> patientList = new ArrayList<Patient>();
				List<PatientPrescriptionDetails> patientPrescriptionDetailsList = null;
				List<InjAppointmentDetails> injAppointmentDetailsList = null;

			
			
			Transaction tx = null;

			try {
				Visit visitObj = new Visit();
				visitObj.setId(visitId);
				List<Visit> visitList =  session.createCriteria(Visit.class)
						.add(Restrictions.eq("Id", visitId))
						.list();
				
				
				tx = session.beginTransaction();
				org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
				//vaccine details
				
			
				Visit visitUpdate=(Visit) hbt.load(Visit.class, visitId);
				
				if(visitList.size() >0)
				{
					if(visitList.get(0).getPrescriptionCounter()==null)
						{
						visitUpdate.setPrescriptionCounter(1);
						precriptionCount = 1;
						}
					else
						precriptionCount = visitList.get(0).getPrescriptionCounter();
					
					
				}
				
			if(visitList.size()>0 && precriptionCount ==1)
				{
	
				hinId = visitList.get(0).getHin().getId();
				
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(departmentId);
				Users users = new Users();
				users.setId(userId);
				MasEmployee masEmployee = new MasEmployee();
				masEmployee.setId(empId);
				MasHospital masHospital =  new MasHospital();
				masHospital.setId(hospitalId);
				Patient patient = new Patient();
				patient.setId(hinId);
				
				
				if(!box.getString("allergies").isEmpty()){
					Patient patientUpdate = (Patient) hbt.load(Patient.class, hinId);
					patientUpdate.setDrugAllergies(box.getString("allergies"));
					hbt.update(patientUpdate);
				}
				
				
				for (int i = 1; i <= count; i++) {
					
					if (box.getString("checkItem" + i)!=null &&box.getString("checkItem" + i).equals("Y")) {

					if (box.getString("completionDate" + i) != null
														&& !box.getString("completionDate" + i).equals(
																"")) {
													OpdVaccinationPlan vaccinationPlan = new OpdVaccinationPlan();
					vaccinationPlan.setStatus("y");
													if (box.getString("completionDate" + i) != null
															&& !box.getString("completionDate" + i)
																	.equals("")) {
														vaccinationPlan.setVaccinDate(HMSUtil
																.convertStringTypeDateToDateType(box
																		.getString("completionDate" + i)));
													}
													if (box.getInt("vaccineId" + i) != 0) {
														MasVaccineItem masVaccine = new MasVaccineItem();
														masVaccine.setId(box.getInt("vaccineId" + i));
														vaccinationPlan.setVaccin(masVaccine);
													}
													if (box.getString("vaccineRemarks" + i) != null
															&& !box.getString("vaccineRemarks" + i).equals("")) {
														vaccinationPlan.setRemarks(box
																.getString("vaccineRemarks" + i));
													}
													if (box.getInt("hinId") != 0) {
														vaccinationPlan.setHin(patient);
													}
													vaccinationPlan.setHospital(masHospital);
													vaccinationPlan.setLastChgDate(consultationDateToInsert);
													vaccinationPlan.setLastChgTime(consultationTime);
													vaccinationPlan.setLastChgBy(users);
													vaccinationPlan.setDepartment(masDepartment);
													vaccinationPlan.setVisit(visitObj);
													//System.out.println("jhj"+vaccinationPlan.getVisit().getId() +" dd "+visitId);
													if(!box.getString("vaccine_source" + i).isEmpty())
													vaccinationPlan.setVaccineSource(box.getString("vaccine_source" + i));
													hbt.save(vaccinationPlan);

													int vaccinationPlanId = vaccinationPlan.getId();
					}}}
				//end 
				
				
				
				OpdPatientDetails opdPatientDetails =null;
			/*	if(opdPatientDetailsList.size() >0)
					 opdPatientDetails = (OpdPatientDetails) hbt.load(OpdPatientDetails.class, opdPatientDetailsList.get(0).getId()); 
				else*/
				 opdPatientDetails = new OpdPatientDetails();
				
				 visitUpdate.setWorkingDiagnosis("Vaccination");
				visitUpdate.setVisitStatus("C");
				if(priority != 0){
					visitUpdate.setPriority(priority);
				}
				visitUpdate.setAddEditDate(consultationDateToInsert);
				visitUpdate.setPrescriptionCounter(1);
				hbt.update(visitUpdate);
				
				opdPatientDetails.setVisit(visitObj);
				opdPatientDetails.setHospital(masHospital);
				opdPatientDetails.setConsultationTime(consultationTime);
				opdPatientDetails.setConsultationDate(consultationDateToInsert);
				opdPatientDetails.setInitialDiagnosis("Vaccination");
				opdPatientDetails.setOpdDate(consultationDateToInsert);
				opdPatientDetails.setOpdTime(consultationTime);
				opdPatientDetails.setDepartment(masDepartment);
				opdPatientDetails.setEmployee(masEmployee);
				opdPatientDetails.setDepartment(masDepartment);
				opdPatientDetails.setInitialDiagnosis("Vaccination");
				opdPatientDetails.setIcd("Not available in ICD");
				hbt.save(opdPatientDetails);
				
				//
				
				DischargeIcdCode dischargeIcdCode = new DischargeIcdCode();
				dischargeIcdCode.setHin(patient);
									MasIcd masIcd = new MasIcd();
					dischargeIcdCode.setIcd(new MasIcd(Integer.parseInt(HMSUtil.getProperties("adt.properties", "ICDIdForNotAvailble"))));
											dischargeIcdCode
													.setAddEditDate(consultationDateToInsert);
											dischargeIcdCode.setAddEditTime(consultationTime);
											dischargeIcdCode.setStatus("y");
											dischargeIcdCode.setDiagnosisStatus("p");
											dischargeIcdCode.setVisit(visitObj);
											dischargeIcdCode.setOpdPatientDetails(opdPatientDetails);
											hbt.save(dischargeIcdCode);
				
				OpdPatientHistory opdPatientHistory = new OpdPatientHistory();
				opdPatientHistory.setDepartment(masDepartment);
				opdPatientHistory.setHospital(masHospital);
				opdPatientHistory.setHin(patient);
				opdPatientHistory.setLastChgTime(consultationTime);
				opdPatientHistory.setStatus("y");
				opdPatientHistory.setLastChgDate(consultationDateToInsert);
				opdPatientHistory.setPresentComplain("Vaccination");
				opdPatientHistory.setIpOpPacStatus("OP");
				opdPatientHistory.setOpdPatientDetails(opdPatientDetails);

						hbt.save(opdPatientHistory);
				
				
				PatientPrescriptionHeader patientPrescriptionHeader = new PatientPrescriptionHeader();
				int item_class_id = 0;
				String nipStatus=null;
				if(itemIdList.size() > 0){
					patientPrescriptionHeader.setNipStatus("n");
					patientPrescriptionHeader.setHin(patient);
					
					patientPrescriptionHeader.setDepartment(masDepartment);
					Visit visit = new Visit();
					visit.setId(visitId);
					patientPrescriptionHeader.setVisit(visit);
				
					patientPrescriptionHeader.setHospital(masHospital);
					patientPrescriptionHeader.setStatus("p");
					patientPrescriptionHeader
							.setPrescriptionDate(consultationDateToInsert);
					patientPrescriptionHeader.setPrescriptionTime(consultationTime);
				
					MasEmployee employee = new MasEmployee();
					employee.setId(empId);
					patientPrescriptionHeader.setEmp(employee);
					
				
		        	Map<String, Object> adMap = new HashMap<String, Object>();
				      adMap.put("tableObjectName", "PATIENT_PRESCRIPTION_HEADER");            
			            adMap.put("isHospitalWise", "y");
			            adMap.put("hospitalId", hospitalId);
			            adMap.put("isYearly", "n");            
			            adMap.put("isMonthly", "n");
			            adMap.put("isPrefix", "n");
			
			        int prescriptionNo = Integer.parseInt(HMSUtil.generateTransactionSequence(adMap, session, hbt));
					patientPrescriptionHeader.setPrescriptionNo(prescriptionNo);
					patientPrescriptionHeader.setOpdPatientDetails(opdPatientDetails);
					
			
					String sqlItemId="";
			
					for (int i = 0; i < itemIdList.size(); i++) {
						
						int itemId = (Integer)itemIdList.get(i);;
						if(i==0){
							sqlItemId=""+itemId;
						}else{
							sqlItemId +=" , "+itemId;
						}
				
					}
					List<MasStoreItem> masItemList=new ArrayList<MasStoreItem>();
					Properties properties = new Properties();
					URL resourcePath = Thread.currentThread().getContextClassLoader()
							.getResource("adt.properties");
					
					try {
						properties.load(resourcePath.openStream());
						String item_class_code = properties.getProperty("item_class_id");
						item_class_id=Integer.parseInt(item_class_code);
					} catch (Exception e) {
						e.printStackTrace();
					}
					if(!sqlItemId.equals(""))
						masItemList=hbt.find("select item from jkt.hms.masters.business.MasStoreItem as item join item.ItemCategory as ic where item.Id in ("+sqlItemId+") and ic.Id="+item_class_id+" and item.IssueFrom='i'");
					
					if(masItemList.size()>0){
						patientPrescriptionHeader.setInjectionStatus("p");
					}else{
						patientPrescriptionHeader.setInjectionStatus("n");
					}
				
					patientPrescriptionHeader.setOtherTreatment((String)mapForDS.get("otherTreatment"));
					
			            int ItemClassificationIdForNIP = 0;
						ItemClassificationIdForNIP = Integer.parseInt(HMSUtil.getValuesFromPropertiesFile("adt.properties", "ItemClassificationId"));
			
		
						for(int iCId :classificationList)
						{
							if(iCId==ItemClassificationIdForNIP)
							{
								patientPrescriptionHeader.setNipStatus("y");
								nipStatus ="y";
								break;
							}
						}
				    patientPrescriptionHeader.setOtherTreatment((String)mapForDS.get("otherTreatment"));
					hbt.save(patientPrescriptionHeader);
				}


				List<PatientPrescriptionDetails> previousApprovedNipDetails = null;
				if (itemIdList.size() > 0 ) {
					for (int i = 0; i < itemIdList.size(); i++) {
						if(itemIdList.get(i) !=0){
						//List<MasStoreItem> itemCodeList = new ArrayList<MasStoreItem>();
							
						if(nipStatus!=null && nipStatus.equals("y") && classificationList.get(i)==2){
							Calendar cal = GregorianCalendar.getInstance();
							cal.add( Calendar.DAY_OF_YEAR, - Integer.parseInt(HMSUtil.getProperties("adt.properties", "ValidatedDaysForNipAprroval")));
							Date nipValidatedDate = cal.getTime();
							
							previousApprovedNipDetails = session.createCriteria(PatientPrescriptionDetails.class).createAlias("Prescription", "hd")
									.add(Restrictions.eq("hd.Hin.Id", hinId)).add(Restrictions.eq("Item.Id", itemIdList.get(i)))
									.add(Restrictions.eq("hd.NipStatus","A").ignoreCase()).add(Restrictions.ge("hd.PrescriptionDate",nipValidatedDate))
									.list();
							if(previousApprovedNipDetails.size()>0)
							{
								nipStatus ="A";
								patientPrescriptionHeader.setNipStatus("A");
								patientPrescriptionHeader.setNipApprovedBy(previousApprovedNipDetails.get(0).getPrescription().getNipApprovedBy());
								hbt.saveOrUpdate(patientPrescriptionHeader);
							}
						    		
							}
						PatientPrescriptionDetails patientPrescriptionDetails = new PatientPrescriptionDetails();
						if(itemIdList.get(i) != null){
							MasStoreItem masStoreItem = new MasStoreItem();
							masStoreItem.setId(itemIdList.get(i));
						patientPrescriptionDetails.setItem(masStoreItem);
						}
						if (frequencyList.get(i) != null && !frequencyList.get(i).equals("")) {
							MasFrequency masFrequency = new MasFrequency();
							masFrequency.setId(frequencyList.get(i));
							patientPrescriptionDetails.setFrequency(masFrequency);
							}
							if (dosageList.get(i) != null && !dosageList.get(i).equals("") && !dosageList.get(i).equals("0")) {
								patientPrescriptionDetails.setDosage(dosageList.get(i));
							}else{
								patientPrescriptionDetails.setDosage("0");
							}
							if (remarksList.get(i) != null && !remarksList.get(i).equals("")) {
								patientPrescriptionDetails.setRemarks(remarksList.get(i));
							}
					
							if (noOfDaysList.get(i) != null && !noOfDaysList.get(i).equals("")) {
								patientPrescriptionDetails.setNoOfDays(noOfDaysList.get(i));
							}
						
						
							if (totalList.get(i) != null && !totalList.get(i).equals("") && totalList.get(i) != 0) {
								patientPrescriptionDetails.setTotal(totalList.get(i));
							}else{
								patientPrescriptionDetails.setTotal(1);
							}
							patientPrescriptionDetails.setGivenQty(0);
						
						patientPrescriptionDetails.setPrescription(patientPrescriptionHeader);
						patientPrescriptionDetails.setDetailStatus("a");
						
						List<MasStoreItem> storeItemList=new ArrayList<MasStoreItem>();
						Properties properties = new Properties();
						URL resourcePath = Thread.currentThread().getContextClassLoader().getResource("adt.properties");
						try {
							properties.load(resourcePath.openStream());
							String item_class_code = properties.getProperty("item_class_id");
							item_class_id=Integer.parseInt(item_class_code);
						} catch (Exception e) {
							e.printStackTrace();
						}
						storeItemList=hbt.find("select item from jkt.hms.masters.business.MasStoreItem as item join item.ItemClass as ic where item.Id="+itemIdList.get(i)+" and ic.Id="+item_class_id+" and item.IssueFrom='i'");
						if(storeItemList.size() > 0){
							patientPrescriptionDetails.setInjectionStatus("p");
						}else{
							patientPrescriptionDetails.setInjectionStatus("n");
						}
		
						
						hbt.save(patientPrescriptionDetails);
						
							//prevent insulin for nursing station and available in pharmacy only in readonly mod
						if(!checkForInsulinInjection(itemIdList.get(i))){
								if(storeItemList.size()>0){
									
									
									if(session.createCriteria(MasStoreItem.class).add(Restrictions.eq("Id", itemIdList.get(i))).add(Restrictions.eq("IssueFrom", "I")).list().size()>0){
											
									
									List<InjAppointmentHeader> injectionRegisterList=new ArrayList<InjAppointmentHeader>();
									injectionRegisterList=hbt.find("select inj from jkt.hms.masters.business.InjAppointmentHeader as inj join inj.Visit as visit where visit.Id="+visitId);
									
									InjAppointmentHeader injectionAppointment = new InjAppointmentHeader();
									
									 
									if(injectionRegisterList.size()>0){
										for (InjAppointmentHeader injectionRegisterTemp : injectionRegisterList) {
											injectionAppointment.setId(injectionRegisterTemp.getId());
										}
									}else{
										Patient patientInj = new Patient();
										patientInj.setId(hinId);
										injectionAppointment.setHin(patientInj);
										Visit visitInj = new Visit();
										visitInj.setId(visitId);
										injectionAppointment.setVisit(visitInj);
										MasHospital masHospitalInj = new MasHospital();
										masHospitalInj.setId(hospitalId);
										injectionAppointment.setHospital(masHospitalInj);
										
										injectionAppointment.setStatus("p");
										injectionAppointment.setLastChgTime(consultationTime);
										injectionAppointment.setLastChgBy(users);
										injectionAppointment.setLastChgDate(consultationDateToInsert);
										injectionAppointment.setAppointmentDate(consultationDateToInsert);
										injectionAppointment.setPrescription(patientPrescriptionHeader);
										hbt.save(injectionAppointment);
										
									}
												InjAppointmentDetails injAppointmentDetails = new InjAppointmentDetails();
												//injAppointmentDetails.setAppointmentTime(time);
												injAppointmentDetails.setInjAppointmentDate(new Date());
												injAppointmentDetails.setDose(String.valueOf(dosageList.get(i)));
												
												MasFrequency frequency = new MasFrequency();
												frequency.setId(frequencyList.get(i));
												injAppointmentDetails.setFrequency(frequency);
												
												/*if(routeOfAdministration!=null)
												injAppointmentDetails.setRoute(routeOfAdministration.getRouteName());
												*/
												 
												MasStoreItem item = new MasStoreItem();
												item.setId(itemIdList.get(i));
												
												
												
													injAppointmentDetails.setItem(item);
													injAppointmentDetails.setInjAppointmentHeader(injectionAppointment);
													injAppointmentDetails.setNoOfDays(noOfDaysList.get(i));
													injAppointmentDetails.setPatientPrescriptionDetails(patientPrescriptionDetails);
													injAppointmentDetails.setStatus("p");
													injAppointmentDetails.setFinalStatus("n");
													hbt.save(injAppointmentDetails);
									
								  }
								}
						}
						//end injectionappointment
						
				

					}
					}
				}

				if(otherMedicineList != null && otherMedicineList.size() > 0){
					String sqlItemId="";
					int itemId = 0;
			
					String otherItem = "";
					if(otherMedicineList.size() >0){
						patientPrescriptionHeader.setOtherTreatment((String)mapForDS.get("otherTreatment"));
						if(patientPrescriptionHeader.getId()==null)
						{
						
							patientPrescriptionHeader.setHin(patient);
						
							patientPrescriptionHeader.setDepartment(masDepartment);
							Visit visit = new Visit();
							visit.setId(visitId);
							patientPrescriptionHeader.setVisit(visit);
					
							patientPrescriptionHeader.setHospital(masHospital);
							patientPrescriptionHeader.setStatus("p");
							patientPrescriptionHeader
									.setPrescriptionDate(consultationDateToInsert);
							patientPrescriptionHeader.setPrescriptionTime(consultationTime);
							
							MasEmployee employee = new MasEmployee();
							employee.setId(empId);
							patientPrescriptionHeader.setEmp(employee);
							//int prescriptionNo=getTransactionSequenceNoForPrescriptionNo(mapForDS);
							Map<String, Object> adMap = new HashMap<String, Object>();
						      adMap.put("tableObjectName", "PATIENT_PRESCRIPTION_HEADER");            
					            adMap.put("isHospitalWise", "y");
					            adMap.put("hospitalId", 1);
					            adMap.put("isYearly", "n");            
					            adMap.put("isMonthly", "n");
					            adMap.put("isPrefix", "n");
					
					        int prescriptionNo = Integer.parseInt(HMSUtil.generateTransactionSequence(adMap, session, hbt));
							
						

							patientPrescriptionHeader.setPrescriptionNo(prescriptionNo);
							patientPrescriptionHeader.setOpdPatientDetails(opdPatientDetails);
					
							patientPrescriptionHeader.setInjectionStatus("n");
							patientPrescriptionHeader.setOtherTreatment((String)mapForDS.get("otherTreatment"));
							patientPrescriptionHeader.setNipStatus("y");
							patientPrescriptionHeader.setNipApprovedBy(null);
							hbt.save(patientPrescriptionHeader);
						}
						else{
						patientPrescriptionHeader.setNipStatus("y");
						patientPrescriptionHeader.setNipApprovedBy(null);
						hbt.update(patientPrescriptionHeader);}
						String nipCode = null;
						int itemClassificationId = 0;
						int groupId = 0;
						int sectionId = 0;
						int itemTypeId= 0;
						try
						{
							nipCode = HMSUtil.getProperties("adt.properties", "ItemClassificationCodeNIP");
							itemClassificationId = Integer.parseInt(HMSUtil.getProperties("adt.properties", "ItemClassificationId"));
							groupId = Integer.parseInt(HMSUtil.getProperties("adt.properties", "ItemGroupId"));
							sectionId = Integer.parseInt(HMSUtil.getProperties("adt.properties", "SectionIdForDrugs"));
							itemTypeId = Integer.parseInt(HMSUtil.getProperties("adt.properties", "ItemTypeId"));
						}
						catch(Exception e)
						{
							e.printStackTrace();
						}
						int totalNip = session.createCriteria(MasStoreItem.class).createAlias("ItemClassification", "ic").add(Restrictions.eq("ic.Classification", nipCode)).add(Restrictions.eq("Hospital.Id", hospitalId)).list().size();
						
							int k=0;
					for(int i = itemIdList.size(); i <otherMedicineList.size()+itemIdList.size(); i++){
						MasStoreItem masItem = new MasStoreItem();
						if(otherMedicineList.get(k) != null && !otherMedicineList.get(k).equals("")){
							otherItem =(String)otherMedicineList.get(k);
							masItem.setNomenclature(otherMedicineList.get(k));
							MasStoreSection masStoreSection = new MasStoreSection();
							masStoreSection.setId(sectionId);
							masItem.setSection(masStoreSection);
							masItem.setStatus("y");
							masItem.setBrandedGeneric("B");
							
							if (itemConversionList.get(i) != null && !itemConversionList.get(i).equals("")) {
								MasStoreItemConversion masStoreItemConversion = new MasStoreItemConversion();
								masStoreItemConversion.setId(itemConversionList.get(i));
								masItem.setItemConversion(masStoreItemConversion);
								}
							
							if (itemClassList.get(i) != null && !itemClassList.get(i).equals("")) {
								 MasItemClass masItemClass = new MasItemClass();
								 masItemClass.setId(itemClassList.get(i));
								masItem.setItemClass(masItemClass);
								}
							
							if (itemDispensaryList.get(i) != null && !itemDispensaryList.get(i).equals("")) {
								masItem.setDispUnit(itemDispensaryList.get(i));
								}
							
							if (uomQtyList .get(i) != null && !uomQtyList .get(i).equals("")) {
								masItem.setADispQty(uomQtyList .get(i));
								}
							
							totalNip++;
							masItem.setPvmsNo(nipCode+totalNip);
							
							MasItemType masItemType = new MasItemType();
							masItemType.setId(itemTypeId);
							masItem.setItemType(masItemType);
					
							masItem.setHospital(masHospital);
							masItem.setHighValueDrug("n");
							MasItemClassification Mic = new MasItemClassification();
							Mic.setId(itemClassificationId);
							masItem.setItemClassification(Mic);
							MasStoreGroup msgrp = new MasStoreGroup();
							msgrp.setId(groupId);
							masItem.setGroup(msgrp);
							//masItem.setLastChgBy(userName);
							masItem.setLastChgDate(consultationDateToInsert);
							masItem.setLastChgTime(consultationTime);
							
						
							
							hbt.save(masItem);
							

					
						PatientPrescriptionDetails patientPrescriptionDetails = new PatientPrescriptionDetails();
						if(masItem.getId() != null){
							MasStoreItem masStoreItem = new MasStoreItem();
							masStoreItem.setId(masItem.getId());
						patientPrescriptionDetails.setItem(masStoreItem);
						}
						if (frequencyList.get(i) != null && !frequencyList.get(i).equals("")) {
						MasFrequency masFrequency = new MasFrequency();
						masFrequency.setId(frequencyList.get(i));
						patientPrescriptionDetails.setFrequency(masFrequency);
						}
						if (dosageList.get(i) != null && !dosageList.get(i).equals("")) {
							patientPrescriptionDetails.setDosage(dosageList.get(i));
						}
						if (remarksList.get(i) != null && !remarksList.get(i).equals("")) {
						patientPrescriptionDetails.setRemarks(remarksList.get(i));
						}
						//patientPrescriptionDetails.setType(typeLeftRightList.get(i));
						if (noOfDaysList.get(i) != null && !noOfDaysList.get(i).equals("")) {
							patientPrescriptionDetails.setNoOfDays(noOfDaysList.get(i));
						}
					
						//patientPrescriptionDetails.setInstruction(instructionList.get(i));
						if (totalList.get(i) != null && !totalList.get(i).equals("")) {
							patientPrescriptionDetails.setTotal(totalList.get(i));
						}
						patientPrescriptionDetails.setPrescription(patientPrescriptionHeader);
						patientPrescriptionDetails.setGivenQty(0);
						patientPrescriptionDetails.setDetailStatus("a");
						List<MasStoreItem> storeItemList=new ArrayList<MasStoreItem>();
						patientPrescriptionDetails.setInjectionStatus("n");
						
						if(ctList.get(i).equals("y")){
							patientPrescriptionDetails.setCt("yes");
						}else{
							patientPrescriptionDetails.setCt("no");
						}
						
						
						hbt.save(patientPrescriptionDetails);
						
						/**
						 * This Code is use for Injection Appointment
						 * Code By Ritu Sahu
						 * Date 07 Nov 2011
						 */
						
						if(storeItemList.size()>0){
							List<InjAppointmentHeader> injectionRegisterList=new ArrayList<InjAppointmentHeader>();
							injectionRegisterList=hbt.find("select inj from jkt.hms.masters.business.InjAppointmentHeader as inj join inj.Visit as visit where visit.Id="+visitId);
							InjAppointmentHeader injectionAppointment = new InjAppointmentHeader();
							
							 /* if(injectionRegisterList.size()>0) means , Data is already available In InjectionRegister table  */
							 
							if(injectionRegisterList.size()>0){
								for (InjAppointmentHeader injectionRegisterTemp : injectionRegisterList) {
									injectionAppointment.setId(injectionRegisterTemp.getId());
								}
							}else{
								injectionAppointment.setAppointmentDate(new Date());
								Patient patientInj = new Patient();
								patientInj.setId(hinId);
								injectionAppointment.setHin(patientInj);
								Visit visitInj = new Visit();
								visitInj.setId(visitId);
								injectionAppointment.setVisit(visitInj);
								MasHospital masHospitalInj = new MasHospital();
								masHospitalInj.setId(hospitalId);
								injectionAppointment.setHospital(masHospitalInj);
								
								injectionAppointment.setStatus("p");
								injectionAppointment.setLastChgTime(consultationTime);
							/*	Users user = new Users();
								user.setId(userId);*/
								injectionAppointment.setLastChgBy(users);
								injectionAppointment.setLastChgDate(consultationDateToInsert);
								injectionAppointment.setPrescription(patientPrescriptionHeader);
								hbt.save(injectionAppointment);
							}
							int freqCount=0;
							if(frequencyList.get(i) > 10){
								freqCount = 1; /* if frequency is greater than 10 then only one entry will go in Injection Appointment table*/
							}else{
								freqCount = frequencyList.get(i);
							}
							if(freqCount > 0){	
								for (int j = 1; j <= freqCount; j++) {
									InjAppointmentDetails injAppointmentDetails = new InjAppointmentDetails();
									injAppointmentDetails.setAppointmentTime(consultationTime);
									injAppointmentDetails.setDose(dosageList.get(i));
									MasFrequency frequency = new MasFrequency();
									frequency.setId(frequencyList.get(i));
									injAppointmentDetails.setFrequency(frequency);
									
									MasStoreItem item = new MasStoreItem();
									item.setId(itemIdList.get(i));
									injAppointmentDetails.setItem(item);
									injAppointmentDetails.setInjAppointmentHeader(injectionAppointment);
									injAppointmentDetails.setNoOfDays(noOfDaysList.get(i));
									injAppointmentDetails.setPatientPrescriptionDetails(patientPrescriptionDetails);
									injAppointmentDetails.setStatus("p");
									hbt.save(injAppointmentDetails);
								}
							}
						}
						}
						/**
						 * END Of COde
						 * This Code is use for Injection
						 * Code By Ritu Sahu
						 * Date 07 Nov 2011
						 */
						k++;
						
					}
				}
				}
				
				//investigation
				
				if (chargeCodeIdList.size() > 0) {
					String patientTypeNameForHAL = null;
					String patientTypeNameForOther = null;
					String dgOrderBillingStatus = null;
			
						 patientTypeNameForHAL =  HMSUtil.getProperties("adt.properties", "patientTypeNameForHAL");
						 patientTypeNameForOther = HMSUtil.getProperties("adt.properties", "patientTypeNameForOther");
					
					Criteria crit = session.createCriteria(Patient.class).add(
							Restrictions.eq("Id", hinId));
					patientList = crit.list();
								
					
					if(patientList.size()!=0)
					{
						if(patientList.get(0).getPatientType().getPatientTypeName().equals(patientTypeNameForHAL))
						{
							dgOrderBillingStatus ="y";
						}
						else if(patientList.get(0).getPatientType().getPatientTypeName().equals(patientTypeNameForOther))
						{
							if(patientList.get(0).getBillable().equals("y"))
							    dgOrderBillingStatus ="n";
							else if(patientList.get(0).getBillable().equals("n"))
								dgOrderBillingStatus ="y";
						}
					}

					  Map<String, Object> adMap = new HashMap<String, Object>();
				      adMap.put("tableObjectName", "DgOrderhd");            
			            adMap.put("isHospitalWise", "y");
			            adMap.put("hospitalId", hospitalId);
			            adMap.put("isYearly", "n");            
			            adMap.put("isMonthly", "n");
			            adMap.put("isPrefix", "n");
					//List<String> headerinvestigationDateList =  (List) mapForDS.get("investigationDate");
					
					List<String> insertedDateList =  new ArrayList<>();
					for(String investigtionDate: investigationDateList)
					{
					if(!insertedDateList.contains(investigtionDate))	{
						insertedDateList.add(investigtionDate);
						
						DgOrderhd dgOrderhd = new DgOrderhd();
						dgOrderhd.setOrderDate(HMSUtil.convertStringTypeDateToDateType(investigtionDate));
						dgOrderhd.setOrderTime(consultationTime);
						dgOrderhd.setHospital(masHospital);
						dgOrderhd.setHin(patient);
						dgOrderhd.setDepartment(masDepartment);
						if (empId != 0) {
							masEmployee.setId(empId);
							dgOrderhd.setPrescribedBy(masEmployee);
						}
					
						dgOrderhd.setBillingStatus(dgOrderBillingStatus);
						dgOrderhd.setPatientType("OP");
						dgOrderhd.setTestType("Regular");
						//dgOrderhd.setCreatedby(userName);
						dgOrderhd.setCreatedon(consultationDateToInsert);
				       String orderSeqNo = HMSUtil.generateTransactionSequence(adMap, session, hbt);
						    dgOrderhd.setOrderNo(orderSeqNo);
							dgOrderhd.setVisit(visitObj);
						//dgOrderhd.setClinicalNote(clinicalNotes1);
						dgOrderhd.setOrderStatus("P");
						dgOrderhd.setLabOrderStatus("P");
						dgOrderhd.setLastChgBy(users);
						dgOrderhd.setLastChgDate(consultationDateToInsert);
						dgOrderhd.setLastChgTime(consultationTime);
						//dgOrderhd.setInvestigationRequestionNo(patientInvestigationHeader);
						if(mapForDS.get("otherInvestigation")!=null)
						dgOrderhd.setOtherInvestigation(mapForDS.get("otherInvestigation").toString().trim());
				
						hbt.save(dgOrderhd);
				
						for (int i = 0; i < chargeCodeIdList.size(); i++) {
	
							if(investigtionDate.equals(investigationDateList.get(i))){
							
							MasChargeCode masChargeCode = new MasChargeCode();
							masChargeCode.setId(Integer.parseInt(chargeCodeIdList.get(i)));
							
												DgOrderdt dgOrderdt = new DgOrderdt();
												dgOrderdt.setOrderhd(dgOrderhd);
												masChargeCode.setId(Integer.parseInt(chargeCodeIdList.get(i)));
												dgOrderdt.setChargeCode(masChargeCode);
												//dgOrderdt.setOrderQty(quantityList.get(i));
												dgOrderdt.setBillingStatus(dgOrderBillingStatus);
												//dgOrderdt.setCreatedby(userName);
												//dgOrderdt.setCreatedon(consultationDateToInsert);
												dgOrderdt.setCreatedon(HMSUtil.convertStringTypeDateToDateType(investigtionDate));
												dgOrderdt.setLastChgBy(users);
												dgOrderdt.setLastChgDate(consultationDateToInsert);
												dgOrderdt.setLastChgTime(consultationTime);
												dgOrderdt.setMsgSent("n");
												// method written for taking out the values of mascharge
												// code and subcharge
												Map masChargeMap = getMasChargeCodeFromChargeId(Integer
														.parseInt(chargeCodeIdList.get(i)));
												MasChargeCode masChargeCodeObj = (MasChargeCode) masChargeMap
												.get("masChargeCode");
												int mainChargeId = masChargeCodeObj.getMainChargecode()
												.getId();
												int subChargeId = masChargeCodeObj.getSubChargecode()
												.getId();
												if (masChargeCodeObj.getMainChargecode()
														.getMainChargecodeCode().equalsIgnoreCase("Lab")) {
													dgOrderdt.setOrderStatus("P");
												} else {
													dgOrderdt.setOrderStatus("P");
												}
												MasMainChargecode masMainChargecode = new MasMainChargecode();
												masMainChargecode.setId(mainChargeId);
												dgOrderdt.setMainChargecode(masMainChargecode);
												MasSubChargecode masSubChargecode = new MasSubChargecode();
												masSubChargecode.setId(subChargeId);
												dgOrderdt.setSubChargeid(masSubChargecode);
											
												List<DgMasInvestigation> invList = new ArrayList<DgMasInvestigation>();
												invList = session.createCriteria(DgMasInvestigation.class).add(Restrictions.eq("ChargeCode.Id", Integer.parseInt(chargeCodeIdList.get(i)))).list();
												int invId=0;
												for(DgMasInvestigation list: invList)
												{
													invId = list.getId();
												}
												dgOrderdt.setInvestigation(new DgMasInvestigation(invId));
												//dgOrderdt.setInvestigationToMH(referToMhList.get(i));
												dgOrderdt.setInvestigationToMh("n");
												//dgOrderdt.setReferToMh(referToMhList.get(i));
												dgOrderdt.setReferToMh("n");
												hbt.save(dgOrderdt);
							}//end date comparision
						}//inner dt loop
					//	headerinvestigationDateList.removeAll(Arrays.asList(investigtionDate));
					}
					}//outer loop for hd
					
				}
				tx.commit();
				
				}
				else
					dublicateVisit= true;
			
			succesfullyAdded = true;
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}  
			map.put("dublicateVisit", dublicateVisit);
			map.put("succesfullyAdded", succesfullyAdded);
			return map;
			
		}

		
	
	public Map<String, Object> updateDeleteNISNIP(Map<String, Object> dataMap) {	
		Map<String,Object> map = new HashMap<String,Object>();
		Session	 session=(Session)getSession();
		/*Session	 session=(Session)getSession();
		Transaction tx=session.beginTransaction();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);*/
		
		Transaction tx = null;
		tx = session.beginTransaction();
				org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
		List<Visit> patientList = new ArrayList<Visit>();
		
		boolean result= false;
		Criteria crt=null;
		int hospitalId = (Integer)dataMap.get("hospitalId");
		Box box =(Box)dataMap.get("box");
		
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		
		PatientPrescriptionDetails ppDt = (PatientPrescriptionDetails)hbt.get(PatientPrescriptionDetails.class, box.getInt("dtId"));
		String currentTime= HMSUtil.currentTime();
				if(ppDt != null)
				{			
					if(box.getString("flag").equalsIgnoreCase("u") && box.getInt("freq")>0 && box.getInt("days")>0 && box.getInt("dosage")>0 && box.getInt("total")>0)
					{
						ppDt.setFrequency(new MasFrequency(box.getInt("freq")));
						ppDt.setNoOfDays(box.getInt("days"));
						ppDt.setDosage(box.getString("dosage"));
						ppDt.setTotal(box.getInt("total"));
						hbt.update(ppDt);
						result= true;
					}
					else if(box.getString("flag").equalsIgnoreCase("d"))
					{
						hbt.delete(ppDt);
						result= true;
					}
				
					tx.commit();
				}
				
			/*	QueueManagment queue=new QueueManagment();
				crt=session.createCriteria(QueueManagment.class)
						.createAlias("Visit", "visit")
						.createAlias("Hospital", "hosp")
						.add(Restrictions.eq("hosp.Id", hospitalId))
						.add(Restrictions.eq("visit.Id", visitId));
				
				if(crt.list() !=null && crt.list().get(0) !=null){
					queue=(QueueManagment) crt.list().get(0);
					queue.setOpVisitTime(currentTime);
					hbt.update(queue);
					hbt.refresh(queue);
					tx.commit();
					flag= true;
				}*/
								
				map.put("result", result);
				return map;
		}
	
	
	public Map<String, Object> getVaccineReport(Map<String, Object> mapForDS) {	
			Session session = (Session) getSession();
			List<Object[]> stockList = new ArrayList<Object[]>();
			Map<String, Object> map = new HashMap<String, Object>();
			Date fromDate = null;
			Date toDate = null;
			int hospitalId = (Integer)mapForDS.get("hospitalId");
			if (mapForDS.get("fromDate") != null && mapForDS.get("fromDate") != "")
					fromDate = HMSUtil.convertStringTypeDateToDateType(mapForDS.get("fromDate").toString());
			if (mapForDS.get("toDate") != null && mapForDS.get("toDate") != "")
					toDate = HMSUtil.convertStringTypeDateToDateType(mapForDS.get("toDate").toString());
System.out.println("f"+fromDate +" g="+toDate);
				int tokenNo=0;
				String patientName="";
				try {
					stockList = session.createCriteria(OpdVaccinationPlan.class).createAlias("Vaccin", "v").add(Restrictions.eq("Hospital.Id", hospitalId)).add(Restrictions.between("VaccinDate",fromDate, toDate))
							.setProjection(Projections.projectionList().add(Projections.count("v.VaccineName")).add(Projections.groupProperty("v.Id")).add(Projections.groupProperty("v.VaccineName")).add(Projections.groupProperty("VaccinDate"))).addOrder(Order.desc("VaccinDate")).list();
						System.out.println("stockList" +stockList.size());
				} catch (HibernateException e) {
					e.printStackTrace();
				}
				
				map.put("stockList", stockList);
				return map;
		}
}
